void sub_2429DE528(_Unwind_Exception *a1)
{
  uint64_t v1;

  dispatch_release(*(dispatch_object_t *)(v1 - 128));
  _Unwind_Resume(a1);
}

void ___ZN3AGX17UserShaderFactoryINS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE20compileFunction_ImplINS_18FragmentProgramKeyEEEvRKT_P29MTLCompileFunctionRequestDataRKNS5_21DriverRequestDataImplILb1EEEU13block_pointerFvRK20AGCDeserializedReplyRKNS_28CompileFunctionReplyMetadataERKNS5_19DriverReplyDataImplILb1EEEE_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void sub_2429DE5E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t ___ZN3AGX8Compiler14compileProgramINS_18FragmentProgramKeyE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_RKNS_28CompileFunctionReplyMetadataEE_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  v11[0] = a3;
  v11[1] = a4;
  v11[2] = a5;
  v11[3] = a6;
  v11[4] = a7;
  v11[5] = a8;
  v11[6] = a9;
  v11[7] = a10;
  return (*(uint64_t (**)(void, uint64_t, void *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), a2, v11, a4, a5, a6, a7, a8);
}

void AGX::Compiler::compileProgram<AGX::FragmentProgramKey,AGCDeserializedReply>(void **a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v33 = *MEMORY[0x263EF8340];
  size_t v25 = 0;
  v26 = 0;
  (*(void (**)(uint64_t, const void **, size_t *))(*(void *)a2 + 16))(a2, &v26, &v25);
  v8 = dispatch_data_create(v26, v25, 0, 0);
  [a3 setDriverKeyData:v8];
  if ([a3 airScript])
  {
    v23 = 0;
    size_t v24 = 0;
    dispatch_object_t object = dispatch_data_create_map((dispatch_data_t)[a3 airScript], (const void **)&v23, &v24);
    v9 = v23;
    uint64_t v10 = *v23;
    CC_SHA256_Init(&c);
    (**(void (***)(uint64_t, CC_SHA256_CTX *))a2)(a2, &c);
    *(void *)len = 0;
    data = 0;
    if (AGX::GetSerializedVertexFormat((AGX *)((char *)v9 + v10), &data, (size_t *)len, v11, v12))
    {
      v13 = data;
      CC_SHA256_Update(&c, data, len[0]);
      free(v13);
    }
    CC_SHA256_Final(md, &c);
    dispatch_release(object);
    v30[0] = *(_OWORD *)md;
    v30[1] = v32;
    [a3 setVendorPluginFunctionId:v30];
  }
  v21[0] = MEMORY[0x263EF8330];
  v21[1] = 3221225472;
  v21[2] = ___ZN3AGX8Compiler14compileProgramINS_18FragmentProgramKeyE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke;
  v21[3] = &unk_26516F810;
  v21[4] = a3;
  v21[5] = a4;
  if ([a3 function])
  {
    uint64_t v14 = mach_absolute_time();
    v15 = *a1;
    v19[0] = MEMORY[0x263EF8330];
    v19[1] = 3221225472;
    v19[2] = ___ZN3AGX8Compiler14compileProgramINS_18FragmentProgramKeyE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke_4;
    v19[3] = &unk_26516F860;
    v19[4] = v21;
    v19[5] = v14;
    [v15 compileFunctionRequest:a3 completionHandler:v19];
  }
  else
  {
    if ([a3 frameworkData] || objc_msgSend(a3, "pipelineOptions")) {
      AGX::Compiler::compileProgram<AGX::UserIntersectionProgramKey,AGCReplyArray>(AGX::UserIntersectionProgramKey const&,MTLCompileFunctionRequestData *,void({block_pointer})(AGCReplyArray const&,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,MTLCompilerError,NSString *,unsigned long long))::{lambda(void)#1}::operator()[abi:[AGX] Failed assertion __requestData.frameworkData && _requestData.pipelineOptions_]();
    }
    v20[0] = MEMORY[0x263EF8330];
    v20[1] = 3221225472;
    v20[2] = ___ZN3AGX8Compiler14compileProgramINS_18FragmentProgramKeyE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke_3;
    v20[3] = &unk_26516F838;
    v20[4] = v21;
    BOOL v16 = objc_msgSend((id)objc_msgSend(a3, "binaryArchives"), "count") == 0;
    v17 = *a1;
    uint64_t v18 = [a3 driverKeyData];
    if (v16) {
      objc_msgSend(v17, "compileRequest:pipelineCache:sync:completionHandler:", v18, objc_msgSend(a3, "pipelineCache"), objc_msgSend(a3, "sync"), v20);
    }
    else {
      objc_msgSend(v17, "compileRequest:binaryArchives:failOnBinaryArchiveMiss:pipelineCache:sync:completionHandler:", v18, objc_msgSend(a3, "binaryArchives"), 0, objc_msgSend(a3, "pipelineCache"), objc_msgSend(a3, "sync"), v20);
    }
  }
  dispatch_release(v8);
}

void sub_2429DE994(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,dispatch_object_t object)
{
}

void ___ZN3AGX23UserCommonShaderFactoryINS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE28createFragmentProgramVariantI27MTLRenderPipelineDescriptorEEvPT_P18AGXG17FamilyDevicemP25AGXG17FamilyBinaryArchiveP7NSArrayPNS1_15FragmentProgramEPKNS_21VertexProgramVaryingsEPU27objcproto16OS_dispatch_data8NSObjectbU13block_pointerFvPNS1_22FragmentProgramVariantE13ReflectionKeyP19NSMutableDictionary16MTLCompilerErrorP8NSStringSN_E_block_invoke_3(uint64_t a1, uint64_t a2, NSObject *a3)
{
  AGX::Program<AGX::HAL200::FragmentProgramVariant,AGX::FragmentProgramKey,AGX::HAL200::IndirectArgumentLayout,AGXG17FamilyIndirectArgumentBufferLayout>::signalPending(*(void *)(a1 + 40), *(void *)(a1 + 48), a3, a1 + 64, *(void **)(a1 + 32), a2);
  v4 = **(NSObject ***)(a1 + 56);

  dispatch_group_leave(v4);
}

void ___ZN3AGX23UserCommonShaderFactoryINS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE28createFragmentProgramVariantI27MTLRenderPipelineDescriptorEEvPT_P18AGXG17FamilyDevicemP25AGXG17FamilyBinaryArchiveP7NSArrayPNS1_15FragmentProgramEPKNS_21VertexProgramVaryingsEPU27objcproto16OS_dispatch_data8NSObjectbU13block_pointerFvPNS1_22FragmentProgramVariantE13ReflectionKeyP19NSMutableDictionary16MTLCompilerErrorP8NSStringSN_E_block_invoke_4(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  id v2 = *(id *)(*(void *)(a1 + 48) + 32);
  *(_OWORD *)dispatch_object_t object = 0u;
  memset(v7, 0, 26);
  v3 = AGX::Program<AGX::HAL200::FragmentProgramVariant,AGX::FragmentProgramKey,AGX::HAL200::IndirectArgumentLayout,AGXG17FamilyIndirectArgumentBufferLayout>::consolidate(*(os_unfair_lock_s **)(a1 + 56), *(void *)(a1 + 48), a1 + 64, object);
  uint64_t v4 = v3[1];
  long long v5 = *(_OWORD *)(a1 + 368);
  v8[0] = *(_OWORD *)(a1 + 352);
  v8[1] = v5;
  (*(void (**)(void, uint64_t, _OWORD *, void, void, void, id))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), v4, v8, *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40), v3[2], v3[3], v2);

  if (object[0]) {
    dispatch_release(object[0]);
  }
  if (object[1]) {
    (*((void (**)(dispatch_object_t))object[1]->isa + 1))(object[1]);
  }
}

void sub_2429DEB08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void __destroy_helper_block_e8_64c30_ZTSN3AGX18FragmentProgramKeyE(uint64_t a1)
{
  *(void *)(a1 + 64) = &unk_26F854050;
  id v2 = *(void **)(a1 + 320);
  if (v2)
  {
    *(void *)(a1 + 328) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 296);
  if (v3)
  {
    *(void *)(a1 + 304) = v3;
    operator delete(v3);
  }
  if ((*(char *)(a1 + 287) & 0x80000000) == 0)
  {
    if ((*(char *)(a1 + 263) & 0x80000000) == 0) {
      goto LABEL_7;
    }
LABEL_13:
    operator delete(*(void **)(a1 + 240));
    if ((*(char *)(a1 + 239) & 0x80000000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_14;
  }
  operator delete(*(void **)(a1 + 264));
  if (*(char *)(a1 + 263) < 0) {
    goto LABEL_13;
  }
LABEL_7:
  if ((*(char *)(a1 + 239) & 0x80000000) == 0) {
    goto LABEL_8;
  }
LABEL_14:
  operator delete(*(void **)(a1 + 216));
LABEL_8:
  *(void *)(a1 + 64) = off_26F852E48;
  uint64_t v4 = *(void **)(a1 + 80);
  if (v4)
  {
    *(void *)(a1 + 88) = v4;
    operator delete(v4);
  }
}

AGX::Impl::FragmentProgramKey *__copy_helper_block_e8_64c30_ZTSN3AGX18FragmentProgramKeyE(uint64_t a1, uint64_t a2)
{
  result = AGX::Impl::FragmentProgramKey::FragmentProgramKey((AGX::Impl::FragmentProgramKey *)(a1 + 64), (const AGX::Impl::FragmentProgramKey *)(a2 + 64));
  *(void *)(a1 + 64) = &unk_26F852E88;
  *(void *)(a1 + 344) = *(void *)(a2 + 344);
  return result;
}

void *AGX::Program<AGX::HAL200::FragmentProgramVariant,AGX::FragmentProgramKey,AGX::HAL200::IndirectArgumentLayout,AGXG17FamilyIndirectArgumentBufferLayout>::consolidate(os_unfair_lock_s *a1, uint64_t a2, uint64_t a3, void *a4)
{
  if (!*(unsigned char *)(a2 + 41)) {
    return (void *)a2;
  }
  if (!*(void *)(a2 + 8))
  {
    v8 = a4;
    uint64_t v10 = *(void *)(a2 + 24);
    a4[2] = *(void *)(a2 + 16);
    a4[3] = v10;
    *(void *)(a2 + 24) = 0;
    uint64_t v9 = *(NSObject **)a2;
    if (!*(void *)a2) {
      goto LABEL_9;
    }
LABEL_8:
    dispatch_release(v9);
    goto LABEL_9;
  }
  v7 = a1 + 422;
  os_unfair_lock_lock(a1 + 422);
  v8 = VectorMap<AGX::FragmentProgramKey,AGX::ProgramVariantEntry<AGX::HAL200::FragmentProgramVariant>,4u>::operator[]((uint64_t)a1, a3);
  if (*v8)
  {
    os_unfair_lock_unlock(v7);
    dispatch_group_wait((dispatch_group_t)*v8, 0xFFFFFFFFFFFFFFFFLL);
    uint64_t v9 = *(NSObject **)a2;
    if (!*(void *)a2) {
      goto LABEL_9;
    }
    goto LABEL_8;
  }
  v13 = dispatch_group_create();
  void *v8 = v13;
  dispatch_group_enter(v13);
  uint64_t v14 = *(void *)(a2 + 16);
  v15 = *(void **)(a2 + 24);
  v8[1] = *(void *)(a2 + 8);
  _OWORD v8[2] = v14;

  v8[3] = [v15 copy];
  if (v8[1])
  {

    v8[4] = 0;
  }
  else
  {
    *((unsigned char *)v8 + 40) = 0;
  }
  dispatch_group_leave((dispatch_group_t)*v8);
  *(void *)(a2 + 8) = 0;
  os_unfair_lock_unlock(v7);
  uint64_t v9 = *(NSObject **)a2;
  if (*(void *)a2) {
    goto LABEL_8;
  }
LABEL_9:
  uint64_t v11 = *(void *)(a2 + 8);
  if (v11) {
    (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
  }

  MEMORY[0x24566ED90](a2, 0x10A0C405D73F519);
  return v8;
}

void sub_2429DEDD0(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void *VectorMap<AGX::FragmentProgramKey,AGX::ProgramVariantEntry<AGX::HAL200::FragmentProgramVariant>,4u>::operator[](uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(unsigned int *)(a1 + 1360);
  if (v4)
  {
    uint64_t v5 = 0;
    uint64_t v6 = *(void *)(a1 + 1352);
    uint64_t v7 = *(void *)(a2 + 280);
    uint64_t v8 = v6;
    while (!AGX::Impl::FragmentProgramKey::operator==(a2, v8) || v7 != *(void *)(v8 + 280))
    {
      ++v5;
      v8 += 288;
      if (v4 == v5) {
        goto LABEL_8;
      }
    }
    uint64_t v9 = (void *)(v6 + 48 * v5);
  }
  else
  {
    uint64_t v6 = *(void *)(a1 + 1352);
LABEL_8:
    uint64_t v10 = *(void **)(v6 + 1344);
    if (v10)
    {
      uint64_t v11 = *(void *)(a2 + 280);
      unsigned int v12 = 1;
      while (1)
      {
        if (AGX::Impl::FragmentProgramKey::operator==(a2, (uint64_t)v10) && v11 == v10[35])
        {
          unsigned int v12 = 0;
          goto LABEL_29;
        }
        if (AGX::Impl::FragmentProgramKey::operator==(a2, (uint64_t)(v10 + 36)) && v11 == v10[71]) {
          goto LABEL_29;
        }
        if (AGX::Impl::FragmentProgramKey::operator==(a2, (uint64_t)(v10 + 72)) && v11 == v10[107]) {
          break;
        }
        if (AGX::Impl::FragmentProgramKey::operator==(a2, (uint64_t)(v10 + 108)) && v11 == v10[143])
        {
          unsigned int v12 = 3;
          goto LABEL_29;
        }
        uint64_t v10 = (void *)v10[168];
        if (!v10) {
          goto LABEL_20;
        }
      }
      unsigned int v12 = 2;
LABEL_29:
      uint64_t v9 = &v10[6 * v12];
    }
    else
    {
LABEL_20:
      if (v4 == 4) {
        operator new();
      }
      uint64_t v13 = v6 + 288 * v4;
      *(_DWORD *)(v13 + 8) = *(_DWORD *)(a2 + 8);
      if (v13 != a2) {
        std::vector<unsigned int>::__assign_with_size[abi:nn180100]<unsigned int *,unsigned int *>((void *)(v13 + 16), *(char **)(a2 + 16), *(char **)(a2 + 24), (uint64_t)(*(void *)(a2 + 24) - *(void *)(a2 + 16)) >> 2);
      }
      *(_OWORD *)(v13 + 40) = *(_OWORD *)(a2 + 40);
      long long v14 = *(_OWORD *)(a2 + 56);
      long long v15 = *(_OWORD *)(a2 + 72);
      long long v16 = *(_OWORD *)(a2 + 88);
      *(void *)(v13 + 104) = *(void *)(a2 + 104);
      *(_OWORD *)(v13 + 88) = v16;
      *(_OWORD *)(v13 + 72) = v15;
      *(_OWORD *)(v13 + 56) = v14;
      long long v17 = *(_OWORD *)(a2 + 112);
      long long v18 = *(_OWORD *)(a2 + 128);
      *(void *)(v13 + 144) = *(void *)(a2 + 144);
      *(_OWORD *)(v13 + 112) = v17;
      *(_OWORD *)(v13 + 128) = v18;
      std::string::operator=((std::string *)(v13 + 152), (const std::string *)(a2 + 152));
      std::string::operator=((std::string *)(v13 + 176), (const std::string *)(a2 + 176));
      std::string::operator=((std::string *)(v13 + 200), (const std::string *)(a2 + 200));
      *(unsigned char *)(v13 + 224) = *(unsigned char *)(a2 + 224);
      if (v13 != a2)
      {
        std::vector<MTLUINT256_t>::__assign_with_size[abi:nn180100]<MTLUINT256_t*,MTLUINT256_t*>((void *)(v13 + 232), *(char **)(a2 + 232), *(char **)(a2 + 240), (uint64_t)(*(void *)(a2 + 240) - *(void *)(a2 + 232)) >> 5);
        std::vector<MTLUINT256_t>::__assign_with_size[abi:nn180100]<MTLUINT256_t*,MTLUINT256_t*>((void *)(v13 + 256), *(char **)(a2 + 256), *(char **)(a2 + 264), (uint64_t)(*(void *)(a2 + 264) - *(void *)(a2 + 256)) >> 5);
      }
      *(void *)(v6 + 288 * v4 + 280) = *(void *)(a2 + 280);
      uint64_t v19 = *(void *)(a1 + 1352);
      unsigned int v20 = *(_DWORD *)(a1 + 1360);
      *(_DWORD *)(a1 + 1360) = v20 + 1;
      uint64_t v9 = (void *)(v19 + 48 * v20);
    }
  }
  return v9 + 144;
}

void sub_2429DF04C(_Unwind_Exception *a1)
{
  MEMORY[0x24566ED90](v1, 0x10B2C40D3941106);
  _Unwind_Resume(a1);
}

_OWORD *VectorMap<AGX::FragmentProgramKey,AGX::ProgramVariantEntry<AGX::HAL200::FragmentProgramVariant>,4u>::Chunk::Chunk(_OWORD *a1)
{
  uint64_t v2 = AGX::FragmentProgramKey::FragmentProgramKey((uint64_t)a1, 0, 0, 0);
  AGX::FragmentProgramKey::FragmentProgramKey(v2 + 288, 0, 0, 0);
  AGX::FragmentProgramKey::FragmentProgramKey((uint64_t)(a1 + 36), 0, 0, 0);
  AGX::FragmentProgramKey::FragmentProgramKey((uint64_t)(a1 + 54), 0, 0, 0);
  a1[73] = 0u;
  a1[72] = 0u;
  *(_OWORD *)((char *)a1 + 1178) = 0u;
  a1[75] = 0u;
  a1[76] = 0u;
  *(_OWORD *)((char *)a1 + 1226) = 0u;
  a1[78] = 0u;
  a1[79] = 0u;
  *(_OWORD *)((char *)a1 + 1274) = 0u;
  a1[81] = 0u;
  a1[82] = 0u;
  *(_OWORD *)((char *)a1 + 1322) = 0u;
  return a1;
}

void sub_2429DF134(_Unwind_Exception *exception_object)
{
  uint64_t v4 = v2 - 288;
  for (uint64_t i = v2 - 136; ; i -= 288)
  {
    *(void *)(i - 152) = &unk_26F854050;
    uint64_t v7 = *(void **)(i + 104);
    if (v7)
    {
      *(void *)(i + 112) = v7;
      operator delete(v7);
    }
    uint64_t v8 = *(void **)(i + 80);
    if (v8)
    {
      *(void *)(i + 88) = v8;
      operator delete(v8);
    }
    if (*(char *)(i + 71) < 0)
    {
      operator delete(*(void **)(i + 48));
      if (*(char *)(i + 47) < 0)
      {
LABEL_13:
        operator delete(*(void **)(i + 24));
        if ((*(char *)(i + 23) & 0x80000000) == 0) {
          goto LABEL_10;
        }
        goto LABEL_14;
      }
    }
    else if (*(char *)(i + 47) < 0)
    {
      goto LABEL_13;
    }
    if ((*(char *)(i + 23) & 0x80000000) == 0) {
      goto LABEL_10;
    }
LABEL_14:
    operator delete(*(void **)i);
LABEL_10:
    *(void *)(i - 152) = off_26F852E48;
    uint64_t v9 = *(void **)(i - 136);
    if (v9)
    {
      *(void *)(i - 128) = v9;
      operator delete(v9);
    }
    v4 -= 288;
    uint64_t v6 = i - 152;
    if (v6 == v1) {
      _Unwind_Resume(exception_object);
    }
  }
}

BOOL AGX::Impl::FragmentProgramKey::operator==(uint64_t a1, uint64_t a2)
{
  v4.i64[0] = *(void *)(a2 + 48);
  v4.i32[1] = *(_DWORD *)(a2 + 96);
  v4.i64[1] = *(void *)(a2 + 64);
  v5.i32[0] = *(_DWORD *)(a1 + 48);
  v5.i32[1] = *(_DWORD *)(a1 + 96);
  v5.i64[1] = *(void *)(a1 + 64);
  int8x16_t v6 = vorrq_s8(veorq_s8(v4, v5), veorq_s8(*(int8x16_t *)(a2 + 72), *(int8x16_t *)(a1 + 72)));
  *(int8x8_t *)v6.i8 = vorr_s8(*(int8x8_t *)v6.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v6, v6, 8uLL));
  uint64_t v7 = v6.i32[0] | *(_DWORD *)(a2 + 104) ^ *(_DWORD *)(a1 + 104) | v6.i32[1] | *(_DWORD *)(a2 + 100) ^ *(_DWORD *)(a1 + 100) | *(_DWORD *)(a2 + 40) ^ *(_DWORD *)(a1 + 40) | *(_DWORD *)(a2 + 88) ^ *(_DWORD *)(a1 + 88) | *(_DWORD *)(a2 + 92) ^ *(_DWORD *)(a1 + 92) | *(unsigned __int8 *)(a2 + 224) ^ *(unsigned __int8 *)(a1 + 224);
  int v8 = *(_DWORD *)(a1 + 144);
  for (unsigned int i = v8; i; i &= ~(1 << v10))
  {
    unsigned int v10 = __clz(__rbit32(i));
    v7 |= (*(_DWORD *)(a2 + 112 + 4 * v10) ^ *(_DWORD *)(a1 + 112 + 4 * v10));
  }
  int v11 = *(_DWORD *)(a2 + 144);
  uint64_t v12 = *(unsigned __int8 *)(a1 + 223);
  if ((v12 & 0x80u) == 0) {
    uint64_t v13 = *(unsigned __int8 *)(a1 + 223);
  }
  else {
    uint64_t v13 = *(void *)(a1 + 208);
  }
  uint64_t v14 = *(unsigned __int8 *)(a2 + 223);
  int v15 = (char)v14;
  if ((v14 & 0x80u) != 0) {
    uint64_t v14 = *(void *)(a2 + 208);
  }
  if (v13 != v14)
  {
LABEL_17:
    BOOL v18 = 1;
    goto LABEL_19;
  }
  long long v16 = (const void **)(a1 + 200);
  if (v15 >= 0) {
    long long v17 = (unsigned __int8 *)(a2 + 200);
  }
  else {
    long long v17 = *(unsigned __int8 **)(a2 + 200);
  }
  if ((v12 & 0x80) == 0)
  {
    if (!*(unsigned char *)(a1 + 223))
    {
LABEL_16:
      BOOL v18 = 0;
      goto LABEL_19;
    }
    while (*(unsigned __int8 *)v16 == *v17)
    {
      long long v16 = (const void **)((char *)v16 + 1);
      ++v17;
      if (!--v12) {
        goto LABEL_16;
      }
    }
    goto LABEL_17;
  }
  BOOL v18 = memcmp(*v16, v17, *(void *)(a1 + 208)) != 0;
LABEL_19:
  uint64_t v20 = *(void *)(a1 + 232);
  uint64_t v19 = *(void *)(a1 + 240);
  uint64_t v22 = *(void *)(a1 + 256);
  uint64_t v21 = *(void *)(a1 + 264);
  uint64_t v23 = *(unsigned __int8 *)(a1 + 175);
  if ((v23 & 0x80u) == 0) {
    uint64_t v24 = *(unsigned __int8 *)(a1 + 175);
  }
  else {
    uint64_t v24 = *(void *)(a1 + 160);
  }
  uint64_t v25 = *(unsigned __int8 *)(a2 + 175);
  int v26 = (char)v25;
  if ((v25 & 0x80u) != 0) {
    uint64_t v25 = *(void *)(a2 + 160);
  }
  if (v24 != v25) {
    goto LABEL_53;
  }
  v27 = (const void **)(a1 + 152);
  if (v26 >= 0) {
    v28 = (unsigned __int8 *)(a2 + 152);
  }
  else {
    v28 = *(unsigned __int8 **)(a2 + 152);
  }
  if ((v23 & 0x80) != 0)
  {
    if (memcmp(*v27, v28, *(void *)(a1 + 160)))
    {
LABEL_53:
      BOOL v46 = 0;
      return (v7 | v18 | v11 ^ v8 | (v19 != v20) | (v21 != v22 || !v46)) == 0;
    }
  }
  else if (*(unsigned char *)(a1 + 175))
  {
    while (*(unsigned __int8 *)v27 == *v28)
    {
      v27 = (const void **)((char *)v27 + 1);
      ++v28;
      if (!--v23) {
        goto LABEL_34;
      }
    }
    goto LABEL_53;
  }
LABEL_34:
  uint64_t v29 = *(unsigned __int8 *)(a1 + 199);
  if ((v29 & 0x80u) == 0) {
    uint64_t v30 = *(unsigned __int8 *)(a1 + 199);
  }
  else {
    uint64_t v30 = *(void *)(a1 + 184);
  }
  uint64_t v31 = *(unsigned __int8 *)(a2 + 199);
  int v32 = (char)v31;
  if ((v31 & 0x80u) != 0) {
    uint64_t v31 = *(void *)(a2 + 184);
  }
  if (v30 != v31) {
    goto LABEL_53;
  }
  uint64_t v33 = (const void **)(a1 + 176);
  v36 = *(unsigned __int8 **)(a2 + 176);
  v35 = (unsigned __int8 *)(a2 + 176);
  v34 = v36;
  if (v32 >= 0) {
    v37 = v35;
  }
  else {
    v37 = v34;
  }
  if ((v29 & 0x80) != 0)
  {
    BOOL v46 = memcmp(*v33, v37, *(void *)(a1 + 184)) == 0;
  }
  else if (*(unsigned char *)(a1 + 199))
  {
    uint64_t v38 = v29 - 1;
    do
    {
      int v40 = *(unsigned __int8 *)v33;
      uint64_t v33 = (const void **)((char *)v33 + 1);
      int v39 = v40;
      int v42 = *v37++;
      int v41 = v42;
      BOOL v44 = v38-- != 0;
      BOOL v45 = v39 == v41;
      BOOL v46 = v39 == v41;
    }
    while (v45 && v44);
  }
  else
  {
    BOOL v46 = 1;
  }
  return (v7 | v18 | v11 ^ v8 | (v19 != v20) | (v21 != v22 || !v46)) == 0;
}

void AGX::Program<AGX::HAL200::FragmentProgramVariant,AGX::FragmentProgramKey,AGX::HAL200::IndirectArgumentLayout,AGXG17FamilyIndirectArgumentBufferLayout>::signalPending(uint64_t a1, uint64_t a2, NSObject *a3, uint64_t a4, void *a5, uint64_t a6)
{
  uint64_t v37 = *MEMORY[0x263EF8340];
  uint64_t v6 = a2 & 0x330003;
  if ((a2 & 0x330003) != 0)
  {
    lock = (os_unfair_lock_s *)(a1 + 1688);
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 1688));
    uint64_t v13 = *(void **)(a1 + 1648);
    uint64_t v14 = *(unsigned int *)(a1 + 1656);
    uint64_t v15 = VectorMap<ReflectionKey,AGX::Program<AGX::HAL200::IntersectionProgramVariant,AGX::UserIntersectionProgramKey,AGX::HAL200::IndirectArgumentLayout,AGXG17FamilyIndirectArgumentBufferLayout>::ReflectionEntry,4u>::find(v13, *(_DWORD *)(a1 + 1656), (void *)a4);
    long long v16 = (void *)v15;
    if (v15)
    {
      uint64_t v17 = *(void *)(v15 + 8);
      if (a6)
      {
LABEL_4:
        *long long v16 = v17;
LABEL_26:
        os_unfair_lock_unlock(lock);
        return;
      }
    }
    else
    {
      if (v14 == 4) {
        operator new();
      }
      BOOL v18 = &v13[4 * v14];
      long long v19 = *(_OWORD *)(a4 + 16);
      *BOOL v18 = *(_OWORD *)a4;
      v18[1] = v19;
      uint64_t v20 = *(void *)(a1 + 1648);
      unsigned int v21 = *(_DWORD *)(a1 + 1656);
      *(_DWORD *)(a1 + 1656) = v21 + 1;
      long long v16 = (void *)(v20 + 24 * v21 + 128);
      uint64_t v17 = *(void *)(v20 + 24 * v21 + 136);
      if (a6) {
        goto LABEL_4;
      }
    }
    if ((v6 & ~v17) != 0)
    {
      if (a3) {
        dispatch_retain(a3);
      }
      uint64_t v22 = v16[2];
      if (v22) {
        dispatch_release(v22);
      }
      v16[1] = v6;
      v16[2] = a3;
    }
    if (!*(unsigned char *)(a1 + 2720))
    {
      long long v34 = 0u;
      long long v35 = 0u;
      long long v32 = 0u;
      long long v33 = 0u;
      uint64_t v30 = (void *)[objc_alloc(MEMORY[0x263F128C0]) initWithDevice:a5 reflectionData:a3 functionType:2 options:a2 | 0x8000];
      uint64_t v23 = (void *)[v30 arguments];
      uint64_t v24 = [v23 countByEnumeratingWithState:&v32 objects:v36 count:16];
      if (v24)
      {
        uint64_t v25 = *(void *)v33;
        do
        {
          for (uint64_t i = 0; i != v24; ++i)
          {
            if (*(void *)v33 != v25) {
              objc_enumerationMutation(v23);
            }
            v27 = *(void **)(*((void *)&v32 + 1) + 8 * i);
            if (![v27 type]
              && (objc_msgSend((id)objc_msgSend(v27, "dataTypeDescription"), "elementIsIndirectArgumentBuffer") & 1) != 0)
            {
              v28 = objc_msgSend(a5, "newIndirectArgumentBufferLayoutWithStructType:", objc_msgSend(v27, "bufferStructType"));
              uint64_t v29 = v28[2];
              v28[2] = 0;
              *(void *)(a1 + 8 * [v27 index] + 1696) = v29;
            }
          }
          uint64_t v24 = [v23 countByEnumeratingWithState:&v32 objects:v36 count:16];
        }
        while (v24);
      }

      *(unsigned char *)(a1 + 2720) = 1;
    }
    goto LABEL_26;
  }
}

void sub_2429DF7B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_unfair_lock_t lock)
{
}

void ___ZN3AGX8Compiler14compileProgramINS_18FragmentProgramKeyE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  v14[0] = MEMORY[0x263EF8330];
  v14[1] = 3221225472;
  uint64_t v15 = ___ZN3AGX8Compiler14compileProgramINS_18FragmentProgramKeyE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke_2;
  long long v16 = &unk_26516F7E8;
  uint64_t v17 = a9;
  uint64_t v18 = a3;
  uint64_t v19 = a4;
  uint64_t v20 = a5;
  uint64_t v21 = a6;
  uint64_t v22 = a7;
  uint64_t v12 = a1 + 32;
  unsigned int v10 = *(void **)(a1 + 32);
  uint64_t v11 = *(void *)(v12 + 8);
  uint64_t v23 = a8;
  uint64_t v24 = v11;
  uint64_t v25 = a2;
  uint64_t v26 = a10;
  if (objc_msgSend(v10, "sync", MEMORY[0x263EF8330], 3221225472))
  {
    v15(v14);
  }
  else
  {
    global_queue = dispatch_get_global_queue(0, 0);
    dispatch_async(global_queue, v14);
  }
}

uint64_t ___ZN3AGX8Compiler14compileProgramINS_18FragmentProgramKeyE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke_3(uint64_t a1, void *a2)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), *a2);
}

uint64_t ___ZN3AGX8Compiler14compileProgramINS_18FragmentProgramKeyE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke_4(uint64_t a1, void *a2)
{
  if (getTimebaseInfo(void)::once != -1) {
    dispatch_once(&getTimebaseInfo(void)::once, &__block_literal_global_7474);
  }
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), *a2);
}

void ___ZN3AGX8Compiler14compileProgramINS_18FragmentProgramKeyE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke_2(void *a1)
{
  size_t size_ptr = 0;
  buffer_ptr = 0;
  uint64_t v2 = a1[12];
  AGCDeserializedReply::AGCDeserializedReply((AGCDeserializedReply *)v5);
  if (v2 || (int8x16_t v4 = a1[5]) == 0)
  {
    v3 = 0;
  }
  else
  {
    v3 = dispatch_data_create_map(v4, (const void **)&buffer_ptr, &size_ptr);
    AGCDeserializedReply::deserialize((AGCDeserializedReply *)v5, buffer_ptr, size_ptr);
  }
  (*(void (**)(void, unsigned char *))(a1[11] + 16))(a1[11], v5);
  if (v3) {
    dispatch_release(v3);
  }
  AGCDeserializedReply::~AGCDeserializedReply((AGCDeserializedReply *)v5);
}

void sub_2429DFA70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  AGCDeserializedReply::~AGCDeserializedReply((AGCDeserializedReply *)va);
  _Unwind_Resume(a1);
}

void ___ZN3AGX17UserShaderFactoryINS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE53compileFunctionWithAirLinkedIntersectionFunction_ImplINS_18FragmentProgramKeyELb1EEENSt3__19enable_ifIXT0_EvE4typeERKT_P29MTLCompileFunctionRequestDataNS5_21DriverRequestDataImplIXT0_EEEU13block_pointerFvRK20AGCDeserializedReplyRKNS_28CompileFunctionReplyMetadataERKNS5_19DriverReplyDataImplIXT0_EEEE_block_invoke(uint64_t a1, void *a2, int8x16_t *a3)
{
  uint64_t v40 = *MEMORY[0x263EF8340];
  uint64_t v6 = *(void *)(a1 + 48);
  int8x16_t v29 = vextq_s8(a3[1], a3[1], 8uLL);
  uint64_t v7 = a3[2].i64[1];
  v30.i64[0] = a3[2].i64[0];
  v30.i64[1] = v7;
  v31.i64[0] = a3[3].i64[0];
  int v8 = *(void **)(a1 + 72);
  uint64_t v33 = v7;
  uint64_t v34 = v31.i64[0];
  int v35 = 0;
  uint64_t v37 = 0;
  long long v36 = 0uLL;
  if (!v7)
  {
    v28[0] = &v29;
    v28[1] = a2;
    v28[2] = a1 + 80;
    v28[3] = v6;
    v28[4] = &v33;
    AGX::UserShaderFactory<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::createAirLinkedIntersectionVariantSets(AGCReplyArray const&,AGX::UserShaderFactory<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::IntersectionReplyMetadata const&,MTLLinkedFunctions *,AGX::UserShaderFactory<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::IntersectionDescriptorContext const&,unsigned int)::{lambda(NSArray<objc_object  {objcproto11MTLFunction}*> *)#1}::operator()((uint64_t)v28, (void *)[v8 functions]);
    AGX::UserShaderFactory<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::createAirLinkedIntersectionVariantSets(AGCReplyArray const&,AGX::UserShaderFactory<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::IntersectionReplyMetadata const&,MTLLinkedFunctions *,AGX::UserShaderFactory<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::IntersectionDescriptorContext const&,unsigned int)::{lambda(NSArray<objc_object  {objcproto11MTLFunction}*> *)#1}::operator()((uint64_t)v28, (void *)[v8 privateFunctions]);
  }
  int8x16_t v9 = a3[1];
  int8x16_t v29 = *a3;
  int8x16_t v30 = v9;
  int8x16_t v10 = a3[3];
  int8x16_t v31 = a3[2];
  int8x16_t v32 = v10;
  AGCDeserializedReply::AGCDeserializedReply((AGCDeserializedReply *)v28);
  if (!v31.i64[1])
  {
    uint64_t v11 = (void *)[*(id *)(a1 + 32) function];
    if (!AGCReplyArray::getDeserializedReplyWithName<AGCDeserializedReply>(a2, (char *)objc_msgSend((id)objc_msgSend(v11, "name"), "UTF8String"), (AGCDeserializedReply *)v28))
    {
      uint64_t v12 = (FILE *)*MEMORY[0x263EF8348];
      uint64_t v13 = (const char *)objc_msgSend((id)objc_msgSend(v11, "name"), "UTF8String");
      AGCReplyArray::getDebugStringAvailableNames((std::string *)buf, a2);
      if (buf[23] >= 0) {
        uint64_t v14 = buf;
      }
      else {
        uint64_t v14 = *(const char **)buf;
      }
      fprintf(v12, "AGX: %s:%d:%s: *** Failed to find compiler reply with function name \"%s\". The available function names in the reply array are: %s.\n", "agxa_user_shader_factory_template.hpp", 82, "compileFunctionWithAirLinkedIntersectionFunction_Impl_block_invoke", v13, v14);
      if ((buf[23] & 0x80000000) != 0) {
        operator delete(*(void **)buf);
      }
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR))
      {
        uint64_t v25 = objc_msgSend((id)objc_msgSend(v11, "name"), "UTF8String");
        AGCReplyArray::getDebugStringAvailableNames(&__p, a2);
        uint64_t v26 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
            ? &__p
            : (std::string *)__p.__r_.__value_.__r.__words[0];
        *(_DWORD *)buf = 136316162;
        *(void *)&buf[4] = "agxa_user_shader_factory_template.hpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 82;
        *(_WORD *)&buf[18] = 2080;
        *(void *)&buf[20] = "compileFunctionWithAirLinkedIntersectionFunction_Impl_block_invoke";
        *(_WORD *)&buf[28] = 2080;
        *(void *)&buf[30] = v25;
        *(_WORD *)&buf[38] = 2080;
        int v39 = v26;
        _os_log_error_impl(&dword_2427AD000, &_os_log_internal, OS_LOG_TYPE_ERROR, "AGX: AGX: %s:%d:%s: *** Failed to find compiler reply with function name \"%s\". The available function names in the reply array are: %s.\n", buf, 0x30u);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
      }
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_INFO))
      {
        uint64_t v15 = objc_msgSend((id)objc_msgSend(v11, "name"), "UTF8String");
        AGCReplyArray::getDebugStringAvailableNames(&__p, a2);
        long long v16 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
            ? &__p
            : (std::string *)__p.__r_.__value_.__r.__words[0];
        *(_DWORD *)buf = 136316162;
        *(void *)&buf[4] = "agxa_user_shader_factory_template.hpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 82;
        *(_WORD *)&buf[18] = 2080;
        *(void *)&buf[20] = "compileFunctionWithAirLinkedIntersectionFunction_Impl_block_invoke";
        *(_WORD *)&buf[28] = 2080;
        *(void *)&buf[30] = v15;
        *(_WORD *)&buf[38] = 2080;
        int v39 = v16;
        _os_log_impl(&dword_2427AD000, &_os_log_internal, OS_LOG_TYPE_INFO, "AGX: AGX: %s:%d:%s: *** Failed to find compiler reply with function name \"%s\". The available function names in the reply array are: %s.\n", buf, 0x30u);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
      }
      v31.i64[1] = 2;
      v32.i64[0] = @"Internal error during function compilation.";
    }
  }
  uint64_t v17 = v33;
  uint64_t v18 = v34;
  uint64_t v33 = 0;
  uint64_t v34 = 0;
  *(void *)buf = v17;
  *(void *)&buf[8] = v18;
  *(_OWORD *)&buf[24] = v36;
  long long v36 = 0uLL;
  *(void *)&buf[16] = 0;
  int v39 = v37;
  uint64_t v37 = 0;
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  uint64_t v19 = *(void *)&buf[24];
  if (*(void *)&buf[24])
  {
    uint64_t v20 = *(void *)&buf[32];
    uint64_t v21 = *(void **)&buf[24];
    if (*(void *)&buf[32] != *(void *)&buf[24])
    {
      do
      {
        dispatch_release(*(dispatch_object_t *)(v20 - 24));

        *(void *)(v20 - 16) = 0;
        *(void *)(v20 - 8) = 0;
        v20 -= 80;
      }
      while (v20 != v19);
      uint64_t v21 = *(void **)&buf[24];
    }
    *(void *)&buf[32] = v19;
    operator delete(v21);
  }
  AGCDeserializedReply::~AGCDeserializedReply((AGCDeserializedReply *)v28);
  uint64_t v22 = v36;
  if ((void)v36)
  {
    uint64_t v23 = *((void *)&v36 + 1);
    uint64_t v24 = (void *)v36;
    if (*((void *)&v36 + 1) != (void)v36)
    {
      do
      {
        dispatch_release(*(dispatch_object_t *)(v23 - 24));

        *(void *)(v23 - 16) = 0;
        *(void *)(v23 - 8) = 0;
        v23 -= 80;
      }
      while (v23 != v22);
      uint64_t v24 = (void *)v36;
    }
    *((void *)&v36 + 1) = v22;
    operator delete(v24);
  }
}

void sub_2429DFEB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  AGCDeserializedReply::~AGCDeserializedReply((AGCDeserializedReply *)va);
  AGX::UserShaderFactory<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::DriverReplyDataImpl<true>::~DriverReplyDataImpl(v9 - 192);
  _Unwind_Resume(a1);
}

uint64_t ___ZN3AGX8Compiler14compileProgramINS_18FragmentProgramKeyE13AGCReplyArrayEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_RKNS_28CompileFunctionReplyMetadataEE_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  v11[0] = a3;
  v11[1] = a4;
  v11[2] = a5;
  v11[3] = a6;
  v11[4] = a7;
  v11[5] = a8;
  v11[6] = a9;
  v11[7] = a10;
  return (*(uint64_t (**)(void, uint64_t, void *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), a2, v11, a4, a5, a6, a7, a8);
}

void ___ZN3AGX8Compiler14compileProgramINS_18FragmentProgramKeyE13AGCReplyArrayEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  v14[0] = MEMORY[0x263EF8330];
  v14[1] = 3221225472;
  uint64_t v15 = ___ZN3AGX8Compiler14compileProgramINS_18FragmentProgramKeyE13AGCReplyArrayEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke_2;
  long long v16 = &unk_26516F7E8;
  uint64_t v17 = a9;
  uint64_t v18 = a3;
  uint64_t v19 = a4;
  uint64_t v20 = a5;
  uint64_t v21 = a6;
  uint64_t v22 = a7;
  uint64_t v12 = a1 + 32;
  int8x16_t v10 = *(void **)(a1 + 32);
  uint64_t v11 = *(void *)(v12 + 8);
  uint64_t v23 = a8;
  uint64_t v24 = v11;
  uint64_t v25 = a2;
  uint64_t v26 = a10;
  if (objc_msgSend(v10, "sync", MEMORY[0x263EF8330], 3221225472))
  {
    v15(v14);
  }
  else
  {
    global_queue = dispatch_get_global_queue(0, 0);
    dispatch_async(global_queue, v14);
  }
}

uint64_t ___ZN3AGX8Compiler14compileProgramINS_18FragmentProgramKeyE13AGCReplyArrayEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke_3(uint64_t a1, void *a2)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), *a2);
}

uint64_t ___ZN3AGX8Compiler14compileProgramINS_18FragmentProgramKeyE13AGCReplyArrayEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke_4(uint64_t a1, void *a2)
{
  if (getTimebaseInfo(void)::once != -1) {
    dispatch_once(&getTimebaseInfo(void)::once, &__block_literal_global_7474);
  }
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), *a2);
}

void ___ZN3AGX8Compiler14compileProgramINS_18FragmentProgramKeyE13AGCReplyArrayEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke_2(void *a1)
{
  size_t size_ptr = 0;
  buffer_ptr = 0;
  uint64_t v2 = a1[12];
  v13[0] = 0;
  v13[1] = 0;
  *(_OWORD *)int v8 = 0u;
  *(_OWORD *)std::string __p = 0u;
  long long v10 = 0u;
  uint64_t v11 = 0;
  uint64_t v12 = v13;
  if (v2 || (int8x16_t v4 = a1[5]) == 0)
  {
    v3 = 0;
  }
  else
  {
    v3 = dispatch_data_create_map(v4, (const void **)&buffer_ptr, &size_ptr);
    AGCReplyArray::deserialize((AGCReplyArray *)v8, buffer_ptr);
  }
  (*(void (**)(void, void **))(a1[11] + 16))(a1[11], v8);
  if (v3) {
    dispatch_release(v3);
  }
  int8x16_t v5 = (void **)v8[0];
  uint64_t v6 = (void **)v8[1];
  while (v5 != v6)
  {
    uint64_t v7 = *v5;
    v5 += 2;
    free(v7);
  }
  std::__tree<std::__value_type<std::string,unsigned int>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned int>>>::destroy(v13[0]);
  if (__p[1])
  {
    *(void **)&long long v10 = __p[1];
    operator delete(__p[1]);
  }
  if (v8[0])
  {
    v8[1] = v8[0];
    operator delete(v8[0]);
  }
}

void sub_2429E021C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  AGCReplyArray::~AGCReplyArray((AGCReplyArray *)va);
  _Unwind_Resume(a1);
}

void __destroy_helper_block_e8_80c30_ZTSN3AGX18FragmentProgramKeyE(uint64_t a1)
{
  *(void *)(a1 + 80) = &unk_26F854050;
  uint64_t v2 = *(void **)(a1 + 336);
  if (v2)
  {
    *(void *)(a1 + 344) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 312);
  if (v3)
  {
    *(void *)(a1 + 320) = v3;
    operator delete(v3);
  }
  if ((*(char *)(a1 + 303) & 0x80000000) == 0)
  {
    if ((*(char *)(a1 + 279) & 0x80000000) == 0) {
      goto LABEL_7;
    }
LABEL_13:
    operator delete(*(void **)(a1 + 256));
    if ((*(char *)(a1 + 255) & 0x80000000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_14;
  }
  operator delete(*(void **)(a1 + 280));
  if (*(char *)(a1 + 279) < 0) {
    goto LABEL_13;
  }
LABEL_7:
  if ((*(char *)(a1 + 255) & 0x80000000) == 0) {
    goto LABEL_8;
  }
LABEL_14:
  operator delete(*(void **)(a1 + 232));
LABEL_8:
  *(void *)(a1 + 80) = off_26F852E48;
  int8x16_t v4 = *(void **)(a1 + 96);
  if (v4)
  {
    *(void *)(a1 + 104) = v4;
    operator delete(v4);
  }
}

AGX::Impl::FragmentProgramKey *__copy_helper_block_e8_80c30_ZTSN3AGX18FragmentProgramKeyE(uint64_t a1, uint64_t a2)
{
  result = AGX::Impl::FragmentProgramKey::FragmentProgramKey((AGX::Impl::FragmentProgramKey *)(a1 + 80), (const AGX::Impl::FragmentProgramKey *)(a2 + 80));
  *(void *)(a1 + 80) = &unk_26F852E88;
  *(void *)(a1 + 360) = *(void *)(a2 + 360);
  return result;
}

void AGX::HAL200::FragmentProgramVariant::~FragmentProgramVariant(AGX::HAL200::FragmentProgramVariant *this)
{
  AGX::FragmentProgramVariant<AGX::HAL200::Encoders,AGX::HAL200::Classes>::~FragmentProgramVariant((unint64_t)this);

  JUMPOUT(0x24566ED90);
}

void ___ZN3AGX23UserCommonShaderFactoryINS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE34createGeometryStageAndLinkPipelineI27MTLRenderPipelineDescriptorLb0EEEvPKNS5_28RenderPipelineDescriptorInfoEPNS1_22FragmentProgramVariantE13ReflectionKeyP18AGXG17FamilyDevicePT_mbbyP19NSMutableDictionaryP25AGXG17FamilyBinaryArchivePU27objcproto16OS_dispatch_data8NSObjectU13block_pointerFvPU33objcproto22MTLRenderPipelineState11objc_objectP27MTLRenderPipelineReflectionP7NSErrorE_block_invoke(uint64_t a1, uint64_t a2, long long *a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v36 = *MEMORY[0x263EF8340];
  if (a2)
  {
    uint64_t v7 = *(void **)(a1 + 32);
    int v8 = *(void **)(a1 + 40);
    uint64_t v9 = *(void ****)(a1 + 72);
    unint64_t v10 = *(void *)(a1 + 80);
    uint64_t v11 = *(void *)(a1 + 48);
    __int16 v12 = *(_WORD *)(a2 + 3514);
    unsigned __int8 v13 = *(unsigned char *)(a1 + 112);
    v23[0] = MEMORY[0x263EF8330];
    v23[1] = 3221225472;
    long long v26 = *(_OWORD *)(a1 + 88);
    uint64_t v14 = *(os_unfair_lock_s **)(v26 + 120);
    uint64_t v15 = *(void **)(v26 + 24);
    long long v16 = *(NSObject **)(v26 + 88);
    long long v30 = *(_OWORD *)(a1 + 113);
    long long v31 = *(_OWORD *)(a1 + 129);
    long long v17 = a3[1];
    long long v32 = *a3;
    v23[2] = ___ZN3AGX23UserCommonShaderFactoryINS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE34createGeometryStageAndLinkPipelineI27MTLRenderPipelineDescriptorLb0EEEvPKNS5_28RenderPipelineDescriptorInfoEPNS1_22FragmentProgramVariantE13ReflectionKeyP18AGXG17FamilyDevicePT_mbbyP19NSMutableDictionaryP25AGXG17FamilyBinaryArchivePU27objcproto16OS_dispatch_data8NSObjectU13block_pointerFvPU33objcproto22MTLRenderPipelineState11objc_objectP27MTLRenderPipelineReflectionP7NSErrorE_block_invoke_2;
    v23[3] = &unk_26516EB88;
    uint64_t v25 = v9;
    uint64_t v27 = a2;
    unint64_t v28 = v10;
    long long v33 = v17;
    v23[4] = v8;
    v23[5] = v7;
    unsigned __int8 v34 = v13;
    char v35 = *(unsigned char *)(a1 + 145);
    uint64_t v29 = *(void *)(a1 + 104);
    v23[6] = a4;
    long long v24 = *(_OWORD *)(a1 + 56);
    AGX::UserCommonShaderFactory<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::createUserOrPassthroughObjectProgramVariant<MTLRenderPipelineDescriptor>(v9, v7, v8, v10, v11, a7, v14, v15, v16, v12, HIBYTE(v12), v13, (uint64_t)v23);
  }
  else
  {
    uint64_t v18 = *(void *)(a1 + 64);
    if (a5 > 3) {
      uint64_t v19 = 5;
    }
    else {
      uint64_t v19 = qword_242EAA188[a5];
    }
    uint64_t v20 = [NSDictionary dictionaryWithObject:a6 forKey:*MEMORY[0x263F08320]];
    id v21 = (id)[objc_alloc(MEMORY[0x263F087E8]) initWithDomain:@"AGXMetalG17P" code:v19 userInfo:v20];
    if (v18)
    {
      uint64_t v22 = *(void (**)(uint64_t, void, void, id))(v18 + 16);
      v22(v18, 0, 0, v21);
    }
  }
}

void AGX::UserCommonShaderFactory<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::createMeshProgramVariant<MTLRenderPipelineDescriptor>(void ***a1, void *a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, os_unfair_lock_s *a8, uint64_t a9, NSObject *a10, unsigned __int8 a11, uint64_t a12)
{
  uint64_t v91 = *MEMORY[0x263EF8340];
  v58[0] = 0;
  v58[1] = v58;
  v58[2] = 0x3052000000;
  v58[3] = __Block_byref_object_copy_;
  v58[4] = __Block_byref_object_dispose_;
  v58[5] = 0;
  uint64_t v41 = [a2 meshFunction];
  if (a9)
  {
    uint64_t v17 = [a2 objectFunction];
    if (*(char *)(a9 + 3343) < 0) {
      std::string::__init_copy_ctor_external(&v53, *(const std::string::value_type **)(a9 + 3320), *(void *)(a9 + 3328));
    }
    else {
      std::string v53 = *(std::string *)(a9 + 3320);
    }
    if (*(char *)(a9 + 3367) < 0) {
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a9 + 3344), *(void *)(a9 + 3352));
    }
    else {
      std::string __p = *(std::string *)(a9 + 3344);
    }
    char v55 = *(unsigned char *)(a9 + 3368);
    AGX::UserProgramKeyFactory<AGX::HAL200::Classes,AGX::HAL200::Encoders>::CreateMeshProgramKey<MTLRenderPipelineDescriptor>((uint64_t)&v56, a2, a10, a7, v17 == 0, (uint64_t)&v53, *(unsigned __int8 *)(a9 + 3385));
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__p.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v53.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_19;
      }
    }
    else if ((SHIBYTE(v53.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_19;
    }
    uint64_t v18 = &v53;
  }
  else
  {
    uint64_t v52 = 0;
    *(_OWORD *)v50 = 0u;
    long long v51 = 0u;
    long long v49 = 0u;
    AGX::UserProgramKeyFactory<AGX::HAL200::Classes,AGX::HAL200::Encoders>::CreateMeshProgramKey<MTLRenderPipelineDescriptor>((uint64_t)&v56, a2, a10, a7, [a2 objectFunction] == 0, (uint64_t)&v49, 0);
    if (SHIBYTE(v51) < 0)
    {
      operator delete(v50[1]);
      if ((SHIBYTE(v50[0]) & 0x80000000) == 0) {
        goto LABEL_19;
      }
    }
    else if ((SHIBYTE(v50[0]) & 0x80000000) == 0)
    {
      goto LABEL_19;
    }
    uint64_t v18 = (std::string *)&v49;
  }
  operator delete(v18->__r_.__value_.__l.__data_);
LABEL_19:
  v19.key = ((*(_DWORD *)(a3[101] + 7288) << 29) & 0x40000000 | v56.cs.common.key & 0x8BFFFEFF | (*(unsigned __int8 *)(a3[101] + 7440) << 26)) ^ 0x40000000;
  v56.cs.common = v19;
  v56.cs.var0.key &= ~0x200u;
  uint64_t v57 = a4 & 0xC00C0000;
  if ((a4 & 0x40000) != 0)
  {
    if (AGX::isTelemetryEnabled(void)::once != -1) {
      dispatch_once(&AGX::isTelemetryEnabled(void)::once, &__block_literal_global_6424);
    }
    int v20 = 1;
    v19.char var0 = ($CBEC0DC0C06941078BCF76921B43C9FE)v56.cs.common;
  }
  else
  {
    int v20 = 0;
  }
  uint64_t v37 = a6;
  v56.cs.common.key = v20 | (a4 >> 21) & 8 | v19.key & 0xFFFFFFF4;
  ReflectionKey::initGPUCompilerSPIOptionsHash((uint64_t)&v81, (void *)[a2 gpuCompilerSPIOptions]);
  long long v79 = v81;
  long long v80 = v82;
  char v48 = 0;
  unint64_t CompileOptions = AGX::Program<AGX::HAL200::MeshProgramVariant,AGX::MeshProgramKey,AGX::HAL200::IndirectArgumentLayout,AGXG17FamilyIndirectArgumentBufferLayout>::getOrCreateCompileOptions((uint64_t)a8, a4 | 3, (uint64_t)&v79);
  v47 = (NSObject **)AGX::Program<AGX::HAL200::MeshProgramVariant,AGX::MeshProgramKey,AGX::HAL200::IndirectArgumentLayout,AGXG17FamilyIndirectArgumentBufferLayout>::getOrCreateVariantEntry(a8, (uint64_t)&v56, &v48, CompileOptions, a5 != 0);
  BOOL v44 = a8;
  if (v48)
  {
    unint64_t mutableBuffers = v56.cs.mutableBuffers;
    char var0 = v56.geometry_buffer_desc.__r_.var0;
    uint64_t v21 = objc_msgSend((id)objc_msgSend(a2, "pipelineLibrary"), "pipelineCache");
    uint64_t v22 = (void *)[a2 pipelineLibrary];
    if ([v22 pipelineCache] && (objc_msgSend(v22, "disableRunTimeCompilation") & 1) != 0) {
      LOBYTE(v23) = 1;
    }
    else {
      unsigned int v23 = (objc_msgSend((id)objc_msgSend(a2, "binaryArchives"), "count") != 0) & (a4 >> 2);
    }
    char v34 = v23;
    if (*(_DWORD *)*MEMORY[0x263F4B1E8]) {
      IOGPUDeviceTraceEvent();
    }
    long long v24 = objc_opt_new();
    [v24 setSync:a11 ^ 1u];
    [v24 setFunction:v41];
    [v24 setFrameworkData:a10];
    [v24 setPipelineCache:v21];
    [v24 setDestinationBinaryArchive:a5];
    [v24 setArchiverId:v37];
    objc_msgSend(v24, "setBinaryArchives:", objc_msgSend(a2, "binaryArchives"));
    [v24 setPipelineOptions:a4 | 3];
    if ((a4 & 0x330003) == 0) {
      objc_msgSend(v24, "setPipelineOptions:", objc_msgSend(v24, "pipelineOptions") | 0x8000);
    }
    uint64_t v25 = [a2 newPipelineScript];
    if (v25)
    {
      [v24 setAirScript:v25];
      dispatch_release(v25);
    }
    objc_msgSend(v24, "setGpuCompilerSPIOptions:", objc_msgSend(a2, "gpuCompilerSPIOptions"));
    long long v26 = (void *)[a2 meshLinkedFunctions];
    objc_msgSend(v24, "setVisibleFunctions:", objc_msgSend(v26, "functions"));
    objc_msgSend(v24, "setVisibleFunctionGroups:", objc_msgSend(v26, "groups"));
    objc_msgSend(v24, "setPrivateVisibleFunctions:", objc_msgSend(v26, "privateFunctions"));
    uint64_t v43 = [a2 maxMeshCallStackDepth];
    uint64_t v27 = (void *)[a2 meshLinkedFunctions];
    char v39 = [a2 supportIndirectCommandBuffers];
    char v38 = [a2 supportAddingMeshBinaryFunctions];
    uint64_t v33 = [a2 gpuCompilerSPIOptions];
    char v28 = [a3 requiresRaytracingEmulation];
    v73[0] = MEMORY[0x263EF8330];
    v73[1] = 3221225472;
    long long v76 = v79;
    v73[2] = ___ZN3AGX23UserCommonShaderFactoryINS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE24createMeshProgramVariantI27MTLRenderPipelineDescriptorEEvPT_P18AGXG17FamilyDevicemP25AGXG17FamilyBinaryArchivePU27objcproto16OS_dispatch_data8NSObjectP7NSArrayPNS1_11MeshProgramEPNS1_22FragmentProgramVariantESG_bU13block_pointerFvPNS1_18MeshProgramVariantE13ReflectionKeyP19NSMutableDictionary16MTLCompilerErrorP8NSStringSG_E_block_invoke;
    v73[3] = &unk_26516EEC8;
    unsigned __int8 v74 = a11;
    v73[8] = a1;
    v73[9] = v47;
    char v75 = var0 & 1;
    v73[10] = v44;
    v73[11] = CompileOptions;
    long long v77 = v80;
    v73[4] = v41;
    v73[5] = a3;
    v73[6] = a2;
    v73[7] = v58;
    v73[12] = a9;
    v73[13] = mutableBuffers;
    char v78 = v34;
    if ((v28 & 1) == 0
      && AGX::UserShaderFactory<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::hasAirLinkedIntersectionFunction(v27))
    {
      LOBYTE(v81) = v28;
      *((void *)&v81 + 1) = v43;
      long long v82 = (unint64_t)v27;
      v83 = 0;
      uint64_t v84 = a4;
      v85 = a7;
      v86 = a3;
      uint64_t v87 = 0;
      char v88 = v39;
      char v89 = v38;
      uint64_t v90 = v33;
      AGX::UserShaderFactory<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::compileFunctionWithAirLinkedIntersectionFunction_Impl<AGX::MeshProgramKey,true>(a1, (uint64_t)&v56, v24, &v81, (uint64_t)v73);
    }
    else
    {
      uint64_t v29 = *a1;
      v59[0] = MEMORY[0x263EF8330];
      v59[1] = 3221225472;
      v59[2] = ___ZN3AGX17UserShaderFactoryINS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE20compileFunction_ImplINS_14MeshProgramKeyEEEvRKT_P29MTLCompileFunctionRequestDataRKNS5_21DriverRequestDataImplILb1EEEU13block_pointerFvRK20AGCDeserializedReplyRKNS_28CompileFunctionReplyMetadataERKNS5_19DriverReplyDataImplILb1EEEE_block_invoke;
      v59[3] = &unk_26516F018;
      v59[4] = v73;
      *(void *)&long long v81 = MEMORY[0x263EF8330];
      *((void *)&v81 + 1) = 3221225472;
      *(void *)&long long v82 = ___ZN3AGX8Compiler14compileProgramINS_14MeshProgramKeyE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_RKNS_28CompileFunctionReplyMetadataEE_block_invoke;
      *((void *)&v82 + 1) = &unk_26516F7C0;
      v83 = v59;
      AGX::Compiler::compileProgram<AGX::MeshProgramKey,AGCDeserializedReply>(v29, (uint64_t)&v56, v24, (uint64_t)&v81);
    }
  }
  else if ((CompileOptions & 0x330003) != 0)
  {
    long long v30 = *a1;
    v70[0] = MEMORY[0x263EF8330];
    v70[1] = 3221225472;
    v70[2] = ___ZN3AGX23UserCommonShaderFactoryINS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE24createMeshProgramVariantI27MTLRenderPipelineDescriptorEEvPT_P18AGXG17FamilyDevicemP25AGXG17FamilyBinaryArchivePU27objcproto16OS_dispatch_data8NSObjectP7NSArrayPNS1_11MeshProgramEPNS1_22FragmentProgramVariantESG_bU13block_pointerFvPNS1_18MeshProgramVariantE13ReflectionKeyP19NSMutableDictionary16MTLCompilerErrorP8NSStringSG_E_block_invoke_2;
    v70[3] = &unk_26516EEF0;
    v70[5] = a8;
    v70[6] = CompileOptions;
    long long v71 = v79;
    long long v72 = v80;
    v70[4] = a3;
    v70[7] = v47;
    [*v30 reflectionWithFunction:v41 options:CompileOptions & 0x330003 sync:a11 ^ 1u completionHandler:v70];
  }
  block[0] = MEMORY[0x263EF8330];
  block[1] = 3321888768;
  v61 = ___ZN3AGX23UserCommonShaderFactoryINS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE24createMeshProgramVariantI27MTLRenderPipelineDescriptorEEvPT_P18AGXG17FamilyDevicemP25AGXG17FamilyBinaryArchivePU27objcproto16OS_dispatch_data8NSObjectP7NSArrayPNS1_11MeshProgramEPNS1_22FragmentProgramVariantESG_bU13block_pointerFvPNS1_18MeshProgramVariantE13ReflectionKeyP19NSMutableDictionary16MTLCompilerErrorP8NSStringSG_E_block_invoke_3;
  v62 = &unk_26F851C80;
  v65 = v47;
  v66 = v44;
  AGX::MeshProgramKey::MeshProgramKey((AGX::MeshProgramKey *)v67, &v56);
  long long v68 = v79;
  long long v69 = v80;
  uint64_t v63 = a12;
  v64 = v58;
  long long v31 = *v47;
  if (a11)
  {
    global_queue = dispatch_get_global_queue(0, 0);
    dispatch_group_notify(v31, global_queue, block);
  }
  else
  {
    dispatch_group_wait(v31, 0xFFFFFFFFFFFFFFFFLL);
    v61((uint64_t)block);
  }
  AGX::Impl::MeshProgramKey::~MeshProgramKey(v67);
  AGX::Impl::MeshProgramKey::~MeshProgramKey((void **)&v56._vptr$ProgramKey);
  _Block_object_dispose(v58, 8);
}

void sub_2429E0E08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (a38 < 0) {
    operator delete(__p);
  }
  _Block_object_dispose(&a71, 8);
  _Unwind_Resume(a1);
}

id ___ZN3AGX23UserCommonShaderFactoryINS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE34createGeometryStageAndLinkPipelineI27MTLRenderPipelineDescriptorLb0EEEvPKNS5_28RenderPipelineDescriptorInfoEPNS1_22FragmentProgramVariantE13ReflectionKeyP18AGXG17FamilyDevicePT_mbbyP19NSMutableDictionaryP25AGXG17FamilyBinaryArchivePU27objcproto16OS_dispatch_data8NSObjectU13block_pointerFvPU33objcproto22MTLRenderPipelineState11objc_objectP27MTLRenderPipelineReflectionP7NSErrorE_block_invoke_3(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  if (a2)
  {
    uint64_t v8 = *(void *)(a1 + 72);
    uint64_t v7 = *(void *)(a1 + 80);
    uint64_t v9 = *(void **)v8;
    unint64_t v10 = *(void **)(v8 + 8);
    memset(v17, 0, sizeof(v17));
    memset(v16, 0, sizeof(v16));
    AGX::UserCommonShaderFactory<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::constructRenderPipeline<MTLRenderPipelineDescriptor>(v9, v7, a1 + 104, v10, a2, a3, 0, 0, (uint64_t)v17, 0, 0, (uint64_t)v16, *(void *)(v8 + 96), *(void *)(v8 + 104), 0, 0, *(void *)(a1 + 32), *(void *)(v8 + 72), *(void **)(a1 + 40));
  }
  uint64_t v11 = *(void *)(a1 + 56);
  if (a5 > 3) {
    uint64_t v12 = 5;
  }
  else {
    uint64_t v12 = qword_242EAA188[a5];
  }
  uint64_t v13 = [NSDictionary dictionaryWithObject:a6 forKey:*MEMORY[0x263F08320]];
  id result = (id)[objc_alloc(MEMORY[0x263F087E8]) initWithDomain:@"AGXMetalG17P" code:v12 userInfo:v13];
  if (v11)
  {
    uint64_t v15 = *(uint64_t (**)(uint64_t, void, void, id))(v11 + 16);
    return (id)v15(v11, 0, 0, result);
  }
  return result;
}

void AGX::UserCommonShaderFactory<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::createVertexProgramVariant(void ***a1, MTLRenderPipelineDescriptor *a2, void *a3, unint64_t a4, uint64_t a5, void *a6, uint64_t a7, uint64_t a8, NSObject *a9, uint64_t a10, unsigned __int8 a11, uint64_t a12)
{
  uint64_t v100 = *MEMORY[0x263EF8340];
  v65[0] = 0;
  v65[1] = v65;
  v65[2] = 0x3052000000;
  v65[3] = __Block_byref_object_copy_;
  v65[4] = __Block_byref_object_dispose_;
  v65[5] = 0;
  uint64_t v53 = [(MTLRenderPipelineDescriptor *)a2 vertexFunction];
  if (a8)
  {
    if (*(char *)(a8 + 3343) < 0) {
      std::string::__init_copy_ctor_external(&v60, *(const std::string::value_type **)(a8 + 3320), *(void *)(a8 + 3328));
    }
    else {
      std::string v60 = *(std::string *)(a8 + 3320);
    }
    if (*(char *)(a8 + 3367) < 0) {
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a8 + 3344), *(void *)(a8 + 3352));
    }
    else {
      std::string __p = *(std::string *)(a8 + 3344);
    }
    char v62 = *(unsigned char *)(a8 + 3368);
    AGX::UserProgramKeyFactory<AGX::HAL200::Classes,AGX::HAL200::Encoders>::CreateVertexProgramKey((uint64_t)&v63, a2, a9, (uint64_t)&v60, *(unsigned __int8 *)(a8 + 3385), a6, (*(void *)(a3[101] + 7288) >> 22) & 1);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__p.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v60.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_19;
      }
    }
    else if ((SHIBYTE(v60.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_19;
    }
    uint64_t v18 = (void *)v60.__r_.__value_.__r.__words[0];
  }
  else
  {
    LOBYTE(v94) = 0;
    memset(v93, 0, sizeof(v93));
    uint64_t v67 = 0;
    long long v68 = 0;
    v66 = 0;
    long long v69 = *(long long *)((char *)&v93[1] + 8);
    uint64_t v70 = 0;
    char v71 = 0;
    AGX::UserProgramKeyFactory<AGX::HAL200::Classes,AGX::HAL200::Encoders>::CreateVertexProgramKey((uint64_t)&v63, a2, a9, (uint64_t)&v66, 0, a6, 0);
    if (SHIBYTE(v70) < 0)
    {
      operator delete((void *)v69);
      if ((SHIBYTE(v68) & 0x80000000) == 0) {
        goto LABEL_19;
      }
    }
    else if ((SHIBYTE(v68) & 0x80000000) == 0)
    {
      goto LABEL_19;
    }
    uint64_t v18 = v66;
  }
  operator delete(v18);
LABEL_19:
  uint64_t v19 = a3[101];
  unint64_t v20 = *(unsigned int *)(v19 + 7288);
  v21.unint64_t key = ((v20 << 29) & 0x40000000 | v63.cs.common.key & 0x8BFFFEFF | (*(unsigned __int8 *)(v19 + 7440) << 26)) ^ 0x40000000;
  v63.cs.common = v21;
  unint64_t key = v63.cs.var0.key & 0xFFFFFDFFF67FFFFFLL | (((v20 >> 8) & 3) << 23);
  v63.cs.var0.unint64_t key = key;
  uint64_t v64 = a4 & 0xC00C0000;
  if ((a4 & 0x40000) != 0)
  {
    if (AGX::isTelemetryEnabled(void)::once != -1) {
      dispatch_once(&AGX::isTelemetryEnabled(void)::once, &__block_literal_global_6424);
    }
    v21.char var0 = ($CBEC0DC0C06941078BCF76921B43C9FE)v63.cs.common;
    int v23 = 1;
    unint64_t key = v63.cs.var0.key;
  }
  else
  {
    int v23 = 0;
  }
  v63.cs.common.unint64_t key = v23 | (a4 >> 21) & 8 | v21.key & 0xFFFFFFF4;
  v63.cs.var0.unint64_t key = key & 0xFFFFFFFFFBFFFFFFLL | (((a4 >> 21) & 1) << 26);
  ReflectionKey::initGPUCompilerSPIOptionsHash((uint64_t)v93, (void *)[(MTLRenderPipelineDescriptor *)a2 gpuCompilerSPIOptions]);
  long long v91 = v93[0];
  long long v92 = v93[1];
  os_unfair_lock_lock((os_unfair_lock_t)(a7 + 1368));
  long long v24 = *(void **)(a7 + 1328);
  uint64_t v25 = *(unsigned int *)(a7 + 1336);
  long long v26 = (void *)VectorMap<ReflectionKey,AGX::Program<AGX::HAL200::IntersectionProgramVariant,AGX::UserIntersectionProgramKey,AGX::HAL200::IndirectArgumentLayout,AGXG17FamilyIndirectArgumentBufferLayout>::ReflectionEntry,4u>::find(v24, *(_DWORD *)(a7 + 1336), &v91);
  if (!v26)
  {
    if (v25 == 4) {
      operator new();
    }
    uint64_t v27 = (long long *)&v24[4 * v25];
    long long v28 = v92;
    long long *v27 = v91;
    v27[1] = v28;
    uint64_t v29 = *(void *)(a7 + 1328);
    unsigned int v30 = *(_DWORD *)(a7 + 1336);
    *(_DWORD *)(a7 + 1336) = v30 + 1;
    long long v26 = (void *)(v29 + 24 * v30 + 128);
  }
  uint64_t v31 = a4 & 0x330000 | 3;
  if ((v31 & ~v26[1]) != 0)
  {
    uint64_t v32 = *v26 | v31;
    void *v26 = v32;
  }
  else
  {
    uint64_t v32 = 0;
  }
  v54 = a3;
  os_unfair_lock_unlock((os_unfair_lock_t)(a7 + 1368));
  char v59 = 0;
  unint64_t v51 = v32 | a4 & 0xFFFFFFFFFFCCFFFCLL;
  v58 = (NSObject **)AGX::Program<AGX::HAL200::VertexProgramVariant,AGX::VertexProgramKey,AGX::HAL200::IndirectArgumentLayout,AGXG17FamilyIndirectArgumentBufferLayout>::getOrCreateVariantEntry((os_unfair_lock_s *)a7, (uint64_t)&v63, &v59, v32 | a4 & 0xFFCCFFFC, a5 != 0);
  if (v59)
  {
    unint64_t mutableBuffers = v63.cs.mutableBuffers;
    char v50 = v63.geometry_buffer_desc.__r_.__value_.var0.__s.__data_[16];
    uint64_t v34 = objc_msgSend((id)-[MTLRenderPipelineDescriptor pipelineLibrary](a2, "pipelineLibrary"), "pipelineCache");
    char v35 = (void *)[(MTLRenderPipelineDescriptor *)a2 pipelineLibrary];
    if ([v35 pipelineCache] && (objc_msgSend(v35, "disableRunTimeCompilation") & 1) != 0) {
      LOBYTE(v36) = 1;
    }
    else {
      unsigned int v36 = ([(NSArray *)[(MTLRenderPipelineDescriptor *)a2 binaryArchives] count] != 0) & (a4 >> 2);
    }
    if (*(_DWORD *)*MEMORY[0x263F4B1E8]) {
      IOGPUDeviceTraceEvent();
    }
    unint64_t v49 = mutableBuffers;
    uint64_t v37 = objc_opt_new();
    [v37 setSync:a11 ^ 1u];
    [v37 setFunction:v53];
    [v37 setFrameworkData:a9];
    [v37 setPipelineCache:v34];
    [v37 setDestinationBinaryArchive:a5];
    objc_msgSend(v37, "setBinaryArchives:", -[MTLRenderPipelineDescriptor binaryArchives](a2, "binaryArchives"));
    [v37 setPipelineOptions:a4 | 3];
    if ((a4 & 0x330003) == 0) {
      objc_msgSend(v37, "setPipelineOptions:", objc_msgSend(v37, "pipelineOptions") | 0x8000);
    }
    char v38 = [(MTLRenderPipelineDescriptor *)a2 newPipelineScript];
    if (v38)
    {
      [v37 setAirScript:v38];
      dispatch_release(v38);
    }
    objc_msgSend(v37, "setGpuCompilerSPIOptions:", -[MTLRenderPipelineDescriptor gpuCompilerSPIOptions](a2, "gpuCompilerSPIOptions"));
    char v39 = [(MTLRenderPipelineDescriptor *)a2 vertexLinkedFunctions];
    objc_msgSend(v37, "setVisibleFunctions:", -[MTLLinkedFunctions functions](v39, "functions"));
    objc_msgSend(v37, "setVisibleFunctionGroups:", -[MTLLinkedFunctions groups](v39, "groups"));
    objc_msgSend(v37, "setPrivateVisibleFunctions:", -[MTLLinkedFunctions privateFunctions](v39, "privateFunctions"));
    [v37 setArchiverId:a10];
    char v40 = v36;
    uint64_t v52 = [(MTLRenderPipelineDescriptor *)a2 maxVertexCallStackDepth];
    MeshProgramKey v56 = [(MTLRenderPipelineDescriptor *)a2 vertexLinkedFunctions];
    BOOL v48 = [(MTLRenderPipelineDescriptor *)a2 supportIndirectCommandBuffers];
    BOOL v47 = [(MTLRenderPipelineDescriptor *)a2 supportAddingVertexBinaryFunctions];
    uint64_t v46 = [(MTLRenderPipelineDescriptor *)a2 gpuCompilerSPIOptions];
    char v41 = [v54 requiresRaytracingEmulation];
    v85[0] = MEMORY[0x263EF8330];
    v85[1] = 3221225472;
    v85[2] = ___ZN3AGX23UserCommonShaderFactoryINS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE26createVertexProgramVariantEP27MTLRenderPipelineDescriptorP18AGXG17FamilyDevicemP25AGXG17FamilyBinaryArchiveP7NSArrayPNS1_13VertexProgramEPNS1_22FragmentProgramVariantEPU27objcproto16OS_dispatch_data8NSObjectSK_bU13block_pointerFvPNS1_20VertexProgramVariantE13ReflectionKeyP19NSMutableDictionary16MTLCompilerErrorP8NSStringE_block_invoke;
    v85[3] = &unk_26516EEC8;
    v85[7] = v65;
    v85[8] = a1;
    v85[4] = v53;
    unsigned __int8 v86 = a11;
    char v87 = v50 & 1;
    v85[9] = v58;
    v85[10] = a7;
    v85[11] = v51;
    long long v88 = v91;
    long long v89 = v92;
    v85[5] = v54;
    v85[6] = a2;
    v85[12] = a8;
    v85[13] = v49;
    char v90 = v40;
    if ((v41 & 1) == 0
      && AGX::UserShaderFactory<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::hasAirLinkedIntersectionFunction(v56))
    {
      LOBYTE(v93[0]) = v41;
      *((void *)&v93[0] + 1) = v52;
      v93[1] = (unint64_t)v56;
      *(void *)&v93[2] = 0;
      *((void *)&v93[2] + 1) = a4;
      v94 = a6;
      v95 = v54;
      uint64_t v96 = 0;
      BOOL v97 = v48;
      BOOL v98 = v47;
      uint64_t v99 = v46;
      AGX::UserShaderFactory<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::compileFunctionWithAirLinkedIntersectionFunction_Impl<AGX::VertexProgramKey,true>(a1, (uint64_t)&v63, v37, v93, (uint64_t)v85);
    }
    else
    {
      int v42 = *a1;
      v66 = (void *)MEMORY[0x263EF8330];
      uint64_t v67 = 3221225472;
      long long v68 = ___ZN3AGX17UserShaderFactoryINS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE20compileFunction_ImplINS_16VertexProgramKeyEEEvRKT_P29MTLCompileFunctionRequestDataRKNS5_21DriverRequestDataImplILb1EEEU13block_pointerFvRK20AGCDeserializedReplyRKNS_28CompileFunctionReplyMetadataERKNS5_19DriverReplyDataImplILb1EEEE_block_invoke;
      *(void *)&long long v69 = &unk_26516F018;
      *((void *)&v69 + 1) = v85;
      *(void *)&v93[0] = MEMORY[0x263EF8330];
      *((void *)&v93[0] + 1) = 3221225472;
      *(void *)&v93[1] = ___ZN3AGX8Compiler14compileProgramINS_16VertexProgramKeyE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_RKNS_28CompileFunctionReplyMetadataEE_block_invoke;
      *((void *)&v93[1] + 1) = &unk_26516F7C0;
      *(void *)&v93[2] = &v66;
      AGX::Compiler::compileProgram<AGX::VertexProgramKey,AGCDeserializedReply>(v42, (uint64_t)&v63, v37, (uint64_t)v93);
    }
  }
  else if ((v32 & 0x330003) != 0)
  {
    uint64_t v43 = *a1;
    v82[0] = MEMORY[0x263EF8330];
    v82[1] = 3221225472;
    v82[2] = ___ZN3AGX23UserCommonShaderFactoryINS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE26createVertexProgramVariantEP27MTLRenderPipelineDescriptorP18AGXG17FamilyDevicemP25AGXG17FamilyBinaryArchiveP7NSArrayPNS1_13VertexProgramEPNS1_22FragmentProgramVariantEPU27objcproto16OS_dispatch_data8NSObjectSK_bU13block_pointerFvPNS1_20VertexProgramVariantE13ReflectionKeyP19NSMutableDictionary16MTLCompilerErrorP8NSStringE_block_invoke_2;
    v82[3] = &unk_26516EEF0;
    long long v83 = v91;
    long long v84 = v92;
    v82[4] = a3;
    v82[5] = a7;
    v82[6] = v32 | a4 & 0xFFFFFFFFFFCCFFFCLL;
    v82[7] = v58;
    [*v43 reflectionWithFunction:v53 options:v32 & 0x330003 sync:a11 ^ 1u completionHandler:v82];
  }
  block[0] = MEMORY[0x263EF8330];
  block[1] = 3321888768;
  v73 = ___ZN3AGX23UserCommonShaderFactoryINS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE26createVertexProgramVariantEP27MTLRenderPipelineDescriptorP18AGXG17FamilyDevicemP25AGXG17FamilyBinaryArchiveP7NSArrayPNS1_13VertexProgramEPNS1_22FragmentProgramVariantEPU27objcproto16OS_dispatch_data8NSObjectSK_bU13block_pointerFvPNS1_20VertexProgramVariantE13ReflectionKeyP19NSMutableDictionary16MTLCompilerErrorP8NSStringE_block_invoke_3;
  unsigned __int8 v74 = &unk_26F851DA8;
  uint64_t v77 = a7;
  char v78 = v58;
  AGX::VertexProgramKey::VertexProgramKey((AGX::VertexProgramKey *)v79, &v63);
  uint64_t v75 = a12;
  long long v80 = v91;
  long long v81 = v92;
  long long v76 = v65;
  BOOL v44 = *v58;
  if (a11)
  {
    global_queue = dispatch_get_global_queue(0, 0);
    dispatch_group_notify(v44, global_queue, block);
  }
  else
  {
    dispatch_group_wait(v44, 0xFFFFFFFFFFFFFFFFLL);
    v73(block);
  }
  AGX::Impl::VertexProgramKey::~VertexProgramKey(v79);
  AGX::Impl::VertexProgramKey::~VertexProgramKey((void **)&v63._vptr$ProgramKey);
  _Block_object_dispose(v65, 8);
}

void sub_2429E19B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57)
{
  os_unfair_lock_unlock(v57);
  AGX::Impl::VertexProgramKey::~VertexProgramKey(&a31);
  _Block_object_dispose(&a57, 8);
  _Unwind_Resume(a1);
}

uint64_t AGX::UserProgramKeyFactory<AGX::HAL200::Classes,AGX::HAL200::Encoders>::CreateVertexProgramKey(uint64_t a1, MTLRenderPipelineDescriptor *a2, NSObject *a3, uint64_t a4, int a5, void *a6, int a7)
{
  {
    AGX::UserProgramKeyFactory<AGX::HAL200::Classes,AGX::HAL200::Encoders>::GetPipelineScript<MTLRenderPipelineDescriptor>(MTLRenderPipelineDescriptor const*)::enable_pipeline_script = 0;
  }
  if (AGX::UserProgramKeyFactory<AGX::HAL200::Classes,AGX::HAL200::Encoders>::GetPipelineScript<MTLRenderPipelineDescriptor>(MTLRenderPipelineDescriptor const*)::enable_pipeline_script)
  {
    [(MTLRenderPipelineDescriptor *)a2 newPipelineScript];
    operator new();
  }
  *(_OWORD *)uint64_t v17 = *(_OWORD *)a4;
  uint64_t v18 = *(void *)(a4 + 16);
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  long long v14 = *(_OWORD *)(a4 + 24);
  *(void *)(a4 + 16) = 0;
  *(void *)(a4 + 24) = 0;
  *(_OWORD *)uint64_t v19 = v14;
  uint64_t v20 = *(void *)(a4 + 40);
  *(void *)(a4 + 32) = 0;
  *(void *)(a4 + 40) = 0;
  char v21 = *(unsigned char *)(a4 + 48);
  AGX::VertexProgramKey::VertexProgramKey(a1, (uint64_t)v17, a3, [(MTLRenderPipelineDescriptor *)a2 vertexLinkedFunctions], a6, a5);
  if (SHIBYTE(v20) < 0)
  {
    operator delete(v19[0]);
    if ((SHIBYTE(v18) & 0x80000000) == 0) {
      goto LABEL_6;
    }
  }
  else if ((SHIBYTE(v18) & 0x80000000) == 0)
  {
    goto LABEL_6;
  }
  operator delete(v17[0]);
LABEL_6:
  AGX::VertexProgramKey::initCommon((AGX::VertexProgramKey *)a1, a2);
  *(_DWORD *)(a1 + 52) &= ~0x80u;
  uint64_t v15 = 0x8000000;
  if (!a7) {
    uint64_t v15 = 0;
  }
  *(void *)(a1 + 56) = *(void *)(a1 + 56) & 0xFFFFFFFFF7FFFFFFLL | v15;
  return [(MTLRenderPipelineDescriptor *)a2 supportIndirectCommandBuffers];
}

void sub_2429E1E30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  std::unique_ptr<AGX::PipelineScript>::~unique_ptr[abi:nn180100]((dispatch_object_t **)(v28 - 88));
  _Unwind_Resume(a1);
}

void ___ZN3AGX23UserCommonShaderFactoryINS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE26createVertexProgramVariantEP27MTLRenderPipelineDescriptorP18AGXG17FamilyDevicemP25AGXG17FamilyBinaryArchiveP7NSArrayPNS1_13VertexProgramEPNS1_22FragmentProgramVariantEPU27objcproto16OS_dispatch_data8NSObjectSK_bU13block_pointerFvPNS1_20VertexProgramVariantE13ReflectionKeyP19NSMutableDictionary16MTLCompilerErrorP8NSStringE_block_invoke(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a3 + 40);
  uint64_t v7 = *(__CFString **)(a3 + 48);
  *(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) = objc_alloc_init(MEMORY[0x263EFF9A0]);
  AGX::UserShaderFactory<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::fillCompilePerformanceStatisticsDictionary(*(NSObject **)a3, *(void *)(a3 + 8), *(void **)(*(void *)(*(void *)(a1 + 56) + 8) + 40), *(void *)(a3 + 56), [*(id *)(a1 + 32) name], *(unsigned char *)(a1 + 112));
  uint64_t v8 = *(void **)(*(void *)(*(void *)(a1 + 56) + 8) + 40);
  if (v8)
  {
    uint64_t v9 = (void *)[v8 objectForKey:*MEMORY[0x263F12630]];
    if (v9) {
      [v9 unsignedLongLongValue];
    }
  }
  if (*(_DWORD *)*MEMORY[0x263F4B1E8]) {
    IOGPUDeviceTraceEvent();
  }
  if (v6)
  {
    char v10 = 1;
    goto LABEL_21;
  }
  if (a2[33])
  {
    uint64_t v11 = a2 + 33;
    if (!a2[34]) {
      uint64_t v11 = a2 + 103;
    }
    if (!*v11) {
      goto LABEL_16;
    }
  }
  else
  {
    uint64_t v11 = a2 + 103;
    if (!a2[103]) {
      goto LABEL_16;
    }
  }
  if (v11[1])
  {
    char v10 = 0;
    uint64_t v7 = @"Internal error during function compilation";
    goto LABEL_20;
  }
LABEL_16:
  if (!*(unsigned char *)(a1 + 113)
    || (AGX::ProgramBindingRemap<AGX::HAL200::Encoders,AGX::HAL200::Classes>::isShaderExecuteIndirectCompatible(a2, 0) & 1) != 0)
  {
    uint64_t v6 = 0;
    char v10 = 1;
    goto LABEL_21;
  }
  char v10 = 0;
  uint64_t v7 = @"Vertex shader cannot be used with indirect command buffers";
LABEL_20:
  uint64_t v6 = 2;
LABEL_21:
  AGX::Program<AGX::HAL200::VertexProgramVariant,AGX::VertexProgramKey,AGX::HAL200::IndirectArgumentLayout,AGXG17FamilyIndirectArgumentBufferLayout>::signalPending(*(void *)(a1 + 80), *(void *)(a1 + 88), *(NSObject **)(a3 + 16), a1 + 114, *(void **)(a1 + 40), v6);
  if (!v6)
  {
    AGX::VsStateConfigGen3<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::VsStateConfigGen3((uint64_t)v19, a2);
    uint64_t v12 = *(void *)(a1 + 96);
    if (v12) {
      unsigned int v20 = v20 & 0xFFFFFFBF | (*(unsigned __int8 *)(v12 + 3385) << 6);
    }
    [*(id *)(a1 + 48) needsCustomBorderColorSamplers];
    uint64_t v13 = (void *)[*(id *)(a1 + 48) profileControl];
    if (v13)
    {
      long long v14 = v13;
      [v13 uscCliqueTraceLevel];
      [v14 uscEmitPosition];
      [v14 uscEmitThreadControlFlow];
    }
    operator new();
  }
  uint64_t v15 = *(void *)(a1 + 72);
  long long v16 = *(void **)(a3 + 32);
  int v17 = *(unsigned __int8 *)(a1 + 146);
  *(void *)(v15 + 8) = 0;
  *(void *)(v15 + 16) = v6;

  *(void *)(v15 + 24) = [(__CFString *)v7 copy];
  if (*(void *)(v15 + 8))
  {

    *(void *)(v15 + 32) = v16;
  }
  else
  {
    if (v17) {
      char v18 = v10;
    }
    else {
      char v18 = 0;
    }
    *(unsigned char *)(v15 + 40) = v18;
  }
  dispatch_group_leave(*(dispatch_group_t *)v15);
}

void sub_2429E244C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  AGX::ProgramBindingRemap<AGX::HAL200::Encoders,AGX::HAL200::Classes>::~ProgramBindingRemap((uint64_t)va);
  if (*(char *)(v8 - 145) < 0) {
    operator delete(*(void **)(v8 - 168));
  }
  MEMORY[0x24566ED90](v7, 0x10F3C401D7DD63FLL);
  _Unwind_Resume(a1);
}

void AGX::UserShaderFactory<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::compileFunctionWithAirLinkedIntersectionFunction_Impl<AGX::VertexProgramKey,true>(void ***a1, uint64_t a2, void *a3, long long *a4, uint64_t a5)
{
  uint64_t v42 = *MEMORY[0x263EF8340];
  uint64_t v7 = *a1;
  v23[0] = MEMORY[0x263EF8330];
  v23[1] = 3221225472;
  long long v8 = a4[3];
  long long v26 = a4[2];
  long long v27 = v8;
  long long v28 = a4[4];
  long long v9 = a4[1];
  long long v24 = *a4;
  v23[2] = ___ZN3AGX17UserShaderFactoryINS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE53compileFunctionWithAirLinkedIntersectionFunction_ImplINS_16VertexProgramKeyELb1EEENSt3__19enable_ifIXT0_EvE4typeERKT_P29MTLCompileFunctionRequestDataNS5_21DriverRequestDataImplIXT0_EEEU13block_pointerFvRK20AGCDeserializedReplyRKNS_28CompileFunctionReplyMetadataERKNS5_19DriverReplyDataImplIXT0_EEEE_block_invoke;
  v23[3] = &unk_26516EF18;
  v23[5] = a5;
  v23[6] = a1;
  uint64_t v10 = *((void *)a4 + 10);
  long long v25 = v9;
  v23[4] = a3;
  uint64_t v29 = v10;
  v30[0] = MEMORY[0x263EF8330];
  v30[1] = 3221225472;
  _OWORD v30[2] = ___ZN3AGX8Compiler14compileProgramINS_16VertexProgramKeyE13AGCReplyArrayEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_RKNS_28CompileFunctionReplyMetadataEE_block_invoke;
  v30[3] = &unk_26516F7C0;
  v30[4] = v23;
  size_t v31 = 0;
  uint64_t v32 = 0;
  (*(void (**)(uint64_t, const void **, size_t *))(*(void *)a2 + 16))(a2, &v32, &v31);
  uint64_t v11 = dispatch_data_create(v32, v31, 0, 0);
  [a3 setDriverKeyData:v11];
  if ([a3 airScript])
  {
    uint64_t v12 = [a3 airScript];
    long long v40 = 0uLL;
    v41[0] = 0;
    *(void *)&long long v40 = dispatch_data_create_map(v12, (const void **)&v40 + 1, v41);
    uint64_t v13 = *((void *)&v40 + 1);
    uint64_t v14 = **((_DWORD **)&v40 + 1);
    CC_SHA256_Init(&c);
    (**(void (***)(uint64_t, CC_SHA256_CTX *))a2)(a2, &c);
    *(void *)len = 0;
    data = 0;
    if (AGX::GetSerializedVertexFormat((AGX *)(v13 + v14), &data, (size_t *)len, v15, v16))
    {
      int v17 = data;
      CC_SHA256_Update(&c, data, len[0]);
      free(v17);
    }
    CC_SHA256_Final(md, &c);
    dispatch_release((dispatch_object_t)v40);
    long long v40 = *(_OWORD *)md;
    *(_OWORD *)char v41 = v37;
    [a3 setVendorPluginFunctionId:&v40];
  }
  *(void *)c.count = MEMORY[0x263EF8330];
  *(void *)c.hash = 3221225472;
  *(void *)&c.hash[2] = ___ZN3AGX8Compiler14compileProgramINS_16VertexProgramKeyE13AGCReplyArrayEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke;
  *(void *)&c.hash[4] = &unk_26516F810;
  *(void *)&c.hash[6] = a3;
  *(void *)c.wbuf = v30;
  if ([a3 function])
  {
    uint64_t v18 = mach_absolute_time();
    uint64_t v19 = *v7;
    *(void *)md = MEMORY[0x263EF8330];
    *(void *)&md[8] = 3221225472;
    *(void *)&long long v37 = ___ZN3AGX8Compiler14compileProgramINS_16VertexProgramKeyE13AGCReplyArrayEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke_4;
    *((void *)&v37 + 1) = &unk_26516F860;
    p_CC_SHA256_CTX c = &c;
    uint64_t v39 = v18;
    [v19 compileFunctionRequest:a3 completionHandler:md];
  }
  else
  {
    if ([a3 frameworkData] || objc_msgSend(a3, "pipelineOptions")) {
      AGX::Compiler::compileProgram<AGX::UserIntersectionProgramKey,AGCReplyArray>(AGX::UserIntersectionProgramKey const&,MTLCompileFunctionRequestData *,void({block_pointer})(AGCReplyArray const&,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,MTLCompilerError,NSString *,unsigned long long))::{lambda(void)#1}::operator()[abi:[AGX] Failed assertion __requestData.frameworkData && _requestData.pipelineOptions_]();
    }
    *(void *)md = MEMORY[0x263EF8330];
    *(void *)&md[8] = 3221225472;
    *(void *)&long long v37 = ___ZN3AGX8Compiler14compileProgramINS_16VertexProgramKeyE13AGCReplyArrayEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke_3;
    *((void *)&v37 + 1) = &unk_26516F838;
    p_CC_SHA256_CTX c = &c;
    BOOL v20 = objc_msgSend((id)objc_msgSend(a3, "binaryArchives"), "count") == 0;
    char v21 = *v7;
    uint64_t v22 = [a3 driverKeyData];
    if (v20) {
      objc_msgSend(v21, "compileRequest:pipelineCache:sync:completionHandler:", v22, objc_msgSend(a3, "pipelineCache"), objc_msgSend(a3, "sync"), md);
    }
    else {
      objc_msgSend(v21, "compileRequest:binaryArchives:failOnBinaryArchiveMiss:pipelineCache:sync:completionHandler:", v22, objc_msgSend(a3, "binaryArchives"), 0, objc_msgSend(a3, "pipelineCache"), objc_msgSend(a3, "sync"), md);
    }
  }
  dispatch_release(v11);
}

void sub_2429E2894(_Unwind_Exception *a1)
{
  dispatch_release(*(dispatch_object_t *)(v1 - 128));
  _Unwind_Resume(a1);
}

void ___ZN3AGX17UserShaderFactoryINS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE20compileFunction_ImplINS_16VertexProgramKeyEEEvRKT_P29MTLCompileFunctionRequestDataRKNS5_21DriverRequestDataImplILb1EEEU13block_pointerFvRK20AGCDeserializedReplyRKNS_28CompileFunctionReplyMetadataERKNS5_19DriverReplyDataImplILb1EEEE_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void sub_2429E294C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t ___ZN3AGX8Compiler14compileProgramINS_16VertexProgramKeyE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_RKNS_28CompileFunctionReplyMetadataEE_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  v11[0] = a3;
  v11[1] = a4;
  v11[2] = a5;
  v11[3] = a6;
  v11[4] = a7;
  v11[5] = a8;
  v11[6] = a9;
  v11[7] = a10;
  return (*(uint64_t (**)(void, uint64_t, void *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), a2, v11, a4, a5, a6, a7, a8);
}

void ___ZN3AGX23UserCommonShaderFactoryINS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE26createVertexProgramVariantEP27MTLRenderPipelineDescriptorP18AGXG17FamilyDevicemP25AGXG17FamilyBinaryArchiveP7NSArrayPNS1_13VertexProgramEPNS1_22FragmentProgramVariantEPU27objcproto16OS_dispatch_data8NSObjectSK_bU13block_pointerFvPNS1_20VertexProgramVariantE13ReflectionKeyP19NSMutableDictionary16MTLCompilerErrorP8NSStringE_block_invoke_2(uint64_t a1, uint64_t a2, NSObject *a3)
{
  AGX::Program<AGX::HAL200::VertexProgramVariant,AGX::VertexProgramKey,AGX::HAL200::IndirectArgumentLayout,AGXG17FamilyIndirectArgumentBufferLayout>::signalPending(*(void *)(a1 + 40), *(void *)(a1 + 48), a3, a1 + 64, *(void **)(a1 + 32), a2);
  int8x16_t v4 = **(NSObject ***)(a1 + 56);

  dispatch_group_leave(v4);
}

void ___ZN3AGX23UserCommonShaderFactoryINS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE26createVertexProgramVariantEP27MTLRenderPipelineDescriptorP18AGXG17FamilyDevicemP25AGXG17FamilyBinaryArchiveP7NSArrayPNS1_13VertexProgramEPNS1_22FragmentProgramVariantEPU27objcproto16OS_dispatch_data8NSObjectSK_bU13block_pointerFvPNS1_20VertexProgramVariantE13ReflectionKeyP19NSMutableDictionary16MTLCompilerErrorP8NSStringE_block_invoke_3(void *a1)
{
  memset(v12, 0, 26);
  uint64_t v2 = a1[7];
  if (!*(unsigned char *)(v2 + 41))
  {
    uint64_t v6 = 0;
    goto LABEL_17;
  }
  if (*(void *)(v2 + 8))
  {
    v3 = (os_unfair_lock_s *)a1[6];
    int8x16_t v4 = v3 + 342;
    os_unfair_lock_lock(v3 + 342);
    int8x16_t v5 = VectorMap<AGX::VertexProgramKey,AGX::ProgramVariantEntry<AGX::HAL200::VertexProgramVariant>,4u>::operator[]((uint64_t)v3, (uint64_t)(a1 + 8));
    if (*v5)
    {
      os_unfair_lock_unlock(v4);
      dispatch_group_wait((dispatch_group_t)*v5, 0xFFFFFFFFFFFFFFFFLL);
    }
    else
    {
      long long v8 = dispatch_group_create();
      *int8x16_t v5 = v8;
      dispatch_group_enter(v8);
      uint64_t v9 = *(void *)(v2 + 16);
      uint64_t v10 = *(void **)(v2 + 24);
      v5[1] = *(void *)(v2 + 8);
      v5[2] = v9;

      v5[3] = objc_msgSend(v10, "copy", (unsigned __int128)0, 0, *(_OWORD *)&v12[8], *(void *)&v12[24]);
      if (v5[1])
      {

        v5[4] = 0;
      }
      else
      {
        *((unsigned char *)v5 + 40) = 0;
      }
      dispatch_group_leave((dispatch_group_t)*v5);
      *(void *)(v2 + 8) = 0;
      os_unfair_lock_unlock(v4);
    }
    uint64_t v6 = 0;
    uint64_t v7 = *(NSObject **)v2;
    if (!*(void *)v2) {
      goto LABEL_14;
    }
  }
  else
  {
    uint64_t v6 = *(void **)(v2 + 24);
    *(void *)(v2 + 24) = 0;
    uint64_t v7 = *(NSObject **)v2;
    if (!*(void *)v2) {
      goto LABEL_14;
    }
  }
  dispatch_release(v7);
LABEL_14:
  uint64_t v11 = *(void *)(v2 + 8);
  if (v11) {
    (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
  }

  MEMORY[0x24566ED90](v2, 0x10A0C405D73F519);
LABEL_17:
  (*(void (**)(void))(a1[4] + 16))();
}

void sub_2429E2BEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  os_unfair_lock_unlock(v9);
  AGX::ProgramVariantEntry<AGX::HAL200::TileProgramVariant>::~ProgramVariantEntry((uint64_t)&a9);
  _Unwind_Resume(a1);
}

AGX::VertexProgramKey *AGX::VertexProgramKey::VertexProgramKey(AGX::VertexProgramKey *this, const VertexProgramKey *a2)
{
  *(void *)this = &unk_26F852C20;
  *((_DWORD *)this + 2) = a2->streamType;
  *((void *)this + 3) = 0;
  *((void *)this + 4) = 0;
  *((void *)this + 2) = 0;
  begin = a2->stream.__begin_;
  end = a2->stream.__end_;
  int64_t v6 = (char *)end - (char *)begin;
  if (end != begin)
  {
    if (v6 < 0) {
      abort();
    }
    uint64_t v7 = (char *)operator new((char *)end - (char *)begin);
    *((void *)this + 2) = v7;
    *((void *)this + 3) = v7;
    long long v8 = &v7[4 * (v6 >> 2)];
    *((void *)this + 4) = v8;
    memcpy(v7, begin, v6);
    *((void *)this + 3) = v8;
  }
  *(void *)this = &unk_26F852BD8;
  long long v9 = *(_OWORD *)&a2->cs.mutableBuffers;
  *((void *)this + 7) = a2->cs.var0.key;
  *(_OWORD *)((char *)this + 40) = v9;
  if (a2->geometry_buffer_desc.__r_.__value_.var0.__s.__data_[15] < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 64), *((const std::string::value_type **)&a2->cs.var0.key + 1), (std::string::size_type)a2->geometry_buffer_desc.__r_.__value_.var0.__l.__data_);
  }
  else
  {
    long long v10 = *(long long *)((char *)&a2->cs.var0 + 8);
    *((void *)this + 10) = a2->geometry_buffer_desc.__r_.__value_.var0.__l.__size_;
    *((_OWORD *)this + 4) = v10;
  }
  int v11 = *((_DWORD *)&a2->geometry_buffer_desc.__r_.__value_.var0.__l + 4);
  *((void *)this + 12) = 0;
  *((_DWORD *)this + 22) = v11;
  *((void *)this + 13) = 0;
  *((void *)this + 14) = 0;
  uint64_t v13 = *(const void **)&a2->geometry_buffer_desc.__r_.var0;
  int64_t var0 = a2->geometry_buffer_desc.var0;
  int64_t v14 = var0 - (void)v13;
  if ((const void *)var0 != v13)
  {
    if (v14 < 0) {
      abort();
    }
    uint64_t v15 = (char *)operator new(var0 - (void)v13);
    *((void *)this + 12) = v15;
    *((void *)this + 13) = v15;
    long long v16 = &v15[32 * (v14 >> 5)];
    *((void *)this + 14) = v16;
    memcpy(v15, v13, v14);
    *((void *)this + 13) = v16;
  }
  *((void *)this + 15) = 0;
  *((void *)this + 16) = 0;
  *((void *)this + 17) = 0;
  uint64_t v18 = *(unsigned int **)&a2[1].streamType;
  int v17 = a2[1].stream.__begin_;
  int64_t v19 = (char *)v17 - (char *)v18;
  if (v17 != v18)
  {
    if (v19 < 0) {
      abort();
    }
    BOOL v20 = (char *)operator new((char *)v17 - (char *)v18);
    *((void *)this + 15) = v20;
    *((void *)this + 16) = v20;
    char v21 = &v20[32 * (v19 >> 5)];
    *((void *)this + 17) = v21;
    memcpy(v20, v18, v19);
    *((void *)this + 16) = v21;
  }
  *(void *)this = &unk_26F853FC0;
  if (SHIBYTE(a2[1].cs.common.key) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)this + 6, (const std::string::value_type *)a2[1].stream.__end_cap_.__value_, a2[1].cs.mutableBuffers);
  }
  else
  {
    long long v22 = *(_OWORD *)&a2[1].stream.__end_cap_.__value_;
    *((void *)this + 20) = *(void *)&a2[1].cs.pcf.var0;
    *((_OWORD *)this + 9) = v22;
  }
  int v23 = (std::string *)((char *)this + 168);
  if (a2[1].geometry_buffer_desc.__r_.__value_.var0.__s.__data_[7] < 0)
  {
    std::string::__init_copy_ctor_external(v23, (const std::string::value_type *)a2[1].cs.var0.key, *(&a2[1].cs.var0.key + 1));
  }
  else
  {
    $16D3F7CACB5BE37E855F7F198D3FDBD3 v24 = a2[1].cs.var0;
    *((void *)this + 23) = a2[1].geometry_buffer_desc.__r_.__value_.var0.__l.__data_;
    *($16D3F7CACB5BE37E855F7F198D3FDBD3 *)&v23->__r_.__value_.__l.__data_ = v24;
  }
  *((unsigned char *)this + 192) = a2[1].geometry_buffer_desc.__r_.__value_.var0.__s.__data_[8];
  *(void *)this = &unk_26F852C60;
  *((void *)this + 25) = *((void *)&a2[1].geometry_buffer_desc.__r_.__value_.var0.__l + 2);
  return this;
}

void sub_2429E2E64(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 167) < 0) {
    operator delete(*v5);
  }
  *(void *)uint64_t v1 = v4;
  long long v8 = *(void **)(v1 + 120);
  if (v8)
  {
    *(void *)(v1 + 128) = v8;
    operator delete(v8);
  }
  long long v9 = *v6;
  if (*v6)
  {
    *(void *)(v1 + 104) = v9;
    operator delete(v9);
  }
  if (*(char *)(v1 + 87) < 0) {
    operator delete(*v3);
  }
  *(void *)uint64_t v1 = v2;
  long long v10 = *(void **)(v1 + 16);
  if (v10)
  {
    *(void *)(v1 + 24) = v10;
    operator delete(v10);
  }
  _Unwind_Resume(exception_object);
}

void __destroy_helper_block_e8_64c28_ZTSN3AGX16VertexProgramKeyE(uint64_t a1)
{
}

AGX::VertexProgramKey *__copy_helper_block_e8_64c28_ZTSN3AGX16VertexProgramKeyE(uint64_t a1, uint64_t a2)
{
  return AGX::VertexProgramKey::VertexProgramKey((AGX::VertexProgramKey *)(a1 + 64), (const VertexProgramKey *)(a2 + 64));
}

void AGX::Program<AGX::HAL200::VertexProgramVariant,AGX::VertexProgramKey,AGX::HAL200::IndirectArgumentLayout,AGXG17FamilyIndirectArgumentBufferLayout>::signalPending(uint64_t a1, uint64_t a2, NSObject *a3, uint64_t a4, void *a5, uint64_t a6)
{
  uint64_t v37 = *MEMORY[0x263EF8340];
  uint64_t v6 = a2 & 0x330003;
  if ((a2 & 0x330003) != 0)
  {
    lock = (os_unfair_lock_s *)(a1 + 1368);
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 1368));
    uint64_t v13 = *(void **)(a1 + 1328);
    uint64_t v14 = *(unsigned int *)(a1 + 1336);
    uint64_t v15 = VectorMap<ReflectionKey,AGX::Program<AGX::HAL200::IntersectionProgramVariant,AGX::UserIntersectionProgramKey,AGX::HAL200::IndirectArgumentLayout,AGXG17FamilyIndirectArgumentBufferLayout>::ReflectionEntry,4u>::find(v13, *(_DWORD *)(a1 + 1336), (void *)a4);
    long long v16 = (void *)v15;
    if (v15)
    {
      uint64_t v17 = *(void *)(v15 + 8);
      if (a6)
      {
LABEL_4:
        *long long v16 = v17;
LABEL_26:
        os_unfair_lock_unlock(lock);
        return;
      }
    }
    else
    {
      if (v14 == 4) {
        operator new();
      }
      uint64_t v18 = &v13[4 * v14];
      long long v19 = *(_OWORD *)(a4 + 16);
      *uint64_t v18 = *(_OWORD *)a4;
      v18[1] = v19;
      uint64_t v20 = *(void *)(a1 + 1328);
      unsigned int v21 = *(_DWORD *)(a1 + 1336);
      *(_DWORD *)(a1 + 1336) = v21 + 1;
      long long v16 = (void *)(v20 + 24 * v21 + 128);
      uint64_t v17 = *(void *)(v20 + 24 * v21 + 136);
      if (a6) {
        goto LABEL_4;
      }
    }
    if ((v6 & ~v17) != 0)
    {
      if (a3) {
        dispatch_retain(a3);
      }
      long long v22 = v16[2];
      if (v22) {
        dispatch_release(v22);
      }
      v16[1] = v6;
      _OWORD v16[2] = a3;
    }
    if (!*(unsigned char *)(a1 + 2400))
    {
      long long v34 = 0u;
      long long v35 = 0u;
      long long v32 = 0u;
      long long v33 = 0u;
      unsigned int v30 = (void *)[objc_alloc(MEMORY[0x263F128C0]) initWithDevice:a5 reflectionData:a3 functionType:1 options:a2 | 0x8000];
      int v23 = (void *)[v30 arguments];
      uint64_t v24 = [v23 countByEnumeratingWithState:&v32 objects:v36 count:16];
      if (v24)
      {
        uint64_t v25 = *(void *)v33;
        do
        {
          for (uint64_t i = 0; i != v24; ++i)
          {
            if (*(void *)v33 != v25) {
              objc_enumerationMutation(v23);
            }
            long long v27 = *(void **)(*((void *)&v32 + 1) + 8 * i);
            if (![v27 type]
              && (objc_msgSend((id)objc_msgSend(v27, "dataTypeDescription"), "elementIsIndirectArgumentBuffer") & 1) != 0)
            {
              long long v28 = objc_msgSend(a5, "newIndirectArgumentBufferLayoutWithStructType:", objc_msgSend(v27, "bufferStructType"));
              uint64_t v29 = v28[2];
              v28[2] = 0;
              *(void *)(a1 + 8 * [v27 index] + 1376) = v29;
            }
          }
          uint64_t v24 = [v23 countByEnumeratingWithState:&v32 objects:v36 count:16];
        }
        while (v24);
      }

      *(unsigned char *)(a1 + 2400) = 1;
    }
    goto LABEL_26;
  }
}

void sub_2429E31A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_unfair_lock_t lock)
{
}

void ___ZN3AGX17UserShaderFactoryINS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE53compileFunctionWithAirLinkedIntersectionFunction_ImplINS_16VertexProgramKeyELb1EEENSt3__19enable_ifIXT0_EvE4typeERKT_P29MTLCompileFunctionRequestDataNS5_21DriverRequestDataImplIXT0_EEEU13block_pointerFvRK20AGCDeserializedReplyRKNS_28CompileFunctionReplyMetadataERKNS5_19DriverReplyDataImplIXT0_EEEE_block_invoke(uint64_t a1, void *a2, int8x16_t *a3)
{
  uint64_t v40 = *MEMORY[0x263EF8340];
  uint64_t v6 = *(void *)(a1 + 48);
  int8x16_t v29 = vextq_s8(a3[1], a3[1], 8uLL);
  uint64_t v7 = a3[2].i64[1];
  v30.i64[0] = a3[2].i64[0];
  v30.i64[1] = v7;
  v31.i64[0] = a3[3].i64[0];
  long long v8 = *(void **)(a1 + 72);
  uint64_t v33 = v7;
  uint64_t v34 = v31.i64[0];
  int v35 = 0;
  uint64_t v37 = 0;
  long long v36 = 0uLL;
  if (!v7)
  {
    v28[0] = &v29;
    v28[1] = a2;
    v28[2] = a1 + 80;
    v28[3] = v6;
    v28[4] = &v33;
    AGX::UserShaderFactory<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::createAirLinkedIntersectionVariantSets(AGCReplyArray const&,AGX::UserShaderFactory<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::IntersectionReplyMetadata const&,MTLLinkedFunctions *,AGX::UserShaderFactory<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::IntersectionDescriptorContext const&,unsigned int)::{lambda(NSArray<objc_object  {objcproto11MTLFunction}*> *)#1}::operator()((uint64_t)v28, (void *)[v8 functions]);
    AGX::UserShaderFactory<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::createAirLinkedIntersectionVariantSets(AGCReplyArray const&,AGX::UserShaderFactory<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::IntersectionReplyMetadata const&,MTLLinkedFunctions *,AGX::UserShaderFactory<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::IntersectionDescriptorContext const&,unsigned int)::{lambda(NSArray<objc_object  {objcproto11MTLFunction}*> *)#1}::operator()((uint64_t)v28, (void *)[v8 privateFunctions]);
  }
  int8x16_t v9 = a3[1];
  int8x16_t v29 = *a3;
  int8x16_t v30 = v9;
  int8x16_t v10 = a3[3];
  int8x16_t v31 = a3[2];
  int8x16_t v32 = v10;
  AGCDeserializedReply::AGCDeserializedReply((AGCDeserializedReply *)v28);
  if (!v31.i64[1])
  {
    int v11 = (void *)[*(id *)(a1 + 32) function];
    if (!AGCReplyArray::getDeserializedReplyWithName<AGCDeserializedReply>(a2, (char *)objc_msgSend((id)objc_msgSend(v11, "name"), "UTF8String"), (AGCDeserializedReply *)v28))
    {
      uint64_t v12 = (FILE *)*MEMORY[0x263EF8348];
      uint64_t v13 = (const char *)objc_msgSend((id)objc_msgSend(v11, "name"), "UTF8String");
      AGCReplyArray::getDebugStringAvailableNames((std::string *)buf, a2);
      if (buf[23] >= 0) {
        uint64_t v14 = buf;
      }
      else {
        uint64_t v14 = *(const char **)buf;
      }
      fprintf(v12, "AGX: %s:%d:%s: *** Failed to find compiler reply with function name \"%s\". The available function names in the reply array are: %s.\n", "agxa_user_shader_factory_template.hpp", 82, "compileFunctionWithAirLinkedIntersectionFunction_Impl_block_invoke", v13, v14);
      if ((buf[23] & 0x80000000) != 0) {
        operator delete(*(void **)buf);
      }
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR))
      {
        uint64_t v25 = objc_msgSend((id)objc_msgSend(v11, "name"), "UTF8String");
        AGCReplyArray::getDebugStringAvailableNames(&__p, a2);
        long long v26 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
            ? &__p
            : (std::string *)__p.__r_.__value_.__r.__words[0];
        *(_DWORD *)buf = 136316162;
        *(void *)&buf[4] = "agxa_user_shader_factory_template.hpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 82;
        *(_WORD *)&buf[18] = 2080;
        *(void *)&buf[20] = "compileFunctionWithAirLinkedIntersectionFunction_Impl_block_invoke";
        *(_WORD *)&buf[28] = 2080;
        *(void *)&buf[30] = v25;
        *(_WORD *)&buf[38] = 2080;
        uint64_t v39 = v26;
        _os_log_error_impl(&dword_2427AD000, &_os_log_internal, OS_LOG_TYPE_ERROR, "AGX: AGX: %s:%d:%s: *** Failed to find compiler reply with function name \"%s\". The available function names in the reply array are: %s.\n", buf, 0x30u);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
      }
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_INFO))
      {
        uint64_t v15 = objc_msgSend((id)objc_msgSend(v11, "name"), "UTF8String");
        AGCReplyArray::getDebugStringAvailableNames(&__p, a2);
        long long v16 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
            ? &__p
            : (std::string *)__p.__r_.__value_.__r.__words[0];
        *(_DWORD *)buf = 136316162;
        *(void *)&buf[4] = "agxa_user_shader_factory_template.hpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 82;
        *(_WORD *)&buf[18] = 2080;
        *(void *)&buf[20] = "compileFunctionWithAirLinkedIntersectionFunction_Impl_block_invoke";
        *(_WORD *)&buf[28] = 2080;
        *(void *)&buf[30] = v15;
        *(_WORD *)&buf[38] = 2080;
        uint64_t v39 = v16;
        _os_log_impl(&dword_2427AD000, &_os_log_internal, OS_LOG_TYPE_INFO, "AGX: AGX: %s:%d:%s: *** Failed to find compiler reply with function name \"%s\". The available function names in the reply array are: %s.\n", buf, 0x30u);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
      }
      v31.i64[1] = 2;
      v32.i64[0] = @"Internal error during function compilation.";
    }
  }
  uint64_t v17 = v33;
  uint64_t v18 = v34;
  uint64_t v33 = 0;
  uint64_t v34 = 0;
  *(void *)buf = v17;
  *(void *)&buf[8] = v18;
  *(_OWORD *)&buf[24] = v36;
  long long v36 = 0uLL;
  *(void *)&buf[16] = 0;
  uint64_t v39 = v37;
  uint64_t v37 = 0;
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  uint64_t v19 = *(void *)&buf[24];
  if (*(void *)&buf[24])
  {
    uint64_t v20 = *(void *)&buf[32];
    unsigned int v21 = *(void **)&buf[24];
    if (*(void *)&buf[32] != *(void *)&buf[24])
    {
      do
      {
        dispatch_release(*(dispatch_object_t *)(v20 - 24));

        *(void *)(v20 - 16) = 0;
        *(void *)(v20 - 8) = 0;
        v20 -= 80;
      }
      while (v20 != v19);
      unsigned int v21 = *(void **)&buf[24];
    }
    *(void *)&buf[32] = v19;
    operator delete(v21);
  }
  AGCDeserializedReply::~AGCDeserializedReply((AGCDeserializedReply *)v28);
  uint64_t v22 = v36;
  if ((void)v36)
  {
    uint64_t v23 = *((void *)&v36 + 1);
    uint64_t v24 = (void *)v36;
    if (*((void *)&v36 + 1) != (void)v36)
    {
      do
      {
        dispatch_release(*(dispatch_object_t *)(v23 - 24));

        *(void *)(v23 - 16) = 0;
        *(void *)(v23 - 8) = 0;
        v23 -= 80;
      }
      while (v23 != v22);
      uint64_t v24 = (void *)v36;
    }
    *((void *)&v36 + 1) = v22;
    operator delete(v24);
  }
}

void sub_2429E35FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  AGCDeserializedReply::~AGCDeserializedReply((AGCDeserializedReply *)va);
  AGX::UserShaderFactory<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::DriverReplyDataImpl<true>::~DriverReplyDataImpl(v9 - 192);
  _Unwind_Resume(a1);
}

uint64_t ___ZN3AGX8Compiler14compileProgramINS_16VertexProgramKeyE13AGCReplyArrayEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_RKNS_28CompileFunctionReplyMetadataEE_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  v11[0] = a3;
  v11[1] = a4;
  v11[2] = a5;
  v11[3] = a6;
  v11[4] = a7;
  v11[5] = a8;
  v11[6] = a9;
  v11[7] = a10;
  return (*(uint64_t (**)(void, uint64_t, void *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), a2, v11, a4, a5, a6, a7, a8);
}

void ___ZN3AGX8Compiler14compileProgramINS_16VertexProgramKeyE13AGCReplyArrayEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  v14[0] = MEMORY[0x263EF8330];
  v14[1] = 3221225472;
  uint64_t v15 = ___ZN3AGX8Compiler14compileProgramINS_16VertexProgramKeyE13AGCReplyArrayEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke_2;
  long long v16 = &unk_26516F7E8;
  uint64_t v17 = a9;
  uint64_t v18 = a3;
  uint64_t v19 = a4;
  uint64_t v20 = a5;
  uint64_t v21 = a6;
  uint64_t v22 = a7;
  uint64_t v12 = a1 + 32;
  int8x16_t v10 = *(void **)(a1 + 32);
  uint64_t v11 = *(void *)(v12 + 8);
  uint64_t v23 = a8;
  uint64_t v24 = v11;
  uint64_t v25 = a2;
  uint64_t v26 = a10;
  if (objc_msgSend(v10, "sync", MEMORY[0x263EF8330], 3221225472))
  {
    v15(v14);
  }
  else
  {
    global_queue = dispatch_get_global_queue(0, 0);
    dispatch_async(global_queue, v14);
  }
}

uint64_t ___ZN3AGX8Compiler14compileProgramINS_16VertexProgramKeyE13AGCReplyArrayEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke_3(uint64_t a1, void *a2)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), *a2);
}

uint64_t ___ZN3AGX8Compiler14compileProgramINS_16VertexProgramKeyE13AGCReplyArrayEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke_4(uint64_t a1, void *a2)
{
  if (getTimebaseInfo(void)::once != -1) {
    dispatch_once(&getTimebaseInfo(void)::once, &__block_literal_global_7474);
  }
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), *a2);
}

void ___ZN3AGX8Compiler14compileProgramINS_16VertexProgramKeyE13AGCReplyArrayEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke_2(void *a1)
{
  size_t size_ptr = 0;
  buffer_ptr = 0;
  uint64_t v2 = a1[12];
  v13[0] = 0;
  v13[1] = 0;
  *(_OWORD *)long long v8 = 0u;
  *(_OWORD *)std::string __p = 0u;
  long long v10 = 0u;
  uint64_t v11 = 0;
  uint64_t v12 = v13;
  if (v2 || (uint64_t v4 = a1[5]) == 0)
  {
    v3 = 0;
  }
  else
  {
    v3 = dispatch_data_create_map(v4, (const void **)&buffer_ptr, &size_ptr);
    AGCReplyArray::deserialize((AGCReplyArray *)v8, buffer_ptr);
  }
  (*(void (**)(void, void **))(a1[11] + 16))(a1[11], v8);
  if (v3) {
    dispatch_release(v3);
  }
  int8x16_t v5 = (void **)v8[0];
  uint64_t v6 = (void **)v8[1];
  while (v5 != v6)
  {
    uint64_t v7 = *v5;
    v5 += 2;
    free(v7);
  }
  std::__tree<std::__value_type<std::string,unsigned int>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned int>>>::destroy(v13[0]);
  if (__p[1])
  {
    *(void **)&long long v10 = __p[1];
    operator delete(__p[1]);
  }
  if (v8[0])
  {
    v8[1] = v8[0];
    operator delete(v8[0]);
  }
}

void sub_2429E3964(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  AGCReplyArray::~AGCReplyArray((AGCReplyArray *)va);
  _Unwind_Resume(a1);
}

void AGX::UserCommonShaderFactory<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::constructRenderPipeline<MTLRenderPipelineDescriptor>(void *a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19)
{
  if (a1)
  {
    [a1 vendorPrivate];
    if (!a4) {
      goto LABEL_5;
    }
  }
  else if (!a4)
  {
LABEL_5:
    if (a7) {
      [a7 vendorPrivate];
    }
    if (a10) {
      [a10 vendorPrivate];
    }
    uint64_t v22 = [[AGXG17FamilyRenderPipeline alloc] initWithDevice:a17 pipelineStateDescriptor:a19];
    [a19 _descriptorPrivate];
    if (a5) {
      BOOL v23 = *(_DWORD *)(a5 + 3736) == 0;
    }
    else {
      BOOL v23 = 0;
    }
    *(_DWORD *)&v22->_anon_1a8[384] = [a19 maxVertexAmplificationCount];
    [a19 sampleCoverage];
    *(_DWORD *)&v22->_anon_1a8[388] = v24;
    *(_DWORD *)&v22->_anon_1a8[396] = [a19 rasterSampleCount];
    *(_DWORD *)&v22->_anon_1a8[392] = [a19 sampleMask];
    int v25 = [a19 isRasterizationEnabled];
    v22->_anon_1a8[400] = v25;
    if (v25) {
      int v26 = 0;
    }
    else {
      int v26 = 0x20000;
    }
    *(_DWORD *)&v22->_anon_1a8[476] = *(_DWORD *)&v22->_anon_1a8[476] & 0xFFFDFFFF | v26;
    v22->_anon_1a8[429] = [a19 supportIndirectCommandBuffers];
    if (a5)
    {
      *(_DWORD *)&v22->_anon_1a8[404] = [a19 tessellationOutputWindingOrder] == 1;
      *(_DWORD *)&v22->_anon_1a8[408] = [a19 tessellationPartitionMode];
      *(_DWORD *)&v22->_anon_1a8[416] = [a19 tessellationFactorStepFunction];
      *(_DWORD *)&v22->_anon_1a8[424] = [a19 maxTessellationFactor];
      *(_DWORD *)&v22->_anon_1a8[420] = [a19 tessellationFactorFormat];
      v22->_anon_1a8[428] = [a19 isTessellationFactorScaleEnabled];
      switch([a19 tessellationPartitionMode])
      {
        case 0:
          if (v23) {
            int v27 = 6;
          }
          else {
            int v27 = 7;
          }
          goto LABEL_27;
        case 1:
          int v27 = !v23;
          goto LABEL_27;
        case 2:
          if (v23) {
            int v27 = 4;
          }
          else {
            int v27 = 5;
          }
          goto LABEL_27;
        case 3:
          if (v23) {
            int v27 = 2;
          }
          else {
            int v27 = 3;
          }
LABEL_27:
          *(_DWORD *)&v22->_anon_1a8[412] = v27;
          break;
        default:
          break;
      }
    }
    operator new();
  }
  [a4 vendorPrivate];
  goto LABEL_5;
}

void sub_2429E7014(_Unwind_Exception *a1)
{
}

id AGX::UserCommonShaderFactory<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::getRenderPipelinePerformanceStatistics(uint64_t a1, uint64_t a2, void *a3)
{
  id v6 = objc_alloc_init(MEMORY[0x263EFF9A0]);
  if (a2)
  {
    uint64_t v7 = (unsigned int *)(a2 + 1768);
    id v8 = (id)[objc_alloc(MEMORY[0x263EFF980]) initWithCapacity:35];
    int8x16_t v9 = *(int8x16_t *)(a2 + 1944);
    int8x16_t v38 = v9;
    if (*(_OWORD *)&v9 != 0)
    {
      long long v36 = (unsigned int *)(a2 + 1768);
      int v10 = __clz(v9.u64[1]) ^ 0x7F;
      int v11 = 63 - __clz(v9.u64[0]);
      if (v9.i64[1]) {
        int v12 = v10;
      }
      else {
        int v12 = v11;
      }
      int8x16_t v37 = vorrq_s8(*(int8x16_t *)(a2 + 1640), vbicq_s8(v9, *(int8x16_t *)(a2 + 1976)));
      if (v12 != -1)
      {
        unsigned int v13 = 0;
        int v14 = v12 + 1;
        do
        {
          BOOL v16 = v13 > 0x3F;
          if ((*(void *)((unint64_t)&v38 | (8 * v16)) & (1 << v13)) != 0)
          {
            if ((*(void *)((unint64_t)&v37 | (8 * v16)) & (1 << v13)) != 0) {
              uint64_t v15 = @"promoted";
            }
            else {
              uint64_t v15 = @"not promoted";
            }
          }
          else
          {
            uint64_t v15 = @"unused";
          }
          [v8 addObject:v15];
          ++v13;
        }
        while (v14 != v13);
      }
      uint64_t v7 = v36;
    }
    id PerformanceStatisticsDictionary = AGX::UserShaderFactory<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::createPerformanceStatisticsDictionary(v7, @"VertexBufferPrefetch", (uint64_t)v8);
    if (PerformanceStatisticsDictionary)
    {
      uint64_t v18 = PerformanceStatisticsDictionary;
      uint64_t v19 = (void *)MEMORY[0x263F12768];
      uint64_t v20 = [a3 objectForKey:*MEMORY[0x263F12768]];
      if (v20) {
        [v18 setObject:v20 forKey:*MEMORY[0x263F126C8]];
      }
      [v6 setObject:v18 forKey:*v19];
    }
  }
  if (a1)
  {
    uint64_t v21 = (unsigned int *)(a1 + 1768);
    id v22 = (id)[objc_alloc(MEMORY[0x263EFF980]) initWithCapacity:35];
    int8x16_t v23 = *(int8x16_t *)(a1 + 1944);
    int8x16_t v38 = v23;
    if (*(_OWORD *)&v23 != 0)
    {
      int v24 = __clz(v23.u64[1]) ^ 0x7F;
      int v25 = 63 - __clz(v23.u64[0]);
      int v26 = v23.i64[1] ? v24 : v25;
      int8x16_t v37 = vorrq_s8(*(int8x16_t *)(a1 + 1640), vbicq_s8(v23, *(int8x16_t *)(a1 + 1976)));
      if (v26 != -1)
      {
        unsigned int v27 = 0;
        int v28 = v26 + 1;
        do
        {
          BOOL v30 = v27 > 0x3F;
          if ((*(void *)((unint64_t)&v38 | (8 * v30)) & (1 << v27)) != 0)
          {
            if ((*(void *)((unint64_t)&v37 | (8 * v30)) & (1 << v27)) != 0) {
              int8x16_t v29 = @"promoted";
            }
            else {
              int8x16_t v29 = @"not promoted";
            }
          }
          else
          {
            int8x16_t v29 = @"unused";
          }
          [v22 addObject:v29];
          ++v27;
        }
        while (v28 != v27);
      }
    }
    id v31 = AGX::UserShaderFactory<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::createPerformanceStatisticsDictionary(v21, @"FragmentBufferPrefetch", (uint64_t)v22);
    if (v31)
    {
      int8x16_t v32 = v31;
      uint64_t v33 = (void *)MEMORY[0x263F126F8];
      uint64_t v34 = [a3 objectForKey:*MEMORY[0x263F126F8]];
      if (v34) {
        [v32 setObject:v34 forKey:*MEMORY[0x263F126C8]];
      }
      [v6 setObject:v32 forKey:*v33];
    }
  }
  return v6;
}

uint64_t AGX::Program<AGX::HAL200::FragmentProgramVariant,AGX::FragmentProgramKey,AGX::HAL200::IndirectArgumentLayout,AGXG17FamilyIndirectArgumentBufferLayout>::getReflectionData(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (os_unfair_lock_s *)(a1 + 1688);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 1688));
  int8x16_t v5 = *(void **)(a1 + 1648);
  uint64_t v6 = *(unsigned int *)(a1 + 1656);
  uint64_t v7 = VectorMap<ReflectionKey,AGX::Program<AGX::HAL200::IntersectionProgramVariant,AGX::UserIntersectionProgramKey,AGX::HAL200::IndirectArgumentLayout,AGXG17FamilyIndirectArgumentBufferLayout>::ReflectionEntry,4u>::find(v5, *(_DWORD *)(a1 + 1656), (void *)a2);
  if (!v7)
  {
    if (v6 == 4) {
      operator new();
    }
    id v8 = &v5[4 * v6];
    long long v9 = *(_OWORD *)(a2 + 16);
    _OWORD *v8 = *(_OWORD *)a2;
    v8[1] = v9;
    uint64_t v10 = *(void *)(a1 + 1648);
    unsigned int v11 = *(_DWORD *)(a1 + 1656);
    *(_DWORD *)(a1 + 1656) = v11 + 1;
    uint64_t v7 = v10 + 24 * v11 + 128;
  }
  uint64_t v12 = *(void *)(v7 + 16);
  if (v12) {
    dispatch_retain(*(dispatch_object_t *)(v7 + 16));
  }
  os_unfair_lock_unlock(v4);
  return v12;
}

void sub_2429E7680(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t AGX::Program<AGX::HAL200::ObjectProgramVariant,AGX::ObjectProgramKey,AGX::HAL200::IndirectArgumentLayout,AGXG17FamilyIndirectArgumentBufferLayout>::getReflectionData(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (os_unfair_lock_s *)(a1 + 1176);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 1176));
  int8x16_t v5 = *(void **)(a1 + 1136);
  uint64_t v6 = *(unsigned int *)(a1 + 1144);
  uint64_t v7 = VectorMap<ReflectionKey,AGX::Program<AGX::HAL200::IntersectionProgramVariant,AGX::UserIntersectionProgramKey,AGX::HAL200::IndirectArgumentLayout,AGXG17FamilyIndirectArgumentBufferLayout>::ReflectionEntry,4u>::find(v5, *(_DWORD *)(a1 + 1144), (void *)a2);
  if (!v7)
  {
    if (v6 == 4) {
      operator new();
    }
    id v8 = &v5[4 * v6];
    long long v9 = *(_OWORD *)(a2 + 16);
    _OWORD *v8 = *(_OWORD *)a2;
    v8[1] = v9;
    uint64_t v10 = *(void *)(a1 + 1136);
    unsigned int v11 = *(_DWORD *)(a1 + 1144);
    *(_DWORD *)(a1 + 1144) = v11 + 1;
    uint64_t v7 = v10 + 24 * v11 + 128;
  }
  uint64_t v12 = *(void *)(v7 + 16);
  if (v12) {
    dispatch_retain(*(dispatch_object_t *)(v7 + 16));
  }
  os_unfair_lock_unlock(v4);
  return v12;
}

void sub_2429E778C(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t AGX::Program<AGX::HAL200::MeshProgramVariant,AGX::MeshProgramKey,AGX::HAL200::IndirectArgumentLayout,AGXG17FamilyIndirectArgumentBufferLayout>::getReflectionData(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (os_unfair_lock_s *)(a1 + 1400);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 1400));
  int8x16_t v5 = *(void **)(a1 + 1360);
  uint64_t v6 = *(unsigned int *)(a1 + 1368);
  uint64_t v7 = VectorMap<ReflectionKey,AGX::Program<AGX::HAL200::IntersectionProgramVariant,AGX::UserIntersectionProgramKey,AGX::HAL200::IndirectArgumentLayout,AGXG17FamilyIndirectArgumentBufferLayout>::ReflectionEntry,4u>::find(v5, *(_DWORD *)(a1 + 1368), (void *)a2);
  if (!v7)
  {
    if (v6 == 4) {
      operator new();
    }
    id v8 = &v5[4 * v6];
    long long v9 = *(_OWORD *)(a2 + 16);
    _OWORD *v8 = *(_OWORD *)a2;
    v8[1] = v9;
    uint64_t v10 = *(void *)(a1 + 1360);
    unsigned int v11 = *(_DWORD *)(a1 + 1368);
    *(_DWORD *)(a1 + 1368) = v11 + 1;
    uint64_t v7 = v10 + 24 * v11 + 128;
  }
  uint64_t v12 = *(void *)(v7 + 16);
  if (v12) {
    dispatch_retain(*(dispatch_object_t *)(v7 + 16));
  }
  os_unfair_lock_unlock(v4);
  return v12;
}

void sub_2429E7898(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

unint64_t AGX::UserCommonShaderFactory<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::getRenderPipelineFlags(unint64_t result, _DWORD *a2)
{
  if (result) {
    id result = *(unsigned __int8 *)(result + 3377) | (2 * *(unsigned __int8 *)(result + 3379)) | (4
  }
                                                                                                * *(unsigned __int8 *)(result + 3380)) | (16 * (*(_DWORD *)(result + 988) != 0)) | ((unint64_t)(*(_DWORD *)(result + 1000) != 0) << 10) | (32 * *(unsigned __int8 *)(result + 3381)) | ((unint64_t)*(unsigned __int8 *)(result + 3378) << 6);
  if (a2) {
    return result & 0xFFFFFFFFFFFFFD77 | (8 * (a2[247] != 0)) | ((unint64_t)(a2[250] != 0) << 9) | ((unint64_t)a2[894] >> 11) & 0x80;
  }
  return result;
}

void *std::__hash_table<std::__hash_value_type<unsigned long long,std::pair<unsigned long long,unsigned long long>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::pair<unsigned long long,unsigned long long>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::pair<unsigned long long,unsigned long long>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::pair<unsigned long long,unsigned long long>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(float *a1, unint64_t a2, uint64_t *a3)
{
  unint64_t v5 = a2;
  unint64_t v7 = *((void *)a1 + 1);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = a2;
      if (v7 <= a2) {
        unint64_t v3 = a2 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & a2;
    }
    long long v9 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      uint64_t v10 = *v9;
      if (*v9)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v12 = v10[1];
            if (v12 == a2)
            {
              if (v10[2] == a2) {
                return v10;
              }
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_22;
            }
            uint64_t v10 = (void *)*v10;
            if (!v10) {
              goto LABEL_22;
            }
          }
        }
        do
        {
          unint64_t v11 = v10[1];
          if (v11 == a2)
          {
            if (v10[2] == a2) {
              return v10;
            }
          }
          else
          {
            if (v11 >= v7) {
              v11 %= v7;
            }
            if (v11 != v3) {
              break;
            }
          }
          uint64_t v10 = (void *)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_22:
  uint64_t v10 = operator new(0x28uLL);
  *uint64_t v10 = 0;
  v10[1] = v5;
  uint64_t v13 = *a3;
  v10[3] = 0;
  v10[4] = 0;
  v10[2] = v13;
  float v14 = (float)(unint64_t)(*((void *)a1 + 3) + 1);
  float v15 = a1[8];
  if (v7 && (float)(v15 * (float)v7) >= v14)
  {
    unint64_t v5 = v3;
    goto LABEL_72;
  }
  BOOL v16 = 1;
  if (v7 >= 3) {
    BOOL v16 = (v7 & (v7 - 1)) != 0;
  }
  unint64_t v17 = v16 | (2 * v7);
  unint64_t v18 = vcvtps_u32_f32(v14 / v15);
  if (v17 <= v18) {
    size_t prime = v18;
  }
  else {
    size_t prime = v17;
  }
  if (prime == 1)
  {
    size_t prime = 2;
  }
  else if ((prime & (prime - 1)) != 0)
  {
    size_t prime = std::__next_prime(prime);
    unint64_t v7 = *((void *)a1 + 1);
  }
  if (prime > v7)
  {
LABEL_35:
    if (prime >> 61) {
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
    uint64_t v20 = operator new(8 * prime);
    uint64_t v21 = *(void **)a1;
    *(void *)a1 = v20;
    if (v21) {
      operator delete(v21);
    }
    uint64_t v22 = 0;
    *((void *)a1 + 1) = prime;
    do
      *(void *)(*(void *)a1 + 8 * v22++) = 0;
    while (prime != v22);
    int v24 = (uint64_t *)(a1 + 4);
    int8x16_t v23 = (void *)*((void *)a1 + 2);
    if (!v23) {
      goto LABEL_59;
    }
    size_t v25 = v23[1];
    size_t v26 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      size_t v27 = v25 & v26;
      *(void *)(*(void *)a1 + 8 * v27) = v24;
      for (uint64_t i = (void *)*v23; *v23; uint64_t i = (void *)*v23)
      {
        size_t v29 = i[1] & v26;
        if (v29 == v27)
        {
          int8x16_t v23 = i;
        }
        else if (*(void *)(*(void *)a1 + 8 * v29))
        {
          void *v23 = *i;
          uint64_t v30 = 8 * v29;
          *uint64_t i = **(void **)(*(void *)a1 + v30);
          **(void **)(*(void *)a1 + v30) = i;
        }
        else
        {
          *(void *)(*(void *)a1 + 8 * v29) = v23;
          int8x16_t v23 = i;
          size_t v27 = v29;
        }
      }
LABEL_59:
      unint64_t v7 = prime;
      goto LABEL_60;
    }
    if (v25 >= prime) {
      v25 %= prime;
    }
    *(void *)(*(void *)a1 + 8 * v25) = v24;
    uint64_t v34 = (void *)*v23;
    if (!*v23) {
      goto LABEL_59;
    }
    while (1)
    {
      size_t v36 = v34[1];
      if (v36 >= prime) {
        v36 %= prime;
      }
      if (v36 != v25)
      {
        if (!*(void *)(*(void *)a1 + 8 * v36))
        {
          *(void *)(*(void *)a1 + 8 * v36) = v23;
          goto LABEL_64;
        }
        void *v23 = *v34;
        uint64_t v35 = 8 * v36;
        void *v34 = **(void **)(*(void *)a1 + v35);
        **(void **)(*(void *)a1 + v35) = v34;
        uint64_t v34 = v23;
      }
      size_t v36 = v25;
LABEL_64:
      int8x16_t v23 = v34;
      uint64_t v34 = (void *)*v34;
      size_t v25 = v36;
      if (!v34) {
        goto LABEL_59;
      }
    }
  }
  if (prime >= v7) {
    goto LABEL_60;
  }
  unint64_t v31 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 3) / a1[8]);
  if (v7 < 3 || (uint8x8_t v32 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v32.i16[0] = vaddlv_u8(v32), v32.u32[0] > 1uLL))
  {
    unint64_t v31 = std::__next_prime(v31);
  }
  else
  {
    uint64_t v33 = 1 << -(char)__clz(v31 - 1);
    if (v31 >= 2) {
      unint64_t v31 = v33;
    }
  }
  if (prime <= v31) {
    size_t prime = v31;
  }
  if (prime < v7)
  {
    if (!prime)
    {
      char v41 = *(void **)a1;
      *(void *)a1 = 0;
      if (v41) {
        operator delete(v41);
      }
      unint64_t v7 = 0;
      *((void *)a1 + 1) = 0;
      goto LABEL_60;
    }
    goto LABEL_35;
  }
  unint64_t v7 = *((void *)a1 + 1);
LABEL_60:
  if ((v7 & (v7 - 1)) != 0)
  {
    if (v7 <= v5) {
      v5 %= v7;
    }
  }
  else
  {
    v5 &= v7 - 1;
  }
LABEL_72:
  int8x16_t v37 = *(void **)a1;
  int8x16_t v38 = *(void **)(*(void *)a1 + 8 * v5);
  if (v38)
  {
    *uint64_t v10 = *v38;
LABEL_80:
    *int8x16_t v38 = v10;
    goto LABEL_81;
  }
  *uint64_t v10 = *((void *)a1 + 2);
  *((void *)a1 + 2) = v10;
  v37[v5] = a1 + 4;
  if (*v10)
  {
    unint64_t v39 = *(void *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v39 >= v7) {
        v39 %= v7;
      }
    }
    else
    {
      v39 &= v7 - 1;
    }
    int8x16_t v38 = (void *)(*(void *)a1 + 8 * v39);
    goto LABEL_80;
  }
LABEL_81:
  ++*((void *)a1 + 3);
  return v10;
}

void sub_2429E7D88(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::vector<unsigned long long>::reserve(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = *(unsigned char **)a1;
  if (a2 <= (uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3) {
    return;
  }
  if (a2 >> 61) {
    abort();
  }
  uint64_t v4 = *(unsigned char **)(a1 + 8);
  uint64_t v5 = 8 * a2;
  uint64_t v6 = (char *)operator new(8 * a2);
  uint64_t v7 = v4 - v2;
  uint8x8_t v8 = &v6[(v4 - v2) & 0xFFFFFFFFFFFFFFF8];
  long long v9 = v8;
  if (v4 != v2)
  {
    if ((unint64_t)(v7 - 8) < 0x58)
    {
      long long v9 = &v6[(v4 - v2) & 0xFFFFFFFFFFFFFFF8];
      do
      {
LABEL_10:
        uint64_t v16 = *((void *)v4 - 1);
        v4 -= 8;
        *((void *)v9 - 1) = v16;
        v9 -= 8;
      }
      while (v4 != v2);
      goto LABEL_11;
    }
    long long v9 = &v6[(v4 - v2) & 0xFFFFFFFFFFFFFFF8];
    if (v4 - v6 - (v7 & 0xFFFFFFFFFFFFFFF8) < 0x20) {
      goto LABEL_10;
    }
    uint64_t v10 = v7 >> 3;
    unint64_t v11 = ((unint64_t)(v7 - 8) >> 3) + 1;
    uint64_t v12 = &v6[8 * v10 - 16];
    uint64_t v13 = (long long *)(v4 - 16);
    uint64_t v14 = v11 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v15 = *v13;
      *((_OWORD *)v12 - 1) = *(v13 - 1);
      *(_OWORD *)uint64_t v12 = v15;
      v12 -= 32;
      v13 -= 2;
      v14 -= 4;
    }
    while (v14);
    long long v9 = &v8[-8 * (v11 & 0x3FFFFFFFFFFFFFFCLL)];
    v4 -= 8 * (v11 & 0x3FFFFFFFFFFFFFFCLL);
    if (v11 != (v11 & 0x3FFFFFFFFFFFFFFCLL)) {
      goto LABEL_10;
    }
  }
LABEL_11:
  *(void *)a1 = v9;
  *(void *)(a1 + 8) = v8;
  *(void *)(a1 + 16) = &v6[v5];
  if (v2)
  {
    operator delete(v2);
  }
}

uint64_t std::unordered_map<unsigned long long,std::pair<unsigned long long,unsigned long long>>::~unordered_map[abi:nn180100](uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      unint64_t v3 = (void *)*v2;
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  uint64_t v4 = *(void **)a1;
  *(void *)a1 = 0;
  if (v4) {
    operator delete(v4);
  }
  return a1;
}

uint64_t ___ZN3AGX23UserCommonShaderFactoryINS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE23constructRenderPipelineI27MTLRenderPipelineDescriptorEEvP12_MTLFunctionPNS1_22FragmentProgramVariantERK13ReflectionKeyS9_PNS1_20VertexProgramVariantESE_S9_PNS1_20ObjectProgramVariantESE_S9_PNS1_18MeshProgramVariantESE_P7NSArrayIPU28objcproto17MTLDynamicLibrary11objc_objectESP_SP_SP_P18AGXG17FamilyDevicePU27objcproto16OS_dispatch_data8NSObjectSU_SU_PT_mbbyP19NSMutableDictionarySY_U13block_pointerFvPU33objcproto22MTLRenderPipelineState11objc_objectP27MTLRenderPipelineReflectionP7NSErrorE_block_invoke(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) setVertexDebugInstrumentationData:a2];
}

uint64_t ___ZN3AGX23UserCommonShaderFactoryINS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE23constructRenderPipelineI27MTLRenderPipelineDescriptorEEvP12_MTLFunctionPNS1_22FragmentProgramVariantERK13ReflectionKeyS9_PNS1_20VertexProgramVariantESE_S9_PNS1_20ObjectProgramVariantESE_S9_PNS1_18MeshProgramVariantESE_P7NSArrayIPU28objcproto17MTLDynamicLibrary11objc_objectESP_SP_SP_P18AGXG17FamilyDevicePU27objcproto16OS_dispatch_data8NSObjectSU_SU_PT_mbbyP19NSMutableDictionarySY_U13block_pointerFvPU33objcproto22MTLRenderPipelineState11objc_objectP27MTLRenderPipelineReflectionP7NSErrorE_block_invoke_2(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) setFragmentDebugInstrumentationData:a2];
}

uint64_t ___ZN3AGX23UserCommonShaderFactoryINS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE23constructRenderPipelineI27MTLRenderPipelineDescriptorEEvP12_MTLFunctionPNS1_22FragmentProgramVariantERK13ReflectionKeyS9_PNS1_20VertexProgramVariantESE_S9_PNS1_20ObjectProgramVariantESE_S9_PNS1_18MeshProgramVariantESE_P7NSArrayIPU28objcproto17MTLDynamicLibrary11objc_objectESP_SP_SP_P18AGXG17FamilyDevicePU27objcproto16OS_dispatch_data8NSObjectSU_SU_PT_mbbyP19NSMutableDictionarySY_U13block_pointerFvPU33objcproto22MTLRenderPipelineState11objc_objectP27MTLRenderPipelineReflectionP7NSErrorE_block_invoke_3(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) setMeshDebugInstrumentationData:a2];
}

uint64_t ___ZN3AGX23UserCommonShaderFactoryINS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE23constructRenderPipelineI27MTLRenderPipelineDescriptorEEvP12_MTLFunctionPNS1_22FragmentProgramVariantERK13ReflectionKeyS9_PNS1_20VertexProgramVariantESE_S9_PNS1_20ObjectProgramVariantESE_S9_PNS1_18MeshProgramVariantESE_P7NSArrayIPU28objcproto17MTLDynamicLibrary11objc_objectESP_SP_SP_P18AGXG17FamilyDevicePU27objcproto16OS_dispatch_data8NSObjectSU_SU_PT_mbbyP19NSMutableDictionarySY_U13block_pointerFvPU33objcproto22MTLRenderPipelineState11objc_objectP27MTLRenderPipelineReflectionP7NSErrorE_block_invoke_4(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) setObjectDebugInstrumentationData:a2];
}

uint64_t AGX::UserProgramKeyFactory<AGX::HAL200::Classes,AGX::HAL200::Encoders>::CreateMeshProgramKey<MTLRenderPipelineDescriptor>(uint64_t a1, void *a2, NSObject *a3, void *a4, int a5, uint64_t a6, int a7)
{
  uint64_t v14 = (void *)[a2 meshLinkedFunctions];
  *(_OWORD *)uint64_t v16 = *(_OWORD *)a6;
  uint64_t v17 = *(void *)(a6 + 16);
  *(void *)a6 = 0;
  *(void *)(a6 + 8) = 0;
  *(_OWORD *)std::string __p = *(_OWORD *)(a6 + 24);
  uint64_t v19 = *(void *)(a6 + 40);
  *(void *)(a6 + 16) = 0;
  *(void *)(a6 + 24) = 0;
  *(void *)(a6 + 32) = 0;
  *(void *)(a6 + 40) = 0;
  char v20 = *(unsigned char *)(a6 + 48);
  AGX::MeshProgramKey::MeshProgramKey(a1, a3, 0, a5, (uint64_t)v16, v14, a4, a7);
  if (SHIBYTE(v19) < 0)
  {
    operator delete(__p[0]);
    if ((SHIBYTE(v17) & 0x80000000) == 0) {
      goto LABEL_3;
    }
LABEL_5:
    operator delete(v16[0]);
    goto LABEL_3;
  }
  if (SHIBYTE(v17) < 0) {
    goto LABEL_5;
  }
LABEL_3:
  AGX::MeshProgramKey::initCommon<MTLRenderPipelineDescriptor>(a1, a2);
  *(_DWORD *)(a1 + 52) &= ~0x80u;
  return [a2 supportIndirectCommandBuffers];
}

void sub_2429E804C(_Unwind_Exception *a1)
{
  AGX::Impl::MeshProgramKey::~MeshProgramKey(v1);
  _Unwind_Resume(a1);
}

void sub_2429E8064(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
}

unint64_t AGX::Program<AGX::HAL200::MeshProgramVariant,AGX::MeshProgramKey,AGX::HAL200::IndirectArgumentLayout,AGXG17FamilyIndirectArgumentBufferLayout>::getOrCreateCompileOptions(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a2 & 0x330003;
  if ((a2 & 0x330003) != 0)
  {
    uint64_t v7 = (os_unfair_lock_s *)(a1 + 1400);
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 1400));
    uint8x8_t v8 = *(void **)(a1 + 1360);
    uint64_t v9 = *(unsigned int *)(a1 + 1368);
    uint64_t v10 = (void *)VectorMap<ReflectionKey,AGX::Program<AGX::HAL200::IntersectionProgramVariant,AGX::UserIntersectionProgramKey,AGX::HAL200::IndirectArgumentLayout,AGXG17FamilyIndirectArgumentBufferLayout>::ReflectionEntry,4u>::find(v8, *(_DWORD *)(a1 + 1368), (void *)a3);
    if (!v10)
    {
      if (v9 == 4) {
        operator new();
      }
      unint64_t v11 = &v8[4 * v9];
      long long v12 = *(_OWORD *)(a3 + 16);
      _OWORD *v11 = *(_OWORD *)a3;
      v11[1] = v12;
      uint64_t v13 = *(void *)(a1 + 1360);
      unsigned int v14 = *(_DWORD *)(a1 + 1368);
      *(_DWORD *)(a1 + 1368) = v14 + 1;
      uint64_t v10 = (void *)(v13 + 24 * v14 + 128);
    }
    if ((v4 & ~v10[1]) != 0)
    {
      uint64_t v15 = *v10 | v4;
      *uint64_t v10 = v15;
    }
    else
    {
      uint64_t v15 = 0;
    }
    os_unfair_lock_unlock(v7);
  }
  else
  {
    uint64_t v15 = 0;
  }
  return v15 | a2 & 0xFFFFFFFFFFCCFFFCLL;
}

void sub_2429E81B0(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void ___ZN3AGX23UserCommonShaderFactoryINS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE24createMeshProgramVariantI27MTLRenderPipelineDescriptorEEvPT_P18AGXG17FamilyDevicemP25AGXG17FamilyBinaryArchivePU27objcproto16OS_dispatch_data8NSObjectP7NSArrayPNS1_11MeshProgramEPNS1_22FragmentProgramVariantESG_bU13block_pointerFvPNS1_18MeshProgramVariantE13ReflectionKeyP19NSMutableDictionary16MTLCompilerErrorP8NSStringSG_E_block_invoke(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a3 + 40);
  uint64_t v7 = *(__CFString **)(a3 + 48);
  *(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) = objc_alloc_init(MEMORY[0x263EFF9A0]);
  AGX::UserShaderFactory<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::fillCompilePerformanceStatisticsDictionary(*(NSObject **)a3, *(void *)(a3 + 8), *(void **)(*(void *)(*(void *)(a1 + 56) + 8) + 40), *(void *)(a3 + 56), [*(id *)(a1 + 32) name], *(unsigned char *)(a1 + 112));
  uint8x8_t v8 = *(void **)(*(void *)(*(void *)(a1 + 56) + 8) + 40);
  if (v8)
  {
    uint64_t v9 = (void *)[v8 objectForKey:*MEMORY[0x263F12630]];
    if (v9) {
      [v9 unsignedLongLongValue];
    }
  }
  if (*(_DWORD *)*MEMORY[0x263F4B1E8]) {
    IOGPUDeviceTraceEvent();
  }
  if (v6)
  {
    char v10 = 1;
    goto LABEL_21;
  }
  if (a2[33])
  {
    unint64_t v11 = a2 + 33;
    if (!a2[34]) {
      unint64_t v11 = a2 + 103;
    }
    if (!*v11) {
      goto LABEL_16;
    }
  }
  else
  {
    unint64_t v11 = a2 + 103;
    if (!a2[103]) {
      goto LABEL_16;
    }
  }
  if (v11[1])
  {
    char v10 = 0;
    uint64_t v7 = @"Internal error during function compilation";
    goto LABEL_20;
  }
LABEL_16:
  if (!*(unsigned char *)(a1 + 113)
    || (AGX::ProgramBindingRemap<AGX::HAL200::Encoders,AGX::HAL200::Classes>::isShaderExecuteIndirectCompatible(a2, 0) & 1) != 0)
  {
    uint64_t v6 = 0;
    char v10 = 1;
    goto LABEL_21;
  }
  char v10 = 0;
  uint64_t v7 = @"Mesh shader cannot be used with indirect command buffers";
LABEL_20:
  uint64_t v6 = 2;
LABEL_21:
  AGX::Program<AGX::HAL200::MeshProgramVariant,AGX::MeshProgramKey,AGX::HAL200::IndirectArgumentLayout,AGXG17FamilyIndirectArgumentBufferLayout>::signalPending(*(void *)(a1 + 80), *(void *)(a1 + 88), *(NSObject **)(a3 + 16), a1 + 114, *(void **)(a1 + 40), v6);
  if (!v6)
  {
    AGX::VsStateConfigGen3<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::VsStateConfigGen3((uint64_t)v29, a2);
    uint64_t v12 = *(void *)(a1 + 96);
    if (v12) {
      unsigned int v30 = v30 & 0xFFFFFFBF | (*(unsigned __int8 *)(v12 + 3385) << 6);
    }
    char v13 = [*(id *)(a1 + 48) needsCustomBorderColorSamplers];
    unsigned int v14 = (void *)[*(id *)(a1 + 48) profileControl];
    if (v14)
    {
      unint64_t v18 = v14;
      char v25 = [v14 uscCliqueTraceLevel];
      char v26 = [v18 uscEmitPosition];
      char v27 = [v18 uscEmitThreadControlFlow];
      char v19 = 1;
    }
    else
    {
      char v19 = 0;
    }
    char v28 = v19;
    AGX::ProgramBindingRemap<AGX::HAL200::Encoders,AGX::HAL200::Classes>::ProgramBindingRemap(v24, (unsigned int **)a2, (const std::vector<unsigned int>::value_type *)8, 0, v13, *(void *)(a1 + 80) + 1408, *(void *)(a1 + 104), 0, v15, v16, v17, 0, 0);
    operator new();
  }
  uint64_t v20 = *(void *)(a1 + 72);
  uint64_t v21 = *(void **)(a3 + 32);
  int v22 = *(unsigned __int8 *)(a1 + 146);
  *(void *)(v20 + 8) = 0;
  *(void *)(v20 + 16) = v6;

  *(void *)(v20 + 24) = [(__CFString *)v7 copy];
  if (*(void *)(v20 + 8))
  {

    *(void *)(v20 + 32) = v21;
  }
  else
  {
    if (v22) {
      char v23 = v10;
    }
    else {
      char v23 = 0;
    }
    *(unsigned char *)(v20 + 40) = v23;
  }
  dispatch_group_leave(*(dispatch_group_t *)v20);
}

void sub_2429E8748(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  AGX::ProgramBindingRemap<AGX::HAL200::Encoders,AGX::HAL200::Classes>::~ProgramBindingRemap((uint64_t)va);
  if (SLOBYTE(STACK[0x217]) < 0) {
    operator delete((void *)STACK[0x200]);
  }
  MEMORY[0x24566ED90](v6, 0x10F3C4044D4022BLL);
  AGX::ProgramBindingRemap<AGX::HAL200::Encoders,AGX::HAL200::Classes>::~ProgramBindingRemap((uint64_t)&STACK[0x218]);
  _Unwind_Resume(a1);
}

void AGX::UserShaderFactory<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::compileFunctionWithAirLinkedIntersectionFunction_Impl<AGX::MeshProgramKey,true>(void ***a1, uint64_t a2, void *a3, long long *a4, uint64_t a5)
{
  uint64_t v42 = *MEMORY[0x263EF8340];
  uint64_t v7 = *a1;
  v23[0] = MEMORY[0x263EF8330];
  v23[1] = 3221225472;
  long long v8 = a4[3];
  long long v26 = a4[2];
  long long v27 = v8;
  long long v28 = a4[4];
  long long v9 = a4[1];
  long long v24 = *a4;
  v23[2] = ___ZN3AGX17UserShaderFactoryINS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE53compileFunctionWithAirLinkedIntersectionFunction_ImplINS_14MeshProgramKeyELb1EEENSt3__19enable_ifIXT0_EvE4typeERKT_P29MTLCompileFunctionRequestDataNS5_21DriverRequestDataImplIXT0_EEEU13block_pointerFvRK20AGCDeserializedReplyRKNS_28CompileFunctionReplyMetadataERKNS5_19DriverReplyDataImplIXT0_EEEE_block_invoke;
  v23[3] = &unk_26516EF18;
  v23[5] = a5;
  v23[6] = a1;
  uint64_t v10 = *((void *)a4 + 10);
  long long v25 = v9;
  v23[4] = a3;
  uint64_t v29 = v10;
  v30[0] = MEMORY[0x263EF8330];
  v30[1] = 3221225472;
  _OWORD v30[2] = ___ZN3AGX8Compiler14compileProgramINS_14MeshProgramKeyE13AGCReplyArrayEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_RKNS_28CompileFunctionReplyMetadataEE_block_invoke;
  v30[3] = &unk_26516F7C0;
  v30[4] = v23;
  size_t v31 = 0;
  uint8x8_t v32 = 0;
  (*(void (**)(uint64_t, const void **, size_t *))(*(void *)a2 + 16))(a2, &v32, &v31);
  unint64_t v11 = dispatch_data_create(v32, v31, 0, 0);
  [a3 setDriverKeyData:v11];
  if ([a3 airScript])
  {
    uint64_t v12 = [a3 airScript];
    long long v40 = 0uLL;
    v41[0] = 0;
    *(void *)&long long v40 = dispatch_data_create_map(v12, (const void **)&v40 + 1, v41);
    uint64_t v13 = *((void *)&v40 + 1);
    uint64_t v14 = **((_DWORD **)&v40 + 1);
    CC_SHA256_Init(&c);
    (**(void (***)(uint64_t, CC_SHA256_CTX *))a2)(a2, &c);
    *(void *)len = 0;
    data = 0;
    if (AGX::GetSerializedVertexFormat((AGX *)(v13 + v14), &data, (size_t *)len, v15, v16))
    {
      int8x16_t v17 = data;
      CC_SHA256_Update(&c, data, len[0]);
      free(v17);
    }
    CC_SHA256_Final(md, &c);
    dispatch_release((dispatch_object_t)v40);
    long long v40 = *(_OWORD *)md;
    *(_OWORD *)char v41 = v37;
    [a3 setVendorPluginFunctionId:&v40];
  }
  *(void *)c.count = MEMORY[0x263EF8330];
  *(void *)c.hash = 3221225472;
  *(void *)&c.hash[2] = ___ZN3AGX8Compiler14compileProgramINS_14MeshProgramKeyE13AGCReplyArrayEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke;
  *(void *)&c.hash[4] = &unk_26516F810;
  *(void *)&c.hash[6] = a3;
  *(void *)c.wbuf = v30;
  if ([a3 function])
  {
    uint64_t v18 = mach_absolute_time();
    char v19 = *v7;
    *(void *)md = MEMORY[0x263EF8330];
    *(void *)&md[8] = 3221225472;
    *(void *)&long long v37 = ___ZN3AGX8Compiler14compileProgramINS_14MeshProgramKeyE13AGCReplyArrayEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke_4;
    *((void *)&v37 + 1) = &unk_26516F860;
    p_CC_SHA256_CTX c = &c;
    uint64_t v39 = v18;
    [v19 compileFunctionRequest:a3 completionHandler:md];
  }
  else
  {
    if ([a3 frameworkData] || objc_msgSend(a3, "pipelineOptions")) {
      AGX::Compiler::compileProgram<AGX::UserIntersectionProgramKey,AGCReplyArray>(AGX::UserIntersectionProgramKey const&,MTLCompileFunctionRequestData *,void({block_pointer})(AGCReplyArray const&,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,MTLCompilerError,NSString *,unsigned long long))::{lambda(void)#1}::operator()[abi:[AGX] Failed assertion __requestData.frameworkData && _requestData.pipelineOptions_]();
    }
    *(void *)md = MEMORY[0x263EF8330];
    *(void *)&md[8] = 3221225472;
    *(void *)&long long v37 = ___ZN3AGX8Compiler14compileProgramINS_14MeshProgramKeyE13AGCReplyArrayEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke_3;
    *((void *)&v37 + 1) = &unk_26516F838;
    p_CC_SHA256_CTX c = &c;
    BOOL v20 = objc_msgSend((id)objc_msgSend(a3, "binaryArchives"), "count") == 0;
    uint64_t v21 = *v7;
    uint64_t v22 = [a3 driverKeyData];
    if (v20) {
      objc_msgSend(v21, "compileRequest:pipelineCache:sync:completionHandler:", v22, objc_msgSend(a3, "pipelineCache"), objc_msgSend(a3, "sync"), md);
    }
    else {
      objc_msgSend(v21, "compileRequest:binaryArchives:failOnBinaryArchiveMiss:pipelineCache:sync:completionHandler:", v22, objc_msgSend(a3, "binaryArchives"), 0, objc_msgSend(a3, "pipelineCache"), objc_msgSend(a3, "sync"), md);
    }
  }
  dispatch_release(v11);
}

void sub_2429E8BA0(_Unwind_Exception *a1)
{
  dispatch_release(*(dispatch_object_t *)(v1 - 128));
  _Unwind_Resume(a1);
}

void ___ZN3AGX17UserShaderFactoryINS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE20compileFunction_ImplINS_14MeshProgramKeyEEEvRKT_P29MTLCompileFunctionRequestDataRKNS5_21DriverRequestDataImplILb1EEEU13block_pointerFvRK20AGCDeserializedReplyRKNS_28CompileFunctionReplyMetadataERKNS5_19DriverReplyDataImplILb1EEEE_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void sub_2429E8C58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t ___ZN3AGX8Compiler14compileProgramINS_14MeshProgramKeyE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_RKNS_28CompileFunctionReplyMetadataEE_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  v11[0] = a3;
  v11[1] = a4;
  v11[2] = a5;
  v11[3] = a6;
  v11[4] = a7;
  v11[5] = a8;
  v11[6] = a9;
  v11[7] = a10;
  return (*(uint64_t (**)(void, uint64_t, void *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), a2, v11, a4, a5, a6, a7, a8);
}

void ___ZN3AGX23UserCommonShaderFactoryINS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE24createMeshProgramVariantI27MTLRenderPipelineDescriptorEEvPT_P18AGXG17FamilyDevicemP25AGXG17FamilyBinaryArchivePU27objcproto16OS_dispatch_data8NSObjectP7NSArrayPNS1_11MeshProgramEPNS1_22FragmentProgramVariantESG_bU13block_pointerFvPNS1_18MeshProgramVariantE13ReflectionKeyP19NSMutableDictionary16MTLCompilerErrorP8NSStringSG_E_block_invoke_2(uint64_t a1, uint64_t a2, NSObject *a3)
{
  AGX::Program<AGX::HAL200::MeshProgramVariant,AGX::MeshProgramKey,AGX::HAL200::IndirectArgumentLayout,AGXG17FamilyIndirectArgumentBufferLayout>::signalPending(*(void *)(a1 + 40), *(void *)(a1 + 48), a3, a1 + 64, *(void **)(a1 + 32), a2);
  uint64_t v4 = **(NSObject ***)(a1 + 56);

  dispatch_group_leave(v4);
}

void ___ZN3AGX23UserCommonShaderFactoryINS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE24createMeshProgramVariantI27MTLRenderPipelineDescriptorEEvPT_P18AGXG17FamilyDevicemP25AGXG17FamilyBinaryArchivePU27objcproto16OS_dispatch_data8NSObjectP7NSArrayPNS1_11MeshProgramEPNS1_22FragmentProgramVariantESG_bU13block_pointerFvPNS1_18MeshProgramVariantE13ReflectionKeyP19NSMutableDictionary16MTLCompilerErrorP8NSStringSG_E_block_invoke_3(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  id v2 = *(id *)(*(void *)(a1 + 48) + 32);
  *(_OWORD *)dispatch_object_t object = 0u;
  memset(v7, 0, 26);
  unint64_t v3 = (void *)AGX::Program<AGX::HAL200::MeshProgramVariant,AGX::MeshProgramKey,AGX::HAL200::IndirectArgumentLayout,AGXG17FamilyIndirectArgumentBufferLayout>::consolidate(*(os_unfair_lock_s **)(a1 + 56), *(void *)(a1 + 48), a1 + 64, (uint64_t)object);
  uint64_t v4 = v3[1];
  long long v5 = *(_OWORD *)(a1 + 296);
  v8[0] = *(_OWORD *)(a1 + 280);
  v8[1] = v5;
  (*(void (**)(void, uint64_t, _OWORD *, void, void, void, id))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), v4, v8, *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40), v3[2], v3[3], v2);

  if (object[0]) {
    dispatch_release(object[0]);
  }
  if (object[1]) {
    (*((void (**)(dispatch_object_t))object[1]->isa + 1))(object[1]);
  }
}

void sub_2429E8E10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

AGX::MeshProgramKey *AGX::MeshProgramKey::MeshProgramKey(AGX::MeshProgramKey *this, const MeshProgramKey *a2)
{
  *(void *)this = &unk_26F852DC0;
  *((_DWORD *)this + 2) = a2->streamType;
  *((void *)this + 3) = 0;
  *((void *)this + 4) = 0;
  *((void *)this + 2) = 0;
  begin = a2->stream.__begin_;
  end = a2->stream.__end_;
  int64_t v6 = (char *)end - (char *)begin;
  if (end != begin)
  {
    if (v6 < 0) {
      abort();
    }
    uint64_t v7 = (char *)operator new((char *)end - (char *)begin);
    *((void *)this + 2) = v7;
    *((void *)this + 3) = v7;
    long long v8 = &v7[4 * (v6 >> 2)];
    *((void *)this + 4) = v8;
    memcpy(v7, begin, v6);
    *((void *)this + 3) = v8;
  }
  *(void *)this = &unk_26F852D78;
  long long v9 = *(_OWORD *)&a2->cs.mutableBuffers;
  *(_OWORD *)((char *)this + 56) = *(_OWORD *)&a2->cs.var0.var0;
  *(_OWORD *)((char *)this + 40) = v9;
  if (*((char *)&a2->geometry_buffer_desc.__r_.__value_.var0.__l + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)this + 3, a2->geometry_buffer_desc.__r_.__value_.var0.__l.__data_, a2->geometry_buffer_desc.__r_.__value_.var0.__l.__size_);
  }
  else
  {
    long long v10 = *(_OWORD *)a2->geometry_buffer_desc.__r_.__value_.var0.__s.__data_;
    *((void *)this + 11) = *((void *)&a2->geometry_buffer_desc.__r_.__value_.var0.__l + 2);
    *(_OWORD *)((char *)this + 72) = v10;
  }
  int var0 = a2->geometry_buffer_desc.__r_.var0;
  *((void *)this + 13) = 0;
  *((_DWORD *)this + 24) = var0;
  *((void *)this + 14) = 0;
  *((void *)this + 15) = 0;
  uint64_t v13 = (void **)a2->geometry_buffer_desc.var0;
  uint64_t v12 = a2[1]._vptr$ProgramKey;
  int64_t v14 = (char *)v12 - (char *)v13;
  if (v12 != v13)
  {
    if (v14 < 0) {
      abort();
    }
    double v15 = (char *)operator new((char *)v12 - (char *)v13);
    *((void *)this + 13) = v15;
    *((void *)this + 14) = v15;
    double v16 = &v15[32 * (v14 >> 5)];
    *((void *)this + 15) = v16;
    memcpy(v15, v13, v14);
    *((void *)this + 14) = v16;
  }
  *((void *)this + 16) = 0;
  *((void *)this + 17) = 0;
  *((void *)this + 18) = 0;
  uint64_t v18 = a2[1].stream.__begin_;
  int8x16_t v17 = a2[1].stream.__end_;
  int64_t v19 = (char *)v17 - (char *)v18;
  if (v17 != v18)
  {
    if (v19 < 0) {
      abort();
    }
    BOOL v20 = (char *)operator new((char *)v17 - (char *)v18);
    *((void *)this + 16) = v20;
    *((void *)this + 17) = v20;
    uint64_t v21 = &v20[32 * (v19 >> 5)];
    *((void *)this + 18) = v21;
    memcpy(v20, v18, v19);
    *((void *)this + 17) = v21;
  }
  *(void *)this = &unk_26F854008;
  if (SHIBYTE(a2[1].cs.maxTotalThreadsPerThreadgroup) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 152), (const std::string::value_type *)a2[1].cs.mutableBuffers, *(void *)&a2[1].cs.pcf.var0);
  }
  else
  {
    long long v22 = *(_OWORD *)&a2[1].cs.mutableBuffers;
    *((void *)this + 21) = *(void *)&a2[1].cs.var0.var0;
    *(_OWORD *)((char *)this + 152) = v22;
  }
  char v23 = (std::string *)((char *)this + 176);
  if (a2[1].geometry_buffer_desc.__r_.__value_.var0.__s.__data_[15] < 0)
  {
    std::string::__init_copy_ctor_external(v23, *(const std::string::value_type **)&a2[1].cs.payloadMemoryLength, (std::string::size_type)a2[1].geometry_buffer_desc.__r_.__value_.var0.__l.__data_);
  }
  else
  {
    long long v24 = *(_OWORD *)&a2[1].cs.payloadMemoryLength;
    *((void *)this + 24) = a2[1].geometry_buffer_desc.__r_.__value_.var0.__l.__size_;
    *(_OWORD *)&v23->__r_.__value_.__l.__data_ = v24;
  }
  *((unsigned char *)this + 200) = a2[1].geometry_buffer_desc.__r_.__value_.var0.__s.__data_[16];
  *(void *)this = &unk_26F852E00;
  *((void *)this + 26) = *(void *)&a2[1].geometry_buffer_desc.__r_.var0;
  return this;
}

void sub_2429E907C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 175) < 0) {
    operator delete(*v5);
  }
  *(void *)uint64_t v1 = v4;
  long long v8 = *(void **)(v1 + 128);
  if (v8)
  {
    *(void *)(v1 + 136) = v8;
    operator delete(v8);
  }
  long long v9 = *v6;
  if (*v6)
  {
    *(void *)(v1 + 112) = v9;
    operator delete(v9);
  }
  if (*(char *)(v1 + 95) < 0) {
    operator delete(*v3);
  }
  *(void *)uint64_t v1 = v2;
  long long v10 = *(void **)(v1 + 16);
  if (v10)
  {
    *(void *)(v1 + 24) = v10;
    operator delete(v10);
  }
  _Unwind_Resume(exception_object);
}

void __destroy_helper_block_e8_64c26_ZTSN3AGX14MeshProgramKeyE(uint64_t a1)
{
}

AGX::MeshProgramKey *__copy_helper_block_e8_64c26_ZTSN3AGX14MeshProgramKeyE(uint64_t a1, uint64_t a2)
{
  return AGX::MeshProgramKey::MeshProgramKey((AGX::MeshProgramKey *)(a1 + 64), (const MeshProgramKey *)(a2 + 64));
}

uint64_t AGX::Program<AGX::HAL200::MeshProgramVariant,AGX::MeshProgramKey,AGX::HAL200::IndirectArgumentLayout,AGXG17FamilyIndirectArgumentBufferLayout>::consolidate(os_unfair_lock_s *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!*(unsigned char *)(a2 + 41)) {
    return a2;
  }
  if (!*(void *)(a2 + 8))
  {
    uint64_t v8 = a4;
    uint64_t v10 = *(void *)(a2 + 24);
    *(void *)(a4 + 16) = *(void *)(a2 + 16);
    *(void *)(a4 + 24) = v10;
    *(void *)(a2 + 24) = 0;
    long long v9 = *(NSObject **)a2;
    if (!*(void *)a2) {
      goto LABEL_9;
    }
LABEL_8:
    dispatch_release(v9);
    goto LABEL_9;
  }
  uint64_t v7 = a1 + 350;
  os_unfair_lock_lock(a1 + 350);
  uint64_t v8 = VectorMap<AGX::MeshProgramKey,AGX::ProgramVariantEntry<AGX::HAL200::MeshProgramVariant>,4u>::operator[]((uint64_t)a1, a3);
  if (*(void *)v8)
  {
    os_unfair_lock_unlock(v7);
    dispatch_group_wait(*(dispatch_group_t *)v8, 0xFFFFFFFFFFFFFFFFLL);
    long long v9 = *(NSObject **)a2;
    if (!*(void *)a2) {
      goto LABEL_9;
    }
    goto LABEL_8;
  }
  uint64_t v13 = dispatch_group_create();
  *(void *)uint64_t v8 = v13;
  dispatch_group_enter(v13);
  uint64_t v14 = *(void *)(a2 + 16);
  double v15 = *(void **)(a2 + 24);
  *(void *)(v8 + 8) = *(void *)(a2 + 8);
  *(void *)(v8 + 16) = v14;

  *(void *)(v8 + 24) = [v15 copy];
  if (*(void *)(v8 + 8))
  {

    *(void *)(v8 + 32) = 0;
  }
  else
  {
    *(unsigned char *)(v8 + 40) = 0;
  }
  dispatch_group_leave(*(dispatch_group_t *)v8);
  *(void *)(a2 + 8) = 0;
  os_unfair_lock_unlock(v7);
  long long v9 = *(NSObject **)a2;
  if (*(void *)a2) {
    goto LABEL_8;
  }
LABEL_9:
  uint64_t v11 = *(void *)(a2 + 8);
  if (v11) {
    (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
  }

  MEMORY[0x24566ED90](a2, 0x10A0C405D73F519);
  return v8;
}

void sub_2429E9288(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void ___ZN3AGX17UserShaderFactoryINS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE53compileFunctionWithAirLinkedIntersectionFunction_ImplINS_14MeshProgramKeyELb1EEENSt3__19enable_ifIXT0_EvE4typeERKT_P29MTLCompileFunctionRequestDataNS5_21DriverRequestDataImplIXT0_EEEU13block_pointerFvRK20AGCDeserializedReplyRKNS_28CompileFunctionReplyMetadataERKNS5_19DriverReplyDataImplIXT0_EEEE_block_invoke(uint64_t a1, void *a2, int8x16_t *a3)
{
  uint64_t v40 = *MEMORY[0x263EF8340];
  uint64_t v6 = *(void *)(a1 + 48);
  int8x16_t v29 = vextq_s8(a3[1], a3[1], 8uLL);
  uint64_t v7 = a3[2].i64[1];
  v30.i64[0] = a3[2].i64[0];
  v30.i64[1] = v7;
  v31.i64[0] = a3[3].i64[0];
  uint64_t v8 = *(void **)(a1 + 72);
  uint64_t v33 = v7;
  uint64_t v34 = v31.i64[0];
  int v35 = 0;
  long long v37 = 0;
  long long v36 = 0uLL;
  if (!v7)
  {
    v28[0] = &v29;
    v28[1] = a2;
    v28[2] = a1 + 80;
    v28[3] = v6;
    v28[4] = &v33;
    AGX::UserShaderFactory<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::createAirLinkedIntersectionVariantSets(AGCReplyArray const&,AGX::UserShaderFactory<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::IntersectionReplyMetadata const&,MTLLinkedFunctions *,AGX::UserShaderFactory<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::IntersectionDescriptorContext const&,unsigned int)::{lambda(NSArray<objc_object  {objcproto11MTLFunction}*> *)#1}::operator()((uint64_t)v28, (void *)[v8 functions]);
    AGX::UserShaderFactory<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::createAirLinkedIntersectionVariantSets(AGCReplyArray const&,AGX::UserShaderFactory<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::IntersectionReplyMetadata const&,MTLLinkedFunctions *,AGX::UserShaderFactory<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::IntersectionDescriptorContext const&,unsigned int)::{lambda(NSArray<objc_object  {objcproto11MTLFunction}*> *)#1}::operator()((uint64_t)v28, (void *)[v8 privateFunctions]);
  }
  int8x16_t v9 = a3[1];
  int8x16_t v29 = *a3;
  int8x16_t v30 = v9;
  int8x16_t v10 = a3[3];
  int8x16_t v31 = a3[2];
  int8x16_t v32 = v10;
  AGCDeserializedReply::AGCDeserializedReply((AGCDeserializedReply *)v28);
  if (!v31.i64[1])
  {
    uint64_t v11 = (void *)[*(id *)(a1 + 32) function];
    if (!AGCReplyArray::getDeserializedReplyWithName<AGCDeserializedReply>(a2, (char *)objc_msgSend((id)objc_msgSend(v11, "name"), "UTF8String"), (AGCDeserializedReply *)v28))
    {
      uint64_t v12 = (FILE *)*MEMORY[0x263EF8348];
      uint64_t v13 = (const char *)objc_msgSend((id)objc_msgSend(v11, "name"), "UTF8String");
      AGCReplyArray::getDebugStringAvailableNames((std::string *)buf, a2);
      if (buf[23] >= 0) {
        uint64_t v14 = buf;
      }
      else {
        uint64_t v14 = *(const char **)buf;
      }
      fprintf(v12, "AGX: %s:%d:%s: *** Failed to find compiler reply with function name \"%s\". The available function names in the reply array are: %s.\n", "agxa_user_shader_factory_template.hpp", 82, "compileFunctionWithAirLinkedIntersectionFunction_Impl_block_invoke", v13, v14);
      if ((buf[23] & 0x80000000) != 0) {
        operator delete(*(void **)buf);
      }
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR))
      {
        uint64_t v25 = objc_msgSend((id)objc_msgSend(v11, "name"), "UTF8String");
        AGCReplyArray::getDebugStringAvailableNames(&__p, a2);
        long long v26 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
            ? &__p
            : (std::string *)__p.__r_.__value_.__r.__words[0];
        *(_DWORD *)buf = 136316162;
        *(void *)&buf[4] = "agxa_user_shader_factory_template.hpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 82;
        *(_WORD *)&buf[18] = 2080;
        *(void *)&buf[20] = "compileFunctionWithAirLinkedIntersectionFunction_Impl_block_invoke";
        *(_WORD *)&buf[28] = 2080;
        *(void *)&buf[30] = v25;
        *(_WORD *)&buf[38] = 2080;
        uint64_t v39 = v26;
        _os_log_error_impl(&dword_2427AD000, &_os_log_internal, OS_LOG_TYPE_ERROR, "AGX: AGX: %s:%d:%s: *** Failed to find compiler reply with function name \"%s\". The available function names in the reply array are: %s.\n", buf, 0x30u);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
      }
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_INFO))
      {
        uint64_t v15 = objc_msgSend((id)objc_msgSend(v11, "name"), "UTF8String");
        AGCReplyArray::getDebugStringAvailableNames(&__p, a2);
        double v16 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
            ? &__p
            : (std::string *)__p.__r_.__value_.__r.__words[0];
        *(_DWORD *)buf = 136316162;
        *(void *)&buf[4] = "agxa_user_shader_factory_template.hpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 82;
        *(_WORD *)&buf[18] = 2080;
        *(void *)&buf[20] = "compileFunctionWithAirLinkedIntersectionFunction_Impl_block_invoke";
        *(_WORD *)&buf[28] = 2080;
        *(void *)&buf[30] = v15;
        *(_WORD *)&buf[38] = 2080;
        uint64_t v39 = v16;
        _os_log_impl(&dword_2427AD000, &_os_log_internal, OS_LOG_TYPE_INFO, "AGX: AGX: %s:%d:%s: *** Failed to find compiler reply with function name \"%s\". The available function names in the reply array are: %s.\n", buf, 0x30u);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
      }
      v31.i64[1] = 2;
      v32.i64[0] = @"Internal error during function compilation.";
    }
  }
  uint64_t v17 = v33;
  uint64_t v18 = v34;
  uint64_t v33 = 0;
  uint64_t v34 = 0;
  *(void *)buf = v17;
  *(void *)&buf[8] = v18;
  *(_OWORD *)&buf[24] = v36;
  long long v36 = 0uLL;
  *(void *)&buf[16] = 0;
  uint64_t v39 = v37;
  long long v37 = 0;
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  uint64_t v19 = *(void *)&buf[24];
  if (*(void *)&buf[24])
  {
    uint64_t v20 = *(void *)&buf[32];
    uint64_t v21 = *(void **)&buf[24];
    if (*(void *)&buf[32] != *(void *)&buf[24])
    {
      do
      {
        dispatch_release(*(dispatch_object_t *)(v20 - 24));

        *(void *)(v20 - 16) = 0;
        *(void *)(v20 - 8) = 0;
        v20 -= 80;
      }
      while (v20 != v19);
      uint64_t v21 = *(void **)&buf[24];
    }
    *(void *)&buf[32] = v19;
    operator delete(v21);
  }
  AGCDeserializedReply::~AGCDeserializedReply((AGCDeserializedReply *)v28);
  uint64_t v22 = v36;
  if ((void)v36)
  {
    uint64_t v23 = *((void *)&v36 + 1);
    long long v24 = (void *)v36;
    if (*((void *)&v36 + 1) != (void)v36)
    {
      do
      {
        dispatch_release(*(dispatch_object_t *)(v23 - 24));

        *(void *)(v23 - 16) = 0;
        *(void *)(v23 - 8) = 0;
        v23 -= 80;
      }
      while (v23 != v22);
      long long v24 = (void *)v36;
    }
    *((void *)&v36 + 1) = v22;
    operator delete(v24);
  }
}

void sub_2429E96CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  AGCDeserializedReply::~AGCDeserializedReply((AGCDeserializedReply *)va);
  AGX::UserShaderFactory<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::DriverReplyDataImpl<true>::~DriverReplyDataImpl(v9 - 192);
  _Unwind_Resume(a1);
}

uint64_t ___ZN3AGX8Compiler14compileProgramINS_14MeshProgramKeyE13AGCReplyArrayEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_RKNS_28CompileFunctionReplyMetadataEE_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  v11[0] = a3;
  v11[1] = a4;
  v11[2] = a5;
  v11[3] = a6;
  v11[4] = a7;
  v11[5] = a8;
  v11[6] = a9;
  v11[7] = a10;
  return (*(uint64_t (**)(void, uint64_t, void *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), a2, v11, a4, a5, a6, a7, a8);
}

void ___ZN3AGX8Compiler14compileProgramINS_14MeshProgramKeyE13AGCReplyArrayEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  v14[0] = MEMORY[0x263EF8330];
  v14[1] = 3221225472;
  uint64_t v15 = ___ZN3AGX8Compiler14compileProgramINS_14MeshProgramKeyE13AGCReplyArrayEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke_2;
  double v16 = &unk_26516F7E8;
  uint64_t v17 = a9;
  uint64_t v18 = a3;
  uint64_t v19 = a4;
  uint64_t v20 = a5;
  uint64_t v21 = a6;
  uint64_t v22 = a7;
  uint64_t v12 = a1 + 32;
  int8x16_t v10 = *(void **)(a1 + 32);
  uint64_t v11 = *(void *)(v12 + 8);
  uint64_t v23 = a8;
  uint64_t v24 = v11;
  uint64_t v25 = a2;
  uint64_t v26 = a10;
  if (objc_msgSend(v10, "sync", MEMORY[0x263EF8330], 3221225472))
  {
    v15(v14);
  }
  else
  {
    global_queue = dispatch_get_global_queue(0, 0);
    dispatch_async(global_queue, v14);
  }
}

uint64_t ___ZN3AGX8Compiler14compileProgramINS_14MeshProgramKeyE13AGCReplyArrayEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke_3(uint64_t a1, void *a2)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), *a2);
}

uint64_t ___ZN3AGX8Compiler14compileProgramINS_14MeshProgramKeyE13AGCReplyArrayEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke_4(uint64_t a1, void *a2)
{
  if (getTimebaseInfo(void)::once != -1) {
    dispatch_once(&getTimebaseInfo(void)::once, &__block_literal_global_7474);
  }
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), *a2);
}

void ___ZN3AGX8Compiler14compileProgramINS_14MeshProgramKeyE13AGCReplyArrayEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke_2(void *a1)
{
  size_t size_ptr = 0;
  buffer_ptr = 0;
  uint64_t v2 = a1[12];
  v13[0] = 0;
  v13[1] = 0;
  *(_OWORD *)uint64_t v8 = 0u;
  *(_OWORD *)std::string __p = 0u;
  long long v10 = 0u;
  uint64_t v11 = 0;
  uint64_t v12 = v13;
  if (v2 || (uint64_t v4 = a1[5]) == 0)
  {
    unint64_t v3 = 0;
  }
  else
  {
    unint64_t v3 = dispatch_data_create_map(v4, (const void **)&buffer_ptr, &size_ptr);
    AGCReplyArray::deserialize((AGCReplyArray *)v8, buffer_ptr);
  }
  (*(void (**)(void, void **))(a1[11] + 16))(a1[11], v8);
  if (v3) {
    dispatch_release(v3);
  }
  long long v5 = (void **)v8[0];
  uint64_t v6 = (void **)v8[1];
  while (v5 != v6)
  {
    uint64_t v7 = *v5;
    v5 += 2;
    free(v7);
  }
  std::__tree<std::__value_type<std::string,unsigned int>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned int>>>::destroy(v13[0]);
  if (__p[1])
  {
    *(void **)&long long v10 = __p[1];
    operator delete(__p[1]);
  }
  if (v8[0])
  {
    v8[1] = v8[0];
    operator delete(v8[0]);
  }
}

void sub_2429E9A34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  AGCReplyArray::~AGCReplyArray((AGCReplyArray *)va);
  _Unwind_Resume(a1);
}

uint64_t AGX::ProgramBindingRemap<AGX::HAL200::Encoders,AGX::HAL200::Classes>::ProgramBindingRemap(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  uint64_t v4 = *(void *)(a2 + 8);
  if (v4)
  {
    if (v4 < 0) {
      abort();
    }
    unint64_t v5 = ((unint64_t)(v4 - 1) >> 6) + 1;
    uint64_t v6 = operator new(8 * v5);
    *(void *)a1 = v6;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = v5;
    uint64_t v7 = *(void **)a2;
    unint64_t v8 = *(void *)(a2 + 8);
    *(void *)(a1 + 8) = v8;
    unint64_t v9 = (v8 - 1) >> 6;
    if (v8 < 0x41) {
      unint64_t v9 = 0;
    }
    v6[v9] = 0;
    int v10 = v8 & 0x3F;
    if (v8 > 0x3F || (v8 & 0x3F) != 0)
    {
      int v11 = 0;
      int v12 = 0;
      int v13 = 0;
      uint64_t v14 = &v7[v8 >> 6];
      do
      {
        uint64_t v15 = 1 << v11;
        if ((*v7 >> v13)) {
          uint64_t v16 = *v6 | v15;
        }
        else {
          uint64_t v16 = *v6 & ~v15;
        }
        *uint64_t v6 = v16;
        ++v13;
        v7 += v12 == 63;
        if (v12 == 63) {
          int v13 = 0;
        }
        v6 += v11 == 63;
        if (v11 == 63) {
          int v11 = 0;
        }
        else {
          ++v11;
        }
        int v12 = v13;
      }
      while (v7 != v14 || v10 != v13);
    }
  }
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  uint64_t v18 = *(unsigned char **)(a2 + 24);
  uint64_t v17 = *(unsigned char **)(a2 + 32);
  int64_t v19 = v17 - v18;
  if (v17 != v18)
  {
    if (v19 < 0) {
      abort();
    }
    uint64_t v20 = (char *)operator new(v17 - v18);
    *(void *)(a1 + 24) = v20;
    *(void *)(a1 + 32) = v20;
    uint64_t v21 = &v20[4 * (v19 >> 2)];
    *(void *)(a1 + 40) = v21;
    memcpy(v20, v18, v19);
    *(void *)(a1 + 32) = v21;
  }
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  uint64_t v23 = *(unsigned char **)(a2 + 48);
  uint64_t v22 = *(unsigned char **)(a2 + 56);
  int64_t v24 = v22 - v23;
  if (v22 != v23)
  {
    if (v24 < 0) {
      abort();
    }
    uint64_t v25 = (char *)operator new(v22 - v23);
    *(void *)(a1 + 48) = v25;
    *(void *)(a1 + 56) = v25;
    uint64_t v26 = &v25[4 * (v24 >> 2)];
    *(void *)(a1 + 64) = v26;
    memcpy(v25, v23, v24);
    *(void *)(a1 + 56) = v26;
  }
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  long long v28 = *(unsigned char **)(a2 + 72);
  long long v27 = *(unsigned char **)(a2 + 80);
  int64_t v29 = v27 - v28;
  if (v27 != v28)
  {
    if (v29 < 0) {
      abort();
    }
    int8x16_t v30 = (char *)operator new(v27 - v28);
    *(void *)(a1 + 72) = v30;
    *(void *)(a1 + 80) = v30;
    int8x16_t v31 = &v30[4 * (v29 >> 2)];
    *(void *)(a1 + 88) = v31;
    memcpy(v30, v28, v29);
    *(void *)(a1 + 80) = v31;
  }
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  uint64_t v33 = *(unsigned char **)(a2 + 96);
  int8x16_t v32 = *(unsigned char **)(a2 + 104);
  int64_t v34 = v32 - v33;
  if (v32 != v33)
  {
    if (v34 < 0) {
      abort();
    }
    int v35 = (char *)operator new(v32 - v33);
    *(void *)(a1 + 96) = v35;
    *(void *)(a1 + 104) = v35;
    long long v36 = &v35[4 * (v34 >> 2)];
    *(void *)(a1 + 112) = v36;
    memcpy(v35, v33, v34);
    *(void *)(a1 + 104) = v36;
  }
  long long v37 = *(_OWORD *)(a2 + 120);
  long long v38 = *(_OWORD *)(a2 + 136);
  *(_DWORD *)(a1 + 152) = *(_DWORD *)(a2 + 152);
  *(_OWORD *)(a1 + 136) = v38;
  *(_OWORD *)(a1 + 120) = v37;
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  *(void *)(a1 + 168) = *(void *)(a2 + 168);
  *(void *)(a1 + 176) = *(void *)(a2 + 176);
  *(void *)(a1 + 184) = *(void *)(a2 + 184);
  *(void *)(a1 + 192) = *(void *)(a2 + 192);
  uint64_t v39 = *(void *)(a2 + 200);
  char v40 = *(unsigned char *)(a2 + 208);
  *(void *)(a1 + 216) = 0;
  *(void *)(a1 + 200) = v39;
  *(unsigned char *)(a1 + 208) = v40;
  *(void *)(a1 + 224) = 0;
  *(void *)(a1 + 232) = 0;
  uint64_t v42 = *(unsigned char **)(a2 + 216);
  char v41 = *(unsigned char **)(a2 + 224);
  int64_t v43 = v41 - v42;
  if (v41 != v42)
  {
    if (v43 < 0) {
      abort();
    }
    BOOL v44 = (char *)operator new(v41 - v42);
    *(void *)(a1 + 216) = v44;
    *(void *)(a1 + 224) = v44;
    BOOL v45 = &v44[4 * (v43 >> 2)];
    *(void *)(a1 + 232) = v45;
    memcpy(v44, v42, v43);
    *(void *)(a1 + 224) = v45;
  }
  *(void *)(a1 + 240) = 0;
  *(void *)(a1 + 248) = 0;
  *(void *)(a1 + 256) = 0;
  BOOL v47 = *(unsigned char **)(a2 + 240);
  uint64_t v46 = *(unsigned char **)(a2 + 248);
  int64_t v48 = v46 - v47;
  if (v46 != v47)
  {
    if (v48 < 0) {
      abort();
    }
    unint64_t v49 = (char *)operator new(v46 - v47);
    *(void *)(a1 + 240) = v49;
    *(void *)(a1 + 248) = v49;
    char v50 = &v49[4 * (v48 >> 2)];
    *(void *)(a1 + 256) = v50;
    memcpy(v49, v47, v48);
    *(void *)(a1 + 248) = v50;
  }
  *(void *)(a1 + 264) = 0;
  *(void *)(a1 + 272) = 0;
  *(void *)(a1 + 280) = 0;
  uint64_t v52 = *(unsigned char **)(a2 + 264);
  unint64_t v51 = *(unsigned char **)(a2 + 272);
  int64_t v53 = v51 - v52;
  if (v51 != v52)
  {
    if (v53 < 0) {
      abort();
    }
    v54 = (char *)operator new(v51 - v52);
    *(void *)(a1 + 264) = v54;
    *(void *)(a1 + 272) = v54;
    char v55 = &v54[4 * (v53 >> 2)];
    *(void *)(a1 + 280) = v55;
    memcpy(v54, v52, v53);
    *(void *)(a1 + 272) = v55;
  }
  *(void *)(a1 + 288) = 0;
  *(void *)(a1 + 296) = 0;
  *(void *)(a1 + 304) = 0;
  uint64_t v57 = *(unsigned char **)(a2 + 288);
  MeshProgramKey v56 = *(unsigned char **)(a2 + 296);
  int64_t v58 = v56 - v57;
  if (v56 != v57)
  {
    if (v58 < 0) {
      abort();
    }
    char v59 = (char *)operator new(v56 - v57);
    *(void *)(a1 + 288) = v59;
    *(void *)(a1 + 296) = v59;
    std::string v60 = &v59[4 * (v58 >> 2)];
    *(void *)(a1 + 304) = v60;
    memcpy(v59, v57, v58);
    *(void *)(a1 + 296) = v60;
  }
  *(_DWORD *)(a1 + 312) = *(_DWORD *)(a2 + 312);
  *(void *)(a1 + 328) = 0;
  *(void *)(a1 + 336) = 0;
  *(void *)(a1 + 320) = 0;
  char v62 = *(unsigned char **)(a2 + 320);
  v61 = *(unsigned char **)(a2 + 328);
  int64_t v63 = v61 - v62;
  if (v61 != v62)
  {
    if (v63 < 0) {
      abort();
    }
    uint64_t v64 = (char *)operator new(v61 - v62);
    *(void *)(a1 + 320) = v64;
    *(void *)(a1 + 328) = v64;
    v65 = &v64[2 * (v63 >> 1)];
    *(void *)(a1 + 336) = v65;
    memcpy(v64, v62, v63);
    *(void *)(a1 + 328) = v65;
  }
  *(void *)(a1 + 344) = 0;
  *(void *)(a1 + 352) = 0;
  *(void *)(a1 + 360) = 0;
  uint64_t v67 = *(unsigned char **)(a2 + 344);
  v66 = *(unsigned char **)(a2 + 352);
  int64_t v68 = v66 - v67;
  if (v66 != v67)
  {
    if (v68 < 0) {
      abort();
    }
    long long v69 = (char *)operator new(v66 - v67);
    *(void *)(a1 + 344) = v69;
    *(void *)(a1 + 352) = v69;
    uint64_t v70 = &v69[2 * (v68 >> 1)];
    *(void *)(a1 + 360) = v70;
    memcpy(v69, v67, v68);
    *(void *)(a1 + 352) = v70;
  }
  *(void *)(a1 + 368) = 0;
  *(void *)(a1 + 376) = 0;
  *(void *)(a1 + 384) = 0;
  long long v72 = *(unsigned char **)(a2 + 368);
  char v71 = *(unsigned char **)(a2 + 376);
  int64_t v73 = v71 - v72;
  if (v71 != v72)
  {
    if (v73 < 0) {
      abort();
    }
    unsigned __int8 v74 = (char *)operator new(v71 - v72);
    *(void *)(a1 + 368) = v74;
    *(void *)(a1 + 376) = v74;
    uint64_t v75 = &v74[2 * (v73 >> 1)];
    *(void *)(a1 + 384) = v75;
    memcpy(v74, v72, v73);
    *(void *)(a1 + 376) = v75;
  }
  *(void *)(a1 + 392) = 0;
  *(void *)(a1 + 400) = 0;
  *(void *)(a1 + 408) = 0;
  uint64_t v77 = *(unsigned char **)(a2 + 392);
  long long v76 = *(unsigned char **)(a2 + 400);
  int64_t v78 = v76 - v77;
  if (v76 != v77)
  {
    if (v78 < 0) {
      abort();
    }
    long long v79 = (char *)operator new(v76 - v77);
    *(void *)(a1 + 392) = v79;
    *(void *)(a1 + 400) = v79;
    long long v80 = &v79[2 * (v78 >> 1)];
    *(void *)(a1 + 408) = v80;
    memcpy(v79, v77, v78);
    *(void *)(a1 + 400) = v80;
  }
  *(unsigned char *)(a1 + 416) = *(unsigned char *)(a2 + 416);
  *(void *)(a1 + 424) = *(void *)(a2 + 424);
  *(void *)(a1 + 432) = *(void *)(a2 + 432);
  *(void *)(a1 + 440) = *(void *)(a2 + 440);
  *(void *)(a1 + 448) = *(void *)(a2 + 448);
  *(_OWORD *)(a1 + 456) = *(_OWORD *)(a2 + 456);
  return a1;
}

void sub_2429E9F80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10)
{
  uint64_t v18 = *v11;
  if (*v11)
  {
    *(void *)(v10 + 376) = v18;
    operator delete(v18);
  }
  int64_t v19 = *(void **)(v10 + 344);
  if (v19)
  {
    *(void *)(v10 + 352) = v19;
    operator delete(v19);
  }
  uint64_t v20 = *(void **)(v10 + 320);
  if (v20)
  {
    *(void *)(v10 + 328) = v20;
    operator delete(v20);
  }
  uint64_t v21 = *(void **)(v10 + 288);
  if (v21)
  {
    *(void *)(v10 + 296) = v21;
    operator delete(v21);
  }
  uint64_t v22 = *(void **)(v10 + 264);
  if (v22)
  {
    *(void *)(v10 + 272) = v22;
    operator delete(v22);
    uint64_t v23 = *v16;
    if (!*v16)
    {
LABEL_11:
      int64_t v24 = *v15;
      if (!*v15) {
        goto LABEL_12;
      }
      goto LABEL_18;
    }
  }
  else
  {
    uint64_t v23 = *v16;
    if (!*v16) {
      goto LABEL_11;
    }
  }
  *(void *)(v10 + 248) = v23;
  operator delete(v23);
  int64_t v24 = *v15;
  if (!*v15)
  {
LABEL_12:
    uint64_t v25 = *v14;
    if (!*v14) {
      goto LABEL_13;
    }
    goto LABEL_19;
  }
LABEL_18:
  *(void *)(v10 + 224) = v24;
  operator delete(v24);
  uint64_t v25 = *v14;
  if (!*v14)
  {
LABEL_13:
    uint64_t v26 = *v13;
    if (!*v13) {
      goto LABEL_14;
    }
    goto LABEL_20;
  }
LABEL_19:
  *(void *)(v10 + 104) = v25;
  operator delete(v25);
  uint64_t v26 = *v13;
  if (!*v13)
  {
LABEL_14:
    long long v27 = *v12;
    if (!*v12)
    {
LABEL_22:
      long long v28 = *a10;
      if (*a10)
      {
        *(void *)(v10 + 32) = v28;
        operator delete(v28);
        int64_t v29 = *(void **)v10;
        if (!*(void *)v10) {
LABEL_24:
        }
          _Unwind_Resume(exception_object);
      }
      else
      {
        int64_t v29 = *(void **)v10;
        if (!*(void *)v10) {
          goto LABEL_24;
        }
      }
      operator delete(v29);
      _Unwind_Resume(exception_object);
    }
LABEL_21:
    *(void *)(v10 + 56) = v27;
    operator delete(v27);
    goto LABEL_22;
  }
LABEL_20:
  *(void *)(v10 + 80) = v26;
  operator delete(v26);
  long long v27 = *v12;
  if (!*v12) {
    goto LABEL_22;
  }
  goto LABEL_21;
}

void sub_2429EA0F8()
{
  if (!*v0) {
    JUMPOUT(0x2429EA0C0);
  }
  JUMPOUT(0x2429EA0B8);
}

void sub_2429EA108()
{
}

void sub_2429EA110()
{
  if (*v0) {
    JUMPOUT(0x2429EA0ECLL);
  }
  JUMPOUT(0x2429EA0D4);
}

id ___ZN3AGX23UserCommonShaderFactoryINS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE34createGeometryStageAndLinkPipelineI27MTLRenderPipelineDescriptorLb0EEEvPKNS5_28RenderPipelineDescriptorInfoEPNS1_22FragmentProgramVariantE13ReflectionKeyP18AGXG17FamilyDevicePT_mbbyP19NSMutableDictionaryP25AGXG17FamilyBinaryArchivePU27objcproto16OS_dispatch_data8NSObjectU13block_pointerFvPU33objcproto22MTLRenderPipelineState11objc_objectP27MTLRenderPipelineReflectionP7NSErrorE_block_invoke_2(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  if (!a4)
  {
    uint64_t v9 = *(void *)(a1 + 80);
    uint64_t v8 = *(void *)(a1 + 88);
    uint64_t v10 = *(void **)v9;
    memset(v14, 0, sizeof(v14));
    AGX::UserCommonShaderFactory<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::constructRenderPipeline<MTLRenderPipelineDescriptor>(v10, v8, a1 + 120, 0, 0, (uint64_t)v14, *(void **)(v9 + 24), a2, a3, *(void **)(v9 + 16), *(void *)(a1 + 96), a1 + 152, *(void *)(v9 + 96), 0, *(void *)(v9 + 120), *(void *)(v9 + 112), *(void *)(a1 + 32), *(void *)(v9 + 72), *(void **)(a1 + 40));
  }
  uint64_t v5 = *(void *)(a1 + 64);
  if (a4 > 3) {
    uint64_t v6 = 5;
  }
  else {
    uint64_t v6 = qword_242EAA188[a4];
  }
  uint64_t v11 = [NSDictionary dictionaryWithObject:a5 forKey:*MEMORY[0x263F08320]];
  id result = (id)[objc_alloc(MEMORY[0x263F087E8]) initWithDomain:@"AGXMetalG17P" code:v6 userInfo:v11];
  if (v5)
  {
    int v13 = *(uint64_t (**)(uint64_t, void, void, id))(v5 + 16);
    return (id)v13(v5, 0, 0, result);
  }
  return result;
}

void AGX::UserCommonShaderFactory<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::createUserOrPassthroughObjectProgramVariant<MTLRenderPipelineDescriptor>(void ***a1, void *a2, void *a3, unint64_t a4, uint64_t a5, uint64_t a6, os_unfair_lock_s *a7, void *a8, NSObject *a9, unsigned __int8 a10, unsigned __int8 a11, unsigned __int8 a12, uint64_t a13)
{
  uint64_t v135 = *MEMORY[0x263EF8340];
  if (a8)
  {
    uint64_t v15 = [a8 vendorPrivate];
    *(void *)&long long v131 = 0;
    *((void *)&v131 + 1) = &v131;
    *(void *)&long long v132 = 0x3052000000;
    *((void *)&v132 + 1) = __Block_byref_object_copy_;
    p_long long block = __Block_byref_object_dispose_;
    uint64_t v134 = 0;
    uint64_t v62 = [a2 objectFunction];
    AGX::ObjectProgramKey::ObjectProgramKey((uint64_t)&v69, a9, (void *)[a2 objectLinkedFunctions], a7, a10, a11);
    uint64_t v16 = (void *)[a2 driverCompilerOptions];
    uint64_t v17 = objc_msgSend((id)objc_msgSend((id)objc_msgSend(a2, "objectLinkedFunctions"), "binaryFunctions"), "count");
    int v18 = [a2 supportAddingObjectBinaryFunctions];
    if (objc_msgSend((id)objc_msgSend(v16, "objectForKeyedSubscript:", @"disableTextureRWBoundsCheck"), "BOOLValue"))int v19 = 4; {
    else
    }
      int v19 = 0;
    unsigned int v75 = v75 & 0xFFFFFFFB | v19;
    unsigned __int16 v20 = objc_msgSend((id)objc_msgSend(v16, "objectForKeyedSubscript:", @"maxNumRegisters"), "unsignedIntValue");
    unsigned int v75 = v75 & 0xFC0003FF | (v20 << 10);
    if (objc_msgSend((id)objc_msgSend(v16, "objectForKeyedSubscript:", @"agx_enable_stack_shadow"), "BOOLValue"))int v21 = 0x8000000; {
    else
    }
      int v21 = 0;
    if (v17) {
      int v22 = 1;
    }
    else {
      int v22 = v18;
    }
    if (v22) {
      int v23 = 512;
    }
    else {
      int v23 = 0;
    }
    unsigned int v75 = v21 | v75 & 0xF7FFFDFF | v23;
    int64_t v24 = (void *)[a2 objectBuffers];
    uint64_t v25 = 0;
    uint64_t v26 = 0;
    v65 = (os_unfair_lock_s *)(v15 + 8);
    do
    {
      uint64_t v27 = objc_msgSend((id)objc_msgSend(v24, "_descriptorAtIndex:", v26), "mutability");
      uint64_t v28 = 1 << v26;
      if (v27 != 1) {
        uint64_t v28 = 0;
      }
      v25 |= v28;
      ++v26;
    }
    while (v26 != 31);
    uint64_t v74 = v25;
    int v29 = [a2 supportIndirectCommandBuffers];
    unsigned int v81 = v81 & 0xFFFFFFFE | v29;
    int v77 = [a2 maxTotalThreadsPerObjectThreadgroup];
    int v78 = 0;
    char v30 = [a2 maxVertexAmplificationCount];
    v75 &= ~0x80u;
    unsigned int v76 = v76 & 0xFFFFFF87 | (8 * (v30 & 0xF));
    [a2 supportIndirectCommandBuffers];
    unsigned int v31 = ((*(_DWORD *)(a3[101] + 7288) << 29) & 0x40000000 | v75 & 0x8BFFFEFF | (*(unsigned __int8 *)(a3[101] + 7440) << 26)) ^ 0x40000000;
    unsigned int v75 = v31;
    v76 &= ~0x80u;
    uint64_t v86 = a4 & 0xC00C0000;
    if ((a4 & 0x40000) != 0)
    {
      if (AGX::isTelemetryEnabled(void)::once != -1) {
        dispatch_once(&AGX::isTelemetryEnabled(void)::once, &__block_literal_global_6424);
      }
      int v32 = 1;
      unsigned int v31 = v75;
    }
    else
    {
      int v32 = 0;
    }
    unsigned int v75 = v32 | (a4 >> 21) & 8 | v31 & 0xFFFFFFF4;
    ReflectionKey::initGPUCompilerSPIOptionsHash((uint64_t)&block, (void *)[a2 gpuCompilerSPIOptions]);
    long long v129 = block;
    long long v130 = v94;
    char v68 = 0;
    unint64_t CompileOptions = AGX::Program<AGX::HAL200::ObjectProgramVariant,AGX::ObjectProgramKey,AGX::HAL200::IndirectArgumentLayout,AGXG17FamilyIndirectArgumentBufferLayout>::getOrCreateCompileOptions((uint64_t)v65, a4 | 3, (uint64_t)&v129);
    uint64_t v39 = AGX::Program<AGX::HAL200::ObjectProgramVariant,AGX::ObjectProgramKey,AGX::HAL200::IndirectArgumentLayout,AGXG17FamilyIndirectArgumentBufferLayout>::getOrCreateVariantEntry(v65, (uint64_t)&v69, &v68, CompileOptions, a5 != 0);
    char v40 = (NSObject **)v39;
    if (v68)
    {
      uint64_t v58 = v74;
      char v57 = v81;
      uint64_t v41 = objc_msgSend((id)objc_msgSend(a2, "pipelineLibrary"), "pipelineCache");
      uint64_t v42 = (void *)[a2 pipelineLibrary];
      if ([v42 pipelineCache] && (objc_msgSend(v42, "disableRunTimeCompilation") & 1) != 0) {
        LOBYTE(v43) = 1;
      }
      else {
        unsigned int v43 = (objc_msgSend((id)objc_msgSend(a2, "binaryArchives"), "count") != 0) & (a4 >> 2);
      }
      char v56 = v43;
      if (*(_DWORD *)*MEMORY[0x263F4B1E8]) {
        IOGPUDeviceTraceEvent();
      }
      BOOL v44 = objc_opt_new();
      [v44 setSync:a12 ^ 1u];
      [v44 setFunction:v62];
      [v44 setFrameworkData:a9];
      [v44 setPipelineCache:v41];
      [v44 setDestinationBinaryArchive:a5];
      [v44 setArchiverId:a6];
      objc_msgSend(v44, "setBinaryArchives:", objc_msgSend(a2, "binaryArchives"));
      [v44 setPipelineOptions:a4 | 3];
      if ((a4 & 0x330003) == 0) {
        objc_msgSend(v44, "setPipelineOptions:", objc_msgSend(v44, "pipelineOptions") | 0x8000);
      }
      BOOL v45 = [a2 newPipelineScript];
      if (v45)
      {
        [v44 setAirScript:v45];
        dispatch_release(v45);
      }
      objc_msgSend(v44, "setGpuCompilerSPIOptions:", objc_msgSend(a2, "gpuCompilerSPIOptions"));
      uint64_t v46 = (void *)[a2 objectLinkedFunctions];
      objc_msgSend(v44, "setVisibleFunctions:", objc_msgSend(v46, "functions"));
      objc_msgSend(v44, "setVisibleFunctionGroups:", objc_msgSend(v46, "groups"));
      objc_msgSend(v44, "setPrivateVisibleFunctions:", objc_msgSend(v46, "privateFunctions"));
      uint64_t v60 = [a2 maxObjectCallStackDepth];
      BOOL v47 = (void *)[a2 objectLinkedFunctions];
      char v55 = [a2 supportIndirectCommandBuffers];
      char v54 = [a2 supportAddingObjectBinaryFunctions];
      int64_t v48 = (void *)[a2 gpuCompilerSPIOptions];
      char v49 = [a3 requiresRaytracingEmulation];
      v113 = (void *)MEMORY[0x263EF8330];
      uint64_t v114 = 3221225472;
      long long v126 = v129;
      v115 = ___ZN3AGX23UserCommonShaderFactoryINS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE26createObjectProgramVariantI27MTLRenderPipelineDescriptorEEvPT_P18AGXG17FamilyDevicemP25AGXG17FamilyBinaryArchivePU27objcproto16OS_dispatch_data8NSObjectP7NSArrayPNS1_13ObjectProgramESG_bbbU13block_pointerFvPNS1_20ObjectProgramVariantE13ReflectionKey16MTLCompilerErrorP8NSStringE_block_invoke;
      v116 = &unk_26516F068;
      v120 = &v131;
      *(void *)&long long v121 = a1;
      v117 = (void *)v62;
      unsigned __int8 v124 = a12;
      char v125 = v57 & 1;
      *((void *)&v121 + 1) = v40;
      *(void *)&long long v122 = v65;
      *((void *)&v122 + 1) = CompileOptions;
      long long v127 = v130;
      v118 = a3;
      unint64_t v119 = (unint64_t)a2;
      uint64_t v123 = v58;
      char v128 = v56;
      if ((v49 & 1) == 0
        && AGX::UserShaderFactory<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::hasAirLinkedIntersectionFunction(v47))
      {
        LOBYTE(block) = v49;
        *((void *)&block + 1) = v60;
        long long v94 = (unint64_t)v47;
        v95 = 0;
        uint64_t v96 = (long long *)a4;
        BOOL v97 = a7;
        BOOL v98 = (long long *)a3;
        uint64_t v99 = 0;
        char v100 = v55;
        char v101 = v54;
        v102 = v48;
        AGX::UserShaderFactory<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::compileFunctionWithAirLinkedIntersectionFunction_Impl<AGX::ObjectProgramKey,true>(a1, (uint64_t)&v69, v44, &block, (uint64_t)&v113);
      }
      else
      {
        char v50 = *a1;
        uint64_t v87 = MEMORY[0x263EF8330];
        uint64_t v88 = 3221225472;
        uint64_t v89 = (uint64_t)___ZN3AGX17UserShaderFactoryINS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE20compileFunction_ImplINS_16ObjectProgramKeyEEEvRKT_P29MTLCompileFunctionRequestDataRKNS5_21DriverRequestDataImplILb1EEEU13block_pointerFvRK20AGCDeserializedReplyRKNS_28CompileFunctionReplyMetadataERKNS5_19DriverReplyDataImplILb1EEEE_block_invoke;
        char v90 = &unk_26516F018;
        long long v91 = &v113;
        *(void *)&long long block = MEMORY[0x263EF8330];
        *((void *)&block + 1) = 3221225472;
        *(void *)&long long v94 = ___ZN3AGX8Compiler14compileProgramINS_16ObjectProgramKeyE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_RKNS_28CompileFunctionReplyMetadataEE_block_invoke;
        *((void *)&v94 + 1) = &unk_26516F7C0;
        v95 = &v87;
        AGX::Compiler::compileProgram<AGX::ObjectProgramKey,AGCDeserializedReply>(v50, (uint64_t)&v69, v44, (uint64_t)&block);
      }
    }
    else if ((CompileOptions & 0x330003) != 0)
    {
      unint64_t v51 = *a1;
      v113 = (void *)MEMORY[0x263EF8330];
      uint64_t v114 = 3221225472;
      v115 = ___ZN3AGX23UserCommonShaderFactoryINS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE26createObjectProgramVariantI27MTLRenderPipelineDescriptorEEvPT_P18AGXG17FamilyDevicemP25AGXG17FamilyBinaryArchivePU27objcproto16OS_dispatch_data8NSObjectP7NSArrayPNS1_13ObjectProgramESG_bbbU13block_pointerFvPNS1_20ObjectProgramVariantE13ReflectionKey16MTLCompilerErrorP8NSStringE_block_invoke_2;
      v116 = &unk_26516EEF0;
      long long v121 = v129;
      long long v122 = v130;
      v117 = a3;
      v118 = (void *)(v15 + 8);
      unint64_t v119 = CompileOptions;
      v120 = (long long *)v39;
      [*v51 reflectionWithFunction:v62 options:CompileOptions & 0x330003 sync:a12 ^ 1u completionHandler:&v113];
    }
    *(void *)&long long block = MEMORY[0x263EF8330];
    *((void *)&block + 1) = 3321888768;
    *(void *)&long long v94 = ___ZN3AGX23UserCommonShaderFactoryINS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE26createObjectProgramVariantI27MTLRenderPipelineDescriptorEEvPT_P18AGXG17FamilyDevicemP25AGXG17FamilyBinaryArchivePU27objcproto16OS_dispatch_data8NSObjectP7NSArrayPNS1_13ObjectProgramESG_bbbU13block_pointerFvPNS1_20ObjectProgramVariantE13ReflectionKey16MTLCompilerErrorP8NSStringE_block_invoke_3;
    *((void *)&v94 + 1) = &unk_26F851D70;
    BOOL v97 = v65;
    BOOL v98 = (long long *)v40;
    AGX::GeometrySharedKey<_AGCObjectContextStateAGP,(_AGCStreamToken)9>::GeometrySharedKey((uint64_t)&v99, (uint64_t)&v69);
    uint64_t v99 = (uint64_t (***)())&unk_26F852D30;
    uint64_t v110 = v86;
    v95 = (uint64_t *)a13;
    long long v111 = v129;
    long long v112 = v130;
    uint64_t v96 = &v131;
    uint64_t v52 = *v40;
    if (a12)
    {
      global_queue = dispatch_get_global_queue(0, 0);
      dispatch_group_notify(v52, global_queue, &block);
    }
    else
    {
      dispatch_group_wait(v52, 0xFFFFFFFFFFFFFFFFLL);
      ((void (*)(long long *))v94)(&block);
    }
    uint64_t v99 = (uint64_t (***)())&unk_26F852CA8;
    if (v108)
    {
      v109 = v108;
      operator delete(v108);
    }
    if (v106)
    {
      v107 = v106;
      operator delete(v106);
    }
    if (v105 < 0) {
      operator delete(v104);
    }
    uint64_t v99 = (uint64_t (***)())off_26F852CF0;
    if (v102)
    {
      v103 = v102;
      operator delete(v102);
    }
    long long v69 = (uint64_t (**)())&unk_26F852CA8;
    if (v84)
    {
      v85 = v84;
      operator delete(v84);
    }
    if (__p)
    {
      long long v83 = __p;
      operator delete(__p);
    }
    if (v80 < 0) {
      operator delete(v79);
    }
    long long v69 = off_26F852CF0;
    if (v71)
    {
      long long v72 = v71;
      operator delete(v71);
    }
    long long v38 = (uint64_t *)&v131;
LABEL_68:
    _Block_object_dispose(v38, 8);
    return;
  }
  {
    AGX::UserCommonShaderFactory<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::createUserOrPassthroughObjectProgramVariant<MTLRenderPipelineDescriptor>(MTLRenderPipelineDescriptor *,AGXG17FamilyDevice *,unsigned long,AGXG17FamilyBinaryArchive *,NSObject  {objcproto16OS_dispatch_data}*,NSArray *,_MTLFunction *,NSObject  {objcproto16OS_dispatch_data}*,BOOL,BOOL,BOOL,void({block_pointer})(AGX::HAL200::ObjectProgramVariant *,ReflectionKey,MTLCompilerError,NSString *))::geometryContextRequiresOS = 1;
  }
  if (AGX::UserCommonShaderFactory<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::createUserOrPassthroughObjectProgramVariant<MTLRenderPipelineDescriptor>(MTLRenderPipelineDescriptor *,AGXG17FamilyDevice *,unsigned long,AGXG17FamilyBinaryArchive *,NSObject  {objcproto16OS_dispatch_data}*,NSArray *,_MTLFunction *,NSObject  {objcproto16OS_dispatch_data}*,BOOL,BOOL,BOOL,void({block_pointer})(AGX::HAL200::ObjectProgramVariant *,ReflectionKey,MTLCompilerError,NSString *))::geometryContextRequiresOS)
  {
    uint64_t v87 = 0;
    uint64_t v88 = (uint64_t)&v87;
    uint64_t v89 = 0x2020000000;
    char v90 = 0;
    *(void *)&long long v129 = 0;
    *((void *)&v129 + 1) = &v129;
    long long v130 = 0x2020000000uLL;
    long long v69 = 0;
    uint64_t v70 = &v69;
    char v71 = (void *)0x3052000000;
    long long v72 = __Block_byref_object_copy_;
    int64_t v73 = __Block_byref_object_dispose_;
    uint64_t v74 = 0;
    LODWORD(v114) = 26;
    v116 = 0;
    v117 = 0;
    v115 = 0;
    v113 = &unk_26F851CF8;
    if (a11) {
      int v33 = 2;
    }
    else {
      int v33 = 0;
    }
    LODWORD(v118) = v33 | a10;
    int64_t v34 = *a1;
    *(void *)&long long block = MEMORY[0x263EF8330];
    *((void *)&block + 1) = 3221225472;
    *(void *)&long long v94 = ___ZN3AGX23UserCommonShaderFactoryINS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE37createObjectProgramPassThroughVariantI27MTLRenderPipelineDescriptorEEvPT_P18AGXG17FamilyDevicembbU13block_pointerFvPNS1_20ObjectProgramVariantE13ReflectionKey16MTLCompilerErrorP8NSStringE_block_invoke;
    *((void *)&v94 + 1) = &unk_26516F040;
    v95 = (uint64_t *)a2;
    uint64_t v96 = (long long *)a3;
    BOOL v97 = (os_unfair_lock_s *)&v87;
    BOOL v98 = &v129;
    uint64_t v99 = &v69;
    int v35 = v34[1];
    long long v36 = objc_opt_new();
    [v36 setSync:1];
    [v36 setPipelineCache:v35];
    [v36 setBinaryArchives:0];
    *(void *)&long long v131 = MEMORY[0x263EF8330];
    *((void *)&v131 + 1) = 3221225472;
    *(void *)&long long v132 = ___ZN3AGX8Compiler14compileProgramINS_27PassthroughObjectProgramKeyEEEvRKT_P7NSArrayIPU27objcproto16MTLBinaryArchive11objc_objectEU13block_pointerFvRK20AGCDeserializedReply16MTLCompilerErrorP8NSStringEb_block_invoke;
    *((void *)&v132 + 1) = &unk_26516F7C0;
    p_long long block = (void (*)(uint64_t))&block;
    AGX::Compiler::compileProgram<AGX::PassthroughObjectProgramKey,AGCDeserializedReply>(v34, (uint64_t)&v113, v36, (uint64_t)&v131);

    uint64_t v37 = *(void *)(v88 + 24);
    long long v131 = 0u;
    long long v132 = 0u;
    (*(void (**)(uint64_t, uint64_t, long long *, void, uint64_t (**)()))(a13 + 16))(a13, v37, &v131, *(void *)(*((void *)&v129 + 1) + 24), v70[5]);
    v113 = &unk_26F851D38;
    if (v115)
    {
      v116 = v115;
      operator delete(v115);
    }
    _Block_object_dispose(&v69, 8);
    _Block_object_dispose(&v129, 8);
    long long v38 = &v87;
    goto LABEL_68;
  }
  memset(v92, 0, sizeof(v92));
  (*(void (**)(uint64_t, void, unsigned char *, void, __CFString *))(a13 + 16))(a13, 0, v92, 0, &stru_26F8544F8);
}

void sub_2429EAF20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,char a44)
{
  AGX::ObjectProgramKey::~ObjectProgramKey(v44);
  AGX::ObjectProgramKey::~ObjectProgramKey((AGX::ObjectProgramKey *)&a24);
  _Block_object_dispose((const void *)(v45 - 176), 8);
  _Unwind_Resume(a1);
}

unint64_t AGX::Program<AGX::HAL200::ObjectProgramVariant,AGX::ObjectProgramKey,AGX::HAL200::IndirectArgumentLayout,AGXG17FamilyIndirectArgumentBufferLayout>::getOrCreateCompileOptions(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a2 & 0x330003;
  if ((a2 & 0x330003) != 0)
  {
    uint64_t v7 = (os_unfair_lock_s *)(a1 + 1176);
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 1176));
    uint64_t v8 = *(void **)(a1 + 1136);
    uint64_t v9 = *(unsigned int *)(a1 + 1144);
    uint64_t v10 = (void *)VectorMap<ReflectionKey,AGX::Program<AGX::HAL200::IntersectionProgramVariant,AGX::UserIntersectionProgramKey,AGX::HAL200::IndirectArgumentLayout,AGXG17FamilyIndirectArgumentBufferLayout>::ReflectionEntry,4u>::find(v8, *(_DWORD *)(a1 + 1144), (void *)a3);
    if (!v10)
    {
      if (v9 == 4) {
        operator new();
      }
      uint64_t v11 = &v8[4 * v9];
      long long v12 = *(_OWORD *)(a3 + 16);
      _OWORD *v11 = *(_OWORD *)a3;
      v11[1] = v12;
      uint64_t v13 = *(void *)(a1 + 1136);
      unsigned int v14 = *(_DWORD *)(a1 + 1144);
      *(_DWORD *)(a1 + 1144) = v14 + 1;
      uint64_t v10 = (void *)(v13 + 24 * v14 + 128);
    }
    if ((v4 & ~v10[1]) != 0)
    {
      uint64_t v15 = *v10 | v4;
      *uint64_t v10 = v15;
    }
    else
    {
      uint64_t v15 = 0;
    }
    os_unfair_lock_unlock(v7);
  }
  else
  {
    uint64_t v15 = 0;
  }
  return v15 | a2 & 0xFFFFFFFFFFCCFFFCLL;
}

void sub_2429EB110(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t AGX::Program<AGX::HAL200::ObjectProgramVariant,AGX::ObjectProgramKey,AGX::HAL200::IndirectArgumentLayout,AGXG17FamilyIndirectArgumentBufferLayout>::getOrCreateVariantEntry(os_unfair_lock_s *a1, uint64_t a2, unsigned char *a3, int a4, int a5)
{
  *a3 = 0;
  if ((a4 & 4) != 0 || a5) {
    operator new();
  }
  uint64_t v9 = a1 + 294;
  os_unfair_lock_lock(a1 + 294);
  uint64_t v10 = VectorMap<AGX::ObjectProgramKey,AGX::ProgramVariantEntry<AGX::HAL200::ObjectProgramVariant>,4u>::operator[]((uint64_t)a1, a2);
  if (!*(void *)v10)
  {
    long long v12 = dispatch_group_create();
    *(void *)uint64_t v10 = v12;
LABEL_10:
    dispatch_group_enter(v12);
    *a3 = 1;
    goto LABEL_11;
  }
  if (*(unsigned char *)(v10 + 40))
  {
    uint64_t v11 = *(void *)(v10 + 8);
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    }
    *(void *)(v10 + 8) = 0;
    *(void *)(v10 + 16) = 0;

    *(void *)(v10 + 24) = 0;
    *(void *)(v10 + 32) = 0;
    *(unsigned char *)(v10 + 40) = 0;
    long long v12 = *(NSObject **)v10;
    goto LABEL_10;
  }
  if ((*(void *)&a4 & 0x330003) != 0) {
    dispatch_group_enter(*(dispatch_group_t *)v10);
  }
LABEL_11:
  os_unfair_lock_unlock(v9);
  return v10;
}

void sub_2429EB270(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void ___ZN3AGX23UserCommonShaderFactoryINS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE26createObjectProgramVariantI27MTLRenderPipelineDescriptorEEvPT_P18AGXG17FamilyDevicemP25AGXG17FamilyBinaryArchivePU27objcproto16OS_dispatch_data8NSObjectP7NSArrayPNS1_13ObjectProgramESG_bbbU13block_pointerFvPNS1_20ObjectProgramVariantE13ReflectionKey16MTLCompilerErrorP8NSStringE_block_invoke(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v7 = *(void *)(a3 + 40);
  uint64_t v6 = *(__CFString **)(a3 + 48);
  *(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) = objc_alloc_init(MEMORY[0x263EFF9A0]);
  AGX::UserShaderFactory<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::fillCompilePerformanceStatisticsDictionary(*(NSObject **)a3, *(void *)(a3 + 8), *(void **)(*(void *)(*(void *)(a1 + 56) + 8) + 40), *(void *)(a3 + 56), [*(id *)(a1 + 32) name], *(unsigned char *)(a1 + 104));
  uint64_t v8 = *(void **)(*(void *)(*(void *)(a1 + 56) + 8) + 40);
  if (v8)
  {
    uint64_t v9 = (void *)[v8 objectForKey:*MEMORY[0x263F12630]];
    if (v9) {
      [v9 unsignedLongLongValue];
    }
  }
  if (*(_DWORD *)*MEMORY[0x263F4B1E8]) {
    IOGPUDeviceTraceEvent();
  }
  if (v7)
  {
    char v10 = 1;
    goto LABEL_21;
  }
  if (a2[33])
  {
    uint64_t v11 = a2 + 33;
    if (!a2[34]) {
      uint64_t v11 = a2 + 103;
    }
    if (!*v11) {
      goto LABEL_16;
    }
  }
  else
  {
    uint64_t v11 = a2 + 103;
    if (!a2[103]) {
      goto LABEL_16;
    }
  }
  if (v11[1])
  {
    char v10 = 0;
    uint64_t v6 = @"Internal error during function compilation";
    goto LABEL_20;
  }
LABEL_16:
  if (!*(unsigned char *)(a1 + 105)
    || (AGX::ProgramBindingRemap<AGX::HAL200::Encoders,AGX::HAL200::Classes>::isShaderExecuteIndirectCompatible(a2, 0) & 1) != 0)
  {
    uint64_t v7 = 0;
    char v10 = 1;
    goto LABEL_21;
  }
  char v10 = 0;
  uint64_t v6 = @"Object shader cannot be used with indirect command buffers";
LABEL_20:
  uint64_t v7 = 2;
LABEL_21:
  AGX::Program<AGX::HAL200::ObjectProgramVariant,AGX::ObjectProgramKey,AGX::HAL200::IndirectArgumentLayout,AGXG17FamilyIndirectArgumentBufferLayout>::signalPending(*(void *)(a1 + 80), *(void *)(a1 + 88), *(NSObject **)(a3 + 16), a1 + 106, *(void **)(a1 + 40), 8, v7);
  if (!v7)
  {
    [*(id *)(a1 + 48) needsCustomBorderColorSamplers];
    long long v12 = (void *)[*(id *)(a1 + 48) profileControl];
    if (v12)
    {
      uint64_t v13 = v12;
      [v12 uscCliqueTraceLevel];
      [v13 uscEmitPosition];
      [v13 uscEmitThreadControlFlow];
    }
    operator new();
  }
  uint64_t v14 = *(void *)(a1 + 72);
  uint64_t v15 = *(void **)(a3 + 32);
  int v16 = *(unsigned __int8 *)(a1 + 138);
  *(void *)(v14 + 8) = 0;
  *(void *)(v14 + 16) = v7;

  *(void *)(v14 + 24) = [(__CFString *)v6 copy];
  if (*(void *)(v14 + 8))
  {

    *(void *)(v14 + 32) = v15;
  }
  else
  {
    if (v16) {
      char v17 = v10;
    }
    else {
      char v17 = 0;
    }
    *(unsigned char *)(v14 + 40) = v17;
  }
  dispatch_group_leave(*(dispatch_group_t *)v14);
}

void sub_2429EB7B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  AGX::ProgramBindingRemap<AGX::HAL200::Encoders,AGX::HAL200::Classes>::~ProgramBindingRemap((uint64_t)va);
  if (*(char *)(v8 - 97) < 0) {
    operator delete(*(void **)(v8 - 120));
  }
  MEMORY[0x24566ED90](v7, 0x10F3C4038D9C7E2);
  _Unwind_Resume(a1);
}

void AGX::UserShaderFactory<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::compileFunctionWithAirLinkedIntersectionFunction_Impl<AGX::ObjectProgramKey,true>(void ***a1, uint64_t a2, void *a3, long long *a4, uint64_t a5)
{
  uint64_t v42 = *MEMORY[0x263EF8340];
  uint64_t v7 = *a1;
  v23[0] = MEMORY[0x263EF8330];
  v23[1] = 3221225472;
  long long v8 = a4[3];
  long long v26 = a4[2];
  long long v27 = v8;
  long long v28 = a4[4];
  long long v9 = a4[1];
  long long v24 = *a4;
  v23[2] = ___ZN3AGX17UserShaderFactoryINS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE53compileFunctionWithAirLinkedIntersectionFunction_ImplINS_16ObjectProgramKeyELb1EEENSt3__19enable_ifIXT0_EvE4typeERKT_P29MTLCompileFunctionRequestDataNS5_21DriverRequestDataImplIXT0_EEEU13block_pointerFvRK20AGCDeserializedReplyRKNS_28CompileFunctionReplyMetadataERKNS5_19DriverReplyDataImplIXT0_EEEE_block_invoke;
  v23[3] = &unk_26516EF18;
  v23[5] = a5;
  v23[6] = a1;
  uint64_t v10 = *((void *)a4 + 10);
  long long v25 = v9;
  v23[4] = a3;
  uint64_t v29 = v10;
  v30[0] = MEMORY[0x263EF8330];
  v30[1] = 3221225472;
  _OWORD v30[2] = ___ZN3AGX8Compiler14compileProgramINS_16ObjectProgramKeyE13AGCReplyArrayEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_RKNS_28CompileFunctionReplyMetadataEE_block_invoke;
  v30[3] = &unk_26516F7C0;
  v30[4] = v23;
  size_t v31 = 0;
  int v32 = 0;
  (*(void (**)(uint64_t, const void **, size_t *))(*(void *)a2 + 16))(a2, &v32, &v31);
  uint64_t v11 = dispatch_data_create(v32, v31, 0, 0);
  [a3 setDriverKeyData:v11];
  if ([a3 airScript])
  {
    long long v12 = [a3 airScript];
    long long v40 = 0uLL;
    v41[0] = 0;
    *(void *)&long long v40 = dispatch_data_create_map(v12, (const void **)&v40 + 1, v41);
    uint64_t v13 = *((void *)&v40 + 1);
    uint64_t v14 = **((_DWORD **)&v40 + 1);
    CC_SHA256_Init(&c);
    (**(void (***)(uint64_t, CC_SHA256_CTX *))a2)(a2, &c);
    *(void *)len = 0;
    data = 0;
    if (AGX::GetSerializedVertexFormat((AGX *)(v13 + v14), &data, (size_t *)len, v15, v16))
    {
      char v17 = data;
      CC_SHA256_Update(&c, data, len[0]);
      free(v17);
    }
    CC_SHA256_Final(md, &c);
    dispatch_release((dispatch_object_t)v40);
    long long v40 = *(_OWORD *)md;
    *(_OWORD *)uint64_t v41 = v37;
    [a3 setVendorPluginFunctionId:&v40];
  }
  *(void *)c.count = MEMORY[0x263EF8330];
  *(void *)c.hash = 3221225472;
  *(void *)&c.hash[2] = ___ZN3AGX8Compiler14compileProgramINS_16ObjectProgramKeyE13AGCReplyArrayEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke;
  *(void *)&c.hash[4] = &unk_26516F810;
  *(void *)&c.hash[6] = a3;
  *(void *)c.wbuf = v30;
  if ([a3 function])
  {
    uint64_t v18 = mach_absolute_time();
    int v19 = *v7;
    *(void *)md = MEMORY[0x263EF8330];
    *(void *)&md[8] = 3221225472;
    *(void *)&long long v37 = ___ZN3AGX8Compiler14compileProgramINS_16ObjectProgramKeyE13AGCReplyArrayEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke_4;
    *((void *)&v37 + 1) = &unk_26516F860;
    p_CC_SHA256_CTX c = &c;
    uint64_t v39 = v18;
    [v19 compileFunctionRequest:a3 completionHandler:md];
  }
  else
  {
    if ([a3 frameworkData] || objc_msgSend(a3, "pipelineOptions")) {
      AGX::Compiler::compileProgram<AGX::UserIntersectionProgramKey,AGCReplyArray>(AGX::UserIntersectionProgramKey const&,MTLCompileFunctionRequestData *,void({block_pointer})(AGCReplyArray const&,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,MTLCompilerError,NSString *,unsigned long long))::{lambda(void)#1}::operator()[abi:[AGX] Failed assertion __requestData.frameworkData && _requestData.pipelineOptions_]();
    }
    *(void *)md = MEMORY[0x263EF8330];
    *(void *)&md[8] = 3221225472;
    *(void *)&long long v37 = ___ZN3AGX8Compiler14compileProgramINS_16ObjectProgramKeyE13AGCReplyArrayEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke_3;
    *((void *)&v37 + 1) = &unk_26516F838;
    p_CC_SHA256_CTX c = &c;
    BOOL v20 = objc_msgSend((id)objc_msgSend(a3, "binaryArchives"), "count") == 0;
    int v21 = *v7;
    uint64_t v22 = [a3 driverKeyData];
    if (v20) {
      objc_msgSend(v21, "compileRequest:pipelineCache:sync:completionHandler:", v22, objc_msgSend(a3, "pipelineCache"), objc_msgSend(a3, "sync"), md);
    }
    else {
      objc_msgSend(v21, "compileRequest:binaryArchives:failOnBinaryArchiveMiss:pipelineCache:sync:completionHandler:", v22, objc_msgSend(a3, "binaryArchives"), 0, objc_msgSend(a3, "pipelineCache"), objc_msgSend(a3, "sync"), md);
    }
  }
  dispatch_release(v11);
}

void sub_2429EBBF8(_Unwind_Exception *a1)
{
  dispatch_release(*(dispatch_object_t *)(v1 - 128));
  _Unwind_Resume(a1);
}

void ___ZN3AGX17UserShaderFactoryINS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE20compileFunction_ImplINS_16ObjectProgramKeyEEEvRKT_P29MTLCompileFunctionRequestDataRKNS5_21DriverRequestDataImplILb1EEEU13block_pointerFvRK20AGCDeserializedReplyRKNS_28CompileFunctionReplyMetadataERKNS5_19DriverReplyDataImplILb1EEEE_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void sub_2429EBCB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t ___ZN3AGX8Compiler14compileProgramINS_16ObjectProgramKeyE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_RKNS_28CompileFunctionReplyMetadataEE_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  v11[0] = a3;
  v11[1] = a4;
  v11[2] = a5;
  v11[3] = a6;
  v11[4] = a7;
  v11[5] = a8;
  v11[6] = a9;
  v11[7] = a10;
  return (*(uint64_t (**)(void, uint64_t, void *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), a2, v11, a4, a5, a6, a7, a8);
}

void AGX::Compiler::compileProgram<AGX::ObjectProgramKey,AGCDeserializedReply>(void **a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v33 = *MEMORY[0x263EF8340];
  size_t v25 = 0;
  long long v26 = 0;
  (*(void (**)(uint64_t, const void **, size_t *))(*(void *)a2 + 16))(a2, &v26, &v25);
  long long v8 = dispatch_data_create(v26, v25, 0, 0);
  [a3 setDriverKeyData:v8];
  if ([a3 airScript])
  {
    int v23 = 0;
    size_t v24 = 0;
    dispatch_object_t object = dispatch_data_create_map((dispatch_data_t)[a3 airScript], (const void **)&v23, &v24);
    long long v9 = v23;
    uint64_t v10 = *v23;
    CC_SHA256_Init(&c);
    (**(void (***)(uint64_t, CC_SHA256_CTX *))a2)(a2, &c);
    *(void *)len = 0;
    data = 0;
    if (AGX::GetSerializedVertexFormat((AGX *)((char *)v9 + v10), &data, (size_t *)len, v11, v12))
    {
      uint64_t v13 = data;
      CC_SHA256_Update(&c, data, len[0]);
      free(v13);
    }
    CC_SHA256_Final(md, &c);
    dispatch_release(object);
    v30[0] = *(_OWORD *)md;
    v30[1] = v32;
    [a3 setVendorPluginFunctionId:v30];
  }
  v21[0] = MEMORY[0x263EF8330];
  v21[1] = 3221225472;
  v21[2] = ___ZN3AGX8Compiler14compileProgramINS_16ObjectProgramKeyE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke;
  v21[3] = &unk_26516F810;
  v21[4] = a3;
  v21[5] = a4;
  if ([a3 function])
  {
    uint64_t v14 = mach_absolute_time();
    uint64_t v15 = *a1;
    v19[0] = MEMORY[0x263EF8330];
    v19[1] = 3221225472;
    v19[2] = ___ZN3AGX8Compiler14compileProgramINS_16ObjectProgramKeyE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke_4;
    v19[3] = &unk_26516F860;
    v19[4] = v21;
    v19[5] = v14;
    [v15 compileFunctionRequest:a3 completionHandler:v19];
  }
  else
  {
    if ([a3 frameworkData] || objc_msgSend(a3, "pipelineOptions")) {
      AGX::Compiler::compileProgram<AGX::UserIntersectionProgramKey,AGCReplyArray>(AGX::UserIntersectionProgramKey const&,MTLCompileFunctionRequestData *,void({block_pointer})(AGCReplyArray const&,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,MTLCompilerError,NSString *,unsigned long long))::{lambda(void)#1}::operator()[abi:[AGX] Failed assertion __requestData.frameworkData && _requestData.pipelineOptions_]();
    }
    v20[0] = MEMORY[0x263EF8330];
    v20[1] = 3221225472;
    v20[2] = ___ZN3AGX8Compiler14compileProgramINS_16ObjectProgramKeyE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke_3;
    v20[3] = &unk_26516F838;
    v20[4] = v21;
    BOOL v16 = objc_msgSend((id)objc_msgSend(a3, "binaryArchives"), "count") == 0;
    char v17 = *a1;
    uint64_t v18 = [a3 driverKeyData];
    if (v16) {
      objc_msgSend(v17, "compileRequest:pipelineCache:sync:completionHandler:", v18, objc_msgSend(a3, "pipelineCache"), objc_msgSend(a3, "sync"), v20);
    }
    else {
      objc_msgSend(v17, "compileRequest:binaryArchives:failOnBinaryArchiveMiss:pipelineCache:sync:completionHandler:", v18, objc_msgSend(a3, "binaryArchives"), 0, objc_msgSend(a3, "pipelineCache"), objc_msgSend(a3, "sync"), v20);
    }
  }
  dispatch_release(v8);
}

void sub_2429EC064(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,dispatch_object_t object)
{
}

void ___ZN3AGX23UserCommonShaderFactoryINS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE26createObjectProgramVariantI27MTLRenderPipelineDescriptorEEvPT_P18AGXG17FamilyDevicemP25AGXG17FamilyBinaryArchivePU27objcproto16OS_dispatch_data8NSObjectP7NSArrayPNS1_13ObjectProgramESG_bbbU13block_pointerFvPNS1_20ObjectProgramVariantE13ReflectionKey16MTLCompilerErrorP8NSStringE_block_invoke_2(uint64_t a1, uint64_t a2, NSObject *a3)
{
  AGX::Program<AGX::HAL200::ObjectProgramVariant,AGX::ObjectProgramKey,AGX::HAL200::IndirectArgumentLayout,AGXG17FamilyIndirectArgumentBufferLayout>::signalPending(*(void *)(a1 + 40), *(void *)(a1 + 48), a3, a1 + 64, *(void **)(a1 + 32), 7, a2);
  uint64_t v4 = **(NSObject ***)(a1 + 56);

  dispatch_group_leave(v4);
}

void ___ZN3AGX23UserCommonShaderFactoryINS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE26createObjectProgramVariantI27MTLRenderPipelineDescriptorEEvPT_P18AGXG17FamilyDevicemP25AGXG17FamilyBinaryArchivePU27objcproto16OS_dispatch_data8NSObjectP7NSArrayPNS1_13ObjectProgramESG_bbbU13block_pointerFvPNS1_20ObjectProgramVariantE13ReflectionKey16MTLCompilerErrorP8NSStringE_block_invoke_3(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  *(_OWORD *)dispatch_object_t object = 0u;
  memset(v7, 0, 26);
  uint64_t v2 = (void *)AGX::Program<AGX::HAL200::ObjectProgramVariant,AGX::ObjectProgramKey,AGX::HAL200::IndirectArgumentLayout,AGXG17FamilyIndirectArgumentBufferLayout>::consolidate(*(os_unfair_lock_s **)(a1 + 48), *(void *)(a1 + 56), a1 + 64, (uint64_t)object);
  uint64_t v3 = v2[1];
  uint64_t v4 = *(void *)(a1 + 32);
  long long v5 = *(_OWORD *)(a1 + 240);
  v8[0] = *(_OWORD *)(a1 + 224);
  v8[1] = v5;
  (*(void (**)(uint64_t, uint64_t, _OWORD *, void, void))(v4 + 16))(v4, v3, v8, v2[2], v2[3]);

  if (object[0]) {
    dispatch_release(object[0]);
  }
  if (object[1]) {
    (*((void (**)(dispatch_object_t))object[1]->isa + 1))(object[1]);
  }
}

void sub_2429EC1C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t AGX::GeometrySharedKey<_AGCObjectContextStateAGP,(_AGCStreamToken)9>::GeometrySharedKey(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_26F852CF0;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 16) = 0;
  long long v5 = *(unsigned char **)(a2 + 16);
  uint64_t v4 = *(unsigned char **)(a2 + 24);
  int64_t v6 = v4 - v5;
  if (v4 != v5)
  {
    if (v6 < 0) {
      abort();
    }
    uint64_t v7 = (char *)operator new(v4 - v5);
    *(void *)(a1 + 16) = v7;
    *(void *)(a1 + 24) = v7;
    long long v8 = &v7[4 * (v6 >> 2)];
    *(void *)(a1 + 32) = v8;
    memcpy(v7, v5, v6);
    *(void *)(a1 + 24) = v8;
  }
  *(void *)a1 = &unk_26F852CA8;
  long long v9 = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v9;
  if (*(char *)(a2 + 95) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 72), *(const std::string::value_type **)(a2 + 72), *(void *)(a2 + 80));
  }
  else
  {
    long long v10 = *(_OWORD *)(a2 + 72);
    *(void *)(a1 + 88) = *(void *)(a2 + 88);
    *(_OWORD *)(a1 + 72) = v10;
  }
  int v11 = *(_DWORD *)(a2 + 96);
  *(void *)(a1 + 104) = 0;
  *(_DWORD *)(a1 + 96) = v11;
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 120) = 0;
  uint64_t v13 = *(unsigned char **)(a2 + 104);
  long long v12 = *(unsigned char **)(a2 + 112);
  int64_t v14 = v12 - v13;
  if (v12 != v13)
  {
    if (v14 < 0) {
      abort();
    }
    uint64_t v15 = (char *)operator new(v12 - v13);
    *(void *)(a1 + 104) = v15;
    *(void *)(a1 + 112) = v15;
    BOOL v16 = &v15[32 * (v14 >> 5)];
    *(void *)(a1 + 120) = v16;
    memcpy(v15, v13, v14);
    *(void *)(a1 + 112) = v16;
  }
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 144) = 0;
  uint64_t v18 = *(unsigned char **)(a2 + 128);
  char v17 = *(unsigned char **)(a2 + 136);
  int64_t v19 = v17 - v18;
  if (v17 != v18)
  {
    if (v19 < 0) {
      abort();
    }
    BOOL v20 = (char *)operator new(v17 - v18);
    *(void *)(a1 + 128) = v20;
    *(void *)(a1 + 136) = v20;
    int v21 = &v20[32 * (v19 >> 5)];
    *(void *)(a1 + 144) = v21;
    memcpy(v20, v18, v19);
    *(void *)(a1 + 136) = v21;
  }
  return a1;
}

void sub_2429EC37C(_Unwind_Exception *exception_object)
{
  void *v1 = v2;
  uint64_t v4 = (void *)v1[2];
  if (v4)
  {
    v1[3] = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void __destroy_helper_block_e8_64c28_ZTSN3AGX16ObjectProgramKeyE(uint64_t a1)
{
  *(void *)(a1 + 64) = &unk_26F852CA8;
  uint64_t v2 = *(void **)(a1 + 192);
  if (v2)
  {
    *(void *)(a1 + 200) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *(void **)(a1 + 168);
  if (v3)
  {
    *(void *)(a1 + 176) = v3;
    operator delete(v3);
  }
  if (*(char *)(a1 + 159) < 0) {
    operator delete(*(void **)(a1 + 136));
  }
  *(void *)(a1 + 64) = off_26F852CF0;
  uint64_t v4 = *(void **)(a1 + 80);
  if (v4)
  {
    *(void *)(a1 + 88) = v4;
    operator delete(v4);
  }
}

uint64_t __copy_helper_block_e8_64c28_ZTSN3AGX16ObjectProgramKeyE(uint64_t a1, uint64_t a2)
{
  uint64_t result = AGX::GeometrySharedKey<_AGCObjectContextStateAGP,(_AGCStreamToken)9>::GeometrySharedKey(a1 + 64, a2 + 64);
  *(void *)(a1 + 64) = &unk_26F852D30;
  *(void *)(a1 + 216) = *(void *)(a2 + 216);
  return result;
}

uint64_t AGX::Program<AGX::HAL200::ObjectProgramVariant,AGX::ObjectProgramKey,AGX::HAL200::IndirectArgumentLayout,AGXG17FamilyIndirectArgumentBufferLayout>::consolidate(os_unfair_lock_s *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!*(unsigned char *)(a2 + 41)) {
    return a2;
  }
  if (!*(void *)(a2 + 8))
  {
    uint64_t v8 = a4;
    uint64_t v10 = *(void *)(a2 + 24);
    *(void *)(a4 + 16) = *(void *)(a2 + 16);
    *(void *)(a4 + 24) = v10;
    *(void *)(a2 + 24) = 0;
    long long v9 = *(NSObject **)a2;
    if (!*(void *)a2) {
      goto LABEL_9;
    }
LABEL_8:
    dispatch_release(v9);
    goto LABEL_9;
  }
  uint64_t v7 = a1 + 294;
  os_unfair_lock_lock(a1 + 294);
  uint64_t v8 = VectorMap<AGX::ObjectProgramKey,AGX::ProgramVariantEntry<AGX::HAL200::ObjectProgramVariant>,4u>::operator[]((uint64_t)a1, a3);
  if (*(void *)v8)
  {
    os_unfair_lock_unlock(v7);
    dispatch_group_wait(*(dispatch_group_t *)v8, 0xFFFFFFFFFFFFFFFFLL);
    long long v9 = *(NSObject **)a2;
    if (!*(void *)a2) {
      goto LABEL_9;
    }
    goto LABEL_8;
  }
  uint64_t v13 = dispatch_group_create();
  *(void *)uint64_t v8 = v13;
  dispatch_group_enter(v13);
  uint64_t v14 = *(void *)(a2 + 16);
  uint64_t v15 = *(void **)(a2 + 24);
  *(void *)(v8 + 8) = *(void *)(a2 + 8);
  *(void *)(v8 + 16) = v14;

  *(void *)(v8 + 24) = [v15 copy];
  if (*(void *)(v8 + 8))
  {

    *(void *)(v8 + 32) = 0;
  }
  else
  {
    *(unsigned char *)(v8 + 40) = 0;
  }
  dispatch_group_leave(*(dispatch_group_t *)v8);
  *(void *)(a2 + 8) = 0;
  os_unfair_lock_unlock(v7);
  long long v9 = *(NSObject **)a2;
  if (*(void *)a2) {
    goto LABEL_8;
  }
LABEL_9:
  uint64_t v11 = *(void *)(a2 + 8);
  if (v11) {
    (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
  }

  MEMORY[0x24566ED90](a2, 0x10A0C405D73F519);
  return v8;
}

void sub_2429EC648(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t VectorMap<AGX::ObjectProgramKey,AGX::ProgramVariantEntry<AGX::HAL200::ObjectProgramVariant>,4u>::operator[](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  uint64_t v3 = a1;
  uint64_t v4 = *(unsigned int *)(a1 + 848);
  uint64_t v82 = v4;
  if (v4)
  {
    uint64_t v5 = 0;
    uint64_t v6 = *(void *)(a1 + 840);
    uint64_t v7 = (unsigned __int8 *)(a2 + 72);
    __s1 = *(void **)(a2 + 72);
    uint64_t v8 = *(unsigned __int8 *)(a2 + 95);
    unsigned __int8 v9 = v8;
    size_t v10 = *(void *)(a2 + 80);
    if ((v8 & 0x80u) == 0) {
      uint64_t v11 = *(unsigned __int8 *)(a2 + 95);
    }
    else {
      uint64_t v11 = *(void *)(a2 + 80);
    }
    int v12 = *(_DWORD *)(a2 + 56);
    int v79 = *(_DWORD *)(a2 + 96);
    int v80 = *(_DWORD *)(a2 + 52);
    uint64_t v76 = *(void *)(a2 + 104);
    uint64_t v77 = *(void *)(a2 + 112);
    uint64_t v74 = *(void *)(a2 + 128);
    uint64_t v75 = *(void *)(a2 + 136);
    int v81 = *(_DWORD *)(a2 + 60);
    int v78 = *(_DWORD *)(a2 + 64);
    uint64_t v73 = *(void *)(a2 + 152);
    while (1)
    {
      uint64_t v14 = v6 + 160 * v5;
      uint64_t v15 = *(unsigned __int8 *)(v14 + 95);
      int v16 = (char)v15;
      if ((v15 & 0x80u) != 0) {
        uint64_t v15 = *(void *)(v14 + 80);
      }
      if (v11 == v15)
      {
        if (v16 >= 0) {
          char v17 = (unsigned __int8 *)(v14 + 72);
        }
        else {
          char v17 = *(unsigned __int8 **)(v14 + 72);
        }
        if (((char)v8 & 0x80000000) == 0)
        {
          if ((_BYTE)v8)
          {
            uint64_t v18 = v7;
            uint64_t v19 = v8;
            while (*v18 == *v17)
            {
              ++v18;
              ++v17;
              if (!--v19) {
                goto LABEL_19;
              }
            }
            goto LABEL_7;
          }
LABEL_19:
          if (v12 == *(_DWORD *)(v14 + 56)
            && v80 == *(_DWORD *)(v14 + 52)
            && v79 == *(_DWORD *)(v14 + 96)
            && v77 == v76
            && v75 == v74
            && v81 == *(_DWORD *)(v14 + 60)
            && v78 == *(_DWORD *)(v14 + 64)
            && v73 == *(void *)(v6 + 160 * v5 + 152))
          {
            uint64_t v20 = v6 + 48 * v5;
            return v20 + 640;
          }
          goto LABEL_7;
        }
        int v13 = memcmp(__s1, v17, v10);
        uint64_t v4 = v82;
        if (!v13) {
          goto LABEL_19;
        }
      }
LABEL_7:
      if (++v5 == v4)
      {
        uint64_t v2 = a2;
        uint64_t v3 = a1;
        int v22 = v79;
        int v21 = v80;
        uint64_t v24 = v76;
        uint64_t v23 = v77;
        uint64_t v26 = v74;
        uint64_t v25 = v75;
        goto LABEL_30;
      }
    }
  }
  uint64_t v6 = *(void *)(a1 + 840);
  unsigned __int8 v9 = *(unsigned char *)(a2 + 95);
  size_t v10 = *(void *)(a2 + 80);
  __s1 = *(void **)(a2 + 72);
  int v21 = *(_DWORD *)(a2 + 52);
  int v12 = *(_DWORD *)(a2 + 56);
  int v22 = *(_DWORD *)(a2 + 96);
  uint64_t v24 = *(void *)(a2 + 104);
  uint64_t v23 = *(void *)(a2 + 112);
  uint64_t v26 = *(void *)(a2 + 128);
  uint64_t v25 = *(void *)(a2 + 136);
  int v81 = *(_DWORD *)(a2 + 60);
  int v78 = *(_DWORD *)(a2 + 64);
  uint64_t v73 = *(void *)(a2 + 152);
LABEL_30:
  if ((v9 & 0x80u) == 0) {
    size_t v27 = v9;
  }
  else {
    size_t v27 = v10;
  }
  BOOL v28 = v23 == v24;
  BOOL v29 = v25 == v26;
  if ((v9 & 0x80) != 0)
  {
    if (v28 && v29)
    {
      uint64_t v52 = *(void *)(v6 + 832);
      if (v52)
      {
        while (1)
        {
          uint64_t v55 = *(unsigned __int8 *)(v52 + 95);
          int v56 = (char)v55;
          if ((v55 & 0x80u) != 0) {
            uint64_t v55 = *(void *)(v52 + 80);
          }
          if (v27 == v55)
          {
            char v57 = v56 >= 0 ? (const void *)(v52 + 72) : *(const void **)(v52 + 72);
            if (!memcmp(__s1, v57, v10)
              && v12 == *(_DWORD *)(v52 + 56)
              && v21 == *(_DWORD *)(v52 + 52)
              && v22 == *(_DWORD *)(v52 + 96)
              && v81 == *(_DWORD *)(v52 + 60)
              && v78 == *(_DWORD *)(v52 + 64)
              && v73 == *(void *)(v52 + 152))
            {
              break;
            }
          }
          uint64_t v58 = *(unsigned __int8 *)(v52 + 255);
          int v59 = (char)v58;
          if ((v58 & 0x80u) != 0) {
            uint64_t v58 = *(void *)(v52 + 240);
          }
          if (v27 == v58)
          {
            uint64_t v60 = v59 >= 0 ? (const void *)(v52 + 232) : *(const void **)(v52 + 232);
            if (!memcmp(__s1, v60, v10)
              && v12 == *(_DWORD *)(v52 + 216)
              && v21 == *(_DWORD *)(v52 + 212)
              && v22 == *(_DWORD *)(v52 + 256)
              && v81 == *(_DWORD *)(v52 + 220)
              && v78 == *(_DWORD *)(v52 + 224)
              && v73 == *(void *)(v52 + 312))
            {
              unsigned int v67 = 1;
              goto LABEL_171;
            }
          }
          uint64_t v61 = *(unsigned __int8 *)(v52 + 415);
          int v62 = (char)v61;
          if ((v61 & 0x80u) != 0) {
            uint64_t v61 = *(void *)(v52 + 400);
          }
          if (v27 == v61)
          {
            int64_t v63 = v62 >= 0 ? (const void *)(v52 + 392) : *(const void **)(v52 + 392);
            if (!memcmp(__s1, v63, v10)
              && v12 == *(_DWORD *)(v52 + 376)
              && v21 == *(_DWORD *)(v52 + 372)
              && v22 == *(_DWORD *)(v52 + 416)
              && v81 == *(_DWORD *)(v52 + 380)
              && v78 == *(_DWORD *)(v52 + 384)
              && v73 == *(void *)(v52 + 472))
            {
              unsigned int v67 = 2;
              goto LABEL_171;
            }
          }
          uint64_t v64 = *(unsigned __int8 *)(v52 + 575);
          int v65 = (char)v64;
          if ((v64 & 0x80u) != 0) {
            uint64_t v64 = *(void *)(v52 + 560);
          }
          if (v27 == v64)
          {
            v66 = v65 >= 0 ? (const void *)(v52 + 552) : *(const void **)(v52 + 552);
            if (!memcmp(__s1, v66, v10)
              && v12 == *(_DWORD *)(v52 + 536)
              && v21 == *(_DWORD *)(v52 + 532)
              && v22 == *(_DWORD *)(v52 + 576)
              && v81 == *(_DWORD *)(v52 + 540)
              && v78 == *(_DWORD *)(v52 + 544)
              && v73 == *(void *)(v52 + 632))
            {
              unsigned int v67 = 3;
LABEL_171:
              uint64_t v20 = v52 + 48 * v67;
              return v20 + 640;
            }
          }
          uint64_t v52 = *(void *)(v52 + 832);
          if (!v52) {
            goto LABEL_104;
          }
        }
        unsigned int v67 = 0;
        goto LABEL_171;
      }
    }
LABEL_104:
    if (v82 == 4) {
      operator new();
    }
    uint64_t v53 = v6 + 160 * v82;
    *(_DWORD *)(v53 + 8) = *(_DWORD *)(v2 + 8);
    if (v53 == v2)
    {
      std::string::operator=((std::string *)(v2 + 72), (const std::string *)(v2 + 72));
    }
    else
    {
      std::vector<unsigned int>::__assign_with_size[abi:nn180100]<unsigned int *,unsigned int *>((void *)(v53 + 16), *(char **)(v2 + 16), *(char **)(v2 + 24), (uint64_t)(*(void *)(v2 + 24) - *(void *)(v2 + 16)) >> 2);
      long long v54 = *(_OWORD *)(v2 + 40);
      *(_OWORD *)(v53 + 56) = *(_OWORD *)(v2 + 56);
      *(_OWORD *)(v53 + 40) = v54;
      std::string::operator=((std::string *)(v53 + 72), (const std::string *)(v2 + 72));
      *(_DWORD *)(v53 + 96) = *(_DWORD *)(v2 + 96);
      std::vector<MTLUINT256_t>::__assign_with_size[abi:nn180100]<MTLUINT256_t*,MTLUINT256_t*>((void *)(v53 + 104), *(char **)(v2 + 104), *(char **)(v2 + 112), (uint64_t)(*(void *)(v2 + 112) - *(void *)(v2 + 104)) >> 5);
      std::vector<MTLUINT256_t>::__assign_with_size[abi:nn180100]<MTLUINT256_t*,MTLUINT256_t*>((void *)(v53 + 128), *(char **)(v2 + 128), *(char **)(v2 + 136), (uint64_t)(*(void *)(v2 + 136) - *(void *)(v2 + 128)) >> 5);
    }
    *(void *)(v6 + 160 * v82 + 152) = *(void *)(v2 + 152);
    uint64_t v68 = *(void *)(v3 + 840);
    unsigned int v69 = *(_DWORD *)(v3 + 848);
    *(_DWORD *)(v3 + 848) = v69 + 1;
    uint64_t v20 = v68 + 48 * v69;
    return v20 + 640;
  }
  uint64_t v30 = *(void *)(v6 + 832);
  if (!v30) {
    goto LABEL_104;
  }
  unsigned int v31 = 1;
  while (1)
  {
    uint64_t v32 = *(unsigned __int8 *)(v30 + 95);
    int v33 = (char)v32;
    if ((v32 & 0x80u) != 0) {
      uint64_t v32 = *(void *)(v30 + 80);
    }
    if (v27 == v32)
    {
      if (v9)
      {
        if (v33 >= 0) {
          int64_t v34 = (unsigned __int8 *)(v30 + 72);
        }
        else {
          int64_t v34 = *(unsigned __int8 **)(v30 + 72);
        }
        int v35 = (unsigned __int8 *)(v2 + 72);
        uint64_t v36 = v9;
        while (*v35 == *v34)
        {
          ++v35;
          ++v34;
          if (!--v36) {
            goto LABEL_47;
          }
        }
      }
      else
      {
LABEL_47:
        if (v12 == *(_DWORD *)(v30 + 56)
          && v21 == *(_DWORD *)(v30 + 52)
          && v29
          && v28
          && v22 == *(_DWORD *)(v30 + 96)
          && v81 == *(_DWORD *)(v30 + 60)
          && v78 == *(_DWORD *)(v30 + 64)
          && v73 == *(void *)(v30 + 152))
        {
          unsigned int v31 = 0;
          goto LABEL_167;
        }
      }
    }
    uint64_t v37 = *(unsigned __int8 *)(v30 + 255);
    int v38 = (char)v37;
    if ((v37 & 0x80u) != 0) {
      uint64_t v37 = *(void *)(v30 + 240);
    }
    if (v27 == v37)
    {
      if (v9)
      {
        if (v38 >= 0) {
          uint64_t v39 = (unsigned __int8 *)(v30 + 232);
        }
        else {
          uint64_t v39 = *(unsigned __int8 **)(v30 + 232);
        }
        long long v40 = (unsigned __int8 *)(v2 + 72);
        uint64_t v41 = v9;
        while (*v40 == *v39)
        {
          ++v40;
          ++v39;
          if (!--v41) {
            goto LABEL_63;
          }
        }
      }
      else
      {
LABEL_63:
        if (v12 == *(_DWORD *)(v30 + 216)
          && v21 == *(_DWORD *)(v30 + 212)
          && v29
          && v28
          && v22 == *(_DWORD *)(v30 + 256)
          && v81 == *(_DWORD *)(v30 + 220)
          && v78 == *(_DWORD *)(v30 + 224)
          && v73 == *(void *)(v30 + 312))
        {
          goto LABEL_167;
        }
      }
    }
    uint64_t v42 = *(unsigned __int8 *)(v30 + 415);
    int v43 = (char)v42;
    if ((v42 & 0x80u) != 0) {
      uint64_t v42 = *(void *)(v30 + 400);
    }
    if (v27 == v42) {
      break;
    }
LABEL_85:
    uint64_t v47 = *(unsigned __int8 *)(v30 + 575);
    int v48 = (char)v47;
    if ((v47 & 0x80u) != 0) {
      uint64_t v47 = *(void *)(v30 + 560);
    }
    if (v27 == v47)
    {
      if (v9)
      {
        if (v48 >= 0) {
          char v49 = (unsigned __int8 *)(v30 + 552);
        }
        else {
          char v49 = *(unsigned __int8 **)(v30 + 552);
        }
        char v50 = (unsigned __int8 *)(v2 + 72);
        uint64_t v51 = v9;
        while (*v50 == *v49)
        {
          ++v50;
          ++v49;
          if (!--v51) {
            goto LABEL_95;
          }
        }
      }
      else
      {
LABEL_95:
        if (v12 == *(_DWORD *)(v30 + 536)
          && v21 == *(_DWORD *)(v30 + 532)
          && v29
          && v28
          && v22 == *(_DWORD *)(v30 + 576)
          && v81 == *(_DWORD *)(v30 + 540)
          && v78 == *(_DWORD *)(v30 + 544)
          && v73 == *(void *)(v30 + 632))
        {
          unsigned int v31 = 3;
          goto LABEL_167;
        }
      }
    }
    uint64_t v30 = *(void *)(v30 + 832);
    if (!v30) {
      goto LABEL_104;
    }
  }
  if (v9)
  {
    if (v43 >= 0) {
      BOOL v44 = (unsigned __int8 *)(v30 + 392);
    }
    else {
      BOOL v44 = *(unsigned __int8 **)(v30 + 392);
    }
    uint64_t v45 = (unsigned __int8 *)(v2 + 72);
    uint64_t v46 = v9;
    while (*v45 == *v44)
    {
      ++v45;
      ++v44;
      if (!--v46) {
        goto LABEL_79;
      }
    }
    goto LABEL_85;
  }
LABEL_79:
  if (v12 != *(_DWORD *)(v30 + 376)
    || v21 != *(_DWORD *)(v30 + 372)
    || !v29
    || !v28
    || v22 != *(_DWORD *)(v30 + 416)
    || v81 != *(_DWORD *)(v30 + 380)
    || v78 != *(_DWORD *)(v30 + 384)
    || v73 != *(void *)(v30 + 472))
  {
    goto LABEL_85;
  }
  unsigned int v31 = 2;
LABEL_167:
  uint64_t v20 = v30 + 48 * v31;
  return v20 + 640;
}

void sub_2429ECF3C(_Unwind_Exception *a1)
{
  MEMORY[0x24566ED90](v1, 0x10B2C40CE86BACFLL);
  _Unwind_Resume(a1);
}

_OWORD *VectorMap<AGX::ObjectProgramKey,AGX::ProgramVariantEntry<AGX::HAL200::ObjectProgramVariant>,4u>::Chunk::Chunk(_OWORD *a1)
{
  uint64_t v2 = AGX::ObjectProgramKey::ObjectProgramKey((uint64_t)a1, 0, 0, 0, 0, 0);
  AGX::ObjectProgramKey::ObjectProgramKey(v2 + 160, 0, 0, 0, 0, 0);
  AGX::ObjectProgramKey::ObjectProgramKey((uint64_t)(a1 + 20), 0, 0, 0, 0, 0);
  AGX::ObjectProgramKey::ObjectProgramKey((uint64_t)(a1 + 30), 0, 0, 0, 0, 0);
  a1[40] = 0u;
  a1[41] = 0u;
  *(_OWORD *)((char *)a1 + 666) = 0u;
  a1[43] = 0u;
  a1[44] = 0u;
  *(_OWORD *)((char *)a1 + 714) = 0u;
  a1[46] = 0u;
  a1[47] = 0u;
  *(_OWORD *)((char *)a1 + 762) = 0u;
  a1[49] = 0u;
  a1[50] = 0u;
  *(_OWORD *)((char *)a1 + 810) = 0u;
  return a1;
}

void sub_2429ED034(_Unwind_Exception *exception_object)
{
  uint64_t v4 = v2 - 160;
  uint64_t v5 = v2;
  while (1)
  {
    *(void *)(v5 - 160) = &unk_26F852CA8;
    v5 -= 160;
    uint64_t v6 = *(void **)(v5 + 128);
    if (v6)
    {
      *(void *)(v2 - 24) = v6;
      operator delete(v6);
    }
    uint64_t v7 = *(void **)(v2 - 56);
    if (v7)
    {
      *(void *)(v2 - 48) = v7;
      operator delete(v7);
    }
    if (*(char *)(v2 - 65) < 0) {
      operator delete(*(void **)(v2 - 88));
    }
    *(void *)(v2 - 160) = off_26F852CF0;
    uint64_t v8 = *(void **)(v2 - 144);
    if (v8)
    {
      *(void *)(v2 - 136) = v8;
      operator delete(v8);
    }
    v4 -= 160;
    uint64_t v2 = v5;
    if (v5 == v1) {
      _Unwind_Resume(exception_object);
    }
  }
}

void AGX::Program<AGX::HAL200::ObjectProgramVariant,AGX::ObjectProgramKey,AGX::HAL200::IndirectArgumentLayout,AGXG17FamilyIndirectArgumentBufferLayout>::signalPending(uint64_t a1, uint64_t a2, NSObject *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v39 = *MEMORY[0x263EF8340];
  uint64_t v7 = a2 & 0x330003;
  if ((a2 & 0x330003) != 0)
  {
    lock = (os_unfair_lock_s *)(a1 + 1176);
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 1176));
    uint64_t v14 = *(void **)(a1 + 1136);
    uint64_t v15 = *(unsigned int *)(a1 + 1144);
    uint64_t v16 = VectorMap<ReflectionKey,AGX::Program<AGX::HAL200::IntersectionProgramVariant,AGX::UserIntersectionProgramKey,AGX::HAL200::IndirectArgumentLayout,AGXG17FamilyIndirectArgumentBufferLayout>::ReflectionEntry,4u>::find(v14, *(_DWORD *)(a1 + 1144), (void *)a4);
    char v17 = (void *)v16;
    if (v16)
    {
      uint64_t v18 = *(void *)(v16 + 8);
      if (a7)
      {
LABEL_4:
        void *v17 = v18;
LABEL_26:
        os_unfair_lock_unlock(lock);
        return;
      }
    }
    else
    {
      if (v15 == 4) {
        operator new();
      }
      uint64_t v19 = &v14[4 * v15];
      long long v20 = *(_OWORD *)(a4 + 16);
      *uint64_t v19 = *(_OWORD *)a4;
      v19[1] = v20;
      uint64_t v21 = *(void *)(a1 + 1136);
      unsigned int v22 = *(_DWORD *)(a1 + 1144);
      *(_DWORD *)(a1 + 1144) = v22 + 1;
      char v17 = (void *)(v21 + 24 * v22 + 128);
      uint64_t v18 = *(void *)(v21 + 24 * v22 + 136);
      if (a7) {
        goto LABEL_4;
      }
    }
    if ((v7 & ~v18) != 0)
    {
      if (a3) {
        dispatch_retain(a3);
      }
      uint64_t v23 = v17[2];
      if (v23) {
        dispatch_release(v23);
      }
      v17[1] = v7;
      _OWORD v17[2] = a3;
    }
    if (!*(unsigned char *)(a1 + 2208))
    {
      long long v36 = 0u;
      long long v37 = 0u;
      long long v34 = 0u;
      long long v35 = 0u;
      uint64_t v32 = (void *)[objc_alloc(MEMORY[0x263F128C0]) initWithDevice:a5 reflectionData:a3 functionType:a6 options:a2 | 0x8000];
      uint64_t v24 = (void *)[v32 arguments];
      uint64_t v25 = [v24 countByEnumeratingWithState:&v34 objects:v38 count:16];
      if (v25)
      {
        uint64_t v26 = *(void *)v35;
        do
        {
          for (uint64_t i = 0; i != v25; ++i)
          {
            if (*(void *)v35 != v26) {
              objc_enumerationMutation(v24);
            }
            BOOL v28 = *(void **)(*((void *)&v34 + 1) + 8 * i);
            if (![v28 type]
              && (objc_msgSend((id)objc_msgSend(v28, "dataTypeDescription"), "elementIsIndirectArgumentBuffer") & 1) != 0)
            {
              BOOL v29 = objc_msgSend(a5, "newIndirectArgumentBufferLayoutWithStructType:", objc_msgSend(v28, "bufferStructType"));
              uint64_t v30 = v29[2];
              v29[2] = 0;
              *(void *)(a1 + 8 * [v28 index] + 1184) = v30;
            }
          }
          uint64_t v25 = [v24 countByEnumeratingWithState:&v34 objects:v38 count:16];
        }
        while (v25);
      }

      *(unsigned char *)(a1 + 2208) = 1;
    }
    goto LABEL_26;
  }
}

void sub_2429ED380(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_unfair_lock_t lock)
{
}

void ___ZN3AGX8Compiler14compileProgramINS_16ObjectProgramKeyE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  v14[0] = MEMORY[0x263EF8330];
  v14[1] = 3221225472;
  uint64_t v15 = ___ZN3AGX8Compiler14compileProgramINS_16ObjectProgramKeyE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke_2;
  uint64_t v16 = &unk_26516F7E8;
  uint64_t v17 = a9;
  uint64_t v18 = a3;
  uint64_t v19 = a4;
  uint64_t v20 = a5;
  uint64_t v21 = a6;
  uint64_t v22 = a7;
  uint64_t v12 = a1 + 32;
  size_t v10 = *(void **)(a1 + 32);
  uint64_t v11 = *(void *)(v12 + 8);
  uint64_t v23 = a8;
  uint64_t v24 = v11;
  uint64_t v25 = a2;
  uint64_t v26 = a10;
  if (objc_msgSend(v10, "sync", MEMORY[0x263EF8330], 3221225472))
  {
    v15(v14);
  }
  else
  {
    global_queue = dispatch_get_global_queue(0, 0);
    dispatch_async(global_queue, v14);
  }
}

uint64_t ___ZN3AGX8Compiler14compileProgramINS_16ObjectProgramKeyE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke_3(uint64_t a1, void *a2)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), *a2);
}

uint64_t ___ZN3AGX8Compiler14compileProgramINS_16ObjectProgramKeyE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke_4(uint64_t a1, void *a2)
{
  if (getTimebaseInfo(void)::once != -1) {
    dispatch_once(&getTimebaseInfo(void)::once, &__block_literal_global_7474);
  }
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), *a2);
}

void ___ZN3AGX8Compiler14compileProgramINS_16ObjectProgramKeyE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke_2(void *a1)
{
  size_t size_ptr = 0;
  buffer_ptr = 0;
  uint64_t v2 = a1[12];
  AGCDeserializedReply::AGCDeserializedReply((AGCDeserializedReply *)v5);
  if (v2 || (uint64_t v4 = a1[5]) == 0)
  {
    uint64_t v3 = 0;
  }
  else
  {
    uint64_t v3 = dispatch_data_create_map(v4, (const void **)&buffer_ptr, &size_ptr);
    AGCDeserializedReply::deserialize((AGCDeserializedReply *)v5, buffer_ptr, size_ptr);
  }
  (*(void (**)(void, unsigned char *))(a1[11] + 16))(a1[11], v5);
  if (v3) {
    dispatch_release(v3);
  }
  AGCDeserializedReply::~AGCDeserializedReply((AGCDeserializedReply *)v5);
}

void sub_2429ED63C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  AGCDeserializedReply::~AGCDeserializedReply((AGCDeserializedReply *)va);
  _Unwind_Resume(a1);
}

void ___ZN3AGX17UserShaderFactoryINS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE53compileFunctionWithAirLinkedIntersectionFunction_ImplINS_16ObjectProgramKeyELb1EEENSt3__19enable_ifIXT0_EvE4typeERKT_P29MTLCompileFunctionRequestDataNS5_21DriverRequestDataImplIXT0_EEEU13block_pointerFvRK20AGCDeserializedReplyRKNS_28CompileFunctionReplyMetadataERKNS5_19DriverReplyDataImplIXT0_EEEE_block_invoke(uint64_t a1, void *a2, int8x16_t *a3)
{
  uint64_t v40 = *MEMORY[0x263EF8340];
  uint64_t v6 = *(void *)(a1 + 48);
  int8x16_t v29 = vextq_s8(a3[1], a3[1], 8uLL);
  uint64_t v7 = a3[2].i64[1];
  v30.i64[0] = a3[2].i64[0];
  v30.i64[1] = v7;
  v31.i64[0] = a3[3].i64[0];
  uint64_t v8 = *(void **)(a1 + 72);
  uint64_t v33 = v7;
  uint64_t v34 = v31.i64[0];
  int v35 = 0;
  long long v37 = 0;
  long long v36 = 0uLL;
  if (!v7)
  {
    v28[0] = &v29;
    v28[1] = a2;
    v28[2] = a1 + 80;
    v28[3] = v6;
    v28[4] = &v33;
    AGX::UserShaderFactory<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::createAirLinkedIntersectionVariantSets(AGCReplyArray const&,AGX::UserShaderFactory<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::IntersectionReplyMetadata const&,MTLLinkedFunctions *,AGX::UserShaderFactory<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::IntersectionDescriptorContext const&,unsigned int)::{lambda(NSArray<objc_object  {objcproto11MTLFunction}*> *)#1}::operator()((uint64_t)v28, (void *)[v8 functions]);
    AGX::UserShaderFactory<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::createAirLinkedIntersectionVariantSets(AGCReplyArray const&,AGX::UserShaderFactory<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::IntersectionReplyMetadata const&,MTLLinkedFunctions *,AGX::UserShaderFactory<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::IntersectionDescriptorContext const&,unsigned int)::{lambda(NSArray<objc_object  {objcproto11MTLFunction}*> *)#1}::operator()((uint64_t)v28, (void *)[v8 privateFunctions]);
  }
  int8x16_t v9 = a3[1];
  int8x16_t v29 = *a3;
  int8x16_t v30 = v9;
  int8x16_t v10 = a3[3];
  int8x16_t v31 = a3[2];
  int8x16_t v32 = v10;
  AGCDeserializedReply::AGCDeserializedReply((AGCDeserializedReply *)v28);
  if (!v31.i64[1])
  {
    uint64_t v11 = (void *)[*(id *)(a1 + 32) function];
    if (!AGCReplyArray::getDeserializedReplyWithName<AGCDeserializedReply>(a2, (char *)objc_msgSend((id)objc_msgSend(v11, "name"), "UTF8String"), (AGCDeserializedReply *)v28))
    {
      uint64_t v12 = (FILE *)*MEMORY[0x263EF8348];
      int v13 = (const char *)objc_msgSend((id)objc_msgSend(v11, "name"), "UTF8String");
      AGCReplyArray::getDebugStringAvailableNames((std::string *)buf, a2);
      if (buf[23] >= 0) {
        uint64_t v14 = buf;
      }
      else {
        uint64_t v14 = *(const char **)buf;
      }
      fprintf(v12, "AGX: %s:%d:%s: *** Failed to find compiler reply with function name \"%s\". The available function names in the reply array are: %s.\n", "agxa_user_shader_factory_template.hpp", 82, "compileFunctionWithAirLinkedIntersectionFunction_Impl_block_invoke", v13, v14);
      if ((buf[23] & 0x80000000) != 0) {
        operator delete(*(void **)buf);
      }
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR))
      {
        uint64_t v25 = objc_msgSend((id)objc_msgSend(v11, "name"), "UTF8String");
        AGCReplyArray::getDebugStringAvailableNames(&__p, a2);
        uint64_t v26 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
            ? &__p
            : (std::string *)__p.__r_.__value_.__r.__words[0];
        *(_DWORD *)buf = 136316162;
        *(void *)&buf[4] = "agxa_user_shader_factory_template.hpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 82;
        *(_WORD *)&buf[18] = 2080;
        *(void *)&buf[20] = "compileFunctionWithAirLinkedIntersectionFunction_Impl_block_invoke";
        *(_WORD *)&buf[28] = 2080;
        *(void *)&buf[30] = v25;
        *(_WORD *)&buf[38] = 2080;
        uint64_t v39 = v26;
        _os_log_error_impl(&dword_2427AD000, &_os_log_internal, OS_LOG_TYPE_ERROR, "AGX: AGX: %s:%d:%s: *** Failed to find compiler reply with function name \"%s\". The available function names in the reply array are: %s.\n", buf, 0x30u);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
      }
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_INFO))
      {
        uint64_t v15 = objc_msgSend((id)objc_msgSend(v11, "name"), "UTF8String");
        AGCReplyArray::getDebugStringAvailableNames(&__p, a2);
        uint64_t v16 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
            ? &__p
            : (std::string *)__p.__r_.__value_.__r.__words[0];
        *(_DWORD *)buf = 136316162;
        *(void *)&buf[4] = "agxa_user_shader_factory_template.hpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 82;
        *(_WORD *)&buf[18] = 2080;
        *(void *)&buf[20] = "compileFunctionWithAirLinkedIntersectionFunction_Impl_block_invoke";
        *(_WORD *)&buf[28] = 2080;
        *(void *)&buf[30] = v15;
        *(_WORD *)&buf[38] = 2080;
        uint64_t v39 = v16;
        _os_log_impl(&dword_2427AD000, &_os_log_internal, OS_LOG_TYPE_INFO, "AGX: AGX: %s:%d:%s: *** Failed to find compiler reply with function name \"%s\". The available function names in the reply array are: %s.\n", buf, 0x30u);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
      }
      v31.i64[1] = 2;
      v32.i64[0] = @"Internal error during function compilation.";
    }
  }
  uint64_t v17 = v33;
  uint64_t v18 = v34;
  uint64_t v33 = 0;
  uint64_t v34 = 0;
  *(void *)buf = v17;
  *(void *)&buf[8] = v18;
  *(_OWORD *)&buf[24] = v36;
  long long v36 = 0uLL;
  *(void *)&buf[16] = 0;
  uint64_t v39 = v37;
  long long v37 = 0;
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  uint64_t v19 = *(void *)&buf[24];
  if (*(void *)&buf[24])
  {
    uint64_t v20 = *(void *)&buf[32];
    uint64_t v21 = *(void **)&buf[24];
    if (*(void *)&buf[32] != *(void *)&buf[24])
    {
      do
      {
        dispatch_release(*(dispatch_object_t *)(v20 - 24));

        *(void *)(v20 - 16) = 0;
        *(void *)(v20 - 8) = 0;
        v20 -= 80;
      }
      while (v20 != v19);
      uint64_t v21 = *(void **)&buf[24];
    }
    *(void *)&buf[32] = v19;
    operator delete(v21);
  }
  AGCDeserializedReply::~AGCDeserializedReply((AGCDeserializedReply *)v28);
  uint64_t v22 = v36;
  if ((void)v36)
  {
    uint64_t v23 = *((void *)&v36 + 1);
    uint64_t v24 = (void *)v36;
    if (*((void *)&v36 + 1) != (void)v36)
    {
      do
      {
        dispatch_release(*(dispatch_object_t *)(v23 - 24));

        *(void *)(v23 - 16) = 0;
        *(void *)(v23 - 8) = 0;
        v23 -= 80;
      }
      while (v23 != v22);
      uint64_t v24 = (void *)v36;
    }
    *((void *)&v36 + 1) = v22;
    operator delete(v24);
  }
}

void sub_2429EDA80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  AGCDeserializedReply::~AGCDeserializedReply((AGCDeserializedReply *)va);
  AGX::UserShaderFactory<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::DriverReplyDataImpl<true>::~DriverReplyDataImpl(v9 - 192);
  _Unwind_Resume(a1);
}

uint64_t ___ZN3AGX8Compiler14compileProgramINS_16ObjectProgramKeyE13AGCReplyArrayEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_RKNS_28CompileFunctionReplyMetadataEE_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  v11[0] = a3;
  v11[1] = a4;
  v11[2] = a5;
  v11[3] = a6;
  v11[4] = a7;
  v11[5] = a8;
  v11[6] = a9;
  v11[7] = a10;
  return (*(uint64_t (**)(void, uint64_t, void *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), a2, v11, a4, a5, a6, a7, a8);
}

void ___ZN3AGX8Compiler14compileProgramINS_16ObjectProgramKeyE13AGCReplyArrayEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  v14[0] = MEMORY[0x263EF8330];
  v14[1] = 3221225472;
  uint64_t v15 = ___ZN3AGX8Compiler14compileProgramINS_16ObjectProgramKeyE13AGCReplyArrayEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke_2;
  uint64_t v16 = &unk_26516F7E8;
  uint64_t v17 = a9;
  uint64_t v18 = a3;
  uint64_t v19 = a4;
  uint64_t v20 = a5;
  uint64_t v21 = a6;
  uint64_t v22 = a7;
  uint64_t v12 = a1 + 32;
  int8x16_t v10 = *(void **)(a1 + 32);
  uint64_t v11 = *(void *)(v12 + 8);
  uint64_t v23 = a8;
  uint64_t v24 = v11;
  uint64_t v25 = a2;
  uint64_t v26 = a10;
  if (objc_msgSend(v10, "sync", MEMORY[0x263EF8330], 3221225472))
  {
    v15(v14);
  }
  else
  {
    global_queue = dispatch_get_global_queue(0, 0);
    dispatch_async(global_queue, v14);
  }
}

uint64_t ___ZN3AGX8Compiler14compileProgramINS_16ObjectProgramKeyE13AGCReplyArrayEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke_3(uint64_t a1, void *a2)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), *a2);
}

uint64_t ___ZN3AGX8Compiler14compileProgramINS_16ObjectProgramKeyE13AGCReplyArrayEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke_4(uint64_t a1, void *a2)
{
  if (getTimebaseInfo(void)::once != -1) {
    dispatch_once(&getTimebaseInfo(void)::once, &__block_literal_global_7474);
  }
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), *a2);
}

void ___ZN3AGX8Compiler14compileProgramINS_16ObjectProgramKeyE13AGCReplyArrayEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke_2(void *a1)
{
  size_t size_ptr = 0;
  buffer_ptr = 0;
  uint64_t v2 = a1[12];
  v13[0] = 0;
  v13[1] = 0;
  *(_OWORD *)uint64_t v8 = 0u;
  *(_OWORD *)std::string __p = 0u;
  long long v10 = 0u;
  uint64_t v11 = 0;
  uint64_t v12 = v13;
  if (v2 || (uint64_t v4 = a1[5]) == 0)
  {
    uint64_t v3 = 0;
  }
  else
  {
    uint64_t v3 = dispatch_data_create_map(v4, (const void **)&buffer_ptr, &size_ptr);
    AGCReplyArray::deserialize((AGCReplyArray *)v8, buffer_ptr);
  }
  (*(void (**)(void, void **))(a1[11] + 16))(a1[11], v8);
  if (v3) {
    dispatch_release(v3);
  }
  uint64_t v5 = (void **)v8[0];
  uint64_t v6 = (void **)v8[1];
  while (v5 != v6)
  {
    uint64_t v7 = *v5;
    v5 += 2;
    free(v7);
  }
  std::__tree<std::__value_type<std::string,unsigned int>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned int>>>::destroy(v13[0]);
  if (__p[1])
  {
    *(void **)&long long v10 = __p[1];
    operator delete(__p[1]);
  }
  if (v8[0])
  {
    v8[1] = v8[0];
    operator delete(v8[0]);
  }
}

void sub_2429EDDE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  AGCReplyArray::~AGCReplyArray((AGCReplyArray *)va);
  _Unwind_Resume(a1);
}

void AGX::HAL200::ObjectProgramVariant::~ObjectProgramVariant(AGX::HAL200::ObjectProgramVariant *this)
{
  AGX::ObjectProgramVariant<AGX::HAL200::Encoders,AGX::HAL200::Classes>::~ObjectProgramVariant((unint64_t)this);

  JUMPOUT(0x24566ED90);
}

uint64_t ___ZN3AGX23UserCommonShaderFactoryINS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE37createObjectProgramPassThroughVariantI27MTLRenderPipelineDescriptorEEvPT_P18AGXG17FamilyDevicembbU13block_pointerFvPNS1_20ObjectProgramVariantE13ReflectionKey16MTLCompilerErrorP8NSStringE_block_invoke(uint64_t result, void *a2, uint64_t a3, __CFString *a4)
{
  if (!a3)
  {
    if (a2[33])
    {
      uint64_t v5 = a2 + 33;
      if (!a2[34]) {
        uint64_t v5 = a2 + 103;
      }
    }
    else
    {
      uint64_t v5 = a2 + 103;
    }
    uint64_t v7 = *v5;
    uint64_t v6 = v5[1];
    if (v7) {
      BOOL v8 = v6 == 0;
    }
    else {
      BOOL v8 = 1;
    }
    if (v8)
    {
      [*(id *)(result + 32) supportIndirectCommandBuffers];
      operator new();
    }
    a4 = @"Internal error during function compilation";
    a3 = 2;
  }
  *(void *)(*(void *)(*(void *)(result + 56) + 8) + 24) = a3;
  *(void *)(*(void *)(*(void *)(result + 64) + 8) + 40) = a4;
  return result;
}

void sub_2429EE044(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  AGX::ProgramBindingRemap<AGX::HAL200::Encoders,AGX::HAL200::Classes>::~ProgramBindingRemap((uint64_t)va);
  if (*(char *)(v5 - 73) < 0) {
    operator delete(*(void **)(v5 - 96));
  }
  MEMORY[0x24566ED90](v4, 0x10F3C4038D9C7E2);
  _Unwind_Resume(a1);
}

uint64_t ___ZN3AGX8Compiler14compileProgramINS_27PassthroughObjectProgramKeyEEEvRKT_P7NSArrayIPU27objcproto16MTLBinaryArchive11objc_objectEU13block_pointerFvRK20AGCDeserializedReply16MTLCompilerErrorP8NSStringEb_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a5) {
    AGX::Compiler::compileProgram<AGX::UserIntersectionProgramKey,AGCReplyArray>(AGX::UserIntersectionProgramKey const&,MTLCompileFunctionRequestData *,void({block_pointer})(AGCReplyArray const&,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,MTLCompilerError,NSString *,unsigned long long))::{lambda(void)#1}::operator()[abi:[AGX] Failed assertion __requestData.frameworkData && _requestData.pipelineOptions_]();
  }
  uint64_t v5 = *(uint64_t (**)(void))(*(void *)(a1 + 32) + 16);

  return v5();
}

void AGX::Compiler::compileProgram<AGX::PassthroughObjectProgramKey,AGCDeserializedReply>(void **a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v33 = *MEMORY[0x263EF8340];
  size_t v25 = 0;
  uint64_t v26 = 0;
  (*(void (**)(uint64_t, const void **, size_t *))(*(void *)a2 + 16))(a2, &v26, &v25);
  BOOL v8 = dispatch_data_create(v26, v25, 0, 0);
  [a3 setDriverKeyData:v8];
  if ([a3 airScript])
  {
    uint64_t v23 = 0;
    size_t v24 = 0;
    dispatch_object_t object = dispatch_data_create_map((dispatch_data_t)[a3 airScript], (const void **)&v23, &v24);
    uint64_t v9 = v23;
    uint64_t v10 = *v23;
    CC_SHA256_Init(&c);
    (**(void (***)(uint64_t, CC_SHA256_CTX *))a2)(a2, &c);
    *(void *)len = 0;
    data = 0;
    if (AGX::GetSerializedVertexFormat((AGX *)((char *)v9 + v10), &data, (size_t *)len, v11, v12))
    {
      int v13 = data;
      CC_SHA256_Update(&c, data, len[0]);
      free(v13);
    }
    CC_SHA256_Final(md, &c);
    dispatch_release(object);
    v30[0] = *(_OWORD *)md;
    v30[1] = v32;
    [a3 setVendorPluginFunctionId:v30];
  }
  v21[0] = MEMORY[0x263EF8330];
  v21[1] = 3221225472;
  v21[2] = ___ZN3AGX8Compiler14compileProgramINS_27PassthroughObjectProgramKeyE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke;
  v21[3] = &unk_26516F810;
  v21[4] = a3;
  v21[5] = a4;
  if ([a3 function])
  {
    uint64_t v14 = mach_absolute_time();
    uint64_t v15 = *a1;
    v19[0] = MEMORY[0x263EF8330];
    v19[1] = 3221225472;
    v19[2] = ___ZN3AGX8Compiler14compileProgramINS_27PassthroughObjectProgramKeyE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke_4;
    v19[3] = &unk_26516F860;
    v19[4] = v21;
    v19[5] = v14;
    [v15 compileFunctionRequest:a3 completionHandler:v19];
  }
  else
  {
    if ([a3 frameworkData] || objc_msgSend(a3, "pipelineOptions")) {
      AGX::Compiler::compileProgram<AGX::UserIntersectionProgramKey,AGCReplyArray>(AGX::UserIntersectionProgramKey const&,MTLCompileFunctionRequestData *,void({block_pointer})(AGCReplyArray const&,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,MTLCompilerError,NSString *,unsigned long long))::{lambda(void)#1}::operator()[abi:[AGX] Failed assertion __requestData.frameworkData && _requestData.pipelineOptions_]();
    }
    v20[0] = MEMORY[0x263EF8330];
    v20[1] = 3221225472;
    v20[2] = ___ZN3AGX8Compiler14compileProgramINS_27PassthroughObjectProgramKeyE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke_3;
    v20[3] = &unk_26516F838;
    v20[4] = v21;
    BOOL v16 = objc_msgSend((id)objc_msgSend(a3, "binaryArchives"), "count") == 0;
    uint64_t v17 = *a1;
    uint64_t v18 = [a3 driverKeyData];
    if (v16) {
      objc_msgSend(v17, "compileRequest:pipelineCache:sync:completionHandler:", v18, objc_msgSend(a3, "pipelineCache"), objc_msgSend(a3, "sync"), v20);
    }
    else {
      objc_msgSend(v17, "compileRequest:binaryArchives:failOnBinaryArchiveMiss:pipelineCache:sync:completionHandler:", v18, objc_msgSend(a3, "binaryArchives"), 0, objc_msgSend(a3, "pipelineCache"), objc_msgSend(a3, "sync"), v20);
    }
  }
  dispatch_release(v8);
}

void sub_2429EE424(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,dispatch_object_t object)
{
}

uint64_t ProgramKey<(_AGCStreamToken)26,(AGX::DriverShaderCompilationMode)1>::getSupportIndirectCommandBuffers()
{
  return 0;
}

uint64_t ProgramKey<(_AGCStreamToken)26,(AGX::DriverShaderCompilationMode)1>::isPrecompiledToBinaryArchive()
{
  return 0;
}

uint64_t ProgramKey<(_AGCStreamToken)26,(AGX::DriverShaderCompilationMode)1>::isPrecompiledToPipelineCache()
{
  return 1;
}

void ProgramKey<(_AGCStreamToken)26,(AGX::DriverShaderCompilationMode)1>::serialize(uint64_t a1, void *a2, void *a3)
{
  uint64_t v6 = *(int **)(a1 + 16);
  *(void *)(a1 + 24) = v6;
  int v7 = *(unsigned __int8 *)(a1 + 8) | 0x100;
  unint64_t v8 = *(void *)(a1 + 32);
  if ((unint64_t)v6 >= v8)
  {
    uint64_t v10 = v8 - (void)v6;
    uint64_t v11 = v10 >> 1;
    if ((unint64_t)(v10 >> 1) <= 1) {
      uint64_t v11 = 1;
    }
    BOOL v12 = (unint64_t)v10 >= 0x7FFFFFFFFFFFFFFCLL;
    unint64_t v13 = 0x3FFFFFFFFFFFFFFFLL;
    if (!v12) {
      unint64_t v13 = v11;
    }
    if (v13 >> 62) {
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
    uint64_t v14 = v13;
    uint64_t v15 = operator new(4 * v13);
    BOOL v16 = &v15[v14];
    _DWORD *v15 = v7;
    uint64_t v9 = v15 + 1;
    *(void *)(a1 + 16) = v15;
    *(void *)(a1 + 24) = v15 + 1;
    *(void *)(a1 + 32) = v16;
    if (v6) {
      operator delete(v6);
    }
  }
  else
  {
    *uint64_t v6 = v7;
    uint64_t v9 = v6 + 1;
  }
  *(void *)(a1 + 24) = v9;
  ProgramKey<(_AGCStreamToken)8,(AGX::DriverShaderCompilationMode)0>::finalizeStream((void *)a1);
  *a2 = *(void *)(a1 + 16);
  *a3 = *(void *)(a1 + 24) - *(void *)(a1 + 16);
}

uint64_t ProgramKey<(_AGCStreamToken)26,(AGX::DriverShaderCompilationMode)1>::legalizeStateForTargetOS()
{
  return 1;
}

void ___ZN3AGX8Compiler14compileProgramINS_27PassthroughObjectProgramKeyE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  v14[0] = MEMORY[0x263EF8330];
  v14[1] = 3221225472;
  uint64_t v15 = ___ZN3AGX8Compiler14compileProgramINS_27PassthroughObjectProgramKeyE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke_2;
  BOOL v16 = &unk_26516F7E8;
  uint64_t v17 = a9;
  uint64_t v18 = a3;
  uint64_t v19 = a4;
  uint64_t v20 = a5;
  uint64_t v21 = a6;
  uint64_t v22 = a7;
  uint64_t v12 = a1 + 32;
  uint64_t v10 = *(void **)(a1 + 32);
  uint64_t v11 = *(void *)(v12 + 8);
  uint64_t v23 = a8;
  uint64_t v24 = v11;
  uint64_t v25 = a2;
  uint64_t v26 = a10;
  if (objc_msgSend(v10, "sync", MEMORY[0x263EF8330], 3221225472))
  {
    v15(v14);
  }
  else
  {
    global_queue = dispatch_get_global_queue(0, 0);
    dispatch_async(global_queue, v14);
  }
}

uint64_t ___ZN3AGX8Compiler14compileProgramINS_27PassthroughObjectProgramKeyE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke_3(uint64_t a1, void *a2)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), *a2);
}

uint64_t ___ZN3AGX8Compiler14compileProgramINS_27PassthroughObjectProgramKeyE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke_4(uint64_t a1, void *a2)
{
  if (getTimebaseInfo(void)::once != -1) {
    dispatch_once(&getTimebaseInfo(void)::once, &__block_literal_global_7474);
  }
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), *a2);
}

void ___ZN3AGX8Compiler14compileProgramINS_27PassthroughObjectProgramKeyE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke_2(void *a1)
{
  size_t size_ptr = 0;
  buffer_ptr = 0;
  uint64_t v2 = a1[12];
  AGCDeserializedReply::AGCDeserializedReply((AGCDeserializedReply *)v5);
  if (v2 || (uint64_t v4 = a1[5]) == 0)
  {
    uint64_t v3 = 0;
  }
  else
  {
    uint64_t v3 = dispatch_data_create_map(v4, (const void **)&buffer_ptr, &size_ptr);
    AGCDeserializedReply::deserialize((AGCDeserializedReply *)v5, buffer_ptr, size_ptr);
  }
  (*(void (**)(void, unsigned char *))(a1[11] + 16))(a1[11], v5);
  if (v3) {
    dispatch_release(v3);
  }
  AGCDeserializedReply::~AGCDeserializedReply((AGCDeserializedReply *)v5);
}

void sub_2429EE7C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  AGCDeserializedReply::~AGCDeserializedReply((AGCDeserializedReply *)va);
  _Unwind_Resume(a1);
}

void AGX::PassthroughObjectProgramKey::serialize(std::vector<unsigned int> *this, unsigned int **a2, unint64_t *a3)
{
  p_end_cap = (std::vector<unsigned int> *)&this->__end_cap_;
  value = this->__end_cap_.__value_;
  this[1].__begin_ = value;
  int v8 = LOBYTE(this->__end_) | 0x100;
  std::vector<unsigned int>::pointer end = this[1].__end_;
  if (value >= end)
  {
    uint64_t v11 = (char *)end - (char *)value;
    uint64_t v12 = v11 >> 1;
    if ((unint64_t)(v11 >> 1) <= 1) {
      uint64_t v12 = 1;
    }
    BOOL v13 = (unint64_t)v11 >= 0x7FFFFFFFFFFFFFFCLL;
    unint64_t v14 = 0x3FFFFFFFFFFFFFFFLL;
    if (!v13) {
      unint64_t v14 = v12;
    }
    if (v14 >> 62) {
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
    uint64_t v15 = v14;
    BOOL v16 = (unsigned int *)operator new(4 * v14);
    *BOOL v16 = v8;
    uint64_t v10 = v16 + 1;
    this->__end_cap_.__value_ = v16;
    this[1].__begin_ = v16 + 1;
    this[1].__end_ = &v16[v15];
    if (value)
    {
      operator delete(value);
      value = p_end_cap->__begin_;
    }
    else
    {
      value = v16;
    }
  }
  else
  {
    unsigned int *value = v8;
    uint64_t v10 = value + 1;
  }
  this[1].__begin_ = v10;
  uint64_t v17 = v10 - value;
  if ((unint64_t)((char *)v10 - (char *)value) > 0xFFFFFFFFFFFFFFF7)
  {
    begin = &value[v17 + 2];
    this[1].__begin_ = begin;
  }
  else
  {
    std::vector<unsigned int>::__append(p_end_cap, 2uLL);
    value = this->__end_cap_.__value_;
    begin = this[1].__begin_;
  }
  uint64_t v19 = &value[v17];
  *uint64_t v19 = ((begin - value) >> 2 << 8) | 0x58;
  v19[1] = this[1].__end_cap_.__value_;
  ProgramKey<(_AGCStreamToken)8,(AGX::DriverShaderCompilationMode)0>::finalizeStream(this);
  *a2 = this->__end_cap_.__value_;
  *a3 = (char *)this[1].__begin_ - (char *)this->__end_cap_.__value_;
}

void ___ZN3AGX23UserCommonShaderFactoryINS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE36populateRenderPipelineDescriptorInfoI27MTLRenderPipelineDescriptorEEbRNS5_28RenderPipelineDescriptorInfoEPT_mP18AGXG17FamilyDeviceRP7NSError_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*(void *)v2)
  {
    uint64_t v3 = [*(id *)v2 vendorPrivate];
    uint64_t v4 = (AGXG17FamilyComputeOrFragmentOrTileProgram *)v3;
    if (v3)
    {
      frag = *(AGXG17FamilyFragmentProgram **)(v3 + 16);
      if (frag)
      {
LABEL_5:
        *(void *)(*(void *)(a1 + 32) + 32) = &frag->_impl;
        uint64_t v2 = *(void *)(a1 + 32);
        goto LABEL_6;
      }
    }
    else
    {
      uint64_t v4 = objc_alloc_init(AGXG17FamilyComputeOrFragmentOrTileProgram);
      [**(id **)(a1 + 32) setVendorPrivate:v4];

      frag = v4->_frag;
      if (frag) {
        goto LABEL_5;
      }
    }
    frag = objc_alloc_init(AGXG17FamilyFragmentProgram);
    v4->_frag = frag;
    goto LABEL_5;
  }
LABEL_6:
  uint64_t v6 = *(void **)(v2 + 16);
  if (v6)
  {
    int v7 = (AGXG17FamilyMeshProgram *)[v6 vendorPrivate];
    if (!v7)
    {
      int v7 = objc_alloc_init(AGXG17FamilyMeshProgram);
      [*(id *)(*(void *)(a1 + 32) + 16) setVendorPrivate:v7];
    }
    *(void *)(*(void *)(a1 + 32) + 48) = &v7->_impl;
    int v8 = *(void **)(*(void *)(a1 + 32) + 24);
    if (v8)
    {
      uint64_t v9 = (AGXG17FamilyObjectProgram *)[v8 vendorPrivate];
      if (!v9)
      {
        uint64_t v9 = objc_alloc_init(AGXG17FamilyObjectProgram);
        [*(id *)(*(void *)(a1 + 32) + 24) setVendorPrivate:v9];
      }
      *(void *)(*(void *)(a1 + 32) + 56) = &v9->_impl;
    }
  }
  else
  {
    uint64_t v10 = (AGXG17FamilyVertexProgram *)[*(id *)(v2 + 8) vendorPrivate];
    if (!v10)
    {
      uint64_t v10 = objc_alloc_init(AGXG17FamilyVertexProgram);
      [*(id *)(*(void *)(a1 + 32) + 8) setVendorPrivate:v10];
    }
    *(void *)(*(void *)(a1 + 32) + 40) = &v10->_impl;
  }
}

uint64_t AGX::UserCommonShaderFactory<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::createRenderPipeline<MTLMeshRenderPipelineDescriptor>(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7)
{
  v22[19] = *(id *)MEMORY[0x263EF8340];
  mach_absolute_time();
  _MTLCompilePerformanceStatisticsEnabled();
  if (a6)
  {
    *a6 = 0;
    if (a2)
    {
      v22[0] = 0;
      if (![a2 validateWithDevice:a3 error:v22])
      {
        uint64_t v11 = [v22[0] localizedDescription];
        uint64_t v12 = [NSDictionary dictionaryWithObject:v11 forKey:*MEMORY[0x263F08320]];
        id v13 = (id)[objc_alloc(MEMORY[0x263F087E8]) initWithDomain:@"AGXMetalG17P" code:2 userInfo:v12];
        if (!a7)
        {
          *a6 = v13;
          return 0;
        }
LABEL_5:
        (*(void (**)(uint64_t, void, void, id))(a7 + 16))(a7, 0, 0, v13);
        return 0;
      }
      goto LABEL_8;
    }
    uint64_t v14 = [NSDictionary dictionaryWithObject:@"pipeline descriptor is nil" forKey:*MEMORY[0x263F08320]];
    id v15 = (id)[objc_alloc(MEMORY[0x263F087E8]) initWithDomain:@"AGXMetalG17P" code:2 userInfo:v14];
    id v16 = v15;
    if (!a7)
    {
      *a6 = v15;
      return a7;
    }
LABEL_15:
    (*(void (**)(uint64_t, void, void, id))(a7 + 16))(a7, 0, 0, v16);
    return 0;
  }
  if (a2)
  {
    v22[0] = 0;
    if (![a2 validateWithDevice:a3 error:v22])
    {
      uint64_t v19 = [v22[0] localizedDescription];
      uint64_t v20 = [NSDictionary dictionaryWithObject:v19 forKey:*MEMORY[0x263F08320]];
      id v13 = (id)[objc_alloc(MEMORY[0x263F087E8]) initWithDomain:@"AGXMetalG17P" code:2 userInfo:v20];
      if (!a7) {
        return 0;
      }
      goto LABEL_5;
    }
LABEL_8:
    if (a7) {
      [a2 copy];
    }
    operator new();
  }
  uint64_t v17 = [NSDictionary dictionaryWithObject:@"pipeline descriptor is nil" forKey:*MEMORY[0x263F08320]];
  id v18 = (id)[objc_alloc(MEMORY[0x263F087E8]) initWithDomain:@"AGXMetalG17P" code:2 userInfo:v17];
  if (a7)
  {
    id v16 = v18;
    goto LABEL_15;
  }
  return a7;
}

void sub_2429EF3B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
}

uint64_t AGX::UserCommonShaderFactory<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::populateRenderPipelineDescriptorInfo<MTLMeshRenderPipelineDescriptor>(uint64_t a1, uint64_t *a2, void *a3, uint64_t a4, void *a5, uint64_t a6)
{
  *a2 = [a3 fragmentFunction];
  a2[3] = [a3 objectFunction];
  uint64_t v12 = [a3 meshFunction];
  a2[2] = v12;
  if (v12)
  {
    uint64_t v13 = [a3 newSerializedMeshDataWithFlags:540 options:0 error:a6];
    uint64_t v14 = a2[10];
    if (v14 != v13)
    {
      if (v14) {
        dispatch_release(v14);
      }
      a2[10] = v13;
    }
    if (!v13) {
      return 0;
    }
    uint64_t v15 = [a3 newSerializedObjectDataWithFlags:540 options:0 error:a6];
    id v16 = a2[11];
    if (v16 != v15)
    {
      if (v16) {
        dispatch_release(v16);
      }
      a2[11] = v15;
    }
    if (!v15) {
      return 0;
    }
  }
  else if (!a2[9])
  {
    return 0;
  }
  uint64_t v17 = [a3 newSerializedFragmentDataWithFlags:540 options:a4 error:0];
  id v18 = a2[8];
  if (v18 != v17)
  {
    if (v18) {
      dispatch_release(v18);
    }
    a2[8] = v17;
  }
  AGX::UserShaderFactory<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::loadDynamicLibrariesForFunctions(&v26, a5, *a2, (void *)[a3 fragmentLinkedFunctions], objc_msgSend(a3, "fragmentPreloadedLibraries"), a6);
  uint64_t v19 = (void *)a2[12];
  a2[12] = v26;

  if (a2[12])
  {
    uint64_t v20 = a2[2];
    if (!v20) {
      goto LABEL_22;
    }
    AGX::UserShaderFactory<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::loadDynamicLibrariesForFunctions(&v26, a5, v20, (void *)[a3 meshLinkedFunctions], objc_msgSend(a3, "meshPreloadedLibraries"), a6);
    uint64_t v21 = (void *)a2[14];
    a2[14] = v26;

    if (a2[14])
    {
      AGX::UserShaderFactory<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::loadDynamicLibrariesForFunctions(&v26, a5, a2[3], (void *)[a3 objectLinkedFunctions], objc_msgSend(a3, "objectPreloadedLibraries"), a6);
      uint64_t v22 = (void *)a2[15];
      a2[15] = v26;

      if (a2[15])
      {
LABEL_22:
        uint64_t v23 = *(NSObject **)(a1 + 16);
        v25[0] = MEMORY[0x263EF8330];
        v25[1] = 3221225472;
        v25[2] = ___ZN3AGX23UserCommonShaderFactoryINS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE36populateRenderPipelineDescriptorInfoI31MTLMeshRenderPipelineDescriptorEEbRNS5_28RenderPipelineDescriptorInfoEPT_mP18AGXG17FamilyDeviceRP7NSError_block_invoke;
        v25[3] = &__block_descriptor_40_e5_v8__0l;
        v25[4] = a2;
        dispatch_sync(v23, v25);
        return 1;
      }
    }
  }
  return 0;
}

void ___ZN3AGX23UserCommonShaderFactoryINS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE20createRenderPipelineI31MTLMeshRenderPipelineDescriptorEEP26AGXG17FamilyRenderPipelinePT_P18AGXG17FamilyDevicemPP27MTLRenderPipelineReflectionPP7NSErrorU13block_pointerFvPU33objcproto22MTLRenderPipelineState11objc_objectSF_SI_E_block_invoke(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  uint64_t v9 = *(void *)(a1 + 64);
  uint64_t v8 = *(void *)(a1 + 72);
  uint64_t v15 = v9;
  if (v8)
  {
    uint64_t v10 = AGX::UserCommonShaderFactory<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::RenderPipelineDescriptorInfo::~RenderPipelineDescriptorInfo(v8);
    MEMORY[0x24566ED90](v10, 0xA0C402B819244);
  }
  *(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) = a2;
  uint64_t v11 = *(void **)(*(void *)(*(void *)(a1 + 56) + 8) + 40);
  if (v11)
  {
    uint64_t v12 = v11[19];
    if (v12 && v11[18] && *(unsigned char *)(v12 + 3568)) {
      ProgramVaryingTable<AGX::HAL200::Encoders,AGX::HAL200::Classes>::clone();
    }
    AGX::RenderPipeline<AGX::HAL200::ObjClasses,AGX::HAL200::Classes,AGX::HAL200::Encoders>::finalize<MTLMeshRenderPipelineDescriptor>((uint64_t)(v11 + 18), *(void **)(a1 + 32), v11, *(void **)(a1 + 40));
  }
  if (([*(id *)(a1 + 32) requiresRaytracingEmulation] & 1) == 0
    && a2
    && !a4
    && [*(id *)(a1 + 40) supportIndirectCommandBuffers])
  {
    AGX::RayPayloadSizeAlignImpl<AGX::HAL200::Classes>::merge((unsigned int *)(v15 + 24), (unsigned int *)(*(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) + 2952));
  }
  uint64_t v13 = *(void *)(a1 + 48);
  if (v13)
  {
    (*(void (**)(uint64_t, void *, void *, uint64_t))(v13 + 16))(v13, a2, a3, a4);

    *(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) = 0;
  }
  uint64_t v14 = *(void **)(a1 + 80);
  if (v14) {
    *uint64_t v14 = a4;
  }
  if (*(void *)(a1 + 88)) {
    **(void **)(a1 + 88) = a3;
  }
}

void ___ZN3AGX23UserCommonShaderFactoryINS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE34createGeometryStageAndLinkPipelineI31MTLMeshRenderPipelineDescriptorLb0EEEvPKNS5_28RenderPipelineDescriptorInfoEPNS1_22FragmentProgramVariantE13ReflectionKeyP18AGXG17FamilyDevicePT_mbbyP19NSMutableDictionaryP25AGXG17FamilyBinaryArchivePU27objcproto16OS_dispatch_data8NSObjectU13block_pointerFvPU33objcproto22MTLRenderPipelineState11objc_objectP27MTLRenderPipelineReflectionP7NSErrorE_block_invoke(uint64_t a1, uint64_t a2, long long *a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v36 = *MEMORY[0x263EF8340];
  if (a2)
  {
    int v7 = *(void **)(a1 + 32);
    uint64_t v8 = *(os_unfair_lock_s **)(a1 + 40);
    uint64_t v9 = *(void ****)(a1 + 72);
    unint64_t v10 = *(void *)(a1 + 80);
    uint64_t v11 = *(void *)(a1 + 48);
    __int16 v12 = *(_WORD *)(a2 + 3514);
    unsigned __int8 v13 = *(unsigned char *)(a1 + 112);
    v23[0] = MEMORY[0x263EF8330];
    v23[1] = 3221225472;
    long long v26 = *(_OWORD *)(a1 + 88);
    uint64_t v14 = *(os_unfair_lock_s **)(v26 + 120);
    uint64_t v15 = *(void **)(v26 + 24);
    id v16 = *(NSObject **)(v26 + 88);
    long long v30 = *(_OWORD *)(a1 + 113);
    long long v31 = *(_OWORD *)(a1 + 129);
    long long v17 = a3[1];
    long long v32 = *a3;
    v23[2] = ___ZN3AGX23UserCommonShaderFactoryINS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE34createGeometryStageAndLinkPipelineI31MTLMeshRenderPipelineDescriptorLb0EEEvPKNS5_28RenderPipelineDescriptorInfoEPNS1_22FragmentProgramVariantE13ReflectionKeyP18AGXG17FamilyDevicePT_mbbyP19NSMutableDictionaryP25AGXG17FamilyBinaryArchivePU27objcproto16OS_dispatch_data8NSObjectU13block_pointerFvPU33objcproto22MTLRenderPipelineState11objc_objectP27MTLRenderPipelineReflectionP7NSErrorE_block_invoke_2;
    v23[3] = &unk_26516EB88;
    uint64_t v25 = v9;
    uint64_t v27 = a2;
    unint64_t v28 = v10;
    long long v33 = v17;
    v23[4] = v8;
    v23[5] = v7;
    unsigned __int8 v34 = v13;
    char v35 = *(unsigned char *)(a1 + 145);
    uint64_t v29 = *(void *)(a1 + 104);
    v23[6] = a4;
    long long v24 = *(_OWORD *)(a1 + 56);
    AGX::UserCommonShaderFactory<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::createUserOrPassthroughObjectProgramVariant<MTLMeshRenderPipelineDescriptor>(v9, v7, v8, v10, v11, a7, v14, v15, v16, v12, HIBYTE(v12), v13, (uint64_t)v23);
  }
  else
  {
    uint64_t v18 = *(void *)(a1 + 64);
    if (a5 > 3) {
      uint64_t v19 = 5;
    }
    else {
      uint64_t v19 = qword_242EAA188[a5];
    }
    uint64_t v20 = [NSDictionary dictionaryWithObject:a6 forKey:*MEMORY[0x263F08320]];
    id v21 = (id)[objc_alloc(MEMORY[0x263F087E8]) initWithDomain:@"AGXMetalG17P" code:v19 userInfo:v20];
    if (v18)
    {
      uint64_t v22 = *(void (**)(uint64_t, void, void, id))(v18 + 16);
      v22(v18, 0, 0, v21);
    }
  }
}

void AGX::UserCommonShaderFactory<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::createMeshProgramVariant<MTLMeshRenderPipelineDescriptor>(void ***a1, void *a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, os_unfair_lock_s *a8, uint64_t a9, NSObject *a10, unsigned __int8 a11, uint64_t a12)
{
  uint64_t v91 = *MEMORY[0x263EF8340];
  v58[0] = 0;
  v58[1] = v58;
  v58[2] = 0x3052000000;
  v58[3] = __Block_byref_object_copy_;
  v58[4] = __Block_byref_object_dispose_;
  v58[5] = 0;
  uint64_t v41 = [a2 meshFunction];
  if (a9)
  {
    uint64_t v17 = [a2 objectFunction];
    if (*(char *)(a9 + 3343) < 0) {
      std::string::__init_copy_ctor_external(&v53, *(const std::string::value_type **)(a9 + 3320), *(void *)(a9 + 3328));
    }
    else {
      std::string v53 = *(std::string *)(a9 + 3320);
    }
    if (*(char *)(a9 + 3367) < 0) {
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a9 + 3344), *(void *)(a9 + 3352));
    }
    else {
      std::string __p = *(std::string *)(a9 + 3344);
    }
    char v55 = *(unsigned char *)(a9 + 3368);
    AGX::UserProgramKeyFactory<AGX::HAL200::Classes,AGX::HAL200::Encoders>::CreateMeshProgramKey<MTLMeshRenderPipelineDescriptor>((uint64_t)&v56, a2, a10, a7, v17 == 0, (uint64_t)&v53, *(unsigned __int8 *)(a9 + 3385));
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__p.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v53.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_19;
      }
    }
    else if ((SHIBYTE(v53.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_19;
    }
    uint64_t v18 = &v53;
  }
  else
  {
    uint64_t v52 = 0;
    *(_OWORD *)char v50 = 0u;
    long long v51 = 0u;
    long long v49 = 0u;
    AGX::UserProgramKeyFactory<AGX::HAL200::Classes,AGX::HAL200::Encoders>::CreateMeshProgramKey<MTLMeshRenderPipelineDescriptor>((uint64_t)&v56, a2, a10, a7, [a2 objectFunction] == 0, (uint64_t)&v49, 0);
    if (SHIBYTE(v51) < 0)
    {
      operator delete(v50[1]);
      if ((SHIBYTE(v50[0]) & 0x80000000) == 0) {
        goto LABEL_19;
      }
    }
    else if ((SHIBYTE(v50[0]) & 0x80000000) == 0)
    {
      goto LABEL_19;
    }
    uint64_t v18 = (std::string *)&v49;
  }
  operator delete(v18->__r_.__value_.__l.__data_);
LABEL_19:
  v19.unint64_t key = ((*(_DWORD *)(a3[101] + 7288) << 29) & 0x40000000 | v56.cs.common.key & 0x8BFFFEFF | (*(unsigned __int8 *)(a3[101] + 7440) << 26)) ^ 0x40000000;
  v56.cs.common = v19;
  v56.cs.var0.key &= ~0x200u;
  uint64_t v57 = a4 & 0xC00C0000;
  if ((a4 & 0x40000) != 0)
  {
    if (AGX::isTelemetryEnabled(void)::once != -1) {
      dispatch_once(&AGX::isTelemetryEnabled(void)::once, &__block_literal_global_6424);
    }
    int v20 = 1;
    v19.char var0 = ($CBEC0DC0C06941078BCF76921B43C9FE)v56.cs.common;
  }
  else
  {
    int v20 = 0;
  }
  uint64_t v37 = a6;
  v56.cs.common.unint64_t key = v20 | (a4 >> 21) & 8 | v19.key & 0xFFFFFFF4;
  ReflectionKey::initGPUCompilerSPIOptionsHash((uint64_t)&v81, (void *)[a2 gpuCompilerSPIOptions]);
  long long v79 = v81;
  long long v80 = v82;
  char v48 = 0;
  unint64_t CompileOptions = AGX::Program<AGX::HAL200::MeshProgramVariant,AGX::MeshProgramKey,AGX::HAL200::IndirectArgumentLayout,AGXG17FamilyIndirectArgumentBufferLayout>::getOrCreateCompileOptions((uint64_t)a8, a4 | 3, (uint64_t)&v79);
  uint64_t v47 = (NSObject **)AGX::Program<AGX::HAL200::MeshProgramVariant,AGX::MeshProgramKey,AGX::HAL200::IndirectArgumentLayout,AGXG17FamilyIndirectArgumentBufferLayout>::getOrCreateVariantEntry(a8, (uint64_t)&v56, &v48, CompileOptions, a5 != 0);
  BOOL v44 = a8;
  if (v48)
  {
    unint64_t mutableBuffers = v56.cs.mutableBuffers;
    char var0 = v56.geometry_buffer_desc.__r_.var0;
    uint64_t v21 = objc_msgSend((id)objc_msgSend(a2, "pipelineLibrary"), "pipelineCache");
    uint64_t v22 = (void *)[a2 pipelineLibrary];
    if ([v22 pipelineCache] && (objc_msgSend(v22, "disableRunTimeCompilation") & 1) != 0) {
      LOBYTE(v23) = 1;
    }
    else {
      unsigned int v23 = (objc_msgSend((id)objc_msgSend(a2, "binaryArchives"), "count") != 0) & (a4 >> 2);
    }
    char v34 = v23;
    if (*(_DWORD *)*MEMORY[0x263F4B1E8]) {
      IOGPUDeviceTraceEvent();
    }
    long long v24 = objc_opt_new();
    [v24 setSync:a11 ^ 1u];
    [v24 setFunction:v41];
    [v24 setFrameworkData:a10];
    [v24 setPipelineCache:v21];
    [v24 setDestinationBinaryArchive:a5];
    [v24 setArchiverId:v37];
    objc_msgSend(v24, "setBinaryArchives:", objc_msgSend(a2, "binaryArchives"));
    [v24 setPipelineOptions:a4 | 3];
    if ((a4 & 0x330003) == 0) {
      objc_msgSend(v24, "setPipelineOptions:", objc_msgSend(v24, "pipelineOptions") | 0x8000);
    }
    uint64_t v25 = [a2 newPipelineScript];
    if (v25)
    {
      [v24 setAirScript:v25];
      dispatch_release(v25);
    }
    objc_msgSend(v24, "setGpuCompilerSPIOptions:", objc_msgSend(a2, "gpuCompilerSPIOptions"));
    long long v26 = (void *)[a2 meshLinkedFunctions];
    objc_msgSend(v24, "setVisibleFunctions:", objc_msgSend(v26, "functions"));
    objc_msgSend(v24, "setVisibleFunctionGroups:", objc_msgSend(v26, "groups"));
    objc_msgSend(v24, "setPrivateVisibleFunctions:", objc_msgSend(v26, "privateFunctions"));
    uint64_t v43 = [a2 maxMeshCallStackDepth];
    uint64_t v27 = (void *)[a2 meshLinkedFunctions];
    char v39 = [a2 supportIndirectCommandBuffers];
    char v38 = [a2 supportAddingMeshBinaryFunctions];
    uint64_t v33 = [a2 gpuCompilerSPIOptions];
    char v28 = [a3 requiresRaytracingEmulation];
    v73[0] = MEMORY[0x263EF8330];
    v73[1] = 3221225472;
    long long v76 = v79;
    v73[2] = ___ZN3AGX23UserCommonShaderFactoryINS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE24createMeshProgramVariantI31MTLMeshRenderPipelineDescriptorEEvPT_P18AGXG17FamilyDevicemP25AGXG17FamilyBinaryArchivePU27objcproto16OS_dispatch_data8NSObjectP7NSArrayPNS1_11MeshProgramEPNS1_22FragmentProgramVariantESG_bU13block_pointerFvPNS1_18MeshProgramVariantE13ReflectionKeyP19NSMutableDictionary16MTLCompilerErrorP8NSStringSG_E_block_invoke;
    v73[3] = &unk_26516EEC8;
    unsigned __int8 v74 = a11;
    v73[8] = a1;
    v73[9] = v47;
    char v75 = var0 & 1;
    v73[10] = v44;
    v73[11] = CompileOptions;
    long long v77 = v80;
    v73[4] = v41;
    v73[5] = a3;
    v73[6] = a2;
    v73[7] = v58;
    v73[12] = a9;
    v73[13] = mutableBuffers;
    char v78 = v34;
    if ((v28 & 1) == 0
      && AGX::UserShaderFactory<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::hasAirLinkedIntersectionFunction(v27))
    {
      LOBYTE(v81) = v28;
      *((void *)&v81 + 1) = v43;
      long long v82 = (unint64_t)v27;
      long long v83 = 0;
      uint64_t v84 = a4;
      v85 = a7;
      uint64_t v86 = a3;
      uint64_t v87 = 0;
      char v88 = v39;
      char v89 = v38;
      uint64_t v90 = v33;
      AGX::UserShaderFactory<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::compileFunctionWithAirLinkedIntersectionFunction_Impl<AGX::MeshProgramKey,true>(a1, (uint64_t)&v56, v24, &v81, (uint64_t)v73);
    }
    else
    {
      uint64_t v29 = *a1;
      v59[0] = MEMORY[0x263EF8330];
      v59[1] = 3221225472;
      v59[2] = ___ZN3AGX17UserShaderFactoryINS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE20compileFunction_ImplINS_14MeshProgramKeyEEEvRKT_P29MTLCompileFunctionRequestDataRKNS5_21DriverRequestDataImplILb1EEEU13block_pointerFvRK20AGCDeserializedReplyRKNS_28CompileFunctionReplyMetadataERKNS5_19DriverReplyDataImplILb1EEEE_block_invoke;
      v59[3] = &unk_26516F018;
      v59[4] = v73;
      *(void *)&long long v81 = MEMORY[0x263EF8330];
      *((void *)&v81 + 1) = 3221225472;
      *(void *)&long long v82 = ___ZN3AGX8Compiler14compileProgramINS_14MeshProgramKeyE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_RKNS_28CompileFunctionReplyMetadataEE_block_invoke;
      *((void *)&v82 + 1) = &unk_26516F7C0;
      long long v83 = v59;
      AGX::Compiler::compileProgram<AGX::MeshProgramKey,AGCDeserializedReply>(v29, (uint64_t)&v56, v24, (uint64_t)&v81);
    }
  }
  else if ((CompileOptions & 0x330003) != 0)
  {
    long long v30 = *a1;
    v70[0] = MEMORY[0x263EF8330];
    v70[1] = 3221225472;
    v70[2] = ___ZN3AGX23UserCommonShaderFactoryINS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE24createMeshProgramVariantI31MTLMeshRenderPipelineDescriptorEEvPT_P18AGXG17FamilyDevicemP25AGXG17FamilyBinaryArchivePU27objcproto16OS_dispatch_data8NSObjectP7NSArrayPNS1_11MeshProgramEPNS1_22FragmentProgramVariantESG_bU13block_pointerFvPNS1_18MeshProgramVariantE13ReflectionKeyP19NSMutableDictionary16MTLCompilerErrorP8NSStringSG_E_block_invoke_2;
    v70[3] = &unk_26516EEF0;
    v70[5] = a8;
    v70[6] = CompileOptions;
    long long v71 = v79;
    long long v72 = v80;
    v70[4] = a3;
    v70[7] = v47;
    [*v30 reflectionWithFunction:v41 options:CompileOptions & 0x330003 sync:a11 ^ 1u completionHandler:v70];
  }
  block[0] = MEMORY[0x263EF8330];
  block[1] = 3321888768;
  uint64_t v61 = ___ZN3AGX23UserCommonShaderFactoryINS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE24createMeshProgramVariantI31MTLMeshRenderPipelineDescriptorEEvPT_P18AGXG17FamilyDevicemP25AGXG17FamilyBinaryArchivePU27objcproto16OS_dispatch_data8NSObjectP7NSArrayPNS1_11MeshProgramEPNS1_22FragmentProgramVariantESG_bU13block_pointerFvPNS1_18MeshProgramVariantE13ReflectionKeyP19NSMutableDictionary16MTLCompilerErrorP8NSStringSG_E_block_invoke_3;
  int v62 = &unk_26F851C80;
  int v65 = v47;
  v66 = v44;
  AGX::MeshProgramKey::MeshProgramKey((AGX::MeshProgramKey *)v67, &v56);
  long long v68 = v79;
  long long v69 = v80;
  uint64_t v63 = a12;
  uint64_t v64 = v58;
  long long v31 = *v47;
  if (a11)
  {
    global_queue = dispatch_get_global_queue(0, 0);
    dispatch_group_notify(v31, global_queue, block);
  }
  else
  {
    dispatch_group_wait(v31, 0xFFFFFFFFFFFFFFFFLL);
    v61((uint64_t)block);
  }
  AGX::Impl::MeshProgramKey::~MeshProgramKey(v67);
  AGX::Impl::MeshProgramKey::~MeshProgramKey((void **)&v56._vptr$ProgramKey);
  _Block_object_dispose(v58, 8);
}

void sub_2429F02D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (a38 < 0) {
    operator delete(__p);
  }
  _Block_object_dispose(&a71, 8);
  _Unwind_Resume(a1);
}

void ___ZN3AGX23UserCommonShaderFactoryINS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE20createRenderPipelineI31MTLMeshRenderPipelineDescriptorEEP26AGXG17FamilyRenderPipelinePT_P18AGXG17FamilyDevicemPP27MTLRenderPipelineReflectionPP7NSErrorU13block_pointerFvPU33objcproto22MTLRenderPipelineState11objc_objectSF_SI_E_block_invoke_2(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)(a1 + 32);
  uint64_t v4 = *(void **)(a1 + 40);
  uint64_t v6 = *(void ****)(a1 + 56);
  uint64_t v5 = *(void *)(a1 + 64);
  int v7 = *(void **)(a1 + 72);
  uint64_t v8 = (void *)v7[12];
  uint64_t v9 = (os_unfair_lock_s *)v7[4];
  unint64_t v10 = v7[8];
  unsigned __int8 v11 = *(unsigned char *)(a1 + 96);
  v13[0] = MEMORY[0x263EF8330];
  v13[1] = 3221225472;
  v13[2] = ___ZN3AGX23UserCommonShaderFactoryINS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE20createRenderPipelineI31MTLMeshRenderPipelineDescriptorEEP26AGXG17FamilyRenderPipelinePT_P18AGXG17FamilyDevicemPP27MTLRenderPipelineReflectionPP7NSErrorU13block_pointerFvPU33objcproto22MTLRenderPipelineState11objc_objectSF_SI_E_block_invoke_3;
  v13[3] = &unk_26516EB38;
  v13[4] = v4;
  v13[5] = v3;
  v13[8] = v7;
  v13[9] = v5;
  unsigned __int8 v14 = v11;
  char v15 = *(unsigned char *)(a1 + 97);
  v13[6] = *(void *)(a1 + 48);
  v13[7] = v6;
  uint64_t v12 = *(void *)(a1 + 88);
  v13[10] = *(void *)(a1 + 80);
  v13[11] = v12;
  AGX::UserCommonShaderFactory<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::createFragmentProgramVariant<MTLMeshRenderPipelineDescriptor>(v6, v3, v4, v5, 0, v8, v9, a2, v10, v11, (uint64_t)v13);
}

void AGX::UserCommonShaderFactory<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::createMeshProgramAnalysis<MTLMeshRenderPipelineDescriptor>(void ***a1, void *a2, uint64_t a3, unsigned int a4, os_unfair_lock_s *a5, NSObject *a6, int a7, uint64_t a8)
{
  v47[0] = 0;
  v47[1] = v47;
  v47[2] = 0x2020000000;
  v47[3] = 0;
  uint64_t v49 = 0;
  memset(v48, 0, sizeof(v48));
  AGX::MeshProgramKey::MeshProgramKey((uint64_t)v44, a6, 1, 0, (uint64_t)v48, 0, 0, 0);
  AGX::MeshProgramKey::initCommon<MTLMeshRenderPipelineDescriptor>((uint64_t)v44, a2);
  unsigned int v16 = v45 & 0xFFFFFF7F;
  v45 &= ~0x80u;
  uint64_t v46 = a4 & 0xC00C0000;
  if ((a4 & 0x40000) != 0)
  {
    if (AGX::isTelemetryEnabled(void)::once != -1) {
      dispatch_once(&AGX::isTelemetryEnabled(void)::once, &__block_literal_global_6424);
    }
    int v17 = 1;
    unsigned int v16 = v45;
  }
  else
  {
    int v17 = 0;
  }
  unsigned int v45 = v17 | (a4 >> 21) & 8 | v16 & 0xFFFFFFF4;
  v48[0] = 0;
  VariantEntry = (dispatch_group_t *)AGX::Program<AGX::HAL200::MeshProgramVariant,AGX::MeshProgramKey,AGX::HAL200::IndirectArgumentLayout,AGXG17FamilyIndirectArgumentBufferLayout>::getOrCreateVariantEntry(a5, (uint64_t)v44, v48, 0, 0);
  long long v32 = a5;
  uint64_t v33 = a3;
  uint64_t v19 = [a2 meshFunction];
  uint64_t v34 = a8;
  char v20 = v48[0];
  if (v48[0])
  {
    uint64_t v21 = v19;
    uint64_t v22 = objc_msgSend((id)objc_msgSend(a2, "pipelineLibrary"), "pipelineCache");
    unsigned int v23 = (void *)[a2 pipelineLibrary];
    if ([v23 pipelineCache] && (objc_msgSend(v23, "disableRunTimeCompilation") & 1) != 0) {
      LOBYTE(v24) = 1;
    }
    else {
      int v24 = (objc_msgSend((id)objc_msgSend(a2, "binaryArchives"), "count") != 0) & (a4 >> 2);
    }
    char v31 = v24;
    if (*(_DWORD *)*MEMORY[0x263F4B1E8]) {
      IOGPUDeviceTraceEvent();
    }
    uint64_t v25 = objc_opt_new();
    [v25 setSync:a7 ^ 1u];
    [v25 setFunction:v21];
    [v25 setFrameworkData:a6];
    [v25 setPipelineCache:v22];
    [v25 setDestinationBinaryArchive:0];
    objc_msgSend(v25, "setBinaryArchives:", objc_msgSend(a2, "binaryArchives"));
    [v25 setPipelineOptions:0];
    long long v26 = [a2 newPipelineScript];
    if (v26)
    {
      [v25 setAirScript:v26];
      dispatch_release(v26);
    }
    objc_msgSend(v25, "setGpuCompilerSPIOptions:", objc_msgSend(a2, "gpuCompilerSPIOptions"));
    uint64_t v27 = (void *)[a2 meshLinkedFunctions];
    objc_msgSend(v25, "setVisibleFunctions:", objc_msgSend(v27, "functions"));
    objc_msgSend(v25, "setVisibleFunctionGroups:", objc_msgSend(v27, "groups"));
    objc_msgSend(v25, "setPrivateVisibleFunctions:", objc_msgSend(v27, "privateFunctions"));
    char v28 = *a1;
    v41[0] = MEMORY[0x263EF8330];
    v41[1] = 3221225472;
    v41[2] = ___ZN3AGX23UserCommonShaderFactoryINS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE25createMeshProgramAnalysisI31MTLMeshRenderPipelineDescriptorEEvPT_P18AGXG17FamilyDevicemPNS1_11MeshProgramEPU27objcproto16OS_dispatch_data8NSObjectbU13block_pointerFvPKNS_21VertexProgramVaryingsEE_block_invoke;
    size_t v41[3] = &unk_26516F0B8;
    v41[6] = a1;
    v41[7] = VariantEntry;
    char v42 = v20;
    v41[8] = v32;
    v41[9] = 0;
    v41[4] = v33;
    v41[5] = v47;
    char v43 = v31;
    AGX::Compiler::compileProgram<AGX::MeshProgramKey,AGCDeserializedReply>(v28, (uint64_t)v44, v25, (uint64_t)v41);
  }
  block[0] = MEMORY[0x263EF8330];
  block[1] = 3221225472;
  uint64_t v36 = ___ZN3AGX23UserCommonShaderFactoryINS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE25createMeshProgramAnalysisI31MTLMeshRenderPipelineDescriptorEEvPT_P18AGXG17FamilyDevicemPNS1_11MeshProgramEPU27objcproto16OS_dispatch_data8NSObjectbU13block_pointerFvPKNS_21VertexProgramVaryingsEE_block_invoke_2;
  uint64_t v37 = &unk_26516F0E0;
  char v39 = v47;
  uint64_t v40 = VariantEntry;
  uint64_t v38 = v34;
  uint64_t v29 = *VariantEntry;
  if (a7)
  {
    global_queue = dispatch_get_global_queue(0, 0);
    dispatch_group_notify(v29, global_queue, block);
  }
  else
  {
    dispatch_group_wait(*VariantEntry, 0xFFFFFFFFFFFFFFFFLL);
    v36(block);
  }
  AGX::Impl::MeshProgramKey::~MeshProgramKey(v44);
  _Block_object_dispose(v47, 8);
}

void sub_2429F082C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32)
{
  AGX::Impl::MeshProgramKey::~MeshProgramKey(&a32);
  _Block_object_dispose((const void *)(v32 - 192), 8);
  _Unwind_Resume(a1);
}

void ___ZN3AGX23UserCommonShaderFactoryINS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE25createMeshProgramAnalysisI31MTLMeshRenderPipelineDescriptorEEvPT_P18AGXG17FamilyDevicemPNS1_11MeshProgramEPU27objcproto16OS_dispatch_data8NSObjectbU13block_pointerFvPKNS_21VertexProgramVaryingsEE_block_invoke(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, NSObject *a5, uint64_t a6, void *a7, uint64_t a8, __CFString *a9)
{
  uint64_t v49 = *MEMORY[0x263EF8340];
  if (a2[68])
  {
    if (a2[69]) {
      uint64_t v12 = (unsigned int **)(a2 + 68);
    }
    else {
      uint64_t v12 = (unsigned int **)(a2 + 138);
    }
  }
  else
  {
    uint64_t v12 = (unsigned int **)(a2 + 138);
  }
  uint64_t v13 = *(void *)(a1 + 48);
  unsigned __int8 v14 = *v12;
  char v15 = v12[1];
  if (v14) {
    BOOL v16 = v15 == 0;
  }
  else {
    BOOL v16 = 1;
  }
  if (!v16)
  {
    uint64_t v17 = *v14;
    uint64_t v18 = (char *)v14 + v17;
    uint64_t v19 = (unsigned __int16 *)((char *)v14 + v17 - *(int *)((char *)v14 + v17));
    if (*v19 >= 9u)
    {
      uint64_t v20 = v19[4];
      if (v20)
      {
        uint64_t v21 = &v18[v20];
        uint64_t v22 = *(unsigned int *)&v18[v20];
        if (*(_DWORD *)&v18[v20 + v22])
        {
          unint64_t v23 = 0;
          uint64_t v24 = 0;
          uint64_t v25 = (uint64_t)v14 + v17 + v22 + v20 + 10;
          do
          {
            uint64_t v26 = *(unsigned int *)(v25 - 6);
            uint64_t v27 = v26 - *(int *)(v25 + v26 - 6);
            if (*(unsigned __int16 *)(v25 + v27 - 6) >= 7u && (uint64_t v28 = *(unsigned __int16 *)(v25 + v27)) != 0) {
              uint64_t v29 = *(void *)(v25 + v26 + v28 - 6);
            }
            else {
              uint64_t v29 = 0;
            }
            if (getTimebaseInfo(void)::once != -1)
            {
              uint64_t v43 = v13;
              BOOL v44 = a5;
              dispatch_once(&getTimebaseInfo(void)::once, &__block_literal_global_7474);
              uint64_t v13 = v43;
              a5 = v44;
            }
            v24 += v29
                 * (unint64_t)getTimebaseInfo(void)::sTimebaseInfo
                 / *(unsigned int *)algn_268D5B048;
            ++v23;
            v25 += 4;
          }
          while (v23 < *(unsigned int *)&v21[v22]);
        }
      }
    }
  }
  uint64_t v30 = a8;
  if (*(_DWORD *)*MEMORY[0x263F4B1E8])
  {
    char v31 = a5;
    IOGPUDeviceTraceEvent();
    a5 = v31;
  }
  if (*(unsigned char *)(a1 + 80))
  {
    if (a8)
    {
      char v32 = 1;
    }
    else
    {
      if (a2[33])
      {
        uint64_t v33 = a2 + 33;
        if (!a2[34]) {
          uint64_t v33 = a2 + 103;
        }
      }
      else
      {
        uint64_t v33 = a2 + 103;
      }
      uint64_t v35 = *v33;
      uint64_t v34 = v33[1];
      if (v35) {
        BOOL v36 = v34 == 0;
      }
      else {
        BOOL v36 = 1;
      }
      if (v36)
      {
        uint64_t v30 = 0;
        char v32 = 1;
      }
      else
      {
        char v32 = 0;
        a9 = @"Internal error during function compilation";
        uint64_t v30 = 2;
      }
    }
    uint64_t v37 = *(void *)(a1 + 64);
    uint64_t v38 = *(void *)(a1 + 72);
    memset(v48, 0, sizeof(v48));
    AGX::Program<AGX::HAL200::MeshProgramVariant,AGX::MeshProgramKey,AGX::HAL200::IndirectArgumentLayout,AGXG17FamilyIndirectArgumentBufferLayout>::signalPending(v37, v38, a5, (uint64_t)v48, *(void **)(a1 + 32), v30);
    if (!v30) {
      operator new();
    }
    uint64_t v39 = *(void *)(a1 + 56);
    int v40 = *(unsigned __int8 *)(a1 + 81);
    *(void *)(v39 + 8) = *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24);
    *(void *)(v39 + 16) = v30;

    *(void *)(v39 + 24) = [(__CFString *)a9 copy];
    if (*(void *)(v39 + 8))
    {

      *(void *)(v39 + 32) = a7;
    }
    else
    {
      if (v40) {
        char v41 = v32;
      }
      else {
        char v41 = 0;
      }
      *(unsigned char *)(v39 + 40) = v41;
    }
    char v42 = *(NSObject **)v39;
    dispatch_group_leave(v42);
  }
}

void sub_2429F0BFC(_Unwind_Exception *a1)
{
  MEMORY[0x24566ED90](v1, 0x10F3C4044D4022BLL);
  _Unwind_Resume(a1);
}

uint64_t ___ZN3AGX23UserCommonShaderFactoryINS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE25createMeshProgramAnalysisI31MTLMeshRenderPipelineDescriptorEEvPT_P18AGXG17FamilyDevicemPNS1_11MeshProgramEPU27objcproto16OS_dispatch_data8NSObjectbU13block_pointerFvPKNS_21VertexProgramVaryingsEE_block_invoke_2(void *a1)
{
  *(void *)(*(void *)(a1[5] + 8) + 24) = *(void *)(a1[6] + 8);
  uint64_t v1 = *(void *)(*(void *)(a1[5] + 8) + 24);
  if (v1) {
    uint64_t v2 = v1 + 3456;
  }
  else {
    uint64_t v2 = 0;
  }
  return (*(uint64_t (**)(void, uint64_t))(a1[4] + 16))(a1[4], v2);
}

void ___ZN3AGX23UserCommonShaderFactoryINS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE20createRenderPipelineI31MTLMeshRenderPipelineDescriptorEEP26AGXG17FamilyRenderPipelinePT_P18AGXG17FamilyDevicemPP27MTLRenderPipelineReflectionPP7NSErrorU13block_pointerFvPU33objcproto22MTLRenderPipelineState11objc_objectSF_SI_E_block_invoke_3(uint64_t a1, uint64_t a2, long long *a3, uint64_t a4, unint64_t a5, uint64_t a6)
{
  uint64_t v31 = *MEMORY[0x263EF8340];
  if (a2)
  {
    uint64_t v6 = *(void **)(a1 + 64);
    if (v6[2])
    {
      int v7 = *(void **)(a1 + 32);
      uint64_t v8 = *(void **)(a1 + 40);
      int v9 = *(unsigned __int8 *)(a1 + 96);
      char v10 = *(unsigned char *)(a1 + 97);
      uint64_t v11 = *(void *)(a1 + 72);
      uint64_t v12 = *(void *)(a1 + 80);
      uint64_t v15 = a1 + 48;
      uint64_t v13 = *(void *)(a1 + 48);
      unsigned __int8 v14 = *(void ****)(v15 + 8);
      BOOL v16 = (void *)v6[14];
      uint64_t v17 = (os_unfair_lock_s *)v6[6];
      uint64_t v18 = v6[10];
      v26[0] = MEMORY[0x263EF8330];
      v26[1] = 3221225472;
      long long v19 = a3[1];
      long long v28 = *a3;
      v26[2] = ___ZN3AGX23UserCommonShaderFactoryINS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE34createGeometryStageAndLinkPipelineI31MTLMeshRenderPipelineDescriptorLb0EEEvPKNS5_28RenderPipelineDescriptorInfoEPNS1_22FragmentProgramVariantE13ReflectionKeyP18AGXG17FamilyDevicePT_mbbyP19NSMutableDictionaryP25AGXG17FamilyBinaryArchivePU27objcproto16OS_dispatch_data8NSObjectU13block_pointerFvPU33objcproto22MTLRenderPipelineState11objc_objectP27MTLRenderPipelineReflectionP7NSErrorE_block_invoke;
      v26[3] = &unk_26516EBB0;
      v26[4] = v8;
      v26[5] = v7;
      v26[10] = v11;
      v26[11] = v6;
      char v27 = v9;
      long long v29 = v19;
      char v30 = v10;
      v26[12] = a2;
      v26[13] = v12;
      v26[6] = 0;
      v26[7] = a4;
      v26[8] = v13;
      v26[9] = v14;
      AGX::UserCommonShaderFactory<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::createMeshProgramVariant<MTLMeshRenderPipelineDescriptor>(v14, v8, v7, v11, 0, 0, v16, v17, a2, v18, v9 != 0, (uint64_t)v26);
    }
  }
  else
  {
    uint64_t v20 = *(void *)(a1 + 48);
    if (a5 > 3) {
      uint64_t v21 = 5;
    }
    else {
      uint64_t v21 = qword_242EAA188[a5];
    }
    uint64_t v22 = *(void **)(a1 + 88);
    uint64_t v23 = [NSDictionary dictionaryWithObject:a6 forKey:*MEMORY[0x263F08320]];
    id v24 = (id)[objc_alloc(MEMORY[0x263F087E8]) initWithDomain:@"AGXMetalG17P" code:v21 userInfo:v23];
    if (v20)
    {
      uint64_t v25 = *(void (**)(uint64_t, void, void, id))(v20 + 16);
      v25(v20, 0, 0, v24);
    }
    else if (v22)
    {
      *uint64_t v22 = v24;
    }
  }
}

void AGX::UserCommonShaderFactory<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::createFragmentProgramVariant<MTLMeshRenderPipelineDescriptor>(void ***a1, void *a2, void *a3, uint64_t a4, uint64_t a5, void *a6, os_unfair_lock_s *a7, uint64_t a8, NSObject *a9, unsigned __int8 a10, uint64_t a11)
{
  uint64_t v234 = *MEMORY[0x263EF8340];
  v170[0] = 0;
  v170[1] = v170;
  v170[2] = 0x3052000000;
  v170[3] = __Block_byref_object_copy_;
  v170[4] = __Block_byref_object_dispose_;
  v170[5] = 0;
  uint64_t v139 = [a2 fragmentFunction];
  uint64_t v135 = a5;
  if ([a2 openGLModeEnabled]) {
    uint64_t v15 = a9;
  }
  else {
    uint64_t v15 = 0;
  }
  {
    AGX::UserProgramKeyFactory<AGX::HAL200::Classes,AGX::HAL200::Encoders>::GetPipelineScript<MTLMeshRenderPipelineDescriptor>(MTLMeshRenderPipelineDescriptor const*)::enable_pipeline_script = 0;
  }
  v143 = a7;
  uint64_t v141 = a4;
  if (AGX::UserProgramKeyFactory<AGX::HAL200::Classes,AGX::HAL200::Encoders>::GetPipelineScript<MTLMeshRenderPipelineDescriptor>(MTLMeshRenderPipelineDescriptor const*)::enable_pipeline_script)
  {
    [a2 newPipelineScript];
    operator new();
  }
  AGX::FragmentProgramKey::FragmentProgramKey((uint64_t)v148, v15, (void *)[a2 fragmentLinkedFunctions], a6);
  long long v223 = 0u;
  memset(v224, 0, 31);
  long long v221 = 0u;
  long long v222 = 0u;
  LODWORD(v225) = 1;
  WORD2(v225) = 0;
  int v226 = 0;
  long long v228 = 0u;
  long long v229 = 0u;
  long long v230 = 0u;
  long long v231 = 0u;
  long long v232 = 0u;
  uint64_t v233 = 0;
  bzero(&v221, 0x28uLL);
  uint64_t v16 = [a2 _descriptorPrivate];
  id v17 = *(id *)v16;
  uint64_t v18 = objc_msgSend((id)objc_msgSend(*(id *)v16, "_descriptorAtIndex:", 0), "_descriptorPrivate");
  if (v18)
  {
    uint64_t v19 = *v18 >> 36;
    if ((v19 - 1) > 0x284) {
      uint64_t v20 = &texFormatUnsupported;
    }
    else {
      uint64_t v20 = (uint64_t *)*(&off_26516F8A0 + (v19 - 1));
    }
  }
  else
  {
    uint64_t v19 = 0;
    uint64_t v20 = &texFormatUnsupported;
  }
  v227 = v20;
  BOOL v21 = v19 != 0;
  int v22 = DWORD2(v223);
  uint64_t v23 = objc_msgSend((id)objc_msgSend(v17, "_descriptorAtIndex:", 1), "_descriptorPrivate");
  int v24 = v22 | v21;
  if (!v23)
  {
    *(void *)&long long v228 = &texFormatUnsupported;
    goto LABEL_18;
  }
  uint64_t v25 = *v23 >> 36;
  if ((v25 - 1) <= 0x284)
  {
    *(void *)&long long v228 = *(&off_26516F8A0 + (v25 - 1));
    if (v25) {
      goto LABEL_19;
    }
LABEL_18:
    int v26 = 0;
    goto LABEL_20;
  }
  *(void *)&long long v228 = &texFormatUnsupported;
  if (!v25) {
    goto LABEL_18;
  }
LABEL_19:
  int v26 = 2;
LABEL_20:
  int v27 = v24 | v26;
  DWORD2(v223) = v24 | v26;
  long long v28 = objc_msgSend((id)objc_msgSend(v17, "_descriptorAtIndex:", 2), "_descriptorPrivate");
  if (!v28)
  {
    *((void *)&v228 + 1) = &texFormatUnsupported;
    goto LABEL_26;
  }
  uint64_t v29 = *v28 >> 36;
  if ((v29 - 1) <= 0x284)
  {
    *((void *)&v228 + 1) = *(&off_26516F8A0 + (v29 - 1));
    if (v29) {
      goto LABEL_27;
    }
LABEL_26:
    int v30 = 0;
    goto LABEL_28;
  }
  *((void *)&v228 + 1) = &texFormatUnsupported;
  if (!v29) {
    goto LABEL_26;
  }
LABEL_27:
  int v30 = 4;
LABEL_28:
  uint64_t v31 = objc_msgSend((id)objc_msgSend(v17, "_descriptorAtIndex:", 3), "_descriptorPrivate");
  if (!v31)
  {
    *(void *)&long long v229 = &texFormatUnsupported;
    goto LABEL_34;
  }
  uint64_t v32 = *v31 >> 36;
  if ((v32 - 1) <= 0x284)
  {
    *(void *)&long long v229 = *(&off_26516F8A0 + (v32 - 1));
    if (v32) {
      goto LABEL_35;
    }
LABEL_34:
    int v33 = 0;
    goto LABEL_36;
  }
  *(void *)&long long v229 = &texFormatUnsupported;
  if (!v32) {
    goto LABEL_34;
  }
LABEL_35:
  int v33 = 8;
LABEL_36:
  uint64_t v34 = objc_msgSend((id)objc_msgSend(v17, "_descriptorAtIndex:", 4), "_descriptorPrivate");
  if (!v34)
  {
    *((void *)&v229 + 1) = &texFormatUnsupported;
    goto LABEL_42;
  }
  uint64_t v35 = *v34 >> 36;
  if ((v35 - 1) <= 0x284)
  {
    *((void *)&v229 + 1) = *(&off_26516F8A0 + (v35 - 1));
    if (v35) {
      goto LABEL_43;
    }
LABEL_42:
    int v36 = 0;
    goto LABEL_44;
  }
  *((void *)&v229 + 1) = &texFormatUnsupported;
  if (!v35) {
    goto LABEL_42;
  }
LABEL_43:
  int v36 = 16;
LABEL_44:
  int v37 = v30 | v33 | v36 | v27;
  DWORD2(v223) = v37;
  uint64_t v38 = objc_msgSend((id)objc_msgSend(v17, "_descriptorAtIndex:", 5), "_descriptorPrivate");
  if (!v38)
  {
    *(void *)&long long v230 = &texFormatUnsupported;
    goto LABEL_50;
  }
  uint64_t v39 = *v38 >> 36;
  if ((v39 - 1) <= 0x284)
  {
    *(void *)&long long v230 = *(&off_26516F8A0 + (v39 - 1));
    if (v39) {
      goto LABEL_51;
    }
LABEL_50:
    int v40 = 0;
    goto LABEL_52;
  }
  *(void *)&long long v230 = &texFormatUnsupported;
  if (!v39) {
    goto LABEL_50;
  }
LABEL_51:
  int v40 = 32;
LABEL_52:
  char v41 = objc_msgSend((id)objc_msgSend(v17, "_descriptorAtIndex:", 6), "_descriptorPrivate");
  if (!v41)
  {
    *((void *)&v230 + 1) = &texFormatUnsupported;
    goto LABEL_58;
  }
  uint64_t v42 = *v41 >> 36;
  if ((v42 - 1) <= 0x284)
  {
    *((void *)&v230 + 1) = *(&off_26516F8A0 + (v42 - 1));
    if (v42) {
      goto LABEL_59;
    }
LABEL_58:
    int v43 = 0;
    goto LABEL_60;
  }
  *((void *)&v230 + 1) = &texFormatUnsupported;
  if (!v42) {
    goto LABEL_58;
  }
LABEL_59:
  int v43 = 64;
LABEL_60:
  BOOL v44 = objc_msgSend((id)objc_msgSend(v17, "_descriptorAtIndex:", 7), "_descriptorPrivate");
  if (!v44)
  {
    *(void *)&long long v231 = &texFormatUnsupported;
    goto LABEL_66;
  }
  uint64_t v45 = *v44 >> 36;
  if ((v45 - 1) <= 0x284)
  {
    *(void *)&long long v231 = *(&off_26516F8A0 + (v45 - 1));
    if (v45) {
      goto LABEL_67;
    }
LABEL_66:
    int v46 = 0;
    goto LABEL_68;
  }
  *(void *)&long long v231 = &texFormatUnsupported;
  if (!v45) {
    goto LABEL_66;
  }
LABEL_67:
  int v46 = 128;
LABEL_68:
  DWORD2(v223) = v40 | v43 | v46 | v37;
  BYTE4(v225) = [a2 rasterSampleCount];
  uint64_t v47 = *(void *)(v16 + 40);
  if (!v47) {
    LOBYTE(v47) = [a2 rasterSampleCount];
  }
  BYTE5(v225) = v47;
  AGX::FramebufferCompilerConfigGen3<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::buildDrawBufferState((uint64_t)&v221, 0);
  long long v157 = v221;
  long long v158 = v222;
  uint64_t v159 = v223;
  char v48 = (void *)[a2 driverCompilerOptions];
  uint64_t v49 = objc_msgSend((id)objc_msgSend((id)objc_msgSend(a2, "fragmentLinkedFunctions"), "binaryFunctions"), "count");
  int v50 = [a2 supportAddingFragmentBinaryFunctions];
  if (objc_msgSend((id)objc_msgSend(v48, "objectForKeyedSubscript:", @"disableTextureRWBoundsCheck"), "BOOLValue"))int v51 = 4; {
  else
  }
    int v51 = 0;
  unsigned int v155 = v155 & 0xFFFFFFFB | v51;
  unsigned __int16 v52 = objc_msgSend((id)objc_msgSend(v48, "objectForKeyedSubscript:", @"maxNumRegisters"), "unsignedIntValue");
  unsigned int v155 = v155 & 0xFC0003FF | (v52 << 10);
  if (objc_msgSend((id)objc_msgSend(v48, "objectForKeyedSubscript:", @"agx_enable_stack_shadow"), "BOOLValue"))int v53 = 0x8000000; {
  else
  }
    int v53 = 0;
  if (v49) {
    int v54 = 1;
  }
  else {
    int v54 = v50;
  }
  if (v54) {
    int v55 = 512;
  }
  else {
    int v55 = 0;
  }
  unsigned int v155 = v53 | v155 & 0xF7FFFDFF | v55;
  uint64_t v56 = 0;
  uint64_t v57 = *(void **)[a2 _descriptorPrivate];
  do
  {
    v66 = (void *)[v57 _descriptorAtIndex:v56];
    unsigned int v67 = v66;
    if (v66 && [v66 pixelFormat])
    {
      if ([v67 isBlendingEnabled])
      {
        v154[v56] |= 1u;
        unint64_t v68 = [v67 sourceRGBBlendFactor];
        int v69 = 2 * v68 + 2;
        if (v68 >= 0x13) {
          int v69 = 0;
        }
        v154[v56] = v154[v56] & 0xFFFFFFC1 | v69;
        unint64_t v70 = [v67 destinationRGBBlendFactor];
        int v71 = (v70 << 6) + 64;
        if (v70 >= 0x13) {
          int v71 = 0;
        }
        v154[v56] = v154[v56] & 0xFFFFF83F | v71;
        unint64_t v72 = [v67 sourceAlphaBlendFactor];
        int v73 = (v72 << 11) + 2048;
        if (v72 >= 0x13) {
          int v73 = 0;
        }
        v154[v56] = v154[v56] & 0xFFFF07FF | v73;
        unint64_t v74 = [v67 destinationAlphaBlendFactor];
        int v75 = (v74 << 16) + 0x10000;
        if (v74 >= 0x13) {
          int v75 = 0;
        }
        v154[v56] = v154[v56] & 0xFFE0FFFF | v75;
        unint64_t v76 = [v67 rgbBlendOperation];
        if (v76 > 4) {
          int v77 = 0;
        }
        else {
          int v77 = dword_242EB34D8[v76];
        }
        v154[v56] = v154[v56] & 0xFF1FFFFF | v77;
        unint64_t v78 = [v67 alphaBlendOperation];
        if (v78 <= 4) {
          int v58 = dword_242EB34EC[v78];
        }
        else {
          int v58 = 0;
        }
        v154[v56] = v154[v56] & 0xF8FFFFFF | v58;
      }
      char v59 = [v67 writeMask];
      int v60 = 1 << v56;
      if ((v59 & 8) == 0) {
        int v60 = 0;
      }
      int v61 = 256 << v56;
      if ((v59 & 4) == 0) {
        LOWORD(v61) = 0;
      }
      int v62 = ((unsigned __int16)v61 | (unsigned __int16)v152) & 0xFF00;
      int v63 = 0x10000 << v56;
      if ((v59 & 2) == 0) {
        int v63 = 0;
      }
      int v64 = (v63 | v152) & 0xFF0000;
      int v65 = 0x1000000 << v56;
      if ((v59 & 1) == 0) {
        int v65 = 0;
      }
      unsigned int v152 = v152 & 0xFF0000FF | v65 | v60 | v62 | v64;
    }
    ++v56;
  }
  while (v56 != 8);
  if ([a2 isLogicOperationEnabled]) {
    int v79 = 32;
  }
  else {
    int v79 = 0;
  }
  unsigned int v151 = v151 & 0xFFFFFFDF | v79;
  unint64_t v80 = [a2 logicOperation];
  if (v80 > 0xF) {
    int v81 = 0;
  }
  else {
    int v81 = dword_242EB3478[v80];
  }
  unsigned int v151 = v151 & 0xFFFFF83F | v81;
  if ([a2 isAlphaTestEnabled]) {
    int v82 = 2048;
  }
  else {
    int v82 = 0;
  }
  unsigned int v151 = v151 & 0xFFFFF7FF | v82;
  unint64_t v83 = [a2 alphaTestFunction];
  if (v83 > 7) {
    int v84 = 0;
  }
  else {
    int v84 = dword_242EB34B8[v83];
  }
  unsigned int v151 = v151 & 0xFFFF0FFF | v84;
  if ([a2 isPointSmoothEnabled]) {
    unsigned int v85 = 0x10000;
  }
  else {
    unsigned int v85 = 0;
  }
  unsigned int v151 = v151 & 0xFFFAFFFF | ((HIWORD(v85) & 1) << 18) | v85;
  v154[8] = [a2 fragmentDepthCompareClampMask];
  if ([a2 isDepthStencilWriteDisabled]) {
    int v86 = 16;
  }
  else {
    int v86 = 0;
  }
  unsigned int v151 = v151 & 0xFFFFFFEF | v86;
  int v87 = [a2 sampleMask];
  int v88 = [a2 isAlphaToCoverageEnabled];
  unsigned int v151 = v151 & 0xFFFFFFFE | v88;
  if ([a2 isAlphaToOneEnabled]) {
    int v89 = 2;
  }
  else {
    int v89 = 0;
  }
  unsigned int v151 = v151 & 0xFFFFFFFD | v89;
  if ([a2 openGLModeEnabled])
  {
    int v90 = [a2 sampleCoverageInvert];
    [a2 sampleCoverage];
    float v92 = 1.0;
    if (v90) {
      float v92 = 0.0;
    }
    int v93 = 4 * (v91 != v92);
    if (v87 != -1) {
      int v93 = 4;
    }
    unsigned int v151 = v151 & 0xFFFFFFFB | v93;
    if ([a2 sampleCoverageInvert]) {
      int v94 = 8;
    }
    else {
      int v94 = 0;
    }
    unsigned int v95 = v151 & 0xFFFFFFF7 | v94;
  }
  else
  {
    [a2 sampleCoverage];
    if (v87 == -1 && v96 == 1.0) {
      int v98 = 0;
    }
    else {
      int v98 = 4;
    }
    unsigned int v95 = v98 | v151 & 0xFFFFFFFB;
  }
  unsigned int v151 = v95;
  v156 &= 0xFFFFFFFC;
  if ([a2 openGLModeEnabled]) {
    int v99 = 2;
  }
  else {
    int v99 = 0;
  }
  unsigned int v156 = v156 & 0xFFFFFFFD | v99;
  char v100 = (void *)[a2 fragmentBuffers];
  uint64_t v101 = 0;
  for (uint64_t i = 0; i != 31; ++i)
  {
    uint64_t v103 = objc_msgSend((id)objc_msgSend(v100, "_descriptorAtIndex:", i), "mutability");
    uint64_t v104 = 1 << i;
    if (v103 != 1) {
      uint64_t v104 = 0;
    }
    v101 |= v104;
  }
  uint64_t v153 = v101;
  char v164 = [a2 supportIndirectCommandBuffers];
  if ([a2 needsCustomBorderColorSamplers]) {
    int v105 = 4;
  }
  else {
    int v105 = 0;
  }
  unsigned int v156 = v156 & 0xFFFFFFFB | v105;
  uint64_t v106 = [a2 textureWriteRoundingMode];
  int v107 = 16 * (v106 == 1);
  if (v106 == 2) {
    int v107 = 32;
  }
  unsigned int v156 = v107 | v156 & 0xFFFFFFCF;
  uint64_t v108 = [a2 meshFunction];
  unsigned int v156 = v156 & 0xFFFFFEFF | ((v108 != 0) << 8);
  if ([a2 supportAddingFragmentBinaryFunctions]) {
    int v109 = 64;
  }
  else {
    int v109 = (objc_msgSend((id)objc_msgSend((id)objc_msgSend(a2, "fragmentLinkedFunctions"), "binaryFunctions"), "count") != 0) << 6;
  }
  unsigned int v156 = v156 & 0xFFFFFDBF | v109;
  v155 &= ~0x80u;
  v151 &= ~0x10u;
  [a2 supportIndirectCommandBuffers];
  uint64_t v110 = a3[101];
  int v111 = *(unsigned __int8 *)(v110 + 7440);
  LODWORD(v110) = *(_DWORD *)(v110 + 7288);
  unsigned int v112 = ((v110 << 29) & 0x40000000 | v155 & 0x8BFFFEFF | (v111 << 26)) ^ 0x40000000;
  unsigned int v113 = v156 & 0xFFFFF7F7 | (v110 >> 7) & 8;
  unsigned int v155 = v112;
  unsigned int v156 = v113;
  uint64_t v169 = a4 & 0xC0040000;
  if ((a4 & 0x40000) != 0)
  {
    if (AGX::isTelemetryEnabled(void)::once != -1) {
      dispatch_once(&AGX::isTelemetryEnabled(void)::once, &__block_literal_global_6424);
    }
    int v114 = 1;
    unsigned int v112 = v155;
    unsigned int v113 = v156;
  }
  else
  {
    int v114 = 0;
  }
  unsigned int v155 = (a4 >> 21) & 8 | v114 | v112 & 0xFFFFFFF4;
  unsigned int v156 = v113 & 0xFFFFFF7F | (((a4 >> 21) & 1) << 7);
  uint64_t v115 = a8;
  if (a8)
  {
    if (*(char *)(a8 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v146, *(const std::string::value_type **)a8, *(void *)(a8 + 8));
      uint64_t v115 = a8;
    }
    else
    {
      std::string v146 = *(std::string *)a8;
    }
    if (*(char *)(v115 + 47) < 0) {
      std::string::__init_copy_ctor_external(&v147, *(const std::string::value_type **)(v115 + 24), *(void *)(v115 + 32));
    }
    else {
      std::string v147 = *(std::string *)(v115 + 24);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    std::string __p = v146;
    *((unsigned char *)&v146.__r_.__value_.__s + 23) = 0;
    v146.__r_.__value_.__s.__data_[0] = 0;
    if (SHIBYTE(v161.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v161.__r_.__value_.__l.__data_);
    }
    std::string v161 = v147;
    *((unsigned char *)&v147.__r_.__value_.__s + 23) = 0;
    v147.__r_.__value_.__s.__data_[0] = 0;
  }
  ReflectionKey::initGPUCompilerSPIOptionsHash((uint64_t)&v221, (void *)[a2 gpuCompilerSPIOptions]);
  long long v219 = v221;
  long long v220 = v222;
  unint64_t CompileOptions = AGX::Program<AGX::HAL200::FragmentProgramVariant,AGX::FragmentProgramKey,AGX::HAL200::IndirectArgumentLayout,AGXG17FamilyIndirectArgumentBufferLayout>::getOrCreateCompileOptions((uint64_t)a7, a4 | 3, (uint64_t)&v219);
  LOBYTE(v172) = 0;
  v117 = (dispatch_group_t *)AGX::Program<AGX::HAL200::FragmentProgramVariant,AGX::FragmentProgramKey,AGX::HAL200::IndirectArgumentLayout,AGXG17FamilyIndirectArgumentBufferLayout>::getOrCreateVariantEntry(a7, (uint64_t)v148, &v172, CompileOptions, v135 != 0);
  v118 = v117;
  if ((_BYTE)v172)
  {
    uint64_t v119 = objc_msgSend((id)objc_msgSend(a2, "pipelineLibrary"), "pipelineCache");
    v120 = (void *)[a2 pipelineLibrary];
    if ([v120 pipelineCache] && (objc_msgSend(v120, "disableRunTimeCompilation") & 1) != 0) {
      LOBYTE(v121) = 1;
    }
    else {
      unsigned int v121 = (objc_msgSend((id)objc_msgSend(a2, "binaryArchives"), "count") != 0) & (v141 >> 2);
    }
    char v133 = v121;
    if (*(_DWORD *)*MEMORY[0x263F4B1E8]) {
      IOGPUDeviceTraceEvent();
    }
    long long v122 = objc_opt_new();
    [v122 setSync:a10 ^ 1u];
    [v122 setFunction:v139];
    [v122 setFrameworkData:a9];
    [v122 setPipelineCache:v119];
    [v122 setDestinationBinaryArchive:v135];
    objc_msgSend(v122, "setBinaryArchives:", objc_msgSend(a2, "binaryArchives"));
    [v122 setPipelineOptions:v141 | 3];
    if ((v141 & 0x330003) == 0) {
      objc_msgSend(v122, "setPipelineOptions:", objc_msgSend(v122, "pipelineOptions") | 0x8000);
    }
    uint64_t v123 = [a2 newPipelineScript];
    if (v123)
    {
      [v122 setAirScript:v123];
      dispatch_release(v123);
    }
    objc_msgSend(v122, "setGpuCompilerSPIOptions:", objc_msgSend(a2, "gpuCompilerSPIOptions"));
    unsigned __int8 v124 = (void *)[a2 fragmentLinkedFunctions];
    objc_msgSend(v122, "setVisibleFunctions:", objc_msgSend(v124, "functions"));
    objc_msgSend(v122, "setVisibleFunctionGroups:", objc_msgSend(v124, "groups"));
    objc_msgSend(v122, "setPrivateVisibleFunctions:", objc_msgSend(v124, "privateFunctions"));
    uint64_t v136 = [a2 maxFragmentCallStackDepth];
    char v125 = (void *)[a2 fragmentLinkedFunctions];
    char v134 = [a2 supportIndirectCommandBuffers];
    char v132 = [a2 supportAddingFragmentBinaryFunctions];
    uint64_t v126 = [a2 gpuCompilerSPIOptions];
    char v127 = [a3 requiresRaytracingEmulation];
    v199[0] = MEMORY[0x263EF8330];
    v199[1] = 3321888768;
    v199[2] = ___ZN3AGX23UserCommonShaderFactoryINS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE28createFragmentProgramVariantI31MTLMeshRenderPipelineDescriptorEEvPT_P18AGXG17FamilyDevicemP25AGXG17FamilyBinaryArchiveP7NSArrayPNS1_15FragmentProgramEPKNS_21VertexProgramVaryingsEPU27objcproto16OS_dispatch_data8NSObjectbU13block_pointerFvPNS1_22FragmentProgramVariantE13ReflectionKeyP19NSMutableDictionary16MTLCompilerErrorP8NSStringSN_E_block_invoke;
    v199[3] = &unk_26F851E48;
    v199[7] = v170;
    v199[4] = v139;
    unsigned __int8 v216 = a10;
    v199[8] = a1;
    v199[9] = v118;
    AGX::Impl::FragmentProgramKey::FragmentProgramKey((AGX::Impl::FragmentProgramKey *)&v200, (const AGX::Impl::FragmentProgramKey *)v148);
    v200 = (uint64_t (**)())&unk_26F852E88;
    uint64_t v213 = v169;
    v214 = v143;
    unint64_t v215 = CompileOptions;
    long long v217 = v219;
    long long v218 = v220;
    v199[5] = a3;
    v199[6] = a2;
    v144[0] = MEMORY[0x263EF8330];
    v144[1] = 3221225472;
    v144[2] = ___ZN3AGX23UserCommonShaderFactoryINS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE28createFragmentProgramVariantI31MTLMeshRenderPipelineDescriptorEEvPT_P18AGXG17FamilyDevicemP25AGXG17FamilyBinaryArchiveP7NSArrayPNS1_15FragmentProgramEPKNS_21VertexProgramVaryingsEPU27objcproto16OS_dispatch_data8NSObjectbU13block_pointerFvPNS1_22FragmentProgramVariantE13ReflectionKeyP19NSMutableDictionary16MTLCompilerErrorP8NSStringSN_E_block_invoke_1895;
    v144[3] = &unk_26516F090;
    v144[4] = v199;
    v144[5] = v118;
    char v145 = v133;
    if ((v127 & 1) == 0
      && AGX::UserShaderFactory<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::hasAirLinkedIntersectionFunction(v125))
    {
      LOBYTE(v221) = v127;
      *((void *)&v221 + 1) = v136;
      long long v222 = (unint64_t)v125;
      *(void *)&long long v223 = 0;
      *((void *)&v223 + 1) = v141;
      v224[0] = a6;
      v224[1] = a3;
      v224[2] = 0;
      LOBYTE(v224[3]) = v134;
      BYTE1(v224[3]) = v132;
      uint64_t v225 = v126;
      AGX::UserShaderFactory<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::compileFunctionWithAirLinkedIntersectionFunction_Impl<AGX::FragmentProgramKey,true>(a1, (uint64_t)v148, v122, &v221, (uint64_t)v144);
    }
    else
    {
      char v128 = *a1;
      v171[0] = MEMORY[0x263EF8330];
      v171[1] = 3221225472;
      v171[2] = ___ZN3AGX17UserShaderFactoryINS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE20compileFunction_ImplINS_18FragmentProgramKeyEEEvRKT_P29MTLCompileFunctionRequestDataRKNS5_21DriverRequestDataImplILb1EEEU13block_pointerFvRK20AGCDeserializedReplyRKNS_28CompileFunctionReplyMetadataERKNS5_19DriverReplyDataImplILb1EEEE_block_invoke;
      v171[3] = &unk_26516F018;
      v171[4] = v144;
      *(void *)&long long v221 = MEMORY[0x263EF8330];
      *((void *)&v221 + 1) = 3221225472;
      *(void *)&long long v222 = ___ZN3AGX8Compiler14compileProgramINS_18FragmentProgramKeyE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_RKNS_28CompileFunctionReplyMetadataEE_block_invoke;
      *((void *)&v222 + 1) = &unk_26516F7C0;
      *(void *)&long long v223 = v171;
      AGX::Compiler::compileProgram<AGX::FragmentProgramKey,AGCDeserializedReply>(v128, (uint64_t)v148, v122, (uint64_t)&v221);
    }

    v200 = (uint64_t (**)())&unk_26F854050;
    if (v211)
    {
      v212 = v211;
      operator delete(v211);
    }
    if (v209)
    {
      v210 = v209;
      operator delete(v209);
    }
    if (v208 < 0)
    {
      operator delete(v207);
      if ((v206 & 0x80000000) == 0)
      {
LABEL_200:
        if ((v204 & 0x80000000) == 0) {
          goto LABEL_201;
        }
LABEL_235:
        operator delete(v203);
LABEL_201:
        v200 = off_26F852E48;
        if (v201)
        {
          v202 = v201;
          operator delete(v201);
        }
        goto LABEL_205;
      }
    }
    else if ((v206 & 0x80000000) == 0)
    {
      goto LABEL_200;
    }
    operator delete(v205);
    if ((v204 & 0x80000000) == 0) {
      goto LABEL_201;
    }
    goto LABEL_235;
  }
  if ((CompileOptions & 0x330003) != 0)
  {
    long long v129 = *a1;
    v196[0] = MEMORY[0x263EF8330];
    v196[1] = 3221225472;
    v196[2] = ___ZN3AGX23UserCommonShaderFactoryINS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE28createFragmentProgramVariantI31MTLMeshRenderPipelineDescriptorEEvPT_P18AGXG17FamilyDevicemP25AGXG17FamilyBinaryArchiveP7NSArrayPNS1_15FragmentProgramEPKNS_21VertexProgramVaryingsEPU27objcproto16OS_dispatch_data8NSObjectbU13block_pointerFvPNS1_22FragmentProgramVariantE13ReflectionKeyP19NSMutableDictionary16MTLCompilerErrorP8NSStringSN_E_block_invoke_2;
    v196[3] = &unk_26516EEF0;
    long long v197 = v219;
    long long v198 = v220;
    v196[5] = a7;
    v196[4] = a3;
    v196[6] = CompileOptions;
    v196[7] = v117;
    [*v129 reflectionWithFunction:v139 options:CompileOptions & 0x330003 sync:a10 ^ 1u completionHandler:v196];
  }
LABEL_205:
  block[0] = MEMORY[0x263EF8330];
  block[1] = 3321888768;
  v174 = ___ZN3AGX23UserCommonShaderFactoryINS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE28createFragmentProgramVariantI31MTLMeshRenderPipelineDescriptorEEvPT_P18AGXG17FamilyDevicemP25AGXG17FamilyBinaryArchiveP7NSArrayPNS1_15FragmentProgramEPKNS_21VertexProgramVaryingsEPU27objcproto16OS_dispatch_data8NSObjectbU13block_pointerFvPNS1_22FragmentProgramVariantE13ReflectionKeyP19NSMutableDictionary16MTLCompilerErrorP8NSStringSN_E_block_invoke_3;
  v175 = &unk_26F851E80;
  v178 = v118;
  v179 = v143;
  AGX::Impl::FragmentProgramKey::FragmentProgramKey((AGX::Impl::FragmentProgramKey *)&v180, (const AGX::Impl::FragmentProgramKey *)v148);
  v180 = (uint64_t (**)())&unk_26F852E88;
  uint64_t v193 = v169;
  long long v194 = v219;
  long long v195 = v220;
  uint64_t v176 = a11;
  v177 = v170;
  long long v130 = *v118;
  if (a10)
  {
    global_queue = dispatch_get_global_queue(0, 0);
    dispatch_group_notify(v130, global_queue, block);
  }
  else
  {
    dispatch_group_wait(*v118, 0xFFFFFFFFFFFFFFFFLL);
    v174((uint64_t)block);
  }
  v180 = (uint64_t (**)())&unk_26F854050;
  if (v191)
  {
    v192 = v191;
    operator delete(v191);
  }
  if (v189)
  {
    v190 = v189;
    operator delete(v189);
  }
  if ((v188 & 0x80000000) == 0)
  {
    if ((v186 & 0x80000000) == 0) {
      goto LABEL_214;
    }
LABEL_228:
    operator delete(v185);
    if ((v184 & 0x80000000) == 0) {
      goto LABEL_215;
    }
    goto LABEL_229;
  }
  operator delete(v187);
  if (v186 < 0) {
    goto LABEL_228;
  }
LABEL_214:
  if ((v184 & 0x80000000) == 0) {
    goto LABEL_215;
  }
LABEL_229:
  operator delete(v183);
LABEL_215:
  v180 = off_26F852E48;
  if (v181)
  {
    v182 = v181;
    operator delete(v181);
  }
  v148[0] = &unk_26F854050;
  if (v167)
  {
    v168 = v167;
    operator delete(v167);
  }
  if (v165)
  {
    v166 = v165;
    operator delete(v165);
  }
  if ((v163 & 0x80000000) == 0)
  {
    if ((SHIBYTE(v161.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_223;
    }
LABEL_231:
    operator delete(v161.__r_.__value_.__l.__data_);
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_224;
    }
    goto LABEL_232;
  }
  operator delete(v162);
  if (SHIBYTE(v161.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_231;
  }
LABEL_223:
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    goto LABEL_224;
  }
LABEL_232:
  operator delete(__p.__r_.__value_.__l.__data_);
LABEL_224:
  v148[0] = off_26F852E48;
  if (v149)
  {
    v150 = v149;
    operator delete(v149);
  }
  _Block_object_dispose(v170, 8);
}

void sub_2429F265C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  int v71 = (void *)STACK[0x5F0];
  if (STACK[0x5F0])
  {
    STACK[0x5F8] = (unint64_t)v71;
    operator delete(v71);
  }
  unint64_t v72 = (void *)STACK[0x5D0];
  if (STACK[0x5D0])
  {
    STACK[0x5D8] = (unint64_t)v72;
    operator delete(v72);
  }
  std::unique_ptr<AGX::PipelineScript>::~unique_ptr[abi:nn180100]((dispatch_object_t **)&STACK[0x240]);
  _Block_object_dispose(&a70, 8);
  _Unwind_Resume(a1);
}

uint64_t ___ZN3AGX23UserCommonShaderFactoryINS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE28createFragmentProgramVariantI31MTLMeshRenderPipelineDescriptorEEvPT_P18AGXG17FamilyDevicemP25AGXG17FamilyBinaryArchiveP7NSArrayPNS1_15FragmentProgramEPKNS_21VertexProgramVaryingsEPU27objcproto16OS_dispatch_data8NSObjectbU13block_pointerFvPNS1_22FragmentProgramVariantE13ReflectionKeyP19NSMutableDictionary16MTLCompilerErrorP8NSStringSN_E_block_invoke(uint64_t a1, void *a2, uint64_t a3, uint64_t *a4, void *a5, unsigned char *a6)
{
  *(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) = objc_alloc_init(MEMORY[0x263EFF9A0]);
  AGX::UserShaderFactory<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::fillCompilePerformanceStatisticsDictionary(*(NSObject **)a3, *(void *)(a3 + 8), *(void **)(*(void *)(*(void *)(a1 + 56) + 8) + 40), *(void *)(a3 + 56), [*(id *)(a1 + 32) name], *(unsigned char *)(a1 + 384));
  uint64_t v11 = *(void **)(*(void *)(*(void *)(a1 + 56) + 8) + 40);
  if (v11)
  {
    uint64_t v12 = (void *)[v11 objectForKey:*MEMORY[0x263F12630]];
    if (v12) {
      [v12 unsignedLongLongValue];
    }
  }
  if (*(_DWORD *)*MEMORY[0x263F4B1E8]) {
    IOGPUDeviceTraceEvent();
  }
  *a4 = *(void *)(a3 + 40);
  *a5 = *(void *)(a3 + 48);
  *a6 = 0;
  uint64_t v13 = *a4;
  if (!*a4)
  {
    if (*(unsigned char *)(a1 + 304)
      && (AGX::ProgramBindingRemap<AGX::HAL200::Encoders,AGX::HAL200::Classes>::isShaderExecuteIndirectCompatible(a2, 0) & 1) == 0)
    {
      *a4 = 2;
      *a5 = @"Fragment shader cannot be used with indirect command buffers";
      *a6 = 1;
      uint64_t v13 = *a4;
    }
    else
    {
      uint64_t v13 = 0;
    }
  }
  AGX::Program<AGX::HAL200::FragmentProgramVariant,AGX::FragmentProgramKey,AGX::HAL200::IndirectArgumentLayout,AGXG17FamilyIndirectArgumentBufferLayout>::signalPending(*(void *)(a1 + 368), *(void *)(a1 + 376), *(NSObject **)(a3 + 16), a1 + 385, *(void **)(a1 + 40), v13);
  if (!*a4)
  {
    [*(id *)(a1 + 48) needsCustomBorderColorSamplers];
    unsigned __int8 v14 = (void *)[*(id *)(a1 + 48) profileControl];
    if (v14)
    {
      uint64_t v15 = v14;
      [v14 uscCliqueTraceLevel];
      [v15 uscEmitPosition];
      [v15 uscEmitThreadControlFlow];
    }
    operator new();
  }
  return 0;
}

void sub_2429F2C48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  AGX::ProgramBindingRemap<AGX::HAL200::Encoders,AGX::HAL200::Classes>::~ProgramBindingRemap((uint64_t)va);
  if (*(char *)(v6 - 97) < 0) {
    operator delete(*(void **)(v6 - 120));
  }
  MEMORY[0x24566ED90](v5, 0x10F3C40CE3AE0ADLL);
  _Unwind_Resume(a1);
}

void ___ZN3AGX23UserCommonShaderFactoryINS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE28createFragmentProgramVariantI31MTLMeshRenderPipelineDescriptorEEvPT_P18AGXG17FamilyDevicemP25AGXG17FamilyBinaryArchiveP7NSArrayPNS1_15FragmentProgramEPKNS_21VertexProgramVaryingsEPU27objcproto16OS_dispatch_data8NSObjectbU13block_pointerFvPNS1_22FragmentProgramVariantE13ReflectionKeyP19NSMutableDictionary16MTLCompilerErrorP8NSStringSN_E_block_invoke_1895(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v18 = 0;
  uint64_t v19 = 0;
  unsigned __int8 v17 = 0;
  int v7 = (void *)(*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
  uint64_t v8 = v7;
  if (v7)
  {
    v7[69] = *a4;
    v7[70] = a4[1];
    if (v7 + 69 != a4) {
      std::vector<AGX::HAL200::IntersectionFunctionVariantSet>::__assign_with_size[abi:nn180100]<AGX::HAL200::IntersectionFunctionVariantSet*,AGX::HAL200::IntersectionFunctionVariantSet*>(v7 + 72, a4[3], a4[4], 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a4[4] - a4[3]) >> 4));
    }
  }
  uint64_t v9 = *(void *)(a1 + 40);
  uint64_t v11 = v18;
  uint64_t v10 = v19;
  uint64_t v12 = *(void **)(a3 + 32);
  int v13 = *(unsigned __int8 *)(a1 + 48);
  int v14 = v17;
  *(void *)(v9 + 8) = v8;
  *(void *)(v9 + 16) = v10;

  *(void *)(v9 + 24) = [v11 copy];
  if (*(void *)(v9 + 8))
  {

    *(void *)(v9 + 32) = v12;
  }
  else
  {
    if (v13) {
      BOOL v15 = v14 == 0;
    }
    else {
      BOOL v15 = 0;
    }
    char v16 = v15;
    *(unsigned char *)(v9 + 40) = v16;
  }
  dispatch_group_leave(*(dispatch_group_t *)v9);
}

void ___ZN3AGX23UserCommonShaderFactoryINS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE28createFragmentProgramVariantI31MTLMeshRenderPipelineDescriptorEEvPT_P18AGXG17FamilyDevicemP25AGXG17FamilyBinaryArchiveP7NSArrayPNS1_15FragmentProgramEPKNS_21VertexProgramVaryingsEPU27objcproto16OS_dispatch_data8NSObjectbU13block_pointerFvPNS1_22FragmentProgramVariantE13ReflectionKeyP19NSMutableDictionary16MTLCompilerErrorP8NSStringSN_E_block_invoke_2(uint64_t a1, uint64_t a2, NSObject *a3)
{
  AGX::Program<AGX::HAL200::FragmentProgramVariant,AGX::FragmentProgramKey,AGX::HAL200::IndirectArgumentLayout,AGXG17FamilyIndirectArgumentBufferLayout>::signalPending(*(void *)(a1 + 40), *(void *)(a1 + 48), a3, a1 + 64, *(void **)(a1 + 32), a2);
  uint64_t v4 = **(NSObject ***)(a1 + 56);

  dispatch_group_leave(v4);
}

void ___ZN3AGX23UserCommonShaderFactoryINS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE28createFragmentProgramVariantI31MTLMeshRenderPipelineDescriptorEEvPT_P18AGXG17FamilyDevicemP25AGXG17FamilyBinaryArchiveP7NSArrayPNS1_15FragmentProgramEPKNS_21VertexProgramVaryingsEPU27objcproto16OS_dispatch_data8NSObjectbU13block_pointerFvPNS1_22FragmentProgramVariantE13ReflectionKeyP19NSMutableDictionary16MTLCompilerErrorP8NSStringSN_E_block_invoke_3(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  id v2 = *(id *)(*(void *)(a1 + 48) + 32);
  *(_OWORD *)dispatch_object_t object = 0u;
  memset(v7, 0, 26);
  uint64_t v3 = AGX::Program<AGX::HAL200::FragmentProgramVariant,AGX::FragmentProgramKey,AGX::HAL200::IndirectArgumentLayout,AGXG17FamilyIndirectArgumentBufferLayout>::consolidate(*(os_unfair_lock_s **)(a1 + 56), *(void *)(a1 + 48), a1 + 64, object);
  uint64_t v4 = v3[1];
  long long v5 = *(_OWORD *)(a1 + 368);
  v8[0] = *(_OWORD *)(a1 + 352);
  v8[1] = v5;
  (*(void (**)(void, uint64_t, _OWORD *, void, void, void, id))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), v4, v8, *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40), v3[2], v3[3], v2);

  if (object[0]) {
    dispatch_release(object[0]);
  }
  if (object[1]) {
    (*((void (**)(dispatch_object_t))object[1]->isa + 1))(object[1]);
  }
}

void sub_2429F2EF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t AGX::UserProgramKeyFactory<AGX::HAL200::Classes,AGX::HAL200::Encoders>::CreateMeshProgramKey<MTLMeshRenderPipelineDescriptor>(uint64_t a1, void *a2, NSObject *a3, void *a4, int a5, uint64_t a6, int a7)
{
  int v14 = (void *)[a2 meshLinkedFunctions];
  *(_OWORD *)char v16 = *(_OWORD *)a6;
  uint64_t v17 = *(void *)(a6 + 16);
  *(void *)a6 = 0;
  *(void *)(a6 + 8) = 0;
  *(_OWORD *)std::string __p = *(_OWORD *)(a6 + 24);
  uint64_t v19 = *(void *)(a6 + 40);
  *(void *)(a6 + 16) = 0;
  *(void *)(a6 + 24) = 0;
  *(void *)(a6 + 32) = 0;
  *(void *)(a6 + 40) = 0;
  char v20 = *(unsigned char *)(a6 + 48);
  AGX::MeshProgramKey::MeshProgramKey(a1, a3, 0, a5, (uint64_t)v16, v14, a4, a7);
  if (SHIBYTE(v19) < 0)
  {
    operator delete(__p[0]);
    if ((SHIBYTE(v17) & 0x80000000) == 0) {
      goto LABEL_3;
    }
LABEL_5:
    operator delete(v16[0]);
    goto LABEL_3;
  }
  if (SHIBYTE(v17) < 0) {
    goto LABEL_5;
  }
LABEL_3:
  AGX::MeshProgramKey::initCommon<MTLMeshRenderPipelineDescriptor>(a1, a2);
  *(_DWORD *)(a1 + 52) &= ~0x80u;
  return [a2 supportIndirectCommandBuffers];
}

void sub_2429F3014(_Unwind_Exception *a1)
{
  AGX::Impl::MeshProgramKey::~MeshProgramKey(v1);
  _Unwind_Resume(a1);
}

void sub_2429F302C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
}

void ___ZN3AGX23UserCommonShaderFactoryINS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE24createMeshProgramVariantI31MTLMeshRenderPipelineDescriptorEEvPT_P18AGXG17FamilyDevicemP25AGXG17FamilyBinaryArchivePU27objcproto16OS_dispatch_data8NSObjectP7NSArrayPNS1_11MeshProgramEPNS1_22FragmentProgramVariantESG_bU13block_pointerFvPNS1_18MeshProgramVariantE13ReflectionKeyP19NSMutableDictionary16MTLCompilerErrorP8NSStringSG_E_block_invoke(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a3 + 40);
  int v7 = *(__CFString **)(a3 + 48);
  *(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) = objc_alloc_init(MEMORY[0x263EFF9A0]);
  AGX::UserShaderFactory<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::fillCompilePerformanceStatisticsDictionary(*(NSObject **)a3, *(void *)(a3 + 8), *(void **)(*(void *)(*(void *)(a1 + 56) + 8) + 40), *(void *)(a3 + 56), [*(id *)(a1 + 32) name], *(unsigned char *)(a1 + 112));
  uint64_t v8 = *(void **)(*(void *)(*(void *)(a1 + 56) + 8) + 40);
  if (v8)
  {
    uint64_t v9 = (void *)[v8 objectForKey:*MEMORY[0x263F12630]];
    if (v9) {
      [v9 unsignedLongLongValue];
    }
  }
  if (*(_DWORD *)*MEMORY[0x263F4B1E8]) {
    IOGPUDeviceTraceEvent();
  }
  if (v6)
  {
    char v10 = 1;
    goto LABEL_21;
  }
  if (a2[33])
  {
    uint64_t v11 = a2 + 33;
    if (!a2[34]) {
      uint64_t v11 = a2 + 103;
    }
    if (!*v11) {
      goto LABEL_16;
    }
  }
  else
  {
    uint64_t v11 = a2 + 103;
    if (!a2[103]) {
      goto LABEL_16;
    }
  }
  if (v11[1])
  {
    char v10 = 0;
    int v7 = @"Internal error during function compilation";
    goto LABEL_20;
  }
LABEL_16:
  if (!*(unsigned char *)(a1 + 113)
    || (AGX::ProgramBindingRemap<AGX::HAL200::Encoders,AGX::HAL200::Classes>::isShaderExecuteIndirectCompatible(a2, 0) & 1) != 0)
  {
    uint64_t v6 = 0;
    char v10 = 1;
    goto LABEL_21;
  }
  char v10 = 0;
  int v7 = @"Mesh shader cannot be used with indirect command buffers";
LABEL_20:
  uint64_t v6 = 2;
LABEL_21:
  AGX::Program<AGX::HAL200::MeshProgramVariant,AGX::MeshProgramKey,AGX::HAL200::IndirectArgumentLayout,AGXG17FamilyIndirectArgumentBufferLayout>::signalPending(*(void *)(a1 + 80), *(void *)(a1 + 88), *(NSObject **)(a3 + 16), a1 + 114, *(void **)(a1 + 40), v6);
  if (!v6)
  {
    AGX::VsStateConfigGen3<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::VsStateConfigGen3((uint64_t)v29, a2);
    uint64_t v12 = *(void *)(a1 + 96);
    if (v12) {
      unsigned int v30 = v30 & 0xFFFFFFBF | (*(unsigned __int8 *)(v12 + 3385) << 6);
    }
    char v13 = [*(id *)(a1 + 48) needsCustomBorderColorSamplers];
    int v14 = (void *)[*(id *)(a1 + 48) profileControl];
    if (v14)
    {
      uint64_t v18 = v14;
      char v25 = [v14 uscCliqueTraceLevel];
      char v26 = [v18 uscEmitPosition];
      char v27 = [v18 uscEmitThreadControlFlow];
      char v19 = 1;
    }
    else
    {
      char v19 = 0;
    }
    char v28 = v19;
    AGX::ProgramBindingRemap<AGX::HAL200::Encoders,AGX::HAL200::Classes>::ProgramBindingRemap(v24, (unsigned int **)a2, (const std::vector<unsigned int>::value_type *)8, 0, v13, *(void *)(a1 + 80) + 1408, *(void *)(a1 + 104), 0, v15, v16, v17, 0, 0);
    operator new();
  }
  uint64_t v20 = *(void *)(a1 + 72);
  BOOL v21 = *(void **)(a3 + 32);
  int v22 = *(unsigned __int8 *)(a1 + 146);
  *(void *)(v20 + 8) = 0;
  *(void *)(v20 + 16) = v6;

  *(void *)(v20 + 24) = [(__CFString *)v7 copy];
  if (*(void *)(v20 + 8))
  {

    *(void *)(v20 + 32) = v21;
  }
  else
  {
    if (v22) {
      char v23 = v10;
    }
    else {
      char v23 = 0;
    }
    *(unsigned char *)(v20 + 40) = v23;
  }
  dispatch_group_leave(*(dispatch_group_t *)v20);
}

void sub_2429F35C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  AGX::ProgramBindingRemap<AGX::HAL200::Encoders,AGX::HAL200::Classes>::~ProgramBindingRemap((uint64_t)va);
  if (SLOBYTE(STACK[0x217]) < 0) {
    operator delete((void *)STACK[0x200]);
  }
  MEMORY[0x24566ED90](v6, 0x10F3C4044D4022BLL);
  AGX::ProgramBindingRemap<AGX::HAL200::Encoders,AGX::HAL200::Classes>::~ProgramBindingRemap((uint64_t)&STACK[0x218]);
  _Unwind_Resume(a1);
}

void ___ZN3AGX23UserCommonShaderFactoryINS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE24createMeshProgramVariantI31MTLMeshRenderPipelineDescriptorEEvPT_P18AGXG17FamilyDevicemP25AGXG17FamilyBinaryArchivePU27objcproto16OS_dispatch_data8NSObjectP7NSArrayPNS1_11MeshProgramEPNS1_22FragmentProgramVariantESG_bU13block_pointerFvPNS1_18MeshProgramVariantE13ReflectionKeyP19NSMutableDictionary16MTLCompilerErrorP8NSStringSG_E_block_invoke_2(uint64_t a1, uint64_t a2, NSObject *a3)
{
  AGX::Program<AGX::HAL200::MeshProgramVariant,AGX::MeshProgramKey,AGX::HAL200::IndirectArgumentLayout,AGXG17FamilyIndirectArgumentBufferLayout>::signalPending(*(void *)(a1 + 40), *(void *)(a1 + 48), a3, a1 + 64, *(void **)(a1 + 32), a2);
  uint64_t v4 = **(NSObject ***)(a1 + 56);

  dispatch_group_leave(v4);
}

void ___ZN3AGX23UserCommonShaderFactoryINS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE24createMeshProgramVariantI31MTLMeshRenderPipelineDescriptorEEvPT_P18AGXG17FamilyDevicemP25AGXG17FamilyBinaryArchivePU27objcproto16OS_dispatch_data8NSObjectP7NSArrayPNS1_11MeshProgramEPNS1_22FragmentProgramVariantESG_bU13block_pointerFvPNS1_18MeshProgramVariantE13ReflectionKeyP19NSMutableDictionary16MTLCompilerErrorP8NSStringSG_E_block_invoke_3(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  id v2 = *(id *)(*(void *)(a1 + 48) + 32);
  *(_OWORD *)dispatch_object_t object = 0u;
  memset(v7, 0, 26);
  uint64_t v3 = (void *)AGX::Program<AGX::HAL200::MeshProgramVariant,AGX::MeshProgramKey,AGX::HAL200::IndirectArgumentLayout,AGXG17FamilyIndirectArgumentBufferLayout>::consolidate(*(os_unfair_lock_s **)(a1 + 56), *(void *)(a1 + 48), a1 + 64, (uint64_t)object);
  uint64_t v4 = v3[1];
  long long v5 = *(_OWORD *)(a1 + 296);
  v8[0] = *(_OWORD *)(a1 + 280);
  v8[1] = v5;
  (*(void (**)(void, uint64_t, _OWORD *, void, void, void, id))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), v4, v8, *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40), v3[2], v3[3], v2);

  if (object[0]) {
    dispatch_release(object[0]);
  }
  if (object[1]) {
    (*((void (**)(dispatch_object_t))object[1]->isa + 1))(object[1]);
  }
}

void sub_2429F3780(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

id ___ZN3AGX23UserCommonShaderFactoryINS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE34createGeometryStageAndLinkPipelineI31MTLMeshRenderPipelineDescriptorLb0EEEvPKNS5_28RenderPipelineDescriptorInfoEPNS1_22FragmentProgramVariantE13ReflectionKeyP18AGXG17FamilyDevicePT_mbbyP19NSMutableDictionaryP25AGXG17FamilyBinaryArchivePU27objcproto16OS_dispatch_data8NSObjectU13block_pointerFvPU33objcproto22MTLRenderPipelineState11objc_objectP27MTLRenderPipelineReflectionP7NSErrorE_block_invoke_2(void *a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  if (!a4)
  {
    uint64_t v7 = a1[10];
    uint64_t v8 = *(void **)(v7 + 16);
    uint64_t v9 = *(void **)(v7 + 24);
    uint64_t v20 = a1[4];
    BOOL v21 = (void *)a1[5];
    if (*(void *)v7)
    {
      [*(id *)v7 vendorPrivate];
      if (!v9) {
        goto LABEL_13;
      }
    }
    else if (!v9)
    {
LABEL_13:
      if (v8) {
        [v8 vendorPrivate];
      }
      char v13 = [AGXG17FamilyRenderPipeline alloc];
      uint64_t v14 = [v21 maxTotalThreadgroupsPerMeshGrid];
      if (v14) {
        uint64_t v15 = v14;
      }
      else {
        uint64_t v15 = 0x100000;
      }
      uint64_t v16 = [(AGXG17FamilyRenderPipeline *)v13 initWithDevice:v20 meshRenderPipelineStateDescriptor:v21 objectThreadExecutionWidth:32 meshThreadExecutionWidth:32 maxTotalThreadgroupsPerMeshGrid:v15];
      [v21 _descriptorPrivate];
      *(_DWORD *)(v16 + 808) = [v21 maxVertexAmplificationCount];
      [v21 sampleCoverage];
      *(_DWORD *)(v16 + 812) = v17;
      *(_DWORD *)(v16 + 820) = [v21 rasterSampleCount];
      *(_DWORD *)(v16 + 816) = [v21 sampleMask];
      int v18 = [v21 isRasterizationEnabled];
      *(unsigned char *)(v16 + 824) = v18;
      if (v18) {
        int v19 = 0;
      }
      else {
        int v19 = 0x20000;
      }
      *(_DWORD *)(v16 + 900) = *(_DWORD *)(v16 + 900) & 0xFFFDFFFF | v19;
      *(unsigned char *)(v16 + 853) = [v21 supportIndirectCommandBuffers];
      operator new();
    }
    [v9 vendorPrivate];
    goto LABEL_13;
  }
  uint64_t v5 = a1[8];
  if (a4 > 3) {
    uint64_t v6 = 5;
  }
  else {
    uint64_t v6 = qword_242EAA188[a4];
  }
  uint64_t v10 = [NSDictionary dictionaryWithObject:a5 forKey:*MEMORY[0x263F08320]];
  id result = (id)[objc_alloc(MEMORY[0x263F087E8]) initWithDomain:@"AGXMetalG17P" code:v6 userInfo:v10];
  if (v5)
  {
    uint64_t v12 = *(uint64_t (**)(uint64_t, void, void, id))(v5 + 16);
    return (id)v12(v5, 0, 0, result);
  }
  return result;
}

void sub_2429F58F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41)
{
  uint64_t v42 = *(void **)(a39 + 16);
  if (v42)
  {
    do
    {
      int v43 = (void *)*v42;
      operator delete(v42);
      uint64_t v42 = v43;
    }
    while (v43);
  }
  BOOL v44 = *(void **)a39;
  *(void *)a39 = 0;
  if (v44) {
    operator delete(v44);
  }
  MEMORY[0x24566ED90](a39, 0x10A0C408EF24B1CLL);
  uint64_t v45 = *(void **)(a38 + 16);
  if (v45)
  {
    do
    {
      int v46 = (void *)*v45;
      operator delete(v45);
      uint64_t v45 = v46;
    }
    while (v46);
  }
  uint64_t v47 = a38;
  char v48 = *(void **)a38;
  *(void *)a38 = 0;
  if (v48)
  {
    operator delete(v48);
    uint64_t v47 = a38;
  }
  MEMORY[0x24566ED90](v47, 0x10A0C408EF24B1CLL);
  uint64_t v49 = *(void **)(a35 + 16);
  if (v49)
  {
    do
    {
      int v50 = (void *)*v49;
      operator delete(v49);
      uint64_t v49 = v50;
    }
    while (v50);
  }
  int v51 = *(void **)a35;
  *(void *)a35 = 0;
  if (v51) {
    operator delete(v51);
  }
  MEMORY[0x24566ED90](a35, 0x10A0C408EF24B1CLL);
  unsigned __int16 v52 = *(void **)(a37 + 16);
  if (v52)
  {
    do
    {
      int v53 = (void *)*v52;
      operator delete(v52);
      unsigned __int16 v52 = v53;
    }
    while (v53);
  }
  uint64_t v54 = a37;
  int v55 = *(void **)a37;
  *(void *)a37 = 0;
  if (v55)
  {
    operator delete(v55);
    uint64_t v54 = a37;
  }
  MEMORY[0x24566ED90](v54, 0x10A0C408EF24B1CLL);
  uint64_t v56 = *(void **)(a41 + 16);
  if (v56)
  {
    do
    {
      uint64_t v57 = (void *)*v56;
      operator delete(v56);
      uint64_t v56 = v57;
    }
    while (v57);
  }
  int v58 = *(void **)a41;
  *(void *)a41 = 0;
  if (v58) {
    operator delete(v58);
  }
  MEMORY[0x24566ED90](a41, 0x10A0C408EF24B1CLL);
  _Unwind_Resume(a1);
}

void AGX::UserCommonShaderFactory<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::createUserOrPassthroughObjectProgramVariant<MTLMeshRenderPipelineDescriptor>(void ***a1, void *a2, os_unfair_lock_s *a3, unint64_t a4, uint64_t a5, uint64_t a6, os_unfair_lock_s *a7, void *a8, NSObject *a9, unsigned __int8 a10, unsigned __int8 a11, unsigned __int8 a12, uint64_t a13)
{
  uint64_t v137 = *MEMORY[0x263EF8340];
  if (a8)
  {
    uint64_t v15 = [a8 vendorPrivate];
    *(void *)&long long v133 = 0;
    *((void *)&v133 + 1) = &v133;
    *(void *)&long long v134 = 0x3052000000;
    *((void *)&v134 + 1) = __Block_byref_object_copy_;
    p_long long block = __Block_byref_object_dispose_;
    uint64_t v136 = 0;
    uint64_t v64 = [a2 objectFunction];
    AGX::ObjectProgramKey::ObjectProgramKey((uint64_t)&v71, a9, (void *)[a2 objectLinkedFunctions], a7, a10, a11);
    uint64_t v16 = (void *)[a2 driverCompilerOptions];
    uint64_t v17 = objc_msgSend((id)objc_msgSend((id)objc_msgSend(a2, "objectLinkedFunctions"), "binaryFunctions"), "count");
    int v18 = [a2 supportAddingObjectBinaryFunctions];
    if (objc_msgSend((id)objc_msgSend(v16, "objectForKeyedSubscript:", @"disableTextureRWBoundsCheck"), "BOOLValue"))int v19 = 4; {
    else
    }
      int v19 = 0;
    unsigned int v77 = v77 & 0xFFFFFFFB | v19;
    unsigned __int16 v20 = objc_msgSend((id)objc_msgSend(v16, "objectForKeyedSubscript:", @"maxNumRegisters"), "unsignedIntValue");
    unsigned int v77 = v77 & 0xFC0003FF | (v20 << 10);
    if (objc_msgSend((id)objc_msgSend(v16, "objectForKeyedSubscript:", @"agx_enable_stack_shadow"), "BOOLValue"))int v21 = 0x8000000; {
    else
    }
      int v21 = 0;
    if (v17) {
      int v22 = 1;
    }
    else {
      int v22 = v18;
    }
    if (v22) {
      int v23 = 512;
    }
    else {
      int v23 = 0;
    }
    unsigned int v77 = v21 | v77 & 0xF7FFFDFF | v23;
    int v24 = (void *)[a2 objectBuffers];
    uint64_t v25 = 0;
    uint64_t v26 = 0;
    unsigned int v67 = (os_unfair_lock_s *)(v15 + 8);
    do
    {
      uint64_t v27 = objc_msgSend((id)objc_msgSend(v24, "_descriptorAtIndex:", v26), "mutability");
      uint64_t v28 = 1 << v26;
      if (v27 != 1) {
        uint64_t v28 = 0;
      }
      v25 |= v28;
      ++v26;
    }
    while (v26 != 31);
    uint64_t v76 = v25;
    int v29 = [a2 supportIndirectCommandBuffers];
    unsigned int v83 = v83 & 0xFFFFFFFE | v29;
    int v30 = [a2 maxTotalThreadsPerObjectThreadgroup];
    int v31 = [a2 payloadMemoryLength];
    int v79 = v30;
    int v80 = v31;
    char v32 = [a2 maxVertexAmplificationCount];
    v77 &= ~0x80u;
    unsigned int v78 = v78 & 0xFFFFFF87 | (8 * (v32 & 0xF));
    [a2 supportIndirectCommandBuffers];
    unsigned int v33 = ((*(_DWORD *)(*(void *)&a3[202]._os_unfair_lock_opaque + 7288) << 29) & 0x40000000 | v77 & 0x8BFFFEFF | (*(unsigned __int8 *)(*(void *)&a3[202]._os_unfair_lock_opaque + 7440) << 26)) ^ 0x40000000;
    unsigned int v77 = v33;
    v78 &= ~0x80u;
    uint64_t v88 = a4 & 0xC00C0000;
    if ((a4 & 0x40000) != 0)
    {
      if (AGX::isTelemetryEnabled(void)::once != -1) {
        dispatch_once(&AGX::isTelemetryEnabled(void)::once, &__block_literal_global_6424);
      }
      int v34 = 1;
      unsigned int v33 = v77;
    }
    else
    {
      int v34 = 0;
    }
    unsigned int v77 = v34 | (a4 >> 21) & 8 | v33 & 0xFFFFFFF4;
    ReflectionKey::initGPUCompilerSPIOptionsHash((uint64_t)&block, (void *)[a2 gpuCompilerSPIOptions]);
    long long v131 = block;
    long long v132 = v96;
    char v70 = 0;
    unint64_t CompileOptions = AGX::Program<AGX::HAL200::ObjectProgramVariant,AGX::ObjectProgramKey,AGX::HAL200::IndirectArgumentLayout,AGXG17FamilyIndirectArgumentBufferLayout>::getOrCreateCompileOptions((uint64_t)v67, a4 | 3, (uint64_t)&v131);
    uint64_t v41 = AGX::Program<AGX::HAL200::ObjectProgramVariant,AGX::ObjectProgramKey,AGX::HAL200::IndirectArgumentLayout,AGXG17FamilyIndirectArgumentBufferLayout>::getOrCreateVariantEntry(v67, (uint64_t)&v71, &v70, CompileOptions, a5 != 0);
    uint64_t v42 = (NSObject **)v41;
    if (v70)
    {
      uint64_t v60 = v76;
      char v59 = v83;
      uint64_t v43 = objc_msgSend((id)objc_msgSend(a2, "pipelineLibrary"), "pipelineCache");
      BOOL v44 = (void *)[a2 pipelineLibrary];
      if ([v44 pipelineCache] && (objc_msgSend(v44, "disableRunTimeCompilation") & 1) != 0) {
        LOBYTE(v45) = 1;
      }
      else {
        unsigned int v45 = (objc_msgSend((id)objc_msgSend(a2, "binaryArchives"), "count") != 0) & (a4 >> 2);
      }
      char v58 = v45;
      if (*(_DWORD *)*MEMORY[0x263F4B1E8]) {
        IOGPUDeviceTraceEvent();
      }
      int v46 = objc_opt_new();
      [v46 setSync:a12 ^ 1u];
      [v46 setFunction:v64];
      [v46 setFrameworkData:a9];
      [v46 setPipelineCache:v43];
      [v46 setDestinationBinaryArchive:a5];
      [v46 setArchiverId:a6];
      objc_msgSend(v46, "setBinaryArchives:", objc_msgSend(a2, "binaryArchives"));
      [v46 setPipelineOptions:a4 | 3];
      if ((a4 & 0x330003) == 0) {
        objc_msgSend(v46, "setPipelineOptions:", objc_msgSend(v46, "pipelineOptions") | 0x8000);
      }
      uint64_t v47 = [a2 newPipelineScript];
      if (v47)
      {
        [v46 setAirScript:v47];
        dispatch_release(v47);
      }
      objc_msgSend(v46, "setGpuCompilerSPIOptions:", objc_msgSend(a2, "gpuCompilerSPIOptions"));
      char v48 = (void *)[a2 objectLinkedFunctions];
      objc_msgSend(v46, "setVisibleFunctions:", objc_msgSend(v48, "functions"));
      objc_msgSend(v46, "setVisibleFunctionGroups:", objc_msgSend(v48, "groups"));
      objc_msgSend(v46, "setPrivateVisibleFunctions:", objc_msgSend(v48, "privateFunctions"));
      uint64_t v62 = [a2 maxObjectCallStackDepth];
      uint64_t v49 = (void *)[a2 objectLinkedFunctions];
      char v57 = [a2 supportIndirectCommandBuffers];
      char v56 = [a2 supportAddingObjectBinaryFunctions];
      int v50 = (void *)[a2 gpuCompilerSPIOptions];
      char v51 = [(os_unfair_lock_s *)a3 requiresRaytracingEmulation];
      uint64_t v115 = (void *)MEMORY[0x263EF8330];
      uint64_t v116 = 3221225472;
      long long v128 = v131;
      v117 = ___ZN3AGX23UserCommonShaderFactoryINS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE26createObjectProgramVariantI31MTLMeshRenderPipelineDescriptorEEvPT_P18AGXG17FamilyDevicemP25AGXG17FamilyBinaryArchivePU27objcproto16OS_dispatch_data8NSObjectP7NSArrayPNS1_13ObjectProgramESG_bbbU13block_pointerFvPNS1_20ObjectProgramVariantE13ReflectionKey16MTLCompilerErrorP8NSStringE_block_invoke;
      v118 = &unk_26516F068;
      long long v122 = &v133;
      *(void *)&long long v123 = a1;
      p_os_unfair_lock_opaque = (void *)v64;
      unsigned __int8 v126 = a12;
      char v127 = v59 & 1;
      *((void *)&v123 + 1) = v42;
      *(void *)&long long v124 = v67;
      *((void *)&v124 + 1) = CompileOptions;
      long long v129 = v132;
      v120 = a3;
      unint64_t v121 = (unint64_t)a2;
      uint64_t v125 = v60;
      char v130 = v58;
      if ((v51 & 1) == 0
        && AGX::UserShaderFactory<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::hasAirLinkedIntersectionFunction(v49))
      {
        LOBYTE(block) = v51;
        *((void *)&block + 1) = v62;
        long long v96 = (unint64_t)v49;
        BOOL v97 = 0;
        int v98 = (long long *)a4;
        int v99 = a7;
        char v100 = (long long *)a3;
        uint64_t v101 = 0;
        char v102 = v57;
        char v103 = v56;
        uint64_t v104 = v50;
        AGX::UserShaderFactory<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::compileFunctionWithAirLinkedIntersectionFunction_Impl<AGX::ObjectProgramKey,true>(a1, (uint64_t)&v71, v46, &block, (uint64_t)&v115);
      }
      else
      {
        unsigned __int16 v52 = *a1;
        uint64_t v89 = MEMORY[0x263EF8330];
        uint64_t v90 = 3221225472;
        uint64_t v91 = (uint64_t)___ZN3AGX17UserShaderFactoryINS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE20compileFunction_ImplINS_16ObjectProgramKeyEEEvRKT_P29MTLCompileFunctionRequestDataRKNS5_21DriverRequestDataImplILb1EEEU13block_pointerFvRK20AGCDeserializedReplyRKNS_28CompileFunctionReplyMetadataERKNS5_19DriverReplyDataImplILb1EEEE_block_invoke;
        float v92 = &unk_26516F018;
        int v93 = &v115;
        *(void *)&long long block = MEMORY[0x263EF8330];
        *((void *)&block + 1) = 3221225472;
        *(void *)&long long v96 = ___ZN3AGX8Compiler14compileProgramINS_16ObjectProgramKeyE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_RKNS_28CompileFunctionReplyMetadataEE_block_invoke;
        *((void *)&v96 + 1) = &unk_26516F7C0;
        BOOL v97 = &v89;
        AGX::Compiler::compileProgram<AGX::ObjectProgramKey,AGCDeserializedReply>(v52, (uint64_t)&v71, v46, (uint64_t)&block);
      }
    }
    else if ((CompileOptions & 0x330003) != 0)
    {
      int v53 = *a1;
      uint64_t v115 = (void *)MEMORY[0x263EF8330];
      uint64_t v116 = 3221225472;
      v117 = ___ZN3AGX23UserCommonShaderFactoryINS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE26createObjectProgramVariantI31MTLMeshRenderPipelineDescriptorEEvPT_P18AGXG17FamilyDevicemP25AGXG17FamilyBinaryArchivePU27objcproto16OS_dispatch_data8NSObjectP7NSArrayPNS1_13ObjectProgramESG_bbbU13block_pointerFvPNS1_20ObjectProgramVariantE13ReflectionKey16MTLCompilerErrorP8NSStringE_block_invoke_2;
      v118 = &unk_26516EEF0;
      long long v123 = v131;
      long long v124 = v132;
      p_os_unfair_lock_opaque = &a3->_os_unfair_lock_opaque;
      v120 = v67;
      unint64_t v121 = CompileOptions;
      long long v122 = (long long *)v41;
      [*v53 reflectionWithFunction:v64 options:CompileOptions & 0x330003 sync:a12 ^ 1u completionHandler:&v115];
    }
    *(void *)&long long block = MEMORY[0x263EF8330];
    *((void *)&block + 1) = 3321888768;
    *(void *)&long long v96 = ___ZN3AGX23UserCommonShaderFactoryINS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE26createObjectProgramVariantI31MTLMeshRenderPipelineDescriptorEEvPT_P18AGXG17FamilyDevicemP25AGXG17FamilyBinaryArchivePU27objcproto16OS_dispatch_data8NSObjectP7NSArrayPNS1_13ObjectProgramESG_bbbU13block_pointerFvPNS1_20ObjectProgramVariantE13ReflectionKey16MTLCompilerErrorP8NSStringE_block_invoke_3;
    *((void *)&v96 + 1) = &unk_26F851D70;
    int v99 = v67;
    char v100 = (long long *)v42;
    AGX::GeometrySharedKey<_AGCObjectContextStateAGP,(_AGCStreamToken)9>::GeometrySharedKey((uint64_t)&v101, (uint64_t)&v71);
    uint64_t v101 = (uint64_t (***)())&unk_26F852D30;
    uint64_t v112 = v88;
    BOOL v97 = (uint64_t *)a13;
    long long v113 = v131;
    long long v114 = v132;
    int v98 = &v133;
    uint64_t v54 = *v42;
    if (a12)
    {
      global_queue = dispatch_get_global_queue(0, 0);
      dispatch_group_notify(v54, global_queue, &block);
    }
    else
    {
      dispatch_group_wait(v54, 0xFFFFFFFFFFFFFFFFLL);
      ((void (*)(long long *))v96)(&block);
    }
    uint64_t v101 = (uint64_t (***)())&unk_26F852CA8;
    if (v110)
    {
      int v111 = v110;
      operator delete(v110);
    }
    if (v108)
    {
      int v109 = v108;
      operator delete(v108);
    }
    if (v107 < 0) {
      operator delete(v106);
    }
    uint64_t v101 = (uint64_t (***)())off_26F852CF0;
    if (v104)
    {
      int v105 = v104;
      operator delete(v104);
    }
    int v71 = (uint64_t (**)())&unk_26F852CA8;
    if (v86)
    {
      int v87 = v86;
      operator delete(v86);
    }
    if (__p)
    {
      unsigned int v85 = __p;
      operator delete(__p);
    }
    if (v82 < 0) {
      operator delete(v81);
    }
    int v71 = off_26F852CF0;
    if (v73)
    {
      unint64_t v74 = v73;
      operator delete(v73);
    }
    int v40 = (uint64_t *)&v133;
LABEL_68:
    _Block_object_dispose(v40, 8);
    return;
  }
  {
    AGX::UserCommonShaderFactory<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::createUserOrPassthroughObjectProgramVariant<MTLMeshRenderPipelineDescriptor>(MTLMeshRenderPipelineDescriptor *,AGXG17FamilyDevice *,unsigned long,AGXG17FamilyBinaryArchive *,NSObject  {objcproto16OS_dispatch_data}*,NSArray *,_MTLFunction *,NSObject  {objcproto16OS_dispatch_data}*,BOOL,BOOL,BOOL,void({block_pointer})(AGX::HAL200::ObjectProgramVariant *,ReflectionKey,MTLCompilerError,NSString *))::geometryContextRequiresOS = 1;
  }
  if (AGX::UserCommonShaderFactory<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::createUserOrPassthroughObjectProgramVariant<MTLMeshRenderPipelineDescriptor>(MTLMeshRenderPipelineDescriptor *,AGXG17FamilyDevice *,unsigned long,AGXG17FamilyBinaryArchive *,NSObject  {objcproto16OS_dispatch_data}*,NSArray *,_MTLFunction *,NSObject  {objcproto16OS_dispatch_data}*,BOOL,BOOL,BOOL,void({block_pointer})(AGX::HAL200::ObjectProgramVariant *,ReflectionKey,MTLCompilerError,NSString *))::geometryContextRequiresOS)
  {
    uint64_t v89 = 0;
    uint64_t v90 = (uint64_t)&v89;
    uint64_t v91 = 0x2020000000;
    float v92 = 0;
    *(void *)&long long v131 = 0;
    *((void *)&v131 + 1) = &v131;
    long long v132 = 0x2020000000uLL;
    int v71 = 0;
    unint64_t v72 = &v71;
    int v73 = (void *)0x3052000000;
    unint64_t v74 = __Block_byref_object_copy_;
    int v75 = __Block_byref_object_dispose_;
    uint64_t v76 = 0;
    LODWORD(v116) = 26;
    v118 = 0;
    p_os_unfair_lock_opaque = 0;
    v117 = 0;
    uint64_t v115 = &unk_26F851CF8;
    if (a11) {
      int v35 = 2;
    }
    else {
      int v35 = 0;
    }
    LODWORD(v120) = v35 | a10;
    int v36 = *a1;
    *(void *)&long long block = MEMORY[0x263EF8330];
    *((void *)&block + 1) = 3221225472;
    *(void *)&long long v96 = ___ZN3AGX23UserCommonShaderFactoryINS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE37createObjectProgramPassThroughVariantI31MTLMeshRenderPipelineDescriptorEEvPT_P18AGXG17FamilyDevicembbU13block_pointerFvPNS1_20ObjectProgramVariantE13ReflectionKey16MTLCompilerErrorP8NSStringE_block_invoke;
    *((void *)&v96 + 1) = &unk_26516F040;
    BOOL v97 = (uint64_t *)a2;
    int v98 = (long long *)a3;
    int v99 = (os_unfair_lock_s *)&v89;
    char v100 = &v131;
    uint64_t v101 = &v71;
    int v37 = v36[1];
    uint64_t v38 = objc_opt_new();
    [v38 setSync:1];
    [v38 setPipelineCache:v37];
    [v38 setBinaryArchives:0];
    *(void *)&long long v133 = MEMORY[0x263EF8330];
    *((void *)&v133 + 1) = 3221225472;
    *(void *)&long long v134 = ___ZN3AGX8Compiler14compileProgramINS_27PassthroughObjectProgramKeyEEEvRKT_P7NSArrayIPU27objcproto16MTLBinaryArchive11objc_objectEU13block_pointerFvRK20AGCDeserializedReply16MTLCompilerErrorP8NSStringEb_block_invoke;
    *((void *)&v134 + 1) = &unk_26516F7C0;
    p_long long block = (void (*)(uint64_t))&block;
    AGX::Compiler::compileProgram<AGX::PassthroughObjectProgramKey,AGCDeserializedReply>(v36, (uint64_t)&v115, v38, (uint64_t)&v133);

    uint64_t v39 = *(void *)(v90 + 24);
    long long v133 = 0u;
    long long v134 = 0u;
    (*(void (**)(uint64_t, uint64_t, long long *, void, uint64_t (**)()))(a13 + 16))(a13, v39, &v133, *(void *)(*((void *)&v131 + 1) + 24), v72[5]);
    uint64_t v115 = &unk_26F851D38;
    if (v117)
    {
      v118 = v117;
      operator delete(v117);
    }
    _Block_object_dispose(&v71, 8);
    _Block_object_dispose(&v131, 8);
    int v40 = &v89;
    goto LABEL_68;
  }
  memset(v94, 0, sizeof(v94));
  (*(void (**)(uint64_t, void, unsigned char *, void, __CFString *))(a13 + 16))(a13, 0, v94, 0, &stru_26F8544F8);
}

void sub_2429F68A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,char a44)
{
  AGX::ObjectProgramKey::~ObjectProgramKey(v44);
  AGX::ObjectProgramKey::~ObjectProgramKey((AGX::ObjectProgramKey *)&a24);
  _Block_object_dispose((const void *)(v45 - 176), 8);
  _Unwind_Resume(a1);
}

void ___ZN3AGX23UserCommonShaderFactoryINS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE26createObjectProgramVariantI31MTLMeshRenderPipelineDescriptorEEvPT_P18AGXG17FamilyDevicemP25AGXG17FamilyBinaryArchivePU27objcproto16OS_dispatch_data8NSObjectP7NSArrayPNS1_13ObjectProgramESG_bbbU13block_pointerFvPNS1_20ObjectProgramVariantE13ReflectionKey16MTLCompilerErrorP8NSStringE_block_invoke(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v7 = *(void *)(a3 + 40);
  uint64_t v6 = *(__CFString **)(a3 + 48);
  *(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) = objc_alloc_init(MEMORY[0x263EFF9A0]);
  AGX::UserShaderFactory<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::fillCompilePerformanceStatisticsDictionary(*(NSObject **)a3, *(void *)(a3 + 8), *(void **)(*(void *)(*(void *)(a1 + 56) + 8) + 40), *(void *)(a3 + 56), [*(id *)(a1 + 32) name], *(unsigned char *)(a1 + 104));
  uint64_t v8 = *(void **)(*(void *)(*(void *)(a1 + 56) + 8) + 40);
  if (v8)
  {
    uint64_t v9 = (void *)[v8 objectForKey:*MEMORY[0x263F12630]];
    if (v9) {
      [v9 unsignedLongLongValue];
    }
  }
  if (*(_DWORD *)*MEMORY[0x263F4B1E8]) {
    IOGPUDeviceTraceEvent();
  }
  if (v7)
  {
    char v10 = 1;
    goto LABEL_21;
  }
  if (a2[33])
  {
    uint64_t v11 = a2 + 33;
    if (!a2[34]) {
      uint64_t v11 = a2 + 103;
    }
    if (!*v11) {
      goto LABEL_16;
    }
  }
  else
  {
    uint64_t v11 = a2 + 103;
    if (!a2[103]) {
      goto LABEL_16;
    }
  }
  if (v11[1])
  {
    char v10 = 0;
    uint64_t v6 = @"Internal error during function compilation";
    goto LABEL_20;
  }
LABEL_16:
  if (!*(unsigned char *)(a1 + 105)
    || (AGX::ProgramBindingRemap<AGX::HAL200::Encoders,AGX::HAL200::Classes>::isShaderExecuteIndirectCompatible(a2, 0) & 1) != 0)
  {
    uint64_t v7 = 0;
    char v10 = 1;
    goto LABEL_21;
  }
  char v10 = 0;
  uint64_t v6 = @"Object shader cannot be used with indirect command buffers";
LABEL_20:
  uint64_t v7 = 2;
LABEL_21:
  AGX::Program<AGX::HAL200::ObjectProgramVariant,AGX::ObjectProgramKey,AGX::HAL200::IndirectArgumentLayout,AGXG17FamilyIndirectArgumentBufferLayout>::signalPending(*(void *)(a1 + 80), *(void *)(a1 + 88), *(NSObject **)(a3 + 16), a1 + 106, *(void **)(a1 + 40), 8, v7);
  if (!v7)
  {
    [*(id *)(a1 + 48) needsCustomBorderColorSamplers];
    uint64_t v12 = (void *)[*(id *)(a1 + 48) profileControl];
    if (v12)
    {
      char v13 = v12;
      [v12 uscCliqueTraceLevel];
      [v13 uscEmitPosition];
      [v13 uscEmitThreadControlFlow];
    }
    operator new();
  }
  uint64_t v14 = *(void *)(a1 + 72);
  uint64_t v15 = *(void **)(a3 + 32);
  int v16 = *(unsigned __int8 *)(a1 + 138);
  *(void *)(v14 + 8) = 0;
  *(void *)(v14 + 16) = v7;

  *(void *)(v14 + 24) = [(__CFString *)v6 copy];
  if (*(void *)(v14 + 8))
  {

    *(void *)(v14 + 32) = v15;
  }
  else
  {
    if (v16) {
      char v17 = v10;
    }
    else {
      char v17 = 0;
    }
    *(unsigned char *)(v14 + 40) = v17;
  }
  dispatch_group_leave(*(dispatch_group_t *)v14);
}

void sub_2429F6E8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  AGX::ProgramBindingRemap<AGX::HAL200::Encoders,AGX::HAL200::Classes>::~ProgramBindingRemap((uint64_t)va);
  if (*(char *)(v8 - 97) < 0) {
    operator delete(*(void **)(v8 - 120));
  }
  MEMORY[0x24566ED90](v7, 0x10F3C4038D9C7E2);
  _Unwind_Resume(a1);
}

void ___ZN3AGX23UserCommonShaderFactoryINS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE26createObjectProgramVariantI31MTLMeshRenderPipelineDescriptorEEvPT_P18AGXG17FamilyDevicemP25AGXG17FamilyBinaryArchivePU27objcproto16OS_dispatch_data8NSObjectP7NSArrayPNS1_13ObjectProgramESG_bbbU13block_pointerFvPNS1_20ObjectProgramVariantE13ReflectionKey16MTLCompilerErrorP8NSStringE_block_invoke_2(uint64_t a1, uint64_t a2, NSObject *a3)
{
  AGX::Program<AGX::HAL200::ObjectProgramVariant,AGX::ObjectProgramKey,AGX::HAL200::IndirectArgumentLayout,AGXG17FamilyIndirectArgumentBufferLayout>::signalPending(*(void *)(a1 + 40), *(void *)(a1 + 48), a3, a1 + 64, *(void **)(a1 + 32), 7, a2);
  uint64_t v4 = **(NSObject ***)(a1 + 56);

  dispatch_group_leave(v4);
}

void ___ZN3AGX23UserCommonShaderFactoryINS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE26createObjectProgramVariantI31MTLMeshRenderPipelineDescriptorEEvPT_P18AGXG17FamilyDevicemP25AGXG17FamilyBinaryArchivePU27objcproto16OS_dispatch_data8NSObjectP7NSArrayPNS1_13ObjectProgramESG_bbbU13block_pointerFvPNS1_20ObjectProgramVariantE13ReflectionKey16MTLCompilerErrorP8NSStringE_block_invoke_3(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  *(_OWORD *)dispatch_object_t object = 0u;
  memset(v7, 0, 26);
  id v2 = (void *)AGX::Program<AGX::HAL200::ObjectProgramVariant,AGX::ObjectProgramKey,AGX::HAL200::IndirectArgumentLayout,AGXG17FamilyIndirectArgumentBufferLayout>::consolidate(*(os_unfair_lock_s **)(a1 + 48), *(void *)(a1 + 56), a1 + 64, (uint64_t)object);
  uint64_t v3 = v2[1];
  uint64_t v4 = *(void *)(a1 + 32);
  long long v5 = *(_OWORD *)(a1 + 240);
  v8[0] = *(_OWORD *)(a1 + 224);
  v8[1] = v5;
  (*(void (**)(uint64_t, uint64_t, _OWORD *, void, void))(v4 + 16))(v4, v3, v8, v2[2], v2[3]);

  if (object[0]) {
    dispatch_release(object[0]);
  }
  if (object[1]) {
    (*((void (**)(dispatch_object_t))object[1]->isa + 1))(object[1]);
  }
}

void sub_2429F701C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t ___ZN3AGX23UserCommonShaderFactoryINS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE37createObjectProgramPassThroughVariantI31MTLMeshRenderPipelineDescriptorEEvPT_P18AGXG17FamilyDevicembbU13block_pointerFvPNS1_20ObjectProgramVariantE13ReflectionKey16MTLCompilerErrorP8NSStringE_block_invoke(uint64_t result, void *a2, uint64_t a3, __CFString *a4)
{
  if (!a3)
  {
    if (a2[33])
    {
      long long v5 = a2 + 33;
      if (!a2[34]) {
        long long v5 = a2 + 103;
      }
    }
    else
    {
      long long v5 = a2 + 103;
    }
    uint64_t v7 = *v5;
    uint64_t v6 = v5[1];
    if (v7) {
      BOOL v8 = v6 == 0;
    }
    else {
      BOOL v8 = 1;
    }
    if (v8)
    {
      [*(id *)(result + 32) supportIndirectCommandBuffers];
      operator new();
    }
    a4 = @"Internal error during function compilation";
    a3 = 2;
  }
  *(void *)(*(void *)(*(void *)(result + 56) + 8) + 24) = a3;
  *(void *)(*(void *)(*(void *)(result + 64) + 8) + 40) = a4;
  return result;
}

void sub_2429F7240(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  AGX::ProgramBindingRemap<AGX::HAL200::Encoders,AGX::HAL200::Classes>::~ProgramBindingRemap((uint64_t)va);
  if (*(char *)(v5 - 73) < 0) {
    operator delete(*(void **)(v5 - 96));
  }
  MEMORY[0x24566ED90](v4, 0x10F3C4038D9C7E2);
  _Unwind_Resume(a1);
}

uint64_t ___ZN3AGX23UserCommonShaderFactoryINS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE23constructRenderPipelineI31MTLMeshRenderPipelineDescriptorEEvP12_MTLFunctionPNS1_22FragmentProgramVariantERK13ReflectionKeyS9_PNS1_20VertexProgramVariantESE_S9_PNS1_20ObjectProgramVariantESE_S9_PNS1_18MeshProgramVariantESE_P7NSArrayIPU28objcproto17MTLDynamicLibrary11objc_objectESP_SP_SP_P18AGXG17FamilyDevicePU27objcproto16OS_dispatch_data8NSObjectSU_SU_PT_mbbyP19NSMutableDictionarySY_U13block_pointerFvPU33objcproto22MTLRenderPipelineState11objc_objectP27MTLRenderPipelineReflectionP7NSErrorE_block_invoke(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) setVertexDebugInstrumentationData:a2];
}

uint64_t ___ZN3AGX23UserCommonShaderFactoryINS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE23constructRenderPipelineI31MTLMeshRenderPipelineDescriptorEEvP12_MTLFunctionPNS1_22FragmentProgramVariantERK13ReflectionKeyS9_PNS1_20VertexProgramVariantESE_S9_PNS1_20ObjectProgramVariantESE_S9_PNS1_18MeshProgramVariantESE_P7NSArrayIPU28objcproto17MTLDynamicLibrary11objc_objectESP_SP_SP_P18AGXG17FamilyDevicePU27objcproto16OS_dispatch_data8NSObjectSU_SU_PT_mbbyP19NSMutableDictionarySY_U13block_pointerFvPU33objcproto22MTLRenderPipelineState11objc_objectP27MTLRenderPipelineReflectionP7NSErrorE_block_invoke_2(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) setFragmentDebugInstrumentationData:a2];
}

uint64_t ___ZN3AGX23UserCommonShaderFactoryINS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE23constructRenderPipelineI31MTLMeshRenderPipelineDescriptorEEvP12_MTLFunctionPNS1_22FragmentProgramVariantERK13ReflectionKeyS9_PNS1_20VertexProgramVariantESE_S9_PNS1_20ObjectProgramVariantESE_S9_PNS1_18MeshProgramVariantESE_P7NSArrayIPU28objcproto17MTLDynamicLibrary11objc_objectESP_SP_SP_P18AGXG17FamilyDevicePU27objcproto16OS_dispatch_data8NSObjectSU_SU_PT_mbbyP19NSMutableDictionarySY_U13block_pointerFvPU33objcproto22MTLRenderPipelineState11objc_objectP27MTLRenderPipelineReflectionP7NSErrorE_block_invoke_3(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) setMeshDebugInstrumentationData:a2];
}

uint64_t ___ZN3AGX23UserCommonShaderFactoryINS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE23constructRenderPipelineI31MTLMeshRenderPipelineDescriptorEEvP12_MTLFunctionPNS1_22FragmentProgramVariantERK13ReflectionKeyS9_PNS1_20VertexProgramVariantESE_S9_PNS1_20ObjectProgramVariantESE_S9_PNS1_18MeshProgramVariantESE_P7NSArrayIPU28objcproto17MTLDynamicLibrary11objc_objectESP_SP_SP_P18AGXG17FamilyDevicePU27objcproto16OS_dispatch_data8NSObjectSU_SU_PT_mbbyP19NSMutableDictionarySY_U13block_pointerFvPU33objcproto22MTLRenderPipelineState11objc_objectP27MTLRenderPipelineReflectionP7NSErrorE_block_invoke_4(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) setObjectDebugInstrumentationData:a2];
}

void ___ZN3AGX23UserCommonShaderFactoryINS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE36populateRenderPipelineDescriptorInfoI31MTLMeshRenderPipelineDescriptorEEbRNS5_28RenderPipelineDescriptorInfoEPT_mP18AGXG17FamilyDeviceRP7NSError_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*(void *)v2)
  {
    uint64_t v3 = [*(id *)v2 vendorPrivate];
    uint64_t v4 = (AGXG17FamilyComputeOrFragmentOrTileProgram *)v3;
    if (v3)
    {
      frag = *(AGXG17FamilyFragmentProgram **)(v3 + 16);
      if (frag)
      {
LABEL_5:
        *(void *)(*(void *)(a1 + 32) + 32) = &frag->_impl;
        uint64_t v2 = *(void *)(a1 + 32);
        goto LABEL_6;
      }
    }
    else
    {
      uint64_t v4 = objc_alloc_init(AGXG17FamilyComputeOrFragmentOrTileProgram);
      [**(id **)(a1 + 32) setVendorPrivate:v4];

      frag = v4->_frag;
      if (frag) {
        goto LABEL_5;
      }
    }
    frag = objc_alloc_init(AGXG17FamilyFragmentProgram);
    v4->_frag = frag;
    goto LABEL_5;
  }
LABEL_6:
  uint64_t v6 = *(void **)(v2 + 16);
  if (v6)
  {
    uint64_t v7 = (AGXG17FamilyMeshProgram *)[v6 vendorPrivate];
    if (!v7)
    {
      uint64_t v7 = objc_alloc_init(AGXG17FamilyMeshProgram);
      [*(id *)(*(void *)(a1 + 32) + 16) setVendorPrivate:v7];
    }
    *(void *)(*(void *)(a1 + 32) + 48) = &v7->_impl;
    BOOL v8 = *(void **)(*(void *)(a1 + 32) + 24);
    if (v8)
    {
      uint64_t v9 = (AGXG17FamilyObjectProgram *)[v8 vendorPrivate];
      if (!v9)
      {
        uint64_t v9 = objc_alloc_init(AGXG17FamilyObjectProgram);
        [*(id *)(*(void *)(a1 + 32) + 24) setVendorPrivate:v9];
      }
      *(void *)(*(void *)(a1 + 32) + 56) = &v9->_impl;
    }
  }
  else
  {
    char v10 = (AGXG17FamilyVertexProgram *)[*(id *)(v2 + 8) vendorPrivate];
    if (!v10)
    {
      char v10 = objc_alloc_init(AGXG17FamilyVertexProgram);
      [*(id *)(*(void *)(a1 + 32) + 8) setVendorPrivate:v10];
    }
    *(void *)(*(void *)(a1 + 32) + 40) = &v10->_impl;
  }
}

void sub_2429F7BC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

AGXG17FamilySampler *AGX::Device<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::findOrCreateSampler(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  BOOL v8 = (os_unfair_lock_s *)(a1 + 7528);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 7528));
  uint64_t v9 = (uint64_t **)(a1 + 7544);
  uint64_t v10 = *(void *)(a1 + 7544);
  if (!v10) {
    goto LABEL_9;
  }
  uint64_t v11 = a1 + 7544;
  do
  {
    BOOL v12 = AGX::SamplerDescriptor::operator<((unsigned __int16 *)(v10 + 32), (unsigned __int16 *)a2);
    char v13 = (uint64_t *)(v10 + 8);
    if (!v12)
    {
      char v13 = (uint64_t *)v10;
      uint64_t v11 = v10;
    }
    uint64_t v10 = *v13;
  }
  while (*v13);
  if ((uint64_t **)v11 == v9
    || AGX::SamplerDescriptor::operator<((unsigned __int16 *)a2, (unsigned __int16 *)(v11 + 32))
    || (WeakRetained = (AGXG17FamilySampler *)objc_loadWeakRetained((id *)(v11 + 104))) == 0)
  {
LABEL_9:
    if (a4)
    {
      uint64_t v15 = 0;
    }
    else
    {
      id v16 = objc_alloc_init(MEMORY[0x263F129F8]);
      a4 = v16;
      uint64_t v17 = 1;
      if ((*(_WORD *)a2 & 0x40) != 0) {
        uint64_t v17 = 2;
      }
      if ((*(_WORD *)a2 & 0x20) != 0) {
        uint64_t v18 = v17;
      }
      else {
        uint64_t v18 = 0;
      }
      [v16 setMipFilter:v18];
      unsigned int v19 = (*(_WORD *)a2 & 0xF) - 2;
      if (v19 > 6) {
        uint64_t v20 = 0;
      }
      else {
        uint64_t v20 = qword_242EB3500[v19];
      }
      [a4 setCompareFunction:v20];
      [a4 setMaxAnisotropy:*(_DWORD *)(a2 + 4) & 0x1FLL];
      [a4 setSAddressMode:*(_DWORD *)(a2 + 4) >> 5];
      [a4 setTAddressMode:((unint64_t)*(unsigned int *)(a2 + 4) >> 8) & 7];
      [a4 setRAddressMode:((unint64_t)*(unsigned int *)(a2 + 4) >> 11) & 7];
      [a4 setNormalizedCoordinates:(*(_DWORD *)(a2 + 4) >> 14) & 1];
      [a4 setLodAverage:(*(_DWORD *)(a2 + 4) >> 15) & 1];
      [a4 setMinFilter:*(_WORD *)(a2 + 6) & 3];
      [a4 setMagFilter:((unint64_t)*(unsigned int *)(a2 + 4) >> 18) & 3];
      [a4 setSupportArgumentBuffers:(*(_DWORD *)(a2 + 4) >> 20) & 1];
      [a4 setForceSeamsOnCubemapFiltering:HIBYTE(*(_DWORD *)(a2 + 4)) & 1];
      [a4 setBorderColor:((unint64_t)*(unsigned int *)(a2 + 4) >> 21) & 3];
      objc_msgSend(a4, "setCustomBorderColorValue_0:", *(unsigned int *)(a2 + 20));
      objc_msgSend(a4, "setCustomBorderColorValue_1:", *(unsigned int *)(a2 + 24));
      objc_msgSend(a4, "setCustomBorderColorValue_2:", *(unsigned int *)(a2 + 28));
      objc_msgSend(a4, "setCustomBorderColorValue_3:", *(unsigned int *)(a2 + 32));
      [a4 setPixelFormat:*(void *)(a2 + 40)];
      LODWORD(v21) = *(_DWORD *)(a2 + 8);
      [a4 setLodMinClamp:v21];
      LODWORD(v22) = *(_DWORD *)(a2 + 12);
      [a4 setLodMaxClamp:v22];
      LODWORD(v23) = *(_DWORD *)(a2 + 16);
      [a4 setLodBias:v23];
      uint64_t v15 = a4;
    }
    WeakRetained = [[AGXG17FamilySampler alloc] initWithDevice:a3 samplerDescriptor:a4 driverDescriptor:a2 initialQOSOverride:*(unsigned int *)(a1 + 7584)];
    int v24 = *v9;
    uint64_t v25 = (uint64_t **)(a1 + 7544);
    if (*v9)
    {
      while (1)
      {
        while (1)
        {
          uint64_t v25 = (uint64_t **)v24;
          uint64_t v26 = (unsigned __int16 *)(v24 + 4);
          if (!AGX::SamplerDescriptor::operator<((unsigned __int16 *)a2, (unsigned __int16 *)v24 + 16)) {
            break;
          }
          int v24 = *v25;
          uint64_t v9 = v25;
          if (!*v25) {
            goto LABEL_26;
          }
        }
        if (!AGX::SamplerDescriptor::operator<(v26, (unsigned __int16 *)a2)) {
          break;
        }
        uint64_t v9 = v25 + 1;
        int v24 = v25[1];
        if (!v24) {
          goto LABEL_26;
        }
      }
      uint64_t v28 = (id *)v25;
    }
    else
    {
LABEL_26:
      uint64_t v27 = (char *)operator new(0x70uLL);
      uint64_t v28 = (id *)v27;
      long long v29 = *(_OWORD *)(a2 + 16);
      *((_OWORD *)v27 + 2) = *(_OWORD *)a2;
      *((_OWORD *)v27 + 3) = v29;
      *((_OWORD *)v27 + 4) = *(_OWORD *)(a2 + 32);
      if (*(char *)(a2 + 71) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)(v27 + 80), *(const std::string::value_type **)(a2 + 48), *(void *)(a2 + 56));
      }
      else
      {
        *((_OWORD *)v27 + 5) = *(_OWORD *)(a2 + 48);
        *((void *)v27 + 12) = *(void *)(a2 + 64);
      }
      objc_initWeak(v28 + 13, 0);
      id *v28 = 0;
      v28[1] = 0;
      v28[2] = v25;
      AGXG17FamilyObjectProgram *v9 = (uint64_t *)v28;
      uint64_t v30 = **(void **)(a1 + 7536);
      int v31 = (uint64_t *)v28;
      if (v30)
      {
        *(void *)(a1 + 7536) = v30;
        int v31 = *v9;
      }
      std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 7544), v31);
      ++*(void *)(a1 + 7552);
    }
    objc_storeWeak(v28 + 13, WeakRetained);
  }
  os_unfair_lock_unlock(v8);
  return WeakRetained;
}

void sub_2429F7F48(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_2429F893C(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_2429F914C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_2429FB73C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_unfair_lock_t lock)
{
  os_unfair_lock_unlock(v10);
  _Unwind_Resume(a1);
}

void sub_2429FB78C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void *a44,uint64_t a45)
{
  dispatch_release(*(dispatch_object_t *)(v46 - 144));
  *(void *)(v46 - 240) = v45;
  char v48 = *(void **)(v46 - 224);
  if (v48)
  {
    *(void *)(v46 - 216) = v48;
    operator delete(v48);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void ___ZN3AGX6DeviceINS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE13setupDeferredEP18AGXG17FamilyDevice_block_invoke_45(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (os_unfair_lock_trylock((os_unfair_lock_t)(v1 + 8028)))
  {
    if (*(int *)(v1 + 8024) <= 0)
    {
      v2.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
      if (!*(unsigned char *)(v1 + 7432))
      {
        float v3 = (float)((float)(v2.__d_.__rep_ - *(void *)(v1 + 7424)) + -3000000.0) / 1000000.0;
        if (v3 > 0.0)
        {
          if (v3 < 10.0)
          {
            float v4 = 1.0 / fmaxf(10.0 - v3, 1.0);
          }
          else
          {
            *(unsigned char *)(v1 + 7432) = 1;
            float v4 = 1.0;
          }
          AGX::Device<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::purgeDevice(v1, v4);
        }
      }
    }
    os_unfair_lock_unlock((os_unfair_lock_t)(v1 + 8028));
  }
}

void ___ZN3AGX6DeviceINS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE13setupDeferredEP18AGXG17FamilyDevice_block_invoke_2(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uintptr_t data = dispatch_source_get_data(*(dispatch_source_t *)(v1 + 8048));
  if (data == 2)
  {
    AGX::PooledAllocator<8u>::shrink((os_unfair_lock_s *)(v1 + 6624), 0.1);
    AGX::PooledAllocator<8u>::shrink((os_unfair_lock_s *)(v1 + 6704), 0.1);
    AGX::PooledAllocator<16u>::shrink((os_unfair_lock_s *)(v1 + 6784), 0.1);
    AGX::PooledAllocator<8u>::shrink((os_unfair_lock_s *)(v1 + 6928), 0.1);
    AGX::PooledAllocator<8u>::shrink((os_unfair_lock_s *)(v1 + 7008), 0.1);
    AGX::PooledAllocator<8u>::shrink((os_unfair_lock_s *)(v1 + 7088), 0.1);
  }
  else if (data == 4)
  {
    AGX::Device<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::purgeDevice(v1, 1.0);
  }
}

void ___ZN3AGX6DeviceINS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE13setupDeferredEP18AGXG17FamilyDevice_block_invoke_3(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  std::chrono::system_clock::time_point v2 = *(os_unfair_lock_s **)v1;
  float v3 = (os_unfair_lock_s *)(v1 + 7712);
  os_unfair_lock_lock((os_unfair_lock_t)(v1 + 7712));
  if (atomic_load(&AGX::BackgroundObjectProgramVariant<AGX::HAL200::Encoders,AGX::HAL200::Classes>::liveUberVariantUses)) {
    goto LABEL_34;
  }
  double v23 = v2;
  {
    AGX::BackgroundObjectProgramVariant<AGX::HAL200::Encoders,AGX::HAL200::Classes>::enumerateUberKeys(void)::uberKeys = (uint64_t)&unk_26F852AF8;
    qword_268D59D88 = (uint64_t)&unk_26F852AF8;
    dword_268D59D38 = 13;
    xmmword_268D59D40 = 0u;
    unk_268D59D50 = 0u;
    *(long long *)((char *)&xmmword_268D59D58 + 8) = 0u;
    qword_268D59D70 = 0;
    *(void *)&xmmword_268D59D78 = 4096;
    *((void *)&xmmword_268D59D78 + 1) = 0x10000000000;
    dword_268D59D90 = 13;
    *(_OWORD *)&qword_268D59D98 = 0u;
    unk_268D59DA8 = 0u;
    *(long long *)((char *)&xmmword_268D59DB0 + 8) = 0u;
    qword_268D59DC8 = 0;
    *(void *)&xmmword_268D59DD0 = 0x2000;
    *((void *)&xmmword_268D59DD0 + 1) = 0x10000000000;
    unk_268D59DE0 = &unk_26F852AF8;
    dword_268D59DE8 = 13;
    qword_268D59E20 = 0;
    xmmword_268D59E00 = 0u;
    unk_268D59E10 = 0u;
    xmmword_268D59DF0 = 0u;
    *(void *)&xmmword_268D59E28 = 0x4000;
    *((void *)&xmmword_268D59E28 + 1) = 0x10000000000;
    __cxa_atexit((void (*)(void *))std::array<AGX::BackgroundObjectProgramKey,3ul>::~array, &AGX::BackgroundObjectProgramVariant<AGX::HAL200::Encoders,AGX::HAL200::Classes>::enumerateUberKeys(void)::uberKeys, &dword_2427AD000);
  }
  int v24 = v3;
  unsigned int v33 = &unk_26F852B38;
  int v5 = dword_268D59D38;
  int v34 = dword_268D59D38;
  int v36 = 0;
  int v37 = 0;
  int v35 = 0;
  uint64_t v6 = (const void *)xmmword_268D59D40;
  int64_t v7 = *((void *)&xmmword_268D59D40 + 1) - xmmword_268D59D40;
  if (*((void *)&xmmword_268D59D40 + 1) == (void)xmmword_268D59D40)
  {
    uint64_t v9 = 0;
    BOOL v8 = 0;
  }
  else
  {
    if (v7 < 0) {
      goto LABEL_38;
    }
    BOOL v8 = (char *)operator new(*((void *)&xmmword_268D59D40 + 1) - xmmword_268D59D40);
    int v35 = v8;
    uint64_t v9 = &v8[4 * (v7 >> 2)];
    int v37 = v9;
    memcpy(v8, v6, v7);
    int v36 = v9;
  }
  long long v38 = xmmword_268D59D58;
  unsigned int v33 = &unk_26F852AF8;
  long long v39 = *(_OWORD *)algn_268D59D68;
  long long v40 = xmmword_268D59D78;
  uint64_t v41 = &unk_26F852B38;
  int v42 = dword_268D59D90;
  BOOL v44 = 0;
  uint64_t v45 = 0;
  uint64_t v43 = 0;
  uint64_t v10 = (const void *)qword_268D59D98;
  int64_t v11 = unk_268D59DA0 - qword_268D59D98;
  if (unk_268D59DA0 != qword_268D59D98)
  {
    if (v11 < 0) {
      goto LABEL_38;
    }
    uint64_t v43 = operator new(unk_268D59DA0 - qword_268D59D98);
    uint64_t v45 = (char *)v43 + 4 * (v11 >> 2);
    memcpy(v43, v10, v11);
    BOOL v44 = v45;
  }
  uint64_t v41 = &unk_26F852AF8;
  long long v46 = xmmword_268D59DB0;
  long long v47 = unk_268D59DC0;
  long long v48 = xmmword_268D59DD0;
  uint64_t v49 = &unk_26F852B38;
  int v50 = dword_268D59DE8;
  unsigned __int16 v52 = 0;
  int v53 = 0;
  char v51 = 0;
  BOOL v12 = (const void *)xmmword_268D59DF0;
  int64_t v13 = *((void *)&xmmword_268D59DF0 + 1) - xmmword_268D59DF0;
  if (*((void *)&xmmword_268D59DF0 + 1) == (void)xmmword_268D59DF0) {
    goto LABEL_13;
  }
  if (v13 < 0) {
LABEL_38:
  }
    abort();
  char v51 = operator new(*((void *)&xmmword_268D59DF0 + 1) - xmmword_268D59DF0);
  int v53 = (char *)v51 + 4 * (v13 >> 2);
  memcpy(v51, v12, v13);
  unsigned __int16 v52 = v53;
LABEL_13:
  long long v54 = *(long long *)((char *)&xmmword_268D59E00 + 8);
  uint64_t v49 = &unk_26F852AF8;
  long long v55 = unk_268D59E18;
  long long v56 = xmmword_268D59E28;
  uint64_t v25 = &unk_26F852B38;
  int v26 = v5;
  uint64_t v28 = 0;
  long long v29 = 0;
  std::string __p = 0;
  int64_t v14 = v9 - v8;
  if (v9 != v8)
  {
    if (v14 < 0) {
      goto LABEL_35;
    }
    uint64_t v15 = (char *)operator new(v9 - v8);
    id v16 = &v15[4 * (v14 >> 2)];
    std::string __p = v15;
    long long v29 = v16;
    memcpy(v15, v8, v14);
    uint64_t v28 = v16;
  }
  uint64_t v25 = &unk_26F852AF8;
  long long v30 = xmmword_268D59D58;
  long long v31 = *(_OWORD *)algn_268D59D68;
  long long v32 = xmmword_268D59D78;
  AGX::Program<AGX::HAL200::BackgroundObjectProgramVariant,AGX::BackgroundObjectProgramKey,AGX::HAL200::IndirectArgumentLayout,AGXG17FamilyIndirectArgumentBufferLayout>::pruneVariant(v2, (uint64_t)&v25);
  uint64_t v25 = &unk_26F852B38;
  if (__p)
  {
    uint64_t v28 = __p;
    operator delete(__p);
  }
  uint64_t v25 = &unk_26F852B38;
  int v26 = v42;
  uint64_t v28 = 0;
  long long v29 = 0;
  std::string __p = 0;
  uint64_t v17 = v43;
  int64_t v18 = v44 - (unsigned char *)v43;
  if (v44 != v43)
  {
    if (v18 < 0) {
      goto LABEL_35;
    }
    std::string __p = operator new(v44 - (unsigned char *)v43);
    uint64_t v28 = __p;
    unsigned int v19 = (char *)__p + 4 * (v18 >> 2);
    long long v29 = v19;
    memcpy(__p, v17, v18);
    uint64_t v28 = v19;
  }
  uint64_t v25 = &unk_26F852AF8;
  long long v30 = v46;
  long long v31 = v47;
  long long v32 = v48;
  AGX::Program<AGX::HAL200::BackgroundObjectProgramVariant,AGX::BackgroundObjectProgramKey,AGX::HAL200::IndirectArgumentLayout,AGXG17FamilyIndirectArgumentBufferLayout>::pruneVariant(v2, (uint64_t)&v25);
  uint64_t v25 = &unk_26F852B38;
  if (__p)
  {
    uint64_t v28 = __p;
    operator delete(__p);
  }
  uint64_t v25 = &unk_26F852B38;
  int v26 = v50;
  uint64_t v28 = 0;
  long long v29 = 0;
  std::string __p = 0;
  uint64_t v20 = v51;
  int64_t v21 = v52 - (unsigned char *)v51;
  if (v52 == v51) {
    goto LABEL_26;
  }
  if (v21 < 0) {
LABEL_35:
  }
    abort();
  std::string __p = operator new(v52 - (unsigned char *)v51);
  uint64_t v28 = __p;
  double v22 = (char *)__p + 4 * (v21 >> 2);
  long long v29 = v22;
  memcpy(__p, v20, v21);
  uint64_t v28 = v22;
LABEL_26:
  uint64_t v25 = &unk_26F852AF8;
  long long v30 = v54;
  long long v31 = v55;
  long long v32 = v56;
  AGX::Program<AGX::HAL200::BackgroundObjectProgramVariant,AGX::BackgroundObjectProgramKey,AGX::HAL200::IndirectArgumentLayout,AGXG17FamilyIndirectArgumentBufferLayout>::pruneVariant(v23, (uint64_t)&v25);
  uint64_t v25 = &unk_26F852B38;
  if (__p)
  {
    uint64_t v28 = __p;
    operator delete(__p);
  }
  uint64_t v49 = &unk_26F852B38;
  float v3 = v24;
  if (v51)
  {
    unsigned __int16 v52 = v51;
    operator delete(v51);
  }
  uint64_t v41 = &unk_26F852B38;
  if (v43)
  {
    BOOL v44 = v43;
    operator delete(v43);
  }
  unsigned int v33 = &unk_26F852B38;
  if (v35)
  {
    int v36 = v35;
    operator delete(v35);
  }
LABEL_34:
  os_unfair_lock_unlock(v3);
}

void sub_2429FC050(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, os_unfair_lock_t lock, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *__p,uint64_t a50)
{
  if (__p) {
    operator delete(__p);
  }
  if (a38) {
    operator delete(a38);
  }
  if (a27) {
    operator delete(a27);
  }
  os_unfair_lock_unlock(lock);
  _Unwind_Resume(a1);
}

void ___ZN3AGX6DeviceINS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE13setupDeferredEP18AGXG17FamilyDevice_block_invoke_4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  std::chrono::system_clock::time_point v2 = *(os_unfair_lock_s **)(v1 + 8);
  float v3 = (os_unfair_lock_s *)(v1 + 7716);
  os_unfair_lock_lock((os_unfair_lock_t)(v1 + 7716));
  if (atomic_load(&AGX::EndOfTileProgramVariant<AGX::HAL200::Encoders,AGX::HAL200::Classes>::liveUberVariantUses)) {
    goto LABEL_44;
  }
  {
    AGX::EndOfTileProgramVariant<AGX::HAL200::Encoders,AGX::HAL200::Classes>::enumerateUberKeys(void)::uberKeys = (uint64_t)&unk_26F853C08;
    qword_268D59EC8 = (uint64_t)&unk_26F853C08;
    qword_268D59F48 = (uint64_t)&unk_26F853C08;
    qword_268D59FC8 = (uint64_t)&unk_26F853C08;
    dword_268D59E50 = 19;
    xmmword_268D59E58 = 0u;
    unk_268D59E68 = 0u;
    *(long long *)((char *)&xmmword_268D59E70 + 8) = 0u;
    unk_268D59E88 = 0u;
    *(long long *)((char *)&xmmword_268D59E90 + 8) = 0u;
    unk_268D59EA8 = 0u;
    *((void *)&xmmword_268D59EB0 + 1) = 0x200000000000000;
    dword_268D59EC0 = 0;
    word_268D59EC4 = 0;
    dword_268D59F50 = 19;
    qword_268D59F60 = 0;
    unk_268D59F68 = 0;
    qword_268D59F58 = 0;
    LODWORD(xmmword_268D59F70) = 0x2000000;
    *(long long *)((char *)&xmmword_268D59F70 + 4) = 0u;
    unk_268D59F84 = 0u;
    *(long long *)((char *)&xmmword_268D59F90 + 4) = 0u;
    unk_268D59FA4 = 0u;
    DWORD1(xmmword_268D59FB0) = 0;
    *((void *)&xmmword_268D59FB0 + 1) = 0x200000000000000;
    dword_268D59FC0 = 0;
    word_268D59FC4 = 0;
    dword_268D59ED0 = 19;
    qword_268D59EE0 = 0;
    unk_268D59EE8 = 0;
    qword_268D59ED8 = 0;
    LODWORD(xmmword_268D59EF0) = 1;
    *(long long *)((char *)&xmmword_268D59EF0 + 4) = 0u;
    unk_268D59F04 = 0u;
    *(long long *)((char *)&xmmword_268D59F10 + 4) = 0u;
    unk_268D59F24 = 0u;
    DWORD1(xmmword_268D59F30) = 0;
    *((void *)&xmmword_268D59F30 + 1) = 0x200000000000000;
    word_268D59F44 = 0;
    dword_268D59F40 = 0;
    dword_268D59FD0 = 19;
    qword_268D59FD8 = 0;
    unk_268D59FE0 = 0;
    qword_268D59FE8 = 0;
    LODWORD(xmmword_268D59FF0) = 33554433;
    DWORD1(xmmword_268D5A030) = 0;
    unk_268D5A024 = 0u;
    *(long long *)((char *)&xmmword_268D5A010 + 4) = 0u;
    unk_268D5A004 = 0u;
    *(long long *)((char *)&xmmword_268D59FF0 + 4) = 0u;
    *((void *)&xmmword_268D5A030 + 1) = 0x200000000000000;
    word_268D5A044 = 0;
    dword_268D5A040 = 0;
    __cxa_atexit((void (*)(void *))std::array<AGX::EndOfTileProgramKey,4ul>::~array, &AGX::EndOfTileProgramVariant<AGX::HAL200::Encoders,AGX::HAL200::Classes>::enumerateUberKeys(void)::uberKeys, &dword_2427AD000);
  }
  uint64_t v45 = &unk_26F853C48;
  int v46 = dword_268D59E50;
  long long v48 = 0;
  uint64_t v49 = 0;
  long long v47 = 0;
  int v5 = (const void *)xmmword_268D59E58;
  int64_t v6 = *((void *)&xmmword_268D59E58 + 1) - xmmword_268D59E58;
  unsigned int v33 = v3;
  int v34 = v2;
  int v32 = dword_268D59E50;
  if (*((void *)&xmmword_268D59E58 + 1) == (void)xmmword_268D59E58)
  {
    BOOL v8 = 0;
    int64_t v7 = 0;
  }
  else
  {
    if (v6 < 0) {
      goto LABEL_48;
    }
    int64_t v7 = (char *)operator new(*((void *)&xmmword_268D59E58 + 1) - xmmword_268D59E58);
    long long v47 = v7;
    BOOL v8 = &v7[4 * (v6 >> 2)];
    uint64_t v49 = v8;
    memcpy(v7, v5, v6);
    long long v48 = v8;
  }
  long long v52 = xmmword_268D59E90;
  long long v53 = unk_268D59EA0;
  *(_OWORD *)long long v54 = xmmword_268D59EB0;
  long long v50 = xmmword_268D59E70;
  uint64_t v45 = &unk_26F853C08;
  *(void *)&v54[14] = *(void *)((char *)&xmmword_268D59EB0 + 14);
  long long v51 = unk_268D59E80;
  long long v55 = &unk_26F853C48;
  int v56 = dword_268D59ED0;
  char v58 = 0;
  char v59 = 0;
  char v57 = 0;
  uint64_t v9 = (const void *)qword_268D59ED8;
  int64_t v10 = qword_268D59EE0 - qword_268D59ED8;
  if (qword_268D59EE0 != qword_268D59ED8)
  {
    if (v10 < 0) {
      goto LABEL_48;
    }
    char v57 = operator new(qword_268D59EE0 - qword_268D59ED8);
    char v59 = (char *)v57 + 4 * (v10 >> 2);
    memcpy(v57, v9, v10);
    char v58 = v59;
  }
  long long v62 = xmmword_268D59F10;
  long long v63 = unk_268D59F20;
  *(_OWORD *)uint64_t v64 = xmmword_268D59F30;
  long long v60 = xmmword_268D59EF0;
  long long v55 = &unk_26F853C08;
  *(void *)&v64[14] = *(void *)((char *)&xmmword_268D59F30 + 14);
  long long v61 = unk_268D59F00;
  int v65 = &unk_26F853C48;
  int v66 = dword_268D59F50;
  unint64_t v68 = 0;
  int v69 = 0;
  unsigned int v67 = 0;
  int64_t v11 = (const void *)qword_268D59F58;
  int64_t v12 = qword_268D59F60 - qword_268D59F58;
  if (qword_268D59F60 != qword_268D59F58)
  {
    if (v12 < 0) {
      goto LABEL_48;
    }
    unsigned int v67 = operator new(qword_268D59F60 - qword_268D59F58);
    int v69 = (char *)v67 + 4 * (v12 >> 2);
    memcpy(v67, v11, v12);
    unint64_t v68 = v69;
  }
  long long v72 = xmmword_268D59F90;
  long long v73 = unk_268D59FA0;
  *(_OWORD *)unint64_t v74 = xmmword_268D59FB0;
  long long v70 = xmmword_268D59F70;
  int v65 = &unk_26F853C08;
  *(void *)&v74[14] = *(void *)((char *)&xmmword_268D59FB0 + 14);
  long long v71 = unk_268D59F80;
  int v75 = &unk_26F853C48;
  int v76 = dword_268D59FD0;
  int v79 = 0;
  unsigned int v77 = 0;
  unsigned int v78 = 0;
  int64_t v13 = (const void *)qword_268D59FD8;
  int64_t v14 = unk_268D59FE0 - qword_268D59FD8;
  if (unk_268D59FE0 == qword_268D59FD8) {
    goto LABEL_16;
  }
  if (v14 < 0) {
LABEL_48:
  }
    abort();
  unsigned int v77 = operator new(unk_268D59FE0 - qword_268D59FD8);
  int v79 = (char *)v77 + 4 * (v14 >> 2);
  memcpy(v77, v13, v14);
  unsigned int v78 = v79;
LABEL_16:
  long long v82 = xmmword_268D5A010;
  long long v83 = unk_268D5A020;
  v84[0] = xmmword_268D5A030;
  long long v80 = xmmword_268D59FF0;
  int v75 = &unk_26F853C08;
  *(void *)((char *)v84 + 14) = *(void *)((char *)&xmmword_268D5A030 + 14);
  long long v81 = unk_268D5A000;
  int v35 = &unk_26F853C48;
  int v36 = v32;
  long long v38 = 0;
  long long v39 = 0;
  std::string __p = 0;
  int64_t v15 = v8 - v7;
  if (v8 != v7)
  {
    if (v15 < 0) {
      goto LABEL_45;
    }
    id v16 = (char *)operator new(v8 - v7);
    uint64_t v17 = &v16[4 * (v15 >> 2)];
    std::string __p = v16;
    long long v39 = v17;
    memcpy(v16, v7, v15);
    long long v38 = v17;
  }
  int v35 = &unk_26F853C08;
  int64_t v18 = v34 + 262;
  long long v42 = xmmword_268D59E90;
  long long v43 = unk_268D59EA0;
  *(_OWORD *)BOOL v44 = xmmword_268D59EB0;
  *(void *)&v44[14] = *(void *)((char *)&xmmword_268D59EB0 + 14);
  long long v40 = xmmword_268D59E70;
  long long v41 = unk_268D59E80;
  os_unfair_lock_lock(v34 + 262);
  uint64_t v19 = VectorMap<AGX::EndOfTileProgramKey,AGX::ProgramVariantEntry<AGX::HAL200::EndOfTileProgramVariant>,4u>::operator[]((uint64_t)v34, (uint64_t)&v35);
  AGX::ProgramVariantEntry<AGX::HAL200::EndOfTileProgramVariant>::invalidateAndErase(v19);
  os_unfair_lock_unlock(v34 + 262);
  int v35 = &unk_26F853C48;
  if (__p)
  {
    long long v38 = __p;
    operator delete(__p);
  }
  int v35 = &unk_26F853C48;
  int v36 = v56;
  long long v38 = 0;
  long long v39 = 0;
  std::string __p = 0;
  uint64_t v20 = v57;
  int64_t v21 = v58 - (unsigned char *)v57;
  if (v58 != v57)
  {
    if (v21 < 0) {
      goto LABEL_45;
    }
    std::string __p = operator new(v58 - (unsigned char *)v57);
    long long v38 = __p;
    double v22 = (char *)__p + 4 * (v21 >> 2);
    long long v39 = v22;
    memcpy(__p, v20, v21);
    long long v38 = v22;
  }
  int v35 = &unk_26F853C08;
  long long v42 = v62;
  long long v43 = v63;
  *(_OWORD *)BOOL v44 = *(_OWORD *)v64;
  *(void *)&v44[14] = *(void *)&v64[14];
  long long v40 = v60;
  long long v41 = v61;
  os_unfair_lock_lock(v18);
  uint64_t v23 = VectorMap<AGX::EndOfTileProgramKey,AGX::ProgramVariantEntry<AGX::HAL200::EndOfTileProgramVariant>,4u>::operator[]((uint64_t)v34, (uint64_t)&v35);
  AGX::ProgramVariantEntry<AGX::HAL200::EndOfTileProgramVariant>::invalidateAndErase(v23);
  os_unfair_lock_unlock(v18);
  int v35 = &unk_26F853C48;
  if (__p)
  {
    long long v38 = __p;
    operator delete(__p);
  }
  int v35 = &unk_26F853C48;
  int v36 = v66;
  long long v38 = 0;
  long long v39 = 0;
  std::string __p = 0;
  int v24 = v67;
  int64_t v25 = v68 - (unsigned char *)v67;
  if (v68 != v67)
  {
    if (v25 < 0) {
      goto LABEL_45;
    }
    std::string __p = operator new(v68 - (unsigned char *)v67);
    long long v38 = __p;
    int v26 = (char *)__p + 4 * (v25 >> 2);
    long long v39 = v26;
    memcpy(__p, v24, v25);
    long long v38 = v26;
  }
  int v35 = &unk_26F853C08;
  long long v42 = v72;
  long long v43 = v73;
  *(_OWORD *)BOOL v44 = *(_OWORD *)v74;
  *(void *)&v44[14] = *(void *)&v74[14];
  long long v40 = v70;
  long long v41 = v71;
  os_unfair_lock_lock(v18);
  uint64_t v27 = VectorMap<AGX::EndOfTileProgramKey,AGX::ProgramVariantEntry<AGX::HAL200::EndOfTileProgramVariant>,4u>::operator[]((uint64_t)v34, (uint64_t)&v35);
  AGX::ProgramVariantEntry<AGX::HAL200::EndOfTileProgramVariant>::invalidateAndErase(v27);
  os_unfair_lock_unlock(v18);
  int v35 = &unk_26F853C48;
  if (__p)
  {
    long long v38 = __p;
    operator delete(__p);
  }
  int v35 = &unk_26F853C48;
  int v36 = v76;
  long long v38 = 0;
  long long v39 = 0;
  std::string __p = 0;
  uint64_t v28 = v77;
  int64_t v29 = v78 - (unsigned char *)v77;
  if (v78 == v77) {
    goto LABEL_34;
  }
  if (v29 < 0) {
LABEL_45:
  }
    abort();
  std::string __p = operator new(v78 - (unsigned char *)v77);
  long long v38 = __p;
  long long v30 = (char *)__p + 4 * (v29 >> 2);
  long long v39 = v30;
  memcpy(__p, v28, v29);
  long long v38 = v30;
LABEL_34:
  int v35 = &unk_26F853C08;
  long long v42 = v82;
  long long v43 = v83;
  *(_OWORD *)BOOL v44 = v84[0];
  *(void *)&v44[14] = *(void *)((char *)v84 + 14);
  long long v40 = v80;
  long long v41 = v81;
  os_unfair_lock_lock(v18);
  uint64_t v31 = VectorMap<AGX::EndOfTileProgramKey,AGX::ProgramVariantEntry<AGX::HAL200::EndOfTileProgramVariant>,4u>::operator[]((uint64_t)v34, (uint64_t)&v35);
  AGX::ProgramVariantEntry<AGX::HAL200::EndOfTileProgramVariant>::invalidateAndErase(v31);
  os_unfair_lock_unlock(v18);
  int v35 = &unk_26F853C48;
  if (__p)
  {
    long long v38 = __p;
    operator delete(__p);
  }
  int v75 = &unk_26F853C48;
  float v3 = v33;
  if (v77)
  {
    unsigned int v78 = v77;
    operator delete(v77);
  }
  int v65 = &unk_26F853C48;
  if (v67)
  {
    unint64_t v68 = v67;
    operator delete(v67);
  }
  long long v55 = &unk_26F853C48;
  if (v57)
  {
    char v58 = v57;
    operator delete(v57);
  }
  uint64_t v45 = &unk_26F853C48;
  if (v47)
  {
    long long v48 = v47;
    operator delete(v47);
  }
LABEL_44:
  os_unfair_lock_unlock(v3);
}

void sub_2429FC9D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, os_unfair_lock_s *lock, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  STACK[0x238] = a9;
  unsigned int v67 = (void *)STACK[0x248];
  if (STACK[0x248])
  {
    STACK[0x250] = (unint64_t)v67;
    operator delete(v67);
  }
  if (a66) {
    operator delete(a66);
  }
  if (a50) {
    operator delete(a50);
  }
  if (a34) {
    operator delete(a34);
  }
  os_unfair_lock_unlock(lock);
  _Unwind_Resume(a1);
}

void AGX::Device<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::setupDeferred(AGXG17FamilyDevice *)::{lambda(void)#1}::operator()[abi:[AGX] Crashed.]()
{
}

uint64_t VectorMap<AGX::EndOfTileProgramKey,AGX::ProgramVariantEntry<AGX::HAL200::EndOfTileProgramVariant>,4u>::operator[](uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(unsigned int *)(a1 + 720);
  uint64_t v5 = *(void *)(a1 + 712);
  if (v4)
  {
    uint64_t v6 = 0;
    int64_t v7 = (_WORD *)(v5 + 124);
    while (1)
    {
      int8x16_t v8 = vorrq_s8(vorrq_s8(veorq_s8(*(int8x16_t *)(v7 - 42), *(int8x16_t *)(a2 + 40)), veorq_s8(*(int8x16_t *)(v7 - 26), *(int8x16_t *)(a2 + 72))), vorrq_s8(veorq_s8(*(int8x16_t *)(v7 - 34), *(int8x16_t *)(a2 + 56)), veorq_s8(*(int8x16_t *)(v7 - 18), *(int8x16_t *)(a2 + 88))));
      *(int8x8_t *)v8.i8 = vorr_s8(*(int8x8_t *)v8.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v8, v8, 8uLL));
      if (!(*(void *)(v7 - 6) ^ *(void *)(a2 + 112) | (unsigned __int16)(*(v7 - 2) ^ *(_WORD *)(a2 + 120)) | (unsigned __int16)(*(v7 - 1) ^ *(_WORD *)(a2 + 122)) | (unint64_t)(unsigned __int16)(*v7 ^ *(_WORD *)(a2 + 124)) | v8.i32[0] | (*((_DWORD *)v7 - 5) ^ *(_DWORD *)(a2 + 104)) | v8.i32[1])) {
        break;
      }
      v7 += 64;
      if (v4 == ++v6) {
        goto LABEL_5;
      }
    }
    uint64_t v31 = v5 + 48 * v6;
  }
  else
  {
LABEL_5:
    uint64_t v9 = *(void *)(v5 + 704);
    if (v9)
    {
      int8x16_t v10 = *(int8x16_t *)(a2 + 88);
      int8x16_t v11 = *(int8x16_t *)(a2 + 72);
      int8x16_t v12 = *(int8x16_t *)(a2 + 56);
      int8x16_t v13 = *(int8x16_t *)(a2 + 40);
      unsigned int v14 = *(_DWORD *)(a2 + 104);
      uint64_t v15 = *(void *)(a2 + 112);
      __int16 v16 = *(_WORD *)(a2 + 120);
      __int16 v17 = *(_WORD *)(a2 + 122);
      unsigned int v18 = 1;
      __int16 v19 = *(_WORD *)(a2 + 124);
      while (1)
      {
        int8x16_t v20 = vorrq_s8(vorrq_s8(veorq_s8(*(int8x16_t *)(v9 + 40), v13), veorq_s8(*(int8x16_t *)(v9 + 72), v11)), vorrq_s8(veorq_s8(*(int8x16_t *)(v9 + 56), v12), veorq_s8(*(int8x16_t *)(v9 + 88), v10)));
        *(int8x8_t *)v20.i8 = vorr_s8(*(int8x8_t *)v20.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v20, v20, 8uLL));
        if (!(*(void *)(v9 + 112) ^ v15 | (unsigned __int16)(*(_WORD *)(v9 + 120) ^ v16) | (unsigned __int16)(*(_WORD *)(v9 + 122) ^ v17) | (unsigned __int16)(*(_WORD *)(v9 + 124) ^ v19) | v20.i32[0] | *(_DWORD *)(v9 + 104) ^ v14 | v20.i32[1]))
        {
          unsigned int v18 = 0;
          goto LABEL_21;
        }
        int8x16_t v21 = vorrq_s8(vorrq_s8(veorq_s8(*(int8x16_t *)(v9 + 168), v13), veorq_s8(*(int8x16_t *)(v9 + 200), v11)), vorrq_s8(veorq_s8(*(int8x16_t *)(v9 + 184), v12), veorq_s8(*(int8x16_t *)(v9 + 216), v10)));
        *(int8x8_t *)v21.i8 = vorr_s8(*(int8x8_t *)v21.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v21, v21, 8uLL));
        if (!(*(void *)(v9 + 240) ^ v15 | (unsigned __int16)(*(_WORD *)(v9 + 248) ^ v16) | (unsigned __int16)(*(_WORD *)(v9 + 250) ^ v17) | (unsigned __int16)(*(_WORD *)(v9 + 252) ^ v19) | v21.i32[0] | *(_DWORD *)(v9 + 232) ^ v14 | v21.i32[1])) {
          goto LABEL_21;
        }
        int8x16_t v22 = vorrq_s8(vorrq_s8(veorq_s8(*(int8x16_t *)(v9 + 296), v13), veorq_s8(*(int8x16_t *)(v9 + 328), v11)), vorrq_s8(veorq_s8(*(int8x16_t *)(v9 + 312), v12), veorq_s8(*(int8x16_t *)(v9 + 344), v10)));
        *(int8x8_t *)v22.i8 = vorr_s8(*(int8x8_t *)v22.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v22, v22, 8uLL));
        if (!(*(void *)(v9 + 368) ^ v15 | (unsigned __int16)(*(_WORD *)(v9 + 376) ^ v16) | (unsigned __int16)(*(_WORD *)(v9 + 378) ^ v17) | (unsigned __int16)(*(_WORD *)(v9 + 380) ^ v19) | v22.i32[0] | *(_DWORD *)(v9 + 360) ^ v14 | v22.i32[1]))
        {
          unsigned int v18 = 2;
          goto LABEL_21;
        }
        int8x16_t v23 = vorrq_s8(vorrq_s8(veorq_s8(*(int8x16_t *)(v9 + 424), v13), veorq_s8(*(int8x16_t *)(v9 + 456), v11)), vorrq_s8(veorq_s8(*(int8x16_t *)(v9 + 440), v12), veorq_s8(*(int8x16_t *)(v9 + 472), v10)));
        *(int8x8_t *)v23.i8 = vorr_s8(*(int8x8_t *)v23.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v23, v23, 8uLL));
        if (!(*(void *)(v9 + 496) ^ v15 | (unsigned __int16)(*(_WORD *)(v9 + 504) ^ v16) | (unsigned __int16)(*(_WORD *)(v9 + 506) ^ v17) | (unsigned __int16)(*(_WORD *)(v9 + 508) ^ v19) | v23.i32[0] | *(_DWORD *)(v9 + 488) ^ v14 | v23.i32[1])) {
          break;
        }
        uint64_t v9 = *(void *)(v9 + 704);
        if (!v9) {
          goto LABEL_12;
        }
      }
      unsigned int v18 = 3;
LABEL_21:
      uint64_t v31 = v9 + 48 * v18;
    }
    else
    {
LABEL_12:
      if (v4 == 4) {
        operator new();
      }
      uint64_t v24 = v5 + (v4 << 7);
      *(_DWORD *)(v24 + 8) = *(_DWORD *)(a2 + 8);
      if (v24 != a2) {
        std::vector<unsigned int>::__assign_with_size[abi:nn180100]<unsigned int *,unsigned int *>((void *)(v24 + 16), *(char **)(a2 + 16), *(char **)(a2 + 24), (uint64_t)(*(void *)(a2 + 24) - *(void *)(a2 + 16)) >> 2);
      }
      long long v25 = *(_OWORD *)(a2 + 40);
      *(_OWORD *)(v24 + 56) = *(_OWORD *)(a2 + 56);
      *(_OWORD *)(v24 + 40) = v25;
      long long v26 = *(_OWORD *)(a2 + 72);
      long long v27 = *(_OWORD *)(a2 + 88);
      long long v28 = *(_OWORD *)(a2 + 104);
      *(void *)(v24 + 118) = *(void *)(a2 + 118);
      *(_OWORD *)(v24 + 104) = v28;
      *(_OWORD *)(v24 + 88) = v27;
      *(_OWORD *)(v24 + 72) = v26;
      uint64_t v29 = *(void *)(a1 + 712);
      unsigned int v30 = *(_DWORD *)(a1 + 720);
      *(_DWORD *)(a1 + 720) = v30 + 1;
      uint64_t v31 = v29 + 48 * v30;
    }
  }
  return v31 + 512;
}

void AGX::ProgramVariantEntry<AGX::HAL200::EndOfTileProgramVariant>::invalidateAndErase(uint64_t a1)
{
  std::chrono::system_clock::time_point v2 = *(NSObject **)a1;
  if (v2)
  {
    dispatch_group_wait(v2, 0xFFFFFFFFFFFFFFFFLL);

    *(void *)a1 = 0;
  }
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3)
  {
    AGX::ProgramVariantESLState<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ArgumentTable,true,7ul>::~ProgramVariantESLState((uint64_t *)(v3 + 512));
    unint64_t v4 = AGX::EndOfTileProgramVariantBase<AGX::HAL200::Encoders,AGX::HAL200::Classes>::~EndOfTileProgramVariantBase(v3);
    MEMORY[0x24566ED90](v4, 0x10F2C407AEA2096);
  }
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;

  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(unsigned char *)(a1 + 40) = 0;
}

void *std::array<AGX::EndOfTileProgramKey,4ul>::~array(void *a1)
{
  a1[48] = &unk_26F853C48;
  std::chrono::system_clock::time_point v2 = (void *)a1[50];
  if (v2)
  {
    a1[51] = v2;
    operator delete(v2);
  }
  a1[32] = &unk_26F853C48;
  unint64_t v3 = (void *)a1[34];
  if (v3)
  {
    a1[35] = v3;
    operator delete(v3);
  }
  a1[16] = &unk_26F853C48;
  unint64_t v4 = (void *)a1[18];
  if (v4)
  {
    a1[19] = v4;
    operator delete(v4);
  }
  *a1 = &unk_26F853C48;
  uint64_t v5 = (void *)a1[2];
  if (v5)
  {
    a1[3] = v5;
    operator delete(v5);
  }
  return a1;
}

void AGX::Program<AGX::HAL200::BackgroundObjectProgramVariant,AGX::BackgroundObjectProgramKey,AGX::HAL200::IndirectArgumentLayout,AGXG17FamilyIndirectArgumentBufferLayout>::pruneVariant(os_unfair_lock_s *a1, uint64_t a2)
{
  unint64_t v4 = a1 + 222;
  os_unfair_lock_lock(a1 + 222);
  uint64_t v5 = VectorMap<AGX::BackgroundObjectProgramKey,AGX::ProgramVariantEntry<AGX::HAL200::BackgroundObjectProgramVariant>,4u>::operator[]((uint64_t)a1, a2);
  if (*(void *)v5)
  {
    dispatch_group_wait(*(dispatch_group_t *)v5, 0xFFFFFFFFFFFFFFFFLL);

    *(void *)uint64_t v5 = 0;
  }
  uint64_t v6 = *(void *)(v5 + 8);
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  *(void *)(v5 + 8) = 0;
  *(void *)(v5 + 16) = 0;

  *(void *)(v5 + 24) = 0;
  *(void *)(v5 + 32) = 0;
  *(unsigned char *)(v5 + 40) = 0;

  os_unfair_lock_unlock(v4);
}

void sub_2429FD28C(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void *std::array<AGX::BackgroundObjectProgramKey,3ul>::~array(void *a1)
{
  a1[22] = &unk_26F852B38;
  std::chrono::system_clock::time_point v2 = (void *)a1[24];
  if (v2)
  {
    a1[25] = v2;
    operator delete(v2);
  }
  a1[11] = &unk_26F852B38;
  unint64_t v3 = (void *)a1[13];
  if (v3)
  {
    a1[14] = v3;
    operator delete(v3);
  }
  *a1 = &unk_26F852B38;
  unint64_t v4 = (void *)a1[2];
  if (v4)
  {
    a1[3] = v4;
    operator delete(v4);
  }
  return a1;
}

uint64_t VectorMap<AGX::BackgroundObjectProgramKey,AGX::ProgramVariantEntry<AGX::HAL200::BackgroundObjectProgramVariant>,4u>::operator[](uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(unsigned int *)(a1 + 560);
  uint64_t v5 = *(void *)(a1 + 552);
  if (v4)
  {
    uint64_t v6 = 0;
    int64_t v7 = (void *)(v5 + 80);
    while ((vmaxv_u8((uint8x8_t)vmovn_s16((int16x8_t)vmvnq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vceqq_s32(*(int32x4_t *)(a2 + 40), *(int32x4_t *)(v7 - 5)), (int16x8_t)vceqq_s32(*(int32x4_t *)(a2 + 56), *(int32x4_t *)(v7 - 3)))))) & 1) != 0|| *(_DWORD *)(a2 + 72) != *((_DWORD *)v7 - 2)|| *(void *)(a2 + 80) != *v7)
    {
      v7 += 11;
      if (v4 == ++v6) {
        goto LABEL_11;
      }
    }
    uint64_t v9 = v5 + 48 * v6;
  }
  else
  {
LABEL_11:
    uint64_t v10 = *(void *)(v5 + 544);
    if (v10)
    {
      int32x4_t v11 = *(int32x4_t *)(a2 + 56);
      int32x4_t v12 = *(int32x4_t *)(a2 + 40);
      int v13 = *(_DWORD *)(a2 + 72);
      unsigned int v14 = 1;
      uint64_t v15 = *(void *)(a2 + 80);
      while (1)
      {
        if ((vmaxv_u8((uint8x8_t)vmovn_s16((int16x8_t)vmvnq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vceqq_s32(v12, *(int32x4_t *)(v10 + 40)), (int16x8_t)vceqq_s32(v11, *(int32x4_t *)(v10 + 56)))))) & 1) == 0&& v13 == *(_DWORD *)(v10 + 72)&& v15 == *(void *)(v10 + 80))
        {
          unsigned int v14 = 0;
          goto LABEL_38;
        }
        if ((vmaxv_u8((uint8x8_t)vmovn_s16((int16x8_t)vmvnq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vceqq_s32(v12, *(int32x4_t *)(v10 + 128)), (int16x8_t)vceqq_s32(v11, *(int32x4_t *)(v10 + 144)))))) & 1) == 0&& v13 == *(_DWORD *)(v10 + 160)&& v15 == *(void *)(v10 + 168))
        {
          goto LABEL_38;
        }
        if ((vmaxv_u8((uint8x8_t)vmovn_s16((int16x8_t)vmvnq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vceqq_s32(v12, *(int32x4_t *)(v10 + 216)), (int16x8_t)vceqq_s32(v11, *(int32x4_t *)(v10 + 232)))))) & 1) == 0&& v13 == *(_DWORD *)(v10 + 248)&& v15 == *(void *)(v10 + 256))
        {
          break;
        }
        if ((vmaxv_u8((uint8x8_t)vmovn_s16((int16x8_t)vmvnq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vceqq_s32(v12, *(int32x4_t *)(v10 + 304)), (int16x8_t)vceqq_s32(v11, *(int32x4_t *)(v10 + 320)))))) & 1) == 0&& v13 == *(_DWORD *)(v10 + 336)&& v15 == *(void *)(v10 + 344))
        {
          unsigned int v14 = 3;
          goto LABEL_38;
        }
        uint64_t v10 = *(void *)(v10 + 544);
        if (!v10) {
          goto LABEL_31;
        }
      }
      unsigned int v14 = 2;
    }
    else
    {
LABEL_31:
      if (v4 == 4) {
        operator new();
      }
      uint64_t v18 = v5 + 88 * v4;
      *(_DWORD *)(v18 + 8) = *(_DWORD *)(a2 + 8);
      if (v18 != a2) {
        std::vector<unsigned int>::__assign_with_size[abi:nn180100]<unsigned int *,unsigned int *>((void *)(v18 + 16), *(char **)(a2 + 16), *(char **)(a2 + 24), (uint64_t)(*(void *)(a2 + 24) - *(void *)(a2 + 16)) >> 2);
      }
      uint64_t v19 = v5 + 88 * v4;
      long long v20 = *(_OWORD *)(a2 + 40);
      long long v21 = *(_OWORD *)(a2 + 56);
      *(_OWORD *)(v19 + 72) = *(_OWORD *)(a2 + 72);
      *(_OWORD *)(v19 + 56) = v21;
      *(_OWORD *)(v19 + 40) = v20;
      uint64_t v10 = *(void *)(a1 + 552);
      unsigned int v14 = *(_DWORD *)(a1 + 560);
      *(_DWORD *)(a1 + 560) = v14 + 1;
    }
LABEL_38:
    uint64_t v9 = v10 + 48 * v14;
  }
  return v9 + 352;
}

void AGX::Device<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::purgeDevice(uint64_t a1, float a2)
{
  AGX::PooledAllocator<8u>::shrink((os_unfair_lock_s *)(a1 + 6624), a2);
  AGX::PooledAllocator<8u>::shrink((os_unfair_lock_s *)(a1 + 6704), a2);
  AGX::PooledAllocator<16u>::shrink((os_unfair_lock_s *)(a1 + 6784), a2);
  AGX::PooledAllocator<8u>::shrink((os_unfair_lock_s *)(a1 + 6928), a2);
  AGX::PooledAllocator<8u>::shrink((os_unfair_lock_s *)(a1 + 7008), a2);
  AGX::PooledAllocator<8u>::shrink((os_unfair_lock_s *)(a1 + 7088), a2);
  if (a2 >= 0.99)
  {
    uint64_t v4 = *(NSObject **)(a1 + 5200);
    uint64_t block = MEMORY[0x263EF8330];
    uint64_t v17 = 3221225472;
    uint64_t v18 = ___ZN3AGX4HeapILb1EE6shrinkEv_block_invoke;
    uint64_t v19 = &__block_descriptor_40_e5_v8__0l;
    uint64_t v20 = a1 + 5184;
    dispatch_sync(v4, &block);
    uint64_t v5 = *(NSObject **)(a1 + 5368);
    uint64_t block = MEMORY[0x263EF8330];
    uint64_t v17 = 3221225472;
    uint64_t v18 = ___ZN3AGX4HeapILb1EE6shrinkEv_block_invoke;
    uint64_t v19 = &__block_descriptor_40_e5_v8__0l;
    uint64_t v20 = a1 + 5352;
    dispatch_sync(v5, &block);
    uint64_t v6 = *(NSObject **)(a1 + 5536);
    uint64_t block = MEMORY[0x263EF8330];
    uint64_t v17 = 3221225472;
    uint64_t v18 = ___ZN3AGX4HeapILb1EE6shrinkEv_block_invoke;
    uint64_t v19 = &__block_descriptor_40_e5_v8__0l;
    uint64_t v20 = a1 + 5520;
    dispatch_sync(v6, &block);
    int64_t v7 = *(NSObject **)(a1 + 5704);
    uint64_t block = MEMORY[0x263EF8330];
    uint64_t v17 = 3221225472;
    uint64_t v18 = ___ZN3AGX4HeapILb1EE6shrinkEv_block_invoke;
    uint64_t v19 = &__block_descriptor_40_e5_v8__0l;
    uint64_t v20 = a1 + 5688;
    dispatch_sync(v7, &block);
    uint64_t v8 = *(void *)(a1 + 6032);
    os_unfair_lock_lock((os_unfair_lock_t)(v8 + 72));
    *(_OWORD *)(v8 + 52) = 0u;
    *(_OWORD *)(v8 + 40) = 0u;
    *(_OWORD *)(v8 + 24) = 0u;
    uint64_t v9 = *(void **)(v8 + 8);
    *(void *)(v8 + 8) = 0;
    os_unfair_lock_unlock((os_unfair_lock_t)(v8 + 72));

    uint64_t v10 = *(void *)(a1 + 6040);
    os_unfair_lock_lock((os_unfair_lock_t)(v10 + 72));
    *(_OWORD *)(v10 + 52) = 0u;
    *(_OWORD *)(v10 + 40) = 0u;
    *(_OWORD *)(v10 + 24) = 0u;
    int32x4_t v11 = *(void **)(v10 + 8);
    *(void *)(v10 + 8) = 0;
    os_unfair_lock_unlock((os_unfair_lock_t)(v10 + 72));

    uint64_t v12 = *(void *)(a1 + 6048);
    os_unfair_lock_lock((os_unfair_lock_t)(v12 + 72));
    *(_OWORD *)(v12 + 52) = 0u;
    *(_OWORD *)(v12 + 40) = 0u;
    *(_OWORD *)(v12 + 24) = 0u;
    int v13 = *(void **)(v12 + 8);
    *(void *)(v12 + 8) = 0;
    os_unfair_lock_unlock((os_unfair_lock_t)(v12 + 72));

    uint64_t v14 = *(void *)(a1 + 6056);
    os_unfair_lock_lock((os_unfair_lock_t)(v14 + 40));
    *(_DWORD *)(v14 + 32) = 0;
    id v15 = *(id *)(v14 + 8);
    *(void *)(v14 + 8) = 0;
    os_unfair_lock_unlock((os_unfair_lock_t)(v14 + 40));
  }
}

void ___ZN3AGX6DeviceINS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE20compileDriverShadersEP18AGXG17FamilyDevice_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a3) {
    operator new();
  }
  uint64_t v5 = "MTLCompilerErrorTimeout";
  uint64_t v6 = "UnknownErrorCode";
  if (a3 == 2) {
    uint64_t v6 = "MTLCompilerErrorCompilationError";
  }
  if (a3 != 3) {
    uint64_t v5 = v6;
  }
  if (a3 == 1) {
    int64_t v7 = "MTLCompilerErrorFatalError";
  }
  else {
    int64_t v7 = v5;
  }
  v8[0] = 0;
  uint64_t v9 = 0;
  ProgramKey<(_AGCStreamToken)28,(AGX::DriverShaderCompilationMode)1>::serialize(a1 + 40, v8, &v9);
  v8[7] = a4;
  v8[8] = v7;
  v8[9] = v9;
  v8[10] = v8[0];
  _ZZZZN3AGX6DeviceINS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE49createTGOptimizationDriverShaderAndBufferIfNeededEP18AGXG17FamilyDeviceEUb_EUb_ENKUlvE_clB14_AGX__Crashed_Ev();
}

void sub_2429FDAC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  AGX::ProgramBindingRemap<AGX::HAL200::Encoders,AGX::HAL200::Classes>::~ProgramBindingRemap((uint64_t)va);
  MEMORY[0x24566ED90](v11, 0x10F3C404B015E0ALL);
  _Unwind_Resume(a1);
}

uint64_t ___ZN3AGX8Compiler14compileProgramI10ProgramKeyIL15_AGCStreamToken28ELNS_27DriverShaderCompilationModeE1EEEEvRKT_P7NSArrayIPU27objcproto16MTLBinaryArchive11objc_objectEU13block_pointerFvRK20AGCDeserializedReply16MTLCompilerErrorP8NSStringEb_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a5) {
    AGX::Compiler::compileProgram<AGX::UserIntersectionProgramKey,AGCReplyArray>(AGX::UserIntersectionProgramKey const&,MTLCompileFunctionRequestData *,void({block_pointer})(AGCReplyArray const&,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,MTLCompilerError,NSString *,unsigned long long))::{lambda(void)#1}::operator()[abi:[AGX] Failed assertion __requestData.frameworkData && _requestData.pipelineOptions_]();
  }
  uint64_t v5 = *(uint64_t (**)(void))(*(void *)(a1 + 32) + 16);

  return v5();
}

void ___ZN3AGX6DeviceINS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE20compileDriverShadersEP18AGXG17FamilyDevice_block_invoke_122(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  if (!a3) {
    operator new();
  }
  _ZZZN3AGX6DeviceINS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE20compileDriverShadersEP18AGXG17FamilyDeviceEUb3_ENKUlvE_clB57_AGX__Failed_assertion__error____MTLCompilerErrorNoError_Ev(a4);
}

void sub_2429FDD00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  if (*(char *)(v12 - 65) < 0) {
    operator delete(*(void **)(v12 - 88));
  }
  AGX::ProgramBindingRemap<AGX::HAL200::Encoders,AGX::HAL200::Classes>::~ProgramBindingRemap((uint64_t)va);
  MEMORY[0x24566ED90](v11, 0x10F3C401D7DD63FLL);
  _Unwind_Resume(a1);
}

uint64_t ___ZN3AGX8Compiler14compileProgramI10ProgramKeyIL15_AGCStreamToken94ELNS_27DriverShaderCompilationModeE1EEEEvRKT_P7NSArrayIPU27objcproto16MTLBinaryArchive11objc_objectEU13block_pointerFvRK20AGCDeserializedReply16MTLCompilerErrorP8NSStringEb_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a5) {
    AGX::Compiler::compileProgram<AGX::UserIntersectionProgramKey,AGCReplyArray>(AGX::UserIntersectionProgramKey const&,MTLCompileFunctionRequestData *,void({block_pointer})(AGCReplyArray const&,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,MTLCompilerError,NSString *,unsigned long long))::{lambda(void)#1}::operator()[abi:[AGX] Failed assertion __requestData.frameworkData && _requestData.pipelineOptions_]();
  }
  uint64_t v5 = *(uint64_t (**)(void))(*(void *)(a1 + 32) + 16);

  return v5();
}

void ___ZN3AGX8Compiler14compileProgramI10ProgramKeyIL15_AGCStreamToken94ELNS_27DriverShaderCompilationModeE1EE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSH_SH_SH_SH_16MTLCompilerErrorP8NSStringyE_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  v14[0] = MEMORY[0x263EF8330];
  v14[1] = 3221225472;
  id v15 = ___ZN3AGX8Compiler14compileProgramI10ProgramKeyIL15_AGCStreamToken94ELNS_27DriverShaderCompilationModeE1EE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSH_SH_SH_SH_16MTLCompilerErrorP8NSStringyE_block_invoke_2;
  __int16 v16 = &unk_26516F7E8;
  uint64_t v17 = a9;
  uint64_t v18 = a3;
  uint64_t v19 = a4;
  uint64_t v20 = a5;
  uint64_t v21 = a6;
  uint64_t v22 = a7;
  uint64_t v12 = a1 + 32;
  uint64_t v10 = *(void **)(a1 + 32);
  uint64_t v11 = *(void *)(v12 + 8);
  uint64_t v23 = a8;
  uint64_t v24 = v11;
  uint64_t v25 = a2;
  uint64_t v26 = a10;
  if (objc_msgSend(v10, "sync", MEMORY[0x263EF8330], 3221225472))
  {
    v15(v14);
  }
  else
  {
    global_queue = dispatch_get_global_queue(0, 0);
    dispatch_async(global_queue, v14);
  }
}

uint64_t ___ZN3AGX8Compiler14compileProgramI10ProgramKeyIL15_AGCStreamToken94ELNS_27DriverShaderCompilationModeE1EE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSH_SH_SH_SH_16MTLCompilerErrorP8NSStringyE_block_invoke_3(uint64_t a1, void *a2)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), *a2);
}

uint64_t ___ZN3AGX8Compiler14compileProgramI10ProgramKeyIL15_AGCStreamToken94ELNS_27DriverShaderCompilationModeE1EE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSH_SH_SH_SH_16MTLCompilerErrorP8NSStringyE_block_invoke_4(uint64_t a1, void *a2)
{
  if (getTimebaseInfo(void)::once != -1) {
    dispatch_once(&getTimebaseInfo(void)::once, &__block_literal_global_7474);
  }
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), *a2);
}

void ___ZN3AGX8Compiler14compileProgramI10ProgramKeyIL15_AGCStreamToken94ELNS_27DriverShaderCompilationModeE1EE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSH_SH_SH_SH_16MTLCompilerErrorP8NSStringyE_block_invoke_2(void *a1)
{
  size_t size_ptr = 0;
  buffer_ptr = 0;
  uint64_t v2 = a1[12];
  AGCDeserializedReply::AGCDeserializedReply((AGCDeserializedReply *)v5);
  if (v2 || (uint64_t v4 = a1[5]) == 0)
  {
    unint64_t v3 = 0;
  }
  else
  {
    unint64_t v3 = dispatch_data_create_map(v4, (const void **)&buffer_ptr, &size_ptr);
    AGCDeserializedReply::deserialize((AGCDeserializedReply *)v5, buffer_ptr, size_ptr);
  }
  (*(void (**)(void, unsigned char *))(a1[11] + 16))(a1[11], v5);
  if (v3) {
    dispatch_release(v3);
  }
  AGCDeserializedReply::~AGCDeserializedReply((AGCDeserializedReply *)v5);
}

void sub_2429FE014(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  AGCDeserializedReply::~AGCDeserializedReply((AGCDeserializedReply *)va);
  _Unwind_Resume(a1);
}

void _ZZZN3AGX6DeviceINS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE20compileDriverShadersEP18AGXG17FamilyDeviceEUb3_ENKUlvE_clB57_AGX__Failed_assertion__error____MTLCompilerErrorNoError_Ev(void *a1)
{
}

uint64_t *std::unique_ptr<AGX::HeapBuffer>::~unique_ptr[abi:nn180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*(void *)(v2 + 64) && *(void *)(v2 + 24))
    {
      uint64_t v3 = *(void *)(v2 + 32);
      uint64_t v4 = *(NSObject **)(v3 + 16);
      v6[0] = MEMORY[0x263EF8330];
      v6[1] = 3221225472;
      v6[2] = ___ZN3AGX4HeapILb1EE14deallocateImplERKNS1_10AllocationE_block_invoke;
      v6[3] = &__block_descriptor_48_e5_v8__0l;
      v6[4] = v3;
      v6[5] = v2;
      dispatch_sync(v4, v6);
      *(_OWORD *)(v2 + 25) = 0u;
      *(_OWORD *)uint64_t v2 = 0u;
      *(_OWORD *)(v2 + 16) = 0u;
    }
    MEMORY[0x24566ED90](v2, 0x1070C4082A93E96);
  }
  return a1;
}

uint64_t std::unordered_map<objc_object  {objcproto11MTLFunction}*,RetainedObjCPointer<AGXG17FamilyFunctionHandle *>>::~unordered_map[abi:nn180100](uint64_t a1)
{
  uint64_t v2 = *(id **)(a1 + 16);
  if (v2)
  {
    do
    {
      uint64_t v3 = (id *)*v2;

      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  uint64_t v4 = *(void **)a1;
  *(void *)a1 = 0;
  if (v4) {
    operator delete(v4);
  }
  return a1;
}

void **AGX::PipelineDylibResources<AGX::HAL200::ObjClasses,AGX::HAL200::Classes,(AGX::ICBType)1>::~PipelineDylibResources(void **a1)
{
  uint64_t v2 = (char *)*a1;
  if (*a1)
  {
    uint64_t v3 = (char *)a1[1];
    uint64_t v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        uint64_t v5 = (std::__shared_weak_count *)*((void *)v3 - 1);
        if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
        v3 -= 16;
      }
      while (v3 != v2);
      uint64_t v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t ProgramKey<(_AGCStreamToken)94,(AGX::DriverShaderCompilationMode)1>::getSupportIndirectCommandBuffers()
{
  return 0;
}

uint64_t ProgramKey<(_AGCStreamToken)94,(AGX::DriverShaderCompilationMode)1>::isPrecompiledToBinaryArchive()
{
  return 0;
}

uint64_t ProgramKey<(_AGCStreamToken)94,(AGX::DriverShaderCompilationMode)1>::isPrecompiledToPipelineCache()
{
  return 1;
}

void ProgramKey<(_AGCStreamToken)94,(AGX::DriverShaderCompilationMode)1>::serialize(uint64_t a1, void *a2, void *a3)
{
  uint64_t v6 = *(int **)(a1 + 16);
  *(void *)(a1 + 24) = v6;
  int v7 = *(unsigned __int8 *)(a1 + 8) | 0x100;
  uint64_t v8 = *(int **)(a1 + 32);
  if (v6 >= v8)
  {
    uint64_t v10 = (char *)v8 - (char *)v6;
    uint64_t v11 = v10 >> 1;
    if ((unint64_t)(v10 >> 1) <= 1) {
      uint64_t v11 = 1;
    }
    BOOL v12 = (unint64_t)v10 >= 0x7FFFFFFFFFFFFFFCLL;
    unint64_t v13 = 0x3FFFFFFFFFFFFFFFLL;
    if (!v12) {
      unint64_t v13 = v11;
    }
    if (v13 >> 62) {
      goto LABEL_34;
    }
    uint64_t v14 = v13;
    id v15 = operator new(4 * v13);
    uint64_t v8 = &v15[v14];
    _DWORD *v15 = v7;
    uint64_t v9 = (char *)(v15 + 1);
    *(void *)(a1 + 16) = v15;
    *(void *)(a1 + 24) = v15 + 1;
    *(void *)(a1 + 32) = &v15[v14];
    if (v6)
    {
      operator delete(v6);
      uint64_t v8 = *(int **)(a1 + 32);
    }
  }
  else
  {
    *uint64_t v6 = v7;
    uint64_t v9 = (char *)(v6 + 1);
  }
  *(void *)(a1 + 24) = v9;
  if (v9 < (char *)v8)
  {
    *(_DWORD *)uint64_t v9 = 96;
    __int16 v16 = v9 + 4;
    goto LABEL_33;
  }
  uint64_t v17 = *(char **)(a1 + 16);
  uint64_t v18 = (v9 - v17) >> 2;
  unint64_t v19 = v18 + 1;
  if ((unint64_t)(v18 + 1) >> 62) {
    abort();
  }
  uint64_t v20 = (char *)v8 - v17;
  if (v20 >> 1 > v19) {
    unint64_t v19 = v20 >> 1;
  }
  if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFFCLL) {
    unint64_t v21 = 0x3FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v21 = v19;
  }
  if (v21)
  {
    if (!(v21 >> 62))
    {
      uint64_t v22 = operator new(4 * v21);
      goto LABEL_22;
    }
LABEL_34:
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  uint64_t v22 = 0;
LABEL_22:
  uint64_t v23 = &v22[4 * v18];
  uint64_t v24 = &v22[4 * v21];
  _DWORD *v23 = 96;
  __int16 v16 = v23 + 1;
  if (v9 == v17) {
    goto LABEL_31;
  }
  unint64_t v25 = v9 - v17 - 4;
  if (v25 < 0x2C)
  {
    uint64_t v26 = v9;
    goto LABEL_30;
  }
  if ((unint64_t)(v17 - v22) < 0x20)
  {
    uint64_t v26 = v9;
    do
    {
LABEL_30:
      int v32 = *((_DWORD *)v26 - 1);
      v26 -= 4;
      *--uint64_t v23 = v32;
    }
    while (v26 != v17);
    goto LABEL_31;
  }
  uint64_t v27 = (v25 >> 2) + 1;
  uint64_t v26 = &v9[-4 * (v27 & 0x7FFFFFFFFFFFFFF8)];
  long long v28 = &v22[4 * v18 - 16];
  uint64_t v29 = v9 - 16;
  uint64_t v30 = v27 & 0x7FFFFFFFFFFFFFF8;
  do
  {
    long long v31 = *(_OWORD *)v29;
    *(v28 - 1) = *((_OWORD *)v29 - 1);
    _OWORD *v28 = v31;
    v28 -= 2;
    v29 -= 32;
    v30 -= 8;
  }
  while (v30);
  v23 -= v27 & 0x7FFFFFFFFFFFFFF8;
  if (v27 != (v27 & 0x7FFFFFFFFFFFFFF8)) {
    goto LABEL_30;
  }
LABEL_31:
  *(void *)(a1 + 16) = v23;
  *(void *)(a1 + 24) = v16;
  *(void *)(a1 + 32) = v24;
  if (v17) {
    operator delete(v17);
  }
LABEL_33:
  *(void *)(a1 + 24) = v16;
  *a2 = *(void *)(a1 + 16);
  *a3 = *(void *)(a1 + 24) - *(void *)(a1 + 16);
}

uint64_t ProgramKey<(_AGCStreamToken)94,(AGX::DriverShaderCompilationMode)1>::legalizeStateForTargetOS()
{
  return 1;
}

void ___ZN3AGX6DeviceINS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE49createTGOptimizationDriverShaderAndBufferIfNeededEP18AGXG17FamilyDevice_block_invoke()
{
  uint64_t v0 = *MEMORY[0x263EF8340];
  operator new();
}

void sub_2429FEAE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23)
{
  dispatch_release(*(dispatch_object_t *)(v23 - 144));
  if (__p) {
    operator delete(__p);
  }
  if (a22) {
    operator delete(a22);
  }
  _Unwind_Resume(a1);
}

void ___ZN3AGX6DeviceINS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE49createTGOptimizationDriverShaderAndBufferIfNeededEP18AGXG17FamilyDevice_block_invoke_2(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a3) {
    operator new();
  }
  uint64_t v5 = "MTLCompilerErrorTimeout";
  uint64_t v6 = "UnknownErrorCode";
  if (a3 == 2) {
    uint64_t v6 = "MTLCompilerErrorCompilationError";
  }
  if (a3 != 3) {
    uint64_t v5 = v6;
  }
  if (a3 == 1) {
    int v7 = "MTLCompilerErrorFatalError";
  }
  else {
    int v7 = v5;
  }
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  ProgramKey<(_AGCStreamToken)40,(AGX::DriverShaderCompilationMode)1>::serialize(a1 + 48, &v13, &v12);
  uint64_t v8 = a4;
  uint64_t v9 = v7;
  uint64_t v10 = v12;
  uint64_t v11 = v13;
  _ZZZZN3AGX6DeviceINS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE49createTGOptimizationDriverShaderAndBufferIfNeededEP18AGXG17FamilyDeviceEUb_EUb_ENKUlvE_clB14_AGX__Crashed_Ev();
}

void sub_2429FED18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  if (*(char *)(v5 - 49) < 0) {
    operator delete(*(void **)(v5 - 72));
  }
  AGX::ProgramBindingRemap<AGX::HAL200::Encoders,AGX::HAL200::Classes>::~ProgramBindingRemap((uint64_t)va);
  MEMORY[0x24566ED90](v4, 0x10F3C407204815DLL);
  _Unwind_Resume(a1);
}

uint64_t ___ZN3AGX8Compiler14compileProgramI10ProgramKeyIL15_AGCStreamToken40ELNS_27DriverShaderCompilationModeE1EEEEvRKT_P7NSArrayIPU27objcproto16MTLBinaryArchive11objc_objectEU13block_pointerFvRK20AGCDeserializedReply16MTLCompilerErrorP8NSStringEb_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a5) {
    AGX::Compiler::compileProgram<AGX::UserIntersectionProgramKey,AGCReplyArray>(AGX::UserIntersectionProgramKey const&,MTLCompileFunctionRequestData *,void({block_pointer})(AGCReplyArray const&,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,MTLCompilerError,NSString *,unsigned long long))::{lambda(void)#1}::operator()[abi:[AGX] Failed assertion __requestData.frameworkData && _requestData.pipelineOptions_]();
  }
  uint64_t v5 = *(uint64_t (**)(void))(*(void *)(a1 + 32) + 16);

  return v5();
}

void ___ZN3AGX8Compiler14compileProgramI10ProgramKeyIL15_AGCStreamToken40ELNS_27DriverShaderCompilationModeE1EE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSH_SH_SH_SH_16MTLCompilerErrorP8NSStringyE_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  v14[0] = MEMORY[0x263EF8330];
  v14[1] = 3221225472;
  id v15 = ___ZN3AGX8Compiler14compileProgramI10ProgramKeyIL15_AGCStreamToken40ELNS_27DriverShaderCompilationModeE1EE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSH_SH_SH_SH_16MTLCompilerErrorP8NSStringyE_block_invoke_2;
  __int16 v16 = &unk_26516F7E8;
  uint64_t v17 = a9;
  uint64_t v18 = a3;
  uint64_t v19 = a4;
  uint64_t v20 = a5;
  uint64_t v21 = a6;
  uint64_t v22 = a7;
  uint64_t v12 = a1 + 32;
  uint64_t v10 = *(void **)(a1 + 32);
  uint64_t v11 = *(void *)(v12 + 8);
  uint64_t v23 = a8;
  uint64_t v24 = v11;
  uint64_t v25 = a2;
  uint64_t v26 = a10;
  if (objc_msgSend(v10, "sync", MEMORY[0x263EF8330], 3221225472))
  {
    v15(v14);
  }
  else
  {
    global_queue = dispatch_get_global_queue(0, 0);
    dispatch_async(global_queue, v14);
  }
}

uint64_t ___ZN3AGX8Compiler14compileProgramI10ProgramKeyIL15_AGCStreamToken40ELNS_27DriverShaderCompilationModeE1EE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSH_SH_SH_SH_16MTLCompilerErrorP8NSStringyE_block_invoke_3(uint64_t a1, void *a2)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), *a2);
}

uint64_t ___ZN3AGX8Compiler14compileProgramI10ProgramKeyIL15_AGCStreamToken40ELNS_27DriverShaderCompilationModeE1EE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSH_SH_SH_SH_16MTLCompilerErrorP8NSStringyE_block_invoke_4(uint64_t a1, void *a2)
{
  if (getTimebaseInfo(void)::once != -1) {
    dispatch_once(&getTimebaseInfo(void)::once, &__block_literal_global_7474);
  }
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), *a2);
}

void ___ZN3AGX8Compiler14compileProgramI10ProgramKeyIL15_AGCStreamToken40ELNS_27DriverShaderCompilationModeE1EE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSH_SH_SH_SH_16MTLCompilerErrorP8NSStringyE_block_invoke_2(void *a1)
{
  size_t size_ptr = 0;
  buffer_ptr = 0;
  uint64_t v2 = a1[12];
  AGCDeserializedReply::AGCDeserializedReply((AGCDeserializedReply *)v5);
  if (v2 || (uint64_t v4 = a1[5]) == 0)
  {
    uint64_t v3 = 0;
  }
  else
  {
    uint64_t v3 = dispatch_data_create_map(v4, (const void **)&buffer_ptr, &size_ptr);
    AGCDeserializedReply::deserialize((AGCDeserializedReply *)v5, buffer_ptr, size_ptr);
  }
  (*(void (**)(void, unsigned char *))(a1[11] + 16))(a1[11], v5);
  if (v3) {
    dispatch_release(v3);
  }
  AGCDeserializedReply::~AGCDeserializedReply((AGCDeserializedReply *)v5);
}

void sub_2429FF02C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  AGCDeserializedReply::~AGCDeserializedReply((AGCDeserializedReply *)va);
  _Unwind_Resume(a1);
}

void __destroy_helper_block_e8_48c77_ZTS10ProgramKeyIL15_AGCStreamToken40ELN3AGX27DriverShaderCompilationModeE1EE(void *a1)
{
  a1[6] = &unk_26F851980;
  uint64_t v1 = (void *)a1[8];
  if (v1)
  {
    a1[9] = v1;
    operator delete(v1);
  }
}

void *__copy_helper_block_e8_48c77_ZTS10ProgramKeyIL15_AGCStreamToken40ELN3AGX27DriverShaderCompilationModeE1EE(void *result, uint64_t a2)
{
  result[6] = &unk_26F851980;
  *((_DWORD *)result + 14) = *(_DWORD *)(a2 + 56);
  result[9] = 0;
  result[10] = 0;
  result[8] = 0;
  uint64_t v3 = *(unsigned char **)(a2 + 64);
  uint64_t v2 = *(unsigned char **)(a2 + 72);
  int64_t v4 = v2 - v3;
  if (v2 != v3)
  {
    if (v4 < 0) {
      abort();
    }
    uint64_t v5 = result;
    uint64_t v6 = (char *)operator new(v2 - v3);
    v5[8] = v6;
    v5[9] = v6;
    int v7 = &v6[4 * (v4 >> 2)];
    v5[10] = v7;
    id result = memcpy(v6, v3, v4);
    v5[9] = v7;
  }
  return result;
}

void ProgramKey<(_AGCStreamToken)40,(AGX::DriverShaderCompilationMode)1>::serialize(uint64_t a1, void *a2, void *a3)
{
  uint64_t v6 = *(int **)(a1 + 16);
  *(void *)(a1 + 24) = v6;
  int v7 = *(unsigned __int8 *)(a1 + 8) | 0x100;
  uint64_t v8 = *(int **)(a1 + 32);
  if (v6 >= v8)
  {
    uint64_t v10 = (char *)v8 - (char *)v6;
    uint64_t v11 = v10 >> 1;
    if ((unint64_t)(v10 >> 1) <= 1) {
      uint64_t v11 = 1;
    }
    BOOL v12 = (unint64_t)v10 >= 0x7FFFFFFFFFFFFFFCLL;
    unint64_t v13 = 0x3FFFFFFFFFFFFFFFLL;
    if (!v12) {
      unint64_t v13 = v11;
    }
    if (v13 >> 62) {
      goto LABEL_34;
    }
    uint64_t v14 = v13;
    id v15 = operator new(4 * v13);
    uint64_t v8 = &v15[v14];
    _DWORD *v15 = v7;
    uint64_t v9 = (char *)(v15 + 1);
    *(void *)(a1 + 16) = v15;
    *(void *)(a1 + 24) = v15 + 1;
    *(void *)(a1 + 32) = &v15[v14];
    if (v6)
    {
      operator delete(v6);
      uint64_t v8 = *(int **)(a1 + 32);
    }
  }
  else
  {
    *uint64_t v6 = v7;
    uint64_t v9 = (char *)(v6 + 1);
  }
  *(void *)(a1 + 24) = v9;
  if (v9 < (char *)v8)
  {
    *(_DWORD *)uint64_t v9 = 96;
    __int16 v16 = v9 + 4;
    goto LABEL_33;
  }
  uint64_t v17 = *(char **)(a1 + 16);
  uint64_t v18 = (v9 - v17) >> 2;
  unint64_t v19 = v18 + 1;
  if ((unint64_t)(v18 + 1) >> 62) {
    abort();
  }
  uint64_t v20 = (char *)v8 - v17;
  if (v20 >> 1 > v19) {
    unint64_t v19 = v20 >> 1;
  }
  if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFFCLL) {
    unint64_t v21 = 0x3FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v21 = v19;
  }
  if (v21)
  {
    if (!(v21 >> 62))
    {
      uint64_t v22 = operator new(4 * v21);
      goto LABEL_22;
    }
LABEL_34:
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  uint64_t v22 = 0;
LABEL_22:
  uint64_t v23 = &v22[4 * v18];
  uint64_t v24 = &v22[4 * v21];
  _DWORD *v23 = 96;
  __int16 v16 = v23 + 1;
  if (v9 == v17) {
    goto LABEL_31;
  }
  unint64_t v25 = v9 - v17 - 4;
  if (v25 < 0x2C)
  {
    uint64_t v26 = v9;
    goto LABEL_30;
  }
  if ((unint64_t)(v17 - v22) < 0x20)
  {
    uint64_t v26 = v9;
    do
    {
LABEL_30:
      int v32 = *((_DWORD *)v26 - 1);
      v26 -= 4;
      *--uint64_t v23 = v32;
    }
    while (v26 != v17);
    goto LABEL_31;
  }
  uint64_t v27 = (v25 >> 2) + 1;
  uint64_t v26 = &v9[-4 * (v27 & 0x7FFFFFFFFFFFFFF8)];
  long long v28 = &v22[4 * v18 - 16];
  uint64_t v29 = v9 - 16;
  uint64_t v30 = v27 & 0x7FFFFFFFFFFFFFF8;
  do
  {
    long long v31 = *(_OWORD *)v29;
    *(v28 - 1) = *((_OWORD *)v29 - 1);
    _OWORD *v28 = v31;
    v28 -= 2;
    v29 -= 32;
    v30 -= 8;
  }
  while (v30);
  v23 -= v27 & 0x7FFFFFFFFFFFFFF8;
  if (v27 != (v27 & 0x7FFFFFFFFFFFFFF8)) {
    goto LABEL_30;
  }
LABEL_31:
  *(void *)(a1 + 16) = v23;
  *(void *)(a1 + 24) = v16;
  *(void *)(a1 + 32) = v24;
  if (v17) {
    operator delete(v17);
  }
LABEL_33:
  *(void *)(a1 + 24) = v16;
  *a2 = *(void *)(a1 + 16);
  *a3 = *(void *)(a1 + 24) - *(void *)(a1 + 16);
}

void _ZZZZN3AGX6DeviceINS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE49createTGOptimizationDriverShaderAndBufferIfNeededEP18AGXG17FamilyDeviceEUb_EUb_ENKUlvE_clB14_AGX__Crashed_Ev()
{
}

void AGX::HAL200::ComputeProgramVariant::~ComputeProgramVariant(AGX::HAL200::ComputeProgramVariant *this)
{
  AGX::ComputeProgramVariant<AGX::HAL200::Encoders,AGX::HAL200::Classes>::~ComputeProgramVariant((unint64_t)this);

  JUMPOUT(0x24566ED90);
}

uint64_t ProgramKey<(_AGCStreamToken)40,(AGX::DriverShaderCompilationMode)1>::getSupportIndirectCommandBuffers()
{
  return 0;
}

uint64_t ProgramKey<(_AGCStreamToken)40,(AGX::DriverShaderCompilationMode)1>::isPrecompiledToBinaryArchive()
{
  return 0;
}

uint64_t ProgramKey<(_AGCStreamToken)40,(AGX::DriverShaderCompilationMode)1>::isPrecompiledToPipelineCache()
{
  return 1;
}

uint64_t ProgramKey<(_AGCStreamToken)40,(AGX::DriverShaderCompilationMode)1>::legalizeStateForTargetOS()
{
  return 1;
}

void ___ZN3AGX8Compiler14compileProgramI10ProgramKeyIL15_AGCStreamToken28ELNS_27DriverShaderCompilationModeE1EE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSH_SH_SH_SH_16MTLCompilerErrorP8NSStringyE_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  v14[0] = MEMORY[0x263EF8330];
  v14[1] = 3221225472;
  id v15 = ___ZN3AGX8Compiler14compileProgramI10ProgramKeyIL15_AGCStreamToken28ELNS_27DriverShaderCompilationModeE1EE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSH_SH_SH_SH_16MTLCompilerErrorP8NSStringyE_block_invoke_2;
  __int16 v16 = &unk_26516F7E8;
  uint64_t v17 = a9;
  uint64_t v18 = a3;
  uint64_t v19 = a4;
  uint64_t v20 = a5;
  uint64_t v21 = a6;
  uint64_t v22 = a7;
  uint64_t v12 = a1 + 32;
  uint64_t v10 = *(void **)(a1 + 32);
  uint64_t v11 = *(void *)(v12 + 8);
  uint64_t v23 = a8;
  uint64_t v24 = v11;
  uint64_t v25 = a2;
  uint64_t v26 = a10;
  if (objc_msgSend(v10, "sync", MEMORY[0x263EF8330], 3221225472))
  {
    v15(v14);
  }
  else
  {
    global_queue = dispatch_get_global_queue(0, 0);
    dispatch_async(global_queue, v14);
  }
}

uint64_t ___ZN3AGX8Compiler14compileProgramI10ProgramKeyIL15_AGCStreamToken28ELNS_27DriverShaderCompilationModeE1EE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSH_SH_SH_SH_16MTLCompilerErrorP8NSStringyE_block_invoke_3(uint64_t a1, void *a2)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), *a2);
}

uint64_t ___ZN3AGX8Compiler14compileProgramI10ProgramKeyIL15_AGCStreamToken28ELNS_27DriverShaderCompilationModeE1EE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSH_SH_SH_SH_16MTLCompilerErrorP8NSStringyE_block_invoke_4(uint64_t a1, void *a2)
{
  if (getTimebaseInfo(void)::once != -1) {
    dispatch_once(&getTimebaseInfo(void)::once, &__block_literal_global_7474);
  }
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), *a2);
}

void ___ZN3AGX8Compiler14compileProgramI10ProgramKeyIL15_AGCStreamToken28ELNS_27DriverShaderCompilationModeE1EE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSH_SH_SH_SH_16MTLCompilerErrorP8NSStringyE_block_invoke_2(void *a1)
{
  size_t size_ptr = 0;
  buffer_ptr = 0;
  uint64_t v2 = a1[12];
  AGCDeserializedReply::AGCDeserializedReply((AGCDeserializedReply *)v5);
  if (v2 || (int64_t v4 = a1[5]) == 0)
  {
    uint64_t v3 = 0;
  }
  else
  {
    uint64_t v3 = dispatch_data_create_map(v4, (const void **)&buffer_ptr, &size_ptr);
    AGCDeserializedReply::deserialize((AGCDeserializedReply *)v5, buffer_ptr, size_ptr);
  }
  (*(void (**)(void, unsigned char *))(a1[11] + 16))(a1[11], v5);
  if (v3) {
    dispatch_release(v3);
  }
  AGCDeserializedReply::~AGCDeserializedReply((AGCDeserializedReply *)v5);
}

void sub_2429FF6D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  AGCDeserializedReply::~AGCDeserializedReply((AGCDeserializedReply *)va);
  _Unwind_Resume(a1);
}

void __destroy_helper_block_e8_40c77_ZTS10ProgramKeyIL15_AGCStreamToken28ELN3AGX27DriverShaderCompilationModeE1EE(void *a1)
{
  a1[5] = &unk_26F8519E0;
  uint64_t v1 = (void *)a1[7];
  if (v1)
  {
    a1[8] = v1;
    operator delete(v1);
  }
}

void *__copy_helper_block_e8_40c77_ZTS10ProgramKeyIL15_AGCStreamToken28ELN3AGX27DriverShaderCompilationModeE1EE(void *result, uint64_t a2)
{
  result[5] = &unk_26F8519E0;
  *((_DWORD *)result + 12) = *(_DWORD *)(a2 + 48);
  result[8] = 0;
  result[9] = 0;
  result[7] = 0;
  uint64_t v3 = *(unsigned char **)(a2 + 56);
  uint64_t v2 = *(unsigned char **)(a2 + 64);
  int64_t v4 = v2 - v3;
  if (v2 != v3)
  {
    if (v4 < 0) {
      abort();
    }
    uint64_t v5 = result;
    uint64_t v6 = (char *)operator new(v2 - v3);
    v5[7] = v6;
    v5[8] = v6;
    int v7 = &v6[4 * (v4 >> 2)];
    v5[9] = v7;
    id result = memcpy(v6, v3, v4);
    v5[8] = v7;
  }
  return result;
}

void ProgramKey<(_AGCStreamToken)28,(AGX::DriverShaderCompilationMode)1>::serialize(uint64_t a1, void *a2, void *a3)
{
  uint64_t v6 = *(int **)(a1 + 16);
  *(void *)(a1 + 24) = v6;
  int v7 = *(unsigned __int8 *)(a1 + 8) | 0x100;
  uint64_t v8 = *(int **)(a1 + 32);
  if (v6 >= v8)
  {
    uint64_t v10 = (char *)v8 - (char *)v6;
    uint64_t v11 = v10 >> 1;
    if ((unint64_t)(v10 >> 1) <= 1) {
      uint64_t v11 = 1;
    }
    BOOL v12 = (unint64_t)v10 >= 0x7FFFFFFFFFFFFFFCLL;
    unint64_t v13 = 0x3FFFFFFFFFFFFFFFLL;
    if (!v12) {
      unint64_t v13 = v11;
    }
    if (v13 >> 62) {
      goto LABEL_34;
    }
    uint64_t v14 = v13;
    id v15 = operator new(4 * v13);
    uint64_t v8 = &v15[v14];
    _DWORD *v15 = v7;
    uint64_t v9 = (char *)(v15 + 1);
    *(void *)(a1 + 16) = v15;
    *(void *)(a1 + 24) = v15 + 1;
    *(void *)(a1 + 32) = &v15[v14];
    if (v6)
    {
      operator delete(v6);
      uint64_t v8 = *(int **)(a1 + 32);
    }
  }
  else
  {
    *uint64_t v6 = v7;
    uint64_t v9 = (char *)(v6 + 1);
  }
  *(void *)(a1 + 24) = v9;
  if (v9 < (char *)v8)
  {
    *(_DWORD *)uint64_t v9 = 96;
    __int16 v16 = v9 + 4;
    goto LABEL_33;
  }
  uint64_t v17 = *(char **)(a1 + 16);
  uint64_t v18 = (v9 - v17) >> 2;
  unint64_t v19 = v18 + 1;
  if ((unint64_t)(v18 + 1) >> 62) {
    abort();
  }
  uint64_t v20 = (char *)v8 - v17;
  if (v20 >> 1 > v19) {
    unint64_t v19 = v20 >> 1;
  }
  if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFFCLL) {
    unint64_t v21 = 0x3FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v21 = v19;
  }
  if (v21)
  {
    if (!(v21 >> 62))
    {
      uint64_t v22 = operator new(4 * v21);
      goto LABEL_22;
    }
LABEL_34:
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  uint64_t v22 = 0;
LABEL_22:
  uint64_t v23 = &v22[4 * v18];
  uint64_t v24 = &v22[4 * v21];
  _DWORD *v23 = 96;
  __int16 v16 = v23 + 1;
  if (v9 == v17) {
    goto LABEL_31;
  }
  unint64_t v25 = v9 - v17 - 4;
  if (v25 < 0x2C)
  {
    uint64_t v26 = v9;
    goto LABEL_30;
  }
  if ((unint64_t)(v17 - v22) < 0x20)
  {
    uint64_t v26 = v9;
    do
    {
LABEL_30:
      int v32 = *((_DWORD *)v26 - 1);
      v26 -= 4;
      *--uint64_t v23 = v32;
    }
    while (v26 != v17);
    goto LABEL_31;
  }
  uint64_t v27 = (v25 >> 2) + 1;
  uint64_t v26 = &v9[-4 * (v27 & 0x7FFFFFFFFFFFFFF8)];
  long long v28 = &v22[4 * v18 - 16];
  uint64_t v29 = v9 - 16;
  uint64_t v30 = v27 & 0x7FFFFFFFFFFFFFF8;
  do
  {
    long long v31 = *(_OWORD *)v29;
    *(v28 - 1) = *((_OWORD *)v29 - 1);
    _OWORD *v28 = v31;
    v28 -= 2;
    v29 -= 32;
    v30 -= 8;
  }
  while (v30);
  v23 -= v27 & 0x7FFFFFFFFFFFFFF8;
  if (v27 != (v27 & 0x7FFFFFFFFFFFFFF8)) {
    goto LABEL_30;
  }
LABEL_31:
  *(void *)(a1 + 16) = v23;
  *(void *)(a1 + 24) = v16;
  *(void *)(a1 + 32) = v24;
  if (v17) {
    operator delete(v17);
  }
LABEL_33:
  *(void *)(a1 + 24) = v16;
  *a2 = *(void *)(a1 + 16);
  *a3 = *(void *)(a1 + 24) - *(void *)(a1 + 16);
}

void AGX::HAL200::ClearVisibilityVertexProgramVariant::~ClearVisibilityVertexProgramVariant(AGX::HAL200::ClearVisibilityVertexProgramVariant *this)
{
  *(void *)this = &unk_26F8529D8;
  if (*((void *)this + 336))
  {
    uint64_t v2 = (_OWORD *)((char *)this + 2664);
    uint64_t v3 = *((void *)this + 337);
    int64_t v4 = *(NSObject **)(v3 + 16);
    v5[0] = MEMORY[0x263EF8330];
    v5[1] = 3221225472;
    v5[2] = ___ZN3AGX4HeapILb1EE14deallocateImplERKNS1_10AllocationE_block_invoke;
    v5[3] = &__block_descriptor_48_e5_v8__0l;
    v5[4] = v3;
    v5[5] = (char *)this + 2664;
    dispatch_sync(v4, v5);
    *(_OWORD *)((char *)this + 2689) = 0u;
    *uint64_t v2 = 0u;
    *(_OWORD *)((char *)this + 2680) = 0u;
  }
  AGX::ProgramVariantESLState<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ArgumentTable,true,7ul>::~ProgramVariantESLState((uint64_t *)this + 168);
  AGX::ProgramVariant<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ClearVisibilityArgumentTable,false,false>::~ProgramVariant((unint64_t)this);

  JUMPOUT(0x24566ED90);
}

{
  _OWORD *v2;
  uint64_t v3;
  NSObject *v4;
  void v5[6];
  uint64_t vars8;

  *(void *)this = &unk_26F8529D8;
  if (*((void *)this + 336))
  {
    uint64_t v2 = (_OWORD *)((char *)this + 2664);
    uint64_t v3 = *((void *)this + 337);
    int64_t v4 = *(NSObject **)(v3 + 16);
    v5[0] = MEMORY[0x263EF8330];
    v5[1] = 3221225472;
    v5[2] = ___ZN3AGX4HeapILb1EE14deallocateImplERKNS1_10AllocationE_block_invoke;
    v5[3] = &__block_descriptor_48_e5_v8__0l;
    v5[4] = v3;
    v5[5] = (char *)this + 2664;
    dispatch_sync(v4, v5);
    *(_OWORD *)((char *)this + 2689) = 0u;
    *uint64_t v2 = 0u;
    *(_OWORD *)((char *)this + 2680) = 0u;
  }
  AGX::ProgramVariantESLState<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ArgumentTable,true,7ul>::~ProgramVariantESLState((uint64_t *)this + 168);

  AGX::ProgramVariant<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ClearVisibilityArgumentTable,false,false>::~ProgramVariant((unint64_t)this);
}

uint64_t ProgramKey<(_AGCStreamToken)28,(AGX::DriverShaderCompilationMode)1>::getSupportIndirectCommandBuffers()
{
  return 0;
}

uint64_t ProgramKey<(_AGCStreamToken)28,(AGX::DriverShaderCompilationMode)1>::isPrecompiledToBinaryArchive()
{
  return 0;
}

uint64_t ProgramKey<(_AGCStreamToken)28,(AGX::DriverShaderCompilationMode)1>::isPrecompiledToPipelineCache()
{
  return 1;
}

uint64_t ProgramKey<(_AGCStreamToken)28,(AGX::DriverShaderCompilationMode)1>::legalizeStateForTargetOS()
{
  return 1;
}

void sub_242A0029C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, os_unfair_lock_t lock, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  os_unfair_lock_unlock(lock);
  _Unwind_Resume(a1);
}

uint64_t AGX::Device<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::~Device(uint64_t a1)
{
  uint64_t v212 = *MEMORY[0x263EF8340];
  uint64_t v2 = (_OWORD *)AGX::USCProfileControlStateLoaderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes>::instance;
  if (AGX::USCProfileControlStateLoaderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes>::instance)
  {
    if (*(void *)(AGX::USCProfileControlStateLoaderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes>::instance + 24))
    {
      uint64_t v3 = *(void *)(AGX::USCProfileControlStateLoaderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes>::instance + 32);
      int64_t v4 = *(NSObject **)(v3 + 16);
      uint64_t v208 = MEMORY[0x263EF8330];
      __p.__r_.__value_.__r.__words[0] = 3221225472;
      __p.__r_.__value_.__l.__size_ = (std::string::size_type)___ZN3AGX4HeapILb1EE14deallocateImplERKNS1_10AllocationE_block_invoke;
      __p.__r_.__value_.__r.__words[2] = (std::string::size_type)&__block_descriptor_48_e5_v8__0l;
      uint64_t v210 = v3;
      uint64_t v211 = AGX::USCProfileControlStateLoaderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes>::instance;
      dispatch_sync(v4, &v208);
      *(_OWORD *)((char *)v2 + 25) = 0u;
      *uint64_t v2 = 0u;
      v2[1] = 0u;
    }
    MEMORY[0x24566ED90](v2, 0x10F0C407DABE345);
  }
  AGX::USCProfileControlStateLoaderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes>::instance = 0;
  if (*(void *)(a1 + 8032))
  {
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 8028));
    dispatch_source_cancel(*(dispatch_source_t *)(a1 + 8040));
    dispatch_release(*(dispatch_object_t *)(a1 + 8040));
    dispatch_source_cancel(*(dispatch_source_t *)(a1 + 8048));
    dispatch_release(*(dispatch_object_t *)(a1 + 8048));
    dispatch_source_cancel(*(dispatch_source_t *)(a1 + 8064));
    dispatch_release(*(dispatch_object_t *)(a1 + 8064));
    dispatch_source_cancel(*(dispatch_source_t *)(a1 + 8072));
    dispatch_release(*(dispatch_object_t *)(a1 + 8072));
    dispatch_sync(*(dispatch_queue_t *)(a1 + 8032), &__block_literal_global_24);
    os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 8028));
    dispatch_release(*(dispatch_object_t *)(a1 + 8032));
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 7712));
  uint64_t v5 = *(void *)a1;
  if (*(void *)a1)
  {
    uint64_t v6 = *(void *)(v5 + 848);
    if (v6)
    {
      unint64_t v7 = (unint64_t)*(unsigned int *)(v5 + 856) << 32;
      while (1)
      {
        while (1)
        {
          uint64_t v8 = *(NSObject **)(v6 + 24 * v7 + 144);
          if (v8) {
            dispatch_release(v8);
          }
          uint64_t v9 = (v7 + 1);
          if (v9 < HIDWORD(v7)) {
            break;
          }
          uint64_t v6 = *(void *)(v6 + 224);
          unint64_t v7 = 0x400000000;
          if (!v6) {
            goto LABEL_16;
          }
        }
        unint64_t v7 = v7 & 0xFFFFFFFF00000000 | v9;
        if (!v6)
        {
LABEL_16:
          if (!v7) {
            break;
          }
        }
      }
    }
    uint64_t v10 = v5 + 616;
    for (uint64_t i = 896; i != 1920; i += 8)
    {
      uint64_t v12 = *(void *)(v5 + i);
      if (v12)
      {
        if ((*(unsigned char *)v12 & 1) == 0) {
          operator delete(*(void **)(v12 + 8), 16 * *(unsigned int *)(v12 + 16), (std::align_val_t)8uLL);
        }
        MEMORY[0x24566ED90](v12, 0x1000C406FAD1563);
      }
    }
    uint64_t v13 = *(void *)(v5 + 848);
    if (v13 != v10)
    {
      do
      {
        uint64_t v14 = *(void *)(v13 + 224);
        MEMORY[0x24566ED90]();
        *(void *)(v5 + 848) = v14;
        uint64_t v13 = v14;
      }
      while (v14 != v10);
    }
    uint64_t v15 = *(void *)(v5 + 552);
    if (v15 != v5)
    {
      do
      {
        uint64_t v16 = *(void *)(v15 + 544);
        uint64_t v17 = VectorMap<AGX::BackgroundObjectProgramKey,AGX::ProgramVariantEntry<AGX::HAL200::BackgroundObjectProgramVariant>,4u>::Chunk::~Chunk(v15);
        MEMORY[0x24566ED90](v17, 0x10B0C40C7763737);
        *(void *)(v5 + 552) = v16;
        uint64_t v15 = v16;
      }
      while (v16 != v5);
    }
    uint64_t v18 = *(NSObject **)(v5 + 568);
    if (v18) {
      dispatch_release(v18);
    }
    uint64_t v19 = *(void *)(v5 + 576);
    if (v19) {
      (*(void (**)(uint64_t))(*(void *)v19 + 8))(v19);
    }

    uint64_t v20 = VectorMap<AGX::BackgroundObjectProgramKey,AGX::ProgramVariantEntry<AGX::HAL200::BackgroundObjectProgramVariant>,4u>::Chunk::~Chunk(v5);
    MEMORY[0x24566ED90](v20, 0x10F0C4024863A39);
  }
  *(void *)a1 = 0;
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 7712));
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 7716));
  uint64_t v21 = *(void *)(a1 + 8);
  if (v21)
  {
    uint64_t v22 = *(void *)(v21 + 1008);
    if (v22)
    {
      unint64_t v23 = (unint64_t)*(unsigned int *)(v21 + 1016) << 32;
      while (1)
      {
        while (1)
        {
          uint64_t v24 = *(NSObject **)(v22 + 24 * v23 + 144);
          if (v24) {
            dispatch_release(v24);
          }
          uint64_t v25 = (v23 + 1);
          if (v25 < HIDWORD(v23)) {
            break;
          }
          uint64_t v22 = *(void *)(v22 + 224);
          unint64_t v23 = 0x400000000;
          if (!v22) {
            goto LABEL_41;
          }
        }
        unint64_t v23 = v23 & 0xFFFFFFFF00000000 | v25;
        if (!v22)
        {
LABEL_41:
          if (!v23) {
            break;
          }
        }
      }
    }
    uint64_t v26 = v21 + 776;
    for (uint64_t j = 1056; j != 2080; j += 8)
    {
      uint64_t v28 = *(void *)(v21 + j);
      if (v28)
      {
        if ((*(unsigned char *)v28 & 1) == 0) {
          operator delete(*(void **)(v28 + 8), 16 * *(unsigned int *)(v28 + 16), (std::align_val_t)8uLL);
        }
        MEMORY[0x24566ED90](v28, 0x1000C406FAD1563);
      }
    }
    uint64_t v29 = *(void *)(v21 + 1008);
    if (v29 != v26)
    {
      do
      {
        uint64_t v30 = *(void *)(v29 + 224);
        MEMORY[0x24566ED90]();
        *(void *)(v21 + 1008) = v30;
        uint64_t v29 = v30;
      }
      while (v30 != v26);
    }
    uint64_t v31 = *(void *)(v21 + 712);
    if (v31 != v21)
    {
      do
      {
        uint64_t v32 = *(void *)(v31 + 704);
        uint64_t v33 = VectorMap<AGX::EndOfTileProgramKey,AGX::ProgramVariantEntry<AGX::HAL200::EndOfTileProgramVariant>,4u>::Chunk::~Chunk(v31);
        MEMORY[0x24566ED90](v33, 0x10B0C40830DFB6ALL);
        *(void *)(v21 + 712) = v32;
        uint64_t v31 = v32;
      }
      while (v32 != v21);
    }
    int v34 = *(NSObject **)(v21 + 728);
    if (v34) {
      dispatch_release(v34);
    }
    unint64_t v35 = *(void *)(v21 + 736);
    if (v35)
    {
      AGX::ProgramVariantESLState<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ArgumentTable,true,7ul>::~ProgramVariantESLState((uint64_t *)(v35 + 512));
      unint64_t v36 = AGX::EndOfTileProgramVariantBase<AGX::HAL200::Encoders,AGX::HAL200::Classes>::~EndOfTileProgramVariantBase(v35);
      MEMORY[0x24566ED90](v36, 0x10F2C407AEA2096);
    }

    uint64_t v37 = VectorMap<AGX::EndOfTileProgramKey,AGX::ProgramVariantEntry<AGX::HAL200::EndOfTileProgramVariant>,4u>::Chunk::~Chunk(v21);
    MEMORY[0x24566ED90](v37, 0x10F0C40D7CEEA3DLL);
  }
  *(void *)(a1 + 8) = 0;
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 7716));
  uint64_t v38 = *(void *)(a1 + 64);
  if (v38)
  {
    uint64_t v39 = *(void *)(v38 + 1008);
    if (v39)
    {
      unint64_t v40 = (unint64_t)*(unsigned int *)(v38 + 1016) << 32;
      while (1)
      {
        while (1)
        {
          long long v41 = *(NSObject **)(v39 + 24 * v40 + 144);
          if (v41) {
            dispatch_release(v41);
          }
          uint64_t v42 = (v40 + 1);
          if (v42 < HIDWORD(v40)) {
            break;
          }
          uint64_t v39 = *(void *)(v39 + 224);
          unint64_t v40 = 0x400000000;
          if (!v39) {
            goto LABEL_66;
          }
        }
        unint64_t v40 = v40 & 0xFFFFFFFF00000000 | v42;
        if (!v39)
        {
LABEL_66:
          if (!v40) {
            break;
          }
        }
      }
    }
    uint64_t v43 = v38 + 776;
    for (uint64_t k = 1056; k != 2080; k += 8)
    {
      uint64_t v45 = *(void *)(v38 + k);
      if (v45)
      {
        if ((*(unsigned char *)v45 & 1) == 0) {
          operator delete(*(void **)(v45 + 8), 16 * *(unsigned int *)(v45 + 16), (std::align_val_t)8uLL);
        }
        MEMORY[0x24566ED90](v45, 0x1000C406FAD1563);
      }
    }
    uint64_t v46 = *(void *)(v38 + 1008);
    if (v46 != v43)
    {
      do
      {
        uint64_t v47 = *(void *)(v46 + 224);
        MEMORY[0x24566ED90]();
        *(void *)(v38 + 1008) = v47;
        uint64_t v46 = v47;
      }
      while (v47 != v43);
    }
    long long v48 = *(void **)(v38 + 712);
    if (v48 != (void *)v38)
    {
      do
      {
        uint64_t v49 = (void *)v48[88];
        long long v50 = VectorMap<AGX::EndOfTileProgramKey,AGX::ProgramVariantEntry<AGX::HAL200::SWEndOfTileProgramVariant>,4u>::Chunk::~Chunk(v48);
        MEMORY[0x24566ED90](v50, 0x10B0C40830DFB6ALL);
        *(void *)(v38 + 712) = v49;
        long long v48 = v49;
      }
      while (v49 != (void *)v38);
    }
    AGX::ProgramVariantEntry<AGX::HAL200::SWEndOfTileProgramVariant>::~ProgramVariantEntry(v38 + 728);
    long long v51 = VectorMap<AGX::EndOfTileProgramKey,AGX::ProgramVariantEntry<AGX::HAL200::SWEndOfTileProgramVariant>,4u>::Chunk::~Chunk((void *)v38);
    MEMORY[0x24566ED90](v51, 0x10F0C40D7CEEA3DLL);
  }
  *(void *)(a1 + 64) = 0;
  uint64_t v52 = *(void *)(a1 + 16);
  if (v52)
  {
    uint64_t v53 = *(void *)(v52 + 848);
    if (v53)
    {
      unint64_t v54 = (unint64_t)*(unsigned int *)(v52 + 856) << 32;
      while (1)
      {
        while (1)
        {
          long long v55 = *(NSObject **)(v53 + 24 * v54 + 144);
          if (v55) {
            dispatch_release(v55);
          }
          uint64_t v56 = (v54 + 1);
          if (v56 < HIDWORD(v54)) {
            break;
          }
          uint64_t v53 = *(void *)(v53 + 224);
          unint64_t v54 = 0x400000000;
          if (!v53) {
            goto LABEL_87;
          }
        }
        unint64_t v54 = v54 & 0xFFFFFFFF00000000 | v56;
        if (!v53)
        {
LABEL_87:
          if (!v54) {
            break;
          }
        }
      }
    }
    uint64_t v57 = v52 + 616;
    for (uint64_t m = 896; m != 1920; m += 8)
    {
      uint64_t v59 = *(void *)(v52 + m);
      if (v59)
      {
        if ((*(unsigned char *)v59 & 1) == 0) {
          operator delete(*(void **)(v59 + 8), 16 * *(unsigned int *)(v59 + 16), (std::align_val_t)8uLL);
        }
        MEMORY[0x24566ED90](v59, 0x1000C406FAD1563);
      }
    }
    uint64_t v60 = *(void *)(v52 + 848);
    if (v60 != v57)
    {
      do
      {
        uint64_t v61 = *(void *)(v60 + 224);
        MEMORY[0x24566ED90]();
        *(void *)(v52 + 848) = v61;
        uint64_t v60 = v61;
      }
      while (v61 != v57);
    }
    uint64_t v62 = *(void *)(v52 + 552);
    if (v62 != v52)
    {
      do
      {
        uint64_t v63 = *(void *)(v62 + 544);
        uint64_t v64 = VectorMap<AGX::BlitFragmentProgramKey,AGX::ProgramVariantEntry<AGX::HAL200::BlitFragmentProgramVariant>,4u>::Chunk::~Chunk(v62);
        MEMORY[0x24566ED90](v64, 0x10B0C40CE4C6A1ELL);
        *(void *)(v52 + 552) = v63;
        uint64_t v62 = v63;
      }
      while (v63 != v52);
    }
    int v65 = *(NSObject **)(v52 + 568);
    if (v65) {
      dispatch_release(v65);
    }
    uint64_t v66 = *(void *)(v52 + 576);
    if (v66) {
      (*(void (**)(uint64_t))(*(void *)v66 + 8))(v66);
    }

    uint64_t v67 = VectorMap<AGX::BlitFragmentProgramKey,AGX::ProgramVariantEntry<AGX::HAL200::BlitFragmentProgramVariant>,4u>::Chunk::~Chunk(v52);
    MEMORY[0x24566ED90](v67, 0x10F0C40AE166433);
  }
  *(void *)(a1 + 16) = 0;
  uint64_t v68 = *(void *)(a1 + 24);
  if (v68)
  {
    uint64_t v69 = *(void *)(v68 + 688);
    if (v69)
    {
      unint64_t v70 = (unint64_t)*(unsigned int *)(v68 + 696) << 32;
      while (1)
      {
        while (1)
        {
          long long v71 = *(NSObject **)(v69 + 24 * v70 + 144);
          if (v71) {
            dispatch_release(v71);
          }
          uint64_t v72 = (v70 + 1);
          if (v72 < HIDWORD(v70)) {
            break;
          }
          uint64_t v69 = *(void *)(v69 + 224);
          unint64_t v70 = 0x400000000;
          if (!v69) {
            goto LABEL_112;
          }
        }
        unint64_t v70 = v70 & 0xFFFFFFFF00000000 | v72;
        if (!v69)
        {
LABEL_112:
          if (!v70) {
            break;
          }
        }
      }
    }
    uint64_t v73 = v68 + 456;
    for (uint64_t n = 736; n != 1760; n += 8)
    {
      uint64_t v75 = *(void *)(v68 + n);
      if (v75)
      {
        if ((*(unsigned char *)v75 & 1) == 0) {
          operator delete(*(void **)(v75 + 8), 16 * *(unsigned int *)(v75 + 16), (std::align_val_t)8uLL);
        }
        MEMORY[0x24566ED90](v75, 0x1000C406FAD1563);
      }
    }
    uint64_t v76 = *(void *)(v68 + 688);
    if (v76 != v73)
    {
      do
      {
        uint64_t v77 = *(void *)(v76 + 224);
        MEMORY[0x24566ED90]();
        *(void *)(v68 + 688) = v77;
        uint64_t v76 = v77;
      }
      while (v77 != v73);
    }
    uint64_t v78 = *(void *)(v68 + 392);
    if (v78 != v68)
    {
      do
      {
        uint64_t v79 = *(void *)(v78 + 384);
        uint64_t v80 = VectorMap<AGX::BlitVertexProgramKey,AGX::ProgramVariantEntry<AGX::HAL200::BlitVertexProgramVariant>,4u>::Chunk::~Chunk(v78);
        MEMORY[0x24566ED90](v80, 0x10B0C407B6AF669);
        *(void *)(v68 + 392) = v79;
        uint64_t v78 = v79;
      }
      while (v79 != v68);
    }
    long long v81 = *(NSObject **)(v68 + 408);
    if (v81) {
      dispatch_release(v81);
    }
    uint64_t v82 = *(void *)(v68 + 416);
    if (v82) {
      (*(void (**)(uint64_t))(*(void *)v82 + 8))(v82);
    }

    uint64_t v83 = VectorMap<AGX::BlitVertexProgramKey,AGX::ProgramVariantEntry<AGX::HAL200::BlitVertexProgramVariant>,4u>::Chunk::~Chunk(v68);
    MEMORY[0x24566ED90](v83, 0x10F0C40F5FDF6C2);
  }
  *(void *)(a1 + 24) = 0;
  uint64_t v84 = *(void *)(a1 + 32);
  if (v84)
  {
    uint64_t v85 = *(void *)(v84 + 848);
    if (v85)
    {
      unint64_t v86 = (unint64_t)*(unsigned int *)(v84 + 856) << 32;
      while (1)
      {
        while (1)
        {
          int v87 = *(NSObject **)(v85 + 24 * v86 + 144);
          if (v87) {
            dispatch_release(v87);
          }
          uint64_t v88 = (v86 + 1);
          if (v88 < HIDWORD(v86)) {
            break;
          }
          uint64_t v85 = *(void *)(v85 + 224);
          unint64_t v86 = 0x400000000;
          if (!v85) {
            goto LABEL_137;
          }
        }
        unint64_t v86 = v86 & 0xFFFFFFFF00000000 | v88;
        if (!v85)
        {
LABEL_137:
          if (!v86) {
            break;
          }
        }
      }
    }
    uint64_t v89 = v84 + 616;
    for (iuint64_t i = 896; ii != 1920; ii += 8)
    {
      uint64_t v91 = *(void *)(v84 + ii);
      if (v91)
      {
        if ((*(unsigned char *)v91 & 1) == 0) {
          operator delete(*(void **)(v91 + 8), 16 * *(unsigned int *)(v91 + 16), (std::align_val_t)8uLL);
        }
        MEMORY[0x24566ED90](v91, 0x1000C406FAD1563);
      }
    }
    uint64_t v92 = *(void *)(v84 + 848);
    if (v92 != v89)
    {
      do
      {
        uint64_t v93 = *(void *)(v92 + 224);
        MEMORY[0x24566ED90]();
        *(void *)(v84 + 848) = v93;
        uint64_t v92 = v93;
      }
      while (v93 != v89);
    }
    uint64_t v94 = *(void *)(v84 + 552);
    if (v94 != v84)
    {
      do
      {
        uint64_t v95 = *(void *)(v94 + 544);
        uint64_t v96 = VectorMap<AGX::BlitComputeProgramKey,AGX::ProgramVariantEntry<AGX::HAL200::BlitComputeProgramVariant>,4u>::Chunk::~Chunk(v94);
        MEMORY[0x24566ED90](v96, 0x10B0C40CE4C6A1ELL);
        *(void *)(v84 + 552) = v95;
        uint64_t v94 = v95;
      }
      while (v95 != v84);
    }
    BOOL v97 = *(NSObject **)(v84 + 568);
    if (v97) {
      dispatch_release(v97);
    }
    uint64_t v98 = *(void *)(v84 + 576);
    if (v98) {
      (*(void (**)(uint64_t))(*(void *)v98 + 8))(v98);
    }

    uint64_t v99 = VectorMap<AGX::BlitComputeProgramKey,AGX::ProgramVariantEntry<AGX::HAL200::BlitComputeProgramVariant>,4u>::Chunk::~Chunk(v84);
    MEMORY[0x24566ED90](v99, 0x10F0C40AE166433);
  }
  *(void *)(a1 + 32) = 0;
  uint64_t v100 = *(void *)(a1 + 5072);
  if (v100)
  {
    uint64_t v101 = *(void *)(v100 + 688);
    if (v101)
    {
      unint64_t v102 = (unint64_t)*(unsigned int *)(v100 + 696) << 32;
      while (1)
      {
        while (1)
        {
          char v103 = *(NSObject **)(v101 + 24 * v102 + 144);
          if (v103) {
            dispatch_release(v103);
          }
          uint64_t v104 = (v102 + 1);
          if (v104 < HIDWORD(v102)) {
            break;
          }
          uint64_t v101 = *(void *)(v101 + 224);
          unint64_t v102 = 0x400000000;
          if (!v101) {
            goto LABEL_162;
          }
        }
        unint64_t v102 = v102 & 0xFFFFFFFF00000000 | v104;
        if (!v101)
        {
LABEL_162:
          if (!v102) {
            break;
          }
        }
      }
    }
    uint64_t v105 = v100 + 456;
    for (juint64_t j = 736; jj != 1760; jj += 8)
    {
      uint64_t v107 = *(void *)(v100 + jj);
      if (v107)
      {
        if ((*(unsigned char *)v107 & 1) == 0) {
          operator delete(*(void **)(v107 + 8), 16 * *(unsigned int *)(v107 + 16), (std::align_val_t)8uLL);
        }
        MEMORY[0x24566ED90](v107, 0x1000C406FAD1563);
      }
    }
    uint64_t v108 = *(void *)(v100 + 688);
    if (v108 != v105)
    {
      do
      {
        uint64_t v109 = *(void *)(v108 + 224);
        MEMORY[0x24566ED90]();
        *(void *)(v100 + 688) = v109;
        uint64_t v108 = v109;
      }
      while (v109 != v105);
    }
    uint64_t v110 = *(void *)(v100 + 392);
    if (v110 != v100)
    {
      do
      {
        uint64_t v111 = *(void *)(v110 + 384);
        uint64_t v112 = VectorMap<AGX::ComputeControlFlowPredicateProgramKey,AGX::ProgramVariantEntry<AGX::HAL200::ComputeProgramVariant>,4u>::Chunk::~Chunk(v110);
        MEMORY[0x24566ED90](v112, 0x10B0C407B6AF669);
        *(void *)(v100 + 392) = v111;
        uint64_t v110 = v111;
      }
      while (v111 != v100);
    }
    long long v113 = *(NSObject **)(v100 + 408);
    if (v113) {
      dispatch_release(v113);
    }
    uint64_t v114 = *(void *)(v100 + 416);
    if (v114) {
      (*(void (**)(uint64_t))(*(void *)v114 + 8))(v114);
    }

    uint64_t v115 = VectorMap<AGX::ComputeControlFlowPredicateProgramKey,AGX::ProgramVariantEntry<AGX::HAL200::ComputeProgramVariant>,4u>::Chunk::~Chunk(v100);
    MEMORY[0x24566ED90](v115, 0x10F0C40F5FDF6C2);
  }
  *(void *)(a1 + 5072) = 0;
  uint64_t v116 = *(void *)(a1 + 5856);
  if (v116) {
    (*(void (**)(uint64_t))(*(void *)v116 + 8))(v116);
  }
  *(void *)(a1 + 5856) = 0;
  uint64_t v117 = *(void *)(a1 + 5080);
  if (v117)
  {
    uint64_t v118 = *(void *)(v117 + 688);
    if (v118)
    {
      unint64_t v119 = (unint64_t)*(unsigned int *)(v117 + 696) << 32;
      while (1)
      {
        while (1)
        {
          v120 = *(NSObject **)(v118 + 24 * v119 + 144);
          if (v120) {
            dispatch_release(v120);
          }
          uint64_t v121 = (v119 + 1);
          if (v121 < HIDWORD(v119)) {
            break;
          }
          uint64_t v118 = *(void *)(v118 + 224);
          unint64_t v119 = 0x400000000;
          if (!v118) {
            goto LABEL_189;
          }
        }
        unint64_t v119 = v119 & 0xFFFFFFFF00000000 | v121;
        if (!v118)
        {
LABEL_189:
          if (!v119) {
            break;
          }
        }
      }
    }
    uint64_t v122 = v117 + 456;
    for (kuint64_t k = 736; kk != 1760; kk += 8)
    {
      uint64_t v124 = *(void *)(v117 + kk);
      if (v124)
      {
        if ((*(unsigned char *)v124 & 1) == 0) {
          operator delete(*(void **)(v124 + 8), 16 * *(unsigned int *)(v124 + 16), (std::align_val_t)8uLL);
        }
        MEMORY[0x24566ED90](v124, 0x1000C406FAD1563);
      }
    }
    uint64_t v125 = *(void *)(v117 + 688);
    if (v125 != v122)
    {
      do
      {
        uint64_t v126 = *(void *)(v125 + 224);
        MEMORY[0x24566ED90]();
        *(void *)(v117 + 688) = v126;
        uint64_t v125 = v126;
      }
      while (v126 != v122);
    }
    uint64_t v127 = *(void *)(v117 + 392);
    if (v127 != v117)
    {
      do
      {
        uint64_t v128 = *(void *)(v127 + 384);
        uint64_t v129 = VectorMap<AGX::TileDispatchVertexProgramKey,AGX::ProgramVariantEntry<AGX::HAL200::TileDispatchVertexProgramVariant>,4u>::Chunk::~Chunk(v127);
        MEMORY[0x24566ED90](v129, 0x10B0C407B6AF669);
        *(void *)(v117 + 392) = v128;
        uint64_t v127 = v128;
      }
      while (v128 != v117);
    }
    char v130 = *(NSObject **)(v117 + 408);
    if (v130) {
      dispatch_release(v130);
    }
    uint64_t v131 = *(void *)(v117 + 416);
    if (v131) {
      (*(void (**)(uint64_t))(*(void *)v131 + 8))(v131);
    }

    uint64_t v132 = VectorMap<AGX::TileDispatchVertexProgramKey,AGX::ProgramVariantEntry<AGX::HAL200::TileDispatchVertexProgramVariant>,4u>::Chunk::~Chunk(v117);
    MEMORY[0x24566ED90](v132, 0x10F0C40F5FDF6C2);
  }
  *(void *)(a1 + 5080) = 0;
  for (muint64_t m = 80; mm != 2576; mm += 8)
  {
    long long v134 = (uint64_t *)atomic_load((unint64_t *)(a1 + mm));
    if (v134)
    {
      uint64_t v135 = AGX::ComputePipeline<AGX::HAL200::ObjClasses,AGX::HAL200::Classes,AGX::HAL200::Encoders>::~ComputePipeline(v134);
      MEMORY[0x24566ED90](v135, 0x10B0C400A6CDE14);
    }
    atomic_store(0, (unint64_t *)(a1 + mm));
  }
  uint64_t v136 = *(void *)(a1 + 5088);
  if (v136) {
    MEMORY[0x24566ED90](v136, 0xC400A2AC0F1);
  }
  *(void *)(a1 + 5088) = 0;
  uint64_t v137 = *(void *)(a1 + 6016);
  if (v137)
  {
    dispatch_release(*(dispatch_object_t *)(v137 + 16));
    MEMORY[0x24566ED90](v137, 0x10A0C4069335C68);
  }
  *(void *)(a1 + 6016) = 0;
  uint64_t v138 = *(void *)(a1 + 6024);
  if (v138)
  {
    dispatch_release(*(dispatch_object_t *)(v138 + 16));
    MEMORY[0x24566ED90](v138, 0x10A0C409D8FE3EALL);
  }
  *(void *)(a1 + 6024) = 0;
  uint64_t v139 = *(id **)(a1 + 6008);
  if (v139)
  {

    *uint64_t v139 = 0;
    v139[1] = 0;

    v139[2] = 0;
    MEMORY[0x24566ED90](v139, 0x80C40D6874129);
  }
  *(void *)(a1 + 6008) = 0;
  uint64_t v140 = *(void *)(a1 + 6032);
  if (v140)
  {

    *(void *)(v140 + 8) = 0;
    MEMORY[0x24566ED90](v140, 0x10A0C40EB7D2DA3);
  }
  *(void *)(a1 + 6032) = 0;
  uint64_t v141 = *(void *)(a1 + 6040);
  if (v141)
  {

    *(void *)(v141 + 8) = 0;
    MEMORY[0x24566ED90](v141, 0x10A0C40EB7D2DA3);
  }
  *(void *)(a1 + 6040) = 0;
  uint64_t v142 = *(void *)(a1 + 6048);
  if (v142)
  {

    *(void *)(v142 + 8) = 0;
    MEMORY[0x24566ED90](v142, 0x10A0C40EB7D2DA3);
  }
  *(void *)(a1 + 6048) = 0;
  uint64_t v143 = *(void *)(a1 + 6056);
  if (v143)
  {

    *(void *)(v143 + 8) = 0;
    MEMORY[0x24566ED90](v143, 0x10A0C4023802154);
  }
  *(void *)(a1 + 6056) = 0;
  if (*(unsigned char *)(a1 + 5105))
  {
    uint64_t v144 = *(void *)(a1 + 7648);
    if (v144)
    {

      *(void *)(v144 + 8) = 0;
      MEMORY[0x24566ED90](v144, 0x10A0C40DDEE28D5);
    }
    *(void *)(a1 + 7648) = 0;
  }
  if (*(unsigned char *)(a1 + 5106))
  {
    uint64_t v145 = *(void *)(a1 + 7688);
    if (v145)
    {

      *(void *)(v145 + 8) = 0;
      MEMORY[0x24566ED90](v145, 0x10A0C40DDEE28D5);
    }
    *(void *)(a1 + 7688) = 0;
  }
  uint64_t v146 = *(void *)(a1 + 7392);
  if (v146) {
    MEMORY[0x24566ED90](v146, 0x1020C40C6EA833ELL);
  }
  *(void *)(a1 + 7392) = 0;
  uint64_t v147 = *(void *)(a1 + 7400);
  if (v147) {
    MEMORY[0x24566ED90](v147, 0x1020C40C6EA833ELL);
  }
  *(void *)(a1 + 7400) = 0;
  uint64_t v148 = *(void *)(a1 + 7408);
  if (v148) {
    MEMORY[0x24566ED90](v148, 0x1020C40C6EA833ELL);
  }
  *(void *)(a1 + 7408) = 0;
  uint64_t v149 = *(void *)(a1 + 5152);
  if (v149)
  {
    uint64_t v150 = AGX::DriverIntersectionFunctionTableGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::~DriverIntersectionFunctionTableGen1(v149);
    MEMORY[0x24566ED90](v150, 0x10E0C404441EACFLL);
  }
  *(void *)(a1 + 5152) = 0;
  uint64_t v151 = *(void *)(a1 + 5144);
  if (v151)
  {
    uint64_t v152 = AGX::IntersectionFunctionTableAllocatorGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::~IntersectionFunctionTableAllocatorGen1(v151);
    MEMORY[0x24566ED90](v152, 0x10A0C40EBC2E2A4);
  }
  *(void *)(a1 + 5144) = 0;
  uint64_t v153 = *(void *)(a1 + 7944);
  if (v153)
  {
    uint64_t v154 = *(void *)(v153 + 8);
    if (!v154
      || ((*(void (**)(uint64_t))(*(void *)v154 + 8))(v154), (uint64_t v153 = *(void *)(a1 + 7944)) != 0))
    {
      uint64_t v155 = *(void *)(v153 + 3208);
      if (v155)
      {
        uint64_t v156 = ProgramVaryingTable<AGX::HAL200::Encoders,AGX::HAL200::Classes>::~ProgramVaryingTable(v155);
        MEMORY[0x24566ED90](v156, 0x10F0C4099BF1763);
      }
      uint64_t v157 = AGX::RenderPipeline<AGX::HAL200::ObjClasses,AGX::HAL200::Classes,AGX::HAL200::Encoders>::~RenderPipeline(v153);
      MEMORY[0x24566ED90](v157, 0x10F0C40403D19FDLL);
    }
  }
  *(void *)(a1 + 7944) = 0;
  long long v158 = *(IONotificationPort **)(a1 + 7704);
  if (v158) {
    IONotificationPortDestroy(v158);
  }
  uint64_t v159 = *(void **)(a1 + 7504);
  if (v159 != (void *)(a1 + 7512))
  {
    do
    {
      uint64_t v208 = v159[4];
      if (*((char *)v159 + 63) < 0) {
        std::string::__init_copy_ctor_external(&__p, (const std::string::value_type *)v159[5], v159[6]);
      }
      else {
        std::string __p = *(std::string *)(v159 + 5);
      }

      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(__p.__r_.__value_.__l.__data_);
        v160 = (void *)v159[1];
        if (v160)
        {
          do
          {
LABEL_261:
            std::string v161 = v160;
            v160 = (void *)*v160;
          }
          while (v160);
          goto LABEL_253;
        }
      }
      else
      {
        v160 = (void *)v159[1];
        if (v160) {
          goto LABEL_261;
        }
      }
      do
      {
        std::string v161 = (void *)v159[2];
        BOOL v162 = *v161 == (void)v159;
        uint64_t v159 = v161;
      }
      while (!v162);
LABEL_253:
      uint64_t v159 = v161;
    }
    while (v161 != (void *)(a1 + 7512));
  }

  char v163 = (void *)atomic_load((unint64_t *)(a1 + 7888));
  char v164 = (void *)atomic_load((unint64_t *)(a1 + 7896));

  {
    uint64_t v165 = *(void *)(a1 + 8000);
    uint64_t v208 = MEMORY[0x263EF8330];
    __p.__r_.__value_.__r.__words[0] = 0x40000000;
    __p.__r_.__value_.__l.__size_ = (std::string::size_type)___ZN3AGX35agxaSignpostDeregisterForEnablementEU13block_pointerFvbE_block_invoke;
    __p.__r_.__value_.__r.__words[2] = (std::string::size_type)&unk_265171458;
    uint64_t v210 = v165;
  }
  else if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_INFO))
  {
    LOWORD(v208) = 0;
    _os_log_impl(&dword_2427AD000, &_os_log_internal, OS_LOG_TYPE_INFO, "AGX: signpost enablement notifications queue is uninitialized", (uint8_t *)&v208, 2u);
  }
  _Block_release(*(const void **)(a1 + 8000));
  v166 = *(uint64_t **)(a1 + 8008);
  if (v166)
  {
    v167 = AGX::ComputePipeline<AGX::HAL200::ObjClasses,AGX::HAL200::Classes,AGX::HAL200::Encoders>::~ComputePipeline(v166);
    MEMORY[0x24566ED90](v167, 0x10B0C400A6CDE14);
  }
  *(void *)(a1 + 8008) = 0;

  *(void *)(a1 + 7304) = 0;
  v168 = *(void **)(a1 + 7976);
  if (v168)
  {
    do
    {
      uint64_t v169 = (void *)*v168;
      operator delete(v168);
      v168 = v169;
    }
    while (v169);
  }
  v170 = *(void **)(a1 + 7960);
  *(void *)(a1 + 7960) = 0;
  if (v170) {
    operator delete(v170);
  }
  std::__tree<std::__value_type<AGX::scissorMapInfo<AGX::HAL200::Encoders>,unsigned int>,std::__map_value_compare<AGX::scissorMapInfo<AGX::HAL200::Encoders>,std::__value_type<AGX::scissorMapInfo<AGX::HAL200::Encoders>,unsigned int>,std::less<AGX::scissorMapInfo<AGX::HAL200::Encoders>>,true>,std::allocator<std::__value_type<AGX::scissorMapInfo<AGX::HAL200::Encoders>,unsigned int>>>::destroy(*(void **)(a1 + 7672));
  std::__tree<std::__value_type<AGX::scissorMapInfo<AGX::HAL200::Encoders>,unsigned int>,std::__map_value_compare<AGX::scissorMapInfo<AGX::HAL200::Encoders>,std::__value_type<AGX::scissorMapInfo<AGX::HAL200::Encoders>,unsigned int>,std::less<AGX::scissorMapInfo<AGX::HAL200::Encoders>>,true>,std::allocator<std::__value_type<AGX::scissorMapInfo<AGX::HAL200::Encoders>,unsigned int>>>::destroy(*(void **)(a1 + 7632));
  std::__tree<std::__value_type<AGX::SamplerDescriptor,std::weak_ptr<AGX::HAL200::Sampler>>,std::__map_value_compare<AGX::SamplerDescriptor,std::__value_type<AGX::SamplerDescriptor,std::weak_ptr<AGX::HAL200::Sampler>>,std::less<AGX::SamplerDescriptor>,true>,std::allocator<std::__value_type<AGX::SamplerDescriptor,std::weak_ptr<AGX::HAL200::Sampler>>>>::destroy(*(char **)(a1 + 7600));
  v171 = *(void **)(a1 + 7560);
  if (v171)
  {
    *(void *)(a1 + 7568) = v171;
    operator delete(v171);
  }
  std::__tree<std::__value_type<AGX::SamplerDescriptor,AGX::WeakObjCPtr<AGXG17FamilySampler>>,std::__map_value_compare<AGX::SamplerDescriptor,std::__value_type<AGX::SamplerDescriptor,AGX::WeakObjCPtr<AGXG17FamilySampler>>,std::less<AGX::SamplerDescriptor>,true>,std::allocator<std::__value_type<AGX::SamplerDescriptor,AGX::WeakObjCPtr<AGXG17FamilySampler>>>>::destroy(*(char **)(a1 + 7544));
  std::__tree<std::__value_type<AGX::DepthStencilStateDescriptorGen2,AGXG17FamilyDepthStencilState *>,std::__map_value_compare<AGX::DepthStencilStateDescriptorGen2,std::__value_type<AGX::DepthStencilStateDescriptorGen2,AGXG17FamilyDepthStencilState *>,std::less<AGX::DepthStencilStateDescriptorGen2>,true>,std::allocator<std::__value_type<AGX::DepthStencilStateDescriptorGen2,AGXG17FamilyDepthStencilState *>>>::destroy(*(char **)(a1 + 7512));
  uint64_t v172 = *(NSObject **)(a1 + 7272);
  v173 = (void **)&v208;
  uint64_t v208 = MEMORY[0x263EF8330];
  __p.__r_.__value_.__r.__words[0] = 3221225472;
  __p.__r_.__value_.__l.__size_ = (std::string::size_type)___ZN3AGX14FenceGroupPoolD2Ev_block_invoke;
  __p.__r_.__value_.__r.__words[2] = (std::string::size_type)&__block_descriptor_40_e5_v8__0l;
  uint64_t v210 = a1 + 7256;
  dispatch_sync(v172, &v208);
  dispatch_release(*(dispatch_object_t *)(a1 + 7272));
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 7180));
  uint64_t v174 = *(unsigned int *)(a1 + 7176);
  if (v174)
  {
    if (v174 <= 7) {
      size_t v175 = 64 - 8 * v174;
    }
    else {
      size_t v175 = 0;
    }
    bzero(&v208 + v174, v175);
    memcpy(&v208, (const void *)(a1 + 7184), 8 * v174);
    *(_DWORD *)(a1 + 7176) = 0;
    os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 7180));
    do
    {
      uint64_t v176 = *v173++;
      free(v176);
      --v174;
    }
    while (v174);
  }
  else
  {
    *(_DWORD *)(a1 + 7176) = 0;
    os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 7180));
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 7100));
  uint64_t v177 = *(unsigned int *)(a1 + 7096);
  if (v177)
  {
    if (v177 <= 7) {
      size_t v178 = 64 - 8 * v177;
    }
    else {
      size_t v178 = 0;
    }
    v179 = (void **)&v208;
    bzero(&v208 + v177, v178);
    memcpy(&v208, (const void *)(a1 + 7104), 8 * v177);
    *(_DWORD *)(a1 + 7096) = 0;
    os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 7100));
    do
    {
      v180 = *v179++;
      free(v180);
      --v177;
    }
    while (v177);
  }
  else
  {
    *(_DWORD *)(a1 + 7096) = 0;
    os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 7100));
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 7020));
  uint64_t v181 = *(unsigned int *)(a1 + 7016);
  if (v181)
  {
    if (v181 <= 7) {
      size_t v182 = 64 - 8 * v181;
    }
    else {
      size_t v182 = 0;
    }
    v183 = (void **)&v208;
    bzero(&v208 + v181, v182);
    memcpy(&v208, (const void *)(a1 + 7024), 8 * v181);
    *(_DWORD *)(a1 + 7016) = 0;
    os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 7020));
    do
    {
      char v184 = *v183++;
      free(v184);
      --v181;
    }
    while (v181);
  }
  else
  {
    *(_DWORD *)(a1 + 7016) = 0;
    os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 7020));
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 6940));
  uint64_t v185 = *(unsigned int *)(a1 + 6936);
  if (v185)
  {
    if (v185 <= 7) {
      size_t v186 = 64 - 8 * v185;
    }
    else {
      size_t v186 = 0;
    }
    v187 = (void **)&v208;
    bzero(&v208 + v185, v186);
    memcpy(&v208, (const void *)(a1 + 6944), 8 * v185);
    *(_DWORD *)(a1 + 6936) = 0;
    os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 6940));
    do
    {
      char v188 = *v187++;
      free(v188);
      --v185;
    }
    while (v185);
  }
  else
  {
    *(_DWORD *)(a1 + 6936) = 0;
    os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 6940));
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 6796));
  uint64_t v189 = *(unsigned int *)(a1 + 6792);
  if (v189)
  {
    if (v189 <= 0xF) {
      size_t v190 = 128 - 8 * v189;
    }
    else {
      size_t v190 = 0;
    }
    v191 = (void **)&v208;
    bzero(&v208 + v189, v190);
    memcpy(&v208, (const void *)(a1 + 6800), 8 * v189);
    *(_DWORD *)(a1 + 6792) = 0;
    os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 6796));
    do
    {
      v192 = *v191++;
      free(v192);
      --v189;
    }
    while (v189);
  }
  else
  {
    *(_DWORD *)(a1 + 6792) = 0;
    os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 6796));
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 6716));
  uint64_t v193 = *(unsigned int *)(a1 + 6712);
  if (v193)
  {
    if (v193 <= 7) {
      size_t v194 = 64 - 8 * v193;
    }
    else {
      size_t v194 = 0;
    }
    long long v195 = (void **)&v208;
    bzero(&v208 + v193, v194);
    memcpy(&v208, (const void *)(a1 + 6720), 8 * v193);
    *(_DWORD *)(a1 + 6712) = 0;
    os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 6716));
    do
    {
      v196 = *v195++;
      free(v196);
      --v193;
    }
    while (v193);
  }
  else
  {
    *(_DWORD *)(a1 + 6712) = 0;
    os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 6716));
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 6636));
  uint64_t v197 = *(unsigned int *)(a1 + 6632);
  if (v197)
  {
    if (v197 <= 7) {
      size_t v198 = 64 - 8 * v197;
    }
    else {
      size_t v198 = 0;
    }
    v199 = (void **)&v208;
    bzero(&v208 + v197, v198);
    memcpy(&v208, (const void *)(a1 + 6640), 8 * v197);
    *(_DWORD *)(a1 + 6632) = 0;
    os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 6636));
    do
    {
      v200 = *v199++;
      free(v200);
      --v197;
    }
    while (v197);
    v201 = *(void **)(a1 + 6600);
    if (!v201) {
      goto LABEL_334;
    }
    goto LABEL_333;
  }
  *(_DWORD *)(a1 + 6632) = 0;
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 6636));
  v201 = *(void **)(a1 + 6600);
  if (v201)
  {
LABEL_333:
    *(void *)(a1 + 6608) = v201;
    operator delete(v201);
  }
LABEL_334:

  uint64_t v202 = *(void *)(a1 + 6000);
  if (v202) {
    MEMORY[0x24566ED90](v202, 0x1020C40E08AD718);
  }
  v203 = *(NSObject **)(a1 + 5704);
  uint64_t v208 = MEMORY[0x263EF8330];
  __p.__r_.__value_.__r.__words[0] = 3221225472;
  __p.__r_.__value_.__l.__size_ = (std::string::size_type)___ZN3AGX4HeapILb1EED2Ev_block_invoke;
  __p.__r_.__value_.__r.__words[2] = (std::string::size_type)&__block_descriptor_40_e5_v8__0l;
  uint64_t v210 = a1 + 5688;
  dispatch_sync(v203, &v208);
  dispatch_release(*(dispatch_object_t *)(a1 + 5704));
  char v204 = *(NSObject **)(a1 + 5536);
  uint64_t v208 = MEMORY[0x263EF8330];
  __p.__r_.__value_.__r.__words[0] = 3221225472;
  __p.__r_.__value_.__l.__size_ = (std::string::size_type)___ZN3AGX4HeapILb1EED2Ev_block_invoke;
  __p.__r_.__value_.__r.__words[2] = (std::string::size_type)&__block_descriptor_40_e5_v8__0l;
  uint64_t v210 = a1 + 5520;
  dispatch_sync(v204, &v208);
  dispatch_release(*(dispatch_object_t *)(a1 + 5536));
  v205 = *(NSObject **)(a1 + 5368);
  uint64_t v208 = MEMORY[0x263EF8330];
  __p.__r_.__value_.__r.__words[0] = 3221225472;
  __p.__r_.__value_.__l.__size_ = (std::string::size_type)___ZN3AGX4HeapILb1EED2Ev_block_invoke;
  __p.__r_.__value_.__r.__words[2] = (std::string::size_type)&__block_descriptor_40_e5_v8__0l;
  uint64_t v210 = a1 + 5352;
  dispatch_sync(v205, &v208);
  dispatch_release(*(dispatch_object_t *)(a1 + 5368));
  char v206 = *(NSObject **)(a1 + 5200);
  uint64_t v208 = MEMORY[0x263EF8330];
  __p.__r_.__value_.__r.__words[0] = 3221225472;
  __p.__r_.__value_.__l.__size_ = (std::string::size_type)___ZN3AGX4HeapILb1EED2Ev_block_invoke;
  __p.__r_.__value_.__r.__words[2] = (std::string::size_type)&__block_descriptor_40_e5_v8__0l;
  uint64_t v210 = a1 + 5184;
  dispatch_sync(v206, &v208);
  dispatch_release(*(dispatch_object_t *)(a1 + 5200));
  return a1;
}

void sub_242A0261C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  std::unordered_map<unsigned long long,std::pair<unsigned long long,unsigned long long>>::~unordered_map[abi:nn180100](v15 + 7960);
  std::__tree<std::__value_type<AGX::scissorMapInfo<AGX::HAL200::Encoders>,unsigned int>,std::__map_value_compare<AGX::scissorMapInfo<AGX::HAL200::Encoders>,std::__value_type<AGX::scissorMapInfo<AGX::HAL200::Encoders>,unsigned int>,std::less<AGX::scissorMapInfo<AGX::HAL200::Encoders>>,true>,std::allocator<std::__value_type<AGX::scissorMapInfo<AGX::HAL200::Encoders>,unsigned int>>>::destroy(*(void **)(v15 + 7672));
  std::__tree<std::__value_type<AGX::scissorMapInfo<AGX::HAL200::Encoders>,unsigned int>,std::__map_value_compare<AGX::scissorMapInfo<AGX::HAL200::Encoders>,std::__value_type<AGX::scissorMapInfo<AGX::HAL200::Encoders>,unsigned int>,std::less<AGX::scissorMapInfo<AGX::HAL200::Encoders>>,true>,std::allocator<std::__value_type<AGX::scissorMapInfo<AGX::HAL200::Encoders>,unsigned int>>>::destroy(*(void **)(v15 + 7632));
  std::__tree<std::__value_type<AGX::SamplerDescriptor,std::weak_ptr<AGX::HAL200::Sampler>>,std::__map_value_compare<AGX::SamplerDescriptor,std::__value_type<AGX::SamplerDescriptor,std::weak_ptr<AGX::HAL200::Sampler>>,std::less<AGX::SamplerDescriptor>,true>,std::allocator<std::__value_type<AGX::SamplerDescriptor,std::weak_ptr<AGX::HAL200::Sampler>>>>::destroy(*(char **)(v15 + 7600));
  uint64_t v17 = *(void **)(v15 + 7560);
  if (v17)
  {
    *(void *)(v15 + 7568) = v17;
    operator delete(v17);
  }
  std::__tree<std::__value_type<AGX::SamplerDescriptor,AGX::WeakObjCPtr<AGXG17FamilySampler>>,std::__map_value_compare<AGX::SamplerDescriptor,std::__value_type<AGX::SamplerDescriptor,AGX::WeakObjCPtr<AGXG17FamilySampler>>,std::less<AGX::SamplerDescriptor>,true>,std::allocator<std::__value_type<AGX::SamplerDescriptor,AGX::WeakObjCPtr<AGXG17FamilySampler>>>>::destroy(*(char **)(v15 + 7544));
  std::__tree<std::__value_type<AGX::DepthStencilStateDescriptorGen2,AGXG17FamilyDepthStencilState *>,std::__map_value_compare<AGX::DepthStencilStateDescriptorGen2,std::__value_type<AGX::DepthStencilStateDescriptorGen2,AGXG17FamilyDepthStencilState *>,std::less<AGX::DepthStencilStateDescriptorGen2>,true>,std::allocator<std::__value_type<AGX::DepthStencilStateDescriptorGen2,AGXG17FamilyDepthStencilState *>>>::destroy(*(char **)(v15 + 7512));
  AGX::FenceGroupPool::~FenceGroupPool((AGX::FenceGroupPool *)(v15 + 7256));
  AGX::PooledAllocator<8u>::~PooledAllocator((os_unfair_lock_s *)(v15 + 7168));
  AGX::PooledAllocator<8u>::~PooledAllocator((os_unfair_lock_s *)(v15 + 7088));
  AGX::PooledAllocator<8u>::~PooledAllocator((os_unfair_lock_s *)(v15 + 7008));
  AGX::PooledAllocator<8u>::~PooledAllocator((os_unfair_lock_s *)(v15 + 6928));
  AGX::PooledAllocator<16u>::~PooledAllocator((os_unfair_lock_s *)(v15 + 6784));
  AGX::PooledAllocator<8u>::~PooledAllocator((os_unfair_lock_s *)(v15 + 6704));
  AGX::PooledAllocator<8u>::~PooledAllocator((os_unfair_lock_s *)(v15 + 6624));
  uint64_t v18 = *(void **)(v15 + 6600);
  if (v18)
  {
    *(void *)(v15 + 6608) = v18;
    operator delete(v18);
  }

  AGX::Mempool<16u,0u,true,AGX::HAL200::TextureHeapElem,AGX::HAL200::TextureHeapElem,unsigned int>::~Mempool((id *)(v15 + 6072));
  uint64_t v19 = *(void *)(v15 + 6000);
  if (v19) {
    MEMORY[0x24566ED90](v19, 0x1020C40E08AD718);
  }
  AGX::HAL200::HeapSet::~HeapSet((AGX::HAL200::HeapSet *)(v15 + 5184));
  _Unwind_Resume(a1);
}

uint64_t ProgramVaryingTable<AGX::HAL200::Encoders,AGX::HAL200::Classes>::~ProgramVaryingTable(uint64_t a1)
{
  if (*(void *)(a1 + 16) + *(void *)(a1 + 8) && *(void *)(a1 + 3240))
  {
    uint64_t v2 = *(void *)(a1 + 3248);
    uint64_t v3 = *(NSObject **)(v2 + 16);
    v11[0] = MEMORY[0x263EF8330];
    v11[1] = 3221225472;
    v11[2] = ___ZN3AGX4HeapILb1EE14deallocateImplERKNS1_10AllocationE_block_invoke;
    v11[3] = &__block_descriptor_48_e5_v8__0l;
    v11[4] = v2;
    v11[5] = a1 + 3216;
    dispatch_sync(v3, v11);
    *(_OWORD *)(a1 + 3241) = 0u;
    *(_OWORD *)(a1 + 3232) = 0u;
    *(_OWORD *)(a1 + 3216) = 0u;
  }
  uint64_t v4 = *(void *)(a1 + 3176);
  if (v4)
  {
    uint64_t v5 = *(void *)(a1 + 3184);
    uint64_t v6 = *(void **)(a1 + 3176);
    if (v5 != v4)
    {
      do
      {
        if (*(char *)(v5 - 1) < 0) {
          operator delete(*(void **)(v5 - 24));
        }
        v5 -= 32;
      }
      while (v5 != v4);
      uint64_t v6 = *(void **)(a1 + 3176);
    }
    *(void *)(a1 + 3184) = v4;
    operator delete(v6);
  }
  uint64_t v7 = *(void *)(a1 + 3152);
  if (v7)
  {
    uint64_t v8 = *(void *)(a1 + 3160);
    uint64_t v9 = *(void **)(a1 + 3152);
    if (v8 != v7)
    {
      do
      {
        if (*(char *)(v8 - 1) < 0) {
          operator delete(*(void **)(v8 - 24));
        }
        v8 -= 32;
      }
      while (v8 != v7);
      uint64_t v9 = *(void **)(a1 + 3152);
    }
    *(void *)(a1 + 3160) = v7;
    operator delete(v9);
  }
  return a1;
}

void std::__tree<std::__value_type<AGX::scissorMapInfo<AGX::HAL200::Encoders>,unsigned int>,std::__map_value_compare<AGX::scissorMapInfo<AGX::HAL200::Encoders>,std::__value_type<AGX::scissorMapInfo<AGX::HAL200::Encoders>,unsigned int>,std::less<AGX::scissorMapInfo<AGX::HAL200::Encoders>>,true>,std::allocator<std::__value_type<AGX::scissorMapInfo<AGX::HAL200::Encoders>,unsigned int>>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<AGX::scissorMapInfo<AGX::HAL200::Encoders>,unsigned int>,std::__map_value_compare<AGX::scissorMapInfo<AGX::HAL200::Encoders>,std::__value_type<AGX::scissorMapInfo<AGX::HAL200::Encoders>,unsigned int>,std::less<AGX::scissorMapInfo<AGX::HAL200::Encoders>>,true>,std::allocator<std::__value_type<AGX::scissorMapInfo<AGX::HAL200::Encoders>,unsigned int>>>::destroy(*a1);
    std::__tree<std::__value_type<AGX::scissorMapInfo<AGX::HAL200::Encoders>,unsigned int>,std::__map_value_compare<AGX::scissorMapInfo<AGX::HAL200::Encoders>,std::__value_type<AGX::scissorMapInfo<AGX::HAL200::Encoders>,unsigned int>,std::less<AGX::scissorMapInfo<AGX::HAL200::Encoders>>,true>,std::allocator<std::__value_type<AGX::scissorMapInfo<AGX::HAL200::Encoders>,unsigned int>>>::destroy(a1[1]);
    operator delete(a1);
  }
}

void std::__tree<std::__value_type<AGX::SamplerDescriptor,std::weak_ptr<AGX::HAL200::Sampler>>,std::__map_value_compare<AGX::SamplerDescriptor,std::__value_type<AGX::SamplerDescriptor,std::weak_ptr<AGX::HAL200::Sampler>>,std::less<AGX::SamplerDescriptor>,true>,std::allocator<std::__value_type<AGX::SamplerDescriptor,std::weak_ptr<AGX::HAL200::Sampler>>>>::destroy(char *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<AGX::SamplerDescriptor,std::weak_ptr<AGX::HAL200::Sampler>>,std::__map_value_compare<AGX::SamplerDescriptor,std::__value_type<AGX::SamplerDescriptor,std::weak_ptr<AGX::HAL200::Sampler>>,std::less<AGX::SamplerDescriptor>,true>,std::allocator<std::__value_type<AGX::SamplerDescriptor,std::weak_ptr<AGX::HAL200::Sampler>>>>::destroy(*(void *)a1);
    std::__tree<std::__value_type<AGX::SamplerDescriptor,std::weak_ptr<AGX::HAL200::Sampler>>,std::__map_value_compare<AGX::SamplerDescriptor,std::__value_type<AGX::SamplerDescriptor,std::weak_ptr<AGX::HAL200::Sampler>>,std::less<AGX::SamplerDescriptor>,true>,std::allocator<std::__value_type<AGX::SamplerDescriptor,std::weak_ptr<AGX::HAL200::Sampler>>>>::destroy(*((void *)a1 + 1));
    uint64_t v2 = (std::__shared_weak_count *)*((void *)a1 + 14);
    if (v2) {
      std::__shared_weak_count::__release_weak(v2);
    }
    if (a1[103] < 0) {
      operator delete(*((void **)a1 + 10));
    }
    operator delete(a1);
  }
}

void std::__tree<std::__value_type<AGX::SamplerDescriptor,AGX::WeakObjCPtr<AGXG17FamilySampler>>,std::__map_value_compare<AGX::SamplerDescriptor,std::__value_type<AGX::SamplerDescriptor,AGX::WeakObjCPtr<AGXG17FamilySampler>>,std::less<AGX::SamplerDescriptor>,true>,std::allocator<std::__value_type<AGX::SamplerDescriptor,AGX::WeakObjCPtr<AGXG17FamilySampler>>>>::destroy(char *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<AGX::SamplerDescriptor,AGX::WeakObjCPtr<AGXG17FamilySampler>>,std::__map_value_compare<AGX::SamplerDescriptor,std::__value_type<AGX::SamplerDescriptor,AGX::WeakObjCPtr<AGXG17FamilySampler>>,std::less<AGX::SamplerDescriptor>,true>,std::allocator<std::__value_type<AGX::SamplerDescriptor,AGX::WeakObjCPtr<AGXG17FamilySampler>>>>::destroy(*(void *)a1);
    std::__tree<std::__value_type<AGX::SamplerDescriptor,AGX::WeakObjCPtr<AGXG17FamilySampler>>,std::__map_value_compare<AGX::SamplerDescriptor,std::__value_type<AGX::SamplerDescriptor,AGX::WeakObjCPtr<AGXG17FamilySampler>>,std::less<AGX::SamplerDescriptor>,true>,std::allocator<std::__value_type<AGX::SamplerDescriptor,AGX::WeakObjCPtr<AGXG17FamilySampler>>>>::destroy(*((void *)a1 + 1));
    objc_destroyWeak((id *)a1 + 13);
    if (a1[103] < 0) {
      operator delete(*((void **)a1 + 10));
    }
    operator delete(a1);
  }
}

void std::__tree<std::__value_type<AGX::DepthStencilStateDescriptorGen2,AGXG17FamilyDepthStencilState *>,std::__map_value_compare<AGX::DepthStencilStateDescriptorGen2,std::__value_type<AGX::DepthStencilStateDescriptorGen2,AGXG17FamilyDepthStencilState *>,std::less<AGX::DepthStencilStateDescriptorGen2>,true>,std::allocator<std::__value_type<AGX::DepthStencilStateDescriptorGen2,AGXG17FamilyDepthStencilState *>>>::destroy(char *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<AGX::DepthStencilStateDescriptorGen2,AGXG17FamilyDepthStencilState *>,std::__map_value_compare<AGX::DepthStencilStateDescriptorGen2,std::__value_type<AGX::DepthStencilStateDescriptorGen2,AGXG17FamilyDepthStencilState *>,std::less<AGX::DepthStencilStateDescriptorGen2>,true>,std::allocator<std::__value_type<AGX::DepthStencilStateDescriptorGen2,AGXG17FamilyDepthStencilState *>>>::destroy(*(void *)a1);
    std::__tree<std::__value_type<AGX::DepthStencilStateDescriptorGen2,AGXG17FamilyDepthStencilState *>,std::__map_value_compare<AGX::DepthStencilStateDescriptorGen2,std::__value_type<AGX::DepthStencilStateDescriptorGen2,AGXG17FamilyDepthStencilState *>,std::less<AGX::DepthStencilStateDescriptorGen2>,true>,std::allocator<std::__value_type<AGX::DepthStencilStateDescriptorGen2,AGXG17FamilyDepthStencilState *>>>::destroy(*((void *)a1 + 1));
    if (a1[63] < 0) {
      operator delete(*((void **)a1 + 5));
    }
    operator delete(a1);
  }
}

void AGX::HAL200::HeapSet::~HeapSet(AGX::HAL200::HeapSet *this)
{
  uint64_t v2 = (AGX::HAL200::HeapSet *)((char *)this + 504);
  uint64_t v3 = *((void *)this + 65);
  uint64_t block = MEMORY[0x263EF8330];
  uint64_t v8 = 3221225472;
  uint64_t v9 = ___ZN3AGX4HeapILb1EED2Ev_block_invoke;
  uint64_t v10 = &__block_descriptor_40_e5_v8__0l;
  uint64_t v11 = v2;
  dispatch_sync(v3, &block);
  dispatch_release(*((dispatch_object_t *)this + 65));
  uint64_t v4 = *((void *)this + 44);
  uint64_t block = MEMORY[0x263EF8330];
  uint64_t v8 = 3221225472;
  uint64_t v9 = ___ZN3AGX4HeapILb1EED2Ev_block_invoke;
  uint64_t v10 = &__block_descriptor_40_e5_v8__0l;
  uint64_t v11 = (AGX::HAL200::HeapSet *)((char *)this + 336);
  dispatch_sync(v4, &block);
  dispatch_release(*((dispatch_object_t *)this + 44));
  uint64_t v5 = *((void *)this + 23);
  uint64_t block = MEMORY[0x263EF8330];
  uint64_t v8 = 3221225472;
  uint64_t v9 = ___ZN3AGX4HeapILb1EED2Ev_block_invoke;
  uint64_t v10 = &__block_descriptor_40_e5_v8__0l;
  uint64_t v11 = (AGX::HAL200::HeapSet *)((char *)this + 168);
  dispatch_sync(v5, &block);
  dispatch_release(*((dispatch_object_t *)this + 23));
  uint64_t v6 = *((void *)this + 2);
  uint64_t block = MEMORY[0x263EF8330];
  uint64_t v8 = 3221225472;
  uint64_t v9 = ___ZN3AGX4HeapILb1EED2Ev_block_invoke;
  uint64_t v10 = &__block_descriptor_40_e5_v8__0l;
  uint64_t v11 = this;
  dispatch_sync(v6, &block);
  dispatch_release(*((dispatch_object_t *)this + 2));
}

void **std::vector<ProgramVaryingTable<AGX::HAL200::Encoders,AGX::HAL200::Classes>::VITFragmentInfo,std::allocator<ProgramVaryingTable<AGX::HAL200::Encoders,AGX::HAL200::Classes>::VITFragmentInfo>>::~vector[abi:nn180100](void **a1)
{
  uint64_t v2 = (void **)*a1;
  if (*a1)
  {
    uint64_t v3 = (void **)a1[1];
    uint64_t v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        if (*((char *)v3 - 1) < 0) {
          operator delete(*(v3 - 3));
        }
        v3 -= 4;
      }
      while (v3 != v2);
      uint64_t v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t VectorMap<AGX::TileDispatchVertexProgramKey,AGX::ProgramVariantEntry<AGX::HAL200::TileDispatchVertexProgramVariant>,4u>::Chunk::~Chunk(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)(a1 + 336);
  if (v2) {
    dispatch_release(v2);
  }
  uint64_t v3 = *(void *)(a1 + 344);
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  uint64_t v4 = *(NSObject **)(a1 + 288);
  if (v4) {
    dispatch_release(v4);
  }
  uint64_t v5 = *(void *)(a1 + 296);
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }

  uint64_t v6 = *(NSObject **)(a1 + 240);
  if (v6) {
    dispatch_release(v6);
  }
  uint64_t v7 = *(void *)(a1 + 248);
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }

  uint64_t v8 = *(NSObject **)(a1 + 192);
  if (v8) {
    dispatch_release(v8);
  }
  uint64_t v9 = *(void *)(a1 + 200);
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }

  *(void *)(a1 + 144) = &unk_26F853BC8;
  uint64_t v10 = *(void **)(a1 + 160);
  if (v10)
  {
    *(void *)(a1 + 168) = v10;
    operator delete(v10);
  }
  *(void *)(a1 + 96) = &unk_26F853BC8;
  uint64_t v11 = *(void **)(a1 + 112);
  if (v11)
  {
    *(void *)(a1 + 120) = v11;
    operator delete(v11);
  }
  *(void *)(a1 + 48) = &unk_26F853BC8;
  uint64_t v12 = *(void **)(a1 + 64);
  if (v12)
  {
    *(void *)(a1 + 72) = v12;
    operator delete(v12);
  }
  *(void *)a1 = &unk_26F853BC8;
  uint64_t v13 = *(void **)(a1 + 16);
  if (v13)
  {
    *(void *)(a1 + 24) = v13;
    operator delete(v13);
  }
  return a1;
}

uint64_t ProgramKey<(_AGCStreamToken)25,(AGX::DriverShaderCompilationMode)1>::getSupportIndirectCommandBuffers()
{
  return 0;
}

uint64_t ProgramKey<(_AGCStreamToken)25,(AGX::DriverShaderCompilationMode)1>::isPrecompiledToBinaryArchive()
{
  return 0;
}

uint64_t ProgramKey<(_AGCStreamToken)25,(AGX::DriverShaderCompilationMode)1>::isPrecompiledToPipelineCache()
{
  return 1;
}

void ProgramKey<(_AGCStreamToken)25,(AGX::DriverShaderCompilationMode)1>::serialize(uint64_t a1, void *a2, void *a3)
{
  uint64_t v6 = *(int **)(a1 + 16);
  *(void *)(a1 + 24) = v6;
  int v7 = *(unsigned __int8 *)(a1 + 8) | 0x100;
  unint64_t v8 = *(void *)(a1 + 32);
  if ((unint64_t)v6 >= v8)
  {
    uint64_t v10 = v8 - (void)v6;
    uint64_t v11 = v10 >> 1;
    if ((unint64_t)(v10 >> 1) <= 1) {
      uint64_t v11 = 1;
    }
    BOOL v12 = (unint64_t)v10 >= 0x7FFFFFFFFFFFFFFCLL;
    unint64_t v13 = 0x3FFFFFFFFFFFFFFFLL;
    if (!v12) {
      unint64_t v13 = v11;
    }
    if (v13 >> 62) {
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
    uint64_t v14 = v13;
    uint64_t v15 = operator new(4 * v13);
    uint64_t v16 = &v15[v14];
    _DWORD *v15 = v7;
    uint64_t v9 = v15 + 1;
    *(void *)(a1 + 16) = v15;
    *(void *)(a1 + 24) = v15 + 1;
    *(void *)(a1 + 32) = v16;
    if (v6) {
      operator delete(v6);
    }
  }
  else
  {
    *uint64_t v6 = v7;
    uint64_t v9 = v6 + 1;
  }
  *(void *)(a1 + 24) = v9;
  ProgramKey<(_AGCStreamToken)8,(AGX::DriverShaderCompilationMode)0>::finalizeStream((void *)a1);
  *a2 = *(void *)(a1 + 16);
  *a3 = *(void *)(a1 + 24) - *(void *)(a1 + 16);
}

uint64_t ProgramKey<(_AGCStreamToken)25,(AGX::DriverShaderCompilationMode)1>::legalizeStateForTargetOS()
{
  return 1;
}

uint64_t VectorMap<AGX::ComputeControlFlowPredicateProgramKey,AGX::ProgramVariantEntry<AGX::HAL200::ComputeProgramVariant>,4u>::Chunk::~Chunk(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)(a1 + 336);
  if (v2) {
    dispatch_release(v2);
  }
  uint64_t v3 = *(void *)(a1 + 344);
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  uint64_t v4 = *(NSObject **)(a1 + 288);
  if (v4) {
    dispatch_release(v4);
  }
  uint64_t v5 = *(void *)(a1 + 296);
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }

  uint64_t v6 = *(NSObject **)(a1 + 240);
  if (v6) {
    dispatch_release(v6);
  }
  uint64_t v7 = *(void *)(a1 + 248);
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }

  unint64_t v8 = *(NSObject **)(a1 + 192);
  if (v8) {
    dispatch_release(v8);
  }
  uint64_t v9 = *(void *)(a1 + 200);
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }

  *(void *)(a1 + 144) = &unk_26F852368;
  uint64_t v10 = *(void **)(a1 + 160);
  if (v10)
  {
    *(void *)(a1 + 168) = v10;
    operator delete(v10);
  }
  *(void *)(a1 + 96) = &unk_26F852368;
  uint64_t v11 = *(void **)(a1 + 112);
  if (v11)
  {
    *(void *)(a1 + 120) = v11;
    operator delete(v11);
  }
  *(void *)(a1 + 48) = &unk_26F852368;
  BOOL v12 = *(void **)(a1 + 64);
  if (v12)
  {
    *(void *)(a1 + 72) = v12;
    operator delete(v12);
  }
  *(void *)a1 = &unk_26F852368;
  unint64_t v13 = *(void **)(a1 + 16);
  if (v13)
  {
    *(void *)(a1 + 24) = v13;
    operator delete(v13);
  }
  return a1;
}

uint64_t ProgramKey<(_AGCStreamToken)42,(AGX::DriverShaderCompilationMode)0>::getSupportIndirectCommandBuffers()
{
  return 0;
}

uint64_t ProgramKey<(_AGCStreamToken)42,(AGX::DriverShaderCompilationMode)0>::isPrecompiledToBinaryArchive()
{
  return 0;
}

uint64_t ProgramKey<(_AGCStreamToken)42,(AGX::DriverShaderCompilationMode)0>::isPrecompiledToPipelineCache()
{
  return 0;
}

void ProgramKey<(_AGCStreamToken)42,(AGX::DriverShaderCompilationMode)0>::serialize(uint64_t a1, void *a2, void *a3)
{
  uint64_t v6 = *(int **)(a1 + 16);
  *(void *)(a1 + 24) = v6;
  int v7 = *(unsigned __int8 *)(a1 + 8) | 0x100;
  unint64_t v8 = *(void *)(a1 + 32);
  if ((unint64_t)v6 >= v8)
  {
    uint64_t v10 = v8 - (void)v6;
    uint64_t v11 = v10 >> 1;
    if ((unint64_t)(v10 >> 1) <= 1) {
      uint64_t v11 = 1;
    }
    BOOL v12 = (unint64_t)v10 >= 0x7FFFFFFFFFFFFFFCLL;
    unint64_t v13 = 0x3FFFFFFFFFFFFFFFLL;
    if (!v12) {
      unint64_t v13 = v11;
    }
    if (v13 >> 62) {
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
    uint64_t v14 = v13;
    uint64_t v15 = operator new(4 * v13);
    uint64_t v16 = &v15[v14];
    _DWORD *v15 = v7;
    uint64_t v9 = v15 + 1;
    *(void *)(a1 + 16) = v15;
    *(void *)(a1 + 24) = v15 + 1;
    *(void *)(a1 + 32) = v16;
    if (v6) {
      operator delete(v6);
    }
  }
  else
  {
    *uint64_t v6 = v7;
    uint64_t v9 = v6 + 1;
  }
  *(void *)(a1 + 24) = v9;
  ProgramKey<(_AGCStreamToken)8,(AGX::DriverShaderCompilationMode)0>::finalizeStream((void *)a1);
  *a2 = *(void *)(a1 + 16);
  *a3 = *(void *)(a1 + 24) - *(void *)(a1 + 16);
}

uint64_t ProgramKey<(_AGCStreamToken)42,(AGX::DriverShaderCompilationMode)0>::legalizeStateForTargetOS()
{
  return 1;
}

uint64_t VectorMap<AGX::BlitComputeProgramKey,AGX::ProgramVariantEntry<AGX::HAL200::BlitComputeProgramVariant>,4u>::Chunk::~Chunk(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)(a1 + 496);
  if (v2) {
    dispatch_release(v2);
  }
  uint64_t v3 = *(void *)(a1 + 504);
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  uint64_t v4 = *(NSObject **)(a1 + 448);
  if (v4) {
    dispatch_release(v4);
  }
  uint64_t v5 = *(void *)(a1 + 456);
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }

  uint64_t v6 = *(NSObject **)(a1 + 400);
  if (v6) {
    dispatch_release(v6);
  }
  uint64_t v7 = *(void *)(a1 + 408);
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }

  unint64_t v8 = *(NSObject **)(a1 + 352);
  if (v8) {
    dispatch_release(v8);
  }
  uint64_t v9 = *(void *)(a1 + 360);
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }

  *(void *)(a1 + 264) = &unk_26F852148;
  uint64_t v10 = *(void **)(a1 + 280);
  if (v10)
  {
    *(void *)(a1 + 288) = v10;
    operator delete(v10);
  }
  *(void *)(a1 + 176) = &unk_26F852148;
  uint64_t v11 = *(void **)(a1 + 192);
  if (v11)
  {
    *(void *)(a1 + 200) = v11;
    operator delete(v11);
  }
  *(void *)(a1 + 88) = &unk_26F852148;
  BOOL v12 = *(void **)(a1 + 104);
  if (v12)
  {
    *(void *)(a1 + 112) = v12;
    operator delete(v12);
  }
  *(void *)a1 = &unk_26F852148;
  unint64_t v13 = *(void **)(a1 + 16);
  if (v13)
  {
    *(void *)(a1 + 24) = v13;
    operator delete(v13);
  }
  return a1;
}

uint64_t ProgramKey<(_AGCStreamToken)16,(AGX::DriverShaderCompilationMode)0>::getSupportIndirectCommandBuffers()
{
  return 0;
}

uint64_t ProgramKey<(_AGCStreamToken)16,(AGX::DriverShaderCompilationMode)0>::isPrecompiledToBinaryArchive()
{
  return 0;
}

uint64_t ProgramKey<(_AGCStreamToken)16,(AGX::DriverShaderCompilationMode)0>::isPrecompiledToPipelineCache()
{
  return 0;
}

void ProgramKey<(_AGCStreamToken)16,(AGX::DriverShaderCompilationMode)0>::serialize(uint64_t a1, void *a2, void *a3)
{
  uint64_t v6 = *(int **)(a1 + 16);
  *(void *)(a1 + 24) = v6;
  int v7 = *(unsigned __int8 *)(a1 + 8) | 0x100;
  unint64_t v8 = *(void *)(a1 + 32);
  if ((unint64_t)v6 >= v8)
  {
    uint64_t v10 = v8 - (void)v6;
    uint64_t v11 = v10 >> 1;
    if ((unint64_t)(v10 >> 1) <= 1) {
      uint64_t v11 = 1;
    }
    BOOL v12 = (unint64_t)v10 >= 0x7FFFFFFFFFFFFFFCLL;
    unint64_t v13 = 0x3FFFFFFFFFFFFFFFLL;
    if (!v12) {
      unint64_t v13 = v11;
    }
    if (v13 >> 62) {
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
    uint64_t v14 = v13;
    uint64_t v15 = operator new(4 * v13);
    uint64_t v16 = &v15[v14];
    _DWORD *v15 = v7;
    uint64_t v9 = v15 + 1;
    *(void *)(a1 + 16) = v15;
    *(void *)(a1 + 24) = v15 + 1;
    *(void *)(a1 + 32) = v16;
    if (v6) {
      operator delete(v6);
    }
  }
  else
  {
    *uint64_t v6 = v7;
    uint64_t v9 = v6 + 1;
  }
  *(void *)(a1 + 24) = v9;
  ProgramKey<(_AGCStreamToken)8,(AGX::DriverShaderCompilationMode)0>::finalizeStream((void *)a1);
  *a2 = *(void *)(a1 + 16);
  *a3 = *(void *)(a1 + 24) - *(void *)(a1 + 16);
}

uint64_t ProgramKey<(_AGCStreamToken)16,(AGX::DriverShaderCompilationMode)0>::legalizeStateForTargetOS()
{
  return 1;
}

uint64_t VectorMap<AGX::BlitVertexProgramKey,AGX::ProgramVariantEntry<AGX::HAL200::BlitVertexProgramVariant>,4u>::Chunk::~Chunk(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)(a1 + 336);
  if (v2) {
    dispatch_release(v2);
  }
  uint64_t v3 = *(void *)(a1 + 344);
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  uint64_t v4 = *(NSObject **)(a1 + 288);
  if (v4) {
    dispatch_release(v4);
  }
  uint64_t v5 = *(void *)(a1 + 296);
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }

  uint64_t v6 = *(NSObject **)(a1 + 240);
  if (v6) {
    dispatch_release(v6);
  }
  uint64_t v7 = *(void *)(a1 + 248);
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }

  unint64_t v8 = *(NSObject **)(a1 + 192);
  if (v8) {
    dispatch_release(v8);
  }
  uint64_t v9 = *(void *)(a1 + 200);
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }

  *(void *)(a1 + 144) = &unk_26F8521C8;
  uint64_t v10 = *(void **)(a1 + 160);
  if (v10)
  {
    *(void *)(a1 + 168) = v10;
    operator delete(v10);
  }
  *(void *)(a1 + 96) = &unk_26F8521C8;
  uint64_t v11 = *(void **)(a1 + 112);
  if (v11)
  {
    *(void *)(a1 + 120) = v11;
    operator delete(v11);
  }
  *(void *)(a1 + 48) = &unk_26F8521C8;
  BOOL v12 = *(void **)(a1 + 64);
  if (v12)
  {
    *(void *)(a1 + 72) = v12;
    operator delete(v12);
  }
  *(void *)a1 = &unk_26F8521C8;
  unint64_t v13 = *(void **)(a1 + 16);
  if (v13)
  {
    *(void *)(a1 + 24) = v13;
    operator delete(v13);
  }
  return a1;
}

uint64_t ProgramKey<(_AGCStreamToken)15,(AGX::DriverShaderCompilationMode)0>::getSupportIndirectCommandBuffers()
{
  return 0;
}

uint64_t ProgramKey<(_AGCStreamToken)15,(AGX::DriverShaderCompilationMode)0>::isPrecompiledToBinaryArchive()
{
  return 0;
}

uint64_t ProgramKey<(_AGCStreamToken)15,(AGX::DriverShaderCompilationMode)0>::isPrecompiledToPipelineCache()
{
  return 0;
}

void ProgramKey<(_AGCStreamToken)15,(AGX::DriverShaderCompilationMode)0>::serialize(uint64_t a1, void *a2, void *a3)
{
  uint64_t v6 = *(int **)(a1 + 16);
  *(void *)(a1 + 24) = v6;
  int v7 = *(unsigned __int8 *)(a1 + 8) | 0x100;
  unint64_t v8 = *(void *)(a1 + 32);
  if ((unint64_t)v6 >= v8)
  {
    uint64_t v10 = v8 - (void)v6;
    uint64_t v11 = v10 >> 1;
    if ((unint64_t)(v10 >> 1) <= 1) {
      uint64_t v11 = 1;
    }
    BOOL v12 = (unint64_t)v10 >= 0x7FFFFFFFFFFFFFFCLL;
    unint64_t v13 = 0x3FFFFFFFFFFFFFFFLL;
    if (!v12) {
      unint64_t v13 = v11;
    }
    if (v13 >> 62) {
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
    uint64_t v14 = v13;
    uint64_t v15 = operator new(4 * v13);
    uint64_t v16 = &v15[v14];
    _DWORD *v15 = v7;
    uint64_t v9 = v15 + 1;
    *(void *)(a1 + 16) = v15;
    *(void *)(a1 + 24) = v15 + 1;
    *(void *)(a1 + 32) = v16;
    if (v6) {
      operator delete(v6);
    }
  }
  else
  {
    *uint64_t v6 = v7;
    uint64_t v9 = v6 + 1;
  }
  *(void *)(a1 + 24) = v9;
  ProgramKey<(_AGCStreamToken)8,(AGX::DriverShaderCompilationMode)0>::finalizeStream((void *)a1);
  *a2 = *(void *)(a1 + 16);
  *a3 = *(void *)(a1 + 24) - *(void *)(a1 + 16);
}

uint64_t ProgramKey<(_AGCStreamToken)15,(AGX::DriverShaderCompilationMode)0>::legalizeStateForTargetOS()
{
  return 1;
}

uint64_t VectorMap<AGX::BlitFragmentProgramKey,AGX::ProgramVariantEntry<AGX::HAL200::BlitFragmentProgramVariant>,4u>::Chunk::~Chunk(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)(a1 + 496);
  if (v2) {
    dispatch_release(v2);
  }
  uint64_t v3 = *(void *)(a1 + 504);
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  uint64_t v4 = *(NSObject **)(a1 + 448);
  if (v4) {
    dispatch_release(v4);
  }
  uint64_t v5 = *(void *)(a1 + 456);
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }

  uint64_t v6 = *(NSObject **)(a1 + 400);
  if (v6) {
    dispatch_release(v6);
  }
  uint64_t v7 = *(void *)(a1 + 408);
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }

  unint64_t v8 = *(NSObject **)(a1 + 352);
  if (v8) {
    dispatch_release(v8);
  }
  uint64_t v9 = *(void *)(a1 + 360);
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }

  *(void *)(a1 + 264) = &unk_26F8520C8;
  uint64_t v10 = *(void **)(a1 + 280);
  if (v10)
  {
    *(void *)(a1 + 288) = v10;
    operator delete(v10);
  }
  *(void *)(a1 + 176) = &unk_26F8520C8;
  uint64_t v11 = *(void **)(a1 + 192);
  if (v11)
  {
    *(void *)(a1 + 200) = v11;
    operator delete(v11);
  }
  *(void *)(a1 + 88) = &unk_26F8520C8;
  BOOL v12 = *(void **)(a1 + 104);
  if (v12)
  {
    *(void *)(a1 + 112) = v12;
    operator delete(v12);
  }
  *(void *)a1 = &unk_26F8520C8;
  unint64_t v13 = *(void **)(a1 + 16);
  if (v13)
  {
    *(void *)(a1 + 24) = v13;
    operator delete(v13);
  }
  return a1;
}

uint64_t ProgramKey<(_AGCStreamToken)14,(AGX::DriverShaderCompilationMode)0>::getSupportIndirectCommandBuffers()
{
  return 0;
}

uint64_t ProgramKey<(_AGCStreamToken)14,(AGX::DriverShaderCompilationMode)0>::isPrecompiledToBinaryArchive()
{
  return 0;
}

uint64_t ProgramKey<(_AGCStreamToken)14,(AGX::DriverShaderCompilationMode)0>::isPrecompiledToPipelineCache()
{
  return 0;
}

void ProgramKey<(_AGCStreamToken)14,(AGX::DriverShaderCompilationMode)0>::serialize(uint64_t a1, void *a2, void *a3)
{
  uint64_t v6 = *(int **)(a1 + 16);
  *(void *)(a1 + 24) = v6;
  int v7 = *(unsigned __int8 *)(a1 + 8) | 0x100;
  unint64_t v8 = *(void *)(a1 + 32);
  if ((unint64_t)v6 >= v8)
  {
    uint64_t v10 = v8 - (void)v6;
    uint64_t v11 = v10 >> 1;
    if ((unint64_t)(v10 >> 1) <= 1) {
      uint64_t v11 = 1;
    }
    BOOL v12 = (unint64_t)v10 >= 0x7FFFFFFFFFFFFFFCLL;
    unint64_t v13 = 0x3FFFFFFFFFFFFFFFLL;
    if (!v12) {
      unint64_t v13 = v11;
    }
    if (v13 >> 62) {
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
    uint64_t v14 = v13;
    uint64_t v15 = operator new(4 * v13);
    uint64_t v16 = &v15[v14];
    _DWORD *v15 = v7;
    uint64_t v9 = v15 + 1;
    *(void *)(a1 + 16) = v15;
    *(void *)(a1 + 24) = v15 + 1;
    *(void *)(a1 + 32) = v16;
    if (v6) {
      operator delete(v6);
    }
  }
  else
  {
    *uint64_t v6 = v7;
    uint64_t v9 = v6 + 1;
  }
  *(void *)(a1 + 24) = v9;
  ProgramKey<(_AGCStreamToken)8,(AGX::DriverShaderCompilationMode)0>::finalizeStream((void *)a1);
  *a2 = *(void *)(a1 + 16);
  *a3 = *(void *)(a1 + 24) - *(void *)(a1 + 16);
}

uint64_t ProgramKey<(_AGCStreamToken)14,(AGX::DriverShaderCompilationMode)0>::legalizeStateForTargetOS()
{
  return 1;
}

void *VectorMap<AGX::EndOfTileProgramKey,AGX::ProgramVariantEntry<AGX::HAL200::SWEndOfTileProgramVariant>,4u>::Chunk::~Chunk(void *a1)
{
  uint64_t v2 = (uint64_t)(a1 + 64);
  AGX::ProgramVariantEntry<AGX::HAL200::SWEndOfTileProgramVariant>::~ProgramVariantEntry((uint64_t)(a1 + 82));
  AGX::ProgramVariantEntry<AGX::HAL200::SWEndOfTileProgramVariant>::~ProgramVariantEntry((uint64_t)(a1 + 76));
  AGX::ProgramVariantEntry<AGX::HAL200::SWEndOfTileProgramVariant>::~ProgramVariantEntry((uint64_t)(a1 + 70));
  AGX::ProgramVariantEntry<AGX::HAL200::SWEndOfTileProgramVariant>::~ProgramVariantEntry(v2);
  a1[48] = &unk_26F853C48;
  uint64_t v3 = (void *)a1[50];
  if (v3)
  {
    a1[51] = v3;
    operator delete(v3);
  }
  a1[32] = &unk_26F853C48;
  uint64_t v4 = (void *)a1[34];
  if (v4)
  {
    a1[35] = v4;
    operator delete(v4);
  }
  a1[16] = &unk_26F853C48;
  uint64_t v5 = (void *)a1[18];
  if (v5)
  {
    a1[19] = v5;
    operator delete(v5);
  }
  *a1 = &unk_26F853C48;
  uint64_t v6 = (void *)a1[2];
  if (v6)
  {
    a1[3] = v6;
    operator delete(v6);
  }
  return a1;
}

uint64_t AGX::ProgramVariantEntry<AGX::HAL200::SWEndOfTileProgramVariant>::~ProgramVariantEntry(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)a1;
  if (v2) {
    dispatch_release(v2);
  }
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3)
  {
    uint64_t v4 = *(void *)(v3 + 1864);
    if (v4)
    {
      uint64_t v5 = ProgramVaryingTable<AGX::HAL200::Encoders,AGX::HAL200::Classes>::~ProgramVaryingTable(v4);
      MEMORY[0x24566ED90](v5, 0x10F0C4099BF1763);
    }
    AGX::ProgramVariantESLState<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ArgumentTable,true,8ul>::~ProgramVariantESLState((uint64_t *)(v3 + 512));
    unint64_t v6 = AGX::EndOfTileProgramVariantBase<AGX::HAL200::Encoders,AGX::HAL200::Classes>::~EndOfTileProgramVariantBase(v3);
    MEMORY[0x24566ED90](v6, 0x10F2C408468EFAFLL);
  }

  return a1;
}

uint64_t VectorMap<AGX::EndOfTileProgramKey,AGX::ProgramVariantEntry<AGX::HAL200::EndOfTileProgramVariant>,4u>::Chunk::~Chunk(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)(a1 + 656);
  if (v2) {
    dispatch_release(v2);
  }
  unint64_t v3 = *(void *)(a1 + 664);
  if (v3)
  {
    AGX::ProgramVariantESLState<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ArgumentTable,true,7ul>::~ProgramVariantESLState((uint64_t *)(v3 + 512));
    unint64_t v4 = AGX::EndOfTileProgramVariantBase<AGX::HAL200::Encoders,AGX::HAL200::Classes>::~EndOfTileProgramVariantBase(v3);
    MEMORY[0x24566ED90](v4, 0x10F2C407AEA2096);
  }

  uint64_t v5 = *(NSObject **)(a1 + 608);
  if (v5) {
    dispatch_release(v5);
  }
  unint64_t v6 = *(void *)(a1 + 616);
  if (v6)
  {
    AGX::ProgramVariantESLState<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ArgumentTable,true,7ul>::~ProgramVariantESLState((uint64_t *)(v6 + 512));
    unint64_t v7 = AGX::EndOfTileProgramVariantBase<AGX::HAL200::Encoders,AGX::HAL200::Classes>::~EndOfTileProgramVariantBase(v6);
    MEMORY[0x24566ED90](v7, 0x10F2C407AEA2096);
  }

  unint64_t v8 = *(NSObject **)(a1 + 560);
  if (v8) {
    dispatch_release(v8);
  }
  unint64_t v9 = *(void *)(a1 + 568);
  if (v9)
  {
    AGX::ProgramVariantESLState<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ArgumentTable,true,7ul>::~ProgramVariantESLState((uint64_t *)(v9 + 512));
    unint64_t v10 = AGX::EndOfTileProgramVariantBase<AGX::HAL200::Encoders,AGX::HAL200::Classes>::~EndOfTileProgramVariantBase(v9);
    MEMORY[0x24566ED90](v10, 0x10F2C407AEA2096);
  }

  uint64_t v11 = *(NSObject **)(a1 + 512);
  if (v11) {
    dispatch_release(v11);
  }
  unint64_t v12 = *(void *)(a1 + 520);
  if (v12)
  {
    AGX::ProgramVariantESLState<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ArgumentTable,true,7ul>::~ProgramVariantESLState((uint64_t *)(v12 + 512));
    unint64_t v13 = AGX::EndOfTileProgramVariantBase<AGX::HAL200::Encoders,AGX::HAL200::Classes>::~EndOfTileProgramVariantBase(v12);
    MEMORY[0x24566ED90](v13, 0x10F2C407AEA2096);
  }

  *(void *)(a1 + 384) = &unk_26F853C48;
  uint64_t v14 = *(void **)(a1 + 400);
  if (v14)
  {
    *(void *)(a1 + 408) = v14;
    operator delete(v14);
  }
  *(void *)(a1 + 256) = &unk_26F853C48;
  uint64_t v15 = *(void **)(a1 + 272);
  if (v15)
  {
    *(void *)(a1 + 280) = v15;
    operator delete(v15);
  }
  *(void *)(a1 + 128) = &unk_26F853C48;
  uint64_t v16 = *(void **)(a1 + 144);
  if (v16)
  {
    *(void *)(a1 + 152) = v16;
    operator delete(v16);
  }
  *(void *)a1 = &unk_26F853C48;
  uint64_t v17 = *(void **)(a1 + 16);
  if (v17)
  {
    *(void *)(a1 + 24) = v17;
    operator delete(v17);
  }
  return a1;
}

uint64_t VectorMap<AGX::BackgroundObjectProgramKey,AGX::ProgramVariantEntry<AGX::HAL200::BackgroundObjectProgramVariant>,4u>::Chunk::~Chunk(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)(a1 + 496);
  if (v2) {
    dispatch_release(v2);
  }
  uint64_t v3 = *(void *)(a1 + 504);
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  unint64_t v4 = *(NSObject **)(a1 + 448);
  if (v4) {
    dispatch_release(v4);
  }
  uint64_t v5 = *(void *)(a1 + 456);
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }

  unint64_t v6 = *(NSObject **)(a1 + 400);
  if (v6) {
    dispatch_release(v6);
  }
  uint64_t v7 = *(void *)(a1 + 408);
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }

  unint64_t v8 = *(NSObject **)(a1 + 352);
  if (v8) {
    dispatch_release(v8);
  }
  uint64_t v9 = *(void *)(a1 + 360);
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }

  *(void *)(a1 + 264) = &unk_26F852B38;
  unint64_t v10 = *(void **)(a1 + 280);
  if (v10)
  {
    *(void *)(a1 + 288) = v10;
    operator delete(v10);
  }
  *(void *)(a1 + 176) = &unk_26F852B38;
  uint64_t v11 = *(void **)(a1 + 192);
  if (v11)
  {
    *(void *)(a1 + 200) = v11;
    operator delete(v11);
  }
  *(void *)(a1 + 88) = &unk_26F852B38;
  unint64_t v12 = *(void **)(a1 + 104);
  if (v12)
  {
    *(void *)(a1 + 112) = v12;
    operator delete(v12);
  }
  *(void *)a1 = &unk_26F852B38;
  unint64_t v13 = *(void **)(a1 + 16);
  if (v13)
  {
    *(void *)(a1 + 24) = v13;
    operator delete(v13);
  }
  return a1;
}

void sub_242A07F88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,AGX::FenceGroupPool *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,AGX::HAL200::HeapSet *a39,uint64_t a40,uint64_t a41)
{
  MEMORY[0x24566ED90](v41, 0x10A1C4069087F1FLL);
  _Unwind_Resume(a1);
}

void AGX::HAL200::EncoderComputeServiceCDMSubstreamProcessor::~EncoderComputeServiceCDMSubstreamProcessor(AGX::HAL200::EncoderComputeServiceCDMSubstreamProcessor *this)
{
  *(void *)this = &unk_26F852308;
  unsigned int v2 = *((unsigned __int16 *)this + 12);
  uint64_t v3 = (char *)*((void *)this + 4);
  if (v2)
  {
    do
    {
      uint64_t v4 = 16 * v2;

      uint64_t v3 = (char *)*((void *)this + 4);
      unsigned int v2 = *(unsigned __int16 *)&v3[v4 + 8];
    }
    while (*(_WORD *)&v3[v4 + 8]);
  }
  free(v3);
  dispatch_release(*((dispatch_object_t *)this + 2));

  JUMPOUT(0x24566ED90);
}

{
  unsigned int v2;
  char *v3;
  uint64_t v4;

  *(void *)this = &unk_26F852308;
  unsigned int v2 = *((unsigned __int16 *)this + 12);
  uint64_t v3 = (char *)*((void *)this + 4);
  if (v2)
  {
    do
    {
      uint64_t v4 = 16 * v2;

      uint64_t v3 = (char *)*((void *)this + 4);
      unsigned int v2 = *(unsigned __int16 *)&v3[v4 + 8];
    }
    while (*(_WORD *)&v3[v4 + 8]);
  }
  free(v3);
  dispatch_release(*((dispatch_object_t *)this + 2));
}

void ___ZN3AGX6HAL2006Device21setupDataBufferParamsERK16AGXGPUCoreConfig_block_invoke(uint64_t a1)
{
  if (AGX::Device<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::setupDataBufferParams(AGXGPUCoreConfig const&)::databuffer_once != -1) {
    dispatch_once(&AGX::Device<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::setupDataBufferParams(AGXGPUCoreConfig const&)::databuffer_once, &__block_literal_global);
  }
  qword_268D58E48 += (1792 * *(_DWORD *)(*(void *)(a1 + 32) + 48) + 3456);
  dword_268D58E50 = 1;
}

void ___ZN3AGX6DeviceINS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE21setupDataBufferParamsERK16AGXGPUCoreConfig_block_invoke()
{
  qword_268D58DD8 = 0x8000;
  dword_268D58DE0 = 1;
  qword_268D58DE8 = 0x8000;
  dword_268D58DF0 = 1;
  AGX::Device<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::databuffer_params = 0x8000;
  dword_268D58DB0 = 1;
  qword_268D58DF8 = 0x8000;
  dword_268D58E00 = 1;
  qword_268D58E08 = 0x8000;
  dword_268D58E10 = 1;
  qword_268D58E18 = 786432;
  dword_268D58E20 = 1;
  qword_268D58E28 = 0x100000;
  dword_268D58E30 = 1;
  qword_268D58E38 = 0x8000;
  dword_268D58E40 = 1;
  qword_268D58E48 = 0x8000;
  dword_268D58E50 = 1;
  qword_268D58E58 = 0x8000;
  dword_268D58E60 = 1;
  qword_268D58E68 = 0x8000;
  dword_268D58E70 = 1;
  qword_268D58E78 = 0x8000;
  dword_268D58E80 = 1;
  qword_268D58E98 = 0x8000;
  dword_268D58EA0 = 1;
  qword_268D58EA8 = 0x8000;
  dword_268D58EB0 = 1;
  qword_268D58E88 = 0x8000;
  dword_268D58E90 = 1;
  qword_268D58DB8 = 0x8000;
  dword_268D58DC0 = 1;
  qword_268D58DC8 = 0x8000;
  dword_268D58DD0 = 1;
  qword_268D58EB8 = 0x8000;
  dword_268D58EC0 = 1;
  qword_268D58EC8 = 0x8000;
  dword_268D58ED0 = 1;
  qword_268D58ED8 = 1024;
  dword_268D58EE0 = 1;
  qword_268D58EE8 = 64;
  dword_268D58EF0 = 1;
  qword_268D58EF8 = 0x8000;
  dword_268D58F00 = 1;
  qword_268D58F08 = 0x8000;
  dword_268D58F10 = 1;
  qword_268D58F18 = 0x8000;
  dword_268D58F20 = 1;
  qword_268D58F28 = 0x8000;
  dword_268D58F30 = 1;
  qword_268D58F38 = 0x8000;
  dword_268D58F40 = 1;
  qword_268D58F48 = 0x8000;
  dword_268D58F50 = 1;
  qword_268D58F58 = 0x8000;
  dword_268D58F60 = 1;
  qword_268D58F68 = 0x8000;
  dword_268D58F70 = 1;
  qword_268D58F78 = 0x8000;
  dword_268D58F80 = 1;
  qword_268D58F88 = 0x8000;
  dword_268D58F90 = 1;
  qword_268D58F98 = 0x8000;
  dword_268D58FA0 = 1;
  qword_268D58FA8 = 15360;
  dword_268D58FB0 = 1;
  qword_268D58FB8 = 0x8000;
  dword_268D58FC0 = 1;
}

void AGX::Device<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::deviceNotificationCallback(uint64_t a1, int a2, int a3, int a4)
{
  uint64_t v36 = *MEMORY[0x263EF8340];
  if (a2) {
    return;
  }
  if (a3 == 1)
  {
    unint64_t v13 = (void *)AGX::USCProfileControlStateLoaderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes>::instance;
    AGX::USCProfileControlStateLoaderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes>::updateGlobalConfigurations(v13);
  }
  else if (a3)
  {
    fprintf((FILE *)*MEMORY[0x263EF8348], "AGX: %s:%d:%s: *** Invalid AGX device notification\n", "agxa_device_template.hpp", 3491, "deviceNotificationCallback");
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      uint64_t v31 = "agxa_device_template.hpp";
      __int16 v32 = 1024;
      int v33 = 3491;
      __int16 v34 = 2080;
      unint64_t v35 = "deviceNotificationCallback";
      _os_log_error_impl(&dword_2427AD000, &_os_log_internal, OS_LOG_TYPE_ERROR, "AGX: AGX: %s:%d:%s: *** Invalid AGX device notification\n", buf, 0x1Cu);
    }
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315650;
      uint64_t v31 = "agxa_device_template.hpp";
      __int16 v32 = 1024;
      int v33 = 3491;
      __int16 v34 = 2080;
      unint64_t v35 = "deviceNotificationCallback";
      _os_log_impl(&dword_2427AD000, &_os_log_internal, OS_LOG_TYPE_INFO, "AGX: AGX: %s:%d:%s: *** Invalid AGX device notification\n", buf, 0x1Cu);
    }
  }
  else
  {
    unint64_t v6 = (os_unfair_lock_s *)(a1 + 7528);
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 7528));
    *(_DWORD *)(a1 + 7584) = a4;
    uint64_t v7 = *(id **)(a1 + 7536);
    if (v7 != (id *)(a1 + 7544))
    {
      do
      {
        WeakRetained = objc_loadWeakRetained(v7 + 13);
        if (WeakRetained)
        {
          unint64_t v9 = WeakRetained[15] & 0xF03FFFFFFFFFFFFFLL;
          if (a4) {
            v9 |= 0xF80000000000000uLL;
          }
          WeakRetained[15] = v9;
        }

        unint64_t v10 = (id *)v7[1];
        if (v10)
        {
          do
          {
            uint64_t v11 = (id **)v10;
            unint64_t v10 = (id *)*v10;
          }
          while (v10);
        }
        else
        {
          do
          {
            uint64_t v11 = (id **)v7[2];
            BOOL v12 = *v11 == v7;
            uint64_t v7 = (id *)v11;
          }
          while (!v12);
        }
        uint64_t v7 = (id *)v11;
      }
      while (v11 != (id **)(a1 + 7544));
    }
    uint64_t v14 = *(unint64_t *****)(a1 + 7560);
    uint64_t v15 = *(unint64_t *****)(a1 + 7568);
    while (v14 != v15)
    {
      uint64_t v16 = **v14;
      for (i = (*v14)[1]; v16 != i; *uint64_t v18 = v20)
      {
        uint64_t v19 = *v16++;
        uint64_t v18 = v19;
        unint64_t v20 = *v19 & 0xF03FFFFFFFFFFFFFLL;
        if (a4) {
          v20 |= 0xF80000000000000uLL;
        }
      }
      ++v14;
    }
    uint64_t v21 = *(void **)(a1 + 7592);
    uint64_t v22 = (void *)(a1 + 7600);
    if (v21 != (void *)(a1 + 7600))
    {
      do
      {
        unint64_t v23 = (std::__shared_weak_count *)v21[14];
        if (!v23) {
          goto LABEL_43;
        }
        uint64_t v24 = std::__shared_weak_count::lock(v23);
        if (!v24) {
          goto LABEL_43;
        }
        uint64_t v25 = v24;
        uint64_t v26 = v21[13];
        if (v26)
        {
          unint64_t v27 = *(void *)(v26 + 72) & 0xF03FFFFFFFFFFFFFLL;
          if (a4) {
            v27 |= 0xF80000000000000uLL;
          }
          *(void *)(v26 + 72) = v27;
        }
        if (!atomic_fetch_add(&v24->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
          std::__shared_weak_count::__release_weak(v25);
          uint64_t v28 = (void *)v21[1];
          if (!v28)
          {
            do
            {
LABEL_47:
              uint64_t v29 = (void *)v21[2];
              BOOL v12 = *v29 == (void)v21;
              uint64_t v21 = v29;
            }
            while (!v12);
            goto LABEL_35;
          }
        }
        else
        {
LABEL_43:
          uint64_t v28 = (void *)v21[1];
          if (!v28) {
            goto LABEL_47;
          }
        }
        do
        {
          uint64_t v29 = v28;
          uint64_t v28 = (void *)*v28;
        }
        while (v28);
LABEL_35:
        uint64_t v21 = v29;
      }
      while (v29 != v22);
    }
    os_unfair_lock_unlock(v6);
  }
}

void sub_242A08820(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void ___ZN3AGX6DeviceINS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEEC2EPU23objcproto12MTLDeviceSPI16IOGPUMetalDevicePNS5_13DeviceOptionsE_block_invoke(uint64_t a1, int a2)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  if (a2)
  {
    uint64_t v2 = *(void *)(a1 + 32);
    os_unfair_lock_lock((os_unfair_lock_t)(v2 + 7952));
    uint64_t v3 = *(uint64_t **)(v2 + 7976);
    if (v3)
    {
      uint64_t v4 = MEMORY[0x263EF8440];
      while (*((unsigned char *)v3 + 72))
      {
          goto LABEL_12;
LABEL_4:
        uint64_t v3 = (uint64_t *)*v3;
        if (!v3) {
          goto LABEL_15;
        }
      }
      if (*(unsigned char *)(v2 + 7761)) {
      else
      }
        BOOL v5 = 1;
      if (v5) {
        goto LABEL_4;
      }
LABEL_12:
      {
        uint64_t v7 = v3[3];
        uint64_t v8 = v3[4];
        uint64_t v9 = v3[5];
        int v10 = *((_DWORD *)v3 + 12);
        uint64_t v11 = v3[7];
        uint64_t v12 = v3[8];
        *(_DWORD *)buf = 136447490;
        uint64_t v14 = v7;
        __int16 v15 = 2082;
        uint64_t v16 = v8;
        __int16 v17 = 2082;
        uint64_t v18 = v9;
        __int16 v19 = 1026;
        int v20 = v10;
        __int16 v21 = 2050;
        uint64_t v22 = v11;
        __int16 v23 = 2050;
        uint64_t v24 = v12;
        _os_signpost_emit_with_name_impl(&dword_2427AD000, v6, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "FunctionCompiled", "Name=%{public,signpost.description:attribute}s Label=%{public,signpost.description:attribute}s Type=%{public,signpost.description:attribute}s ID=%{public,signpost.description:attribute}u Addr=%{public,signpost.description:attribute}llu Size=%{public,signpost.description:attribute}llu", buf, 0x3Au);
      }
      goto LABEL_4;
    }
LABEL_15:
    os_unfair_lock_unlock((os_unfair_lock_t)(v2 + 7952));
  }
}

void AGX::TileDispatchVertexProgramKey::serialize(std::vector<unsigned int> *this, unsigned int **a2, unint64_t *a3)
{
  p_end_cap = (std::vector<unsigned int> *)&this->__end_cap_;
  value = this->__end_cap_.__value_;
  this[1].__begin_ = value;
  int v8 = LOBYTE(this->__end_) | 0x100;
  std::vector<unsigned int>::pointer end = this[1].__end_;
  if (value >= end)
  {
    uint64_t v11 = (char *)end - (char *)value;
    uint64_t v12 = v11 >> 1;
    if ((unint64_t)(v11 >> 1) <= 1) {
      uint64_t v12 = 1;
    }
    BOOL v13 = (unint64_t)v11 >= 0x7FFFFFFFFFFFFFFCLL;
    unint64_t v14 = 0x3FFFFFFFFFFFFFFFLL;
    if (!v13) {
      unint64_t v14 = v12;
    }
    if (v14 >> 62) {
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
    uint64_t v15 = v14;
    uint64_t v16 = (unsigned int *)operator new(4 * v14);
    *uint64_t v16 = v8;
    int v10 = v16 + 1;
    this->__end_cap_.__value_ = v16;
    this[1].__begin_ = v16 + 1;
    this[1].__end_ = &v16[v15];
    if (value)
    {
      operator delete(value);
      value = p_end_cap->__begin_;
    }
    else
    {
      value = v16;
    }
  }
  else
  {
    unsigned int *value = v8;
    int v10 = value + 1;
  }
  this[1].__begin_ = v10;
  uint64_t v17 = v10 - value;
  if ((unint64_t)((char *)v10 - (char *)value) > 0xFFFFFFFFFFFFFFF7)
  {
    begiuint64_t n = &value[v17 + 2];
    this[1].__begin_ = begin;
  }
  else
  {
    std::vector<unsigned int>::__append(p_end_cap, 2uLL);
    value = this->__end_cap_.__value_;
    begiuint64_t n = this[1].__begin_;
  }
  __int16 v19 = &value[v17];
  *__int16 v19 = ((begin - value) >> 2 << 8) | 0x57;
  v19[1] = this[1].__end_cap_.__value_;
  ProgramKey<(_AGCStreamToken)8,(AGX::DriverShaderCompilationMode)0>::finalizeStream(this);
  *a2 = this->__end_cap_.__value_;
  *a3 = (char *)this[1].__begin_ - (char *)this->__end_cap_.__value_;
}

void AGX::ComputeControlFlowPredicateProgramKey::serialize(std::vector<unsigned int> *this, unsigned int **a2, unint64_t *a3)
{
  p_end_cap = (std::vector<unsigned int> *)&this->__end_cap_;
  value = this->__end_cap_.__value_;
  this[1].__begin_ = value;
  int v8 = LOBYTE(this->__end_) | 0x100;
  std::vector<unsigned int>::pointer end = this[1].__end_;
  if (value >= end)
  {
    uint64_t v11 = (char *)end - (char *)value;
    uint64_t v12 = v11 >> 1;
    if ((unint64_t)(v11 >> 1) <= 1) {
      uint64_t v12 = 1;
    }
    BOOL v13 = (unint64_t)v11 >= 0x7FFFFFFFFFFFFFFCLL;
    unint64_t v14 = 0x3FFFFFFFFFFFFFFFLL;
    if (!v13) {
      unint64_t v14 = v12;
    }
    if (v14 >> 62) {
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
    uint64_t v15 = v14;
    uint64_t v16 = (unsigned int *)operator new(4 * v14);
    *uint64_t v16 = v8;
    int v10 = v16 + 1;
    this->__end_cap_.__value_ = v16;
    this[1].__begin_ = v16 + 1;
    this[1].__end_ = &v16[v15];
    if (value)
    {
      operator delete(value);
      value = p_end_cap->__begin_;
    }
    else
    {
      value = v16;
    }
  }
  else
  {
    unsigned int *value = v8;
    int v10 = value + 1;
  }
  this[1].__begin_ = v10;
  uint64_t v17 = v10 - value;
  if ((unint64_t)((char *)v10 - (char *)value) > 0xFFFFFFFFFFFFFFF7)
  {
    begiuint64_t n = &value[v17 + 2];
    this[1].__begin_ = begin;
  }
  else
  {
    std::vector<unsigned int>::__append(p_end_cap, 2uLL);
    value = this->__end_cap_.__value_;
    begiuint64_t n = this[1].__begin_;
  }
  __int16 v19 = &value[v17];
  *__int16 v19 = ((begin - value) >> 2 << 8) | 0x56;
  v19[1] = this[1].__end_cap_.__value_;
  ProgramKey<(_AGCStreamToken)8,(AGX::DriverShaderCompilationMode)0>::finalizeStream(this);
  *a2 = this->__end_cap_.__value_;
  *a3 = (char *)this[1].__begin_ - (char *)this->__end_cap_.__value_;
}

uint64_t ProgramKey<(_AGCStreamToken)95,(AGX::DriverShaderCompilationMode)1>::getSupportIndirectCommandBuffers()
{
  return 0;
}

uint64_t ProgramKey<(_AGCStreamToken)95,(AGX::DriverShaderCompilationMode)1>::isPrecompiledToBinaryArchive()
{
  return 0;
}

uint64_t ProgramKey<(_AGCStreamToken)95,(AGX::DriverShaderCompilationMode)1>::isPrecompiledToPipelineCache()
{
  return 1;
}

void AGX::BlitVertexFastClearProgramKey::serialize(std::vector<unsigned int> *this, unsigned int **a2, unint64_t *a3)
{
  p_end_cap = (std::vector<unsigned int> *)&this->__end_cap_;
  value = this->__end_cap_.__value_;
  this[1].__begin_ = value;
  int v8 = LOBYTE(this->__end_) | 0x100;
  std::vector<unsigned int>::pointer end = this[1].__end_;
  if (value >= end)
  {
    uint64_t v11 = (char *)end - (char *)value;
    uint64_t v12 = v11 >> 1;
    if ((unint64_t)(v11 >> 1) <= 1) {
      uint64_t v12 = 1;
    }
    BOOL v13 = (unint64_t)v11 >= 0x7FFFFFFFFFFFFFFCLL;
    unint64_t v14 = 0x3FFFFFFFFFFFFFFFLL;
    if (!v13) {
      unint64_t v14 = v12;
    }
    if (v14 >> 62) {
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
    uint64_t v15 = v14;
    uint64_t v16 = (unsigned int *)operator new(4 * v14);
    *uint64_t v16 = v8;
    int v10 = v16 + 1;
    this->__end_cap_.__value_ = v16;
    this[1].__begin_ = v16 + 1;
    this[1].__end_ = &v16[v15];
    if (value)
    {
      operator delete(value);
      value = p_end_cap->__begin_;
    }
    else
    {
      value = v16;
    }
  }
  else
  {
    unsigned int *value = v8;
    int v10 = value + 1;
  }
  this[1].__begin_ = v10;
  uint64_t v17 = v10 - value;
  if ((unint64_t)((char *)v10 - (char *)value) > 0xFFFFFFFFFFFFFFF7)
  {
    begiuint64_t n = &value[v17 + 2];
    this[1].__begin_ = begin;
  }
  else
  {
    std::vector<unsigned int>::__append(p_end_cap, 2uLL);
    value = this->__end_cap_.__value_;
    begiuint64_t n = this[1].__begin_;
  }
  __int16 v19 = &value[v17];
  *__int16 v19 = ((begin - value) >> 2 << 8) | 0x4A;
  v19[1] = this[1].__end_cap_.__value_;
  ProgramKey<(_AGCStreamToken)8,(AGX::DriverShaderCompilationMode)0>::finalizeStream(this);
  *a2 = this->__end_cap_.__value_;
  *a3 = (char *)this[1].__begin_ - (char *)this->__end_cap_.__value_;
}

uint64_t ProgramKey<(_AGCStreamToken)95,(AGX::DriverShaderCompilationMode)1>::legalizeStateForTargetOS()
{
  return 1;
}

uint64_t ProgramKey<(_AGCStreamToken)18,(AGX::DriverShaderCompilationMode)1>::getSupportIndirectCommandBuffers()
{
  return 0;
}

uint64_t ProgramKey<(_AGCStreamToken)18,(AGX::DriverShaderCompilationMode)1>::isPrecompiledToBinaryArchive()
{
  return 0;
}

uint64_t ProgramKey<(_AGCStreamToken)18,(AGX::DriverShaderCompilationMode)1>::isPrecompiledToPipelineCache()
{
  return 1;
}

void AGX::BlitFastClearProgramKey::serialize(std::vector<unsigned int> *this, unsigned int **a2, unint64_t *a3)
{
  p_end_cap = (std::vector<unsigned int> *)&this->__end_cap_;
  value = this->__end_cap_.__value_;
  this[1].__begin_ = value;
  int v8 = LOBYTE(this->__end_) | 0x100;
  std::vector<unsigned int>::pointer end = this[1].__end_;
  if (value >= end)
  {
    uint64_t v11 = (char *)end - (char *)value;
    uint64_t v12 = v11 >> 1;
    if ((unint64_t)(v11 >> 1) <= 1) {
      uint64_t v12 = 1;
    }
    BOOL v13 = (unint64_t)v11 >= 0x7FFFFFFFFFFFFFFCLL;
    unint64_t v14 = 0x3FFFFFFFFFFFFFFFLL;
    if (!v13) {
      unint64_t v14 = v12;
    }
    if (v14 >> 62) {
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
    uint64_t v15 = v14;
    uint64_t v16 = (unsigned int *)operator new(4 * v14);
    *uint64_t v16 = v8;
    int v10 = v16 + 1;
    this->__end_cap_.__value_ = v16;
    this[1].__begin_ = v16 + 1;
    this[1].__end_ = &v16[v15];
    if (value)
    {
      operator delete(value);
      value = p_end_cap->__begin_;
    }
    else
    {
      value = v16;
    }
  }
  else
  {
    unsigned int *value = v8;
    int v10 = value + 1;
  }
  this[1].__begin_ = v10;
  uint64_t v17 = v10 - value;
  if ((unint64_t)((char *)v10 - (char *)value) > 0xFFFFFFFFFFFFFFF7)
  {
    begiuint64_t n = &value[v17 + 2];
    this[1].__begin_ = begin;
  }
  else
  {
    std::vector<unsigned int>::__append(p_end_cap, 2uLL);
    value = this->__end_cap_.__value_;
    begiuint64_t n = this[1].__begin_;
  }
  __int16 v19 = &value[v17];
  *__int16 v19 = ((begin - value) >> 2 << 8) | 0x4A;
  v19[1] = this[1].__end_cap_.__value_;
  ProgramKey<(_AGCStreamToken)8,(AGX::DriverShaderCompilationMode)0>::finalizeStream(this);
  *a2 = this->__end_cap_.__value_;
  *a3 = (char *)this[1].__begin_ - (char *)this->__end_cap_.__value_;
}

uint64_t ProgramKey<(_AGCStreamToken)18,(AGX::DriverShaderCompilationMode)1>::legalizeStateForTargetOS()
{
  return 1;
}

uint64_t ProgramKey<(_AGCStreamToken)17,(AGX::DriverShaderCompilationMode)1>::getSupportIndirectCommandBuffers()
{
  return 0;
}

uint64_t ProgramKey<(_AGCStreamToken)17,(AGX::DriverShaderCompilationMode)1>::isPrecompiledToBinaryArchive()
{
  return 0;
}

uint64_t ProgramKey<(_AGCStreamToken)17,(AGX::DriverShaderCompilationMode)1>::isPrecompiledToPipelineCache()
{
  return 1;
}

void AGX::BlitSparseProgramKey::serialize(std::vector<unsigned int> *this, unsigned int **a2, unint64_t *a3)
{
  p_end_cap = (std::vector<unsigned int> *)&this->__end_cap_;
  value = this->__end_cap_.__value_;
  this[1].__begin_ = value;
  int v8 = LOBYTE(this->__end_) | 0x100;
  std::vector<unsigned int>::pointer end = this[1].__end_;
  if (value >= end)
  {
    uint64_t v11 = (char *)end - (char *)value;
    uint64_t v12 = v11 >> 1;
    if ((unint64_t)(v11 >> 1) <= 1) {
      uint64_t v12 = 1;
    }
    BOOL v13 = (unint64_t)v11 >= 0x7FFFFFFFFFFFFFFCLL;
    unint64_t v14 = 0x3FFFFFFFFFFFFFFFLL;
    if (!v13) {
      unint64_t v14 = v12;
    }
    if (v14 >> 62) {
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
    uint64_t v15 = v14;
    uint64_t v16 = (unsigned int *)operator new(4 * v14);
    *uint64_t v16 = v8;
    int v10 = v16 + 1;
    this->__end_cap_.__value_ = v16;
    this[1].__begin_ = v16 + 1;
    this[1].__end_ = &v16[v15];
    if (value)
    {
      operator delete(value);
      value = p_end_cap->__begin_;
    }
    else
    {
      value = v16;
    }
  }
  else
  {
    unsigned int *value = v8;
    int v10 = value + 1;
  }
  this[1].__begin_ = v10;
  uint64_t v17 = v10 - value;
  if ((unint64_t)((char *)v10 - (char *)value) > 0xFFFFFFFFFFFFFFF7)
  {
    begiuint64_t n = &value[v17 + 2];
    this[1].__begin_ = begin;
  }
  else
  {
    std::vector<unsigned int>::__append(p_end_cap, 2uLL);
    value = this->__end_cap_.__value_;
    begiuint64_t n = this[1].__begin_;
  }
  __int16 v19 = &value[v17];
  *__int16 v19 = ((begin - value) >> 2 << 8) | 0x49;
  v19[1] = this[1].__end_cap_.__value_;
  ProgramKey<(_AGCStreamToken)8,(AGX::DriverShaderCompilationMode)0>::finalizeStream(this);
  *a2 = this->__end_cap_.__value_;
  *a3 = (char *)this[1].__begin_ - (char *)this->__end_cap_.__value_;
}

uint64_t ProgramKey<(_AGCStreamToken)17,(AGX::DriverShaderCompilationMode)1>::legalizeStateForTargetOS()
{
  return 1;
}

void AGX::BlitComputeProgramKey::serialize(std::vector<unsigned int> *this, unsigned int **a2, unint64_t *a3)
{
  p_end_cap = (std::vector<unsigned int> *)&this->__end_cap_;
  value = this->__end_cap_.__value_;
  this[1].__begin_ = value;
  int v8 = LOBYTE(this->__end_) | 0x100;
  std::vector<unsigned int>::pointer end = this[1].__end_;
  if (value >= end)
  {
    uint64_t v11 = (char *)end - (char *)value;
    uint64_t v12 = v11 >> 1;
    if ((unint64_t)(v11 >> 1) <= 1) {
      uint64_t v12 = 1;
    }
    BOOL v13 = (unint64_t)v11 >= 0x7FFFFFFFFFFFFFFCLL;
    unint64_t v14 = 0x3FFFFFFFFFFFFFFFLL;
    if (!v13) {
      unint64_t v14 = v12;
    }
    if (v14 >> 62) {
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
    uint64_t v15 = v14;
    uint64_t v16 = (unsigned int *)operator new(4 * v14);
    *uint64_t v16 = v8;
    int v10 = v16 + 1;
    this->__end_cap_.__value_ = v16;
    this[1].__begin_ = v16 + 1;
    this[1].__end_ = &v16[v15];
    if (value)
    {
      operator delete(value);
      value = p_end_cap->__begin_;
    }
    else
    {
      value = v16;
    }
  }
  else
  {
    unsigned int *value = v8;
    int v10 = value + 1;
  }
  this[1].__begin_ = v10;
  unint64_t v17 = (char *)v10 - (char *)value;
  uint64_t v18 = v10 - value;
  if (v17 > 0xFFFFFFFFFFFFFFCFLL)
  {
    begiuint64_t n = &value[v18 + 12];
    this[1].__begin_ = begin;
  }
  else
  {
    std::vector<unsigned int>::__append(p_end_cap, 0xCuLL);
    value = this->__end_cap_.__value_;
    begiuint64_t n = this[1].__begin_;
  }
  int v20 = &value[v18];
  *int v20 = ((begin - value) >> 2 << 8) | 0x42;
  long long v21 = *(_OWORD *)&this[1].__end_cap_.__value_;
  long long v22 = *(_OWORD *)&this[2].__end_;
  *(void *)(v20 + 9) = this[3].__begin_;
  *(_OWORD *)(v20 + 5) = v22;
  *(_OWORD *)(v20 + 1) = v21;
  __int16 v23 = this->__end_cap_.__value_;
  uint64_t v24 = (char *)this[1].__begin_ - (char *)v23;
  uint64_t v25 = v24 >> 2;
  if ((unint64_t)v24 > 0xFFFFFFFFFFFFFFF7)
  {
    uint64_t v26 = &v23[v25 + 2];
    this[1].__begin_ = v26;
  }
  else
  {
    std::vector<unsigned int>::__append(p_end_cap, 2uLL);
    __int16 v23 = this->__end_cap_.__value_;
    uint64_t v26 = this[1].__begin_;
  }
  unint64_t v27 = &v23[v25];
  unsigned int *v27 = ((v26 - v23) >> 2 << 8) | 0x48;
  v27[1] = this[3].__end_;
  ProgramKey<(_AGCStreamToken)8,(AGX::DriverShaderCompilationMode)0>::finalizeStream(this);
  *a2 = this->__end_cap_.__value_;
  *a3 = (char *)this[1].__begin_ - (char *)this->__end_cap_.__value_;
}

void AGX::BlitVertexProgramKey::serialize(std::vector<unsigned int> *this, unsigned int **a2, unint64_t *a3)
{
  p_end_cap = (std::vector<unsigned int> *)&this->__end_cap_;
  value = this->__end_cap_.__value_;
  this[1].__begin_ = value;
  int v8 = LOBYTE(this->__end_) | 0x100;
  std::vector<unsigned int>::pointer end = this[1].__end_;
  if (value >= end)
  {
    uint64_t v11 = (char *)end - (char *)value;
    uint64_t v12 = v11 >> 1;
    if ((unint64_t)(v11 >> 1) <= 1) {
      uint64_t v12 = 1;
    }
    BOOL v13 = (unint64_t)v11 >= 0x7FFFFFFFFFFFFFFCLL;
    unint64_t v14 = 0x3FFFFFFFFFFFFFFFLL;
    if (!v13) {
      unint64_t v14 = v12;
    }
    if (v14 >> 62) {
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
    uint64_t v15 = v14;
    uint64_t v16 = (unsigned int *)operator new(4 * v14);
    *uint64_t v16 = v8;
    int v10 = v16 + 1;
    this->__end_cap_.__value_ = v16;
    this[1].__begin_ = v16 + 1;
    this[1].__end_ = &v16[v15];
    if (value)
    {
      operator delete(value);
      value = p_end_cap->__begin_;
    }
    else
    {
      value = v16;
    }
  }
  else
  {
    unsigned int *value = v8;
    int v10 = value + 1;
  }
  this[1].__begin_ = v10;
  uint64_t v17 = v10 - value;
  if ((unint64_t)((char *)v10 - (char *)value) > 0xFFFFFFFFFFFFFFF7)
  {
    begiuint64_t n = &value[v17 + 2];
    this[1].__begin_ = begin;
  }
  else
  {
    std::vector<unsigned int>::__append(p_end_cap, 2uLL);
    value = this->__end_cap_.__value_;
    begiuint64_t n = this[1].__begin_;
  }
  __int16 v19 = &value[v17];
  *__int16 v19 = ((begin - value) >> 2 << 8) | 0x47;
  v19[1] = this[1].__end_cap_.__value_;
  ProgramKey<(_AGCStreamToken)8,(AGX::DriverShaderCompilationMode)0>::finalizeStream(this);
  *a2 = this->__end_cap_.__value_;
  *a3 = (char *)this[1].__begin_ - (char *)this->__end_cap_.__value_;
}

void AGX::BlitFragmentProgramKey::serialize(std::vector<unsigned int> *this, unsigned int **a2, unint64_t *a3)
{
  p_end_cap = (std::vector<unsigned int> *)&this->__end_cap_;
  value = this->__end_cap_.__value_;
  this[1].__begin_ = value;
  int v8 = LOBYTE(this->__end_) | 0x100;
  std::vector<unsigned int>::pointer end = this[1].__end_;
  if (value >= end)
  {
    uint64_t v11 = (char *)end - (char *)value;
    uint64_t v12 = v11 >> 1;
    if ((unint64_t)(v11 >> 1) <= 1) {
      uint64_t v12 = 1;
    }
    BOOL v13 = (unint64_t)v11 >= 0x7FFFFFFFFFFFFFFCLL;
    unint64_t v14 = 0x3FFFFFFFFFFFFFFFLL;
    if (!v13) {
      unint64_t v14 = v12;
    }
    if (v14 >> 62) {
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
    uint64_t v15 = v14;
    uint64_t v16 = (unsigned int *)operator new(4 * v14);
    *uint64_t v16 = v8;
    int v10 = v16 + 1;
    this->__end_cap_.__value_ = v16;
    this[1].__begin_ = v16 + 1;
    this[1].__end_ = &v16[v15];
    if (value)
    {
      operator delete(value);
      value = p_end_cap->__begin_;
    }
    else
    {
      value = v16;
    }
  }
  else
  {
    unsigned int *value = v8;
    int v10 = value + 1;
  }
  this[1].__begin_ = v10;
  unint64_t v17 = (char *)v10 - (char *)value;
  uint64_t v18 = v10 - value;
  if (v17 > 0xFFFFFFFFFFFFFFCFLL)
  {
    begiuint64_t n = &value[v18 + 12];
    this[1].__begin_ = begin;
  }
  else
  {
    std::vector<unsigned int>::__append(p_end_cap, 0xCuLL);
    value = this->__end_cap_.__value_;
    begiuint64_t n = this[1].__begin_;
  }
  int v20 = &value[v18];
  *int v20 = ((begin - value) >> 2 << 8) | 0x42;
  long long v21 = *(_OWORD *)&this[1].__end_cap_.__value_;
  long long v22 = *(_OWORD *)&this[2].__end_;
  *(void *)(v20 + 9) = this[3].__begin_;
  *(_OWORD *)(v20 + 5) = v22;
  *(_OWORD *)(v20 + 1) = v21;
  __int16 v23 = this->__end_cap_.__value_;
  uint64_t v24 = (char *)this[1].__begin_ - (char *)v23;
  uint64_t v25 = v24 >> 2;
  if ((unint64_t)v24 > 0xFFFFFFFFFFFFFFF7)
  {
    uint64_t v26 = &v23[v25 + 2];
    this[1].__begin_ = v26;
  }
  else
  {
    std::vector<unsigned int>::__append(p_end_cap, 2uLL);
    __int16 v23 = this->__end_cap_.__value_;
    uint64_t v26 = this[1].__begin_;
  }
  unint64_t v27 = &v23[v25];
  unsigned int *v27 = ((v26 - v23) >> 2 << 8) | 0x46;
  v27[1] = this[3].__end_;
  ProgramKey<(_AGCStreamToken)8,(AGX::DriverShaderCompilationMode)0>::finalizeStream(this);
  *a2 = this->__end_cap_.__value_;
  *a3 = (char *)this[1].__begin_ - (char *)this->__end_cap_.__value_;
}

uint64_t ___ZL19gatherDeviceOptionsPN3AGX6HAL2006DeviceEPP8NSStringS5__block_invoke()
{
  LOBYTE(block[0]) = 0;
  findEnvVarNum<BOOL>("MTL_SHADER_PAGE_FAULT_REPORTING", block);
  gatherDeviceOptions(AGX::HAL200::Device *,NSString **,NSString **)::deviceOptions = gatherDeviceOptions(AGX::HAL200::Device *,NSString **,NSString **)::deviceOptions & 0xFFFFFFFFFE000000 | (2 * (LOBYTE(block[0]) == 0));
  block[0] = MEMORY[0x263EF8330];
  block[1] = 3221225472;
  void block[2] = ___ZN3AGX6DeviceINS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE18ShaderBufferBounds18setDefaultSettingsEj_block_invoke;
  block[3] = &__block_descriptor_36_e5_v8__0l;
  int v3 = 0;
  if (AGX::Device<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::ShaderBufferBounds::setDefaultSettings::buffer_bounds_once != -1) {
    dispatch_once(&AGX::Device<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::ShaderBufferBounds::setDefaultSettings::buffer_bounds_once, block);
  }
  uint64_t result = MTLGetOverridenDeviceCreationFlags();
  if (result)
  {
    unsigned int v1 = block[0];
    gatherDeviceOptions(AGX::HAL200::Device *,NSString **,NSString **)::deviceOptions = block[0];
  }
  else
  {
    unsigned int v1 = gatherDeviceOptions(AGX::HAL200::Device *,NSString **,NSString **)::deviceOptions;
  }
  gatherDeviceOptions(AGX::HAL200::Device *,NSString **,NSString **)::kernelOptions |= (v1 >> 19) & 0x20 | (8 * (v1 & 3));
  return result;
}

void ___ZN3AGX6DeviceINS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE36setupDriverIntersectionTableIfNeededEv_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = *(void *)(v1 + 5152);
  uint64_t v3 = *(void *)(v1 + 6008);
  v143[0] = MEMORY[0x263EF8330];
  v143[1] = 3221225472;
  v143[2] = ___ZN3AGX35DriverIntersectionFunctionTableGen1INS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE23compileAndPopulateTableEPNS_8CompilerE_block_invoke;
  v143[3] = &__block_descriptor_40_e237_v80__0_DriverIntersectionProgramKey____i_vector_unsigned_int__std::allocator_unsigned_int____I_I___compressed_pair_unsigned_int____std::allocator_unsigned_int____I____AGCDriverIntersectionState_______b4b2b3b3b3b1b1b15_I___8Q56r_v64B72I76l;
  v143[4] = v2;
  uint64_t v141 = v3;
  v142[0] = MEMORY[0x263EF8330];
  v142[1] = 3221225472;
  v142[2] = ___ZN3AGX35DriverIntersectionFunctionTableGen1INS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE23compileAndPopulateTableEPNS_8CompilerE_block_invoke_2;
  v142[3] = &__block_descriptor_40_e237_v80__0_DriverIntersectionProgramKey____i_vector_unsigned_int__std::allocator_unsigned_int____I_I___compressed_pair_unsigned_int____std::allocator_unsigned_int____I____AGCDriverIntersectionState_______b4b2b3b3b3b1b1b15_I___8Q56r_v64B72I76l;
  v142[4] = v2;
  v137[0] = MEMORY[0x263EF8330];
  v137[1] = 3221225472;
  uint64_t v138 = ___ZN3AGX35DriverIntersectionFunctionTableGen1INS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE23compileAndPopulateTableEPNS_8CompilerE_block_invoke_3;
  uint64_t v139 = &__block_descriptor_48_e459_v72__0_DriverIntersectionProgramKey____i_vector_unsigned_int__std::allocator_unsigned_int____I_I___compressed_pair_unsigned_int____std::allocator_unsigned_int____I____AGCDriverIntersectionState_______b4b2b3b3b3b1b1b15_I___8B56I60___v___DriverIntersectionProgramKey____i_vector_unsigned_int__std::allocator_unsigned_int____I_I___compressed_pair_unsigned_int____std::allocator_unsigned_int____I____AGCDriverIntersectionState_______b4b2b3b3b3b1b1b15_I___Q_vBI_64l;
  uint64_t v140 = v2;
  uint64_t m = operator new(0x6E4uLL);
  unsigned int v5 = 0;
  unint64_t v6 = (unint64_t)(m + 441);
  *uint64_t m = 13;
  *((_WORD *)m + 2) = 260;
  *((unsigned char *)m + 6) = 0;
  m[2] = 0;
  uint64_t v7 = m + 3;
  do
  {
    unsigned int v9 = 0;
    do
    {
      if ((unint64_t)v7 >= v6)
      {
        unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * (v7 - m) + 1;
        if (v11 > 0x1555555555555555) {
          abort();
        }
        if (0x5555555555555556 * ((uint64_t)(v6 - (void)m) >> 2) > v11) {
          unint64_t v11 = 0x5555555555555556 * ((uint64_t)(v6 - (void)m) >> 2);
        }
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6 - (void)m) >> 2) >= 0xAAAAAAAAAAAAAAALL) {
          unint64_t v12 = 0x1555555555555555;
        }
        else {
          unint64_t v12 = v11;
        }
        if (v12 > 0x1555555555555555) {
          std::__throw_bad_array_new_length[abi:nn180100]();
        }
        BOOL v13 = (char *)operator new(12 * v12);
        unint64_t v14 = &v13[4 * (v7 - m)];
        *unint64_t v14 = 0;
        v14[1] = v9;
        void v14[2] = v5;
        *(_DWORD *)(v14 + 3) = 16777728;
        *((_DWORD *)v14 + 2) = 0;
        uint64_t v15 = v14;
        while (v7 != m)
        {
          uint64_t v16 = *(void *)(v7 - 3);
          v7 -= 3;
          int v17 = v7[2];
          *(void *)(v15 - 12) = v16;
          v15 -= 12;
          *((_DWORD *)v15 + 2) = v17;
        }
        unint64_t v6 = (unint64_t)&v13[12 * v12];
        unint64_t v10 = (unint64_t)(v14 + 12);
        if (m) {
          operator delete(m);
        }
        uint64_t m = v15;
        if (v10 < v6)
        {
LABEL_5:
          *(unsigned char *)unint64_t v10 = 12;
          *(unsigned char *)(v10 + 1) = v9;
          *(unsigned char *)(v10 + 2) = v5;
          *(_DWORD *)(v10 + 3) = 0x1000000;
          uint64_t v7 = (_DWORD *)(v10 + 12);
          *(_DWORD *)(v10 + 8) = 0;
          goto LABEL_6;
        }
      }
      else
      {
        *(unsigned char *)uint64_t v7 = 0;
        *((unsigned char *)v7 + 1) = v9;
        *((unsigned char *)v7 + 2) = v5;
        *(_DWORD *)((char *)v7 + 3) = 16777728;
        unint64_t v10 = (unint64_t)(v7 + 3);
        v7[2] = 0;
        if ((unint64_t)(v7 + 3) < v6) {
          goto LABEL_5;
        }
      }
      unint64_t v18 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v10 - (void)m) >> 2) + 1;
      if (v18 > 0x1555555555555555) {
        abort();
      }
      if (0x5555555555555556 * ((uint64_t)(v6 - (void)m) >> 2) > v18) {
        unint64_t v18 = 0x5555555555555556 * ((uint64_t)(v6 - (void)m) >> 2);
      }
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6 - (void)m) >> 2) >= 0xAAAAAAAAAAAAAAALL) {
        unint64_t v19 = 0x1555555555555555;
      }
      else {
        unint64_t v19 = v18;
      }
      if (v19 > 0x1555555555555555) {
        std::__throw_bad_array_new_length[abi:nn180100]();
      }
      int v20 = (char *)operator new(12 * v19);
      long long v21 = &v20[4 * ((uint64_t)(v10 - (void)m) >> 2)];
      *long long v21 = 12;
      v21[1] = v9;
      v21[2] = v5;
      *(_DWORD *)(v21 + 3) = 0x1000000;
      *((_DWORD *)v21 + 2) = 0;
      long long v22 = v21;
      while ((_DWORD *)v10 != m)
      {
        uint64_t v23 = *(void *)(v10 - 12);
        v10 -= 12;
        int v24 = *(_DWORD *)(v10 + 8);
        *(void *)(v22 - 12) = v23;
        v22 -= 12;
        *((_DWORD *)v22 + 2) = v24;
      }
      unint64_t v6 = (unint64_t)&v20[12 * v19];
      uint64_t v7 = v21 + 12;
      if (m) {
        operator delete(m);
      }
      uint64_t m = v22;
LABEL_6:
      BOOL v8 = v9++ >= 3;
    }
    while (!v8);
    if ((unint64_t)v7 >= v6)
    {
      unint64_t v29 = 0xAAAAAAAAAAAAAAABLL * (v7 - m) + 1;
      if (v29 > 0x1555555555555555) {
LABEL_236:
      }
        abort();
      if (0x5555555555555556 * ((uint64_t)(v6 - (void)m) >> 2) > v29) {
        unint64_t v29 = 0x5555555555555556 * ((uint64_t)(v6 - (void)m) >> 2);
      }
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6 - (void)m) >> 2) >= 0xAAAAAAAAAAAAAAALL) {
        unint64_t v30 = 0x1555555555555555;
      }
      else {
        unint64_t v30 = v29;
      }
      if (v30 > 0x1555555555555555) {
LABEL_237:
      }
        std::__throw_bad_array_new_length[abi:nn180100]();
      uint64_t v31 = (char *)operator new(12 * v30);
      __int16 v32 = &v31[4 * (v7 - m)];
      *(_WORD *)__int16 v32 = 8;
      v32[2] = v5;
      *(_DWORD *)(v32 + 3) = 16777728;
      *((_DWORD *)v32 + 2) = 0;
      for (uint64_t i = v32; v7 != m; *((_DWORD *)i + 2) = v35)
      {
        uint64_t v34 = *(void *)(v7 - 3);
        v7 -= 3;
        int v35 = v7[2];
        *(void *)(i - 12) = v34;
        i -= 12;
      }
      unint64_t v6 = (unint64_t)&v31[12 * v30];
      unint64_t v25 = (unint64_t)(v32 + 12);
      if (m) {
        operator delete(m);
      }
      uint64_t m = i;
      if (v25 >= v6) {
        goto LABEL_53;
      }
LABEL_38:
      *(_WORD *)unint64_t v25 = 264;
      *(unsigned char *)(v25 + 2) = v5;
      *(_DWORD *)(v25 + 3) = 16777728;
      unint64_t v26 = v25 + 12;
      uint64_t k = (char *)m;
      *(_DWORD *)(v25 + 8) = 0;
      if (v25 + 12 < v6) {
        goto LABEL_39;
      }
LABEL_65:
      unint64_t v42 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v26 - (void)k) >> 2) + 1;
      if (v42 > 0x1555555555555555) {
LABEL_234:
      }
        abort();
      if (0x5555555555555556 * ((uint64_t)(v6 - (void)k) >> 2) > v42) {
        unint64_t v42 = 0x5555555555555556 * ((uint64_t)(v6 - (void)k) >> 2);
      }
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6 - (void)k) >> 2) >= 0xAAAAAAAAAAAAAAALL) {
        unint64_t v43 = 0x1555555555555555;
      }
      else {
        unint64_t v43 = v42;
      }
      if (v43 > 0x1555555555555555) {
LABEL_235:
      }
        std::__throw_bad_array_new_length[abi:nn180100]();
      BOOL v44 = (char *)operator new(12 * v43);
      uint64_t v45 = &v44[4 * ((uint64_t)(v26 - (void)k) >> 2)];
      *(_WORD *)uint64_t v45 = 1;
      v45[2] = v5;
      *(_DWORD *)(v45 + 3) = 16777728;
      *((_DWORD *)v45 + 2) = 0;
      for (uint64_t j = v45; (char *)v26 != k; *((_DWORD *)j + 2) = v48)
      {
        uint64_t v47 = *(void *)(v26 - 12);
        v26 -= 12;
        int v48 = *(_DWORD *)(v26 + 8);
        *(void *)(j - 12) = v47;
        j -= 12;
      }
      unint64_t v6 = (unint64_t)&v44[12 * v43];
      unint64_t v28 = (unint64_t)(v45 + 12);
      if (k) {
        operator delete(k);
      }
      uint64_t k = j;
      if (v28 >= v6) {
        goto LABEL_77;
      }
LABEL_2:
      *(_WORD *)unint64_t v28 = 257;
      *(unsigned char *)(v28 + 2) = v5;
      *(_DWORD *)(v28 + 3) = 16777728;
      uint64_t v7 = (_DWORD *)(v28 + 12);
      uint64_t m = k;
      *(_DWORD *)(v28 + 8) = 0;
      goto LABEL_3;
    }
    *(_WORD *)uint64_t v7 = 8;
    *((unsigned char *)v7 + 2) = v5;
    *(_DWORD *)((char *)v7 + 3) = 16777728;
    unint64_t v25 = (unint64_t)(v7 + 3);
    v7[2] = 0;
    if ((unint64_t)(v7 + 3) < v6) {
      goto LABEL_38;
    }
LABEL_53:
    unint64_t v36 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v25 - (void)m) >> 2) + 1;
    if (v36 > 0x1555555555555555) {
      goto LABEL_236;
    }
    if (0x5555555555555556 * ((uint64_t)(v6 - (void)m) >> 2) > v36) {
      unint64_t v36 = 0x5555555555555556 * ((uint64_t)(v6 - (void)m) >> 2);
    }
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6 - (void)m) >> 2) >= 0xAAAAAAAAAAAAAAALL) {
      unint64_t v37 = 0x1555555555555555;
    }
    else {
      unint64_t v37 = v36;
    }
    if (v37 > 0x1555555555555555) {
      goto LABEL_237;
    }
    uint64_t v38 = (char *)operator new(12 * v37);
    uint64_t v39 = &v38[4 * ((uint64_t)(v25 - (void)m) >> 2)];
    *(_WORD *)uint64_t v39 = 264;
    v39[2] = v5;
    *(_DWORD *)(v39 + 3) = 16777728;
    *((_DWORD *)v39 + 2) = 0;
    for (uint64_t k = v39; (_DWORD *)v25 != m; *((_DWORD *)k + 2) = v41)
    {
      uint64_t v40 = *(void *)(v25 - 12);
      v25 -= 12;
      int v41 = *(_DWORD *)(v25 + 8);
      *(void *)(k - 12) = v40;
      k -= 12;
    }
    unint64_t v6 = (unint64_t)&v38[12 * v37];
    unint64_t v26 = (unint64_t)(v39 + 12);
    if (m) {
      operator delete(m);
    }
    if (v26 >= v6) {
      goto LABEL_65;
    }
LABEL_39:
    *(_WORD *)unint64_t v26 = 1;
    *(unsigned char *)(v26 + 2) = v5;
    *(_DWORD *)(v26 + 3) = 16777728;
    unint64_t v28 = v26 + 12;
    *(_DWORD *)(v26 + 8) = 0;
    if (v26 + 12 < v6) {
      goto LABEL_2;
    }
LABEL_77:
    unint64_t v49 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v28 - (void)k) >> 2) + 1;
    if (v49 > 0x1555555555555555) {
      goto LABEL_234;
    }
    if (0x5555555555555556 * ((uint64_t)(v6 - (void)k) >> 2) > v49) {
      unint64_t v49 = 0x5555555555555556 * ((uint64_t)(v6 - (void)k) >> 2);
    }
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6 - (void)k) >> 2) >= 0xAAAAAAAAAAAAAAALL) {
      unint64_t v50 = 0x1555555555555555;
    }
    else {
      unint64_t v50 = v49;
    }
    if (v50 > 0x1555555555555555) {
      goto LABEL_235;
    }
    long long v51 = (char *)operator new(12 * v50);
    uint64_t v52 = &v51[4 * ((uint64_t)(v28 - (void)k) >> 2)];
    *(_WORD *)uint64_t v52 = 257;
    v52[2] = v5;
    *(_DWORD *)(v52 + 3) = 16777728;
    *((_DWORD *)v52 + 2) = 0;
    for (uint64_t m = v52; (char *)v28 != k; m[2] = v54)
    {
      uint64_t v53 = *(void *)(v28 - 12);
      v28 -= 12;
      int v54 = *(_DWORD *)(v28 + 8);
      *(void *)(m - 3) = v53;
      m -= 3;
    }
    unint64_t v6 = (unint64_t)&v51[12 * v50];
    uint64_t v7 = v52 + 12;
    if (k) {
      operator delete(k);
    }
LABEL_3:
    BOOL v8 = v5++ >= 7;
  }
  while (!v8);
  unsigned int v55 = 0;
  nuint64_t n = (char *)m;
  do
  {
    if ((unint64_t)v7 >= v6)
    {
      unint64_t v60 = 0xAAAAAAAAAAAAAAABLL * (((char *)v7 - nn) >> 2) + 1;
      if (v60 > 0x1555555555555555) {
        goto LABEL_238;
      }
      if (0x5555555555555556 * ((uint64_t)(v6 - (void)nn) >> 2) > v60) {
        unint64_t v60 = 0x5555555555555556 * ((uint64_t)(v6 - (void)nn) >> 2);
      }
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6 - (void)nn) >> 2) >= 0xAAAAAAAAAAAAAAALL) {
        unint64_t v61 = 0x1555555555555555;
      }
      else {
        unint64_t v61 = v60;
      }
      if (v61 > 0x1555555555555555) {
        goto LABEL_239;
      }
      uint64_t v62 = (char *)operator new(12 * v61);
      uint64_t v63 = &v62[4 * (((char *)v7 - nn) >> 2)];
      *(_WORD *)uint64_t v63 = 9;
      v63[2] = v55;
      *(_DWORD *)(v63 + 3) = 0x1000000;
      *((_DWORD *)v63 + 2) = 0;
      for (uint64_t n = v63; v7 != (_DWORD *)nn; *((_DWORD *)n + 2) = v66)
      {
        uint64_t v65 = *(void *)(v7 - 3);
        v7 -= 3;
        int v66 = v7[2];
        *(void *)(n - 12) = v65;
        n -= 12;
      }
      unint64_t v6 = (unint64_t)&v62[12 * v61];
      unint64_t v57 = (unint64_t)(v63 + 12);
      if (nn) {
        operator delete(nn);
      }
      nuint64_t n = n;
      if (v57 < v6)
      {
LABEL_93:
        *(_WORD *)unint64_t v57 = 265;
        *(unsigned char *)(v57 + 2) = v55;
        *(_DWORD *)(v57 + 8) = 0;
        unint64_t v58 = v57 + 12;
        iuint64_t i = nn;
        *(_DWORD *)(v57 + 3) = 0;
        goto LABEL_117;
      }
    }
    else
    {
      *(_WORD *)uint64_t v7 = 9;
      *((unsigned char *)v7 + 2) = v55;
      *(_DWORD *)((char *)v7 + 3) = 0x1000000;
      unint64_t v57 = (unint64_t)(v7 + 3);
      v7[2] = 0;
      if ((unint64_t)(v7 + 3) < v6) {
        goto LABEL_93;
      }
    }
    unint64_t v67 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v57 - (void)nn) >> 2) + 1;
    if (v67 > 0x1555555555555555) {
LABEL_238:
    }
      abort();
    if (0x5555555555555556 * ((uint64_t)(v6 - (void)nn) >> 2) > v67) {
      unint64_t v67 = 0x5555555555555556 * ((uint64_t)(v6 - (void)nn) >> 2);
    }
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6 - (void)nn) >> 2) >= 0xAAAAAAAAAAAAAAALL) {
      unint64_t v68 = 0x1555555555555555;
    }
    else {
      unint64_t v68 = v67;
    }
    if (v68 > 0x1555555555555555) {
LABEL_239:
    }
      std::__throw_bad_array_new_length[abi:nn180100]();
    uint64_t v69 = (char *)operator new(12 * v68);
    unint64_t v70 = &v69[4 * ((uint64_t)(v57 - (void)nn) >> 2)];
    *(_WORD *)unint64_t v70 = 265;
    v70[2] = v55;
    *((_DWORD *)v70 + 2) = 0;
    *(_DWORD *)(v70 + 3) = 0;
    for (iuint64_t i = v70; (char *)v57 != nn; *((_DWORD *)ii + 2) = v72)
    {
      uint64_t v71 = *(void *)(v57 - 12);
      v57 -= 12;
      int v72 = *(_DWORD *)(v57 + 8);
      *(void *)(ii - 12) = v71;
      ii -= 12;
    }
    unint64_t v6 = (unint64_t)&v69[12 * v68];
    unint64_t v58 = (unint64_t)(v70 + 12);
    if (nn) {
      operator delete(nn);
    }
LABEL_117:
    unsigned int v73 = 0;
    do
    {
      BOOL v74 = (v73 & 0x7D) != 1;
      if (v58 < v6)
      {
        *(unsigned char *)unint64_t v58 = 10;
        *(unsigned char *)(v58 + 1) = v73;
        *(unsigned char *)(v58 + 2) = v55;
        *(_WORD *)(v58 + 3) = 0;
        *(unsigned char *)(v58 + 5) = 0;
        *(unsigned char *)(v58 + 6) = v74;
        *(_DWORD *)(v58 + 8) = 0;
        v58 += 12;
      }
      else
      {
        unint64_t v75 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v58 - (void)ii) >> 2) + 1;
        if (v75 > 0x1555555555555555) {
          abort();
        }
        if (0x5555555555555556 * ((uint64_t)(v6 - (void)ii) >> 2) > v75) {
          unint64_t v75 = 0x5555555555555556 * ((uint64_t)(v6 - (void)ii) >> 2);
        }
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6 - (void)ii) >> 2) >= 0xAAAAAAAAAAAAAAALL) {
          unint64_t v76 = 0x1555555555555555;
        }
        else {
          unint64_t v76 = v75;
        }
        if (v76 > 0x1555555555555555) {
          std::__throw_bad_array_new_length[abi:nn180100]();
        }
        uint64_t v77 = (char *)operator new(12 * v76);
        uint64_t v78 = &v77[4 * ((uint64_t)(v58 - (void)ii) >> 2)];
        *uint64_t v78 = 10;
        v78[1] = v73;
        v78[2] = v55;
        *(_WORD *)(v78 + 3) = 0;
        v78[5] = 0;
        v78[6] = v74;
        *((_DWORD *)v78 + 2) = 0;
        uint64_t v79 = v78;
        while ((char *)v58 != ii)
        {
          uint64_t v80 = *(void *)(v58 - 12);
          v58 -= 12;
          int v81 = *(_DWORD *)(v58 + 8);
          *(void *)(v79 - 12) = v80;
          v79 -= 12;
          *((_DWORD *)v79 + 2) = v81;
        }
        unint64_t v6 = (unint64_t)&v77[12 * v76];
        unint64_t v58 = (unint64_t)(v78 + 12);
        if (ii) {
          operator delete(ii);
        }
        iuint64_t i = v79;
      }
      BOOL v8 = v73++ >= 3;
    }
    while (!v8);
    if (v58 >= v6)
    {
      unint64_t v85 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v58 - (void)ii) >> 2) + 1;
      if (v85 > 0x1555555555555555) {
        goto LABEL_232;
      }
      if (0x5555555555555556 * ((uint64_t)(v6 - (void)ii) >> 2) > v85) {
        unint64_t v85 = 0x5555555555555556 * ((uint64_t)(v6 - (void)ii) >> 2);
      }
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6 - (void)ii) >> 2) >= 0xAAAAAAAAAAAAAAALL) {
        unint64_t v86 = 0x1555555555555555;
      }
      else {
        unint64_t v86 = v85;
      }
      if (v86 > 0x1555555555555555) {
        goto LABEL_233;
      }
      int v87 = (char *)operator new(12 * v86);
      uint64_t v88 = &v87[4 * ((uint64_t)(v58 - (void)ii) >> 2)];
      *(_WORD *)uint64_t v88 = 11;
      v88[2] = v55;
      *(_DWORD *)(v88 + 3) = 0x1000000;
      *((_DWORD *)v88 + 2) = 0;
      for (juint64_t j = v88; (char *)v58 != ii; *((_DWORD *)jj + 2) = v91)
      {
        uint64_t v90 = *(void *)(v58 - 12);
        v58 -= 12;
        int v91 = *(_DWORD *)(v58 + 8);
        *(void *)(jj - 12) = v90;
        jj -= 12;
      }
      unint64_t v6 = (unint64_t)&v87[12 * v86];
      unint64_t v82 = (unint64_t)(v88 + 12);
      if (ii) {
        operator delete(ii);
      }
      iuint64_t i = jj;
      if (v82 < v6)
      {
LABEL_136:
        *(_WORD *)unint64_t v82 = 267;
        *(unsigned char *)(v82 + 2) = v55;
        *(_DWORD *)(v82 + 3) = 0x1000000;
        unint64_t v83 = v82 + 12;
        *(_DWORD *)(v82 + 8) = 0;
        if (v82 + 12 < v6) {
          goto LABEL_137;
        }
        goto LABEL_163;
      }
    }
    else
    {
      *(_WORD *)unint64_t v58 = 11;
      *(unsigned char *)(v58 + 2) = v55;
      *(_DWORD *)(v58 + 3) = 0x1000000;
      unint64_t v82 = v58 + 12;
      *(_DWORD *)(v58 + 8) = 0;
      if (v58 + 12 < v6) {
        goto LABEL_136;
      }
    }
    unint64_t v92 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v82 - (void)ii) >> 2) + 1;
    if (v92 > 0x1555555555555555) {
      goto LABEL_232;
    }
    if (0x5555555555555556 * ((uint64_t)(v6 - (void)ii) >> 2) > v92) {
      unint64_t v92 = 0x5555555555555556 * ((uint64_t)(v6 - (void)ii) >> 2);
    }
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6 - (void)ii) >> 2) >= 0xAAAAAAAAAAAAAAALL) {
      unint64_t v93 = 0x1555555555555555;
    }
    else {
      unint64_t v93 = v92;
    }
    if (v93 > 0x1555555555555555) {
      goto LABEL_233;
    }
    uint64_t v94 = (char *)operator new(12 * v93);
    uint64_t v95 = &v94[4 * ((uint64_t)(v82 - (void)ii) >> 2)];
    *(_WORD *)uint64_t v95 = 267;
    v95[2] = v55;
    *(_DWORD *)(v95 + 3) = 0x1000000;
    *((_DWORD *)v95 + 2) = 0;
    for (kuint64_t k = v95; (char *)v82 != ii; *((_DWORD *)kk + 2) = v98)
    {
      uint64_t v97 = *(void *)(v82 - 12);
      v82 -= 12;
      int v98 = *(_DWORD *)(v82 + 8);
      *(void *)(kk - 12) = v97;
      kk -= 12;
    }
    unint64_t v6 = (unint64_t)&v94[12 * v93];
    unint64_t v83 = (unint64_t)(v95 + 12);
    if (ii) {
      operator delete(ii);
    }
    iuint64_t i = kk;
    if (v83 < v6)
    {
LABEL_137:
      *(_WORD *)unint64_t v83 = 523;
      *(unsigned char *)(v83 + 2) = v55;
      *(_DWORD *)(v83 + 3) = 0x1000000;
      unint64_t v84 = v83 + 12;
      *(_DWORD *)(v83 + 8) = 0;
      if (v83 + 12 < v6) {
        goto LABEL_89;
      }
      goto LABEL_175;
    }
LABEL_163:
    unint64_t v99 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v83 - (void)ii) >> 2) + 1;
    if (v99 > 0x1555555555555555) {
      goto LABEL_232;
    }
    if (0x5555555555555556 * ((uint64_t)(v6 - (void)ii) >> 2) > v99) {
      unint64_t v99 = 0x5555555555555556 * ((uint64_t)(v6 - (void)ii) >> 2);
    }
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6 - (void)ii) >> 2) >= 0xAAAAAAAAAAAAAAALL) {
      unint64_t v100 = 0x1555555555555555;
    }
    else {
      unint64_t v100 = v99;
    }
    if (v100 > 0x1555555555555555) {
      goto LABEL_233;
    }
    uint64_t v101 = (char *)operator new(12 * v100);
    unint64_t v102 = &v101[4 * ((uint64_t)(v83 - (void)ii) >> 2)];
    *(_WORD *)unint64_t v102 = 523;
    v102[2] = v55;
    *(_DWORD *)(v102 + 3) = 0x1000000;
    *((_DWORD *)v102 + 2) = 0;
    for (muint64_t m = v102; (char *)v83 != ii; *((_DWORD *)mm + 2) = v105)
    {
      uint64_t v104 = *(void *)(v83 - 12);
      v83 -= 12;
      int v105 = *(_DWORD *)(v83 + 8);
      *(void *)(mm - 12) = v104;
      mm -= 12;
    }
    unint64_t v6 = (unint64_t)&v101[12 * v100];
    unint64_t v84 = (unint64_t)(v102 + 12);
    if (ii) {
      operator delete(ii);
    }
    iuint64_t i = mm;
    if (v84 < v6)
    {
LABEL_89:
      *(_WORD *)unint64_t v84 = 779;
      *(unsigned char *)(v84 + 2) = v55;
      *(_DWORD *)(v84 + 3) = 0x1000000;
      uint64_t v7 = (_DWORD *)(v84 + 12);
      nuint64_t n = ii;
      *(_DWORD *)(v84 + 8) = 0;
      goto LABEL_90;
    }
LABEL_175:
    unint64_t v106 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v84 - (void)ii) >> 2) + 1;
    if (v106 > 0x1555555555555555) {
LABEL_232:
    }
      abort();
    if (0x5555555555555556 * ((uint64_t)(v6 - (void)ii) >> 2) > v106) {
      unint64_t v106 = 0x5555555555555556 * ((uint64_t)(v6 - (void)ii) >> 2);
    }
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6 - (void)ii) >> 2) >= 0xAAAAAAAAAAAAAAALL) {
      unint64_t v107 = 0x1555555555555555;
    }
    else {
      unint64_t v107 = v106;
    }
    if (v107 > 0x1555555555555555) {
LABEL_233:
    }
      std::__throw_bad_array_new_length[abi:nn180100]();
    uint64_t v108 = (char *)operator new(12 * v107);
    uint64_t v109 = &v108[4 * ((uint64_t)(v84 - (void)ii) >> 2)];
    *(_WORD *)uint64_t v109 = 779;
    v109[2] = v55;
    *(_DWORD *)(v109 + 3) = 0x1000000;
    *((_DWORD *)v109 + 2) = 0;
    for (nuint64_t n = v109; (char *)v84 != ii; *((_DWORD *)nn + 2) = v111)
    {
      uint64_t v110 = *(void *)(v84 - 12);
      v84 -= 12;
      int v111 = *(_DWORD *)(v84 + 8);
      *(void *)(nn - 12) = v110;
      nn -= 12;
    }
    unint64_t v6 = (unint64_t)&v108[12 * v107];
    uint64_t v7 = v109 + 12;
    if (ii) {
      operator delete(ii);
    }
LABEL_90:
    BOOL v8 = v55++ >= 7;
  }
  while (!v8);
  if ((unint64_t)v7 < v6)
  {
    _DWORD *v7 = 7;
    *((_WORD *)v7 + 2) = 2;
    *((unsigned char *)v7 + 6) = 0;
    v7[2] = 0;
    unint64_t i2 = (unint64_t)(v7 + 3);
    if ((unint64_t)(v7 + 3) < v6) {
      goto LABEL_189;
    }
LABEL_202:
    unint64_t v121 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(i2 - (void)nn) >> 2) + 1;
    if (v121 <= 0x1555555555555555)
    {
      if (0x5555555555555556 * ((uint64_t)(v6 - (void)nn) >> 2) > v121) {
        unint64_t v121 = 0x5555555555555556 * ((uint64_t)(v6 - (void)nn) >> 2);
      }
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6 - (void)nn) >> 2) >= 0xAAAAAAAAAAAAAAALL) {
        unint64_t v121 = 0x1555555555555555;
      }
      if (v121 <= 0x1555555555555555)
      {
        uint64_t v114 = (char *)operator new(12 * v121) + 4 * ((uint64_t)(i2 - (void)nn) >> 2);
        *(_DWORD *)uint64_t v114 = 263;
        *((_WORD *)v114 + 2) = 2;
        v114[6] = 0;
        *((_DWORD *)v114 + 2) = 0;
        for (i1 = v114 + 12; (char *)i2 != nn; *((_DWORD *)v114 + 2) = v123)
        {
          uint64_t v122 = *(void *)(i2 - 12);
          i2 -= 12;
          int v123 = *(_DWORD *)(i2 + 8);
          *(void *)(v114 - 12) = v122;
          v114 -= 12;
        }
        if (nn) {
          operator delete(nn);
        }
        goto LABEL_212;
      }
LABEL_241:
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
LABEL_240:
    abort();
  }
  unint64_t v115 = 0xAAAAAAAAAAAAAAABLL * (((char *)v7 - nn) >> 2) + 1;
  if (v115 > 0x1555555555555555) {
    goto LABEL_240;
  }
  if (0x5555555555555556 * ((uint64_t)(v6 - (void)nn) >> 2) > v115) {
    unint64_t v115 = 0x5555555555555556 * ((uint64_t)(v6 - (void)nn) >> 2);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6 - (void)nn) >> 2) >= 0xAAAAAAAAAAAAAAALL) {
    unint64_t v116 = 0x1555555555555555;
  }
  else {
    unint64_t v116 = v115;
  }
  if (v116 > 0x1555555555555555) {
    goto LABEL_241;
  }
  uint64_t v117 = (char *)operator new(12 * v116);
  uint64_t v118 = &v117[4 * (((char *)v7 - nn) >> 2)];
  *(_DWORD *)uint64_t v118 = 7;
  *((_WORD *)v118 + 2) = 2;
  unint64_t v6 = (unint64_t)&v117[12 * v116];
  v118[6] = 0;
  *((_DWORD *)v118 + 2) = 0;
  for (unint64_t i2 = (unint64_t)(v118 + 12); v7 != (_DWORD *)nn; *((_DWORD *)v118 + 2) = v120)
  {
    uint64_t v119 = *(void *)(v7 - 3);
    v7 -= 3;
    int v120 = v7[2];
    *(void *)(v118 - 12) = v119;
    v118 -= 12;
  }
  if (nn) {
    operator delete(nn);
  }
  nuint64_t n = v118;
  if (i2 >= v6) {
    goto LABEL_202;
  }
LABEL_189:
  *(_DWORD *)unint64_t i2 = 263;
  *(_WORD *)(i2 + 4) = 2;
  *(unsigned char *)(i2 + 6) = 0;
  *(_DWORD *)(i2 + 8) = 0;
  i1 = (char *)(i2 + 12);
  uint64_t v114 = nn;
LABEL_212:
  if (v114 != i1)
  {
    uint64_t v124 = v114;
    do
    {
      {
        AGX::DriverIntersectionFunctionTableGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::compileAndPopulateTable(AGX::Compiler *)::disableTemporalSplits = 0;
      }
      char v125 = v124[1];
      char v126 = v124[2];
      char v127 = v124[3];
      char v128 = v124[4];
      int v132 = 52;
      char v129 = *v124;
      long long v134 = 0;
      uint64_t v135 = 0;
      std::string __p = 0;
      uint64_t v131 = off_26F852770;
      int v136 = v129 & 0xF | (16 * (v125 & 3)) & 0x3F | ((v126 & 7) << 6) & 0x81FF | ((v127 & 7) << 9) & 0x8FFF | ((v128 & 7) << 12) | (AGX::DriverIntersectionFunctionTableGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::compileAndPopulateTable(AGX::Compiler *)::disableTemporalSplits << 15);
      if (v124[5]) {
        char v130 = v142;
      }
      else {
        char v130 = v143;
      }
      v138((uint64_t)v137, (uint64_t)&v131, v124[6], *((_DWORD *)v124 + 2), (uint64_t)v130);
      uint64_t v131 = off_26F8527C0;
      if (__p)
      {
        long long v134 = __p;
        operator delete(__p);
      }
      v124 += 12;
    }
    while (v124 != i1);
  }
  if (v114) {
    operator delete(v114);
  }
}

void sub_242A0A930(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (v17) {
    operator delete(v17);
  }
  _Unwind_Resume(exception_object);
}

uint64_t AGX::Device<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::findOrCreateDepthBiasIndex(uint64_t a1, uint64_t a2, void *a3, unsigned char *a4, unsigned char *a5, float a6, float a7, float a8)
{
  *a3 = 0xDE876B1A5;
  uint64_t v16 = (os_unfair_lock_s *)(a1 + 7616);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 7616));
  *a4 = 0;
  *a5 = 0;
  uint64_t v17 = *(void *)(a1 + 7648);
  os_unfair_lock_lock((os_unfair_lock_t)(v17 + 48));
  if (*(void *)(v17 + 32) < 0xCuLL)
  {
    *(void *)(v17 + 32) = 12;

    Buffer = AGX::DeviceInternalBufferAllocator::allocateBuffer(*(void *)v17, 0xCu);
    *(void *)(v17 + 8) = Buffer;
    *(void *)(v17 + 24) = Buffer;
    uint64_t v19 = *(void *)((char *)&Buffer->super.super._res.var0 + (int)*MEMORY[0x263F4B188]);
    *(void *)(v17 + 40) = v19;
  }
  else
  {
    Buffer = *(AGXBuffer **)(v17 + 24);
    uint64_t v19 = *(void *)(v17 + 40);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(v17 + 48));
  if (v19 != a2) {
    goto LABEL_37;
  }
  unint64_t v42 = Buffer;
  *a5 = 1;
  int v20 = (uint64_t **)(a1 + 7632);
  long long v21 = *(uint64_t **)(a1 + 7632);
  if (!v21)
  {
    uint64_t v28 = *(void *)(a1 + 7640);
    if (v28 >= 0xFFFF) {
      goto LABEL_37;
    }
    uint64_t v40 = (void *)(a1 + 7640);
    unsigned int v41 = *(void *)(a1 + 7640);
    unint64_t v36 = (uint64_t **)(a1 + 7632);
    unint64_t v30 = (uint64_t **)(a1 + 7632);
LABEL_41:
    uint64_t v34 = (float *)operator new(0x30uLL);
    v34[7] = a6;
    v34[8] = a7;
    v34[9] = a8;
    v34[10] = 0.0;
    *(void *)uint64_t v34 = 0;
    *((void *)v34 + 1) = 0;
    *((void *)v34 + 2) = v30;
    void *v36 = (uint64_t *)v34;
    uint64_t v37 = **(void **)(a1 + 7624);
    uint64_t v38 = (uint64_t *)v34;
    if (v37)
    {
      *(void *)(a1 + 7624) = v37;
      uint64_t v38 = *v36;
    }
    std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*v20, v38);
    unsigned int v29 = v41;
    ++*v40;
LABEL_44:
    *((_DWORD *)v34 + 10) = v28;
    *a4 = 1;
    uint64_t v39 = (float *)([(IOGPUMetalBuffer *)v42 contents] + 12 * v29);
    *uint64_t v39 = a6;
    v39[1] = a7;
    v39[2] = a8;
    if (*a4) {
      goto LABEL_38;
    }
    goto LABEL_39;
  }
  long long v22 = (float *)(a1 + 7632);
  uint64_t v23 = *(float **)(a1 + 7632);
  do
  {
    float v24 = v23[7];
    if (v24 < a6)
    {
LABEL_6:
      v23 += 2;
      goto LABEL_7;
    }
    if (a6 < v24) {
      goto LABEL_10;
    }
    float v25 = v23[8];
    if (v25 < a7) {
      goto LABEL_6;
    }
    if (a7 < v25)
    {
LABEL_10:
      long long v22 = v23;
    }
    else if (v23[9] < a8)
    {
      v23 += 2;
    }
    else
    {
      long long v22 = v23;
    }
LABEL_7:
    uint64_t v23 = *(float **)v23;
  }
  while (v23);
  if (v22 != (float *)v20)
  {
    float v26 = v22[7];
    if (a6 >= v26)
    {
      if (v26 < a6 || (float v27 = v22[8], a7 >= v27) && (v27 < a7 || a8 >= v22[9]))
      {
        uint64_t v28 = *((unsigned int *)v22 + 10);
        *a4 = 1;
        uint64_t v19 = a2;
        goto LABEL_38;
      }
    }
  }
  uint64_t v28 = *(void *)(a1 + 7640);
  if (v28 <= 0xFFFE)
  {
    unsigned int v29 = *(void *)(a1 + 7640);
    uint64_t v40 = (void *)(a1 + 7640);
    unsigned int v41 = v29;
    while (1)
    {
      unint64_t v30 = (uint64_t **)v21;
      float v31 = *((float *)v21 + 7);
      if (a6 < v31) {
        goto LABEL_25;
      }
      if (v31 < a6) {
        goto LABEL_28;
      }
      float v32 = *((float *)v21 + 8);
      if (a7 < v32) {
        goto LABEL_25;
      }
      if (v32 < a7) {
        goto LABEL_28;
      }
      float v33 = *((float *)v21 + 9);
      if (a8 < v33)
      {
LABEL_25:
        long long v21 = (uint64_t *)*v21;
        if (!*v30)
        {
          unint64_t v36 = v30;
          goto LABEL_41;
        }
      }
      else
      {
        if (v33 >= a8)
        {
          uint64_t v34 = (float *)v21;
          goto LABEL_44;
        }
LABEL_28:
        long long v21 = (uint64_t *)v21[1];
        if (!v21)
        {
          unint64_t v36 = v30 + 1;
          goto LABEL_41;
        }
      }
    }
  }
LABEL_37:
  uint64_t v28 = 0xFFFFFFFFLL;
  if (*a4) {
LABEL_38:
  }
    *a3 = v19 + 12 * v28;
LABEL_39:
  os_unfair_lock_unlock(v16);
  return v28;
}

void sub_242A0AD10(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v2);
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t AGX::Device<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::getScissorBuffer(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = (os_unfair_lock_s *)(a1 + 7656);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 7656));
  uint64_t v7 = *(void *)(a1 + 7688);
  v13[0] = MEMORY[0x263EF8330];
  v13[1] = 3221225472;
  unint64_t v14 = ___ZN3AGX20DeviceInternalBufferINS_21ScissorBitsBufferInfoEE13getBufferInfoEjP15MTLResourceList_block_invoke;
  uint64_t v15 = &unk_265171480;
  uint64_t v16 = a2;
  os_unfair_lock_lock((os_unfair_lock_t)(v7 + 48));
  if (*(void *)(v7 + 32) < 0x100000uLL)
  {
    *(void *)(v7 + 32) = 0x100000;

    Buffer = AGX::DeviceInternalBufferAllocator::allocateBuffer(*(void *)v7, 0x100000u);
    *(void *)(v7 + 8) = Buffer;
    unint64_t v12 = (int *)MEMORY[0x263F4B188];
    *(void *)(v7 + 24) = Buffer;
    uint64_t v9 = *(void *)((char *)&Buffer->super.super._res.var0 + *v12);
    *(void *)(v7 + 40) = v9;
    BOOL v8 = Buffer;
  }
  else
  {
    BOOL v8 = *(AGXBuffer **)(v7 + 8);
    uint64_t v9 = *(void *)(v7 + 40);
  }
  ((void (*)(void *, AGXBuffer *))v14)(v13, v8);
  os_unfair_lock_unlock((os_unfair_lock_t)(v7 + 48));
  if (a3) {
    IOGPUResourceListAddResource();
  }
  os_unfair_lock_unlock(v6);
  return v9;
}

void sub_242A0AE8C(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v2);
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void AGX::Device<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::resetScissorBuffer(uint64_t a1)
{
  uint64_t v2 = (os_unfair_lock_s *)(a1 + 7656);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 7656));
  std::__tree<std::__value_type<AGX::scissorMapInfo<AGX::HAL200::Encoders>,unsigned int>,std::__map_value_compare<AGX::scissorMapInfo<AGX::HAL200::Encoders>,std::__value_type<AGX::scissorMapInfo<AGX::HAL200::Encoders>,unsigned int>,std::less<AGX::scissorMapInfo<AGX::HAL200::Encoders>>,true>,std::allocator<std::__value_type<AGX::scissorMapInfo<AGX::HAL200::Encoders>,unsigned int>>>::destroy(*(void **)(a1 + 7672));
  *(void *)(a1 + 7664) = a1 + 7672;
  *(void *)(a1 + 7680) = 0;
  *(void *)(a1 + 7672) = 0;
  uint64_t v3 = *(void *)(a1 + 7688);
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 48));
  *(void *)(v3 + 32) = 0;
  uint64_t v4 = *(void **)(v3 + 8);
  *(void *)(v3 + 8) = 0;
  os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 48));

  *(_DWORD *)(a1 + 7696) = 0;

  os_unfair_lock_unlock(v2);
}

void sub_242A0AF50(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t AGX::Device<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::findOrCreateScissorIndex(uint64_t a1, uint64_t a2, int a3, uint64_t a4, void *a5, unsigned char *a6, unsigned char *a7)
{
  BOOL v13 = (int8x8_t *)(a2 + 1092);
  unint64_t v14 = (int8x16_t *)(a2 + 520);
  memset(&__src[2], 0, 228);
  *a5 = 4123088130;
  uint64_t v15 = (os_unfair_lock_s *)(a1 + 7656);
  memset(__src, 0, 32);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 7656));
  if (a3)
  {
    int v16 = 1;
    LODWORD(__src[0]) = 1;
    int8x16_t v17 = v14[16];
    int32x2_t v18 = (int32x2_t)vextq_s8(v17, v17, 4uLL).u64[0];
    v17.i32[1] = vextq_s8(v17, v17, 8uLL).i32[1];
    v17.i32[0] = vshl_n_s32(*(int32x2_t *)v17.i8, 0x10uLL).u32[0];
    v17.i32[1] = v17.u16[2];
    int32x2_t v19 = vshl_n_s32(v18, 0x10uLL);
    v18.i16[1] = 0;
    int8x8_t v20 = *v13;
    v18.i32[1] = v19.i32[1];
    *(int8x8_t *)((char *)__src + 4) = vorr_s8((int8x8_t)v18, *(int8x8_t *)v17.i8);
    *(int8x8_t *)((char *)__src + 12) = v20;
  }
  else
  {
    int v16 = *(_DWORD *)(a2 + 796);
    if (v16)
    {
      long long v21 = (int8x8_t *)((char *)__src + 4);
      int v22 = *(unsigned __int8 *)(a2 + 804);
      uint64_t v23 = (int8x8_t *)((char *)&v14[19].u64[1] + 4);
      uint64_t v24 = *(unsigned int *)(a2 + 796);
      do
      {
        int8x16_t v25 = *v14++;
        int8x16_t v26 = v25;
        if (v22) {
          float v27 = v23;
        }
        else {
          float v27 = v13;
        }
        int8x8_t v28 = *v27;
        v29.i32[0] = vshl_n_s32(*(int32x2_t *)v26.i8, 0x10uLL).u32[0];
        v29.i32[1] = vextq_s8(v26, v26, 8uLL).u16[2];
        int32x2_t v30 = (int32x2_t)vextq_s8(v26, v26, 4uLL).u64[0];
        int32x2_t v31 = vshl_n_s32(v30, 0x10uLL);
        v30.i16[1] = 0;
        v30.i32[1] = v31.i32[1];
        *long long v21 = vorr_s8((int8x8_t)v30, v29);
        v21[1] = v28;
        v21 += 2;
        ++v23;
        --v24;
      }
      while (v24);
    }
    LODWORD(__src[0]) = v16;
  }
  unint64_t v32 = (16 * v16);
  uint64_t v33 = *(void *)(a1 + 7688);
  os_unfair_lock_lock((os_unfair_lock_t)(v33 + 48));
  if (*(void *)(v33 + 32) < v32)
  {
    *(void *)(v33 + 32) = v32;

    Buffer = AGX::DeviceInternalBufferAllocator::allocateBuffer(*(void *)v33, v32);
    *(void *)(v33 + 8) = Buffer;
    *(void *)(v33 + 24) = Buffer;
    uint64_t v35 = *(void *)((char *)&Buffer->super.super._res.var0 + (int)*MEMORY[0x263F4B188]);
    *(void *)(v33 + 40) = v35;
  }
  else
  {
    Buffer = *(AGXBuffer **)(v33 + 24);
    uint64_t v35 = *(void *)(v33 + 40);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(v33 + 48));
  *a6 = 0;
  *a7 = 0;
  if (v35 != a4) {
    goto LABEL_37;
  }
  int v54 = Buffer;
  *a7 = 1;
  unint64_t v36 = (uint64_t **)(a1 + 7672);
  uint64_t v37 = *(uint64_t **)(a1 + 7672);
  if (!v37)
  {
    uint64_t v42 = *(unsigned int *)(a1 + 7696);
    if ((LODWORD(__src[0]) + v42) < 0x10000)
    {
      uint64_t v53 = (_DWORD *)(a1 + 7696);
      unint64_t v43 = (uint64_t **)(a1 + 7672);
LABEL_29:
      uint64_t v45 = operator new(0x128uLL);
      memcpy(v45 + 7, __src, 0x104uLL);
      v45[72] = 0;
      *(void *)uint64_t v45 = 0;
      *((void *)v45 + 1) = 0;
      *((void *)v45 + 2) = v43;
      void *v36 = (uint64_t *)v45;
      uint64_t v46 = **(void **)(a1 + 7664);
      uint64_t v47 = (uint64_t *)v45;
      if (v46)
      {
        *(void *)(a1 + 7664) = v46;
        uint64_t v47 = *v36;
      }
      std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 7672), v47);
      ++*(void *)(a1 + 7680);
      goto LABEL_32;
    }
    goto LABEL_37;
  }
  uint64_t v38 = a1 + 7672;
  uint64_t v39 = *(void *)(a1 + 7672);
  do
  {
    BOOL v40 = AGX::scissorMapInfo<AGX::HAL200::Encoders>::less_impl<0ul,1ul,2ul,3ul,4ul,5ul,6ul,7ul,8ul,9ul,10ul,11ul,12ul,13ul,14ul,15ul>((unsigned int *)(v39 + 28), (unsigned int *)__src);
    unsigned int v41 = (uint64_t *)(v39 + 8);
    if (!v40)
    {
      unsigned int v41 = (uint64_t *)v39;
      uint64_t v38 = v39;
    }
    uint64_t v39 = *v41;
  }
  while (*v41);
  if ((uint64_t **)v38 != v36
    && !AGX::scissorMapInfo<AGX::HAL200::Encoders>::less_impl<0ul,1ul,2ul,3ul,4ul,5ul,6ul,7ul,8ul,9ul,10ul,11ul,12ul,13ul,14ul,15ul>((unsigned int *)__src, (unsigned int *)(v38 + 28)))
  {
    uint64_t v42 = *(unsigned int *)(v38 + 288);
    *a6 = 1;
    goto LABEL_38;
  }
  uint64_t v42 = *(unsigned int *)(a1 + 7696);
  if ((LODWORD(__src[0]) + v42) >= 0x10000)
  {
LABEL_37:
    uint64_t v42 = 0xFFFFFFFFLL;
    if (!*a6) {
      goto LABEL_39;
    }
LABEL_38:
    *a5 = v35 + 16 * v42;
    goto LABEL_39;
  }
  uint64_t v53 = (_DWORD *)(a1 + 7696);
  while (1)
  {
    while (1)
    {
      unint64_t v43 = (uint64_t **)v37;
      BOOL v44 = (unsigned int *)v37 + 7;
      if (!AGX::scissorMapInfo<AGX::HAL200::Encoders>::less_impl<0ul,1ul,2ul,3ul,4ul,5ul,6ul,7ul,8ul,9ul,10ul,11ul,12ul,13ul,14ul,15ul>((unsigned int *)__src, v44))break; {
      uint64_t v37 = *v43;
      }
      if (!*v43)
      {
        unint64_t v36 = v43;
        goto LABEL_29;
      }
    }
    if (!AGX::scissorMapInfo<AGX::HAL200::Encoders>::less_impl<0ul,1ul,2ul,3ul,4ul,5ul,6ul,7ul,8ul,9ul,10ul,11ul,12ul,13ul,14ul,15ul>(v44, (unsigned int *)__src))break; {
    unint64_t v36 = v43 + 1;
    }
    uint64_t v37 = v43[1];
    if (!v37) {
      goto LABEL_29;
    }
  }
  uint64_t v45 = v43;
LABEL_32:
  v45[72] = v42;
  *a6 = 1;
  uint64_t v48 = [(IOGPUMetalBuffer *)v54 contents];
  int v49 = __src[0];
  if (LODWORD(__src[0]))
  {
    uint64_t v50 = v48;
    unint64_t v51 = 0;
    do
    {
      AGX::ClipRectContextGen3<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::setScissorBits(a2, v51, (int8x8_t *)(v50 + 16 * (v42 + v51)), 16 * (v42 + v51) + a4);
      ++v51;
      int v49 = __src[0];
    }
    while (v51 < LODWORD(__src[0]));
  }
  *v53 += v49;
  if (*a6) {
    goto LABEL_38;
  }
LABEL_39:
  os_unfair_lock_unlock(v15);
  return v42;
}

void sub_242A0B334(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v2);
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

BOOL AGX::scissorMapInfo<AGX::HAL200::Encoders>::less_impl<0ul,1ul,2ul,3ul,4ul,5ul,6ul,7ul,8ul,9ul,10ul,11ul,12ul,13ul,14ul,15ul>(unsigned int *a1, unsigned int *a2)
{
  v13[0] = a1;
  v13[1] = a1 + 1;
  void v13[2] = a1 + 5;
  v13[3] = a1 + 9;
  v13[4] = a1 + 13;
  v13[5] = a1 + 17;
  v13[6] = a1 + 21;
  v13[7] = a1 + 25;
  v13[8] = a1 + 29;
  v13[9] = a1 + 33;
  v13[10] = a1 + 37;
  v13[11] = a1 + 41;
  void v13[12] = a1 + 45;
  v13[13] = a1 + 49;
  v13[14] = a1 + 53;
  v13[15] = a1 + 57;
  v13[16] = a1 + 61;
  v12[0] = a2;
  v12[1] = a2 + 1;
  unsigned int v2 = *a2;
  v12[2] = a2 + 5;
  v12[3] = a2 + 9;
  v12[4] = a2 + 13;
  v12[5] = a2 + 17;
  v12[6] = a2 + 21;
  v12[7] = a2 + 25;
  v12[8] = a2 + 29;
  v12[9] = a2 + 33;
  v12[10] = a2 + 37;
  v12[11] = a2 + 41;
  v12[12] = a2 + 45;
  v12[13] = a2 + 49;
  v12[14] = a2 + 53;
  v12[15] = a2 + 57;
  v12[16] = a2 + 61;
  if (*a1 < v2) {
    return 1;
  }
  if (v2 < *a1) {
    return 0;
  }
  unsigned int v3 = a1[1];
  unsigned int v4 = a2[1];
  if (v3 < v4) {
    return 1;
  }
  if (v4 < v3) {
    return 0;
  }
  unsigned int v5 = a1[2];
  unsigned int v6 = a2[2];
  if (v5 < v6) {
    return 1;
  }
  if (v6 < v5) {
    return 0;
  }
  unsigned int v7 = a1[3];
  unsigned int v8 = a2[3];
  if (v7 < v8) {
    return 1;
  }
  if (v8 >= v7)
  {
    unsigned int v9 = a1[4];
    unsigned int v10 = a2[4];
    if (v9 < v10) {
      return 1;
    }
    if (v10 >= v9) {
      return std::__tuple_less<15ul>::operator()[abi:nn180100]<std::tuple<unsigned int const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&>,std::tuple<unsigned int const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&>>(v13, v12);
    }
  }
  return 0;
}

BOOL std::__tuple_less<15ul>::operator()[abi:nn180100]<std::tuple<unsigned int const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&>,std::tuple<unsigned int const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&>>(void *a1, void *a2)
{
  unsigned int v2 = (_DWORD *)a1[2];
  unsigned int v3 = (_DWORD *)a2[2];
  if (*v2 < *v3) {
    return 1;
  }
  if (*v3 < *v2) {
    return 0;
  }
  unsigned int v5 = v2[1];
  unsigned int v6 = v3[1];
  if (v5 < v6) {
    return 1;
  }
  if (v6 < v5) {
    return 0;
  }
  unsigned int v8 = v2[2];
  unsigned int v9 = v3[2];
  if (v8 < v9) {
    return 1;
  }
  if (v9 >= v8)
  {
    unsigned int v10 = v2[3];
    unsigned int v11 = v3[3];
    BOOL v12 = v10 >= v11;
    BOOL v7 = v10 < v11;
    if (!v12) {
      return v7;
    }
  }
  unsigned int v13 = v3[2];
  unsigned int v14 = v2[2];
  if (v13 < v14 || v14 >= v13 && v3[3] < v2[3]) {
    return 0;
  }
  uint64_t v15 = (_DWORD *)a1[3];
  int v16 = (_DWORD *)a2[3];
  if (*v15 < *v16) {
    return 1;
  }
  if (*v16 < *v15) {
    return 0;
  }
  unsigned int v17 = v15[1];
  unsigned int v18 = v16[1];
  if (v17 < v18) {
    return 1;
  }
  if (v18 < v17) {
    return 0;
  }
  unsigned int v19 = v15[2];
  unsigned int v20 = v16[2];
  if (v19 < v20) {
    return 1;
  }
  if (v20 < v19) {
    return 0;
  }
  unsigned int v21 = v15[3];
  unsigned int v22 = v16[3];
  if (v21 < v22) {
    return 1;
  }
  if (v22 < v21) {
    return 0;
  }
  return std::__tuple_less<13ul>::operator()[abi:nn180100]<std::tuple<unsigned int const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&>,std::tuple<unsigned int const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&>>(a1, a2);
}

BOOL std::__tuple_less<13ul>::operator()[abi:nn180100]<std::tuple<unsigned int const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&>,std::tuple<unsigned int const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&>>(void *a1, void *a2)
{
  unsigned int v2 = (_DWORD *)a1[4];
  unsigned int v3 = (_DWORD *)a2[4];
  if (*v2 < *v3) {
    return 1;
  }
  if (*v3 < *v2) {
    return 0;
  }
  unsigned int v5 = v2[1];
  unsigned int v6 = v3[1];
  if (v5 < v6) {
    return 1;
  }
  if (v6 < v5) {
    return 0;
  }
  unsigned int v8 = v2[2];
  unsigned int v9 = v3[2];
  if (v8 < v9) {
    return 1;
  }
  if (v9 >= v8)
  {
    unsigned int v10 = v2[3];
    unsigned int v11 = v3[3];
    BOOL v12 = v10 >= v11;
    BOOL v7 = v10 < v11;
    if (!v12) {
      return v7;
    }
  }
  unsigned int v13 = v3[2];
  unsigned int v14 = v2[2];
  if (v13 < v14 || v14 >= v13 && v3[3] < v2[3]) {
    return 0;
  }
  uint64_t v15 = (_DWORD *)a1[5];
  int v16 = (_DWORD *)a2[5];
  if (*v15 < *v16) {
    return 1;
  }
  if (*v16 < *v15) {
    return 0;
  }
  unsigned int v17 = v15[1];
  unsigned int v18 = v16[1];
  if (v17 < v18) {
    return 1;
  }
  if (v18 < v17) {
    return 0;
  }
  unsigned int v19 = v15[2];
  unsigned int v20 = v16[2];
  if (v19 < v20) {
    return 1;
  }
  if (v20 < v19) {
    return 0;
  }
  unsigned int v21 = v15[3];
  unsigned int v22 = v16[3];
  if (v21 < v22) {
    return 1;
  }
  if (v22 < v21) {
    return 0;
  }
  return std::__tuple_less<11ul>::operator()[abi:nn180100]<std::tuple<unsigned int const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&>,std::tuple<unsigned int const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&>>(a1, a2);
}

BOOL std::__tuple_less<11ul>::operator()[abi:nn180100]<std::tuple<unsigned int const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&>,std::tuple<unsigned int const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&>>(void *a1, void *a2)
{
  unsigned int v2 = (_DWORD *)a1[6];
  unsigned int v3 = (_DWORD *)a2[6];
  if (*v2 < *v3) {
    return 1;
  }
  if (*v3 < *v2) {
    return 0;
  }
  unsigned int v5 = v2[1];
  unsigned int v6 = v3[1];
  if (v5 < v6) {
    return 1;
  }
  if (v6 < v5) {
    return 0;
  }
  unsigned int v8 = v2[2];
  unsigned int v9 = v3[2];
  if (v8 < v9) {
    return 1;
  }
  if (v9 >= v8)
  {
    unsigned int v10 = v2[3];
    unsigned int v11 = v3[3];
    BOOL v12 = v10 >= v11;
    BOOL v7 = v10 < v11;
    if (!v12) {
      return v7;
    }
  }
  unsigned int v13 = v3[2];
  unsigned int v14 = v2[2];
  if (v13 < v14 || v14 >= v13 && v3[3] < v2[3]) {
    return 0;
  }
  uint64_t v15 = (_DWORD *)a1[7];
  int v16 = (_DWORD *)a2[7];
  if (*v15 < *v16) {
    return 1;
  }
  if (*v16 < *v15) {
    return 0;
  }
  unsigned int v17 = v15[1];
  unsigned int v18 = v16[1];
  if (v17 < v18) {
    return 1;
  }
  if (v18 < v17) {
    return 0;
  }
  unsigned int v19 = v15[2];
  unsigned int v20 = v16[2];
  if (v19 < v20) {
    return 1;
  }
  if (v20 < v19) {
    return 0;
  }
  unsigned int v21 = v15[3];
  unsigned int v22 = v16[3];
  if (v21 < v22) {
    return 1;
  }
  if (v22 < v21) {
    return 0;
  }
  return std::__tuple_less<9ul>::operator()[abi:nn180100]<std::tuple<unsigned int const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&>,std::tuple<unsigned int const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&>>(a1, a2);
}

BOOL std::__tuple_less<9ul>::operator()[abi:nn180100]<std::tuple<unsigned int const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&>,std::tuple<unsigned int const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&>>(void *a1, void *a2)
{
  unsigned int v2 = (_DWORD *)a1[8];
  unsigned int v3 = (_DWORD *)a2[8];
  if (*v2 < *v3) {
    return 1;
  }
  if (*v3 < *v2) {
    return 0;
  }
  unsigned int v5 = v2[1];
  unsigned int v6 = v3[1];
  if (v5 < v6) {
    return 1;
  }
  if (v6 < v5) {
    return 0;
  }
  unsigned int v8 = v2[2];
  unsigned int v9 = v3[2];
  if (v8 < v9) {
    return 1;
  }
  if (v9 >= v8)
  {
    unsigned int v10 = v2[3];
    unsigned int v11 = v3[3];
    BOOL v12 = v10 >= v11;
    BOOL v7 = v10 < v11;
    if (!v12) {
      return v7;
    }
  }
  unsigned int v13 = v3[2];
  unsigned int v14 = v2[2];
  if (v13 < v14 || v14 >= v13 && v3[3] < v2[3]) {
    return 0;
  }
  uint64_t v15 = (_DWORD *)a1[9];
  int v16 = (_DWORD *)a2[9];
  if (*v15 < *v16) {
    return 1;
  }
  if (*v16 < *v15) {
    return 0;
  }
  unsigned int v17 = v15[1];
  unsigned int v18 = v16[1];
  if (v17 < v18) {
    return 1;
  }
  if (v18 < v17) {
    return 0;
  }
  unsigned int v19 = v15[2];
  unsigned int v20 = v16[2];
  if (v19 < v20) {
    return 1;
  }
  if (v20 < v19) {
    return 0;
  }
  unsigned int v21 = v15[3];
  unsigned int v22 = v16[3];
  if (v21 < v22) {
    return 1;
  }
  if (v22 < v21) {
    return 0;
  }
  return std::__tuple_less<7ul>::operator()[abi:nn180100]<std::tuple<unsigned int const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&>,std::tuple<unsigned int const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&>>(a1, a2);
}

BOOL std::__tuple_less<7ul>::operator()[abi:nn180100]<std::tuple<unsigned int const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&>,std::tuple<unsigned int const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&>>(void *a1, void *a2)
{
  unsigned int v2 = (_DWORD *)a1[10];
  unsigned int v3 = (_DWORD *)a2[10];
  if (*v2 < *v3) {
    return 1;
  }
  if (*v3 < *v2) {
    return 0;
  }
  unsigned int v5 = v2[1];
  unsigned int v6 = v3[1];
  if (v5 < v6) {
    return 1;
  }
  if (v6 < v5) {
    return 0;
  }
  unsigned int v8 = v2[2];
  unsigned int v9 = v3[2];
  if (v8 < v9) {
    return 1;
  }
  if (v9 >= v8)
  {
    unsigned int v10 = v2[3];
    unsigned int v11 = v3[3];
    BOOL v12 = v10 >= v11;
    BOOL v7 = v10 < v11;
    if (!v12) {
      return v7;
    }
  }
  unsigned int v13 = v3[2];
  unsigned int v14 = v2[2];
  if (v13 < v14 || v14 >= v13 && v3[3] < v2[3]) {
    return 0;
  }
  uint64_t v15 = (_DWORD *)a1[11];
  int v16 = (_DWORD *)a2[11];
  if (*v15 < *v16) {
    return 1;
  }
  if (*v16 < *v15) {
    return 0;
  }
  unsigned int v17 = v15[1];
  unsigned int v18 = v16[1];
  if (v17 < v18) {
    return 1;
  }
  if (v18 < v17) {
    return 0;
  }
  unsigned int v19 = v15[2];
  unsigned int v20 = v16[2];
  if (v19 < v20) {
    return 1;
  }
  if (v20 < v19) {
    return 0;
  }
  unsigned int v21 = v15[3];
  unsigned int v22 = v16[3];
  if (v21 < v22) {
    return 1;
  }
  if (v22 < v21) {
    return 0;
  }
  return std::__tuple_less<5ul>::operator()[abi:nn180100]<std::tuple<unsigned int const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&>,std::tuple<unsigned int const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&>>(a1, a2);
}

BOOL std::__tuple_less<5ul>::operator()[abi:nn180100]<std::tuple<unsigned int const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&>,std::tuple<unsigned int const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&>>(void *a1, void *a2)
{
  unsigned int v2 = (_DWORD *)a1[12];
  unsigned int v3 = (_DWORD *)a2[12];
  if (*v2 < *v3) {
    return 1;
  }
  if (*v3 < *v2) {
    return 0;
  }
  unsigned int v5 = v2[1];
  unsigned int v6 = v3[1];
  if (v5 < v6) {
    return 1;
  }
  if (v6 < v5) {
    return 0;
  }
  unsigned int v8 = v2[2];
  unsigned int v9 = v3[2];
  if (v8 < v9) {
    return 1;
  }
  if (v9 >= v8)
  {
    unsigned int v10 = v2[3];
    unsigned int v11 = v3[3];
    BOOL v12 = v10 >= v11;
    BOOL v7 = v10 < v11;
    if (!v12) {
      return v7;
    }
  }
  unsigned int v13 = v3[2];
  unsigned int v14 = v2[2];
  if (v13 < v14 || v14 >= v13 && v3[3] < v2[3]) {
    return 0;
  }
  uint64_t v15 = (_DWORD *)a1[13];
  int v16 = (_DWORD *)a2[13];
  if (*v15 < *v16) {
    return 1;
  }
  if (*v16 < *v15) {
    return 0;
  }
  unsigned int v17 = v15[1];
  unsigned int v18 = v16[1];
  if (v17 < v18) {
    return 1;
  }
  if (v18 < v17) {
    return 0;
  }
  unsigned int v19 = v15[2];
  unsigned int v20 = v16[2];
  if (v19 < v20) {
    return 1;
  }
  if (v20 < v19) {
    return 0;
  }
  unsigned int v21 = v15[3];
  unsigned int v22 = v16[3];
  if (v21 < v22) {
    return 1;
  }
  if (v22 < v21) {
    return 0;
  }
  return std::__tuple_less<3ul>::operator()[abi:nn180100]<std::tuple<unsigned int const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&>,std::tuple<unsigned int const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&>>(a1, a2);
}

BOOL std::__tuple_less<3ul>::operator()[abi:nn180100]<std::tuple<unsigned int const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&>,std::tuple<unsigned int const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&,AGX::IPFEncoderGen4<kAGXRevHAL200>::ScissorBits const&>>(void *a1, void *a2)
{
  unsigned int v2 = (_DWORD *)a1[14];
  unsigned int v3 = (_DWORD *)a2[14];
  if (*v2 < *v3) {
    return 1;
  }
  if (*v3 < *v2) {
    return 0;
  }
  unsigned int v6 = v2[1];
  unsigned int v7 = v3[1];
  if (v6 < v7) {
    return 1;
  }
  if (v7 < v6) {
    return 0;
  }
  unsigned int v8 = v2[2];
  unsigned int v9 = v3[2];
  if (v8 < v9) {
    return 1;
  }
  if (v9 >= v8)
  {
    unsigned int v10 = v2[3];
    unsigned int v11 = v3[3];
    BOOL v12 = v10 >= v11;
    BOOL v5 = v10 < v11;
    if (!v12) {
      return v5;
    }
  }
  unsigned int v13 = v3[2];
  unsigned int v14 = v2[2];
  if (v13 < v14 || v14 >= v13 && v3[3] < v2[3]) {
    return 0;
  }
  uint64_t v15 = (_DWORD *)a1[15];
  int v16 = (_DWORD *)a2[15];
  if (*v15 < *v16) {
    return 1;
  }
  if (*v16 < *v15) {
    return 0;
  }
  unsigned int v17 = v15[1];
  unsigned int v18 = v16[1];
  if (v17 < v18) {
    return 1;
  }
  if (v18 < v17) {
    return 0;
  }
  unsigned int v19 = v15[2];
  unsigned int v20 = v16[2];
  if (v19 < v20) {
    return 1;
  }
  if (v20 < v19) {
    return 0;
  }
  unsigned int v21 = v15[3];
  unsigned int v22 = v16[3];
  if (v21 < v22) {
    return 1;
  }
  if (v22 < v21) {
    return 0;
  }
  uint64_t v23 = (_DWORD *)a1[16];
  uint64_t v24 = (_DWORD *)a2[16];
  if (*v23 < *v24) {
    return 1;
  }
  if (*v24 < *v23) {
    return 0;
  }
  unsigned int v25 = v23[1];
  unsigned int v26 = v24[1];
  if (v25 < v26) {
    return 1;
  }
  if (v26 < v25) {
    return 0;
  }
  unsigned int v27 = v23[2];
  unsigned int v28 = v24[2];
  if (v27 < v28) {
    return 1;
  }
  return v28 >= v27 && v23[3] < v24[3];
}

void AGX::Device<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::registerConstantSamplerList(uint64_t a1, unint64_t ***a2)
{
  unsigned int v4 = *a2;
  BOOL v5 = a2[1];
  if (*a2 != v5)
  {
    int v6 = *(_DWORD *)(a1 + 7584);
    do
    {
      unsigned int v8 = *v4++;
      unsigned int v7 = v8;
      unint64_t v9 = *v8 & 0xF03FFFFFFFFFFFFFLL;
      if (v6) {
        v9 |= 0xF80000000000000uLL;
      }
      unint64_t *v7 = v9;
    }
    while (v4 != v5);
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 7528));
  unsigned int v10 = *(char **)(a1 + 7568);
  unint64_t v11 = *(void *)(a1 + 7576);
  if ((unint64_t)v10 >= v11)
  {
    unsigned int v13 = *(char **)(a1 + 7560);
    uint64_t v14 = (v10 - v13) >> 3;
    unint64_t v15 = v14 + 1;
    if ((unint64_t)(v14 + 1) >> 61) {
      abort();
    }
    uint64_t v16 = v11 - (void)v13;
    if (v16 >> 2 > v15) {
      unint64_t v15 = v16 >> 2;
    }
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v17 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v17 = v15;
    }
    if (v17)
    {
      if (v17 >> 61) {
        std::__throw_bad_array_new_length[abi:nn180100]();
      }
      unsigned int v18 = operator new(8 * v17);
    }
    else
    {
      unsigned int v18 = 0;
    }
    unsigned int v19 = (unint64_t ****)&v18[8 * v14];
    unsigned int v20 = &v18[8 * v17];
    *unsigned int v19 = a2;
    BOOL v12 = v19 + 1;
    if (v10 == v13)
    {
      unsigned int v13 = v10;
    }
    else
    {
      unint64_t v21 = v10 - v13 - 8;
      if (v21 < 0x58) {
        goto LABEL_36;
      }
      if ((unint64_t)(v13 - v18) < 0x20) {
        goto LABEL_36;
      }
      uint64_t v22 = (v21 >> 3) + 1;
      uint64_t v23 = &v18[8 * v14 - 16];
      uint64_t v24 = v10 - 16;
      uint64_t v25 = v22 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v26 = *(_OWORD *)v24;
        *(v23 - 1) = *((_OWORD *)v24 - 1);
        _OWORD *v23 = v26;
        v23 -= 2;
        v24 -= 32;
        v25 -= 4;
      }
      while (v25);
      v19 -= v22 & 0x3FFFFFFFFFFFFFFCLL;
      v10 -= 8 * (v22 & 0x3FFFFFFFFFFFFFFCLL);
      if (v22 != (v22 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_36:
        do
        {
          unsigned int v27 = (unint64_t ***)*((void *)v10 - 1);
          v10 -= 8;
          *--unsigned int v19 = v27;
        }
        while (v10 != v13);
        unsigned int v13 = *(char **)(a1 + 7560);
      }
    }
    *(void *)(a1 + 7560) = v19;
    *(void *)(a1 + 7568) = v12;
    *(void *)(a1 + 7576) = v20;
    if (v13) {
      operator delete(v13);
    }
  }
  else
  {
    *(void *)unsigned int v10 = a2;
    BOOL v12 = v10 + 8;
  }
  *(void *)(a1 + 7568) = v12;

  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 7528));
}

void sub_242A0BFCC(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void AGX::Device<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::allocateBindlessConstantSampler(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  *a1 = 0;
  a1[1] = 0;
  int v6 = (os_unfair_lock_s *)(a2 + 7528);
  os_unfair_lock_lock((os_unfair_lock_t)(a2 + 7528));
  unsigned int v7 = (uint64_t **)(a2 + 7600);
  unsigned int v8 = *(std::__shared_weak_count **)(a2 + 7600);
  if (v8)
  {
    unint64_t v9 = (std::__shared_weak_count *)(a2 + 7600);
    do
    {
      BOOL v10 = AGX::SamplerDescriptor::operator<((unsigned __int16 *)&v8[1].__shared_owners_, (unsigned __int16 *)a3);
      p_uint64_t shared_owners = (std::__shared_weak_count **)&v8->__shared_owners_;
      if (!v10)
      {
        p_uint64_t shared_owners = (std::__shared_weak_count **)v8;
        unint64_t v9 = v8;
      }
      unsigned int v8 = *p_shared_owners;
    }
    while (*p_shared_owners);
    if (v9 == (std::__shared_weak_count *)v7
      || AGX::SamplerDescriptor::operator<((unsigned __int16 *)a3, (unsigned __int16 *)&v9[1].__shared_owners_))
    {
      unsigned int v8 = 0;
    }
    else
    {
      shared_weak_owners = (std::__shared_weak_count *)v9[4].__shared_weak_owners_;
      if (shared_weak_owners && (unsigned int v13 = std::__shared_weak_count::lock(shared_weak_owners)) != 0)
      {
        unsigned int v8 = v13;
        uint64_t shared_owners = v9[4].__shared_owners_;
        *a1 = shared_owners;
        a1[1] = (uint64_t)v13;
        if (shared_owners) {
          goto LABEL_32;
        }
      }
      else
      {
        unsigned int v8 = 0;
        *a1 = 0;
        a1[1] = 0;
      }
    }
  }
  unint64_t v15 = operator new(0x90uLL);
  v15[1] = 0;
  v15[2] = 0;
  void *v15 = &unk_26F851AC0;
  *a1 = AGX::SamplerGen3<AGX::HAL200::Classes,AGX::HAL200::Encoders>::SamplerGen3((uint64_t)(v15 + 3), a2, 0, a3, *(_DWORD *)(a2 + 7584));
  a1[1] = (uint64_t)v15;
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  uint64_t v16 = *v7;
  unint64_t v17 = (uint64_t **)(a2 + 7600);
  if (*v7)
  {
    while (1)
    {
      while (1)
      {
        unint64_t v17 = (uint64_t **)v16;
        unsigned int v18 = (unsigned __int16 *)(v16 + 4);
        if (!AGX::SamplerDescriptor::operator<((unsigned __int16 *)a3, (unsigned __int16 *)v16 + 16)) {
          break;
        }
        uint64_t v16 = *v17;
        unsigned int v7 = v17;
        if (!*v17) {
          goto LABEL_23;
        }
      }
      if (!AGX::SamplerDescriptor::operator<(v18, (unsigned __int16 *)a3)) {
        break;
      }
      unsigned int v7 = v17 + 1;
      uint64_t v16 = v17[1];
      if (!v16) {
        goto LABEL_23;
      }
    }
    unsigned int v19 = (char *)v17;
    uint64_t v25 = *a1;
    uint64_t v24 = a1[1];
    if (!v24) {
      goto LABEL_30;
    }
  }
  else
  {
LABEL_23:
    unsigned int v19 = (char *)operator new(0x78uLL);
    long long v20 = *(_OWORD *)(a3 + 16);
    *((_OWORD *)v19 + 2) = *(_OWORD *)a3;
    *((_OWORD *)v19 + 3) = v20;
    *((_OWORD *)v19 + 4) = *(_OWORD *)(a3 + 32);
    unint64_t v21 = (std::string *)(v19 + 80);
    if (*(char *)(a3 + 71) < 0)
    {
      std::string::__init_copy_ctor_external(v21, *(const std::string::value_type **)(a3 + 48), *(void *)(a3 + 56));
    }
    else
    {
      *(_OWORD *)&v21->__r_.__value_.__l.__data_ = *(_OWORD *)(a3 + 48);
      *((void *)v19 + 12) = *(void *)(a3 + 64);
    }
    *((void *)v19 + 13) = 0;
    *((void *)v19 + 14) = 0;
    *(void *)unsigned int v19 = 0;
    *((void *)v19 + 1) = 0;
    *((void *)v19 + 2) = v17;
    unint64_t *v7 = (uint64_t *)v19;
    uint64_t v22 = **(void **)(a2 + 7592);
    uint64_t v23 = (uint64_t *)v19;
    if (v22)
    {
      *(void *)(a2 + 7592) = v22;
      uint64_t v23 = *v7;
    }
    std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a2 + 7600), v23);
    ++*(void *)(a2 + 7608);
    uint64_t v25 = *a1;
    uint64_t v24 = a1[1];
    if (!v24) {
      goto LABEL_30;
    }
  }
  atomic_fetch_add_explicit((atomic_ullong *volatile)(v24 + 16), 1uLL, memory_order_relaxed);
LABEL_30:
  long long v26 = (std::__shared_weak_count *)*((void *)v19 + 14);
  *((void *)v19 + 13) = v25;
  *((void *)v19 + 14) = v24;
  if (v26) {
    std::__shared_weak_count::__release_weak(v26);
  }
LABEL_32:

  os_unfair_lock_unlock(v6);
}

void sub_242A0C25C(_Unwind_Exception *a1)
{
  operator delete(v3);
  os_unfair_lock_unlock(v1);
  std::shared_ptr<AGX::HAL200::IntersectionPipelineSets>::~shared_ptr[abi:nn180100](v2);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<AGX::HAL200::Sampler>::__on_zero_shared(uint64_t a1)
{
  if (!*(_DWORD *)(a1 + 120) || *(unsigned char *)(a1 + 136))
  {
    if ((*(char *)(a1 + 95) & 0x80000000) == 0) {
      return;
    }
    goto LABEL_10;
  }
  uint64_t v2 = (os_unfair_lock_s *)(*(void *)(a1 + 128) + 40);
  os_unfair_lock_lock(v2);
  uint64_t v3 = *(void *)(a1 + 128);
  uint64_t v4 = *(unsigned int *)(a1 + 120);
  uint64_t v5 = *(void *)(v3 + 32);
  int v6 = (int *)MEMORY[0x263F4B188];
  *(_DWORD *)(*(void *)(*(void *)(*(void *)(v3 + 24) + 8) + (int)*MEMORY[0x263F4B188] + 24) + 32 * v4) = v5;
  uint64_t v7 = v5;
  atomic_compare_exchange_strong((atomic_ullong *volatile)(v3 + 32), (unint64_t *)&v7, (v5 & 0xFFFFFFFF00000000 | v4) + 0x100000000);
  if (v7 != v5)
  {
    uint64_t v8 = v7;
    do
    {
      *(_DWORD *)(*(void *)(*(void *)(*(void *)(v3 + 24) + 8) + *v6 + 24) + 32 * v4) = v7;
      atomic_compare_exchange_strong((atomic_ullong *volatile)(v3 + 32), (unint64_t *)&v8, (v7 & 0xFFFFFFFF00000000 | v4) + 0x100000000);
      BOOL v9 = v8 == v7;
      uint64_t v7 = v8;
    }
    while (!v9);
  }
  os_unfair_lock_unlock(v2);
  if (*(char *)(a1 + 95) < 0)
  {
LABEL_10:
    BOOL v10 = *(void **)(a1 + 72);
    operator delete(v10);
  }
}

void std::__shared_ptr_emplace<AGX::HAL200::Sampler>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F851AC0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x24566ED90);
}

void std::__shared_ptr_emplace<AGX::HAL200::Sampler>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F851AC0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t areDriverUberShadersDisabled(void)
{
  {
    Boolean keyExistsAndHasValidFormat = 0;
    CFAllocatorRef v1 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
    CFStringRef v2 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x263EFFB08], "DisableDriverUberVariants", 0x8000100u);
    if (v2)
    {
      CFStringRef v3 = CFStringCreateWithCString(v1, "com.apple.Metal", 0x8000100u);
      if (v3)
      {
        int AppBooleanValue = CFPreferencesGetAppBooleanValue(v2, v3, &keyExistsAndHasValidFormat);
        CFRelease(v2);
        CFRelease(v3);
        if (keyExistsAndHasValidFormat) {
          BOOL v5 = AppBooleanValue == 0;
        }
        else {
          BOOL v5 = 1;
        }
        char v6 = !v5;
        goto LABEL_14;
      }
      CFRelease(v2);
    }
    char v6 = 0;
LABEL_14:
    areDriverUberShadersDisabled(void)::disableUberVariants = v6;
  }
  return areDriverUberShadersDisabled(void)::disableUberVariants;
}

void sub_242A0C51C(_Unwind_Exception *a1)
{
}

uint64_t AGX::Device<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::findOrCreateDriverProgramVariant<AGX::HAL200::BackgroundObjectProgramVariant,AGX::BackgroundObjectProgramKey,AGX::HAL200::BackgroundObjectProgram>(uint64_t a1, os_unfair_lock_s *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v14 = 0;
  unint64_t v15 = &v14;
  uint64_t v16 = 0x2020000000;
  uint64_t v17 = 0;
  char v13 = 0;
  uint64_t v7 = (dispatch_group_t *)AGX::Program<AGX::HAL200::BackgroundObjectProgramVariant,AGX::BackgroundObjectProgramKey,AGX::HAL200::IndirectArgumentLayout,AGXG17FamilyIndirectArgumentBufferLayout>::getOrCreateVariantEntry(a2, a3, &v13);
  uint64_t v8 = v7;
  if (v13)
  {
    if (*(_DWORD *)*MEMORY[0x263F4B1E8]) {
      IOGPUDeviceTraceEvent();
    }
    uint64_t v9 = *(void *)(a1 + 6008);
    v12[0] = MEMORY[0x263EF8330];
    v12[1] = 3221225472;
    v12[2] = ___ZN3AGX6DeviceINS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE32findOrCreateDriverProgramVariantINS1_30BackgroundObjectProgramVariantENS_26BackgroundObjectProgramKeyENS1_23BackgroundObjectProgramEEEPT_PT1_RKT0_P7NSArrayIPU27objcproto16MTLBinaryArchive11objc_objectE_block_invoke;
    v12[3] = &unk_26516E8E0;
    v12[4] = &v14;
    v12[5] = a1;
    v12[6] = a3;
    v12[7] = v8;
    AGX::Compiler::compileProgram<AGX::BackgroundObjectProgramKey>(v9, a3, a4, (uint64_t)v12, 0);
    dispatch_group_t v10 = (dispatch_group_t)v15[3];
    if (v10) {
      goto LABEL_5;
    }
  }
  else
  {
    dispatch_group_wait(*v7, 0xFFFFFFFFFFFFFFFFLL);
    dispatch_group_t v10 = v8[1];
    v15[3] = (uint64_t)v10;
    if (v10)
    {
LABEL_5:
      _Block_object_dispose(&v14, 8);
      return (uint64_t)v10;
    }
  }
  uint64_t result = MTLReleaseAssertionFailure();
  __break(1u);
  return result;
}

void sub_242A0C698(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 64), 8);
  _Unwind_Resume(a1);
}

uint64_t AGX::Program<AGX::HAL200::BackgroundObjectProgramVariant,AGX::BackgroundObjectProgramKey,AGX::HAL200::IndirectArgumentLayout,AGXG17FamilyIndirectArgumentBufferLayout>::getOrCreateVariantEntry(os_unfair_lock_s *a1, uint64_t a2, unsigned char *a3)
{
  *a3 = 0;
  char v6 = a1 + 222;
  os_unfair_lock_lock(a1 + 222);
  uint64_t v7 = VectorMap<AGX::BackgroundObjectProgramKey,AGX::ProgramVariantEntry<AGX::HAL200::BackgroundObjectProgramVariant>,4u>::operator[]((uint64_t)a1, a2);
  uint64_t v8 = v7;
  if (!*(void *)v7)
  {
    unint64_t v11 = dispatch_group_create();
    *(void *)uint64_t v8 = v11;
LABEL_7:
    dispatch_group_enter(v11);
    *a3 = 1;
    goto LABEL_8;
  }
  if (*(unsigned char *)(v7 + 40))
  {
    dispatch_group_t v10 = (void *)(v7 + 8);
    uint64_t v9 = *(void *)(v7 + 8);
    if (v9) {
      (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
    }
    *dispatch_group_t v10 = 0;
    *(void *)(v8 + 16) = 0;

    *(void *)(v8 + 24) = 0;
    *(void *)(v8 + 32) = 0;
    *(unsigned char *)(v8 + 40) = 0;
    unint64_t v11 = *(NSObject **)v8;
    goto LABEL_7;
  }
LABEL_8:
  os_unfair_lock_unlock(v6);
  return v8;
}

void sub_242A0C78C(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void ___ZN3AGX6DeviceINS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE32findOrCreateDriverProgramVariantINS1_30BackgroundObjectProgramVariantENS_26BackgroundObjectProgramKeyENS1_23BackgroundObjectProgramEEEPT_PT1_RKT0_P7NSArrayIPU27objcproto16MTLBinaryArchive11objc_objectE_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a3) {
    operator new();
  }
  BOOL v5 = "MTLCompilerErrorTimeout";
  char v6 = "UnknownErrorCode";
  if (a3 == 2) {
    char v6 = "MTLCompilerErrorCompilationError";
  }
  if (a3 != 3) {
    BOOL v5 = v6;
  }
  if (a3 == 1) {
    uint64_t v7 = "MTLCompilerErrorFatalError";
  }
  else {
    uint64_t v7 = v5;
  }
  unint64_t v12 = 0;
  char v13 = 0;
  AGX::BackgroundObjectProgramKey::serialize(*(std::vector<unsigned int> **)(a1 + 48), (unsigned int **)&v13, &v12);
  uint64_t v8 = a4;
  uint64_t v9 = v7;
  unint64_t v10 = v12;
  unint64_t v11 = v13;
  _ZZZZN3AGX6DeviceINS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE49createTGOptimizationDriverShaderAndBufferIfNeededEP18AGXG17FamilyDeviceEUb_EUb_ENKUlvE_clB14_AGX__Crashed_Ev();
}

void sub_242A0C980(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  AGX::ProgramBindingRemap<AGX::HAL200::Encoders,AGX::HAL200::Classes>::~ProgramBindingRemap((uint64_t)va);
  MEMORY[0x24566ED90](v4, 0x10F3C40F3DF5E69);
  _Unwind_Resume(a1);
}

void AGX::Compiler::compileProgram<AGX::BackgroundObjectProgramKey>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v48 = *MEMORY[0x263EF8340];
  uint64_t v10 = *(void *)(a1 + 8);
  int v12 = *(_DWORD *)(a2 + 68);
  int v11 = *(_DWORD *)(a2 + 72);
  int v13 = *(_DWORD *)(a2 + 40);
  int v14 = *(_DWORD *)(a2 + 44);
  int v16 = *(_DWORD *)(a2 + 48);
  int v15 = *(_DWORD *)(a2 + 52);
  int v17 = *(_DWORD *)(a2 + 56);
  int v18 = *(_DWORD *)(a2 + 60);
  int v19 = *(_DWORD *)(a2 + 64);
  uint64_t v20 = *(void *)(a2 + 80);
  if ((v20 != 0x10000000000 || v13 | v14 | v11 & 0xFFFF0FFF | v16 | v15 | v17 | v18 | v19 | v12)
    && (v14 | v13 | v11 | v16 | v15 | v17 | v18 | v19 | v12 || v20 != 0))
  {
    uint64_t v10 = 0;
  }
  uint64_t v22 = objc_opt_new();
  [v22 setSync:a5 ^ 1u];
  [v22 setPipelineCache:v10];
  [v22 setBinaryArchives:a3];
  uint64_t v35 = MEMORY[0x263EF8330];
  uint64_t v36 = a4;
  unint64_t v37 = 0;
  uint64_t v38 = 0;
  AGX::BackgroundObjectProgramKey::serialize((std::vector<unsigned int> *)a2, (unsigned int **)&v38, &v37);
  uint64_t v23 = dispatch_data_create(v38, v37, 0, 0);
  objc_msgSend(v22, "setDriverKeyData:", v23, v35, 3221225472, ___ZN3AGX8Compiler14compileProgramINS_26BackgroundObjectProgramKeyEEEvRKT_P7NSArrayIPU27objcproto16MTLBinaryArchive11objc_objectEU13block_pointerFvRK20AGCDeserializedReply16MTLCompilerErrorP8NSStringEb_block_invoke, &unk_26516F7C0, v36);
  if ([v22 airScript])
  {
    uint64_t v24 = [v22 airScript];
    long long v46 = 0uLL;
    v47[0] = 0;
    *(void *)&long long v46 = dispatch_data_create_map(v24, (const void **)&v46 + 1, v47);
    uint64_t v25 = *((void *)&v46 + 1);
    uint64_t v26 = **((_DWORD **)&v46 + 1);
    CC_SHA256_Init(&c);
    (**(void (***)(uint64_t, CC_SHA256_CTX *))a2)(a2, &c);
    *(void *)leuint64_t n = 0;
    uintptr_t data = 0;
    if (AGX::GetSerializedVertexFormat((AGX *)(v25 + v26), &data, (size_t *)len, v27, v28))
    {
      int8x8_t v29 = data;
      CC_SHA256_Update(&c, data, len[0]);
      free(v29);
    }
    CC_SHA256_Final(md, &c);
    dispatch_release((dispatch_object_t)v46);
    long long v46 = *(_OWORD *)md;
    *(_OWORD *)uint64_t v47 = v43;
    [v22 setVendorPluginFunctionId:&v46];
  }
  *(void *)c.count = MEMORY[0x263EF8330];
  *(void *)c.hash = 3221225472;
  *(void *)&c.hash[2] = ___ZN3AGX8Compiler14compileProgramINS_26BackgroundObjectProgramKeyE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke;
  *(void *)&c.hash[4] = &unk_26516F810;
  *(void *)&c.hash[6] = v22;
  *(void *)c.wbuf = &v35;
  if ([v22 function])
  {
    uint64_t v30 = mach_absolute_time();
    int32x2_t v31 = *(void **)a1;
    *(void *)md = MEMORY[0x263EF8330];
    *(void *)&md[8] = 3221225472;
    *(void *)&long long v43 = ___ZN3AGX8Compiler14compileProgramINS_26BackgroundObjectProgramKeyE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke_4;
    *((void *)&v43 + 1) = &unk_26516F860;
    p_CC_SHA256_CTX c = &c;
    uint64_t v45 = v30;
    [v31 compileFunctionRequest:v22 completionHandler:md];
  }
  else
  {
    if ([v22 frameworkData] || objc_msgSend(v22, "pipelineOptions")) {
      AGX::Compiler::compileProgram<AGX::UserIntersectionProgramKey,AGCReplyArray>(AGX::UserIntersectionProgramKey const&,MTLCompileFunctionRequestData *,void({block_pointer})(AGCReplyArray const&,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,MTLCompilerError,NSString *,unsigned long long))::{lambda(void)#1}::operator()[abi:[AGX] Failed assertion __requestData.frameworkData && _requestData.pipelineOptions_]();
    }
    *(void *)md = MEMORY[0x263EF8330];
    *(void *)&md[8] = 3221225472;
    *(void *)&long long v43 = ___ZN3AGX8Compiler14compileProgramINS_26BackgroundObjectProgramKeyE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke_3;
    *((void *)&v43 + 1) = &unk_26516F838;
    p_CC_SHA256_CTX c = &c;
    BOOL v32 = objc_msgSend((id)objc_msgSend(v22, "binaryArchives"), "count") == 0;
    uint64_t v33 = *(void **)a1;
    uint64_t v34 = [v22 driverKeyData];
    if (v32) {
      objc_msgSend(v33, "compileRequest:pipelineCache:sync:completionHandler:", v34, objc_msgSend(v22, "pipelineCache"), objc_msgSend(v22, "sync"), md);
    }
    else {
      objc_msgSend(v33, "compileRequest:binaryArchives:failOnBinaryArchiveMiss:pipelineCache:sync:completionHandler:", v34, objc_msgSend(v22, "binaryArchives"), 0, objc_msgSend(v22, "pipelineCache"), objc_msgSend(v22, "sync"), md);
    }
  }
  dispatch_release(v23);
}

void sub_242A0CDE4(_Unwind_Exception *a1)
{
  dispatch_release(*(dispatch_object_t *)(v1 - 128));
  _Unwind_Resume(a1);
}

uint64_t ___ZN3AGX8Compiler14compileProgramINS_26BackgroundObjectProgramKeyEEEvRKT_P7NSArrayIPU27objcproto16MTLBinaryArchive11objc_objectEU13block_pointerFvRK20AGCDeserializedReply16MTLCompilerErrorP8NSStringEb_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a5) {
    AGX::Compiler::compileProgram<AGX::UserIntersectionProgramKey,AGCReplyArray>(AGX::UserIntersectionProgramKey const&,MTLCompileFunctionRequestData *,void({block_pointer})(AGCReplyArray const&,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,MTLCompilerError,NSString *,unsigned long long))::{lambda(void)#1}::operator()[abi:[AGX] Failed assertion __requestData.frameworkData && _requestData.pipelineOptions_]();
  }
  BOOL v5 = *(uint64_t (**)(void))(*(void *)(a1 + 32) + 16);

  return v5();
}

void ___ZN3AGX8Compiler14compileProgramINS_26BackgroundObjectProgramKeyE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  v14[0] = MEMORY[0x263EF8330];
  v14[1] = 3221225472;
  int v15 = ___ZN3AGX8Compiler14compileProgramINS_26BackgroundObjectProgramKeyE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke_2;
  int v16 = &unk_26516F7E8;
  uint64_t v17 = a9;
  uint64_t v18 = a3;
  uint64_t v19 = a4;
  uint64_t v20 = a5;
  uint64_t v21 = a6;
  uint64_t v22 = a7;
  uint64_t v12 = a1 + 32;
  uint64_t v10 = *(void **)(a1 + 32);
  uint64_t v11 = *(void *)(v12 + 8);
  uint64_t v23 = a8;
  uint64_t v24 = v11;
  uint64_t v25 = a2;
  uint64_t v26 = a10;
  if (objc_msgSend(v10, "sync", MEMORY[0x263EF8330], 3221225472))
  {
    v15(v14);
  }
  else
  {
    global_queue = dispatch_get_global_queue(0, 0);
    dispatch_async(global_queue, v14);
  }
}

uint64_t ___ZN3AGX8Compiler14compileProgramINS_26BackgroundObjectProgramKeyE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke_3(uint64_t a1, void *a2)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), *a2);
}

uint64_t ___ZN3AGX8Compiler14compileProgramINS_26BackgroundObjectProgramKeyE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke_4(uint64_t a1, void *a2)
{
  if (getTimebaseInfo(void)::once != -1) {
    dispatch_once(&getTimebaseInfo(void)::once, &__block_literal_global_7474);
  }
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), *a2);
}

void ___ZN3AGX8Compiler14compileProgramINS_26BackgroundObjectProgramKeyE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke_2(void *a1)
{
  size_t size_ptr = 0;
  buffer_ptr = 0;
  uint64_t v2 = a1[12];
  AGCDeserializedReply::AGCDeserializedReply((AGCDeserializedReply *)v5);
  if (v2 || (uint64_t v4 = a1[5]) == 0)
  {
    CFStringRef v3 = 0;
  }
  else
  {
    CFStringRef v3 = dispatch_data_create_map(v4, (const void **)&buffer_ptr, &size_ptr);
    AGCDeserializedReply::deserialize((AGCDeserializedReply *)v5, buffer_ptr, size_ptr);
  }
  (*(void (**)(void, unsigned char *))(a1[11] + 16))(a1[11], v5);
  if (v3) {
    dispatch_release(v3);
  }
  AGCDeserializedReply::~AGCDeserializedReply((AGCDeserializedReply *)v5);
}

void sub_242A0D0CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  AGCDeserializedReply::~AGCDeserializedReply((AGCDeserializedReply *)va);
  _Unwind_Resume(a1);
}

void AGX::HAL200::BackgroundObjectProgramVariant::~BackgroundObjectProgramVariant(AGX::HAL200::BackgroundObjectProgramVariant *this)
{
  *(void *)this = &unk_26F852938;
  AGX::ProgramVariantESLState<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ArgumentTable,true,7ul>::~ProgramVariantESLState((uint64_t *)this + 168);
  AGX::ProgramVariant<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::BackgroundObjectArgumentTable,false,false>::~ProgramVariant((unint64_t)this);

  JUMPOUT(0x24566ED90);
}

{
  uint64_t vars8;

  *(void *)this = &unk_26F852938;
  AGX::ProgramVariantESLState<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ArgumentTable,true,7ul>::~ProgramVariantESLState((uint64_t *)this + 168);

  AGX::ProgramVariant<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::BackgroundObjectArgumentTable,false,false>::~ProgramVariant((unint64_t)this);
}

unint64_t AGX::ProgramVariant<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::BackgroundObjectArgumentTable,false,false>::~ProgramVariant(unint64_t a1)
{
  *(void *)a1 = &unk_26F853008;
  if (*(void *)(a1 + 672))
  {
    uint64_t v2 = *(void *)(a1 + 680);
    CFStringRef v3 = *(NSObject **)(v2 + 16);
    uint64_t v28 = MEMORY[0x263EF8330];
    uint64_t v29 = 3221225472;
    uint64_t v30 = ___ZN3AGX4HeapILb1EE14deallocateImplERKNS1_10AllocationE_block_invoke;
    int32x2_t v31 = &__block_descriptor_48_e5_v8__0l;
    uint64_t v32 = v2;
    unint64_t v33 = a1 + 648;
    dispatch_sync(v3, &v28);
    *(_OWORD *)(a1 + 673) = 0u;
    *(_OWORD *)(a1 + 664) = 0u;
    *(_OWORD *)(a1 + 648) = 0u;
  }
  if (*(void *)(a1 + 720))
  {
    uint64_t v4 = *(void *)(a1 + 728);
    BOOL v5 = *(NSObject **)(v4 + 16);
    uint64_t v28 = MEMORY[0x263EF8330];
    uint64_t v29 = 3221225472;
    uint64_t v30 = ___ZN3AGX4HeapILb1EE14deallocateImplERKNS1_10AllocationE_block_invoke;
    int32x2_t v31 = &__block_descriptor_48_e5_v8__0l;
    uint64_t v32 = v4;
    unint64_t v33 = a1 + 696;
    dispatch_sync(v5, &v28);
    *(_OWORD *)(a1 + 721) = 0u;
    *(_OWORD *)(a1 + 712) = 0u;
    *(_OWORD *)(a1 + 696) = 0u;
  }
  if (*(void *)(a1 + 768))
  {
    uint64_t v6 = *(void *)(a1 + 776);
    uint64_t v7 = *(NSObject **)(v6 + 16);
    uint64_t v28 = MEMORY[0x263EF8330];
    uint64_t v29 = 3221225472;
    uint64_t v30 = ___ZN3AGX4HeapILb1EE14deallocateImplERKNS1_10AllocationE_block_invoke;
    int32x2_t v31 = &__block_descriptor_48_e5_v8__0l;
    uint64_t v32 = v6;
    unint64_t v33 = a1 + 744;
    dispatch_sync(v7, &v28);
    *(_OWORD *)(a1 + 769) = 0u;
    *(_OWORD *)(a1 + 760) = 0u;
    *(_OWORD *)(a1 + 744) = 0u;
  }
  uint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    os_unfair_lock_lock((os_unfair_lock_t)(v8 + 7952));
    std::__hash_table<std::__hash_value_type<unsigned long,AGX::FunctionCompiledEventInfo>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,AGX::FunctionCompiledEventInfo>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,AGX::FunctionCompiledEventInfo>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,AGX::FunctionCompiledEventInfo>>>::__erase_unique<unsigned long>((uint64_t *)(v8 + 7960), a1);
    os_unfair_lock_unlock((os_unfair_lock_t)(v8 + 7952));
  }
  if ((*(char *)(a1 + 1343) & 0x80000000) == 0)
  {
    uint64_t v9 = *(void **)(a1 + 1296);
    if (!v9) {
      goto LABEL_12;
    }
    goto LABEL_11;
  }
  operator delete(*(void **)(a1 + 1320));
  uint64_t v9 = *(void **)(a1 + 1296);
  if (v9)
  {
LABEL_11:
    *(void *)(a1 + 1304) = v9;
    operator delete(v9);
  }
LABEL_12:
  uint64_t v10 = *(void *)(a1 + 1272);
  if (v10)
  {
    uint64_t v11 = *(void *)(a1 + 1280);
    uint64_t v12 = *(void **)(a1 + 1272);
    if (v11 != v10)
    {
      do
      {
        if (*(char *)(v11 - 1) < 0) {
          operator delete(*(void **)(v11 - 24));
        }
        v11 -= 24;
      }
      while (v11 != v10);
      uint64_t v12 = *(void **)(a1 + 1272);
    }
    *(void *)(a1 + 1280) = v10;
    operator delete(v12);
  }
  std::__tree<std::__value_type<AGX::scissorMapInfo<AGX::HAL200::Encoders>,unsigned int>,std::__map_value_compare<AGX::scissorMapInfo<AGX::HAL200::Encoders>,std::__value_type<AGX::scissorMapInfo<AGX::HAL200::Encoders>,unsigned int>,std::less<AGX::scissorMapInfo<AGX::HAL200::Encoders>>,true>,std::allocator<std::__value_type<AGX::scissorMapInfo<AGX::HAL200::Encoders>,unsigned int>>>::destroy(*(void **)(a1 + 1160));
  uint64_t v13 = *(void *)(a1 + 1120);
  if (v13)
  {
    uint64_t v14 = *(void *)(a1 + 1128);
    int v15 = *(void **)(a1 + 1120);
    if (v14 != v13)
    {
      do
      {
        int v16 = *(std::__shared_weak_count **)(v14 - 8);
        if (v16 && !atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
        }
        v14 -= 16;
      }
      while (v14 != v13);
      int v15 = *(void **)(a1 + 1120);
    }
    *(void *)(a1 + 1128) = v13;
    operator delete(v15);
  }
  uint64_t v17 = *(void **)(a1 + 1096);
  if (v17)
  {
    *(void *)(a1 + 1104) = v17;
    operator delete(v17);
  }
  uint64_t v18 = *(void **)(a1 + 1072);
  if (v18)
  {
    *(void *)(a1 + 1080) = v18;
    operator delete(v18);
  }
  if (*(char *)(a1 + 991) < 0)
  {
    operator delete(*(void **)(a1 + 968));
    if ((*(char *)(a1 + 599) & 0x80000000) == 0)
    {
LABEL_37:
      if ((*(char *)(a1 + 575) & 0x80000000) == 0) {
        goto LABEL_38;
      }
LABEL_58:
      operator delete(*(void **)(a1 + 552));
      if ((*(char *)(a1 + 551) & 0x80000000) == 0) {
        goto LABEL_39;
      }
      goto LABEL_59;
    }
  }
  else if ((*(char *)(a1 + 599) & 0x80000000) == 0)
  {
    goto LABEL_37;
  }
  operator delete(*(void **)(a1 + 576));
  if (*(char *)(a1 + 575) < 0) {
    goto LABEL_58;
  }
LABEL_38:
  if ((*(char *)(a1 + 551) & 0x80000000) == 0) {
    goto LABEL_39;
  }
LABEL_59:
  operator delete(*(void **)(a1 + 528));
LABEL_39:
  std::__tree<std::__value_type<AGX::scissorMapInfo<AGX::HAL200::Encoders>,unsigned int>,std::__map_value_compare<AGX::scissorMapInfo<AGX::HAL200::Encoders>,std::__value_type<AGX::scissorMapInfo<AGX::HAL200::Encoders>,unsigned int>,std::less<AGX::scissorMapInfo<AGX::HAL200::Encoders>>,true>,std::allocator<std::__value_type<AGX::scissorMapInfo<AGX::HAL200::Encoders>,unsigned int>>>::destroy(*(void **)(a1 + 272));
  uint64_t v19 = *(void **)(a1 + 240);
  if (v19)
  {
    *(void *)(a1 + 248) = v19;
    operator delete(v19);
  }
  uint64_t v20 = *(void **)(a1 + 216);
  if (v20)
  {
    *(void *)(a1 + 224) = v20;
    operator delete(v20);
  }
  uint64_t v21 = *(void **)(a1 + 168);
  if (v21)
  {
    *(void *)(a1 + 176) = v21;
    operator delete(v21);
  }
  uint64_t v22 = *(void **)(a1 + 144);
  if (v22)
  {
    *(void *)(a1 + 152) = v22;
    operator delete(v22);
  }
  uint64_t v23 = *(void **)(a1 + 120);
  if (v23)
  {
    *(void *)(a1 + 128) = v23;
    operator delete(v23);
  }
  uint64_t v24 = *(void **)(a1 + 96);
  if (v24)
  {
    *(void *)(a1 + 104) = v24;
    operator delete(v24);
  }
  uint64_t v25 = *(void **)(a1 + 72);
  if (v25)
  {
    *(void *)(a1 + 80) = v25;
    operator delete(v25);
  }
  uint64_t v26 = *(void **)(a1 + 48);
  if (v26)
  {
    *(void *)(a1 + 56) = v26;
    operator delete(v26);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<unsigned long,AGX::FunctionCompiledEventInfo>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,AGX::FunctionCompiledEventInfo>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,AGX::FunctionCompiledEventInfo>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,AGX::FunctionCompiledEventInfo>>>::__erase_unique<unsigned long>(uint64_t *a1, unint64_t a2)
{
  int8x8_t v2 = (int8x8_t)a1[1];
  if (v2)
  {
    uint8x8_t v3 = (uint8x8_t)vcnt_s8(v2);
    v3.i16[0] = vaddlv_u8(v3);
    if (v3.u32[0] > 1uLL)
    {
      unint64_t v4 = a2;
      if (*(void *)&v2 <= a2) {
        unint64_t v4 = a2 % *(void *)&v2;
      }
    }
    else
    {
      unint64_t v4 = (*(void *)&v2 - 1) & a2;
    }
    uint64_t v5 = *a1;
    uint64_t v6 = *(uint64_t ***)(*a1 + 8 * v4);
    if (v6)
    {
      uint64_t v7 = *v6;
      if (v7)
      {
        uint64_t v8 = *(void *)&v2 - 1;
        if (v3.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v9 = v7[1];
            if (v9 == a2)
            {
              if (v7[2] == a2) {
                goto LABEL_22;
              }
            }
            else if ((v9 & v8) != v4)
            {
              return;
            }
            uint64_t v7 = (uint64_t *)*v7;
            if (!v7) {
              return;
            }
          }
        }
        do
        {
          unint64_t v10 = v7[1];
          if (v10 == a2)
          {
            if (v7[2] == a2)
            {
LABEL_22:
              if (v3.u32[0] > 1uLL)
              {
                if (*(void *)&v2 <= a2) {
                  a2 %= *(void *)&v2;
                }
              }
              else
              {
                a2 &= v8;
              }
              uint64_t v11 = *(uint64_t **)(v5 + 8 * a2);
              do
              {
                uint64_t v12 = v11;
                uint64_t v11 = (uint64_t *)*v11;
              }
              while (v11 != v7);
              if (v12 == a1 + 2) {
                goto LABEL_39;
              }
              unint64_t v13 = v12[1];
              if (v3.u32[0] > 1uLL)
              {
                if (v13 >= *(void *)&v2) {
                  v13 %= *(void *)&v2;
                }
              }
              else
              {
                v13 &= v8;
              }
              if (v13 != a2)
              {
LABEL_39:
                if (!*v7) {
                  goto LABEL_40;
                }
                unint64_t v14 = *(void *)(*v7 + 8);
                if (v3.u32[0] > 1uLL)
                {
                  if (v14 >= *(void *)&v2) {
                    v14 %= *(void *)&v2;
                  }
                }
                else
                {
                  v14 &= v8;
                }
                if (v14 != a2) {
LABEL_40:
                }
                  *(void *)(v5 + 8 * a2) = 0;
              }
              uint64_t v15 = *v7;
              if (*v7)
              {
                unint64_t v16 = *(void *)(v15 + 8);
                if (v3.u32[0] > 1uLL)
                {
                  if (v16 >= *(void *)&v2) {
                    v16 %= *(void *)&v2;
                  }
                }
                else
                {
                  v16 &= v8;
                }
                if (v16 != a2)
                {
                  *(void *)(*a1 + 8 * v16) = v12;
                  uint64_t v15 = *v7;
                }
              }
              *uint64_t v12 = v15;
              uint64_t *v7 = 0;
              --a1[3];
              operator delete(v7);
              return;
            }
          }
          else
          {
            if (v10 >= *(void *)&v2) {
              v10 %= *(void *)&v2;
            }
            if (v10 != v4) {
              return;
            }
          }
          uint64_t v7 = (uint64_t *)*v7;
        }
        while (v7);
      }
    }
  }
}

void CompileStatistics::~CompileStatistics(CompileStatistics *this)
{
  if ((*((char *)this + 167) & 0x80000000) == 0)
  {
    int8x8_t v2 = (void *)*((void *)this + 15);
    if (!v2) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  operator delete(*((void **)this + 18));
  int8x8_t v2 = (void *)*((void *)this + 15);
  if (v2)
  {
LABEL_3:
    *((void *)this + 16) = v2;
    operator delete(v2);
  }
LABEL_4:
  uint64_t v3 = *((void *)this + 12);
  if (v3)
  {
    uint64_t v4 = *((void *)this + 13);
    uint64_t v5 = (void *)*((void *)this + 12);
    if (v4 != v3)
    {
      do
      {
        if (*(char *)(v4 - 1) < 0) {
          operator delete(*(void **)(v4 - 24));
        }
        v4 -= 24;
      }
      while (v4 != v3);
      uint64_t v5 = (void *)*((void *)this + 12);
    }
    *((void *)this + 13) = v3;
    operator delete(v5);
  }
}

void *AGX::ProgramVariant<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::BackgroundObjectArgumentTable,false,false>::GlobalBindingTableInfo::~GlobalBindingTableInfo(void *a1)
{
  int8x8_t v2 = (void *)a1[5];
  if (v2)
  {
    a1[6] = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)a1[2];
  if (v3)
  {
    a1[3] = v3;
    operator delete(v3);
  }
  return a1;
}

void AGX::ProgramVariant<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::BackgroundObjectArgumentTable,false,false>::~ProgramVariant(unint64_t a1)
{
  AGX::ProgramVariant<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::BackgroundObjectArgumentTable,false,false>::~ProgramVariant(a1);

  JUMPOUT(0x24566ED90);
}

void AGX::BackgroundObjectProgramVariant<AGX::HAL200::Encoders,AGX::HAL200::Classes>::~BackgroundObjectProgramVariant(void *a1)
{
  *a1 = &unk_26F852938;
  AGX::ProgramVariantESLState<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ArgumentTable,true,7ul>::~ProgramVariantESLState(a1 + 168);
  AGX::ProgramVariant<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::BackgroundObjectArgumentTable,false,false>::~ProgramVariant((unint64_t)a1);

  JUMPOUT(0x24566ED90);
}

unint64_t AGX::BackgroundObjectProgramVariant<AGX::HAL200::Encoders,AGX::HAL200::Classes>::~BackgroundObjectProgramVariant(void *a1)
{
  *a1 = &unk_26F852938;
  AGX::ProgramVariantESLState<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ArgumentTable,true,7ul>::~ProgramVariantESLState(a1 + 168);

  return AGX::ProgramVariant<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::BackgroundObjectArgumentTable,false,false>::~ProgramVariant((unint64_t)a1);
}

uint64_t AGX::Device<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::tryFindOrCreateDriverProgramVariant<AGX::HAL200::BackgroundObjectProgramVariant,AGX::BackgroundObjectProgramKey,AGX::HAL200::BackgroundObjectProgram>(uint64_t a1, os_unfair_lock_s *a2, uint64_t a3, uint64_t a4)
{
  v41[0] = 0;
  uint64_t VariantEntry = AGX::Program<AGX::HAL200::BackgroundObjectProgramVariant,AGX::BackgroundObjectProgramKey,AGX::HAL200::IndirectArgumentLayout,AGXG17FamilyIndirectArgumentBufferLayout>::getOrCreateVariantEntry(a2, a3, v41);
  if (v41[0])
  {
    if ((*(uint64_t (**)(uint64_t))(*(void *)a3 + 24))(a3)) {
      int v8 = 0;
    }
    else {
      int v8 = (*(uint64_t (**)(uint64_t))(*(void *)a3 + 32))(a3) ^ 1;
    }
    if (*(_DWORD *)*MEMORY[0x263F4B1E8]) {
      IOGPUDeviceTraceEvent();
    }
    unint64_t v33 = &unk_26F852B38;
    int v9 = *(_DWORD *)(a3 + 8);
    int v34 = v9;
    uint64_t v36 = 0;
    unint64_t v37 = 0;
    uint64_t v35 = 0;
    uint64_t v11 = *(unsigned char **)(a3 + 16);
    unint64_t v10 = *(unsigned char **)(a3 + 24);
    int64_t v12 = v10 - v11;
    uint64_t v22 = a4;
    int v21 = v8;
    if (v10 == v11)
    {
      unint64_t v14 = 0;
      unint64_t v13 = 0;
    }
    else
    {
      if (v12 < 0) {
        abort();
      }
      unint64_t v13 = (char *)operator new(v10 - v11);
      uint64_t v35 = v13;
      unint64_t v14 = &v13[4 * (v12 >> 2)];
      unint64_t v37 = v14;
      memcpy(v13, v11, v12);
      uint64_t v36 = v14;
    }
    unint64_t v33 = &unk_26F852AF8;
    long long v38 = *(_OWORD *)(a3 + 40);
    long long v39 = *(_OWORD *)(a3 + 56);
    long long v40 = *(_OWORD *)(a3 + 72);
    uint64_t v15 = *(void *)(a1 + 6008);
    v23[0] = MEMORY[0x263EF8330];
    v23[1] = 3321888768;
    v23[2] = ___ZN3AGX6DeviceINS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE35tryFindOrCreateDriverProgramVariantINS1_30BackgroundObjectProgramVariantENS_26BackgroundObjectProgramKeyENS1_23BackgroundObjectProgramEEEPT_PT1_RKT0_P7NSArrayIPU27objcproto16MTLBinaryArchive11objc_objectE_block_invoke;
    v23[3] = &__block_descriptor_136_e8_40c38_ZTSN3AGX26BackgroundObjectProgramKeyE_e26_v32__0r_v8Q16__NSString_24l;
    v23[4] = a1;
    uint64_t v24 = &unk_26F852B38;
    int v25 = v9;
    unsigned int v27 = 0;
    uint64_t v28 = 0;
    std::string __p = 0;
    int64_t v16 = v14 - v13;
    if (v14 != v13)
    {
      if (v16 < 0) {
        abort();
      }
      uint64_t v17 = (char *)operator new(v14 - v13);
      uint64_t v18 = &v17[4 * (v16 >> 2)];
      std::string __p = v17;
      uint64_t v28 = v18;
      memcpy(v17, v13, v16);
      unsigned int v27 = v18;
    }
    uint64_t v24 = &unk_26F852AF8;
    long long v19 = *(_OWORD *)(a3 + 56);
    long long v29 = *(_OWORD *)(a3 + 40);
    long long v30 = v19;
    long long v31 = *(_OWORD *)(a3 + 72);
    uint64_t v32 = VariantEntry;
    AGX::Compiler::compileProgram<AGX::BackgroundObjectProgramKey>(v15, a3, v22, (uint64_t)v23, v21);
    uint64_t v24 = &unk_26F852B38;
    if (__p)
    {
      unsigned int v27 = __p;
      operator delete(__p);
    }
    unint64_t v33 = &unk_26F852B38;
    if (v35)
    {
      uint64_t v36 = v35;
      operator delete(v35);
    }
  }
  return *(void *)(VariantEntry + 8);
}

void sub_242A0DC24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31)
{
  if (__p) {
    operator delete(__p);
  }
  if (a30) {
    operator delete(a30);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN3AGX6DeviceINS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE35tryFindOrCreateDriverProgramVariantINS1_30BackgroundObjectProgramVariantENS_26BackgroundObjectProgramKeyENS1_23BackgroundObjectProgramEEEPT_PT1_RKT0_P7NSArrayIPU27objcproto16MTLBinaryArchive11objc_objectE_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  uint64_t v7 = "MTLCompilerErrorFatalError";
  switch(a3)
  {
    case 0:
      operator new();
    case 1:
      break;
    case 2:
      uint64_t v7 = "MTLCompilerErrorCompilationError";
      break;
    case 3:
      uint64_t v7 = "MTLCompilerErrorTimeout";
      break;
    default:
      uint64_t v7 = "UnknownErrorCode";
      break;
  }
  unint64_t v9 = 0;
  unint64_t v10 = 0;
  AGX::BackgroundObjectProgramKey::serialize((std::vector<unsigned int> *)(a1 + 40), (unsigned int **)&v10, &v9);
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_FAULT))
  {
    *(_DWORD *)buf = 138544130;
    int64_t v12 = a4;
    __int16 v13 = 2082;
    unint64_t v14 = v7;
    __int16 v15 = 1040;
    int v16 = v9;
    __int16 v17 = 2098;
    uint64_t v18 = v10;
    _os_log_fault_impl(&dword_2427AD000, &_os_log_internal, OS_LOG_TYPE_FAULT, "AGX: %{public}@ (%{public}s). %{public}.*P", buf, 0x26u);
  }
  uint64_t v8 = *(void *)(a1 + 128);
  *(void *)(v8 + 8) = 0;
  *(void *)(v8 + 16) = a3;

  *(void *)(v8 + 24) = [a4 copy];
  if (*(void *)(v8 + 8))
  {

    *(void *)(v8 + 32) = 0;
  }
  else
  {
    *(unsigned char *)(v8 + 40) = 0;
  }
  dispatch_group_leave(*(dispatch_group_t *)v8);
}

void sub_242A0DF28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  AGX::ProgramBindingRemap<AGX::HAL200::Encoders,AGX::HAL200::Classes>::~ProgramBindingRemap((uint64_t)va);
  MEMORY[0x24566ED90](v5, 0x10F3C40F3DF5E69);
  _Unwind_Resume(a1);
}

void __destroy_helper_block_e8_40c38_ZTSN3AGX26BackgroundObjectProgramKeyE(void *a1)
{
  a1[5] = &unk_26F852B38;
  uint64_t v1 = (void *)a1[7];
  if (v1)
  {
    a1[8] = v1;
    operator delete(v1);
  }
}

__n128 __copy_helper_block_e8_40c38_ZTSN3AGX26BackgroundObjectProgramKeyE(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 40) = &unk_26F852B38;
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 56) = 0;
  uint64_t v5 = *(unsigned char **)(a2 + 56);
  uint64_t v4 = *(unsigned char **)(a2 + 64);
  int64_t v6 = v4 - v5;
  if (v4 != v5)
  {
    if (v6 < 0) {
      abort();
    }
    uint64_t v7 = (char *)operator new(v4 - v5);
    *(void *)(a1 + 56) = v7;
    *(void *)(a1 + 64) = v7;
    uint64_t v8 = &v7[4 * (v6 >> 2)];
    *(void *)(a1 + 72) = v8;
    memcpy(v7, v5, v6);
    *(void *)(a1 + 64) = v8;
  }
  *(void *)(a1 + 40) = &unk_26F852AF8;
  __n128 result = *(__n128 *)(a2 + 80);
  long long v10 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v10;
  *(__n128 *)(a1 + 80) = result;
  return result;
}

void AGX::Device<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::populateEndOfTileProgramVariants(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t v56 = *(os_unfair_lock_s **)(a1 + 8);
  if (*(_DWORD *)*MEMORY[0x263F4B1E8]) {
    IOGPUDeviceTraceEvent();
  }
  if (areDriverUberShadersDisabled()) {
    goto LABEL_4;
  }
  uint64_t v31 = *(void *)(a2 + 112);
  if ((v31 & 0x180000000000000) != 0) {
    goto LABEL_4;
  }
  int v23 = *(_DWORD *)(a2 + 80);
  int v25 = *(_DWORD *)(a2 + 84);
  int v26 = *(_DWORD *)(a2 + 88);
  int v27 = *(_DWORD *)(a2 + 92);
  int v28 = *(_DWORD *)(a2 + 96);
  int v29 = *(_DWORD *)(a2 + 100);
  unsigned int v30 = *(_DWORD *)(a2 + 104);
  int v14 = *(_DWORD *)(a2 + 44);
  int v16 = *(_DWORD *)(a2 + 48);
  int v17 = *(_DWORD *)(a2 + 52);
  int v15 = *(_DWORD *)(a2 + 40);
  int v18 = *(_DWORD *)(a2 + 56);
  int v19 = *(_DWORD *)(a2 + 60);
  int v20 = *(_DWORD *)(a2 + 64);
  int v21 = *(_DWORD *)(a2 + 68);
  int v22 = *(_DWORD *)(a2 + 72);
  int v24 = *(_DWORD *)(a2 + 76);
  if ((v31 | ((v14 | v15 | v16 | v17 | v18 | v19 | v20 | v21 | v22 | v24 | v23 | v25 | v26 | v27 | v28 | v29 | v30) & 0x2000000 | (((v14 | v15 | v16 | v17 | v18 | v19 | v20 | v21 | v22 | v24 | v23 | v25 | v26 | v27 | v28 | v29) | v30) != 0)) ^ v15 | *(unsigned __int16 *)(a2 + 122) | *(unsigned __int16 *)(a2 + 120) | *(unsigned __int16 *)(a2 + 124) | v14 | v16 | v17 | v18 | v19 | v20 | v21 | v22 | v24 | v23 | v25 | v26 | v27 | v28 | v29 | v30) == 0x200000000000000)
  {
LABEL_4:
    v78.__begin_ = (std::vector<unsigned int>::pointer)&unk_26F853C48;
    LODWORD(v78.__end_) = *(_DWORD *)(a2 + 8);
    value = 0;
    uint64_t v80 = 0;
    v78.__end_cap_.__value_ = 0;
    long long v10 = *(unsigned char **)(a2 + 16);
    unint64_t v9 = *(unsigned char **)(a2 + 24);
    int64_t v11 = v9 - v10;
    if (v9 != v10)
    {
      if (v11 < 0) {
        goto LABEL_68;
      }
      v78.__end_cap_.__value_ = (unsigned int *)operator new(v9 - v10);
      uint64_t v80 = &v78.__end_cap_.__value_[v11 >> 2];
      memcpy(v78.__end_cap_.__value_, v10, v11);
      value = v80;
    }
    v78.__begin_ = (std::vector<unsigned int>::pointer)&unk_26F853C08;
    long long v83 = *(_OWORD *)(a2 + 72);
    long long v84 = *(_OWORD *)(a2 + 88);
    *(_OWORD *)unint64_t v85 = *(_OWORD *)(a2 + 104);
    *(void *)&void v85[14] = *(void *)(a2 + 118);
    long long v81 = *(_OWORD *)(a2 + 40);
    int v12 = 1;
    long long v82 = *(_OWORD *)(a2 + 56);
    goto LABEL_8;
  }
  uint64_t v32 = *a4;
  if (!*a4)
  {
    uint64_t v32 = AGX::Device<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::tryFindOrCreateDriverProgramVariant<AGX::HAL200::EndOfTileProgramVariant,AGX::EndOfTileProgramKey,AGX::HAL200::EndOfTileProgram>(a1, v56, (std::vector<unsigned int> *)a2, a3);
    *a4 = v32;
  }
  uint64_t v33 = *a5;
  if (*a5)
  {
LABEL_43:
    if (*a4 && v33)
    {
      if (*(_DWORD *)*MEMORY[0x263F4B1E8])
      {
        IOGPUDeviceTraceEvent();
      }
      return;
    }
    goto LABEL_49;
  }
  unsigned int v34 = *(unsigned __int16 *)(a2 + 120);
  if (v34 <= 0xFF && !*(_WORD *)(a2 + 122) && !*(_WORD *)(a2 + 124))
  {
    *a5 = v32;
    uint64_t v33 = v32;
    goto LABEL_43;
  }
  if (v32)
  {
    uint64_t v33 = *(void *)(v32 + 1792);
    if (v33)
    {
      *a5 = v33;
      goto LABEL_43;
    }
  }
  v78.__begin_ = (std::vector<unsigned int>::pointer)&unk_26F853C48;
  LODWORD(v78.__end_) = *(_DWORD *)(a2 + 8);
  value = 0;
  uint64_t v80 = 0;
  v78.__end_cap_.__value_ = 0;
  uint64_t v42 = *(unsigned char **)(a2 + 16);
  unsigned int v41 = *(unsigned char **)(a2 + 24);
  int64_t v43 = v41 - v42;
  if (v41 != v42)
  {
    if ((v43 & 0x8000000000000000) == 0)
    {
      v78.__end_cap_.__value_ = (unsigned int *)operator new(v41 - v42);
      uint64_t v80 = &v78.__end_cap_.__value_[v43 >> 2];
      memcpy(v78.__end_cap_.__value_, v42, v43);
      value = v80;
      goto LABEL_38;
    }
LABEL_68:
    abort();
  }
LABEL_38:
  *(void *)&void v85[14] = *(void *)(a2 + 118);
  long long v44 = *(_OWORD *)(a2 + 88);
  *(_OWORD *)unint64_t v85 = *(_OWORD *)(a2 + 104);
  long long v83 = *(_OWORD *)(a2 + 72);
  long long v84 = v44;
  long long v45 = *(_OWORD *)(a2 + 56);
  long long v81 = *(_OWORD *)(a2 + 40);
  v78.__begin_ = (std::vector<unsigned int>::pointer)&unk_26F853C08;
  long long v82 = v45;
  *(_WORD *)&v85[16] = v34;
  *(_DWORD *)&v85[18] = 0;
  *(_DWORD *)&v85[8] = v34;
  uint64_t v33 = AGX::Device<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::tryFindOrCreateDriverProgramVariant<AGX::HAL200::EndOfTileProgramVariant,AGX::EndOfTileProgramKey,AGX::HAL200::EndOfTileProgram>(a1, v56, &v78, a3);
  *a5 = v33;
  v78.__begin_ = (std::vector<unsigned int>::pointer)&unk_26F853C48;
  if (v78.__end_cap_.__value_)
  {
    value = v78.__end_cap_.__value_;
    operator delete(v78.__end_cap_.__value_);
    uint64_t v33 = *a5;
  }
  if (v33)
  {
    if (*a4)
    {
      *(void *)(*a4 + 1792) = v33;
      uint64_t v33 = *a5;
    }
    goto LABEL_43;
  }
LABEL_49:
  int v12 = 0;
  a3 = 0;
  int8x16_t v46 = vorrq_s8(vorrq_s8(*(int8x16_t *)(a2 + 40), *(int8x16_t *)(a2 + 72)), vorrq_s8(*(int8x16_t *)(a2 + 56), *(int8x16_t *)(a2 + 88)));
  *(int8x8_t *)v46.i8 = vorr_s8(*(int8x8_t *)v46.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v46, v46, 8uLL));
  __int32 v47 = v46.i32[0] | *(_DWORD *)(a2 + 104);
  LODWORD(v78.__end_) = 19;
  value = 0;
  uint64_t v80 = 0;
  v78.__end_cap_.__value_ = 0;
  v78.__begin_ = (std::vector<unsigned int>::pointer)&unk_26F853C08;
  *(void *)unint64_t v85 = 0;
  *(void *)&void v85[14] = 0;
  *(void *)&v85[8] = 0x200000000000000;
  long long v81 = 0u;
  long long v82 = 0u;
  long long v83 = 0u;
  long long v84 = 0u;
  LODWORD(v81) = (v47 | v46.i32[1]) & 0x2000000 | ((v47 | v46.i8[4]) != 0);
LABEL_8:
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 7716));
  if ((*(void *)&v85[8] | *(unsigned __int16 *)&v85[16] | *(unsigned __int16 *)&v85[18] | (unint64_t)*(unsigned __int16 *)&v85[20] | DWORD1(v81) | DWORD2(v81) | HIDWORD(v81) | v82 | DWORD1(v82) | DWORD2(v82) | HIDWORD(v82) | v83 | DWORD1(v83) | DWORD2(v83) | HIDWORD(v83) | ((DWORD1(v81) | v81 | DWORD2(v81) | HIDWORD(v81) | v82 | DWORD1(v82) | DWORD2(v82) | HIDWORD(v82) | v83 | DWORD1(v83) | DWORD2(v83) | HIDWORD(v83) | v84 | DWORD1(v84) | DWORD2(v84) | HIDWORD(v84) | *(_DWORD *)v85) & 0x2000000 | (((BYTE4(v81) | v81 | BYTE8(v81) | BYTE12(v81) | v82 | BYTE4(v82) | BYTE8(v82) | BYTE12(v82) | v83 | BYTE4(v83) | BYTE8(v83) | BYTE12(v83) | v84 | BYTE4(v84) | BYTE8(v84) | BYTE12(v84)) | v85[0]) != 0)) ^ v81 | v84 | DWORD1(v84) | DWORD2(v84) | HIDWORD(v84) | *(_DWORD *)v85) == 0x200000000000000) {
    atomic_fetch_add((atomic_ullong *volatile)&AGX::EndOfTileProgramVariant<AGX::HAL200::Encoders,AGX::HAL200::Classes>::liveUberVariantUses, 1uLL);
  }
  uint64_t v13 = *a4;
  if (*a4)
  {
    if (!*a5) {
      goto LABEL_23;
    }
  }
  else
  {
    uint64_t v13 = AGX::Device<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::findOrCreateDriverProgramVariant<AGX::HAL200::EndOfTileProgramVariant,AGX::EndOfTileProgramKey,AGX::HAL200::EndOfTileProgram>(a1, v56, (uint64_t)&v78, a3);
    *a4 = v13;
    if (!*a5)
    {
LABEL_23:
      unsigned int v35 = *(unsigned __int16 *)(a2 + 120);
      if (v35 > 0xFF || *(_WORD *)(a2 + 122) || *(_WORD *)(a2 + 124))
      {
        uint64_t v36 = *(void *)(v13 + 1792);
        if (v36)
        {
          *a5 = v36;
        }
        else
        {
          unint64_t v68 = &unk_26F853C48;
          int v55 = *(_DWORD *)(a2 + 8);
          int v69 = v55;
          uint64_t v71 = 0;
          int v72 = 0;
          unint64_t v70 = 0;
          uint64_t v38 = *(void *)(a2 + 16);
          uint64_t v37 = *(void *)(a2 + 24);
          int64_t v39 = v37 - v38;
          if (v37 == v38)
          {
            long long v40 = 0;
            int v54 = 0;
          }
          else
          {
            if (v39 < 0) {
              abort();
            }
            __srCC_SHA256_CTX c = *(void **)(a2 + 16);
            unint64_t v70 = operator new(v37 - v38);
            int v72 = (char *)v70 + 4 * (v39 >> 2);
            int v54 = v70;
            memcpy(v70, __src, v39);
            long long v40 = v72;
            uint64_t v71 = v72;
          }
          unint64_t v68 = &unk_26F853C08;
          *(void *)&v77[14] = *(void *)(a2 + 118);
          *(_OWORD *)uint64_t v77 = *(_OWORD *)(a2 + 104);
          int8x16_t v75 = *(int8x16_t *)(a2 + 72);
          int8x16_t v76 = *(int8x16_t *)(a2 + 88);
          int8x16_t v73 = *(int8x16_t *)(a2 + 40);
          int8x16_t v74 = *(int8x16_t *)(a2 + 56);
          *(_WORD *)&v77[16] = v35;
          *(_DWORD *)&v77[18] = 0;
          *(_DWORD *)&v77[8] = v35;
          if (v12)
          {
            unint64_t v58 = &unk_26F853C48;
            int v59 = v55;
            unint64_t v61 = 0;
            uint64_t v62 = 0;
            std::string __p = 0;
            int64_t v48 = v40 - v54;
            if (v40 != v54)
            {
              if (v48 < 0) {
                abort();
              }
              int v49 = (char *)operator new(v40 - v54);
              uint64_t v50 = &v49[4 * (v48 >> 2)];
              std::string __p = v49;
              uint64_t v62 = v50;
              memcpy(v49, v54, v48);
              unint64_t v61 = v50;
            }
            int8x16_t v65 = v75;
            int8x16_t v66 = v76;
            *(_OWORD *)unint64_t v67 = *(_OWORD *)v77;
            int8x16_t v63 = v73;
            int8x16_t v64 = v74;
            unint64_t v58 = &unk_26F853C08;
            *(void *)&v67[14] = *(void *)&v77[14];
          }
          else
          {
            int8x16_t v51 = vorrq_s8(vorrq_s8(v73, v75), vorrq_s8(v74, v76));
            *(int8x8_t *)v51.i8 = vorr_s8(*(int8x8_t *)v51.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v51, v51, 8uLL));
            int v59 = 19;
            unint64_t v61 = 0;
            uint64_t v62 = 0;
            std::string __p = 0;
            unint64_t v58 = &unk_26F853C08;
            int8x16_t v66 = 0u;
            *(void *)unint64_t v67 = 0;
            *(void *)&v67[14] = 0;
            int8x16_t v63 = 0u;
            int8x16_t v64 = 0u;
            int8x16_t v65 = 0u;
            *(void *)&v67[8] = 0x200000000000000;
            v63.i32[0] = (v51.i32[0] | *(_DWORD *)v77 | v51.i32[1]) & 0x2000000 | (((v51.i8[0] | v77[0]) | v51.i8[4]) != 0);
          }
          uint64_t v52 = AGX::Device<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::findOrCreateDriverProgramVariant<AGX::HAL200::EndOfTileProgramVariant,AGX::EndOfTileProgramKey,AGX::HAL200::EndOfTileProgram>(a1, v56, (uint64_t)&v58, a3);
          *a5 = v52;
          if ((*(unsigned char *)(*a4 + 1784) != 0) == (*(unsigned char *)(v52 + 1784) != 0)) {
            *(void *)(*a4 + 1792) = v52;
          }
          unint64_t v58 = &unk_26F853C48;
          if (__p)
          {
            unint64_t v61 = __p;
            operator delete(__p);
          }
          unint64_t v68 = &unk_26F853C48;
          if (v70)
          {
            uint64_t v71 = v70;
            operator delete(v70);
          }
        }
      }
      else
      {
        *a5 = v13;
      }
    }
  }
  if (*(_DWORD *)*MEMORY[0x263F4B1E8]) {
    IOGPUDeviceTraceEvent();
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 7716));
  v78.__begin_ = (std::vector<unsigned int>::pointer)&unk_26F853C48;
  if (v78.__end_cap_.__value_)
  {
    value = v78.__end_cap_.__value_;
    operator delete(v78.__end_cap_.__value_);
  }
}

void sub_242A0E9F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *__p,uint64_t a35)
{
  *(void *)(v35 - 216) = a12;
  uint64_t v37 = *(void **)(v35 - 200);
  if (v37)
  {
    *(void *)(v35 - 192) = v37;
    operator delete(v37);
  }
  _Unwind_Resume(exception_object);
}

uint64_t AGX::Device<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::findOrCreateDriverProgramVariant<AGX::HAL200::EndOfTileProgramVariant,AGX::EndOfTileProgramKey,AGX::HAL200::EndOfTileProgram>(uint64_t a1, os_unfair_lock_s *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v42 = 0;
  int64_t v43 = &v42;
  uint64_t v44 = 0x2020000000;
  uint64_t v45 = 0;
  char v41 = 0;
  uint64_t v7 = (dispatch_group_t *)AGX::Program<AGX::HAL200::EndOfTileProgramVariant,AGX::EndOfTileProgramKey,AGX::HAL200::IndirectArgumentLayout,AGXG17FamilyIndirectArgumentBufferLayout>::getOrCreateVariantEntry(a2, a3, &v41);
  long long v10 = v7;
  if (v41)
  {
    if (*(_DWORD *)*MEMORY[0x263F4B1E8]) {
      IOGPUDeviceTraceEvent();
    }
    uint64_t v11 = *(void *)(a1 + 6008);
    uint64_t v33 = MEMORY[0x263EF8330];
    uint64_t v34 = 3221225472;
    uint64_t v35 = ___ZN3AGX6DeviceINS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE32findOrCreateDriverProgramVariantINS1_23EndOfTileProgramVariantENS_19EndOfTileProgramKeyENS1_16EndOfTileProgramEEEPT_PT1_RKT0_P7NSArrayIPU27objcproto16MTLBinaryArchive11objc_objectE_block_invoke;
    uint64_t v36 = &unk_26516E8E0;
    uint64_t v37 = &v42;
    uint64_t v38 = a1;
    uint64_t v39 = a3;
    long long v40 = v10;
    unsigned int v14 = *(_DWORD *)(a3 + 48);
    int8x8_t v16 = *(int8x8_t *)(a3 + 56);
    int8x16_t v18 = *(int8x16_t *)(a3 + 64);
    int8x16_t v17 = *(int8x16_t *)(a3 + 80);
    v8.i64[0] = *(void *)(a3 + 100);
    uint64_t v19 = *(void *)(a3 + 112);
    int v20 = *(unsigned __int16 *)(a3 + 120);
    int v21 = *(unsigned __int16 *)(a3 + 122);
    int v22 = *(unsigned __int16 *)(a3 + 124);
    v23.i32[0] = *(_DWORD *)(a3 + 44);
    v23.i32[1] = *(_DWORD *)(a3 + 52);
    v23.u64[1] = (unint64_t)v16;
    v9.i32[0] = *(_DWORD *)(a3 + 96);
    int8x16_t v24 = vextq_s8(vextq_s8(v9, v9, 4uLL), v8, 0xCuLL);
    v24.i32[3] = *(_DWORD *)(a3 + 40);
    int8x16_t v25 = vorrq_s8(v23, vorrq_s8(v17, vorrq_s8(v18, v24)));
    int8x8_t v26 = vorr_s8(*(int8x8_t *)v25.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v25, v25, 8uLL));
    if (v19 | v26.i32[0] | v20 | v21 | v22 | v26.i32[1] | v14
      && (int8x16_t v27 = vorrq_s8(v18, v17),
          *(int8x8_t *)v27.i8 = vorr_s8(*(int8x8_t *)v27.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v27, v27, 8uLL)),
          unsigned __int32 v28 = v27.i32[0] | v8.i32[0] | v27.i32[1] | vorr_s8((int8x8_t)vdup_lane_s32(*(int32x2_t *)v8.i8, 1), v16).u32[0],
          int v12 = *(_DWORD *)(a3 + 44),
          int v15 = *(_DWORD *)(a3 + 52),
          int v13 = *(_DWORD *)(a3 + 40),
          (v19 | ((v28 | v13 | v12 | *(_DWORD *)(a3 + 96) | v15 | v16.i32[1] | v14) & 0x2000000 | ((v28 | (v13 | v12 | *(_DWORD *)(a3 + 96) | v15 | v16.i8[4] | v14)) != 0)) ^ v13 | v20 | v21 | v22 | v14 | v15 | *(_DWORD *)(a3 + 96) | v12 | v16.i32[1] | v28) != 0x200000000000000))
    {
      uint64_t v29 = 0;
    }
    else
    {
      uint64_t v29 = *(void *)(v11 + 8);
    }
    uint64_t v31 = objc_opt_new();
    objc_msgSend(v31, "setSync:", 1, v33, v34, v35, v36, v37, v38, v39, v40);
    [v31 setPipelineCache:v29];
    [v31 setBinaryArchives:a4];
    v46[0] = MEMORY[0x263EF8330];
    v46[1] = 3221225472;
    v46[2] = ___ZN3AGX8Compiler14compileProgramINS_19EndOfTileProgramKeyEEEvRKT_P7NSArrayIPU27objcproto16MTLBinaryArchive11objc_objectEU13block_pointerFvRK20AGCDeserializedReply16MTLCompilerErrorP8NSStringEb_block_invoke;
    v46[3] = &unk_26516F7C0;
    v46[4] = &v33;
    AGX::Compiler::compileProgram<AGX::EndOfTileProgramKey,AGCDeserializedReply>((void **)v11, (std::vector<unsigned int> *)a3, v31, (uint64_t)v46);

    dispatch_group_t v30 = (dispatch_group_t)v43[3];
  }
  else
  {
    dispatch_group_wait(*v7, 0xFFFFFFFFFFFFFFFFLL);
    dispatch_group_t v30 = v10[1];
    v43[3] = (uint64_t)v30;
  }
  if (v30)
  {
    _Block_object_dispose(&v42, 8);
    return (uint64_t)v30;
  }
  else
  {
    uint64_t result = MTLReleaseAssertionFailure();
    __break(1u);
  }
  return result;
}

void sub_242A0EDA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t AGX::Program<AGX::HAL200::EndOfTileProgramVariant,AGX::EndOfTileProgramKey,AGX::HAL200::IndirectArgumentLayout,AGXG17FamilyIndirectArgumentBufferLayout>::getOrCreateVariantEntry(os_unfair_lock_s *a1, uint64_t a2, unsigned char *a3)
{
  *a3 = 0;
  int64_t v6 = a1 + 262;
  os_unfair_lock_lock(a1 + 262);
  uint64_t v7 = VectorMap<AGX::EndOfTileProgramKey,AGX::ProgramVariantEntry<AGX::HAL200::EndOfTileProgramVariant>,4u>::operator[]((uint64_t)a1, a2);
  uint64_t v8 = v7;
  if (!*(void *)v7)
  {
    int v12 = dispatch_group_create();
    *(void *)uint64_t v8 = v12;
LABEL_7:
    dispatch_group_enter(v12);
    *a3 = 1;
    goto LABEL_8;
  }
  if (*(unsigned char *)(v7 + 40))
  {
    long long v10 = (void *)(v7 + 8);
    unint64_t v9 = *(void *)(v7 + 8);
    if (v9)
    {
      AGX::ProgramVariantESLState<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ArgumentTable,true,7ul>::~ProgramVariantESLState((uint64_t *)(v9 + 512));
      unint64_t v11 = AGX::EndOfTileProgramVariantBase<AGX::HAL200::Encoders,AGX::HAL200::Classes>::~EndOfTileProgramVariantBase(v9);
      MEMORY[0x24566ED90](v11, 0x10F2C407AEA2096);
    }
    *long long v10 = 0;
    *(void *)(v8 + 16) = 0;

    *(void *)(v8 + 24) = 0;
    *(void *)(v8 + 32) = 0;
    *(unsigned char *)(v8 + 40) = 0;
    int v12 = *(NSObject **)v8;
    goto LABEL_7;
  }
LABEL_8:
  os_unfair_lock_unlock(v6);
  return v8;
}

void sub_242A0EEA0(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void ___ZN3AGX6DeviceINS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE32findOrCreateDriverProgramVariantINS1_23EndOfTileProgramVariantENS_19EndOfTileProgramKeyENS1_16EndOfTileProgramEEEPT_PT1_RKT0_P7NSArrayIPU27objcproto16MTLBinaryArchive11objc_objectE_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a3) {
    operator new();
  }
  uint64_t v5 = "MTLCompilerErrorTimeout";
  int64_t v6 = "UnknownErrorCode";
  if (a3 == 2) {
    int64_t v6 = "MTLCompilerErrorCompilationError";
  }
  if (a3 != 3) {
    uint64_t v5 = v6;
  }
  if (a3 == 1) {
    uint64_t v7 = "MTLCompilerErrorFatalError";
  }
  else {
    uint64_t v7 = v5;
  }
  unint64_t v12 = 0;
  int v13 = 0;
  AGX::EndOfTileProgramKey::serialize(*(std::vector<unsigned int> **)(a1 + 48), (unsigned int **)&v13, &v12);
  uint64_t v8 = a4;
  unint64_t v9 = v7;
  unint64_t v10 = v12;
  unint64_t v11 = v13;
  _ZZZZN3AGX6DeviceINS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE49createTGOptimizationDriverShaderAndBufferIfNeededEP18AGXG17FamilyDeviceEUb_EUb_ENKUlvE_clB14_AGX__Crashed_Ev();
}

void sub_242A0F078(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  AGX::ProgramBindingRemap<AGX::HAL200::Encoders,AGX::HAL200::Classes>::~ProgramBindingRemap((uint64_t)va);
  MEMORY[0x24566ED90](v4, 0x10F2C407AEA2096);
  _Unwind_Resume(a1);
}

uint64_t ___ZN3AGX8Compiler14compileProgramINS_19EndOfTileProgramKeyEEEvRKT_P7NSArrayIPU27objcproto16MTLBinaryArchive11objc_objectEU13block_pointerFvRK20AGCDeserializedReply16MTLCompilerErrorP8NSStringEb_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a5) {
    AGX::Compiler::compileProgram<AGX::UserIntersectionProgramKey,AGCReplyArray>(AGX::UserIntersectionProgramKey const&,MTLCompileFunctionRequestData *,void({block_pointer})(AGCReplyArray const&,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,MTLCompilerError,NSString *,unsigned long long))::{lambda(void)#1}::operator()[abi:[AGX] Failed assertion __requestData.frameworkData && _requestData.pipelineOptions_]();
  }
  uint64_t v5 = *(uint64_t (**)(void))(*(void *)(a1 + 32) + 16);

  return v5();
}

void AGX::Compiler::compileProgram<AGX::EndOfTileProgramKey,AGCDeserializedReply>(void **a1, std::vector<unsigned int> *this, void *a3, uint64_t a4)
{
  uint64_t v33 = *MEMORY[0x263EF8340];
  unint64_t v25 = 0;
  int8x8_t v26 = 0;
  AGX::EndOfTileProgramKey::serialize(this, (unsigned int **)&v26, &v25);
  uint64_t v8 = dispatch_data_create(v26, v25, 0, 0);
  [a3 setDriverKeyData:v8];
  if ([a3 airScript])
  {
    int8x16_t v23 = 0;
    size_t v24 = 0;
    dispatch_object_t object = dispatch_data_create_map((dispatch_data_t)[a3 airScript], (const void **)&v23, &v24);
    unint64_t v9 = v23;
    uint64_t v10 = *v23;
    CC_SHA256_Init(&c);
    (*(void (**)(std::vector<unsigned int> *, CC_SHA256_CTX *))this->__begin_)(this, &c);
    *(void *)leuint64_t n = 0;
    uintptr_t data = 0;
    if (AGX::GetSerializedVertexFormat((AGX *)((char *)v9 + v10), &data, (size_t *)len, v11, v12))
    {
      int v13 = data;
      CC_SHA256_Update(&c, data, len[0]);
      free(v13);
    }
    CC_SHA256_Final(md, &c);
    dispatch_release(object);
    v30[0] = *(_OWORD *)md;
    v30[1] = v32;
    [a3 setVendorPluginFunctionId:v30];
  }
  v21[0] = MEMORY[0x263EF8330];
  v21[1] = 3221225472;
  v21[2] = ___ZN3AGX8Compiler14compileProgramINS_19EndOfTileProgramKeyE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke;
  v21[3] = &unk_26516F810;
  v21[4] = a3;
  v21[5] = a4;
  if ([a3 function])
  {
    uint64_t v14 = mach_absolute_time();
    int v15 = *a1;
    v19[0] = MEMORY[0x263EF8330];
    v19[1] = 3221225472;
    v19[2] = ___ZN3AGX8Compiler14compileProgramINS_19EndOfTileProgramKeyE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke_4;
    v19[3] = &unk_26516F860;
    v19[4] = v21;
    v19[5] = v14;
    [v15 compileFunctionRequest:a3 completionHandler:v19];
  }
  else
  {
    if ([a3 frameworkData] || objc_msgSend(a3, "pipelineOptions")) {
      AGX::Compiler::compileProgram<AGX::UserIntersectionProgramKey,AGCReplyArray>(AGX::UserIntersectionProgramKey const&,MTLCompileFunctionRequestData *,void({block_pointer})(AGCReplyArray const&,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,MTLCompilerError,NSString *,unsigned long long))::{lambda(void)#1}::operator()[abi:[AGX] Failed assertion __requestData.frameworkData && _requestData.pipelineOptions_]();
    }
    v20[0] = MEMORY[0x263EF8330];
    v20[1] = 3221225472;
    v20[2] = ___ZN3AGX8Compiler14compileProgramINS_19EndOfTileProgramKeyE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke_3;
    v20[3] = &unk_26516F838;
    v20[4] = v21;
    BOOL v16 = objc_msgSend((id)objc_msgSend(a3, "binaryArchives"), "count") == 0;
    int8x16_t v17 = *a1;
    uint64_t v18 = [a3 driverKeyData];
    if (v16) {
      objc_msgSend(v17, "compileRequest:pipelineCache:sync:completionHandler:", v18, objc_msgSend(a3, "pipelineCache"), objc_msgSend(a3, "sync"), v20);
    }
    else {
      objc_msgSend(v17, "compileRequest:binaryArchives:failOnBinaryArchiveMiss:pipelineCache:sync:completionHandler:", v18, objc_msgSend(a3, "binaryArchives"), 0, objc_msgSend(a3, "pipelineCache"), objc_msgSend(a3, "sync"), v20);
    }
  }
  dispatch_release(v8);
}

void sub_242A0F428(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,dispatch_object_t object)
{
}

void ___ZN3AGX8Compiler14compileProgramINS_19EndOfTileProgramKeyE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  v14[0] = MEMORY[0x263EF8330];
  v14[1] = 3221225472;
  int v15 = ___ZN3AGX8Compiler14compileProgramINS_19EndOfTileProgramKeyE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke_2;
  BOOL v16 = &unk_26516F7E8;
  uint64_t v17 = a9;
  uint64_t v18 = a3;
  uint64_t v19 = a4;
  uint64_t v20 = a5;
  uint64_t v21 = a6;
  uint64_t v22 = a7;
  uint64_t v12 = a1 + 32;
  uint64_t v10 = *(void **)(a1 + 32);
  uint64_t v11 = *(void *)(v12 + 8);
  uint64_t v23 = a8;
  uint64_t v24 = v11;
  uint64_t v25 = a2;
  uint64_t v26 = a10;
  if (objc_msgSend(v10, "sync", MEMORY[0x263EF8330], 3221225472))
  {
    v15(v14);
  }
  else
  {
    global_queue = dispatch_get_global_queue(0, 0);
    dispatch_async(global_queue, v14);
  }
}

uint64_t ___ZN3AGX8Compiler14compileProgramINS_19EndOfTileProgramKeyE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke_3(uint64_t a1, void *a2)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), *a2);
}

uint64_t ___ZN3AGX8Compiler14compileProgramINS_19EndOfTileProgramKeyE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke_4(uint64_t a1, void *a2)
{
  if (getTimebaseInfo(void)::once != -1) {
    dispatch_once(&getTimebaseInfo(void)::once, &__block_literal_global_7474);
  }
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), *a2);
}

void ___ZN3AGX8Compiler14compileProgramINS_19EndOfTileProgramKeyE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke_2(void *a1)
{
  size_t size_ptr = 0;
  buffer_ptr = 0;
  uint64_t v2 = a1[12];
  AGCDeserializedReply::AGCDeserializedReply((AGCDeserializedReply *)v5);
  if (v2 || (uint64_t v4 = a1[5]) == 0)
  {
    uint64_t v3 = 0;
  }
  else
  {
    uint64_t v3 = dispatch_data_create_map(v4, (const void **)&buffer_ptr, &size_ptr);
    AGCDeserializedReply::deserialize((AGCDeserializedReply *)v5, buffer_ptr, size_ptr);
  }
  (*(void (**)(void, unsigned char *))(a1[11] + 16))(a1[11], v5);
  if (v3) {
    dispatch_release(v3);
  }
  AGCDeserializedReply::~AGCDeserializedReply((AGCDeserializedReply *)v5);
}

void sub_242A0F6D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  AGCDeserializedReply::~AGCDeserializedReply((AGCDeserializedReply *)va);
  _Unwind_Resume(a1);
}

uint64_t AGX::Device<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::tryFindOrCreateDriverProgramVariant<AGX::HAL200::EndOfTileProgramVariant,AGX::EndOfTileProgramKey,AGX::HAL200::EndOfTileProgram>(uint64_t a1, os_unfair_lock_s *a2, std::vector<unsigned int> *a3, uint64_t a4)
{
  char v65 = 0;
  uint64_t v7 = AGX::Program<AGX::HAL200::EndOfTileProgramVariant,AGX::EndOfTileProgramKey,AGX::HAL200::IndirectArgumentLayout,AGXG17FamilyIndirectArgumentBufferLayout>::getOrCreateVariantEntry(a2, (uint64_t)a3, &v65);
  if (v65)
  {
    if ((*((uint64_t (**)(std::vector<unsigned int> *))a3->__begin_ + 3))(a3)) {
      unsigned int v9 = 1;
    }
    else {
      unsigned int v9 = (*((uint64_t (**)(std::vector<unsigned int> *))a3->__begin_ + 4))(a3);
    }
    if (*(_DWORD *)*MEMORY[0x263F4B1E8]) {
      IOGPUDeviceTraceEvent();
    }
    int v55 = &unk_26F853C48;
    int end = (int)a3->__end_;
    int v56 = end;
    unint64_t v58 = 0;
    int v59 = 0;
    unint64_t v57 = 0;
    value = a3->__end_cap_.__value_;
    begiuint64_t n = a3[1].__begin_;
    int64_t v13 = (char *)begin - (char *)value;
    uint64_t v42 = a4;
    if (begin == value)
    {
      int v15 = 0;
      uint64_t v14 = 0;
    }
    else
    {
      if (v13 < 0) {
        abort();
      }
      uint64_t v14 = (char *)operator new((char *)begin - (char *)value);
      unint64_t v57 = v14;
      int v15 = &v14[4 * (v13 >> 2)];
      int v59 = v15;
      memcpy(v14, value, v13);
      unint64_t v58 = v15;
    }
    int v55 = &unk_26F853C08;
    long long v62 = *(_OWORD *)&a3[3].__begin_;
    long long v63 = *(_OWORD *)&a3[3].__end_cap_.__value_;
    *(_OWORD *)int8x16_t v64 = *(_OWORD *)&a3[4].__end_;
    *(void *)&v64[14] = *(unsigned int **)((char *)&a3[4].__end_cap_.__value_ + 6);
    long long v60 = *(_OWORD *)&a3[1].__end_cap_.__value_;
    long long v61 = *(_OWORD *)&a3[2].__end_;
    uint64_t v16 = *(void *)(a1 + 6008);
    v43[0] = MEMORY[0x263EF8330];
    v43[1] = 3321888768;
    v43[2] = ___ZN3AGX6DeviceINS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE35tryFindOrCreateDriverProgramVariantINS1_23EndOfTileProgramVariantENS_19EndOfTileProgramKeyENS1_16EndOfTileProgramEEEPT_PT1_RKT0_P7NSArrayIPU27objcproto16MTLBinaryArchive11objc_objectE_block_invoke;
    v43[3] = &__block_descriptor_176_e8_40c31_ZTSN3AGX19EndOfTileProgramKeyE_e26_v32__0r_v8Q16__NSString_24l;
    v43[4] = a1;
    uint64_t v44 = &unk_26F853C48;
    int v45 = end;
    std::string __p = 0;
    __int32 v47 = 0;
    int64_t v48 = 0;
    int64_t v17 = v15 - v14;
    if (v15 != v14)
    {
      if (v17 < 0) {
        abort();
      }
      uint64_t v18 = (char *)operator new(v15 - v14);
      uint64_t v19 = &v18[4 * (v17 >> 2)];
      std::string __p = v18;
      int64_t v48 = v19;
      memcpy(v18, v14, v17);
      __int32 v47 = v19;
    }
    uint64_t v44 = &unk_26F853C08;
    long long v20 = *(_OWORD *)&a3[3].__end_cap_.__value_;
    long long v51 = *(_OWORD *)&a3[3].__begin_;
    long long v52 = v20;
    *(_OWORD *)uint64_t v53 = *(_OWORD *)&a3[4].__end_;
    *(void *)&v53[14] = *(unsigned int **)((char *)&a3[4].__end_cap_.__value_ + 6);
    int8x16_t v28 = *(int8x16_t *)&a3[2].__end_;
    long long v49 = *(_OWORD *)&a3[1].__end_cap_.__value_;
    int8x16_t v50 = v28;
    uint64_t v54 = v7;
    unsigned int v23 = a3[2].__begin_;
    int8x8_t v25 = (int8x8_t)a3[2].__end_;
    int8x16_t v27 = *(int8x16_t *)&a3[2].__end_cap_.__value_;
    int8x16_t v26 = *(int8x16_t *)&a3[3].__end_;
    v28.i64[0] = *(uint64_t *)((char *)&a3[4].__begin_ + 4);
    uint64_t v29 = a3[4].__end_cap_.__value_;
    int begin_low = LOWORD(a3[5].__begin_);
    int v31 = WORD1(a3[5].__begin_);
    int v32 = WORD2(a3[5].__begin_);
    v33.i32[0] = HIDWORD(a3[1].__end_cap_.__value_);
    v33.i32[1] = HIDWORD(a3[2].__begin_);
    v33.u64[1] = (unint64_t)v25;
    v8.i32[0] = (__int32)a3[4].__begin_;
    int8x16_t v34 = vextq_s8(vextq_s8(v8, v8, 4uLL), v28, 0xCuLL);
    v34.i32[3] = (__int32)a3[1].__end_cap_.__value_;
    int8x16_t v35 = vorrq_s8(v33, vorrq_s8(v26, vorrq_s8(v27, v34)));
    int8x8_t v36 = vorr_s8(*(int8x8_t *)v35.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v35, v35, 8uLL));
    if ((unint64_t)v29 | v36.i32[0] | begin_low | v31 | v32 | v36.i32[1] | v23
      && (int8x16_t v37 = vorrq_s8(v27, v26),
          *(int8x8_t *)v37.i8 = vorr_s8(*(int8x8_t *)v37.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v37, v37, 8uLL)),
          unsigned __int32 v38 = v37.i32[0] | v28.i32[0] | v37.i32[1] | vorr_s8((int8x8_t)vdup_lane_s32(*(int32x2_t *)v28.i8, 1), v25).u32[0],
          int value_high = HIDWORD(a3[1].__end_cap_.__value_),
          int begin_high = HIDWORD(a3[2].__begin_),
          int v22 = (int)a3[1].__end_cap_.__value_,
          ((unint64_t)v29 | ((v38 | v22 | value_high | LODWORD(a3[4].__begin_) | begin_high | v25.i32[1] | v23) & 0x2000000 | ((v38 | (v22 | value_high | LODWORD(a3[4].__begin_) | begin_high | v25.i8[4] | v23)) != 0)) ^ v22 | begin_low | v31 | v32 | v23 | begin_high | LODWORD(a3[4].__begin_) | value_high | v25.i32[1] | v38) != 0x200000000000000))
    {
      uint64_t v39 = 0;
    }
    else
    {
      uint64_t v39 = *(void *)(v16 + 8);
    }
    long long v40 = objc_opt_new();
    [v40 setSync:v9];
    [v40 setPipelineCache:v39];
    [v40 setBinaryArchives:v42];
    v66[0] = MEMORY[0x263EF8330];
    v66[1] = 3221225472;
    v66[2] = ___ZN3AGX8Compiler14compileProgramINS_19EndOfTileProgramKeyEEEvRKT_P7NSArrayIPU27objcproto16MTLBinaryArchive11objc_objectEU13block_pointerFvRK20AGCDeserializedReply16MTLCompilerErrorP8NSStringEb_block_invoke;
    v66[3] = &unk_26516F7C0;
    v66[4] = v43;
    AGX::Compiler::compileProgram<AGX::EndOfTileProgramKey,AGCDeserializedReply>((void **)v16, a3, v40, (uint64_t)v66);

    uint64_t v44 = &unk_26F853C48;
    if (__p)
    {
      __int32 v47 = __p;
      operator delete(__p);
    }
    int v55 = &unk_26F853C48;
    if (v57)
    {
      unint64_t v58 = v57;
      operator delete(v57);
    }
  }
  return *(void *)(v7 + 8);
}

void sub_242A0FBA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *__p,uint64_t a37)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN3AGX6DeviceINS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE35tryFindOrCreateDriverProgramVariantINS1_23EndOfTileProgramVariantENS_19EndOfTileProgramKeyENS1_16EndOfTileProgramEEEPT_PT1_RKT0_P7NSArrayIPU27objcproto16MTLBinaryArchive11objc_objectE_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  uint64_t v7 = "MTLCompilerErrorFatalError";
  switch(a3)
  {
    case 0:
      operator new();
    case 1:
      break;
    case 2:
      uint64_t v7 = "MTLCompilerErrorCompilationError";
      break;
    case 3:
      uint64_t v7 = "MTLCompilerErrorTimeout";
      break;
    default:
      uint64_t v7 = "UnknownErrorCode";
      break;
  }
  unint64_t v9 = 0;
  uint64_t v10 = 0;
  AGX::EndOfTileProgramKey::serialize((std::vector<unsigned int> *)(a1 + 40), (unsigned int **)&v10, &v9);
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_FAULT))
  {
    *(_DWORD *)buf = 138544130;
    uint64_t v12 = a4;
    __int16 v13 = 2082;
    uint64_t v14 = v7;
    __int16 v15 = 1040;
    int v16 = v9;
    __int16 v17 = 2098;
    uint64_t v18 = v10;
    _os_log_fault_impl(&dword_2427AD000, &_os_log_internal, OS_LOG_TYPE_FAULT, "AGX: %{public}@ (%{public}s). %{public}.*P", buf, 0x26u);
  }
  uint64_t v8 = *(void *)(a1 + 168);
  *(void *)(v8 + 8) = 0;
  *(void *)(v8 + 16) = a3;

  *(void *)(v8 + 24) = [a4 copy];
  if (*(void *)(v8 + 8))
  {

    *(void *)(v8 + 32) = 0;
  }
  else
  {
    *(unsigned char *)(v8 + 40) = 0;
  }
  dispatch_group_leave(*(dispatch_group_t *)v8);
}

void sub_242A0FE94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  AGX::ProgramBindingRemap<AGX::HAL200::Encoders,AGX::HAL200::Classes>::~ProgramBindingRemap((uint64_t)va);
  MEMORY[0x24566ED90](v5, 0x10F2C407AEA2096);
  _Unwind_Resume(a1);
}

void __destroy_helper_block_e8_40c31_ZTSN3AGX19EndOfTileProgramKeyE(void *a1)
{
  a1[5] = &unk_26F853C48;
  uint64_t v1 = (void *)a1[7];
  if (v1)
  {
    a1[8] = v1;
    operator delete(v1);
  }
}

__n128 __copy_helper_block_e8_40c31_ZTSN3AGX19EndOfTileProgramKeyE(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 40) = &unk_26F853C48;
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 56) = 0;
  uint64_t v5 = *(unsigned char **)(a2 + 56);
  uint64_t v4 = *(unsigned char **)(a2 + 64);
  int64_t v6 = v4 - v5;
  if (v4 != v5)
  {
    if (v6 < 0) {
      abort();
    }
    uint64_t v7 = (char *)operator new(v4 - v5);
    *(void *)(a1 + 56) = v7;
    *(void *)(a1 + 64) = v7;
    uint64_t v8 = &v7[4 * (v6 >> 2)];
    *(void *)(a1 + 72) = v8;
    memcpy(v7, v5, v6);
    *(void *)(a1 + 64) = v8;
  }
  *(void *)(a1 + 40) = &unk_26F853C08;
  long long v9 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = v9;
  __n128 result = *(__n128 *)(a2 + 112);
  long long v11 = *(_OWORD *)(a2 + 128);
  long long v12 = *(_OWORD *)(a2 + 144);
  *(void *)(a1 + 158) = *(void *)(a2 + 158);
  *(_OWORD *)(a1 + 128) = v11;
  *(_OWORD *)(a1 + 144) = v12;
  *(__n128 *)(a1 + 112) = result;
  return result;
}

void ___ZN3AGX6DeviceINS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE32findOrCreateDriverProgramVariantINS1_25SWEndOfTileProgramVariantENS_19EndOfTileProgramKeyENS1_18SWEndOfTileProgramEEEPT_PT1_RKT0_P7NSArrayIPU27objcproto16MTLBinaryArchive11objc_objectE_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a3) {
    operator new();
  }
  uint64_t v5 = "MTLCompilerErrorTimeout";
  int64_t v6 = "UnknownErrorCode";
  if (a3 == 2) {
    int64_t v6 = "MTLCompilerErrorCompilationError";
  }
  if (a3 != 3) {
    uint64_t v5 = v6;
  }
  if (a3 == 1) {
    uint64_t v7 = "MTLCompilerErrorFatalError";
  }
  else {
    uint64_t v7 = v5;
  }
  long long v12 = 0;
  unint64_t v13 = 0;
  AGX::EndOfTileProgramKey::serialize(*(std::vector<unsigned int> **)(a1 + 48), (unsigned int **)&v12, &v13);
  uint64_t v8 = a4;
  long long v9 = v7;
  unint64_t v10 = v13;
  long long v11 = v12;
  _ZZZZN3AGX6DeviceINS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE49createTGOptimizationDriverShaderAndBufferIfNeededEP18AGXG17FamilyDeviceEUb_EUb_ENKUlvE_clB14_AGX__Crashed_Ev();
}

void sub_242A10280(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  AGX::HAL200::FragmentProgramVariantESLState::~FragmentProgramVariantESLState(v13);
  AGX::EndOfTileProgramVariantBase<AGX::HAL200::Encoders,AGX::HAL200::Classes>::~EndOfTileProgramVariantBase(v12);
  AGX::ProgramBindingRemap<AGX::HAL200::Encoders,AGX::HAL200::Classes>::~ProgramBindingRemap((uint64_t)&a12);
  MEMORY[0x24566ED90](v12, 0x10F2C408468EFAFLL);
  _Unwind_Resume(a1);
}

uint64_t AGX::Device<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::findOrCreateBlitProgramVariant(uint64_t a1, uint64_t a2)
{
  uint64_t v69 = *MEMORY[0x263EF8340];
  uint64_t v4 = (os_unfair_lock_s *)(a1 + 7724);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 7724));
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v53 = 0;
  uint64_t v54 = &v53;
  uint64_t v55 = 0x2020000000;
  uint64_t v56 = 0;
  int64_t v6 = (os_unfair_lock_s *)(v5 + 888);
  os_unfair_lock_lock((os_unfair_lock_t)(v5 + 888));
  uint64_t v7 = *(unsigned int *)(v5 + 560);
  uint64_t v8 = *(void *)(v5 + 552);
  if (v7)
  {
    uint64_t v9 = 0;
    long long v11 = (__int32 *)(v8 + 80);
    while (1)
    {
      v12.i32[0] = *v11;
      v12.i32[1] = *(v11 - 2);
      v12.i64[1] = *((void *)v11 - 5);
      v10.i64[1] = *(void *)(a2 + 40);
      v10.i32[1] = *(_DWORD *)(a2 + 72);
      v10.i32[0] = *(_DWORD *)(a2 + 80);
      if ((vmaxv_u8((uint8x8_t)vmovn_s16((int16x8_t)vmvnq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vceqq_s32(v12, v10), (int16x8_t)vceqq_s32(*((int32x4_t *)v11 - 2), *(int32x4_t *)(a2 + 48)))))) & 1) == 0&& *(v11 - 4) == *(_DWORD *)(a2 + 64)&& *(v11 - 3) == *(_DWORD *)(a2 + 68))
      {
        break;
      }
      v11 += 22;
      if (v7 == ++v9) {
        goto LABEL_11;
      }
    }
    uint64_t v14 = v8 + 48 * v9;
  }
  else
  {
LABEL_11:
    uint64_t v15 = *(void *)(v8 + 544);
    if (v15)
    {
      int32x4_t v16 = *(int32x4_t *)(a2 + 48);
      int v17 = *(_DWORD *)(a2 + 68);
      v20.i32[0] = *(_DWORD *)(a2 + 80);
      int v19 = *(_DWORD *)(a2 + 64);
      v20.i32[1] = *(_DWORD *)(a2 + 72);
      v20.i64[1] = *(void *)(a2 + 40);
      unsigned int v21 = 1;
      while (1)
      {
        v22.i32[0] = *(_DWORD *)(v15 + 80);
        v22.i32[1] = *(_DWORD *)(v15 + 72);
        v22.i64[1] = *(void *)(v15 + 40);
        if ((vmaxv_u8((uint8x8_t)vmovn_s16((int16x8_t)vmvnq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vceqq_s32(v22, v20), (int16x8_t)vceqq_s32(*(int32x4_t *)(v15 + 48), v16))))) & 1) == 0&& *(_DWORD *)(v15 + 64) == v19&& *(_DWORD *)(v15 + 68) == v17)
        {
          unsigned int v21 = 0;
          goto LABEL_36;
        }
        v24.i32[0] = *(_DWORD *)(v15 + 168);
        v24.i32[1] = *(_DWORD *)(v15 + 160);
        v24.i64[1] = *(void *)(v15 + 128);
        if ((vmaxv_u8((uint8x8_t)vmovn_s16((int16x8_t)vmvnq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vceqq_s32(v24, v20), (int16x8_t)vceqq_s32(*(int32x4_t *)(v15 + 136), v16))))) & 1) == 0&& *(_DWORD *)(v15 + 152) == v19&& *(_DWORD *)(v15 + 156) == v17)
        {
          goto LABEL_36;
        }
        v25.i32[0] = *(_DWORD *)(v15 + 256);
        v25.i32[1] = *(_DWORD *)(v15 + 248);
        v25.i64[1] = *(void *)(v15 + 216);
        if ((vmaxv_u8((uint8x8_t)vmovn_s16((int16x8_t)vmvnq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vceqq_s32(v25, v20), (int16x8_t)vceqq_s32(*(int32x4_t *)(v15 + 224), v16))))) & 1) == 0&& *(_DWORD *)(v15 + 240) == v19&& *(_DWORD *)(v15 + 244) == v17)
        {
          break;
        }
        v26.i32[0] = *(_DWORD *)(v15 + 344);
        v26.i32[1] = *(_DWORD *)(v15 + 336);
        v26.i64[1] = *(void *)(v15 + 304);
        v18.i64[1] = *(void *)(a2 + 40);
        v18.i32[1] = *(_DWORD *)(a2 + 72);
        v18.i32[0] = *(_DWORD *)(a2 + 80);
        if ((vmaxv_u8((uint8x8_t)vmovn_s16((int16x8_t)vmvnq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vceqq_s32(v26, v18), (int16x8_t)vceqq_s32(*(int32x4_t *)(v15 + 312), v16))))) & 1) == 0&& *(_DWORD *)(v15 + 328) == v19&& *(_DWORD *)(v15 + 332) == v17)
        {
          unsigned int v21 = 3;
          goto LABEL_36;
        }
        uint64_t v15 = *(void *)(v15 + 544);
        if (!v15) {
          goto LABEL_29;
        }
      }
      unsigned int v21 = 2;
    }
    else
    {
LABEL_29:
      if (v7 == 4) {
        operator new();
      }
      uint64_t v27 = v8 + 88 * v7;
      *(_DWORD *)(v27 + 8) = *(_DWORD *)(a2 + 8);
      if (v27 != a2) {
        std::vector<unsigned int>::__assign_with_size[abi:nn180100]<unsigned int *,unsigned int *>((void *)(v27 + 16), *(char **)(a2 + 16), *(char **)(a2 + 24), (uint64_t)(*(void *)(a2 + 24) - *(void *)(a2 + 16)) >> 2);
      }
      uint64_t v28 = v8 + 88 * v7;
      long long v29 = *(_OWORD *)(a2 + 40);
      long long v30 = *(_OWORD *)(a2 + 56);
      *(_OWORD *)(v28 + 68) = *(_OWORD *)(a2 + 68);
      *(_OWORD *)(v28 + 56) = v30;
      *(_OWORD *)(v28 + 40) = v29;
      uint64_t v15 = *(void *)(v5 + 552);
      unsigned int v21 = *(_DWORD *)(v5 + 560);
      *(_DWORD *)(v5 + 560) = v21 + 1;
    }
LABEL_36:
    uint64_t v14 = v15 + 48 * v21;
  }
  uint64_t v31 = v14 + 352;
  if (*(void *)(v14 + 352))
  {
    if (!*(unsigned char *)(v14 + 392))
    {
      os_unfair_lock_unlock(v6);
      dispatch_group_wait(*(dispatch_group_t *)v31, 0xFFFFFFFFFFFFFFFFLL);
      uint64_t v50 = *(void *)(v31 + 8);
      v54[3] = v50;
      goto LABEL_59;
    }
    uint64_t v32 = *(void *)(v14 + 360);
    if (v32) {
      (*(void (**)(uint64_t))(*(void *)v32 + 8))(v32);
    }
    *(void *)(v31 + 8) = 0;
    *(void *)(v31 + 16) = 0;

    *(void *)(v31 + 24) = 0;
    *(void *)(v31 + 32) = 0;
    *(unsigned char *)(v31 + 40) = 0;
    int8x16_t v33 = *(NSObject **)v31;
  }
  else
  {
    int8x16_t v33 = dispatch_group_create();
    *(void *)uint64_t v31 = v33;
  }
  dispatch_group_enter(v33);
  os_unfair_lock_unlock(v6);
  uint64_t v34 = *(void *)(a1 + 6008);
  v52[0] = MEMORY[0x263EF8330];
  v52[1] = 3221225472;
  v52[2] = ___ZN3AGX6DeviceINS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE32findOrCreateDriverProgramVariantINS1_26BlitFragmentProgramVariantENS_22BlitFragmentProgramKeyENS1_19BlitFragmentProgramEEEPT_PT1_RKT0_P7NSArrayIPU27objcproto16MTLBinaryArchive11objc_objectE_block_invoke;
  v52[3] = &unk_26516E8E0;
  v52[4] = &v53;
  v52[5] = a1;
  v52[6] = a2;
  v52[7] = v31;
  uint64_t v35 = *(void *)(v34 + 8);
  if ((*(unsigned int (**)(uint64_t))(*(void *)a2 + 24))(a2)) {
    uint64_t v36 = v35;
  }
  else {
    uint64_t v36 = 0;
  }
  int8x16_t v37 = objc_opt_new();
  [v37 setSync:1];
  [v37 setPipelineCache:v36];
  [v37 setBinaryArchives:0];
  v57[0] = MEMORY[0x263EF8330];
  v57[1] = 3221225472;
  v57[2] = ___ZN3AGX8Compiler14compileProgramINS_22BlitFragmentProgramKeyEEEvRKT_P7NSArrayIPU27objcproto16MTLBinaryArchive11objc_objectEU13block_pointerFvRK20AGCDeserializedReply16MTLCompilerErrorP8NSStringEb_block_invoke;
  v57[3] = &unk_26516F7C0;
  v57[4] = v52;
  size_t v58 = 0;
  int v59 = 0;
  (*(void (**)(uint64_t, const void **, size_t *))(*(void *)a2 + 16))(a2, &v59, &v58);
  unsigned __int32 v38 = dispatch_data_create(v59, v58, 0, 0);
  [v37 setDriverKeyData:v38];
  if ([v37 airScript])
  {
    uint64_t v39 = [v37 airScript];
    long long v67 = 0uLL;
    v68[0] = 0;
    *(void *)&long long v67 = dispatch_data_create_map(v39, (const void **)&v67 + 1, v68);
    uint64_t v40 = *((void *)&v67 + 1);
    uint64_t v41 = **((_DWORD **)&v67 + 1);
    CC_SHA256_Init(&c);
    (**(void (***)(uint64_t, CC_SHA256_CTX *))a2)(a2, &c);
    *(void *)leuint64_t n = 0;
    uintptr_t data = 0;
    if (AGX::GetSerializedVertexFormat((AGX *)(v40 + v41), &data, (size_t *)len, v42, v43))
    {
      uint64_t v44 = data;
      CC_SHA256_Update(&c, data, len[0]);
      free(v44);
    }
    CC_SHA256_Final(md, &c);
    dispatch_release((dispatch_object_t)v67);
    long long v67 = *(_OWORD *)md;
    *(_OWORD *)unint64_t v68 = v64;
    [v37 setVendorPluginFunctionId:&v67];
  }
  *(void *)c.count = MEMORY[0x263EF8330];
  *(void *)c.hash = 3221225472;
  *(void *)&c.hash[2] = ___ZN3AGX8Compiler14compileProgramINS_22BlitFragmentProgramKeyE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke;
  *(void *)&c.hash[4] = &unk_26516F810;
  *(void *)&c.hash[6] = v37;
  *(void *)c.wbuf = v57;
  if ([v37 function])
  {
    uint64_t v45 = mach_absolute_time();
    int8x16_t v46 = *(void **)v34;
    *(void *)md = MEMORY[0x263EF8330];
    *(void *)&md[8] = 3221225472;
    *(void *)&long long v64 = ___ZN3AGX8Compiler14compileProgramINS_22BlitFragmentProgramKeyE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke_4;
    *((void *)&v64 + 1) = &unk_26516F860;
    p_CC_SHA256_CTX c = &c;
    uint64_t v66 = v45;
    [v46 compileFunctionRequest:v37 completionHandler:md];
  }
  else
  {
    if ([v37 frameworkData] || objc_msgSend(v37, "pipelineOptions")) {
      AGX::Compiler::compileProgram<AGX::UserIntersectionProgramKey,AGCReplyArray>(AGX::UserIntersectionProgramKey const&,MTLCompileFunctionRequestData *,void({block_pointer})(AGCReplyArray const&,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,MTLCompilerError,NSString *,unsigned long long))::{lambda(void)#1}::operator()[abi:[AGX] Failed assertion __requestData.frameworkData && _requestData.pipelineOptions_]();
    }
    *(void *)md = MEMORY[0x263EF8330];
    *(void *)&md[8] = 3221225472;
    *(void *)&long long v64 = ___ZN3AGX8Compiler14compileProgramINS_22BlitFragmentProgramKeyE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke_3;
    *((void *)&v64 + 1) = &unk_26516F838;
    p_CC_SHA256_CTX c = &c;
    uint64_t v47 = objc_msgSend((id)objc_msgSend(v37, "binaryArchives"), "count");
    int64_t v48 = *(void **)v34;
    uint64_t v49 = [v37 driverKeyData];
    if (v47) {
      objc_msgSend(v48, "compileRequest:binaryArchives:failOnBinaryArchiveMiss:pipelineCache:sync:completionHandler:", v49, objc_msgSend(v37, "binaryArchives"), 0, objc_msgSend(v37, "pipelineCache"), objc_msgSend(v37, "sync"), md);
    }
    else {
      objc_msgSend(v48, "compileRequest:pipelineCache:sync:completionHandler:", v49, objc_msgSend(v37, "pipelineCache"), objc_msgSend(v37, "sync"), md);
    }
  }
  dispatch_release(v38);

  uint64_t v50 = v54[3];
LABEL_59:
  if (!v50)
  {
    MTLReleaseAssertionFailure();
    __break(1u);
  }
  _Block_object_dispose(&v53, 8);
  os_unfair_lock_unlock(v4);
  return v50;
}

{
  os_unfair_lock_s *v4;
  uint64_t v5;
  os_unfair_lock_s *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int *v10;
  int v11;
  uint64_t v12;
  int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  NSObject *v26;
  NSObject *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t *v30;
  char **v31;
  void *v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  void v40[8];
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  void v45[5];
  size_t v46;
  const void *v47;
  CC_LONG len[2];
  void *data;
  CC_SHA256_CTX c;
  unsigned __int8 md[16];
  long long v52;
  CC_SHA256_CTX *p_c;
  uint64_t v54;
  long long v55;
  size_t v56[3];
  uint64_t v57;

  unint64_t v57 = *MEMORY[0x263EF8340];
  uint64_t v41 = 0;
  uint64_t v42 = &v41;
  int64_t v43 = 0x2020000000;
  uint64_t v44 = 0;
  uint64_t v4 = (os_unfair_lock_s *)(a1 + 7720);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 7720));
  uint64_t v5 = *(void *)(a1 + 24);
  int64_t v6 = (os_unfair_lock_s *)(v5 + 728);
  os_unfair_lock_lock((os_unfair_lock_t)(v5 + 728));
  uint64_t v7 = *(unsigned int *)(v5 + 400);
  uint64_t v8 = *(void *)(v5 + 392);
  if (v7)
  {
    uint64_t v9 = 0;
    int32x4_t v10 = (int *)(v8 + 40);
    while (1)
    {
      long long v11 = *v10;
      v10 += 12;
      if (*(_DWORD *)(a2 + 40) == v11) {
        break;
      }
      if (v7 == ++v9) {
        goto LABEL_5;
      }
    }
    int32x4_t v18 = v8 + 48 * v9;
  }
  else
  {
LABEL_5:
    int32x4_t v12 = *(void *)(v8 + 384);
    if (v12)
    {
      unint64_t v13 = *(_DWORD *)(a2 + 40);
      uint64_t v14 = 1;
      while (1)
      {
        if (v13 == *(_DWORD *)(v12 + 40))
        {
          uint64_t v14 = 0;
          goto LABEL_21;
        }
        if (v13 == *(_DWORD *)(v12 + 88)) {
          goto LABEL_21;
        }
        if (v13 == *(_DWORD *)(v12 + 136))
        {
          uint64_t v14 = 2;
          goto LABEL_21;
        }
        if (v13 == *(_DWORD *)(v12 + 184)) {
          break;
        }
        int32x4_t v12 = *(void *)(v12 + 384);
        if (!v12) {
          goto LABEL_12;
        }
      }
      uint64_t v14 = 3;
LABEL_21:
      int32x4_t v18 = v12 + 48 * v14;
    }
    else
    {
LABEL_12:
      if (v7 == 4) {
        operator new();
      }
      uint64_t v15 = v8 + 48 * v7;
      *(_DWORD *)(v15 + 8) = *(_DWORD *)(a2 + 8);
      if (v15 != a2) {
        std::vector<unsigned int>::__assign_with_size[abi:nn180100]<unsigned int *,unsigned int *>((void *)(v15 + 16), *(char **)(a2 + 16), *(char **)(a2 + 24), (uint64_t)(*(void *)(a2 + 24) - *(void *)(a2 + 16)) >> 2);
      }
      *(_DWORD *)(v8 + 48 * v7 + 40) = *(_DWORD *)(a2 + 40);
      int32x4_t v16 = *(void *)(v5 + 392);
      int v17 = *(_DWORD *)(v5 + 400);
      *(_DWORD *)(v5 + 400) = v17 + 1;
      int32x4_t v18 = v16 + 48 * v17;
    }
  }
  int v19 = v18 + 192;
  if (*(void *)(v18 + 192))
  {
    if (!*(unsigned char *)(v18 + 232))
    {
      os_unfair_lock_unlock(v6);
      v42[3] = *(void *)(v19 + 8);
      goto LABEL_44;
    }
    int32x4_t v20 = *(void *)(v18 + 200);
    if (v20) {
      (*(void (**)(uint64_t))(*(void *)v20 + 8))(v20);
    }
    *(void *)(v19 + 8) = 0;
    *(void *)(v19 + 16) = 0;

    *(void *)(v19 + 24) = 0;
    *(void *)(v19 + 32) = 0;
    *(unsigned char *)(v19 + 40) = 0;
    unsigned int v21 = *(NSObject **)v19;
  }
  else
  {
    unsigned int v21 = dispatch_group_create();
    *(void *)int v19 = v21;
  }
  dispatch_group_enter(v21);
  os_unfair_lock_unlock(v6);
  int32x4_t v22 = *(void *)(a1 + 6008);
  v40[0] = MEMORY[0x263EF8330];
  v40[1] = 3221225472;
  v40[2] = ___ZN3AGX6DeviceINS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE30findOrCreateBlitProgramVariantERNS_20BlitVertexProgramKeyE_block_invoke;
  v40[3] = &unk_26516E8E0;
  v40[4] = &v41;
  v40[5] = a1;
  v40[6] = a2;
  v40[7] = v19;
  unsigned int v23 = *(void *)(v22 + 8);
  if ((*(unsigned int (**)(uint64_t))(*(void *)a2 + 24))(a2)) {
    int32x4_t v24 = v23;
  }
  else {
    int32x4_t v24 = 0;
  }
  int32x4_t v25 = objc_opt_new();
  [v25 setSync:1];
  [v25 setPipelineCache:v24];
  [v25 setBinaryArchives:0];
  v45[0] = MEMORY[0x263EF8330];
  v45[1] = 3221225472;
  v45[2] = ___ZN3AGX8Compiler14compileProgramINS_20BlitVertexProgramKeyEEEvRKT_P7NSArrayIPU27objcproto16MTLBinaryArchive11objc_objectEU13block_pointerFvRK20AGCDeserializedReply16MTLCompilerErrorP8NSStringEb_block_invoke;
  v45[3] = &unk_26516F7C0;
  v45[4] = v40;
  int8x16_t v46 = 0;
  uint64_t v47 = 0;
  (*(void (**)(uint64_t, const void **, size_t *))(*(void *)a2 + 16))(a2, &v47, &v46);
  int32x4_t v26 = dispatch_data_create(v47, v46, 0, 0);
  [v25 setDriverKeyData:v26];
  if ([v25 airScript])
  {
    uint64_t v27 = [v25 airScript];
    uint64_t v55 = 0uLL;
    v56[0] = 0;
    *(void *)&uint64_t v55 = dispatch_data_create_map(v27, (const void **)&v55 + 1, v56);
    uint64_t v28 = *((void *)&v55 + 1);
    long long v29 = **((_DWORD **)&v55 + 1);
    CC_SHA256_Init(&c);
    (**(void (***)(uint64_t, CC_SHA256_CTX *))a2)(a2, &c);
    *(void *)leuint64_t n = 0;
    uintptr_t data = 0;
    if (AGX::GetSerializedVertexFormat((AGX *)(v28 + v29), &data, (size_t *)len, v30, v31))
    {
      uint64_t v32 = data;
      CC_SHA256_Update(&c, data, len[0]);
      free(v32);
    }
    CC_SHA256_Final(md, &c);
    dispatch_release((dispatch_object_t)v55);
    uint64_t v55 = *(_OWORD *)md;
    *(_OWORD *)uint64_t v56 = v52;
    [v25 setVendorPluginFunctionId:&v55];
  }
  *(void *)c.count = MEMORY[0x263EF8330];
  *(void *)c.hash = 3221225472;
  *(void *)&c.hash[2] = ___ZN3AGX8Compiler14compileProgramINS_20BlitVertexProgramKeyE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke;
  *(void *)&c.hash[4] = &unk_26516F810;
  *(void *)&c.hash[6] = v25;
  *(void *)c.wbuf = v45;
  if ([v25 function])
  {
    int8x16_t v33 = mach_absolute_time();
    uint64_t v34 = *(void **)v22;
    *(void *)md = MEMORY[0x263EF8330];
    *(void *)&md[8] = 3221225472;
    *(void *)&long long v52 = ___ZN3AGX8Compiler14compileProgramINS_20BlitVertexProgramKeyE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke_4;
    *((void *)&v52 + 1) = &unk_26516F860;
    p_CC_SHA256_CTX c = &c;
    uint64_t v54 = v33;
    [v34 compileFunctionRequest:v25 completionHandler:md];
  }
  else
  {
    if ([v25 frameworkData] || objc_msgSend(v25, "pipelineOptions")) {
      AGX::Compiler::compileProgram<AGX::UserIntersectionProgramKey,AGCReplyArray>(AGX::UserIntersectionProgramKey const&,MTLCompileFunctionRequestData *,void({block_pointer})(AGCReplyArray const&,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,MTLCompilerError,NSString *,unsigned long long))::{lambda(void)#1}::operator()[abi:[AGX] Failed assertion __requestData.frameworkData && _requestData.pipelineOptions_]();
    }
    *(void *)md = MEMORY[0x263EF8330];
    *(void *)&md[8] = 3221225472;
    *(void *)&long long v52 = ___ZN3AGX8Compiler14compileProgramINS_20BlitVertexProgramKeyE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke_3;
    *((void *)&v52 + 1) = &unk_26516F838;
    p_CC_SHA256_CTX c = &c;
    uint64_t v35 = objc_msgSend((id)objc_msgSend(v25, "binaryArchives"), "count");
    uint64_t v36 = *(void **)v22;
    int8x16_t v37 = [v25 driverKeyData];
    if (v35) {
      objc_msgSend(v36, "compileRequest:binaryArchives:failOnBinaryArchiveMiss:pipelineCache:sync:completionHandler:", v37, objc_msgSend(v25, "binaryArchives"), 0, objc_msgSend(v25, "pipelineCache"), objc_msgSend(v25, "sync"), md);
    }
    else {
      objc_msgSend(v36, "compileRequest:pipelineCache:sync:completionHandler:", v37, objc_msgSend(v25, "pipelineCache"), objc_msgSend(v25, "sync"), md);
    }
  }
  dispatch_release(v26);

LABEL_44:
  os_unfair_lock_unlock(v4);
  unsigned __int32 v38 = v42[3];
  _Block_object_dispose(&v41, 8);
  return v38;
}

{
  os_unfair_lock_s *v4;
  uint64_t v5;
  os_unfair_lock_s *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  _DWORD *v15;
  _OWORD *v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v36;
  uint64_t v37;
  long long v38;
  long long v39;
  uint64_t v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  NSObject *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  NSObject *v49;
  NSObject *v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t *v53;
  char **v54;
  void *v55;
  uint64_t v56;
  void *v57;
  uint64_t v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  void v63[8];
  uint64_t v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t v67;
  void v68[5];
  size_t v69;
  const void *v70;
  CC_LONG len[2];
  void *data;
  CC_SHA256_CTX c;
  unsigned __int8 md[16];
  long long v75;
  CC_SHA256_CTX *p_c;
  uint64_t v77;
  long long v78;
  size_t v79[3];
  uint64_t v80;

  uint64_t v80 = *MEMORY[0x263EF8340];
  uint64_t v4 = (os_unfair_lock_s *)(a1 + 7728);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 7728));
  uint64_t v5 = *(void *)(a1 + 32);
  long long v64 = 0;
  char v65 = &v64;
  uint64_t v66 = 0x2020000000;
  long long v67 = 0;
  int64_t v6 = (os_unfair_lock_s *)(v5 + 888);
  os_unfair_lock_lock((os_unfair_lock_t)(v5 + 888));
  uint64_t v7 = *(unsigned int *)(v5 + 560);
  uint64_t v8 = *(void *)(v5 + 552);
  if (!v7)
  {
    uint64_t v9 = *(_DWORD *)(a2 + 72);
    int32x4_t v10 = *(_DWORD *)(a2 + 80);
LABEL_15:
    int v17 = (_OWORD *)(a2 + 40);
    if ((_BYTE)v9)
    {
      int32x4_t v18 = 1;
      int v19 = *(void *)(v5 + 552);
      while (1)
      {
        int v19 = *(void *)(v19 + 544);
        if (!v19) {
          break;
        }
        int32x4_t v20 = 0;
        unsigned int v21 = v9;
        do
        {
          int32x4_t v22 = __clz(__rbit32(v21));
          v20 |= (*(_DWORD *)(v19 + 40 + 4 * v22) ^ *((_DWORD *)v17 + v22));
          v21 &= ~(1 << v22);
        }
        while (v21);
        if (!(v20 | *(_DWORD *)(v19 + 80) ^ v10 | *(_DWORD *)(v19 + 72) ^ v9)) {
          goto LABEL_55;
        }
        unsigned int v23 = 0;
        int32x4_t v24 = v9;
        do
        {
          int32x4_t v25 = __clz(__rbit32(v24));
          v23 |= (*(_DWORD *)(v19 + 128 + 4 * v25) ^ *((_DWORD *)v17 + v25));
          v24 &= ~(1 << v25);
        }
        while (v24);
        if (!(v23 | *(_DWORD *)(v19 + 168) ^ v10 | *(_DWORD *)(v19 + 160) ^ v9)) {
          goto LABEL_57;
        }
        int32x4_t v26 = 0;
        uint64_t v27 = v9;
        do
        {
          uint64_t v28 = __clz(__rbit32(v27));
          v26 |= (*(_DWORD *)(v19 + 216 + 4 * v28) ^ *((_DWORD *)v17 + v28));
          v27 &= ~(1 << v28);
        }
        while (v27);
        if (!(v26 | *(_DWORD *)(v19 + 256) ^ v10 | *(_DWORD *)(v19 + 248) ^ v9)) {
          goto LABEL_56;
        }
        long long v29 = 0;
        long long v30 = v9;
        do
        {
          uint64_t v31 = __clz(__rbit32(v30));
          v29 |= (*(_DWORD *)(v19 + 304 + 4 * v31) ^ *((_DWORD *)v17 + v31));
          v30 &= ~(1 << v31);
        }
        while (v30);
        if (!(v29 | *(_DWORD *)(v19 + 344) ^ v10 | *(_DWORD *)(v19 + 336) ^ v9)) {
          goto LABEL_49;
        }
      }
    }
    else
    {
      int v19 = *(void *)(v8 + 544);
      if (v19)
      {
        int32x4_t v18 = 1;
        while (1)
        {
          if (*(_DWORD *)(v19 + 80) == v10 && *(_DWORD *)(v19 + 72) == v9)
          {
LABEL_55:
            int32x4_t v18 = 0;
            goto LABEL_57;
          }
          if (*(_DWORD *)(v19 + 168) == v10 && *(_DWORD *)(v19 + 160) == v9) {
            goto LABEL_57;
          }
          if (*(_DWORD *)(v19 + 256) == v10 && *(_DWORD *)(v19 + 248) == v9) {
            break;
          }
          if (*(_DWORD *)(v19 + 344) == v10 && *(_DWORD *)(v19 + 336) == v9)
          {
LABEL_49:
            int32x4_t v18 = 3;
            goto LABEL_57;
          }
          int v19 = *(void *)(v19 + 544);
          if (!v19) {
            goto LABEL_50;
          }
        }
LABEL_56:
        int32x4_t v18 = 2;
LABEL_57:
        uint64_t v32 = v19 + 48 * v18;
        goto LABEL_58;
      }
    }
LABEL_50:
    if (v7 == 4) {
      operator new();
    }
    uint64_t v36 = v8 + 88 * v7;
    *(_DWORD *)(v36 + 8) = *(_DWORD *)(a2 + 8);
    if (v36 != a2) {
      std::vector<unsigned int>::__assign_with_size[abi:nn180100]<unsigned int *,unsigned int *>((void *)(v36 + 16), *(char **)(a2 + 16), *(char **)(a2 + 24), (uint64_t)(*(void *)(a2 + 24) - *(void *)(a2 + 16)) >> 2);
    }
    int8x16_t v37 = v8 + 88 * v7;
    unsigned __int32 v38 = *v17;
    uint64_t v39 = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(v37 + 68) = *(_OWORD *)(a2 + 68);
    *(_OWORD *)(v37 + 56) = v39;
    *(_OWORD *)(v37 + 40) = v38;
    uint64_t v40 = *(void *)(v5 + 552);
    uint64_t v41 = *(_DWORD *)(v5 + 560);
    *(_DWORD *)(v5 + 560) = v41 + 1;
    uint64_t v32 = v40 + 48 * v41;
    goto LABEL_58;
  }
  uint64_t v9 = *(_DWORD *)(a2 + 72);
  int32x4_t v10 = *(_DWORD *)(a2 + 80);
  long long v11 = 0;
  if ((_BYTE)v9)
  {
    while (1)
    {
      int32x4_t v12 = 0;
      unint64_t v13 = *(_DWORD *)(a2 + 72);
      do
      {
        uint64_t v14 = __clz(__rbit32(v13));
        v12 |= (*(_DWORD *)(v8 + 88 * v11 + 40 + 4 * v14) ^ *(_DWORD *)(a2 + 40 + 4 * v14));
        v13 &= ~(1 << v14);
      }
      while (v13);
      if (!(v12 | *(_DWORD *)(v8 + 88 * v11 + 80) ^ v10 | *(_DWORD *)(v8 + 88 * v11 + 72) ^ v9)) {
        break;
      }
      if (++v11 == v7) {
        goto LABEL_15;
      }
    }
  }
  else
  {
    uint64_t v15 = (_DWORD *)(v8 + 80);
    while (*v15 != v10 || *(v15 - 2) != v9)
    {
      v15 += 22;
      if (v7 == ++v11) {
        goto LABEL_15;
      }
    }
  }
  uint64_t v32 = v8 + 48 * v11;
LABEL_58:
  uint64_t v42 = v32 + 352;
  if (*(void *)(v32 + 352))
  {
    if (!*(unsigned char *)(v32 + 392))
    {
      os_unfair_lock_unlock(v6);
      dispatch_group_wait(*(dispatch_group_t *)v42, 0xFFFFFFFFFFFFFFFFLL);
      long long v61 = *(void *)(v42 + 8);
      v65[3] = v61;
      goto LABEL_80;
    }
    int64_t v43 = *(void *)(v32 + 360);
    if (v43) {
      (*(void (**)(uint64_t))(*(void *)v43 + 8))(v43);
    }
    *(void *)(v42 + 8) = 0;
    *(void *)(v42 + 16) = 0;

    *(void *)(v42 + 24) = 0;
    *(void *)(v42 + 32) = 0;
    *(unsigned char *)(v42 + 40) = 0;
    uint64_t v44 = *(NSObject **)v42;
  }
  else
  {
    uint64_t v44 = dispatch_group_create();
    *(void *)uint64_t v42 = v44;
  }
  dispatch_group_enter(v44);
  os_unfair_lock_unlock(v6);
  uint64_t v45 = *(void *)(a1 + 6008);
  v63[0] = MEMORY[0x263EF8330];
  v63[1] = 3221225472;
  v63[2] = ___ZN3AGX6DeviceINS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE32findOrCreateDriverProgramVariantINS1_25BlitComputeProgramVariantENS_21BlitComputeProgramKeyENS1_18BlitComputeProgramEEEPT_PT1_RKT0_P7NSArrayIPU27objcproto16MTLBinaryArchive11objc_objectE_block_invoke;
  v63[3] = &unk_26516E8E0;
  v63[4] = &v64;
  v63[5] = a1;
  v63[6] = a2;
  v63[7] = v42;
  int8x16_t v46 = *(void *)(v45 + 8);
  if ((*(unsigned int (**)(uint64_t))(*(void *)a2 + 24))(a2)) {
    uint64_t v47 = v46;
  }
  else {
    uint64_t v47 = 0;
  }
  int64_t v48 = objc_opt_new();
  [v48 setSync:1];
  [v48 setPipelineCache:v47];
  [v48 setBinaryArchives:0];
  v68[0] = MEMORY[0x263EF8330];
  v68[1] = 3221225472;
  v68[2] = ___ZN3AGX8Compiler14compileProgramINS_21BlitComputeProgramKeyEEEvRKT_P7NSArrayIPU27objcproto16MTLBinaryArchive11objc_objectEU13block_pointerFvRK20AGCDeserializedReply16MTLCompilerErrorP8NSStringEb_block_invoke;
  size_t v68[3] = &unk_26516F7C0;
  v68[4] = v63;
  uint64_t v69 = 0;
  unint64_t v70 = 0;
  (*(void (**)(uint64_t, const void **, size_t *))(*(void *)a2 + 16))(a2, &v70, &v69);
  uint64_t v49 = dispatch_data_create(v70, v69, 0, 0);
  [v48 setDriverKeyData:v49];
  if ([v48 airScript])
  {
    uint64_t v50 = [v48 airScript];
    std::vector<unsigned int> v78 = 0uLL;
    v79[0] = 0;
    *(void *)&std::vector<unsigned int> v78 = dispatch_data_create_map(v50, (const void **)&v78 + 1, v79);
    long long v51 = *((void *)&v78 + 1);
    long long v52 = **((_DWORD **)&v78 + 1);
    CC_SHA256_Init(&c);
    (**(void (***)(uint64_t, CC_SHA256_CTX *))a2)(a2, &c);
    *(void *)leuint64_t n = 0;
    uintptr_t data = 0;
    if (AGX::GetSerializedVertexFormat((AGX *)(v51 + v52), &data, (size_t *)len, v53, v54))
    {
      uint64_t v55 = data;
      CC_SHA256_Update(&c, data, len[0]);
      free(v55);
    }
    CC_SHA256_Final(md, &c);
    dispatch_release((dispatch_object_t)v78);
    std::vector<unsigned int> v78 = *(_OWORD *)md;
    *(_OWORD *)uint64_t v79 = v75;
    [v48 setVendorPluginFunctionId:&v78];
  }
  *(void *)c.count = MEMORY[0x263EF8330];
  *(void *)c.hash = 3221225472;
  *(void *)&c.hash[2] = ___ZN3AGX8Compiler14compileProgramINS_21BlitComputeProgramKeyE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke;
  *(void *)&c.hash[4] = &unk_26516F810;
  *(void *)&c.hash[6] = v48;
  *(void *)c.wbuf = v68;
  if ([v48 function])
  {
    uint64_t v56 = mach_absolute_time();
    unint64_t v57 = *(void **)v45;
    *(void *)md = MEMORY[0x263EF8330];
    *(void *)&md[8] = 3221225472;
    *(void *)&int8x16_t v75 = ___ZN3AGX8Compiler14compileProgramINS_21BlitComputeProgramKeyE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke_4;
    *((void *)&v75 + 1) = &unk_26516F860;
    p_CC_SHA256_CTX c = &c;
    uint64_t v77 = v56;
    [v57 compileFunctionRequest:v48 completionHandler:md];
  }
  else
  {
    if ([v48 frameworkData] || objc_msgSend(v48, "pipelineOptions")) {
      AGX::Compiler::compileProgram<AGX::UserIntersectionProgramKey,AGCReplyArray>(AGX::UserIntersectionProgramKey const&,MTLCompileFunctionRequestData *,void({block_pointer})(AGCReplyArray const&,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,MTLCompilerError,NSString *,unsigned long long))::{lambda(void)#1}::operator()[abi:[AGX] Failed assertion __requestData.frameworkData && _requestData.pipelineOptions_]();
    }
    *(void *)md = MEMORY[0x263EF8330];
    *(void *)&md[8] = 3221225472;
    *(void *)&int8x16_t v75 = ___ZN3AGX8Compiler14compileProgramINS_21BlitComputeProgramKeyE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke_3;
    *((void *)&v75 + 1) = &unk_26516F838;
    p_CC_SHA256_CTX c = &c;
    size_t v58 = objc_msgSend((id)objc_msgSend(v48, "binaryArchives"), "count");
    int v59 = *(void **)v45;
    long long v60 = [v48 driverKeyData];
    if (v58) {
      objc_msgSend(v59, "compileRequest:binaryArchives:failOnBinaryArchiveMiss:pipelineCache:sync:completionHandler:", v60, objc_msgSend(v48, "binaryArchives"), 0, objc_msgSend(v48, "pipelineCache"), objc_msgSend(v48, "sync"), md);
    }
    else {
      objc_msgSend(v59, "compileRequest:pipelineCache:sync:completionHandler:", v60, objc_msgSend(v48, "pipelineCache"), objc_msgSend(v48, "sync"), md);
    }
  }
  dispatch_release(v49);

  long long v61 = v65[3];
LABEL_80:
  if (!v61)
  {
    MTLReleaseAssertionFailure();
    __break(1u);
  }
  _Block_object_dispose(&v64, 8);
  os_unfair_lock_unlock(v4);
  return v61;
}

{
  os_unfair_lock_s *v4;
  uint64_t v5;
  os_unfair_lock_s *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int *v10;
  int v11;
  uint64_t v12;
  int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  NSObject *v26;
  NSObject *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t *v30;
  char **v31;
  void *v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  void v40[8];
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  void v45[5];
  size_t v46;
  const void *v47;
  CC_LONG len[2];
  void *data;
  CC_SHA256_CTX c;
  unsigned __int8 md[16];
  long long v52;
  CC_SHA256_CTX *p_c;
  uint64_t v54;
  long long v55;
  size_t v56[3];
  uint64_t v57;

  unint64_t v57 = *MEMORY[0x263EF8340];
  uint64_t v4 = (os_unfair_lock_s *)(a1 + 7732);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 7732));
  uint64_t v5 = *(void *)(a1 + 40);
  uint64_t v41 = 0;
  uint64_t v42 = &v41;
  int64_t v43 = 0x2020000000;
  uint64_t v44 = 0;
  int64_t v6 = (os_unfair_lock_s *)(v5 + 728);
  os_unfair_lock_lock((os_unfair_lock_t)(v5 + 728));
  uint64_t v7 = *(unsigned int *)(v5 + 400);
  uint64_t v8 = *(void *)(v5 + 392);
  if (v7)
  {
    uint64_t v9 = 0;
    int32x4_t v10 = (int *)(v8 + 40);
    while (1)
    {
      long long v11 = *v10;
      v10 += 12;
      if (*(_DWORD *)(a2 + 40) == v11) {
        break;
      }
      if (v7 == ++v9) {
        goto LABEL_5;
      }
    }
    int32x4_t v18 = v8 + 48 * v9;
  }
  else
  {
LABEL_5:
    int32x4_t v12 = *(void *)(v8 + 384);
    if (v12)
    {
      unint64_t v13 = *(_DWORD *)(a2 + 40);
      uint64_t v14 = 1;
      while (1)
      {
        if (v13 == *(_DWORD *)(v12 + 40))
        {
          uint64_t v14 = 0;
          goto LABEL_21;
        }
        if (v13 == *(_DWORD *)(v12 + 88)) {
          goto LABEL_21;
        }
        if (v13 == *(_DWORD *)(v12 + 136))
        {
          uint64_t v14 = 2;
          goto LABEL_21;
        }
        if (v13 == *(_DWORD *)(v12 + 184)) {
          break;
        }
        int32x4_t v12 = *(void *)(v12 + 384);
        if (!v12) {
          goto LABEL_12;
        }
      }
      uint64_t v14 = 3;
LABEL_21:
      int32x4_t v18 = v12 + 48 * v14;
    }
    else
    {
LABEL_12:
      if (v7 == 4) {
        operator new();
      }
      uint64_t v15 = v8 + 48 * v7;
      *(_DWORD *)(v15 + 8) = *(_DWORD *)(a2 + 8);
      if (v15 != a2) {
        std::vector<unsigned int>::__assign_with_size[abi:nn180100]<unsigned int *,unsigned int *>((void *)(v15 + 16), *(char **)(a2 + 16), *(char **)(a2 + 24), (uint64_t)(*(void *)(a2 + 24) - *(void *)(a2 + 16)) >> 2);
      }
      *(_DWORD *)(v8 + 48 * v7 + 40) = *(_DWORD *)(a2 + 40);
      int32x4_t v16 = *(void *)(v5 + 392);
      int v17 = *(_DWORD *)(v5 + 400);
      *(_DWORD *)(v5 + 400) = v17 + 1;
      int32x4_t v18 = v16 + 48 * v17;
    }
  }
  int v19 = v18 + 192;
  if (*(void *)(v18 + 192))
  {
    if (!*(unsigned char *)(v18 + 232))
    {
      os_unfair_lock_unlock(v6);
      dispatch_group_wait(*(dispatch_group_t *)v19, 0xFFFFFFFFFFFFFFFFLL);
      unsigned __int32 v38 = *(void *)(v19 + 8);
      v42[3] = v38;
      goto LABEL_44;
    }
    int32x4_t v20 = *(void *)(v18 + 200);
    if (v20) {
      (*(void (**)(uint64_t))(*(void *)v20 + 8))(v20);
    }
    *(void *)(v19 + 8) = 0;
    *(void *)(v19 + 16) = 0;

    *(void *)(v19 + 24) = 0;
    *(void *)(v19 + 32) = 0;
    *(unsigned char *)(v19 + 40) = 0;
    unsigned int v21 = *(NSObject **)v19;
  }
  else
  {
    unsigned int v21 = dispatch_group_create();
    *(void *)int v19 = v21;
  }
  dispatch_group_enter(v21);
  os_unfair_lock_unlock(v6);
  int32x4_t v22 = *(void *)(a1 + 6008);
  v40[0] = MEMORY[0x263EF8330];
  v40[1] = 3221225472;
  v40[2] = ___ZN3AGX6DeviceINS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE32findOrCreateDriverProgramVariantINS1_25BlitComputeProgramVariantENS_20BlitSparseProgramKeyENS1_17BlitSparseProgramEEEPT_PT1_RKT0_P7NSArrayIPU27objcproto16MTLBinaryArchive11objc_objectE_block_invoke;
  v40[3] = &unk_26516E8E0;
  v40[4] = &v41;
  v40[5] = a1;
  v40[6] = a2;
  v40[7] = v19;
  unsigned int v23 = *(void *)(v22 + 8);
  if ((*(unsigned int (**)(uint64_t))(*(void *)a2 + 24))(a2)) {
    int32x4_t v24 = v23;
  }
  else {
    int32x4_t v24 = 0;
  }
  int32x4_t v25 = objc_opt_new();
  [v25 setSync:1];
  [v25 setPipelineCache:v24];
  [v25 setBinaryArchives:0];
  v45[0] = MEMORY[0x263EF8330];
  v45[1] = 3221225472;
  v45[2] = ___ZN3AGX8Compiler14compileProgramINS_20BlitSparseProgramKeyEEEvRKT_P7NSArrayIPU27objcproto16MTLBinaryArchive11objc_objectEU13block_pointerFvRK20AGCDeserializedReply16MTLCompilerErrorP8NSStringEb_block_invoke;
  v45[3] = &unk_26516F7C0;
  v45[4] = v40;
  int8x16_t v46 = 0;
  uint64_t v47 = 0;
  (*(void (**)(uint64_t, const void **, size_t *))(*(void *)a2 + 16))(a2, &v47, &v46);
  int32x4_t v26 = dispatch_data_create(v47, v46, 0, 0);
  [v25 setDriverKeyData:v26];
  if ([v25 airScript])
  {
    uint64_t v27 = [v25 airScript];
    uint64_t v55 = 0uLL;
    v56[0] = 0;
    *(void *)&uint64_t v55 = dispatch_data_create_map(v27, (const void **)&v55 + 1, v56);
    uint64_t v28 = *((void *)&v55 + 1);
    long long v29 = **((_DWORD **)&v55 + 1);
    CC_SHA256_Init(&c);
    (**(void (***)(uint64_t, CC_SHA256_CTX *))a2)(a2, &c);
    *(void *)leuint64_t n = 0;
    uintptr_t data = 0;
    if (AGX::GetSerializedVertexFormat((AGX *)(v28 + v29), &data, (size_t *)len, v30, v31))
    {
      uint64_t v32 = data;
      CC_SHA256_Update(&c, data, len[0]);
      free(v32);
    }
    CC_SHA256_Final(md, &c);
    dispatch_release((dispatch_object_t)v55);
    uint64_t v55 = *(_OWORD *)md;
    *(_OWORD *)uint64_t v56 = v52;
    [v25 setVendorPluginFunctionId:&v55];
  }
  *(void *)c.count = MEMORY[0x263EF8330];
  *(void *)c.hash = 3221225472;
  *(void *)&c.hash[2] = ___ZN3AGX8Compiler14compileProgramINS_20BlitSparseProgramKeyE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke;
  *(void *)&c.hash[4] = &unk_26516F810;
  *(void *)&c.hash[6] = v25;
  *(void *)c.wbuf = v45;
  if ([v25 function])
  {
    int8x16_t v33 = mach_absolute_time();
    uint64_t v34 = *(void **)v22;
    *(void *)md = MEMORY[0x263EF8330];
    *(void *)&md[8] = 3221225472;
    *(void *)&long long v52 = ___ZN3AGX8Compiler14compileProgramINS_20BlitSparseProgramKeyE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke_4;
    *((void *)&v52 + 1) = &unk_26516F860;
    p_CC_SHA256_CTX c = &c;
    uint64_t v54 = v33;
    [v34 compileFunctionRequest:v25 completionHandler:md];
  }
  else
  {
    if ([v25 frameworkData] || objc_msgSend(v25, "pipelineOptions")) {
      AGX::Compiler::compileProgram<AGX::UserIntersectionProgramKey,AGCReplyArray>(AGX::UserIntersectionProgramKey const&,MTLCompileFunctionRequestData *,void({block_pointer})(AGCReplyArray const&,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,MTLCompilerError,NSString *,unsigned long long))::{lambda(void)#1}::operator()[abi:[AGX] Failed assertion __requestData.frameworkData && _requestData.pipelineOptions_]();
    }
    *(void *)md = MEMORY[0x263EF8330];
    *(void *)&md[8] = 3221225472;
    *(void *)&long long v52 = ___ZN3AGX8Compiler14compileProgramINS_20BlitSparseProgramKeyE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke_3;
    *((void *)&v52 + 1) = &unk_26516F838;
    p_CC_SHA256_CTX c = &c;
    uint64_t v35 = objc_msgSend((id)objc_msgSend(v25, "binaryArchives"), "count");
    uint64_t v36 = *(void **)v22;
    int8x16_t v37 = [v25 driverKeyData];
    if (v35) {
      objc_msgSend(v36, "compileRequest:binaryArchives:failOnBinaryArchiveMiss:pipelineCache:sync:completionHandler:", v37, objc_msgSend(v25, "binaryArchives"), 0, objc_msgSend(v25, "pipelineCache"), objc_msgSend(v25, "sync"), md);
    }
    else {
      objc_msgSend(v36, "compileRequest:pipelineCache:sync:completionHandler:", v37, objc_msgSend(v25, "pipelineCache"), objc_msgSend(v25, "sync"), md);
    }
  }
  dispatch_release(v26);

  unsigned __int32 v38 = v42[3];
LABEL_44:
  if (!v38)
  {
    MTLReleaseAssertionFailure();
    __break(1u);
  }
  _Block_object_dispose(&v41, 8);
  os_unfair_lock_unlock(v4);
  return v38;
}

{
  os_unfair_lock_s *v4;
  uint64_t v5;
  os_unfair_lock_s *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int *v10;
  int v11;
  uint64_t v12;
  int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  NSObject *v26;
  NSObject *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t *v30;
  char **v31;
  void *v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  void v40[8];
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  void v45[5];
  size_t v46;
  const void *v47;
  CC_LONG len[2];
  void *data;
  CC_SHA256_CTX c;
  unsigned __int8 md[16];
  long long v52;
  CC_SHA256_CTX *p_c;
  uint64_t v54;
  long long v55;
  size_t v56[3];
  uint64_t v57;

  unint64_t v57 = *MEMORY[0x263EF8340];
  uint64_t v4 = (os_unfair_lock_s *)(a1 + 7736);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 7736));
  uint64_t v5 = *(void *)(a1 + 48);
  uint64_t v41 = 0;
  uint64_t v42 = &v41;
  int64_t v43 = 0x2020000000;
  uint64_t v44 = 0;
  int64_t v6 = (os_unfair_lock_s *)(v5 + 728);
  os_unfair_lock_lock((os_unfair_lock_t)(v5 + 728));
  uint64_t v7 = *(unsigned int *)(v5 + 400);
  uint64_t v8 = *(void *)(v5 + 392);
  if (v7)
  {
    uint64_t v9 = 0;
    int32x4_t v10 = (int *)(v8 + 40);
    while (1)
    {
      long long v11 = *v10;
      v10 += 12;
      if (*(_DWORD *)(a2 + 40) == v11) {
        break;
      }
      if (v7 == ++v9) {
        goto LABEL_5;
      }
    }
    int32x4_t v18 = v8 + 48 * v9;
  }
  else
  {
LABEL_5:
    int32x4_t v12 = *(void *)(v8 + 384);
    if (v12)
    {
      unint64_t v13 = *(_DWORD *)(a2 + 40);
      uint64_t v14 = 1;
      while (1)
      {
        if (v13 == *(_DWORD *)(v12 + 40))
        {
          uint64_t v14 = 0;
          goto LABEL_21;
        }
        if (v13 == *(_DWORD *)(v12 + 88)) {
          goto LABEL_21;
        }
        if (v13 == *(_DWORD *)(v12 + 136))
        {
          uint64_t v14 = 2;
          goto LABEL_21;
        }
        if (v13 == *(_DWORD *)(v12 + 184)) {
          break;
        }
        int32x4_t v12 = *(void *)(v12 + 384);
        if (!v12) {
          goto LABEL_12;
        }
      }
      uint64_t v14 = 3;
LABEL_21:
      int32x4_t v18 = v12 + 48 * v14;
    }
    else
    {
LABEL_12:
      if (v7 == 4) {
        operator new();
      }
      uint64_t v15 = v8 + 48 * v7;
      *(_DWORD *)(v15 + 8) = *(_DWORD *)(a2 + 8);
      if (v15 != a2) {
        std::vector<unsigned int>::__assign_with_size[abi:nn180100]<unsigned int *,unsigned int *>((void *)(v15 + 16), *(char **)(a2 + 16), *(char **)(a2 + 24), (uint64_t)(*(void *)(a2 + 24) - *(void *)(a2 + 16)) >> 2);
      }
      *(_DWORD *)(v8 + 48 * v7 + 40) = *(_DWORD *)(a2 + 40);
      int32x4_t v16 = *(void *)(v5 + 392);
      int v17 = *(_DWORD *)(v5 + 400);
      *(_DWORD *)(v5 + 400) = v17 + 1;
      int32x4_t v18 = v16 + 48 * v17;
    }
  }
  int v19 = v18 + 192;
  if (*(void *)(v18 + 192))
  {
    if (!*(unsigned char *)(v18 + 232))
    {
      os_unfair_lock_unlock(v6);
      dispatch_group_wait(*(dispatch_group_t *)v19, 0xFFFFFFFFFFFFFFFFLL);
      unsigned __int32 v38 = *(void *)(v19 + 8);
      v42[3] = v38;
      goto LABEL_44;
    }
    int32x4_t v20 = *(void *)(v18 + 200);
    if (v20) {
      (*(void (**)(uint64_t))(*(void *)v20 + 8))(v20);
    }
    *(void *)(v19 + 8) = 0;
    *(void *)(v19 + 16) = 0;

    *(void *)(v19 + 24) = 0;
    *(void *)(v19 + 32) = 0;
    *(unsigned char *)(v19 + 40) = 0;
    unsigned int v21 = *(NSObject **)v19;
  }
  else
  {
    unsigned int v21 = dispatch_group_create();
    *(void *)int v19 = v21;
  }
  dispatch_group_enter(v21);
  os_unfair_lock_unlock(v6);
  int32x4_t v22 = *(void *)(a1 + 6008);
  v40[0] = MEMORY[0x263EF8330];
  v40[1] = 3221225472;
  v40[2] = ___ZN3AGX6DeviceINS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE32findOrCreateDriverProgramVariantINS1_25BlitComputeProgramVariantENS_23BlitFastClearProgramKeyENS1_20BlitFastClearProgramEEEPT_PT1_RKT0_P7NSArrayIPU27objcproto16MTLBinaryArchive11objc_objectE_block_invoke;
  v40[3] = &unk_26516E8E0;
  v40[4] = &v41;
  v40[5] = a1;
  v40[6] = a2;
  v40[7] = v19;
  unsigned int v23 = *(void *)(v22 + 8);
  if ((*(unsigned int (**)(uint64_t))(*(void *)a2 + 24))(a2)) {
    int32x4_t v24 = v23;
  }
  else {
    int32x4_t v24 = 0;
  }
  int32x4_t v25 = objc_opt_new();
  [v25 setSync:1];
  [v25 setPipelineCache:v24];
  [v25 setBinaryArchives:0];
  v45[0] = MEMORY[0x263EF8330];
  v45[1] = 3221225472;
  v45[2] = ___ZN3AGX8Compiler14compileProgramINS_23BlitFastClearProgramKeyEEEvRKT_P7NSArrayIPU27objcproto16MTLBinaryArchive11objc_objectEU13block_pointerFvRK20AGCDeserializedReply16MTLCompilerErrorP8NSStringEb_block_invoke;
  v45[3] = &unk_26516F7C0;
  v45[4] = v40;
  int8x16_t v46 = 0;
  uint64_t v47 = 0;
  (*(void (**)(uint64_t, const void **, size_t *))(*(void *)a2 + 16))(a2, &v47, &v46);
  int32x4_t v26 = dispatch_data_create(v47, v46, 0, 0);
  [v25 setDriverKeyData:v26];
  if ([v25 airScript])
  {
    uint64_t v27 = [v25 airScript];
    uint64_t v55 = 0uLL;
    v56[0] = 0;
    *(void *)&uint64_t v55 = dispatch_data_create_map(v27, (const void **)&v55 + 1, v56);
    uint64_t v28 = *((void *)&v55 + 1);
    long long v29 = **((_DWORD **)&v55 + 1);
    CC_SHA256_Init(&c);
    (**(void (***)(uint64_t, CC_SHA256_CTX *))a2)(a2, &c);
    *(void *)leuint64_t n = 0;
    uintptr_t data = 0;
    if (AGX::GetSerializedVertexFormat((AGX *)(v28 + v29), &data, (size_t *)len, v30, v31))
    {
      uint64_t v32 = data;
      CC_SHA256_Update(&c, data, len[0]);
      free(v32);
    }
    CC_SHA256_Final(md, &c);
    dispatch_release((dispatch_object_t)v55);
    uint64_t v55 = *(_OWORD *)md;
    *(_OWORD *)uint64_t v56 = v52;
    [v25 setVendorPluginFunctionId:&v55];
  }
  *(void *)c.count = MEMORY[0x263EF8330];
  *(void *)c.hash = 3221225472;
  *(void *)&c.hash[2] = ___ZN3AGX8Compiler14compileProgramINS_23BlitFastClearProgramKeyE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke;
  *(void *)&c.hash[4] = &unk_26516F810;
  *(void *)&c.hash[6] = v25;
  *(void *)c.wbuf = v45;
  if ([v25 function])
  {
    int8x16_t v33 = mach_absolute_time();
    uint64_t v34 = *(void **)v22;
    *(void *)md = MEMORY[0x263EF8330];
    *(void *)&md[8] = 3221225472;
    *(void *)&long long v52 = ___ZN3AGX8Compiler14compileProgramINS_23BlitFastClearProgramKeyE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke_4;
    *((void *)&v52 + 1) = &unk_26516F860;
    p_CC_SHA256_CTX c = &c;
    uint64_t v54 = v33;
    [v34 compileFunctionRequest:v25 completionHandler:md];
  }
  else
  {
    if ([v25 frameworkData] || objc_msgSend(v25, "pipelineOptions")) {
      AGX::Compiler::compileProgram<AGX::UserIntersectionProgramKey,AGCReplyArray>(AGX::UserIntersectionProgramKey const&,MTLCompileFunctionRequestData *,void({block_pointer})(AGCReplyArray const&,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,MTLCompilerError,NSString *,unsigned long long))::{lambda(void)#1}::operator()[abi:[AGX] Failed assertion __requestData.frameworkData && _requestData.pipelineOptions_]();
    }
    *(void *)md = MEMORY[0x263EF8330];
    *(void *)&md[8] = 3221225472;
    *(void *)&long long v52 = ___ZN3AGX8Compiler14compileProgramINS_23BlitFastClearProgramKeyE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke_3;
    *((void *)&v52 + 1) = &unk_26516F838;
    p_CC_SHA256_CTX c = &c;
    uint64_t v35 = objc_msgSend((id)objc_msgSend(v25, "binaryArchives"), "count");
    uint64_t v36 = *(void **)v22;
    int8x16_t v37 = [v25 driverKeyData];
    if (v35) {
      objc_msgSend(v36, "compileRequest:binaryArchives:failOnBinaryArchiveMiss:pipelineCache:sync:completionHandler:", v37, objc_msgSend(v25, "binaryArchives"), 0, objc_msgSend(v25, "pipelineCache"), objc_msgSend(v25, "sync"), md);
    }
    else {
      objc_msgSend(v36, "compileRequest:pipelineCache:sync:completionHandler:", v37, objc_msgSend(v25, "pipelineCache"), objc_msgSend(v25, "sync"), md);
    }
  }
  dispatch_release(v26);

  unsigned __int32 v38 = v42[3];
LABEL_44:
  if (!v38)
  {
    MTLReleaseAssertionFailure();
    __break(1u);
  }
  _Block_object_dispose(&v41, 8);
  os_unfair_lock_unlock(v4);
  return v38;
}

{
  os_unfair_lock_s *v4;
  uint64_t v5;
  os_unfair_lock_s *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int *v10;
  int v11;
  uint64_t v12;
  int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  NSObject *v26;
  NSObject *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t *v30;
  char **v31;
  void *v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  void v40[8];
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  void v45[5];
  size_t v46;
  const void *v47;
  CC_LONG len[2];
  void *data;
  CC_SHA256_CTX c;
  unsigned __int8 md[16];
  long long v52;
  CC_SHA256_CTX *p_c;
  uint64_t v54;
  long long v55;
  size_t v56[3];
  uint64_t v57;

  unint64_t v57 = *MEMORY[0x263EF8340];
  uint64_t v41 = 0;
  uint64_t v42 = &v41;
  int64_t v43 = 0x2020000000;
  uint64_t v44 = 0;
  uint64_t v4 = (os_unfair_lock_s *)(a1 + 7720);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 7720));
  uint64_t v5 = *(void *)(a1 + 56);
  int64_t v6 = (os_unfair_lock_s *)(v5 + 728);
  os_unfair_lock_lock((os_unfair_lock_t)(v5 + 728));
  uint64_t v7 = *(unsigned int *)(v5 + 400);
  uint64_t v8 = *(void *)(v5 + 392);
  if (v7)
  {
    uint64_t v9 = 0;
    int32x4_t v10 = (int *)(v8 + 40);
    while (1)
    {
      long long v11 = *v10;
      v10 += 12;
      if (*(_DWORD *)(a2 + 40) == v11) {
        break;
      }
      if (v7 == ++v9) {
        goto LABEL_5;
      }
    }
    int32x4_t v18 = v8 + 48 * v9;
  }
  else
  {
LABEL_5:
    int32x4_t v12 = *(void *)(v8 + 384);
    if (v12)
    {
      unint64_t v13 = *(_DWORD *)(a2 + 40);
      uint64_t v14 = 1;
      while (1)
      {
        if (v13 == *(_DWORD *)(v12 + 40))
        {
          uint64_t v14 = 0;
          goto LABEL_21;
        }
        if (v13 == *(_DWORD *)(v12 + 88)) {
          goto LABEL_21;
        }
        if (v13 == *(_DWORD *)(v12 + 136))
        {
          uint64_t v14 = 2;
          goto LABEL_21;
        }
        if (v13 == *(_DWORD *)(v12 + 184)) {
          break;
        }
        int32x4_t v12 = *(void *)(v12 + 384);
        if (!v12) {
          goto LABEL_12;
        }
      }
      uint64_t v14 = 3;
LABEL_21:
      int32x4_t v18 = v12 + 48 * v14;
    }
    else
    {
LABEL_12:
      if (v7 == 4) {
        operator new();
      }
      uint64_t v15 = v8 + 48 * v7;
      *(_DWORD *)(v15 + 8) = *(_DWORD *)(a2 + 8);
      if (v15 != a2) {
        std::vector<unsigned int>::__assign_with_size[abi:nn180100]<unsigned int *,unsigned int *>((void *)(v15 + 16), *(char **)(a2 + 16), *(char **)(a2 + 24), (uint64_t)(*(void *)(a2 + 24) - *(void *)(a2 + 16)) >> 2);
      }
      *(_DWORD *)(v8 + 48 * v7 + 40) = *(_DWORD *)(a2 + 40);
      int32x4_t v16 = *(void *)(v5 + 392);
      int v17 = *(_DWORD *)(v5 + 400);
      *(_DWORD *)(v5 + 400) = v17 + 1;
      int32x4_t v18 = v16 + 48 * v17;
    }
  }
  int v19 = v18 + 192;
  if (*(void *)(v18 + 192))
  {
    if (!*(unsigned char *)(v18 + 232))
    {
      os_unfair_lock_unlock(v6);
      v42[3] = *(void *)(v19 + 8);
      goto LABEL_44;
    }
    int32x4_t v20 = *(void *)(v18 + 200);
    if (v20) {
      (*(void (**)(uint64_t))(*(void *)v20 + 8))(v20);
    }
    *(void *)(v19 + 8) = 0;
    *(void *)(v19 + 16) = 0;

    *(void *)(v19 + 24) = 0;
    *(void *)(v19 + 32) = 0;
    *(unsigned char *)(v19 + 40) = 0;
    unsigned int v21 = *(NSObject **)v19;
  }
  else
  {
    unsigned int v21 = dispatch_group_create();
    *(void *)int v19 = v21;
  }
  dispatch_group_enter(v21);
  os_unfair_lock_unlock(v6);
  int32x4_t v22 = *(void *)(a1 + 6008);
  v40[0] = MEMORY[0x263EF8330];
  v40[1] = 3221225472;
  v40[2] = ___ZN3AGX6DeviceINS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE30findOrCreateBlitProgramVariantERNS_29BlitVertexFastClearProgramKeyE_block_invoke;
  v40[3] = &unk_26516E8E0;
  v40[4] = &v41;
  v40[5] = a1;
  v40[6] = a2;
  v40[7] = v19;
  unsigned int v23 = *(void *)(v22 + 8);
  if ((*(unsigned int (**)(uint64_t))(*(void *)a2 + 24))(a2)) {
    int32x4_t v24 = v23;
  }
  else {
    int32x4_t v24 = 0;
  }
  int32x4_t v25 = objc_opt_new();
  [v25 setSync:1];
  [v25 setPipelineCache:v24];
  [v25 setBinaryArchives:0];
  v45[0] = MEMORY[0x263EF8330];
  v45[1] = 3221225472;
  v45[2] = ___ZN3AGX8Compiler14compileProgramINS_29BlitVertexFastClearProgramKeyEEEvRKT_P7NSArrayIPU27objcproto16MTLBinaryArchive11objc_objectEU13block_pointerFvRK20AGCDeserializedReply16MTLCompilerErrorP8NSStringEb_block_invoke;
  v45[3] = &unk_26516F7C0;
  v45[4] = v40;
  int8x16_t v46 = 0;
  uint64_t v47 = 0;
  (*(void (**)(uint64_t, const void **, size_t *))(*(void *)a2 + 16))(a2, &v47, &v46);
  int32x4_t v26 = dispatch_data_create(v47, v46, 0, 0);
  [v25 setDriverKeyData:v26];
  if ([v25 airScript])
  {
    uint64_t v27 = [v25 airScript];
    uint64_t v55 = 0uLL;
    v56[0] = 0;
    *(void *)&uint64_t v55 = dispatch_data_create_map(v27, (const void **)&v55 + 1, v56);
    uint64_t v28 = *((void *)&v55 + 1);
    long long v29 = **((_DWORD **)&v55 + 1);
    CC_SHA256_Init(&c);
    (**(void (***)(uint64_t, CC_SHA256_CTX *))a2)(a2, &c);
    *(void *)leuint64_t n = 0;
    uintptr_t data = 0;
    if (AGX::GetSerializedVertexFormat((AGX *)(v28 + v29), &data, (size_t *)len, v30, v31))
    {
      uint64_t v32 = data;
      CC_SHA256_Update(&c, data, len[0]);
      free(v32);
    }
    CC_SHA256_Final(md, &c);
    dispatch_release((dispatch_object_t)v55);
    uint64_t v55 = *(_OWORD *)md;
    *(_OWORD *)uint64_t v56 = v52;
    [v25 setVendorPluginFunctionId:&v55];
  }
  *(void *)c.count = MEMORY[0x263EF8330];
  *(void *)c.hash = 3221225472;
  *(void *)&c.hash[2] = ___ZN3AGX8Compiler14compileProgramINS_29BlitVertexFastClearProgramKeyE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke;
  *(void *)&c.hash[4] = &unk_26516F810;
  *(void *)&c.hash[6] = v25;
  *(void *)c.wbuf = v45;
  if ([v25 function])
  {
    int8x16_t v33 = mach_absolute_time();
    uint64_t v34 = *(void **)v22;
    *(void *)md = MEMORY[0x263EF8330];
    *(void *)&md[8] = 3221225472;
    *(void *)&long long v52 = ___ZN3AGX8Compiler14compileProgramINS_29BlitVertexFastClearProgramKeyE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke_4;
    *((void *)&v52 + 1) = &unk_26516F860;
    p_CC_SHA256_CTX c = &c;
    uint64_t v54 = v33;
    [v34 compileFunctionRequest:v25 completionHandler:md];
  }
  else
  {
    if ([v25 frameworkData] || objc_msgSend(v25, "pipelineOptions")) {
      AGX::Compiler::compileProgram<AGX::UserIntersectionProgramKey,AGCReplyArray>(AGX::UserIntersectionProgramKey const&,MTLCompileFunctionRequestData *,void({block_pointer})(AGCReplyArray const&,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,MTLCompilerError,NSString *,unsigned long long))::{lambda(void)#1}::operator()[abi:[AGX] Failed assertion __requestData.frameworkData && _requestData.pipelineOptions_]();
    }
    *(void *)md = MEMORY[0x263EF8330];
    *(void *)&md[8] = 3221225472;
    *(void *)&long long v52 = ___ZN3AGX8Compiler14compileProgramINS_29BlitVertexFastClearProgramKeyE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke_3;
    *((void *)&v52 + 1) = &unk_26516F838;
    p_CC_SHA256_CTX c = &c;
    uint64_t v35 = objc_msgSend((id)objc_msgSend(v25, "binaryArchives"), "count");
    uint64_t v36 = *(void **)v22;
    int8x16_t v37 = [v25 driverKeyData];
    if (v35) {
      objc_msgSend(v36, "compileRequest:binaryArchives:failOnBinaryArchiveMiss:pipelineCache:sync:completionHandler:", v37, objc_msgSend(v25, "binaryArchives"), 0, objc_msgSend(v25, "pipelineCache"), objc_msgSend(v25, "sync"), md);
    }
    else {
      objc_msgSend(v36, "compileRequest:pipelineCache:sync:completionHandler:", v37, objc_msgSend(v25, "pipelineCache"), objc_msgSend(v25, "sync"), md);
    }
  }
  dispatch_release(v26);

LABEL_44:
  os_unfair_lock_unlock(v4);
  unsigned __int32 v38 = v42[3];
  _Block_object_dispose(&v41, 8);
  return v38;
}

void sub_242A10C18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  os_unfair_lock_unlock(v18);
  _Block_object_dispose(&a17, 8);
  os_unfair_lock_unlock(v17);
  _Unwind_Resume(a1);
}

void ___ZN3AGX6DeviceINS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE32findOrCreateDriverProgramVariantINS1_26BlitFragmentProgramVariantENS_22BlitFragmentProgramKeyENS1_19BlitFragmentProgramEEEPT_PT1_RKT0_P7NSArrayIPU27objcproto16MTLBinaryArchive11objc_objectE_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a3) {
    operator new();
  }
  uint64_t v5 = "MTLCompilerErrorTimeout";
  int64_t v6 = "UnknownErrorCode";
  if (a3 == 2) {
    int64_t v6 = "MTLCompilerErrorCompilationError";
  }
  if (a3 != 3) {
    uint64_t v5 = v6;
  }
  if (a3 == 1) {
    uint64_t v7 = "MTLCompilerErrorFatalError";
  }
  else {
    uint64_t v7 = v5;
  }
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  (*(void (**)(void, uint64_t *, uint64_t *))(**(void **)(a1 + 48) + 16))(*(void *)(a1 + 48), &v13, &v12);
  uint64_t v8 = a4;
  uint64_t v9 = v7;
  uint64_t v10 = v12;
  uint64_t v11 = v13;
  _ZZZZN3AGX6DeviceINS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE49createTGOptimizationDriverShaderAndBufferIfNeededEP18AGXG17FamilyDeviceEUb_EUb_ENKUlvE_clB14_AGX__Crashed_Ev();
}

void sub_242A10E04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  AGX::ProgramBindingRemap<AGX::HAL200::Encoders,AGX::HAL200::Classes>::~ProgramBindingRemap((uint64_t)va);
  MEMORY[0x24566ED90](v4, 0x10F3C40C3DE331CLL);
  _Unwind_Resume(a1);
}

uint64_t ___ZN3AGX8Compiler14compileProgramINS_22BlitFragmentProgramKeyEEEvRKT_P7NSArrayIPU27objcproto16MTLBinaryArchive11objc_objectEU13block_pointerFvRK20AGCDeserializedReply16MTLCompilerErrorP8NSStringEb_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a5) {
    AGX::Compiler::compileProgram<AGX::UserIntersectionProgramKey,AGCReplyArray>(AGX::UserIntersectionProgramKey const&,MTLCompileFunctionRequestData *,void({block_pointer})(AGCReplyArray const&,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,MTLCompilerError,NSString *,unsigned long long))::{lambda(void)#1}::operator()[abi:[AGX] Failed assertion __requestData.frameworkData && _requestData.pipelineOptions_]();
  }
  uint64_t v5 = *(uint64_t (**)(void))(*(void *)(a1 + 32) + 16);

  return v5();
}

void ___ZN3AGX8Compiler14compileProgramINS_22BlitFragmentProgramKeyE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  v14[0] = MEMORY[0x263EF8330];
  v14[1] = 3221225472;
  uint64_t v15 = ___ZN3AGX8Compiler14compileProgramINS_22BlitFragmentProgramKeyE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke_2;
  int32x4_t v16 = &unk_26516F7E8;
  uint64_t v17 = a9;
  uint64_t v18 = a3;
  uint64_t v19 = a4;
  uint64_t v20 = a5;
  uint64_t v21 = a6;
  uint64_t v22 = a7;
  uint64_t v12 = a1 + 32;
  uint64_t v10 = *(void **)(a1 + 32);
  uint64_t v11 = *(void *)(v12 + 8);
  uint64_t v23 = a8;
  uint64_t v24 = v11;
  uint64_t v25 = a2;
  uint64_t v26 = a10;
  if (objc_msgSend(v10, "sync", MEMORY[0x263EF8330], 3221225472))
  {
    v15(v14);
  }
  else
  {
    global_queue = dispatch_get_global_queue(0, 0);
    dispatch_async(global_queue, v14);
  }
}

uint64_t ___ZN3AGX8Compiler14compileProgramINS_22BlitFragmentProgramKeyE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke_3(uint64_t a1, void *a2)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), *a2);
}

uint64_t ___ZN3AGX8Compiler14compileProgramINS_22BlitFragmentProgramKeyE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke_4(uint64_t a1, void *a2)
{
  if (getTimebaseInfo(void)::once != -1) {
    dispatch_once(&getTimebaseInfo(void)::once, &__block_literal_global_7474);
  }
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), *a2);
}

void ___ZN3AGX8Compiler14compileProgramINS_22BlitFragmentProgramKeyE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke_2(void *a1)
{
  size_t size_ptr = 0;
  buffer_ptr = 0;
  uint64_t v2 = a1[12];
  AGCDeserializedReply::AGCDeserializedReply((AGCDeserializedReply *)v5);
  if (v2 || (uint64_t v4 = a1[5]) == 0)
  {
    uint64_t v3 = 0;
  }
  else
  {
    uint64_t v3 = dispatch_data_create_map(v4, (const void **)&buffer_ptr, &size_ptr);
    AGCDeserializedReply::deserialize((AGCDeserializedReply *)v5, buffer_ptr, size_ptr);
  }
  (*(void (**)(void, unsigned char *))(a1[11] + 16))(a1[11], v5);
  if (v3) {
    dispatch_release(v3);
  }
  AGCDeserializedReply::~AGCDeserializedReply((AGCDeserializedReply *)v5);
}

void sub_242A11108(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  AGCDeserializedReply::~AGCDeserializedReply((AGCDeserializedReply *)va);
  _Unwind_Resume(a1);
}

void AGX::HAL200::BlitFragmentProgramVariant::~BlitFragmentProgramVariant(AGX::HAL200::BlitFragmentProgramVariant *this)
{
  *(void *)this = &unk_26F852958;
  if (*((void *)this + 333))
  {
    uint64_t v2 = *((void *)this + 334);
    uint64_t v3 = *(NSObject **)(v2 + 16);
    v4[0] = MEMORY[0x263EF8330];
    v4[1] = 3221225472;
    v4[2] = ___ZN3AGX4HeapILb1EE14deallocateImplERKNS1_10AllocationE_block_invoke;
    v4[3] = &__block_descriptor_48_e5_v8__0l;
    v4[4] = v2;
    v4[5] = (char *)this + 2640;
    dispatch_sync(v3, v4);
    *(_OWORD *)((char *)this + 2665) = 0u;
    *((_OWORD *)this + 166) = 0u;
    *((_OWORD *)this + 165) = 0u;
  }
  AGX::ProgramVariantESLState<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ArgumentTable,true,8ul>::~ProgramVariantESLState((uint64_t *)this + 168);
  AGX::ProgramVariant<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::BlitFragmentArgumentTable,false,false>::~ProgramVariant((unint64_t)this);

  JUMPOUT(0x24566ED90);
}

{
  uint64_t v2;
  NSObject *v3;
  void v4[6];
  uint64_t vars8;

  *(void *)this = &unk_26F852958;
  if (*((void *)this + 333))
  {
    uint64_t v2 = *((void *)this + 334);
    uint64_t v3 = *(NSObject **)(v2 + 16);
    v4[0] = MEMORY[0x263EF8330];
    v4[1] = 3221225472;
    v4[2] = ___ZN3AGX4HeapILb1EE14deallocateImplERKNS1_10AllocationE_block_invoke;
    v4[3] = &__block_descriptor_48_e5_v8__0l;
    v4[4] = v2;
    v4[5] = (char *)this + 2640;
    dispatch_sync(v3, v4);
    *(_OWORD *)((char *)this + 2665) = 0u;
    *((_OWORD *)this + 166) = 0u;
    *((_OWORD *)this + 165) = 0u;
  }
  AGX::ProgramVariantESLState<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ArgumentTable,true,8ul>::~ProgramVariantESLState((uint64_t *)this + 168);

  AGX::ProgramVariant<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::BlitFragmentArgumentTable,false,false>::~ProgramVariant((unint64_t)this);
}

unint64_t AGX::ProgramVariant<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::BlitFragmentArgumentTable,false,false>::~ProgramVariant(unint64_t a1)
{
  *(void *)a1 = &unk_26F853028;
  if (*(void *)(a1 + 672))
  {
    uint64_t v2 = *(void *)(a1 + 680);
    uint64_t v3 = *(NSObject **)(v2 + 16);
    uint64_t v28 = MEMORY[0x263EF8330];
    uint64_t v29 = 3221225472;
    long long v30 = ___ZN3AGX4HeapILb1EE14deallocateImplERKNS1_10AllocationE_block_invoke;
    uint64_t v31 = &__block_descriptor_48_e5_v8__0l;
    uint64_t v32 = v2;
    unint64_t v33 = a1 + 648;
    dispatch_sync(v3, &v28);
    *(_OWORD *)(a1 + 673) = 0u;
    *(_OWORD *)(a1 + 664) = 0u;
    *(_OWORD *)(a1 + 648) = 0u;
  }
  if (*(void *)(a1 + 720))
  {
    uint64_t v4 = *(void *)(a1 + 728);
    uint64_t v5 = *(NSObject **)(v4 + 16);
    uint64_t v28 = MEMORY[0x263EF8330];
    uint64_t v29 = 3221225472;
    long long v30 = ___ZN3AGX4HeapILb1EE14deallocateImplERKNS1_10AllocationE_block_invoke;
    uint64_t v31 = &__block_descriptor_48_e5_v8__0l;
    uint64_t v32 = v4;
    unint64_t v33 = a1 + 696;
    dispatch_sync(v5, &v28);
    *(_OWORD *)(a1 + 721) = 0u;
    *(_OWORD *)(a1 + 712) = 0u;
    *(_OWORD *)(a1 + 696) = 0u;
  }
  if (*(void *)(a1 + 768))
  {
    uint64_t v6 = *(void *)(a1 + 776);
    uint64_t v7 = *(NSObject **)(v6 + 16);
    uint64_t v28 = MEMORY[0x263EF8330];
    uint64_t v29 = 3221225472;
    long long v30 = ___ZN3AGX4HeapILb1EE14deallocateImplERKNS1_10AllocationE_block_invoke;
    uint64_t v31 = &__block_descriptor_48_e5_v8__0l;
    uint64_t v32 = v6;
    unint64_t v33 = a1 + 744;
    dispatch_sync(v7, &v28);
    *(_OWORD *)(a1 + 769) = 0u;
    *(_OWORD *)(a1 + 760) = 0u;
    *(_OWORD *)(a1 + 744) = 0u;
  }
  uint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    os_unfair_lock_lock((os_unfair_lock_t)(v8 + 7952));
    std::__hash_table<std::__hash_value_type<unsigned long,AGX::FunctionCompiledEventInfo>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,AGX::FunctionCompiledEventInfo>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,AGX::FunctionCompiledEventInfo>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,AGX::FunctionCompiledEventInfo>>>::__erase_unique<unsigned long>((uint64_t *)(v8 + 7960), a1);
    os_unfair_lock_unlock((os_unfair_lock_t)(v8 + 7952));
  }
  if ((*(char *)(a1 + 1343) & 0x80000000) == 0)
  {
    uint64_t v9 = *(void **)(a1 + 1296);
    if (!v9) {
      goto LABEL_12;
    }
    goto LABEL_11;
  }
  operator delete(*(void **)(a1 + 1320));
  uint64_t v9 = *(void **)(a1 + 1296);
  if (v9)
  {
LABEL_11:
    *(void *)(a1 + 1304) = v9;
    operator delete(v9);
  }
LABEL_12:
  uint64_t v10 = *(void *)(a1 + 1272);
  if (v10)
  {
    uint64_t v11 = *(void *)(a1 + 1280);
    uint64_t v12 = *(void **)(a1 + 1272);
    if (v11 != v10)
    {
      do
      {
        if (*(char *)(v11 - 1) < 0) {
          operator delete(*(void **)(v11 - 24));
        }
        v11 -= 24;
      }
      while (v11 != v10);
      uint64_t v12 = *(void **)(a1 + 1272);
    }
    *(void *)(a1 + 1280) = v10;
    operator delete(v12);
  }
  std::__tree<std::__value_type<AGX::scissorMapInfo<AGX::HAL200::Encoders>,unsigned int>,std::__map_value_compare<AGX::scissorMapInfo<AGX::HAL200::Encoders>,std::__value_type<AGX::scissorMapInfo<AGX::HAL200::Encoders>,unsigned int>,std::less<AGX::scissorMapInfo<AGX::HAL200::Encoders>>,true>,std::allocator<std::__value_type<AGX::scissorMapInfo<AGX::HAL200::Encoders>,unsigned int>>>::destroy(*(void **)(a1 + 1160));
  uint64_t v13 = *(void *)(a1 + 1120);
  if (v13)
  {
    uint64_t v14 = *(void *)(a1 + 1128);
    uint64_t v15 = *(void **)(a1 + 1120);
    if (v14 != v13)
    {
      do
      {
        int32x4_t v16 = *(std::__shared_weak_count **)(v14 - 8);
        if (v16 && !atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
        }
        v14 -= 16;
      }
      while (v14 != v13);
      uint64_t v15 = *(void **)(a1 + 1120);
    }
    *(void *)(a1 + 1128) = v13;
    operator delete(v15);
  }
  uint64_t v17 = *(void **)(a1 + 1096);
  if (v17)
  {
    *(void *)(a1 + 1104) = v17;
    operator delete(v17);
  }
  uint64_t v18 = *(void **)(a1 + 1072);
  if (v18)
  {
    *(void *)(a1 + 1080) = v18;
    operator delete(v18);
  }
  if (*(char *)(a1 + 991) < 0)
  {
    operator delete(*(void **)(a1 + 968));
    if ((*(char *)(a1 + 599) & 0x80000000) == 0)
    {
LABEL_37:
      if ((*(char *)(a1 + 575) & 0x80000000) == 0) {
        goto LABEL_38;
      }
LABEL_58:
      operator delete(*(void **)(a1 + 552));
      if ((*(char *)(a1 + 551) & 0x80000000) == 0) {
        goto LABEL_39;
      }
      goto LABEL_59;
    }
  }
  else if ((*(char *)(a1 + 599) & 0x80000000) == 0)
  {
    goto LABEL_37;
  }
  operator delete(*(void **)(a1 + 576));
  if (*(char *)(a1 + 575) < 0) {
    goto LABEL_58;
  }
LABEL_38:
  if ((*(char *)(a1 + 551) & 0x80000000) == 0) {
    goto LABEL_39;
  }
LABEL_59:
  operator delete(*(void **)(a1 + 528));
LABEL_39:
  std::__tree<std::__value_type<AGX::scissorMapInfo<AGX::HAL200::Encoders>,unsigned int>,std::__map_value_compare<AGX::scissorMapInfo<AGX::HAL200::Encoders>,std::__value_type<AGX::scissorMapInfo<AGX::HAL200::Encoders>,unsigned int>,std::less<AGX::scissorMapInfo<AGX::HAL200::Encoders>>,true>,std::allocator<std::__value_type<AGX::scissorMapInfo<AGX::HAL200::Encoders>,unsigned int>>>::destroy(*(void **)(a1 + 272));
  uint64_t v19 = *(void **)(a1 + 240);
  if (v19)
  {
    *(void *)(a1 + 248) = v19;
    operator delete(v19);
  }
  uint64_t v20 = *(void **)(a1 + 216);
  if (v20)
  {
    *(void *)(a1 + 224) = v20;
    operator delete(v20);
  }
  uint64_t v21 = *(void **)(a1 + 168);
  if (v21)
  {
    *(void *)(a1 + 176) = v21;
    operator delete(v21);
  }
  uint64_t v22 = *(void **)(a1 + 144);
  if (v22)
  {
    *(void *)(a1 + 152) = v22;
    operator delete(v22);
  }
  uint64_t v23 = *(void **)(a1 + 120);
  if (v23)
  {
    *(void *)(a1 + 128) = v23;
    operator delete(v23);
  }
  uint64_t v24 = *(void **)(a1 + 96);
  if (v24)
  {
    *(void *)(a1 + 104) = v24;
    operator delete(v24);
  }
  uint64_t v25 = *(void **)(a1 + 72);
  if (v25)
  {
    *(void *)(a1 + 80) = v25;
    operator delete(v25);
  }
  uint64_t v26 = *(void **)(a1 + 48);
  if (v26)
  {
    *(void *)(a1 + 56) = v26;
    operator delete(v26);
  }
  return a1;
}

void AGX::ProgramVariant<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::BlitFragmentArgumentTable,false,false>::~ProgramVariant(unint64_t a1)
{
  AGX::ProgramVariant<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::BlitFragmentArgumentTable,false,false>::~ProgramVariant(a1);

  JUMPOUT(0x24566ED90);
}

void AGX::BlitFragmentProgramVariant<AGX::HAL200::Encoders,AGX::HAL200::Classes>::~BlitFragmentProgramVariant(unint64_t a1)
{
  *(void *)a1 = &unk_26F852958;
  if (*(void *)(a1 + 2664))
  {
    uint64_t v2 = *(void *)(a1 + 2672);
    uint64_t v3 = *(NSObject **)(v2 + 16);
    v4[0] = MEMORY[0x263EF8330];
    v4[1] = 3221225472;
    v4[2] = ___ZN3AGX4HeapILb1EE14deallocateImplERKNS1_10AllocationE_block_invoke;
    v4[3] = &__block_descriptor_48_e5_v8__0l;
    v4[4] = v2;
    v4[5] = a1 + 2640;
    dispatch_sync(v3, v4);
    *(_OWORD *)(a1 + 2665) = 0u;
    *(_OWORD *)(a1 + 2656) = 0u;
    *(_OWORD *)(a1 + 2640) = 0u;
  }
  AGX::ProgramVariantESLState<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ArgumentTable,true,8ul>::~ProgramVariantESLState((uint64_t *)(a1 + 1344));
  AGX::ProgramVariant<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::BlitFragmentArgumentTable,false,false>::~ProgramVariant(a1);

  JUMPOUT(0x24566ED90);
}

unint64_t AGX::BlitFragmentProgramVariant<AGX::HAL200::Encoders,AGX::HAL200::Classes>::~BlitFragmentProgramVariant(unint64_t a1)
{
  *(void *)a1 = &unk_26F852958;
  if (*(void *)(a1 + 2664))
  {
    uint64_t v2 = *(void *)(a1 + 2672);
    uint64_t v3 = *(NSObject **)(v2 + 16);
    v5[0] = MEMORY[0x263EF8330];
    v5[1] = 3221225472;
    v5[2] = ___ZN3AGX4HeapILb1EE14deallocateImplERKNS1_10AllocationE_block_invoke;
    v5[3] = &__block_descriptor_48_e5_v8__0l;
    v5[4] = v2;
    v5[5] = a1 + 2640;
    dispatch_sync(v3, v5);
    *(_OWORD *)(a1 + 2665) = 0u;
    *(_OWORD *)(a1 + 2656) = 0u;
    *(_OWORD *)(a1 + 2640) = 0u;
  }
  AGX::ProgramVariantESLState<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ArgumentTable,true,8ul>::~ProgramVariantESLState((uint64_t *)(a1 + 1344));

  return AGX::ProgramVariant<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::BlitFragmentArgumentTable,false,false>::~ProgramVariant(a1);
}

void sub_242A11FF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  os_unfair_lock_unlock(v18);
  os_unfair_lock_unlock(v17);
  _Block_object_dispose(&a17, 8);
  _Unwind_Resume(a1);
}

void ___ZN3AGX6DeviceINS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE30findOrCreateBlitProgramVariantERNS_20BlitVertexProgramKeyE_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a3) {
    operator new();
  }
  uint64_t v5 = "MTLCompilerErrorTimeout";
  uint64_t v6 = "UnknownErrorCode";
  if (a3 == 2) {
    uint64_t v6 = "MTLCompilerErrorCompilationError";
  }
  if (a3 != 3) {
    uint64_t v5 = v6;
  }
  if (a3 == 1) {
    uint64_t v7 = "MTLCompilerErrorFatalError";
  }
  else {
    uint64_t v7 = v5;
  }
  v8[0] = 0;
  uint64_t v9 = 0;
  (*(void (**)(void, void *, uint64_t *))(**(void **)(a1 + 48) + 16))(*(void *)(a1 + 48), v8, &v9);
  v8[7] = a4;
  v8[8] = v7;
  v8[9] = v9;
  v8[10] = v8[0];
  _ZZZZN3AGX6DeviceINS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE49createTGOptimizationDriverShaderAndBufferIfNeededEP18AGXG17FamilyDeviceEUb_EUb_ENKUlvE_clB14_AGX__Crashed_Ev();
}

void sub_242A121F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  AGX::ProgramBindingRemap<AGX::HAL200::Encoders,AGX::HAL200::Classes>::~ProgramBindingRemap((uint64_t)va);
  MEMORY[0x24566ED90](v11, 0x10F3C402884F952);
  _Unwind_Resume(a1);
}

uint64_t ___ZN3AGX8Compiler14compileProgramINS_20BlitVertexProgramKeyEEEvRKT_P7NSArrayIPU27objcproto16MTLBinaryArchive11objc_objectEU13block_pointerFvRK20AGCDeserializedReply16MTLCompilerErrorP8NSStringEb_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a5) {
    AGX::Compiler::compileProgram<AGX::UserIntersectionProgramKey,AGCReplyArray>(AGX::UserIntersectionProgramKey const&,MTLCompileFunctionRequestData *,void({block_pointer})(AGCReplyArray const&,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,MTLCompilerError,NSString *,unsigned long long))::{lambda(void)#1}::operator()[abi:[AGX] Failed assertion __requestData.frameworkData && _requestData.pipelineOptions_]();
  }
  uint64_t v5 = *(uint64_t (**)(void))(*(void *)(a1 + 32) + 16);

  return v5();
}

void ___ZN3AGX8Compiler14compileProgramINS_20BlitVertexProgramKeyE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  v14[0] = MEMORY[0x263EF8330];
  v14[1] = 3221225472;
  uint64_t v15 = ___ZN3AGX8Compiler14compileProgramINS_20BlitVertexProgramKeyE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke_2;
  int32x4_t v16 = &unk_26516F7E8;
  uint64_t v17 = a9;
  uint64_t v18 = a3;
  uint64_t v19 = a4;
  uint64_t v20 = a5;
  uint64_t v21 = a6;
  uint64_t v22 = a7;
  uint64_t v12 = a1 + 32;
  uint64_t v10 = *(void **)(a1 + 32);
  uint64_t v11 = *(void *)(v12 + 8);
  uint64_t v23 = a8;
  uint64_t v24 = v11;
  uint64_t v25 = a2;
  uint64_t v26 = a10;
  if (objc_msgSend(v10, "sync", MEMORY[0x263EF8330], 3221225472))
  {
    v15(v14);
  }
  else
  {
    global_queue = dispatch_get_global_queue(0, 0);
    dispatch_async(global_queue, v14);
  }
}

uint64_t ___ZN3AGX8Compiler14compileProgramINS_20BlitVertexProgramKeyE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke_3(uint64_t a1, void *a2)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), *a2);
}

uint64_t ___ZN3AGX8Compiler14compileProgramINS_20BlitVertexProgramKeyE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke_4(uint64_t a1, void *a2)
{
  if (getTimebaseInfo(void)::once != -1) {
    dispatch_once(&getTimebaseInfo(void)::once, &__block_literal_global_7474);
  }
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), *a2);
}

void ___ZN3AGX8Compiler14compileProgramINS_20BlitVertexProgramKeyE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke_2(void *a1)
{
  size_t size_ptr = 0;
  buffer_ptr = 0;
  uint64_t v2 = a1[12];
  AGCDeserializedReply::AGCDeserializedReply((AGCDeserializedReply *)v5);
  if (v2 || (uint64_t v4 = a1[5]) == 0)
  {
    uint64_t v3 = 0;
  }
  else
  {
    uint64_t v3 = dispatch_data_create_map(v4, (const void **)&buffer_ptr, &size_ptr);
    AGCDeserializedReply::deserialize((AGCDeserializedReply *)v5, buffer_ptr, size_ptr);
  }
  (*(void (**)(void, unsigned char *))(a1[11] + 16))(a1[11], v5);
  if (v3) {
    dispatch_release(v3);
  }
  AGCDeserializedReply::~AGCDeserializedReply((AGCDeserializedReply *)v5);
}

void sub_242A124F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  AGCDeserializedReply::~AGCDeserializedReply((AGCDeserializedReply *)va);
  _Unwind_Resume(a1);
}

void AGX::HAL200::BlitVertexProgramVariant::~BlitVertexProgramVariant(AGX::HAL200::BlitVertexProgramVariant *this)
{
  AGX::BlitVertexProgramVariant<AGX::HAL200::Encoders,AGX::HAL200::Classes>::~BlitVertexProgramVariant((unint64_t)this);

  JUMPOUT(0x24566ED90);
}

void sub_242A12F0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  os_unfair_lock_unlock(v18);
  _Block_object_dispose(&a17, 8);
  os_unfair_lock_unlock(v17);
  _Unwind_Resume(a1);
}

void ___ZN3AGX6DeviceINS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE32findOrCreateDriverProgramVariantINS1_25BlitComputeProgramVariantENS_21BlitComputeProgramKeyENS1_18BlitComputeProgramEEEPT_PT1_RKT0_P7NSArrayIPU27objcproto16MTLBinaryArchive11objc_objectE_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a3) {
    operator new();
  }
  uint64_t v5 = "MTLCompilerErrorTimeout";
  uint64_t v6 = "UnknownErrorCode";
  if (a3 == 2) {
    uint64_t v6 = "MTLCompilerErrorCompilationError";
  }
  if (a3 != 3) {
    uint64_t v5 = v6;
  }
  if (a3 == 1) {
    uint64_t v7 = "MTLCompilerErrorFatalError";
  }
  else {
    uint64_t v7 = v5;
  }
  uint64_t v12 = 0;
  *(void *)&long long v13 = 0;
  (*(void (**)(void, long long *, uint64_t *))(**(void **)(a1 + 48) + 16))(*(void *)(a1 + 48), &v13, &v12);
  uint64_t v8 = a4;
  uint64_t v9 = v7;
  uint64_t v10 = v12;
  uint64_t v11 = v13;
  _ZZZZN3AGX6DeviceINS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE49createTGOptimizationDriverShaderAndBufferIfNeededEP18AGXG17FamilyDeviceEUb_EUb_ENKUlvE_clB14_AGX__Crashed_Ev();
}

void sub_242A13224(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  AGX::ProgramVariant<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::BlitComputeArgumentTable,false,false>::~ProgramVariant(v3);
  AGX::ProgramBindingRemap<AGX::HAL200::Encoders,AGX::HAL200::Classes>::~ProgramBindingRemap((uint64_t)va);
  MEMORY[0x24566ED90](v3, 0x10F3C40CFA62115);
  _Unwind_Resume(a1);
}

uint64_t ___ZN3AGX8Compiler14compileProgramINS_21BlitComputeProgramKeyEEEvRKT_P7NSArrayIPU27objcproto16MTLBinaryArchive11objc_objectEU13block_pointerFvRK20AGCDeserializedReply16MTLCompilerErrorP8NSStringEb_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a5) {
    AGX::Compiler::compileProgram<AGX::UserIntersectionProgramKey,AGCReplyArray>(AGX::UserIntersectionProgramKey const&,MTLCompileFunctionRequestData *,void({block_pointer})(AGCReplyArray const&,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,MTLCompilerError,NSString *,unsigned long long))::{lambda(void)#1}::operator()[abi:[AGX] Failed assertion __requestData.frameworkData && _requestData.pipelineOptions_]();
  }
  uint64_t v5 = *(uint64_t (**)(void))(*(void *)(a1 + 32) + 16);

  return v5();
}

void ___ZN3AGX8Compiler14compileProgramINS_21BlitComputeProgramKeyE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  v14[0] = MEMORY[0x263EF8330];
  v14[1] = 3221225472;
  uint64_t v15 = ___ZN3AGX8Compiler14compileProgramINS_21BlitComputeProgramKeyE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke_2;
  int32x4_t v16 = &unk_26516F7E8;
  uint64_t v17 = a9;
  uint64_t v18 = a3;
  uint64_t v19 = a4;
  uint64_t v20 = a5;
  uint64_t v21 = a6;
  uint64_t v22 = a7;
  uint64_t v12 = a1 + 32;
  uint64_t v10 = *(void **)(a1 + 32);
  uint64_t v11 = *(void *)(v12 + 8);
  uint64_t v23 = a8;
  uint64_t v24 = v11;
  uint64_t v25 = a2;
  uint64_t v26 = a10;
  if (objc_msgSend(v10, "sync", MEMORY[0x263EF8330], 3221225472))
  {
    v15(v14);
  }
  else
  {
    global_queue = dispatch_get_global_queue(0, 0);
    dispatch_async(global_queue, v14);
  }
}

uint64_t ___ZN3AGX8Compiler14compileProgramINS_21BlitComputeProgramKeyE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke_3(uint64_t a1, void *a2)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), *a2);
}

uint64_t ___ZN3AGX8Compiler14compileProgramINS_21BlitComputeProgramKeyE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke_4(uint64_t a1, void *a2)
{
  if (getTimebaseInfo(void)::once != -1) {
    dispatch_once(&getTimebaseInfo(void)::once, &__block_literal_global_7474);
  }
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), *a2);
}

void ___ZN3AGX8Compiler14compileProgramINS_21BlitComputeProgramKeyE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke_2(void *a1)
{
  size_t size_ptr = 0;
  buffer_ptr = 0;
  uint64_t v2 = a1[12];
  AGCDeserializedReply::AGCDeserializedReply((AGCDeserializedReply *)v5);
  if (v2 || (uint64_t v4 = a1[5]) == 0)
  {
    unint64_t v3 = 0;
  }
  else
  {
    unint64_t v3 = dispatch_data_create_map(v4, (const void **)&buffer_ptr, &size_ptr);
    AGCDeserializedReply::deserialize((AGCDeserializedReply *)v5, buffer_ptr, size_ptr);
  }
  (*(void (**)(void, unsigned char *))(a1[11] + 16))(a1[11], v5);
  if (v3) {
    dispatch_release(v3);
  }
  AGCDeserializedReply::~AGCDeserializedReply((AGCDeserializedReply *)v5);
}

void sub_242A13548(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  AGCDeserializedReply::~AGCDeserializedReply((AGCDeserializedReply *)va);
  _Unwind_Resume(a1);
}

void sub_242A13CDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  os_unfair_lock_unlock(v18);
  _Block_object_dispose(&a17, 8);
  os_unfair_lock_unlock(v17);
  _Unwind_Resume(a1);
}

void ___ZN3AGX6DeviceINS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE32findOrCreateDriverProgramVariantINS1_25BlitComputeProgramVariantENS_20BlitSparseProgramKeyENS1_17BlitSparseProgramEEEPT_PT1_RKT0_P7NSArrayIPU27objcproto16MTLBinaryArchive11objc_objectE_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a3) {
    operator new();
  }
  uint64_t v5 = "MTLCompilerErrorTimeout";
  uint64_t v6 = "UnknownErrorCode";
  if (a3 == 2) {
    uint64_t v6 = "MTLCompilerErrorCompilationError";
  }
  if (a3 != 3) {
    uint64_t v5 = v6;
  }
  if (a3 == 1) {
    uint64_t v7 = "MTLCompilerErrorFatalError";
  }
  else {
    uint64_t v7 = v5;
  }
  uint64_t v12 = 0;
  *(void *)&long long v13 = 0;
  (*(void (**)(void, long long *, uint64_t *))(**(void **)(a1 + 48) + 16))(*(void *)(a1 + 48), &v13, &v12);
  uint64_t v8 = a4;
  uint64_t v9 = v7;
  uint64_t v10 = v12;
  uint64_t v11 = v13;
  _ZZZZN3AGX6DeviceINS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE49createTGOptimizationDriverShaderAndBufferIfNeededEP18AGXG17FamilyDeviceEUb_EUb_ENKUlvE_clB14_AGX__Crashed_Ev();
}

void sub_242A13FF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  AGX::ProgramVariant<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::BlitComputeArgumentTable,false,false>::~ProgramVariant(v3);
  AGX::ProgramBindingRemap<AGX::HAL200::Encoders,AGX::HAL200::Classes>::~ProgramBindingRemap((uint64_t)va);
  MEMORY[0x24566ED90](v3, 0x10F3C40CFA62115);
  _Unwind_Resume(a1);
}

uint64_t ___ZN3AGX8Compiler14compileProgramINS_20BlitSparseProgramKeyEEEvRKT_P7NSArrayIPU27objcproto16MTLBinaryArchive11objc_objectEU13block_pointerFvRK20AGCDeserializedReply16MTLCompilerErrorP8NSStringEb_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a5) {
    AGX::Compiler::compileProgram<AGX::UserIntersectionProgramKey,AGCReplyArray>(AGX::UserIntersectionProgramKey const&,MTLCompileFunctionRequestData *,void({block_pointer})(AGCReplyArray const&,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,MTLCompilerError,NSString *,unsigned long long))::{lambda(void)#1}::operator()[abi:[AGX] Failed assertion __requestData.frameworkData && _requestData.pipelineOptions_]();
  }
  uint64_t v5 = *(uint64_t (**)(void))(*(void *)(a1 + 32) + 16);

  return v5();
}

void ___ZN3AGX8Compiler14compileProgramINS_20BlitSparseProgramKeyE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  v14[0] = MEMORY[0x263EF8330];
  v14[1] = 3221225472;
  uint64_t v15 = ___ZN3AGX8Compiler14compileProgramINS_20BlitSparseProgramKeyE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke_2;
  int32x4_t v16 = &unk_26516F7E8;
  uint64_t v17 = a9;
  uint64_t v18 = a3;
  uint64_t v19 = a4;
  uint64_t v20 = a5;
  uint64_t v21 = a6;
  uint64_t v22 = a7;
  uint64_t v12 = a1 + 32;
  uint64_t v10 = *(void **)(a1 + 32);
  uint64_t v11 = *(void *)(v12 + 8);
  uint64_t v23 = a8;
  uint64_t v24 = v11;
  uint64_t v25 = a2;
  uint64_t v26 = a10;
  if (objc_msgSend(v10, "sync", MEMORY[0x263EF8330], 3221225472))
  {
    v15(v14);
  }
  else
  {
    global_queue = dispatch_get_global_queue(0, 0);
    dispatch_async(global_queue, v14);
  }
}

uint64_t ___ZN3AGX8Compiler14compileProgramINS_20BlitSparseProgramKeyE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke_3(uint64_t a1, void *a2)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), *a2);
}

uint64_t ___ZN3AGX8Compiler14compileProgramINS_20BlitSparseProgramKeyE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke_4(uint64_t a1, void *a2)
{
  if (getTimebaseInfo(void)::once != -1) {
    dispatch_once(&getTimebaseInfo(void)::once, &__block_literal_global_7474);
  }
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), *a2);
}

void ___ZN3AGX8Compiler14compileProgramINS_20BlitSparseProgramKeyE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke_2(void *a1)
{
  size_t size_ptr = 0;
  buffer_ptr = 0;
  uint64_t v2 = a1[12];
  AGCDeserializedReply::AGCDeserializedReply((AGCDeserializedReply *)v5);
  if (v2 || (uint64_t v4 = a1[5]) == 0)
  {
    unint64_t v3 = 0;
  }
  else
  {
    unint64_t v3 = dispatch_data_create_map(v4, (const void **)&buffer_ptr, &size_ptr);
    AGCDeserializedReply::deserialize((AGCDeserializedReply *)v5, buffer_ptr, size_ptr);
  }
  (*(void (**)(void, unsigned char *))(a1[11] + 16))(a1[11], v5);
  if (v3) {
    dispatch_release(v3);
  }
  AGCDeserializedReply::~AGCDeserializedReply((AGCDeserializedReply *)v5);
}

void sub_242A14318(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  AGCDeserializedReply::~AGCDeserializedReply((AGCDeserializedReply *)va);
  _Unwind_Resume(a1);
}

void sub_242A14AAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  os_unfair_lock_unlock(v18);
  _Block_object_dispose(&a17, 8);
  os_unfair_lock_unlock(v17);
  _Unwind_Resume(a1);
}

void ___ZN3AGX6DeviceINS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE32findOrCreateDriverProgramVariantINS1_25BlitComputeProgramVariantENS_23BlitFastClearProgramKeyENS1_20BlitFastClearProgramEEEPT_PT1_RKT0_P7NSArrayIPU27objcproto16MTLBinaryArchive11objc_objectE_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a3) {
    operator new();
  }
  uint64_t v5 = "MTLCompilerErrorTimeout";
  uint64_t v6 = "UnknownErrorCode";
  if (a3 == 2) {
    uint64_t v6 = "MTLCompilerErrorCompilationError";
  }
  if (a3 != 3) {
    uint64_t v5 = v6;
  }
  if (a3 == 1) {
    uint64_t v7 = "MTLCompilerErrorFatalError";
  }
  else {
    uint64_t v7 = v5;
  }
  uint64_t v12 = 0;
  *(void *)&long long v13 = 0;
  (*(void (**)(void, long long *, uint64_t *))(**(void **)(a1 + 48) + 16))(*(void *)(a1 + 48), &v13, &v12);
  uint64_t v8 = a4;
  uint64_t v9 = v7;
  uint64_t v10 = v12;
  uint64_t v11 = v13;
  _ZZZZN3AGX6DeviceINS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE49createTGOptimizationDriverShaderAndBufferIfNeededEP18AGXG17FamilyDeviceEUb_EUb_ENKUlvE_clB14_AGX__Crashed_Ev();
}

void sub_242A14DC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  AGX::ProgramVariant<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::BlitComputeArgumentTable,false,false>::~ProgramVariant(v3);
  AGX::ProgramBindingRemap<AGX::HAL200::Encoders,AGX::HAL200::Classes>::~ProgramBindingRemap((uint64_t)va);
  MEMORY[0x24566ED90](v3, 0x10F3C40CFA62115);
  _Unwind_Resume(a1);
}

uint64_t ___ZN3AGX8Compiler14compileProgramINS_23BlitFastClearProgramKeyEEEvRKT_P7NSArrayIPU27objcproto16MTLBinaryArchive11objc_objectEU13block_pointerFvRK20AGCDeserializedReply16MTLCompilerErrorP8NSStringEb_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a5) {
    AGX::Compiler::compileProgram<AGX::UserIntersectionProgramKey,AGCReplyArray>(AGX::UserIntersectionProgramKey const&,MTLCompileFunctionRequestData *,void({block_pointer})(AGCReplyArray const&,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,MTLCompilerError,NSString *,unsigned long long))::{lambda(void)#1}::operator()[abi:[AGX] Failed assertion __requestData.frameworkData && _requestData.pipelineOptions_]();
  }
  uint64_t v5 = *(uint64_t (**)(void))(*(void *)(a1 + 32) + 16);

  return v5();
}

void ___ZN3AGX8Compiler14compileProgramINS_23BlitFastClearProgramKeyE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  v14[0] = MEMORY[0x263EF8330];
  v14[1] = 3221225472;
  uint64_t v15 = ___ZN3AGX8Compiler14compileProgramINS_23BlitFastClearProgramKeyE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke_2;
  int32x4_t v16 = &unk_26516F7E8;
  uint64_t v17 = a9;
  uint64_t v18 = a3;
  uint64_t v19 = a4;
  uint64_t v20 = a5;
  uint64_t v21 = a6;
  uint64_t v22 = a7;
  uint64_t v12 = a1 + 32;
  uint64_t v10 = *(void **)(a1 + 32);
  uint64_t v11 = *(void *)(v12 + 8);
  uint64_t v23 = a8;
  uint64_t v24 = v11;
  uint64_t v25 = a2;
  uint64_t v26 = a10;
  if (objc_msgSend(v10, "sync", MEMORY[0x263EF8330], 3221225472))
  {
    v15(v14);
  }
  else
  {
    global_queue = dispatch_get_global_queue(0, 0);
    dispatch_async(global_queue, v14);
  }
}

uint64_t ___ZN3AGX8Compiler14compileProgramINS_23BlitFastClearProgramKeyE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke_3(uint64_t a1, void *a2)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), *a2);
}

uint64_t ___ZN3AGX8Compiler14compileProgramINS_23BlitFastClearProgramKeyE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke_4(uint64_t a1, void *a2)
{
  if (getTimebaseInfo(void)::once != -1) {
    dispatch_once(&getTimebaseInfo(void)::once, &__block_literal_global_7474);
  }
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), *a2);
}

void ___ZN3AGX8Compiler14compileProgramINS_23BlitFastClearProgramKeyE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke_2(void *a1)
{
  size_t size_ptr = 0;
  buffer_ptr = 0;
  uint64_t v2 = a1[12];
  AGCDeserializedReply::AGCDeserializedReply((AGCDeserializedReply *)v5);
  if (v2 || (uint64_t v4 = a1[5]) == 0)
  {
    unint64_t v3 = 0;
  }
  else
  {
    unint64_t v3 = dispatch_data_create_map(v4, (const void **)&buffer_ptr, &size_ptr);
    AGCDeserializedReply::deserialize((AGCDeserializedReply *)v5, buffer_ptr, size_ptr);
  }
  (*(void (**)(void, unsigned char *))(a1[11] + 16))(a1[11], v5);
  if (v3) {
    dispatch_release(v3);
  }
  AGCDeserializedReply::~AGCDeserializedReply((AGCDeserializedReply *)v5);
}

void sub_242A150E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  AGCDeserializedReply::~AGCDeserializedReply((AGCDeserializedReply *)va);
  _Unwind_Resume(a1);
}

void sub_242A1584C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  os_unfair_lock_unlock(v18);
  os_unfair_lock_unlock(v17);
  _Block_object_dispose(&a17, 8);
  _Unwind_Resume(a1);
}

void ___ZN3AGX6DeviceINS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE30findOrCreateBlitProgramVariantERNS_29BlitVertexFastClearProgramKeyE_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a3) {
    operator new();
  }
  uint64_t v5 = "MTLCompilerErrorTimeout";
  uint64_t v6 = "UnknownErrorCode";
  if (a3 == 2) {
    uint64_t v6 = "MTLCompilerErrorCompilationError";
  }
  if (a3 != 3) {
    uint64_t v5 = v6;
  }
  if (a3 == 1) {
    uint64_t v7 = "MTLCompilerErrorFatalError";
  }
  else {
    uint64_t v7 = v5;
  }
  v8[0] = 0;
  uint64_t v9 = 0;
  (*(void (**)(void, void *, uint64_t *))(**(void **)(a1 + 48) + 16))(*(void *)(a1 + 48), v8, &v9);
  v8[7] = a4;
  v8[8] = v7;
  v8[9] = v9;
  v8[10] = v8[0];
  _ZZZZN3AGX6DeviceINS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE49createTGOptimizationDriverShaderAndBufferIfNeededEP18AGXG17FamilyDeviceEUb_EUb_ENKUlvE_clB14_AGX__Crashed_Ev();
}

void sub_242A15A48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  AGX::ProgramBindingRemap<AGX::HAL200::Encoders,AGX::HAL200::Classes>::~ProgramBindingRemap((uint64_t)va);
  MEMORY[0x24566ED90](v11, 0x10F3C405E169A1DLL);
  _Unwind_Resume(a1);
}

uint64_t ___ZN3AGX8Compiler14compileProgramINS_29BlitVertexFastClearProgramKeyEEEvRKT_P7NSArrayIPU27objcproto16MTLBinaryArchive11objc_objectEU13block_pointerFvRK20AGCDeserializedReply16MTLCompilerErrorP8NSStringEb_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a5) {
    AGX::Compiler::compileProgram<AGX::UserIntersectionProgramKey,AGCReplyArray>(AGX::UserIntersectionProgramKey const&,MTLCompileFunctionRequestData *,void({block_pointer})(AGCReplyArray const&,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,MTLCompilerError,NSString *,unsigned long long))::{lambda(void)#1}::operator()[abi:[AGX] Failed assertion __requestData.frameworkData && _requestData.pipelineOptions_]();
  }
  uint64_t v5 = *(uint64_t (**)(void))(*(void *)(a1 + 32) + 16);

  return v5();
}

void ___ZN3AGX8Compiler14compileProgramINS_29BlitVertexFastClearProgramKeyE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  v14[0] = MEMORY[0x263EF8330];
  v14[1] = 3221225472;
  uint64_t v15 = ___ZN3AGX8Compiler14compileProgramINS_29BlitVertexFastClearProgramKeyE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke_2;
  int32x4_t v16 = &unk_26516F7E8;
  uint64_t v17 = a9;
  uint64_t v18 = a3;
  uint64_t v19 = a4;
  uint64_t v20 = a5;
  uint64_t v21 = a6;
  uint64_t v22 = a7;
  uint64_t v12 = a1 + 32;
  uint64_t v10 = *(void **)(a1 + 32);
  uint64_t v11 = *(void *)(v12 + 8);
  uint64_t v23 = a8;
  uint64_t v24 = v11;
  uint64_t v25 = a2;
  uint64_t v26 = a10;
  if (objc_msgSend(v10, "sync", MEMORY[0x263EF8330], 3221225472))
  {
    v15(v14);
  }
  else
  {
    global_queue = dispatch_get_global_queue(0, 0);
    dispatch_async(global_queue, v14);
  }
}

uint64_t ___ZN3AGX8Compiler14compileProgramINS_29BlitVertexFastClearProgramKeyE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke_3(uint64_t a1, void *a2)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), *a2);
}

uint64_t ___ZN3AGX8Compiler14compileProgramINS_29BlitVertexFastClearProgramKeyE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke_4(uint64_t a1, void *a2)
{
  if (getTimebaseInfo(void)::once != -1) {
    dispatch_once(&getTimebaseInfo(void)::once, &__block_literal_global_7474);
  }
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), *a2);
}

void ___ZN3AGX8Compiler14compileProgramINS_29BlitVertexFastClearProgramKeyE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke_2(void *a1)
{
  size_t size_ptr = 0;
  buffer_ptr = 0;
  uint64_t v2 = a1[12];
  AGCDeserializedReply::AGCDeserializedReply((AGCDeserializedReply *)v5);
  if (v2 || (uint64_t v4 = a1[5]) == 0)
  {
    unint64_t v3 = 0;
  }
  else
  {
    unint64_t v3 = dispatch_data_create_map(v4, (const void **)&buffer_ptr, &size_ptr);
    AGCDeserializedReply::deserialize((AGCDeserializedReply *)v5, buffer_ptr, size_ptr);
  }
  (*(void (**)(void, unsigned char *))(a1[11] + 16))(a1[11], v5);
  if (v3) {
    dispatch_release(v3);
  }
  AGCDeserializedReply::~AGCDeserializedReply((AGCDeserializedReply *)v5);
}

void sub_242A15D4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  AGCDeserializedReply::~AGCDeserializedReply((AGCDeserializedReply *)va);
  _Unwind_Resume(a1);
}

void AGX::HAL200::BlitVertexFastClearProgramVariant::~BlitVertexFastClearProgramVariant(AGX::HAL200::BlitVertexFastClearProgramVariant *this)
{
  *(void *)this = &unk_26F852998;
  if (*((void *)this + 340))
  {
    uint64_t v2 = (_OWORD *)((char *)this + 2696);
    uint64_t v3 = *((void *)this + 341);
    uint64_t v4 = *(NSObject **)(v3 + 16);
    v5[0] = MEMORY[0x263EF8330];
    v5[1] = 3221225472;
    v5[2] = ___ZN3AGX4HeapILb1EE14deallocateImplERKNS1_10AllocationE_block_invoke;
    v5[3] = &__block_descriptor_48_e5_v8__0l;
    v5[4] = v3;
    v5[5] = (char *)this + 2696;
    dispatch_sync(v4, v5);
    *(_OWORD *)((char *)this + 2721) = 0u;
    *uint64_t v2 = 0u;
    *(_OWORD *)((char *)this + 2712) = 0u;
  }
  AGX::ProgramVariantESLState<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ArgumentTable,true,7ul>::~ProgramVariantESLState((uint64_t *)this + 168);
  AGX::ProgramVariant<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::BlitFastClearVertexArgumentTable,false,false>::~ProgramVariant((unint64_t)this);

  JUMPOUT(0x24566ED90);
}

{
  _OWORD *v2;
  uint64_t v3;
  NSObject *v4;
  void v5[6];
  uint64_t vars8;

  *(void *)this = &unk_26F852998;
  if (*((void *)this + 340))
  {
    uint64_t v2 = (_OWORD *)((char *)this + 2696);
    uint64_t v3 = *((void *)this + 341);
    uint64_t v4 = *(NSObject **)(v3 + 16);
    v5[0] = MEMORY[0x263EF8330];
    v5[1] = 3221225472;
    v5[2] = ___ZN3AGX4HeapILb1EE14deallocateImplERKNS1_10AllocationE_block_invoke;
    v5[3] = &__block_descriptor_48_e5_v8__0l;
    v5[4] = v3;
    v5[5] = (char *)this + 2696;
    dispatch_sync(v4, v5);
    *(_OWORD *)((char *)this + 2721) = 0u;
    *uint64_t v2 = 0u;
    *(_OWORD *)((char *)this + 2712) = 0u;
  }
  AGX::ProgramVariantESLState<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ArgumentTable,true,7ul>::~ProgramVariantESLState((uint64_t *)this + 168);

  AGX::ProgramVariant<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::BlitFastClearVertexArgumentTable,false,false>::~ProgramVariant((unint64_t)this);
}

void ___ZN3AGX6DeviceINS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE46findOrCreateComputeControlFlowPredicateProgramERKNS_37ComputeControlFlowPredicateProgramKeyE_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a3) {
    operator new();
  }
  uint64_t v5 = "MTLCompilerErrorTimeout";
  uint64_t v6 = "UnknownErrorCode";
  if (a3 == 2) {
    uint64_t v6 = "MTLCompilerErrorCompilationError";
  }
  if (a3 != 3) {
    uint64_t v5 = v6;
  }
  if (a3 == 1) {
    uint64_t v7 = "MTLCompilerErrorFatalError";
  }
  else {
    uint64_t v7 = v5;
  }
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  (*(void (**)(void, uint64_t *, uint64_t *))(**(void **)(a1 + 48) + 16))(*(void *)(a1 + 48), &v13, &v12);
  uint64_t v8 = a4;
  uint64_t v9 = v7;
  uint64_t v10 = v12;
  uint64_t v11 = v13;
  _ZZZZN3AGX6DeviceINS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE49createTGOptimizationDriverShaderAndBufferIfNeededEP18AGXG17FamilyDeviceEUb_EUb_ENKUlvE_clB14_AGX__Crashed_Ev();
}

void sub_242A160F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  if (*(char *)(v5 - 49) < 0) {
    operator delete(*(void **)(v5 - 72));
  }
  AGX::ProgramBindingRemap<AGX::HAL200::Encoders,AGX::HAL200::Classes>::~ProgramBindingRemap((uint64_t)va);
  MEMORY[0x24566ED90](v4, 0x10F3C407204815DLL);
  _Unwind_Resume(a1);
}

uint64_t ___ZN3AGX8Compiler14compileProgramINS_37ComputeControlFlowPredicateProgramKeyEEEvRKT_P7NSArrayIPU27objcproto16MTLBinaryArchive11objc_objectEU13block_pointerFvRK20AGCDeserializedReply16MTLCompilerErrorP8NSStringEb_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a5) {
    AGX::Compiler::compileProgram<AGX::UserIntersectionProgramKey,AGCReplyArray>(AGX::UserIntersectionProgramKey const&,MTLCompileFunctionRequestData *,void({block_pointer})(AGCReplyArray const&,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,MTLCompilerError,NSString *,unsigned long long))::{lambda(void)#1}::operator()[abi:[AGX] Failed assertion __requestData.frameworkData && _requestData.pipelineOptions_]();
  }
  uint64_t v5 = *(uint64_t (**)(void))(*(void *)(a1 + 32) + 16);

  return v5();
}

void ___ZN3AGX8Compiler14compileProgramINS_37ComputeControlFlowPredicateProgramKeyE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  v14[0] = MEMORY[0x263EF8330];
  v14[1] = 3221225472;
  uint64_t v15 = ___ZN3AGX8Compiler14compileProgramINS_37ComputeControlFlowPredicateProgramKeyE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke_2;
  int32x4_t v16 = &unk_26516F7E8;
  uint64_t v17 = a9;
  uint64_t v18 = a3;
  uint64_t v19 = a4;
  uint64_t v20 = a5;
  uint64_t v21 = a6;
  uint64_t v22 = a7;
  uint64_t v12 = a1 + 32;
  uint64_t v10 = *(void **)(a1 + 32);
  uint64_t v11 = *(void *)(v12 + 8);
  uint64_t v23 = a8;
  uint64_t v24 = v11;
  uint64_t v25 = a2;
  uint64_t v26 = a10;
  if (objc_msgSend(v10, "sync", MEMORY[0x263EF8330], 3221225472))
  {
    v15(v14);
  }
  else
  {
    global_queue = dispatch_get_global_queue(0, 0);
    dispatch_async(global_queue, v14);
  }
}

uint64_t ___ZN3AGX8Compiler14compileProgramINS_37ComputeControlFlowPredicateProgramKeyE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke_3(uint64_t a1, void *a2)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), *a2);
}

uint64_t ___ZN3AGX8Compiler14compileProgramINS_37ComputeControlFlowPredicateProgramKeyE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke_4(uint64_t a1, void *a2)
{
  if (getTimebaseInfo(void)::once != -1) {
    dispatch_once(&getTimebaseInfo(void)::once, &__block_literal_global_7474);
  }
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), *a2);
}

void ___ZN3AGX8Compiler14compileProgramINS_37ComputeControlFlowPredicateProgramKeyE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke_2(void *a1)
{
  size_t size_ptr = 0;
  buffer_ptr = 0;
  uint64_t v2 = a1[12];
  AGCDeserializedReply::AGCDeserializedReply((AGCDeserializedReply *)v5);
  if (v2 || (uint64_t v4 = a1[5]) == 0)
  {
    uint64_t v3 = 0;
  }
  else
  {
    uint64_t v3 = dispatch_data_create_map(v4, (const void **)&buffer_ptr, &size_ptr);
    AGCDeserializedReply::deserialize((AGCDeserializedReply *)v5, buffer_ptr, size_ptr);
  }
  (*(void (**)(void, unsigned char *))(a1[11] + 16))(a1[11], v5);
  if (v3) {
    dispatch_release(v3);
  }
  AGCDeserializedReply::~AGCDeserializedReply((AGCDeserializedReply *)v5);
}

void sub_242A16408(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  AGCDeserializedReply::~AGCDeserializedReply((AGCDeserializedReply *)va);
  _Unwind_Resume(a1);
}

uint64_t AGX::Device<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::findOrCreateTileDispatchVertexProgram(uint64_t a1, uint64_t a2)
{
  uint64_t v57 = *MEMORY[0x263EF8340];
  uint64_t v41 = 0;
  uint64_t v42 = &v41;
  uint64_t v43 = 0x2020000000;
  uint64_t v44 = 0;
  uint64_t v4 = (os_unfair_lock_s *)(a1 + 7748);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 7748));
  uint64_t v5 = *(void *)(a1 + 5080);
  uint64_t v6 = (os_unfair_lock_s *)(v5 + 728);
  os_unfair_lock_lock((os_unfair_lock_t)(v5 + 728));
  uint64_t v7 = *(unsigned int *)(v5 + 400);
  uint64_t v8 = *(void *)(v5 + 392);
  if (v7)
  {
    uint64_t v9 = 0;
    uint64_t v10 = (unsigned __int8 *)(v8 + 40);
    while (1)
    {
      unsigned __int8 v11 = *v10;
      v10 += 48;
      if (((v11 ^ *(unsigned char *)(a2 + 40)) & 7) == 0) {
        break;
      }
      if (v7 == ++v9) {
        goto LABEL_5;
      }
    }
    uint64_t v18 = v8 + 48 * v9;
  }
  else
  {
LABEL_5:
    uint64_t v12 = *(void *)(v8 + 384);
    if (v12)
    {
      unsigned __int8 v13 = *(unsigned char *)(a2 + 40);
      unsigned int v14 = 1;
      while (1)
      {
        if (((*(unsigned char *)(v12 + 40) ^ v13) & 7) == 0)
        {
          unsigned int v14 = 0;
          goto LABEL_21;
        }
        if (((*(unsigned char *)(v12 + 88) ^ v13) & 7) == 0) {
          goto LABEL_21;
        }
        if (((*(unsigned char *)(v12 + 136) ^ v13) & 7) == 0)
        {
          unsigned int v14 = 2;
          goto LABEL_21;
        }
        if (((*(unsigned char *)(v12 + 184) ^ v13) & 7) == 0) {
          break;
        }
        uint64_t v12 = *(void *)(v12 + 384);
        if (!v12) {
          goto LABEL_12;
        }
      }
      unsigned int v14 = 3;
LABEL_21:
      uint64_t v18 = v12 + 48 * v14;
    }
    else
    {
LABEL_12:
      if (v7 == 4) {
        operator new();
      }
      uint64_t v15 = v8 + 48 * v7;
      *(_DWORD *)(v15 + 8) = *(_DWORD *)(a2 + 8);
      if (v15 != a2) {
        std::vector<unsigned int>::__assign_with_size[abi:nn180100]<unsigned int *,unsigned int *>((void *)(v15 + 16), *(char **)(a2 + 16), *(char **)(a2 + 24), (uint64_t)(*(void *)(a2 + 24) - *(void *)(a2 + 16)) >> 2);
      }
      *(_DWORD *)(v8 + 48 * v7 + 40) = *(_DWORD *)(a2 + 40);
      uint64_t v16 = *(void *)(v5 + 392);
      unsigned int v17 = *(_DWORD *)(v5 + 400);
      *(_DWORD *)(v5 + 400) = v17 + 1;
      uint64_t v18 = v16 + 48 * v17;
    }
  }
  uint64_t v19 = v18 + 192;
  if (*(void *)(v18 + 192))
  {
    if (!*(unsigned char *)(v18 + 232))
    {
      os_unfair_lock_unlock(v6);
      v42[3] = *(void *)(v19 + 8);
      goto LABEL_44;
    }
    uint64_t v20 = *(void *)(v18 + 200);
    if (v20) {
      (*(void (**)(uint64_t))(*(void *)v20 + 8))(v20);
    }
    *(void *)(v19 + 8) = 0;
    *(void *)(v19 + 16) = 0;

    *(void *)(v19 + 24) = 0;
    *(void *)(v19 + 32) = 0;
    *(unsigned char *)(v19 + 40) = 0;
    uint64_t v21 = *(NSObject **)v19;
  }
  else
  {
    uint64_t v21 = dispatch_group_create();
    *(void *)uint64_t v19 = v21;
  }
  dispatch_group_enter(v21);
  os_unfair_lock_unlock(v6);
  uint64_t v22 = *(void *)(a1 + 6008);
  v40[0] = MEMORY[0x263EF8330];
  v40[1] = 3221225472;
  v40[2] = ___ZN3AGX6DeviceINS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE37findOrCreateTileDispatchVertexProgramERKNS_28TileDispatchVertexProgramKeyE_block_invoke;
  v40[3] = &unk_26516E908;
  v40[4] = &v41;
  v40[5] = a1;
  v40[6] = v19;
  uint64_t v23 = *(void *)(v22 + 8);
  if ((*(unsigned int (**)(uint64_t))(*(void *)a2 + 24))(a2)) {
    uint64_t v24 = v23;
  }
  else {
    uint64_t v24 = 0;
  }
  uint64_t v25 = objc_opt_new();
  [v25 setSync:1];
  [v25 setPipelineCache:v24];
  [v25 setBinaryArchives:0];
  v45[0] = MEMORY[0x263EF8330];
  v45[1] = 3221225472;
  v45[2] = ___ZN3AGX8Compiler14compileProgramINS_28TileDispatchVertexProgramKeyEEEvRKT_P7NSArrayIPU27objcproto16MTLBinaryArchive11objc_objectEU13block_pointerFvRK20AGCDeserializedReply16MTLCompilerErrorP8NSStringEb_block_invoke;
  v45[3] = &unk_26516F7C0;
  v45[4] = v40;
  size_t v46 = 0;
  uint64_t v47 = 0;
  (*(void (**)(uint64_t, const void **, size_t *))(*(void *)a2 + 16))(a2, &v47, &v46);
  uint64_t v26 = dispatch_data_create(v47, v46, 0, 0);
  [v25 setDriverKeyData:v26];
  if ([v25 airScript])
  {
    uint64_t v27 = [v25 airScript];
    long long v55 = 0uLL;
    v56[0] = 0;
    *(void *)&long long v55 = dispatch_data_create_map(v27, (const void **)&v55 + 1, v56);
    uint64_t v28 = *((void *)&v55 + 1);
    uint64_t v29 = **((_DWORD **)&v55 + 1);
    CC_SHA256_Init(&c);
    (**(void (***)(uint64_t, CC_SHA256_CTX *))a2)(a2, &c);
    *(void *)leuint64_t n = 0;
    uintptr_t data = 0;
    if (AGX::GetSerializedVertexFormat((AGX *)(v28 + v29), &data, (size_t *)len, v30, v31))
    {
      uint64_t v32 = data;
      CC_SHA256_Update(&c, data, len[0]);
      free(v32);
    }
    CC_SHA256_Final((unsigned __int8 *)&md, &c);
    dispatch_release((dispatch_object_t)v55);
    long long v55 = md;
    *(_OWORD *)uint64_t v56 = v52;
    [v25 setVendorPluginFunctionId:&v55];
  }
  *(void *)c.count = MEMORY[0x263EF8330];
  *(void *)c.hash = 3221225472;
  *(void *)&c.hash[2] = ___ZN3AGX8Compiler14compileProgramINS_28TileDispatchVertexProgramKeyE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke;
  *(void *)&c.hash[4] = &unk_26516F810;
  *(void *)&c.hash[6] = v25;
  *(void *)c.wbuf = v45;
  if ([v25 function])
  {
    uint64_t v33 = mach_absolute_time();
    uint64_t v34 = *(void **)v22;
    *(void *)&long long md = MEMORY[0x263EF8330];
    *((void *)&md + 1) = 3221225472;
    *(void *)&long long v52 = ___ZN3AGX8Compiler14compileProgramINS_28TileDispatchVertexProgramKeyE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke_4;
    *((void *)&v52 + 1) = &unk_26516F860;
    p_CC_SHA256_CTX c = &c;
    uint64_t v54 = v33;
    [v34 compileFunctionRequest:v25 completionHandler:&md];
  }
  else
  {
    if ([v25 frameworkData] || objc_msgSend(v25, "pipelineOptions")) {
      AGX::Compiler::compileProgram<AGX::UserIntersectionProgramKey,AGCReplyArray>(AGX::UserIntersectionProgramKey const&,MTLCompileFunctionRequestData *,void({block_pointer})(AGCReplyArray const&,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,MTLCompilerError,NSString *,unsigned long long))::{lambda(void)#1}::operator()[abi:[AGX] Failed assertion __requestData.frameworkData && _requestData.pipelineOptions_]();
    }
    *(void *)&long long md = MEMORY[0x263EF8330];
    *((void *)&md + 1) = 3221225472;
    *(void *)&long long v52 = ___ZN3AGX8Compiler14compileProgramINS_28TileDispatchVertexProgramKeyE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke_3;
    *((void *)&v52 + 1) = &unk_26516F838;
    p_CC_SHA256_CTX c = &c;
    uint64_t v35 = objc_msgSend((id)objc_msgSend(v25, "binaryArchives"), "count");
    uint64_t v36 = *(void **)v22;
    uint64_t v37 = [v25 driverKeyData];
    if (v35) {
      objc_msgSend(v36, "compileRequest:binaryArchives:failOnBinaryArchiveMiss:pipelineCache:sync:completionHandler:", v37, objc_msgSend(v25, "binaryArchives"), 0, objc_msgSend(v25, "pipelineCache"), objc_msgSend(v25, "sync"), &md);
    }
    else {
      objc_msgSend(v36, "compileRequest:pipelineCache:sync:completionHandler:", v37, objc_msgSend(v25, "pipelineCache"), objc_msgSend(v25, "sync"), &md);
    }
  }
  dispatch_release(v26);

LABEL_44:
  os_unfair_lock_unlock(v4);
  uint64_t v38 = v42[3];
  _Block_object_dispose(&v41, 8);
  return v38;
}

void sub_242A16B84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  os_unfair_lock_unlock(v18);
  os_unfair_lock_unlock(v17);
  _Block_object_dispose(&a17, 8);
  _Unwind_Resume(a1);
}

void ___ZN3AGX6DeviceINS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE37findOrCreateTileDispatchVertexProgramERKNS_28TileDispatchVertexProgramKeyE_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  if (!a3) {
    operator new();
  }
  _ZZZN3AGX6DeviceINS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE20compileDriverShadersEP18AGXG17FamilyDeviceEUb3_ENKUlvE_clB57_AGX__Failed_assertion__error____MTLCompilerErrorNoError_Ev(a4);
}

void sub_242A16D00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  AGX::ProgramBindingRemap<AGX::HAL200::Encoders,AGX::HAL200::Classes>::~ProgramBindingRemap((uint64_t)va);
  MEMORY[0x24566ED90](v10, 0x10F3C405E169A1DLL);
  _Unwind_Resume(a1);
}

uint64_t ___ZN3AGX8Compiler14compileProgramINS_28TileDispatchVertexProgramKeyEEEvRKT_P7NSArrayIPU27objcproto16MTLBinaryArchive11objc_objectEU13block_pointerFvRK20AGCDeserializedReply16MTLCompilerErrorP8NSStringEb_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a5) {
    AGX::Compiler::compileProgram<AGX::UserIntersectionProgramKey,AGCReplyArray>(AGX::UserIntersectionProgramKey const&,MTLCompileFunctionRequestData *,void({block_pointer})(AGCReplyArray const&,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,MTLCompilerError,NSString *,unsigned long long))::{lambda(void)#1}::operator()[abi:[AGX] Failed assertion __requestData.frameworkData && _requestData.pipelineOptions_]();
  }
  uint64_t v5 = *(uint64_t (**)(void))(*(void *)(a1 + 32) + 16);

  return v5();
}

void ___ZN3AGX8Compiler14compileProgramINS_28TileDispatchVertexProgramKeyE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  v14[0] = MEMORY[0x263EF8330];
  v14[1] = 3221225472;
  uint64_t v15 = ___ZN3AGX8Compiler14compileProgramINS_28TileDispatchVertexProgramKeyE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke_2;
  uint64_t v16 = &unk_26516F7E8;
  uint64_t v17 = a9;
  uint64_t v18 = a3;
  uint64_t v19 = a4;
  uint64_t v20 = a5;
  uint64_t v21 = a6;
  uint64_t v22 = a7;
  uint64_t v12 = a1 + 32;
  uint64_t v10 = *(void **)(a1 + 32);
  uint64_t v11 = *(void *)(v12 + 8);
  uint64_t v23 = a8;
  uint64_t v24 = v11;
  uint64_t v25 = a2;
  uint64_t v26 = a10;
  if (objc_msgSend(v10, "sync", MEMORY[0x263EF8330], 3221225472))
  {
    v15(v14);
  }
  else
  {
    global_queue = dispatch_get_global_queue(0, 0);
    dispatch_async(global_queue, v14);
  }
}

uint64_t ___ZN3AGX8Compiler14compileProgramINS_28TileDispatchVertexProgramKeyE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke_3(uint64_t a1, void *a2)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), *a2);
}

uint64_t ___ZN3AGX8Compiler14compileProgramINS_28TileDispatchVertexProgramKeyE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke_4(uint64_t a1, void *a2)
{
  if (getTimebaseInfo(void)::once != -1) {
    dispatch_once(&getTimebaseInfo(void)::once, &__block_literal_global_7474);
  }
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), *a2);
}

void ___ZN3AGX8Compiler14compileProgramINS_28TileDispatchVertexProgramKeyE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke_2(void *a1)
{
  size_t size_ptr = 0;
  buffer_ptr = 0;
  uint64_t v2 = a1[12];
  AGCDeserializedReply::AGCDeserializedReply((AGCDeserializedReply *)v5);
  if (v2 || (uint64_t v4 = a1[5]) == 0)
  {
    uint64_t v3 = 0;
  }
  else
  {
    uint64_t v3 = dispatch_data_create_map(v4, (const void **)&buffer_ptr, &size_ptr);
    AGCDeserializedReply::deserialize((AGCDeserializedReply *)v5, buffer_ptr, size_ptr);
  }
  (*(void (**)(void, unsigned char *))(a1[11] + 16))(a1[11], v5);
  if (v3) {
    dispatch_release(v3);
  }
  AGCDeserializedReply::~AGCDeserializedReply((AGCDeserializedReply *)v5);
}

void sub_242A17004(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  AGCDeserializedReply::~AGCDeserializedReply((AGCDeserializedReply *)va);
  _Unwind_Resume(a1);
}

void AGX::HAL200::TileDispatchVertexProgramVariant::~TileDispatchVertexProgramVariant(AGX::HAL200::TileDispatchVertexProgramVariant *this)
{
  *(void *)this = &unk_26F8529F8;
  if (*((void *)this + 340))
  {
    uint64_t v2 = (_OWORD *)((char *)this + 2696);
    uint64_t v3 = *((void *)this + 341);
    uint64_t v4 = *(NSObject **)(v3 + 16);
    v5[0] = MEMORY[0x263EF8330];
    v5[1] = 3221225472;
    v5[2] = ___ZN3AGX4HeapILb1EE14deallocateImplERKNS1_10AllocationE_block_invoke;
    v5[3] = &__block_descriptor_48_e5_v8__0l;
    v5[4] = v3;
    v5[5] = (char *)this + 2696;
    dispatch_sync(v4, v5);
    *(_OWORD *)((char *)this + 2721) = 0u;
    *uint64_t v2 = 0u;
    *(_OWORD *)((char *)this + 2712) = 0u;
  }
  AGX::ProgramVariantESLState<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ArgumentTable,true,7ul>::~ProgramVariantESLState((uint64_t *)this + 168);
  AGX::ProgramVariant<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::TileDispatchVertexArgumentTable,false,false>::~ProgramVariant((unint64_t)this);

  JUMPOUT(0x24566ED90);
}

{
  _OWORD *v2;
  uint64_t v3;
  NSObject *v4;
  void v5[6];
  uint64_t vars8;

  *(void *)this = &unk_26F8529F8;
  if (*((void *)this + 340))
  {
    uint64_t v2 = (_OWORD *)((char *)this + 2696);
    uint64_t v3 = *((void *)this + 341);
    uint64_t v4 = *(NSObject **)(v3 + 16);
    v5[0] = MEMORY[0x263EF8330];
    v5[1] = 3221225472;
    v5[2] = ___ZN3AGX4HeapILb1EE14deallocateImplERKNS1_10AllocationE_block_invoke;
    v5[3] = &__block_descriptor_48_e5_v8__0l;
    v5[4] = v3;
    v5[5] = (char *)this + 2696;
    dispatch_sync(v4, v5);
    *(_OWORD *)((char *)this + 2721) = 0u;
    *uint64_t v2 = 0u;
    *(_OWORD *)((char *)this + 2712) = 0u;
  }
  AGX::ProgramVariantESLState<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ArgumentTable,true,7ul>::~ProgramVariantESLState((uint64_t *)this + 168);

  AGX::ProgramVariant<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::TileDispatchVertexArgumentTable,false,false>::~ProgramVariant((unint64_t)this);
}

void ___ZN3AGX6DeviceINS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE30findOrCreateBVHBuilderPipelineERNS_20BVHBuilderProgramKeyE_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  if (!a3) {
    operator new();
  }
  _ZZZN3AGX6DeviceINS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE20compileDriverShadersEP18AGXG17FamilyDeviceEUb3_ENKUlvE_clB57_AGX__Failed_assertion__error____MTLCompilerErrorNoError_Ev(a4);
}

void sub_242A1742C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  if (*(char *)(v4 - 49) < 0) {
    operator delete(*(void **)(v4 - 72));
  }
  AGX::ProgramBindingRemap<AGX::HAL200::Encoders,AGX::HAL200::Classes>::~ProgramBindingRemap((uint64_t)va);
  MEMORY[0x24566ED90](v3, 0x10F3C407204815DLL);
  _Unwind_Resume(a1);
}

uint64_t ___ZN3AGX8Compiler14compileProgramINS_20BVHBuilderProgramKeyEEEvRKT_P7NSArrayIPU27objcproto16MTLBinaryArchive11objc_objectEU13block_pointerFvRK20AGCDeserializedReply16MTLCompilerErrorP8NSStringEb_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a5) {
    AGX::Compiler::compileProgram<AGX::UserIntersectionProgramKey,AGCReplyArray>(AGX::UserIntersectionProgramKey const&,MTLCompileFunctionRequestData *,void({block_pointer})(AGCReplyArray const&,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,MTLCompilerError,NSString *,unsigned long long))::{lambda(void)#1}::operator()[abi:[AGX] Failed assertion __requestData.frameworkData && _requestData.pipelineOptions_]();
  }
  uint64_t v5 = *(uint64_t (**)(void))(*(void *)(a1 + 32) + 16);

  return v5();
}

void ___ZN3AGX8Compiler14compileProgramINS_20BVHBuilderProgramKeyE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  v14[0] = MEMORY[0x263EF8330];
  v14[1] = 3221225472;
  uint64_t v15 = ___ZN3AGX8Compiler14compileProgramINS_20BVHBuilderProgramKeyE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke_2;
  uint64_t v16 = &unk_26516F7E8;
  uint64_t v17 = a9;
  uint64_t v18 = a3;
  uint64_t v19 = a4;
  uint64_t v20 = a5;
  uint64_t v21 = a6;
  uint64_t v22 = a7;
  uint64_t v12 = a1 + 32;
  uint64_t v10 = *(void **)(a1 + 32);
  uint64_t v11 = *(void *)(v12 + 8);
  uint64_t v23 = a8;
  uint64_t v24 = v11;
  uint64_t v25 = a2;
  uint64_t v26 = a10;
  if (objc_msgSend(v10, "sync", MEMORY[0x263EF8330], 3221225472))
  {
    v15(v14);
  }
  else
  {
    global_queue = dispatch_get_global_queue(0, 0);
    dispatch_async(global_queue, v14);
  }
}

uint64_t ___ZN3AGX8Compiler14compileProgramINS_20BVHBuilderProgramKeyE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke_3(uint64_t a1, void *a2)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), *a2);
}

uint64_t ___ZN3AGX8Compiler14compileProgramINS_20BVHBuilderProgramKeyE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke_4(uint64_t a1, void *a2)
{
  if (getTimebaseInfo(void)::once != -1) {
    dispatch_once(&getTimebaseInfo(void)::once, &__block_literal_global_7474);
  }
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), *a2);
}

void ___ZN3AGX8Compiler14compileProgramINS_20BVHBuilderProgramKeyE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke_2(void *a1)
{
  size_t size_ptr = 0;
  buffer_ptr = 0;
  uint64_t v2 = a1[12];
  AGCDeserializedReply::AGCDeserializedReply((AGCDeserializedReply *)v5);
  if (v2 || (uint64_t v4 = a1[5]) == 0)
  {
    uint64_t v3 = 0;
  }
  else
  {
    uint64_t v3 = dispatch_data_create_map(v4, (const void **)&buffer_ptr, &size_ptr);
    AGCDeserializedReply::deserialize((AGCDeserializedReply *)v5, buffer_ptr, size_ptr);
  }
  (*(void (**)(void, unsigned char *))(a1[11] + 16))(a1[11], v5);
  if (v3) {
    dispatch_release(v3);
  }
  AGCDeserializedReply::~AGCDeserializedReply((AGCDeserializedReply *)v5);
}

void sub_242A17740(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  AGCDeserializedReply::~AGCDeserializedReply((AGCDeserializedReply *)va);
  _Unwind_Resume(a1);
}

uint64_t AGX::Device<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::isAfterFragmentMemoryBarrierSupported()
{
  {
    AGX::Device<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::isAfterFragmentMemoryBarrierSupported(void)const::isAfterFragmentMemoryBarrierSupported = dyld_program_sdk_at_least() ^ 1;
  }
  return AGX::Device<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::isAfterFragmentMemoryBarrierSupported(void)const::isAfterFragmentMemoryBarrierSupported;
}

void sub_242A177BC(_Unwind_Exception *a1)
{
}

void AGX::Device<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::registerVariantEventInfo(uint64_t a1, unint64_t a2, long long *a3)
{
  uint64_t v7 = (os_unfair_lock_s *)(a1 + 7952);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 7952));
  uint64_t v8 = *(void *)(a1 + 7984);
  if ((v8 & 0x3FFFFFFFFFFC000) != 0)
  {
    if (AGX::Device<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::registerVariantEventInfo(unsigned long,AGX::FunctionCompiledEventInfo const&)::once != -1) {
      dispatch_once(&AGX::Device<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::registerVariantEventInfo(unsigned long,AGX::FunctionCompiledEventInfo const&)::once, &__block_literal_global_108);
    }
    goto LABEL_86;
  }
  unint64_t v9 = *(void *)(a1 + 7968);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v3 = a2;
      if (v9 <= a2) {
        unint64_t v3 = a2 % v9;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & a2;
    }
    uint64_t v11 = *(void ***)(*(void *)(a1 + 7960) + 8 * v3);
    if (v11)
    {
      uint64_t v12 = (char *)*v11;
      if (*v11)
      {
        if (v10.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v14 = *((void *)v12 + 1);
            if (v14 == a2)
            {
              if (*((void *)v12 + 2) == a2) {
                goto LABEL_85;
              }
            }
            else if ((v14 & (v9 - 1)) != v3)
            {
              goto LABEL_25;
            }
            uint64_t v12 = *(char **)v12;
            if (!v12) {
              goto LABEL_25;
            }
          }
        }
        do
        {
          unint64_t v13 = *((void *)v12 + 1);
          if (v13 == a2)
          {
            if (*((void *)v12 + 2) == a2) {
              goto LABEL_85;
            }
          }
          else
          {
            if (v13 >= v9) {
              v13 %= v9;
            }
            if (v13 != v3) {
              break;
            }
          }
          uint64_t v12 = *(char **)v12;
        }
        while (v12);
      }
    }
  }
LABEL_25:
  uint64_t v12 = (char *)operator new(0x50uLL);
  *(void *)uint64_t v12 = 0;
  *((void *)v12 + 1) = a2;
  *((void *)v12 + 2) = a2;
  *(_OWORD *)(v12 + 24) = 0u;
  *(_OWORD *)(v12 + 40) = 0u;
  *(_OWORD *)(v12 + 56) = 0u;
  *((void *)v12 + 9) = 0;
  float v15 = (float)(unint64_t)(v8 + 1);
  float v16 = *(float *)(a1 + 7992);
  if (v9 && (float)(v16 * (float)v9) >= v15)
  {
    a2 = v3;
    goto LABEL_75;
  }
  BOOL v17 = 1;
  if (v9 >= 3) {
    BOOL v17 = (v9 & (v9 - 1)) != 0;
  }
  unint64_t v18 = v17 | (2 * v9);
  unint64_t v19 = vcvtps_u32_f32(v15 / v16);
  if (v18 <= v19) {
    size_t prime = v19;
  }
  else {
    size_t prime = v18;
  }
  if (prime == 1)
  {
    size_t prime = 2;
  }
  else if ((prime & (prime - 1)) != 0)
  {
    size_t prime = std::__next_prime(prime);
    unint64_t v9 = *(void *)(a1 + 7968);
  }
  if (prime > v9)
  {
LABEL_38:
    if (prime >> 61) {
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
    uint64_t v21 = operator new(8 * prime);
    uint64_t v22 = *(void **)(a1 + 7960);
    *(void *)(a1 + 7960) = v21;
    if (v22) {
      operator delete(v22);
    }
    uint64_t v23 = 0;
    *(void *)(a1 + 7968) = prime;
    do
      *(void *)(*(void *)(a1 + 7960) + 8 * v23++) = 0;
    while (prime != v23);
    uint64_t v24 = *(void **)(a1 + 7976);
    if (!v24) {
      goto LABEL_62;
    }
    uint64_t v25 = a1 + 7976;
    size_t v26 = v24[1];
    size_t v27 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      size_t v28 = v26 & v27;
      *(void *)(*(void *)(a1 + 7960) + 8 * v28) = v25;
      for (uint64_t i = (void *)*v24; *v24; uint64_t i = (void *)*v24)
      {
        size_t v30 = i[1] & v27;
        if (v30 == v28)
        {
          uint64_t v24 = i;
        }
        else
        {
          uint64_t v31 = *(void *)(a1 + 7960);
          if (*(void *)(v31 + 8 * v30))
          {
            *uint64_t v24 = *i;
            uint64_t v32 = 8 * v30;
            *uint64_t i = **(void **)(*(void *)(a1 + 7960) + v32);
            **(void **)(*(void *)(a1 + 7960) + v32) = i;
          }
          else
          {
            *(void *)(v31 + 8 * v30) = v24;
            uint64_t v24 = i;
            size_t v28 = v30;
          }
        }
      }
LABEL_62:
      unint64_t v9 = prime;
      goto LABEL_63;
    }
    if (v26 >= prime) {
      v26 %= prime;
    }
    *(void *)(*(void *)(a1 + 7960) + 8 * v26) = v25;
    uint64_t v36 = (void *)*v24;
    if (!*v24) {
      goto LABEL_62;
    }
    while (1)
    {
      size_t v38 = v36[1];
      if (v38 >= prime) {
        v38 %= prime;
      }
      if (v38 != v26)
      {
        uint64_t v39 = *(void *)(a1 + 7960);
        if (!*(void *)(v39 + 8 * v38))
        {
          *(void *)(v39 + 8 * v38) = v24;
          goto LABEL_67;
        }
        *uint64_t v24 = *v36;
        uint64_t v37 = 8 * v38;
        void *v36 = **(void **)(*(void *)(a1 + 7960) + v37);
        **(void **)(*(void *)(a1 + 7960) + v37) = v36;
        uint64_t v36 = v24;
      }
      size_t v38 = v26;
LABEL_67:
      uint64_t v24 = v36;
      uint64_t v36 = (void *)*v36;
      size_t v26 = v38;
      if (!v36) {
        goto LABEL_62;
      }
    }
  }
  if (prime >= v9) {
    goto LABEL_63;
  }
  unint64_t v33 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 7984) / *(float *)(a1 + 7992));
  if (v9 < 3 || (uint8x8_t v34 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v34.i16[0] = vaddlv_u8(v34), v34.u32[0] > 1uLL))
  {
    unint64_t v33 = std::__next_prime(v33);
  }
  else
  {
    uint64_t v35 = 1 << -(char)__clz(v33 - 1);
    if (v33 >= 2) {
      unint64_t v33 = v35;
    }
  }
  if (prime <= v33) {
    size_t prime = v33;
  }
  if (prime < v9)
  {
    if (!prime)
    {
      size_t v46 = *(void **)(a1 + 7960);
      *(void *)(a1 + 7960) = 0;
      if (v46) {
        operator delete(v46);
      }
      unint64_t v9 = 0;
      *(void *)(a1 + 7968) = 0;
      goto LABEL_63;
    }
    goto LABEL_38;
  }
  unint64_t v9 = *(void *)(a1 + 7968);
LABEL_63:
  if ((v9 & (v9 - 1)) != 0)
  {
    if (v9 <= a2) {
      a2 %= v9;
    }
  }
  else
  {
    a2 &= v9 - 1;
  }
LABEL_75:
  uint64_t v40 = *(void *)(a1 + 7960);
  uint64_t v41 = *(void **)(v40 + 8 * a2);
  if (v41)
  {
    *(void *)uint64_t v12 = *v41;
  }
  else
  {
    *(void *)uint64_t v12 = *(void *)(a1 + 7976);
    *(void *)(a1 + 7976) = v12;
    *(void *)(v40 + 8 * a2) = a1 + 7976;
    if (!*(void *)v12) {
      goto LABEL_84;
    }
    unint64_t v42 = *(void *)(*(void *)v12 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v42 >= v9) {
        v42 %= v9;
      }
    }
    else
    {
      v42 &= v9 - 1;
    }
    uint64_t v41 = (void *)(*(void *)(a1 + 7960) + 8 * v42);
  }
  *uint64_t v41 = v12;
LABEL_84:
  ++*(void *)(a1 + 7984);
LABEL_85:
  long long v43 = *a3;
  long long v44 = a3[1];
  long long v45 = a3[2];
  *((void *)v12 + 9) = *((void *)a3 + 6);
  *(_OWORD *)(v12 + 56) = v45;
  *(_OWORD *)(v12 + 40) = v44;
  *(_OWORD *)(v12 + 24) = v43;
LABEL_86:

  os_unfair_lock_unlock(v7);
}

void sub_242A17CB4(_Unwind_Exception *a1)
{
  operator delete(v2);
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

size_t ___ZN3AGX6DeviceINS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE24registerVariantEventInfoEmRKNS_25FunctionCompiledEventInfoE_block_invoke()
{
  return fwrite("AGX: exceeded compiled variants footprint limit\n", 0x30uLL, 1uLL, (FILE *)*MEMORY[0x263EF8348]);
}

void ___ZN3AGX6DeviceINS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE47createComputeProgressMarkerDriverShaderIfNeededEP18AGXG17FamilyDevice_block_invoke()
{
  uint64_t v0 = *MEMORY[0x263EF8340];
  operator new();
}

void sub_242A18260(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23)
{
  dispatch_release(*(dispatch_object_t *)(v23 - 144));
  if (__p) {
    operator delete(__p);
  }
  if (a22) {
    operator delete(a22);
  }
  _Unwind_Resume(a1);
}

void ___ZN3AGX6DeviceINS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE47createComputeProgressMarkerDriverShaderIfNeededEP18AGXG17FamilyDevice_block_invoke_2(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a3) {
    operator new();
  }
  uint64_t v5 = "MTLCompilerErrorTimeout";
  uint64_t v6 = "UnknownErrorCode";
  if (a3 == 2) {
    uint64_t v6 = "MTLCompilerErrorCompilationError";
  }
  if (a3 != 3) {
    uint64_t v5 = v6;
  }
  if (a3 == 1) {
    uint64_t v7 = "MTLCompilerErrorFatalError";
  }
  else {
    uint64_t v7 = v5;
  }
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  ProgramKey<(_AGCStreamToken)41,(AGX::DriverShaderCompilationMode)1>::serialize(a1 + 48, &v13, &v12);
  uint64_t v8 = a4;
  unint64_t v9 = v7;
  uint64_t v10 = v12;
  uint64_t v11 = v13;
  _ZZZZN3AGX6DeviceINS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE49createTGOptimizationDriverShaderAndBufferIfNeededEP18AGXG17FamilyDeviceEUb_EUb_ENKUlvE_clB14_AGX__Crashed_Ev();
}

void sub_242A18494(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  if (*(char *)(v5 - 49) < 0) {
    operator delete(*(void **)(v5 - 72));
  }
  AGX::ProgramBindingRemap<AGX::HAL200::Encoders,AGX::HAL200::Classes>::~ProgramBindingRemap((uint64_t)va);
  MEMORY[0x24566ED90](v4, 0x10F3C407204815DLL);
  _Unwind_Resume(a1);
}

uint64_t ___ZN3AGX8Compiler14compileProgramI10ProgramKeyIL15_AGCStreamToken41ELNS_27DriverShaderCompilationModeE1EEEEvRKT_P7NSArrayIPU27objcproto16MTLBinaryArchive11objc_objectEU13block_pointerFvRK20AGCDeserializedReply16MTLCompilerErrorP8NSStringEb_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a5) {
    AGX::Compiler::compileProgram<AGX::UserIntersectionProgramKey,AGCReplyArray>(AGX::UserIntersectionProgramKey const&,MTLCompileFunctionRequestData *,void({block_pointer})(AGCReplyArray const&,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,MTLCompilerError,NSString *,unsigned long long))::{lambda(void)#1}::operator()[abi:[AGX] Failed assertion __requestData.frameworkData && _requestData.pipelineOptions_]();
  }
  uint64_t v5 = *(uint64_t (**)(void))(*(void *)(a1 + 32) + 16);

  return v5();
}

void ___ZN3AGX8Compiler14compileProgramI10ProgramKeyIL15_AGCStreamToken41ELNS_27DriverShaderCompilationModeE1EE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSH_SH_SH_SH_16MTLCompilerErrorP8NSStringyE_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  v14[0] = MEMORY[0x263EF8330];
  v14[1] = 3221225472;
  float v15 = ___ZN3AGX8Compiler14compileProgramI10ProgramKeyIL15_AGCStreamToken41ELNS_27DriverShaderCompilationModeE1EE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSH_SH_SH_SH_16MTLCompilerErrorP8NSStringyE_block_invoke_2;
  float v16 = &unk_26516F7E8;
  uint64_t v17 = a9;
  uint64_t v18 = a3;
  uint64_t v19 = a4;
  uint64_t v20 = a5;
  uint64_t v21 = a6;
  uint64_t v22 = a7;
  uint64_t v12 = a1 + 32;
  uint64_t v10 = *(void **)(a1 + 32);
  uint64_t v11 = *(void *)(v12 + 8);
  uint64_t v23 = a8;
  uint64_t v24 = v11;
  uint64_t v25 = a2;
  uint64_t v26 = a10;
  if (objc_msgSend(v10, "sync", MEMORY[0x263EF8330], 3221225472))
  {
    v15(v14);
  }
  else
  {
    global_queue = dispatch_get_global_queue(0, 0);
    dispatch_async(global_queue, v14);
  }
}

uint64_t ___ZN3AGX8Compiler14compileProgramI10ProgramKeyIL15_AGCStreamToken41ELNS_27DriverShaderCompilationModeE1EE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSH_SH_SH_SH_16MTLCompilerErrorP8NSStringyE_block_invoke_3(uint64_t a1, void *a2)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), *a2);
}

uint64_t ___ZN3AGX8Compiler14compileProgramI10ProgramKeyIL15_AGCStreamToken41ELNS_27DriverShaderCompilationModeE1EE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSH_SH_SH_SH_16MTLCompilerErrorP8NSStringyE_block_invoke_4(uint64_t a1, void *a2)
{
  if (getTimebaseInfo(void)::once != -1) {
    dispatch_once(&getTimebaseInfo(void)::once, &__block_literal_global_7474);
  }
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), *a2);
}

void ___ZN3AGX8Compiler14compileProgramI10ProgramKeyIL15_AGCStreamToken41ELNS_27DriverShaderCompilationModeE1EE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSH_SH_SH_SH_16MTLCompilerErrorP8NSStringyE_block_invoke_2(void *a1)
{
  size_t size_ptr = 0;
  buffer_ptr = 0;
  uint64_t v2 = a1[12];
  AGCDeserializedReply::AGCDeserializedReply((AGCDeserializedReply *)v5);
  if (v2 || (uint64_t v4 = a1[5]) == 0)
  {
    unint64_t v3 = 0;
  }
  else
  {
    unint64_t v3 = dispatch_data_create_map(v4, (const void **)&buffer_ptr, &size_ptr);
    AGCDeserializedReply::deserialize((AGCDeserializedReply *)v5, buffer_ptr, size_ptr);
  }
  (*(void (**)(void, unsigned char *))(a1[11] + 16))(a1[11], v5);
  if (v3) {
    dispatch_release(v3);
  }
  AGCDeserializedReply::~AGCDeserializedReply((AGCDeserializedReply *)v5);
}

void sub_242A187A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  AGCDeserializedReply::~AGCDeserializedReply((AGCDeserializedReply *)va);
  _Unwind_Resume(a1);
}

void __destroy_helper_block_e8_48c77_ZTS10ProgramKeyIL15_AGCStreamToken41ELN3AGX27DriverShaderCompilationModeE1EE(void *a1)
{
  a1[6] = &unk_26F851940;
  uint64_t v1 = (void *)a1[8];
  if (v1)
  {
    a1[9] = v1;
    operator delete(v1);
  }
}

void *__copy_helper_block_e8_48c77_ZTS10ProgramKeyIL15_AGCStreamToken41ELN3AGX27DriverShaderCompilationModeE1EE(void *result, uint64_t a2)
{
  result[6] = &unk_26F851940;
  *((_DWORD *)result + 14) = *(_DWORD *)(a2 + 56);
  result[9] = 0;
  result[10] = 0;
  result[8] = 0;
  unint64_t v3 = *(unsigned char **)(a2 + 64);
  uint64_t v2 = *(unsigned char **)(a2 + 72);
  int64_t v4 = v2 - v3;
  if (v2 != v3)
  {
    if (v4 < 0) {
      abort();
    }
    uint64_t v5 = result;
    uint64_t v6 = (char *)operator new(v2 - v3);
    v5[8] = v6;
    v5[9] = v6;
    uint64_t v7 = &v6[4 * (v4 >> 2)];
    v5[10] = v7;
    __n128 result = memcpy(v6, v3, v4);
    v5[9] = v7;
  }
  return result;
}

void ProgramKey<(_AGCStreamToken)41,(AGX::DriverShaderCompilationMode)1>::serialize(uint64_t a1, void *a2, void *a3)
{
  uint64_t v6 = *(int **)(a1 + 16);
  *(void *)(a1 + 24) = v6;
  int v7 = *(unsigned __int8 *)(a1 + 8) | 0x100;
  uint64_t v8 = *(int **)(a1 + 32);
  if (v6 >= v8)
  {
    uint64_t v10 = (char *)v8 - (char *)v6;
    uint64_t v11 = v10 >> 1;
    if ((unint64_t)(v10 >> 1) <= 1) {
      uint64_t v11 = 1;
    }
    BOOL v12 = (unint64_t)v10 >= 0x7FFFFFFFFFFFFFFCLL;
    unint64_t v13 = 0x3FFFFFFFFFFFFFFFLL;
    if (!v12) {
      unint64_t v13 = v11;
    }
    if (v13 >> 62) {
      goto LABEL_34;
    }
    uint64_t v14 = v13;
    float v15 = operator new(4 * v13);
    uint64_t v8 = &v15[v14];
    _DWORD *v15 = v7;
    unint64_t v9 = (char *)(v15 + 1);
    *(void *)(a1 + 16) = v15;
    *(void *)(a1 + 24) = v15 + 1;
    *(void *)(a1 + 32) = &v15[v14];
    if (v6)
    {
      operator delete(v6);
      uint64_t v8 = *(int **)(a1 + 32);
    }
  }
  else
  {
    *uint64_t v6 = v7;
    unint64_t v9 = (char *)(v6 + 1);
  }
  *(void *)(a1 + 24) = v9;
  if (v9 < (char *)v8)
  {
    *(_DWORD *)unint64_t v9 = 96;
    float v16 = v9 + 4;
    goto LABEL_33;
  }
  uint64_t v17 = *(char **)(a1 + 16);
  uint64_t v18 = (v9 - v17) >> 2;
  unint64_t v19 = v18 + 1;
  if ((unint64_t)(v18 + 1) >> 62) {
    abort();
  }
  uint64_t v20 = (char *)v8 - v17;
  if (v20 >> 1 > v19) {
    unint64_t v19 = v20 >> 1;
  }
  if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFFCLL) {
    unint64_t v21 = 0x3FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v21 = v19;
  }
  if (v21)
  {
    if (!(v21 >> 62))
    {
      uint64_t v22 = operator new(4 * v21);
      goto LABEL_22;
    }
LABEL_34:
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  uint64_t v22 = 0;
LABEL_22:
  uint64_t v23 = &v22[4 * v18];
  uint64_t v24 = &v22[4 * v21];
  _DWORD *v23 = 96;
  float v16 = v23 + 1;
  if (v9 == v17) {
    goto LABEL_31;
  }
  unint64_t v25 = v9 - v17 - 4;
  if (v25 < 0x2C)
  {
    uint64_t v26 = v9;
    goto LABEL_30;
  }
  if ((unint64_t)(v17 - v22) < 0x20)
  {
    uint64_t v26 = v9;
    do
    {
LABEL_30:
      int v32 = *((_DWORD *)v26 - 1);
      v26 -= 4;
      *--uint64_t v23 = v32;
    }
    while (v26 != v17);
    goto LABEL_31;
  }
  uint64_t v27 = (v25 >> 2) + 1;
  uint64_t v26 = &v9[-4 * (v27 & 0x7FFFFFFFFFFFFFF8)];
  size_t v28 = &v22[4 * v18 - 16];
  uint64_t v29 = v9 - 16;
  uint64_t v30 = v27 & 0x7FFFFFFFFFFFFFF8;
  do
  {
    long long v31 = *(_OWORD *)v29;
    *(v28 - 1) = *((_OWORD *)v29 - 1);
    _OWORD *v28 = v31;
    v28 -= 2;
    v29 -= 32;
    v30 -= 8;
  }
  while (v30);
  v23 -= v27 & 0x7FFFFFFFFFFFFFF8;
  if (v27 != (v27 & 0x7FFFFFFFFFFFFFF8)) {
    goto LABEL_30;
  }
LABEL_31:
  *(void *)(a1 + 16) = v23;
  *(void *)(a1 + 24) = v16;
  *(void *)(a1 + 32) = v24;
  if (v17) {
    operator delete(v17);
  }
LABEL_33:
  *(void *)(a1 + 24) = v16;
  *a2 = *(void *)(a1 + 16);
  *a3 = *(void *)(a1 + 24) - *(void *)(a1 + 16);
}

uint64_t ProgramKey<(_AGCStreamToken)41,(AGX::DriverShaderCompilationMode)1>::getSupportIndirectCommandBuffers()
{
  return 0;
}

uint64_t ProgramKey<(_AGCStreamToken)41,(AGX::DriverShaderCompilationMode)1>::isPrecompiledToBinaryArchive()
{
  return 0;
}

uint64_t ProgramKey<(_AGCStreamToken)41,(AGX::DriverShaderCompilationMode)1>::isPrecompiledToPipelineCache()
{
  return 1;
}

uint64_t ProgramKey<(_AGCStreamToken)41,(AGX::DriverShaderCompilationMode)1>::legalizeStateForTargetOS()
{
  return 1;
}

AGXBuffer *AGX::DeviceInternalBufferAllocator::allocateBuffer(uint64_t a1, unsigned int a2)
{
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  uint64_t v2 = a2;
  v11[0] = 0;
  v11[1] = 0x100010001;
  int v12 = 16777473;
  long long v13 = 0u;
  long long v14 = 0u;
  int v15 = 0;
  uint64_t v18 = a2;
  long long v19 = xmmword_242EA7DA0;
  uint64_t v20 = 0;
  LODWORD(v10) = 104;
  unint64_t v3 = [(IOGPUMetalBuffer *)[AGXBuffer alloc] initWithDevice:a1 pointer:0 length:v2 options:0 sysMemSize:v2 vidMemSize:0 args:v11 argsSize:v10 deallocator:0];
  int64_t v4 = v3;
  if (v3)
  {
    uint64_t v5 = (Class *)((char *)&v3->super.super.super.super.super.super.isa + (int)*MEMORY[0x263F4B188]);
    uint64_t v6 = [(IOGPUMetalResource *)v3 gpuAddress];
    uint64_t v7 = [(IOGPUMetalResource *)v4 virtualAddress];
    uint64_t v8 = v5[2] & 0x1F00000000000000 | v2 | 0x2000000000000000;
    v5[1] = v6;
    v5[2] = v8;
    v5[3] = v7;
  }
  return v4;
}

void sub_242A18EF8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

AGXG17FamilyComputeProgram *___ZN3AGX23UserCommonShaderFactoryINS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE36addComputePipelineFunctionsToArchiveEP28MTLComputePipelineDescriptorP18AGXG17FamilyDevicemP25AGXG17FamilyBinaryArchivePP7NSError_block_invoke(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) vendorPrivate];
  unint64_t v3 = (AGXG17FamilyComputeOrFragmentOrTileProgram *)v2;
  if (!v2)
  {
    unint64_t v3 = objc_alloc_init(AGXG17FamilyComputeOrFragmentOrTileProgram);
    [*(id *)(a1 + 32) setVendorPrivate:v3];

    __n128 result = v3->_compute;
    if (result) {
      goto LABEL_3;
    }
LABEL_5:
    __n128 result = objc_alloc_init(AGXG17FamilyComputeProgram);
    v3->_compute = result;
    goto LABEL_3;
  }
  __n128 result = *(AGXG17FamilyComputeProgram **)(v2 + 8);
  if (!result) {
    goto LABEL_5;
  }
LABEL_3:
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = &result->_impl;
  return result;
}

void *___ZN3AGX23UserCommonShaderFactoryINS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE36addComputePipelineFunctionsToArchiveEP28MTLComputePipelineDescriptorP18AGXG17FamilyDevicemP25AGXG17FamilyBinaryArchivePP7NSError_block_invoke_2(void *result, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6)
{
  if (!a2)
  {
    uint64_t v16 = v9;
    uint64_t v17 = v7;
    uint64_t v18 = v6;
    int v12 = result;
    long long v13 = (void *)result[6];
    if (a5 > 3) {
      uint64_t v14 = 5;
    }
    else {
      uint64_t v14 = qword_242EAA188[a5];
    }
    uint64_t v15 = objc_msgSend(NSDictionary, "dictionaryWithObject:forKey:", a6, *MEMORY[0x263F08320], v16, v8, v17, v18, v10, v11);
    __n128 result = (id)[objc_alloc(MEMORY[0x263F087E8]) initWithDomain:@"AGXMetalG17P" code:v14 userInfo:v15];
    if (v13) {
      void *v13 = result;
    }
    *(unsigned char *)(*(void *)(v12[4] + 8) + 24) = 0;
  }
  return result;
}

void sub_242A194AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
}

uint64_t ___ZN3AGX23UserCommonShaderFactoryINS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE35addRenderPipelineFunctionsToArchiveI31MTLMeshRenderPipelineDescriptorEEbPT_P18AGXG17FamilyDevicemP25AGXG17FamilyBinaryArchivePP7NSError_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = *(void *)(a1 + 40);
  if (result)
  {
    uint64_t v7 = AGX::UserCommonShaderFactory<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::RenderPipelineDescriptorInfo::~RenderPipelineDescriptorInfo(result);
    uint64_t result = MEMORY[0x24566ED90](v7, 0xA0C402B819244);
  }
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = a4 == 0;
  return result;
}

void ___ZN3AGX23UserCommonShaderFactoryINS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE34createGeometryStageAndLinkPipelineI31MTLMeshRenderPipelineDescriptorLb1EEEvPKNS5_28RenderPipelineDescriptorInfoEPNS1_22FragmentProgramVariantE13ReflectionKeyP18AGXG17FamilyDevicePT_mbbyP19NSMutableDictionaryP25AGXG17FamilyBinaryArchivePU27objcproto16OS_dispatch_data8NSObjectU13block_pointerFvPU33objcproto22MTLRenderPipelineState11objc_objectP27MTLRenderPipelineReflectionP7NSErrorE_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7)
{
  if (a2)
  {
    uint64_t v8 = *(void **)(a1 + 32);
    uint64_t v7 = *(os_unfair_lock_s **)(a1 + 40);
    uint64_t v10 = *(void ****)(a1 + 64);
    unint64_t v9 = *(void *)(a1 + 72);
    uint64_t v11 = *(void **)(a1 + 80);
    int v12 = (os_unfair_lock_s *)v11[15];
    long long v13 = (void *)v11[3];
    uint64_t v14 = v11[11];
    __int16 v15 = *(_WORD *)(a2 + 3514);
    unsigned __int8 v16 = *(unsigned char *)(a1 + 88);
    v23[0] = MEMORY[0x263EF8330];
    v23[1] = 3221225472;
    v23[2] = ___ZN3AGX23UserCommonShaderFactoryINS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE34createGeometryStageAndLinkPipelineI31MTLMeshRenderPipelineDescriptorLb1EEEvPKNS5_28RenderPipelineDescriptorInfoEPNS1_22FragmentProgramVariantE13ReflectionKeyP18AGXG17FamilyDevicePT_mbbyP19NSMutableDictionaryP25AGXG17FamilyBinaryArchivePU27objcproto16OS_dispatch_data8NSObjectU13block_pointerFvPU33objcproto22MTLRenderPipelineState11objc_objectP27MTLRenderPipelineReflectionP7NSErrorE_block_invoke_2;
    v23[3] = &unk_26516EE50;
    uint64_t v17 = *(void *)(a1 + 48);
    v23[4] = *(void *)(a1 + 56);
    void v23[5] = v10;
    AGX::UserCommonShaderFactory<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::createUserOrPassthroughObjectProgramVariant<MTLMeshRenderPipelineDescriptor>(v10, v8, v7, v9, v17, a7, v12, v13, v14, v15, HIBYTE(v15), v16, (uint64_t)v23);
  }
  else
  {
    uint64_t v18 = *(void *)(a1 + 56);
    if (a5 > 3) {
      uint64_t v19 = 5;
    }
    else {
      uint64_t v19 = qword_242EAA188[a5];
    }
    uint64_t v20 = [NSDictionary dictionaryWithObject:a6 forKey:*MEMORY[0x263F08320]];
    id v21 = (id)[objc_alloc(MEMORY[0x263F087E8]) initWithDomain:@"AGXMetalG17P" code:v19 userInfo:v20];
    if (v18)
    {
      uint64_t v22 = *(void (**)(uint64_t, void, void, id))(v18 + 16);
      v22(v18, 0, 0, v21);
    }
  }
}

void ___ZN3AGX23UserCommonShaderFactoryINS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE35addRenderPipelineFunctionsToArchiveI31MTLMeshRenderPipelineDescriptorEEbPT_P18AGXG17FamilyDevicemP25AGXG17FamilyBinaryArchivePP7NSError_block_invoke_2(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void **)(a1 + 32);
  int64_t v4 = *(void **)(a1 + 40);
  uint64_t v6 = *(void ****)(a1 + 64);
  uint64_t v5 = *(void *)(a1 + 72);
  uint64_t v7 = *(void **)(a1 + 80);
  uint64_t v8 = (void *)v7[12];
  unint64_t v9 = (os_unfair_lock_s *)v7[4];
  uint64_t v10 = v7[8];
  v12[0] = MEMORY[0x263EF8330];
  v12[1] = 3221225472;
  v12[2] = ___ZN3AGX23UserCommonShaderFactoryINS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE35addRenderPipelineFunctionsToArchiveI31MTLMeshRenderPipelineDescriptorEEbPT_P18AGXG17FamilyDevicemP25AGXG17FamilyBinaryArchivePP7NSError_block_invoke_3;
  v12[3] = &unk_26516EE00;
  uint64_t v14 = v6;
  __int16 v15 = v7;
  v12[4] = v4;
  v12[5] = v3;
  long long v13 = *(_OWORD *)(a1 + 48);
  uint64_t v11 = *(void *)(a1 + 88);
  uint64_t v16 = v5;
  uint64_t v17 = v11;
  AGX::UserCommonShaderFactory<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::createFragmentProgramVariant<MTLMeshRenderPipelineDescriptor>(v6, v3, v4, v5, v13, v8, v9, a2, v10, 0, (uint64_t)v12);
}

void ___ZN3AGX23UserCommonShaderFactoryINS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE35addRenderPipelineFunctionsToArchiveI31MTLMeshRenderPipelineDescriptorEEbPT_P18AGXG17FamilyDevicemP25AGXG17FamilyBinaryArchivePP7NSError_block_invoke_3(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7)
{
  if (a2)
  {
    uint64_t v7 = *(void **)(a1 + 72);
    if (v7[2])
    {
      uint64_t v8 = *(void ****)(a1 + 64);
      unint64_t v9 = *(void **)(a1 + 32);
      uint64_t v10 = *(void **)(a1 + 40);
      uint64_t v11 = *(void *)(a1 + 80);
      long long v12 = *(_OWORD *)(a1 + 48);
      long long v13 = (void *)v7[14];
      uint64_t v14 = (os_unfair_lock_s *)v7[6];
      __int16 v15 = v7[10];
      v22[0] = MEMORY[0x263EF8330];
      v22[1] = 3221225472;
      v22[2] = ___ZN3AGX23UserCommonShaderFactoryINS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE34createGeometryStageAndLinkPipelineI31MTLMeshRenderPipelineDescriptorLb1EEEvPKNS5_28RenderPipelineDescriptorInfoEPNS1_22FragmentProgramVariantE13ReflectionKeyP18AGXG17FamilyDevicePT_mbbyP19NSMutableDictionaryP25AGXG17FamilyBinaryArchivePU27objcproto16OS_dispatch_data8NSObjectU13block_pointerFvPU33objcproto22MTLRenderPipelineState11objc_objectP27MTLRenderPipelineReflectionP7NSErrorE_block_invoke;
      v22[3] = &unk_26516EE78;
      v22[4] = v10;
      v22[5] = v9;
      uint64_t v24 = v8;
      uint64_t v25 = v11;
      uint64_t v26 = v7;
      long long v23 = v12;
      char v27 = 0;
      AGX::UserCommonShaderFactory<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::createMeshProgramVariant<MTLMeshRenderPipelineDescriptor>(v8, v10, v9, v11, v12, a7, v13, v14, a2, v15, 0, (uint64_t)v22);
    }
  }
  else
  {
    uint64_t v16 = *(void *)(a1 + 56);
    if (a5 > 3) {
      uint64_t v17 = 5;
    }
    else {
      uint64_t v17 = qword_242EAA188[a5];
    }
    uint64_t v18 = *(void **)(a1 + 88);
    uint64_t v19 = [NSDictionary dictionaryWithObject:a6 forKey:*MEMORY[0x263F08320]];
    id v20 = (id)[objc_alloc(MEMORY[0x263F087E8]) initWithDomain:@"AGXMetalG17P" code:v17 userInfo:v19];
    if (v16)
    {
      id v21 = *(void (**)(uint64_t, void, void, id))(v16 + 16);
      v21(v16, 0, 0, v20);
    }
    else if (v18)
    {
      *uint64_t v18 = v20;
    }
  }
}

void *___ZN3AGX23UserCommonShaderFactoryINS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE34createGeometryStageAndLinkPipelineI31MTLMeshRenderPipelineDescriptorLb1EEEvPKNS5_28RenderPipelineDescriptorInfoEPNS1_22FragmentProgramVariantE13ReflectionKeyP18AGXG17FamilyDevicePT_mbbyP19NSMutableDictionaryP25AGXG17FamilyBinaryArchivePU27objcproto16OS_dispatch_data8NSObjectU13block_pointerFvPU33objcproto22MTLRenderPipelineState11objc_objectP27MTLRenderPipelineReflectionP7NSErrorE_block_invoke_2(void *result, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v5 = result[4];
  if (!a4)
  {
    if (!v5) {
      return result;
    }
    uint64_t v7 = 0;
    goto LABEL_9;
  }
  if (a4 > 3) {
    uint64_t v6 = 5;
  }
  else {
    uint64_t v6 = qword_242EAA188[a4];
  }
  uint64_t v8 = [NSDictionary dictionaryWithObject:a5 forKey:*MEMORY[0x263F08320]];
  uint64_t result = (id)[objc_alloc(MEMORY[0x263F087E8]) initWithDomain:@"AGXMetalG17P" code:v6 userInfo:v8];
  if (v5)
  {
    uint64_t v7 = result;
LABEL_9:
    unint64_t v9 = *(uint64_t (**)(uint64_t, void, void, void *))(v5 + 16);
    return (void *)v9(v5, 0, 0, v7);
  }
  return result;
}

void sub_242A19CC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);

  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v12 - 128), 8);
  _Unwind_Resume(a1);
}

AGXG17FamilyTileProgram *___ZN3AGX21UserTileShaderFactoryINS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE39addTileRenderPipelineFunctionsToArchiveEP31MTLTileRenderPipelineDescriptorP18AGXG17FamilyDevicemP25AGXG17FamilyBinaryArchivePP7NSError_block_invoke(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) vendorPrivate];
  unint64_t v3 = (AGXG17FamilyComputeOrFragmentOrTileProgram *)v2;
  if (!v2)
  {
    unint64_t v3 = objc_alloc_init(AGXG17FamilyComputeOrFragmentOrTileProgram);
    [*(id *)(a1 + 32) setVendorPrivate:v3];

    uint64_t result = (AGXG17FamilyTileProgram *)v3->_tile;
    if (result) {
      goto LABEL_3;
    }
LABEL_5:
    uint64_t result = objc_alloc_init(AGXG17FamilyTileProgram);
    v3->_tile = result;
    goto LABEL_3;
  }
  uint64_t result = *(AGXG17FamilyTileProgram **)(v2 + 24);
  if (!result) {
    goto LABEL_5;
  }
LABEL_3:
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = &result->_impl;
  return result;
}

void *___ZN3AGX21UserTileShaderFactoryINS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE39addTileRenderPipelineFunctionsToArchiveEP31MTLTileRenderPipelineDescriptorP18AGXG17FamilyDevicemP25AGXG17FamilyBinaryArchivePP7NSError_block_invoke_2(void *result, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6)
{
  if (!a2)
  {
    uint64_t v16 = v9;
    uint64_t v17 = v7;
    uint64_t v18 = v6;
    uint64_t v12 = result;
    long long v13 = (void *)result[6];
    if (a5 > 3) {
      uint64_t v14 = 5;
    }
    else {
      uint64_t v14 = qword_242EAA188[a5];
    }
    uint64_t v15 = objc_msgSend(NSDictionary, "dictionaryWithObject:forKey:", a6, *MEMORY[0x263F08320], v16, v8, v17, v18, v10, v11);
    uint64_t result = (id)[objc_alloc(MEMORY[0x263F087E8]) initWithDomain:@"AGXMetalG17P" code:v14 userInfo:v15];
    if (v13) {
      void *v13 = result;
    }
    *(unsigned char *)(*(void *)(v12[4] + 8) + 24) = 0;
  }
  return result;
}

void sub_242A1A240(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
}

uint64_t ___ZN3AGX23UserCommonShaderFactoryINS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE35addRenderPipelineFunctionsToArchiveI27MTLRenderPipelineDescriptorEEbPT_P18AGXG17FamilyDevicemP25AGXG17FamilyBinaryArchivePP7NSError_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = *(void *)(a1 + 40);
  if (result)
  {
    uint64_t v7 = AGX::UserCommonShaderFactory<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::RenderPipelineDescriptorInfo::~RenderPipelineDescriptorInfo(result);
    uint64_t result = MEMORY[0x24566ED90](v7, 0xA0C402B819244);
  }
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = a4 == 0;
  return result;
}

void AGX::UserCommonShaderFactory<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::createGeometryStageAndLinkPipeline<MTLRenderPipelineDescriptor,true>(void ***a1, void *a2, uint64_t a3, void *a4, MTLRenderPipelineDescriptor *a5, unint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (a2[2])
  {
    uint64_t v11 = (void *)a2[14];
    uint64_t v12 = (os_unfair_lock_s *)a2[6];
    long long v13 = a2[10];
    v18[0] = MEMORY[0x263EF8330];
    v18[1] = 3221225472;
    v18[2] = ___ZN3AGX23UserCommonShaderFactoryINS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE34createGeometryStageAndLinkPipelineI27MTLRenderPipelineDescriptorLb1EEEvPKNS5_28RenderPipelineDescriptorInfoEPNS1_22FragmentProgramVariantE13ReflectionKeyP18AGXG17FamilyDevicePT_mbbyP19NSMutableDictionaryP25AGXG17FamilyBinaryArchivePU27objcproto16OS_dispatch_data8NSObjectU13block_pointerFvPU33objcproto22MTLRenderPipelineState11objc_objectP27MTLRenderPipelineReflectionP7NSErrorE_block_invoke;
    v18[3] = &unk_26516EE78;
    v18[4] = a5;
    v18[5] = a4;
    v18[8] = a1;
    v18[9] = a6;
    v18[10] = a2;
    char v19 = 0;
    v18[6] = a7;
    v18[7] = a9;
    AGX::UserCommonShaderFactory<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::createMeshProgramVariant<MTLRenderPipelineDescriptor>(a1, a5, a4, a6, a7, a8, v11, v12, a3, v13, 0, (uint64_t)v18);
  }
  else
  {
    uint64_t v14 = (void *)a2[13];
    uint64_t v15 = a2[5];
    uint64_t v16 = a2[9];
    v17[0] = MEMORY[0x263EF8330];
    v17[1] = 3221225472;
    _OWORD v17[2] = ___ZN3AGX23UserCommonShaderFactoryINS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE34createGeometryStageAndLinkPipelineI27MTLRenderPipelineDescriptorLb1EEEvPKNS5_28RenderPipelineDescriptorInfoEPNS1_22FragmentProgramVariantE13ReflectionKeyP18AGXG17FamilyDevicePT_mbbyP19NSMutableDictionaryP25AGXG17FamilyBinaryArchivePU27objcproto16OS_dispatch_data8NSObjectU13block_pointerFvPU33objcproto22MTLRenderPipelineState11objc_objectP27MTLRenderPipelineReflectionP7NSErrorE_block_invoke_3;
    v17[3] = &unk_26516EEA0;
    v17[4] = a9;
    v17[5] = a1;
    AGX::UserCommonShaderFactory<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::createVertexProgramVariant(a1, a5, a4, a6, a7, v14, v15, a3, v16, a8, 0, (uint64_t)v17);
  }
}

void ___ZN3AGX23UserCommonShaderFactoryINS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE35addRenderPipelineFunctionsToArchiveI27MTLRenderPipelineDescriptorEEbPT_P18AGXG17FamilyDevicemP25AGXG17FamilyBinaryArchivePP7NSError_block_invoke_2(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void **)(a1 + 32);
  int64_t v4 = *(void **)(a1 + 40);
  uint64_t v6 = *(void ****)(a1 + 64);
  uint64_t v5 = *(void *)(a1 + 72);
  uint64_t v7 = *(void **)(a1 + 80);
  uint64_t v8 = (void *)v7[12];
  uint64_t v9 = (os_unfair_lock_s *)v7[4];
  uint64_t v10 = v7[8];
  v12[0] = MEMORY[0x263EF8330];
  v12[1] = 3221225472;
  v12[2] = ___ZN3AGX23UserCommonShaderFactoryINS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE35addRenderPipelineFunctionsToArchiveI27MTLRenderPipelineDescriptorEEbPT_P18AGXG17FamilyDevicemP25AGXG17FamilyBinaryArchivePP7NSError_block_invoke_3;
  v12[3] = &unk_26516EE00;
  uint64_t v14 = v6;
  uint64_t v15 = v7;
  v12[4] = v4;
  v12[5] = v3;
  long long v13 = *(_OWORD *)(a1 + 48);
  uint64_t v11 = *(void *)(a1 + 88);
  uint64_t v16 = v5;
  uint64_t v17 = v11;
  AGX::UserCommonShaderFactory<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::createFragmentProgramVariant<MTLRenderPipelineDescriptor>(v6, v3, v4, v5, v13, v8, v9, a2, v10, 0, (uint64_t)v12);
}

void ___ZN3AGX23UserCommonShaderFactoryINS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE35addRenderPipelineFunctionsToArchiveI27MTLRenderPipelineDescriptorEEbPT_P18AGXG17FamilyDevicemP25AGXG17FamilyBinaryArchivePP7NSError_block_invoke_3(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7)
{
  if (a2)
  {
    AGX::UserCommonShaderFactory<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::createGeometryStageAndLinkPipeline<MTLRenderPipelineDescriptor,true>(*(void ****)(a1 + 64), *(void **)(a1 + 72), a2, *(void **)(a1 + 32), *(MTLRenderPipelineDescriptor **)(a1 + 40), *(void *)(a1 + 80), *(void *)(a1 + 48), a7, *(void *)(a1 + 56));
  }
  else
  {
    uint64_t v7 = *(void *)(a1 + 56);
    if (a5 > 3) {
      uint64_t v8 = 5;
    }
    else {
      uint64_t v8 = qword_242EAA188[a5];
    }
    uint64_t v9 = *(void **)(a1 + 88);
    uint64_t v10 = [NSDictionary dictionaryWithObject:a6 forKey:*MEMORY[0x263F08320]];
    id v11 = (id)[objc_alloc(MEMORY[0x263F087E8]) initWithDomain:@"AGXMetalG17P" code:v8 userInfo:v10];
    if (v7)
    {
      uint64_t v12 = *(void (**)(uint64_t, void, void, id))(v7 + 16);
      v12(v7, 0, 0, v11);
    }
    else if (v9)
    {
      void *v9 = v11;
    }
  }
}

void ___ZN3AGX23UserCommonShaderFactoryINS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE34createGeometryStageAndLinkPipelineI27MTLRenderPipelineDescriptorLb1EEEvPKNS5_28RenderPipelineDescriptorInfoEPNS1_22FragmentProgramVariantE13ReflectionKeyP18AGXG17FamilyDevicePT_mbbyP19NSMutableDictionaryP25AGXG17FamilyBinaryArchivePU27objcproto16OS_dispatch_data8NSObjectU13block_pointerFvPU33objcproto22MTLRenderPipelineState11objc_objectP27MTLRenderPipelineReflectionP7NSErrorE_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7)
{
  if (a2)
  {
    uint64_t v8 = *(void **)(a1 + 32);
    uint64_t v7 = *(void **)(a1 + 40);
    uint64_t v10 = *(void ****)(a1 + 64);
    unint64_t v9 = *(void *)(a1 + 72);
    id v11 = *(void **)(a1 + 80);
    uint64_t v12 = (os_unfair_lock_s *)v11[15];
    long long v13 = (void *)v11[3];
    uint64_t v14 = v11[11];
    __int16 v15 = *(_WORD *)(a2 + 3514);
    unsigned __int8 v16 = *(unsigned char *)(a1 + 88);
    v23[0] = MEMORY[0x263EF8330];
    v23[1] = 3221225472;
    v23[2] = ___ZN3AGX23UserCommonShaderFactoryINS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE34createGeometryStageAndLinkPipelineI27MTLRenderPipelineDescriptorLb1EEEvPKNS5_28RenderPipelineDescriptorInfoEPNS1_22FragmentProgramVariantE13ReflectionKeyP18AGXG17FamilyDevicePT_mbbyP19NSMutableDictionaryP25AGXG17FamilyBinaryArchivePU27objcproto16OS_dispatch_data8NSObjectU13block_pointerFvPU33objcproto22MTLRenderPipelineState11objc_objectP27MTLRenderPipelineReflectionP7NSErrorE_block_invoke_2;
    v23[3] = &unk_26516EE50;
    uint64_t v17 = *(void *)(a1 + 48);
    v23[4] = *(void *)(a1 + 56);
    void v23[5] = v10;
    AGX::UserCommonShaderFactory<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::createUserOrPassthroughObjectProgramVariant<MTLRenderPipelineDescriptor>(v10, v8, v7, v9, v17, a7, v12, v13, v14, v15, HIBYTE(v15), v16, (uint64_t)v23);
  }
  else
  {
    uint64_t v18 = *(void *)(a1 + 56);
    if (a5 > 3) {
      uint64_t v19 = 5;
    }
    else {
      uint64_t v19 = qword_242EAA188[a5];
    }
    uint64_t v20 = [NSDictionary dictionaryWithObject:a6 forKey:*MEMORY[0x263F08320]];
    id v21 = (id)[objc_alloc(MEMORY[0x263F087E8]) initWithDomain:@"AGXMetalG17P" code:v19 userInfo:v20];
    if (v18)
    {
      uint64_t v22 = *(void (**)(uint64_t, void, void, id))(v18 + 16);
      v22(v18, 0, 0, v21);
    }
  }
}

void *___ZN3AGX23UserCommonShaderFactoryINS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE34createGeometryStageAndLinkPipelineI27MTLRenderPipelineDescriptorLb1EEEvPKNS5_28RenderPipelineDescriptorInfoEPNS1_22FragmentProgramVariantE13ReflectionKeyP18AGXG17FamilyDevicePT_mbbyP19NSMutableDictionaryP25AGXG17FamilyBinaryArchivePU27objcproto16OS_dispatch_data8NSObjectU13block_pointerFvPU33objcproto22MTLRenderPipelineState11objc_objectP27MTLRenderPipelineReflectionP7NSErrorE_block_invoke_3(void *result, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6)
{
  uint64_t v6 = result[4];
  if (a2)
  {
    if (!v6) {
      return result;
    }
    uint64_t v7 = 0;
    goto LABEL_9;
  }
  if (a5 > 3) {
    uint64_t v8 = 5;
  }
  else {
    uint64_t v8 = qword_242EAA188[a5];
  }
  uint64_t v9 = [NSDictionary dictionaryWithObject:a6 forKey:*MEMORY[0x263F08320]];
  uint64_t result = (id)[objc_alloc(MEMORY[0x263F087E8]) initWithDomain:@"AGXMetalG17P" code:v8 userInfo:v9];
  if (v6)
  {
    uint64_t v7 = result;
LABEL_9:
    uint64_t v10 = *(uint64_t (**)(uint64_t, void, void, void *))(v6 + 16);
    return (void *)v10(v6, 0, 0, v7);
  }
  return result;
}

void *___ZN3AGX23UserCommonShaderFactoryINS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE34createGeometryStageAndLinkPipelineI27MTLRenderPipelineDescriptorLb1EEEvPKNS5_28RenderPipelineDescriptorInfoEPNS1_22FragmentProgramVariantE13ReflectionKeyP18AGXG17FamilyDevicePT_mbbyP19NSMutableDictionaryP25AGXG17FamilyBinaryArchivePU27objcproto16OS_dispatch_data8NSObjectU13block_pointerFvPU33objcproto22MTLRenderPipelineState11objc_objectP27MTLRenderPipelineReflectionP7NSErrorE_block_invoke_2(void *result, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v5 = result[4];
  if (!a4)
  {
    if (!v5) {
      return result;
    }
    uint64_t v7 = 0;
    goto LABEL_9;
  }
  if (a4 > 3) {
    uint64_t v6 = 5;
  }
  else {
    uint64_t v6 = qword_242EAA188[a4];
  }
  uint64_t v8 = [NSDictionary dictionaryWithObject:a5 forKey:*MEMORY[0x263F08320]];
  uint64_t result = (id)[objc_alloc(MEMORY[0x263F087E8]) initWithDomain:@"AGXMetalG17P" code:v6 userInfo:v8];
  if (v5)
  {
    uint64_t v7 = result;
LABEL_9:
    uint64_t v9 = *(uint64_t (**)(uint64_t, void, void, void *))(v5 + 16);
    return (void *)v9(v5, 0, 0, v7);
  }
  return result;
}

void AGX::BlitContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::copyBufferToBuffer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  uint64_t v8 = a2;
  uint64_t v9 = (void *)a1;
  uint64_t v10 = (int)*MEMORY[0x263F4B188];
  unint64_t v11 = *(void *)(a2 + v10 + 72) + a3;
  uint64_t v12 = (char *)(*(void *)(a4 + v10 + 72) + a5);
  BOOL v13 = (unint64_t)v12 >= v11 + a6 || v11 >= (unint64_t)&v12[a6];
  if (v13)
  {
    AGX::BlitDispatchContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::blitCDMBuffer(a1, a2, v11, a4, v12, a6, 0, 1uLL);
  }
  else
  {
    int64_t v14 = v11 - (void)v12;
    if ((char *)v11 != v12)
    {
      unint64_t v118 = v11;
      if (v14 >= 0) {
        unint64_t v15 = v11 - (void)v12;
      }
      else {
        unint64_t v15 = (unint64_t)&v12[-v11];
      }
      if ((v15 & 0x7FFFFFFFFFFFFFF0) <= 0x8000) {
        unint64_t v16 = 0x8000;
      }
      else {
        unint64_t v16 = v15 & 0x7FFFFFFFFFFFFFF0;
      }
      unint64_t v112 = v15;
      unint64_t v121 = v12;
      if (v16 <= v15)
      {
        unsigned int v21 = 1 << __clz(__rbit64(v14));
        if (v21 >= 0x10) {
          uint64_t v22 = 16;
        }
        else {
          uint64_t v22 = v21;
        }
        uint64_t v20 = v22 - 1;
        unint64_t v18 = v11;
        unint64_t v19 = ~((v22 - 1 + v11) & (v22 - 1)) + v22;
        uint64_t BlitBounceBuffer = *(void *)(a1 + 6728);
      }
      else
      {
        uint64_t BlitBounceBuffer = *(void *)(a1 + 6728);
        unint64_t v18 = v11;
        if (!BlitBounceBuffer)
        {
          uint64_t BlitBounceBuffer = AGX::BlitDispatchContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::getBlitBounceBuffer(v9);
          uint64_t v12 = v121;
          v9[841] = BlitBounceBuffer;
        }
        unint64_t v19 = -(int)v118 & 0xFLL;
        uint64_t v20 = 15;
      }
      if (v19 >= a6) {
        unint64_t v23 = a6;
      }
      else {
        unint64_t v23 = v19;
      }
      unint64_t v24 = (a6 - v23) & v20;
      unint64_t v111 = a6;
      unint64_t v25 = a6 - (v23 + v24);
      unint64_t v26 = v16 - 1;
      uint64_t v119 = a4;
      uint64_t v120 = v8;
      uint64_t v122 = (uint64_t)v9;
      unint64_t v113 = v16 - 1;
      if (v18 >= (unint64_t)v12)
      {
        unint64_t v115 = v23 + v24;
        unint64_t v38 = v24 + v26;
        if (v38 >= v16)
        {
          unint64_t v39 = v38 / v16;
          BOOL v13 = v38 / v16 != 0;
          uint64_t v40 = v38 / v16 - 1;
          if (v40 != 0 && v13) {
            uint64_t v41 = v39;
          }
          else {
            uint64_t v41 = 1;
          }
          if (v16 <= v112)
          {
            unint64_t v66 = v16 * v40;
            unint64_t v67 = v111 + v66 - v24;
            unint64_t v68 = v24 - v66;
            do
            {
              if (v68 >= v16) {
                unint64_t v69 = v16;
              }
              else {
                unint64_t v69 = v68;
              }
              AGX::BlitDispatchContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::blitCDMBuffer((uint64_t)v9, v8, v18 + v67, a4, &v121[v67], v69, 0, 1uLL);
              v67 -= v16;
              v68 += v16;
              --v41;
            }
            while (v41);
          }
          else
          {
            uint64_t v42 = BlitBounceBuffer;
            uint64_t v117 = BlitBounceBuffer + 72;
            unint64_t v43 = v16 * v40;
            unint64_t v44 = v111 + v43 - v24;
            unint64_t v45 = v24 - v43;
            do
            {
              if (v45 >= v16) {
                unint64_t v46 = v16;
              }
              else {
                unint64_t v46 = v45;
              }
              unint64_t v47 = v18 + v44;
              unint64_t v48 = *(void *)(v117 + (int)*MEMORY[0x263F4B188]);
              AGX::BlitDispatchContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::blitCDMBuffer(v122, v42, v48, v119, &v121[v44], v46, 0, 1uLL);
              unint64_t v49 = v47;
              uint64_t v8 = v120;
              uint64_t v50 = (char *)v48;
              unint64_t v18 = v118;
              unint64_t v51 = v46;
              uint64_t v9 = (void *)v122;
              AGX::BlitDispatchContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::blitCDMBuffer(v122, v120, v49, v42, v50, v51, 0, 1uLL);
              v44 -= v16;
              v45 += v16;
              --v41;
            }
            while (v41);
          }
        }
        unint64_t v70 = v25 + v113;
        if (v25 + v113 >= v16)
        {
          uint64_t v71 = v70 / v16;
          BOOL v13 = v70 / v16 != 0;
          uint64_t v72 = v70 / v16 - 1;
          if (v72 == 0 || !v13) {
            uint64_t v71 = 1;
          }
          if (v16 <= v112)
          {
            uint64_t v90 = -v71;
            unint64_t v91 = v16 * v72;
            unint64_t v92 = v23 + v91;
            unint64_t v93 = v111 - v91 - v115;
            do
            {
              if (v93 >= v16) {
                unint64_t v94 = v16;
              }
              else {
                unint64_t v94 = v93;
              }
              AGX::BlitDispatchContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::blitCDMBuffer((uint64_t)v9, v8, v118 + v92, v119, &v121[v92], v94, 0, 1uLL);
              v92 -= v16;
              v93 += v16;
              BOOL v13 = __CFADD__(v90++, 1);
            }
            while (!v13);
          }
          else
          {
            uint64_t v73 = v9[841];
            uint64_t v74 = -v71;
            unint64_t v75 = v16 * v72;
            unint64_t v76 = v23 + v75;
            unint64_t v77 = v111 - v75 - v115;
            do
            {
              if (v77 >= v16) {
                unint64_t v78 = v16;
              }
              else {
                unint64_t v78 = v77;
              }
              unint64_t v79 = *(void *)(v73 + 72 + (int)*MEMORY[0x263F4B188]);
              AGX::BlitDispatchContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::blitCDMBuffer(v122, v73, v79, v119, &v121[v76], v78, 0, 1uLL);
              uint64_t v9 = (void *)v122;
              uint64_t v80 = (char *)v79;
              uint64_t v8 = v120;
              AGX::BlitDispatchContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::blitCDMBuffer(v122, v120, v118 + v76, v73, v80, v78, 0, 1uLL);
              v76 -= v16;
              v77 += v16;
              BOOL v13 = __CFADD__(v74++, 1);
            }
            while (!v13);
          }
        }
        unint64_t v95 = v23 + v113;
        if (v23 + v113 >= v16)
        {
          unint64_t v96 = v95 / v16;
          BOOL v13 = v95 / v16 != 0;
          uint64_t v97 = v95 / v16 - 1;
          if (v97 != 0 && v13) {
            uint64_t v98 = v96;
          }
          else {
            uint64_t v98 = 1;
          }
          if (v16 <= v112)
          {
            unint64_t v107 = v16 * v97;
            unint64_t v108 = v23 - v16 * v97;
            do
            {
              if (v108 >= v16) {
                unint64_t v109 = v16;
              }
              else {
                unint64_t v109 = v108;
              }
              AGX::BlitDispatchContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::blitCDMBuffer((uint64_t)v9, v8, v118 + v107, v119, &v121[v107], v109, 0, 1uLL);
              v107 -= v16;
              v108 += v16;
              --v98;
            }
            while (v98);
          }
          else
          {
            uint64_t v99 = v9[841];
            unint64_t v100 = v16 * v97;
            unint64_t v101 = v23 - v16 * v97;
            do
            {
              if (v101 >= v16) {
                unint64_t v102 = v16;
              }
              else {
                unint64_t v102 = v101;
              }
              char v103 = *(char **)(v99 + 72 + (int)*MEMORY[0x263F4B188]);
              AGX::BlitDispatchContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::blitCDMBuffer(v122, v99, (unint64_t)v103, v119, &v121[v100], v102, 0, 1uLL);
              AGX::BlitDispatchContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::blitCDMBuffer(v122, v120, v118 + v100, v99, v103, v102, 0, 1uLL);
              v100 -= v16;
              v101 += v16;
              --v98;
            }
            while (v98);
          }
        }
      }
      else
      {
        unint64_t v110 = v24;
        unint64_t v27 = v23 + v26;
        if (v27 >= v16)
        {
          unint64_t v28 = v27 / v16;
          if (v28 <= 1) {
            uint64_t v29 = 1;
          }
          else {
            uint64_t v29 = v28;
          }
          if (v16 <= v112)
          {
            uint64_t v52 = 0;
            unint64_t v53 = v23;
            do
            {
              unint64_t v54 = v53 - v16;
              if (v53 >= v16) {
                unint64_t v55 = v16;
              }
              else {
                unint64_t v55 = v53;
              }
              AGX::BlitDispatchContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::blitCDMBuffer((uint64_t)v9, v8, v18 + v52, v119, &v121[v52], v55, 0, 1uLL);
              v52 += v16;
              unint64_t v53 = v54;
              --v29;
            }
            while (v29);
          }
          else
          {
            uint64_t v30 = 0;
            uint64_t v114 = BlitBounceBuffer + 72;
            unint64_t v31 = v23;
            uint64_t v32 = BlitBounceBuffer;
            do
            {
              unint64_t v116 = v31 - v16;
              if (v31 >= v16) {
                unint64_t v33 = v16;
              }
              else {
                unint64_t v33 = v31;
              }
              unint64_t v34 = v18 + v30;
              unint64_t v35 = *(void *)(v114 + (int)*MEMORY[0x263F4B188]);
              AGX::BlitDispatchContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::blitCDMBuffer(v122, v32, v35, v119, &v121[v30], v33, 0, 1uLL);
              unint64_t v36 = v34;
              uint64_t v8 = v120;
              uint64_t v37 = (char *)v35;
              unint64_t v18 = v118;
              AGX::BlitDispatchContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::blitCDMBuffer(v122, v120, v36, v32, v37, v33, 0, 1uLL);
              v30 += v16;
              unint64_t v31 = v116;
              --v29;
            }
            while (v29);
          }
        }
        uint64_t v56 = v122;
        if (v25 + v113 >= v16)
        {
          unint64_t v57 = (v25 + v113) / v16;
          if (v57 <= 1) {
            unint64_t v57 = 1;
          }
          if (v16 <= v112)
          {
            uint64_t v81 = -(uint64_t)v57;
            do
            {
              if (v25 >= v16) {
                unint64_t v82 = v16;
              }
              else {
                unint64_t v82 = v25;
              }
              AGX::BlitDispatchContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::blitCDMBuffer(v122, v8, v18 + v23, v119, &v121[v23], v82, 0, 1uLL);
              v23 += v16;
              v25 -= v16;
              BOOL v13 = __CFADD__(v81++, 1);
            }
            while (!v13);
          }
          else
          {
            uint64_t v58 = *(void *)(v122 + 6728);
            uint64_t v59 = -(uint64_t)v57;
            do
            {
              if (v25 >= v16) {
                unint64_t v60 = v16;
              }
              else {
                unint64_t v60 = v25;
              }
              unint64_t v61 = v18 + v23;
              unint64_t v62 = *(void *)(v58 + 72 + (int)*MEMORY[0x263F4B188]);
              AGX::BlitDispatchContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::blitCDMBuffer(v122, v58, v62, v119, &v121[v23], v60, 0, 1uLL);
              unint64_t v63 = v61;
              uint64_t v8 = v120;
              long long v64 = (char *)v62;
              unint64_t v18 = v118;
              unint64_t v65 = v60;
              uint64_t v56 = v122;
              AGX::BlitDispatchContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::blitCDMBuffer(v122, v120, v63, v58, v64, v65, 0, 1uLL);
              v23 += v16;
              v25 -= v16;
              BOOL v13 = __CFADD__(v59++, 1);
            }
            while (!v13);
          }
        }
        unint64_t v83 = v110;
        if (v110 + v113 >= v16)
        {
          if ((v110 + v113) / v16 <= 1) {
            uint64_t v84 = 1;
          }
          else {
            uint64_t v84 = (v110 + v113) / v16;
          }
          if (v16 <= v112)
          {
            unint64_t v104 = v111 - v110;
            do
            {
              unint64_t v105 = v83 - v16;
              if (v83 >= v16) {
                unint64_t v106 = v16;
              }
              else {
                unint64_t v106 = v83;
              }
              AGX::BlitDispatchContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::blitCDMBuffer(v56, v8, v118 + v104, v119, &v121[v104], v106, 0, 1uLL);
              v104 += v16;
              unint64_t v83 = v105;
              --v84;
            }
            while (v84);
          }
          else
          {
            uint64_t v85 = *(void *)(v56 + 6728);
            unint64_t v86 = v111 - v110;
            do
            {
              unint64_t v87 = v83 - v16;
              if (v83 >= v16) {
                unint64_t v88 = v16;
              }
              else {
                unint64_t v88 = v83;
              }
              uint64_t v89 = *(char **)(v85 + 72 + (int)*MEMORY[0x263F4B188]);
              AGX::BlitDispatchContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::blitCDMBuffer(v122, v85, (unint64_t)v89, v119, &v121[v86], v88, 0, 1uLL);
              AGX::BlitDispatchContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::blitCDMBuffer(v122, v120, v118 + v86, v85, v89, v88, 0, 1uLL);
              v86 += v16;
              unint64_t v83 = v87;
              --v84;
            }
            while (v84);
          }
        }
      }
    }
  }
}

uint64_t *std::unique_ptr<AGX::HAL200::CompressionMetadata>::~unique_ptr[abi:nn180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    *(void *)(v2 + 536) = &unk_26F853CB0;
    std::unique_ptr<AGX::HAL200::CompressionMetadata>::~unique_ptr[abi:nn180100](v2 + 1024);
    if (*(_DWORD *)(v2 + 1000) && !*(unsigned char *)(v2 + 1016))
    {
      unint64_t v3 = (os_unfair_lock_s *)(*(void *)(v2 + 1008) + 56);
      os_unfair_lock_lock(v3);
      uint64_t v4 = *(void *)(v2 + 1008);
      uint64_t v5 = *(unsigned int *)(v2 + 1000);
      uint64_t v6 = *(void *)(v4 + 48);
      uint64_t v7 = (int *)MEMORY[0x263F4B188];
      *(_DWORD *)(*(void *)(*(void *)(*(void *)(v4 + 40) + 8) + (int)*MEMORY[0x263F4B188] + 24) + 32 * v5) = v6;
      uint64_t v8 = v6;
      atomic_compare_exchange_strong((atomic_ullong *volatile)(v4 + 48), (unint64_t *)&v8, (v6 & 0xFFFFFFFF00000000 | v5) + 0x100000000);
      if (v8 != v6)
      {
        uint64_t v9 = v8;
        do
        {
          *(_DWORD *)(*(void *)(*(void *)(*(void *)(v4 + 40) + 8) + *v7 + 24) + 32 * v5) = v8;
          atomic_compare_exchange_strong((atomic_ullong *volatile)(v4 + 48), (unint64_t *)&v9, (v8 & 0xFFFFFFFF00000000 | v5) + 0x100000000);
          BOOL v10 = v9 == v8;
          uint64_t v8 = v9;
        }
        while (!v10);
      }
      os_unfair_lock_unlock(v3);
    }
    *(void *)uint64_t v2 = &unk_26F853CB0;
    std::unique_ptr<AGX::HAL200::CompressionMetadata>::~unique_ptr[abi:nn180100](v2 + 488);
    if (*(_DWORD *)(v2 + 464) && !*(unsigned char *)(v2 + 480))
    {
      unint64_t v11 = (os_unfair_lock_s *)(*(void *)(v2 + 472) + 56);
      os_unfair_lock_lock(v11);
      uint64_t v12 = *(void *)(v2 + 472);
      uint64_t v13 = *(unsigned int *)(v2 + 464);
      uint64_t v14 = *(void *)(v12 + 48);
      unint64_t v15 = (int *)MEMORY[0x263F4B188];
      *(_DWORD *)(*(void *)(*(void *)(*(void *)(v12 + 40) + 8) + (int)*MEMORY[0x263F4B188] + 24) + 32 * v13) = v14;
      uint64_t v16 = v14;
      atomic_compare_exchange_strong((atomic_ullong *volatile)(v12 + 48), (unint64_t *)&v16, (v14 & 0xFFFFFFFF00000000 | v13) + 0x100000000);
      if (v16 != v14)
      {
        uint64_t v17 = v16;
        do
        {
          *(_DWORD *)(*(void *)(*(void *)(*(void *)(v12 + 40) + 8) + *v15 + 24) + 32 * v13) = v16;
          atomic_compare_exchange_strong((atomic_ullong *volatile)(v12 + 48), (unint64_t *)&v17, (v16 & 0xFFFFFFFF00000000 | v13) + 0x100000000);
          BOOL v10 = v17 == v16;
          uint64_t v16 = v17;
        }
        while (!v10);
      }
      os_unfair_lock_unlock(v11);
    }
    MEMORY[0x24566ED90](v2, 0x10E0C401505AF1FLL);
  }
  return a1;
}

void AGX::HAL200::Texture::~Texture(AGX::HAL200::Texture *this)
{
  *(void *)this = &unk_26F853CB0;
  std::unique_ptr<AGX::HAL200::CompressionMetadata>::~unique_ptr[abi:nn180100]((uint64_t *)this + 61);
  if (*((_DWORD *)this + 116) && !*((unsigned char *)this + 480))
  {
    uint64_t v2 = (os_unfair_lock_s *)(*((void *)this + 59) + 56);
    os_unfair_lock_lock(v2);
    uint64_t v3 = *((void *)this + 59);
    uint64_t v4 = *((unsigned int *)this + 116);
    uint64_t v5 = *(void *)(v3 + 48);
    uint64_t v6 = (int *)MEMORY[0x263F4B188];
    *(_DWORD *)(*(void *)(*(void *)(*(void *)(v3 + 40) + 8) + (int)*MEMORY[0x263F4B188] + 24) + 32 * v4) = v5;
    uint64_t v7 = v5;
    atomic_compare_exchange_strong((atomic_ullong *volatile)(v3 + 48), (unint64_t *)&v7, (v5 & 0xFFFFFFFF00000000 | v4) + 0x100000000);
    if (v7 != v5)
    {
      uint64_t v8 = v7;
      do
      {
        *(_DWORD *)(*(void *)(*(void *)(*(void *)(v3 + 40) + 8) + *v6 + 24) + 32 * v4) = v7;
        atomic_compare_exchange_strong((atomic_ullong *volatile)(v3 + 48), (unint64_t *)&v8, (v7 & 0xFFFFFFFF00000000 | v4) + 0x100000000);
        BOOL v9 = v8 == v7;
        uint64_t v7 = v8;
      }
      while (!v9);
    }
    os_unfair_lock_unlock(v2);
  }
}

{
  os_unfair_lock_s *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t vars8;

  *(void *)this = &unk_26F853CB0;
  std::unique_ptr<AGX::HAL200::CompressionMetadata>::~unique_ptr[abi:nn180100]((uint64_t *)this + 61);
  if (*((_DWORD *)this + 116) && !*((unsigned char *)this + 480))
  {
    uint64_t v2 = (os_unfair_lock_s *)(*((void *)this + 59) + 56);
    os_unfair_lock_lock(v2);
    uint64_t v3 = *((void *)this + 59);
    uint64_t v4 = *((unsigned int *)this + 116);
    uint64_t v5 = *(void *)(v3 + 48);
    uint64_t v6 = (int *)MEMORY[0x263F4B188];
    *(_DWORD *)(*(void *)(*(void *)(*(void *)(v3 + 40) + 8) + (int)*MEMORY[0x263F4B188] + 24) + 32 * v4) = v5;
    uint64_t v7 = v5;
    atomic_compare_exchange_strong((atomic_ullong *volatile)(v3 + 48), (unint64_t *)&v7, (v5 & 0xFFFFFFFF00000000 | v4) + 0x100000000);
    if (v7 != v5)
    {
      uint64_t v8 = v7;
      do
      {
        *(_DWORD *)(*(void *)(*(void *)(*(void *)(v3 + 40) + 8) + *v6 + 24) + 32 * v4) = v7;
        atomic_compare_exchange_strong((atomic_ullong *volatile)(v3 + 48), (unint64_t *)&v8, (v7 & 0xFFFFFFFF00000000 | v4) + 0x100000000);
        BOOL v9 = v8 == v7;
        uint64_t v7 = v8;
      }
      while (!v9);
    }
    os_unfair_lock_unlock(v2);
  }
}

void AGX::TextureGen4<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::~TextureGen4(uint64_t a1)
{
  *(void *)a1 = &unk_26F853CB0;
  std::unique_ptr<AGX::HAL200::CompressionMetadata>::~unique_ptr[abi:nn180100]((uint64_t *)(a1 + 488));
  if (*(_DWORD *)(a1 + 464) && !*(unsigned char *)(a1 + 480))
  {
    uint64_t v2 = (os_unfair_lock_s *)(*(void *)(a1 + 472) + 56);
    os_unfair_lock_lock(v2);
    uint64_t v3 = *(void *)(a1 + 472);
    uint64_t v4 = *(unsigned int *)(a1 + 464);
    uint64_t v5 = *(void *)(v3 + 48);
    uint64_t v6 = (int *)MEMORY[0x263F4B188];
    *(_DWORD *)(*(void *)(*(void *)(*(void *)(v3 + 40) + 8) + (int)*MEMORY[0x263F4B188] + 24) + 32 * v4) = v5;
    uint64_t v7 = v5;
    atomic_compare_exchange_strong((atomic_ullong *volatile)(v3 + 48), (unint64_t *)&v7, (v5 & 0xFFFFFFFF00000000 | v4) + 0x100000000);
    if (v7 != v5)
    {
      uint64_t v8 = v7;
      do
      {
        *(_DWORD *)(*(void *)(*(void *)(*(void *)(v3 + 40) + 8) + *v6 + 24) + 32 * v4) = v7;
        atomic_compare_exchange_strong((atomic_ullong *volatile)(v3 + 48), (unint64_t *)&v8, (v7 & 0xFFFFFFFF00000000 | v4) + 0x100000000);
        BOOL v9 = v8 == v7;
        uint64_t v7 = v8;
      }
      while (!v9);
    }
    os_unfair_lock_unlock(v2);
  }
}

uint64_t AGX::TextureGen4<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::~TextureGen4(uint64_t a1)
{
  *(void *)a1 = &unk_26F853CB0;
  std::unique_ptr<AGX::HAL200::CompressionMetadata>::~unique_ptr[abi:nn180100]((uint64_t *)(a1 + 488));
  if (*(_DWORD *)(a1 + 464) && !*(unsigned char *)(a1 + 480))
  {
    uint64_t v2 = (os_unfair_lock_s *)(*(void *)(a1 + 472) + 56);
    os_unfair_lock_lock(v2);
    uint64_t v3 = *(void *)(a1 + 472);
    uint64_t v4 = *(unsigned int *)(a1 + 464);
    uint64_t v5 = *(void *)(v3 + 48);
    uint64_t v6 = (int *)MEMORY[0x263F4B188];
    *(_DWORD *)(*(void *)(*(void *)(*(void *)(v3 + 40) + 8) + (int)*MEMORY[0x263F4B188] + 24) + 32 * v4) = v5;
    uint64_t v7 = v5;
    atomic_compare_exchange_strong((atomic_ullong *volatile)(v3 + 48), (unint64_t *)&v7, (v5 & 0xFFFFFFFF00000000 | v4) + 0x100000000);
    if (v7 != v5)
    {
      uint64_t v8 = v7;
      do
      {
        *(_DWORD *)(*(void *)(*(void *)(*(void *)(v3 + 40) + 8) + *v6 + 24) + 32 * v4) = v7;
        atomic_compare_exchange_strong((atomic_ullong *volatile)(v3 + 48), (unint64_t *)&v8, (v7 & 0xFFFFFFFF00000000 | v4) + 0x100000000);
        BOOL v9 = v8 == v7;
        uint64_t v7 = v8;
      }
      while (!v9);
    }
    os_unfair_lock_unlock(v2);
  }
  return a1;
}

void sub_242A1BDE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_242A1C1EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_242A1D260(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,char a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void *__p,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  _Block_object_dispose(&a44, 8);
  if (__p)
  {
    a51 = (uint64_t)__p;
    operator delete(__p);
  }
  _Block_object_dispose(&a67, 8);
  unint64_t v69 = (void *)STACK[0x200];
  if (STACK[0x200])
  {
    STACK[0x208] = (unint64_t)v69;
    operator delete(v69);
  }
  _Block_object_dispose((const void *)(v67 - 160), 8);
  _Unwind_Resume(a1);
}

double ___ZN3AGX11BlitContextINS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE20copyTextureToTextureEP19AGXG17FamilyTexturejjS7_jjjj_block_invoke_2(void *a1, _DWORD *a2, _DWORD *a3)
{
  uint64_t v4 = (void *)a1[6];
  uint64_t v5 = *(uint32x2_t **)(*(void *)a3 + 536);
  unsigned int v6 = a3[4];
  unsigned int v7 = v5[18].i32[0] + v6;
  uint64_t v8 = *(uint32x2_t **)(*(void *)a2 + 536);
  unsigned int v9 = a2[3];
  unsigned int v10 = a2[4];
  unsigned int v11 = v8[18].i32[0] + v10;
  unsigned int v12 = (unsigned __int32)v5[17].i32[0] >> (v5[18].i8[0] + v6);
  if (v12 <= 1) {
    unsigned int v12 = 1;
  }
  LODWORD(v13) = (unsigned __int32)v8[17].i32[0] >> v11;
  if (v13 <= 1) {
    LODWORD(v13) = 1;
  }
  if (v13 >= v12) {
    uint64_t v13 = v12;
  }
  else {
    uint64_t v13 = v13;
  }
  int64x2_t v24 = 0uLL;
  unsigned int v14 = a2[2];
  int64x2_t v26 = 0uLL;
  uint64_t v27 = 0;
  uint64_t v15 = a1[4];
  uint64_t v16 = a1[5];
  unsigned int v17 = a3[2];
  unsigned int v18 = a3[3];
  uint64_t v25 = 0;
  uint32x2_t v19 = vmin_u32(vmax_u32(vshl_u32(v8[16], (uint32x2_t)vneg_s32(vdup_n_s32(v11))), (uint32x2_t)0x100000001), vmax_u32(vshl_u32(v5[16], (uint32x2_t)vneg_s32(vdup_n_s32(v7))), (uint32x2_t)0x100000001));
  v20.i64[0] = v19.u32[0];
  v20.i64[1] = v19.u32[1];
  int64x2_t v22 = v20;
  uint64_t v23 = v13;
  AGX::BlitContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::copyTextureToTextureImpl(v4, v15, v14, v9, v10, &v26, v16, v17, v18, v6, &v24, &v22);
  return result;
}

uint64_t ___ZN3AGX11BlitContextINS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE20copyTextureToTextureEP19AGXG17FamilyTexturejjS7_jjjj_block_invoke_3(uint64_t result, uint64_t a2, _DWORD *a3)
{
  if (*(unsigned char *)(result + 40))
  {
    unsigned int v3 = *(_DWORD *)(*(void *)(*(void *)a3 + 536) + 136) >> (*(_DWORD *)(*(void *)(*(void *)a3 + 536)
                                                                               + 144)
                                                                   + a3[4]);
    if (v3 <= 1) {
      unsigned int v3 = 1;
    }
  }
  else
  {
    unsigned int v3 = 1;
  }
  *(_DWORD *)(*(void *)(*(void *)(result + 32) + 8) + 24) += v3;
  return result;
}

uint64_t ___ZN3AGX11BlitContextINS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE20copyTextureToTextureEP19AGXG17FamilyTexturejjS7_jjjj_block_invoke_4(uint64_t result, uint64_t a2, _DWORD *a3)
{
  uint64_t v3 = *(void *)(*(void *)a3 + 536);
  uint64_t v4 = *(void *)(v3 + 488);
  if (v4)
  {
    unsigned int v5 = *(_DWORD *)(v3 + 144) + a3[4];
    if (*(_DWORD *)(v4 + 1080) > v5)
    {
      unsigned int v6 = *(_DWORD *)(v3 + 136) >> v5;
      if (v6 <= 1) {
        unsigned int v6 = 1;
      }
      *(_DWORD *)(*(void *)(*(void *)(result + 32) + 8) + 24) += v6;
    }
  }
  return result;
}

__n128 __Block_byref_object_copy__313(__n128 *a1, __n128 *a2)
{
  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  __n128 result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

void __Block_byref_object_dispose__314(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(void *)(a1 + 56) = v2;
    operator delete(v2);
  }
}

void ___ZN3AGX11BlitContextINS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE20copyTextureToTextureEP19AGXG17FamilyTexturejjS7_jjjj_block_invoke_186(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  uint64_t v4 = a1;
  unint64_t v5 = 0x268D57000uLL;
  uint64_t v6 = *(void *)(*(void *)a3 + 536);
  unsigned int v7 = a3[4];
  if (*(unsigned char *)(a1 + 48))
  {
    int v8 = *(_DWORD *)(v6 + 144);
    unsigned int v9 = v8 + v7;
    unsigned int v10 = *(_DWORD *)(v6 + 136) >> (v8 + v7);
    if (v10 <= 1) {
      int v11 = 1;
    }
    else {
      int v11 = v10;
    }
  }
  else
  {
    unsigned int v9 = *(_DWORD *)(v6 + 144) + v7;
    int v11 = 1;
  }
  unsigned int v12 = a3[2];
  int v13 = *(unsigned __int8 *)(v6 + 380);
  if (v13 == 3 || v13 == 0)
  {
    uint64_t v15 = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getPlaneSize<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0>(*(void *)(*(void *)a3 + 536), a3[2], 0);
  }
  else
  {
    unsigned int v16 = v9 + 1;
    if (v9 + 1 < *(_DWORD *)(v6 + 140) || v16 == *(_DWORD *)(v6 + 64)) {
      unint64_t v17 = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getLevelOffset<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0>(*(void *)(*(void *)a3 + 536), v16, a3[2]);
    }
    else {
      unint64_t v17 = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getMipmapSize<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0>(*(void *)(*(void *)a3 + 536), a3[2]);
    }
    uint64_t v15 = v17
        - AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getLevelOffset<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0>(v6, v9, v12);
  }
  unsigned int v18 = 0;
  uint64_t v39 = v4;
  uint64_t v40 = v15;
  int v38 = v11;
  do
  {
    uint64_t v19 = *(void *)(*(void *)a3 + *(int *)(v5 + 2004));
    uint64_t GPUVirtualAddress = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getGPUVirtualAddress(v19, a3[3], *(_DWORD *)(v19 + 144) + a3[4], v18, a3[2]);
    unsigned int v21 = *(void **)(*(void *)(v4 + 40) + 8);
    uint64_t v22 = v21[7];
    if (v21[6] != v22 && *(void *)(v22 - 8) == GPUVirtualAddress)
    {
      *(void *)(v22 - 8) = GPUVirtualAddress + v15;
    }
    else
    {
      uint64_t v23 = (*(uint64_t (**)(void))(*(void *)(v4 + 32) + 16))();
      uint64_t v25 = v23;
      uint64_t v26 = v24;
      unint64_t v28 = (uint64_t *)v21[7];
      unint64_t v27 = v21[8];
      if ((unint64_t)v28 >= v27)
      {
        uint64_t v29 = (uint64_t *)v21[6];
        uint64_t v30 = ((char *)v28 - (char *)v29) >> 4;
        unint64_t v31 = v30 + 1;
        if ((unint64_t)(v30 + 1) >> 60) {
          abort();
        }
        uint64_t v32 = v27 - (void)v29;
        if (v32 >> 3 > v31) {
          unint64_t v31 = v32 >> 3;
        }
        if ((unint64_t)v32 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v33 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v33 = v31;
        }
        if (v33)
        {
          if (v33 >> 60) {
            std::__throw_bad_array_new_length[abi:nn180100]();
          }
          unint64_t v34 = (char *)operator new(16 * v33);
        }
        else
        {
          unint64_t v34 = 0;
        }
        unint64_t v35 = (uint64_t *)&v34[16 * v30];
        uint64_t *v35 = v25;
        v35[1] = v26;
        unint64_t v36 = v35;
        if (v28 == v29)
        {
          uint64_t v15 = v40;
        }
        else
        {
          uint64_t v15 = v40;
          do
          {
            *((_OWORD *)v36 - 1) = *((_OWORD *)v28 - 1);
            v36 -= 2;
            v28 -= 2;
          }
          while (v28 != v29);
          unint64_t v28 = (uint64_t *)v21[6];
        }
        uint64_t v37 = v35 + 2;
        void v21[6] = v36;
        v21[7] = v35 + 2;
        v21[8] = &v34[16 * v33];
        if (v28) {
          operator delete(v28);
        }
        unint64_t v5 = 0x268D57000;
        uint64_t v4 = v39;
        int v11 = v38;
        v21[7] = v37;
      }
      else
      {
        uint64_t *v28 = v23;
        v28[1] = v24;
        uint64_t v15 = v40;
        v21[7] = v28 + 2;
      }
    }
    ++v18;
  }
  while (v18 != v11);
}

void ___ZN3AGX11BlitContextINS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE20copyTextureToTextureEP19AGXG17FamilyTexturejjS7_jjjj_block_invoke_2_187(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  unint64_t v3 = 0x268D57000uLL;
  uint64_t v4 = *(void *)(*(void *)a3 + 536);
  uint64_t v5 = *(void *)(v4 + 488);
  if (v5)
  {
    unsigned int v7 = *(_DWORD *)(v4 + 144) + a3[4];
    if (*(_DWORD *)(v5 + 1080) > v7)
    {
      uint64_t v8 = a1;
      if (*(unsigned char *)(a1 + 48))
      {
        unsigned int v9 = *(_DWORD *)(v4 + 136) >> v7;
        if (v9 <= 1) {
          int v10 = 1;
        }
        else {
          int v10 = v9;
        }
      }
      else
      {
        int v10 = 1;
      }
      uint64_t v11 = v5 + 536 * a3[2];
      int v12 = *(unsigned __int8 *)(v11 + 380);
      if (v12 == 3 || v12 == 0)
      {
        unint64_t v14 = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getPlaneSize<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)1>(v11, 0, 1);
      }
      else
      {
        unsigned int v15 = v7 + 1;
        if (v7 + 1 < *(_DWORD *)(v11 + 140) || v15 == *(_DWORD *)(v11 + 64)) {
          unint64_t v16 = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getLevelOffset<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)1>(v11, v15, 0);
        }
        else {
          unint64_t v16 = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getMipmapSize<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)1>(v11, 0);
        }
        unint64_t v14 = v16
            - AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getLevelOffset<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)1>(v11, v7, 0);
      }
      unsigned int v17 = 0;
      uint64_t v37 = v8;
      int v38 = v10;
      unint64_t v39 = v14;
      do
      {
        uint64_t v18 = *(void *)(*(void *)a3 + *(int *)(v3 + 2004));
        uint64_t GPUVirtualAddress = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getGPUVirtualAddress(*(void *)(v18 + 488) + 536 * a3[2], a3[3], *(_DWORD *)(v18 + 144) + a3[4], v17, 0);
        int64x2_t v20 = *(void **)(*(void *)(v8 + 40) + 8);
        uint64_t v21 = v20[7];
        if (v20[6] != v21 && *(void *)(v21 - 8) == GPUVirtualAddress)
        {
          *(void *)(v21 - 8) = GPUVirtualAddress + v14;
        }
        else
        {
          uint64_t v22 = (*(uint64_t (**)(void))(*(void *)(v8 + 32) + 16))();
          uint64_t v24 = v22;
          uint64_t v25 = v23;
          unint64_t v27 = (uint64_t *)v20[7];
          unint64_t v26 = v20[8];
          if ((unint64_t)v27 >= v26)
          {
            unint64_t v28 = (uint64_t *)v20[6];
            uint64_t v29 = ((char *)v27 - (char *)v28) >> 4;
            unint64_t v30 = v29 + 1;
            if ((unint64_t)(v29 + 1) >> 60) {
              abort();
            }
            uint64_t v31 = v26 - (void)v28;
            if (v31 >> 3 > v30) {
              unint64_t v30 = v31 >> 3;
            }
            if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFF0) {
              unint64_t v32 = 0xFFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v32 = v30;
            }
            if (v32)
            {
              if (v32 >> 60) {
                std::__throw_bad_array_new_length[abi:nn180100]();
              }
              unint64_t v33 = (char *)operator new(16 * v32);
            }
            else
            {
              unint64_t v33 = 0;
            }
            unint64_t v34 = (uint64_t *)&v33[16 * v29];
            uint64_t *v34 = v24;
            v34[1] = v25;
            unint64_t v35 = v34;
            if (v27 == v28)
            {
              unint64_t v14 = v39;
            }
            else
            {
              unint64_t v14 = v39;
              do
              {
                *((_OWORD *)v35 - 1) = *((_OWORD *)v27 - 1);
                v35 -= 2;
                v27 -= 2;
              }
              while (v27 != v28);
              unint64_t v27 = (uint64_t *)v20[6];
            }
            unint64_t v36 = v34 + 2;
            v20[6] = v35;
            v20[7] = v34 + 2;
            v20[8] = &v33[16 * v32];
            int v10 = v38;
            if (v27) {
              operator delete(v27);
            }
            unint64_t v3 = 0x268D57000;
            uint64_t v8 = v37;
            v20[7] = v36;
          }
          else
          {
            uint64_t *v27 = v22;
            v27[1] = v23;
            unint64_t v14 = v39;
            v20[7] = v27 + 2;
          }
        }
        ++v17;
      }
      while (v17 != v10);
    }
  }
}

__n128 std::__introsort<std::_ClassicAlgPolicy,AGX::BlitContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::copyTextureToTexture(AGXG17FamilyTexture *,unsigned int,unsigned int,AGXG17FamilyTexture *,unsigned int,unsigned int,unsigned int,unsigned int)::{lambda(AGX::BlitContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::copyTextureToTexture(AGXG17FamilyTexture *,unsigned int,unsigned int,AGXG17FamilyTexture *,unsigned int,unsigned int,unsigned int,unsigned int)::MemRange,AGX::BlitContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::copyTextureToTexture(AGXG17FamilyTexture *,unsigned int,unsigned int,AGXG17FamilyTexture *,unsigned int,unsigned int,unsigned int,unsigned int)::MemRange)#1} &,AGX::BlitContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::copyTextureToTexture(AGXG17FamilyTexture *,unsigned int,unsigned int,AGXG17FamilyTexture *,unsigned int,unsigned int,unsigned int,unsigned int)::MemRange*,false>(__n128 *a1, __n128 *a2, uint64_t a3, char a4, __n128 result)
{
  while (2)
  {
    uint64_t v11 = a2 - 1;
    int v12 = a2 - 2;
    int v13 = a2 - 3;
    unint64_t v14 = a1;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          a1 = v14;
          uint64_t v15 = (char *)a2 - (char *)v14;
          uint64_t v16 = a2 - v14;
          if (v6 || !v5)
          {
            switch(v16)
            {
              case 0:
              case 1:
                return result;
              case 2:
                if (v11->n128_u64[0] >= v14->n128_u64[0]) {
                  return result;
                }
                goto LABEL_100;
              case 3:
                unint64_t v63 = v14 + 1;
                unint64_t v64 = v14[1].n128_u64[0];
                unint64_t v65 = v11->n128_u64[0];
                if (v64 < v14->n128_u64[0])
                {
                  if (v65 >= v64)
                  {
                    __n128 v135 = *v14;
                    *unint64_t v14 = *v63;
                    __n128 result = v135;
                    *unint64_t v63 = v135;
                    if (v11->n128_u64[0] < v14[1].n128_u64[0])
                    {
                      __n128 result = *v63;
                      *unint64_t v63 = *v11;
                      __n128 *v11 = result;
                    }
                  }
                  else
                  {
LABEL_100:
                    __n128 v131 = *v14;
                    *unint64_t v14 = *v11;
                    __n128 result = v131;
                    __n128 *v11 = v131;
                  }
                  return result;
                }
                if (v65 >= v64) {
                  return result;
                }
                __n128 result = *v63;
                *unint64_t v63 = *v11;
                __n128 *v11 = result;
                goto LABEL_181;
              case 4:
                unint64_t v63 = v14 + 1;
                unint64_t v66 = v14[1].n128_u64[0];
                uint64_t v67 = v14 + 2;
                unint64_t v68 = v14[2].n128_u64[0];
                if (v66 >= v14->n128_u64[0])
                {
                  if (v68 < v66)
                  {
                    __n128 result = *v63;
                    *unint64_t v63 = *v67;
                    *uint64_t v67 = result;
                    if (v14[1].n128_u64[0] < v14->n128_u64[0])
                    {
                      __n128 v133 = *v14;
                      *unint64_t v14 = *v63;
                      __n128 result = v133;
                      *unint64_t v63 = v133;
                    }
                  }
                }
                else
                {
                  if (v68 >= v66)
                  {
                    __n128 v136 = *v14;
                    *unint64_t v14 = *v63;
                    __n128 result = v136;
                    *unint64_t v63 = v136;
                    if (v68 >= v14[1].n128_u64[0]) {
                      goto LABEL_178;
                    }
                    __n128 result = *v63;
                    *unint64_t v63 = *v67;
                  }
                  else
                  {
                    __n128 v132 = *v14;
                    *unint64_t v14 = *v67;
                    __n128 result = v132;
                  }
                  *uint64_t v67 = result;
                }
LABEL_178:
                if (v11->n128_u64[0] < v67->n128_u64[0])
                {
                  __n128 result = *v67;
                  *uint64_t v67 = *v11;
                  __n128 *v11 = result;
                  if (v67->n128_u64[0] < v63->n128_u64[0])
                  {
                    __n128 result = *v63;
                    *unint64_t v63 = *v67;
                    *uint64_t v67 = result;
LABEL_181:
                    if (v14[1].n128_u64[0] < v14->n128_u64[0])
                    {
                      __n128 v137 = *v14;
                      *unint64_t v14 = *v63;
                      __n128 result = v137;
                      *unint64_t v63 = v137;
                    }
                  }
                }
                break;
              case 5:
                result.n128_u64[0] = std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,AGX::BlitContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::copyTextureToTexture(AGXG17FamilyTexture *,unsigned int,unsigned int,AGXG17FamilyTexture *,unsigned int,unsigned int,unsigned int,unsigned int)::{lambda(AGX::BlitContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::copyTextureToTexture(AGXG17FamilyTexture *,unsigned int,unsigned int,AGXG17FamilyTexture *,unsigned int,unsigned int,unsigned int,unsigned int)::MemRange,AGX::BlitContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::copyTextureToTexture(AGXG17FamilyTexture *,unsigned int,unsigned int,AGXG17FamilyTexture *,unsigned int,unsigned int,unsigned int,unsigned int)::MemRange)#1} &,AGX::BlitContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::copyTextureToTexture(AGXG17FamilyTexture *,unsigned int,unsigned int,AGXG17FamilyTexture *,unsigned int,unsigned int,unsigned int,unsigned int)::MemRange*>(v14, v14 + 1, v14[2].n128_u64, (__n128 *)v14[3].n128_u64, (__n128 *)a2[-1].n128_u64, result).n128_u64[0];
                return result;
              default:
                JUMPOUT(0);
            }
            return result;
          }
          if (v15 <= 383)
          {
            unint64_t v69 = v14 + 1;
            BOOL v71 = v14 == a2 || v69 == a2;
            if (a4)
            {
              if (!v71)
              {
                uint64_t v72 = 0;
                uint64_t v73 = v14;
                do
                {
                  unint64_t v75 = v69;
                  unint64_t v76 = v73[1].n128_u64[0];
                  if (v76 < v73->n128_u64[0])
                  {
                    uint64_t v77 = v73[1].n128_i64[1];
                    uint64_t v78 = v72;
                    do
                    {
                      __n128 result = *(__n128 *)((char *)v14 + v78);
                      *(__n128 *)((char *)v14 + v78 + 16) = result;
                      if (!v78)
                      {
                        uint64_t v74 = v14;
                        goto LABEL_117;
                      }
                      unint64_t v79 = *(unint64_t *)((char *)v14[-1].n128_u64 + v78);
                      v78 -= 16;
                    }
                    while (v76 < v79);
                    uint64_t v74 = (__n128 *)((char *)v14 + v78 + 16);
LABEL_117:
                    v74->n128_u64[0] = v76;
                    v74->n128_u64[1] = v77;
                  }
                  unint64_t v69 = v75 + 1;
                  v72 += 16;
                  uint64_t v73 = v75;
                }
                while (&v75[1] != a2);
              }
            }
            else if (!v71)
            {
              do
              {
                unint64_t v96 = v69;
                unint64_t v97 = a1[1].n128_u64[0];
                if (v97 < a1->n128_u64[0])
                {
                  unint64_t v98 = a1[1].n128_u64[1];
                  uint64_t v99 = v96;
                  do
                  {
                    __n128 result = v99[-1];
                    *uint64_t v99 = result;
                    unint64_t v100 = v99[-2].n128_u64[0];
                    --v99;
                  }
                  while (v97 < v100);
                  v99->n128_u64[0] = v97;
                  v99->n128_u64[1] = v98;
                }
                unint64_t v69 = v96 + 1;
                a1 = v96;
              }
              while (&v96[1] != a2);
            }
            return result;
          }
          if (!a3)
          {
            if (v14 != a2)
            {
              int64_t v80 = (unint64_t)(v16 - 2) >> 1;
              int64_t v81 = v80;
              do
              {
                if (v80 >= v81)
                {
                  uint64_t v83 = (2 * v81) | 1;
                  uint64_t v84 = &v14[v83];
                  unint64_t v85 = v84->n128_u64[0];
                  if (2 * v81 + 2 < v16)
                  {
                    unint64_t v86 = v84[1].n128_u64[0];
                    BOOL v87 = v85 >= v86;
                    if (v85 <= v86) {
                      unint64_t v85 = v84[1].n128_u64[0];
                    }
                    if (!v87)
                    {
                      ++v84;
                      uint64_t v83 = 2 * v81 + 2;
                    }
                  }
                  unint64_t v88 = &v14[v81];
                  __n128 v89 = *v88;
                  unint64_t v90 = v88->n128_u64[0];
                  if (v85 >= v88->n128_u64[0])
                  {
                    do
                    {
                      unint64_t v94 = v84;
                      *unint64_t v88 = *v84;
                      if (v80 < v83) {
                        break;
                      }
                      uint64_t v95 = (2 * v83) | 1;
                      uint64_t v84 = &v14[v95];
                      uint64_t v83 = 2 * v83 + 2;
                      unint64_t v93 = v84->n128_u64[0];
                      if (v83 < v16)
                      {
                        unint64_t v91 = v84[1].n128_u64[0];
                        BOOL v92 = v93 >= v91;
                        if (v93 <= v91) {
                          unint64_t v93 = v84[1].n128_u64[0];
                        }
                        if (v92) {
                          uint64_t v83 = v95;
                        }
                        else {
                          ++v84;
                        }
                      }
                      else
                      {
                        uint64_t v83 = v95;
                      }
                      unint64_t v88 = v94;
                    }
                    while (v93 >= v90);
                    __n128 *v94 = v89;
                  }
                }
                BOOL v82 = v81-- <= 0;
              }
              while (!v82);
              uint64_t v101 = (unint64_t)v15 >> 4;
              do
              {
                uint64_t v102 = 0;
                __n128 v134 = *v14;
                char v103 = v14;
                do
                {
                  unint64_t v104 = &v103[v102 + 1];
                  uint64_t v105 = (2 * v102) | 1;
                  uint64_t v106 = 2 * v102 + 2;
                  if (v106 < v101 && v104->n128_u64[0] < v104[1].n128_u64[0])
                  {
                    ++v104;
                    uint64_t v105 = v106;
                  }
                  __n128 *v103 = *v104;
                  char v103 = v104;
                  uint64_t v102 = v105;
                }
                while (v105 <= (uint64_t)((unint64_t)(v101 - 2) >> 1));
                if (v104 == --a2)
                {
                  __n128 result = v134;
                  __n128 *v104 = v134;
                }
                else
                {
                  __n128 *v104 = *a2;
                  __n128 result = v134;
                  *a2 = v134;
                  uint64_t v107 = (char *)v104 - (char *)v14 + 16;
                  if (v107 >= 17)
                  {
                    unint64_t v108 = (((unint64_t)v107 >> 4) - 2) >> 1;
                    unint64_t v109 = &v14[v108];
                    unint64_t v110 = v104->n128_u64[0];
                    if (v109->n128_u64[0] < v104->n128_u64[0])
                    {
                      unint64_t v111 = v104->n128_u64[1];
                      do
                      {
                        unint64_t v112 = v109;
                        __n128 result = *v109;
                        __n128 *v104 = *v109;
                        if (!v108) {
                          break;
                        }
                        unint64_t v108 = (v108 - 1) >> 1;
                        unint64_t v109 = &v14[v108];
                        unint64_t v104 = v112;
                      }
                      while (v109->n128_u64[0] < v110);
                      v112->n128_u64[0] = v110;
                      v112->n128_u64[1] = v111;
                    }
                  }
                }
                BOOL v82 = v101-- <= 2;
              }
              while (!v82);
            }
            return result;
          }
          unint64_t v17 = (unint64_t)v16 >> 1;
          uint64_t v18 = &v14[(unint64_t)v16 >> 1];
          unint64_t v19 = v11->n128_u64[0];
          if ((unint64_t)v15 >= 0x801)
          {
            unint64_t v20 = v18->n128_u64[0];
            if (v18->n128_u64[0] >= v14->n128_u64[0])
            {
              if (v19 < v20)
              {
                __n128 v115 = *v18;
                *uint64_t v18 = *v11;
                __n128 *v11 = v115;
                if (v18->n128_u64[0] < v14->n128_u64[0])
                {
                  __n128 v116 = *v14;
                  *unint64_t v14 = *v18;
                  *uint64_t v18 = v116;
                }
              }
            }
            else
            {
              if (v19 >= v20)
              {
                __n128 v119 = *v14;
                *unint64_t v14 = *v18;
                *uint64_t v18 = v119;
                if (v11->n128_u64[0] >= v18->n128_u64[0]) {
                  goto LABEL_22;
                }
                __n128 v113 = *v18;
                *uint64_t v18 = *v11;
              }
              else
              {
                __n128 v113 = *v14;
                *unint64_t v14 = *v11;
              }
              __n128 *v11 = v113;
            }
LABEL_22:
            uint64_t v22 = v14 + 1;
            uint64_t v23 = &v14[v17];
            unint64_t v26 = v23[-1].n128_u64[0];
            uint64_t v24 = v23 - 1;
            unint64_t v25 = v26;
            unint64_t v27 = v12->n128_u64[0];
            if (v26 >= v14[1].n128_u64[0])
            {
              if (v27 < v25)
              {
                __n128 v120 = *v24;
                *uint64_t v24 = *v12;
                *int v12 = v120;
                if (v24->n128_u64[0] < v22->n128_u64[0])
                {
                  __n128 v29 = *v22;
                  *uint64_t v22 = *v24;
                  *uint64_t v24 = v29;
                }
              }
            }
            else
            {
              if (v27 >= v25)
              {
                __n128 v30 = *v22;
                *uint64_t v22 = *v24;
                *uint64_t v24 = v30;
                if (v12->n128_u64[0] >= v24->n128_u64[0]) {
                  goto LABEL_34;
                }
                __n128 v122 = *v24;
                *uint64_t v24 = *v12;
                __n128 v28 = v122;
              }
              else
              {
                __n128 v28 = *v22;
                *uint64_t v22 = *v12;
              }
              *int v12 = v28;
            }
LABEL_34:
            uint64_t v31 = v14 + 2;
            unint64_t v32 = &v14[v17];
            unint64_t v35 = v32[1].n128_u64[0];
            unint64_t v33 = v32 + 1;
            unint64_t v34 = v35;
            unint64_t v36 = v13->n128_u64[0];
            if (v35 >= v14[2].n128_u64[0])
            {
              if (v36 < v34)
              {
                __n128 v123 = *v33;
                *unint64_t v33 = *v13;
                __n128 *v13 = v123;
                if (v33->n128_u64[0] < v31->n128_u64[0])
                {
                  __n128 v38 = *v31;
                  *uint64_t v31 = *v33;
                  *unint64_t v33 = v38;
                }
              }
            }
            else
            {
              if (v36 >= v34)
              {
                __n128 v39 = *v31;
                *uint64_t v31 = *v33;
                *unint64_t v33 = v39;
                if (v13->n128_u64[0] >= v33->n128_u64[0]) {
                  goto LABEL_43;
                }
                __n128 v124 = *v33;
                *unint64_t v33 = *v13;
                __n128 v37 = v124;
              }
              else
              {
                __n128 v37 = *v31;
                *uint64_t v31 = *v13;
              }
              __n128 *v13 = v37;
            }
LABEL_43:
            unint64_t v40 = v18->n128_u64[0];
            unint64_t v41 = v33->n128_u64[0];
            if (v18->n128_u64[0] >= v24->n128_u64[0])
            {
              if (v41 < v40)
              {
                __n128 v126 = *v18;
                *uint64_t v18 = *v33;
                *unint64_t v33 = v126;
                if (v18->n128_u64[0] < v24->n128_u64[0])
                {
                  __n128 v127 = *v24;
                  *uint64_t v24 = *v18;
                  *uint64_t v18 = v127;
                }
              }
              goto LABEL_52;
            }
            if (v41 >= v40)
            {
              __n128 v128 = *v24;
              *uint64_t v24 = *v18;
              *uint64_t v18 = v128;
              if (v33->n128_u64[0] >= v18->n128_u64[0])
              {
LABEL_52:
                __n128 v129 = *v14;
                *unint64_t v14 = *v18;
                __n128 result = v129;
                *uint64_t v18 = v129;
                goto LABEL_53;
              }
              __n128 v125 = *v18;
              *uint64_t v18 = *v33;
            }
            else
            {
              __n128 v125 = *v24;
              *uint64_t v24 = *v33;
            }
            *unint64_t v33 = v125;
            goto LABEL_52;
          }
          unint64_t v21 = v14->n128_u64[0];
          if (v14->n128_u64[0] >= v18->n128_u64[0])
          {
            if (v19 < v21)
            {
              __n128 v117 = *v14;
              *unint64_t v14 = *v11;
              __n128 result = v117;
              __n128 *v11 = v117;
              if (v14->n128_u64[0] < v18->n128_u64[0])
              {
                __n128 v118 = *v18;
                *uint64_t v18 = *v14;
                __n128 result = v118;
                *unint64_t v14 = v118;
              }
            }
          }
          else
          {
            if (v19 >= v21)
            {
              __n128 v121 = *v18;
              *uint64_t v18 = *v14;
              __n128 result = v121;
              *unint64_t v14 = v121;
              if (v11->n128_u64[0] >= v14->n128_u64[0]) {
                goto LABEL_53;
              }
              __n128 v114 = *v14;
              *unint64_t v14 = *v11;
            }
            else
            {
              __n128 v114 = *v18;
              *uint64_t v18 = *v11;
            }
            __n128 result = v114;
            __n128 *v11 = v114;
          }
LABEL_53:
          --a3;
          unint64_t v42 = v14->n128_u64[0];
          if (a4) {
            break;
          }
          unint64_t v43 = v14->n128_u64[1];
          if (v14[-1].n128_u64[0] < v42) {
            goto LABEL_56;
          }
          if (v42 < v11->n128_u64[0])
          {
            do
            {
              unint64_t v56 = v14[1].n128_u64[0];
              ++v14;
            }
            while (v42 >= v56);
          }
          else
          {
            unint64_t n128_u64 = (unint64_t)v14[1].n128_u64;
            do
            {
              unint64_t v14 = (__n128 *)n128_u64;
              if (n128_u64 >= (unint64_t)a2) {
                break;
              }
              n128_u64 += 16;
            }
            while (v42 >= v14->n128_u64[0]);
          }
          uint64_t v58 = a2;
          if (v14 < a2)
          {
            uint64_t v58 = a2;
            do
            {
              unint64_t v59 = v58[-1].n128_u64[0];
              --v58;
            }
            while (v42 < v59);
          }
          while (v14 < v58)
          {
            __n128 v130 = *v14;
            *unint64_t v14 = *v58;
            __n128 result = v130;
            *uint64_t v58 = v130;
            do
            {
              unint64_t v60 = v14[1].n128_u64[0];
              ++v14;
            }
            while (v42 >= v60);
            do
            {
              unint64_t v61 = v58[-1].n128_u64[0];
              --v58;
            }
            while (v42 < v61);
          }
          unint64_t v62 = v14 - 1;
          BOOL v5 = &v14[-1] >= a1;
          BOOL v6 = &v14[-1] == a1;
          if (&v14[-1] != a1)
          {
            __n128 result = *v62;
            *a1 = *v62;
          }
          a4 = 0;
          v14[-1].n128_u64[0] = v42;
          v14[-1].n128_u64[1] = v43;
        }
        unint64_t v43 = v14->n128_u64[1];
LABEL_56:
        unint64_t v44 = v14;
        do
        {
          unint64_t v45 = v44;
          unint64_t v46 = v44[1].n128_u64[0];
          ++v44;
        }
        while (v46 < v42);
        unint64_t v47 = a2;
        if (v45 == v14)
        {
          unint64_t v47 = a2;
          do
          {
            if (v44 >= v47) {
              break;
            }
            unint64_t v49 = v47[-1].n128_u64[0];
            --v47;
          }
          while (v49 >= v42);
        }
        else
        {
          do
          {
            unint64_t v48 = v47[-1].n128_u64[0];
            --v47;
          }
          while (v48 >= v42);
        }
        unint64_t v14 = v44;
        if (v44 < v47)
        {
          uint64_t v50 = v47;
          do
          {
            __n128 result = *v14;
            *unint64_t v14 = *v50;
            *uint64_t v50 = result;
            do
            {
              unint64_t v51 = v14[1].n128_u64[0];
              ++v14;
            }
            while (v51 < v42);
            do
            {
              unint64_t v52 = v50[-1].n128_u64[0];
              --v50;
            }
            while (v52 >= v42);
          }
          while (v14 < v50);
        }
        unint64_t v53 = v14 - 1;
        if (&v14[-1] != a1)
        {
          __n128 result = *v53;
          *a1 = *v53;
        }
        v14[-1].n128_u64[0] = v42;
        v14[-1].n128_u64[1] = v43;
        if (v44 >= v47) {
          break;
        }
LABEL_75:
        std::__introsort<std::_ClassicAlgPolicy,AGX::BlitContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::copyTextureToTexture(AGXG17FamilyTexture *,unsigned int,unsigned int,AGXG17FamilyTexture *,unsigned int,unsigned int,unsigned int,unsigned int)::{lambda(AGX::BlitContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::copyTextureToTexture(AGXG17FamilyTexture *,unsigned int,unsigned int,AGXG17FamilyTexture *,unsigned int,unsigned int,unsigned int,unsigned int)::MemRange,AGX::BlitContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::copyTextureToTexture(AGXG17FamilyTexture *,unsigned int,unsigned int,AGXG17FamilyTexture *,unsigned int,unsigned int,unsigned int,unsigned int)::MemRange)#1} &,AGX::BlitContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::copyTextureToTexture(AGXG17FamilyTexture *,unsigned int,unsigned int,AGXG17FamilyTexture *,unsigned int,unsigned int,unsigned int,unsigned int)::MemRange*,false>(a1, &v14[-1], a3, a4 & 1);
        a4 = 0;
      }
      BOOL v54 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,AGX::BlitContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::copyTextureToTexture(AGXG17FamilyTexture *,unsigned int,unsigned int,AGXG17FamilyTexture *,unsigned int,unsigned int,unsigned int,unsigned int)::{lambda(AGX::BlitContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::copyTextureToTexture(AGXG17FamilyTexture *,unsigned int,unsigned int,AGXG17FamilyTexture *,unsigned int,unsigned int,unsigned int,unsigned int)::MemRange,AGX::BlitContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::copyTextureToTexture(AGXG17FamilyTexture *,unsigned int,unsigned int,AGXG17FamilyTexture *,unsigned int,unsigned int,unsigned int,unsigned int)::MemRange)#1} &,AGX::BlitContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::copyTextureToTexture(AGXG17FamilyTexture *,unsigned int,unsigned int,AGXG17FamilyTexture *,unsigned int,unsigned int,unsigned int,unsigned int)::MemRange*>(a1, v14 - 1, result);
      if (std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,AGX::BlitContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::copyTextureToTexture(AGXG17FamilyTexture *,unsigned int,unsigned int,AGXG17FamilyTexture *,unsigned int,unsigned int,unsigned int,unsigned int)::{lambda(AGX::BlitContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::copyTextureToTexture(AGXG17FamilyTexture *,unsigned int,unsigned int,AGXG17FamilyTexture *,unsigned int,unsigned int,unsigned int,unsigned int)::MemRange,AGX::BlitContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::copyTextureToTexture(AGXG17FamilyTexture *,unsigned int,unsigned int,AGXG17FamilyTexture *,unsigned int,unsigned int,unsigned int,unsigned int)::MemRange)#1} &,AGX::BlitContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::copyTextureToTexture(AGXG17FamilyTexture *,unsigned int,unsigned int,AGXG17FamilyTexture *,unsigned int,unsigned int,unsigned int,unsigned int)::MemRange*>(v14, a2, v55))
      {
        break;
      }
      if (!v54) {
        goto LABEL_75;
      }
    }
    a2 = v14 - 1;
    if (!v54) {
      continue;
    }
    return result;
  }
}

__n128 __Block_byref_object_copy__188(__n128 *a1, __n128 *a2)
{
  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  __n128 result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

void __Block_byref_object_dispose__189(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(void *)(a1 + 56) = v2;
    operator delete(v2);
  }
}

void ___ZN3AGX11BlitContextINS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE20copyTextureToTextureEP19AGXG17FamilyTexturejjS7_jjjj_block_invoke_2_195(uint64_t a1, unsigned int *a2, unsigned int *a3)
{
  unint64_t v5 = 0x268D57000uLL;
  BOOL v106 = *(unsigned char *)(a1 + 88)
      && (uint64_t v6 = *(void *)(*(void *)a2 + 536), (v7 = *(void *)(v6 + 488)) != 0)
      && *(_DWORD *)(v7 + 1080) > *(_DWORD *)(v6 + 144) + a2[4];
  uint64_t v8 = *(void *)(*(void *)a3 + 536);
  unsigned int v9 = a3[4];
  if (*(unsigned char *)(a1 + 89))
  {
    int v10 = *(_DWORD *)(v8 + 144);
    unsigned int v11 = v10 + v9;
    LODWORD(v12) = *(_DWORD *)(v8 + 136) >> (v10 + v9);
    if (v12 <= 1) {
      uint64_t v12 = 1;
    }
    else {
      uint64_t v12 = v12;
    }
  }
  else
  {
    unsigned int v11 = *(_DWORD *)(v8 + 144) + v9;
    uint64_t v12 = 1;
  }
  uint64_t v107 = v12;
  uint64_t v105 = *(void **)(a1 + 80);
  unsigned int v13 = a3[2];
  int v14 = *(unsigned __int8 *)(v8 + 380);
  if (v14 == 3 || v14 == 0)
  {
    uint64_t v109 = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getPlaneSize<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0>(v8, a3[2], 0);
  }
  else
  {
    unsigned int v16 = v11 + 1;
    if (v11 + 1 < *(_DWORD *)(v8 + 140) || v16 == *(_DWORD *)(v8 + 64)) {
      unint64_t v17 = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getLevelOffset<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0>(v8, v16, a3[2]);
    }
    else {
      unint64_t v17 = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getMipmapSize<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0>(v8, a3[2]);
    }
    uint64_t v109 = v17
         - AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getLevelOffset<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0>(v8, v11, v13);
  }
  for (uint64_t i = 0; i != v107; ++i)
  {
    uint64_t v35 = *(void *)(a1 + 56);
    uint64_t v36 = *(void *)(*(void *)(a1 + 64) + 8) + 48;
    uint64_t v37 = *(void *)(*(void *)a2 + *(int *)(v5 + 2004));
    uint64_t v38 = *(void *)(a1 + 48);
    uint64_t GPUVirtualAddress = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getGPUVirtualAddress(v37, a2[3], *(_DWORD *)(v37 + 144) + a2[4], i, a2[2]);
    uint64_t v40 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v35 + 16))(v35, GPUVirtualAddress, v109);
    int v42 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v38 + 16))(v38, v36, v40, v41);
    if ((v42 | !v106))
    {
      if (!v42) {
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v43 = *(void *)(a1 + 56);
      uint64_t v44 = *(void *)(*(void *)(a1 + 64) + 8);
      uint64_t v45 = *(void *)(a1 + 48);
      uint64_t v46 = *(void *)(*(void *)a2 + *(int *)(v5 + 2004));
      uint64_t v47 = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getGPUVirtualAddress(*(void *)(v46 + 488) + 536 * a2[2], a2[3], *(_DWORD *)(v46 + 144) + a2[4], i, 0);
      uint64_t v48 = *(void *)(*(void *)a2 + *(int *)(v5 + 2004));
      unsigned int v49 = a2[2];
      uint64_t v50 = *(void *)(v48 + 488) + 536 * v49;
      int v51 = *(unsigned __int8 *)(v50 + 380);
      if (v51 == 3 || v51 == 0)
      {
        unint64_t v53 = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getPlaneSize<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)1>(*(void *)(v48 + 488) + 536 * v49, 0, 1);
      }
      else
      {
        unsigned int v54 = *(_DWORD *)(v48 + 144) + a2[4];
        unsigned int v55 = v54 + 1;
        if (v54 + 1 < *(_DWORD *)(v50 + 140) || v55 == *(_DWORD *)(v50 + 64)) {
          unint64_t v56 = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getLevelOffset<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)1>(v50, v55, 0);
        }
        else {
          unint64_t v56 = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getMipmapSize<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)1>(v50, 0);
        }
        unint64_t v53 = v56
            - AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getLevelOffset<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)1>(v50, v54, 0);
      }
      uint64_t v57 = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t))(v43 + 16))(v43, v47, v53);
      unint64_t v5 = 0x268D57000uLL;
      if (((*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v45 + 16))(v45, v44 + 48, v57, v58) & 1) == 0)
      {
LABEL_22:
        uint64_t v19 = *(int *)(v5 + 2004);
        unint64_t v20 = *(uint32x2_t **)(*(void *)a2 + v19);
        unsigned int v21 = a2[4];
        if (*(unsigned char *)(a1 + 89))
        {
          unsigned int v22 = v20[18].i32[0] + v21;
          unsigned int v23 = 1;
        }
        else
        {
          unsigned int v22 = v20[18].i32[0] + v21;
          unsigned int v23 = (unsigned __int32)v20[17].i32[0] >> (v20[18].i8[0] + v21);
          if (v23 <= 1) {
            unsigned int v23 = 1;
          }
        }
        uint64_t v24 = *(uint32x2_t **)(*(void *)a3 + v19);
        unsigned int v25 = a3[4];
        unsigned int v26 = v24[18].i32[0] + v25;
        int64x2_t v112 = 0uLL;
        unsigned int v27 = a2[2];
        unsigned int v28 = a2[3];
        int64x2_t v114 = 0uLL;
        uint64_t v115 = i;
        uint64_t v29 = *(void *)(a1 + 32);
        uint64_t v30 = *(void *)(a1 + 40);
        unsigned int v31 = a3[2];
        unsigned int v32 = a3[3];
        uint64_t v113 = i;
        uint32x2_t v33 = vmin_u32(vmax_u32(vshl_u32(v20[16], (uint32x2_t)vneg_s32(vdup_n_s32(v22))), (uint32x2_t)0x100000001), vmax_u32(vshl_u32(v24[16], (uint32x2_t)vneg_s32(vdup_n_s32(v26))), (uint32x2_t)0x100000001));
        v34.i64[0] = v33.u32[0];
        v34.i64[1] = v33.u32[1];
        int64x2_t v110 = v34;
        uint64_t v111 = v23;
        AGX::BlitContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::copyTextureToTextureImpl(v105, v29, v27, v28, v21, &v114, v30, v31, v32, v25, &v112, &v110);
        continue;
      }
    }
    uint64_t v59 = *(void *)(*(void *)a2 + *(int *)(v5 + 2004));
    unint64_t v60 = *(void **)(*(void *)(a1 + 72) + 8);
    uint64_t v61 = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getGPUVirtualAddress(v59, a2[3], *(_DWORD *)(v59 + 144) + a2[4], i, a2[2]);
    uint64_t v62 = *(void *)(*(void *)a3 + *(int *)(v5 + 2004));
    uint64_t v63 = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getGPUVirtualAddress(v62, a3[3], *(_DWORD *)(v62 + 144) + a3[4], i, a3[2]);
    uint64_t v64 = v63;
    unint64_t v66 = (uint64_t *)v60[7];
    unint64_t v65 = v60[8];
    if ((unint64_t)v66 >= v65)
    {
      unint64_t v68 = (void *)v60[6];
      unint64_t v69 = 0xAAAAAAAAAAAAAAABLL * (v66 - v68) + 1;
      if (v69 > 0xAAAAAAAAAAAAAAALL) {
        goto LABEL_92;
      }
      unint64_t v70 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v65 - (void)v68) >> 3);
      if (2 * v70 > v69) {
        unint64_t v69 = 2 * v70;
      }
      if (v70 >= 0x555555555555555) {
        unint64_t v71 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v71 = v69;
      }
      if (v71)
      {
        if (v71 > 0xAAAAAAAAAAAAAAALL) {
          goto LABEL_93;
        }
        uint64_t v72 = (char *)operator new(24 * v71);
      }
      else
      {
        uint64_t v72 = 0;
      }
      uint64_t v73 = (uint64_t *)&v72[8 * (v66 - v68)];
      *uint64_t v73 = v61;
      v73[1] = v64;
      v73[2] = v109;
      uint64_t v74 = v73;
      unint64_t v5 = 0x268D57000uLL;
      if (v66 != v68)
      {
        do
        {
          long long v75 = *(_OWORD *)(v66 - 3);
          *(v74 - 1) = *(v66 - 1);
          *(_OWORD *)(v74 - 3) = v75;
          v74 -= 3;
          v66 -= 3;
        }
        while (v66 != v68);
        unint64_t v66 = (uint64_t *)v60[6];
      }
      uint64_t v67 = v73 + 3;
      v60[6] = v74;
      v60[7] = v73 + 3;
      v60[8] = &v72[24 * v71];
      if (v66) {
        operator delete(v66);
      }
    }
    else
    {
      uint64_t *v66 = v61;
      v66[1] = v63;
      uint64_t v67 = v66 + 3;
      v66[2] = v109;
    }
    v60[7] = v67;
    if (v106)
    {
      unint64_t v76 = *(void **)(*(void *)(a1 + 72) + 8);
      uint64_t v77 = *(void *)(*(void *)a2 + *(int *)(v5 + 2004));
      uint64_t v78 = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getGPUVirtualAddress(*(void *)(v77 + 488) + 536 * a2[2], a2[3], *(_DWORD *)(v77 + 144) + a2[4], i, 0);
      uint64_t v79 = *(void *)(*(void *)a3 + *(int *)(v5 + 2004));
      uint64_t v80 = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getGPUVirtualAddress(*(void *)(v79 + 488) + 536 * a3[2], a3[3], *(_DWORD *)(v79 + 144) + a3[4], i, 0);
      uint64_t v81 = *(void *)(*(void *)a2 + *(int *)(v5 + 2004));
      unsigned int v82 = a2[2];
      uint64_t v83 = *(void *)(v81 + 488) + 536 * v82;
      int v84 = *(unsigned __int8 *)(v83 + 380);
      if (v84 == 3 || v84 == 0)
      {
        unint64_t v86 = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getPlaneSize<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)1>(*(void *)(v81 + 488) + 536 * v82, 0, 1);
      }
      else
      {
        uint64_t v87 = v78;
        unsigned int v88 = *(_DWORD *)(v81 + 144) + a2[4];
        unsigned int v89 = v88 + 1;
        if (v88 + 1 < *(_DWORD *)(v83 + 140) || v89 == *(_DWORD *)(v83 + 64)) {
          unint64_t v90 = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getLevelOffset<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)1>(v83, v89, 0);
        }
        else {
          unint64_t v90 = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getMipmapSize<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)1>(v83, 0);
        }
        unint64_t v86 = v90
            - AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getLevelOffset<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)1>(v83, v88, 0);
        uint64_t v78 = v87;
      }
      BOOL v92 = (uint64_t *)v76[7];
      unint64_t v91 = v76[8];
      if ((unint64_t)v92 >= v91)
      {
        unint64_t v104 = v76;
        unint64_t v93 = (void *)v76[6];
        unint64_t v94 = 0xAAAAAAAAAAAAAAABLL * (v92 - v93) + 1;
        if (v94 > 0xAAAAAAAAAAAAAAALL) {
LABEL_92:
        }
          abort();
        unint64_t v95 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v91 - (void)v93) >> 3);
        if (2 * v95 > v94) {
          unint64_t v94 = 2 * v95;
        }
        if (v95 >= 0x555555555555555) {
          unint64_t v96 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v96 = v94;
        }
        if (v96)
        {
          if (v96 > 0xAAAAAAAAAAAAAAALL) {
LABEL_93:
          }
            std::__throw_bad_array_new_length[abi:nn180100]();
          unint64_t v97 = (char *)operator new(24 * v96);
        }
        else
        {
          unint64_t v97 = 0;
        }
        unint64_t v98 = (uint64_t *)&v97[8 * (v92 - v93)];
        *unint64_t v98 = v78;
        v98[1] = v80;
        v98[2] = v86;
        uint64_t v99 = v98;
        unint64_t v5 = 0x268D57000;
        if (v92 == v93)
        {
          uint64_t v101 = v104;
        }
        else
        {
          do
          {
            long long v100 = *(_OWORD *)(v92 - 3);
            *(v99 - 1) = *(v92 - 1);
            *(_OWORD *)(v99 - 3) = v100;
            v99 -= 3;
            v92 -= 3;
          }
          while (v92 != v93);
          uint64_t v101 = v104;
          BOOL v92 = (uint64_t *)v104[6];
        }
        uint64_t v102 = v98 + 3;
        v101[6] = v99;
        v101[7] = v98 + 3;
        v101[8] = &v97[24 * v96];
        char v103 = v101;
        if (v92) {
          operator delete(v92);
        }
        v103[7] = v102;
      }
      else
      {
        *BOOL v92 = v78;
        v92[1] = v80;
        v92[2] = v86;
        unint64_t v5 = 0x268D57000;
        v76[7] = v92 + 3;
      }
    }
  }
}

__n128 std::__introsort<std::_ClassicAlgPolicy,AGX::BlitContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::copyTextureToTexture(AGXG17FamilyTexture *,unsigned int,unsigned int,AGXG17FamilyTexture *,unsigned int,unsigned int,unsigned int,unsigned int)::{lambda(AGX::BlitContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::CopyRange,AGX::BlitContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::CopyRange)#1} &,AGX::BlitContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::CopyRange*,false>(unint64_t a1, unint64_t a2, uint64_t a3, char a4, __n128 result)
{
  while (2)
  {
    unsigned int v11 = (unint64_t *)(a2 - 24);
    uint64_t v12 = (unint64_t *)(a2 - 48);
    unsigned int v13 = (unint64_t *)(a2 - 72);
    unint64_t v14 = a1;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          a1 = v14;
          uint64_t v15 = a2 - v14;
          uint64_t v16 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2 - v14) >> 3);
          if (v6 || !v5)
          {
            switch(v16)
            {
              case 0:
              case 1:
                return result;
              case 2:
                if (*v11 >= *(void *)v14) {
                  return result;
                }
                goto LABEL_99;
              case 3:
                unint64_t v93 = v14 + 24;
                unint64_t v94 = *(void *)(v14 + 24);
                unint64_t v95 = *v11;
                if (v94 < *(void *)v14)
                {
                  if (v95 >= v94)
                  {
                    uint64_t v202 = *(void *)(v14 + 16);
                    __n128 v177 = *(__n128 *)v14;
                    *(_OWORD *)unint64_t v14 = *(_OWORD *)v93;
                    *(void *)(v14 + 16) = *(void *)(v14 + 40);
                    __n128 result = v177;
                    *(__n128 *)unint64_t v93 = v177;
                    *(void *)(v14 + 40) = v202;
                    if (*v11 < *(void *)(v14 + 24))
                    {
                      __n128 result = *(__n128 *)v93;
                      uint64_t v147 = *(void *)(v14 + 40);
                      uint64_t v148 = *(void *)(a2 - 8);
                      *(_OWORD *)unint64_t v93 = *(_OWORD *)v11;
                      *(void *)(v14 + 40) = v148;
                      *(void *)(a2 - 8) = v147;
                      *(__n128 *)unsigned int v11 = result;
                    }
                  }
                  else
                  {
LABEL_99:
                    uint64_t v198 = *(void *)(v14 + 16);
                    __n128 v170 = *(__n128 *)v14;
                    long long v96 = *(_OWORD *)v11;
                    *(void *)(v14 + 16) = *(void *)(a2 - 8);
                    *(_OWORD *)unint64_t v14 = v96;
                    __n128 result = v170;
                    *(void *)(a2 - 8) = v198;
                    *(__n128 *)unsigned int v11 = v170;
                  }
                  return result;
                }
                if (v95 >= v94) {
                  return result;
                }
                __n128 result = *(__n128 *)v93;
                uint64_t v127 = *(void *)(v14 + 40);
                uint64_t v128 = *(void *)(a2 - 8);
                *(_OWORD *)unint64_t v93 = *(_OWORD *)v11;
                *(void *)(v14 + 40) = v128;
                *(void *)(a2 - 8) = v127;
                *(__n128 *)unsigned int v11 = result;
                goto LABEL_181;
              case 4:
                unint64_t v93 = v14 + 24;
                unint64_t v97 = *(void *)(v14 + 24);
                unint64_t v98 = (__n128 *)(v14 + 48);
                unint64_t v99 = *(void *)(v14 + 48);
                if (v97 >= *(void *)v14)
                {
                  if (v99 < v97)
                  {
                    uint64_t v129 = *(void *)(v14 + 40);
                    __n128 result = *(__n128 *)v93;
                    *(__n128 *)unint64_t v93 = *v98;
                    *(void *)(v14 + 40) = *(void *)(v14 + 64);
                    *unint64_t v98 = result;
                    *(void *)(v14 + 64) = v129;
                    if (*(void *)(v14 + 24) < *(void *)v14)
                    {
                      uint64_t v200 = *(void *)(v14 + 16);
                      __n128 v174 = *(__n128 *)v14;
                      *(_OWORD *)unint64_t v14 = *(_OWORD *)v93;
                      *(void *)(v14 + 16) = *(void *)(v14 + 40);
                      __n128 result = v174;
                      *(__n128 *)unint64_t v93 = v174;
                      *(void *)(v14 + 40) = v200;
                    }
                  }
                }
                else
                {
                  if (v99 >= v97)
                  {
                    uint64_t v203 = *(void *)(v14 + 16);
                    __n128 v178 = *(__n128 *)v14;
                    *(_OWORD *)unint64_t v14 = *(_OWORD *)v93;
                    *(void *)(v14 + 16) = *(void *)(v14 + 40);
                    __n128 result = v178;
                    *(__n128 *)unint64_t v93 = v178;
                    *(void *)(v14 + 40) = v203;
                    if (v99 >= *(void *)(v14 + 24)) {
                      goto LABEL_178;
                    }
                    uint64_t v100 = *(void *)(v14 + 40);
                    __n128 result = *(__n128 *)v93;
                    *(__n128 *)unint64_t v93 = *v98;
                    *(void *)(v14 + 40) = *(void *)(v14 + 64);
                    *unint64_t v98 = result;
                  }
                  else
                  {
                    uint64_t v199 = *(void *)(v14 + 16);
                    __n128 v171 = *(__n128 *)v14;
                    *(__n128 *)unint64_t v14 = *v98;
                    *(void *)(v14 + 16) = *(void *)(v14 + 64);
                    __n128 result = v171;
                    *unint64_t v98 = v171;
                    uint64_t v100 = v199;
                  }
                  *(void *)(v14 + 64) = v100;
                }
LABEL_178:
                if (*v11 < v98->n128_u64[0])
                {
                  __n128 result = *v98;
                  uint64_t v149 = *(void *)(v14 + 64);
                  uint64_t v150 = *(void *)(a2 - 8);
                  *unint64_t v98 = *(__n128 *)v11;
                  *(void *)(v14 + 64) = v150;
                  *(void *)(a2 - 8) = v149;
                  *(__n128 *)unsigned int v11 = result;
                  if (v98->n128_u64[0] < *(void *)v93)
                  {
                    uint64_t v151 = *(void *)(v14 + 40);
                    __n128 result = *(__n128 *)v93;
                    *(__n128 *)unint64_t v93 = *v98;
                    *(void *)(v14 + 40) = *(void *)(v14 + 64);
                    *unint64_t v98 = result;
                    *(void *)(v14 + 64) = v151;
LABEL_181:
                    if (*(void *)(v14 + 24) < *(void *)v14)
                    {
                      uint64_t v204 = *(void *)(v14 + 16);
                      __n128 v179 = *(__n128 *)v14;
                      *(_OWORD *)unint64_t v14 = *(_OWORD *)v93;
                      *(void *)(v14 + 16) = *(void *)(v93 + 16);
                      __n128 result = v179;
                      *(__n128 *)unint64_t v93 = v179;
                      *(void *)(v93 + 16) = v204;
                    }
                  }
                }
                break;
              case 5:
                result.n128_u64[0] = std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,AGX::BlitContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::copyTextureToTexture(AGXG17FamilyTexture *,unsigned int,unsigned int,AGXG17FamilyTexture *,unsigned int,unsigned int,unsigned int,unsigned int)::{lambda(AGX::BlitContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::CopyRange,AGX::BlitContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::CopyRange)#1} &,AGX::BlitContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::CopyRange*>((__n128 *)v14, (__n128 *)(v14 + 24), (unint64_t *)(v14 + 48), v14 + 72, a2 - 24, result).n128_u64[0];
                return result;
              default:
                JUMPOUT(0);
            }
            return result;
          }
          if (v15 <= 575)
          {
            unint64_t v101 = v14 + 24;
            BOOL v103 = v14 == a2 || v101 == a2;
            if (a4)
            {
              if (!v103)
              {
                uint64_t v104 = 0;
                uint64_t v105 = (__n128 *)v14;
                do
                {
                  uint64_t v107 = (__n128 *)v101;
                  unint64_t v108 = v105[1].n128_u64[1];
                  if (v108 < v105->n128_u64[0])
                  {
                    __n128 v172 = v105[2];
                    uint64_t v109 = v104;
                    do
                    {
                      uint64_t v110 = v14 + v109;
                      *(_OWORD *)(v110 + 24) = *(_OWORD *)(v14 + v109);
                      *(void *)(v110 + 40) = *(void *)(v14 + v109 + 16);
                      if (!v109)
                      {
                        uint64_t v106 = v14;
                        goto LABEL_116;
                      }
                      v109 -= 24;
                    }
                    while (v108 < *(void *)(v110 - 24));
                    uint64_t v106 = v14 + v109 + 24;
LABEL_116:
                    *(void *)uint64_t v106 = v108;
                    __n128 result = v172;
                    *(__n128 *)(v106 + 8) = v172;
                  }
                  unint64_t v101 = (unint64_t)&v107[1].n128_u64[1];
                  v104 += 24;
                  uint64_t v105 = v107;
                }
                while (&v107[1].n128_i8[8] != (__int8 *)a2);
              }
            }
            else if (!v103)
            {
              do
              {
                unint64_t v130 = v101;
                unint64_t v131 = *(void *)(a1 + 24);
                if (v131 < *(void *)a1)
                {
                  __n128 v175 = *(__n128 *)(a1 + 32);
                  do
                  {
                    *(_OWORD *)unint64_t v101 = *(_OWORD *)(v101 - 24);
                    *(void *)(v101 + 16) = *(void *)(v101 - 8);
                    unint64_t v132 = *(void *)(v101 - 48);
                    v101 -= 24;
                  }
                  while (v131 < v132);
                  *(void *)unint64_t v101 = v131;
                  __n128 result = v175;
                  *(__n128 *)(v101 + 8) = v175;
                }
                unint64_t v101 = v130 + 24;
                a1 = v130;
              }
              while (v130 + 24 != a2);
            }
            return result;
          }
          if (!a3)
          {
            if (v14 != a2)
            {
              int64_t v111 = (unint64_t)(v16 - 2) >> 1;
              int64_t v112 = v111;
              do
              {
                if (v111 >= v112)
                {
                  uint64_t v114 = (2 * v112) | 1;
                  uint64_t v115 = (unint64_t *)(v14 + 24 * v114);
                  unint64_t v116 = *v115;
                  if (2 * v112 + 2 < v16)
                  {
                    unint64_t v117 = v115[3];
                    BOOL v118 = v116 >= v117;
                    if (v116 <= v117) {
                      unint64_t v116 = v115[3];
                    }
                    if (!v118)
                    {
                      v115 += 3;
                      uint64_t v114 = 2 * v112 + 2;
                    }
                  }
                  __n128 v119 = (unint64_t *)(v14 + 24 * v112);
                  unint64_t v120 = *v119;
                  if (v116 >= *v119)
                  {
                    long long v173 = *(_OWORD *)(v119 + 1);
                    while (1)
                    {
                      __n128 v124 = v119;
                      __n128 v119 = v115;
                      long long v125 = *(_OWORD *)v115;
                      v124[2] = v115[2];
                      *(_OWORD *)__n128 v124 = v125;
                      if (v111 < v114) {
                        break;
                      }
                      uint64_t v126 = (2 * v114) | 1;
                      uint64_t v115 = (unint64_t *)(v14 + 24 * v126);
                      uint64_t v114 = 2 * v114 + 2;
                      unint64_t v123 = *v115;
                      if (v114 < v16)
                      {
                        unint64_t v121 = v115[3];
                        BOOL v122 = v123 >= v121;
                        if (v123 <= v121) {
                          unint64_t v123 = v115[3];
                        }
                        if (v122) {
                          uint64_t v114 = v126;
                        }
                        else {
                          v115 += 3;
                        }
                        if (v123 < v120) {
                          break;
                        }
                      }
                      else
                      {
                        uint64_t v114 = v126;
                        if (v123 < v120) {
                          break;
                        }
                      }
                    }
                    *__n128 v119 = v120;
                    *(_OWORD *)(v119 + 1) = v173;
                  }
                }
                BOOL v113 = v112-- <= 0;
              }
              while (!v113);
              int64_t v133 = v15 / 0x18uLL;
              do
              {
                uint64_t v134 = 0;
                uint64_t v201 = *(void *)(v14 + 16);
                __n128 v176 = *(__n128 *)v14;
                unint64_t v135 = v14;
                do
                {
                  uint64_t v137 = v135 + 24 * v134 + 24;
                  uint64_t v138 = (2 * v134) | 1;
                  uint64_t v139 = 2 * v134 + 2;
                  if (v139 < v133 && *(void *)v137 < *(void *)(v137 + 24))
                  {
                    v137 += 24;
                    uint64_t v138 = v139;
                  }
                  long long v136 = *(_OWORD *)v137;
                  *(void *)(v135 + 16) = *(void *)(v137 + 16);
                  *(_OWORD *)unint64_t v135 = v136;
                  unint64_t v135 = v137;
                  uint64_t v134 = v138;
                }
                while (v138 <= (uint64_t)((unint64_t)(v133 - 2) >> 1));
                a2 -= 24;
                if (v137 == a2)
                {
                  __n128 result = v176;
                  *(void *)(v137 + 16) = v201;
                  *(__n128 *)uint64_t v137 = v176;
                }
                else
                {
                  __n128 v140 = *(__n128 *)a2;
                  *(void *)(v137 + 16) = *(void *)(a2 + 16);
                  *(__n128 *)uint64_t v137 = v140;
                  __n128 result = v176;
                  *(void *)(a2 + 16) = v201;
                  *(__n128 *)a2 = v176;
                  uint64_t v141 = v137 - v14 + 24;
                  if (v141 >= 25)
                  {
                    unint64_t v142 = (v141 / 0x18uLL - 2) >> 1;
                    uint64_t v143 = v14 + 24 * v142;
                    unint64_t v144 = *(void *)v137;
                    if (*(void *)v143 < *(void *)v137)
                    {
                      __n128 v207 = *(__n128 *)(v137 + 8);
                      do
                      {
                        uint64_t v145 = v137;
                        uint64_t v137 = v143;
                        long long v146 = *(_OWORD *)v143;
                        *(void *)(v145 + 16) = *(void *)(v143 + 16);
                        *(_OWORD *)uint64_t v145 = v146;
                        if (!v142) {
                          break;
                        }
                        unint64_t v142 = (v142 - 1) >> 1;
                        uint64_t v143 = v14 + 24 * v142;
                      }
                      while (*(void *)v143 < v144);
                      *(void *)uint64_t v137 = v144;
                      __n128 result = v207;
                      *(__n128 *)(v137 + 8) = v207;
                    }
                  }
                }
                BOOL v113 = v133-- <= 2;
              }
              while (!v113);
            }
            return result;
          }
          unint64_t v17 = (unint64_t)v16 >> 1;
          uint64_t v18 = (unint64_t *)(v14 + 24 * ((unint64_t)v16 >> 1));
          unint64_t v19 = *v11;
          if ((unint64_t)v15 >= 0xC01)
          {
            unint64_t v20 = *v18;
            if (*v18 >= *(void *)v14)
            {
              if (v19 < v20)
              {
                unint64_t v182 = v18[2];
                __n128 v154 = *(__n128 *)v18;
                __n128 v24 = *(__n128 *)v11;
                v18[2] = *(void *)(a2 - 8);
                *(__n128 *)uint64_t v18 = v24;
                *(void *)(a2 - 8) = v182;
                *(__n128 *)unsigned int v11 = v154;
                if (*v18 < *(void *)v14)
                {
                  unint64_t v183 = *(void *)(v14 + 16);
                  __n128 v155 = *(__n128 *)v14;
                  __n128 v25 = *(__n128 *)v18;
                  *(void *)(v14 + 16) = v18[2];
                  *(__n128 *)unint64_t v14 = v25;
                  v18[2] = v183;
                  *(__n128 *)uint64_t v18 = v155;
                }
              }
            }
            else
            {
              if (v19 >= v20)
              {
                unint64_t v186 = *(void *)(v14 + 16);
                __n128 v158 = *(__n128 *)v14;
                __n128 v28 = *(__n128 *)v18;
                *(void *)(v14 + 16) = v18[2];
                *(__n128 *)unint64_t v14 = v28;
                v18[2] = v186;
                *(__n128 *)uint64_t v18 = v158;
                if (*v11 >= *v18) {
                  goto LABEL_22;
                }
                unint64_t v180 = v18[2];
                __n128 v152 = *(__n128 *)v18;
                __n128 v29 = *(__n128 *)v11;
                v18[2] = *(void *)(a2 - 8);
                *(__n128 *)uint64_t v18 = v29;
              }
              else
              {
                unint64_t v180 = *(void *)(v14 + 16);
                __n128 v152 = *(__n128 *)v14;
                __n128 v21 = *(__n128 *)v11;
                *(void *)(v14 + 16) = *(void *)(a2 - 8);
                *(__n128 *)unint64_t v14 = v21;
              }
              *(void *)(a2 - 8) = v180;
              *(__n128 *)unsigned int v11 = v152;
            }
LABEL_22:
            uint64_t v30 = (long long *)(v14 + 24);
            unint64_t v31 = v14 + 24 * v17;
            unint64_t v34 = *(void *)(v31 - 24);
            unint64_t v32 = v31 - 24;
            unint64_t v33 = v34;
            unint64_t v35 = *v12;
            if (v34 >= *(void *)(v14 + 24))
            {
              if (v35 < v33)
              {
                uint64_t v187 = *(void *)(v32 + 16);
                long long v159 = *(_OWORD *)v32;
                long long v39 = *(_OWORD *)v12;
                *(void *)(v32 + 16) = *(void *)(a2 - 32);
                *(_OWORD *)unint64_t v32 = v39;
                *(void *)(a2 - 32) = v187;
                *(_OWORD *)uint64_t v12 = v159;
                if (*(void *)v32 < *(void *)v30)
                {
                  long long v40 = *v30;
                  uint64_t v41 = *(void *)(v14 + 40);
                  uint64_t v42 = *(void *)(v32 + 16);
                  *uint64_t v30 = *(_OWORD *)v32;
                  *(void *)(v14 + 40) = v42;
                  *(void *)(v32 + 16) = v41;
                  *(_OWORD *)unint64_t v32 = v40;
                }
              }
            }
            else
            {
              if (v35 >= v33)
              {
                long long v45 = *v30;
                uint64_t v46 = *(void *)(v14 + 40);
                uint64_t v47 = *(void *)(v32 + 16);
                *uint64_t v30 = *(_OWORD *)v32;
                *(void *)(v14 + 40) = v47;
                *(void *)(v32 + 16) = v46;
                *(_OWORD *)unint64_t v32 = v45;
                if (*v12 >= *(void *)v32) {
                  goto LABEL_34;
                }
                uint64_t v189 = *(void *)(v32 + 16);
                long long v161 = *(_OWORD *)v32;
                long long v48 = *(_OWORD *)v12;
                *(void *)(v32 + 16) = *(void *)(a2 - 32);
                *(_OWORD *)unint64_t v32 = v48;
                long long v36 = v161;
                *(void *)(a2 - 32) = v189;
              }
              else
              {
                long long v36 = *v30;
                uint64_t v37 = *(void *)(v14 + 40);
                uint64_t v38 = *(void *)(a2 - 32);
                *uint64_t v30 = *(_OWORD *)v12;
                *(void *)(v14 + 40) = v38;
                *(void *)(a2 - 32) = v37;
              }
              *(_OWORD *)uint64_t v12 = v36;
            }
LABEL_34:
            unsigned int v49 = (long long *)(v14 + 48);
            unint64_t v50 = v14 + 24 * v17;
            unint64_t v53 = *(void *)(v50 + 24);
            unint64_t v51 = v50 + 24;
            unint64_t v52 = v53;
            unint64_t v54 = *v13;
            if (v53 >= *(void *)(v14 + 48))
            {
              if (v54 < v52)
              {
                uint64_t v190 = *(void *)(v51 + 16);
                long long v162 = *(_OWORD *)v51;
                long long v58 = *(_OWORD *)v13;
                *(void *)(v51 + 16) = *(void *)(a2 - 56);
                *(_OWORD *)unint64_t v51 = v58;
                *(void *)(a2 - 56) = v190;
                *(_OWORD *)unsigned int v13 = v162;
                if (*(void *)v51 < *(void *)v49)
                {
                  long long v59 = *v49;
                  uint64_t v60 = *(void *)(v14 + 64);
                  uint64_t v61 = *(void *)(v51 + 16);
                  *unsigned int v49 = *(_OWORD *)v51;
                  *(void *)(v14 + 64) = v61;
                  *(void *)(v51 + 16) = v60;
                  *(_OWORD *)unint64_t v51 = v59;
                }
              }
            }
            else
            {
              if (v54 >= v52)
              {
                long long v62 = *v49;
                uint64_t v63 = *(void *)(v14 + 64);
                uint64_t v64 = *(void *)(v51 + 16);
                *unsigned int v49 = *(_OWORD *)v51;
                *(void *)(v14 + 64) = v64;
                *(void *)(v51 + 16) = v63;
                *(_OWORD *)unint64_t v51 = v62;
                if (*v13 >= *(void *)v51) {
                  goto LABEL_43;
                }
                uint64_t v191 = *(void *)(v51 + 16);
                long long v163 = *(_OWORD *)v51;
                long long v65 = *(_OWORD *)v13;
                *(void *)(v51 + 16) = *(void *)(a2 - 56);
                *(_OWORD *)unint64_t v51 = v65;
                long long v55 = v163;
                *(void *)(a2 - 56) = v191;
              }
              else
              {
                long long v55 = *v49;
                uint64_t v56 = *(void *)(v14 + 64);
                uint64_t v57 = *(void *)(a2 - 56);
                *unsigned int v49 = *(_OWORD *)v13;
                *(void *)(v14 + 64) = v57;
                *(void *)(a2 - 56) = v56;
              }
              *(_OWORD *)unsigned int v13 = v55;
            }
LABEL_43:
            unint64_t v66 = *v18;
            unint64_t v67 = *(void *)v51;
            if (*v18 >= *(void *)v32)
            {
              if (v67 < v66)
              {
                unint64_t v193 = v18[2];
                __n128 v165 = *(__n128 *)v18;
                *(_OWORD *)uint64_t v18 = *(_OWORD *)v51;
                v18[2] = *(void *)(v51 + 16);
                *(void *)(v51 + 16) = v193;
                *(__n128 *)unint64_t v51 = v165;
                if (*v18 < *(void *)v32)
                {
                  unint64_t v194 = *(void *)(v32 + 16);
                  long long v166 = *(_OWORD *)v32;
                  *(_OWORD *)unint64_t v32 = *(_OWORD *)v18;
                  *(void *)(v32 + 16) = v18[2];
                  v18[2] = v194;
                  *(_OWORD *)uint64_t v18 = v166;
                }
              }
              goto LABEL_52;
            }
            if (v67 >= v66)
            {
              unint64_t v195 = *(void *)(v32 + 16);
              long long v167 = *(_OWORD *)v32;
              *(_OWORD *)unint64_t v32 = *(_OWORD *)v18;
              *(void *)(v32 + 16) = v18[2];
              v18[2] = v195;
              *(_OWORD *)uint64_t v18 = v167;
              if (*(void *)v51 >= *v18)
              {
LABEL_52:
                unint64_t v196 = *(void *)(v14 + 16);
                __n128 v168 = *(__n128 *)v14;
                __n128 v68 = *(__n128 *)v18;
                *(void *)(v14 + 16) = v18[2];
                *(__n128 *)unint64_t v14 = v68;
                v18[2] = v196;
                *(__n128 *)uint64_t v18 = v168;
                goto LABEL_53;
              }
              unint64_t v192 = v18[2];
              long long v164 = *(_OWORD *)v18;
              *(_OWORD *)uint64_t v18 = *(_OWORD *)v51;
              v18[2] = *(void *)(v51 + 16);
            }
            else
            {
              unint64_t v192 = *(void *)(v32 + 16);
              long long v164 = *(_OWORD *)v32;
              *(_OWORD *)unint64_t v32 = *(_OWORD *)v51;
              *(void *)(v32 + 16) = *(void *)(v51 + 16);
            }
            *(void *)(v51 + 16) = v192;
            *(_OWORD *)unint64_t v51 = v164;
            goto LABEL_52;
          }
          unint64_t v22 = *(void *)v14;
          if (*(void *)v14 >= *v18)
          {
            if (v19 < v22)
            {
              uint64_t v184 = *(void *)(v14 + 16);
              __n128 v156 = *(__n128 *)v14;
              __n128 v26 = *(__n128 *)v11;
              *(void *)(v14 + 16) = *(void *)(a2 - 8);
              *(__n128 *)unint64_t v14 = v26;
              *(void *)(a2 - 8) = v184;
              *(__n128 *)unsigned int v11 = v156;
              if (*(void *)v14 < *v18)
              {
                unint64_t v185 = v18[2];
                __n128 v157 = *(__n128 *)v18;
                __n128 v27 = *(__n128 *)v14;
                v18[2] = *(void *)(v14 + 16);
                *(__n128 *)uint64_t v18 = v27;
                *(void *)(v14 + 16) = v185;
                *(__n128 *)unint64_t v14 = v157;
              }
            }
          }
          else
          {
            if (v19 < v22)
            {
              unint64_t v181 = v18[2];
              __n128 v153 = *(__n128 *)v18;
              __n128 v23 = *(__n128 *)v11;
              v18[2] = *(void *)(a2 - 8);
              *(__n128 *)uint64_t v18 = v23;
LABEL_30:
              *(void *)(a2 - 8) = v181;
              *(__n128 *)unsigned int v11 = v153;
              goto LABEL_53;
            }
            unint64_t v188 = v18[2];
            __n128 v160 = *(__n128 *)v18;
            __n128 v43 = *(__n128 *)v14;
            v18[2] = *(void *)(v14 + 16);
            *(__n128 *)uint64_t v18 = v43;
            *(void *)(v14 + 16) = v188;
            *(__n128 *)unint64_t v14 = v160;
            if (*v11 < *(void *)v14)
            {
              unint64_t v181 = *(void *)(v14 + 16);
              __n128 v153 = *(__n128 *)v14;
              __n128 v44 = *(__n128 *)v11;
              *(void *)(v14 + 16) = *(void *)(a2 - 8);
              *(__n128 *)unint64_t v14 = v44;
              goto LABEL_30;
            }
          }
LABEL_53:
          --a3;
          unint64_t v69 = *(void *)v14;
          if ((a4 & 1) != 0 || *(void *)(v14 - 24) < v69) {
            break;
          }
          __n128 v206 = *(__n128 *)(v14 + 8);
          if (v69 < *v11)
          {
            do
            {
              unint64_t v85 = *(void *)(v14 + 24);
              v14 += 24;
            }
            while (v69 >= v85);
          }
          else
          {
            unint64_t v86 = v14 + 24;
            do
            {
              unint64_t v14 = v86;
              if (v86 >= a2) {
                break;
              }
              v86 += 24;
            }
            while (v69 >= *(void *)v14);
          }
          unint64_t v87 = a2;
          if (v14 < a2)
          {
            unint64_t v87 = a2;
            do
            {
              unint64_t v88 = *(void *)(v87 - 24);
              v87 -= 24;
            }
            while (v69 < v88);
          }
          while (v14 < v87)
          {
            uint64_t v197 = *(void *)(v14 + 16);
            __n128 v169 = *(__n128 *)v14;
            __n128 v89 = *(__n128 *)v87;
            *(void *)(v14 + 16) = *(void *)(v87 + 16);
            *(__n128 *)unint64_t v14 = v89;
            *(void *)(v87 + 16) = v197;
            *(__n128 *)unint64_t v87 = v169;
            do
            {
              unint64_t v90 = *(void *)(v14 + 24);
              v14 += 24;
            }
            while (v69 >= v90);
            do
            {
              unint64_t v91 = *(void *)(v87 - 24);
              v87 -= 24;
            }
            while (v69 < v91);
          }
          BOOL v5 = v14 - 24 >= a1;
          BOOL v6 = v14 - 24 == a1;
          if (v14 - 24 != a1)
          {
            long long v92 = *(_OWORD *)(v14 - 24);
            *(void *)(a1 + 16) = *(void *)(v14 - 8);
            *(_OWORD *)a1 = v92;
          }
          a4 = 0;
          *(void *)(v14 - 24) = v69;
          __n128 result = v206;
          *(__n128 *)(v14 - 16) = v206;
        }
        __n128 v205 = *(__n128 *)(v14 + 8);
        unint64_t v70 = v14;
        do
        {
          unint64_t v71 = v70;
          unint64_t v72 = *(void *)(v70 + 24);
          v70 += 24;
        }
        while (v72 < v69);
        unint64_t v73 = a2;
        if (v71 == v14)
        {
          unint64_t v73 = a2;
          do
          {
            if (v70 >= v73) {
              break;
            }
            unint64_t v75 = *(void *)(v73 - 24);
            v73 -= 24;
          }
          while (v75 >= v69);
        }
        else
        {
          do
          {
            unint64_t v74 = *(void *)(v73 - 24);
            v73 -= 24;
          }
          while (v74 >= v69);
        }
        unint64_t v14 = v70;
        if (v70 < v73)
        {
          unint64_t v76 = v73;
          do
          {
            __n128 v77 = *(__n128 *)v14;
            uint64_t v78 = *(void *)(v14 + 16);
            uint64_t v79 = *(void *)(v76 + 16);
            *(_OWORD *)unint64_t v14 = *(_OWORD *)v76;
            *(void *)(v14 + 16) = v79;
            *(void *)(v76 + 16) = v78;
            *(__n128 *)unint64_t v76 = v77;
            do
            {
              unint64_t v80 = *(void *)(v14 + 24);
              v14 += 24;
            }
            while (v80 < v69);
            do
            {
              unint64_t v81 = *(void *)(v76 - 24);
              v76 -= 24;
            }
            while (v81 >= v69);
          }
          while (v14 < v76);
        }
        if (v14 - 24 != a1)
        {
          long long v82 = *(_OWORD *)(v14 - 24);
          *(void *)(a1 + 16) = *(void *)(v14 - 8);
          *(_OWORD *)a1 = v82;
        }
        *(void *)(v14 - 24) = v69;
        *(__n128 *)(v14 - 16) = v205;
        if (v70 >= v73) {
          break;
        }
LABEL_74:
        std::__introsort<std::_ClassicAlgPolicy,AGX::BlitContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::copyTextureToTexture(AGXG17FamilyTexture *,unsigned int,unsigned int,AGXG17FamilyTexture *,unsigned int,unsigned int,unsigned int,unsigned int)::{lambda(AGX::BlitContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::CopyRange,AGX::BlitContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::CopyRange)#1} &,AGX::BlitContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::CopyRange*,false>(a1, v14 - 24, a3, a4 & 1);
        a4 = 0;
      }
      BOOL v83 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,AGX::BlitContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::copyTextureToTexture(AGXG17FamilyTexture *,unsigned int,unsigned int,AGXG17FamilyTexture *,unsigned int,unsigned int,unsigned int,unsigned int)::{lambda(AGX::BlitContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::CopyRange,AGX::BlitContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::CopyRange)#1} &,AGX::BlitContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::CopyRange*>(a1, (_OWORD *)(v14 - 24), v205);
      if (std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,AGX::BlitContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::copyTextureToTexture(AGXG17FamilyTexture *,unsigned int,unsigned int,AGXG17FamilyTexture *,unsigned int,unsigned int,unsigned int,unsigned int)::{lambda(AGX::BlitContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::CopyRange,AGX::BlitContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::CopyRange)#1} &,AGX::BlitContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::CopyRange*>(v14, (_OWORD *)a2, v84))
      {
        break;
      }
      if (!v83) {
        goto LABEL_74;
      }
    }
    a2 = v14 - 24;
    if (!v83) {
      continue;
    }
    return result;
  }
}

void ___ZN3AGX11BlitContextINS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE20copyTextureToTextureEP19AGXG17FamilyTexturejjS7_jjjj_block_invoke_3_196(uint64_t *a1, void *a2)
{
}

__n128 std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,AGX::BlitContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::copyTextureToTexture(AGXG17FamilyTexture *,unsigned int,unsigned int,AGXG17FamilyTexture *,unsigned int,unsigned int,unsigned int,unsigned int)::{lambda(AGX::BlitContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::CopyRange,AGX::BlitContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::CopyRange)#1} &,AGX::BlitContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::CopyRange*>(__n128 *a1, __n128 *a2, unint64_t *a3, uint64_t a4, uint64_t a5, __n128 result)
{
  unint64_t v6 = a2->n128_u64[0];
  unint64_t v7 = *a3;
  if (a2->n128_u64[0] >= a1->n128_u64[0])
  {
    if (v7 < v6)
    {
      uint64_t v10 = a2[1].n128_i64[0];
      __n128 result = *a2;
      unint64_t v11 = a3[2];
      *a2 = *(__n128 *)a3;
      a2[1].n128_u64[0] = v11;
      *(__n128 *)a3 = result;
      a3[2] = v10;
      if (a2->n128_u64[0] < a1->n128_u64[0])
      {
        unint64_t v12 = a1[1].n128_u64[0];
        __n128 result = *a1;
        unint64_t v13 = a2[1].n128_u64[0];
        *a1 = *a2;
        a1[1].n128_u64[0] = v13;
        *a2 = result;
        a2[1].n128_u64[0] = v12;
      }
    }
  }
  else
  {
    if (v7 < v6)
    {
      unint64_t v8 = a1[1].n128_u64[0];
      __n128 result = *a1;
      unint64_t v9 = a3[2];
      *a1 = *(__n128 *)a3;
      a1[1].n128_u64[0] = v9;
LABEL_9:
      *(__n128 *)a3 = result;
      a3[2] = v8;
      goto LABEL_10;
    }
    unint64_t v14 = a1[1].n128_u64[0];
    __n128 result = *a1;
    unint64_t v15 = a2[1].n128_u64[0];
    *a1 = *a2;
    a1[1].n128_u64[0] = v15;
    *a2 = result;
    a2[1].n128_u64[0] = v14;
    if (*a3 < a2->n128_u64[0])
    {
      unint64_t v8 = a2[1].n128_u64[0];
      __n128 result = *a2;
      unint64_t v16 = a3[2];
      *a2 = *(__n128 *)a3;
      a2[1].n128_u64[0] = v16;
      goto LABEL_9;
    }
  }
LABEL_10:
  if (*(void *)a4 < *a3)
  {
    unint64_t v17 = a3[2];
    __n128 result = *(__n128 *)a3;
    unint64_t v18 = *(void *)(a4 + 16);
    *(_OWORD *)a3 = *(_OWORD *)a4;
    a3[2] = v18;
    *(__n128 *)a4 = result;
    *(void *)(a4 + 16) = v17;
    if (*a3 < a2->n128_u64[0])
    {
      uint64_t v19 = a2[1].n128_i64[0];
      __n128 result = *a2;
      unint64_t v20 = a3[2];
      *a2 = *(__n128 *)a3;
      a2[1].n128_u64[0] = v20;
      *(__n128 *)a3 = result;
      a3[2] = v19;
      if (a2->n128_u64[0] < a1->n128_u64[0])
      {
        unint64_t v21 = a1[1].n128_u64[0];
        __n128 result = *a1;
        unint64_t v22 = a2[1].n128_u64[0];
        *a1 = *a2;
        a1[1].n128_u64[0] = v22;
        *a2 = result;
        a2[1].n128_u64[0] = v21;
      }
    }
  }
  if (*(void *)a5 < *(void *)a4)
  {
    uint64_t v23 = *(void *)(a4 + 16);
    __n128 result = *(__n128 *)a4;
    uint64_t v24 = *(void *)(a5 + 16);
    *(_OWORD *)a4 = *(_OWORD *)a5;
    *(void *)(a4 + 16) = v24;
    *(__n128 *)a5 = result;
    *(void *)(a5 + 16) = v23;
    if (*(void *)a4 < *a3)
    {
      unint64_t v25 = a3[2];
      __n128 result = *(__n128 *)a3;
      unint64_t v26 = *(void *)(a4 + 16);
      *(_OWORD *)a3 = *(_OWORD *)a4;
      a3[2] = v26;
      *(__n128 *)a4 = result;
      *(void *)(a4 + 16) = v25;
      if (*a3 < a2->n128_u64[0])
      {
        uint64_t v27 = a2[1].n128_i64[0];
        __n128 result = *a2;
        unint64_t v28 = a3[2];
        *a2 = *(__n128 *)a3;
        a2[1].n128_u64[0] = v28;
        *(__n128 *)a3 = result;
        a3[2] = v27;
        if (a2->n128_u64[0] < a1->n128_u64[0])
        {
          unint64_t v29 = a1[1].n128_u64[0];
          __n128 result = *a1;
          unint64_t v30 = a2[1].n128_u64[0];
          *a1 = *a2;
          a1[1].n128_u64[0] = v30;
          *a2 = result;
          a2[1].n128_u64[0] = v29;
        }
      }
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,AGX::BlitContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::copyTextureToTexture(AGXG17FamilyTexture *,unsigned int,unsigned int,AGXG17FamilyTexture *,unsigned int,unsigned int,unsigned int,unsigned int)::{lambda(AGX::BlitContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::CopyRange,AGX::BlitContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::CopyRange)#1} &,AGX::BlitContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::CopyRange*>(uint64_t a1, _OWORD *a2, __n128 a3)
{
  uint64_t v3 = 1;
  switch(0xAAAAAAAAAAAAAAABLL * (((uint64_t)a2 - a1) >> 3))
  {
    case 0uLL:
    case 1uLL:
      return v3;
    case 2uLL:
      unint64_t v5 = *((void *)a2 - 3);
      uint64_t v4 = (uint64_t)a2 - 24;
      if (v5 < *(void *)a1) {
        goto LABEL_9;
      }
      return 1;
    case 3uLL:
      uint64_t v13 = a1 + 24;
      unint64_t v14 = *(void *)(a1 + 24);
      unint64_t v16 = *((void *)a2 - 3);
      uint64_t v4 = (uint64_t)a2 - 24;
      unint64_t v15 = v16;
      if (v14 < *(void *)a1)
      {
        if (v15 >= v14)
        {
          uint64_t v49 = *(void *)(a1 + 16);
          __n128 v50 = *(__n128 *)a1;
          *(_OWORD *)a1 = *(_OWORD *)v13;
          *(void *)(a1 + 16) = *(void *)(a1 + 40);
          *(__n128 *)uint64_t v13 = v50;
          *(void *)(a1 + 40) = v49;
          if (*(void *)v4 < *(void *)(a1 + 24))
          {
            uint64_t v51 = *(void *)(a1 + 40);
            long long v52 = *(_OWORD *)v13;
            uint64_t v53 = *(void *)(v4 + 16);
            *(_OWORD *)uint64_t v13 = *(_OWORD *)v4;
            *(void *)(a1 + 40) = v53;
            *(_OWORD *)uint64_t v4 = v52;
            *(void *)(v4 + 16) = v51;
          }
        }
        else
        {
LABEL_9:
          uint64_t v17 = *(void *)(a1 + 16);
          __n128 v18 = *(__n128 *)a1;
          uint64_t v19 = *(void *)(v4 + 16);
          *(_OWORD *)a1 = *(_OWORD *)v4;
          *(void *)(a1 + 16) = v19;
          *(__n128 *)uint64_t v4 = v18;
          *(void *)(v4 + 16) = v17;
        }
        return 1;
      }
      if (v15 >= v14) {
        return 1;
      }
      uint64_t v31 = *(void *)(a1 + 40);
      long long v32 = *(_OWORD *)v13;
      uint64_t v33 = *(void *)(v4 + 16);
      *(_OWORD *)uint64_t v13 = *(_OWORD *)v4;
      *(void *)(a1 + 40) = v33;
      *(_OWORD *)uint64_t v4 = v32;
      *(void *)(v4 + 16) = v31;
      goto LABEL_42;
    case 4uLL:
      uint64_t v13 = a1 + 24;
      unint64_t v20 = *(void *)(a1 + 24);
      unint64_t v21 = (__n128 *)(a1 + 48);
      unint64_t v22 = *(void *)(a1 + 48);
      uint64_t v23 = (__n128 *)((char *)a2 - 24);
      unint64_t v24 = *(void *)a1;
      if (v20 >= *(void *)a1)
      {
        if (v22 < v20)
        {
          uint64_t v34 = *(void *)(a1 + 40);
          __n128 v35 = *(__n128 *)v13;
          *(__n128 *)uint64_t v13 = *v21;
          *(void *)(a1 + 40) = *(void *)(a1 + 64);
          *unint64_t v21 = v35;
          *(void *)(a1 + 64) = v34;
          if (*(void *)v13 < v24)
          {
            uint64_t v36 = *(void *)(a1 + 16);
            __n128 v37 = *(__n128 *)a1;
            *(_OWORD *)a1 = *(_OWORD *)v13;
            *(void *)(a1 + 16) = *(void *)(a1 + 40);
            *(__n128 *)uint64_t v13 = v37;
            *(void *)(a1 + 40) = v36;
          }
        }
      }
      else
      {
        if (v22 >= v20)
        {
          uint64_t v54 = *(void *)(a1 + 16);
          __n128 v55 = *(__n128 *)a1;
          *(_OWORD *)a1 = *(_OWORD *)v13;
          *(void *)(a1 + 16) = *(void *)(a1 + 40);
          *(__n128 *)uint64_t v13 = v55;
          *(void *)(a1 + 40) = v54;
          if (v22 >= *(void *)(a1 + 24)) {
            goto LABEL_39;
          }
          uint64_t v25 = *(void *)(a1 + 40);
          __n128 v26 = *(__n128 *)v13;
          *(__n128 *)uint64_t v13 = *v21;
          *(void *)(a1 + 40) = *(void *)(a1 + 64);
        }
        else
        {
          uint64_t v25 = *(void *)(a1 + 16);
          __n128 v26 = *(__n128 *)a1;
          *(__n128 *)a1 = *v21;
          *(void *)(a1 + 16) = *(void *)(a1 + 64);
        }
        *unint64_t v21 = v26;
        *(void *)(a1 + 64) = v25;
      }
LABEL_39:
      if (v23->n128_u64[0] < v21->n128_u64[0])
      {
        uint64_t v56 = *(void *)(a1 + 64);
        __n128 v57 = *v21;
        uint64_t v58 = *((void *)a2 - 1);
        *unint64_t v21 = *v23;
        *(void *)(a1 + 64) = v58;
        __n128 *v23 = v57;
        *((void *)a2 - 1) = v56;
        if (v21->n128_u64[0] < *(void *)v13)
        {
          uint64_t v59 = *(void *)(a1 + 40);
          __n128 v60 = *(__n128 *)v13;
          *(__n128 *)uint64_t v13 = *v21;
          *(void *)(a1 + 40) = *(void *)(a1 + 64);
          *unint64_t v21 = v60;
          *(void *)(a1 + 64) = v59;
LABEL_42:
          if (*(void *)(a1 + 24) < *(void *)a1)
          {
            uint64_t v61 = *(void *)(a1 + 16);
            __n128 v62 = *(__n128 *)a1;
            *(_OWORD *)a1 = *(_OWORD *)v13;
            *(void *)(a1 + 16) = *(void *)(v13 + 16);
            *(__n128 *)uint64_t v13 = v62;
            *(void *)(v13 + 16) = v61;
          }
        }
      }
      return 1;
    case 5uLL:
      std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,AGX::BlitContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::copyTextureToTexture(AGXG17FamilyTexture *,unsigned int,unsigned int,AGXG17FamilyTexture *,unsigned int,unsigned int,unsigned int,unsigned int)::{lambda(AGX::BlitContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::CopyRange,AGX::BlitContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::CopyRange)#1} &,AGX::BlitContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::CopyRange*>((__n128 *)a1, (__n128 *)(a1 + 24), (unint64_t *)(a1 + 48), a1 + 72, (uint64_t)a2 - 24, a3);
      return 1;
    default:
      unint64_t v6 = (__n128 *)(a1 + 48);
      unint64_t v7 = *(void *)(a1 + 48);
      unint64_t v8 = (__n128 *)(a1 + 24);
      unint64_t v9 = *(void *)(a1 + 24);
      unint64_t v10 = *(void *)a1;
      if (v9 >= *(void *)a1)
      {
        if (v7 < v9)
        {
          uint64_t v27 = *(void *)(a1 + 40);
          __n128 v28 = *v8;
          __n128 *v8 = *v6;
          *(void *)(a1 + 40) = *(void *)(a1 + 64);
          *unint64_t v6 = v28;
          *(void *)(a1 + 64) = v27;
          if (v8->n128_u64[0] < v10)
          {
            uint64_t v29 = *(void *)(a1 + 16);
            __n128 v30 = *(__n128 *)a1;
            *(__n128 *)a1 = *v8;
            *(void *)(a1 + 16) = *(void *)(a1 + 40);
            __n128 *v8 = v30;
            *(void *)(a1 + 40) = v29;
          }
        }
      }
      else if (v7 >= v9)
      {
        uint64_t v38 = *(void *)(a1 + 16);
        __n128 v39 = *(__n128 *)a1;
        *(__n128 *)a1 = *v8;
        *(void *)(a1 + 16) = *(void *)(a1 + 40);
        __n128 *v8 = v39;
        *(void *)(a1 + 40) = v38;
        if (v7 < *(void *)(a1 + 24))
        {
          uint64_t v40 = *(void *)(a1 + 40);
          __n128 v41 = *v8;
          __n128 *v8 = *v6;
          *(void *)(a1 + 40) = *(void *)(a1 + 64);
          *unint64_t v6 = v41;
          *(void *)(a1 + 64) = v40;
        }
      }
      else
      {
        uint64_t v11 = *(void *)(a1 + 16);
        __n128 v12 = *(__n128 *)a1;
        *(__n128 *)a1 = *v6;
        *(void *)(a1 + 16) = *(void *)(a1 + 64);
        *unint64_t v6 = v12;
        *(void *)(a1 + 64) = v11;
      }
      uint64_t v42 = (_OWORD *)(a1 + 72);
      if ((_OWORD *)(a1 + 72) == a2) {
        return 1;
      }
      uint64_t v43 = 0;
      int v44 = 0;
      break;
  }
  while (1)
  {
    unint64_t v46 = *(void *)v42;
    if (*(void *)v42 < v6->n128_u64[0])
    {
      long long v64 = *(_OWORD *)((char *)v42 + 8);
      uint64_t v47 = v43;
      do
      {
        uint64_t v48 = a1 + v47;
        *(_OWORD *)(v48 + 72) = *(_OWORD *)(a1 + v47 + 48);
        *(void *)(v48 + 88) = *(void *)(a1 + v47 + 64);
        if (v47 == -48)
        {
          uint64_t v45 = a1;
          goto LABEL_27;
        }
        v47 -= 24;
      }
      while (v46 < *(void *)(v48 + 24));
      uint64_t v45 = a1 + v47 + 72;
LABEL_27:
      *(void *)uint64_t v45 = v46;
      *(_OWORD *)(v45 + 8) = v64;
      if (++v44 == 8) {
        return (_OWORD *)((char *)v42 + 24) == a2;
      }
    }
    unint64_t v6 = (__n128 *)v42;
    v43 += 24;
    uint64_t v42 = (_OWORD *)((char *)v42 + 24);
    if (v42 == a2) {
      return 1;
    }
  }
}

void AGX::BlitContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::copyTextureToTextureImpl(void *a1, uint64_t a2, unsigned int a3, unsigned int a4, unsigned int a5, int64x2_t *a6, uint64_t a7, unsigned int a8, unsigned int a9, unsigned int a10, int64x2_t *a11, int64x2_t *a12)
{
  uint64_t v114 = *MEMORY[0x263EF8340];
  uint64_t v14 = *(void *)(a7 + 536);
  uint64_t v15 = *(void *)(a2 + 536);
  int v109 = 0;
  uint64_t v16 = *(void *)(v14 + 488);
  if (v16 && *(_DWORD *)(v16 + 1080)) {
    goto LABEL_70;
  }
  uint64_t v17 = *(void *)(v15 + 488);
  if (!v17 || !*(_DWORD *)(v17 + 1080))
  {
    int v18 = 0;
    goto LABEL_16;
  }
  if (v16)
  {
LABEL_70:
    if (*(_DWORD *)(v16 + 1080) > a10 && *(unsigned char *)(v14 + 57))
    {
      int v18 = 2;
      goto LABEL_16;
    }
  }
  uint64_t v19 = *(void *)(v15 + 488);
  if (v19)
  {
    int v18 = 1;
    if (*(_DWORD *)(v19 + 1080) > a5)
    {
      if (*(unsigned char *)(v15 + 57)) {
        int v18 = 2;
      }
      else {
        int v18 = 1;
      }
    }
  }
  else
  {
    int v18 = 1;
  }
LABEL_16:
  uint64_t v20 = *(void *)(v15 + 208) + a3;
  unsigned int v22 = *(unsigned __int8 *)(v20 + 88);
  unint64_t v21 = (unsigned __int8 *)(v20 + 88);
  unsigned int v23 = *(_DWORD *)(v15 + 112);
  uint64_t TextureViewFormat = AGX::BlitContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::getTextureViewFormat(v22, v23, *(void *)(v15 + 32), a3, v18, 0);
  unint64_t v82 = HIDWORD(v25);
  uint64_t v83 = TextureViewFormat;
  uint64_t v26 = 4;
  if (HIDWORD(v25) < 2) {
    uint64_t v26 = 2;
  }
  uint64_t v112 = a2;
  uint64_t v110 = a7;
  long long v113 = *(_OWORD *)(v15 + 496);
  long long v111 = *(_OWORD *)(v14 + 496);
  unint64_t v27 = *(void *)(v14 + 24);
  if (v27 <= 9)
  {
    if (((1 << v27) & 0x17C) != 0)
    {
LABEL_22:
      a12[1].i64[0] = 1;
      goto LABEL_23;
    }
    if (((1 << v27) & 3) != 0)
    {
      a12->i64[1] = 1;
      goto LABEL_22;
    }
    if (v27 == 9)
    {
      unint64_t v60 = *(unsigned int *)(v14 + 112) * (unint64_t)*(unsigned __int8 *)(*(void *)(v14 + 208) + a8 + 88);
      uint64_t v61 = v60 * a11->i64[0];
      unint64_t v62 = a12->i64[0] * v60;
      int64x2_t v107 = *a6;
      uint64_t v108 = a6[1].i64[0];
      int64x2_t v105 = *a12;
      uint64_t v106 = a12[1].i64[0];
      AGX::BlitContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::copyBufferToTexture((uint64_t)a1, a2, a4, a5, &v107, &v105, a7, v61, v62, v62, 0);
      return;
    }
  }
LABEL_23:
  unint64_t v28 = *(void *)(v15 + 24);
  if (v28 <= 9)
  {
    if (((1 << v28) & 0x17C) != 0)
    {
LABEL_27:
      a12[1].i64[0] = 1;
      goto LABEL_28;
    }
    if (((1 << v28) & 3) != 0)
    {
      a12->i64[1] = 1;
      goto LABEL_27;
    }
    if (v28 == 9)
    {
      unint64_t v63 = v23 * (unint64_t)*v21;
      uint64_t v64 = v63 * a6->i64[0];
      unint64_t v65 = a12->i64[0] * v63;
      int64x2_t v103 = *a11;
      uint64_t v104 = a11[1].i64[0];
      int64x2_t v101 = *a12;
      uint64_t v102 = a12[1].i64[0];
      AGX::BlitContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::copyTextureToBuffer(a1, a2, v64, v65, v65, a7, a9, a10, &v103, &v101, 0);
      return;
    }
  }
LABEL_28:
  if (v27 == 7) {
    uint64_t v29 = 7;
  }
  else {
    uint64_t v29 = v26;
  }
  if (v28 == 7) {
    uint64_t v26 = 7;
  }
  uint64_t v81 = v26;
  int32x2_t v30 = vmovn_s64(*a6);
  int32x2_t v31 = vmovn_s64(*a12);
  int32x2_t v32 = vmovn_s64(*a11);
  unsigned int v33 = *(_DWORD *)(v15 + 216);
  unsigned int v34 = *(_DWORD *)(v15 + 220);
  v99[0] = (v33 + v31.i32[0] - 1) / v33;
  v99[1] = (v34 + v31.i32[1] - 1) / v34;
  v99[2] = v30.i32[0] / v33;
  v99[3] = v30.i32[1] / v34;
  uint64_t v35 = a11[1].u32[0];
  __int32 v100 = a11[1].i32[0];
  uint64_t v36 = a6[1].u32[0];
  v99[4] = v32.i32[0] / v33;
  v99[5] = v32.i32[1] / v34;
  unsigned int v37 = a5;
  if (AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::blitTextureViewAllowed(v14, a10)&& AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::blitTextureViewAllowed(v15, a5))
  {
    AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::createTextureViewForBlit((uint64_t)v94, v14, v29, v83, *(void *)(v14 + 40), *(void *)(v14 + 56), *(_DWORD *)(v14 + 308), a9, a10, a8, v82, *(void *)(v14 + 152), *(void *)(v14 + 160), *(void *)(v14 + 168), *(_DWORD *)(v14 + 176), *(_DWORD *)(v14 + 180), *(void *)(v14 + 184), *(_DWORD *)(v14 + 236) != 0, 0);
    AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::createTextureViewForBlit((uint64_t)v89, v15, v81, v83, *(void *)(v15 + 40), *(void *)(v15 + 56), *(_DWORD *)(v14 + 308), a4, a5, a3, v82, *(void *)(v15 + 152), *(void *)(v15 + 160), *(void *)(v15 + 168), *(_DWORD *)(v15 + 176), *(_DWORD *)(v15 + 180), *(void *)(v15 + 184), *(_DWORD *)(v15 + 236) != 0, 0);
    if (a12[1].i64[0])
    {
      unsigned int v38 = 1;
      do
      {
        uint64_t v40 = v36 + v38 - 1;
        if (v15 && *(_DWORD *)(v15 + 112) > 1u) {
          AGX::BlitDispatchContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::renderTexture((uint64_t)a1, (uint64_t)&v112, (uint64_t)v89, (uint64_t)&v110, (uint64_t)v94, (uint64_t)&v109, v40, (uint64_t)v99, 0);
        }
        else {
          AGX::BlitDispatchContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::blitCDM((uint64_t)a1, (uint64_t)&v112, (uint64_t)v89, 0, &v110, v94, 0, &v109, v40, v99, 0, 0, 0, 0, 2);
        }
        ++v100;
      }
      while (a12[1].i64[0] > (unint64_t)v38++);
    }
    v89[0] = &unk_26F853CB0;
    std::unique_ptr<AGX::HAL200::CompressionMetadata>::~unique_ptr[abi:nn180100](v93);
    if (v90 && !v92)
    {
      __n128 v41 = (os_unfair_lock_s *)(v91 + 56);
      os_unfair_lock_lock((os_unfair_lock_t)(v91 + 56));
      uint64_t v42 = v91;
      uint64_t v43 = v90;
      int v44 = (atomic_ullong *)(v91 + 48);
      uint64_t v45 = *(void *)(v91 + 48);
      unint64_t v46 = (int *)MEMORY[0x263F4B188];
      uint64_t v47 = 32 * v90;
      *(_DWORD *)(*(void *)(*(void *)(*(void *)(v91 + 40) + 8) + (int)*MEMORY[0x263F4B188] + 24) + v47) = v45;
      uint64_t v48 = v45;
      atomic_compare_exchange_strong(v44, (unint64_t *)&v48, (v45 & 0xFFFFFFFF00000000 | v43) + 0x100000000);
      if (v48 != v45)
      {
        uint64_t v49 = v48;
        do
        {
          *(_DWORD *)(*(void *)(*(void *)(*(void *)(v42 + 40) + 8) + *v46 + 24) + v47) = v48;
          atomic_compare_exchange_strong((atomic_ullong *volatile)(v42 + 48), (unint64_t *)&v49, (v48 & 0xFFFFFFFF00000000 | v43) + 0x100000000);
          BOOL v50 = v49 == v48;
          uint64_t v48 = v49;
        }
        while (!v50);
      }
      os_unfair_lock_unlock(v41);
    }
    v94[0] = (uint32x2_t)&unk_26F853CB0;
    std::unique_ptr<AGX::HAL200::CompressionMetadata>::~unique_ptr[abi:nn180100](v98);
    if (v95 && !v97)
    {
      uint64_t v51 = (os_unfair_lock_s *)(v96 + 56);
      os_unfair_lock_lock((os_unfair_lock_t)(v96 + 56));
      uint64_t v52 = v96;
      uint64_t v53 = v95;
      uint64_t v54 = (atomic_ullong *)(v96 + 48);
      uint64_t v55 = *(void *)(v96 + 48);
      uint64_t v56 = (int *)MEMORY[0x263F4B188];
      uint64_t v57 = 32 * v95;
      *(_DWORD *)(*(void *)(*(void *)(*(void *)(v96 + 40) + 8) + (int)*MEMORY[0x263F4B188] + 24) + v57) = v55;
      uint64_t v58 = v55;
      atomic_compare_exchange_strong(v54, (unint64_t *)&v58, (v55 & 0xFFFFFFFF00000000 | v53) + 0x100000000);
      if (v58 != v55)
      {
        uint64_t v59 = v58;
        do
        {
          *(_DWORD *)(*(void *)(*(void *)(*(void *)(v52 + 40) + 8) + *v56 + 24) + v57) = v58;
          atomic_compare_exchange_strong((atomic_ullong *volatile)(v52 + 48), (unint64_t *)&v59, (v58 & 0xFFFFFFFF00000000 | v53) + 0x100000000);
          BOOL v50 = v59 == v58;
          uint64_t v58 = v59;
        }
        while (!v50);
      }
      os_unfair_lock_unlock(v51);
    }
  }
  else if (*(_DWORD *)(v14 + 236) || *(_DWORD *)(v15 + 236))
  {
    AGX::BlitDispatchContextGen2<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::blitCDMSparseASTCLowMips((uint64_t)a1, &v112, v15, a4, a5, &v110, v14, a9, a10);
  }
  else
  {
    uint64_t v84 = v14;
    uint64_t v66 = v36;
    uint64_t v67 = a8;
    if (a12[1].i64[0])
    {
      LODWORD(v68) = 0;
      unint64_t v80 = *(unsigned __int8 *)(*(void *)(v14 + 208) + a8 + 88);
      do
      {
        uint64_t v69 = v67;
        unsigned int v70 = v35 + v68;
        uint64_t v71 = v35;
        uint64_t v72 = v66;
        uint64_t GPUVirtualAddress = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getGPUVirtualAddress(v15, a4, *(_DWORD *)(v15 + 144) + v37, (int)v66 + (int)v68, a3);
        unsigned int v74 = v70;
        uint64_t v67 = v69;
        uint64_t v75 = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getGPUVirtualAddress(v84, a9, *(_DWORD *)(v84 + 144) + a10, v74, v69);
        uint64_t v76 = (int)*MEMORY[0x263F4B188];
        uint64_t v77 = GPUVirtualAddress - *(void *)(a2 + 72 + v76);
        unsigned int v37 = a5;
        AGX::BlitContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::copyBufferToBuffer((uint64_t)a1, a2, v77, a7, v75 - *(void *)(a7 + 72 + v76), v80);
        uint64_t v66 = v72;
        uint64_t v35 = v71;
        unint64_t v68 = (v68 + 1);
      }
      while (a12[1].i64[0] > v68);
    }
  }
}

void sub_242A20BDC(_Unwind_Exception *a1)
{
}

uint64_t AGX::BlitContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::getTextureViewFormat(uint64_t a1, unsigned int a2, uint64_t a3, int a4, int a5, char a6)
{
  if (a5)
  {
    if (a5 == 2)
    {
      uint64_t result = a3;
      switch(a3)
      {
        case 10:
        case 12:
        case 14:
          return result;
        case 11:
          return 10;
        case 13:
        case 15:
        case 16:
        case 17:
        case 18:
        case 19:
        case 20:
        case 21:
        case 23:
        case 26:
        case 27:
        case 28:
        case 29:
        case 30:
        case 31:
        case 33:
        case 35:
        case 36:
        case 37:
        case 38:
        case 39:
        case 40:
        case 41:
        case 42:
        case 43:
        case 44:
        case 45:
        case 46:
        case 47:
        case 48:
        case 49:
        case 50:
        case 51:
        case 52:
        case 53:
        case 55:
        case 56:
        case 57:
        case 58:
        case 59:
        case 60:
        case 61:
        case 63:
        case 66:
        case 67:
        case 68:
        case 69:
        case 70:
        case 71:
        case 73:
        case 75:
        case 76:
        case 77:
        case 78:
        case 79:
        case 80:
        case 81:
        case 82:
        case 83:
        case 84:
        case 85:
        case 86:
        case 87:
        case 88:
        case 89:
        case 90:
        case 91:
        case 92:
        case 93:
        case 94:
        case 95:
        case 96:
        case 97:
        case 98:
        case 99:
        case 100:
        case 101:
        case 102:
        case 103:
        case 106:
        case 107:
        case 108:
        case 109:
        case 110:
        case 111:
        case 113:
        case 116:
        case 117:
        case 118:
        case 119:
        case 120:
        case 121:
        case 122:
        case 123:
          break;
        case 22:
        case 24:
        case 25:
        case 32:
        case 34:
        case 54:
        case 62:
        case 64:
        case 65:
        case 72:
        case 74:
        case 104:
        case 105:
        case 112:
        case 114:
        case 115:
        case 124:
        case 125:
          return a3;
        default:
          switch(a3)
          {
            case 302:
            case 304:
            case 314:
            case 315:
            case 324:
            case 325:
              return a3;
            case 303:
            case 305:
            case 306:
            case 307:
            case 308:
            case 309:
            case 310:
            case 311:
            case 312:
            case 313:
            case 316:
            case 317:
            case 318:
            case 319:
            case 320:
            case 321:
            case 322:
            case 323:
              goto LABEL_15;
            default:
              if (a3 != 556) {
                goto LABEL_15;
              }
              return a3;
          }
      }
    }
LABEL_15:
    uint64_t result = 13;
    switch(a3)
    {
      case 1:
      case 10:
      case 11:
      case 12:
      case 13:
      case 14:
      case 253:
      case 261:
        return result;
      case 20:
      case 22:
      case 23:
      case 24:
      case 25:
      case 26:
      case 250:
        return 23;
      case 30:
      case 31:
      case 32:
      case 33:
      case 34:
        return 33;
      case 40:
      case 41:
      case 42:
      case 43:
      case 44:
      case 92:
      case 93:
        return a3;
      case 53:
      case 54:
        return 53;
      case 55:
      case 252:
        goto LABEL_30;
      case 60:
      case 62:
      case 63:
      case 64:
      case 65:
      case 66:
        return 63;
      case 70:
      case 71:
      case 72:
      case 73:
      case 74:
      case 80:
      case 81:
      case 84:
      case 85:
      case 300:
      case 301:
      case 302:
      case 303:
      case 304:
        return 73;
      case 90:
      case 91:
      case 94:
      case 554:
      case 555:
      case 586:
      case 587:
      case 628:
      case 629:
        return 91;
      case 103:
      case 104:
      case 105:
        return 103;
      case 110:
      case 112:
      case 113:
      case 114:
      case 115:
      case 116:
      case 313:
      case 314:
      case 315:
      case 556:
      case 637:
      case 638:
      case 639:
      case 640:
      case 641:
        return 113;
      case 123:
      case 124:
      case 125:
      case 323:
      case 324:
      case 325:
        goto LABEL_17;
      case 260:
        if (a4)
        {
          if (a4 != 1) {
            return a3;
          }
          uint64_t result = 13;
        }
        else
        {
LABEL_30:
          uint64_t result = 55;
        }
        break;
      case 552:
      case 553:
        return 552;
      default:
        goto LABEL_19;
    }
  }
  else
  {
    uint64_t v7 = a2 * a1;
    uint64_t result = 13;
    switch(v7)
    {
      case 1:
        return result;
      case 2:
        return 23;
      case 3:
      case 5:
      case 6:
      case 7:
      case 9:
      case 10:
      case 11:
      case 12:
      case 13:
      case 14:
      case 15:
      case 17:
      case 18:
      case 19:
      case 20:
      case 21:
      case 22:
      case 23:
      case 24:
      case 25:
      case 26:
      case 27:
      case 28:
      case 29:
      case 30:
      case 31:
      case 33:
      case 34:
      case 35:
      case 36:
      case 37:
      case 38:
      case 39:
      case 40:
      case 41:
      case 42:
      case 43:
      case 44:
      case 45:
      case 46:
      case 47:
      case 48:
      case 49:
      case 50:
      case 51:
      case 52:
      case 53:
      case 54:
      case 55:
      case 56:
      case 57:
      case 58:
      case 59:
      case 60:
      case 61:
      case 62:
      case 63:
        goto LABEL_19;
      case 4:
        return 53;
      case 8:
        return 103;
      case 16:
      case 64:
        goto LABEL_17;
      case 32:
        if (a6) {
          return 123;
        }
        else {
          return 113;
        }
      default:
        if (v7 == 128) {
LABEL_17:
        }
          uint64_t result = 123;
        else {
LABEL_19:
        }
          uint64_t result = 13;
        break;
    }
  }
  return result;
}

void AGX::BlitContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::copyBufferToTexture(uint64_t a1, uint64_t a2, unsigned int a3, unsigned int a4, int64x2_t *a5, int64x2_t *a6, uint64_t a7, uint64_t a8, unint64_t a9, uint64_t a10, unsigned int a11)
{
  uint64_t v169 = *MEMORY[0x263EF8340];
  uint64_t v15 = *(void *)(a2 + 536);
  uint64_t v16 = *(void *)(v15 + 208);
  if (*(_DWORD *)(v16 + 24) < 2u)
  {
    unsigned int v17 = 0;
  }
  else
  {
    unsigned int v17 = (a11 >> 1) & 1;
    if (!*(_DWORD *)(v16 + 80)) {
      unsigned int v17 = 0;
    }
  }
  int v18 = (void *)(a7 + (int)*MEMORY[0x263F4B188]);
  uint64_t v19 = v17;
  uint64_t v20 = *(unsigned __int8 *)(v16 + v17 + 88);
  unsigned int v21 = *(_DWORD *)(v15 + 112);
  uint64_t v22 = *(void *)(v15 + 488);
  if (v22 && (unsigned int v23 = *(_DWORD *)(v22 + 1080)) != 0)
  {
    int v24 = 1;
    if (v23 > a4)
    {
      if (*(unsigned char *)(v15 + 57)) {
        int v24 = 2;
      }
      else {
        int v24 = 1;
      }
    }
  }
  else
  {
    int v24 = 0;
  }
  uint64_t v108 = v18[9];
  unint64_t v109 = v21 * (unint64_t)v20;
  uint64_t v25 = v18[18];
  uint64_t v26 = v18[19];
  uint64_t TextureViewFormat = AGX::BlitContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::getTextureViewFormat(v20, v21, *(void *)(v15 + 32), v17, v24, 0);
  int v110 = v28;
  unint64_t v29 = HIDWORD(v28);
  if (HIDWORD(v28) >= 2) {
    uint64_t v30 = 4;
  }
  else {
    uint64_t v30 = 2;
  }
  unint64_t v31 = *(void *)(v15 + 24);
  if (v31 > 9) {
    goto LABEL_21;
  }
  if (((1 << v31) & 0x17C) != 0)
  {
LABEL_20:
    a6[1].i64[0] = 1;
    goto LABEL_21;
  }
  if (((1 << v31) & 3) != 0)
  {
    a6->i64[1] = 1;
    goto LABEL_20;
  }
  if (v31 != 9)
  {
LABEL_21:
    uint64_t v32 = v25;
    int32x2_t v33 = vmovn_s64(*a5);
    int32x2_t v34 = vmovn_s64(*a6);
    unsigned int v35 = *(_DWORD *)(v15 + 216);
    unsigned int v36 = *(_DWORD *)(v15 + 220);
    unsigned int v37 = (v35 + v34.i32[0] - 1) / v35;
    unsigned int v38 = v33.i32[0] / v35;
    if (v31 != 7) {
      unint64_t v31 = v30;
    }
    uint64_t v107 = v31;
    int v134 = 0;
    __int32 v39 = a5[1].i32[0];
    unsigned int v40 = (v36 + v34.i32[1] - 1) / v36;
    unint64_t v131 = __PAIR64__(v40, v37);
    LODWORD(v132) = v38;
    HIDWORD(v132) = v33.i32[1] / v36;
    uint64_t v133 = 0;
    v166[2] = 0;
    v166[1] = 0;
    uint64_t v167 = a2;
    v166[0] = a7;
    __n128 v41 = *(__n128 *)(v15 + 496);
    __n128 v168 = v41;
    if ((TextureViewFormat - 1) > 0x284) {
      uint64_t v42 = &texFormatUnsupported;
    }
    else {
      uint64_t v42 = (uint64_t *)*(&off_26516F8A0 + (TextureViewFormat - 1));
    }
    uint64_t v43 = TextureViewFormat;
    AGX::TextureGen4<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::TextureGen4((uint64_t)v124, *(os_unfair_lock_s **)(*(void *)(a1 + 6720) + 808), 0, 2, v30, (uint64_t)v42, TextureViewFormat, 0, v41, v32, 2, 0, 0, 84148994, v37, v40, 1u, 1u, SHIDWORD(v28),
      1,
      a9,
      0,
      v26,
      0,
      0,
      0,
      0,
      0,
      1,
      1,
      0,
      1,
      v105,
      0);
    uint64_t v44 = v108 + a8;
    v124[0] = (uint32x2_t)off_26F853CD8;
    if (!AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::blitTextureViewAllowed(v15, a4))
    {
      if (*(_DWORD *)(v15 + 236))
      {
        uint64_t v126 = 0;
        uint64_t v125 = v108 + a8;
        AGX::TextureGen4<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::texBaseAddressesUpdated((uint64_t)v124);
        AGX::BlitDispatchContextGen2<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::blitCDMSparseASTCLowMips(a1, &v167, v15, a3, a4, v166, (uint64_t)v124, 0, 0);
      }
      else if (a6[1].i64[0])
      {
        unint64_t v69 = 0;
        unint64_t v70 = *(unsigned __int8 *)(*(void *)(v15 + 208) + v19 + 88);
        unsigned int v71 = 1;
        do
        {
          uint64_t GPUVirtualAddress = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getGPUVirtualAddress(v15, a3, *(_DWORD *)(v15 + 144) + a4, v39 + v71 - 1, v19);
          AGX::BlitContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::copyBufferToBuffer(a1, a2, GPUVirtualAddress - *(void *)(a2 + 72 + (int)*MEMORY[0x263F4B188]), a7, a8 + v69 * a10, v70);
          unint64_t v69 = v71++;
        }
        while (a6[1].i64[0] > v69);
      }
      goto LABEL_94;
    }
    AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::createTextureViewForBlit((uint64_t)v116, v15, v107, v43, *(void *)(v15 + 40), *(void *)(v15 + 56), *(_DWORD *)(v15 + 308), a3, a4, v19, v29, *(void *)(v15 + 152), *(void *)(v15 + 160), *(void *)(v15 + 168), *(_DWORD *)(v15 + 176), *(_DWORD *)(v15 + 180), *(void *)(v15 + 184), *(_DWORD *)(v15 + 236) != 0, 0);
    unint64_t v47 = *(unsigned __int8 *)(v119 + 88);
    int v115 = 0;
    if (v29 == 1)
    {
      if (a6[1].i64[0])
      {
        unint64_t v48 = 0;
        unsigned int v49 = 1;
        do
        {
          unsigned int v50 = v39 + v49 - 1;
          uint64_t v51 = (char *)(v48 * a10 + v44);
          if ((HIDWORD(v131) | v131) >> 14
            || (((a9 / v109 * v109) | v51) & 0xF) != 0)
          {
            if (v15 && *(_DWORD *)(v15 + 112) > 1u)
            {
              *(void *)uint64_t v148 = 0;
              LODWORD(v135) = 1;
              HIDWORD(v135) = v118;
              int v137 = v110;
              int v138 = v131;
              unsigned int v52 = 32 - __clz(v118 - 1);
              if (v118 >= 2) {
                char v53 = v52;
              }
              else {
                char v53 = 0;
              }
              unsigned int v139 = HIDWORD(v131);
              unsigned int v140 = a9 / v47 / v118;
              int v141 = v131 << v53;
              unsigned int v142 = HIDWORD(v131);
              int v144 = a9;
              unsigned int v143 = a9 / v47;
              unint64_t v136 = v132;
              unint64_t v145 = v132;
              int v146 = v39 + v49 - 1;
              unint64_t v147 = v131;
              v148[7] = v132 != 0;
              AGX::BlitDispatchContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::render3D(a1, (uint64_t)&v167, (uint64_t)v116, (uint64_t)v166, 0, (uint64_t)v51, 0, 0, (uint64_t)&v135, &v115);
            }
            else
            {
              AGX::BlitDispatchContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::blitCDM(a1, (uint64_t)&v167, (uint64_t)v116, 0, v166, 0, v51, &v115, v50, (unsigned int *)&v131, v110, v47, a9, 0, 2);
            }
          }
          else
          {
            uint64_t v126 = 0;
            uint64_t v125 = v48 * a10 + v44;
            (*(void (**)(uint32x2_t *))(*(void *)v124 + 16))(v124);
            if (v15 && *(_DWORD *)(v15 + 112) > 1u) {
              AGX::BlitDispatchContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::renderTexture(a1, (uint64_t)&v167, (uint64_t)v116, (uint64_t)v166, (uint64_t)v124, (uint64_t)&v115, v39 + v49 - 1, (uint64_t)&v131, 0);
            }
            else {
              AGX::BlitDispatchContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::blitCDM(a1, (uint64_t)&v167, (uint64_t)v116, 0, v166, v124, 0, &v115, v50, (unsigned int *)&v131, 0, 0, 0, 0, 2);
            }
          }
          unint64_t v48 = v49++;
        }
        while (a6[1].i64[0] > v48);
      }
      goto LABEL_87;
    }
    unsigned int v54 = HIDWORD(v131);
    unsigned int v55 = a9;
    unsigned int v56 = 32 - __clz(v118 - 1);
    unsigned int v57 = a9 / v47 / v118;
    long long v164 = 0uLL;
    int v165 = 0;
    int v154 = 4;
    unsigned int v155 = v118;
    if (v118 >= 2) {
      unsigned int v58 = v56;
    }
    else {
      unsigned int v58 = 0;
    }
    int v157 = v110;
    unint64_t v158 = v131;
    unsigned int v59 = v131 << v58;
    unsigned int v159 = a9 / v47 / v118;
    unsigned int v160 = v131 << v58;
    int v161 = HIDWORD(v131);
    unsigned int v162 = a9 / v47;
    *(_DWORD *)long long v163 = a9;
    if (((v131 << v58) | HIDWORD(v131)) >> 14
      || (((a9 / v47 * v47) | v44) & 0xF) != 0)
    {
      if (v58)
      {
        unsigned int v60 = v132;
        unsigned int v61 = HIDWORD(v132);
        v45.n128_u64[0] = v131;
        char v62 = v58 - 1;
        unsigned int v63 = 1;
        do
        {
          int v165 = 1;
          unsigned int v59 = v57 << v62;
          unsigned int v64 = HIDWORD(v131) << v63;
          *(_DWORD *)&v163[8] = 0;
          long long v164 = 0uLL;
          unint64_t v156 = 0;
          int v157 = v110;
          unint64_t v158 = v131;
          unsigned int v159 = a9 / v47 / v118;
          unsigned int v160 = v57 << v62;
          int v161 = HIDWORD(v131) << v63;
          unsigned int v162 = v57 << v62;
          *(void *)long long v163 = (v57 << v62) * v47;
          if (((v57 << v62) | (HIDWORD(v131) << v63)) >> 14
            || (((v59 * v47) | v44) & 0xF) != 0)
          {
            int v65 = 0;
            int v66 = 0;
            int v67 = 0;
          }
          else
          {
            unint64_t v156 = v132;
            *(void *)&v163[4] = v132;
            *(void *)((char *)&v164 + 4) = v131;
            v46.i32[0] = v57 << v62;
            int8x8_t v46 = vcnt_s8(v46);
            v46.i16[0] = vaddlv_u8((uint8x8_t)v46);
            unsigned int v68 = v57 << v62;
            BYTE1(v165) = v46.i32[0] == 1;
            if (v46.i32[0] == 1)
            {
              unsigned int v68 = 32 - __clz(v59 - 1);
              if (v59 < 2) {
                unsigned int v68 = 0;
              }
            }
            HIDWORD(v164) = v68;
            int v67 = 1;
            int v65 = HIDWORD(v132);
            int v66 = v132;
          }
          HIBYTE(v165) = (v66 | v65) != 0;
          if (v63 >= v58) {
            break;
          }
          ++v63;
          --v62;
        }
        while (!v67);
        int v154 = 4;
        unsigned int v155 = v118;
        if (v67)
        {
          unsigned int v55 = v59 * v47;
          unsigned int v54 = v64;
          goto LABEL_77;
        }
        unsigned int v75 = v131;
        unsigned int v54 = HIDWORD(v131);
      }
      else
      {
        unsigned int v75 = v131;
        unsigned int v60 = v132;
        unsigned int v61 = HIDWORD(v132);
      }
      *(void *)uint64_t v148 = 0;
      LODWORD(v135) = 1;
      HIDWORD(v135) = v118;
      int v137 = v110;
      int v138 = v75;
      unsigned int v139 = v54;
      unsigned int v140 = a9 / v47 / v118;
      int v141 = v75 << v58;
      unsigned int v142 = v54;
      int v144 = a9;
      unsigned int v143 = a9 / v47;
      unint64_t v136 = __PAIR64__(v61, v60);
      unint64_t v145 = __PAIR64__(v61, v60);
      int v146 = 0;
      unint64_t v147 = __PAIR64__(v54, v75);
      v148[7] = (v60 | v61) != 0;
      AGX::BlitDispatchContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::render3D(a1, (uint64_t)&v167, (uint64_t)v116, (uint64_t)v166, 0, v44, 0, 0, (uint64_t)&v135, &v115);
LABEL_87:
      v116[0] = &unk_26F853CB0;
      std::unique_ptr<AGX::HAL200::CompressionMetadata>::~unique_ptr[abi:nn180100](v123);
      if (v120 && !v122)
      {
        __n128 v89 = (os_unfair_lock_s *)(v121 + 56);
        os_unfair_lock_lock((os_unfair_lock_t)(v121 + 56));
        uint64_t v90 = v121;
        uint64_t v91 = v120;
        uint64_t v92 = *(void *)(v121 + 48);
        unint64_t v93 = (int *)MEMORY[0x263F4B188];
        uint64_t v94 = 32 * v120;
        *(_DWORD *)(*(void *)(*(void *)(*(void *)(v121 + 40) + 8) + (int)*MEMORY[0x263F4B188] + 24) + v94) = v92;
        uint64_t v95 = v92;
        atomic_compare_exchange_strong((atomic_ullong *volatile)(v90 + 48), (unint64_t *)&v95, (v92 & 0xFFFFFFFF00000000 | v91) + 0x100000000);
        if (v95 != v92)
        {
          uint64_t v96 = v95;
          do
          {
            *(_DWORD *)(*(void *)(*(void *)(*(void *)(v90 + 40) + 8) + *v93 + 24) + v94) = v95;
            atomic_compare_exchange_strong((atomic_ullong *volatile)(v90 + 48), (unint64_t *)&v96, (v95 & 0xFFFFFFFF00000000 | v91) + 0x100000000);
            BOOL v88 = v96 == v95;
            uint64_t v95 = v96;
          }
          while (!v88);
        }
        os_unfair_lock_unlock(v89);
      }
LABEL_94:
      v124[0] = (uint32x2_t)&unk_26F853CB0;
      std::unique_ptr<AGX::HAL200::CompressionMetadata>::~unique_ptr[abi:nn180100](v130);
      if (v127 && !v129)
      {
        char v97 = (os_unfair_lock_s *)(v128 + 56);
        os_unfair_lock_lock((os_unfair_lock_t)(v128 + 56));
        uint64_t v98 = v128;
        uint64_t v99 = v127;
        uint64_t v100 = *(void *)(v128 + 48);
        int64x2_t v101 = (int *)MEMORY[0x263F4B188];
        uint64_t v102 = 32 * v127;
        *(_DWORD *)(*(void *)(*(void *)(*(void *)(v128 + 40) + 8) + (int)*MEMORY[0x263F4B188] + 24) + v102) = v100;
        uint64_t v103 = v100;
        atomic_compare_exchange_strong((atomic_ullong *volatile)(v98 + 48), (unint64_t *)&v103, (v100 & 0xFFFFFFFF00000000 | v99) + 0x100000000);
        if (v103 != v100)
        {
          uint64_t v104 = v103;
          do
          {
            *(_DWORD *)(*(void *)(*(void *)(*(void *)(v98 + 40) + 8) + *v101 + 24) + v102) = v103;
            atomic_compare_exchange_strong((atomic_ullong *volatile)(v98 + 48), (unint64_t *)&v104, (v103 & 0xFFFFFFFF00000000 | v99) + 0x100000000);
            BOOL v88 = v104 == v103;
            uint64_t v103 = v104;
          }
          while (!v88);
        }
        os_unfair_lock_unlock(v97);
      }
      return;
    }
    unint64_t v156 = v132;
    *(void *)&v163[4] = v132;
    *(void *)((char *)&v164 + 4) = v131;
    HIBYTE(v165) = v132 != 0;
LABEL_77:
    uint64_t v76 = a2 + (int)*MEMORY[0x263F4B188];
    uint64_t v77 = *(void *)(v76 + 144);
    uint64_t v78 = *(void *)(v76 + 152);
    if ((v117 - 1) > 0x284) {
      uint64_t v79 = &texFormatUnsupported;
    }
    else {
      uint64_t v79 = (uint64_t *)*(&off_26516F8A0 + (v117 - 1));
    }
    AGX::TextureGen4<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::TextureGen4((uint64_t)&v135, *(os_unfair_lock_s **)(*(void *)(a1 + 1464) + 808), 0, 2, 2, (uint64_t)v79, v117, 0, v45, v77, 2, 0, 0, 84148994, v59, v54, 1u, 1u, 1,
      1,
      v55,
      0,
      v78,
      0,
      0,
      0,
      0,
      0,
      1,
      1,
      0,
      1,
      v106,
      0);
    unint64_t v135 = off_26F853CD8;
    uint64_t v149 = 0;
    *(void *)&v148[4] = v108 + a8;
    AGX::TextureGen4<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::texBaseAddressesUpdated((uint64_t)&v135);
    AGX::BlitDispatchContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::render3D(a1, (uint64_t)&v167, (uint64_t)v116, (uint64_t)v166, (uint64_t)&v135, v44, 0, 0, (uint64_t)&v154, &v115);
    unint64_t v135 = (void (**)(AGX::HAL200::Texture *__hidden))&unk_26F853CB0;
    std::unique_ptr<AGX::HAL200::CompressionMetadata>::~unique_ptr[abi:nn180100](v153);
    if (v150 && !v152)
    {
      unint64_t v80 = (os_unfair_lock_s *)(v151 + 56);
      os_unfair_lock_lock((os_unfair_lock_t)(v151 + 56));
      uint64_t v81 = v151;
      uint64_t v82 = v150;
      uint64_t v83 = *(void *)(v151 + 48);
      uint64_t v84 = (int *)MEMORY[0x263F4B188];
      uint64_t v85 = 32 * v150;
      *(_DWORD *)(*(void *)(*(void *)(*(void *)(v151 + 40) + 8) + (int)*MEMORY[0x263F4B188] + 24) + v85) = v83;
      uint64_t v86 = v83;
      atomic_compare_exchange_strong((atomic_ullong *volatile)(v81 + 48), (unint64_t *)&v86, (v83 & 0xFFFFFFFF00000000 | v82) + 0x100000000);
      if (v86 != v83)
      {
        uint64_t v87 = v86;
        do
        {
          *(_DWORD *)(*(void *)(*(void *)(*(void *)(v81 + 40) + 8) + *v84 + 24) + v85) = v86;
          atomic_compare_exchange_strong((atomic_ullong *volatile)(v81 + 48), (unint64_t *)&v87, (v86 & 0xFFFFFFFF00000000 | v82) + 0x100000000);
          BOOL v88 = v87 == v86;
          uint64_t v86 = v87;
        }
        while (!v88);
      }
      os_unfair_lock_unlock(v80);
    }
    goto LABEL_87;
  }
  uint64_t v73 = a5->i64[0] * v109;
  unint64_t v74 = a6->i64[0] * v109;

  AGX::BlitContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::copyBufferToBuffer(a1, a2, v73, a7, a8, v74);
}

void sub_242A22980(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
}

void AGX::BlitContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::copyTextureToBuffer(void *a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, unsigned int a7, unsigned int a8, int64x2_t *a9, int64x2_t *a10, unsigned int a11)
{
  v155[3] = *MEMORY[0x263EF8340];
  uint64_t v14 = *(void *)(a6 + 536);
  uint64_t v15 = *(void *)(v14 + 208);
  if (*(_DWORD *)(v15 + 24) < 2u)
  {
    unsigned int v16 = 0;
  }
  else
  {
    unsigned int v16 = (a11 >> 1) & 1;
    if (!*(_DWORD *)(v15 + 80)) {
      unsigned int v16 = 0;
    }
  }
  unsigned int v17 = (void *)(a2 + (int)*MEMORY[0x263F4B188]);
  uint64_t v18 = v16;
  uint64_t v19 = *(unsigned __int8 *)(v15 + v16 + 88);
  unsigned int v20 = *(_DWORD *)(v14 + 112);
  uint64_t v21 = *(void *)(v14 + 488);
  if (v21 && (unsigned int v22 = *(_DWORD *)(v21 + 1080)) != 0)
  {
    int v23 = 1;
    if (v22 > a8)
    {
      if (*(unsigned char *)(v14 + 57)) {
        int v23 = 2;
      }
      else {
        int v23 = 1;
      }
    }
  }
  else
  {
    int v23 = 0;
  }
  uint64_t v24 = v17[18];
  uint64_t v106 = v17[9];
  uint64_t v107 = v17[19];
  unint64_t v104 = v20 * (unint64_t)v19;
  uint64_t TextureViewFormat = AGX::BlitContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::getTextureViewFormat(v19, v20, *(void *)(v14 + 32), v16, v23, 0);
  uint64_t v27 = TextureViewFormat;
  int v108 = v26;
  unint64_t v28 = HIDWORD(v26);
  if (HIDWORD(v26) >= 2) {
    uint64_t v29 = 4;
  }
  else {
    uint64_t v29 = 2;
  }
  unint64_t v30 = *(void *)(v14 + 24);
  if (v30 > 9) {
    goto LABEL_21;
  }
  if (((1 << v30) & 0x17C) != 0)
  {
LABEL_20:
    a10[1].i64[0] = 1;
    goto LABEL_21;
  }
  if (((1 << v30) & 3) != 0)
  {
    a10->i64[1] = 1;
    goto LABEL_20;
  }
  if (v30 != 9)
  {
LABEL_21:
    int32x2_t v31 = vmovn_s64(*a10);
    int32x2_t v32 = vmovn_s64(*a9);
    int v134 = a9[1].i64[0];
    unsigned int v33 = *(_DWORD *)(v14 + 216);
    unsigned int v34 = *(_DWORD *)(v14 + 220);
    unsigned int v35 = (v33 + v31.i32[0] - 1) / v33;
    unsigned int v36 = v32.i32[0] / v33;
    if (v30 != 7) {
      unint64_t v30 = v29;
    }
    uint64_t v105 = v30;
    unsigned int v37 = (v34 + v31.i32[1] - 1) / v34;
    unsigned int v130 = v35;
    unsigned int v131 = v37;
    uint64_t v132 = 0;
    LODWORD(v133) = v36;
    HIDWORD(v133) = v32.i32[1] / v34;
    v155[1] = 0;
    v155[2] = 0;
    v155[0] = a2;
    uint64_t v153 = a6;
    __n128 v38 = *(__n128 *)(v14 + 496);
    __n128 v154 = v38;
    if ((TextureViewFormat - 1) > 0x284) {
      __int32 v39 = &texFormatUnsupported;
    }
    else {
      __int32 v39 = (uint64_t *)*(&off_26516F8A0 + (TextureViewFormat - 1));
    }
    AGX::TextureGen4<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::TextureGen4((uint64_t)v123, *(os_unfair_lock_s **)(a1[840] + 808), 0, 2, v29, (uint64_t)v39, TextureViewFormat, 0, v38, v24, 2, 0, 0, 84148994, v35, v37, 1u, 1u, SHIDWORD(v26),
      1,
      a4,
      0,
      v107,
      0,
      0,
      0,
      0,
      0,
      1,
      1,
      0,
      1,
      v102,
      0);
    uint64_t v40 = v106 + a3;
    v123[0] = off_26F853CD8;
    if (!AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::blitTextureViewAllowed(v14, a8))
    {
      if (*(_DWORD *)(v14 + 236))
      {
        uint64_t v125 = 0;
        uint64_t v124 = v106 + a3;
        AGX::TextureGen4<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::texBaseAddressesUpdated((uint64_t)v123);
        AGX::BlitDispatchContextGen2<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::blitCDMSparseASTCLowMips((uint64_t)a1, v155, (uint64_t)v123, 0, 0, &v153, v14, a7, a8);
      }
      else if (a10[1].i64[0])
      {
        unint64_t v59 = 0;
        unint64_t v60 = *(unsigned __int8 *)(*(void *)(v14 + 208) + v18 + 88);
        unsigned int v61 = 1;
        unsigned int v62 = v134;
        do
        {
          uint64_t GPUVirtualAddress = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getGPUVirtualAddress(v14, a7, *(_DWORD *)(v14 + 144) + a8, v62, v18);
          AGX::BlitContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::copyBufferToBuffer((uint64_t)a1, a2, a3 + v59 * a5, a6, GPUVirtualAddress - *(void *)(a6 + 72 + (int)*MEMORY[0x263F4B188]), v60);
          unsigned int v62 = ++v134;
          unint64_t v59 = v61++;
        }
        while (a10[1].i64[0] > v59);
      }
      goto LABEL_96;
    }
    AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::createTextureViewForBlit((uint64_t)v114, v14, v105, v27, *(void *)(v14 + 40), *(void *)(v14 + 56), *(_DWORD *)(v14 + 308), a7, a8, v18, v28, *(void *)(v14 + 152), *(void *)(v14 + 160), *(void *)(v14 + 168), *(_DWORD *)(v14 + 176), *(_DWORD *)(v14 + 180), *(void *)(v14 + 184), *(_DWORD *)(v14 + 236) != 0, 0);
    unint64_t v42 = *(unsigned __int8 *)(v118 + 88);
    if (v28 == 1)
    {
      if (a10[1].i64[0])
      {
        unint64_t v43 = 0;
        unsigned int v44 = 1;
        do
        {
          uint64_t v45 = v43 * a5 + v40;
          if ((v131 | v130) >> 14) {
            BOOL v46 = 0;
          }
          else {
            BOOL v46 = ((a4 / v104) & 0xF) == 0;
          }
          if (v46 && (v45 & 0xF) == 0)
          {
            uint64_t v125 = 0;
            uint64_t v124 = v43 * a5 + v40;
            (*(void (**)(void *))(v123[0] + 16))(v123);
            LODWORD(v136[0]) = 0;
            AGX::BlitDispatchContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::blitCDM((uint64_t)a1, (uint64_t)v155, (uint64_t)v123, 0, &v153, v114, 0, (int *)v136, 0, &v130, 0, 0, 0, 0, 2);
          }
          else
          {
            LODWORD(v136[0]) = 0;
            AGX::BlitDispatchContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::blitCDM((uint64_t)a1, (uint64_t)v155, 0, v45, &v153, v114, 0, (int *)v136, 0, &v130, v108, v42, a4, 0, 2);
          }
          ++v134;
          unint64_t v43 = v44++;
        }
        while (a10[1].i64[0] > v43);
      }
      goto LABEL_89;
    }
    unsigned int v48 = a4 / v42 / v117;
    unsigned int v49 = 32 - __clz(v117 - 1);
    if (v117 >= 2) {
      unsigned int v50 = v49;
    }
    else {
      unsigned int v50 = 0;
    }
    v41.n128_u32[0] = a4 / v42 / v117;
    memset(v152, 0, sizeof(v152));
    v41.n128_u64[0] = (unint64_t)vcnt_s8((int8x8_t)v41.n128_u64[0]);
    int v141 = 3;
    unsigned int v142 = v117;
    int v144 = v108;
    unsigned int v145 = v130;
    v41.n128_u16[0] = vaddlv_u8((uint8x8_t)v41.n128_u64[0]);
    unsigned int v146 = v131;
    unsigned int v147 = a4 / v42 / v117;
    unsigned int v51 = v130 << v50;
    unsigned int v148 = v130 << v50;
    unsigned int v149 = v131;
    BOOL v52 = v41.n128_u32[0] == 1;
    unsigned int v150 = a4 / v42;
    LODWORD(v151) = a4;
    if ((v40 & 0xF) != 0 || ((a4 / v42) & 0xF) != 0 || (v51 | v131) >> 14)
    {
      if (!v50) {
        goto LABEL_88;
      }
      unsigned int v66 = 32 - __clz(v48 - 1);
      if (v48 < 2) {
        unsigned int v66 = 0;
      }
      unsigned int v67 = v41.n128_u32[0] == 1 ? v66 : a4 / v42 / v117;
      if ((v40 & 0xF) != 0) {
        goto LABEL_88;
      }
      char v68 = v50 - 1;
      __n128 v41 = 0uLL;
      unsigned int v69 = 1;
      do
      {
        int v71 = 0;
        int v72 = 0;
        unsigned int v51 = v48 << v68;
        unsigned int v54 = v131 << v69;
        unsigned int v53 = (v48 << v68) * v42;
        memset(v152, 0, sizeof(v152));
        uint64_t v143 = 0;
        int v144 = v108;
        unsigned int v145 = v130;
        unsigned int v146 = v131;
        unsigned int v147 = a4 / v42 / v117;
        unsigned int v148 = v48 << v68;
        unsigned int v149 = v131 << v69;
        unsigned int v150 = v48 << v68;
        uint64_t v151 = v53;
        BOOL v73 = ((v48 << v68) & 0xF) != 0 || ((v48 << v68) | (v131 << v69)) >= 0x4000;
        int v74 = !v73;
        LOBYTE(v152[5]) = 1;
        if (v74 == 1)
        {
          uint64_t v143 = v133;
          BYTE2(v152[5]) = v48 != v130;
          v152[2] = v48 << v68;
          v152[3] = v131 << v69;
          BYTE1(v152[5]) = v52;
          int v71 = HIDWORD(v133);
          int v72 = v133;
          v152[4] = v67;
        }
        HIBYTE(v152[5]) = (v72 | v71) != 0;
        BOOL v73 = v69++ >= v50;
        if (v73) {
          char v70 = 1;
        }
        else {
          char v70 = v74;
        }
        --v68;
      }
      while ((v70 & 1) == 0);
      int v141 = 3;
      unsigned int v142 = v117;
      if ((v74 & 1) == 0)
      {
LABEL_88:
        AGX::BlitDispatchContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::blitTextureToBufferWithTA(a1, (uint64_t)v155, v40, &v153, (uint64_t)v114, (uint64_t)&v130, v42, a4, v108);
LABEL_89:
        v114[0] = (uint32x2_t)&unk_26F853CB0;
        std::unique_ptr<AGX::HAL200::CompressionMetadata>::~unique_ptr[abi:nn180100](v122);
        if (v119 && !v121)
        {
          uint64_t v84 = (os_unfair_lock_s *)(v120 + 56);
          os_unfair_lock_lock((os_unfair_lock_t)(v120 + 56));
          uint64_t v85 = v120;
          uint64_t v86 = v119;
          uint64_t v87 = (atomic_ullong *)(v120 + 48);
          uint64_t v88 = *(void *)(v120 + 48);
          __n128 v89 = (int *)MEMORY[0x263F4B188];
          uint64_t v90 = 32 * v119;
          *(_DWORD *)(*(void *)(*(void *)(*(void *)(v120 + 40) + 8) + (int)*MEMORY[0x263F4B188] + 24) + v90) = v88;
          uint64_t v91 = v88;
          atomic_compare_exchange_strong(v87, (unint64_t *)&v91, (v88 & 0xFFFFFFFF00000000 | v86) + 0x100000000);
          if (v91 != v88)
          {
            uint64_t v92 = v91;
            do
            {
              *(_DWORD *)(*(void *)(*(void *)(*(void *)(v85 + 40) + 8) + *v89 + 24) + v90) = v91;
              atomic_compare_exchange_strong((atomic_ullong *volatile)(v85 + 48), (unint64_t *)&v92, (v91 & 0xFFFFFFFF00000000 | v86) + 0x100000000);
              BOOL v46 = v92 == v91;
              uint64_t v91 = v92;
            }
            while (!v46);
          }
          os_unfair_lock_unlock(v84);
        }
LABEL_96:
        v123[0] = &unk_26F853CB0;
        std::unique_ptr<AGX::HAL200::CompressionMetadata>::~unique_ptr[abi:nn180100](v129);
        if (v126 && !v128)
        {
          unint64_t v93 = (os_unfair_lock_s *)(v127 + 56);
          os_unfair_lock_lock((os_unfair_lock_t)(v127 + 56));
          uint64_t v94 = v127;
          uint64_t v95 = v126;
          uint64_t v96 = (atomic_ullong *)(v127 + 48);
          uint64_t v97 = *(void *)(v127 + 48);
          uint64_t v98 = (int *)MEMORY[0x263F4B188];
          uint64_t v99 = 32 * v126;
          *(_DWORD *)(*(void *)(*(void *)(*(void *)(v127 + 40) + 8) + (int)*MEMORY[0x263F4B188] + 24) + v99) = v97;
          uint64_t v100 = v97;
          atomic_compare_exchange_strong(v96, (unint64_t *)&v100, (v97 & 0xFFFFFFFF00000000 | v95) + 0x100000000);
          if (v100 != v97)
          {
            uint64_t v101 = v100;
            do
            {
              *(_DWORD *)(*(void *)(*(void *)(*(void *)(v94 + 40) + 8) + *v98 + 24) + v99) = v100;
              atomic_compare_exchange_strong((atomic_ullong *volatile)(v94 + 48), (unint64_t *)&v101, (v100 & 0xFFFFFFFF00000000 | v95) + 0x100000000);
              BOOL v46 = v101 == v100;
              uint64_t v100 = v101;
            }
            while (!v46);
          }
          os_unfair_lock_unlock(v93);
        }
        return;
      }
    }
    else
    {
      uint64_t v143 = v133;
      HIDWORD(v151) = 0;
      v152[2] = v130 << v50;
      v152[3] = v131;
      HIBYTE(v152[5]) = v133 != 0;
      unsigned int v53 = a4;
      unsigned int v54 = v131;
    }
    uint64_t v55 = a2 + (int)*MEMORY[0x263F4B188];
    uint64_t v56 = *(void *)(v55 + 144);
    uint64_t v57 = *(void *)(v55 + 152);
    if ((v115 - 1) > 0x284) {
      unsigned int v58 = &texFormatUnsupported;
    }
    else {
      unsigned int v58 = (uint64_t *)*(&off_26516F8A0 + (v115 - 1));
    }
    AGX::TextureGen4<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::TextureGen4((uint64_t)v136, *(os_unfair_lock_s **)(a1[183] + 808), 0, 2, 2, (uint64_t)v58, v115, 0, v41, v56, 2, 0, 0, 84148994, v51, v54, 1u, 1u, 1,
      1,
      v53,
      0,
      v57,
      0,
      0,
      0,
      0,
      0,
      1,
      1,
      0,
      1,
      v103,
      0);
    v136[37] = 0;
    v136[0] = off_26F853CD8;
    v136[9] = v106 + a3;
    AGX::TextureGen4<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::texBaseAddressesUpdated((uint64_t)v136);
    int v135 = 0;
    AGX::BlitDispatchContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::render3D((uint64_t)a1, (uint64_t)v155, (uint64_t)v136, (uint64_t)&v153, (uint64_t)v114, v116, 0, 0, (uint64_t)&v141, &v135);
    v136[0] = &unk_26F853CB0;
    std::unique_ptr<AGX::HAL200::CompressionMetadata>::~unique_ptr[abi:nn180100](v140);
    if (v137 && !v139)
    {
      unsigned int v75 = (os_unfair_lock_s *)(v138 + 56);
      os_unfair_lock_lock((os_unfair_lock_t)(v138 + 56));
      uint64_t v76 = v138;
      uint64_t v77 = v137;
      uint64_t v78 = (atomic_ullong *)(v138 + 48);
      uint64_t v79 = *(void *)(v138 + 48);
      unint64_t v80 = (int *)MEMORY[0x263F4B188];
      uint64_t v81 = 32 * v137;
      *(_DWORD *)(*(void *)(*(void *)(*(void *)(v138 + 40) + 8) + (int)*MEMORY[0x263F4B188] + 24) + v81) = v79;
      uint64_t v82 = v79;
      atomic_compare_exchange_strong(v78, (unint64_t *)&v82, (v79 & 0xFFFFFFFF00000000 | v77) + 0x100000000);
      if (v82 != v79)
      {
        uint64_t v83 = v82;
        do
        {
          *(_DWORD *)(*(void *)(*(void *)(*(void *)(v76 + 40) + 8) + *v80 + 24) + v81) = v82;
          atomic_compare_exchange_strong((atomic_ullong *volatile)(v76 + 48), (unint64_t *)&v83, (v82 & 0xFFFFFFFF00000000 | v77) + 0x100000000);
          BOOL v46 = v83 == v82;
          uint64_t v82 = v83;
        }
        while (!v46);
      }
      os_unfair_lock_unlock(v75);
    }
    goto LABEL_89;
  }
  uint64_t v64 = a9->i64[0] * v104;
  unint64_t v65 = a10->i64[0] * v104;

  AGX::BlitContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::copyBufferToBuffer((uint64_t)a1, a2, a3, a6, v64, v65);
}

void sub_242A2356C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36)
{
}

BOOL ___ZN3AGX11BlitContextINS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE20copyTextureToTextureEP19AGXG17FamilyTexturejjS7_jjjj_block_invoke_191(uint64_t a1, unint64_t **a2, unint64_t a3, unint64_t a4)
{
  uint64_t v4 = *a2;
  unint64_t v5 = a2[1];
  if (v5 != *a2)
  {
    unint64_t v6 = ((char *)v5 - (char *)*a2) >> 4;
    do
    {
      unint64_t v7 = v6 >> 1;
      unint64_t v8 = &v4[2 * (v6 >> 1)];
      unint64_t v9 = v8[1];
      unint64_t v10 = v8 + 2;
      v6 += ~(v6 >> 1);
      if (v9 <= a3) {
        uint64_t v4 = v10;
      }
      else {
        unint64_t v6 = v7;
      }
    }
    while (v6);
  }
  return v4 != v5 && *v4 < a4;
}

__n128 std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,AGX::BlitContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::copyTextureToTexture(AGXG17FamilyTexture *,unsigned int,unsigned int,AGXG17FamilyTexture *,unsigned int,unsigned int,unsigned int,unsigned int)::{lambda(AGX::BlitContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::copyTextureToTexture(AGXG17FamilyTexture *,unsigned int,unsigned int,AGXG17FamilyTexture *,unsigned int,unsigned int,unsigned int,unsigned int)::MemRange,AGX::BlitContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::copyTextureToTexture(AGXG17FamilyTexture *,unsigned int,unsigned int,AGXG17FamilyTexture *,unsigned int,unsigned int,unsigned int,unsigned int)::MemRange)#1} &,AGX::BlitContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::copyTextureToTexture(AGXG17FamilyTexture *,unsigned int,unsigned int,AGXG17FamilyTexture *,unsigned int,unsigned int,unsigned int,unsigned int)::MemRange*>(__n128 *a1, __n128 *a2, unint64_t *a3, _OWORD *a4, _OWORD *a5, __n128 result)
{
  unint64_t v6 = a2->n128_u64[0];
  unint64_t v7 = *a3;
  if (a2->n128_u64[0] >= a1->n128_u64[0])
  {
    if (v7 < v6)
    {
      uint64_t result = *a2;
      *a2 = *(__n128 *)a3;
      *(__n128 *)a3 = result;
      if (a2->n128_u64[0] < a1->n128_u64[0])
      {
        uint64_t result = *a1;
        *a1 = *a2;
        *a2 = result;
      }
    }
  }
  else
  {
    if (v7 < v6)
    {
      uint64_t result = *a1;
      *a1 = *(__n128 *)a3;
LABEL_9:
      *(__n128 *)a3 = result;
      goto LABEL_10;
    }
    uint64_t result = *a1;
    *a1 = *a2;
    *a2 = result;
    if (*a3 < a2->n128_u64[0])
    {
      uint64_t result = *a2;
      *a2 = *(__n128 *)a3;
      goto LABEL_9;
    }
  }
LABEL_10:
  if (*(void *)a4 < *a3)
  {
    uint64_t result = *(__n128 *)a3;
    *(_OWORD *)a3 = *a4;
    *a4 = result;
    if (*a3 < a2->n128_u64[0])
    {
      uint64_t result = *a2;
      *a2 = *(__n128 *)a3;
      *(__n128 *)a3 = result;
      if (a2->n128_u64[0] < a1->n128_u64[0])
      {
        uint64_t result = *a1;
        *a1 = *a2;
        *a2 = result;
      }
    }
  }
  if (*(void *)a5 < *(void *)a4)
  {
    uint64_t result = *(__n128 *)a4;
    *a4 = *a5;
    *a5 = result;
    if (*(void *)a4 < *a3)
    {
      uint64_t result = *(__n128 *)a3;
      *(_OWORD *)a3 = *a4;
      *a4 = result;
      if (*a3 < a2->n128_u64[0])
      {
        uint64_t result = *a2;
        *a2 = *(__n128 *)a3;
        *(__n128 *)a3 = result;
        if (a2->n128_u64[0] < a1->n128_u64[0])
        {
          uint64_t result = *a1;
          *a1 = *a2;
          *a2 = result;
        }
      }
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,AGX::BlitContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::copyTextureToTexture(AGXG17FamilyTexture *,unsigned int,unsigned int,AGXG17FamilyTexture *,unsigned int,unsigned int,unsigned int,unsigned int)::{lambda(AGX::BlitContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::copyTextureToTexture(AGXG17FamilyTexture *,unsigned int,unsigned int,AGXG17FamilyTexture *,unsigned int,unsigned int,unsigned int,unsigned int)::MemRange,AGX::BlitContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::copyTextureToTexture(AGXG17FamilyTexture *,unsigned int,unsigned int,AGXG17FamilyTexture *,unsigned int,unsigned int,unsigned int,unsigned int)::MemRange)#1} &,AGX::BlitContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::copyTextureToTexture(AGXG17FamilyTexture *,unsigned int,unsigned int,AGXG17FamilyTexture *,unsigned int,unsigned int,unsigned int,unsigned int)::MemRange*>(__n128 *a1, __n128 *a2, __n128 a3)
{
  uint64_t v3 = 1;
  switch(a2 - a1)
  {
    case 0:
    case 1:
      return v3;
    case 2:
      unint64_t v5 = a2[-1].n128_u64[0];
      uint64_t v4 = a2 - 1;
      if (v5 < a1->n128_u64[0]) {
        goto LABEL_9;
      }
      return 1;
    case 3:
      __n128 v12 = (long long *)&a1[1];
      unint64_t v13 = a1[1].n128_u64[0];
      unint64_t v15 = a2[-1].n128_u64[0];
      uint64_t v4 = a2 - 1;
      unint64_t v14 = v15;
      if (v13 < a1->n128_u64[0])
      {
        if (v14 >= v13)
        {
          long long v38 = (__int128)*a1;
          *a1 = (__n128)*v12;
          *__n128 v12 = v38;
          if (v4->n128_u64[0] < a1[1].n128_u64[0])
          {
            long long v39 = *v12;
            *__n128 v12 = (__int128)*v4;
            __n128 *v4 = (__n128)v39;
          }
        }
        else
        {
LABEL_9:
          __n128 v16 = *a1;
          *a1 = *v4;
          __n128 *v4 = v16;
        }
        return 1;
      }
      if (v14 >= v13) {
        return 1;
      }
      long long v25 = *v12;
      *__n128 v12 = (__int128)*v4;
      __n128 *v4 = (__n128)v25;
      goto LABEL_43;
    case 4:
      __n128 v12 = (long long *)&a1[1];
      unint64_t v17 = a1[1].n128_u64[0];
      uint64_t v18 = (long long *)&a1[2];
      unint64_t v19 = a1[2].n128_u64[0];
      unsigned int v20 = a2 - 1;
      unint64_t v21 = a1->n128_u64[0];
      if (v17 >= a1->n128_u64[0])
      {
        if (v19 < v17)
        {
          long long v26 = *v12;
          *__n128 v12 = *v18;
          *uint64_t v18 = v26;
          if (*(void *)v12 < v21)
          {
            long long v27 = (__int128)*a1;
            *a1 = (__n128)*v12;
            *__n128 v12 = v27;
          }
        }
      }
      else
      {
        if (v19 >= v17)
        {
          long long v40 = (__int128)*a1;
          *a1 = (__n128)*v12;
          *__n128 v12 = v40;
          if (v19 >= a1[1].n128_u64[0]) {
            goto LABEL_40;
          }
          long long v22 = *v12;
          *__n128 v12 = *v18;
        }
        else
        {
          long long v22 = (__int128)*a1;
          *a1 = (__n128)*v18;
        }
        *uint64_t v18 = v22;
      }
LABEL_40:
      if (v20->n128_u64[0] < *(void *)v18)
      {
        __n128 v41 = (__n128)*v18;
        *uint64_t v18 = (__int128)*v20;
        *unsigned int v20 = v41;
        if (*(void *)v18 < *(void *)v12)
        {
          long long v42 = *v12;
          *__n128 v12 = *v18;
          *uint64_t v18 = v42;
LABEL_43:
          if (a1[1].n128_u64[0] < a1->n128_u64[0])
          {
            long long v43 = (__int128)*a1;
            *a1 = (__n128)*v12;
            *__n128 v12 = v43;
          }
        }
      }
      return 1;
    case 5:
      std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,AGX::BlitContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::copyTextureToTexture(AGXG17FamilyTexture *,unsigned int,unsigned int,AGXG17FamilyTexture *,unsigned int,unsigned int,unsigned int,unsigned int)::{lambda(AGX::BlitContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::copyTextureToTexture(AGXG17FamilyTexture *,unsigned int,unsigned int,AGXG17FamilyTexture *,unsigned int,unsigned int,unsigned int,unsigned int)::MemRange,AGX::BlitContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::copyTextureToTexture(AGXG17FamilyTexture *,unsigned int,unsigned int,AGXG17FamilyTexture *,unsigned int,unsigned int,unsigned int,unsigned int)::MemRange)#1} &,AGX::BlitContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::copyTextureToTexture(AGXG17FamilyTexture *,unsigned int,unsigned int,AGXG17FamilyTexture *,unsigned int,unsigned int,unsigned int,unsigned int)::MemRange*>(a1, a1 + 1, a1[2].n128_u64, (__n128 *)a1[3].n128_u64, (__n128 *)a2[-1].n128_u64, a3);
      return 1;
    default:
      unint64_t v6 = a1 + 2;
      unint64_t v7 = a1[2].n128_u64[0];
      unint64_t v8 = a1 + 1;
      unint64_t v9 = a1[1].n128_u64[0];
      unint64_t v10 = a1->n128_u64[0];
      if (v9 >= a1->n128_u64[0])
      {
        if (v7 < v9)
        {
          __n128 v23 = *v8;
          __n128 *v8 = *v6;
          *unint64_t v6 = v23;
          if (v8->n128_u64[0] < v10)
          {
            __n128 v24 = *a1;
            *a1 = *v8;
            __n128 *v8 = v24;
          }
        }
      }
      else
      {
        if (v7 >= v9)
        {
          __n128 v28 = *a1;
          *a1 = *v8;
          __n128 *v8 = v28;
          if (v7 >= a1[1].n128_u64[0]) {
            goto LABEL_25;
          }
          __n128 v11 = *v8;
          __n128 *v8 = *v6;
        }
        else
        {
          __n128 v11 = *a1;
          *a1 = *v6;
        }
        *unint64_t v6 = v11;
      }
LABEL_25:
      uint64_t v29 = a1 + 3;
      if (&a1[3] == a2) {
        return 1;
      }
      uint64_t v30 = 0;
      int v31 = 0;
      break;
  }
  while (1)
  {
    __n128 v33 = *v29;
    unint64_t v34 = v6->n128_u64[0];
    unint64_t v35 = v29->n128_u64[0];
    if (v29->n128_u64[0] < v34)
    {
      uint64_t v36 = v30;
      do
      {
        *(__n128 *)((char *)a1 + v36 + 48) = *(__n128 *)((char *)a1 + v36 + 32);
        if (v36 == -32)
        {
          int32x2_t v32 = a1;
          goto LABEL_28;
        }
        unint64_t v37 = *(unint64_t *)((char *)a1[1].n128_u64 + v36);
        v36 -= 16;
      }
      while (v35 < v37);
      int32x2_t v32 = (__n128 *)((char *)a1 + v36 + 48);
LABEL_28:
      *int32x2_t v32 = v33;
      if (++v31 == 8) {
        return &v29[1] == a2;
      }
    }
    unint64_t v6 = v29;
    v30 += 16;
    if (++v29 == a2) {
      return 1;
    }
  }
}

uint64_t ___ZN3AGX11BlitContextINS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE20copyTextureToTextureEP19AGXG17FamilyTexturejjS7_jjjj_block_invoke_5(uint64_t a1, uint64_t a2)
{
  return a2;
}

void AGX::BlitContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::fillTexture(uint64_t a1, uint64_t a2, unsigned int a3, unsigned int a4, uint64_t *a5, unsigned __int8 *a6, unint64_t a7)
{
  uint64_t v186 = a1;
  uint64_t v223 = *MEMORY[0x263EF8340];
  uint64_t v11 = *(void *)(a2 + 536);
  uint64_t v221 = a2;
  long long v222 = *(_OWORD *)(v11 + 496);
  uint64_t v12 = *(void *)(v11 + 488);
  unsigned int v179 = a4;
  if (v12 && (unsigned int v13 = *(_DWORD *)(v12 + 1080)) != 0)
  {
    int v14 = 1;
    unsigned int v15 = a3;
    if (v13 > a3)
    {
      if (*(unsigned char *)(v11 + 57)) {
        int v14 = 2;
      }
      else {
        int v14 = 1;
      }
    }
  }
  else
  {
    unsigned int v15 = a3;
    int v14 = 0;
  }
  uint64_t v16 = *(void *)(v11 + 208);
  uint64_t v17 = *(unsigned __int8 *)(v16 + 88);
  uint64_t v18 = *(unsigned int *)(v11 + 112);
  BOOL v19 = v17 == 16 && v18 == 2;
  char v20 = v19;
  uint64_t v21 = *(unsigned int *)(v11 + 112);
  uint64_t TextureViewFormat = (char ***)AGX::BlitContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::getTextureViewFormat(*(unsigned __int8 *)(v16 + 88), v18, *(void *)(v11 + 32), 0, v14, v20);
  unint64_t v185 = (_DWORD *)v23;
  unint64_t v24 = *(void *)(v11 + 24);
  if (v24 <= 9)
  {
    if (((1 << v24) & 0x17C) != 0)
    {
LABEL_18:
      a5[5] = 1;
      goto LABEL_19;
    }
    if (((1 << v24) & 3) != 0)
    {
      a5[4] = 1;
      goto LABEL_18;
    }
    if (v24 == 9)
    {
      unint64_t v97 = v21 * (unint64_t)v17;
      uint64_t v98 = v97 * *a5;
      unint64_t v99 = a5[3] * v97;
      AGX::BlitContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::fillBuffer(v186, a2, v98, v99, a6, a7);
      return;
    }
  }
LABEL_19:
  int v25 = *(_DWORD *)(v11 + 236);
  if (v25) {
    BOOL v26 = 1;
  }
  else {
    BOOL v26 = v12 == 0;
  }
  int v27 = v15;
  if (v26 || *(_DWORD *)(v12 + 1080) <= v15)
  {
    char v53 = v25 != 0;
    uint64_t v54 = 4;
    if (HIDWORD(v185) < 2) {
      uint64_t v54 = 2;
    }
    if (v24 == 7) {
      uint64_t v55 = 7;
    }
    else {
      uint64_t v55 = v54;
    }
    uint64_t TextureViewForBlit = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::createTextureViewForBlit((uint64_t)&v204, v11, v55, (uint64_t)TextureViewFormat, *(void *)(v11 + 40), *(void *)(v11 + 56), *(_DWORD *)(v11 + 308), v179, v15, 0, SHIDWORD(v185), *(void *)(v11 + 152), *(void *)(v11 + 160), *(void *)(v11 + 168), *(_DWORD *)(v11 + 176), *(_DWORD *)(v11 + 180), *(void *)(v11 + 184), v53, 0);
    uint64_t v184 = (char ***)&v162;
    unint64_t v57 = *(unsigned __int8 *)(v215 + 88);
    MEMORY[0x270FA5388](TextureViewForBlit);
    unint64_t v59 = (unsigned __int8 *)&v162 - v58;
    if (v57 <= a7) {
      goto LABEL_101;
    }
    if (v57 >= 2)
    {
      unint64_t v84 = 0;
      unint64_t v60 = v57 & 0xFE;
      do
      {
        unsigned __int8 v85 = a6[(v84 + 1) % a7];
        uint64_t v86 = (char *)&v59[v84];
        char *v86 = a6[v84 % a7];
        v86[1] = v85;
        v84 += 2;
      }
      while (v60 != v84);
      if (v60 == v57) {
        goto LABEL_100;
      }
    }
    else
    {
      unint64_t v60 = 0;
    }
    do
    {
      v59[v60] = a6[v60 % a7];
      ++v60;
    }
    while (v57 != v60);
LABEL_100:
    a6 = v59;
LABEL_101:
    int32x4_t v198 = vuzp1q_s32(*(int32x4_t *)(a5 + 3), *(int32x4_t *)a5);
    uint64_t v199 = 0;
    LODWORD(v200) = 0;
    uint64_t v87 = a5[2];
    HIDWORD(v220) = 0;
    if (a5[5])
    {
      unsigned int v88 = 1;
      do
      {
        if (v11 && *(_DWORD *)(v11 + 112) > 1u)
        {
          unsigned int v89 = 32 - __clz(v211 - 1);
          if (v211 < 2) {
            LOBYTE(v89) = 0;
          }
          uint64_t v196 = 0;
          LODWORD(v187) = 2;
          DWORD1(v187) = v211;
          unint64_t v188 = __PAIR64__(v198.u32[0], v185);
          int v189 = v198.i32[1];
          unsigned int v190 = 0;
          int v191 = v198.i32[0] << v89;
          int v192 = v198.i32[1];
          uint64_t v193 = 0;
          *((void *)&v187 + 1) = v198.i64[1];
          unint64_t v194 = v198.u64[1];
          *(_DWORD *)unint64_t v195 = v87 + v88 - 1;
          *(void *)&v195[4] = v198.i64[0];
          HIBYTE(v196) = v198.i64[1] != 0;
          AGX::BlitDispatchContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::render3D(v186, (uint64_t)&v221, (uint64_t)&v204, 0, 0, 0, (uint64_t)a6, v57, (uint64_t)&v187, (unsigned char *)&v220 + 4);
        }
        else
        {
          AGX::BlitDispatchContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::blitCDM(v186, (uint64_t)&v221, (uint64_t)&v204, 0, 0, 0, 0, (int *)&v220 + 1, v87 + v88 - 1, (unsigned int *)&v198, (char)v185, v57, 0, a6, 2);
        }
        BOOL v61 = a5[5] > (unint64_t)v88++;
      }
      while (v61);
    }
    *(void *)&long long v204 = &unk_26F853CB0;
    std::unique_ptr<AGX::HAL200::CompressionMetadata>::~unique_ptr[abi:nn180100](v219);
    if (v216 && !v218)
    {
      uint64_t v90 = (os_unfair_lock_s *)(v217 + 56);
      os_unfair_lock_lock((os_unfair_lock_t)(v217 + 56));
      uint64_t v91 = v217;
      uint64_t v92 = v216;
      uint64_t v93 = *(void *)(v217 + 48);
      uint64_t v94 = (int *)MEMORY[0x263F4B188];
      *(_DWORD *)(*(void *)(*(void *)(*(void *)(v217 + 40) + 8) + (int)*MEMORY[0x263F4B188] + 24) + 32 * v216) = v93;
      uint64_t v95 = v93;
      atomic_compare_exchange_strong((atomic_ullong *volatile)(v91 + 48), (unint64_t *)&v95, (v93 & 0xFFFFFFFF00000000 | v92) + 0x100000000);
      if (v95 != v93)
      {
        uint64_t v96 = v95;
        do
        {
          *(_DWORD *)(*(void *)(*(void *)(*(void *)(v91 + 40) + 8) + *v94 + 24) + 32 * v92) = v95;
          atomic_compare_exchange_strong((atomic_ullong *volatile)(v91 + 48), (unint64_t *)&v96, (v95 & 0xFFFFFFFF00000000 | v92) + 0x100000000);
          BOOL v19 = v96 == v95;
          uint64_t v95 = v96;
        }
        while (!v19);
      }
      os_unfair_lock_unlock(v90);
    }
    return;
  }
  uint64_t v184 = TextureViewFormat;
  int v28 = *(_DWORD *)*MEMORY[0x263F4B1E8];
  v183.i64[0] = v21;
  if (v28)
  {
    IOGPUDeviceTraceEvent();
    v183.i64[0] = *(unsigned int *)(v11 + 112);
  }
  uint64_t v220 = 0;
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getMacroblockDimensions(v11, (_DWORD *)&v220 + 1, (unsigned int *)&v220);
  int v30 = v220;
  int v29 = HIDWORD(v220);
  int v165 = v183.i32[0] > 2u;
  unsigned int v31 = *(_DWORD *)(v11 + 128) >> (*(unsigned char *)(v11 + 144) + v15);
  if (v31 <= 1) {
    unsigned int v31 = 1;
  }
  unsigned int v32 = *(_DWORD *)(v11 + 132) >> (*(unsigned char *)(v11 + 144) + v15);
  if (v32 <= 1) {
    unsigned int v32 = 1;
  }
  uint64_t v33 = a5[1];
  unsigned int v34 = (HIDWORD(v220) - 1 + *a5) / HIDWORD(v220);
  unsigned int v35 = v220 - 1 + v33;
  uint64_t v36 = a5[3];
  uint64_t v37 = a5[4];
  uint64_t v170 = *a5;
  uint64_t v177 = v33;
  unsigned int v38 = v37 + v33;
  unsigned int v163 = (v220 - 1 + v32) / v220;
  unsigned int v164 = (HIDWORD(v220) - 1 + v31) / HIDWORD(v220);
  if (v36 + v170 == v31) {
    unsigned int v39 = (HIDWORD(v220) - 1 + v31) / HIDWORD(v220);
  }
  else {
    unsigned int v39 = (v36 + v170) / HIDWORD(v220);
  }
  if (v38 == v32) {
    unsigned int v40 = (v220 - 1 + v32) / v220;
  }
  else {
    unsigned int v40 = v38 / v220;
  }
  unsigned int v41 = v35 / v220;
  unsigned int v173 = v39 - v34;
  if (v39 < v34 || (unsigned int v178 = v40 - v41, v40 < v41))
  {
    unsigned int v178 = 0;
    unsigned int v173 = 0;
  }
  uint64_t v42 = v186;
  int v43 = *(unsigned __int16 *)(v186 + 6616);
  unsigned int v166 = v41;
  unsigned int v167 = v34;
  int v168 = HIDWORD(v220);
  if (v43)
  {
    unsigned int v44 = *(unint64_t **)(v186 + 776);
    if ((unint64_t)v44 + 4 > *(void *)(v186 + 768))
    {
      unint64_t v182 = (_DWORD *)v36;
      LODWORD(v181) = v40;
      int v159 = AGX::DataBufferAllocator<34ul>::growNoInline(v186 + 24, 22, 0);
      unsigned int v40 = v181;
      uint64_t v36 = (uint64_t)v182;
      unsigned int v34 = v167;
      int v29 = v168;
      unsigned int v41 = v166;
      uint64_t v45 = *(unint64_t **)(v186 + 776);
      if (v159)
      {
        if ((unint64_t)v45 + 4 > *(void *)(v186 + 768)) {
          abort();
        }
        uint64_t v42 = v186;
        *(void *)(v186 + 784) = (char *)v45 + 4;
        *unsigned int v44 = __ROR8__((char *)v45 + *(void *)(v42 + 792), 32) & 0xFFFFFFFF0000FFFFLL | 0x20000000;
        uint64_t v45 = *(unint64_t **)(v42 + 776);
        unsigned int v41 = v166;
        unsigned int v34 = v167;
        int v29 = v168;
        uint64_t v36 = (uint64_t)v182;
        unsigned int v40 = v181;
      }
    }
    else
    {
      *(void *)(v186 + 784) = (char *)v44 + 4;
      uint64_t v45 = v44;
    }
    *(_DWORD *)uint64_t v45 = 1610613088;
    *(void *)(v42 + 776) = (char *)v45 + 4;
    *(_WORD *)(v42 + 4304) = 0;
    *(_WORD *)(v42 + 6616) = 0;
    int v27 = v15;
  }
  uint64_t v46 = v41 * v30;
  unint64_t v180 = v40 * v30;
  *(void *)&long long v181 = v34 * v29;
  unint64_t v176 = v37 + v177;
  unint64_t v47 = v39 * v29;
  unint64_t v175 = v36 + v170;
  unsigned int v162 = v27;
  if (v36 + v170 > v47 || v170 != (void)v181 || v177 != v46 || v176 > v180)
  {
    uint64_t v48 = 4;
    if (v183.i32[0] < 2u) {
      uint64_t v48 = 2;
    }
    if (*(void *)(v11 + 24) == 7) {
      uint64_t v49 = 7;
    }
    else {
      uint64_t v49 = v48;
    }
    AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::createTextureViewForBlit((uint64_t)&v204, v11, v49, (uint64_t)v184, *(void *)(v11 + 40), *(void *)(v11 + 56), *(_DWORD *)(v11 + 308), v179, v27, 0, v183.i32[0], *(void *)(v11 + 152), *(void *)(v11 + 160), *(void *)(v11 + 168), *(_DWORD *)(v11 + 176), *(_DWORD *)(v11 + 180), *(void *)(v11 + 184), *(_DWORD *)(v11 + 236) != 0, v183.i32[0] == 4);
    uint64_t v184 = (char ***)*(unsigned __int8 *)(v215 + 88);
    int v203 = 0;
    unint64_t v50 = a5[5];
    if (v50)
    {
      LODWORD(v182) = *((_DWORD *)a5 + 4);
      unsigned int v51 = v183.i32[0] == 4;
      BOOL v169 = ((v47 << v51) | (v46 << v51)) != 0;
      if (v173 && v178)
      {
        unsigned int v174 = v46 << v51;
        unsigned int v171 = v47 << v51;
        unsigned int v172 = v180 << v51;
        unsigned int v52 = 1;
        do
        {
          unsigned int v62 = v182 + v52 - 1;
          if (v177 != v46)
          {
            unsigned int v63 = *((_DWORD *)a5 + 6) << v51;
            int v64 = *((_DWORD *)a5 + 2);
            int v65 = (v46 - v64) << v51;
            unsigned int v66 = *(_DWORD *)a5 << v51;
            unsigned int v67 = v64 << v51;
            v198.i64[0] = __PAIR64__(v65, v63);
            v198.i64[1] = __PAIR64__(v67, v66);
            uint64_t v199 = 0;
            LODWORD(v200) = 0;
            if (v183.i32[0] == 4)
            {
              AGX::BlitDispatchContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::blitCDM(v186, (uint64_t)&v221, (uint64_t)&v204, 0, 0, 0, 0, &v203, v62, (unsigned int *)&v198, (char)v185, (unint64_t)v184, 0, a6, 0);
            }
            else
            {
              unsigned int v68 = 32 - __clz(v211 - 1);
              uint64_t v196 = 0;
              if (v211 < 2) {
                LOBYTE(v68) = 0;
              }
              LODWORD(v187) = 2;
              *(void *)((char *)&v187 + 4) = __PAIR64__(v66, v211);
              unint64_t v188 = __PAIR64__(v63, v185);
              int v189 = v65;
              unsigned int v190 = 0;
              int v191 = v63 << v68;
              int v192 = v65;
              uint64_t v193 = 0;
              HIDWORD(v187) = v67;
              unint64_t v194 = __PAIR64__(v67, v66);
              *(_DWORD *)unint64_t v195 = v182 + v52 - 1;
              *(_DWORD *)&v195[4] = v63;
              *(_DWORD *)&v195[8] = v65;
              HIBYTE(v196) = (v66 | v67) != 0;
              AGX::BlitDispatchContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::render3D(v186, (uint64_t)&v221, (uint64_t)&v204, 0, 0, 0, (uint64_t)a6, (uint64_t)v184, (uint64_t)&v187, &v203);
            }
          }
          if (v176 > v180)
          {
            unsigned int v69 = *((_DWORD *)a5 + 6) << v51;
            int v70 = (*((_DWORD *)a5 + 8) + *((_DWORD *)a5 + 2) - v180) << v51;
            unsigned int v71 = *(_DWORD *)a5 << v51;
            v198.i64[0] = __PAIR64__(v70, v69);
            v198.i64[1] = __PAIR64__(v172, v71);
            uint64_t v199 = 0;
            LODWORD(v200) = 0;
            if (v183.i32[0] == 4)
            {
              AGX::BlitDispatchContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::blitCDM(v186, (uint64_t)&v221, (uint64_t)&v204, 0, 0, 0, 0, &v203, v62, (unsigned int *)&v198, (char)v185, (unint64_t)v184, 0, a6, 0);
            }
            else
            {
              unsigned int v72 = 32 - __clz(v211 - 1);
              uint64_t v196 = 0;
              if (v211 < 2) {
                LOBYTE(v72) = 0;
              }
              LODWORD(v187) = 2;
              *(void *)((char *)&v187 + 4) = __PAIR64__(v71, v211);
              unint64_t v188 = __PAIR64__(v69, v185);
              int v189 = v70;
              unsigned int v190 = 0;
              int v191 = v69 << v72;
              int v192 = v70;
              uint64_t v193 = 0;
              HIDWORD(v187) = v172;
              unint64_t v194 = __PAIR64__(v172, v71);
              *(_DWORD *)unint64_t v195 = v182 + v52 - 1;
              *(_DWORD *)&v195[4] = v69;
              *(_DWORD *)&v195[8] = v70;
              HIBYTE(v196) = (v71 | v172) != 0;
              AGX::BlitDispatchContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::render3D(v186, (uint64_t)&v221, (uint64_t)&v204, 0, 0, 0, (uint64_t)a6, (uint64_t)v184, (uint64_t)&v187, &v203);
            }
          }
          if (v170 != (void)v181)
          {
            unint64_t v73 = a5[4] + a5[1];
            if (v73 >= v220 * v178 + v46) {
              int v74 = v220 * v178;
            }
            else {
              int v74 = v73 - v46;
            }
            int v75 = (v181 - *(_DWORD *)a5) << v51;
            int v76 = v74 << v51;
            unsigned int v77 = *(_DWORD *)a5 << v51;
            v198.i64[0] = __PAIR64__(v76, v75);
            v198.i64[1] = __PAIR64__(v174, v77);
            uint64_t v199 = 0;
            LODWORD(v200) = 0;
            if (v183.i32[0] == 4)
            {
              AGX::BlitDispatchContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::blitCDM(v186, (uint64_t)&v221, (uint64_t)&v204, 0, 0, 0, 0, &v203, v62, (unsigned int *)&v198, (char)v185, (unint64_t)v184, 0, a6, 0);
            }
            else
            {
              unsigned int v78 = 32 - __clz(v211 - 1);
              uint64_t v196 = 0;
              if (v211 < 2) {
                LOBYTE(v78) = 0;
              }
              LODWORD(v187) = 2;
              *(void *)((char *)&v187 + 4) = __PAIR64__(v77, v211);
              unint64_t v188 = __PAIR64__(v75, v185);
              int v189 = v76;
              unsigned int v190 = 0;
              int v191 = v75 << v78;
              int v192 = v76;
              uint64_t v193 = 0;
              HIDWORD(v187) = v174;
              unint64_t v194 = __PAIR64__(v174, v77);
              *(_DWORD *)unint64_t v195 = v182 + v52 - 1;
              *(_DWORD *)&v195[4] = v75;
              *(_DWORD *)&v195[8] = v76;
              HIBYTE(v196) = (v77 | v174) != 0;
              AGX::BlitDispatchContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::render3D(v186, (uint64_t)&v221, (uint64_t)&v204, 0, 0, 0, (uint64_t)a6, (uint64_t)v184, (uint64_t)&v187, &v203);
            }
          }
          if (v175 > v47)
          {
            unint64_t v79 = a5[4] + a5[1];
            if (v79 >= v220 * v178 + v46) {
              int v80 = v220 * v178;
            }
            else {
              int v80 = v79 - v46;
            }
            int v81 = (*((_DWORD *)a5 + 6) + *(_DWORD *)a5 - v47) << v51;
            int v82 = v80 << v51;
            v198.i64[0] = __PAIR64__(v82, v81);
            v198.i64[1] = __PAIR64__(v174, v171);
            uint64_t v199 = 0;
            LODWORD(v200) = 0;
            if (v183.i32[0] == 4)
            {
              AGX::BlitDispatchContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::blitCDM(v186, (uint64_t)&v221, (uint64_t)&v204, 0, 0, 0, 0, &v203, v62, (unsigned int *)&v198, (char)v185, (unint64_t)v184, 0, a6, 0);
            }
            else
            {
              unsigned int v83 = 32 - __clz(v211 - 1);
              uint64_t v196 = 0;
              if (v211 < 2) {
                LOBYTE(v83) = 0;
              }
              LODWORD(v187) = 2;
              *(void *)((char *)&v187 + 4) = __PAIR64__(v171, v211);
              unint64_t v188 = __PAIR64__(v81, v185);
              int v189 = v82;
              unsigned int v190 = 0;
              int v191 = v81 << v83;
              int v192 = v82;
              uint64_t v193 = 0;
              HIDWORD(v187) = v174;
              unint64_t v194 = __PAIR64__(v174, v171);
              *(_DWORD *)unint64_t v195 = v182 + v52 - 1;
              *(_DWORD *)&v195[4] = v81;
              *(_DWORD *)&v195[8] = v82;
              HIBYTE(v196) = v169;
              AGX::BlitDispatchContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::render3D(v186, (uint64_t)&v221, (uint64_t)&v204, 0, 0, 0, (uint64_t)a6, (uint64_t)v184, (uint64_t)&v187, &v203);
            }
          }
          BOOL v61 = a5[5] > (unint64_t)v52++;
        }
        while (v61);
      }
      else if (v183.i32[0] == 4)
      {
        unint64_t v100 = 0;
        uint32x4_t v183 = (uint32x4_t)vdupq_n_s32(v51);
        unsigned int v101 = 1;
        do
        {
          int32x4_t v198 = (int32x4_t)vshlq_u32((uint32x4_t)vuzp1q_s32(*(int32x4_t *)(a5 + 3), *(int32x4_t *)a5), v183);
          uint64_t v199 = 0;
          LODWORD(v200) = 0;
          AGX::BlitDispatchContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::blitCDM(v186, (uint64_t)&v221, (uint64_t)&v204, 0, 0, 0, 0, &v203, v182 + v101 - 1, (unsigned int *)&v198, (char)v185, (unint64_t)v184, 0, a6, v50 - 1 == v100);
          unint64_t v100 = v101;
          unint64_t v50 = a5[5];
          ++v101;
        }
        while (v50 > v100);
      }
      else
      {
        unsigned int v102 = 1;
        do
        {
          unsigned int v103 = *((_DWORD *)a5 + 6) << v51;
          int v104 = *((_DWORD *)a5 + 8) << v51;
          unsigned int v105 = *(_DWORD *)a5 << v51;
          unsigned int v106 = *((_DWORD *)a5 + 2) << v51;
          v198.i64[0] = __PAIR64__(v104, v103);
          v198.i64[1] = __PAIR64__(v106, v105);
          uint64_t v199 = 0;
          LODWORD(v200) = 0;
          unsigned int v107 = 32 - __clz(v211 - 1);
          if (v211 < 2) {
            LOBYTE(v107) = 0;
          }
          uint64_t v196 = 0;
          LODWORD(v187) = 2;
          *(void *)((char *)&v187 + 4) = __PAIR64__(v105, v211);
          unint64_t v188 = __PAIR64__(v103, v185);
          int v189 = v104;
          unsigned int v190 = 0;
          int v191 = v103 << v107;
          int v192 = v104;
          uint64_t v193 = 0;
          HIDWORD(v187) = v106;
          unint64_t v194 = __PAIR64__(v106, v105);
          *(_DWORD *)unint64_t v195 = v182 + v102 - 1;
          *(_DWORD *)&v195[4] = v103;
          *(_DWORD *)&v195[8] = v104;
          HIBYTE(v196) = (v105 | v106) != 0;
          AGX::BlitDispatchContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::render3D(v186, (uint64_t)&v221, (uint64_t)&v204, 0, 0, 0, (uint64_t)a6, (uint64_t)v184, (uint64_t)&v187, &v203);
          BOOL v61 = a5[5] > (unint64_t)v102++;
        }
        while (v61);
      }
    }
    *(void *)&long long v204 = &unk_26F853CB0;
    std::unique_ptr<AGX::HAL200::CompressionMetadata>::~unique_ptr[abi:nn180100](v219);
    if (v216 && !v218)
    {
      int v108 = (os_unfair_lock_s *)(v217 + 56);
      os_unfair_lock_lock((os_unfair_lock_t)(v217 + 56));
      uint64_t v109 = v217;
      uint64_t v110 = v216;
      uint64_t v111 = *(void *)(v217 + 48);
      uint64_t v112 = (int *)MEMORY[0x263F4B188];
      *(_DWORD *)(*(void *)(*(void *)(*(void *)(v217 + 40) + 8) + (int)*MEMORY[0x263F4B188] + 24) + 32 * v216) = v111;
      uint64_t v113 = v111;
      atomic_compare_exchange_strong((atomic_ullong *volatile)(v109 + 48), (unint64_t *)&v113, (v111 & 0xFFFFFFFF00000000 | v110) + 0x100000000);
      if (v113 != v111)
      {
        uint64_t v114 = v113;
        do
        {
          *(_DWORD *)(*(void *)(*(void *)(*(void *)(v109 + 40) + 8) + *v112 + 24) + 32 * v110) = v113;
          atomic_compare_exchange_strong((atomic_ullong *volatile)(v109 + 48), (unint64_t *)&v114, (v113 & 0xFFFFFFFF00000000 | v110) + 0x100000000);
          BOOL v19 = v114 == v113;
          uint64_t v113 = v114;
        }
        while (!v19);
      }
      os_unfair_lock_unlock(v108);
    }
  }
  if (v173 && v178)
  {
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)v186 + 16))(v186, 0, 1);
    AGX::BlitDispatchContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::bindComputeResources(v186, (uint64_t)&v221, 0);
    if (!*(void *)(*(void *)(v186 + 1504) + 520))
    {
      AGX::BlitDispatchContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::endPreviousBlitCommand(v186, 0, v115, v116, v117);
      AGX::BlitDispatchContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::beginComputePass(v186, 0);
      AGX::BlitDispatchContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::bindComputeResources(v186, (uint64_t)&v221, 0);
      uint64_t v118 = v186;
      if (!*(void *)(*(void *)(v186 + 1504) + 520))
      {
        uint64_t v119 = *(void *)(v186 + 1560) - *(void *)(v186 + 1576);
        *(_DWORD *)(v119 + 12) = 1;
        if ((*(unsigned char *)(v119 + 8) & 4) != 0) {
          **(unsigned char **)(*(void *)(v118 + 8) + 688) = 1;
        }
      }
    }
    unsigned __int8 v120 = *(unsigned char *)(*(void *)(v11 + 208) + 88);
    isLargeMacrouint64_t block = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::isLargeMacroblock(v11);
    unsigned __int8 v122 = 4 * v120;
    if (!isLargeMacroblock) {
      unsigned __int8 v122 = v120;
    }
    uint64_t v123 = *(void *)(v11 + 32);
    unint64_t v124 = v123 & 0xFFFFFFFFFFFFFFFELL;
    BOOL v129 = (unint64_t)(v123 - 631) < 2
        || v124 == 552
        || v124 == 638
        || v124 == 640
        || (unint64_t)(v123 - 633) < 5
        || v123 == 630;
    v198.i32[2] = 18;
    uint64_t v200 = 0;
    uint64_t v201 = 0;
    uint64_t v199 = 0;
    v198.i64[0] = (uint64_t)&unk_26F852288;
    if (v129) {
      int v130 = 42;
    }
    else {
      int v130 = (8 * v122) | 2;
    }
    unsigned int v202 = v130;
    BlitProgramVariant = (_DWORD *)AGX::Device<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::findOrCreateBlitProgramVariant(*(void *)(*(void *)(v186 + 1464) + 808), (uint64_t)&v198);
    unsigned int v132 = BlitProgramVariant[99];
    unsigned int v133 = BlitProgramVariant[102];
    int v134 = BlitProgramVariant[107];
    unsigned int v135 = 4 * BlitProgramVariant[668];
    unint64_t v185 = (_DWORD *)(v186 + 1808);
    if (AGX::SpillInfoGen3<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::checkSpillParamsForCompute(v186 + 1808, v132, v133, v134, v135, 0, 0))AGX::BlitDispatchContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::bindComputeUSCSpillBuffer(v186); {
    v183.i32[0] = v168 << v165;
    }
    unint64_t v182 = BlitProgramVariant;
    unsigned int v136 = BlitProgramVariant[420];
    do
    {
      IOGPUResourceListAddResource();
      v136 &= ~(1 << __clz(__rbit32(v136)));
    }
    while (v136);
    unsigned int v202 = v202 & 0xFFFFF800 | 6;
    unsigned int v137 = (_DWORD *)AGX::Device<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::findOrCreateBlitProgramVariant(*(void *)(*(void *)(v186 + 1464) + 808), (uint64_t)&v198);
    if (AGX::SpillInfoGen3<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::checkSpillParamsForCompute((uint64_t)v185, v137[99], v137[102], v137[107], 4 * v137[668], 0, 0))AGX::BlitDispatchContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::bindComputeUSCSpillBuffer(v186); {
    uint64_t v184 = (char ***)(v186 + 1760);
    }
    unint64_t v185 = v137;
    unsigned int v138 = v137[420];
    do
    {
      IOGPUResourceListAddResource();
      v138 &= ~(1 << __clz(__rbit32(v138)));
    }
    while (v138);
    char v139 = (void *)(v186 + 24);
    uint64_t v140 = *(void *)(v186 + 168);
    uint64_t v141 = v140 + 48;
    if ((unint64_t)(v140 + 48) > *(void *)(v186 + 160))
    {
      int v160 = AGX::DataBufferAllocator<34ul>::growNoInline(v186 + 24, 3, 0);
      uint64_t v140 = *(void *)(v186 + 168);
      if (!v160)
      {
        uint64_t v144 = v186;
        unsigned int v142 = v179;
        unsigned int v143 = v162;
        goto LABEL_175;
      }
      uint64_t v141 = v140 + 48;
      unsigned int v142 = v179;
      unsigned int v143 = v162;
      if ((unint64_t)(v140 + 48) > *(void *)(v186 + 160)) {
        abort();
      }
    }
    else
    {
      unsigned int v142 = v179;
      unsigned int v143 = v162;
    }
    uint64_t v144 = v186;
    *(void *)(v186 + 176) = v141;
LABEL_175:
    uint64_t v145 = *(void *)(v144 + 184);
    *(void *)(v144 + 168) = v140 + 48;
    int v203 = 0;
    AGX::BlitDispatchParametersGen2_2<AGX::HAL200::Encoders,AGX::HAL200::Classes>::setupFastClearArguments(v140, (unsigned int *)&v203, (unsigned __int16 *)a6, v11, v143, v167, v166, v164, v163);
    uint64_t v146 = v145 + v140;
    unint64_t v194 = 0;
    *(void *)unint64_t v195 = 0;
    uint64_t v193 = 0;
    long long v147 = 0uLL;
    long long v209 = 0u;
    long long v210 = 0u;
    long long v207 = 0u;
    long long v208 = 0u;
    long long v205 = 0u;
    long long v206 = 0u;
    long long v204 = 0u;
    uint64_t v211 = 0;
    uint64_t v212 = v145 + v140;
    uint64_t v148 = *(void *)(v144 + 1936);
    uint64_t v214 = v148;
    int v197 = 0;
    HIDWORD(v196) = 0;
    unint64_t v188 = 0x100000001;
    long long v149 = xmmword_242EA7DB0;
    long long v187 = xmmword_242EA7DB0;
    int v189 = v173 << (2 * (v183.i32[0] == 32));
    unsigned int v190 = v178;
    int v191 = 1;
    if (a5[5])
    {
      long long v181 = xmmword_242EA7DB0;
      v183.i64[0] = v145 + v140;
      int v150 = *((_DWORD *)a5 + 4);
      unsigned int v151 = 1;
      do
      {
        uint64_t GPUVirtualAddress = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getGPUVirtualAddress(*(void *)(v11 + 488), v142, *(_DWORD *)(v11 + 144) + v143, v150 + v151 - 1, 0);
        AGX::BlitUSCStateLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes>::emitComputeProgramVariantArguments(v184, v139, (uint64_t)v185, (uint64_t)&v204, (uint64_t)&v187, 0, 1, 1, (_DWORD *)(v144 + 1532));
        unint64_t v152 = a5[5];
        BOOL v61 = v152 > v151++;
      }
      while (v61);
      uint64_t v148 = *(void *)(v186 + 1936);
      BOOL v153 = v152 == 0;
      uint64_t v146 = v183.i64[0];
      long long v147 = 0uLL;
      long long v149 = v181;
    }
    else
    {
      BOOL v153 = 1;
    }
    unint64_t v194 = 0;
    *(void *)unint64_t v195 = 0;
    uint64_t v193 = 0;
    long long v209 = v147;
    long long v210 = v147;
    long long v207 = v147;
    long long v208 = v147;
    long long v205 = v147;
    long long v206 = v147;
    long long v204 = v147;
    uint64_t v211 = 0;
    uint64_t v212 = v146;
    uint64_t v214 = v148;
    int v197 = 0;
    HIDWORD(v196) = 0;
    unint64_t v188 = 0x100000001;
    long long v187 = v149;
    int v189 = v203 * v173;
    unsigned int v190 = v178;
    int v191 = 1;
    if (!v153)
    {
      int v154 = *((_DWORD *)a5 + 4);
      unsigned int v155 = 1;
      do
      {
        uint64_t GPUVirtualAddress = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getGPUVirtualAddress(v11, v142, *(_DWORD *)(v11 + 144) + v143, v154 + v155 - 1, 0);
        AGX::BlitUSCStateLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes>::emitComputeProgramVariantArguments(v184, v139, (uint64_t)v182, (uint64_t)&v204, (uint64_t)&v187, 0, 1, 1, (_DWORD *)(v186 + 1532));
        BOOL v61 = a5[5] > (unint64_t)v155++;
      }
      while (v61);
    }
    uint64_t v156 = v186;
    int v157 = *(unint64_t **)(v186 + 776);
    if ((unint64_t)v157 + 4 > *(void *)(v186 + 768))
    {
      int v161 = AGX::DataBufferAllocator<34ul>::growNoInline(v139, 22, 0);
      unint64_t v158 = *(unint64_t **)(v186 + 776);
      if (v161)
      {
        if ((unint64_t)v158 + 4 > *(void *)(v186 + 768)) {
          abort();
        }
        uint64_t v156 = v186;
        *(void *)(v186 + 784) = (char *)v158 + 4;
        *int v157 = __ROR8__((char *)v158 + *(void *)(v156 + 792), 32) & 0xFFFFFFFF0000FFFFLL | 0x20000000;
        unint64_t v158 = *(unint64_t **)(v156 + 776);
      }
    }
    else
    {
      *(void *)(v186 + 784) = (char *)v157 + 4;
      unint64_t v158 = v157;
    }
    *(_DWORD *)unint64_t v158 = 1610613088;
    *(void *)(v156 + 776) = (char *)v158 + 4;
    if (*(_DWORD *)*MEMORY[0x263F4B1E8]) {
      IOGPUDeviceTraceEvent();
    }
    v198.i64[0] = (uint64_t)&unk_26F8522C8;
    if (v199)
    {
      uint64_t v200 = v199;
      operator delete(v199);
    }
  }
}

void sub_242A25264(_Unwind_Exception *exception_object)
{
  v1[38] = &unk_26F8522C8;
  uint64_t v3 = (void *)v1[40];
  if (!v3) {
    _Unwind_Resume(exception_object);
  }
  v1[41] = v3;
  operator delete(v3);
  _Unwind_Resume(exception_object);
}

void AGX::BlitContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::fillBuffer(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, unsigned __int8 *a5, unint64_t a6)
{
}

void sub_242A26348(_Unwind_Exception *a1)
{
  STACK[0x2F0] = (unint64_t)&unk_26F853CB0;
  std::unique_ptr<AGX::HAL200::CompressionMetadata>::~unique_ptr[abi:nn180100]((uint64_t *)&STACK[0x4D8]);
  if (LODWORD(STACK[0x4C0]) && !LOBYTE(STACK[0x4D0]))
  {
    uint64_t v2 = (os_unfair_lock_s *)(STACK[0x4C8] + 56);
    os_unfair_lock_lock(v2);
    unint64_t v3 = STACK[0x4C8];
    uint64_t v4 = LODWORD(STACK[0x4C0]);
    uint64_t v5 = *(void *)(STACK[0x4C8] + 48);
    unint64_t v6 = (int *)MEMORY[0x263F4B188];
    *(_DWORD *)(*(void *)(*(void *)(*(void *)(v3 + 40) + 8) + (int)*MEMORY[0x263F4B188] + 24) + 32 * v4) = v5;
    uint64_t v7 = v5;
    atomic_compare_exchange_strong((atomic_ullong *volatile)(v3 + 48), (unint64_t *)&v7, (v5 & 0xFFFFFFFF00000000 | v4) + 0x100000000);
    if (v7 != v5)
    {
      uint64_t v8 = v7;
      do
      {
        *(_DWORD *)(*(void *)(*(void *)(*(void *)(v3 + 40) + 8) + *v6 + 24) + 32 * v4) = v7;
        atomic_compare_exchange_strong((atomic_ullong *volatile)(v3 + 48), (unint64_t *)&v8, (v7 & 0xFFFFFFFF00000000 | v4) + 0x100000000);
        BOOL v9 = v8 == v7;
        uint64_t v7 = v8;
      }
      while (!v9);
    }
    os_unfair_lock_unlock(v2);
  }
  _Unwind_Resume(a1);
}

void AGX::BlitContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::optimizeContentsForUncompressedAccess(uint64_t a1, uint64_t a2, unsigned int a3, unsigned int a4)
{
  uint64_t v111 = *MEMORY[0x263EF8340];
  uint64_t v4 = *(void *)(a2 + 536);
  uint64_t v5 = *(void *)(v4 + 488);
  if (*(void *)(v4 + 48)) {
    BOOL v6 = 1;
  }
  else {
    BOOL v6 = v5 == 0;
  }
  if (!v6 && *(_DWORD *)(v5 + 1080) > a4 && !*(unsigned char *)(v4 + 57))
  {
    uint64_t v109 = a2;
    long long v110 = *(_OWORD *)(v4 + 496);
    int v10 = *(_DWORD *)(v4 + 144);
    unsigned int v11 = *(_DWORD *)(v4 + 132);
    unsigned int v12 = *(_DWORD *)(v4 + 128) >> v10;
    if (v12 <= 1) {
      unsigned int v12 = 1;
    }
    unsigned int v89 = v12;
    int v13 = v11 >> v10;
    if (v11 >> v10 <= 1) {
      int v13 = 1;
    }
    unsigned int v88 = v13;
    unsigned int v14 = *(_DWORD *)(v4 + 136);
    int v15 = v14 >> v10;
    if (v14 >> v10 <= 1) {
      int v15 = 1;
    }
    unsigned int v87 = v15;
    unsigned int v16 = v14 >> (v10 + a4);
    if (v16 <= 1) {
      int v17 = 1;
    }
    else {
      int v17 = v16;
    }
    uint64_t v18 = *(void *)(v4 + 380) & 0xFF00;
    if ((*(void *)(v4 + 380) & 0x10000) != 0 || v18 == 1024)
    {
      int v19 = *(_DWORD *)(v4 + 376);
      if (v18 == 1024) {
        v19 *= 6;
      }
    }
    else
    {
      int v19 = 1;
    }
    uint64_t v90 = *(void *)(v4 + 24);
    uint64_t v20 = v90 - 1;
    if (unint64_t)(v90 - 1) <= 7 && ((0xB5u >> v20)) {
      uint64_t v90 = qword_242EAA280[v20];
    }
    uint64_t v21 = *(void *)(v4 + 208);
    if (*(_DWORD *)(v21 + 24))
    {
      uint64_t v22 = 0;
      uint64_t v86 = *(void *)(v4 + 40);
      int v23 = *(_DWORD *)(v4 + 236);
      unsigned int v84 = *(_DWORD *)(v4 + 140);
      int v85 = v23;
      if (!v23) {
        int v19 = 1;
      }
      int v83 = v19;
      unsigned int v71 = *(_DWORD *)(v4 + 112);
      uint64_t v82 = *(void *)(v4 + 152);
      uint64_t v81 = *(void *)(v4 + 160);
      uint64_t v80 = *(void *)(v4 + 168);
      int v79 = *(_DWORD *)(v4 + 176);
      int v78 = *(_DWORD *)(v4 + 180);
      uint64_t v77 = *(void *)(v4 + 184);
      int v76 = *(unsigned __int8 *)(v4 + 232);
      int v75 = *(unsigned __int8 *)(v4 + 392);
      if (v23) {
        int v24 = v84 - a4;
      }
      else {
        int v24 = 1;
      }
      int v74 = v24;
      if (v23) {
        char v25 = 1;
      }
      else {
        char v25 = 2;
      }
      char v73 = v25;
      uint64_t v72 = v5;
      do
      {
        uint64_t v26 = *(void *)(v4 + 488);
        if (v26 && *(_DWORD *)(v26 + 1080) > a4)
        {
          if (*(unsigned char *)(v4 + 57)) {
            int v27 = 2;
          }
          else {
            int v27 = 1;
          }
        }
        else
        {
          int v27 = 1;
        }
        *(void *)uint64_t v91 = v22;
        uint64_t TextureViewFormat = AGX::BlitContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::getTextureViewFormat(*(unsigned __int8 *)(v21 + v22 + 88), v71, *(void *)(v4 + 32), v22, v27, 0);
        unint64_t v31 = HIDWORD(v28);
        unsigned int v32 = TextureViewFormat - 1;
        uint64_t v33 = &texFormatUnsupported;
        if ((TextureViewFormat - 1) <= 0x284) {
          uint64_t v33 = (uint64_t *)*(&off_26516F8A0 + v32);
        }
        AGX::TextureGen4<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::TextureGen4((uint64_t)v104, *(os_unfair_lock_s **)(v4 + 8), 0, v73, v90, (uint64_t)v33, TextureViewFormat, v86, v30, 0, *(void *)(v4 + 56), *(_DWORD *)(v4 + 308), 0, 84148994, v89, v88, v87, v84, SHIDWORD(v28),
          v83,
          v82,
          v85,
          v81,
          v80,
          v79,
          v78,
          v77,
          a4,
          v74,
          v76 != 0,
          v75 != 0,
          *(unsigned char *)(v4 + 393) != 0,
          v69,
          0);
        v104[0] = (uint32x2_t)off_26F853CD8;
        unsigned int v35 = &texFormatUnsupported;
        if (v32 < 0x285) {
          unsigned int v35 = (uint64_t *)*(&off_26516F8A0 + v32);
        }
        AGX::TextureGen4<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::TextureGen4((uint64_t)v99, *(os_unfair_lock_s **)(v4 + 8), 0, v73, v90, (uint64_t)v35, TextureViewFormat, v86, v34, 0, 2, *(_DWORD *)(v4 + 308), 0, 84148994, v89, v88, v87, v84, v31,
          v83,
          v82,
          v85,
          v81,
          v80,
          v79,
          v78,
          v77,
          a4,
          v74,
          v76 != 0,
          v75 != 0,
          *(unsigned char *)(v4 + 393) != 0,
          v70,
          0);
        v99[0] = off_26F853CD8;
        uint64_t GPUVirtualAddress = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getGPUVirtualAddress(v4, a3, 0, 0, v91[0]);
        uint64_t v37 = (void *)v108[0];
        uint64_t v38 = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getGPUVirtualAddress(v72 + 536 * *(void *)v91, a3, 0, 0, 0);
        v37[37] = 0;
        v37[9] = v38;
        (*(void (**)(void *))(*v37 + 16))(v37);
        if (v37[140] >= 2uLL)
        {
          uint64_t v39 = v37[139];
          v37[104] = v39;
          v37[76] = v39 + v38;
          (*(void (**)(void))(v37[67] + 16))();
        }
        v104[37] = 0;
        v104[9] = (uint32x2_t)GPUVirtualAddress;
        (*(void (**)(uint32x2_t *))(*(void *)v104 + 16))(v104);
        v99[37] = 0;
        v99[9] = GPUVirtualAddress;
        v40.n128_f64[0] = (*(double (**)(void *))(v99[0] + 16))(v99);
        AGX::CompressionMetadataGen2<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getTextureViewForBlit(v94, v4, a4, v91[0], v40);
        unsigned int MetadataUncompressedValue = AGX::CompressionMetadataGen2<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getMetadataUncompressedValue(*(void *)(v72 + 1072), 0);
        uint64_t v42 = 0;
        int v93 = 0;
        do
        {
          if (v4 && *(_DWORD *)(v4 + 112) > 1u)
          {
            int v92 = 0;
            AGX::BlitDispatchContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::renderTexture(a1, (uint64_t)&v109, (uint64_t)v99, (uint64_t)&v109, (uint64_t)v104, (uint64_t)&v92, v42, 0, 0);
          }
          else
          {
            int v92 = 0;
            AGX::BlitDispatchContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::blitCDM(a1, (uint64_t)&v109, (uint64_t)v99, 0, &v109, v104, 0, &v92, v42, 0, 0, 0, 0, 0, 2);
          }
          uint64_t v43 = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getGPUVirtualAddress(v72 + 536 * *(void *)v91, a3, a4, v42, 0);
          v94[37] = 0;
          v94[9] = v43;
          (*(void (**)(void *))(v94[0] + 16))(v94);
          AGX::BlitDispatchContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::renderTexture(a1, (uint64_t)&v109, (uint64_t)v94, 0, 0, (uint64_t)&v93, 0, 0, MetadataUncompressedValue);
          uint64_t v42 = (v42 + 1);
        }
        while (v17 != v42);
        v94[0] = &unk_26F853CB0;
        std::unique_ptr<AGX::HAL200::CompressionMetadata>::~unique_ptr[abi:nn180100](v98);
        unsigned int v44 = (int *)MEMORY[0x263F4B188];
        if (v95 && !v97)
        {
          uint64_t v45 = (os_unfair_lock_s *)(v96 + 56);
          os_unfair_lock_lock((os_unfair_lock_t)(v96 + 56));
          uint64_t v46 = v96;
          uint64_t v47 = v95;
          uint64_t v48 = (atomic_ullong *)(v96 + 48);
          uint64_t v49 = *(void *)(v96 + 48);
          uint64_t v50 = 32 * v95;
          *(_DWORD *)(*(void *)(*(void *)(*(void *)(v96 + 40) + 8) + *v44 + 24) + v50) = v49;
          uint64_t v51 = v49;
          atomic_compare_exchange_strong(v48, (unint64_t *)&v51, (v49 & 0xFFFFFFFF00000000 | v47) + 0x100000000);
          if (v51 != v49)
          {
            uint64_t v52 = v51;
            do
            {
              *(_DWORD *)(*(void *)(*(void *)(*(void *)(v46 + 40) + 8) + *v44 + 24) + v50) = v51;
              atomic_compare_exchange_strong((atomic_ullong *volatile)(v46 + 48), (unint64_t *)&v52, (v51 & 0xFFFFFFFF00000000 | v47) + 0x100000000);
              BOOL v6 = v52 == v51;
              uint64_t v51 = v52;
            }
            while (!v6);
          }
          os_unfair_lock_unlock(v45);
        }
        v99[0] = &unk_26F853CB0;
        std::unique_ptr<AGX::HAL200::CompressionMetadata>::~unique_ptr[abi:nn180100](v103);
        if (v100 && !v102)
        {
          char v53 = (os_unfair_lock_s *)(v101 + 56);
          os_unfair_lock_lock((os_unfair_lock_t)(v101 + 56));
          uint64_t v54 = v101;
          uint64_t v55 = v100;
          uint64_t v56 = (atomic_ullong *)(v101 + 48);
          uint64_t v57 = *(void *)(v101 + 48);
          uint64_t v58 = 32 * v100;
          *(_DWORD *)(*(void *)(*(void *)(*(void *)(v101 + 40) + 8) + *v44 + 24) + v58) = v57;
          uint64_t v59 = v57;
          atomic_compare_exchange_strong(v56, (unint64_t *)&v59, (v57 & 0xFFFFFFFF00000000 | v55) + 0x100000000);
          if (v59 != v57)
          {
            uint64_t v60 = v59;
            do
            {
              *(_DWORD *)(*(void *)(*(void *)(*(void *)(v54 + 40) + 8) + *v44 + 24) + v58) = v59;
              atomic_compare_exchange_strong((atomic_ullong *volatile)(v54 + 48), (unint64_t *)&v60, (v59 & 0xFFFFFFFF00000000 | v55) + 0x100000000);
              BOOL v6 = v60 == v59;
              uint64_t v59 = v60;
            }
            while (!v6);
          }
          os_unfair_lock_unlock(v53);
        }
        v104[0] = (uint32x2_t)&unk_26F853CB0;
        std::unique_ptr<AGX::HAL200::CompressionMetadata>::~unique_ptr[abi:nn180100](v108);
        if (v105 && !v107)
        {
          BOOL v61 = (os_unfair_lock_s *)(v106 + 56);
          os_unfair_lock_lock((os_unfair_lock_t)(v106 + 56));
          uint64_t v62 = v106;
          uint64_t v63 = v105;
          int v64 = (atomic_ullong *)(v106 + 48);
          uint64_t v65 = *(void *)(v106 + 48);
          uint64_t v66 = 32 * v105;
          *(_DWORD *)(*(void *)(*(void *)(*(void *)(v106 + 40) + 8) + *v44 + 24) + v66) = v65;
          uint64_t v67 = v65;
          atomic_compare_exchange_strong(v64, (unint64_t *)&v67, (v65 & 0xFFFFFFFF00000000 | v63) + 0x100000000);
          if (v67 != v65)
          {
            uint64_t v68 = v67;
            do
            {
              *(_DWORD *)(*(void *)(*(void *)(*(void *)(v62 + 40) + 8) + *v44 + 24) + v66) = v67;
              atomic_compare_exchange_strong((atomic_ullong *volatile)(v62 + 48), (unint64_t *)&v68, (v67 & 0xFFFFFFFF00000000 | v63) + 0x100000000);
              BOOL v6 = v68 == v67;
              uint64_t v67 = v68;
            }
            while (!v6);
          }
          os_unfair_lock_unlock(v61);
        }
        uint64_t v22 = *(void *)v91 + 1;
        uint64_t v21 = *(void *)(v4 + 208);
      }
      while (*(void *)v91 + 1 < (unint64_t)*(unsigned int *)(v21 + 24));
    }
  }
}

void sub_242A27194(_Unwind_Exception *a1)
{
}

void AGX::BlitContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::invalidateCompressedTexture(uint64_t a1, uint64_t a2, unsigned int a3, unsigned int a4)
{
  uint64_t v47 = *MEMORY[0x263EF8340];
  uint64_t v4 = *(void *)(a2 + 536);
  uint64_t v5 = *(void *)(v4 + 488);
  uint64_t v45 = a2;
  __n128 v6 = *(__n128 *)(v4 + 496);
  __n128 v46 = v6;
  uint64_t v34 = v5;
  if (v5 && *(_DWORD *)(v34 + 1080) > a4)
  {
    int v8 = *(_DWORD *)(v4 + 136) >> (*(unsigned char *)(v4 + 144) + a4) <= 1u
       ? 1
       : *(_DWORD *)(v4 + 136) >> (*(unsigned char *)(v4 + 144) + a4);
    if (*(_DWORD *)(*(void *)(v4 + 208) + 24))
    {
      unint64_t v11 = 0;
      v31[1] = (unint64_t)v36 | 0x69EC000000000000;
      unsigned int v32 = &v44;
      uint64_t v33 = v4;
      do
      {
        uint64_t TextureViewForBlit = AGX::CompressionMetadataGen2<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getTextureViewForBlit(v36, v4, a4, v11, v6);
        int v35 = 0;
        if (v38 > 1)
        {
          unsigned int v20 = 0;
          uint64_t v21 = v34 + 536 * v11;
          do
          {
            uint64_t GPUVirtualAddress = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getGPUVirtualAddress(v21, a3, a4, v20, 0);
            uint64_t v40 = 0;
            uint64_t v37 = GPUVirtualAddress;
            (*(void (**)(void *))(v36[0] + 16))(v36);
            AGX::BlitDispatchContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::renderTexture(a1, (uint64_t)&v45, (uint64_t)v36, 0, 0, (uint64_t)&v35, 0, 0, 0);
            ++v20;
          }
          while (v8 != v20);
        }
        else
        {
          v31[0] = v31;
          size_t v13 = *(unsigned __int8 *)(v39 + v11 + 88);
          MEMORY[0x270FA5388](TextureViewForBlit);
          int v15 = (char *)v31 - v14;
          bzero((char *)v31 - v14, v13);
          AGX::BlitContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::getTextureViewFormat(v13, v38, v36[4], v11, 1, 0);
          char v17 = v16;
          uint64_t v18 = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getGPUVirtualAddress(v34 + 536 * v11, a3, a4, 0, 0);
          uint64_t v40 = 0;
          uint64_t v37 = v18;
          (*(void (**)(void *))(v36[0] + 16))(v36);
          unsigned int v19 = 0;
          do
            AGX::BlitDispatchContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::blitCDM(a1, (uint64_t)&v45, (uint64_t)v36, 0, 0, 0, 0, &v35, v19++, 0, v17, 0, 0, v15, 2);
          while (v8 != v19);
        }
        v36[0] = &unk_26F853CB0;
        std::unique_ptr<AGX::HAL200::CompressionMetadata>::~unique_ptr[abi:nn180100](v32);
        if (v41 && !v43)
        {
          int v23 = (os_unfair_lock_s *)(v42 + 56);
          os_unfair_lock_lock((os_unfair_lock_t)(v42 + 56));
          uint64_t v24 = v42;
          uint64_t v25 = v41;
          uint64_t v26 = *(void *)(v42 + 48);
          int v27 = (int *)MEMORY[0x263F4B188];
          *(_DWORD *)(*(void *)(*(void *)(*(void *)(v42 + 40) + 8) + (int)*MEMORY[0x263F4B188] + 24)
                    + 32 * v41) = v26;
          uint64_t v28 = v26;
          atomic_compare_exchange_strong((atomic_ullong *volatile)(v24 + 48), (unint64_t *)&v28, (v26 & 0xFFFFFFFF00000000 | v25) + 0x100000000);
          if (v28 != v26)
          {
            uint64_t v29 = v28;
            do
            {
              *(_DWORD *)(*(void *)(*(void *)(*(void *)(v24 + 40) + 8) + *v27 + 24) + 32 * v25) = v28;
              atomic_compare_exchange_strong((atomic_ullong *volatile)(v24 + 48), (unint64_t *)&v29, (v28 & 0xFFFFFFFF00000000 | v25) + 0x100000000);
              BOOL v30 = v29 == v28;
              uint64_t v28 = v29;
            }
            while (!v30);
          }
          os_unfair_lock_unlock(v23);
        }
        ++v11;
        uint64_t v4 = v33;
      }
      while (v11 < *(unsigned int *)(*(void *)(v33 + 208) + 24));
    }
  }
}

void sub_242A279BC(_Unwind_Exception *a1)
{
  AGX::HAL200::Texture::~Texture((AGX::HAL200::Texture *)(v1 + 48));
  _Unwind_Resume(a1);
}

void AGX::HAL200::BlitDispatchContext::~BlitDispatchContext(AGX::HAL200::BlitDispatchContext *this)
{
  AGX::BlitDispatchContextGen2<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::~BlitDispatchContextGen2(this);

  JUMPOUT(0x24566ED90);
}

void AGX::BlitDispatchContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::endComputePass(uint64_t a1, uint64_t a2)
{
  *(_WORD *)(a1 + 4304) = 0;
  *(_WORD *)(a1 + 6616) = 0;
  if (AGX::SpillInfoGen3<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::checkSpillParamsForCompute(a1 + 1808, 0, 0, 0, 0, 0, 0))
  {
    AGX::BlitDispatchContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::bindComputeUSCSpillBuffer(a1);
    if (*(_DWORD *)(a2 + 4)) {
      goto LABEL_11;
    }
  }
  else if (*(_DWORD *)(a2 + 4))
  {
    goto LABEL_11;
  }
  uint64_t v4 = *(_DWORD **)(a1 + 776);
  uint64_t v5 = (char *)v4 + *(void *)(a1 + 792);
  *(void *)(a1 + 776) = v4 + 1;
  _DWORD *v4 = 0x40000000;
  uint64_t v6 = *(void *)(a1 + 1800);
  *(void *)(v6 + 96) = v5;
  *(unsigned char *)(v6 + 180) = *(unsigned char *)(a1 + 1520);
  *(_DWORD *)(v6 + 176) = *(_DWORD *)(a1 + 1516);
  *(void *)(v6 + 184) = *(void *)(a1 + 1524);
  if (!*(void *)(a1 + 1960)) {
    goto LABEL_9;
  }
  if (*(void *)(a1 + 1488)) {
    MTLResourceListAddResource();
  }
  IOGPUResourceListAddResource();
  uint64_t v6 = *(void *)(a1 + 1800);
  uint64_t v7 = *(void **)(a1 + 1960);
  if (v7 && (v8 = *(_DWORD *)(a1 + 1972), int v9 = *(_DWORD *)(a1 + 1968), (v9 & v8) != 0xFFFFFFFF))
  {
    *(_DWORD *)(v6 + 468) = [v7 resourceID];
    *(_DWORD *)(v6 + 472) = v9;
    *(_DWORD *)(v6 + 476) = v8;
  }
  else
  {
LABEL_9:
    *(_DWORD *)(v6 + 476) = -1;
    *(void *)(v6 + 468) = -1;
  }
  *(_DWORD *)(a1 + 1968) = -1;
  uint64_t v10 = *(void *)(a1 + 1800);
  *(void *)(v10 + 104) = 0;
  *(unsigned char *)(v10 + 462) = 0;
  *(unsigned char *)(v10 + 463) = *(unsigned char *)(a1 + 1553);
LABEL_11:
  *(void *)(a1 + 1800) = 0;
}

__n128 AGX::BlitDispatchContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::bindComputeUSCSpillBuffer(uint64_t a1)
{
  uint64_t v1 = *(__n128 **)(a1 + 1800);
  int v2 = *(_DWORD *)(a1 + 1848);
  int v3 = *(_DWORD *)(a1 + 1812);
  unsigned __int32 v4 = *(_DWORD *)(a1 + 1852);
  if (v2 < 1)
  {
    unsigned __int32 v11 = 0;
    unsigned __int32 v10 = 0;
    unsigned __int32 v16 = *(_DWORD *)(a1 + 1832);
  }
  else
  {
    uint64_t v5 = *(void *)(a1 + 1864);
    int v6 = *(_DWORD *)(v5 + 5912);
    uint64_t v7 = 5936;
    if (*(_OWORD *)(v5 + 5936) == 0) {
      uint64_t v7 = 5952;
    }
    int32x2_t v8 = vmovn_s64((int64x2_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(*(int8x16_t *)(v5 + v7))))));
    int v9 = *(_DWORD *)(a1 + 1844);
    unsigned __int32 v10 = *(_DWORD *)(a1 + 1840) + v9;
    unsigned __int32 v11 = (v4 + v2 + v10) * vadd_s32(vdup_lane_s32(v8, 1), v8).u32[0];
    int v12 = *(_DWORD *)(a1 + 1808);
    BOOL v13 = __OFSUB__(v9, v12);
    int v14 = v9 - v12;
    int v15 = v14 * v6;
    if ((v14 < 0) ^ v13 | (v14 == 0)) {
      int v15 = 0;
    }
    v3 += v11 + v15;
    unsigned __int32 v16 = *(_DWORD *)(a1 + 1836) + *(_DWORD *)(a1 + 1832) + v11;
  }
  v1[23].n128_u16[4] = 0;
  v1[22].n128_u32[2] = v2;
  v1[22].n128_u32[3] = v4;
  v1[23].n128_u32[0] = v10;
  v1[23].n128_u32[1] = v11;
  v1[20].n128_u64[0] = (uint64_t)(int)((v3 + 7) & 0xFFFFFFF8) << 12;
  v1[20].n128_u64[1] = (uint64_t)(int)((v16 + 7) & 0xFFFFFFF8) << 12;
  __n128 result = *(__n128 *)(a1 + 1816);
  v1[21] = result;
  return result;
}

uint64_t AGX::BlitDispatchContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::beginComputePassIfNeeded(uint64_t result, void *a2, __n128 a3, uint64x2_t a4, double a5)
{
  if (!*(void *)(result + 1800))
  {
    uint64_t v6 = result;
    AGX::BlitDispatchContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::endPreviousBlitCommand(result, 0, a3, a4, a5);
    return AGX::BlitDispatchContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::beginComputePass(v6, a2);
  }
  return result;
}

double AGX::BlitDispatchContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::endPreviousBlitCommand(uint64_t a1, int a2, __n128 a3, uint64x2_t a4, double a5)
{
  if (*(void *)(a1 + 1800))
  {
    unint64_t v7 = *(void *)(a1 + 1560);
    if (v7 > *(void *)(a1 + 1568))
    {
      *(void *)(*(void *)(a1 + 16) + 48) = v7;
      IOGPUMetalCommandBufferStorageGrowKernelCommandBuffer();
      uint64_t v8 = *(void *)(a1 + 16);
      unint64_t v7 = *(void *)(v8 + 48);
      *(void *)(a1 + 1560) = v7;
      *(void *)(a1 + 1568) = *(void *)(v8 + 56);
    }
    unint64_t v9 = v7 - *(void *)(a1 + 1576);
    *(void *)(a1 + 1560) = v7;
    (*(void (**)(uint64_t, unint64_t))(*(void *)a1 + 24))(a1, v9 + 8);
  }
  if (*(unsigned char *)(a1 + 1512))
  {
    uint64_t v10 = *(void *)(a1 + 1952);
    if (v10) {
      __int32 v11 = *(_DWORD *)(v10 + 528);
    }
    else {
      __int32 v11 = 0;
    }
    __int32 v12 = 0;
    uint64_t v13 = *(void *)(a1 + 1944);
    if (v13 && a2) {
      __int32 v12 = *(_DWORD *)(v13 + 528);
    }
    if (v12 + v11)
    {
      unint64_t v14 = *(void *)(a1 + 1560);
      if (v14 > *(void *)(a1 + 1568))
      {
        *(void *)(*(void *)(a1 + 16) + 48) = v14;
        IOGPUMetalCommandBufferStorageGrowKernelCommandBuffer();
        uint64_t v15 = *(void *)(a1 + 16);
        unint64_t v14 = *(void *)(v15 + 48);
        *(void *)(a1 + 1560) = v14;
        *(void *)(a1 + 1568) = *(void *)(v15 + 56);
      }
      unsigned __int32 v16 = (_DWORD *)(v14 - *(void *)(a1 + 1576));
      *(void *)(a1 + 1560) = v14;
      unsigned int v17 = (2 * (v12 + v11) + 7) & 0xFFFFFFF8;
      if (v16[4])
      {
        unsigned int v32 = 0;
        AGX::SidebandBufferAllocator::allocate((AGX::SidebandBufferAllocator *)(a1 + 1472), v17, 1u, &v32);
      }
      else
      {
        unsigned int v32 = 0;
        uint64_t v18 = (void *)AGX::SidebandBufferAllocator::allocate((AGX::SidebandBufferAllocator *)(a1 + 1472), v17 + 16, 1u, &v32);
        v16[5] = v32;
        *uint64_t v18 = 0;
        v18[1] = 0;
      }
      int v19 = v16[8];
      unsigned int v20 = (int32x4_t *)(*(void *)(*(void *)(a1 + 1480) + 8) + v16[5]);
      uint64_t v21 = (unsigned __int16 *)&v20[1];
      if (v11)
      {
        if ((v19 & 0xFFFFFFFD) == 1) {
          __int32 v22 = v11;
        }
        else {
          __int32 v22 = 0;
        }
        if (v19 == 2) {
          __int32 v23 = v11;
        }
        else {
          __int32 v23 = 0;
        }
        v20->i32[0] = v22;
        v20->i32[1] = v23;
        AGX::FenceList::copyFences(*(void *)(a1 + 1952), v21);
        uint64_t v24 = *(void *)(a1 + 1952);
        for (unint64_t i = *(void *)(v24 + 512); i; i &= i - 1)
          bzero(*(void **)(v24 + 8 * __clz(__rbit64(i))), 0x88uLL);
        *(_DWORD *)(v24 + 528) = 0;
      }
      if (v12)
      {
        if (v19 == 3) {
          __int32 v26 = v12;
        }
        else {
          __int32 v26 = 0;
        }
        if ((v19 - 1) >= 2) {
          __int32 v27 = 0;
        }
        else {
          __int32 v27 = v12;
        }
        v20->i32[2] = v26;
        v20->i32[3] = v27;
        AGX::FenceList::copyFences(*(void *)(a1 + 1944), &v21[v20->u32[0] + v20->u32[1]]);
        uint64_t v28 = *(void *)(a1 + 1944);
        for (unint64_t j = *(void *)(v28 + 512); j; j &= j - 1)
          bzero(*(void **)(v28 + 8 * __clz(__rbit64(j))), 0x88uLL);
        *(_DWORD *)(v28 + 528) = 0;
      }
      a3 = *(__n128 *)v20;
      a3.n128_u32[0] = vaddvq_s32(*v20);
      v16[4] = ((2 * a3.n128_u32[0] + 7) & 0xFFFFFFF8) + 16;
      *(void *)(a1 + 1992) |= 0x100uLL;
    }
    AGX::ContextCommon<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::endCommand(a1 + 8, a3.n128_f64[0], a4, a5);
    uint64_t v30 = *(void *)(a1 + 1600);
    a3.n128_f64[0] = AGX::ResourceGroupUsage<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::reset(v30);
  }
  return a3.n128_f64[0];
}

uint64_t AGX::BlitDispatchContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::beginComputePass(uint64_t a1, void *a2)
{
  *(_OWORD *)(a1 + 1840) = 0u;
  *(_OWORD *)(a1 + 1824) = 0u;
  *(_OWORD *)(a1 + 1808) = 0u;
  uint64_t v4 = a1 + 8;
  uint64_t v5 = AGX::ContextCommon<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::newCommand(a1 + 8, 528);
  if ([*(id *)(a1 + 8) skipRender])
  {
    uint64_t v11 = *(void *)(a1 + 1560) - *(void *)(a1 + 1576);
    *(_DWORD *)(v11 + 12) = 1;
    if ((*(unsigned char *)(v11 + 8) & 4) != 0) {
      **(unsigned char **)(*(void *)v4 + 688) = 1;
    }
  }
  v5[1] = 0;
  *(void *)((char *)v5 + 20) = 0x3000001E8;
  *(void *)(a1 + 1800) = v5 + 4;
  bzero(v5 + 4, 0x1E8uLL);
  uint64_t v6 = *(void *)(a1 + 1800);
  *(unsigned char *)(v6 + 461) = 1;
  *(void *)uint64_t v6 = *(void *)(a1 + 792) + *(void *)(a1 + 776);
  *(void *)(v6 + 200) = 0;
  *(void *)(v6 + 224) = 0;
  *(_WORD *)(v6 + 456) = 0;
  *(unsigned char *)(v6 + 192) = 0;
  *(void *)(v6 + 96) = 0;
  uint64_t v7 = *(void *)(a1 + 424);
  uint64_t v8 = v7 + 19;
  if ((unint64_t)(v7 + 19) <= *(void *)(a1 + 416)) {
    goto LABEL_3;
  }
  int v12 = AGX::DataBufferAllocator<34ul>::growNoInline(a1 + 24, 11, 0);
  uint64_t v7 = *(void *)(a1 + 424);
  if (v12)
  {
    uint64_t v8 = v7 + 19;
    if ((unint64_t)(v7 + 19) > *(void *)(a1 + 416)) {
      abort();
    }
LABEL_3:
    *(void *)(a1 + 432) = v8;
  }
  *(void *)(a1 + 424) = (v7 + 15) & 0xFFFFFFFFFFFFFFF0 | 4;
  uint64_t v9 = *(void *)(a1 + 1800);
  *(_DWORD *)(v9 + 452) = 8;
  uint64_t result = AGX::ContextSwitcherGen3<AGX::HAL200::Encoders,AGX::HAL200::Classes>::setupComputeCommand(*(void *)(a1 + 1736), v9, (void *)(a1 + 24));
  if (a2) {
    *a2 = v5;
  }
  return result;
}

uint64_t AGX::SidebandBufferAllocator::allocate(AGX::SidebandBufferAllocator *this, unsigned int a2, unsigned int a3, unsigned int *a4)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  uint64_t v8 = a2 + a3 - 1;
  uint64_t v9 = (void *)*((void *)this + 1);
  if (!v9[1])
  {
    IOGPUMetalCommandBufferStorageAllocSidebandBuffer();
    uint64_t v9 = (void *)*((void *)this + 1);
  }
  uint64_t v10 = v9[2];
  if ((unint64_t)(v10 + v8) > v9[3])
  {
    IOGPUMetalCommandBufferStorageGrowSidebandBuffer();
    uint64_t v9 = (void *)*((void *)this + 1);
    uint64_t v10 = v9[2];
    if ((unint64_t)(v10 + v8) > v9[3])
    {
      fprintf((FILE *)*MEMORY[0x263EF8348], "AGX: %s:%d:%s: *** Unable to allocate space required in sideband buffer\n", "agxa_sideband_buffer.h", 69, "allocate");
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315650;
        uint64_t v13 = "agxa_sideband_buffer.h";
        __int16 v14 = 1024;
        int v15 = 69;
        __int16 v16 = 2080;
        unsigned int v17 = "allocate";
        _os_log_error_impl(&dword_2427AD000, &_os_log_internal, OS_LOG_TYPE_ERROR, "AGX: AGX: %s:%d:%s: *** Unable to allocate space required in sideband buffer\n", buf, 0x1Cu);
      }
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        uint64_t v13 = "agxa_sideband_buffer.h";
        __int16 v14 = 1024;
        int v15 = 69;
        __int16 v16 = 2080;
        unsigned int v17 = "allocate";
        _os_log_impl(&dword_2427AD000, &_os_log_internal, OS_LOG_TYPE_INFO, "AGX: AGX: %s:%d:%s: *** Unable to allocate space required in sideband buffer\n", buf, 0x1Cu);
      }
      abort();
    }
  }
  uint64_t result = (a3 + v10 - 1) & -(uint64_t)a3;
  if (a4) {
    *a4 = result - *((_DWORD *)v9 + 2);
  }
  v9[2] = result + a2;
  return result;
}

void AGX::BlitDispatchContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::~BlitDispatchContext(void *a1)
{
  AGX::BlitDispatchContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::~BlitDispatchContext(a1);

  JUMPOUT(0x24566ED90);
}

void *AGX::BlitDispatchContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::~BlitDispatchContext(void *a1)
{
  *a1 = &unk_26F852018;
  uint64_t v2 = a1[243];
  if (v2)
  {
    unint64_t v3 = *(void *)(v2 + 512);
    if (v3)
    {
      uint64_t v4 = MEMORY[0x263EF8330];
      do
      {
        uint64_t v5 = *(void *)(v2 + 520);
        uint64_t v6 = *(void *)(v2 + 8 * __clz(__rbit64(v3)));
        uint64_t v7 = *(NSObject **)(v5 + 16);
        uint64_t v19 = v4;
        uint64_t v20 = 3221225472;
        uint64_t v21 = ___ZN3AGX14FenceGroupPool17releaseFenceGroupEPNS_10FenceGroupE_block_invoke;
        __int32 v22 = &__block_descriptor_48_e5_v8__0l;
        uint64_t v23 = v5;
        uint64_t v24 = v6;
        dispatch_sync(v7, &v19);
        unint64_t v3 = (*(void *)(v2 + 512) - 1) & *(void *)(v2 + 512);
        *(void *)(v2 + 512) = v3;
      }
      while (v3);
    }
    MEMORY[0x24566ED90](v2, 0x1020C40C758419CLL);
  }
  uint64_t v8 = a1[244];
  if (v8)
  {
    unint64_t v9 = *(void *)(v8 + 512);
    if (v9)
    {
      uint64_t v10 = MEMORY[0x263EF8330];
      do
      {
        uint64_t v11 = *(void *)(v8 + 520);
        uint64_t v12 = *(void *)(v8 + 8 * __clz(__rbit64(v9)));
        uint64_t v13 = *(NSObject **)(v11 + 16);
        uint64_t v19 = v10;
        uint64_t v20 = 3221225472;
        uint64_t v21 = ___ZN3AGX14FenceGroupPool17releaseFenceGroupEPNS_10FenceGroupE_block_invoke;
        __int32 v22 = &__block_descriptor_48_e5_v8__0l;
        uint64_t v23 = v11;
        uint64_t v24 = v12;
        dispatch_sync(v13, &v19);
        unint64_t v9 = (*(void *)(v8 + 512) - 1) & *(void *)(v8 + 512);
        *(void *)(v8 + 512) = v9;
      }
      while (v9);
    }
    MEMORY[0x24566ED90](v8, 0x1020C40C758419CLL);
  }
  __int16 v14 = (void **)a1[220];
  if (v14)
  {
    free(*v14);
    MEMORY[0x24566ED90](v14, 0x1020C4014030ADELL);
  }
  int v15 = (void **)a1[178];
  __int16 v16 = (void **)a1[179];
  if (v15 != v16)
  {
    do
    {
      unsigned int v17 = *v15++;
      free(v17);
    }
    while (v15 != v16);
    int v15 = (void **)a1[178];
  }
  if (v15)
  {
    a1[179] = v15;
    operator delete(v15);
  }
  return a1;
}

void AGX::BlitDispatchContextGen2<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::setupSparseStateForCompute(void *a1, uint64_t a2, uint64_t a3, __n128 a4, uint64x2_t a5, double a6)
{
  unint64_t v9 = a1 + 839;
  if (a1[225])
  {
    if (*v9)
    {
      uint64_t v10 = (_DWORD *)a1[97];
      if ((unint64_t)(v10 + 1) > a1[96])
      {
        uint64_t v13 = (unint64_t *)a1[97];
        int v12 = AGX::DataBufferAllocator<34ul>::growNoInline(a1 + 3, 22, 0);
        uint64_t v10 = (_DWORD *)a1[97];
        if (v12)
        {
          if ((unint64_t)(v10 + 1) > a1[96]) {
            abort();
          }
          a1[98] = v10 + 1;
          unint64_t *v13 = __ROR8__((char *)v10 + a1[99], 32) & 0xFFFFFFFF0000FFFFLL | 0x20000000;
          uint64_t v10 = (_DWORD *)a1[97];
        }
      }
      else
      {
        a1[98] = v10 + 1;
      }
      *uint64_t v10 = 1610793218;
      a1[97] = v10 + 1;
    }
  }
  else
  {
    AGX::BlitDispatchContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::endPreviousBlitCommand((uint64_t)a1, 0, a4, a5, a6);
  }
  unsigned char *v9 = 0;
  if (v9[1] || a3 && *(_DWORD *)(a3 + 236))
  {
    BOOL v11 = 1;
  }
  else if (a2)
  {
    BOOL v11 = *(_DWORD *)(a2 + 236) != 0;
  }
  else
  {
    BOOL v11 = 0;
  }
  v9[1] = v11;
}

void AGX::BlitDispatchContextGen2<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::endComputePass(void *a1, uint64_t a2)
{
  uint64_t v4 = (unsigned __int8 *)(a1 + 839);
  AGX::BlitDispatchContextGen2<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::dispatchCoalescedSparseTextureShaderBatch((uint64_t)a1);
  if (v4[1])
  {
    int v5 = *v4;
    uint64_t v6 = (unint64_t *)a1[97];
    if ((unint64_t)v6 + 4 > a1[96])
    {
      int v9 = AGX::DataBufferAllocator<34ul>::growNoInline(a1 + 3, 22, 0);
      uint64_t v7 = (int *)a1[97];
      if (v9)
      {
        if ((unint64_t)(v7 + 1) > a1[96]) {
          abort();
        }
        a1[98] = v7 + 1;
        *uint64_t v6 = __ROR8__((char *)v7 + a1[99], 32) & 0xFFFFFFFF0000FFFFLL | 0x20000000;
        uint64_t v7 = (int *)a1[97];
      }
    }
    else
    {
      a1[98] = (char *)v6 + 4;
      uint64_t v7 = (int *)v6;
    }
    if (v5) {
      int v8 = 1610793218;
    }
    else {
      int v8 = 1610776834;
    }
    int *v7 = v8;
    a1[97] = v7 + 1;
    *(_WORD *)uint64_t v4 = 0;
  }

  AGX::BlitDispatchContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::endComputePass((uint64_t)a1, a2);
}

double AGX::BlitDispatchContextGen2<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::dispatchCoalescedSparseTextureShaderBatch(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 6624);
  if (v1)
  {
    int v3 = *(_DWORD *)(a1 + 6696);
    if (v3)
    {
      uint64_t v25 = 0;
      uint64_t v26 = 0;
      uint64_t v27 = 0;
      memset(v14, 0, sizeof(v14));
      uint64_t v4 = *(void *)(a1 + 6640);
      uint64_t v15 = 0;
      uint64_t v5 = *(void *)(a1 + 6656);
      uint64_t v6 = *(void *)(a1 + 1936);
      uint64_t v16 = v4;
      uint64_t v17 = v5;
      uint64_t v18 = v6;
      uint32x2_t v7 = *(uint32x2_t *)(a1 + 6688);
      uint32x2_t v21 = vmin_u32(v7, (uint32x2_t)0x2000000020);
      int v22 = 1;
      uint64_t v19 = 0;
      int v20 = 1;
      uint32x2_t v23 = v7;
      int v24 = v3;
      int v8 = *(_DWORD *)(v1 + 2684);
      LODWORD(v5) = *(_DWORD *)(a1 + 6632) - 2;
      int v28 = 0;
      int v29 = v8;
      if (v5 <= 2)
      {
        **(_DWORD **)(a1 + 6664) = v3;
        int v8 = *(_DWORD *)(v1 + 2684);
      }
      AGX::BlitUSCStateLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes>::emitComputeProgramVariantArguments((char ***)(a1 + 1760), (void *)(a1 + 24), v1, (uint64_t)v14, (uint64_t)&v19, v8, 1, 1, (_DWORD *)(a1 + 1532));
      int v9 = *(_DWORD **)(a1 + 776);
      if ((unint64_t)(v9 + 1) > *(void *)(a1 + 768))
      {
        uint64_t v13 = *(unint64_t **)(a1 + 776);
        int v12 = AGX::DataBufferAllocator<34ul>::growNoInline(a1 + 24, 22, 0);
        int v9 = *(_DWORD **)(a1 + 776);
        if (v12)
        {
          if ((unint64_t)(v9 + 1) > *(void *)(a1 + 768)) {
            abort();
          }
          *(void *)(a1 + 784) = v9 + 1;
          unint64_t *v13 = __ROR8__((char *)v9 + *(void *)(a1 + 792), 32) & 0xFFFFFFFF0000FFFFLL | 0x20000000;
          int v9 = *(_DWORD **)(a1 + 776);
        }
      }
      else
      {
        *(void *)(a1 + 784) = v9 + 1;
      }
      _DWORD *v9 = 1610613088;
      *(void *)(a1 + 776) = v9 + 1;
      *(unsigned char *)(a1 + 1553) = 1;
    }
    uint64_t v10 = *(void *)(a1 + 6704);
    *(_WORD *)(v10 + 1544) = 0;
    *(_WORD *)(v10 + 768) = 0;
    *(void *)(a1 + 6624) = 0;
    *(void *)(a1 + 6688) = 0;
    *(_DWORD *)(a1 + 6696) = 0;
    double result = 0.0;
    *(_OWORD *)(a1 + 6640) = 0u;
    *(_OWORD *)(a1 + 6656) = 0u;
  }
  return result;
}

void AGX::BlitDispatchContextGen2<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::beginComputePassIfNeeded(uint64_t a1, void *a2, int a3, __n128 a4, uint64x2_t a5, double a6)
{
  if (a3) {
    a4.n128_f64[0] = AGX::BlitDispatchContextGen2<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::dispatchCoalescedSparseTextureShaderBatch(a1);
  }
  if (!*(void *)(a1 + 1800))
  {
    AGX::BlitDispatchContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::endPreviousBlitCommand(a1, 0, a4, a5, a6);
    AGX::BlitDispatchContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::beginComputePass(a1, a2);
  }
}

void AGX::BlitDispatchContextGen2<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::~BlitDispatchContextGen2(void *a1)
{
  *a1 = &unk_26F852050;
  uint64_t v2 = (void *)a1[838];
  if (v2)
  {
    int v3 = *(os_unfair_lock_s **)(a1[183] + 808);
    os_unfair_lock_lock(v3 + 1795);
    uint64_t os_unfair_lock_opaque = v3[1794]._os_unfair_lock_opaque;
    if (os_unfair_lock_opaque > 7)
    {
      os_unfair_lock_unlock(v3 + 1795);
      free(v2);
    }
    else
    {
      v3[1794]._uint64_t os_unfair_lock_opaque = os_unfair_lock_opaque + 1;
      *(void *)&v3[2 * os_unfair_lock_opaque + 1796]._uint64_t os_unfair_lock_opaque = v2;
      os_unfair_lock_unlock(v3 + 1795);
    }
  }
  AGX::BlitDispatchContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::~BlitDispatchContext(a1);

  JUMPOUT(0x24566ED90);
}

void *AGX::BlitDispatchContextGen2<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::~BlitDispatchContextGen2(void *a1)
{
  *a1 = &unk_26F852050;
  uint64_t v2 = (void *)a1[838];
  if (v2)
  {
    int v3 = *(os_unfair_lock_s **)(a1[183] + 808);
    os_unfair_lock_lock(v3 + 1795);
    uint64_t os_unfair_lock_opaque = v3[1794]._os_unfair_lock_opaque;
    if (os_unfair_lock_opaque > 7)
    {
      os_unfair_lock_unlock(v3 + 1795);
      free(v2);
    }
    else
    {
      v3[1794]._uint64_t os_unfair_lock_opaque = os_unfair_lock_opaque + 1;
      *(void *)&v3[2 * os_unfair_lock_opaque + 1796]._uint64_t os_unfair_lock_opaque = v2;
      os_unfair_lock_unlock(v3 + 1795);
    }
  }

  return AGX::BlitDispatchContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::~BlitDispatchContext(a1);
}

{
  void *v2;
  os_unfair_lock_s *v3;
  uint64_t os_unfair_lock_opaque;
  uint64_t vars8;

  *a1 = &unk_26F852050;
  uint64_t v2 = (void *)a1[838];
  if (v2)
  {
    int v3 = *(os_unfair_lock_s **)(a1[183] + 808);
    os_unfair_lock_lock(v3 + 1795);
    uint64_t os_unfair_lock_opaque = v3[1794]._os_unfair_lock_opaque;
    if (os_unfair_lock_opaque > 7)
    {
      os_unfair_lock_unlock(v3 + 1795);
      free(v2);
    }
    else
    {
      v3[1794]._uint64_t os_unfair_lock_opaque = os_unfair_lock_opaque + 1;
      *(void *)&v3[2 * os_unfair_lock_opaque + 1796]._uint64_t os_unfair_lock_opaque = v2;
      os_unfair_lock_unlock(v3 + 1795);
    }
  }

  return AGX::BlitDispatchContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::~BlitDispatchContext(a1);
}

void AGX::BlitDispatchContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::startFast2DHardwareCommand(uint64_t a1, void *a2, void *a3)
{
  uint64_t v6 = a1 + 8;
  uint32x2_t v7 = AGX::ContextCommon<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::newCommand(a1 + 8, 1072);
  if ([*(id *)(a1 + 8) skipRender])
  {
    uint64_t v14 = *(void *)(a1 + 1560) - *(void *)(a1 + 1576);
    *(_DWORD *)(v14 + 12) = 1;
    if ((*(unsigned char *)(v14 + 8) & 4) != 0) {
      **(unsigned char **)(*(void *)v6 + 688) = 1;
    }
  }
  *((void *)v7 + 1) = 0;
  *(void *)(v7 + 5) = 0x200000408;
  bzero(v7 + 8, 0x408uLL);
  *a2 = v7;
  *a3 = v7 + 8;
  *((void *)v7 + 60) = 0x4000;
  *((void *)v7 + 62) = 0x100000;
  uint64_t v8 = *(void *)(a1 + 1728);
  uint64_t v9 = v8 + 127;
  uint64_t v10 = *(void *)(a1 + 424);
  unint64_t v11 = v10 + v8 + 127;
  if (v11 > *(void *)(a1 + 416))
  {
    int v15 = AGX::DataBufferAllocator<34ul>::growNoInline(a1 + 24, 11, 0);
    uint64_t v10 = *(void *)(a1 + 424);
    if (!v15) {
      goto LABEL_4;
    }
    unint64_t v11 = v10 + v9;
    if ((unint64_t)(v10 + v9) > *(void *)(a1 + 416)) {
      abort();
    }
  }
  *(void *)(a1 + 432) = v11;
LABEL_4:
  unint64_t v12 = (v10 + 127) & 0xFFFFFFFFFFFFFF80;
  unint64_t v13 = v12 + *(void *)(a1 + 440);
  *(void *)(a1 + 424) = v12 + (v8 & 0xFFFFFFFFFFFFFFFCLL);
  *((void *)v7 + 63) = v13;
  *((unsigned char *)v7 + 1060) = 1;
  v7[239] = 8;
}

void AGX::BlitDispatchContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::endFast2DHardwareCommand(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!*(void *)(*(void *)(a1 + 1504) + 520))
  {
    uint64_t v5 = *(void *)(a1 + 1560) - *(void *)(a1 + 1576);
    *(_DWORD *)(v5 + 12) = 1;
    if ((*(unsigned char *)(v5 + 8) & 4) != 0) {
      **(unsigned char **)(*(void *)(a1 + 8) + 688) = 1;
    }
  }
  if (!*(_DWORD *)(a2 + 4))
  {
    {
    }
    *(unsigned char *)(a3 + 820) = *(unsigned char *)(a1 + 1520);
    *(_DWORD *)(a3 + 816) = *(_DWORD *)(a1 + 1516);
    *(void *)(a3 + 824) = *(void *)(a1 + 1524);
    if (*(void *)(a1 + 1960))
    {
      if (*(void *)(a1 + 1488)) {
        MTLResourceListAddResource();
      }
      IOGPUResourceListAddResource();
      uint64_t v6 = *(void **)(a1 + 1960);
      uint32x2_t v7 = (_DWORD *)(a1 + 1968);
      if (v6)
      {
        int v8 = *(_DWORD *)(a1 + 1972);
        int v9 = *(_DWORD *)(a1 + 1968);
        if ((v9 & v8) != 0xFFFFFFFF)
        {
          *(_DWORD *)(a3 + 784) = [v6 resourceID];
          *(_DWORD *)(a3 + 788) = v9;
          *(_DWORD *)(a3 + 792) = v8;
LABEL_14:
          _DWORD *v7 = -1;
          *(void *)(a3 + 840) = 0;
          return;
        }
      }
    }
    else
    {
      uint32x2_t v7 = (_DWORD *)(a1 + 1968);
    }
    *(void *)(a3 + 784) = -1;
    *(_DWORD *)(a3 + 792) = -1;
    goto LABEL_14;
  }
}

uint64_t AGX::BlitDispatchContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::bindFast2DResources(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint32x2_t v7 = *(void **)a2;
  if (a3)
  {
    uint64_t v9 = *a3;
    if (*a3 && v9 != (void)v7)
    {
      if (*(void *)(a1 + 1488)) {
        MTLResourceListAddResource();
      }
      if (!*(unsigned char *)(a1 + 1976))
      {
        if (a3[1]) {
          IOGPUResourceListAddResource();
        }
        if (a3[2]) {
          IOGPUResourceListAddResource();
        }
        AGX::ResourceGroupUsage<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::setAndBindResource(*(void **)(a1 + 1600), v9, 4);
      }
      IOGPUResourceListAddResource();
    }
  }
  uint64_t v11 = *(void *)(a1 + 1488);
  if (*(_DWORD *)(a4 + 3956))
  {
    AGX::FramebufferGen3_2<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::addAPIResources(a4, v11, *(void *)(a1 + 1496));
    AGX::FramebufferGen3_2<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::addGPUResources(a4, *(void *)(a1 + 1504), *(void **)(a1 + 1600), 63);
  }
  else
  {
    if (v11) {
      MTLResourceListAddResource();
    }
    if (*(void *)(a2 + 8)) {
      IOGPUResourceListAddResource();
    }
    if (*(void *)(a2 + 16)) {
      IOGPUResourceListAddResource();
    }
    AGX::ResourceGroupUsage<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::setAndBindResource(*(void **)(a1 + 1600), (uint64_t)v7, 12);
    IOGPUResourceListAddResource();
    if (!*(void *)(a1 + 1960)) {
      [v7 resourceOptions];
    }
  }

  return AGX::BlitDispatchContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::bindTrackedProxyResource((void *)a1);
}

uint64_t AGX::BlitDispatchContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::bindTrackedProxyResource(void *a1)
{
  uint64_t v2 = a1[6];
  if (!*(void *)(v2 + 1240) || !*(void *)(v2 + 1248))
  {
    uint64_t v3 = a1[85];
    if (!v3)
    {
      if (!AGX::DataBufferAllocator<34ul>::growNoInline(a1 + 3, 19, 0)) {
        goto LABEL_14;
      }
      uint64_t v3 = a1[85];
    }
    uint64_t v4 = v3 + 16;
    if ((unint64_t)(v3 + 16) <= a1[84]) {
      goto LABEL_5;
    }
    int v6 = AGX::DataBufferAllocator<34ul>::growNoInline(a1 + 3, 19, 0);
    uint64_t v3 = a1[85];
    if (!v6) {
      goto LABEL_6;
    }
    uint64_t v4 = v3 + 16;
    if ((unint64_t)(v3 + 16) <= a1[84])
    {
LABEL_5:
      a1[86] = v4;
LABEL_6:
      a1[85] = v3 + 16;
      goto LABEL_7;
    }
LABEL_14:
    abort();
  }
LABEL_7:

  return IOGPUResourceListAddResource();
}

double AGX::BlitDispatchContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::setupSpillBuffer(uint64_t a1, _DWORD *a2, _DWORD *a3, __n128 *a4, int a5)
{
  unsigned int v9 = a2[99];
  unsigned int v10 = a2[102];
  int v11 = a2[107];
  AGX::SpillInfoGen3<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::SpillInfoGen3((uint64_t)v43, *(void *)(a1 + 808), *(void *)(*(void *)(a1 + 808) + 6040));
  if (a5)
  {
    if (v9 <= v10) {
      unsigned int v12 = v10;
    }
    else {
      unsigned int v12 = v9;
    }
    int v13 = 32 * v12;
    unsigned int v14 = ((32 * v11 + 6143) >> 12) + ((v13 + 17279) >> 12);
    unsigned int v15 = ((v13 + 78719) >> 16) + ((32 * v11 + 67583) >> 16);
    if (*(_DWORD *)(v44 + 5864) == 21) {
      int v16 = 10;
    }
    else {
      int v16 = 14;
    }
    uint64_t v17 = v16 * v15;
    unint64_t v41 = (v17 + 96 * v14) | ((((unint64_t)(v17 + 32 * v14) >> 1) & 0x3FFFFFF) << 33);
    uint64_t v42 = v17;
    int v18 = a3[1268];
    int v19 = a3[1269];
    int v20 = a3[1270];
    if (v19) {
      int v21 = v19 + 64;
    }
    else {
      int v21 = 0;
    }
    unsigned int v22 = ((v21 + 4095) >> 12) + ((v18 + 0x1FFF) >> 12);
    unsigned int v23 = ((v18 + 69631) >> 16) + ((v21 + 0xFFFF) >> 16);
    unsigned int v24 = v22 + ((v20 + 4095) >> 12);
    unsigned int v25 = v23 + ((v20 + 0xFFFF) >> 16);
    if (*(unsigned char *)(v44 + 7815)) {
      unsigned int v26 = 11;
    }
    else {
      unsigned int v26 = 6;
    }
    if (v26 >= 8) {
      int v27 = 8;
    }
    else {
      int v27 = v26;
    }
    unint64_t v39 = (v27 * v25 + v26 * v24) | ((unint64_t)(v25 + v24) << 32);
    unsigned int v40 = v25;
    if ((AGX::SpillInfoGen3<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::checkSpillParamsForFragmentWithTile((uint64_t)v43, &v41, &v39) & 1) == 0)return result; {
LABEL_29:
    }
    *(void *)&double result = AGX::SpillInfoGen3<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::allocateUSCSpillBuffer((uint64_t)v43, a4 + 39, 0).n128_u64[0];
    return result;
  }
  int v29 = a3[1268];
  int v30 = a3[1269];
  int v31 = a3[1270];
  if (v30) {
    int v32 = v30 + 64;
  }
  else {
    int v32 = 0;
  }
  unsigned int v33 = ((v32 + 4095) >> 12) + ((v29 + 0x1FFF) >> 12);
  unsigned int v34 = ((v29 + 69631) >> 16) + ((v32 + 0xFFFF) >> 16);
  unsigned int v35 = v33 + ((v31 + 4095) >> 12);
  unsigned int v36 = v34 + ((v31 + 0xFFFF) >> 16);
  if (*(unsigned char *)(v44 + 7815)) {
    unsigned int v37 = 11;
  }
  else {
    unsigned int v37 = 6;
  }
  if (v37 >= 8) {
    int v38 = 8;
  }
  else {
    int v38 = v37;
  }
  unint64_t v41 = (v38 * v36 + v37 * v35) | ((unint64_t)(v36 + v35) << 32);
  LODWORD(v42) = v36;
  if (AGX::SpillInfoGen3<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::checkSpillParamsForFragment((uint64_t)v43, a2 + 672, &v41))goto LABEL_29; {
  return result;
  }
}

uint64_t AGX::BlitDispatchContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::emitFast2DControlStream(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint32x2_t v7 = (void *)result;
  uint64_t v8 = *(void *)(result + 520);
  uint64_t v9 = v8 + 255;
  if ((unint64_t)(v8 + 255) > *(void *)(result + 512))
  {
    double result = AGX::DataBufferAllocator<34ul>::growNoInline(result + 24, 14, 0);
    uint64_t v8 = v7[65];
    if (!result) {
      goto LABEL_3;
    }
    uint64_t v9 = v8 + 255;
    if ((unint64_t)(v8 + 255) > v7[64]) {
      abort();
    }
  }
  v7[66] = v9;
LABEL_3:
  uint64_t v10 = v7[67];
  unint64_t v11 = (v8 + 127) & 0xFFFFFFFFFFFFFF80;
  v7[65] = v11 + 128;
  *(unsigned char *)(v11 + 2) = BYTE2(a3);
  *(_WORD *)unint64_t v11 = a3;
  *(unsigned char *)(v11 + 7) = BYTE4(a4);
  *(_DWORD *)(v11 + 3) = a4;
  *(unsigned char *)(v11 + 8) = -88;
  *(void *)(a2 + 808) = v11 + v10;
  return result;
}

uint64_t AGX::BlitDispatchContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::renderTexture(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned int a9)
{
  uint64_t v9 = MEMORY[0x270FA5388](a1);
  long long v110 = v10;
  unsigned int v12 = v11;
  int v108 = v13;
  uint64_t v15 = v14;
  uint64_t v17 = v16;
  int v19 = v18;
  uint64_t v21 = v20;
  uint64_t v22 = v9;
  uint64_t v159 = *MEMORY[0x263EF8340];
  AGX::BlitDispatchContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::endPreviousBlitCommand(v9, 0, v23, v24, v25);
  unsigned int v26 = (_DWORD **)MEMORY[0x263F4B1E8];
  if (*(_DWORD *)*MEMORY[0x263F4B1E8]) {
    IOGPUDeviceTraceEvent();
  }
  if (v15)
  {
    unsigned int v27 = *(_DWORD *)(v15 + 144);
    unsigned int v28 = *(_DWORD *)(v15 + 128) >> v27;
    if (v28 <= 1) {
      unsigned int v28 = 1;
    }
    unsigned int v102 = v28;
    uint32x2_t v29 = vmax_u32(vshl_u32(*(uint32x2_t *)(v15 + 132), (uint32x2_t)vneg_s32(vdup_n_s32(v27))), (uint32x2_t)0x100000001);
  }
  else
  {
    unsigned int v102 = 0;
    uint32x2_t v29 = (uint32x2_t)0x100000000;
  }
  uint32x2_t v103 = v29;
  int v30 = v19[36];
  unsigned int v31 = v19[33];
  if (v19[32] >> v30 <= 1u) {
    int v32 = 1;
  }
  else {
    int v32 = v19[32] >> v30;
  }
  if (v31 >> v30 <= 1) {
    int v33 = 1;
  }
  else {
    int v33 = v31 >> v30;
  }
  unsigned int v34 = v19[34] >> v30;
  if (v34 <= 1) {
    unsigned int v34 = 1;
  }
  unsigned int v107 = v34;
  if (v110) {
    BOOL v35 = v15 == 0;
  }
  else {
    BOOL v35 = 1;
  }
  v135[0] = v19;
  LODWORD(v123) = v12;
  if (v19) {
    unsigned int v36 = v135;
  }
  else {
    unsigned int v36 = 0;
  }
  int v37 = v33;
  AGX::FramebufferDriverConfig<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::FramebufferDriverConfig((uint64_t)v154, 1u, v21, (uint64_t)v36, (uint64_t)&v123, a9, v35, v110 != 0, 1u);
  long long v157 = 0u;
  AGX::FramebufferCompilerConfigGen3<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::buildDrawBufferState((uint64_t)v155, 0);
  uint64_t v158 = 0;
  AGX::FramebufferGen3_3<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::FramebufferGen3_3((uint64_t)v135, *(atomic_ullong **)(v22 + 1464), *(void *)(*(void *)(v22 + 8) + 688), (uint64_t)v154, v32, v37, 1);
  int v106 = v37;
  AGX::FramebufferGen3_1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::finalizeStoreActions((unint64_t)v135);
  AGX::FramebufferGen3<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::updateResourceGroupUsage((uint64_t)v135, *(void **)(v22 + 1600));
  unsigned int v109 = v12;
  uint64_t v134 = 0;
  unsigned int v133 = 0;
  AGX::BlitDispatchContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::startFast2DHardwareCommand(v22, &v134, &v133);
  int v38 = v133;
  int v104 = (void *)(v22 + 24);
  AGX::BlitUSCStateLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes>::setupBlitCommand(v22 + 1760, v133, *(void *)(v22 + 1504), (void *)(v22 + 24), (uint64_t)v135);
  *((_DWORD *)v38 + 190) = v143;
  if (v147) {
    BOOL v39 = 0;
  }
  else {
    BOOL v39 = v148 == 0;
  }
  if (v39 && *(unsigned __int16 *)(*(void *)(v135[50] + 808) + 7766) > 0xAu) {
    int v41 = 256;
  }
  else {
    int v41 = 768;
  }
  *((_DWORD *)v38 + 189) = v41;
  *((unsigned char *)v38 + 774) = v144 != 0;
  AGX::SpillInfoGen3<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::SpillInfoGen3((uint64_t)v131, *(void *)(*(void *)(v22 + 1464) + 808), *(void *)(*(void *)(*(void *)(v22 + 1464) + 808) + 6040));
  int v105 = v32;
  int v42 = 32 * *(_DWORD *)(v22 + 1776);
  int v43 = 32 * *(_DWORD *)(v22 + 1784);
  unsigned int v44 = ((v43 + 6143) >> 12) + ((v42 + 17279) >> 12);
  unint64_t v45 = ((v42 + 78719) >> 16) + ((v43 + 67583) >> 16);
  if (*(_DWORD *)(v132 + 5864) == 21) {
    int v46 = 10;
  }
  else {
    int v46 = 14;
  }
  unint64_t v123 = (v46 * v45 + 96 * v44) | ((unint64_t)(v45 + v44) << 32);
  unint64_t v124 = v45;
  if (v150) {
    int v47 = v150 + 64;
  }
  else {
    int v47 = 0;
  }
  unsigned int v48 = ((v149 + 69631) >> 16) + ((v47 + 0xFFFF) >> 16);
  unsigned int v49 = ((v47 + 4095) >> 12) + ((v149 + 0x1FFF) >> 12) + ((v151 + 4095) >> 12);
  unsigned int v50 = v48 + ((v151 + 0xFFFF) >> 16);
  if (*(unsigned char *)(v132 + 7815)) {
    unsigned int v51 = 11;
  }
  else {
    unsigned int v51 = 6;
  }
  if (v51 >= 8) {
    int v52 = 8;
  }
  else {
    int v52 = v51;
  }
  *(void *)&long long v116 = (v52 * v50 + v51 * v49) | ((unint64_t)(v50 + v49) << 32);
  DWORD2(v116) = v50;
  if (AGX::SpillInfoGen3<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::checkSpillParamsForFragment((uint64_t)v131, &v123, &v116))AGX::SpillInfoGen3<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::allocateUSCSpillBuffer((uint64_t)v131, (__n128 *)v38 + 39, 0); {
  int v53 = v136;
  }
  *(void *)&long long v54 = v137;
  int v55 = v146;
  *((void *)&v54 + 1) = v138;
  long long v56 = v139;
  long long v57 = v140;
  long long v58 = v141;
  uint64_t v59 = v142;
  v38[116] = 0;
  *((_DWORD *)v38 + 234) = v53;
  *(_OWORD *)((char *)v38 + 940) = v54;
  *(_OWORD *)((char *)v38 + 956) = v56;
  *(_OWORD *)((char *)v38 + 972) = v57;
  *(_OWORD *)((char *)v38 + 988) = v58;
  *(void *)((char *)v38 + 1004) = v59;
  *((_DWORD *)v38 + 253) = v55;
  v38[127] = 0;
  v38[127] = v145;
  if (v15 && v110) {
    *((int8x16_t *)v38 + 58) = vextq_s8(*v110, *v110, 8uLL);
  }
  AGX::BlitDispatchContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::bindFast2DResources(v22, v21, v17, (uint64_t)v135);
  if (v15)
  {
    long long v130 = 0u;
    long long v129 = 0u;
    long long v128 = 0u;
    long long v127 = 0u;
    memset(v122, 0, 24);
    DWORD2(v116) = 14;
    memset(__p, 0, sizeof(__p));
    long long v119 = v155[1];
    *(void *)&long long v116 = &unk_26F852088;
    uint64_t v120 = v156;
    long long v118 = v155[0];
    int v121 = (16 * (BYTE4(v137) & 0xF)) | (((unint64_t)*(unsigned __int8 *)(v15 + 381) << 8 == 768) << 8);
    BlitProgramVariant = (_DWORD *)AGX::Device<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::findOrCreateBlitProgramVariant(*(void *)(*(void *)(v22 + 1464) + 808), (uint64_t)&v116);
    *(void *)&long long v116 = &unk_26F8520C8;
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    unsigned int v61 = BlitProgramVariant[420];
    do
    {
      IOGPUResourceListAddResource();
      v61 &= ~(1 << __clz(__rbit32(v61)));
    }
    while (v61);
    AGX::BlitDispatchContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::setupSpillBuffer(*(void *)(v22 + 1464), BlitProgramVariant, v135, (__n128 *)v38, 0);
    unsigned int v62 = v109;
    float v63 = *(float *)&v110;
    if (v110) {
      unsigned int v62 = v110[1].u32[2];
    }
    uint64_t v64 = *(void *)(v15 + 400);
    uint64_t v65 = *(void *)(v15 + 408);
    unint64_t v66 = *(void *)(v15 + 416);
    if (*(_DWORD *)(v15 + 64) < 2u)
    {
      unint64_t v67 = v64 & 0xFBFFFFFFFFFFFFFFLL;
    }
    else
    {
      unint64_t v67 = v64 | 0x400000000000000;
      unint64_t v66 = v66 & 0xF0000FFFFFFFFFFFLL | ((unint64_t)(*(_DWORD *)(v15 + 144) & 0xF | (16
                                                                                           * (*(_DWORD *)(v15 + 144) & 0xFu))) << 44);
      v65 |= 0x8000000000000000;
    }
    int v68 = *v108;
    uint64_t v69 = *(void *)(v15 + 424);
    unint64_t v70 = v65 & 0xFFFFF00000000000 | ((AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getGPUVirtualAddress(v15, 0, 0, 0, 0)+ *(void *)(v15 + 328) * (unint64_t)v62) >> 4) & 0xFFFFFFFFFFFLL;
    unint64_t v123 = v67;
    unint64_t v124 = v70;
    unint64_t v125 = v66;
    uint64_t v126 = v69;
    long long v119 = 0uLL;
    LOWORD(v116) = ((v68 & 1) << 7) | ((v68 & 1) << 8) | 0x20;
    *((void *)&v116 + 1) = 0x7F7FFFFF00000000;
    memset(__p, 0, 20);
    DWORD1(v116) = ((v68 & 1) << 16) | ((v68 & 1) << 18) | 0x4001;
    long long v118 = 0uLL;
    AGX::SamplerStateEncoderGen4<AGX::HAL200::TextureFormatTable>::SamplerStateFields::SamplerStateFields(v111, (uint64_t)&v116);
    *(void *)&long long v129 = v111[0];
    if (v110)
    {
      __int32 v72 = v110->i32[2];
      __int32 v71 = v110->i32[3];
      __int32 v73 = v110->i32[1];
      int v105 = v110->i32[0] + v72;
      int v106 = v73 + v71;
      unsigned int v74 = v110[1].u32[0];
      unsigned int v75 = v110[1].u32[1];
      unsigned int v109 = v110[1].u32[2];
      unsigned int v107 = v103.u32[1];
      int v76 = (unsigned __int16)(v71 + 4096);
      float v77 = (float)v74 / (float)v102;
      float v63 = (float)v75 / (float)v103.u32[0];
      float v78 = (float)(v75 + v73) / (float)v103.u32[0];
      float v79 = (float)(v74 + v110->i32[0]) / (float)v102;
    }
    else
    {
      __int32 v72 = 0;
      float v77 = 0.0;
      float v78 = 1.0;
      int v76 = 4096;
      float v79 = 1.0;
    }
    int v80 = BlitProgramVariant[676];
    int v81 = BlitProgramVariant[677];
    AGX::BlitUSCStateLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes>::emitFragmentProgramVariantArguments((uint64_t)&v114, (void *)(v22 + 1760), v104, (uint64_t)BlitProgramVariant, (uint64_t)&v123, (uint64_t)v122, v135);
    long long v116 = v114;
    LODWORD(__p[0]) = v115;
    HIDWORD(__p[0]) = v80 & 0xE6600000 | 0x40200;
    *(_OWORD *)&__p[1] = xmmword_242EA7DC0;
    LODWORD(v118) = 0;
    DWORD1(v118) = v81 & 0x1FFFF;
    if (HIDWORD(v137) <= 1) {
      unsigned int v82 = 17288;
    }
    else {
      unsigned int v82 = 82824;
    }
    *(void *)&long long v119 = v82 | 0x200000000;
    *((void *)&v118 + 1) = 0x8888888800600014;
    uint64_t v83 = *(void *)(v22 + 520);
    uint64_t v84 = v83 + 188;
    if ((unint64_t)(v83 + 188) > *(void *)(v22 + 512))
    {
      int v101 = AGX::DataBufferAllocator<34ul>::growNoInline(v104, 14, 0);
      int v85 = v105;
      uint64_t v83 = *(void *)(v22 + 520);
      if (!v101) {
        goto LABEL_67;
      }
      uint64_t v84 = v83 + 188;
      if ((unint64_t)(v83 + 188) > *(void *)(v22 + 512)) {
        abort();
      }
    }
    else
    {
      int v85 = v105;
    }
    *(void *)(v22 + 528) = v84;
LABEL_67:
    uint64_t v86 = *(void *)(v22 + 536) + v83;
    *(void *)(v22 + 520) = v83 + 188;
    int v87 = AGX::ISPPFEncoderGen2<AGX::HAL200::Encoders>::PrimitiveBlock::emit(&v116, v83, v86, (uint64_t)v111);
    uint64_t v88 = v113;
    int v89 = (v72 << 8) + 0x100000;
    *(_DWORD *)uint64_t v113 = v89 & 0xFFFF00;
    *(_DWORD *)(v88 + 4) = v76;
    *(_DWORD *)(v88 + 8) = *(unsigned __int16 *)(v88 + 10) << 16;
    uint64_t v90 = v113;
    *(_WORD *)(v113 + 10) = (_WORD)v72 << 8;
    *(_DWORD *)(v90 + 12) = ((v106 << 16) + 0x10000000) & 0xFFFFFF00 | BYTE2(v89);
    *(_DWORD *)(v90 + 16) = 0;
    int v91 = (v85 << 8) + 0x100000;
    uint64_t v92 = v113;
    int v93 = (_DWORD *)v111[1];
    *(_DWORD *)(v113 + 20) = v91 & 0xFFFF00;
    *(_DWORD *)(v92 + 24) = v76;
    *(_DWORD *)(v92 + 28) = *(unsigned __int16 *)(v92 + 30) << 16;
    uint64_t v94 = v113;
    *(_WORD *)(v113 + 30) = (_WORD)v85 << 8;
    *(_DWORD *)(v94 + 32) = ((v106 << 16) + 0x10000000) & 0xFFFFFF00 | BYTE2(v91);
    *(_DWORD *)(v94 + 36) = 0;
    *int v93 = 2130706432;
    v93[LODWORD(v111[0])] = 2130706432;
    v93[2 * LODWORD(v111[0])] = 2130706432;
    v93[3 * LODWORD(v111[0])] = 2130706432;
    *((float *)&v96 + 1) = v77;
    *(float *)&unint64_t v96 = v77;
    int v95 = v96 >> 31;
    *((float *)&v96 + 1) = v63;
    *(float *)&unint64_t v96 = v63;
    int v97 = v96 >> 31;
    v93[1] = v95;
    v93[2] = v97;
    *((float *)&v96 + 1) = (float)((float)v109 + 0.5) / (float)v107;
    *(float *)&unint64_t v96 = *((float *)&v96 + 1);
    LODWORD(v94) = v96 >> 31;
    long long v93[3] = v94;
    v93[4] = 2130706432;
    v93[LODWORD(v111[0]) + 1] = v95;
    *((float *)&v96 + 1) = v78;
    *(float *)&unint64_t v96 = v78;
    int v98 = v96 >> 31;
    v93[LODWORD(v111[0]) + 2] = v98;
    v93[LODWORD(v111[0]) + 3] = v94;
    v93[LODWORD(v111[0]) + 4] = 2130706432;
    *((float *)&v96 + 1) = v79;
    *(float *)&unint64_t v96 = v79;
    LODWORD(v92) = v96 >> 31;
    v93[(2 * LODWORD(v111[0])) | 1] = v92;
    v93[2 * LODWORD(v111[0]) + 2] = v97;
    v93[2 * LODWORD(v111[0]) + 3] = v94;
    v93[2 * LODWORD(v111[0]) + 4] = 2130706432;
    v93[3 * LODWORD(v111[0]) + 1] = v92;
    v93[3 * LODWORD(v111[0]) + 2] = v98;
    v93[3 * LODWORD(v111[0]) + 3] = v94;
    v93[3 * LODWORD(v111[0]) + 4] = 2130706432;
    *uint64_t v112 = *v112 & 0xFFFFFF80 | 0x40;
    *uint64_t v112 = *v112 & 0xFFFF80FF | 0x4100;
    *uint64_t v112 = *v112 & 0xFF80FFFF | 0x420000;
    *uint64_t v112 = *v112 & 0x80FFFFFF | 0x43000000;
    v112[1] = v112[1] & 0xFFFFFF80 | 0x42;
    v112[1] = v112[1] & 0xFFFF80FF | 0x4100;
    int v38 = v133;
    AGX::BlitDispatchContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::emitFast2DControlStream(v22, (uint64_t)v133, v87, v99);
    unsigned int v26 = (_DWORD **)MEMORY[0x263F4B1E8];
  }
  if ((*(unsigned char *)v108 & 2) != 0) {
    *((unsigned char *)v38 + 773) = 1;
  }
  AGX::BlitDispatchContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::endFast2DHardwareCommand(v22, v134, (uint64_t)v38);
  if (**v26) {
    IOGPUDeviceTraceEvent();
  }
  free(v153);
  if (v152) {

  }
  return AGX::Framebuffer<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::~Framebuffer((uint64_t)v135);
}

void sub_242A2A934(_Unwind_Exception *a1)
{
}

uint64_t AGX::BlitDispatchContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::render3D(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned char *a10)
{
  uint64_t v10 = MEMORY[0x270FA5388](a1);
  size_t v12 = v11;
  uint64_t v14 = v13;
  int v16 = v15;
  uint64_t v97 = v17;
  int v19 = v18;
  uint64_t v21 = v20;
  uint64_t v23 = v22;
  uint64_t v24 = v10;
  uint64_t v155 = *MEMORY[0x263EF8340];
  AGX::BlitDispatchContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::endPreviousBlitCommand(v10, 0, v25, v26, v27);
  if (*(_DWORD *)*MEMORY[0x263F4B1E8]) {
    IOGPUDeviceTraceEvent();
  }
  int v28 = *(_DWORD *)(a9 + 56);
  v131[0] = v21;
  LODWORD(v122) = v28;
  if (v21) {
    uint32x2_t v29 = v131;
  }
  else {
    uint32x2_t v29 = 0;
  }
  AGX::FramebufferDriverConfig<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::FramebufferDriverConfig((uint64_t)v150, 1u, v23, (uint64_t)v29, (uint64_t)&v122, 0, 0, 1, 1u);
  long long v153 = 0u;
  AGX::FramebufferCompilerConfigGen3<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::buildDrawBufferState((uint64_t)v151, 0);
  uint64_t v154 = 0;
  AGX::FramebufferGen3_3<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::FramebufferGen3_3((uint64_t)v131, *(atomic_ullong **)(v24 + 1464), *(void *)(*(void *)(v24 + 8) + 688), (uint64_t)v150, *(_DWORD *)(a9 + 32), *(_DWORD *)(a9 + 36), 1);
  int v98 = v19;
  AGX::FramebufferGen3_1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::finalizeStoreActions((unint64_t)v131);
  AGX::FramebufferGen3<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::updateResourceGroupUsage((uint64_t)v131, *(void **)(v24 + 1600));
  long long v129 = 0;
  uint64_t v130 = 0;
  AGX::BlitDispatchContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::startFast2DHardwareCommand(v24, &v130, &v129);
  if (v12)
  {
    uint64_t v30 = 2 * v12 - 1;
    uint64_t v31 = *(void *)(v24 + 200);
    uint64_t v32 = v31 + v30;
    if ((unint64_t)(v31 + v30) > *(void *)(v24 + 192))
    {
      int v94 = AGX::DataBufferAllocator<34ul>::growNoInline(v24 + 24, 4, 0);
      uint64_t v31 = *(void *)(v24 + 200);
      if (!v94) {
        goto LABEL_9;
      }
      uint64_t v32 = v31 + v30;
      if ((unint64_t)(v31 + v30) > *(void *)(v24 + 192)) {
        abort();
      }
    }
    *(void *)(v24 + 208) = v32;
LABEL_9:
    int v33 = (char *)((v12 + v31 - 1) & -(uint64_t)v12);
    int v16 = &v33[*(void *)(v24 + 216)];
    *(void *)(v24 + 200) = &v33[v12];
    memcpy(v33, v14, v12);
  }
  unsigned int v34 = v129;
  unint64_t v96 = (void *)(v24 + 24);
  AGX::BlitUSCStateLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes>::setupBlitCommand(v24 + 1760, v129, *(void *)(v24 + 1504), (void *)(v24 + 24), (uint64_t)v131);
  int v95 = v16;
  *((_DWORD *)v34 + 190) = v139;
  if (v143) {
    BOOL v35 = 0;
  }
  else {
    BOOL v35 = v144 == 0;
  }
  if (v35 && *(unsigned __int16 *)(*(void *)(v131[50] + 808) + 7766) > 0xAu) {
    int v37 = 256;
  }
  else {
    int v37 = 768;
  }
  *((_DWORD *)v34 + 189) = v37;
  *((unsigned char *)v34 + 774) = v140 != 0;
  AGX::SpillInfoGen3<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::SpillInfoGen3((uint64_t)v127, *(void *)(*(void *)(v24 + 1464) + 808), *(void *)(*(void *)(*(void *)(v24 + 1464) + 808) + 6040));
  int v38 = 32 * *(_DWORD *)(v24 + 1776);
  int v39 = 32 * *(_DWORD *)(v24 + 1784);
  unsigned int v40 = ((v39 + 6143) >> 12) + ((v38 + 17279) >> 12);
  uint64_t v41 = ((v38 + 78719) >> 16) + ((v39 + 67583) >> 16);
  if (*(_DWORD *)(v128 + 5864) == 21) {
    int v42 = 10;
  }
  else {
    int v42 = 14;
  }
  *(void *)&long long v122 = (v42 * v41 + 96 * v40) | ((unint64_t)(v41 + v40) << 32);
  *((void *)&v122 + 1) = v41;
  if (v146) {
    int v43 = v146 + 64;
  }
  else {
    int v43 = 0;
  }
  unsigned int v44 = ((v145 + 69631) >> 16) + ((v43 + 0xFFFF) >> 16);
  unsigned int v45 = ((v43 + 4095) >> 12) + ((v145 + 0x1FFF) >> 12) + ((v147 + 4095) >> 12);
  unsigned int v46 = v44 + ((v147 + 0xFFFF) >> 16);
  if (*(unsigned char *)(v128 + 7815)) {
    unsigned int v47 = 11;
  }
  else {
    unsigned int v47 = 6;
  }
  if (v47 >= 8) {
    int v48 = 8;
  }
  else {
    int v48 = v47;
  }
  *(void *)&long long v114 = (v48 * v46 + v47 * v45) | ((unint64_t)(v46 + v45) << 32);
  DWORD2(v114) = v46;
  if (AGX::SpillInfoGen3<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::checkSpillParamsForFragment((uint64_t)v127, &v122, &v114))AGX::SpillInfoGen3<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::allocateUSCSpillBuffer((uint64_t)v127, (__n128 *)v34 + 39, 0); {
  int v49 = v132;
  }
  *(void *)&long long v50 = v133;
  int v51 = v142;
  *((void *)&v50 + 1) = v134;
  long long v52 = v135;
  long long v53 = v136;
  long long v54 = v137;
  uint64_t v55 = v138;
  v34[116] = 0;
  *((_DWORD *)v34 + 234) = v49;
  *(_OWORD *)((char *)v34 + 940) = v50;
  *(_OWORD *)((char *)v34 + 956) = v52;
  *(_OWORD *)((char *)v34 + 972) = v53;
  *(_OWORD *)((char *)v34 + 988) = v54;
  *(void *)((char *)v34 + 1004) = v55;
  *((_DWORD *)v34 + 253) = v51;
  v34[127] = 0;
  v34[127] = v141;
  long long v56 = *(_OWORD *)(a9 + 48);
  *((void *)&v56 + 1) = *(void *)(a9 + 60);
  *((_OWORD *)v34 + 58) = v56;
  AGX::BlitDispatchContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::bindFast2DResources(v24, v23, v98, (uint64_t)v131);
  DWORD2(v122) = 14;
  v124[0] = 0;
  long long __p = 0uLL;
  *(_OWORD *)&v124[1] = v151[0];
  *(_OWORD *)&v124[3] = v151[1];
  *(void *)&long long v122 = &unk_26F852088;
  unint64_t v125 = v152;
  LODWORD(v126) = *(_DWORD *)a9 & 0xF | (16 * (*(_DWORD *)(a9 + 4) & 0xF)) | (*(unsigned __int8 *)(a9 + 75) << 9) | (*(unsigned __int8 *)(a9 + 72) << 10) | (*(unsigned __int8 *)(a9 + 73) << 11) | (*(unsigned __int8 *)(a9 + 74) << 12) | ((*(_DWORD *)(a9 + 16) & 0x1F) << 13);
  BlitProgramVariant = (_DWORD *)AGX::Device<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::findOrCreateBlitProgramVariant(*(void *)(*(void *)(v24 + 1464) + 808), (uint64_t)&v122);
  *(void *)&long long v122 = &unk_26F8520C8;
  if ((void)__p)
  {
    *((void *)&__p + 1) = __p;
    operator delete((void *)__p);
  }
  unsigned int v58 = BlitProgramVariant[420];
  do
  {
    IOGPUResourceListAddResource();
    v58 &= ~(1 << __clz(__rbit32(v58)));
  }
  while (v58);
  AGX::BlitDispatchContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::setupSpillBuffer(*(void *)(v24 + 1464), BlitProgramVariant, v131, (__n128 *)v34, 0);
  long long v126 = 0u;
  memset(v124, 0, sizeof(v124));
  long long __p = 0u;
  long long v122 = 0u;
  unint64_t v125 = v95;
  if (v97)
  {
    uint64_t v120 = 0;
    uint64_t v121 = 0;
    LOWORD(v114) = 32;
    *((void *)&v114 + 1) = 0x7F7FFFFF00000000;
    int v115 = 0;
    DWORD1(v114) = 16385;
    uint64_t v118 = 0;
    uint64_t v119 = 0;
    uint64_t v117 = 0;
    uint64_t v116 = 0;
    uint64_t v59 = *(void *)(v97 + 400);
    uint64_t v60 = *(void *)(v97 + 408);
    unint64_t v61 = *(void *)(v97 + 416);
    if (*(_DWORD *)(v97 + 64) < 2u)
    {
      unint64_t v62 = v59 & 0xFBFFFFFFFFFFFFFFLL;
    }
    else
    {
      unint64_t v62 = v59 | 0x400000000000000;
      unint64_t v61 = v61 & 0xF0000FFFFFFFFFFFLL | ((unint64_t)(*(_DWORD *)(v97 + 144) & 0xF | (16
                                                                                           * (*(_DWORD *)(v97 + 144) & 0xFu))) << 44);
      v60 |= 0x8000000000000000;
    }
    uint64_t v63 = *(void *)(v97 + 424);
    unint64_t GPUVirtualAddress = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getGPUVirtualAddress(v97, 0, 0, 0, 0);
    *(void *)&long long v122 = v62;
    *((void *)&v122 + 1) = v60 & 0xFFFFF00000000000 | (GPUVirtualAddress >> 4) & 0xFFFFFFFFFFFLL;
    *(void *)&long long __p = v61;
    *((void *)&__p + 1) = v63;
    AGX::SamplerStateEncoderGen4<AGX::HAL200::TextureFormatTable>::SamplerStateFields::SamplerStateFields(&v124[4], (uint64_t)&v114);
  }
  int v65 = *(unsigned __int16 *)(a9 + 8) | (*(_DWORD *)(a9 + 12) << 16);
  *(void *)((char *)&v114 + 4) = *(void *)(a9 + 20);
  int v66 = *(_DWORD *)(a9 + 28);
  LODWORD(v114) = v65;
  int v67 = *(_DWORD *)(a9 + 40);
  int v69 = *(_DWORD *)(a9 + 64);
  int v68 = *(_DWORD *)(a9 + 68);
  HIDWORD(v114) = v66;
  int v115 = v67;
  LODWORD(v116) = v68;
  int v71 = *(_DWORD *)(a9 + 48);
  int v70 = *(_DWORD *)(a9 + 52);
  int v72 = *(_DWORD *)(a9 + 60);
  int v73 = BlitProgramVariant[676];
  int v74 = BlitProgramVariant[677];
  AGX::BlitUSCStateLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes>::emitFragmentProgramVariantArguments((uint64_t)&v112, (void *)(v24 + 1760), v96, (uint64_t)BlitProgramVariant, (uint64_t)&v122, (uint64_t)&v114, v131);
  long long v103 = v112;
  int v104 = v113;
  unsigned int v105 = v73 & 0xE6600000 | 0x40200;
  long long v106 = xmmword_242EA7DC0;
  int v107 = 0;
  int v108 = v74 & 0x1FFFF;
  if (HIDWORD(v133) <= 1) {
    int v75 = 17288;
  }
  else {
    int v75 = 82824;
  }
  int v110 = v75;
  int v111 = 2;
  unint64_t v109 = 0x8888888800200004;
  uint64_t v76 = *(void *)(v24 + 520);
  uint64_t v77 = v76 + 116;
  float v78 = (_DWORD **)MEMORY[0x263F4B1E8];
  if ((unint64_t)(v76 + 116) <= *(void *)(v24 + 512)) {
    goto LABEL_46;
  }
  int v93 = AGX::DataBufferAllocator<34ul>::growNoInline(v96, 14, 0);
  uint64_t v76 = *(void *)(v24 + 520);
  if (v93)
  {
    uint64_t v77 = v76 + 116;
    if ((unint64_t)(v76 + 116) > *(void *)(v24 + 512)) {
      abort();
    }
LABEL_46:
    *(void *)(v24 + 528) = v77;
  }
  int v79 = v72 + v71;
  uint64_t v80 = *(void *)(v24 + 536) + v76;
  *(void *)(v24 + 520) = v76 + 116;
  int v81 = AGX::ISPPFEncoderGen2<AGX::HAL200::Encoders>::PrimitiveBlock::emit(&v103, v76, v80, (uint64_t)&v99);
  uint64_t v82 = v102;
  int v83 = (v71 << 8) + 0x100000;
  int v84 = (unsigned __int16)(v70 + 4096);
  *(_DWORD *)uint64_t v102 = v83 & 0xFFFF00;
  *(_DWORD *)(v82 + 4) = v84;
  *(_DWORD *)(v82 + 8) = *(unsigned __int16 *)(v82 + 10) << 16;
  uint64_t v85 = v102;
  *(_WORD *)(v102 + 10) = (_WORD)v71 << 8;
  *(_DWORD *)(v85 + 12) = (((v69 + v70) << 16) + 0x10000000) & 0xFFFFFF00 | BYTE2(v83);
  *(_DWORD *)(v85 + 16) = 0;
  int v86 = (v79 << 8) + 0x100000;
  uint64_t v87 = v102;
  uint64_t v88 = v100;
  *(_DWORD *)(v102 + 20) = v86 & 0xFFFF00;
  *(_DWORD *)(v87 + 24) = v84;
  *(_DWORD *)(v87 + 28) = *(unsigned __int16 *)(v87 + 30) << 16;
  uint64_t v89 = v102;
  *(_WORD *)(v102 + 30) = (_WORD)v79 << 8;
  *(_DWORD *)(v89 + 32) = (((v69 + v70) << 16) + 0x10000000) & 0xFFFFFF00 | BYTE2(v86);
  *(_DWORD *)(v89 + 36) = 0;
  *uint64_t v88 = 2130706432;
  v88[v99] = 2130706432;
  v88[2 * v99] = 2130706432;
  v88[3 * v99] = 2130706432;
  *int v101 = *v101 & 0xFFFFFF80 | 0x40;
  *int v101 = *v101 & 0xFFFF80FF | 0x4100;
  *int v101 = *v101 & 0xFF80FFFF | 0x420000;
  *int v101 = *v101 & 0x80FFFFFF | 0x43000000;
  v101[1] = v101[1] & 0xFFFFFF80 | 0x42;
  v101[1] = v101[1] & 0xFFFF80FF | 0x4100;
  uint64_t v90 = v129;
  AGX::BlitDispatchContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::emitFast2DControlStream(v24, (uint64_t)v129, v81, v91);
  if ((*a10 & 2) != 0) {
    *((unsigned char *)v90 + 773) = 1;
  }
  AGX::BlitDispatchContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::endFast2DHardwareCommand(v24, v130, (uint64_t)v90);
  if (**v78) {
    IOGPUDeviceTraceEvent();
  }
  free(v149);
  if (v148) {

  }
  return AGX::Framebuffer<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::~Framebuffer((uint64_t)v131);
}

void sub_242A2B2D4(_Unwind_Exception *a1)
{
}

uint64_t AGX::BlitDispatchContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::blitTextureToBufferWithTA(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6, unint64_t a7, unint64_t a8, char a9)
{
  uint64_t v17 = (_DWORD **)MEMORY[0x263F4B1E8];
  if (*(_DWORD *)*MEMORY[0x263F4B1E8]) {
    IOGPUDeviceTraceEvent();
  }
  long long v56 = 0;
  uint64_t v57 = 0;
  AGX::BlitDispatchContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::startTAHardwareCommand((uint64_t)a1);
  AGX::BlitDispatchContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::bindTAResources((uint64_t)a1, a2, a4);
  unsigned int v18 = *(_DWORD *)(a5 + 112);
  unsigned int v19 = v18 * a7;
  LODWORD(v51) = 15;
  long long v53 = 0;
  uint64_t v54 = 0;
  long long __p = 0;
  long long v50 = &unk_26F852188;
  unint64_t v20 = *(void *)(a5 + 24) - 2;
  if (v20 >= 6) {
    int v21 = 0;
  }
  else {
    int v21 = dword_242EAA2C0[v20];
  }
  unsigned int v22 = (-256 * __clz(v19 - 1)) & 0x700;
  if (v19 >= 2) {
    unsigned int v23 = v22;
  }
  else {
    unsigned int v23 = 0;
  }
  int v24 = ((3 * __clz(v18 - 1)) & 3) << 23;
  if (v18 >= 2) {
    int v25 = v24;
  }
  else {
    int v25 = 0;
  }
  int v55 = ((*(void *)(a6 + 16) != 0) << 25) | (8 * (a9 & 0x1F)) | v21 | v25 | v23;
  uint64_t BlitProgramVariant = AGX::Device<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::findOrCreateBlitProgramVariant(*(void *)(a1[183] + 808), (uint64_t)&v50);
  AGX::SpillInfoGen3<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::SpillInfoGen3((uint64_t)v46, *(void *)(a1[183] + 808), *(void *)(*(void *)(a1[183] + 808) + 6032));
  LODWORD(v49) = 1;
  int v27 = *(_DWORD *)(BlitProgramVariant + 2636);
  int v28 = *(_DWORD *)&v46[4];
  if (v27 > *(int *)&v46[4])
  {
    *(_DWORD *)unsigned int v46 = *(_DWORD *)(BlitProgramVariant + 2632);
    *(_DWORD *)&v46[4] = v27;
    *(_OWORD *)&v46[8] = *(_OWORD *)(BlitProgramVariant + 2640);
  }
  int v29 = *(_DWORD *)(BlitProgramVariant + 2656);
  int v30 = *(_DWORD *)&v46[24];
  if (*(int *)&v46[24] <= v29) {
    int v31 = *(_DWORD *)(BlitProgramVariant + 2656);
  }
  else {
    int v31 = *(_DWORD *)&v46[24];
  }
  *(_DWORD *)&v46[24] = v31;
  if (v27 > v28 || v30 < v29) {
    AGX::SpillInfoGen3<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::allocateUSCSpillBuffer((uint64_t)v46, v56 + 19, 1);
  }
  long long v50 = &unk_26F8521C8;
  if (__p)
  {
    long long v53 = __p;
    operator delete(__p);
  }
  AGX::SpillInfoGen3<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::SpillInfoGen3((uint64_t)v46, *(void *)(a1[183] + 808), *(void *)(*(void *)(a1[183] + 808) + 6032));
  LODWORD(v49) = 1;
  int v33 = *(_DWORD *)(BlitProgramVariant + 2636);
  int v34 = *(_DWORD *)&v46[4];
  if (v33 > *(int *)&v46[4])
  {
    *(_DWORD *)unsigned int v46 = *(_DWORD *)(BlitProgramVariant + 2632);
    *(_DWORD *)&v46[4] = v33;
    *(_OWORD *)&v46[8] = *(_OWORD *)(BlitProgramVariant + 2640);
  }
  int v35 = *(_DWORD *)(BlitProgramVariant + 2656);
  int v36 = *(_DWORD *)&v46[24];
  if (*(int *)&v46[24] <= v35) {
    int v37 = *(_DWORD *)(BlitProgramVariant + 2656);
  }
  else {
    int v37 = *(_DWORD *)&v46[24];
  }
  *(_DWORD *)&v46[24] = v37;
  unint64_t v38 = a8 / a7;
  if (v33 > v34 || v36 < v35) {
    AGX::SpillInfoGen3<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::allocateUSCSpillBuffer((uint64_t)v46, v56 + 19, 1);
  }
  uint64_t v39 = *(unsigned int *)(a6 + 24);
  long long v40 = *(_OWORD *)(a5 + 416);
  *(_OWORD *)unsigned int v46 = *(_OWORD *)(a5 + 400);
  *(_OWORD *)&v46[16] = v40;
  if (*(_DWORD *)(a5 + 64) < 2u)
  {
    unint64_t v41 = *(void *)v46 & 0xFBFFFFFFFFFFFFFFLL;
    unint64_t v42 = *(void *)&v46[8];
  }
  else
  {
    unint64_t v41 = *(void *)v46 | 0x400000000000000;
    *(void *)&v46[16] = *(void *)&v46[16] & 0xF0000FFFFFFFFFFFLL | ((unint64_t)(*(_DWORD *)(a5 + 144) & 0xF | (16 * (*(_DWORD *)(a5 + 144) & 0xFu))) << 44);
    unint64_t v42 = *(void *)&v46[8] | 0x8000000000000000;
  }
  *(void *)unsigned int v46 = v41;
  *(void *)&v46[8] = v42 & 0xFFFFF00000000000 | ((unint64_t)(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getGPUVirtualAddress(a5, 0, 0, 0, 0)+ *(void *)(a5 + 328) * v39) >> 4) & 0xFFFFFFFFFFFLL;
  uint64_t v43 = *(void *)(*(void *)(a1[183] + 808) + 7280);
  uint64_t v48 = 0;
  uint64_t v49 = 0;
  uint64_t v47 = v43;
  long long v50 = 0;
  uint64_t v51 = a3;
  int v44 = *(_DWORD *)(a6 + 24);
  LODWORD(v53) = *(unsigned __int16 *)(a6 + 16) | (*(_DWORD *)(a6 + 20) << 16);
  HIDWORD(v53) = v38;
  LODWORD(v54) = v44;
  AGX::BlitDispatchContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::encodeTACommonDrawState(a1);
  AGX::BlitDispatchContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::encodeTADraw((uint64_t)a1, BlitProgramVariant, (unint64_t *)v46, (uint64_t)&v50, *(_DWORD *)a6, *(_DWORD *)(a6 + 4));
  uint64_t result = AGX::BlitDispatchContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::endTAHardwareCommand((uint64_t)a1, v57, (uint64_t)v56);
  if (**v17) {
    return IOGPUDeviceTraceEvent();
  }
  return result;
}

void sub_242A2B710(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t AGX::BlitDispatchContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::startTAHardwareCommand(uint64_t a1)
{
  uint64_t v1 = MEMORY[0x270FA5388](a1);
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  uint64_t v6 = v1;
  v87[3] = *MEMORY[0x263EF8340];
  AGX::BlitDispatchContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::endPreviousBlitCommand(v1, 0, v7, v8, v9);
  uint64_t v10 = AGX::ContextCommon<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::newCommand(v6 + 8, 2216);
  if ([*(id *)(v6 + 8) skipRender])
  {
    uint64_t v51 = *(void *)(v6 + 1560) - *(void *)(v6 + 1576);
    *(_DWORD *)(v51 + 12) = 1;
    if ((*(unsigned char *)(v51 + 8) & 4) != 0) {
      **(unsigned char **)(*(void *)(v6 + 8) + 688) = 1;
    }
  }
  *((void *)v10 + 1) = 0;
  *(void *)(v10 + 5) = 0x100000880;
  bzero(v10 + 8, 0x880uLL);
  *((void *)v10 + 4) = *(void *)(v6 + 88) + *(void *)(v6 + 72);
  uint64_t v12 = *(void *)(v6 + 1032);
  uint64_t v13 = v12 + 63;
  if ((unint64_t)(v12 + 63) <= *(void *)(v6 + 1024))
  {
LABEL_3:
    *(void *)(v6 + 1040) = v13;
    goto LABEL_4;
  }
  int v52 = AGX::DataBufferAllocator<34ul>::growNoInline(v6 + 24, 30, 0);
  uint64_t v12 = *(void *)(v6 + 1032);
  if (v52)
  {
    uint64_t v13 = v12 + 63;
    if ((unint64_t)(v12 + 63) > *(void *)(v6 + 1024)) {
      goto LABEL_41;
    }
    goto LABEL_3;
  }
LABEL_4:
  unint64_t v14 = (v12 + 31) & 0xFFFFFFFFFFFFFFE0;
  unint64_t v15 = v14 + *(void *)(v6 + 1048);
  *(void *)(v6 + 1032) = v14 + 32;
  *((void *)v10 + 59) = v15;
  v10[120] = 1;
  v10[451] = 8;
  uint64_t v16 = *(void *)(v6 + 424);
  uint64_t v17 = v16 + 19;
  if ((unint64_t)(v16 + 19) <= *(void *)(v6 + 416))
  {
LABEL_5:
    *(void *)(v6 + 432) = v17;
    goto LABEL_6;
  }
  int v53 = AGX::DataBufferAllocator<34ul>::growNoInline(v6 + 24, 11, 0);
  uint64_t v16 = *(void *)(v6 + 424);
  if (v53)
  {
    uint64_t v17 = v16 + 19;
    if ((unint64_t)(v16 + 19) <= *(void *)(v6 + 416)) {
      goto LABEL_5;
    }
LABEL_41:
    abort();
  }
LABEL_6:
  unint64_t v18 = (v16 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v19 = *(void *)(v6 + 440);
  *(void *)(v6 + 424) = v18 | 4;
  AGX::TextureGen4<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::TextureGen4((uint64_t)v79, *(os_unfair_lock_s **)(*(void *)(v6 + 1464) + 808), 0, 2, 2, (uint64_t)&texFormatR8UI, 13, 0, v11, 0, 2, 0, 0, 84148994, 1u, 1u, 1u, 1u, 1,
    1,
    16,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    1,
    1,
    0,
    0,
    v54,
    0);
  v79[37] = 0;
  v79[0] = off_26F853CD8;
  v79[9] = v18 + v19;
  AGX::TextureGen4<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::texBaseAddressesUpdated((uint64_t)v79);
  memset(v87, 0, 24);
  v61[0] = v79;
  v59[0] = 0;
  AGX::FramebufferDriverConfig<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::FramebufferDriverConfig((uint64_t)v84, 1u, (uint64_t)v87, (uint64_t)v61, (uint64_t)v59, 0, 0, 1, 1u);
  v85[18] = 0u;
  AGX::FramebufferCompilerConfigGen3<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::buildDrawBufferState((uint64_t)v85, 0);
  uint64_t v86 = 0;
  AGX::FramebufferGen3_3<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::FramebufferGen3_3((uint64_t)v61, *(atomic_ullong **)(v6 + 1464), *(void *)(*(void *)(v6 + 8) + 688), (uint64_t)v84, 1, 1, 1);
  AGX::FramebufferGen3_1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::finalizeStoreActions((unint64_t)v61);
  AGX::BlitUSCStateLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes>::setupBlitCommand(v6 + 1760, (void *)v10 + 70, *(void *)(v6 + 1504), (void *)(v6 + 24), (uint64_t)v61);
  AGX::SpillInfoGen3<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::SpillInfoGen3((uint64_t)v59, *(void *)(*(void *)(v6 + 1464) + 808), *(void *)(*(void *)(*(void *)(v6 + 1464) + 808) + 6040));
  int v20 = 32 * *(_DWORD *)(v6 + 1776);
  int v21 = 32 * *(_DWORD *)(v6 + 1784);
  unsigned int v22 = ((v21 + 6143) >> 12) + ((v20 + 17279) >> 12);
  uint64_t v23 = ((v20 + 78719) >> 16) + ((v21 + 67583) >> 16);
  if (*(_DWORD *)(v60 + 5864) == 21) {
    int v24 = 10;
  }
  else {
    int v24 = 14;
  }
  v57[0] = v24 * v23 + 96 * v22;
  v57[1] = v23 + v22;
  uint64_t v58 = v23;
  if (v73) {
    int v25 = v73 + 64;
  }
  else {
    int v25 = 0;
  }
  unsigned int v26 = ((v72 + 69631) >> 16) + ((v25 + 0xFFFF) >> 16);
  unsigned int v27 = ((v25 + 4095) >> 12) + ((v72 + 0x1FFF) >> 12) + ((v74 + 4095) >> 12);
  unsigned int v28 = v26 + ((v74 + 0xFFFF) >> 16);
  if (*(unsigned char *)(v60 + 7815)) {
    unsigned int v29 = 11;
  }
  else {
    unsigned int v29 = 6;
  }
  if (v29 >= 8) {
    int v30 = 8;
  }
  else {
    int v30 = v29;
  }
  unint64_t v55 = (v30 * v28 + v29 * v27) | ((unint64_t)(v28 + v27) << 32);
  unsigned int v56 = v28;
  if (AGX::SpillInfoGen3<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::checkSpillParamsForFragment((uint64_t)v59, v57, &v55))AGX::SpillInfoGen3<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::allocateUSCSpillBuffer((uint64_t)v59, (__n128 *)v10 + 74, 0); {
  AGX::FramebufferGen3_2<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::allocateDatabufferResources((uint64_t)v61, (void *)(v6 + 24));
  }
  AGX::FramebufferGen3_2<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::assignRenderRegisters((uint64_t)v61, (uint64_t)(v10 + 8), (uint64_t)(v10 + 140), 1, 1);
  long long v31 = *((_OWORD *)v10 + 44);
  *((_OWORD *)v10 + 86) = *((_OWORD *)v10 + 43);
  *((_OWORD *)v10 + 87) = v31;
  *((_OWORD *)v10 + 88) = *((_OWORD *)v10 + 45);
  *(void *)&long long v32 = v63;
  int v33 = v71;
  *((void *)&v32 + 1) = v64;
  int v34 = v69;
  long long v35 = v65;
  long long v36 = v66;
  long long v37 = v67;
  uint64_t v38 = v68;
  v10[452] = v62;
  *(_OWORD *)(v10 + 453) = v32;
  *(_OWORD *)(v10 + 457) = v35;
  *(_OWORD *)(v10 + 461) = v36;
  *(_OWORD *)(v10 + 465) = v37;
  *(void *)(v10 + 469) = v38;
  v10[471] = v33;
  v10[474] = v34;
  *((unsigned char *)v10 + 1908) = 0;
  *(void *)(v10 + 475) = 0;
  *((void *)v10 + 236) = v70;
  char v39 = v76;
  if (v76)
  {
    v10[475] = v76;
    v10[476] = v77;
    char v39 = 1;
  }
  *((unsigned char *)v10 + 1908) = v39;
  free(v78);
  if (v75) {

  }
  AGX::Framebuffer<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::~Framebuffer((uint64_t)v61);
  v79[0] = &unk_26F853CB0;
  std::unique_ptr<AGX::HAL200::CompressionMetadata>::~unique_ptr[abi:nn180100](v83);
  if (v80 && !v82)
  {
    long long v40 = (os_unfair_lock_s *)(v81 + 56);
    os_unfair_lock_lock((os_unfair_lock_t)(v81 + 56));
    uint64_t v41 = v81;
    uint64_t v42 = v80;
    uint64_t v43 = (atomic_ullong *)(v81 + 48);
    uint64_t v44 = *(void *)(v81 + 48);
    unsigned int v45 = (int *)MEMORY[0x263F4B188];
    uint64_t v46 = 32 * v80;
    *(_DWORD *)(*(void *)(*(void *)(*(void *)(v81 + 40) + 8) + (int)*MEMORY[0x263F4B188] + 24) + v46) = v44;
    uint64_t v47 = v44;
    atomic_compare_exchange_strong(v43, (unint64_t *)&v47, (v44 & 0xFFFFFFFF00000000 | v42) + 0x100000000);
    if (v47 != v44)
    {
      uint64_t v48 = v47;
      do
      {
        *(_DWORD *)(*(void *)(*(void *)(*(void *)(v41 + 40) + 8) + *v45 + 24) + v46) = v47;
        atomic_compare_exchange_strong((atomic_ullong *volatile)(v41 + 48), (unint64_t *)&v48, (v47 & 0xFFFFFFFF00000000 | v42) + 0x100000000);
        BOOL v49 = v48 == v47;
        uint64_t v47 = v48;
      }
      while (!v49);
    }
    os_unfair_lock_unlock(v40);
  }
  *((unsigned char *)v10 + 1326) = 1;
  AGX::ContextSwitcherGen3<AGX::HAL200::Encoders,AGX::HAL200::Classes>::setupRenderCommand(v6 + 1728, (void *)v10 + 4, (void *)(v6 + 24));
  uint64_t result = [*(id *)(v6 + 8) skipRender];
  if (result)
  {
    *((unsigned char *)v10 + 492) = 1;
    *((unsigned char *)v10 + 1326) = 1;
  }
  *uint64_t v5 = v10;
  void *v3 = v10 + 8;
  return result;
}

void sub_242A2BDF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45)
{
}

void sub_242A2BE0C(_Unwind_Exception *a1)
{
}

uint64_t AGX::BlitDispatchContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::bindTAResources(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = *(void **)a2;
  if (a3)
  {
    uint64_t v7 = *a3;
    if ((void *)*a3 != v5 && v7 != 0)
    {
      if (*(void *)(a1 + 1488)) {
        MTLResourceListAddResource();
      }
      if (!*(unsigned char *)(a1 + 1976))
      {
        if (a3[1]) {
          IOGPUResourceListAddResource();
        }
        if (a3[2]) {
          IOGPUResourceListAddResource();
        }
        AGX::ResourceGroupUsage<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::setAndBindResource(*(void **)(a1 + 1600), v7, 1);
      }
      IOGPUResourceListAddResource();
    }
  }
  if (*(void *)(a1 + 1488)) {
    MTLResourceListAddResource();
  }
  if (*(void *)(a2 + 8)) {
    IOGPUResourceListAddResource();
  }
  if (*(void *)(a2 + 16)) {
    IOGPUResourceListAddResource();
  }
  AGX::ResourceGroupUsage<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::setAndBindResource(*(void **)(a1 + 1600), (uint64_t)v5, 3);
  IOGPUResourceListAddResource();
  if (!*(void *)(a1 + 1960)) {
    [v5 resourceOptions];
  }

  return AGX::BlitDispatchContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::bindTrackedProxyResource((void *)a1);
}

double AGX::BlitDispatchContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::encodeTACommonDrawState(void *a1)
{
  uint64_t v2 = a1 + 3;
  uint64_t v3 = (unint64_t *)a1[9];
  if ((unint64_t)(v3 + 6) > a1[8])
  {
    if (AGX::DataBufferAllocator<34ul>::growNoInline(a1 + 3, 0, 0))
    {
      uint64_t v24 = a1[9];
      if ((unint64_t)(v24 + 48) > a1[8]) {
        goto LABEL_11;
      }
      a1[10] = v24 + 48;
      unint64_t *v3 = __ROR8__(a1[11] + v24, 32) & 0xFFFFFFFF000000FFLL | 0x80000000;
    }
  }
  else
  {
    a1[10] = v3 + 6;
  }
  uint64_t v4 = a1[129];
  uint64_t v5 = v4 + 588;
  if ((unint64_t)(v4 + 588) > a1[128])
  {
    int v25 = AGX::DataBufferAllocator<34ul>::growNoInline(v2, 30, 0);
    uint64_t v4 = a1[129];
    if (!v25) {
      goto LABEL_5;
    }
    uint64_t v5 = v4 + 588;
    if ((unint64_t)(v4 + 588) > a1[128]) {
LABEL_11:
    }
      abort();
  }
  a1[130] = v5;
LABEL_5:
  uint64_t v6 = a1[131] + v4;
  a1[129] = v4 + 20;
  *(_OWORD *)uint64_t v4 = xmmword_242EA7DD0;
  *(_DWORD *)(v4 + 16) = 0;
  uint64_t v7 = (unint64_t *)a1[9];
  unint64_t *v7 = __ROR8__(v6, 32) & 0xFFFFFFFC000000FFLL | 0x500;
  a1[9] = v7 + 1;
  uint64_t v8 = a1[129];
  uint64_t v9 = a1[131] + v8;
  a1[129] = v8 + 28;
  *(_OWORD *)uint64_t v8 = xmmword_242EA7DE0;
  *(void *)(v8 + 16) = 0xE00000007E00F00;
  *(_DWORD *)(v8 + 24) = 0;
  uint64_t v10 = __ROR8__(v9, 32);
  __n128 v11 = (unint64_t *)a1[9];
  unint64_t *v11 = v10 & 0xFFFFFFFC000000FFLL | 0x700;
  a1[9] = v11 + 1;
  uint64_t v12 = a1[129];
  uint64_t v13 = a1[131];
  a1[129] = v12 + 40;
  *(_DWORD *)uint64_t v12 = 3072;
  *(void *)(v12 + 4) = 0;
  *(_DWORD *)(v12 + 12) = 0;
  *(_OWORD *)(v12 + 16) = xmmword_242EA7DF0;
  *(void *)(v12 + 32) = 0x3F80000000000000;
  unint64_t v14 = (unint64_t *)a1[9];
  *unint64_t v14 = __ROR8__(v13 + v12, 32) & 0xFFFFFFFC000000FFLL | 0xA00;
  a1[9] = v14 + 1;
  uint64_t v15 = a1[129];
  uint64_t v16 = a1[131] + v15;
  a1[129] = v15 + 12;
  double result = 5.01764402e-163;
  *(void *)uint64_t v15 = 0x1E3CE50800410000;
  *(_DWORD *)(v15 + 8) = 131232;
  uint64_t v18 = __ROR8__(v16, 32);
  uint64_t v19 = (unint64_t *)a1[9];
  *uint64_t v19 = v18 & 0xFFFFFFFC000000FFLL | 0x300;
  a1[9] = v19 + 1;
  int v20 = (void *)a1[129];
  int v21 = (char *)v20 + a1[131];
  a1[129] = v20 + 1;
  *int v20 = 0x48000200000;
  uint64_t v22 = __ROR8__(v21, 32);
  uint64_t v23 = (unint64_t *)a1[9];
  unint64_t *v23 = v22 & 0xFFFFFFFC000000FFLL | 0x200;
  a1[9] = v23 + 1;
  return result;
}

float AGX::BlitDispatchContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::encodeTADraw(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t a4, int a5, unsigned int a6)
{
  unsigned int v11 = *(_DWORD *)(a2 + 1680);
  do
  {
    v11 &= ~(1 << __clz(__rbit32(v11)));
    IOGPUResourceListAddResource();
  }
  while (v11);
  uint64_t v12 = *(unint64_t **)(a1 + 72);
  if ((unint64_t)v12 + 60 > *(void *)(a1 + 64))
  {
    if (AGX::DataBufferAllocator<34ul>::growNoInline(a1 + 24, 0, 0))
    {
      uint64_t v114 = *(void *)(a1 + 72);
      if ((unint64_t)(v114 + 60) > *(void *)(a1 + 64)) {
        goto LABEL_92;
      }
      *(void *)(a1 + 80) = v114 + 60;
      *uint64_t v12 = __ROR8__(*(void *)(a1 + 88) + v114, 32) & 0xFFFFFFFF000000FFLL | 0x80000000;
    }
  }
  else
  {
    *(void *)(a1 + 80) = (char *)v12 + 60;
  }
  uint64_t v13 = (*(_DWORD *)(*(void *)(a2 + 1344) + 8) - **(_DWORD **)(a2 + 1344)) + 63;
  unint64_t v14 = *(void *)(a1 + 232) + v13;
  if (v14 <= *(void *)(a1 + 224))
  {
LABEL_6:
    *(void *)(a1 + 240) = v14;
    goto LABEL_7;
  }
  if (AGX::DataBufferAllocator<34ul>::growNoInline(a1 + 24, 5, 0))
  {
    unint64_t v14 = *(void *)(a1 + 232) + v13;
    if (v14 > *(void *)(a1 + 224)) {
      goto LABEL_92;
    }
    goto LABEL_6;
  }
LABEL_7:
  uint64_t v15 = *(unsigned int *)(a2 + 16) + 31;
  unint64_t v16 = *(void *)(a1 + 168) + v15;
  if (v16 <= *(void *)(a1 + 160))
  {
LABEL_8:
    *(void *)(a1 + 176) = v16;
    goto LABEL_9;
  }
  if (AGX::DataBufferAllocator<34ul>::growNoInline(a1 + 24, 3, 0))
  {
    unint64_t v16 = *(void *)(a1 + 168) + v15;
    if (v16 > *(void *)(a1 + 160)) {
      goto LABEL_92;
    }
    goto LABEL_8;
  }
LABEL_9:
  uint64_t v17 = *(unsigned int *)(a2 + 16);
  if (v17)
  {
    unint64_t v18 = (*(void *)(a1 + 168) + 31) & 0xFFFFFFFFFFFFFFE0;
    unint64_t v19 = v18 + *(void *)(a1 + 184);
    *(void *)(a1 + 168) = v18 + v17;
  }
  else
  {
    unint64_t v19 = 0;
    unint64_t v18 = 0;
  }
  int v20 = (char *)((*(void *)(a1 + 232) + 63) & 0xFFFFFFFFFFFFFFC0);
  uint64_t v21 = *(void *)(a1 + 248);
  *(void *)(a1 + 232) = &v20[*(_DWORD *)(*(void *)(a2 + 1344) + 8) - **(_DWORD **)(a2 + 1344)];
  unint64_t v22 = *(void *)(a2 + 248) - *(void *)(a2 + 240);
  int v23 = *(_DWORD *)(a2 + 200);
  if (v22) {
    int v24 = *(_DWORD *)(a2 + 200) & 1;
  }
  else {
    int v24 = 0;
  }
  if (v17)
  {
    unint64_t v25 = *(unsigned int *)(a2 + 424);
    unsigned int v26 = *(int **)(a2 + 48);
    uint64_t v27 = (*(void *)(a2 + 56) - (void)v26) >> 2;
    int v28 = *(_DWORD *)(a2 + 412);
    uint64_t v29 = *(void *)(a2 + 96);
    uint64_t v30 = *(void *)(a2 + 104);
    uint64_t v32 = *(void *)(a2 + 72);
    uint64_t v31 = *(void *)(a2 + 80);
    int v33 = *(_DWORD *)(a2 + 208);
    int v34 = *(_DWORD *)(a2 + 212);
    uint64_t v36 = *(void *)(a2 + 144);
    uint64_t v35 = *(void *)(a2 + 152);
    int v37 = *(unsigned __int8 *)(a2 + 456);
    int v38 = *(unsigned __int8 *)(a2 + 457);
    if (*(unsigned char *)(a2 + 456)) {
      a3[8] = v19 + *(unsigned int *)(a2 + 20);
    }
    unint64_t v39 = v30 - v29;
    if (v38) {
      a3[9] = v19 + *(unsigned int *)(a2 + 40);
    }
    unint64_t v40 = v39 >> 2;
    unint64_t v41 = v31 - v32;
    if (v27 == v25)
    {
      unsigned int v42 = 0;
      unint64_t v43 = v41 >> 2;
      if (!v25)
      {
LABEL_43:
        unint64_t v66 = v22 >> 2;
        if (v40)
        {
          *a3 = v19 + v42;
          v42 += 8 * v40;
        }
        int v67 = v34 + v33;
        if (v43)
        {
          uint64_t v68 = (_DWORD *)(v18 + v42);
          *(void *)(a4 + 16) = v19 + v42 + 8;
          int v69 = *(unsigned int **)(a2 + 72);
          int v70 = v43;
          do
          {
            unsigned int v71 = *v69++;
            *v68++ = *(_DWORD *)(a4 + 4 * v71);
            --v70;
          }
          while (v70);
          v42 += 4 * v43;
        }
        if (v66)
        {
          int v72 = 8 * (v40 + v27) + 4 * (v24 + v23);
          int v73 = (void *)(v18 + (v72 & 0xFFFFFFFC));
          int v74 = *(int **)(a2 + 240);
          do
          {
            int v75 = *v74++;
            *v73++ = a3[v75];
            LODWORD(v66) = v66 - 1;
          }
          while (v66);
          unsigned int v42 = v72 + 8 * (v22 >> 2);
        }
        unsigned int v76 = a6;
        uint64_t v77 = v35 - v36;
        if (v67)
        {
          int v119 = v67;
          unint64_t v120 = v19;
          uint64_t v121 = v21;
          float v78 = (char *)(v18 + v42);
          uint64_t v79 = *(unsigned int *)(a2 + 208);
          memcpy(v78, (char *)a3 + 4 * *(unsigned int *)(a2 + 204), 4 * v79);
          int v80 = *(_DWORD *)(a2 + 212);
          if (v80)
          {
            uint64_t v81 = *(unsigned int **)(a2 + 216);
            char v82 = &v78[4 * v79];
            do
            {
              unsigned int v83 = *v81++;
              *(_DWORD *)char v82 = *(_DWORD *)(a4 + 4 * v83);
              v82 += 4;
              --v80;
            }
            while (v80);
          }
          v42 += 4 * v119;
          unint64_t v19 = v120;
          uint64_t v21 = v121;
        }
        BOOL v84 = (v77 & 0x3FFFFFFFCLL) == 0;
        a6 = v76;
        if (!v84)
        {
          unint64_t v85 = v19 + v42;
          *(void *)(a4 + 16) = v85 + 8;
          *a3 = v85;
        }
        goto LABEL_60;
      }
    }
    else
    {
      if (v28)
      {
        int v44 = v28;
        unsigned int v45 = (void *)v18;
        uint64_t v46 = v26;
        do
        {
          int v47 = *v46++;
          *v45++ = a3[v47];
          --v44;
        }
        while (v44);
      }
      if (*(_DWORD *)(a2 + 280))
      {
        uint64_t v48 = *(void **)(a2 + 264);
        if (v48 != (void *)(a2 + 272))
        {
          do
          {
            *(_DWORD *)(v18 + 4 * *((unsigned int *)v48 + 7)) |= *((_DWORD *)v48 + 8);
            int v101 = (void *)v48[1];
            if (v101)
            {
              do
              {
                uint64_t v102 = v101;
                int v101 = (void *)*v101;
              }
              while (v101);
            }
            else
            {
              do
              {
                uint64_t v102 = (void *)v48[2];
                BOOL v84 = *v102 == (void)v48;
                uint64_t v48 = v102;
              }
              while (!v84);
            }
            uint64_t v48 = v102;
          }
          while (v102 != (void *)(a2 + 272));
        }
      }
      unsigned int v49 = (v28 + 3) & 0xFFFFFFFC;
      if (v37)
      {
        unsigned int v50 = *(_DWORD *)(a2 + 416);
        if (v50 >= 4)
        {
          uint64_t v51 = &v26[v49];
          unsigned int v52 = v50 >> 2;
          int v53 = (_OWORD *)(v18 + 8 * v49);
          do
          {
            int v54 = *v51;
            v51 += 4;
            unint64_t v55 = &a3[v54];
            long long v56 = *((_OWORD *)v55 + 1);
            *int v53 = *(_OWORD *)v55;
            v53[1] = v56;
            v53 += 2;
            --v52;
          }
          while (v52);
        }
        v49 += v50;
      }
      if (v38)
      {
        unsigned int v57 = *(_DWORD *)(a2 + 420);
        uint64_t v58 = (void *)(v18 + 8 * v49);
        if (*(unsigned char *)(a2 + 1144))
        {
          if (v57)
          {
            uint64_t v116 = (int *)(*(void *)(a2 + 48) + 4 * v49);
            do
            {
              int v117 = *v116++;
              *v58++ = a3[v117];
              --v57;
            }
            while (v57);
          }
        }
        else if (v57 >= 4)
        {
          uint64_t v59 = (int *)(*(void *)(a2 + 48) + 4 * v49);
          unsigned int v60 = v57 >> 2;
          do
          {
            int v61 = *v59;
            v59 += 4;
            *uint64_t v58 = a3[v61];
            v58 += 4;
            --v60;
          }
          while (v60);
        }
      }
      unsigned int v42 = 8 * (v27 - v25);
      unint64_t v43 = v41 >> 2;
      if (!v25) {
        goto LABEL_43;
      }
    }
    if (v25 >= 4)
    {
      int v62 = *(uint64_t **)(a2 + 1848);
      unint64_t v63 = v25 >> 2;
      uint64_t v64 = (void *)(v18 + v42);
      do
      {
        uint64_t v65 = *v62;
        v62 += 4;
        void *v64 = v65;
        v64 += 4;
        --v63;
      }
      while (v63);
    }
    v42 += 8 * v25;
    goto LABEL_43;
  }
LABEL_60:
  uint64_t v86 = *(void *)(a2 + 1344);
  memcpy(v20, *(const void **)v86, *(void *)(v86 + 8) - *(void *)v86);
  if (*(unsigned char *)(v86 + 200))
  {
    v87.i64[0] = v19;
    v87.i64[1] = v19 >> 5;
    *(int8x16_t *)&v20[*(unsigned int *)(v86 + 204)] = vbslq_s8((int8x16_t)xmmword_242EA7D10, *(int8x16_t *)&v20[*(unsigned int *)(v86 + 204)], (int8x16_t)vshlq_u8((uint8x16_t)vqtbl1q_s8(v87, (int8x16_t)xmmword_242EA7CF0), (uint8x16_t)xmmword_242EA7D00));
  }
  uint64_t v88 = *(unsigned int **)(v86 + 176);
  for (unint64_t i = *(unsigned int **)(v86 + 184); v88 != i; v88 += 3)
  {
    v90.i64[0] = a3[v88[1]] + *v88;
    v90.i64[1] = (unint64_t)v90.i64[0] >> 5;
    *(int8x16_t *)&v20[v88[2]] = vbslq_s8((int8x16_t)xmmword_242EA7D10, *(int8x16_t *)&v20[v88[2]], (int8x16_t)vshlq_u8((uint8x16_t)vqtbl1q_s8(v90, (int8x16_t)xmmword_242EA7CF0), (uint8x16_t)xmmword_242EA7D00));
  }
  unint64_t v91 = (unint64_t)&v20[v21];
  uint64_t v92 = *(char ***)(a1 + 1760);
  if (v92)
  {
    uint64_t v93 = *(void *)(v86 + 8) - *(void *)v86;
    int v94 = *(_DWORD *)(a2 + 1752);
    LODWORD(v95) = *((_DWORD *)v92 + 2);
    int v96 = v95 + 1;
    if (*((_DWORD *)v92 + 3) >= (v95 + 1))
    {
      unsigned int v100 = *v92;
    }
    else
    {
      unsigned int v122 = a6;
      unsigned int v97 = -__clz(v95);
      int v98 = 1 << v97;
      int v99 = (char *)malloc_type_malloc(40 << (v97 & 0x1F), 0x10800400D7C94D2uLL);
      unsigned int v100 = v99;
      uint64_t v95 = *((unsigned int *)v92 + 2);
      if (v95)
      {
        memcpy(v99, *v92, 40 * v95);
        free(*v92);
        LODWORD(v95) = *((_DWORD *)v92 + 2);
      }
      *((_DWORD *)v92 + 3) = v98;
      *uint64_t v92 = v100;
      a6 = v122;
    }
    long long v103 = &v100[40 * v95];
    *(_DWORD *)long long v103 = 13;
    *((void *)v103 + 1) = v91;
    *((void *)v103 + 2) = v20;
    *((void *)v103 + 3) = v93;
    *((_DWORD *)v103 + 8) = v94;
    *((_DWORD *)v92 + 2) = v96;
  }
  uint64_t v104 = *(void *)(a1 + 72);
  *(void *)uint64_t v104 = *(void *)(a2 + 2672);
  *(void *)(a1 + 72) = v104 + 8;
  uint64_t v105 = *(void *)(a2 + 2616);
  int v106 = *(_DWORD *)(a2 + 2624);
  int v107 = (v91 >> 16) & 0xFFC00000 | *(_DWORD *)(a2 + 2608) & 0x3FFFFF;
  *(void *)(v104 + 8) = *(void *)(a2 + 2600);
  *(_DWORD *)(v104 + 16) = v107;
  *(_DWORD *)(v104 + 20) = v91 >> 6;
  *(_DWORD *)(v104 + 32) = v106;
  *(void *)(v104 + 24) = v105;
  *(void *)(a1 + 72) = v104 + 36;
  uint64_t v108 = *(void *)(a1 + 1032);
  uint64_t v109 = v108 + 20;
  if ((unint64_t)(v108 + 20) > *(void *)(a1 + 1024))
  {
    int v115 = AGX::DataBufferAllocator<34ul>::growNoInline(a1 + 24, 30, 0);
    uint64_t v108 = *(void *)(a1 + 1032);
    if (!v115) {
      goto LABEL_80;
    }
    uint64_t v109 = v108 + 20;
    if ((unint64_t)(v108 + 20) > *(void *)(a1 + 1024)) {
LABEL_92:
    }
      abort();
  }
  *(void *)(a1 + 1040) = v109;
LABEL_80:
  uint64_t v110 = *(void *)(a2 + 2664);
  uint64_t v111 = *(void *)(a1 + 1048) + v108;
  *(void *)(a1 + 1032) = v108 + 20;
  *(_DWORD *)uint64_t v108 = 201981952;
  *(_DWORD *)(v108 + 4) = v110 & 0xF1C00FF;
  *(void *)(v108 + 8) = 0;
  *(_DWORD *)(v108 + 16) = HIDWORD(v110);
  uint64_t v112 = *(void *)(a1 + 72);
  *(void *)uint64_t v112 = __ROR8__(v111, 32) & 0xFFFFFFFC000000FFLL | 0x500;
  LODWORD(v113) = 1640235008;
  DWORD1(v113) = a5;
  *((void *)&v113 + 1) = a6;
  *(_OWORD *)(v112 + 8) = v113;
  *(void *)(a1 + 72) = v112 + 24;
  ++*(_DWORD *)(a1 + 1532);
  *(_DWORD *)(a1 + 1548) += a6 * a5;
  return *(float *)&v113;
}

uint64_t AGX::BlitDispatchContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::endTAHardwareCommand(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = result;
  uint64_t v5 = *(_DWORD **)(result + 72);
  *(void *)(result + 72) = v5 + 1;
  *uint64_t v5 = *(_DWORD *)(result + 1792);
  unsigned int v6 = *(_DWORD *)(result + 1548);
  int v7 = *(unsigned __int8 *)(result + 1552);
  *(unsigned char *)(a3 + 471) = 0;
  if (v7) {
    BOOL v8 = v6 > 4;
  }
  else {
    BOOL v8 = 1;
  }
  if (!v8) {
    *(void *)(a3 + 976) |= 1uLL;
  }
  if (!*(void *)(*(void *)(result + 1504) + 520))
  {
    uint64_t v9 = *(void *)(result + 1560) - *(void *)(result + 1576);
    *(_DWORD *)(v9 + 12) = 1;
    if ((*(unsigned char *)(v9 + 8) & 4) != 0) {
      **(unsigned char **)(*(void *)(result + 8) + 688) = 1;
    }
  }
  if (!*(_DWORD *)(a2 + 4))
  {
    *(unsigned char *)(a3 + 1668) = *(unsigned char *)(result + 1520);
    *(_DWORD *)(a3 + 1664) = *(_DWORD *)(result + 1516);
    *(void *)(a3 + 1672) = *(void *)(result + 1524);
    if (*(void *)(result + 1960))
    {
      if (*(void *)(result + 1488)) {
        MTLResourceListAddResource();
      }
      IOGPUResourceListAddResource();
      double result = *(void *)(v4 + 1960);
      uint64_t v10 = (_DWORD *)(v4 + 1968);
      if (result)
      {
        int v11 = *(_DWORD *)(v4 + 1972);
        int v12 = *(_DWORD *)(v4 + 1968);
        if ((v12 & v11) != 0xFFFFFFFF)
        {
          double result = [(id)result resourceID];
          *(_DWORD *)(a3 + 476) = result;
          *(_DWORD *)(a3 + 480) = v12;
          *(_DWORD *)(a3 + 484) = v11;
LABEL_18:
          *uint64_t v10 = -1;
          *(_DWORD *)(a3 + 1320) = -1;
          *(void *)(a3 + 1312) = -1;
          *(void *)(a3 + 1688) = 0;
          return result;
        }
      }
    }
    else
    {
      uint64_t v10 = (_DWORD *)(result + 1968);
    }
    *(_DWORD *)(a3 + 484) = -1;
    *(void *)(a3 + 476) = -1;
    goto LABEL_18;
  }
  return result;
}

uint64_t AGX::BlitDispatchContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::blitCDM(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint32x2_t *a6, char *a7, int *a8, unsigned int a9, unsigned int *a10, char a11, unint64_t a12, unint64_t a13, const void *a14, int a15)
{
  if (a5) {
    uint64_t v20 = *a5;
  }
  else {
    uint64_t v20 = 0;
  }
  __srCC_SHA256_CTX c = *a8;
  (*(void (**)(uint64_t, uint32x2_t *, uint64_t))(*(void *)a1 + 32))(a1, a6, a3);
  if (*(_DWORD *)*MEMORY[0x263F4B1E8]) {
    IOGPUDeviceTraceEvent();
  }
  uint64_t v21 = a10;
  if (v20) {
    unsigned int v22 = a9;
  }
  else {
    unsigned int v22 = 0;
  }
  if (a6)
  {
    unsigned int v23 = a6[18].u32[0];
    uint32x2_t v138 = vmax_u32(vshl_u32(a6[16], (uint32x2_t)vneg_s32(vdup_n_s32(v23))), (uint32x2_t)0x100000001);
    unsigned int v24 = (unsigned __int32)a6[17].i32[0] >> v23;
    if (v24 <= 1) {
      unsigned int v24 = 1;
    }
    unsigned int v139 = v24;
    int v146 = 0x20000;
    int v147 = 0;
  }
  else
  {
    unsigned int v139 = 0;
    if (v20) {
      int v25 = 1;
    }
    else {
      int v25 = 2;
    }
    int v146 = (v20 != 0) << 17;
    int v147 = v25;
    uint32x2_t v138 = 0;
  }
  uint64_t v157 = (uint64_t)a6;
  uint64_t v144 = v20;
  if (a3)
  {
    unsigned int v26 = *(_DWORD *)(a3 + 112);
    unsigned int v27 = *(_DWORD *)(a3 + 144);
    uint32x2_t v28 = vmax_u32(vshl_u32(*(uint32x2_t *)(a3 + 128), (uint32x2_t)vneg_s32(vdup_n_s32(v27))), (uint32x2_t)0x100000001);
    unsigned int v29 = *(_DWORD *)(a3 + 136) >> v27;
    if (v29 <= 1) {
      unsigned int v29 = 1;
    }
    unsigned int v137 = v29;
    unsigned int v202 = 1;
    v203[0] = 1;
    if (*(_DWORD *)(a3 + 236))
    {
      int v145 = 0;
      unsigned int v202 = 16;
      v203[0] = 16;
      int v151 = 16;
      int v152 = 16;
      goto LABEL_22;
    }
    uint64_t v46 = *(void *)(a3 + 488);
    if (v46 && *(_DWORD *)(v46 + 1080) > v27)
    {
      uint32x2_t v141 = v28;
      AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getMacroblockDimensions(a3, v203, &v202);
      uint32x2_t v28 = v141;
      int v145 = 0;
      if (v203[0] <= 0x10) {
        int v47 = 16;
      }
      else {
        int v47 = v203[0];
      }
      int v151 = v47;
      int v48 = v202;
      if (v202 <= 0x10) {
        int v48 = 16;
      }
      int v152 = v48;
      unsigned int v202 = v48;
      v203[0] = v47;
LABEL_22:
      int v30 = 1;
      uint32x2_t v140 = v28;
      if (a10) {
        goto LABEL_23;
      }
LABEL_32:
      BOOL v156 = 0;
      unsigned int v154 = v28.i32[0];
      unsigned int v34 = v28.u32[1];
LABEL_34:
      unsigned int v155 = v34;
      goto LABEL_35;
    }
    int v145 = 0;
    int v30 = 0;
    int v151 = 1;
    int v152 = 1;
    uint32x2_t v140 = v28;
    if (!a10) {
      goto LABEL_32;
    }
  }
  else
  {
    unsigned int v137 = 0;
    int v30 = 0;
    unsigned int v202 = 1;
    v203[0] = 1;
    uint32x2_t v28 = 0;
    int v145 = 4;
    int v151 = 1;
    int v152 = 1;
    unsigned int v26 = 1;
    uint32x2_t v140 = 0;
    if (!a10) {
      goto LABEL_32;
    }
  }
LABEL_23:
  unsigned int v22 = a10[6];
  if (!v30)
  {
    BOOL v156 = 0;
    unsigned int v154 = *a10;
    unsigned int v34 = a10[1];
    goto LABEL_34;
  }
  unsigned int v31 = a10[1];
  unsigned int v154 = ((a10[2] + *a10 + v151 - 1) & -v151) - (a10[2] & -v151);
  unsigned int v155 = ((a10[3] + v31 + v152 - 1) & -v152) - (a10[3] & -v152);
  BOOL v33 = v154 != *a10 || ((a10[3] + v31 + v152 - 1) & -v152) - (a10[3] & -v152) != v31;
  BOOL v156 = v33;
LABEL_35:
  int v35 = a15;
  (*(void (**)(uint64_t, void, uint64_t))(*(void *)a1 + 16))(a1, 0, 1);
  AGX::BlitDispatchContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::bindComputeResources(a1, a2, a5);
  if (!*(void *)(*(void *)(a1 + 1504) + 520))
  {
    AGX::BlitDispatchContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::endPreviousBlitCommand(a1, 0, v36, v37, v38);
    AGX::BlitDispatchContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::beginComputePass(a1, 0);
    AGX::BlitDispatchContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::bindComputeResources(a1, a2, a5);
    if (!*(void *)(*(void *)(a1 + 1504) + 520))
    {
      uint64_t v39 = *(void *)(a1 + 1560) - *(void *)(a1 + 1576);
      *(_DWORD *)(v39 + 12) = 1;
      if ((*(unsigned char *)(v39 + 8) & 4) != 0) {
        **(unsigned char **)(*(void *)(a1 + 8) + 688) = 1;
      }
    }
  }
  unsigned int v153 = v22;
  unsigned int v149 = v26;
  if (a15 != 2) {
    goto LABEL_80;
  }
  long long v194 = 0uLL;
  long long v158 = 0uLL;
  long long v179 = 0uLL;
  unsigned int v172 = 0;
  unint64_t v173 = 0;
  unsigned int v40 = v154;
  unsigned int v41 = v155;
  if (!v157)
  {
    unsigned int v49 = (char *)&v194 + 8;
    if (v155 <= 1) {
      uint64_t v50 = v154;
    }
    else {
      uint64_t v50 = v155;
    }
    unint64_t v51 = a12;
    if (v155 > 1) {
      unint64_t v51 = a13;
    }
    unint64_t v52 = v51 * v50;
    *(void *)&long long v194 = a7;
    goto LABEL_59;
  }
  if (*(_DWORD *)(v157 + 236))
  {
LABEL_62:
    if (*(_WORD *)(a1 + 6616))
    {
      int v53 = *(unint64_t **)(a1 + 776);
      if ((unint64_t)v53 + 4 > *(void *)(a1 + 768))
      {
        int v134 = AGX::DataBufferAllocator<34ul>::growNoInline(a1 + 24, 22, 0);
        int v54 = *(unint64_t **)(a1 + 776);
        if (v134)
        {
          if ((unint64_t)v54 + 4 > *(void *)(a1 + 768)) {
            goto LABEL_195;
          }
          *(void *)(a1 + 784) = (char *)v54 + 4;
          *int v53 = __ROR8__((char *)v54 + *(void *)(a1 + 792), 32) & 0xFFFFFFFF0000FFFFLL | 0x20000000;
          int v54 = *(unint64_t **)(a1 + 776);
          uint64_t v21 = a10;
        }
      }
      else
      {
        *(void *)(a1 + 784) = (char *)v53 + 4;
        int v54 = v53;
      }
      *(_DWORD *)int v54 = 1610613088;
      *(void *)(a1 + 776) = (char *)v54 + 4;
      *(_WORD *)(a1 + 4304) = 0;
      *(_WORD *)(a1 + 6616) = 0;
    }
    int v35 = 1;
    goto LABEL_80;
  }
  unsigned int v42 = *(_DWORD *)(v157 + 144);
  uint64_t GPUVirtualAddress = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getGPUVirtualAddress(v157, 0, v42, v22, 0);
  if (*(unsigned char *)(v157 + 380) != 3 && *(unsigned char *)(v157 + 380))
  {
    unsigned int v121 = v42 + 1;
    uint64_t v44 = v157;
    if (v42 + 1 < *(_DWORD *)(v157 + 140) || v121 == *(_DWORD *)(v157 + 64)) {
      unint64_t v122 = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getLevelOffset<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0>(v157, v121, 0);
    }
    else {
      unint64_t v122 = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getMipmapSize<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0>(v157, 0);
    }
    uint64_t v45 = v122
        - AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getLevelOffset<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0>(v157, v42, 0);
  }
  else
  {
    uint64_t v44 = v157;
    uint64_t v45 = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getPlaneSize<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0>(v157, 0, 1);
  }
  *(void *)&long long v194 = GPUVirtualAddress;
  *((void *)&v194 + 1) = v45;
  uint64_t v125 = *(void *)(v44 + 488);
  unsigned int v40 = v154;
  unsigned int v41 = v155;
  if (v125 && *(_DWORD *)(v125 + 1080) > v42)
  {
    unsigned int v49 = (char *)&v179 + 8;
    uint64_t v126 = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getGPUVirtualAddress(v125, 0, v42, v22, 0);
    if (*(unsigned char *)(v125 + 380) != 3 && *(unsigned char *)(v125 + 380))
    {
      unsigned int v127 = v42 + 1;
      if (v42 + 1 < *(_DWORD *)(v125 + 140) || v127 == *(_DWORD *)(v125 + 64)) {
        unint64_t v128 = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getLevelOffset<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)1>(v125, v127, 0);
      }
      else {
        unint64_t v128 = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getMipmapSize<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)1>(v125, 0);
      }
      unint64_t v52 = v128
          - AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getLevelOffset<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)1>(v125, v42, 0);
      *(void *)&long long v179 = v126;
    }
    else
    {
      unint64_t v52 = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getPlaneSize<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)1>(v125, 0, 1);
      *(void *)&long long v179 = v126;
    }
    unsigned int v40 = v154;
    unsigned int v41 = v155;
LABEL_59:
    *(void *)unsigned int v49 = v52;
  }
  if (a3)
  {
    if (*(_DWORD *)(a3 + 236)) {
      goto LABEL_62;
    }
    unsigned int v118 = *(_DWORD *)(a3 + 144);
    uint64_t v119 = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getGPUVirtualAddress(a3, 0, v118, a9, 0);
    if (*(unsigned char *)(a3 + 380) != 3 && *(unsigned char *)(a3 + 380))
    {
      unsigned int v123 = v118 + 1;
      if (v118 + 1 < *(_DWORD *)(a3 + 140) || v123 == *(_DWORD *)(a3 + 64)) {
        unint64_t v124 = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getLevelOffset<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0>(a3, v123, 0);
      }
      else {
        unint64_t v124 = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getMipmapSize<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0>(a3, 0);
      }
      uint64_t v120 = v124
           - AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getLevelOffset<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0>(a3, v118, 0);
      uint64_t v21 = a10;
    }
    else
    {
      uint64_t v120 = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getPlaneSize<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0>(a3, 0, 1);
    }
    *(void *)&long long v158 = v119;
    *((void *)&v158 + 1) = v120;
    uint64_t v129 = *(void *)(a3 + 488);
    if (v129 && *(_DWORD *)(v129 + 1080) > v118)
    {
      uint64_t v130 = (void *)AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getGPUVirtualAddress(*(void *)(a3 + 488), 0, v118, a9, 0);
      if (*(unsigned char *)(v129 + 380) != 3 && *(unsigned char *)(v129 + 380))
      {
        unsigned int v131 = v118 + 1;
        if (v118 + 1 < *(_DWORD *)(v129 + 140) || v131 == *(_DWORD *)(v129 + 64)) {
          unint64_t v132 = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getLevelOffset<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)1>(v129, v131, 0);
        }
        else {
          unint64_t v132 = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getMipmapSize<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)1>(v129, 0);
        }
        unsigned int v172 = v130;
        unint64_t v173 = v132
             - AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getLevelOffset<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)1>(v129, v118, 0);
        uint64_t v21 = a10;
      }
      else
      {
        unsigned int v172 = v130;
        unint64_t v173 = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getPlaneSize<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)1>(v129, 0, 1);
      }
    }
  }
  else
  {
    if (v41 <= 1) {
      uint64_t v55 = v40;
    }
    else {
      uint64_t v55 = v41;
    }
    unint64_t v56 = a12;
    if (v41 > 1) {
      unint64_t v56 = a13;
    }
    *(void *)&long long v158 = a4;
    *((void *)&v158 + 1) = v56 * v55;
  }
  if (AGX::BlitDispatchContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::checkDependentBlits(a1, (unint64_t *)&v194, (unint64_t *)&v158, (unint64_t *)&v179, (unint64_t *)&v172))
  {
    unsigned int v57 = *(unint64_t **)(a1 + 776);
    if ((unint64_t)v57 + 4 > *(void *)(a1 + 768))
    {
      int v135 = AGX::DataBufferAllocator<34ul>::growNoInline(a1 + 24, 22, 0);
      uint64_t v58 = *(unint64_t **)(a1 + 776);
      if (v135)
      {
        if ((unint64_t)v58 + 4 > *(void *)(a1 + 768)) {
          goto LABEL_195;
        }
        *(void *)(a1 + 784) = (char *)v58 + 4;
        *unsigned int v57 = __ROR8__((char *)v58 + *(void *)(a1 + 792), 32) & 0xFFFFFFFF0000FFFFLL | 0x20000000;
        uint64_t v58 = *(unint64_t **)(a1 + 776);
        uint64_t v21 = a10;
      }
    }
    else
    {
      *(void *)(a1 + 784) = (char *)v57 + 4;
      uint64_t v58 = v57;
    }
    *(_DWORD *)uint64_t v58 = 1610613088;
    *(void *)(a1 + 776) = (char *)v58 + 4;
  }
  int v35 = 2;
LABEL_80:
  int v142 = v35;
  uint64_t v201 = 0;
  long long v199 = 0u;
  long long v200 = 0u;
  long long v197 = 0u;
  long long v198 = 0u;
  long long v195 = 0u;
  long long v196 = 0u;
  long long v194 = 0u;
  int v193 = 0;
  long long v179 = 0u;
  long long v180 = 0u;
  int v181 = 0;
  uint64_t v184 = 0;
  uint64_t v182 = 0;
  uint64_t v183 = 0;
  LODWORD(v173) = 16;
  unint64_t v175 = 0;
  uint64_t v176 = 0;
  long long __p = 0;
  unsigned int v172 = &unk_26F852108;
  long long v177 = 0u;
  memset(v178, 0, 28);
  if (a3)
  {
    uint64_t v59 = *(void *)(a3 + 432);
    uint64_t v60 = *(void *)(a3 + 440);
    long long v158 = *(_OWORD *)(a3 + 448);
    unint64_t v61 = v60 & 0xFFFFF00000000000 | ((AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getGPUVirtualAddress(a3, 0, 0, 0, 0)+ *(void *)(a3 + 328) * (unint64_t)a9) >> 4) & 0xFFFFFFFFFFFLL;
    *(void *)&long long v196 = v59;
    *((void *)&v196 + 1) = v61;
    long long v197 = v158;
    int v192 = *(_DWORD *)(a3 + 104);
    uint64_t v62 = *(void *)(a3 + 400);
    uint64_t v63 = *(void *)(a3 + 408);
    unint64_t v64 = *(void *)(a3 + 416);
    if (*(_DWORD *)(a3 + 64) < 2u)
    {
      unint64_t v65 = v62 & 0xFBFFFFFFFFFFFFFFLL;
    }
    else
    {
      unint64_t v65 = v62 | 0x400000000000000;
      unint64_t v64 = v64 & 0xF0000FFFFFFFFFFFLL | ((unint64_t)(*(_DWORD *)(a3 + 144) & 0xF | (16
                                                                                          * (*(_DWORD *)(a3 + 144) & 0xFu))) << 44);
      v63 |= 0x8000000000000000;
    }
    uint64_t v67 = *(void *)(a3 + 424);
    unint64_t v68 = v63 & 0xFFFFF00000000000 | ((AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getGPUVirtualAddress(a3, 0, 0, 0, 0)+ *(void *)(a3 + 328) * (unint64_t)a9) >> 4) & 0xFFFFFFFFFFFLL;
    *(void *)&long long v198 = v65;
    *((void *)&v198 + 1) = v68;
    *(void *)&long long v199 = v64;
    *((void *)&v199 + 1) = v67;
    uint64_t v69 = *(void *)(a3 + 208);
    char v70 = *(unsigned char *)(a3 + 112);
    long long v158 = 0u;
    memset(v159, 0, sizeof(v159));
    memset(v160, 0, 31);
    int v161 = 1;
    int v164 = 0;
    long long v166 = 0u;
    long long v167 = 0u;
    long long v168 = 0u;
    long long v169 = 0u;
    long long v170 = 0u;
    uint64_t v171 = 0;
    uint64_t v165 = v69;
    DWORD2(v159[1]) = 1;
    char v163 = v70;
    char v162 = v70;
    AGX::FramebufferCompilerConfigGen3<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::buildDrawBufferState((uint64_t)&v158, 0);
    long long v177 = v158;
    v178[0] = v159[0];
    *(void *)&v178[1] = *(void *)&v159[1];
    int v66 = DWORD2(v178[1]);
    uint64_t v21 = a10;
  }
  else
  {
    int v66 = 0;
    uint64_t v191 = a4;
  }
  int v71 = ((3 * __clz(v26 - 1)) & 3) << 13;
  if (v26 < 2) {
    int v71 = 0;
  }
  unsigned int v72 = v66 & 0xFFFF9F0F | v71;
  int v73 = v157;
  if (v157) {
    int v73 = 16 * ((*(void *)(v157 + 380) & 0xFF00) == 768);
  }
  int v74 = v73 | v72;
  if (a3) {
    int v75 = ((*(void *)(a3 + 380) & 0xFF00) == 768) << 6;
  }
  else {
    int v75 = 0;
  }
  int v76 = __src & 1;
  unsigned int v77 = v75 | v74;
  if (v21)
  {
    if (v21[4] || (int v78 = v21[5]) != 0) {
      int v78 = 0x8000;
    }
    int v80 = v146;
    int v79 = v147;
    int v81 = v145;
    unsigned int v77 = v77 & 0xFFFE7F5F | v78 | 0x10000;
  }
  else
  {
    int v80 = v146;
    int v79 = v147;
    int v81 = v145;
  }
  unsigned int v82 = v77 & 0xFCB1E0F0;
  int v83 = v76 << 18;
  if (v156) {
    int v84 = 17301504;
  }
  else {
    int v84 = 0x1000000;
  }
  DWORD2(v178[1]) = ((a11 & 0x1F) << 8) | v80 | v79 | v81 | v84 | v83 | v82;
  uint64_t BlitProgramVariant = (_DWORD *)AGX::Device<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::findOrCreateBlitProgramVariant(*(void *)(*(void *)(a1 + 1464) + 808), (uint64_t)&v172);
  unsigned int v172 = &unk_26F852148;
  if (__p)
  {
    unint64_t v175 = __p;
    operator delete(__p);
  }
  if (AGX::SpillInfoGen3<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::checkSpillParamsForCompute(a1 + 1808, BlitProgramVariant[99], BlitProgramVariant[102], BlitProgramVariant[107], 4 * BlitProgramVariant[668], 0, 0))AGX::BlitDispatchContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::bindComputeUSCSpillBuffer(a1); {
  unsigned int v86 = BlitProgramVariant[420];
  }
  do
  {
    v86 &= ~(1 << __clz(__rbit32(v86)));
    IOGPUResourceListAddResource();
  }
  while (v86);
  if (v157)
  {
    long long v87 = *(_OWORD *)(v157 + 416);
    long long v194 = *(_OWORD *)(v157 + 400);
    long long v195 = v87;
    unsigned int v88 = a9;
    int v90 = v152;
    unsigned int v89 = v153;
    if (*(_DWORD *)(v157 + 64) < 2u)
    {
      unint64_t v91 = v194 & 0xFBFFFFFFFFFFFFFFLL;
      unint64_t v92 = *((void *)&v194 + 1);
    }
    else
    {
      unint64_t v91 = v194 | 0x400000000000000;
      *(void *)&long long v195 = v195 & 0xF0000FFFFFFFFFFFLL | ((unint64_t)(*(_DWORD *)(v157 + 144) & 0xF | (16 * (*(_DWORD *)(v157 + 144) & 0xFu))) << 44);
      unint64_t v92 = *((void *)&v194 + 1) | 0x8000000000000000;
    }
    *(void *)&long long v194 = v91;
    *((void *)&v194 + 1) = v92 & 0xFFFFF00000000000 | ((AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getGPUVirtualAddress(v157, 0, 0, 0, 0)+ *(void *)(v157 + 328) * (unint64_t)v153) >> 4) & 0xFFFFFFFFFFFLL;
    uint64_t v93 = a10;
    goto LABEL_115;
  }
  unsigned int v88 = a9;
  int v90 = v152;
  unsigned int v89 = v153;
  uint64_t v93 = a10;
  if (v156)
  {
LABEL_115:
    LOWORD(v158) = ((_WORD)v76 << 7) | ((_WORD)v76 << 8);
    *((void *)&v158 + 1) = 0x7F7FFFFF00000000;
    memset(v159, 0, 20);
    DWORD1(v158) = v83 | (v76 << 16) | 1;
    *((void *)&v159[1] + 1) = 0;
    memset(v160, 0, 24);
    AGX::SamplerStateEncoderGen4<AGX::HAL200::TextureFormatTable>::SamplerStateFields::SamplerStateFields((unint64_t *)&v172, (uint64_t)&v158);
    *(void *)&long long v200 = v172;
  }
  int v94 = a7;
  if (v144) {
    goto LABEL_120;
  }
  size_t v95 = *(unsigned __int8 *)(*(void *)(a3 + 208) + 88);
  uint64_t v96 = 2 * v95 - 1;
  uint64_t v97 = *(void *)(a1 + 168);
  uint64_t v98 = v97 + v96;
  if ((unint64_t)(v97 + v96) > *(void *)(a1 + 160))
  {
    int v133 = AGX::DataBufferAllocator<34ul>::growNoInline(a1 + 24, 3, 0);
    uint64_t v97 = *(void *)(a1 + 168);
    if (!v133) {
      goto LABEL_119;
    }
    uint64_t v98 = v97 + v96;
    if ((unint64_t)(v97 + v96) > *(void *)(a1 + 160)) {
      goto LABEL_195;
    }
  }
  *(void *)(a1 + 176) = v98;
LABEL_119:
  int v99 = (char *)((v95 + v97 - 1) & -(uint64_t)v95);
  int v94 = &v99[*(void *)(a1 + 184)];
  *(void *)(a1 + 168) = &v99[v95];
  memcpy(v99, a14, v95);
  unsigned int v89 = v153;
LABEL_120:
  if (v154 >= 0x20) {
    int v100 = 32;
  }
  else {
    int v100 = v154;
  }
  unsigned int v101 = v155;
  if (v155 >= 0x20) {
    unsigned int v102 = 32;
  }
  else {
    unsigned int v102 = v155;
  }
  int v103 = v151 - 1;
  int v104 = v90 - 1;
  if (v93)
  {
    LODWORD(v182) = *((unsigned __int16 *)v93 + 8) | (v93[5] << 16);
    unsigned int v105 = v93[2];
    unsigned int v106 = v93[3];
    if (v156)
    {
      int v107 = v106 & v104;
      HIDWORD(v183) = (unsigned __int16)(v105 - (v105 & v103)) | ((unsigned __int16)(v106 - (v106 & v104)) << 16);
      LODWORD(v184) = (unsigned __int16)v154 | ((unsigned __int16)v155 << 16);
      unsigned int v101 = v155;
      int v108 = (unsigned __int16)(*v93 + (v105 & v103)) | ((unsigned __int16)(*((_WORD *)v93 + 2) + (v106 & v104)) << 16);
      HIDWORD(v182) = v105 & v103 | (v107 << 16);
      LODWORD(v183) = v108;
    }
    else
    {
      int v109 = (unsigned __int16)v93[2] | ((unsigned __int16)v106 << 16);
      int v110 = *(unsigned __int16 *)v93 | (v93[1] << 16);
      HIDWORD(v183) = v109;
      LODWORD(v184) = v110;
    }
  }
  int v111 = v103 + v100;
  unsigned int v187 = v88;
  unsigned int v112 = v104 + v102;
  *(void *)&long long v180 = v102 | 0x100000000;
  *(void *)&long long v179 = 0;
  HIDWORD(v179) = v100;
  DWORD2(v179) = 0;
  *((void *)&v180 + 1) = __PAIR64__(v101, v154);
  unsigned int v190 = v94;
  if (__src) {
    unsigned int v113 = v88;
  }
  else {
    unsigned int v113 = v89;
  }
  int v181 = 1;
  unsigned int v186 = v113;
  if (a3) {
    int v114 = *(_DWORD *)(a3 + 144);
  }
  else {
    int v114 = 0;
  }
  int v185 = v114;
  if (__src)
  {
    float32x2_t v188 = vdiv_f32(vcvt_f32_u32(v138), vcvt_f32_u32(v140));
    float v189 = (float)v139 / (float)v137;
  }
  if (a12) {
    HIDWORD(v184) = (a13 / a12) / v149;
  }
  int v193 = 4 * BlitProgramVariant[668];
  uint64_t result = AGX::BlitUSCStateLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes>::emitComputeProgramVariantArguments((char ***)(a1 + 1760), (void *)(a1 + 24), (uint64_t)BlitProgramVariant, (uint64_t)&v194, (uint64_t)&v179, v193, v111 & -v151, v112 & -v90, (_DWORD *)(a1 + 1532));
  if (v142 == 1)
  {
    uint64_t v116 = *(unint64_t **)(a1 + 776);
    if ((unint64_t)v116 + 4 <= *(void *)(a1 + 768))
    {
      *(void *)(a1 + 784) = (char *)v116 + 4;
      int v117 = v116;
LABEL_143:
      *(_DWORD *)int v117 = 1610613088;
      *(void *)(a1 + 776) = (char *)v117 + 4;
      goto LABEL_144;
    }
    uint64_t result = AGX::DataBufferAllocator<34ul>::growNoInline(a1 + 24, 22, 0);
    int v117 = *(unint64_t **)(a1 + 776);
    if (!result) {
      goto LABEL_143;
    }
    if ((unint64_t)v117 + 4 <= *(void *)(a1 + 768))
    {
      *(void *)(a1 + 784) = (char *)v117 + 4;
      unint64_t *v116 = __ROR8__((char *)v117 + *(void *)(a1 + 792), 32) & 0xFFFFFFFF0000FFFFLL | 0x20000000;
      int v117 = *(unint64_t **)(a1 + 776);
      goto LABEL_143;
    }
LABEL_195:
    abort();
  }
LABEL_144:
  if ((*(unsigned char *)a8 & 2) != 0) {
    *(unsigned char *)(*(void *)(a1 + 1800) + 460) = 1;
  }
  if (*(_DWORD *)*MEMORY[0x263F4B1E8]) {
    return IOGPUDeviceTraceEvent();
  }
  return result;
}

void sub_242A2DB10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,void *__p,uint64_t a63)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t AGX::BlitDispatchContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::bindComputeResources(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = *(void **)a2;
  if (a3)
  {
    uint64_t v7 = *a3;
    if ((void *)*a3 != v5 && v7 != 0)
    {
      if (*(void *)(a1 + 1488)) {
        MTLResourceListAddResource();
      }
      if (!*(unsigned char *)(a1 + 1976))
      {
        if (a3[1]) {
          IOGPUResourceListAddResource();
        }
        if (a3[2]) {
          IOGPUResourceListAddResource();
        }
        AGX::ResourceGroupUsage<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::setAndBindResource(*(void **)(a1 + 1600), v7, 1);
      }
      IOGPUResourceListAddResource();
    }
  }
  if (*(void *)(a1 + 1488)) {
    MTLResourceListAddResource();
  }
  if (*(void *)(a2 + 8)) {
    IOGPUResourceListAddResource();
  }
  if (*(void *)(a2 + 16)) {
    IOGPUResourceListAddResource();
  }
  AGX::ResourceGroupUsage<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::setAndBindResource(*(void **)(a1 + 1600), (uint64_t)v5, 3);
  IOGPUResourceListAddResource();
  if (!*(void *)(a1 + 1960)) {
    [v5 resourceOptions];
  }

  return AGX::BlitDispatchContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::bindTrackedProxyResource((void *)a1);
}

uint64_t AGX::BlitDispatchContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::checkDependentBlits(uint64_t a1, unint64_t *a2, unint64_t *a3, unint64_t *a4, unint64_t *a5)
{
  uint64_t v5 = a1 + 4312;
  unint64_t v6 = *a3;
  unint64_t v7 = a3[1] + *a3;
  unsigned int v8 = *(unsigned __int16 *)(a1 + 6616);
  if (!*(_WORD *)(a1 + 6616))
  {
    *(void *)(a1 + 4312) = v6;
    *(void *)(a1 + 4320) = v7;
    *(_DWORD *)(a1 + 4328) = 0;
    unsigned int v8 = 1;
    *(_WORD *)(a1 + 6616) = 1;
    goto LABEL_13;
  }
  for (unint64_t i = (unint64_t *)(a1 + 4312); ; unint64_t i = (unint64_t *)(v5 + 24 * v10))
  {
    unint64_t v11 = *i;
    if (*i < v7 && i[1] > v6) {
      goto LABEL_68;
    }
    if (v6 >= v11) {
      break;
    }
    unsigned int v10 = *((unsigned __int16 *)i + 8);
    if (!*((_WORD *)i + 8))
    {
      if (v7 == v11)
      {
        *unint64_t i = v6;
        goto LABEL_13;
      }
      if (v8 <= 0x5F)
      {
        uint64_t v41 = v5 + 24 * *(unsigned __int16 *)(a1 + 6616);
        *(void *)uint64_t v41 = v6;
        *(void *)(v41 + 8) = v7;
        *(_DWORD *)(v41 + 16) = 0;
        *((_WORD *)i + 8) = v8;
        goto LABEL_63;
      }
      *((_WORD *)i + 8) = 0;
      goto LABEL_68;
    }
LABEL_4:
    ;
  }
  unint64_t v12 = i[1];
  if (v7 < v12) {
    goto LABEL_68;
  }
  unsigned int v10 = *((unsigned __int16 *)i + 9);
  if (*((_WORD *)i + 9)) {
    goto LABEL_4;
  }
  if (v6 == v12)
  {
    i[1] = v7;
    goto LABEL_13;
  }
  if (v8 > 0x5F)
  {
    *((_WORD *)i + 9) = 0;
LABEL_68:
    unint64_t v19 = (uint64_t *)(a2 + 1);
    goto LABEL_69;
  }
  uint64_t v42 = v5 + 24 * *(unsigned __int16 *)(a1 + 6616);
  *(void *)uint64_t v42 = v6;
  *(void *)(v42 + 8) = v7;
  *(_DWORD *)(v42 + 16) = 0;
  *((_WORD *)i + 9) = v8;
LABEL_63:
  *(_WORD *)(a1 + 6616) = ++v8;
LABEL_13:
  uint64_t v13 = a1 + 2000;
  unsigned int v14 = *(unsigned __int16 *)(a1 + 4304);
  if (!*(_WORD *)(a1 + 4304))
  {
    unint64_t v19 = (uint64_t *)(a2 + 1);
    unint64_t v28 = a2[1];
    if (!v28) {
      goto LABEL_46;
    }
    unint64_t v21 = *a2;
    unint64_t v22 = *a2 + v28;
    goto LABEL_36;
  }
  unint64_t v15 = *a3;
  unint64_t v16 = (unint64_t *)(a1 + 2000);
  do
  {
    if (*v16 < a3[1] + *a3 && v16[1] > v15) {
      goto LABEL_68;
    }
    if (v15 >= *v16) {
      uint64_t v17 = 18;
    }
    else {
      uint64_t v17 = 16;
    }
    uint64_t v18 = *(unsigned __int16 *)((char *)v16 + v17);
    unint64_t v16 = (unint64_t *)(v13 + 24 * v18);
  }
  while (v18);
  unint64_t v19 = (uint64_t *)(a2 + 1);
  unint64_t v20 = a2[1];
  if (!v20) {
    goto LABEL_46;
  }
  unint64_t v21 = *a2;
  unint64_t v22 = *a2 + v20;
  if (!*(_WORD *)(a1 + 4304))
  {
LABEL_36:
    *(void *)(a1 + 2000) = v21;
    *(void *)(a1 + 2008) = v22;
    *(_DWORD *)(a1 + 2016) = 0;
    *(_WORD *)(a1 + 4304) = 1;
    goto LABEL_37;
  }
  unsigned int v23 = (unint64_t *)(a1 + 2000);
  while (2)
  {
    unint64_t v25 = *v23;
    if (*v23 < v22)
    {
      unint64_t v26 = v23[1];
      if (v26 > v21)
      {
        if (v21 >= v25) {
          unint64_t v21 = *v23;
        }
        if (v26 <= v22) {
          unint64_t v62 = v22;
        }
        else {
          unint64_t v62 = v23[1];
        }
        unint64_t *v23 = v21;
        v23[1] = v62;
        goto LABEL_37;
      }
    }
    if (v21 < v25)
    {
      unsigned int v24 = *((unsigned __int16 *)v23 + 8);
      if (!*((_WORD *)v23 + 8))
      {
        if (v22 == v25)
        {
          unint64_t *v23 = v21;
          goto LABEL_37;
        }
        if (v14 <= 0x5F)
        {
          uint64_t v89 = v13 + 24 * *(unsigned __int16 *)(a1 + 4304);
          *(void *)uint64_t v89 = v21;
          *(void *)(v89 + 8) = v22;
          *(_DWORD *)(v89 + 16) = 0;
          *(_WORD *)(a1 + 4304) = v14 + 1;
          *((_WORD *)v23 + 8) = v14;
          goto LABEL_37;
        }
        *((_WORD *)v23 + 8) = 0;
LABEL_69:
        BOOL v33 = (uint64_t *)(a5 + 1);
        int v43 = 1;
        goto LABEL_84;
      }
LABEL_26:
      unsigned int v23 = (unint64_t *)(v13 + 24 * v24);
      continue;
    }
    break;
  }
  unint64_t v27 = v23[1];
  if (v22 < v27) {
    goto LABEL_69;
  }
  unsigned int v24 = *((unsigned __int16 *)v23 + 9);
  if (*((_WORD *)v23 + 9)) {
    goto LABEL_26;
  }
  if (v21 != v27)
  {
    if (v14 <= 0x5F)
    {
      uint64_t v90 = v13 + 24 * *(unsigned __int16 *)(a1 + 4304);
      *(void *)uint64_t v90 = v21;
      *(void *)(v90 + 8) = v22;
      *(_DWORD *)(v90 + 16) = 0;
      *(_WORD *)(a1 + 4304) = v14 + 1;
      *((_WORD *)v23 + 9) = v14;
      goto LABEL_37;
    }
    *((_WORD *)v23 + 9) = 0;
    goto LABEL_69;
  }
  v23[1] = v22;
LABEL_37:
  unint64_t v29 = *a2;
  int v30 = (unint64_t *)(a1 + 4312);
  do
  {
    if (*v30 < a2[1] + *a2 && v30[1] > v29) {
      goto LABEL_69;
    }
    if (v29 >= *v30) {
      uint64_t v31 = 18;
    }
    else {
      uint64_t v31 = 16;
    }
    uint64_t v32 = *(unsigned __int16 *)((char *)v30 + v31);
    int v30 = (unint64_t *)(v5 + 24 * v32);
  }
  while (v32);
  unsigned int v14 = 1;
LABEL_46:
  BOOL v33 = (uint64_t *)(a5 + 1);
  unint64_t v34 = a5[1];
  if (!v34)
  {
LABEL_83:
    int v43 = 0;
    goto LABEL_84;
  }
  unint64_t v35 = *a5;
  unint64_t v36 = *a5 + v34;
  uint64x2_t v37 = (unint64_t *)(a1 + 4312);
  while (2)
  {
    unint64_t v39 = *v37;
    if (*v37 < v36 && v37[1] > v35) {
      goto LABEL_82;
    }
    if (v35 >= v39)
    {
      unint64_t v40 = v37[1];
      if (v36 < v40) {
        goto LABEL_82;
      }
      unsigned int v38 = *((unsigned __int16 *)v37 + 9);
      if (!*((_WORD *)v37 + 9))
      {
        if (v35 == v40)
        {
          v37[1] = v36;
LABEL_74:
          if (!v14) {
            goto LABEL_83;
          }
          unint64_t v46 = *a5;
          int v47 = (unint64_t *)(a1 + 2000);
          while (*v47 >= a5[1] + *a5 || v47[1] <= v46)
          {
            if (v46 >= *v47) {
              uint64_t v48 = 18;
            }
            else {
              uint64_t v48 = 16;
            }
            uint64_t v49 = *(unsigned __int16 *)((char *)v47 + v48);
            int v47 = (unint64_t *)(v13 + 24 * v49);
            if (!v49) {
              goto LABEL_83;
            }
          }
LABEL_82:
          int v43 = 1;
          goto LABEL_84;
        }
        if (v8 <= 0x5F)
        {
          uint64_t v45 = v5 + 24 * v8;
          *(void *)uint64_t v45 = v35;
          *(void *)(v45 + 8) = v36;
          *(_DWORD *)(v45 + 16) = 0;
          *(_WORD *)(a1 + 6616) = v8 + 1;
          *((_WORD *)v37 + 9) = v8;
          goto LABEL_74;
        }
        *((_WORD *)v37 + 9) = 0;
        int v43 = 1;
        goto LABEL_84;
      }
      goto LABEL_49;
    }
    unsigned int v38 = *((unsigned __int16 *)v37 + 8);
    if (*((_WORD *)v37 + 8))
    {
LABEL_49:
      uint64x2_t v37 = (unint64_t *)(v5 + 24 * v38);
      continue;
    }
    break;
  }
  if (v36 == v39)
  {
    unint64_t *v37 = v35;
    goto LABEL_74;
  }
  if (v8 <= 0x5F)
  {
    uint64_t v44 = v5 + 24 * v8;
    *(void *)uint64_t v44 = v35;
    *(void *)(v44 + 8) = v36;
    *(_DWORD *)(v44 + 16) = 0;
    *(_WORD *)(a1 + 6616) = v8 + 1;
    *((_WORD *)v37 + 8) = v8;
    goto LABEL_74;
  }
  *((_WORD *)v37 + 8) = 0;
  int v43 = 1;
LABEL_84:
  unint64_t v50 = a4[1];
  if (!v50)
  {
    if (!v43) {
      return 0;
    }
    goto LABEL_127;
  }
  if (v43) {
    goto LABEL_127;
  }
  unint64_t v51 = *a4;
  unint64_t v52 = *a4 + v50;
  unsigned int v53 = *(unsigned __int16 *)(a1 + 4304);
  if (*(_WORD *)(a1 + 4304))
  {
    uint64_t v54 = a1 + 2000;
    for (unint64_t j = (unint64_t *)(a1 + 2000); ; unint64_t j = (unint64_t *)(v54 + 24 * v56))
    {
      unint64_t v57 = *j;
      if (*j < v52)
      {
        unint64_t v58 = j[1];
        if (v58 > v51)
        {
          if (v51 >= v57) {
            unint64_t v61 = *j;
          }
          else {
            unint64_t v61 = *a4;
          }
          if (v58 > v52) {
            unint64_t v52 = j[1];
          }
          *unint64_t j = v61;
          j[1] = v52;
          goto LABEL_120;
        }
      }
      if (v51 < v57)
      {
        unsigned int v56 = *((unsigned __int16 *)j + 8);
        if (!*((_WORD *)j + 8))
        {
          if (v52 == v57)
          {
            *unint64_t j = v51;
            goto LABEL_120;
          }
          if (v53 <= 0x5F)
          {
            uint64_t v63 = v54 + 24 * *(unsigned __int16 *)(a1 + 4304);
            *(void *)uint64_t v63 = v51;
            *(void *)(v63 + 8) = v52;
            *(_DWORD *)(v63 + 16) = 0;
            *(_WORD *)(a1 + 4304) = v53 + 1;
            *((_WORD *)j + 8) = v53;
            goto LABEL_120;
          }
          *((_WORD *)j + 8) = 0;
          goto LABEL_127;
        }
      }
      else
      {
        unint64_t v59 = j[1];
        if (v52 < v59) {
          goto LABEL_127;
        }
        unsigned int v56 = *((unsigned __int16 *)j + 9);
        if (!*((_WORD *)j + 9))
        {
          if (v51 == v59)
          {
            j[1] = v52;
            goto LABEL_120;
          }
          if (v53 <= 0x5F)
          {
            uint64_t v64 = v54 + 24 * *(unsigned __int16 *)(a1 + 4304);
            *(void *)uint64_t v64 = v51;
            *(void *)(v64 + 8) = v52;
            *(_DWORD *)(v64 + 16) = 0;
            *(_WORD *)(a1 + 4304) = v53 + 1;
            *((_WORD *)j + 9) = v53;
            goto LABEL_120;
          }
          *((_WORD *)j + 9) = 0;
          goto LABEL_127;
        }
      }
    }
  }
  *(void *)(a1 + 2000) = v51;
  *(void *)(a1 + 2008) = v52;
  *(_DWORD *)(a1 + 2016) = 0;
  *(_WORD *)(a1 + 4304) = 1;
LABEL_120:
  unint64_t v65 = *a4;
  int v66 = (unint64_t *)(a1 + 4312);
  while (*v66 >= a4[1] + *a4 || v66[1] <= v65)
  {
    if (v65 >= *v66) {
      uint64_t v67 = 18;
    }
    else {
      uint64_t v67 = 16;
    }
    uint64_t v68 = *(unsigned __int16 *)((char *)v66 + v67);
    int v66 = (unint64_t *)(v5 + 24 * v68);
    if (!v68) {
      return 0;
    }
  }
LABEL_127:
  *(_WORD *)(a1 + 4304) = 0;
  unint64_t v69 = *a3;
  unint64_t v70 = a3[1] + *a3;
  *(void *)(a1 + 4312) = *a3;
  *(void *)(a1 + 4320) = v70;
  *(_DWORD *)(a1 + 4328) = 0;
  *(_WORD *)(a1 + 6616) = 1;
  uint64_t v71 = *v33;
  if (!*v33) {
    goto LABEL_144;
  }
  unint64_t v72 = *a5;
  unint64_t v73 = *a5 + v71;
  int v74 = (unint64_t *)(a1 + 4312);
  while (2)
  {
    if (v69 < v73 && v74[1] > v72) {
      goto LABEL_144;
    }
    if (v72 < v69)
    {
      unsigned int v75 = *((unsigned __int16 *)v74 + 8);
      if (*((_WORD *)v74 + 8))
      {
LABEL_130:
        int v74 = (unint64_t *)(v5 + 24 * v75);
        unint64_t v69 = *v74;
        continue;
      }
      if (v73 == v69)
      {
        *int v74 = v72;
        uint64_t v77 = *v19;
        if (*v19) {
          goto LABEL_145;
        }
LABEL_141:
        unint64_t v78 = a4[1];
        if (v78)
        {
          unint64_t v79 = *a4 + v78;
          *(void *)(a1 + 2000) = *a4;
          *(void *)(a1 + 2008) = v79;
          *(_DWORD *)(a1 + 2016) = 0;
          *(_WORD *)(a1 + 4304) = 1;
          return 1;
        }
        return 1;
      }
      *(void *)(a1 + 4336) = v72;
      *(void *)(a1 + 4344) = v73;
      *(_DWORD *)(a1 + 4352) = 0;
      *(_WORD *)(a1 + 6616) = 2;
      *((_WORD *)v74 + 8) = 1;
LABEL_144:
      uint64_t v77 = *v19;
      if (*v19) {
        goto LABEL_145;
      }
      goto LABEL_141;
    }
    break;
  }
  unint64_t v76 = v74[1];
  if (v73 < v76) {
    goto LABEL_144;
  }
  unsigned int v75 = *((unsigned __int16 *)v74 + 9);
  if (*((_WORD *)v74 + 9)) {
    goto LABEL_130;
  }
  if (v72 == v76)
  {
    v74[1] = v73;
    uint64_t v77 = *v19;
    if (!*v19) {
      goto LABEL_141;
    }
  }
  else
  {
    *(void *)(a1 + 4336) = v72;
    *(void *)(a1 + 4344) = v73;
    *(_DWORD *)(a1 + 4352) = 0;
    *(_WORD *)(a1 + 6616) = 2;
    *((_WORD *)v74 + 9) = 1;
    uint64_t v77 = *v19;
    if (!*v19) {
      goto LABEL_141;
    }
  }
LABEL_145:
  unint64_t v80 = *a2;
  uint64_t v81 = *a2 + v77;
  *(void *)(a1 + 2000) = *a2;
  *(void *)(a1 + 2008) = v81;
  *(_DWORD *)(a1 + 2016) = 0;
  *(_WORD *)(a1 + 4304) = 1;
  unint64_t v82 = a4[1];
  if (!v82) {
    return 1;
  }
  unint64_t v83 = *a4;
  unint64_t v84 = *a4 + v82;
  uint64_t v85 = a1 + 2000;
  while (2)
  {
    if (v80 < v84)
    {
      unint64_t v87 = *(void *)(v85 + 8);
      if (v87 > v83)
      {
        if (v83 >= v80) {
          unint64_t v83 = v80;
        }
        if (v87 > v84) {
          unint64_t v84 = *(void *)(v85 + 8);
        }
        *(void *)uint64_t v85 = v83;
LABEL_161:
        *(void *)(v85 + 8) = v84;
        return 1;
      }
    }
    if (v83 >= v80)
    {
      unint64_t v88 = *(void *)(v85 + 8);
      if (v84 < v88) {
        return 1;
      }
      unsigned int v86 = *(unsigned __int16 *)(v85 + 18);
      if (!*(_WORD *)(v85 + 18))
      {
        if (v83 != v88)
        {
          *(void *)(a1 + 2024) = v83;
          *(void *)(a1 + 2032) = v84;
          *(_DWORD *)(a1 + 2040) = 0;
          *(_WORD *)(a1 + 4304) = 2;
          *(_WORD *)(v85 + 18) = 1;
          return 1;
        }
        goto LABEL_161;
      }
      goto LABEL_148;
    }
    unsigned int v86 = *(unsigned __int16 *)(v85 + 16);
    if (*(_WORD *)(v85 + 16))
    {
LABEL_148:
      uint64_t v85 = a1 + 2000 + 24 * v86;
      unint64_t v80 = *(void *)v85;
      continue;
    }
    break;
  }
  if (v84 != v80)
  {
    *(void *)(a1 + 2024) = v83;
    *(void *)(a1 + 2032) = v84;
    *(_DWORD *)(a1 + 2040) = 0;
    *(_WORD *)(a1 + 4304) = 2;
    *(_WORD *)(v85 + 16) = 1;
    return 1;
  }
  *(void *)uint64_t v85 = v83;
  return 1;
}

void AGX::BlitDispatchContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::blitCDMBuffer(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, char *a5, unint64_t a6, unsigned __int8 *a7, unint64_t a8)
{
  v80[3] = *MEMORY[0x263EF8340];
  if (*(_DWORD *)*MEMORY[0x263F4B1E8]) {
    IOGPUDeviceTraceEvent();
  }
  unsigned int v13 = 4;
  if (a4 && a3 != a5)
  {
    unsigned int v14 = __clz(__rbit32(a3 - a5));
    if (v14 >= 4) {
      unsigned int v13 = 4;
    }
    else {
      unsigned int v13 = v14;
    }
  }
  uint64_t v15 = (1 << v13);
  unint64_t v16 = ((a3 + v15 - 1) & -v15) - a3;
  if (v16 >= a6) {
    unint64_t v16 = a6;
  }
  unint64_t v55 = v16;
  if (a4) {
    BOOL v17 = 0;
  }
  else {
    BOOL v17 = a8 > 1;
  }
  int v18 = v17;
  int v19 = dword_242EAA2D8[v13];
  (*(void (**)(uint64_t, void, uint64_t))(*(void *)a1 + 16))(a1, 0, 1);
  v80[1] = 0;
  v80[2] = 0;
  v79[2] = 0;
  v80[0] = a2;
  v79[0] = a4;
  v79[1] = 0;
  uint64_t v54 = a4;
  AGX::BlitDispatchContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::bindComputeResources(a1, (uint64_t)v80, v79);
  if (!*(void *)(*(void *)(a1 + 1504) + 520))
  {
    AGX::BlitDispatchContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::endPreviousBlitCommand(a1, 0, v20, v21, v22);
    AGX::BlitDispatchContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::beginComputePass(a1, 0);
    AGX::BlitDispatchContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::bindComputeResources(a1, (uint64_t)v80, v79);
    if (!*(void *)(*(void *)(a1 + 1504) + 520))
    {
      uint64_t v23 = *(void *)(a1 + 1560) - *(void *)(a1 + 1576);
      *(_DWORD *)(v23 + 12) = 1;
      if ((*(unsigned char *)(v23 + 8) & 4) != 0) {
        **(unsigned char **)(*(void *)(a1 + 8) + 688) = 1;
      }
    }
  }
  if (a6)
  {
    unint64_t v24 = a4 ? a6 : 0;
    *(void *)&long long __pattern4 = a5;
    *((void *)&__pattern4 + 1) = v24;
    unint64_t v66 = a3;
    unint64_t v67 = a6;
    v59[0] = 0;
    v59[1] = 0;
    v58[0] = 0;
    v58[1] = 0;
    if (AGX::BlitDispatchContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::checkDependentBlits(a1, (unint64_t *)&__pattern4, &v66, v59, v58))
    {
      unint64_t v25 = *(unint64_t **)(a1 + 776);
      if ((unint64_t)v25 + 4 > *(void *)(a1 + 768))
      {
        int v51 = AGX::DataBufferAllocator<34ul>::growNoInline(a1 + 24, 22, 0);
        unint64_t v26 = *(unint64_t **)(a1 + 776);
        if (v51)
        {
          if ((unint64_t)v26 + 4 > *(void *)(a1 + 768)) {
            abort();
          }
          *(void *)(a1 + 784) = (char *)v26 + 4;
          *unint64_t v25 = __ROR8__((char *)v26 + *(void *)(a1 + 792), 32) & 0xFFFFFFFF0000FFFFLL | 0x20000000;
          unint64_t v26 = *(unint64_t **)(a1 + 776);
        }
      }
      else
      {
        *(void *)(a1 + 784) = (char *)v25 + 4;
        unint64_t v26 = v25;
      }
      *(_DWORD *)unint64_t v26 = 1610613088;
      *(void *)(a1 + 776) = (char *)v26 + 4;
    }
  }
  unint64_t v27 = (a6 - v55) >> v13;
  unint64_t v53 = a6 - v55;
  if (v55 || a6 != v27 << v13)
  {
    DWORD2(__pattern4) = 16;
    __p[1] = 0;
    memset(v62, 0, sizeof(v62));
    __p[0] = 0;
    *(void *)&long long __pattern4 = &unk_26F852108;
    if (v18) {
      int v29 = 0x800000;
    }
    else {
      int v29 = 0;
    }
    if (a4) {
      int v30 = 261;
    }
    else {
      int v30 = 262;
    }
    LODWORD(v63) = v30 | v29;
    uint64_t BlitProgramVariant = (_DWORD *)AGX::Device<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::findOrCreateBlitProgramVariant(*(void *)(*(void *)(a1 + 1464) + 808), (uint64_t)&__pattern4);
    if (AGX::SpillInfoGen3<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::checkSpillParamsForCompute(a1 + 1808, BlitProgramVariant[99], BlitProgramVariant[102], BlitProgramVariant[107], 4 * BlitProgramVariant[668], 0, 0))AGX::BlitDispatchContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::bindComputeUSCSpillBuffer(a1); {
    *(void *)&long long __pattern4 = &unk_26F852148;
    }
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
  }
  else
  {
    uint64_t BlitProgramVariant = 0;
  }
  if (!v27)
  {
    uint64_t v32 = 0;
    if (a4) {
      goto LABEL_63;
    }
LABEL_52:
    uint64_t v33 = 3;
    if (v18) {
      uint64_t v33 = 15;
    }
    size_t v34 = (v33 + v15) & ~v33;
    uint64_t v35 = 2 * v34 - 1;
    uint64_t v36 = *(void *)(a1 + 168);
    uint64_t v37 = v36 + v35;
    if ((unint64_t)(v36 + v35) > *(void *)(a1 + 160))
    {
      int v50 = AGX::DataBufferAllocator<34ul>::growNoInline(a1 + 24, 3, 0);
      uint64_t v36 = *(void *)(a1 + 168);
      if (!v50)
      {
LABEL_56:
        unsigned int v38 = (char *)((v34 + v36 - 1) & -(uint64_t)v34);
        a5 = &v38[*(void *)(a1 + 184)];
        *(void *)(a1 + 168) = &v38[v34];
        switch(a8)
        {
          case 1uLL:
            memset(v38, *a7, v34);
            break;
          case 2uLL:
            LODWORD(__pattern4) = *(unsigned __int16 *)a7 | (*(unsigned __int16 *)a7 << 16);
            p_pattern4 = &__pattern4;
            goto LABEL_60;
          case 4uLL:
            p_pattern4 = (long long *)a7;
LABEL_60:
            memset_pattern4(v38, p_pattern4, v34);
            break;
          case 8uLL:
            memset_pattern8(v38, a7, v34);
            break;
          case 0x10uLL:
            memset_pattern16(v38, a7, v34);
            break;
          default:
            goto LABEL_63;
        }
        goto LABEL_63;
      }
      uint64_t v37 = v36 + v35;
      if ((unint64_t)(v36 + v35) > *(void *)(a1 + 160)) {
        abort();
      }
    }
    *(void *)(a1 + 176) = v37;
    goto LABEL_56;
  }
  DWORD2(__pattern4) = 16;
  __p[1] = 0;
  memset(v62, 0, sizeof(v62));
  __p[0] = 0;
  *(void *)&long long __pattern4 = &unk_26F852108;
  if (a4) {
    int v31 = 5;
  }
  else {
    int v31 = 6;
  }
  LODWORD(v63) = v31 | v19;
  uint64_t v32 = (_DWORD *)AGX::Device<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::findOrCreateBlitProgramVariant(*(void *)(*(void *)(a1 + 1464) + 808), (uint64_t)&__pattern4);
  if (AGX::SpillInfoGen3<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::checkSpillParamsForCompute(a1 + 1808, v32[99], v32[102], v32[107], 4 * v32[668], 0, 0))AGX::BlitDispatchContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::bindComputeUSCSpillBuffer(a1); {
  *(void *)&long long __pattern4 = &unk_26F852148;
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (!a4) {
    goto LABEL_52;
  }
LABEL_63:
  if (v55)
  {
    uint64_t v71 = 0;
    uint64_t v72 = 0;
    uint64_t v65 = 0;
    long long v63 = 0u;
    long long v64 = 0u;
    *(_OWORD *)long long __p = 0u;
    memset(v62, 0, sizeof(v62));
    long long __pattern4 = 0u;
    unsigned int v40 = BlitProgramVariant[420];
    do
    {
      IOGPUResourceListAddResource();
      v40 &= ~(1 << __clz(__rbit32(v40)));
    }
    while (v40);
    uint64_t v68 = 0x100000001;
    if (v55 >= 0x400) {
      int v41 = 1024;
    }
    else {
      int v41 = v55;
    }
    unint64_t v66 = 0;
    HIDWORD(v67) = v41;
    LODWORD(v67) = 0;
    uint64_t v70 = 0x100000001;
    unint64_t v76 = a5;
    unint64_t v77 = a3;
    uint64_t v75 = 0;
    unsigned int v69 = v55;
    unsigned int v73 = v55;
    int v74 = 0;
    int v78 = 4 * BlitProgramVariant[668];
    AGX::BlitUSCStateLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes>::emitComputeProgramVariantArguments((char ***)(a1 + 1760), (void *)(a1 + 24), (uint64_t)BlitProgramVariant, (uint64_t)&__pattern4, (uint64_t)&v66, v78, v41, 1, (_DWORD *)(a1 + 1532));
    a3 += v55;
    if (v54) {
      unint64_t v42 = v55;
    }
    else {
      unint64_t v42 = 0;
    }
    a5 += v42;
  }
  if (v27)
  {
    uint64_t v71 = 0;
    uint64_t v72 = 0;
    uint64_t v65 = 0;
    long long v63 = 0u;
    long long v64 = 0u;
    *(_OWORD *)long long __p = 0u;
    memset(v62, 0, sizeof(v62));
    long long __pattern4 = 0u;
    unsigned int v43 = v32[420];
    do
    {
      IOGPUResourceListAddResource();
      v43 &= ~(1 << __clz(__rbit32(v43)));
    }
    while (v43);
    uint64_t v68 = 0x100000001;
    if (v27 >= 0x400) {
      int v44 = 1024;
    }
    else {
      int v44 = v27;
    }
    unint64_t v66 = 0;
    HIDWORD(v67) = v44;
    LODWORD(v67) = 0;
    uint64_t v70 = 0x100000001;
    unint64_t v76 = a5;
    unint64_t v77 = a3;
    uint64_t v75 = 0;
    unsigned int v69 = v27;
    unsigned int v73 = v27;
    int v74 = 0;
    int v78 = 4 * v32[668];
    AGX::BlitUSCStateLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes>::emitComputeProgramVariantArguments((char ***)(a1 + 1760), (void *)(a1 + 24), (uint64_t)v32, (uint64_t)&__pattern4, (uint64_t)&v66, v78, v44, 1, (_DWORD *)(a1 + 1532));
    uint64_t v45 = v27 << v13;
    a3 += v27 << v13;
    if (v54) {
      uint64_t v46 = v27 << v13;
    }
    else {
      uint64_t v46 = 0;
    }
    a5 += v46;
  }
  else
  {
    uint64_t v45 = 0;
  }
  if (v53 != v45)
  {
    unsigned int v47 = v53 - v45;
    uint64_t v71 = 0;
    uint64_t v72 = 0;
    uint64_t v65 = 0;
    long long v63 = 0u;
    long long v64 = 0u;
    *(_OWORD *)long long __p = 0u;
    memset(v62, 0, sizeof(v62));
    long long __pattern4 = 0u;
    unsigned int v48 = BlitProgramVariant[420];
    do
    {
      IOGPUResourceListAddResource();
      v48 &= ~(1 << __clz(__rbit32(v48)));
    }
    while (v48);
    uint64_t v68 = 0x100000001;
    if (v47 >= 0x400) {
      int v49 = 1024;
    }
    else {
      int v49 = v47;
    }
    unint64_t v66 = 0;
    HIDWORD(v67) = v49;
    LODWORD(v67) = 0;
    uint64_t v70 = 0x100000001;
    unint64_t v76 = a5;
    unint64_t v77 = a3;
    uint64_t v75 = 0;
    unsigned int v69 = v47;
    unsigned int v73 = v47;
    int v74 = 0;
    int v78 = 4 * BlitProgramVariant[668];
    AGX::BlitUSCStateLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes>::emitComputeProgramVariantArguments((char ***)(a1 + 1760), (void *)(a1 + 24), (uint64_t)BlitProgramVariant, (uint64_t)&__pattern4, (uint64_t)&v66, v78, v49, 1, (_DWORD *)(a1 + 1532));
  }
  if (*(_DWORD *)*MEMORY[0x263F4B1E8]) {
    IOGPUDeviceTraceEvent();
  }
}

void sub_242A2ED84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24)
{
  if (__p)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t AGX::ContextCommon<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::~ContextCommon(uint64_t a1)
{
  uint64_t v2 = *(void ***)(a1 + 1416);
  uint64_t v3 = *(void ***)(a1 + 1424);
  if (v2 != v3)
  {
    do
    {
      uint64_t v4 = *v2++;
      free(v4);
    }
    while (v2 != v3);
    uint64_t v2 = *(void ***)(a1 + 1416);
  }
  if (v2)
  {
    *(void *)(a1 + 1424) = v2;
    operator delete(v2);
  }
  return a1;
}

double AGX::BlitDispatchContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::commit(uint64_t a1, __n128 a2, uint64x2_t a3, double a4)
{
  AGX::BlitDispatchContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::endPreviousBlitCommand(a1, 1, a2, a3, a4);
  uint64_t v5 = *(void *)(a1 + 1952);
  if (v5) {
    LODWORD(v5) = *(_DWORD *)(v5 + 528);
  }
  uint64_t v6 = *(void *)(a1 + 1944);
  if (v6) {
    LODWORD(v6) = *(_DWORD *)(v6 + 528);
  }
  if (v5 + v6)
  {
    AGX::BlitDispatchContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::beginComputePass(a1, 0);
    unsigned int v10 = *(unint64_t **)(a1 + 776);
    if ((unint64_t)v10 + 4 > *(void *)(a1 + 768))
    {
      int v13 = AGX::DataBufferAllocator<34ul>::growNoInline(a1 + 24, 22, 0);
      unint64_t v11 = *(unint64_t **)(a1 + 776);
      if (v13)
      {
        if ((unint64_t)v11 + 4 > *(void *)(a1 + 768)) {
          abort();
        }
        *(void *)(a1 + 784) = (char *)v11 + 4;
        *unsigned int v10 = __ROR8__((char *)v11 + *(void *)(a1 + 792), 32) & 0xFFFFFFFF0000FFFFLL | 0x20000000;
        unint64_t v11 = *(unint64_t **)(a1 + 776);
      }
    }
    else
    {
      *(void *)(a1 + 784) = (char *)v10 + 4;
      unint64_t v11 = v10;
    }
    *(_DWORD *)unint64_t v11 = 1610613088;
    *(void *)(a1 + 776) = (char *)v11 + 4;
    AGX::BlitDispatchContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::endPreviousBlitCommand(a1, 1, v7, v8, v9);
  }
  *(void *)(a1 + 696) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 672) = 0u;
  *(_OWORD *)(*(void *)(a1 + 48) + 1232) = 0u;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 8) = 0;
  *(_OWORD *)(a1 + 1488) = 0u;
  return result;
}

uint64_t AGX::BlitDispatchContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::getBlitBounceBuffer(void *a1)
{
  uint64_t v2 = a1 + 3;
  uint64_t v3 = a1[81];
  if (!v3)
  {
    if (!AGX::DataBufferAllocator<34ul>::growNoInline(a1 + 3, 18, 0)) {
      goto LABEL_9;
    }
    uint64_t v3 = a1[81];
  }
  uint64_t v4 = v3 + 0x8000;
  if ((unint64_t)(v3 + 0x8000) > a1[80])
  {
    int v6 = AGX::DataBufferAllocator<34ul>::growNoInline(v2, 18, 0);
    uint64_t v3 = a1[81];
    if (!v6) {
      goto LABEL_4;
    }
    uint64_t v4 = v3 + 0x8000;
    if ((unint64_t)(v3 + 0x8000) > a1[80]) {
LABEL_9:
    }
      abort();
  }
  a1[82] = v4;
LABEL_4:
  a1[81] = v3 + 0x8000;
  return *(void *)(a1[6] + 1184);
}

uint64_t AGX::BlitDispatchContextGen2<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::BlitDispatchContextGen2(uint64_t a1, void *a2, MTLBlitPassDescriptor *a3, MTLResourceStatePassDescriptor *a4)
{
  uint64_t v7 = *a2;
  uint64_t v8 = a2[1];
  uint64_t v9 = a2[2];
  uint64_t v11 = a2[4];
  uint64_t v10 = a2[5];
  uint64_t v12 = *(void *)(*a2 + 808) + 5864;
  block[0] = MEMORY[0x263EF8330];
  block[1] = 3221225472;
  void block[2] = ___ZN3AGX18BlitUSCStateLoaderINS_6HAL2008EncodersENS1_7ClassesEE17dataBufferConfigsERK16AGXGPUCoreConfig_block_invoke;
  block[3] = &__block_descriptor_40_e5_v8__0l;
  void block[4] = v12;
  if (AGX::BlitUSCStateLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes>::dataBufferConfigs(AGXGPUCoreConfig const&)::once != -1) {
    dispatch_once(&AGX::BlitUSCStateLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes>::dataBufferConfigs(AGXGPUCoreConfig const&)::once, block);
  }
  *(void *)(a1 + 8) = v8;
  *(void *)(a1 + 16) = v9;
  *(void *)(a1 + 24) = &AGX::BlitUSCStateLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes>::databuffer_configs;
  *(void *)(a1 + 32) = v7;
  *(void *)(a1 + 40) = v9;
  uint64_t v13 = *(void *)(v9 + 768);
  *(void *)(a1 + 1424) = 0;
  *(_OWORD *)(a1 + 1432) = 0u;
  *(_DWORD *)(a1 + 1448) = 0;
  *(void *)(a1 + 48) = v13;
  *(void *)(a1 + 56) = v9 + 144;
  *(void *)(a1 + 1456) = *(void *)(v9 + 784);
  *(void *)(a1 + 1472) = v9;
  *(void *)(a1 + 1480) = v9 + 64;
  *(unsigned char *)(a1 + 1512) = 0;
  *(unsigned char *)(a1 + 1553) = 0;
  *(void *)(a1 + 1584) = v11;
  *(void *)(a1 + 1592) = v10;
  *(void *)(a1 + 1600) = *(void *)(v8 + 688) + 24;
  *(_OWORD *)(a1 + 1608) = 0u;
  *(void *)(a1 + 1624) = 0xFFFFFFFF00000001;
  *(void *)(a1 + 1632) = 1610612736;
  *(void *)(a1 + 1672) = 0;
  *(_OWORD *)(a1 + 1640) = 0u;
  *(_OWORD *)(a1 + 1656) = 0u;
  *(void *)&long long v14 = -1;
  *((void *)&v14 + 1) = -1;
  *(_OWORD *)(a1 + 1712) = v14;
  *(_OWORD *)(a1 + 1696) = v14;
  *(_OWORD *)(a1 + 1680) = v14;
  *(void *)(a1 + 1464) = v7;
  *(_OWORD *)(a1 + 1488) = *(_OWORD *)(v9 + 728);
  *(void *)(a1 + 1504) = v9 + 144;
  *(void *)(a1 + 1560) = *(void *)(v9 + 48);
  *(void *)(a1 + 1568) = *(void *)(v9 + 56);
  *(_DWORD *)(a1 + 1516) = v10;
  *(void *)(a1 + 1524) = 0xFFFFFFFF00000000;
  *(_DWORD *)(a1 + 1548) = 0;
  *(unsigned char *)(a1 + 1552) = 1;
  *(void *)a1 = &unk_26F852018;
  uint64_t v15 = *(void *)(v7 + 808);
  unsigned int v16 = *(_DWORD *)(v15 + 5876);
  unsigned int v17 = *(_DWORD *)(v15 + 5912);
  DWORD1(v14) = 1792;
  LODWORD(v14) = (((96 * (v16 / v17) + 367) & 0xFFFFFFE0) + 127) & 0xFFFFFF80;
  int32x2_t v18 = vmla_s32((int32x2_t)0xD8000000080, *(int32x2_t *)&v14, vdup_n_s32(v17));
  *(void *)&long long v19 = v18.u32[0];
  *((void *)&v19 + 1) = v18.u32[1];
  *(_OWORD *)(a1 + 1728) = v19;
  BOOL v20 = v17 == 1;
  if (v17 == 1) {
    uint64_t v21 = 640;
  }
  else {
    uint64_t v21 = (640 * v17 + 671) & 0xFFFFFF80;
  }
  *(void *)(a1 + 1744) = v21;
  LODWORD(v22) = 1632 * v17 + 2016;
  if (v20) {
    uint64_t v22 = 1632;
  }
  else {
    uint64_t v22 = v22;
  }
  *(void *)(a1 + 1752) = v21 + v22;
  *(_DWORD *)(a1 + 1784) = 0;
  *(void *)(a1 + 1768) = 0;
  *(void *)(a1 + 1776) = 0;
  *(void *)(a1 + 1760) = 0;
  *(_DWORD *)(a1 + 1792) = -1073741824;
  AGX::SpillInfoGen3<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::SpillInfoGen3(a1 + 1808, *(void *)(v7 + 808), *(void *)(*(void *)(v7 + 808) + 6048));
  *(_OWORD *)(a1 + 1928) = 0u;
  AGX::BlitCounterSamplingContextGen1::BlitCounterSamplingContextGen1((AGX::BlitCounterSamplingContextGen1 *)(a1 + 1960), a3, a4);
  *(unsigned char *)(a1 + 1976) = 0;
  *(_OWORD *)(a1 + 1984) = xmmword_242EA7E00;
  *(_WORD *)(a1 + 4304) = 0;
  *(_WORD *)(a1 + 6616) = 0;
  *(void *)a1 = &unk_26F852050;
  *(void *)(a1 + 6624) = 0;
  *(void *)(a1 + 6688) = 0;
  *(_DWORD *)(a1 + 6696) = 0;
  *(_OWORD *)(a1 + 6640) = 0u;
  *(_OWORD *)(a1 + 6656) = 0u;
  *(void *)(a1 + 6704) = 0;
  return a1;
}

void sub_242A2F318(_Unwind_Exception *exception_object)
{
  uint64_t v5 = *v3;
  if (*v3)
  {
    free(*v5);
    MEMORY[0x24566ED90](v5, 0x1020C4014030ADELL);
  }
  int v6 = *(void ***)(v1 + 1424);
  uint64_t v7 = *(void ***)(v1 + 1432);
  if (v6 == v7)
  {
    if (!v6) {
      goto LABEL_5;
    }
  }
  else
  {
    do
    {
      uint64_t v8 = *v6++;
      free(v8);
    }
    while (v6 != v7);
    int v6 = *v2;
    if (!*v2) {
LABEL_5:
    }
      _Unwind_Resume(exception_object);
  }
  *(void *)(v1 + 1432) = v6;
  operator delete(v6);
  _Unwind_Resume(exception_object);
}

uint64_t AGX::BlitDispatchContextGen2<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::renderMRCDownsample(uint64_t a1)
{
  uint64_t v1 = MEMORY[0x270FA5388](a1);
  int v3 = v2;
  int v65 = v4;
  int v6 = v5;
  long long v63 = v7;
  int v9 = v8;
  uint64_t v11 = v10;
  uint64_t v13 = v12;
  uint64_t v14 = v1;
  uint64_t v112 = *MEMORY[0x263EF8340];
  AGX::BlitDispatchContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::endPreviousBlitCommand(v1, 0, v15, v16, v17);
  if (*(_DWORD *)*MEMORY[0x263F4B1E8]) {
    IOGPUDeviceTraceEvent();
  }
  uint64_t v66 = *(void *)(v11 + 380);
  int v18 = *(_DWORD *)(v11 + 144);
  uint32x2_t v19 = *(uint32x2_t *)(v11 + 128);
  uint64_t v110 = v13;
  long long v111 = *(_OWORD *)(v11 + 496);
  memset(v109, 0, 108);
  HIDWORD(v109[6]) = 3;
  LOBYTE(v109[7]) = 0;
  *(_OWORD *)((char *)&v109[7] + 8) = 0u;
  *(_OWORD *)((char *)&v109[8] + 8) = 0u;
  *(_OWORD *)((char *)&v109[9] + 8) = 0u;
  *(_OWORD *)((char *)&v109[10] + 8) = 0u;
  *((void *)&v109[11] + 1) = 0x300000000;
  LOBYTE(v109[12]) = 0;
  *(_OWORD *)((char *)&v109[12] + 8) = 0u;
  *(_OWORD *)((char *)&v109[13] + 8) = 0u;
  *(_OWORD *)((char *)&v109[14] + 8) = 0u;
  *(_OWORD *)((char *)&v109[15] + 8) = 0u;
  *((void *)&v109[16] + 1) = 0x300000000;
  LOBYTE(v109[17]) = 0;
  *(_OWORD *)((char *)&v109[17] + 8) = 0u;
  *(_OWORD *)((char *)&v109[18] + 8) = 0u;
  *(_OWORD *)((char *)&v109[19] + 8) = 0u;
  *(_OWORD *)((char *)&v109[20] + 8) = 0u;
  LOBYTE(v109[22]) = 0;
  *(_OWORD *)((char *)&v109[22] + 8) = 0u;
  *(_OWORD *)((char *)&v109[23] + 8) = 0u;
  *(_OWORD *)((char *)&v109[24] + 8) = 0u;
  *(_OWORD *)((char *)&v109[25] + 8) = 0u;
  *((void *)&v109[21] + 1) = 0x300000000;
  *((void *)&v109[26] + 1) = 0x300000000;
  LOBYTE(v109[27]) = 0;
  *(_OWORD *)((char *)&v109[29] + 8) = 0u;
  *(_OWORD *)((char *)&v109[30] + 8) = 0u;
  *(_OWORD *)((char *)&v109[27] + 8) = 0u;
  *(_OWORD *)((char *)&v109[28] + 8) = 0u;
  *((void *)&v109[31] + 1) = 0x300000000;
  LOBYTE(v109[32]) = 0;
  *(_OWORD *)((char *)&v109[32] + 8) = 0u;
  *(_OWORD *)((char *)&v109[33] + 8) = 0u;
  *(_OWORD *)((char *)&v109[34] + 8) = 0u;
  *(_OWORD *)((char *)&v109[35] + 8) = 0u;
  *((void *)&v109[36] + 1) = 0x300000000;
  LOBYTE(v109[37]) = 0;
  *(_OWORD *)((char *)&v109[37] + 8) = 0u;
  *(_OWORD *)((char *)&v109[38] + 8) = 0u;
  *(_OWORD *)((char *)&v109[39] + 8) = 0u;
  *(_OWORD *)((char *)&v109[40] + 8) = 0u;
  *((void *)&v109[41] + 1) = 0x300000000;
  LOBYTE(v109[42]) = 0;
  *(_OWORD *)((char *)&v109[44] + 8) = 0u;
  *(_OWORD *)((char *)&v109[45] + 8) = 0u;
  *(_OWORD *)((char *)&v109[42] + 8) = 0u;
  *(_OWORD *)((char *)&v109[43] + 8) = 0u;
  *((void *)&v109[46] + 1) = 0x300000000;
  LOBYTE(v109[47]) = 0;
  *(_OWORD *)((char *)&v109[47] + 8) = 0u;
  *(_OWORD *)((char *)&v109[48] + 8) = 0u;
  *(_OWORD *)((char *)&v109[49] + 8) = 0u;
  *(_OWORD *)((char *)&v109[50] + 8) = 0u;
  *((void *)&v109[51] + 1) = 0x300000000;
  LOBYTE(v109[52]) = 0;
  *(_OWORD *)((char *)&v109[52] + 8) = 0u;
  *(_OWORD *)((char *)&v109[53] + 8) = 0u;
  *(_OWORD *)((char *)&v109[54] + 8) = 0u;
  *(_OWORD *)((char *)&v109[55] + 8) = 0u;
  *((void *)&v109[56] + 1) = 0x300000000;
  LOBYTE(v109[57]) = 0;
  *(_OWORD *)((char *)&v109[59] + 8) = 0u;
  *(_OWORD *)((char *)&v109[60] + 8) = 0u;
  *(_OWORD *)((char *)&v109[57] + 8) = 0u;
  *(_OWORD *)((char *)&v109[58] + 8) = 0u;
  *((void *)&v109[61] + 1) = 0x300000000;
  LOBYTE(v109[62]) = 0;
  *(_OWORD *)((char *)&v109[64] + 8) = 0u;
  *(_OWORD *)((char *)&v109[65] + 8) = 0u;
  *(_OWORD *)((char *)&v109[62] + 8) = 0u;
  *(_OWORD *)((char *)&v109[63] + 8) = 0u;
  *((void *)&v109[66] + 1) = 0x300000000;
  LOBYTE(v109[67]) = 0;
  *(_OWORD *)((char *)&v109[69] + 8) = 0u;
  *(_OWORD *)((char *)&v109[70] + 8) = 0u;
  *(_OWORD *)((char *)&v109[67] + 8) = 0u;
  *(_OWORD *)((char *)&v109[68] + 8) = 0u;
  *((void *)&v109[71] + 1) = 0x300000000;
  LOBYTE(v109[72]) = 0;
  *(_OWORD *)((char *)&v109[74] + 8) = 0u;
  *(_OWORD *)((char *)&v109[75] + 8) = 0u;
  *(_OWORD *)((char *)&v109[72] + 8) = 0u;
  *(_OWORD *)((char *)&v109[73] + 8) = 0u;
  *((void *)&v109[76] + 1) = 0x300000000;
  LOBYTE(v109[77]) = 0;
  *(_OWORD *)((char *)&v109[79] + 8) = 0u;
  *(_OWORD *)((char *)&v109[80] + 8) = 0u;
  *(_OWORD *)((char *)&v109[77] + 8) = 0u;
  *(_OWORD *)((char *)&v109[78] + 8) = 0u;
  *((void *)&v109[81] + 1) = 0x300000000;
  LOBYTE(v109[82]) = 0;
  *(_OWORD *)((char *)&v109[84] + 8) = 0u;
  *(_OWORD *)((char *)&v109[85] + 8) = 0u;
  *(_OWORD *)((char *)&v109[82] + 8) = 0u;
  *(_OWORD *)((char *)&v109[83] + 8) = 0u;
  *((void *)&v109[86] + 1) = 0x300000000;
  LOBYTE(v109[87]) = 0;
  *(_OWORD *)((char *)&v109[89] + 8) = 0u;
  *(_OWORD *)((char *)&v109[90] + 8) = 0u;
  *(_OWORD *)((char *)&v109[87] + 8) = 0u;
  *(_OWORD *)((char *)&v109[88] + 8) = 0u;
  *((void *)&v109[91] + 1) = 0x300000000;
  LOBYTE(v109[92]) = 0;
  *(_OWORD *)((char *)&v109[94] + 8) = 0u;
  *(_OWORD *)((char *)&v109[95] + 8) = 0u;
  *(_OWORD *)((char *)&v109[92] + 8) = 0u;
  *(_OWORD *)((char *)&v109[93] + 8) = 0u;
  *((void *)&v109[96] + 1) = 0x300000000;
  LOBYTE(v109[97]) = 0;
  *(_OWORD *)((char *)&v109[99] + 8) = 0u;
  *(_OWORD *)((char *)&v109[100] + 8) = 0u;
  *(_OWORD *)((char *)&v109[97] + 8) = 0u;
  *(_OWORD *)((char *)&v109[98] + 8) = 0u;
  *((void *)&v109[101] + 1) = 0x300000000;
  LOBYTE(v109[102]) = 0;
  *(void *)((char *)&v109[107] + 7) = 0;
  *(_OWORD *)((char *)&v109[105] + 8) = 0u;
  *(_OWORD *)((char *)&v109[106] + 8) = 0u;
  *(_OWORD *)((char *)&v109[103] + 8) = 0u;
  *(_OWORD *)((char *)&v109[104] + 8) = 0u;
  *(_OWORD *)((char *)&v109[102] + 8) = 0u;
  LODWORD(v109[108]) = 1;
  WORD2(v109[108]) = 0;
  DWORD2(v109[108]) = 0;
  memset(&v109[109], 0, 96);
  bzero(&v109[103], 0x28uLL);
  *(void *)&v109[115] = 0;
  *((void *)&v109[115] + 1) = 0x300000000;
  LODWORD(v109[116]) = 3;
  BYTE4(v109[116]) = 0;
  *(_OWORD *)((char *)&v109[120] + 8) = 0u;
  *(_OWORD *)((char *)&v109[121] + 8) = 0u;
  if ((v9 - 5) >= 2)
  {
    if (v9 != 7) {
      goto LABEL_11;
    }
    uint64_t v21 = *(void *)(v11 + 496);
    uint64_t v22 = *(void *)(v11 + 504);
    *(void *)&long long v88 = v110;
    *((void *)&v88 + 1) = v21;
    *(void *)&long long v89 = v22;
    *((void *)&v89 + 1) = v110;
    *(void *)&long long v90 = v21;
    *((void *)&v90 + 1) = v22;
    *(void *)&long long v82 = v11;
    *((void *)&v82 + 1) = v11;
    AGX::FramebufferDriverConfig<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::FramebufferDriverConfig((uint64_t)__src, 2u, (uint64_t)&v88, (uint64_t)&v82, 0, 0, 0, 0, 0);
  }
  else
  {
    *(void *)&long long v88 = v11;
    LODWORD(v82) = 0;
    if (v11) {
      BOOL v20 = &v88;
    }
    else {
      BOOL v20 = 0;
    }
    AGX::FramebufferDriverConfig<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::FramebufferDriverConfig((uint64_t)__src, 1u, (uint64_t)&v110, (uint64_t)v20, (uint64_t)&v82, 0, 0, 0, 0);
  }
  __src[121] = 0u;
  AGX::FramebufferCompilerConfigGen3<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::buildDrawBufferState((uint64_t)&__src[103], 0);
  *(void *)&__src[122] = 0;
  memcpy(v109, __src, 0x8A8uLL);
LABEL_11:
  int v23 = v6 + 1;
  uint32x2_t v24 = vmax_u32(vshl_u32(v19, (uint32x2_t)vneg_s32(vdup_n_s32(v18 + v6 + 1))), (uint32x2_t)0x100000001);
  __int32 v25 = v24.i32[0];
  uint32x2_t v64 = v24;
  __int16 v26 = v24.i16[2];
  AGX::FramebufferGen3_3<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::FramebufferGen3_3((uint64_t)__src, *(atomic_ullong **)(v14 + 1464), *(void *)(*(void *)(v14 + 8) + 688), (uint64_t)v109, v24.i32[0], v24.i32[1], 1);
  int v27 = v3;
  AGX::FramebufferGen3_1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::finalizeStoreActions((unint64_t)__src);
  AGX::FramebufferGen3<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::updateResourceGroupUsage((uint64_t)__src, *(void **)(v14 + 1600));
  __int16 v62 = v26;
  unint64_t v80 = 0;
  uint64_t v81 = 0;
  AGX::BlitDispatchContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::startFast2DHardwareCommand(v14, &v81, &v80);
  unint64_t v28 = v80;
  unint64_t v61 = (void *)(v14 + 24);
  AGX::BlitUSCStateLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes>::setupBlitCommand(v14 + 1760, v80, *(void *)(v14 + 1504), (void *)(v14 + 24), (uint64_t)__src);
  *((_DWORD *)v28 + 190) = v101;
  if (v105) {
    BOOL v29 = 0;
  }
  else {
    BOOL v29 = v106 == 0;
  }
  if (v29 && *(unsigned __int16 *)(*(void *)(*(void *)&__src[25] + 808) + 7766) > 0xAu) {
    int v31 = 256;
  }
  else {
    int v31 = 768;
  }
  *((_DWORD *)v28 + 189) = v31;
  *((unsigned char *)v28 + 774) = v102 != 0;
  int v32 = v94;
  *(void *)&long long v33 = v95;
  int v34 = v104;
  *((void *)&v33 + 1) = v96;
  long long v35 = v97;
  long long v36 = v98;
  long long v37 = v99;
  uint64_t v38 = v100;
  v28[116] = 0;
  *((_DWORD *)v28 + 234) = v32;
  *(_OWORD *)((char *)v28 + 940) = v33;
  *(_OWORD *)((char *)v28 + 956) = v35;
  *(_OWORD *)((char *)v28 + 972) = v36;
  *(_OWORD *)((char *)v28 + 988) = v37;
  *(void *)((char *)v28 + 1004) = v38;
  *((_DWORD *)v28 + 253) = v34;
  v28[127] = 0;
  v28[127] = v103;
  AGX::BlitDispatchContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::bindFast2DResources(v14, (uint64_t)&v110, &v110, (uint64_t)__src);
  memset(v92, 0, 32);
  long long v90 = 0u;
  long long v91 = 0u;
  long long v88 = 0u;
  long long v89 = 0u;
  memset(v73, 0, sizeof(v73));
  DWORD2(v82) = 14;
  memset(__p, 0, sizeof(__p));
  long long v84 = v109[103];
  long long v85 = v109[104];
  *(void *)&long long v82 = &unk_26F852088;
  uint64_t v86 = *(void *)&v109[105];
  int v87 = (4 * v66) & 0x40000 | v9 & 0xF | 0x10;
  uint64_t BlitProgramVariant = (_DWORD *)AGX::Device<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::findOrCreateBlitProgramVariant(*(void *)(*(void *)(v14 + 1464) + 808), (uint64_t)&v82);
  *(void *)&long long v82 = &unk_26F8520C8;
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  long long v85 = 0uLL;
  LOWORD(v82) = 480;
  *((void *)&v82 + 1) = 0x7F7FFFFF00000000;
  memset(__p, 0, 20);
  DWORD1(v82) = 344065;
  long long v84 = 0uLL;
  long long v40 = *(_OWORD *)(v11 + 416);
  long long v88 = *(_OWORD *)(v11 + 400);
  long long v89 = v40;
  long long v41 = *(_OWORD *)(v11 + 448);
  long long v90 = *(_OWORD *)(v11 + 432);
  long long v91 = v41;
  AGX::SamplerStateEncoderGen4<AGX::HAL200::TextureFormatTable>::SamplerStateFields::SamplerStateFields((unint64_t *)v92, (uint64_t)&v82);
  unsigned int v42 = BlitProgramVariant[420];
  int v74 = *(_DWORD *)(v11 + 144);
  int v75 = v23;
  uint32x2_t v76 = v64;
  int v77 = v65;
  int v78 = 0;
  int v79 = v27;
  do
  {
    IOGPUResourceListAddResource();
    v42 &= ~(1 << __clz(__rbit32(v42)));
  }
  while (v42);
  AGX::BlitDispatchContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::setupSpillBuffer(*(void *)(v14 + 1464), BlitProgramVariant, __src, (__n128 *)v28, 1);
  int v43 = BlitProgramVariant[676];
  int v44 = BlitProgramVariant[677];
  AGX::BlitUSCStateLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes>::emitFragmentProgramVariantArguments((uint64_t)&v71, (void *)(v14 + 1760), v61, (uint64_t)BlitProgramVariant, (uint64_t)&v88, (uint64_t)v73, __src);
  uint64_t v45 = (_DWORD **)MEMORY[0x263F4B1E8];
  long long v82 = v71;
  LODWORD(__p[0]) = v72;
  HIDWORD(__p[0]) = v43 & 0xE6600000 | 0x840200;
  *(_OWORD *)&__p[1] = xmmword_242EA7DC0;
  LODWORD(v84) = 0;
  DWORD1(v84) = v44 & 0x1FFFF;
  if (HIDWORD(v95) <= 1) {
    unsigned int v46 = 17032;
  }
  else {
    unsigned int v46 = 82568;
  }
  *(void *)&long long v85 = v46 | 0x100000000;
  *((void *)&v84 + 1) = 0x8888888800200004;
  uint64_t v47 = *(void *)(v14 + 520);
  uint64_t v48 = v47 + 100;
  if ((unint64_t)(v47 + 100) <= *(void *)(v14 + 512))
  {
    __int32 v50 = v25;
    __int16 v49 = v62;
LABEL_29:
    *(void *)(v14 + 528) = v48;
    goto LABEL_30;
  }
  int v60 = AGX::DataBufferAllocator<34ul>::growNoInline(v61, 14, 0);
  __int32 v50 = v25;
  __int16 v49 = v62;
  uint64_t v47 = *(void *)(v14 + 520);
  if (v60)
  {
    uint64_t v48 = v47 + 100;
    if ((unint64_t)(v47 + 100) > *(void *)(v14 + 512)) {
      abort();
    }
    goto LABEL_29;
  }
LABEL_30:
  uint64_t v51 = *(void *)(v14 + 536) + v47;
  *(void *)(v14 + 520) = v47 + 100;
  int v52 = AGX::ISPPFEncoderGen2<AGX::HAL200::Encoders>::PrimitiveBlock::emit(&v82, v47, v51, (uint64_t)&v67);
  uint64_t v53 = v70;
  *(void *)uint64_t v70 = 0x100000100000;
  *(_DWORD *)(v53 + 8) = *(unsigned __int16 *)(v53 + 10) << 16;
  uint64_t v54 = v70;
  LODWORD(v53) = ((v103 + 2 * v50 - 1) & -(int)v103) << 8;
  *(_WORD *)(v70 + 10) = v53;
  *(_DWORD *)(v54 + 12) = ((v53 + 0x100000) >> 16) | 0x10000000;
  *(_DWORD *)(v54 + 16) = 0;
  LODWORD(v53) = (unsigned __int16)(((WORD2(v103) + 2 * v49 - 1) & -WORD2(v103)) + 4096);
  uint64_t v55 = v70;
  unsigned int v56 = v68;
  *(_DWORD *)(v70 + 20) = 0x100000;
  *(_DWORD *)(v55 + 24) = v53;
  *(_DWORD *)(v55 + 28) = *(unsigned __int16 *)(v55 + 30) << 16;
  *unsigned int v56 = 2130706432;
  v56[v67] = 2130706432;
  v56[2 * v67] = 2130706432;
  v56[3 * v67] = 2130706432;
  *unsigned int v69 = *v69 & 0xFFFFFF80 | 0x40;
  *unsigned int v69 = *v69 & 0xFFFF80FF | 0x4100;
  *unsigned int v69 = *v69 & 0xFF80FFFF | 0x420000;
  unint64_t v57 = v80;
  AGX::BlitDispatchContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::emitFast2DControlStream(v14, (uint64_t)v80, v52, v58);
  if ((*v63 & 2) != 0) {
    *((unsigned char *)v57 + 773) = 1;
  }
  AGX::BlitDispatchContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::endFast2DHardwareCommand(v14, v81, (uint64_t)v57);
  if (**v45) {
    IOGPUDeviceTraceEvent();
  }
  free(v108);
  if (v107) {

  }
  return AGX::Framebuffer<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::~Framebuffer((uint64_t)__src);
}

void sub_242A2FDAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *__p,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  AGX::FramebufferGen3_2<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::~FramebufferGen3_2((uint64_t)&a66);
  _Unwind_Resume(a1);
}

void AGX::BlitDispatchContextGen2<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::blitCDMSparseASTCLowMips(uint64_t a1, uint64_t *a2, uint64_t a3, int a4, unsigned int a5, uint64_t *a6, uint64_t a7, int a8, unsigned int a9)
{
  v66[3] = *MEMORY[0x263EF8340];
  (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 32))(a1, a7);
  uint64_t v41 = 0;
  uint64_t v40 = AGX::BlitDispatchContextGen2<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::CalcLowASTCMipParams(a7, a8, a9, (unsigned int *)&v41 + 1);
  uint64_t v17 = AGX::BlitDispatchContextGen2<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::CalcLowASTCMipParams(a3, a4, a5, (unsigned int *)&v41);
  uint64_t v21 = *a2;
  uint64_t v22 = *a6;
  int v24 = v41;
  int v23 = HIDWORD(v41);
  if (HIDWORD(v41)) {
    int v25 = HIDWORD(v41);
  }
  else {
    int v25 = v41;
  }
  if (!*(void *)(a1 + 1800)) {
    v18.n128_f64[0] = AGX::BlitDispatchContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::endPreviousBlitCommand(a1, 0, v18, v19, v20);
  }
  if (*(_DWORD *)*MEMORY[0x263F4B1E8]) {
    IOGPUDeviceTraceEvent();
  }
  if (*(_WORD *)(a1 + 6616))
  {
    __int16 v26 = *(unint64_t **)(a1 + 776);
    if ((unint64_t)v26 + 4 > *(void *)(a1 + 768))
    {
      int v39 = AGX::DataBufferAllocator<34ul>::growNoInline(a1 + 24, 22, 0);
      int v27 = *(unint64_t **)(a1 + 776);
      if (v39)
      {
        if ((unint64_t)v27 + 4 > *(void *)(a1 + 768)) {
          abort();
        }
        *(void *)(a1 + 784) = (char *)v27 + 4;
        unint64_t *v26 = __ROR8__((char *)v27 + *(void *)(a1 + 792), 32) & 0xFFFFFFFF0000FFFFLL | 0x20000000;
        int v27 = *(unint64_t **)(a1 + 776);
      }
    }
    else
    {
      *(void *)(a1 + 784) = (char *)v26 + 4;
      int v27 = v26;
    }
    *(_DWORD *)int v27 = 1610613088;
    *(void *)(a1 + 776) = (char *)v27 + 4;
    *(_WORD *)(a1 + 4304) = 0;
    *(_WORD *)(a1 + 6616) = 0;
  }
  uint64_t v51 = 0;
  (*(void (**)(uint64_t, uint64_t *, uint64_t, __n128))(*(void *)a1 + 16))(a1, &v51, 1, v18);
  v66[1] = 0;
  v66[2] = 0;
  v65[2] = 0;
  v66[0] = v21;
  v65[0] = v22;
  v65[1] = 0;
  AGX::BlitDispatchContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::bindComputeResources(a1, (uint64_t)v66, v65);
  if (!*(void *)(*(void *)(a1 + 1504) + 520))
  {
    AGX::BlitDispatchContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::endPreviousBlitCommand(a1, 0, v28, v29, v30);
    AGX::BlitDispatchContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::beginComputePass(a1, 0);
    AGX::BlitDispatchContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::bindComputeResources(a1, (uint64_t)v66, v65);
    if (!*(void *)(*(void *)(a1 + 1504) + 520))
    {
      uint64_t v31 = *(void *)(a1 + 1560) - *(void *)(a1 + 1576);
      *(_DWORD *)(v31 + 12) = 1;
      if ((*(unsigned char *)(v31 + 8) & 4) != 0) {
        **(unsigned char **)(*(void *)(a1 + 8) + 688) = 1;
      }
    }
  }
  int v43 = 16;
  uint64_t v45 = 0;
  uint64_t v46 = 0;
  long long __p = 0;
  unsigned int v42 = &unk_26F852108;
  long long v47 = 0u;
  long long v48 = 0u;
  uint64_t v49 = 0;
  if (v23) {
    int v32 = 1052421;
  }
  else {
    int v32 = 3845;
  }
  int v50 = v32 | ((v24 != 0) << 21);
  uint64_t BlitProgramVariant = (_DWORD *)AGX::Device<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::findOrCreateBlitProgramVariant(*(void *)(*(void *)(a1 + 1464) + 808), (uint64_t)&v42);
  if (AGX::SpillInfoGen3<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::checkSpillParamsForCompute(a1 + 1808, BlitProgramVariant[99], BlitProgramVariant[102], BlitProgramVariant[107], 4 * BlitProgramVariant[668], 0, 0))AGX::BlitDispatchContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::bindComputeUSCSpillBuffer(a1); {
  uint64_t v56 = 0;
  }
  uint64_t v57 = 0;
  uint64_t v53 = 0;
  memset(v52, 0, sizeof(v52));
  unsigned int v34 = BlitProgramVariant[420];
  do
  {
    IOGPUResourceListAddResource();
    v34 &= ~(1 << __clz(__rbit32(v34)));
  }
  while (v34);
  *(void *)&long long v35 = 0x100000001;
  *((void *)&v35 + 1) = 0x100000001;
  v54[0] = xmmword_242EA7E10;
  v54[1] = v35;
  uint64_t v62 = v40;
  uint64_t v63 = v17;
  int v61 = 0;
  int v55 = 1;
  int v58 = 1;
  int v60 = 0;
  int v59 = v25;
  int v64 = 4 * BlitProgramVariant[668];
  AGX::BlitUSCStateLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes>::emitComputeProgramVariantArguments((char ***)(a1 + 1760), (void *)(a1 + 24), (uint64_t)BlitProgramVariant, (uint64_t)v52, (uint64_t)v54, v64, 1, 1, (_DWORD *)(a1 + 1532));
  long long v36 = *(unint64_t **)(a1 + 776);
  if ((unint64_t)v36 + 4 > *(void *)(a1 + 768))
  {
    int v38 = AGX::DataBufferAllocator<34ul>::growNoInline(a1 + 24, 22, 0);
    long long v37 = *(unint64_t **)(a1 + 776);
    if (v38)
    {
      if ((unint64_t)v37 + 4 > *(void *)(a1 + 768)) {
        abort();
      }
      *(void *)(a1 + 784) = (char *)v37 + 4;
      unint64_t *v36 = __ROR8__((char *)v37 + *(void *)(a1 + 792), 32) & 0xFFFFFFFF0000FFFFLL | 0x20000000;
      long long v37 = *(unint64_t **)(a1 + 776);
    }
  }
  else
  {
    *(void *)(a1 + 784) = (char *)v36 + 4;
    long long v37 = v36;
  }
  *(_DWORD *)long long v37 = 1610613088;
  *(void *)(a1 + 776) = (char *)v37 + 4;
  if (*(_DWORD *)*MEMORY[0x263F4B1E8]) {
    IOGPUDeviceTraceEvent();
  }
  unsigned int v42 = &unk_26F852148;
  if (__p)
  {
    uint64_t v45 = __p;
    operator delete(__p);
  }
}

void sub_242A30334(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  if (!__p) {
    _Unwind_Resume(exception_object);
  }
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t AGX::BlitDispatchContextGen2<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::CalcLowASTCMipParams(uint64_t a1, int a2, unsigned int a3, unsigned int *a4)
{
  if (*(_DWORD *)(a1 + 236))
  {
    unsigned int MipInTail = AGX::TextureGen4<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::firstMipInTail(a1, 0);
    unsigned int v9 = AGX::TextureGen4<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::firstMipInTail(a1, 1);
    unsigned int v10 = 0;
    unsigned int v11 = *(_DWORD *)(a1 + 128);
    unsigned int v12 = *(_DWORD *)(a1 + 132);
    unsigned int v13 = *(_DWORD *)(a1 + 216);
    unsigned int v14 = *(_DWORD *)(a1 + 220);
    unsigned int v15 = *(_DWORD *)(a1 + 112) * *(unsigned __int8 *)(*(void *)(a1 + 208) + 88);
    *a4 = 0;
    unsigned int v16 = a3 - MipInTail;
    if (a3 > MipInTail)
    {
      unsigned int v10 = 0;
      unsigned int v17 = (1 << -(char)__clz((v12 + v14 - 1) / v14 - 1)) >> MipInTail;
      unsigned int v18 = (1 << -(char)__clz((v11 + v13 - 1) / v13 - 1)) >> MipInTail;
      do
      {
        v10 += (v18 * v15 * v17 + 127) & 0xFFFFFF80;
        v18 >>= v18 > 1;
        v17 >>= v17 > 1;
        --v16;
      }
      while (v16);
      *a4 = v10;
    }
    long long v34 = 0u;
    long long v35 = 0u;
    memset(v33, 0, sizeof(v33));
    unsigned int v19 = *(_DWORD *)(a1 + 236);
    agxCalcSparseInputs(v19, v11, v12, v13, v14, v15, *(_DWORD *)(a1 + 64), MipInTail, v9, a2, MipInTail, *(unsigned char *)(a1 + 316), 0, 0, 0, 0, (uint64_t)v33);
    if (v10 <= v19)
    {
      int v20 = DWORD2(v33[1]);
    }
    else
    {
      int v20 = DWORD2(v33[1]) + v10 / v19;
      *a4 = v10 & (v19 - 1);
    }
    int v22 = HIDWORD(v33[1]);
    int v23 = v33[2];
    int v24 = LODWORD(v33[2]) | HIDWORD(v33[1]);
    if (BYTE9(v34))
    {
      if (*(void *)((char *)&v33[1] + 12))
      {
        int v25 = 0;
        int v24 = 0;
        BOOL v26 = HIDWORD(v33[1]) != 0;
        BOOL v27 = LODWORD(v33[2]) != 0;
        int v28 = 1;
        do
        {
          --v22;
          if (v26) {
            v24 |= (v28 & v33[1]) << v25;
          }
          else {
            int v22 = 0;
          }
          if (v26) {
            ++v25;
          }
          --v23;
          if (v27) {
            v24 |= (v28 & DWORD1(v33[1])) << v25;
          }
          else {
            int v23 = 0;
          }
          if (v27) {
            ++v25;
          }
          v28 *= 2;
          --v25;
          BOOL v27 = v23 != 0;
          BOOL v26 = v22 != 0;
        }
        while (v23 | v22);
      }
    }
    else if (*(void *)((char *)&v33[1] + 12))
    {
      int v29 = 0;
      int v24 = 0;
      BOOL v30 = LODWORD(v33[2]) != 0;
      BOOL v31 = HIDWORD(v33[1]) != 0;
      int v32 = 1;
      do
      {
        --v23;
        if (v30) {
          v24 |= (v32 & DWORD1(v33[1])) << v29;
        }
        else {
          int v23 = 0;
        }
        if (v30) {
          ++v29;
        }
        --v22;
        if (v31) {
          v24 |= (v32 & v33[1]) << v29;
        }
        else {
          int v22 = 0;
        }
        if (v31) {
          ++v29;
        }
        v32 *= 2;
        --v29;
        BOOL v31 = v22 != 0;
        BOOL v30 = v23 != 0;
      }
      while (v22 | v23);
    }
    return *(void *)(a1 + 72) + 4 * ((v24 + v20) | ((v24 + v20) >> 8 << 9));
  }
  else
  {
    *a4 = 0;
    return AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getGPUVirtualAddress(a1, 0, a3, 0, 0);
  }
}

BOOL agxCalcSparseInputs(unsigned int a1, unsigned int a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, unsigned int a9, int a10, unsigned int a11, char a12, unsigned int a13, unsigned int a14, int a15, int a16, uint64_t a17)
{
  uint64_t v87 = *MEMORY[0x263EF8340];
  unsigned int v17 = a4 - 1;
  unsigned int v18 = (a4 - 1 + a2) / a4;
  unsigned int v19 = a5 - 1;
  unsigned int v20 = 32 - __clz(a1 / a6 - 1);
  if (a1 / a6 >= 2) {
    unsigned int v21 = v20;
  }
  else {
    unsigned int v21 = 0;
  }
  unsigned int v22 = (v21 + 1) >> 1;
  unsigned int v23 = (a5 - 1 + a3) / a5;
  if (v18 < 2) {
    unsigned int v24 = 0;
  }
  else {
    unsigned int v24 = 32 - __clz(~(-1 << -(char)__clz(v18 - 1)));
  }
  char v25 = v21 - v22;
  unsigned int v27 = a13;
  unsigned int v26 = a14;
  if (v23 < 2) {
    unsigned int v28 = 0;
  }
  else {
    unsigned int v28 = 32 - __clz(~(-1 << -(char)__clz(v23 - 1)));
  }
  int v29 = 0;
  uint64_t v30 = 0;
  v86[0] = 0;
  if (a8 + 1 > 1) {
    uint64_t v31 = a8 + 1;
  }
  else {
    uint64_t v31 = 1;
  }
  do
  {
    int v32 = v24 - v30;
    if (v24 < v30) {
      int v32 = 0;
    }
    int v33 = v28 - v30;
    if (v28 < v30) {
      int v33 = 0;
    }
    unsigned int v34 = v32 + v33;
    BOOL v35 = v34 >= v21;
    char v36 = v34 - v21;
    if (!v35) {
      char v36 = 0;
    }
    v29 += 1 << v36;
    v86[++v30] = v29;
  }
  while (v31 != v30);
  unsigned int v37 = 0;
  if (a7 >= 2)
  {
    unsigned int v38 = a7 - a8;
    if (a7 > a8)
    {
      if (v38 >= 8)
      {
        unsigned int v40 = v38 & 0xFFFFFFF8;
        int32x4_t v41 = vaddq_s32(vdupq_n_s32(a8), (int32x4_t)xmmword_242EA7E20);
        uint32x4_t v42 = (uint32x4_t)vdupq_n_s32(v24);
        uint32x4_t v43 = (uint32x4_t)vdupq_n_s32(v28);
        uint64x2_t v44 = (uint64x2_t)vdupq_n_s64(a6);
        int32x4_t v45 = 0uLL;
        v46.i64[0] = 0x400000004;
        v46.i64[1] = 0x400000004;
        v47.i64[0] = 0x7F0000007FLL;
        v47.i64[1] = 0x7F0000007FLL;
        v48.i64[0] = 0x800000008;
        v48.i64[1] = 0x800000008;
        unsigned int v49 = v38 & 0xFFFFFFF8;
        int32x4_t v50 = 0uLL;
        do
        {
          uint32x4_t v51 = (uint32x4_t)vaddq_s32(v41, v46);
          int32x4_t v52 = vaddq_s32((int32x4_t)vqsubq_u32(v42, (uint32x4_t)v41), (int32x4_t)vqsubq_u32(v43, (uint32x4_t)v41));
          int32x4_t v53 = vaddq_s32((int32x4_t)vqsubq_u32(v42, v51), (int32x4_t)vqsubq_u32(v43, v51));
          v54.i64[0] = v52.u32[0];
          v54.i64[1] = v52.u32[1];
          uint64x2_t v55 = v54;
          v54.i64[0] = v52.u32[2];
          v54.i64[1] = v52.u32[3];
          uint64x2_t v56 = v54;
          v54.i64[0] = v53.u32[0];
          v54.i64[1] = v53.u32[1];
          uint64x2_t v57 = v54;
          v54.i64[0] = v53.u32[2];
          v54.i64[1] = v53.u32[3];
          int32x4_t v45 = vaddq_s32((int32x4_t)(*(_OWORD *)&vaddq_s32(vuzp1q_s32((int32x4_t)vshlq_u64(v44, v55), (int32x4_t)vshlq_u64(v44, v56)), v47) & __PAIR128__(0xFFFFFF80FFFFFF80, 0xFFFFFF80FFFFFF80)), v45);
          int32x4_t v50 = vaddq_s32((int32x4_t)(*(_OWORD *)&vaddq_s32(vuzp1q_s32((int32x4_t)vshlq_u64(v44, v57), (int32x4_t)vshlq_u64(v44, v54)), v47) & __PAIR128__(0xFFFFFF80FFFFFF80, 0xFFFFFF80FFFFFF80)), v50);
          int32x4_t v41 = vaddq_s32(v41, v48);
          v49 -= 8;
        }
        while (v49);
        unsigned int v37 = vaddvq_s32(vaddq_s32(v50, v45));
        if (v38 == v40) {
          goto LABEL_31;
        }
        unsigned int v39 = v40 + a8;
      }
      else
      {
        unsigned int v37 = 0;
        unsigned int v39 = a8;
      }
      do
      {
        char v58 = v24 - v39;
        if (v24 < v39) {
          char v58 = 0;
        }
        char v59 = v28 - v39;
        if (v28 < v39) {
          char v59 = 0;
        }
        v37 += (((unint64_t)a6 << (v58 + v59)) + 127) & 0xFFFFFF80;
        ++v39;
      }
      while (a7 != v39);
    }
  }
LABEL_31:
  if (a11 >= a8) {
    unsigned int v60 = a8;
  }
  else {
    unsigned int v60 = a11;
  }
  if (a7 <= 1) {
    unsigned int v61 = 1;
  }
  else {
    unsigned int v61 = a8 + 1;
  }
  uint64_t v62 = v61;
  unsigned int v63 = (v86[v62] + 255) & 0xFFFFFF00;
  v86[v62] = v63;
  unsigned int v64 = a2 >> v60;
  unsigned int v65 = a3 >> v60;
  if ((a12 & 1) == 0)
  {
    if (v64 && (unsigned int v68 = (v17 + v64) / a4, v68 >= 2))
    {
      unsigned int v66 = 32 - __clz(~(-1 << -(char)__clz(v68 - 1)));
      if (!v65) {
        goto LABEL_51;
      }
    }
    else
    {
      unsigned int v66 = 0;
      if (!v65) {
        goto LABEL_51;
      }
    }
    unsigned int v69 = (v19 + v65) / a5;
    if (v69 >= 2)
    {
      unsigned int v67 = 32 - __clz(~(-1 << -(char)__clz(v69 - 1)));
      goto LABEL_52;
    }
LABEL_51:
    unsigned int v67 = 0;
    goto LABEL_52;
  }
  if (v24 >= v60) {
    unsigned int v66 = v24 - v60;
  }
  else {
    unsigned int v66 = 0;
  }
  unsigned int v67 = v28 - v60;
  if (v28 < v60) {
    unsigned int v67 = 0;
  }
LABEL_52:
  unsigned int v70 = 1 << v66;
  unsigned int v71 = 1 << v67;
  if (1 << v25 >= (1 << v67) || v70 >> v22)
  {
    if (v71 >> v25)
    {
      unsigned int v73 = (v21 + 1) >> 1;
      unsigned int v74 = v21 - v22;
    }
    else
    {
      unsigned int v73 = (v21 + 1) >> 1;
      unsigned int v74 = v21 - v22;
      if (1 << v22 < v70)
      {
        if (v67) {
          unsigned int v75 = __clz(~(-1 << -(char)__clz(v71 - 1))) - 32;
        }
        else {
          unsigned int v75 = 0;
        }
        unsigned int v73 = v75 + v21;
        unsigned int v74 = -v75;
      }
    }
  }
  else
  {
    unsigned int v72 = 32 - __clz(~(-1 << -(char)__clz(v70 - 1)));
    if (v66) {
      unsigned int v73 = v72;
    }
    else {
      unsigned int v73 = 0;
    }
    unsigned int v74 = v21 - v73;
  }
  if (v66 >= v73) {
    unsigned int v76 = v66 - v73;
  }
  else {
    unsigned int v76 = 0;
  }
  BOOL v35 = v67 >= v74;
  unsigned int v77 = v67 - v74;
  if (!v35) {
    unsigned int v77 = 0;
  }
  *(_DWORD *)(a17 + 28) = v76;
  *(_DWORD *)(a17 + 32) = v77;
  BOOL result = a8 <= a11 && v37 > a1;
  if (result) {
    *(_DWORD *)(a17 + 28) = v76 + 1;
  }
  *(unsigned char *)(a17 + 57) = v74 == v73;
  *(_DWORD *)(a17 + 36) = v73;
  *(_DWORD *)(a17 + 40) = v74;
  *(_DWORD *)(a17 + 24) = v86[v60] + v63 * a10;
  *(unsigned char *)(a17 + 53) = a6;
  if ((a12 & 1) == 0)
  {
    if (v64)
    {
      unsigned int v70 = (v17 + v64) / a4;
      if (v65)
      {
LABEL_80:
        unsigned int v71 = (v19 + v65) / a5;
        goto LABEL_83;
      }
    }
    else
    {
      unsigned int v70 = 1;
      if (v65) {
        goto LABEL_80;
      }
    }
    unsigned int v71 = 1;
  }
LABEL_83:
  unsigned int v80 = ((1 << v73) + v70 - 1) >> v73;
  unsigned int v81 = ((1 << v74) + v71 - 1) >> v74;
  if (v60 >= a9)
  {
    unsigned int v26 = 0;
    unsigned int v27 = 0;
  }
  else
  {
    unsigned int v82 = a15 + a13;
    unsigned int v83 = a16 + a14;
    if (v22 != v73)
    {
      unsigned int v27 = a13 << v22 >> v73;
      unsigned int v26 = a14 << v25 >> v74;
      unsigned int v82 = ((v82 << v22) + (1 << v73) - 1) >> v73;
      unsigned int v83 = ((v83 << v25) + (1 << v74) - 1) >> v74;
    }
    if (v27 >= v80) {
      unsigned int v27 = ((1 << v73) + v70 - 1) >> v73;
    }
    if (v26 >= v81) {
      unsigned int v26 = ((1 << v74) + v71 - 1) >> v74;
    }
    if (v82 >= v80) {
      unsigned int v84 = ((1 << v73) + v70 - 1) >> v73;
    }
    else {
      unsigned int v84 = v82;
    }
    if (v83 >= v81) {
      unsigned int v85 = ((1 << v74) + v71 - 1) >> v74;
    }
    else {
      unsigned int v85 = v83;
    }
    unsigned int v80 = v84 - v27;
    unsigned int v81 = v85 - v26;
  }
  *(_DWORD *)(a17 + 16) = v27;
  *(_DWORD *)(a17 + 20) = v26;
  *(_DWORD *)(a17 + 44) = v80;
  *(_DWORD *)(a17 + 48) = v81;
  if (result) {
    *(_DWORD *)(a17 + 44) = v80 + 1;
  }
  return result;
}

void AGX::BlitDispatchContextGen2<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::sparseTextureIndirect(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, int a5)
{
  uint64_t v66 = *MEMORY[0x263EF8340];
  uint64_t v10 = *(void *)(a2 + 536);
  if (*(_DWORD *)*MEMORY[0x263F4B1E8]) {
    IOGPUDeviceTraceEvent();
  }
  if (*(_WORD *)(a1 + 6616))
  {
    unsigned int v11 = *(unint64_t **)(a1 + 776);
    if ((unint64_t)v11 + 4 > *(void *)(a1 + 768))
    {
      int v39 = AGX::DataBufferAllocator<34ul>::growNoInline(a1 + 24, 22, 0);
      unsigned int v12 = *(unint64_t **)(a1 + 776);
      if (v39)
      {
        if ((unint64_t)v12 + 4 > *(void *)(a1 + 768)) {
          goto LABEL_44;
        }
        *(void *)(a1 + 784) = (char *)v12 + 4;
        unint64_t *v11 = __ROR8__((char *)v12 + *(void *)(a1 + 792), 32) & 0xFFFFFFFF0000FFFFLL | 0x20000000;
        unsigned int v12 = *(unint64_t **)(a1 + 776);
      }
    }
    else
    {
      *(void *)(a1 + 784) = (char *)v11 + 4;
      unsigned int v12 = v11;
    }
    *(_DWORD *)unsigned int v12 = 1610613088;
    *(void *)(a1 + 776) = (char *)v12 + 4;
    *(_WORD *)(a1 + 4304) = 0;
    *(_WORD *)(a1 + 6616) = 0;
  }
  (*(void (**)(uint64_t, void, uint64_t))(*(void *)a1 + 16))(a1, 0, 1);
  *(unsigned char *)(a1 + 1553) = 1;
  uint64_t v64 = a2;
  long long v65 = *(_OWORD *)(v10 + 496);
  AGX::BlitDispatchContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::bindComputeResources(a1, (uint64_t)&v64, 0);
  if (!*(void *)(*(void *)(a1 + 1504) + 520))
  {
    AGX::BlitDispatchContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::endPreviousBlitCommand(a1, 0, v13, v14, v15);
    AGX::BlitDispatchContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::beginComputePass(a1, 0);
    *(unsigned char *)(a1 + 1553) = 1;
    AGX::BlitDispatchContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::bindComputeResources(a1, (uint64_t)&v64, 0);
    if (!*(void *)(*(void *)(a1 + 1504) + 520))
    {
      uint64_t v16 = *(void *)(a1 + 1560) - *(void *)(a1 + 1576);
      *(_DWORD *)(v16 + 12) = 1;
      if ((*(unsigned char *)(v16 + 8) & 4) != 0) {
        **(unsigned char **)(*(void *)(a1 + 8) + 688) = 1;
      }
    }
  }
  if (*(void *)(a1 + 1488)) {
    MTLResourceListAddResource();
  }
  unsigned int v17 = (int *)MEMORY[0x263F4B188];
  IOGPUResourceListAddResource();
  unsigned int v18 = *(_OWORD **)(a1 + 392);
  if (!v18)
  {
    if (!AGX::DataBufferAllocator<34ul>::growNoInline(a1 + 24, 10, 0)) {
      goto LABEL_44;
    }
    unsigned int v18 = *(_OWORD **)(a1 + 392);
  }
  unsigned int v19 = v18 + 5;
  uint64_t v42 = a3;
  uint32x4_t v43 = (void *)(a1 + 24);
  if ((unint64_t)(v18 + 5) <= *(void *)(a1 + 384))
  {
LABEL_15:
    int v20 = a5;
    *(void *)(a1 + 400) = v19;
    goto LABEL_16;
  }
  int v36 = AGX::DataBufferAllocator<34ul>::growNoInline(a1 + 24, 10, 0);
  unsigned int v18 = *(_OWORD **)(a1 + 392);
  if (v36)
  {
    unsigned int v19 = v18 + 5;
    if ((unint64_t)(v18 + 5) <= *(void *)(a1 + 384)) {
      goto LABEL_15;
    }
LABEL_44:
    abort();
  }
  int v20 = a5;
LABEL_16:
  uint64_t v21 = *(void *)(a1 + 408);
  *(void *)(a1 + 392) = v18 + 5;
  v18[3] = 0u;
  v18[4] = 0u;
  v18[1] = 0u;
  v18[2] = 0u;
  *unsigned int v18 = 0u;
  int v63 = 0;
  long long v56 = 0u;
  long long v57 = 0u;
  int v58 = 0;
  uint64_t v60 = 0;
  uint64_t v61 = 0;
  uint64_t v59 = 0;
  uint64_t v51 = 0;
  memset(v50, 0, sizeof(v50));
  int v45 = 17;
  int32x4_t v47 = 0;
  uint64_t v48 = 0;
  long long __p = 0;
  uint64x2_t v44 = &unk_26F852208;
  int v49 = 1;
  uint64_t BlitProgramVariant = (_DWORD *)AGX::Device<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::findOrCreateBlitProgramVariant(*(void *)(*(void *)(a1 + 1464) + 808), (uint64_t)&v44);
  uint64_t v23 = *(void *)(a1 + 168);
  uint64_t v24 = v23 + 80;
  unsigned int v41 = a4;
  if ((unint64_t)(v23 + 80) > *(void *)(a1 + 160))
  {
    int v37 = AGX::DataBufferAllocator<34ul>::growNoInline(v43, 3, 0);
    uint64_t v23 = *(void *)(a1 + 168);
    if (!v37) {
      goto LABEL_18;
    }
    uint64_t v24 = v23 + 80;
    if ((unint64_t)(v23 + 80) > *(void *)(a1 + 160)) {
      abort();
    }
  }
  *(void *)(a1 + 176) = v24;
LABEL_18:
  unsigned int v40 = (char *)v18 + v21;
  uint64_t v25 = *(void *)(a1 + 184) + v23;
  *(void *)(a1 + 168) = v23 + 80;
  uint64_t v26 = *(void *)(v10 + 128);
  uint64_t v27 = *(void *)(v10 + 216);
  int MipInTail = AGX::TextureGen4<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::firstMipInTail(v10, 0);
  int v29 = AGX::TextureGen4<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::firstMipInTail(v10, 1);
  int v30 = AGX::TextureGen4<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::tailSize(v10, 0);
  *(_DWORD *)uint64_t v23 = *(_DWORD *)(v10 + 236);
  *(void *)(v23 + 4) = v26;
  *(_DWORD *)(v23 + 12) = *(_DWORD *)(v10 + 136);
  *(void *)(v23 + 16) = v27;
  *(_DWORD *)(v23 + 24) = *(_DWORD *)(v10 + 112) * *(unsigned __int8 *)(*(void *)(v10 + 208) + 88);
  *(_DWORD *)(v23 + 28) = *(_DWORD *)(v10 + 64);
  *(_DWORD *)(v23 + 48) = *(unsigned __int8 *)(v10 + 316);
  *(_DWORD *)(v23 + 52) = (unint64_t)*(unsigned __int8 *)(v10 + 381) << 8 == 768;
  *(_DWORD *)(v23 + 56) = 1;
  *(_DWORD *)(v23 + 32) = MipInTail;
  *(_DWORD *)(v23 + 36) = v29;
  *(_DWORD *)(v23 + 40) = v30;
  *(_DWORD *)(v23 + 44) = v20;
  *(void *)(v23 + 72) = *(void *)(v10 + 72);
  *(void *)(v23 + 64) = *(void *)(v10 + 520);
  unsigned int v31 = BlitProgramVariant[420];
  do
  {
    IOGPUResourceListAddResource();
    v31 &= ~(1 << __clz(__rbit32(v31)));
  }
  while (v31);
  if (AGX::SpillInfoGen3<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::checkSpillParamsForCompute(a1 + 1808, BlitProgramVariant[99], BlitProgramVariant[102], BlitProgramVariant[107], 4 * BlitProgramVariant[668], 0, 0))AGX::BlitDispatchContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::bindComputeUSCSpillBuffer(a1); {
  int32x4_t v52 = v40;
  }
  uint64_t v53 = v25;
  uint64_t v32 = *(void *)(a1 + 1936);
  uint64_t v54 = *(void *)(v42 + *v17 + 72) + v41;
  uint64_t v55 = v32;
  long long v56 = xmmword_242EA7E30;
  long long v57 = xmmword_242EA7E40;
  int v62 = 0;
  int v58 = 1;
  int v63 = 4100;
  AGX::BlitUSCStateLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes>::emitComputeProgramVariantArguments((char ***)(a1 + 1760), v43, (uint64_t)BlitProgramVariant, (uint64_t)v50, (uint64_t)&v56, 4100, 1, 1, (_DWORD *)(a1 + 1532));
  int v33 = (_DWORD **)MEMORY[0x263F4B1E8];
  unsigned int v34 = *(unint64_t **)(a1 + 776);
  if ((unint64_t)v34 + 4 > *(void *)(a1 + 768))
  {
    int v38 = AGX::DataBufferAllocator<34ul>::growNoInline(v43, 22, 0);
    BOOL v35 = *(unint64_t **)(a1 + 776);
    if (v38)
    {
      if ((unint64_t)v35 + 4 > *(void *)(a1 + 768)) {
        abort();
      }
      *(void *)(a1 + 784) = (char *)v35 + 4;
      unint64_t *v34 = __ROR8__((char *)v35 + *(void *)(a1 + 792), 32) & 0xFFFFFFFF0000FFFFLL | 0x20000000;
      BOOL v35 = *(unint64_t **)(a1 + 776);
    }
  }
  else
  {
    *(void *)(a1 + 784) = (char *)v34 + 4;
    BOOL v35 = v34;
  }
  *(_DWORD *)BOOL v35 = 1610613088;
  *(void *)(a1 + 776) = (char *)v35 + 4;
  *(_WORD *)(a1 + 6712) = 257;
  if (**v33) {
    IOGPUDeviceTraceEvent();
  }
  uint64x2_t v44 = &unk_26F852248;
  if (__p)
  {
    int32x4_t v47 = __p;
    operator delete(__p);
  }
}

void sub_242A3124C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18)
{
  if (!__p) {
    _Unwind_Resume(exception_object);
  }
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

void ProgramKey<(_AGCStreamToken)17,(AGX::DriverShaderCompilationMode)1>::serialize(uint64_t a1, void *a2, void *a3)
{
  int v6 = *(int **)(a1 + 16);
  *(void *)(a1 + 24) = v6;
  int v7 = *(unsigned __int8 *)(a1 + 8) | 0x100;
  unint64_t v8 = *(void *)(a1 + 32);
  if ((unint64_t)v6 >= v8)
  {
    uint64_t v10 = v8 - (void)v6;
    uint64_t v11 = v10 >> 1;
    if ((unint64_t)(v10 >> 1) <= 1) {
      uint64_t v11 = 1;
    }
    BOOL v12 = (unint64_t)v10 >= 0x7FFFFFFFFFFFFFFCLL;
    unint64_t v13 = 0x3FFFFFFFFFFFFFFFLL;
    if (!v12) {
      unint64_t v13 = v11;
    }
    if (v13 >> 62) {
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
    uint64_t v14 = v13;
    double v15 = operator new(4 * v13);
    uint64_t v16 = &v15[v14];
    _DWORD *v15 = v7;
    unsigned int v9 = v15 + 1;
    *(void *)(a1 + 16) = v15;
    *(void *)(a1 + 24) = v15 + 1;
    *(void *)(a1 + 32) = v16;
    if (v6) {
      operator delete(v6);
    }
  }
  else
  {
    *int v6 = v7;
    unsigned int v9 = v6 + 1;
  }
  *(void *)(a1 + 24) = v9;
  ProgramKey<(_AGCStreamToken)8,(AGX::DriverShaderCompilationMode)0>::finalizeStream((void *)a1);
  *a2 = *(void *)(a1 + 16);
  *a3 = *(void *)(a1 + 24) - *(void *)(a1 + 16);
}

void AGX::BlitDispatchContextGen2<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::sparseTexture(uint32x2_t *a1, uint64_t a2, int *a3, uint64_t a4, unsigned int a5, int a6, int a7, uint64_t a8, int a9, uint64_t a10, uint64_t a11, unsigned int a12, unsigned int a13)
{
  uint64_t v16 = a4;
  if (a1[838]) {
    goto LABEL_9;
  }
  uint64_t v20 = *(void *)(*(void *)&a1[183] + 808);
  if (*(void *)(v20 + 7168) < 0x610uLL)
  {
    uint64_t v23 = 0;
    goto LABEL_8;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(v20 + 7180));
  int v21 = *(_DWORD *)(v20 + 7176);
  if (!v21)
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(v20 + 7180));
    goto LABEL_7;
  }
  unsigned int v22 = v21 - 1;
  *(_DWORD *)(v20 + 7176) = v22;
  uint64_t v23 = *(_WORD **)(v20 + 8 * v22 + 7184);
  os_unfair_lock_unlock((os_unfair_lock_t)(v20 + 7180));
  if (!v23)
  {
LABEL_7:
    uint64_t v23 = malloc_type_calloc(*(void *)(v20 + 7168), 1uLL, 0xC8454162uLL);
    goto LABEL_8;
  }
  bzero(v23, *(void *)(v20 + 7168));
LABEL_8:
  v23[772] = 0;
  v23[384] = 0;
  a1[838] = (uint32x2_t)v23;
  uint64_t v16 = a4;
LABEL_9:
  int v63 = a1;
  uint64_t v72 = a8;
  int v71 = a7;
  if (a8) {
    int v24 = 1;
  }
  else {
    int v24 = a7;
  }
  int v64 = a6;
  if (a6 == 1) {
    int v25 = 3;
  }
  else {
    int v25 = 2;
  }
  if (v24) {
    int v26 = 1;
  }
  else {
    int v26 = v25;
  }
  if (a10) {
    int v27 = 4;
  }
  else {
    int v27 = v26;
  }
  uint64_t v28 = *(void *)(a2 + 536);
  unsigned int MipInTail = AGX::TextureGen4<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::firstMipInTail(v28, 1);
  if (MipInTail < v16) {
    return;
  }
  uint64_t v30 = v16;
  if (*(_DWORD *)(v28 + 64) <= v16) {
    return;
  }
  unsigned int v31 = a12;
  unsigned int v61 = MipInTail;
  if ((unint64_t)*(unsigned __int8 *)(v28 + 381) << 8 == 768)
  {
    uint64_t v32 = a3;
    if (MipInTail == v16) {
      int v33 = 0;
    }
    else {
      int v33 = a3[4];
    }
    if (MipInTail == v16)
    {
      uint64_t v34 = 0;
      BOOL v35 = (int *)a11;
      if (*(_DWORD *)(v28 + 136) >> (*(unsigned char *)(v28 + 144) + v16) <= 1u) {
        int v36 = 1;
      }
      else {
        int v36 = *(_DWORD *)(v28 + 136) >> (*(unsigned char *)(v28 + 144) + v16);
      }
      int v37 = v27;
      uint64_t v38 = v72;
      int v39 = v71;
      uint64_t v40 = a2;
      int v41 = v64;
      uint64_t v42 = v63;
      uint64_t v43 = a10;
      int v44 = a9;
      uint64_t v45 = v16;
LABEL_37:
      int v47 = 0;
      int v68 = v37;
      int v66 = v36;
      do
      {
        int v60 = v37;
        uint64_t v48 = v45;
        uint64_t v49 = v38;
        uint64_t v50 = v34;
        AGX::BlitDispatchContextGen2<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::sparseTextureImpl(v42, v40, v32, v45, v33 + v47, v41, v39, v38, v44, v43, v35, v31, v34 + v47, v60, v47, 0);
        BOOL v35 = (int *)a11;
        uint64_t v43 = a10;
        uint64_t v45 = v48;
        uint64_t v38 = v49;
        uint64_t v34 = v50;
        int v37 = v68;
        int v44 = a9;
        unsigned int v31 = a12;
        ++v47;
      }
      while (v66 != v47);
      goto LABEL_39;
    }
    int v36 = a3[10];
    uint64_t v46 = a2;
    if (a10) {
      uint64_t v34 = *(unsigned int *)(a11 + 16);
    }
    else {
      uint64_t v34 = 0;
    }
    uint64_t v38 = v72;
    int v39 = a7;
    int v41 = v64;
    uint64_t v32 = a3;
    uint64_t v40 = v46;
    uint64_t v42 = v63;
    BOOL v35 = (int *)a11;
    uint64_t v43 = a10;
    int v37 = v27;
    int v44 = a9;
    uint64_t v45 = v30;
    if (v36) {
      goto LABEL_37;
    }
  }
  else
  {
    AGX::BlitDispatchContextGen2<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::sparseTextureImpl(v63, a2, a3, v16, a5, v64, a7, v72, a9, a10, (int *)a11, a12, a13, v27, 0, 0);
    uint64_t v40 = a2;
    int v37 = v27;
    LODWORD(v45) = v16;
  }
LABEL_39:
  if (v61 == v45)
  {
    uint64_t v51 = v40;
    int v52 = v45;
    uint64_t v53 = *(void *)(v40 + 536);
    unsigned int v54 = AGX::TextureGen4<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::firstMipInTail(v53, 0);
    unsigned int v55 = v52 + 1;
    unsigned int v67 = v54;
    if (v54 < *(_DWORD *)(v53 + 64) && v55 <= v54)
    {
      uint64_t v70 = v51;
      do
      {
        uint64_t v57 = *(void *)(v51 + 536);
        if ((unint64_t)*(unsigned __int8 *)(v57 + 381) << 8 == 768)
        {
          unsigned int v58 = 0;
          unsigned int v59 = *(_DWORD *)(v57 + 136) >> (*(_DWORD *)(v57 + 144) + v55);
          if (v59 <= 1) {
            unsigned int v59 = 1;
          }
          unsigned int v69 = v59;
          do
          {
            AGX::BlitDispatchContextGen2<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::sparseTextureImpl(v63, v70, a3, v55, v58, v64, v71, v72, a9, a10, (int *)a11, v55, a13, v37, v58, 1);
            ++v58;
          }
          while (v69 != v58);
        }
        else
        {
          AGX::BlitDispatchContextGen2<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::sparseTextureImpl(v63, v51, a3, v55, a5, v64, v71, v72, a9, a10, (int *)a11, v55, a13, v37, 0, 1);
        }
        ++v55;
        uint64_t v51 = v70;
      }
      while (v55 <= v67);
    }
  }
}

void AGX::BlitDispatchContextGen2<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::sparseTextureImpl(uint32x2_t *a1, uint64_t a2, int *a3, unsigned int a4, unsigned int a5, int a6, int a7, uint64_t a8, int a9, uint64_t a10, int *a11, unsigned int a12, unsigned int a13, int a14, int a15, char a16)
{
  uint64_t v197 = *MEMORY[0x263EF8340];
  if (a10) {
    uint64_t v166 = *(void *)(a10 + 536);
  }
  else {
    uint64_t v166 = 0;
  }
  uint64_t v22 = *(void *)(a2 + 536);
  if (*(_DWORD *)*MEMORY[0x263F4B1E8]) {
    IOGPUDeviceTraceEvent();
  }
  if (a1[827].i16[0])
  {
    uint64_t v23 = (unint64_t *)a1[97];
    if ((unint64_t)v23 + 4 > *(void *)&a1[96])
    {
      int v137 = AGX::DataBufferAllocator<34ul>::growNoInline(&a1[3], 22, 0);
      int v24 = (unint64_t *)a1[97];
      if (v137)
      {
        if ((unint64_t)v24 + 4 > *(void *)&a1[96]) {
          goto LABEL_143;
        }
        a1[98] = (uint32x2_t)((char *)v24 + 4);
        unint64_t *v23 = __ROR8__((char *)v24 + *(void *)&a1[99], 32) & 0xFFFFFFFF0000FFFFLL | 0x20000000;
        int v24 = (unint64_t *)a1[97];
      }
    }
    else
    {
      a1[98] = (uint32x2_t)((char *)v23 + 4);
      int v24 = v23;
    }
    *(_DWORD *)int v24 = 1610613088;
    a1[97] = (uint32x2_t)((char *)v24 + 4);
    a1[538].i16[0] = 0;
    a1[827].i16[0] = 0;
  }
  (*(void (**)(uint32x2_t *, void, void))(*(void *)a1 + 16))(a1, 0, 0);
  uint64_t v195 = a2;
  uint64_t v193 = a10;
  long long v196 = *(_OWORD *)(v22 + 496);
  int v160 = a1;
  uint64_t v153 = a8;
  if (!v166)
  {
    if (a8) {
      int v29 = 1;
    }
    else {
      int v29 = a7;
    }
    int v30 = v29 ^ 1;
    AGX::BlitDispatchContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::bindComputeResources((uint64_t)a1, (uint64_t)&v195, 0);
    uint64_t v28 = a1;
    if (a8)
    {
      if (a1[186]) {
        MTLResourceListAddResource();
      }
      IOGPUResourceListAddResource();
    }
    BOOL v164 = a8 != 0;
    uint32x2_t v31 = a1[133];
    if (!*(void *)&v31)
    {
      if (!AGX::DataBufferAllocator<34ul>::growNoInline(&a1[3], 31, 0)) {
        goto LABEL_143;
      }
      uint32x2_t v31 = a1[133];
    }
    unint64_t v32 = *(void *)&v31 + 87;
    unint64_t v33 = (unint64_t)a1[132];
    BOOL v34 = v32 > v33;
    if (v32 <= v33) {
      goto LABEL_24;
    }
    int v138 = AGX::DataBufferAllocator<34ul>::growNoInline(&a1[3], 31, 0);
    BOOL v35 = 0;
    if (!v138) {
      goto LABEL_25;
    }
    unint64_t v32 = *(void *)&a1[133] + 87;
    if (v32 <= *(void *)&a1[132])
    {
LABEL_24:
      a1[134] = (uint32x2_t)v32;
      BOOL v35 = v34;
LABEL_25:
      int v27 = a6;
      unsigned int v151 = v30;
      BOOL v192 = v35;
      goto LABEL_26;
    }
LABEL_143:
    abort();
  }
  long long v194 = *(_OWORD *)(v166 + 496);
  if (a8) {
    int v25 = 1;
  }
  else {
    int v25 = a7;
  }
  int v26 = v25 ^ 1;
  BOOL v192 = 0;
  AGX::BlitDispatchContextGen2<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::bindSparseTexturePerSubDispatchResources(a1, (uint64_t)&v195, (uint64_t)&v193, v166, a8, v25 ^ 1u, &v192);
  BOOL v164 = a8 != 0;
  int v27 = a6;
  unsigned int v151 = v26;
  uint64_t v28 = a1;
LABEL_26:
  uint64_t v156 = *(void *)(*(void *)&v28[188] + 520);
  v28[839].i8[1] = 1;
  unint64_t v36 = (*(void *)&v28[133] + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v161 = v36 + *(void *)&v28[135];
  v28[133] = (uint32x2_t)(v36 + 80);
  *(_OWORD *)(v36 + 48) = 0u;
  *(_OWORD *)(v36 + 64) = 0u;
  *(_OWORD *)(v36 + 16) = 0u;
  *(_OWORD *)(v36 + 32) = 0u;
  *(_OWORD *)unint64_t v36 = 0u;
  uint64_t v37 = *(void *)(v22 + 72);
  unsigned int MipInTail = AGX::TextureGen4<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::firstMipInTail(v22, 0);
  unsigned int v39 = AGX::TextureGen4<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::firstMipInTail(v22, 1);
  agxCalcSparseInputs(*(_DWORD *)(v22 + 236), *(_DWORD *)(v22 + 128), *(_DWORD *)(v22 + 132), *(_DWORD *)(v22 + 216), *(_DWORD *)(v22 + 220), *(_DWORD *)(v22 + 112) * *(unsigned __int8 *)(*(void *)(v22 + 208) + 88), *(_DWORD *)(v22 + 64), MipInTail, v39, a5, a4, *(unsigned char *)(v22 + 316), *(void *)a3, *((void *)a3 + 1), *((void *)a3 + 3), *((void *)a3 + 4), v36);
  BOOL v40 = v27 == 0;
  *(unsigned char *)(v36 + 54) = v27 == 0;
  *(unsigned char *)(v36 + 56) = a7;
  unsigned int v41 = *(_DWORD *)(v22 + 112);
  unsigned int v42 = 0x40 / (v41 * *(unsigned __int8 *)(*(void *)(v22 + 208) + 88));
  unsigned int v43 = 0x10 / v41;
  if (v42 <= v43) {
    LOBYTE(v42) = v43;
  }
  *(unsigned char *)(v36 + 52) = v42;
  *(void *)(v36 + 64) = v37;
  *(unsigned char *)(v36 + 58) = a16;
  if (a14 == 1)
  {
    if (v164) {
      uint64_t v44 = *(void *)(a8 + (int)*MEMORY[0x263F4B188] + 72)
    }
          + (a9 + 4 * a15 * *(_DWORD *)(v36 + 44) * *(_DWORD *)(v36 + 48));
    else {
      uint64_t v44 = 0;
    }
    *(void *)(v36 + 72) = v44;
    if (v156)
    {
      if (*(void *)&v28[828]
        && (!v192 || !v28[837].i32[0])
        && (AGX::BlitDispatchContextGen2<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::tryCoalesceSparseTextureGetCounter(v28, v36, v161) & 1) != 0)
      {
        goto LABEL_64;
      }
      AGX::BlitDispatchContextGen2<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::dispatchCoalescedSparseTextureShaderBatch((uint64_t)v28);
      AGX::BlitDispatchContextGen2<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::startSparseTextureCoalescedDispatch((uint64_t)v28, 1);
    }
    else
    {
      v48.n128_f64[0] = AGX::BlitDispatchContextGen2<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::dispatchCoalescedSparseTextureShaderBatch((uint64_t)v28);
    }
    if (*(void *)(*(void *)&v28[188] + 520)) {
      goto LABEL_58;
    }
    AGX::BlitDispatchContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::endPreviousBlitCommand((uint64_t)v28, 0, v48, v49, v50);
    AGX::BlitDispatchContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::beginComputePass((uint64_t)v28, 0);
    AGX::BlitDispatchContextGen2<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::startSparseTextureCoalescedDispatch((uint64_t)v28, 1);
    AGX::BlitDispatchContextGen2<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::bindSparseTexturePerSubDispatchResources(v28, (uint64_t)&v195, (uint64_t)&v193, v166, a8, v151, &v192);
    uint64_t v28 = v160;
    unsigned int v61 = (_OWORD *)((*(void *)&v160[133] + 7) & 0xFFFFFFFFFFFFFFF8);
    uint32x2_t v62 = v160[135];
    v160[133] = (uint32x2_t)(v61 + 5);
    _OWORD *v61 = *(_OWORD *)v36;
    long long v63 = *(_OWORD *)(v36 + 16);
    long long v64 = *(_OWORD *)(v36 + 32);
    long long v65 = *(_OWORD *)(v36 + 64);
    v61[3] = *(_OWORD *)(v36 + 48);
    v61[4] = v65;
    v61[1] = v63;
    v61[2] = v64;
    if (*(void *)(*(void *)&v160[188] + 520))
    {
      uint64_t v161 = (uint64_t)v61 + *(void *)&v62;
      unint64_t v36 = (unint64_t)v61;
LABEL_58:
      AGX::BlitDispatchContextGen2<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::tryCoalesceSparseTextureGetCounter(v28, v36, v161);
      goto LABEL_64;
    }
LABEL_83:
    uint64_t v85 = *(void *)&v28[195] - *(void *)&v28[197];
    *(_DWORD *)(v85 + 12) = 1;
    if ((*(unsigned char *)(v85 + 8) & 4) != 0)
    {
      uint32x2_t v86 = v28[1];
      goto LABEL_85;
    }
    return;
  }
  if ((a14 & 0xFFFFFFFE) == 2)
  {
    *(void *)(v36 + 72) = *(void *)(v22 + 520);
    if (v156)
    {
      if (*(void *)&v28[828]
        && (!v192 || !v28[837].i32[0])
        && (AGX::BlitDispatchContextGen2<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::tryCoalesceSparseTextureMapUnmap((uint64_t)v28, v36, v161, a14) & 1) != 0)
      {
        goto LABEL_64;
      }
      AGX::BlitDispatchContextGen2<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::dispatchCoalescedSparseTextureShaderBatch((uint64_t)v28);
      AGX::BlitDispatchContextGen2<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::startSparseTextureCoalescedDispatch((uint64_t)v28, a14);
    }
    else
    {
      v45.n128_f64[0] = AGX::BlitDispatchContextGen2<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::dispatchCoalescedSparseTextureShaderBatch((uint64_t)v28);
    }
    if (!*(void *)(*(void *)&v28[188] + 520))
    {
      AGX::BlitDispatchContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::endPreviousBlitCommand((uint64_t)v28, 0, v45, v46, v47);
      AGX::BlitDispatchContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::beginComputePass((uint64_t)v28, 0);
      AGX::BlitDispatchContextGen2<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::startSparseTextureCoalescedDispatch((uint64_t)v28, a14);
      AGX::BlitDispatchContextGen2<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::bindSparseTexturePerSubDispatchResources(v28, (uint64_t)&v195, (uint64_t)&v193, v166, a8, v151, &v192);
      uint64_t v28 = v160;
      int v66 = (_OWORD *)((*(void *)&v160[133] + 7) & 0xFFFFFFFFFFFFFFF8);
      uint32x2_t v67 = v160[135];
      v160[133] = (uint32x2_t)(v66 + 5);
      _OWORD *v66 = *(_OWORD *)v36;
      long long v68 = *(_OWORD *)(v36 + 16);
      long long v69 = *(_OWORD *)(v36 + 32);
      long long v70 = *(_OWORD *)(v36 + 64);
      v66[3] = *(_OWORD *)(v36 + 48);
      v66[4] = v70;
      v66[1] = v68;
      v66[2] = v69;
      if (!*(void *)(*(void *)&v160[188] + 520)) {
        goto LABEL_83;
      }
      uint64_t v161 = (uint64_t)v66 + *(void *)&v67;
      unint64_t v36 = (unint64_t)v66;
    }
    AGX::BlitDispatchContextGen2<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::tryCoalesceSparseTextureMapUnmap((uint64_t)v28, v36, v161, a14);
LABEL_64:
    if (*(_DWORD *)*MEMORY[0x263F4B1E8]) {
      IOGPUDeviceTraceEvent();
    }
    return;
  }
  if (a14 != 4) {
    goto LABEL_64;
  }
  *(unsigned char *)(v36 + 55) = 1;
  *(void *)(v36 + 72) = *(void *)(v166 + 72);
  unint64_t v51 = (*(void *)&v28[21] + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v52 = v51 + *(void *)&v28[23];
  v28[21] = (uint32x2_t)(v51 + 80);
  *(_OWORD *)(v51 + 48) = 0u;
  *(_OWORD *)(v51 + 64) = 0u;
  *(_OWORD *)(v51 + 16) = 0u;
  *(_OWORD *)(v51 + 32) = 0u;
  *(_OWORD *)unint64_t v51 = 0u;
  *(void *)unint64_t v36 = v52;
  unsigned int v53 = AGX::TextureGen4<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::firstMipInTail(v166, 0);
  unsigned int v54 = AGX::TextureGen4<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::firstMipInTail(v166, 1);
  agxCalcSparseInputs(*(_DWORD *)(v166 + 236), *(_DWORD *)(v166 + 128), *(_DWORD *)(v166 + 132), *(_DWORD *)(v166 + 216), *(_DWORD *)(v166 + 220), *(_DWORD *)(v166 + 112) * *(unsigned __int8 *)(*(void *)(v166 + 208) + 88), *(_DWORD *)(v166 + 64), v53, v54, a13, a12, *(unsigned char *)(v166 + 316), *(void *)a11, *((void *)a11 + 1), *((void *)a3 + 3), *((void *)a3 + 4), v51);
  *(unsigned char *)(v51 + 54) = v40;
  *(unsigned char *)(v51 + 56) = a7;
  unsigned int v55 = *(_DWORD *)(v166 + 112);
  unsigned int v56 = 0x40 / (v55 * *(unsigned __int8 *)(*(void *)(v166 + 208) + 88));
  unsigned int v57 = 0x10 / v55;
  if (v56 <= v57) {
    LOBYTE(v56) = v57;
  }
  *(unsigned char *)(v51 + 52) = v56;
  BOOL v191 = 0;
  if (v156)
  {
    if (*(void *)&v28[828]
      && (!v192 || !v28[837].i32[0])
      && (AGX::BlitDispatchContextGen2<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::tryCoalesceSparseTextureMoveMap((uint64_t)v28, v36, v161, v51, &v191) & 1) != 0)
    {
      goto LABEL_72;
    }
    AGX::BlitDispatchContextGen2<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::dispatchCoalescedSparseTextureShaderBatch((uint64_t)v28);
    AGX::BlitDispatchContextGen2<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::startSparseTextureCoalescedDispatch((uint64_t)v28, 4);
  }
  else
  {
    v58.n128_f64[0] = AGX::BlitDispatchContextGen2<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::dispatchCoalescedSparseTextureShaderBatch((uint64_t)v28);
  }
  if (!*(void *)(*(void *)&v28[188] + 520))
  {
    AGX::BlitDispatchContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::endPreviousBlitCommand((uint64_t)v28, 0, v58, v59, v60);
    AGX::BlitDispatchContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::beginComputePass((uint64_t)v28, 0);
    AGX::BlitDispatchContextGen2<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::startSparseTextureCoalescedDispatch((uint64_t)v28, 4);
    AGX::BlitDispatchContextGen2<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::bindSparseTexturePerSubDispatchResources(v28, (uint64_t)&v195, (uint64_t)&v193, v166, v153, v151, &v192);
    uint64_t v28 = v160;
    int v71 = (_OWORD *)((*(void *)&v160[21] + 7) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v72 = (char *)v71 + *(void *)&v160[23];
    v160[21] = (uint32x2_t)(v71 + 5);
    *int v71 = *(_OWORD *)v51;
    long long v73 = *(_OWORD *)(v51 + 16);
    long long v74 = *(_OWORD *)(v51 + 32);
    long long v75 = *(_OWORD *)(v51 + 64);
    v71[3] = *(_OWORD *)(v51 + 48);
    v71[4] = v75;
    v71[1] = v73;
    v71[2] = v74;
    *(void *)unint64_t v36 = v72;
    unsigned int v76 = (_OWORD *)((*(void *)&v160[133] + 7) & 0xFFFFFFFFFFFFFFF8);
    uint32x2_t v77 = v160[135];
    v160[133] = (uint32x2_t)(v76 + 5);
    long long v79 = *(_OWORD *)(v36 + 48);
    long long v78 = *(_OWORD *)(v36 + 64);
    long long v80 = *(_OWORD *)(v36 + 32);
    v76[1] = *(_OWORD *)(v36 + 16);
    v76[2] = v80;
    v76[3] = v79;
    v76[4] = v78;
    *unsigned int v76 = *(_OWORD *)v36;
    if (!*(void *)(*(void *)&v160[188] + 520)) {
      goto LABEL_83;
    }
    uint64_t v161 = (uint64_t)v76 + *(void *)&v77;
    unint64_t v51 = (unint64_t)v71;
    unint64_t v36 = (unint64_t)v76;
  }
  AGX::BlitDispatchContextGen2<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::tryCoalesceSparseTextureMoveMap((uint64_t)v28, v36, v161, v51, &v191);
LABEL_72:
  if (v191) {
    AGX::BlitDispatchContextGen2<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::dispatchCoalescedSparseTextureShaderBatch((uint64_t)v28);
  }
  uint64_t v81 = *(void *)(v166 + 488);
  if (!v81 || *(_DWORD *)(v81 + 1080) <= a4)
  {
    uint64_t BlitProgramVariant = 0;
    if (v53 != a4) {
      goto LABEL_81;
    }
LABEL_87:
    unsigned int v84 = *(_DWORD *)(v22 + 64);
    if (v84 <= a4) {
      goto LABEL_64;
    }
    goto LABEL_88;
  }
  DWORD2(v168) = 18;
  __p[1] = 0;
  *(void *)&long long v170 = 0;
  __p[0] = 0;
  *(void *)&long long v168 = &unk_26F852288;
  DWORD2(v170) = 2050;
  uint64_t BlitProgramVariant = AGX::Device<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::findOrCreateBlitProgramVariant(*(void *)(*(void *)&v28[183] + 808), (uint64_t)&v168);
  unsigned int v83 = *(_DWORD *)(BlitProgramVariant + 1680);
  do
  {
    IOGPUResourceListAddResource();
    v83 &= ~(1 << __clz(__rbit32(v83)));
  }
  while (v83);
  *(void *)&long long v168 = &unk_26F8522C8;
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  uint64_t v28 = v160;
  if (v53 == a4) {
    goto LABEL_87;
  }
LABEL_81:
  unsigned int v84 = a4 + 1;
  if (a4 + 1 < a4) {
    goto LABEL_64;
  }
LABEL_88:
  uint64_t v87 = v28 + 3;
  char v162 = (_DWORD *)&v28[191] + 1;
  char v163 = (char ***)&v28[220];
  unsigned int v140 = v84;
  while (1)
  {
    uint64_t v88 = *(void *)(v166 + 488);
    if (v88)
    {
      if (*(_DWORD *)(v88 + 1080) > a4) {
        break;
      }
    }
LABEL_90:
    if (++a4 == v84) {
      goto LABEL_64;
    }
  }
  int v90 = *(_DWORD *)(v166 + 224);
  int v89 = *(_DWORD *)(v166 + 228);
  int v91 = *a3;
  int v92 = a3[2];
  int v150 = a11[2];
  int v152 = *a11;
  int v157 = a3[6];
  int v154 = a3[8];
  unsigned int v93 = *(_DWORD *)(v166 + 112);
  uint64_t v190 = 0;
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getMacroblockDimensions(v166, (_DWORD *)&v190 + 1, (unsigned int *)&v190);
  unsigned int v94 = v190;
  char v143 = v93 > 2;
  unsigned int v95 = *(_DWORD *)(v22 + 128) >> (*(unsigned char *)(v22 + 144) + a4);
  if (v95 <= 1) {
    unsigned int v95 = 1;
  }
  int v146 = HIDWORD(v190) - 1;
  unsigned int v96 = *(_DWORD *)(v22 + 132) >> (*(unsigned char *)(v22 + 144) + a4);
  if (v96 <= 1) {
    unsigned int v96 = 1;
  }
  int v97 = v190 - 1;
  unsigned int v98 = (v190 - 1 + v96) / v190;
  unsigned int v99 = *(_DWORD *)(v166 + 128) >> (*(unsigned char *)(v166 + 144) + a4);
  if (v99 <= 1) {
    unsigned int v99 = 1;
  }
  unsigned int v100 = *(_DWORD *)(v166 + 132) >> (*(unsigned char *)(v166 + 144) + a4);
  if (v100 <= 1) {
    unsigned int v100 = 1;
  }
  unsigned int v144 = v99;
  unsigned int v145 = v100;
  int v147 = v90 * v91;
  int v148 = v89 * v92;
  unsigned int v149 = HIDWORD(v190);
  unsigned int v101 = (v154 + v92) * v89;
  unsigned int v102 = (v157 + v91) * v90;
  unsigned int v158 = (HIDWORD(v190) - 1 + v95) / HIDWORD(v190);
  if (v102 >= v95) {
    unsigned int v103 = (HIDWORD(v190) - 1 + v95) / HIDWORD(v190);
  }
  else {
    unsigned int v103 = (v89 * v92 + v90 * v91) / HIDWORD(v190);
  }
  BOOL v104 = v101 >= v96;
  unsigned int v105 = v101 / v190;
  unsigned int v155 = v98;
  if (v104) {
    unsigned int v105 = v98;
  }
  unsigned int v141 = v105;
  unsigned int v142 = v103;
  uint32x2_t v106 = v160[21];
  uint32x2_t v107 = (uint32x2_t)(*(void *)&v106 + 36);
  int v108 = v90;
  if ((unint64_t)(*(void *)&v106 + 36) <= *(void *)&v160[20])
  {
    unsigned int v109 = HIDWORD(v190);
LABEL_109:
    uint64_t v110 = v160;
    v160[22] = v107;
    goto LABEL_110;
  }
  int v129 = AGX::DataBufferAllocator<34ul>::growNoInline(v87, 3, 0);
  unsigned int v109 = v149;
  uint64_t v110 = v160;
  uint32x2_t v106 = v160[21];
  if (v129)
  {
    uint32x2_t v107 = (uint32x2_t)(*(void *)&v106 + 36);
    if ((unint64_t)(*(void *)&v106 + 36) > *(void *)&v160[20]) {
      abort();
    }
    goto LABEL_109;
  }
LABEL_110:
  unsigned int v111 = (v97 + v145) / v94;
  unsigned int v112 = (v97 + v148) / v94;
  unsigned int v113 = (v146 + v108 * v152) / v109;
  unsigned int v114 = v97 + v89 * v150;
  unsigned int v115 = (v146 + v147) / v109;
  uint32x2_t v116 = v110[23];
  v110[21] = (uint32x2_t)(*(void *)&v106 + 36);
  **(_DWORD **)&uint32x2_t v106 = v158;
  *(_DWORD *)(*(void *)&v106 + 4) = v155;
  *(_DWORD *)(*(void *)&v106 + 8) = (v146 + v144) / v109;
  *(_DWORD *)(*(void *)&v106 + 12) = v111;
  *(_DWORD *)(*(void *)&v106 + 16) = v115;
  *(_DWORD *)(*(void *)&v106 + 20) = v112;
  unsigned int v159 = v112;
  *(_DWORD *)(*(void *)&v106 + 24) = v113;
  *(_DWORD *)(*(void *)&v106 + 28) = v114 / v94;
  *(unsigned char *)(*(void *)&v106 + 32) = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::isLargeMacroblock(v22);
  unint64_t v120 = *((void *)a3 + 5);
  if (v120)
  {
    unsigned int v121 = 1;
    do
    {
      AGX::BlitUSCStateLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes>::reserveComputeProgramVariantArguments(v87, BlitProgramVariant);
      unint64_t v120 = *((void *)a3 + 5);
      BOOL v122 = v120 > v121++;
    }
    while (v122);
  }
  unsigned int v123 = v160;
  if (*(void *)(*(void *)&v160[188] + 520))
  {
    uint64_t v124 = *(void *)&v116 + *(void *)&v106;
LABEL_115:
    int v189 = 0;
    uint64_t v186 = 0;
    uint64_t v187 = 0;
    uint64_t v185 = 0;
    long long v173 = 0u;
    long long v174 = 0u;
    long long v171 = 0u;
    long long v172 = 0u;
    *(_OWORD *)long long __p = 0u;
    long long v170 = 0u;
    long long v168 = 0u;
    uint64_t v175 = 0;
    uint64_t v176 = v124;
    uint32x2_t v179 = v123[242];
    uint64_t v181 = 0x100000001;
    long long v180 = xmmword_242EA7DB0;
    int v182 = (v142 - v115) << (2 * (v109 << v143 == 32));
    unsigned int v183 = v141 - v159;
    int v188 = 0;
    int v184 = 1;
    if (v120)
    {
      LODWORD(v125) = 0;
      int v126 = a11[4];
      int v127 = a3[4];
      do
      {
        uint64_t GPUVirtualAddress = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getGPUVirtualAddress(*(void *)(v22 + 488), a5, *(_DWORD *)(v22 + 144) + a4, v127 + (int)v125, 0);
        uint64_t v177 = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getGPUVirtualAddress(*(void *)(v166 + 488), a13, *(_DWORD *)(v166 + 144) + a4, v126 + (int)v125, 0);
        uint64_t v178 = GPUVirtualAddress;
        AGX::BlitUSCStateLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes>::emitComputeProgramVariantArguments(v163, v87, BlitProgramVariant, (uint64_t)&v168, (uint64_t)&v180, 0, 1, 1, v162);
        unint64_t v125 = (v125 + 1);
      }
      while (*((void *)a3 + 5) > v125);
    }
    unsigned int v84 = v140;
    goto LABEL_90;
  }
  AGX::BlitDispatchContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::endPreviousBlitCommand((uint64_t)v160, 0, v117, v118, v119);
  AGX::BlitDispatchContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::beginComputePass((uint64_t)v160, 0);
  AGX::BlitDispatchContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::bindComputeResources((uint64_t)v160, (uint64_t)&v195, 0);
  if (v166) {
    AGX::BlitDispatchContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::bindComputeResources((uint64_t)v160, (uint64_t)&v193, 0);
  }
  AGX::BlitUSCStateLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes>::bindComputeProgramVariantResources(*(void *)&v160[188], BlitProgramVariant);
  unsigned int v123 = v160;
  uint32x2_t v130 = v160[21];
  uint64_t v131 = *(void *)&v130 + 36;
  if ((unint64_t)(*(void *)&v130 + 36) <= *(void *)&v160[20]) {
    goto LABEL_125;
  }
  int v136 = AGX::DataBufferAllocator<34ul>::growNoInline(v87, 3, 0);
  uint32x2_t v130 = v160[21];
  if (v136)
  {
    uint64_t v131 = *(void *)&v130 + 36;
    unsigned int v123 = v160;
    unsigned int v109 = v149;
    if ((unint64_t)(*(void *)&v130 + 36) > *(void *)&v160[20]) {
      abort();
    }
LABEL_125:
    v123[22] = (uint32x2_t)v131;
    goto LABEL_126;
  }
  unsigned int v123 = v160;
  unsigned int v109 = v149;
LABEL_126:
  uint32x2_t v132 = v123[23];
  v123[21] = (uint32x2_t)(*(void *)&v130 + 36);
  long long v133 = *(_OWORD *)*(void *)&v106;
  long long v134 = *(_OWORD *)(*(void *)&v106 + 16);
  *(_DWORD *)(*(void *)&v130 + 32) = *(_DWORD *)(*(void *)&v106 + 32);
  *(_OWORD *)*(void *)&uint32x2_t v130 = v133;
  *(_OWORD *)(*(void *)&v130 + 16) = v134;
  unint64_t v120 = *((void *)a3 + 5);
  if (v120)
  {
    unsigned int v135 = 1;
    do
    {
      AGX::BlitUSCStateLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes>::reserveComputeProgramVariantArguments(v87, BlitProgramVariant);
      unint64_t v120 = *((void *)a3 + 5);
      BOOL v122 = v120 > v135++;
    }
    while (v122);
    unsigned int v123 = v160;
  }
  if (*(void *)(*(void *)&v123[188] + 520))
  {
    uint64_t v124 = *(void *)&v132 + *(void *)&v130;
    goto LABEL_115;
  }
  uint64_t v139 = *(void *)&v123[195] - *(void *)&v123[197];
  *(_DWORD *)(v139 + 12) = 1;
  if ((*(unsigned char *)(v139 + 8) & 4) != 0)
  {
    uint32x2_t v86 = v160[1];
LABEL_85:
    **(unsigned char **)(*(void *)&v86 + 688) = 1;
  }
}

void sub_242A32758(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *__p,uint64_t a36)
{
  if (__p)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t AGX::BlitDispatchContextGen2<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::bindSparseTexturePerSubDispatchResources(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, BOOL *a7)
{
  uint64_t result = AGX::BlitDispatchContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::bindComputeResources((uint64_t)a1, a2, 0);
  if (a4) {
    uint64_t result = AGX::BlitDispatchContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::bindComputeResources((uint64_t)a1, a3, 0);
  }
  if (a5)
  {
    if (a1[186]) {
      MTLResourceListAddResource();
    }
    uint64_t result = IOGPUResourceListAddResource();
  }
  uint64_t v13 = a1[133];
  if (!v13)
  {
    uint64_t result = AGX::DataBufferAllocator<34ul>::growNoInline(a1 + 3, 31, 0);
    if (!result) {
      goto LABEL_21;
    }
    uint64_t v13 = a1[133];
  }
  unint64_t v14 = v13 + 87;
  unint64_t v15 = a1[132];
  BOOL v16 = v14 > v15;
  if (v14 <= v15)
  {
LABEL_9:
    a1[134] = v14;
    BOOL v17 = v16;
    goto LABEL_10;
  }
  uint64_t result = AGX::DataBufferAllocator<34ul>::growNoInline(a1 + 3, 31, 0);
  BOOL v17 = 0;
  if (result)
  {
    unint64_t v14 = a1[133] + 87;
    if (v14 > a1[132]) {
      goto LABEL_21;
    }
    goto LABEL_9;
  }
LABEL_10:
  *a7 = v17;
  if (!a4) {
    return result;
  }
  unint64_t v18 = a1[21] + 87;
  if (v18 <= a1[20]) {
    goto LABEL_12;
  }
  uint64_t result = AGX::DataBufferAllocator<34ul>::growNoInline(a1 + 3, 3, 0);
  if (result)
  {
    unint64_t v18 = a1[21] + 87;
    if (v18 <= a1[20])
    {
LABEL_12:
      a1[22] = v18;
      return result;
    }
LABEL_21:
    abort();
  }
  return result;
}

uint64_t AGX::BlitDispatchContextGen2<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::tryCoalesceSparseTextureGetCounter(uint32x2_t *a1, uint64_t a2, uint64_t a3)
{
  if (a1[829].i32[0] != 1) {
    return 0;
  }
  __int32 v5 = a1[837].i32[0];
  if (v5)
  {
    if (*(unsigned char *)(a2 + 58)) {
      return 0;
    }
    uint64_t v53 = 0;
    get_sstt_gpu_va_region_offset(a2, (_DWORD *)&v53 + 1, &v53);
    uint64_t v19 = *(void *)(a2 + 64);
    uint32x2_t v20 = a1[838];
    unint64_t v21 = v19 + HIDWORD(v53);
    unint64_t v22 = v19 + v53;
    unsigned int v23 = *(unsigned __int16 *)(*(void *)&v20 + 1544);
    if (*(_WORD *)(*(void *)&v20 + 1544))
    {
      uint64_t v24 = *(void *)&v20 + 776;
      for (uint64_t i = *(void *)&v20 + 776; ; uint64_t i = v24 + 24 * v26)
      {
        unint64_t v27 = *(void *)i;
        if (*(void *)i < v22 && *(void *)(i + 8) > v21) {
          break;
        }
        if (v27 > v21)
        {
          unsigned int v26 = *(unsigned __int16 *)(i + 16);
          if (!*(_WORD *)(i + 16))
          {
            if (v27 == v22)
            {
              *(void *)uint64_t i = v21;
              BOOL v29 = 1;
            }
            else
            {
              BOOL v29 = v23 < 0x20;
              if (v23 > 0x1F)
              {
                *(_WORD *)(i + 16) = 0;
              }
              else
              {
                uint64_t v47 = v24 + 24 * *(unsigned __int16 *)(*(void *)&v20 + 1544);
                *(void *)uint64_t v47 = v21;
                *(void *)(v47 + 8) = v22;
                *(_DWORD *)(v47 + 16) = 0;
                *(_WORD *)(*(void *)&v20 + 1544) = v23 + 1;
                *(_WORD *)(i + 16) = v23;
              }
            }
            goto LABEL_41;
          }
        }
        else
        {
          unint64_t v28 = *(void *)(i + 8);
          if (v28 > v22) {
            return 0;
          }
          unsigned int v26 = *(unsigned __int16 *)(i + 18);
          if (!*(_WORD *)(i + 18))
          {
            if (v28 == v21)
            {
              *(void *)(i + 8) = v22;
              BOOL v29 = 1;
            }
            else
            {
              BOOL v29 = v23 < 0x20;
              if (v23 > 0x1F)
              {
                *(_WORD *)(i + 18) = 0;
              }
              else
              {
                uint64_t v49 = v24 + 24 * *(unsigned __int16 *)(*(void *)&v20 + 1544);
                *(void *)uint64_t v49 = v21;
                *(void *)(v49 + 8) = v22;
                *(_DWORD *)(v49 + 16) = 0;
                *(_WORD *)(*(void *)&v20 + 1544) = v23 + 1;
                *(_WORD *)(i + 18) = v23;
              }
            }
            goto LABEL_41;
          }
        }
      }
      return 0;
    }
    *(void *)(*(void *)&v20 + 776) = v21;
    *(void *)(*(void *)&v20 + 784) = v22;
    *(_DWORD *)(*(void *)&v20 + 792) = 0;
    BOOL v29 = 1;
    *(_WORD *)(*(void *)&v20 + 1544) = 1;
LABEL_41:
    if (v29 && (unint64_t v37 = *(void *)(a2 + 72)) != 0)
    {
      int32x2_t v38 = *(int32x2_t *)(a2 + 44);
      unint64_t v39 = v37 + 4 * vmul_lane_s32(v38, v38, 1).u32[0];
      unsigned int v40 = *(unsigned __int16 *)(*(void *)&v20 + 768);
      if (*(_WORD *)(*(void *)&v20 + 768))
      {
        for (uint32x2_t j = v20; ; uint32x2_t j = (uint32x2_t)(*(void *)&v20 + 24 * v42))
        {
          unint64_t v43 = **(void **)&j;
          if (**(void **)&j < v39 && *(void *)(*(void *)&j + 8) > v37) {
            return 0;
          }
          if (v43 > v37)
          {
            unsigned int v42 = *(unsigned __int16 *)(*(void *)&j + 16);
            if (!*(_WORD *)(*(void *)&j + 16))
            {
              if (v43 == v39)
              {
                **(void **)&uint32x2_t j = v37;
                goto LABEL_64;
              }
              if (v40 <= 0x1F)
              {
                uint64_t v51 = *(void *)&v20 + 24 * *(unsigned __int16 *)(*(void *)&v20 + 768);
                *(void *)uint64_t v51 = v37;
                *(void *)(v51 + 8) = v39;
                *(_DWORD *)(v51 + 16) = 0;
                *(_WORD *)(*(void *)&v20 + 768) = v40 + 1;
                *(_WORD *)(*(void *)&j + 16) = v40;
                goto LABEL_64;
              }
              uint64_t result = 0;
              *(_WORD *)(*(void *)&j + 16) = 0;
              return result;
            }
          }
          else
          {
            unint64_t v44 = *(void *)(*(void *)&j + 8);
            if (v44 > v39) {
              return 0;
            }
            unsigned int v42 = *(unsigned __int16 *)(*(void *)&j + 18);
            if (!*(_WORD *)(*(void *)&j + 18))
            {
              if (v44 == v37)
              {
                *(void *)(*(void *)&j + 8) = v39;
                goto LABEL_64;
              }
              if (v40 <= 0x1F)
              {
                uint64_t v52 = *(void *)&v20 + 24 * *(unsigned __int16 *)(*(void *)&v20 + 768);
                *(void *)uint64_t v52 = v37;
                *(void *)(v52 + 8) = v39;
                *(_DWORD *)(v52 + 16) = 0;
                *(_WORD *)(*(void *)&v20 + 768) = v40 + 1;
                *(_WORD *)(*(void *)&j + 18) = v40;
                goto LABEL_64;
              }
              uint64_t result = 0;
              *(_WORD *)(*(void *)&j + 18) = 0;
              return result;
            }
          }
        }
      }
      **(void **)&uint32x2_t v20 = v37;
      *(void *)(*(void *)&v20 + 8) = v39;
      *(_DWORD *)(*(void *)&v20 + 16) = 0;
      *(_WORD *)(*(void *)&v20 + 768) = 1;
    }
    else
    {
      if (!v29) {
        return 0;
      }
      int32x2_t v38 = *(int32x2_t *)(a2 + 44);
    }
LABEL_64:
    a1[836] = vmax_u32(a1[836], (uint32x2_t)v38);
    a1[837].i32[0] = v5 + 1;
  }
  else
  {
    a1[830] = (uint32x2_t)a3;
    a1[831] = (uint32x2_t)a2;
    __int32 v7 = *(_DWORD *)(a2 + 44);
    a1[836].i32[0] = v7;
    __int32 v8 = *(_DWORD *)(a2 + 48);
    a1[836].i32[1] = v8;
    a1[837].i32[0] = 1;
    uint64_t v53 = 0;
    get_sstt_gpu_va_region_offset(a2, (_DWORD *)&v53 + 1, &v53);
    uint32x2_t v9 = a1[838];
    uint64_t v10 = *(void *)(a2 + 64);
    unint64_t v11 = v10 + HIDWORD(v53);
    unint64_t v12 = v10 + v53;
    unsigned int v13 = *(unsigned __int16 *)(*(void *)&v9 + 1544);
    if (*(_WORD *)(*(void *)&v9 + 1544))
    {
      uint64_t v14 = *(void *)&v9 + 776;
      for (uint64_t k = *(void *)&v9 + 776; ; uint64_t k = v14 + 24 * v16)
      {
        unint64_t v17 = *(void *)k;
        if (*(void *)k < v12 && *(void *)(k + 8) > v11) {
          break;
        }
        if (v17 > v11)
        {
          unsigned int v16 = *(unsigned __int16 *)(k + 16);
          if (!*(_WORD *)(k + 16))
          {
            if (v17 == v12)
            {
              *(void *)uint64_t k = v11;
            }
            else if (v13 > 0x1F)
            {
              *(_WORD *)(k + 16) = 0;
            }
            else
            {
              uint64_t v45 = v14 + 24 * *(unsigned __int16 *)(*(void *)&v9 + 1544);
              *(void *)uint64_t v45 = v11;
              *(void *)(v45 + 8) = v12;
              *(_DWORD *)(v45 + 16) = 0;
              *(_WORD *)(*(void *)&v9 + 1544) = v13 + 1;
              *(_WORD *)(k + 16) = v13;
            }
            break;
          }
        }
        else
        {
          unint64_t v18 = *(void *)(k + 8);
          if (v18 > v12) {
            break;
          }
          unsigned int v16 = *(unsigned __int16 *)(k + 18);
          if (!*(_WORD *)(k + 18))
          {
            if (v18 == v11)
            {
              *(void *)(k + 8) = v12;
            }
            else if (v13 > 0x1F)
            {
              *(_WORD *)(k + 18) = 0;
            }
            else
            {
              uint64_t v46 = v14 + 24 * *(unsigned __int16 *)(*(void *)&v9 + 1544);
              *(void *)uint64_t v46 = v11;
              *(void *)(v46 + 8) = v12;
              *(_DWORD *)(v46 + 16) = 0;
              *(_WORD *)(*(void *)&v9 + 1544) = v13 + 1;
              *(_WORD *)(k + 18) = v13;
            }
            break;
          }
        }
      }
    }
    else
    {
      *(void *)(*(void *)&v9 + 776) = v11;
      *(void *)(*(void *)&v9 + 784) = v12;
      *(_DWORD *)(*(void *)&v9 + 792) = 0;
      *(_WORD *)(*(void *)&v9 + 1544) = 1;
    }
    unint64_t v30 = *(void *)(a2 + 72);
    if (v30)
    {
      unint64_t v31 = v30 + 4 * (v8 * v7);
      unsigned int v32 = *(unsigned __int16 *)(*(void *)&v9 + 768);
      if (*(_WORD *)(*(void *)&v9 + 768))
      {
        for (uint32x2_t m = v9; ; uint32x2_t m = (uint32x2_t)(*(void *)&v9 + 24 * v34))
        {
          unint64_t v35 = **(void **)&m;
          if (**(void **)&m < v31 && *(void *)(*(void *)&m + 8) > v30) {
            break;
          }
          if (v35 > v30)
          {
            unsigned int v34 = *(unsigned __int16 *)(*(void *)&m + 16);
            if (!*(_WORD *)(*(void *)&m + 16))
            {
              if (v35 == v31)
              {
                **(void **)&uint32x2_t m = v30;
              }
              else if (v32 > 0x1F)
              {
                *(_WORD *)(*(void *)&m + 16) = 0;
              }
              else
              {
                uint64_t v48 = *(void *)&v9 + 24 * *(unsigned __int16 *)(*(void *)&v9 + 768);
                *(void *)uint64_t v48 = v30;
                *(void *)(v48 + 8) = v31;
                *(_DWORD *)(v48 + 16) = 0;
                *(_WORD *)(*(void *)&v9 + 768) = v32 + 1;
                *(_WORD *)(*(void *)&m + 16) = v32;
              }
              return 1;
            }
          }
          else
          {
            unint64_t v36 = *(void *)(*(void *)&m + 8);
            if (v36 > v31) {
              return 1;
            }
            unsigned int v34 = *(unsigned __int16 *)(*(void *)&m + 18);
            if (!*(_WORD *)(*(void *)&m + 18))
            {
              if (v36 == v30)
              {
                *(void *)(*(void *)&m + 8) = v31;
              }
              else if (v32 > 0x1F)
              {
                *(_WORD *)(*(void *)&m + 18) = 0;
              }
              else
              {
                uint64_t v50 = *(void *)&v9 + 24 * *(unsigned __int16 *)(*(void *)&v9 + 768);
                *(void *)uint64_t v50 = v30;
                *(void *)(v50 + 8) = v31;
                *(_DWORD *)(v50 + 16) = 0;
                *(_WORD *)(*(void *)&v9 + 768) = v32 + 1;
                *(_WORD *)(*(void *)&m + 18) = v32;
              }
              return 1;
            }
          }
        }
      }
      else
      {
        **(void **)&uint32x2_t v9 = v30;
        *(void *)(*(void *)&v9 + 8) = v31;
        *(_DWORD *)(*(void *)&v9 + 16) = 0;
        *(_WORD *)(*(void *)&v9 + 768) = 1;
      }
    }
  }
  return 1;
}

void AGX::BlitDispatchContextGen2<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::startSparseTextureCoalescedDispatch(uint64_t a1, int a2)
{
  unsigned int v3 = 0;
  *(_DWORD *)(a1 + 6632) = a2;
  int v22 = 17;
  uint64_t v24 = 0;
  uint64_t v25 = 0;
  long long __p = 0;
  unint64_t v21 = &unk_26F852208;
  int v26 = 0;
  if ((a2 - 3) < 2) {
    goto LABEL_8;
  }
  if (a2 == 1)
  {
    int v26 = 2;
    uint64_t v10 = *(unint64_t **)(a1 + 776);
    if ((unint64_t)v10 + 4 > *(void *)(a1 + 768))
    {
      int v19 = AGX::DataBufferAllocator<34ul>::growNoInline(a1 + 24, 22, 0);
      unint64_t v11 = *(unint64_t **)(a1 + 776);
      if (v19)
      {
        if ((unint64_t)v11 + 4 > *(void *)(a1 + 768)) {
          goto LABEL_36;
        }
        *(void *)(a1 + 784) = (char *)v11 + 4;
        *uint64_t v10 = __ROR8__((char *)v11 + *(void *)(a1 + 792), 32) & 0xFFFFFFFF0000FFFFLL | 0x20000000;
        unint64_t v11 = *(unint64_t **)(a1 + 776);
      }
    }
    else
    {
      *(void *)(a1 + 784) = (char *)v10 + 4;
      unint64_t v11 = v10;
    }
    *(_DWORD *)unint64_t v11 = 1610776834;
    *(void *)(a1 + 776) = (char *)v11 + 4;
    goto LABEL_14;
  }
  if (a2 == 2)
  {
    uint64_t v4 = *(void *)(a1 + 392);
    if (!v4)
    {
      if (!AGX::DataBufferAllocator<34ul>::growNoInline(a1 + 24, 10, 0)) {
        goto LABEL_36;
      }
      uint64_t v4 = *(void *)(a1 + 392);
    }
    uint64_t v5 = v4 + 15;
    if ((unint64_t)(v4 + 15) > *(void *)(a1 + 384))
    {
      int v20 = AGX::DataBufferAllocator<34ul>::growNoInline(a1 + 24, 10, 0);
      uint64_t v4 = *(void *)(a1 + 392);
      if (!v20) {
        goto LABEL_7;
      }
      uint64_t v5 = v4 + 15;
      if ((unint64_t)(v4 + 15) > *(void *)(a1 + 384)) {
        goto LABEL_36;
      }
    }
    *(void *)(a1 + 400) = v5;
LABEL_7:
    unint64_t v6 = (v4 + 7) & 0xFFFFFFFFFFFFFFF8;
    *(void *)(a1 + 6672) = v6 + *(void *)(a1 + 408);
    *(void *)unint64_t v6 = 0xFFFFFFFFLL;
    *(void *)(a1 + 392) = v6 + 8;
    *(void *)(a1 + 6680) = v6 | 4;
    unsigned int v3 = v26 & 0xFFFFFF00;
LABEL_8:
    int v26 = v3;
    *(unsigned char *)(a1 + 6712) = 1;
    uint64_t v7 = *(void *)(a1 + 168);
    uint64_t v8 = v7 + 15;
    if ((unint64_t)(v7 + 15) <= *(void *)(a1 + 160)) {
      goto LABEL_9;
    }
    int v18 = AGX::DataBufferAllocator<34ul>::growNoInline(a1 + 24, 3, 0);
    uint64_t v7 = *(void *)(a1 + 168);
    if (!v18) {
      goto LABEL_10;
    }
    uint64_t v8 = v7 + 15;
    if ((unint64_t)(v7 + 15) <= *(void *)(a1 + 160))
    {
LABEL_9:
      *(void *)(a1 + 176) = v8;
LABEL_10:
      unint64_t v9 = (v7 + 7) & 0xFFFFFFFFFFFFFFF8;
      *(void *)(a1 + 6656) = v9 + *(void *)(a1 + 184);
      *(void *)(a1 + 168) = v9 + 8;
      *(void *)(a1 + 6664) = v9;
      goto LABEL_14;
    }
LABEL_36:
    abort();
  }
LABEL_14:
  uint64_t BlitProgramVariant = (_DWORD *)AGX::Device<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::findOrCreateBlitProgramVariant(*(void *)(*(void *)(a1 + 1464) + 808), (uint64_t)&v21);
  *(void *)(a1 + 6624) = BlitProgramVariant;
  unsigned int v13 = BlitProgramVariant[420];
  do
  {
    IOGPUResourceListAddResource();
    v13 &= ~(1 << __clz(__rbit32(v13)));
  }
  while (v13);
  if (AGX::SpillInfoGen3<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::checkSpillParamsForCompute(a1 + 1808, BlitProgramVariant[99], BlitProgramVariant[102], BlitProgramVariant[107], 4 * BlitProgramVariant[668], 0, 0))AGX::BlitDispatchContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::bindComputeUSCSpillBuffer(a1); {
  AGX::BlitUSCStateLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes>::reserveComputeProgramVariantArguments((void *)(a1 + 24), (uint64_t)BlitProgramVariant);
  }
  uint64_t v14 = *(void *)(a1 + 784);
  if ((unint64_t)(v14 + 4) > *(void *)(a1 + 768))
  {
    unint64_t v15 = *(unint64_t **)(a1 + 776);
    if (AGX::DataBufferAllocator<34ul>::growNoInline(a1 + 24, 22, 0))
    {
      uint64_t v16 = *(void *)(a1 + 776);
      unint64_t v17 = v16 + v14 - (void)v15 + 4;
      if (v17 > *(void *)(a1 + 768)) {
        abort();
      }
      *(void *)(a1 + 784) = v17;
      unint64_t *v15 = __ROR8__(*(void *)(a1 + 792) + v16, 32) & 0xFFFFFFFF0000FFFFLL | 0x20000000;
    }
  }
  else
  {
    *(void *)(a1 + 784) = v14 + 4;
  }
  unint64_t v21 = &unk_26F852248;
  if (__p)
  {
    uint64_t v24 = __p;
    operator delete(__p);
  }
}

void sub_242A3316C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t AGX::BlitDispatchContextGen2<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::tryCoalesceSparseTextureMapUnmap(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  if (*(_DWORD *)(a1 + 6632) != a4) {
    return 0;
  }
  int v7 = *(_DWORD *)(a1 + 6696);
  if (!v7)
  {
    *(void *)(a1 + 6640) = a3;
    *(void *)(a1 + 6648) = a2;
    *(void *)(a1 + 6688) = 0x2000000020;
    *(_DWORD *)(a1 + 6696) = 1;
    if (a4 == 2)
    {
      **(_DWORD **)(a1 + 6680) = *(_DWORD *)(a2 + 48) * *(_DWORD *)(a2 + 44);
      *(void *)(a2 + 8) = *(void *)(a1 + 6672);
    }
    uint64_t v33 = 0;
    get_sstt_gpu_va_region_offset(a2, (_DWORD *)&v33 + 1, &v33);
    uint64_t v19 = *(void *)(a1 + 6704);
    uint64_t v20 = *(void *)(a2 + 64);
    unint64_t v21 = v20 + HIDWORD(v33);
    unint64_t v22 = v20 + v33;
    unsigned int v23 = *(unsigned __int16 *)(v19 + 1544);
    if (*(_WORD *)(v19 + 1544))
    {
      uint64_t v24 = v19 + 776;
      for (uint64_t i = (unint64_t *)(v19 + 776); ; uint64_t i = (unint64_t *)(v24 + 24 * v26))
      {
        unint64_t v27 = *i;
        if (*i < v22 && i[1] > v21) {
          break;
        }
        if (v27 > v21)
        {
          unsigned int v26 = *((unsigned __int16 *)i + 8);
          if (!*((_WORD *)i + 8))
          {
            if (v27 == v22)
            {
              *uint64_t i = v21;
            }
            else
            {
              if (v23 > 0x1F)
              {
                LOWORD(v23) = 0;
              }
              else
              {
                uint64_t v30 = v24 + 24 * *(unsigned __int16 *)(v19 + 1544);
                *(void *)uint64_t v30 = v21;
                *(void *)(v30 + 8) = v22;
                *(_DWORD *)(v30 + 16) = 0;
                *(_WORD *)(v19 + 1544) = v23 + 1;
              }
              *((_WORD *)i + 8) = v23;
            }
            return 1;
          }
        }
        else
        {
          unint64_t v28 = i[1];
          if (v28 > v22) {
            return 1;
          }
          unsigned int v26 = *((unsigned __int16 *)i + 9);
          if (!*((_WORD *)i + 9))
          {
            if (v28 == v21)
            {
              i[1] = v22;
            }
            else if (v23 > 0x1F)
            {
              *((_WORD *)i + 9) = 0;
            }
            else
            {
              uint64_t v29 = v24 + 24 * *(unsigned __int16 *)(v19 + 1544);
              *(void *)uint64_t v29 = v21;
              *(void *)(v29 + 8) = v22;
              *(_DWORD *)(v29 + 16) = 0;
              *(_WORD *)(v19 + 1544) = v23 + 1;
              *((_WORD *)i + 9) = v23;
            }
            return 1;
          }
        }
      }
    }
    else
    {
      *(void *)(v19 + 776) = v21;
      *(void *)(v19 + 784) = v22;
      *(_DWORD *)(v19 + 792) = 0;
      *(_WORD *)(v19 + 1544) = 1;
    }
    return 1;
  }
  if (*(void *)(*(void *)(a1 + 6648) + 72) != *(void *)(a2 + 72)) {
    return 0;
  }
  uint64_t v33 = 0;
  get_sstt_gpu_va_region_offset(a2, (_DWORD *)&v33 + 1, &v33);
  uint64_t v8 = *(void *)(a2 + 64);
  uint64_t v9 = *(void *)(a1 + 6704);
  unint64_t v10 = v8 + HIDWORD(v33);
  unint64_t v11 = v8 + v33;
  unsigned int v12 = *(unsigned __int16 *)(v9 + 1544);
  if (*(_WORD *)(v9 + 1544))
  {
    uint64_t v13 = v9 + 776;
    for (uint32x2_t j = (unint64_t *)(v9 + 776); ; uint32x2_t j = (unint64_t *)(v13 + 24 * v15))
    {
      unint64_t v16 = *j;
      if (*j < v11 && j[1] > v10) {
        break;
      }
      if (v16 > v10)
      {
        unsigned int v15 = *((unsigned __int16 *)j + 8);
        if (!*((_WORD *)j + 8))
        {
          if (v16 == v11)
          {
            *uint32x2_t j = v10;
            goto LABEL_31;
          }
          if (v12 <= 0x1F)
          {
            uint64_t v31 = v13 + 24 * *(unsigned __int16 *)(v9 + 1544);
            *(void *)uint64_t v31 = v10;
            *(void *)(v31 + 8) = v11;
            *(_DWORD *)(v31 + 16) = 0;
            *(_WORD *)(v9 + 1544) = v12 + 1;
            *((_WORD *)j + 8) = v12;
            goto LABEL_31;
          }
          uint64_t result = 0;
          *((_WORD *)j + 8) = 0;
          return result;
        }
      }
      else
      {
        unint64_t v17 = j[1];
        if (v17 > v11) {
          return 0;
        }
        unsigned int v15 = *((unsigned __int16 *)j + 9);
        if (!*((_WORD *)j + 9))
        {
          if (v17 == v10)
          {
            j[1] = v11;
            goto LABEL_31;
          }
          if (v12 <= 0x1F)
          {
            uint64_t v32 = v13 + 24 * *(unsigned __int16 *)(v9 + 1544);
            *(void *)uint64_t v32 = v10;
            *(void *)(v32 + 8) = v11;
            *(_DWORD *)(v32 + 16) = 0;
            *(_WORD *)(v9 + 1544) = v12 + 1;
            *((_WORD *)j + 9) = v12;
            goto LABEL_31;
          }
          uint64_t result = 0;
          *((_WORD *)j + 9) = 0;
          return result;
        }
      }
    }
    return 0;
  }
  *(void *)(v9 + 776) = v10;
  *(void *)(v9 + 784) = v11;
  *(_DWORD *)(v9 + 792) = 0;
  *(_WORD *)(v9 + 1544) = 1;
LABEL_31:
  *(_DWORD *)(a1 + 6696) = v7 + 1;
  if (a4 == 2) {
    **(_DWORD **)(a1 + 6680) += *(_DWORD *)(a2 + 48) * *(_DWORD *)(a2 + 44);
  }
  return 1;
}

uint64_t AGX::BlitDispatchContextGen2<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::tryCoalesceSparseTextureMoveMap(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, BOOL *a5)
{
  if (*(_DWORD *)(a1 + 6632) != 4) {
    return 0;
  }
  int v8 = *(_DWORD *)(a1 + 6696);
  if (!v8)
  {
    *(void *)(a1 + 6640) = a3;
    *(void *)(a1 + 6648) = a2;
    *(void *)(a1 + 6688) = 0x2000000020;
    BOOL v21 = 1;
    *(_DWORD *)(a1 + 6696) = 1;
    uint64_t v56 = 0;
    uint64_t v57 = 0;
    get_sstt_gpu_va_region_offset(a2, (_DWORD *)&v57 + 1, &v57);
    get_sstt_gpu_va_region_offset(a4, (_DWORD *)&v56 + 1, &v56);
    *a5 = 0;
    uint64_t v22 = *(void *)(a1 + 6704);
    uint64_t v23 = *(void *)(a2 + 64);
    unint64_t v24 = v23 + HIDWORD(v57);
    unint64_t v25 = v23 + v57;
    uint64_t v26 = v22 + 776;
    unint64_t v27 = (unint64_t *)(v22 + 776);
    unsigned int v28 = *(unsigned __int16 *)(v22 + 1544);
    if (!*(_WORD *)(v22 + 1544))
    {
      *(void *)(v22 + 776) = v24;
      *(void *)(v22 + 784) = v25;
      *(_DWORD *)(v22 + 792) = 0;
      unsigned int v28 = 1;
      *(_WORD *)(v22 + 1544) = 1;
      goto LABEL_67;
    }
    for (uint64_t i = (unint64_t *)(v22 + 776); ; uint64_t i = (unint64_t *)(v26 + 24 * v30))
    {
      unint64_t v31 = *i;
      if (*i < v25 && i[1] > v24)
      {
LABEL_37:
        BOOL v21 = 0;
        goto LABEL_67;
      }
      if (v31 > v24)
      {
        unsigned int v30 = *((unsigned __int16 *)i + 8);
        if (!*((_WORD *)i + 8))
        {
          if (v31 == v25)
          {
            *uint64_t i = v24;
            BOOL v21 = 1;
            goto LABEL_67;
          }
          BOOL v21 = v28 < 0x20;
          if (v28 > 0x1F)
          {
            unsigned int v44 = *(unsigned __int16 *)(v22 + 1544);
            LOWORD(v28) = 0;
          }
          else
          {
            uint64_t v43 = v26 + 24 * *(unsigned __int16 *)(v22 + 1544);
            *(void *)uint64_t v43 = v24;
            *(void *)(v43 + 8) = v25;
            *(_DWORD *)(v43 + 16) = 0;
            unsigned int v44 = v28 + 1;
            *(_WORD *)(v22 + 1544) = v28 + 1;
          }
          *((_WORD *)i + 8) = v28;
          goto LABEL_66;
        }
      }
      else
      {
        unint64_t v32 = i[1];
        if (v32 > v25) {
          goto LABEL_37;
        }
        unsigned int v30 = *((unsigned __int16 *)i + 9);
        if (!*((_WORD *)i + 9))
        {
          if (v32 == v24)
          {
            i[1] = v25;
            BOOL v21 = 1;
LABEL_67:
            *a5 = !v21;
            uint64_t v47 = *(void *)(a4 + 64);
            unint64_t v48 = v47 + HIDWORD(v56);
            unint64_t v49 = v47 + v56;
            while (1)
            {
              unint64_t v51 = *v27;
              if (*v27 < v49 && v27[1] > v48)
              {
LABEL_77:
                BOOL v53 = 0;
                goto LABEL_78;
              }
              if (v51 > v48)
              {
                unsigned int v50 = *((unsigned __int16 *)v27 + 8);
                if (!*((_WORD *)v27 + 8))
                {
                  if (v51 == v49)
                  {
                    unint64_t *v27 = v48;
                    BOOL v53 = 1;
                  }
                  else
                  {
                    BOOL v53 = v28 < 0x20;
                    if (v28 > 0x1F)
                    {
                      *((_WORD *)v27 + 8) = 0;
                    }
                    else
                    {
                      uint64_t v54 = v26 + 24 * v28;
                      *(void *)uint64_t v54 = v48;
                      *(void *)(v54 + 8) = v49;
                      *(_DWORD *)(v54 + 16) = 0;
                      *(_WORD *)(v22 + 1544) = v28 + 1;
                      *((_WORD *)v27 + 8) = v28;
                    }
                  }
                  goto LABEL_78;
                }
              }
              else
              {
                unint64_t v52 = v27[1];
                if (v52 > v49) {
                  goto LABEL_77;
                }
                unsigned int v50 = *((unsigned __int16 *)v27 + 9);
                if (!*((_WORD *)v27 + 9))
                {
                  if (v52 == v48)
                  {
                    v27[1] = v49;
                    BOOL v53 = 1;
                  }
                  else
                  {
                    BOOL v53 = v28 < 0x20;
                    if (v28 > 0x1F)
                    {
                      LOWORD(v28) = 0;
                    }
                    else
                    {
                      uint64_t v55 = v26 + 24 * v28;
                      *(void *)uint64_t v55 = v48;
                      *(void *)(v55 + 8) = v49;
                      *(_DWORD *)(v55 + 16) = 0;
                      *(_WORD *)(v22 + 1544) = v28 + 1;
                    }
                    *((_WORD *)v27 + 9) = v28;
                  }
LABEL_78:
                  *a5 = !v21 || !v53;
                  return 1;
                }
              }
              unint64_t v27 = (unint64_t *)(v26 + 24 * v50);
            }
          }
          BOOL v21 = v28 < 0x20;
          if (v28 > 0x1F)
          {
            unsigned int v44 = *(unsigned __int16 *)(v22 + 1544);
            LOWORD(v28) = 0;
          }
          else
          {
            uint64_t v45 = v26 + 24 * *(unsigned __int16 *)(v22 + 1544);
            *(void *)uint64_t v45 = v24;
            *(void *)(v45 + 8) = v25;
            *(_DWORD *)(v45 + 16) = 0;
            unsigned int v44 = v28 + 1;
            *(_WORD *)(v22 + 1544) = v28 + 1;
          }
          *((_WORD *)i + 9) = v28;
LABEL_66:
          unsigned int v28 = v44;
          goto LABEL_67;
        }
      }
    }
  }
  uint64_t v56 = 0;
  uint64_t v57 = 0;
  get_sstt_gpu_va_region_offset(a2, (_DWORD *)&v57 + 1, &v57);
  get_sstt_gpu_va_region_offset(a4, (_DWORD *)&v56 + 1, &v56);
  uint64_t v9 = *(void *)(a1 + 6704);
  uint64_t v10 = *(void *)(a2 + 64);
  unint64_t v11 = v10 + HIDWORD(v57);
  unint64_t v12 = v10 + v57;
  uint64_t v13 = v9 + 776;
  uint64_t v14 = (unint64_t *)(v9 + 776);
  unsigned int v15 = *(unsigned __int16 *)(v9 + 1544);
  if (!*(_WORD *)(v9 + 1544))
  {
    *(void *)(v9 + 776) = v11;
    *(void *)(v9 + 784) = v12;
    *(_DWORD *)(v9 + 792) = 0;
    unsigned int v15 = 1;
    *(_WORD *)(v9 + 1544) = 1;
    goto LABEL_26;
  }
  for (uint32x2_t j = (unint64_t *)(v9 + 776); ; uint32x2_t j = (unint64_t *)(v13 + 24 * v17))
  {
    unint64_t v18 = *j;
    if (*j < v12 && j[1] > v11) {
      return 0;
    }
    if (v18 > v11)
    {
      unsigned int v17 = *((unsigned __int16 *)j + 8);
      if (*((_WORD *)j + 8)) {
        continue;
      }
      if (v18 == v12)
      {
        *uint32x2_t j = v11;
        goto LABEL_26;
      }
      if (v15 <= 0x1F)
      {
        uint64_t v39 = v13 + 24 * *(unsigned __int16 *)(v9 + 1544);
        *(void *)uint64_t v39 = v11;
        *(void *)(v39 + 8) = v12;
        *(_DWORD *)(v39 + 16) = 0;
        *(_WORD *)(v9 + 1544) = v15 + 1;
        *((_WORD *)j + 8) = v15++;
        goto LABEL_26;
      }
      *((_WORD *)j + 8) = 0;
      return 0;
    }
    unint64_t v19 = j[1];
    if (v19 > v12) {
      return 0;
    }
    unsigned int v17 = *((unsigned __int16 *)j + 9);
    if (!*((_WORD *)j + 9)) {
      break;
    }
  }
  if (v19 == v11)
  {
    j[1] = v12;
  }
  else
  {
    if (v15 > 0x1F)
    {
      *((_WORD *)j + 9) = 0;
      return 0;
    }
    uint64_t v40 = v13 + 24 * *(unsigned __int16 *)(v9 + 1544);
    *(void *)uint64_t v40 = v11;
    *(void *)(v40 + 8) = v12;
    *(_DWORD *)(v40 + 16) = 0;
    *(_WORD *)(v9 + 1544) = v15 + 1;
    *((_WORD *)j + 9) = v15++;
  }
LABEL_26:
  uint64_t v33 = *(void *)(a4 + 64);
  unint64_t v34 = v33 + HIDWORD(v56);
  unint64_t v35 = v33 + v56;
  while (2)
  {
    unint64_t v37 = *v14;
    if (*v14 < v35 && v14[1] > v34) {
      return 0;
    }
    if (v37 <= v34)
    {
      unint64_t v38 = v14[1];
      if (v38 > v35) {
        return 0;
      }
      unsigned int v36 = *((unsigned __int16 *)v14 + 9);
      if (!*((_WORD *)v14 + 9))
      {
        if (v38 == v34)
        {
          v14[1] = v35;
LABEL_52:
          *(_DWORD *)(a1 + 6696) = v8 + 1;
          return 1;
        }
        if (v15 <= 0x1F)
        {
          uint64_t v42 = v13 + 24 * v15;
          *(void *)uint64_t v42 = v34;
          *(void *)(v42 + 8) = v35;
          *(_DWORD *)(v42 + 16) = 0;
          *(_WORD *)(v9 + 1544) = v15 + 1;
          *((_WORD *)v14 + 9) = v15;
          goto LABEL_52;
        }
        uint64_t result = 0;
        *((_WORD *)v14 + 9) = 0;
        return result;
      }
      goto LABEL_28;
    }
    unsigned int v36 = *((unsigned __int16 *)v14 + 8);
    if (*((_WORD *)v14 + 8))
    {
LABEL_28:
      uint64_t v14 = (unint64_t *)(v13 + 24 * v36);
      continue;
    }
    break;
  }
  if (v37 == v35)
  {
    *uint64_t v14 = v34;
    goto LABEL_52;
  }
  if (v15 <= 0x1F)
  {
    uint64_t v41 = v13 + 24 * v15;
    *(void *)uint64_t v41 = v34;
    *(void *)(v41 + 8) = v35;
    *(_DWORD *)(v41 + 16) = 0;
    *(_WORD *)(v9 + 1544) = v15 + 1;
    *((_WORD *)v14 + 8) = v15;
    goto LABEL_52;
  }
  uint64_t result = 0;
  *((_WORD *)v14 + 8) = 0;
  return result;
}

void ProgramKey<(_AGCStreamToken)18,(AGX::DriverShaderCompilationMode)1>::serialize(uint64_t a1, void *a2, void *a3)
{
  unint64_t v6 = *(int **)(a1 + 16);
  *(void *)(a1 + 24) = v6;
  int v7 = *(unsigned __int8 *)(a1 + 8) | 0x100;
  unint64_t v8 = *(void *)(a1 + 32);
  if ((unint64_t)v6 >= v8)
  {
    uint64_t v10 = v8 - (void)v6;
    uint64_t v11 = v10 >> 1;
    if ((unint64_t)(v10 >> 1) <= 1) {
      uint64_t v11 = 1;
    }
    BOOL v12 = (unint64_t)v10 >= 0x7FFFFFFFFFFFFFFCLL;
    unint64_t v13 = 0x3FFFFFFFFFFFFFFFLL;
    if (!v12) {
      unint64_t v13 = v11;
    }
    if (v13 >> 62) {
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
    uint64_t v14 = v13;
    unsigned int v15 = operator new(4 * v13);
    unint64_t v16 = &v15[v14];
    _DWORD *v15 = v7;
    uint64_t v9 = v15 + 1;
    *(void *)(a1 + 16) = v15;
    *(void *)(a1 + 24) = v15 + 1;
    *(void *)(a1 + 32) = v16;
    if (v6) {
      operator delete(v6);
    }
  }
  else
  {
    *unint64_t v6 = v7;
    uint64_t v9 = v6 + 1;
  }
  *(void *)(a1 + 24) = v9;
  ProgramKey<(_AGCStreamToken)8,(AGX::DriverShaderCompilationMode)0>::finalizeStream((void *)a1);
  *a2 = *(void *)(a1 + 16);
  *a3 = *(void *)(a1 + 24) - *(void *)(a1 + 16);
}

uint64_t get_sstt_gpu_va_region_offset(uint64_t result, _DWORD *a2, _DWORD *a3)
{
  int v3 = *(_DWORD *)(result + 16);
  int v4 = *(_DWORD *)(result + 20);
  int v5 = *(_DWORD *)(result + 24);
  unsigned int v6 = *(_DWORD *)(result + 28);
  unsigned int v7 = *(_DWORD *)(result + 32);
  int v8 = v7 | v6;
  if (*(unsigned char *)(result + 57))
  {
    if (v8)
    {
      int v9 = 0;
      int v8 = 0;
      BOOL v10 = v6 != 0;
      BOOL v11 = v7 != 0;
      int v12 = 1;
      BOOL v13 = v6 != 0;
      BOOL v14 = v7 != 0;
      int v15 = *(_DWORD *)(result + 28);
      int v16 = *(_DWORD *)(result + 32);
      do
      {
        --v15;
        if (v13) {
          v8 |= (v12 & v3) << v9;
        }
        else {
          int v15 = 0;
        }
        if (v13) {
          ++v9;
        }
        --v16;
        if (v14) {
          v8 |= (v12 & v4) << v9;
        }
        else {
          int v16 = 0;
        }
        if (v14) {
          ++v9;
        }
        v12 *= 2;
        --v9;
        BOOL v14 = v16 != 0;
        BOOL v13 = v15 != 0;
      }
      while (v16 | v15);
      int v17 = 0;
      int v18 = 0;
      int v19 = v4 + *(_DWORD *)(result + 48) - 1;
      int v20 = v3 + *(_DWORD *)(result + 44) - 1;
      int v21 = 1;
      do
      {
        --v6;
        if (v10) {
          v18 |= (v21 & v20) << v17;
        }
        else {
          unsigned int v6 = 0;
        }
        if (v10) {
          int v22 = v17 + 1;
        }
        else {
          int v22 = v17;
        }
        --v7;
        if (v11) {
          v18 |= (v21 & v19) << v22;
        }
        else {
          unsigned int v7 = 0;
        }
        if (v11) {
          int v23 = v22 + 1;
        }
        else {
          int v23 = v22;
        }
        v21 *= 2;
        int v17 = v23 - 1;
        BOOL v11 = v7 != 0;
        BOOL v10 = v6 != 0;
        uint64_t result = v7 | v6;
      }
      while (result);
      goto LABEL_59;
    }
LABEL_58:
    int v18 = 0;
    goto LABEL_59;
  }
  if (!v8) {
    goto LABEL_58;
  }
  int v24 = 0;
  int v8 = 0;
  BOOL v25 = v7 != 0;
  BOOL v26 = v6 != 0;
  int v27 = 1;
  BOOL v28 = v7 != 0;
  BOOL v29 = v6 != 0;
  int v30 = *(_DWORD *)(result + 32);
  int v31 = *(_DWORD *)(result + 28);
  do
  {
    --v30;
    if (v28) {
      v8 |= (v27 & v4) << v24;
    }
    else {
      int v30 = 0;
    }
    if (v28) {
      ++v24;
    }
    --v31;
    if (v29) {
      v8 |= (v27 & v3) << v24;
    }
    else {
      int v31 = 0;
    }
    if (v29) {
      ++v24;
    }
    v27 *= 2;
    --v24;
    BOOL v29 = v31 != 0;
    BOOL v28 = v30 != 0;
  }
  while (v31 | v30);
  int v32 = 0;
  int v18 = 0;
  int v33 = v3 + *(_DWORD *)(result + 44) - 1;
  int v34 = v4 + *(_DWORD *)(result + 48) - 1;
  int v35 = 1;
  do
  {
    --v7;
    if (v25) {
      v18 |= (v35 & v34) << v32;
    }
    else {
      unsigned int v7 = 0;
    }
    if (v25) {
      int v36 = v32 + 1;
    }
    else {
      int v36 = v32;
    }
    --v6;
    if (v26) {
      v18 |= (v35 & v33) << v36;
    }
    else {
      unsigned int v6 = 0;
    }
    if (v26) {
      int v37 = v36 + 1;
    }
    else {
      int v37 = v36;
    }
    v35 *= 2;
    int v32 = v37 - 1;
    BOOL v26 = v6 != 0;
    BOOL v25 = v7 != 0;
    uint64_t result = v6 | v7;
  }
  while (result);
LABEL_59:
  *a2 = 4 * ((v8 + v5) | ((((v8 + v5) >> 8) & 0x1FFFFF) << 9));
  *a3 = 4 * ((v18 + v5) | ((((v18 + v5) >> 8) & 0x1FFFFF) << 9)) + 4;
  return result;
}

void *AGX::BlitDispatchParametersGen2_2<AGX::HAL200::Encoders,AGX::HAL200::Classes>::setupFastClearArguments(uint64_t a1, unsigned int *a2, unsigned __int16 *a3, uint64_t a4, unsigned int a5, int a6, int a7, int a8, int a9)
{
  uint64_t v60 = *MEMORY[0x263EF8340];
  uint64_t v15 = *(void *)(a4 + 32);
  uint64_t result = (void *)AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::isLargeMacroblock(a4);
  int v17 = (int)result;
  size_t v18 = *(unsigned __int8 *)(*(void *)(a4 + 208) + 88);
  uint64_t v55 = v15;
  unsigned int v19 = 4 * v18;
  if (!result) {
    unsigned int v19 = *(unsigned __int8 *)(*(void *)(a4 + 208) + 88);
  }
  if ((v15 & 0xFFFFFFFFFFFFFFFELL) == 0x228) {
    size_t v20 = 5;
  }
  else {
    size_t v20 = v19;
  }
  int v21 = *(_DWORD *)(a4 + 112);
  if (*(unsigned char *)(a4 + 380) == 3 && *(_DWORD *)(a4 + 192) == 4)
  {
    *(_DWORD *)(a1 + 24) = a8;
    *(_DWORD *)(a1 + 28) = a7;
    a7 = a6;
    *(_DWORD *)(a1 + 20) = a9;
  }
  else
  {
    *(_DWORD *)(a1 + 20) = a8;
    *(_DWORD *)(a1 + 24) = a9;
    *(_DWORD *)(a1 + 28) = a6;
  }
  *(_DWORD *)(a1 + 32) = a7;
  *(_DWORD *)(a1 + 40) = v21;
  *(unsigned char *)(a1 + 47) = *(unsigned char *)(a4 + 380) == 2;
  uint64_t v22 = v20 >> 2;
  int v56 = v21;
  if ((result & 1) == 0)
  {
    *(unsigned char *)(a1 + 46) = 0;
    if (v20 <= 3)
    {
      for (unsigned int i = 0; i < 4; i += v20)
        uint64_t result = memcpy((void *)(a1 + i), a3, v20);
      goto LABEL_29;
    }
    if (v20 == 5)
    {
      unint64_t v24 = ((unint64_t)*a3 >> 6) & 0xFFFFFFFFC00003FFLL | ((((unint64_t)a3[1] >> 6) & 0x3FF) << 10) & 0xFFFFFFFFC00FFFFFLL | ((((unint64_t)a3[2] >> 6) & 0x3FF) << 20);
      unint64_t v25 = (unint64_t)a3[3] >> 6;
      char v26 = HIBYTE(a3[3]);
      *(unsigned char *)(a1 + 4) = v26;
      LODWORD(v24) = v24 & 0x3FFFFFFF | (v25 << 30);
      *(_DWORD *)a1 = v24;
      *(unsigned char *)(a1 + 9) = v26;
      *(_DWORD *)(a1 + 5) = v24;
      goto LABEL_29;
    }
    if (v20 >= 0x20 && (unint64_t)(a1 - (void)a3) > 0x1F)
    {
      uint64_t v28 = v22 & 0xF8;
      BOOL v29 = (_OWORD *)(a1 + 16);
      int v30 = (long long *)(a3 + 8);
      uint64_t v31 = v28;
      do
      {
        long long v32 = *v30;
        *(v29 - 1) = *(v30 - 1);
        *BOOL v29 = v32;
        v29 += 2;
        v30 += 2;
        v31 -= 8;
      }
      while (v31);
      if (v28 == v22) {
        goto LABEL_29;
      }
    }
    else
    {
      uint64_t v28 = 0;
    }
    uint64_t v33 = v22 - v28;
    uint64_t v34 = 2 * v28;
    int v35 = (_DWORD *)(a1 + 4 * v28);
    int v36 = &a3[v34];
    do
    {
      int v37 = *(_DWORD *)v36;
      v36 += 2;
      *v35++ = v37;
      --v33;
    }
    while (v33);
    goto LABEL_29;
  }
  *(unsigned char *)(a1 + 46) = 1;
  memcpy(__dst, a3, v18);
  memcpy(&__dst[v18], a3, v18);
  memcpy(&__dst[2 * v18], a3, v18);
  uint64_t result = memcpy(&__dst[2 * v18 + v18], a3, v18);
  if (v20 >= 4) {
    uint64_t result = memcpy((void *)a1, __dst, v20 & 0x3FC);
  }
LABEL_29:
  uint64_t v38 = *(void *)(a4 + 488);
  if (!v38 || *(_DWORD *)(v38 + 1080) <= a5)
  {
LABEL_36:
    int v41 = 0;
    char v40 = 0;
    __int16 v42 = 8;
    goto LABEL_37;
  }
  int v39 = *(unsigned __int8 *)(a4 + 57);
  if (v39 == 1)
  {
    *(_WORD *)(a1 + 44) = 6;
    if (((unint64_t)(v55 - 586) > 0x2B || ((1 << (v55 - 74)) & 0xC0000000003) == 0)
      && ((unint64_t)(v55 - 90) > 4 || ((1 << (v55 - 90)) & 0x13) == 0)
      && (unint64_t)(v55 - 554) >= 2)
    {
      int v41 = 0;
      char v40 = 1;
      if (!*(unsigned char *)(a1 + 47)) {
        goto LABEL_56;
      }
      goto LABEL_38;
    }
    int v41 = 0;
    char v40 = 0;
    __int16 v42 = 7;
    goto LABEL_37;
  }
  if (v39 != 2)
  {
    if (v39 == 3)
    {
      char v40 = 0;
      *(_WORD *)(a1 + 44) = 4;
      int v41 = 1;
      if (!*(unsigned char *)(a1 + 47)) {
        goto LABEL_56;
      }
      goto LABEL_38;
    }
    goto LABEL_36;
  }
  int v41 = 0;
  char v40 = 0;
  __int16 v42 = 5;
LABEL_37:
  *(_WORD *)(a1 + 44) = v42;
  if (!*(unsigned char *)(a1 + 47)) {
    goto LABEL_56;
  }
LABEL_38:
  if (v20 == 5) {
    int v43 = 0;
  }
  else {
    int v43 = v41;
  }
  if (((v20 == 5) & v40) != 0) {
    int v44 = 4;
  }
  else {
    int v44 = v18;
  }
  unsigned int v45 = v18 >> 1;
  if (v18 <= 1) {
    unsigned int v45 = 1;
  }
  if (v43 == 1) {
    int v44 = v45;
  }
  if (v17) {
    int v44 = 4 * v18;
  }
  unsigned int v46 = __clz(v44 * v56);
  unsigned int v47 = 0x80u >> ((31 - v46) >> 1);
  unsigned int v48 = 0x80u >> ((32 - v46) >> 1);
  if ((v41 & (v20 == 1)) != 0) {
    unsigned int v49 = 256;
  }
  else {
    unsigned int v49 = v47;
  }
  unsigned int v50 = *(_DWORD *)(a4 + 128) >> (*(unsigned char *)(a4 + 144) + a5);
  if (v50 <= 1) {
    unsigned int v50 = 1;
  }
  *(_DWORD *)(a1 + 36) = (v49 + v50 - 1) / v49 * v56 * v48 * v49;
LABEL_56:
  if (v17) {
    unsigned int v51 = v20 >> 2;
  }
  else {
    unsigned int v51 = v20;
  }
  int v52 = v51 - 1;
  if (v18 == 16) {
    int v53 = 7;
  }
  else {
    int v53 = v52;
  }
  if (v52) {
    int v54 = v53;
  }
  else {
    int v54 = 96;
  }
  *(_DWORD *)(a1 + 16) = (v54 << 16) | (v54 << 8) | (v54 << 24) | v54;
  *a2 = (v20 + 1) >> 1;
  return result;
}

double ___ZN3AGX18BlitUSCStateLoaderINS_6HAL2008EncodersENS1_7ClassesEE17dataBufferConfigsERK16AGXGPUCoreConfig_block_invoke(uint64_t a1)
{
  uint64_t v1 = (*(_DWORD *)(*(void *)(a1 + 32) + 24) << 8) | 0x80u;
  AGX::BlitUSCStateLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes>::databuffer_configs = 0x2000;
  *(void *)algn_268D59128 = v1;
  qword_268D59130 = 8;
  dword_268D59138 = 1;
  xmmword_268D593E0 = xmmword_242EA7E50;
  qword_268D593F0 = 8;
  dword_268D593F8 = 1;
  qword_268D59188 = 0;
  unk_268D59190 = 0;
  qword_268D59180 = 0x2000;
  dword_268D59198 = 1;
  qword_268D594E0 = 0x2000;
  qword_268D594F0 = 0;
  qword_268D594E8 = 0;
  dword_268D594F8 = 1;
  qword_268D591C8 = 0;
  unk_268D591D0 = 0;
  qword_268D591C0 = 0x2000;
  dword_268D591D8 = 1;
  qword_268D59268 = 0;
  unk_268D59270 = 0;
  qword_268D59260 = 0x2000;
  dword_268D59278 = 1;
  qword_268D591A8 = 0;
  unk_268D591B0 = 0;
  qword_268D591A0 = 0x2000;
  dword_268D591B8 = 4;
  qword_268D591E8 = 0;
  unk_268D591F0 = 0;
  qword_268D591E0 = 0x2000;
  dword_268D591F8 = 4;
  qword_268D59288 = 0;
  unk_268D59290 = 0;
  qword_268D59280 = 0x2000;
  dword_268D59298 = 4;
  *(void *)&double result = 0x2000;
  xmmword_268D592C0 = xmmword_242EA7E60;
  qword_268D592D0 = 12;
  dword_268D592D8 = 1;
  qword_268D592E8 = 0;
  unk_268D592F0 = 0;
  qword_268D592E0 = 0x2000;
  dword_268D592F8 = 4;
  qword_268D59360 = 0x2000;
  qword_268D59370 = 0;
  qword_268D59368 = 0;
  dword_268D59378 = 1;
  qword_268D59380 = 0x2000;
  qword_268D59390 = 0;
  qword_268D59388 = 0;
  dword_268D59398 = 1;
  qword_268D59500 = 0x2000;
  qword_268D59510 = 0;
  qword_268D59508 = 0;
  dword_268D59518 = 1;
  return result;
}

void AGX::BlitUSCStateLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes>::setupBlitCommand(uint64_t a1, void *a2, uint64_t a3, void *a4, uint64_t a5)
{
  uint64_t v159 = *MEMORY[0x263EF8340];
  unsigned int v7 = *(_DWORD *)(a5 + 3948);
  unsigned int v8 = *(_DWORD *)(a5 + 2588);
  int v9 = *(_DWORD *)(a5 + 3940);
  int v10 = *(_DWORD *)(a5 + 3944);
  int v11 = *(_DWORD *)(a5 + 5072);
  memset(v158, 0, 44);
  uint64_t v12 = v7 >> 2;
  if (v8 <= 1) {
    uint64_t v13 = 1;
  }
  else {
    uint64_t v13 = v8;
  }
  int v14 = 4 * v13 * v12;
  if (v10 * v9 * v14 && (v15 = 1 << -__clz(v9 - 1), unsigned int v16 = -__clz(v10 - 1), (v15 << v16) * v14))
  {
    *((void *)&v158[0] + 1) = AGX::ESLInstructionEncoderGen3<AGX::HAL200::Encoders>::SpecLM::encodeImageBlockData(v12, v13, v15, 1 << (v16 & 0x1F));
    *(void *)&v158[1] = v17;
    int v18 = 0x10000;
  }
  else
  {
    int v18 = 0;
  }
  int v19 = (v11 + 63) & 0xFFC0;
  if (((v11 + 63) & 0xFFFFFFC0) == 0x10000) {
    int v19 = 0;
  }
  *(_DWORD *)((char *)v158 + 2) = v19 | v18;
  LOBYTE(v158[0]) = v11 != 0;
  AGX::ESLInstructionEncoderGen3<AGX::HAL200::Encoders>::AGX3EncodedInstr<AGXIotoInstruction_SPECLM_0>::AGX3EncodedInstr((unint64_t *)&v157, (char *)v158);
  uint64_t v149 = v157;
  uint64_t v20 = *(void *)(a5 + 4384);
  int v21 = (void *)(a5 + 2656);
  unsigned int v22 = *(_DWORD *)(v20 + 1680);
  do
  {
    IOGPUResourceListAddResource();
    v22 &= ~(1 << __clz(__rbit32(v22)));
  }
  while (v22);
  uint64_t v23 = (*(_DWORD *)(*(void *)(v20 + 1344) + 8) - **(_DWORD **)(v20 + 1344)) + 63;
  unint64_t v24 = a4;
  unint64_t v25 = a4[30] + v23;
  if (v25 <= a4[29]) {
    goto LABEL_13;
  }
  unint64_t v24 = a4;
  if (AGX::DataBufferAllocator<34ul>::growNoInline(a4, 6, 0))
  {
    unint64_t v25 = a4[30] + v23;
    if (v25 > a4[29]) {
      abort();
    }
LABEL_13:
    v24[31] = v25;
  }
  uint64_t v26 = *(unsigned int *)(v20 + 16) + 31;
  unint64_t v27 = v24[22] + v26;
  if (v27 <= v24[21])
  {
LABEL_15:
    v24[23] = v27;
    goto LABEL_16;
  }
  int v141 = AGX::DataBufferAllocator<34ul>::growNoInline(v24, 4, 0);
  unint64_t v24 = a4;
  if (v141)
  {
    unint64_t v27 = a4[22] + v26;
    if (v27 > a4[21]) {
      abort();
    }
    goto LABEL_15;
  }
LABEL_16:
  uint64_t v28 = *(unsigned int *)(v20 + 16);
  if (v28)
  {
    unint64_t v29 = (v24[22] + 31) & 0xFFFFFFFFFFFFFFE0;
    unint64_t v30 = v29 + v24[24];
    v24[22] = v29 + v28;
  }
  else
  {
    unint64_t v30 = 0;
    unint64_t v29 = 0;
  }
  uint64_t v31 = (char *)((v24[30] + 63) & 0xFFFFFFFFFFFFFFC0);
  uint64_t v32 = v24[32];
  v24[30] = &v31[*(_DWORD *)(*(void *)(v20 + 1344) + 8) - **(_DWORD **)(v20 + 1344)];
  unint64_t v33 = *(void *)(v20 + 248) - *(void *)(v20 + 240);
  int v34 = *(_DWORD *)(v20 + 200);
  if (v33) {
    int v35 = *(_DWORD *)(v20 + 200) & 1;
  }
  else {
    int v35 = 0;
  }
  if (!v28) {
    goto LABEL_67;
  }
  unint64_t v36 = *(unsigned int *)(v20 + 424);
  int v37 = *(int **)(v20 + 48);
  uint64_t v38 = (*(void *)(v20 + 56) - (void)v37) >> 2;
  int v39 = *(_DWORD *)(v20 + 412);
  uint64_t v40 = *(void *)(v20 + 96);
  uint64_t v41 = *(void *)(v20 + 104);
  uint64_t v43 = *(void *)(v20 + 72);
  uint64_t v42 = *(void *)(v20 + 80);
  int v44 = *(_DWORD *)(v20 + 208);
  int v45 = *(_DWORD *)(v20 + 212);
  uint64_t v47 = *(void *)(v20 + 144);
  uint64_t v46 = *(void *)(v20 + 152);
  int v48 = *(unsigned __int8 *)(v20 + 456);
  int v49 = *(unsigned __int8 *)(v20 + 457);
  if (*(unsigned char *)(v20 + 456)) {
    *(void *)(a5 + 3448) = v30 + *(unsigned int *)(v20 + 20);
  }
  unint64_t v50 = v41 - v40;
  if (v49) {
    *(void *)(a5 + 3456) = v30 + *(unsigned int *)(v20 + 40);
  }
  unint64_t v51 = v50 >> 2;
  unint64_t v52 = v42 - v43;
  if (v38 != v36)
  {
    if (v39)
    {
      int v55 = v39;
      int v56 = (void *)v29;
      uint64_t v57 = v37;
      do
      {
        int v58 = *v57++;
        *v56++ = v21[v58];
        --v55;
      }
      while (v55);
    }
    if (*(_DWORD *)(v20 + 280))
    {
      uint64x2_t v59 = *(void **)(v20 + 264);
      if (v59 != (void *)(v20 + 272))
      {
        do
        {
          *(_DWORD *)(v29 + 4 * *((unsigned int *)v59 + 7)) |= *((_DWORD *)v59 + 8);
          unsigned int v114 = (void *)v59[1];
          if (v114)
          {
            do
            {
              unsigned int v115 = v114;
              unsigned int v114 = (void *)*v114;
            }
            while (v114);
          }
          else
          {
            do
            {
              unsigned int v115 = (void *)v59[2];
              BOOL v138 = *v115 == (void)v59;
              uint64x2_t v59 = v115;
            }
            while (!v138);
          }
          uint64x2_t v59 = v115;
        }
        while (v115 != (void *)(v20 + 272));
      }
    }
    unsigned int v60 = (v39 + 3) & 0xFFFFFFFC;
    if (v48)
    {
      unsigned int v61 = *(_DWORD *)(v20 + 416);
      if (v61 >= 4)
      {
        uint32x2_t v62 = &v37[v60];
        unsigned int v63 = v61 >> 2;
        long long v64 = (_OWORD *)(v29 + 8 * v60);
        do
        {
          int v65 = *v62;
          v62 += 4;
          int v66 = &v21[v65];
          long long v67 = v66[1];
          _OWORD *v64 = *v66;
          v64[1] = v67;
          v64 += 2;
          --v63;
        }
        while (v63);
      }
      v60 += v61;
    }
    if (v49)
    {
      unsigned int v68 = *(_DWORD *)(v20 + 420);
      long long v69 = (void *)(v29 + 8 * v60);
      if (*(unsigned char *)(v20 + 1144))
      {
        if (v68)
        {
          unsigned int v142 = (int *)(*(void *)(v20 + 48) + 4 * v60);
          do
          {
            int v143 = *v142++;
            *v69++ = v21[v143];
            --v68;
          }
          while (v68);
        }
      }
      else if (v68 >= 4)
      {
        long long v70 = (int *)(*(void *)(v20 + 48) + 4 * v60);
        unsigned int v71 = v68 >> 2;
        do
        {
          int v72 = *v70;
          v70 += 4;
          *long long v69 = v21[v72];
          v69 += 4;
          --v71;
        }
        while (v71);
      }
    }
    unsigned int v53 = 8 * (v38 - v36);
    unint64_t v54 = v52 >> 2;
    if (!v36) {
      goto LABEL_50;
    }
    goto LABEL_46;
  }
  unsigned int v53 = 0;
  unint64_t v54 = v52 >> 2;
  if (v36)
  {
LABEL_46:
    if (v36 >= 4)
    {
      long long v73 = *(uint64_t **)(v20 + 1848);
      unint64_t v74 = v36 >> 2;
      long long v75 = (void *)(v29 + v53);
      do
      {
        uint64_t v76 = *v73;
        v73 += 4;
        *long long v75 = v76;
        v75 += 4;
        --v74;
      }
      while (v74);
    }
    v53 += 8 * v36;
  }
LABEL_50:
  unint64_t v77 = v33 >> 2;
  uint64_t v147 = v32;
  if (v51)
  {
    *int v21 = v30 + v53;
    v53 += 8 * v51;
  }
  int v78 = v45 + v44;
  uint64_t v79 = a5 + 3464;
  if (v54)
  {
    long long v80 = (_DWORD *)(v29 + v53);
    *(void *)(a5 + 3792) = v30 + v53 + 8;
    uint64_t v81 = *(unsigned int **)(v20 + 72);
    int v82 = v54;
    do
    {
      unsigned int v83 = *v81++;
      *v80++ = *(_DWORD *)(v79 + 4 * v83);
      --v82;
    }
    while (v82);
    v53 += 4 * v54;
  }
  if (v77)
  {
    int v84 = 8 * (v51 + v38) + 4 * (v35 + v34);
    uint64_t v85 = (void *)(v29 + (v84 & 0xFFFFFFFC));
    uint32x2_t v86 = *(int **)(v20 + 240);
    do
    {
      int v87 = *v86++;
      *v85++ = v21[v87];
      LODWORD(v77) = v77 - 1;
    }
    while (v77);
    unsigned int v53 = v84 + 8 * (v33 >> 2);
  }
  uint64_t v88 = v46 - v47;
  if (v78)
  {
    int v144 = v78;
    unint64_t v145 = v30;
    int v89 = (char *)(v29 + v53);
    uint64_t v90 = *(unsigned int *)(v20 + 208);
    memcpy(v89, (char *)v21 + 4 * *(unsigned int *)(v20 + 204), 4 * v90);
    int v91 = *(_DWORD *)(v20 + 212);
    if (v91)
    {
      int v92 = *(unsigned int **)(v20 + 216);
      unsigned int v93 = &v89[4 * v90];
      do
      {
        unsigned int v94 = *v92++;
        *(_DWORD *)unsigned int v93 = *(_DWORD *)(v79 + 4 * v94);
        v93 += 4;
        --v91;
      }
      while (v91);
    }
    v53 += 4 * v144;
    unint64_t v30 = v145;
  }
  unint64_t v24 = a4;
  uint64_t v32 = v147;
  if ((v88 & 0x3FFFFFFFCLL) != 0)
  {
    unint64_t v95 = v30 + v53;
    *(void *)(a5 + 3792) = v95 + 8;
    *(void *)(a5 + 2656) = v95;
  }
LABEL_67:
  unint64_t v96 = v30;
  uint64_t v97 = *(void *)(v20 + 1344);
  memcpy(v31, *(const void **)v97, *(void *)(v97 + 8) - *(void *)v97);
  if (*(unsigned char *)(v97 + 200))
  {
    v98.i64[0] = v96;
    v98.i64[1] = v96 >> 5;
    *(int8x16_t *)&v31[*(unsigned int *)(v97 + 204)] = vbslq_s8((int8x16_t)xmmword_242EA7D10, *(int8x16_t *)&v31[*(unsigned int *)(v97 + 204)], (int8x16_t)vshlq_u8((uint8x16_t)vqtbl1q_s8(v98, (int8x16_t)xmmword_242EA7CF0), (uint8x16_t)xmmword_242EA7D00));
  }
  unsigned int v99 = *(unsigned int **)(v97 + 176);
  for (unsigned int i = *(unsigned int **)(v97 + 184); v99 != i; v99 += 3)
  {
    v101.i64[0] = v21[v99[1]] + *v99;
    v101.i64[1] = (unint64_t)v101.i64[0] >> 5;
    *(int8x16_t *)&v31[v99[2]] = vbslq_s8((int8x16_t)xmmword_242EA7D10, *(int8x16_t *)&v31[v99[2]], (int8x16_t)vshlq_u8((uint8x16_t)vqtbl1q_s8(v101, (int8x16_t)xmmword_242EA7CF0), (uint8x16_t)xmmword_242EA7D00));
  }
  if (!*(_DWORD *)(v97 + 240)) {
    *(void *)&v31[*(unsigned __int16 *)(v97 + 244)] = v149;
  }
  unint64_t v102 = (unint64_t)&v31[v32];
  unsigned int v103 = *(char ***)a1;
  if (*(void *)a1)
  {
    unsigned int v105 = *(const void **)v97;
    uint64_t v104 = *(void *)(v97 + 8);
    int v106 = *(_DWORD *)(v20 + 1752);
    LODWORD(v107) = *((_DWORD *)v103 + 2);
    int v108 = v107 + 1;
    if (*((_DWORD *)v103 + 3) >= (v107 + 1))
    {
      unsigned int v112 = *v103;
    }
    else
    {
      int v146 = *(const void **)v97;
      uint64_t v148 = *(void *)(v97 + 8);
      int v109 = *(_DWORD *)(v20 + 1752);
      unsigned int v110 = -__clz(v107);
      unsigned int v111 = (char *)malloc_type_malloc(40 << (v110 & 0x1F), 0x10800400D7C94D2uLL);
      unsigned int v112 = v111;
      int v113 = 1 << v110;
      uint64_t v107 = *((unsigned int *)v103 + 2);
      if (v107)
      {
        memcpy(v111, *v103, 40 * v107);
        free(*v103);
        LODWORD(v107) = *((_DWORD *)v103 + 2);
      }
      int v106 = v109;
      LODWORD(v105) = v146;
      LODWORD(v104) = v148;
      *((_DWORD *)v103 + 3) = v113;
      char *v103 = v112;
      unint64_t v24 = a4;
    }
    uint32x2_t v116 = &v112[40 * v107];
    *(_DWORD *)uint32x2_t v116 = 9;
    *((void *)v116 + 1) = v102;
    *((void *)v116 + 2) = v31;
    *((void *)v116 + 3) = (v104 - v105);
    *((_DWORD *)v116 + 8) = v106;
    *((_DWORD *)v103 + 2) = v108;
  }
  unint64_t v117 = *(void *)(v20 + 2600) & 0xFFFF00000000003FLL | (((v102 >> 6) & 0x3FFFFFFFFFFLL) << 6);
  a2[20] = *(void *)(v20 + 2592) & 0x7FFFFFFFFFFFLL | ((unint64_t)*(unsigned int *)(v20 + 2616) << 47);
  a2[21] = v117;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(v20 + 392);
  uint64x2_t v118 = (__int32 *)(a1 + 20);
  unint64_t v120 = (unsigned __int32 *)(a1 + 16);
  unsigned __int32 v119 = *(_DWORD *)(a1 + 16);
  if (v119 <= *(_DWORD *)(v20 + 396)) {
    unsigned __int32 v119 = *(_DWORD *)(v20 + 396);
  }
  if (v119 <= *(_DWORD *)(v20 + 408)) {
    unsigned __int32 v119 = *(_DWORD *)(v20 + 408);
  }
  BOOL v122 = (unsigned __int32 *)(a1 + 24);
  unsigned __int32 v121 = *(_DWORD *)(a1 + 24);
  unsigned __int32 *v120 = v119;
  unsigned __int32 v123 = *(_DWORD *)(v20 + 428);
  if (v121 > v123) {
    unsigned __int32 v123 = v121;
  }
  if (v123 <= *(_DWORD *)(v20 + 440)) {
    unsigned __int32 v123 = *(_DWORD *)(v20 + 440);
  }
  *BOOL v122 = v123;
  uint64_t v124 = *(uint32x2_t **)(a5 + 4856);
  uint64_t v157 = 0;
  *(void *)&v158[0] = 0;
  WORD4(v158[0]) = 256;
  *(void *)((char *)v158 + 10) = v149;
  uint64_t v155 = 0;
  uint64_t v156 = 0;
  uint64_t v153 = 0;
  int v154 = 0;
  uint64_t v125 = AGX::EndOfTileEmitter<AGX::HAL200::Encoders,AGX::HAL200::Classes>::emitEndOfTileArgumentsEarly(a3, v24, (uint64_t)v124, (uint64_t)v158, &v157, &v156, &v155, (unint64_t *)&v154, (unint64_t *)&v153);
  uint64_t v127 = v126;
  AGX::EndOfTileEmitter<AGX::HAL200::Encoders,AGX::HAL200::Classes>::emitEndOfTileArgumentsLate((uint64_t)v124, a5 + 448, v157, (int)v156, v155, v154, v153, *(char ***)a1);
  a2[24] = v125;
  a2[25] = v127;
  a2[26] = v125;
  a2[27] = v127;
  unsigned __int32 v128 = v124[8].u32[1];
  if (*v120 > v128) {
    unsigned __int32 v128 = *v120;
  }
  if (v128 <= v124[9].i32[1]) {
    unsigned __int32 v128 = v124[9].u32[1];
  }
  unsigned __int32 *v120 = v128;
  unsigned __int32 v129 = v124[10].u32[0];
  if (*v122 > v129) {
    unsigned __int32 v129 = *v122;
  }
  v130.i32[0] = v129;
  v130.i32[1] = *v118;
  *(int32x2_t *)uint64x2_t v118 = vrev64_s32((int32x2_t)vmax_u32(v130, v124[11]));
  unint64_t v131 = *(void *)(a1 + 8) & 0xFFFFFFFFFFFFFFC0 | ((unint64_t)(((*(_DWORD *)(a5 + 5084) + 1023) >> 10)
                                                                        + 1) >> 1) & 0x3F;
  *(void *)(a1 + 8) = v131;
  int v132 = *(_DWORD *)(a5 + 2588);
  if (v132 != 1)
  {
    unsigned int v133 = *(_DWORD *)(a5 + 3940);
    unsigned int v134 = *(_DWORD *)(a5 + 3944);
    unsigned int v135 = *(_DWORD *)(a5 + 3948) & 0xFFFFFFFC;
    if (v132 == 4)
    {
      unsigned int v137 = ((v134 >> 2) * (v133 >> 3) * ((v135 + 31) >> 5)) >> 1;
    }
    else if (v132 == 2)
    {
      unsigned int v136 = (v134 >> 2) * (v133 >> 3) * ((v135 + 31) >> 5);
      if (v136 < 8) {
        unsigned int v137 = 1;
      }
      else {
        unsigned int v137 = v136 >> 3;
      }
    }
    else
    {
      unsigned int v137 = 0;
    }
    BOOL v138 = v132 == 2 && v133 == 16;
    char v140 = !v138 || v134 != 16;
    unint64_t v131 = v131 & 0xFFFFFFFFFFE0FFFFLL | (((v137 >> v140) & 0x1F) << 16);
    *(void *)(a1 + 8) = v131;
  }
  a2[55] = v131;
}

unint64_t *AGX::ESLInstructionEncoderGen3<AGX::HAL200::Encoders>::AGX3EncodedInstr<AGXIotoInstruction_SPECLM_0>::AGX3EncodedInstr(unint64_t *result, char *a2)
{
  uint64_t v2 = 0;
  int v4 = *((_DWORD *)a2 + 2);
  unsigned int v3 = *((_DWORD *)a2 + 3);
  BOOL v5 = v4 == 10;
  if (!v4) {
    BOOL v5 = 1;
  }
  BOOL v6 = v3 == 7;
  if (v3 == 4) {
    BOOL v6 = 1;
  }
  BOOL v7 = v3 < 2 || v3 == 4;
  if (v3) {
    BOOL v8 = 0;
  }
  else {
    BOOL v8 = v5;
  }
  if (v3) {
    unsigned int v9 = v6;
  }
  else {
    unsigned int v9 = 1;
  }
  if (v3 == 8) {
    int v10 = 1;
  }
  else {
    int v10 = v9;
  }
  if (v3 == 1)
  {
    int v10 = 1;
    unsigned int v9 = 1;
  }
  int v11 = v3 == 5 || v7;
  if (v3 == 5)
  {
    int v10 = 1;
    unsigned int v9 = 1;
  }
  unsigned int v12 = v3 & 0xFFFFFFFE;
  if (v3 == 2) {
    int v13 = 1;
  }
  else {
    int v13 = v11;
  }
  if (v3 == 2) {
    int v14 = 1;
  }
  else {
    int v14 = v10;
  }
  if (v3 == 2) {
    unsigned int v9 = 1;
  }
  BOOL v15 = v12 == 2 || v3 < 2;
  if (v12 == 2)
  {
    int v11 = 1;
    BOOL v7 = 1;
  }
  BOOL v16 = v4 == 7 && v15;
  BOOL v17 = v3 == 3 || v3 == 6;
  int v18 = v17 | v13;
  if (v4 == 4) {
    int v19 = v18;
  }
  else {
    int v19 = 0;
  }
  if (v4) {
    int v20 = (v8 || v16) | v19;
  }
  else {
    int v20 = 1;
  }
  BOOL v21 = v4 == 8 && v3 < 3;
  if (v4 == 5) {
    int v22 = v11;
  }
  else {
    int v22 = 0;
  }
  BOOL v23 = v4 == 9 && v3 < 2;
  if (v4 != 6) {
    BOOL v7 = 0;
  }
  unsigned __int16 v24 = 119;
  if (a2[24])
  {
    unsigned __int16 v28 = 0;
    LOWORD(v9) = 0;
    goto LABEL_219;
  }
  int v25 = (v4 == 1) & ((v17 || v3 == 9) | v14);
  int v26 = (v4 == 2) & (v17 | v14);
  int v27 = (v4 == 3) & (v17 | v9);
  unsigned __int16 v28 = 0;
  LOWORD(v9) = 0;
  if (((v20 | v21 | v25 | v22 | v26 | (v23 || v7) | v27) & 1) == 0) {
    goto LABEL_219;
  }
  int v29 = *((_DWORD *)a2 + 7);
  int v30 = *((_DWORD *)a2 + 8);
  int v31 = *((_DWORD *)a2 + 9);
  unsigned int v32 = a2[40];
  unsigned int v33 = *(_DWORD *)(a2 + 2);
  unsigned int v9 = ((v32 >> 5) | (a2[20] << 6)) & 0xFFFFFE01;
  if (v31 == 1)
  {
    LOWORD(v9) = v9 | 4;
  }
  else if (!v31)
  {
    LOWORD(v9) = v9 | 2;
  }
  int v34 = *((_DWORD *)a2 + 4);
  if (v30)
  {
    if (v30 == 1)
    {
      LOWORD(v9) = v9 & 0xFFE7 | 0x10;
    }
    else if (v30 == 2)
    {
      LOWORD(v9) = v9 & 0xFFE7;
    }
  }
  else
  {
    LOWORD(v9) = v9 & 0xFFE7 | 8;
  }
  __int16 v35 = ((((v32 >> 1) & 1) << 12) | ((v32 & 1) << 11)) & 0x1FFF | (((v32 >> 2) & 1) << 13) & 0x3FFF | (((v32 >> 3) & 1) << 14) & 0x7FFF | (((v32 >> 4) & 0xF) << 15);
  int v36 = (v33 >> 10) & 0x40 | (v33 >> 6 << 8);
  char v37 = *a2;
  if (v29)
  {
    if (v29 == 1)
    {
      LOWORD(v9) = v9 & 0xFF9F | 0x40;
    }
    else if (v29 == 2)
    {
      LOWORD(v9) = v9 & 0xFF9F;
    }
  }
  else
  {
    LOWORD(v9) = v9 & 0xFF9F | 0x20;
  }
  uint64_t v2 = (unsigned __int16)v33 >> 14;
  unsigned __int16 v24 = v35 | 0x77;
  unsigned __int16 v28 = v36 & 0xFF7F | ((v37 & 1) << 7);
  if (v34)
  {
    if (v34 == 2)
    {
      LOWORD(v9) = v9 & 0xFE7F | 0x80;
      if (!v8) {
        goto LABEL_89;
      }
      goto LABEL_86;
    }
    if (v34 == 1)
    {
      LOWORD(v9) = v9 & 0xFE7F;
      if (!v8)
      {
LABEL_89:
        if (v16)
        {
          if (v3 && (v3 == 1 || (v28 |= 8u, v3 != 2))) {
            LOWORD(v9) = v9 | 0xC000;
          }
          else {
            LOWORD(v9) = v9 & 0x3FFF | 0x8000;
          }
          goto LABEL_219;
        }
        if (v19)
        {
          unsigned __int16 v38 = v28 | 1;
          if (v3 == 4)
          {
LABEL_99:
            LOWORD(v9) = v9 & 0xBFFF;
            unsigned __int16 v28 = v38;
            goto LABEL_219;
          }
          if (v3)
          {
            switch(v3)
            {
              case 1u:
                LOWORD(v9) = v9 & 0xBFFF;
                __int16 v39 = 9;
                goto LABEL_218;
              case 5u:
                LOWORD(v9) = v9 | 0x4000;
                __int16 v39 = 9;
                goto LABEL_218;
              case 2u:
                LOWORD(v9) = v9 & 0xBFFF;
                __int16 v39 = 17;
                goto LABEL_218;
              case 6u:
                LOWORD(v9) = v9 | 0x4000;
                __int16 v39 = 17;
                goto LABEL_218;
              case 3u:
                LOWORD(v9) = v9 & 0xBFFF;
                __int16 v39 = 25;
                goto LABEL_218;
            }
LABEL_220:
            unsigned __int16 v28 = v38;
            goto LABEL_219;
          }
          goto LABEL_164;
        }
        if (v4)
        {
          if (v21)
          {
            unsigned __int16 v38 = v28 | 2;
            if (!v3) {
              goto LABEL_99;
            }
            if (v3 == 1) {
              goto LABEL_164;
            }
            LOWORD(v9) = v9 & 0xBFFF;
            __int16 v39 = 10;
LABEL_218:
            v28 |= v39;
            goto LABEL_219;
          }
          if (v25)
          {
            __int16 v42 = v9 | 0x8000;
            unsigned __int16 v43 = v28 | 2;
            if (v3 != 7)
            {
              switch(v3)
              {
                case 4u:
LABEL_114:
                  LOWORD(v9) = v9 | 0xC000;
                  unsigned __int16 v28 = v43;
                  goto LABEL_219;
                case 0u:
                  LOWORD(v9) = v9 & 0x3FFF | 0x8000;
                  __int16 v39 = 10;
                  goto LABEL_218;
                case 8u:
                  LOWORD(v9) = v9 | 0xC000;
                  __int16 v39 = 10;
                  goto LABEL_218;
                case 1u:
                  LOWORD(v9) = v9 & 0x3FFF | 0x8000;
                  __int16 v39 = 18;
                  goto LABEL_218;
                case 5u:
                  LOWORD(v9) = v9 | 0xC000;
                  __int16 v39 = 18;
                  goto LABEL_218;
                case 2u:
                  LOWORD(v9) = v9 & 0x3FFF | 0x8000;
                  __int16 v39 = 26;
                  goto LABEL_218;
                case 9u:
                  LOWORD(v9) = v9 | 0xC000;
                  __int16 v39 = 26;
                  goto LABEL_218;
                case 6u:
                  LOWORD(v9) = v9 & 0x3FFF | 0x8000;
                  __int16 v39 = 34;
                  goto LABEL_218;
                case 3u:
                  LOWORD(v9) = v9 | 0xC000;
                  __int16 v39 = 34;
                  goto LABEL_218;
              }
LABEL_212:
              unsigned __int16 v28 = v43;
              LOWORD(v9) = v42;
              goto LABEL_219;
            }
            goto LABEL_130;
          }
          if (v22)
          {
            unsigned __int16 v38 = v28 | 3;
            if (v3 == 4) {
              goto LABEL_99;
            }
            if (v3)
            {
              switch(v3)
              {
                case 1u:
                  LOWORD(v9) = v9 & 0xBFFF;
                  __int16 v39 = 11;
                  goto LABEL_218;
                case 5u:
                  LOWORD(v9) = v9 | 0x4000;
                  __int16 v39 = 11;
                  goto LABEL_218;
                case 2u:
                  LOWORD(v9) = v9 & 0xBFFF;
                  __int16 v39 = 19;
                  goto LABEL_218;
                case 3u:
                  LOWORD(v9) = v9 | 0x4000;
                  __int16 v39 = 19;
                  goto LABEL_218;
              }
              goto LABEL_220;
            }
LABEL_164:
            LOWORD(v9) = v9 | 0x4000;
            unsigned __int16 v28 = v38;
            goto LABEL_219;
          }
          if (v26)
          {
            __int16 v42 = v9 | 0x8000;
            unsigned __int16 v43 = v28 | 3;
            if (v3 != 7)
            {
              switch(v3)
              {
                case 4u:
                  goto LABEL_114;
                case 0u:
                  LOWORD(v9) = v9 & 0x3FFF | 0x8000;
                  __int16 v39 = 11;
                  goto LABEL_218;
                case 8u:
                  LOWORD(v9) = v9 | 0xC000;
                  __int16 v39 = 11;
                  goto LABEL_218;
                case 1u:
                  LOWORD(v9) = v9 & 0x3FFF | 0x8000;
                  __int16 v39 = 19;
                  goto LABEL_218;
                case 5u:
                  LOWORD(v9) = v9 | 0xC000;
                  __int16 v39 = 19;
                  goto LABEL_218;
                case 2u:
                  LOWORD(v9) = v9 & 0x3FFF | 0x8000;
                  __int16 v39 = 27;
                  goto LABEL_218;
                case 6u:
                  LOWORD(v9) = v9 | 0xC000;
                  __int16 v39 = 27;
                  goto LABEL_218;
                case 3u:
                  LOWORD(v9) = v9 & 0x3FFF | 0x8000;
                  __int16 v39 = 35;
                  goto LABEL_218;
              }
              goto LABEL_212;
            }
LABEL_130:
            LOWORD(v9) = v42 & 0xBFFF;
            unsigned __int16 v28 = v43;
            goto LABEL_219;
          }
          if (v23)
          {
            v28 |= 4u;
            if (v3)
            {
              LOWORD(v9) = v9 | 0x4000;
              goto LABEL_219;
            }
            goto LABEL_87;
          }
          if (!v7)
          {
            if (!v27) {
              goto LABEL_219;
            }
            unsigned __int16 v38 = v28 | 5;
            if (v3 == 7) {
              goto LABEL_99;
            }
            if (v3 != 4)
            {
              switch(v3)
              {
                case 0u:
                  LOWORD(v9) = v9 & 0xBFFF;
                  __int16 v39 = 13;
                  goto LABEL_218;
                case 1u:
                  LOWORD(v9) = v9 | 0x4000;
                  __int16 v39 = 13;
                  goto LABEL_218;
                case 5u:
                  LOWORD(v9) = v9 & 0xBFFF;
                  __int16 v39 = 21;
                  goto LABEL_218;
                case 2u:
                  LOWORD(v9) = v9 | 0x4000;
                  __int16 v39 = 21;
                  goto LABEL_218;
                case 6u:
                  LOWORD(v9) = v9 & 0xBFFF;
                  break;
                case 3u:
                  LOWORD(v9) = v9 | 0x4000;
                  break;
                default:
                  goto LABEL_220;
              }
              __int16 v39 = 29;
              goto LABEL_218;
            }
            goto LABEL_164;
          }
          __int16 v40 = v9 | 0x8000;
          unsigned __int16 v41 = v28 | 4;
          if (v3 != 4)
          {
            if (v3)
            {
              if (v3 == 1)
              {
                LOWORD(v9) = v9 & 0x3FFF | 0x8000;
                v28 |= 0xCu;
                goto LABEL_219;
              }
              if (v3 == 2)
              {
                LOWORD(v9) = v9 | 0xC000;
                v28 |= 0xCu;
                goto LABEL_219;
              }
              LOWORD(v9) = v9 & 0x3FFF | 0x8000;
              __int16 v39 = 20;
              goto LABEL_218;
            }
LABEL_116:
            LOWORD(v9) = v9 | 0xC000;
            unsigned __int16 v28 = v41;
            goto LABEL_219;
          }
        }
        else
        {
          __int16 v40 = v9 | 0x8000;
          unsigned __int16 v41 = v28 | 1;
          if (v3 != 10)
          {
            if (v3 != 7)
            {
              if (v3 == 4)
              {
                LOWORD(v9) = v9 & 0x3FFF | 0x8000;
                __int16 v39 = 9;
              }
              else if (v3)
              {
                switch(v3)
                {
                  case 8u:
                    LOWORD(v9) = v9 & 0x3FFF | 0x8000;
                    __int16 v39 = 17;
                    break;
                  case 1u:
                    LOWORD(v9) = v9 | 0xC000;
                    __int16 v39 = 17;
                    break;
                  case 5u:
                    LOWORD(v9) = v9 & 0x3FFF | 0x8000;
                    __int16 v39 = 25;
                    break;
                  case 2u:
                    LOWORD(v9) = v9 | 0xC000;
                    __int16 v39 = 25;
                    break;
                  case 9u:
                    LOWORD(v9) = v9 & 0x3FFF | 0x8000;
                    __int16 v39 = 33;
                    break;
                  case 6u:
                    LOWORD(v9) = v9 | 0xC000;
                    __int16 v39 = 33;
                    break;
                  case 3u:
                    LOWORD(v9) = v9 & 0x3FFF | 0x8000;
                    __int16 v39 = 41;
                    break;
                  default:
                    v28 |= 1u;
                    LOWORD(v9) = v9 | 0x8000;
                    goto LABEL_219;
                }
              }
              else
              {
                LOWORD(v9) = v9 | 0xC000;
                __int16 v39 = 9;
              }
              goto LABEL_218;
            }
            goto LABEL_116;
          }
        }
        LOWORD(v9) = v40 & 0xBFFF;
        unsigned __int16 v28 = v41;
        goto LABEL_219;
      }
      goto LABEL_86;
    }
  }
  else
  {
    LOWORD(v9) = v9 & 0xFE7F | 0x100;
  }
  if (!v8) {
    goto LABEL_89;
  }
LABEL_86:
  if (v4 == 10)
  {
LABEL_87:
    LOWORD(v9) = v9 & 0xBFFF;
    goto LABEL_219;
  }
  if (!v4) {
    LOWORD(v9) = v9 | 0x4000;
  }
LABEL_219:
  void *result = (v2 << 48) | ((unint64_t)v28 << 32) | ((unint64_t)(unsigned __int16)v9 << 16) | v24;
  return result;
}

double AGX::BlitUSCStateLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes>::emitFragmentProgramVariantArguments(uint64_t a1, void *a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, _DWORD *a7)
{
  v130[1] = *MEMORY[0x263EF8340];
  uint64_t v14 = (*(_DWORD *)(*(void *)(a4 + 1344) + 8) - **(_DWORD **)(a4 + 1344)) + 63;
  unint64_t v15 = a3[30] + v14;
  if (v15 <= a3[29])
  {
LABEL_2:
    a3[31] = v15;
    goto LABEL_3;
  }
  if (AGX::DataBufferAllocator<34ul>::growNoInline(a3, 6, 0))
  {
    unint64_t v15 = a3[30] + v14;
    if (v15 > a3[29]) {
      goto LABEL_91;
    }
    goto LABEL_2;
  }
LABEL_3:
  uint64_t v16 = *(unsigned int *)(a4 + 16) + 31;
  unint64_t v17 = a3[22] + v16;
  if (v17 <= a3[21])
  {
LABEL_4:
    a3[23] = v17;
    goto LABEL_5;
  }
  if (AGX::DataBufferAllocator<34ul>::growNoInline(a3, 4, 0))
  {
    unint64_t v17 = a3[22] + v16;
    if (v17 <= a3[21]) {
      goto LABEL_4;
    }
LABEL_91:
    abort();
  }
LABEL_5:
  unsigned int v18 = a7[987];
  unsigned int v19 = a7[647];
  int v20 = a7[985];
  int v21 = a7[986];
  int v22 = a7[1268];
  memset(v129, 0, 44);
  uint64_t v23 = v18 >> 2;
  if (v19 <= 1) {
    uint64_t v24 = 1;
  }
  else {
    uint64_t v24 = v19;
  }
  int v25 = 4 * v24 * v23;
  if (v21 * v20 * v25 && (int v26 = 1 << -__clz(v20 - 1), v27 = -__clz(v21 - 1), (v26 << v27) * v25))
  {
    *((void *)&v129[0] + 1) = AGX::ESLInstructionEncoderGen3<AGX::HAL200::Encoders>::SpecLM::encodeImageBlockData(v23, v24, v26, 1 << (v27 & 0x1F));
    *(void *)&v129[1] = v28;
    int v29 = 0x10000;
  }
  else
  {
    int v29 = 0;
  }
  int v30 = (v22 + 63) & 0xFFC0;
  if (((v22 + 63) & 0xFFFFFFC0) == 0x10000) {
    int v30 = 0;
  }
  *(_DWORD *)((char *)v129 + 2) = v30 | v29;
  LOBYTE(v129[0]) = v22 != 0;
  AGX::ESLInstructionEncoderGen3<AGX::HAL200::Encoders>::AGX3EncodedInstr<AGXIotoInstruction_SPECLM_0>::AGX3EncodedInstr(v130, (char *)v129);
  uint64_t v31 = *(unsigned int *)(a4 + 16);
  if (v31)
  {
    unint64_t v32 = (a3[22] + 31) & 0xFFFFFFFFFFFFFFE0;
    unint64_t v33 = v32 + a3[24];
    a3[22] = v32 + v31;
  }
  else
  {
    unint64_t v33 = 0;
    unint64_t v32 = 0;
  }
  unint64_t v34 = v130[0];
  __int16 v35 = (char *)((a3[30] + 63) & 0xFFFFFFFFFFFFFFC0);
  uint64_t v128 = a3[32];
  a3[30] = &v35[*(_DWORD *)(*(void *)(a4 + 1344) + 8) - **(_DWORD **)(a4 + 1344)];
  unint64_t v36 = *(void *)(a4 + 248) - *(void *)(a4 + 240);
  int v37 = *(_DWORD *)(a4 + 200);
  if (v36) {
    int v38 = *(_DWORD *)(a4 + 200) & 1;
  }
  else {
    int v38 = 0;
  }
  if (v31)
  {
    unint64_t v39 = *(unsigned int *)(a4 + 424);
    __int16 v40 = *(unsigned int **)(a4 + 48);
    uint64_t v41 = (*(void *)(a4 + 56) - (void)v40) >> 2;
    int v42 = *(_DWORD *)(a4 + 412);
    uint64_t v43 = *(void *)(a4 + 96);
    uint64_t v44 = *(void *)(a4 + 104);
    uint64_t v46 = *(void *)(a4 + 72);
    uint64_t v45 = *(void *)(a4 + 80);
    int v47 = *(_DWORD *)(a4 + 208);
    int v48 = *(_DWORD *)(a4 + 212);
    uint64_t v50 = *(void *)(a4 + 144);
    uint64_t v49 = *(void *)(a4 + 152);
    int v51 = *(unsigned __int8 *)(a4 + 456);
    int v52 = *(unsigned __int8 *)(a4 + 457);
    if (*(unsigned char *)(a4 + 456)) {
      *(uint64x2_t *)(a5 + 104) = vaddw_u32((uint64x2_t)vdupq_n_s64(v33), *(uint32x2_t *)(a4 + 20));
    }
    unint64_t v53 = v44 - v43;
    if (v52) {
      *(void *)(a5 + 120) = v33 + *(unsigned int *)(a4 + 40);
    }
    unint64_t v54 = v53 >> 2;
    unint64_t v55 = v45 - v46;
    if (v41 == v39)
    {
      unsigned int v56 = 0;
      unint64_t v57 = v55 >> 2;
      if (!v39)
      {
LABEL_48:
        unint64_t v81 = v36 >> 2;
        if (v54)
        {
          *(void *)a5 = v33 + v56;
          v56 += 8 * v54;
        }
        int v82 = v48 + v47;
        if (v57)
        {
          unsigned int v83 = (_DWORD *)(v32 + v56);
          *(void *)(a6 + 56) = v33 + v56 + 8;
          int v84 = *(unsigned int **)(a4 + 72);
          int v85 = v57;
          do
          {
            unsigned int v86 = *v84++;
            *v83++ = *(_DWORD *)(a6 + 4 * v86);
            --v85;
          }
          while (v85);
          v56 += 4 * v57;
        }
        if (v81)
        {
          int v87 = 8 * (v54 + v41) + 4 * (v38 + v37);
          uint64_t v88 = (void *)(v32 + (v87 & 0xFFFFFFFC));
          int v89 = *(unsigned int **)(a4 + 240);
          do
          {
            unsigned int v90 = *v89++;
            *v88++ = *(void *)(a5 + 8 * v90);
            LODWORD(v81) = v81 - 1;
          }
          while (v81);
          unsigned int v56 = v87 + 8 * (v36 >> 2);
        }
        unint64_t v91 = v34;
        uint64_t v92 = v49 - v50;
        if (v82)
        {
          unsigned int v93 = a2;
          int v94 = v82;
          uint64_t v127 = v93;
          uint64_t v126 = a1;
          unint64_t v95 = (char *)(v32 + v56);
          uint64_t v96 = *(unsigned int *)(a4 + 208);
          memcpy(v95, (const void *)(a5 + 4 * *(unsigned int *)(a4 + 204)), 4 * v96);
          int v97 = *(_DWORD *)(a4 + 212);
          if (v97)
          {
            int8x16_t v98 = *(unsigned int **)(a4 + 216);
            unsigned int v99 = &v95[4 * v96];
            do
            {
              unsigned int v100 = *v98++;
              *(_DWORD *)unsigned int v99 = *(_DWORD *)(a6 + 4 * v100);
              v99 += 4;
              --v97;
            }
            while (v97);
          }
          v56 += 4 * v94;
          a1 = v126;
          a2 = v127;
        }
        BOOL v101 = (v92 & 0x3FFFFFFFCLL) == 0;
        unint64_t v34 = v91;
        if (!v101)
        {
          unint64_t v102 = v33 + v56;
          *(void *)(a6 + 56) = v102 + 8;
          *(void *)a5 = v102;
        }
        goto LABEL_65;
      }
    }
    else
    {
      uint64_t v58 = a1;
      if (v42)
      {
        int v59 = v42;
        unsigned int v60 = (void *)v32;
        unsigned int v61 = v40;
        do
        {
          unsigned int v62 = *v61++;
          *v60++ = *(void *)(a5 + 8 * v62);
          --v59;
        }
        while (v59);
      }
      if (*(_DWORD *)(a4 + 280))
      {
        unsigned int v63 = *(void **)(a4 + 264);
        if (v63 != (void *)(a4 + 272))
        {
          do
          {
            *(_DWORD *)(v32 + 4 * *((unsigned int *)v63 + 7)) |= *((_DWORD *)v63 + 8);
            uint64x2_t v118 = (void *)v63[1];
            if (v118)
            {
              do
              {
                unsigned __int32 v119 = v118;
                uint64x2_t v118 = (void *)*v118;
              }
              while (v118);
            }
            else
            {
              do
              {
                unsigned __int32 v119 = (void *)v63[2];
                BOOL v101 = *v119 == (void)v63;
                unsigned int v63 = v119;
              }
              while (!v101);
            }
            unsigned int v63 = v119;
          }
          while (v119 != (void *)(a4 + 272));
        }
      }
      unsigned int v64 = (v42 + 3) & 0xFFFFFFFC;
      if (v51)
      {
        unsigned int v65 = *(_DWORD *)(a4 + 416);
        if (v65 >= 4)
        {
          int v66 = &v40[v64];
          unsigned int v67 = v65 >> 2;
          unsigned int v68 = (_OWORD *)(v32 + 8 * v64);
          do
          {
            unsigned int v69 = *v66;
            v66 += 4;
            long long v70 = (_OWORD *)(a5 + 8 * v69);
            long long v71 = v70[1];
            *unsigned int v68 = *v70;
            v68[1] = v71;
            v68 += 2;
            --v67;
          }
          while (v67);
        }
        v64 += v65;
      }
      a1 = v58;
      if (v52)
      {
        unsigned int v72 = *(_DWORD *)(a4 + 420);
        long long v73 = (void *)(v32 + 8 * v64);
        if (*(unsigned char *)(a4 + 1144))
        {
          if (v72)
          {
            uint64_t v124 = (unsigned int *)(*(void *)(a4 + 48) + 4 * v64);
            do
            {
              unsigned int v125 = *v124++;
              *v73++ = *(void *)(a5 + 8 * v125);
              --v72;
            }
            while (v72);
          }
        }
        else if (v72 >= 4)
        {
          unint64_t v74 = (unsigned int *)(*(void *)(a4 + 48) + 4 * v64);
          unsigned int v75 = v72 >> 2;
          do
          {
            unsigned int v76 = *v74;
            v74 += 4;
            *long long v73 = *(void *)(a5 + 8 * v76);
            v73 += 4;
            --v75;
          }
          while (v75);
        }
      }
      unsigned int v56 = 8 * (v41 - v39);
      unint64_t v57 = v55 >> 2;
      if (!v39) {
        goto LABEL_48;
      }
    }
    if (v39 >= 4)
    {
      unint64_t v77 = *(uint64_t **)(a4 + 1848);
      unint64_t v78 = v39 >> 2;
      uint64_t v79 = (void *)(v32 + v56);
      do
      {
        uint64_t v80 = *v77;
        v77 += 4;
        *uint64_t v79 = v80;
        v79 += 4;
        --v78;
      }
      while (v78);
    }
    v56 += 8 * v39;
    goto LABEL_48;
  }
LABEL_65:
  uint64_t v103 = *(void *)(a4 + 1344);
  memcpy(v35, *(const void **)v103, *(void *)(v103 + 8) - *(void *)v103);
  if (*(unsigned char *)(v103 + 200))
  {
    v104.i64[0] = v33;
    v104.i64[1] = v33 >> 5;
    *(int8x16_t *)&v35[*(unsigned int *)(v103 + 204)] = vbslq_s8((int8x16_t)xmmword_242EA7D10, *(int8x16_t *)&v35[*(unsigned int *)(v103 + 204)], (int8x16_t)vshlq_u8((uint8x16_t)vqtbl1q_s8(v104, (int8x16_t)xmmword_242EA7CF0), (uint8x16_t)xmmword_242EA7D00));
  }
  unsigned int v105 = *(unsigned int **)(v103 + 176);
  for (unsigned int i = *(unsigned int **)(v103 + 184); v105 != i; v105 += 3)
  {
    v107.i64[0] = *(void *)(a5 + 8 * v105[1]) + *v105;
    v107.i64[1] = (unint64_t)v107.i64[0] >> 5;
    *(int8x16_t *)&v35[v105[2]] = vbslq_s8((int8x16_t)xmmword_242EA7D10, *(int8x16_t *)&v35[v105[2]], (int8x16_t)vshlq_u8((uint8x16_t)vqtbl1q_s8(v107, (int8x16_t)xmmword_242EA7CF0), (uint8x16_t)xmmword_242EA7D00));
  }
  if (!*(_DWORD *)(v103 + 240)) {
    *(void *)&v35[*(unsigned __int16 *)(v103 + 244)] = v34;
  }
  unint64_t v108 = (unint64_t)&v35[v128];
  int v109 = (char **)*a2;
  if (*a2)
  {
    uint64_t v110 = *(void *)(v103 + 8) - *(void *)v103;
    int v111 = *(_DWORD *)(a4 + 1752);
    LODWORD(v112) = *((_DWORD *)v109 + 2);
    int v113 = v112 + 1;
    if (*((_DWORD *)v109 + 3) >= (v112 + 1))
    {
      unint64_t v117 = *v109;
    }
    else
    {
      unsigned int v114 = -__clz(v112);
      int v115 = 1 << v114;
      uint32x2_t v116 = (char *)malloc_type_malloc(40 << (v114 & 0x1F), 0x10800400D7C94D2uLL);
      unint64_t v117 = v116;
      uint64_t v112 = *((unsigned int *)v109 + 2);
      if (v112)
      {
        memcpy(v116, *v109, 40 * v112);
        free(*v109);
        LODWORD(v112) = *((_DWORD *)v109 + 2);
      }
      *((_DWORD *)v109 + 3) = v115;
      __n128 *v109 = v117;
    }
    unint64_t v120 = &v117[40 * v112];
    *(_DWORD *)unint64_t v120 = 14;
    *((void *)v120 + 1) = v108;
    *((void *)v120 + 2) = v35;
    *((void *)v120 + 3) = v110;
    *((_DWORD *)v120 + 8) = v111;
    *((_DWORD *)v109 + 2) = v113;
  }
  int v121 = *(_DWORD *)(a4 + 2612);
  int v122 = (v108 >> 16) & 0xFFC00000 | *(_DWORD *)(a4 + 2616) & 0x3FFFFF;
  double result = *(double *)(a4 + 2604);
  *(double *)a1 = result;
  *(_DWORD *)(a1 + 8) = v121;
  *(_DWORD *)(a1 + 12) = v122;
  *(_DWORD *)(a1 + 16) = v108 >> 6;
  return result;
}

void *AGX::BlitUSCStateLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes>::reserveComputeProgramVariantArguments(void *result, uint64_t a2)
{
  unsigned int v3 = result;
  uint64_t v4 = (*(_DWORD *)(*(void *)(a2 + 1344) + 8) - **(_DWORD **)(a2 + 1344)) + 63;
  uint64_t v5 = result[27];
  unint64_t v6 = v5 + v4;
  if ((unint64_t)(v5 + v4) <= result[25])
  {
LABEL_2:
    v3[27] = v6;
    goto LABEL_3;
  }
  uint64_t v11 = result[26];
  double result = (void *)AGX::DataBufferAllocator<34ul>::growNoInline(result, 5, 0);
  if (result)
  {
    unint64_t v6 = v3[26] + v5 - v11 + v4;
    if (v6 > v3[25]) {
      goto LABEL_17;
    }
    goto LABEL_2;
  }
LABEL_3:
  uint64_t v7 = *(unsigned int *)(a2 + 16) + 31;
  uint64_t v8 = v3[19];
  unint64_t v9 = v8 + v7;
  if ((unint64_t)(v8 + v7) <= v3[17])
  {
LABEL_4:
    v3[19] = v9;
    goto LABEL_5;
  }
  uint64_t v12 = v3[18];
  double result = (void *)AGX::DataBufferAllocator<34ul>::growNoInline(v3, 3, 0);
  if (result)
  {
    unint64_t v9 = v3[18] + v8 - v12 + v7;
    if (v9 > v3[17]) {
      goto LABEL_17;
    }
    goto LABEL_4;
  }
LABEL_5:
  uint64_t v10 = v3[95];
  if ((unint64_t)(v10 + 40) <= v3[93])
  {
    v3[95] = v10 + 40;
    return result;
  }
  int v13 = (unint64_t *)v3[94];
  double result = (void *)AGX::DataBufferAllocator<34ul>::growNoInline(v3, 22, 0);
  if (result)
  {
    uint64_t v14 = v3[94];
    unint64_t v15 = v14 + v10 - (void)v13 + 40;
    if (v15 <= v3[93])
    {
      v3[95] = v15;
      unint64_t *v13 = __ROR8__(v3[96] + v14, 32) & 0xFFFFFFFF0000FFFFLL | 0x20000000;
      return result;
    }
LABEL_17:
    abort();
  }
  return result;
}

uint64_t AGX::BlitUSCStateLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes>::emitComputeProgramVariantArguments(char ***a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, int a7, int a8, _DWORD *a9)
{
  v146[1] = *MEMORY[0x263EF8340];
  unsigned int v15 = *(_DWORD *)(a3 + 2692) + 3;
  unsigned int v16 = v15 & 0xFFFFFFFC;
  char v17 = __clz(a7 - 1);
  char v18 = __clz(a8 - 1);
  if ((v15 & 0xFFFFFFFC) * a7 * a8) {
    unsigned int v19 = (v15 & 0xFFFFFFFC) * (1 << -v17 << -v18);
  }
  else {
    unsigned int v19 = 0;
  }
  *(_DWORD *)(a5 + 36) = v19;
  uint64_t v20 = (*(_DWORD *)(*(void *)(a3 + 1344) + 8) - **(_DWORD **)(a3 + 1344)) + 63;
  unint64_t v21 = a2[26] + v20;
  if (v21 <= a2[25])
  {
LABEL_5:
    a2[27] = v21;
    goto LABEL_6;
  }
  int v140 = a6;
  unsigned int v135 = v15;
  int v127 = AGX::DataBufferAllocator<34ul>::growNoInline(a2, 5, 0);
  unsigned int v15 = v135;
  a6 = v140;
  if (v127)
  {
    unint64_t v21 = a2[26] + v20;
    if (v21 > a2[25]) {
      goto LABEL_103;
    }
    goto LABEL_5;
  }
LABEL_6:
  uint64_t v22 = *(unsigned int *)(a3 + 16) + 31;
  unint64_t v23 = a2[18] + v22;
  if (v23 <= a2[17])
  {
LABEL_7:
    a2[19] = v23;
    goto LABEL_8;
  }
  int v141 = a6;
  unsigned int v136 = v15;
  int v128 = AGX::DataBufferAllocator<34ul>::growNoInline(a2, 3, 0);
  unsigned int v15 = v136;
  a6 = v141;
  if (v128)
  {
    unint64_t v23 = a2[18] + v22;
    if (v23 > a2[17]) {
      goto LABEL_103;
    }
    goto LABEL_7;
  }
LABEL_8:
  uint64_t v24 = (unint64_t *)a2[94];
  if ((unint64_t)(v24 + 5) <= a2[93])
  {
    a2[95] = v24 + 5;
    goto LABEL_10;
  }
  int v142 = a6;
  unsigned int v137 = v15;
  int v129 = AGX::DataBufferAllocator<34ul>::growNoInline(a2, 22, 0);
  unsigned int v15 = v137;
  a6 = v142;
  if (v129)
  {
    uint64_t v130 = a2[94];
    if ((unint64_t)(v130 + 40) <= a2[93])
    {
      a2[95] = v130 + 40;
      *uint64_t v24 = __ROR8__(a2[96] + v130, 32) & 0xFFFFFFFF0000FFFFLL | 0x20000000;
      goto LABEL_10;
    }
LABEL_103:
    abort();
  }
LABEL_10:
  memset(v145, 0, 44);
  int v25 = a8 * a7 * v16;
  if (v25)
  {
    int v26 = 1 << -v17;
    if (v16 * (v26 << -v18))
    {
      int v27 = a6;
      uint64_t v28 = AGX::ESLInstructionEncoderGen3<AGX::HAL200::Encoders>::SpecLM::encodeImageBlockData(v15 >> 2, 1, v26, 1 << (-v18 & 0x1F));
      a6 = v27;
      *((void *)&v145[0] + 1) = v28;
      *(void *)&v145[1] = v29;
      int v25 = 0x10000;
    }
    else
    {
      int v25 = 0;
    }
  }
  int v30 = (a6 + 63) & 0xFFC0;
  if (((a6 + 63) & 0xFFFFFFC0) == 0x10000) {
    int v30 = 0;
  }
  *(_DWORD *)((char *)v145 + 2) = v30 | v25;
  LOBYTE(v145[0]) = a6 != 0;
  AGX::ESLInstructionEncoderGen3<AGX::HAL200::Encoders>::AGX3EncodedInstr<AGXIotoInstruction_SPECLM_0>::AGX3EncodedInstr(v146, (char *)v145);
  uint64_t v31 = *(unsigned int *)(a3 + 16);
  if (v31)
  {
    unint64_t v32 = (a2[18] + 31) & 0xFFFFFFFFFFFFFFE0;
    unint64_t v33 = v32 + a2[20];
    a2[18] = v32 + v31;
  }
  else
  {
    unint64_t v33 = 0;
    unint64_t v32 = 0;
  }
  unint64_t v34 = v146[0];
  __int16 v35 = (char *)((a2[26] + 63) & 0xFFFFFFFFFFFFFFC0);
  uint64_t v36 = a2[28];
  a2[26] = &v35[*(_DWORD *)(*(void *)(a3 + 1344) + 8) - **(_DWORD **)(a3 + 1344)];
  unint64_t v37 = *(void *)(a3 + 248) - *(void *)(a3 + 240);
  int v38 = *(_DWORD *)(a3 + 200);
  if (v37) {
    int v39 = *(_DWORD *)(a3 + 200) & 1;
  }
  else {
    int v39 = 0;
  }
  if (v31)
  {
    unint64_t v40 = *(unsigned int *)(a3 + 424);
    uint64_t v41 = *(unsigned int **)(a3 + 48);
    uint64_t v42 = (*(void *)(a3 + 56) - (void)v41) >> 2;
    int v43 = *(_DWORD *)(a3 + 412);
    uint64_t v44 = *(void *)(a3 + 96);
    uint64_t v45 = *(void *)(a3 + 104);
    uint64_t v47 = *(void *)(a3 + 72);
    uint64_t v46 = *(void *)(a3 + 80);
    int v48 = *(_DWORD *)(a3 + 208);
    int v49 = *(_DWORD *)(a3 + 212);
    uint64_t v51 = *(void *)(a3 + 144);
    uint64_t v50 = *(void *)(a3 + 152);
    int v52 = *(unsigned __int8 *)(a3 + 456);
    int v53 = *(unsigned __int8 *)(a3 + 457);
    if (*(unsigned char *)(a3 + 456)) {
      *(uint64x2_t *)(a4 + 168) = vaddw_u32((uint64x2_t)vdupq_n_s64(v33), *(uint32x2_t *)(a3 + 20));
    }
    unint64_t v54 = v45 - v44;
    if (v53) {
      *(void *)(a4 + 184) = v33 + *(unsigned int *)(a3 + 40);
    }
    unint64_t v55 = v54 >> 2;
    unint64_t v56 = v46 - v47;
    if (v42 == v40)
    {
      unsigned int v57 = 0;
      unint64_t v58 = v56 >> 2;
      if (!v40)
      {
LABEL_50:
        unint64_t v82 = v37 >> 2;
        if (v55)
        {
          *(void *)a4 = v33 + v57;
          v57 += 8 * v55;
        }
        int v83 = v49 + v48;
        if (v58)
        {
          int v84 = (_DWORD *)(v32 + v57);
          *(void *)(a5 + 88) = v33 + v57 + 8;
          int v85 = *(unsigned int **)(a3 + 72);
          int v86 = v58;
          do
          {
            unsigned int v87 = *v85++;
            *v84++ = *(_DWORD *)(a5 + 4 * v87);
            --v86;
          }
          while (v86);
          v57 += 4 * v58;
        }
        if (v82)
        {
          int v88 = 8 * (v55 + v42) + 4 * (v39 + v38);
          int v89 = (void *)(v32 + (v88 & 0xFFFFFFFC));
          unsigned int v90 = *(unsigned int **)(a3 + 240);
          do
          {
            unsigned int v91 = *v90++;
            *v89++ = *(void *)(a4 + 8 * v91);
            LODWORD(v82) = v82 - 1;
          }
          while (v82);
          unsigned int v57 = v88 + 8 * (v37 >> 2);
        }
        uint64_t v92 = v36;
        uint64_t v93 = v50 - v51;
        if (v83)
        {
          int v133 = v83;
          unint64_t v134 = v33;
          unint64_t v138 = v34;
          int v94 = (char *)(v32 + v57);
          uint64_t v95 = *(unsigned int *)(a3 + 208);
          memcpy(v94, (const void *)(a4 + 4 * *(unsigned int *)(a3 + 204)), 4 * v95);
          int v96 = *(_DWORD *)(a3 + 212);
          if (v96)
          {
            int v97 = *(unsigned int **)(a3 + 216);
            int8x16_t v98 = &v94[4 * v95];
            do
            {
              unsigned int v99 = *v97++;
              *(_DWORD *)int8x16_t v98 = *(_DWORD *)(a5 + 4 * v99);
              v98 += 4;
              --v96;
            }
            while (v96);
          }
          v57 += 4 * v133;
          unint64_t v33 = v134;
          unint64_t v34 = v138;
        }
        BOOL v100 = (v93 & 0x3FFFFFFFCLL) == 0;
        uint64_t v36 = v92;
        if (!v100)
        {
          unint64_t v101 = v33 + v57;
          *(void *)(a5 + 88) = v101 + 8;
          *(void *)a4 = v101;
        }
        goto LABEL_67;
      }
    }
    else
    {
      unint64_t v59 = v33;
      if (v43)
      {
        int v60 = v43;
        unsigned int v61 = (void *)v32;
        unsigned int v62 = v41;
        do
        {
          unsigned int v63 = *v62++;
          *v61++ = *(void *)(a4 + 8 * v63);
          --v60;
        }
        while (v60);
      }
      if (*(_DWORD *)(a3 + 280))
      {
        unsigned int v64 = *(void **)(a3 + 264);
        if (v64 != (void *)(a3 + 272))
        {
          do
          {
            *(_DWORD *)(v32 + 4 * *((unsigned int *)v64 + 7)) |= *((_DWORD *)v64 + 8);
            uint32x2_t v116 = (void *)v64[1];
            if (v116)
            {
              do
              {
                unint64_t v117 = v116;
                uint32x2_t v116 = (void *)*v116;
              }
              while (v116);
            }
            else
            {
              do
              {
                unint64_t v117 = (void *)v64[2];
                BOOL v100 = *v117 == (void)v64;
                unsigned int v64 = v117;
              }
              while (!v100);
            }
            unsigned int v64 = v117;
          }
          while (v117 != (void *)(a3 + 272));
        }
      }
      unsigned int v65 = (v43 + 3) & 0xFFFFFFFC;
      if (v52)
      {
        unsigned int v66 = *(_DWORD *)(a3 + 416);
        if (v66 >= 4)
        {
          unsigned int v67 = &v41[v65];
          unsigned int v68 = v66 >> 2;
          unsigned int v69 = (_OWORD *)(v32 + 8 * v65);
          do
          {
            unsigned int v70 = *v67;
            v67 += 4;
            long long v71 = (_OWORD *)(a4 + 8 * v70);
            long long v72 = v71[1];
            *unsigned int v69 = *v71;
            v69[1] = v72;
            v69 += 2;
            --v68;
          }
          while (v68);
        }
        v65 += v66;
      }
      unint64_t v33 = v59;
      if (v53)
      {
        unsigned int v73 = *(_DWORD *)(a3 + 420);
        unint64_t v74 = (void *)(v32 + 8 * v65);
        if (*(unsigned char *)(a3 + 1144))
        {
          if (v73)
          {
            unint64_t v131 = (unsigned int *)(*(void *)(a3 + 48) + 4 * v65);
            do
            {
              unsigned int v132 = *v131++;
              *v74++ = *(void *)(a4 + 8 * v132);
              --v73;
            }
            while (v73);
          }
        }
        else if (v73 >= 4)
        {
          unsigned int v75 = (unsigned int *)(*(void *)(a3 + 48) + 4 * v65);
          unsigned int v76 = v73 >> 2;
          do
          {
            unsigned int v77 = *v75;
            v75 += 4;
            *unint64_t v74 = *(void *)(a4 + 8 * v77);
            v74 += 4;
            --v76;
          }
          while (v76);
        }
      }
      unsigned int v57 = 8 * (v42 - v40);
      unint64_t v58 = v56 >> 2;
      if (!v40) {
        goto LABEL_50;
      }
    }
    if (v40 >= 4)
    {
      unint64_t v78 = *(uint64_t **)(a3 + 1848);
      unint64_t v79 = v40 >> 2;
      uint64_t v80 = (void *)(v32 + v57);
      do
      {
        uint64_t v81 = *v78;
        v78 += 4;
        *uint64_t v80 = v81;
        v80 += 4;
        --v79;
      }
      while (v79);
    }
    v57 += 8 * v40;
    goto LABEL_50;
  }
LABEL_67:
  uint64_t v102 = *(void *)(a3 + 1344);
  memcpy(v35, *(const void **)v102, *(void *)(v102 + 8) - *(void *)v102);
  if (*(unsigned char *)(v102 + 200))
  {
    v103.i64[0] = v33;
    v103.i64[1] = v33 >> 5;
    *(int8x16_t *)&v35[*(unsigned int *)(v102 + 204)] = vbslq_s8((int8x16_t)xmmword_242EA7D10, *(int8x16_t *)&v35[*(unsigned int *)(v102 + 204)], (int8x16_t)vshlq_u8((uint8x16_t)vqtbl1q_s8(v103, (int8x16_t)xmmword_242EA7CF0), (uint8x16_t)xmmword_242EA7D00));
  }
  int8x16_t v104 = *(unsigned int **)(v102 + 176);
  for (unsigned int i = *(unsigned int **)(v102 + 184); v104 != i; v104 += 3)
  {
    v106.i64[0] = *(void *)(a4 + 8 * v104[1]) + *v104;
    v106.i64[1] = (unint64_t)v106.i64[0] >> 5;
    *(int8x16_t *)&v35[v104[2]] = vbslq_s8((int8x16_t)xmmword_242EA7D10, *(int8x16_t *)&v35[v104[2]], (int8x16_t)vshlq_u8((uint8x16_t)vqtbl1q_s8(v106, (int8x16_t)xmmword_242EA7CF0), (uint8x16_t)xmmword_242EA7D00));
  }
  if (!*(_DWORD *)(v102 + 240)) {
    *(void *)&v35[*(unsigned __int16 *)(v102 + 244)] = v34;
  }
  unint64_t v107 = (unint64_t)&v35[v36];
  unint64_t v108 = *a1;
  if (*a1)
  {
    uint64_t v109 = *(void *)(v102 + 8) - *(void *)v102;
    int v110 = *(_DWORD *)(a3 + 1752);
    LODWORD(v111) = *((_DWORD *)v108 + 2);
    int v112 = v111 + 1;
    if (*((_DWORD *)v108 + 3) >= (v111 + 1))
    {
      int v115 = *v108;
    }
    else
    {
      int v144 = *(_DWORD *)(a3 + 1752);
      unsigned int v113 = -__clz(v111);
      int v139 = 1 << v113;
      unsigned int v114 = (char *)malloc_type_malloc(40 << (v113 & 0x1F), 0x10800400D7C94D2uLL);
      int v115 = v114;
      uint64_t v111 = *((unsigned int *)v108 + 2);
      if (v111)
      {
        memcpy(v114, *v108, 40 * v111);
        free(*v108);
        LODWORD(v111) = *((_DWORD *)v108 + 2);
      }
      *((_DWORD *)v108 + 3) = v139;
      void *v108 = v115;
      int v110 = v144;
    }
    uint64x2_t v118 = &v115[40 * v111];
    *(_DWORD *)uint64x2_t v118 = 15;
    *((void *)v118 + 1) = v107;
    *((void *)v118 + 2) = v35;
    *((void *)v118 + 3) = v109;
    *((_DWORD *)v118 + 8) = v110;
    *((_DWORD *)v108 + 2) = v112;
  }
  int v119 = *(_DWORD *)(a3 + 2632);
  int v120 = *(_DWORD *)(a3 + 2636);
  int v121 = *(_DWORD *)(a3 + 2644);
  uint64_t v122 = *(void *)(a5 + 24);
  int v123 = *(_DWORD *)(a5 + 32);
  uint64_t v124 = *(void *)(a5 + 12);
  int v125 = *(_DWORD *)(a5 + 20);
  if (a9) {
    ++*a9;
  }
  uint64_t result = a2[94];
  *(_DWORD *)uint64_t result = v119;
  *(_DWORD *)(result + 4) = (v107 >> 16) & 0xFFC00000 | v120 & 0x3FFFFF;
  *(_DWORD *)(result + 8) = v107 >> 6;
  *(_DWORD *)(result + 12) = v121;
  *(void *)(result + 16) = v122;
  *(_DWORD *)(result + 24) = v123;
  *(_DWORD *)(result + 28) = v124 & 0x7FF;
  *(_DWORD *)(result + 32) = WORD2(v124) & 0x7FF;
  *(_DWORD *)(result + 36) = v125 & 0x7FF;
  a2[94] = result + 40;
  return result;
}

uint64_t AGX::BlitUSCStateLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes>::bindComputeProgramVariantResources(uint64_t a1, uint64_t a2)
{
  unsigned int v2 = *(_DWORD *)(a2 + 1680);
  do
  {
    v2 &= ~(1 << __clz(__rbit32(v2)));
    uint64_t result = IOGPUResourceListAddResource();
  }
  while (v2);
  return result;
}

void AGX::Mempool<16u,0u,true,AGX::HAL200::BVHStateHeapElem>::grow(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = [[AGXBuffer alloc] initUntrackedInternalBufferWithDevice:*(void *)a1 length:16 * a2 options:0];
  uint64_t v5 = v4;
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v7 = (int *)MEMORY[0x263F4B188];
  if (v6)
  {
    memcpy(*(void **)&v4[*MEMORY[0x263F4B188] + 24], *(const void **)(v6 + (int)*MEMORY[0x263F4B188] + 24), 16 * *(unsigned int *)(a1 + 16));
  }
  *(void *)(a1 + 8) = v5;
  LODWORD(v8) = *(_DWORD *)(a1 + 16);
  *(_DWORD *)(a1 + 16) = a2;
  if (v8 <= 1) {
    uint64_t v8 = 1;
  }
  else {
    uint64_t v8 = v8;
  }
  uint64_t v9 = a2 - 1;
  uint64_t v10 = *(void *)(a1 + 24);
  if (v8 < v9)
  {
    uint64_t v11 = 16 * v8;
    uint64_t v12 = v8;
    do
    {
      *(_DWORD *)(*(void *)(*(void *)(v10 + 8) + *v7 + 24) + v11) = ++v12;
      v11 += 16;
    }
    while (v9 != v12);
  }
  uint64_t v13 = *(void *)(a1 + 32);
  uint64_t v14 = 16 * v9;
  *(_DWORD *)(*(void *)(*(void *)(v10 + 8) + *v7 + 24) + v14) = v13;
  uint64_t v15 = v13;
  atomic_compare_exchange_strong((atomic_ullong *volatile)(a1 + 32), (unint64_t *)&v15, (v13 & 0xFFFFFFFF00000000 | v8) + 0x100000000);
  if (v15 != v13)
  {
    uint64_t v16 = v15;
    do
    {
      *(_DWORD *)(*(void *)(*(void *)(*(void *)(a1 + 24) + 8) + *v7 + 24) + v14) = v15;
      atomic_compare_exchange_strong((atomic_ullong *volatile)(a1 + 32), (unint64_t *)&v16, (v15 & 0xFFFFFFFF00000000 | v8) + 0x100000000);
      BOOL v17 = v16 == v15;
      uint64_t v15 = v16;
    }
    while (!v17);
  }
  char v18 = *(atomic_uint **)(a1 + 56);
  atomic_uint v19 = *v18;
  if ((*v18 + 1) > 1) {
    unsigned int v20 = v19 + 1;
  }
  else {
    unsigned int v20 = 1;
  }
  atomic_uint v21 = *v18;
  atomic_compare_exchange_strong(v18, (unsigned int *)&v21, v20);
  if (v21 != v19)
  {
    atomic_uint v22 = v21;
    do
    {
      if ((v21 + 1) > 1) {
        unsigned int v23 = v21 + 1;
      }
      else {
        unsigned int v23 = 1;
      }
      atomic_compare_exchange_strong(v18, (unsigned int *)&v22, v23);
      BOOL v17 = v22 == v21;
      atomic_uint v21 = v22;
    }
    while (!v17);
  }
}

uint64_t AGX::Mempool<16u,0u,true,AGX::HAL200::BVHStateHeapElem>::Allocation::Allocation(uint64_t a1, os_unfair_lock_s *a2, unsigned int a3)
{
  *(_DWORD *)a1 = a3;
  *(void *)(a1 + 8) = a2;
  *(unsigned char *)(a1 + 16) = a3 != 0;
  if (!a3)
  {
    uint64_t v4 = a2 + 10;
    os_unfair_lock_lock(a2 + 10);
    uint64_t v5 = *(void *)(a1 + 8);
    unint64_t explicit = atomic_load_explicit((atomic_ullong *volatile)(v5 + 32), memory_order_acquire);
    uint64_t v7 = (int *)MEMORY[0x263F4B188];
    if (explicit)
    {
      uint64_t v8 = explicit;
      while (1)
      {
        unint64_t v9 = explicit & 0xFFFFFFFF00000000;
        unint64_t v10 = (v9 | *(unsigned int *)(*(void *)(*(void *)(*(void *)(v5 + 24) + 8) + *v7 + 24) + 16 * v8))
            + 0x100000000;
        unint64_t explicit = v9 | v8;
        unint64_t v11 = explicit;
        atomic_compare_exchange_strong((atomic_ullong *volatile)(v5 + 32), &explicit, v10);
        if (explicit == v11) {
          break;
        }
        uint64_t v8 = explicit;
        if (!explicit) {
          goto LABEL_6;
        }
      }
    }
    else
    {
LABEL_6:
      *(_DWORD *)a1 = 0;
      uint64_t v12 = *(void *)(a1 + 8);
      int v13 = *(_DWORD *)(v12 + 16);
      if (v13)
      {
        if (!*(void *)(v12 + 32)) {
          AGX::Mempool<16u,0u,true,AGX::HAL200::BVHStateHeapElem>::grow(v12, 2 * v13);
        }
      }
      else
      {
        AGX::Mempool<16u,0u,true,AGX::HAL200::BVHStateHeapElem>::grow(v12, 0x10u);
      }
      uint64_t v14 = *(void *)(a1 + 8);
      unint64_t v15 = atomic_load_explicit((atomic_ullong *volatile)(v14 + 32), memory_order_acquire);
      if (v15)
      {
        uint64_t v8 = v15;
        while (1)
        {
          unint64_t v16 = v15 & 0xFFFFFFFF00000000;
          unint64_t v17 = (v16 | *(unsigned int *)(*(void *)(*(void *)(*(void *)(v14 + 24) + 8) + *v7 + 24) + 16 * v8))
              + 0x100000000;
          unint64_t v15 = v16 | v8;
          unint64_t v18 = v15;
          atomic_compare_exchange_strong((atomic_ullong *volatile)(v14 + 32), &v15, v17);
          if (v15 == v18) {
            break;
          }
          uint64_t v8 = v15;
          if (!v15) {
            goto LABEL_13;
          }
        }
      }
      else
      {
LABEL_13:
        LODWORD(v8) = 0;
      }
    }
    *(_DWORD *)a1 = v8;
    os_unfair_lock_unlock(v4);
    a2 = *(os_unfair_lock_s **)(a1 + 8);
    a3 = *(_DWORD *)a1;
  }
  uint32_t os_unfair_lock_opaque = a2[11]._os_unfair_lock_opaque;
  if (os_unfair_lock_opaque < a3)
  {
    uint32_t v20 = a2[11]._os_unfair_lock_opaque;
    do
    {
      atomic_compare_exchange_strong_explicit((atomic_uint *volatile)(*(void *)(a1 + 8) + 44), &v20, a3, memory_order_relaxed, memory_order_relaxed);
      if (v20 == os_unfair_lock_opaque) {
        break;
      }
      a3 = *(_DWORD *)a1;
      uint32_t os_unfair_lock_opaque = v20;
    }
    while (v20 < *(_DWORD *)a1);
    a2 = *(os_unfair_lock_s **)(a1 + 8);
  }
  atomic_fetch_add((atomic_uint *volatile)&a2[12], 1u);
  return a1;
}

void sub_242A367F0(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void AGX::CDMSubstreamProcessor<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,AGX::HAL200::EncoderComputeServiceClasses>::~CDMSubstreamProcessor(uint64_t a1)
{
  *(void *)a1 = &unk_26F852308;
  unsigned int v2 = *(unsigned __int16 *)(a1 + 24);
  unsigned int v3 = *(char **)(a1 + 32);
  if (v2)
  {
    do
    {
      uint64_t v4 = 16 * v2;

      unsigned int v3 = *(char **)(a1 + 32);
      unsigned int v2 = *(unsigned __int16 *)&v3[v4 + 8];
    }
    while (*(_WORD *)&v3[v4 + 8]);
  }
  free(v3);
  dispatch_release(*(dispatch_object_t *)(a1 + 16));

  JUMPOUT(0x24566ED90);
}

uint64_t AGX::CDMSubstreamProcessor<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,AGX::HAL200::EncoderComputeServiceClasses>::~CDMSubstreamProcessor(uint64_t a1)
{
  *(void *)a1 = &unk_26F852308;
  unsigned int v2 = *(unsigned __int16 *)(a1 + 24);
  unsigned int v3 = *(char **)(a1 + 32);
  if (v2)
  {
    do
    {
      uint64_t v4 = 16 * v2;

      unsigned int v3 = *(char **)(a1 + 32);
      unsigned int v2 = *(unsigned __int16 *)&v3[v4 + 8];
    }
    while (*(_WORD *)&v3[v4 + 8]);
  }
  free(v3);
  dispatch_release(*(dispatch_object_t *)(a1 + 16));
  return a1;
}

uint64_t AGX::ClipRectContextGen3<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::warpClipRect(uint64_t a1, uint64_t a2)
{
  float v3 = (float)a2;
  float v4 = (float)HIDWORD(a2);
  uint64_t v5 = *(unsigned __int8 *)(a1 + 832);
  if (!*(unsigned char *)(a1 + 832))
  {
    AGX::WarpFunction<AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::getWarpedCoordinate();
    float v7 = v6;
    AGX::WarpFunction<AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::getWarpedCoordinate();
    float v9 = v8;
    float v3 = floorf(v7);
    if ((float)(v7 - v3) != 0.5) {
      float v3 = v7;
    }
    float v10 = floorf(v9);
    if ((float)(v9 - v10) == 0.5) {
      float v4 = v10;
    }
    else {
      float v4 = v9;
    }
  }
  LODWORD(v5) = vcvtas_u32_f32(v3);
  LODWORD(v2) = vcvtas_u32_f32(v4);
  return v5 | (v2 << 32);
}

unsigned int *AGX::ClipRectContextGen3<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::encodeViewportState(uint64_t a1, uint64_t a2, unsigned int a3)
{
  v19[1] = *MEMORY[0x263EF8340];
  if (*(void *)(a1 + 824))
  {
    float v3 = (unsigned int **)MEMORY[0x270FA5388](a1);
    float v9 = (char *)v19 - v5 * (unint64_t)v8;
    if (v6 && v7)
    {
      int v10 = 0;
      for (uint64_t i = 0; i != v6; ++i)
      {
        uint64_t v12 = (_OWORD *)(v4 + 48 * i);
        int v13 = v10;
        uint64_t v14 = v7;
        do
        {
          unint64_t v15 = &v9[48 * v13];
          long long v16 = v12[1];
          *(_OWORD *)unint64_t v15 = *v12;
          *((_OWORD *)v15 + 1) = v16;
          *((_OWORD *)v15 + 2) = v12[2];
          ++v13;
          --v14;
        }
        while (v14);
        v10 += v7;
      }
    }
    return AGX::PPPEncoderGen6<AGX::HAL200::ESLEncoder,AGX::HAL200::VsStateConfig>::RasterToken::setViewports(*v3, (uint64_t)v9, v5);
  }
  else
  {
    unint64_t v18 = *(unsigned int **)a1;
    return AGX::PPPEncoderGen6<AGX::HAL200::ESLEncoder,AGX::HAL200::VsStateConfig>::RasterToken::setViewports(v18, a2, a3);
  }
}

unsigned int *AGX::ClipRectContextGen3<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::setViewports(uint64_t a1, uint64_t a2, unsigned int a3, int a4)
{
  uint64_t v7 = *(void *)(a1 + 824);
  if (v7)
  {
    int v113 = a4;
    uint64_t v8 = *(unsigned int *)(v7 + 16);
    *(_DWORD *)(a1 + 796) = v8 * a3;
    if (!a3) {
      goto LABEL_97;
    }
    int v9 = 0;
    uint64_t v10 = 0;
    unsigned int v114 = a3;
    uint64_t v11 = a3;
    do
    {
      uint64_t v12 = (double *)(a2 + 48 * v10);
      double v13 = *v12;
      double v14 = v12[1];
      double v15 = v12[2];
      double v16 = v12[3];
      double v17 = *v12 + v15;
      double v18 = v14 + v16;
      if (v8)
      {
        uint64_t v19 = 0;
        _NF = v16 < 0.0;
        if (v16 >= 0.0) {
          double v21 = v14 + v16;
        }
        else {
          double v21 = v12[1];
        }
        if (_NF) {
          double v14 = v18;
        }
        if (v21 <= 4294967300.0) {
          double v22 = v21;
        }
        else {
          double v22 = 4294967300.0;
        }
        if (v21 >= 0.0) {
          double v23 = v22;
        }
        else {
          double v23 = 0.0;
        }
        unsigned int v24 = vcvtpd_u64_f64(v23);
        if (v14 <= 4294967300.0) {
          double v25 = v14;
        }
        else {
          double v25 = 4294967300.0;
        }
        if (v14 < 0.0) {
          double v25 = 0.0;
        }
        uint64_t v26 = v25;
        BOOL v27 = v15 < 0.0;
        if (v15 >= 0.0) {
          double v28 = v17;
        }
        else {
          double v28 = v13;
        }
        if (v27) {
          double v13 = v17;
        }
        if (v28 <= 4294967300.0) {
          double v29 = v28;
        }
        else {
          double v29 = 4294967300.0;
        }
        if (v28 >= 0.0) {
          double v30 = v29;
        }
        else {
          double v30 = 0.0;
        }
        if (v13 <= 4294967300.0) {
          double v31 = v13;
        }
        else {
          double v31 = 4294967300.0;
        }
        if (v13 >= 0.0) {
          double v32 = v31;
        }
        else {
          double v32 = 0.0;
        }
        uint64_t v33 = v32;
        float v34 = (float)v33;
        float v35 = (float)v26;
        float v36 = (float)vcvtpd_u64_f64(v30);
        float v37 = (float)v24;
        do
        {
          uint64_t v39 = *(unsigned __int8 *)(a1 + 832);
          float v40 = v36;
          float v41 = v37;
          float v42 = v35;
          float v43 = v34;
          if (!*(unsigned char *)(a1 + 832))
          {
            AGX::WarpFunction<AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::getWarpedCoordinate();
            float v45 = v44;
            float v47 = v46;
            AGX::WarpFunction<AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::getWarpedCoordinate();
            float v43 = floorf(v45);
            if ((float)(v45 - v43) != 0.5) {
              float v43 = v45;
            }
            float v42 = floorf(v47);
            if ((float)(v47 - v42) != 0.5) {
              float v42 = v47;
            }
            float v49 = floorf(v40);
            if ((float)(v40 - v49) == 0.5) {
              float v40 = v49;
            }
            float v41 = floorf(v48);
            if ((float)(v48 - v41) != 0.5) {
              float v41 = v48;
            }
          }
          LODWORD(v39) = vcvtas_u32_f32(v43);
          LODWORD(v26) = vcvtas_u32_f32(v42);
          LODWORD(v33) = vcvtas_u32_f32(v40);
          LODWORD(v4) = vcvtas_u32_f32(v41);
          uint64_t v38 = v39 | (v33 << 32);
          v26 |= v4 << 32;
          uint64_t v33 = a1 + 16 * (v9 + v19);
          *(void *)(v33 + 8) = v38;
          *(void *)(v33 + 16) = v26;
          ++v19;
        }
        while (v8 != v19);
      }
      ++v10;
      v9 += v8;
    }
    while (v10 != v11);
  }
  else
  {
    *(_DWORD *)(a1 + 796) = a3;
    if (!a3)
    {
      int v84 = *(unsigned int **)a1;
      *int v84 = **(_DWORD **)a1 | 0xF000;
      v84[33] &= ~1u;
      goto LABEL_97;
    }
    int v113 = a4;
    unint64_t v50 = 0;
    uint64_t v51 = (float64x2_t *)(a2 + 16);
    float64x2_t v52 = (float64x2_t)vdupq_n_s64(0x41EFFFFFFFE00000uLL);
    do
    {
      float64x2_t v53 = v51[-1];
      float64x2_t v54 = vaddq_f64(v53, *v51);
      int32x2_t v55 = vmovn_s64((int64x2_t)vmvnq_s8(vorrq_s8((int8x16_t)vcgtq_f64(v53, v54), (int8x16_t)vcgeq_f64(v54, v53))));
      if (vorr_s8((int8x8_t)v55, (int8x8_t)vdup_lane_s32(v55, 1)).u8[0]) {
        unint64_t v56 = -1;
      }
      else {
        unint64_t v56 = 0;
      }
      int8x16_t v57 = (int8x16_t)vdupq_n_s64(v56);
      int8x16_t v58 = vbicq_s8((int8x16_t)v53, v57);
      int8x16_t v59 = vbicq_s8((int8x16_t)v54, v57);
      int8x16_t v60 = (int8x16_t)vcltzq_f64(*v51);
      float64x2_t v61 = (float64x2_t)vbslq_s8(v60, v58, v59);
      float64x2_t v62 = (float64x2_t)vbslq_s8(v60, v59, v58);
      *(int64x2_t *)(a1 + 16 * v50++ + 8) = vsliq_n_s64((int64x2_t)vcvtq_u64_f64((float64x2_t)vbicq_s8(vbslq_s8((int8x16_t)vcgtq_f64(v62, v52), (int8x16_t)v52, (int8x16_t)v62), (int8x16_t)vcltzq_f64(v62))), (int64x2_t)vcvtq_u64_f64(vrndpq_f64((float64x2_t)vbicq_s8(vbslq_s8((int8x16_t)vcgtq_f64(v61, v52), (int8x16_t)v52, (int8x16_t)v61), (int8x16_t)vcltzq_f64(v61)))), 0x20uLL);
      v51 += 3;
    }
    while (v50 < *(unsigned int *)(a1 + 796));
    unsigned int v114 = a3;
    AGX::PPPEncoderGen6<AGX::HAL200::ESLEncoder,AGX::HAL200::VsStateConfig>::RasterToken::setViewports(*(unsigned int **)a1, a2, a3);
  }
  a3 = v114;
  if (v113)
  {
    if (v114 >= 3)
    {
      uint64_t v85 = v114 & 1;
      if ((v114 & 1) == 0) {
        uint64_t v85 = 2;
      }
      uint64_t v63 = v114 - v85;
      int v86 = (float *)(a1 + 836);
      unsigned int v87 = (float64_t *)(a2 + 88);
      __asm { FMOV            V0.2D, #2.0 }
      uint64_t v91 = v63;
      do
      {
        v92.f64[0] = *(v87 - 7);
        v93.f64[0] = *(v87 - 6);
        v92.f64[1] = *(v87 - 1);
        v93.f64[1] = *v87;
        v116.val[0] = vcvt_f32_f64(vmlaq_f64(vnegq_f64(v93), _Q0, v92));
        v116.val[1] = vcvt_f32_f64(v93);
        vst2_f32(v86, v116);
        v86 += 4;
        v87 += 12;
        v91 -= 2;
      }
      while (v91);
    }
    else
    {
      uint64_t v63 = 0;
    }
    uint64_t v94 = v114 - v63;
    uint64_t v95 = (double *)(a2 + 48 * v63 + 40);
    int v96 = (float *)(a1 + 8 * v63 + 840);
    do
    {
      float v97 = -(*v95 - *(v95 - 1) * 2.0);
      float v98 = *v95;
      *(v96 - 1) = v97;
      *int v96 = v98;
      v95 += 6;
      v96 += 2;
      --v94;
    }
    while (v94);
    goto LABEL_97;
  }
  uint64_t v64 = *(void *)(a1 + 824);
  if (v64)
  {
    uint64_t v65 = *(unsigned int *)(v64 + 16);
    if (!v65) {
      goto LABEL_97;
    }
    unsigned int v66 = 0;
    uint64_t v67 = 0;
    uint64_t v68 = 8 * (v65 - 1);
    while (1)
    {
      int32x2_t v69 = (int32x2_t)vcvt_f32_f64(*(float64x2_t *)(a2 + 48 * v67 + 32));
      if (v65 >= 0x1C)
      {
        uint64_t v70 = 0;
        uint64_t v71 = 8 * (v65 * v67);
        BOOL v72 = __CFADD__(v65 * v67, v65 - 1);
        if (a1 + 840 + v71 + v68 >= (unint64_t)(a1 + 840 + v71)
          && a1 + 836 + v71 + v68 >= (unint64_t)(a1 + 836 + v71)
          && !v72)
        {
          int32x4_t v74 = vdupq_lane_s32(v69, 0);
          int32x4_t v75 = vdupq_lane_s32(v69, 1);
          int32x4_t v76 = vzip2q_s32(v74, v75);
          int32x4_t v77 = vzip1q_s32(v74, v75);
          unsigned int v78 = v66;
          uint64_t v79 = v65 & 0xFFFFFFF8;
          do
          {
            uint64_t v80 = (int32x4_t *)(a1 + 836 + 8 * v78);
            *uint64_t v80 = v77;
            v80[1] = v76;
            uint64_t v81 = (int32x4_t *)(a1 + 836 + 8 * (v78 + 4));
            *uint64_t v81 = v77;
            v81[1] = v76;
            v78 += 8;
            v79 -= 8;
          }
          while (v79);
          uint64_t v70 = v65 & 0xFFFFFFF8;
          if (v70 == v65) {
            goto LABEL_63;
          }
        }
      }
      else
      {
        uint64_t v70 = 0;
      }
      uint64_t v82 = v65 - v70;
      unsigned int v83 = v66 + v70;
      do
      {
        *(int32x2_t *)(a1 + 8 * v83++ + 836) = v69;
        --v82;
      }
      while (v82);
LABEL_63:
      ++v67;
      v66 += v65;
      if (v67 == v114) {
        goto LABEL_97;
      }
    }
  }
  if (v114 >= 5)
  {
    uint64_t v100 = v114 & 3;
    if ((v114 & 3) == 0) {
      uint64_t v100 = 4;
    }
    uint64_t v99 = v114 - v100;
    unint64_t v101 = (float *)(a1 + 836);
    uint64_t v102 = (float64_t *)(a2 + 128);
    uint64_t v103 = v99;
    do
    {
      v104.f64[0] = *v102;
      v105.f64[0] = v102[1];
      v104.f64[1] = v102[6];
      v106.f64[0] = *(v102 - 12);
      v107.f64[0] = *(v102 - 11);
      v106.f64[1] = *(v102 - 6);
      v117.val[0] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v106), v104);
      v105.f64[1] = v102[7];
      v107.f64[1] = *(v102 - 5);
      v117.val[1] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v107), v105);
      vst2q_f32(v101, v117);
      v101 += 8;
      v102 += 24;
      v103 -= 4;
    }
    while (v103);
  }
  else
  {
    uint64_t v99 = 0;
  }
  uint64_t v108 = v114 - v99;
  uint64_t v109 = (float32x2_t *)(a1 + 8 * v99 + 836);
  int v110 = (float64x2_t *)(a2 + 48 * v99 + 32);
  do
  {
    float64x2_t v111 = *v110;
    v110 += 3;
    *v109++ = vcvt_f32_f64(v111);
    --v108;
  }
  while (v108);
LABEL_97:

  return AGX::ClipRectContextGen3<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::encodeViewportState(a1, a2, a3);
}

void AGX::ClipRectContextGen3<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::setScissors(uint64_t a1, int64x2_t *a2, unsigned int a3)
{
  if (a3 != 1)
  {
    uint64_t v10 = *(void *)(a1 + 824);
    if (v10)
    {
      unsigned int v9 = *(_DWORD *)(v10 + 16);
      *(_DWORD *)(a1 + 800) = v9 * a3;
      if (!a3 || !v9) {
        return;
      }
      goto LABEL_8;
    }
    *(_DWORD *)(a1 + 800) = a3;
    if (!a3) {
      return;
    }
    double v29 = (unsigned int *)(a1 + 800);
LABEL_22:
    unint64_t v30 = 0;
    double v31 = a2 + 1;
    do
    {
      *(int64x2_t *)(a1 + 264 + 16 * v30++) = vsliq_n_s64(v31[-1], vaddq_s64(*v31, v31[-1]), 0x20uLL);
      v31 += 2;
    }
    while (v30 < *v29);
    return;
  }
  __int32 v5 = a2->i32[2];
  int v6 = a2[1].i32[0] + a2->i32[0];
  __int32 v7 = a2[1].i32[2] + v5;
  *(_DWORD *)(a1 + 1100) = a2->i32[0];
  *(_DWORD *)(a1 + 1104) = v6;
  *(_DWORD *)(a1 + 1108) = v5;
  *(_DWORD *)(a1 + 1112) = v7;
  uint64_t v8 = *(void *)(a1 + 824);
  if (!v8)
  {
    double v29 = (unsigned int *)(a1 + 800);
    *(_DWORD *)(a1 + 800) = 1;
    goto LABEL_22;
  }
  unsigned int v9 = *(_DWORD *)(v8 + 16);
  *(_DWORD *)(a1 + 800) = v9;
  if (!v9) {
    return;
  }
LABEL_8:
  int v11 = 0;
  uint64_t v12 = 0;
  uint64_t v13 = a3;
  uint64_t v14 = v9;
  do
  {
    uint64_t v15 = 0;
    double v16 = &a2[2 * v12];
    float32x2_t v17 = vcvt_f32_u32((uint32x2_t)vmovn_s64(*v16));
    float32x2_t v34 = vcvt_f32_u32((uint32x2_t)vmovn_s64(vaddq_s64(v16[1], *v16)));
    float32x2_t v32 = v17;
    do
    {
      float32x2_t v20 = v34;
      float32x2_t v21 = v17;
      if (!*(unsigned char *)(a1 + 832))
      {
        AGX::WarpFunction<AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::getWarpedCoordinate();
        v23.i32[1] = v22;
        float32x2_t v33 = v23;
        AGX::WarpFunction<AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::getWarpedCoordinate();
        float32x2_t v26 = vrndm_f32(v33);
        float32x2_t v21 = (float32x2_t)vbsl_s8((int8x8_t)vceq_f32(vsub_f32(v33, v26), (float32x2_t)0x3F0000003F000000), (int8x8_t)v26, (int8x8_t)v33);
        float v27 = floorf(v24);
        if ((float)(v24 - v27) == 0.5) {
          v20.f32[0] = v27;
        }
        else {
          v20.f32[0] = v24;
        }
        float v28 = floorf(v25);
        v20.f32[1] = v25;
        if ((float)(v25 - v28) == 0.5) {
          v20.f32[1] = v28;
        }
        float32x2_t v17 = v32;
      }
      uint32x2_t v18 = vcvt_u32_f32(vrnda_f32(v21));
      v19.i64[0] = v18.u32[0];
      v19.i64[1] = v18.u32[1];
      *(int8x16_t *)(a1 + 16 * (v11 + v15++) + 264) = vorrq_s8((int8x16_t)vshll_n_s32((int32x2_t)vcvt_u32_f32(vrnda_f32(v20)), 0x20uLL), v19);
    }
    while (v14 != v15);
    ++v12;
    v11 += v14;
  }
  while (v12 != v13);
}

unint64_t AGX::ClipRectContextGen3<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::updateClipRegions(uint64_t a1, void *a2)
{
  v55[3] = *MEMORY[0x263EF8340];
  uint64_t v4 = a1 + 264;
  LODWORD(v5) = *(_DWORD *)(a1 + 796);
  unint64_t v6 = *(unsigned int *)(a1 + 800);
  if (v5 > v6)
  {
    float v44 = (uint64_t *)(a1 + 1100);
    uint64_t v45 = *(void *)(a1 + 824);
    if (v6 == 1)
    {
      uint64_t v46 = *v44;
      uint64_t v47 = *(void *)(a1 + 1108);
      if (!v45)
      {
LABEL_62:
        float v49 = (void *)(a1 + 16 * v6 + 272);
        do
        {
          *(v49 - 1) = v46;
          *float v49 = v47;
          ++v6;
          v49 += 2;
        }
        while (v6 < *(unsigned int *)(a1 + 796));
        LODWORD(v5) = *(_DWORD *)(a1 + 796);
LABEL_71:
        *(_DWORD *)(a1 + 800) = v5;
        __int32 v7 = (unsigned char *)(a1 + 794);
        *(unsigned char *)(a1 + 794) = 1;
        uint64_t v8 = (BOOL *)(a1 + 792);
        *(_WORD *)(a1 + 792) = 1;
        goto LABEL_3;
      }
    }
    else
    {
      if (!v45)
      {
        uint64_t v47 = 0;
        uint64_t v46 = 0;
        goto LABEL_62;
      }
      unsigned int v48 = *(_DWORD *)(v45 + 16);
      if (v6 != v48)
      {
        uint64_t v46 = 0;
        goto LABEL_66;
      }
      uint64_t v46 = *v44;
    }
    unsigned int v48 = *(_DWORD *)(v45 + 16);
LABEL_66:
    if (v48)
    {
      uint64_t v50 = 0;
      uint64_t v51 = v55;
      do
      {
        *(v51 - 1) = AGX::ClipRectContextGen3<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::warpClipRect(a1, v46);
        *uint64_t v51 = v52;
        ++v50;
        v51 += 2;
      }
      while (v48 != v50);
    }
    float64x2_t v53 = (_OWORD *)(a1 + 16 * v6 + 264);
    do
    {
      *v53++ = *(_OWORD *)&v54[16 * (v6++ % v48)];
      unint64_t v5 = *(unsigned int *)(a1 + 796);
    }
    while (v6 < v5);
    goto LABEL_71;
  }
  __int32 v7 = (unsigned char *)(a1 + 794);
  *(unsigned char *)(a1 + 794) = 1;
  uint64_t v8 = (BOOL *)(a1 + 792);
  *(_WORD *)(a1 + 792) = 1;
LABEL_3:
  if (!v5) {
    return v5 & 1;
  }
  uint64_t v9 = 0;
  unint64_t v10 = 0;
  LOBYTE(v5) = 0;
  uint64_t v11 = v4 + 256;
  do
  {
    int64x2_t v14 = *(int64x2_t *)(v11 - 256);
    int64x2_t v15 = *(int64x2_t *)(v11 - 512);
    uint32x2_t v16 = (uint32x2_t)vmovn_s64(v14);
    int8x8_t v17 = (int8x8_t)vmovn_s64(v15);
    *(int32x2_t *)v15.i8 = vshrn_n_s64(v15, 0x20uLL);
    int8x8_t v18 = vbsl_s8((int8x8_t)vcgt_u32((uint32x2_t)v17, v16), v17, (int8x8_t)vmin_u32(v16, *(uint32x2_t *)v15.i8));
    *(int32x2_t *)v14.i8 = vshrn_n_s64(v14, 0x20uLL);
    v19.i64[0] = v18.u32[0];
    v19.i64[1] = v18.u32[1];
    int8x16_t v20 = vorrq_s8((int8x16_t)vshll_n_s32((int32x2_t)vbsl_s8((int8x8_t)vcgt_u32((uint32x2_t)v18, *(uint32x2_t *)v14.i8), v18, (int8x8_t)vmin_u32(*(uint32x2_t *)v14.i8, *(uint32x2_t *)v15.i8)), 0x20uLL), v19);
    uint64_t v21 = *(void *)a1 + v9;
    int v23 = *(_DWORD *)(v21 + 4);
    int v22 = *(_DWORD *)(v21 + 8);
    *(void *)(v21 + 4) = 0x80000000;
    if (v20.i32[0] == v20.i32[1] || v20.i32[2] == v20.i32[3])
    {
      BOOL v27 = 0;
      if (v23 != 0x80000000) {
        goto LABEL_16;
      }
    }
    else
    {
      unsigned int v25 = (v20.i32[0] << 11) & 0x1FF0000 | ((v20.i32[1] - 1) >> 5) & 0x1FF | 0x80000000;
      *(_DWORD *)(v21 + 4) = v25;
      *(_DWORD *)(v21 + 8) = (v20.i32[2] << 11) & 0x1FF0000 | ((v20.i32[3] - 1) >> 5) & 0x1FF;
      int8x8_t v26 = vorr_s8(*(int8x8_t *)v20.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v20, v20, 8uLL));
      BOOL v27 = ((v26.i8[0] | v26.i8[4]) & 0x1F) == 0;
      if (v23 != v25)
      {
LABEL_16:
        *a2 |= 0x1000000000000uLL;
        goto LABEL_17;
      }
    }
    if (v22 != *(_DWORD *)(v21 + 8)) {
      goto LABEL_16;
    }
LABEL_17:
    *(unsigned char *)(a1 + 794) &= v27;
    unsigned int v28 = *(_DWORD *)(a1 + 776);
    BOOL v29 = v20.i32[0] == v28
       && *(uint64_t *)((char *)v20.i64 + 4) == *(void *)(a1 + 780)
       && v20.i32[3] == *(_DWORD *)(a1 + 788);
    if (!*v8) {
      BOOL v29 = 0;
    }
    BOOL *v8 = v29;
    if (*(_DWORD *)v11 == v20.i32[0] && *(void *)(v11 + 4) == *(uint64_t *)((char *)v20.i64 + 4))
    {
      BOOL v30 = *(_DWORD *)(v11 + 12) != v20.i32[3];
      if (v20.i32[0] > v28) {
        goto LABEL_5;
      }
    }
    else
    {
      BOOL v30 = 1;
      if (v20.i32[0] > v28) {
        goto LABEL_5;
      }
    }
    if (v20.i32[2] > *(_DWORD *)(a1 + 784) || v20.i32[1] < *(_DWORD *)(a1 + 780))
    {
LABEL_5:
      BOOL v12 = 1;
      goto LABEL_6;
    }
    BOOL v12 = v20.i32[3] < *(_DWORD *)(a1 + 788);
LABEL_6:
    LOBYTE(v5) = v5 | v30;
    *(unsigned char *)(a1 + 793) |= v12;
    *(int8x16_t *)uint64_t v11 = v20;
    v11 += 16;
    ++v10;
    unint64_t v13 = *(unsigned int *)(a1 + 796);
    v9 += 8;
  }
  while (v10 < v13);
  if (!*v7) {
    goto LABEL_41;
  }
  if (v13)
  {
    if (!*(unsigned char *)(a1 + 804)) {
      goto LABEL_48;
    }
    double v31 = (float *)(a1 + 840);
    char v32 = 1;
    uint64_t v33 = *(unsigned int *)(a1 + 796);
    do
    {
      BOOL v34 = *(v31 - 1) == *(float *)(a1 + 1092) && *v31 == *(float *)(a1 + 1096);
      v32 &= v34;
      v31 += 2;
      --v33;
    }
    while (v33);
    if ((v32 & 1) == 0) {
      unsigned char *v7 = 0;
    }
LABEL_41:
    if (v13)
    {
      if (*(unsigned char *)(a1 + 804))
      {
        float v35 = (float *)(a1 + 968);
        do
        {
          float v37 = *(v35 - 33);
          float v38 = *(v35 - 32);
          BOOL v36 = *(v35 - 1) != v37 || *v35 != v38;
          LOBYTE(v5) = v5 | v36;
          *(v35 - 1) = v37;
          float *v35 = v38;
          v35 += 2;
          --v13;
        }
        while (v13);
        return v5 & 1;
      }
LABEL_48:
      uint64_t v39 = (float *)(a1 + 968);
      do
      {
        float v41 = *(float *)(a1 + 1092);
        float v42 = *(float *)(a1 + 1096);
        BOOL v40 = *(v39 - 1) != v41 || *v39 != v42;
        LOBYTE(v5) = v5 | v40;
        *(v39 - 1) = v41;
        *uint64_t v39 = v42;
        v39 += 2;
        --v13;
      }
      while (v13);
    }
  }
  return v5 & 1;
}

uint64_t AGX::ClipRectContextGen3<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::canUseScissorConfigReg(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 832)) {
    return 0;
  }
  uint64_t v2 = *(unsigned __int8 *)(a1 + 792);
  if (!*(unsigned char *)(a1 + 792)) {
    return v2;
  }
  uint64_t v3 = *(unsigned int *)(a1 + 796);
  if (!v3) {
    return 1;
  }
  if (*(unsigned char *)(a1 + 804))
  {
    uint64_t v4 = (float *)(a1 + 840);
    LODWORD(v2) = 1;
    do
    {
      BOOL v5 = *(v4 - 1) == *(float *)(a1 + 1092) && *v4 == *(float *)(a1 + 1096);
      uint64_t v2 = v2 & v5;
      v4 += 2;
      --v3;
    }
    while (v3);
    return v2;
  }
  return 1;
}

uint64_t AGX::ClipRectContextGen3<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::anyPartialScreenClip(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 832)) {
    return 1;
  }
  if (*(unsigned char *)(a1 + 793)) {
    return 1;
  }
  uint64_t v2 = *(unsigned int *)(a1 + 796);
  if (!v2) {
    return 0;
  }
  if (!*(unsigned char *)(a1 + 804)) {
    return 0;
  }
  uint64_t v3 = (float *)(a1 + 840);
  int v4 = 1;
  do
  {
    BOOL v5 = *(v3 - 1) == *(float *)(a1 + 1092) && *v3 == *(float *)(a1 + 1096);
    v4 &= v5;
    v3 += 2;
    --v2;
  }
  while (v2);
  return v4 ^ 1u;
}

uint64_t AGX::ClipRectContextGen3<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::setScissorBits(uint64_t result, unsigned int a2, int8x8_t *a3, uint64_t a4)
{
  int8x16_t v4 = *(int8x16_t *)(result + 16 * a2 + 520);
  if (*(unsigned char *)(result + 804)) {
    BOOL v5 = (int8x8_t *)(result + 8 * a2 + 836);
  }
  else {
    BOOL v5 = (int8x8_t *)(result + 1092);
  }
  v6.i32[0] = vshl_n_s32(*(int32x2_t *)v4.i8, 0x10uLL).u32[0];
  v6.i32[1] = vextq_s8(v4, v4, 8uLL).u16[2];
  int8x8_t v7 = *v5;
  int32x2_t v8 = (int32x2_t)vextq_s8(v4, v4, 4uLL).u64[0];
  int32x2_t v9 = vshl_n_s32(v8, 0x10uLL);
  v8.i16[1] = 0;
  v8.i32[1] = v9.i32[1];
  *a3 = vorr_s8((int8x8_t)v8, v6);
  a3[1] = v7;
  if (*(unsigned char *)(result + 832))
  {
    uint64_t v10 = *(void *)(result + 808);
    int v11 = *(_DWORD *)(*(void *)(*(void *)(v10 + 90568) + 64) + 16);
    uint64_t v12 = *(void *)(v10 + 736);
    *(void *)(v10 + 736) = v12 + 56;
    *(_DWORD *)uint64_t v12 = 0;
    *(_DWORD *)(v12 + 4) = v11;
    *(void *)(v12 + 8) = a4;
    *(_DWORD *)(v12 + 16) = v4.i32[0];
    *(_DWORD *)(v12 + 20) = v4.i32[2];
    *(_DWORD *)(v12 + 24) = v4.i32[1];
    *(_DWORD *)(v12 + 28) = v4.i32[3];
    *(_DWORD *)(v12 + 32) = a2;
    int v13 = *(_DWORD *)(v10 + 38568) + 1;
    *(_DWORD *)(v10 + 38568) = v13;
    *(_DWORD *)(*(void *)(v10 + 38560) + 4) = v13;
    ++*(_DWORD *)(v10 + 1540);
  }
  return result;
}

void sub_242A3917C(_Unwind_Exception *a1)
{
}

void std::vector<AGXG17FamilyTexture *>::push_back[abi:nn180100](uint64_t a1, uint64_t a2)
{
  BOOL v5 = *(void **)(a1 + 8);
  unint64_t v4 = *(void *)(a1 + 16);
  int8x8_t v6 = v5;
  if ((unint64_t)v5 >= v4)
  {
    int32x2_t v8 = *(unsigned char **)a1;
    uint64_t v9 = (uint64_t)v5 - *(void *)a1;
    uint64_t v10 = v9 >> 3;
    unint64_t v11 = (v9 >> 3) + 1;
    if (v11 >> 61) {
      abort();
    }
    uint64_t v12 = v4 - (void)v8;
    if (v12 >> 2 > v11) {
      unint64_t v11 = v12 >> 2;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v13 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v11;
    }
    if (v13)
    {
      if (v13 >> 61) {
        std::__throw_bad_array_new_length[abi:nn180100]();
      }
      int64x2_t v14 = operator new(8 * v13);
    }
    else
    {
      int64x2_t v14 = 0;
    }
    int64x2_t v15 = &v14[8 * v10];
    uint32x2_t v16 = &v14[8 * v13];
    void *v15 = a2;
    int8x8_t v7 = v15 + 1;
    if (v5 == (void *)v8)
    {
      int32x2_t v8 = v5;
    }
    else
    {
      unint64_t v17 = (char *)v5 - v8 - 8;
      if (v17 < 0x58) {
        goto LABEL_29;
      }
      if ((unint64_t)((char *)v5 - v14 - v9) < 0x20) {
        goto LABEL_29;
      }
      uint64_t v18 = (v17 >> 3) + 1;
      int8x8_t v6 = &v5[-(v18 & 0x3FFFFFFFFFFFFFFCLL)];
      int8x16_t v19 = &v14[8 * v10 - 16];
      int8x16_t v20 = (long long *)(v5 - 2);
      uint64_t v21 = v18 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v22 = *v20;
        *(v19 - 1) = *(v20 - 1);
        *int8x16_t v19 = v22;
        v19 -= 2;
        v20 -= 2;
        v21 -= 4;
      }
      while (v21);
      v15 -= v18 & 0x3FFFFFFFFFFFFFFCLL;
      if (v18 != (v18 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_29:
        do
        {
          uint64_t v23 = *--v6;
          *--int64x2_t v15 = v23;
        }
        while (v6 != (void *)v8);
        int32x2_t v8 = *(unsigned char **)a1;
      }
    }
    *(void *)a1 = v15;
    *(void *)(a1 + 8) = v7;
    *(void *)(a1 + 16) = v16;
    if (v8) {
      operator delete(v8);
    }
  }
  else
  {
    *BOOL v5 = a2;
    int8x8_t v7 = v5 + 1;
  }
  *(void *)(a1 + 8) = v7;
}

void sub_242A39C74(_Unwind_Exception *a1)
{
}

void sub_242A39F8C(_Unwind_Exception *exception_object)
{
  unint64_t v4 = *(void **)(v1 + 40);
  if (v4)
  {
    do
    {
      BOOL v5 = (void *)*v4;
      operator delete(v4);
      unint64_t v4 = v5;
    }
    while (v5);
  }
  int8x8_t v6 = *v2;
  *uint64_t v2 = 0;
  if (v6) {
    operator delete(v6);
  }
  _Unwind_Resume(exception_object);
}

void sub_242A3A600(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,void *__p)
{
  _Block_object_dispose(&a23, 8);
  char v32 = __p;
  if (__p)
  {
    do
    {
      uint64_t v33 = (void *)*v32;
      operator delete(v32);
      char v32 = v33;
    }
    while (v33);
  }
  BOOL v34 = a29;
  a29 = 0;
  if (v34) {
    operator delete(v34);
  }
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__873(uint64_t result, void *a2)
{
  uint64_t v2 = a2[6];
  a2[6] = 0;
  *(void *)(result + 48) = v2;
  *(void *)(result + 56) = a2[7];
  a2[7] = 0;
  uint64_t v5 = a2[8];
  uint64_t v3 = a2 + 8;
  uint64_t v4 = v5;
  *(void *)(result + 64) = v5;
  uint64_t v6 = v3[1];
  *(void *)(result + 72) = v6;
  *(_DWORD *)(result + 80) = *((_DWORD *)v3 + 4);
  if (v6)
  {
    unint64_t v7 = *(void *)(v4 + 8);
    unint64_t v8 = *(void *)(result + 56);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        v7 %= v8;
      }
    }
    else
    {
      v7 &= v8 - 1;
    }
    *(void *)(v2 + 8 * v7) = result + 64;
    void *v3 = 0;
    v3[1] = 0;
  }
  return result;
}

void __Block_byref_object_dispose__874(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 64);
  if (v2)
  {
    do
    {
      uint64_t v3 = (void *)*v2;
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  uint64_t v4 = *(void **)(a1 + 48);
  *(void *)(a1 + 48) = 0;
  if (v4)
  {
    operator delete(v4);
  }
}

uint64_t ___ZNK3AGX13CommandBufferINS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE39processDebugBufferAndUpdateEncoderInfosEP7NSArrayIPU38objcproto27MTLCommandBufferEncoderInfo11objc_objectE_block_invoke(uint64_t result, unsigned int *a2, unint64_t a3)
{
  v8[0] = MEMORY[0x263EF8330];
  v8[1] = 3221225472;
  uint64_t v9 = ___ZNK3AGX13CommandBufferINS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE39processDebugBufferAndUpdateEncoderInfosEP7NSArrayIPU38objcproto27MTLCommandBufferEncoderInfo11objc_objectE_block_invoke_2;
  uint64_t v10 = &unk_26516F300;
  uint64_t v11 = *(void *)(result + 32);
  if (a3 >= 8)
  {
    uint64_t v3 = *a2;
    uint64_t v4 = 8 * v3;
    if (8 * v3 + 8 <= a3 && v3 != 0)
    {
      uint64_t v6 = (unint64_t *)(a2 + 2);
      do
      {
        unint64_t v7 = *v6++;
        uint64_t result = ((uint64_t (*)(void *, unint64_t, unint64_t, unint64_t))v9)(v8, v7 & 0x1FFFFFFFFFFFFFFLL, (v7 >> 57) & 3, v7 >> 59);
        v4 -= 8;
      }
      while (v4);
    }
  }
  return result;
}

void std::__hash_table<std::__hash_value_type<unsigned long long,AGXSDebugBuffer::KickStatus>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,AGXSDebugBuffer::KickStatus>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,AGXSDebugBuffer::KickStatus>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,AGXSDebugBuffer::KickStatus>>>::__emplace_unique_key_args<unsigned long long,std::pair<unsigned long long const,AGXSDebugBuffer::KickStatus>>(float *a1, unint64_t a2, _OWORD *a3)
{
  unint64_t v5 = a2;
  unint64_t v7 = *((void *)a1 + 1);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = a2;
      if (v7 <= a2) {
        unint64_t v3 = a2 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & a2;
    }
    uint64_t v9 = *(void **)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      uint64_t v10 = (void *)*v9;
      if (v10)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v12 = v10[1];
            if (v12 == a2)
            {
              if (v10[2] == a2) {
                return;
              }
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_22;
            }
            uint64_t v10 = (void *)*v10;
            if (!v10) {
              goto LABEL_22;
            }
          }
        }
        do
        {
          unint64_t v11 = v10[1];
          if (v11 == a2)
          {
            if (v10[2] == a2) {
              return;
            }
          }
          else
          {
            if (v11 >= v7) {
              v11 %= v7;
            }
            if (v11 != v3) {
              break;
            }
          }
          uint64_t v10 = (void *)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_22:
  unint64_t v13 = operator new(0x20uLL);
  void *v13 = 0;
  v13[1] = v5;
  *((_OWORD *)v13 + 1) = *a3;
  float v14 = (float)(unint64_t)(*((void *)a1 + 3) + 1);
  float v15 = a1[8];
  if (v7 && (float)(v15 * (float)v7) >= v14)
  {
    unint64_t v5 = v3;
    goto LABEL_72;
  }
  BOOL v16 = 1;
  if (v7 >= 3) {
    BOOL v16 = (v7 & (v7 - 1)) != 0;
  }
  unint64_t v17 = v16 | (2 * v7);
  unint64_t v18 = vcvtps_u32_f32(v14 / v15);
  if (v17 <= v18) {
    size_t prime = v18;
  }
  else {
    size_t prime = v17;
  }
  if (prime == 1)
  {
    size_t prime = 2;
  }
  else if ((prime & (prime - 1)) != 0)
  {
    size_t prime = std::__next_prime(prime);
    unint64_t v7 = *((void *)a1 + 1);
  }
  if (prime > v7)
  {
LABEL_35:
    if (prime >> 61) {
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
    int8x16_t v20 = operator new(8 * prime);
    uint64_t v21 = *(void **)a1;
    *(void *)a1 = v20;
    if (v21) {
      operator delete(v21);
    }
    uint64_t v22 = 0;
    *((void *)a1 + 1) = prime;
    do
      *(void *)(*(void *)a1 + 8 * v22++) = 0;
    while (prime != v22);
    float v24 = (uint64_t *)(a1 + 4);
    uint64_t v23 = (void *)*((void *)a1 + 2);
    if (!v23) {
      goto LABEL_59;
    }
    size_t v25 = v23[1];
    size_t v26 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      size_t v27 = v25 & v26;
      *(void *)(*(void *)a1 + 8 * v27) = v24;
      for (uint64_t i = (void *)*v23; *v23; uint64_t i = (void *)*v23)
      {
        size_t v29 = i[1] & v26;
        if (v29 == v27)
        {
          uint64_t v23 = i;
        }
        else if (*(void *)(*(void *)a1 + 8 * v29))
        {
          void *v23 = *i;
          uint64_t v30 = 8 * v29;
          *uint64_t i = **(void **)(*(void *)a1 + v30);
          **(void **)(*(void *)a1 + v30) = i;
        }
        else
        {
          *(void *)(*(void *)a1 + 8 * v29) = v23;
          uint64_t v23 = i;
          size_t v27 = v29;
        }
      }
LABEL_59:
      unint64_t v7 = prime;
      goto LABEL_60;
    }
    if (v25 >= prime) {
      v25 %= prime;
    }
    *(void *)(*(void *)a1 + 8 * v25) = v24;
    BOOL v34 = (void *)*v23;
    if (!*v23) {
      goto LABEL_59;
    }
    while (1)
    {
      size_t v36 = v34[1];
      if (v36 >= prime) {
        v36 %= prime;
      }
      if (v36 != v25)
      {
        if (!*(void *)(*(void *)a1 + 8 * v36))
        {
          *(void *)(*(void *)a1 + 8 * v36) = v23;
          goto LABEL_64;
        }
        void *v23 = *v34;
        uint64_t v35 = 8 * v36;
        void *v34 = **(void **)(*(void *)a1 + v35);
        **(void **)(*(void *)a1 + v35) = v34;
        BOOL v34 = v23;
      }
      size_t v36 = v25;
LABEL_64:
      uint64_t v23 = v34;
      BOOL v34 = (void *)*v34;
      size_t v25 = v36;
      if (!v34) {
        goto LABEL_59;
      }
    }
  }
  if (prime >= v7) {
    goto LABEL_60;
  }
  unint64_t v31 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 3) / a1[8]);
  if (v7 < 3 || (uint8x8_t v32 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v32.i16[0] = vaddlv_u8(v32), v32.u32[0] > 1uLL))
  {
    unint64_t v31 = std::__next_prime(v31);
  }
  else
  {
    uint64_t v33 = 1 << -(char)__clz(v31 - 1);
    if (v31 >= 2) {
      unint64_t v31 = v33;
    }
  }
  if (prime <= v31) {
    size_t prime = v31;
  }
  if (prime < v7)
  {
    if (!prime)
    {
      BOOL v40 = *(void **)a1;
      *(void *)a1 = 0;
      if (v40) {
        operator delete(v40);
      }
      unint64_t v7 = 0;
      *((void *)a1 + 1) = 0;
      goto LABEL_60;
    }
    goto LABEL_35;
  }
  unint64_t v7 = *((void *)a1 + 1);
LABEL_60:
  if ((v7 & (v7 - 1)) != 0)
  {
    if (v7 <= v5) {
      v5 %= v7;
    }
  }
  else
  {
    v5 &= v7 - 1;
  }
LABEL_72:
  float v37 = *(void **)a1;
  float v38 = *(void **)(*(void *)a1 + 8 * v5);
  if (v38)
  {
    void *v13 = *v38;
LABEL_80:
    *float v38 = v13;
    goto LABEL_81;
  }
  void *v13 = *((void *)a1 + 2);
  *((void *)a1 + 2) = v13;
  v37[v5] = a1 + 4;
  if (*v13)
  {
    unint64_t v39 = *(void *)(*v13 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v39 >= v7) {
        v39 %= v7;
      }
    }
    else
    {
      v39 &= v7 - 1;
    }
    float v38 = (void *)(*(void *)a1 + 8 * v39);
    goto LABEL_80;
  }
LABEL_81:
  ++*((void *)a1 + 3);
}

void sub_242A3AC44(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void ___ZNK3AGX13CommandBufferINS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE39processDebugBufferAndUpdateEncoderInfosEP7NSArrayIPU38objcproto27MTLCommandBufferEncoderInfo11objc_objectE_block_invoke_2(uint64_t a1, unint64_t a2, unsigned int a3)
{
  uint64_t v3 = *(void *)(*(void *)(a1 + 32) + 8);
  uint64_t v4 = (float *)(v3 + 48);
  int8x8_t v5 = *(int8x8_t *)(v3 + 56);
  if (!*(void *)&v5) {
    goto LABEL_21;
  }
  uint8x8_t v6 = (uint8x8_t)vcnt_s8(v5);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    unint64_t v7 = a2;
    if (*(void *)&v5 <= a2) {
      unint64_t v7 = a2 % *(void *)&v5;
    }
  }
  else
  {
    unint64_t v7 = (*(void *)&v5 - 1) & a2;
  }
  uint8x8_t v8 = *(uint64_t ***)(*(void *)v4 + 8 * v7);
  if (!v8 || (uint64_t v9 = *v8) == 0)
  {
LABEL_21:
    *(void *)&long long v14 = a2;
    BYTE8(v14) = a3;
    std::__hash_table<std::__hash_value_type<unsigned long long,AGXSDebugBuffer::KickStatus>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,AGXSDebugBuffer::KickStatus>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,AGXSDebugBuffer::KickStatus>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,AGXSDebugBuffer::KickStatus>>>::__emplace_unique_key_args<unsigned long long,std::pair<unsigned long long const,AGXSDebugBuffer::KickStatus>>(v4, a2, &v14);
    return;
  }
  if (v6.u32[0] < 2uLL)
  {
    uint64_t v10 = *(void *)&v5 - 1;
    while (1)
    {
      uint64_t v12 = v9[1];
      if (v12 == a2)
      {
        if (v9[2] == a2) {
          goto LABEL_22;
        }
      }
      else if ((v12 & v10) != v7)
      {
        goto LABEL_21;
      }
      uint64_t v9 = (uint64_t *)*v9;
      if (!v9) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v11 = v9[1];
    if (v11 == a2) {
      break;
    }
    if (v11 >= *(void *)&v5) {
      v11 %= *(void *)&v5;
    }
    if (v11 != v7) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v9 = (uint64_t *)*v9;
    if (!v9) {
      goto LABEL_21;
    }
  }
  if (v9[2] != a2) {
    goto LABEL_11;
  }
LABEL_22:
  unsigned int v13 = *((unsigned __int8 *)v9 + 24);
  if (v13 <= a3) {
    LOBYTE(v13) = a3;
  }
  *((unsigned char *)v9 + 24) = v13;
}

void AGX::CommandBuffer<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::prepareDebugBufferForSubmission(void)::{lambda(void)#1}::operator()[abi:[AGX] Failed assertion _debugBufferStart __ nullptr && debugBufferEnd __ nullptr && ptrDelta(debugBufferStart_ debugBufferEnd) __ static_cast_intptr_t_(requiredDebugBufferSize)_]()
{
}

void sub_242A3C188(_Unwind_Exception *a1)
{
}

void sub_242A3C3B0(_Unwind_Exception *a1)
{
}

uint64_t AGX::ComputeCoalescingResourceTracker<AGX::HAL200::Encoders,AGX::HAL200::Classes>::ComputeCoalescingResourceTracker(uint64_t a1)
{
  uint64_t v2 = (void *)(a1 + 8);
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 40) = 1065353216;
  uint64_t v3 = operator new(0x400uLL);
  uint64_t v4 = 0;
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = 128;
  do
  {
    *(void *)(*v2 + v4) = 0;
    v4 += 8;
  }
  while (v4 != 1024);
  int8x8_t v5 = *(void **)(a1 + 24);
  if (v5)
  {
    uint64_t v6 = v5[1] & 0x7FLL;
    *(void *)(*v2 + 8 * v6) = a1 + 24;
    while (1)
    {
      unint64_t v7 = (void *)*v5;
      if (!*v5) {
        break;
      }
      uint64_t v8 = v7[1] & 0x7FLL;
      if (v8 == v6)
      {
        int8x8_t v5 = (void *)*v5;
      }
      else if (*(void *)(*v2 + 8 * v8))
      {
        *int8x8_t v5 = *v7;
        uint64_t v9 = 8 * v8;
        void *v7 = **(void **)(*v2 + v9);
        **(void **)(*v2 + v9) = v7;
      }
      else
      {
        *(void *)(*v2 + 8 * v8) = v5;
        int8x8_t v5 = v7;
        uint64_t v6 = v8;
      }
    }
  }
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  uint64_t v10 = (void *)(a1 + 48);
  *(_DWORD *)(a1 + 80) = 1065353216;
  unint64_t v11 = operator new(0x400uLL);
  uint64_t v12 = 0;
  *(void *)(a1 + 48) = v11;
  *(void *)(a1 + 56) = 128;
  do
  {
    *(void *)(*v10 + v12) = 0;
    v12 += 8;
  }
  while (v12 != 1024);
  unsigned int v13 = *(void **)(a1 + 64);
  if (v13)
  {
    uint64_t v14 = v13[1] & 0x7FLL;
    *(void *)(*v10 + 8 * v14) = a1 + 64;
    while (1)
    {
      float v15 = (void *)*v13;
      if (!*v13) {
        break;
      }
      uint64_t v16 = v15[1] & 0x7FLL;
      if (v16 == v14)
      {
        unsigned int v13 = (void *)*v13;
      }
      else if (*(void *)(*v10 + 8 * v16))
      {
        void *v13 = *v15;
        uint64_t v17 = 8 * v16;
        void *v15 = **(void **)(*v10 + v17);
        **(void **)(*v10 + v17) = v15;
      }
      else
      {
        *(void *)(*v10 + 8 * v16) = v13;
        unsigned int v13 = v15;
        uint64_t v14 = v16;
      }
    }
  }
  return a1;
}

void sub_242A3C86C(_Unwind_Exception *a1)
{
  std::unordered_map<unsigned long long,std::pair<unsigned long long,unsigned long long>>::~unordered_map[abi:nn180100](v2);
  std::unordered_map<unsigned long long,std::pair<unsigned long long,unsigned long long>>::~unordered_map[abi:nn180100](v1);
  _Unwind_Resume(a1);
}

void sub_242A3C888(_Unwind_Exception *a1)
{
  std::unordered_map<unsigned long long,std::pair<unsigned long long,unsigned long long>>::~unordered_map[abi:nn180100](v1);
  _Unwind_Resume(a1);
}

float *ResourceTracker<_ResourceTrackerBinding>::addResource(float *result, float *a2, unsigned int a3, int a4)
{
  unsigned int v13 = a3;
  unint64_t v5 = *((void *)result + 1);
  if (v5)
  {
    uint8x8_t v6 = (uint8x8_t)vcnt_s8((int8x8_t)v5);
    v6.i16[0] = vaddlv_u8(v6);
    if (v6.u32[0] > 1uLL)
    {
      unint64_t v7 = a3;
      if (v5 <= a3) {
        unint64_t v7 = a3 % v5;
      }
    }
    else
    {
      unint64_t v7 = (v5 - 1) & a3;
    }
    uint64_t v8 = *(uint64_t ***)(*(void *)result + 8 * v7);
    if (v8)
    {
      uint64_t v9 = *v8;
      if (v9)
      {
        if (v6.u32[0] < 2uLL)
        {
          unint64_t v10 = v5 - 1;
          while (1)
          {
            uint64_t v12 = v9[1];
            if (v12 == a3)
            {
              if (*((_DWORD *)v9 + 4) == a3) {
                goto LABEL_23;
              }
            }
            else if ((v12 & v10) != v7)
            {
              goto LABEL_21;
            }
            uint64_t v9 = (uint64_t *)*v9;
            if (!v9) {
              goto LABEL_21;
            }
          }
        }
        do
        {
          unint64_t v11 = v9[1];
          if (v11 == a3)
          {
            if (*((_DWORD *)v9 + 4) == a3)
            {
LABEL_23:
              *((_DWORD *)v9 + 5) |= a4;
              return result;
            }
          }
          else
          {
            if (v11 >= v5) {
              v11 %= v5;
            }
            if (v11 != v7) {
              break;
            }
          }
          uint64_t v9 = (uint64_t *)*v9;
        }
        while (v9);
      }
    }
  }
LABEL_21:
  uint64_t result = (float *)std::__hash_table<std::__hash_value_type<unsigned int,_ResourceTrackerBinding>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,_ResourceTrackerBinding>,ResourceTrackerBindingsHash,ResourceTrackerBindingsEqual,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,_ResourceTrackerBinding>,ResourceTrackerBindingsEqual,ResourceTrackerBindingsHash,true>,std::allocator<std::__hash_value_type<unsigned int,_ResourceTrackerBinding>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(result, a3, &v13);
  result[5] = *a2;
  return result;
}

void *std::__hash_table<std::__hash_value_type<unsigned int,_ResourceTrackerBinding>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,_ResourceTrackerBinding>,ResourceTrackerBindingsHash,ResourceTrackerBindingsEqual,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,_ResourceTrackerBinding>,ResourceTrackerBindingsEqual,ResourceTrackerBindingsHash,true>,std::allocator<std::__hash_value_type<unsigned int,_ResourceTrackerBinding>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(float *a1, unsigned int a2, _DWORD *a3)
{
  unint64_t v6 = a2;
  unint64_t v7 = *((void *)a1 + 1);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = a2;
      if (v7 <= a2) {
        unint64_t v3 = a2 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & a2;
    }
    uint64_t v9 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      unint64_t v10 = *v9;
      if (*v9)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v12 = v10[1];
            if (v12 == a2)
            {
              if (*((_DWORD *)v10 + 4) == a2) {
                return v10;
              }
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_22;
            }
            unint64_t v10 = (void *)*v10;
            if (!v10) {
              goto LABEL_22;
            }
          }
        }
        do
        {
          unint64_t v11 = v10[1];
          if (v11 == a2)
          {
            if (*((_DWORD *)v10 + 4) == a2) {
              return v10;
            }
          }
          else
          {
            if (v11 >= v7) {
              v11 %= v7;
            }
            if (v11 != v3) {
              break;
            }
          }
          unint64_t v10 = (void *)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_22:
  unint64_t v10 = operator new(0x18uLL);
  *unint64_t v10 = 0;
  v10[1] = v6;
  *((_DWORD *)v10 + 4) = *a3;
  *((_DWORD *)v10 + 5) = 0;
  float v13 = (float)(unint64_t)(*((void *)a1 + 3) + 1);
  float v14 = a1[8];
  if (v7 && (float)(v14 * (float)v7) >= v13)
  {
    unint64_t v6 = v3;
    goto LABEL_72;
  }
  BOOL v15 = 1;
  if (v7 >= 3) {
    BOOL v15 = (v7 & (v7 - 1)) != 0;
  }
  unint64_t v16 = v15 | (2 * v7);
  unint64_t v17 = vcvtps_u32_f32(v13 / v14);
  if (v16 <= v17) {
    size_t prime = v17;
  }
  else {
    size_t prime = v16;
  }
  if (prime == 1)
  {
    size_t prime = 2;
  }
  else if ((prime & (prime - 1)) != 0)
  {
    size_t prime = std::__next_prime(prime);
    unint64_t v7 = *((void *)a1 + 1);
  }
  if (prime > v7)
  {
LABEL_35:
    if (prime >> 61) {
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
    int8x16_t v19 = operator new(8 * prime);
    int8x16_t v20 = *(void **)a1;
    *(void *)a1 = v19;
    if (v20) {
      operator delete(v20);
    }
    uint64_t v21 = 0;
    *((void *)a1 + 1) = prime;
    do
      *(void *)(*(void *)a1 + 8 * v21++) = 0;
    while (prime != v21);
    uint64_t v23 = (uint64_t *)(a1 + 4);
    uint64_t v22 = (void *)*((void *)a1 + 2);
    if (!v22) {
      goto LABEL_59;
    }
    size_t v24 = v22[1];
    size_t v25 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      size_t v26 = v24 & v25;
      *(void *)(*(void *)a1 + 8 * v26) = v23;
      for (uint64_t i = (void *)*v22; *v22; uint64_t i = (void *)*v22)
      {
        size_t v28 = i[1] & v25;
        if (v28 == v26)
        {
          uint64_t v22 = i;
        }
        else if (*(void *)(*(void *)a1 + 8 * v28))
        {
          *uint64_t v22 = *i;
          uint64_t v29 = 8 * v28;
          *uint64_t i = **(void **)(*(void *)a1 + v29);
          **(void **)(*(void *)a1 + v29) = i;
        }
        else
        {
          *(void *)(*(void *)a1 + 8 * v28) = v22;
          uint64_t v22 = i;
          size_t v26 = v28;
        }
      }
LABEL_59:
      unint64_t v7 = prime;
      goto LABEL_60;
    }
    if (v24 >= prime) {
      v24 %= prime;
    }
    *(void *)(*(void *)a1 + 8 * v24) = v23;
    uint64_t v33 = (void *)*v22;
    if (!*v22) {
      goto LABEL_59;
    }
    while (1)
    {
      size_t v35 = v33[1];
      if (v35 >= prime) {
        v35 %= prime;
      }
      if (v35 != v24)
      {
        if (!*(void *)(*(void *)a1 + 8 * v35))
        {
          *(void *)(*(void *)a1 + 8 * v35) = v22;
          goto LABEL_64;
        }
        *uint64_t v22 = *v33;
        uint64_t v34 = 8 * v35;
        *uint64_t v33 = **(void **)(*(void *)a1 + v34);
        **(void **)(*(void *)a1 + v34) = v33;
        uint64_t v33 = v22;
      }
      size_t v35 = v24;
LABEL_64:
      uint64_t v22 = v33;
      uint64_t v33 = (void *)*v33;
      size_t v24 = v35;
      if (!v33) {
        goto LABEL_59;
      }
    }
  }
  if (prime >= v7) {
    goto LABEL_60;
  }
  unint64_t v30 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 3) / a1[8]);
  if (v7 < 3 || (uint8x8_t v31 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v31.i16[0] = vaddlv_u8(v31), v31.u32[0] > 1uLL))
  {
    unint64_t v30 = std::__next_prime(v30);
  }
  else
  {
    uint64_t v32 = 1 << -(char)__clz(v30 - 1);
    if (v30 >= 2) {
      unint64_t v30 = v32;
    }
  }
  if (prime <= v30) {
    size_t prime = v30;
  }
  if (prime < v7)
  {
    if (!prime)
    {
      BOOL v40 = *(void **)a1;
      *(void *)a1 = 0;
      if (v40) {
        operator delete(v40);
      }
      unint64_t v7 = 0;
      *((void *)a1 + 1) = 0;
      goto LABEL_60;
    }
    goto LABEL_35;
  }
  unint64_t v7 = *((void *)a1 + 1);
LABEL_60:
  if ((v7 & (v7 - 1)) != 0)
  {
    if (v7 <= v6) {
      v6 %= v7;
    }
  }
  else
  {
    unint64_t v6 = (v7 - 1) & v6;
  }
LABEL_72:
  size_t v36 = *(void **)a1;
  float v37 = *(void **)(*(void *)a1 + 8 * v6);
  if (v37)
  {
    *unint64_t v10 = *v37;
LABEL_80:
    void *v37 = v10;
    goto LABEL_81;
  }
  *unint64_t v10 = *((void *)a1 + 2);
  *((void *)a1 + 2) = v10;
  v36[v6] = a1 + 4;
  if (*v10)
  {
    unint64_t v38 = *(void *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v38 >= v7) {
        v38 %= v7;
      }
    }
    else
    {
      v38 &= v7 - 1;
    }
    float v37 = (void *)(*(void *)a1 + 8 * v38);
    goto LABEL_80;
  }
LABEL_81:
  ++*((void *)a1 + 3);
  return v10;
}

void sub_242A3CE14(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *AGX::ComputeCoalescingResourceTracker<AGX::HAL200::Encoders,AGX::HAL200::Classes>::merge(void *result)
{
  uint64_t v1 = (float *)result;
  uint64_t v2 = (void *)result[3];
  if (!v2) {
    goto LABEL_26;
  }
  unint64_t v3 = result + 6;
LABEL_3:
  while (2)
  {
    unint64_t v4 = v2[2];
    unint64_t v17 = v4;
    unint64_t v5 = *((void *)v1 + 7);
    unint64_t v6 = HIDWORD(v4);
    if (v5)
    {
      uint8x8_t v7 = (uint8x8_t)vcnt_s8((int8x8_t)v5);
      v7.i16[0] = vaddlv_u8(v7);
      if (v7.u32[0] > 1uLL)
      {
        unint64_t v8 = v4;
        if (v5 <= v4) {
          unint64_t v8 = v4 % v5;
        }
      }
      else
      {
        unint64_t v8 = (v5 - 1) & v4;
      }
      uint64_t v9 = *(uint64_t ***)(*v3 + 8 * v8);
      if (v9)
      {
        unint64_t v10 = *v9;
        if (v10)
        {
          if (v7.u32[0] < 2uLL)
          {
            unint64_t v11 = v5 - 1;
            while (1)
            {
              uint64_t v13 = v10[1];
              if (v13 == v4)
              {
                if (*((_DWORD *)v10 + 4) == v4) {
                  goto LABEL_25;
                }
              }
              else if ((v13 & v11) != v8)
              {
                goto LABEL_23;
              }
              unint64_t v10 = (uint64_t *)*v10;
              if (!v10) {
                goto LABEL_23;
              }
            }
          }
          do
          {
            unint64_t v12 = v10[1];
            if (v12 == v4)
            {
              if (*((_DWORD *)v10 + 4) == v4)
              {
LABEL_25:
                *((_DWORD *)v10 + 5) |= HIDWORD(v4);
                uint64_t v2 = (void *)*v2;
                if (!v2) {
                  goto LABEL_26;
                }
                goto LABEL_3;
              }
            }
            else
            {
              if (v12 >= v5) {
                v12 %= v5;
              }
              if (v12 != v8) {
                break;
              }
            }
            unint64_t v10 = (uint64_t *)*v10;
          }
          while (v10);
        }
      }
    }
LABEL_23:
    uint64_t result = std::__hash_table<std::__hash_value_type<unsigned int,_ResourceTrackerBinding>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,_ResourceTrackerBinding>,ResourceTrackerBindingsHash,ResourceTrackerBindingsEqual,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,_ResourceTrackerBinding>,ResourceTrackerBindingsEqual,ResourceTrackerBindingsHash,true>,std::allocator<std::__hash_value_type<unsigned int,_ResourceTrackerBinding>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(v1 + 12, v4, &v17);
    *((_DWORD *)result + 5) = v6;
    uint64_t v2 = (void *)*v2;
    if (v2) {
      continue;
    }
    break;
  }
LABEL_26:
  if (*((void *)v1 + 4))
  {
    uint64_t result = (void *)*((void *)v1 + 3);
    if (result)
    {
      do
      {
        float v14 = (void *)*result;
        operator delete(result);
        uint64_t result = v14;
      }
      while (v14);
    }
    *((void *)v1 + 3) = 0;
    uint64_t v15 = *((void *)v1 + 2);
    if (v15)
    {
      for (uint64_t i = 0; i != v15; ++i)
        *(void *)(*((void *)v1 + 1) + 8 * i) = 0;
    }
    *((void *)v1 + 4) = 0;
  }
  return result;
}

unint64_t *AGX::ComputeControlFlowEmitterGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::emitLink(void *a1, unint64_t a2)
{
  int v2 = a2;
  unint64_t v4 = HIDWORD(a2);
  if (HIDWORD(a2))
  {
    int v11 = 0;
    agxaReserveCDMTokenSpace<AGX::HAL200::Encoders,AGX::HAL200::DataBufferAllocator>(22, (uint64_t)a1, 4, 0, a2 != 0, SHIDWORD(a2), &v11);
    unint64_t v5 = (_DWORD *)a1[94];
    *unint64_t v5 = -1610612736;
    unint64_t v6 = (unint64_t *)(v5 + 1);
    a1[94] = v6;
  }
  else
  {
    unint64_t v6 = (unint64_t *)a1[94];
  }
  if ((unint64_t)(v6 + 1) > a1[93])
  {
    int v10 = AGX::DataBufferAllocator<34ul>::growNoInline(a1, 22, 0);
    uint8x8_t v7 = (unint64_t *)a1[94];
    if (v10)
    {
      if ((unint64_t)(v7 + 1) > a1[93]) {
        abort();
      }
      a1[95] = v7 + 1;
      *unint64_t v6 = __ROR8__((char *)v7 + a1[96], 32) & 0xFFFFFFFF0000FFFFLL | 0x20000000;
      uint8x8_t v7 = (unint64_t *)a1[94];
    }
  }
  else
  {
    a1[95] = v6 + 1;
    uint8x8_t v7 = v6;
  }
  unint64_t *v7 = 0xADE17D00200000DELL;
  a1[94] = v7 + 1;
  if (v4)
  {
    int v12 = 0;
    agxaReserveCDMTokenSpace<AGX::HAL200::Encoders,AGX::HAL200::DataBufferAllocator>(22, (uint64_t)a1, 4, 0, v2 != 0, 0, &v12);
    unint64_t v8 = (unsigned int *)a1[94];
    unsigned int *v8 = ((_BYTE)v4 + 1) & 7 | 0xA0000000;
    a1[94] = v8 + 1;
  }
  return v6;
}

void AGX::ComputeControlFlowEmitterGen2<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::emitPredicate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10, __int16 a11)
{
  uint64_t v11 = MEMORY[0x270FA5388](a1);
  unint64_t v17 = v15;
  uint64_t v158 = v18;
  int8x16_t v19 = v14;
  int8x16_t v20 = v13;
  unsigned int v21 = v12;
  uint64_t v22 = (_OWORD *)v11;
  uint64_t v202 = *MEMORY[0x263EF8340];
  int v23 = *((_DWORD *)v13 + 4);
  if (v23 == 2)
  {
    int v24 = v14[4];
    if (v24 == 1)
    {
      if (v12 - 1 >= 6) {
        char v25 = v12;
      }
      else {
        char v25 = 7 - v12;
      }
      size_t v26 = (unint64_t *)v15[94];
      uint64_t v27 = v15[96];
      if ((unint64_t)v26 + 4 > v15[93])
      {
        if (AGX::DataBufferAllocator<34ul>::growNoInline(v15, 22, 0))
        {
          uint64_t v141 = v17[94];
          if ((unint64_t)(v141 + 4) > v17[93]) {
            goto LABEL_156;
          }
          v17[95] = v141 + 4;
          unint64_t *v26 = __ROR8__(v17[96] + v141, 32) & 0xFFFFFFFF0000FFFFLL | 0x20000000;
        }
      }
      else
      {
        v15[95] = (char *)v26 + 4;
      }
      size_t v28 = (_DWORD *)v17[94];
      uint64_t v29 = (unint64_t *)(v28 + 1);
      _DWORD *v28 = 1610613088;
      unint64_t v30 = v28 + 6;
      v17[94] = v29;
      uint64_t v31 = v20[1];
      uint64_t v32 = *(void *)(*v20 + (int)*MEMORY[0x263F4B188] + 8);
      __int32 v33 = *v19;
      if ((unint64_t)v30 <= v17[93])
      {
        v17[95] = v30;
        uint64_t v34 = (int8x8_t *)v29;
LABEL_10:
        char v35 = 0;
        size_t v36 = (char *)v34 + v17[96];
        v34->i32[0] = ((v25 & 7) << 24) | 0x280000DE;
        v34->i32[1] = -1377731328;
        v34[1] = vand_s8((int8x8_t)(v32 + v31), (int8x8_t)0xFFFFFFFFFFFCLL);
        v34[2].i32[0] = v33;
        v17[94] = (char *)v34 + 20;
        uint64_t v37 = (uint64_t)&v34[2] + v17[96] + 4;
        *(void *)uint64_t v22 = v26;
        *((void *)v22 + 1) = (char *)v26 + v27;
        *((void *)v22 + 2) = (char *)v34 + 20;
        *((void *)v22 + 3) = v37;
        *((void *)v22 + 4) = v34;
        *((void *)v22 + 5) = v36;
        goto LABEL_103;
      }
      int v142 = AGX::DataBufferAllocator<34ul>::growNoInline(v17, 22, 0);
      uint64_t v34 = (int8x8_t *)v17[94];
      if (!v142) {
        goto LABEL_10;
      }
      if ((unint64_t)&v34[2] + 4 <= v17[93])
      {
        v17[95] = (char *)v34 + 20;
        *uint64_t v29 = __ROR8__(&v34->i8[v17[96]], 32) & 0xFFFFFFFF0000FFFFLL | 0x20000000;
        uint64_t v34 = (int8x8_t *)v17[94];
        goto LABEL_10;
      }
LABEL_156:
      abort();
    }
  }
  else
  {
    int v24 = v14[4];
  }
  uint64_t v155 = v16;
  uint64_t v156 = (_OWORD *)v11;
  uint64_t v38 = *v13;
  uint64_t v39 = v13[1];
  uint64_t v40 = *(void *)v14;
  uint64_t v41 = *((void *)v14 + 1);
  if (a10)
  {
    uint64_t v42 = *(void *)v14;
    LODWORD(v182[0]) = 0;
    agxaReserveCDMTokenSpace<AGX::HAL200::Encoders,AGX::HAL200::DataBufferAllocator>(22, (uint64_t)v15, 4, 0, a9 != 0, a10, v182);
    float v43 = (_DWORD *)v17[94];
    *float v43 = -1610612736;
    v17[94] = v43 + 1;
    uint64_t v40 = v42;
  }
  uint64_t v44 = v17[46];
  if (!v44)
  {
    uint64_t v128 = v40;
    if (!AGX::DataBufferAllocator<34ul>::growNoInline(v17, 10, 0)) {
      goto LABEL_156;
    }
    uint64_t v44 = v17[46];
    uint64_t v40 = v128;
  }
  uint64_t v45 = v44 + 11;
  if ((unint64_t)(v44 + 11) <= v17[45]) {
    goto LABEL_16;
  }
  uint64_t v129 = v40;
  int v130 = AGX::DataBufferAllocator<34ul>::growNoInline(v17, 10, 0);
  uint64_t v44 = v17[46];
  if (v130)
  {
    uint64_t v45 = v44 + 11;
    uint64_t v40 = v129;
    if ((unint64_t)(v44 + 11) > v17[45]) {
      goto LABEL_156;
    }
LABEL_16:
    v17[47] = v45;
    goto LABEL_17;
  }
  uint64_t v40 = v129;
LABEL_17:
  uint64_t v46 = (void *)((v44 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  uint64_t v47 = v17[48];
  v17[46] = v46 + 1;
  *uint64_t v46 = 0xADE17D00200000DELL;
  uint64_t v48 = v17[96];
  uint64_t v159 = (unint64_t *)v17[94];
  if ((unint64_t)v159 + 4 > v17[93])
  {
    uint64_t v153 = v47;
    uint64_t v163 = v40;
    int v131 = AGX::DataBufferAllocator<34ul>::growNoInline(v17, 22, 0);
    uint64_t v40 = v163;
    uint64_t v47 = v153;
    if (v131)
    {
      uint64_t v132 = v17[94];
      if ((unint64_t)(v132 + 4) > v17[93]) {
        goto LABEL_156;
      }
      v17[95] = v132 + 4;
      *uint64_t v159 = __ROR8__(v17[96] + v132, 32) & 0xFFFFFFFF0000FFFFLL | 0x20000000;
    }
  }
  else
  {
    v17[95] = (char *)v159 + 4;
  }
  uint64_t v157 = v48;
  float v49 = (_DWORD *)v17[94];
  *float v49 = 1610613088;
  v17[94] = v49 + 1;
  uint64_t v50 = (int *)MEMORY[0x263F4B188];
  if (v23 == 2)
  {
    uint64_t v55 = v38 + (int)*MEMORY[0x263F4B188];
    float64x2_t v53 = (_DWORD *)(v39 + *(void *)(v55 + 24));
    float64x2_t v54 = (char *)(*(void *)(v55 + 8) + v39);
    if (v24 != 2) {
      goto LABEL_26;
    }
    goto LABEL_31;
  }
  if (v23 != 1)
  {
    float64x2_t v54 = 0;
    float64x2_t v53 = 0;
    if (v24 != 2) {
      goto LABEL_26;
    }
LABEL_31:
    uint64_t v60 = v40 + *v50;
    int8x16_t v58 = (_DWORD *)(v41 + *(void *)(v60 + 24));
    int8x16_t v59 = (char *)(*(void *)(v60 + 8) + v41);
    goto LABEL_33;
  }
  uint64_t v51 = v17[18];
  uint64_t v52 = v51 + 7;
  if ((unint64_t)(v51 + 7) <= v17[17])
  {
LABEL_22:
    v17[19] = v52;
    goto LABEL_23;
  }
  uint64_t v143 = v40;
  uint64_t v144 = v47;
  int v145 = AGX::DataBufferAllocator<34ul>::growNoInline(v17, 3, 0);
  uint64_t v51 = v17[18];
  if (v145)
  {
    uint64_t v52 = v51 + 7;
    uint64_t v47 = v144;
    uint64_t v40 = v143;
    if ((unint64_t)(v51 + 7) > v17[17]) {
      goto LABEL_156;
    }
    goto LABEL_22;
  }
  uint64_t v47 = v144;
  uint64_t v40 = v143;
LABEL_23:
  float64x2_t v53 = (_DWORD *)((v51 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  float64x2_t v54 = (char *)v53 + v17[20];
  v17[18] = v53 + 1;
  *float64x2_t v53 = v38;
  if (v24 == 2) {
    goto LABEL_31;
  }
LABEL_26:
  if (v24 == 1)
  {
    uint64_t v56 = v17[18];
    uint64_t v57 = v56 + 7;
    if ((unint64_t)(v56 + 7) > v17[17])
    {
      int v146 = v40;
      uint64_t v147 = v47;
      int v148 = AGX::DataBufferAllocator<34ul>::growNoInline(v17, 3, 0);
      uint64_t v56 = v17[18];
      if (!v148)
      {
        uint64_t v47 = v147;
        LODWORD(v40) = v146;
        goto LABEL_29;
      }
      uint64_t v57 = v56 + 7;
      uint64_t v47 = v147;
      LODWORD(v40) = v146;
      if ((unint64_t)(v56 + 7) > v17[17]) {
        goto LABEL_156;
      }
    }
    v17[19] = v57;
LABEL_29:
    int8x16_t v58 = (_DWORD *)((v56 + 3) & 0xFFFFFFFFFFFFFFFCLL);
    int8x16_t v59 = (char *)v58 + v17[20];
    v17[18] = v58 + 1;
    *int8x16_t v58 = v40;
    goto LABEL_33;
  }
  int8x16_t v59 = 0;
  int8x16_t v58 = 0;
LABEL_33:
  uint64_t v61 = v17[18];
  uint64_t v62 = v61 + 15;
  if ((unint64_t)(v61 + 15) <= v17[17])
  {
LABEL_34:
    v17[19] = v62;
    goto LABEL_35;
  }
  uint64_t v133 = v47;
  int v134 = AGX::DataBufferAllocator<34ul>::growNoInline(v17, 3, 0);
  uint64_t v61 = v17[18];
  if (v134)
  {
    uint64_t v62 = v61 + 15;
    uint64_t v47 = v133;
    if ((unint64_t)(v61 + 15) > v17[17]) {
      goto LABEL_156;
    }
    goto LABEL_34;
  }
  uint64_t v47 = v133;
LABEL_35:
  uint64_t v63 = (void *)((v61 + 7) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v64 = v17[20];
  v17[18] = v63 + 1;
  uint64_t v161 = v63;
  *uint64_t v63 = 0;
  uint64_t v65 = v17[18];
  uint64_t v66 = v65 + 15;
  if ((unint64_t)(v65 + 15) <= v17[17])
  {
LABEL_36:
    v17[19] = v66;
    goto LABEL_37;
  }
  uint64_t v154 = v47;
  int v135 = AGX::DataBufferAllocator<34ul>::growNoInline(v17, 3, 0);
  uint64_t v65 = v17[18];
  if (v135)
  {
    uint64_t v66 = v65 + 15;
    uint64_t v47 = v154;
    if ((unint64_t)(v65 + 15) > v17[17]) {
      goto LABEL_156;
    }
    goto LABEL_36;
  }
  uint64_t v47 = v154;
LABEL_37:
  uint64_t v67 = v17[20];
  uint64_t v68 = (void *)((v65 + 7) & 0xFFFFFFFFFFFFFFF8);
  v17[18] = v68 + 1;
  *uint64_t v68 = 0;
  v182[167] = 4;
  v182[103] = v59;
  v182[35] = v53;
  v182[36] = v58;
  long long v183 = xmmword_242EA7E70;
  v182[104] = (char *)v161 + v64;
  int v150 = (char *)v68 + v67;
  unsigned int v151 = (char *)v46 + v47;
  v182[105] = (char *)v68 + v67;
  v182[37] = v161;
  int v152 = v68;
  v182[38] = v68;
  int64x2_t v184 = vdupq_n_s64(8uLL);
  v182[106] = (char *)v46 + v47;
  v182[102] = v54;
  v182[39] = v46;
  uint64_t v171 = 0;
  int v172 = -1;
  char v173 = 0;
  bzero(v180, 0x20F0uLL);
  v180[2109] = 1;
  bzero(&v181, 0x424uLL);
  uint64_t v175 = 0x100000001;
  int v176 = 65537;
  uint64_t v178 = 0x100000001;
  int v179 = 1;
  uint64_t v177 = 0;
  *(void *)&long long v69 = 0x100000001;
  *((void *)&v69 + 1) = 0x100000001;
  long long v174 = v69;
  int v166 = 42;
  long long v168 = 0;
  uint64_t v169 = 0;
  long long __p = 0;
  uint64_t v165 = (unsigned int (**)(void **))&unk_26F852328;
  int v170 = 0;
  unint64_t v70 = 0x3010205000400uLL >> (8 * v21);
  if (v21 >= 7) {
    LOBYTE(v70) = 0;
  }
  LOBYTE(v170) = v70;
  uint64_t v186 = 0;
  uint64_t v187 = &v186;
  uint64_t v188 = 0x2020000000;
  uint64_t v189 = 0;
  os_unfair_lock_lock((os_unfair_lock_t)(v158 + 7744));
  uint64_t v71 = *(void *)(v158 + 5072);
  BOOL v72 = (os_unfair_lock_s *)(v71 + 728);
  os_unfair_lock_lock((os_unfair_lock_t)(v71 + 728));
  uint64_t v73 = *(unsigned int *)(v71 + 400);
  uint64_t v74 = *(void *)(v71 + 392);
  if (v73)
  {
    uint64_t v75 = 0;
    int32x4_t v76 = (unsigned __int8 *)(v74 + 40);
    while (1)
    {
      unsigned __int8 v77 = *v76;
      v76 += 48;
      if (((v77 ^ v170) & 0x1F) == 0) {
        break;
      }
      if (v73 == ++v75) {
        goto LABEL_43;
      }
    }
    uint64_t v83 = v74 + 48 * v75;
  }
  else
  {
LABEL_43:
    uint64_t v78 = *(void *)(v74 + 384);
    if (v78)
    {
      unsigned int v79 = 1;
      while (1)
      {
        if (((*(unsigned char *)(v78 + 40) ^ v170) & 0x1F) == 0)
        {
          unsigned int v79 = 0;
          goto LABEL_59;
        }
        if (((*(unsigned char *)(v78 + 88) ^ v170) & 0x1F) == 0) {
          goto LABEL_59;
        }
        if (((*(unsigned char *)(v78 + 136) ^ v170) & 0x1F) == 0)
        {
          unsigned int v79 = 2;
          goto LABEL_59;
        }
        if (((*(unsigned char *)(v78 + 184) ^ v170) & 0x1F) == 0) {
          break;
        }
        uint64_t v78 = *(void *)(v78 + 384);
        if (!v78) {
          goto LABEL_50;
        }
      }
      unsigned int v79 = 3;
LABEL_59:
      uint64_t v83 = v78 + 48 * v79;
    }
    else
    {
LABEL_50:
      if (v73 == 4) {
        operator new();
      }
      uint64_t v80 = v74 + 48 * v73;
      *(_DWORD *)(v80 + 8) = v166;
      if ((unsigned int (***)(void **))v80 != &v165) {
        std::vector<unsigned int>::__assign_with_size[abi:nn180100]<unsigned int *,unsigned int *>((void *)(v80 + 16), (char *)__p, v168, (v168 - (unsigned char *)__p) >> 2);
      }
      *(_DWORD *)(v74 + 48 * v73 + 40) = v170;
      uint64_t v81 = *(void *)(v71 + 392);
      unsigned int v82 = *(_DWORD *)(v71 + 400);
      *(_DWORD *)(v71 + 400) = v82 + 1;
      uint64_t v83 = v81 + 48 * v82;
    }
  }
  uint64_t v84 = v83 + 192;
  if (*(void *)(v83 + 192))
  {
    if (!*(unsigned char *)(v83 + 232))
    {
      os_unfair_lock_unlock(v72);
      v187[3] = *(void *)(v84 + 8);
      goto LABEL_81;
    }
    uint64_t v85 = *(void *)(v83 + 200);
    if (v85) {
      (*(void (**)(uint64_t))(*(void *)v85 + 8))(v85);
    }
    *(void *)(v84 + 8) = 0;
    *(void *)(v84 + 16) = 0;

    *(void *)(v84 + 24) = 0;
    *(void *)(v84 + 32) = 0;
    *(unsigned char *)(v84 + 40) = 0;
    int v86 = *(NSObject **)v84;
  }
  else
  {
    int v86 = dispatch_group_create();
    *(void *)uint64_t v84 = v86;
  }
  dispatch_group_enter(v86);
  os_unfair_lock_unlock(v72);
  uint64_t v87 = *(void *)(v158 + 6008);
  v185[0] = MEMORY[0x263EF8330];
  v185[1] = 3221225472;
  v185[2] = ___ZN3AGX6DeviceINS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE46findOrCreateComputeControlFlowPredicateProgramERKNS_37ComputeControlFlowPredicateProgramKeyE_block_invoke;
  v185[3] = &unk_26516E8E0;
  v185[5] = v158;
  v185[4] = &v186;
  v185[6] = &v165;
  v185[7] = v84;
  uint64_t v88 = *(void *)(v87 + 8);
  if (!v165[3]((void **)&v165)) {
    uint64_t v88 = 0;
  }
  int v89 = objc_opt_new();
  [v89 setSync:1];
  [v89 setPipelineCache:v88];
  [v89 setBinaryArchives:0];
  v190[0] = MEMORY[0x263EF8330];
  v190[1] = 3221225472;
  v190[2] = ___ZN3AGX8Compiler14compileProgramINS_37ComputeControlFlowPredicateProgramKeyEEEvRKT_P7NSArrayIPU27objcproto16MTLBinaryArchive11objc_objectEU13block_pointerFvRK20AGCDeserializedReply16MTLCompilerErrorP8NSStringEb_block_invoke;
  v190[3] = &unk_26516F7C0;
  v190[4] = v185;
  buffer = 0;
  size_t size = 0;
  ((void (*)(unsigned int (***)(void **), void **, size_t *))v165[2])(&v165, &buffer, &size);
  unsigned int v90 = dispatch_data_create(buffer, size, 0, 0);
  [v89 setDriverKeyData:v90];
  if ([v89 airScript])
  {
    uint64_t v91 = [v89 airScript];
    long long v200 = 0uLL;
    *(void *)&long long v201 = 0;
    *(void *)&long long v200 = dispatch_data_create_map(v91, (const void **)&v200 + 1, (size_t *)&v201);
    uint64_t v92 = *((void *)&v200 + 1);
    uint64_t v93 = **((_DWORD **)&v200 + 1);
    CC_SHA256_Init(&v195);
    ((void (*)(unsigned int (***)(void **), CC_SHA256_CTX *))*v165)(&v165, &v195);
    uintptr_t data = 0;
    size_t v193 = 0;
    if (AGX::GetSerializedVertexFormat((AGX *)(v92 + v93), &data, &v193, v94, v95))
    {
      int v96 = data;
      CC_SHA256_Update(&v195, data, v193);
      free(v96);
    }
    CC_SHA256_Final(md, &v195);
    dispatch_release((dispatch_object_t)v200);
    long long v200 = *(_OWORD *)md;
    long long v201 = v197;
    [v89 setVendorPluginFunctionId:&v200];
  }
  *(void *)v195.count = MEMORY[0x263EF8330];
  *(void *)v195.hash = 3221225472;
  *(void *)&v195.hash[2] = ___ZN3AGX8Compiler14compileProgramINS_37ComputeControlFlowPredicateProgramKeyE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke;
  *(void *)&v195.hash[4] = &unk_26516F810;
  *(void *)v195.wbuf = v190;
  *(void *)&v195.hash[6] = v89;
  if ([v89 function])
  {
    uint64_t v97 = mach_absolute_time();
    float v98 = *(void **)v87;
    *(void *)long long md = MEMORY[0x263EF8330];
    *(void *)&md[8] = 3221225472;
    *(void *)&long long v197 = ___ZN3AGX8Compiler14compileProgramINS_37ComputeControlFlowPredicateProgramKeyE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke_4;
    *((void *)&v197 + 1) = &unk_26516F860;
    long long v198 = &v195;
    uint64_t v199 = v97;
    [v98 compileFunctionRequest:v89 completionHandler:md];
  }
  else
  {
    if ([v89 frameworkData] || objc_msgSend(v89, "pipelineOptions")) {
      AGX::Compiler::compileProgram<AGX::UserIntersectionProgramKey,AGCReplyArray>(AGX::UserIntersectionProgramKey const&,MTLCompileFunctionRequestData *,void({block_pointer})(AGCReplyArray const&,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,MTLCompilerError,NSString *,unsigned long long))::{lambda(void)#1}::operator()[abi:[AGX] Failed assertion __requestData.frameworkData && _requestData.pipelineOptions_]();
    }
    *(void *)long long md = MEMORY[0x263EF8330];
    *(void *)&md[8] = 3221225472;
    *(void *)&long long v197 = ___ZN3AGX8Compiler14compileProgramINS_37ComputeControlFlowPredicateProgramKeyE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke_3;
    *((void *)&v197 + 1) = &unk_26516F838;
    long long v198 = &v195;
    uint64_t v99 = objc_msgSend((id)objc_msgSend(v89, "binaryArchives"), "count");
    uint64_t v100 = *(void **)v87;
    uint64_t v101 = [v89 driverKeyData];
    if (v99) {
      objc_msgSend(v100, "compileRequest:binaryArchives:failOnBinaryArchiveMiss:pipelineCache:sync:completionHandler:", v101, objc_msgSend(v89, "binaryArchives"), 0, objc_msgSend(v89, "pipelineCache"), objc_msgSend(v89, "sync"), md);
    }
    else {
      objc_msgSend(v100, "compileRequest:pipelineCache:sync:completionHandler:", v101, objc_msgSend(v89, "pipelineCache"), objc_msgSend(v89, "sync"), md);
    }
  }
  dispatch_release(v90);

LABEL_81:
  os_unfair_lock_unlock((os_unfair_lock_t)(v158 + 7744));
  uint64_t v102 = v187[3];
  _Block_object_dispose(&v186, 8);
  unsigned int v103 = *(_DWORD *)(v102 + 2272);
  do
  {
    IOGPUResourceListAddResource();
    v103 &= ~(1 << __clz(__rbit32(v103)));
  }
  while (v103);
  uint64_t v104 = *(unsigned int *)(v102 + 608);
  uint64_t v105 = v17[46];
  uint64_t v22 = v156;
  if (!v105)
  {
    if (!AGX::DataBufferAllocator<34ul>::growNoInline(v17, 10, 0)) {
      goto LABEL_125;
    }
    uint64_t v105 = v17[46];
  }
  uint64_t v106 = v104 + 31;
  unint64_t v107 = v105 + v106;
  if (v107 <= v17[45])
  {
LABEL_85:
    v17[47] = v107;
    goto LABEL_86;
  }
  if (AGX::DataBufferAllocator<34ul>::growNoInline(v17, 10, 0))
  {
    unint64_t v107 = v17[46] + v106;
    if (v107 > v17[45]) {
      goto LABEL_125;
    }
    goto LABEL_85;
  }
LABEL_86:
  uint64_t v108 = (*(_DWORD *)(*(void *)(v102 + 1936) + 8) - **(_DWORD **)(v102 + 1936)) + 63;
  unint64_t v109 = v17[26] + v108;
  if (v109 <= v17[25])
  {
LABEL_87:
    v17[27] = v109;
    goto LABEL_88;
  }
  if (AGX::DataBufferAllocator<34ul>::growNoInline(v17, 5, 0))
  {
    unint64_t v109 = v17[26] + v108;
    if (v109 <= v17[25]) {
      goto LABEL_87;
    }
LABEL_125:
    abort();
  }
LABEL_88:
  int v110 = (unint64_t *)v17[94];
  if ((unint64_t)(v110 + 5) > v17[93])
  {
    if (AGX::DataBufferAllocator<34ul>::growNoInline(v17, 22, 0))
    {
      uint64_t v136 = v17[94];
      if ((unint64_t)(v136 + 40) > v17[93]) {
        abort();
      }
      v17[95] = v136 + 40;
      *int v110 = __ROR8__(v17[96] + v136, 32) & 0xFFFFFFFF0000FFFFLL | 0x20000000;
    }
  }
  else
  {
    v17[95] = v110 + 5;
  }
  LODWORD(v185[0]) = 0;
  AGX::ComputeUSCStateLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes>::emitComputeProgramVariantAndArguments(v155, 0x16u, v17, v102, v182, (uint64_t)&v171, 4 * *(_DWORD *)(v102 + 3376), 0, 0, v149, a11, v185);
  uint64_t v111 = v17[18];
  uint64_t v112 = v111 + 7;
  if ((unint64_t)(v111 + 7) <= v17[17])
  {
LABEL_91:
    v17[19] = v112;
    goto LABEL_92;
  }
  int v137 = AGX::DataBufferAllocator<34ul>::growNoInline(v17, 3, 0);
  uint64_t v111 = v17[18];
  if (v137)
  {
    uint64_t v112 = v111 + 7;
    if ((unint64_t)(v111 + 7) > v17[17]) {
      goto LABEL_159;
    }
    goto LABEL_91;
  }
LABEL_92:
  int v113 = (_DWORD *)((v111 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  uint64_t v114 = v17[20];
  v17[18] = v113 + 1;
  _DWORD *v113 = 0x80000000;
  int v115 = (unint64_t *)v17[94];
  if ((unint64_t)v115 + 4 > v17[93])
  {
    if (AGX::DataBufferAllocator<34ul>::growNoInline(v17, 22, 0))
    {
      uint64_t v138 = v17[94];
      if ((unint64_t)(v138 + 4) > v17[93]) {
        goto LABEL_159;
      }
      v17[95] = v138 + 4;
      unint64_t *v115 = __ROR8__(v17[96] + v138, 32) & 0xFFFFFFFF0000FFFFLL | 0x20000000;
    }
  }
  else
  {
    v17[95] = (char *)v115 + 4;
  }
  float32x2x2_t v116 = (_DWORD *)v17[94];
  float32x4x2_t v117 = v116 + 1;
  _DWORD *v116 = 1610613088;
  uint64x2_t v118 = (char *)v116 + 15;
  v17[94] = v117;
  if ((unint64_t)v118 <= v17[93])
  {
LABEL_95:
    v17[95] = v118;
    goto LABEL_96;
  }
  int v139 = AGX::DataBufferAllocator<34ul>::growNoInline(v17, 22, 0);
  float32x4x2_t v117 = (_DWORD *)v17[94];
  if (v139)
  {
    uint64x2_t v118 = (char *)v117 + 11;
    if ((unint64_t)v117 + 11 > v17[93]) {
      goto LABEL_159;
    }
    goto LABEL_95;
  }
LABEL_96:
  int v119 = (void *)(((unint64_t)v117 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  v17[94] = v119 + 1;
  *int v119 = __ROR8__((char *)v113 + v114, 32) & 0xFFFFFFFF0000FFFFLL | 0x30000000;
  int v120 = (unint64_t *)v17[94];
  if ((unint64_t)(v120 + 1) > v17[93])
  {
    int v140 = AGX::DataBufferAllocator<34ul>::growNoInline(v17, 22, 0);
    int v121 = (unint64_t *)v17[94];
    if (!v140) {
      goto LABEL_98;
    }
    if ((unint64_t)(v121 + 1) <= v17[93])
    {
      v17[95] = v121 + 1;
      unint64_t *v120 = __ROR8__((char *)v121 + v17[96], 32) & 0xFFFFFFFF0000FFFFLL | 0x20000000;
      int v121 = (unint64_t *)v17[94];
      goto LABEL_98;
    }
LABEL_159:
    abort();
  }
  v17[95] = v120 + 1;
  int v121 = v120;
LABEL_98:
  *int v121 = __ROR8__(v151, 32) & 0xFFFFFFFF0000FFFFLL | 0x20000000;
  uint64_t v122 = v121 + 1;
  v17[94] = v122;
  int v123 = (char *)v122 + v17[96];
  *uint64_t v161 = v123;
  *int v152 = v123;
  if (a10)
  {
    v195.count[0] = 0;
    agxaReserveCDMTokenSpace<AGX::HAL200::Encoders,AGX::HAL200::DataBufferAllocator>(22, (uint64_t)v17, 4, 0, a9 != 0, 0, &v195);
    uint64_t v124 = (unsigned int *)v17[94];
    *uint64_t v124 = ((_BYTE)a10 + 1) & 7 | 0xA0000000;
    v17[94] = v124 + 1;
  }
  *(void *)&long long v125 = v159;
  *((void *)&v125 + 1) = (char *)v159 + v157;
  *(void *)&long long v126 = v122;
  *((void *)&v126 + 1) = v123;
  *(void *)&long long v127 = v152;
  *((void *)&v127 + 1) = v150;
  uint64_t v165 = (unsigned int (**)(void **))&unk_26F852368;
  if (__p)
  {
    long long v168 = (char *)__p;
    long long v162 = v126;
    long long v164 = v125;
    long long v160 = v127;
    operator delete(__p);
    long long v127 = v160;
    long long v126 = v162;
    long long v125 = v164;
  }
  *uint64_t v156 = v125;
  v156[1] = v126;
  char v35 = 1;
  v156[2] = v127;
LABEL_103:
  *((unsigned char *)v22 + 48) = v35;
}

void sub_242A3E410(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31)
{
  if (!__p) {
    _Unwind_Resume(exception_object);
  }
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

void ___ZN3AGX35ComputeIndirectExecutionContextGen4INS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesENS1_28EncoderComputeServiceClassesEE30getComputeRangeExecutionShaderEPNS1_6DeviceE_block_invoke(uint64_t a1)
{
  uint64_t v41 = *MEMORY[0x263EF8340];
  int v24 = (void (**)(void **, CC_SHA256_CTX *))&unk_26F852408;
  int v25 = 22;
  uint64_t v27 = 0;
  uint64_t v28 = 0;
  size_t v26 = 0;
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = *(void *)(v1 + 6008);
  v17[0] = MEMORY[0x263EF8330];
  v17[1] = 3321888768;
  _OWORD v17[2] = ___ZN3AGX35ComputeIndirectExecutionContextGen4INS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesENS1_28EncoderComputeServiceClassesEE30getComputeRangeExecutionShaderEPNS1_6DeviceE_block_invoke_2;
  v17[3] = &__block_descriptor_80_e8_32c77_ZTS10ProgramKeyIL15_AGCStreamToken22ELN3AGX27DriverShaderCompilationModeE1EE_e26_v32__0r_v8Q16__NSString_24l;
  uint64_t v18 = &unk_26F852408;
  int v19 = 22;
  long long __p = 0;
  unsigned int v21 = 0;
  uint64_t v22 = 0;
  uint64_t v23 = v1;
  uint64_t v3 = *(void *)(v2 + 8);
  unint64_t v4 = objc_opt_new();
  [v4 setSync:1];
  [v4 setPipelineCache:v3];
  [v4 setBinaryArchives:0];
  v29[0] = MEMORY[0x263EF8330];
  v29[1] = 3221225472;
  v29[2] = ___ZN3AGX8Compiler14compileProgramI10ProgramKeyIL15_AGCStreamToken22ELNS_27DriverShaderCompilationModeE1EEEEvRKT_P7NSArrayIPU27objcproto16MTLBinaryArchive11objc_objectEU13block_pointerFvRK20AGCDeserializedReply16MTLCompilerErrorP8NSStringEb_block_invoke;
  v29[3] = &unk_26516F7C0;
  v29[4] = v17;
  size_t v30 = 0;
  uint64_t v31 = 0;
  unk_26F852418(&v24, &v31, &v30);
  unint64_t v5 = dispatch_data_create(v31, v30, 0, 0);
  [v4 setDriverKeyData:v5];
  if ([v4 airScript])
  {
    unint64_t v6 = [v4 airScript];
    long long v39 = 0uLL;
    v40[0] = 0;
    *(void *)&long long v39 = dispatch_data_create_map(v6, (const void **)&v39 + 1, v40);
    uint64_t v7 = *((void *)&v39 + 1);
    uint64_t v8 = **((_DWORD **)&v39 + 1);
    CC_SHA256_Init(&c);
    (*v24)((void **)&v24, &c);
    *(void *)leuint64_t n = 0;
    uintptr_t data = 0;
    if (AGX::GetSerializedVertexFormat((AGX *)(v7 + v8), &data, (size_t *)len, v9, v10))
    {
      uint64_t v11 = data;
      CC_SHA256_Update(&c, data, len[0]);
      free(v11);
    }
    CC_SHA256_Final((unsigned __int8 *)&md, &c);
    dispatch_release((dispatch_object_t)v39);
    long long v39 = md;
    *(_OWORD *)uint64_t v40 = v36;
    [v4 setVendorPluginFunctionId:&v39];
  }
  *(void *)c.count = MEMORY[0x263EF8330];
  *(void *)c.hash = 3221225472;
  *(void *)&c.hash[2] = ___ZN3AGX8Compiler14compileProgramI10ProgramKeyIL15_AGCStreamToken22ELNS_27DriverShaderCompilationModeE1EE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSH_SH_SH_SH_16MTLCompilerErrorP8NSStringyE_block_invoke;
  *(void *)&c.hash[4] = &unk_26516F810;
  *(void *)&c.hash[6] = v4;
  *(void *)c.wbuf = v29;
  if ([v4 function])
  {
    uint64_t v12 = mach_absolute_time();
    uint64_t v13 = *(void **)v2;
    *(void *)&long long md = MEMORY[0x263EF8330];
    *((void *)&md + 1) = 3221225472;
    *(void *)&long long v36 = ___ZN3AGX8Compiler14compileProgramI10ProgramKeyIL15_AGCStreamToken22ELNS_27DriverShaderCompilationModeE1EE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSH_SH_SH_SH_16MTLCompilerErrorP8NSStringyE_block_invoke_4;
    *((void *)&v36 + 1) = &unk_26516F860;
    p_CC_SHA256_CTX c = &c;
    uint64_t v38 = v12;
    [v13 compileFunctionRequest:v4 completionHandler:&md];
  }
  else
  {
    if ([v4 frameworkData] || objc_msgSend(v4, "pipelineOptions")) {
      AGX::Compiler::compileProgram<AGX::UserIntersectionProgramKey,AGCReplyArray>(AGX::UserIntersectionProgramKey const&,MTLCompileFunctionRequestData *,void({block_pointer})(AGCReplyArray const&,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,MTLCompilerError,NSString *,unsigned long long))::{lambda(void)#1}::operator()[abi:[AGX] Failed assertion __requestData.frameworkData && _requestData.pipelineOptions_]();
    }
    *(void *)&long long md = MEMORY[0x263EF8330];
    *((void *)&md + 1) = 3221225472;
    *(void *)&long long v36 = ___ZN3AGX8Compiler14compileProgramI10ProgramKeyIL15_AGCStreamToken22ELNS_27DriverShaderCompilationModeE1EE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSH_SH_SH_SH_16MTLCompilerErrorP8NSStringyE_block_invoke_3;
    *((void *)&v36 + 1) = &unk_26516F838;
    p_CC_SHA256_CTX c = &c;
    uint64_t v14 = objc_msgSend((id)objc_msgSend(v4, "binaryArchives"), "count");
    uint64_t v15 = *(void **)v2;
    uint64_t v16 = [v4 driverKeyData];
    if (v14) {
      objc_msgSend(v15, "compileRequest:binaryArchives:failOnBinaryArchiveMiss:pipelineCache:sync:completionHandler:", v16, objc_msgSend(v4, "binaryArchives"), 0, objc_msgSend(v4, "pipelineCache"), objc_msgSend(v4, "sync"), &md);
    }
    else {
      objc_msgSend(v15, "compileRequest:pipelineCache:sync:completionHandler:", v16, objc_msgSend(v4, "pipelineCache"), objc_msgSend(v4, "sync"), &md);
    }
  }
  dispatch_release(v5);

  uint64_t v18 = &unk_26F852408;
  if (__p)
  {
    unsigned int v21 = __p;
    operator delete(__p);
  }
  int v24 = (void (**)(void **, CC_SHA256_CTX *))&unk_26F852408;
  if (v26)
  {
    uint64_t v27 = v26;
    operator delete(v26);
  }
}

void sub_242A3E95C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23)
{
  dispatch_release(*(dispatch_object_t *)(v23 - 144));
  if (__p) {
    operator delete(__p);
  }
  if (a22) {
    operator delete(a22);
  }
  _Unwind_Resume(a1);
}

void ___ZN3AGX35ComputeIndirectExecutionContextGen4INS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesENS1_28EncoderComputeServiceClassesEE30getComputePatchExecutionShaderEPNS1_6DeviceE_block_invoke(uint64_t a1)
{
  uint64_t v41 = *MEMORY[0x263EF8340];
  int v24 = (void (**)(void **, CC_SHA256_CTX *))&unk_26F852448;
  int v25 = 23;
  uint64_t v27 = 0;
  uint64_t v28 = 0;
  size_t v26 = 0;
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = *(void *)(v1 + 6008);
  v17[0] = MEMORY[0x263EF8330];
  v17[1] = 3321888768;
  _OWORD v17[2] = ___ZN3AGX35ComputeIndirectExecutionContextGen4INS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesENS1_28EncoderComputeServiceClassesEE30getComputePatchExecutionShaderEPNS1_6DeviceE_block_invoke_2;
  v17[3] = &__block_descriptor_80_e8_32c77_ZTS10ProgramKeyIL15_AGCStreamToken23ELN3AGX27DriverShaderCompilationModeE1EE_e26_v32__0r_v8Q16__NSString_24l;
  uint64_t v18 = &unk_26F852448;
  int v19 = 23;
  long long __p = 0;
  unsigned int v21 = 0;
  uint64_t v22 = 0;
  uint64_t v23 = v1;
  uint64_t v3 = *(void *)(v2 + 8);
  unint64_t v4 = objc_opt_new();
  [v4 setSync:1];
  [v4 setPipelineCache:v3];
  [v4 setBinaryArchives:0];
  v29[0] = MEMORY[0x263EF8330];
  v29[1] = 3221225472;
  v29[2] = ___ZN3AGX8Compiler14compileProgramI10ProgramKeyIL15_AGCStreamToken23ELNS_27DriverShaderCompilationModeE1EEEEvRKT_P7NSArrayIPU27objcproto16MTLBinaryArchive11objc_objectEU13block_pointerFvRK20AGCDeserializedReply16MTLCompilerErrorP8NSStringEb_block_invoke;
  v29[3] = &unk_26516F7C0;
  v29[4] = v17;
  size_t v30 = 0;
  uint64_t v31 = 0;
  unk_26F852458(&v24, &v31, &v30);
  unint64_t v5 = dispatch_data_create(v31, v30, 0, 0);
  [v4 setDriverKeyData:v5];
  if ([v4 airScript])
  {
    unint64_t v6 = [v4 airScript];
    long long v39 = 0uLL;
    v40[0] = 0;
    *(void *)&long long v39 = dispatch_data_create_map(v6, (const void **)&v39 + 1, v40);
    uint64_t v7 = *((void *)&v39 + 1);
    uint64_t v8 = **((_DWORD **)&v39 + 1);
    CC_SHA256_Init(&c);
    (*v24)((void **)&v24, &c);
    *(void *)leuint64_t n = 0;
    uintptr_t data = 0;
    if (AGX::GetSerializedVertexFormat((AGX *)(v7 + v8), &data, (size_t *)len, v9, v10))
    {
      uint64_t v11 = data;
      CC_SHA256_Update(&c, data, len[0]);
      free(v11);
    }
    CC_SHA256_Final((unsigned __int8 *)&md, &c);
    dispatch_release((dispatch_object_t)v39);
    long long v39 = md;
    *(_OWORD *)uint64_t v40 = v36;
    [v4 setVendorPluginFunctionId:&v39];
  }
  *(void *)c.count = MEMORY[0x263EF8330];
  *(void *)c.hash = 3221225472;
  *(void *)&c.hash[2] = ___ZN3AGX8Compiler14compileProgramI10ProgramKeyIL15_AGCStreamToken23ELNS_27DriverShaderCompilationModeE1EE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSH_SH_SH_SH_16MTLCompilerErrorP8NSStringyE_block_invoke;
  *(void *)&c.hash[4] = &unk_26516F810;
  *(void *)&c.hash[6] = v4;
  *(void *)c.wbuf = v29;
  if ([v4 function])
  {
    uint64_t v12 = mach_absolute_time();
    uint64_t v13 = *(void **)v2;
    *(void *)&long long md = MEMORY[0x263EF8330];
    *((void *)&md + 1) = 3221225472;
    *(void *)&long long v36 = ___ZN3AGX8Compiler14compileProgramI10ProgramKeyIL15_AGCStreamToken23ELNS_27DriverShaderCompilationModeE1EE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSH_SH_SH_SH_16MTLCompilerErrorP8NSStringyE_block_invoke_4;
    *((void *)&v36 + 1) = &unk_26516F860;
    p_CC_SHA256_CTX c = &c;
    uint64_t v38 = v12;
    [v13 compileFunctionRequest:v4 completionHandler:&md];
  }
  else
  {
    if ([v4 frameworkData] || objc_msgSend(v4, "pipelineOptions")) {
      AGX::Compiler::compileProgram<AGX::UserIntersectionProgramKey,AGCReplyArray>(AGX::UserIntersectionProgramKey const&,MTLCompileFunctionRequestData *,void({block_pointer})(AGCReplyArray const&,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,MTLCompilerError,NSString *,unsigned long long))::{lambda(void)#1}::operator()[abi:[AGX] Failed assertion __requestData.frameworkData && _requestData.pipelineOptions_]();
    }
    *(void *)&long long md = MEMORY[0x263EF8330];
    *((void *)&md + 1) = 3221225472;
    *(void *)&long long v36 = ___ZN3AGX8Compiler14compileProgramI10ProgramKeyIL15_AGCStreamToken23ELNS_27DriverShaderCompilationModeE1EE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSH_SH_SH_SH_16MTLCompilerErrorP8NSStringyE_block_invoke_3;
    *((void *)&v36 + 1) = &unk_26516F838;
    p_CC_SHA256_CTX c = &c;
    uint64_t v14 = objc_msgSend((id)objc_msgSend(v4, "binaryArchives"), "count");
    uint64_t v15 = *(void **)v2;
    uint64_t v16 = [v4 driverKeyData];
    if (v14) {
      objc_msgSend(v15, "compileRequest:binaryArchives:failOnBinaryArchiveMiss:pipelineCache:sync:completionHandler:", v16, objc_msgSend(v4, "binaryArchives"), 0, objc_msgSend(v4, "pipelineCache"), objc_msgSend(v4, "sync"), &md);
    }
    else {
      objc_msgSend(v15, "compileRequest:pipelineCache:sync:completionHandler:", v16, objc_msgSend(v4, "pipelineCache"), objc_msgSend(v4, "sync"), &md);
    }
  }
  dispatch_release(v5);

  uint64_t v18 = &unk_26F852448;
  if (__p)
  {
    unsigned int v21 = __p;
    operator delete(__p);
  }
  int v24 = (void (**)(void **, CC_SHA256_CTX *))&unk_26F852448;
  if (v26)
  {
    uint64_t v27 = v26;
    operator delete(v26);
  }
}

void sub_242A3EE4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23)
{
  dispatch_release(*(dispatch_object_t *)(v23 - 144));
  if (__p) {
    operator delete(__p);
  }
  if (a22) {
    operator delete(a22);
  }
  _Unwind_Resume(a1);
}

void ___ZN3AGX35ComputeIndirectExecutionContextGen4INS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesENS1_28EncoderComputeServiceClassesEE30getComputePatchExecutionShaderEPNS1_6DeviceE_block_invoke_2(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a3) {
    operator new();
  }
  unint64_t v5 = "MTLCompilerErrorTimeout";
  unint64_t v6 = "UnknownErrorCode";
  if (a3 == 2) {
    unint64_t v6 = "MTLCompilerErrorCompilationError";
  }
  if (a3 != 3) {
    unint64_t v5 = v6;
  }
  if (a3 == 1) {
    uint64_t v7 = "MTLCompilerErrorFatalError";
  }
  else {
    uint64_t v7 = v5;
  }
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  ProgramKey<(_AGCStreamToken)23,(AGX::DriverShaderCompilationMode)1>::serialize(a1 + 32, &v13, &v12);
  uint64_t v8 = a4;
  uint64_t v9 = v7;
  uint64_t v10 = v12;
  uint64_t v11 = v13;
  _ZZZZN3AGX6DeviceINS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE49createTGOptimizationDriverShaderAndBufferIfNeededEP18AGXG17FamilyDeviceEUb_EUb_ENKUlvE_clB14_AGX__Crashed_Ev();
}

void sub_242A3F110(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  if (*(char *)(v5 - 33) < 0) {
    operator delete(*(void **)(v5 - 56));
  }
  AGX::ProgramBindingRemap<AGX::HAL200::Encoders,AGX::HAL200::Classes>::~ProgramBindingRemap((uint64_t)va);
  MEMORY[0x24566ED90](v4, 0x10F3C407204815DLL);
  _Unwind_Resume(a1);
}

uint64_t ___ZN3AGX8Compiler14compileProgramI10ProgramKeyIL15_AGCStreamToken23ELNS_27DriverShaderCompilationModeE1EEEEvRKT_P7NSArrayIPU27objcproto16MTLBinaryArchive11objc_objectEU13block_pointerFvRK20AGCDeserializedReply16MTLCompilerErrorP8NSStringEb_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a5) {
    AGX::Compiler::compileProgram<AGX::UserIntersectionProgramKey,AGCReplyArray>(AGX::UserIntersectionProgramKey const&,MTLCompileFunctionRequestData *,void({block_pointer})(AGCReplyArray const&,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,MTLCompilerError,NSString *,unsigned long long))::{lambda(void)#1}::operator()[abi:[AGX] Failed assertion __requestData.frameworkData && _requestData.pipelineOptions_]();
  }
  uint64_t v5 = *(uint64_t (**)(void))(*(void *)(a1 + 32) + 16);

  return v5();
}

void ___ZN3AGX8Compiler14compileProgramI10ProgramKeyIL15_AGCStreamToken23ELNS_27DriverShaderCompilationModeE1EE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSH_SH_SH_SH_16MTLCompilerErrorP8NSStringyE_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  v14[0] = MEMORY[0x263EF8330];
  v14[1] = 3221225472;
  uint64_t v15 = ___ZN3AGX8Compiler14compileProgramI10ProgramKeyIL15_AGCStreamToken23ELNS_27DriverShaderCompilationModeE1EE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSH_SH_SH_SH_16MTLCompilerErrorP8NSStringyE_block_invoke_2;
  uint64_t v16 = &unk_26516F7E8;
  uint64_t v17 = a9;
  uint64_t v18 = a3;
  uint64_t v19 = a4;
  uint64_t v20 = a5;
  uint64_t v21 = a6;
  uint64_t v22 = a7;
  uint64_t v12 = a1 + 32;
  uint64_t v10 = *(void **)(a1 + 32);
  uint64_t v11 = *(void *)(v12 + 8);
  uint64_t v23 = a8;
  uint64_t v24 = v11;
  uint64_t v25 = a2;
  uint64_t v26 = a10;
  if (objc_msgSend(v10, "sync", MEMORY[0x263EF8330], 3221225472))
  {
    v15(v14);
  }
  else
  {
    global_queue = dispatch_get_global_queue(0, 0);
    dispatch_async(global_queue, v14);
  }
}

uint64_t ___ZN3AGX8Compiler14compileProgramI10ProgramKeyIL15_AGCStreamToken23ELNS_27DriverShaderCompilationModeE1EE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSH_SH_SH_SH_16MTLCompilerErrorP8NSStringyE_block_invoke_3(uint64_t a1, void *a2)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), *a2);
}

uint64_t ___ZN3AGX8Compiler14compileProgramI10ProgramKeyIL15_AGCStreamToken23ELNS_27DriverShaderCompilationModeE1EE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSH_SH_SH_SH_16MTLCompilerErrorP8NSStringyE_block_invoke_4(uint64_t a1, void *a2)
{
  if (getTimebaseInfo(void)::once != -1) {
    dispatch_once(&getTimebaseInfo(void)::once, &__block_literal_global_7474);
  }
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), *a2);
}

void ___ZN3AGX8Compiler14compileProgramI10ProgramKeyIL15_AGCStreamToken23ELNS_27DriverShaderCompilationModeE1EE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSH_SH_SH_SH_16MTLCompilerErrorP8NSStringyE_block_invoke_2(void *a1)
{
  size_t size_ptr = 0;
  buffer_ptr = 0;
  uint64_t v2 = a1[12];
  AGCDeserializedReply::AGCDeserializedReply((AGCDeserializedReply *)v5);
  if (v2 || (uint64_t v4 = a1[5]) == 0)
  {
    uint64_t v3 = 0;
  }
  else
  {
    uint64_t v3 = dispatch_data_create_map(v4, (const void **)&buffer_ptr, &size_ptr);
    AGCDeserializedReply::deserialize((AGCDeserializedReply *)v5, buffer_ptr, size_ptr);
  }
  (*(void (**)(void, unsigned char *))(a1[11] + 16))(a1[11], v5);
  if (v3) {
    dispatch_release(v3);
  }
  AGCDeserializedReply::~AGCDeserializedReply((AGCDeserializedReply *)v5);
}

void sub_242A3F424(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  AGCDeserializedReply::~AGCDeserializedReply((AGCDeserializedReply *)va);
  _Unwind_Resume(a1);
}

void __destroy_helper_block_e8_32c77_ZTS10ProgramKeyIL15_AGCStreamToken23ELN3AGX27DriverShaderCompilationModeE1EE(void *a1)
{
  a1[4] = &unk_26F852448;
  uint64_t v1 = (void *)a1[6];
  if (v1)
  {
    a1[7] = v1;
    operator delete(v1);
  }
}

void *__copy_helper_block_e8_32c77_ZTS10ProgramKeyIL15_AGCStreamToken23ELN3AGX27DriverShaderCompilationModeE1EE(void *result, uint64_t a2)
{
  result[4] = &unk_26F852448;
  *((_DWORD *)result + 10) = *(_DWORD *)(a2 + 40);
  result[7] = 0;
  result[8] = 0;
  result[6] = 0;
  uint64_t v3 = *(unsigned char **)(a2 + 48);
  uint64_t v2 = *(unsigned char **)(a2 + 56);
  int64_t v4 = v2 - v3;
  if (v2 != v3)
  {
    if (v4 < 0) {
      abort();
    }
    uint64_t v5 = result;
    unint64_t v6 = (char *)operator new(v2 - v3);
    void v5[6] = v6;
    v5[7] = v6;
    uint64_t v7 = &v6[4 * (v4 >> 2)];
    v5[8] = v7;
    uint64_t result = memcpy(v6, v3, v4);
    v5[7] = v7;
  }
  return result;
}

void ProgramKey<(_AGCStreamToken)23,(AGX::DriverShaderCompilationMode)1>::serialize(uint64_t a1, void *a2, void *a3)
{
  unint64_t v6 = *(int **)(a1 + 16);
  *(void *)(a1 + 24) = v6;
  int v7 = *(unsigned __int8 *)(a1 + 8) | 0x100;
  uint64_t v8 = *(int **)(a1 + 32);
  if (v6 >= v8)
  {
    uint64_t v10 = (char *)v8 - (char *)v6;
    uint64_t v11 = v10 >> 1;
    if ((unint64_t)(v10 >> 1) <= 1) {
      uint64_t v11 = 1;
    }
    BOOL v12 = (unint64_t)v10 >= 0x7FFFFFFFFFFFFFFCLL;
    unint64_t v13 = 0x3FFFFFFFFFFFFFFFLL;
    if (!v12) {
      unint64_t v13 = v11;
    }
    if (v13 >> 62) {
      goto LABEL_34;
    }
    uint64_t v14 = v13;
    uint64_t v15 = operator new(4 * v13);
    uint64_t v8 = &v15[v14];
    _DWORD *v15 = v7;
    uint64_t v9 = (char *)(v15 + 1);
    *(void *)(a1 + 16) = v15;
    *(void *)(a1 + 24) = v15 + 1;
    *(void *)(a1 + 32) = &v15[v14];
    if (v6)
    {
      operator delete(v6);
      uint64_t v8 = *(int **)(a1 + 32);
    }
  }
  else
  {
    *unint64_t v6 = v7;
    uint64_t v9 = (char *)(v6 + 1);
  }
  *(void *)(a1 + 24) = v9;
  if (v9 < (char *)v8)
  {
    *(_DWORD *)uint64_t v9 = 96;
    uint64_t v16 = v9 + 4;
    goto LABEL_33;
  }
  uint64_t v17 = *(char **)(a1 + 16);
  uint64_t v18 = (v9 - v17) >> 2;
  unint64_t v19 = v18 + 1;
  if ((unint64_t)(v18 + 1) >> 62) {
    abort();
  }
  uint64_t v20 = (char *)v8 - v17;
  if (v20 >> 1 > v19) {
    unint64_t v19 = v20 >> 1;
  }
  if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFFCLL) {
    unint64_t v21 = 0x3FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v21 = v19;
  }
  if (v21)
  {
    if (!(v21 >> 62))
    {
      uint64_t v22 = operator new(4 * v21);
      goto LABEL_22;
    }
LABEL_34:
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  uint64_t v22 = 0;
LABEL_22:
  uint64_t v23 = &v22[4 * v18];
  uint64_t v24 = &v22[4 * v21];
  _DWORD *v23 = 96;
  uint64_t v16 = v23 + 1;
  if (v9 == v17) {
    goto LABEL_31;
  }
  unint64_t v25 = v9 - v17 - 4;
  if (v25 < 0x2C)
  {
    uint64_t v26 = v9;
    goto LABEL_30;
  }
  if ((unint64_t)(v17 - v22) < 0x20)
  {
    uint64_t v26 = v9;
    do
    {
LABEL_30:
      int v32 = *((_DWORD *)v26 - 1);
      v26 -= 4;
      *--uint64_t v23 = v32;
    }
    while (v26 != v17);
    goto LABEL_31;
  }
  uint64_t v27 = (v25 >> 2) + 1;
  uint64_t v26 = &v9[-4 * (v27 & 0x7FFFFFFFFFFFFFF8)];
  uint64_t v28 = &v22[4 * v18 - 16];
  uint64_t v29 = v9 - 16;
  uint64_t v30 = v27 & 0x7FFFFFFFFFFFFFF8;
  do
  {
    long long v31 = *(_OWORD *)v29;
    *(v28 - 1) = *((_OWORD *)v29 - 1);
    _OWORD *v28 = v31;
    v28 -= 2;
    v29 -= 32;
    v30 -= 8;
  }
  while (v30);
  v23 -= v27 & 0x7FFFFFFFFFFFFFF8;
  if (v27 != (v27 & 0x7FFFFFFFFFFFFFF8)) {
    goto LABEL_30;
  }
LABEL_31:
  *(void *)(a1 + 16) = v23;
  *(void *)(a1 + 24) = v16;
  *(void *)(a1 + 32) = v24;
  if (v17) {
    operator delete(v17);
  }
LABEL_33:
  *(void *)(a1 + 24) = v16;
  *a2 = *(void *)(a1 + 16);
  *a3 = *(void *)(a1 + 24) - *(void *)(a1 + 16);
}

uint64_t ProgramKey<(_AGCStreamToken)23,(AGX::DriverShaderCompilationMode)1>::getSupportIndirectCommandBuffers()
{
  return 0;
}

uint64_t ProgramKey<(_AGCStreamToken)23,(AGX::DriverShaderCompilationMode)1>::isPrecompiledToBinaryArchive()
{
  return 0;
}

uint64_t ProgramKey<(_AGCStreamToken)23,(AGX::DriverShaderCompilationMode)1>::isPrecompiledToPipelineCache()
{
  return 1;
}

uint64_t ProgramKey<(_AGCStreamToken)23,(AGX::DriverShaderCompilationMode)1>::legalizeStateForTargetOS()
{
  return 1;
}

void ___ZN3AGX35ComputeIndirectExecutionContextGen4INS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesENS1_28EncoderComputeServiceClassesEE30getComputeRangeExecutionShaderEPNS1_6DeviceE_block_invoke_2(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a3) {
    operator new();
  }
  uint64_t v5 = "MTLCompilerErrorTimeout";
  unint64_t v6 = "UnknownErrorCode";
  if (a3 == 2) {
    unint64_t v6 = "MTLCompilerErrorCompilationError";
  }
  if (a3 != 3) {
    uint64_t v5 = v6;
  }
  if (a3 == 1) {
    int v7 = "MTLCompilerErrorFatalError";
  }
  else {
    int v7 = v5;
  }
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  ProgramKey<(_AGCStreamToken)22,(AGX::DriverShaderCompilationMode)1>::serialize(a1 + 32, &v13, &v12);
  uint64_t v8 = a4;
  uint64_t v9 = v7;
  uint64_t v10 = v12;
  uint64_t v11 = v13;
  _ZZZZN3AGX6DeviceINS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE49createTGOptimizationDriverShaderAndBufferIfNeededEP18AGXG17FamilyDeviceEUb_EUb_ENKUlvE_clB14_AGX__Crashed_Ev();
}

void sub_242A3F9B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  if (*(char *)(v5 - 33) < 0) {
    operator delete(*(void **)(v5 - 56));
  }
  AGX::ProgramBindingRemap<AGX::HAL200::Encoders,AGX::HAL200::Classes>::~ProgramBindingRemap((uint64_t)va);
  MEMORY[0x24566ED90](v4, 0x10F3C407204815DLL);
  _Unwind_Resume(a1);
}

uint64_t ___ZN3AGX8Compiler14compileProgramI10ProgramKeyIL15_AGCStreamToken22ELNS_27DriverShaderCompilationModeE1EEEEvRKT_P7NSArrayIPU27objcproto16MTLBinaryArchive11objc_objectEU13block_pointerFvRK20AGCDeserializedReply16MTLCompilerErrorP8NSStringEb_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a5) {
    AGX::Compiler::compileProgram<AGX::UserIntersectionProgramKey,AGCReplyArray>(AGX::UserIntersectionProgramKey const&,MTLCompileFunctionRequestData *,void({block_pointer})(AGCReplyArray const&,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,MTLCompilerError,NSString *,unsigned long long))::{lambda(void)#1}::operator()[abi:[AGX] Failed assertion __requestData.frameworkData && _requestData.pipelineOptions_]();
  }
  uint64_t v5 = *(uint64_t (**)(void))(*(void *)(a1 + 32) + 16);

  return v5();
}

void ___ZN3AGX8Compiler14compileProgramI10ProgramKeyIL15_AGCStreamToken22ELNS_27DriverShaderCompilationModeE1EE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSH_SH_SH_SH_16MTLCompilerErrorP8NSStringyE_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  v14[0] = MEMORY[0x263EF8330];
  v14[1] = 3221225472;
  uint64_t v15 = ___ZN3AGX8Compiler14compileProgramI10ProgramKeyIL15_AGCStreamToken22ELNS_27DriverShaderCompilationModeE1EE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSH_SH_SH_SH_16MTLCompilerErrorP8NSStringyE_block_invoke_2;
  uint64_t v16 = &unk_26516F7E8;
  uint64_t v17 = a9;
  uint64_t v18 = a3;
  uint64_t v19 = a4;
  uint64_t v20 = a5;
  uint64_t v21 = a6;
  uint64_t v22 = a7;
  uint64_t v12 = a1 + 32;
  uint64_t v10 = *(void **)(a1 + 32);
  uint64_t v11 = *(void *)(v12 + 8);
  uint64_t v23 = a8;
  uint64_t v24 = v11;
  uint64_t v25 = a2;
  uint64_t v26 = a10;
  if (objc_msgSend(v10, "sync", MEMORY[0x263EF8330], 3221225472))
  {
    v15(v14);
  }
  else
  {
    global_queue = dispatch_get_global_queue(0, 0);
    dispatch_async(global_queue, v14);
  }
}

uint64_t ___ZN3AGX8Compiler14compileProgramI10ProgramKeyIL15_AGCStreamToken22ELNS_27DriverShaderCompilationModeE1EE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSH_SH_SH_SH_16MTLCompilerErrorP8NSStringyE_block_invoke_3(uint64_t a1, void *a2)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), *a2);
}

uint64_t ___ZN3AGX8Compiler14compileProgramI10ProgramKeyIL15_AGCStreamToken22ELNS_27DriverShaderCompilationModeE1EE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSH_SH_SH_SH_16MTLCompilerErrorP8NSStringyE_block_invoke_4(uint64_t a1, void *a2)
{
  if (getTimebaseInfo(void)::once != -1) {
    dispatch_once(&getTimebaseInfo(void)::once, &__block_literal_global_7474);
  }
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), *a2);
}

void ___ZN3AGX8Compiler14compileProgramI10ProgramKeyIL15_AGCStreamToken22ELNS_27DriverShaderCompilationModeE1EE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSH_SH_SH_SH_16MTLCompilerErrorP8NSStringyE_block_invoke_2(void *a1)
{
  size_t size_ptr = 0;
  buffer_ptr = 0;
  uint64_t v2 = a1[12];
  AGCDeserializedReply::AGCDeserializedReply((AGCDeserializedReply *)v5);
  if (v2 || (uint64_t v4 = a1[5]) == 0)
  {
    uint64_t v3 = 0;
  }
  else
  {
    uint64_t v3 = dispatch_data_create_map(v4, (const void **)&buffer_ptr, &size_ptr);
    AGCDeserializedReply::deserialize((AGCDeserializedReply *)v5, buffer_ptr, size_ptr);
  }
  (*(void (**)(void, unsigned char *))(a1[11] + 16))(a1[11], v5);
  if (v3) {
    dispatch_release(v3);
  }
  AGCDeserializedReply::~AGCDeserializedReply((AGCDeserializedReply *)v5);
}

void sub_242A3FCC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  AGCDeserializedReply::~AGCDeserializedReply((AGCDeserializedReply *)va);
  _Unwind_Resume(a1);
}

void __destroy_helper_block_e8_32c77_ZTS10ProgramKeyIL15_AGCStreamToken22ELN3AGX27DriverShaderCompilationModeE1EE(void *a1)
{
  a1[4] = &unk_26F852408;
  uint64_t v1 = (void *)a1[6];
  if (v1)
  {
    a1[7] = v1;
    operator delete(v1);
  }
}

void *__copy_helper_block_e8_32c77_ZTS10ProgramKeyIL15_AGCStreamToken22ELN3AGX27DriverShaderCompilationModeE1EE(void *result, uint64_t a2)
{
  result[4] = &unk_26F852408;
  *((_DWORD *)result + 10) = *(_DWORD *)(a2 + 40);
  result[7] = 0;
  result[8] = 0;
  result[6] = 0;
  uint64_t v3 = *(unsigned char **)(a2 + 48);
  uint64_t v2 = *(unsigned char **)(a2 + 56);
  int64_t v4 = v2 - v3;
  if (v2 != v3)
  {
    if (v4 < 0) {
      abort();
    }
    uint64_t v5 = result;
    unint64_t v6 = (char *)operator new(v2 - v3);
    void v5[6] = v6;
    v5[7] = v6;
    int v7 = &v6[4 * (v4 >> 2)];
    v5[8] = v7;
    uint64_t result = memcpy(v6, v3, v4);
    v5[7] = v7;
  }
  return result;
}

void ProgramKey<(_AGCStreamToken)22,(AGX::DriverShaderCompilationMode)1>::serialize(uint64_t a1, void *a2, void *a3)
{
  unint64_t v6 = *(int **)(a1 + 16);
  *(void *)(a1 + 24) = v6;
  int v7 = *(unsigned __int8 *)(a1 + 8) | 0x100;
  uint64_t v8 = *(int **)(a1 + 32);
  if (v6 >= v8)
  {
    uint64_t v10 = (char *)v8 - (char *)v6;
    uint64_t v11 = v10 >> 1;
    if ((unint64_t)(v10 >> 1) <= 1) {
      uint64_t v11 = 1;
    }
    BOOL v12 = (unint64_t)v10 >= 0x7FFFFFFFFFFFFFFCLL;
    unint64_t v13 = 0x3FFFFFFFFFFFFFFFLL;
    if (!v12) {
      unint64_t v13 = v11;
    }
    if (v13 >> 62) {
      goto LABEL_34;
    }
    uint64_t v14 = v13;
    uint64_t v15 = operator new(4 * v13);
    uint64_t v8 = &v15[v14];
    _DWORD *v15 = v7;
    uint64_t v9 = (char *)(v15 + 1);
    *(void *)(a1 + 16) = v15;
    *(void *)(a1 + 24) = v15 + 1;
    *(void *)(a1 + 32) = &v15[v14];
    if (v6)
    {
      operator delete(v6);
      uint64_t v8 = *(int **)(a1 + 32);
    }
  }
  else
  {
    *unint64_t v6 = v7;
    uint64_t v9 = (char *)(v6 + 1);
  }
  *(void *)(a1 + 24) = v9;
  if (v9 < (char *)v8)
  {
    *(_DWORD *)uint64_t v9 = 96;
    uint64_t v16 = v9 + 4;
    goto LABEL_33;
  }
  uint64_t v17 = *(char **)(a1 + 16);
  uint64_t v18 = (v9 - v17) >> 2;
  unint64_t v19 = v18 + 1;
  if ((unint64_t)(v18 + 1) >> 62) {
    abort();
  }
  uint64_t v20 = (char *)v8 - v17;
  if (v20 >> 1 > v19) {
    unint64_t v19 = v20 >> 1;
  }
  if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFFCLL) {
    unint64_t v21 = 0x3FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v21 = v19;
  }
  if (v21)
  {
    if (!(v21 >> 62))
    {
      uint64_t v22 = operator new(4 * v21);
      goto LABEL_22;
    }
LABEL_34:
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  uint64_t v22 = 0;
LABEL_22:
  uint64_t v23 = &v22[4 * v18];
  uint64_t v24 = &v22[4 * v21];
  _DWORD *v23 = 96;
  uint64_t v16 = v23 + 1;
  if (v9 == v17) {
    goto LABEL_31;
  }
  unint64_t v25 = v9 - v17 - 4;
  if (v25 < 0x2C)
  {
    uint64_t v26 = v9;
    goto LABEL_30;
  }
  if ((unint64_t)(v17 - v22) < 0x20)
  {
    uint64_t v26 = v9;
    do
    {
LABEL_30:
      int v32 = *((_DWORD *)v26 - 1);
      v26 -= 4;
      *--uint64_t v23 = v32;
    }
    while (v26 != v17);
    goto LABEL_31;
  }
  uint64_t v27 = (v25 >> 2) + 1;
  uint64_t v26 = &v9[-4 * (v27 & 0x7FFFFFFFFFFFFFF8)];
  uint64_t v28 = &v22[4 * v18 - 16];
  uint64_t v29 = v9 - 16;
  uint64_t v30 = v27 & 0x7FFFFFFFFFFFFFF8;
  do
  {
    long long v31 = *(_OWORD *)v29;
    *(v28 - 1) = *((_OWORD *)v29 - 1);
    _OWORD *v28 = v31;
    v28 -= 2;
    v29 -= 32;
    v30 -= 8;
  }
  while (v30);
  v23 -= v27 & 0x7FFFFFFFFFFFFFF8;
  if (v27 != (v27 & 0x7FFFFFFFFFFFFFF8)) {
    goto LABEL_30;
  }
LABEL_31:
  *(void *)(a1 + 16) = v23;
  *(void *)(a1 + 24) = v16;
  *(void *)(a1 + 32) = v24;
  if (v17) {
    operator delete(v17);
  }
LABEL_33:
  *(void *)(a1 + 24) = v16;
  *a2 = *(void *)(a1 + 16);
  *a3 = *(void *)(a1 + 24) - *(void *)(a1 + 16);
}

uint64_t ProgramKey<(_AGCStreamToken)22,(AGX::DriverShaderCompilationMode)1>::getSupportIndirectCommandBuffers()
{
  return 0;
}

uint64_t ProgramKey<(_AGCStreamToken)22,(AGX::DriverShaderCompilationMode)1>::isPrecompiledToBinaryArchive()
{
  return 0;
}

uint64_t ProgramKey<(_AGCStreamToken)22,(AGX::DriverShaderCompilationMode)1>::isPrecompiledToPipelineCache()
{
  return 1;
}

uint64_t ProgramKey<(_AGCStreamToken)22,(AGX::DriverShaderCompilationMode)1>::legalizeStateForTargetOS()
{
  return 1;
}

unsigned __int8 *AGX::IndirectExecutionCommonGen4<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::emitABIStateLoadProgram(int a1, unsigned __int8 *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  unint64_t v13 = a2;
  if (a9)
  {
    uint64_t v14 = 0;
    int v16 = *(_DWORD *)(a9 + 8);
    unsigned int v15 = *(_DWORD *)(a9 + 12);
    BOOL v17 = v16 == 10;
    if (!v16) {
      BOOL v17 = 1;
    }
    BOOL v18 = v15 == 7;
    if (v15 == 4) {
      BOOL v18 = 1;
    }
    BOOL v19 = v15 < 2 || v15 == 4;
    if (v15) {
      BOOL v20 = 0;
    }
    else {
      BOOL v20 = v17;
    }
    if (v15) {
      unsigned int v21 = v18;
    }
    else {
      unsigned int v21 = 1;
    }
    if (v15 == 8) {
      int v22 = 1;
    }
    else {
      int v22 = v21;
    }
    if (v15 == 1)
    {
      int v22 = 1;
      unsigned int v21 = 1;
    }
    int v23 = v15 == 5 || v19;
    if (v15 == 5)
    {
      int v22 = 1;
      unsigned int v21 = 1;
    }
    unsigned int v24 = v15 & 0xFFFFFFFE;
    if (v15 == 2) {
      int v25 = 1;
    }
    else {
      int v25 = v23;
    }
    if (v15 == 2) {
      int v26 = 1;
    }
    else {
      int v26 = v22;
    }
    if (v15 == 2) {
      unsigned int v21 = 1;
    }
    BOOL v27 = v24 == 2 || v15 < 2;
    if (v24 == 2)
    {
      int v23 = 1;
      BOOL v19 = 1;
    }
    BOOL v28 = v16 == 7 && v27;
    BOOL v29 = v15 == 3 || v15 == 6;
    int v30 = v29 | v25;
    if (v16 == 4) {
      int v31 = v30;
    }
    else {
      int v31 = 0;
    }
    if (v16) {
      int v32 = (v20 || v28) | v31;
    }
    else {
      int v32 = 1;
    }
    BOOL v33 = v16 == 8 && v15 < 3;
    if (v16 == 5) {
      int v34 = v23;
    }
    else {
      int v34 = 0;
    }
    BOOL v35 = v16 == 9 && v15 < 2;
    if (v16 != 6) {
      BOOL v19 = 0;
    }
    unsigned __int16 v36 = 119;
    if (*(unsigned char *)(a9 + 24))
    {
      unsigned __int16 v40 = 0;
      LOWORD(v21) = 0;
    }
    else
    {
      int v37 = (v16 == 1) & ((v29 || v15 == 9) | v26);
      int v38 = (v16 == 2) & (v29 | v26);
      int v39 = (v16 == 3) & (v29 | v21);
      unsigned __int16 v40 = 0;
      LOWORD(v21) = 0;
      if ((v32 | v33 | v37 | v34 | v38 | (v35 || v19) | v39))
      {
        int v41 = *(_DWORD *)(a9 + 28);
        int v42 = *(_DWORD *)(a9 + 32);
        unsigned int v43 = *(unsigned __int8 *)(a9 + 40);
        int v44 = *(_DWORD *)(a9 + 36);
        unsigned int v45 = *(_DWORD *)(a9 + 2);
        unsigned int v21 = ((v43 >> 5) | (*(unsigned __int8 *)(a9 + 20) << 6)) & 0xFFFFFE01;
        if (v44 == 1)
        {
          LOWORD(v21) = v21 | 4;
        }
        else if (!v44)
        {
          LOWORD(v21) = v21 | 2;
        }
        int v46 = *(_DWORD *)(a9 + 16);
        if (v42)
        {
          if (v42 == 1)
          {
            LOWORD(v21) = v21 & 0xFFE7 | 0x10;
          }
          else if (v42 == 2)
          {
            LOWORD(v21) = v21 & 0xFFE7;
          }
        }
        else
        {
          LOWORD(v21) = v21 & 0xFFE7 | 8;
        }
        __int16 v47 = ((((v43 >> 1) & 1) << 12) | ((v43 & 1) << 11)) & 0x1FFF | (((v43 >> 2) & 1) << 13) & 0x3FFF | (((v43 >> 3) & 1) << 14) & 0x7FFF | (((v43 >> 4) & 0xF) << 15);
        int v48 = (v45 >> 10) & 0x40 | (v45 >> 6 << 8);
        if (v41)
        {
          if (v41 == 1)
          {
            LOWORD(v21) = v21 & 0xFF9F | 0x40;
          }
          else if (v41 == 2)
          {
            LOWORD(v21) = v21 & 0xFF9F;
          }
        }
        else
        {
          LOWORD(v21) = v21 & 0xFF9F | 0x20;
        }
        uint64_t v14 = (unsigned __int16)v45 >> 14;
        unsigned __int16 v36 = v47 | 0x77;
        unsigned __int16 v40 = v48 & 0xFF7F | ((*(unsigned char *)a9 & 1) << 7);
        if (v46)
        {
          if (v46 == 2)
          {
            LOWORD(v21) = v21 & 0xFE7F | 0x80;
            if (!v20) {
              goto LABEL_90;
            }
            goto LABEL_87;
          }
          if (v46 == 1)
          {
            LOWORD(v21) = v21 & 0xFE7F;
            if (!v20)
            {
LABEL_90:
              if (v28)
              {
                if (v15 && (v15 == 1 || (v40 |= 8u, v15 != 2))) {
                  LOWORD(v21) = v21 | 0xC000;
                }
                else {
                  LOWORD(v21) = v21 & 0x3FFF | 0x8000;
                }
                goto LABEL_220;
              }
              if (v31)
              {
                unsigned __int16 v49 = v40 | 1;
                if (v15 == 4)
                {
LABEL_100:
                  LOWORD(v21) = v21 & 0xBFFF;
                  unsigned __int16 v40 = v49;
                  goto LABEL_220;
                }
                if (v15)
                {
                  switch(v15)
                  {
                    case 1u:
                      LOWORD(v21) = v21 & 0xBFFF;
                      __int16 v50 = 9;
                      goto LABEL_219;
                    case 5u:
                      LOWORD(v21) = v21 | 0x4000;
                      __int16 v50 = 9;
                      goto LABEL_219;
                    case 2u:
                      LOWORD(v21) = v21 & 0xBFFF;
                      __int16 v50 = 17;
                      goto LABEL_219;
                    case 6u:
                      LOWORD(v21) = v21 | 0x4000;
                      __int16 v50 = 17;
                      goto LABEL_219;
                    case 3u:
                      LOWORD(v21) = v21 & 0xBFFF;
                      __int16 v50 = 25;
                      goto LABEL_219;
                  }
LABEL_259:
                  unsigned __int16 v40 = v49;
                  goto LABEL_220;
                }
                goto LABEL_165;
              }
              if (v16)
              {
                if (v33)
                {
                  unsigned __int16 v49 = v40 | 2;
                  if (!v15) {
                    goto LABEL_100;
                  }
                  if (v15 == 1) {
                    goto LABEL_165;
                  }
                  LOWORD(v21) = v21 & 0xBFFF;
                  __int16 v50 = 10;
LABEL_219:
                  v40 |= v50;
                  goto LABEL_220;
                }
                if (v37)
                {
                  __int16 v53 = v21 | 0x8000;
                  unsigned __int16 v54 = v40 | 2;
                  if (v15 != 7)
                  {
                    switch(v15)
                    {
                      case 4u:
LABEL_115:
                        LOWORD(v21) = v21 | 0xC000;
                        unsigned __int16 v40 = v54;
                        goto LABEL_220;
                      case 0u:
                        LOWORD(v21) = v21 & 0x3FFF | 0x8000;
                        __int16 v50 = 10;
                        goto LABEL_219;
                      case 8u:
                        LOWORD(v21) = v21 | 0xC000;
                        __int16 v50 = 10;
                        goto LABEL_219;
                      case 1u:
                        LOWORD(v21) = v21 & 0x3FFF | 0x8000;
                        __int16 v50 = 18;
                        goto LABEL_219;
                      case 5u:
                        LOWORD(v21) = v21 | 0xC000;
                        __int16 v50 = 18;
                        goto LABEL_219;
                      case 2u:
                        LOWORD(v21) = v21 & 0x3FFF | 0x8000;
                        __int16 v50 = 26;
                        goto LABEL_219;
                      case 9u:
                        LOWORD(v21) = v21 | 0xC000;
                        __int16 v50 = 26;
                        goto LABEL_219;
                      case 6u:
                        LOWORD(v21) = v21 & 0x3FFF | 0x8000;
                        __int16 v50 = 34;
                        goto LABEL_219;
                      case 3u:
                        LOWORD(v21) = v21 | 0xC000;
                        __int16 v50 = 34;
                        goto LABEL_219;
                    }
LABEL_213:
                    unsigned __int16 v40 = v54;
                    LOWORD(v21) = v53;
                    goto LABEL_220;
                  }
                  goto LABEL_131;
                }
                if (v34)
                {
                  unsigned __int16 v49 = v40 | 3;
                  if (v15 == 4) {
                    goto LABEL_100;
                  }
                  if (v15)
                  {
                    switch(v15)
                    {
                      case 1u:
                        LOWORD(v21) = v21 & 0xBFFF;
                        __int16 v50 = 11;
                        goto LABEL_219;
                      case 5u:
                        LOWORD(v21) = v21 | 0x4000;
                        __int16 v50 = 11;
                        goto LABEL_219;
                      case 2u:
                        LOWORD(v21) = v21 & 0xBFFF;
                        __int16 v50 = 19;
                        goto LABEL_219;
                      case 3u:
                        LOWORD(v21) = v21 | 0x4000;
                        __int16 v50 = 19;
                        goto LABEL_219;
                    }
                    goto LABEL_259;
                  }
LABEL_165:
                  LOWORD(v21) = v21 | 0x4000;
                  unsigned __int16 v40 = v49;
                  goto LABEL_220;
                }
                if (v38)
                {
                  __int16 v53 = v21 | 0x8000;
                  unsigned __int16 v54 = v40 | 3;
                  if (v15 != 7)
                  {
                    switch(v15)
                    {
                      case 4u:
                        goto LABEL_115;
                      case 0u:
                        LOWORD(v21) = v21 & 0x3FFF | 0x8000;
                        __int16 v50 = 11;
                        goto LABEL_219;
                      case 8u:
                        LOWORD(v21) = v21 | 0xC000;
                        __int16 v50 = 11;
                        goto LABEL_219;
                      case 1u:
                        LOWORD(v21) = v21 & 0x3FFF | 0x8000;
                        __int16 v50 = 19;
                        goto LABEL_219;
                      case 5u:
                        LOWORD(v21) = v21 | 0xC000;
                        __int16 v50 = 19;
                        goto LABEL_219;
                      case 2u:
                        LOWORD(v21) = v21 & 0x3FFF | 0x8000;
                        __int16 v50 = 27;
                        goto LABEL_219;
                      case 6u:
                        LOWORD(v21) = v21 | 0xC000;
                        __int16 v50 = 27;
                        goto LABEL_219;
                      case 3u:
                        LOWORD(v21) = v21 & 0x3FFF | 0x8000;
                        __int16 v50 = 35;
                        goto LABEL_219;
                    }
                    goto LABEL_213;
                  }
LABEL_131:
                  LOWORD(v21) = v53 & 0xBFFF;
                  unsigned __int16 v40 = v54;
                  goto LABEL_220;
                }
                if (v35)
                {
                  v40 |= 4u;
                  if (v15)
                  {
                    LOWORD(v21) = v21 | 0x4000;
                    goto LABEL_220;
                  }
                  goto LABEL_88;
                }
                if (!v19)
                {
                  if (!v39) {
                    goto LABEL_220;
                  }
                  unsigned __int16 v49 = v40 | 5;
                  if (v15 == 7) {
                    goto LABEL_100;
                  }
                  if (v15 != 4)
                  {
                    switch(v15)
                    {
                      case 0u:
                        LOWORD(v21) = v21 & 0xBFFF;
                        __int16 v50 = 13;
                        goto LABEL_219;
                      case 1u:
                        LOWORD(v21) = v21 | 0x4000;
                        __int16 v50 = 13;
                        goto LABEL_219;
                      case 5u:
                        LOWORD(v21) = v21 & 0xBFFF;
                        __int16 v50 = 21;
                        goto LABEL_219;
                      case 2u:
                        LOWORD(v21) = v21 | 0x4000;
                        __int16 v50 = 21;
                        goto LABEL_219;
                      case 6u:
                        LOWORD(v21) = v21 & 0xBFFF;
                        break;
                      case 3u:
                        LOWORD(v21) = v21 | 0x4000;
                        break;
                      default:
                        goto LABEL_259;
                    }
                    __int16 v50 = 29;
                    goto LABEL_219;
                  }
                  goto LABEL_165;
                }
                __int16 v51 = v21 | 0x8000;
                unsigned __int16 v52 = v40 | 4;
                if (v15 != 4)
                {
                  if (v15)
                  {
                    if (v15 == 1)
                    {
                      LOWORD(v21) = v21 & 0x3FFF | 0x8000;
                      v40 |= 0xCu;
                      goto LABEL_220;
                    }
                    if (v15 == 2)
                    {
                      LOWORD(v21) = v21 | 0xC000;
                      v40 |= 0xCu;
                      goto LABEL_220;
                    }
                    LOWORD(v21) = v21 & 0x3FFF | 0x8000;
                    __int16 v50 = 20;
                    goto LABEL_219;
                  }
LABEL_117:
                  LOWORD(v21) = v21 | 0xC000;
                  unsigned __int16 v40 = v52;
                  goto LABEL_220;
                }
              }
              else
              {
                __int16 v51 = v21 | 0x8000;
                unsigned __int16 v52 = v40 | 1;
                if (v15 != 10)
                {
                  if (v15 != 7)
                  {
                    if (v15 == 4)
                    {
                      LOWORD(v21) = v21 & 0x3FFF | 0x8000;
                      __int16 v50 = 9;
                    }
                    else if (v15)
                    {
                      switch(v15)
                      {
                        case 8u:
                          LOWORD(v21) = v21 & 0x3FFF | 0x8000;
                          __int16 v50 = 17;
                          break;
                        case 1u:
                          LOWORD(v21) = v21 | 0xC000;
                          __int16 v50 = 17;
                          break;
                        case 5u:
                          LOWORD(v21) = v21 & 0x3FFF | 0x8000;
                          __int16 v50 = 25;
                          break;
                        case 2u:
                          LOWORD(v21) = v21 | 0xC000;
                          __int16 v50 = 25;
                          break;
                        case 9u:
                          LOWORD(v21) = v21 & 0x3FFF | 0x8000;
                          __int16 v50 = 33;
                          break;
                        case 6u:
                          LOWORD(v21) = v21 | 0xC000;
                          __int16 v50 = 33;
                          break;
                        case 3u:
                          LOWORD(v21) = v21 & 0x3FFF | 0x8000;
                          __int16 v50 = 41;
                          break;
                        default:
                          v40 |= 1u;
                          LOWORD(v21) = v21 | 0x8000;
                          goto LABEL_220;
                      }
                    }
                    else
                    {
                      LOWORD(v21) = v21 | 0xC000;
                      __int16 v50 = 9;
                    }
                    goto LABEL_219;
                  }
                  goto LABEL_117;
                }
              }
              LOWORD(v21) = v51 & 0xBFFF;
              unsigned __int16 v40 = v52;
              goto LABEL_220;
            }
LABEL_87:
            if (v16 != 10)
            {
              if (!v16) {
                LOWORD(v21) = v21 | 0x4000;
              }
              goto LABEL_220;
            }
LABEL_88:
            LOWORD(v21) = v21 & 0xBFFF;
            goto LABEL_220;
          }
        }
        else
        {
          LOWORD(v21) = v21 & 0xFE7F | 0x100;
        }
        if (!v20) {
          goto LABEL_90;
        }
        goto LABEL_87;
      }
    }
LABEL_220:
    *(void *)a2 = (v14 << 48) | ((unint64_t)v40 << 32) | ((unint64_t)(unsigned __int16)v21 << 16) | v36;
    unint64_t v13 = a2 + 8;
  }
  if (a3)
  {
    unint64_t v56 = HIDWORD(a3);
    uint64_t v95 = 0;
    uint64_t v96 = 0;
    *(void *)&long long v97 = 0xFFFFFFFF00000000;
    *(_OWORD *)uint64_t v94 = xmmword_242EA7E80;
    *(void *)&v94[16] = 0x800000000;
    unint64_t v57 = a3;
    int v93 = a3;
    *(_DWORD *)&v94[24] = 0;
    int8x16_t v58 = AGXIotoInstruction_LDIMM::emit((AGXIotoInstruction_LDIMM *)&v93, v13);
    uint64_t v95 = 0;
    uint64_t v96 = 0;
    *(void *)&long long v97 = 0xFFFFFFFF00000000;
    *(_OWORD *)uint64_t v94 = xmmword_242EA7E90;
    *(void *)&v94[16] = 0x800000000;
    int v93 = v56;
    *(_DWORD *)&v94[24] = 0;
    unint64_t v13 = AGXIotoInstruction_LDIMM::emit((AGXIotoInstruction_LDIMM *)&v93, v58);
    if (!a4) {
      goto LABEL_224;
    }
    goto LABEL_223;
  }
  unint64_t v57 = 0;
  if (a4)
  {
LABEL_223:
    uint64_t v95 = 0;
    uint64_t v96 = 0;
    *(void *)&long long v97 = 0xFFFFFFFF00000000;
    *(_OWORD *)uint64_t v94 = xmmword_242EA7EA0;
    *(void *)&v94[16] = 0x800000000;
    int v93 = a4;
    *(_DWORD *)&v94[24] = 0;
    int8x16_t v59 = AGXIotoInstruction_LDIMM::emit((AGXIotoInstruction_LDIMM *)&v93, v13);
    uint64_t v95 = 0;
    uint64_t v96 = 0;
    *(void *)&long long v97 = 0xFFFFFFFF00000000;
    *(_OWORD *)uint64_t v94 = xmmword_242EA7EB0;
    *(void *)&v94[16] = 0x800000000;
    int v93 = HIDWORD(a4);
    *(_DWORD *)&v94[24] = 0;
    unint64_t v13 = AGXIotoInstruction_LDIMM::emit((AGXIotoInstruction_LDIMM *)&v93, v59);
  }
LABEL_224:
  if (a5)
  {
    uint64_t v95 = 0;
    uint64_t v96 = 0;
    *(void *)&long long v97 = 0xFFFFFFFF00000000;
    *(_OWORD *)uint64_t v94 = xmmword_242EA7EC0;
    *(void *)&v94[16] = 0x800000000;
    int v93 = a5;
    *(_DWORD *)&v94[24] = 0;
    uint64_t v60 = AGXIotoInstruction_LDIMM::emit((AGXIotoInstruction_LDIMM *)&v93, v13);
    uint64_t v95 = 0;
    uint64_t v96 = 0;
    *(void *)&long long v97 = 0xFFFFFFFF00000000;
    *(_OWORD *)uint64_t v94 = xmmword_242EA7ED0;
    *(void *)&v94[16] = 0x800000000;
    int v93 = HIDWORD(a5);
    *(_DWORD *)&v94[24] = 0;
    unint64_t v13 = AGXIotoInstruction_LDIMM::emit((AGXIotoInstruction_LDIMM *)&v93, v60);
  }
  if (a6)
  {
    uint64_t v95 = 0;
    uint64_t v96 = 0;
    *(void *)&long long v97 = 0xFFFFFFFF00000000;
    *(_OWORD *)uint64_t v94 = xmmword_242EA7EE0;
    *(void *)&v94[16] = 0x800000000;
    int v93 = a6;
    *(_DWORD *)&v94[24] = 0;
    uint64_t v61 = AGXIotoInstruction_LDIMM::emit((AGXIotoInstruction_LDIMM *)&v93, v13);
    uint64_t v95 = 0;
    uint64_t v96 = 0;
    *(void *)&long long v97 = 0xFFFFFFFF00000000;
    *(_OWORD *)uint64_t v94 = xmmword_242EA7EF0;
    *(void *)&v94[16] = 0x800000000;
    int v93 = HIDWORD(a6);
    *(_DWORD *)&v94[24] = 0;
    unint64_t v13 = AGXIotoInstruction_LDIMM::emit((AGXIotoInstruction_LDIMM *)&v93, v61);
  }
  if (a7)
  {
    uint64_t v95 = 0;
    uint64_t v96 = 0;
    *(void *)&long long v97 = 0xFFFFFFFF00000000;
    *(_OWORD *)uint64_t v94 = xmmword_242EA7F00;
    *(void *)&v94[16] = 0x800000000;
    int v93 = a7;
    *(_DWORD *)&v94[24] = 0;
    uint64_t v62 = AGXIotoInstruction_LDIMM::emit((AGXIotoInstruction_LDIMM *)&v93, v13);
    uint64_t v95 = 0;
    uint64_t v96 = 0;
    *(void *)&long long v97 = 0xFFFFFFFF00000000;
    *(_OWORD *)uint64_t v94 = xmmword_242EA7F10;
    *(void *)&v94[16] = 0x800000000;
    int v93 = HIDWORD(a7);
    *(_DWORD *)&v94[24] = 0;
    unint64_t v13 = AGXIotoInstruction_LDIMM::emit((AGXIotoInstruction_LDIMM *)&v93, v62);
  }
  if (a8)
  {
    uint64_t v95 = 0;
    uint64_t v96 = 0;
    *(void *)&long long v97 = 0xFFFFFFFF00000000;
    *(_OWORD *)uint64_t v94 = xmmword_242EA7F20;
    *(void *)&v94[16] = 0x800000000;
    int v93 = a8;
    *(_DWORD *)&v94[24] = 0;
    uint64_t v63 = AGXIotoInstruction_LDIMM::emit((AGXIotoInstruction_LDIMM *)&v93, v13);
    uint64_t v95 = 0;
    uint64_t v96 = 0;
    *(void *)&long long v97 = 0xFFFFFFFF00000000;
    *(_OWORD *)uint64_t v94 = xmmword_242EA7F30;
    *(void *)&v94[16] = 0x800000000;
    int v93 = HIDWORD(a8);
    *(_DWORD *)&v94[24] = 0;
    unint64_t v13 = AGXIotoInstruction_LDIMM::emit((AGXIotoInstruction_LDIMM *)&v93, v63);
  }
  if (a1)
  {
    if (a10 == 0xFFFFFFFFLL)
    {
      v79[0] = 0;
      v79[1] = 0;
      int v80 = 0;
      return AGXIotoInstruction_CNDRET_0::emit((AGXIotoInstruction_CNDRET_0 *)v79, v13);
    }
    goto LABEL_257;
  }
  int v93 = 1;
  *(_OWORD *)&v94[12] = 0u;
  long long v97 = 0u;
  long long v98 = 0u;
  uint64_t v95 = 20;
  uint64_t v96 = 0x200000002;
  *(void *)uint64_t v94 = 3;
  *(void *)&v94[8] = 0x200000007;
  *(_DWORD *)&v94[20] = 8;
  uint64_t v65 = AGXIotoInstruction_RLD_1::emit((AGXIotoInstruction_RLD_1 *)&v93, v13);
  uint64_t v90 = 0;
  uint64_t v91 = 0;
  unint64_t v92 = 0xFFFFFFFF00000000;
  v89[0] = xmmword_242EA7F40;
  v89[1] = xmmword_242EA7F50;
  uint64_t v66 = AGXIotoInstruction_LDIMM::emit((AGXIotoInstruction_LDIMM *)v89, v65);
  int v82 = 1;
  *(_OWORD *)&v84[4] = 0u;
  long long v87 = 0u;
  long long v88 = 0u;
  uint64_t v85 = 22;
  uint64_t v86 = 0x100000002;
  uint64_t v83 = 4;
  *(void *)uint64_t v84 = 0x100000007;
  *(_DWORD *)&v84[12] = 8;
  uint64_t result = AGXIotoInstruction_RLD_1::emit((AGXIotoInstruction_RLD_1 *)&v82, v66);
  *(void *)uint64_t result = 0x60F004C1454120FLL;
  *((_DWORD *)result + 2) = 596;
  unint64_t v13 = result + 12;
  if (a10 != 0xFFFFFFFFLL)
  {
LABEL_257:
    v81[1] = 0;
    v81[2] = 0;
    v81[0] = (2 * (a10 & 0xFFFFFFFFFFFFLL)) | 1;
    return AGXIotoInstruction_B_0::emit((AGXIotoInstruction_B_0 *)v81, v13);
  }
  uint64_t v67 = 20;
  if (a4) {
    uint64_t v68 = 20;
  }
  else {
    uint64_t v68 = 0;
  }
  if (a5) {
    uint64_t v69 = 20;
  }
  else {
    uint64_t v69 = 0;
  }
  if (a6) {
    uint64_t v70 = 20;
  }
  else {
    uint64_t v70 = 0;
  }
  if (a7) {
    uint64_t v71 = 20;
  }
  else {
    uint64_t v71 = 0;
  }
  if (!a8) {
    uint64_t v67 = 0;
  }
  uint64_t v72 = 58;
  if (!v57) {
    uint64_t v72 = 38;
  }
  uint64_t v73 = &a2[8 * (a9 != 0) + v72 + v68 + v69 + v70 + v71 + v67];
  if (v13 < v73)
  {
    do
    {
      v77[0] = 0;
      v77[1] = 0;
      int v78 = 0;
      uint64_t result = AGXIotoInstruction_NOP_0::emit((AGXIotoInstruction_NOP_0 *)v77, v13);
      unint64_t v13 = result;
    }
    while (result < v73);
  }
  return result;
}

unsigned __int8 *AGXIotoInstruction_LDIMM::emit(AGXIotoInstruction_LDIMM *this, unsigned __int8 *a2)
{
  uint64_t v2 = a2;
  uint64_t v337 = *MEMORY[0x263EF8340];
  int v3 = *((_DWORD *)this + 13);
  if (v3 == 2)
  {
    BOOL v9 = 0;
    int v11 = *((_DWORD *)this + 3);
    int v10 = *((_DWORD *)this + 4);
    int v12 = *((_DWORD *)this + 7);
    int v13 = *((_DWORD *)this + 9);
    int v14 = *((_DWORD *)this + 10);
    int v15 = *((_DWORD *)this + 11);
    int v316 = *((_DWORD *)this + 6);
    if (v12)
    {
      BOOL v319 = 0;
    }
    else
    {
      BOOL v319 = 0;
      if (*((_DWORD *)this + 6) == 8)
      {
        BOOL v9 = v11 == 2;
        BOOL v18 = v11 == 3 && (*((unsigned char *)this + 20) & 1) == 0;
        BOOL v319 = v18;
      }
    }
    __int16 v150 = 0;
    BOOL v151 = v11 == 5;
    char v312 = *((_DWORD *)this + 7);
    int v315 = *((unsigned char *)this + 20) & 1;
    if (v12) {
      BOOL v152 = 0;
    }
    else {
      BOOL v152 = v11 == 4;
    }
    int v153 = v152;
    BOOL v154 = (*((unsigned char *)this + 20) & 1) == 0 && v151;
    if (*((unsigned char *)this + 20)) {
      int v155 = 0;
    }
    else {
      int v155 = v153;
    }
    BOOL v156 = v14 == 0;
    BOOL v157 = v14 == 1;
    BOOL v158 = v14 == 2;
    if (v13) {
      BOOL v159 = 0;
    }
    else {
      BOOL v159 = v14 == 1;
    }
    if (v13) {
      BOOL v160 = 0;
    }
    else {
      BOOL v160 = v14 == 2;
    }
    BOOL v161 = v13 == 1 && v14 == 0;
    BOOL v162 = v13 == 1 && v14 == 1;
    BOOL v163 = v13 == 1 && v14 == 2;
    if (v13 != 2)
    {
      BOOL v156 = 0;
      BOOL v157 = 0;
      BOOL v158 = 0;
    }
    int v164 = v14 | v13;
    if (v15) {
      BOOL v165 = 0;
    }
    else {
      BOOL v165 = v161;
    }
    if (v15) {
      BOOL v166 = 0;
    }
    else {
      BOOL v166 = v156;
    }
    if (v15) {
      BOOL v167 = 0;
    }
    else {
      BOOL v167 = v159;
    }
    if (v15) {
      BOOL v168 = 0;
    }
    else {
      BOOL v168 = v162;
    }
    if (v15) {
      BOOL v169 = 0;
    }
    else {
      BOOL v169 = v157;
    }
    if (v15) {
      BOOL v170 = 0;
    }
    else {
      BOOL v170 = v160;
    }
    if (v15) {
      BOOL v171 = 0;
    }
    else {
      BOOL v171 = v163;
    }
    if (v15) {
      BOOL v172 = 0;
    }
    else {
      BOOL v172 = v158;
    }
    BOOL v173 = v15 == 1 && v161;
    BOOL v174 = v15 == 1 && v156;
    BOOL v310 = v174;
    BOOL v175 = v15 == 1 && v159;
    BOOL v307 = v175;
    BOOL v176 = v15 == 1 && v162;
    BOOL v304 = v176;
    BOOL v177 = v15 == 1 && v157;
    BOOL v301 = v177;
    BOOL v178 = v15 == 1 && v160;
    BOOL v298 = v178;
    BOOL v179 = v15 == 1 && v163;
    BOOL v295 = v179;
    BOOL v180 = v15 == 1 && v158;
    BOOL v293 = v180;
    if (v15 != 2)
    {
      BOOL v161 = 0;
      BOOL v156 = 0;
    }
    BOOL v289 = v156;
    BOOL v291 = v161;
    BOOL v181 = v15 == 2 && v159;
    BOOL v287 = v181;
    BOOL v182 = v15 == 2 && v162;
    BOOL v285 = v182;
    if (v15 == 2)
    {
      unsigned int v183 = v160;
    }
    else
    {
      BOOL v157 = 0;
      unsigned int v183 = 0;
    }
    if (v15 == 2)
    {
      BOOL v184 = v158;
    }
    else
    {
      BOOL v163 = 0;
      BOOL v184 = 0;
    }
    BOOL v185 = v164 == 0;
    if (v164) {
      BOOL v186 = 0;
    }
    else {
      BOOL v186 = v15 == 1;
    }
    if (v164) {
      BOOL v187 = 0;
    }
    else {
      BOOL v187 = v15 == 2;
    }
    __int16 v188 = -32764;
    LOWORD(v189) = 3;
    if ((v10 - 1) > 1)
    {
      LOWORD(v191) = 0;
      LOWORD(v183) = 0;
      uint64_t v2 = a2;
      goto LABEL_471;
    }
    unsigned int v277 = v183;
    BOOL v279 = v157;
    int v190 = v9 || v319 || v154;
    LOWORD(v191) = 0;
    LOWORD(v183) = 0;
    uint64_t v2 = a2;
    if (!(v190 | v155))
    {
LABEL_471:
      *(_WORD *)uint64_t v2 = v188;
      *((_WORD *)v2 + 1) = v189;
      *((_WORD *)v2 + 2) = v183;
      *((_WORD *)v2 + 3) = v191;
      *((_WORD *)v2 + 4) = v150;
      return v2 + 10;
    }
    BOOL v192 = v184;
    int v283 = v155;
    size_t v193 = v2;
    unsigned int v194 = *(_DWORD *)this;
    unsigned int v195 = *((_DWORD *)this + 1);
    char v196 = *((unsigned char *)this + 32);
    unsigned int v197 = *((unsigned __int8 *)this + 48);
    if (v15) {
      BOOL v185 = 0;
    }
    int v198 = HIWORD(*(_DWORD *)this) & 0xFE00;
    int v199 = v198 | 3;
    unsigned int v183 = (v194 >> 1) & 0xC00 | (v194 >> 6) & 0x1E | v196 & 1 | ((v197 & 1) << 13) & 0x3FFF | (((v197 >> 1) & 1) << 14) & 0xFFE07FFF | (v197 >> 2 << 15);
    unsigned int v191 = (v194 >> 13) & 0xFFF | (((v197 >> 3) & 1) << 13) & 0xFFFC3FFF | (((v197 >> 4) & 1) << 14) & 0xFFFC7FFF | (v197 >> 5 << 15);
    if (v10 == 2) {
      __int16 v200 = -32756;
    }
    else {
      __int16 v200 = -32764;
    }
    __int16 v188 = v200 | ((_WORD)v194 << 8);
    if (v185)
    {
      LOWORD(v183) = (v194 >> 1) & 0xC00 | (v194 >> 6) & 0x1E | v196 & 1 | ((v197 & 1) << 13) & 0x3C1F | (((v197 >> 1) & 1) << 14) & 0x7C1F | (v197 >> 2 << 15);
LABEL_409:
      uint64_t v2 = v193;
LABEL_459:
      int v205 = v316;
      goto LABEL_460;
    }
    uint64_t v2 = v193;
    if (v165)
    {
      LOWORD(v183) = v183 & 0xFC1F | 0x20;
      goto LABEL_459;
    }
    if (v166)
    {
      LOWORD(v183) = v183 & 0xFC1F | 0x40;
      goto LABEL_459;
    }
    if (v167)
    {
      LOWORD(v183) = v183 & 0xFC1F | 0x60;
      goto LABEL_459;
    }
    if (v168)
    {
      LOWORD(v183) = v183 & 0xFC1F | 0x80;
      goto LABEL_459;
    }
    if (v169)
    {
      __int16 v203 = v183 & 0xFC3F;
      __int16 v204 = 160;
    }
    else
    {
      if (v170)
      {
        LOWORD(v183) = v183 & 0xFC1F | 0xC0;
        goto LABEL_459;
      }
      if (v171)
      {
        LOWORD(v183) = v183 & 0xFC1F | 0xE0;
        goto LABEL_459;
      }
      if (v172)
      {
        LOWORD(v183) = v183 & 0xFC1F | 0x100;
        goto LABEL_459;
      }
      if (v186)
      {
        __int16 v203 = v183 & 0xFC3F;
        __int16 v204 = 288;
      }
      else
      {
        if (!v173)
        {
          if (v310)
          {
            LOWORD(v183) = v183 & 0xFC1F | 0x160;
          }
          else if (v307)
          {
            LOWORD(v183) = v183 & 0xFC1F | 0x180;
          }
          else if (v304)
          {
            LOWORD(v183) = v183 & 0xFC1F | 0x1A0;
          }
          else if (v301)
          {
            LOWORD(v183) = v183 & 0xFC1F | 0x1C0;
          }
          else if (v298)
          {
            LOWORD(v183) = v183 & 0xFC1F | 0x1E0;
          }
          else if (v295)
          {
            LOWORD(v183) = v183 & 0xFC1F | 0x200;
          }
          else if (v293)
          {
            LOWORD(v183) = v183 & 0xFC1F | 0x220;
          }
          else if (v187)
          {
            LOWORD(v183) = v183 & 0xFC1F | 0x240;
          }
          else if (v291)
          {
            LOWORD(v183) = v183 & 0xFC1F | 0x260;
          }
          else if (v289)
          {
            LOWORD(v183) = v183 & 0xFC1F | 0x280;
          }
          else if (v287)
          {
            LOWORD(v183) = v183 & 0xFC1F | 0x2A0;
          }
          else if (v285)
          {
            LOWORD(v183) = v183 & 0xFC1F | 0x2C0;
          }
          else if (v279)
          {
            LOWORD(v183) = v183 & 0xFC1F | 0x2E0;
          }
          else if (v277)
          {
            LOWORD(v183) = v183 & 0xFC1F | 0x300;
          }
          else
          {
            if (!v163)
            {
              uint64_t v2 = v193;
              int v205 = v316;
              if (v192) {
                LOWORD(v183) = v183 & 0xFC1F | 0x340;
              }
LABEL_460:
              if (v190)
              {
                if (v9)
                {
                  __int16 v150 = 0;
                  v188 |= (8 * v195) & 0xF0;
                  unsigned int v189 = v199 | (v195 >> 4) & 8 | (4 * (v195 & 1)) & 0x3F | (((v195 >> 5) & 3) << 6) | (32 * v315);
                  goto LABEL_471;
                }
                if (v319 || v154)
                {
                  if (v319)
                  {
                    v188 |= (8 * v195) & 0xF0;
                    unsigned int v189 = (2 * v195) & 0xC0 | (4 * (v195 & 1)) | ((unsigned __int16)(v195 & 0x180) >> 4) | v199;
                    __int16 v150 = 64;
                    goto LABEL_471;
                  }
                  if (!v154)
                  {
                    LOWORD(v189) = v198 | 3;
                    __int16 v150 = 64;
                    goto LABEL_471;
                  }
                  v188 |= (8 * v195) & 0xF0;
                  unsigned int v189 = (2 * v195) & 0xC0 | (4 * (v195 & 1)) | v198 | 0x23 | ((v195 & 0x80 | (v195 >> 8 << 8)) >> 4) & 0x18;
                  int v206 = (v195 >> 8) & 0x1E | ((v312 & 1) << 10);
                  __int16 v150 = v206 | 0x40;
                  if (v205)
                  {
                    switch(v205)
                    {
                      case 1:
                        __int16 v150 = v206 | 0x2040;
                        goto LABEL_471;
                      case 2:
                        __int16 v150 = v206 | 0x4040;
                        goto LABEL_471;
                      case 3:
                        __int16 v150 = v206 | 0x6040;
                        goto LABEL_471;
                      case 4:
                        __int16 v150 = v206 | 0x8040;
                        goto LABEL_471;
                      case 5:
                        __int16 v150 = v206 | 0xA040;
                        goto LABEL_471;
                    }
                    __int16 v207 = -8128;
                    goto LABEL_491;
                  }
                  goto LABEL_471;
                }
              }
              else if (v283)
              {
                v188 |= (8 * v195) & 0xF0;
                unsigned int v189 = (v195 >> 4) & 0x18 | (4 * (v195 & 1)) & 0x3F | (v195 >> 11) & 0x20 | (((v195 >> 5) & 3) << 6) | v199;
                int v206 = (v195 >> 8) & 0x1E | (v195 >> 9) & 0x40 | (v195 >> 3) & 0xC00;
                __int16 v150 = v206 | 0x20;
                switch(v205)
                {
                  case 0:
                    goto LABEL_471;
                  case 1:
                    __int16 v150 = v206 | 0x2020;
                    goto LABEL_471;
                  case 2:
                    __int16 v150 = v206 | 0x4020;
                    goto LABEL_471;
                  case 3:
                    __int16 v150 = v206 | 0x6020;
                    goto LABEL_471;
                  case 4:
                    __int16 v150 = v206 | 0x8020;
                    goto LABEL_471;
                  case 5:
                    __int16 v150 = v206 | 0xA020;
                    goto LABEL_471;
                }
                __int16 v207 = -8160;
LABEL_491:
                __int16 v208 = v206 | v207;
                if (v205 == 8) {
                  __int16 v150 = v208;
                }
                goto LABEL_471;
              }
              LOWORD(v189) = v198 | 3;
              __int16 v150 = 0;
              goto LABEL_471;
            }
            LOWORD(v183) = v183 & 0xFC1F | 0x320;
          }
          goto LABEL_409;
        }
        __int16 v203 = v183 & 0xFC1F;
        __int16 v204 = 320;
      }
    }
    LOWORD(v183) = v203 | v204;
    goto LABEL_459;
  }
  if (v3 == 1)
  {
    int v5 = *((_DWORD *)this + 9);
    int v6 = *((_DWORD *)this + 10);
    int v7 = *((_DWORD *)this + 11);
    if (*((_DWORD *)this + 7)) {
      BOOL v8 = 0;
    }
    else {
      BOOL v8 = *((_DWORD *)this + 6) == 8 && *((_DWORD *)this + 3) == 2;
    }
    LOWORD(v31) = 0;
    BOOL v32 = v6 == 2;
    if (v5) {
      BOOL v33 = 0;
    }
    else {
      BOOL v33 = v6 == 1;
    }
    if (v5) {
      BOOL v34 = 0;
    }
    else {
      BOOL v34 = v6 == 2;
    }
    BOOL v35 = v5 == 1 && v6 == 0;
    BOOL v36 = v5 == 1 && v6 == 1;
    BOOL v37 = v5 == 1 && v6 == 2;
    BOOL v38 = v5 == 2 && v6 == 0;
    BOOL v39 = v5 == 2 && v6 == 1;
    if (v5 != 2) {
      BOOL v32 = 0;
    }
    int v40 = v6 | v5;
    if (v7) {
      BOOL v41 = 0;
    }
    else {
      BOOL v41 = v35;
    }
    if (v7) {
      BOOL v42 = 0;
    }
    else {
      BOOL v42 = v38;
    }
    if (v7) {
      BOOL v43 = 0;
    }
    else {
      BOOL v43 = v33;
    }
    if (v7) {
      BOOL v44 = 0;
    }
    else {
      BOOL v44 = v36;
    }
    if (v7) {
      BOOL v45 = 0;
    }
    else {
      BOOL v45 = v39;
    }
    if (v7) {
      BOOL v46 = 0;
    }
    else {
      BOOL v46 = v34;
    }
    if (v7) {
      BOOL v47 = 0;
    }
    else {
      BOOL v47 = v37;
    }
    if (v7) {
      BOOL v48 = 0;
    }
    else {
      BOOL v48 = v32;
    }
    BOOL v49 = v7 == 1 && v35;
    BOOL v50 = v7 == 1 && v38;
    BOOL v51 = v7 == 1 && v33;
    BOOL v52 = v7 == 1 && v36;
    BOOL v53 = v7 == 1 && v39;
    BOOL v54 = v7 == 1 && v34;
    BOOL v320 = v54;
    BOOL v55 = v7 == 1 && v37;
    BOOL v317 = v55;
    BOOL v56 = v7 == 1 && v32;
    BOOL v313 = v56;
    if (v7 != 2)
    {
      BOOL v35 = 0;
      BOOL v38 = 0;
      BOOL v33 = 0;
    }
    BOOL v308 = v33;
    BOOL v311 = v38;
    BOOL v57 = v7 == 2 && v36;
    BOOL v58 = v7 == 2 && v39;
    BOOL v302 = v58;
    BOOL v305 = v57;
    BOOL v59 = v7 == 2 && v34;
    BOOL v60 = v7 == 2 && v37;
    BOOL v61 = v7 == 2 && v32;
    BOOL v62 = v40 == 0;
    if (v40) {
      BOOL v63 = 0;
    }
    else {
      BOOL v63 = v7 == 1;
    }
    if (v40) {
      BOOL v64 = 0;
    }
    else {
      BOOL v64 = v7 == 2;
    }
    unsigned int v65 = 2;
    unsigned __int16 v66 = -32764;
    if (v8)
    {
      BOOL v67 = v59;
      int v68 = *((_DWORD *)this + 4);
      uint64_t v69 = 0;
      if ((v68 - 1) <= 1)
      {
        BOOL v296 = v60;
        BOOL v299 = v61;
        unsigned int v70 = *(_DWORD *)this;
        int v71 = HIWORD(*(_DWORD *)this);
        unsigned int v72 = *((unsigned __int8 *)this + 4);
        char v73 = *((unsigned char *)this + 20);
        int v74 = (v70 >> 1) & 0xC00 | (v70 >> 6) & 0x1F;
        char v75 = *((unsigned char *)this + 32);
        int v76 = (*(_DWORD *)this >> 13) & 0xFFF;
        unsigned int v77 = *((unsigned __int8 *)this + 48);
        if (v7) {
          BOOL v78 = 0;
        }
        else {
          BOOL v78 = v62;
        }
        __int16 v79 = (8 * v72) & 0xF0 | ((_WORD)v70 << 8);
        unsigned int v65 = v71 & 0xFE00 | (4 * (v72 & 1)) & 0x1F | (v72 >> 4) & 8 | (((v72 >> 5) & 3) << 6) | (32 * (v73 & 1)) | 2;
        unsigned int v80 = v77 >> 5;
        unsigned int v31 = v74 & 0xFFE01FFE | v75 & 1 | ((v77 & 1) << 13) & 0x3FFF | (((v77 >> 1) & 1) << 14) & 0xFFE07FFF | (v77 >> 2 << 15);
        unsigned int v81 = v76 & 0xFFFFDFFF | (((v77 >> 3) & 1) << 13);
        unsigned int v82 = v77 >> 4;
        if (v68 == 2) {
          __int16 v83 = -32756;
        }
        else {
          __int16 v83 = -32764;
        }
        unsigned __int16 v66 = v79 | v83;
        uint64_t v69 = v81 & 0xFFFC3FFF | ((v82 & 1) << 14) & 0x7FFF | ((v80 & 7) << 15);
        if (v78)
        {
          LOWORD(v31) = v31 & 0xFC1F;
        }
        else if (v41)
        {
          LOWORD(v31) = v31 & 0xFC1F | 0x20;
        }
        else if (v42)
        {
          LOWORD(v31) = v31 & 0xFC1F | 0x40;
        }
        else if (v43)
        {
          LOWORD(v31) = v31 & 0xFC1F | 0x60;
        }
        else if (v44)
        {
          LOWORD(v31) = v31 & 0xFC1F | 0x80;
        }
        else
        {
          if (v45)
          {
            __int16 v201 = v31 & 0xFC3F;
            __int16 v202 = 160;
          }
          else
          {
            if (v46)
            {
              LOWORD(v31) = v31 & 0xFC1F | 0xC0;
              goto LABEL_456;
            }
            if (v47)
            {
              LOWORD(v31) = v31 & 0xFC1F | 0xE0;
              goto LABEL_456;
            }
            if (v48)
            {
              LOWORD(v31) = v31 & 0xFC1F | 0x100;
              goto LABEL_456;
            }
            if (v63)
            {
              __int16 v201 = v31 & 0xFC3F;
              __int16 v202 = 288;
            }
            else if (v49)
            {
              __int16 v201 = v31 & 0xFC1F;
              __int16 v202 = 320;
            }
            else if (v50)
            {
              __int16 v201 = v31 & 0xFC7F;
              __int16 v202 = 352;
            }
            else
            {
              if (v51)
              {
                LOWORD(v31) = v31 & 0xFC1F | 0x180;
                goto LABEL_456;
              }
              if (v52)
              {
                __int16 v201 = v31 & 0xFC3F;
                __int16 v202 = 416;
              }
              else
              {
                if (v53)
                {
                  LOWORD(v31) = v31 & 0xFC1F | 0x1C0;
                  goto LABEL_456;
                }
                if (v320)
                {
                  LOWORD(v31) = v31 & 0xFC1F | 0x1E0;
                  goto LABEL_456;
                }
                if (v317)
                {
                  LOWORD(v31) = v31 & 0xFC1F | 0x200;
                  goto LABEL_456;
                }
                if (v313)
                {
                  __int16 v201 = v31 & 0xFC3F;
                  __int16 v202 = 544;
                }
                else if (v64)
                {
                  __int16 v201 = v31 & 0xFC1F;
                  __int16 v202 = 576;
                }
                else if (v35)
                {
                  __int16 v201 = v31 & 0xFC7F;
                  __int16 v202 = 608;
                }
                else if (v311)
                {
                  __int16 v201 = v31 & 0xFC1F;
                  __int16 v202 = 640;
                }
                else if (v308)
                {
                  __int16 v201 = v31 & 0xFC3F;
                  __int16 v202 = 672;
                }
                else if (v305)
                {
                  __int16 v201 = v31 & 0xFC1F;
                  __int16 v202 = 704;
                }
                else if (v302)
                {
                  __int16 v201 = v31 & 0xFCFF;
                  __int16 v202 = 736;
                }
                else
                {
                  if (v67)
                  {
                    LOWORD(v31) = v31 & 0xFC1F | 0x300;
                    goto LABEL_456;
                  }
                  if (v296)
                  {
                    __int16 v201 = v31 & 0xFC3F;
                    __int16 v202 = 800;
                  }
                  else
                  {
                    if (!v299) {
                      goto LABEL_456;
                    }
                    __int16 v201 = v31 & 0xFC1F;
                    __int16 v202 = 832;
                  }
                }
              }
            }
          }
          LOWORD(v31) = v201 | v202;
        }
      }
    }
    else
    {
      uint64_t v69 = 0;
    }
LABEL_456:
    *(void *)uint64_t v2 = ((unint64_t)(unsigned __int16)v31 << 32) | (v69 << 48) | ((unint64_t)v65 << 16) | v66;
    return v2 + 8;
  }
  if (v3)
  {
    int v20 = *((_DWORD *)this + 3);
    int v19 = *((_DWORD *)this + 4);
    int v21 = *((unsigned __int8 *)this + 20);
    int v23 = *((_DWORD *)this + 6);
    int v22 = *((_DWORD *)this + 7);
    int v24 = *((unsigned __int8 *)this + 32);
    int v26 = *((_DWORD *)this + 9);
    int v25 = *((_DWORD *)this + 10);
    int v27 = *((_DWORD *)this + 11);
    unsigned int v28 = *((unsigned __int8 *)this + 48);
    if (v22)
    {
      BOOL v29 = 0;
    }
    else
    {
      BOOL v29 = v23 == 8 && v20 == 2;
      if (v21) {
        BOOL v29 = 0;
      }
    }
    unsigned int v92 = *(_DWORD *)this;
    int v93 = *((unsigned __int8 *)this + 4);
    if (v27) {
      BOOL v94 = 0;
    }
    else {
      BOOL v94 = (v25 | v26) == 0;
    }
    unsigned int v95 = v19 - 1;
    int v96 = v28 & 0x3F;
    BOOL v97 = (v24 & 1) == 0 && v29;
    unsigned int v98 = 4;
    if (v97 && v94 && v96 == 0 && v95 <= 1)
    {
      if (v19 == 2) {
        int v102 = 12;
      }
      else {
        int v102 = 4;
      }
      unsigned int v98 = (8 * v93) & 0xF0 | ((*(_DWORD *)this & 0x7F) << 8) | v102;
    }
    BOOL v103 = ((v98 >> 3) & 0x1E) == v93 || v20 != 2;
    if ((v98 & 8) != 0) {
      int v104 = 2;
    }
    else {
      int v104 = 1;
    }
    if (v20 == 2
      && v104 == v19
      && v103
      && v92 == v98 >> 8
      && !(v22 | v25 | v27 | v26)
      && !(v96 | (v24 | v21) & 1)
      && v23 == 8)
    {
      *(_WORD *)a2 = v98;
      return a2 + 2;
    }
    uint64_t v105 = 0;
    if (v22) {
      BOOL v106 = 0;
    }
    else {
      BOOL v106 = v23 == 8;
    }
    int v107 = v106;
    int v321 = *((_DWORD *)this + 3);
    int v318 = v107;
    if (v20 == 2) {
      int v108 = v107;
    }
    else {
      int v108 = 0;
    }
    BOOL v109 = v25 == 0;
    BOOL v110 = v25 == 1;
    BOOL v111 = v25 == 2;
    if (v26) {
      BOOL v112 = 0;
    }
    else {
      BOOL v112 = v25 == 1;
    }
    if (v26) {
      BOOL v113 = 0;
    }
    else {
      BOOL v113 = v25 == 2;
    }
    BOOL v114 = v26 == 1 && v25 == 0;
    BOOL v115 = v26 == 1 && v25 == 1;
    BOOL v116 = v26 == 1 && v25 == 2;
    if (v26 != 2)
    {
      BOOL v109 = 0;
      BOOL v110 = 0;
      BOOL v111 = 0;
    }
    int v117 = v25 | v26;
    if (v27) {
      BOOL v118 = 0;
    }
    else {
      BOOL v118 = v114;
    }
    BOOL v314 = v118;
    if (v27) {
      BOOL v119 = 0;
    }
    else {
      BOOL v119 = v109;
    }
    if (v27) {
      BOOL v120 = 0;
    }
    else {
      BOOL v120 = v112;
    }
    BOOL v306 = v120;
    BOOL v309 = v119;
    if (v27) {
      BOOL v121 = 0;
    }
    else {
      BOOL v121 = v115;
    }
    if (v27) {
      BOOL v122 = 0;
    }
    else {
      BOOL v122 = v110;
    }
    BOOL v300 = v122;
    BOOL v303 = v121;
    if (v27) {
      BOOL v123 = 0;
    }
    else {
      BOOL v123 = v113;
    }
    if (v27) {
      BOOL v124 = 0;
    }
    else {
      BOOL v124 = v116;
    }
    BOOL v292 = v124;
    BOOL v294 = v123;
    if (v27) {
      BOOL v125 = 0;
    }
    else {
      BOOL v125 = v111;
    }
    BOOL v126 = v27 == 1 && v114;
    BOOL v127 = v27 == 1 && v109;
    BOOL v284 = v127;
    BOOL v286 = v126;
    BOOL v128 = v27 == 1 && v112;
    BOOL v129 = v27 == 1 && v115;
    BOOL v281 = v129;
    BOOL v282 = v128;
    BOOL v130 = v27 == 1 && v110;
    BOOL v131 = v27 == 1 && v113;
    BOOL v278 = v131;
    BOOL v280 = v130;
    BOOL v132 = v27 == 1 && v116;
    BOOL v133 = v27 == 1 && v111;
    BOOL v275 = v133;
    BOOL v276 = v132;
    if (v27 != 2)
    {
      BOOL v114 = 0;
      BOOL v109 = 0;
    }
    BOOL v273 = v109;
    BOOL v274 = v114;
    BOOL v134 = v27 == 2 && v112;
    BOOL v272 = v134;
    BOOL v135 = v27 == 2 && v115;
    BOOL v271 = v135;
    BOOL v136 = v27 == 2 && v110;
    BOOL v267 = v136;
    BOOL v137 = v27 == 2 && v113;
    BOOL v138 = v27 == 2 && v116;
    BOOL v268 = v137;
    BOOL v269 = v138;
    BOOL v139 = v27 == 2 && v111;
    BOOL v270 = v139;
    unsigned int v140 = *((_DWORD *)this + 1);
    unsigned __int8 v297 = *((unsigned char *)this + 8);
    if (v117) {
      BOOL v141 = 0;
    }
    else {
      BOOL v141 = v27 == 1;
    }
    BOOL v288 = v125;
    BOOL v290 = v141;
    if (v117) {
      BOOL v142 = 0;
    }
    else {
      BOOL v142 = v27 == 2;
    }
    BOOL v143 = v117 == 0;
    unsigned __int16 v144 = -32764;
    unsigned int v145 = 2;
    LOWORD(v146) = 0;
    if (v108 != 1) {
      goto LABEL_538;
    }
    int v147 = *((_DWORD *)this + 3);
    if (v95 > 1) {
      goto LABEL_539;
    }
    if (v27) {
      BOOL v148 = 0;
    }
    else {
      BOOL v148 = v143;
    }
    unsigned int v145 = HIWORD(v92) & 0xFE00 | (4 * (v140 & 1)) & 0x1F | (v140 >> 4) & 8 | (((v140 >> 5) & 3) << 6) | (32 * (v21 & 1)) | 2;
    unsigned int v146 = (v92 >> 1) & 0xC00 | (v92 >> 6) & 0x1E | v24 & 1 | ((v28 & 1) << 13) & 0x3FFF | (((v28 >> 1) & 1) << 14) & 0xFFE07FFF | (v28 >> 2 << 15);
    if (v19 == 2) {
      __int16 v149 = -32756;
    }
    else {
      __int16 v149 = -32764;
    }
    unsigned __int16 v144 = (8 * v140) & 0xF0 | ((_WORD)v92 << 8) | v149;
    uint64_t v105 = (v92 >> 13) & 0xFFF | (((v28 >> 3) & 1) << 13) & 0xFFFC3FFF | (((v28 >> 4) & 1) << 14) & 0xFFFC7FFF | (v28 >> 5 << 15);
    if (v148)
    {
      LOWORD(v146) = (v92 >> 1) & 0xC00 | (v92 >> 6) & 0x1E | v24 & 1 | ((v28 & 1) << 13) & 0x3C1F | (((v28 >> 1) & 1) << 14) & 0x7C1F | (v28 >> 2 << 15);
      goto LABEL_539;
    }
    if (v314)
    {
      LOWORD(v146) = (v92 >> 1) & 0xC00 | (v92 >> 6) & 0x1E | v24 & 1 | ((v28 & 1) << 13) & 0x3C1F | (((v28 >> 1) & 1) << 14) & 0x7C1F | (v28 >> 2 << 15) | 0x20;
      goto LABEL_539;
    }
    if (v309)
    {
      LOWORD(v146) = (v92 >> 1) & 0xC00 | (v92 >> 6) & 0x1E | v24 & 1 | ((v28 & 1) << 13) & 0x3C1F | (((v28 >> 1) & 1) << 14) & 0x7C1F | (v28 >> 2 << 15) | 0x40;
      goto LABEL_539;
    }
    if (v306)
    {
      LOWORD(v146) = (v92 >> 1) & 0xC00 | (v92 >> 6) & 0x1E | v24 & 1 | ((v28 & 1) << 13) & 0x3C1F | (((v28 >> 1) & 1) << 14) & 0x7C1F | (v28 >> 2 << 15) | 0x60;
      goto LABEL_539;
    }
    if (v303)
    {
      LOWORD(v146) = (v92 >> 1) & 0xC00 | (v92 >> 6) & 0x1E | v24 & 1 | ((v28 & 1) << 13) & 0x3C1F | (((v28 >> 1) & 1) << 14) & 0x7C1F | (v28 >> 2 << 15) | 0x80;
      goto LABEL_539;
    }
    if (v300)
    {
      LOWORD(v146) = (v92 >> 1) & 0xC00 | (v92 >> 6) & 0x1E | v24 & 1 | ((v28 & 1) << 13) & 0x3C1F | (((v28 >> 1) & 1) << 14) & 0x7C1F | (v28 >> 2 << 15) | 0xA0;
      goto LABEL_539;
    }
    if (v294)
    {
      LOWORD(v146) = (v92 >> 1) & 0xC00 | (v92 >> 6) & 0x1E | v24 & 1 | ((v28 & 1) << 13) & 0x3C1F | (((v28 >> 1) & 1) << 14) & 0x7C1F | (v28 >> 2 << 15) | 0xC0;
      goto LABEL_539;
    }
    if (v124)
    {
      LOWORD(v146) = (v92 >> 1) & 0xC00 | (v92 >> 6) & 0x1E | v24 & 1 | ((v28 & 1) << 13) & 0x3C1F | (((v28 >> 1) & 1) << 14) & 0x7C1F | (v28 >> 2 << 15) | 0xE0;
      goto LABEL_539;
    }
    if (v125)
    {
      LOWORD(v146) = (v92 >> 1) & 0xC00 | (v92 >> 6) & 0x1E | v24 & 1 | ((v28 & 1) << 13) & 0x3C1F | (((v28 >> 1) & 1) << 14) & 0x7C1F | (v28 >> 2 << 15) | 0x100;
      goto LABEL_539;
    }
    if (v290)
    {
      LOWORD(v146) = (v92 >> 1) & 0xC00 | (v92 >> 6) & 0x1E | v24 & 1 | ((v28 & 1) << 13) & 0x3C1F | (((v28 >> 1) & 1) << 14) & 0x7C1F | (v28 >> 2 << 15) | 0x120;
      goto LABEL_539;
    }
    if (v286)
    {
      __int16 v209 = (v92 >> 1) & 0xC00 | (v92 >> 6) & 0x1E | v24 & 1 | ((v28 & 1) << 13) & 0x3C1F | (((v28 >> 1) & 1) << 14) & 0x7C1F | (v28 >> 2 << 15);
      __int16 v210 = 320;
    }
    else if (v284)
    {
      __int16 v209 = (v92 >> 1) & 0xC00 | (v92 >> 6) & 0x1E | v24 & 1 | ((v28 & 1) << 13) & 0x3C7F | (((v28 >> 1) & 1) << 14) & 0x7C7F | (v28 >> 2 << 15);
      __int16 v210 = 352;
    }
    else
    {
      if (v282)
      {
        LOWORD(v146) = (v92 >> 1) & 0xC00 | (v92 >> 6) & 0x1E | v24 & 1 | ((v28 & 1) << 13) & 0x3C1F | (((v28 >> 1) & 1) << 14) & 0x7C1F | (v28 >> 2 << 15) | 0x180;
LABEL_538:
        int v147 = v321;
LABEL_539:
        unsigned int v211 = v19 - 1;
        unint64_t v212 = (v105 << 48) | ((unint64_t)(unsigned __int16)v146 << 32) | ((unint64_t)v145 << 16) | v144;
        *(void *)v335 = v212;
        if ((v145 & 3) == 2 && (v144 & 7) == 4)
        {
          BOOL v259 = v143;
          unsigned int v260 = v92;
          int v213 = v23;
          BOOL v214 = v142;
          int v215 = v108;
          unsigned int v261 = v28;
          int v262 = v26;
          unsigned int v216 = v140;
          int v217 = v25;
          int v218 = v213;
          int v263 = v19;
          int v265 = v22;
          int v219 = v27;
          AGXIotoInstruction_LDIMM_1::AGXIotoInstruction_LDIMM_1((AGXIotoInstruction_LDIMM_1 *)&v322, v335);
          int v147 = v321;
          if (v325 == v321)
          {
            int v220 = v218;
            unsigned int v140 = v216;
            int v108 = v215;
            BOOL v142 = v214;
            int v27 = v219;
            int v25 = v217;
            unsigned int v92 = v260;
            switch(v321)
            {
              case 0:
              case 2:
              case 6:
                BOOL v221 = v323 == v140;
                goto LABEL_551;
              case 1:
              case 3:
              case 5:
                BOOL v221 = (unsigned __int16)v323 == (unsigned __int16)v140;
                goto LABEL_551;
              case 4:
                BOOL v221 = v323 == v140;
                goto LABEL_551;
              case 7:
                BOOL v221 = ((v297 ^ v324) & 7) == 0 && v323 == v140;
LABEL_551:
                int v222 = v221;
                int v22 = v265;
                int v26 = v262;
                int v19 = v263;
                break;
              default:
                int v222 = 0;
                int v27 = v219;
                int v22 = v265;
                int v25 = v217;
                int v26 = v262;
                int v19 = v263;
                unsigned int v92 = v260;
                break;
            }
            unsigned int v28 = v261;
            int v23 = v220;
          }
          else
          {
            int v222 = 1;
            int v27 = v219;
            int v22 = v265;
            int v223 = v218;
            int v25 = v217;
            int v26 = v262;
            int v19 = v263;
            unsigned int v140 = v216;
            unsigned int v92 = v260;
            unsigned int v28 = v261;
            int v108 = v215;
            BOOL v142 = v214;
            int v23 = v223;
          }
          BOOL v143 = v259;
          if (v325 == v321
            && v322 == v92
            && v328 == v23
            && v222
            && v326 == v19
            && ((v21 ^ v327) & 1) == 0
            && v329 == v22
            && ((v24 ^ v330) & 1) == 0
            && v331 == v26
            && v332 == v25
            && v333 == v27
            && ((v28 ^ v334) & 0x3F) == 0)
          {
            *(void *)uint64_t v2 = v212;
            return v2 + 8;
          }
        }
        int v224 = v21 & 1;
        if (v318) {
          BOOL v226 = v147 == 3 && v224 == 0;
        }
        else {
          BOOL v226 = 0;
        }
        LOWORD(v227) = 0;
        if (v22) {
          BOOL v228 = 0;
        }
        else {
          BOOL v228 = v147 == 4;
        }
        int v229 = v228;
        BOOL v230 = (v21 & 1) == 0 && v147 == 5;
        if (v21) {
          int v231 = 0;
        }
        else {
          int v231 = v229;
        }
        __int16 v232 = -32764;
        if (v211 > 1)
        {
          unsigned int v234 = 3;
          LOWORD(v235) = 0;
          __int16 v236 = 0;
          goto LABEL_628;
        }
        int v233 = v108 | (v226 || v230);
        unsigned int v234 = 3;
        LOWORD(v235) = 0;
        __int16 v236 = 0;
        if (!(v233 | v231))
        {
LABEL_628:
          *(_WORD *)v335 = v232;
          *(_WORD *)&v335[2] = v234;
          *(_WORD *)&v335[4] = v227;
          *(_WORD *)&v335[6] = v235;
          __int16 v336 = v236;
          if ((~v234 & 3) != 0 || (v232 & 7) != 4) {
            return 0;
          }
          unsigned int v244 = v140;
          int v264 = v19;
          int v266 = v22;
          int v245 = v27;
          AGXIotoInstruction_LDIMM_2::AGXIotoInstruction_LDIMM_2((AGXIotoInstruction_LDIMM_2 *)&v322, v335);
          if (v325 == v321)
          {
            int v246 = v24;
            int v247 = v245;
            int v248 = v25;
            switch(v321)
            {
              case 0:
              case 2:
              case 6:
                BOOL v249 = v323 == v244;
                break;
              case 1:
              case 3:
              case 5:
                BOOL v249 = (unsigned __int16)v323 == (unsigned __int16)v244;
                break;
              case 4:
                BOOL v249 = v323 == v244;
                break;
              case 7:
                BOOL v249 = ((v297 ^ v324) & 7) == 0 && v323 == v244;
                break;
              default:
                int v250 = 0;
                goto LABEL_634;
            }
            int v250 = v249;
            int v251 = v21;
            int v252 = v266;
            int v253 = v264;
          }
          else
          {
            int v250 = 1;
            int v246 = v24;
LABEL_634:
            int v247 = v245;
            int v251 = v21;
            int v252 = v266;
            int v253 = v264;
            int v248 = v25;
          }
          if (v325 != v321
            || v322 != v92
            || v328 != v23
            || !v250
            || v326 != v253
            || ((v251 ^ v327) & 1) != 0
            || v329 != v252
            || ((v246 ^ v330) & 1) != 0
            || v331 != v26
            || v332 != v248
            || v333 != v247
            || ((v28 ^ v334) & 0x3F) != 0)
          {
            return 0;
          }
          *(void *)uint64_t v2 = *(void *)v335;
          *((_WORD *)v2 + 4) = v236;
          return v2 + 10;
        }
        BOOL v237 = v142;
        if (v27) {
          BOOL v238 = 0;
        }
        else {
          BOOL v238 = v143;
        }
        int v239 = HIWORD(v92) & 0xFE00;
        unsigned int v234 = v239 | 3;
        unsigned int v227 = (v92 >> 1) & 0xC00 | (v92 >> 6) & 0x1E | v24 & 1 | ((v28 & 1) << 13) & 0x3FFF | (((v28 >> 1) & 1) << 14) & 0xFFE07FFF | (v28 >> 2 << 15);
        unsigned int v235 = (v92 >> 13) & 0xFFF | (((v28 >> 3) & 1) << 13) & 0xFFFC3FFF | (((v28 >> 4) & 1) << 14) & 0xFFFC7FFF | (v28 >> 5 << 15);
        if (v19 == 2) {
          __int16 v240 = -32756;
        }
        else {
          __int16 v240 = -32764;
        }
        __int16 v232 = v240 | ((_WORD)v92 << 8);
        if (v238)
        {
          LOWORD(v227) = (v92 >> 1) & 0xC00 | (v92 >> 6) & 0x1E | v24 & 1 | ((v28 & 1) << 13) & 0x3C1F | (((v28 >> 1) & 1) << 14) & 0x7C1F | (v28 >> 2 << 15);
          goto LABEL_617;
        }
        if (v314)
        {
          LOWORD(v227) = (v92 >> 1) & 0xC00 | (v92 >> 6) & 0x1E | v24 & 1 | ((v28 & 1) << 13) & 0x3C1F | (((v28 >> 1) & 1) << 14) & 0x7C1F | (v28 >> 2 << 15) | 0x20;
          goto LABEL_617;
        }
        if (v309)
        {
          LOWORD(v227) = (v92 >> 1) & 0xC00 | (v92 >> 6) & 0x1E | v24 & 1 | ((v28 & 1) << 13) & 0x3C1F | (((v28 >> 1) & 1) << 14) & 0x7C1F | (v28 >> 2 << 15) | 0x40;
          goto LABEL_617;
        }
        if (v306)
        {
          LOWORD(v227) = (v92 >> 1) & 0xC00 | (v92 >> 6) & 0x1E | v24 & 1 | ((v28 & 1) << 13) & 0x3C1F | (((v28 >> 1) & 1) << 14) & 0x7C1F | (v28 >> 2 << 15) | 0x60;
          goto LABEL_617;
        }
        if (v303)
        {
          LOWORD(v227) = (v92 >> 1) & 0xC00 | (v92 >> 6) & 0x1E | v24 & 1 | ((v28 & 1) << 13) & 0x3C1F | (((v28 >> 1) & 1) << 14) & 0x7C1F | (v28 >> 2 << 15) | 0x80;
          goto LABEL_617;
        }
        if (v300)
        {
          __int16 v241 = (v92 >> 1) & 0xC00 | (v92 >> 6) & 0x1E | v24 & 1 | ((v28 & 1) << 13) & 0x3C3F | (((v28 >> 1) & 1) << 14) & 0x7C3F | (v28 >> 2 << 15);
          __int16 v242 = 160;
LABEL_610:
          LOWORD(v227) = v241 | v242;
          goto LABEL_617;
        }
        if (v294)
        {
          LOWORD(v227) = (v92 >> 1) & 0xC00 | (v92 >> 6) & 0x1E | v24 & 1 | ((v28 & 1) << 13) & 0x3C1F | (((v28 >> 1) & 1) << 14) & 0x7C1F | (v28 >> 2 << 15) | 0xC0;
          goto LABEL_617;
        }
        if (v292)
        {
          LOWORD(v227) = (v92 >> 1) & 0xC00 | (v92 >> 6) & 0x1E | v24 & 1 | ((v28 & 1) << 13) & 0x3C1F | (((v28 >> 1) & 1) << 14) & 0x7C1F | (v28 >> 2 << 15) | 0xE0;
          goto LABEL_617;
        }
        if (v288)
        {
          LOWORD(v227) = (v92 >> 1) & 0xC00 | (v92 >> 6) & 0x1E | v24 & 1 | ((v28 & 1) << 13) & 0x3C1F | (((v28 >> 1) & 1) << 14) & 0x7C1F | (v28 >> 2 << 15) | 0x100;
          goto LABEL_617;
        }
        if (v290)
        {
          __int16 v241 = (v92 >> 1) & 0xC00 | (v92 >> 6) & 0x1E | v24 & 1 | ((v28 & 1) << 13) & 0x3C3F | (((v28 >> 1) & 1) << 14) & 0x7C3F | (v28 >> 2 << 15);
          __int16 v242 = 288;
          goto LABEL_610;
        }
        if (v286)
        {
          __int16 v257 = (v92 >> 1) & 0xC00 | (v92 >> 6) & 0x1E | v24 & 1 | ((v28 & 1) << 13) & 0x3C1F | (((v28 >> 1) & 1) << 14) & 0x7C1F | (v28 >> 2 << 15);
          __int16 v258 = 320;
        }
        else
        {
          if (!v284)
          {
            if (v282)
            {
              LOWORD(v227) = (v92 >> 1) & 0xC00 | (v92 >> 6) & 0x1E | v24 & 1 | ((v28 & 1) << 13) & 0x3C1F | (((v28 >> 1) & 1) << 14) & 0x7C1F | (v28 >> 2 << 15) | 0x180;
            }
            else
            {
              if (v281)
              {
                __int16 v257 = (v92 >> 1) & 0xC00 | (v92 >> 6) & 0x1E | v24 & 1 | ((v28 & 1) << 13) & 0x3C3F | (((v28 >> 1) & 1) << 14) & 0x7C3F | (v28 >> 2 << 15);
                __int16 v258 = 416;
                goto LABEL_692;
              }
              if (v280)
              {
                LOWORD(v227) = (v92 >> 1) & 0xC00 | (v92 >> 6) & 0x1E | v24 & 1 | ((v28 & 1) << 13) & 0x3C1F | (((v28 >> 1) & 1) << 14) & 0x7C1F | (v28 >> 2 << 15) | 0x1C0;
              }
              else if (v278)
              {
                LOWORD(v227) = (v92 >> 1) & 0xC00 | (v92 >> 6) & 0x1E | v24 & 1 | ((v28 & 1) << 13) & 0x3C1F | (((v28 >> 1) & 1) << 14) & 0x7C1F | (v28 >> 2 << 15) | 0x1E0;
              }
              else if (v276)
              {
                LOWORD(v227) = (v92 >> 1) & 0xC00 | (v92 >> 6) & 0x1E | v24 & 1 | ((v28 & 1) << 13) & 0x3C1F | (((v28 >> 1) & 1) << 14) & 0x7C1F | (v28 >> 2 << 15) | 0x200;
              }
              else
              {
                if (v275)
                {
                  __int16 v257 = (v92 >> 1) & 0xC00 | (v92 >> 6) & 0x1E | v24 & 1 | ((v28 & 1) << 13) & 0x3C3F | (((v28 >> 1) & 1) << 14) & 0x7C3F | (v28 >> 2 << 15);
                  __int16 v258 = 544;
                  goto LABEL_692;
                }
                if (v237)
                {
                  __int16 v257 = (v92 >> 1) & 0xC00 | (v92 >> 6) & 0x1E | v24 & 1 | ((v28 & 1) << 13) & 0x3C1F | (((v28 >> 1) & 1) << 14) & 0x7C1F | (v28 >> 2 << 15);
                  __int16 v258 = 576;
                  goto LABEL_692;
                }
                if (v274)
                {
                  __int16 v257 = (v92 >> 1) & 0xC00 | (v92 >> 6) & 0x1E | v24 & 1 | ((v28 & 1) << 13) & 0x3C7F | (((v28 >> 1) & 1) << 14) & 0x7C7F | (v28 >> 2 << 15);
                  __int16 v258 = 608;
                  goto LABEL_692;
                }
                if (v273)
                {
                  __int16 v257 = (v92 >> 1) & 0xC00 | (v92 >> 6) & 0x1E | v24 & 1 | ((v28 & 1) << 13) & 0x3C1F | (((v28 >> 1) & 1) << 14) & 0x7C1F | (v28 >> 2 << 15);
                  __int16 v258 = 640;
                  goto LABEL_692;
                }
                if (v272)
                {
                  __int16 v257 = (v92 >> 1) & 0xC00 | (v92 >> 6) & 0x1E | v24 & 1 | ((v28 & 1) << 13) & 0x3C3F | (((v28 >> 1) & 1) << 14) & 0x7C3F | (v28 >> 2 << 15);
                  __int16 v258 = 672;
                  goto LABEL_692;
                }
                if (v271)
                {
                  __int16 v257 = (v92 >> 1) & 0xC00 | (v92 >> 6) & 0x1E | v24 & 1 | ((v28 & 1) << 13) & 0x3C1F | (((v28 >> 1) & 1) << 14) & 0x7C1F | (v28 >> 2 << 15);
                  __int16 v258 = 704;
                  goto LABEL_692;
                }
                if (v267)
                {
                  __int16 v257 = (v92 >> 1) & 0xC00 | (v92 >> 6) & 0x1E | v24 & 1 | ((v28 & 1) << 13) & 0x3CFF | (((v28 >> 1) & 1) << 14) & 0x7CFF | (v28 >> 2 << 15);
                  __int16 v258 = 736;
                  goto LABEL_692;
                }
                if (v268)
                {
                  LOWORD(v227) = (v92 >> 1) & 0xC00 | (v92 >> 6) & 0x1E | v24 & 1 | ((v28 & 1) << 13) & 0x3C1F | (((v28 >> 1) & 1) << 14) & 0x7C1F | (v28 >> 2 << 15) | 0x300;
                }
                else
                {
                  if (v269)
                  {
                    __int16 v257 = (v92 >> 1) & 0xC00 | (v92 >> 6) & 0x1E | v24 & 1 | ((v28 & 1) << 13) & 0x3C3F | (((v28 >> 1) & 1) << 14) & 0x7C3F | (v28 >> 2 << 15);
                    __int16 v258 = 800;
                    goto LABEL_692;
                  }
                  if (v270)
                  {
                    __int16 v241 = (v92 >> 1) & 0xC00 | (v92 >> 6) & 0x1E | v24 & 1 | ((v28 & 1) << 13) & 0x3C1F | (((v28 >> 1) & 1) << 14) & 0x7C1F | (v28 >> 2 << 15);
                    __int16 v242 = 832;
                    goto LABEL_610;
                  }
                }
              }
            }
LABEL_617:
            if (v233)
            {
              if (v108)
              {
                __int16 v236 = 0;
                v232 |= (8 * v140) & 0xF0;
                v234 |= (v140 >> 4) & 8 | (32 * v224) & 0xFFFFFF3F | (4 * (v140 & 1)) & 0x3F | (((v140 >> 5) & 3) << 6);
                goto LABEL_628;
              }
              if (v226 || v230)
              {
                if (v226)
                {
                  v232 |= (8 * v140) & 0xF0;
                  v234 |= (v140 >> 4) & 0x18 | (4 * (v140 & 1)) & 0x3F | (((v140 >> 5) & 3) << 6);
                  __int16 v236 = 64;
                  goto LABEL_628;
                }
                if (!v230)
                {
                  __int16 v236 = 64;
                  goto LABEL_628;
                }
                v232 |= (8 * v140) & 0xF0;
                unsigned int v234 = ((v140 & 0x80 | (v140 >> 8 << 8)) >> 4) & 0x18 | (4 * (v140 & 1)) & 0x3F | (((v140 >> 5) & 3) << 6) | v239 | 0x23;
                int v243 = (v140 >> 8) & 0x1E | ((v22 & 1) << 10);
                __int16 v236 = v243 | 0x40;
                if (v23)
                {
                  switch(v23)
                  {
                    case 1:
                      __int16 v236 = v243 | 0x2040;
                      goto LABEL_628;
                    case 2:
                      __int16 v236 = v243 | 0x4040;
                      goto LABEL_628;
                    case 3:
                      __int16 v236 = v243 | 0x6040;
                      goto LABEL_628;
                    case 4:
                      __int16 v236 = v243 | 0x8040;
                      goto LABEL_628;
                    case 5:
                      __int16 v236 = v243 | 0xA040;
                      goto LABEL_628;
                  }
                  __int16 v255 = -8128;
                  goto LABEL_678;
                }
                goto LABEL_628;
              }
            }
            else if (v231)
            {
              v232 |= (8 * v140) & 0xF0;
              v234 |= (v140 >> 4) & 0x18 | (4 * (v140 & 1)) & 0x3F | (v140 >> 11) & 0x20 | (((v140 >> 5) & 3) << 6);
              int v243 = (v140 >> 8) & 0x1E | (v140 >> 9) & 0x40 | (v140 >> 3) & 0xC00;
              __int16 v236 = v243 | 0x20;
              switch(v23)
              {
                case 0:
                  goto LABEL_628;
                case 1:
                  __int16 v236 = v243 | 0x2020;
                  goto LABEL_628;
                case 2:
                  __int16 v236 = v243 | 0x4020;
                  goto LABEL_628;
                case 3:
                  __int16 v236 = v243 | 0x6020;
                  goto LABEL_628;
                case 4:
                  __int16 v236 = v243 | 0x8020;
                  goto LABEL_628;
                case 5:
                  __int16 v236 = v243 | 0xA020;
                  goto LABEL_628;
              }
              __int16 v255 = -8160;
LABEL_678:
              __int16 v256 = v243 | v255;
              if (v23 == 8) {
                __int16 v236 = v256;
              }
              goto LABEL_628;
            }
            __int16 v236 = 0;
            goto LABEL_628;
          }
          __int16 v257 = (v92 >> 1) & 0xC00 | (v92 >> 6) & 0x1E | v24 & 1 | ((v28 & 1) << 13) & 0x3C7F | (((v28 >> 1) & 1) << 14) & 0x7C7F | (v28 >> 2 << 15);
          __int16 v258 = 352;
        }
LABEL_692:
        LOWORD(v227) = v257 | v258;
        goto LABEL_617;
      }
      if (v281)
      {
        __int16 v209 = (v92 >> 1) & 0xC00 | (v92 >> 6) & 0x1E | v24 & 1 | ((v28 & 1) << 13) & 0x3C3F | (((v28 >> 1) & 1) << 14) & 0x7C3F | (v28 >> 2 << 15);
        __int16 v210 = 416;
      }
      else
      {
        if (v280)
        {
          LOWORD(v146) = (v92 >> 1) & 0xC00 | (v92 >> 6) & 0x1E | v24 & 1 | ((v28 & 1) << 13) & 0x3C1F | (((v28 >> 1) & 1) << 14) & 0x7C1F | (v28 >> 2 << 15) | 0x1C0;
          goto LABEL_538;
        }
        if (v278)
        {
          LOWORD(v146) = (v92 >> 1) & 0xC00 | (v92 >> 6) & 0x1E | v24 & 1 | ((v28 & 1) << 13) & 0x3C1F | (((v28 >> 1) & 1) << 14) & 0x7C1F | (v28 >> 2 << 15) | 0x1E0;
          goto LABEL_538;
        }
        if (v276)
        {
          LOWORD(v146) = (v92 >> 1) & 0xC00 | (v92 >> 6) & 0x1E | v24 & 1 | ((v28 & 1) << 13) & 0x3C1F | (((v28 >> 1) & 1) << 14) & 0x7C1F | (v28 >> 2 << 15) | 0x200;
          goto LABEL_538;
        }
        if (v275)
        {
          __int16 v209 = (v92 >> 1) & 0xC00 | (v92 >> 6) & 0x1E | v24 & 1 | ((v28 & 1) << 13) & 0x3C3F | (((v28 >> 1) & 1) << 14) & 0x7C3F | (v28 >> 2 << 15);
          __int16 v210 = 544;
        }
        else if (v142)
        {
          __int16 v209 = (v92 >> 1) & 0xC00 | (v92 >> 6) & 0x1E | v24 & 1 | ((v28 & 1) << 13) & 0x3C1F | (((v28 >> 1) & 1) << 14) & 0x7C1F | (v28 >> 2 << 15);
          __int16 v210 = 576;
        }
        else if (v114)
        {
          __int16 v209 = (v92 >> 1) & 0xC00 | (v92 >> 6) & 0x1E | v24 & 1 | ((v28 & 1) << 13) & 0x3C7F | (((v28 >> 1) & 1) << 14) & 0x7C7F | (v28 >> 2 << 15);
          __int16 v210 = 608;
        }
        else if (v273)
        {
          __int16 v209 = (v92 >> 1) & 0xC00 | (v92 >> 6) & 0x1E | v24 & 1 | ((v28 & 1) << 13) & 0x3C1F | (((v28 >> 1) & 1) << 14) & 0x7C1F | (v28 >> 2 << 15);
          __int16 v210 = 640;
        }
        else if (v272)
        {
          __int16 v209 = (v92 >> 1) & 0xC00 | (v92 >> 6) & 0x1E | v24 & 1 | ((v28 & 1) << 13) & 0x3C3F | (((v28 >> 1) & 1) << 14) & 0x7C3F | (v28 >> 2 << 15);
          __int16 v210 = 672;
        }
        else if (v271)
        {
          __int16 v209 = (v92 >> 1) & 0xC00 | (v92 >> 6) & 0x1E | v24 & 1 | ((v28 & 1) << 13) & 0x3C1F | (((v28 >> 1) & 1) << 14) & 0x7C1F | (v28 >> 2 << 15);
          __int16 v210 = 704;
        }
        else if (v267)
        {
          __int16 v209 = (v92 >> 1) & 0xC00 | (v92 >> 6) & 0x1E | v24 & 1 | ((v28 & 1) << 13) & 0x3CFF | (((v28 >> 1) & 1) << 14) & 0x7CFF | (v28 >> 2 << 15);
          __int16 v210 = 736;
        }
        else
        {
          if (v268)
          {
            LOWORD(v146) = (v92 >> 1) & 0xC00 | (v92 >> 6) & 0x1E | v24 & 1 | ((v28 & 1) << 13) & 0x3C1F | (((v28 >> 1) & 1) << 14) & 0x7C1F | (v28 >> 2 << 15) | 0x300;
            goto LABEL_538;
          }
          if (v269)
          {
            __int16 v209 = (v92 >> 1) & 0xC00 | (v92 >> 6) & 0x1E | v24 & 1 | ((v28 & 1) << 13) & 0x3C3F | (((v28 >> 1) & 1) << 14) & 0x7C3F | (v28 >> 2 << 15);
            __int16 v210 = 800;
          }
          else
          {
            if (!v270) {
              goto LABEL_538;
            }
            __int16 v209 = (v92 >> 1) & 0xC00 | (v92 >> 6) & 0x1E | v24 & 1 | ((v28 & 1) << 13) & 0x3C1F | (((v28 >> 1) & 1) << 14) & 0x7C1F | (v28 >> 2 << 15);
            __int16 v210 = 832;
          }
        }
      }
    }
    LOWORD(v146) = v209 | v210;
    goto LABEL_538;
  }
  if (*((_DWORD *)this + 7))
  {
    BOOL v4 = 0;
  }
  else
  {
    BOOL v85 = *((_DWORD *)this + 6) == 8 && *((_DWORD *)this + 3) == 2;
    BOOL v4 = (*((unsigned char *)this + 20) & 1) == 0 && v85;
  }
  BOOL v86 = *(void *)((char *)this + 36) != 0;
  if (*((_DWORD *)this + 11)) {
    BOOL v86 = 1;
  }
  __int16 v87 = 4;
  if (v4 && (*((unsigned char *)this + 32) & 1) == 0 && !v86 && (*((unsigned char *)this + 48) & 0x3F) == 0)
  {
    int v88 = *((_DWORD *)this + 4);
    if ((v88 - 1) <= 1)
    {
      if (v88 == 2) {
        __int16 v89 = 12;
      }
      else {
        __int16 v89 = 4;
      }
      __int16 v87 = (8 * *((unsigned __int8 *)this + 4)) & 0xF0 | ((*(_DWORD *)this & 0x7F) << 8) | v89;
    }
  }
  *(_WORD *)a2 = v87;
  return a2 + 2;
}

unsigned __int8 *AGXIotoInstruction_NOP_0::emit(AGXIotoInstruction_NOP_0 *this, unsigned __int8 *a2)
{
  int v3 = *((_DWORD *)this + 1);
  int v2 = *((_DWORD *)this + 2);
  BOOL v4 = v2 == 0;
  BOOL v5 = v2 == 1;
  BOOL v6 = v2 == 2;
  int v7 = *((_DWORD *)this + 3);
  if (v3) {
    BOOL v8 = 0;
  }
  else {
    BOOL v8 = v2 == 1;
  }
  if (v3) {
    BOOL v9 = 0;
  }
  else {
    BOOL v9 = v2 == 2;
  }
  BOOL v10 = v3 == 1 && v2 == 0;
  BOOL v11 = v3 == 1 && v2 == 1;
  BOOL v12 = v3 == 1 && v2 == 2;
  if (v3 != 2)
  {
    BOOL v4 = 0;
    BOOL v5 = 0;
    BOOL v6 = 0;
  }
  int v13 = v2 | v3;
  if (v7) {
    BOOL v14 = 0;
  }
  else {
    BOOL v14 = v10;
  }
  BOOL v46 = v14;
  if (v7) {
    BOOL v15 = 0;
  }
  else {
    BOOL v15 = v4;
  }
  BOOL v45 = v15;
  if (v7) {
    BOOL v16 = 0;
  }
  else {
    BOOL v16 = v8;
  }
  if (v7) {
    BOOL v17 = 0;
  }
  else {
    BOOL v17 = v11;
  }
  if (v7) {
    BOOL v18 = 0;
  }
  else {
    BOOL v18 = v5;
  }
  if (v7) {
    BOOL v19 = 0;
  }
  else {
    BOOL v19 = v9;
  }
  if (v7) {
    BOOL v20 = 0;
  }
  else {
    BOOL v20 = v12;
  }
  if (v7) {
    BOOL v21 = 0;
  }
  else {
    BOOL v21 = v6;
  }
  BOOL v22 = v7 == 1 && v10;
  BOOL v23 = v7 == 1 && v4;
  BOOL v24 = v7 == 1 && v8;
  BOOL v25 = v7 == 1 && v11;
  BOOL v26 = v7 == 1 && v5;
  BOOL v27 = v7 == 1 && v9;
  BOOL v28 = v7 == 1 && v12;
  BOOL v29 = v7 == 1 && v6;
  BOOL v30 = v7 == 2 && v10;
  BOOL v31 = v7 == 2 && v4;
  BOOL v32 = v7 == 2 && v8;
  BOOL v33 = v7 == 2 && v11;
  BOOL v34 = v7 == 2 && v5;
  BOOL v35 = v7 == 2 && v9;
  if (v7 != 2)
  {
    BOOL v12 = 0;
    BOOL v6 = 0;
  }
  BOOL v36 = v13 == 0;
  BOOL v37 = v13 == 0;
  BOOL v38 = v36 && v7 == 1;
  BOOL v39 = v36 && v7 == 2;
  if ((*(unsigned char *)this & 3) != 0)
  {
    LOWORD(v40) = 6;
LABEL_115:
    BOOL v43 = a2;
    goto LABEL_116;
  }
  if (v7) {
    BOOL v37 = 0;
  }
  unsigned int v41 = *((unsigned __int8 *)this + 16);
  unsigned int v40 = ((((v41 >> 1) & 1) << 11) | ((v41 & 1) << 10)) & 0xFFFC0FFF | (((v41 >> 2) & 1) << 12) & 0xFFFC1FFF | (((v41 >> 3) & 1) << 13) & 0xFFFC3FFF | (((v41 >> 4) & 1) << 14) & 0xFFFC7FFF | (v41 >> 5 << 15) | 6;
  if (v37)
  {
    LOWORD(v40) = v40 & 0xFC1F;
    goto LABEL_115;
  }
  if (v46)
  {
    LOWORD(v40) = v40 & 0xFC1F | 0x20;
    goto LABEL_115;
  }
  if (v45)
  {
    LOWORD(v40) = v40 & 0xFC1F | 0x40;
    goto LABEL_115;
  }
  if (v16)
  {
    LOWORD(v40) = v40 & 0xFC1F | 0x60;
    goto LABEL_115;
  }
  if (v17)
  {
    LOWORD(v40) = v40 & 0xFC1F | 0x80;
    goto LABEL_115;
  }
  if (v18)
  {
    char v42 = 5;
LABEL_108:
    LOWORD(v40) = v40 & 0xFC1F | (32 * (v42 & 0x1F));
    goto LABEL_115;
  }
  if (v19)
  {
    LOWORD(v40) = v40 & 0xFC1F | 0xC0;
    goto LABEL_115;
  }
  if (v20)
  {
    LOWORD(v40) = v40 & 0xFC1F | 0xE0;
    goto LABEL_115;
  }
  if (v21)
  {
    LOWORD(v40) = v40 & 0xFC1F | 0x100;
    goto LABEL_115;
  }
  if (v38)
  {
    char v42 = 9;
    goto LABEL_108;
  }
  if (v22)
  {
    char v42 = 10;
    goto LABEL_108;
  }
  if (v23)
  {
    char v42 = 11;
    goto LABEL_108;
  }
  if (v24)
  {
    LOWORD(v40) = v40 & 0xFC1F | 0x180;
    goto LABEL_115;
  }
  if (v25)
  {
    char v42 = 13;
    goto LABEL_108;
  }
  if (v26)
  {
    LOWORD(v40) = v40 & 0xFC1F | 0x1C0;
    goto LABEL_115;
  }
  if (v27)
  {
    LOWORD(v40) = v40 & 0xFC1F | 0x1E0;
    goto LABEL_115;
  }
  if (v28)
  {
    LOWORD(v40) = v40 & 0xFC1F | 0x200;
    goto LABEL_115;
  }
  if (v29)
  {
    char v42 = 17;
    goto LABEL_108;
  }
  if (v39)
  {
    char v42 = 18;
    goto LABEL_108;
  }
  if (v30)
  {
    char v42 = 19;
    goto LABEL_108;
  }
  if (v31)
  {
    char v42 = 20;
    goto LABEL_108;
  }
  if (v32)
  {
    char v42 = 21;
    goto LABEL_108;
  }
  if (v33)
  {
    char v42 = 22;
    goto LABEL_108;
  }
  if (v34)
  {
    char v42 = 23;
    goto LABEL_108;
  }
  if (v35)
  {
    LOWORD(v40) = v40 & 0xFC1F | 0x300;
    goto LABEL_115;
  }
  if (v12)
  {
    char v42 = 25;
    goto LABEL_108;
  }
  BOOL v43 = a2;
  if (v6) {
    LOWORD(v40) = v40 & 0xFC1F | 0x340;
  }
LABEL_116:
  *(_WORD *)BOOL v43 = v40;
  return v43 + 2;
}

unsigned __int8 *AGXIotoInstruction_RLD_1::emit(AGXIotoInstruction_RLD_1 *this, unsigned __int8 *a2)
{
  char v3 = *((unsigned char *)this + 20);
  int v4 = *((_DWORD *)this + 6);
  int v6 = *((_DWORD *)this + 3);
  int v5 = *((_DWORD *)this + 4);
  unsigned int v222 = v5 - 1;
  if (v3)
  {
    uint64_t v219 = 0;
    uint64_t v220 = 0;
    BOOL v224 = 0;
    BOOL v225 = 0;
    BOOL v221 = 0;
    BOOL v13 = v4 == 8;
  }
  else
  {
    if (v4) {
      BOOL v7 = 0;
    }
    else {
      BOOL v7 = v6 == 4;
    }
    BOOL v8 = v4 == 1 && v6 == 4;
    BOOL v9 = v4 == 2 && v6 == 4;
    BOOL v10 = v4 == 3 && v6 == 4;
    BOOL v11 = v4 == 4 && v6 == 4;
    BOOL v12 = v4 == 5 && v6 == 4;
    BOOL v13 = v4 == 8;
    BOOL v14 = v4 == 8 && v6 == 4;
    BOOL v15 = v222 < 2 && v7;
    BOOL v225 = v15;
    BOOL v16 = v222 < 2 && v8;
    BOOL v224 = v16;
    BOOL v17 = v222 < 2 && v9;
    BOOL v221 = v17;
    BOOL v18 = v222 < 2 && v10;
    HIDWORD(v220) = v18;
    BOOL v19 = v222 < 2 && v11;
    LODWORD(v220) = v19;
    BOOL v20 = v222 < 2 && v12;
    HIDWORD(v219) = v20;
    if (v222 >= 2) {
      BOOL v14 = 0;
    }
    LODWORD(v219) = v14;
  }
  unsigned int v21 = *((_DWORD *)this + 1);
  int v22 = *((unsigned char *)this + 8) & 7;
  if (v22 | v21) {
    BOOL v23 = 0;
  }
  else {
    BOOL v23 = v5 == 1;
  }
  int v24 = v23;
  int v218 = v24;
  if ((*((unsigned char *)this + 8) & 7) != 0)
  {
    uint64_t v215 = 0;
    uint64_t v216 = 0;
    BOOL v217 = 0;
  }
  else
  {
    BOOL v25 = v21 == 14;
    if (v5 != 1) {
      BOOL v25 = 0;
    }
    BOOL v217 = v25;
    BOOL v26 = v5 == 1 && v21 == 7;
    HIDWORD(v216) = v26;
    BOOL v27 = v5 == 1 && v21 == 8;
    LODWORD(v216) = v27;
    BOOL v28 = v5 == 1 && v21 == 2;
    HIDWORD(v215) = v28;
    BOOL v29 = v5 == 1 && v21 == 6;
    LODWORD(v215) = v29;
  }
  int v226 = *((unsigned char *)this + 28) & 1;
  BOOL v30 = v22 == 0;
  BOOL v31 = v21 == 1 && v5 == 1;
  if (!v31) {
    BOOL v30 = 0;
  }
  BOOL v214 = v30;
  BOOL v32 = v31 && v22 == 1;
  BOOL v213 = v32;
  BOOL v33 = v31 && v22 == 2;
  BOOL v212 = v33;
  BOOL v34 = v31 && v22 == 3;
  BOOL v211 = v34;
  BOOL v35 = v31 && v22 == 4;
  BOOL v210 = v35;
  BOOL v36 = v31 && v22 == 5;
  BOOL v209 = v36;
  BOOL v37 = v31 && v22 == 6;
  BOOL v208 = v37;
  BOOL v38 = v31 && v22 == 7;
  BOOL v207 = v38;
  if ((*((unsigned char *)this + 8) & 7) != 0)
  {
    unint64_t v198 = 0;
    uint64_t v199 = 0;
    BOOL v205 = 0;
    uint64_t v203 = 0;
    uint64_t v204 = 0;
    uint64_t v196 = 0;
    uint64_t v197 = 0;
    BOOL v194 = 0;
    BOOL v195 = 0;
    BOOL v192 = 0;
    BOOL v193 = 0;
    uint64_t v190 = 0;
    uint64_t v191 = 0;
    BOOL v201 = 0;
    BOOL v188 = 0;
    BOOL v184 = 0;
    BOOL v185 = 0;
    BOOL v182 = 0;
    BOOL v183 = 0;
    uint64_t v177 = 0;
    uint64_t v178 = 0;
    BOOL v206 = 0;
    unint64_t v175 = 0;
    uint64_t v176 = 0;
    uint64_t v179 = 0;
    uint64_t v180 = 0;
    BOOL v39 = 0;
    BOOL v40 = 0;
    BOOL v41 = 0;
    BOOL v42 = 0;
    BOOL v43 = 0;
    BOOL v44 = 0;
    BOOL v45 = 0;
    BOOL v181 = 0;
    uint64_t v200 = 0;
    BOOL v202 = 0;
    BOOL v186 = 0;
    BOOL v187 = 0;
    unint64_t v189 = 0;
  }
  else
  {
    BOOL v46 = v21 == 0;
    BOOL v47 = v21 == 26;
    BOOL v48 = v21 == 39;
    BOOL v49 = v21 == 40;
    BOOL v50 = v21 == 63;
    if (v5 != 2) {
      BOOL v47 = 0;
    }
    HIDWORD(v190) = v47;
    BOOL v51 = v5 == 2 && v21 == 27;
    HIDWORD(v196) = v51;
    BOOL v52 = v5 == 2 && v21 == 28;
    if (v5 != 2) {
      BOOL v46 = 0;
    }
    HIDWORD(v191) = v52;
    BOOL v192 = v46;
    BOOL v53 = v5 == 2 && v21 == 23;
    LODWORD(v197) = v53;
    BOOL v54 = v5 == 2 && v21 == 24;
    BOOL v194 = v54;
    BOOL v55 = v5 == 2 && v21 == 25;
    HIDWORD(v197) = v55;
    BOOL v56 = v5 == 2 && v21 == 3;
    HIDWORD(v199) = v56;
    BOOL v57 = v5 == 2 && v21 == 52;
    BOOL v201 = v57;
    BOOL v58 = v5 == 2 && v21 == 46;
    LODWORD(v203) = v58;
    BOOL v59 = v5 == 2 && v21 == 47;
    LODWORD(v200) = v59;
    BOOL v60 = v5 == 2 && v21 == 48;
    HIDWORD(v203) = v60;
    BOOL v61 = v5 == 2 && v21 == 49;
    HIDWORD(v200) = v61;
    BOOL v62 = v5 == 2 && v21 == 50;
    LODWORD(v204) = v62;
    BOOL v63 = v5 == 2 && v21 == 51;
    BOOL v202 = v63;
    BOOL v64 = v5 == 2 && v21 == 62;
    HIDWORD(v204) = v64;
    BOOL v65 = v5 == 2 && v21 == 64;
    BOOL v205 = v65;
    BOOL v66 = v21 == 15;
    if (v5 != 1) {
      BOOL v66 = 0;
    }
    BOOL v206 = v66;
    BOOL v67 = v5 == 1 && v21 == 16;
    BOOL v68 = v21 == 33;
    if (v5 != 1) {
      BOOL v68 = 0;
    }
    LODWORD(v177) = v68;
    BOOL v69 = v21 == 34;
    if (v5 != 1) {
      BOOL v69 = 0;
    }
    unint64_t v175 = __PAIR64__(v69, v67);
    BOOL v70 = v5 == 1 && v21 == 35;
    BOOL v71 = v21 == 36;
    if (v5 != 1) {
      BOOL v71 = 0;
    }
    LODWORD(v176) = v71;
    BOOL v72 = v21 == 17;
    if (v5 != 1) {
      BOOL v72 = 0;
    }
    HIDWORD(v177) = v70;
    LODWORD(v178) = v72;
    BOOL v73 = v21 == 18;
    if (v5 != 1) {
      BOOL v73 = 0;
    }
    HIDWORD(v176) = v73;
    BOOL v74 = v5 == 1 && v21 == 19;
    BOOL v75 = v21 == 9;
    if (v5 != 1) {
      BOOL v75 = 0;
    }
    HIDWORD(v178) = v74;
    LODWORD(v179) = v75;
    BOOL v76 = v5 == 1 && v21 == 10;
    BOOL v39 = v5 == 1 && v21 == 11;
    BOOL v77 = v21 == 13;
    if (v5 != 1) {
      BOOL v77 = 0;
    }
    BOOL v182 = v76;
    BOOL v183 = v77;
    BOOL v40 = v5 == 1 && v21 == 20;
    BOOL v78 = v21 == 21;
    if (v5 != 1) {
      BOOL v78 = 0;
    }
    BOOL v185 = v78;
    BOOL v41 = v5 == 1 && v21 == 22;
    BOOL v79 = v21 == 29;
    if (v5 != 1) {
      BOOL v79 = 0;
    }
    BOOL v188 = v79;
    BOOL v42 = v5 == 1 && v21 == 30;
    BOOL v80 = v21 == 31;
    if (v5 != 1) {
      BOOL v80 = 0;
    }
    LODWORD(v190) = v80;
    BOOL v43 = v5 == 1 && v21 == 32;
    BOOL v44 = v5 == 1 && v21 == 4;
    BOOL v45 = v21 == 53;
    if (v5 != 1)
    {
      BOOL v45 = 0;
      BOOL v48 = 0;
    }
    LODWORD(v191) = v48;
    BOOL v81 = v21 == 12;
    if (v5 != 1)
    {
      BOOL v81 = 0;
      BOOL v49 = 0;
    }
    BOOL v193 = v49;
    BOOL v82 = v5 == 1 && v21 == 41;
    HIDWORD(v179) = v81;
    LODWORD(v180) = v82;
    BOOL v83 = v5 == 1 && v21 == 42;
    BOOL v84 = v5 == 1 && v21 == 43;
    HIDWORD(v180) = v84;
    BOOL v85 = v5 == 1 && v21 == 44;
    BOOL v195 = v83;
    LODWORD(v196) = v85;
    BOOL v86 = v5 == 1 && v21 == 45;
    BOOL v181 = v86;
    if (v5 != 1) {
      BOOL v50 = 0;
    }
    BOOL v184 = v50;
    BOOL v87 = v5 == 1 && v21 == 65;
    BOOL v88 = v5 == 1 && v21 == 60;
    BOOL v89 = v5 == 1 && v21 == 61;
    BOOL v186 = v87;
    BOOL v187 = v89;
    BOOL v90 = v5 == 1 && v21 == 57;
    unint64_t v198 = __PAIR64__(v90, v88);
    BOOL v91 = v5 == 1 && v21 == 58;
    char v3 = *((unsigned char *)this + 20);
    BOOL v92 = v5 == 1 && v21 == 59;
    LODWORD(v199) = v92;
    BOOL v93 = v5 == 1 && v21 == 5;
    unint64_t v189 = __PAIR64__(v93, v91);
  }
  uint64_t v94 = 0;
  if (v3 & 1 | v226) {
    BOOL v95 = 0;
  }
  else {
    BOOL v95 = v13;
  }
  unsigned int v96 = v6 == 7 && v95;
  int v98 = *((_DWORD *)this + 17);
  int v97 = *((_DWORD *)this + 18);
  int v99 = *((_DWORD *)this + 16);
  int v100 = v98 | v99;
  BOOL v101 = v98 == 0;
  BOOL v174 = (v97 | v98 | v99) == 0;
  BOOL v102 = v98 == 1;
  BOOL v103 = v98 == 2;
  if (v99) {
    BOOL v104 = 0;
  }
  else {
    BOOL v104 = v102;
  }
  if (v99) {
    BOOL v105 = 0;
  }
  else {
    BOOL v105 = v103;
  }
  BOOL v106 = v99 == 1 && v101;
  BOOL v107 = v99 == 1 && v102;
  BOOL v108 = v99 == 1 && v103;
  BOOL v109 = v99 == 2;
  BOOL v110 = v99 == 2 && v101;
  if (!v109)
  {
    BOOL v102 = 0;
    BOOL v103 = 0;
  }
  if (v97) {
    BOOL v111 = 0;
  }
  else {
    BOOL v111 = v106;
  }
  BOOL v173 = v111;
  if (v97) {
    BOOL v112 = 0;
  }
  else {
    BOOL v112 = v110;
  }
  BOOL v172 = v112;
  if (v97) {
    BOOL v113 = 0;
  }
  else {
    BOOL v113 = v104;
  }
  BOOL v171 = v113;
  if (v97) {
    BOOL v114 = 0;
  }
  else {
    BOOL v114 = v107;
  }
  BOOL v170 = v114;
  if (v97) {
    BOOL v115 = 0;
  }
  else {
    BOOL v115 = v102;
  }
  BOOL v169 = v115;
  if (v97) {
    BOOL v116 = 0;
  }
  else {
    BOOL v116 = v105;
  }
  BOOL v168 = v116;
  if (v97) {
    BOOL v117 = 0;
  }
  else {
    BOOL v117 = v108;
  }
  BOOL v167 = v117;
  if (v97) {
    BOOL v118 = 0;
  }
  else {
    BOOL v118 = v103;
  }
  BOOL v166 = v118;
  BOOL v119 = v97 == 1;
  BOOL v120 = v97 == 1 && v106;
  BOOL v165 = v120;
  BOOL v121 = v97 == 1 && v110;
  BOOL v164 = v121;
  BOOL v122 = v97 == 1 && v104;
  BOOL v163 = v122;
  BOOL v123 = v97 == 1 && v107;
  BOOL v162 = v123;
  BOOL v124 = v97 == 1 && v102;
  BOOL v161 = v124;
  BOOL v125 = v97 == 1 && v105;
  BOOL v160 = v125;
  BOOL v126 = v97 == 1 && v108;
  BOOL v159 = v126;
  BOOL v127 = v97 == 1 && v103;
  BOOL v158 = v127;
  BOOL v128 = v97 == 2;
  BOOL v129 = v97 == 2;
  BOOL v130 = v128 && v106;
  BOOL v131 = v128 && v110;
  BOOL v132 = v128 && v104;
  BOOL v133 = v128 && v107;
  BOOL v134 = v128 && v102;
  BOOL v135 = v128 && v105;
  BOOL v136 = v128 && v108;
  BOOL v137 = v128 && v103;
  if (v100) {
    BOOL v138 = 0;
  }
  else {
    BOOL v138 = v119;
  }
  if (v100) {
    BOOL v139 = 0;
  }
  else {
    BOOL v139 = v129;
  }
  unsigned __int16 v140 = -32764;
  unsigned __int16 v141 = 1;
  if (*((_DWORD *)this + 14)
    || (*(unsigned char *)this & 0xF) != 1
    || *((_DWORD *)this + 10) != 2
    || (BOOL v223 = v130, v142 = *((_DWORD *)this + 11), (v142 - 1) > 1))
  {
    LOWORD(v96) = 0;
    goto LABEL_416;
  }
  BOOL v156 = v132;
  BOOL v157 = v131;
  int v143 = v96 & ((v208 || v213 || v211 || v212 || v207 || v209 || v210 || v214) | (v192 || v206) | v175 | v177 | HIDWORD(v175) | HIDWORD(v177) | v176 | v178 | HIDWORD(v176) | HIDWORD(v178) | HIDWORD(v190) | HIDWORD(v196) | HIDWORD(v191) | v197 | v194 | HIDWORD(v197) | v179 | v182 | v39 | v183 | v40 | v185 | (v41 || v188 || v42) | v190 | v43 | HIDWORD(v199) | v44 | (v201 || v45) | v191 | HIDWORD(v179) | v193 | v180 | v195 | HIDWORD(v180) | v196 | v181 | v203 | v200 | HIDWORD(v203) | HIDWORD(v200) | v204 | v202 | HIDWORD(v204) | (v184 || v205 || v186) | v198 | v187 | HIDWORD(v198) | v189 | v199 | HIDWORD(v189) | v218 | v217 | HIDWORD(v216) | HIDWORD(v215) | v215 | v218 | v216);
  LOWORD(v96) = 0;
  if (((v225 || v224) | v221 | HIDWORD(v220) | v220 | HIDWORD(v219) | v219 | v143))
  {
    int v144 = *((unsigned __int8 *)this + 32);
    __int16 v145 = (8 * v144) & 0xF0;
    unsigned __int16 v141 = (2 * v144) & 0xC0 | (4 * (v144 & 1)) | 1;
    int v146 = (32 * v144) & 0x1000 | (32 * (*((unsigned char *)this + 48) & 1));
    switch(*((_DWORD *)this + 13))
    {
      case 1:
        v141 |= 0x2000u;
        break;
      case 2:
        v141 |= 0x4000u;
        break;
      case 3:
        v141 |= 0x6000u;
        break;
      case 4:
        v141 |= 0x8000u;
        break;
      case 5:
        v141 |= 0xA000u;
        break;
      case 8:
        v141 |= 0xE000u;
        break;
      default:
        break;
    }
    unsigned int v147 = *((unsigned __int8 *)this + 76);
    unsigned int v96 = *((unsigned char *)this + 60) & 1 | ((v147 & 1) << 13) & 0x3FFF | (((v147 >> 1) & 1) << 14) & 0xFFE07FFF | (v147 >> 2 << 15);
    uint64_t v94 = v146 & 0xFFFC1FFF | (((v147 >> 3) & 1) << 13) & 0xFFFC3FFF | (((v147 >> 4) & 1) << 14) & 0xFFFC7FFF | (v147 >> 5 << 15);
    if (v142 == 2) {
      __int16 v148 = -32756;
    }
    else {
      __int16 v148 = -32764;
    }
    unsigned __int16 v140 = v148 | v145;
    if (v225)
    {
      v140 |= (_WORD)v21 << 8;
      v96 |= (v21 >> 6) & 0x1E | (v21 >> 1) & 0xC00;
      uint64_t v94 = v94 & 0x3F0F0 | (v21 >> 13) & 0xF;
      unsigned __int16 v141 = v141 & 0xF9E7 | (8 * v226);
      if (v222 <= 1)
      {
        if (v5 == 1) {
          v141 &= 0xF8EFu;
        }
        else {
          v141 |= 0x100u;
        }
      }
      goto LABEL_381;
    }
    if (v224)
    {
      v140 |= (_WORD)v21 << 8;
      v96 |= (v21 >> 6) & 0x1E | (v21 >> 1) & 0xC00;
      uint64_t v94 = v94 & 0x3F0F0 | (v21 >> 13) & 0xF;
      __int16 v149 = v141 & 0xF9E7 | (8 * v226);
      unsigned __int16 v141 = v149 | 0x10;
      if (v222 > 1) {
        goto LABEL_381;
      }
      if (v5 == 1)
      {
        unsigned __int16 v141 = v149 & 0xF8EF | 0x10;
        goto LABEL_381;
      }
      __int16 v152 = 272;
      goto LABEL_380;
    }
    if (v221)
    {
      v140 |= (_WORD)v21 << 8;
      v96 |= (v21 >> 6) & 0x1E | (v21 >> 1) & 0xC00;
      uint64_t v94 = v94 & 0x3F0F0 | (v21 >> 13) & 0xF;
      unsigned __int16 v141 = v141 & 0xF9E7 | (8 * v226) | 0x200;
      if (v222 > 1) {
        goto LABEL_381;
      }
      __int16 v150 = -1297;
    }
    else
    {
      if (HIDWORD(v220))
      {
        v140 |= (_WORD)v21 << 8;
        v96 |= (v21 >> 6) & 0x1E | (v21 >> 1) & 0xC00;
        uint64_t v94 = v94 & 0x3F0F0 | (v21 >> 13) & 0xF;
        __int16 v149 = v141 & 0xF9E7 | (8 * v226);
        unsigned __int16 v141 = v149 | 0x210;
        if (v222 > 1) {
          goto LABEL_381;
        }
        if (v5 == 1)
        {
          unsigned __int16 v141 = v149 & 0xF8EF | 0x210;
          goto LABEL_381;
        }
        __int16 v152 = 784;
        goto LABEL_380;
      }
      if (v220)
      {
        v140 |= (_WORD)v21 << 8;
        v96 |= (v21 >> 6) & 0x1E | (v21 >> 1) & 0xC00;
        uint64_t v94 = v94 & 0x3F0F0 | (v21 >> 13) & 0xF;
        unsigned __int16 v141 = v141 & 0xF9E7 | (8 * v226) | 0x400;
        if (v222 > 1) {
          goto LABEL_381;
        }
        __int16 v150 = -785;
      }
      else
      {
        if (HIDWORD(v219))
        {
          v140 |= (_WORD)v21 << 8;
          v96 |= (v21 >> 6) & 0x1E | (v21 >> 1) & 0xC00;
          uint64_t v94 = v94 & 0x3F0F0 | (v21 >> 13) & 0xF;
          __int16 v149 = v141 & 0xF9E7 | (8 * v226);
          unsigned __int16 v141 = v149 | 0x410;
          if (v222 > 1) {
            goto LABEL_381;
          }
          if (v5 == 1)
          {
            unsigned __int16 v141 = v149 & 0xF8EF | 0x410;
            goto LABEL_381;
          }
          __int16 v152 = 1296;
LABEL_380:
          unsigned __int16 v141 = v149 | v152;
          goto LABEL_381;
        }
        if (!v219)
        {
          if (v143)
          {
            v141 |= 0x610u;
            if ((v218 & 1) == 0)
            {
              if (v217)
              {
                v140 |= 0x100u;
              }
              else if (HIDWORD(v216))
              {
                v140 |= 0x200u;
              }
              else if (v216)
              {
                v140 |= 0x300u;
              }
              else if (HIDWORD(v215))
              {
                v140 |= 0x400u;
              }
              else if (v215)
              {
                v140 |= 0x500u;
              }
              else if (v214)
              {
                v140 |= 0x800u;
              }
              else if (v213)
              {
                v140 |= 0x900u;
              }
              else if (v212)
              {
                v140 |= 0xA00u;
              }
              else if (v211)
              {
                v140 |= 0xB00u;
              }
              else if (v210)
              {
                v140 |= 0xC00u;
              }
              else if (v209)
              {
                v140 |= 0xD00u;
              }
              else if (v208)
              {
                v140 |= 0xE00u;
              }
              else if (v207)
              {
                v140 |= 0xF00u;
              }
              else if (v206)
              {
                v140 |= 0x1000u;
              }
              else if (v175)
              {
                v140 |= 0x1100u;
              }
              else if (v177)
              {
                v140 |= 0x1400u;
              }
              else if (HIDWORD(v175))
              {
                v140 |= 0x1500u;
              }
              else if (HIDWORD(v177))
              {
                v140 |= 0x1600u;
              }
              else if (v176)
              {
                v140 |= 0x1700u;
              }
              else if (v178)
              {
                v140 |= 0x1800u;
              }
              else if (HIDWORD(v176))
              {
                v140 |= 0x1900u;
              }
              else if (HIDWORD(v178))
              {
                v140 |= 0x1A00u;
              }
              else if (HIDWORD(v190))
              {
                v140 |= 0x1C00u;
              }
              else if (HIDWORD(v196))
              {
                v140 |= 0x1D00u;
              }
              else if (HIDWORD(v191))
              {
                v140 |= 0x1E00u;
              }
              else if (v192)
              {
                v140 |= 0x1F00u;
              }
              else if (v197)
              {
                v140 |= 0x2000u;
              }
              else if (v194)
              {
                v140 |= 0x2100u;
              }
              else if (HIDWORD(v197))
              {
                v140 |= 0x2200u;
              }
              else if (v179)
              {
                v140 |= 0x2400u;
              }
              else if (v182)
              {
                v140 |= 0x2500u;
              }
              else if (v39)
              {
                v140 |= 0x2600u;
              }
              else if (v183)
              {
                v140 |= 0x2700u;
              }
              else if (v40)
              {
                v140 |= 0x2800u;
              }
              else if (v185)
              {
                v140 |= 0x2900u;
              }
              else if (v41)
              {
                v140 |= 0x2A00u;
              }
              else if (v188)
              {
                v140 |= 0x2C00u;
              }
              else if (v42)
              {
                v140 |= 0x2D00u;
              }
              else if (v190)
              {
                v140 |= 0x2E00u;
              }
              else if (v43)
              {
                v140 |= 0x2F00u;
              }
              else if (HIDWORD(v199))
              {
                v140 |= 0x3800u;
              }
              else if (v44)
              {
                v140 |= 0x3900u;
              }
              else if (v201)
              {
                v140 |= 0x3C00u;
              }
              else if (v45)
              {
                v140 |= 0x3D00u;
              }
              else if (v191)
              {
                v140 |= 0x4200u;
              }
              else if (HIDWORD(v179))
              {
                v140 |= 0x4300u;
              }
              else if (v193)
              {
                v140 |= 0x4400u;
              }
              else if (v180)
              {
                v140 |= 0x4500u;
              }
              else if (v195)
              {
                v140 |= 0x4600u;
              }
              else if (HIDWORD(v180))
              {
                v140 |= 0x4700u;
              }
              else if (v196)
              {
                v140 |= 0x4800u;
              }
              else if (v181)
              {
                v140 |= 0x5000u;
              }
              else if (v203)
              {
                v140 |= 0x5800u;
              }
              else if (v200)
              {
                v140 |= 0x5900u;
              }
              else if (HIDWORD(v203))
              {
                v140 |= 0x5A00u;
              }
              else if (HIDWORD(v200))
              {
                v140 |= 0x5B00u;
              }
              else if (v204)
              {
                v140 |= 0x5C00u;
              }
              else if (v202)
              {
                v140 |= 0x5D00u;
              }
              else if (HIDWORD(v204))
              {
                v140 |= 0x6000u;
              }
              else if (v184)
              {
                v140 |= 0x6100u;
              }
              else if (v205)
              {
                v140 |= 0x6200u;
              }
              else if (v186)
              {
                v140 |= 0x6300u;
              }
              else if (v198)
              {
                v140 |= 0x6500u;
              }
              else if (v187)
              {
                v140 |= 0x6700u;
              }
              else if (HIDWORD(v198))
              {
                v140 |= 0x6800u;
              }
              else if (v189)
              {
                v140 |= 0x6900u;
              }
              else if (v199)
              {
                v140 |= 0x6A00u;
              }
              else if (HIDWORD(v189))
              {
                v140 |= 0x7800u;
              }
            }
          }
LABEL_381:
          if (v174)
          {
            LOWORD(v96) = v96 & 0xFC1F;
          }
          else if (v173)
          {
            LOWORD(v96) = v96 & 0xFC1F | 0x20;
          }
          else if (v172)
          {
            LOWORD(v96) = v96 & 0xFC1F | 0x40;
          }
          else if (v171)
          {
            LOWORD(v96) = v96 & 0xFC1F | 0x60;
          }
          else if (v170)
          {
            LOWORD(v96) = v96 & 0xFC1F | 0x80;
          }
          else
          {
            if (v169)
            {
              __int16 v153 = v96 & 0xFC3F;
              __int16 v154 = 160;
            }
            else
            {
              if (v168)
              {
                LOWORD(v96) = v96 & 0xFC1F | 0xC0;
                goto LABEL_416;
              }
              if (v167)
              {
                LOWORD(v96) = v96 & 0xFC1F | 0xE0;
                goto LABEL_416;
              }
              if (v166)
              {
                LOWORD(v96) = v96 & 0xFC1F | 0x100;
                goto LABEL_416;
              }
              if (v138)
              {
                __int16 v153 = v96 & 0xFC3F;
                __int16 v154 = 288;
              }
              else if (v165)
              {
                __int16 v153 = v96 & 0xFC1F;
                __int16 v154 = 320;
              }
              else if (v164)
              {
                __int16 v153 = v96 & 0xFC7F;
                __int16 v154 = 352;
              }
              else
              {
                if (v163)
                {
                  LOWORD(v96) = v96 & 0xFC1F | 0x180;
                  goto LABEL_416;
                }
                if (v162)
                {
                  __int16 v153 = v96 & 0xFC3F;
                  __int16 v154 = 416;
                }
                else
                {
                  if (v161)
                  {
                    LOWORD(v96) = v96 & 0xFC1F | 0x1C0;
                    goto LABEL_416;
                  }
                  if (v160)
                  {
                    LOWORD(v96) = v96 & 0xFC1F | 0x1E0;
                    goto LABEL_416;
                  }
                  if (v159)
                  {
                    LOWORD(v96) = v96 & 0xFC1F | 0x200;
                    goto LABEL_416;
                  }
                  if (v158)
                  {
                    __int16 v153 = v96 & 0xFC3F;
                    __int16 v154 = 544;
                  }
                  else if (v139)
                  {
                    __int16 v153 = v96 & 0xFC1F;
                    __int16 v154 = 576;
                  }
                  else if (v223)
                  {
                    __int16 v153 = v96 & 0xFC7F;
                    __int16 v154 = 608;
                  }
                  else if (v157)
                  {
                    __int16 v153 = v96 & 0xFC1F;
                    __int16 v154 = 640;
                  }
                  else if (v156)
                  {
                    __int16 v153 = v96 & 0xFC3F;
                    __int16 v154 = 672;
                  }
                  else if (v133)
                  {
                    __int16 v153 = v96 & 0xFC1F;
                    __int16 v154 = 704;
                  }
                  else if (v134)
                  {
                    __int16 v153 = v96 & 0xFCFF;
                    __int16 v154 = 736;
                  }
                  else
                  {
                    if (v135)
                    {
                      LOWORD(v96) = v96 & 0xFC1F | 0x300;
                      goto LABEL_416;
                    }
                    if (v136)
                    {
                      __int16 v153 = v96 & 0xFC3F;
                      __int16 v154 = 800;
                    }
                    else
                    {
                      if (!v137) {
                        goto LABEL_416;
                      }
                      __int16 v153 = v96 & 0xFC1F;
                      __int16 v154 = 832;
                    }
                  }
                }
              }
            }
            LOWORD(v96) = v153 | v154;
          }
          goto LABEL_416;
        }
        v140 |= (_WORD)v21 << 8;
        v96 |= (v21 >> 6) & 0x1E | (v21 >> 1) & 0xC00;
        uint64_t v94 = v94 & 0x3F0F0 | (v21 >> 13) & 0xF;
        unsigned __int16 v141 = v141 & 0xFFE7 | (8 * v226) | 0x600;
        if (v222 > 1) {
          goto LABEL_381;
        }
        __int16 v150 = -273;
      }
    }
    unsigned __int16 v151 = v141 & v150;
    unsigned __int16 v141 = v151 | 0x100;
    if (v5 == 1) {
      unsigned __int16 v141 = v151;
    }
    goto LABEL_381;
  }
LABEL_416:
  *(void *)a2 = (v94 << 48) | ((unint64_t)(unsigned __int16)v96 << 32) | ((unint64_t)v141 << 16) | v140;
  return a2 + 8;
}

unsigned __int8 *AGXIotoInstruction_B_0::emit(AGXIotoInstruction_B_0 *this, unsigned __int8 *a2)
{
  int v3 = *((_DWORD *)this + 3);
  int v2 = *((_DWORD *)this + 4);
  int v4 = *((_DWORD *)this + 2);
  unint64_t v5 = *(void *)this;
  unsigned int v6 = *((unsigned __int8 *)this + 20);
  int v7 = (*(void *)this << 7) & 0xFFFFFE00 | ((*(void *)this & 1) << 8) | (v6 >> 4) & 1 | (v6 >> 4) & 2;
  __int16 v8 = v7 | 8;
  if (!v2) {
    LOWORD(v7) = v7 | 4;
  }
  if (v2 == 1) {
    __int16 v9 = v8;
  }
  else {
    __int16 v9 = v7;
  }
  __int16 v10 = v9 & 0xFFCF | 0x10;
  __int16 v11 = v9 & 0xFFCF | 0x20;
  if (v3 == 2) {
    v9 &= 0xFFCFu;
  }
  if (v3 == 1) {
    __int16 v9 = v11;
  }
  if (!v3) {
    __int16 v9 = v10;
  }
  __int16 v12 = v9 & 0xFF3F | 0x40;
  __int16 v13 = v9 & 0xFF3F | 0x80;
  if (v4 == 2) {
    v9 &= 0xFF3Fu;
  }
  if (v4 == 1) {
    __int16 v9 = v13;
  }
  *(_WORD *)a2 = (v5 >> 38) & 0x800 | ((v6 & 1) << 12) & 0x1FFF | (((v6 >> 1) & 1) << 13) & 0x3FFF | (((v6 >> 2) & 1) << 14) & 0x7FFF | (((v6 >> 3) & 1) << 15) | 0xF;
  if (!v4) {
    __int16 v9 = v12;
  }
  *((_WORD *)a2 + 1) = v9;
  *((_WORD *)a2 + 2) = v5 >> 9;
  *((_WORD *)a2 + 3) = v5 >> 25;
  *((_WORD *)a2 + 4) = (v5 >> 41);
  return a2 + 10;
}

unsigned __int8 *AGXIotoInstruction_CNDRET_0::emit(AGXIotoInstruction_CNDRET_0 *this, unsigned __int8 *a2)
{
  int v3 = *((_DWORD *)this + 2);
  int v2 = *((_DWORD *)this + 3);
  int v4 = *((_DWORD *)this + 1);
  unsigned int v5 = *(unsigned __int8 *)this;
  unsigned int v6 = *((unsigned __int8 *)this + 16);
  int v7 = (v6 >> 4) & 3 | ((v5 & 1) << 8);
  int v8 = v7 | 8;
  if (!v2) {
    v7 |= 4u;
  }
  if (v2 == 1) {
    unsigned int v9 = v8;
  }
  else {
    unsigned int v9 = v7;
  }
  unsigned int v10 = v9 & 0xFFFFFFCF | 0x10;
  unsigned int v11 = v9 & 0xFFFFFFCF | 0x20;
  if (v3 == 2) {
    v9 &= 0xFFFFFFCF;
  }
  if (v3 == 1) {
    unsigned int v9 = v11;
  }
  if (!v3) {
    unsigned int v9 = v10;
  }
  unsigned int v12 = v9 & 0xFFFFFF3F | 0x40;
  unsigned int v13 = v9 & 0xFFFFFF3F | 0x80;
  if (v4 == 2) {
    v9 &= 0xFFFFFF3F;
  }
  if (v4 == 1) {
    unsigned int v9 = v13;
  }
  if (!v4) {
    unsigned int v9 = v12;
  }
  *(_DWORD *)a2 = (((v6 & 1) << 12) | (((v5 >> 1) & 1) << 11)) & 0xFFFF1FFF | (((v6 >> 1) & 1) << 13) & 0xFFFF3FFF | (((v6 >> 2) & 1) << 14) & 0xFFFF7FFF | (((v6 >> 3) & 1) << 15) | (v9 << 16) | 0x28F;
  return a2 + 4;
}

void AGXIotoInstruction_LDIMM_2::AGXIotoInstruction_LDIMM_2(AGXIotoInstruction_LDIMM_2 *this, const unsigned __int8 *a2)
{
  *((_DWORD *)this + 12) = 0;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)this = 0u;
  *(_DWORD *)this = (a2[1] | (*((unsigned __int16 *)a2 + 1) << 16)) & 0xFE00007F | (((*((unsigned __int16 *)a2 + 2) >> 1) & 0xF) << 7) & 0xFE0007FF | (((*((unsigned __int16 *)a2 + 2) >> 10) & 3) << 11) & 0xFE001FFF | ((*((_WORD *)a2 + 3) & 0xFFF) << 13);
  *((unsigned char *)this + 32) = a2[4] & 1;
  __int16 v2 = *((_WORD *)a2 + 2);
  *((unsigned char *)this + 48) = (v2 & 0x2000) != 0;
  char v3 = (*((unsigned __int16 *)a2 + 2) >> 13) & 2 | ((v2 & 0x2000) != 0);
  *((unsigned char *)this + 48) = v3;
  LOBYTE(v2) = v3 | (*((unsigned __int16 *)a2 + 2) >> 13) & 4;
  *((unsigned char *)this + 48) = v2;
  LOBYTE(v2) = v2 | (*((unsigned __int16 *)a2 + 3) >> 10) & 8;
  *((unsigned char *)this + 48) = v2;
  LOBYTE(v2) = v2 | (*((unsigned __int16 *)a2 + 3) >> 10) & 0x10;
  *((unsigned char *)this + 48) = v2;
  *((unsigned char *)this + 48) = v2 | (*((unsigned __int16 *)a2 + 3) >> 10) & 0x20;
  unsigned int v4 = *(unsigned __int16 *)a2;
  if ((v4 & 8) != 0) {
    int v5 = 2;
  }
  else {
    int v5 = 1;
  }
  *((_DWORD *)this + 4) = v5;
  switch(((unint64_t)*((unsigned __int16 *)a2 + 2) >> 5) & 0x1F)
  {
    case 1uLL:
      uint64_t v6 = 1;
      goto LABEL_50;
    case 2uLL:
      uint64_t v6 = 2;
      goto LABEL_50;
    case 3uLL:
      int v7 = 1;
      goto LABEL_9;
    case 4uLL:
      goto LABEL_33;
    case 5uLL:
      goto LABEL_36;
    case 6uLL:
      int v7 = 2;
LABEL_9:
      *((_DWORD *)this + 10) = v7;
      unsigned int v8 = *((unsigned __int16 *)a2 + 4);
      if ((v8 & 0x20) != 0) {
        goto LABEL_51;
      }
      goto LABEL_39;
    case 7uLL:
      goto LABEL_46;
    case 8uLL:
      goto LABEL_49;
    case 9uLL:
      int v9 = 1;
      goto LABEL_21;
    case 0xAuLL:
      int v10 = 1;
      goto LABEL_25;
    case 0xBuLL:
      *((_DWORD *)this + 11) = 1;
      int v10 = 2;
      goto LABEL_26;
    case 0xCuLL:
      uint64_t v11 = 0x100000001;
      goto LABEL_29;
    case 0xDuLL:
      int v12 = 1;
      goto LABEL_32;
    case 0xEuLL:
      int v13 = 1;
      goto LABEL_35;
    case 0xFuLL:
      uint64_t v11 = 0x100000002;
      goto LABEL_29;
    case 0x10uLL:
      int v14 = 1;
      goto LABEL_45;
    case 0x11uLL:
      int v15 = 1;
      goto LABEL_48;
    case 0x12uLL:
      int v9 = 2;
LABEL_21:
      *((_DWORD *)this + 11) = v9;
      unsigned int v8 = *((unsigned __int16 *)a2 + 4);
      if ((v8 & 0x20) != 0) {
        goto LABEL_51;
      }
      goto LABEL_39;
    case 0x13uLL:
      *((_DWORD *)this + 11) = 2;
      int v10 = 1;
      goto LABEL_26;
    case 0x14uLL:
      int v10 = 2;
LABEL_25:
      *((_DWORD *)this + 11) = v10;
LABEL_26:
      *((_DWORD *)this + 9) = v10;
      unsigned int v8 = *((unsigned __int16 *)a2 + 4);
      if ((v8 & 0x20) != 0) {
        goto LABEL_51;
      }
      goto LABEL_39;
    case 0x15uLL:
      uint64_t v11 = 0x200000001;
LABEL_29:
      *((void *)this + 5) = v11;
      unsigned int v8 = *((unsigned __int16 *)a2 + 4);
      if ((v8 & 0x20) != 0) {
        goto LABEL_51;
      }
      goto LABEL_39;
    case 0x16uLL:
      int v12 = 2;
LABEL_32:
      *((_DWORD *)this + 11) = v12;
LABEL_33:
      uint64_t v6 = 0x100000001;
      goto LABEL_50;
    case 0x17uLL:
      int v13 = 2;
LABEL_35:
      *((_DWORD *)this + 11) = v13;
LABEL_36:
      uint64_t v6 = 0x100000002;
      goto LABEL_50;
    case 0x18uLL:
      *((void *)this + 5) = 0x200000002;
      goto LABEL_38;
    case 0x19uLL:
      int v14 = 2;
LABEL_45:
      *((_DWORD *)this + 11) = v14;
LABEL_46:
      uint64_t v6 = 0x200000001;
      goto LABEL_50;
    case 0x1AuLL:
      int v15 = 2;
LABEL_48:
      *((_DWORD *)this + 11) = v15;
LABEL_49:
      uint64_t v6 = 0x200000002;
LABEL_50:
      *(void *)((char *)this + 36) = v6;
      unsigned int v8 = *((unsigned __int16 *)a2 + 4);
      if ((v8 & 0x20) != 0) {
        goto LABEL_51;
      }
      goto LABEL_39;
    default:
LABEL_38:
      unsigned int v8 = *((unsigned __int16 *)a2 + 4);
      if ((v8 & 0x20) != 0)
      {
LABEL_51:
        *((_DWORD *)this + 7) = 0;
        *((_DWORD *)this + 3) = 4;
        unsigned int v17 = *((unsigned __int16 *)a2 + 1);
        *((_DWORD *)this + 1) = (v4 >> 3) & 0x1E | (v17 >> 2) & 1 | (((v17 >> 3) & 3) << 7) & 0xFFFEE1FF | (((v17 >> 5) & 1) << 16) | (v17 >> 1) & 0x60 | (((v8 >> 1) & 0xF) << 9) | (v8 << 9) & 0x8000 | (((v8 >> 10) & 3) << 13);
        *((unsigned char *)this + 20) = 0;
        switch((unint64_t)*((unsigned __int16 *)a2 + 4) >> 13)
        {
          case 0uLL:
            goto LABEL_52;
          case 1uLL:
            goto LABEL_53;
          case 2uLL:
            goto LABEL_54;
          case 3uLL:
            goto LABEL_56;
          case 4uLL:
            goto LABEL_57;
          case 5uLL:
            goto LABEL_58;
          case 7uLL:
            goto LABEL_55;
          default:
            return;
        }
      }
      else
      {
LABEL_39:
        if ((v8 & 0x40) != 0)
        {
          unsigned int v16 = *((unsigned __int16 *)a2 + 1);
          if ((v16 & 0x20) != 0)
          {
            *((_DWORD *)this + 3) = 5;
            *((_WORD *)this + 2) = ((_WORD)v8 << 8) & 0x1E00 | (v4 >> 3) & 0x7E | (v16 >> 2) & 1 | (((v16 >> 3) & 3) << 7) | (v16 >> 1) & 0x60;
            *((_DWORD *)this + 7) = (*((unsigned __int16 *)a2 + 4) >> 10) & 1;
            *((unsigned char *)this + 20) = 0;
            switch((unint64_t)*((unsigned __int16 *)a2 + 4) >> 13)
            {
              case 0uLL:
LABEL_52:
                *((_DWORD *)this + 6) = 0;
                return;
              case 1uLL:
LABEL_53:
                int v18 = 1;
                goto LABEL_59;
              case 2uLL:
LABEL_54:
                int v18 = 2;
                goto LABEL_59;
              case 3uLL:
LABEL_56:
                int v18 = 3;
                goto LABEL_59;
              case 4uLL:
LABEL_57:
                int v18 = 4;
                goto LABEL_59;
              case 5uLL:
LABEL_58:
                int v18 = 5;
                goto LABEL_59;
              case 7uLL:
LABEL_55:
                int v18 = 8;
LABEL_59:
                *((_DWORD *)this + 6) = v18;
                break;
              default:
                return;
            }
          }
          else
          {
            *((void *)this + 3) = 8;
            *((_DWORD *)this + 3) = 3;
            *((_WORD *)this + 2) = (v4 >> 3) & 0x1E | (v16 >> 2) & 1 | (((v16 >> 3) & 3) << 7) | (v16 >> 1) & 0x60;
            *((unsigned char *)this + 20) = 0;
          }
        }
        else
        {
          *((void *)this + 3) = 8;
          *((_DWORD *)this + 3) = 2;
          *((unsigned char *)this + 4) = (v4 >> 3) & 0x1E | ((*((_WORD *)a2 + 1) & 4) != 0) | (((*((_WORD *)a2 + 1) & 8) != 0) << 7) | (*((unsigned __int16 *)a2 + 1) >> 1) & 0x60;
          *((unsigned char *)this + 20) = (a2[2] & 0x20) != 0;
        }
      }
      return;
  }
}

void AGXIotoInstruction_LDIMM_1::AGXIotoInstruction_LDIMM_1(AGXIotoInstruction_LDIMM_1 *this, const unsigned __int8 *a2)
{
  *((_DWORD *)this + 12) = 0;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)this = 0u;
  *(_DWORD *)this = (a2[1] | (*((unsigned __int16 *)a2 + 1) << 16)) & 0xFE00007F | (((*((unsigned __int16 *)a2 + 2) >> 1) & 0xF) << 7) & 0xFE0007FF | (((*((unsigned __int16 *)a2 + 2) >> 10) & 3) << 11) & 0xFE001FFF | ((*((_WORD *)a2 + 3) & 0xFFF) << 13);
  *((unsigned char *)this + 32) = a2[4] & 1;
  *((_DWORD *)this + 6) = 8;
  *((unsigned char *)this + 4) = (*(unsigned __int16 *)a2 >> 3) & 0x1E | ((*((_WORD *)a2 + 1) & 4) != 0) | (((*((_WORD *)a2 + 1) & 8) != 0) << 7) | (*((unsigned __int16 *)a2 + 1) >> 1) & 0x60;
  *((unsigned char *)this + 20) = (a2[2] & 0x20) != 0;
  __int16 v2 = *((_WORD *)a2 + 2);
  *((unsigned char *)this + 48) = (v2 & 0x2000) != 0;
  char v3 = (*((unsigned __int16 *)a2 + 2) >> 13) & 2 | ((v2 & 0x2000) != 0);
  *((unsigned char *)this + 48) = v3;
  LOBYTE(v2) = v3 | (*((unsigned __int16 *)a2 + 2) >> 13) & 4;
  *((unsigned char *)this + 48) = v2;
  LOBYTE(v2) = v2 | (*((unsigned __int16 *)a2 + 3) >> 10) & 8;
  *((unsigned char *)this + 48) = v2;
  LOBYTE(v2) = v2 | (*((unsigned __int16 *)a2 + 3) >> 10) & 0x10;
  *((unsigned char *)this + 48) = v2;
  *((unsigned char *)this + 48) = v2 | (*((unsigned __int16 *)a2 + 3) >> 10) & 0x20;
  if ((*(_WORD *)a2 & 8) != 0) {
    int v4 = 2;
  }
  else {
    int v4 = 1;
  }
  *((_DWORD *)this + 3) = 2;
  *((_DWORD *)this + 4) = v4;
  switch(((unint64_t)*((unsigned __int16 *)a2 + 2) >> 5) & 0x1F)
  {
    case 1uLL:
      uint64_t v5 = 1;
      goto LABEL_36;
    case 2uLL:
      uint64_t v5 = 2;
      goto LABEL_36;
    case 3uLL:
      *((_DWORD *)this + 10) = 1;
      return;
    case 4uLL:
      goto LABEL_25;
    case 5uLL:
      goto LABEL_28;
    case 6uLL:
      *((_DWORD *)this + 10) = 2;
      return;
    case 7uLL:
      goto LABEL_32;
    case 8uLL:
      goto LABEL_35;
    case 9uLL:
      *((_DWORD *)this + 11) = 1;
      return;
    case 0xAuLL:
      int v6 = 1;
      goto LABEL_21;
    case 0xBuLL:
      *((_DWORD *)this + 11) = 1;
      *((_DWORD *)this + 9) = 2;
      return;
    case 0xCuLL:
      *((void *)this + 5) = 0x100000001;
      return;
    case 0xDuLL:
      int v7 = 1;
      goto LABEL_24;
    case 0xEuLL:
      int v8 = 1;
      goto LABEL_27;
    case 0xFuLL:
      *((void *)this + 5) = 0x100000002;
      return;
    case 0x10uLL:
      int v9 = 1;
      goto LABEL_31;
    case 0x11uLL:
      int v10 = 1;
      goto LABEL_34;
    case 0x12uLL:
      *((_DWORD *)this + 11) = 2;
      return;
    case 0x13uLL:
      *((_DWORD *)this + 11) = 2;
      *((_DWORD *)this + 9) = 1;
      return;
    case 0x14uLL:
      int v6 = 2;
LABEL_21:
      *((_DWORD *)this + 11) = v6;
      *((_DWORD *)this + 9) = v6;
      return;
    case 0x15uLL:
      *((void *)this + 5) = 0x200000001;
      return;
    case 0x16uLL:
      int v7 = 2;
LABEL_24:
      *((_DWORD *)this + 11) = v7;
LABEL_25:
      uint64_t v5 = 0x100000001;
      goto LABEL_36;
    case 0x17uLL:
      int v8 = 2;
LABEL_27:
      *((_DWORD *)this + 11) = v8;
LABEL_28:
      uint64_t v5 = 0x100000002;
      goto LABEL_36;
    case 0x18uLL:
      *((void *)this + 5) = 0x200000002;
      return;
    case 0x19uLL:
      int v9 = 2;
LABEL_31:
      *((_DWORD *)this + 11) = v9;
LABEL_32:
      uint64_t v5 = 0x200000001;
      goto LABEL_36;
    case 0x1AuLL:
      int v10 = 2;
LABEL_34:
      *((_DWORD *)this + 11) = v10;
LABEL_35:
      uint64_t v5 = 0x200000002;
LABEL_36:
      *(void *)((char *)this + 36) = v5;
      break;
    default:
      return;
  }
}

double AGX::ComputeIndirectExecutionContextGen4<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,AGX::HAL200::EncoderComputeServiceClasses>::patchCDMControlStreamAndReset(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v8 = (unsigned int *)(a2 + 16912);
  uint64_t v9 = *(void *)(a1 + 40);
  if (v9)
  {
    uint64_t v10 = *(void *)(a1 + 56);
    *(_DWORD *)a3 = WORD2(v9) | 0x20000000;
    *(_DWORD *)(a3 + 4) = v9;
    *(void *)(a3 + 8) = v10;
    uint64_t v11 = *(void **)(a1 + 8);
    int v12 = (unint64_t *)v11[114];
    if ((unint64_t)v12 + 4 > v11[113])
    {
      if (AGX::DataBufferAllocator<34ul>::growNoInline(*(void *)(a1 + 8), 27, 0))
      {
        uint64_t v34 = v11[114];
        if ((unint64_t)(v34 + 4) > v11[113]) {
          goto LABEL_29;
        }
        v11[115] = v34 + 4;
        *int v12 = __ROR8__(v11[116] + v34, 32) & 0xFFFFFFFF0000FFFFLL | 0x20000000;
      }
    }
    else
    {
      v11[115] = (char *)v12 + 4;
    }
    int v13 = (_DWORD *)v11[114];
    _DWORD *v13 = 1610613088;
    v11[114] = v13 + 1;
    unsigned int v14 = v8[1] + *(_DWORD *)(a1 + 68);
    if (*v8 < v14) {
      unsigned int *v8 = v14;
    }
    v8[1] = 0;
    *(_DWORD *)(a1 + 68) = 0;
    int v15 = *(void **)(a1 + 8);
    unsigned int v16 = (unint64_t *)v15[114];
    if ((unint64_t)(v16 + 2) > v15[113])
    {
      if (AGX::DataBufferAllocator<34ul>::growNoInline(*(void *)(a1 + 8), 27, 0))
      {
        uint64_t v35 = v15[114];
        if ((unint64_t)(v35 + 16) > v15[113]) {
          goto LABEL_29;
        }
        v15[115] = v35 + 16;
        *unsigned int v16 = __ROR8__(v15[116] + v35, 32) & 0xFFFFFFFF0000FFFFLL | 0x20000000;
      }
    }
    else
    {
      v15[115] = v16 + 2;
    }
    uint64_t v17 = *(void *)(a1 + 8);
    LODWORD(v18) = *(unsigned __int16 *)(a1 + 36) | 0x20000000;
    DWORD1(v18) = *(_DWORD *)(a1 + 32);
    *((void *)&v18 + 1) = *(void *)(a1 + 48);
    BOOL v19 = *(_OWORD **)(v17 + 912);
    *BOOL v19 = v18;
    *(void *)(v17 + 912) = v19 + 1;
    *(void *)(a1 + 40) = 0;
    *(void *)(a1 + 56) = 0;
  }
  else
  {
    uint64_t v20 = *(void *)(a1 + 32);
    uint64_t v21 = *(void *)(a1 + 48);
    *(_DWORD *)a3 = WORD2(v20) | 0x20000000;
    *(_DWORD *)(a3 + 4) = v20;
    *(void *)(a3 + 8) = v21;
  }
  int v22 = *(void **)(a1 + 8);
  BOOL v23 = (unint64_t *)v22[110];
  if ((unint64_t)v23 + 4 > v22[109])
  {
    if (AGX::DataBufferAllocator<34ul>::growNoInline(*(void *)(a1 + 8), 26, 0))
    {
      uint64_t v32 = v22[110];
      if ((unint64_t)(v32 + 4) > v22[109]) {
        goto LABEL_29;
      }
      v22[111] = v32 + 4;
      unint64_t *v23 = __ROR8__(v22[112] + v32, 32) & 0xFFFFFFFF0000FFFFLL | 0x20000000;
    }
  }
  else
  {
    v22[111] = (char *)v23 + 4;
  }
  int v24 = (_DWORD *)v22[110];
  *int v24 = 1610615136;
  v22[110] = v24 + 1;
  unsigned int v25 = v8[1] + *(_DWORD *)(a1 + 64);
  if (*v8 < v25) {
    unsigned int *v8 = v25;
  }
  v8[1] = 0;
  *(_DWORD *)(a1 + 64) = 0;
  BOOL v26 = *(void **)(a1 + 8);
  BOOL v27 = (unint64_t *)v26[110];
  if ((unint64_t)(v27 + 2) > v26[109])
  {
    if (!AGX::DataBufferAllocator<34ul>::growNoInline(*(void *)(a1 + 8), 26, 0)) {
      goto LABEL_16;
    }
    uint64_t v33 = v26[110];
    if ((unint64_t)(v33 + 16) <= v26[109])
    {
      v26[111] = v33 + 16;
      unint64_t *v27 = __ROR8__(v26[112] + v33, 32) & 0xFFFFFFFF0000FFFFLL | 0x20000000;
      goto LABEL_16;
    }
LABEL_29:
    abort();
  }
  v26[111] = v27 + 2;
LABEL_16:
  uint64_t v28 = *(void *)(a1 + 8);
  double result = *(double *)&a5;
  LODWORD(v30) = WORD2(a4) | 0x20000000;
  DWORD1(v30) = a4;
  *((void *)&v30 + 1) = a5;
  BOOL v31 = *(_OWORD **)(v28 + 880);
  *BOOL v31 = v30;
  *(void *)(v28 + 880) = v31 + 1;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 48) = 0;
  return result;
}

uint64_t *AGX::ComputePipeline<AGX::HAL200::ObjClasses,AGX::HAL200::Classes,AGX::HAL200::Encoders>::~ComputePipeline(uint64_t *a1)
{
  if (!*((unsigned char *)a1 + 26) && a1[9])
  {
    uint64_t v2 = a1[10];
    char v3 = *(NSObject **)(v2 + 16);
    uint64_t v44 = MEMORY[0x263EF8330];
    uint64_t v45 = 3221225472;
    BOOL v46 = ___ZN3AGX4HeapILb1EE14deallocateImplERKNS1_10AllocationE_block_invoke;
    BOOL v47 = &__block_descriptor_48_e5_v8__0l;
    uint64_t v48 = v2;
    BOOL v49 = a1 + 6;
    dispatch_sync(v3, &v44);
    *(_OWORD *)((char *)a1 + 73) = 0u;
    *((_OWORD *)a1 + 3) = 0u;
    *((_OWORD *)a1 + 4) = 0u;
  }
  int v4 = (uint64_t *)a1[52];
  uint64_t v5 = (uint64_t *)a1[53];
  while (v4 != v5)
  {
    uint64_t v6 = *v4;
    v4 += 2;
    AGX::DynamicLibrary<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::deallocateCodeHeap(v6);
  }
  int v7 = (void **)(a1 + 52);
  if (a1[66])
  {
    os_unfair_lock_lock((os_unfair_lock_t)a1 + 7);
    for (uint64_t i = (uint64_t **)(a1 + 63); ; i[3])
    {
      uint64_t i = (uint64_t **)*i;
      if (!i) {
        break;
      }
    }
    uint64_t v9 = a1[66];
    if (v9)
    {

      MEMORY[0x24566ED90](v9, 0x10A0C404C70D3EBLL);
    }
    os_unfair_lock_unlock((os_unfair_lock_t)a1 + 7);
  }
  uint64_t v10 = (std::__shared_weak_count *)a1[73];
  long long v11 = 0uLL;
  *((_OWORD *)a1 + 36) = 0u;
  if (v10 && !atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
    long long v11 = 0uLL;
  }
  int v12 = (std::__shared_weak_count *)a1[75];
  *((_OWORD *)a1 + 37) = v11;
  if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  int v13 = (std::__shared_weak_count *)a1[77];
  if (v13 && !atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
  unsigned int v14 = (std::__shared_weak_count *)a1[75];
  if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
  int v15 = (std::__shared_weak_count *)a1[73];
  if (v15 && !atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
  }
  unsigned int v16 = (void *)a1[69];
  if (v16)
  {
    do
    {
      uint64_t v17 = (void *)*v16;
      operator delete(v16);
      unsigned int v16 = v17;
    }
    while (v17);
  }
  long long v18 = (void *)a1[67];
  a1[67] = 0;
  if (v18) {
    operator delete(v18);
  }
  BOOL v19 = (void *)a1[63];
  if (v19)
  {
    do
    {
      uint64_t v20 = (void *)*v19;
      operator delete(v19);
      BOOL v19 = v20;
    }
    while (v20);
  }
  uint64_t v21 = (void *)a1[61];
  a1[61] = 0;
  if (v21) {
    operator delete(v21);
  }
  int v22 = (id *)a1[58];
  if (v22)
  {
    do
    {
      BOOL v23 = (id *)*v22;

      operator delete(v22);
      int v22 = v23;
    }
    while (v23);
  }
  int v24 = (void *)a1[56];
  a1[56] = 0;
  if (v24) {
    operator delete(v24);
  }
  unsigned int v25 = (char *)*v7;
  if (*v7)
  {
    BOOL v26 = (char *)a1[53];
    BOOL v27 = *v7;
    if (v26 != v25)
    {
      do
      {
        uint64_t v28 = (std::__shared_weak_count *)*((void *)v26 - 1);
        if (v28 && !atomic_fetch_add(&v28->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
          std::__shared_weak_count::__release_weak(v28);
        }
        v26 -= 16;
      }
      while (v26 != v25);
      BOOL v27 = *v7;
    }
    a1[53] = (uint64_t)v25;
    operator delete(v27);
  }
  BOOL v29 = (std::__shared_weak_count *)a1[21];
  if (v29 && !atomic_fetch_add(&v29->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
    std::__shared_weak_count::__release_weak(v29);
  }
  long long v30 = (std::__shared_weak_count *)a1[19];
  if (v30 && !atomic_fetch_add(&v30->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
    std::__shared_weak_count::__release_weak(v30);
  }
  BOOL v31 = (std::__shared_weak_count *)a1[17];
  if (v31 && !atomic_fetch_add(&v31->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
    std::__shared_weak_count::__release_weak(v31);
  }
  if (*((_DWORD *)a1 + 24) && !*((unsigned char *)a1 + 112))
  {
    uint64_t v32 = (os_unfair_lock_s *)(a1[13] + 40);
    os_unfair_lock_lock(v32);
    uint64_t v33 = a1[13];
    uint64_t v34 = *((unsigned int *)a1 + 24);
    uint64_t v35 = *(void *)(v33 + 32);
    BOOL v36 = (int *)MEMORY[0x263F4B188];
    *(_DWORD *)(*(void *)(*(void *)(*(void *)(v33 + 24) + 8) + (int)*MEMORY[0x263F4B188] + 24) + 8 * v34) = v35;
    uint64_t v37 = v35;
    atomic_compare_exchange_strong((atomic_ullong *volatile)(v33 + 32), (unint64_t *)&v37, (v35 & 0xFFFFFFFF00000000 | v34) + 0x100000000);
    if (v37 != v35)
    {
      uint64_t v38 = v37;
      do
      {
        *(_DWORD *)(*(void *)(*(void *)(*(void *)(v33 + 24) + 8) + *v36 + 24) + 8 * v34) = v37;
        atomic_compare_exchange_strong((atomic_ullong *volatile)(v33 + 32), (unint64_t *)&v38, (v37 & 0xFFFFFFFF00000000 | v34) + 0x100000000);
        BOOL v39 = v38 == v37;
        uint64_t v37 = v38;
      }
      while (!v39);
    }
    os_unfair_lock_unlock(v32);
  }
  uint64_t v40 = *a1;
  *a1 = 0;
  if (v40)
  {
    if (*(void *)(v40 + 64) && *(void *)(v40 + 24))
    {
      uint64_t v41 = *(void *)(v40 + 32);
      BOOL v42 = *(NSObject **)(v41 + 16);
      uint64_t v44 = MEMORY[0x263EF8330];
      uint64_t v45 = 3221225472;
      BOOL v46 = ___ZN3AGX4HeapILb1EE14deallocateImplERKNS1_10AllocationE_block_invoke;
      BOOL v47 = &__block_descriptor_48_e5_v8__0l;
      uint64_t v48 = v41;
      BOOL v49 = (uint64_t *)v40;
      dispatch_sync(v42, &v44);
      *(_OWORD *)(v40 + 25) = 0u;
      *(_OWORD *)uint64_t v40 = 0u;
      *(_OWORD *)(v40 + 16) = 0u;
    }
    MEMORY[0x24566ED90](v40, 0x1070C4082A93E96);
  }
  return a1;
}

void sub_242A45138(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v3);
  std::shared_ptr<AGX::HAL200::IntersectionPipelineSets>::~shared_ptr[abi:nn180100](v1 + 608);
  std::shared_ptr<AGX::HAL200::IntersectionPipelineSets>::~shared_ptr[abi:nn180100](v1 + 592);
  std::shared_ptr<AGX::HAL200::IntersectionPipelineSets>::~shared_ptr[abi:nn180100](v1 + 576);
  std::unordered_map<unsigned long long,std::pair<unsigned long long,unsigned long long>>::~unordered_map[abi:nn180100](v1 + 536);
  std::unordered_map<unsigned long long,std::pair<unsigned long long,unsigned long long>>::~unordered_map[abi:nn180100](v1 + 488);
  std::unordered_map<objc_object  {objcproto11MTLFunction}*,RetainedObjCPointer<AGXG17FamilyFunctionHandle *>>::~unordered_map[abi:nn180100](v1 + 448);
  AGX::PipelineDylibResources<AGX::HAL200::ObjClasses,AGX::HAL200::Classes,(AGX::ICBType)1>::~PipelineDylibResources(v2);
  AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::RuntimeState::~RuntimeState((void *)(v1 + 128));
  AGX::Mempool<32u,0u,true,unsigned long long>::Allocation::~Allocation((unsigned int *)(v1 + 96));
  std::unique_ptr<AGX::HeapBuffer>::~unique_ptr[abi:nn180100]((uint64_t *)v1);
  _Unwind_Resume(a1);
}

uint64_t AGX::getIntersectionFunctionPipelineBinaries<AGX::HAL200::Classes>(uint64_t a1)
{
  id v2 = objc_alloc_init(MEMORY[0x263EFF980]);
  char v3 = *(void **)(a1 + 32);
  for (uint64_t i = *(void **)(a1 + 40); v3 != i; v3 += 163)
  {
    uint64_t v6 = v3[14];
    if (!v6) {
      goto LABEL_16;
    }
    id v7 = objc_alloc(MEMORY[0x263F12AF0]);
    if (*(char *)(v6 + 1535) < 0)
    {
      if (*(void *)(v6 + 1520))
      {
LABEL_9:
        id v8 = objc_alloc(MEMORY[0x263EFF8F8]);
        if (*(char *)(v6 + 1535) < 0)
        {
          uint64_t v9 = *(void *)(v6 + 1512);
          uint64_t v10 = *(void *)(v6 + 1520);
        }
        else
        {
          uint64_t v9 = v6 + 1512;
          uint64_t v10 = *(unsigned __int8 *)(v6 + 1535);
        }
        uint64_t v11 = [v8 initWithBytes:v9 length:v10];
        goto LABEL_15;
      }
    }
    else if (*(unsigned char *)(v6 + 1535))
    {
      goto LABEL_9;
    }
    uint64_t v11 = 0;
LABEL_15:
    objc_msgSend(v2, "addObject:", objc_msgSend(v7, "initWithBinary:uniqueIdentifier:debugIdentifier:", v11, *(void *)(v6 + 1064), *(unsigned int *)(v6 + 1056)));
LABEL_16:
    uint64_t v12 = v3[51];
    if (!v12) {
      goto LABEL_26;
    }
    id v13 = objc_alloc(MEMORY[0x263F12AF0]);
    if (*(char *)(v12 + 1535) < 0)
    {
      if (*(void *)(v12 + 1520))
      {
LABEL_19:
        id v14 = objc_alloc(MEMORY[0x263EFF8F8]);
        if (*(char *)(v12 + 1535) < 0)
        {
          uint64_t v15 = *(void *)(v12 + 1512);
          uint64_t v16 = *(void *)(v12 + 1520);
        }
        else
        {
          uint64_t v15 = v12 + 1512;
          uint64_t v16 = *(unsigned __int8 *)(v12 + 1535);
        }
        uint64_t v17 = [v14 initWithBytes:v15 length:v16];
        goto LABEL_25;
      }
    }
    else if (*(unsigned char *)(v12 + 1535))
    {
      goto LABEL_19;
    }
    uint64_t v17 = 0;
LABEL_25:
    objc_msgSend(v2, "addObject:", objc_msgSend(v13, "initWithBinary:uniqueIdentifier:debugIdentifier:", v17, *(void *)(v12 + 1064), *(unsigned int *)(v12 + 1056)));
LABEL_26:
    uint64_t v18 = v3[88];
    if (!v18) {
      goto LABEL_36;
    }
    id v19 = objc_alloc(MEMORY[0x263F12AF0]);
    if (*(char *)(v18 + 1535) < 0)
    {
      if (*(void *)(v18 + 1520))
      {
LABEL_29:
        id v20 = objc_alloc(MEMORY[0x263EFF8F8]);
        if (*(char *)(v18 + 1535) < 0)
        {
          uint64_t v21 = *(void *)(v18 + 1512);
          uint64_t v22 = *(void *)(v18 + 1520);
        }
        else
        {
          uint64_t v21 = v18 + 1512;
          uint64_t v22 = *(unsigned __int8 *)(v18 + 1535);
        }
        uint64_t v23 = [v20 initWithBytes:v21 length:v22];
        goto LABEL_35;
      }
    }
    else if (*(unsigned char *)(v18 + 1535))
    {
      goto LABEL_29;
    }
    uint64_t v23 = 0;
LABEL_35:
    objc_msgSend(v2, "addObject:", objc_msgSend(v19, "initWithBinary:uniqueIdentifier:debugIdentifier:", v23, *(void *)(v18 + 1064), *(unsigned int *)(v18 + 1056)));
LABEL_36:
    uint64_t v24 = v3[125];
    if (!v24) {
      continue;
    }
    id v25 = objc_alloc(MEMORY[0x263F12AF0]);
    if (*(char *)(v24 + 1535) < 0)
    {
      if (*(void *)(v24 + 1520))
      {
LABEL_41:
        id v26 = objc_alloc(MEMORY[0x263EFF8F8]);
        if (*(char *)(v24 + 1535) < 0)
        {
          uint64_t v27 = *(void *)(v24 + 1512);
          uint64_t v28 = *(void *)(v24 + 1520);
        }
        else
        {
          uint64_t v27 = v24 + 1512;
          uint64_t v28 = *(unsigned __int8 *)(v24 + 1535);
        }
        uint64_t v5 = [v26 initWithBytes:v27 length:v28];
        goto LABEL_4;
      }
    }
    else if (*(unsigned char *)(v24 + 1535))
    {
      goto LABEL_41;
    }
    uint64_t v5 = 0;
LABEL_4:
    objc_msgSend(v2, "addObject:", objc_msgSend(v25, "initWithBinary:uniqueIdentifier:debugIdentifier:", v5, *(void *)(v24 + 1064), *(unsigned int *)(v24 + 1056)));
  }
  uint64_t v29 = [v2 copy];

  return v29;
}

uint64_t AGX::PipelineDylibResources<AGX::HAL200::ObjClasses,AGX::HAL200::Classes,(AGX::ICBType)0>::getPipelineBinaries(uint64_t **a1)
{
  id v2 = objc_alloc_init(MEMORY[0x263EFF980]);
  char v3 = *a1;
  int v4 = a1[1];
  if (*a1 != v4)
  {
    do
    {
      uint64_t v5 = *v3;
      if (*v3)
      {
        if (*(char *)(v5 + 87) < 0)
        {
          if (*(void *)(v5 + 72))
          {
LABEL_10:
            id v8 = objc_alloc(MEMORY[0x263EFF8F8]);
            if (*(char *)(v5 + 87) < 0)
            {
              uint64_t v9 = *(void *)(v5 + 64);
              uint64_t v10 = *(void *)(v5 + 72);
            }
            else
            {
              uint64_t v9 = v5 + 64;
              uint64_t v10 = *(unsigned __int8 *)(v5 + 87);
            }
            uint64_t v5 = [v8 initWithBytes:v9 length:v10];
            goto LABEL_4;
          }
        }
        else if (*(unsigned char *)(v5 + 87))
        {
          goto LABEL_10;
        }
        uint64_t v5 = 0;
      }
LABEL_4:
      id v6 = objc_alloc(MEMORY[0x263F12AF0]);
      uint64_t v7 = *v3;
      v3 += 2;
      objc_msgSend(v2, "addObject:", objc_msgSend(v6, "initWithBinary:uniqueIdentifier:debugIdentifier:", v5, *(void *)v7, *(unsigned int *)(v7 + 8)));
    }
    while (v3 != v4);
  }
  uint64_t v11 = [v2 copy];

  return v11;
}

void sub_242A459E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10)
  {
    if (!atomic_fetch_add(&a10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))a10->__on_zero_shared)(a10);
      std::__shared_weak_count::__release_weak(a10);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_242A47428(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,void *__p,uint64_t a54,uint64_t a55,void *a56)
{
  if (__p) {
    operator delete(__p);
  }
  if (a56)
  {
    operator delete(a56);
    if (!v56)
    {
LABEL_5:
      if (!a13) {
        goto LABEL_11;
      }
      goto LABEL_9;
    }
  }
  else if (!v56)
  {
    goto LABEL_5;
  }
  operator delete(v56);
  if (!a13) {
    goto LABEL_11;
  }
LABEL_9:
  if (!atomic_fetch_add(&a13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))a13->__on_zero_shared)(a13);
    std::__shared_weak_count::__release_weak(a13);
  }
LABEL_11:
  _Unwind_Resume(exception_object);
}

void std::vector<std::shared_ptr<AGX::HAL200::DynamicLibrary>>::reserve(uint64_t a1, unint64_t a2)
{
  id v2 = *(char **)a1;
  if (a2 > (uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 4)
  {
    if (a2 >> 60) {
      abort();
    }
    int v4 = *(char **)(a1 + 8);
    uint64_t v5 = 16 * a2;
    id v6 = (char *)operator new(16 * a2);
    uint64_t v7 = &v6[v5];
    id v8 = &v6[v4 - v2];
    if (v4 == v2)
    {
      *(void *)a1 = v8;
      *(void *)(a1 + 8) = v8;
      *(void *)(a1 + 16) = v7;
    }
    else
    {
      uint64_t v9 = &v6[v4 - v2];
      do
      {
        long long v10 = *((_OWORD *)v4 - 1);
        v4 -= 16;
        *((_OWORD *)v9 - 1) = v10;
        v9 -= 16;
        *(void *)int v4 = 0;
        *((void *)v4 + 1) = 0;
      }
      while (v4 != v2);
      id v2 = *(char **)a1;
      uint64_t v11 = *(char **)(a1 + 8);
      *(void *)a1 = v9;
      *(void *)(a1 + 8) = v8;
      for (*(void *)(a1 + 16) = v7; v11 != v2; v11 -= 16)
      {
        uint64_t v12 = (std::__shared_weak_count *)*((void *)v11 - 1);
        if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
          std::__shared_weak_count::__release_weak(v12);
        }
      }
    }
    if (v2)
    {
      operator delete(v2);
    }
  }
}

void std::vector<std::shared_ptr<AGX::HAL200::DynamicLibrary>>::__insert_with_size[abi:nn180100]<std::__wrap_iter<std::shared_ptr<AGX::HAL200::DynamicLibrary> const*>,std::__wrap_iter<std::shared_ptr<AGX::HAL200::DynamicLibrary> const*>>(void **a1, uint64_t a2, void *a3, void *a4, uint64_t a5)
{
  if (a5 < 1) {
    return;
  }
  id v6 = a3;
  id v8 = *a1;
  unint64_t v9 = (unint64_t)a1[1];
  uint64_t v10 = a2 - (void)*a1;
  uint64_t v11 = v10 >> 4;
  unint64_t v12 = (unint64_t)*a1 + (v10 & 0xFFFFFFFFFFFFFFF0);
  id v13 = a1[2];
  if (a5 > (uint64_t)&v13[-v9] >> 4)
  {
    unint64_t v14 = a5 + ((uint64_t)(v9 - (void)v8) >> 4);
    if (v14 >> 60) {
      abort();
    }
    uint64_t v15 = v13 - (unsigned char *)v8;
    if (v15 >> 3 > v14) {
      unint64_t v14 = v15 >> 3;
    }
    if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v16 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v16 = v14;
    }
    if (v16)
    {
      if (v16 >> 60) {
        std::__throw_bad_array_new_length[abi:nn180100]();
      }
      uint64_t v17 = (char *)operator new(16 * v16);
    }
    else
    {
      uint64_t v17 = 0;
    }
    uint64_t v23 = &v17[16 * v11];
    uint64_t v24 = &v23[16 * a5];
    id v25 = v23;
    do
    {
      uint64_t v26 = v6[1];
      *(void *)id v25 = *v6;
      *((void *)v25 + 1) = v26;
      if (v26) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v26 + 8), 1uLL, memory_order_relaxed);
      }
      v25 += 16;
      v6 += 2;
    }
    while (v25 != v24);
    uint64_t v27 = *a1;
    if (*a1 != (void *)v12)
    {
      uint64_t v28 = (void *)v12;
      do
      {
        long long v29 = *((_OWORD *)v28 - 1);
        v28 -= 2;
        *((_OWORD *)v23 - 1) = v29;
        v23 -= 16;
        void *v28 = 0;
        v28[1] = 0;
      }
      while (v28 != v27);
    }
    long long v30 = a1[1];
    if (v30 != (void *)v12)
    {
      do
      {
        *(_OWORD *)uint64_t v24 = *(_OWORD *)v12;
        v24 += 16;
        *(void *)unint64_t v12 = 0;
        *(void *)(v12 + 8) = 0;
        v12 += 16;
      }
      while ((void *)v12 != v30);
      unint64_t v12 = (unint64_t)a1[1];
    }
    BOOL v31 = *a1;
    *a1 = v23;
    a1[1] = v24;
    for (a1[2] = &v17[16 * v16]; (void *)v12 != v31; v12 -= 16)
    {
      uint64_t v32 = *(std::__shared_weak_count **)(v12 - 8);
      if (v32 && !atomic_fetch_add(&v32->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
        std::__shared_weak_count::__release_weak(v32);
      }
    }
    if (v31)
    {
      operator delete(v31);
    }
    return;
  }
  uint64_t v18 = (uint64_t)(v9 - v12) >> 4;
  if (v18 >= a5)
  {
    id v19 = &a3[2 * a5];
    uint64_t v21 = (char *)a1[1];
LABEL_42:
    uint64_t v33 = (char *)(v12 + 16 * a5);
    uint64_t v34 = &v21[-16 * a5];
    uint64_t v35 = v21;
    if ((unint64_t)v34 < v9)
    {
      uint64_t v35 = v21;
      do
      {
        *(_OWORD *)uint64_t v35 = *(_OWORD *)v34;
        v35 += 16;
        *(void *)uint64_t v34 = 0;
        *((void *)v34 + 1) = 0;
        v34 += 16;
      }
      while ((unint64_t)v34 < v9);
    }
    a1[1] = v35;
    if (v21 != v33)
    {
      BOOL v36 = (std::__shared_weak_count **)(v21 - 8);
      uint64_t v37 = 16 * ((v21 - v33) >> 4);
      uint64_t v38 = (uint64_t)&v8[2 * v11 - 2];
      do
      {
        BOOL v39 = (void *)(v38 + v37);
        long long v40 = *(_OWORD *)(v38 + v37);
        *BOOL v39 = 0;
        v39[1] = 0;
        uint64_t v41 = *v36;
        *(_OWORD *)(v36 - 1) = v40;
        if (v41 && !atomic_fetch_add(&v41->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
          std::__shared_weak_count::__release_weak(v41);
        }
        v36 -= 2;
        v37 -= 16;
      }
      while (v37);
    }
    for (; v6 != v19; v12 += 16)
    {
      uint64_t v43 = *v6;
      uint64_t v42 = v6[1];
      if (v42) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v42 + 8), 1uLL, memory_order_relaxed);
      }
      uint64_t v44 = *(std::__shared_weak_count **)(v12 + 8);
      *(void *)unint64_t v12 = v43;
      *(void *)(v12 + 8) = v42;
      if (v44 && !atomic_fetch_add(&v44->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
        std::__shared_weak_count::__release_weak(v44);
      }
      v6 += 2;
    }
    return;
  }
  id v19 = &a3[2 * v18];
  if (v19 == a4)
  {
    uint64_t v21 = (char *)a1[1];
  }
  else
  {
    id v20 = &a3[2 * v18];
    uint64_t v21 = (char *)a1[1];
    do
    {
      uint64_t v22 = v20[1];
      *(void *)uint64_t v21 = *v20;
      *((void *)v21 + 1) = v22;
      if (v22) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v22 + 8), 1uLL, memory_order_relaxed);
      }
      v21 += 16;
      v20 += 2;
    }
    while (v20 != a4);
  }
  a1[1] = v21;
  if ((uint64_t)(v9 - v12) >= 1) {
    goto LABEL_42;
  }
}

void std::__hash_table<std::__hash_value_type<objc_object  {objcproto11MTLFunction}*,RetainedObjCPointer<AGXG17FamilyFunctionHandle *>>,std::__unordered_map_hasher<objc_object  {objcproto11MTLFunction},RetainedObjCPointer<AGXG17FamilyFunctionHandle *>,std::hash<objc_object  {objcproto11MTLFunction}>,std::equal_to<objc_object  {objcproto11MTLFunction}>,true>,std::__unordered_map_equal<objc_object  {objcproto11MTLFunction},RetainedObjCPointer<AGXG17FamilyFunctionHandle *>,std::equal_to,std::hash,true>,std::allocator<RetainedObjCPointer<AGXG17FamilyFunctionHandle *>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<RetainedObjCPointer<AGXG17FamilyFunctionHandle *>,void *> *>>(void *a1, uint64_t **a2)
{
  uint64_t v4 = a1[1];
  if (!v4) {
    goto LABEL_5;
  }
  for (uint64_t i = 0; i != v4; ++i)
    *(void *)(*a1 + 8 * i) = 0;
  id v6 = (uint64_t **)a1[2];
  a1[2] = 0;
  a1[3] = 0;
  if (v6)
  {
    while (a2)
    {
      v6[2] = a2[2];
      if (v6 != a2)
      {
        id v13 = a2[3];
        unint64_t v14 = v6[3];
        if (v14 != v13)
        {
          uint64_t v15 = (uint64_t)v13;

          v6[3] = (uint64_t *)v15;
        }
      }
      unint64_t v12 = *v6;
      std::__hash_table<std::__hash_value_type<objc_object  {objcproto11MTLFunction}*,RetainedObjCPointer<AGXG17FamilyFunctionHandle *>>,std::__unordered_map_hasher<objc_object  {objcproto11MTLFunction},RetainedObjCPointer<AGXG17FamilyFunctionHandle *>,std::hash<objc_object  {objcproto11MTLFunction}>,std::equal_to<objc_object  {objcproto11MTLFunction}>,true>,std::__unordered_map_equal<objc_object  {objcproto11MTLFunction},RetainedObjCPointer<AGXG17FamilyFunctionHandle *>,std::equal_to,std::hash,true>,std::allocator<RetainedObjCPointer<AGXG17FamilyFunctionHandle *>>>::__node_insert_multi((uint64_t)a1, v6);
      a2 = (uint64_t **)*a2;
      id v6 = (uint64_t **)v12;
      if (!v12) {
        goto LABEL_5;
      }
    }
    do
    {
      unint64_t v16 = *v6;

      operator delete(v6);
      id v6 = (uint64_t **)v16;
    }
    while (v16);
  }
  else
  {
LABEL_5:
    while (a2)
    {
      uint64_t v7 = operator new(0x20uLL);
      void *v7 = 0;
      v7[1] = 0;
      id v8 = a2[3];
      v7[2] = a2[2];
      v7[3] = v8;
      unint64_t v9 = v7[2];
      unint64_t v10 = HIDWORD(v9);
      unint64_t v11 = 0x9DDFEA08EB382D69 * (((8 * v9) + 8) ^ HIDWORD(v9));
      v7[1] = 0x9DDFEA08EB382D69
            * ((0x9DDFEA08EB382D69 * (v10 ^ (v11 >> 47) ^ v11)) ^ ((0x9DDFEA08EB382D69 * (v10 ^ (v11 >> 47) ^ v11)) >> 47));
      std::__hash_table<std::__hash_value_type<objc_object  {objcproto11MTLFunction}*,RetainedObjCPointer<AGXG17FamilyFunctionHandle *>>,std::__unordered_map_hasher<objc_object  {objcproto11MTLFunction},RetainedObjCPointer<AGXG17FamilyFunctionHandle *>,std::hash<objc_object  {objcproto11MTLFunction}>,std::equal_to<objc_object  {objcproto11MTLFunction}>,true>,std::__unordered_map_equal<objc_object  {objcproto11MTLFunction},RetainedObjCPointer<AGXG17FamilyFunctionHandle *>,std::equal_to,std::hash,true>,std::allocator<RetainedObjCPointer<AGXG17FamilyFunctionHandle *>>>::__node_insert_multi((uint64_t)a1, v7);
      a2 = (uint64_t **)*a2;
    }
  }
}

void sub_242A47BB8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t AGX::mergeAndInsertAdditionalBinaryLinkedFunctions<AGX::HAL200::ObjClasses,AGX::HAL200::Classes>(void *a1, void *a2, uint64_t a3, uint64_t *a4, uint64_t *a5, int a6, uint64_t *a7)
{
  uint64_t v139 = *MEMORY[0x263EF8340];
  if (*a4)
  {
    id v8 = NSString;
    unint64_t v9 = @"Expected null intersectionPipelineSets for Descendant PSO.";
LABEL_3:
    uint64_t v10 = [v8 stringWithFormat:v9];
    uint64_t result = 0;
    *a7 = v10;
    return result;
  }
  uint64_t v18 = (char *)operator new(0x50uLL);
  *((void *)v18 + 1) = 0;
  *((void *)v18 + 2) = 0;
  *(void *)uint64_t v18 = &unk_26F853B50;
  *(_OWORD *)(v18 + 40) = 0u;
  *(_OWORD *)(v18 + 56) = 0u;
  *((void *)v18 + 9) = 0;
  *(_OWORD *)(v18 + 24) = 0u;
  *((void *)v18 + 6) = dispatch_group_create();
  *((void *)v18 + 7) = 0;
  *((void *)v18 + 8) = 0;
  *((void *)v18 + 9) = 0;
  id v19 = (std::__shared_weak_count *)a4[1];
  *a4 = (uint64_t)(v18 + 24);
  a4[1] = (uint64_t)v18;
  if (v19 && !atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
  }
  obuint32x2_t j = a2;
  if ([a1 requiresRaytracingEmulation])
  {
    BOOL v126 = a1;
    uint64_t v118 = 0;
  }
  else
  {
    uint64_t v20 = *a5;
    if (!*a5)
    {
      id v8 = NSString;
      unint64_t v9 = @"Expected non-null (but possibly empty) intersectionPipelineSets for Parent PSO.";
      goto LABEL_3;
    }
    BOOL v126 = a1;
    BOOL v117 = a4;
    uint64_t v119 = *(void *)(v20 + 40);
    uint64_t v116 = *(void *)(v20 + 32);
    uint64_t v21 = (void *)*a4;
    uint64_t v22 = (os_unfair_lock_s *)(*a4 + 16);
    os_unfair_lock_lock(v22);
    uint64_t v24 = *(void *)(v20 + 32);
    uint64_t v23 = *(void *)(v20 + 40);
    if (v23 - v24 >= 1)
    {
      id v25 = (long long *)v21[5];
      uint64_t v26 = (v23 - v24) / 1304;
      uint64_t v27 = v21[6];
      int v115 = a6;
      if (0x1F693A1C451AB30BLL * ((v27 - (uint64_t)v25) >> 3) >= v26)
      {
        uint64_t v124 = v24;
        if (v26 <= 0)
        {
          uint64_t v122 = v24 + 1304 * v26;
          uint64_t v58 = 1304 * v26;
          BOOL v59 = (char *)v25 - 1304 * v26;
          BOOL v60 = (long long *)v21[5];
          if (v59 < (char *)v25)
          {
            BOOL v61 = (long long *)((char *)v25 - 1304 * v26);
            BOOL v60 = (long long *)v21[5];
            do
            {
              AGX::IntersectionPipelineSetGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::IntersectionPipelineSetGen1(v60, v61);
              BOOL v61 = (long long *)((char *)v61 + 1304);
              BOOL v60 = (long long *)((char *)v60 + 1304);
            }
            while (v61 < v25);
          }
          v21[5] = v60;
          if (v25 != (long long *)((char *)v25 + v58))
          {
            uint64_t v62 = 0;
            do
            {
              BOOL v63 = (uint64_t *)((char *)v25 + v62 - 1200);
              BOOL v64 = &v59[v62 - 1200];
              uint64_t v65 = *v63;
              *BOOL v63 = *(void *)v64;
              *(void *)BOOL v64 = v65;
              std::swap[abi:nn180100]<AGX::HAL200::IntersectionPipeline>((long long *)((char *)v25 + v62 - 1192), (uint64_t)&v59[v62 - 1192]);
              std::swap[abi:nn180100]<AGX::HAL200::IntersectionPipeline>((long long *)((char *)v25 + v62 - 896), (uint64_t)&v59[v62 - 896]);
              std::swap[abi:nn180100]<AGX::HAL200::IntersectionPipeline>((long long *)((char *)v25 + v62 - 600), (uint64_t)&v59[v62 - 600]);
              std::swap[abi:nn180100]<AGX::HAL200::IntersectionPipeline>((long long *)((char *)v25 + v62 - 304), (uint64_t)&v59[v62 - 304]);
              uint64_t v66 = (uint64_t)&v59[v62 - 1304];
              uint64_t v67 = (uint64_t)v25 + v62 - 1304;
              long long v134 = *(long long *)((char *)v25 + v62 - 1256);
              long long v135 = *(long long *)((char *)v25 + v62 - 1240);
              long long v136 = *(long long *)((char *)v25 + v62 - 1224);
              uint64_t v137 = *(void *)((char *)v25 + v62 - 1208);
              long long v131 = *(_OWORD *)v67;
              long long v132 = *(long long *)((char *)v25 + v62 - 1288);
              long long v133 = *(long long *)((char *)v25 + v62 - 1272);
              long long v69 = *(_OWORD *)&v59[v62 - 1288];
              long long v68 = *(_OWORD *)&v59[v62 - 1272];
              *(_OWORD *)uint64_t v67 = *(_OWORD *)v66;
              *(_OWORD *)(v67 + 16) = v69;
              *(_OWORD *)(v67 + 32) = v68;
              long long v71 = *(_OWORD *)&v59[v62 - 1240];
              long long v70 = *(_OWORD *)&v59[v62 - 1224];
              long long v72 = *(_OWORD *)&v59[v62 - 1256];
              *(void *)(v67 + 96) = *(void *)&v59[v62 - 1208];
              *(_OWORD *)(v67 + 64) = v71;
              *(_OWORD *)(v67 + 80) = v70;
              *(_OWORD *)(v67 + 48) = v72;
              *(_OWORD *)(v66 + 32) = v133;
              *(_OWORD *)(v66 + 16) = v132;
              *(_OWORD *)uint64_t v66 = v131;
              *(void *)(v66 + 96) = v137;
              *(_OWORD *)(v66 + 80) = v136;
              *(_OWORD *)(v66 + 64) = v135;
              *(_OWORD *)(v66 + 48) = v134;
              uint64_t v73 = *(void *)((char *)v25 + v62 - 8);
              *(void *)((char *)v25 + v62 - 8) = *(void *)&v59[v62 - 8];
              *(void *)&v59[v62 - 8] = v73;
              v62 -= 1304;
            }
            while (-8 * (-v58 >> 3) != v62);
          }
          a6 = v115;
          if (v122 != v24)
          {
            uint64_t v74 = 0;
            do
            {
              BOOL v75 = (char *)v25 + v74;

              *((void *)v75 + 13) = 0;
              *((void *)v75 + 162) = 0;
              BOOL v76 = (void *)((char *)v25 + v74);
              std::array<AGX::HAL200::IntersectionPipeline,4ul>::~array((long long *)((char *)v25 + v74 + 112));
              uint64_t v77 = v24 + v74;
              *((void *)v75 + 13) = *(id *)(v24 + v74 + 104);
              *(void *)((char *)v25 + v74 + 112) = *(void *)(v24 + v74 + 112);
              AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::RuntimeState::operator=((uint64_t)v25 + v74 + 120, (uint64_t *)(v24 + v74 + 120));
              v76[51] = *(void *)(v24 + v74 + 408);
              AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::RuntimeState::operator=((uint64_t)v25 + v74 + 416, (uint64_t *)(v24 + v74 + 416));
              v76[88] = *(void *)(v24 + v74 + 704);
              AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::RuntimeState::operator=((uint64_t)v25 + v74 + 712, (uint64_t *)(v24 + v74 + 712));
              v76[125] = *(void *)(v24 + v74 + 1000);
              AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::RuntimeState::operator=((uint64_t)v25 + v74 + 1008, (uint64_t *)(v24 + v74 + 1008));
              long long v78 = *(_OWORD *)(v124 + v74);
              long long v79 = *(_OWORD *)(v124 + v74 + 32);
              *((_OWORD *)v75 + 1) = *(_OWORD *)(v124 + v74 + 16);
              *((_OWORD *)v75 + 2) = v79;
              *(_OWORD *)BOOL v75 = v78;
              long long v80 = *(_OWORD *)(v124 + v74 + 48);
              long long v81 = *(_OWORD *)(v124 + v74 + 64);
              long long v82 = *(_OWORD *)(v124 + v74 + 80);
              uint64_t v24 = v124;
              *((void *)v75 + 12) = *(void *)(v124 + v74 + 96);
              *((_OWORD *)v75 + 4) = v81;
              *((_OWORD *)v75 + 5) = v82;
              *((_OWORD *)v75 + 3) = v80;
              *((void *)v75 + 162) = *(id *)(v77 + 1296);
              v74 += 1304;
            }
            while (v124 + v74 != v122);
          }
        }
        else
        {
          uint64_t v121 = v24;
          if (v24 == v23)
          {
            uint64_t v43 = (char *)v21[5];
          }
          else
          {
            int v34 = a6;
            uint64_t v35 = 0;
            do
            {
              uint64_t v36 = v121 + v35;
              uint64_t v37 = (char *)v25 + v35;
              long long v38 = *(_OWORD *)(v121 + v35);
              long long v39 = *(_OWORD *)(v121 + v35 + 32);
              *((_OWORD *)v37 + 1) = *(_OWORD *)(v121 + v35 + 16);
              *((_OWORD *)v37 + 2) = v39;
              *(_OWORD *)uint64_t v37 = v38;
              long long v40 = *(_OWORD *)(v121 + v35 + 48);
              long long v41 = *(_OWORD *)(v121 + v35 + 64);
              long long v42 = *(_OWORD *)(v121 + v35 + 80);
              *((void *)v37 + 12) = *(void *)(v121 + v35 + 96);
              *((_OWORD *)v37 + 4) = v41;
              *((_OWORD *)v37 + 5) = v42;
              *((_OWORD *)v37 + 3) = v40;
              *((void *)v37 + 13) = *(id *)(v121 + v35 + 104);
              std::array<AGX::HAL200::IntersectionPipeline,4ul>::array((uint64_t)v25 + v35 + 112, v121 + v35 + 112);
              *((void *)v37 + 162) = *(id *)(v121 + v35 + 1296);
              v35 += 1304;
            }
            while (v36 + 1304 != v23);
            uint64_t v43 = (char *)v25 + v35;
            a6 = v34;
          }
          v21[5] = v43;
        }
      }
      else
      {
        uint64_t v28 = v21[4];
        uint64_t v29 = 0x1F693A1C451AB30BLL * (((uint64_t)v25 - v28) >> 3);
        unint64_t v30 = v29 + v26;
        if ((unint64_t)(v29 + v26) > 0x3241F693A1C451) {
          abort();
        }
        unint64_t v31 = 0x1F693A1C451AB30BLL * ((v27 - v28) >> 3);
        if (2 * v31 > v30) {
          unint64_t v30 = 2 * v31;
        }
        if (v31 >= 0x1920FB49D0E228) {
          unint64_t v32 = 0x3241F693A1C451;
        }
        else {
          unint64_t v32 = v30;
        }
        *(void *)&long long v133 = v21 + 6;
        if (v32)
        {
          if (v32 > 0x3241F693A1C451) {
            std::__throw_bad_array_new_length[abi:nn180100]();
          }
          uint64_t v33 = (char *)operator new(1304 * v32);
        }
        else
        {
          uint64_t v33 = 0;
        }
        uint64_t v44 = (long long *)&v33[1304 * v29];
        *(void *)&long long v131 = v33;
        *((void *)&v131 + 1) = v44;
        *((void *)&v132 + 1) = &v33[1304 * v32];
        uint64_t v45 = 1304 * v26;
        BOOL v46 = (long long *)((char *)v44 + 1304 * v26);
        uint64_t v47 = v24 + 112;
        uint64_t v48 = v44;
        do
        {
          long long v49 = *(_OWORD *)(v47 - 112);
          long long v50 = *(_OWORD *)(v47 - 80);
          v48[1] = *(_OWORD *)(v47 - 96);
          _OWORD v48[2] = v50;
          *uint64_t v48 = v49;
          long long v51 = *(_OWORD *)(v47 - 64);
          long long v52 = *(_OWORD *)(v47 - 48);
          long long v53 = *(_OWORD *)(v47 - 32);
          *((void *)v48 + 12) = *(void *)(v47 - 16);
          v48[4] = v52;
          v48[5] = v53;
          v48[3] = v51;
          *((void *)v48 + 13) = *(id *)(v47 - 8);
          std::array<AGX::HAL200::IntersectionPipeline,4ul>::array((uint64_t)(v48 + 7), v47);
          *((void *)v48 + 162) = *(id *)(v47 + 1184);
          uint64_t v48 = (long long *)((char *)v48 + 1304);
          v47 += 1304;
          v45 -= 1304;
        }
        while (v45);
        *(void *)&long long v132 = v46;
        BOOL v54 = (long long *)v21[4];
        if (v54 != v25)
        {
          BOOL v55 = v25;
          do
          {
            uint64_t v44 = (long long *)((char *)v44 - 1304);
            BOOL v55 = (long long *)((char *)v55 - 1304);
            AGX::IntersectionPipelineSetGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::IntersectionPipelineSetGen1(v44, v55);
          }
          while (v55 != v54);
          BOOL v46 = (long long *)v132;
        }
        *((void *)&v131 + 1) = v44;
        BOOL v56 = (long long *)v21[5];
        if (v56 != v25)
        {
          do
          {
            AGX::IntersectionPipelineSetGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::IntersectionPipelineSetGen1(v46, v25);
            id v25 = (long long *)((char *)v25 + 1304);
            BOOL v46 = (long long *)((char *)v46 + 1304);
          }
          while (v25 != v56);
          uint64_t v44 = (long long *)*((void *)&v131 + 1);
          id v25 = (long long *)v21[5];
        }
        BOOL v57 = (long long *)v21[4];
        v21[4] = v44;
        v21[5] = v46;
        for (void v21[6] = *((void *)&v132 + 1); v25 != v57; v25 = (long long *)((char *)v25 - 1304))
        {

          *((void *)v25 - 150) = 0;
          *((void *)v25 - 1) = 0;
          std::array<AGX::HAL200::IntersectionPipeline,4ul>::~array((void *)v25 - 149);
        }
        if (v57) {
          operator delete(v57);
        }
        a6 = v115;
      }
    }
    uint64_t v118 = 0x1F693A1C451AB30BLL * ((v119 - v116) >> 3);
    os_unfair_lock_unlock(v22);
    a2 = obj;
    AGX::IntersectionPipelineSetsGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::merge(*v117, obj, a6);
  }
  long long v129 = 0u;
  long long v130 = 0u;
  long long v127 = 0u;
  long long v128 = 0u;
  uint64_t v125 = [a2 countByEnumeratingWithState:&v127 objects:v138 count:16];
  if (!v125) {
    return 1;
  }
  uint64_t v123 = *(void *)v128;
  BOOL v83 = (void *)(a3 + 16);
  while (2)
  {
    for (uint64_t i = 0; i != v125; ++i)
    {
      if (*(void *)v128 != v123) {
        objc_enumerationMutation(obj);
      }
      unint64_t v85 = *(void *)(*((void *)&v127 + 1) + 8 * i);
      if ([(id)v85 functionType] == 6 && (objc_msgSend(v126, "requiresRaytracingEmulation") & 1) == 0)
      {
        if (!std::__hash_table<std::__hash_value_type<objc_object  {objcproto11MTLFunction}*,RetainedObjCPointer<AGXG17FamilyFunctionHandle *>>,std::__unordered_map_hasher<objc_object  {objcproto11MTLFunction},RetainedObjCPointer<AGXG17FamilyFunctionHandle *>,std::hash<objc_object  {objcproto11MTLFunction}>,std::equal_to<objc_object  {objcproto11MTLFunction}>,true>,std::__unordered_map_equal<objc_object  {objcproto11MTLFunction},RetainedObjCPointer<AGXG17FamilyFunctionHandle *>,std::equal_to,std::hash,true>,std::allocator<RetainedObjCPointer<AGXG17FamilyFunctionHandle *>>>::find<objc_object  {objcproto11MTLFunction}>((void *)a3, v85)) {
          std::__hash_table<std::__hash_value_type<objc_object  {objcproto11MTLFunction}*,RetainedObjCPointer<AGXG17FamilyFunctionHandle *>>,std::__unordered_map_hasher<objc_object  {objcproto11MTLFunction},RetainedObjCPointer<AGXG17FamilyFunctionHandle *>,std::hash<objc_object  {objcproto11MTLFunction}>,std::equal_to<objc_object  {objcproto11MTLFunction}>,true>,std::__unordered_map_equal<objc_object  {objcproto11MTLFunction},RetainedObjCPointer<AGXG17FamilyFunctionHandle *>,std::equal_to,std::hash,true>,std::allocator<RetainedObjCPointer<AGXG17FamilyFunctionHandle *>>>::__emplace_unique_impl<_MTLFunction *&,AGXG17FamilyFunctionHandle>(a3, v85, -[AGXG17FamilyFunctionHandle initWithFunctionType:name:device:handle:dylib:]([AGXG17FamilyFunctionHandle alloc], "initWithFunctionType:name:device:handle:dylib:", [(id)v85 functionType], objc_msgSend((id)v85, "name"), v126, v118++, 0));
        }
        continue;
      }
      uint64_t result = [(id)v85 vendorPrivate];
      if (!result) {
        return result;
      }
      [(id)v85 vendorPrivate];
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) == 0) {
        return 0;
      }
      uint64_t v86 = [(id)v85 vendorPrivate];
      uint64_t v87 = v86;
      if (!v86) {
        return 0;
      }
      uint64_t v88 = *(void *)(v86 + 56);
      AGX::DynamicLibrary<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::allocateCodeHeap(v88);
      BOOL v89 = (void *)[(id)v85 name];
      uint64_t v90 = AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::LinkInfo::addressForSymbol(v88 + 96, (char *)[v89 cStringUsingEncoding:4], *(void *)(*(void *)(v87 + 56) + 680));
      if (v90 == -1)
      {
        AGX::DynamicLibrary<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::deallocateCodeHeap(*(void *)(v87 + 56));
        return 0;
      }
      BOOL v91 = [AGXG17FamilyFunctionHandle alloc];
      uint64_t v92 = -[AGXG17FamilyFunctionHandle initWithFunctionType:name:device:handle:dylib:](v91, "initWithFunctionType:name:device:handle:dylib:", [(id)v85 functionType], v89, v126, v90, v87);
      unint64_t v93 = 0x9DDFEA08EB382D69 * (((8 * v85) + 8) ^ HIDWORD(v85));
      unint64_t v94 = 0x9DDFEA08EB382D69 * (HIDWORD(v85) ^ (v93 >> 47) ^ v93);
      unint64_t v95 = 0x9DDFEA08EB382D69 * (v94 ^ (v94 >> 47));
      unint64_t v96 = *(void *)(a3 + 8);
      if (v96)
      {
        uint8x8_t v97 = (uint8x8_t)vcnt_s8((int8x8_t)v96);
        v97.i16[0] = vaddlv_u8(v97);
        if (v97.u32[0] > 1uLL)
        {
          BOOL v91 = (AGXG17FamilyFunctionHandle *)(0x9DDFEA08EB382D69 * (v94 ^ (v94 >> 47)));
          if (v95 >= v96) {
            BOOL v91 = (AGXG17FamilyFunctionHandle *)(v95 % v96);
          }
        }
        else
        {
          BOOL v91 = (AGXG17FamilyFunctionHandle *)(v95 & (v96 - 1));
        }
        int v98 = *(void ***)(*(void *)a3 + 8 * (void)v91);
        if (v98)
        {
          int v99 = *v98;
          if (*v98)
          {
            if (v97.u32[0] < 2uLL)
            {
              while (1)
              {
                uint64_t v101 = v99[1];
                if (v101 == v95)
                {
                  if (v99[2] == v85) {
                    goto LABEL_127;
                  }
                }
                else if ((AGXG17FamilyFunctionHandle *)(v101 & (v96 - 1)) != v91)
                {
                  goto LABEL_90;
                }
                int v99 = (void *)*v99;
                if (!v99) {
                  goto LABEL_90;
                }
              }
            }
            do
            {
              unint64_t v100 = v99[1];
              if (v100 == v95)
              {
                if (v99[2] == v85) {
                  goto LABEL_127;
                }
              }
              else
              {
                if (v100 >= v96) {
                  v100 %= v96;
                }
                if ((AGXG17FamilyFunctionHandle *)v100 != v91) {
                  break;
                }
              }
              int v99 = (void *)*v99;
            }
            while (v99);
          }
        }
      }
LABEL_90:
      int v99 = operator new(0x20uLL);
      *(void *)&long long v131 = v99;
      *((void *)&v131 + 1) = a3 + 16;
      *int v99 = 0;
      v99[1] = v95;
      v99[2] = v85;
      v99[3] = 0;
      float v102 = (float)(unint64_t)(*(void *)(a3 + 24) + 1);
      LOBYTE(v132) = 1;
      float v103 = *(float *)(a3 + 32);
      if ((((float)(v103 * (float)v96) >= v102) & ~(v96 == 0)) == 0)
      {
        BOOL v104 = (v96 & (v96 - 1)) != 0;
        if (v96 < 3) {
          BOOL v104 = 1;
        }
        unint64_t v105 = v104 | (2 * v96);
        unint64_t v106 = vcvtps_u32_f32(v102 / v103);
        if (v105 <= v106) {
          size_t prime = v106;
        }
        else {
          size_t prime = v105;
        }
        if (prime == 1)
        {
          size_t prime = 2;
        }
        else if ((prime & (prime - 1)) != 0)
        {
          size_t prime = std::__next_prime(prime);
          unint64_t v96 = *(void *)(a3 + 8);
        }
        if (prime > v96) {
          goto LABEL_101;
        }
        if (prime < v96)
        {
          unint64_t v108 = vcvtps_u32_f32((float)*(unint64_t *)(a3 + 24) / *(float *)(a3 + 32));
          if (v96 < 3 || (uint8x8_t v109 = (uint8x8_t)vcnt_s8((int8x8_t)v96), v109.i16[0] = vaddlv_u8(v109), v109.u32[0] > 1uLL))
          {
            unint64_t v108 = std::__next_prime(v108);
          }
          else
          {
            uint64_t v110 = 1 << -(char)__clz(v108 - 1);
            if (v108 >= 2) {
              unint64_t v108 = v110;
            }
          }
          if (prime <= v108) {
            size_t prime = v108;
          }
          if (prime < v96) {
LABEL_101:
          }
            std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::__do_rehash<true>(a3, prime);
        }
        unint64_t v96 = *(void *)(a3 + 8);
        if ((v96 & (v96 - 1)) != 0)
        {
          if (v95 >= v96) {
            BOOL v91 = (AGXG17FamilyFunctionHandle *)(v95 % v96);
          }
          else {
            BOOL v91 = (AGXG17FamilyFunctionHandle *)v95;
          }
        }
        else
        {
          BOOL v91 = (AGXG17FamilyFunctionHandle *)((v96 - 1) & v95);
        }
      }
      uint64_t v111 = *(void *)a3;
      BOOL v112 = *(void **)(*(void *)a3 + 8 * (void)v91);
      if (v112)
      {
        *int v99 = *v112;
      }
      else
      {
        *int v99 = *v83;
        void *v83 = v99;
        *(void *)(v111 + 8 * (void)v91) = v83;
        if (!*v99) {
          goto LABEL_126;
        }
        unint64_t v113 = *(void *)(*v99 + 8);
        if ((v96 & (v96 - 1)) != 0)
        {
          if (v113 >= v96) {
            v113 %= v96;
          }
        }
        else
        {
          v113 &= v96 - 1;
        }
        BOOL v112 = (void *)(*(void *)a3 + 8 * v113);
      }
      *BOOL v112 = v99;
LABEL_126:
      ++*(void *)(a3 + 24);
LABEL_127:
      BOOL v114 = (void *)v99[3];
      if (v114 != (void *)v92)
      {

        v99[3] = v92;
      }
    }
    uint64_t v125 = [obj countByEnumeratingWithState:&v127 objects:v138 count:16];
    uint64_t result = 1;
    if (v125) {
      continue;
    }
    return result;
  }
}

void sub_242A48898(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, os_unfair_lock_t lock, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31)
{
  os_unfair_lock_unlock(v31);
  _Unwind_Resume(a1);
}

uint64_t AGX::ComputePipeline<AGX::HAL200::ObjClasses,AGX::HAL200::Classes,AGX::HAL200::Encoders>::createScsPerShaderConfigTable(uint64_t result)
{
  if ((*(unsigned char *)(*(void *)(result + 16) + 1951) & 0x40) != 0) {
    operator new();
  }
  return result;
}

void AGX::ComputePipeline<AGX::HAL200::ObjClasses,AGX::HAL200::Classes,AGX::HAL200::Encoders>::constructSpillParamsForIntersection(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 576))
  {
    AGX::SpillInfoGen3<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::SpillInfoGen3((uint64_t)v134, a2, 0);
    int32x4_t v4 = 0uLL;
    int32x4_t v135 = 0u;
    memset(v134, 0, sizeof(v134));
    uint64_t v5 = *(void *)(a1 + 576);
    uint64_t v6 = *(void *)(v5 + 32);
    uint64_t v7 = *(void *)(v5 + 40);
    if (v6 != v7)
    {
      int v8 = 0;
      char v9 = 0;
      do
      {
        while (1)
        {
          uint64_t v10 = *(void *)(v6 + 112);
          if (v10)
          {
            int v11 = *(_DWORD *)(v10 + 952);
            int v12 = *(_DWORD *)(v10 + 984);
            int v13 = 32 * *(_DWORD *)(v6 + 184);
            int v14 = v13 + 69631;
            if (v13 + 69631 < 0) {
              int v14 = v13 + 73726;
            }
            int v15 = v14 >> 12;
            int v16 = v13 + 0x1FFFF;
            int v17 = v13 + 196606;
            if (v16 >= 0) {
              int v17 = v16;
            }
            int v18 = v17 >> 16;
            if (*(_DWORD *)(*((void *)&v136 + 1) + 5864) == 21) {
              int v19 = 10;
            }
            else {
              int v19 = 14;
            }
            int v20 = 32 * (*(_DWORD *)(v6 + 204) + *(_DWORD *)(v6 + 172));
            int v21 = v20 + 17279;
            if (v20 + 17279 < 0) {
              int v21 = v20 + 21374;
            }
            int v22 = v21 >> 12;
            int v23 = (v20 + 78719) / 0x10000;
            int v24 = (48 * (v15 + v22) + v19 * (v18 + v23)) * HIDWORD(v137);
            int v25 = 32 * v12;
            int v26 = v25 + 69631;
            if (v25 + 69631 < 0) {
              int v26 = v25 + 73726;
            }
            int v27 = v25 + 0x1FFFF;
            int v28 = v25 + 196606;
            if (v27 >= 0) {
              int v28 = v27;
            }
            int v29 = 32 * v11;
            int v30 = v29 + 78719;
            if (v29 + 78719 < 0) {
              int v30 = v29 + 144254;
            }
            int v31 = v30 >> 16;
            int v32 = v29 + 17279;
            int v33 = v29 + 21374;
            if (v32 >= 0) {
              int v33 = v32;
            }
            int v34 = v31 + (v33 >> 12) + (v28 >> 16) + (v26 >> 12);
            int v35 = HIDWORD(v137) * v34;
            if (HIDWORD(v137) * v34 <= v24) {
              int v35 = v24;
            }
            int v36 = v23 + v22 + v18 + v15;
            if (v8 <= v35) {
              int v8 = v35;
            }
            DWORD2(v134[1]) = 0;
            HIDWORD(v134[1]) = v8;
            int32x4_t v4 = vmaxq_s32(v4, (int32x4_t)__PAIR64__(v36, v34));
            int32x4_t v135 = v4;
            char v9 = 1;
          }
          uint64_t v37 = *(void *)(v6 + 408);
          if (v37)
          {
            int v38 = *(_DWORD *)(v37 + 952);
            int v39 = *(_DWORD *)(v37 + 984);
            int v40 = 32 * *(_DWORD *)(v6 + 480);
            int v41 = v40 + 69631;
            if (v40 + 69631 < 0) {
              int v41 = v40 + 73726;
            }
            int v42 = v41 >> 12;
            int v43 = v40 + 0x1FFFF;
            int v44 = v40 + 196606;
            if (v43 >= 0) {
              int v44 = v43;
            }
            int v45 = v44 >> 16;
            if (*(_DWORD *)(*((void *)&v136 + 1) + 5864) == 21) {
              int v46 = 10;
            }
            else {
              int v46 = 14;
            }
            int v47 = 32 * (*(_DWORD *)(v6 + 500) + *(_DWORD *)(v6 + 468));
            int v48 = v47 + 17279;
            if (v47 + 17279 < 0) {
              int v48 = v47 + 21374;
            }
            int v49 = v48 >> 12;
            int v50 = (v47 + 78719) / 0x10000;
            int v51 = (48 * (v42 + v49) + v46 * (v45 + v50)) * HIDWORD(v137);
            int v52 = 32 * v39;
            int v53 = v52 + 69631;
            if (v52 + 69631 < 0) {
              int v53 = v52 + 73726;
            }
            int v54 = v52 + 0x1FFFF;
            int v55 = v52 + 196606;
            if (v54 >= 0) {
              int v55 = v54;
            }
            int v56 = 32 * v38;
            int v57 = v56 + 78719;
            if (v56 + 78719 < 0) {
              int v57 = v56 + 144254;
            }
            int v58 = v57 >> 16;
            int v59 = v56 + 17279;
            int v60 = v56 + 21374;
            if (v59 >= 0) {
              int v60 = v59;
            }
            int v61 = v58 + (v60 >> 12) + (v55 >> 16) + (v53 >> 12);
            int v62 = HIDWORD(v137) * v61;
            if (HIDWORD(v137) * v61 <= v51) {
              int v62 = v51;
            }
            int v63 = v50 + v49 + v45 + v42;
            if (v8 <= v62) {
              int v8 = v62;
            }
            DWORD2(v134[1]) = 0;
            HIDWORD(v134[1]) = v8;
            int32x4_t v4 = vmaxq_s32(v4, (int32x4_t)__PAIR64__(v63, v61));
            int32x4_t v135 = v4;
            char v9 = 1;
          }
          uint64_t v64 = *(void *)(v6 + 704);
          if (v64)
          {
            int v65 = *(_DWORD *)(v64 + 952);
            int v66 = *(_DWORD *)(v64 + 984);
            int v67 = 32 * *(_DWORD *)(v6 + 776);
            int v68 = v67 + 69631;
            if (v67 + 69631 < 0) {
              int v68 = v67 + 73726;
            }
            int v69 = v68 >> 12;
            int v70 = v67 + 0x1FFFF;
            int v71 = v67 + 196606;
            if (v70 >= 0) {
              int v71 = v70;
            }
            int v72 = v71 >> 16;
            if (*(_DWORD *)(*((void *)&v136 + 1) + 5864) == 21) {
              int v73 = 10;
            }
            else {
              int v73 = 14;
            }
            int v74 = 32 * (*(_DWORD *)(v6 + 796) + *(_DWORD *)(v6 + 764));
            int v75 = v74 + 17279;
            if (v74 + 17279 < 0) {
              int v75 = v74 + 21374;
            }
            int v76 = v75 >> 12;
            int v77 = (v74 + 78719) / 0x10000;
            int v78 = (48 * (v69 + v76) + v73 * (v72 + v77)) * HIDWORD(v137);
            int v79 = 32 * v66;
            int v80 = v79 + 69631;
            if (v79 + 69631 < 0) {
              int v80 = v79 + 73726;
            }
            int v81 = v79 + 0x1FFFF;
            int v82 = v79 + 196606;
            if (v81 >= 0) {
              int v82 = v81;
            }
            int v83 = 32 * v65;
            int v84 = v83 + 78719;
            if (v83 + 78719 < 0) {
              int v84 = v83 + 144254;
            }
            int v85 = v84 >> 16;
            int v86 = v83 + 17279;
            int v87 = v83 + 21374;
            if (v86 >= 0) {
              int v87 = v86;
            }
            int v88 = v85 + (v87 >> 12) + (v82 >> 16) + (v80 >> 12);
            int v89 = HIDWORD(v137) * v88;
            if (HIDWORD(v137) * v88 <= v78) {
              int v89 = v78;
            }
            int v90 = v77 + v76 + v72 + v69;
            if (v8 <= v89) {
              int v8 = v89;
            }
            DWORD2(v134[1]) = 0;
            HIDWORD(v134[1]) = v8;
            int32x4_t v4 = vmaxq_s32(v4, (int32x4_t)__PAIR64__(v90, v88));
            int32x4_t v135 = v4;
            char v9 = 1;
          }
          uint64_t v91 = *(void *)(v6 + 1000);
          if (!v91) {
            break;
          }
          int v92 = *(_DWORD *)(v91 + 952);
          int v93 = *(_DWORD *)(v91 + 984);
          int v94 = 32 * *(_DWORD *)(v6 + 1072);
          int v95 = v94 + 69631;
          if (v94 + 69631 < 0) {
            int v95 = v94 + 73726;
          }
          int v96 = v95 >> 12;
          int v97 = v94 + 0x1FFFF;
          int v98 = v94 + 196606;
          if (v97 >= 0) {
            int v98 = v97;
          }
          int v99 = v98 >> 16;
          if (*(_DWORD *)(*((void *)&v136 + 1) + 5864) == 21) {
            int v100 = 10;
          }
          else {
            int v100 = 14;
          }
          int v101 = 32 * (*(_DWORD *)(v6 + 1092) + *(_DWORD *)(v6 + 1060));
          int v102 = v101 + 17279;
          if (v101 + 17279 < 0) {
            int v102 = v101 + 21374;
          }
          int v103 = v102 >> 12;
          int v104 = (v101 + 78719) / 0x10000;
          int v105 = (48 * (v96 + v103) + v100 * (v99 + v104)) * HIDWORD(v137);
          int v106 = 32 * v93;
          int v107 = v106 + 69631;
          if (v106 + 69631 < 0) {
            int v107 = v106 + 73726;
          }
          int v108 = v106 + 0x1FFFF;
          int v109 = v106 + 196606;
          if (v108 >= 0) {
            int v109 = v108;
          }
          int v110 = 32 * v92;
          int v111 = v110 + 78719;
          if (v110 + 78719 < 0) {
            int v111 = v110 + 144254;
          }
          int v112 = v111 >> 16;
          int v113 = v110 + 17279;
          int v114 = v110 + 21374;
          if (v113 >= 0) {
            int v114 = v113;
          }
          int v115 = v112 + (v114 >> 12) + (v109 >> 16) + (v107 >> 12);
          int v116 = HIDWORD(v137) * v115;
          if (HIDWORD(v137) * v115 <= v105) {
            int v116 = v105;
          }
          int v117 = v104 + v103 + v99 + v96;
          if (v8 <= v116) {
            int v8 = v116;
          }
          DWORD2(v134[1]) = 0;
          HIDWORD(v134[1]) = v8;
          int32x4_t v4 = vmaxq_s32(v4, (int32x4_t)__PAIR64__(v117, v115));
          int32x4_t v135 = v4;
          v6 += 1304;
          char v9 = 1;
          if (v6 == v7) {
            goto LABEL_99;
          }
        }
        v6 += 1304;
      }
      while (v6 != v7);
      if ((v9 & 1) == 0) {
        return;
      }
LABEL_99:
      uint64_t v118 = (char *)operator new(0x90uLL);
      long long v119 = v138;
      *(_OWORD *)(v118 + 88) = v137;
      *(_OWORD *)(v118 + 104) = v119;
      *(_OWORD *)(v118 + 120) = v139;
      long long v120 = v134[1];
      *(_OWORD *)(v118 + 24) = v134[0];
      *(_OWORD *)(v118 + 40) = v120;
      long long v121 = v136;
      *(int32x4_t *)(v118 + 56) = v135;
      *((void *)v118 + 1) = 0;
      *((void *)v118 + 2) = 0;
      *(void *)uint64_t v118 = &unk_26F853A40;
      *((void *)v118 + 17) = v140;
      *(_OWORD *)(v118 + 72) = v121;
      *(void *)(a1 + 608) = v118 + 24;
      uint64_t v122 = *(std::__shared_weak_count **)(a1 + 616);
      *(void *)(a1 + 616) = v118;
      if (v122 && !atomic_fetch_add(&v122->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v122->__on_zero_shared)(v122);
        std::__shared_weak_count::__release_weak(v122);
      }
      if (*(unsigned char *)(a1 + 24))
      {
        uint64_t v123 = *(void *)(a2 + 7392);
        int v124 = DWORD1(v134[0]);
        if (SDWORD1(v134[0]) > *(_DWORD *)(v123 + 4))
        {
          *(_DWORD *)uint64_t v123 = v134[0];
          *(_DWORD *)(v123 + 4) = v124;
          *(_OWORD *)(v123 + 8) = *(_OWORD *)((char *)v134 + 8);
        }
        int v125 = DWORD2(v134[1]);
        int v126 = *(_DWORD *)(v123 + 28);
        if (*(_DWORD *)(v123 + 24) > SDWORD2(v134[1])) {
          int v125 = *(_DWORD *)(v123 + 24);
        }
        *(_DWORD *)(v123 + 24) = v125;
        int v127 = HIDWORD(v134[1]);
        if (v126 > SHIDWORD(v134[1])) {
          int v127 = v126;
        }
        *(_DWORD *)(v123 + 28) = v127;
        __int32 v128 = v135.i32[0];
        int v129 = *(_DWORD *)(v123 + 36);
        if (*(_DWORD *)(v123 + 32) > v135.i32[0]) {
          __int32 v128 = *(_DWORD *)(v123 + 32);
        }
        *(_DWORD *)(v123 + 32) = v128;
        int v130 = v135.i32[1];
        if (v129 > v135.i32[1]) {
          int v130 = v129;
        }
        *(_DWORD *)(v123 + 36) = v130;
        __int32 v131 = v135.i32[2];
        int v132 = *(_DWORD *)(v123 + 44);
        if (*(_DWORD *)(v123 + 40) > v135.i32[2]) {
          __int32 v131 = *(_DWORD *)(v123 + 40);
        }
        *(_DWORD *)(v123 + 40) = v131;
        int v133 = v135.i32[3];
        if (v132 > v135.i32[3]) {
          int v133 = v132;
        }
        *(_DWORD *)(v123 + 44) = v133;
      }
    }
  }
}

void std::__shared_ptr_emplace<AGX::HAL200::SpillInfo>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F853A40;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x24566ED90);
}

void std::__shared_ptr_emplace<AGX::HAL200::SpillInfo>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F853A40;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 *std::vector<std::shared_ptr<AGX::HAL200::DynamicLibrary>>::__emplace_back_slow_path<std::shared_ptr<AGX::HAL200::DynamicLibrary>&>(uint64_t a1, __n128 a2)
{
  id v2 = *(__n128 **)a1;
  char v3 = *(__n128 **)(a1 + 8);
  uint64_t v4 = ((uint64_t)v3 - *(void *)a1) >> 4;
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 60) {
    abort();
  }
  uint64_t v7 = *(void *)(a1 + 16) - (void)v2;
  if (v7 >> 3 > v5) {
    unint64_t v5 = v7 >> 3;
  }
  if ((unint64_t)v7 >= 0x7FFFFFFFFFFFFFF0) {
    unint64_t v5 = 0xFFFFFFFFFFFFFFFLL;
  }
  if (v5 >> 60) {
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  uint64_t v8 = 16 * v5;
  char v9 = (char *)operator new(16 * v5);
  uint64_t v10 = (__n128 *)&v9[16 * v4];
  *uint64_t v10 = a2;
  if (a2.n128_u64[1])
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(a2.n128_u64[1] + 8), 1uLL, memory_order_relaxed);
    id v2 = *(__n128 **)a1;
    char v3 = *(__n128 **)(a1 + 8);
  }
  int v11 = &v9[v8];
  int v12 = v10 + 1;
  if (v3 == v2)
  {
    *(void *)a1 = v10;
    *(void *)(a1 + 8) = v12;
    *(void *)(a1 + 16) = v11;
  }
  else
  {
    do
    {
      __n128 v13 = v3[-1];
      --v3;
      v10[-1] = v13;
      --v10;
      v3->n128_u64[0] = 0;
      v3->n128_u64[1] = 0;
    }
    while (v3 != v2);
    id v2 = *(__n128 **)a1;
    int v14 = *(__n128 **)(a1 + 8);
    *(void *)a1 = v10;
    *(void *)(a1 + 8) = v12;
    for (*(void *)(a1 + 16) = v11; v14 != v2; --v14)
    {
      int v15 = (std::__shared_weak_count *)v14[-1].n128_u64[1];
      if (v15 && !atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
  }
  if (v2) {
    operator delete(v2);
  }
  return v12;
}

uint64_t AGX::applySPIRelocations<AGX::HAL200::ObjClasses,AGX::HAL200::DynamicLibrary>(uint64_t a1, void *a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  long long v17 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  uint64_t result = [a2 countByEnumeratingWithState:&v17 objects:v23 count:16];
  if (result)
  {
    uint64_t v5 = result;
    uint64_t v6 = *(void *)v18;
    uint64_t v7 = a1 + 96;
    uint64_t v8 = (long long *)(a1 + 768);
    do
    {
      uint64_t v9 = 0;
      do
      {
        if (*(void *)v18 != v6) {
          objc_enumerationMutation(a2);
        }
        int v14 = *(void **)(*((void *)&v17 + 1) + 8 * v9);
        objc_opt_class();
        if (objc_opt_isKindOfClass())
        {
          uint64_t v10 = (char *)objc_msgSend((id)objc_msgSend(v14, "symbolName"), "UTF8String");
          uint64_t v11 = [v14 buffer];
          uint64_t v12 = *(void *)(v11 + (int)*MEMORY[0x263F4B188] + 72);
          uint64_t v13 = [v14 offset];
          long long v21 = *v8;
          uint64_t v22 = *((void *)v8 + 2);
          AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::LinkInfo::applySPIRelocation(v7, v10, v13 + v12, (uint64_t)&v21);
        }
        else
        {
          objc_opt_class();
          if (objc_opt_isKindOfClass())
          {
            int v15 = (char *)objc_msgSend((id)objc_msgSend(v14, "symbolName"), "UTF8String");
            int v16 = [v14 data];
            long long v21 = *v8;
            uint64_t v22 = *((void *)v8 + 2);
            AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::LinkInfo::applySPIConstantRelocation(v7, v15, v16, (uint64_t)&v21);
          }
        }
        ++v9;
      }
      while (v5 != v9);
      uint64_t result = [a2 countByEnumeratingWithState:&v17 objects:v23 count:16];
      uint64_t v5 = result;
    }
    while (result);
  }
  return result;
}

void *std::__hash_table<std::__hash_value_type<objc_object  {objcproto11MTLFunction}*,RetainedObjCPointer<AGXG17FamilyFunctionHandle *>>,std::__unordered_map_hasher<objc_object  {objcproto11MTLFunction},RetainedObjCPointer<AGXG17FamilyFunctionHandle *>,std::hash<objc_object  {objcproto11MTLFunction}>,std::equal_to<objc_object  {objcproto11MTLFunction}>,true>,std::__unordered_map_equal<objc_object  {objcproto11MTLFunction},RetainedObjCPointer<AGXG17FamilyFunctionHandle *>,std::equal_to,std::hash,true>,std::allocator<RetainedObjCPointer<AGXG17FamilyFunctionHandle *>>>::find<objc_object  {objcproto11MTLFunction}>(void *a1, unint64_t a2)
{
  int8x8_t v2 = (int8x8_t)a1[1];
  if (!*(void *)&v2) {
    return 0;
  }
  unint64_t v3 = 0x9DDFEA08EB382D69 * (((8 * a2) + 8) ^ HIDWORD(a2));
  unint64_t v4 = 0x9DDFEA08EB382D69 * (HIDWORD(a2) ^ (v3 >> 47) ^ v3);
  unint64_t v5 = 0x9DDFEA08EB382D69 * (v4 ^ (v4 >> 47));
  uint8x8_t v6 = (uint8x8_t)vcnt_s8(v2);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    unint64_t v7 = v5;
    if (v5 >= *(void *)&v2) {
      unint64_t v7 = v5 % *(void *)&v2;
    }
  }
  else
  {
    unint64_t v7 = v5 & (*(void *)&v2 - 1);
  }
  uint64_t v8 = *(void **)(*a1 + 8 * v7);
  if (!v8) {
    return 0;
  }
  uint64_t result = (void *)*v8;
  if (*v8)
  {
    if (v6.u32[0] < 2uLL)
    {
      uint64_t v10 = *(void *)&v2 - 1;
      while (1)
      {
        uint64_t v12 = result[1];
        if (v12 == v5)
        {
          if (result[2] == a2) {
            return result;
          }
        }
        else if ((v12 & v10) != v7)
        {
          return 0;
        }
        uint64_t result = (void *)*result;
        if (!result) {
          return result;
        }
      }
    }
    do
    {
      unint64_t v11 = result[1];
      if (v11 == v5)
      {
        if (result[2] == a2) {
          return result;
        }
      }
      else
      {
        if (v11 >= *(void *)&v2) {
          v11 %= *(void *)&v2;
        }
        if (v11 != v7) {
          return 0;
        }
      }
      uint64_t result = (void *)*result;
    }
    while (result);
  }
  return result;
}

{
  int8x8_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint8x8_t v6;
  unint64_t v7;
  void *v8;
  void *result;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;

  int8x8_t v2 = (int8x8_t)a1[1];
  if (!*(void *)&v2) {
    return 0;
  }
  unint64_t v3 = 0x9DDFEA08EB382D69 * (((8 * a2) + 8) ^ HIDWORD(a2));
  unint64_t v4 = 0x9DDFEA08EB382D69 * (HIDWORD(a2) ^ (v3 >> 47) ^ v3);
  unint64_t v5 = 0x9DDFEA08EB382D69 * (v4 ^ (v4 >> 47));
  uint8x8_t v6 = (uint8x8_t)vcnt_s8(v2);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    unint64_t v7 = v5;
    if (v5 >= *(void *)&v2) {
      unint64_t v7 = v5 % *(void *)&v2;
    }
  }
  else
  {
    unint64_t v7 = v5 & (*(void *)&v2 - 1);
  }
  uint64_t v8 = *(void **)(*a1 + 8 * v7);
  if (!v8) {
    return 0;
  }
  uint64_t result = (void *)*v8;
  if (*v8)
  {
    if (v6.u32[0] < 2uLL)
    {
      uint64_t v10 = *(void *)&v2 - 1;
      while (1)
      {
        uint64_t v12 = result[1];
        if (v5 == v12)
        {
          if (result[2] == a2) {
            return result;
          }
        }
        else if ((v12 & v10) != v7)
        {
          return 0;
        }
        uint64_t result = (void *)*result;
        if (!result) {
          return result;
        }
      }
    }
    do
    {
      unint64_t v11 = result[1];
      if (v5 == v11)
      {
        if (result[2] == a2) {
          return result;
        }
      }
      else
      {
        if (v11 >= *(void *)&v2) {
          v11 %= *(void *)&v2;
        }
        if (v11 != v7) {
          return 0;
        }
      }
      uint64_t result = (void *)*result;
    }
    while (result);
  }
  return result;
}

void std::__hash_table<std::__hash_value_type<objc_object  {objcproto11MTLFunction}*,RetainedObjCPointer<AGXG17FamilyFunctionHandle *>>,std::__unordered_map_hasher<objc_object  {objcproto11MTLFunction},RetainedObjCPointer<AGXG17FamilyFunctionHandle *>,std::hash<objc_object  {objcproto11MTLFunction}>,std::equal_to<objc_object  {objcproto11MTLFunction}>,true>,std::__unordered_map_equal<objc_object  {objcproto11MTLFunction},RetainedObjCPointer<AGXG17FamilyFunctionHandle *>,std::equal_to,std::hash,true>,std::allocator<RetainedObjCPointer<AGXG17FamilyFunctionHandle *>>>::__emplace_unique_impl<_MTLFunction *&,AGXG17FamilyFunctionHandle>(uint64_t a1, unint64_t a2, void *a3)
{
  uint8x8_t v6 = (void *)(a1 + 16);
  unint64_t v7 = operator new(0x20uLL);
  v7[2] = a2;
  v7[3] = a3;
  unint64_t v8 = 0x9DDFEA08EB382D69 * (((8 * a2) + 8) ^ HIDWORD(a2));
  unint64_t v9 = 0x9DDFEA08EB382D69 * (HIDWORD(a2) ^ (v8 >> 47) ^ v8);
  unint64_t v10 = 0x9DDFEA08EB382D69 * (v9 ^ (v9 >> 47));
  void *v7 = 0;
  v7[1] = v10;
  unint64_t v11 = *(void *)(a1 + 8);
  if (!v11) {
    goto LABEL_21;
  }
  uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
  v12.i16[0] = vaddlv_u8(v12);
  if (v12.u32[0] > 1uLL)
  {
    unint64_t v13 = v10;
    if (v11 <= v10) {
      unint64_t v13 = v10 % v11;
    }
  }
  else
  {
    unint64_t v13 = (v11 - 1) & v10;
  }
  int v14 = *(void **)(*(void *)a1 + 8 * v13);
  if (!v14 || (int v15 = (void *)*v14) == 0)
  {
LABEL_21:
    float v18 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
    float v19 = *(float *)(a1 + 32);
    if (!v11 || (float)(v19 * (float)v11) < v18)
    {
      BOOL v20 = 1;
      if (v11 >= 3) {
        BOOL v20 = (v11 & (v11 - 1)) != 0;
      }
      unint64_t v21 = v20 | (2 * v11);
      unint64_t v22 = vcvtps_u32_f32(v18 / v19);
      if (v21 <= v22) {
        size_t prime = v22;
      }
      else {
        size_t prime = v21;
      }
      if (prime == 1)
      {
        size_t prime = 2;
      }
      else if ((prime & (prime - 1)) != 0)
      {
        size_t prime = std::__next_prime(prime);
        unint64_t v11 = *(void *)(a1 + 8);
      }
      if (prime > v11) {
        goto LABEL_33;
      }
      if (prime < v11)
      {
        unint64_t v24 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
        if (v11 < 3 || (uint8x8_t v25 = (uint8x8_t)vcnt_s8((int8x8_t)v11), v25.i16[0] = vaddlv_u8(v25), v25.u32[0] > 1uLL))
        {
          unint64_t v24 = std::__next_prime(v24);
        }
        else
        {
          uint64_t v26 = 1 << -(char)__clz(v24 - 1);
          if (v24 >= 2) {
            unint64_t v24 = v26;
          }
        }
        if (prime <= v24) {
          size_t prime = v24;
        }
        if (prime < v11) {
LABEL_33:
        }
          std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::__do_rehash<true>(a1, prime);
      }
    }
    int8x8_t v27 = *(int8x8_t *)(a1 + 8);
    unint64_t v28 = v7[1];
    uint8x8_t v29 = (uint8x8_t)vcnt_s8(v27);
    v29.i16[0] = vaddlv_u8(v29);
    if (v29.u32[0] > 1uLL)
    {
      if (v28 >= *(void *)&v27) {
        v28 %= *(void *)&v27;
      }
    }
    else
    {
      v28 &= *(void *)&v27 - 1;
    }
    uint64_t v30 = *(void *)a1;
    int v31 = *(void **)(*(void *)a1 + 8 * v28);
    if (v31)
    {
      void *v7 = *v31;
    }
    else
    {
      void *v7 = *v6;
      *uint8x8_t v6 = v7;
      *(void *)(v30 + 8 * v28) = v6;
      if (!*v7)
      {
LABEL_60:
        ++*(void *)(a1 + 24);
        return;
      }
      unint64_t v32 = *(void *)(*v7 + 8);
      if (v29.u32[0] > 1uLL)
      {
        if (v32 >= *(void *)&v27) {
          v32 %= *(void *)&v27;
        }
      }
      else
      {
        v32 &= *(void *)&v27 - 1;
      }
      int v31 = (void *)(*(void *)a1 + 8 * v32);
    }
    *int v31 = v7;
    goto LABEL_60;
  }
  if (v12.u32[0] < 2uLL)
  {
    while (1)
    {
      uint64_t v17 = v15[1];
      if (v17 == v10)
      {
        if (v15[2] == a2) {
          goto LABEL_40;
        }
      }
      else if ((v17 & (v11 - 1)) != v13)
      {
        goto LABEL_21;
      }
      int v15 = (void *)*v15;
      if (!v15) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v16 = v15[1];
    if (v16 == v10) {
      break;
    }
    if (v16 >= v11) {
      v16 %= v11;
    }
    if (v16 != v13) {
      goto LABEL_21;
    }
LABEL_11:
    int v15 = (void *)*v15;
    if (!v15) {
      goto LABEL_21;
    }
  }
  if (v15[2] != a2) {
    goto LABEL_11;
  }
LABEL_40:

  operator delete(v7);
}

void sub_242A499FC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<objc_object  {objcproto11MTLFunction}*,RetainedObjCPointer<AGXG17FamilyFunctionHandle *>>,void *>,std::__hash_node_destructor<std::allocator<void *>>>::~unique_ptr[abi:nn180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::unique_ptr<std::__hash_node<std::__hash_value_type<objc_object  {objcproto11MTLFunction}*,RetainedObjCPointer<AGXG17FamilyFunctionHandle *>>,void *>,std::__hash_node_destructor<std::allocator<void *>>>::~unique_ptr[abi:nn180100](uint64_t a1)
{
  int8x8_t v2 = *(id **)a1;
  *(void *)a1 = 0;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {

    }
    operator delete(v2);
  }
  return a1;
}

uint64_t AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::RuntimeState::operator=(uint64_t a1, uint64_t *a2)
{
  uint64_t v5 = *a2;
  uint64_t v4 = a2[1];
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  uint8x8_t v6 = *(std::__shared_weak_count **)(a1 + 8);
  *(void *)a1 = v5;
  *(void *)(a1 + 8) = v4;
  if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
    uint64_t v8 = a2[2];
    uint64_t v7 = a2[3];
    if (!v7) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  uint64_t v8 = a2[2];
  uint64_t v7 = a2[3];
  if (v7) {
LABEL_6:
  }
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
LABEL_7:
  unint64_t v9 = *(std::__shared_weak_count **)(a1 + 24);
  *(void *)(a1 + 16) = v8;
  *(void *)(a1 + 24) = v7;
  if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
    uint64_t v11 = a2[4];
    uint64_t v10 = a2[5];
    if (!v10) {
      goto LABEL_11;
    }
    goto LABEL_10;
  }
  uint64_t v11 = a2[4];
  uint64_t v10 = a2[5];
  if (v10) {
LABEL_10:
  }
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
LABEL_11:
  uint8x8_t v12 = *(std::__shared_weak_count **)(a1 + 40);
  *(void *)(a1 + 32) = v11;
  *(void *)(a1 + 40) = v10;
  if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  long long v13 = *((_OWORD *)a2 + 3);
  long long v14 = *((_OWORD *)a2 + 5);
  *(_OWORD *)(a1 + 64) = *((_OWORD *)a2 + 4);
  *(_OWORD *)(a1 + 80) = v14;
  *(_OWORD *)(a1 + 48) = v13;
  long long v15 = *((_OWORD *)a2 + 6);
  long long v16 = *((_OWORD *)a2 + 7);
  long long v17 = *((_OWORD *)a2 + 9);
  *(_OWORD *)(a1 + 128) = *((_OWORD *)a2 + 8);
  *(_OWORD *)(a1 + 144) = v17;
  *(_OWORD *)(a1 + 96) = v15;
  *(_OWORD *)(a1 + 112) = v16;
  long long v18 = *((_OWORD *)a2 + 10);
  long long v19 = *((_OWORD *)a2 + 11);
  long long v20 = *((_OWORD *)a2 + 13);
  *(_OWORD *)(a1 + 192) = *((_OWORD *)a2 + 12);
  *(_OWORD *)(a1 + 208) = v20;
  *(_OWORD *)(a1 + 160) = v18;
  *(_OWORD *)(a1 + 176) = v19;
  long long v21 = *((_OWORD *)a2 + 14);
  long long v22 = *((_OWORD *)a2 + 15);
  long long v23 = *((_OWORD *)a2 + 17);
  *(_OWORD *)(a1 + 256) = *((_OWORD *)a2 + 16);
  *(_OWORD *)(a1 + 272) = v23;
  *(_OWORD *)(a1 + 224) = v21;
  *(_OWORD *)(a1 + 240) = v22;
  return a1;
}

void std::__hash_table<std::__hash_value_type<objc_object  {objcproto11MTLFunction}*,RetainedObjCPointer<AGXG17FamilyFunctionHandle *>>,std::__unordered_map_hasher<objc_object  {objcproto11MTLFunction},RetainedObjCPointer<AGXG17FamilyFunctionHandle *>,std::hash<objc_object  {objcproto11MTLFunction}>,std::equal_to<objc_object  {objcproto11MTLFunction}>,true>,std::__unordered_map_equal<objc_object  {objcproto11MTLFunction},RetainedObjCPointer<AGXG17FamilyFunctionHandle *>,std::equal_to,std::hash,true>,std::allocator<RetainedObjCPointer<AGXG17FamilyFunctionHandle *>>>::__node_insert_multi(uint64_t a1, void *a2)
{
  unint64_t v4 = a2[2];
  unint64_t v5 = HIDWORD(v4);
  unint64_t v6 = 0x9DDFEA08EB382D69 * (((8 * v4) + 8) ^ HIDWORD(v4));
  unint64_t v7 = 0x9DDFEA08EB382D69
     * ((0x9DDFEA08EB382D69 * (v5 ^ (v6 >> 47) ^ v6)) ^ ((0x9DDFEA08EB382D69 * (v5 ^ (v6 >> 47) ^ v6)) >> 47));
  a2[1] = v7;
  unint64_t v8 = *(void *)(a1 + 8);
  float v9 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v10 = *(float *)(a1 + 32);
  if (!v8 || (float)(v10 * (float)v8) < v9)
  {
    BOOL v11 = 1;
    if (v8 >= 3) {
      BOOL v11 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v12 = v11 | (2 * v8);
    unint64_t v13 = vcvtps_u32_f32(v9 / v10);
    if (v12 <= v13) {
      size_t prime = v13;
    }
    else {
      size_t prime = v12;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v8 = *(void *)(a1 + 8);
    }
    if (prime > v8) {
      goto LABEL_105;
    }
    if (prime >= v8) {
      goto LABEL_40;
    }
    unint64_t v28 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (v8 < 3 || (uint8x8_t v29 = (uint8x8_t)vcnt_s8((int8x8_t)v8), v29.i16[0] = vaddlv_u8(v29), v29.u32[0] > 1uLL))
    {
      unint64_t v28 = std::__next_prime(v28);
    }
    else
    {
      uint64_t v30 = 1 << -(char)__clz(v28 - 1);
      if (v28 >= 2) {
        unint64_t v28 = v30;
      }
    }
    if (prime <= v28) {
      size_t prime = v28;
    }
    if (prime >= v8)
    {
      unint64_t v8 = *(void *)(a1 + 8);
      goto LABEL_40;
    }
    if (prime)
    {
LABEL_105:
      if (prime >> 61) {
        std::__throw_bad_array_new_length[abi:nn180100]();
      }
      long long v15 = operator new(8 * prime);
      long long v16 = *(void **)a1;
      *(void *)a1 = v15;
      if (v16) {
        operator delete(v16);
      }
      uint64_t v17 = 0;
      *(void *)(a1 + 8) = prime;
      do
        *(void *)(*(void *)a1 + 8 * v17++) = 0;
      while (prime != v17);
      uint64_t v19 = a1 + 16;
      long long v18 = *(void **)(a1 + 16);
      if (v18)
      {
        size_t v20 = v18[1];
        size_t v21 = prime - 1;
        if ((prime & (prime - 1)) != 0)
        {
          if (v20 >= prime) {
            v20 %= prime;
          }
          *(void *)(*(void *)a1 + 8 * v20) = v19;
          for (uint64_t i = (void *)*v18; *v18; uint64_t i = (void *)*v18)
          {
            size_t v40 = i[1];
            if (v40 >= prime) {
              v40 %= prime;
            }
            if (v40 == v20)
            {
              long long v18 = i;
            }
            else
            {
              int v41 = i;
              if (*(void *)(*(void *)a1 + 8 * v40))
              {
                do
                {
                  int v42 = v41;
                  int v41 = (void *)*v41;
                }
                while (v41 && i[2] == v41[2]);
                *long long v18 = v41;
                uint64_t v43 = 8 * v40;
                *int v42 = **(void **)(*(void *)a1 + v43);
                **(void **)(*(void *)a1 + v43) = i;
              }
              else
              {
                *(void *)(*(void *)a1 + 8 * v40) = v18;
                long long v18 = i;
                size_t v20 = v40;
              }
            }
          }
        }
        else
        {
          size_t v22 = v20 & v21;
          *(void *)(*(void *)a1 + 8 * v22) = v19;
          for (uint32x2_t j = (void *)*v18; *v18; uint32x2_t j = (void *)*v18)
          {
            size_t v24 = j[1] & v21;
            if (v24 == v22)
            {
              long long v18 = j;
            }
            else
            {
              uint8x8_t v25 = j;
              if (*(void *)(*(void *)a1 + 8 * v24))
              {
                do
                {
                  uint64_t v26 = v25;
                  uint8x8_t v25 = (void *)*v25;
                }
                while (v25 && j[2] == v25[2]);
                *long long v18 = v25;
                uint64_t v27 = 8 * v24;
                void *v26 = **(void **)(*(void *)a1 + v27);
                **(void **)(*(void *)a1 + v27) = j;
              }
              else
              {
                *(void *)(*(void *)a1 + 8 * v24) = v18;
                long long v18 = j;
                size_t v22 = v24;
              }
            }
          }
        }
      }
      unint64_t v8 = prime;
    }
    else
    {
      int v53 = *(void **)a1;
      *(void *)a1 = 0;
      if (v53) {
        operator delete(v53);
      }
      unint64_t v8 = 0;
      *(void *)(a1 + 8) = 0;
    }
  }
LABEL_40:
  uint8x8_t v32 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
  v32.i16[0] = vaddlv_u8(v32);
  if (v32.u32[0] >= 2uLL)
  {
    unint64_t v44 = v7;
    if (v8 <= v7) {
      unint64_t v44 = v7 % v8;
    }
    int v45 = *(void **)(*(void *)a1 + 8 * v44);
    if (!v45)
    {
      int v38 = 0;
      unint64_t v51 = a2[1];
      if (v51 < v8) {
        goto LABEL_78;
      }
      goto LABEL_77;
    }
    int v46 = 0;
    do
    {
      int v38 = v45;
      int v45 = (void *)*v45;
      if (!v45) {
        break;
      }
      unint64_t v49 = v45[1];
      unint64_t v50 = v49;
      if (v49 >= v8) {
        unint64_t v50 = v49 % v8;
      }
      if (v50 != v44) {
        break;
      }
      BOOL v47 = v49 == v7 && v45[2] == a2[2];
      int v48 = v46 & !v47;
      v46 |= v47;
    }
    while (v48 != 1);
  }
  else
  {
    uint64_t v33 = (v8 - 1) & v7;
    int v34 = *(void **)(*(void *)a1 + 8 * v33);
    if (!v34)
    {
      int v38 = 0;
      unint64_t v51 = a2[1];
      goto LABEL_75;
    }
    int v35 = 0;
    do
    {
      int v38 = v34;
      int v34 = (void *)*v34;
      if (!v34) {
        break;
      }
      uint64_t v39 = v34[1];
      if ((v39 & (v8 - 1)) != v33) {
        break;
      }
      BOOL v36 = v39 == v7 && v34[2] == a2[2];
      char v37 = v35 & !v36;
      v35 |= v36;
    }
    while ((v37 & 1) == 0);
  }
  unint64_t v51 = a2[1];
  if (v32.u32[0] <= 1uLL)
  {
LABEL_75:
    v51 &= v8 - 1;
    goto LABEL_78;
  }
  if (v51 >= v8) {
LABEL_77:
  }
    v51 %= v8;
LABEL_78:
  if (!v38)
  {
    *a2 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = a2;
    *(void *)(*(void *)a1 + 8 * v51) = a1 + 16;
    if (!*a2) {
      goto LABEL_92;
    }
    unint64_t v52 = *(void *)(*a2 + 8);
    if (v32.u32[0] > 1uLL)
    {
      if (v52 >= v8) {
        v52 %= v8;
      }
    }
    else
    {
      v52 &= v8 - 1;
    }
LABEL_91:
    *(void *)(*(void *)a1 + 8 * v52) = a2;
    goto LABEL_92;
  }
  *a2 = *v38;
  *int v38 = a2;
  if (*a2)
  {
    unint64_t v52 = *(void *)(*a2 + 8);
    if (v32.u32[0] > 1uLL)
    {
      if (v52 >= v8) {
        v52 %= v8;
      }
    }
    else
    {
      v52 &= v8 - 1;
    }
    if (v52 != v51) {
      goto LABEL_91;
    }
  }
LABEL_92:
  ++*(void *)(a1 + 24);
}

void std::__hash_table<std::__hash_value_type<objc_object  {objcproto11MTLFunction}*,RetainedObjCPointer<AGXG17FamilyFunctionHandle *>>,std::__unordered_map_hasher<objc_object  {objcproto11MTLFunction},RetainedObjCPointer<AGXG17FamilyFunctionHandle *>,std::hash<objc_object  {objcproto11MTLFunction}>,std::equal_to<objc_object  {objcproto11MTLFunction}>,true>,std::__unordered_map_equal<objc_object  {objcproto11MTLFunction},RetainedObjCPointer<AGXG17FamilyFunctionHandle *>,std::equal_to,std::hash,true>,std::allocator<RetainedObjCPointer<AGXG17FamilyFunctionHandle *>>>::__emplace_unique_key_args<objc_object  {objcproto11MTLFunction},objc_object  {objcproto11MTLFunction}&,AGXG17FamilyFunctionHandle>(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v8 = 0x9DDFEA08EB382D69 * (((8 * a2) + 8) ^ HIDWORD(a2));
  unint64_t v9 = 0x9DDFEA08EB382D69 * (HIDWORD(a2) ^ (v8 >> 47) ^ v8);
  unint64_t v10 = v9 ^ (v9 >> 47);
  unint64_t v11 = 0x9DDFEA08EB382D69 * v10;
  unint64_t v12 = *(void *)(a1 + 8);
  if (v12)
  {
    uint8x8_t v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    if (v13.u32[0] > 1uLL)
    {
      unint64_t v4 = 0x9DDFEA08EB382D69 * v10;
      if (v11 >= v12) {
        unint64_t v4 = v11 % v12;
      }
    }
    else
    {
      unint64_t v4 = v11 & (v12 - 1);
    }
    long long v14 = *(void **)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      long long v15 = (void *)*v14;
      if (v15)
      {
        if (v13.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v17 = v15[1];
            if (v17 == v11)
            {
              if (v15[2] == a2) {
                return;
              }
            }
            else if ((v17 & (v12 - 1)) != v4)
            {
              goto LABEL_22;
            }
            long long v15 = (void *)*v15;
            if (!v15) {
              goto LABEL_22;
            }
          }
        }
        do
        {
          unint64_t v16 = v15[1];
          if (v16 == v11)
          {
            if (v15[2] == a2) {
              return;
            }
          }
          else
          {
            if (v16 >= v12) {
              v16 %= v12;
            }
            if (v16 != v4) {
              break;
            }
          }
          long long v15 = (void *)*v15;
        }
        while (v15);
      }
    }
  }
LABEL_22:
  long long v18 = (void *)(a1 + 16);
  uint64_t v19 = operator new(0x20uLL);
  *uint64_t v19 = 0;
  v19[1] = v11;
  void v19[2] = a3;
  v19[3] = a4;
  float v20 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v21 = *(float *)(a1 + 32);
  if (!v12 || (float)(v21 * (float)v12) < v20)
  {
    BOOL v22 = 1;
    if (v12 >= 3) {
      BOOL v22 = (v12 & (v12 - 1)) != 0;
    }
    unint64_t v23 = v22 | (2 * v12);
    unint64_t v24 = vcvtps_u32_f32(v20 / v21);
    if (v23 <= v24) {
      size_t prime = v24;
    }
    else {
      size_t prime = v23;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v12 = *(void *)(a1 + 8);
    }
    if (prime > v12) {
      goto LABEL_34;
    }
    if (prime < v12)
    {
      unint64_t v26 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v12 < 3 || (uint8x8_t v27 = (uint8x8_t)vcnt_s8((int8x8_t)v12), v27.i16[0] = vaddlv_u8(v27), v27.u32[0] > 1uLL))
      {
        unint64_t v26 = std::__next_prime(v26);
      }
      else
      {
        uint64_t v28 = 1 << -(char)__clz(v26 - 1);
        if (v26 >= 2) {
          unint64_t v26 = v28;
        }
      }
      if (prime <= v26) {
        size_t prime = v26;
      }
      if (prime < v12) {
LABEL_34:
      }
        std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::__do_rehash<true>(a1, prime);
    }
    unint64_t v12 = *(void *)(a1 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12) {
        unint64_t v4 = v11 % v12;
      }
      else {
        unint64_t v4 = v11;
      }
    }
    else
    {
      unint64_t v4 = (v12 - 1) & v11;
    }
  }
  uint64_t v29 = *(void *)a1;
  uint64_t v30 = *(void **)(*(void *)a1 + 8 * v4);
  if (v30)
  {
    *uint64_t v19 = *v30;
LABEL_58:
    *uint64_t v30 = v19;
    goto LABEL_59;
  }
  *uint64_t v19 = *v18;
  *long long v18 = v19;
  *(void *)(v29 + 8 * v4) = v18;
  if (*v19)
  {
    unint64_t v31 = *(void *)(*v19 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v31 >= v12) {
        v31 %= v12;
      }
    }
    else
    {
      v31 &= v12 - 1;
    }
    uint64_t v30 = (void *)(*(void *)a1 + 8 * v31);
    goto LABEL_58;
  }
LABEL_59:
  ++*(void *)(a1 + 24);
}

void sub_242A4A7B8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<objc_object  {objcproto11MTLFunction}*,RetainedObjCPointer<AGXG17FamilyFunctionHandle *>>,void *>,std::__hash_node_destructor<std::allocator<void *>>>::~unique_ptr[abi:nn180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t AGX::ComputePipeline<AGX::HAL200::ObjClasses,AGX::HAL200::Classes,AGX::HAL200::Encoders>::bindResources(uint64_t a1)
{
  unsigned int v2 = *(_DWORD *)(*(void *)(a1 + 16) + 2272);
  do
  {
    v2 &= ~(1 << __clz(__rbit32(v2)));
    uint64_t result = IOGPUResourceListAddResource();
  }
  while (v2);
  uint64_t v4 = *(void *)(a1 + 576);
  if (v4)
  {
    unint64_t v5 = *(void **)(v4 + 32);
    for (uint64_t i = *(void **)(v4 + 40); v5 != i; v5 += 163)
    {
      uint64_t v7 = v5[14];
      if (v7)
      {
        unsigned int v8 = *(_DWORD *)(v7 + 2224);
        do
        {
          v8 &= ~(1 << __clz(__rbit32(v8)));
          uint64_t result = IOGPUResourceListAddResource();
        }
        while (v8);
      }
      uint64_t v9 = v5[51];
      if (v9)
      {
        unsigned int v10 = *(_DWORD *)(v9 + 2224);
        do
        {
          v10 &= ~(1 << __clz(__rbit32(v10)));
          uint64_t result = IOGPUResourceListAddResource();
        }
        while (v10);
      }
      uint64_t v11 = v5[88];
      if (v11)
      {
        unsigned int v12 = *(_DWORD *)(v11 + 2224);
        do
        {
          v12 &= ~(1 << __clz(__rbit32(v12)));
          uint64_t result = IOGPUResourceListAddResource();
        }
        while (v12);
      }
      uint64_t v13 = v5[125];
      if (v13)
      {
        unsigned int v14 = *(_DWORD *)(v13 + 2224);
        do
        {
          v14 &= ~(1 << __clz(__rbit32(v14)));
          uint64_t result = IOGPUResourceListAddResource();
        }
        while (v14);
      }
    }
  }
  return result;
}

void std::vector<AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::ModuleInfo,std::allocator<AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::ModuleInfo>>::__insert_with_size[abi:nn180100]<std::__wrap_iter<AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::ModuleInfo const*>,std::__wrap_iter<AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::ModuleInfo const*>>(uint64_t a1, uint64_t a2, char *__src, char *a4, uint64_t a5)
{
  if (a5 < 1) {
    return;
  }
  unint64_t v6 = __src;
  unsigned int v8 = *(char **)a1;
  uint64_t v9 = *(char **)(a1 + 8);
  uint64_t v10 = (a2 - *(void *)a1) / 80;
  uint64_t v11 = (char *)(*(void *)a1 + 80 * v10);
  uint64_t v12 = *(void *)(a1 + 16);
  if ((uint64_t)(0xCCCCCCCCCCCCCCCDLL * ((v12 - (uint64_t)v9) >> 4)) < a5)
  {
    unint64_t v13 = a5 - 0x3333333333333333 * ((v9 - v8) >> 4);
    if (v13 > 0x333333333333333) {
      abort();
    }
    unint64_t v14 = 0xCCCCCCCCCCCCCCCDLL * ((v12 - (uint64_t)v8) >> 4);
    uint64_t v15 = 2 * v14;
    if (2 * v14 <= v13) {
      uint64_t v15 = v13;
    }
    if (v14 >= 0x199999999999999) {
      unint64_t v16 = 0x333333333333333;
    }
    else {
      unint64_t v16 = v15;
    }
    if (v16)
    {
      if (v16 > 0x333333333333333) {
        std::__throw_bad_array_new_length[abi:nn180100]();
      }
      uint64_t v17 = (char *)operator new(80 * v16);
    }
    else
    {
      uint64_t v17 = 0;
    }
    uint8x8_t v27 = &v17[80 * v10];
    uint64_t v28 = 80 * a5;
    uint64_t v29 = &v27[80 * a5];
    uint64_t v30 = v27;
    do
    {
      *(_OWORD *)uint64_t v30 = *(_OWORD *)v6;
      long long v31 = *((_OWORD *)v6 + 1);
      long long v32 = *((_OWORD *)v6 + 2);
      long long v33 = *((_OWORD *)v6 + 4);
      *((_OWORD *)v30 + 3) = *((_OWORD *)v6 + 3);
      *((_OWORD *)v30 + 4) = v33;
      *((_OWORD *)v30 + 1) = v31;
      *((_OWORD *)v30 + 2) = v32;
      v30 += 80;
      v6 += 80;
      v28 -= 80;
    }
    while (v28);
    int v34 = *(char **)a1;
    if (*(char **)a1 != v11)
    {
      int v35 = v11;
      do
      {
        *((_OWORD *)v27 - 5) = *((_OWORD *)v35 - 5);
        long long v36 = *((_OWORD *)v35 - 4);
        long long v37 = *((_OWORD *)v35 - 3);
        long long v38 = *((_OWORD *)v35 - 1);
        *((_OWORD *)v27 - 2) = *((_OWORD *)v35 - 2);
        *((_OWORD *)v27 - 1) = v38;
        *((_OWORD *)v27 - 4) = v36;
        *((_OWORD *)v27 - 3) = v37;
        v27 -= 80;
        v35 -= 80;
      }
      while (v35 != v34);
      uint64_t v9 = *(char **)(a1 + 8);
    }
    uint64_t v39 = &v17[80 * v16];
    if (v9 != v11) {
      memmove(v29, v11, v9 - v11);
    }
    size_t v40 = *(char **)a1;
    *(void *)a1 = v27;
    *(void *)(a1 + 8) = &v29[v9 - v11];
    *(void *)(a1 + 16) = v39;
    if (v40)
    {
      operator delete(v40);
    }
    return;
  }
  if ((uint64_t)(0xCCCCCCCCCCCCCCCDLL * ((v9 - v11) >> 4)) >= a5)
  {
    long long v18 = &__src[80 * a5];
    float v20 = *(char **)(a1 + 8);
LABEL_18:
    float v21 = &v11[80 * a5];
    BOOL v22 = &v20[-80 * a5];
    unint64_t v23 = v20;
    if (v22 < v9)
    {
      unint64_t v23 = v20;
      do
      {
        *(_OWORD *)unint64_t v23 = *(_OWORD *)v22;
        long long v24 = *((_OWORD *)v22 + 1);
        long long v25 = *((_OWORD *)v22 + 2);
        long long v26 = *((_OWORD *)v22 + 4);
        *((_OWORD *)v23 + 3) = *((_OWORD *)v22 + 3);
        *((_OWORD *)v23 + 4) = v26;
        *((_OWORD *)v23 + 1) = v24;
        *((_OWORD *)v23 + 2) = v25;
        v22 += 80;
        v23 += 80;
      }
      while (v22 < v9);
    }
    *(void *)(a1 + 8) = v23;
    if (v20 != v21) {
      memmove(&v11[80 * a5], v11, v20 - v21);
    }
    if (v18 != v6)
    {
      memmove(v11, v6, v18 - v6);
    }
    return;
  }
  long long v18 = &__src[16 * ((v9 - v11) >> 4)];
  int64_t v19 = a4 - v18;
  if (a4 != v18) {
    memmove(*(void **)(a1 + 8), &__src[16 * ((v9 - v11) >> 4)], a4 - v18);
  }
  float v20 = &v9[v19];
  *(void *)(a1 + 8) = &v9[v19];
  if (v9 - v11 >= 1) {
    goto LABEL_18;
  }
}

uint64_t AGX::ComputePipeline<AGX::HAL200::ObjClasses,AGX::HAL200::Classes,AGX::HAL200::Encoders>::appendProgramAddressTables(uint64_t result, void *a2)
{
  if (*(void *)(result + 16))
  {
    unint64_t v3 = (void *)result;
    objc_msgSend(a2, "addObject:", objc_msgSend(objc_alloc(MEMORY[0x263F12B00]), "initWithMappedAddress:mappedSize:binaryUniqueId:type:", *(void *)(v3[2] + 1200), *(void *)(v3[2] + 1424), *(void *)(v3[2] + 1112), @"compute"));
    uint64_t v4 = v3[52];
    uint64_t v5 = v3[53];
    while (v4 != v5)
    {
      uint64_t v6 = *(void *)(*(void *)v4 + 680);
      uint64_t v7 = *(void *)(*(void *)v4 + 696);
      id v8 = objc_alloc(MEMORY[0x263F12B00]);
      uint64_t v9 = *(void **)v4;
      v4 += 16;
      objc_msgSend(a2, "addObject:", objc_msgSend(v8, "initWithMappedAddress:mappedSize:binaryUniqueId:type:", v6, v7, *v9, @"compute-dylib-resource"));
    }
    uint64_t v10 = v3[72];
    uint64_t v11 = *(void **)(v10 + 32);
    uint64_t v12 = *(void **)(v10 + 40);
    return AGX::appendIntersectionFunctionsToProgramAddressTable<AGX::HAL200::Classes>((uint64_t)a2, v11, v12);
  }
  return result;
}

uint64_t AGX::appendIntersectionFunctionsToProgramAddressTable<AGX::HAL200::Classes>(uint64_t result, void *a2, void *a3)
{
  if (a2 != a3)
  {
    uint64_t v4 = a2;
    uint64_t v5 = (void *)result;
    do
    {
      uint64_t v6 = (void *)v4[14];
      if (v6) {
        uint64_t result = objc_msgSend(v5, "addObject:", objc_msgSend(objc_alloc(MEMORY[0x263F12B00]), "initWithMappedAddress:mappedSize:binaryUniqueId:type:", v6[144], v6[172], v6[133], @"user-intersection"));
      }
      uint64_t v7 = (void *)v4[51];
      if (v7) {
        uint64_t result = objc_msgSend(v5, "addObject:", objc_msgSend(objc_alloc(MEMORY[0x263F12B00]), "initWithMappedAddress:mappedSize:binaryUniqueId:type:", v7[144], v7[172], v7[133], @"user-intersection"));
      }
      id v8 = (void *)v4[88];
      if (v8) {
        uint64_t result = objc_msgSend(v5, "addObject:", objc_msgSend(objc_alloc(MEMORY[0x263F12B00]), "initWithMappedAddress:mappedSize:binaryUniqueId:type:", v8[144], v8[172], v8[133], @"user-intersection"));
      }
      uint64_t v9 = (void *)v4[125];
      if (v9) {
        uint64_t result = objc_msgSend(v5, "addObject:", objc_msgSend(objc_alloc(MEMORY[0x263F12B00]), "initWithMappedAddress:mappedSize:binaryUniqueId:type:", v9[144], v9[172], v9[133], @"user-intersection"));
      }
      v4 += 163;
    }
    while (v4 != a3);
  }
  return result;
}

void *std::__hash_table<std::__hash_value_type<unsigned long long,AGXG17FamilyVisibleFunctionTable *>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,AGXG17FamilyVisibleFunctionTable *>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,AGXG17FamilyVisibleFunctionTable *>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,AGXG17FamilyVisibleFunctionTable *>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(uint64_t a1, unint64_t a2, void *a3)
{
  unint64_t v5 = a2;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = a2;
      if (v7 <= a2) {
        unint64_t v3 = a2 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & a2;
    }
    uint64_t v9 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      uint64_t v10 = *v9;
      if (*v9)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v12 = v10[1];
            if (v12 == a2)
            {
              if (v10[2] == a2) {
                return v10;
              }
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_22;
            }
            uint64_t v10 = (void *)*v10;
            if (!v10) {
              goto LABEL_22;
            }
          }
        }
        do
        {
          unint64_t v11 = v10[1];
          if (v11 == a2)
          {
            if (v10[2] == a2) {
              return v10;
            }
          }
          else
          {
            if (v11 >= v7) {
              v11 %= v7;
            }
            if (v11 != v3) {
              break;
            }
          }
          uint64_t v10 = (void *)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_22:
  uint64_t v10 = operator new(0x20uLL);
  *uint64_t v10 = 0;
  v10[1] = v5;
  v10[2] = *a3;
  v10[3] = 0;
  float v13 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v14 = *(float *)(a1 + 32);
  if (v7 && (float)(v14 * (float)v7) >= v13)
  {
    unint64_t v5 = v3;
  }
  else
  {
    BOOL v15 = 1;
    if (v7 >= 3) {
      BOOL v15 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v16 = v15 | (2 * v7);
    unint64_t v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17) {
      size_t prime = v17;
    }
    else {
      size_t prime = v16;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v7 = *(void *)(a1 + 8);
    }
    if (prime > v7) {
      goto LABEL_35;
    }
    if (prime < v7)
    {
      unint64_t v19 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v7 < 3 || (uint8x8_t v20 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v20.i16[0] = vaddlv_u8(v20), v20.u32[0] > 1uLL))
      {
        unint64_t v19 = std::__next_prime(v19);
      }
      else
      {
        uint64_t v21 = 1 << -(char)__clz(v19 - 1);
        if (v19 >= 2) {
          unint64_t v19 = v21;
        }
      }
      if (prime <= v19) {
        size_t prime = v19;
      }
      if (prime < v7) {
LABEL_35:
      }
        std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::__do_rehash<true>(a1, prime);
    }
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v5) {
        v5 %= v7;
      }
    }
    else
    {
      v5 &= v7 - 1;
    }
  }
  uint64_t v22 = *(void *)a1;
  unint64_t v23 = *(void **)(*(void *)a1 + 8 * v5);
  if (v23)
  {
    *uint64_t v10 = *v23;
LABEL_58:
    void *v23 = v10;
    goto LABEL_59;
  }
  *uint64_t v10 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v10;
  *(void *)(v22 + 8 * v5) = a1 + 16;
  if (*v10)
  {
    unint64_t v24 = *(void *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v24 >= v7) {
        v24 %= v7;
      }
    }
    else
    {
      v24 &= v7 - 1;
    }
    unint64_t v23 = (void *)(*(void *)a1 + 8 * v24);
    goto LABEL_58;
  }
LABEL_59:
  ++*(void *)(a1 + 24);
  return v10;
}

void sub_242A4B138(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<unsigned long long,AGXG17FamilyFunctionHandle *>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,AGXG17FamilyFunctionHandle *>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,AGXG17FamilyFunctionHandle *>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,AGXG17FamilyFunctionHandle *>>>::__emplace_unique_key_args<unsigned long long,unsigned long long &,AGXG17FamilyFunctionHandle *>(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v7 = a2;
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v4 = a2;
      if (v9 <= a2) {
        unint64_t v4 = a2 % v9;
      }
    }
    else
    {
      unint64_t v4 = (v9 - 1) & a2;
    }
    unint64_t v11 = *(void **)(*(void *)a1 + 8 * v4);
    if (v11)
    {
      uint64_t v12 = (void *)*v11;
      if (v12)
      {
        if (v10.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v14 = v12[1];
            if (v14 == a2)
            {
              if (v12[2] == a2) {
                return;
              }
            }
            else if ((v14 & (v9 - 1)) != v4)
            {
              goto LABEL_22;
            }
            uint64_t v12 = (void *)*v12;
            if (!v12) {
              goto LABEL_22;
            }
          }
        }
        do
        {
          unint64_t v13 = v12[1];
          if (v13 == a2)
          {
            if (v12[2] == a2) {
              return;
            }
          }
          else
          {
            if (v13 >= v9) {
              v13 %= v9;
            }
            if (v13 != v4) {
              break;
            }
          }
          uint64_t v12 = (void *)*v12;
        }
        while (v12);
      }
    }
  }
LABEL_22:
  BOOL v15 = operator new(0x20uLL);
  void *v15 = 0;
  v15[1] = v7;
  v15[2] = a3;
  v15[3] = a4;
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v17 = *(float *)(a1 + 32);
  if (v9 && (float)(v17 * (float)v9) >= v16)
  {
    unint64_t v7 = v4;
  }
  else
  {
    BOOL v18 = 1;
    if (v9 >= 3) {
      BOOL v18 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v9);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      size_t prime = v20;
    }
    else {
      size_t prime = v19;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v9 = *(void *)(a1 + 8);
    }
    if (prime > v9) {
      goto LABEL_35;
    }
    if (prime < v9)
    {
      unint64_t v22 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v9 < 3 || (uint8x8_t v23 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v23.i16[0] = vaddlv_u8(v23), v23.u32[0] > 1uLL))
      {
        unint64_t v22 = std::__next_prime(v22);
      }
      else
      {
        uint64_t v24 = 1 << -(char)__clz(v22 - 1);
        if (v22 >= 2) {
          unint64_t v22 = v24;
        }
      }
      if (prime <= v22) {
        size_t prime = v22;
      }
      if (prime < v9) {
LABEL_35:
      }
        std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::__do_rehash<true>(a1, prime);
    }
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v9 <= v7) {
        v7 %= v9;
      }
    }
    else
    {
      v7 &= v9 - 1;
    }
  }
  uint64_t v25 = *(void *)a1;
  long long v26 = *(void **)(*(void *)a1 + 8 * v7);
  if (v26)
  {
    void *v15 = *v26;
LABEL_58:
    void *v26 = v15;
    goto LABEL_59;
  }
  void *v15 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v15;
  *(void *)(v25 + 8 * v7) = a1 + 16;
  if (*v15)
  {
    unint64_t v27 = *(void *)(*v15 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v27 >= v9) {
        v27 %= v9;
      }
    }
    else
    {
      v27 &= v9 - 1;
    }
    long long v26 = (void *)(*(void *)a1 + 8 * v27);
    goto LABEL_58;
  }
LABEL_59:
  ++*(void *)(a1 + 24);
}

void sub_242A4B418(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::vector<std::shared_ptr<AGX::HAL200::DynamicLibrary>>::__emplace_back_slow_path<AGX::HAL200::DynamicLibrary*&>(void *a1, uint64_t a2)
{
  uint64_t v2 = (uint64_t)(a1[1] - *a1) >> 4;
  unint64_t v3 = v2 + 1;
  if (!((unint64_t)(v2 + 1) >> 60))
  {
    uint64_t v5 = a1[2] - *a1;
    if (v5 >> 3 > v3) {
      unint64_t v3 = v5 >> 3;
    }
    if ((unint64_t)v5 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v6 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v6 = v3;
    }
    if (v6)
    {
      if (v6 >> 60) {
        std::__throw_bad_array_new_length[abi:nn180100]();
      }
      unint64_t v7 = operator new(16 * v6);
    }
    else
    {
      unint64_t v7 = 0;
    }
    v7[2 * v2] = a2;
    operator new();
  }
  abort();
}

void sub_242A4B5E8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  if (v2)
  {
    uint64_t v4 = AGX::DynamicLibrary<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::~DynamicLibrary(v2);
    MEMORY[0x24566ED90](v4, 0x10F2C407B1F27D1);
  }
  std::__split_buffer<std::shared_ptr<AGX::HAL200::DynamicLibrary>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__split_buffer<std::shared_ptr<AGX::HAL200::DynamicLibrary>>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 16;
    uint64_t v4 = *(std::__shared_weak_count **)(i - 8);
    if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t std::__shared_ptr_pointer<AGX::HAL200::DynamicLibrary *,std::shared_ptr<AGX::HAL200::DynamicLibrary>::__shared_ptr_default_delete<AGX::HAL200::DynamicLibrary,AGX::HAL200::DynamicLibrary>,std::allocator<AGX::HAL200::DynamicLibrary>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result)
  {
    AGX::DynamicLibrary<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::~DynamicLibrary(result);
    JUMPOUT(0x24566ED90);
  }
  return result;
}

void std::__shared_ptr_pointer<AGX::HAL200::DynamicLibrary *,std::shared_ptr<AGX::HAL200::DynamicLibrary>::__shared_ptr_default_delete<AGX::HAL200::DynamicLibrary,AGX::HAL200::DynamicLibrary>,std::allocator<AGX::HAL200::DynamicLibrary>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x24566ED90);
}

uint64_t AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::LinkInfo::~LinkInfo(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 360);
  if (v2)
  {
    uint64_t v3 = *(void *)(a1 + 368);
    uint64_t v4 = *(void **)(a1 + 360);
    if (v3 != v2)
    {
      do
      {
        uint64_t v5 = *(std::__shared_weak_count **)(v3 - 8);
        if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
        v3 -= 16;
      }
      while (v3 != v2);
      uint64_t v4 = *(void **)(a1 + 360);
    }
    *(void *)(a1 + 368) = v2;
    operator delete(v4);
  }
  uint64_t v6 = *(void *)(a1 + 336);
  if (v6)
  {
    uint64_t v7 = *(void *)(a1 + 344);
    uint8x8_t v8 = *(void **)(a1 + 336);
    if (v7 != v6)
    {
      do
      {
        if (*(char *)(v7 - 9) < 0) {
          operator delete(*(void **)(v7 - 32));
        }
        v7 -= 40;
      }
      while (v7 != v6);
      uint8x8_t v8 = *(void **)(a1 + 336);
    }
    *(void *)(a1 + 344) = v6;
    operator delete(v8);
  }
  uint64_t v9 = *(void *)(a1 + 312);
  if (v9)
  {
    uint64_t v10 = *(void *)(a1 + 320);
    unint64_t v11 = *(void **)(a1 + 312);
    if (v10 != v9)
    {
      do
      {
        if (*(char *)(v10 - 9) < 0) {
          operator delete(*(void **)(v10 - 32));
        }
        v10 -= 40;
      }
      while (v10 != v9);
      unint64_t v11 = *(void **)(a1 + 312);
    }
    *(void *)(a1 + 320) = v9;
    operator delete(v11);
  }
  uint64_t v12 = *(void ***)(a1 + 288);
  if (v12)
  {
    do
    {
      unint64_t v19 = (void **)*v12;
      if (*((char *)v12 + 39) < 0) {
        operator delete(v12[2]);
      }
      operator delete(v12);
      uint64_t v12 = v19;
    }
    while (v19);
  }
  unint64_t v13 = *(void **)(a1 + 272);
  *(void *)(a1 + 272) = 0;
  if (v13) {
    operator delete(v13);
  }
  uint64_t v14 = *(void ***)(a1 + 248);
  if (v14)
  {
    do
    {
      unint64_t v20 = (void **)*v14;
      if (*((char *)v14 + 39) < 0) {
        operator delete(v14[2]);
      }
      operator delete(v14);
      uint64_t v14 = v20;
    }
    while (v20);
  }
  BOOL v15 = *(void **)(a1 + 232);
  *(void *)(a1 + 232) = 0;
  if (v15) {
    operator delete(v15);
  }
  float v16 = *(void ***)(a1 + 208);
  if (v16)
  {
    do
    {
      uint64_t v21 = (void **)*v16;
      if (*((char *)v16 + 39) < 0) {
        operator delete(v16[2]);
      }
      operator delete(v16);
      float v16 = v21;
    }
    while (v21);
  }
  float v17 = *(void **)(a1 + 192);
  *(void *)(a1 + 192) = 0;
  if (v17) {
    operator delete(v17);
  }
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

void *std::vector<unsigned char>::__assign_with_size[abi:nn180100]<unsigned char *,unsigned char *>(void *result, char *__src, char *a3, unint64_t a4)
{
  uint64_t v7 = result;
  unint64_t v8 = result[2];
  uint64_t v9 = (char *)*result;
  if (v8 - *result < a4)
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      unint64_t v8 = 0;
      void *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if ((a4 & 0x8000000000000000) != 0) {
      goto LABEL_23;
    }
    uint64_t v10 = 2 * v8;
    if (2 * v8 <= a4) {
      uint64_t v10 = a4;
    }
    size_t v11 = v8 >= 0x3FFFFFFFFFFFFFFFLL ? 0x7FFFFFFFFFFFFFFFLL : v10;
    if ((v11 & 0x8000000000000000) != 0) {
LABEL_23:
    }
      abort();
    uint64_t result = operator new(v11);
    uint64_t v9 = (char *)result;
    void *v7 = result;
    v7[1] = result;
    v7[2] = (char *)result + v11;
    size_t v12 = a3 - __src;
    if (v12) {
      uint64_t result = memcpy(result, __src, v12);
    }
LABEL_21:
    float v16 = &v9[v12];
    goto LABEL_22;
  }
  unint64_t v13 = (unsigned char *)result[1];
  size_t v14 = v13 - v9;
  if (v13 - v9 >= a4)
  {
    size_t v12 = a3 - __src;
    if (v12) {
      uint64_t result = memmove((void *)*result, __src, v12);
    }
    goto LABEL_21;
  }
  BOOL v15 = &__src[v14];
  if (v13 != v9)
  {
    uint64_t result = memmove((void *)*result, __src, v14);
    uint64_t v9 = (char *)v7[1];
  }
  if (a3 != v15) {
    uint64_t result = memmove(v9, v15, a3 - v15);
  }
  float v16 = &v9[a3 - v15];
LABEL_22:
  v7[1] = v16;
  return result;
}

void std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<std::string,unsigned int>,void *> *>>(void *a1, uint64_t *a2)
{
  uint64_t v4 = a1[1];
  if (!v4) {
    goto LABEL_7;
  }
  for (uint64_t i = 0; i != v4; ++i)
    *(void *)(*a1 + 8 * i) = 0;
  uint64_t v6 = (char *)a1[2];
  a1[2] = 0;
  a1[3] = 0;
  if (v6)
  {
    while (a2)
    {
      std::string::operator=((std::string *)(v6 + 16), (const std::string *)(a2 + 2));
      *((_DWORD *)v6 + 10) = *((_DWORD *)a2 + 10);
      uint64_t v7 = *(char **)v6;
      std::__hash_table<std::__hash_value_type<std::string,AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::ExternalSymbolInfo>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::ExternalSymbolInfo>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::ExternalSymbolInfo>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::ExternalSymbolInfo>>>::__node_insert_multi((uint64_t)a1, (uint64_t)v6);
      a2 = (uint64_t *)*a2;
      uint64_t v6 = v7;
      if (!v7) {
        goto LABEL_7;
      }
    }
    do
    {
      BOOL v15 = *(char **)v6;
      if (v6[39] < 0) {
        operator delete(*((void **)v6 + 2));
      }
      operator delete(v6);
      uint64_t v6 = v15;
    }
    while (v15);
  }
  else
  {
LABEL_7:
    while (a2)
    {
      unint64_t v8 = (char *)operator new(0x30uLL);
      uint64_t v9 = (uint64_t)v8;
      uint64_t v10 = (uint64_t *)(v8 + 16);
      *(void *)unint64_t v8 = 0;
      *((void *)v8 + 1) = 0;
      if (*((char *)a2 + 39) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)(v8 + 16), (const std::string::value_type *)a2[2], a2[3]);
      }
      else
      {
        long long v11 = *((_OWORD *)a2 + 1);
        *((void *)v8 + 4) = a2[4];
        *(_OWORD *)uint64_t v10 = v11;
      }
      *(_DWORD *)(v9 + 40) = *((_DWORD *)a2 + 10);
      int v12 = *(char *)(v9 + 39);
      if (v12 >= 0) {
        unint64_t v13 = v10;
      }
      else {
        unint64_t v13 = *(uint64_t **)(v9 + 16);
      }
      if (v12 >= 0) {
        unint64_t v14 = *(unsigned __int8 *)(v9 + 39);
      }
      else {
        unint64_t v14 = *(void *)(v9 + 24);
      }
      *(void *)(v9 + 8) = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:nn180100](v13, v14);
      std::__hash_table<std::__hash_value_type<std::string,AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::ExternalSymbolInfo>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::ExternalSymbolInfo>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::ExternalSymbolInfo>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::ExternalSymbolInfo>>>::__node_insert_multi((uint64_t)a1, v9);
      a2 = (uint64_t *)*a2;
    }
  }
}

void sub_242A4BBC8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<std::string,AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::ExternalSymbolInfo>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::ExternalSymbolInfo>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::ExternalSymbolInfo>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::ExternalSymbolInfo>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<std::string,AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::ExternalSymbolInfo>,void *> *>>(void *a1, uint64_t *a2)
{
  uint64_t v4 = a1[1];
  if (!v4) {
    goto LABEL_7;
  }
  for (uint64_t i = 0; i != v4; ++i)
    *(void *)(*a1 + 8 * i) = 0;
  uint64_t v6 = (char *)a1[2];
  a1[2] = 0;
  a1[3] = 0;
  if (v6)
  {
    while (a2)
    {
      std::string::operator=((std::string *)(v6 + 16), (const std::string *)(a2 + 2));
      long long v7 = *(_OWORD *)(a2 + 7);
      *(_OWORD *)(v6 + 40) = *(_OWORD *)(a2 + 5);
      *(_OWORD *)(v6 + 56) = v7;
      long long v8 = *(_OWORD *)(a2 + 11);
      long long v9 = *(_OWORD *)(a2 + 13);
      uint64_t v10 = a2[15];
      *(_OWORD *)(v6 + 72) = *(_OWORD *)(a2 + 9);
      *((void *)v6 + 15) = v10;
      *(_OWORD *)(v6 + 104) = v9;
      *(_OWORD *)(v6 + 88) = v8;
      long long v11 = *(char **)v6;
      std::__hash_table<std::__hash_value_type<std::string,AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::ExternalSymbolInfo>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::ExternalSymbolInfo>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::ExternalSymbolInfo>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::ExternalSymbolInfo>>>::__node_insert_multi((uint64_t)a1, (uint64_t)v6);
      a2 = (uint64_t *)*a2;
      uint64_t v6 = v11;
      if (!v11) {
        goto LABEL_7;
      }
    }
    do
    {
      unint64_t v22 = *(char **)v6;
      if (v6[39] < 0) {
        operator delete(*((void **)v6 + 2));
      }
      operator delete(v6);
      uint64_t v6 = v22;
    }
    while (v22);
  }
  else
  {
LABEL_7:
    while (a2)
    {
      int v12 = (char *)operator new(0x80uLL);
      uint64_t v13 = (uint64_t)v12;
      unint64_t v14 = (uint64_t *)(v12 + 16);
      *(void *)int v12 = 0;
      *((void *)v12 + 1) = 0;
      if (*((char *)a2 + 39) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)(v12 + 16), (const std::string::value_type *)a2[2], a2[3]);
      }
      else
      {
        long long v15 = *((_OWORD *)a2 + 1);
        *((void *)v12 + 4) = a2[4];
        *(_OWORD *)unint64_t v14 = v15;
      }
      long long v16 = *(_OWORD *)(a2 + 5);
      long long v17 = *(_OWORD *)(a2 + 7);
      long long v18 = *(_OWORD *)(a2 + 9);
      *(void *)(v13 + 88) = a2[11];
      *(_OWORD *)(v13 + 72) = v18;
      *(_OWORD *)(v13 + 56) = v17;
      *(_OWORD *)(v13 + 40) = v16;
      *(_OWORD *)(v13 + 96) = *((_OWORD *)a2 + 6);
      *(_OWORD *)(v13 + 112) = *((_OWORD *)a2 + 7);
      int v19 = *(char *)(v13 + 39);
      if (v19 >= 0) {
        unint64_t v20 = v14;
      }
      else {
        unint64_t v20 = *(uint64_t **)(v13 + 16);
      }
      if (v19 >= 0) {
        unint64_t v21 = *(unsigned __int8 *)(v13 + 39);
      }
      else {
        unint64_t v21 = *(void *)(v13 + 24);
      }
      *(void *)(v13 + 8) = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:nn180100](v20, v21);
      std::__hash_table<std::__hash_value_type<std::string,AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::ExternalSymbolInfo>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::ExternalSymbolInfo>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::ExternalSymbolInfo>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::ExternalSymbolInfo>>>::__node_insert_multi((uint64_t)a1, v13);
      a2 = (uint64_t *)*a2;
    }
  }
}

void sub_242A4BD94(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,unsigned int>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,unsigned int>,void *>>>>::~unique_ptr[abi:nn180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_242A4BDA8(_Unwind_Exception *a1)
{
  if (v1[39] < 0) {
    operator delete(*v2);
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::vector<AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::LinkInfo::Relocation,std::allocator<AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::LinkInfo::Relocation>>::__assign_with_size[abi:nn180100]<AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::LinkInfo::Relocation*,AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::LinkInfo::Relocation*>(void **a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v6 = a2;
  uint64_t v8 = (uint64_t)a1[2];
  long long v9 = (void **)*a1;
  if (0xCCCCCCCCCCCCCCCDLL * ((v8 - (uint64_t)*a1) >> 3) >= a4)
  {
    int v12 = (void **)a1[1];
    if (0xCCCCCCCCCCCCCCCDLL * (v12 - v9) >= a4)
    {
      if (a2 != a3)
      {
        do
        {
          *(_DWORD *)long long v9 = *(_DWORD *)v6;
          std::string::operator=((std::string *)(v9 + 1), (const std::string *)(v6 + 8));
          *((_DWORD *)v9 + 8) = *(_DWORD *)(v6 + 32);
          v9 += 5;
          v6 += 40;
        }
        while (v6 != a3);
        int v12 = (void **)a1[1];
      }
      while (v12 != v9)
      {
        if (*((char *)v12 - 9) < 0) {
          operator delete(*(v12 - 4));
        }
        v12 -= 5;
      }
      a1[1] = v9;
    }
    else
    {
      uint64_t v13 = a2 + 8 * (v12 - v9);
      if (v12 != v9)
      {
        do
        {
          *(_DWORD *)long long v9 = *(_DWORD *)v6;
          std::string::operator=((std::string *)(v9 + 1), (const std::string *)(v6 + 8));
          *((_DWORD *)v9 + 8) = *(_DWORD *)(v6 + 32);
          v6 += 40;
          v9 += 5;
        }
        while (v6 != v13);
        long long v9 = (void **)a1[1];
      }
      unint64_t v14 = (char *)v9;
      if (v13 != a3)
      {
        uint64_t v15 = 0;
        do
        {
          uint64_t v17 = v13 + v15 * 8;
          LODWORD(v9[v15]) = *(_DWORD *)(v13 + v15 * 8);
          long long v18 = (std::string *)&v9[v15 + 1];
          int v19 = (const std::string::value_type **)(v13 + v15 * 8 + 8);
          if (*(char *)(v13 + v15 * 8 + 31) < 0)
          {
            std::string::__init_copy_ctor_external(v18, *v19, *(void *)(v17 + 16));
          }
          else
          {
            long long v16 = *(_OWORD *)v19;
            v9[v15 + 3] = *(void **)(v13 + v15 * 8 + 24);
            *(_OWORD *)&v18->__r_.__value_.__l.__data_ = v16;
          }
          LODWORD(v9[v15 + 4]) = *(_DWORD *)(v17 + 32);
          v15 += 5;
        }
        while (v17 + 40 != a3);
        unint64_t v14 = (char *)&v9[v15];
      }
      a1[1] = v14;
    }
  }
  else
  {
    if (v9)
    {
      uint64_t v10 = (void **)a1[1];
      long long v11 = *a1;
      if (v10 != v9)
      {
        do
        {
          if (*((char *)v10 - 9) < 0) {
            operator delete(*(v10 - 4));
          }
          v10 -= 5;
        }
        while (v10 != v9);
        long long v11 = *a1;
      }
      a1[1] = v9;
      operator delete(v11);
      uint64_t v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a4 > 0x666666666666666) {
      goto LABEL_45;
    }
    unint64_t v20 = 0xCCCCCCCCCCCCCCCDLL * (v8 >> 3);
    uint64_t v21 = 2 * v20;
    if (2 * v20 <= a4) {
      uint64_t v21 = a4;
    }
    unint64_t v22 = v20 >= 0x333333333333333 ? 0x666666666666666 : v21;
    if (v22 > 0x666666666666666) {
LABEL_45:
    }
      abort();
    uint64_t v23 = 40 * v22;
    uint64_t v24 = (char *)operator new(40 * v22);
    *a1 = v24;
    a1[1] = v24;
    a1[2] = &v24[v23];
    if (v6 != a3)
    {
      uint64_t v25 = 0;
      do
      {
        uint64_t v26 = v6 + v25;
        *(_DWORD *)&v24[v25] = *(_DWORD *)(v6 + v25);
        unint64_t v27 = (std::string *)&v24[v25 + 8];
        uint64_t v28 = (const std::string::value_type **)(v6 + v25 + 8);
        if (*(char *)(v6 + v25 + 31) < 0)
        {
          std::string::__init_copy_ctor_external(v27, *v28, *(void *)(v26 + 16));
        }
        else
        {
          *(_OWORD *)&v27->__r_.__value_.__l.__data_ = *(_OWORD *)v28;
          *(void *)&v24[v25 + 24] = *(void *)(v6 + v25 + 24);
        }
        *(_DWORD *)&v24[v25 + 32] = *(_DWORD *)(v26 + 32);
        v25 += 40;
      }
      while (v26 + 40 != a3);
      v24 += v25;
    }
    a1[1] = v24;
  }
}

void sub_242A4C098(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_242A4C0A0(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void std::vector<std::shared_ptr<AGX::HAL200::Sampler>>::__assign_with_size[abi:nn180100]<std::shared_ptr<AGX::HAL200::Sampler>*,std::shared_ptr<AGX::HAL200::Sampler>*>(uint64_t a1, uint64_t *a2, uint64_t *a3, size_t __sz)
{
  uint64_t v6 = a2;
  uint64_t v8 = *(void *)(a1 + 16);
  long long v9 = *(char **)a1;
  if (__sz <= (v8 - *(void *)a1) >> 4)
  {
    uint64_t v13 = *(char **)(a1 + 8);
    unint64_t v14 = (v13 - v9) >> 4;
    if (v14 >= __sz)
    {
      if (a2 != a3)
      {
        do
        {
          uint64_t v20 = *v6;
          uint64_t v19 = v6[1];
          if (v19) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v19 + 8), 1uLL, memory_order_relaxed);
          }
          uint64_t v21 = (std::__shared_weak_count *)*((void *)v9 + 1);
          *(void *)long long v9 = v20;
          *((void *)v9 + 1) = v19;
          if (v21 && !atomic_fetch_add(&v21->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
            std::__shared_weak_count::__release_weak(v21);
          }
          v9 += 16;
          v6 += 2;
        }
        while (v6 != a3);
        uint64_t v13 = *(char **)(a1 + 8);
      }
      for (; v13 != v9; v13 -= 16)
      {
        uint64_t v30 = (std::__shared_weak_count *)*((void *)v13 - 1);
        if (v30 && !atomic_fetch_add(&v30->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
          std::__shared_weak_count::__release_weak(v30);
        }
      }
      *(void *)(a1 + 8) = v9;
    }
    else
    {
      uint64_t v15 = &a2[2 * v14];
      if (v13 != v9)
      {
        do
        {
          uint64_t v17 = *v6;
          uint64_t v16 = v6[1];
          if (v16) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v16 + 8), 1uLL, memory_order_relaxed);
          }
          long long v18 = (std::__shared_weak_count *)*((void *)v9 + 1);
          *(void *)long long v9 = v17;
          *((void *)v9 + 1) = v16;
          if (v18 && !atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
            std::__shared_weak_count::__release_weak(v18);
          }
          v6 += 2;
          v9 += 16;
        }
        while (v6 != v15);
        long long v9 = *(char **)(a1 + 8);
      }
      uint64_t v28 = v9;
      if (v15 != a3)
      {
        uint64_t v28 = v9;
        do
        {
          uint64_t v29 = v15[1];
          *(void *)uint64_t v28 = *v15;
          *((void *)v28 + 1) = v29;
          if (v29) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v29 + 8), 1uLL, memory_order_relaxed);
          }
          v28 += 16;
          v15 += 2;
        }
        while (v15 != a3);
      }
      *(void *)(a1 + 8) = v28;
    }
  }
  else
  {
    if (v9)
    {
      uint64_t v10 = *(char **)(a1 + 8);
      long long v11 = *(char **)a1;
      if (v10 != v9)
      {
        do
        {
          int v12 = (std::__shared_weak_count *)*((void *)v10 - 1);
          if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
            std::__shared_weak_count::__release_weak(v12);
          }
          v10 -= 16;
        }
        while (v10 != v9);
        long long v11 = *(char **)a1;
      }
      *(void *)(a1 + 8) = v9;
      operator delete(v11);
      uint64_t v8 = 0;
      *(void *)a1 = 0;
      *(void *)(a1 + 8) = 0;
      *(void *)(a1 + 16) = 0;
    }
    if (__sz >> 60) {
      goto LABEL_55;
    }
    uint64_t v22 = v8 >> 3;
    if (v8 >> 3 <= __sz) {
      uint64_t v22 = __sz;
    }
    BOOL v23 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0;
    unint64_t v24 = 0xFFFFFFFFFFFFFFFLL;
    if (!v23) {
      unint64_t v24 = v22;
    }
    if (v24 >> 60) {
LABEL_55:
    }
      abort();
    uint64_t v25 = 2 * v24;
    uint64_t v26 = operator new(16 * v24);
    *(void *)a1 = v26;
    *(void *)(a1 + 8) = v26;
    for (*(void *)(a1 + 16) = &v26[v25]; v6 != a3; v6 += 2)
    {
      uint64_t v27 = v6[1];
      void *v26 = *v6;
      v26[1] = v27;
      if (v27) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v27 + 8), 1uLL, memory_order_relaxed);
      }
      v26 += 2;
    }
    *(void *)(a1 + 8) = v26;
  }
}

void std::__hash_table<std::__hash_value_type<std::string,AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::ExternalSymbolInfo>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::ExternalSymbolInfo>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::ExternalSymbolInfo>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::ExternalSymbolInfo>>>::__node_insert_multi(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (void *)a2;
  uint64_t v4 = (void *)(a2 + 16);
  int v5 = *(char *)(a2 + 39);
  if (v5 >= 0) {
    uint64_t v6 = (uint64_t *)(a2 + 16);
  }
  else {
    uint64_t v6 = *(uint64_t **)(a2 + 16);
  }
  if (v5 >= 0) {
    unint64_t v7 = *(unsigned __int8 *)(a2 + 39);
  }
  else {
    unint64_t v7 = *(void *)(a2 + 24);
  }
  unint64_t v8 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:nn180100](v6, v7);
  *(v4 - 1) = v8;
  unint64_t v9 = *(void *)(a1 + 8);
  float v10 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v11 = *(float *)(a1 + 32);
  unint64_t v97 = v8;
  int v95 = v2;
  if (!v9 || (float)(v11 * (float)v9) < v10)
  {
    int v93 = v4;
    BOOL v12 = 1;
    if (v9 >= 3) {
      BOOL v12 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v13 = v12 | (2 * v9);
    unint64_t v14 = vcvtps_u32_f32(v10 / v11);
    if (v13 <= v14) {
      size_t v15 = v14;
    }
    else {
      size_t v15 = v13;
    }
    if (v15 == 1)
    {
      size_t v15 = 2;
    }
    else if ((v15 & (v15 - 1)) != 0)
    {
      size_t prime = std::__next_prime(v15);
      unint64_t v8 = v97;
      size_t v15 = prime;
      unint64_t v9 = *(void *)(a1 + 8);
    }
    if (v15 > v9) {
      goto LABEL_19;
    }
    if (v15 >= v9) {
      goto LABEL_101;
    }
    unint64_t v24 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (v9 < 3 || (uint8x8_t v25 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v25.i16[0] = vaddlv_u8(v25), v25.u32[0] > 1uLL))
    {
      unint64_t v24 = std::__next_prime(v24);
      unint64_t v8 = v97;
    }
    else
    {
      uint64_t v26 = 1 << -(char)__clz(v24 - 1);
      if (v24 >= 2) {
        unint64_t v24 = v26;
      }
    }
    if (v15 <= v24) {
      size_t v15 = v24;
    }
    if (v15 >= v9)
    {
      unint64_t v9 = *(void *)(a1 + 8);
LABEL_101:
      uint64_t v4 = v93;
    }
    else
    {
      if (v15)
      {
LABEL_19:
        if (v15 >> 61) {
          std::__throw_bad_array_new_length[abi:nn180100]();
        }
        uint64_t v17 = operator new(8 * v15);
        long long v18 = *(void **)a1;
        *(void *)a1 = v17;
        if (v18) {
          operator delete(v18);
        }
        uint64_t v19 = 0;
        *(void *)(a1 + 8) = v15;
        do
          *(void *)(*(void *)a1 + 8 * v19++) = 0;
        while (v15 != v19);
        uint64_t v20 = *(uint64_t ***)(a1 + 16);
        unint64_t v8 = v97;
        if (!v20) {
          goto LABEL_90;
        }
        size_t v21 = (size_t)v20[1];
        uint8x8_t v22 = (uint8x8_t)vcnt_s8((int8x8_t)v15);
        v22.i16[0] = vaddlv_u8(v22);
        unint64_t v23 = v22.u32[0];
        if (v22.u32[0] > 1uLL)
        {
          if (v21 >= v15) {
            v21 %= v15;
          }
        }
        else
        {
          v21 &= v15 - 1;
        }
        *(void *)(*(void *)a1 + 8 * v21) = a1 + 16;
        uint64_t v27 = *v20;
        if (!*v20)
        {
LABEL_90:
          unint64_t v9 = v15;
          goto LABEL_101;
        }
        unint64_t v94 = v22.u32[0];
        while (1)
        {
          size_t v28 = v27[1];
          if (v23 > 1)
          {
            if (v28 >= v15) {
              v28 %= v15;
            }
          }
          else
          {
            v28 &= v15 - 1;
          }
          if (v28 == v21)
          {
            uint64_t v20 = (uint64_t **)v27;
          }
          else
          {
            if (*(void *)(*(void *)a1 + 8 * v28))
            {
              uint64_t v29 = (uint64_t *)*v27;
              size_t v96 = v21;
              if (*v27)
              {
                size_t v30 = v27[3];
                if (*((char *)v27 + 39) >= 0) {
                  uint64_t v31 = *((unsigned __int8 *)v27 + 39);
                }
                else {
                  uint64_t v31 = v27[3];
                }
                if ((*((unsigned char *)v27 + 39) & 0x80) == 0)
                {
                  if (*((unsigned char *)v27 + 39))
                  {
                    long long v32 = (uint64_t *)*v27;
                    long long v33 = v27;
LABEL_52:
                    uint64_t v29 = v32;
                    uint64_t v34 = *((unsigned __int8 *)v32 + 39);
                    int v35 = (char)v34;
                    if ((v34 & 0x80u) != 0) {
                      uint64_t v34 = v29[3];
                    }
                    if (v31 == v34)
                    {
                      if (v35 >= 0) {
                        long long v36 = (unsigned __int8 *)(v29 + 2);
                      }
                      else {
                        long long v36 = (unsigned __int8 *)v29[2];
                      }
                      long long v37 = (unsigned __int8 *)(v27 + 2);
                      uint64_t v38 = *((unsigned __int8 *)v27 + 39);
                      while (*v37 == *v36)
                      {
                        ++v37;
                        ++v36;
                        if (!--v38)
                        {
                          long long v32 = (uint64_t *)*v29;
                          long long v33 = v29;
                          uint64_t v29 = 0;
                          if (v32) {
                            goto LABEL_52;
                          }
                          goto LABEL_78;
                        }
                      }
                    }
                  }
                  else
                  {
                    uint64_t v48 = *((unsigned __int8 *)v29 + 39);
                    if ((v48 & 0x80u) != 0) {
                      uint64_t v48 = v29[3];
                    }
                    long long v33 = v27;
                    if (v48 == *((unsigned __int8 *)v27 + 39))
                    {
                      do
                      {
                        long long v33 = v29;
                        uint64_t v29 = (uint64_t *)*v29;
                        if (!v29) {
                          break;
                        }
                        uint64_t v49 = *((unsigned __int8 *)v29 + 39);
                        if ((v49 & 0x80u) != 0) {
                          uint64_t v49 = v29[3];
                        }
                      }
                      while (v31 == v49);
                    }
                  }
                  goto LABEL_78;
                }
                BOOL v39 = *((char *)v29 + 39) < 0;
                uint64_t v40 = *((unsigned __int8 *)v29 + 39);
                if ((v40 & 0x80u) != 0) {
                  uint64_t v40 = v29[3];
                }
                if (v31 == v40)
                {
                  int v41 = (const void *)v27[2];
                  long long v33 = v27;
                  while (1)
                  {
                    int v42 = v29;
                    int v45 = (const void *)v29[2];
                    uint64_t v43 = v29 + 2;
                    unint64_t v44 = v45;
                    if (v39) {
                      int v46 = v44;
                    }
                    else {
                      int v46 = v43;
                    }
                    if (memcmp(v41, v46, v30))
                    {
                      uint64_t v29 = v42;
                      goto LABEL_89;
                    }
                    uint64_t v29 = (uint64_t *)*v42;
                    if (!*v42) {
                      break;
                    }
                    BOOL v39 = *((char *)v29 + 39) < 0;
                    uint64_t v47 = *((unsigned __int8 *)v29 + 39);
                    if ((v47 & 0x80u) != 0) {
                      uint64_t v47 = v29[3];
                    }
                    long long v33 = v42;
                    unint64_t v8 = v97;
                    if (v31 != v47) {
                      goto LABEL_78;
                    }
                  }
                  long long v33 = v42;
LABEL_89:
                  unint64_t v8 = v97;
                  goto LABEL_78;
                }
              }
              long long v33 = v27;
LABEL_78:
              *uint64_t v20 = v29;
              *long long v33 = **(void **)(*(void *)a1 + 8 * v28);
              **(void **)(*(void *)a1 + 8 * v28) = v27;
              size_t v21 = v96;
              unint64_t v23 = v94;
              goto LABEL_38;
            }
            *(void *)(*(void *)a1 + 8 * v28) = v20;
            uint64_t v20 = (uint64_t **)v27;
            size_t v21 = v28;
          }
LABEL_38:
          uint64_t v27 = *v20;
          if (!*v20)
          {
            unint64_t v9 = v15;
            uint64_t v2 = v95;
            goto LABEL_101;
          }
        }
      }
      unint64_t v50 = *(void **)a1;
      *(void *)a1 = 0;
      uint64_t v4 = v93;
      if (v50)
      {
        operator delete(v50);
        unint64_t v8 = v97;
      }
      unint64_t v9 = 0;
      *(void *)(a1 + 8) = 0;
    }
  }
  uint8x8_t v51 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
  v51.i16[0] = vaddlv_u8(v51);
  unint64_t v52 = v51.u32[0];
  if (v51.u32[0] > 1uLL)
  {
    unint64_t v53 = v8;
    if (v9 <= v8) {
      unint64_t v53 = v8 % v9;
    }
  }
  else
  {
    unint64_t v53 = (v9 - 1) & v8;
  }
  int v54 = *(uint64_t **)(*(void *)a1 + 8 * v53);
  if (v54)
  {
    char v55 = *((unsigned char *)v2 + 39);
    if (v55 >= 0) {
      uint64_t v56 = *((unsigned __int8 *)v2 + 39);
    }
    else {
      uint64_t v56 = v2[3];
    }
    if (v55 < 0) {
      uint64_t v4 = (void *)v2[2];
    }
    if (v51.u32[0] >= 2uLL)
    {
      int v77 = 0;
      do
      {
        int v60 = v54;
        int v54 = (uint64_t *)*v54;
        if (!v54) {
          break;
        }
        unint64_t v80 = v54[1];
        unint64_t v81 = v80;
        if (v80 >= v9) {
          unint64_t v81 = v80 % v9;
        }
        if (v81 != v53) {
          break;
        }
        if (v80 == v8
          && ((uint64_t v82 = *((unsigned __int8 *)v54 + 39), (v82 & 0x80u) == 0)
            ? (uint64_t v83 = *((unsigned __int8 *)v54 + 39))
            : (uint64_t v83 = v54[3]),
              v83 == v56))
        {
          int v84 = (const void **)(v54 + 2);
          if ((v82 & 0x80) != 0)
          {
            int v92 = memcmp(*v84, v4, v54[3]);
            unint64_t v8 = v97;
            BOOL v78 = v92 == 0;
          }
          else if (*((unsigned char *)v54 + 39))
          {
            uint64_t v85 = v82 - 1;
            int v86 = (unsigned __int8 *)v4;
            do
            {
              int v88 = *(unsigned __int8 *)v84;
              int v84 = (const void **)((char *)v84 + 1);
              int v87 = v88;
              int v90 = *v86++;
              int v89 = v90;
              BOOL v71 = v85-- != 0;
              char v91 = v71;
              BOOL v73 = v87 == v89;
              BOOL v78 = v87 == v89;
            }
            while (v73 && (v91 & 1) != 0);
          }
          else
          {
            BOOL v78 = 1;
          }
        }
        else
        {
          BOOL v78 = 0;
        }
        int v79 = v77 & !v78;
        v77 |= v78;
      }
      while (v79 != 1);
    }
    else
    {
      int v57 = 0;
      do
      {
        int v60 = v54;
        int v54 = (uint64_t *)*v54;
        if (!v54) {
          break;
        }
        uint64_t v61 = v54[1];
        if ((v61 & (v9 - 1)) != v53) {
          break;
        }
        if (v61 == v8
          && ((uint64_t v62 = *((unsigned __int8 *)v54 + 39), (v62 & 0x80u) == 0)
            ? (uint64_t v63 = *((unsigned __int8 *)v54 + 39))
            : (uint64_t v63 = v54[3]),
              v63 == v56))
        {
          uint64_t v64 = (const void **)(v54 + 2);
          if ((v62 & 0x80) != 0)
          {
            int v74 = memcmp(*v64, v4, v54[3]);
            unint64_t v8 = v97;
            BOOL v58 = v74 == 0;
          }
          else if (*((unsigned char *)v54 + 39))
          {
            uint64_t v65 = v62 - 1;
            int v66 = (unsigned __int8 *)v4;
            do
            {
              int v68 = *(unsigned __int8 *)v64;
              uint64_t v64 = (const void **)((char *)v64 + 1);
              int v67 = v68;
              int v70 = *v66++;
              int v69 = v70;
              BOOL v71 = v65-- != 0;
              char v72 = v71;
              BOOL v73 = v67 == v69;
              BOOL v58 = v67 == v69;
            }
            while (v73 && (v72 & 1) != 0);
          }
          else
          {
            BOOL v58 = 1;
          }
        }
        else
        {
          BOOL v58 = 0;
        }
        char v59 = v57 & !v58;
        v57 |= v58;
      }
      while ((v59 & 1) == 0);
    }
  }
  else
  {
    int v60 = 0;
  }
  unint64_t v75 = v95[1];
  if (v52 > 1)
  {
    if (v75 >= v9) {
      v75 %= v9;
    }
  }
  else
  {
    v75 &= v9 - 1;
  }
  if (!v60)
  {
    void *v95 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v95;
    *(void *)(*(void *)a1 + 8 * v75) = a1 + 16;
    if (!*v95) {
      goto LABEL_178;
    }
    unint64_t v76 = *(void *)(*v95 + 8);
    if (v52 > 1)
    {
      if (v76 >= v9) {
        v76 %= v9;
      }
    }
    else
    {
      v76 &= v9 - 1;
    }
LABEL_177:
    *(void *)(*(void *)a1 + 8 * v76) = v95;
    goto LABEL_178;
  }
  void *v95 = *v60;
  *int v60 = v95;
  if (*v95)
  {
    unint64_t v76 = *(void *)(*v95 + 8);
    if (v52 > 1)
    {
      if (v76 >= v9) {
        v76 %= v9;
      }
    }
    else
    {
      v76 &= v9 - 1;
    }
    if (v76 != v75) {
      goto LABEL_177;
    }
  }
LABEL_178:
  ++*(void *)(a1 + 24);
}

void AGX::cloneIFTs_impl<AGX::HAL200::ObjClasses,AGX::HAL200::Classes>()
{
}

void sub_242A4CE78(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_242A4CE98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, os_unfair_lock_t lock)
{
  os_unfair_lock_unlock(lock);
  if (!v14) {
    _Unwind_Resume(a1);
  }
  operator delete(v14);
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<unsigned long long,AGXG17FamilyVisibleFunctionTable *>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,AGXG17FamilyVisibleFunctionTable *>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,AGXG17FamilyVisibleFunctionTable *>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,AGXG17FamilyVisibleFunctionTable *>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long &&>,std::tuple<>>(uint64_t a1, unint64_t a2, void *a3)
{
  unint64_t v5 = a2;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = a2;
      if (v7 <= a2) {
        unint64_t v3 = a2 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & a2;
    }
    unint64_t v9 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      float v10 = *v9;
      if (*v9)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v12 = v10[1];
            if (v12 == a2)
            {
              if (v10[2] == a2) {
                return v10;
              }
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_22;
            }
            float v10 = (void *)*v10;
            if (!v10) {
              goto LABEL_22;
            }
          }
        }
        do
        {
          unint64_t v11 = v10[1];
          if (v11 == a2)
          {
            if (v10[2] == a2) {
              return v10;
            }
          }
          else
          {
            if (v11 >= v7) {
              v11 %= v7;
            }
            if (v11 != v3) {
              break;
            }
          }
          float v10 = (void *)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_22:
  float v10 = operator new(0x20uLL);
  *float v10 = 0;
  v10[1] = v5;
  v10[2] = *a3;
  v10[3] = 0;
  float v13 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v14 = *(float *)(a1 + 32);
  if (v7 && (float)(v14 * (float)v7) >= v13)
  {
    unint64_t v5 = v3;
  }
  else
  {
    BOOL v15 = 1;
    if (v7 >= 3) {
      BOOL v15 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v16 = v15 | (2 * v7);
    unint64_t v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17) {
      size_t prime = v17;
    }
    else {
      size_t prime = v16;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v7 = *(void *)(a1 + 8);
    }
    if (prime > v7) {
      goto LABEL_35;
    }
    if (prime < v7)
    {
      unint64_t v19 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v7 < 3 || (uint8x8_t v20 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v20.i16[0] = vaddlv_u8(v20), v20.u32[0] > 1uLL))
      {
        unint64_t v19 = std::__next_prime(v19);
      }
      else
      {
        uint64_t v21 = 1 << -(char)__clz(v19 - 1);
        if (v19 >= 2) {
          unint64_t v19 = v21;
        }
      }
      if (prime <= v19) {
        size_t prime = v19;
      }
      if (prime < v7) {
LABEL_35:
      }
        std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::__do_rehash<true>(a1, prime);
    }
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v5) {
        v5 %= v7;
      }
    }
    else
    {
      v5 &= v7 - 1;
    }
  }
  uint64_t v22 = *(void *)a1;
  unint64_t v23 = *(void **)(*(void *)a1 + 8 * v5);
  if (v23)
  {
    *float v10 = *v23;
LABEL_58:
    void *v23 = v10;
    goto LABEL_59;
  }
  *float v10 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v10;
  *(void *)(v22 + 8 * v5) = a1 + 16;
  if (*v10)
  {
    unint64_t v24 = *(void *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v24 >= v7) {
        v24 %= v7;
      }
    }
    else
    {
      v24 &= v7 - 1;
    }
    unint64_t v23 = (void *)(*(void *)a1 + 8 * v24);
    goto LABEL_58;
  }
LABEL_59:
  ++*(void *)(a1 + 24);
  return v10;
}

void sub_242A4D194(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<unsigned long long,AGXG17FamilyUserIntersectionFunctionTable *>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,AGXG17FamilyUserIntersectionFunctionTable *>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,AGXG17FamilyUserIntersectionFunctionTable *>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,AGXG17FamilyUserIntersectionFunctionTable *>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long &&>,std::tuple<>>(float *a1, unint64_t a2, void *a3)
{
  unint64_t v5 = a2;
  unint64_t v7 = *((void *)a1 + 1);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = a2;
      if (v7 <= a2) {
        unint64_t v3 = a2 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & a2;
    }
    unint64_t v9 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      float v10 = *v9;
      if (*v9)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v12 = v10[1];
            if (v12 == a2)
            {
              if (v10[2] == a2) {
                return v10;
              }
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_22;
            }
            float v10 = (void *)*v10;
            if (!v10) {
              goto LABEL_22;
            }
          }
        }
        do
        {
          unint64_t v11 = v10[1];
          if (v11 == a2)
          {
            if (v10[2] == a2) {
              return v10;
            }
          }
          else
          {
            if (v11 >= v7) {
              v11 %= v7;
            }
            if (v11 != v3) {
              break;
            }
          }
          float v10 = (void *)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_22:
  float v10 = operator new(0x20uLL);
  *float v10 = 0;
  v10[1] = v5;
  v10[2] = *a3;
  v10[3] = 0;
  float v13 = (float)(unint64_t)(*((void *)a1 + 3) + 1);
  float v14 = a1[8];
  if (v7 && (float)(v14 * (float)v7) >= v13)
  {
    unint64_t v5 = v3;
    goto LABEL_72;
  }
  BOOL v15 = 1;
  if (v7 >= 3) {
    BOOL v15 = (v7 & (v7 - 1)) != 0;
  }
  unint64_t v16 = v15 | (2 * v7);
  unint64_t v17 = vcvtps_u32_f32(v13 / v14);
  if (v16 <= v17) {
    size_t prime = v17;
  }
  else {
    size_t prime = v16;
  }
  if (prime == 1)
  {
    size_t prime = 2;
  }
  else if ((prime & (prime - 1)) != 0)
  {
    size_t prime = std::__next_prime(prime);
    unint64_t v7 = *((void *)a1 + 1);
  }
  if (prime > v7)
  {
LABEL_35:
    if (prime >> 61) {
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
    unint64_t v19 = operator new(8 * prime);
    uint8x8_t v20 = *(void **)a1;
    *(void *)a1 = v19;
    if (v20) {
      operator delete(v20);
    }
    uint64_t v21 = 0;
    *((void *)a1 + 1) = prime;
    do
      *(void *)(*(void *)a1 + 8 * v21++) = 0;
    while (prime != v21);
    unint64_t v23 = (uint64_t *)(a1 + 4);
    uint64_t v22 = (void *)*((void *)a1 + 2);
    if (!v22) {
      goto LABEL_59;
    }
    size_t v24 = v22[1];
    size_t v25 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      size_t v26 = v24 & v25;
      *(void *)(*(void *)a1 + 8 * v26) = v23;
      for (uint64_t i = (void *)*v22; *v22; uint64_t i = (void *)*v22)
      {
        size_t v28 = i[1] & v25;
        if (v28 == v26)
        {
          uint64_t v22 = i;
        }
        else if (*(void *)(*(void *)a1 + 8 * v28))
        {
          *uint64_t v22 = *i;
          uint64_t v29 = 8 * v28;
          *uint64_t i = **(void **)(*(void *)a1 + v29);
          **(void **)(*(void *)a1 + v29) = i;
        }
        else
        {
          *(void *)(*(void *)a1 + 8 * v28) = v22;
          uint64_t v22 = i;
          size_t v26 = v28;
        }
      }
LABEL_59:
      unint64_t v7 = prime;
      goto LABEL_60;
    }
    if (v24 >= prime) {
      v24 %= prime;
    }
    *(void *)(*(void *)a1 + 8 * v24) = v23;
    long long v33 = (void *)*v22;
    if (!*v22) {
      goto LABEL_59;
    }
    while (1)
    {
      size_t v35 = v33[1];
      if (v35 >= prime) {
        v35 %= prime;
      }
      if (v35 != v24)
      {
        if (!*(void *)(*(void *)a1 + 8 * v35))
        {
          *(void *)(*(void *)a1 + 8 * v35) = v22;
          goto LABEL_64;
        }
        *uint64_t v22 = *v33;
        uint64_t v34 = 8 * v35;
        *long long v33 = **(void **)(*(void *)a1 + v34);
        **(void **)(*(void *)a1 + v34) = v33;
        long long v33 = v22;
      }
      size_t v35 = v24;
LABEL_64:
      uint64_t v22 = v33;
      long long v33 = (void *)*v33;
      size_t v24 = v35;
      if (!v33) {
        goto LABEL_59;
      }
    }
  }
  if (prime >= v7) {
    goto LABEL_60;
  }
  unint64_t v30 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 3) / a1[8]);
  if (v7 < 3 || (uint8x8_t v31 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v31.i16[0] = vaddlv_u8(v31), v31.u32[0] > 1uLL))
  {
    unint64_t v30 = std::__next_prime(v30);
  }
  else
  {
    uint64_t v32 = 1 << -(char)__clz(v30 - 1);
    if (v30 >= 2) {
      unint64_t v30 = v32;
    }
  }
  if (prime <= v30) {
    size_t prime = v30;
  }
  if (prime < v7)
  {
    if (!prime)
    {
      uint64_t v40 = *(void **)a1;
      *(void *)a1 = 0;
      if (v40) {
        operator delete(v40);
      }
      unint64_t v7 = 0;
      *((void *)a1 + 1) = 0;
      goto LABEL_60;
    }
    goto LABEL_35;
  }
  unint64_t v7 = *((void *)a1 + 1);
LABEL_60:
  if ((v7 & (v7 - 1)) != 0)
  {
    if (v7 <= v5) {
      v5 %= v7;
    }
  }
  else
  {
    v5 &= v7 - 1;
  }
LABEL_72:
  long long v36 = *(void **)a1;
  long long v37 = *(void **)(*(void *)a1 + 8 * v5);
  if (v37)
  {
    *float v10 = *v37;
LABEL_80:
    void *v37 = v10;
    goto LABEL_81;
  }
  *float v10 = *((void *)a1 + 2);
  *((void *)a1 + 2) = v10;
  v36[v5] = a1 + 4;
  if (*v10)
  {
    unint64_t v38 = *(void *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v38 >= v7) {
        v38 %= v7;
      }
    }
    else
    {
      v38 &= v7 - 1;
    }
    long long v37 = (void *)(*(void *)a1 + 8 * v38);
    goto LABEL_80;
  }
LABEL_81:
  ++*((void *)a1 + 3);
  return v10;
}

void sub_242A4D5F8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

double ___ZN3AGX21ComputeUSCStateLoaderINS_6HAL2008EncodersENS1_7ClassesEE17dataBufferConfigsERK16AGXGPUCoreConfig_block_invoke(uint64_t a1)
{
  *(void *)&double result = 0x2000;
  xmmword_268D599A0 = xmmword_242EA7E50;
  qword_268D599B0 = 28;
  dword_268D599B8 = 1;
  xmmword_268D599C0 = xmmword_242EA7E50;
  qword_268D599D0 = 28;
  dword_268D599D8 = 1;
  xmmword_268D59920 = xmmword_242EA7E50;
  qword_268D59930 = 28;
  dword_268D59938 = 1;
  qword_268D596C8 = 0;
  unk_268D596D0 = 0;
  qword_268D596C0 = 0x2000;
  dword_268D596D8 = 1;
  qword_268D59708 = 0;
  unk_268D59710 = 0;
  qword_268D59700 = 0x2000;
  dword_268D59718 = 1;
  qword_268D597A0 = (1792 * *(_DWORD *)(*(void *)(a1 + 32) + 48) + 11648);
  unk_268D597A8 = xmmword_242EA7F60;
  dword_268D597B8 = 1;
  xmmword_268D59800 = xmmword_242EA7E60;
  qword_268D59810 = 12;
  dword_268D59818 = 1;
  qword_268D598E0 = 64;
  qword_268D598E8 = 0;
  qword_268D598F0 = 0;
  dword_268D598F8 = 1;
  xmmword_268D59A60 = xmmword_242EA7E50;
  qword_268D59A70 = 28;
  dword_268D59A78 = 1;
  xmmword_268D59A80 = xmmword_242EA7E50;
  qword_268D59A90 = 28;
  dword_268D59A98 = 1;
  return result;
}

uint64_t AGX::ComputeUSCStateLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes>::directTGSizeOptimization(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  *a4 = 3;
  unsigned int v4 = *(_DWORD *)(a3 + 60);
  int v5 = *(_DWORD *)(a3 + 28);
  int32x4_t v6 = *(int32x4_t *)(a3 + 32);
  v6.i64[1] = *(void *)(a2 + 3528);
  int16x4_t v7 = vmovn_s32(v6);
  unsigned int v8 = HIDWORD(*(void *)(a3 + 52));
  unsigned int v9 = *(void *)(a3 + 52);
  if (v4 >= v8) {
    unsigned int v10 = 2;
  }
  else {
    unsigned int v10 = 0;
  }
  if (v8 >= v9 && v8 >= v4) {
    unsigned int v10 = 1;
  }
  BOOL v12 = v9 >= v8 && v9 >= v4;
  int v13 = v7.u16[0];
  if (v12) {
    uint64_t v14 = 0;
  }
  else {
    uint64_t v14 = v10;
  }
  int v15 = v7.u16[1];
  if (v7.u16[0] > (unsigned __int16)v5 || v7.u16[1] > (unsigned __int16)v5)
  {
    if (v7.u16[0] < (unsigned __int16)v5 || v7.u16[0] < v7.u16[1])
    {
      if (v7.u16[1] >= v7.u16[0] && v7.u16[1] >= (unsigned __int16)*(_DWORD *)(a3 + 28)) {
        LODWORD(v16) = 2;
      }
      else {
        LODWORD(v16) = 0;
      }
    }
    else
    {
      LODWORD(v16) = 1;
    }
  }
  else
  {
    LODWORD(v16) = 0;
  }
  unsigned __int16 v45 = *(_DWORD *)(a3 + 28);
  __int32 v46 = v7.i32[0];
  if (v7.u16[1] == (unsigned __int16)v5 && v7.u16[0] == (unsigned __int16)v5) {
    uint64_t v16 = v14;
  }
  else {
    uint64_t v16 = v16;
  }
  unint64_t v19 = (44739243 * (unint64_t)(v7.u16[3] + 95)) >> 32;
  unsigned int v20 = (unsigned __int16)(v7.i16[0] * v5 * v7.i16[1]);
  uint64_t result = v20 & 0x1F;
  BOOL v22 = (v20 & 0x1F) == 0;
  if (v19 > v20 || result != 0)
  {
    unsigned int v24 = v7.u16[3] / v20;
    uint64_t result = 96;
    if (v24 >= 0x60) {
      unsigned int v24 = 96;
    }
    float v25 = (float)v7.u16[3];
    float v26 = (float)(int)(v24 * v20) / v25;
    while (1)
    {
      if (v22)
      {
        unsigned int v27 = v20 + 32;
        unsigned int v28 = (v20 + 32) / ((unsigned __int16)v13 * (unsigned __int16)v15);
        if (v27 == v28 * (unsigned __int16)v13 * (unsigned __int16)v15)
        {
          unsigned __int16 v50 = v28;
          if (v9 >= (unsigned __int16)v28) {
            unsigned __int16 v29 = v13 * v15 * v28;
          }
          else {
            unsigned __int16 v29 = -2;
          }
        }
        else
        {
          unsigned __int16 v29 = -1;
        }
        unsigned __int16 v47 = v29;
        unsigned int v32 = (unsigned __int16)v15 * (unsigned __int16)v5;
        int v33 = v27 / v32;
        if (v27 == v27 / v32 * v32)
        {
          unsigned __int16 v51 = v27 / v32;
          if (v8 >= (unsigned __int16)v33) {
            unsigned __int16 v30 = v15 * v5 * v33;
          }
          else {
            unsigned __int16 v30 = -2;
          }
        }
        else
        {
          unsigned __int16 v30 = -1;
        }
        unsigned __int16 v48 = v30;
        unsigned int v34 = (unsigned __int16)v5 * (unsigned __int16)v13;
        int v35 = v27 / v34;
        if (v27 == v27 / v34 * v34)
        {
          unsigned __int16 v52 = v27 / v34;
          unsigned __int16 v31 = v5 * v13 * v35;
          if (v4 < (unsigned __int16)v35) {
            unsigned __int16 v31 = -2;
          }
        }
        else
        {
          unsigned __int16 v31 = -1;
        }
      }
      else
      {
        unsigned __int16 v50 = v5 + (1 << __clz(__rbit32(v5 | 0x10000)));
        if (v9 < v50) {
          unsigned __int16 v29 = -1;
        }
        else {
          unsigned __int16 v29 = v13 * v15 * v50;
        }
        unsigned __int16 v47 = v29;
        unsigned __int16 v51 = v13 + (1 << __clz(__rbit32(v13 | 0x10000)));
        if (v8 < v51) {
          unsigned __int16 v30 = -1;
        }
        else {
          unsigned __int16 v30 = v15 * v5 * v51;
        }
        unsigned __int16 v48 = v30;
        unsigned __int16 v52 = v15 + (1 << __clz(__rbit32(v15 | 0x10000)));
        if (v4 < v52) {
          unsigned __int16 v31 = -1;
        }
        else {
          unsigned __int16 v31 = v5 * v13 * v52;
        }
      }
      BOOL v36 = v30 < v29;
      unsigned int v37 = *(&v47 + v36);
      unsigned __int16 v49 = v31;
      if (v37 <= v31) {
        unsigned int v38 = v36;
      }
      else {
        unsigned int v38 = 2;
      }
      unsigned int v39 = *(&v47 + v38);
      if (v39 > v7.u16[2]) {
        break;
      }
      uint64_t v40 = v16;
      int v41 = v16;
      if (v39 != *(&v47 + v16))
      {
        if (v39 == *(&v47 + v14)) {
          uint64_t v40 = v14;
        }
        else {
          uint64_t v40 = v38;
        }
        int v41 = v40;
      }
      __int16 v42 = *(&v50 + v40);
      unsigned int v43 = (unsigned __int16)(*(&v45 + (unsigned __int16)(v41 + 2 - 3 * ((21846 * (v41 + 2)) >> 16)))
                             * v42
                             * *(&v45 + (unsigned __int16)((v41 | 4) - 3 * ((21846 * (v41 | 4u)) >> 16))));
      unsigned int v44 = v7.u16[3] / v43;
      if (v44 >= 0x60) {
        unsigned int v44 = 96;
      }
      if ((float)((float)(int)(v44 * v43) / v25) < v26) {
        break;
      }
      *(&v45 + v40) = v42;
      int v5 = v45;
      int v13 = (unsigned __int16)v46;
      int v15 = HIWORD(v46);
      unsigned int v20 = (unsigned __int16)(v46 * v45 * HIWORD(v46));
      BOOL v22 = (((_BYTE)v46 * (_BYTE)v45 * BYTE2(v46)) & 0x1F) == 0;
      float v26 = (float)(int)(v44 * v43) / v25;
      if (v19 <= v20)
      {
        float v26 = (float)(int)(v44 * v43) / v25;
        if ((((_BYTE)v46 * (_BYTE)v45 * BYTE2(v46)) & 0x1F) == 0) {
          break;
        }
      }
    }
  }
  *(_DWORD *)(a3 + 28) = (unsigned __int16)v5;
  *(_DWORD *)(a3 + 32) = (unsigned __int16)v13;
  *(_DWORD *)(a3 + 36) = (unsigned __int16)v15;
  return result;
}

void AGX::ComputeUSCStateLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes>::emitComputeProgramVariantAndArguments(char ***a1, unsigned int a2, void *a3, uint64_t a4, void *a5, uint64_t a6, int a7, uint64_t a8, int a9, int a10, __int16 a11, _DWORD *a12)
{
  v188[1] = *MEMORY[0x263EF8340];
  uint64_t v18 = (*(_DWORD *)(a4 + 3548) + 3) >> 2;
  int v20 = *((_DWORD *)a1 + 5);
  unsigned int v19 = *((_DWORD *)a1 + 6);
  int v21 = *((_DWORD *)a1 + 4);
  if (v19 <= 1) {
    unsigned int v19 = 1;
  }
  int v22 = 4 * v19 * v18;
  int v23 = v22 * v21 * v20;
  int v24 = v22 * (1 << -__clz(v21 - 1) << -__clz(v20 - 1));
  if (!v23) {
    int v24 = 0;
  }
  *(_DWORD *)(a6 + 8492) = v24;
  *(_DWORD *)(a6 + 8496) = a7;
  int v25 = *((_DWORD *)a1 + 5);
  unsigned int v26 = *((_DWORD *)a1 + 6);
  int v27 = *((_DWORD *)a1 + 4);
  memset(v187, 0, 44);
  if (v26 <= 1) {
    uint64_t v28 = 1;
  }
  else {
    uint64_t v28 = v26;
  }
  int v29 = 4 * v28 * v18;
  if (v25 * v27 * v29 && (int v30 = 1 << -__clz(v27 - 1), v31 = -__clz(v25 - 1), (v30 << v31) * v29))
  {
    *((void *)&v187[0] + 1) = AGX::ESLInstructionEncoderGen3<AGX::HAL200::Encoders>::SpecLM::encodeImageBlockData(v18, v28, v30, 1 << (v31 & 0x1F));
    *(void *)&v187[1] = v32;
    int v33 = 0x10000;
  }
  else
  {
    int v33 = 0;
  }
  int v34 = (a7 + 63) & 0xFFC0;
  if (((a7 + 63) & 0xFFFFFFC0) == 0x10000) {
    int v34 = 0;
  }
  *(_DWORD *)((char *)v187 + 2) = v34 | v33;
  LOBYTE(v187[0]) = a7 != 0;
  AGX::ESLInstructionEncoderGen3<AGX::HAL200::Encoders>::AGX3EncodedInstr<AGXIotoInstruction_SPECLM_0>::AGX3EncodedInstr(v188, (char *)v187);
  uint64_t v35 = *(unsigned int *)(a4 + 608);
  if (v35)
  {
    unint64_t v36 = (a3[46] + 31) & 0xFFFFFFFFFFFFFFE0;
    unint64_t v37 = v36 + a3[48];
    a3[46] = v36 + v35;
  }
  else
  {
    unint64_t v37 = 0;
    unint64_t v36 = 0;
  }
  unint64_t v38 = v188[0];
  unsigned int v39 = (char *)((a3[26] + 63) & 0xFFFFFFFFFFFFFFC0);
  uint64_t v40 = a3[28];
  BOOL v186 = a3;
  a3[26] = &v39[*(_DWORD *)(*(void *)(a4 + 1936) + 8) - **(_DWORD **)(a4 + 1936)];
  unint64_t v41 = *(void *)(a4 + 840) - *(void *)(a4 + 832);
  int v42 = *(_DWORD *)(a4 + 792);
  if (v41) {
    int v43 = *(_DWORD *)(a4 + 792) & 1;
  }
  else {
    int v43 = 0;
  }
  if (v35)
  {
    unint64_t v44 = *(unsigned int *)(a4 + 1016);
    unsigned __int16 v45 = *(int **)(a4 + 640);
    uint64_t v46 = (*(void *)(a4 + 648) - (void)v45) >> 2;
    int v47 = *(_DWORD *)(a4 + 1004);
    uint64_t v48 = (*(void *)(a4 + 696) - *(void *)(a4 + 688)) >> 2;
    uint64_t v49 = *(void *)(a4 + 672);
    uint64_t v50 = *(void *)(a4 + 664);
    int v51 = *(_DWORD *)(a4 + 804) + *(_DWORD *)(a4 + 800);
    uint64_t v52 = *(void *)(a4 + 744);
    uint64_t v53 = *(void *)(a4 + 736);
    int v54 = *(unsigned __int8 *)(a4 + 1048);
    int v55 = *(unsigned __int8 *)(a4 + 1049);
    if (*(unsigned char *)(a4 + 1048))
    {
      a5[111] = v37 + *(unsigned int *)(a4 + 612);
      a5[112] = v37 + *(unsigned int *)(a4 + 616);
    }
    if (v55) {
      a5[115] = v37 + *(unsigned int *)(a4 + 632);
    }
    uint64_t v56 = 8 * (v48 + v46);
    int v57 = v43 + v42;
    if (v51) {
      a5[130] = v56 + v37 + 4 * (v57 + ((v41 >> 1) & 0xFFFFFFFE));
    }
    unint64_t v58 = v49 - v50;
    if (v46 == v44)
    {
      unsigned int v59 = 0;
      unint64_t v60 = v58 >> 2;
      if (!v44)
      {
LABEL_50:
        unint64_t v85 = v41 >> 2;
        if (v48)
        {
          a5[197] = v37 + v59;
          int v86 = (void *)(v36 + v59);
          int v87 = *(unsigned __int16 **)(a4 + 688);
          if (*(unsigned char *)(a4 + 784))
          {
            int v88 = *(unsigned __int16 **)(a4 + 712);
            for (uint64_t i = (*(void *)(a4 + 720) - (void)v88) >> 1; i; LODWORD(i) = i - 1)
            {
              int v90 = *v88++;
              v86[v90] = *(void *)(a5[v87[2 * v90]] + 8 * v87[2 * v90 + 1]);
            }
          }
          else
          {
            int v94 = v48;
            do
            {
              *v86++ = *(void *)(a5[*v87] + 8 * v87[1]);
              v87 += 2;
              --v94;
            }
            while (v94);
          }
          v59 += 8 * v48;
        }
        unint64_t v95 = v52 - v53;
        if (v60)
        {
          size_t v96 = (_DWORD *)(v36 + v59);
          *(void *)(a6 + 7288) = v37 + v59 + 8;
          unint64_t v97 = *(unsigned int **)(a4 + 664);
          int v98 = v60;
          do
          {
            unsigned int v99 = *v97++;
            *v96++ = *(_DWORD *)(a6 + 4 * v99);
            --v98;
          }
          while (v98);
          v59 += 4 * v60;
        }
        unint64_t v100 = v95 >> 2;
        if (v85)
        {
          int v101 = v56 + 4 * v57;
          int v102 = (void *)(v36 + (v101 & 0xFFFFFFFC));
          int v103 = *(int **)(a4 + 832);
          do
          {
            int v104 = *v103++;
            *v102++ = a5[v104];
            LODWORD(v85) = v85 - 1;
          }
          while (v85);
          unsigned int v59 = v101 + 8 * (v41 >> 2);
        }
        if (v51)
        {
          unint64_t v105 = v38;
          int v106 = v51;
          uint64_t v182 = v40;
          unint64_t v181 = v105;
          uint64_t v107 = *(unsigned int *)(a4 + 800);
          memcpy((void *)(v36 + v59), (char *)a5 + 4 * *(unsigned int *)(a4 + 796), 4 * v107);
          int v108 = *(_DWORD *)(a4 + 804);
          if (v108)
          {
            int v109 = *(unsigned int **)(a4 + 808);
            int v110 = (_DWORD *)(v36 + v59 + 4 * v107);
            do
            {
              unsigned int v111 = *v109++;
              *v110++ = *(_DWORD *)(a6 + 4 * v111);
              --v108;
            }
            while (v108);
          }
          v59 += 4 * v106;
          unint64_t v38 = v181;
          uint64_t v40 = v182;
        }
        if (v100)
        {
          unint64_t v112 = v37 + v59;
          *(void *)(a6 + 7288) = v112 + 8;
          a5[198] = v112;
          int v113 = (_DWORD *)(v36 + v59);
          int v114 = *(unsigned __int16 **)(a4 + 736);
          if (*(unsigned char *)(a4 + 784))
          {
            int v115 = *(unsigned __int16 **)(a4 + 760);
            for (uint64_t j = (*(void *)(a4 + 768) - (void)v115) >> 1; j; LODWORD(j) = j - 1)
            {
              int v117 = *v115++;
              v113[v117] = *(_DWORD *)(a5[v114[2 * v117]] + 4 * v114[2 * v117 + 1]);
            }
          }
          else
          {
            do
            {
              *v113++ = *(_DWORD *)(a5[*v114] + 4 * v114[1]);
              v114 += 2;
              LODWORD(v100) = v100 - 1;
            }
            while (v100);
          }
        }
        goto LABEL_84;
      }
    }
    else
    {
      int v61 = v51;
      if (v47)
      {
        int v62 = v47;
        uint64_t v63 = (void *)v36;
        uint64_t v64 = v45;
        do
        {
          int v65 = *v64++;
          *v63++ = a5[v65];
          --v62;
        }
        while (v62);
      }
      if (*(_DWORD *)(a4 + 872))
      {
        int v66 = *(void **)(a4 + 856);
        if (v66 != (void *)(a4 + 864))
        {
          do
          {
            *(_DWORD *)(v36 + 4 * *((unsigned int *)v66 + 7)) |= *((_DWORD *)v66 + 8);
            char v91 = (void *)v66[1];
            if (v91)
            {
              do
              {
                int v92 = v91;
                char v91 = (void *)*v91;
              }
              while (v91);
            }
            else
            {
              do
              {
                int v92 = (void *)v66[2];
                BOOL v93 = *v92 == (void)v66;
                int v66 = v92;
              }
              while (!v93);
            }
            int v66 = v92;
          }
          while (v92 != (void *)(a4 + 864));
        }
      }
      unsigned int v67 = (v47 + 3) & 0xFFFFFFFC;
      if (v54)
      {
        unsigned int v68 = *(_DWORD *)(a4 + 1008);
        if (v68 >= 4)
        {
          int v69 = &v45[v67];
          unsigned int v70 = v68 >> 2;
          BOOL v71 = (_OWORD *)(v36 + 8 * v67);
          do
          {
            int v72 = *v69;
            v69 += 4;
            BOOL v73 = &a5[v72];
            long long v74 = v73[1];
            *BOOL v71 = *v73;
            v71[1] = v74;
            v71 += 2;
            --v70;
          }
          while (v70);
        }
        v67 += v68;
      }
      int v51 = v61;
      int v75 = v46 - v44;
      if (v55)
      {
        unsigned int v76 = *(_DWORD *)(a4 + 1012);
        int v77 = (void *)(v36 + 8 * v67);
        if (*(unsigned char *)(a4 + 1736))
        {
          if (v76)
          {
            uint64_t v179 = (int *)(*(void *)(a4 + 640) + 4 * v67);
            do
            {
              int v180 = *v179++;
              *v77++ = a5[v180];
              --v76;
            }
            while (v76);
          }
        }
        else if (v76 >= 4)
        {
          BOOL v78 = (int *)(*(void *)(a4 + 640) + 4 * v67);
          unsigned int v79 = v76 >> 2;
          do
          {
            int v80 = *v78;
            v78 += 4;
            *int v77 = a5[v80];
            v77 += 4;
            --v79;
          }
          while (v79);
        }
      }
      unsigned int v59 = 8 * v75;
      unint64_t v60 = v58 >> 2;
      if (!v44) {
        goto LABEL_50;
      }
    }
    if (v44 >= 4)
    {
      unint64_t v81 = *(uint64_t **)(a4 + 2440);
      unint64_t v82 = v44 >> 2;
      uint64_t v83 = (void *)(v36 + v59);
      do
      {
        uint64_t v84 = *v81;
        v81 += 4;
        void *v83 = v84;
        v83 += 4;
        --v82;
      }
      while (v82);
    }
    v59 += 8 * v44;
    goto LABEL_50;
  }
LABEL_84:
  uint64_t v118 = *(void *)(a4 + 1936);
  memcpy(v39, *(const void **)v118, *(void *)(v118 + 8) - *(void *)v118);
  if (*(unsigned char *)(v118 + 200))
  {
    v119.i64[0] = v37;
    v119.i64[1] = v37 >> 5;
    *(int8x16_t *)&v39[*(unsigned int *)(v118 + 204)] = vbslq_s8((int8x16_t)xmmword_242EA7D10, *(int8x16_t *)&v39[*(unsigned int *)(v118 + 204)], (int8x16_t)vshlq_u8((uint8x16_t)vqtbl1q_s8(v119, (int8x16_t)xmmword_242EA7CF0), (uint8x16_t)xmmword_242EA7D00));
  }
  long long v120 = *(unsigned int **)(v118 + 176);
  for (uint64_t k = *(unsigned int **)(v118 + 184); v120 != k; v120 += 3)
  {
    v122.i64[0] = a5[v120[1]] + *v120;
    v122.i64[1] = (unint64_t)v122.i64[0] >> 5;
    *(int8x16_t *)&v39[v120[2]] = vbslq_s8((int8x16_t)xmmword_242EA7D10, *(int8x16_t *)&v39[v120[2]], (int8x16_t)vshlq_u8((uint8x16_t)vqtbl1q_s8(v122, (int8x16_t)xmmword_242EA7CF0), (uint8x16_t)xmmword_242EA7D00));
  }
  if (!*(_DWORD *)(v118 + 240)) {
    *(void *)&v39[*(unsigned __int16 *)(v118 + 244)] = v38;
  }
  uint64_t v123 = a12;
  unint64_t v124 = (unint64_t)&v39[v40];
  int v125 = *a1;
  if (v125)
  {
    uint64_t v126 = *(void *)(v118 + 8) - *(void *)v118;
    int v127 = *(_DWORD *)(a4 + 2344);
    LODWORD(v128) = *((_DWORD *)v125 + 2);
    int v129 = v128 + 1;
    if (*((_DWORD *)v125 + 3) >= (v128 + 1))
    {
      int v132 = *v125;
    }
    else
    {
      unsigned int v130 = -__clz(v128);
      int v183 = 1 << v130;
      __int32 v131 = (char *)malloc_type_malloc(40 << (v130 & 0x1F), 0x10800400D7C94D2uLL);
      int v132 = v131;
      uint64_t v128 = *((unsigned int *)v125 + 2);
      if (v128)
      {
        memcpy(v131, *v125, 40 * v128);
        free(*v125);
        LODWORD(v128) = *((_DWORD *)v125 + 2);
      }
      *((_DWORD *)v125 + 3) = v183;
      *int v125 = v132;
      uint64_t v123 = a12;
    }
    int v133 = &v132[40 * v128];
    *(_DWORD *)int v133 = 8;
    *((void *)v133 + 1) = v124;
    *((void *)v133 + 2) = v39;
    *((void *)v133 + 3) = v126;
    *((_DWORD *)v133 + 8) = v127;
    *((_DWORD *)v125 + 2) = v129;
  }
  if (a8)
  {
    if (a9 == 2)
    {
      if ((a11 - 1) > 2u) {
        int v134 = 0;
      }
      else {
        int v134 = dword_242EAA2EC[(a11 - 1)];
      }
      if ((a11 & 0xFCFF) == 3) {
        int v138 = *((_DWORD *)&xmmword_242EA8600 + HIBYTE(a11)) & 7;
      }
      else {
        int v138 = 0;
      }
      int v143 = *(_DWORD *)(a4 + 3308);
      int v144 = (v124 >> 16) & 0xFFC00000 | *(_DWORD *)(a4 + 3312) & 0x3FFFFF;
      int v145 = WORD2(a8) | (*(unsigned __int16 *)(a4 + 3326) << 16);
      unsigned int v146 = v138 | v134 | *(_DWORD *)(a4 + 3320) & 0xFFFFFFC0;
      if (v123) {
        ++*v123;
      }
      unsigned int v147 = &v186[4 * a2];
      __int16 v148 = (_DWORD *)v147[6];
      *__int16 v148 = v143;
      v148[1] = v144;
      void v148[2] = v124 >> 6;
      v148[3] = v146;
      v148[4] = v145;
      v148[5] = a8;
      v147[6] = v148 + 6;
    }
    else
    {
      if ((a11 - 1) > 2u) {
        int v136 = 0;
      }
      else {
        int v136 = dword_242EAA2EC[(a11 - 1)];
      }
      int v139 = *(_DWORD *)(a6 + 28) & 0x7FF;
      int v140 = *(_DWORD *)(a6 + 32) & 0x7FF;
      int v141 = *(_DWORD *)(a6 + 36) & 0x7FF;
      if ((a11 & 0xFCFF) == 3) {
        int v142 = *((_DWORD *)&xmmword_242EA8600 + HIBYTE(a11)) & 7;
      }
      else {
        int v142 = 0;
      }
      int v149 = *(_DWORD *)(a4 + 3272);
      int v150 = (v124 >> 16) & 0xFFC00000 | *(_DWORD *)(a4 + 3276) & 0x3FFFFF;
      int v151 = WORD2(a8) | (*(unsigned __int16 *)(a4 + 3290) << 16);
      unsigned int v152 = v142 | v136 | *(_DWORD *)(a4 + 3284) & 0xFFFFFFC0;
      if (v123) {
        ++*v123;
      }
      __int16 v153 = &v186[4 * a2];
      __int16 v154 = (_DWORD *)v153[6];
      *__int16 v154 = v149;
      v154[1] = v150;
      v154[2] = v124 >> 6;
      v154[3] = v152;
      v154[4] = v151;
      v154[5] = a8;
      v154[6] = v139;
      v154[7] = v140;
      v154[8] = v141;
      uint64_t v153[6] = v154 + 9;
    }
  }
  else if (a9 == 3)
  {
    if ((a11 - 1) > 2u) {
      int v135 = 0;
    }
    else {
      int v135 = dword_242EAA2EC[(a11 - 1)];
    }
    int v155 = *(_DWORD *)(a6 + 28) & 0x7FF;
    int v156 = *(_DWORD *)(a6 + 32) & 0x7FF;
    int v157 = *(_DWORD *)(a6 + 36) & 0x7FF;
    if ((a11 & 0xFCFF) == 3) {
      int v158 = *((_DWORD *)&xmmword_242EA8600 + HIBYTE(a11)) & 7;
    }
    else {
      int v158 = 0;
    }
    int v163 = *(_DWORD *)(a4 + 3232);
    int v164 = *(_DWORD *)(a6 + 52);
    int v165 = *(_DWORD *)(a6 + 56);
    int v166 = *(_DWORD *)(a6 + 60);
    int v167 = (v124 >> 16) & 0xFFC00000 | *(_DWORD *)(a4 + 3236) & 0x3FFFFF;
    unsigned int v168 = v158 | v135 | *(_DWORD *)(a4 + 3244) & 0xFFFFFFC0;
    if (v123) {
      ++*v123;
    }
    BOOL v169 = &v186[4 * a2];
    BOOL v170 = (_DWORD *)v169[6];
    _DWORD *v170 = v163;
    v170[1] = v167;
    v170[2] = v124 >> 6;
    v170[3] = v168;
    v170[4] = v164;
    v170[5] = v165;
    void v170[6] = v166;
    v170[7] = v155;
    v170[8] = v156;
    v170[9] = v157;
    v169[6] = v170 + 10;
  }
  else
  {
    if ((a11 - 1) > 2u) {
      int v137 = 0x40000000;
    }
    else {
      int v137 = dword_242EAA2EC[(a11 - 1)] | 0x40000000;
    }
    int v159 = *(_DWORD *)(a6 + 28) & 0x7FF;
    int v160 = *(_DWORD *)(a6 + 32) & 0x7FF;
    int v161 = *(_DWORD *)(a6 + 36) & 0x7FF;
    if ((a11 & 0xFCFF) == 3) {
      int v162 = *((_DWORD *)&xmmword_242EA8600 + HIBYTE(a11)) & 7;
    }
    else {
      int v162 = 0;
    }
    int v171 = *(_DWORD *)(a4 + 3192);
    int v172 = (v124 >> 16) & 0xFFC00000 | *(_DWORD *)(a4 + 3196) & 0x3FFFFF;
    int v173 = *(_DWORD *)(a6 + 28) * *(_DWORD *)(a6 + 16);
    int v174 = *(_DWORD *)(a6 + 32) * *(_DWORD *)(a6 + 20);
    int v175 = v162 | v137;
    int v176 = *(_DWORD *)(a6 + 36) * *(_DWORD *)(a6 + 24);
    if (v123) {
      ++*v123;
    }
    uint64_t v177 = &v186[4 * a2];
    uint64_t v178 = (_DWORD *)v177[6];
    _DWORD *v178 = v171;
    v178[1] = v172;
    _OWORD v178[2] = v124 >> 6;
    v178[3] = v175;
    v178[4] = v173;
    v178[5] = v174;
    v178[6] = v176;
    v178[7] = v159;
    v178[8] = v160;
    v178[9] = v161;
    v177[6] = v178 + 10;
  }
}

uint64_t agxaReserveCDMTokenSpace<AGX::HAL200::Encoders,AGX::HAL200::DataBufferAllocator>(uint64_t result, uint64_t a2, uint64_t a3, int a4, int a5, int a6, unsigned char *a7)
{
  uint64_t v12 = result;
  uint64_t v13 = result;
  uint64_t v14 = (void *)(a2 + 32 * result);
  int v15 = (unsigned int **)(v14 + 6);
  uint64_t v16 = (unsigned int *)v14[6];
  if (((1 << result) & 0x3B39E0480) == 0) {
    goto LABEL_4;
  }
  if (v16)
  {
    uint64_t v14 = (void *)(a2 + 32 * result);
LABEL_4:
    unint64_t v17 = v14 + 5;
    uint64_t v18 = (unsigned int **)(v14 + 7);
    if ((*a7 & 1) == 0)
    {
      uint64_t v19 = 0;
      int v20 = v16;
      goto LABEL_8;
    }
    int v21 = v16;
    goto LABEL_7;
  }
  int v29 = a6;
  uint64_t result = AGX::DataBufferAllocator<34ul>::initializeOnDemandDataBufferSlow(a2);
  uint64_t v16 = *v15;
  if (!*v15)
  {
    char v27 = *(_DWORD *)a7;
    uint64_t result = AGX::DataBufferAllocator<34ul>::growNoInline(a2, v12, 0);
    if (!result) {
      goto LABEL_26;
    }
    uint64_t v16 = 0;
    uint64_t v19 = 0;
    int v21 = *v15;
    uint64_t v22 = a2 + 32 * v13;
    unint64_t v17 = (void *)(v22 + 40);
    uint64_t v18 = (unsigned int **)(v22 + 56);
    int v20 = *v15;
    a6 = v29;
    if ((v27 & 1) == 0) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  uint64_t v26 = a2 + 32 * v13;
  unint64_t v17 = (void *)(v26 + 40);
  uint64_t v18 = (unsigned int **)(v26 + 56);
  if (*(_DWORD *)a7)
  {
    int v21 = *v15;
    a6 = v29;
LABEL_7:
    int v20 = *v18;
    uint64_t v19 = (char *)*v18 - (char *)v21;
    goto LABEL_8;
  }
  uint64_t v19 = 0;
  int v20 = *v15;
  a6 = v29;
LABEL_8:
  if ((unint64_t)v20 + a3 <= *v17)
  {
    *uint64_t v18 = (unsigned int *)((char *)v20 + a3);
    return result;
  }
  int v28 = a6;
  if (v12 == 33)
  {
    uint64_t result = AGX::DataBufferAllocator<34ul>::resize(a2);
    if ((result & 1) == 0) {
      return result;
    }
  }
  else
  {
    uint64_t result = AGX::DataBufferAllocator<34ul>::growNoInline(a2, v12, 0);
    if (!result) {
      return result;
    }
  }
  int v23 = (char *)*v15 + v19 + a3;
  if ((unint64_t)v23 > *v17) {
LABEL_26:
  }
    abort();
  *uint64_t v18 = (unsigned int *)v23;
  uint64_t result = AGX::DataBufferAllocator<34ul>::getGPUAddress(a2, v12);
  uint64_t v24 = result;
  if (a4)
  {
    uint64_t result = AGX::DataBufferAllocator<34ul>::getPointer<unsigned char>(a2, v12);
    *uint64_t v16 = WORD2(v24) | 0x20000000;
    v16[1] = v24;
    *((void *)v16 + 1) = result;
  }
  else if (v28 == -1 || !a5)
  {
    *(void *)uint64_t v16 = __ROR8__(result, 32) & 0xFFFFFFFF0000FFFFLL | 0x20000000;
  }
  else
  {
    *uint64_t v16 = -1610612736;
    *(void *)(v16 + 1) = __ROR8__(result, 32) & 0xFFFFFFFF0000FFFFLL | 0x20000000;
    uint64_t result = agxaReserveCDMTokenSpace<AGX::HAL200::Encoders,AGX::HAL200::DataBufferAllocator>(v12, a2, 4, 0, 1);
    int v25 = *v15;
    *int v25 = ((_BYTE)v28 + 1) & 7 | 0xA0000000;
    uint64_t *v15 = v25 + 1;
  }
  return result;
}

uint64_t AGX::DataBufferAllocator<34ul>::getPointer<unsigned char>(uint64_t a1, unsigned int a2)
{
  uint64_t v3 = a2;
  if (((1 << a2) & 0x3B39E0480) != 0 && !*(void *)(a1 + 32 * a2 + 48)) {
    AGX::DataBufferAllocator<34ul>::initializeOnDemandDataBufferSlow(a1);
  }
  return *(void *)(a1 + 32 * v3 + 48);
}

uint64_t AGX::ContextCommon<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::finalizeScsParameters_impl(uint64_t a1)
{
  uint64_t v2 = a1 + 1624;
  uint64_t v3 = *(void *)(a1 + 1608);
  *(_DWORD *)(v3 + 16) = *(_DWORD *)(a1 + 1628);
  int SectionEnd = *(_DWORD *)(a1 + 1664);
  if (!SectionEnd)
  {
    int SectionEnd = RaytracingConstantsCommon::ScsLayoutBase<RaytracingConstantsGen1::ScsLayoutGen1>::getSectionEnd(v2, 6);
    *(_DWORD *)(a1 + 1664) = SectionEnd;
  }
  int v5 = *(_DWORD *)(a1 + 1704);
  if (v5 == -1)
  {
    int v5 = ((*(_DWORD *)(a1 + 1624) >> 19) & 0x1FE0) * *(unsigned __int16 *)(a1 + 1628);
    *(_DWORD *)(a1 + 1704) = v5;
  }
  *(_DWORD *)(v3 + 8) = SectionEnd;
  *(_DWORD *)(v3 + 12) = v5 + SectionEnd;
  *(void *)uint64_t v3 = 0x6F00000000;
  int v6 = *(_DWORD *)(a1 + 1660);
  if (!v6)
  {
    int v6 = RaytracingConstantsCommon::ScsLayoutBase<RaytracingConstantsGen1::ScsLayoutGen1>::getSectionEnd(v2, 5);
    *(_DWORD *)(a1 + 1660) = v6;
  }
  *(_DWORD *)(v3 + 24) = v6;
  int v7 = *(_DWORD *)(a1 + 1652);
  if (v7)
  {
    uint64_t result = *(unsigned int *)(a1 + 1660);
    if (result) {
      goto LABEL_9;
    }
  }
  else
  {
    int v7 = RaytracingConstantsCommon::ScsLayoutBase<RaytracingConstantsGen1::ScsLayoutGen1>::getSectionEnd(v2, 8);
    *(_DWORD *)(a1 + 1652) = v7;
    uint64_t result = *(unsigned int *)(a1 + 1660);
    if (result) {
      goto LABEL_9;
    }
  }
  uint64_t result = RaytracingConstantsCommon::ScsLayoutBase<RaytracingConstantsGen1::ScsLayoutGen1>::getSectionEnd(v2, 5);
  *(_DWORD *)(a1 + 1660) = result;
LABEL_9:
  *(_DWORD *)(v3 + 40) = v7 - result;
  int v9 = *(_DWORD *)(a1 + 1712);
  if (v9 == -1)
  {
    int v9 = 0;
    *(_DWORD *)(a1 + 1712) = 0;
  }
  *(_DWORD *)(v3 + 44) = v9;
  return result;
}

uint64_t AGX::ContextCommon<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::useResourceCommon(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  int v7 = (int *)MEMORY[0x263F4B188];
  if (*(void *)(a2 + (int)*MEMORY[0x263F4B188] + 16) >> 61 == 2)
  {
    uint64_t v8 = *(void *)(a2 + 536);
    uint64_t v10 = *(void *)(v8 + 496);
    uint64_t v9 = *(void *)(v8 + 504);
    if (v10)
    {
      if (*(void *)(a1 + 1480)) {
        MTLResourceListAddResource();
      }
      AGX::ResourceGroupUsage<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::setAndBindResource(*(void **)(a1 + 1592), v10, a4);
      IOGPUResourceListAddResource();
    }
    if (v9)
    {
      if (*(void *)(a1 + 1480)) {
        MTLResourceListAddResource();
      }
      AGX::ResourceGroupUsage<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::setAndBindResource(*(void **)(a1 + 1592), v9, a4);
      IOGPUResourceListAddResource();
    }
  }
  if ((a4 & 0x82A) != 0 && *(void *)(a2 + *v7 + 16) >> 61 == 2)
  {
    uint64_t v11 = *(void *)(a2 + 536);
    uint64_t v12 = *(void *)(v11 + 488);
    if (v12 && (LODWORD(v12) = *(_DWORD *)(v12 + 1080), v12))
    {
      char v13 = *(unsigned char *)(v11 + 393);
      LOBYTE(v12) = 1;
    }
    else
    {
      char v13 = 0;
    }
    *(unsigned char *)(a1 + 1506) |= v12;
    *(unsigned char *)(a1 + 1507) |= v13;
  }
  if (*(void *)(a1 + 1480)) {
    MTLResourceListAddResource();
  }
  AGX::ResourceGroupUsage<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::setAndBindResource(*(void **)(a1 + 1592), a2, a4);

  return IOGPUResourceListAddResource();
}

uint64_t AGX::ContextCommon<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::useResourcesCommon(uint64_t result, uint64_t *a2, unsigned int a3, uint64_t a4, int a5)
{
  uint64_t v7 = result;
  int v26 = a5 & 0x82A;
  if (*(void *)(result + 1480))
  {
    if (a3)
    {
      uint64_t v8 = a3;
      uint64_t v9 = (int *)MEMORY[0x263F4B188];
      do
      {
        uint64_t v11 = *a2;
        if (*a2)
        {
          if (*(void *)(v11 + *v9 + 16) >> 61 == 2)
          {
            uint64_t v12 = *(void *)(v11 + 536);
            uint64_t v14 = *(void *)(v12 + 496);
            uint64_t v13 = *(void *)(v12 + 504);
            if (v14)
            {
              MTLResourceListAddResource();
              AGX::ResourceGroupUsage<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::setAndBindResource(*(void **)(v7 + 1592), v14, a5);
              IOGPUResourceListAddResource();
            }
            if (v13)
            {
              MTLResourceListAddResource();
              AGX::ResourceGroupUsage<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::setAndBindResource(*(void **)(v7 + 1592), v13, a5);
              IOGPUResourceListAddResource();
            }
          }
          if (v26 && *(void *)(v11 + *v9 + 16) >> 61 == 2)
          {
            uint64_t v15 = *(void *)(v11 + 536);
            uint64_t v16 = *(void *)(v15 + 488);
            if (v16 && (LODWORD(v16) = *(_DWORD *)(v16 + 1080), v16))
            {
              BOOL v10 = *(unsigned char *)(v15 + 393) != 0;
              LOBYTE(v16) = 1;
            }
            else
            {
              BOOL v10 = 0;
            }
            *(unsigned char *)(v7 + 1506) |= v16;
            *(unsigned char *)(v7 + 1507) |= v10;
          }
          MTLResourceListAddResource();
          AGX::ResourceGroupUsage<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::setAndBindResource(*(void **)(v7 + 1592), v11, a5);
          uint64_t result = IOGPUResourceListAddResource();
        }
        ++a2;
        --v8;
      }
      while (v8);
    }
  }
  else if (a3)
  {
    unint64_t v17 = (int *)MEMORY[0x263F4B188];
    uint64_t v18 = a3;
    do
    {
      uint64_t v19 = *a2;
      if (*a2)
      {
        uint64_t v20 = *v17;
        if (*(void *)(v19 + v20 + 16) >> 61 == 2)
        {
          uint64_t v21 = *(void *)(v19 + 536);
          uint64_t v22 = *(void *)(v21 + 504);
          if (*(void *)(v21 + 496))
          {
            AGX::ResourceGroupUsage<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::setAndBindResource(*(void **)(v7 + 1592), *(void *)(v21 + 496), a5);
            IOGPUResourceListAddResource();
          }
          if (v22)
          {
            AGX::ResourceGroupUsage<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::setAndBindResource(*(void **)(v7 + 1592), v22, a5);
            IOGPUResourceListAddResource();
          }
          LODWORD(v20) = *v17;
        }
        if (v26 && *(void *)(v19 + (int)v20 + 16) >> 61 == 2)
        {
          uint64_t v23 = *(void *)(v19 + 536);
          uint64_t v24 = *(void *)(v23 + 488);
          if (v24 && (LODWORD(v24) = *(_DWORD *)(v24 + 1080), v24))
          {
            BOOL v25 = *(unsigned char *)(v23 + 393) != 0;
            LOBYTE(v24) = 1;
          }
          else
          {
            BOOL v25 = 0;
          }
          *(unsigned char *)(v7 + 1506) |= v24;
          *(unsigned char *)(v7 + 1507) |= v25;
        }
        if (*(void *)(v19 + (int)v20 + 16) >> 61 == 3) {
          AGX::UserIntersectionFunctionTableGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::bindResources(*(void *)(v19 + 296));
        }
        AGX::ResourceGroupUsage<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::setAndBindResource(*(void **)(v7 + 1592), v19, a5);
        uint64_t result = IOGPUResourceListAddResource();
      }
      ++a2;
      --v18;
    }
    while (v18);
  }
  return result;
}

uint64_t AGX::ContextCommon<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::useHeaps(uint64_t result, uint64_t a2, unsigned int a3)
{
  if (*(void *)(result + 1480))
  {
    if (a3)
    {
      uint64_t v4 = 0;
      uint64_t v5 = a3;
      do
      {
        int v6 = *(void **)(a2 + 8 * v4);
        uint64_t result = [v6 type];
        if (result == 2)
        {
          for (uint64_t i = v6[7]; i != v6[8]; i += 8)
          {
            MTLResourceListAddResource();
            uint64_t result = IOGPUResourceListAddResource();
          }
        }
        else if (v6)
        {
          MTLResourceListAddResource();
          uint64_t result = IOGPUResourceListAddResource();
        }
        ++v4;
      }
      while (v4 != v5);
    }
  }
  else if (a3)
  {
    uint64_t v8 = 0;
    uint64_t v9 = a3;
    do
    {
      BOOL v10 = *(void **)(a2 + 8 * v8);
      uint64_t result = [v10 type];
      if (result == 2)
      {
        uint64_t v11 = v10[7];
        uint64_t v12 = v10 + 1;
        while (v11 != v12[7])
        {
          v11 += 8;
          uint64_t result = IOGPUResourceListAddResource();
        }
      }
      else if (v10)
      {
        uint64_t result = IOGPUResourceListAddResource();
      }
      ++v8;
    }
    while (v8 != v9);
  }
  return result;
}

_DWORD *AGX::ContextCommon<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::newCommand(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(_DWORD **)(a1 + 1552);
  uint64_t v5 = (char *)v4 + a2;
  if ((unint64_t)v4 + a2 > *(void *)(a1 + 1560))
  {
    IOGPUMetalCommandBufferStorageGrowKernelCommandBuffer();
    uint64_t v6 = *(void *)(a1 + 8);
    uint64_t v4 = *(_DWORD **)(v6 + 48);
    *(void *)(a1 + 1552) = v4;
    *(void *)(a1 + 1560) = *(void *)(v6 + 56);
    uint64_t v5 = (char *)v4 + a2;
  }
  *(void *)(a1 + 1552) = v5;
  *(void *)(a1 + 1568) = a2;
  _DWORD *v4 = 0x10000;
  v4[1] = a2;
  IOGPUMetalCommandBufferStorageBeginSegment();
  uint64_t v7 = 0;
  unsigned int v8 = 0;
  do
  {
    if (*(_DWORD *)(*(void *)(a1 + 16) + v7 + 24))
    {
      if (((1 << v8) & 0x3B39E0480) == 0 || *(void *)(a1 + v7 + 64) != 0) {
        AGX::DataBufferAllocator<34ul>::initializeDataBuffer(a1 + 16, v8);
      }
    }
    ++v8;
    v7 += 32;
  }
  while (v7 != 1088);
  *(unsigned char *)(a1 + 1504) = 1;
  BOOL v10 = *(id **)(*(void *)a1 + 688);
  int v11 = *(unsigned __int8 *)v10;
  if (*(unsigned char *)v10)
  {
    if ([v10[1] ownedByParallelEncoder])
    {
      int v11 = 0;
    }
    else
    {
      *(unsigned char *)BOOL v10 = 0;
      int v11 = 4;
    }
  }
  v4[2] = v11;
  uint64_t v12 = v4 + 2;
  v12[4] = 0;
  v12[1] = 0;
  v12[2] = 0;
  IOGPUResourceListAddResource();
  return v12;
}

uint64_t AGX::ContextCommon<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::endCommand(uint64_t a1, double a2, uint64x2_t a3, double a4)
{
  *(void *)&v89[340] = *MEMORY[0x263EF8340];
  long long v84 = 0u;
  long long v85 = 0u;
  *(_DWORD *)(*(void *)(a1 + 1552) - *(void *)(a1 + 1568) + 24) = 0;
  uint64_t v5 = *(void *)(a1 + 1592);
  if (*(unsigned char *)(*(void *)(v5 + 40) + 480))
  {
    a3 = *(uint64x2_t *)(v5 + 48);
    int8x16_t v6 = *(int8x16_t *)(v5 + 64);
    int8x16_t v7 = vorrq_s8((int8x16_t)a3, v6);
    a4 = COERCE_DOUBLE(vorr_s8(*(int8x8_t *)v7.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v7, v7, 8uLL)));
    if (a4 != 0.0)
    {
      unsigned int v8 = *(uint64_t **)(v5 + 16);
      if (v8)
      {
        unint64_t v9 = 0;
        unsigned int v10 = 0;
        char v11 = 0;
        uint64_t v12 = 0;
        uint64_t v83 = &v88;
        while (1)
        {
          uint64_t v13 = *(void **)v8[3];
          unint64_t v14 = v13[3] & v6.i64[1];
          if (v14)
          {
            int v15 = 192;
          }
          else
          {
            unint64_t v14 = v6.i64[0] & v13[2];
            if (v14)
            {
              int v15 = 128;
            }
            else
            {
              unint64_t v14 = v13[1] & a3.i64[1];
              if (v14)
              {
                int v15 = 64;
              }
              else
              {
                int v15 = 0;
                unsigned int v16 = 0;
                unint64_t v14 = *v13 & a3.i64[0];
                if (!v14) {
                  goto LABEL_16;
                }
              }
            }
          }
          unsigned int v16 = (v15 | __clz(v14)) ^ 0x3F;
LABEL_16:
          int v17 = *((_DWORD *)v8 + 11);
          char v18 = *((unsigned char *)v8 + 48);
          if ((v17 & 0x82A) != 0)
          {
            if (v10 == 16) {
              goto LABEL_7;
            }
            int v19 = *((_DWORD *)v8 + 4);
            unint64_t v20 = v8[4];
            uint64_t v21 = *((unsigned int *)v8 + 10);
            if (v8[6]) {
              __int16 v22 = v16;
            }
            else {
              __int16 v22 = 256;
            }
            unsigned int v23 = v10;
            if (!v10)
            {
              unsigned int v25 = 0;
LABEL_36:
              unsigned int v31 = &v87[6 * v25 - 1];
              *(void *)unsigned int v31 = v20;
              void v31[2] = v19;
              v31[3] = v21;
              v31[4] = v17;
              *((_WORD *)v31 + 11) = v22;
LABEL_37:
              unint64_t v9 = v12 + v87[6 * v10++];
              if ((v18 & 1) == 0)
              {
                char v11 = 1;
                v12 += v87[6 * v23];
                goto LABEL_7;
              }
              v12 += v87[6 * v23];
              goto LABEL_6;
            }
            unint64_t v24 = v20 + (v21 << 7);
            if (v20 > __src + ((unint64_t)v87[0] << 7) || __src > v24)
            {
              unint64_t v26 = 0;
              char v27 = (unsigned int *)v83;
              do
              {
                if (v10 - 1 == v26)
                {
                  unsigned int v25 = v10;
                  goto LABEL_36;
                }
                unint64_t v28 = *(void *)(v27 - 3);
                unsigned int v29 = *v27;
                v27 += 6;
                ++v26;
              }
              while (v20 > v28 + ((unint64_t)v29 << 7) || v28 > v24);
              if (v26 < v10) {
                goto LABEL_24;
              }
              goto LABEL_37;
            }
          }
LABEL_24:
          if ((v8[6] & 1) == 0) {
            goto LABEL_7;
          }
LABEL_6:
          *(void *)((char *)&v84 + (((unint64_t)v16 >> 3) & 0x18)) |= 1 << v16;
LABEL_7:
          unsigned int v8 = (uint64_t *)*v8;
          if (!v8)
          {
            int8x16_t v45 = (int8x16_t)v84;
            int8x16_t v46 = (int8x16_t)v85;
            goto LABEL_65;
          }
        }
      }
      unint64_t v9 = 0;
      unsigned int v10 = 0;
      char v11 = 0;
      int8x16_t v45 = 0uLL;
      int8x16_t v46 = 0uLL;
LABEL_65:
      a3 = vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(v46))));
      int v47 = vaddvq_s32(vuzp1q_s32((int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(v45)))), (int32x4_t)a3));
      BOOL v48 = (v47 | v10) != 0;
      if (!(v47 | v10)) {
        goto LABEL_74;
      }
      goto LABEL_66;
    }
  }
  {
  }
  uint64_t v32 = *(void **)(v5 + 184);
  if (v32)
  {
    unint64_t v9 = 0;
    unsigned int v10 = 0;
    while (1)
    {
      uint64_t v35 = v32[4];
      unint64_t v36 = v32[3];
      int v37 = *(_DWORD *)(v32[2] + 48);
      if (!v10) {
        break;
      }
      unint64_t v38 = v36 + ((unint64_t)v35 << 7);
      if (v36 > __src + ((unint64_t)v87[0] << 7) || __src > v38)
      {
        unint64_t v40 = 0;
        unsigned int v33 = v10;
        unint64_t v41 = (unsigned int *)&v88;
        while (v10 - 1 != v40)
        {
          unint64_t v42 = *(void *)(v41 - 3);
          unsigned int v43 = *v41;
          v41 += 6;
          ++v40;
          if (v36 <= v42 + ((unint64_t)v43 << 7) && v42 <= v38)
          {
            if (v40 >= v10) {
              goto LABEL_44;
            }
            goto LABEL_45;
          }
        }
        goto LABEL_43;
      }
LABEL_45:
      uint64_t v32 = (void *)*v32;
      if (!v32) {
        goto LABEL_62;
      }
    }
    unsigned int v33 = 0;
LABEL_43:
    int v34 = &v87[6 * v33 - 1];
    *(void *)int v34 = v36;
    v34[2] = v37;
    *(void *)(v34 + 3) = v35;
    *((_WORD *)v34 + 11) = 256;
    unsigned int v33 = v10;
LABEL_44:
    v9 += v87[6 * v33];
    ++v10;
    goto LABEL_45;
  }
  unint64_t v9 = 0;
  unsigned int v10 = 0;
LABEL_62:
  int v47 = 0;
  BOOL v48 = v10 != 0;
  char v11 = 1;
  if (!v10) {
    goto LABEL_74;
  }
LABEL_66:
  if (!v10) {
    goto LABEL_74;
  }
  double v49 = (double)v9;
  if (v10 < 2)
  {
    uint64_t v50 = 0;
LABEL_72:
    uint64_t v53 = v10 - v50;
    int v54 = &v87[6 * v50 + 2];
    do
    {
      a3.i32[0] = *((_DWORD *)v54 - 2);
      *(double *)a3.i64 = (double)a3.u64[0] * 100.0 / v49;
      _WORD *v54 = llround(*(double *)a3.i64);
      v54 += 12;
      --v53;
    }
    while (v53);
    goto LABEL_74;
  }
  uint64_t v50 = v10 & 0xFFFFFFFE;
  int v51 = v89;
  uint64_t v52 = v50;
  do
  {
    a3.i32[0] = *((_DWORD *)v51 - 8);
    LODWORD(a4) = *((_DWORD *)v51 - 2);
    *(double *)a3.i64 = (double)a3.u64[0] * 100.0 / v49;
    a4 = (double)*(unint64_t *)&a4 * 100.0 / v49;
    *(v51 - 12) = llround(*(double *)a3.i64);
    *int v51 = llround(a4);
    v51 += 24;
    v52 -= 2;
  }
  while (v52);
  if (v50 != v10) {
    goto LABEL_72;
  }
LABEL_74:
  if (!v48) {
    goto LABEL_100;
  }
  uint64_t v55 = 24 * v10 + 2 * v47;
  uint64_t v56 = (v55 + 23) & 0x1FFFFFFF8;
  uint64_t v57 = *(void *)(a1 + 1552);
  uint64_t v58 = v56 + v57;
  if ((unint64_t)(v56 + v57) > *(void *)(a1 + 1560))
  {
    *(void *)(*(void *)(a1 + 8) + 48) = v57;
    IOGPUMetalCommandBufferStorageGrowKernelCommandBuffer();
    uint64_t v59 = *(void *)(a1 + 8);
    uint64_t v57 = *(void *)(v59 + 48);
    *(void *)(a1 + 1552) = v57;
    *(void *)(a1 + 1560) = *(void *)(v59 + 56);
    uint64_t v58 = v56 + v57;
  }
  uint64_t v60 = *(void *)(a1 + 1568);
  int v61 = (_DWORD *)(v57 - v60);
  v61[1] += v56;
  *(void *)(a1 + 1552) = v58;
  *(void *)(a1 + 1568) = v60 + v56;
  int v62 = (char *)v61 + v61[7];
  v61[6] = v55;
  *((_DWORD *)v62 + 10) = v47;
  *((_DWORD *)v62 + 11) = v10;
  v62[48] = v11;
  uint64_t v63 = v62 + 56;
  unint64_t v64 = *((void *)&v85 + 1);
  if (*((void *)&v85 + 1))
  {
    int v65 = 192;
    goto LABEL_85;
  }
  unint64_t v64 = v85;
  if ((void)v85)
  {
    int v65 = 128;
    goto LABEL_85;
  }
  unint64_t v64 = *((void *)&v84 + 1);
  if (*((void *)&v84 + 1))
  {
    int v65 = 64;
    goto LABEL_85;
  }
  unint64_t v64 = v84;
  if ((void)v84)
  {
    int v65 = 0;
LABEL_85:
    unsigned int v66 = (v65 | __clz(v64)) ^ 0x3F;
    *v63++ = v66;
    if (v66)
    {
LABEL_88:
      while (1)
      {
        unsigned int v67 = v66 - 1;
        uint64_t v68 = (v66 - 1) >> 6;
        uint64_t v69 = *((void *)&v84 + v68);
        uint64_t v70 = (v66 & 0x3F) != 0 ? ~(-1 << v66) : -1;
        int v71 = 63 - __clz(v69 & v70);
        int v72 = (v69 & v70) != 0 ? v71 : -1;
        if (v72 < 0) {
          break;
        }
        unsigned int v66 = v72 + (v67 & 0xFFFFFFC0);
        *v63++ = v66;
        if (!v66) {
          goto LABEL_98;
        }
      }
      while (1)
      {
        int v73 = v68 - 1;
        if (v68 < 1) {
          break;
        }
        unint64_t v74 = (unint64_t)(&v83)[v68--];
        if (v74)
        {
          unsigned int v66 = (__clz(v74) | (v73 << 6)) ^ 0x3F;
          *v63++ = v66;
          if (v66) {
            goto LABEL_88;
          }
          break;
        }
      }
    }
  }
LABEL_98:
  if (v10) {
    memcpy(v63, &__src, 24 * v10);
  }
LABEL_100:
  uint64_t v75 = 0;
  uint64_t v76 = 0;
  int v77 = (uint64_t *)(a1 + 16);
  uint64_t v78 = a1 + 56;
  do
  {
    uint64_t v79 = *v77;
    if (*(_DWORD *)(*v77 + v76 + 24))
    {
      int v80 = (void *)(v78 + v76);
      if (*(void *)(v78 + v76 + 8))
      {
        uint64_t v81 = *(void *)(a1 + 40);
        if (*(_DWORD *)(a1 + 1440)) {
          AGX::DataBufferAllocator<34ul>::doBufferRandomization(a1 + 16, (void *)(v81 + v75));
        }
        if (*v80 == *(void *)(v81 + v75 + 16) - (*(void *)(v79 + v76 + 16) + *(void *)(v79 + v76 + 8))) {
          *(void *)(v81 + v75 + 24) = v80[1];
        }
      }
    }
    v76 += 32;
    v75 += 64;
  }
  while (v76 != 1088);
  *(void *)(*(void *)(a1 + 8) + 48) = *(void *)(a1 + 1552);
  uint64_t result = IOGPUMetalCommandBufferStorageEndSegment();
  *(unsigned char *)(a1 + 1504) = 0;
  return result;
}

BOOL AGX::ContextCommon<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::userDrawTokenIndex(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  if (a2 && a3)
  {
    int v5 = *(_DWORD *)(a1 + 1528);
    if (v5 == *(_DWORD *)(a1 + 1532))
    {
      return 0;
    }
    else
    {
      *a2 = v5;
      *a3 = *(_DWORD *)(a1 + 1532) - 1;
      *(_DWORD *)(a1 + 1528) = *(_DWORD *)(a1 + 1532);
      return 1;
    }
  }
  else
  {
    fprintf((FILE *)*MEMORY[0x263EF8348], "AGX: %s:%d:%s: *** Invalid parameters! (tokenIndexMiuint64_t n = 0x%p, tokenIndexMax = 0x%p)\n", "agxa_context_template.hpp", 146, "userDrawTokenIndex", a2, a3);
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136316162;
      unsigned int v8 = "agxa_context_template.hpp";
      __int16 v9 = 1024;
      int v10 = 146;
      __int16 v11 = 2080;
      uint64_t v12 = "userDrawTokenIndex";
      __int16 v13 = 2048;
      unint64_t v14 = a2;
      __int16 v15 = 2048;
      unsigned int v16 = a3;
      _os_log_error_impl(&dword_2427AD000, &_os_log_internal, OS_LOG_TYPE_ERROR, "AGX: AGX: %s:%d:%s: *** Invalid parameters! (tokenIndexMiuint64_t n = 0x%p, tokenIndexMax = 0x%p)\n", buf, 0x30u);
    }
    BOOL result = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_INFO);
    if (result)
    {
      *(_DWORD *)buf = 136316162;
      unsigned int v8 = "agxa_context_template.hpp";
      __int16 v9 = 1024;
      int v10 = 146;
      __int16 v11 = 2080;
      uint64_t v12 = "userDrawTokenIndex";
      __int16 v13 = 2048;
      unint64_t v14 = a2;
      __int16 v15 = 2048;
      unsigned int v16 = a3;
      _os_log_impl(&dword_2427AD000, &_os_log_internal, OS_LOG_TYPE_INFO, "AGX: AGX: %s:%d:%s: *** Invalid parameters! (tokenIndexMiuint64_t n = 0x%p, tokenIndexMax = 0x%p)\n", buf, 0x30u);
      return 0;
    }
  }
  return result;
}

BOOL FenceEncoder::encode(AGX::SidebandBufferAllocator *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (a4)
  {
    int v12 = *(_DWORD *)(a4 + 528);
    if (a6) {
      goto LABEL_3;
    }
  }
  else
  {
    int v12 = 0;
    if (a6)
    {
LABEL_3:
      int v13 = *(_DWORD *)(a6 + 528);
      if (a5) {
        goto LABEL_4;
      }
LABEL_8:
      int v14 = 0;
      if (a7) {
        goto LABEL_5;
      }
      goto LABEL_9;
    }
  }
  int v13 = 0;
  if (!a5) {
    goto LABEL_8;
  }
LABEL_4:
  int v14 = *(_DWORD *)(a5 + 528);
  if (a7)
  {
LABEL_5:
    int v15 = *(_DWORD *)(a7 + 528);
    goto LABEL_10;
  }
LABEL_9:
  int v15 = 0;
LABEL_10:
  int v16 = v14 + v13 + v12;
  int v17 = v15 + v16;
  if (!(v15 + v16))
  {
    *(void *)(a3 + 8) = 0;
    return v17 != 0;
  }
  int v27 = v14 + v13 + v12;
  int v28 = v15 + v16;
  unsigned int v18 = ((2 * v17 + 7) & 0xFFFFFFF8) + 16;
  unsigned int v30 = 0;
  int v19 = (_DWORD *)AGX::SidebandBufferAllocator::allocate(a1, v18, 1u, &v30);
  *int v19 = v12;
  v19[1] = v13;
  void v19[2] = v14;
  v19[3] = v15;
  unsigned int v20 = v30;
  *(_DWORD *)(a3 + 8) = v18;
  *(_DWORD *)(a3 + 12) = v20;
  uint64_t v21 = (unsigned __int16 *)(v19 + 4);
  if (!v12)
  {
    int v17 = v28;
    if (!v13) {
      goto LABEL_25;
    }
    AGX::FenceList::copyFences(a6, v21);
    if (!a2) {
      goto LABEL_25;
    }
    goto LABEL_20;
  }
  AGX::FenceList::copyFences(a4, v21);
  if (a2)
  {
    for (unint64_t i = *(void *)(a4 + 512); i; i &= i - 1)
      bzero(*(void **)(a4 + 8 * __clz(__rbit64(i))), 0x88uLL);
    *(_DWORD *)(a4 + 528) = 0;
    int v17 = v28;
    if (v13)
    {
      AGX::FenceList::copyFences(a6, &v21[v12]);
LABEL_20:
      for (unint64_t j = *(void *)(a6 + 512); j; j &= j - 1)
        bzero(*(void **)(a6 + 8 * __clz(__rbit64(j))), 0x88uLL);
      *(_DWORD *)(a6 + 528) = 0;
    }
  }
  else
  {
    int v17 = v28;
    if (v13) {
      AGX::FenceList::copyFences(a6, &v21[v12]);
    }
  }
LABEL_25:
  if (!v14)
  {
    if (!v15) {
      return v17 != 0;
    }
    AGX::FenceList::copyFences(a7, &v21[v27]);
    if (!a2) {
      return v17 != 0;
    }
    goto LABEL_33;
  }
  AGX::FenceList::copyFences(a5, &v21[v13 + v12]);
  if (a2)
  {
    for (unint64_t k = *(void *)(a5 + 512); k; k &= k - 1)
      bzero(*(void **)(a5 + 8 * __clz(__rbit64(k))), 0x88uLL);
    *(_DWORD *)(a5 + 528) = 0;
    if (v15)
    {
      AGX::FenceList::copyFences(a7, &v21[v27]);
LABEL_33:
      for (unint64_t m = *(void *)(a7 + 512); m; m &= m - 1)
        bzero(*(void **)(a7 + 8 * __clz(__rbit64(m))), 0x88uLL);
      *(_DWORD *)(a7 + 528) = 0;
    }
  }
  else if (v15)
  {
    AGX::FenceList::copyFences(a7, &v21[v27]);
  }
  return v17 != 0;
}

uint64_t AGX::ContextSwitcherGen3<AGX::HAL200::Encoders,AGX::HAL200::Classes>::setupComputeCommand(uint64_t result, uint64_t a2, void *a3)
{
  uint64_t v5 = result;
  uint64_t v6 = a3[46];
  if (!v6)
  {
    BOOL result = AGX::DataBufferAllocator<34ul>::growNoInline(a3, 10, 0);
    if (!result) {
      goto LABEL_9;
    }
    uint64_t v6 = a3[46];
  }
  uint64_t v7 = v5 + 127;
  unint64_t v8 = v6 + v5 + 127;
  if (v8 > a3[45])
  {
    BOOL result = AGX::DataBufferAllocator<34ul>::growNoInline(a3, 10, 0);
    uint64_t v6 = a3[46];
    if (!result) {
      goto LABEL_4;
    }
    unint64_t v8 = v6 + v7;
    if ((unint64_t)(v6 + v7) > a3[45]) {
LABEL_9:
    }
      abort();
  }
  a3[47] = v8;
LABEL_4:
  unint64_t v9 = (v6 + 127) & 0xFFFFFFFFFFFFFF80;
  unint64_t v10 = v9 + a3[48];
  a3[46] = v9 + (v5 & 0xFFFFFFFFFFFFFFFCLL);
  *(void *)(a2 + 88) = v10 & 0xFFFFFFFFFF80;
  return result;
}

uint64_t AGX::ContextSwitcherGen3<AGX::HAL200::Encoders,AGX::HAL200::Classes>::setupRenderCommand(uint64_t result, void *a2, void *a3)
{
  uint64_t v5 = (uint64_t *)result;
  uint64_t v6 = a3[126];
  uint64_t v7 = *(void *)(result + 24) + 31;
  uint64_t v8 = v6 + v7;
  if ((unint64_t)(v6 + v7) > a3[125])
  {
    BOOL result = AGX::DataBufferAllocator<34ul>::growNoInline(a3, 30, 0);
    uint64_t v6 = a3[126];
    if (!result) {
      goto LABEL_3;
    }
    uint64_t v8 = v6 + v7;
    if ((unint64_t)(v6 + v7) > a3[125]) {
      goto LABEL_11;
    }
  }
  a3[127] = v8;
LABEL_3:
  uint64_t v9 = v5[2];
  unint64_t v10 = (v6 + 31) & 0xFFFFFFFFFFFFFFE0;
  unint64_t v11 = v10 + a3[128];
  a3[126] = v10 + (v5[3] & 0xFFFFFFFFFFFFFFFCLL);
  a2[12] = (v9 + v11) & 0xFFFFFFFFE0;
  a2[13] = v11 & 0xFFFFFFFFE0;
  uint64_t v12 = *v5;
  uint64_t v13 = v12 + 127;
  uint64_t v14 = a3[50];
  unint64_t v15 = v14 + v12 + 127;
  if (v15 > a3[49])
  {
    BOOL result = AGX::DataBufferAllocator<34ul>::growNoInline(a3, 11, 0);
    uint64_t v14 = a3[50];
    if (!result) {
      goto LABEL_5;
    }
    unint64_t v15 = v14 + v13;
    if ((unint64_t)(v14 + v13) > a3[49]) {
LABEL_11:
    }
      abort();
  }
  a3[51] = v15;
LABEL_5:
  unint64_t v16 = (v14 + 127) & 0xFFFFFFFFFFFFFF80;
  unint64_t v17 = v16 + a3[52];
  a3[50] = v16 + (v12 & 0xFFFFFFFFFFFFFFFCLL);
  a2[125] = v17;
  return result;
}

uint64_t AGX::DataBufferAllocator<34ul>::doBufferRandomization(uint64_t result, void *a2)
{
  if (a2[4])
  {
    int v2 = *(_DWORD *)(result + 1424);
    if (v2 == 2)
    {
      unint64_t v5 = a2[1];
      unint64_t v6 = a2[3];
      if (v6 <= v5)
      {
        unint64_t v8 = 0;
      }
      else
      {
        unint64_t v7 = random();
        do
        {
          unint64_t v8 = v7;
          unint64_t v9 = v5 + 4 * v7;
          v7 >>= 1;
        }
        while (v9 >= v6);
      }
      BOOL result = random();
      *(_DWORD *)(v5 + 4 * v8) = result;
    }
    else if (v2 == 1)
    {
      uint64_t v3 = (_DWORD *)a2[1];
      for (unint64_t i = a2[2]; (unint64_t)v3 < i; ++v3)
      {
        BOOL result = random();
        _DWORD *v3 = result;
      }
    }
  }
  return result;
}

uint64_t AGX::DataBufferAllocator<34ul>::grow(uint64_t a1, unsigned int a2, int a3)
{
  int v3 = a3;
  uint64_t v5 = *(void *)a1;
  if (a2 == 32)
  {
    size_t v6 = *(void *)([*(id *)(*(void *)(a1 + 1432) + 256) resourceArgs] + 72);
    unint64_t v7 = *(const void **)(a1 + 1384);
    unint64_t v8 = malloc_type_malloc(v6, 0xC3DFA88EuLL);
    unint64_t v9 = v8;
    *(void *)(a1 + 1384) = v8;
    unint64_t v10 = *(char **)(a1 + 1408);
    unint64_t v11 = *(void *)(a1 + 1416);
    if ((unint64_t)v10 < v11)
    {
      *(void *)unint64_t v10 = v8;
      uint64_t v12 = v10 + 8;
LABEL_33:
      *(void *)(a1 + 1408) = v12;
      unint64_t v41 = *(char **)(a1 + 1384);
      if (v3)
      {
        size_t v42 = *(void *)(a1 + 1072) - (void)v7;
        memcpy(v41, v7, v42);
        unint64_t v41 = *(char **)(a1 + 1384);
      }
      else
      {
        size_t v42 = 0;
      }
      *(void *)(a1 + 1072) = &v41[v42];
      *(void *)(a1 + 1064) = &v41[v6 - *(void *)(v5 + 1040) - *(void *)(v5 + 1032)];
      *(void *)(a1 + 1080) = &v41[v42];
      *(void *)(a1 + 1088) = -(uint64_t)((unint64_t)&v41[v42] & 0xFFFFFFFF00000000);
      return 1;
    }
    size_t v44 = v6;
    unint64_t v24 = *(char **)(a1 + 1400);
    uint64_t v25 = (v10 - v24) >> 3;
    unint64_t v26 = v25 + 1;
    if ((unint64_t)(v25 + 1) >> 61) {
      abort();
    }
    int v27 = v3;
    uint64_t v28 = v11 - (void)v24;
    if (v28 >> 2 > v26) {
      unint64_t v26 = v28 >> 2;
    }
    if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v29 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v29 = v26;
    }
    if (v29)
    {
      if (v29 >> 61) {
        std::__throw_bad_array_new_length[abi:nn180100]();
      }
      unsigned int v30 = operator new(8 * v29);
    }
    else
    {
      unsigned int v30 = 0;
    }
    uint64_t v32 = &v30[8 * v25];
    unsigned int v33 = &v30[8 * v29];
    *uint64_t v32 = v9;
    uint64_t v12 = v32 + 1;
    if (v10 == v24)
    {
      unint64_t v24 = v10;
      int v3 = v27;
      size_t v6 = v44;
      goto LABEL_31;
    }
    unint64_t v34 = v10 - v24 - 8;
    int v3 = v27;
    if (v34 >= 0x58)
    {
      size_t v6 = v44;
      if ((unint64_t)(v24 - v30) >= 0x20)
      {
        uint64_t v35 = (v34 >> 3) + 1;
        unint64_t v36 = &v30[8 * v25 - 16];
        int v37 = v10 - 16;
        uint64_t v38 = v35 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v39 = *(_OWORD *)v37;
          *(v36 - 1) = *((_OWORD *)v37 - 1);
          _OWORD *v36 = v39;
          v36 -= 2;
          v37 -= 32;
          v38 -= 4;
        }
        while (v38);
        v32 -= v35 & 0x3FFFFFFFFFFFFFFCLL;
        v10 -= 8 * (v35 & 0x3FFFFFFFFFFFFFFCLL);
        if (v35 == (v35 & 0x3FFFFFFFFFFFFFFCLL)) {
          goto LABEL_31;
        }
      }
    }
    else
    {
      size_t v6 = v44;
    }
    do
    {
      uint64_t v40 = *((void *)v10 - 1);
      v10 -= 8;
      *--uint64_t v32 = v40;
    }
    while (v10 != v24);
    unint64_t v24 = *(char **)(a1 + 1400);
LABEL_31:
    *(void *)(a1 + 1400) = v32;
    *(void *)(a1 + 1408) = v12;
    *(void *)(a1 + 1416) = v33;
    if (v24) {
      operator delete(v24);
    }
    goto LABEL_33;
  }
  uint64_t v14 = a2;
  uint64_t v15 = a1 + 32 * a2;
  uint64_t v17 = *(void *)(v15 + 48);
  unint64_t v16 = (void **)(v15 + 48);
  uint64_t v43 = v17;
  uint64_t v18 = *(void *)(a1 + 24);
  int v19 = (void *)(v18 + ((unint64_t)a2 << 6));
  uint64_t v21 = (void **)(v19 + 3);
  unsigned int v20 = (const void *)v19[3];
  if (*(_DWORD *)(a1 + 1424)) {
    AGX::DataBufferAllocator<34ul>::doBufferRandomization(a1, (void *)(v18 + ((unint64_t)a2 << 6)));
  }
  IOGPUMetalCommandBufferStorageAllocResourceAtIndex();
  if (IOGPUResourceListAddResource() == -1) {
    return 0;
  }
  __int16 v22 = (char *)*v21;
  *unint64_t v16 = *v21;
  uint64_t v23 = *(void *)(v18 + (v14 << 6) + 8);
  *(v16 - 1) = (void *)(*(void *)(v18 + (v14 << 6) + 16)
                      - (*(void *)(v5 + 32 * v14 + 16)
                       + *(void *)(v5 + 32 * v14 + 8)));
  *(void *)(a1 + 32 * v14 + 64) = *v19 - v23;
  if (a3)
  {
    memcpy(v22, v20, v43 - (void)v20);
    __int16 v22 = (char *)*v16 + v43 - (void)v20;
    *unint64_t v16 = v22;
  }
  *(void *)(a1 + 32 * v14 + 56) = v22;
  return 1;
}

uint64_t AGX::DataBufferAllocator<34ul>::resize(uint64_t a1)
{
  int v2 = *(void **)(*(void *)(a1 + 1432) + 264);
  uint64_t v3 = *(void *)(*(void *)(a1 + 24) + 2144);
  if (v3) {
    unint64_t v4 = 2 * (*(void *)(v3 + (int)*MEMORY[0x263F4B188] + 40) & 0xFFFFFFFFFFFFFFLL);
  }
  else {
    unint64_t v4 = 0;
  }
  os_unfair_lock_lock(&stru_268D5AE24);
  if (v4 > *(void *)([v2 resourceArgs] + 72))
  {
    uint64_t v5 = [v2 resourceArgsSize];
    size_t v6 = malloc_type_malloc(v5, 0x5CC47251uLL);
    memcpy(v6, (const void *)[v2 resourceArgs], v5);
    *((_WORD *)v6 + 4) = v4;
    *((void *)v6 + 9) = v4;
    [v2 setResourceArgs:v6 resourceArgsSize:v5];
    free(v6);
  }
  os_unfair_lock_unlock(&stru_268D5AE24);

  return AGX::DataBufferAllocator<34ul>::grow(a1, 0x21u, 0);
}

void sub_242A502FC(_Unwind_Exception *a1)
{
}

void AGX::DataBufferAllocator<34ul>::initializeDataBuffer(uint64_t a1, unsigned int a2)
{
  if (a2 == 32)
  {
    AGX::DataBufferAllocator<34ul>::initializeDataBufferCPUOnly((void *)a1);
  }
  else
  {
    uint64_t v3 = a2;
    uint64_t v4 = 32 * a2;
    uint64_t v5 = (void *)(a1 + v4 + 40);
    uint64_t v6 = *(void *)(a1 + 24);
    unint64_t v7 = (void *)(v6 + ((unint64_t)a2 << 6));
    uint64_t v8 = *(void *)a1 + v4;
    unint64_t v9 = (void *)(v8 + 16);
    unint64_t v10 = (void *)(v8 + 8);
    unint64_t v11 = v7 + 2;
    uint64_t v12 = v7 + 3;
    uint64_t v13 = 32 * a2;
    if (!v7[4]
      || (uint64_t v14 = *v11, v15 = *v12, v16 = *v10 + *v9, v16 + *(void *)(*(void *)a1 + 32 * a2) > *v11 - *v12))
    {
      uint64_t v18 = v5;
      uint64_t v19 = *(void *)(a1 + 24);
      if (*(_DWORD *)(a1 + 1424)) {
        AGX::DataBufferAllocator<34ul>::doBufferRandomization(a1, (void *)(v6 + ((unint64_t)a2 << 6)));
      }
      IOGPUMetalCommandBufferStorageAllocResourceAtIndex();
      unint64_t v15 = *v12;
      uint64_t v14 = *v11;
      uint64_t v16 = *v9 + *v10;
      uint64_t v6 = v19;
      uint64_t v5 = v18;
    }
    uint64_t v17 = (int64x2_t *)(a1 + v13);
    *uint64_t v5 = v14 - v16;
    v17[4].i64[0] = *v7 - *(void *)(v6 + (v3 << 6) + 8);
    v17[3] = vdupq_n_s64(v15);
    IOGPUResourceListAddResource();
  }
}

void AGX::DataBufferAllocator<34ul>::initializeDataBufferCPUOnly(void *a1)
{
  int v2 = (void *)*a1;
  uint64_t v3 = a1[173];
  if (!v3)
  {
    uint64_t v4 = malloc_type_malloc(v2[129] + v2[130] + v2[128], 0x7FD813A7uLL);
    uint64_t v5 = v4;
    a1[173] = v4;
    uint64_t v6 = (char *)a1[176];
    unint64_t v7 = a1[177];
    if ((unint64_t)v6 >= v7)
    {
      unint64_t v9 = (char *)a1[175];
      uint64_t v10 = (v6 - v9) >> 3;
      unint64_t v11 = v10 + 1;
      if ((unint64_t)(v10 + 1) >> 61) {
        abort();
      }
      uint64_t v12 = v7 - (void)v9;
      if (v12 >> 2 > v11) {
        unint64_t v11 = v12 >> 2;
      }
      if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v13 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v13 = v11;
      }
      if (v13)
      {
        if (v13 >> 61) {
          std::__throw_bad_array_new_length[abi:nn180100]();
        }
        uint64_t v14 = operator new(8 * v13);
      }
      else
      {
        uint64_t v14 = 0;
      }
      unint64_t v15 = &v14[8 * v10];
      uint64_t v16 = &v14[8 * v13];
      void *v15 = v5;
      uint64_t v8 = v15 + 1;
      if (v6 == v9)
      {
        unint64_t v9 = v6;
      }
      else
      {
        unint64_t v17 = v6 - v9 - 8;
        if (v17 < 0x58) {
          goto LABEL_31;
        }
        if ((unint64_t)(v9 - v14) < 0x20) {
          goto LABEL_31;
        }
        uint64_t v18 = (v17 >> 3) + 1;
        uint64_t v19 = &v14[8 * v10 - 16];
        unsigned int v20 = v6 - 16;
        uint64_t v21 = v18 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v22 = *(_OWORD *)v20;
          *(v19 - 1) = *((_OWORD *)v20 - 1);
          *uint64_t v19 = v22;
          v19 -= 2;
          v20 -= 32;
          v21 -= 4;
        }
        while (v21);
        v15 -= v18 & 0x3FFFFFFFFFFFFFFCLL;
        v6 -= 8 * (v18 & 0x3FFFFFFFFFFFFFFCLL);
        if (v18 != (v18 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_31:
          do
          {
            uint64_t v23 = *((void *)v6 - 1);
            v6 -= 8;
            *--unint64_t v15 = v23;
          }
          while (v6 != v9);
          unint64_t v9 = (char *)a1[175];
        }
      }
      a1[175] = v15;
      a1[176] = v8;
      a1[177] = v16;
      if (v9) {
        operator delete(v9);
      }
    }
    else
    {
      *(void *)uint64_t v6 = v4;
      uint64_t v8 = v6 + 8;
    }
    a1[176] = v8;
    uint64_t v3 = a1[173];
  }
  a1[134] = v3;
  a1[133] = v3 + v2[128];
  a1[135] = v3;
  a1[136] = -(uint64_t)(v3 & 0xFFFFFFFF00000000);
}

uint64_t AGX::DataBufferAllocator<34ul>::~DataBufferAllocator(uint64_t a1)
{
  int v2 = *(void ***)(a1 + 1400);
  uint64_t v3 = *(void ***)(a1 + 1408);
  if (v2 != v3)
  {
    do
    {
      uint64_t v4 = *v2++;
      free(v4);
    }
    while (v2 != v3);
    int v2 = *(void ***)(a1 + 1400);
  }
  if (v2)
  {
    *(void *)(a1 + 1408) = v2;
    operator delete(v2);
  }
  return a1;
}

uint64_t AGX::DataBufferAllocator<34ul>::getGPUAddress(uint64_t a1, unsigned int a2)
{
  uint64_t v3 = a2;
  if (((1 << a2) & 0x3B39E0480) != 0 && !*(void *)(a1 + 32 * a2 + 48)) {
    AGX::DataBufferAllocator<34ul>::initializeOnDemandDataBufferSlow(a1);
  }
  return *(void *)(a1 + 32 * v3 + 64) + *(void *)(a1 + 32 * v3 + 48);
}

double ___ZN3AGX20DeviceUSCStateLoaderINS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE11heapConfigsEP13AtomicVersion_block_invoke(uint64_t a1)
{
  AGX::DeviceUSCStateLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::heap_configs = (uint64_t)"com.apple.AGXMetal.GenericHeap";
  qword_268D59B10 = 0;
  unk_268D59B18 = 0;
  unk_268D59AD0 = xmmword_242EAA338;
  unk_268D59AE0 = unk_242EAA348;
  unk_268D59AF0 = xmmword_242EAA358;
  unk_268D59B00 = unk_242EAA368;
  unk_268D59AB0 = agx_generic_heap_args;
  unk_268D59AC0 = unk_242EAA328;
  qword_268D59B20 = 0;
  unk_268D59B28 = 0;
  qword_268D59B30 = (uint64_t)"com.apple.AGXMetal.CodeHeap";
  qword_268D59B98 = 0;
  xmmword_268D59B38 = agx_generic_heap_args;
  unk_268D59B48 = unk_242EAA328;
  xmmword_268D59B78 = xmmword_242EAA358;
  unk_268D59B88 = unk_242EAA368;
  xmmword_268D59B58 = xmmword_242EAA338;
  unk_268D59B68 = unk_242EAA348;
  unk_268D59BA0 = vdupq_n_s64(0x40uLL);
  qword_268D59BB0 = 0;
  uint64_t v1 = *(void *)(a1 + 32);
  qword_268D59BB8 = (uint64_t)"com.apple.AGXMetal.ICBGenericHeap";
  unk_268D59C10 = unk_242EAA368;
  unk_268D59C00 = xmmword_242EAA358;
  unk_268D59BF0 = unk_242EAA348;
  unk_268D59BE0 = xmmword_242EAA338;
  unk_268D59BD0 = unk_242EAA328;
  unk_268D59BC0 = agx_generic_heap_args;
  qword_268D59C20 = 0;
  unk_268D59C28 = 0;
  qword_268D59C30 = 0;
  unk_268D59C38 = v1;
  qword_268D59C40 = (uint64_t)"com.apple.AGXMetal.ICBCodeHeap";
  qword_268D59CA8 = 0;
  xmmword_268D59C48 = agx_aperture_heap_args;
  unk_268D59C58 = unk_242EAA390;
  xmmword_268D59C88 = xmmword_242EAA3C0;
  unk_268D59C98 = unk_242EAA3D0;
  double result = dbl_242EAA3B0[0];
  xmmword_268D59C68 = xmmword_242EAA3A0;
  unk_268D59C78 = *(_OWORD *)dbl_242EAA3B0;
  xmmword_268D59CB0 = unk_268D59BA0;
  qword_268D59CC0 = v1;
  return result;
}

BOOL AGX::DynamicLibrary<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::initialize(uint64_t a1, uint64_t a2, dispatch_data_t data, uint64_t a4)
{
  uint64_t v5 = 1;
  *(void *)a1 = atomic_fetch_add((atomic_ullong *volatile)(a2 + 7824), 1uLL);
  size_t size_ptr = 0;
  buffer_ptr = 0;
  dispatch_data_t v6 = dispatch_data_create_map(data, (const void **)&buffer_ptr, &size_ptr);
  if (!v6) {
    return v5;
  }
  dispatch_object_t object = v6;
  AGCDeserializedReply::AGCDeserializedReply((AGCDeserializedReply *)&__src);
  BOOL v142 = AGCDeserializedReply::deserialize((AGCDeserializedReply *)&__src, buffer_ptr, size_ptr);
  if (v156[0])
  {
    unint64_t v7 = v156;
    if (!v156[1]) {
      unint64_t v7 = v162;
    }
  }
  else
  {
    unint64_t v7 = v162;
  }
  unint64_t v9 = *(unsigned int **)v7;
  uint64_t v8 = *((void *)v7 + 1);
  if (v9) {
    BOOL v10 = v8 == 0;
  }
  else {
    BOOL v10 = 1;
  }
  if (v10) {
    unint64_t v11 = 0;
  }
  else {
    unint64_t v11 = (int *)((char *)v9 + *v9);
  }
  uint64_t v12 = (unsigned __int16 *)((char *)v11 - *v11);
  if (*v12 >= 5u && (uint64_t v13 = v12[2]) != 0) {
    uint64_t v14 = (int *)((char *)v11 + v13 + *(unsigned int *)((char *)v11 + v13));
  }
  else {
    uint64_t v14 = 0;
  }
  unint64_t v15 = (unsigned __int16 *)((char *)v14 - *v14);
  if (*v15 < 7u)
  {
    LODWORD(v16) = 0;
  }
  else
  {
    uint64_t v16 = v15[3];
    if (v16) {
      LODWORD(v16) = *(int *)((char *)v14 + v16);
    }
  }
  int v17 = *(unsigned __int8 *)(a2 + 7440);
  *(_DWORD *)(a1 + 8) = v16;
  uint64_t v18 = (unsigned __int16 *)((char *)v14 - *v14);
  if (*v18 < 9u)
  {
    uint64_t v19 = 0;
  }
  else
  {
    uint64_t v19 = v18[4];
    if (v19) {
      v19 += (uint64_t)v14 + *(unsigned int *)((char *)v14 + v19);
    }
  }
  MEMORY[0x24566EB20](a1 + 16, v19 + 4);
  MEMORY[0x24566EB20](a1 + 40, a4);
  unsigned int v20 = (unsigned __int16 *)((char *)v14 - *v14);
  if (*v20 >= 5u && v20[2] && v17)
  {
    size_t v21 = __len;
    if (__len > 0x7FFFFFFFFFFFFFF7) {
      goto LABEL_223;
    }
    long long v22 = __src;
    if (__len >= 0x17)
    {
      size_t v24 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((__len | 7) != 0x17) {
        size_t v24 = __len | 7;
      }
      size_t v25 = v24 + 1;
      p_dst = (long long *)operator new(v24 + 1);
      *((void *)&__dst + 1) = v21;
      unint64_t v166 = v25 | 0x8000000000000000;
      *(void *)&long long __dst = p_dst;
    }
    else
    {
      HIBYTE(v166) = __len;
      p_dst = &__dst;
      if (!__len) {
        goto LABEL_36;
      }
    }
    memmove(p_dst, v22, v21);
LABEL_36:
    *((unsigned char *)p_dst + v21) = 0;
    unint64_t v26 = (void **)(a1 + 64);
    if (*(char *)(a1 + 87) < 0) {
      operator delete(*v26);
    }
    *(_OWORD *)unint64_t v26 = __dst;
    *(void *)(a1 + 80) = v166;
    if (v147)
    {
      int v27 = v157;
      if (v148) {
        int v27 = (void **)&v147;
      }
    }
    else
    {
      int v27 = v157;
    }
    *(void *)(a1 + 88) = (unsigned char *)*v27 - (unsigned char *)__src;
  }
  *(void *)(a1 + 624) = a2 + 5688;
  if (v147)
  {
    uint64_t v28 = v157;
    if (v148) {
      uint64_t v28 = (void **)&v147;
    }
  }
  else
  {
    uint64_t v28 = v157;
  }
  unint64_t v29 = (unint64_t)v28[1];
  unsigned int v30 = *(char **)(a1 + 1080);
  unsigned int v31 = *(char **)(a1 + 1072);
  unint64_t v32 = v30 - v31;
  size_t v33 = v29 - (v30 - v31);
  if (v29 > v30 - v31)
  {
    uint64_t v34 = *(void *)(a1 + 1088);
    if (v34 - (uint64_t)v30 >= v33)
    {
      bzero(*(void **)(a1 + 1080), v29 - (v30 - v31));
      *(void *)(a1 + 1080) = &v31[v29];
      goto LABEL_79;
    }
    if ((v29 & 0x8000000000000000) != 0) {
      goto LABEL_223;
    }
    unint64_t v35 = v34 - (void)v31;
    uint64_t v36 = 2 * v35;
    if (2 * v35 <= v29) {
      uint64_t v36 = v29;
    }
    if (v35 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v37 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v37 = v36;
    }
    uint64_t v38 = (char *)operator new(v37);
    long long v39 = &v38[v32];
    uint64_t v40 = &v38[v37];
    unint64_t v41 = &v38[v29];
    bzero(&v38[v32], v33);
    if (v30 == v31) {
      goto LABEL_77;
    }
    if (v32 < 8 || (unint64_t)(v31 - v38) < 0x20) {
      goto LABEL_74;
    }
    if (v32 >= 0x20)
    {
      unint64_t v42 = v32 & 0xFFFFFFFFFFFFFFE0;
      uint64_t v43 = v30 - 16;
      size_t v44 = &v38[v30 - 16 - v31];
      unint64_t v45 = v32 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        long long v46 = *(_OWORD *)v43;
        *((_OWORD *)v44 - 1) = *((_OWORD *)v43 - 1);
        *(_OWORD *)size_t v44 = v46;
        v44 -= 32;
        v43 -= 32;
        v45 -= 32;
      }
      while (v45);
      if (v32 == v42) {
        goto LABEL_76;
      }
      if ((v32 & 0x18) == 0)
      {
        v39 -= v42;
        v30 -= v42;
        goto LABEL_74;
      }
    }
    else
    {
      unint64_t v42 = 0;
    }
    unint64_t v47 = v42 - (v32 & 0xFFFFFFFFFFFFFFF8);
    BOOL v48 = &v30[-v42 - 8];
    double v49 = (char *)(v48 - v31);
    do
    {
      uint64_t v50 = *(void *)v48;
      v48 -= 8;
      *(void *)&v49[(void)v38] = v50;
      v49 -= 8;
      v47 += 8;
    }
    while (v47);
    if (v32 == (v32 & 0xFFFFFFFFFFFFFFF8)) {
      goto LABEL_76;
    }
    v39 -= v32 & 0xFFFFFFFFFFFFFFF8;
    v30 -= v32 & 0xFFFFFFFFFFFFFFF8;
LABEL_74:
    int v51 = v39 - 1;
    do
    {
      char v52 = *--v30;
      *v51-- = v52;
    }
    while (v30 != v31);
LABEL_76:
    unsigned int v30 = v31;
    long long v39 = v38;
LABEL_77:
    *(void *)(a1 + 1072) = v39;
    *(void *)(a1 + 1080) = v41;
    *(void *)(a1 + 1088) = v40;
    if (v30) {
      operator delete(v30);
    }
    goto LABEL_79;
  }
  if (v29 < v30 - v31) {
    *(void *)(a1 + 1080) = &v31[v29];
  }
LABEL_79:
  if (v147)
  {
    if (v148) {
      uint64_t v53 = v147;
    }
    else {
      uint64_t v53 = v157[0];
    }
    if (v148) {
      int v54 = (void **)&v147;
    }
    else {
      int v54 = v157;
    }
  }
  else
  {
    int v54 = v157;
    uint64_t v53 = v157[0];
  }
  memcpy(*(void **)(a1 + 1072), v53, (size_t)v54[1]);
  uint64_t v55 = a2 + 5520;
  *(void *)(a1 + 712) = a2 + 5520;
  if (v149)
  {
    uint64_t v56 = v158;
    if (v150) {
      uint64_t v56 = (void **)&v149;
    }
  }
  else
  {
    uint64_t v56 = v158;
  }
  unint64_t v57 = (unint64_t)v56[1];
  uint64_t v58 = *(char **)(a1 + 1104);
  uint64_t v59 = *(char **)(a1 + 1096);
  unint64_t v60 = v58 - v59;
  size_t v61 = v57 - (v58 - v59);
  if (v57 > v58 - v59)
  {
    uint64_t v62 = *(void *)(a1 + 1112);
    if (v62 - (uint64_t)v58 >= v61)
    {
      bzero(*(void **)(a1 + 1104), v57 - (v58 - v59));
      *(void *)(a1 + 1104) = &v59[v57];
      goto LABEL_122;
    }
    if ((v57 & 0x8000000000000000) != 0) {
      goto LABEL_223;
    }
    unint64_t v63 = v62 - (void)v59;
    uint64_t v64 = 2 * v63;
    if (2 * v63 <= v57) {
      uint64_t v64 = v57;
    }
    if (v63 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v65 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v65 = v64;
    }
    unsigned int v66 = (char *)operator new(v65);
    unsigned int v67 = &v66[v60];
    uint64_t v68 = &v66[v65];
    uint64_t v69 = &v66[v57];
    bzero(&v66[v60], v61);
    if (v58 == v59) {
      goto LABEL_120;
    }
    if (v60 < 8 || (unint64_t)(v59 - v66) < 0x20) {
      goto LABEL_117;
    }
    if (v60 >= 0x20)
    {
      unint64_t v70 = v60 & 0xFFFFFFFFFFFFFFE0;
      int v71 = v58 - 16;
      int v72 = &v66[v58 - 16 - v59];
      unint64_t v73 = v60 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        long long v74 = *(_OWORD *)v71;
        *((_OWORD *)v72 - 1) = *((_OWORD *)v71 - 1);
        *(_OWORD *)int v72 = v74;
        v72 -= 32;
        v71 -= 32;
        v73 -= 32;
      }
      while (v73);
      if (v60 == v70) {
        goto LABEL_119;
      }
      if ((v60 & 0x18) == 0)
      {
        v67 -= v70;
        v58 -= v70;
        goto LABEL_117;
      }
    }
    else
    {
      unint64_t v70 = 0;
    }
    unint64_t v75 = v70 - (v60 & 0xFFFFFFFFFFFFFFF8);
    uint64_t v76 = &v58[-v70 - 8];
    int v77 = (char *)(v76 - v59);
    do
    {
      uint64_t v78 = *(void *)v76;
      v76 -= 8;
      *(void *)&v77[(void)v66] = v78;
      v77 -= 8;
      v75 += 8;
    }
    while (v75);
    if (v60 == (v60 & 0xFFFFFFFFFFFFFFF8)) {
      goto LABEL_119;
    }
    v67 -= v60 & 0xFFFFFFFFFFFFFFF8;
    v58 -= v60 & 0xFFFFFFFFFFFFFFF8;
LABEL_117:
    uint64_t v79 = v67 - 1;
    do
    {
      char v80 = *--v58;
      *v79-- = v80;
    }
    while (v58 != v59);
LABEL_119:
    uint64_t v58 = v59;
    unsigned int v67 = v66;
LABEL_120:
    *(void *)(a1 + 1096) = v67;
    *(void *)(a1 + 1104) = v69;
    *(void *)(a1 + 1112) = v68;
    uint64_t v55 = a2 + 5520;
    if (v58) {
      operator delete(v58);
    }
    goto LABEL_122;
  }
  if (v57 < v58 - v59) {
    *(void *)(a1 + 1104) = &v59[v57];
  }
LABEL_122:
  if (v149)
  {
    if (v150) {
      uint64_t v81 = v149;
    }
    else {
      uint64_t v81 = v158[0];
    }
    if (v150) {
      unint64_t v82 = (void **)&v149;
    }
    else {
      unint64_t v82 = v158;
    }
  }
  else
  {
    unint64_t v82 = v158;
    uint64_t v81 = v158[0];
  }
  memcpy(*(void **)(a1 + 1096), v81, (size_t)v82[1]);
  *(void *)(a1 + 800) = v55;
  if (v151)
  {
    uint64_t v83 = v159;
    if (v152) {
      uint64_t v83 = (void **)&v151;
    }
  }
  else
  {
    uint64_t v83 = v159;
  }
  unint64_t v84 = (unint64_t)v83[1];
  long long v85 = *(char **)(a1 + 1128);
  int v86 = *(char **)(a1 + 1120);
  unint64_t v87 = v85 - v86;
  size_t v88 = v84 - (v85 - v86);
  if (v84 > v85 - v86)
  {
    uint64_t v89 = *(void *)(a1 + 1136);
    if (v89 - (uint64_t)v85 >= v88)
    {
      bzero(*(void **)(a1 + 1128), v84 - (v85 - v86));
      *(void *)(a1 + 1128) = &v86[v84];
      goto LABEL_165;
    }
    if ((v84 & 0x8000000000000000) != 0) {
      goto LABEL_223;
    }
    uint64_t v139 = v55;
    unint64_t v90 = v89 - (void)v86;
    uint64_t v91 = 2 * v90;
    if (2 * v90 <= v84) {
      uint64_t v91 = v84;
    }
    if (v90 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v92 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v92 = v91;
    }
    BOOL v93 = (char *)operator new(v92);
    int v94 = &v93[v87];
    unint64_t v95 = &v93[v92];
    size_t v96 = &v93[v84];
    bzero(&v93[v87], v88);
    if (v85 == v86) {
      goto LABEL_163;
    }
    if (v87 < 8 || (unint64_t)(v86 - v93) < 0x20) {
      goto LABEL_160;
    }
    if (v87 >= 0x20)
    {
      unint64_t v97 = v87 & 0xFFFFFFFFFFFFFFE0;
      int v98 = v85 - 16;
      unsigned int v99 = &v93[v85 - 16 - v86];
      unint64_t v100 = v87 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        long long v101 = *(_OWORD *)v98;
        *((_OWORD *)v99 - 1) = *((_OWORD *)v98 - 1);
        *(_OWORD *)unsigned int v99 = v101;
        v99 -= 32;
        v98 -= 32;
        v100 -= 32;
      }
      while (v100);
      if (v87 == v97) {
        goto LABEL_162;
      }
      if ((v87 & 0x18) == 0)
      {
        v94 -= v97;
        v85 -= v97;
        goto LABEL_160;
      }
    }
    else
    {
      unint64_t v97 = 0;
    }
    unint64_t v102 = v97 - (v87 & 0xFFFFFFFFFFFFFFF8);
    int v103 = &v85[-v97 - 8];
    int v104 = (char *)(v103 - v86);
    do
    {
      uint64_t v105 = *(void *)v103;
      v103 -= 8;
      *(void *)&v104[(void)v93] = v105;
      v104 -= 8;
      v102 += 8;
    }
    while (v102);
    if (v87 == (v87 & 0xFFFFFFFFFFFFFFF8)) {
      goto LABEL_162;
    }
    v94 -= v87 & 0xFFFFFFFFFFFFFFF8;
    v85 -= v87 & 0xFFFFFFFFFFFFFFF8;
LABEL_160:
    int v106 = v94 - 1;
    do
    {
      char v107 = *--v85;
      *v106-- = v107;
    }
    while (v85 != v86);
LABEL_162:
    long long v85 = v86;
    int v94 = v93;
LABEL_163:
    *(void *)(a1 + 1120) = v94;
    *(void *)(a1 + 1128) = v96;
    *(void *)(a1 + 1136) = v95;
    uint64_t v55 = v139;
    if (v85) {
      operator delete(v85);
    }
    goto LABEL_165;
  }
  if (v84 < v85 - v86) {
    *(void *)(a1 + 1128) = &v86[v84];
  }
LABEL_165:
  if (v151)
  {
    if (v152) {
      int v108 = v151;
    }
    else {
      int v108 = v159[0];
    }
    if (v152) {
      int v109 = (void **)&v151;
    }
    else {
      int v109 = v159;
    }
  }
  else
  {
    int v109 = v159;
    int v108 = v159[0];
  }
  memcpy(*(void **)(a1 + 1120), v108, (size_t)v109[1]);
  *(void *)(a1 + 888) = v55;
  if (v153)
  {
    int v110 = v160;
    if (v154) {
      int v110 = (void **)&v153;
    }
  }
  else
  {
    int v110 = v160;
  }
  unint64_t v111 = (unint64_t)v110[1];
  unint64_t v112 = *(char **)(a1 + 1152);
  int v113 = *(char **)(a1 + 1144);
  unint64_t v114 = v112 - v113;
  size_t v115 = v111 - (v112 - v113);
  if (v111 <= v112 - v113)
  {
    if (v111 < v112 - v113) {
      *(void *)(a1 + 1152) = &v113[v111];
    }
    goto LABEL_208;
  }
  uint64_t v116 = *(void *)(a1 + 1160);
  if (v116 - (uint64_t)v112 < v115)
  {
    if ((v111 & 0x8000000000000000) == 0)
    {
      uint64_t v140 = v55;
      unint64_t v117 = v116 - (void)v113;
      uint64_t v118 = 2 * v117;
      if (2 * v117 <= v111) {
        uint64_t v118 = v111;
      }
      if (v117 >= 0x3FFFFFFFFFFFFFFFLL) {
        size_t v119 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        size_t v119 = v118;
      }
      long long v120 = (char *)operator new(v119);
      long long v121 = &v120[v114];
      int8x16_t v122 = &v120[v119];
      uint64_t v123 = &v120[v111];
      bzero(&v120[v114], v115);
      if (v112 == v113) {
        goto LABEL_206;
      }
      if (v114 < 8 || (unint64_t)(v113 - v120) < 0x20) {
        goto LABEL_203;
      }
      if (v114 >= 0x20)
      {
        unint64_t v124 = v114 & 0xFFFFFFFFFFFFFFE0;
        int v125 = v112 - 16;
        uint64_t v126 = &v120[v112 - 16 - v113];
        unint64_t v127 = v114 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          long long v128 = *(_OWORD *)v125;
          *((_OWORD *)v126 - 1) = *((_OWORD *)v125 - 1);
          *(_OWORD *)uint64_t v126 = v128;
          v126 -= 32;
          v125 -= 32;
          v127 -= 32;
        }
        while (v127);
        if (v114 == v124) {
          goto LABEL_205;
        }
        if ((v114 & 0x18) == 0)
        {
          v121 -= v124;
          v112 -= v124;
          goto LABEL_203;
        }
      }
      else
      {
        unint64_t v124 = 0;
      }
      unint64_t v129 = v124 - (v114 & 0xFFFFFFFFFFFFFFF8);
      unsigned int v130 = &v112[-v124 - 8];
      __int32 v131 = (char *)(v130 - v113);
      do
      {
        uint64_t v132 = *(void *)v130;
        v130 -= 8;
        *(void *)&v131[(void)v120] = v132;
        v131 -= 8;
        v129 += 8;
      }
      while (v129);
      if (v114 == (v114 & 0xFFFFFFFFFFFFFFF8)) {
        goto LABEL_205;
      }
      v121 -= v114 & 0xFFFFFFFFFFFFFFF8;
      v112 -= v114 & 0xFFFFFFFFFFFFFFF8;
LABEL_203:
      int v133 = v121 - 1;
      do
      {
        char v134 = *--v112;
        *v133-- = v134;
      }
      while (v112 != v113);
LABEL_205:
      unint64_t v112 = v113;
      long long v121 = v120;
LABEL_206:
      *(void *)(a1 + 1144) = v121;
      *(void *)(a1 + 1152) = v123;
      *(void *)(a1 + 1160) = v122;
      uint64_t v55 = v140;
      if (v112) {
        operator delete(v112);
      }
      goto LABEL_208;
    }
LABEL_223:
    abort();
  }
  bzero(*(void **)(a1 + 1152), v111 - (v112 - v113));
  *(void *)(a1 + 1152) = &v113[v111];
LABEL_208:
  if (v153)
  {
    if (v154) {
      int v135 = v153;
    }
    else {
      int v135 = v160[0];
    }
    if (v154) {
      int v136 = (void **)&v153;
    }
    else {
      int v136 = v160;
    }
  }
  else
  {
    int v136 = v160;
    int v135 = v160[0];
  }
  memcpy(*(void **)(a1 + 1144), v135, (size_t)v136[1]);
  *(void *)(a1 + 976) = v55;
  if (v155[0])
  {
    int v137 = v161;
    if (v155[1]) {
      int v137 = v155;
    }
  }
  else
  {
    int v137 = v161;
  }
  *(void *)(a1 + 1168) = *((void *)v137 + 1);
  AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::LinkInfo::initialize<AGCCodeTranslatorVisibleFunctionTypesG10,&(AGCCodeTranslatorG10::GetCompileReply(void const*))>((_DWORD *)(a1 + 96), &__src, a2, a4, 1);
  dispatch_release(object);
  AGCDeserializedReply::~AGCDeserializedReply((AGCDeserializedReply *)&__src);
  return v142;
}

void sub_242A51974(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  AGCDeserializedReply::~AGCDeserializedReply((AGCDeserializedReply *)va);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<AGX::HAL200::DynamicLibrary>::__on_zero_shared(uint64_t a1)
{
  return AGX::DynamicLibrary<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::~DynamicLibrary(a1 + 24);
}

uint64_t AGX::DynamicLibrary<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::~DynamicLibrary(uint64_t a1)
{
  int v2 = *(void **)(a1 + 1144);
  if (v2)
  {
    *(void *)(a1 + 1152) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *(void **)(a1 + 1120);
  if (v3)
  {
    *(void *)(a1 + 1128) = v3;
    operator delete(v3);
  }
  uint64_t v4 = *(void **)(a1 + 1096);
  if (v4)
  {
    *(void *)(a1 + 1104) = v4;
    operator delete(v4);
  }
  uint64_t v5 = *(void **)(a1 + 1072);
  if (v5)
  {
    *(void *)(a1 + 1080) = v5;
    operator delete(v5);
  }
  AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::LinkInfo::~LinkInfo(a1 + 96);
  if ((*(char *)(a1 + 87) & 0x80000000) == 0)
  {
    if ((*(char *)(a1 + 63) & 0x80000000) == 0) {
      goto LABEL_11;
    }
LABEL_14:
    operator delete(*(void **)(a1 + 40));
    if ((*(char *)(a1 + 39) & 0x80000000) == 0) {
      return a1;
    }
LABEL_15:
    operator delete(*(void **)(a1 + 16));
    return a1;
  }
  operator delete(*(void **)(a1 + 64));
  if (*(char *)(a1 + 63) < 0) {
    goto LABEL_14;
  }
LABEL_11:
  if (*(char *)(a1 + 39) < 0) {
    goto LABEL_15;
  }
  return a1;
}

void std::__shared_ptr_emplace<AGX::HAL200::DynamicLibrary>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F852488;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x24566ED90);
}

void std::__shared_ptr_emplace<AGX::HAL200::DynamicLibrary>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F852488;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t AGX::DynamicLibrary<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::DynamicLibrary(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  uint64_t v4 = (std::string *)(a1 + 64);
  *(void *)(a1 + 104) = 0;
  uint64_t v5 = (std::string *)(a1 + 104);
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 120) = 0;
  uint64_t v34 = (std::string *)(a1 + 40);
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(void *)(a1 + 80) = 0;
  *(_DWORD *)(a1 + 136) = -1;
  *(void *)(a1 + 140) = 0;
  *(void *)(a1 + 156) = 0;
  *(void *)(a1 + 148) = 0;
  *(void *)(a1 + 164) = 0xFFFFFFFF00000001;
  *(void *)(a1 + 172) = 1610612736;
  *(_OWORD *)(a1 + 180) = 0u;
  *(_OWORD *)(a1 + 196) = 0u;
  *(void *)(a1 + 212) = 0;
  *(void *)&long long v6 = -1;
  *((void *)&v6 + 1) = -1;
  *(_OWORD *)(a1 + 252) = v6;
  *(_OWORD *)(a1 + 236) = v6;
  *(_OWORD *)(a1 + 220) = v6;
  *(_DWORD *)(a1 + 280) = 0;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_DWORD *)(a1 + 268) = 0;
  *(_WORD *)(a1 + 272) = 0;
  *(_DWORD *)(a1 + 320) = 1065353216;
  *(_OWORD *)(a1 + 328) = 0u;
  unint64_t v7 = (void *)(a1 + 328);
  *(_OWORD *)(a1 + 344) = 0u;
  *(_DWORD *)(a1 + 360) = 1065353216;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_DWORD *)(a1 + 400) = 1065353216;
  uint64_t v8 = (void **)(a1 + 408);
  *(_OWORD *)(a1 + 408) = 0u;
  *(_OWORD *)(a1 + 424) = 0u;
  *(_OWORD *)(a1 + 440) = 0u;
  *(_OWORD *)(a1 + 456) = 0u;
  *(_OWORD *)(a1 + 472) = 0u;
  *(_OWORD *)(a1 + 485) = 0u;
  *(void *)(a1 + 568) = 0;
  *(_OWORD *)(a1 + 552) = 0u;
  *(_OWORD *)(a1 + 536) = 0u;
  *(_OWORD *)(a1 + 520) = 0u;
  *(_OWORD *)(a1 + 504) = 0u;
  *(_DWORD *)(a1 + 576) = 1;
  unint64_t v9 = (void *)(a1 + 624);
  size_t v33 = (void *)(a1 + 1072);
  unint64_t v32 = (void *)(a1 + 1096);
  unsigned int v31 = (void *)(a1 + 1120);
  BOOL v10 = (void *)(a1 + 1144);
  *(_OWORD *)(a1 + 656) = 0u;
  *(_OWORD *)(a1 + 628) = 0u;
  *(_OWORD *)(a1 + 644) = 0u;
  *(_OWORD *)(a1 + 596) = 0u;
  *(_OWORD *)(a1 + 612) = 0u;
  *(_OWORD *)(a1 + 580) = 0u;
  *(_OWORD *)(a1 + 744) = 0u;
  *(_OWORD *)(a1 + 728) = 0u;
  *(_OWORD *)(a1 + 712) = 0u;
  *(_OWORD *)(a1 + 696) = 0u;
  *(_OWORD *)(a1 + 680) = 0u;
  *(_OWORD *)(a1 + 768) = 0u;
  *(_OWORD *)(a1 + 784) = 0u;
  *(_OWORD *)(a1 + 800) = 0u;
  *(_OWORD *)(a1 + 816) = 0u;
  *(_OWORD *)(a1 + 832) = 0u;
  *(_OWORD *)(a1 + 920) = 0u;
  *(_OWORD *)(a1 + 904) = 0u;
  *(_OWORD *)(a1 + 888) = 0u;
  *(_OWORD *)(a1 + 872) = 0u;
  *(_OWORD *)(a1 + 856) = 0u;
  *(_OWORD *)(a1 + 992) = 0u;
  *(_OWORD *)(a1 + 1008) = 0u;
  *(_OWORD *)(a1 + 960) = 0u;
  *(_OWORD *)(a1 + 976) = 0u;
  *(_OWORD *)(a1 + 944) = 0u;
  *(_OWORD *)(a1 + 1160) = 0u;
  *(_OWORD *)(a1 + 1144) = 0u;
  *(_OWORD *)(a1 + 1128) = 0u;
  *(_OWORD *)(a1 + 1112) = 0u;
  *(_OWORD *)(a1 + 1096) = 0u;
  *(_OWORD *)(a1 + 1080) = 0u;
  *(_OWORD *)(a1 + 1064) = 0u;
  *(_OWORD *)(a1 + 1048) = 0u;
  *(_OWORD *)(a1 + 1032) = 0u;
  *(void *)a1 = *(void *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  std::string::operator=((std::string *)(a1 + 16), (const std::string *)(a2 + 16));
  std::string::operator=(v34, (const std::string *)(a2 + 40));
  std::string::operator=(v4, (const std::string *)(a2 + 64));
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  std::string::operator=(v5, (const std::string *)(a2 + 104));
  long long v11 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v11;
  long long v12 = *(_OWORD *)(a2 + 160);
  long long v13 = *(_OWORD *)(a2 + 176);
  long long v14 = *(_OWORD *)(a2 + 208);
  *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 208) = v14;
  *(_OWORD *)(a1 + 160) = v12;
  *(_OWORD *)(a1 + 176) = v13;
  long long v15 = *(_OWORD *)(a2 + 224);
  long long v16 = *(_OWORD *)(a2 + 240);
  long long v17 = *(_OWORD *)(a2 + 256);
  *(_WORD *)(a1 + 272) = *(_WORD *)(a2 + 272);
  *(_OWORD *)(a1 + 240) = v16;
  *(_OWORD *)(a1 + 256) = v17;
  *(_OWORD *)(a1 + 224) = v15;
  *(_DWORD *)(a1 + 280) = *(_DWORD *)(a2 + 280);
  if (a1 == a2)
  {
    *(_OWORD *)(a1 + 480) = *(_OWORD *)(a2 + 480);
    long long v24 = *(_OWORD *)(a2 + 496);
    long long v25 = *(_OWORD *)(a2 + 512);
    long long v26 = *(_OWORD *)(a2 + 544);
    *(_OWORD *)(a1 + 528) = *(_OWORD *)(a2 + 528);
    *(_OWORD *)(a1 + 544) = v26;
    *(_OWORD *)(a1 + 496) = v24;
    *(_OWORD *)(a1 + 512) = v25;
    long long v27 = *(_OWORD *)(a2 + 560);
    long long v28 = *(_OWORD *)(a2 + 576);
    long long v29 = *(_OWORD *)(a2 + 608);
    *(_OWORD *)(a1 + 592) = *(_OWORD *)(a2 + 592);
    *(_OWORD *)(a1 + 608) = v29;
    *(_OWORD *)(a1 + 560) = v27;
    *(_OWORD *)(a1 + 576) = v28;
    memmove(v9, (const void *)(a2 + 624), 0x1B8uLL);
    *(_DWORD *)(a1 + 1068) = 0;
  }
  else
  {
    *(_DWORD *)(a1 + 320) = *(_DWORD *)(a2 + 320);
    std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<std::string,unsigned int>,void *> *>>((void *)(a1 + 288), *(uint64_t **)(a2 + 304));
    *(_DWORD *)(a1 + 360) = *(_DWORD *)(a2 + 360);
    std::__hash_table<std::__hash_value_type<std::string,AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::ExternalSymbolInfo>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::ExternalSymbolInfo>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::ExternalSymbolInfo>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::ExternalSymbolInfo>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<std::string,AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::ExternalSymbolInfo>,void *> *>>(v7, *(uint64_t **)(a2 + 344));
    *(_DWORD *)(a1 + 400) = *(_DWORD *)(a2 + 400);
    std::__hash_table<std::__hash_value_type<std::string,AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::ExternalSymbolInfo>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::ExternalSymbolInfo>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::ExternalSymbolInfo>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::ExternalSymbolInfo>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<std::string,AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::ExternalSymbolInfo>,void *> *>>((void *)(a1 + 368), *(uint64_t **)(a2 + 384));
    std::vector<AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::LinkInfo::Relocation,std::allocator<AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::LinkInfo::Relocation>>::__assign_with_size[abi:nn180100]<AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::LinkInfo::Relocation*,AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::LinkInfo::Relocation*>(v8, *(void *)(a2 + 408), *(void *)(a2 + 416), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a2 + 416) - *(void *)(a2 + 408)) >> 3));
    std::vector<AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::LinkInfo::Relocation,std::allocator<AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::LinkInfo::Relocation>>::__assign_with_size[abi:nn180100]<AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::LinkInfo::Relocation*,AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::LinkInfo::Relocation*>((void **)(a1 + 432), *(void *)(a2 + 432), *(void *)(a2 + 440), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a2 + 440) - *(void *)(a2 + 432)) >> 3));
    std::vector<std::shared_ptr<AGX::HAL200::Sampler>>::__assign_with_size[abi:nn180100]<std::shared_ptr<AGX::HAL200::Sampler>*,std::shared_ptr<AGX::HAL200::Sampler>*>(a1 + 456, *(uint64_t **)(a2 + 456), *(uint64_t **)(a2 + 464), (uint64_t)(*(void *)(a2 + 464) - *(void *)(a2 + 456)) >> 4);
    *(_OWORD *)(a1 + 480) = *(_OWORD *)(a2 + 480);
    long long v18 = *(_OWORD *)(a2 + 496);
    long long v19 = *(_OWORD *)(a2 + 512);
    long long v20 = *(_OWORD *)(a2 + 544);
    *(_OWORD *)(a1 + 528) = *(_OWORD *)(a2 + 528);
    *(_OWORD *)(a1 + 544) = v20;
    *(_OWORD *)(a1 + 496) = v18;
    *(_OWORD *)(a1 + 512) = v19;
    long long v21 = *(_OWORD *)(a2 + 560);
    long long v22 = *(_OWORD *)(a2 + 576);
    long long v23 = *(_OWORD *)(a2 + 608);
    *(_OWORD *)(a1 + 592) = *(_OWORD *)(a2 + 592);
    *(_OWORD *)(a1 + 608) = v23;
    *(_OWORD *)(a1 + 560) = v21;
    *(_OWORD *)(a1 + 576) = v22;
    memmove(v9, (const void *)(a2 + 624), 0x1B8uLL);
    *(_DWORD *)(a1 + 1068) = 0;
    std::vector<unsigned char>::__assign_with_size[abi:nn180100]<unsigned char *,unsigned char *>(v33, *(char **)(a2 + 1072), *(char **)(a2 + 1080), *(void *)(a2 + 1080) - *(void *)(a2 + 1072));
    std::vector<unsigned char>::__assign_with_size[abi:nn180100]<unsigned char *,unsigned char *>(v32, *(char **)(a2 + 1096), *(char **)(a2 + 1104), *(void *)(a2 + 1104) - *(void *)(a2 + 1096));
    std::vector<unsigned char>::__assign_with_size[abi:nn180100]<unsigned char *,unsigned char *>(v31, *(char **)(a2 + 1120), *(char **)(a2 + 1128), *(void *)(a2 + 1128) - *(void *)(a2 + 1120));
    std::vector<unsigned char>::__assign_with_size[abi:nn180100]<unsigned char *,unsigned char *>(v10, *(char **)(a2 + 1144), *(char **)(a2 + 1152), *(void *)(a2 + 1152) - *(void *)(a2 + 1144));
  }
  *(void *)(a1 + 1168) = *(void *)(a2 + 1168);
  return a1;
}

void sub_242A5233C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, void **a10, void **a11, void **a12)
{
  long long v18 = *v16;
  if (*v16)
  {
    *(void *)(v12 + 1152) = v18;
    operator delete(v18);
  }
  long long v19 = *a9;
  if (*a9)
  {
    *(void *)(v12 + 1128) = v19;
    operator delete(v19);
  }
  long long v20 = *a10;
  if (*a10)
  {
    *(void *)(v12 + 1104) = v20;
    operator delete(v20);
  }
  long long v21 = *a11;
  if (*a11)
  {
    *(void *)(v12 + 1080) = v21;
    operator delete(v21);
  }
  AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::LinkInfo::~LinkInfo(v15);
  if (*(char *)(v12 + 87) < 0)
  {
    operator delete(*v14);
    if ((*(char *)(v12 + 63) & 0x80000000) == 0)
    {
LABEL_11:
      if ((*(char *)(v12 + 39) & 0x80000000) == 0) {
        goto LABEL_12;
      }
      goto LABEL_15;
    }
  }
  else if ((*(char *)(v12 + 63) & 0x80000000) == 0)
  {
    goto LABEL_11;
  }
  operator delete(*a12);
  if ((*(char *)(v12 + 39) & 0x80000000) == 0) {
LABEL_12:
  }
    _Unwind_Resume(a1);
LABEL_15:
  operator delete(*v13);
  _Unwind_Resume(a1);
}

void AGX::DynamicLibrary<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::allocateCodeHeap(uint64_t a1)
{
  uint64_t v42 = *MEMORY[0x263EF8340];
  int v2 = (os_unfair_lock_s *)(a1 + 1064);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 1064));
  int v3 = *(_DWORD *)(a1 + 1068);
  *(_DWORD *)(a1 + 1068) = v3 + 1;
  if (v3 > 0) {
    goto LABEL_2;
  }
  uint64_t v4 = *(void *)(a1 + 1072);
  uint64_t v5 = *(void *)(a1 + 1080);
  if (v4 != v5)
  {
    *(void *)(a1 + 696) = v5 - v4;
    AGX::Heap<true>::allocateImpl(buf, *(void *)(a1 + 624), v5 - v4, (void *)(a1 + 704));
    long long v6 = *(_OWORD *)&buf[16];
    *(_OWORD *)(a1 + 632) = *(_OWORD *)buf;
    *(_OWORD *)(a1 + 648) = v6;
    *(_OWORD *)(a1 + 657) = *(_OWORD *)&buf[25];
    unint64_t v7 = *(void **)(a1 + 640);
    *(void *)(a1 + 688) = v7;
    *(void *)(a1 + 680) = *(void *)(a1 + 632) + 0x1000000000;
    memcpy(v7, *(const void **)(a1 + 1072), *(void *)(a1 + 1080) - *(void *)(a1 + 1072));
  }
  uint64_t v8 = *(void *)(a1 + 1096);
  uint64_t v9 = *(void *)(a1 + 1104);
  if (v8 != v9)
  {
    *(void *)(a1 + 784) = v9 - v8;
    AGX::Heap<true>::allocateImpl(buf, *(void *)(a1 + 712), v9 - v8, (void *)(a1 + 792));
    long long v10 = *(_OWORD *)&buf[16];
    *(_OWORD *)(a1 + 720) = *(_OWORD *)buf;
    *(_OWORD *)(a1 + 736) = v10;
    *(_OWORD *)(a1 + 745) = *(_OWORD *)&buf[25];
    long long v11 = *(void **)(a1 + 728);
    *(void *)(a1 + 776) = v11;
    *(void *)(a1 + 768) = *(void *)(a1 + 720);
    memcpy(v11, *(const void **)(a1 + 1096), *(void *)(a1 + 1104) - *(void *)(a1 + 1096));
  }
  uint64_t v12 = *(void *)(a1 + 1120);
  uint64_t v13 = *(void *)(a1 + 1128);
  if (v12 != v13)
  {
    *(void *)(a1 + 872) = v13 - v12;
    AGX::Heap<true>::allocateImpl(buf, *(void *)(a1 + 800), v13 - v12, (void *)(a1 + 880));
    long long v14 = *(_OWORD *)&buf[16];
    *(_OWORD *)(a1 + 808) = *(_OWORD *)buf;
    *(_OWORD *)(a1 + 824) = v14;
    *(_OWORD *)(a1 + 833) = *(_OWORD *)&buf[25];
    uint64_t v15 = *(void **)(a1 + 816);
    *(void *)(a1 + 864) = v15;
    *(void *)(a1 + 856) = *(void *)(a1 + 808);
    memcpy(v15, *(const void **)(a1 + 1120), *(void *)(a1 + 1128) - *(void *)(a1 + 1120));
  }
  uint64_t v16 = *(void *)(a1 + 1144);
  uint64_t v17 = *(void *)(a1 + 1152);
  if (v16 != v17)
  {
    *(void *)(a1 + 960) = v17 - v16;
    AGX::Heap<true>::allocateImpl(buf, *(void *)(a1 + 888), v17 - v16, (void *)(a1 + 968));
    long long v18 = *(_OWORD *)&buf[16];
    *(_OWORD *)(a1 + 896) = *(_OWORD *)buf;
    *(_OWORD *)(a1 + 912) = v18;
    *(_OWORD *)(a1 + 921) = *(_OWORD *)&buf[25];
    long long v19 = *(void **)(a1 + 904);
    *(void *)(a1 + 952) = v19;
    *(void *)(a1 + 944) = *(void *)(a1 + 896);
    memcpy(v19, *(const void **)(a1 + 1144), *(void *)(a1 + 1152) - *(void *)(a1 + 1144));
  }
  size_t v20 = *(void *)(a1 + 1168);
  if (v20)
  {
    *(void *)(a1 + 1048) = v20;
    AGX::Heap<true>::allocateImpl(buf, *(void *)(a1 + 976), v20, (void *)(a1 + 1056));
    long long v21 = *(_OWORD *)&buf[16];
    *(_OWORD *)(a1 + 984) = *(_OWORD *)buf;
    *(_OWORD *)(a1 + 1000) = v21;
    *(_OWORD *)(a1 + 1009) = *(_OWORD *)&buf[25];
    long long v22 = *(void **)(a1 + 992);
    *(void *)(a1 + 1040) = v22;
    *(void *)(a1 + 1032) = *(void *)(a1 + 984);
    bzero(v22, v20);
  }
  uint64_t v40 = *(void *)(a1 + 696);
  long long v39 = *(_OWORD *)(a1 + 680);
  long long v37 = *(_OWORD *)(a1 + 768);
  uint64_t v38 = *(void *)(a1 + 784);
  uint64_t v36 = *(void *)(a1 + 872);
  long long v35 = *(_OWORD *)(a1 + 856);
  uint64_t v34 = *(void *)(a1 + 960);
  long long v33 = *(_OWORD *)(a1 + 944);
  long long v23 = *(_OWORD *)(a1 + 1032);
  uint64_t v32 = *(void *)(a1 + 1048);
  long long v31 = v23;
  AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::LinkInfo::applyInternalRelocations((unsigned __int8 *)(a1 + 96), (int *)&v39, (int *)&v37, (uint64_t *)&v35, (int *)&v33, (uint64_t *)&v31);
  long long v24 = (void *)(a1 + 64);
  if ((*(char *)(a1 + 87) & 0x80000000) == 0)
  {
    if (!*(unsigned char *)(a1 + 87)) {
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  if (*(void *)(a1 + 72))
  {
    long long v24 = (void *)*v24;
LABEL_18:
    memcpy((char *)v24 + *(void *)(a1 + 88), *(const void **)(a1 + 688), *(void *)(a1 + 696));
  }
LABEL_19:
  {
    {
      long long v26 = (void *)(a1 + 40);
      if (*(char *)(a1 + 63) < 0) {
        long long v26 = (void *)*v26;
      }
      long long v27 = (void *)(a1 + 16);
      if (*(char *)(a1 + 39) < 0) {
        long long v27 = (void *)*v27;
      }
      int v28 = *(_DWORD *)(a1 + 8);
      uint64_t v29 = *(void *)(a1 + 680);
      uint64_t v30 = *(void *)(a1 + 696);
      *(_DWORD *)buf = 136316162;
      *(void *)&uint8_t buf[4] = v26;
      *(_WORD *)&buf[12] = 2080;
      *(void *)&buf[14] = v27;
      *(_WORD *)&buf[22] = 1024;
      *(_DWORD *)&buf[24] = v28;
      *(_WORD *)&buf[28] = 2048;
      *(void *)&buf[30] = v29;
      *(_WORD *)&buf[38] = 2048;
      *(void *)&unsigned char buf[40] = v30;
      _os_signpost_emit_with_name_impl(&dword_2427AD000, v25, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "FunctionCompiled", "Name=%{signpost.description:attribute}s Type=%{signpost.description:attribute}s ID=%{signpost.description:attribute}u Addr=%{signpost.description:attribute}llu Size=%{signpost.description:attribute}zu", buf, 0x30u);
    }
  }
LABEL_2:
  os_unfair_lock_unlock(v2);
}

void sub_242A527C4(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void AGX::DynamicLibrary<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::deallocateCodeHeap(uint64_t a1)
{
  int v2 = (os_unfair_lock_s *)(a1 + 1064);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 1064));
  int v3 = *(_DWORD *)(a1 + 1068);
  BOOL v4 = __OFSUB__(v3--, 1);
  *(_DWORD *)(a1 + 1068) = v3;
  if ((v3 < 0) ^ v4 | (v3 == 0))
  {
    if (*(void *)(a1 + 688))
    {
      if (*(void *)(a1 + 656))
      {
        uint64_t v5 = *(void *)(a1 + 664);
        long long v6 = *(NSObject **)(v5 + 16);
        uint64_t v15 = MEMORY[0x263EF8330];
        uint64_t v16 = 3221225472;
        uint64_t v17 = ___ZN3AGX4HeapILb1EE14deallocateImplERKNS1_10AllocationE_block_invoke;
        long long v18 = &__block_descriptor_48_e5_v8__0l;
        uint64_t v19 = v5;
        uint64_t v20 = a1 + 632;
        dispatch_sync(v6, &v15);
        *(_OWORD *)(a1 + 657) = 0u;
        *(_OWORD *)(a1 + 648) = 0u;
        *(_OWORD *)(a1 + 632) = 0u;
      }
      *(void *)(a1 + 688) = 0;
    }
    if (*(void *)(a1 + 776))
    {
      if (*(void *)(a1 + 744))
      {
        uint64_t v7 = *(void *)(a1 + 752);
        uint64_t v8 = *(NSObject **)(v7 + 16);
        uint64_t v15 = MEMORY[0x263EF8330];
        uint64_t v16 = 3221225472;
        uint64_t v17 = ___ZN3AGX4HeapILb1EE14deallocateImplERKNS1_10AllocationE_block_invoke;
        long long v18 = &__block_descriptor_48_e5_v8__0l;
        uint64_t v19 = v7;
        uint64_t v20 = a1 + 720;
        dispatch_sync(v8, &v15);
        *(_OWORD *)(a1 + 745) = 0u;
        *(_OWORD *)(a1 + 720) = 0u;
        *(_OWORD *)(a1 + 736) = 0u;
      }
      *(void *)(a1 + 776) = 0;
    }
    if (*(void *)(a1 + 864))
    {
      if (*(void *)(a1 + 832))
      {
        uint64_t v9 = *(void *)(a1 + 840);
        long long v10 = *(NSObject **)(v9 + 16);
        uint64_t v15 = MEMORY[0x263EF8330];
        uint64_t v16 = 3221225472;
        uint64_t v17 = ___ZN3AGX4HeapILb1EE14deallocateImplERKNS1_10AllocationE_block_invoke;
        long long v18 = &__block_descriptor_48_e5_v8__0l;
        uint64_t v19 = v9;
        uint64_t v20 = a1 + 808;
        dispatch_sync(v10, &v15);
        *(_OWORD *)(a1 + 833) = 0u;
        *(_OWORD *)(a1 + 824) = 0u;
        *(_OWORD *)(a1 + 808) = 0u;
      }
      *(void *)(a1 + 864) = 0;
    }
    if (*(void *)(a1 + 952))
    {
      if (*(void *)(a1 + 920))
      {
        uint64_t v11 = *(void *)(a1 + 928);
        uint64_t v12 = *(NSObject **)(v11 + 16);
        uint64_t v15 = MEMORY[0x263EF8330];
        uint64_t v16 = 3221225472;
        uint64_t v17 = ___ZN3AGX4HeapILb1EE14deallocateImplERKNS1_10AllocationE_block_invoke;
        long long v18 = &__block_descriptor_48_e5_v8__0l;
        uint64_t v19 = v11;
        uint64_t v20 = a1 + 896;
        dispatch_sync(v12, &v15);
        *(_OWORD *)(a1 + 921) = 0u;
        *(_OWORD *)(a1 + 896) = 0u;
        *(_OWORD *)(a1 + 912) = 0u;
      }
      *(void *)(a1 + 952) = 0;
    }
    if (*(void *)(a1 + 1040))
    {
      if (*(void *)(a1 + 1008))
      {
        uint64_t v13 = *(void *)(a1 + 1016);
        long long v14 = *(NSObject **)(v13 + 16);
        uint64_t v15 = MEMORY[0x263EF8330];
        uint64_t v16 = 3221225472;
        uint64_t v17 = ___ZN3AGX4HeapILb1EE14deallocateImplERKNS1_10AllocationE_block_invoke;
        long long v18 = &__block_descriptor_48_e5_v8__0l;
        uint64_t v19 = v13;
        uint64_t v20 = a1 + 984;
        dispatch_sync(v14, &v15);
        *(_OWORD *)(a1 + 1009) = 0u;
        *(_OWORD *)(a1 + 1000) = 0u;
        *(_OWORD *)(a1 + 984) = 0u;
      }
      *(void *)(a1 + 1040) = 0;
    }
  }

  os_unfair_lock_unlock(v2);
}

unsigned __int8 *AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::LinkInfo::applyInternalRelocations(unsigned __int8 *result, int *a2, int *a3, uint64_t *a4, int *a5, uint64_t *a6)
{
  uint64_t v9 = result;
  if (*((_DWORD *)result + 10) == -1) {
    *((_DWORD *)result + 10) = atomic_fetch_add_explicit(AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::LinkInfo::getNextGOTOffset::next_got_offset, (*((_DWORD *)result + 46) + 7) & 0xFFFFFFF8, memory_order_relaxed);
  }
  uint64_t v10 = *((void *)result + 42);
  uint64_t v11 = *((void *)result + 43);
  if (v10 != v11)
  {
    uint64_t v12 = 0;
    do
    {
      unsigned int v15 = *(_DWORD *)v10;
      if (*(_DWORD *)v10 < 0xCu || v15 - 14 < 2)
      {
        uint64_t v16 = *(int *)(v10 + 32);
        uint64_t v17 = (unsigned __int8 *)(*((void *)a2 + 1) + v16);
        if (v17 != v12)
        {
          uint64_t v12 = (unsigned __int8 *)(*((void *)a2 + 1) + v16);
LABEL_13:
          switch(v15)
          {
            case 0u:
            case 1u:
            case 3u:
              long long v18 = (char *)(v10 + 8);
              if (*(char *)(v10 + 31) < 0) {
                long long v18 = *(char **)v18;
              }
              int v19 = *((_DWORD *)v9 + 10);
              unsigned int v14 = (AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::GOTEntryLayout::getOffset((uint64_t)(v9 + 184), v18)+ v19) >> 2;
              goto LABEL_7;
            case 2u:
              uint64_t v20 = (char *)(v10 + 8);
              if (*(char *)(v10 + 31) < 0) {
                uint64_t v20 = *(char **)v20;
              }
              int v21 = *((_DWORD *)v9 + 10);
              unsigned int v14 = (AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::GOTEntryLayout::getOffset((uint64_t)(v9 + 184), v20)+ v21) >> 1;
              goto LABEL_7;
            case 4u:
              int v13 = *a3;
              goto LABEL_6;
            case 5u:
              uint64_t v22 = *(void *)a3;
              goto LABEL_33;
            case 6u:
              int v13 = *(_DWORD *)a4;
              goto LABEL_6;
            case 7u:
              long long v23 = a4;
              goto LABEL_32;
            case 8u:
              int v13 = *a5;
              goto LABEL_6;
            case 9u:
              uint64_t v22 = *(void *)a5;
              goto LABEL_33;
            case 0xAu:
              int v13 = *a2;
              goto LABEL_6;
            case 0xBu:
              int v13 = a2[1];
              goto LABEL_6;
            case 0xEu:
              int v13 = *(_DWORD *)a6;
LABEL_6:
              AGX::ESLInstructionEncoderGen3<AGX::HAL200::Encoders>::LoadImmediate::LoadImmediate((uint64_t)v27, v17);
              unsigned int v14 = v27[0] + v13;
LABEL_7:
              AGX::ESLInstructionEncoderGen3<AGX::HAL200::Encoders>::LoadImmediate::LoadImmediate((uint64_t)v27, v17);
              v27[0] = v14;
              goto LABEL_8;
            case 0xFu:
              long long v23 = a6;
LABEL_32:
              uint64_t v22 = *v23;
LABEL_33:
              AGX::ESLInstructionEncoderGen3<AGX::HAL200::Encoders>::LoadImmediate::LoadImmediate((uint64_t)v27, v17);
              unint64_t v24 = (v22 + (unint64_t)v27[0]) >> 32;
              AGX::ESLInstructionEncoderGen3<AGX::HAL200::Encoders>::LoadImmediate::LoadImmediate((uint64_t)v27, v17);
              v27[0] = v24;
LABEL_8:
              double result = AGXIotoInstruction_LDIMM::emit((AGXIotoInstruction_LDIMM *)v27, v17);
              break;
            case 0x13u:
              *(void *)(*((void *)a5 + 1) + 8 * ((int)v16 >> 3)) += *(void *)a2;
              break;
            default:
              break;
          }
        }
      }
      else
      {
        uint64_t v16 = *(int *)(v10 + 32);
        uint64_t v17 = (unsigned __int8 *)(*((void *)a2 + 1) + v16);
        if (v15 <= 0x13) {
          goto LABEL_13;
        }
      }
      v10 += 40;
    }
    while (v10 != v11);
  }
  return result;
}

uint64_t AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::GOTEntryLayout::getOffset(uint64_t a1, char *__s)
{
  size_t v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8) {
    abort();
  }
  uint64_t v5 = (void *)v4;
  long long v6 = (void *)(a1 + 8);
  if (v4 >= 0x17)
  {
    uint64_t v8 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17) {
      uint64_t v8 = v4 | 7;
    }
    uint64_t v9 = v8 + 1;
    uint64_t v7 = (void **)operator new(v8 + 1);
    __dst[1] = v5;
    unint64_t v13 = v9 | 0x8000000000000000;
    __dst[0] = v7;
    goto LABEL_8;
  }
  HIBYTE(v13) = v4;
  uint64_t v7 = __dst;
  if (v4) {
LABEL_8:
  }
    memcpy(v7, __s, (size_t)v5);
  *((unsigned char *)v5 + (void)v7) = 0;
  uint64_t v10 = std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::find<std::string>(v6, (uint64_t)__dst);
  if (SHIBYTE(v13) < 0) {
    operator delete(__dst[0]);
  }
  return *((unsigned int *)v10 + 10);
}

unsigned __int8 *AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::LinkInfo::revertInternalRelocations(unsigned __int8 *result, unsigned __int8 *a2, uint64_t a3, uint64_t a4, int *a5, int *a6, int *a7, int *a8, int *a9)
{
  if (result != a2)
  {
    unsigned int v15 = result;
    uint64_t v16 = 0;
    while (1)
    {
      int v20 = *(_DWORD *)v15;
      if (*(_DWORD *)v15 >= 0xCu && (v20 - 14) >= 2) {
        break;
      }
      uint64_t v21 = *((int *)v15 + 8);
      uint64_t v22 = (unsigned __int8 *)(*(void *)(a3 + 8) + v21);
      if (v22 != v16)
      {
        uint64_t v16 = (unsigned __int8 *)(*(void *)(a3 + 8) + v21);
        goto LABEL_10;
      }
LABEL_6:
      v15 += 40;
      if (v15 == a2) {
        return result;
      }
    }
    uint64_t v21 = *((int *)v15 + 8);
    uint64_t v22 = (unsigned __int8 *)(*(void *)(a3 + 8) + v21);
LABEL_10:
    switch(v20)
    {
      case 4:
        AGX::ESLInstructionEncoderGen3<AGX::HAL200::Encoders>::LoadImmediate::LoadImmediate((uint64_t)v27, v22);
        int v17 = v27[0];
        int v18 = *a6;
        goto LABEL_4;
      case 5:
        AGX::ESLInstructionEncoderGen3<AGX::HAL200::Encoders>::LoadImmediate::LoadImmediate((uint64_t)v27, v22);
        unint64_t v23 = v27[0];
        uint64_t v24 = *(void *)a6;
        goto LABEL_22;
      case 6:
        AGX::ESLInstructionEncoderGen3<AGX::HAL200::Encoders>::LoadImmediate::LoadImmediate((uint64_t)v27, v22);
        int v17 = v27[0];
        int v18 = *a7;
        goto LABEL_4;
      case 7:
        AGX::ESLInstructionEncoderGen3<AGX::HAL200::Encoders>::LoadImmediate::LoadImmediate((uint64_t)v27, v22);
        unint64_t v23 = v27[0];
        uint64_t v24 = *(void *)a7;
        goto LABEL_22;
      case 8:
        AGX::ESLInstructionEncoderGen3<AGX::HAL200::Encoders>::LoadImmediate::LoadImmediate((uint64_t)v27, v22);
        int v17 = v27[0];
        int v18 = *a8;
        goto LABEL_4;
      case 9:
        AGX::ESLInstructionEncoderGen3<AGX::HAL200::Encoders>::LoadImmediate::LoadImmediate((uint64_t)v27, v22);
        unint64_t v23 = v27[0];
        uint64_t v24 = *(void *)a8;
        goto LABEL_22;
      case 10:
        AGX::ESLInstructionEncoderGen3<AGX::HAL200::Encoders>::LoadImmediate::LoadImmediate((uint64_t)v27, v22);
        int v17 = v27[0];
        int v18 = *a5;
        goto LABEL_4;
      case 11:
        AGX::ESLInstructionEncoderGen3<AGX::HAL200::Encoders>::LoadImmediate::LoadImmediate((uint64_t)v27, v22);
        unint64_t v23 = (unint64_t)v27[0] << 32;
        uint64_t v24 = *(void *)a5;
        goto LABEL_22;
      case 14:
        AGX::ESLInstructionEncoderGen3<AGX::HAL200::Encoders>::LoadImmediate::LoadImmediate((uint64_t)v27, v22);
        int v17 = v27[0];
        int v18 = *a9;
LABEL_4:
        int v19 = v17 - v18;
        AGX::ESLInstructionEncoderGen3<AGX::HAL200::Encoders>::LoadImmediate::LoadImmediate((uint64_t)v27, v22);
        v27[0] = v19;
        goto LABEL_5;
      case 15:
        AGX::ESLInstructionEncoderGen3<AGX::HAL200::Encoders>::LoadImmediate::LoadImmediate((uint64_t)v27, v22);
        unint64_t v23 = v27[0];
        uint64_t v24 = *(void *)a9;
LABEL_22:
        unint64_t v25 = (v23 - v24) >> 32;
        AGX::ESLInstructionEncoderGen3<AGX::HAL200::Encoders>::LoadImmediate::LoadImmediate((uint64_t)v27, v22);
        v27[0] = v25;
LABEL_5:
        double result = AGXIotoInstruction_LDIMM::emit((AGXIotoInstruction_LDIMM *)v27, v22);
        break;
      case 19:
        *(void *)(*(void *)(a4 + 8) + 8 * ((int)v21 >> 3)) -= *(void *)a5;
        break;
      default:
        goto LABEL_6;
    }
    goto LABEL_6;
  }
  return result;
}

void AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::LinkInfo::applySPIRelocation(uint64_t a1, char *__s, uint64_t a3, uint64_t a4)
{
  size_t v8 = strlen(__s);
  if (v8 > 0x7FFFFFFFFFFFFFF7) {
LABEL_26:
  }
    abort();
  size_t v9 = v8;
  if (v8 >= 0x17)
  {
    uint64_t v11 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v8 | 7) != 0x17) {
      uint64_t v11 = v8 | 7;
    }
    uint64_t v12 = v11 + 1;
    p_dst = (void **)operator new(v11 + 1);
    size_t v22 = v9;
    unint64_t v23 = v12 | 0x8000000000000000;
    long long __dst = p_dst;
    goto LABEL_8;
  }
  HIBYTE(v23) = v8;
  p_dst = (void **)&__dst;
  if (v8) {
LABEL_8:
  }
    memcpy(p_dst, __s, v9);
  *((unsigned char *)p_dst + v9) = 0;
  unint64_t v13 = std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::find<std::string>((void *)(a1 + 272), (uint64_t)&__dst);
  unsigned int v14 = v13;
  if (SHIBYTE(v23) < 0)
  {
    operator delete(__dst);
    if (!v14) {
      goto LABEL_13;
    }
LABEL_24:
    *(void *)(v14[5] + *(void *)(a4 + 8)) = a3;
    return;
  }
  if (v13) {
    goto LABEL_24;
  }
LABEL_13:
  size_t v15 = strlen(__s);
  if (v15 > 0x7FFFFFFFFFFFFFF7) {
    goto LABEL_26;
  }
  size_t v16 = v15;
  int v17 = (void *)(a1 + 232);
  if (v15 >= 0x17)
  {
    uint64_t v19 = (v15 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v15 | 7) != 0x17) {
      uint64_t v19 = v15 | 7;
    }
    uint64_t v20 = v19 + 1;
    int v18 = (void **)operator new(v19 + 1);
    size_t v22 = v16;
    unint64_t v23 = v20 | 0x8000000000000000;
    long long __dst = v18;
    goto LABEL_20;
  }
  HIBYTE(v23) = v15;
  int v18 = (void **)&__dst;
  if (v15) {
LABEL_20:
  }
    memcpy(v18, __s, v16);
  *((unsigned char *)v18 + v16) = 0;
  unsigned int v14 = std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::find<std::string>(v17, (uint64_t)&__dst);
  if (SHIBYTE(v23) < 0) {
    operator delete(__dst);
  }
  if (v14) {
    goto LABEL_24;
  }
}

void AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::LinkInfo::applySPIConstantRelocation(uint64_t a1, char *__s, NSObject *a3, uint64_t a4)
{
  size_t v8 = strlen(__s);
  if (v8 > 0x7FFFFFFFFFFFFFF7) {
    goto LABEL_27;
  }
  size_t v9 = v8;
  if (v8 >= 0x17)
  {
    uint64_t v11 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v8 | 7) != 0x17) {
      uint64_t v11 = v8 | 7;
    }
    uint64_t v12 = v11 + 1;
    p_p = operator new(v11 + 1);
    size_t v25 = v9;
    unint64_t v26 = v12 | 0x8000000000000000;
    long long __p = p_p;
    goto LABEL_8;
  }
  HIBYTE(v26) = v8;
  p_p = &__p;
  if (v8) {
LABEL_8:
  }
    memcpy(p_p, __s, v9);
  *((unsigned char *)p_p + v9) = 0;
  unint64_t v13 = std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::find<std::string>((void *)(a1 + 272), (uint64_t)&__p);
  unsigned int v14 = v13;
  if (SHIBYTE(v26) < 0)
  {
    operator delete(__p);
    if (v14) {
      goto LABEL_11;
    }
  }
  else if (v13)
  {
LABEL_11:
    uint64_t v15 = v14[5];
LABEL_25:
    long long __p = 0;
    size_t size_ptr = 0;
    unint64_t v23 = dispatch_data_create_map(a3, (const void **)&__p, &size_ptr);
    memcpy((void *)(v15 + *(void *)(a4 + 8)), __p, size_ptr);
    dispatch_release(v23);
    return;
  }
  size_t v16 = strlen(__s);
  if (v16 > 0x7FFFFFFFFFFFFFF7) {
LABEL_27:
  }
    abort();
  size_t v17 = v16;
  int v18 = (void *)(a1 + 232);
  if (v16 >= 0x17)
  {
    uint64_t v20 = (v16 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v16 | 7) != 0x17) {
      uint64_t v20 = v16 | 7;
    }
    uint64_t v21 = v20 + 1;
    uint64_t v19 = operator new(v20 + 1);
    size_t v25 = v17;
    unint64_t v26 = v21 | 0x8000000000000000;
    long long __p = v19;
    goto LABEL_20;
  }
  HIBYTE(v26) = v16;
  uint64_t v19 = &__p;
  if (v16) {
LABEL_20:
  }
    memcpy(v19, __s, v17);
  *((unsigned char *)v19 + v17) = 0;
  size_t v22 = std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::find<std::string>(v18, (uint64_t)&__p);
  if (SHIBYTE(v26) < 0) {
    operator delete(__p);
  }
  if (v22)
  {
    uint64_t v15 = v22[5];
    goto LABEL_25;
  }
}

uint64_t AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::LinkInfo::addressForSymbol(uint64_t a1, char *__s, uint64_t a3)
{
  size_t v6 = strlen(__s);
  if (v6 >= 0x7FFFFFFFFFFFFFF8) {
    abort();
  }
  uint64_t v7 = (void *)v6;
  size_t v8 = (void *)(a1 + 232);
  if (v6 >= 0x17)
  {
    uint64_t v10 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17) {
      uint64_t v10 = v6 | 7;
    }
    uint64_t v11 = v10 + 1;
    size_t v9 = (void **)operator new(v10 + 1);
    __dst[1] = v7;
    unint64_t v16 = v11 | 0x8000000000000000;
    __dst[0] = v9;
    goto LABEL_8;
  }
  HIBYTE(v16) = v6;
  size_t v9 = __dst;
  if (v6) {
LABEL_8:
  }
    memcpy(v9, __s, (size_t)v7);
  *((unsigned char *)v7 + (void)v9) = 0;
  uint64_t v12 = std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::find<std::string>(v8, (uint64_t)__dst);
  unint64_t v13 = v12;
  if (SHIBYTE(v16) < 0)
  {
    operator delete(__dst[0]);
    if (v13) {
      return v13[5] + a3;
    }
  }
  else if (v12)
  {
    return v13[5] + a3;
  }
  return -1;
}

void AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::GOTEntryLayout::insert(int8x8_t *a1, char *__s, int a3)
{
  size_t v4 = __s;
  size_t v6 = strlen(__s);
  if (v6 > 0x7FFFFFFFFFFFFFF7) {
    goto LABEL_162;
  }
  size_t v7 = v6;
  if (v6 >= 0x17)
  {
    uint64_t v9 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17) {
      uint64_t v9 = v6 | 7;
    }
    uint64_t v10 = v9 + 1;
    p_dst = (long long *)operator new(v9 + 1);
    *((void *)&__dst + 1) = v7;
    int64_t v83 = v10 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
  }
  else
  {
    HIBYTE(v83) = v6;
    p_dst = &__dst;
    if (!v6) {
      goto LABEL_9;
    }
  }
  memcpy(p_dst, v4, v7);
LABEL_9:
  uint64_t v11 = a1 + 1;
  *((unsigned char *)p_dst + v7) = 0;
  int v12 = SHIBYTE(v83);
  unint64_t v13 = (void *)__dst;
  if (v83 >= 0) {
    unsigned int v14 = (uint64_t *)&__dst;
  }
  else {
    unsigned int v14 = (uint64_t *)__dst;
  }
  if (v83 >= 0) {
    unint64_t v15 = HIBYTE(v83);
  }
  else {
    unint64_t v15 = *((void *)&__dst + 1);
  }
  unint64_t v16 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:nn180100](v14, v15);
  uint64_t v78 = a1 + 1;
  uint64_t v79 = a1;
  int8x8_t v17 = a1[2];
  int v77 = a3;
  if (!*(void *)&v17) {
    goto LABEL_59;
  }
  unint64_t v18 = v16;
  uint8x8_t v19 = (uint8x8_t)vcnt_s8(v17);
  v19.i16[0] = vaddlv_u8(v19);
  if (v19.u32[0] > 1uLL)
  {
    unint64_t v20 = v16;
    if (v16 >= *(void *)&v17) {
      unint64_t v20 = v16 % *(void *)&v17;
    }
  }
  else
  {
    unint64_t v20 = (*(void *)&v17 - 1) & v16;
  }
  uint64_t v21 = *(uint64_t ***)(*(void *)v11 + 8 * v20);
  if (!v21 || (size_t v22 = *v21) == 0)
  {
LABEL_59:
    uint64_t v24 = 0;
    if ((v12 & 0x80000000) == 0) {
      goto LABEL_57;
    }
    goto LABEL_60;
  }
  if (v19.u32[0] < 2uLL)
  {
    uint64_t v23 = *(void *)&v17 - 1;
    while (1)
    {
      uint64_t v29 = v22[1];
      if (v29 == v18)
      {
        uint64_t v30 = *((unsigned __int8 *)v22 + 39);
        if ((v30 & 0x80u) == 0) {
          uint64_t v31 = *((unsigned __int8 *)v22 + 39);
        }
        else {
          uint64_t v31 = v22[3];
        }
        if (v31 == v15)
        {
          if ((v30 & 0x80) != 0)
          {
            if (!memcmp((const void *)v22[2], v14, v22[3])) {
              goto LABEL_55;
            }
          }
          else
          {
            if (!*((unsigned char *)v22 + 39)) {
              goto LABEL_55;
            }
            uint64_t v32 = 0;
            while (*((unsigned __int8 *)v22 + v32 + 16) == *((unsigned __int8 *)v14 + v32))
            {
              if (v30 == ++v32) {
                goto LABEL_55;
              }
            }
          }
        }
      }
      else if ((v29 & v23) != v20)
      {
        goto LABEL_59;
      }
      uint64_t v24 = 0;
      size_t v22 = (uint64_t *)*v22;
      if (!v22) {
        goto LABEL_56;
      }
    }
  }
  while (1)
  {
    unint64_t v25 = v22[1];
    if (v25 == v18) {
      break;
    }
    if (v25 >= *(void *)&v17) {
      v25 %= *(void *)&v17;
    }
    if (v25 != v20) {
      goto LABEL_59;
    }
LABEL_25:
    uint64_t v24 = 0;
    size_t v22 = (uint64_t *)*v22;
    if (!v22) {
      goto LABEL_56;
    }
  }
  uint64_t v26 = *((unsigned __int8 *)v22 + 39);
  if ((v26 & 0x80u) == 0) {
    uint64_t v27 = *((unsigned __int8 *)v22 + 39);
  }
  else {
    uint64_t v27 = v22[3];
  }
  if (v27 != v15) {
    goto LABEL_25;
  }
  if ((v26 & 0x80) == 0)
  {
    if (!*((unsigned char *)v22 + 39)) {
      goto LABEL_55;
    }
    uint64_t v28 = 0;
    while (*((unsigned __int8 *)v22 + v28 + 16) == *((unsigned __int8 *)v14 + v28))
    {
      if (v26 == ++v28) {
        goto LABEL_55;
      }
    }
    goto LABEL_25;
  }
  if (memcmp((const void *)v22[2], v14, v22[3])) {
    goto LABEL_25;
  }
LABEL_55:
  uint64_t v24 = v22;
LABEL_56:
  if (v12 < 0)
  {
LABEL_60:
    operator delete(v13);
    long long v33 = (int *)v79;
    if (!v24) {
      goto LABEL_61;
    }
    return;
  }
LABEL_57:
  long long v33 = (int *)v79;
  if (v24) {
    return;
  }
LABEL_61:
  *long long v33 = (v77 + *v33 - 1) & -v77;
  size_t v34 = strlen(v4);
  if (v34 > 0x7FFFFFFFFFFFFFF7) {
LABEL_162:
  }
    abort();
  size_t v35 = v34;
  if (v34 >= 0x17)
  {
    uint64_t v37 = (v34 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v34 | 7) != 0x17) {
      uint64_t v37 = v34 | 7;
    }
    uint64_t v38 = v37 + 1;
    uint64_t v36 = (long long *)operator new(v37 + 1);
    *((void *)&v80 + 1) = v35;
    int64_t v81 = v38 | 0x8000000000000000;
    *(void *)&long long v80 = v36;
  }
  else
  {
    HIBYTE(v81) = v34;
    uint64_t v36 = &v80;
    if (!v34) {
      goto LABEL_69;
    }
  }
  memcpy(v36, v4, v35);
LABEL_69:
  *((unsigned char *)v36 + v35) = 0;
  int64_t v83 = v81;
  long long __dst = v80;
  int v39 = *v33;
  int v84 = *v33;
  int v40 = SHIBYTE(v81);
  std::string::size_type v41 = *((void *)&v80 + 1);
  __sa = (std::string::value_type *)v80;
  if (v81 >= 0) {
    uint64_t v42 = (uint64_t *)&__dst;
  }
  else {
    uint64_t v42 = (uint64_t *)v80;
  }
  if (v81 >= 0) {
    unint64_t v43 = HIBYTE(v81);
  }
  else {
    unint64_t v43 = *((void *)&v80 + 1);
  }
  unint64_t v44 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:nn180100](v42, v43);
  unint64_t v45 = v44;
  unint64_t v46 = *((void *)v33 + 2);
  int v76 = v40;
  if (v46)
  {
    uint8x8_t v47 = (uint8x8_t)vcnt_s8((int8x8_t)v46);
    v47.i16[0] = vaddlv_u8(v47);
    if (v47.u32[0] > 1uLL)
    {
      size_t v4 = (char *)v44;
      if (v44 >= v46) {
        size_t v4 = (char *)(v44 % v46);
      }
    }
    else
    {
      size_t v4 = (char *)((v46 - 1) & v44);
    }
    BOOL v48 = *(uint64_t ***)(*(void *)v78 + 8 * (void)v4);
    if (v48)
    {
      double v49 = *v48;
      if (*v48)
      {
        if (v47.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v55 = v49[1];
            if (v55 == v45)
            {
              uint64_t v56 = *((unsigned __int8 *)v49 + 39);
              if ((v56 & 0x80u) == 0) {
                uint64_t v57 = *((unsigned __int8 *)v49 + 39);
              }
              else {
                uint64_t v57 = v49[3];
              }
              if (v57 == v43)
              {
                uint64_t v58 = (const void **)(v49 + 2);
                if ((v56 & 0x80) != 0)
                {
                  if (!memcmp(*v58, v42, v49[3])) {
                    goto LABEL_158;
                  }
                }
                else
                {
                  if (!*((unsigned char *)v49 + 39)) {
                    goto LABEL_158;
                  }
                  uint64_t v59 = v42;
                  while (*(unsigned __int8 *)v58 == *(unsigned __int8 *)v59)
                  {
                    uint64_t v58 = (const void **)((char *)v58 + 1);
                    uint64_t v59 = (uint64_t *)((char *)v59 + 1);
                    if (!--v56) {
                      goto LABEL_158;
                    }
                  }
                }
              }
            }
            else if ((char *)(v55 & (v46 - 1)) != v4)
            {
              goto LABEL_117;
            }
            double v49 = (uint64_t *)*v49;
            if (!v49) {
              goto LABEL_117;
            }
          }
        }
        do
        {
          unint64_t v50 = v49[1];
          if (v50 == v45)
          {
            uint64_t v51 = *((unsigned __int8 *)v49 + 39);
            if ((v51 & 0x80u) == 0) {
              uint64_t v52 = *((unsigned __int8 *)v49 + 39);
            }
            else {
              uint64_t v52 = v49[3];
            }
            if (v52 == v43)
            {
              uint64_t v53 = (const void **)(v49 + 2);
              if ((v51 & 0x80) != 0)
              {
                if (!memcmp(*v53, v42, v49[3])) {
                  goto LABEL_158;
                }
              }
              else
              {
                if (!*((unsigned char *)v49 + 39)) {
                  goto LABEL_158;
                }
                int v54 = v42;
                while (*(unsigned __int8 *)v53 == *(unsigned __int8 *)v54)
                {
                  uint64_t v53 = (const void **)((char *)v53 + 1);
                  int v54 = (uint64_t *)((char *)v54 + 1);
                  if (!--v51) {
                    goto LABEL_158;
                  }
                }
              }
            }
          }
          else
          {
            if (v50 >= v46) {
              v50 %= v46;
            }
            if ((char *)v50 != v4) {
              break;
            }
          }
          double v49 = (uint64_t *)*v49;
        }
        while (v49);
      }
LABEL_117:
      long long v33 = (int *)v79;
      int v40 = v76;
    }
  }
  unint64_t v60 = (char *)operator new(0x30uLL);
  size_t v61 = v33 + 6;
  long long v85 = v60;
  int v86 = v33 + 6;
  char v87 = 0;
  uint64_t v62 = (std::string *)(v60 + 16);
  *(void *)unint64_t v60 = 0;
  *((void *)v60 + 1) = v45;
  if (v40 < 0)
  {
    std::string::__init_copy_ctor_external(v62, __sa, v41);
  }
  else
  {
    *(_OWORD *)&v62->__r_.__value_.__l.__data_ = v80;
    *((void *)v60 + 4) = v81;
  }
  *((_DWORD *)v60 + 10) = v39;
  char v87 = 1;
  float v63 = (float)(unint64_t)(*((void *)v33 + 4) + 1);
  float v64 = *((float *)v33 + 10);
  if (!v46 || (float)(v64 * (float)v46) < v63)
  {
    BOOL v65 = 1;
    if (v46 >= 3) {
      BOOL v65 = (v46 & (v46 - 1)) != 0;
    }
    unint64_t v66 = v65 | (2 * v46);
    unint64_t v67 = vcvtps_u32_f32(v63 / v64);
    if (v66 <= v67) {
      size_t prime = v67;
    }
    else {
      size_t prime = v66;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    int8x8_t v69 = *(int8x8_t *)(v33 + 4);
    if (prime > *(void *)&v69) {
      goto LABEL_133;
    }
    if (prime < *(void *)&v69)
    {
      unint64_t v70 = vcvtps_u32_f32((float)*((unint64_t *)v33 + 4) / *((float *)v33 + 10));
      if (*(void *)&v69 < 3uLL || (uint8x8_t v71 = (uint8x8_t)vcnt_s8(v69), v71.i16[0] = vaddlv_u8(v71), v71.u32[0] > 1uLL))
      {
        unint64_t v70 = std::__next_prime(v70);
      }
      else
      {
        uint64_t v72 = 1 << -(char)__clz(v70 - 1);
        if (v70 >= 2) {
          unint64_t v70 = v72;
        }
      }
      if (prime <= v70) {
        size_t prime = v70;
      }
      if (prime < *(void *)&v69) {
LABEL_133:
      }
        std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::__do_rehash<true>((uint64_t)v78, prime);
    }
    unint64_t v46 = *((void *)v33 + 2);
    if ((v46 & (v46 - 1)) != 0)
    {
      if (v45 >= v46) {
        size_t v4 = (char *)(v45 % v46);
      }
      else {
        size_t v4 = (char *)v45;
      }
    }
    else
    {
      size_t v4 = (char *)((v46 - 1) & v45);
    }
  }
  unint64_t v73 = *(void **)(*(void *)v78 + 8 * (void)v4);
  if (v73)
  {
    *(void *)long long v85 = *v73;
    *unint64_t v73 = v85;
  }
  else
  {
    *(void *)long long v85 = *v61;
    void *v61 = v85;
    *(void *)(*(void *)v78 + 8 * (void)v4) = v61;
    if (*(void *)v85)
    {
      unint64_t v74 = *(void *)(*(void *)v85 + 8);
      if ((v46 & (v46 - 1)) != 0)
      {
        if (v74 >= v46) {
          v74 %= v46;
        }
      }
      else
      {
        v74 &= v46 - 1;
      }
      *(void *)(*(void *)v78 + 8 * v74) = v85;
    }
  }
  ++*((void *)v33 + 4);
LABEL_158:
  if (v76 < 0) {
    operator delete(__sa);
  }
  v79->i32[0] += v77;
}

void sub_242A53C5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, int a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
}

BOOL ___ZN3AGX13DynamicLoaderINS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEvE20DynamicLibraryFilter33newFilteredLinkedDynamicLibrariesEP7NSArrayIPU28objcproto17MTLDynamicLibrary11objc_objectE_block_invoke(uint64_t a1, uint64_t a2)
{
  int v2 = *(void **)(a1 + 32);
  AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::LinkInfo::LinkInfo((uint64_t)v12, *(void *)(a2 + 56) + 96);
  int8x8_t v3 = (int8x8_t)v2[1];
  if (v3)
  {
    uint8x8_t v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      unint64_t v5 = v13;
      if (v13 >= *(void *)&v3) {
        unint64_t v5 = v13 % *(void *)&v3;
      }
    }
    else
    {
      unint64_t v5 = (*(void *)&v3 - 1) & v13;
    }
    size_t v6 = *(void **)(*v2 + 8 * v5);
    if (v6)
    {
      size_t v6 = (void *)*v6;
      if (v6)
      {
        if (v4.u32[0] < 2uLL)
        {
          uint64_t v7 = *(void *)&v3 - 1;
          while (1)
          {
            uint64_t v9 = v6[1];
            if (v9 == v13)
            {
              if (v6[2] == v13) {
                goto LABEL_22;
              }
            }
            else if ((v9 & v7) != v5)
            {
              goto LABEL_21;
            }
            size_t v6 = (void *)*v6;
            if (!v6) {
              goto LABEL_22;
            }
          }
        }
        do
        {
          unint64_t v8 = v6[1];
          if (v8 == v13)
          {
            if (v6[2] == v13) {
              break;
            }
          }
          else
          {
            if (v8 >= *(void *)&v3) {
              v8 %= *(void *)&v3;
            }
            if (v8 != v5) {
              goto LABEL_21;
            }
          }
          size_t v6 = (void *)*v6;
        }
        while (v6);
      }
    }
  }
  else
  {
LABEL_21:
    size_t v6 = 0;
  }
LABEL_22:
  BOOL v10 = v6 != 0;
  AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::LinkInfo::~LinkInfo((uint64_t)v12);
  return v10;
}

uint64_t AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::LinkInfo::LinkInfo(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  if (*(char *)(a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 8), *(const std::string::value_type **)(a2 + 8), *(void *)(a2 + 16));
  }
  else
  {
    long long v4 = *(_OWORD *)(a2 + 8);
    *(void *)(a1 + 24) = *(void *)(a2 + 24);
    *(_OWORD *)(a1 + 8) = v4;
  }
  long long v5 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v5;
  long long v6 = *(_OWORD *)(a2 + 64);
  long long v7 = *(_OWORD *)(a2 + 80);
  long long v8 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v8;
  *(_OWORD *)(a1 + 64) = v6;
  *(_OWORD *)(a1 + 80) = v7;
  long long v9 = *(_OWORD *)(a2 + 128);
  long long v10 = *(_OWORD *)(a2 + 144);
  long long v11 = *(_OWORD *)(a2 + 160);
  *(_WORD *)(a1 + 176) = *(_WORD *)(a2 + 176);
  *(_OWORD *)(a1 + 144) = v10;
  *(_OWORD *)(a1 + 160) = v11;
  *(_OWORD *)(a1 + 128) = v9;
  *(_DWORD *)(a1 + 184) = *(_DWORD *)(a2 + 184);
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_DWORD *)(a1 + 224) = *(_DWORD *)(a2 + 224);
  size_t prime = *(void *)(a2 + 200);
  if (prime == 1)
  {
    size_t prime = 2;
LABEL_20:
    std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::__do_rehash<true>(a1 + 192, prime);
    goto LABEL_21;
  }
  if ((prime & (prime - 1)) != 0)
  {
    size_t prime = std::__next_prime(prime);
    int8x8_t v13 = *(int8x8_t *)(a1 + 200);
    BOOL v14 = prime >= *(void *)&v13;
    if (prime > *(void *)&v13) {
      goto LABEL_20;
    }
  }
  else
  {
    int8x8_t v13 = 0;
    BOOL v14 = 1;
    if (prime) {
      goto LABEL_20;
    }
  }
  if (!v14)
  {
    unint64_t v15 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 216) / *(float *)(a1 + 224));
    if (*(void *)&v13 < 3uLL || (uint8x8_t v16 = (uint8x8_t)vcnt_s8(v13), v16.i16[0] = vaddlv_u8(v16), v16.u32[0] > 1uLL))
    {
      unint64_t v15 = std::__next_prime(v15);
    }
    else
    {
      uint64_t v17 = 1 << -(char)__clz(v15 - 1);
      if (v15 >= 2) {
        unint64_t v15 = v17;
      }
    }
    if (prime <= v15) {
      size_t prime = v15;
    }
    if (prime < *(void *)&v13) {
      goto LABEL_20;
    }
  }
LABEL_21:
  for (unint64_t i = *(void **)(a2 + 208); i; unint64_t i = (void *)*i)
    std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,unsigned int> const&>(a1 + 192, (uint64_t)(i + 2), (uint64_t)(i + 2));
  std::unordered_map<std::string,AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::ExternalSymbolInfo,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::pair<std::string const,AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::ExternalSymbolInfo>>>::unordered_map(a1 + 232, a2 + 232);
  std::unordered_map<std::string,AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::ExternalSymbolInfo,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::pair<std::string const,AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::ExternalSymbolInfo>>>::unordered_map(a1 + 272, a2 + 272);
  *(void *)(a1 + 312) = 0;
  *(void *)(a1 + 320) = 0;
  *(void *)(a1 + 328) = 0;
  uint64_t v20 = *(void *)(a2 + 312);
  uint64_t v19 = *(void *)(a2 + 320);
  int64_t v21 = v19 - v20;
  if (v19 != v20)
  {
    unint64_t v22 = 0xCCCCCCCCCCCCCCCDLL * (v21 >> 3);
    if (v22 > 0x666666666666666) {
      abort();
    }
    uint64_t v23 = (char *)operator new(v21);
    uint64_t v24 = 0;
    *(void *)(a1 + 312) = v23;
    *(void *)(a1 + 320) = v23;
    *(void *)(a1 + 328) = &v23[40 * v22];
    do
    {
      uint64_t v26 = v20 + v24;
      *(_DWORD *)&v23[v24] = *(_DWORD *)(v20 + v24);
      uint64_t v27 = (std::string *)&v23[v24 + 8];
      uint64_t v28 = (const std::string::value_type **)(v20 + v24 + 8);
      if (*(char *)(v20 + v24 + 31) < 0)
      {
        std::string::__init_copy_ctor_external(v27, *v28, *(void *)(v26 + 16));
      }
      else
      {
        long long v25 = *(_OWORD *)v28;
        *(void *)&v23[v24 + 24] = *(void *)(v20 + v24 + 24);
        *(_OWORD *)&v27->__r_.__value_.__l.__data_ = v25;
      }
      *(_DWORD *)&v23[v24 + 32] = *(_DWORD *)(v26 + 32);
      v24 += 40;
    }
    while (v26 + 40 != v19);
    *(void *)(a1 + 320) = &v23[v24];
  }
  *(void *)(a1 + 336) = 0;
  *(void *)(a1 + 344) = 0;
  *(void *)(a1 + 352) = 0;
  uint64_t v29 = *(void *)(a2 + 336);
  uint64_t v30 = *(void *)(a2 + 344);
  int64_t v31 = v30 - v29;
  if (v30 != v29)
  {
    unint64_t v32 = 0xCCCCCCCCCCCCCCCDLL * (v31 >> 3);
    if (v32 > 0x666666666666666) {
      abort();
    }
    long long v33 = (char *)operator new(v31);
    uint64_t v34 = 0;
    *(void *)(a1 + 336) = v33;
    *(void *)(a1 + 344) = v33;
    *(void *)(a1 + 352) = &v33[40 * v32];
    do
    {
      uint64_t v36 = v29 + v34;
      *(_DWORD *)&v33[v34] = *(_DWORD *)(v29 + v34);
      uint64_t v37 = (std::string *)&v33[v34 + 8];
      uint64_t v38 = (const std::string::value_type **)(v29 + v34 + 8);
      if (*(char *)(v29 + v34 + 31) < 0)
      {
        std::string::__init_copy_ctor_external(v37, *v38, *(void *)(v36 + 16));
      }
      else
      {
        long long v35 = *(_OWORD *)v38;
        *(void *)&v33[v34 + 24] = *(void *)(v29 + v34 + 24);
        *(_OWORD *)&v37->__r_.__value_.__l.__data_ = v35;
      }
      *(_DWORD *)&v33[v34 + 32] = *(_DWORD *)(v36 + 32);
      v34 += 40;
    }
    while (v36 + 40 != v30);
    *(void *)(a1 + 344) = &v33[v34];
  }
  *(void *)(a1 + 360) = 0;
  *(void *)(a1 + 368) = 0;
  *(void *)(a1 + 376) = 0;
  int v39 = *(char **)(a2 + 360);
  int v40 = *(char **)(a2 + 368);
  uint64_t v41 = v40 - v39;
  if (v40 != v39)
  {
    if (v41 < 0) {
      abort();
    }
    uint64_t v42 = operator new(v40 - v39);
    *(void *)(a1 + 360) = v42;
    *(void *)(a1 + 368) = v42;
    *(void *)(a1 + 376) = &v42[2 * (v41 >> 4)];
    do
    {
      uint64_t v43 = *((void *)v39 + 1);
      *uint64_t v42 = *(void *)v39;
      v42[1] = v43;
      if (v43) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v43 + 8), 1uLL, memory_order_relaxed);
      }
      v42 += 2;
      v39 += 16;
    }
    while (v39 != v40);
    *(void *)(a1 + 368) = v42;
  }
  long long v44 = *(_OWORD *)(a2 + 384);
  long long v45 = *(_OWORD *)(a2 + 400);
  long long v46 = *(_OWORD *)(a2 + 416);
  *(void *)(a1 + 432) = *(void *)(a2 + 432);
  *(_OWORD *)(a1 + 400) = v45;
  *(_OWORD *)(a1 + 416) = v46;
  *(_OWORD *)(a1 + 384) = v44;
  *(void *)(a1 + 440) = *(void *)(a2 + 440);
  *(void *)(a1 + 448) = *(void *)(a2 + 448);
  *(_OWORD *)(a1 + 456) = *(_OWORD *)(a2 + 456);
  long long v47 = *(_OWORD *)(a2 + 472);
  *(void *)(a1 + 488) = *(void *)(a2 + 488);
  *(_OWORD *)(a1 + 472) = v47;
  *(void *)(a1 + 496) = *(void *)(a2 + 496);
  *(void *)(a1 + 504) = *(void *)(a2 + 504);
  *(_OWORD *)(a1 + 512) = *(_OWORD *)(a2 + 512);
  return a1;
}

void sub_242A541E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  std::unordered_map<std::string,unsigned int>::~unordered_map[abi:nn180100](a11);
  AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::GOTEntryLayout::~GOTEntryLayout(v13);
  if (*(char *)(v12 + 31) < 0) {
    operator delete(*a12);
  }
  _Unwind_Resume(a1);
}

uint64_t std::unordered_map<std::string,AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::ExternalSymbolInfo,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::pair<std::string const,AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::ExternalSymbolInfo>>>::unordered_map(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  size_t prime = *(void *)(a2 + 8);
  if (prime == 1)
  {
    size_t prime = 2;
LABEL_17:
    std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::__do_rehash<true>(a1, prime);
    goto LABEL_18;
  }
  if ((prime & (prime - 1)) != 0)
  {
    size_t prime = std::__next_prime(*(void *)(a2 + 8));
    int8x8_t v5 = *(int8x8_t *)(a1 + 8);
    BOOL v6 = prime >= *(void *)&v5;
    if (prime > *(void *)&v5) {
      goto LABEL_17;
    }
  }
  else
  {
    int8x8_t v5 = 0;
    BOOL v6 = 1;
    if (prime) {
      goto LABEL_17;
    }
  }
  if (!v6)
  {
    unint64_t v7 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(void *)&v5 < 3uLL || (uint8x8_t v8 = (uint8x8_t)vcnt_s8(v5), v8.i16[0] = vaddlv_u8(v8), v8.u32[0] > 1uLL))
    {
      unint64_t v7 = std::__next_prime(v7);
    }
    else
    {
      uint64_t v9 = 1 << -(char)__clz(v7 - 1);
      if (v7 >= 2) {
        unint64_t v7 = v9;
      }
    }
    if (prime <= v7) {
      size_t prime = v7;
    }
    if (prime < *(void *)&v5) {
      goto LABEL_17;
    }
  }
LABEL_18:
  for (unint64_t i = *(void **)(a2 + 16); i; unint64_t i = (void *)*i)
    std::__hash_table<std::__hash_value_type<std::string,AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::ExternalSymbolInfo>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::ExternalSymbolInfo>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::ExternalSymbolInfo>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::ExternalSymbolInfo>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::ExternalSymbolInfo> const&>(a1, (uint64_t)(i + 2), (uint64_t)(i + 2));
  return a1;
}

void sub_242A54394(_Unwind_Exception *a1)
{
  std::unordered_map<std::string,unsigned int>::~unordered_map[abi:nn180100](v1);
  _Unwind_Resume(a1);
}

void **std::vector<AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::LinkInfo::Relocation,std::allocator<AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::LinkInfo::Relocation>>::~vector[abi:nn180100](void **a1)
{
  int v2 = (void **)*a1;
  if (*a1)
  {
    int8x8_t v3 = (void **)a1[1];
    long long v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        if (*((char *)v3 - 9) < 0) {
          operator delete(*(v3 - 4));
        }
        v3 -= 5;
      }
      while (v3 != v2);
      long long v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::GOTEntryLayout::~GOTEntryLayout(uint64_t a1)
{
  int v2 = *(void ***)(a1 + 24);
  if (v2)
  {
    do
    {
      int8x8_t v5 = (void **)*v2;
      if (*((char *)v2 + 39) < 0) {
        operator delete(v2[2]);
      }
      operator delete(v2);
      int v2 = v5;
    }
    while (v5);
  }
  int8x8_t v3 = *(void **)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  if (v3) {
    operator delete(v3);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<std::string,AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::ExternalSymbolInfo>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::ExternalSymbolInfo>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::ExternalSymbolInfo>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::ExternalSymbolInfo>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::ExternalSymbolInfo> const&>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6 = *(char *)(a2 + 23);
  if (v6 >= 0) {
    unint64_t v7 = (uint64_t *)a2;
  }
  else {
    unint64_t v7 = *(uint64_t **)a2;
  }
  if (v6 >= 0) {
    unint64_t v8 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    unint64_t v8 = *(void *)(a2 + 8);
  }
  unint64_t v9 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:nn180100](v7, v8);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v3 = v9;
      if (v9 >= v11) {
        unint64_t v3 = v9 % v11;
      }
    }
    else
    {
      unint64_t v3 = (v11 - 1) & v9;
    }
    uint64_t v13 = *(uint64_t ***)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      BOOL v14 = *v13;
      if (*v13)
      {
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v20 = v14[1];
            if (v20 == v10)
            {
              uint64_t v21 = *((unsigned __int8 *)v14 + 39);
              if ((v21 & 0x80u) == 0) {
                uint64_t v22 = *((unsigned __int8 *)v14 + 39);
              }
              else {
                uint64_t v22 = v14[3];
              }
              if (v22 == v8)
              {
                uint64_t v23 = (const void **)(v14 + 2);
                if ((v21 & 0x80) != 0)
                {
                  if (!memcmp(*v23, v7, v14[3])) {
                    return;
                  }
                }
                else
                {
                  if (!*((unsigned char *)v14 + 39)) {
                    return;
                  }
                  for (unint64_t i = v7; *(unsigned __int8 *)v23 == *(unsigned __int8 *)i; unint64_t i = (uint64_t *)((char *)i + 1))
                  {
                    uint64_t v23 = (const void **)((char *)v23 + 1);
                    if (!--v21) {
                      return;
                    }
                  }
                }
              }
            }
            else if ((v20 & (v11 - 1)) != v3)
            {
              goto LABEL_49;
            }
            BOOL v14 = (uint64_t *)*v14;
            if (!v14) {
              goto LABEL_49;
            }
          }
        }
        do
        {
          unint64_t v15 = v14[1];
          if (v15 == v10)
          {
            uint64_t v16 = *((unsigned __int8 *)v14 + 39);
            if ((v16 & 0x80u) == 0) {
              uint64_t v17 = *((unsigned __int8 *)v14 + 39);
            }
            else {
              uint64_t v17 = v14[3];
            }
            if (v17 == v8)
            {
              unint64_t v18 = (const void **)(v14 + 2);
              if ((v16 & 0x80) != 0)
              {
                if (!memcmp(*v18, v7, v14[3])) {
                  return;
                }
              }
              else
              {
                if (!*((unsigned char *)v14 + 39)) {
                  return;
                }
                for (unint64_t j = v7; *(unsigned __int8 *)v18 == *(unsigned __int8 *)j; unint64_t j = (uint64_t *)((char *)j + 1))
                {
                  unint64_t v18 = (const void **)((char *)v18 + 1);
                  if (!--v16) {
                    return;
                  }
                }
              }
            }
          }
          else
          {
            if (v15 >= v11) {
              v15 %= v11;
            }
            if (v15 != v3) {
              break;
            }
          }
          BOOL v14 = (uint64_t *)*v14;
        }
        while (v14);
      }
    }
  }
LABEL_49:
  long long v25 = (char *)operator new(0x80uLL);
  int v40 = v25;
  *(void *)long long v25 = 0;
  *((void *)v25 + 1) = v10;
  uint64_t v26 = (std::string *)(v25 + 16);
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v26, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)&v26->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
    *((void *)v25 + 4) = *(void *)(a3 + 16);
  }
  *(_OWORD *)(v25 + 40) = *(_OWORD *)(a3 + 24);
  *(_OWORD *)(v25 + 56) = *(_OWORD *)(a3 + 40);
  *(_OWORD *)(v25 + 72) = *(_OWORD *)(a3 + 56);
  *((void *)v25 + 11) = *(void *)(a3 + 72);
  long long v27 = *(_OWORD *)(a3 + 96);
  *((_OWORD *)v25 + 6) = *(_OWORD *)(a3 + 80);
  *((_OWORD *)v25 + 7) = v27;
  float v28 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v29 = *(float *)(a1 + 32);
  if (!v11 || (float)(v29 * (float)v11) < v28)
  {
    BOOL v30 = 1;
    if (v11 >= 3) {
      BOOL v30 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v31 = v30 | (2 * v11);
    unint64_t v32 = vcvtps_u32_f32(v28 / v29);
    if (v31 <= v32) {
      size_t prime = v32;
    }
    else {
      size_t prime = v31;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    int8x8_t v34 = *(int8x8_t *)(a1 + 8);
    if (prime > *(void *)&v34) {
      goto LABEL_64;
    }
    if (prime < *(void *)&v34)
    {
      unint64_t v35 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(void *)&v34 < 3uLL || (uint8x8_t v36 = (uint8x8_t)vcnt_s8(v34), v36.i16[0] = vaddlv_u8(v36), v36.u32[0] > 1uLL))
      {
        unint64_t v35 = std::__next_prime(v35);
      }
      else
      {
        uint64_t v37 = 1 << -(char)__clz(v35 - 1);
        if (v35 >= 2) {
          unint64_t v35 = v37;
        }
      }
      if (prime <= v35) {
        size_t prime = v35;
      }
      if (prime < *(void *)&v34) {
LABEL_64:
      }
        std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::__do_rehash<true>(a1, prime);
    }
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v3 = v10 % v11;
      }
      else {
        unint64_t v3 = v10;
      }
    }
    else
    {
      unint64_t v3 = (v11 - 1) & v10;
    }
  }
  uint64_t v38 = *(void **)(*(void *)a1 + 8 * v3);
  if (v38)
  {
    *(void *)int v40 = *v38;
    *uint64_t v38 = v40;
  }
  else
  {
    *(void *)int v40 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v40;
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v40)
    {
      unint64_t v39 = *(void *)(*(void *)v40 + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v39 >= v11) {
          v39 %= v11;
        }
      }
      else
      {
        v39 &= v11 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v39) = v40;
    }
  }
  ++*(void *)(a1 + 24);
}

void sub_242A548A4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,unsigned int>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,unsigned int>,void *>>>>::~unique_ptr[abi:nn180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::load(uint64_t a1, uint64_t **a2, uint64_t **a3, size_t *a4, int a5, uint64_t *a6, void *a7, int a8)
{
  *(_OWORD *)__uint64_t n = 0u;
  *(_OWORD *)v339 = 0u;
  float v340 = 1.0;
  long long v341 = 0u;
  long long v342 = 0u;
  int v343 = 1065353216;
  unint64_t v344 = 0;
  memset(v345, 0, 12);
  unint64_t v10 = *a2;
  *(void *)int v325 = a2[1];
  if (*a2 != *(uint64_t **)v325)
  {
    unint64_t v11 = 0;
    unsigned int v12 = 0;
    unsigned int v13 = 0;
    while (1)
    {
      uint64_t v19 = *v10;
      uint64_t v20 = *(void **)(*v10 + 248);
      if (v20)
      {
        do
        {
          std::__hash_table<std::__hash_value_type<std::string,AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::ExternalSymbolInfo>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::ExternalSymbolInfo>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::ExternalSymbolInfo>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::ExternalSymbolInfo>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::ExternalSymbolInfo> const&>((uint64_t)&v341, (uint64_t)(v20 + 2), (uint64_t)(v20 + 2));
          uint64_t v20 = (void *)*v20;
        }
        while (v20);
        unint64_t v11 = __n[1];
      }
      int v330 = (v12 + *(_DWORD *)(v19 + 480) - 1) & -*(_DWORD *)(v19 + 480);
      uint64_t v21 = v10[1];
      uint64_t v22 = v10[4];
      uint64_t v327 = v10[7];
      size_t v23 = *(void *)(v19 + 32);
      if (!v11) {
        goto LABEL_35;
      }
      uint8x8_t v24 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
      v24.i16[0] = vaddlv_u8(v24);
      if (v24.u32[0] > 1uLL)
      {
        size_t v8 = *(void *)(v19 + 32);
        if (v23 >= v11) {
          size_t v8 = v23 % v11;
        }
      }
      else
      {
        size_t v8 = (v11 - 1) & v23;
      }
      long long v25 = *(void **)(__n[0] + 8 * v8);
      if (!v25 || (uint64_t v26 = (void *)*v25) == 0)
      {
LABEL_35:
        float v29 = operator new(0x38uLL);
        *float v29 = 0;
        v29[1] = v23;
        v29[2] = v23;
        v29[3] = v21;
        v29[4] = v22;
        void v29[5] = v327;
        int v14 = v330;
        *((_DWORD *)v29 + 12) = v330;
        float v30 = (float)((unint64_t)v339[1] + 1);
        if (!v11 || (float)(v340 * (float)v11) < v30)
        {
          BOOL v31 = (v11 & (v11 - 1)) != 0;
          if (v11 < 3) {
            BOOL v31 = 1;
          }
          unint64_t v32 = v31 | (2 * v11);
          unint64_t v33 = vcvtps_u32_f32(v30 / v340);
          if (v32 <= v33) {
            size_t prime = v33;
          }
          else {
            size_t prime = v32;
          }
          if (prime == 1)
          {
            size_t prime = 2;
          }
          else if ((prime & (prime - 1)) != 0)
          {
            size_t prime = std::__next_prime(prime);
            unint64_t v11 = __n[1];
          }
          if (prime > v11) {
            goto LABEL_47;
          }
          if (prime < v11)
          {
            unint64_t v35 = vcvtps_u32_f32((float)(unint64_t)v339[1] / v340);
            if (v11 < 3 || (uint8x8_t v36 = (uint8x8_t)vcnt_s8((int8x8_t)v11), v36.i16[0] = vaddlv_u8(v36), v36.u32[0] > 1uLL))
            {
              unint64_t v35 = std::__next_prime(v35);
            }
            else
            {
              uint64_t v37 = 1 << -(char)__clz(v35 - 1);
              if (v35 >= 2) {
                unint64_t v35 = v37;
              }
            }
            if (prime <= v35) {
              size_t prime = v35;
            }
            if (prime < v11) {
LABEL_47:
            }
              std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::__do_rehash<true>((uint64_t)__n, prime);
          }
          unint64_t v11 = __n[1];
          if ((__n[1] & (__n[1] - 1)) != 0)
          {
            if (v23 >= __n[1]) {
              size_t v8 = v23 % __n[1];
            }
            else {
              size_t v8 = v23;
            }
          }
          else
          {
            size_t v8 = (__n[1] - 1) & v23;
          }
        }
        size_t v38 = __n[0];
        unint64_t v39 = *(void **)(__n[0] + 8 * v8);
        if (v39)
        {
          *float v29 = *v39;
          goto LABEL_71;
        }
        *float v29 = v339[0];
        v339[0] = v29;
        *(void *)(v38 + 8 * v8) = v339;
        if (*v29)
        {
          unint64_t v40 = *(void *)(*v29 + 8);
          if ((v11 & (v11 - 1)) != 0)
          {
            if (v40 >= v11) {
              v40 %= v11;
            }
          }
          else
          {
            v40 &= v11 - 1;
          }
          unint64_t v39 = (void *)(__n[0] + 8 * v40);
LABEL_71:
          *unint64_t v39 = v29;
        }
        ++v339[1];
        int v15 = *(_DWORD *)(v19 + 184);
        if (!v15) {
          goto LABEL_73;
        }
LABEL_4:
        unint64_t v16 = (*(_DWORD *)(v19 + 40) + v15);
        if (v344 > v16) {
          unint64_t v16 = v344;
        }
        unint64_t v344 = v16;
        goto LABEL_7;
      }
      if (v24.u32[0] < 2uLL)
      {
        while (1)
        {
          uint64_t v28 = v26[1];
          if (v28 == v23)
          {
            if (v26[2] == v23) {
              goto LABEL_3;
            }
          }
          else if ((v28 & (v11 - 1)) != v8)
          {
            goto LABEL_35;
          }
          uint64_t v26 = (void *)*v26;
          if (!v26) {
            goto LABEL_35;
          }
        }
      }
      while (1)
      {
        unint64_t v27 = v26[1];
        if (v27 == v23) {
          break;
        }
        if (v27 >= v11) {
          v27 %= v11;
        }
        if (v27 != v8) {
          goto LABEL_35;
        }
LABEL_25:
        uint64_t v26 = (void *)*v26;
        if (!v26) {
          goto LABEL_35;
        }
      }
      if (v26[2] != v23) {
        goto LABEL_25;
      }
LABEL_3:
      int v14 = v330;
      int v15 = *(_DWORD *)(v19 + 184);
      if (v15) {
        goto LABEL_4;
      }
LABEL_73:
      if (*(unsigned char *)(v19 + 176)) {
        goto LABEL_4;
      }
LABEL_7:
      int v17 = *(_DWORD *)(v19 + 476);
      unsigned int v12 = v17 + v14;
      if (v13 <= *(_DWORD *)(v19 + 472)) {
        unsigned int v13 = *(_DWORD *)(v19 + 472);
      }
      BOOL v49 = v17 == 0;
      int v18 = v345[0];
      if (!v49) {
        int v18 = LODWORD(v345[0]) + 1;
      }
      LODWORD(v345[0]) = v18;
      v10 += 10;
      if (v10 == *(uint64_t **)v325) {
        goto LABEL_76;
      }
    }
  }
  unsigned int v13 = 0;
  unsigned int v12 = 0;
LABEL_76:
  if (v12 <= v13) {
    unsigned int v41 = v13;
  }
  else {
    unsigned int v41 = v12;
  }
  HIDWORD(v345[0]) = (v41 + 15) & 0xFFFFFFF0;
  LODWORD(v345[1]) = HIDWORD(v345[0]) + a5;
  size_t v43 = *a4;
  size_t v42 = a4[1];
  if (*a4 == v42)
  {
    int v44 = a8;
  }
  else
  {
    int v44 = a8;
    do
    {
      AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::RuntimeState::operator=(*(void *)(v43 + 80), *(uint64_t **)(v43 + 88));
      uint64_t v45 = *(void *)(v43 + 80);
      *(void *)(v45 + 208) = v344;
      *(_DWORD *)(v45 + 92) = v345[0];
      *(void *)(v45 + 84) = *(void *)((char *)v345 + 4);
      v43 += 96;
    }
    while (v43 != v42);
    size_t v43 = *a4;
  }
  uint64_t v46 = *(void *)(v43 + 80);
  long long v47 = *(uint64_t **)(v43 + 88);
  *(unsigned char *)(v46 + 236) = v44;
  uint64_t v48 = *(void *)(v46 + 208);
  if (v48)
  {
    BOOL v49 = (uint64_t *)v46 != v47 && v48 == v47[26];
    if (!v49 || *((unsigned __int8 *)v47 + 236) != v44) {
      operator new();
    }
  }
  uint64_t v52 = *v47;
  uint64_t v51 = v47[1];
  if (v51) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v51 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v53 = *(std::__shared_weak_count **)(v46 + 8);
  *(void *)uint64_t v46 = v52;
  *(void *)(v46 + 8) = v51;
  if (v53 && !atomic_fetch_add(&v53->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
    std::__shared_weak_count::__release_weak(v53);
    int v54 = *(_DWORD *)(v46 + 92);
    if (!v54) {
      goto LABEL_103;
    }
  }
  else
  {
    int v54 = *(_DWORD *)(v46 + 92);
    if (!v54) {
      goto LABEL_103;
    }
  }
  if ((uint64_t *)v46 == v47
    || v54 != *((_DWORD *)v47 + 23)
    || *(unsigned __int8 *)(v46 + 236) != *((unsigned __int8 *)v47 + 236))
  {
    operator new();
  }
LABEL_103:
  uint64_t v56 = v47[2];
  uint64_t v55 = v47[3];
  if (v55) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v55 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v57 = *(std::__shared_weak_count **)(v46 + 24);
  *(void *)(v46 + 16) = v56;
  *(void *)(v46 + 24) = v55;
  if (v57 && !atomic_fetch_add(&v57->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
    std::__shared_weak_count::__release_weak(v57);
  }
  size_t v58 = *a4;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a4[1] - *a4) >> 5) >= 2)
  {
    uint64_t v59 = 176;
    unint64_t v60 = 1;
    do
    {
      size_t v61 = *(uint64_t **)(v58 + 80);
      uint64_t v62 = *(void **)(v58 + v59);
      uint64_t v64 = *v61;
      uint64_t v63 = v61[1];
      if (v63) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v63 + 8), 1uLL, memory_order_relaxed);
      }
      BOOL v65 = (std::__shared_weak_count *)v62[1];
      void *v62 = v64;
      v62[1] = v63;
      if (v65 && !atomic_fetch_add(&v65->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
        std::__shared_weak_count::__release_weak(v65);
      }
      uint64_t v66 = *(void *)(*a4 + 80);
      uint64_t v67 = *(void *)(v58 + v59);
      uint64_t v69 = *(void *)(v66 + 16);
      uint64_t v68 = *(void *)(v66 + 24);
      if (v68) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v68 + 8), 1uLL, memory_order_relaxed);
      }
      unint64_t v70 = *(std::__shared_weak_count **)(v67 + 24);
      *(void *)(v67 + 16) = v69;
      *(void *)(v67 + 24) = v68;
      if (v70 && !atomic_fetch_add(&v70->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
        std::__shared_weak_count::__release_weak(v70);
      }
      ++v60;
      size_t v58 = *a4;
      v59 += 96;
    }
    while (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a4[1] - *a4) >> 5) > v60);
  }
  uint8x8_t v71 = *(int8x16_t **)(v58 + 80);
  uint64_t v72 = v71->i64[0];
  if (v71->i64[0])
  {
    uint64_t v310 = *(void *)(v72 + 64);
    uint64_t v303 = *(void *)(v72 + 56);
    uint64_t v305 = v71[13].i64[0];
    uint64_t v73 = v71[1].i64[0];
    if (v73)
    {
LABEL_123:
      uint64_t v306 = *(void *)(v73 + 64);
      uint64_t v304 = *(void *)(v73 + 56);
      uint64_t v302 = 8 * (v71[5].i32[3] + 2);
      goto LABEL_126;
    }
  }
  else
  {
    uint64_t v305 = 0;
    uint64_t v310 = 0;
    uint64_t v303 = 0;
    uint64_t v73 = v71[1].i64[0];
    if (v73) {
      goto LABEL_123;
    }
  }
  uint64_t v302 = 0;
  uint64_t v306 = 0;
  uint64_t v304 = 0;
LABEL_126:
  unint64_t v74 = *a3;
  int v331 = a3[1];
  if (*a3 == v331)
  {
LABEL_168:
    unint64_t v95 = (uint64_t *)v342;
    if (!(void)v342) {
      goto LABEL_208;
    }
    while (*((_DWORD *)v95 + 18) != 5)
    {
LABEL_170:
      unint64_t v95 = (uint64_t *)*v95;
      if (!v95) {
        goto LABEL_208;
      }
    }
    unint64_t v96 = v95[11];
    if (v96) {
      v95[5] = 8 * __clz(__rbit64(v96));
    }
    unint64_t v97 = v95[12];
    if (v97)
    {
      unsigned int v98 = __clz(__rbit64(v97));
      char v99 = 0x80 - v98;
      if (((0x80 - (_BYTE)v98) & 0x80) == 0)
      {
LABEL_176:
        unint64_t v100 = v71[16].u64[0];
        if (v98 > 0x40)
        {
          int8x8_t v101 = (int8x8_t)(v100 << v99);
          unint64_t v102 = (((-1 << v99) & v100) >> v99) | (v71[16].i64[1] << v99);
        }
        else
        {
          int8x8_t v101 = 0;
          unint64_t v102 = v100 << v99;
        }
LABEL_182:
        unint64_t v104 = v71[15].u64[1];
        int v105 = 512 - 8 * __clz(v104);
        uint8x8_t v106 = (uint8x8_t)vcnt_s8(v101);
        v106.i16[0] = vaddlv_u8(v106);
        __int32 v107 = v106.i32[0];
        uint8x8_t v108 = (uint8x8_t)vcnt_s8((int8x8_t)v102);
        v108.i16[0] = vaddlv_u8(v108);
        __int32 v109 = v107 + v108.i32[0];
        if (v104) {
          int v110 = v105;
        }
        else {
          int v110 = 0;
        }
        v95[5] = (v110 + 8 * v109);
        goto LABEL_186;
      }
    }
    else
    {
      unint64_t v103 = v95[13];
      if (!v103)
      {
LABEL_186:
        unint64_t v111 = v95[14];
        if (v111)
        {
          int32x2_t v112 = vmovn_s64((int64x2_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(v71[16])))));
          unsigned __int32 v113 = vadd_s32(vdup_lane_s32(v112, 1), v112).u32[0];
          unint64_t v114 = v71[15].u64[1];
          int v115 = 512 - 8 * __clz(v114);
          if (v114) {
            int v116 = v115;
          }
          else {
            int v116 = 0;
          }
          int v117 = v116 + 8 * v113;
          unint64_t v118 = __clz(__rbit64(v111));
          uint8x8_t v119 = (uint8x8_t)vcnt_s8((int8x8_t)(v71[17].i64[0] << -(char)v118));
          v119.i16[0] = vaddlv_u8(v119);
          if (v118) {
            __int32 v120 = 8 * v119.i32[0];
          }
          else {
            __int32 v120 = 0;
          }
          v95[5] = (v117 + v120);
        }
        unint64_t v121 = v95[15];
        if (v121)
        {
          unint64_t v122 = __clz(__rbit64(v121));
          unint64_t v123 = v71[15].u64[1];
          int v124 = 512 - 8 * __clz(v123);
          uint64x2_t v126 = vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(v71[16]))));
          __int32 v125 = v126.i32[0];
          *(int8x8_t *)v126.i8 = vcnt_s8(*(int8x8_t *)v71[17].i8);
          v126.i16[0] = vaddlv_u8(*(uint8x8_t *)v126.i8);
          if (v123) {
            int v127 = v124;
          }
          else {
            int v127 = 0;
          }
          int v128 = v127 + 8 * (v125 + v126.i32[0] + v126.i32[2]);
          uint8x8_t v129 = (uint8x8_t)vcnt_s8((int8x8_t)(v71[17].i64[1] << -(char)v122));
          v129.i16[0] = vaddlv_u8(v129);
          if (v122) {
            __int32 v130 = 4 * v129.i32[0];
          }
          else {
            __int32 v130 = 0;
          }
          v95[5] = (v128 + v130);
        }
        goto LABEL_170;
      }
      unsigned int v98 = __clz(__rbit64(v103)) | 0x40;
      char v99 = 0x80 - v98;
      if (((0x80 - (_BYTE)v98) & 0x80) == 0) {
        goto LABEL_176;
      }
    }
    unint64_t v102 = 0;
    int8x8_t v101 = 0;
    goto LABEL_182;
  }
  while (1)
  {
    unint64_t v75 = (int8x16_t *)*v74;
    uint64_t v77 = *(void *)(*v74 + 312);
    uint64_t v76 = *(void *)(*v74 + 320);
    if (v77 != v76) {
      break;
    }
    uint64_t v88 = v71[15].i64[1];
    int8x16_t v89 = v71[16];
    uint64_t v91 = v71[17].i64[0];
    uint64_t v92 = v71[17].i64[1];
LABEL_167:
    v71[15].i64[1] = v88 | v75[30].i64[1];
    v71[16] = vorrq_s8(v89, v75[31]);
    v71[17].i64[0] = v91 | v75[32].i64[0];
    v71[17].i64[1] = v92 | v75[32].i64[1];
    v74 += 10;
    if (v74 == v331) {
      goto LABEL_168;
    }
  }
  while (1)
  {
    uint64_t v78 = (_OWORD *)(v77 + 8);
    size_t v58 = *(unsigned __int8 *)(v77 + 31);
    if (*(char *)(v77 + 31) < 0)
    {
      uint64_t v79 = *(char **)(v77 + 8);
      uint64_t v80 = *(void *)(v77 + 16);
      if (v80 < 19) {
        goto LABEL_153;
      }
    }
    else
    {
      uint64_t v79 = (char *)(v77 + 8);
      uint64_t v80 = *(unsigned __int8 *)(v77 + 31);
      if ((unint64_t)v80 < 0x13) {
        goto LABEL_153;
      }
    }
    int64_t v81 = &v79[v80];
    unint64_t v82 = v79;
    while (1)
    {
      int64_t v83 = (char *)memchr(v82, 46, v80 - 18);
      if (!v83) {
        goto LABEL_153;
      }
      BOOL v84 = *(void *)v83 == 0x5349565F4C544D2ELL && *((void *)v83 + 1) == 0x5F4E465F454C4249;
      if (v84 && *(void *)(v83 + 11) == 0x4645525F4E465F45) {
        break;
      }
      unint64_t v82 = v83 + 1;
      uint64_t v80 = v81 - (unsigned char *)v82;
      if (v81 - (unsigned char *)v82 < 19) {
        goto LABEL_153;
      }
    }
    if (v83 != v81 && v83 - v79 != -1)
    {
      if ((v58 & 0x80) != 0)
      {
        uint64_t v78 = *(_OWORD **)(v77 + 8);
        size_t v58 = *(void *)(v77 + 16);
      }
      if (v58 >= v83 - v79) {
        size_t v58 = v83 - v79;
      }
      if (v58 > 0x7FFFFFFFFFFFFFF7) {
        abort();
      }
      if (v58 >= 0x17)
      {
        uint64_t v93 = (v58 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v58 | 7) != 0x17) {
          uint64_t v93 = v58 | 7;
        }
        uint64_t v94 = v93 + 1;
        int v86 = operator new(v93 + 1);
        *(void *)&__dst[8] = v58;
        *(void *)&unsigned char __dst[16] = v94 | 0x8000000000000000;
        *(void *)long long __dst = v86;
      }
      else
      {
        __dst[23] = v58;
        int v86 = __dst;
        if (!v58) {
          goto LABEL_165;
        }
      }
      memmove(v86, v78, v58);
LABEL_165:
      v86[v58] = 0;
      goto LABEL_156;
    }
LABEL_153:
    if ((v58 & 0x80) != 0)
    {
      std::string::__init_copy_ctor_external((std::string *)__dst, *(const std::string::value_type **)(v77 + 8), *(void *)(v77 + 16));
    }
    else
    {
      *(_OWORD *)long long __dst = *v78;
      *(void *)&unsigned char __dst[16] = *(void *)(v77 + 24);
    }
LABEL_156:
    char v87 = (int8x16_t *)std::__hash_table<std::__hash_value_type<std::string,AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::ExternalSymbolInfo>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::ExternalSymbolInfo>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::ExternalSymbolInfo>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::ExternalSymbolInfo>>>::find<std::string>(&v341, (uint64_t)__dst);
    if ((__dst[23] & 0x80000000) != 0) {
      operator delete(*(void **)__dst);
    }
    if (!v87) {
      break;
    }
    uint64_t v88 = v71[15].i64[1] | v87[5].i64[1];
    v71[15].i64[1] = v88;
    int8x16_t v89 = vorrq_s8(v71[16], v87[6]);
    v71[16] = v89;
    uint64_t v90 = v71[17].i64[1];
    uint64_t v91 = v71[17].i64[0] | v87[7].i64[0];
    v71[17].i64[0] = v91;
    uint64_t v92 = v90 | v87[7].i64[1];
    v71[17].i64[1] = v92;
    v77 += 40;
    if (v77 == v76) {
      goto LABEL_167;
    }
  }
  if (a7)
  {
    __int32 v131 = NSString;
    AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::createErrorString((uint64_t)__dst, *a3, a3[1], &v341);
    uint64_t v132 = __dst[23] >= 0 ? __dst : *(unsigned char **)__dst;
    *a7 = [v131 stringWithUTF8String:v132];
    if ((__dst[23] & 0x80000000) != 0) {
      operator delete(*(void **)__dst);
    }
  }
LABEL_208:
  size_t v133 = *a4;
  size_t v134 = a4[1];
  if (*a4 == v134)
  {
    uint64_t v240 = *(void *)(v133 + 80);
    *(unsigned char *)(v240 + 200) = 0;
    *(unsigned char *)(v240 + 204) = 0;
    goto LABEL_477;
  }
  BOOL v135 = 0;
  BOOL v322 = 0;
  unsigned __int8 v324 = (size_t *)(a6 + 2);
  BOOL v136 = 1;
  size_t v308 = a4[1];
  while (2)
  {
    uint64_t v139 = *(void *)(v133 + 80);
    if (!v136)
    {
      BOOL v136 = 0;
      goto LABEL_211;
    }
    BOOL v315 = v135;
    uint64_t v140 = *(void *)(v133 + 88);
    *(_OWORD *)v335 = 0u;
    *(_OWORD *)long long __p = 0u;
    float v337 = v340;
    size_t v141 = __n[1];
    if (__n[1] == 1)
    {
      size_t v141 = 2;
      goto LABEL_215;
    }
    if ((__n[1] & (__n[1] - 1)) != 0)
    {
      size_t v141 = std::__next_prime(__n[1]);
      BOOL v223 = v335[1];
      BOOL v224 = (void *)v141 >= v335[1];
      if ((void *)v141 > v335[1]) {
        goto LABEL_215;
      }
    }
    else
    {
      BOOL v223 = 0;
      BOOL v224 = 1;
      if (__n[1]) {
        goto LABEL_215;
      }
    }
    if (!v224)
    {
      unint64_t v232 = vcvtps_u32_f32((float)(unint64_t)__p[1] / v337);
      if ((unint64_t)v223 < 3
        || (uint8x8_t v233 = (uint8x8_t)vcnt_s8((int8x8_t)v223), v233.i16[0] = vaddlv_u8(v233), v233.u32[0] > 1uLL))
      {
        unint64_t v232 = std::__next_prime(v232);
      }
      else
      {
        uint64_t v234 = 1 << -(char)__clz(v232 - 1);
        if (v232 >= 2) {
          unint64_t v232 = v234;
        }
      }
      if (v141 <= v232) {
        size_t v141 = v232;
      }
      if (v141 < (unint64_t)v223) {
LABEL_215:
      }
        std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::__do_rehash<true>((uint64_t)v335, v141);
    }
    size_t v314 = v133;
    BOOL v142 = v339[0];
    if (v339[0])
    {
      unint64_t v143 = (unint64_t)v335[1];
      do
      {
        size_t v144 = v142[2];
        if (v143)
        {
          uint8x8_t v145 = (uint8x8_t)vcnt_s8((int8x8_t)v143);
          v145.i16[0] = vaddlv_u8(v145);
          if (v145.u32[0] > 1uLL)
          {
            size_t v58 = v142[2];
            if (v144 >= v143) {
              size_t v58 = v144 % v143;
            }
          }
          else
          {
            size_t v58 = (v143 - 1) & v144;
          }
          unsigned int v146 = (void *)*((void *)v335[0] + v58);
          if (v146)
          {
            unsigned int v147 = (void *)*v146;
            if (v147)
            {
              if (v145.u32[0] < 2uLL)
              {
                while (1)
                {
                  unint64_t v149 = v147[1];
                  if (v149 == v144)
                  {
                    if (v147[2] == v144) {
                      goto LABEL_276;
                    }
                  }
                  else if ((v149 & (v143 - 1)) != v58)
                  {
                    goto LABEL_238;
                  }
                  unsigned int v147 = (void *)*v147;
                  if (!v147) {
                    goto LABEL_238;
                  }
                }
              }
              do
              {
                unint64_t v148 = v147[1];
                if (v148 == v144)
                {
                  if (v147[2] == v144) {
                    goto LABEL_276;
                  }
                }
                else
                {
                  if (v148 >= v143) {
                    v148 %= v143;
                  }
                  if (v148 != v58) {
                    break;
                  }
                }
                unsigned int v147 = (void *)*v147;
              }
              while (v147);
            }
          }
        }
LABEL_238:
        uint64_t v150 = operator new(0x38uLL);
        void *v150 = 0;
        v150[1] = v144;
        long long v151 = *((_OWORD *)v142 + 1);
        long long v152 = *((_OWORD *)v142 + 2);
        v150[6] = v142[6];
        *((_OWORD *)v150 + 1) = v151;
        *((_OWORD *)v150 + 2) = v152;
        float v153 = (float)((unint64_t)__p[1] + 1);
        if (!v143 || (float)(v337 * (float)v143) < v153)
        {
          BOOL v154 = (v143 & (v143 - 1)) != 0;
          if (v143 < 3) {
            BOOL v154 = 1;
          }
          unint64_t v155 = v154 | (2 * v143);
          unint64_t v156 = vcvtps_u32_f32(v153 / v337);
          if (v155 <= v156) {
            size_t v157 = v156;
          }
          else {
            size_t v157 = v155;
          }
          if (v157 == 1)
          {
            size_t v157 = 2;
          }
          else if ((v157 & (v157 - 1)) != 0)
          {
            size_t v157 = std::__next_prime(v157);
            unint64_t v143 = (unint64_t)v335[1];
          }
          if (v157 > v143) {
            goto LABEL_250;
          }
          if (v157 < v143)
          {
            unint64_t v158 = vcvtps_u32_f32((float)(unint64_t)__p[1] / v337);
            if (v143 < 3
              || (uint8x8_t v159 = (uint8x8_t)vcnt_s8((int8x8_t)v143), v159.i16[0] = vaddlv_u8(v159), v159.u32[0] > 1uLL))
            {
              unint64_t v158 = std::__next_prime(v158);
            }
            else
            {
              uint64_t v160 = 1 << -(char)__clz(v158 - 1);
              if (v158 >= 2) {
                unint64_t v158 = v160;
              }
            }
            if (v157 <= v158) {
              size_t v157 = v158;
            }
            if (v157 < v143) {
LABEL_250:
            }
              std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::__do_rehash<true>((uint64_t)v335, v157);
          }
          unint64_t v143 = (unint64_t)v335[1];
          if (((unint64_t)v335[1] & ((unint64_t)v335[1] - 1)) != 0)
          {
            if ((void *)v144 >= v335[1]) {
              size_t v58 = v144 % (size_t)v335[1];
            }
            else {
              size_t v58 = v144;
            }
          }
          else
          {
            size_t v58 = ((size_t)v335[1] - 1) & v144;
          }
        }
        int v161 = v335[0];
        int v162 = (void *)*((void *)v335[0] + v58);
        if (v162)
        {
          void *v150 = *v162;
        }
        else
        {
          void *v150 = __p[0];
          __p[0] = v150;
          v161[v58] = __p;
          if (!*v150) {
            goto LABEL_275;
          }
          unint64_t v163 = *(void *)(*v150 + 8);
          if ((v143 & (v143 - 1)) != 0)
          {
            if (v163 >= v143) {
              v163 %= v143;
            }
          }
          else
          {
            v163 &= v143 - 1;
          }
          int v162 = (char *)v335[0] + 8 * v163;
        }
        void *v162 = v150;
LABEL_275:
        ++__p[1];
LABEL_276:
        BOOL v142 = (void *)*v142;
      }
      while (v142);
    }
    int v164 = a3;
    if (v139 == v140) {
      int v164 = a2;
    }
    int v165 = *v164;
    BOOL v313 = v164[1];
    if (*v164 != v313)
    {
      BOOL v307 = v164;
      long long v166 = 0uLL;
      int v167 = 1024;
      while (1)
      {
        unsigned int v318 = v167;
        int v316 = v165;
        uint64_t v168 = *v165;
        uint64_t v169 = *(void *)(*v165 + 312);
        uint64_t v328 = *(void *)(v168 + 320);
        if (v169 != v328) {
          break;
        }
        unsigned __int32 v170 = 0;
        unsigned int v183 = *(_DWORD *)(v139 + 48);
        if (*(void *)(v168 + 408))
        {
LABEL_420:
          if (v183 <= *(_DWORD *)(v168 + 392)) {
            unsigned int v183 = *(_DWORD *)(v168 + 392);
          }
          *(_DWORD *)(v139 + 48) = v183;
          if (v170 <= *(_DWORD *)(v168 + 396)) {
            unsigned __int32 v170 = *(_DWORD *)(v168 + 396);
          }
          *(uint32x2_t *)&long long v166 = vmax_u32(*(uint32x2_t *)&v166, *(uint32x2_t *)(v168 + 420));
        }
LABEL_425:
        unsigned __int32 v219 = *(_DWORD *)(v168 + 56);
        if (v170 > v219) {
          unsigned __int32 v219 = v170;
        }
        *(uint32x2_t *)&long long v166 = vmax_u32(*(uint32x2_t *)&v166, *(uint32x2_t *)(v168 + 60));
        long long v333 = v166;
        unsigned int v220 = *(_DWORD *)(v168 + 484);
        int v167 = v318;
        if (v220 >= v318) {
          int v221 = v318;
        }
        else {
          int v221 = *(_DWORD *)(v168 + 484);
        }
        if (v220) {
          int v167 = v221;
        }
        if (v183 <= *(_DWORD *)(v168 + 48)) {
          unsigned int v183 = *(_DWORD *)(v168 + 48);
        }
        *(_DWORD *)(v139 + 48) = v183;
        *(unsigned char *)(v139 + 200) |= *(unsigned char *)(v168 + 172);
        *(unsigned char *)(v139 + 203) |= *(unsigned char *)(v168 + 175);
        *(unsigned char *)(v139 + 202) |= *(unsigned char *)(v168 + 174);
        *(unsigned char *)(v139 + 204) |= *(unsigned char *)(v168 + 177);
        v222.i32[0] = v219;
        v222.i32[1] = *(_DWORD *)(v168 + 52);
        *(uint32x2_t *)(v139 + 76) = vmax_u32(*(uint32x2_t *)(v139 + 76), v222);
        AGX::RayPayloadSizeAlignImpl<AGX::HAL200::Classes>::merge((unsigned int *)(v139 + 96), (unsigned int *)(v168 + 68));
        long long v166 = v333;
        int v165 = v316 + 10;
        if (v316 + 10 == v313) {
          goto LABEL_442;
        }
      }
      unsigned __int32 v170 = 0;
      while (1)
      {
        size_t v58 = v169 + 8;
        size_t v171 = *(unsigned __int8 *)(v169 + 31);
        long long v332 = v166;
        if (*(char *)(v169 + 31) < 0)
        {
          int v172 = *(char **)(v169 + 8);
          uint64_t v173 = *(void *)(v169 + 16);
          if (v173 < 19) {
            goto LABEL_309;
          }
        }
        else
        {
          int v172 = (char *)(v169 + 8);
          uint64_t v173 = *(unsigned __int8 *)(v169 + 31);
          if ((unint64_t)v173 < 0x13) {
            goto LABEL_309;
          }
        }
        int v174 = &v172[v173];
        int v175 = v172;
        while (1)
        {
          int v176 = (char *)memchr(v175, 46, v173 - 18);
          if (!v176) {
            goto LABEL_309;
          }
          BOOL v177 = *(void *)v176 == 0x5349565F4C544D2ELL && *((void *)v176 + 1) == 0x5F4E465F454C4249;
          if (v177 && *(void *)(v176 + 11) == 0x4645525F4E465F45) {
            break;
          }
          int v175 = v176 + 1;
          uint64_t v173 = v174 - (unsigned char *)v175;
          if (v174 - (unsigned char *)v175 < 19) {
            goto LABEL_309;
          }
        }
        if (v176 != v174 && v176 - v172 != -1)
        {
          if ((v171 & 0x80) != 0)
          {
            size_t v58 = *(void *)(v169 + 8);
            size_t v171 = *(void *)(v169 + 16);
          }
          if (v171 >= v176 - v172) {
            size_t v179 = v176 - v172;
          }
          else {
            size_t v179 = v171;
          }
          if (v179 > 0x7FFFFFFFFFFFFFF7) {
            abort();
          }
          if (v179 >= 0x17)
          {
            uint64_t v218 = (v179 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v179 | 7) != 0x17) {
              uint64_t v218 = v179 | 7;
            }
            size_t v171 = v218 + 1;
            int v180 = operator new(v218 + 1);
            *(void *)&__dst[8] = v179;
            *(void *)&unsigned char __dst[16] = v171 | 0x8000000000000000;
            *(void *)long long __dst = v180;
          }
          else
          {
            __dst[23] = v179;
            int v180 = __dst;
            if (!v179) {
              goto LABEL_418;
            }
          }
          memmove(v180, (const void *)v58, v179);
LABEL_418:
          v180[v179] = 0;
          goto LABEL_312;
        }
LABEL_309:
        if ((v171 & 0x80) != 0)
        {
          std::string::__init_copy_ctor_external((std::string *)__dst, *(const std::string::value_type **)(v169 + 8), *(void *)(v169 + 16));
        }
        else
        {
          *(_OWORD *)long long __dst = *(_OWORD *)v58;
          *(void *)&unsigned char __dst[16] = *(void *)(v169 + 24);
        }
LABEL_312:
        unint64_t v181 = std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::find<std::string>(&v341, (uint64_t)__dst);
        if ((__dst[23] & 0x80000000) != 0) {
          operator delete(*(void **)__dst);
        }
        if (!v181)
        {
          if (a7)
          {
            BOOL v230 = NSString;
            AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::createErrorString((uint64_t)__dst, *v307, v307[1], &v341);
            size_t v133 = v314;
            size_t v134 = v308;
            if (__dst[23] >= 0) {
              int v231 = __dst;
            }
            else {
              int v231 = *(unsigned char **)__dst;
            }
            *a7 = [v230 stringWithUTF8String:v231];
            BOOL v135 = v315;
            if ((__dst[23] & 0x80000000) != 0) {
              operator delete(*(void **)__dst);
            }
            BOOL v136 = 0;
            goto LABEL_465;
          }
          goto LABEL_463;
        }
        if (v170 <= *((_DWORD *)v181 + 13)) {
          unsigned __int32 v170 = *((_DWORD *)v181 + 13);
        }
        uint32x2_t v182 = *(uint32x2_t *)((char *)v181 + 76);
        unsigned int v183 = *(_DWORD *)(v139 + 48);
        if (v183 <= *((_DWORD *)v181 + 12)) {
          unsigned int v183 = *((_DWORD *)v181 + 12);
        }
        *(_DWORD *)(v139 + 48) = v183;
        *(unsigned char *)(v139 + 200) |= *((unsigned char *)v181 + 56);
        *(unsigned char *)(v139 + 204) |= *((unsigned char *)v181 + 60);
        *(unsigned char *)(v139 + 202) |= *((unsigned char *)v181 + 58);
        *(unsigned char *)(v139 + 203) |= *((unsigned char *)v181 + 59);
        unsigned int v184 = *(_DWORD *)(v139 + 80);
        if (v184 <= *((_DWORD *)v181 + 21)) {
          unsigned int v184 = *((_DWORD *)v181 + 21);
        }
        *(_DWORD *)(v139 + 80) = v184;
        if (a6)
        {
          unint64_t v185 = v181[8];
          unint64_t v186 = a6[1];
          if (v186)
          {
            uint8x8_t v187 = (uint8x8_t)vcnt_s8((int8x8_t)v186);
            v187.i16[0] = vaddlv_u8(v187);
            if (v187.u32[0] > 1uLL)
            {
              size_t v171 = v181[8];
              if (v185 >= v186) {
                size_t v171 = v185 % v186;
              }
            }
            else
            {
              size_t v171 = (v186 - 1) & v185;
            }
            BOOL v188 = *(void **)(*a6 + 8 * v171);
            if (v188)
            {
              unint64_t v189 = (void *)*v188;
              if (v189)
              {
                if (v187.u32[0] < 2uLL)
                {
                  while (1)
                  {
                    uint64_t v191 = v189[1];
                    if (v191 == v185)
                    {
                      if (v189[2] == v185) {
                        goto LABEL_402;
                      }
                    }
                    else if ((v191 & (v186 - 1)) != v171)
                    {
                      goto LABEL_342;
                    }
                    unint64_t v189 = (void *)*v189;
                    if (!v189) {
                      goto LABEL_342;
                    }
                  }
                }
                do
                {
                  unint64_t v190 = v189[1];
                  if (v190 == v185)
                  {
                    if (v189[2] == v185) {
                      goto LABEL_402;
                    }
                  }
                  else
                  {
                    if (v190 >= v186) {
                      v190 %= v186;
                    }
                    if (v190 != v171) {
                      break;
                    }
                  }
                  unint64_t v189 = (void *)*v189;
                }
                while (v189);
              }
            }
          }
LABEL_342:
          size_t v58 = (size_t)operator new(0x18uLL);
          *(void *)size_t v58 = 0;
          *(void *)(v58 + 8) = v185;
          *(void *)(v58 + 16) = v181[8];
          float v192 = (float)(unint64_t)(a6[3] + 1);
          float v193 = *((float *)a6 + 8);
          if (!v186 || (float)(v193 * (float)v186) < v192)
          {
            BOOL v194 = (v186 & (v186 - 1)) != 0;
            if (v186 < 3) {
              BOOL v194 = 1;
            }
            unint64_t v195 = v194 | (2 * v186);
            unint64_t v196 = vcvtps_u32_f32(v192 / v193);
            if (v195 <= v196) {
              size_t v197 = v196;
            }
            else {
              size_t v197 = v195;
            }
            if (v197 == 1)
            {
              size_t v197 = 2;
            }
            else if ((v197 & (v197 - 1)) != 0)
            {
              size_t v197 = std::__next_prime(v197);
              unint64_t v186 = a6[1];
            }
            if (v197 > v186)
            {
LABEL_354:
              if (v197 >> 61) {
                std::__throw_bad_array_new_length[abi:nn180100]();
              }
              unint64_t v198 = operator new(8 * v197);
              uint64_t v199 = (void *)*a6;
              *a6 = (uint64_t)v198;
              if (v199) {
                operator delete(v199);
              }
              uint64_t v200 = 0;
              a6[1] = v197;
              do
                *(void *)(*a6 + 8 * v200++) = 0;
              while (v197 != v200);
              BOOL v201 = (void *)*v324;
              if (!*v324) {
                goto LABEL_378;
              }
              size_t v202 = v201[1];
              size_t v203 = v197 - 1;
              if ((v197 & (v197 - 1)) == 0)
              {
                size_t v204 = v202 & v203;
                *(void *)(*a6 + 8 * v204) = v324;
                for (unint64_t i = (void *)*v201; *v201; unint64_t i = (void *)*v201)
                {
                  size_t v206 = i[1] & v203;
                  if (v206 == v204)
                  {
                    BOOL v201 = i;
                  }
                  else if (*(void *)(*a6 + 8 * v206))
                  {
                    void *v201 = *i;
                    uint64_t v207 = 8 * v206;
                    *unint64_t i = **(void **)(*a6 + v207);
                    **(void **)(*a6 + v207) = i;
                  }
                  else
                  {
                    *(void *)(*a6 + 8 * v206) = v201;
                    BOOL v201 = i;
                    size_t v204 = v206;
                  }
                }
                goto LABEL_378;
              }
              if (v202 >= v197) {
                v202 %= v197;
              }
              *(void *)(*a6 + 8 * v202) = v324;
              BOOL v211 = (void *)*v201;
              if (!*v201)
              {
LABEL_378:
                unint64_t v186 = v197;
                goto LABEL_379;
              }
              while (2)
              {
                size_t v213 = v211[1];
                if (v213 >= v197) {
                  v213 %= v197;
                }
                if (v213 != v202)
                {
                  if (!*(void *)(*a6 + 8 * v213))
                  {
                    *(void *)(*a6 + 8 * v213) = v201;
LABEL_383:
                    BOOL v201 = v211;
                    BOOL v211 = (void *)*v211;
                    size_t v202 = v213;
                    if (!v211) {
                      goto LABEL_378;
                    }
                    continue;
                  }
                  void *v201 = *v211;
                  uint64_t v212 = 8 * v213;
                  void *v211 = **(void **)(*a6 + v212);
                  **(void **)(*a6 + v212) = v211;
                  BOOL v211 = v201;
                }
                break;
              }
              size_t v213 = v202;
              goto LABEL_383;
            }
            if (v197 < v186)
            {
              unint64_t v208 = vcvtps_u32_f32((float)(unint64_t)a6[3] / *((float *)a6 + 8));
              if (v186 < 3
                || (uint8x8_t v209 = (uint8x8_t)vcnt_s8((int8x8_t)v186), v209.i16[0] = vaddlv_u8(v209), v209.u32[0] > 1uLL))
              {
                unint64_t v208 = std::__next_prime(v208);
              }
              else
              {
                uint64_t v210 = 1 << -(char)__clz(v208 - 1);
                if (v208 >= 2) {
                  unint64_t v208 = v210;
                }
              }
              if (v197 <= v208) {
                size_t v197 = v208;
              }
              if (v197 >= v186)
              {
                unint64_t v186 = a6[1];
              }
              else
              {
                if (v197) {
                  goto LABEL_354;
                }
                BOOL v217 = (void *)*a6;
                *a6 = 0;
                if (v217) {
                  operator delete(v217);
                }
                unint64_t v186 = 0;
                a6[1] = 0;
              }
            }
LABEL_379:
            if ((v186 & (v186 - 1)) != 0)
            {
              if (v185 >= v186) {
                size_t v171 = v185 % v186;
              }
              else {
                size_t v171 = v185;
              }
            }
            else
            {
              size_t v171 = (v186 - 1) & v185;
            }
          }
          uint64_t v214 = *a6;
          uint64_t v215 = *(size_t **)(*a6 + 8 * v171);
          if (v215)
          {
            *(void *)size_t v58 = *v215;
            goto LABEL_400;
          }
          *(void *)size_t v58 = *v324;
          *unsigned __int8 v324 = v58;
          *(void *)(v214 + 8 * v171) = v324;
          if (*(void *)v58)
          {
            unint64_t v216 = *(void *)(*(void *)v58 + 8);
            if ((v186 & (v186 - 1)) != 0)
            {
              if (v216 >= v186) {
                v216 %= v186;
              }
            }
            else
            {
              v216 &= v186 - 1;
            }
            uint64_t v215 = (size_t *)(*a6 + 8 * v216);
LABEL_400:
            *uint64_t v215 = v58;
          }
          ++a6[3];
          unsigned int v183 = *(_DWORD *)(v139 + 48);
        }
LABEL_402:
        if (v183 >= 0x61)
        {
          if (a7)
          {
            BOOL v136 = 0;
            *a7 = @"Exceeds maximum temporary register allocation";
            goto LABEL_464;
          }
LABEL_463:
          BOOL v136 = 0;
          goto LABEL_464;
        }
        *((void *)&v166 + 1) = *((void *)&v332 + 1);
        *(uint32x2_t *)&long long v166 = vmax_u32(*(uint32x2_t *)&v332, v182);
        v169 += 40;
        if (v169 == v328)
        {
          if (*(void *)(v168 + 408)) {
            goto LABEL_420;
          }
          goto LABEL_425;
        }
      }
    }
    *(void *)&long long v166 = 0;
    int v167 = 1024;
LABEL_442:
    *(_DWORD *)(v139 + 232) = v167;
    int v226 = *(_DWORD *)(v139 + 68);
    unsigned int v225 = *(_DWORD *)(v139 + 72);
    unsigned int v227 = *(_DWORD *)(v139 + 60) * (v225 - 1);
    int v228 = *(_DWORD *)(v139 + 80);
    if (v227 <= *(_DWORD *)(v139 + 76) * v225) {
      unsigned int v227 = *(_DWORD *)(v139 + 76) * v225;
    }
    *(_DWORD *)(v139 + 52) = v227 + *(_DWORD *)(v139 + 56);
    unsigned int v229 = v226 + v228 * v225;
    *(_DWORD *)(v139 + 64) = v229;
    *(int32x2_t *)(v139 + 216) = vmla_s32(*(int32x2_t *)(v139 + 216), vdup_n_s32(v225), *(int32x2_t *)&v166);
    BOOL v136 = v229 >> 2 < 0xFF1;
    if (a7)
    {
      size_t v133 = v314;
      size_t v134 = v308;
      BOOL v135 = v315;
      if (v229 >> 2 >= 0xFF1)
      {
        BOOL v136 = 0;
        *a7 = @"Exceeds maximum interface register allocation";
      }
      goto LABEL_465;
    }
LABEL_464:
    size_t v133 = v314;
    size_t v134 = v308;
    BOOL v135 = v315;
LABEL_465:
    unsigned int v235 = __p[0];
    if (__p[0])
    {
      do
      {
        __int16 v236 = (void *)*v235;
        operator delete(v235);
        unsigned int v235 = v236;
      }
      while (v236);
    }
    BOOL v237 = v335[0];
    v335[0] = 0;
    if (v237) {
      operator delete(v237);
    }
LABEL_211:
    char v137 = *(unsigned char *)(v139 + 200) | v322;
    BOOL v322 = v137 != 0;
    char v138 = *(unsigned char *)(v139 + 204) | v135;
    BOOL v135 = v138 != 0;
    v133 += 96;
    if (v133 != v134) {
      continue;
    }
    break;
  }
  uint64_t v238 = *(void *)(*a4 + 80);
  *(unsigned char *)(v238 + 200) = v137;
  *(unsigned char *)(v238 + 204) = v138;
  if (!v136)
  {
    uint64_t v239 = 0;
    goto LABEL_604;
  }
LABEL_477:
  long long v349 = 0u;
  long long v350 = 0u;
  long long v347 = 0u;
  long long v348 = 0u;
  memset(__dst, 0, sizeof(__dst));
  unint64_t v351 = 0xFFFFFFFF00000001;
  uint64_t v352 = 1610612736;
  long long v353 = 0u;
  long long v354 = 0u;
  uint64_t v355 = 0;
  *(void *)&long long v241 = -1;
  *((void *)&v241 + 1) = -1;
  long long v356 = v241;
  long long v357 = v241;
  long long v358 = v241;
  int v364 = 0;
  int v359 = 0;
  char v360 = 0;
  uint64_t v362 = 0;
  uint64_t v361 = 0;
  *(void *)((char *)v363 + 5) = 0;
  v363[0] = 0;
  long long v366 = 0u;
  uint64_t v367 = 0;
  long long v365 = 0u;
  __int16 v242 = *a3;
  int v323 = a3[1];
  if (*a3 == v323)
  {
LABEL_577:
    if (v303 && v305)
    {
      uint64_t v283 = v310 + 1;
      uint64_t v284 = v305 - 1;
      do
      {
        do
        {
          uint64_t v285 = v283++;
          BOOL v224 = v284-- != 0;
        }
        while (v224);
      }
      while (v285 != v305 + v310);
    }
    if (v304 && v302)
    {
      uint64_t v286 = v302 - 8;
      uint64_t v287 = v306 + 8;
      do
      {
        do
        {
          uint64_t v288 = v286;
          uint64_t v289 = v287;
          v286 -= 8;
          v287 += 8;
        }
        while (v288);
      }
      while (v289 != v302 + v306);
    }
    uint64_t v239 = 1;
    BOOL v290 = (std::__shared_weak_count *)*((void *)&v347 + 1);
    if (!*((void *)&v347 + 1)) {
      goto LABEL_598;
    }
    goto LABEL_596;
  }
  unsigned int v320 = 1;
  while (1)
  {
    uint64_t v334 = *v242;
    int v243 = *(int **)(*v242 + 312);
    int v329 = *(int **)(*v242 + 320);
    if (v243 != v329) {
      break;
    }
LABEL_574:
    if (*(void *)(v334 + 408))
    {
      *(void *)(v306 + 8 * v320) = *(void *)(v334 + 384) + v242[1];
      *(void *)(v306 + 8 * ++v320) = 0;
    }
    v242 += 10;
    if (v242 == v323) {
      goto LABEL_577;
    }
  }
  uint64_t v326 = v334 + 184;
  while (2)
  {
    int v245 = v243 + 2;
    std::string::size_type v246 = *((unsigned __int8 *)v243 + 31);
    if (*((char *)v243 + 31) < 0)
    {
      int v247 = (char *)*((void *)v243 + 1);
      uint64_t v248 = *((void *)v243 + 2);
      if (v248 < 19) {
        goto LABEL_506;
      }
    }
    else
    {
      int v247 = (char *)(v243 + 2);
      uint64_t v248 = *((unsigned __int8 *)v243 + 31);
      if ((unint64_t)v248 < 0x13) {
        goto LABEL_506;
      }
    }
    BOOL v249 = &v247[v248];
    int v250 = v247;
    while (1)
    {
      int v251 = (char *)memchr(v250, 46, v248 - 18);
      if (!v251) {
        goto LABEL_506;
      }
      BOOL v252 = *(void *)v251 == 0x5349565F4C544D2ELL && *((void *)v251 + 1) == 0x5F4E465F454C4249;
      if (v252 && *(void *)(v251 + 11) == 0x4645525F4E465F45) {
        break;
      }
      int v250 = v251 + 1;
      uint64_t v248 = v249 - (unsigned char *)v250;
      if (v249 - (unsigned char *)v250 < 19) {
        goto LABEL_506;
      }
    }
    if (v251 != v249)
    {
      v254 = (char *)(v251 - v247);
      if (v251 - v247 != -1)
      {
        if ((v246 & 0x80) != 0)
        {
          __int16 v255 = (const void *)*((void *)v243 + 1);
          std::string::size_type v246 = *((void *)v243 + 2);
        }
        else
        {
          __int16 v255 = v243 + 2;
        }
        if (v246 >= (unint64_t)v254) {
          std::string::size_type v279 = (std::string::size_type)v254;
        }
        else {
          std::string::size_type v279 = v246;
        }
        if (v279 > 0x7FFFFFFFFFFFFFF7) {
          abort();
        }
        if (v279 >= 0x17)
        {
          uint64_t v281 = (v279 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v279 | 7) != 0x17) {
            uint64_t v281 = v279 | 7;
          }
          uint64_t v282 = v281 + 1;
          BOOL v280 = operator new(v281 + 1);
          v371.__r_.__value_.__l.__size_ = v279;
          v371.__r_.__value_.__r.__words[2] = v282 | 0x8000000000000000;
          v371.__r_.__value_.__r.__words[0] = (std::string::size_type)v280;
        }
        else
        {
          *((unsigned char *)&v371.__r_.__value_.__s + 23) = v279;
          BOOL v280 = &v371;
          if (!v279) {
            goto LABEL_573;
          }
        }
        memmove(v280, v255, v279);
LABEL_573:
        *((unsigned char *)v280 + v279) = 0;
        goto LABEL_509;
      }
    }
LABEL_506:
    if ((v246 & 0x80) != 0)
    {
      std::string::__init_copy_ctor_external(&v371, *((const std::string::value_type **)v243 + 1), *((void *)v243 + 2));
    }
    else
    {
      *(_OWORD *)&v371.__r_.__value_.__l.__data_ = *v245;
      v371.__r_.__value_.__r.__words[2] = *((void *)v243 + 3);
    }
LABEL_509:
    __int16 v256 = std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::find<std::string>(&v341, (uint64_t)&v371);
    if (SHIBYTE(v371.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v371.__r_.__value_.__l.__data_);
    }
    if (v256)
    {
      size_t v257 = v256[8];
      if ((__n[1] & (__n[1] - 1)) != 0)
      {
        size_t v259 = v256[8];
        if (v257 >= __n[1]) {
          size_t v259 = v257 % __n[1];
        }
        __int16 v258 = *(uint64_t ***)(__n[0] + 8 * v259);
        do
        {
          do
            __int16 v258 = (uint64_t **)*v258;
          while ((uint64_t *)v257 != v258[1]);
        }
        while (v258[2] != (uint64_t *)v257);
      }
      else
      {
        __int16 v258 = *(uint64_t ***)(__n[0] + 8 * ((__n[1] - 1) & v257));
        do
        {
          do
            __int16 v258 = (uint64_t **)*v258;
          while ((uint64_t *)v257 != v258[1]);
        }
        while (v258[2] != (uint64_t *)v257);
      }
      unsigned int v260 = v258[3];
      unsigned int v261 = v258[4];
      int v262 = v258[5];
      uint64_t v263 = *((unsigned int *)v258 + 12);
      int v368 = *v243;
      if (*((char *)v243 + 31) < 0)
      {
        std::string::__init_copy_ctor_external(&v369, *((const std::string::value_type **)v243 + 1), *((void *)v243 + 2));
      }
      else
      {
        *(_OWORD *)&v369.__r_.__value_.__l.__data_ = *v245;
        v369.__r_.__value_.__r.__words[2] = *((void *)v243 + 3);
      }
      unint64_t v264 = 0;
      uint64_t v265 = v243[8];
      int v370 = v243[8];
      uint64_t v266 = v242[2];
      uint64_t v267 = v242[8];
      switch(*((_DWORD *)v256 + 18))
      {
        case 0:
          unint64_t v264 = (unint64_t)v260 + v256[5];
          break;
        case 1:
          unint64_t v264 = (unint64_t)v261 + v256[5];
          break;
        case 2:
          unint64_t v264 = (unint64_t)v262 + v256[5];
          break;
        case 4:
          unint64_t v264 = v256[5] + v263;
          break;
        case 5:
          unint64_t v264 = v256[5];
          break;
        default:
          break;
      }
      uint64_t v268 = v310 + *(unsigned int *)(v334 + 40);
      BOOL v269 = (unsigned __int8 *)(v266 + v265);
      switch(v368)
      {
        case 12:
          goto LABEL_549;
        case 13:
          v264 >>= 32;
          goto LABEL_549;
        case 16:
          *(_OWORD *)&v371.__r_.__value_.__r.__words[1] = 0uLL;
          unint64_t v270 = *((unsigned __int16 *)v269 + 1);
          v371.__r_.__value_.__r.__words[0] = (v270 >> 7) & 0x1FC | (*((unsigned __int16 *)v269 + 2) << 9) | ((unint64_t)*((unsigned __int16 *)v269 + 3) << 25) & 0xFFFE01FFFFFFFFFFLL | ((unint64_t)*((_WORD *)v269 + 4) << 41);
          unsigned int v271 = *(unsigned __int16 *)v269;
          HIDWORD(v371.__r_.__value_.__r.__words[2]) = (v271 >> 12) & 0xCF | (16 * (v270 & 3));
          uint64_t v272 = (v270 >> 2) & 3;
          if (v272)
          {
            if (v272 != 2) {
              goto LABEL_555;
            }
            int v273 = 1;
          }
          else
          {
            int v273 = 2;
          }
          LODWORD(v371.__r_.__value_.__r.__words[2]) = v273;
LABEL_555:
          unsigned int v277 = (v270 >> 4) & 3;
          if (v277 != 3) {
            HIDWORD(v371.__r_.__value_.__r.__words[1]) = dword_242EAA720[v277];
          }
          unsigned int v278 = v270 >> 6;
          if (v278 != 3) {
            LODWORD(v371.__r_.__value_.__r.__words[1]) = dword_242EAA720[v278];
          }
          v371.__r_.__value_.__r.__words[0] = (2 * (v264 & 0xFFFFFFFFFFFFLL)) | ((unint64_t)(v271 & 0x800) << 38) | 1;
          AGXIotoInstruction_BL_0::emit((AGXIotoInstruction_BL_0 *)&v371, v269);
          if (SHIBYTE(v369.__r_.__value_.__r.__words[2]) < 0) {
LABEL_560:
          }
            operator delete(v369.__r_.__value_.__l.__data_);
LABEL_486:
          v243 += 10;
          if (v243 != v329) {
            continue;
          }
          goto LABEL_574;
        case 17:
          unint64_t v264 = v256[5];
LABEL_549:
          Immediate = (AGXIotoInstruction_LDIMM *)AGX::ESLInstructionEncoderGen3<AGX::HAL200::Encoders>::LoadImmediate::LoadImmediate((uint64_t)&v371, (const unsigned __int8 *)(v266 + v265));
          LODWORD(v371.__r_.__value_.__l.__data_) = v264;
          AGXIotoInstruction_LDIMM::emit(Immediate, v269);
          if (SHIBYTE(v369.__r_.__value_.__r.__words[2]) < 0) {
            goto LABEL_560;
          }
          goto LABEL_486;
        case 18:
          *(void *)(v267 + v265) = v264;
          if (SHIBYTE(v369.__r_.__value_.__r.__words[2]) < 0) {
            goto LABEL_560;
          }
          goto LABEL_486;
        case 20:
          *(void *)(v267 + v265) = v256[5];
          if (SHIBYTE(v369.__r_.__value_.__r.__words[2]) < 0) {
            goto LABEL_560;
          }
          goto LABEL_486;
        case 21:
          if ((v369.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            BOOL v274 = &v369;
          }
          else {
            BOOL v274 = (std::string *)v369.__r_.__value_.__r.__words[0];
          }
          *(void *)(v268
                    + AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::GOTEntryLayout::getOffset(v326, (char *)v274)) = v264;
          if (SHIBYTE(v369.__r_.__value_.__r.__words[2]) < 0) {
            goto LABEL_560;
          }
          goto LABEL_486;
        case 22:
          if ((v369.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            BOOL v275 = &v369;
          }
          else {
            BOOL v275 = (std::string *)v369.__r_.__value_.__r.__words[0];
          }
          *(_DWORD *)(v268
                    + AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::GOTEntryLayout::getOffset(v326, (char *)v275)) = v264;
          if (SHIBYTE(v369.__r_.__value_.__r.__words[2]) < 0) {
            goto LABEL_560;
          }
          goto LABEL_486;
        case 23:
          if ((v369.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            unsigned int v244 = &v369;
          }
          else {
            unsigned int v244 = (std::string *)v369.__r_.__value_.__r.__words[0];
          }
          *(_WORD *)(v268
                   + AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::GOTEntryLayout::getOffset(v326, (char *)v244)) = v256[5];
          goto LABEL_485;
        default:
LABEL_485:
          if ((SHIBYTE(v369.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
            goto LABEL_486;
          }
          goto LABEL_560;
      }
    }
    break;
  }
  if (a7)
  {
    BOOL v291 = NSString;
    AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::createErrorString((uint64_t)&v371, *a3, a3[1], &v341);
    BOOL v292 = (v371.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
         ? &v371
         : (std::string *)v371.__r_.__value_.__r.__words[0];
    *a7 = [v291 stringWithUTF8String:v292];
    if (SHIBYTE(v371.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v371.__r_.__value_.__l.__data_);
    }
  }
  uint64_t v239 = 0;
  BOOL v290 = (std::__shared_weak_count *)*((void *)&v347 + 1);
  if (!*((void *)&v347 + 1)) {
    goto LABEL_598;
  }
LABEL_596:
  if (!atomic_fetch_add(&v290->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v290->__on_zero_shared)(v290);
    std::__shared_weak_count::__release_weak(v290);
  }
LABEL_598:
  BOOL v293 = *(std::__shared_weak_count **)&__dst[24];
  if (*(void *)&__dst[24]
    && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&__dst[24] + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v293->__on_zero_shared)(v293);
    std::__shared_weak_count::__release_weak(v293);
  }
  BOOL v294 = *(std::__shared_weak_count **)&__dst[8];
  if (*(void *)&__dst[8]
    && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&__dst[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v294->__on_zero_shared)(v294);
    std::__shared_weak_count::__release_weak(v294);
  }
LABEL_604:
  BOOL v295 = (void **)v342;
  if ((void)v342)
  {
    do
    {
      BOOL v301 = (void **)*v295;
      if (*((char *)v295 + 39) < 0) {
        operator delete(v295[2]);
      }
      operator delete(v295);
      BOOL v295 = v301;
    }
    while (v301);
  }
  BOOL v296 = (void *)v341;
  *(void *)&long long v341 = 0;
  if (v296) {
    operator delete(v296);
  }
  unsigned __int8 v297 = v339[0];
  if (v339[0])
  {
    do
    {
      BOOL v298 = (void *)*v297;
      operator delete(v297);
      unsigned __int8 v297 = v298;
    }
    while (v298);
  }
  BOOL v299 = (void *)__n[0];
  __n[0] = 0;
  if (v299) {
    operator delete(v299);
  }
  return v239;
}

void sub_242A56C58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,void *__p,uint64_t a56,int a57,__int16 a58,char a59,char a60)
{
  if (*(char *)(v60 - 153) < 0) {
    operator delete(*(void **)(v60 - 176));
  }
  AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::RuntimeState::~RuntimeState(&__p);
  AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::DependentModuleDetails::~DependentModuleDetails((uint64_t)&a41);
  _Unwind_Resume(a1);
}

uint64_t AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::DependentModuleDetails::~DependentModuleDetails(uint64_t a1)
{
  int v2 = *(void ***)(a1 + 56);
  if (v2)
  {
    do
    {
      size_t v8 = (void **)*v2;
      if (*((char *)v2 + 39) < 0) {
        operator delete(v2[2]);
      }
      operator delete(v2);
      int v2 = v8;
    }
    while (v8);
  }
  unint64_t v3 = *(void **)(a1 + 40);
  *(void *)(a1 + 40) = 0;
  if (v3) {
    operator delete(v3);
  }
  long long v4 = *(void **)(a1 + 16);
  if (v4)
  {
    do
    {
      int8x8_t v5 = (void *)*v4;
      operator delete(v4);
      long long v4 = v5;
    }
    while (v5);
  }
  int v6 = *(void **)a1;
  *(void *)a1 = 0;
  if (v6) {
    operator delete(v6);
  }
  return a1;
}

void AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::createErrorString(uint64_t a1, uint64_t *a2, uint64_t *a3, void *a4)
{
  *(unsigned char *)(a1 + 23) = 19;
  strcpy((char *)a1, "Undefined symbols:\n");
  if (a2 != a3)
  {
    int8x8_t v5 = a2;
    while (1)
    {
      uint64_t v7 = *v5;
      uint64_t v8 = *(void *)(*v5 + 312);
      uint64_t v9 = *(void *)(*v5 + 320);
      if (v8 != v9) {
        break;
      }
LABEL_3:
      v5 += 10;
      if (v5 == a3) {
        return;
      }
    }
    while (1)
    {
      if (std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::find<std::string>(a4, v8 + 8))
      {
        goto LABEL_6;
      }
      std::operator+<char>();
      unint64_t v10 = std::string::append(&v20, ", referenced from: ");
      long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
      v21.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v21.__r_.__value_.__l.__data_ = v11;
      v10->__r_.__value_.__l.__size_ = 0;
      v10->__r_.__value_.__r.__words[2] = 0;
      v10->__r_.__value_.__r.__words[0] = 0;
      unsigned int v12 = (const std::string::value_type *)(v7 + 8);
      if (*(char *)(v7 + 31) < 0) {
        unsigned int v12 = *(const std::string::value_type **)(v7 + 8);
      }
      unsigned int v13 = std::string::append(&v21, v12);
      long long v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
      v22.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v22.__r_.__value_.__l.__data_ = v14;
      v13->__r_.__value_.__l.__size_ = 0;
      v13->__r_.__value_.__r.__words[2] = 0;
      v13->__r_.__value_.__r.__words[0] = 0;
      int v15 = std::string::append(&v22, "\n");
      long long v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
      int64_t v24 = v15->__r_.__value_.__r.__words[2];
      *(_OWORD *)long long __p = v16;
      v15->__r_.__value_.__l.__size_ = 0;
      v15->__r_.__value_.__r.__words[2] = 0;
      v15->__r_.__value_.__r.__words[0] = 0;
      if (v24 >= 0) {
        int v17 = __p;
      }
      else {
        int v17 = (void **)__p[0];
      }
      if (v24 >= 0) {
        std::string::size_type v18 = HIBYTE(v24);
      }
      else {
        std::string::size_type v18 = (std::string::size_type)__p[1];
      }
      std::string::append((std::string *)a1, (const std::string::value_type *)v17, v18);
      if (SHIBYTE(v24) < 0)
      {
        operator delete(__p[0]);
        if ((SHIBYTE(v22.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_18:
          if ((SHIBYTE(v21.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
            goto LABEL_19;
          }
          goto LABEL_23;
        }
      }
      else if ((SHIBYTE(v22.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        goto LABEL_18;
      }
      operator delete(v22.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v21.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_19:
        if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
          goto LABEL_24;
        }
        goto LABEL_6;
      }
LABEL_23:
      operator delete(v21.__r_.__value_.__l.__data_);
      if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
LABEL_24:
      }
        operator delete(v20.__r_.__value_.__l.__data_);
LABEL_6:
      v8 += 40;
      if (v8 == v9) {
        goto LABEL_3;
      }
    }
  }
}

void sub_242A57038(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (a35 < 0)
  {
    operator delete(__p);
    if ((a28 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a21 & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }
  else if ((a28 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a23);
  if ((a21 & 0x80000000) == 0)
  {
LABEL_4:
    if ((a15 & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
LABEL_9:
  operator delete(a16);
  if ((a15 & 0x80000000) == 0)
  {
LABEL_5:
    if ((*(char *)(v35 + 23) & 0x80000000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_11;
  }
LABEL_10:
  operator delete(a10);
  if ((*(char *)(v35 + 23) & 0x80000000) == 0) {
LABEL_6:
  }
    _Unwind_Resume(exception_object);
LABEL_11:
  operator delete(*(void **)v35);
  _Unwind_Resume(exception_object);
}

unsigned __int8 *AGXIotoInstruction_BL_0::emit(AGXIotoInstruction_BL_0 *this, unsigned __int8 *a2)
{
  int v3 = *((_DWORD *)this + 3);
  int v2 = *((_DWORD *)this + 4);
  int v4 = *((_DWORD *)this + 2);
  unint64_t v5 = *(void *)this;
  unsigned int v6 = *((unsigned __int8 *)this + 20);
  int v7 = (*(void *)this << 7) & 0xFFFFFE00 | ((*(void *)this & 1) << 8) | (v6 >> 4) & 1 | (v6 >> 4) & 2;
  __int16 v8 = v7 | 8;
  if (!v2) {
    LOWORD(v7) = v7 | 4;
  }
  if (v2 == 1) {
    __int16 v9 = v8;
  }
  else {
    __int16 v9 = v7;
  }
  __int16 v10 = v9 & 0xFFCF | 0x10;
  __int16 v11 = v9 & 0xFFCF | 0x20;
  if (v3 == 2) {
    v9 &= 0xFFCFu;
  }
  if (v3 == 1) {
    __int16 v9 = v11;
  }
  if (!v3) {
    __int16 v9 = v10;
  }
  __int16 v12 = v9 & 0xFF3F | 0x40;
  __int16 v13 = v9 & 0xFF3F | 0x80;
  if (v4 == 2) {
    v9 &= 0xFF3Fu;
  }
  if (v4 == 1) {
    __int16 v9 = v13;
  }
  *(_WORD *)a2 = (v5 >> 38) & 0x800 | ((v6 & 1) << 12) & 0x1FFF | (((v6 >> 1) & 1) << 13) & 0x3FFF | (((v6 >> 2) & 1) << 14) & 0x7FFF | (((v6 >> 3) & 1) << 15) | 0x8F;
  if (!v4) {
    __int16 v9 = v12;
  }
  *((_WORD *)a2 + 1) = v9;
  *((_WORD *)a2 + 2) = v5 >> 9;
  *((_WORD *)a2 + 3) = v5 >> 25;
  *((_WORD *)a2 + 4) = (v5 >> 41);
  return a2 + 10;
}

uint64_t *std::__hash_table<std::__hash_value_type<std::string,AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::ExternalSymbolInfo>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::ExternalSymbolInfo>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::ExternalSymbolInfo>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::ExternalSymbolInfo>>>::find<std::string>(void *a1, uint64_t a2)
{
  int v3 = *(char *)(a2 + 23);
  if (v3 >= 0) {
    int v4 = (uint64_t *)a2;
  }
  else {
    int v4 = *(uint64_t **)a2;
  }
  if (v3 >= 0) {
    unint64_t v5 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    unint64_t v5 = *(void *)(a2 + 8);
  }
  unint64_t v6 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:nn180100](v4, v5);
  int8x8_t v7 = (int8x8_t)a1[1];
  if (v7)
  {
    unint64_t v8 = v6;
    uint8x8_t v9 = (uint8x8_t)vcnt_s8(v7);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v10 = v6;
      if (v6 >= *(void *)&v7) {
        unint64_t v10 = v6 % *(void *)&v7;
      }
    }
    else
    {
      unint64_t v10 = (*(void *)&v7 - 1) & v6;
    }
    __int16 v11 = *(uint64_t ***)(*a1 + 8 * v10);
    if (v11)
    {
      __int16 v12 = *v11;
      if (*v11)
      {
        if (v9.u32[0] < 2uLL)
        {
          uint64_t v13 = *(void *)&v7 - 1;
          while (1)
          {
            uint64_t v19 = v12[1];
            if (v19 == v8)
            {
              uint64_t v20 = *((unsigned __int8 *)v12 + 39);
              if ((v20 & 0x80u) == 0) {
                uint64_t v21 = *((unsigned __int8 *)v12 + 39);
              }
              else {
                uint64_t v21 = v12[3];
              }
              if (v21 == v5)
              {
                if ((v20 & 0x80) != 0)
                {
                  if (!memcmp((const void *)v12[2], v4, v12[3])) {
                    return v12;
                  }
                }
                else
                {
                  if (!*((unsigned char *)v12 + 39)) {
                    return v12;
                  }
                  uint64_t v22 = 0;
                  while (*((unsigned __int8 *)v12 + v22 + 16) == *((unsigned __int8 *)v4 + v22))
                  {
                    if (v20 == ++v22) {
                      return v12;
                    }
                  }
                }
              }
            }
            else if ((v19 & v13) != v10)
            {
              return 0;
            }
            double result = 0;
            __int16 v12 = (uint64_t *)*v12;
            if (!v12) {
              return result;
            }
          }
        }
        while (1)
        {
          unint64_t v15 = v12[1];
          if (v15 == v8)
          {
            uint64_t v16 = *((unsigned __int8 *)v12 + 39);
            if ((v16 & 0x80u) == 0) {
              uint64_t v17 = *((unsigned __int8 *)v12 + 39);
            }
            else {
              uint64_t v17 = v12[3];
            }
            if (v17 == v5)
            {
              if ((v16 & 0x80) != 0)
              {
                if (!memcmp((const void *)v12[2], v4, v12[3])) {
                  return v12;
                }
              }
              else
              {
                if (!*((unsigned char *)v12 + 39)) {
                  return v12;
                }
                uint64_t v18 = 0;
                while (*((unsigned __int8 *)v12 + v18 + 16) == *((unsigned __int8 *)v4 + v18))
                {
                  if (v16 == ++v18) {
                    return v12;
                  }
                }
              }
            }
          }
          else
          {
            if (v15 >= *(void *)&v7) {
              v15 %= *(void *)&v7;
            }
            if (v15 != v10) {
              return 0;
            }
          }
          double result = 0;
          __int16 v12 = (uint64_t *)*v12;
          if (!v12) {
            return result;
          }
        }
      }
    }
  }
  return 0;
}

uint64_t std::__shared_ptr_pointer<AGX::HeapBuffer *,std::shared_ptr<AGX::HeapBuffer>::__shared_ptr_default_delete<AGX::HeapBuffer,AGX::HeapBuffer>,std::allocator<AGX::HeapBuffer>>::__on_zero_shared(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 24);
  if (v1)
  {
    if (*(void *)(v1 + 64) && *(void *)(v1 + 24))
    {
      uint64_t v2 = *(void *)(v1 + 32);
      int v3 = *(NSObject **)(v2 + 16);
      v4[0] = MEMORY[0x263EF8330];
      v4[1] = 3221225472;
      v4[2] = ___ZN3AGX4HeapILb1EE14deallocateImplERKNS1_10AllocationE_block_invoke;
      v4[3] = &__block_descriptor_48_e5_v8__0l;
      v4[4] = v2;
      v4[5] = v1;
      dispatch_sync(v3, v4);
      *(_OWORD *)(v1 + 25) = 0u;
      *(_OWORD *)uint64_t v1 = 0u;
      *(_OWORD *)(v1 + 16) = 0u;
    }
    JUMPOUT(0x24566ED90);
  }
  return result;
}

void std::__shared_ptr_pointer<AGX::HeapBuffer *,std::shared_ptr<AGX::HeapBuffer>::__shared_ptr_default_delete<AGX::HeapBuffer,AGX::HeapBuffer>,std::allocator<AGX::HeapBuffer>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x24566ED90);
}

void AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::LinkInfo::initialize<AGCCodeTranslatorVisibleFunctionTypesG11,&(AGCCodeTranslatorG11::GetCompileReply(void const*))>(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  int v4 = (AGCDeserializedReply *)a2;
  uint64_t v698 = *MEMORY[0x263EF8340];
  if (a2[58])
  {
    unint64_t v5 = (unsigned int **)(a2 + 58);
    if (!a2[59]) {
      unint64_t v5 = (unsigned int **)(a2 + 128);
    }
  }
  else
  {
    unint64_t v5 = (unsigned int **)(a2 + 128);
  }
  int8x8_t v7 = *v5;
  unint64_t v6 = v5[1];
  if (v7) {
    BOOL v8 = v6 == 0;
  }
  else {
    BOOL v8 = 1;
  }
  if (v8) {
    uint8x8_t v9 = 0;
  }
  else {
    uint8x8_t v9 = (int *)((char *)v7 + *v7);
  }
  unint64_t v10 = (unsigned __int16 *)((char *)v9 - *v9);
  if (*v10 >= 5u && (uint64_t v11 = v10[2]) != 0) {
    __int16 v12 = (int *)((char *)v9 + v11 + *(unsigned int *)((char *)v9 + v11));
  }
  else {
    __int16 v12 = 0;
  }
  unint64_t v13 = a2[227];
  if (a2[3])
  {
    if (a2[4]) {
      long long v14 = a2 + 3;
    }
    else {
      long long v14 = a2 + 73;
    }
  }
  else
  {
    long long v14 = a2 + 73;
  }
  unint64_t v635 = HIDWORD(v13);
  unint64_t v15 = (unsigned __int16 *)((char *)v12 - *v12);
  if (*v15 < 7u)
  {
    LODWORD(v16) = 0;
  }
  else
  {
    uint64_t v16 = v15[3];
    if (v16) {
      LODWORD(v16) = *(int *)((char *)v12 + v16);
    }
  }
  uint64_t v658 = a2[224];
  uint64_t v17 = a2[225];
  uint64_t v631 = *v14;
  *(_DWORD *)a1 = v16;
  MEMORY[0x24566EB20](a1 + 8, a4);
  *(void *)(a1 + 32) = a1;
  unint64_t prime = vcvtps_u32_f32((float)v635 / *(float *)(a1 + 264));
  v651 = (char *)v4 + 24;
  if (prime == 1)
  {
    unint64_t prime = 2;
  }
  else if ((prime & (prime - 1)) != 0)
  {
    unint64_t prime = std::__next_prime(prime);
  }
  int8x8_t v19 = *(int8x8_t *)(a1 + 240);
  if (prime > *(void *)&v19) {
    goto LABEL_30;
  }
  if (prime < *(void *)&v19)
  {
    unint64_t v20 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 256) / *(float *)(a1 + 264));
    if (*(void *)&v19 < 3uLL || (uint8x8_t v21 = (uint8x8_t)vcnt_s8(v19), v21.i16[0] = vaddlv_u8(v21), v21.u32[0] > 1uLL))
    {
      unint64_t v20 = std::__next_prime(v20);
    }
    else
    {
      uint64_t v22 = 1 << -(char)__clz(v20 - 1);
      if (v20 >= 2) {
        unint64_t v20 = v22;
      }
    }
    if (prime <= v20) {
      unint64_t prime = v20;
    }
    if (prime < *(void *)&v19) {
LABEL_30:
    }
      std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::__do_rehash<true>(a1 + 232, prime);
  }
  v656 = (void *)(a1 + 232);
  uint64_t v657 = v17 + 1;
  v660 = v4;
  v632 = v12;
  if (!v635) {
    goto LABEL_272;
  }
  uint64_t v23 = 0;
  char v630 = 0;
  int v634 = v13;
  unint64_t v24 = HIDWORD(v13);
  do
  {
    long long v25 = (unsigned int *)(v658 + 16 * (v23 + v13));
    char v26 = *((unsigned char *)v25 + 4);
    uint64_t v652 = *((void *)v25 + 1);
    unint64_t v27 = (const char *)(v657 + *v25);
    int v28 = strncmp(v27, "agc.main", 8uLL);
    int v29 = strncmp(v27, "agc.intersection", 0x10uLL);
    int v30 = strncmp(v27, "agc.cliqueS", 0xBuLL);
    if (v28) {
      BOOL v31 = v29 == 0;
    }
    else {
      BOOL v31 = 1;
    }
    if (v31 || v30 == 0) {
      goto LABEL_45;
    }
    unint64_t v33 = *((unsigned __int8 *)v25 + 5);
    int8x8_t v34 = *(int8x8_t *)((char *)v4 + 1760);
    if (v34)
    {
      uint8x8_t v35 = (uint8x8_t)vcnt_s8(v34);
      v35.i16[0] = vaddlv_u8(v35);
      if (v35.u32[0] > 1uLL)
      {
        unint64_t v36 = v33;
        if (*(void *)&v34 <= v33) {
          unint64_t v36 = v33 % *(void *)&v34;
        }
      }
      else
      {
        unint64_t v36 = (v34.i32[0] - 1) & v33;
      }
      uint64_t v37 = *(uint64_t **)(*((void *)v4 + 219) + 8 * v36);
      if (v37)
      {
        uint64_t v37 = (uint64_t *)*v37;
        if (v37)
        {
          if (v35.u32[0] < 2uLL)
          {
            uint64_t v38 = *(void *)&v34 - 1;
            while (1)
            {
              uint64_t v40 = v37[1];
              if (v40 == v33)
              {
                if (*((_DWORD *)v37 + 4) == v33) {
                  goto LABEL_74;
                }
              }
              else if ((v40 & v38) != v36)
              {
                goto LABEL_73;
              }
              uint64_t v37 = (uint64_t *)*v37;
              if (!v37) {
                goto LABEL_74;
              }
            }
          }
          do
          {
            unint64_t v39 = v37[1];
            if (v39 == v33)
            {
              if (*((_DWORD *)v37 + 4) == v33) {
                break;
              }
            }
            else
            {
              if (v39 >= *(void *)&v34) {
                v39 %= *(void *)&v34;
              }
              if (v39 != v36) {
                goto LABEL_73;
              }
            }
            uint64_t v37 = (uint64_t *)*v37;
          }
          while (v37);
        }
      }
    }
    else
    {
LABEL_73:
      uint64_t v37 = 0;
    }
LABEL_74:
    if (*((char *)v37 + 47) < 0) {
      std::string::__init_copy_ctor_external(&v663, (const std::string::value_type *)v37[3], v37[4]);
    }
    else {
      std::string v663 = *(std::string *)((unsigned char *)v37 + 1);
    }
    char v648 = v26;
    if (SHIBYTE(v663.__r_.__value_.__r.__words[2]) < 0)
    {
      if (v663.__r_.__value_.__l.__size_ != 6)
      {
        if (v663.__r_.__value_.__l.__size_ != 12)
        {
          if (v663.__r_.__value_.__l.__size_ != 13)
          {
LABEL_89:
            int v645 = 0;
            BOOL v639 = 0;
            BOOL v45 = 0;
            char v46 = 0;
            BOOL v641 = 0;
            int v643 = 0;
            int v47 = 0;
            int v48 = 0;
            int v49 = 0;
            int v50 = 0;
            goto LABEL_126;
          }
          unsigned int v41 = (unint64_t *)v663.__r_.__value_.__r.__words[0];
          goto LABEL_86;
        }
        BOOL v639 = 0;
        BOOL v45 = 0;
        char v46 = 0;
        BOOL v641 = 0;
        int v643 = 0;
        int v47 = 0;
        int v48 = 0;
        int v49 = 0;
        int v50 = 0;
        int v51 = *(void *)v663.__r_.__value_.__l.__data_ == 0x435F545845545F5FLL
           && *(_DWORD *)(v663.__r_.__value_.__r.__words[0] + 8) == 1414745679;
LABEL_125:
        int v645 = v51;
        goto LABEL_126;
      }
      if (*(_DWORD *)v663.__r_.__value_.__l.__data_ != 1163157343
        || *(_WORD *)(v663.__r_.__value_.__r.__words[0] + 4) != 21592)
      {
        BOOL v639 = 0;
        BOOL v45 = 0;
        char v46 = 0;
        BOOL v641 = 0;
        int v643 = 0;
        int v47 = 0;
        int v48 = 0;
        int v49 = 0;
        int v50 = 0;
        BOOL v54 = *(_DWORD *)v663.__r_.__value_.__l.__data_ == 1094999903;
        int v55 = *(unsigned __int16 *)(v663.__r_.__value_.__r.__words[0] + 4);
        goto LABEL_118;
      }
    }
    else
    {
      if (HIBYTE(v663.__r_.__value_.__r.__words[2]) != 6)
      {
        if (HIBYTE(v663.__r_.__value_.__r.__words[2]) != 12)
        {
          if (HIBYTE(v663.__r_.__value_.__r.__words[2]) != 13) {
            goto LABEL_89;
          }
          unsigned int v41 = (unint64_t *)&v663;
LABEL_86:
          unint64_t v42 = bswap64(*v41);
          unint64_t v43 = 0x5F5F444154415F43;
          if (v42 == 0x5F5F444154415F43
            && (unint64_t v42 = bswap64(*(unint64_t *)((char *)v41 + 5)),
                unint64_t v43 = 0x415F434F4D4D4F4ELL,
                v42 == 0x415F434F4D4D4F4ELL))
          {
            int v44 = 0;
          }
          else if (v42 < v43)
          {
            int v44 = -1;
          }
          else
          {
            int v44 = 1;
          }
          BOOL v639 = 0;
          BOOL v45 = 0;
          char v46 = 0;
          BOOL v641 = 0;
          int v643 = 0;
          int v47 = 0;
          int v48 = 0;
          int v49 = 0;
          int v50 = 0;
          if (v44) {
            int v51 = 0;
          }
          else {
            int v51 = 3;
          }
          goto LABEL_125;
        }
        BOOL v639 = 0;
        BOOL v45 = 0;
        char v46 = 0;
        BOOL v641 = 0;
        int v643 = 0;
        int v47 = 0;
        int v48 = 0;
        int v49 = 0;
        int v50 = 0;
        int v51 = v663.__r_.__value_.__r.__words[0] == 0x435F545845545F5FLL
           && LODWORD(v663.__r_.__value_.__r.__words[1]) == 1414745679;
        goto LABEL_125;
      }
      if (LODWORD(v663.__r_.__value_.__l.__data_) != 1163157343 || WORD2(v663.__r_.__value_.__r.__words[0]) != 21592)
      {
        BOOL v639 = 0;
        BOOL v45 = 0;
        char v46 = 0;
        BOOL v641 = 0;
        int v643 = 0;
        int v47 = 0;
        int v48 = 0;
        int v49 = 0;
        int v50 = 0;
        BOOL v54 = LODWORD(v663.__r_.__value_.__l.__data_) == 1094999903;
        int v55 = WORD2(v663.__r_.__value_.__r.__words[0]);
LABEL_118:
        int v59 = v54 && v55 == 16724;
        int v51 = 2 * v59;
        goto LABEL_125;
      }
    }
    size_t v84 = strlen(v27);
    if (v84 > 0x7FFFFFFFFFFFFFF7) {
      abort();
    }
    std::string::size_type v85 = v84;
    if (v84 >= 0x17)
    {
      uint64_t v87 = (v84 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v84 | 7) != 0x17) {
        uint64_t v87 = v84 | 7;
      }
      uint64_t v88 = v87 + 1;
      int v86 = (std::string *)operator new(v87 + 1);
      __dst[0].__r_.__value_.__l.__size_ = v85;
      __dst[0].__r_.__value_.__r.__words[2] = v88 | 0x8000000000000000;
      __dst[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v86;
LABEL_169:
      memmove(v86, v27, v85);
      goto LABEL_170;
    }
    *((unsigned char *)&__dst[0].__r_.__value_.__s + 23) = v84;
    int v86 = __dst;
    if (v84) {
      goto LABEL_169;
    }
LABEL_170:
    v86->__r_.__value_.__s.__data_[v85] = 0;
    int8x16_t v89 = std::string::append(__dst, "@md");
    long long v90 = *(_OWORD *)&v89->__r_.__value_.__l.__data_;
    *(void *)&__p[16] = *((void *)&v89->__r_.__value_.__l + 2);
    *(_OWORD *)long long __p = v90;
    v89->__r_.__value_.__l.__size_ = 0;
    v89->__r_.__value_.__r.__words[2] = 0;
    v89->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(__dst[0].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__dst[0].__r_.__value_.__l.__data_);
    }
    if (__p[23] >= 0) {
      uint64_t v91 = __p;
    }
    else {
      uint64_t v91 = *(const char **)__p;
    }
    BackendMetadataFBPtr = (int *)AGCDeserializedReply::getBackendMetadataFBPtr(v660, v91);
    uint64_t v93 = BackendMetadataFBPtr;
    uint64_t v94 = (unsigned __int16 *)((char *)BackendMetadataFBPtr - *BackendMetadataFBPtr);
    if (*v94 >= 5u && (uint64_t v95 = v94[2]) != 0) {
      unint64_t v96 = (int *)((char *)BackendMetadataFBPtr + v95 + *(unsigned int *)((char *)BackendMetadataFBPtr + v95));
    }
    else {
      unint64_t v96 = 0;
    }
    unint64_t v97 = (unsigned __int16 *)((char *)v96 - *v96);
    unsigned int v98 = *v97;
    if (v98 < 5)
    {
      int v638 = 0;
      goto LABEL_184;
    }
    if (v97[2])
    {
      int v638 = *(int *)((char *)v96 + v97[2]);
      if (v98 < 0x21) {
        goto LABEL_184;
      }
    }
    else
    {
      int v638 = 0;
      if (v98 < 0x21) {
        goto LABEL_184;
      }
    }
    uint64_t v111 = v97[16];
    if (v111)
    {
      int v99 = *(int *)((char *)v96 + v111);
      goto LABEL_185;
    }
LABEL_184:
    int v99 = 0;
LABEL_185:
    {
      getAdditionalSpillBufferBytes(void)::extra = 0;
    }
    int v100 = getAdditionalSpillBufferBytes(void)::extra;
    int8x8_t v101 = (unsigned __int16 *)((char *)v96 - *v96);
    unsigned int v102 = *v101;
    uint64_t v103 = v23;
    if (v102 < 0x51)
    {
      int v104 = 0;
      BOOL v106 = 0;
      BOOL v107 = 0;
      BOOL v108 = 0;
      if (v102 < 0x25) {
        goto LABEL_217;
      }
      uint64_t v105 = v101[18];
      if (!v101[18]) {
        goto LABEL_200;
      }
    }
    else if (v101[40])
    {
      int v104 = *(int *)((char *)v96 + v101[40]);
      uint64_t v105 = v101[18];
      if (!v101[18]) {
        goto LABEL_200;
      }
    }
    else
    {
      int v104 = 0;
      uint64_t v105 = v101[18];
      if (!v101[18]) {
        goto LABEL_200;
      }
    }
    if (*((unsigned char *)v96 + v105))
    {
      if (v102 < 0x27)
      {
        BOOL v106 = 0;
        BOOL v108 = 0;
        BOOL v107 = 1;
        goto LABEL_217;
      }
      LODWORD(v109) = v101[19];
      BOOL v107 = 1;
      if (!v101[19])
      {
LABEL_213:
        BOOL v106 = 0;
        if (v102 < 0x55) {
          goto LABEL_216;
        }
        goto LABEL_214;
      }
      goto LABEL_195;
    }
LABEL_200:
    if (v102 < 0x27)
    {
      BOOL v106 = 0;
      BOOL v107 = 0;
LABEL_216:
      BOOL v108 = 0;
      goto LABEL_217;
    }
    uint64_t v109 = v101[19];
    if (!v101[19] || (int v110 = *((unsigned __int8 *)v96 + v109), !*((unsigned char *)v96 + v109)))
    {
      if (v102 >= 0x29 && v101[20])
      {
        BOOL v107 = *((unsigned char *)v96 + v101[20]) != 0;
        if (!v101[19]) {
          goto LABEL_213;
        }
      }
      else
      {
        BOOL v107 = 0;
        if (!v101[19]) {
          goto LABEL_213;
        }
      }
LABEL_195:
      int v110 = *((unsigned __int8 *)v96 + v109);
      goto LABEL_204;
    }
    BOOL v107 = 1;
LABEL_204:
    BOOL v106 = v110 != 0;
    if (v102 < 0x55) {
      goto LABEL_216;
    }
LABEL_214:
    if (!v101[42]) {
      goto LABEL_216;
    }
    BOOL v108 = *((unsigned char *)v96 + v101[42]) != 0;
LABEL_217:
    int32x2_t v112 = (unsigned __int16 *)((char *)v93 - *v93);
    BOOL v641 = v107;
    BOOL v639 = v106;
    if (*v112 >= 0xDu
      && (uint64_t v113 = v112[6]) != 0
      && (unint64_t v114 = (int *)((char *)v93 + v113 + *(unsigned int *)((char *)v93 + v113)),
          int v115 = (unsigned __int16 *)((char *)v114 - *v114),
          *v115 >= 0x29u))
    {
      uint64_t v116 = v115[20];
      int v47 = v104;
      if (v116) {
        BOOL v117 = *((unsigned char *)v114 + v116) != 0;
      }
      else {
        BOOL v117 = 0;
      }
    }
    else
    {
      BOOL v117 = 0;
      int v47 = v104;
    }
    BOOL v629 = v117;
    if (v102 < 0x3F)
    {
      int v628 = 0;
      char v46 = 0;
      goto LABEL_233;
    }
    if (v101[31]
      && (unint64_t v118 = (unsigned int *)((char *)v96 + v101[31] + *(unsigned int *)((char *)v96 + v101[31])),
          uint64_t v119 = *v118,
          v119))
    {
      __int32 v120 = v118 + 1;
      while (1)
      {
        unsigned int v122 = *v120++;
        char v121 = v122;
        if (v122 < 0x36 && ((0x3F000000000777uLL >> v121) & 1) != 0) {
          break;
        }
        if (!--v119) {
          goto LABEL_237;
        }
      }
      char v46 = 1;
      if (v102 < 0x4D)
      {
LABEL_231:
        int v628 = 0;
        goto LABEL_233;
      }
    }
    else
    {
LABEL_237:
      char v46 = 0;
      if (v102 < 0x4D) {
        goto LABEL_231;
      }
    }
    if (v101[38])
    {
      int v628 = *(int *)((char *)v96 + v101[38]);
      if (v102 < 0x53) {
        goto LABEL_233;
      }
    }
    else
    {
      int v628 = 0;
      if (v102 < 0x53) {
        goto LABEL_233;
      }
    }
    uint64_t v123 = v101[41];
    if (v123)
    {
      int v48 = *(int *)((char *)v96 + v123);
      goto LABEL_234;
    }
LABEL_233:
    int v48 = 0;
LABEL_234:
    int v50 = v638;
    if ((__p[23] & 0x80000000) != 0) {
      operator delete(*(void **)__p);
    }
    int v645 = 0;
    int v643 = v100 + v99;
    v630 |= v108;
    unint64_t v24 = v635;
    int v49 = v628;
    BOOL v45 = v629;
    uint64_t v23 = v103;
LABEL_126:
    *(unsigned char *)(a1 + 176) |= v45;
    uint64_t v60 = (v652 - *(_DWORD *)(*((void *)v660 + 228) + 4 * v33));
    if ((v648 & 0x10) == 0)
    {
      uint64_t v653 = v23;
      BOOL v61 = v45;
      int v62 = v47;
      size_t v63 = strlen(v27);
      if (v63 > 0x7FFFFFFFFFFFFFF7) {
        abort();
      }
      std::string::size_type v64 = v63;
      int v636 = v50;
      if (v63 >= 0x17)
      {
        uint64_t v76 = (v63 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v63 | 7) != 0x17) {
          uint64_t v76 = v63 | 7;
        }
        uint64_t v77 = v76 + 1;
        BOOL v65 = (std::string *)operator new(v76 + 1);
        __dst[0].__r_.__value_.__l.__size_ = v64;
        __dst[0].__r_.__value_.__r.__words[2] = v77 | 0x8000000000000000;
        __dst[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v65;
      }
      else
      {
        *((unsigned char *)&__dst[0].__r_.__value_.__s + 23) = v63;
        BOOL v65 = __dst;
        if (!v63)
        {
LABEL_140:
          v65->__r_.__value_.__s.__data_[v64] = 0;
          uint64_t v78 = *(void *)(a1 + 32);
          int v79 = SHIBYTE(__dst[0].__r_.__value_.__r.__words[2]);
          if (SHIBYTE(__dst[0].__r_.__value_.__r.__words[2]) < 0) {
            std::string::__init_copy_ctor_external((std::string *)__p, __dst[0].__r_.__value_.__l.__data_, __dst[0].__r_.__value_.__l.__size_);
          }
          else {
            *(std::string *)long long __p = __dst[0];
          }
          *(void *)&__p[24] = v60;
          v685[0] = v636;
          v685[1] = v643;
          LOWORD(v685[2]) = v641;
          BYTE2(v685[2]) = v46;
          HIBYTE(v685[2]) = v61;
          LOBYTE(v685[3]) = v639;
          uint64_t v686 = v78;
          int v687 = v645;
          v688[0] = v49;
          v688[1] = v48;
          v688[2] = v62;
          memset(&v688[3], 0, 40);
          std::__hash_table<std::__hash_value_type<std::string,AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::ExternalSymbolInfo>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::ExternalSymbolInfo>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::ExternalSymbolInfo>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::ExternalSymbolInfo>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::ExternalSymbolInfo>>((uint64_t)v656, (uint64_t)__p, (uint64_t)__p);
          int v4 = v660;
          LODWORD(v13) = v634;
          uint64_t v23 = v653;
          if ((__p[23] & 0x80000000) != 0)
          {
            operator delete(*(void **)__p);
            if (v79 < 0) {
              goto LABEL_150;
            }
          }
          else
          {
            if ((v79 & 0x80000000) == 0) {
              goto LABEL_147;
            }
LABEL_150:
            operator delete(__dst[0].__r_.__value_.__l.__data_);
          }
LABEL_147:
          unint64_t v24 = v635;
          if ((SHIBYTE(v663.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
            goto LABEL_45;
          }
          goto LABEL_148;
        }
      }
      memmove(v65, v27, v64);
      goto LABEL_140;
    }
    if (!strcmp(v27, "agc.global_constructor"))
    {
      *(void *)(a1 + 384) = v60;
      *(_DWORD *)(a1 + 392) = v50;
      *(_DWORD *)(a1 + 396) = v643;
      *(_DWORD *)(a1 + 400) = 0;
      *(unsigned char *)(a1 + 404) = 0;
      *(void *)(a1 + 408) = a1;
      *(_DWORD *)(a1 + 416) = v645;
      *(_DWORD *)(a1 + 420) = v49;
      *(_DWORD *)(a1 + 424) = v48;
      *(_DWORD *)(a1 + 428) = v47;
      *(_OWORD *)(a1 + 432) = 0u;
      *(_OWORD *)(a1 + 448) = 0u;
      *(void *)(a1 + 464) = 0;
      int v4 = v660;
      LODWORD(v13) = v634;
      if ((SHIBYTE(v663.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_45;
      }
      goto LABEL_148;
    }
    uint64_t v66 = v27;
    uint64_t v67 = v23;
    int v68 = v49;
    unsigned __int8 v69 = v46;
    int v70 = v47;
    uint8x8_t v71 = v66;
    size_t v72 = strlen(v66);
    if (v72 > 0x7FFFFFFFFFFFFFF7) {
      abort();
    }
    std::string::size_type v73 = v72;
    int v637 = v50;
    if (v72 >= 0x17)
    {
      uint64_t v80 = (v72 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v72 | 7) != 0x17) {
        uint64_t v80 = v72 | 7;
      }
      uint64_t v81 = v80 + 1;
      unint64_t v74 = (std::string *)operator new(v80 + 1);
      __dst[0].__r_.__value_.__l.__size_ = v73;
      __dst[0].__r_.__value_.__r.__words[2] = v81 | 0x8000000000000000;
      __dst[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v74;
LABEL_154:
      int v75 = v48;
      memmove(v74, v71, v73);
      goto LABEL_155;
    }
    *((unsigned char *)&__dst[0].__r_.__value_.__s + 23) = v72;
    unint64_t v74 = __dst;
    if (v72) {
      goto LABEL_154;
    }
    int v75 = v48;
LABEL_155:
    v74->__r_.__value_.__s.__data_[v73] = 0;
    uint64_t v82 = *(void *)(a1 + 32);
    int v83 = SHIBYTE(__dst[0].__r_.__value_.__r.__words[2]);
    if (SHIBYTE(__dst[0].__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external((std::string *)__p, __dst[0].__r_.__value_.__l.__data_, __dst[0].__r_.__value_.__l.__size_);
    }
    else {
      *(std::string *)long long __p = __dst[0];
    }
    *(void *)&__p[24] = v60;
    v685[0] = v637;
    v685[1] = v643;
    LOWORD(v685[2]) = v641;
    HIWORD(v685[2]) = v69;
    LOBYTE(v685[3]) = v639;
    uint64_t v686 = v82;
    int v687 = v645;
    v688[0] = v68;
    v688[1] = v75;
    v688[2] = v70;
    memset(&v688[3], 0, 40);
    std::__hash_table<std::__hash_value_type<std::string,AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::ExternalSymbolInfo>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::ExternalSymbolInfo>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::ExternalSymbolInfo>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::ExternalSymbolInfo>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::ExternalSymbolInfo>>(a1 + 272, (uint64_t)__p, (uint64_t)__p);
    int v4 = v660;
    LODWORD(v13) = v634;
    uint64_t v23 = v67;
    unint64_t v24 = v635;
    if ((__p[23] & 0x80000000) != 0)
    {
      operator delete(*(void **)__p);
      if ((v83 & 0x80000000) == 0) {
        goto LABEL_44;
      }
    }
    else if ((v83 & 0x80000000) == 0)
    {
LABEL_44:
      if ((SHIBYTE(v663.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_45;
      }
LABEL_148:
      operator delete(v663.__r_.__value_.__l.__data_);
      goto LABEL_45;
    }
    operator delete(__dst[0].__r_.__value_.__l.__data_);
    if (SHIBYTE(v663.__r_.__value_.__r.__words[2]) < 0) {
      goto LABEL_148;
    }
LABEL_45:
    ++v23;
  }
  while (v23 != v24);
  __int16 v12 = v632;
  if (v630)
  {
    int v124 = (unsigned __int16 *)((char *)v632 - *v632);
    unsigned int v125 = *v124;
    if (v125 < 0x45)
    {
      if (v125 >= 0x3D)
      {
        LOWORD(v126) = 0;
        uint64_t v127 = v124[30];
        if (v124[30]) {
          goto LABEL_252;
        }
        goto LABEL_253;
      }
      LODWORD(v129) = 0;
      if (v125 >= 0x3B)
      {
        LOWORD(v127) = 0;
        LOWORD(v126) = 0;
        uint64_t v128 = v124[29];
        if (v124[29]) {
          goto LABEL_254;
        }
        goto LABEL_255;
      }
      uint64_t v128 = 0;
      LOWORD(v127) = 0;
      LOWORD(v126) = 0;
      LOBYTE(v130) = 0;
    }
    else
    {
      uint64_t v126 = v124[34];
      if (v124[34]) {
        uint64_t v126 = *(void *)((char *)v632 + v126);
      }
      uint64_t v127 = v124[30];
      if (v124[30]) {
LABEL_252:
      }
        uint64_t v127 = *(void *)((char *)v632 + v127);
LABEL_253:
      uint64_t v128 = v124[29];
      if (v124[29]) {
LABEL_254:
      }
        uint64_t v128 = *(void *)((char *)v632 + v128);
LABEL_255:
      if (v125 < 0x3F)
      {
        LODWORD(v129) = 0;
        LOBYTE(v130) = 0;
      }
      else
      {
        uint64_t v129 = v124[31];
        if (v124[31]) {
          uint64_t v129 = *(void *)((char *)v632 + v129);
        }
        if (v125 < 0x4B)
        {
          LOBYTE(v130) = 0;
        }
        else
        {
          uint64_t v130 = v124[37];
          if (v130) {
            LODWORD(v130) = *(int *)((char *)v632 + v130);
          }
        }
      }
    }
    *(_DWORD *)(a1 + 68) = v129;
    __int16 v131 = v129 + v127 - 1;
    int v132 = -(int)v129;
    uint64_t v133 = *(void *)(a1 + 76);
    unint64_t v134 = (unsigned __int16)v126 | ((unint64_t)(unsigned __int16)(v132 & v131) << 32) | (v128 << 48) | (v130 << 16) | (unint64_t)(v133 & 0xFF000000);
    *(void *)(a1 + 76) = v134;
    if (v134 != v133)
    {
      *(void *)(a1 + 116) = 0;
      *(_OWORD *)(a1 + 100) = 0u;
      *(_OWORD *)(a1 + 84) = 0u;
      *(void *)&long long v135 = -1;
      *((void *)&v135 + 1) = -1;
      *(_OWORD *)(a1 + 124) = v135;
      *(_OWORD *)(a1 + 140) = v135;
      *(_OWORD *)(a1 + 156) = v135;
    }
  }
LABEL_272:
  BOOL v136 = (unsigned __int16 *)((char *)v12 - *v12);
  if (*v136 < 0x49u)
  {
    LODWORD(v137) = 0;
  }
  else
  {
    uint64_t v137 = v136[36];
    if (v137) {
      LODWORD(v137) = *(int *)((char *)v12 + v137);
    }
  }
  *(_DWORD *)(a1 + 472) = v137;
  char v138 = (unsigned __int16 *)((char *)v12 - *v12);
  if (*v138 >= 0x31u)
  {
    uint64_t v139 = v138[24];
    if (v138[24])
    {
      uint64_t v140 = *(unsigned int *)((char *)v632 + v139);
      size_t v141 = (unsigned int *)((char *)v632 + v139 + v140);
      uint64_t v142 = v138[22];
      if (v142) {
        LODWORD(v142) = *(int *)((char *)v632 + v142);
      }
      *(_DWORD *)(a1 + 476) = v142;
      unint64_t v143 = (unsigned __int16 *)((char *)v632 - *v632);
      if (*v143 < 0x2Fu)
      {
        LODWORD(v144) = 0;
      }
      else
      {
        uint64_t v144 = v143[23];
        if (v144) {
          LODWORD(v144) = *(int *)((char *)v632 + v144);
        }
      }
      *(_DWORD *)(a1 + 480) = v144;
      uint64_t v145 = *v141;
      if (v145)
      {
        uint64_t v146 = 0;
        uint64_t v147 = 4 * v145;
        unint64_t v148 = v685;
        unint64_t v149 = v688;
        v654 = (char *)v632 + v139 + v140;
        do
        {
          uint64_t v150 = *(unsigned int *)((char *)v141 + v146 + 4);
          long long v151 = (char *)v141 + v146 + v150;
          long long v152 = (char *)v141 + v146 + v150 - *((int *)v151 + 1);
          if (*((unsigned __int16 *)v152 + 2) < 5u)
          {
            uint64_t v153 = 0;
          }
          else
          {
            uint64_t v153 = *((unsigned __int16 *)v152 + 4);
            if (v153) {
              v153 += (uint64_t)v141 + v146 + v150 + *(unsigned int *)((char *)v141 + v146 + v150 + v153 + 4) + 4;
            }
          }
          BOOL v154 = (const void *)(v153 + 4);
          size_t v155 = strlen((const char *)(v153 + 4));
          if (v155 > 0x7FFFFFFFFFFFFFF7) {
            abort();
          }
          std::string::size_type v156 = v155;
          if (v155 >= 0x17)
          {
            uint64_t v649 = v146;
            uint64_t v158 = *(unsigned int *)((char *)v141 + v146 + 4);
            uint8x8_t v159 = v151;
            uint64_t v160 = v149;
            int v161 = v148;
            uint64_t v162 = v147;
            unint64_t v163 = v141;
            uint64_t v164 = (v155 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v155 | 7) != 0x17) {
              uint64_t v164 = v155 | 7;
            }
            uint64_t v165 = v164 + 1;
            size_t v157 = operator new(v164 + 1);
            v663.__r_.__value_.__l.__size_ = v156;
            v663.__r_.__value_.__r.__words[2] = v165 | 0x8000000000000000;
            v663.__r_.__value_.__r.__words[0] = (std::string::size_type)v157;
            size_t v141 = v163;
            uint64_t v147 = v162;
            unint64_t v148 = v161;
            unint64_t v149 = v160;
            long long v151 = v159;
            uint64_t v150 = v158;
            uint64_t v146 = v649;
          }
          else
          {
            *((unsigned char *)&v663.__r_.__value_.__s + 23) = v155;
            size_t v157 = &v663;
            if (!v155) {
              goto LABEL_300;
            }
          }
          memmove(v157, v154, v156);
LABEL_300:
          *((unsigned char *)v157 + v156) = 0;
          long long v166 = &v654[v146 + v150 - *((int *)v151 + 1)];
          if (*((unsigned __int16 *)v166 + 2) >= 7u && (uint64_t v167 = *((unsigned __int16 *)v166 + 5)) != 0) {
            uint64_t v168 = *(unsigned int *)&v654[v146 + 4 + v150 + v167];
          }
          else {
            uint64_t v168 = 0;
          }
          int v169 = SHIBYTE(v663.__r_.__value_.__r.__words[2]);
          int v4 = v660;
          if (SHIBYTE(v663.__r_.__value_.__r.__words[2]) < 0) {
            std::string::__init_copy_ctor_external((std::string *)__p, v663.__r_.__value_.__l.__data_, v663.__r_.__value_.__l.__size_);
          }
          else {
            *(std::string *)long long __p = v663;
          }
          *unint64_t v148 = 0;
          *(void *)((char *)v148 + 5) = 0;
          *(void *)&__p[24] = v168;
          uint64_t v686 = a1;
          int v687 = 4;
          *(_OWORD *)unint64_t v149 = 0u;
          *((_OWORD *)v149 + 1) = 0u;
          *((_OWORD *)v149 + 2) = 0u;
          v149[12] = 0;
          std::__hash_table<std::__hash_value_type<std::string,AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::ExternalSymbolInfo>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::ExternalSymbolInfo>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::ExternalSymbolInfo>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::ExternalSymbolInfo>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::ExternalSymbolInfo>>((uint64_t)v656, (uint64_t)__p, (uint64_t)__p);
          if ((__p[23] & 0x80000000) != 0)
          {
            operator delete(*(void **)__p);
            if (v169 < 0) {
              goto LABEL_309;
            }
          }
          else if (v169 < 0)
          {
LABEL_309:
            operator delete(v663.__r_.__value_.__l.__data_);
          }
          v146 += 4;
        }
        while (v147 != v146);
      }
    }
  }
  unsigned __int32 v170 = (uint64_t *)*((void *)v4 + 176);
  if (v170)
  {
    while (2)
    {
      int v172 = (const char *)(v170 + 2);
      if (*((char *)v170 + 39) < 0) {
        int v172 = *(const char **)v172;
      }
      uint64_t v173 = (int *)AGCDeserializedReply::getBackendMetadataFBPtr(v4, v172);
      int v174 = v173;
      int v175 = (unsigned __int16 *)((char *)v173 - *v173);
      if (*v175 >= 5u && (uint64_t v176 = v175[2]) != 0) {
        BOOL v177 = (int *)((char *)v173 + v176 + *(unsigned int *)((char *)v173 + v176));
      }
      else {
        BOOL v177 = 0;
      }
      uint64_t v178 = (unsigned __int16 *)((char *)v177 - *v177);
      int v4 = v660;
      if (*v178 < 0x49u || !v178[36] || !*((unsigned char *)v177 + v178[36])) {
        goto LABEL_314;
      }
      uint64_t v179 = v178[2];
      if (v179) {
        LODWORD(v179) = *(int *)((char *)v177 + v179);
      }
      if (*(_DWORD *)(a1 + 48) > v179) {
        LODWORD(v179) = *(_DWORD *)(a1 + 48);
      }
      *(_DWORD *)(a1 + 48) = v179;
      int v180 = (unsigned __int16 *)((char *)v177 - *v177);
      if (*v180 < 0x51u)
      {
        LODWORD(v181) = 0;
      }
      else
      {
        uint64_t v181 = v180[40];
        if (v181) {
          LODWORD(v181) = *(int *)((char *)v177 + v181);
        }
      }
      if (*(_DWORD *)(a1 + 52) > v181) {
        LODWORD(v181) = *(_DWORD *)(a1 + 52);
      }
      *(_DWORD *)(a1 + 52) = v181;
      uint32x2_t v182 = (unsigned __int16 *)((char *)v177 - *v177);
      if (*v182 >= 0x21u && (uint64_t v183 = v182[16]) != 0) {
        int v184 = *(int *)((char *)v177 + v183);
      }
      else {
        int v184 = 0;
      }
      {
        getAdditionalSpillBufferBytes(void)::extra = 0;
      }
      int v185 = getAdditionalSpillBufferBytes(void)::extra + v184;
      if (*(_DWORD *)(a1 + 56) > (getAdditionalSpillBufferBytes(void)::extra + v184)) {
        int v185 = *(_DWORD *)(a1 + 56);
      }
      *(_DWORD *)(a1 + 56) = v185;
      unint64_t v186 = (unsigned __int16 *)((char *)v177 - *v177);
      unsigned int v187 = *v186;
      if (v187 >= 0x25)
      {
        if (v186[18] && *((unsigned char *)v177 + v186[18]))
        {
          *(unsigned char *)(a1 + 172) = 1;
          if (v187 >= 0x27)
          {
            LODWORD(v188) = v186[19];
LABEL_354:
            if (v188) {
              LOBYTE(v188) = *((unsigned char *)v177 + v188) != 0;
            }
            *(unsigned char *)(a1 + 177) |= v188;
            if (v187 >= 0x3F)
            {
              uint64_t v190 = v186[31];
              if (v186[31])
              {
                uint64_t v191 = (unsigned int *)((char *)v177 + v190 + *(unsigned int *)((char *)v177 + v190));
                uint64_t v190 = *v191;
                if (v190)
                {
                  float v192 = v191 + 1;
                  while (1)
                  {
                    unsigned int v194 = *v192++;
                    char v193 = v194;
                    if (v194 < 0x36 && ((0x3F000000000777uLL >> v193) & 1) != 0) {
                      break;
                    }
                    if (!--v190) {
                      goto LABEL_364;
                    }
                  }
                  LOBYTE(v190) = 1;
                }
              }
LABEL_364:
              *(unsigned char *)(a1 + 174) |= v190;
              if (v187 >= 0x4D)
              {
                uint64_t v195 = v186[38];
                if (v195) {
                  LODWORD(v195) = *(int *)((char *)v177 + v195);
                }
LABEL_368:
                if (*(_DWORD *)(a1 + 60) > v195) {
                  LODWORD(v195) = *(_DWORD *)(a1 + 60);
                }
                *(_DWORD *)(a1 + 60) = v195;
                unint64_t v196 = (unsigned __int16 *)((char *)v177 - *v177);
                if (*v196 < 0x53u)
                {
                  LODWORD(v197) = 0;
                }
                else
                {
                  uint64_t v197 = v196[41];
                  if (v197) {
                    LODWORD(v197) = *(int *)((char *)v177 + v197);
                  }
                }
                if (*(_DWORD *)(a1 + 64) > v197) {
                  LODWORD(v197) = *(_DWORD *)(a1 + 64);
                }
                *(_DWORD *)(a1 + 64) = v197;
                unint64_t v198 = (unsigned __int16 *)((char *)v174 - *v174);
                if (*v198 >= 0xDu)
                {
                  uint64_t v199 = v198[6];
                  if (v199)
                  {
                    uint64_t v200 = (int *)((char *)v174 + v199 + *(unsigned int *)((char *)v174 + v199));
                    BOOL v201 = (unsigned __int16 *)((char *)v200 - *v200);
                    v171 = *v201 >= 0x29u && (uint64_t v202 = v201[20]) != 0 && *((unsigned char *)v200 + v202) != 0;
                    *(unsigned char *)(a1 + 175) |= v171;
                  }
                }
LABEL_314:
                unsigned __int32 v170 = (uint64_t *)*v170;
                if (!v170) {
                  goto LABEL_383;
                }
                continue;
              }
            }
          }
        }
        else if (v187 >= 0x27)
        {
          uint64_t v188 = v186[19];
          if (v186[19] && *((unsigned char *)v177 + v188))
          {
            LOBYTE(v189) = 1;
          }
          else
          {
            if (v187 < 0x29) {
              goto LABEL_354;
            }
            uint64_t v189 = v186[20];
            if (v186[20]) {
              LOBYTE(v189) = *((unsigned char *)v177 + v189) != 0;
            }
          }
          *(unsigned char *)(a1 + 172) |= v189;
          goto LABEL_354;
        }
      }
      break;
    }
    LODWORD(v195) = 0;
    goto LABEL_368;
  }
LABEL_383:
  if (*((void *)v4 + 28))
  {
    if (*((void *)v4 + 29)) {
      size_t v203 = (unsigned int **)((char *)v4 + 224);
    }
    else {
      size_t v203 = (unsigned int **)((char *)v4 + 784);
    }
  }
  else
  {
    size_t v203 = (unsigned int **)((char *)v4 + 784);
  }
  BOOL v205 = *v203;
  size_t v204 = v203[1];
  if (v205) {
    BOOL v206 = v204 == 0;
  }
  else {
    BOOL v206 = 1;
  }
  if (v206) {
    uint64_t v207 = 0;
  }
  else {
    uint64_t v207 = (int *)((char *)v205 + *v205);
  }
  unint64_t v208 = (unsigned __int16 *)((char *)v207 - *v207);
  if (*v208 >= 5u && (uint64_t v209 = v208[2]) != 0) {
    uint64_t v210 = (int *)((char *)v207 + v209 + *(unsigned int *)((char *)v207 + v209));
  }
  else {
    uint64_t v210 = 0;
  }
  BOOL v211 = (unsigned __int16 *)((char *)v210 - *v210);
  unsigned int v212 = *v211;
  if (v212 < 0x67)
  {
    unint64_t v217 = 0;
    unint64_t v216 = 0;
    unint64_t v646 = 0;
    unint64_t v650 = 0;
    unint64_t v214 = 0;
    goto LABEL_433;
  }
  uint64_t v213 = v211[51];
  if (!v211[51])
  {
    unint64_t v214 = 0;
    if (v212 < 0x6F) {
      goto LABEL_411;
    }
LABEL_401:
    if (v211[55])
    {
      unint64_t v646 = *(void *)((char *)v210 + v211[55]);
      uint64_t v215 = v211[52];
      if (!v211[52]) {
        goto LABEL_413;
      }
      goto LABEL_403;
    }
    unint64_t v646 = 0;
    uint64_t v215 = v211[52];
    if (v211[52]) {
      goto LABEL_403;
    }
LABEL_413:
    unint64_t v216 = 0;
    if (v212 < 0x6B) {
      goto LABEL_414;
    }
LABEL_404:
    if (v211[53])
    {
      unint64_t v217 = *(void *)((char *)v210 + v211[53]);
      if (v212 >= 0x6D) {
        goto LABEL_406;
      }
    }
    else
    {
      unint64_t v217 = 0;
      if (v212 >= 0x6D)
      {
LABEL_406:
        if (v211[54])
        {
          unint64_t v650 = *(void *)((char *)v210 + v211[54]);
          int v218 = 1;
          if (v211[51]) {
            goto LABEL_415;
          }
        }
        else
        {
          unint64_t v650 = 0;
          int v218 = 1;
          if (v211[51]) {
            goto LABEL_415;
          }
        }
        goto LABEL_417;
      }
    }
    unint64_t v650 = 0;
    int v218 = 0;
    if (v211[51]) {
      goto LABEL_415;
    }
    goto LABEL_417;
  }
  unint64_t v214 = *(void *)((char *)v210 + v213);
  if (v212 >= 0x6F) {
    goto LABEL_401;
  }
LABEL_411:
  if (v212 < 0x69)
  {
    int v218 = 0;
    unint64_t v646 = 0;
    unint64_t v650 = 0;
    unint64_t v216 = 0;
    unint64_t v217 = 0;
    if (v211[51]) {
      goto LABEL_415;
    }
  }
  else
  {
    unint64_t v646 = 0;
    uint64_t v215 = v211[52];
    if (!v211[52]) {
      goto LABEL_413;
    }
LABEL_403:
    unint64_t v216 = *(void *)((char *)v210 + v215);
    if (v212 >= 0x6B) {
      goto LABEL_404;
    }
LABEL_414:
    unint64_t v650 = 0;
    unint64_t v217 = 0;
    int v218 = 0;
    if (v211[51])
    {
LABEL_415:
      uint64_t v219 = *(void *)((char *)v210 + v213);
      goto LABEL_418;
    }
  }
LABEL_417:
  uint64_t v219 = 0;
LABEL_418:
  *(void *)(a1 + 488) |= v219;
  if (v212 < 0x6F)
  {
    if (v212 >= 0x69) {
      goto LABEL_423;
    }
    uint64_t v221 = 0;
LABEL_430:
    *(void *)(a1 + 496) |= v221;
    if (v218) {
      goto LABEL_431;
    }
    goto LABEL_433;
  }
  uint64_t v220 = v211[55];
  if (v211[55]) {
    uint64_t v220 = *(void *)((char *)v210 + v220);
  }
  *(void *)(a1 + 520) |= v220;
LABEL_423:
  uint64_t v221 = v211[52];
  if (v211[52]) {
    uint64_t v221 = *(void *)((char *)v210 + v221);
  }
  if (v212 < 0x6B || !v211[53]) {
    goto LABEL_430;
  }
  uint64_t v222 = *(void *)(a1 + 504) | *(void *)((char *)v210 + v211[53]);
  *(void *)(a1 + 496) |= v221;
  *(void *)(a1 + 504) = v222;
  if (v218)
  {
LABEL_431:
    uint64_t v223 = v211[54];
    if (v223)
    {
      uint64_t v224 = *(void *)((char *)v210 + v223);
      goto LABEL_434;
    }
  }
LABEL_433:
  uint64_t v224 = 0;
LABEL_434:
  *(void *)(a1 + 512) |= v224;
  unsigned int v225 = (uint64_t *)*((void *)v4 + 176);
  v655 = (int8x8_t *)((char *)v4 + 224);
  if (v225)
  {
    while (1)
    {
      int v228 = (const char *)(v225 + 2);
      if (*((char *)v225 + 39) < 0)
      {
        BOOL v230 = (const void *)v225[2];
        unint64_t v229 = v225[3];
      }
      else
      {
        unint64_t v229 = *((unsigned __int8 *)v225 + 39);
        BOOL v230 = v225 + 2;
      }
      if (v229 >= v229 - 3) {
        size_t v231 = v229 - 3;
      }
      else {
        size_t v231 = v229;
      }
      if (v231 > 0x7FFFFFFFFFFFFFF7) {
        abort();
      }
      if (v231 >= 0x17)
      {
        uint64_t v233 = (v231 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v231 | 7) != 0x17) {
          uint64_t v233 = v231 | 7;
        }
        uint64_t v234 = v233 + 1;
        unint64_t v232 = operator new(v233 + 1);
        *(void *)&__p[16] = v234 | 0x8000000000000000;
        *(void *)long long __p = v232;
        *(void *)&__p[8] = v231;
      }
      else
      {
        __p[23] = v231;
        unint64_t v232 = __p;
        if (!v231) {
          goto LABEL_456;
        }
      }
      memmove(v232, v230, v231);
LABEL_456:
      v232[v231] = 0;
      unsigned int v235 = std::__hash_table<std::__hash_value_type<std::string,AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::ExternalSymbolInfo>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::ExternalSymbolInfo>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::ExternalSymbolInfo>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::ExternalSymbolInfo>>>::find<std::string>(v656, (uint64_t)__p);
      if (!v235) {
        goto LABEL_440;
      }
      __int16 v236 = v235;
      if (*((char *)v225 + 39) < 0) {
        int v228 = *(const char **)v228;
      }
      BOOL v237 = (int *)AGCDeserializedReply::getBackendMetadataFBPtr(v660, v228);
      uint64_t v238 = (unsigned __int16 *)((char *)v237 - *v237);
      if (*v238 < 5u) {
        goto LABEL_440;
      }
      uint64_t v239 = v238[2];
      if (!v239) {
        goto LABEL_440;
      }
      uint64_t v240 = (int *)((char *)v237 + v239 + *(unsigned int *)((char *)v237 + v239));
      long long v241 = (unsigned __int16 *)((char *)v240 - *v240);
      unsigned int v242 = *v241;
      if (v242 < 0x67)
      {
LABEL_475:
        int v248 = 0;
        uint64_t v246 = 0;
        BOOL v244 = 0;
        int v249 = 0;
        uint64_t v247 = 0;
        goto LABEL_481;
      }
      uint64_t v243 = v241[51];
      if (v241[51]) {
        uint64_t v243 = *(void *)((char *)v240 + v243);
      }
      v236[11] |= v243;
      BOOL v244 = v242 > 0x6E;
      if (v242 < 0x6F)
      {
        if (v242 < 0x69) {
          goto LABEL_475;
        }
      }
      else
      {
        uint64_t v245 = v241[55];
        if (v241[55]) {
          uint64_t v245 = *(void *)((char *)v240 + v245);
        }
        v236[15] |= v245;
      }
      if (v241[52])
      {
        uint64_t v246 = *(void *)((char *)v240 + v241[52]);
        if (v242 >= 0x6B) {
          goto LABEL_473;
        }
      }
      else
      {
        uint64_t v246 = 0;
        if (v242 >= 0x6B)
        {
LABEL_473:
          if (v241[53]) {
            uint64_t v247 = *(void *)((char *)v240 + v241[53]);
          }
          else {
            uint64_t v247 = 0;
          }
          int v248 = 1;
          goto LABEL_480;
        }
      }
      int v248 = 0;
      uint64_t v247 = 0;
LABEL_480:
      int v249 = 1;
LABEL_481:
      uint64_t v250 = v236[13] | v247;
      v236[12] |= v246;
      v236[13] = v250;
      if (v242 < 0x6D)
      {
        if (v242 < 0x67)
        {
          if (v242 < 0x49) {
            goto LABEL_440;
          }
          uint64_t v257 = v241[36];
          if (!v241[36]) {
            goto LABEL_440;
          }
          goto LABEL_509;
        }
      }
      else
      {
        uint64_t v251 = v241[54];
        if (v241[54]) {
          uint64_t v251 = *(void *)((char *)v240 + v251);
        }
        v236[14] |= v251;
      }
      uint64_t v252 = v241[51];
      if (v241[51]) {
        uint64_t v252 = *(void *)((char *)v240 + v252);
      }
      if (v244)
      {
        uint64_t v253 = v241[55];
        if (v241[55]) {
          uint64_t v253 = *(void *)((char *)v240 + v253);
        }
        v646 |= v253;
      }
      else if (!v249)
      {
        uint64_t v254 = 0;
        uint64_t v255 = 0;
        if (v242 < 0x6D)
        {
LABEL_507:
          uint64_t v256 = 0;
          goto LABEL_508;
        }
        goto LABEL_501;
      }
      uint64_t v254 = v241[52];
      if (v241[52]) {
        uint64_t v254 = *(void *)((char *)v240 + v254);
      }
      if (v248)
      {
        uint64_t v255 = v241[53];
        if (v241[53])
        {
          uint64_t v255 = *(void *)((char *)v240 + v255);
          if (v242 < 0x6D) {
            goto LABEL_507;
          }
          goto LABEL_501;
        }
      }
      else
      {
        uint64_t v255 = 0;
      }
      if (v242 < 0x6D) {
        goto LABEL_507;
      }
LABEL_501:
      uint64_t v256 = v241[54];
      if (v241[54]) {
        uint64_t v256 = *(void *)((char *)v240 + v256);
      }
LABEL_508:
      v214 |= v252;
      v216 |= v254;
      v217 |= v255;
      v650 |= v256;
      uint64_t v257 = v241[36];
      if (!v241[36]) {
        goto LABEL_440;
      }
LABEL_509:
      if (!*((unsigned char *)v240 + v257)) {
        goto LABEL_440;
      }
      if (v242 < 0x67) {
        goto LABEL_438;
      }
      uint64_t v258 = v241[51];
      if (v241[51]) {
        uint64_t v258 = *(void *)((char *)v240 + v258);
      }
      *(void *)(a1 + 488) |= v258;
      if (v244)
      {
        uint64_t v259 = v241[55];
        if (v241[55]) {
          uint64_t v259 = *(void *)((char *)v240 + v259);
        }
        *(void *)(a1 + 520) |= v259;
      }
      else if (!v249)
      {
        uint64_t v260 = 0;
LABEL_524:
        uint64_t v261 = 0;
        goto LABEL_525;
      }
      uint64_t v260 = v241[52];
      if (v241[52]) {
        uint64_t v260 = *(void *)((char *)v240 + v260);
      }
      if (!v248) {
        goto LABEL_524;
      }
      uint64_t v261 = v241[53];
      if (v241[53]) {
        uint64_t v261 = *(void *)((char *)v240 + v261);
      }
LABEL_525:
      uint64_t v262 = *(void *)(a1 + 504) | v261;
      *(void *)(a1 + 496) |= v260;
      *(void *)(a1 + 504) = v262;
      if (v242 >= 0x6D)
      {
        uint64_t v263 = v241[54];
        if (v263)
        {
          uint64_t v227 = *(void *)((char *)v240 + v263);
          goto LABEL_439;
        }
      }
LABEL_438:
      uint64_t v227 = 0;
LABEL_439:
      *(void *)(a1 + 512) |= v227;
LABEL_440:
      if ((__p[23] & 0x80000000) != 0)
      {
        operator delete(*(void **)__p);
        unsigned int v225 = (uint64_t *)*v225;
        if (!v225) {
          break;
        }
      }
      else
      {
        unsigned int v225 = (uint64_t *)*v225;
        if (!v225) {
          break;
        }
      }
    }
  }
  v682 = operator new(0x20uLL);
  long long v683 = xmmword_242EA7C10;
  strcpy((char *)v682, "agc.global_buffer_pointers.");
  v696[0] = &unk_26F8524F8;
  v697 = v696;
  AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::LinkInfo::initialize<AGCCodeTranslatorVisibleFunctionTypesG11,&(AGCCodeTranslatorG11::GetCompileReply(void const*))>(AGCDeserializedReply const&,AGX::HAL200::Device &,char const*,BOOL)::{lambda(AGCCodeTranslatorVisibleFunctionTypesG11,std::string,std::function<void ()(AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::ExternalSymbolInfo &,unsigned int)>)#1}::operator()<AGX::ArgumentMask<64ul>>(a1, v214, (uint64_t)&v682, (uint64_t)v696);
  if (v697 == v696)
  {
    (*(void (**)(void *))(v696[0] + 32))(v696);
    uint64_t v226 = a1 + 232;
  }
  else
  {
    uint64_t v226 = a1 + 232;
    if (v697) {
      (*(void (**)(void))(*v697 + 40))();
    }
  }
  if (SHIBYTE(v683) < 0) {
    operator delete(v682);
  }
  unint64_t v681 = v216;
  unint64_t v680 = v217;
  HIBYTE(v679[2]) = 19;
  strcpy((char *)v679, "agc.global_texture.");
  v694[0] = &unk_26F852540;
  v695 = v694;
  while (1)
  {
    if (v216)
    {
      unsigned int v264 = __clz(__rbit64(v216));
      uint64_t v265 = &v681;
      unsigned int v266 = v264;
      goto LABEL_537;
    }
    unint64_t v216 = v680;
    if (!v680) {
      break;
    }
    unsigned int v264 = __clz(__rbit64(v680));
    unsigned int v266 = v264 | 0x40;
    uint64_t v265 = &v680;
LABEL_537:
    *uint64_t v265 = v216 & ~(1 << v264);
    std::to_string((std::string *)__p, v266);
    if (SHIBYTE(v679[2]) >= 0) {
      uint64_t v267 = (const std::string::value_type *)v679;
    }
    else {
      uint64_t v267 = (const std::string::value_type *)v679[0];
    }
    if (SHIBYTE(v679[2]) >= 0) {
      std::string::size_type v268 = HIBYTE(v679[2]);
    }
    else {
      std::string::size_type v268 = (std::string::size_type)v679[1];
    }
    BOOL v269 = std::string::insert((std::string *)__p, 0, v267, v268);
    std::string v663 = *v269;
    v269->__r_.__value_.__l.__size_ = 0;
    v269->__r_.__value_.__r.__words[2] = 0;
    v269->__r_.__value_.__r.__words[0] = 0;
    if ((__p[23] & 0x80000000) != 0) {
      operator delete(*(void **)__p);
    }
    uint64_t v270 = *(void *)(a1 + 32);
    int v271 = SHIBYTE(v663.__r_.__value_.__r.__words[2]);
    if (SHIBYTE(v663.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external((std::string *)__p, v663.__r_.__value_.__l.__data_, v663.__r_.__value_.__l.__size_);
    }
    else {
      *(std::string *)long long __p = v663;
    }
    *(void *)&__p[24] = 0;
    memset(v685, 0, 13);
    uint64_t v686 = v270;
    int v687 = 5;
    memset(v688, 0, 52);
    std::__hash_table<std::__hash_value_type<std::string,AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::ExternalSymbolInfo>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::ExternalSymbolInfo>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::ExternalSymbolInfo>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::ExternalSymbolInfo>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::ExternalSymbolInfo>>(v226, (uint64_t)__p, (uint64_t)__p);
    if ((__p[23] & 0x80000000) != 0) {
      operator delete(*(void **)__p);
    }
    uint64_t v272 = std::__hash_table<std::__hash_value_type<std::string,AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::ExternalSymbolInfo>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::ExternalSymbolInfo>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::ExternalSymbolInfo>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::ExternalSymbolInfo>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v226, (uint64_t)&v663, (uint64_t)&v663);
    *(_DWORD *)long long __p = v266;
    if (!v695)
    {
      std::__throw_bad_function_call[abi:nn180100]();
      __break(1u);
      return;
    }
    (*(void (**)(void *, char *, unsigned char *))(*v695 + 48))(v695, v272 + 40, __p);
    if (v271 < 0) {
      operator delete(v663.__r_.__value_.__l.__data_);
    }
    unint64_t v216 = v681;
  }
  if (v695 == v694)
  {
    (*(void (**)(void *))(v694[0] + 32))(v694);
    unint64_t v273 = v646;
    if ((SHIBYTE(v679[2]) & 0x80000000) == 0) {
      goto LABEL_557;
    }
    goto LABEL_565;
  }
  unint64_t v273 = v646;
  if (v695) {
    (*(void (**)(void))(*v695 + 40))();
  }
  if (SHIBYTE(v679[2]) < 0) {
LABEL_565:
  }
    operator delete(v679[0]);
LABEL_557:
  HIBYTE(v678[2]) = 19;
  strcpy((char *)v678, "agc.global_sampler.");
  v692[0] = &unk_26F852588;
  v693 = v692;
  AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::LinkInfo::initialize<AGCCodeTranslatorVisibleFunctionTypesG11,&(AGCCodeTranslatorG11::GetCompileReply(void const*))>(AGCDeserializedReply const&,AGX::HAL200::Device &,char const*,BOOL)::{lambda(AGCCodeTranslatorVisibleFunctionTypesG11,std::string,std::function<void ()(AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::ExternalSymbolInfo &,unsigned int)>)#1}::operator()<AGX::ArgumentMask<64ul>>(a1, v650, (uint64_t)v678, (uint64_t)v692);
  if (v693 == v692)
  {
    (*(void (**)(void *))(v692[0] + 32))(v692);
    if ((SHIBYTE(v678[2]) & 0x80000000) == 0) {
      goto LABEL_561;
    }
    goto LABEL_567;
  }
  if (v693) {
    (*(void (**)(void))(*v693 + 40))();
  }
  if (SHIBYTE(v678[2]) < 0) {
LABEL_567:
  }
    operator delete(v678[0]);
LABEL_561:
  v676 = operator new(0x20uLL);
  long long v677 = xmmword_242EA7C50;
  strcpy((char *)v676, "agc.local_buffer_pointers.");
  v690[0] = &unk_26F8525D0;
  v691 = v690;
  AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::LinkInfo::initialize<AGCCodeTranslatorVisibleFunctionTypesG11,&(AGCCodeTranslatorG11::GetCompileReply(void const*))>(AGCDeserializedReply const&,AGX::HAL200::Device &,char const*,BOOL)::{lambda(AGCCodeTranslatorVisibleFunctionTypesG11,std::string,std::function<void ()(AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::ExternalSymbolInfo &,unsigned int)>)#1}::operator()<AGX::ArgumentMask<64ul>>(a1, v273, (uint64_t)&v676, (uint64_t)v690);
  if (v691 == v690)
  {
    (*(void (**)(void *))(v690[0] + 32))(v690);
    BOOL v274 = v651;
  }
  else
  {
    BOOL v274 = v651;
    if (v691) {
      (*(void (**)(void))(*v691 + 40))();
    }
  }
  if (SHIBYTE(v677) < 0) {
    operator delete(v676);
  }
  v644 = (char **)(a1 + 312);
  if (*(void *)v274)
  {
    if (*((void *)v660 + 4)) {
      BOOL v275 = v274;
    }
    else {
      BOOL v275 = (char *)v660 + 584;
    }
  }
  else
  {
    BOOL v275 = (char *)v660 + 584;
  }
  int v276 = *((_DWORD *)v275 + 8);
  if (*((void *)v660 + 18))
  {
    if (*((void *)v660 + 19)) {
      unsigned int v277 = (char *)v660 + 144;
    }
    else {
      unsigned int v277 = (char *)v660 + 704;
    }
  }
  else
  {
    unsigned int v277 = (char *)v660 + 704;
  }
  std::vector<AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::LinkInfo::Relocation,std::allocator<AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::LinkInfo::Relocation>>::reserve((uint64_t)v644, (*((_DWORD *)v277 + 8) + v276));
  v647 = (char **)(a1 + 336);
  if (*(void *)v651)
  {
    unsigned int v278 = v660;
    if (*((void *)v660 + 4)) {
      std::string::size_type v279 = v651;
    }
    else {
      std::string::size_type v279 = (char *)v660 + 584;
    }
  }
  else
  {
    unsigned int v278 = v660;
    std::string::size_type v279 = (char *)v660 + 584;
  }
  int v280 = *((_DWORD *)v279 + 8);
  if (*v655)
  {
    uint64_t v281 = *((void *)v278 + 29);
    uint64_t v282 = (int8x8_t *)((char *)v278 + 784);
    if (v281) {
      uint64_t v283 = v655;
    }
    else {
      uint64_t v283 = v282;
    }
  }
  else
  {
    uint64_t v283 = (int8x8_t *)((char *)v278 + 784);
  }
  std::vector<AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::LinkInfo::Relocation,std::allocator<AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::LinkInfo::Relocation>>::reserve((uint64_t)v647, (v283[4].i32[0] + v280));
  char v642 = 0;
  unsigned __int32 v284 = 0;
  uint64_t v285 = (int8x8_t *)v660;
  v640 = (int8x8_t *)(a1 + 184);
  uint64_t v286 = v651;
  while (2)
  {
    if (!*(void *)v286)
    {
      uint64_t v287 = (char *)v660 + 584;
      if (v284 >= v285[77].i32[0]) {
        goto LABEL_967;
      }
LABEL_601:
      unint64_t v288 = *(void *)(*((void *)v287 + 3) + 8 * v284);
      unsigned int v289 = (v288 >> 60) - 2;
      if (v289 > 0xA) {
        int v290 = 0;
      }
      else {
        int v290 = dword_242EAA3E8[v289];
      }
      unint64_t v291 = HIDWORD(v288) & 0xFFFFFF;
      if ((v288 & 0x800000000000000) != 0)
      {
        uint64_t v296 = *(unsigned int *)(v658 + 16 * v291);
        unsigned __int8 v297 = (char *)(v657 + v296);
        switch(v290)
        {
          case 0:
            if ((v288 & 0x100000000000000) != 0) {
              int v298 = 16;
            }
            else {
              int v298 = 12;
            }
            *(_DWORD *)long long __p = v298;
            size_t v299 = strlen(v297);
            if (v299 > 0x7FFFFFFFFFFFFFF7) {
              abort();
            }
            size_t v300 = v299;
            if (v299 >= 0x17)
            {
              uint64_t v384 = (v299 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v299 | 7) != 0x17) {
                uint64_t v384 = v299 | 7;
              }
              uint64_t v385 = v384 + 1;
              BOOL v301 = operator new(v384 + 1);
              *(void *)&__p[24] = v385 | 0x8000000000000000;
              *(void *)&__p[8] = v301;
              *(void *)&__p[16] = v300;
            }
            else
            {
              __p[31] = v299;
              BOOL v301 = &__p[8];
              if (!v299) {
                goto LABEL_833;
              }
            }
            memmove(v301, v297, v300);
LABEL_833:
            v301[v300] = 0;
            v685[0] = v288;
            unint64_t v380 = *(void *)(a1 + 320);
            if (v380 >= *(void *)(a1 + 328)) {
              goto LABEL_858;
            }
            goto LABEL_592;
          case 1:
            *(_DWORD *)long long __p = 16;
            size_t v359 = strlen((const char *)(v657 + v296));
            if (v359 > 0x7FFFFFFFFFFFFFF7) {
              abort();
            }
            size_t v360 = v359;
            if (v359 >= 0x17)
            {
              uint64_t v386 = (v359 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v359 | 7) != 0x17) {
                uint64_t v386 = v359 | 7;
              }
              uint64_t v387 = v386 + 1;
              uint64_t v361 = operator new(v386 + 1);
              *(void *)&__p[24] = v387 | 0x8000000000000000;
              *(void *)&__p[8] = v361;
              *(void *)&__p[16] = v360;
            }
            else
            {
              __p[31] = v359;
              uint64_t v361 = &__p[8];
              if (!v359) {
                goto LABEL_839;
              }
            }
            memmove(v361, v297, v360);
LABEL_839:
            v361[v360] = 0;
            v685[0] = v288;
            unint64_t v380 = *(void *)(a1 + 320);
            if (v380 >= *(void *)(a1 + 328)) {
              goto LABEL_858;
            }
            goto LABEL_592;
          case 2:
            *(_DWORD *)long long __p = 12;
            size_t v353 = strlen((const char *)(v657 + v296));
            if (v353 > 0x7FFFFFFFFFFFFFF7) {
              abort();
            }
            size_t v354 = v353;
            if (v353 >= 0x17)
            {
              uint64_t v378 = (v353 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v353 | 7) != 0x17) {
                uint64_t v378 = v353 | 7;
              }
              uint64_t v379 = v378 + 1;
              uint64_t v355 = operator new(v378 + 1);
              *(void *)&__p[24] = v379 | 0x8000000000000000;
              *(void *)&__p[8] = v355;
              *(void *)&__p[16] = v354;
            }
            else
            {
              __p[31] = v353;
              uint64_t v355 = &__p[8];
              if (!v353) {
                goto LABEL_821;
              }
            }
            memmove(v355, v297, v354);
LABEL_821:
            v355[v354] = 0;
            v685[0] = v288;
            unint64_t v380 = *(void *)(a1 + 320);
            if (v380 >= *(void *)(a1 + 328)) {
              goto LABEL_858;
            }
            goto LABEL_592;
          case 3:
            *(_DWORD *)long long __p = 13;
            size_t v369 = strlen((const char *)(v657 + v296));
            if (v369 > 0x7FFFFFFFFFFFFFF7) {
              abort();
            }
            size_t v370 = v369;
            if (v369 >= 0x17)
            {
              uint64_t v394 = (v369 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v369 | 7) != 0x17) {
                uint64_t v394 = v369 | 7;
              }
              uint64_t v395 = v394 + 1;
              std::string v371 = operator new(v394 + 1);
              *(void *)&__p[24] = v395 | 0x8000000000000000;
              *(void *)&__p[8] = v371;
              *(void *)&__p[16] = v370;
            }
            else
            {
              __p[31] = v369;
              std::string v371 = &__p[8];
              if (!v369) {
                goto LABEL_857;
              }
            }
            memmove(v371, v297, v370);
LABEL_857:
            v371[v370] = 0;
            v685[0] = v288;
            unint64_t v380 = *(void *)(a1 + 320);
            if (v380 < *(void *)(a1 + 328))
            {
LABEL_592:
              *(_DWORD *)unint64_t v380 = *(_DWORD *)__p;
              *(_OWORD *)(v380 + 8) = *(_OWORD *)&__p[8];
              *(void *)(v380 + 24) = *(void *)&__p[24];
              *(_DWORD *)(v380 + 32) = v288;
              *(void *)(a1 + 320) = v380 + 40;
              goto LABEL_593;
            }
LABEL_858:
            v396 = std::vector<AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::LinkInfo::Relocation,std::allocator<AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::LinkInfo::Relocation>>::__push_back_slow_path<AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::LinkInfo::Relocation>(v644, (uint64_t)__p);
            uint64_t v285 = (int8x8_t *)v660;
            int v397 = __p[31];
            *(void *)(a1 + 320) = v396;
            uint64_t v286 = v651;
            if ((v397 & 0x80000000) == 0) {
              goto LABEL_893;
            }
LABEL_859:
            operator delete(*(void **)&__p[8]);
            ++v284;
            continue;
          case 5:
            *(_DWORD *)long long __p = 17;
            size_t v372 = strlen((const char *)(v657 + v296));
            if (v372 > 0x7FFFFFFFFFFFFFF7) {
              abort();
            }
            size_t v373 = v372;
            if (v372 >= 0x17)
            {
              uint64_t v398 = (v372 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v372 | 7) != 0x17) {
                uint64_t v398 = v372 | 7;
              }
              uint64_t v399 = v398 + 1;
              v374 = operator new(v398 + 1);
              *(void *)&__p[24] = v399 | 0x8000000000000000;
              *(void *)&__p[8] = v374;
              *(void *)&__p[16] = v373;
            }
            else
            {
              __p[31] = v372;
              v374 = &__p[8];
              if (!v372) {
                goto LABEL_864;
              }
            }
            memmove(v374, v297, v373);
LABEL_864:
            v374[v373] = 0;
            v685[0] = v288;
            unint64_t v400 = *(void *)(a1 + 320);
            if (v400 >= *(void *)(a1 + 328))
            {
              v419 = std::vector<AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::LinkInfo::Relocation,std::allocator<AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::LinkInfo::Relocation>>::__push_back_slow_path<AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::LinkInfo::Relocation>(v644, (uint64_t)__p);
              uint64_t v285 = (int8x8_t *)v660;
              int v420 = __p[31];
              *(void *)(a1 + 320) = v419;
              uint64_t v286 = v651;
              if (v420 < 0) {
                operator delete(*(void **)&__p[8]);
              }
            }
            else
            {
              *(_DWORD *)unint64_t v400 = *(_DWORD *)__p;
              *(_OWORD *)(v400 + 8) = *(_OWORD *)&__p[8];
              *(void *)(v400 + 24) = *(void *)&__p[24];
              *(_DWORD *)(v400 + 32) = v288;
              *(void *)(a1 + 320) = v400 + 40;
              uint64_t v285 = (int8x8_t *)v660;
              uint64_t v286 = v651;
            }
            char v642 = 1;
            goto LABEL_893;
          case 6:
            *(_DWORD *)long long __p = 1;
            size_t v356 = strlen((const char *)(v657 + v296));
            if (v356 > 0x7FFFFFFFFFFFFFF7) {
              abort();
            }
            size_t v357 = v356;
            if (v356 >= 0x17)
            {
              uint64_t v381 = (v356 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v356 | 7) != 0x17) {
                uint64_t v381 = v356 | 7;
              }
              uint64_t v382 = v381 + 1;
              long long v358 = operator new(v381 + 1);
              *(void *)&__p[24] = v382 | 0x8000000000000000;
              *(void *)&__p[8] = v358;
              *(void *)&__p[16] = v357;
            }
            else
            {
              __p[31] = v356;
              long long v358 = &__p[8];
              if (!v356) {
                goto LABEL_827;
              }
            }
            memmove(v358, v297, v357);
LABEL_827:
            v358[v357] = 0;
            v685[0] = v288;
            unint64_t v383 = *(void *)(a1 + 344);
            if (v383 >= *(void *)(a1 + 352))
            {
              v404 = std::vector<AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::LinkInfo::Relocation,std::allocator<AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::LinkInfo::Relocation>>::__push_back_slow_path<AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::LinkInfo::Relocation>(v647, (uint64_t)__p);
              int v405 = __p[31];
              *(void *)(a1 + 344) = v404;
              if (v405 < 0) {
                operator delete(*(void **)&__p[8]);
              }
            }
            else
            {
              *(_DWORD *)unint64_t v383 = *(_DWORD *)__p;
              *(_OWORD *)(v383 + 8) = *(_OWORD *)&__p[8];
              *(void *)(v383 + 24) = *(void *)&__p[24];
              *(_DWORD *)(v383 + 32) = v288;
              *(void *)(a1 + 344) = v383 + 40;
            }
            *(_DWORD *)long long __p = 22;
            size_t v406 = strlen(v297);
            if (v406 > 0x7FFFFFFFFFFFFFF7) {
              abort();
            }
            size_t v407 = v406;
            if (v406 >= 0x17)
            {
              uint64_t v426 = (v406 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v406 | 7) != 0x17) {
                uint64_t v426 = v406 | 7;
              }
              uint64_t v427 = v426 + 1;
              v408 = operator new(v426 + 1);
              *(void *)&__p[24] = v427 | 0x8000000000000000;
              *(void *)&__p[8] = v408;
              *(void *)&__p[16] = v407;
            }
            else
            {
              __p[31] = v406;
              v408 = &__p[8];
              if (!v406) {
                goto LABEL_904;
              }
            }
            memmove(v408, v297, v407);
LABEL_904:
            v408[v407] = 0;
            v685[0] = -1;
            unint64_t v428 = *(void *)(a1 + 320);
            if (v428 >= *(void *)(a1 + 328))
            {
              v438 = std::vector<AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::LinkInfo::Relocation,std::allocator<AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::LinkInfo::Relocation>>::__push_back_slow_path<AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::LinkInfo::Relocation>(v644, (uint64_t)__p);
              int v439 = __p[31];
              *(void *)(a1 + 320) = v438;
              if (v439 < 0) {
                operator delete(*(void **)&__p[8]);
              }
            }
            else
            {
              *(_DWORD *)unint64_t v428 = *(_DWORD *)__p;
              *(_OWORD *)(v428 + 8) = *(_OWORD *)&__p[8];
              *(void *)(v428 + 24) = *(void *)&__p[24];
              *(_DWORD *)(v428 + 32) = -1;
              *(void *)(a1 + 320) = v428 + 40;
            }
            goto LABEL_926;
          case 7:
            *(_DWORD *)long long __p = 0;
            size_t v362 = strlen((const char *)(v657 + v296));
            if (v362 > 0x7FFFFFFFFFFFFFF7) {
              abort();
            }
            size_t v363 = v362;
            if (v362 >= 0x17)
            {
              uint64_t v388 = (v362 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v362 | 7) != 0x17) {
                uint64_t v388 = v362 | 7;
              }
              uint64_t v389 = v388 + 1;
              int v364 = operator new(v388 + 1);
              *(void *)&__p[24] = v389 | 0x8000000000000000;
              *(void *)&__p[8] = v364;
              *(void *)&__p[16] = v363;
            }
            else
            {
              __p[31] = v362;
              int v364 = &__p[8];
              if (!v362) {
                goto LABEL_845;
              }
            }
            memmove(v364, v297, v363);
LABEL_845:
            v364[v363] = 0;
            v685[0] = v288;
            unint64_t v390 = *(void *)(a1 + 344);
            if (v390 >= *(void *)(a1 + 352))
            {
              v409 = std::vector<AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::LinkInfo::Relocation,std::allocator<AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::LinkInfo::Relocation>>::__push_back_slow_path<AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::LinkInfo::Relocation>(v647, (uint64_t)__p);
              int v410 = __p[31];
              *(void *)(a1 + 344) = v409;
              if (v410 < 0) {
                operator delete(*(void **)&__p[8]);
              }
            }
            else
            {
              *(_DWORD *)unint64_t v390 = *(_DWORD *)__p;
              *(_OWORD *)(v390 + 8) = *(_OWORD *)&__p[8];
              *(void *)(v390 + 24) = *(void *)&__p[24];
              *(_DWORD *)(v390 + 32) = v288;
              *(void *)(a1 + 344) = v390 + 40;
            }
            *(_DWORD *)long long __p = 21;
            size_t v411 = strlen(v297);
            if (v411 > 0x7FFFFFFFFFFFFFF7) {
              abort();
            }
            size_t v412 = v411;
            if (v411 >= 0x17)
            {
              uint64_t v429 = (v411 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v411 | 7) != 0x17) {
                uint64_t v429 = v411 | 7;
              }
              uint64_t v430 = v429 + 1;
              v413 = operator new(v429 + 1);
              *(void *)&__p[24] = v430 | 0x8000000000000000;
              *(void *)&__p[8] = v413;
              *(void *)&__p[16] = v412;
            }
            else
            {
              __p[31] = v411;
              v413 = &__p[8];
              if (!v411) {
                goto LABEL_910;
              }
            }
            memmove(v413, v297, v412);
LABEL_910:
            v413[v412] = 0;
            v685[0] = -1;
            unint64_t v431 = *(void *)(a1 + 320);
            if (v431 >= *(void *)(a1 + 328))
            {
              v440 = std::vector<AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::LinkInfo::Relocation,std::allocator<AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::LinkInfo::Relocation>>::__push_back_slow_path<AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::LinkInfo::Relocation>(v644, (uint64_t)__p);
              int v441 = __p[31];
              *(void *)(a1 + 320) = v440;
              if (v441 < 0) {
                operator delete(*(void **)&__p[8]);
              }
            }
            else
            {
              *(_DWORD *)unint64_t v431 = *(_DWORD *)__p;
              *(_OWORD *)(v431 + 8) = *(_OWORD *)&__p[8];
              *(void *)(v431 + 24) = *(void *)&__p[24];
              *(_DWORD *)(v431 + 32) = -1;
              *(void *)(a1 + 320) = v431 + 40;
            }
            AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::GOTEntryLayout::insert(v640, v297, 8);
            goto LABEL_593;
          case 8:
            AGX::ESLInstructionEncoderGen3<AGX::HAL200::Encoders>::LoadImmediate::LoadImmediate((uint64_t)__p, (const unsigned __int8 *)(v631 + (int)v288));
            int v365 = *(_DWORD *)__p;
            *(_DWORD *)long long __p = 2;
            size_t v366 = strlen(v297);
            if (v366 > 0x7FFFFFFFFFFFFFF7) {
              abort();
            }
            size_t v367 = v366;
            if (v366 >= 0x17)
            {
              uint64_t v391 = (v366 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v366 | 7) != 0x17) {
                uint64_t v391 = v366 | 7;
              }
              uint64_t v392 = v391 + 1;
              int v368 = operator new(v391 + 1);
              *(void *)&__p[24] = v392 | 0x8000000000000000;
              *(void *)&__p[8] = v368;
              *(void *)&__p[16] = v367;
            }
            else
            {
              __p[31] = v366;
              int v368 = &__p[8];
              if (!v366) {
                goto LABEL_851;
              }
            }
            memmove(v368, v297, v367);
LABEL_851:
            v368[v367] = 0;
            v685[0] = v288;
            unint64_t v393 = *(void *)(a1 + 344);
            if (v393 >= *(void *)(a1 + 352))
            {
              v414 = std::vector<AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::LinkInfo::Relocation,std::allocator<AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::LinkInfo::Relocation>>::__push_back_slow_path<AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::LinkInfo::Relocation>(v647, (uint64_t)__p);
              int v415 = __p[31];
              *(void *)(a1 + 344) = v414;
              if (v415 < 0) {
                operator delete(*(void **)&__p[8]);
              }
            }
            else
            {
              *(_DWORD *)unint64_t v393 = *(_DWORD *)__p;
              *(_OWORD *)(v393 + 8) = *(_OWORD *)&__p[8];
              *(void *)(v393 + 24) = *(void *)&__p[24];
              *(_DWORD *)(v393 + 32) = v288;
              *(void *)(a1 + 344) = v393 + 40;
            }
            *(_DWORD *)long long __p = 23;
            size_t v416 = strlen(v297);
            if (v416 > 0x7FFFFFFFFFFFFFF7) {
              abort();
            }
            size_t v417 = v416;
            if (v416 >= 0x17)
            {
              uint64_t v432 = (v416 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v416 | 7) != 0x17) {
                uint64_t v432 = v416 | 7;
              }
              uint64_t v433 = v432 + 1;
              v418 = operator new(v432 + 1);
              *(void *)&__p[24] = v433 | 0x8000000000000000;
              *(void *)&__p[8] = v418;
              *(void *)&__p[16] = v417;
            }
            else
            {
              __p[31] = v416;
              v418 = &__p[8];
              if (!v416) {
                goto LABEL_916;
              }
            }
            memmove(v418, v297, v417);
LABEL_916:
            v418[v417] = 0;
            v685[0] = v365;
            unint64_t v434 = *(void *)(a1 + 320);
            if (v434 >= *(void *)(a1 + 328))
            {
              v442 = std::vector<AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::LinkInfo::Relocation,std::allocator<AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::LinkInfo::Relocation>>::__push_back_slow_path<AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::LinkInfo::Relocation>(v644, (uint64_t)__p);
              int v443 = __p[31];
              *(void *)(a1 + 320) = v442;
              if (v443 < 0) {
                operator delete(*(void **)&__p[8]);
              }
            }
            else
            {
              *(_DWORD *)unint64_t v434 = *(_DWORD *)__p;
              *(_OWORD *)(v434 + 8) = *(_OWORD *)&__p[8];
              *(void *)(v434 + 24) = *(void *)&__p[24];
              *(_DWORD *)(v434 + 32) = v365;
              *(void *)(a1 + 320) = v434 + 40;
            }
            AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::GOTEntryLayout::insert(v640, v297, 2);
            char v642 = 1;
            goto LABEL_593;
          case 9:
            *(_DWORD *)long long __p = 3;
            size_t v375 = strlen((const char *)(v657 + v296));
            if (v375 > 0x7FFFFFFFFFFFFFF7) {
              abort();
            }
            size_t v376 = v375;
            if (v375 >= 0x17)
            {
              uint64_t v401 = (v375 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v375 | 7) != 0x17) {
                uint64_t v401 = v375 | 7;
              }
              uint64_t v402 = v401 + 1;
              v377 = operator new(v401 + 1);
              *(void *)&__p[24] = v402 | 0x8000000000000000;
              *(void *)&__p[8] = v377;
              *(void *)&__p[16] = v376;
            }
            else
            {
              __p[31] = v375;
              v377 = &__p[8];
              if (!v375) {
                goto LABEL_870;
              }
            }
            memmove(v377, v297, v376);
LABEL_870:
            v377[v376] = 0;
            v685[0] = v288;
            unint64_t v403 = *(void *)(a1 + 344);
            if (v403 >= *(void *)(a1 + 352))
            {
              v421 = std::vector<AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::LinkInfo::Relocation,std::allocator<AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::LinkInfo::Relocation>>::__push_back_slow_path<AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::LinkInfo::Relocation>(v647, (uint64_t)__p);
              int v422 = __p[31];
              *(void *)(a1 + 344) = v421;
              if (v422 < 0) {
                operator delete(*(void **)&__p[8]);
              }
            }
            else
            {
              *(_DWORD *)unint64_t v403 = *(_DWORD *)__p;
              *(_OWORD *)(v403 + 8) = *(_OWORD *)&__p[8];
              *(void *)(v403 + 24) = *(void *)&__p[24];
              *(_DWORD *)(v403 + 32) = v288;
              *(void *)(a1 + 344) = v403 + 40;
            }
            *(_DWORD *)long long __p = 22;
            size_t v423 = strlen(v297);
            if (v423 > 0x7FFFFFFFFFFFFFF7) {
              abort();
            }
            size_t v424 = v423;
            if (v423 >= 0x17)
            {
              uint64_t v435 = (v423 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v423 | 7) != 0x17) {
                uint64_t v435 = v423 | 7;
              }
              uint64_t v436 = v435 + 1;
              v425 = operator new(v435 + 1);
              *(void *)&__p[24] = v436 | 0x8000000000000000;
              *(void *)&__p[8] = v425;
              *(void *)&__p[16] = v424;
            }
            else
            {
              __p[31] = v423;
              v425 = &__p[8];
              if (!v423) {
                goto LABEL_922;
              }
            }
            memmove(v425, v297, v424);
LABEL_922:
            v425[v424] = 0;
            v685[0] = -1;
            unint64_t v437 = *(void *)(a1 + 320);
            if (v437 >= *(void *)(a1 + 328))
            {
              v444 = std::vector<AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::LinkInfo::Relocation,std::allocator<AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::LinkInfo::Relocation>>::__push_back_slow_path<AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::LinkInfo::Relocation>(v644, (uint64_t)__p);
              int v445 = __p[31];
              *(void *)(a1 + 320) = v444;
              if (v445 < 0) {
                operator delete(*(void **)&__p[8]);
              }
            }
            else
            {
              *(_DWORD *)unint64_t v437 = *(_DWORD *)__p;
              *(_OWORD *)(v437 + 8) = *(_OWORD *)&__p[8];
              *(void *)(v437 + 24) = *(void *)&__p[24];
              *(_DWORD *)(v437 + 32) = -1;
              *(void *)(a1 + 320) = v437 + 40;
            }
LABEL_926:
            AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::GOTEntryLayout::insert(v640, v297, 4);
            break;
          default:
            goto LABEL_893;
        }
        goto LABEL_593;
      }
      int v292 = HIDWORD(v288) & 0xFFFFFF;
      int8x8_t v293 = v285[220];
      if (v293)
      {
        uint8x8_t v294 = (uint8x8_t)vcnt_s8(v293);
        v294.i16[0] = vaddlv_u8(v294);
        if (v294.u32[0] > 1uLL)
        {
          uint64_t v295 = HIDWORD(v288) & 0xFFFFFF;
          if (*(void *)&v293 <= v291) {
            uint64_t v295 = v291 % *(void *)&v293;
          }
        }
        else
        {
          uint64_t v295 = (v293.i32[0] - 1) & v291;
        }
        uint64_t v302 = *(uint64_t **)(*(void *)&v285[219] + 8 * v295);
        if (v302)
        {
          uint64_t v302 = (uint64_t *)*v302;
          if (v302)
          {
            if (v294.u32[0] < 2uLL)
            {
              while (1)
              {
                uint64_t v304 = v302[1];
                if (v304 == v291)
                {
                  if (*((_DWORD *)v302 + 4) == v292) {
                    goto LABEL_634;
                  }
                }
                else if ((v304 & (*(void *)&v293 - 1)) != v295)
                {
                  goto LABEL_633;
                }
                uint64_t v302 = (uint64_t *)*v302;
                if (!v302) {
                  goto LABEL_634;
                }
              }
            }
            do
            {
              unint64_t v303 = v302[1];
              if (v303 == v291)
              {
                if (*((_DWORD *)v302 + 4) == v292) {
                  break;
                }
              }
              else
              {
                if (v303 >= *(void *)&v293) {
                  v303 %= *(void *)&v293;
                }
                if (v303 != v295) {
                  goto LABEL_633;
                }
              }
              uint64_t v302 = (uint64_t *)*v302;
            }
            while (v302);
          }
        }
      }
      else
      {
LABEL_633:
        uint64_t v302 = 0;
      }
LABEL_634:
      uint64_t v305 = (uint64_t **)(v302 + 3);
      int v306 = *((char *)v302 + 47);
      if (v306 < 0)
      {
        if (v302[4] != 6) {
          goto LABEL_643;
        }
        uint64_t v305 = (uint64_t **)*v305;
      }
      else if (v306 != 6)
      {
        goto LABEL_643;
      }
      int v307 = *(_DWORD *)v305;
      int v308 = *((unsigned __int16 *)v305 + 2);
      if (v307 == 1163157343 && v308 == 21592)
      {
        switch(v290)
        {
          case 0:
            *(_DWORD *)long long __p = 10;
            *(void *)&__p[8] = operator new(0x20uLL);
            *(_OWORD *)&__p[16] = xmmword_242EA7BB0;
            strcpy(*(char **)&__p[8], "(__TEXT append base address)");
            v685[0] = v288;
            unint64_t v332 = *(void *)(a1 + 344);
            if (v332 >= *(void *)(a1 + 352)) {
              goto LABEL_965;
            }
            goto LABEL_939;
          case 1:
            *(_DWORD *)long long __p = 16;
            v446 = (const char *)(v657 + *(unsigned int *)(v658 + 16 * v291));
            size_t v447 = strlen(v446);
            if (v447 > 0x7FFFFFFFFFFFFFF7) {
              abort();
            }
            size_t v448 = v447;
            if (v447 >= 0x17)
            {
              uint64_t v450 = (v447 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v447 | 7) != 0x17) {
                uint64_t v450 = v447 | 7;
              }
              uint64_t v451 = v450 + 1;
              v449 = operator new(v450 + 1);
              *(void *)&__p[24] = v451 | 0x8000000000000000;
              *(void *)&__p[8] = v449;
              *(void *)&__p[16] = v448;
            }
            else
            {
              __p[31] = v447;
              v449 = &__p[8];
              if (!v447) {
                goto LABEL_960;
              }
            }
            memmove(v449, v446, v448);
LABEL_960:
            v449[v448] = 0;
            v685[0] = v288;
            unint64_t v332 = *(void *)(a1 + 344);
            if (v332 < *(void *)(a1 + 352))
            {
              int v343 = *(_DWORD *)__p;
              goto LABEL_962;
            }
            v452 = std::vector<AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::LinkInfo::Relocation,std::allocator<AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::LinkInfo::Relocation>>::__push_back_slow_path<AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::LinkInfo::Relocation>(v647, (uint64_t)__p);
            uint64_t v285 = (int8x8_t *)v660;
            int v453 = __p[31];
            *(void *)(a1 + 344) = v452;
            uint64_t v286 = v651;
            if (v453 < 0) {
              goto LABEL_859;
            }
            goto LABEL_893;
          case 2:
            *(_DWORD *)long long __p = 10;
            *(void *)&__p[8] = operator new(0x20uLL);
            *(_OWORD *)&__p[16] = xmmword_242EA7C30;
            strcpy(*(char **)&__p[8], "(__TEXT append base address lo)");
            v685[0] = v288;
            unint64_t v332 = *(void *)(a1 + 344);
            if (v332 >= *(void *)(a1 + 352)) {
              goto LABEL_965;
            }
LABEL_939:
            int v343 = 10;
            goto LABEL_962;
          case 3:
            *(_DWORD *)long long __p = 11;
            *(void *)&__p[8] = operator new(0x20uLL);
            *(_OWORD *)&__p[16] = xmmword_242EA7C30;
            strcpy(*(char **)&__p[8], "(__TEXT append base address hi)");
            v685[0] = v288;
            unint64_t v332 = *(void *)(a1 + 344);
            if (v332 >= *(void *)(a1 + 352)) {
              goto LABEL_965;
            }
            int v343 = 11;
            goto LABEL_962;
          default:
            goto LABEL_893;
        }
      }
LABEL_643:
      if (v293)
      {
        uint8x8_t v310 = (uint8x8_t)vcnt_s8(v293);
        v310.i16[0] = vaddlv_u8(v310);
        if (v310.u32[0] > 1uLL)
        {
          uint64_t v311 = HIDWORD(v288) & 0xFFFFFF;
          if (*(void *)&v293 <= v291) {
            uint64_t v311 = v291 % *(void *)&v293;
          }
        }
        else
        {
          uint64_t v311 = (v293.i32[0] - 1) & v291;
        }
        char v312 = *(uint64_t **)(*(void *)&v285[219] + 8 * v311);
        if (v312)
        {
          char v312 = (uint64_t *)*v312;
          if (v312)
          {
            if (v310.u32[0] < 2uLL)
            {
              while (1)
              {
                uint64_t v314 = v312[1];
                if (v314 == v291)
                {
                  if (*((_DWORD *)v312 + 4) == v292) {
                    goto LABEL_664;
                  }
                }
                else if ((v314 & (*(void *)&v293 - 1)) != v311)
                {
                  goto LABEL_663;
                }
                char v312 = (uint64_t *)*v312;
                if (!v312) {
                  goto LABEL_664;
                }
              }
            }
            do
            {
              unint64_t v313 = v312[1];
              if (v313 == v291)
              {
                if (*((_DWORD *)v312 + 4) == v292) {
                  break;
                }
              }
              else
              {
                if (v313 >= *(void *)&v293) {
                  v313 %= *(void *)&v293;
                }
                if (v313 != v311) {
                  goto LABEL_663;
                }
              }
              char v312 = (uint64_t *)*v312;
            }
            while (v312);
          }
        }
      }
      else
      {
LABEL_663:
        char v312 = 0;
      }
LABEL_664:
      BOOL v315 = v312 + 3;
      int v316 = *((char *)v312 + 47);
      if (v316 < 0)
      {
        if (v312[4] != 12) {
          goto LABEL_673;
        }
        BOOL v315 = (uint64_t *)*v315;
      }
      else if (v316 != 12)
      {
        goto LABEL_673;
      }
      BOOL v317 = (uint64_t *)*v315;
      uint64_t v318 = *((unsigned int *)v315 + 2);
      if (v317 == (uint64_t *)0x435F545845545F5FLL && v318 == 1414745679)
      {
        if (v290 == 3)
        {
          *(_DWORD *)long long __p = 5;
          *(void *)&__p[8] = operator new(0x28uLL);
          *(_OWORD *)&__p[16] = xmmword_242EA7F70;
          strcpy(*(char **)&__p[8], "(__TEXT_CONST base address high bits)");
          v685[0] = v288;
          unint64_t v332 = *(void *)(a1 + 344);
          if (v332 < *(void *)(a1 + 352))
          {
            int v343 = 5;
            goto LABEL_962;
          }
          goto LABEL_965;
        }
        if (v290 == 2)
        {
          *(_DWORD *)long long __p = 4;
          *(void *)&__p[8] = operator new(0x28uLL);
          *(_OWORD *)&__p[16] = xmmword_242EA7BE0;
          strcpy(*(char **)&__p[8], "(__TEXT_CONST base address low bits)");
          v685[0] = v288;
          unint64_t v332 = *(void *)(a1 + 344);
          if (v332 < *(void *)(a1 + 352))
          {
            int v343 = 4;
LABEL_962:
            *(_DWORD *)unint64_t v332 = v343;
            *(_OWORD *)(v332 + 8) = *(_OWORD *)&__p[8];
            *(void *)(v332 + 24) = *(void *)&__p[24];
            *(_DWORD *)(v332 + 32) = v288;
            *(void *)(a1 + 344) = v332 + 40;
            goto LABEL_593;
          }
LABEL_965:
          v454 = std::vector<AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::LinkInfo::Relocation,std::allocator<AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::LinkInfo::Relocation>>::__push_back_slow_path<AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::LinkInfo::Relocation>(v647, (uint64_t)__p);
          int v455 = __p[31];
          *(void *)(a1 + 344) = v454;
          if (v455 < 0) {
            operator delete(*(void **)&__p[8]);
          }
        }
LABEL_593:
        uint64_t v285 = (int8x8_t *)v660;
        uint64_t v286 = v651;
        ++v284;
        continue;
      }
LABEL_673:
      if (v293)
      {
        uint8x8_t v320 = (uint8x8_t)vcnt_s8(v293);
        v320.i16[0] = vaddlv_u8(v320);
        if (v320.u32[0] > 1uLL)
        {
          uint64_t v321 = HIDWORD(v288) & 0xFFFFFF;
          if (*(void *)&v293 <= v291) {
            uint64_t v321 = v291 % *(void *)&v293;
          }
        }
        else
        {
          uint64_t v321 = (v293.i32[0] - 1) & v291;
        }
        BOOL v322 = *(uint64_t **)(*(void *)&v285[219] + 8 * v321);
        if (v322)
        {
          BOOL v322 = (uint64_t *)*v322;
          if (v322)
          {
            if (v320.u32[0] < 2uLL)
            {
              while (1)
              {
                uint64_t v324 = v322[1];
                if (v324 == v291)
                {
                  if (*((_DWORD *)v322 + 4) == v292) {
                    goto LABEL_694;
                  }
                }
                else if ((v324 & (*(void *)&v293 - 1)) != v321)
                {
                  goto LABEL_693;
                }
                BOOL v322 = (uint64_t *)*v322;
                if (!v322) {
                  goto LABEL_694;
                }
              }
            }
            do
            {
              unint64_t v323 = v322[1];
              if (v323 == v291)
              {
                if (*((_DWORD *)v322 + 4) == v292) {
                  break;
                }
              }
              else
              {
                if (v323 >= *(void *)&v293) {
                  v323 %= *(void *)&v293;
                }
                if (v323 != v321) {
                  goto LABEL_693;
                }
              }
              BOOL v322 = (uint64_t *)*v322;
            }
            while (v322);
          }
        }
      }
      else
      {
LABEL_693:
        BOOL v322 = 0;
      }
LABEL_694:
      int v325 = (uint64_t **)(v322 + 3);
      int v326 = *((char *)v322 + 47);
      if (v326 < 0)
      {
        if (v322[4] != 6) {
          goto LABEL_703;
        }
        int v325 = (uint64_t **)*v325;
      }
      else if (v326 != 6)
      {
        goto LABEL_703;
      }
      int v327 = *(_DWORD *)v325;
      int v328 = *((unsigned __int16 *)v325 + 2);
      if (v327 == 1094999903 && v328 == 16724)
      {
        if (v290 == 3)
        {
          *(_DWORD *)long long __p = 9;
          *(void *)&__p[8] = operator new(0x20uLL);
          *(_OWORD *)&__p[16] = xmmword_242EA7C40;
          strcpy(*(char **)&__p[8], "(__DATA base address hi bits)");
          v685[0] = v288;
          unint64_t v332 = *(void *)(a1 + 344);
          if (v332 < *(void *)(a1 + 352))
          {
            int v343 = 9;
            goto LABEL_962;
          }
          goto LABEL_965;
        }
        if (v290 == 2)
        {
          *(_DWORD *)long long __p = 8;
          *(void *)&__p[8] = operator new(0x20uLL);
          *(_OWORD *)&__p[16] = xmmword_242EA7C70;
          strcpy(*(char **)&__p[8], "(__DATA base address low bits)");
          v685[0] = v288;
          unint64_t v332 = *(void *)(a1 + 344);
          if (v332 < *(void *)(a1 + 352))
          {
            int v343 = 8;
            goto LABEL_962;
          }
          goto LABEL_965;
        }
        goto LABEL_593;
      }
LABEL_703:
      if (v293)
      {
        uint8x8_t v330 = (uint8x8_t)vcnt_s8(v293);
        v330.i16[0] = vaddlv_u8(v330);
        if (v330.u32[0] > 1uLL)
        {
          uint64_t v331 = HIDWORD(v288) & 0xFFFFFF;
          if (*(void *)&v293 <= v291) {
            uint64_t v331 = v291 % *(void *)&v293;
          }
        }
        else
        {
          uint64_t v331 = (v293.i32[0] - 1) & v291;
        }
        long long v333 = *(uint64_t **)(*(void *)&v285[219] + 8 * v331);
        if (v333)
        {
          long long v333 = (uint64_t *)*v333;
          if (v333)
          {
            if (v330.u32[0] < 2uLL)
            {
              while (1)
              {
                uint64_t v335 = v333[1];
                if (v335 == v291)
                {
                  if (*((_DWORD *)v333 + 4) == v292) {
                    goto LABEL_727;
                  }
                }
                else if ((v335 & (*(void *)&v293 - 1)) != v331)
                {
                  goto LABEL_726;
                }
                long long v333 = (uint64_t *)*v333;
                if (!v333) {
                  goto LABEL_727;
                }
              }
            }
            do
            {
              unint64_t v334 = v333[1];
              if (v334 == v291)
              {
                if (*((_DWORD *)v333 + 4) == v292) {
                  break;
                }
              }
              else
              {
                if (v334 >= *(void *)&v293) {
                  v334 %= *(void *)&v293;
                }
                if (v334 != v331) {
                  goto LABEL_726;
                }
              }
              long long v333 = (uint64_t *)*v333;
            }
            while (v333);
          }
        }
      }
      else
      {
LABEL_726:
        long long v333 = 0;
      }
LABEL_727:
      __int16 v336 = v333 + 3;
      int v337 = *((char *)v333 + 47);
      if (v337 < 0)
      {
        if (v333[4] != 13) {
          goto LABEL_736;
        }
        __int16 v336 = (void *)*v336;
      }
      else if (v337 != 13)
      {
LABEL_736:
        if (v293)
        {
          uint8x8_t v341 = (uint8x8_t)vcnt_s8(v293);
          v341.i16[0] = vaddlv_u8(v341);
          if (v341.u32[0] > 1uLL)
          {
            uint64_t v342 = HIDWORD(v288) & 0xFFFFFF;
            if (*(void *)&v293 <= v291) {
              uint64_t v342 = v291 % *(void *)&v293;
            }
          }
          else
          {
            uint64_t v342 = (v293.i32[0] - 1) & v291;
          }
          unint64_t v344 = *(uint64_t **)(*(void *)&v285[219] + 8 * v342);
          if (v344)
          {
            unint64_t v344 = (uint64_t *)*v344;
            if (v344)
            {
              if (v341.u32[0] < 2uLL)
              {
                uint64_t v345 = *(void *)&v293 - 1;
                while (1)
                {
                  uint64_t v347 = v344[1];
                  if (v347 == v291)
                  {
                    if (*((_DWORD *)v344 + 4) == v292) {
                      goto LABEL_761;
                    }
                  }
                  else if ((v347 & v345) != v342)
                  {
                    goto LABEL_760;
                  }
                  unint64_t v344 = (uint64_t *)*v344;
                  if (!v344) {
                    goto LABEL_761;
                  }
                }
              }
              do
              {
                unint64_t v346 = v344[1];
                if (v346 == v291)
                {
                  if (*((_DWORD *)v344 + 4) == v292) {
                    break;
                  }
                }
                else
                {
                  if (v346 >= *(void *)&v293) {
                    v346 %= *(void *)&v293;
                  }
                  if (v346 != v342) {
                    goto LABEL_760;
                  }
                }
                unint64_t v344 = (uint64_t *)*v344;
              }
              while (v344);
            }
          }
        }
        else
        {
LABEL_760:
          unint64_t v344 = 0;
        }
LABEL_761:
        long long v348 = v344 + 3;
        int v349 = *((char *)v344 + 47);
        if (v349 < 0)
        {
          if (v344[4] != 14)
          {
LABEL_893:
            ++v284;
            continue;
          }
          long long v348 = (void *)*v348;
        }
        else if (v349 != 14)
        {
          goto LABEL_893;
        }
        long long v350 = (void *)*v348;
        uint64_t v351 = *(void *)((char *)v348 + 6);
        if (v350 != (void *)0x435F545845545F5FLL || v351 != 0x474E49525453435FLL) {
          goto LABEL_893;
        }
        if (v290 == 3)
        {
          *(_DWORD *)long long __p = 7;
          *(void *)&__p[8] = operator new(0x28uLL);
          *(_OWORD *)&__p[16] = xmmword_242EA7BA0;
          strcpy(*(char **)&__p[8], "(_TEXT_CSTRING base addr hi bits)");
          v685[0] = v288;
          unint64_t v332 = *(void *)(a1 + 344);
          if (v332 < *(void *)(a1 + 352))
          {
            int v343 = 7;
            goto LABEL_962;
          }
          goto LABEL_965;
        }
        if (v290 == 2)
        {
          *(_DWORD *)long long __p = 6;
          *(void *)&__p[8] = operator new(0x28uLL);
          *(_OWORD *)&__p[16] = xmmword_242EA7BA0;
          strcpy(*(char **)&__p[8], "(_TEXT_CSTRING base addr lo bits)");
          v685[0] = v288;
          unint64_t v332 = *(void *)(a1 + 344);
          if (v332 < *(void *)(a1 + 352))
          {
            int v343 = 6;
            goto LABEL_962;
          }
          goto LABEL_965;
        }
        goto LABEL_593;
      }
      v338 = (void *)*v336;
      uint64_t v339 = *(void *)((char *)v336 + 5);
      if (v338 == (void *)0x435F415441445F5FLL && v339 == 0x4E4F4D4D4F435F41)
      {
        if (v290 == 3)
        {
          *(_DWORD *)long long __p = 15;
          *(void *)&__p[8] = operator new(0x28uLL);
          *(_OWORD *)&__p[16] = xmmword_242EA7BE0;
          strcpy(*(char **)&__p[8], "(__DATA_COMMON base address hi bits)");
          v685[0] = v288;
          unint64_t v332 = *(void *)(a1 + 344);
          if (v332 < *(void *)(a1 + 352))
          {
            int v343 = 15;
            goto LABEL_962;
          }
          goto LABEL_965;
        }
        if (v290 == 2)
        {
          *(_DWORD *)long long __p = 14;
          *(void *)&__p[8] = operator new(0x28uLL);
          *(_OWORD *)&__p[16] = xmmword_242EA7F70;
          strcpy(*(char **)&__p[8], "(__DATA_COMMON base address low bits)");
          v685[0] = v288;
          unint64_t v332 = *(void *)(a1 + 344);
          if (v332 < *(void *)(a1 + 352))
          {
            int v343 = 14;
            goto LABEL_962;
          }
          goto LABEL_965;
        }
        goto LABEL_593;
      }
      goto LABEL_736;
    }
    break;
  }
  if (v285[4]) {
    uint64_t v287 = v286;
  }
  else {
    uint64_t v287 = (char *)v660 + 584;
  }
  if (v284 < *((_DWORD *)v287 + 8)) {
    goto LABEL_601;
  }
LABEL_967:
  unsigned __int32 v456 = 0;
  v457 = v285 + 88;
  while (1)
  {
    if (!*((void *)v660 + 18))
    {
      uint64_t v459 = (uint64_t)v457;
      if (v456 >= v285[92].i32[0]) {
        break;
      }
      goto LABEL_981;
    }
    uint64_t v459 = *(void *)&v285[19] ? (uint64_t)v660 + 144 : (uint64_t)v457;
    if (v456 >= *(_DWORD *)(v459 + 32)) {
      break;
    }
LABEL_981:
    unint64_t v460 = *(void *)(*(void *)(v459 + 24) + 8 * v456);
    unint64_t v461 = HIDWORD(v460) & 0xFFFFFF;
    if ((v460 & 0x800000000000000) != 0)
    {
      if (((HIDWORD(v460) >> 28) - 2) < 7 || HIDWORD(v460) >> 28 == 12) {
        goto LABEL_973;
      }
      v476 = (const char *)(v657 + *(unsigned int *)(v658 + 16 * v461));
      *(_DWORD *)long long __p = 18;
      size_t v477 = strlen(v476);
      if (v477 > 0x7FFFFFFFFFFFFFF7) {
        abort();
      }
      size_t v478 = v477;
      if (v477 >= 0x17)
      {
        uint64_t v482 = (v477 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v477 | 7) != 0x17) {
          uint64_t v482 = v477 | 7;
        }
        uint64_t v483 = v482 + 1;
        v479 = operator new(v482 + 1);
        *(void *)&__p[24] = v483 | 0x8000000000000000;
        *(void *)&__p[8] = v479;
        *(void *)&__p[16] = v478;
      }
      else
      {
        __p[31] = v477;
        v479 = &__p[8];
        if (!v477) {
          goto LABEL_1026;
        }
      }
      memmove(v479, v476, v478);
LABEL_1026:
      v479[v478] = 0;
      v685[0] = v460;
      unint64_t v484 = *(void *)(a1 + 320);
      if (v484 >= *(void *)(a1 + 328))
      {
        v485 = std::vector<AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::LinkInfo::Relocation,std::allocator<AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::LinkInfo::Relocation>>::__push_back_slow_path<AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::LinkInfo::Relocation>(v644, (uint64_t)__p);
        uint64_t v285 = (int8x8_t *)v660;
        int v486 = __p[31];
        *(void *)(a1 + 320) = v485;
        if ((v486 & 0x80000000) == 0) {
          goto LABEL_973;
        }
        operator delete(*(void **)&__p[8]);
        ++v456;
      }
      else
      {
        *(_DWORD *)unint64_t v484 = *(_DWORD *)__p;
        *(_OWORD *)(v484 + 8) = *(_OWORD *)&__p[8];
        *(void *)(v484 + 24) = *(void *)&__p[24];
        *(_DWORD *)(v484 + 32) = v460;
        *(void *)(a1 + 320) = v484 + 40;
        uint64_t v285 = (int8x8_t *)v660;
        ++v456;
      }
    }
    else
    {
      int8x8_t v462 = v285[220];
      if (v462)
      {
        uint8x8_t v463 = (uint8x8_t)vcnt_s8(v462);
        v463.i16[0] = vaddlv_u8(v463);
        if (v463.u32[0] > 1uLL)
        {
          uint64_t v464 = HIDWORD(v460) & 0xFFFFFF;
          if (*(void *)&v462 <= v461) {
            uint64_t v464 = v461 % *(void *)&v462;
          }
        }
        else
        {
          uint64_t v464 = (v462.i32[0] - 1) & v461;
        }
        v465 = *(uint64_t **)(*(void *)&v285[219] + 8 * v464);
        if (v465)
        {
          v465 = (uint64_t *)*v465;
          if (v465)
          {
            int v466 = HIDWORD(v460) & 0xFFFFFF;
            if (v463.u32[0] < 2uLL)
            {
              uint64_t v467 = *(void *)&v462 - 1;
              while (1)
              {
                uint64_t v469 = v465[1];
                if (v469 == v461)
                {
                  if (*((_DWORD *)v465 + 4) == v466) {
                    goto LABEL_1003;
                  }
                }
                else if ((v469 & v467) != v464)
                {
                  goto LABEL_1002;
                }
                v465 = (uint64_t *)*v465;
                if (!v465) {
                  goto LABEL_1003;
                }
              }
            }
            do
            {
              unint64_t v468 = v465[1];
              if (v468 == v461)
              {
                if (*((_DWORD *)v465 + 4) == v466) {
                  break;
                }
              }
              else
              {
                if (v468 >= *(void *)&v462) {
                  v468 %= *(void *)&v462;
                }
                if (v468 != v464) {
                  goto LABEL_1002;
                }
              }
              v465 = (uint64_t *)*v465;
            }
            while (v465);
          }
        }
      }
      else
      {
LABEL_1002:
        v465 = 0;
      }
LABEL_1003:
      v470 = (uint64_t **)(v465 + 3);
      int v471 = *((char *)v465 + 47);
      if (v471 < 0)
      {
        if (v465[4] != 6) {
          goto LABEL_973;
        }
        v470 = (uint64_t **)*v470;
      }
      else if (v471 != 6)
      {
        goto LABEL_973;
      }
      int v472 = *(_DWORD *)v470;
      int v473 = *((unsigned __int16 *)v470 + 2);
      if (v472 == 1163157343 && v473 == 21592)
      {
        *(_DWORD *)long long __p = 19;
        *(void *)&__p[8] = operator new(0x20uLL);
        *(_OWORD *)&__p[16] = xmmword_242EA7BB0;
        strcpy(*(char **)&__p[8], "(__TEXT append base address)");
        v685[0] = v460;
        unint64_t v475 = *(void *)(a1 + 344);
        if (v475 >= *(void *)(a1 + 352))
        {
          v480 = std::vector<AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::LinkInfo::Relocation,std::allocator<AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::LinkInfo::Relocation>>::__push_back_slow_path<AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::LinkInfo::Relocation>(v647, (uint64_t)__p);
          int v481 = __p[31];
          *(void *)(a1 + 344) = v480;
          if (v481 < 0) {
            operator delete(*(void **)&__p[8]);
          }
          uint64_t v285 = (int8x8_t *)v660;
          ++v456;
        }
        else
        {
          *(_DWORD *)unint64_t v475 = 19;
          *(_OWORD *)(v475 + 8) = *(_OWORD *)&__p[8];
          *(void *)(v475 + 24) = *(void *)&__p[24];
          *(_DWORD *)(v475 + 32) = v460;
          *(void *)(a1 + 344) = v475 + 40;
          uint64_t v285 = (int8x8_t *)v660;
          ++v456;
        }
      }
      else
      {
LABEL_973:
        ++v456;
      }
    }
  }
  unint64_t v487 = 0;
  v488 = v285 + 98;
  v489 = v655;
  while (1)
  {
    if (!*(void *)v489)
    {
      if (v487 >= v285[102].u32[0]) {
        break;
      }
      int8x8_t v490 = v285[29];
      v491 = v488;
      goto LABEL_1041;
    }
    int8x8_t v490 = v285[29];
    v491 = *(void *)&v490 ? v489 : v488;
    if (v487 >= v491[4].u32[0]) {
      break;
    }
LABEL_1041:
    if (v490) {
      BOOL v492 = *v489 == 0;
    }
    else {
      BOOL v492 = 1;
    }
    if (v492) {
      v493 = v488;
    }
    else {
      v493 = v489;
    }
    v494 = (unsigned int *)*v493;
    v495 = (unsigned int *)v493[1];
    if (v494) {
      BOOL v496 = v495 == 0;
    }
    else {
      BOOL v496 = 1;
    }
    if (v496) {
      v497 = 0;
    }
    else {
      v497 = (int *)((char *)v494 + *v494);
    }
    v498 = (unsigned __int16 *)((char *)v497 - *v497);
    if (*v498 >= 5u && (uint64_t v499 = v498[2]) != 0) {
      v500 = (int *)((char *)v497 + v499 + *(unsigned int *)((char *)v497 + v499));
    }
    else {
      v500 = 0;
    }
    v501 = (unsigned __int16 *)((char *)v500 - *v500);
    if (*v501 >= 0x1Fu && (uint64_t v502 = v501[15]) != 0) {
      int v503 = v500 + v502 + *(int *)((char *)v500 + v502);
    }
    else {
      int v503 = 0;
    }
    unint64_t v504 = *(void *)(*(void *)&v491[3] + 8 * v487);
    int v505 = v503 - v494 + 4;
    if ((v504 & 0x800000000000000) != 0)
    {
      uint64_t v509 = *(unsigned int *)(v658 + 16 * (HIDWORD(v504) & 0xFFFFFF));
      v510 = (const void *)(v657 + v509);
      if (v504 >> 60 == 12 || v504 >> 60 == 5)
      {
        *(_DWORD *)long long __p = 20;
        size_t v512 = strlen((const char *)(v657 + v509));
        if (v512 > 0x7FFFFFFFFFFFFFF7) {
          abort();
        }
        size_t v513 = v512;
        if (v512 >= 0x17)
        {
          uint64_t v518 = (v512 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v512 | 7) != 0x17) {
            uint64_t v518 = v512 | 7;
          }
          uint64_t v519 = v518 + 1;
          v514 = operator new(v518 + 1);
          *(void *)&__p[24] = v519 | 0x8000000000000000;
          *(void *)&__p[8] = v514;
          *(void *)&__p[16] = v513;
        }
        else
        {
          __p[31] = v512;
          v514 = &__p[8];
          if (!v512) {
            goto LABEL_1082;
          }
        }
        memmove(v514, v510, v513);
LABEL_1082:
        v514[v513] = 0;
        v685[0] = v504 - v505;
        unint64_t v520 = *(void *)(a1 + 320);
        if (v520 >= *(void *)(a1 + 328))
        {
          v521 = std::vector<AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::LinkInfo::Relocation,std::allocator<AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::LinkInfo::Relocation>>::__push_back_slow_path<AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::LinkInfo::Relocation>(v644, (uint64_t)__p);
          uint64_t v285 = (int8x8_t *)v660;
          v489 = v655;
          int v522 = __p[31];
          *(void *)(a1 + 320) = v521;
          if (v522 < 0) {
            operator delete(*(void **)&__p[8]);
          }
        }
        else
        {
          *(_DWORD *)unint64_t v520 = *(_DWORD *)__p;
          *(_OWORD *)(v520 + 8) = *(_OWORD *)&__p[8];
          *(void *)(v520 + 24) = *(void *)&__p[24];
          *(_DWORD *)(v520 + 32) = v504 - v505;
          *(void *)(a1 + 320) = v520 + 40;
          uint64_t v285 = (int8x8_t *)v660;
          v489 = v655;
        }
        char v642 = 1;
LABEL_1087:
        ++v487;
      }
      else
      {
        *(_DWORD *)long long __p = 18;
        size_t v515 = strlen((const char *)(v657 + v509));
        if (v515 > 0x7FFFFFFFFFFFFFF7) {
          abort();
        }
        size_t v516 = v515;
        if (v515 >= 0x17)
        {
          uint64_t v523 = (v515 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v515 | 7) != 0x17) {
            uint64_t v523 = v515 | 7;
          }
          uint64_t v524 = v523 + 1;
          v517 = operator new(v523 + 1);
          *(void *)&__p[24] = v524 | 0x8000000000000000;
          *(void *)&__p[8] = v517;
          *(void *)&__p[16] = v516;
        }
        else
        {
          __p[31] = v515;
          v517 = &__p[8];
          if (!v515) {
            goto LABEL_1092;
          }
        }
        memmove(v517, v510, v516);
LABEL_1092:
        v517[v516] = 0;
        v685[0] = v504 - v505;
        unint64_t v525 = *(void *)(a1 + 320);
        if (v525 >= *(void *)(a1 + 328))
        {
          v526 = std::vector<AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::LinkInfo::Relocation,std::allocator<AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::LinkInfo::Relocation>>::__push_back_slow_path<AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::LinkInfo::Relocation>(v644, (uint64_t)__p);
          uint64_t v285 = (int8x8_t *)v660;
          v489 = v655;
          int v527 = __p[31];
          *(void *)(a1 + 320) = v526;
          if ((v527 & 0x80000000) == 0) {
            goto LABEL_1087;
          }
          operator delete(*(void **)&__p[8]);
          ++v487;
        }
        else
        {
          *(_DWORD *)unint64_t v525 = *(_DWORD *)__p;
          *(_OWORD *)(v525 + 8) = *(_OWORD *)&__p[8];
          *(void *)(v525 + 24) = *(void *)&__p[24];
          *(_DWORD *)(v525 + 32) = v504 - v505;
          *(void *)(a1 + 320) = v525 + 40;
          uint64_t v285 = (int8x8_t *)v660;
          v489 = v655;
          ++v487;
        }
      }
    }
    else
    {
      *(_DWORD *)long long __p = 19;
      *(void *)&__p[8] = operator new(0x20uLL);
      *(_OWORD *)&__p[16] = xmmword_242EA7BB0;
      strcpy(*(char **)&__p[8], "(__TEXT append base address)");
      v685[0] = v504 - v505;
      unint64_t v506 = *(void *)(a1 + 344);
      if (v506 < *(void *)(a1 + 352))
      {
        *(_DWORD *)unint64_t v506 = 19;
        *(_OWORD *)(v506 + 8) = *(_OWORD *)&__p[8];
        *(void *)(v506 + 24) = *(void *)&__p[24];
        *(_DWORD *)(v506 + 32) = v504 - v505;
        *(void *)(a1 + 344) = v506 + 40;
        v489 = v655;
      }
      else
      {
        v507 = std::vector<AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::LinkInfo::Relocation,std::allocator<AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::LinkInfo::Relocation>>::__push_back_slow_path<AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::LinkInfo::Relocation>(v647, (uint64_t)__p);
        int v508 = __p[31];
        *(void *)(a1 + 344) = v507;
        v489 = v655;
        if (v508 < 0) {
          operator delete(*(void **)&__p[8]);
        }
      }
      uint64_t v285 = (int8x8_t *)v660;
      ++v487;
    }
  }
  if (v285[63])
  {
    v528 = v285 + 63;
    uint64_t v529 = 63;
    if (!*(void *)&v285[64])
    {
      uint64_t v529 = 133;
      v528 = v285 + 133;
    }
    int8x8_t v530 = v528[1];
    v531 = (unsigned int *)v285[v529];
    if (v530) {
      BOOL v532 = v531 == 0;
    }
    else {
      BOOL v532 = 1;
    }
    if (!v532)
    {
LABEL_1107:
      v533 = (int *)((char *)v531 + *v531);
      v534 = (unsigned __int16 *)((char *)v533 - *v533);
      if (*v534 >= 7u)
      {
        uint64_t v535 = v534[3];
        if (v535)
        {
          v536 = (int *)((char *)v533 + v535 + *(unsigned int *)((char *)v533 + v535));
          v537 = (unsigned __int16 *)((char *)v536 - *v536);
          if (*v537 >= 5u)
          {
            uint64_t v538 = v537[2];
            if (v538)
            {
              v539 = (unsigned int *)((char *)v536 + v538);
              uint64_t v540 = *v539;
              v542 = (unsigned int *)((char *)v539 + v540 + 4);
              uint64_t v541 = *(unsigned int *)((char *)v539 + v540);
              if (v541)
              {
                v543 = &v542[v541];
                while (1)
                {
                  v544 = (int *)((char *)v542 + *v542);
                  v545 = (unsigned __int16 *)((char *)v544 - *v544);
                  if (*v545 >= 5u && (uint64_t v546 = v545[2]) != 0) {
                    v547 = (char *)v544 + v546 + *(unsigned int *)((char *)v544 + v546);
                  }
                  else {
                    v547 = 0;
                  }
                  v548 = v547 + 4;
                  size_t v549 = strlen(v547 + 4);
                  if (v549 > 0x7FFFFFFFFFFFFFF7) {
                    abort();
                  }
                  std::string::size_type v550 = v549;
                  if (v549 >= 0x17) {
                    break;
                  }
                  *((unsigned char *)&v663.__r_.__value_.__s + 23) = v549;
                  v551 = &v663;
                  if (v549) {
                    goto LABEL_1125;
                  }
LABEL_1126:
                  v551[v550] = 0;
                  v554 = std::string::append(&v663, "@md");
                  long long v555 = *(_OWORD *)&v554->__r_.__value_.__l.__data_;
                  *(void *)&__p[16] = *((void *)&v554->__r_.__value_.__l + 2);
                  *(_OWORD *)long long __p = v555;
                  v554->__r_.__value_.__l.__size_ = 0;
                  v554->__r_.__value_.__r.__words[2] = 0;
                  v554->__r_.__value_.__r.__words[0] = 0;
                  if (SHIBYTE(v663.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(v663.__r_.__value_.__l.__data_);
                  }
                  if (__p[23] >= 0) {
                    v556 = __p;
                  }
                  else {
                    v556 = *(const char **)__p;
                  }
                  v557 = (int *)AGCDeserializedReply::getBackendMetadataFBPtr(v660, v556);
                  v558 = (unsigned __int16 *)((char *)v557 - *v557);
                  unsigned int v559 = *v558;
                  if (v559 >= 0xD)
                  {
                    if (v558[6])
                    {
                      v560 = (int *)((char *)v557 + v558[6] + *(unsigned int *)((char *)v557 + v558[6]));
                      v561 = (int *)v558[2];
                      if (!v558[2]) {
                        goto LABEL_1138;
                      }
                    }
                    else
                    {
                      v560 = 0;
                      v561 = (int *)v558[2];
                      if (!v558[2]) {
                        goto LABEL_1138;
                      }
                    }
LABEL_1137:
                    v561 = (int *)((char *)v561 + (void)v557 + *(unsigned int *)((char *)v561 + (void)v557));
                    goto LABEL_1138;
                  }
                  v560 = 0;
                  v561 = 0;
                  if (v559 >= 5)
                  {
                    v561 = (int *)v558[2];
                    if (v558[2]) {
                      goto LABEL_1137;
                    }
                  }
LABEL_1138:
                  v562 = (unsigned __int16 *)((char *)v560 - *v560);
                  if (*v562 >= 5u && (uint64_t v563 = v562[2]) != 0)
                  {
                    unsigned int v564 = *(int *)((char *)v560 + v563);
                    unsigned int v565 = *(_DWORD *)(a1 + 48);
                    if (v565 < v564) {
                      goto LABEL_1144;
                    }
                  }
                  else
                  {
                    unsigned int v565 = *(_DWORD *)(a1 + 48);
                  }
                  unsigned int v564 = v565;
LABEL_1144:
                  *(_DWORD *)(a1 + 48) = v564;
                  v566 = (unsigned __int16 *)((char *)v561 - *v561);
                  if (*v566 >= 0x51u && (uint64_t v567 = v566[40]) != 0)
                  {
                    unsigned int v568 = *(int *)((char *)v561 + v567);
                    unsigned int v569 = *(_DWORD *)(a1 + 52);
                    if (v569 < v568) {
                      goto LABEL_1150;
                    }
                  }
                  else
                  {
                    unsigned int v569 = *(_DWORD *)(a1 + 52);
                  }
                  unsigned int v568 = v569;
LABEL_1150:
                  *(_DWORD *)(a1 + 52) = v568;
                  v570 = (unsigned __int16 *)((char *)v560 - *v560);
                  if (*v570 >= 7u && (uint64_t v571 = v570[3]) != 0)
                  {
                    unsigned int v572 = *(int *)((char *)v560 + v571);
                    unsigned int v573 = *(_DWORD *)(a1 + 56);
                    if (v573 < v572) {
                      goto LABEL_1156;
                    }
                  }
                  else
                  {
                    unsigned int v573 = *(_DWORD *)(a1 + 56);
                  }
                  unsigned int v572 = v573;
LABEL_1156:
                  *(_DWORD *)(a1 + 56) = v572;
                  v574 = (unsigned __int16 *)((char *)v560 - *v560);
                  unsigned int v575 = *v574;
                  if (v575 < 0xB) {
                    goto LABEL_1171;
                  }
                  if (v574[5] && *((unsigned char *)v560 + v574[5])) {
                    goto LABEL_1162;
                  }
                  if (v575 < 0xD) {
                    goto LABEL_1171;
                  }
                  if (v574[6] && *((unsigned char *)v560 + v574[6]))
                  {
LABEL_1162:
                    LOBYTE(v576) = 1;
                  }
                  else
                  {
                    if (v575 < 0xF)
                    {
LABEL_1171:
                      LOBYTE(v577) = 0;
                      goto LABEL_1172;
                    }
                    uint64_t v576 = v574[7];
                    if (v574[7]) {
                      LOBYTE(v576) = *((unsigned char *)v560 + v576) != 0;
                    }
                  }
                  *(unsigned char *)(a1 + 172) |= v576;
                  if (v575 < 0x29) {
                    goto LABEL_1171;
                  }
                  uint64_t v577 = v574[20];
                  if (v574[20]) {
                    LOBYTE(v577) = *((unsigned char *)v560 + v577) != 0;
                  }
LABEL_1172:
                  *(unsigned char *)(a1 + 175) |= v577;
                  v578 = (unsigned __int16 *)((char *)v561 - *v561);
                  unsigned int v579 = *v578;
                  if (v579 < 0x3F)
                  {
                    LOBYTE(v580) = 0;
                  }
                  else
                  {
                    uint64_t v580 = v578[31];
                    if (v578[31])
                    {
                      v581 = (unsigned int *)((char *)v561 + v580 + *(unsigned int *)((char *)v561 + v580));
                      uint64_t v580 = *v581;
                      if (v580)
                      {
                        v582 = v581 + 1;
                        while (1)
                        {
                          unsigned int v584 = *v582++;
                          char v583 = v584;
                          if (v584 < 0x36 && ((0x3F000000000777uLL >> v583) & 1) != 0) {
                            break;
                          }
                          if (!--v580) {
                            goto LABEL_1181;
                          }
                        }
                        LOBYTE(v580) = 1;
                      }
                    }
                  }
LABEL_1181:
                  *(unsigned char *)(a1 + 174) |= v580;
                  v586 = v575 >= 0xD && (uint64_t v585 = v574[6]) != 0 && *((unsigned char *)v560 + v585) != 0;
                  *(unsigned char *)(a1 + 177) |= v586;
                  if (v579 < 0x67)
                  {
LABEL_1198:
                    uint64_t v589 = 0;
                    goto LABEL_1199;
                  }
                  uint64_t v587 = v578[51];
                  if (v578[51]) {
                    uint64_t v587 = *(void *)((char *)v561 + v587);
                  }
                  *(void *)(a1 + 488) |= v587;
                  if (v579 < 0x6F)
                  {
                    if (v579 < 0x69) {
                      goto LABEL_1198;
                    }
                  }
                  else
                  {
                    uint64_t v588 = v578[55];
                    if (v578[55]) {
                      uint64_t v588 = *(void *)((char *)v561 + v588);
                    }
                    *(void *)(a1 + 520) |= v588;
                  }
                  uint64_t v589 = v578[52];
                  if (v578[52]) {
                    uint64_t v589 = *(void *)((char *)v561 + v589);
                  }
                  if (v579 >= 0x6B)
                  {
                    uint64_t v590 = v578[53];
                    if (v578[53]) {
                      uint64_t v590 = *(void *)((char *)v561 + v590);
                    }
                    goto LABEL_1200;
                  }
LABEL_1199:
                  uint64_t v590 = 0;
LABEL_1200:
                  uint64_t v591 = *(void *)(a1 + 504) | v590;
                  *(void *)(a1 + 496) |= v589;
                  *(void *)(a1 + 504) = v591;
                  if (v579 >= 0x6D && v578[54]) {
                    uint64_t v592 = *(void *)((char *)v561 + v578[54]);
                  }
                  else {
                    uint64_t v592 = 0;
                  }
                  *(void *)(a1 + 512) |= v592;
                  if ((__p[23] & 0x80000000) != 0) {
                    operator delete(*(void **)__p);
                  }
                  if (++v542 == v543) {
                    goto LABEL_1206;
                  }
                }
                uint64_t v552 = (v549 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v549 | 7) != 0x17) {
                  uint64_t v552 = v549 | 7;
                }
                uint64_t v553 = v552 + 1;
                v551 = operator new(v552 + 1);
                v663.__r_.__value_.__l.__size_ = v550;
                v663.__r_.__value_.__r.__words[2] = v553 | 0x8000000000000000;
                v663.__r_.__value_.__r.__words[0] = (std::string::size_type)v551;
LABEL_1125:
                memmove(v551, v548, v550);
                goto LABEL_1126;
              }
            }
          }
        }
      }
    }
  }
  else if (v285[134])
  {
    v531 = (unsigned int *)v285[133];
    if (v531) {
      goto LABEL_1107;
    }
  }
LABEL_1206:
  v593 = (unsigned __int16 *)((char *)v632 - *v632);
  if (*v593 >= 0xBu)
  {
    uint64_t v594 = v593[5];
    if (v593[5])
    {
      if (v642)
      {
        v595 = (char *)v632 + v594;
        v596 = (int *)((char *)v632 + v594 + *(unsigned int *)((char *)v632 + v594));
        v661 = (AGCDeserializedReply *)*(unsigned int *)((char *)v632 + v594);
        std::vector<std::shared_ptr<AGX::HAL200::Sampler>>::reserve(a1 + 360, *v596);
        if (*v596)
        {
          unint64_t v597 = 0;
          uint64_t v598 = (uint64_t)v632 + (void)v661 + v594 + 36;
          do
          {
            uint64_t v599 = *(unsigned int *)(v598 - 32);
            uint64_t v600 = v598 + v599 - *(int *)(v598 + v599 - 32);
            if (*(unsigned __int16 *)(v600 - 32) >= 0x1Du && (uint64_t v601 = *(unsigned __int16 *)(v600 - 4)) != 0) {
              uint64_t v602 = *(void *)(v598 + v599 + v601 - 32);
            }
            else {
              uint64_t v602 = 0;
            }
            snprintf(__str, 0x40uLL, "_agx_const_ss.%016llx", v602);
            uint64_t v603 = *(unsigned int *)(v598 - 32);
            uint64_t v604 = v603 - *(int *)(v598 + v603 - 32);
            unsigned int v605 = *(unsigned __int16 *)(v598 + v604 - 32);
            if (v605 < 0x1D)
            {
              uint64_t v606 = 0;
            }
            else
            {
              uint64_t v606 = *(unsigned __int16 *)(v598 + v604 - 4);
              if (*(_WORD *)(v598 + v604 - 4)) {
                uint64_t v606 = *(void *)(v598 + v603 + v606 - 32);
              }
              if (v605 >= 0x21)
              {
                uint64_t v607 = *(unsigned __int16 *)(v598 + v604);
                if (v607)
                {
                  uint64_t v608 = *(void *)(v598 + v603 + v607 - 32);
                  goto LABEL_1226;
                }
              }
            }
            uint64_t v608 = 0;
LABEL_1226:
            snprintf(__p, 0x80uLL, "agc.const_sampler_heap_index_%016llx_%016llx", v606, v608);
            AGX::SamplerDescriptor::SamplerDescriptor((uint64_t)__dst, (int *)(v598 - 32 + *(unsigned int *)(v598 - 32)));
            AGX::Device<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::allocateBindlessConstantSampler((uint64_t *)&v672, a3, (uint64_t)__dst);
            v609 = *(__n128 **)(a1 + 368);
            if ((unint64_t)v609 >= *(void *)(a1 + 376))
            {
              v611 = std::vector<std::shared_ptr<AGX::HAL200::DynamicLibrary>>::__emplace_back_slow_path<std::shared_ptr<AGX::HAL200::DynamicLibrary>&>(a1 + 360, v672);
            }
            else
            {
              v609->n128_u64[0] = v672.n128_u64[0];
              unint64_t v610 = v672.n128_u64[1];
              v609->n128_u64[1] = v672.n128_u64[1];
              if (v610) {
                atomic_fetch_add_explicit((atomic_ullong *volatile)(v610 + 8), 1uLL, memory_order_relaxed);
              }
              v611 = v609 + 1;
            }
            *(void *)(a1 + 368) = v611;
            uint64_t v612 = *(unsigned int *)(v672.n128_u64[0] + 96);
            size_t v613 = strlen(__str);
            if (v613 > 0x7FFFFFFFFFFFFFF7) {
              abort();
            }
            std::string::size_type v614 = v613;
            if (v613 >= 0x17)
            {
              uint64_t v616 = (v613 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v613 | 7) != 0x17) {
                uint64_t v616 = v613 | 7;
              }
              uint64_t v617 = v616 + 1;
              v615 = (std::string *)operator new(v616 + 1);
              v662.__r_.__value_.__l.__size_ = v614;
              v662.__r_.__value_.__r.__words[2] = v617 | 0x8000000000000000;
              v662.__r_.__value_.__r.__words[0] = (std::string::size_type)v615;
LABEL_1238:
              memcpy(v615, __str, v614);
              goto LABEL_1239;
            }
            *((unsigned char *)&v662.__r_.__value_.__s + 23) = v613;
            v615 = &v662;
            if (v613) {
              goto LABEL_1238;
            }
LABEL_1239:
            v615->__r_.__value_.__s.__data_[v614] = 0;
            uint64_t v618 = *(void *)(a1 + 32);
            int v619 = SHIBYTE(v662.__r_.__value_.__r.__words[2]);
            if (SHIBYTE(v662.__r_.__value_.__r.__words[2]) < 0) {
              std::string::__init_copy_ctor_external(&v663, v662.__r_.__value_.__l.__data_, v662.__r_.__value_.__l.__size_);
            }
            else {
              std::string v663 = v662;
            }
            v665[0] = 0;
            *(void *)((char *)v665 + 5) = 0;
            uint64_t v664 = v612;
            uint64_t v666 = v618;
            int v667 = 2;
            long long v668 = 0u;
            long long v669 = 0u;
            long long v670 = 0u;
            int v671 = 0;
            std::__hash_table<std::__hash_value_type<std::string,AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::ExternalSymbolInfo>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::ExternalSymbolInfo>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::ExternalSymbolInfo>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::ExternalSymbolInfo>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::ExternalSymbolInfo>>((uint64_t)v656, (uint64_t)&v663, (uint64_t)&v663);
            if (SHIBYTE(v663.__r_.__value_.__r.__words[2]) < 0)
            {
              operator delete(v663.__r_.__value_.__l.__data_);
              if ((v619 & 0x80000000) == 0) {
                goto LABEL_1244;
              }
            }
            else if ((v619 & 0x80000000) == 0)
            {
              goto LABEL_1244;
            }
            operator delete(v662.__r_.__value_.__l.__data_);
LABEL_1244:
            size_t v620 = strlen(__p);
            if (v620 > 0x7FFFFFFFFFFFFFF7) {
              abort();
            }
            std::string::size_type v621 = v620;
            if (v620 >= 0x17)
            {
              uint64_t v623 = (v620 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v620 | 7) != 0x17) {
                uint64_t v623 = v620 | 7;
              }
              uint64_t v624 = v623 + 1;
              v622 = (std::string *)operator new(v623 + 1);
              v662.__r_.__value_.__l.__size_ = v621;
              v662.__r_.__value_.__r.__words[2] = v624 | 0x8000000000000000;
              v662.__r_.__value_.__r.__words[0] = (std::string::size_type)v622;
LABEL_1251:
              memcpy(v622, __p, v621);
              goto LABEL_1252;
            }
            *((unsigned char *)&v662.__r_.__value_.__s + 23) = v620;
            v622 = &v662;
            if (v620) {
              goto LABEL_1251;
            }
LABEL_1252:
            v622->__r_.__value_.__s.__data_[v621] = 0;
            uint64_t v625 = *(void *)(a1 + 32);
            int v626 = SHIBYTE(v662.__r_.__value_.__r.__words[2]);
            if (SHIBYTE(v662.__r_.__value_.__r.__words[2]) < 0) {
              std::string::__init_copy_ctor_external(&v663, v662.__r_.__value_.__l.__data_, v662.__r_.__value_.__l.__size_);
            }
            else {
              std::string v663 = v662;
            }
            v665[0] = 0;
            *(void *)((char *)v665 + 5) = 0;
            uint64_t v664 = v612;
            uint64_t v666 = v625;
            int v667 = 2;
            long long v668 = 0u;
            long long v669 = 0u;
            long long v670 = 0u;
            int v671 = 0;
            std::__hash_table<std::__hash_value_type<std::string,AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::ExternalSymbolInfo>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::ExternalSymbolInfo>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::ExternalSymbolInfo>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::ExternalSymbolInfo>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::ExternalSymbolInfo>>((uint64_t)v656, (uint64_t)&v663, (uint64_t)&v663);
            if (SHIBYTE(v663.__r_.__value_.__r.__words[2]) < 0)
            {
              operator delete(v663.__r_.__value_.__l.__data_);
              if ((v626 & 0x80000000) == 0)
              {
LABEL_1259:
                v627 = (std::__shared_weak_count *)v672.n128_u64[1];
                if (v672.n128_u64[1]) {
                  goto LABEL_1263;
                }
                goto LABEL_1211;
              }
            }
            else if ((v626 & 0x80000000) == 0)
            {
              goto LABEL_1259;
            }
            operator delete(v662.__r_.__value_.__l.__data_);
            v627 = (std::__shared_weak_count *)v672.n128_u64[1];
            if (v672.n128_u64[1])
            {
LABEL_1263:
              if (!atomic_fetch_add(&v627->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
              {
                ((void (*)(std::__shared_weak_count *))v627->__on_zero_shared)(v627);
                std::__shared_weak_count::__release_weak(v627);
              }
            }
LABEL_1211:
            if (v675 < 0) {
              operator delete(v674);
            }
            ++v597;
            v598 += 4;
          }
          while (v597 < *(unsigned int *)((char *)v661 + (void)v595));
        }
      }
    }
  }
}

void sub_242A5BF00(_Unwind_Exception *a1)
{
  if (SLOBYTE(STACK[0x28F]) < 0)
  {
    operator delete((void *)STACK[0x278]);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t AGCDeserializedReply::getBackendMetadataFBPtr(AGCDeserializedReply *this, const char *__s)
{
  if (__s)
  {
    size_t v4 = strlen(__s);
    if (v4 >= 0x7FFFFFFFFFFFFFF8) {
      abort();
    }
    unint64_t v5 = (void *)v4;
    if (v4 >= 0x17)
    {
      uint64_t v8 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v4 | 7) != 0x17) {
        uint64_t v8 = v4 | 7;
      }
      uint64_t v9 = v8 + 1;
      unint64_t v6 = (void **)operator new(v8 + 1);
      __dst[1] = v5;
      unint64_t v21 = v9 | 0x8000000000000000;
      __dst[0] = v6;
    }
    else
    {
      HIBYTE(v21) = v4;
      unint64_t v6 = __dst;
      if (!v4)
      {
LABEL_14:
        *((unsigned char *)v5 + (void)v6) = 0;
        unint64_t v10 = std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::find<std::string>((void *)this + 174, (uint64_t)__dst);
        if (SHIBYTE(v21) < 0) {
          operator delete(__dst[0]);
        }
        uint64_t v11 = (char *)this + 24;
        if (*((void *)this + 3))
        {
          if (!*((void *)this + 4)) {
            uint64_t v11 = (char *)this + 584;
          }
        }
        else
        {
          uint64_t v11 = (char *)this + 584;
        }
        uint64_t v12 = *(void *)v11;
        unint64_t v13 = (unsigned int *)(*(void *)v11 + *((unsigned int *)v10 + 10));
        long long v14 = (char *)this + 224;
        if (*((void *)this + 28))
        {
          if (!*((void *)this + 29)) {
            long long v14 = (char *)this + 784;
          }
        }
        else
        {
          long long v14 = (char *)this + 784;
        }
        uint64_t v15 = *((void *)v14 + 1);
        if (v12) {
          BOOL v16 = v15 == 0;
        }
        else {
          BOOL v16 = 1;
        }
        if (!v16) {
          return (uint64_t)v13 + *v13;
        }
        return 0;
      }
    }
    memcpy(v6, __s, (size_t)v5);
    goto LABEL_14;
  }
  if (*((void *)this + 28))
  {
    if (*((void *)this + 29)) {
      int8x8_t v7 = (char *)this + 224;
    }
    else {
      int8x8_t v7 = (char *)this + 784;
    }
  }
  else
  {
    int8x8_t v7 = (char *)this + 784;
  }
  unint64_t v13 = *(unsigned int **)v7;
  uint64_t v18 = *((void *)v7 + 1);
  if (v13) {
    BOOL v19 = v18 == 0;
  }
  else {
    BOOL v19 = 1;
  }
  if (v19) {
    return 0;
  }
  return (uint64_t)v13 + *v13;
}

void std::__hash_table<std::__hash_value_type<std::string,AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::ExternalSymbolInfo>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::ExternalSymbolInfo>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::ExternalSymbolInfo>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::ExternalSymbolInfo>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::ExternalSymbolInfo>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6 = *(char *)(a2 + 23);
  if (v6 >= 0) {
    int8x8_t v7 = (uint64_t *)a2;
  }
  else {
    int8x8_t v7 = *(uint64_t **)a2;
  }
  if (v6 >= 0) {
    unint64_t v8 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    unint64_t v8 = *(void *)(a2 + 8);
  }
  unint64_t v9 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:nn180100](v7, v8);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v3 = v9;
      if (v9 >= v11) {
        unint64_t v3 = v9 % v11;
      }
    }
    else
    {
      unint64_t v3 = (v11 - 1) & v9;
    }
    unint64_t v13 = *(uint64_t ***)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      long long v14 = *v13;
      if (*v13)
      {
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v20 = v14[1];
            if (v20 == v10)
            {
              uint64_t v21 = *((unsigned __int8 *)v14 + 39);
              if ((v21 & 0x80u) == 0) {
                uint64_t v22 = *((unsigned __int8 *)v14 + 39);
              }
              else {
                uint64_t v22 = v14[3];
              }
              if (v22 == v8)
              {
                uint64_t v23 = (const void **)(v14 + 2);
                if ((v21 & 0x80) != 0)
                {
                  if (!memcmp(*v23, v7, v14[3])) {
                    return;
                  }
                }
                else
                {
                  if (!*((unsigned char *)v14 + 39)) {
                    return;
                  }
                  for (unint64_t i = v7; *(unsigned __int8 *)v23 == *(unsigned __int8 *)i; unint64_t i = (uint64_t *)((char *)i + 1))
                  {
                    uint64_t v23 = (const void **)((char *)v23 + 1);
                    if (!--v21) {
                      return;
                    }
                  }
                }
              }
            }
            else if ((v20 & (v11 - 1)) != v3)
            {
              goto LABEL_49;
            }
            long long v14 = (uint64_t *)*v14;
            if (!v14) {
              goto LABEL_49;
            }
          }
        }
        do
        {
          unint64_t v15 = v14[1];
          if (v15 == v10)
          {
            uint64_t v16 = *((unsigned __int8 *)v14 + 39);
            if ((v16 & 0x80u) == 0) {
              uint64_t v17 = *((unsigned __int8 *)v14 + 39);
            }
            else {
              uint64_t v17 = v14[3];
            }
            if (v17 == v8)
            {
              uint64_t v18 = (const void **)(v14 + 2);
              if ((v16 & 0x80) != 0)
              {
                if (!memcmp(*v18, v7, v14[3])) {
                  return;
                }
              }
              else
              {
                if (!*((unsigned char *)v14 + 39)) {
                  return;
                }
                for (unint64_t j = v7; *(unsigned __int8 *)v18 == *(unsigned __int8 *)j; unint64_t j = (uint64_t *)((char *)j + 1))
                {
                  uint64_t v18 = (const void **)((char *)v18 + 1);
                  if (!--v16) {
                    return;
                  }
                }
              }
            }
          }
          else
          {
            if (v15 >= v11) {
              v15 %= v11;
            }
            if (v15 != v3) {
              break;
            }
          }
          long long v14 = (uint64_t *)*v14;
        }
        while (v14);
      }
    }
  }
LABEL_49:
  long long v25 = (char *)operator new(0x80uLL);
  uint64_t v40 = v25;
  *(void *)long long v25 = 0;
  *((void *)v25 + 1) = v10;
  char v26 = (std::string *)(v25 + 16);
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v26, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)&v26->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
    *((void *)v25 + 4) = *(void *)(a3 + 16);
  }
  *(_OWORD *)(v25 + 40) = *(_OWORD *)(a3 + 24);
  *(_OWORD *)(v25 + 56) = *(_OWORD *)(a3 + 40);
  *(_OWORD *)(v25 + 72) = *(_OWORD *)(a3 + 56);
  *((void *)v25 + 11) = *(void *)(a3 + 72);
  long long v27 = *(_OWORD *)(a3 + 96);
  *((_OWORD *)v25 + 6) = *(_OWORD *)(a3 + 80);
  *((_OWORD *)v25 + 7) = v27;
  float v28 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v29 = *(float *)(a1 + 32);
  if (!v11 || (float)(v29 * (float)v11) < v28)
  {
    BOOL v30 = 1;
    if (v11 >= 3) {
      BOOL v30 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v31 = v30 | (2 * v11);
    unint64_t v32 = vcvtps_u32_f32(v28 / v29);
    if (v31 <= v32) {
      size_t prime = v32;
    }
    else {
      size_t prime = v31;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    int8x8_t v34 = *(int8x8_t *)(a1 + 8);
    if (prime > *(void *)&v34) {
      goto LABEL_64;
    }
    if (prime < *(void *)&v34)
    {
      unint64_t v35 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(void *)&v34 < 3uLL || (uint8x8_t v36 = (uint8x8_t)vcnt_s8(v34), v36.i16[0] = vaddlv_u8(v36), v36.u32[0] > 1uLL))
      {
        unint64_t v35 = std::__next_prime(v35);
      }
      else
      {
        uint64_t v37 = 1 << -(char)__clz(v35 - 1);
        if (v35 >= 2) {
          unint64_t v35 = v37;
        }
      }
      if (prime <= v35) {
        size_t prime = v35;
      }
      if (prime < *(void *)&v34) {
LABEL_64:
      }
        std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::__do_rehash<true>(a1, prime);
    }
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v3 = v10 % v11;
      }
      else {
        unint64_t v3 = v10;
      }
    }
    else
    {
      unint64_t v3 = (v11 - 1) & v10;
    }
  }
  uint64_t v38 = *(void **)(*(void *)a1 + 8 * v3);
  if (v38)
  {
    *(void *)uint64_t v40 = *v38;
    *uint64_t v38 = v40;
  }
  else
  {
    *(void *)uint64_t v40 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v40;
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v40)
    {
      unint64_t v39 = *(void *)(*(void *)v40 + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v39 >= v11) {
          v39 %= v11;
        }
      }
      else
      {
        v39 &= v11 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v39) = v40;
    }
  }
  ++*(void *)(a1 + 24);
}

void sub_242A5C7BC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,unsigned int>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,unsigned int>,void *>>>>::~unique_ptr[abi:nn180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::LinkInfo::initialize<AGCCodeTranslatorVisibleFunctionTypesG11,&(AGCCodeTranslatorG11::GetCompileReply(void const*))>(AGCDeserializedReply const&,AGX::HAL200::Device &,char const*,BOOL)::{lambda(AGCCodeTranslatorVisibleFunctionTypesG11,std::string,std::function<void ()(AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::ExternalSymbolInfo &,unsigned int)>)#1}::operator()<AGX::ArgumentMask<64ul>>(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2)
  {
    unint64_t v6 = a2;
    uint64_t v8 = a1 + 232;
    while (1)
    {
      unsigned int v9 = __clz(__rbit64(v6));
      std::to_string(&__p, v9);
      int v10 = *(char *)(a3 + 23);
      if (v10 >= 0) {
        unint64_t v11 = (const std::string::value_type *)a3;
      }
      else {
        unint64_t v11 = *(const std::string::value_type **)a3;
      }
      if (v10 >= 0) {
        std::string::size_type v12 = *(unsigned __int8 *)(a3 + 23);
      }
      else {
        std::string::size_type v12 = *(void *)(a3 + 8);
      }
      unint64_t v13 = std::string::insert(&__p, 0, v11, v12);
      std::string v26 = *v13;
      v13->__r_.__value_.__l.__size_ = 0;
      v13->__r_.__value_.__r.__words[2] = 0;
      v13->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      uint64_t v14 = *(void *)(a1 + 32);
      int v15 = SHIBYTE(v26.__r_.__value_.__r.__words[2]);
      if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&__p, v26.__r_.__value_.__l.__data_, v26.__r_.__value_.__l.__size_);
      }
      else {
        std::string __p = v26;
      }
      uint64_t v19 = 0;
      v20[0] = 0;
      *(void *)((char *)v20 + 5) = 0;
      v20[2] = v14;
      int v21 = 5;
      long long v22 = 0u;
      long long v23 = 0u;
      long long v24 = 0u;
      int v25 = 0;
      std::__hash_table<std::__hash_value_type<std::string,AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::ExternalSymbolInfo>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::ExternalSymbolInfo>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::ExternalSymbolInfo>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::ExternalSymbolInfo>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::ExternalSymbolInfo>>(v8, (uint64_t)&__p, (uint64_t)&__p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      uint64_t v16 = std::__hash_table<std::__hash_value_type<std::string,AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::ExternalSymbolInfo>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::ExternalSymbolInfo>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::ExternalSymbolInfo>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::ExternalSymbolInfo>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v8, (uint64_t)&v26, (uint64_t)&v26);
      LODWORD(__p.__r_.__value_.__l.__data_) = v9;
      uint64_t v17 = *(void *)(a4 + 24);
      if (!v17) {
        break;
      }
      (*(void (**)(uint64_t, char *, std::string *))(*(void *)v17 + 48))(v17, v16 + 40, &__p);
      if (v15 < 0) {
        operator delete(v26.__r_.__value_.__l.__data_);
      }
      v6 &= ~(1 << v9);
      if (!v6) {
        return;
      }
    }
    std::__throw_bad_function_call[abi:nn180100]();
    __break(1u);
  }
}

void sub_242A5C984(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p)
{
}

void *std::function<void ()(AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::ExternalSymbolInfo &,unsigned int)>::~function(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void std::vector<AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::LinkInfo::Relocation,std::allocator<AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::LinkInfo::Relocation>>::reserve(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = *(void ***)a1;
  if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3) < a2)
  {
    uint64_t v4 = *(void *)(a1 + 8);
    uint64_t v5 = 40 * a2;
    unint64_t v6 = (char *)operator new(40 * a2);
    int8x8_t v7 = &v6[v5];
    uint64_t v8 = &v6[v4 - (void)v2];
    if ((void **)v4 == v2)
    {
      *(void *)a1 = v8;
      *(void *)(a1 + 8) = v8;
      *(void *)(a1 + 16) = v7;
    }
    else
    {
      unsigned int v9 = &v6[v4 - (void)v2];
      do
      {
        int v10 = *(_DWORD *)(v4 - 40);
        v4 -= 40;
        *((_DWORD *)v9 - 10) = v10;
        v9 -= 40;
        long long v11 = *(_OWORD *)(v4 + 8);
        *((void *)v9 + 3) = *(void *)(v4 + 24);
        *(_OWORD *)(v9 + 8) = v11;
        *(void *)(v4 + 16) = 0;
        *(void *)(v4 + 24) = 0;
        *(void *)(v4 + 8) = 0;
        *((_DWORD *)v9 + 8) = *(_DWORD *)(v4 + 32);
      }
      while ((void **)v4 != v2);
      uint64_t v2 = *(void ***)a1;
      std::string::size_type v12 = *(void ***)(a1 + 8);
      *(void *)a1 = v9;
      *(void *)(a1 + 8) = v8;
      *(void *)(a1 + 16) = v7;
      while (v12 != v2)
      {
        if (*((char *)v12 - 9) < 0) {
          operator delete(*(v12 - 4));
        }
        v12 -= 5;
      }
    }
    if (v2)
    {
      operator delete(v2);
    }
  }
}

char *std::vector<AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::LinkInfo::Relocation,std::allocator<AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::LinkInfo::Relocation>>::__push_back_slow_path<AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::LinkInfo::Relocation>(char **a1, uint64_t a2)
{
  unint64_t v2 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 3);
  unint64_t v3 = v2 + 1;
  if (v2 + 1 > 0x666666666666666) {
    abort();
  }
  if (0x999999999999999ALL * ((a1[2] - *a1) >> 3) > v3) {
    unint64_t v3 = 0x999999999999999ALL * ((a1[2] - *a1) >> 3);
  }
  if (0xCCCCCCCCCCCCCCCDLL * ((a1[2] - *a1) >> 3) >= 0x333333333333333) {
    unint64_t v5 = 0x666666666666666;
  }
  else {
    unint64_t v5 = v3;
  }
  if (v5 > 0x666666666666666) {
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  uint64_t v7 = 40 * v5;
  uint64_t v8 = (char *)operator new(40 * v5);
  unsigned int v9 = &v8[40 * v2];
  int v10 = &v8[v7];
  *(_DWORD *)unsigned int v9 = *(_DWORD *)a2;
  *(_OWORD *)(v9 + 8) = *(_OWORD *)(a2 + 8);
  *((void *)v9 + 3) = *(void *)(a2 + 24);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *((_DWORD *)v9 + 8) = *(_DWORD *)(a2 + 32);
  long long v11 = v9 + 40;
  std::string::size_type v12 = *a1;
  unint64_t v13 = a1[1];
  if (v13 == *a1)
  {
    *a1 = v9;
    a1[1] = v11;
    a1[2] = v10;
  }
  else
  {
    do
    {
      int v14 = *((_DWORD *)v13 - 10);
      v13 -= 40;
      *((_DWORD *)v9 - 10) = v14;
      v9 -= 40;
      long long v15 = *(_OWORD *)(v13 + 8);
      *((void *)v9 + 3) = *((void *)v13 + 3);
      *(_OWORD *)(v9 + 8) = v15;
      *((void *)v13 + 2) = 0;
      *((void *)v13 + 3) = 0;
      *((void *)v13 + 1) = 0;
      *((_DWORD *)v9 + 8) = *((_DWORD *)v13 + 8);
    }
    while (v13 != v12);
    unint64_t v13 = *a1;
    uint64_t v16 = a1[1];
    *a1 = v9;
    a1[1] = v11;
    a1[2] = v10;
    while (v16 != v13)
    {
      if (*(v16 - 9) < 0) {
        operator delete(*((void **)v16 - 4));
      }
      v16 -= 40;
    }
  }
  if (v13) {
    operator delete(v13);
  }
  return v11;
}

void std::vector<std::shared_ptr<AGX::HAL200::Sampler>>::reserve(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = *(char **)a1;
  if (a2 > (uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 4)
  {
    uint64_t v4 = *(char **)(a1 + 8);
    uint64_t v5 = 16 * a2;
    unint64_t v6 = (char *)operator new(16 * a2);
    uint64_t v7 = &v6[v5];
    uint64_t v8 = &v6[v4 - v2];
    if (v4 == v2)
    {
      *(void *)a1 = v8;
      *(void *)(a1 + 8) = v8;
      *(void *)(a1 + 16) = v7;
    }
    else
    {
      unsigned int v9 = &v6[v4 - v2];
      do
      {
        long long v10 = *((_OWORD *)v4 - 1);
        v4 -= 16;
        *((_OWORD *)v9 - 1) = v10;
        v9 -= 16;
        *(void *)uint64_t v4 = 0;
        *((void *)v4 + 1) = 0;
      }
      while (v4 != v2);
      unint64_t v2 = *(char **)a1;
      long long v11 = *(char **)(a1 + 8);
      *(void *)a1 = v9;
      *(void *)(a1 + 8) = v8;
      for (*(void *)(a1 + 16) = v7; v11 != v2; v11 -= 16)
      {
        std::string::size_type v12 = (std::__shared_weak_count *)*((void *)v11 - 1);
        if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
          std::__shared_weak_count::__release_weak(v12);
        }
      }
    }
    if (v2)
    {
      operator delete(v2);
    }
  }
}

void std::__function::__func<BOOL AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::LinkInfo::initialize<AGCCodeTranslatorVisibleFunctionTypesG11,&(AGCCodeTranslatorG11::GetCompileReply(void const*))>(AGCDeserializedReply const&,AGX::HAL200::Device &,char const*,BOOL)::{lambda(AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::ExternalSymbolInfo &,unsigned int)#4},std::allocator<BOOL AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::LinkInfo::initialize<AGCCodeTranslatorVisibleFunctionTypesG11,&(AGCCodeTranslatorG11::GetCompileReply(void const*))>(AGCDeserializedReply const&,AGX::HAL200::Device &,char const*,BOOL)::{lambda(AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::ExternalSymbolInfo &,unsigned int)#4}>,void ()(AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::ExternalSymbolInfo &,unsigned int)>::operator()(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  *(void *)(a2 + 80) |= 1 << *a3;
}

void std::__function::__func<BOOL AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::LinkInfo::initialize<AGCCodeTranslatorVisibleFunctionTypesG11,&(AGCCodeTranslatorG11::GetCompileReply(void const*))>(AGCDeserializedReply const&,AGX::HAL200::Device &,char const*,BOOL)::{lambda(AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::ExternalSymbolInfo &,unsigned int)#4},std::allocator<BOOL AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::LinkInfo::initialize<AGCCodeTranslatorVisibleFunctionTypesG11,&(AGCCodeTranslatorG11::GetCompileReply(void const*))>(AGCDeserializedReply const&,AGX::HAL200::Device &,char const*,BOOL)::{lambda(AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::ExternalSymbolInfo &,unsigned int)#4}>,void ()(AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::ExternalSymbolInfo &,unsigned int)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26F8525D0;
}

void *std::__function::__func<BOOL AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::LinkInfo::initialize<AGCCodeTranslatorVisibleFunctionTypesG11,&(AGCCodeTranslatorG11::GetCompileReply(void const*))>(AGCDeserializedReply const&,AGX::HAL200::Device &,char const*,BOOL)::{lambda(AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::ExternalSymbolInfo &,unsigned int)#4},std::allocator<BOOL AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::LinkInfo::initialize<AGCCodeTranslatorVisibleFunctionTypesG11,&(AGCCodeTranslatorG11::GetCompileReply(void const*))>(AGCDeserializedReply const&,AGX::HAL200::Device &,char const*,BOOL)::{lambda(AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::ExternalSymbolInfo &,unsigned int)#4}>,void ()(AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::ExternalSymbolInfo &,unsigned int)>::__clone()
{
  double result = operator new(0x10uLL);
  void *result = &unk_26F8525D0;
  return result;
}

void std::__function::__func<BOOL AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::LinkInfo::initialize<AGCCodeTranslatorVisibleFunctionTypesG11,&(AGCCodeTranslatorG11::GetCompileReply(void const*))>(AGCDeserializedReply const&,AGX::HAL200::Device &,char const*,BOOL)::{lambda(AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::ExternalSymbolInfo &,unsigned int)#4},std::allocator<BOOL AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::LinkInfo::initialize<AGCCodeTranslatorVisibleFunctionTypesG11,&(AGCCodeTranslatorG11::GetCompileReply(void const*))>(AGCDeserializedReply const&,AGX::HAL200::Device &,char const*,BOOL)::{lambda(AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::ExternalSymbolInfo &,unsigned int)#4}>,void ()(AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::ExternalSymbolInfo &,unsigned int)>::~__func()
{
}

void std::__function::__func<BOOL AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::LinkInfo::initialize<AGCCodeTranslatorVisibleFunctionTypesG11,&(AGCCodeTranslatorG11::GetCompileReply(void const*))>(AGCDeserializedReply const&,AGX::HAL200::Device &,char const*,BOOL)::{lambda(AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::ExternalSymbolInfo &,unsigned int)#3},std::allocator<BOOL AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::LinkInfo::initialize<AGCCodeTranslatorVisibleFunctionTypesG11,&(AGCCodeTranslatorG11::GetCompileReply(void const*))>(AGCDeserializedReply const&,AGX::HAL200::Device &,char const*,BOOL)::{lambda(AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::ExternalSymbolInfo &,unsigned int)#3}>,void ()(AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::ExternalSymbolInfo &,unsigned int)>::operator()(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  *(void *)(a2 + 72) |= 1 << *a3;
}

void std::__function::__func<BOOL AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::LinkInfo::initialize<AGCCodeTranslatorVisibleFunctionTypesG11,&(AGCCodeTranslatorG11::GetCompileReply(void const*))>(AGCDeserializedReply const&,AGX::HAL200::Device &,char const*,BOOL)::{lambda(AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::ExternalSymbolInfo &,unsigned int)#3},std::allocator<BOOL AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::LinkInfo::initialize<AGCCodeTranslatorVisibleFunctionTypesG11,&(AGCCodeTranslatorG11::GetCompileReply(void const*))>(AGCDeserializedReply const&,AGX::HAL200::Device &,char const*,BOOL)::{lambda(AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::ExternalSymbolInfo &,unsigned int)#3}>,void ()(AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::ExternalSymbolInfo &,unsigned int)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26F852588;
}

void *std::__function::__func<BOOL AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::LinkInfo::initialize<AGCCodeTranslatorVisibleFunctionTypesG11,&(AGCCodeTranslatorG11::GetCompileReply(void const*))>(AGCDeserializedReply const&,AGX::HAL200::Device &,char const*,BOOL)::{lambda(AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::ExternalSymbolInfo &,unsigned int)#3},std::allocator<BOOL AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::LinkInfo::initialize<AGCCodeTranslatorVisibleFunctionTypesG11,&(AGCCodeTranslatorG11::GetCompileReply(void const*))>(AGCDeserializedReply const&,AGX::HAL200::Device &,char const*,BOOL)::{lambda(AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::ExternalSymbolInfo &,unsigned int)#3}>,void ()(AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::ExternalSymbolInfo &,unsigned int)>::__clone()
{
  double result = operator new(0x10uLL);
  void *result = &unk_26F852588;
  return result;
}

void std::__function::__func<BOOL AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::LinkInfo::initialize<AGCCodeTranslatorVisibleFunctionTypesG11,&(AGCCodeTranslatorG11::GetCompileReply(void const*))>(AGCDeserializedReply const&,AGX::HAL200::Device &,char const*,BOOL)::{lambda(AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::ExternalSymbolInfo &,unsigned int)#3},std::allocator<BOOL AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::LinkInfo::initialize<AGCCodeTranslatorVisibleFunctionTypesG11,&(AGCCodeTranslatorG11::GetCompileReply(void const*))>(AGCDeserializedReply const&,AGX::HAL200::Device &,char const*,BOOL)::{lambda(AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::ExternalSymbolInfo &,unsigned int)#3}>,void ()(AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::ExternalSymbolInfo &,unsigned int)>::~__func()
{
}

char *std::__hash_table<std::__hash_value_type<std::string,AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::ExternalSymbolInfo>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::ExternalSymbolInfo>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::ExternalSymbolInfo>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::ExternalSymbolInfo>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6 = *(char *)(a2 + 23);
  if (v6 >= 0) {
    uint64_t v7 = (uint64_t *)a2;
  }
  else {
    uint64_t v7 = *(uint64_t **)a2;
  }
  if (v6 >= 0) {
    unint64_t v8 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    unint64_t v8 = *(void *)(a2 + 8);
  }
  unint64_t v9 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:nn180100](v7, v8);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v3 = v9;
      if (v9 >= v11) {
        unint64_t v3 = v9 % v11;
      }
    }
    else
    {
      unint64_t v3 = (v11 - 1) & v9;
    }
    unint64_t v13 = *(char ***)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      int v14 = *v13;
      if (*v13)
      {
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v19 = *((void *)v14 + 1);
            if (v19 == v10)
            {
              uint64_t v20 = v14[39];
              if ((v20 & 0x80u) == 0) {
                uint64_t v21 = v14[39];
              }
              else {
                uint64_t v21 = *((void *)v14 + 3);
              }
              if (v21 == v8)
              {
                if ((v20 & 0x80) != 0)
                {
                  if (!memcmp(*((const void **)v14 + 2), v7, *((void *)v14 + 3))) {
                    return v14;
                  }
                }
                else
                {
                  if (!v14[39]) {
                    return v14;
                  }
                  uint64_t v22 = 0;
                  while (v14[v22 + 16] == *((unsigned char *)v7 + v22))
                  {
                    if (v20 == ++v22) {
                      return v14;
                    }
                  }
                }
              }
            }
            else if ((v19 & (v11 - 1)) != v3)
            {
              goto LABEL_49;
            }
            int v14 = *(char **)v14;
            if (!v14) {
              goto LABEL_49;
            }
          }
        }
        do
        {
          unint64_t v15 = *((void *)v14 + 1);
          if (v15 == v10)
          {
            uint64_t v16 = v14[39];
            if ((v16 & 0x80u) == 0) {
              uint64_t v17 = v14[39];
            }
            else {
              uint64_t v17 = *((void *)v14 + 3);
            }
            if (v17 == v8)
            {
              if ((v16 & 0x80) != 0)
              {
                if (!memcmp(*((const void **)v14 + 2), v7, *((void *)v14 + 3))) {
                  return v14;
                }
              }
              else
              {
                if (!v14[39]) {
                  return v14;
                }
                uint64_t v18 = 0;
                while (v14[v18 + 16] == *((unsigned char *)v7 + v18))
                {
                  if (v16 == ++v18) {
                    return v14;
                  }
                }
              }
            }
          }
          else
          {
            if (v15 >= v11) {
              v15 %= v11;
            }
            if (v15 != v3) {
              break;
            }
          }
          int v14 = *(char **)v14;
        }
        while (v14);
      }
    }
  }
LABEL_49:
  long long v23 = (char *)operator new(0x80uLL);
  uint64_t v38 = v23;
  *(void *)long long v23 = 0;
  *((void *)v23 + 1) = v10;
  long long v24 = (std::string *)(v23 + 16);
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v24, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)&v24->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
    *((void *)v23 + 4) = *(void *)(a3 + 16);
  }
  *((void *)v23 + 15) = 0;
  *(_OWORD *)(v23 + 104) = 0u;
  *(_OWORD *)(v23 + 88) = 0u;
  *(_OWORD *)(v23 + 72) = 0u;
  *(_OWORD *)(v23 + 56) = 0u;
  *(_OWORD *)(v23 + 40) = 0u;
  float v25 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v26 = *(float *)(a1 + 32);
  if (!v11 || (float)(v26 * (float)v11) < v25)
  {
    BOOL v27 = 1;
    if (v11 >= 3) {
      BOOL v27 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v28 = v27 | (2 * v11);
    unint64_t v29 = vcvtps_u32_f32(v25 / v26);
    if (v28 <= v29) {
      size_t prime = v29;
    }
    else {
      size_t prime = v28;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    int8x8_t v31 = *(int8x8_t *)(a1 + 8);
    if (prime > *(void *)&v31) {
      goto LABEL_64;
    }
    if (prime < *(void *)&v31)
    {
      unint64_t v32 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(void *)&v31 < 3uLL || (uint8x8_t v33 = (uint8x8_t)vcnt_s8(v31), v33.i16[0] = vaddlv_u8(v33), v33.u32[0] > 1uLL))
      {
        unint64_t v32 = std::__next_prime(v32);
      }
      else
      {
        uint64_t v34 = 1 << -(char)__clz(v32 - 1);
        if (v32 >= 2) {
          unint64_t v32 = v34;
        }
      }
      if (prime <= v32) {
        size_t prime = v32;
      }
      if (prime < *(void *)&v31) {
LABEL_64:
      }
        std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::__do_rehash<true>(a1, prime);
    }
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v3 = v10 % v11;
      }
      else {
        unint64_t v3 = v10;
      }
    }
    else
    {
      unint64_t v3 = (v11 - 1) & v10;
    }
  }
  unint64_t v35 = *(void **)(*(void *)a1 + 8 * v3);
  if (v35)
  {
    *(void *)uint64_t v38 = *v35;
    void *v35 = v38;
  }
  else
  {
    *(void *)uint64_t v38 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v38;
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v38)
    {
      unint64_t v36 = *(void *)(*(void *)v38 + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v36 >= v11) {
          v36 %= v11;
        }
      }
      else
      {
        v36 &= v11 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v36) = v38;
    }
  }
  int v14 = v38;
  ++*(void *)(a1 + 24);
  return v14;
}

void sub_242A5D308(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,unsigned int>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,unsigned int>,void *>>>>::~unique_ptr[abi:nn180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void std::__function::__func<BOOL AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::LinkInfo::initialize<AGCCodeTranslatorVisibleFunctionTypesG11,&(AGCCodeTranslatorG11::GetCompileReply(void const*))>(AGCDeserializedReply const&,AGX::HAL200::Device &,char const*,BOOL)::{lambda(AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::ExternalSymbolInfo &,unsigned int)#2},std::allocator<BOOL AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::LinkInfo::initialize<AGCCodeTranslatorVisibleFunctionTypesG11,&(AGCCodeTranslatorG11::GetCompileReply(void const*))>(AGCDeserializedReply const&,AGX::HAL200::Device &,char const*,BOOL)::{lambda(AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::ExternalSymbolInfo &,unsigned int)#2}>,void ()(AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::ExternalSymbolInfo &,unsigned int)>::operator()(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  *(void *)(a2 + 8 * (*a3 > 0x3Fu) + 56) |= 1 << *a3;
}

void std::__function::__func<BOOL AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::LinkInfo::initialize<AGCCodeTranslatorVisibleFunctionTypesG11,&(AGCCodeTranslatorG11::GetCompileReply(void const*))>(AGCDeserializedReply const&,AGX::HAL200::Device &,char const*,BOOL)::{lambda(AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::ExternalSymbolInfo &,unsigned int)#2},std::allocator<BOOL AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::LinkInfo::initialize<AGCCodeTranslatorVisibleFunctionTypesG11,&(AGCCodeTranslatorG11::GetCompileReply(void const*))>(AGCDeserializedReply const&,AGX::HAL200::Device &,char const*,BOOL)::{lambda(AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::ExternalSymbolInfo &,unsigned int)#2}>,void ()(AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::ExternalSymbolInfo &,unsigned int)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26F852540;
}

void *std::__function::__func<BOOL AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::LinkInfo::initialize<AGCCodeTranslatorVisibleFunctionTypesG11,&(AGCCodeTranslatorG11::GetCompileReply(void const*))>(AGCDeserializedReply const&,AGX::HAL200::Device &,char const*,BOOL)::{lambda(AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::ExternalSymbolInfo &,unsigned int)#2},std::allocator<BOOL AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::LinkInfo::initialize<AGCCodeTranslatorVisibleFunctionTypesG11,&(AGCCodeTranslatorG11::GetCompileReply(void const*))>(AGCDeserializedReply const&,AGX::HAL200::Device &,char const*,BOOL)::{lambda(AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::ExternalSymbolInfo &,unsigned int)#2}>,void ()(AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::ExternalSymbolInfo &,unsigned int)>::__clone()
{
  double result = operator new(0x10uLL);
  void *result = &unk_26F852540;
  return result;
}

void std::__function::__func<BOOL AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::LinkInfo::initialize<AGCCodeTranslatorVisibleFunctionTypesG11,&(AGCCodeTranslatorG11::GetCompileReply(void const*))>(AGCDeserializedReply const&,AGX::HAL200::Device &,char const*,BOOL)::{lambda(AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::ExternalSymbolInfo &,unsigned int)#2},std::allocator<BOOL AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::LinkInfo::initialize<AGCCodeTranslatorVisibleFunctionTypesG11,&(AGCCodeTranslatorG11::GetCompileReply(void const*))>(AGCDeserializedReply const&,AGX::HAL200::Device &,char const*,BOOL)::{lambda(AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::ExternalSymbolInfo &,unsigned int)#2}>,void ()(AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::ExternalSymbolInfo &,unsigned int)>::~__func()
{
}

void std::__function::__func<BOOL AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::LinkInfo::initialize<AGCCodeTranslatorVisibleFunctionTypesG11,&(AGCCodeTranslatorG11::GetCompileReply(void const*))>(AGCDeserializedReply const&,AGX::HAL200::Device &,char const*,BOOL)::{lambda(AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::ExternalSymbolInfo &,unsigned int)#1},std::allocator<BOOL AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::LinkInfo::initialize<AGCCodeTranslatorVisibleFunctionTypesG11,&(AGCCodeTranslatorG11::GetCompileReply(void const*))>(AGCDeserializedReply const&,AGX::HAL200::Device &,char const*,BOOL)::{lambda(AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::ExternalSymbolInfo &,unsigned int)#1}>,void ()(AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::ExternalSymbolInfo &,unsigned int)>::operator()(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  *(void *)(a2 + 48) |= 1 << *a3;
}

void std::__function::__func<BOOL AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::LinkInfo::initialize<AGCCodeTranslatorVisibleFunctionTypesG11,&(AGCCodeTranslatorG11::GetCompileReply(void const*))>(AGCDeserializedReply const&,AGX::HAL200::Device &,char const*,BOOL)::{lambda(AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::ExternalSymbolInfo &,unsigned int)#1},std::allocator<BOOL AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::LinkInfo::initialize<AGCCodeTranslatorVisibleFunctionTypesG11,&(AGCCodeTranslatorG11::GetCompileReply(void const*))>(AGCDeserializedReply const&,AGX::HAL200::Device &,char const*,BOOL)::{lambda(AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::ExternalSymbolInfo &,unsigned int)#1}>,void ()(AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::ExternalSymbolInfo &,unsigned int)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26F8524F8;
}

void *std::__function::__func<BOOL AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::LinkInfo::initialize<AGCCodeTranslatorVisibleFunctionTypesG11,&(AGCCodeTranslatorG11::GetCompileReply(void const*))>(AGCDeserializedReply const&,AGX::HAL200::Device &,char const*,BOOL)::{lambda(AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::ExternalSymbolInfo &,unsigned int)#1},std::allocator<BOOL AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::LinkInfo::initialize<AGCCodeTranslatorVisibleFunctionTypesG11,&(AGCCodeTranslatorG11::GetCompileReply(void const*))>(AGCDeserializedReply const&,AGX::HAL200::Device &,char const*,BOOL)::{lambda(AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::ExternalSymbolInfo &,unsigned int)#1}>,void ()(AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::ExternalSymbolInfo &,unsigned int)>::__clone()
{
  double result = operator new(0x10uLL);
  void *result = &unk_26F8524F8;
  return result;
}

void std::__function::__func<BOOL AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::LinkInfo::initialize<AGCCodeTranslatorVisibleFunctionTypesG11,&(AGCCodeTranslatorG11::GetCompileReply(void const*))>(AGCDeserializedReply const&,AGX::HAL200::Device &,char const*,BOOL)::{lambda(AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::ExternalSymbolInfo &,unsigned int)#1},std::allocator<BOOL AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::LinkInfo::initialize<AGCCodeTranslatorVisibleFunctionTypesG11,&(AGCCodeTranslatorG11::GetCompileReply(void const*))>(AGCDeserializedReply const&,AGX::HAL200::Device &,char const*,BOOL)::{lambda(AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::ExternalSymbolInfo &,unsigned int)#1}>,void ()(AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::ExternalSymbolInfo &,unsigned int)>::~__func()
{
}

void AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::LinkInfo::initialize<AGCCodeTranslatorVisibleFunctionTypesG10,&(AGCCodeTranslatorG10::GetCompileReply(void const*))>(_DWORD *a1, void *a2, uint64_t a3, uint64_t a4, int a5)
{
  int v6 = a1;
  uint64_t v716 = *MEMORY[0x263EF8340];
  if (a2[58])
  {
    uint64_t v7 = (unsigned int **)(a2 + 58);
    if (!a2[59]) {
      uint64_t v7 = (unsigned int **)(a2 + 128);
    }
  }
  else
  {
    uint64_t v7 = (unsigned int **)(a2 + 128);
  }
  unint64_t v9 = *v7;
  unint64_t v8 = v7[1];
  if (v9) {
    BOOL v10 = v8 == 0;
  }
  else {
    BOOL v10 = 1;
  }
  if (v10) {
    unint64_t v11 = 0;
  }
  else {
    unint64_t v11 = (int *)((char *)v9 + *v9);
  }
  uint8x8_t v12 = (unsigned __int16 *)((char *)v11 - *v11);
  if (*v12 >= 5u && (uint64_t v13 = v12[2]) != 0) {
    int v14 = (int *)((char *)v11 + v13 + *(unsigned int *)((char *)v11 + v13));
  }
  else {
    int v14 = 0;
  }
  if (a2[3])
  {
    if (a2[4]) {
      unint64_t v15 = a2 + 3;
    }
    else {
      unint64_t v15 = a2 + 73;
    }
  }
  else
  {
    unint64_t v15 = a2 + 73;
  }
  unint64_t v16 = a2[227];
  uint64_t v17 = (unsigned __int16 *)((char *)v14 - *v14);
  if (*v17 < 7u)
  {
    LODWORD(v18) = 0;
  }
  else
  {
    uint64_t v18 = v17[3];
    if (v18) {
      LODWORD(v18) = *(int *)((char *)v14 + v18);
    }
  }
  uint64_t v676 = a2[224];
  unint64_t v19 = HIDWORD(v16);
  long long v670 = (char *)(a2 + 3);
  uint64_t v20 = a2[225];
  uint64_t v650 = *v15;
  *a1 = v18;
  MEMORY[0x24566EB20](a1 + 2, a4);
  *((void *)v6 + 4) = v6;
  if (a5)
  {
    uint64_t v21 = (unsigned __int16 *)((char *)v14 - *v14);
    if (*v21 < 0x43u)
    {
      LODWORD(v22) = 0;
    }
    else
    {
      uint64_t v22 = v21[33];
      if (v22) {
        LODWORD(v22) = *(int *)((char *)v14 + v22);
      }
    }
    v6[121] = v22;
  }
  unint64_t prime = vcvtps_u32_f32((float)v19 / *((float *)v6 + 66));
  if (prime == 1)
  {
    unint64_t prime = 2;
  }
  else if ((prime & (prime - 1)) != 0)
  {
    unint64_t prime = std::__next_prime(prime);
  }
  int8x8_t v24 = *(int8x8_t *)(v6 + 60);
  if (prime > *(void *)&v24) {
    goto LABEL_36;
  }
  if (prime < *(void *)&v24)
  {
    unint64_t v25 = vcvtps_u32_f32((float)*((unint64_t *)v6 + 32) / *((float *)v6 + 66));
    if (*(void *)&v24 < 3uLL || (uint8x8_t v26 = (uint8x8_t)vcnt_s8(v24), v26.i16[0] = vaddlv_u8(v26), v26.u32[0] > 1uLL))
    {
      unint64_t v25 = std::__next_prime(v25);
    }
    else
    {
      uint64_t v27 = 1 << -(char)__clz(v25 - 1);
      if (v25 >= 2) {
        unint64_t v25 = v27;
      }
    }
    if (prime <= v25) {
      unint64_t prime = v25;
    }
    if (prime < *(void *)&v24) {
LABEL_36:
    }
      std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::__do_rehash<true>((uint64_t)(v6 + 58), prime);
  }
  uint64_t v678 = (uint64_t)v6;
  v679 = (AGCDeserializedReply *)a2;
  uint64_t v675 = v20 + 1;
  long long v677 = v6 + 58;
  uint64_t v652 = v14;
  if (!v19) {
    goto LABEL_275;
  }
  uint64_t v28 = 0;
  char v649 = 0;
  uint64_t v651 = (uint64_t)(v6 + 68);
  v647 = v6 + 108;
  char v648 = v6 + 100;
  int v654 = v16;
  unint64_t v655 = HIDWORD(v16);
  do
  {
    unint64_t v29 = (unsigned int *)(v676 + 16 * (v28 + v16));
    char v30 = *((unsigned char *)v29 + 4);
    uint64_t v671 = *((void *)v29 + 1);
    int8x8_t v31 = (const char *)(v675 + *v29);
    int v32 = strncmp(v31, "agc.main", 8uLL);
    int v33 = strncmp(v31, "agc.intersection", 0x10uLL);
    int v34 = strncmp(v31, "agc.cliqueS", 0xBuLL);
    if (v32) {
      BOOL v35 = v33 == 0;
    }
    else {
      BOOL v35 = 1;
    }
    if (v35 || v34 == 0) {
      goto LABEL_52;
    }
    unint64_t v37 = *((unsigned __int8 *)v29 + 5);
    int8x8_t v38 = *(int8x8_t *)((char *)v679 + 1760);
    if (v38)
    {
      uint8x8_t v39 = (uint8x8_t)vcnt_s8(v38);
      v39.i16[0] = vaddlv_u8(v39);
      if (v39.u32[0] > 1uLL)
      {
        unint64_t v40 = *((unsigned __int8 *)v29 + 5);
        if (*(void *)&v38 <= v37) {
          unint64_t v40 = v37 % *(void *)&v38;
        }
      }
      else
      {
        unint64_t v40 = (v38.i32[0] - 1) & v37;
      }
      unsigned int v41 = *(uint64_t **)(*((void *)v679 + 219) + 8 * v40);
      if (v41)
      {
        unsigned int v41 = (uint64_t *)*v41;
        if (v41)
        {
          if (v39.u32[0] < 2uLL)
          {
            uint64_t v42 = *(void *)&v38 - 1;
            while (1)
            {
              uint64_t v44 = v41[1];
              if (v44 == v37)
              {
                if (*((_DWORD *)v41 + 4) == v37) {
                  goto LABEL_81;
                }
              }
              else if ((v44 & v42) != v40)
              {
                goto LABEL_80;
              }
              unsigned int v41 = (uint64_t *)*v41;
              if (!v41) {
                goto LABEL_81;
              }
            }
          }
          do
          {
            unint64_t v43 = v41[1];
            if (v43 == v37)
            {
              if (*((_DWORD *)v41 + 4) == v37) {
                break;
              }
            }
            else
            {
              if (v43 >= *(void *)&v38) {
                v43 %= *(void *)&v38;
              }
              if (v43 != v40) {
                goto LABEL_80;
              }
            }
            unsigned int v41 = (uint64_t *)*v41;
          }
          while (v41);
        }
      }
    }
    else
    {
LABEL_80:
      unsigned int v41 = 0;
    }
LABEL_81:
    if (*((char *)v41 + 47) < 0) {
      std::string::__init_copy_ctor_external(&__p, (const std::string::value_type *)v41[3], v41[4]);
    }
    else {
      std::string __p = *(std::string *)((unsigned char *)v41 + 1);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      if (__p.__r_.__value_.__l.__size_ != 6)
      {
        if (__p.__r_.__value_.__l.__size_ == 12)
        {
          char v48 = v30;
          BOOL v658 = 0;
          BOOL v51 = 0;
          unsigned __int8 v657 = 0;
          BOOL v660 = 0;
          int v662 = 0;
          int v664 = 0;
          int v667 = 0;
          int v52 = 0;
          int v53 = 0;
          int v50 = *(void *)__p.__r_.__value_.__l.__data_ == 0x435F545845545F5FLL
             && *(_DWORD *)(__p.__r_.__value_.__r.__words[0] + 8) == 1414745679;
          goto LABEL_214;
        }
        if (__p.__r_.__value_.__l.__size_ != 13)
        {
LABEL_96:
          char v48 = v30;
          int v50 = 0;
          BOOL v658 = 0;
          BOOL v51 = 0;
          unsigned __int8 v657 = 0;
          BOOL v660 = 0;
          int v662 = 0;
          int v664 = 0;
          int v667 = 0;
          int v52 = 0;
          int v53 = 0;
          goto LABEL_214;
        }
        p_p = (unint64_t *)__p.__r_.__value_.__r.__words[0];
        goto LABEL_93;
      }
      if (*(_DWORD *)__p.__r_.__value_.__l.__data_ != 1163157343
        || *(_WORD *)(__p.__r_.__value_.__r.__words[0] + 4) != 21592)
      {
        char v48 = v30;
        BOOL v658 = 0;
        BOOL v51 = 0;
        unsigned __int8 v657 = 0;
        BOOL v660 = 0;
        int v662 = 0;
        int v664 = 0;
        int v667 = 0;
        int v52 = 0;
        int v53 = 0;
        BOOL v56 = *(_DWORD *)__p.__r_.__value_.__l.__data_ == 1094999903;
        int v57 = *(unsigned __int16 *)(__p.__r_.__value_.__r.__words[0] + 4);
        goto LABEL_125;
      }
    }
    else
    {
      if (HIBYTE(__p.__r_.__value_.__r.__words[2]) != 6)
      {
        if (HIBYTE(__p.__r_.__value_.__r.__words[2]) == 12)
        {
          char v48 = v30;
          BOOL v658 = 0;
          BOOL v51 = 0;
          unsigned __int8 v657 = 0;
          BOOL v660 = 0;
          int v662 = 0;
          int v664 = 0;
          int v667 = 0;
          int v52 = 0;
          int v53 = 0;
          int v50 = __p.__r_.__value_.__r.__words[0] == 0x435F545845545F5FLL
             && LODWORD(__p.__r_.__value_.__r.__words[1]) == 1414745679;
          goto LABEL_214;
        }
        if (HIBYTE(__p.__r_.__value_.__r.__words[2]) != 13) {
          goto LABEL_96;
        }
        p_p = (unint64_t *)&__p;
LABEL_93:
        unint64_t v46 = bswap64(*p_p);
        unint64_t v47 = 0x5F5F444154415F43;
        if (v46 == 0x5F5F444154415F43
          && (unint64_t v46 = bswap64(*(unint64_t *)((char *)p_p + 5)),
              unint64_t v47 = 0x415F434F4D4D4F4ELL,
              v46 == 0x415F434F4D4D4F4ELL))
        {
          char v48 = v30;
          int v49 = 0;
        }
        else
        {
          char v48 = v30;
          if (v46 < v47) {
            int v49 = -1;
          }
          else {
            int v49 = 1;
          }
        }
        BOOL v658 = 0;
        BOOL v51 = 0;
        unsigned __int8 v657 = 0;
        BOOL v660 = 0;
        int v662 = 0;
        int v664 = 0;
        int v667 = 0;
        int v52 = 0;
        int v53 = 0;
        if (v49) {
          int v50 = 0;
        }
        else {
          int v50 = 3;
        }
        goto LABEL_214;
      }
      if (LODWORD(__p.__r_.__value_.__l.__data_) != 1163157343 || WORD2(__p.__r_.__value_.__r.__words[0]) != 21592)
      {
        char v48 = v30;
        BOOL v658 = 0;
        BOOL v51 = 0;
        unsigned __int8 v657 = 0;
        BOOL v660 = 0;
        int v662 = 0;
        int v664 = 0;
        int v667 = 0;
        int v52 = 0;
        int v53 = 0;
        BOOL v56 = LODWORD(__p.__r_.__value_.__l.__data_) == 1094999903;
        int v57 = WORD2(__p.__r_.__value_.__r.__words[0]);
LABEL_125:
        int v61 = v56 && v57 == 16724;
        int v50 = 2 * v61;
        goto LABEL_214;
      }
    }
    size_t v62 = strlen(v31);
    if (v62 > 0x7FFFFFFFFFFFFFF7) {
      abort();
    }
    std::string::size_type v63 = v62;
    if (v62 >= 0x17)
    {
      uint64_t v65 = (v62 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v62 | 7) != 0x17) {
        uint64_t v65 = v62 | 7;
      }
      uint64_t v66 = v65 + 1;
      std::string::size_type v64 = (std::string *)operator new(v65 + 1);
      __dst[0].__r_.__value_.__l.__size_ = v63;
      __dst[0].__r_.__value_.__r.__words[2] = v66 | 0x8000000000000000;
      __dst[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v64;
LABEL_139:
      memmove(v64, v31, v63);
      goto LABEL_140;
    }
    *((unsigned char *)&__dst[0].__r_.__value_.__s + 23) = v62;
    std::string::size_type v64 = __dst;
    if (v62) {
      goto LABEL_139;
    }
LABEL_140:
    v64->__r_.__value_.__s.__data_[v63] = 0;
    uint64_t v67 = std::string::append(__dst, "@md");
    long long v68 = *(_OWORD *)&v67->__r_.__value_.__l.__data_;
    *(void *)&__src[16] = *((void *)&v67->__r_.__value_.__l + 2);
    *(_OWORD *)__srCC_SHA256_CTX c = v68;
    v67->__r_.__value_.__l.__size_ = 0;
    v67->__r_.__value_.__r.__words[2] = 0;
    v67->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(__dst[0].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__dst[0].__r_.__value_.__l.__data_);
    }
    if (__src[23] >= 0) {
      unsigned __int8 v69 = __src;
    }
    else {
      unsigned __int8 v69 = *(const char **)__src;
    }
    BackendMetadataFBPtr = (int *)AGCDeserializedReply::getBackendMetadataFBPtr(v679, v69);
    uint8x8_t v71 = BackendMetadataFBPtr;
    size_t v72 = (unsigned __int16 *)((char *)BackendMetadataFBPtr - *BackendMetadataFBPtr);
    if (*v72 >= 5u && (uint64_t v73 = v72[2]) != 0) {
      unint64_t v74 = (int *)((char *)BackendMetadataFBPtr + v73 + *(unsigned int *)((char *)BackendMetadataFBPtr + v73));
    }
    else {
      unint64_t v74 = 0;
    }
    int v75 = (unsigned __int16 *)((char *)v74 - *v74);
    unsigned int v76 = *v75;
    if (v76 < 5)
    {
      int v77 = 0;
      goto LABEL_154;
    }
    if (v75[2])
    {
      int v77 = *(int *)((char *)v74 + v75[2]);
      if (v76 < 0x21) {
        goto LABEL_154;
      }
    }
    else
    {
      int v77 = 0;
      if (v76 < 0x21) {
        goto LABEL_154;
      }
    }
    uint64_t v86 = v75[16];
    if (v86)
    {
      int v78 = *(int *)((char *)v74 + v86);
      goto LABEL_155;
    }
LABEL_154:
    int v78 = 0;
LABEL_155:
    {
      int v116 = v78;
      int v78 = v116;
      if (v117)
      {
        getAdditionalSpillBufferBytes(void)::extra = 0;
        int v78 = v116;
      }
    }
    int v79 = getAdditionalSpillBufferBytes(void)::extra;
    uint64_t v80 = (unsigned __int16 *)((char *)v74 - *v74);
    unsigned int v81 = *v80;
    if (v81 < 0x51)
    {
      BOOL v660 = 0;
      int v662 = 0;
      BOOL v658 = 0;
      BOOL v83 = 0;
      if (v81 < 0x25) {
        goto LABEL_187;
      }
      uint64_t v82 = v80[18];
      if (!v80[18]) {
        goto LABEL_170;
      }
    }
    else if (v80[40])
    {
      int v662 = *(int *)((char *)v74 + v80[40]);
      uint64_t v82 = v80[18];
      if (!v80[18]) {
        goto LABEL_170;
      }
    }
    else
    {
      int v662 = 0;
      uint64_t v82 = v80[18];
      if (!v80[18]) {
        goto LABEL_170;
      }
    }
    if (*((unsigned char *)v74 + v82))
    {
      if (v81 < 0x27)
      {
        BOOL v658 = 0;
        BOOL v83 = 0;
        BOOL v660 = 1;
        goto LABEL_187;
      }
      LODWORD(v84) = v80[19];
      BOOL v660 = 1;
      if (!v80[19])
      {
LABEL_183:
        BOOL v658 = 0;
        if (v81 < 0x55) {
          goto LABEL_186;
        }
        goto LABEL_184;
      }
      goto LABEL_165;
    }
LABEL_170:
    if (v81 < 0x27)
    {
      BOOL v658 = 0;
      BOOL v660 = 0;
LABEL_186:
      BOOL v83 = 0;
      goto LABEL_187;
    }
    uint64_t v84 = v80[19];
    if (!v80[19] || (int v85 = *((unsigned __int8 *)v74 + v84), !*((unsigned char *)v74 + v84)))
    {
      if (v81 >= 0x29 && v80[20])
      {
        BOOL v660 = *((unsigned char *)v74 + v80[20]) != 0;
        if (!v80[19]) {
          goto LABEL_183;
        }
      }
      else
      {
        BOOL v660 = 0;
        if (!v80[19]) {
          goto LABEL_183;
        }
      }
LABEL_165:
      int v85 = *((unsigned __int8 *)v74 + v84);
      goto LABEL_174;
    }
    BOOL v660 = 1;
LABEL_174:
    BOOL v658 = v85 != 0;
    if (v81 < 0x55) {
      goto LABEL_186;
    }
LABEL_184:
    if (!v80[42]) {
      goto LABEL_186;
    }
    BOOL v83 = *((unsigned char *)v74 + v80[42]) != 0;
LABEL_187:
    uint64_t v87 = (unsigned __int16 *)((char *)v71 - *v71);
    if (*v87 >= 0xDu
      && (uint64_t v88 = v87[6]) != 0
      && (int8x16_t v89 = (int *)((char *)v71 + v88 + *(unsigned int *)((char *)v71 + v88)),
          long long v90 = (unsigned __int16 *)((char *)v89 - *v89),
          *v90 >= 0x29u))
    {
      char v48 = v30;
      uint64_t v91 = v90[20];
      if (v91)
      {
        BOOL v51 = *((unsigned char *)v89 + v91) != 0;
        if (v81 < 0x3F) {
          goto LABEL_192;
        }
        goto LABEL_195;
      }
    }
    else
    {
      char v48 = v30;
    }
    BOOL v51 = 0;
    if (v81 < 0x3F)
    {
LABEL_192:
      int v667 = 0;
      unsigned __int8 v657 = 0;
LABEL_210:
      int v664 = 0;
      goto LABEL_211;
    }
LABEL_195:
    if (v80[31]
      && (uint64_t v92 = (unsigned int *)((char *)v74 + v80[31] + *(unsigned int *)((char *)v74 + v80[31])),
          uint64_t v93 = *v92,
          v93))
    {
      uint64_t v94 = v92 + 1;
      while (1)
      {
        unsigned int v96 = *v94++;
        char v95 = v96;
        if (v96 < 0x36 && ((0x3F000000000777uLL >> v95) & 1) != 0) {
          break;
        }
        if (!--v93) {
          goto LABEL_203;
        }
      }
      unsigned __int8 v657 = 1;
      if (v81 < 0x4D)
      {
LABEL_202:
        int v667 = 0;
        goto LABEL_210;
      }
    }
    else
    {
LABEL_203:
      unsigned __int8 v657 = 0;
      if (v81 < 0x4D) {
        goto LABEL_202;
      }
    }
    if (v80[38])
    {
      int v667 = *(int *)((char *)v74 + v80[38]);
      if (v81 < 0x53) {
        goto LABEL_210;
      }
    }
    else
    {
      int v667 = 0;
      if (v81 < 0x53) {
        goto LABEL_210;
      }
    }
    uint64_t v97 = v80[41];
    if (!v97) {
      goto LABEL_210;
    }
    int v664 = *(int *)((char *)v74 + v97);
LABEL_211:
    int v53 = v77;
    if ((__src[23] & 0x80000000) != 0)
    {
      int v98 = v78;
      operator delete(*(void **)__src);
      int v78 = v98;
    }
    int v50 = 0;
    int v52 = v79 + v78;
    v649 |= v83;
    LODWORD(v16) = v654;
LABEL_214:
    *((unsigned char *)v6 + 176) |= v51;
    uint64_t v99 = (v671 - *(_DWORD *)(*((void *)v679 + 228) + 4 * v37));
    if ((v48 & 0x10) == 0)
    {
      size_t v100 = strlen(v31);
      if (v100 > 0x7FFFFFFFFFFFFFF7) {
        abort();
      }
      std::string::size_type v101 = v100;
      int v102 = v53;
      if (v100 >= 0x17)
      {
        uint64_t v107 = (v100 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v100 | 7) != 0x17) {
          uint64_t v107 = v100 | 7;
        }
        uint64_t v108 = v107 + 1;
        uint64_t v103 = (std::string *)operator new(v107 + 1);
        __dst[0].__r_.__value_.__l.__size_ = v101;
        __dst[0].__r_.__value_.__r.__words[2] = v108 | 0x8000000000000000;
        __dst[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v103;
      }
      else
      {
        *((unsigned char *)&__dst[0].__r_.__value_.__s + 23) = v100;
        uint64_t v103 = __dst;
        if (!v100)
        {
LABEL_228:
          v103->__r_.__value_.__s.__data_[v101] = 0;
          uint64_t v109 = *(void *)(v678 + 32);
          int v110 = SHIBYTE(__dst[0].__r_.__value_.__r.__words[2]);
          if (SHIBYTE(__dst[0].__r_.__value_.__r.__words[2]) < 0) {
            std::string::__init_copy_ctor_external((std::string *)__src, __dst[0].__r_.__value_.__l.__data_, __dst[0].__r_.__value_.__l.__size_);
          }
          else {
            *(std::string *)__srCC_SHA256_CTX c = __dst[0];
          }
          LODWORD(v16) = v654;
          *(void *)&__src[24] = v99;
          v703[0] = v102;
          v703[1] = v52;
          LOWORD(v703[2]) = v660;
          BYTE2(v703[2]) = v657;
          HIBYTE(v703[2]) = v51;
          LOBYTE(v703[3]) = v658;
          uint64_t v704 = v109;
          int v705 = v50;
          v706[0] = v667;
          v706[1] = v664;
          v706[2] = v662;
          memset(&v706[3], 0, 40);
          std::__hash_table<std::__hash_value_type<std::string,AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::ExternalSymbolInfo>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::ExternalSymbolInfo>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::ExternalSymbolInfo>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::ExternalSymbolInfo>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::ExternalSymbolInfo>>((uint64_t)v677, (uint64_t)__src, (uint64_t)__src);
          unint64_t v19 = v655;
          int v6 = (_DWORD *)v678;
          if ((__src[23] & 0x80000000) != 0)
          {
            operator delete(*(void **)__src);
            if ((v110 & 0x80000000) == 0) {
              goto LABEL_50;
            }
          }
          else if ((v110 & 0x80000000) == 0)
          {
            goto LABEL_50;
          }
          goto LABEL_247;
        }
      }
      memmove(v103, v31, v101);
      goto LABEL_228;
    }
    if (!strcmp(v31, "agc.global_constructor"))
    {
      *((void *)v6 + 48) = v99;
      v6[98] = v53;
      v6[99] = v52;
      *char v648 = 0;
      *((unsigned char *)v648 + 4) = 0;
      *((void *)v6 + 51) = v6;
      v6[104] = v50;
      v6[105] = v667;
      v6[106] = v664;
      v6[107] = v662;
      *(_OWORD *)v647 = 0u;
      *((_OWORD *)v647 + 1) = 0u;
      *((void *)v647 + 4) = 0;
      unint64_t v19 = v655;
      goto LABEL_50;
    }
    size_t v104 = strlen(v31);
    if (v104 > 0x7FFFFFFFFFFFFFF7) {
      abort();
    }
    std::string::size_type v105 = v104;
    if (v104 >= 0x17)
    {
      int v111 = v53;
      uint64_t v112 = (v104 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v104 | 7) != 0x17) {
        uint64_t v112 = v104 | 7;
      }
      uint64_t v113 = v112 + 1;
      BOOL v106 = (std::string *)operator new(v112 + 1);
      __dst[0].__r_.__value_.__l.__size_ = v105;
      __dst[0].__r_.__value_.__r.__words[2] = v113 | 0x8000000000000000;
      __dst[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v106;
      int v53 = v111;
      int v6 = (_DWORD *)v678;
LABEL_239:
      memmove(v106, v31, v105);
      goto LABEL_240;
    }
    *((unsigned char *)&__dst[0].__r_.__value_.__s + 23) = v104;
    BOOL v106 = __dst;
    if (v104) {
      goto LABEL_239;
    }
LABEL_240:
    v106->__r_.__value_.__s.__data_[v105] = 0;
    uint64_t v114 = *((void *)v6 + 4);
    int v115 = SHIBYTE(__dst[0].__r_.__value_.__r.__words[2]);
    if (SHIBYTE(__dst[0].__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external((std::string *)__src, __dst[0].__r_.__value_.__l.__data_, __dst[0].__r_.__value_.__l.__size_);
    }
    else {
      *(std::string *)__srCC_SHA256_CTX c = __dst[0];
    }
    LODWORD(v16) = v654;
    *(void *)&__src[24] = v99;
    v703[0] = v53;
    v703[1] = v52;
    LOWORD(v703[2]) = v660;
    HIWORD(v703[2]) = v657;
    LOBYTE(v703[3]) = v658;
    uint64_t v704 = v114;
    int v705 = v50;
    v706[0] = v667;
    v706[1] = v664;
    v706[2] = v662;
    memset(&v706[3], 0, 40);
    std::__hash_table<std::__hash_value_type<std::string,AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::ExternalSymbolInfo>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::ExternalSymbolInfo>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::ExternalSymbolInfo>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::ExternalSymbolInfo>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::ExternalSymbolInfo>>(v651, (uint64_t)__src, (uint64_t)__src);
    unint64_t v19 = v655;
    if ((__src[23] & 0x80000000) != 0)
    {
      operator delete(*(void **)__src);
      if ((v115 & 0x80000000) == 0) {
        goto LABEL_50;
      }
    }
    else if ((v115 & 0x80000000) == 0)
    {
      goto LABEL_50;
    }
LABEL_247:
    operator delete(__dst[0].__r_.__value_.__l.__data_);
LABEL_50:
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
LABEL_52:
    ++v28;
  }
  while (v28 != v19);
  int v14 = v652;
  if (v649)
  {
    unint64_t v118 = (unsigned __int16 *)((char *)v652 - *v652);
    unsigned int v119 = *v118;
    if (v119 < 0x45)
    {
      if (v119 >= 0x3D)
      {
        LOWORD(v120) = 0;
        uint64_t v121 = v118[30];
        if (v118[30]) {
          goto LABEL_255;
        }
        goto LABEL_256;
      }
      LODWORD(v123) = 0;
      if (v119 >= 0x3B)
      {
        LOWORD(v121) = 0;
        LOWORD(v120) = 0;
        uint64_t v122 = v118[29];
        if (v118[29]) {
          goto LABEL_257;
        }
        goto LABEL_258;
      }
      uint64_t v122 = 0;
      LOWORD(v121) = 0;
      LOWORD(v120) = 0;
      LOBYTE(v124) = 0;
    }
    else
    {
      uint64_t v120 = v118[34];
      if (v118[34]) {
        uint64_t v120 = *(void *)((char *)v652 + v120);
      }
      uint64_t v121 = v118[30];
      if (v118[30]) {
LABEL_255:
      }
        uint64_t v121 = *(void *)((char *)v652 + v121);
LABEL_256:
      uint64_t v122 = v118[29];
      if (v118[29]) {
LABEL_257:
      }
        uint64_t v122 = *(void *)((char *)v652 + v122);
LABEL_258:
      if (v119 < 0x3F)
      {
        LODWORD(v123) = 0;
        LOBYTE(v124) = 0;
      }
      else
      {
        uint64_t v123 = v118[31];
        if (v118[31]) {
          uint64_t v123 = *(void *)((char *)v652 + v123);
        }
        if (v119 < 0x4B)
        {
          LOBYTE(v124) = 0;
        }
        else
        {
          uint64_t v124 = v118[37];
          if (v124) {
            LODWORD(v124) = *(int *)((char *)v652 + v124);
          }
        }
      }
    }
    v6[17] = v123;
    __int16 v125 = v123 + v121 - 1;
    int v126 = -(int)v123;
    uint64_t v127 = *(void *)(v6 + 19);
    unint64_t v128 = (unsigned __int16)v120 | ((unint64_t)(unsigned __int16)(v126 & v125) << 32) | (v122 << 48) | (v124 << 16) | (unint64_t)(v127 & 0xFF000000);
    *(void *)(v6 + 19) = v128;
    if (v128 != v127)
    {
      *(void *)(v6 + 29) = 0;
      *(_OWORD *)(v6 + 25) = 0u;
      *(_OWORD *)(v6 + 21) = 0u;
      *(void *)&long long v129 = -1;
      *((void *)&v129 + 1) = -1;
      *(_OWORD *)(v6 + 31) = v129;
      *(_OWORD *)(v6 + 35) = v129;
      *(_OWORD *)(v6 + 39) = v129;
    }
  }
LABEL_275:
  if ((a5 & 1) == 0)
  {
    uint64_t v130 = (unsigned __int16 *)((char *)v14 - *v14);
    if (*v130 < 0x49u)
    {
      LODWORD(v131) = 0;
    }
    else
    {
      uint64_t v131 = v130[36];
      if (v131) {
        LODWORD(v131) = *(int *)((char *)v14 + v131);
      }
    }
    v6[118] = v131;
  }
  int v132 = (unsigned __int16 *)((char *)v14 - *v14);
  if (*v132 >= 0x31u)
  {
    uint64_t v133 = v132[24];
    if (v132[24])
    {
      uint64_t v134 = *(unsigned int *)((char *)v652 + v133);
      long long v135 = (unsigned int *)((char *)v652 + v133 + v134);
      uint64_t v136 = v132[22];
      if (v136) {
        LODWORD(v136) = *(int *)((char *)v652 + v136);
      }
      v6[119] = v136;
      uint64_t v137 = (unsigned __int16 *)((char *)v652 - *v652);
      if (*v137 < 0x2Fu)
      {
        LODWORD(v138) = 0;
      }
      else
      {
        uint64_t v138 = v137[23];
        if (v138) {
          LODWORD(v138) = *(int *)((char *)v652 + v138);
        }
      }
      v6[120] = v138;
      uint64_t v139 = *v135;
      if (v139)
      {
        unint64_t v140 = 0;
        uint64_t v668 = 4 * v139;
        __n128 v672 = (char *)v652 + v133 + v134;
        do
        {
          uint64_t v141 = v135[v140 / 4 + 1];
          uint64_t v142 = (char *)&v135[v140 / 4] + v141;
          unint64_t v143 = (char *)&v135[v140 / 4] + v141 - *((int *)v142 + 1);
          if (*((unsigned __int16 *)v143 + 2) < 5u)
          {
            uint64_t v144 = 0;
          }
          else
          {
            uint64_t v144 = *((unsigned __int16 *)v143 + 4);
            if (v144) {
              v144 += (uint64_t)&v135[v140 / 4 + 1] + v141 + *(unsigned int *)((char *)&v135[v140 / 4 + 1] + v141 + v144);
            }
          }
          uint64_t v145 = (const void *)(v144 + 4);
          size_t v146 = strlen((const char *)(v144 + 4));
          if (v146 > 0x7FFFFFFFFFFFFFF7) {
            abort();
          }
          std::string::size_type v147 = v146;
          if (v146 >= 0x17)
          {
            unint64_t v149 = v135;
            uint64_t v150 = (v146 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v146 | 7) != 0x17) {
              uint64_t v150 = v146 | 7;
            }
            uint64_t v151 = v150 + 1;
            unint64_t v148 = (std::string *)operator new(v150 + 1);
            __p.__r_.__value_.__l.__size_ = v147;
            __p.__r_.__value_.__r.__words[2] = v151 | 0x8000000000000000;
            __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v148;
            long long v135 = v149;
          }
          else
          {
            *((unsigned char *)&__p.__r_.__value_.__s + 23) = v146;
            unint64_t v148 = &__p;
            if (!v146) {
              goto LABEL_305;
            }
          }
          memmove(v148, v145, v147);
LABEL_305:
          v148->__r_.__value_.__s.__data_[v147] = 0;
          long long v152 = &v672[v140 + v141 - *((int *)v142 + 1)];
          int v6 = (_DWORD *)v678;
          if (*((unsigned __int16 *)v152 + 2) >= 7u && (uint64_t v153 = *((unsigned __int16 *)v152 + 5)) != 0)
          {
            uint64_t v154 = *(unsigned int *)&v672[v140 + 4 + v141 + v153];
            int v155 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
              goto LABEL_308;
            }
          }
          else
          {
            uint64_t v154 = 0;
            int v155 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            {
LABEL_308:
              std::string::__init_copy_ctor_external((std::string *)__src, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
              goto LABEL_311;
            }
          }
          *(std::string *)__srCC_SHA256_CTX c = __p;
LABEL_311:
          memset(v703, 0, 13);
          *(void *)&__src[24] = v154;
          uint64_t v704 = v678;
          int v705 = 4;
          memset(v706, 0, sizeof(v706));
          std::__hash_table<std::__hash_value_type<std::string,AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::ExternalSymbolInfo>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::ExternalSymbolInfo>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::ExternalSymbolInfo>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::ExternalSymbolInfo>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::ExternalSymbolInfo>>((uint64_t)v677, (uint64_t)__src, (uint64_t)__src);
          if ((__src[23] & 0x80000000) != 0)
          {
            operator delete(*(void **)__src);
            if (v155 < 0) {
              goto LABEL_313;
            }
          }
          else if (v155 < 0)
          {
LABEL_313:
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          v140 += 4;
        }
        while (v668 != v140);
      }
    }
  }
  std::string::size_type v156 = (uint64_t *)*((void *)v679 + 176);
  if (v156)
  {
    while (2)
    {
      uint64_t v158 = (const char *)(v156 + 2);
      if (*((char *)v156 + 39) < 0) {
        uint64_t v158 = *(const char **)v158;
      }
      uint8x8_t v159 = (int *)AGCDeserializedReply::getBackendMetadataFBPtr(v679, v158);
      uint64_t v160 = v159;
      int v161 = (unsigned __int16 *)((char *)v159 - *v159);
      if (*v161 >= 5u && (uint64_t v162 = v161[2]) != 0) {
        unint64_t v163 = (int *)((char *)v159 + v162 + *(unsigned int *)((char *)v159 + v162));
      }
      else {
        unint64_t v163 = 0;
      }
      int v6 = (_DWORD *)v678;
      uint64_t v164 = (unsigned __int16 *)((char *)v163 - *v163);
      if (*v164 < 0x49u || !v164[36] || !*((unsigned char *)v163 + v164[36])) {
        goto LABEL_318;
      }
      uint64_t v165 = v164[2];
      if (v165) {
        LODWORD(v165) = *(int *)((char *)v163 + v165);
      }
      if (*(_DWORD *)(v678 + 48) > v165) {
        LODWORD(v165) = *(_DWORD *)(v678 + 48);
      }
      *(_DWORD *)(v678 + 48) = v165;
      long long v166 = (unsigned __int16 *)((char *)v163 - *v163);
      if (*v166 < 0x51u)
      {
        LODWORD(v167) = 0;
      }
      else
      {
        uint64_t v167 = v166[40];
        if (v167) {
          LODWORD(v167) = *(int *)((char *)v163 + v167);
        }
      }
      if (*(_DWORD *)(v678 + 52) > v167) {
        LODWORD(v167) = *(_DWORD *)(v678 + 52);
      }
      *(_DWORD *)(v678 + 52) = v167;
      uint64_t v168 = (unsigned __int16 *)((char *)v163 - *v163);
      if (*v168 >= 0x21u && (uint64_t v169 = v168[16]) != 0)
      {
        int v170 = *(int *)((char *)v163 + v169);
      }
      else
      {
        int v170 = 0;
        {
LABEL_385:
          {
            getAdditionalSpillBufferBytes(void)::extra = 0;
          }
        }
      }
      int v171 = getAdditionalSpillBufferBytes(void)::extra + v170;
      if (*(_DWORD *)(v678 + 56) > (getAdditionalSpillBufferBytes(void)::extra + v170)) {
        int v171 = *(_DWORD *)(v678 + 56);
      }
      *(_DWORD *)(v678 + 56) = v171;
      int v172 = (unsigned __int16 *)((char *)v163 - *v163);
      unsigned int v173 = *v172;
      if (v173 >= 0x25)
      {
        if (v172[18] && *((unsigned char *)v163 + v172[18]))
        {
          *(unsigned char *)(v678 + 172) = 1;
          if (v173 >= 0x27)
          {
            LODWORD(v174) = v172[19];
LABEL_358:
            if (v174) {
              LOBYTE(v174) = *((unsigned char *)v163 + v174) != 0;
            }
            *(unsigned char *)(v678 + 177) |= v174;
            if (v173 >= 0x3F)
            {
              uint64_t v176 = v172[31];
              if (v172[31])
              {
                BOOL v177 = (unsigned int *)((char *)v163 + v176 + *(unsigned int *)((char *)v163 + v176));
                uint64_t v176 = *v177;
                if (v176)
                {
                  uint64_t v178 = v177 + 1;
                  while (1)
                  {
                    unsigned int v180 = *v178++;
                    char v179 = v180;
                    if (v180 < 0x36 && ((0x3F000000000777uLL >> v179) & 1) != 0) {
                      break;
                    }
                    if (!--v176) {
                      goto LABEL_368;
                    }
                  }
                  LOBYTE(v176) = 1;
                }
              }
LABEL_368:
              *(unsigned char *)(v678 + 174) |= v176;
              if (v173 >= 0x4D)
              {
                uint64_t v181 = v172[38];
                if (v181) {
                  LODWORD(v181) = *(int *)((char *)v163 + v181);
                }
LABEL_372:
                if (*(_DWORD *)(v678 + 60) > v181) {
                  LODWORD(v181) = *(_DWORD *)(v678 + 60);
                }
                *(_DWORD *)(v678 + 60) = v181;
                uint32x2_t v182 = (unsigned __int16 *)((char *)v163 - *v163);
                if (*v182 < 0x53u)
                {
                  LODWORD(v183) = 0;
                }
                else
                {
                  uint64_t v183 = v182[41];
                  if (v183) {
                    LODWORD(v183) = *(int *)((char *)v163 + v183);
                  }
                }
                if (*(_DWORD *)(v678 + 64) > v183) {
                  LODWORD(v183) = *(_DWORD *)(v678 + 64);
                }
                *(_DWORD *)(v678 + 64) = v183;
                int v184 = (unsigned __int16 *)((char *)v160 - *v160);
                if (*v184 >= 0xDu)
                {
                  uint64_t v185 = v184[6];
                  if (v185)
                  {
                    unint64_t v186 = (int *)((char *)v160 + v185 + *(unsigned int *)((char *)v160 + v185));
                    unsigned int v187 = (unsigned __int16 *)((char *)v186 - *v186);
                    BOOL v157 = *v187 >= 0x29u && (v188 = v187[20]) != 0 && *((unsigned char *)v186 + v188) != 0;
                    *(unsigned char *)(v678 + 175) |= v157;
                  }
                }
LABEL_318:
                std::string::size_type v156 = (uint64_t *)*v156;
                if (!v156) {
                  goto LABEL_387;
                }
                continue;
              }
            }
          }
        }
        else if (v173 >= 0x27)
        {
          uint64_t v174 = v172[19];
          if (v172[19] && *((unsigned char *)v163 + v174))
          {
            LOBYTE(v175) = 1;
          }
          else
          {
            if (v173 < 0x29) {
              goto LABEL_358;
            }
            uint64_t v175 = v172[20];
            if (v172[20]) {
              LOBYTE(v175) = *((unsigned char *)v163 + v175) != 0;
            }
          }
          *(unsigned char *)(v678 + 172) |= v175;
          goto LABEL_358;
        }
      }
      break;
    }
    LODWORD(v181) = 0;
    goto LABEL_372;
  }
LABEL_387:
  if ((a5 & 1) == 0)
  {
    float v192 = (unsigned int **)((char *)v679 + 224);
    if (*((void *)v679 + 28))
    {
      if (!*((void *)v679 + 29)) {
        float v192 = (unsigned int **)((char *)v679 + 784);
      }
    }
    else
    {
      float v192 = (unsigned int **)((char *)v679 + 784);
    }
    unsigned int v194 = *v192;
    char v193 = v192[1];
    if (v194) {
      BOOL v195 = v193 == 0;
    }
    else {
      BOOL v195 = 1;
    }
    if (v195) {
      unint64_t v196 = 0;
    }
    else {
      unint64_t v196 = (int *)((char *)v194 + *v194);
    }
    uint64_t v197 = (unsigned __int16 *)((char *)v196 - *v196);
    if (*v197 >= 5u && (uint64_t v198 = v197[2]) != 0) {
      uint64_t v199 = (int *)((char *)v196 + v198 + *(unsigned int *)((char *)v196 + v198));
    }
    else {
      uint64_t v199 = 0;
    }
    uint64_t v200 = (unsigned __int16 *)((char *)v199 - *v199);
    unsigned int v201 = *v200;
    if (v201 < 0x67)
    {
      unint64_t v669 = 0;
      unint64_t v190 = 0;
      unint64_t v189 = 0;
      unint64_t v673 = 0;
      unint64_t v204 = 0;
      goto LABEL_443;
    }
    uint64_t v202 = v200[51];
    if (v200[51])
    {
      unint64_t v673 = *(void *)((char *)v199 + v202);
      if (v201 >= 0x6F) {
        goto LABEL_411;
      }
    }
    else
    {
      unint64_t v673 = 0;
      if (v201 >= 0x6F)
      {
LABEL_411:
        if (v200[55])
        {
          unint64_t v189 = *(void *)((char *)v199 + v200[55]);
          uint64_t v203 = v200[52];
          if (v200[52]) {
            goto LABEL_413;
          }
        }
        else
        {
          unint64_t v189 = 0;
          uint64_t v203 = v200[52];
          if (v200[52])
          {
LABEL_413:
            unint64_t v190 = *(void *)((char *)v199 + v203);
            if (v201 >= 0x6B) {
              goto LABEL_414;
            }
LABEL_424:
            unint64_t v204 = 0;
            unint64_t v669 = 0;
            int v205 = 0;
            if (v200[51]) {
              goto LABEL_425;
            }
LABEL_427:
            uint64_t v206 = 0;
LABEL_428:
            *((void *)v6 + 61) |= v206;
            if (v201 < 0x6F)
            {
              if (v201 < 0x69)
              {
                uint64_t v208 = 0;
                goto LABEL_440;
              }
            }
            else
            {
              uint64_t v207 = v200[55];
              if (v200[55]) {
                uint64_t v207 = *(void *)((char *)v199 + v207);
              }
              *((void *)v6 + 65) |= v207;
            }
            uint64_t v208 = v200[52];
            if (v200[52]) {
              uint64_t v208 = *(void *)((char *)v199 + v208);
            }
            if (v201 >= 0x6B && v200[53])
            {
              uint64_t v209 = *((void *)v6 + 63) | *(void *)((char *)v199 + v200[53]);
              *((void *)v6 + 62) |= v208;
              *((void *)v6 + 63) = v209;
              if ((v205 & 1) == 0) {
                goto LABEL_443;
              }
              goto LABEL_441;
            }
LABEL_440:
            *((void *)v6 + 62) |= v208;
            if (!v205) {
              goto LABEL_443;
            }
LABEL_441:
            uint64_t v210 = v200[54];
            if (v210)
            {
              uint64_t v211 = *(void *)((char *)v199 + v210);
              goto LABEL_444;
            }
LABEL_443:
            uint64_t v211 = 0;
LABEL_444:
            unint64_t v665 = v204;
            *((void *)v6 + 64) |= v211;
            uint64_t v191 = (uint64_t *)*((void *)v679 + 176);
            if (!v191) {
              goto LABEL_536;
            }
            while (1)
            {
LABEL_450:
              uint64_t v213 = (const char *)(v191 + 2);
              if (*((char *)v191 + 39) < 0)
              {
                uint64_t v215 = (const void *)v191[2];
                unint64_t v214 = v191[3];
              }
              else
              {
                unint64_t v214 = *((unsigned __int8 *)v191 + 39);
                uint64_t v215 = v191 + 2;
              }
              if (v214 >= v214 - 3) {
                size_t v216 = v214 - 3;
              }
              else {
                size_t v216 = v214;
              }
              if (v216 > 0x7FFFFFFFFFFFFFF7) {
                abort();
              }
              if (v216 >= 0x17)
              {
                uint64_t v218 = (v216 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v216 | 7) != 0x17) {
                  uint64_t v218 = v216 | 7;
                }
                uint64_t v219 = v218 + 1;
                unint64_t v217 = operator new(v218 + 1);
                *(void *)&__src[16] = v219 | 0x8000000000000000;
                *(void *)__srCC_SHA256_CTX c = v217;
                *(void *)&__src[8] = v216;
              }
              else
              {
                __src[23] = v216;
                unint64_t v217 = __src;
                if (!v216) {
                  goto LABEL_464;
                }
              }
              memmove(v217, v215, v216);
LABEL_464:
              v217[v216] = 0;
              uint64_t v220 = std::__hash_table<std::__hash_value_type<std::string,AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::ExternalSymbolInfo>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::ExternalSymbolInfo>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::ExternalSymbolInfo>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::ExternalSymbolInfo>>>::find<std::string>(v677, (uint64_t)__src);
              if (!v220) {
                goto LABEL_448;
              }
              uint64_t v221 = v220;
              if (*((char *)v191 + 39) < 0) {
                uint64_t v213 = *(const char **)v213;
              }
              uint64_t v222 = (int *)AGCDeserializedReply::getBackendMetadataFBPtr(v679, v213);
              uint64_t v223 = (unsigned __int16 *)((char *)v222 - *v222);
              if (*v223 < 5u) {
                goto LABEL_448;
              }
              uint64_t v224 = v223[2];
              if (!v224) {
                goto LABEL_448;
              }
              unsigned int v225 = (int *)((char *)v222 + v224 + *(unsigned int *)((char *)v222 + v224));
              uint64_t v226 = (unsigned __int16 *)((char *)v225 - *v225);
              unsigned int v227 = *v226;
              if (v227 < 0x67)
              {
LABEL_483:
                int v233 = 0;
                uint64_t v231 = 0;
                BOOL v229 = 0;
                int v234 = 0;
                uint64_t v232 = 0;
                goto LABEL_489;
              }
              uint64_t v228 = v226[51];
              if (v226[51]) {
                uint64_t v228 = *(void *)((char *)v225 + v228);
              }
              v221[11] |= v228;
              BOOL v229 = v227 > 0x6E;
              if (v227 < 0x6F)
              {
                if (v227 < 0x69) {
                  goto LABEL_483;
                }
              }
              else
              {
                uint64_t v230 = v226[55];
                if (v226[55]) {
                  uint64_t v230 = *(void *)((char *)v225 + v230);
                }
                v221[15] |= v230;
              }
              if (v226[52])
              {
                uint64_t v231 = *(void *)((char *)v225 + v226[52]);
                if (v227 >= 0x6B) {
                  goto LABEL_481;
                }
              }
              else
              {
                uint64_t v231 = 0;
                if (v227 >= 0x6B)
                {
LABEL_481:
                  if (v226[53]) {
                    uint64_t v232 = *(void *)((char *)v225 + v226[53]);
                  }
                  else {
                    uint64_t v232 = 0;
                  }
                  int v233 = 1;
                  goto LABEL_488;
                }
              }
              int v233 = 0;
              uint64_t v232 = 0;
LABEL_488:
              int v234 = 1;
LABEL_489:
              uint64_t v235 = v221[13] | v232;
              v221[12] |= v231;
              v221[13] = v235;
              if (v227 < 0x6D)
              {
                if (v227 < 0x67)
                {
                  if (v227 < 0x49) {
                    goto LABEL_448;
                  }
                  uint64_t v242 = v226[36];
                  if (!v226[36]) {
                    goto LABEL_448;
                  }
                  goto LABEL_517;
                }
              }
              else
              {
                uint64_t v236 = v226[54];
                if (v226[54]) {
                  uint64_t v236 = *(void *)((char *)v225 + v236);
                }
                v221[14] |= v236;
              }
              uint64_t v237 = v226[51];
              if (v226[51]) {
                uint64_t v237 = *(void *)((char *)v225 + v237);
              }
              if (v229)
              {
                uint64_t v238 = v226[55];
                if (v226[55]) {
                  uint64_t v238 = *(void *)((char *)v225 + v238);
                }
                v189 |= v238;
              }
              else if (!v234)
              {
                uint64_t v239 = 0;
                uint64_t v240 = 0;
                if (v227 < 0x6D)
                {
LABEL_515:
                  uint64_t v241 = 0;
                  goto LABEL_516;
                }
                goto LABEL_509;
              }
              uint64_t v239 = v226[52];
              if (v226[52]) {
                uint64_t v239 = *(void *)((char *)v225 + v239);
              }
              if (v233)
              {
                uint64_t v240 = v226[53];
                if (v226[53])
                {
                  uint64_t v240 = *(void *)((char *)v225 + v240);
                  if (v227 < 0x6D) {
                    goto LABEL_515;
                  }
                  goto LABEL_509;
                }
              }
              else
              {
                uint64_t v240 = 0;
              }
              if (v227 < 0x6D) {
                goto LABEL_515;
              }
LABEL_509:
              uint64_t v241 = v226[54];
              if (v226[54]) {
                uint64_t v241 = *(void *)((char *)v225 + v241);
              }
LABEL_516:
              v673 |= v237;
              v190 |= v239;
              v669 |= v240;
              v665 |= v241;
              uint64_t v242 = v226[36];
              if (!v226[36]) {
                goto LABEL_448;
              }
LABEL_517:
              if (!*((unsigned char *)v225 + v242)) {
                goto LABEL_448;
              }
              if (v227 < 0x67) {
                goto LABEL_446;
              }
              uint64_t v243 = v226[51];
              if (v226[51]) {
                uint64_t v243 = *(void *)((char *)v225 + v243);
              }
              *(void *)(v678 + 488) |= v243;
              if (v229)
              {
                uint64_t v244 = v226[55];
                if (v226[55]) {
                  uint64_t v244 = *(void *)((char *)v225 + v244);
                }
                *(void *)(v678 + 520) |= v244;
              }
              else if (!v234)
              {
                uint64_t v245 = 0;
LABEL_532:
                uint64_t v246 = 0;
                goto LABEL_533;
              }
              uint64_t v245 = v226[52];
              if (v226[52]) {
                uint64_t v245 = *(void *)((char *)v225 + v245);
              }
              if (!v233) {
                goto LABEL_532;
              }
              uint64_t v246 = v226[53];
              if (v226[53]) {
                uint64_t v246 = *(void *)((char *)v225 + v246);
              }
LABEL_533:
              uint64_t v247 = *(void *)(v678 + 504) | v246;
              *(void *)(v678 + 496) |= v245;
              *(void *)(v678 + 504) = v247;
              if (v227 >= 0x6D)
              {
                uint64_t v248 = v226[54];
                if (v248)
                {
                  uint64_t v212 = *(void *)((char *)v225 + v248);
                  goto LABEL_447;
                }
              }
LABEL_446:
              uint64_t v212 = 0;
LABEL_447:
              *(void *)(v678 + 512) |= v212;
LABEL_448:
              if ((__src[23] & 0x80000000) != 0)
              {
                operator delete(*(void **)__src);
                uint64_t v191 = (uint64_t *)*v191;
                if (!v191) {
                  goto LABEL_536;
                }
              }
              else
              {
                uint64_t v191 = (uint64_t *)*v191;
                if (!v191) {
                  goto LABEL_536;
                }
              }
            }
          }
        }
LABEL_423:
        unint64_t v190 = 0;
        if (v201 >= 0x6B)
        {
LABEL_414:
          if (v200[53])
          {
            unint64_t v669 = *(void *)((char *)v199 + v200[53]);
            if (v201 >= 0x6D) {
              goto LABEL_416;
            }
          }
          else
          {
            unint64_t v669 = 0;
            if (v201 >= 0x6D)
            {
LABEL_416:
              if (v200[54])
              {
                unint64_t v204 = *(void *)((char *)v199 + v200[54]);
                int v205 = 1;
                if (!v200[51]) {
                  goto LABEL_427;
                }
              }
              else
              {
                unint64_t v204 = 0;
                int v205 = 1;
                if (!v200[51]) {
                  goto LABEL_427;
                }
              }
LABEL_425:
              uint64_t v206 = *(void *)((char *)v199 + v202);
              goto LABEL_428;
            }
          }
          unint64_t v204 = 0;
          int v205 = 0;
          if (!v200[51]) {
            goto LABEL_427;
          }
          goto LABEL_425;
        }
        goto LABEL_424;
      }
    }
    unint64_t v204 = 0;
    if (v201 < 0x69)
    {
      int v205 = 0;
      unint64_t v189 = 0;
      unint64_t v190 = 0;
      unint64_t v669 = 0;
      if (v200[51]) {
        goto LABEL_425;
      }
      goto LABEL_427;
    }
    unint64_t v189 = 0;
    uint64_t v203 = v200[52];
    if (v200[52]) {
      goto LABEL_413;
    }
    goto LABEL_423;
  }
  if (v6[121])
  {
    unint64_t v673 = 0;
    unint64_t v189 = 0;
    unint64_t v190 = 0;
    unint64_t v665 = 0;
    unint64_t v669 = 0;
    uint64_t v191 = (uint64_t *)*((void *)v679 + 176);
    if (v191) {
      goto LABEL_450;
    }
  }
  else
  {
    unint64_t v673 = 0;
    unint64_t v189 = 0;
    unint64_t v190 = 0;
    unint64_t v665 = 0;
    unint64_t v669 = 0;
    v6[121] = 1024;
    uint64_t v191 = (uint64_t *)*((void *)v679 + 176);
    if (v191) {
      goto LABEL_450;
    }
  }
LABEL_536:
  v700 = operator new(0x20uLL);
  long long v701 = xmmword_242EA7C10;
  strcpy((char *)v700, "agc.global_buffer_pointers.");
  v714[0] = &unk_26F852618;
  v715 = v714;
  AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::LinkInfo::initialize<AGCCodeTranslatorVisibleFunctionTypesG10,&(AGCCodeTranslatorG10::GetCompileReply(void const*))>(AGCDeserializedReply const&,AGX::HAL200::Device &,char const*,BOOL)::{lambda(AGCCodeTranslatorVisibleFunctionTypesG10,std::string,std::function<void ()(AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::ExternalSymbolInfo &,unsigned int)>)#1}::operator()<AGX::ArgumentMask<64ul>>(v678, v673, (uint64_t)&v700, (uint64_t)v714);
  if (v715 == v714)
  {
    (*(void (**)(void *))(v714[0] + 32))(v714);
    uint64_t v249 = (uint64_t)v677;
  }
  else
  {
    uint64_t v249 = (uint64_t)v677;
    if (v715) {
      (*(void (**)(void))(*v715 + 40))();
    }
  }
  if (SHIBYTE(v701) < 0) {
    operator delete(v700);
  }
  unint64_t v699 = v190;
  unint64_t v698 = v669;
  HIBYTE(v697[2]) = 19;
  strcpy((char *)v697, "agc.global_texture.");
  v712[0] = &unk_26F852660;
  v713 = v712;
  while (2)
  {
    if (v190)
    {
      unsigned int v250 = __clz(__rbit64(v190));
      uint64_t v251 = &v699;
      unsigned int v252 = v250;
LABEL_548:
      *uint64_t v251 = v190 & ~(1 << v250);
      std::to_string((std::string *)__src, v252);
      if (SHIBYTE(v697[2]) >= 0) {
        uint64_t v253 = (const std::string::value_type *)v697;
      }
      else {
        uint64_t v253 = (const std::string::value_type *)v697[0];
      }
      if (SHIBYTE(v697[2]) >= 0) {
        std::string::size_type v254 = HIBYTE(v697[2]);
      }
      else {
        std::string::size_type v254 = (std::string::size_type)v697[1];
      }
      uint64_t v255 = std::string::insert((std::string *)__src, 0, v253, v254);
      std::string __p = *v255;
      v255->__r_.__value_.__l.__size_ = 0;
      v255->__r_.__value_.__r.__words[2] = 0;
      v255->__r_.__value_.__r.__words[0] = 0;
      if ((__src[23] & 0x80000000) != 0) {
        operator delete(*(void **)__src);
      }
      uint64_t v256 = *(void *)(v678 + 32);
      int v257 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external((std::string *)__src, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
      }
      else {
        *(std::string *)__srCC_SHA256_CTX c = __p;
      }
      *(void *)&__src[24] = 0;
      memset(v703, 0, 13);
      uint64_t v704 = v256;
      int v705 = 5;
      memset(v706, 0, sizeof(v706));
      std::__hash_table<std::__hash_value_type<std::string,AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::ExternalSymbolInfo>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::ExternalSymbolInfo>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::ExternalSymbolInfo>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::ExternalSymbolInfo>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::ExternalSymbolInfo>>(v249, (uint64_t)__src, (uint64_t)__src);
      if ((__src[23] & 0x80000000) != 0) {
        operator delete(*(void **)__src);
      }
      uint64_t v258 = std::__hash_table<std::__hash_value_type<std::string,AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::ExternalSymbolInfo>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::ExternalSymbolInfo>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::ExternalSymbolInfo>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::ExternalSymbolInfo>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v249, (uint64_t)&__p, (uint64_t)&__p);
      *(_DWORD *)__srCC_SHA256_CTX c = v252;
      if (!v713)
      {
        std::__throw_bad_function_call[abi:nn180100]();
        __break(1u);
        return;
      }
      (*(void (**)(void *, char *, unsigned char *))(*v713 + 48))(v713, v258 + 40, __src);
      if (v257 < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      unint64_t v190 = v699;
      continue;
    }
    break;
  }
  unint64_t v190 = v698;
  if (v698)
  {
    unsigned int v250 = __clz(__rbit64(v698));
    unsigned int v252 = v250 | 0x40;
    uint64_t v251 = &v698;
    goto LABEL_548;
  }
  if (v713 == v712)
  {
    (*(void (**)(void *))(v712[0] + 32))(v712);
    unint64_t v259 = v189;
    unint64_t v260 = v665;
    if ((SHIBYTE(v697[2]) & 0x80000000) == 0) {
      goto LABEL_568;
    }
    goto LABEL_581;
  }
  unint64_t v259 = v189;
  unint64_t v260 = v665;
  if (v713) {
    (*(void (**)(void))(*v713 + 40))();
  }
  if (SHIBYTE(v697[2]) < 0) {
LABEL_581:
  }
    operator delete(v697[0]);
LABEL_568:
  HIBYTE(v696[2]) = 19;
  strcpy((char *)v696, "agc.global_sampler.");
  v710[0] = &unk_26F8526A8;
  v711 = v710;
  AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::LinkInfo::initialize<AGCCodeTranslatorVisibleFunctionTypesG10,&(AGCCodeTranslatorG10::GetCompileReply(void const*))>(AGCDeserializedReply const&,AGX::HAL200::Device &,char const*,BOOL)::{lambda(AGCCodeTranslatorVisibleFunctionTypesG10,std::string,std::function<void ()(AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::ExternalSymbolInfo &,unsigned int)>)#1}::operator()<AGX::ArgumentMask<64ul>>(v678, v260, (uint64_t)v696, (uint64_t)v710);
  if (v711 == v710)
  {
    (*(void (**)(void *))(v710[0] + 32))(v710);
    if ((SHIBYTE(v696[2]) & 0x80000000) == 0) {
      goto LABEL_572;
    }
    goto LABEL_583;
  }
  if (v711) {
    (*(void (**)(void))(*v711 + 40))();
  }
  if (SHIBYTE(v696[2]) < 0) {
LABEL_583:
  }
    operator delete(v696[0]);
LABEL_572:
  v694 = operator new(0x20uLL);
  long long v695 = xmmword_242EA7C50;
  strcpy((char *)v694, "agc.local_buffer_pointers.");
  v708[0] = &unk_26F8526F0;
  v709 = v708;
  AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::LinkInfo::initialize<AGCCodeTranslatorVisibleFunctionTypesG10,&(AGCCodeTranslatorG10::GetCompileReply(void const*))>(AGCDeserializedReply const&,AGX::HAL200::Device &,char const*,BOOL)::{lambda(AGCCodeTranslatorVisibleFunctionTypesG10,std::string,std::function<void ()(AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::ExternalSymbolInfo &,unsigned int)>)#1}::operator()<AGX::ArgumentMask<64ul>>(v678, v259, (uint64_t)&v694, (uint64_t)v708);
  if (v709 == v708)
  {
    (*(void (**)(void *))(v708[0] + 32))(v708);
    uint64_t v261 = v670;
    if ((SHIBYTE(v695) & 0x80000000) == 0) {
      goto LABEL_576;
    }
    goto LABEL_585;
  }
  uint64_t v261 = v670;
  if (v709) {
    (*(void (**)(void))(*v709 + 40))();
  }
  if (SHIBYTE(v695) < 0) {
LABEL_585:
  }
    operator delete(v694);
LABEL_576:
  std::string v663 = (char **)(v678 + 312);
  if (*(void *)v261)
  {
    if (*((void *)v679 + 4)) {
      uint64_t v262 = v261;
    }
    else {
      uint64_t v262 = (char *)v679 + 584;
    }
  }
  else
  {
    uint64_t v262 = (char *)v679 + 584;
  }
  int v263 = *((_DWORD *)v262 + 8);
  if (*((void *)v679 + 18))
  {
    if (*((void *)v679 + 19)) {
      unsigned int v264 = (char *)v679 + 144;
    }
    else {
      unsigned int v264 = (char *)v679 + 704;
    }
  }
  else
  {
    unsigned int v264 = (char *)v679 + 704;
  }
  std::vector<AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::LinkInfo::Relocation,std::allocator<AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::LinkInfo::Relocation>>::reserve((uint64_t)v663, (*((_DWORD *)v264 + 8) + v263));
  uint64_t v666 = (char **)(v678 + 336);
  if (*(void *)v670)
  {
    uint64_t v265 = v679;
    if (*((void *)v679 + 4)) {
      unsigned int v266 = v670;
    }
    else {
      unsigned int v266 = (char *)v679 + 584;
    }
  }
  else
  {
    uint64_t v265 = v679;
    unsigned int v266 = (char *)v679 + 584;
  }
  int v267 = *((_DWORD *)v266 + 8);
  std::string::size_type v268 = (char *)v265 + 224;
  v674 = (int8x8_t *)((char *)v265 + 224);
  if (*((void *)v265 + 28))
  {
    uint64_t v269 = *((void *)v265 + 29);
    uint64_t v270 = (char *)v265 + 784;
    if (v269) {
      int v271 = v268;
    }
    else {
      int v271 = v270;
    }
  }
  else
  {
    int v271 = (char *)v265 + 784;
  }
  std::vector<AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::LinkInfo::Relocation,std::allocator<AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::LinkInfo::Relocation>>::reserve((uint64_t)v666, (*((_DWORD *)v271 + 8) + v267));
  char v661 = 0;
  unsigned __int32 v272 = 0;
  unint64_t v273 = (int8x8_t *)v679;
  v659 = (int8x8_t *)(v678 + 184);
  BOOL v274 = v670;
  while (1)
  {
    if (!*(void *)v274)
    {
      BOOL v275 = (char *)v679 + 584;
      if (v272 >= v273[77].i32[0]) {
        break;
      }
      goto LABEL_613;
    }
    BOOL v275 = *(void *)&v273[4] ? v274 : (char *)v679 + 584;
    if (v272 >= *((_DWORD *)v275 + 8)) {
      break;
    }
LABEL_613:
    unint64_t v276 = *(void *)(*((void *)v275 + 3) + 8 * v272);
    unsigned int v277 = (v276 >> 60) - 2;
    if (v277 > 0xA) {
      int v278 = 0;
    }
    else {
      int v278 = dword_242EAA3E8[v277];
    }
    unint64_t v279 = HIDWORD(v276) & 0xFFFFFF;
    if ((v276 & 0x800000000000000) != 0)
    {
      uint64_t v284 = *(unsigned int *)(v676 + 16 * v279);
      uint64_t v285 = (char *)(v675 + v284);
      switch(v278)
      {
        case 0:
          if ((v276 & 0x100000000000000) != 0) {
            int v286 = 16;
          }
          else {
            int v286 = 12;
          }
          *(_DWORD *)__srCC_SHA256_CTX c = v286;
          size_t v287 = strlen(v285);
          if (v287 > 0x7FFFFFFFFFFFFFF7) {
            abort();
          }
          size_t v288 = v287;
          if (v287 >= 0x17)
          {
            uint64_t v376 = (v287 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v287 | 7) != 0x17) {
              uint64_t v376 = v287 | 7;
            }
            uint64_t v377 = v376 + 1;
            unsigned int v289 = operator new(v376 + 1);
            *(void *)&__src[24] = v377 | 0x8000000000000000;
            *(void *)&__src[8] = v289;
            *(void *)&__src[16] = v288;
          }
          else
          {
            __src[31] = v287;
            unsigned int v289 = &__src[8];
            if (!v287) {
              goto LABEL_846;
            }
          }
          memmove(v289, v285, v288);
LABEL_846:
          v289[v288] = 0;
          v703[0] = v276;
          unint64_t v372 = *(void *)(v678 + 320);
          if (v372 >= *(void *)(v678 + 328)) {
            goto LABEL_903;
          }
          goto LABEL_871;
        case 1:
          *(_DWORD *)__srCC_SHA256_CTX c = 16;
          size_t v350 = strlen((const char *)(v675 + v284));
          if (v350 > 0x7FFFFFFFFFFFFFF7) {
            abort();
          }
          size_t v351 = v350;
          if (v350 >= 0x17)
          {
            uint64_t v378 = (v350 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v350 | 7) != 0x17) {
              uint64_t v378 = v350 | 7;
            }
            uint64_t v379 = v378 + 1;
            uint64_t v352 = operator new(v378 + 1);
            *(void *)&__src[24] = v379 | 0x8000000000000000;
            *(void *)&__src[8] = v352;
            *(void *)&__src[16] = v351;
          }
          else
          {
            __src[31] = v350;
            uint64_t v352 = &__src[8];
            if (!v350) {
              goto LABEL_852;
            }
          }
          memmove(v352, v285, v351);
LABEL_852:
          v352[v351] = 0;
          v703[0] = v276;
          unint64_t v372 = *(void *)(v678 + 320);
          if (v372 >= *(void *)(v678 + 328)) {
            goto LABEL_903;
          }
          goto LABEL_871;
        case 2:
          *(_DWORD *)__srCC_SHA256_CTX c = 12;
          size_t v344 = strlen((const char *)(v675 + v284));
          if (v344 > 0x7FFFFFFFFFFFFFF7) {
            abort();
          }
          size_t v345 = v344;
          if (v344 >= 0x17)
          {
            uint64_t v370 = (v344 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v344 | 7) != 0x17) {
              uint64_t v370 = v344 | 7;
            }
            uint64_t v371 = v370 + 1;
            unint64_t v346 = operator new(v370 + 1);
            *(void *)&__src[24] = v371 | 0x8000000000000000;
            *(void *)&__src[8] = v346;
            *(void *)&__src[16] = v345;
          }
          else
          {
            __src[31] = v344;
            unint64_t v346 = &__src[8];
            if (!v344) {
              goto LABEL_834;
            }
          }
          memmove(v346, v285, v345);
LABEL_834:
          v346[v345] = 0;
          v703[0] = v276;
          unint64_t v372 = *(void *)(v678 + 320);
          if (v372 >= *(void *)(v678 + 328)) {
            goto LABEL_903;
          }
          goto LABEL_871;
        case 3:
          *(_DWORD *)__srCC_SHA256_CTX c = 13;
          size_t v360 = strlen((const char *)(v675 + v284));
          if (v360 > 0x7FFFFFFFFFFFFFF7) {
            abort();
          }
          size_t v361 = v360;
          if (v360 >= 0x17)
          {
            uint64_t v386 = (v360 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v360 | 7) != 0x17) {
              uint64_t v386 = v360 | 7;
            }
            uint64_t v387 = v386 + 1;
            size_t v362 = operator new(v386 + 1);
            *(void *)&__src[24] = v387 | 0x8000000000000000;
            *(void *)&__src[8] = v362;
            *(void *)&__src[16] = v361;
          }
          else
          {
            __src[31] = v360;
            size_t v362 = &__src[8];
            if (!v360) {
              goto LABEL_870;
            }
          }
          memmove(v362, v285, v361);
LABEL_870:
          v362[v361] = 0;
          v703[0] = v276;
          unint64_t v372 = *(void *)(v678 + 320);
          if (v372 < *(void *)(v678 + 328))
          {
LABEL_871:
            *(_DWORD *)unint64_t v372 = *(_DWORD *)__src;
            *(_OWORD *)(v372 + 8) = *(_OWORD *)&__src[8];
            *(void *)(v372 + 24) = *(void *)&__src[24];
            *(_DWORD *)(v372 + 32) = v276;
            *(void *)(v678 + 320) = v372 + 40;
            goto LABEL_947;
          }
LABEL_903:
          size_t v411 = std::vector<AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::LinkInfo::Relocation,std::allocator<AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::LinkInfo::Relocation>>::__push_back_slow_path<AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::LinkInfo::Relocation>(v663, (uint64_t)__src);
          unint64_t v273 = (int8x8_t *)v679;
          int v412 = __src[31];
          *(void *)(v678 + 320) = v411;
          BOOL v274 = v670;
          if ((v412 & 0x80000000) == 0) {
            goto LABEL_605;
          }
LABEL_904:
          operator delete(*(void **)&__src[8]);
          ++v272;
          continue;
        case 5:
          *(_DWORD *)__srCC_SHA256_CTX c = 17;
          size_t v363 = strlen((const char *)(v675 + v284));
          if (v363 > 0x7FFFFFFFFFFFFFF7) {
            abort();
          }
          size_t v364 = v363;
          if (v363 >= 0x17)
          {
            uint64_t v388 = (v363 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v363 | 7) != 0x17) {
              uint64_t v388 = v363 | 7;
            }
            uint64_t v389 = v388 + 1;
            int v365 = operator new(v388 + 1);
            *(void *)&__src[24] = v389 | 0x8000000000000000;
            *(void *)&__src[8] = v365;
            *(void *)&__src[16] = v364;
          }
          else
          {
            __src[31] = v363;
            int v365 = &__src[8];
            if (!v363) {
              goto LABEL_876;
            }
          }
          memmove(v365, v285, v364);
LABEL_876:
          v365[v364] = 0;
          v703[0] = v276;
          unint64_t v390 = *(void *)(v678 + 320);
          if (v390 < *(void *)(v678 + 328))
          {
            *(_DWORD *)unint64_t v390 = *(_DWORD *)__src;
            *(_OWORD *)(v390 + 8) = *(_OWORD *)&__src[8];
            *(void *)(v390 + 24) = *(void *)&__src[24];
            *(_DWORD *)(v390 + 32) = v276;
            *(void *)(v678 + 320) = v390 + 40;
            unint64_t v273 = (int8x8_t *)v679;
            BOOL v274 = v670;
          }
          else
          {
            uint64_t v391 = std::vector<AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::LinkInfo::Relocation,std::allocator<AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::LinkInfo::Relocation>>::__push_back_slow_path<AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::LinkInfo::Relocation>(v663, (uint64_t)__src);
            unint64_t v273 = (int8x8_t *)v679;
            int v392 = __src[31];
            *(void *)(v678 + 320) = v391;
            BOOL v274 = v670;
            if (v392 < 0) {
              operator delete(*(void **)&__src[8]);
            }
          }
          char v661 = 1;
          goto LABEL_605;
        case 6:
          *(_DWORD *)__srCC_SHA256_CTX c = 1;
          size_t v347 = strlen((const char *)(v675 + v284));
          if (v347 > 0x7FFFFFFFFFFFFFF7) {
            abort();
          }
          size_t v348 = v347;
          if (v347 >= 0x17)
          {
            uint64_t v373 = (v347 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v347 | 7) != 0x17) {
              uint64_t v373 = v347 | 7;
            }
            uint64_t v374 = v373 + 1;
            int v349 = operator new(v373 + 1);
            *(void *)&__src[24] = v374 | 0x8000000000000000;
            *(void *)&__src[8] = v349;
            *(void *)&__src[16] = v348;
          }
          else
          {
            __src[31] = v347;
            int v349 = &__src[8];
            if (!v347) {
              goto LABEL_840;
            }
          }
          memmove(v349, v285, v348);
LABEL_840:
          v349[v348] = 0;
          v703[0] = v276;
          unint64_t v375 = *(void *)(v678 + 344);
          if (v375 >= *(void *)(v678 + 352))
          {
            v396 = std::vector<AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::LinkInfo::Relocation,std::allocator<AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::LinkInfo::Relocation>>::__push_back_slow_path<AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::LinkInfo::Relocation>(v666, (uint64_t)__src);
            int v397 = __src[31];
            *(void *)(v678 + 344) = v396;
            if (v397 < 0) {
              operator delete(*(void **)&__src[8]);
            }
          }
          else
          {
            *(_DWORD *)unint64_t v375 = *(_DWORD *)__src;
            *(_OWORD *)(v375 + 8) = *(_OWORD *)&__src[8];
            *(void *)(v375 + 24) = *(void *)&__src[24];
            *(_DWORD *)(v375 + 32) = v276;
            *(void *)(v678 + 344) = v375 + 40;
          }
          *(_DWORD *)__srCC_SHA256_CTX c = 22;
          size_t v398 = strlen(v285);
          if (v398 > 0x7FFFFFFFFFFFFFF7) {
            abort();
          }
          size_t v399 = v398;
          if (v398 >= 0x17)
          {
            uint64_t v418 = (v398 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v398 | 7) != 0x17) {
              uint64_t v418 = v398 | 7;
            }
            uint64_t v419 = v418 + 1;
            unint64_t v400 = operator new(v418 + 1);
            *(void *)&__src[24] = v419 | 0x8000000000000000;
            *(void *)&__src[8] = v400;
            *(void *)&__src[16] = v399;
          }
          else
          {
            __src[31] = v398;
            unint64_t v400 = &__src[8];
            if (!v398) {
              goto LABEL_915;
            }
          }
          memmove(v400, v285, v399);
LABEL_915:
          v400[v399] = 0;
          v703[0] = -1;
          unint64_t v420 = *(void *)(v678 + 320);
          if (v420 >= *(void *)(v678 + 328))
          {
            uint64_t v430 = std::vector<AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::LinkInfo::Relocation,std::allocator<AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::LinkInfo::Relocation>>::__push_back_slow_path<AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::LinkInfo::Relocation>(v663, (uint64_t)__src);
            int v431 = __src[31];
            *(void *)(v678 + 320) = v430;
            if (v431 < 0) {
              operator delete(*(void **)&__src[8]);
            }
          }
          else
          {
            *(_DWORD *)unint64_t v420 = *(_DWORD *)__src;
            *(_OWORD *)(v420 + 8) = *(_OWORD *)&__src[8];
            *(void *)(v420 + 24) = *(void *)&__src[24];
            *(_DWORD *)(v420 + 32) = -1;
            *(void *)(v678 + 320) = v420 + 40;
          }
          goto LABEL_946;
        case 7:
          *(_DWORD *)__srCC_SHA256_CTX c = 0;
          size_t v353 = strlen((const char *)(v675 + v284));
          if (v353 > 0x7FFFFFFFFFFFFFF7) {
            abort();
          }
          size_t v354 = v353;
          if (v353 >= 0x17)
          {
            uint64_t v380 = (v353 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v353 | 7) != 0x17) {
              uint64_t v380 = v353 | 7;
            }
            uint64_t v381 = v380 + 1;
            uint64_t v355 = operator new(v380 + 1);
            *(void *)&__src[24] = v381 | 0x8000000000000000;
            *(void *)&__src[8] = v355;
            *(void *)&__src[16] = v354;
          }
          else
          {
            __src[31] = v353;
            uint64_t v355 = &__src[8];
            if (!v353) {
              goto LABEL_858;
            }
          }
          memmove(v355, v285, v354);
LABEL_858:
          v355[v354] = 0;
          v703[0] = v276;
          unint64_t v382 = *(void *)(v678 + 344);
          if (v382 >= *(void *)(v678 + 352))
          {
            uint64_t v401 = std::vector<AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::LinkInfo::Relocation,std::allocator<AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::LinkInfo::Relocation>>::__push_back_slow_path<AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::LinkInfo::Relocation>(v666, (uint64_t)__src);
            int v402 = __src[31];
            *(void *)(v678 + 344) = v401;
            if (v402 < 0) {
              operator delete(*(void **)&__src[8]);
            }
          }
          else
          {
            *(_DWORD *)unint64_t v382 = *(_DWORD *)__src;
            *(_OWORD *)(v382 + 8) = *(_OWORD *)&__src[8];
            *(void *)(v382 + 24) = *(void *)&__src[24];
            *(_DWORD *)(v382 + 32) = v276;
            *(void *)(v678 + 344) = v382 + 40;
          }
          *(_DWORD *)__srCC_SHA256_CTX c = 21;
          size_t v403 = strlen(v285);
          if (v403 > 0x7FFFFFFFFFFFFFF7) {
            abort();
          }
          size_t v404 = v403;
          if (v403 >= 0x17)
          {
            uint64_t v421 = (v403 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v403 | 7) != 0x17) {
              uint64_t v421 = v403 | 7;
            }
            uint64_t v422 = v421 + 1;
            int v405 = operator new(v421 + 1);
            *(void *)&__src[24] = v422 | 0x8000000000000000;
            *(void *)&__src[8] = v405;
            *(void *)&__src[16] = v404;
          }
          else
          {
            __src[31] = v403;
            int v405 = &__src[8];
            if (!v403) {
              goto LABEL_921;
            }
          }
          memmove(v405, v285, v404);
LABEL_921:
          v405[v404] = 0;
          v703[0] = -1;
          unint64_t v423 = *(void *)(v678 + 320);
          if (v423 >= *(void *)(v678 + 328))
          {
            uint64_t v432 = std::vector<AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::LinkInfo::Relocation,std::allocator<AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::LinkInfo::Relocation>>::__push_back_slow_path<AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::LinkInfo::Relocation>(v663, (uint64_t)__src);
            int v433 = __src[31];
            *(void *)(v678 + 320) = v432;
            if (v433 < 0) {
              operator delete(*(void **)&__src[8]);
            }
          }
          else
          {
            *(_DWORD *)unint64_t v423 = *(_DWORD *)__src;
            *(_OWORD *)(v423 + 8) = *(_OWORD *)&__src[8];
            *(void *)(v423 + 24) = *(void *)&__src[24];
            *(_DWORD *)(v423 + 32) = -1;
            *(void *)(v678 + 320) = v423 + 40;
          }
          AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::GOTEntryLayout::insert(v659, v285, 8);
          goto LABEL_947;
        case 8:
          AGX::ESLInstructionEncoderGen3<AGX::HAL200::Encoders>::LoadImmediate::LoadImmediate((uint64_t)__src, (const unsigned __int8 *)(v650 + (int)v276));
          int v356 = *(_DWORD *)__src;
          *(_DWORD *)__srCC_SHA256_CTX c = 2;
          size_t v357 = strlen(v285);
          if (v357 > 0x7FFFFFFFFFFFFFF7) {
            abort();
          }
          size_t v358 = v357;
          if (v357 >= 0x17)
          {
            uint64_t v383 = (v357 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v357 | 7) != 0x17) {
              uint64_t v383 = v357 | 7;
            }
            uint64_t v384 = v383 + 1;
            size_t v359 = operator new(v383 + 1);
            *(void *)&__src[24] = v384 | 0x8000000000000000;
            *(void *)&__src[8] = v359;
            *(void *)&__src[16] = v358;
          }
          else
          {
            __src[31] = v357;
            size_t v359 = &__src[8];
            if (!v357) {
              goto LABEL_864;
            }
          }
          memmove(v359, v285, v358);
LABEL_864:
          v359[v358] = 0;
          v703[0] = v276;
          unint64_t v385 = *(void *)(v678 + 344);
          if (v385 >= *(void *)(v678 + 352))
          {
            size_t v406 = std::vector<AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::LinkInfo::Relocation,std::allocator<AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::LinkInfo::Relocation>>::__push_back_slow_path<AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::LinkInfo::Relocation>(v666, (uint64_t)__src);
            int v407 = __src[31];
            *(void *)(v678 + 344) = v406;
            if (v407 < 0) {
              operator delete(*(void **)&__src[8]);
            }
          }
          else
          {
            *(_DWORD *)unint64_t v385 = *(_DWORD *)__src;
            *(_OWORD *)(v385 + 8) = *(_OWORD *)&__src[8];
            *(void *)(v385 + 24) = *(void *)&__src[24];
            *(_DWORD *)(v385 + 32) = v276;
            *(void *)(v678 + 344) = v385 + 40;
          }
          *(_DWORD *)__srCC_SHA256_CTX c = 23;
          size_t v408 = strlen(v285);
          if (v408 > 0x7FFFFFFFFFFFFFF7) {
            abort();
          }
          size_t v409 = v408;
          if (v408 >= 0x17)
          {
            uint64_t v424 = (v408 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v408 | 7) != 0x17) {
              uint64_t v424 = v408 | 7;
            }
            uint64_t v425 = v424 + 1;
            int v410 = operator new(v424 + 1);
            *(void *)&__src[24] = v425 | 0x8000000000000000;
            *(void *)&__src[8] = v410;
            *(void *)&__src[16] = v409;
          }
          else
          {
            __src[31] = v408;
            int v410 = &__src[8];
            if (!v408) {
              goto LABEL_927;
            }
          }
          memmove(v410, v285, v409);
LABEL_927:
          v410[v409] = 0;
          v703[0] = v356;
          unint64_t v426 = *(void *)(v678 + 320);
          if (v426 >= *(void *)(v678 + 328))
          {
            unint64_t v434 = std::vector<AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::LinkInfo::Relocation,std::allocator<AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::LinkInfo::Relocation>>::__push_back_slow_path<AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::LinkInfo::Relocation>(v663, (uint64_t)__src);
            int v435 = __src[31];
            *(void *)(v678 + 320) = v434;
            if (v435 < 0) {
              operator delete(*(void **)&__src[8]);
            }
          }
          else
          {
            *(_DWORD *)unint64_t v426 = *(_DWORD *)__src;
            *(_OWORD *)(v426 + 8) = *(_OWORD *)&__src[8];
            *(void *)(v426 + 24) = *(void *)&__src[24];
            *(_DWORD *)(v426 + 32) = v356;
            *(void *)(v678 + 320) = v426 + 40;
          }
          AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::GOTEntryLayout::insert(v659, v285, 2);
          char v661 = 1;
          goto LABEL_947;
        case 9:
          *(_DWORD *)__srCC_SHA256_CTX c = 3;
          size_t v366 = strlen((const char *)(v675 + v284));
          if (v366 > 0x7FFFFFFFFFFFFFF7) {
            abort();
          }
          size_t v367 = v366;
          if (v366 >= 0x17)
          {
            uint64_t v393 = (v366 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v366 | 7) != 0x17) {
              uint64_t v393 = v366 | 7;
            }
            uint64_t v394 = v393 + 1;
            int v368 = operator new(v393 + 1);
            *(void *)&__src[24] = v394 | 0x8000000000000000;
            *(void *)&__src[8] = v368;
            *(void *)&__src[16] = v367;
          }
          else
          {
            __src[31] = v366;
            int v368 = &__src[8];
            if (!v366) {
              goto LABEL_883;
            }
          }
          memmove(v368, v285, v367);
LABEL_883:
          v368[v367] = 0;
          v703[0] = v276;
          unint64_t v395 = *(void *)(v678 + 344);
          if (v395 >= *(void *)(v678 + 352))
          {
            v413 = std::vector<AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::LinkInfo::Relocation,std::allocator<AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::LinkInfo::Relocation>>::__push_back_slow_path<AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::LinkInfo::Relocation>(v666, (uint64_t)__src);
            int v414 = __src[31];
            *(void *)(v678 + 344) = v413;
            if (v414 < 0) {
              operator delete(*(void **)&__src[8]);
            }
          }
          else
          {
            *(_DWORD *)unint64_t v395 = *(_DWORD *)__src;
            *(_OWORD *)(v395 + 8) = *(_OWORD *)&__src[8];
            *(void *)(v395 + 24) = *(void *)&__src[24];
            *(_DWORD *)(v395 + 32) = v276;
            *(void *)(v678 + 344) = v395 + 40;
          }
          *(_DWORD *)__srCC_SHA256_CTX c = 22;
          size_t v415 = strlen(v285);
          if (v415 > 0x7FFFFFFFFFFFFFF7) {
            abort();
          }
          size_t v416 = v415;
          if (v415 >= 0x17)
          {
            uint64_t v427 = (v415 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v415 | 7) != 0x17) {
              uint64_t v427 = v415 | 7;
            }
            uint64_t v428 = v427 + 1;
            size_t v417 = operator new(v427 + 1);
            *(void *)&__src[24] = v428 | 0x8000000000000000;
            *(void *)&__src[8] = v417;
            *(void *)&__src[16] = v416;
          }
          else
          {
            __src[31] = v415;
            size_t v417 = &__src[8];
            if (!v415) {
              goto LABEL_933;
            }
          }
          memmove(v417, v285, v416);
LABEL_933:
          v417[v416] = 0;
          v703[0] = -1;
          unint64_t v429 = *(void *)(v678 + 320);
          if (v429 >= *(void *)(v678 + 328))
          {
            uint64_t v436 = std::vector<AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::LinkInfo::Relocation,std::allocator<AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::LinkInfo::Relocation>>::__push_back_slow_path<AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::LinkInfo::Relocation>(v663, (uint64_t)__src);
            int v437 = __src[31];
            *(void *)(v678 + 320) = v436;
            if (v437 < 0) {
              operator delete(*(void **)&__src[8]);
            }
          }
          else
          {
            *(_DWORD *)unint64_t v429 = *(_DWORD *)__src;
            *(_OWORD *)(v429 + 8) = *(_OWORD *)&__src[8];
            *(void *)(v429 + 24) = *(void *)&__src[24];
            *(_DWORD *)(v429 + 32) = -1;
            *(void *)(v678 + 320) = v429 + 40;
          }
LABEL_946:
          AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::GOTEntryLayout::insert(v659, v285, 4);
LABEL_947:
          unint64_t v273 = (int8x8_t *)v679;
          BOOL v274 = v670;
          ++v272;
          break;
        default:
          goto LABEL_605;
      }
    }
    else
    {
      int v280 = HIDWORD(v276) & 0xFFFFFF;
      int8x8_t v281 = v273[220];
      if (v281)
      {
        uint8x8_t v282 = (uint8x8_t)vcnt_s8(v281);
        v282.i16[0] = vaddlv_u8(v282);
        if (v282.u32[0] > 1uLL)
        {
          uint64_t v283 = HIDWORD(v276) & 0xFFFFFF;
          if (*(void *)&v281 <= v279) {
            uint64_t v283 = v279 % *(void *)&v281;
          }
        }
        else
        {
          uint64_t v283 = (v281.i32[0] - 1) & v279;
        }
        int v290 = *(uint64_t **)(*(void *)&v273[219] + 8 * v283);
        if (v290)
        {
          int v290 = (uint64_t *)*v290;
          if (v290)
          {
            if (v282.u32[0] < 2uLL)
            {
              while (1)
              {
                uint64_t v292 = v290[1];
                if (v292 == v279)
                {
                  if (*((_DWORD *)v290 + 4) == v280) {
                    goto LABEL_646;
                  }
                }
                else if ((v292 & (*(void *)&v281 - 1)) != v283)
                {
                  goto LABEL_645;
                }
                int v290 = (uint64_t *)*v290;
                if (!v290) {
                  goto LABEL_646;
                }
              }
            }
            do
            {
              unint64_t v291 = v290[1];
              if (v291 == v279)
              {
                if (*((_DWORD *)v290 + 4) == v280) {
                  break;
                }
              }
              else
              {
                if (v291 >= *(void *)&v281) {
                  v291 %= *(void *)&v281;
                }
                if (v291 != v283) {
                  goto LABEL_645;
                }
              }
              int v290 = (uint64_t *)*v290;
            }
            while (v290);
          }
        }
      }
      else
      {
LABEL_645:
        int v290 = 0;
      }
LABEL_646:
      int8x8_t v293 = (uint64_t **)(v290 + 3);
      int v294 = *((char *)v290 + 47);
      if (v294 < 0)
      {
        if (v290[4] != 6) {
          goto LABEL_655;
        }
        int8x8_t v293 = (uint64_t **)*v293;
      }
      else if (v294 != 6)
      {
        goto LABEL_655;
      }
      int v295 = *(_DWORD *)v293;
      int v296 = *((unsigned __int16 *)v293 + 2);
      if (v295 == 1163157343 && v296 == 21592)
      {
        switch(v278)
        {
          case 0:
            *(_DWORD *)__srCC_SHA256_CTX c = 10;
            *(void *)&__src[8] = operator new(0x20uLL);
            *(_OWORD *)&__src[16] = xmmword_242EA7BB0;
            strcpy(*(char **)&__src[8], "(__TEXT append base address)");
            v703[0] = v276;
            unint64_t v320 = *(void *)(v678 + 344);
            if (v320 >= *(void *)(v678 + 352))
            {
              uint64_t v459 = std::vector<AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::LinkInfo::Relocation,std::allocator<AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::LinkInfo::Relocation>>::__push_back_slow_path<AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::LinkInfo::Relocation>(v666, (uint64_t)__src);
              unint64_t v273 = (int8x8_t *)v679;
              int v460 = __src[31];
              *(void *)(v678 + 344) = v459;
              if (v460 < 0) {
                operator delete(*(void **)&__src[8]);
              }
            }
            else
            {
              *(_DWORD *)unint64_t v320 = 10;
              *(_OWORD *)(v320 + 8) = *(_OWORD *)&__src[8];
              *(void *)(v320 + 24) = *(void *)&__src[24];
              *(_DWORD *)(v320 + 32) = v276;
              *(void *)(v678 + 344) = v320 + 40;
              unint64_t v273 = (int8x8_t *)v679;
            }
            BOOL v274 = v670;
            ++v272;
            continue;
          case 1:
            *(_DWORD *)__srCC_SHA256_CTX c = 16;
            int v441 = (const char *)(v675 + *(unsigned int *)(v676 + 16 * v279));
            size_t v442 = strlen(v441);
            if (v442 > 0x7FFFFFFFFFFFFFF7) {
              abort();
            }
            size_t v443 = v442;
            if (v442 >= 0x17)
            {
              uint64_t v461 = (v442 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v442 | 7) != 0x17) {
                uint64_t v461 = v442 | 7;
              }
              uint64_t v462 = v461 + 1;
              v444 = operator new(v461 + 1);
              *(void *)&__src[24] = v462 | 0x8000000000000000;
              *(void *)&__src[8] = v444;
              *(void *)&__src[16] = v443;
            }
            else
            {
              __src[31] = v442;
              v444 = &__src[8];
              if (!v442) {
                goto LABEL_990;
              }
            }
            memmove(v444, v441, v443);
LABEL_990:
            v444[v443] = 0;
            v703[0] = v276;
            unint64_t v463 = *(void *)(v678 + 344);
            if (v463 < *(void *)(v678 + 352))
            {
              *(_DWORD *)unint64_t v463 = *(_DWORD *)__src;
              *(_OWORD *)(v463 + 8) = *(_OWORD *)&__src[8];
              *(void *)(v463 + 24) = *(void *)&__src[24];
              *(_DWORD *)(v463 + 32) = v276;
              *(void *)(v678 + 344) = v463 + 40;
              goto LABEL_947;
            }
            uint64_t v464 = std::vector<AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::LinkInfo::Relocation,std::allocator<AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::LinkInfo::Relocation>>::__push_back_slow_path<AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::LinkInfo::Relocation>(v666, (uint64_t)__src);
            unint64_t v273 = (int8x8_t *)v679;
            int v465 = __src[31];
            *(void *)(v678 + 344) = v464;
            BOOL v274 = v670;
            if (v465 < 0) {
              goto LABEL_904;
            }
            goto LABEL_605;
          case 2:
            *(_DWORD *)__srCC_SHA256_CTX c = 10;
            *(void *)&__src[8] = operator new(0x20uLL);
            *(_OWORD *)&__src[16] = xmmword_242EA7C30;
            strcpy(*(char **)&__src[8], "(__TEXT append base address lo)");
            v703[0] = v276;
            unint64_t v439 = *(void *)(v678 + 344);
            if (v439 >= *(void *)(v678 + 352))
            {
              int v455 = std::vector<AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::LinkInfo::Relocation,std::allocator<AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::LinkInfo::Relocation>>::__push_back_slow_path<AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::LinkInfo::Relocation>(v666, (uint64_t)__src);
              unint64_t v273 = (int8x8_t *)v679;
              int v456 = __src[31];
              *(void *)(v678 + 344) = v455;
              if (v456 < 0) {
                operator delete(*(void **)&__src[8]);
              }
            }
            else
            {
              *(_DWORD *)unint64_t v439 = 10;
              *(_OWORD *)(v439 + 8) = *(_OWORD *)&__src[8];
              *(void *)(v439 + 24) = *(void *)&__src[24];
              *(_DWORD *)(v439 + 32) = v276;
              *(void *)(v678 + 344) = v439 + 40;
              unint64_t v273 = (int8x8_t *)v679;
            }
            BOOL v274 = v670;
            ++v272;
            continue;
          case 3:
            *(_DWORD *)__srCC_SHA256_CTX c = 11;
            *(void *)&__src[8] = operator new(0x20uLL);
            *(_OWORD *)&__src[16] = xmmword_242EA7C30;
            strcpy(*(char **)&__src[8], "(__TEXT append base address hi)");
            v703[0] = v276;
            unint64_t v440 = *(void *)(v678 + 344);
            if (v440 >= *(void *)(v678 + 352))
            {
              v457 = std::vector<AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::LinkInfo::Relocation,std::allocator<AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::LinkInfo::Relocation>>::__push_back_slow_path<AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::LinkInfo::Relocation>(v666, (uint64_t)__src);
              unint64_t v273 = (int8x8_t *)v679;
              int v458 = __src[31];
              *(void *)(v678 + 344) = v457;
              if (v458 < 0) {
                operator delete(*(void **)&__src[8]);
              }
            }
            else
            {
              *(_DWORD *)unint64_t v440 = 11;
              *(_OWORD *)(v440 + 8) = *(_OWORD *)&__src[8];
              *(void *)(v440 + 24) = *(void *)&__src[24];
              *(_DWORD *)(v440 + 32) = v276;
              *(void *)(v678 + 344) = v440 + 40;
              unint64_t v273 = (int8x8_t *)v679;
            }
            BOOL v274 = v670;
            ++v272;
            continue;
          default:
            goto LABEL_605;
        }
      }
LABEL_655:
      if (v281)
      {
        uint8x8_t v298 = (uint8x8_t)vcnt_s8(v281);
        v298.i16[0] = vaddlv_u8(v298);
        if (v298.u32[0] > 1uLL)
        {
          uint64_t v299 = HIDWORD(v276) & 0xFFFFFF;
          if (*(void *)&v281 <= v279) {
            uint64_t v299 = v279 % *(void *)&v281;
          }
        }
        else
        {
          uint64_t v299 = (v281.i32[0] - 1) & v279;
        }
        size_t v300 = *(uint64_t **)(*(void *)&v273[219] + 8 * v299);
        if (v300)
        {
          size_t v300 = (uint64_t *)*v300;
          if (v300)
          {
            if (v298.u32[0] < 2uLL)
            {
              while (1)
              {
                uint64_t v302 = v300[1];
                if (v302 == v279)
                {
                  if (*((_DWORD *)v300 + 4) == v280) {
                    goto LABEL_676;
                  }
                }
                else if ((v302 & (*(void *)&v281 - 1)) != v299)
                {
                  goto LABEL_675;
                }
                size_t v300 = (uint64_t *)*v300;
                if (!v300) {
                  goto LABEL_676;
                }
              }
            }
            do
            {
              unint64_t v301 = v300[1];
              if (v301 == v279)
              {
                if (*((_DWORD *)v300 + 4) == v280) {
                  break;
                }
              }
              else
              {
                if (v301 >= *(void *)&v281) {
                  v301 %= *(void *)&v281;
                }
                if (v301 != v299) {
                  goto LABEL_675;
                }
              }
              size_t v300 = (uint64_t *)*v300;
            }
            while (v300);
          }
        }
      }
      else
      {
LABEL_675:
        size_t v300 = 0;
      }
LABEL_676:
      unint64_t v303 = v300 + 3;
      int v304 = *((char *)v300 + 47);
      if (v304 < 0)
      {
        if (v300[4] != 12) {
          goto LABEL_685;
        }
        unint64_t v303 = (uint64_t *)*v303;
      }
      else if (v304 != 12)
      {
        goto LABEL_685;
      }
      uint64_t v305 = (uint64_t *)*v303;
      uint64_t v306 = *((unsigned int *)v303 + 2);
      if (v305 == (uint64_t *)0x435F545845545F5FLL && v306 == 1414745679)
      {
        if (v278 == 3)
        {
          *(_DWORD *)__srCC_SHA256_CTX c = 5;
          *(void *)&__src[8] = operator new(0x28uLL);
          *(_OWORD *)&__src[16] = xmmword_242EA7F70;
          strcpy(*(char **)&__src[8], "(__TEXT_CONST base address high bits)");
          v703[0] = v276;
          unint64_t v369 = *(void *)(v678 + 344);
          if (v369 >= *(void *)(v678 + 352))
          {
            v449 = std::vector<AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::LinkInfo::Relocation,std::allocator<AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::LinkInfo::Relocation>>::__push_back_slow_path<AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::LinkInfo::Relocation>(v666, (uint64_t)__src);
            unint64_t v273 = (int8x8_t *)v679;
            int v450 = __src[31];
            *(void *)(v678 + 344) = v449;
            if (v450 < 0) {
              operator delete(*(void **)&__src[8]);
            }
          }
          else
          {
            *(_DWORD *)unint64_t v369 = 5;
            *(_OWORD *)(v369 + 8) = *(_OWORD *)&__src[8];
            *(void *)(v369 + 24) = *(void *)&__src[24];
            *(_DWORD *)(v369 + 32) = v276;
            *(void *)(v678 + 344) = v369 + 40;
            unint64_t v273 = (int8x8_t *)v679;
          }
          BOOL v274 = v670;
          ++v272;
        }
        else if (v278 == 2)
        {
          *(_DWORD *)__srCC_SHA256_CTX c = 4;
          *(void *)&__src[8] = operator new(0x28uLL);
          *(_OWORD *)&__src[16] = xmmword_242EA7BE0;
          strcpy(*(char **)&__src[8], "(__TEXT_CONST base address low bits)");
          v703[0] = v276;
          unint64_t v331 = *(void *)(v678 + 344);
          if (v331 >= *(void *)(v678 + 352))
          {
            size_t v447 = std::vector<AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::LinkInfo::Relocation,std::allocator<AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::LinkInfo::Relocation>>::__push_back_slow_path<AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::LinkInfo::Relocation>(v666, (uint64_t)__src);
            unint64_t v273 = (int8x8_t *)v679;
            int v448 = __src[31];
            *(void *)(v678 + 344) = v447;
            if (v448 < 0) {
              operator delete(*(void **)&__src[8]);
            }
          }
          else
          {
            *(_DWORD *)unint64_t v331 = 4;
            *(_OWORD *)(v331 + 8) = *(_OWORD *)&__src[8];
            *(void *)(v331 + 24) = *(void *)&__src[24];
            *(_DWORD *)(v331 + 32) = v276;
            *(void *)(v678 + 344) = v331 + 40;
            unint64_t v273 = (int8x8_t *)v679;
          }
          BOOL v274 = v670;
          ++v272;
        }
        else
        {
          BOOL v274 = v670;
          ++v272;
        }
      }
      else
      {
LABEL_685:
        if (v281)
        {
          uint8x8_t v308 = (uint8x8_t)vcnt_s8(v281);
          v308.i16[0] = vaddlv_u8(v308);
          if (v308.u32[0] > 1uLL)
          {
            uint64_t v309 = HIDWORD(v276) & 0xFFFFFF;
            if (*(void *)&v281 <= v279) {
              uint64_t v309 = v279 % *(void *)&v281;
            }
          }
          else
          {
            uint64_t v309 = (v281.i32[0] - 1) & v279;
          }
          uint8x8_t v310 = *(uint64_t **)(*(void *)&v273[219] + 8 * v309);
          if (v310)
          {
            uint8x8_t v310 = (uint64_t *)*v310;
            if (v310)
            {
              if (v308.u32[0] < 2uLL)
              {
                while (1)
                {
                  uint64_t v312 = v310[1];
                  if (v312 == v279)
                  {
                    if (*((_DWORD *)v310 + 4) == v280) {
                      goto LABEL_706;
                    }
                  }
                  else if ((v312 & (*(void *)&v281 - 1)) != v309)
                  {
                    goto LABEL_705;
                  }
                  uint8x8_t v310 = (uint64_t *)*v310;
                  if (!v310) {
                    goto LABEL_706;
                  }
                }
              }
              do
              {
                unint64_t v311 = v310[1];
                if (v311 == v279)
                {
                  if (*((_DWORD *)v310 + 4) == v280) {
                    break;
                  }
                }
                else
                {
                  if (v311 >= *(void *)&v281) {
                    v311 %= *(void *)&v281;
                  }
                  if (v311 != v309) {
                    goto LABEL_705;
                  }
                }
                uint8x8_t v310 = (uint64_t *)*v310;
              }
              while (v310);
            }
          }
        }
        else
        {
LABEL_705:
          uint8x8_t v310 = 0;
        }
LABEL_706:
        unint64_t v313 = (uint64_t **)(v310 + 3);
        int v314 = *((char *)v310 + 47);
        if (v314 < 0)
        {
          if (v310[4] != 6) {
            goto LABEL_715;
          }
          unint64_t v313 = (uint64_t **)*v313;
        }
        else if (v314 != 6)
        {
          goto LABEL_715;
        }
        int v315 = *(_DWORD *)v313;
        int v316 = *((unsigned __int16 *)v313 + 2);
        if (v315 == 1094999903 && v316 == 16724)
        {
          if (v278 == 3)
          {
            *(_DWORD *)__srCC_SHA256_CTX c = 9;
            *(void *)&__src[8] = operator new(0x20uLL);
            *(_OWORD *)&__src[16] = xmmword_242EA7C40;
            strcpy(*(char **)&__src[8], "(__DATA base address hi bits)");
            v703[0] = v276;
            unint64_t v438 = *(void *)(v678 + 344);
            if (v438 >= *(void *)(v678 + 352))
            {
              int v453 = std::vector<AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::LinkInfo::Relocation,std::allocator<AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::LinkInfo::Relocation>>::__push_back_slow_path<AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::LinkInfo::Relocation>(v666, (uint64_t)__src);
              unint64_t v273 = (int8x8_t *)v679;
              int v454 = __src[31];
              *(void *)(v678 + 344) = v453;
              if (v454 < 0) {
                operator delete(*(void **)&__src[8]);
              }
            }
            else
            {
              *(_DWORD *)unint64_t v438 = 9;
              *(_OWORD *)(v438 + 8) = *(_OWORD *)&__src[8];
              *(void *)(v438 + 24) = *(void *)&__src[24];
              *(_DWORD *)(v438 + 32) = v276;
              *(void *)(v678 + 344) = v438 + 40;
              unint64_t v273 = (int8x8_t *)v679;
            }
            BOOL v274 = v670;
            ++v272;
          }
          else if (v278 == 2)
          {
            *(_DWORD *)__srCC_SHA256_CTX c = 8;
            *(void *)&__src[8] = operator new(0x20uLL);
            *(_OWORD *)&__src[16] = xmmword_242EA7C70;
            strcpy(*(char **)&__src[8], "(__DATA base address low bits)");
            v703[0] = v276;
            unint64_t v342 = *(void *)(v678 + 344);
            if (v342 >= *(void *)(v678 + 352))
            {
              uint64_t v451 = std::vector<AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::LinkInfo::Relocation,std::allocator<AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::LinkInfo::Relocation>>::__push_back_slow_path<AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::LinkInfo::Relocation>(v666, (uint64_t)__src);
              unint64_t v273 = (int8x8_t *)v679;
              int v452 = __src[31];
              *(void *)(v678 + 344) = v451;
              if (v452 < 0) {
                operator delete(*(void **)&__src[8]);
              }
            }
            else
            {
              *(_DWORD *)unint64_t v342 = 8;
              *(_OWORD *)(v342 + 8) = *(_OWORD *)&__src[8];
              *(void *)(v342 + 24) = *(void *)&__src[24];
              *(_DWORD *)(v342 + 32) = v276;
              *(void *)(v678 + 344) = v342 + 40;
              unint64_t v273 = (int8x8_t *)v679;
            }
            BOOL v274 = v670;
            ++v272;
          }
          else
          {
            BOOL v274 = v670;
            ++v272;
          }
        }
        else
        {
LABEL_715:
          if (v281)
          {
            uint8x8_t v318 = (uint8x8_t)vcnt_s8(v281);
            v318.i16[0] = vaddlv_u8(v318);
            if (v318.u32[0] > 1uLL)
            {
              uint64_t v319 = HIDWORD(v276) & 0xFFFFFF;
              if (*(void *)&v281 <= v279) {
                uint64_t v319 = v279 % *(void *)&v281;
              }
            }
            else
            {
              uint64_t v319 = (v281.i32[0] - 1) & v279;
            }
            uint64_t v321 = *(uint64_t **)(*(void *)&v273[219] + 8 * v319);
            if (v321)
            {
              uint64_t v321 = (uint64_t *)*v321;
              if (v321)
              {
                if (v318.u32[0] < 2uLL)
                {
                  while (1)
                  {
                    uint64_t v323 = v321[1];
                    if (v323 == v279)
                    {
                      if (*((_DWORD *)v321 + 4) == v280) {
                        goto LABEL_739;
                      }
                    }
                    else if ((v323 & (*(void *)&v281 - 1)) != v319)
                    {
                      goto LABEL_738;
                    }
                    uint64_t v321 = (uint64_t *)*v321;
                    if (!v321) {
                      goto LABEL_739;
                    }
                  }
                }
                do
                {
                  unint64_t v322 = v321[1];
                  if (v322 == v279)
                  {
                    if (*((_DWORD *)v321 + 4) == v280) {
                      break;
                    }
                  }
                  else
                  {
                    if (v322 >= *(void *)&v281) {
                      v322 %= *(void *)&v281;
                    }
                    if (v322 != v319) {
                      goto LABEL_738;
                    }
                  }
                  uint64_t v321 = (uint64_t *)*v321;
                }
                while (v321);
              }
            }
          }
          else
          {
LABEL_738:
            uint64_t v321 = 0;
          }
LABEL_739:
          uint64_t v324 = v321 + 3;
          int v325 = *((char *)v321 + 47);
          if (v325 < 0)
          {
            if (v321[4] != 13) {
              goto LABEL_748;
            }
            uint64_t v324 = (void *)*v324;
          }
          else if (v325 != 13)
          {
            goto LABEL_748;
          }
          int v326 = (void *)*v324;
          uint64_t v327 = *(void *)((char *)v324 + 5);
          if (v326 == (void *)0x435F415441445F5FLL && v327 == 0x4E4F4D4D4F435F41)
          {
            if (v278 == 3)
            {
              *(_DWORD *)__srCC_SHA256_CTX c = 15;
              *(void *)&__src[8] = operator new(0x28uLL);
              *(_OWORD *)&__src[16] = xmmword_242EA7BE0;
              strcpy(*(char **)&__src[8], "(__DATA_COMMON base address hi bits)");
              v703[0] = v276;
              unint64_t v445 = *(void *)(v678 + 344);
              if (v445 >= *(void *)(v678 + 352))
              {
                unint64_t v468 = std::vector<AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::LinkInfo::Relocation,std::allocator<AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::LinkInfo::Relocation>>::__push_back_slow_path<AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::LinkInfo::Relocation>(v666, (uint64_t)__src);
                unint64_t v273 = (int8x8_t *)v679;
                int v469 = __src[31];
                *(void *)(v678 + 344) = v468;
                if (v469 < 0) {
                  operator delete(*(void **)&__src[8]);
                }
              }
              else
              {
                *(_DWORD *)unint64_t v445 = 15;
                *(_OWORD *)(v445 + 8) = *(_OWORD *)&__src[8];
                *(void *)(v445 + 24) = *(void *)&__src[24];
                *(_DWORD *)(v445 + 32) = v276;
                *(void *)(v678 + 344) = v445 + 40;
                unint64_t v273 = (int8x8_t *)v679;
              }
              BOOL v274 = v670;
              ++v272;
            }
            else if (v278 == 2)
            {
              *(_DWORD *)__srCC_SHA256_CTX c = 14;
              *(void *)&__src[8] = operator new(0x28uLL);
              *(_OWORD *)&__src[16] = xmmword_242EA7F70;
              strcpy(*(char **)&__src[8], "(__DATA_COMMON base address low bits)");
              v703[0] = v276;
              unint64_t v343 = *(void *)(v678 + 344);
              if (v343 >= *(void *)(v678 + 352))
              {
                int v466 = std::vector<AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::LinkInfo::Relocation,std::allocator<AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::LinkInfo::Relocation>>::__push_back_slow_path<AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::LinkInfo::Relocation>(v666, (uint64_t)__src);
                unint64_t v273 = (int8x8_t *)v679;
                int v467 = __src[31];
                *(void *)(v678 + 344) = v466;
                if (v467 < 0) {
                  operator delete(*(void **)&__src[8]);
                }
              }
              else
              {
                *(_DWORD *)unint64_t v343 = 14;
                *(_OWORD *)(v343 + 8) = *(_OWORD *)&__src[8];
                *(void *)(v343 + 24) = *(void *)&__src[24];
                *(_DWORD *)(v343 + 32) = v276;
                *(void *)(v678 + 344) = v343 + 40;
                unint64_t v273 = (int8x8_t *)v679;
              }
              BOOL v274 = v670;
              ++v272;
            }
            else
            {
              BOOL v274 = v670;
              ++v272;
            }
          }
          else
          {
LABEL_748:
            if (v281)
            {
              uint8x8_t v329 = (uint8x8_t)vcnt_s8(v281);
              v329.i16[0] = vaddlv_u8(v329);
              if (v329.u32[0] > 1uLL)
              {
                uint64_t v330 = HIDWORD(v276) & 0xFFFFFF;
                if (*(void *)&v281 <= v279) {
                  uint64_t v330 = v279 % *(void *)&v281;
                }
              }
              else
              {
                uint64_t v330 = (v281.i32[0] - 1) & v279;
              }
              unint64_t v332 = *(uint64_t **)(*(void *)&v273[219] + 8 * v330);
              if (v332)
              {
                unint64_t v332 = (uint64_t *)*v332;
                if (v332)
                {
                  if (v329.u32[0] < 2uLL)
                  {
                    uint64_t v333 = *(void *)&v281 - 1;
                    while (1)
                    {
                      uint64_t v335 = v332[1];
                      if (v335 == v279)
                      {
                        if (*((_DWORD *)v332 + 4) == v280) {
                          goto LABEL_773;
                        }
                      }
                      else if ((v335 & v333) != v330)
                      {
                        goto LABEL_772;
                      }
                      unint64_t v332 = (uint64_t *)*v332;
                      if (!v332) {
                        goto LABEL_773;
                      }
                    }
                  }
                  do
                  {
                    unint64_t v334 = v332[1];
                    if (v334 == v279)
                    {
                      if (*((_DWORD *)v332 + 4) == v280) {
                        break;
                      }
                    }
                    else
                    {
                      if (v334 >= *(void *)&v281) {
                        v334 %= *(void *)&v281;
                      }
                      if (v334 != v330) {
                        goto LABEL_772;
                      }
                    }
                    unint64_t v332 = (uint64_t *)*v332;
                  }
                  while (v332);
                }
              }
            }
            else
            {
LABEL_772:
              unint64_t v332 = 0;
            }
LABEL_773:
            __int16 v336 = v332 + 3;
            int v337 = *((char *)v332 + 47);
            if (v337 < 0)
            {
              if (v332[4] != 14) {
                goto LABEL_605;
              }
              __int16 v336 = (void *)*v336;
            }
            else if (v337 != 14)
            {
              goto LABEL_605;
            }
            v338 = (void *)*v336;
            uint64_t v339 = *(void *)((char *)v336 + 6);
            if (v338 != (void *)0x435F545845545F5FLL || v339 != 0x474E49525453435FLL)
            {
LABEL_605:
              ++v272;
              continue;
            }
            if (v278 == 3)
            {
              *(_DWORD *)__srCC_SHA256_CTX c = 7;
              *(void *)&__src[8] = operator new(0x28uLL);
              *(_OWORD *)&__src[16] = xmmword_242EA7BA0;
              strcpy(*(char **)&__src[8], "(_TEXT_CSTRING base addr hi bits)");
              v703[0] = v276;
              unint64_t v446 = *(void *)(v678 + 344);
              if (v446 >= *(void *)(v678 + 352))
              {
                int v472 = std::vector<AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::LinkInfo::Relocation,std::allocator<AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::LinkInfo::Relocation>>::__push_back_slow_path<AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::LinkInfo::Relocation>(v666, (uint64_t)__src);
                unint64_t v273 = (int8x8_t *)v679;
                int v473 = __src[31];
                *(void *)(v678 + 344) = v472;
                if (v473 < 0) {
                  operator delete(*(void **)&__src[8]);
                }
              }
              else
              {
                *(_DWORD *)unint64_t v446 = 7;
                *(_OWORD *)(v446 + 8) = *(_OWORD *)&__src[8];
                *(void *)(v446 + 24) = *(void *)&__src[24];
                *(_DWORD *)(v446 + 32) = v276;
                *(void *)(v678 + 344) = v446 + 40;
                unint64_t v273 = (int8x8_t *)v679;
              }
              BOOL v274 = v670;
              ++v272;
            }
            else if (v278 == 2)
            {
              *(_DWORD *)__srCC_SHA256_CTX c = 6;
              *(void *)&__src[8] = operator new(0x28uLL);
              *(_OWORD *)&__src[16] = xmmword_242EA7BA0;
              strcpy(*(char **)&__src[8], "(_TEXT_CSTRING base addr lo bits)");
              v703[0] = v276;
              unint64_t v341 = *(void *)(v678 + 344);
              if (v341 >= *(void *)(v678 + 352))
              {
                v470 = std::vector<AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::LinkInfo::Relocation,std::allocator<AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::LinkInfo::Relocation>>::__push_back_slow_path<AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::LinkInfo::Relocation>(v666, (uint64_t)__src);
                unint64_t v273 = (int8x8_t *)v679;
                int v471 = __src[31];
                *(void *)(v678 + 344) = v470;
                if (v471 < 0) {
                  operator delete(*(void **)&__src[8]);
                }
              }
              else
              {
                *(_DWORD *)unint64_t v341 = 6;
                *(_OWORD *)(v341 + 8) = *(_OWORD *)&__src[8];
                *(void *)(v341 + 24) = *(void *)&__src[24];
                *(_DWORD *)(v341 + 32) = v276;
                *(void *)(v678 + 344) = v341 + 40;
                unint64_t v273 = (int8x8_t *)v679;
              }
              BOOL v274 = v670;
              ++v272;
            }
            else
            {
              BOOL v274 = v670;
              ++v272;
            }
          }
        }
      }
    }
  }
  unsigned __int32 v474 = 0;
  unint64_t v475 = v273 + 88;
  v476 = (int8x8_t *)((char *)v679 + 144);
  while (1)
  {
    if (!*(void *)v476)
    {
      size_t v478 = v475;
      if (v474 >= v273[92].i32[0]) {
        break;
      }
      goto LABEL_1020;
    }
    size_t v478 = *(void *)&v273[19] ? v476 : v475;
    if (v474 >= v478[4].i32[0]) {
      break;
    }
LABEL_1020:
    unint64_t v479 = *(void *)(*(void *)&v478[3] + 8 * v474);
    unint64_t v480 = HIDWORD(v479) & 0xFFFFFF;
    if ((v479 & 0x800000000000000) != 0)
    {
      if (((HIDWORD(v479) >> 28) - 2) < 7 || HIDWORD(v479) >> 28 == 12) {
        goto LABEL_1012;
      }
      v495 = (const char *)(v675 + *(unsigned int *)(v676 + 16 * v480));
      *(_DWORD *)__srCC_SHA256_CTX c = 18;
      size_t v496 = strlen(v495);
      if (v496 > 0x7FFFFFFFFFFFFFF7) {
        abort();
      }
      size_t v497 = v496;
      if (v496 >= 0x17)
      {
        uint64_t v501 = (v496 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v496 | 7) != 0x17) {
          uint64_t v501 = v496 | 7;
        }
        uint64_t v502 = v501 + 1;
        v498 = operator new(v501 + 1);
        *(void *)&__src[24] = v502 | 0x8000000000000000;
        *(void *)&__src[8] = v498;
        *(void *)&__src[16] = v497;
        unint64_t v273 = (int8x8_t *)v679;
      }
      else
      {
        __src[31] = v496;
        v498 = &__src[8];
        if (!v496) {
          goto LABEL_1064;
        }
      }
      memmove(v498, v495, v497);
LABEL_1064:
      v498[v497] = 0;
      v703[0] = v479;
      unint64_t v503 = *(void *)(v678 + 320);
      if (v503 >= *(void *)(v678 + 328))
      {
        unint64_t v504 = std::vector<AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::LinkInfo::Relocation,std::allocator<AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::LinkInfo::Relocation>>::__push_back_slow_path<AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::LinkInfo::Relocation>(v663, (uint64_t)__src);
        v476 = (int8x8_t *)((char *)v679 + 144);
        int v505 = __src[31];
        *(void *)(v678 + 320) = v504;
        if ((v505 & 0x80000000) == 0) {
          goto LABEL_1012;
        }
LABEL_1067:
        operator delete(*(void **)&__src[8]);
        ++v474;
      }
      else
      {
        *(_DWORD *)unint64_t v503 = *(_DWORD *)__src;
        *(_OWORD *)(v503 + 8) = *(_OWORD *)&__src[8];
        *(void *)(v503 + 24) = *(void *)&__src[24];
        *(_DWORD *)(v503 + 32) = v479;
        *(void *)(v678 + 320) = v503 + 40;
        v476 = (int8x8_t *)((char *)v679 + 144);
        ++v474;
      }
    }
    else
    {
      int8x8_t v481 = v273[220];
      if (v481)
      {
        uint8x8_t v482 = (uint8x8_t)vcnt_s8(v481);
        v482.i16[0] = vaddlv_u8(v482);
        if (v482.u32[0] > 1uLL)
        {
          uint64_t v483 = HIDWORD(v479) & 0xFFFFFF;
          if (*(void *)&v481 <= v480) {
            uint64_t v483 = v480 % *(void *)&v481;
          }
        }
        else
        {
          uint64_t v483 = (v481.i32[0] - 1) & v480;
        }
        unint64_t v484 = *(uint64_t **)(*(void *)&v273[219] + 8 * v483);
        if (v484)
        {
          unint64_t v484 = (uint64_t *)*v484;
          if (v484)
          {
            int v485 = HIDWORD(v479) & 0xFFFFFF;
            if (v482.u32[0] < 2uLL)
            {
              uint64_t v486 = *(void *)&v481 - 1;
              while (1)
              {
                uint64_t v488 = v484[1];
                if (v488 == v480)
                {
                  if (*((_DWORD *)v484 + 4) == v485) {
                    goto LABEL_1042;
                  }
                }
                else if ((v488 & v486) != v483)
                {
                  goto LABEL_1041;
                }
                unint64_t v484 = (uint64_t *)*v484;
                if (!v484) {
                  goto LABEL_1042;
                }
              }
            }
            do
            {
              unint64_t v487 = v484[1];
              if (v487 == v480)
              {
                if (*((_DWORD *)v484 + 4) == v485) {
                  break;
                }
              }
              else
              {
                if (v487 >= *(void *)&v481) {
                  v487 %= *(void *)&v481;
                }
                if (v487 != v483) {
                  goto LABEL_1041;
                }
              }
              unint64_t v484 = (uint64_t *)*v484;
            }
            while (v484);
          }
        }
      }
      else
      {
LABEL_1041:
        unint64_t v484 = 0;
      }
LABEL_1042:
      v489 = (uint64_t **)(v484 + 3);
      int v490 = *((char *)v484 + 47);
      if (v490 < 0)
      {
        if (v484[4] != 6) {
          goto LABEL_1012;
        }
        v489 = (uint64_t **)*v489;
      }
      else if (v490 != 6)
      {
        goto LABEL_1012;
      }
      int v491 = *(_DWORD *)v489;
      int v492 = *((unsigned __int16 *)v489 + 2);
      if (v491 == 1163157343 && v492 == 21592)
      {
        *(_DWORD *)__srCC_SHA256_CTX c = 19;
        *(void *)&__src[8] = operator new(0x20uLL);
        *(_OWORD *)&__src[16] = xmmword_242EA7BB0;
        strcpy(*(char **)&__src[8], "(__TEXT append base address)");
        v703[0] = v479;
        unint64_t v494 = *(void *)(v678 + 344);
        if (v494 >= *(void *)(v678 + 352))
        {
          uint64_t v499 = std::vector<AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::LinkInfo::Relocation,std::allocator<AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::LinkInfo::Relocation>>::__push_back_slow_path<AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::LinkInfo::Relocation>(v666, (uint64_t)__src);
          unint64_t v273 = (int8x8_t *)v679;
          int v500 = __src[31];
          *(void *)(v678 + 344) = v499;
          v476 = (int8x8_t *)((char *)v679 + 144);
          if ((v500 & 0x80000000) == 0) {
            goto LABEL_1012;
          }
          goto LABEL_1067;
        }
        *(_DWORD *)unint64_t v494 = 19;
        *(_OWORD *)(v494 + 8) = *(_OWORD *)&__src[8];
        *(void *)(v494 + 24) = *(void *)&__src[24];
        *(_DWORD *)(v494 + 32) = v479;
        *(void *)(v678 + 344) = v494 + 40;
        unint64_t v273 = (int8x8_t *)v679;
        v476 = (int8x8_t *)((char *)v679 + 144);
        ++v474;
      }
      else
      {
LABEL_1012:
        ++v474;
      }
    }
  }
  unint64_t v506 = 0;
  v507 = v273 + 98;
  int v508 = v674;
  while (1)
  {
    if (!*(void *)v508)
    {
      if (v506 >= v273[102].u32[0]) {
        break;
      }
      int8x8_t v509 = v273[29];
      v510 = v507;
      goto LABEL_1078;
    }
    int8x8_t v509 = v273[29];
    v510 = *(void *)&v509 ? v508 : v507;
    if (v506 >= v510[4].u32[0]) {
      break;
    }
LABEL_1078:
    if (v509) {
      BOOL v511 = *v508 == 0;
    }
    else {
      BOOL v511 = 1;
    }
    if (v511) {
      size_t v512 = v507;
    }
    else {
      size_t v512 = v508;
    }
    size_t v513 = (unsigned int *)*v512;
    v514 = (unsigned int *)v512[1];
    if (v513) {
      BOOL v515 = v514 == 0;
    }
    else {
      BOOL v515 = 1;
    }
    if (v515) {
      size_t v516 = 0;
    }
    else {
      size_t v516 = (int *)((char *)v513 + *v513);
    }
    v517 = (unsigned __int16 *)((char *)v516 - *v516);
    if (*v517 >= 5u && (uint64_t v518 = v517[2]) != 0) {
      uint64_t v519 = (int *)((char *)v516 + v518 + *(unsigned int *)((char *)v516 + v518));
    }
    else {
      uint64_t v519 = 0;
    }
    unint64_t v520 = (unsigned __int16 *)((char *)v519 - *v519);
    if (*v520 >= 0x1Fu && (uint64_t v521 = v520[15]) != 0) {
      int v522 = v519 + v521 + *(int *)((char *)v519 + v521);
    }
    else {
      int v522 = 0;
    }
    unint64_t v523 = *(void *)(*(void *)&v510[3] + 8 * v506);
    int v524 = v522 - v513 + 4;
    if ((v523 & 0x800000000000000) != 0)
    {
      uint64_t v528 = *(unsigned int *)(v676 + 16 * (HIDWORD(v523) & 0xFFFFFF));
      uint64_t v529 = (const void *)(v675 + v528);
      if (v523 >> 60 == 12 || v523 >> 60 == 5)
      {
        *(_DWORD *)__srCC_SHA256_CTX c = 20;
        size_t v531 = strlen((const char *)(v675 + v528));
        if (v531 > 0x7FFFFFFFFFFFFFF7) {
          abort();
        }
        size_t v532 = v531;
        if (v531 >= 0x17)
        {
          uint64_t v537 = (v531 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v531 | 7) != 0x17) {
            uint64_t v537 = v531 | 7;
          }
          uint64_t v538 = v537 + 1;
          v533 = operator new(v537 + 1);
          *(void *)&__src[24] = v538 | 0x8000000000000000;
          *(void *)&__src[8] = v533;
          *(void *)&__src[16] = v532;
          unint64_t v273 = (int8x8_t *)v679;
        }
        else
        {
          __src[31] = v531;
          v533 = &__src[8];
          if (!v531) {
            goto LABEL_1119;
          }
        }
        memmove(v533, v529, v532);
LABEL_1119:
        v533[v532] = 0;
        v703[0] = v523 - v524;
        unint64_t v539 = *(void *)(v678 + 320);
        if (v539 >= *(void *)(v678 + 328))
        {
          uint64_t v540 = std::vector<AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::LinkInfo::Relocation,std::allocator<AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::LinkInfo::Relocation>>::__push_back_slow_path<AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::LinkInfo::Relocation>(v663, (uint64_t)__src);
          int v508 = v674;
          int v541 = __src[31];
          *(void *)(v678 + 320) = v540;
          if (v541 < 0) {
            operator delete(*(void **)&__src[8]);
          }
        }
        else
        {
          *(_DWORD *)unint64_t v539 = *(_DWORD *)__src;
          *(_OWORD *)(v539 + 8) = *(_OWORD *)&__src[8];
          *(void *)(v539 + 24) = *(void *)&__src[24];
          *(_DWORD *)(v539 + 32) = v523 - v524;
          *(void *)(v678 + 320) = v539 + 40;
          int v508 = v674;
        }
        char v661 = 1;
        goto LABEL_1124;
      }
      *(_DWORD *)__srCC_SHA256_CTX c = 18;
      size_t v534 = strlen((const char *)(v675 + v528));
      if (v534 > 0x7FFFFFFFFFFFFFF7) {
        abort();
      }
      size_t v535 = v534;
      if (v534 >= 0x17)
      {
        uint64_t v542 = (v534 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v534 | 7) != 0x17) {
          uint64_t v542 = v534 | 7;
        }
        uint64_t v543 = v542 + 1;
        v536 = operator new(v542 + 1);
        *(void *)&__src[24] = v543 | 0x8000000000000000;
        *(void *)&__src[8] = v536;
        *(void *)&__src[16] = v535;
        unint64_t v273 = (int8x8_t *)v679;
      }
      else
      {
        __src[31] = v534;
        v536 = &__src[8];
        if (!v534) {
          goto LABEL_1129;
        }
      }
      memmove(v536, v529, v535);
LABEL_1129:
      v536[v535] = 0;
      v703[0] = v523 - v524;
      unint64_t v544 = *(void *)(v678 + 320);
      if (v544 >= *(void *)(v678 + 328))
      {
        v545 = std::vector<AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::LinkInfo::Relocation,std::allocator<AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::LinkInfo::Relocation>>::__push_back_slow_path<AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::LinkInfo::Relocation>(v663, (uint64_t)__src);
        int v508 = v674;
        int v546 = __src[31];
        *(void *)(v678 + 320) = v545;
        if (v546 < 0) {
          goto LABEL_1132;
        }
LABEL_1124:
        ++v506;
      }
      else
      {
        *(_DWORD *)unint64_t v544 = *(_DWORD *)__src;
        *(_OWORD *)(v544 + 8) = *(_OWORD *)&__src[8];
        *(void *)(v544 + 24) = *(void *)&__src[24];
        *(_DWORD *)(v544 + 32) = v523 - v524;
        *(void *)(v678 + 320) = v544 + 40;
        int v508 = v674;
        ++v506;
      }
    }
    else
    {
      *(_DWORD *)__srCC_SHA256_CTX c = 19;
      *(void *)&__src[8] = operator new(0x20uLL);
      *(_OWORD *)&__src[16] = xmmword_242EA7BB0;
      strcpy(*(char **)&__src[8], "(__TEXT append base address)");
      v703[0] = v523 - v524;
      unint64_t v525 = *(void *)(v678 + 344);
      if (v525 < *(void *)(v678 + 352))
      {
        *(_DWORD *)unint64_t v525 = 19;
        *(_OWORD *)(v525 + 8) = *(_OWORD *)&__src[8];
        *(void *)(v525 + 24) = *(void *)&__src[24];
        *(_DWORD *)(v525 + 32) = v523 - v524;
        *(void *)(v678 + 344) = v525 + 40;
        unint64_t v273 = (int8x8_t *)v679;
        int v508 = v674;
        ++v506;
      }
      else
      {
        v526 = std::vector<AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::LinkInfo::Relocation,std::allocator<AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::LinkInfo::Relocation>>::__push_back_slow_path<AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::LinkInfo::Relocation>(v666, (uint64_t)__src);
        unint64_t v273 = (int8x8_t *)v679;
        int v527 = __src[31];
        *(void *)(v678 + 344) = v526;
        int v508 = v674;
        if ((v527 & 0x80000000) == 0) {
          goto LABEL_1124;
        }
LABEL_1132:
        operator delete(*(void **)&__src[8]);
        ++v506;
      }
    }
  }
  if (v273[63])
  {
    v547 = v273 + 63;
    uint64_t v548 = 63;
    if (!*(void *)&v273[64])
    {
      uint64_t v548 = 133;
      v547 = v273 + 133;
    }
    int8x8_t v549 = v547[1];
    std::string::size_type v550 = (unsigned int *)v273[v548];
    if (v549) {
      BOOL v551 = v550 == 0;
    }
    else {
      BOOL v551 = 1;
    }
    if (!v551)
    {
LABEL_1144:
      uint64_t v552 = (int *)((char *)v550 + *v550);
      uint64_t v553 = (unsigned __int16 *)((char *)v552 - *v552);
      if (*v553 >= 0xBu)
      {
        uint64_t v554 = v553[5];
        if (v554)
        {
          long long v555 = (int *)((char *)v552 + v554 + *(unsigned int *)((char *)v552 + v554));
          v556 = (unsigned __int16 *)((char *)v555 - *v555);
          if (*v556 >= 5u)
          {
            uint64_t v557 = v556[2];
            if (v557)
            {
              v558 = (unsigned int *)((char *)v555 + v557);
              uint64_t v559 = *v558;
              v561 = (unsigned int *)((char *)v558 + v559 + 4);
              uint64_t v560 = *(unsigned int *)((char *)v558 + v559);
              if (v560)
              {
                v562 = &v561[v560];
                while (1)
                {
                  uint64_t v563 = (int *)((char *)v561 + *v561);
                  unsigned int v564 = (unsigned __int16 *)((char *)v563 - *v563);
                  if (*v564 >= 5u && (uint64_t v565 = v564[2]) != 0) {
                    v566 = (char *)v563 + v565 + *(unsigned int *)((char *)v563 + v565);
                  }
                  else {
                    v566 = 0;
                  }
                  uint64_t v567 = v566 + 4;
                  size_t v568 = strlen(v566 + 4);
                  if (v568 > 0x7FFFFFFFFFFFFFF7) {
                    abort();
                  }
                  std::string::size_type v569 = v568;
                  if (v568 >= 0x17) {
                    break;
                  }
                  *((unsigned char *)&__p.__r_.__value_.__s + 23) = v568;
                  v570 = &__p;
                  if (v568) {
                    goto LABEL_1162;
                  }
LABEL_1163:
                  v570->__r_.__value_.__s.__data_[v569] = 0;
                  unsigned int v573 = std::string::append(&__p, "@md");
                  long long v574 = *(_OWORD *)&v573->__r_.__value_.__l.__data_;
                  *(void *)&__src[16] = *((void *)&v573->__r_.__value_.__l + 2);
                  *(_OWORD *)__srCC_SHA256_CTX c = v574;
                  v573->__r_.__value_.__l.__size_ = 0;
                  v573->__r_.__value_.__r.__words[2] = 0;
                  v573->__r_.__value_.__r.__words[0] = 0;
                  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(__p.__r_.__value_.__l.__data_);
                  }
                  if (__src[23] >= 0) {
                    unsigned int v575 = __src;
                  }
                  else {
                    unsigned int v575 = *(const char **)__src;
                  }
                  uint64_t v576 = (int *)AGCDeserializedReply::getBackendMetadataFBPtr(v679, v575);
                  uint64_t v577 = (unsigned __int16 *)((char *)v576 - *v576);
                  unsigned int v578 = *v577;
                  if (v578 >= 0xD)
                  {
                    if (v577[6])
                    {
                      unsigned int v579 = (int *)((char *)v576 + v577[6] + *(unsigned int *)((char *)v576 + v577[6]));
                      uint64_t v580 = (int *)v577[2];
                      if (!v577[2]) {
                        goto LABEL_1175;
                      }
                    }
                    else
                    {
                      unsigned int v579 = 0;
                      uint64_t v580 = (int *)v577[2];
                      if (!v577[2]) {
                        goto LABEL_1175;
                      }
                    }
LABEL_1174:
                    uint64_t v580 = (int *)((char *)v580 + (void)v576 + *(unsigned int *)((char *)v580 + (void)v576));
                    goto LABEL_1175;
                  }
                  unsigned int v579 = 0;
                  uint64_t v580 = 0;
                  if (v578 >= 5)
                  {
                    uint64_t v580 = (int *)v577[2];
                    if (v577[2]) {
                      goto LABEL_1174;
                    }
                  }
LABEL_1175:
                  v581 = (unsigned __int16 *)((char *)v579 - *v579);
                  if (*v581 >= 5u && (uint64_t v582 = v581[2]) != 0)
                  {
                    unsigned int v583 = *(int *)((char *)v579 + v582);
                    unsigned int v584 = *(_DWORD *)(v678 + 48);
                    if (v584 < v583) {
                      goto LABEL_1181;
                    }
                  }
                  else
                  {
                    unsigned int v584 = *(_DWORD *)(v678 + 48);
                  }
                  unsigned int v583 = v584;
LABEL_1181:
                  *(_DWORD *)(v678 + 48) = v583;
                  uint64_t v585 = (unsigned __int16 *)((char *)v580 - *v580);
                  if (*v585 >= 0x51u && (uint64_t v586 = v585[40]) != 0)
                  {
                    unsigned int v587 = *(int *)((char *)v580 + v586);
                    unsigned int v588 = *(_DWORD *)(v678 + 52);
                    if (v588 < v587) {
                      goto LABEL_1187;
                    }
                  }
                  else
                  {
                    unsigned int v588 = *(_DWORD *)(v678 + 52);
                  }
                  unsigned int v587 = v588;
LABEL_1187:
                  *(_DWORD *)(v678 + 52) = v587;
                  uint64_t v589 = (unsigned __int16 *)((char *)v579 - *v579);
                  if (*v589 >= 7u && (uint64_t v590 = v589[3]) != 0)
                  {
                    unsigned int v591 = *(int *)((char *)v579 + v590);
                    unsigned int v592 = *(_DWORD *)(v678 + 56);
                    if (v592 < v591) {
                      goto LABEL_1193;
                    }
                  }
                  else
                  {
                    unsigned int v592 = *(_DWORD *)(v678 + 56);
                  }
                  unsigned int v591 = v592;
LABEL_1193:
                  *(_DWORD *)(v678 + 56) = v591;
                  v593 = (unsigned __int16 *)((char *)v579 - *v579);
                  unsigned int v594 = *v593;
                  if (v594 < 0xB) {
                    goto LABEL_1208;
                  }
                  if (v593[5] && *((unsigned char *)v579 + v593[5])) {
                    goto LABEL_1199;
                  }
                  if (v594 < 0xD) {
                    goto LABEL_1208;
                  }
                  if (v593[6] && *((unsigned char *)v579 + v593[6]))
                  {
LABEL_1199:
                    LOBYTE(v595) = 1;
                  }
                  else
                  {
                    if (v594 < 0xF)
                    {
LABEL_1208:
                      LOBYTE(v596) = 0;
                      goto LABEL_1209;
                    }
                    uint64_t v595 = v593[7];
                    if (v593[7]) {
                      LOBYTE(v595) = *((unsigned char *)v579 + v595) != 0;
                    }
                  }
                  *(unsigned char *)(v678 + 172) |= v595;
                  if (v594 < 0x29) {
                    goto LABEL_1208;
                  }
                  uint64_t v596 = v593[20];
                  if (v593[20]) {
                    LOBYTE(v596) = *((unsigned char *)v579 + v596) != 0;
                  }
LABEL_1209:
                  *(unsigned char *)(v678 + 175) |= v596;
                  unint64_t v597 = (unsigned __int16 *)((char *)v580 - *v580);
                  unsigned int v598 = *v597;
                  if (v598 < 0x3F)
                  {
                    LOBYTE(v599) = 0;
                  }
                  else
                  {
                    uint64_t v599 = v597[31];
                    if (v597[31])
                    {
                      uint64_t v600 = (unsigned int *)((char *)v580 + v599 + *(unsigned int *)((char *)v580 + v599));
                      uint64_t v599 = *v600;
                      if (v599)
                      {
                        uint64_t v601 = v600 + 1;
                        while (1)
                        {
                          unsigned int v603 = *v601++;
                          char v602 = v603;
                          if (v603 < 0x36 && ((0x3F000000000777uLL >> v602) & 1) != 0) {
                            break;
                          }
                          if (!--v599) {
                            goto LABEL_1218;
                          }
                        }
                        LOBYTE(v599) = 1;
                      }
                    }
                  }
LABEL_1218:
                  *(unsigned char *)(v678 + 174) |= v599;
                  v605 = v594 >= 0xD && (uint64_t v604 = v593[6]) != 0 && *((unsigned char *)v579 + v604) != 0;
                  *(unsigned char *)(v678 + 177) |= v605;
                  if (v598 < 0x67)
                  {
LABEL_1235:
                    uint64_t v608 = 0;
                    goto LABEL_1236;
                  }
                  uint64_t v606 = v597[51];
                  if (v597[51]) {
                    uint64_t v606 = *(void *)((char *)v580 + v606);
                  }
                  *(void *)(v678 + 488) |= v606;
                  if (v598 < 0x6F)
                  {
                    if (v598 < 0x69) {
                      goto LABEL_1235;
                    }
                  }
                  else
                  {
                    uint64_t v607 = v597[55];
                    if (v597[55]) {
                      uint64_t v607 = *(void *)((char *)v580 + v607);
                    }
                    *(void *)(v678 + 520) |= v607;
                  }
                  uint64_t v608 = v597[52];
                  if (v597[52]) {
                    uint64_t v608 = *(void *)((char *)v580 + v608);
                  }
                  if (v598 >= 0x6B)
                  {
                    uint64_t v609 = v597[53];
                    if (v597[53]) {
                      uint64_t v609 = *(void *)((char *)v580 + v609);
                    }
                    goto LABEL_1237;
                  }
LABEL_1236:
                  uint64_t v609 = 0;
LABEL_1237:
                  uint64_t v610 = *(void *)(v678 + 504) | v609;
                  *(void *)(v678 + 496) |= v608;
                  *(void *)(v678 + 504) = v610;
                  if (v598 >= 0x6D && v597[54]) {
                    uint64_t v611 = *(void *)((char *)v580 + v597[54]);
                  }
                  else {
                    uint64_t v611 = 0;
                  }
                  *(void *)(v678 + 512) |= v611;
                  if ((__src[23] & 0x80000000) != 0) {
                    operator delete(*(void **)__src);
                  }
                  if (++v561 == v562) {
                    goto LABEL_1243;
                  }
                }
                uint64_t v571 = (v568 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v568 | 7) != 0x17) {
                  uint64_t v571 = v568 | 7;
                }
                uint64_t v572 = v571 + 1;
                v570 = (std::string *)operator new(v571 + 1);
                __p.__r_.__value_.__l.__size_ = v569;
                __p.__r_.__value_.__r.__words[2] = v572 | 0x8000000000000000;
                __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v570;
LABEL_1162:
                memmove(v570, v567, v569);
                goto LABEL_1163;
              }
            }
          }
        }
      }
    }
  }
  else if (v273[134])
  {
    std::string::size_type v550 = (unsigned int *)*((void *)v679 + 133);
    if (v550) {
      goto LABEL_1144;
    }
  }
LABEL_1243:
  uint64_t v612 = (unsigned __int16 *)((char *)v652 - *v652);
  if (*v612 < 0xBu || (uint64_t v613 = v612[5]) == 0)
  {
    std::string::size_type v614 = 0;
    if (a5) {
      goto LABEL_1249;
    }
LABEL_1246:
    if ((v661 & (v614 != 0)) == 0) {
      return;
    }
LABEL_1250:
    std::vector<std::shared_ptr<AGX::HAL200::Sampler>>::reserve(v678 + 360, *v614);
    if (!*v614) {
      return;
    }
    uint64_t v615 = 0;
    unint64_t v616 = 0;
    while (1)
    {
      uint64_t v617 = &v614[v615];
      uint64_t v618 = v614[v615 + 1];
      int v619 = (char *)&v614[v615] + v618 - *(int *)((char *)&v614[v615 + 1] + v618);
      if (*((unsigned __int16 *)v619 + 2) >= 0x1Du && (uint64_t v620 = *((unsigned __int16 *)v619 + 16)) != 0) {
        uint64_t v621 = *(void *)((char *)&v614[v615 + 1] + v618 + v620);
      }
      else {
        uint64_t v621 = 0;
      }
      snprintf(__str, 0x40uLL, "_agx_const_ss.%016llx", v621);
      uint64_t v622 = v617[1];
      uint64_t v623 = v622 - *(int *)((char *)v617 + v622 + 4);
      unsigned int v624 = *(unsigned __int16 *)((char *)v617 + v623 + 4);
      if (v624 < 0x1D) {
        break;
      }
      if (*(_WORD *)((char *)&v614[v615 + 8] + v623))
      {
        uint64_t v625 = *(void *)((char *)&v614[v615 + 1] + v622 + *(unsigned __int16 *)((char *)&v614[v615 + 8] + v623));
        if (v624 < 0x21) {
          goto LABEL_1264;
        }
      }
      else
      {
        uint64_t v625 = 0;
        if (v624 < 0x21) {
          goto LABEL_1264;
        }
      }
      uint64_t v646 = *(unsigned __int16 *)((char *)&v614[v615 + 9] + v623);
      if (!v646) {
        goto LABEL_1264;
      }
      uint64_t v626 = *(void *)((char *)&v614[v615 + 1] + v622 + v646);
LABEL_1265:
      snprintf(__src, 0x80uLL, "agc.const_sampler_heap_index_%016llx_%016llx", v625, v626);
      AGX::SamplerDescriptor::SamplerDescriptor((uint64_t)__dst, (_DWORD *)((char *)&v614[v615 + 1] + v617[1]));
      AGX::Device<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::allocateBindlessConstantSampler((uint64_t *)&v690, a3, (uint64_t)__dst);
      v627 = *(__n128 **)(v678 + 368);
      if ((unint64_t)v627 >= *(void *)(v678 + 376))
      {
        BOOL v629 = std::vector<std::shared_ptr<AGX::HAL200::DynamicLibrary>>::__emplace_back_slow_path<std::shared_ptr<AGX::HAL200::DynamicLibrary>&>(v678 + 360, v690);
      }
      else
      {
        v627->n128_u64[0] = v690.n128_u64[0];
        unint64_t v628 = v690.n128_u64[1];
        v627->n128_u64[1] = v690.n128_u64[1];
        if (v628) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v628 + 8), 1uLL, memory_order_relaxed);
        }
        BOOL v629 = v627 + 1;
      }
      *(void *)(v678 + 368) = v629;
      uint64_t v630 = *(unsigned int *)(v690.n128_u64[0] + 96);
      size_t v631 = strlen(__str);
      if (v631 > 0x7FFFFFFFFFFFFFF7) {
        abort();
      }
      std::string::size_type v632 = v631;
      if (v631 >= 0x17)
      {
        uint64_t v634 = (v631 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v631 | 7) != 0x17) {
          uint64_t v634 = v631 | 7;
        }
        uint64_t v635 = v634 + 1;
        v633 = (std::string *)operator new(v634 + 1);
        v680.__r_.__value_.__l.__size_ = v632;
        v680.__r_.__value_.__r.__words[2] = v635 | 0x8000000000000000;
        v680.__r_.__value_.__r.__words[0] = (std::string::size_type)v633;
LABEL_1277:
        memcpy(v633, __str, v632);
        goto LABEL_1278;
      }
      *((unsigned char *)&v680.__r_.__value_.__s + 23) = v631;
      v633 = &v680;
      if (v631) {
        goto LABEL_1277;
      }
LABEL_1278:
      v633->__r_.__value_.__s.__data_[v632] = 0;
      uint64_t v636 = *(void *)(v678 + 32);
      int v637 = SHIBYTE(v680.__r_.__value_.__r.__words[2]);
      if (SHIBYTE(v680.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&__p, v680.__r_.__value_.__l.__data_, v680.__r_.__value_.__l.__size_);
      }
      else {
        std::string __p = v680;
      }
      v683[0] = 0;
      *(void *)((char *)v683 + 5) = 0;
      uint64_t v682 = v630;
      uint64_t v684 = v636;
      int v685 = 2;
      long long v686 = 0u;
      long long v687 = 0u;
      long long v688 = 0u;
      int v689 = 0;
      std::__hash_table<std::__hash_value_type<std::string,AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::ExternalSymbolInfo>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::ExternalSymbolInfo>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::ExternalSymbolInfo>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::ExternalSymbolInfo>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::ExternalSymbolInfo>>((uint64_t)v677, (uint64_t)&__p, (uint64_t)&__p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(__p.__r_.__value_.__l.__data_);
        if ((v637 & 0x80000000) == 0) {
          goto LABEL_1283;
        }
      }
      else if ((v637 & 0x80000000) == 0)
      {
        goto LABEL_1283;
      }
      operator delete(v680.__r_.__value_.__l.__data_);
LABEL_1283:
      size_t v638 = strlen(__src);
      if (v638 > 0x7FFFFFFFFFFFFFF7) {
        abort();
      }
      std::string::size_type v639 = v638;
      if (v638 >= 0x17)
      {
        uint64_t v641 = (v638 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v638 | 7) != 0x17) {
          uint64_t v641 = v638 | 7;
        }
        uint64_t v642 = v641 + 1;
        v640 = (std::string *)operator new(v641 + 1);
        v680.__r_.__value_.__l.__size_ = v639;
        v680.__r_.__value_.__r.__words[2] = v642 | 0x8000000000000000;
        v680.__r_.__value_.__r.__words[0] = (std::string::size_type)v640;
LABEL_1290:
        memcpy(v640, __src, v639);
        goto LABEL_1291;
      }
      *((unsigned char *)&v680.__r_.__value_.__s + 23) = v638;
      v640 = &v680;
      if (v638) {
        goto LABEL_1290;
      }
LABEL_1291:
      v640->__r_.__value_.__s.__data_[v639] = 0;
      uint64_t v643 = *(void *)(v678 + 32);
      int v644 = SHIBYTE(v680.__r_.__value_.__r.__words[2]);
      if (SHIBYTE(v680.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&__p, v680.__r_.__value_.__l.__data_, v680.__r_.__value_.__l.__size_);
      }
      else {
        std::string __p = v680;
      }
      v683[0] = 0;
      *(void *)((char *)v683 + 5) = 0;
      uint64_t v682 = v630;
      uint64_t v684 = v643;
      int v685 = 2;
      long long v686 = 0u;
      long long v687 = 0u;
      long long v688 = 0u;
      int v689 = 0;
      std::__hash_table<std::__hash_value_type<std::string,AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::ExternalSymbolInfo>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::ExternalSymbolInfo>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::ExternalSymbolInfo>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::ExternalSymbolInfo>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::ExternalSymbolInfo>>((uint64_t)v677, (uint64_t)&__p, (uint64_t)&__p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(__p.__r_.__value_.__l.__data_);
        if ((v644 & 0x80000000) == 0)
        {
LABEL_1298:
          int v645 = (std::__shared_weak_count *)v690.n128_u64[1];
          if (v690.n128_u64[1]) {
            goto LABEL_1302;
          }
          goto LABEL_1252;
        }
      }
      else if ((v644 & 0x80000000) == 0)
      {
        goto LABEL_1298;
      }
      operator delete(v680.__r_.__value_.__l.__data_);
      int v645 = (std::__shared_weak_count *)v690.n128_u64[1];
      if (v690.n128_u64[1])
      {
LABEL_1302:
        if (!atomic_fetch_add(&v645->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v645->__on_zero_shared)(v645);
          std::__shared_weak_count::__release_weak(v645);
        }
      }
LABEL_1252:
      if (v693 < 0) {
        operator delete(v692);
      }
      ++v616;
      ++v615;
      if (v616 >= *v614) {
        return;
      }
    }
    uint64_t v625 = 0;
LABEL_1264:
    uint64_t v626 = 0;
    goto LABEL_1265;
  }
  std::string::size_type v614 = (int *)((char *)v652 + v613 + *(unsigned int *)((char *)v652 + v613));
  if ((a5 & 1) == 0) {
    goto LABEL_1246;
  }
LABEL_1249:
  if (v614) {
    goto LABEL_1250;
  }
}

void sub_242A621E4(_Unwind_Exception *a1)
{
  if (SLOBYTE(STACK[0x28F]) < 0)
  {
    operator delete((void *)STACK[0x278]);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::LinkInfo::initialize<AGCCodeTranslatorVisibleFunctionTypesG10,&(AGCCodeTranslatorG10::GetCompileReply(void const*))>(AGCDeserializedReply const&,AGX::HAL200::Device &,char const*,BOOL)::{lambda(AGCCodeTranslatorVisibleFunctionTypesG10,std::string,std::function<void ()(AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::ExternalSymbolInfo &,unsigned int)>)#1}::operator()<AGX::ArgumentMask<64ul>>(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2)
  {
    unint64_t v6 = a2;
    uint64_t v8 = a1 + 232;
    while (1)
    {
      unsigned int v9 = __clz(__rbit64(v6));
      std::to_string(&__p, v9);
      int v10 = *(char *)(a3 + 23);
      if (v10 >= 0) {
        unint64_t v11 = (const std::string::value_type *)a3;
      }
      else {
        unint64_t v11 = *(const std::string::value_type **)a3;
      }
      if (v10 >= 0) {
        std::string::size_type v12 = *(unsigned __int8 *)(a3 + 23);
      }
      else {
        std::string::size_type v12 = *(void *)(a3 + 8);
      }
      uint64_t v13 = std::string::insert(&__p, 0, v11, v12);
      std::string v26 = *v13;
      v13->__r_.__value_.__l.__size_ = 0;
      v13->__r_.__value_.__r.__words[2] = 0;
      v13->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      uint64_t v14 = *(void *)(a1 + 32);
      int v15 = SHIBYTE(v26.__r_.__value_.__r.__words[2]);
      if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&__p, v26.__r_.__value_.__l.__data_, v26.__r_.__value_.__l.__size_);
      }
      else {
        std::string __p = v26;
      }
      uint64_t v19 = 0;
      v20[0] = 0;
      *(void *)((char *)v20 + 5) = 0;
      v20[2] = v14;
      int v21 = 5;
      long long v22 = 0u;
      long long v23 = 0u;
      long long v24 = 0u;
      int v25 = 0;
      std::__hash_table<std::__hash_value_type<std::string,AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::ExternalSymbolInfo>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::ExternalSymbolInfo>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::ExternalSymbolInfo>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::ExternalSymbolInfo>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::ExternalSymbolInfo>>(v8, (uint64_t)&__p, (uint64_t)&__p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      unint64_t v16 = std::__hash_table<std::__hash_value_type<std::string,AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::ExternalSymbolInfo>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::ExternalSymbolInfo>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::ExternalSymbolInfo>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::ExternalSymbolInfo>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v8, (uint64_t)&v26, (uint64_t)&v26);
      LODWORD(__p.__r_.__value_.__l.__data_) = v9;
      uint64_t v17 = *(void *)(a4 + 24);
      if (!v17) {
        break;
      }
      (*(void (**)(uint64_t, char *, std::string *))(*(void *)v17 + 48))(v17, v16 + 40, &__p);
      if (v15 < 0) {
        operator delete(v26.__r_.__value_.__l.__data_);
      }
      v6 &= ~(1 << v9);
      if (!v6) {
        return;
      }
    }
    std::__throw_bad_function_call[abi:nn180100]();
    __break(1u);
  }
}

void sub_242A626B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p)
{
}

void std::__function::__func<BOOL AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::LinkInfo::initialize<AGCCodeTranslatorVisibleFunctionTypesG10,&(AGCCodeTranslatorG10::GetCompileReply(void const*))>(AGCDeserializedReply const&,AGX::HAL200::Device &,char const*,BOOL)::{lambda(AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::ExternalSymbolInfo &,unsigned int)#4},std::allocator<BOOL AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::LinkInfo::initialize<AGCCodeTranslatorVisibleFunctionTypesG10,&(AGCCodeTranslatorG10::GetCompileReply(void const*))>(AGCDeserializedReply const&,AGX::HAL200::Device &,char const*,BOOL)::{lambda(AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::ExternalSymbolInfo &,unsigned int)#4}>,void ()(AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::ExternalSymbolInfo &,unsigned int)>::operator()(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  *(void *)(a2 + 80) |= 1 << *a3;
}

void std::__function::__func<BOOL AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::LinkInfo::initialize<AGCCodeTranslatorVisibleFunctionTypesG10,&(AGCCodeTranslatorG10::GetCompileReply(void const*))>(AGCDeserializedReply const&,AGX::HAL200::Device &,char const*,BOOL)::{lambda(AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::ExternalSymbolInfo &,unsigned int)#4},std::allocator<BOOL AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::LinkInfo::initialize<AGCCodeTranslatorVisibleFunctionTypesG10,&(AGCCodeTranslatorG10::GetCompileReply(void const*))>(AGCDeserializedReply const&,AGX::HAL200::Device &,char const*,BOOL)::{lambda(AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::ExternalSymbolInfo &,unsigned int)#4}>,void ()(AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::ExternalSymbolInfo &,unsigned int)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26F8526F0;
}

void *std::__function::__func<BOOL AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::LinkInfo::initialize<AGCCodeTranslatorVisibleFunctionTypesG10,&(AGCCodeTranslatorG10::GetCompileReply(void const*))>(AGCDeserializedReply const&,AGX::HAL200::Device &,char const*,BOOL)::{lambda(AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::ExternalSymbolInfo &,unsigned int)#4},std::allocator<BOOL AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::LinkInfo::initialize<AGCCodeTranslatorVisibleFunctionTypesG10,&(AGCCodeTranslatorG10::GetCompileReply(void const*))>(AGCDeserializedReply const&,AGX::HAL200::Device &,char const*,BOOL)::{lambda(AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::ExternalSymbolInfo &,unsigned int)#4}>,void ()(AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::ExternalSymbolInfo &,unsigned int)>::__clone()
{
  double result = operator new(0x10uLL);
  void *result = &unk_26F8526F0;
  return result;
}

void std::__function::__func<BOOL AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::LinkInfo::initialize<AGCCodeTranslatorVisibleFunctionTypesG10,&(AGCCodeTranslatorG10::GetCompileReply(void const*))>(AGCDeserializedReply const&,AGX::HAL200::Device &,char const*,BOOL)::{lambda(AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::ExternalSymbolInfo &,unsigned int)#4},std::allocator<BOOL AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::LinkInfo::initialize<AGCCodeTranslatorVisibleFunctionTypesG10,&(AGCCodeTranslatorG10::GetCompileReply(void const*))>(AGCDeserializedReply const&,AGX::HAL200::Device &,char const*,BOOL)::{lambda(AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::ExternalSymbolInfo &,unsigned int)#4}>,void ()(AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::ExternalSymbolInfo &,unsigned int)>::~__func()
{
}

void std::__function::__func<BOOL AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::LinkInfo::initialize<AGCCodeTranslatorVisibleFunctionTypesG10,&(AGCCodeTranslatorG10::GetCompileReply(void const*))>(AGCDeserializedReply const&,AGX::HAL200::Device &,char const*,BOOL)::{lambda(AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::ExternalSymbolInfo &,unsigned int)#3},std::allocator<BOOL AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::LinkInfo::initialize<AGCCodeTranslatorVisibleFunctionTypesG10,&(AGCCodeTranslatorG10::GetCompileReply(void const*))>(AGCDeserializedReply const&,AGX::HAL200::Device &,char const*,BOOL)::{lambda(AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::ExternalSymbolInfo &,unsigned int)#3}>,void ()(AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::ExternalSymbolInfo &,unsigned int)>::operator()(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  *(void *)(a2 + 72) |= 1 << *a3;
}

void std::__function::__func<BOOL AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::LinkInfo::initialize<AGCCodeTranslatorVisibleFunctionTypesG10,&(AGCCodeTranslatorG10::GetCompileReply(void const*))>(AGCDeserializedReply const&,AGX::HAL200::Device &,char const*,BOOL)::{lambda(AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::ExternalSymbolInfo &,unsigned int)#3},std::allocator<BOOL AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::LinkInfo::initialize<AGCCodeTranslatorVisibleFunctionTypesG10,&(AGCCodeTranslatorG10::GetCompileReply(void const*))>(AGCDeserializedReply const&,AGX::HAL200::Device &,char const*,BOOL)::{lambda(AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::ExternalSymbolInfo &,unsigned int)#3}>,void ()(AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::ExternalSymbolInfo &,unsigned int)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26F8526A8;
}

void *std::__function::__func<BOOL AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::LinkInfo::initialize<AGCCodeTranslatorVisibleFunctionTypesG10,&(AGCCodeTranslatorG10::GetCompileReply(void const*))>(AGCDeserializedReply const&,AGX::HAL200::Device &,char const*,BOOL)::{lambda(AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::ExternalSymbolInfo &,unsigned int)#3},std::allocator<BOOL AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::LinkInfo::initialize<AGCCodeTranslatorVisibleFunctionTypesG10,&(AGCCodeTranslatorG10::GetCompileReply(void const*))>(AGCDeserializedReply const&,AGX::HAL200::Device &,char const*,BOOL)::{lambda(AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::ExternalSymbolInfo &,unsigned int)#3}>,void ()(AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::ExternalSymbolInfo &,unsigned int)>::__clone()
{
  double result = operator new(0x10uLL);
  void *result = &unk_26F8526A8;
  return result;
}

void std::__function::__func<BOOL AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::LinkInfo::initialize<AGCCodeTranslatorVisibleFunctionTypesG10,&(AGCCodeTranslatorG10::GetCompileReply(void const*))>(AGCDeserializedReply const&,AGX::HAL200::Device &,char const*,BOOL)::{lambda(AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::ExternalSymbolInfo &,unsigned int)#3},std::allocator<BOOL AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::LinkInfo::initialize<AGCCodeTranslatorVisibleFunctionTypesG10,&(AGCCodeTranslatorG10::GetCompileReply(void const*))>(AGCDeserializedReply const&,AGX::HAL200::Device &,char const*,BOOL)::{lambda(AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::ExternalSymbolInfo &,unsigned int)#3}>,void ()(AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::ExternalSymbolInfo &,unsigned int)>::~__func()
{
}

void std::__function::__func<BOOL AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::LinkInfo::initialize<AGCCodeTranslatorVisibleFunctionTypesG10,&(AGCCodeTranslatorG10::GetCompileReply(void const*))>(AGCDeserializedReply const&,AGX::HAL200::Device &,char const*,BOOL)::{lambda(AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::ExternalSymbolInfo &,unsigned int)#2},std::allocator<BOOL AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::LinkInfo::initialize<AGCCodeTranslatorVisibleFunctionTypesG10,&(AGCCodeTranslatorG10::GetCompileReply(void const*))>(AGCDeserializedReply const&,AGX::HAL200::Device &,char const*,BOOL)::{lambda(AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::ExternalSymbolInfo &,unsigned int)#2}>,void ()(AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::ExternalSymbolInfo &,unsigned int)>::operator()(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  *(void *)(a2 + 8 * (*a3 > 0x3Fu) + 56) |= 1 << *a3;
}

void std::__function::__func<BOOL AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::LinkInfo::initialize<AGCCodeTranslatorVisibleFunctionTypesG10,&(AGCCodeTranslatorG10::GetCompileReply(void const*))>(AGCDeserializedReply const&,AGX::HAL200::Device &,char const*,BOOL)::{lambda(AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::ExternalSymbolInfo &,unsigned int)#2},std::allocator<BOOL AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::LinkInfo::initialize<AGCCodeTranslatorVisibleFunctionTypesG10,&(AGCCodeTranslatorG10::GetCompileReply(void const*))>(AGCDeserializedReply const&,AGX::HAL200::Device &,char const*,BOOL)::{lambda(AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::ExternalSymbolInfo &,unsigned int)#2}>,void ()(AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::ExternalSymbolInfo &,unsigned int)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26F852660;
}

void *std::__function::__func<BOOL AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::LinkInfo::initialize<AGCCodeTranslatorVisibleFunctionTypesG10,&(AGCCodeTranslatorG10::GetCompileReply(void const*))>(AGCDeserializedReply const&,AGX::HAL200::Device &,char const*,BOOL)::{lambda(AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::ExternalSymbolInfo &,unsigned int)#2},std::allocator<BOOL AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::LinkInfo::initialize<AGCCodeTranslatorVisibleFunctionTypesG10,&(AGCCodeTranslatorG10::GetCompileReply(void const*))>(AGCDeserializedReply const&,AGX::HAL200::Device &,char const*,BOOL)::{lambda(AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::ExternalSymbolInfo &,unsigned int)#2}>,void ()(AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::ExternalSymbolInfo &,unsigned int)>::__clone()
{
  double result = operator new(0x10uLL);
  void *result = &unk_26F852660;
  return result;
}

void std::__function::__func<BOOL AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::LinkInfo::initialize<AGCCodeTranslatorVisibleFunctionTypesG10,&(AGCCodeTranslatorG10::GetCompileReply(void const*))>(AGCDeserializedReply const&,AGX::HAL200::Device &,char const*,BOOL)::{lambda(AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::ExternalSymbolInfo &,unsigned int)#2},std::allocator<BOOL AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::LinkInfo::initialize<AGCCodeTranslatorVisibleFunctionTypesG10,&(AGCCodeTranslatorG10::GetCompileReply(void const*))>(AGCDeserializedReply const&,AGX::HAL200::Device &,char const*,BOOL)::{lambda(AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::ExternalSymbolInfo &,unsigned int)#2}>,void ()(AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::ExternalSymbolInfo &,unsigned int)>::~__func()
{
}

void std::__function::__func<BOOL AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::LinkInfo::initialize<AGCCodeTranslatorVisibleFunctionTypesG10,&(AGCCodeTranslatorG10::GetCompileReply(void const*))>(AGCDeserializedReply const&,AGX::HAL200::Device &,char const*,BOOL)::{lambda(AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::ExternalSymbolInfo &,unsigned int)#1},std::allocator<BOOL AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::LinkInfo::initialize<AGCCodeTranslatorVisibleFunctionTypesG10,&(AGCCodeTranslatorG10::GetCompileReply(void const*))>(AGCDeserializedReply const&,AGX::HAL200::Device &,char const*,BOOL)::{lambda(AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::ExternalSymbolInfo &,unsigned int)#1}>,void ()(AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::ExternalSymbolInfo &,unsigned int)>::operator()(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  *(void *)(a2 + 48) |= 1 << *a3;
}

void std::__function::__func<BOOL AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::LinkInfo::initialize<AGCCodeTranslatorVisibleFunctionTypesG10,&(AGCCodeTranslatorG10::GetCompileReply(void const*))>(AGCDeserializedReply const&,AGX::HAL200::Device &,char const*,BOOL)::{lambda(AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::ExternalSymbolInfo &,unsigned int)#1},std::allocator<BOOL AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::LinkInfo::initialize<AGCCodeTranslatorVisibleFunctionTypesG10,&(AGCCodeTranslatorG10::GetCompileReply(void const*))>(AGCDeserializedReply const&,AGX::HAL200::Device &,char const*,BOOL)::{lambda(AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::ExternalSymbolInfo &,unsigned int)#1}>,void ()(AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::ExternalSymbolInfo &,unsigned int)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26F852618;
}

void *std::__function::__func<BOOL AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::LinkInfo::initialize<AGCCodeTranslatorVisibleFunctionTypesG10,&(AGCCodeTranslatorG10::GetCompileReply(void const*))>(AGCDeserializedReply const&,AGX::HAL200::Device &,char const*,BOOL)::{lambda(AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::ExternalSymbolInfo &,unsigned int)#1},std::allocator<BOOL AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::LinkInfo::initialize<AGCCodeTranslatorVisibleFunctionTypesG10,&(AGCCodeTranslatorG10::GetCompileReply(void const*))>(AGCDeserializedReply const&,AGX::HAL200::Device &,char const*,BOOL)::{lambda(AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::ExternalSymbolInfo &,unsigned int)#1}>,void ()(AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::ExternalSymbolInfo &,unsigned int)>::__clone()
{
  double result = operator new(0x10uLL);
  void *result = &unk_26F852618;
  return result;
}

void std::__function::__func<BOOL AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::LinkInfo::initialize<AGCCodeTranslatorVisibleFunctionTypesG10,&(AGCCodeTranslatorG10::GetCompileReply(void const*))>(AGCDeserializedReply const&,AGX::HAL200::Device &,char const*,BOOL)::{lambda(AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::ExternalSymbolInfo &,unsigned int)#1},std::allocator<BOOL AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::LinkInfo::initialize<AGCCodeTranslatorVisibleFunctionTypesG10,&(AGCCodeTranslatorG10::GetCompileReply(void const*))>(AGCDeserializedReply const&,AGX::HAL200::Device &,char const*,BOOL)::{lambda(AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::ExternalSymbolInfo &,unsigned int)#1}>,void ()(AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::ExternalSymbolInfo &,unsigned int)>::~__func()
{
}

void AGX::ComputeContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,AGX::HAL200::EncoderComputeServiceClasses>::restartComputePass(uint64_t a1, uint64_t a2)
{
  int v4 = *(unsigned __int8 *)(a1 + 17272);
  if (*(unsigned char *)(a1 + 17272))
  {
    *(_DWORD *)(a1 + 17336) = *(_DWORD *)(a1 + 17336) + ((*(void *)(a1 + 17312) - *(void *)(a1 + 17304)) >> 6) - 1;
    AGX::ComputeContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,AGX::HAL200::EncoderComputeServiceClasses>::endVirtualSubstream(a1);
  }
  if (((1 << a2) & 0x3B39E0480) != 0 && !*(void *)(a1 + 16 + 32 * a2 + 48)) {
    AGX::DataBufferAllocator<34ul>::initializeOnDemandDataBufferSlow(a1 + 16);
  }
  IOGPUResourceListAddResource();
  AGX::ComputeContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,AGX::HAL200::EncoderComputeServiceClasses>::endComputePass((void *)a1, 1, a2);
  AGX::ComputeContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,AGX::HAL200::EncoderComputeServiceClasses>::beginComputePass(a1, 1, a2);
  IOGPUResourceListAddResource();
  if (v4) {
    AGX::ComputeContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,AGX::HAL200::EncoderComputeServiceClasses>::beginVirtualSubstream(a1);
  }
}

void AGX::ComputeContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,AGX::HAL200::EncoderComputeServiceClasses>::endVirtualSubstream(uint64_t a1)
{
  v73[1] = *MEMORY[0x263EF8340];
  uint64_t v2 = a1 + 16688;
  uint64_t v3 = *(void *)(a1 + 784);
  uint64_t v4 = *(void *)(a1 + 768);
  if (*(_DWORD *)(a1 + 17340)) {
    goto LABEL_63;
  }
  uint64_t v63 = *(void *)(a1 + 768);
  uint64_t v64 = *(void *)(a1 + 784);
  int v65 = 0;
  int v66 = 0;
  int v5 = 0;
  unsigned int v6 = 0;
  __int16 v72 = 0;
  v73[0] = 0;
  do
  {
    __int16 v71 = 0;
    uint64_t v10 = *(void *)(a1 + 17304);
    if (*(void *)(a1 + 17312) != v10)
    {
      char v67 = 0;
      unsigned int v68 = v6;
      unint64_t v11 = 0;
      int v69 = v5;
      while (1)
      {
        uint64_t v12 = v10 + (v11 << 6);
        uint64_t v13 = *(void *)(v12 + 40);
        uint64_t v14 = (uint64_t *)(v12 + 48);
        uint64_t v15 = *(void *)(v12 + 48);
        if (v13 == v15) {
          goto LABEL_29;
        }
        uint64_t v16 = *(void *)(v12 + 48);
        while (1)
        {
          unsigned int v18 = *(_DWORD *)(v16 - 4);
          v16 -= 4;
          uint64_t v17 = v18;
          uint64_t v19 = *(void *)(a1 + 17304);
          uint64_t v20 = (_DWORD *)(v19 + ((unint64_t)v18 << 6));
          int v21 = v20[3];
          int v22 = v20[1];
          unsigned int v23 = v20[6];
          if (v21 != v22 || v23 >= v6) {
            break;
          }
          *uint64_t v14 = v16;
          if (*(_DWORD *)v2)
          {
            uint64_t v25 = v19 + (v17 << 6);
            int v28 = *(_DWORD *)(v25 + 8);
            uint64_t v27 = (int *)(v25 + 8);
            int v26 = v28;
            int v29 = *(_DWORD *)(v12 + 8);
            if (v28 != v29 && v27[2] == v5)
            {
              int8x8_t v31 = *(unsigned int **)(a1 + 1120);
              if (*(_DWORD *)(v2 + 4) != v29)
              {
                *(_DWORD *)(v2 + 4) = v29;
                *v31++ = ((_BYTE)v29 + 1) & 7 | 0xA0000000;
                int v26 = *v27;
              }
              *int8x8_t v31 = ((v26 << 18) + 0x40000) & 0x1C0000 | ((*(_DWORD *)(v19 + (v17 << 6) + 20) << 21) + 0x200000) & 0x1FE00000 | 0x60000200;
              *(void *)(a1 + 1120) = v31 + 1;
              uint64_t v13 = *(void *)(v12 + 40);
              uint64_t v16 = *v14;
            }
          }
          uint64_t v15 = v16;
          if (v13 == v16) {
            goto LABEL_29;
          }
        }
        if (v13 == v15)
        {
LABEL_29:
          uint64_t v70 = v10;
          int v33 = (unsigned int *)(v12 + 12);
          unsigned int v32 = *(_DWORD *)(v12 + 12);
          int v34 = (unsigned int *)(v12 + 4);
          BOOL v35 = (unsigned int *)(v12 + 8);
          while (1)
          {
            unsigned int v37 = *v34;
            if (*v34 <= v32) {
              break;
            }
            unint64_t v38 = *(_DWORD *)v12 + v32;
            uint64_t v39 = *(void *)(a1 + 17280);
            if (v38 >= (*(void *)(a1 + 17288) - v39) >> 5) {
              abort();
            }
            uint64_t v40 = v39 + 32 * v38;
            unsigned int v41 = *(const void **)v40;
            size_t v42 = *(void *)(v40 + 16);
            char v43 = *(unsigned char *)(v40 + 24);
            char v44 = *(unsigned char *)(v40 + 25);
            if (*(_DWORD *)v2)
            {
              int v45 = *v35;
              unint64_t v36 = *(unsigned int **)(a1 + 1120);
              if (*(_DWORD *)(v2 + 4) != *v35)
              {
                *(_DWORD *)(v2 + 4) = v45;
                *v36++ = ((_BYTE)v45 + 1) & 7 | 0xA0000000;
              }
            }
            else
            {
              unint64_t v36 = *(unsigned int **)(a1 + 1120);
            }
            *(void *)(a1 + 1120) = (char *)v36 + v42;
            memcpy(v36, v41, v42);
            *((unsigned char *)&v72 + *v35) |= v44 & 1;
            unsigned int v32 = *v33 + 1;
            *int v33 = v32;
            if (v43)
            {
              unsigned int v37 = *v34;
              break;
            }
          }
          unsigned int v6 = v68;
          if (v32 >= v37)
          {
            uint64_t v46 = v70 + (v11 << 6);
            int v48 = *(_DWORD *)(v46 + 24);
            unint64_t v47 = (unsigned int *)(v46 + 24);
            if (v48 == -1)
            {
              *unint64_t v47 = v68;
              if (*(_DWORD *)v2)
              {
                uint64_t v49 = *v35;
                *((unsigned char *)&v71 + v49) = 1;
                LODWORD(v49) = *((_DWORD *)v73 + v49);
                uint64_t v50 = v70 + (v11 << 6);
                int v5 = v69;
                *(_DWORD *)(v50 + 16) = v69;
                *(_DWORD *)(v50 + 20) = v49;
                goto LABEL_12;
              }
            }
          }
          else
          {
            char v67 = 1;
          }
          int v5 = v69;
        }
        else
        {
          char v67 = 1;
        }
LABEL_12:
        ++v11;
        uint64_t v10 = *(void *)(a1 + 17304);
        if (v11 >= (*(void *)(a1 + 17312) - v10) >> 6) {
          goto LABEL_45;
        }
      }
    }
    char v67 = 0;
LABEL_45:
    if (*(_DWORD *)v2)
    {
      BOOL v51 = *(_DWORD **)(a1 + 1120);
      *BOOL v51 = -1610612735;
      if ((_BYTE)v72) {
        int v52 = 1610618208;
      }
      else {
        int v52 = 1610613088;
      }
      char v9 = v67;
      if ((_BYTE)v71)
      {
        int v53 = v65;
        v51[1] = v52 | ((v65++ << 21) + 0x200000) & 0x1FE00000;
        LODWORD(v73[0]) = v65;
        BOOL v54 = v53 == 254;
      }
      else
      {
        BOOL v54 = 0;
        v51[1] = v52;
      }
      *(_DWORD *)(v2 + 4) = 1;
      v51[2] = -1610612734;
      if (HIBYTE(v72)) {
        int v55 = 1610618208;
      }
      else {
        int v55 = 1610613088;
      }
      if (!HIBYTE(v71))
      {
        v51[3] = v55;
        *(void *)(a1 + 1120) = v51 + 4;
        if (!v54) {
          goto LABEL_7;
        }
LABEL_61:
        int v65 = 0;
        int v66 = 0;
        *(_DWORD *)(v2 + 4) = -1;
        v51[4] = -1610612736;
        v51[5] = 1610613504;
        *(void *)(a1 + 1120) = v51 + 6;
        ++v5;
        v73[0] = 0;
        goto LABEL_7;
      }
      v51[3] = v55 | ((v66 << 21) + 0x200000) & 0x1FE00000;
      *(void *)(a1 + 1120) = v51 + 4;
      HIDWORD(v73[0]) = ++v66;
      if (v66 == 255) {
        BOOL v54 = 1;
      }
      if (v54) {
        goto LABEL_61;
      }
    }
    else
    {
      if ((_BYTE)v72) {
        int v7 = 1610618208;
      }
      else {
        int v7 = 1610613088;
      }
      uint64_t v8 = *(int **)(a1 + 1120);
      int *v8 = v7;
      *(void *)(a1 + 1120) = v8 + 1;
      LOBYTE(v72) = 0;
      char v9 = v67;
    }
LABEL_7:
    ++v6;
  }
  while ((v9 & 1) != 0);
  uint64_t v4 = v63;
  uint64_t v3 = v64;
LABEL_63:
  *(void *)(a1 + 17288) = *(void *)(a1 + 17280);
  uint64_t v56 = *(void *)(a1 + 17312);
  uint64_t v57 = *(void *)(a1 + 17304);
  while (v56 != v57)
  {
    size_t v58 = *(void **)(v56 - 24);
    if (v58)
    {
      *(void *)(v56 - 16) = v58;
      operator delete(v58);
    }
    v56 -= 64;
  }
  *(void *)(a1 + 17312) = v57;
  *(unsigned char *)(v2 + 584) = 0;
  int v59 = *(unint64_t **)(a1 + 1120);
  if (*(_DWORD *)v2)
  {
    *v59++ = 0x60000300A0000000;
    *(_DWORD *)(v2 + 4) = 0;
    *(void *)(a1 + 16696) = 0;
  }
  *int v59 = __ROR8__(v3 + v4, 32) & 0xFFFFFFFF0000FFFFLL | 0x20000000;
  *(void *)(a1 + 1120) = v59 + 1;
  if (*(_DWORD *)v2)
  {
    int v60 = *(_DWORD *)(v2 + 640);
    *(_DWORD *)(v2 + 4) = v60;
    unsigned int v61 = ((_BYTE)v60 + 1) & 7 | 0xA0000000;
    size_t v62 = *(unsigned int **)(a1 + 768);
    unsigned int *v62 = v61;
    *(void *)(a1 + 768) = v62 + 1;
  }
}

void AGX::ComputeContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,AGX::HAL200::EncoderComputeServiceClasses>::endComputePass(void *a1, int a2, uint64_t a3)
{
  if (a2 && *(_DWORD *)*MEMORY[0x263F4B1E8]) {
    IOGPUDeviceTraceEvent();
  }
  uint64_t v5 = a1[2076];
  if (v5) {
    LODWORD(v5) = *(_DWORD *)(v5 + 528);
  }
  unsigned int v6 = a1 + 2095;
  uint64_t v7 = a1[2075];
  if (v7) {
    LODWORD(v7) = *(_DWORD *)(v7 + 528);
  }
  int v8 = v7 + v5;
  char v9 = (void *)*a1;
  if (([(id)*a1 skipRender] & 1) != 0
    || (*((unsigned char *)a1 + 17162) & 2) != 0
    || (*((unsigned char *)a1 + 17162) & 1) != 0 && !v8)
  {
    uint64_t v10 = a1[194] - a1[196];
    *(_DWORD *)(v10 + 12) = 1;
    if ((*(unsigned char *)(v10 + 8) & 4) != 0) {
      **(unsigned char **)(*a1 + 688) = 1;
    }
  }
  if (([v9 skipRender] & 1) != 0 || (*((unsigned char *)a1 + 17162) & 3) != 1 || !v8)
  {
    if (!*((_DWORD *)a1 + 4172)) {
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  AGX::ComputeContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,AGX::HAL200::EncoderComputeServiceClasses>::encodeBarrier((uint64_t)a1, a3);
  *(unsigned char *)(a1[239] + 458) = 0;
  if (*((_DWORD *)a1 + 4172))
  {
LABEL_18:
    int v11 = *((_DWORD *)a1 + 4173);
    LODWORD(block[0]) = 0;
    agxaReserveCDMTokenSpace<AGX::HAL200::Encoders,AGX::HAL200::DataBufferAllocator>(a3, (uint64_t)(a1 + 2), 4, 0, 1, v11, block);
    uint64_t v12 = (uint64_t)&a1[4 * a3 + 2];
    uint64_t v13 = *(_DWORD **)(v12 + 48);
    _DWORD *v13 = -1610612736;
    *(void *)(v12 + 48) = v13 + 1;
  }
LABEL_19:
  uint64_t v14 = a1 + 238;
  if (!*(_DWORD *)(a1[238] + 4))
  {
    if (a1[228]) {
      AGX::ComputeIndirectExecutionContextGen4<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,AGX::HAL200::EncoderComputeServiceClasses>::patchCDMControlStreamAndReset((uint64_t)(a1 + 224), (uint64_t)a1, a1[2092], a1[2093], a1[2094]);
    }
    uint64_t v15 = &a1[4 * a3];
    uint64_t v16 = (_DWORD *)v15[8];
    uint64_t v17 = (char *)v16 + v15[10];
    v15[8] = v16 + 1;
    *uint64_t v16 = 0x40000000;
    uint64_t v18 = a1[239];
    *(void *)(v18 + 96) = v17;
    if (v8)
    {
      FenceEncoder::encode((AGX::SidebandBufferAllocator *)(a1 + 183), 1, a1[238], a1[2076], a1[2075], 0, 0);
      a1[2158] |= 0x100uLL;
      uint64_t v18 = a1[239];
    }
    *(unsigned char *)(v18 + 180) = *((unsigned char *)a1 + 1512);
    *(_DWORD *)(v18 + 176) = *((_DWORD *)a1 + 377);
    *(void *)(v18 + 184) = *(void *)((char *)a1 + 1516);
    if (!a1[2111]) {
      goto LABEL_32;
    }
    if (a1[185]) {
      MTLResourceListAddResource();
    }
    IOGPUResourceListAddResource();
    uint64_t v18 = a1[239];
    uint64_t v19 = (void *)a1[2111];
    if (v19 && (v21 = *((_DWORD *)a1 + 4224), int v20 = *((_DWORD *)a1 + 4225), (v21 & v20) != 0xFFFFFFFF))
    {
      *(_DWORD *)(v18 + 468) = [v19 resourceID];
      *(_DWORD *)(v18 + 472) = v21;
      *(_DWORD *)(v18 + 476) = v20;
    }
    else
    {
LABEL_32:
      *(_DWORD *)(v18 + 476) = -1;
      *(void *)(v18 + 468) = -1;
    }
    *((_DWORD *)a1 + 4224) = -1;
    AGX::ContextCommon<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::finalizeScsParameters_impl((uint64_t)a1);
    *((_OWORD *)a1 + 100) = 0u;
    if (HIWORD(a1[203]) + (unsigned __int16)WORD2(a1[203]))
    {
      uint64_t v23 = *(void *)(a1[182] + 808);
      block[0] = MEMORY[0x263EF8330];
      block[1] = 3221225472;
      void block[2] = ___ZN3AGX6DeviceINS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE36setupDriverIntersectionTableIfNeededEv_block_invoke;
      block[3] = &__block_descriptor_40_e5_v8__0l;
      void block[4] = v23;
      if (AGX::Device<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::setupDriverIntersectionTableIfNeeded(void)::onceToken != -1) {
        dispatch_once(&AGX::Device<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::setupDriverIntersectionTableIfNeeded(void)::onceToken, block);
      }
      uint64_t v24 = *(void *)(v23 + 5152);
      int v25 = *(_DWORD *)(v24 + 204);
      int v26 = *((_DWORD *)a1 + 4191);
      if (v25 > v26)
      {
        *((_DWORD *)a1 + 4191) = v25;
        *unsigned int v6 = *(_DWORD *)(v24 + 200);
        *((_OWORD *)a1 + 1048) = *(_OWORD *)(v24 + 208);
      }
      int v27 = *(_DWORD *)(v24 + 224);
      int32x2_t v28 = (int32x2_t)a1[2098];
      __int32 v29 = v28.i32[1];
      int32x2_t v30 = vrev64_s32(v28);
      __int32 v31 = v28.i32[0];
      if (v28.i32[0] <= v27) {
        __int32 v31 = *(_DWORD *)(v24 + 224);
      }
      *((_DWORD *)a1 + 4196) = v31;
      int v32 = *(_DWORD *)(v24 + 228);
      if (v28.i32[1] <= v32) {
        __int32 v29 = *(_DWORD *)(v24 + 228);
      }
      *((_DWORD *)a1 + 4197) = v29;
      int v33 = *(_DWORD *)(v24 + 232);
      int v35 = *((_DWORD *)a1 + 4198);
      int v34 = *((_DWORD *)a1 + 4199);
      if (v35 <= v33) {
        int v36 = *(_DWORD *)(v24 + 232);
      }
      else {
        int v36 = *((_DWORD *)a1 + 4198);
      }
      *((_DWORD *)a1 + 4198) = v36;
      int v37 = *(_DWORD *)(v24 + 236);
      if (v34 <= v37) {
        int v38 = *(_DWORD *)(v24 + 236);
      }
      else {
        int v38 = v34;
      }
      *((_DWORD *)a1 + 4199) = v38;
      __int32 v39 = *(_DWORD *)(v24 + 240);
      __int32 v41 = *((_DWORD *)a1 + 4200);
      int v40 = *((_DWORD *)a1 + 4201);
      if (v41 <= v39) {
        int v42 = *(_DWORD *)(v24 + 240);
      }
      else {
        int v42 = *((_DWORD *)a1 + 4200);
      }
      *((_DWORD *)a1 + 4200) = v42;
      v43.i64[0] = __PAIR64__(v41, v40);
      v43.u64[1] = (unint64_t)v30;
      v44.i32[0] = *(_DWORD *)(v24 + 244);
      v44.i32[1] = v39;
      v44.i64[1] = __PAIR64__(v27, v32);
      if (v40 <= v44.i32[0]) {
        int v45 = *(_DWORD *)(v24 + 244);
      }
      else {
        int v45 = v40;
      }
      *((_DWORD *)a1 + 4201) = v45;
      if ((vmaxv_u16((uint16x4_t)vmovn_s32(vcgtq_s32(v44, v43))) & 1) != 0 || v35 < v33 || v34 < v37 || v25 > v26) {
        AGX::ComputeContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,AGX::HAL200::EncoderComputeServiceClasses>::bindComputeUSCSpillBuffer((__n128 *)a1);
      }
      uint64_t v46 = a1[239];
      uint64_t v47 = *(_DWORD *)(v24 + 24) & 0x1FFFFFF | 0xC0000000;
      *(void *)(v46 + 392) = *(void *)(v24 + 8) & 0xFFFFFFFFFFC0;
      *(void *)(v46 + 400) = v47;
      AGX::DriverIntersectionFunctionTableGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::bindResources((void *)v24);
      uint64_t v22 = a1[239];
      *(void *)(v22 + 424) = *(void *)(v24 + 168);
      *(void *)(v22 + 432) = *(void *)(v24 + 176);
      *(void *)(v22 + 408) = 0x6F00000000;
      *(void *)(v22 + 416) = 261887;
      int v48 = HIBYTE(*((_DWORD *)a1 + 406));
      if (!v48) {
        *(_DWORD *)(*v14 + 4) = 1;
      }
      *(_DWORD *)(v22 + 448) = v48;
      *(_DWORD *)(v22 + 452) = *((unsigned __int16 *)a1 + 812);
      unsigned int v49 = *((_DWORD *)a1 + 429);
      if (v49 == -1)
      {
        uint64_t v93 = v22;
        int SectionEnd = RaytracingConstantsCommon::ScsLayoutBase<RaytracingConstantsGen1::ScsLayoutGen1>::getSectionEnd((uint64_t)(a1 + 203), 10);
        uint64_t v22 = v93;
        unsigned int v49 = (SectionEnd + 0x1FFF) & 0xFFFFF000;
        *((_DWORD *)a1 + 429) = v49;
      }
      __int32 v50 = *((_DWORD *)a1 + 4191);
      __int32 v51 = v50;
      if (v50 < 0)
      {
        __int32 v51 = 0;
        *(void *)unsigned int v6 = 0;
        a1[2096] = 0;
        a1[2097] = 0;
      }
      signed int v52 = (v49 + 4095) >> 12;
      signed int v53 = (4 * v52 + 1023) >> 10;
      int8x16_t v54 = *((int8x16_t *)a1 + 1049);
      int32x4_t v55 = vmaxq_s32((int32x4_t)v54, (int32x4_t)0);
      *((int32x4_t *)a1 + 1049) = v55;
      signed int v56 = *((_DWORD *)a1 + 4200);
      signed int v57 = *((_DWORD *)a1 + 4201);
      if (v56 <= v52) {
        unsigned int v58 = (v49 + 4095) >> 12;
      }
      else {
        unsigned int v58 = *((_DWORD *)a1 + 4200);
      }
      if (v57 <= v53) {
        unsigned int v59 = (4 * v52 + 1023) >> 10;
      }
      else {
        unsigned int v59 = *((_DWORD *)a1 + 4201);
      }
      *((_DWORD *)a1 + 4200) = v58;
      *((_DWORD *)a1 + 4201) = v59;
      int8x8_t v60 = vorr_s8(*(int8x8_t *)v54.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v54, v54, 8uLL));
      if ((v60.i32[0] | v50 | v60.i32[1]) < 0 || v56 < v52 || v57 < v53)
      {
        int32x2_t v61 = vdup_lane_s32(*(int32x2_t *)v55.i8, 0);
        v61.i32[0] = v51;
        if (v58)
        {
          uint64_t v62 = a1[2102];
          uint64_t v63 = 5936;
          if (*(_OWORD *)(v62 + 5936) == 0) {
            uint64_t v63 = 5952;
          }
          int32x2_t v64 = vmovn_s64((int64x2_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(*(int8x16_t *)(v62 + v63))))));
          int v65 = *(_DWORD *)(v62 + 5912);
          unsigned __int32 v66 = vadd_s32(vdup_lane_s32(v64, 1), v64).u32[0];
          int v67 = v55.i32[2] + v55.i32[3];
          int v68 = (v59 + v58 + v55.i32[2] + v55.i32[3]) * v66;
          int v69 = (v55.i32[3] - *v6) * v65;
          if (v55.i32[3] <= *v6) {
            int v69 = 0;
          }
          v55.i32[0] = (v59 + v58 + v67) * v66;
          int32x2_t v61 = vadd_s32(vadd_s32(*(int32x2_t *)v55.i8, v61), (int32x2_t)__PAIR64__(v68, v69));
        }
        else
        {
          int v68 = 0;
          int v67 = 0;
        }
        *(_WORD *)(v22 + 376) = 0;
        *(_DWORD *)(v22 + 360) = v58;
        *(_DWORD *)(v22 + 364) = v59;
        *(_DWORD *)(v22 + 368) = v67;
        *(_DWORD *)(v22 + 372) = v68;
        *(int64x2_t *)(v22 + 320) = vshll_n_s32((int32x2_t)(*(void *)&vadd_s32(v61, (int32x2_t)0x700000007) & 0xFFFFFFF8FFFFFFF8), 0xCuLL);
        *(_OWORD *)(v22 + 336) = *((_OWORD *)a1 + 1048);
        uint64_t v22 = a1[239];
      }
    }
    else
    {
      uint64_t v22 = a1[239];
      *(_DWORD *)(v22 + 452) = 8;
    }
    *(void *)(v22 + 104) = 0;
    *(unsigned char *)(v22 + 462) = 0;
    *(unsigned char *)(v22 + 463) = *((unsigned char *)a1 + 1545);
  }
  if (AGX::SpillInfoGen3<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::checkSpillParamsForCompute((uint64_t)v6, 0, 0, 0, 0, 0, 0))
  {
    uint64_t v73 = a1[239];
    int v74 = *((_DWORD *)a1 + 4191);
    int v76 = *((_DWORD *)a1 + 4200);
    int v75 = *((_DWORD *)a1 + 4201);
    if (v76 < 1)
    {
      unsigned __int32 v83 = 0;
      int v82 = 0;
      unsigned __int32 v87 = *((_DWORD *)a1 + 4196);
    }
    else
    {
      uint64_t v77 = a1[2102];
      int v78 = *(_DWORD *)(v77 + 5912);
      uint64_t v79 = 5936;
      if (*(_OWORD *)(v77 + 5936) == 0) {
        uint64_t v79 = 5952;
      }
      int32x2_t v80 = vmovn_s64((int64x2_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(*(int8x16_t *)(v77 + v79))))));
      *(int32x2_t *)v71.i8 = vdup_lane_s32(v80, 1);
      int v81 = *((_DWORD *)a1 + 4199);
      int v82 = *((_DWORD *)a1 + 4198) + v81;
      unsigned __int32 v83 = (v75 + v76 + v82) * vadd_s32(*(int32x2_t *)v71.i8, v80).u32[0];
      BOOL v84 = __OFSUB__(v81, *v6);
      int v85 = v81 - *v6;
      int v86 = v85 * v78;
      if ((v85 < 0) ^ v84 | (v85 == 0)) {
        int v86 = 0;
      }
      v74 += v83 + v86;
      unsigned __int32 v87 = *((_DWORD *)a1 + 4197) + *((_DWORD *)a1 + 4196) + v83;
    }
    *(_WORD *)(v73 + 376) = 0;
    *(_DWORD *)(v73 + 360) = v76;
    *(_DWORD *)(v73 + 364) = v75;
    *(_DWORD *)(v73 + 368) = v82;
    *(_DWORD *)(v73 + 372) = v83;
    *(void *)(v73 + 320) = (uint64_t)(int)((v74 + 7) & 0xFFFFFFF8) << 12;
    *(void *)(v73 + 328) = (uint64_t)(int)((v87 + 7) & 0xFFFFFFF8) << 12;
    long long v70 = *((_OWORD *)a1 + 1048);
    *(_OWORD *)(v73 + 336) = v70;
  }
  *uint64_t v14 = 0;
  a1[239] = 0;
  AGX::ContextCommon<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::endCommand((uint64_t)a1, *(double *)&v70, v71, v72);
  AGX::ResourceGroupUsage<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::reset(a1[199]);
  LODWORD(v88) = *((_DWORD *)a1 + 4228);
  unsigned int v89 = *((_DWORD *)a1 + 4229);
  if (v88 <= v89) {
    unint64_t v88 = v89;
  }
  else {
    unint64_t v88 = v88;
  }
  unint64_t v90 = *(void *)(a1[182] + 1072);
  if (v90 < v88)
  {
    uint64_t v91 = (atomic_ullong *)(a1[182] + 1072);
    unint64_t v92 = *v91;
    do
    {
      atomic_compare_exchange_strong_explicit(v91, &v92, v88, memory_order_relaxed, memory_order_relaxed);
      if (v92 == v90) {
        break;
      }
      unint64_t v90 = v92;
    }
    while (v92 < v88);
  }
  a1[2114] = 0;
}

void AGX::ComputeContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,AGX::HAL200::EncoderComputeServiceClasses>::beginComputePass(uint64_t a1, int a2, unsigned int a3)
{
  uint64_t v6 = a1 + 16656;
  if (a2)
  {
    uint64_t v7 = (_DWORD **)MEMORY[0x263F4B1E8];
    int v8 = (_DWORD *)*MEMORY[0x263F4B1E8];
    if (*(_DWORD *)*MEMORY[0x263F4B1E8])
    {
      IOGPUDeviceTraceEvent();
      int v8 = *v7;
    }
    if (*v8) {
      IOGPUDeviceTraceEvent();
    }
  }
  *(unsigned char *)(v6 + 506) = *(unsigned char *)(v6 + 506) & 0xFC | 1;
  if (*(unsigned char *)(v6 + 520)) {
    *(unsigned char *)(v6 + 520) = 0;
  }
  char v9 = AGX::ContextCommon<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::newCommand(a1, 528);
  *((void *)v9 + 1) = 0;
  *(void *)(v9 + 5) = 0x3000001E8;
  v9[1] = 0;
  *(void *)(a1 + 1904) = v9;
  v9 += 8;
  *(void *)(a1 + 1912) = v9;
  bzero(v9, 0x1E8uLL);
  {
  }
  uint64_t v10 = a1 + 16;
  if (((1 << a3) & 0x3B39E0480) != 0 && !*(void *)(v10 + 32 * a3 + 48)) {
    AGX::DataBufferAllocator<34ul>::initializeOnDemandDataBufferSlow(a1 + 16);
  }
  int v11 = (void *)(*(void *)(a1 + 40) + ((unint64_t)a3 << 6));
  uint64_t v12 = *(void *)(a1 + 1912);
  *(void *)uint64_t v12 = *v11 + v11[3] - v11[1];
  *(void *)(v12 + 200) = 0;
  *(void *)(v12 + 224) = 0;
  *(unsigned char *)(v12 + 317) = 0;
  *(_WORD *)(v12 + 456) = 0;
  *(unsigned char *)(v12 + 192) = 0;
  *(void *)(v12 + 96) = 0;
  *(_WORD *)(v12 + 384) = 0;
  *(_DWORD *)(v12 + 164) = 28;
  *(_DWORD *)(v12 + 480) = 0;
  if (*(_DWORD *)(v6 + 32))
  {
    *(unsigned char *)(v12 + 384) = 1;
    *(_OWORD *)(a1 + 16692) = 0u;
  }
  *(_OWORD *)(a1 + 16776) = 0u;
  *(_OWORD *)(a1 + 16792) = 0u;
  *(_OWORD *)(a1 + 16760) = 0u;
  AGX::ContextSwitcherGen3<AGX::HAL200::Encoders,AGX::HAL200::Classes>::setupComputeCommand(*(void *)(a1 + 1768), v12, (void *)(a1 + 16));
  uint64_t v13 = *(void **)(a1 + 1936);
  v13[110] = 0;
  v13[109] = 0;
  v13[114] = 0;
  v13[113] = 0;
  uint64_t v14 = *(void **)(a1 + 1936);
  v14[126] = 0;
  v14[118] = 0;
  v14[117] = 0;
  uint64_t v15 = *(void *)(a1 + 384);
  if (!v15)
  {
    if (!AGX::DataBufferAllocator<34ul>::growNoInline(a1 + 16, 10, 0)) {
      goto LABEL_73;
    }
    uint64_t v15 = *(void *)(a1 + 384);
  }
  uint64_t v16 = v15 + 15;
  unint64_t v17 = *(void *)(a1 + 376);
  uint64_t v95 = a1 + 16;
  if (v15 + 15 <= v17)
  {
LABEL_16:
    *(void *)(a1 + 392) = v16;
    uint64_t v10 = a1 + 16;
    goto LABEL_17;
  }
  int v88 = AGX::DataBufferAllocator<34ul>::growNoInline(a1 + 16, 10, 0);
  unint64_t v17 = *(void *)(a1 + 376);
  uint64_t v15 = *(void *)(a1 + 384);
  if (v88)
  {
    uint64_t v16 = v15 + 15;
    if (v15 + 15 > v17) {
      goto LABEL_73;
    }
    goto LABEL_16;
  }
LABEL_17:
  unint64_t v18 = (v15 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v19 = *(void *)(a1 + 400);
  unint64_t v20 = v18 + 8;
  *(void *)(a1 + 384) = v18 + 8;
  unint64_t v21 = v18 + 23;
  if (v18 + 23 <= v17)
  {
LABEL_18:
    *(void *)(a1 + 392) = v21;
    goto LABEL_19;
  }
  int v89 = AGX::DataBufferAllocator<34ul>::growNoInline(v10, 10, 0);
  unint64_t v17 = *(void *)(a1 + 376);
  unint64_t v20 = *(void *)(a1 + 384);
  if (v89)
  {
    unint64_t v21 = v20 + 15;
    if (v20 + 15 > v17) {
      goto LABEL_73;
    }
    goto LABEL_18;
  }
LABEL_19:
  unint64_t v22 = (v20 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v23 = *(void *)(a1 + 400);
  unint64_t v24 = v22 + 8;
  *(void *)(a1 + 384) = v22 + 8;
  unint64_t v25 = v22 + 23;
  if (v22 + 23 <= v17)
  {
LABEL_20:
    *(void *)(a1 + 392) = v25;
    goto LABEL_21;
  }
  int v90 = AGX::DataBufferAllocator<34ul>::growNoInline(v95, 10, 0);
  unint64_t v17 = *(void *)(a1 + 376);
  unint64_t v24 = *(void *)(a1 + 384);
  if (v90)
  {
    unint64_t v25 = v24 + 15;
    if (v24 + 15 > v17) {
      goto LABEL_73;
    }
    goto LABEL_20;
  }
LABEL_21:
  unint64_t v26 = (v24 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v27 = *(void *)(a1 + 400);
  unint64_t v28 = v26 + 8;
  *(void *)(a1 + 384) = v26 + 8;
  unint64_t v29 = v26 + 23;
  if (v26 + 23 <= v17)
  {
LABEL_22:
    *(void *)(a1 + 392) = v29;
    goto LABEL_23;
  }
  int v91 = AGX::DataBufferAllocator<34ul>::growNoInline(v95, 10, 0);
  unint64_t v28 = *(void *)(a1 + 384);
  if (v91)
  {
    unint64_t v29 = v28 + 15;
    if (v28 + 15 > *(void *)(a1 + 376)) {
      goto LABEL_73;
    }
    goto LABEL_22;
  }
LABEL_23:
  unint64_t v30 = (v28 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v31 = v30 + *(void *)(a1 + 400);
  *(void *)(a1 + 384) = v30 + 8;
  uint64_t v32 = *(void *)(a1 + 1912);
  *(_DWORD *)(v32 + 144) = 1;
  *(void *)(v32 + 112) = v18 + v19;
  *(void *)(v32 + 120) = v22 + v23;
  *(void *)(v32 + 128) = v26 + v27;
  *(void *)(v32 + 136) = v31;
  uint64_t v33 = *(void *)(*(void *)(a1 + 1456) + 808);
  *(_DWORD *)(v6 + 16) = *(_DWORD *)(v33 + 5176);
  int v34 = *(void **)(v33 + 5688);
  int v35 = (int *)MEMORY[0x263F4B188];
  if (v34)
  {
    do
    {
      IOGPUResourceListAddResource();
      int v34 = (void *)*v34;
    }
    while (v34);
    uint64_t v33 = *(void *)(*(void *)(a1 + 1456) + 808);
  }
  for (unint64_t i = *(void **)(v33 + 5520); i; unint64_t i = (void *)*i)
    IOGPUResourceListAddResource();
  if ((a2 & 1) == 0)
  {
    *(void *)(a1 + 17200) = 0;
    *(_OWORD *)(a1 + 17184) = 0u;
    uint64_t v37 = *(void *)(a1 + 160);
    uint64_t v38 = v37 + 47;
    if ((unint64_t)(v37 + 47) > *(void *)(a1 + 152))
    {
      int v94 = AGX::DataBufferAllocator<34ul>::growNoInline(v95, 3, 0);
      uint64_t v37 = *(void *)(a1 + 160);
      if (!v94) {
        goto LABEL_31;
      }
      uint64_t v38 = v37 + 47;
      if ((unint64_t)(v37 + 47) > *(void *)(a1 + 152)) {
        goto LABEL_73;
      }
    }
    *(void *)(a1 + 168) = v38;
LABEL_31:
    unint64_t v39 = (v37 + 15) & 0xFFFFFFFFFFFFFFF0;
    unint64_t v40 = v39 + *(void *)(a1 + 176);
    *(void *)(a1 + 160) = v39 + 32;
    *(void *)(a1 + 16624) |= 0x10000000000uLL;
    *(_DWORD *)v6 |= 1u;
    *(void *)(*(void *)(a1 + 1936) + 856) = v40;
    *(void *)(a1 + 11976) = *(void *)(*(void *)(a1 + 40) + 224) + *v35;
    *(_DWORD *)(a1 + 10888) = 24;
    *(_DWORD *)(a1 + 11148) = 24;
    *(_DWORD *)(a1 + 11408) = v40 >> 8;
    long long v41 = *(_OWORD *)(a1 + 17184);
    *(void *)(v39 + 16) = *(void *)(a1 + 17200);
    *(_OWORD *)unint64_t v39 = v41;
  }
  if (!*(void *)(*(void *)(a1 + 1496) + 520)) {
    *(unsigned char *)(v6 + 506) |= 2u;
  }
  if (*(void *)(*(void *)(*(void *)(a1 + 1456) + 808) + 7304)) {
    IOGPUResourceListAddResource();
  }
  *(void *)(a1 + 16664) = 0;
  *(unsigned char *)(v6 + 20) = 0;
  uint64_t v42 = *(void *)(*(void *)(a1 + 40) + 224);
  uint64_t v43 = *v35;
  uint64_t v44 = *(void *)(a1 + 160);
  uint64_t v45 = v44 + 55;
  if ((unint64_t)(v44 + 55) <= *(void *)(a1 + 152))
  {
LABEL_37:
    *(void *)(a1 + 168) = v45;
    goto LABEL_38;
  }
  int v92 = AGX::DataBufferAllocator<34ul>::growNoInline(v95, 3, 0);
  uint64_t v44 = *(void *)(a1 + 160);
  if (v92)
  {
    uint64_t v45 = v44 + 55;
    if ((unint64_t)(v44 + 55) > *(void *)(a1 + 152)) {
      goto LABEL_73;
    }
    goto LABEL_37;
  }
LABEL_38:
  uint64_t v46 = (_OWORD *)((v44 + 7) & 0xFFFFFFFFFFFFFFF8);
  *(void *)(a1 + 1600) = (char *)v46 + *(void *)(a1 + 176);
  *(void *)(a1 + 160) = v46 + 3;
  *(void *)(a1 + 1608) = v46;
  v46[1] = 0u;
  v46[2] = 0u;
  *uint64_t v46 = 0u;
  uint64_t v47 = *(void *)(a1 + 1600);
  *(void *)(a1 + 16624) |= 0x2000000000000000uLL;
  *(_DWORD *)v6 |= 1u;
  *(void *)(*(void *)(a1 + 1936) + 1024) = v47;
  *(void *)(a1 + 12144) = v42 + v43;
  uint64_t v48 = *(void *)(a1 + 160);
  uint64_t v49 = v48 + 103;
  if ((unint64_t)(v48 + 103) <= *(void *)(a1 + 152))
  {
LABEL_39:
    *(void *)(a1 + 168) = v49;
    goto LABEL_40;
  }
  int v93 = AGX::DataBufferAllocator<34ul>::growNoInline(v95, 3, 0);
  uint64_t v48 = *(void *)(a1 + 160);
  if (v93)
  {
    uint64_t v49 = v48 + 103;
    if ((unint64_t)(v48 + 103) <= *(void *)(a1 + 152)) {
      goto LABEL_39;
    }
LABEL_73:
    abort();
  }
LABEL_40:
  unint64_t v50 = (v48 + 15) & 0xFFFFFFFFFFFFFFF0;
  unint64_t v51 = v50 + *(void *)(a1 + 176);
  *(void *)(a1 + 17208) = v51;
  *(void *)(a1 + 160) = v50 + 88;
  *(void *)(a1 + 17216) = v50;
  *(void *)(*(void *)(a1 + 1936) + 928) = v51;
  uint64_t v52 = [*(id *)a1 privateData];
  uint64_t v53 = [*(id *)a1 privateDataOffset];
  if (v52)
  {
    *(void *)(*(void *)(a1 + 17216) + 80) = *(void *)(v52 + *v35 + 8) + v53;
    IOGPUResourceListAddResource();
  }
  if (a2)
  {
    uint64_t v54 = *(void *)(a1 + 1920);
    uint64_t v55 = *(void *)(v54 + 16);
    AGX::ComputePipeline<AGX::HAL200::ObjClasses,AGX::HAL200::Classes,AGX::HAL200::Encoders>::bindResources(v54);
    signed int v56 = *(_DWORD **)(a1 + 1920);
    unsigned int v57 = v56[53] + v56[45];
    int v58 = v56[48];
    unsigned int v59 = *(_DWORD *)(a1 + 1744);
    int v60 = *(_DWORD *)(a1 + 1736);
    int v61 = *(_DWORD *)(a1 + 1740);
    if (v59 <= 1) {
      unsigned int v59 = 1;
    }
    unsigned int v62 = 4 * v59 * ((*(_DWORD *)(v55 + 3548) + 3) >> 2);
    int v63 = v62 * v60 * v61;
    int v64 = v62 * (1 << -(char)__clz(v60 - 1) << -__clz(v61 - 1));
    if (v63) {
      int v65 = v64;
    }
    else {
      int v65 = 0;
    }
    int v66 = AGX::SpillInfoGen3<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::checkSpillParamsForCompute(a1 + 16760, v57, *(_DWORD *)(v55 + 1000), v58, *(_DWORD *)(v6 + 224), v65, 0);
    int v67 = 0;
    uint64_t v68 = *(void *)(*(void *)(a1 + 1920) + 608);
    if (v68) {
      int v67 = AGX::SpillInfoGen3<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::mergeFrom(a1 + 16760, v68);
    }
    if ((v66 | v67) == 1) {
      AGX::ComputeContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,AGX::HAL200::EncoderComputeServiceClasses>::bindComputeUSCSpillBuffer((__n128 *)a1);
    }
    unint64_t v69 = *(void *)(v55 + 1952);
    uint64_t v70 = *(void *)(a1 + 1920);
    if (*(unsigned char *)(v70 + 24))
    {
      if (*(void *)(v70 + 144)) {
        unint64_t v71 = ((unint64_t)(*(void *)(v70 + 128) != 0) << 56) | 0x400000000000000;
      }
      else {
        unint64_t v71 = (unint64_t)(*(void *)(v70 + 128) != 0) << 56;
      }
      if (*(void *)v70) {
        uint64_t v72 = v71 | 0x4000000000000000;
      }
      else {
        uint64_t v72 = v71;
      }
      uint64_t v73 = ~v72;
    }
    else
    {
      uint64_t v73 = -1;
    }
    unint64_t v74 = *(void *)(v55 + 1944) & v73;
    while (1)
    {
      if (!v74)
      {
        if (!v69)
        {
          unint64_t v84 = *(void *)(v55 + 1960) & *(void *)(a1 + 9184);
          unint64_t v96 = *(void *)(v55 + 1968) & *(void *)(a1 + 9192);
          for (j = v84; ; unint64_t v84 = j)
          {
            if (v84)
            {
              unsigned int v85 = __clz(__rbit64(v84));
              p_unint64_t j = &j;
              unsigned int v87 = v85;
            }
            else
            {
              unint64_t v84 = v96;
              if (!v96) {
                return;
              }
              unsigned int v85 = __clz(__rbit64(v96));
              unsigned int v87 = v85 | 0x40;
              p_unint64_t j = &v96;
            }
            *p_unint64_t j = v84 & ~(1 << v85);
            long long v98 = *(_OWORD *)(v55 + 1072);
            AGX::ComputeContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,AGX::HAL200::EncoderComputeServiceClasses>::bindTextureResourceToCommand(a1, v87, (*(void *)((unint64_t)&v98 | (8 * (v87 > 0x3F))) >> v87) & 1);
          }
        }
        unint64_t v74 = 0;
        int v82 = __clz(__rbit64(v69));
        unsigned int v76 = v82 | 0x40;
        v69 &= ~(1 << v82);
LABEL_62:
        long long v98 = *(_OWORD *)(v55 + 1056);
        uint64_t v75 = *(void *)((unint64_t)&v98 | (8 * (v76 > 0x3F))) & (1 << v76);
        goto LABEL_63;
      }
      unsigned int v76 = __clz(__rbit64(v74));
      v74 &= ~(1 << v76);
      if (v76 != 40) {
        goto LABEL_62;
      }
      uint64_t v77 = *(void *)(a1 + 160);
      uint64_t v78 = v77 + 47;
      if ((unint64_t)(v77 + 47) > *(void *)(a1 + 152))
      {
        int v83 = AGX::DataBufferAllocator<34ul>::growNoInline(v95, 3, 0);
        uint64_t v77 = *(void *)(a1 + 160);
        if (!v83) {
          goto LABEL_68;
        }
        uint64_t v78 = v77 + 47;
        if ((unint64_t)(v77 + 47) > *(void *)(a1 + 152)) {
          goto LABEL_73;
        }
      }
      *(void *)(a1 + 168) = v78;
LABEL_68:
      unint64_t v79 = (v77 + 15) & 0xFFFFFFFFFFFFFFF0;
      unint64_t v80 = v79 + *(void *)(a1 + 176);
      *(void *)(a1 + 160) = v79 + 32;
      *(void *)(a1 + 16624) |= 0x10000000000uLL;
      *(_DWORD *)v6 |= 1u;
      *(void *)(*(void *)(a1 + 1936) + 856) = v80;
      *(void *)(a1 + 11976) = *(void *)(*(void *)(a1 + 40) + 224) + *v35;
      *(_DWORD *)(a1 + 10888) = 24;
      *(_DWORD *)(a1 + 11148) = 24;
      *(_DWORD *)(a1 + 11408) = v80 >> 8;
      long long v81 = *(_OWORD *)(a1 + 17184);
      *(void *)(v79 + 16) = *(void *)(a1 + 17200);
      *(_OWORD *)unint64_t v79 = v81;
      uint64_t v75 = *(void *)(v55 + 1056) & 0x10000000000;
      unsigned int v76 = 40;
LABEL_63:
      AGX::ComputeContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,AGX::HAL200::EncoderComputeServiceClasses>::bindBufferResourceToCommand(a1, v76, v75 != 0);
    }
  }
}

void AGX::ComputeContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,AGX::HAL200::EncoderComputeServiceClasses>::beginVirtualSubstream(uint64_t a1)
{
  uint64_t v2 = (int *)(a1 + 16688);
  uint64_t v3 = a1 + 16;
  int v4 = *(_DWORD *)(a1 + 16692);
  BOOL v5 = *(_DWORD *)(a1 + 16688) != 0;
  LODWORD(v24) = 0;
  agxaReserveCDMTokenSpace<AGX::HAL200::Encoders,AGX::HAL200::DataBufferAllocator>(22, a1 + 16, 36, 0, v5, v4, &v24);
  int v6 = v2[1];
  BOOL v7 = *v2 != 0;
  LODWORD(v24) = 0;
  agxaReserveCDMTokenSpace<AGX::HAL200::Encoders,AGX::HAL200::DataBufferAllocator>(33, v3, 44, 0, v7, v6, &v24);
  if (!*(void *)(*(void *)(a1 + 1496) + 520))
  {
    AGX::ComputeContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,AGX::HAL200::EncoderComputeServiceClasses>::restartComputePass(a1, 22);
    int v20 = v2[1];
    BOOL v21 = *v2 != 0;
    LODWORD(v24) = 0;
    agxaReserveCDMTokenSpace<AGX::HAL200::Encoders,AGX::HAL200::DataBufferAllocator>(22, v3, 36, 0, v21, v20, &v24);
    int v22 = v2[1];
    BOOL v23 = *v2 != 0;
    LODWORD(v24) = 0;
    agxaReserveCDMTokenSpace<AGX::HAL200::Encoders,AGX::HAL200::DataBufferAllocator>(33, v3, 44, 0, v23, v22, &v24);
  }
  int v8 = *v2;
  v2[160] = v2[1];
  v2[161] = 1;
  if (v8)
  {
    v2[1] = 0;
    v2[2] = 0;
    char v9 = *(_DWORD **)(a1 + 768);
    _DWORD *v9 = -1610612735;
    *(void *)(a1 + 768) = v9 + 1;
    if (*(unsigned char *)(*(void *)(a1 + 1912) + 458)) {
      int v10 = 1610618208;
    }
    else {
      int v10 = 1610613088;
    }
    v9[1] = v10;
    v2[1] = 1;
    v2[3] = 0;
    v9[2] = -1610612734;
    *(void *)(a1 + 768) = v9 + 3;
    if (*(unsigned char *)(*(void *)(a1 + 1912) + 458)) {
      int v11 = 1610618208;
    }
    else {
      int v11 = 1610613088;
    }
    v9[3] = v11;
    v9[4] = -1610612736;
    v2[1] = -1;
    v9[5] = 1610613504;
    *(void *)(a1 + 768) = v9 + 6;
    *(unsigned char *)(*(void *)(a1 + 1912) + 458) = 0;
    ++v2[4];
  }
  else if (*(_DWORD *)(a1 + 1880) == 1)
  {
    if (*(unsigned char *)(*(void *)(a1 + 1912) + 458)) {
      int v12 = 1610618208;
    }
    else {
      int v12 = 1610613088;
    }
    uint64_t v13 = *(int **)(a1 + 768);
    int *v13 = v12;
    *(void *)(a1 + 768) = v13 + 1;
    *(unsigned char *)(*(void *)(a1 + 1912) + 458) = 0;
  }
  uint64_t v14 = *(void *)(a1 + 1120);
  if (!v14)
  {
    AGX::DataBufferAllocator<34ul>::initializeOnDemandDataBufferSlow(v3);
    uint64_t v14 = *(void *)(a1 + 1120);
  }
  uint64_t v15 = *(unint64_t **)(a1 + 768);
  unint64_t *v15 = __ROR8__(*(void *)(a1 + 1136) + v14, 32) & 0xFFFFFFFF0000FFFFLL | 0x20000000;
  *(void *)(a1 + 768) = v15 + 1;
  *((unsigned char *)v2 + 584) = 1;
  long long v24 = xmmword_242EA7370;
  long long v25 = xmmword_242EA7F80;
  int v26 = 0;
  uint64_t v28 = 0;
  uint64_t v29 = 0;
  std::string __p = 0;
  unint64_t v16 = *(void *)(a1 + 17312);
  if (v16 >= *(void *)(a1 + 17320))
  {
    unint64_t v18 = std::vector<AGX::ComputeContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,AGX::HAL200::EncoderComputeServiceClasses>::VirtualSubstream,std::allocator<AGX::ComputeContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,AGX::HAL200::EncoderComputeServiceClasses>::VirtualSubstream>>::__push_back_slow_path<AGX::ComputeContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,AGX::HAL200::EncoderComputeServiceClasses>::VirtualSubstream>((void **)(a1 + 17304), (uint64_t)&v24);
    uint64_t v19 = __p;
    *(void *)(a1 + 17312) = v18;
    if (v19)
    {
      operator delete(v19);
    }
  }
  else
  {
    long long v17 = v25;
    *(_OWORD *)unint64_t v16 = v24;
    *(_OWORD *)(v16 + 16) = v17;
    *(_DWORD *)(v16 + 32) = v26;
    *(void *)(v16 + 48) = 0;
    *(void *)(v16 + 56) = 0;
    *(void *)(v16 + 40) = 0;
    *(void *)(a1 + 17312) = v16 + 64;
  }
}

void sub_242A645F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<AGX::ComputeContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,AGX::HAL200::EncoderComputeServiceClasses>::VirtualSubstream,std::allocator<AGX::ComputeContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,AGX::HAL200::EncoderComputeServiceClasses>::VirtualSubstream>>::__push_back_slow_path<AGX::ComputeContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,AGX::HAL200::EncoderComputeServiceClasses>::VirtualSubstream>(void **a1, uint64_t a2)
{
  uint64_t v2 = ((unsigned char *)a1[1] - (unsigned char *)*a1) >> 6;
  unint64_t v3 = v2 + 1;
  if ((unint64_t)(v2 + 1) >> 58) {
    abort();
  }
  uint64_t v5 = (unsigned char *)a1[2] - (unsigned char *)*a1;
  if (v5 >> 5 > v3) {
    unint64_t v3 = v5 >> 5;
  }
  BOOL v6 = (unint64_t)v5 >= 0x7FFFFFFFFFFFFFC0;
  unint64_t v7 = 0x3FFFFFFFFFFFFFFLL;
  if (!v6) {
    unint64_t v7 = v3;
  }
  if (v7 >> 58) {
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  unint64_t v9 = v7 << 6;
  int v10 = (char *)operator new(v7 << 6);
  long long v11 = *(_OWORD *)(a2 + 16);
  int v12 = &v10[64 * v2];
  uint64_t v13 = &v10[v9];
  *(_OWORD *)int v12 = *(_OWORD *)a2;
  *((_OWORD *)v12 + 1) = v11;
  *((_DWORD *)v12 + 8) = *(_DWORD *)(a2 + 32);
  *(_OWORD *)(v12 + 40) = *(_OWORD *)(a2 + 40);
  *((void *)v12 + 7) = *(void *)(a2 + 56);
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  uint64_t v14 = v12 + 64;
  uint64_t v15 = (char *)*a1;
  unint64_t v16 = (char *)a1[1];
  if (v16 == *a1)
  {
    *a1 = v12;
    a1[1] = v14;
    a1[2] = v13;
  }
  else
  {
    do
    {
      long long v17 = *((_OWORD *)v16 - 4);
      long long v18 = *((_OWORD *)v16 - 3);
      *((_DWORD *)v12 - 8) = *((_DWORD *)v16 - 8);
      *((_OWORD *)v12 - 4) = v17;
      *((_OWORD *)v12 - 3) = v18;
      *(_OWORD *)(v12 - 24) = *(_OWORD *)(v16 - 24);
      *((void *)v12 - 1) = *((void *)v16 - 1);
      v12 -= 64;
      *((void *)v16 - 3) = 0;
      *((void *)v16 - 2) = 0;
      *((void *)v16 - 1) = 0;
      v16 -= 64;
    }
    while (v16 != v15);
    unint64_t v16 = (char *)*a1;
    uint64_t v19 = (char *)a1[1];
    *a1 = v12;
    a1[1] = v14;
    a1[2] = v13;
    while (v19 != v16)
    {
      int v20 = (void *)*((void *)v19 - 3);
      if (v20)
      {
        *((void *)v19 - 2) = v20;
        operator delete(v20);
      }
      v19 -= 64;
    }
  }
  if (v16) {
    operator delete(v16);
  }
  return v14;
}

__n128 AGX::ComputeContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,AGX::HAL200::EncoderComputeServiceClasses>::bindComputeUSCSpillBuffer(__n128 *a1)
{
  uint64_t v1 = &a1[1047].n128_u32[2];
  uint64_t v2 = (__n128 *)a1[119].n128_u64[1];
  unsigned __int32 v3 = a1[1047].n128_u32[3];
  int v5 = a1[1050].n128_i32[0];
  unsigned __int32 v4 = a1[1050].n128_u32[1];
  if (v5 < 1)
  {
    unsigned __int32 v12 = 0;
    unsigned __int32 v11 = 0;
    unsigned __int32 v16 = a1[1049].n128_u32[0];
  }
  else
  {
    unint64_t v6 = a1[1051].n128_u64[0];
    int v7 = *(_DWORD *)(v6 + 5912);
    uint64_t v8 = 5936;
    if (*(_OWORD *)(v6 + 5936) == 0) {
      uint64_t v8 = 5952;
    }
    int32x2_t v9 = vmovn_s64((int64x2_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(*(int8x16_t *)(v6 + v8))))));
    unsigned __int32 v10 = a1[1049].n128_u32[3];
    unsigned __int32 v11 = a1[1049].n128_u32[2] + v10;
    unsigned __int32 v12 = (v4 + v5 + v11) * vadd_s32(vdup_lane_s32(v9, 1), v9).u32[0];
    BOOL v13 = __OFSUB__(v10, *v1);
    int v14 = v10 - *v1;
    int v15 = v14 * v7;
    if ((v14 < 0) ^ v13 | (v14 == 0)) {
      int v15 = 0;
    }
    v3 += v12 + v15;
    unsigned __int32 v16 = a1[1049].n128_u32[1] + a1[1049].n128_u32[0] + v12;
  }
  v2[23].n128_u16[4] = 0;
  v2[22].n128_u32[2] = v5;
  v2[22].n128_u32[3] = v4;
  v2[23].n128_u32[0] = v11;
  v2[23].n128_u32[1] = v12;
  v2[20].n128_u64[0] = (uint64_t)(int)((v3 + 7) & 0xFFFFFFF8) << 12;
  v2[20].n128_u64[1] = (uint64_t)(int)((v16 + 7) & 0xFFFFFFF8) << 12;
  __n128 result = a1[1048];
  v2[21] = result;
  return result;
}

void AGX::ComputeContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,AGX::HAL200::EncoderComputeServiceClasses>::bindBufferResourceToCommand(uint64_t a1, unsigned int a2, int a3)
{
  if (a3) {
    int v4 = 3;
  }
  else {
    int v4 = 1;
  }
  uint64_t v5 = a1 + 8 * a2;
  unint64_t v6 = *(uint64_t **)(v5 + 11656);
  if (v6)
  {
    if (a2 <= 0x3F && ((1 << a2) & 0xCD0ECC2000000000) != 0)
    {
      IOGPUResourceListAddResource();
    }
    else
    {
      uint64_t v8 = v5 + 11656;
      AGX::ResourceGroupUsage<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::bindResource(*(void *)(a1 + 1592), v6, 0, a2, v4);
      IOGPUResourceListAddResource();
      if (*(_DWORD *)(a1 + 1880) == 1)
      {
        uint64_t v9 = *(void *)(a1 + 16680);
        if (!v9) {
          operator new();
        }
        unsigned int v10 = *(_DWORD *)(*(void *)v8 + 48);
        int v16 = v4;
        ResourceTracker<_ResourceTrackerBinding>::addResource((float *)(v9 + 8), (float *)&v16, v10, v4);
      }
      if (a2 <= 0x22)
      {
        uint64_t v11 = a1 + 8 * a2;
        if (*(void *)(v11 + 15248))
        {
          unsigned __int32 v12 = (uint64_t *)(v11 + 15248);
          BOOL v13 = (int *)MEMORY[0x263F4B188];
          IOGPUResourceListAddResource();
          AGX::ResourceGroupUsage<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::setAndBindResource(*(void **)(a1 + 1592), *v12, v4);
          if (*(_DWORD *)(a1 + 1880) == 1)
          {
            uint64_t v14 = *(void *)(a1 + 16680);
            if (!v14) {
              operator new();
            }
            unsigned int v15 = *(_DWORD *)(*v12 + *v13 + 48);
            int v17 = v4;
            ResourceTracker<_ResourceTrackerBinding>::addResource((float *)(v14 + 8), (float *)&v17, v15, v4);
          }
        }
      }
    }
  }
}

void sub_242A64A40(_Unwind_Exception *a1)
{
  MEMORY[0x24566ED90](v1, 0x10A0C40B4CCAB04);
  _Unwind_Resume(a1);
}

uint64_t AGX::ComputeContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,AGX::HAL200::EncoderComputeServiceClasses>::bindTextureResourceToCommand(uint64_t a1, unsigned int a2, int a3)
{
  if (a3) {
    int v4 = 3;
  }
  else {
    int v4 = 1;
  }
  int v5 = 3 * a2;
  uint64_t v6 = a1 + 24 * a2;
  AGX::ResourceGroupUsage<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::bindResource(*(void *)(a1 + 1592), *(uint64_t **)(v6 + 12176), 3u, a2, v4);
  uint64_t result = IOGPUResourceListAddResource();
  if (*(_DWORD *)(a1 + 1880) == 1)
  {
    uint64_t v8 = *(void *)(a1 + 16680);
    if (!v8) {
      operator new();
    }
    unsigned int v9 = *(_DWORD *)(*(void *)(v6 + 12176) + 48);
    int v10 = v4;
    uint64_t result = (uint64_t)ResourceTracker<_ResourceTrackerBinding>::addResource((float *)(v8 + 8), (float *)&v10, v9, v4);
  }
  if (*(void *)(a1 + 8 * (v5 + 1) + 12176)) {
    uint64_t result = IOGPUResourceListAddResource();
  }
  if (*(void *)(a1 + 8 * (v5 + 2) + 12176))
  {
    return IOGPUResourceListAddResource();
  }
  return result;
}

void sub_242A64BB4(_Unwind_Exception *a1)
{
  MEMORY[0x24566ED90](v1, 0x10A0C40B4CCAB04);
  _Unwind_Resume(a1);
}

void AGX::ComputeContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,AGX::HAL200::EncoderComputeServiceClasses>::encodeBarrier(uint64_t a1, uint64_t a2)
{
  int v4 = (unsigned __int8 *)(a1 + 16677);
  if ((a2 & 0xFFFFFFFE) == 0x16 && *(void *)(a1 + 1824)) {
    AGX::ComputeIndirectExecutionContextGen4<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,AGX::HAL200::EncoderComputeServiceClasses>::patchCDMControlStreamAndReset(a1 + 1792, a1, *(void *)(a1 + 16736), *(void *)(a1 + 16744), *(void *)(a1 + 16752));
  }
  if (v4[595])
  {
    uint64_t v5 = *(void *)(a1 + 17288);
    if (*(void *)(a1 + 17280) != v5)
    {
      *(unsigned char *)(v5 - 8) = 1;
      *(unsigned char *)(v5 - 7) = *(unsigned char *)(*(void *)(a1 + 1912) + 458);
      uint64_t v6 = *(void *)(a1 + 17312);
      int v7 = *(_DWORD *)(v6 - 32);
      int v8 = *(_DWORD *)(v6 - 36) + 1;
      *(_DWORD *)(v6 - 36) = v8;
      if (*(_DWORD *)(a1 + 17332) < (v7 + v8))
      {
        BOOL v9 = *(_DWORD *)(v4 + 11) != 0;
        int v10 = *(_DWORD *)(v4 + 15);
        int v20 = 1;
        agxaReserveCDMTokenSpace<AGX::HAL200::Encoders,AGX::HAL200::DataBufferAllocator>(33, a1 + 16, 24, 0, v9, v10, &v20);
        ++*(_DWORD *)(a1 + 17332);
      }
    }
  }
  else if ((a2 - 22) <= 3)
  {
    uint64_t v11 = a1 + 16;
    int v12 = *v4;
    BOOL v13 = *(_DWORD *)(v4 + 11) != 0;
    int v14 = *(_DWORD *)(v4 + 15);
    int v15 = *(unsigned __int8 *)(*(void *)(a1 + 1912) + 458);
    int v21 = 0;
    agxaReserveCDMTokenSpace<AGX::HAL200::Encoders,AGX::HAL200::DataBufferAllocator>(a2, v11, 4, v12, v13, v14, &v21);
    if (v15) {
      int v16 = 1610618208;
    }
    else {
      int v16 = 1610613088;
    }
    uint64_t v17 = v11 + 32 * a2;
    long long v18 = *(int **)(v17 + 48);
    *long long v18 = v16;
    *(void *)(v17 + 48) = v18 + 1;
    unsigned int v19 = *(_DWORD *)(v4 + 239);
    if (*(_DWORD *)(v4 + 235) < v19) {
      *(_DWORD *)(v4 + 235) = v19;
    }
    *(_DWORD *)(v4 + 239) = 0;
  }
}

void sub_242A64E4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_242A65A0C(_Unwind_Exception *a1)
{
  MEMORY[0x24566ED90](v1, 0x10A0C40B4CCAB04);
  _Unwind_Resume(a1);
}

void sub_242A65B70(_Unwind_Exception *a1)
{
  MEMORY[0x24566ED90](v1, 0x10A0C40B4CCAB04);
  _Unwind_Resume(a1);
}

void AGX::ComputeContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,AGX::HAL200::EncoderComputeServiceClasses>::executeCommandsInBufferCommon(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  if (!*(unsigned char *)(*(void *)(a2 + 384) + 19)) {
    return;
  }
  uint64_t v5 = a1 + 16676;
  if (!*(unsigned char *)(a1 + 16676))
  {
    *(unsigned char *)uint64_t v5 = 1;
    *(void *)(a1 + 16664) = 0;
    uint64_t v6 = *(void **)(a1 + 1936);
    v6[110] = 0;
    v6[109] = 0;
    v6[114] = 0;
    v6[113] = 0;
    int v7 = *(void **)(a1 + 1936);
    v7[126] = 0;
    v7[118] = 0;
    v7[117] = 0;
  }
  if (*(void *)(a1 + 1480)) {
    MTLResourceListAddResource();
  }
  if (!*(unsigned char *)(*(void *)(a2 + 384) + 16))
  {
    uint64_t v10 = *(void *)(a1 + 1456);
    uint64_t v11 = *(void *)(*(void *)(v10 + 808) + 7408);
    int v12 = *(_DWORD *)(v11 + 4);
    int v13 = *(_DWORD *)(v5 + 88);
    if (v12 > v13)
    {
      *(_DWORD *)(v5 + 88) = v12;
      *(_DWORD *)(v5 + 84) = *(_DWORD *)v11;
      *(_OWORD *)(a1 + 16768) = *(_OWORD *)(v11 + 8);
    }
    int v14 = *(_DWORD *)(v11 + 24);
    int v15 = *(_DWORD *)(v5 + 108);
    int v16 = *(_DWORD *)(v5 + 112);
    BOOL v17 = v15 < v14;
    if (v15 > v14) {
      int v14 = *(_DWORD *)(v5 + 108);
    }
    *(_DWORD *)(v5 + 108) = v14;
    int v18 = *(_DWORD *)(v11 + 28);
    BOOL v19 = v16 < v18;
    if (v16 > v18) {
      int v18 = v16;
    }
    *(_DWORD *)(v5 + 112) = v18;
    int v20 = *(_DWORD *)(v11 + 32);
    int v21 = v19 || v17;
    int v22 = *(_DWORD *)(v5 + 116);
    int v23 = *(_DWORD *)(v5 + 120);
    BOOL v24 = v22 < v20;
    if (v22 > v20) {
      int v20 = *(_DWORD *)(v5 + 116);
    }
    *(_DWORD *)(v5 + 116) = v20;
    int v25 = *(_DWORD *)(v11 + 36);
    if (v24) {
      int v21 = 1;
    }
    BOOL v26 = v23 < v25;
    if (v23 > v25) {
      int v25 = v23;
    }
    *(_DWORD *)(v5 + 120) = v25;
    int v27 = *(_DWORD *)(v11 + 40);
    if (v26) {
      int v21 = 1;
    }
    int v28 = *(_DWORD *)(v5 + 124);
    int v29 = *(_DWORD *)(v5 + 128);
    BOOL v30 = v28 < v27;
    if (v28 > v27) {
      int v27 = *(_DWORD *)(v5 + 124);
    }
    int v31 = v30;
    *(_DWORD *)(v5 + 124) = v27;
    int v32 = *(_DWORD *)(v11 + 44);
    BOOL v33 = v29 < v32;
    if (v29 > v32) {
      int v32 = v29;
    }
    if (v33) {
      int v34 = 1;
    }
    else {
      int v34 = v31;
    }
    *(_DWORD *)(v5 + 128) = v32;
    if (v12 > v13) {
      int v35 = 1;
    }
    else {
      int v35 = v21 | v34;
    }
    if (*(unsigned char *)(*(void *)(a2 + 384) + 18))
    {
      AGX::RayPayloadSizeAlignImpl<AGX::HAL200::Classes>::merge((unsigned int *)(a1 + 1616), (unsigned int *)(*(void *)(*(void *)(v10 + 808) + 6016) + 128));
      if ((v35 & 1) == 0) {
        goto LABEL_56;
      }
    }
    else if (!v35)
    {
      goto LABEL_56;
    }
    unsigned int v9 = 0;
    goto LABEL_46;
  }
  AGX::ComputePipeline<AGX::HAL200::ObjClasses,AGX::HAL200::Classes,AGX::HAL200::Encoders>::bindResources(*(void *)(a1 + 1920));
  uint64_t v8 = *(void *)(a1 + 1920);
  unsigned int v9 = *(_DWORD *)(v8 + 212) + *(_DWORD *)(v8 + 180);
  if (AGX::SpillInfoGen3<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::checkSpillParamsForCompute(a1 + 16760, v9, *(_DWORD *)(*(void *)(v8 + 16) + 1000), *(_DWORD *)(v8 + 192), 0, 0, 0))
  {
LABEL_46:
    *(void *)(a1 + 17256) |= 0x200000000000uLL;
    uint64_t v36 = *(void *)(a1 + 1912);
    int v37 = *(_DWORD *)(v5 + 88);
    int v39 = *(_DWORD *)(v5 + 124);
    int v38 = *(_DWORD *)(v5 + 128);
    if (v39 < 1)
    {
      unsigned __int32 v46 = 0;
      int v45 = 0;
      unsigned __int32 v51 = *(_DWORD *)(v5 + 108);
    }
    else
    {
      uint64_t v40 = *(void *)(a1 + 16816);
      int v41 = *(_DWORD *)(v40 + 5912);
      uint64_t v42 = 5936;
      if (*(_OWORD *)(v40 + 5936) == 0) {
        uint64_t v42 = 5952;
      }
      int32x2_t v43 = vmovn_s64((int64x2_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(*(int8x16_t *)(v40 + v42))))));
      int v44 = *(_DWORD *)(v5 + 120);
      int v45 = *(_DWORD *)(v5 + 116) + v44;
      unsigned __int32 v46 = (v38 + v39 + v45) * vadd_s32(vdup_lane_s32(v43, 1), v43).u32[0];
      int v47 = *(_DWORD *)(v5 + 84);
      BOOL v48 = __OFSUB__(v44, v47);
      int v49 = v44 - v47;
      int v50 = v49 * v41;
      if ((v49 < 0) ^ v48 | (v49 == 0)) {
        int v50 = 0;
      }
      v37 += v46 + v50;
      unsigned __int32 v51 = *(_DWORD *)(v5 + 112) + *(_DWORD *)(v5 + 108) + v46;
    }
    *(_WORD *)(v36 + 376) = 0;
    *(_DWORD *)(v36 + 360) = v39;
    *(_DWORD *)(v36 + 364) = v38;
    *(_DWORD *)(v36 + 368) = v45;
    *(_DWORD *)(v36 + 372) = v46;
    *(void *)(v36 + 320) = (uint64_t)(int)((v37 + 7) & 0xFFFFFFF8) << 12;
    *(void *)(v36 + 328) = (uint64_t)(int)((v51 + 7) & 0xFFFFFFF8) << 12;
    *(_OWORD *)(v36 + 336) = *(_OWORD *)(a1 + 16768);
  }
  if (v9 && *(_DWORD *)*MEMORY[0x263F4B1E8]) {
    IOGPUDeviceTraceEvent();
  }
LABEL_56:
  uint64_t v52 = (int *)(a1 + 16656);
  uint64_t v53 = *(void *)(a2 + 384);
  uint64_t v54 = (int *)MEMORY[0x263F4B188];
  if (*(unsigned char *)(v53 + 17))
  {
    uint64_t v55 = (uint64_t **)(a1 + 11656);
    uint64_t v56 = -35;
    do
    {
      int v58 = *v55;
      if (*v55)
      {
        unint64_t v59 = v58[2];
        if ((v59 & 0x7FFFFFFF80) != 0)
        {
          uint64_t v60 = *(void *)(a1 + 1592);
          uint64_t v61 = *(void *)(v60 + 40);
          if (*(unsigned char *)(v61 + 480))
          {
            unsigned int v62 = (void *)(v61 + 8 * (((v56 + 35) & 0xFFFFFFC0) != 0));
            uint64_t v63 = 1 << (v56 + 35);
            BOOL v64 = (*v62 & v63) != 0;
            if (((v62[20] | *v62) & v63) != 0)
            {
              int v65 = *v55;
              if ((v59 & 0x1000000000000000) != 0) {
                int v65 = (uint64_t *)*v58;
              }
              unint64_t v66 = (v58[1] + 127) & 0xFFFFFFFFFFFFFF80;
              uint64_t v221 = v65;
              v222.i64[0] = v66;
              v222.i32[2] = v59 >> 7;
              v222.i32[3] = 1;
              BOOL v223 = v64;
              ResourceTracker<_ResourceGroupBinding>::addResource(v60, (uint64_t)&v221, *((_DWORD *)v58 + 12), 1);
            }
          }
        }
        IOGPUResourceListAddResource();
      }
      uint64_t v67 = (uint64_t)v55[449];
      if (v67)
      {
        AGX::ResourceGroupUsage<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::setAndBindResource(*(void **)(a1 + 1592), v67, 1);
        IOGPUResourceListAddResource();
      }
      ++v55;
    }
    while (!__CFADD__(v56++, 1));
    uint64_t v53 = *(void *)(a2 + 384);
  }
  if (!*(unsigned char *)(v53 + 16) || (*(unsigned char *)(*(void *)(*(void *)(a1 + 1920) + 16) + 1948) & 0x20) != 0)
  {
    uint64_t v68 = *(void *)(*(void *)(*(void *)(a1 + 1456) + 808) + 7880);
    if (v68)
    {
      IOGPUResourceListAddResource();
      uint64_t v69 = v68 + *v54;
      unint64_t v70 = *(void *)(v69 + 8);
      uint64_t v71 = *(void *)(v69 + 24);
      int v72 = *(_DWORD *)(v69 + 16);
      *(void *)(a1 + 15824) = v70;
      *(void *)(a1 + 16344) = v71;
      uint64_t v73 = *(void *)(a1 + 1936);
      *(void *)(v73 + 832) = v70;
      *(void *)(v73 + 296) = v71;
      *(_DWORD *)(a1 + 10876) = v72;
      *(_DWORD *)(a1 + 11136) = v72;
      *(_DWORD *)(a1 + 11396) = v70 >> 8;
      *(void *)(a1 + 11952) = v69;
      AGX::ResourceGroupUsage<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::setResource(*(void **)(a1 + 1592), v68, 0, 0x25u);
      *(void *)(a1 + 16624) |= 0x2000000000uLL;
      *v52 |= 1u;
      if (*(void *)(a1 + 1480)) {
        MTLResourceListAddResource();
      }
    }
  }
  AGX::ComputeContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,AGX::HAL200::EncoderComputeServiceClasses>::prepareForEnqueue(a1, 1);
  if (!*(void *)(a1 + 1824))
  {
    *(void *)(a1 + 16736) = *(void *)(a1 + 768);
    LODWORD(v221) = 0;
    agxaReserveCDMTokenSpace<AGX::HAL200::Encoders,AGX::HAL200::DataBufferAllocator>(22, a1 + 16, 16, 1, 0, 0, &v221);
    unint64_t v74 = *(_OWORD **)(a1 + 768);
    *v74++ = xmmword_242EA7F90;
    *(void *)(a1 + 768) = v74;
    *(void *)(a1 + 16744) = (char *)v74 + *(void *)(a1 + 784);
    *(void *)(a1 + 16752) = v74;
  }
  uint64_t v75 = *(void *)(a1 + 1920);
  unsigned int v76 = *(void **)(a1 + 1800);
  unint64_t v77 = v76[18] + 87;
  if (v77 <= v76[17])
  {
LABEL_78:
    v76[19] = v77;
    goto LABEL_79;
  }
  if (AGX::DataBufferAllocator<34ul>::growNoInline(*(void *)(a1 + 1800), 3, 0))
  {
    unint64_t v77 = v76[18] + 87;
    if (v77 > v76[17]) {
      goto LABEL_275;
    }
    goto LABEL_78;
  }
LABEL_79:
  uint64_t v78 = *(void *)(a1 + 1800);
  unint64_t v79 = (*(void *)(v78 + 144) + 31) & 0xFFFFFFFFFFFFFFE0;
  uint64_t v80 = *(void *)(v78 + 160);
  *(void *)(v78 + 144) = v79 + 56;
  LODWORD(v78) = *(unsigned __int8 *)(*(void *)(a2 + 384) + 16);
  *(unsigned char *)(v79 + 24) = v78;
  *(_DWORD *)(v79 + 52) = 0;
  if (v78) {
    uint64_t v81 = *(void *)(v75 + 40);
  }
  else {
    uint64_t v81 = 0;
  }
  *(void *)(v79 + 32) = v81;
  if (!*(void *)(a1 + 1824))
  {
    uint64_t v82 = *(void *)(a1 + 1800);
    uint64_t v83 = *(void *)(v82 + 896);
    uint64_t v84 = *(void *)(v82 + 880);
    *(void *)(a1 + 1824) = v83 + v84;
    *(void *)(a1 + 1840) = v84;
  }
  uint64_t v85 = v79 + v80;
  if (*a3 == 1)
  {
    *(_DWORD *)unint64_t v79 = a3[2];
    *(_DWORD *)(v79 + 4) = a3[3];
    *(void *)(v79 + 8) = 0;
    uint64_t v123 = *(void *)(a1 + 1816);
    int v124 = *(_DWORD *)(*(void *)(v123 + 16) + 3528);
    *(_WORD *)(v79 + 48) = v124;
    int v125 = a3[3] - a3[2];
    int v126 = (uint64_t *)(v125 + 1);
    if ((unsigned __int16)(*((_WORD *)a3 + 6) - *((_WORD *)a3 + 4) + 1) < (unsigned __int16)v124) {
      LOWORD(v124) = v125 + 1;
    }
    if ((v124 & 0xFFE0) != 0) {
      uint64_t v127 = 32;
    }
    else {
      uint64_t v127 = (unsigned __int16)v124;
    }
    uint64_t v128 = *v54;
    uint64_t v129 = *(void *)(a2 + 376) + v128;
    uint64_t v130 = *(void *)(v129 + 8);
    *(void *)(a1 + 15952) = v130;
    uint64_t v131 = *(void *)(a1 + 1936);
    *(void *)(v131 + 960) = v130;
    *(void *)(a1 + 12080) = v129;
    *(void *)(a1 + 16624) |= 0x20000000000000uLL;
    int v132 = *v52 | 1;
    *uint64_t v52 = v132;
    uint64_t v133 = *(void *)(a1 + 1800);
    if (!*(void *)(v133 + 368))
    {
      AGX::DataBufferAllocator<34ul>::initializeOnDemandDataBufferSlow(*(void *)(a1 + 1800));
      uint64_t v128 = *v54;
      uint64_t v131 = *(void *)(a1 + 1936);
      int v132 = *v52;
      uint64_t v123 = *(void *)(a1 + 1816);
    }
    uint64_t v134 = *(void *)(*(void *)(v133 + 24) + 672);
    *(void *)(a1 + 15944) = v85;
    *(void *)(v131 + 952) = v85;
    *(void *)(a1 + 12072) = v134 + v128;
    *(void *)(a1 + 16624) |= 0x10000000000000uLL;
    *uint64_t v52 = v132 | 1;
    uint64_t v135 = *(void *)(a1 + 1920);
    AGX::ComputeContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,AGX::HAL200::EncoderComputeServiceClasses>::setPipelineCommon(a1, v123);
    uint64_t v221 = v126;
    int64x2_t v222 = vdupq_n_s64(1uLL);
    uint64_t v224 = v127;
    int64x2_t v225 = v222;
    AGX::ComputeContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,AGX::HAL200::EncoderComputeServiceClasses>::executeKernelWithThreadsPerGridImpl(a1, 26, (int *)&v221, &v224);
    if (*(_DWORD *)(a1 + 1880) == 1)
    {
      if (*(unsigned char *)(a1 + 17272))
      {
        uint64_t v136 = *(void *)(a1 + 17288);
        if (*(void *)(a1 + 17280) != v136)
        {
          *(unsigned char *)(v136 - 8) = 1;
          *(unsigned char *)(v136 - 7) = *(unsigned char *)(*(void *)(a1 + 1912) + 458);
          uint64_t v137 = *(void *)(a1 + 17312);
          int v138 = *(_DWORD *)(v137 - 32);
          int v139 = *(_DWORD *)(v137 - 36) + 1;
          *(_DWORD *)(v137 - 36) = v139;
          if (*(_DWORD *)(a1 + 17332) < (v138 + v139))
          {
            int v140 = *(_DWORD *)(a1 + 16692);
            BOOL v141 = *(_DWORD *)(a1 + 16688) != 0;
            LODWORD(v221) = 1;
            agxaReserveCDMTokenSpace<AGX::HAL200::Encoders,AGX::HAL200::DataBufferAllocator>(33, a1 + 16, 24, 0, v141, v140, &v221);
            ++*(_DWORD *)(a1 + 17332);
          }
        }
      }
    }
    if (v135) {
      AGX::ComputeContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,AGX::HAL200::EncoderComputeServiceClasses>::setPipelineCommon(a1, v135);
    }
    goto LABEL_126;
  }
  if (*a3)
  {
LABEL_126:
    uint64_t v117 = 0;
    goto LABEL_127;
  }
  int v86 = *(void **)(a1 + 1800);
  if (!*(void *)(a1 + 1832))
  {
    uint64_t v87 = v86[114];
    *(void *)(a1 + 1832) = v86[116] + v87;
    *(void *)(a1 + 1848) = v87;
  }
  *(void *)unint64_t v79 = 0;
  *(void *)(v79 + 8) = *((void *)a3 + 1);
  uint64_t v88 = v86[46];
  if (!v88)
  {
    if (!AGX::DataBufferAllocator<34ul>::growNoInline(v86, 10, 0)) {
      goto LABEL_275;
    }
    uint64_t v88 = v86[46];
  }
  unint64_t v89 = v88 + 12;
  if (v89 <= v86[45])
  {
LABEL_90:
    v86[47] = v89;
    goto LABEL_91;
  }
  if (AGX::DataBufferAllocator<34ul>::growNoInline(v86, 10, 0))
  {
    unint64_t v89 = v86[46] + 12;
    if (v89 > v86[45]) {
      goto LABEL_275;
    }
    goto LABEL_90;
  }
LABEL_91:
  uint64_t v90 = *(void *)(a1 + 1800);
  uint64_t v91 = *(void *)(v90 + 368);
  uint64_t v92 = *(void *)(v90 + 384) + v91;
  *(void *)(v90 + 368) = v91 + 12;
  *(void *)uint64_t v91 = 805306368;
  *(_DWORD *)(v91 + 8) = 0x80000000;
  *(void *)(v79 + 16) = v92;
  int v93 = *(void **)(a1 + 1800);
  uint64_t v94 = v93[46];
  if (!v94)
  {
    if (!AGX::DataBufferAllocator<34ul>::growNoInline(*(void *)(a1 + 1800), 10, 0)) {
      goto LABEL_275;
    }
    uint64_t v94 = v93[46];
  }
  unint64_t v95 = v94 + 55;
  if (v95 > v93[45])
  {
    if (!AGX::DataBufferAllocator<34ul>::growNoInline(v93, 10, 0)) {
      goto LABEL_94;
    }
    unint64_t v95 = v93[46] + 55;
    if (v95 > v93[45]) {
      goto LABEL_275;
    }
  }
  v93[47] = v95;
LABEL_94:
  unint64_t v96 = *(void **)(a1 + 1800);
  unint64_t v97 = (v96[46] + 31) & 0xFFFFFFFFFFFFFFE0;
  uint64_t v98 = v97 + v96[48];
  v96[46] = v97 | 0x18;
  *(_OWORD *)unint64_t v97 = xmmword_242EA7FA0;
  *(void *)(v97 + 16) = 0x100000001;
  *(void *)(v79 + 40) = v98;
  *(_WORD *)(v79 + 48) = *(_DWORD *)(*(void *)(*(void *)(a1 + 1816) + 16) + 3528);
  uint64_t v99 = *v54;
  uint64_t v100 = *(void *)(a2 + 376) + v99;
  uint64_t v101 = *(void *)(v100 + 8);
  *(void *)(a1 + 15952) = v101;
  uint64_t v102 = *(void *)(a1 + 1936);
  *(void *)(v102 + 960) = v101;
  *(void *)(a1 + 12080) = v100;
  *(void *)(a1 + 16624) |= 0x20000000000000uLL;
  int v103 = *v52 | 1;
  *uint64_t v52 = v103;
  if (!v96[46])
  {
    AGX::DataBufferAllocator<34ul>::initializeOnDemandDataBufferSlow(v96);
    uint64_t v99 = *v54;
    uint64_t v102 = *(void *)(a1 + 1936);
    int v103 = *v52;
  }
  uint64_t v104 = *(void *)(v96[3] + 672);
  *(void *)(a1 + 15944) = v85;
  *(void *)(v102 + 952) = v85;
  *(void *)(a1 + 12072) = v104 + v99;
  *(void *)(a1 + 16624) |= 0x10000000000000uLL;
  *uint64_t v52 = v103 | 1;
  uint64_t v105 = *(void *)(a1 + 1920);
  AGX::ComputeContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,AGX::HAL200::EncoderComputeServiceClasses>::setPipelineCommon(a1, *(void *)(a1 + 1808));
  AGX::ComputeContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,AGX::HAL200::EncoderComputeServiceClasses>::executeKernelWithThreadsPerGridImpl(a1, 27, dword_242EAADC8, dword_242EAADC8);
  if (*(_DWORD *)(a1 + 1880) == 1)
  {
    if (*(unsigned char *)(a1 + 17272))
    {
      uint64_t v106 = *(void *)(a1 + 17288);
      if (*(void *)(a1 + 17280) != v106)
      {
        *(unsigned char *)(v106 - 8) = 1;
        *(unsigned char *)(v106 - 7) = *(unsigned char *)(*(void *)(a1 + 1912) + 458);
        uint64_t v107 = *(void *)(a1 + 17312);
        int v108 = *(_DWORD *)(v107 - 32);
        int v109 = *(_DWORD *)(v107 - 36) + 1;
        *(_DWORD *)(v107 - 36) = v109;
        if (*(_DWORD *)(a1 + 17332) < (v108 + v109))
        {
          int v110 = *(_DWORD *)(a1 + 16692);
          BOOL v111 = *(_DWORD *)(a1 + 16688) != 0;
          LODWORD(v221) = 1;
          agxaReserveCDMTokenSpace<AGX::HAL200::Encoders,AGX::HAL200::DataBufferAllocator>(33, a1 + 16, 24, 0, v111, v110, &v221);
          ++*(_DWORD *)(a1 + 17332);
        }
      }
    }
  }
  if (v105) {
    AGX::ComputeContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,AGX::HAL200::EncoderComputeServiceClasses>::setPipelineCommon(a1, v105);
  }
  uint64_t v112 = *(void *)(a1 + 1816);
  uint64_t v113 = *(void *)(a1 + 1800);
  if (!*(void *)(v113 + 368)) {
    AGX::DataBufferAllocator<34ul>::initializeOnDemandDataBufferSlow(*(void *)(a1 + 1800));
  }
  AGX::ComputeService<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,AGX::HAL200::EncoderComputeServiceClasses>::executeKernelWithThreadsIndirectInternal(a1, 26, v112, v98, *(void *)(*(void *)(v113 + 24) + 672) + *v54);
  uint64_t v114 = *(void **)(a1 + 1800);
  uint64_t v115 = v114[94];
  if ((unint64_t)(v115 + 48) > v114[93])
  {
    if (AGX::DataBufferAllocator<34ul>::growNoInline(*(void *)(a1 + 1800), 22, 0))
    {
      uint64_t v213 = v114[94];
      if ((unint64_t)(v213 + 48) > v114[93]) {
        goto LABEL_275;
      }
      v114[95] = v213 + 48;
      uint64_t v214 = v114[96] + v213;
      *(_DWORD *)uint64_t v115 = WORD2(v214) | 0x20000000;
      *(_DWORD *)(v115 + 4) = v214;
      *(void *)(v115 + 8) = v213;
    }
  }
  else
  {
    v114[95] = v115 + 48;
  }
  uint64_t v116 = *(void *)(a1 + 1800);
  uint64_t v117 = *(void *)(v116 + 752);
  ++*(_DWORD *)(a1 + 1524);
  *(void *)uint64_t v117 = 0x400010000;
  *(void *)(v117 + 8) = 0x4000000000000000;
  *(_OWORD *)(v117 + 16) = 0u;
  *(_OWORD *)(v117 + 32) = 0u;
  *(void *)(v116 + 752) = v117 + 48;
  unint64_t v118 = *(void **)(a1 + 1800);
  uint64_t v119 = v118[94];
  if ((unint64_t)(v119 + 8) > v118[93])
  {
    if (AGX::DataBufferAllocator<34ul>::growNoInline(*(void *)(a1 + 1800), 22, 0))
    {
      uint64_t v215 = v118[94];
      if ((unint64_t)(v215 + 8) > v118[93]) {
        goto LABEL_275;
      }
      v118[95] = v215 + 8;
      uint64_t v216 = v118[96] + v215;
      *(_DWORD *)uint64_t v119 = WORD2(v216) | 0x20000000;
      *(_DWORD *)(v119 + 4) = v216;
      *(void *)(v119 + 8) = v215;
    }
  }
  else
  {
    v118[95] = v119 + 8;
  }
  uint64_t v120 = *(void *)(a1 + 1800);
  uint64_t v121 = *(uint64_t **)(v120 + 752);
  *uint64_t v121 = WORD2(v92) | 0x30000000 | (v92 << 32);
  *(void *)(v120 + 752) = v121 + 1;
  unsigned int v122 = *(_DWORD *)(*(void *)(*(void *)(a1 + 1808) + 16) + 2272);
  do
  {
    v122 &= ~(1 << __clz(__rbit32(v122)));
    IOGPUResourceListAddResource();
  }
  while (v122);
LABEL_127:
  unsigned int v142 = *(_DWORD *)(*(void *)(*(void *)(a1 + 1816) + 16) + 2272);
  do
  {
    v142 &= ~(1 << __clz(__rbit32(v142)));
    IOGPUResourceListAddResource();
  }
  while (v142);
  IOGPUResourceListAddResource();
  uint64_t v143 = *(void *)(a1 + 1920);
  uint64_t v144 = *(void *)(a1 + 1936);
  uint64_t v145 = *(void *)(a2 + 384);
  uint64_t v217 = v117;
  if (*(unsigned char *)(v145 + 17))
  {
    size_t v146 = *(void **)(a1 + 1800);
    unint64_t v147 = v146[18] + 311;
    if (v147 > v146[17])
    {
      if (!AGX::DataBufferAllocator<34ul>::growNoInline(*(void *)(a1 + 1800), 3, 0))
      {
LABEL_132:
        uint64_t v148 = *(void *)(a1 + 1800);
        unint64_t v149 = (void *)((*(void *)(v148 + 144) + 31) & 0xFFFFFFFFFFFFFFE0);
        uint64_t v150 = *(void *)(v148 + 160);
        *(void *)(v148 + 144) = v149 + 35;
        memcpy(v149, (const void *)(v144 + 536), 0x118uLL);
        if (*v149)
        {
          if (v149[1]) {
            goto LABEL_134;
          }
        }
        else
        {
          void *v149 = 0;
          if (v149[1])
          {
LABEL_134:
            if (v149[2]) {
              goto LABEL_135;
            }
            goto LABEL_200;
          }
        }
        v149[1] = 0;
        if (v149[2])
        {
LABEL_135:
          if (v149[3]) {
            goto LABEL_136;
          }
          goto LABEL_201;
        }
LABEL_200:
        v149[2] = 0;
        if (v149[3])
        {
LABEL_136:
          if (v149[4]) {
            goto LABEL_137;
          }
          goto LABEL_202;
        }
LABEL_201:
        v149[3] = 0;
        if (v149[4])
        {
LABEL_137:
          if (v149[5]) {
            goto LABEL_138;
          }
          goto LABEL_203;
        }
LABEL_202:
        v149[4] = 0;
        if (v149[5])
        {
LABEL_138:
          if (v149[6]) {
            goto LABEL_139;
          }
          goto LABEL_204;
        }
LABEL_203:
        v149[5] = 0;
        if (v149[6])
        {
LABEL_139:
          if (v149[7]) {
            goto LABEL_140;
          }
          goto LABEL_205;
        }
LABEL_204:
        v149[6] = 0;
        if (v149[7])
        {
LABEL_140:
          if (v149[8]) {
            goto LABEL_141;
          }
          goto LABEL_206;
        }
LABEL_205:
        v149[7] = 0;
        if (v149[8])
        {
LABEL_141:
          if (v149[9]) {
            goto LABEL_142;
          }
          goto LABEL_207;
        }
LABEL_206:
        v149[8] = 0;
        if (v149[9])
        {
LABEL_142:
          if (v149[10]) {
            goto LABEL_143;
          }
          goto LABEL_208;
        }
LABEL_207:
        v149[9] = 0;
        if (v149[10])
        {
LABEL_143:
          if (v149[11]) {
            goto LABEL_144;
          }
          goto LABEL_209;
        }
LABEL_208:
        v149[10] = 0;
        if (v149[11])
        {
LABEL_144:
          if (v149[12]) {
            goto LABEL_145;
          }
          goto LABEL_210;
        }
LABEL_209:
        v149[11] = 0;
        if (v149[12])
        {
LABEL_145:
          if (v149[13]) {
            goto LABEL_146;
          }
          goto LABEL_211;
        }
LABEL_210:
        v149[12] = 0;
        if (v149[13])
        {
LABEL_146:
          if (v149[14]) {
            goto LABEL_147;
          }
          goto LABEL_212;
        }
LABEL_211:
        v149[13] = 0;
        if (v149[14])
        {
LABEL_147:
          if (v149[15]) {
            goto LABEL_148;
          }
          goto LABEL_213;
        }
LABEL_212:
        v149[14] = 0;
        if (v149[15])
        {
LABEL_148:
          if (v149[16]) {
            goto LABEL_149;
          }
          goto LABEL_214;
        }
LABEL_213:
        v149[15] = 0;
        if (v149[16])
        {
LABEL_149:
          if (v149[17]) {
            goto LABEL_150;
          }
          goto LABEL_215;
        }
LABEL_214:
        v149[16] = 0;
        if (v149[17])
        {
LABEL_150:
          if (v149[18]) {
            goto LABEL_151;
          }
          goto LABEL_216;
        }
LABEL_215:
        v149[17] = 0;
        if (v149[18])
        {
LABEL_151:
          if (v149[19]) {
            goto LABEL_152;
          }
          goto LABEL_217;
        }
LABEL_216:
        v149[18] = 0;
        if (v149[19])
        {
LABEL_152:
          if (v149[20]) {
            goto LABEL_153;
          }
          goto LABEL_218;
        }
LABEL_217:
        v149[19] = 0;
        if (v149[20])
        {
LABEL_153:
          if (v149[21]) {
            goto LABEL_154;
          }
          goto LABEL_219;
        }
LABEL_218:
        v149[20] = 0;
        if (v149[21])
        {
LABEL_154:
          if (v149[22]) {
            goto LABEL_155;
          }
          goto LABEL_220;
        }
LABEL_219:
        v149[21] = 0;
        if (v149[22])
        {
LABEL_155:
          if (v149[23]) {
            goto LABEL_156;
          }
          goto LABEL_221;
        }
LABEL_220:
        v149[22] = 0;
        if (v149[23])
        {
LABEL_156:
          if (v149[24]) {
            goto LABEL_157;
          }
          goto LABEL_222;
        }
LABEL_221:
        v149[23] = 0;
        if (v149[24])
        {
LABEL_157:
          if (v149[25]) {
            goto LABEL_158;
          }
          goto LABEL_223;
        }
LABEL_222:
        v149[24] = 0;
        if (v149[25])
        {
LABEL_158:
          if (v149[26]) {
            goto LABEL_159;
          }
          goto LABEL_224;
        }
LABEL_223:
        v149[25] = 0;
        if (v149[26])
        {
LABEL_159:
          if (v149[27]) {
            goto LABEL_160;
          }
          goto LABEL_225;
        }
LABEL_224:
        v149[26] = 0;
        if (v149[27])
        {
LABEL_160:
          if (v149[28]) {
            goto LABEL_161;
          }
          goto LABEL_226;
        }
LABEL_225:
        v149[27] = 0;
        if (v149[28])
        {
LABEL_161:
          if (v149[29]) {
            goto LABEL_162;
          }
          goto LABEL_227;
        }
LABEL_226:
        v149[28] = 0;
        if (v149[29])
        {
LABEL_162:
          if (v149[30]) {
            goto LABEL_163;
          }
          goto LABEL_228;
        }
LABEL_227:
        v149[29] = 0;
        if (v149[30])
        {
LABEL_163:
          if (v149[31]) {
            goto LABEL_164;
          }
          goto LABEL_229;
        }
LABEL_228:
        v149[30] = 0;
        if (v149[31])
        {
LABEL_164:
          if (v149[32]) {
            goto LABEL_165;
          }
          goto LABEL_230;
        }
LABEL_229:
        v149[31] = 0;
        if (v149[32])
        {
LABEL_165:
          if (v149[33]) {
            goto LABEL_166;
          }
          goto LABEL_231;
        }
LABEL_230:
        v149[32] = 0;
        if (v149[33])
        {
LABEL_166:
          if (v149[34]) {
            goto LABEL_167;
          }
LABEL_232:
          v149[34] = 0;
LABEL_167:
          uint64_t v151 = *(void **)(a1 + 1800);
          unint64_t v152 = v151[18] + 171;
          if (v152 > v151[17])
          {
            if (!AGX::DataBufferAllocator<34ul>::growNoInline(*(void *)(a1 + 1800), 3, 0)) {
              goto LABEL_169;
            }
            unint64_t v152 = v151[18] + 171;
            if (v152 > v151[17]) {
              goto LABEL_275;
            }
          }
          v151[19] = v152;
LABEL_169:
          unint64_t v153 = (unint64_t)v149 + v150;
          uint64_t v154 = *(void *)(a1 + 1800);
          int v155 = (_OWORD *)((*(void *)(v154 + 144) + 31) & 0xFFFFFFFFFFFFFFE0);
          uint64_t v156 = (uint64_t)v155 + *(void *)(v154 + 160);
          *(void *)(v154 + 144) = (char *)v155 + 140;
          long long v157 = *(_OWORD *)(a1 + 10604);
          long long v158 = *(_OWORD *)(a1 + 10620);
          long long v159 = *(_OWORD *)(a1 + 10652);
          v155[3] = *(_OWORD *)(a1 + 10636);
          v155[4] = v159;
          v155[1] = v157;
          _OWORD v155[2] = v158;
          *int v155 = *(_OWORD *)(a1 + 10588);
          long long v160 = *(_OWORD *)(a1 + 10668);
          long long v161 = *(_OWORD *)(a1 + 10684);
          long long v162 = *(_OWORD *)(a1 + 10700);
          *(_OWORD *)((char *)v155 + 124) = *(_OWORD *)(a1 + 10712);
          v155[6] = v161;
          v155[7] = v162;
          uint64_t v155[5] = v160;
          goto LABEL_171;
        }
LABEL_231:
        v149[33] = 0;
        if (v149[34]) {
          goto LABEL_167;
        }
        goto LABEL_232;
      }
      unint64_t v147 = v146[18] + 311;
      if (v147 > v146[17]) {
        goto LABEL_275;
      }
    }
    v146[19] = v147;
    goto LABEL_132;
  }
  uint64_t v156 = 0;
  unint64_t v153 = 0;
LABEL_171:
  unint64_t v163 = *(void **)(a1 + 1800);
  unint64_t v164 = v163[26] + 175;
  if (v164 <= v163[25])
  {
LABEL_172:
    v163[27] = v164;
    goto LABEL_173;
  }
  if (AGX::DataBufferAllocator<34ul>::growNoInline(*(void *)(a1 + 1800), 5, 0))
  {
    unint64_t v164 = v163[26] + 175;
    if (v164 > v163[25]) {
      goto LABEL_275;
    }
    goto LABEL_172;
  }
LABEL_173:
  uint64_t v218 = v145;
  uint64_t v219 = a2;
  uint64_t v165 = *(void **)(a1 + 1800);
  long long v166 = (unsigned __int8 *)((v165[26] + 63) & 0xFFFFFFFFFFFFFFC0);
  uint64_t v167 = v165[28];
  v165[26] = v166 + 112;
  if (*(unsigned char *)(v145 + 16))
  {
    uint64_t v168 = *(void *)(*(void *)(v143 + 16) + 2776);
    unint64_t v169 = v165[18] + 55;
    if (v169 > v165[17])
    {
      if (!AGX::DataBufferAllocator<34ul>::growNoInline(v165, 3, 0)) {
        goto LABEL_176;
      }
      unint64_t v169 = v165[18] + 55;
      if (v169 > v165[17]) {
        goto LABEL_275;
      }
    }
    v165[19] = v169;
LABEL_176:
    uint64_t v165 = *(void **)(a1 + 1800);
    unint64_t v170 = (v165[18] + 31) & 0xFFFFFFFFFFFFFFE0;
    uint64_t v171 = v170 + v165[20];
    uint64_t v172 = v170 | 0x18;
    v165[18] = v170 | 0x18;
    *(void *)unint64_t v170 = *(void *)(v144 + 984);
    *(void *)(v170 + 8) = *(void *)(v144 + 1000);
    *(void *)(v170 + 16) = *(void *)(v144 + 1032);
    goto LABEL_178;
  }
  uint64_t v171 = 0;
  uint64_t v172 = v165[18];
  uint64_t v168 = 0xFFFFFFFFLL;
LABEL_178:
  unint64_t v173 = v172 + 9839;
  if (v173 <= v165[17])
  {
LABEL_179:
    v165[19] = v173;
    goto LABEL_180;
  }
  if (AGX::DataBufferAllocator<34ul>::growNoInline(v165, 3, 0))
  {
    unint64_t v173 = v165[18] + 9839;
    if (v173 > v165[17]) {
      goto LABEL_275;
    }
    goto LABEL_179;
  }
LABEL_180:
  unint64_t v174 = (unint64_t)&v166[v167];
  uint64_t v175 = *(void *)(a1 + 1800);
  uint64_t v176 = (_OWORD *)((*(void *)(v175 + 144) + 31) & 0xFFFFFFFFFFFFFFE0);
  uint64_t v177 = (uint64_t)v176 + *(void *)(v175 + 160);
  *(void *)(v175 + 144) = v176 + 613;
  long long v178 = *(_OWORD *)(v144 + 928);
  long long v179 = *(_OWORD *)(v144 + 944);
  long long v180 = *(_OWORD *)(v144 + 976);
  v176[9] = *(_OWORD *)(v144 + 960);
  v176[10] = v180;
  v176[7] = v178;
  v176[8] = v179;
  long long v181 = *(_OWORD *)(v144 + 864);
  long long v182 = *(_OWORD *)(v144 + 880);
  long long v183 = *(_OWORD *)(v144 + 912);
  v176[5] = *(_OWORD *)(v144 + 896);
  v176[6] = v183;
  v176[3] = v181;
  v176[4] = v182;
  long long v184 = *(_OWORD *)(v144 + 816);
  long long v185 = *(_OWORD *)(v144 + 848);
  v176[1] = *(_OWORD *)(v144 + 832);
  v176[2] = v185;
  *uint64_t v176 = v184;
  long long v186 = *(_OWORD *)(v144 + 992);
  long long v187 = *(_OWORD *)(v144 + 1008);
  long long v188 = *(_OWORD *)(v144 + 1040);
  v176[13] = *(_OWORD *)(v144 + 1024);
  v176[14] = v188;
  v176[11] = v186;
  v176[12] = v187;
  memcpy(v176 + 15, (const void *)(a1 + 1944), 0x2560uLL);
  AGX::IndirectExecutionCommonGen4<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::emitABIStateLoadProgram(1, v166, v153, 0, v171, v177, 0, v156, 0, v168);
  uint64_t v189 = (v174 >> 16) & 0xFFC00000;
  unint64_t v190 = v174 >> 6;
  uint64_t v191 = a3;
  if (*a3 == 1)
  {
    float v192 = *(void **)(a1 + 1800);
    uint64_t v193 = v192[94];
    uint64_t v194 = v219;
    if ((unint64_t)(v193 + 48) > v192[93])
    {
      int v208 = AGX::DataBufferAllocator<34ul>::growNoInline(*(void *)(a1 + 1800), 22, 0);
      uint64_t v191 = a3;
      if (v208)
      {
        uint64_t v209 = v192[94];
        if ((unint64_t)(v209 + 48) > v192[93]) {
          goto LABEL_275;
        }
        v192[95] = v209 + 48;
        uint64_t v210 = v192[96] + v209;
        *(_DWORD *)uint64_t v193 = WORD2(v210) | 0x20000000;
        *(_DWORD *)(v193 + 4) = v210;
        *(void *)(v193 + 8) = v209;
      }
    }
    else
    {
      v192[95] = v193 + 48;
    }
    uint64_t v195 = *(void *)(a1 + 1800);
    ++*(_DWORD *)(a1 + 1524);
    uint64_t v196 = *(void *)(v195 + 752);
    *(void *)uint64_t v196 = 0x400010000;
    *(void *)(v196 + 8) = 0x4000000000000000;
    *(void *)(v196 + 24) = 0;
    *(void *)(v196 + 32) = 0;
    *(void *)(v196 + 16) = 0;
    *(_DWORD *)(v196 + 40) = v189;
    *(_DWORD *)(v196 + 44) = v190;
    *(void *)(v195 + 752) = v196 + 48;
  }
  else
  {
    *(void *)uint64_t v217 = 0x400010000;
    *(void *)(v217 + 8) = 0x4000000000000000;
    *(void *)(v217 + 24) = 0;
    *(void *)(v217 + 32) = 0;
    *(void *)(v217 + 16) = 0;
    *(_DWORD *)(v217 + 40) = v189;
    *(_DWORD *)(v217 + 44) = v190;
    uint64_t v194 = v219;
  }
  if (*v191 == 1)
  {
    uint64_t v197 = *(void *)(*(void *)(v194 + 376) + *v54 + 8);
    int v198 = v191[2];
    int v199 = *(_DWORD *)(v218 + 44);
    int v200 = *(_DWORD *)(v218 + 48);
    unsigned int v201 = *(void **)(a1 + 1800);
    uint64_t v202 = v201[94];
    if ((unint64_t)(v202 + 8) <= v201[93])
    {
      v201[95] = v202 + 8;
LABEL_188:
      uint64_t v203 = *(void *)(a1 + 1800);
      unint64_t v204 = *(uint64_t **)(v203 + 752);
      *unint64_t v204 = (unsigned __int16)((v197 + (unint64_t)(v199 + v200 * v198)) >> 32) | 0x30000000 | ((v197 + (v199 + v200 * v198)) << 32);
      *(void *)(v203 + 752) = v204 + 1;
      goto LABEL_189;
    }
    if (!AGX::DataBufferAllocator<34ul>::growNoInline(*(void *)(a1 + 1800), 22, 0)) {
      goto LABEL_188;
    }
    uint64_t v211 = v201[94];
    if ((unint64_t)(v211 + 8) <= v201[93])
    {
      v201[95] = v211 + 8;
      uint64_t v212 = v201[96] + v211;
      *(_DWORD *)uint64_t v202 = WORD2(v212) | 0x20000000;
      *(_DWORD *)(v202 + 4) = v212;
      *(void *)(v202 + 8) = v211;
      goto LABEL_188;
    }
LABEL_275:
    abort();
  }
LABEL_189:
  if (!*(_DWORD *)(a1 + 1880))
  {
    AGX::ComputeContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,AGX::HAL200::EncoderComputeServiceClasses>::encodeBarrier(a1, 22);
    *(unsigned char *)(*(void *)(a1 + 1912) + 458) = 0;
  }
  if (*(unsigned char *)(*(void *)(v194 + 384) + 16)) {
    BOOL v205 = *(unsigned char *)(*(void *)(a1 + 1920) + 332) != 0;
  }
  else {
    BOOL v205 = 1;
  }
  if (!*(unsigned char *)(a1 + 1506)) {
    BOOL v205 = 0;
  }
  uint64_t v206 = *(void *)(a1 + 1912);
  char v207 = *(unsigned char *)(v206 + 458) | v205;
  *(unsigned char *)(v206 + 458) = v207;
  *(unsigned char *)(v206 + 459) |= v207;
}