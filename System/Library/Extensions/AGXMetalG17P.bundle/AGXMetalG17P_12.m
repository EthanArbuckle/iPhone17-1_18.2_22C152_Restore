uint64_t AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, char a12)
{
  int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  BOOL v21;
  int v22;
  int v24;
  uint64_t result;
  unsigned int v26;
  unsigned int v27;
  char v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  int v33;
  uint32x2_t v34;
  int8x8_t v35;
  unsigned int v36;
  int v37;
  unsigned int v38;
  int v39;
  int v40;
  unsigned int v41;
  unsigned int v42;
  int v43;
  int v44;
  unsigned int v45;
  BOOL v46;
  int v47;
  int v49;
  uint64_t v50;
  int v51;
  BOOL v52;
  BOOL v53;
  unsigned int v54;
  unsigned int v55;
  int v56;
  uint64_t v57;
  int v58;
  BOOL v59;
  BOOL v60;
  __int32 v61;
  __int32 v62;
  uint64_t v63;
  unsigned int v64;
  unsigned int v65;
  unsigned int v66;
  unsigned int v67;
  unsigned int v68;
  unsigned int v69;
  int v70;
  uint64_t v71;
  BOOL v72;
  BOOL v73;
  int v74;
  unsigned int v75;
  int v76;
  char *v77;
  unint64_t v78;
  float32x4_t *v79;
  int v80;
  float32x4_t *v81;
  char *v82;
  int v83;
  char v84;
  unsigned int v85;
  unsigned int v86;
  uint64_t v87;
  float32x4_t v88;
  float32x4_t v89;
  float32x4_t v90;
  float32x4_t v91;
  float32x4_t v92;
  float32x4_t v93;
  float32x4_t v94;
  float32x4_t v95;
  uint64_t v96;
  unsigned int v97;
  uint64_t v98;
  float32x4_t v99;
  float32x4_t v100;
  float32x4_t v101;
  float32x4_t v102;
  float32x4_t v103;
  float32x4_t v104;
  float32x4_t v105;
  float32x4_t v106;
  uint64_t v107;
  unsigned int v108;
  uint64_t v109;
  float32x4_t v110;
  float32x4_t v111;
  float32x4_t v112;
  float32x4_t v113;
  float32x4_t v114;
  float32x4_t v115;
  float32x4_t v116;
  float32x4_t v117;
  uint64_t v118;
  unsigned int v119;
  uint64_t v120;
  float32x4_t v121;
  float32x4_t v122;
  float32x4_t v123;
  float32x4_t v124;
  float32x4_t v125;
  float32x4_t v126;
  float32x4_t v127;
  float32x4_t v128;
  uint64_t v129;
  unsigned int v130;
  uint64_t v131;
  float32x4_t v132;
  float32x4_t v133;
  float32x4_t v134;
  float32x4_t v135;
  float32x4_t v136;
  float32x4_t v137;
  float32x4_t v138;
  float32x4_t v139;
  uint64_t v140;
  unsigned int v141;
  uint64_t v142;
  float32x4_t v143;
  float32x4_t v144;
  float32x4_t v145;
  float32x4_t v146;
  float32x4_t v147;
  float32x4_t v148;
  float32x4_t v149;
  float32x4_t v150;
  uint64_t v151;
  unsigned int v152;
  uint64_t v153;
  float32x4_t v154;
  float32x4_t v155;
  float32x4_t v156;
  float32x4_t v157;
  float32x4_t v158;
  float32x4_t v159;
  float32x4_t v160;
  float32x4_t v161;
  uint64_t v162;
  unsigned int v163;
  uint64_t v164;
  float32x4_t v165;
  float32x4_t v166;
  float32x4_t v167;
  float32x4_t v168;
  float32x4_t v169;
  float32x4_t v170;
  float32x4_t v171;
  float32x4_t v172;
  uint64_t v173;
  unint64_t v174;
  uint64_t v175;
  __int8 *v176;
  unint64_t v177;
  uint64_t v178;
  unint64_t v179;
  unint64_t v180;
  unint64_t v181;
  __int8 *v182;
  BOOL v183;
  char v184;
  uint64_t v185;
  uint64_t v186;
  char *v187;
  long long *v188;
  __int8 *v189;
  unint64_t v190;
  char *v191;
  char *v192;
  char v193;
  int v194;
  uint64_t v195;
  long long *v196;
  _OWORD *v197;
  uint64_t v198;
  long long v199;
  unint64_t v200;
  uint64_t *v201;
  __int8 *v202;
  uint64_t v203;
  unsigned int v204;
  char v205;
  int v207;
  int v208;
  unsigned int v209;
  unsigned int v210;
  unsigned int v211;
  unsigned int v213;
  unsigned int v214;
  BOOL v215;
  BOOL v216;
  int8x8_t v217;
  unsigned int v218;
  __int32 v219;
  int v220;
  unsigned int v221;
  unsigned int v222;
  unsigned int v223;
  BOOL v224;
  uint64_t v227;
  int v228;
  unsigned int v229;
  uint64_t v230;
  int v231;
  unsigned int v232;
  float32x4_t *v233;
  int v234;
  unsigned int v235;
  void block[5];
  float32x4_t *v237;
  char *v238;
  unint64_t v239;
  uint64_t v240;
  unsigned int v241;
  unsigned int v242;
  unsigned int v243;
  unsigned int v244;
  unsigned __int8 v245;
  unsigned __int8 v246;
  unsigned char __dst[1024];
  int8x16_t v248;
  float32x4_t v249;
  int8x16_t v250;
  float32x4_t v251;
  int8x16_t v252;
  float32x4_t v253;
  int8x16_t v254;
  float32x4_t v255;
  float32x4_t v256;
  float32x4_t v257;
  float32x4_t v258;
  float32x4_t v259;
  float32x4_t v260;
  float32x4_t v261;
  float32x4_t v262;
  float32x4_t v263;
  float32x4_t v264;
  float32x4_t v265;
  float32x4_t v266;
  float32x4_t v267;
  float32x4_t v268;
  float32x4_t v269;
  float32x4_t v270;
  float32x4_t v271;
  float32x4_t v272;
  float32x4_t v273;
  float32x4_t v274;
  float32x4_t v275;
  float32x4_t v276;
  float32x4_t v277;
  float32x4_t v278;
  float32x4_t v279;
  int8x16_t v280;
  float32x4_t v281;
  int8x16_t v282;
  float32x4_t v283;
  int8x16_t v284;
  float32x4_t v285;
  int8x16_t v286;
  float32x4_t v287;
  float32x4_t v288;
  float32x4_t v289;
  float32x4_t v290;
  float32x4_t v291;
  float32x4_t v292;
  float32x4_t v293;
  float32x4_t v294;
  float32x4_t v295;
  float32x4_t v296;
  float32x4_t v297;
  float32x4_t v298;
  float32x4_t v299;
  float32x4_t v300;
  float32x4_t v301;
  float32x4_t v302;
  float32x4_t v303;
  float32x4_t v304;
  float32x4_t v305;
  float32x4_t v306;
  float32x4_t v307;
  float32x4_t v308;
  float32x4_t v309;
  float32x4_t v310;
  float32x4_t v311;
  uint64_t v312;

  v312 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  v229 = a8;
  v214 = a8 + a10 - 1;
  v230 = a1;
  if (*(void *)(a1 + 168)) {
    v17 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    v17 = 0;
  }
  v18 = a5 - 1;
  v19 = a6 - 1;
  v20 = a8 >> 3;
  v213 = v214 >> 3;
  v21 = (v17 & 0xD00) == 0 || v17 == 768;
  v22 = v17 & 0xE00;
  v24 = !v21 && v22 != 1024;
  v234 = v24;
  result = a1;
  if (*(unsigned char *)(a1 + 232))
  {
    v26 = *(unsigned __int8 *)(a1 + 255);
    v27 = *(unsigned __int8 *)(a1 + 254);
    v28 = __clz(v18);
    if (1 << v26 >= a6 || a5 >> v27)
    {
      if (!(a6 >> v26) && 1 << v27 < a5)
      {
        if (a6 < 2) {
          v31 = 0;
        }
        else {
          v31 = __clz(~(-1 << -(char)__clz(v19))) - 32;
        }
        v27 += v26 + v31;
        v26 = -v31;
      }
    }
    else
    {
      v29 = 32 - __clz(~(-1 << -v28));
      v30 = v27 + v26;
      if (a5 < 2) {
        v29 = 0;
      }
      v26 = v30 - v29;
      v27 = v29;
    }
    if (a5 < 2)
    {
      if (v27) {
        goto LABEL_27;
      }
    }
    else if (32 - __clz(~(-1 << -v28)) < v27)
    {
LABEL_27:
      v224 = 0;
LABEL_32:
      v221 = v27 - 4;
      v218 = v26 - 3;
      v33 = -1 << *(unsigned char *)(*(void *)(a1 + 208) + 48);
      v211 = (((~v33 + a5) & v33) + ~(-1 << v27)) >> v27;
      goto LABEL_33;
    }
    if (a6 < 2) {
      v32 = 0;
    }
    else {
      v32 = 32 - __clz(~(-1 << -(char)__clz(v19)));
    }
    v224 = v32 >= v26;
    goto LABEL_32;
  }
  v224 = 0;
  v211 = 0;
  v218 = 0;
  v221 = 0;
LABEL_33:
  if (v20 <= v213)
  {
    v223 = a7 + a9 - 1;
    v210 = a7 >> 4;
    if (a7 >> 4 <= v223 >> 4)
    {
      v232 = v18 >> 4;
      v209 = v19 >> 3;
      v231 = (v18 & 0xF) + 1;
      v208 = (v19 & 7) + 1;
      v207 = ~(-1 << v218);
      v34 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0xF00000007);
      v35 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32(vadd_s32((int32x2_t)vshl_u32(v34, (uint32x2_t)0xFFFFFFFCFFFFFFFDLL), (int32x2_t)-1))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x2000000010, v34));
      v219 = v35.i32[0] | v35.i32[1];
      v217 = v35;
      v216 = v35.i32[0] != 0;
      v215 = v35.i32[1] != 0;
      v222 = a7;
      do
      {
        v36 = (8 * v20) | 7;
        if (8 * v20 <= v229) {
          v37 = v229;
        }
        else {
          v37 = 8 * v20;
        }
        if (v214 < v36) {
          v36 = v214;
        }
        v220 = v37 - 8 * v20;
        v228 = v36 - v37 + 1;
        v38 = v210;
        v39 = v208;
        if (v20 != v209) {
          v39 = 8;
        }
        v235 = v39;
        v40 = v20 & v207;
        v227 = a3 + (v37 - v229) * a11;
        do
        {
          v41 = 16 * v38;
          v42 = 16 * (v38 + 1) - 1;
          if (16 * v38 <= a7) {
            v43 = a7;
          }
          else {
            v43 = 16 * v38;
          }
          if (v223 < v42) {
            v42 = v223;
          }
          v44 = v42 - v43 + 1;
          if (v38 == v232) {
            v45 = v231;
          }
          else {
            v45 = 16;
          }
          v46 = 1;
          if (8 * v20 >= v229 && v41 >= a7)
          {
            v47 = v231;
            if (v38 != v232) {
              v47 = 16;
            }
            v46 = v44 != v47 || v228 != v235;
          }
          if (v224)
          {
            if (v221 | v218)
            {
              v49 = 0;
              v50 = 0;
              v51 = 1;
              v52 = v218 != 0;
              v53 = v221 != 0;
              v54 = v218;
              v55 = v221;
              do
              {
                --v54;
                if (v52) {
                  v50 |= (unint64_t)(v40 & v51) << v49++;
                }
                else {
                  v54 = 0;
                }
                --v55;
                if (v53) {
                  v50 |= (unint64_t)(v38 & ~(-1 << v221) & v51) << v49++;
                }
                else {
                  v55 = 0;
                }
                v51 *= 2;
                --v49;
                v53 = v55 != 0;
                v52 = v54 != 0;
              }
              while (v55 | v54);
            }
            else
            {
              v50 = 0;
            }
            v63 = *(void *)(result + 320) * ((v38 >> v221) + (v20 >> v218) * v211) + (v50 << 10);
          }
          else
          {
            if (v219)
            {
              v56 = 0;
              v57 = 0;
              v58 = 1;
              v59 = v216;
              v60 = v215;
              v61 = v217.i32[0];
              v62 = v217.i32[1];
              do
              {
                --v61;
                if (v59) {
                  v57 |= (unint64_t)(v58 & v20) << v56++;
                }
                else {
                  v61 = 0;
                }
                --v62;
                if (v60) {
                  v57 |= (unint64_t)(v58 & v38) << v56++;
                }
                else {
                  v62 = 0;
                }
                v58 *= 2;
                --v56;
                v60 = v62 != 0;
                v59 = v61 != 0;
              }
              while (v62 | v61);
            }
            else
            {
              v57 = 0;
            }
            v63 = v57 << 10;
          }
          v64 = *(_DWORD *)(result + 128) >> (*(unsigned char *)(result + 144) + a12);
          if (v64 <= 1) {
            v64 = 1;
          }
          v65 = v64 + 15;
          if (v65 < 0x20) {
            v66 = 0;
          }
          else {
            v66 = 32 - __clz(~(-1 << -(char)__clz((v65 >> 4) - 1)));
          }
          v67 = *(_DWORD *)(result + 132) >> (*(unsigned char *)(result + 144) + a12);
          if (v67 <= 1) {
            v67 = 1;
          }
          v68 = v67 + 7;
          if (v68 < 0x10)
          {
            v69 = 0;
            if (!v66)
            {
LABEL_109:
              v71 = 0;
              goto LABEL_110;
            }
          }
          else
          {
            v69 = 32 - __clz(~(-1 << -(char)__clz((v68 >> 3) - 1)));
            if (!(v69 | v66)) {
              goto LABEL_109;
            }
          }
          v70 = 0;
          v71 = 0;
          v72 = v66 != 0;
          v73 = v69 != 0;
          v74 = 1;
          do
          {
            --v66;
            if (v72) {
              v71 |= (unint64_t)(v74 & v38) << v70++;
            }
            else {
              v66 = 0;
            }
            --v69;
            if (v73) {
              v71 |= (unint64_t)(v74 & v20) << v70++;
            }
            else {
              v69 = 0;
            }
            v74 *= 2;
            --v70;
            v73 = v69 != 0;
            v72 = v66 != 0;
          }
          while (v69 | v66);
LABEL_110:
          v75 = v43 - a7;
          v76 = v45 < 0x10 || v46;
          v77 = (char *)(a4 + 8 * v71);
          v78 = v227 + 8 * v75;
          v79 = (float32x4_t *)(a2 + v63);
          if (v235 < 8) {
            v80 = 1;
          }
          else {
            v80 = v76;
          }
          v233 = v79;
          if (v234)
          {
            v81 = (float32x4_t *)__dst;
            if (!v80) {
              goto LABEL_122;
            }
            v82 = (char *)(a4 + 8 * v71);
            v83 = v44;
            v84 = v45;
            memcpy(__dst, v79, sizeof(__dst));
            v41 = 16 * v38;
            LOBYTE(v45) = v84;
            v44 = v83;
            v77 = v82;
            v40 = v20 & v207;
            result = v230;
          }
          else
          {
            v81 = v79;
            if (!v80)
            {
LABEL_122:
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock(v78, a11, (unint64_t)v81, v77, v45, v235);
              goto LABEL_123;
            }
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE14ELj2ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = result;
          v237 = v81;
          v245 = v45;
          v246 = v235;
          v241 = v220;
          v242 = v43 - v41;
          v238 = v77;
          v239 = v78;
          v240 = a11;
          v243 = v228;
          v244 = v44;
          if (v46)
          {
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(result + 8) + 7384), block);
LABEL_123:
            a7 = v222;
            v85 = v38 + 1;
            goto LABEL_215;
          }
          v86 = *v77;
          if (v86 == 127)
          {
            v89 = v81[1];
            v90 = v81[2];
            v91 = v81[3];
            v92 = v81[4];
            v93 = v81[5];
            v94 = v81[6];
            v95 = v81[7];
            v248 = *(int8x16_t *)v81;
            v249 = v90;
            v256 = v89;
            v257 = v91;
            v264 = v92;
            v265 = v94;
            v272 = v93;
            v273 = v95;
            v87 = 128;
          }
          else if (v86 == 3)
          {
            v88 = vld1q_dup_f32(v81->f32);
            v248 = (int8x16_t)v88;
            v249 = v88;
            v256 = v88;
            v257 = v88;
            v264 = v88;
            v265 = v88;
            v272 = v88;
            v273 = v88;
            v87 = 4;
          }
          else if (*v77)
          {
            v87 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v248, 128, (uint64_t)v81, v86);
          }
          else
          {
            v87 = 0;
            v249 = 0u;
            v248 = 0u;
            v256 = 0u;
            v257 = 0u;
            v264 = 0u;
            v265 = 0u;
            v272 = 0u;
            v273 = 0u;
          }
          v96 = (uint64_t)v81 + v87;
          v97 = v77[1];
          if (v97 == 127)
          {
            v100 = *(float32x4_t *)(v96 + 16);
            v101 = *(float32x4_t *)(v96 + 32);
            v102 = *(float32x4_t *)(v96 + 48);
            v103 = *(float32x4_t *)(v96 + 64);
            v104 = *(float32x4_t *)(v96 + 80);
            v105 = *(float32x4_t *)(v96 + 96);
            v106 = *(float32x4_t *)(v96 + 112);
            v250 = *(int8x16_t *)v96;
            v251 = v101;
            v258 = v100;
            v259 = v102;
            v266 = v103;
            v267 = v105;
            v274 = v104;
            v275 = v106;
            v98 = 128;
            v85 = v38 + 1;
          }
          else
          {
            v85 = v38 + 1;
            if (v97 == 3)
            {
              v99 = vld1q_dup_f32((const float *)v96);
              v250 = (int8x16_t)v99;
              v251 = v99;
              v258 = v99;
              v259 = v99;
              v266 = v99;
              v267 = v99;
              v274 = v99;
              v275 = v99;
              v98 = 4;
            }
            else if (v77[1])
            {
              v98 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v250, 128, v96, v97);
            }
            else
            {
              v98 = 0;
              v250 = 0u;
              v251 = 0u;
              v258 = 0u;
              v259 = 0u;
              v266 = 0u;
              v267 = 0u;
              v274 = 0u;
              v275 = 0u;
            }
          }
          v107 = v96 + v98;
          v108 = v77[2];
          if (v108 == 127)
          {
            v111 = *(float32x4_t *)(v107 + 16);
            v112 = *(float32x4_t *)(v107 + 32);
            v113 = *(float32x4_t *)(v107 + 48);
            v114 = *(float32x4_t *)(v107 + 64);
            v115 = *(float32x4_t *)(v107 + 80);
            v116 = *(float32x4_t *)(v107 + 96);
            v117 = *(float32x4_t *)(v107 + 112);
            v280 = *(int8x16_t *)v107;
            v281 = v112;
            v288 = v111;
            v289 = v113;
            v296 = v114;
            v297 = v116;
            v304 = v115;
            v305 = v117;
            v109 = 128;
          }
          else if (v108 == 3)
          {
            v110 = vld1q_dup_f32((const float *)v107);
            v280 = (int8x16_t)v110;
            v281 = v110;
            v288 = v110;
            v289 = v110;
            v296 = v110;
            v297 = v110;
            v304 = v110;
            v305 = v110;
            v109 = 4;
          }
          else if (v77[2])
          {
            v109 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v280, 128, v107, v108);
          }
          else
          {
            v109 = 0;
            v280 = 0u;
            v281 = 0u;
            v288 = 0u;
            v289 = 0u;
            v296 = 0u;
            v297 = 0u;
            v304 = 0u;
            v305 = 0u;
          }
          v118 = v107 + v109;
          v119 = v77[3];
          if (v119 == 127)
          {
            v122 = *(float32x4_t *)(v118 + 16);
            v123 = *(float32x4_t *)(v118 + 32);
            v124 = *(float32x4_t *)(v118 + 48);
            v125 = *(float32x4_t *)(v118 + 64);
            v126 = *(float32x4_t *)(v118 + 80);
            v127 = *(float32x4_t *)(v118 + 96);
            v128 = *(float32x4_t *)(v118 + 112);
            v282 = *(int8x16_t *)v118;
            v283 = v123;
            v290 = v122;
            v291 = v124;
            v298 = v125;
            v299 = v127;
            v306 = v126;
            v307 = v128;
            v120 = 128;
          }
          else if (v119 == 3)
          {
            v121 = vld1q_dup_f32((const float *)v118);
            v282 = (int8x16_t)v121;
            v283 = v121;
            v290 = v121;
            v291 = v121;
            v298 = v121;
            v299 = v121;
            v306 = v121;
            v307 = v121;
            v120 = 4;
          }
          else if (v77[3])
          {
            v120 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v282, 128, v118, v119);
          }
          else
          {
            v120 = 0;
            v282 = 0u;
            v283 = 0u;
            v290 = 0u;
            v291 = 0u;
            v298 = 0u;
            v299 = 0u;
            v306 = 0u;
            v307 = 0u;
          }
          v129 = v118 + v120;
          v130 = v77[4];
          if (v130 == 127)
          {
            v133 = *(float32x4_t *)(v129 + 16);
            v134 = *(float32x4_t *)(v129 + 32);
            v135 = *(float32x4_t *)(v129 + 48);
            v136 = *(float32x4_t *)(v129 + 64);
            v137 = *(float32x4_t *)(v129 + 80);
            v138 = *(float32x4_t *)(v129 + 96);
            v139 = *(float32x4_t *)(v129 + 112);
            v252 = *(int8x16_t *)v129;
            v253 = v134;
            v260 = v133;
            v261 = v135;
            v268 = v136;
            v269 = v138;
            v276 = v137;
            v277 = v139;
            v131 = 128;
          }
          else if (v130 == 3)
          {
            v132 = vld1q_dup_f32((const float *)v129);
            v252 = (int8x16_t)v132;
            v253 = v132;
            v260 = v132;
            v261 = v132;
            v268 = v132;
            v269 = v132;
            v276 = v132;
            v277 = v132;
            v131 = 4;
          }
          else if (v77[4])
          {
            v131 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v252, 128, v129, v130);
          }
          else
          {
            v131 = 0;
            v252 = 0u;
            v253 = 0u;
            v260 = 0u;
            v261 = 0u;
            v268 = 0u;
            v269 = 0u;
            v276 = 0u;
            v277 = 0u;
          }
          v140 = v129 + v131;
          v141 = v77[5];
          if (v141 == 127)
          {
            v144 = *(float32x4_t *)(v140 + 16);
            v145 = *(float32x4_t *)(v140 + 32);
            v146 = *(float32x4_t *)(v140 + 48);
            v147 = *(float32x4_t *)(v140 + 64);
            v148 = *(float32x4_t *)(v140 + 80);
            v149 = *(float32x4_t *)(v140 + 96);
            v150 = *(float32x4_t *)(v140 + 112);
            v254 = *(int8x16_t *)v140;
            v255 = v145;
            v262 = v144;
            v263 = v146;
            v270 = v147;
            v271 = v149;
            v278 = v148;
            v279 = v150;
            v142 = 128;
          }
          else if (v141 == 3)
          {
            v143 = vld1q_dup_f32((const float *)v140);
            v254 = (int8x16_t)v143;
            v255 = v143;
            v262 = v143;
            v263 = v143;
            v270 = v143;
            v271 = v143;
            v278 = v143;
            v279 = v143;
            v142 = 4;
          }
          else if (v77[5])
          {
            v142 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v254, 128, v140, v141);
          }
          else
          {
            v142 = 0;
            v254 = 0u;
            v255 = 0u;
            v262 = 0u;
            v263 = 0u;
            v270 = 0u;
            v271 = 0u;
            v278 = 0u;
            v279 = 0u;
          }
          v151 = v140 + v142;
          v152 = v77[6];
          if (v152 == 127)
          {
            v155 = *(float32x4_t *)(v151 + 16);
            v156 = *(float32x4_t *)(v151 + 32);
            v157 = *(float32x4_t *)(v151 + 48);
            v158 = *(float32x4_t *)(v151 + 64);
            v159 = *(float32x4_t *)(v151 + 80);
            v160 = *(float32x4_t *)(v151 + 96);
            v161 = *(float32x4_t *)(v151 + 112);
            v284 = *(int8x16_t *)v151;
            v285 = v156;
            v292 = v155;
            v293 = v157;
            v300 = v158;
            v301 = v160;
            v308 = v159;
            v309 = v161;
            v153 = 128;
          }
          else if (v152 == 3)
          {
            v154 = vld1q_dup_f32((const float *)v151);
            v284 = (int8x16_t)v154;
            v285 = v154;
            v292 = v154;
            v293 = v154;
            v300 = v154;
            v301 = v154;
            v308 = v154;
            v309 = v154;
            v153 = 4;
          }
          else if (v77[6])
          {
            v153 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v284, 128, v151, v152);
          }
          else
          {
            v153 = 0;
            v284 = 0u;
            v285 = 0u;
            v292 = 0u;
            v293 = 0u;
            v300 = 0u;
            v301 = 0u;
            v308 = 0u;
            v309 = 0u;
          }
          v162 = v151 + v153;
          v163 = v77[7];
          if (v163 == 127)
          {
            v166 = *(float32x4_t *)(v162 + 16);
            v167 = *(float32x4_t *)(v162 + 32);
            v168 = *(float32x4_t *)(v162 + 48);
            v169 = *(float32x4_t *)(v162 + 80);
            v170 = *(float32x4_t *)(v162 + 96);
            v171 = *(float32x4_t *)(v162 + 112);
            v172 = *(float32x4_t *)(v162 + 64);
            v286 = *(int8x16_t *)v162;
            v287 = v167;
            v294 = v166;
            v295 = v168;
            v302 = v172;
            v303 = v170;
            v310 = v169;
            v311 = v171;
            a7 = v222;
            v164 = v243;
            if (!v243) {
              goto LABEL_214;
            }
          }
          else
          {
            a7 = v222;
            if (v163 == 3)
            {
              v165 = vld1q_dup_f32((const float *)v162);
              v286 = (int8x16_t)v165;
              v287 = v165;
              v294 = v165;
              v295 = v165;
              v302 = v165;
              v303 = v165;
              v310 = v165;
              v311 = v165;
              v164 = v243;
              if (!v243) {
                goto LABEL_214;
              }
            }
            else if (v163)
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v286, 128, v162, v163);
              v164 = v243;
              if (!v243) {
                goto LABEL_214;
              }
            }
            else
            {
              v286 = 0u;
              v287 = 0u;
              v294 = 0u;
              v295 = 0u;
              v302 = 0u;
              v303 = 0u;
              v310 = 0u;
              v311 = 0u;
              v164 = v243;
              if (!v243) {
                goto LABEL_214;
              }
            }
          }
          if (v244)
          {
            v173 = 0;
            v174 = (unint64_t)v241 << 7;
            v175 = 8 * v242;
            v176 = &v248.i8[v174 + v175];
            v177 = v239;
            v178 = v240;
            v179 = 8 * v244;
            if (v179 <= 1) {
              v180 = 1;
            }
            else {
              v180 = 8 * v244;
            }
            v181 = v174 + v175;
            v182 = &v248.i8[v174 + v175];
            if (v180) {
              v183 = (v180 - 1) >> 32 == 0;
            }
            else {
              v183 = 0;
            }
            v184 = !v183;
            v185 = v180 & 0x7FFFFFFE0;
            v186 = v180 & 0x7FFFFFFF8;
            v187 = (char *)&v249 + v181;
            v188 = (long long *)(v239 + 16);
            v189 = v176;
            v190 = v239;
            do
            {
              v191 = (char *)(v177 + v178 * v173);
              v192 = &v176[128 * v173];
              if ((unint64_t)(&v182[128 * v173] - v191) < 0x20) {
                v193 = 1;
              }
              else {
                v193 = v184;
              }
              if (v193)
              {
                v194 = 0;
                goto LABEL_211;
              }
              if (v180 >= 0x20)
              {
                v196 = v188;
                v197 = v187;
                v198 = v180 & 0x7FFFFFFE0;
                do
                {
                  v199 = *v196;
                  *(v197 - 1) = *(v196 - 1);
                  *v197 = v199;
                  v197 += 2;
                  v196 += 2;
                  v198 -= 32;
                }
                while (v198);
                if (v180 == v185) {
                  goto LABEL_194;
                }
                v195 = v180 & 0x7FFFFFFE0;
                if ((v180 & 0x18) == 0)
                {
                  v191 += v185;
                  v192 += v185;
                  v194 = v180 & 0xFFFFFFE0;
                  goto LABEL_211;
                }
              }
              else
              {
                v195 = 0;
              }
              v192 += v186;
              v200 = v195 - (v180 & 0x7FFFFFFF8);
              v201 = (uint64_t *)(v190 + v195);
              v202 = &v189[v195];
              do
              {
                v203 = *v201++;
                *(void *)v202 = v203;
                v202 += 8;
                v200 += 8;
              }
              while (v200);
              if (v180 == v186) {
                goto LABEL_194;
              }
              v191 += v186;
              v194 = v180 & 0xFFFFFFF8;
LABEL_211:
              v204 = v194 + 1;
              do
              {
                v205 = *v191++;
                *v192++ = v205;
              }
              while (v179 > v204++);
LABEL_194:
              ++v173;
              v187 += 128;
              v188 = (long long *)((char *)v188 + v178);
              v190 += v178;
              v189 += 128;
            }
            while (v173 != v164);
          }
LABEL_214:
          AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)&v248, 128, (unint64_t)v237, v238, v245, v246);
LABEL_215:
          if (v234) {
            memcpy(v233, v81, 0x400uLL);
          }
          v21 = v38 == v223 >> 4;
          v38 = v85;
          result = v230;
        }
        while (!v21);
        v21 = v20++ == v213;
      }
      while (!v21);
    }
  }
  return result;
}

uint64_t AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, char a12)
{
  uint64_t v360 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v279 = a8;
  unsigned int v258 = a8 + a10 - 1;
  uint64_t v280 = a1;
  if (*(void *)(a1 + 168)) {
    int v17 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v17 = 0;
  }
  unsigned int v18 = a5 - 1;
  unsigned int v19 = a6 - 1;
  unsigned int v20 = a8 >> 3;
  unsigned int v257 = v258 >> 3;
  BOOL v21 = (v17 & 0xD00) == 0 || v17 == 768;
  int v22 = v17 & 0xE00;
  int v24 = !v21 && v22 != 1024;
  int v283 = v24;
  uint64_t result = a1;
  if (*(unsigned char *)(a1 + 232))
  {
    unsigned int v26 = *(unsigned __int8 *)(a1 + 255);
    unsigned int v27 = *(unsigned __int8 *)(a1 + 254);
    char v28 = __clz(v18);
    if (1 << v26 >= a6 || a5 >> v27)
    {
      if (!(a6 >> v26) && 1 << v27 < a5)
      {
        if (a6 < 2) {
          unsigned int v31 = 0;
        }
        else {
          unsigned int v31 = __clz(~(-1 << -(char)__clz(v19))) - 32;
        }
        v27 += v26 + v31;
        unsigned int v26 = -v31;
      }
    }
    else
    {
      unsigned int v29 = 32 - __clz(~(-1 << -v28));
      unsigned int v30 = v27 + v26;
      if (a5 < 2) {
        unsigned int v29 = 0;
      }
      unsigned int v26 = v30 - v29;
      unsigned int v27 = v29;
    }
    if (a5 < 2)
    {
      if (v27) {
        goto LABEL_27;
      }
    }
    else if (32 - __clz(~(-1 << -v28)) < v27)
    {
LABEL_27:
      BOOL v272 = 0;
LABEL_32:
      unsigned int v268 = v27 - 4;
      unsigned int v264 = v26 - 3;
      int v33 = -1 << *(unsigned char *)(*(void *)(a1 + 208) + 48);
      unsigned int v255 = (((~v33 + a5) & v33) + ~(-1 << v27)) >> v27;
      goto LABEL_33;
    }
    if (a6 < 2) {
      unsigned int v32 = 0;
    }
    else {
      unsigned int v32 = 32 - __clz(~(-1 << -(char)__clz(v19)));
    }
    BOOL v272 = v32 >= v26;
    goto LABEL_32;
  }
  BOOL v272 = 0;
  unsigned int v255 = 0;
  unsigned int v264 = 0;
  unsigned int v268 = 0;
LABEL_33:
  if (v20 <= v257)
  {
    unsigned int v271 = a7 + a9 - 1;
    unsigned int v254 = a7 >> 4;
    if (a7 >> 4 <= v271 >> 4)
    {
      unsigned int v282 = v18 >> 4;
      unsigned int v253 = v19 >> 3;
      int v281 = (v18 & 0xF) + 1;
      int v252 = (v19 & 7) + 1;
      int v251 = ~(-1 << v264);
      uint32x2_t v34 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0xF00000007);
      int8x8_t v35 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32(vadd_s32((int32x2_t)vshl_u32(v34, (uint32x2_t)0xFFFFFFFCFFFFFFFDLL), (int32x2_t)-1))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x2000000010, v34));
      __int32 v265 = v35.i32[0] | v35.i32[1];
      int8x8_t v263 = v35;
      BOOL v262 = v35.i32[0] != 0;
      BOOL v261 = v35.i32[1] != 0;
      uint64_t v36 = a11;
      uint64_t v37 = 4 * a11;
      uint64_t v38 = 2 * a11;
      unsigned int v270 = a7;
      do
      {
        unsigned int v39 = (8 * v20) | 7;
        if (8 * v20 <= v279) {
          int v40 = v279;
        }
        else {
          int v40 = 8 * v20;
        }
        if (v258 < v39) {
          unsigned int v39 = v258;
        }
        unsigned int v278 = 8 * v20;
        int v267 = v40 - 8 * v20;
        int v277 = v39 - v40 + 1;
        unsigned int v41 = v254;
        if (v20 == v253) {
          unsigned int v42 = v252;
        }
        else {
          unsigned int v42 = 8;
        }
        int v266 = (v20 >> v264) * v255;
        int v43 = v20 & v251;
        uint64_t v275 = a3 + (v40 - v279) * v36;
        int v276 = v20 & v251;
        unsigned int v260 = v20;
        unsigned int v259 = v42;
        do
        {
          unsigned int v44 = 16 * v41;
          unsigned int v45 = 16 * (v41 + 1) - 1;
          if (16 * v41 <= a7) {
            int v46 = a7;
          }
          else {
            int v46 = 16 * v41;
          }
          if (v271 < v45) {
            unsigned int v45 = v271;
          }
          int v47 = v45 - v46 + 1;
          if (v41 == v282) {
            unsigned int v48 = v281;
          }
          else {
            unsigned int v48 = 16;
          }
          BOOL v49 = 1;
          if (v278 >= v279 && v44 >= a7)
          {
            int v50 = v281;
            if (v41 != v282) {
              int v50 = 16;
            }
            BOOL v49 = v47 != v50 || v277 != v42;
          }
          if (v272)
          {
            if (v268 | v264)
            {
              int v52 = 0;
              uint64_t v53 = 0;
              int v54 = 1;
              BOOL v55 = v264 != 0;
              BOOL v56 = v268 != 0;
              unsigned int v57 = v264;
              unsigned int v58 = v268;
              do
              {
                --v57;
                if (v55) {
                  v53 |= (unint64_t)(v43 & v54) << v52++;
                }
                else {
                  unsigned int v57 = 0;
                }
                --v58;
                if (v56) {
                  v53 |= (unint64_t)(v41 & ~(-1 << v268) & v54) << v52++;
                }
                else {
                  unsigned int v58 = 0;
                }
                v54 *= 2;
                --v52;
                BOOL v56 = v58 != 0;
                BOOL v55 = v57 != 0;
              }
              while (v58 | v57);
            }
            else
            {
              uint64_t v53 = 0;
            }
            uint64_t v66 = *(void *)(result + 320) * ((v41 >> v268) + v266) + (v53 << 10);
          }
          else
          {
            if (v265)
            {
              int v59 = 0;
              uint64_t v60 = 0;
              int v61 = 1;
              BOOL v62 = v262;
              BOOL v63 = v261;
              __int32 v64 = v263.i32[0];
              __int32 v65 = v263.i32[1];
              do
              {
                --v64;
                if (v62) {
                  v60 |= (unint64_t)(v61 & v20) << v59++;
                }
                else {
                  __int32 v64 = 0;
                }
                --v65;
                if (v63) {
                  v60 |= (unint64_t)(v61 & v41) << v59++;
                }
                else {
                  __int32 v65 = 0;
                }
                v61 *= 2;
                --v59;
                BOOL v63 = v65 != 0;
                BOOL v62 = v64 != 0;
              }
              while (v65 | v64);
            }
            else
            {
              uint64_t v60 = 0;
            }
            uint64_t v66 = v60 << 10;
          }
          unsigned int v67 = *(_DWORD *)(result + 128) >> (*(unsigned char *)(result + 144) + a12);
          if (v67 <= 1) {
            unsigned int v67 = 1;
          }
          unsigned int v68 = v67 + 15;
          if (v68 < 0x20) {
            unsigned int v69 = 0;
          }
          else {
            unsigned int v69 = 32 - __clz(~(-1 << -(char)__clz((v68 >> 4) - 1)));
          }
          unsigned int v70 = *(_DWORD *)(result + 132) >> (*(unsigned char *)(result + 144) + a12);
          if (v70 <= 1) {
            unsigned int v70 = 1;
          }
          unsigned int v71 = v70 + 7;
          if (v71 < 0x10)
          {
            unsigned int v72 = 0;
            if (!v69)
            {
LABEL_111:
              uint64_t v74 = 0;
              goto LABEL_112;
            }
          }
          else
          {
            unsigned int v72 = 32 - __clz(~(-1 << -(char)__clz((v71 >> 3) - 1)));
            if (!(v72 | v69)) {
              goto LABEL_111;
            }
          }
          int v73 = 0;
          uint64_t v74 = 0;
          BOOL v75 = v69 != 0;
          BOOL v76 = v72 != 0;
          int v77 = 1;
          do
          {
            --v69;
            if (v75) {
              v74 |= (unint64_t)(v77 & v41) << v73++;
            }
            else {
              unsigned int v69 = 0;
            }
            --v72;
            if (v76) {
              v74 |= (unint64_t)(v77 & v20) << v73++;
            }
            else {
              unsigned int v72 = 0;
            }
            v77 *= 2;
            --v73;
            BOOL v76 = v72 != 0;
            BOOL v75 = v69 != 0;
          }
          while (v72 | v69);
LABEL_112:
          unsigned int v78 = v46 - a7;
          int v79 = v48 < 0x10 || v49;
          v80 = (char *)(a4 + 8 * v74);
          uint64_t v81 = v275 + 8 * v78;
          v82 = (int8x16_t *)(a2 + v66);
          if (v42 < 8) {
            int v83 = 1;
          }
          else {
            int v83 = v79;
          }
          if (v283)
          {
            if (v83)
            {
              uint64_t v84 = v36;
              int v85 = v47;
              BOOL v86 = v49;
              int v87 = v46;
              memcpy(__dst, v82, sizeof(__dst));
              int v46 = v87;
              BOOL v49 = v86;
              unsigned int v20 = v260;
              unsigned int v44 = 16 * v41;
              unsigned int v42 = v259;
              int v47 = v85;
              uint64_t v36 = v84;
              v88 = (int8x16_t *)__dst;
              uint64_t result = v280;
LABEL_122:
              v269 = v82;
              block[0] = MEMORY[0x263EF8330];
              block[1] = 3221225472;
              block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE14ELj2ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
              block[3] = &__block_descriptor_90_e5_v8__0l;
              block[4] = result;
              v285 = v88;
              unsigned __int8 v293 = v48;
              unsigned __int8 v294 = v42;
              unsigned int v289 = v267;
              unsigned int v290 = v46 - v44;
              v286 = v80;
              uint64_t v287 = v81;
              uint64_t v288 = v36;
              unsigned int v291 = v277;
              unsigned int v292 = v47;
              if (v49)
              {
                dispatch_sync(*(dispatch_queue_t *)(*(void *)(result + 8) + 7384), block);
                uint64_t result = v280;
                a7 = v270;
                uint64_t v38 = 2 * a11;
                uint64_t v37 = 4 * a11;
                int v43 = v276;
                unsigned int v89 = v41 + 1;
                goto LABEL_242;
              }
              unsigned int v110 = *v80;
              if (v110 == 127)
              {
                float32x4_t v113 = (float32x4_t)v88[1];
                float32x4_t v114 = (float32x4_t)v88[2];
                float32x4_t v115 = (float32x4_t)v88[3];
                float32x4_t v116 = (float32x4_t)v88[4];
                float32x4_t v117 = (float32x4_t)v88[5];
                float32x4_t v118 = (float32x4_t)v88[6];
                float32x4_t v119 = (float32x4_t)v88[7];
                int8x16_t v296 = *v88;
                float32x4_t v297 = v114;
                float32x4_t v304 = v113;
                float32x4_t v305 = v115;
                float32x4_t v312 = v116;
                float32x4_t v313 = v118;
                float32x4_t v320 = v117;
                float32x4_t v321 = v119;
                uint64_t v111 = 128;
              }
              else if (v110 == 3)
              {
                float32x4_t v112 = vld1q_dup_f32((const float *)v88->i32);
                int8x16_t v296 = (int8x16_t)v112;
                float32x4_t v297 = v112;
                float32x4_t v304 = v112;
                float32x4_t v305 = v112;
                float32x4_t v312 = v112;
                float32x4_t v313 = v112;
                float32x4_t v320 = v112;
                float32x4_t v321 = v112;
                uint64_t v111 = 4;
              }
              else if (*v80)
              {
                uint64_t v111 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v296, 128, (uint64_t)v88, v110);
              }
              else
              {
                uint64_t v111 = 0;
                float32x4_t v297 = 0u;
                int8x16_t v296 = 0u;
                float32x4_t v304 = 0u;
                float32x4_t v305 = 0u;
                float32x4_t v312 = 0u;
                float32x4_t v313 = 0u;
                float32x4_t v320 = 0u;
                float32x4_t v321 = 0u;
              }
              uint64_t v120 = (uint64_t)v88->i64 + v111;
              unsigned int v121 = v80[1];
              if (v121 == 127)
              {
                float32x4_t v124 = *(float32x4_t *)(v120 + 16);
                float32x4_t v125 = *(float32x4_t *)(v120 + 32);
                float32x4_t v126 = *(float32x4_t *)(v120 + 48);
                float32x4_t v127 = *(float32x4_t *)(v120 + 64);
                float32x4_t v128 = *(float32x4_t *)(v120 + 80);
                float32x4_t v129 = *(float32x4_t *)(v120 + 96);
                float32x4_t v130 = *(float32x4_t *)(v120 + 112);
                int8x16_t v298 = *(int8x16_t *)v120;
                float32x4_t v299 = v125;
                float32x4_t v306 = v124;
                float32x4_t v307 = v126;
                float32x4_t v314 = v127;
                float32x4_t v315 = v129;
                float32x4_t v322 = v128;
                float32x4_t v323 = v130;
                uint64_t v122 = 128;
              }
              else if (v121 == 3)
              {
                float32x4_t v123 = vld1q_dup_f32((const float *)v120);
                int8x16_t v298 = (int8x16_t)v123;
                float32x4_t v299 = v123;
                float32x4_t v306 = v123;
                float32x4_t v307 = v123;
                float32x4_t v314 = v123;
                float32x4_t v315 = v123;
                float32x4_t v322 = v123;
                float32x4_t v323 = v123;
                uint64_t v122 = 4;
              }
              else if (v80[1])
              {
                uint64_t v122 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v298, 128, v120, v121);
              }
              else
              {
                uint64_t v122 = 0;
                int8x16_t v298 = 0u;
                float32x4_t v299 = 0u;
                float32x4_t v306 = 0u;
                float32x4_t v307 = 0u;
                float32x4_t v314 = 0u;
                float32x4_t v315 = 0u;
                float32x4_t v322 = 0u;
                float32x4_t v323 = 0u;
              }
              uint64_t v131 = v120 + v122;
              unsigned int v132 = v80[2];
              if (v132 == 127)
              {
                float32x4_t v135 = *(float32x4_t *)(v131 + 16);
                float32x4_t v136 = *(float32x4_t *)(v131 + 32);
                float32x4_t v137 = *(float32x4_t *)(v131 + 48);
                float32x4_t v138 = *(float32x4_t *)(v131 + 64);
                float32x4_t v139 = *(float32x4_t *)(v131 + 80);
                float32x4_t v140 = *(float32x4_t *)(v131 + 96);
                float32x4_t v141 = *(float32x4_t *)(v131 + 112);
                int8x16_t v328 = *(int8x16_t *)v131;
                float32x4_t v329 = v136;
                float32x4_t v336 = v135;
                float32x4_t v337 = v137;
                float32x4_t v344 = v138;
                float32x4_t v345 = v140;
                float32x4_t v352 = v139;
                float32x4_t v353 = v141;
                uint64_t v133 = 128;
              }
              else if (v132 == 3)
              {
                float32x4_t v134 = vld1q_dup_f32((const float *)v131);
                int8x16_t v328 = (int8x16_t)v134;
                float32x4_t v329 = v134;
                float32x4_t v336 = v134;
                float32x4_t v337 = v134;
                float32x4_t v344 = v134;
                float32x4_t v345 = v134;
                float32x4_t v352 = v134;
                float32x4_t v353 = v134;
                uint64_t v133 = 4;
              }
              else if (v80[2])
              {
                uint64_t v133 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v328, 128, v131, v132);
              }
              else
              {
                uint64_t v133 = 0;
                int8x16_t v328 = 0u;
                float32x4_t v329 = 0u;
                float32x4_t v336 = 0u;
                float32x4_t v337 = 0u;
                float32x4_t v344 = 0u;
                float32x4_t v345 = 0u;
                float32x4_t v352 = 0u;
                float32x4_t v353 = 0u;
              }
              uint64_t v142 = v131 + v133;
              unsigned int v143 = v80[3];
              if (v143 == 127)
              {
                float32x4_t v146 = *(float32x4_t *)(v142 + 16);
                float32x4_t v147 = *(float32x4_t *)(v142 + 32);
                float32x4_t v148 = *(float32x4_t *)(v142 + 48);
                float32x4_t v149 = *(float32x4_t *)(v142 + 64);
                float32x4_t v150 = *(float32x4_t *)(v142 + 80);
                float32x4_t v151 = *(float32x4_t *)(v142 + 96);
                float32x4_t v152 = *(float32x4_t *)(v142 + 112);
                int8x16_t v330 = *(int8x16_t *)v142;
                float32x4_t v331 = v147;
                float32x4_t v338 = v146;
                float32x4_t v339 = v148;
                float32x4_t v346 = v149;
                float32x4_t v347 = v151;
                float32x4_t v354 = v150;
                float32x4_t v355 = v152;
                uint64_t v144 = 128;
              }
              else if (v143 == 3)
              {
                float32x4_t v145 = vld1q_dup_f32((const float *)v142);
                int8x16_t v330 = (int8x16_t)v145;
                float32x4_t v331 = v145;
                float32x4_t v338 = v145;
                float32x4_t v339 = v145;
                float32x4_t v346 = v145;
                float32x4_t v347 = v145;
                float32x4_t v354 = v145;
                float32x4_t v355 = v145;
                uint64_t v144 = 4;
              }
              else if (v80[3])
              {
                uint64_t v144 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v330, 128, v142, v143);
              }
              else
              {
                uint64_t v144 = 0;
                int8x16_t v330 = 0u;
                float32x4_t v331 = 0u;
                float32x4_t v338 = 0u;
                float32x4_t v339 = 0u;
                float32x4_t v346 = 0u;
                float32x4_t v347 = 0u;
                float32x4_t v354 = 0u;
                float32x4_t v355 = 0u;
              }
              uint64_t v153 = v142 + v144;
              unsigned int v154 = v80[4];
              if (v154 == 127)
              {
                float32x4_t v157 = *(float32x4_t *)(v153 + 16);
                float32x4_t v158 = *(float32x4_t *)(v153 + 32);
                float32x4_t v159 = *(float32x4_t *)(v153 + 48);
                float32x4_t v160 = *(float32x4_t *)(v153 + 64);
                float32x4_t v161 = *(float32x4_t *)(v153 + 80);
                float32x4_t v162 = *(float32x4_t *)(v153 + 96);
                float32x4_t v163 = *(float32x4_t *)(v153 + 112);
                int8x16_t v300 = *(int8x16_t *)v153;
                float32x4_t v301 = v158;
                float32x4_t v308 = v157;
                float32x4_t v309 = v159;
                float32x4_t v316 = v160;
                float32x4_t v317 = v162;
                float32x4_t v324 = v161;
                float32x4_t v325 = v163;
                uint64_t v155 = 128;
              }
              else if (v154 == 3)
              {
                float32x4_t v156 = vld1q_dup_f32((const float *)v153);
                int8x16_t v300 = (int8x16_t)v156;
                float32x4_t v301 = v156;
                float32x4_t v308 = v156;
                float32x4_t v309 = v156;
                float32x4_t v316 = v156;
                float32x4_t v317 = v156;
                float32x4_t v324 = v156;
                float32x4_t v325 = v156;
                uint64_t v155 = 4;
              }
              else if (v80[4])
              {
                uint64_t v155 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v300, 128, v153, v154);
              }
              else
              {
                uint64_t v155 = 0;
                int8x16_t v300 = 0u;
                float32x4_t v301 = 0u;
                float32x4_t v308 = 0u;
                float32x4_t v309 = 0u;
                float32x4_t v316 = 0u;
                float32x4_t v317 = 0u;
                float32x4_t v324 = 0u;
                float32x4_t v325 = 0u;
              }
              uint64_t v164 = v153 + v155;
              unsigned int v165 = v80[5];
              if (v165 == 127)
              {
                float32x4_t v168 = *(float32x4_t *)(v164 + 16);
                float32x4_t v169 = *(float32x4_t *)(v164 + 32);
                float32x4_t v170 = *(float32x4_t *)(v164 + 48);
                float32x4_t v171 = *(float32x4_t *)(v164 + 64);
                float32x4_t v172 = *(float32x4_t *)(v164 + 80);
                float32x4_t v173 = *(float32x4_t *)(v164 + 96);
                float32x4_t v174 = *(float32x4_t *)(v164 + 112);
                int8x16_t v302 = *(int8x16_t *)v164;
                float32x4_t v303 = v169;
                float32x4_t v310 = v168;
                float32x4_t v311 = v170;
                float32x4_t v318 = v171;
                float32x4_t v319 = v173;
                float32x4_t v326 = v172;
                float32x4_t v327 = v174;
                uint64_t v166 = 128;
              }
              else if (v165 == 3)
              {
                float32x4_t v167 = vld1q_dup_f32((const float *)v164);
                int8x16_t v302 = (int8x16_t)v167;
                float32x4_t v303 = v167;
                float32x4_t v310 = v167;
                float32x4_t v311 = v167;
                float32x4_t v318 = v167;
                float32x4_t v319 = v167;
                float32x4_t v326 = v167;
                float32x4_t v327 = v167;
                uint64_t v166 = 4;
              }
              else if (v80[5])
              {
                uint64_t v166 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v302, 128, v164, v165);
              }
              else
              {
                uint64_t v166 = 0;
                int8x16_t v302 = 0u;
                float32x4_t v303 = 0u;
                float32x4_t v310 = 0u;
                float32x4_t v311 = 0u;
                float32x4_t v318 = 0u;
                float32x4_t v319 = 0u;
                float32x4_t v326 = 0u;
                float32x4_t v327 = 0u;
              }
              uint64_t v175 = v164 + v166;
              unsigned int v176 = v80[6];
              if (v176 == 127)
              {
                float32x4_t v179 = *(float32x4_t *)(v175 + 16);
                float32x4_t v180 = *(float32x4_t *)(v175 + 32);
                float32x4_t v181 = *(float32x4_t *)(v175 + 48);
                float32x4_t v182 = *(float32x4_t *)(v175 + 64);
                float32x4_t v183 = *(float32x4_t *)(v175 + 80);
                float32x4_t v184 = *(float32x4_t *)(v175 + 96);
                float32x4_t v185 = *(float32x4_t *)(v175 + 112);
                int8x16_t v332 = *(int8x16_t *)v175;
                float32x4_t v333 = v180;
                float32x4_t v340 = v179;
                float32x4_t v341 = v181;
                float32x4_t v348 = v182;
                float32x4_t v349 = v184;
                float32x4_t v356 = v183;
                float32x4_t v357 = v185;
                uint64_t v177 = 128;
              }
              else if (v176 == 3)
              {
                float32x4_t v178 = vld1q_dup_f32((const float *)v175);
                int8x16_t v332 = (int8x16_t)v178;
                float32x4_t v333 = v178;
                float32x4_t v340 = v178;
                float32x4_t v341 = v178;
                float32x4_t v348 = v178;
                float32x4_t v349 = v178;
                float32x4_t v356 = v178;
                float32x4_t v357 = v178;
                uint64_t v177 = 4;
              }
              else if (v80[6])
              {
                uint64_t v177 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v332, 128, v175, v176);
              }
              else
              {
                uint64_t v177 = 0;
                int8x16_t v332 = 0u;
                float32x4_t v333 = 0u;
                float32x4_t v340 = 0u;
                float32x4_t v341 = 0u;
                float32x4_t v348 = 0u;
                float32x4_t v349 = 0u;
                float32x4_t v356 = 0u;
                float32x4_t v357 = 0u;
              }
              uint64_t v186 = v175 + v177;
              unsigned int v187 = v80[7];
              if (v187 == 127)
              {
                float32x4_t v190 = *(float32x4_t *)(v186 + 16);
                float32x4_t v191 = *(float32x4_t *)(v186 + 32);
                float32x4_t v192 = *(float32x4_t *)(v186 + 48);
                float32x4_t v193 = *(float32x4_t *)(v186 + 80);
                float32x4_t v194 = *(float32x4_t *)(v186 + 96);
                float32x4_t v195 = *(float32x4_t *)(v186 + 112);
                float32x4_t v196 = *(float32x4_t *)(v186 + 64);
                int8x16_t v334 = *(int8x16_t *)v186;
                float32x4_t v335 = v191;
                float32x4_t v342 = v190;
                float32x4_t v343 = v192;
                float32x4_t v350 = v196;
                float32x4_t v351 = v194;
                float32x4_t v358 = v193;
                float32x4_t v359 = v195;
                a7 = v270;
                uint64_t v188 = v291;
                if (v291) {
                  goto LABEL_198;
                }
              }
              else
              {
                a7 = v270;
                if (v187 != 3)
                {
                  if (v187)
                  {
                    AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v334, 128, v186, v187);
                    uint64_t v188 = v291;
                    if (!v291) {
                      goto LABEL_229;
                    }
                  }
                  else
                  {
                    int8x16_t v334 = 0u;
                    float32x4_t v335 = 0u;
                    float32x4_t v342 = 0u;
                    float32x4_t v343 = 0u;
                    float32x4_t v350 = 0u;
                    float32x4_t v351 = 0u;
                    float32x4_t v358 = 0u;
                    float32x4_t v359 = 0u;
                    uint64_t v188 = v291;
                    if (!v291) {
                      goto LABEL_229;
                    }
                  }
LABEL_198:
                  if (!v292) {
                    goto LABEL_229;
                  }
                  uint64_t v197 = 0;
                  unint64_t v198 = (unint64_t)v289 << 7;
                  uint64_t v199 = 8 * v290;
                  v200 = &v296.i8[v198 + v199];
                  uint64_t v201 = v287;
                  uint64_t v202 = v288;
                  unint64_t v203 = 8 * v292;
                  if (v203 <= 1) {
                    unint64_t v204 = 1;
                  }
                  else {
                    unint64_t v204 = 8 * v292;
                  }
                  unint64_t v205 = v198 + v199;
                  v206 = &v296.i8[v198 + v199];
                  if (v204) {
                    BOOL v207 = (v204 - 1) >> 32 == 0;
                  }
                  else {
                    BOOL v207 = 0;
                  }
                  char v208 = !v207;
                  uint64_t v209 = v204 & 0x7FFFFFFE0;
                  uint64_t v210 = v204 & 0x7FFFFFFF8;
                  v211 = (char *)&v297 + v205;
                  v212 = (long long *)(v287 + 16);
                  v213 = v200;
                  uint64_t v214 = v287;
                  while (2)
                  {
                    v215 = (char *)(v201 + v202 * v197);
                    v216 = &v200[128 * v197];
                    if ((unint64_t)(&v206[128 * v197] - v215) < 0x20) {
                      char v217 = 1;
                    }
                    else {
                      char v217 = v208;
                    }
                    if (v217)
                    {
                      int v218 = 0;
LABEL_226:
                      unsigned int v228 = v218 + 1;
                      do
                      {
                        char v229 = *v215++;
                        *v216++ = v229;
                      }
                      while (v203 > v228++);
                    }
                    else
                    {
                      if (v204 >= 0x20)
                      {
                        v220 = v212;
                        v221 = v211;
                        uint64_t v222 = v204 & 0x7FFFFFFE0;
                        do
                        {
                          long long v223 = *v220;
                          *(v221 - 1) = *(v220 - 1);
                          _OWORD *v221 = v223;
                          v221 += 2;
                          v220 += 2;
                          v222 -= 32;
                        }
                        while (v222);
                        if (v204 == v209) {
                          goto LABEL_209;
                        }
                        uint64_t v219 = v204 & 0x7FFFFFFE0;
                        if ((v204 & 0x18) == 0)
                        {
                          v215 += v209;
                          v216 += v209;
                          int v218 = v204 & 0xFFFFFFE0;
                          goto LABEL_226;
                        }
                      }
                      else
                      {
                        uint64_t v219 = 0;
                      }
                      v216 += v210;
                      unint64_t v224 = v219 - (v204 & 0x7FFFFFFF8);
                      v225 = (uint64_t *)(v214 + v219);
                      v226 = &v213[v219];
                      do
                      {
                        uint64_t v227 = *v225++;
                        *(void *)v226 = v227;
                        v226 += 8;
                        v224 += 8;
                      }
                      while (v224);
                      if (v204 != v210)
                      {
                        v215 += v210;
                        int v218 = v204 & 0xFFFFFFF8;
                        goto LABEL_226;
                      }
                    }
LABEL_209:
                    ++v197;
                    v211 += 128;
                    v212 = (long long *)((char *)v212 + v202);
                    v214 += v202;
                    v213 += 128;
                    if (v197 == v188) {
                      goto LABEL_229;
                    }
                    continue;
                  }
                }
                float32x4_t v189 = vld1q_dup_f32((const float *)v186);
                int8x16_t v334 = (int8x16_t)v189;
                float32x4_t v335 = v189;
                float32x4_t v342 = v189;
                float32x4_t v343 = v189;
                float32x4_t v350 = v189;
                float32x4_t v351 = v189;
                float32x4_t v358 = v189;
                float32x4_t v359 = v189;
                uint64_t v188 = v291;
                if (v291) {
                  goto LABEL_198;
                }
              }
LABEL_229:
              uint64_t v231 = 0;
              v232 = v285;
              v233 = v286;
              int v234 = v293;
              int v235 = v294;
              uint64_t result = v280;
              uint64_t v38 = 2 * a11;
              int v43 = v276;
              unsigned int v89 = v41 + 1;
              do
              {
                uint64_t v246 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,2u>::kSubblockPositions[v231 + 1];
                uint64_t v247 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,2u>::kSubblockPositions[v231];
                unsigned int v248 = (v234 - 4 * v247) & ~((v234 - 4 * (int)v247) >> 31);
                if (v248 >= 4) {
                  unsigned int v248 = 4;
                }
                unsigned int v249 = (v235 - 4 * v246) & ~((v235 - 4 * (int)v246) >> 31);
                if (v249 >= 4) {
                  unsigned int v249 = 4;
                }
                if (v248) {
                  BOOL v250 = v249 == 0;
                }
                else {
                  BOOL v250 = 1;
                }
                if (v250)
                {
                  char v245 = 0;
                }
                else
                {
                  v236 = &v296 + 32 * v246 + 2 * v247;
                  int8x16_t v237 = *v236;
                  int8x16_t v238 = v236[1];
                  int8x16_t v239 = v236[8];
                  int8x16_t v240 = v236[9];
                  int8x16_t v241 = v236[16];
                  int8x16_t v242 = v236[17];
                  v236 += 24;
                  int8x16_t v243 = *v236;
                  int8x16_t v244 = v236[1];
                  int8x16_t *v232 = v237;
                  v232[1] = v239;
                  v232[2] = v238;
                  v232[3] = v240;
                  v232[4] = v241;
                  v232[5] = v243;
                  v232[6] = v242;
                  v232[7] = v244;
                  v232 += 8;
                  char v245 = 127;
                }
                *v233++ = v245;
                v231 += 2;
              }
              while (v231 != 16);
              uint64_t v37 = 4 * a11;
LABEL_242:
              v82 = v269;
              if (v283) {
                goto LABEL_47;
              }
              goto LABEL_48;
            }
            v88 = (int8x16_t *)__dst;
          }
          else
          {
            v88 = v82;
            if (v83) {
              goto LABEL_122;
            }
          }
          uint64_t v90 = 0;
          v91 = v88;
          do
          {
            uint64_t v105 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,2u>::kSubblockPositions[v90 + 1];
            uint64_t v106 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,2u>::kSubblockPositions[v90];
            unsigned int v107 = (v48 - 4 * v106) & ~((int)(v48 - 4 * v106) >> 31);
            if (v107 >= 4) {
              unsigned int v107 = 4;
            }
            unsigned int v108 = (v42 - 4 * v105) & ~((int)(v42 - 4 * v105) >> 31);
            if (v108 >= 4) {
              unsigned int v108 = 4;
            }
            if (v107) {
              BOOL v109 = v108 == 0;
            }
            else {
              BOOL v109 = 1;
            }
            if (v109)
            {
              char v104 = 0;
            }
            else
            {
              v92 = (long long *)(v81 + v37 * v105 + 32 * v106);
              v93 = (long long *)((char *)v92 + v36);
              long long v95 = *v92;
              long long v96 = v92[1];
              v94 = (long long *)((char *)v92 + v38);
              long long v97 = *v93;
              long long v98 = v93[1];
              long long v100 = *v94;
              long long v101 = v94[1];
              v99 = (long long *)((char *)v94 + v36);
              long long v102 = *v99;
              long long v103 = v99[1];
              int8x16_t *v91 = (int8x16_t)v95;
              v91[1] = (int8x16_t)v97;
              v91[2] = (int8x16_t)v96;
              v91[3] = (int8x16_t)v98;
              v91[4] = (int8x16_t)v100;
              v91[5] = (int8x16_t)v102;
              v91[6] = (int8x16_t)v101;
              v91[7] = (int8x16_t)v103;
              v91 += 8;
              char v104 = 127;
            }
            *v80++ = v104;
            v90 += 2;
          }
          while (v90 != 16);
          a7 = v270;
          int v43 = v276;
          unsigned int v89 = v41 + 1;
          if (v283)
          {
LABEL_47:
            memcpy(v82, v88, 0x400uLL);
            uint64_t v38 = 2 * a11;
            uint64_t v37 = 4 * a11;
            uint64_t result = v280;
          }
LABEL_48:
          BOOL v21 = v41 == v271 >> 4;
          unsigned int v41 = v89;
        }
        while (!v21);
        BOOL v21 = v20++ == v257;
      }
      while (!v21);
    }
  }
  return result;
}

void *AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, int a12)
{
  uint64_t v311 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  uint64_t v17 = a1;
  unsigned int v228 = a8;
  unsigned int v18 = a8 >> 3;
  unsigned int v212 = a8 + a10 - 1;
  unsigned int v214 = v212 >> 3;
  unsigned int v19 = *(unsigned __int8 *)(*(void *)(a1 + 208) + 88);
  unsigned int v20 = *(_DWORD *)(a1 + 112);
  uint64_t v229 = v17;
  if (*(void *)(v17 + 168))
  {
    __int16 CacheMode = IOSurfaceGetCacheMode();
    uint64_t v17 = v229;
    int v22 = CacheMode & 0xF00;
  }
  else
  {
    int v22 = 0;
  }
  BOOL v23 = (v22 & 0xD00) == 0 || v22 == 768;
  int v24 = v22 & 0xE00;
  int v26 = !v23 && v24 != 1024;
  int v233 = v26;
  uint64_t result = (void *)AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::isLevelTiled(v17, *(_DWORD *)(v17 + 144) + a12);
  uint64_t v28 = v229;
  int v222 = (int)result;
  if (v18 <= v214)
  {
    unsigned int v221 = a7 + a9 - 1;
    unsigned int v211 = a7 >> 4;
    if (a7 >> 4 <= v221 >> 4)
    {
      unsigned int v208 = a5 - 1;
      unsigned int v231 = (a5 - 1) >> 4;
      int v230 = ((a5 - 1) & 0xF) + 1;
      int v209 = ((a6 - 1) & 7) + 1;
      unsigned int v210 = (a6 - 1) >> 3;
      uint32x2_t v29 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0xF00000007);
      int8x8_t v30 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32(vadd_s32((int32x2_t)vshl_u32(v29, (uint32x2_t)0xFFFFFFFCFFFFFFFDLL), (int32x2_t)-1))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x2000000010, v29));
      __int32 v219 = v30.i32[0] | v30.i32[1];
      int8x8_t v218 = v30;
      BOOL v217 = v30.i32[0] != 0;
      BOOL v216 = v30.i32[1] != 0;
      unint64_t v207 = 8 * v20 * (unint64_t)v19;
      unsigned int v220 = a7;
      do
      {
        unsigned int v31 = (8 * v18) | 7;
        if (8 * v18 <= v228) {
          int v32 = v228;
        }
        else {
          int v32 = 8 * v18;
        }
        unsigned int v33 = v211;
        if (v212 < v31) {
          unsigned int v31 = v212;
        }
        unsigned int v227 = 8 * v18;
        int v215 = v32 - 8 * v18;
        int v226 = v31 - v32 + 1;
        int v34 = v209;
        if (v18 != v210) {
          int v34 = 8;
        }
        unsigned int v234 = v34;
        uint64_t v225 = a3 + (v32 - v228) * a11;
        do
        {
          unsigned int v35 = 16 * v33;
          unsigned int v36 = 16 * (v33 + 1) - 1;
          if (16 * v33 <= a7) {
            int v37 = a7;
          }
          else {
            int v37 = 16 * v33;
          }
          if (v221 < v36) {
            unsigned int v36 = v221;
          }
          int v38 = v36 - v37 + 1;
          if (v33 == v231) {
            unsigned int v39 = v230;
          }
          else {
            unsigned int v39 = 16;
          }
          BOOL v40 = 1;
          if (v227 >= v228 && v35 >= a7)
          {
            int v41 = v230;
            if (v33 != v231) {
              int v41 = 16;
            }
            BOOL v40 = v38 != v41 || v226 != v234;
          }
          if (v222)
          {
            unsigned int v62 = 0;
            uint64_t v63 = v207 >> (*(unsigned char *)(v28 + 57) != 0);
            char v64 = 1;
            if (v63 > 127)
            {
              if (v63 > 511)
              {
                if (v63 == 512)
                {
                  char v65 = 0;
                  unsigned int v62 = 16;
                  unsigned int v66 = 16;
                }
                else
                {
                  char v65 = 1;
                  unsigned int v66 = 0;
                  if (v63 == 1024)
                  {
                    unsigned int v66 = 8;
                    unsigned int v62 = 16;
                  }
                }
              }
              else if (v63 == 128)
              {
                char v64 = 0;
                char v65 = 0;
                unsigned int v62 = 32;
                unsigned int v66 = 32;
              }
              else
              {
                char v65 = 1;
                unsigned int v66 = 0;
                if (v63 == 256)
                {
                  char v64 = 0;
                  char v65 = 0;
                  unsigned int v66 = 16;
                  unsigned int v62 = 32;
                }
              }
            }
            else
            {
              char v65 = 1;
              unsigned int v66 = 0;
              switch(v63)
              {
                case 4:
                  char v64 = 0;
                  char v65 = 0;
                  unsigned int v66 = 128;
                  unsigned int v62 = 256;
                  break;
                case 5:
                case 6:
                case 7:
                case 9:
                case 10:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 17:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                  break;
                case 8:
                  char v64 = 0;
                  char v65 = 0;
                  unsigned int v62 = 128;
                  unsigned int v66 = 128;
                  break;
                case 16:
                  char v64 = 0;
                  char v65 = 0;
                  unsigned int v66 = 64;
                  unsigned int v62 = 128;
                  break;
                case 32:
                  char v64 = 0;
                  char v65 = 0;
                  unsigned int v62 = 64;
                  unsigned int v66 = 64;
                  break;
                default:
                  if (v63 == 64)
                  {
                    char v64 = 0;
                    char v65 = 0;
                    unsigned int v66 = 32;
                    unsigned int v62 = 64;
                  }
                  break;
              }
            }
            unsigned int v196 = (v62 >> 4) - 1;
            if (v64) {
              unsigned int v197 = 0;
            }
            else {
              unsigned int v197 = 32 - __clz(~(-1 << -(char)__clz(v196)));
            }
            unsigned int v198 = (v66 >> 3) - 1;
            if (v65)
            {
              unsigned int v199 = 0;
              if (v197) {
                goto LABEL_206;
              }
            }
            else
            {
              unsigned int v199 = 32 - __clz(~(-1 << -(char)__clz(v198)));
              if (v199 | v197)
              {
LABEL_206:
                int v200 = 0;
                uint64_t v201 = 0;
                int v202 = v33 & v196;
                int v203 = v18 & v198;
                BOOL v204 = v199 != 0;
                BOOL v205 = v197 != 0;
                int v206 = 1;
                do
                {
                  --v199;
                  if (v204) {
                    v201 |= (unint64_t)(v206 & v203) << v200++;
                  }
                  else {
                    unsigned int v199 = 0;
                  }
                  --v197;
                  if (v205) {
                    v201 |= (unint64_t)(v206 & v202) << v200++;
                  }
                  else {
                    unsigned int v197 = 0;
                  }
                  v206 *= 2;
                  --v200;
                  BOOL v205 = v197 != 0;
                  BOOL v204 = v199 != 0;
                }
                while (v197 | v199);
                goto LABEL_218;
              }
            }
            uint64_t v201 = 0;
LABEL_218:
            unint64_t v50 = ((unint64_t)(v35 / v62 + v227 / v66 * ((v62 + v208) / v62)) << 14) + (v201 << 10);
            goto LABEL_58;
          }
          if (v219)
          {
            int v43 = 0;
            uint64_t v44 = 0;
            int v45 = 1;
            BOOL v46 = v217;
            BOOL v47 = v216;
            __int32 v48 = v218.i32[0];
            __int32 v49 = v218.i32[1];
            do
            {
              --v48;
              if (v46) {
                v44 |= (unint64_t)(v45 & v18) << v43++;
              }
              else {
                __int32 v48 = 0;
              }
              --v49;
              if (v47) {
                v44 |= (unint64_t)(v45 & v33) << v43++;
              }
              else {
                __int32 v49 = 0;
              }
              v45 *= 2;
              --v43;
              BOOL v47 = v49 != 0;
              BOOL v46 = v48 != 0;
            }
            while (v49 | v48);
          }
          else
          {
            uint64_t v44 = 0;
          }
          unint64_t v50 = v44 << 10;
LABEL_58:
          unsigned int v51 = *(_DWORD *)(v28 + 128) >> (*(unsigned char *)(v28 + 144) + a12);
          if (v51 <= 1) {
            unsigned int v51 = 1;
          }
          unsigned int v52 = v51 + 15;
          if (v52 < 0x20) {
            unsigned int v53 = 0;
          }
          else {
            unsigned int v53 = 32 - __clz(~(-1 << -(char)__clz((v52 >> 4) - 1)));
          }
          unsigned int v54 = *(_DWORD *)(v28 + 132) >> (*(unsigned char *)(v28 + 144) + a12);
          if (v54 <= 1) {
            unsigned int v54 = 1;
          }
          unsigned int v55 = v54 + 7;
          if (v55 < 0x10)
          {
            unsigned int v56 = 0;
            if (!v53)
            {
LABEL_80:
              uint64_t v58 = 0;
              goto LABEL_81;
            }
          }
          else
          {
            unsigned int v56 = 32 - __clz(~(-1 << -(char)__clz((v55 >> 3) - 1)));
            if (!(v56 | v53)) {
              goto LABEL_80;
            }
          }
          int v57 = 0;
          uint64_t v58 = 0;
          BOOL v59 = v53 != 0;
          BOOL v60 = v56 != 0;
          int v61 = 1;
          do
          {
            --v53;
            if (v59) {
              v58 |= (unint64_t)(v61 & v33) << v57++;
            }
            else {
              unsigned int v53 = 0;
            }
            --v56;
            if (v60) {
              v58 |= (unint64_t)(v61 & v18) << v57++;
            }
            else {
              unsigned int v56 = 0;
            }
            v61 *= 2;
            --v57;
            BOOL v60 = v56 != 0;
            BOOL v59 = v53 != 0;
          }
          while (v56 | v53);
LABEL_81:
          int v67 = v39 < 0x10 || v40;
          unsigned int v68 = (char *)(a4 + 8 * v58);
          unint64_t v69 = v225 + 8 * (v37 - a7);
          unsigned int v70 = (float32x4_t *)(a2 + v50);
          if (v234 < 8) {
            int v71 = 1;
          }
          else {
            int v71 = v67;
          }
          v232 = v70;
          if (v233)
          {
            unsigned int v72 = (float32x4_t *)__dst;
            if (!v71) {
              goto LABEL_93;
            }
            char v73 = v39;
            int v74 = v37;
            memcpy(__dst, v70, sizeof(__dst));
            unsigned int v35 = 16 * v33;
            int v37 = v74;
            LOBYTE(v39) = v73;
            uint64_t v28 = v229;
          }
          else
          {
            unsigned int v72 = v70;
            if (!v71)
            {
LABEL_93:
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock(v69, a11, (unint64_t)v72, v68, v39, v234);
              goto LABEL_94;
            }
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE14ELj2ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = v28;
          v236 = v72;
          unsigned __int8 v244 = v39;
          unsigned __int8 v245 = v234;
          unsigned int v240 = v215;
          unsigned int v241 = v37 - v35;
          int8x16_t v237 = v68;
          unint64_t v238 = v69;
          uint64_t v239 = a11;
          unsigned int v242 = v226;
          unsigned int v243 = v38;
          if (v40)
          {
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(v28 + 8) + 7384), block);
LABEL_94:
            a7 = v220;
            goto LABEL_186;
          }
          unsigned int v75 = *v68;
          a7 = v220;
          if (v75 == 127)
          {
            float32x4_t v78 = v72[1];
            float32x4_t v79 = v72[2];
            float32x4_t v80 = v72[3];
            float32x4_t v81 = v72[4];
            float32x4_t v82 = v72[5];
            float32x4_t v83 = v72[6];
            float32x4_t v84 = v72[7];
            int8x16_t v247 = *(int8x16_t *)v72;
            float32x4_t v248 = v79;
            float32x4_t v255 = v78;
            float32x4_t v256 = v80;
            float32x4_t v263 = v81;
            float32x4_t v264 = v83;
            float32x4_t v271 = v82;
            float32x4_t v272 = v84;
            uint64_t v76 = 128;
          }
          else if (v75 == 3)
          {
            float32x4_t v77 = vld1q_dup_f32(v72->f32);
            int8x16_t v247 = (int8x16_t)v77;
            float32x4_t v248 = v77;
            float32x4_t v255 = v77;
            float32x4_t v256 = v77;
            float32x4_t v263 = v77;
            float32x4_t v264 = v77;
            float32x4_t v271 = v77;
            float32x4_t v272 = v77;
            uint64_t v76 = 4;
          }
          else if (*v68)
          {
            uint64_t v76 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v247, 128, (uint64_t)v72, v75);
          }
          else
          {
            uint64_t v76 = 0;
            float32x4_t v248 = 0u;
            int8x16_t v247 = 0u;
            float32x4_t v255 = 0u;
            float32x4_t v256 = 0u;
            float32x4_t v263 = 0u;
            float32x4_t v264 = 0u;
            float32x4_t v271 = 0u;
            float32x4_t v272 = 0u;
          }
          uint64_t v85 = (uint64_t)v72 + v76;
          unsigned int v86 = v68[1];
          if (v86 == 127)
          {
            float32x4_t v89 = *(float32x4_t *)(v85 + 16);
            float32x4_t v90 = *(float32x4_t *)(v85 + 32);
            float32x4_t v91 = *(float32x4_t *)(v85 + 48);
            float32x4_t v92 = *(float32x4_t *)(v85 + 64);
            float32x4_t v93 = *(float32x4_t *)(v85 + 80);
            float32x4_t v94 = *(float32x4_t *)(v85 + 96);
            float32x4_t v95 = *(float32x4_t *)(v85 + 112);
            int8x16_t v249 = *(int8x16_t *)v85;
            float32x4_t v250 = v90;
            float32x4_t v257 = v89;
            float32x4_t v258 = v91;
            float32x4_t v265 = v92;
            float32x4_t v266 = v94;
            float32x4_t v273 = v93;
            float32x4_t v274 = v95;
            uint64_t v87 = 128;
          }
          else if (v86 == 3)
          {
            float32x4_t v88 = vld1q_dup_f32((const float *)v85);
            int8x16_t v249 = (int8x16_t)v88;
            float32x4_t v250 = v88;
            float32x4_t v257 = v88;
            float32x4_t v258 = v88;
            float32x4_t v265 = v88;
            float32x4_t v266 = v88;
            float32x4_t v273 = v88;
            float32x4_t v274 = v88;
            uint64_t v87 = 4;
          }
          else if (v68[1])
          {
            uint64_t v87 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v249, 128, v85, v86);
          }
          else
          {
            uint64_t v87 = 0;
            int8x16_t v249 = 0u;
            float32x4_t v250 = 0u;
            float32x4_t v257 = 0u;
            float32x4_t v258 = 0u;
            float32x4_t v265 = 0u;
            float32x4_t v266 = 0u;
            float32x4_t v273 = 0u;
            float32x4_t v274 = 0u;
          }
          uint64_t v96 = v85 + v87;
          unsigned int v97 = v68[2];
          if (v97 == 127)
          {
            float32x4_t v100 = *(float32x4_t *)(v96 + 16);
            float32x4_t v101 = *(float32x4_t *)(v96 + 32);
            float32x4_t v102 = *(float32x4_t *)(v96 + 48);
            float32x4_t v103 = *(float32x4_t *)(v96 + 64);
            float32x4_t v104 = *(float32x4_t *)(v96 + 80);
            float32x4_t v105 = *(float32x4_t *)(v96 + 96);
            float32x4_t v106 = *(float32x4_t *)(v96 + 112);
            int8x16_t v279 = *(int8x16_t *)v96;
            float32x4_t v280 = v101;
            float32x4_t v287 = v100;
            float32x4_t v288 = v102;
            float32x4_t v295 = v103;
            float32x4_t v296 = v105;
            float32x4_t v303 = v104;
            float32x4_t v304 = v106;
            uint64_t v98 = 128;
          }
          else if (v97 == 3)
          {
            float32x4_t v99 = vld1q_dup_f32((const float *)v96);
            int8x16_t v279 = (int8x16_t)v99;
            float32x4_t v280 = v99;
            float32x4_t v287 = v99;
            float32x4_t v288 = v99;
            float32x4_t v295 = v99;
            float32x4_t v296 = v99;
            float32x4_t v303 = v99;
            float32x4_t v304 = v99;
            uint64_t v98 = 4;
          }
          else if (v68[2])
          {
            uint64_t v98 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v279, 128, v96, v97);
          }
          else
          {
            uint64_t v98 = 0;
            int8x16_t v279 = 0u;
            float32x4_t v280 = 0u;
            float32x4_t v287 = 0u;
            float32x4_t v288 = 0u;
            float32x4_t v295 = 0u;
            float32x4_t v296 = 0u;
            float32x4_t v303 = 0u;
            float32x4_t v304 = 0u;
          }
          uint64_t v107 = v96 + v98;
          unsigned int v108 = v68[3];
          if (v108 == 127)
          {
            float32x4_t v111 = *(float32x4_t *)(v107 + 16);
            float32x4_t v112 = *(float32x4_t *)(v107 + 32);
            float32x4_t v113 = *(float32x4_t *)(v107 + 48);
            float32x4_t v114 = *(float32x4_t *)(v107 + 64);
            float32x4_t v115 = *(float32x4_t *)(v107 + 80);
            float32x4_t v116 = *(float32x4_t *)(v107 + 96);
            float32x4_t v117 = *(float32x4_t *)(v107 + 112);
            int8x16_t v281 = *(int8x16_t *)v107;
            float32x4_t v282 = v112;
            float32x4_t v289 = v111;
            float32x4_t v290 = v113;
            float32x4_t v297 = v114;
            float32x4_t v298 = v116;
            float32x4_t v305 = v115;
            float32x4_t v306 = v117;
            uint64_t v109 = 128;
          }
          else if (v108 == 3)
          {
            float32x4_t v110 = vld1q_dup_f32((const float *)v107);
            int8x16_t v281 = (int8x16_t)v110;
            float32x4_t v282 = v110;
            float32x4_t v289 = v110;
            float32x4_t v290 = v110;
            float32x4_t v297 = v110;
            float32x4_t v298 = v110;
            float32x4_t v305 = v110;
            float32x4_t v306 = v110;
            uint64_t v109 = 4;
          }
          else if (v68[3])
          {
            uint64_t v109 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v281, 128, v107, v108);
          }
          else
          {
            uint64_t v109 = 0;
            int8x16_t v281 = 0u;
            float32x4_t v282 = 0u;
            float32x4_t v289 = 0u;
            float32x4_t v290 = 0u;
            float32x4_t v297 = 0u;
            float32x4_t v298 = 0u;
            float32x4_t v305 = 0u;
            float32x4_t v306 = 0u;
          }
          uint64_t v118 = v107 + v109;
          unsigned int v119 = v68[4];
          if (v119 == 127)
          {
            float32x4_t v122 = *(float32x4_t *)(v118 + 16);
            float32x4_t v123 = *(float32x4_t *)(v118 + 32);
            float32x4_t v124 = *(float32x4_t *)(v118 + 48);
            float32x4_t v125 = *(float32x4_t *)(v118 + 64);
            float32x4_t v126 = *(float32x4_t *)(v118 + 80);
            float32x4_t v127 = *(float32x4_t *)(v118 + 96);
            float32x4_t v128 = *(float32x4_t *)(v118 + 112);
            int8x16_t v251 = *(int8x16_t *)v118;
            float32x4_t v252 = v123;
            float32x4_t v259 = v122;
            float32x4_t v260 = v124;
            float32x4_t v267 = v125;
            float32x4_t v268 = v127;
            float32x4_t v275 = v126;
            float32x4_t v276 = v128;
            uint64_t v120 = 128;
          }
          else if (v119 == 3)
          {
            float32x4_t v121 = vld1q_dup_f32((const float *)v118);
            int8x16_t v251 = (int8x16_t)v121;
            float32x4_t v252 = v121;
            float32x4_t v259 = v121;
            float32x4_t v260 = v121;
            float32x4_t v267 = v121;
            float32x4_t v268 = v121;
            float32x4_t v275 = v121;
            float32x4_t v276 = v121;
            uint64_t v120 = 4;
          }
          else if (v68[4])
          {
            uint64_t v120 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v251, 128, v118, v119);
          }
          else
          {
            uint64_t v120 = 0;
            int8x16_t v251 = 0u;
            float32x4_t v252 = 0u;
            float32x4_t v259 = 0u;
            float32x4_t v260 = 0u;
            float32x4_t v267 = 0u;
            float32x4_t v268 = 0u;
            float32x4_t v275 = 0u;
            float32x4_t v276 = 0u;
          }
          uint64_t v129 = v118 + v120;
          unsigned int v130 = v68[5];
          if (v130 == 127)
          {
            float32x4_t v133 = *(float32x4_t *)(v129 + 16);
            float32x4_t v134 = *(float32x4_t *)(v129 + 32);
            float32x4_t v135 = *(float32x4_t *)(v129 + 48);
            float32x4_t v136 = *(float32x4_t *)(v129 + 64);
            float32x4_t v137 = *(float32x4_t *)(v129 + 80);
            float32x4_t v138 = *(float32x4_t *)(v129 + 96);
            float32x4_t v139 = *(float32x4_t *)(v129 + 112);
            int8x16_t v253 = *(int8x16_t *)v129;
            float32x4_t v254 = v134;
            float32x4_t v261 = v133;
            float32x4_t v262 = v135;
            float32x4_t v269 = v136;
            float32x4_t v270 = v138;
            float32x4_t v277 = v137;
            float32x4_t v278 = v139;
            uint64_t v131 = 128;
          }
          else if (v130 == 3)
          {
            float32x4_t v132 = vld1q_dup_f32((const float *)v129);
            int8x16_t v253 = (int8x16_t)v132;
            float32x4_t v254 = v132;
            float32x4_t v261 = v132;
            float32x4_t v262 = v132;
            float32x4_t v269 = v132;
            float32x4_t v270 = v132;
            float32x4_t v277 = v132;
            float32x4_t v278 = v132;
            uint64_t v131 = 4;
          }
          else if (v68[5])
          {
            uint64_t v131 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v253, 128, v129, v130);
          }
          else
          {
            uint64_t v131 = 0;
            int8x16_t v253 = 0u;
            float32x4_t v254 = 0u;
            float32x4_t v261 = 0u;
            float32x4_t v262 = 0u;
            float32x4_t v269 = 0u;
            float32x4_t v270 = 0u;
            float32x4_t v277 = 0u;
            float32x4_t v278 = 0u;
          }
          uint64_t v140 = v129 + v131;
          unsigned int v141 = v68[6];
          if (v141 == 127)
          {
            float32x4_t v144 = *(float32x4_t *)(v140 + 16);
            float32x4_t v145 = *(float32x4_t *)(v140 + 32);
            float32x4_t v146 = *(float32x4_t *)(v140 + 48);
            float32x4_t v147 = *(float32x4_t *)(v140 + 64);
            float32x4_t v148 = *(float32x4_t *)(v140 + 80);
            float32x4_t v149 = *(float32x4_t *)(v140 + 96);
            float32x4_t v150 = *(float32x4_t *)(v140 + 112);
            int8x16_t v283 = *(int8x16_t *)v140;
            float32x4_t v284 = v145;
            float32x4_t v291 = v144;
            float32x4_t v292 = v146;
            float32x4_t v299 = v147;
            float32x4_t v300 = v149;
            float32x4_t v307 = v148;
            float32x4_t v308 = v150;
            uint64_t v142 = 128;
          }
          else if (v141 == 3)
          {
            float32x4_t v143 = vld1q_dup_f32((const float *)v140);
            int8x16_t v283 = (int8x16_t)v143;
            float32x4_t v284 = v143;
            float32x4_t v291 = v143;
            float32x4_t v292 = v143;
            float32x4_t v299 = v143;
            float32x4_t v300 = v143;
            float32x4_t v307 = v143;
            float32x4_t v308 = v143;
            uint64_t v142 = 4;
          }
          else if (v68[6])
          {
            uint64_t v142 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v283, 128, v140, v141);
          }
          else
          {
            uint64_t v142 = 0;
            int8x16_t v283 = 0u;
            float32x4_t v284 = 0u;
            float32x4_t v291 = 0u;
            float32x4_t v292 = 0u;
            float32x4_t v299 = 0u;
            float32x4_t v300 = 0u;
            float32x4_t v307 = 0u;
            float32x4_t v308 = 0u;
          }
          uint64_t v151 = v140 + v142;
          unsigned int v152 = v68[7];
          if (v152 == 127)
          {
            float32x4_t v155 = *(float32x4_t *)(v151 + 16);
            float32x4_t v156 = *(float32x4_t *)(v151 + 32);
            float32x4_t v157 = *(float32x4_t *)(v151 + 48);
            float32x4_t v158 = *(float32x4_t *)(v151 + 80);
            float32x4_t v159 = *(float32x4_t *)(v151 + 96);
            float32x4_t v160 = *(float32x4_t *)(v151 + 112);
            float32x4_t v161 = *(float32x4_t *)(v151 + 64);
            int8x16_t v285 = *(int8x16_t *)v151;
            float32x4_t v286 = v156;
            float32x4_t v293 = v155;
            float32x4_t v294 = v157;
            float32x4_t v301 = v161;
            float32x4_t v302 = v159;
            float32x4_t v309 = v158;
            float32x4_t v310 = v160;
            uint64_t v153 = v242;
            if (!v242) {
              goto LABEL_185;
            }
          }
          else if (v152 == 3)
          {
            float32x4_t v154 = vld1q_dup_f32((const float *)v151);
            int8x16_t v285 = (int8x16_t)v154;
            float32x4_t v286 = v154;
            float32x4_t v293 = v154;
            float32x4_t v294 = v154;
            float32x4_t v301 = v154;
            float32x4_t v302 = v154;
            float32x4_t v309 = v154;
            float32x4_t v310 = v154;
            uint64_t v153 = v242;
            if (!v242) {
              goto LABEL_185;
            }
          }
          else if (v68[7])
          {
            AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v285, 128, v151, v152);
            uint64_t v153 = v242;
            if (!v242) {
              goto LABEL_185;
            }
          }
          else
          {
            int8x16_t v285 = 0u;
            float32x4_t v286 = 0u;
            float32x4_t v293 = 0u;
            float32x4_t v294 = 0u;
            float32x4_t v301 = 0u;
            float32x4_t v302 = 0u;
            float32x4_t v309 = 0u;
            float32x4_t v310 = 0u;
            uint64_t v153 = v242;
            if (!v242) {
              goto LABEL_185;
            }
          }
          if (v243)
          {
            uint64_t v162 = 0;
            unint64_t v163 = (unint64_t)v240 << 7;
            uint64_t v164 = 8 * v241;
            unsigned int v165 = &v247.i8[v163 + v164];
            unint64_t v166 = v238;
            uint64_t v167 = v239;
            unint64_t v168 = 8 * v243;
            if (v168 <= 1) {
              unint64_t v169 = 1;
            }
            else {
              unint64_t v169 = 8 * v243;
            }
            unint64_t v170 = v163 + v164;
            float32x4_t v171 = &v247.i8[v163 + v164];
            if (v169) {
              BOOL v172 = (v169 - 1) >> 32 == 0;
            }
            else {
              BOOL v172 = 0;
            }
            char v173 = !v172;
            uint64_t v174 = v169 & 0x7FFFFFFE0;
            uint64_t v175 = v169 & 0x7FFFFFFF8;
            unsigned int v176 = (char *)&v248 + v170;
            uint64_t v177 = (long long *)(v238 + 16);
            float32x4_t v178 = v165;
            unint64_t v179 = v238;
            do
            {
              float32x4_t v180 = (char *)(v166 + v167 * v162);
              float32x4_t v181 = &v165[128 * v162];
              if ((unint64_t)(&v171[128 * v162] - v180) < 0x20) {
                char v182 = 1;
              }
              else {
                char v182 = v173;
              }
              if (v182)
              {
                int v183 = 0;
                goto LABEL_182;
              }
              if (v169 >= 0x20)
              {
                float32x4_t v185 = v177;
                uint64_t v186 = v176;
                uint64_t v187 = v169 & 0x7FFFFFFE0;
                do
                {
                  long long v188 = *v185;
                  *(v186 - 1) = *(v185 - 1);
                  *uint64_t v186 = v188;
                  v186 += 2;
                  v185 += 2;
                  v187 -= 32;
                }
                while (v187);
                if (v169 == v174) {
                  goto LABEL_165;
                }
                uint64_t v184 = v169 & 0x7FFFFFFE0;
                if ((v169 & 0x18) == 0)
                {
                  v180 += v174;
                  v181 += v174;
                  int v183 = v169 & 0xFFFFFFE0;
                  goto LABEL_182;
                }
              }
              else
              {
                uint64_t v184 = 0;
              }
              v181 += v175;
              unint64_t v189 = v184 - (v169 & 0x7FFFFFFF8);
              float32x4_t v190 = (uint64_t *)(v179 + v184);
              float32x4_t v191 = &v178[v184];
              do
              {
                uint64_t v192 = *v190++;
                *(void *)float32x4_t v191 = v192;
                v191 += 8;
                v189 += 8;
              }
              while (v189);
              if (v169 == v175) {
                goto LABEL_165;
              }
              v180 += v175;
              int v183 = v169 & 0xFFFFFFF8;
LABEL_182:
              unsigned int v193 = v183 + 1;
              do
              {
                char v194 = *v180++;
                *v181++ = v194;
              }
              while (v168 > v193++);
LABEL_165:
              ++v162;
              v176 += 128;
              uint64_t v177 = (long long *)((char *)v177 + v167);
              v179 += v167;
              v178 += 128;
            }
            while (v162 != v153);
          }
LABEL_185:
          AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)&v247, 128, (unint64_t)v236, v237, v244, v245);
LABEL_186:
          uint64_t result = v232;
          if (v233) {
            uint64_t result = memcpy(v232, v72, 0x400uLL);
          }
          BOOL v23 = v33++ == v221 >> 4;
          uint64_t v28 = v229;
        }
        while (!v23);
        BOOL v23 = v18++ == v214;
      }
      while (!v23);
    }
  }
  return result;
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, int a12)
{
  uint64_t v352 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v270 = a8;
  unsigned int v16 = a8 >> 3;
  unsigned int v253 = a8 + a10 - 1;
  unsigned int v255 = v253 >> 3;
  unsigned int v17 = *(unsigned __int8 *)(*(void *)(a1 + 208) + 88);
  unsigned int v18 = *(_DWORD *)(a1 + 112);
  uint64_t v272 = a1;
  if (*(void *)(a1 + 168)) {
    int v19 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v19 = 0;
  }
  BOOL v20 = (v19 & 0xD00) == 0 || v19 == 768;
  int v21 = v19 & 0xE00;
  int v23 = !v20 && v21 != 1024;
  int v275 = v23;
  BOOL isLevelTiled = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::isLevelTiled(a1, *(_DWORD *)(a1 + 144) + a12);
  uint64_t v25 = a1;
  BOOL v264 = isLevelTiled;
  if (v16 <= v255)
  {
    unsigned int v263 = a7 + a9 - 1;
    if (a7 >> 4 <= v263 >> 4)
    {
      unsigned int v250 = a5 - 1;
      unsigned int v274 = (a5 - 1) >> 4;
      int v273 = ((a5 - 1) & 0xF) + 1;
      int v251 = ((a6 - 1) & 7) + 1;
      unsigned int v252 = (a6 - 1) >> 3;
      uint32x2_t v26 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0xF00000007);
      int8x8_t v27 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32(vadd_s32((int32x2_t)vshl_u32(v26, (uint32x2_t)0xFFFFFFFCFFFFFFFDLL), (int32x2_t)-1))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x2000000010, v26));
      __int32 v262 = v27.i32[0] | v27.i32[1];
      int8x8_t v260 = v27;
      BOOL v259 = v27.i32[0] != 0;
      BOOL v258 = v27.i32[1] != 0;
      unint64_t v249 = 8 * v18 * (unint64_t)v17;
      uint64_t v28 = a11;
      uint64_t v29 = 2 * a11;
      do
      {
        unsigned int v30 = (8 * v16) | 7;
        if (8 * v16 <= v270) {
          int v31 = v270;
        }
        else {
          int v31 = 8 * v16;
        }
        unsigned int v32 = a7 >> 4;
        if (v253 < v30) {
          unsigned int v30 = v253;
        }
        unsigned int v269 = 8 * v16;
        int v257 = v31 - 8 * v16;
        int v268 = v30 - v31 + 1;
        if (v16 == v252) {
          unsigned int v33 = v251;
        }
        else {
          unsigned int v33 = 8;
        }
        uint64_t v267 = a3 + (v31 - v270) * v28;
        unsigned int v34 = a7;
        unsigned int v256 = v33;
        do
        {
          unsigned int v35 = 16 * v32;
          unsigned int v36 = 16 * (v32 + 1) - 1;
          if (16 * v32 <= v34) {
            int v37 = v34;
          }
          else {
            int v37 = 16 * v32;
          }
          if (v263 < v36) {
            unsigned int v36 = a7 + a9 - 1;
          }
          int v38 = v36 - v37 + 1;
          if (v32 == v274) {
            unsigned int v39 = v273;
          }
          else {
            unsigned int v39 = 16;
          }
          BOOL v40 = 1;
          if (v269 >= v270 && v35 >= v34)
          {
            int v41 = v273;
            if (v32 != v274) {
              int v41 = 16;
            }
            BOOL v40 = v38 != v41 || v268 != v33;
          }
          if (v264)
          {
            unsigned int v62 = 0;
            uint64_t v63 = v249 >> (*(unsigned char *)(v25 + 57) != 0);
            char v64 = 1;
            if (v63 > 127)
            {
              if (v63 > 511)
              {
                if (v63 == 512)
                {
                  char v65 = 0;
                  unsigned int v62 = 16;
                  unsigned int v66 = 16;
                }
                else
                {
                  char v65 = 1;
                  unsigned int v66 = 0;
                  if (v63 == 1024)
                  {
                    unsigned int v66 = 8;
                    unsigned int v62 = 16;
                  }
                }
              }
              else if (v63 == 128)
              {
                char v64 = 0;
                char v65 = 0;
                unsigned int v62 = 32;
                unsigned int v66 = 32;
              }
              else
              {
                char v65 = 1;
                unsigned int v66 = 0;
                if (v63 == 256)
                {
                  char v64 = 0;
                  char v65 = 0;
                  unsigned int v66 = 16;
                  unsigned int v62 = 32;
                }
              }
            }
            else
            {
              char v65 = 1;
              unsigned int v66 = 0;
              switch(v63)
              {
                case 4:
                  char v64 = 0;
                  char v65 = 0;
                  unsigned int v66 = 128;
                  unsigned int v62 = 256;
                  break;
                case 5:
                case 6:
                case 7:
                case 9:
                case 10:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 17:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                  break;
                case 8:
                  char v64 = 0;
                  char v65 = 0;
                  unsigned int v62 = 128;
                  unsigned int v66 = 128;
                  break;
                case 16:
                  char v64 = 0;
                  char v65 = 0;
                  unsigned int v66 = 64;
                  unsigned int v62 = 128;
                  break;
                case 32:
                  char v64 = 0;
                  char v65 = 0;
                  unsigned int v62 = 64;
                  unsigned int v66 = 64;
                  break;
                default:
                  if (v63 == 64)
                  {
                    char v64 = 0;
                    char v65 = 0;
                    unsigned int v66 = 32;
                    unsigned int v62 = 64;
                  }
                  break;
              }
            }
            unsigned int v238 = (v62 >> 4) - 1;
            if (v64) {
              unsigned int v239 = 0;
            }
            else {
              unsigned int v239 = 32 - __clz(~(-1 << -(char)__clz(v238)));
            }
            unsigned int v240 = (v66 >> 3) - 1;
            if (v65)
            {
              unsigned int v241 = 0;
              if (v239) {
                goto LABEL_232;
              }
            }
            else
            {
              unsigned int v241 = 32 - __clz(~(-1 << -(char)__clz(v240)));
              if (v241 | v239)
              {
LABEL_232:
                int v242 = 0;
                uint64_t v243 = 0;
                int v244 = v32 & v238;
                int v245 = v16 & v240;
                BOOL v246 = v241 != 0;
                BOOL v247 = v239 != 0;
                int v248 = 1;
                do
                {
                  --v241;
                  if (v246) {
                    v243 |= (unint64_t)(v248 & v245) << v242++;
                  }
                  else {
                    unsigned int v241 = 0;
                  }
                  --v239;
                  if (v247) {
                    v243 |= (unint64_t)(v248 & v244) << v242++;
                  }
                  else {
                    unsigned int v239 = 0;
                  }
                  v248 *= 2;
                  --v242;
                  BOOL v247 = v239 != 0;
                  BOOL v246 = v241 != 0;
                }
                while (v239 | v241);
                goto LABEL_244;
              }
            }
            uint64_t v243 = 0;
LABEL_244:
            unint64_t v50 = ((unint64_t)(v35 / v62 + v269 / v66 * ((v62 + v250) / v62)) << 14) + (v243 << 10);
            goto LABEL_60;
          }
          if (v262)
          {
            int v43 = 0;
            uint64_t v44 = 0;
            int v45 = 1;
            BOOL v46 = v259;
            BOOL v47 = v258;
            __int32 v48 = v260.i32[0];
            __int32 v49 = v260.i32[1];
            do
            {
              --v48;
              if (v46) {
                v44 |= (unint64_t)(v45 & v16) << v43++;
              }
              else {
                __int32 v48 = 0;
              }
              --v49;
              if (v47) {
                v44 |= (unint64_t)(v45 & v32) << v43++;
              }
              else {
                __int32 v49 = 0;
              }
              v45 *= 2;
              --v43;
              BOOL v47 = v49 != 0;
              BOOL v46 = v48 != 0;
            }
            while (v49 | v48);
          }
          else
          {
            uint64_t v44 = 0;
          }
          unint64_t v50 = v44 << 10;
LABEL_60:
          unsigned int v51 = *(_DWORD *)(v25 + 128) >> (*(unsigned char *)(v25 + 144) + a12);
          if (v51 <= 1) {
            unsigned int v51 = 1;
          }
          unsigned int v52 = v51 + 15;
          if (v52 < 0x20) {
            unsigned int v53 = 0;
          }
          else {
            unsigned int v53 = 32 - __clz(~(-1 << -(char)__clz((v52 >> 4) - 1)));
          }
          unsigned int v54 = *(_DWORD *)(v25 + 132) >> (*(unsigned char *)(v25 + 144) + a12);
          if (v54 <= 1) {
            unsigned int v54 = 1;
          }
          unsigned int v55 = v54 + 7;
          if (v55 < 0x10)
          {
            unsigned int v56 = 0;
            if (!v53)
            {
LABEL_82:
              uint64_t v58 = 0;
              goto LABEL_83;
            }
          }
          else
          {
            unsigned int v56 = 32 - __clz(~(-1 << -(char)__clz((v55 >> 3) - 1)));
            if (!(v56 | v53)) {
              goto LABEL_82;
            }
          }
          int v57 = 0;
          uint64_t v58 = 0;
          BOOL v59 = v53 != 0;
          BOOL v60 = v56 != 0;
          int v61 = 1;
          do
          {
            --v53;
            if (v59) {
              v58 |= (unint64_t)(v61 & v32) << v57++;
            }
            else {
              unsigned int v53 = 0;
            }
            --v56;
            if (v60) {
              v58 |= (unint64_t)(v61 & v16) << v57++;
            }
            else {
              unsigned int v56 = 0;
            }
            v61 *= 2;
            --v57;
            BOOL v60 = v56 != 0;
            BOOL v59 = v53 != 0;
          }
          while (v56 | v53);
LABEL_83:
          unsigned int v67 = v37 - v34;
          int v68 = v39 < 0x10 || v40;
          unint64_t v69 = (char *)(a4 + 8 * v58);
          uint64_t v70 = v267 + 8 * v67;
          int v71 = (int8x16_t *)(a2 + v50);
          if (v33 < 8) {
            int v72 = 1;
          }
          else {
            int v72 = v68;
          }
          if (v275)
          {
            if (v72)
            {
              char v73 = v71;
              int v74 = v38;
              BOOL v75 = v40;
              memcpy(v287, v71, sizeof(v287));
              BOOL v40 = v75;
              unsigned int v35 = 16 * v32;
              int v38 = v74;
              uint64_t v28 = a11;
              unsigned int v33 = v256;
              uint64_t v76 = (int8x16_t *)v287;
              int v71 = v73;
              uint64_t v25 = v272;
LABEL_93:
              __dst = v71;
              block[0] = MEMORY[0x263EF8330];
              block[1] = 3221225472;
              block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE14ELj2ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
              block[3] = &__block_descriptor_90_e5_v8__0l;
              block[4] = v25;
              float32x4_t v277 = v76;
              unsigned __int8 v285 = v39;
              unsigned __int8 v286 = v33;
              unsigned int v281 = v257;
              unsigned int v282 = v37 - v35;
              float32x4_t v278 = v69;
              uint64_t v279 = v70;
              uint64_t v280 = v28;
              unsigned int v283 = v268;
              unsigned int v284 = v38;
              if (v40)
              {
                dispatch_sync(*(dispatch_queue_t *)(*(void *)(v25 + 8) + 7384), block);
                uint64_t v25 = v272;
                unsigned int v34 = a7;
                uint64_t v29 = 2 * a11;
                goto LABEL_95;
              }
              unsigned int v97 = *v69;
              if (v97 == 127)
              {
                float32x4_t v100 = (float32x4_t)v76[1];
                float32x4_t v101 = (float32x4_t)v76[2];
                float32x4_t v102 = (float32x4_t)v76[3];
                float32x4_t v103 = (float32x4_t)v76[4];
                float32x4_t v104 = (float32x4_t)v76[5];
                float32x4_t v105 = (float32x4_t)v76[6];
                float32x4_t v106 = (float32x4_t)v76[7];
                int8x16_t v288 = *v76;
                float32x4_t v289 = v101;
                float32x4_t v296 = v100;
                float32x4_t v297 = v102;
                float32x4_t v304 = v103;
                float32x4_t v305 = v105;
                float32x4_t v312 = v104;
                float32x4_t v313 = v106;
                uint64_t v98 = 128;
              }
              else if (v97 == 3)
              {
                float32x4_t v99 = vld1q_dup_f32((const float *)v76->i32);
                int8x16_t v288 = (int8x16_t)v99;
                float32x4_t v289 = v99;
                float32x4_t v296 = v99;
                float32x4_t v297 = v99;
                float32x4_t v304 = v99;
                float32x4_t v305 = v99;
                float32x4_t v312 = v99;
                float32x4_t v313 = v99;
                uint64_t v98 = 4;
              }
              else if (*v69)
              {
                uint64_t v98 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v288, 128, (uint64_t)v76, v97);
              }
              else
              {
                uint64_t v98 = 0;
                float32x4_t v289 = 0u;
                int8x16_t v288 = 0u;
                float32x4_t v296 = 0u;
                float32x4_t v297 = 0u;
                float32x4_t v304 = 0u;
                float32x4_t v305 = 0u;
                float32x4_t v312 = 0u;
                float32x4_t v313 = 0u;
              }
              uint64_t v107 = (uint64_t)v76->i64 + v98;
              unsigned int v108 = v69[1];
              if (v108 == 127)
              {
                float32x4_t v111 = *(float32x4_t *)(v107 + 16);
                float32x4_t v112 = *(float32x4_t *)(v107 + 32);
                float32x4_t v113 = *(float32x4_t *)(v107 + 48);
                float32x4_t v114 = *(float32x4_t *)(v107 + 64);
                float32x4_t v115 = *(float32x4_t *)(v107 + 80);
                float32x4_t v116 = *(float32x4_t *)(v107 + 96);
                float32x4_t v117 = *(float32x4_t *)(v107 + 112);
                int8x16_t v290 = *(int8x16_t *)v107;
                float32x4_t v291 = v112;
                float32x4_t v298 = v111;
                float32x4_t v299 = v113;
                float32x4_t v306 = v114;
                float32x4_t v307 = v116;
                float32x4_t v314 = v115;
                float32x4_t v315 = v117;
                uint64_t v109 = 128;
              }
              else if (v108 == 3)
              {
                float32x4_t v110 = vld1q_dup_f32((const float *)v107);
                int8x16_t v290 = (int8x16_t)v110;
                float32x4_t v291 = v110;
                float32x4_t v298 = v110;
                float32x4_t v299 = v110;
                float32x4_t v306 = v110;
                float32x4_t v307 = v110;
                float32x4_t v314 = v110;
                float32x4_t v315 = v110;
                uint64_t v109 = 4;
              }
              else if (v69[1])
              {
                uint64_t v109 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v290, 128, v107, v108);
              }
              else
              {
                uint64_t v109 = 0;
                int8x16_t v290 = 0u;
                float32x4_t v291 = 0u;
                float32x4_t v298 = 0u;
                float32x4_t v299 = 0u;
                float32x4_t v306 = 0u;
                float32x4_t v307 = 0u;
                float32x4_t v314 = 0u;
                float32x4_t v315 = 0u;
              }
              uint64_t v118 = v107 + v109;
              unsigned int v119 = v69[2];
              if (v119 == 127)
              {
                float32x4_t v122 = *(float32x4_t *)(v118 + 16);
                float32x4_t v123 = *(float32x4_t *)(v118 + 32);
                float32x4_t v124 = *(float32x4_t *)(v118 + 48);
                float32x4_t v125 = *(float32x4_t *)(v118 + 64);
                float32x4_t v126 = *(float32x4_t *)(v118 + 80);
                float32x4_t v127 = *(float32x4_t *)(v118 + 96);
                float32x4_t v128 = *(float32x4_t *)(v118 + 112);
                int8x16_t v320 = *(int8x16_t *)v118;
                float32x4_t v321 = v123;
                float32x4_t v328 = v122;
                float32x4_t v329 = v124;
                float32x4_t v336 = v125;
                float32x4_t v337 = v127;
                float32x4_t v344 = v126;
                float32x4_t v345 = v128;
                uint64_t v120 = 128;
              }
              else if (v119 == 3)
              {
                float32x4_t v121 = vld1q_dup_f32((const float *)v118);
                int8x16_t v320 = (int8x16_t)v121;
                float32x4_t v321 = v121;
                float32x4_t v328 = v121;
                float32x4_t v329 = v121;
                float32x4_t v336 = v121;
                float32x4_t v337 = v121;
                float32x4_t v344 = v121;
                float32x4_t v345 = v121;
                uint64_t v120 = 4;
              }
              else if (v69[2])
              {
                uint64_t v120 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v320, 128, v118, v119);
              }
              else
              {
                uint64_t v120 = 0;
                int8x16_t v320 = 0u;
                float32x4_t v321 = 0u;
                float32x4_t v328 = 0u;
                float32x4_t v329 = 0u;
                float32x4_t v336 = 0u;
                float32x4_t v337 = 0u;
                float32x4_t v344 = 0u;
                float32x4_t v345 = 0u;
              }
              uint64_t v129 = v118 + v120;
              unsigned int v130 = v69[3];
              if (v130 == 127)
              {
                float32x4_t v133 = *(float32x4_t *)(v129 + 16);
                float32x4_t v134 = *(float32x4_t *)(v129 + 32);
                float32x4_t v135 = *(float32x4_t *)(v129 + 48);
                float32x4_t v136 = *(float32x4_t *)(v129 + 64);
                float32x4_t v137 = *(float32x4_t *)(v129 + 80);
                float32x4_t v138 = *(float32x4_t *)(v129 + 96);
                float32x4_t v139 = *(float32x4_t *)(v129 + 112);
                int8x16_t v322 = *(int8x16_t *)v129;
                float32x4_t v323 = v134;
                float32x4_t v330 = v133;
                float32x4_t v331 = v135;
                float32x4_t v338 = v136;
                float32x4_t v339 = v138;
                float32x4_t v346 = v137;
                float32x4_t v347 = v139;
                uint64_t v131 = 128;
              }
              else if (v130 == 3)
              {
                float32x4_t v132 = vld1q_dup_f32((const float *)v129);
                int8x16_t v322 = (int8x16_t)v132;
                float32x4_t v323 = v132;
                float32x4_t v330 = v132;
                float32x4_t v331 = v132;
                float32x4_t v338 = v132;
                float32x4_t v339 = v132;
                float32x4_t v346 = v132;
                float32x4_t v347 = v132;
                uint64_t v131 = 4;
              }
              else if (v69[3])
              {
                uint64_t v131 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v322, 128, v129, v130);
              }
              else
              {
                uint64_t v131 = 0;
                int8x16_t v322 = 0u;
                float32x4_t v323 = 0u;
                float32x4_t v330 = 0u;
                float32x4_t v331 = 0u;
                float32x4_t v338 = 0u;
                float32x4_t v339 = 0u;
                float32x4_t v346 = 0u;
                float32x4_t v347 = 0u;
              }
              uint64_t v140 = v129 + v131;
              unsigned int v141 = v69[4];
              if (v141 == 127)
              {
                float32x4_t v144 = *(float32x4_t *)(v140 + 16);
                float32x4_t v145 = *(float32x4_t *)(v140 + 32);
                float32x4_t v146 = *(float32x4_t *)(v140 + 48);
                float32x4_t v147 = *(float32x4_t *)(v140 + 64);
                float32x4_t v148 = *(float32x4_t *)(v140 + 80);
                float32x4_t v149 = *(float32x4_t *)(v140 + 96);
                float32x4_t v150 = *(float32x4_t *)(v140 + 112);
                int8x16_t v292 = *(int8x16_t *)v140;
                float32x4_t v293 = v145;
                float32x4_t v300 = v144;
                float32x4_t v301 = v146;
                float32x4_t v308 = v147;
                float32x4_t v309 = v149;
                float32x4_t v316 = v148;
                float32x4_t v317 = v150;
                uint64_t v142 = 128;
              }
              else if (v141 == 3)
              {
                float32x4_t v143 = vld1q_dup_f32((const float *)v140);
                int8x16_t v292 = (int8x16_t)v143;
                float32x4_t v293 = v143;
                float32x4_t v300 = v143;
                float32x4_t v301 = v143;
                float32x4_t v308 = v143;
                float32x4_t v309 = v143;
                float32x4_t v316 = v143;
                float32x4_t v317 = v143;
                uint64_t v142 = 4;
              }
              else if (v69[4])
              {
                uint64_t v142 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v292, 128, v140, v141);
              }
              else
              {
                uint64_t v142 = 0;
                int8x16_t v292 = 0u;
                float32x4_t v293 = 0u;
                float32x4_t v300 = 0u;
                float32x4_t v301 = 0u;
                float32x4_t v308 = 0u;
                float32x4_t v309 = 0u;
                float32x4_t v316 = 0u;
                float32x4_t v317 = 0u;
              }
              uint64_t v151 = v140 + v142;
              unsigned int v152 = v69[5];
              if (v152 == 127)
              {
                float32x4_t v155 = *(float32x4_t *)(v151 + 16);
                float32x4_t v156 = *(float32x4_t *)(v151 + 32);
                float32x4_t v157 = *(float32x4_t *)(v151 + 48);
                float32x4_t v158 = *(float32x4_t *)(v151 + 64);
                float32x4_t v159 = *(float32x4_t *)(v151 + 80);
                float32x4_t v160 = *(float32x4_t *)(v151 + 96);
                float32x4_t v161 = *(float32x4_t *)(v151 + 112);
                int8x16_t v294 = *(int8x16_t *)v151;
                float32x4_t v295 = v156;
                float32x4_t v302 = v155;
                float32x4_t v303 = v157;
                float32x4_t v310 = v158;
                float32x4_t v311 = v160;
                float32x4_t v318 = v159;
                float32x4_t v319 = v161;
                uint64_t v153 = 128;
              }
              else if (v152 == 3)
              {
                float32x4_t v154 = vld1q_dup_f32((const float *)v151);
                int8x16_t v294 = (int8x16_t)v154;
                float32x4_t v295 = v154;
                float32x4_t v302 = v154;
                float32x4_t v303 = v154;
                float32x4_t v310 = v154;
                float32x4_t v311 = v154;
                float32x4_t v318 = v154;
                float32x4_t v319 = v154;
                uint64_t v153 = 4;
              }
              else if (v69[5])
              {
                uint64_t v153 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v294, 128, v151, v152);
              }
              else
              {
                uint64_t v153 = 0;
                int8x16_t v294 = 0u;
                float32x4_t v295 = 0u;
                float32x4_t v302 = 0u;
                float32x4_t v303 = 0u;
                float32x4_t v310 = 0u;
                float32x4_t v311 = 0u;
                float32x4_t v318 = 0u;
                float32x4_t v319 = 0u;
              }
              uint64_t v162 = v151 + v153;
              unsigned int v163 = v69[6];
              if (v163 == 127)
              {
                float32x4_t v166 = *(float32x4_t *)(v162 + 16);
                float32x4_t v167 = *(float32x4_t *)(v162 + 32);
                float32x4_t v168 = *(float32x4_t *)(v162 + 48);
                float32x4_t v169 = *(float32x4_t *)(v162 + 64);
                float32x4_t v170 = *(float32x4_t *)(v162 + 80);
                float32x4_t v171 = *(float32x4_t *)(v162 + 96);
                float32x4_t v172 = *(float32x4_t *)(v162 + 112);
                int8x16_t v324 = *(int8x16_t *)v162;
                float32x4_t v325 = v167;
                float32x4_t v332 = v166;
                float32x4_t v333 = v168;
                float32x4_t v340 = v169;
                float32x4_t v341 = v171;
                float32x4_t v348 = v170;
                float32x4_t v349 = v172;
                uint64_t v164 = 128;
              }
              else if (v163 == 3)
              {
                float32x4_t v165 = vld1q_dup_f32((const float *)v162);
                int8x16_t v324 = (int8x16_t)v165;
                float32x4_t v325 = v165;
                float32x4_t v332 = v165;
                float32x4_t v333 = v165;
                float32x4_t v340 = v165;
                float32x4_t v341 = v165;
                float32x4_t v348 = v165;
                float32x4_t v349 = v165;
                uint64_t v164 = 4;
              }
              else if (v69[6])
              {
                uint64_t v164 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v324, 128, v162, v163);
              }
              else
              {
                uint64_t v164 = 0;
                int8x16_t v324 = 0u;
                float32x4_t v325 = 0u;
                float32x4_t v332 = 0u;
                float32x4_t v333 = 0u;
                float32x4_t v340 = 0u;
                float32x4_t v341 = 0u;
                float32x4_t v348 = 0u;
                float32x4_t v349 = 0u;
              }
              uint64_t v173 = v162 + v164;
              unsigned int v174 = v69[7];
              if (v174 == 127)
              {
                float32x4_t v177 = *(float32x4_t *)(v173 + 16);
                float32x4_t v178 = *(float32x4_t *)(v173 + 32);
                float32x4_t v179 = *(float32x4_t *)(v173 + 48);
                float32x4_t v180 = *(float32x4_t *)(v173 + 80);
                float32x4_t v181 = *(float32x4_t *)(v173 + 96);
                float32x4_t v182 = *(float32x4_t *)(v173 + 112);
                float32x4_t v183 = *(float32x4_t *)(v173 + 64);
                int8x16_t v326 = *(int8x16_t *)v173;
                float32x4_t v327 = v178;
                float32x4_t v334 = v177;
                float32x4_t v335 = v179;
                float32x4_t v342 = v183;
                float32x4_t v343 = v181;
                float32x4_t v350 = v180;
                float32x4_t v351 = v182;
                uint64_t v175 = v283;
                if (v283) {
                  goto LABEL_171;
                }
              }
              else
              {
                if (v174 != 3)
                {
                  if (v69[7])
                  {
                    AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v326, 128, v173, v174);
                    uint64_t v175 = v283;
                    if (!v283) {
                      goto LABEL_202;
                    }
                  }
                  else
                  {
                    int8x16_t v326 = 0u;
                    float32x4_t v327 = 0u;
                    float32x4_t v334 = 0u;
                    float32x4_t v335 = 0u;
                    float32x4_t v342 = 0u;
                    float32x4_t v343 = 0u;
                    float32x4_t v350 = 0u;
                    float32x4_t v351 = 0u;
                    uint64_t v175 = v283;
                    if (!v283) {
                      goto LABEL_202;
                    }
                  }
LABEL_171:
                  if (!v284) {
                    goto LABEL_202;
                  }
                  uint64_t v184 = 0;
                  unint64_t v185 = (unint64_t)v281 << 7;
                  uint64_t v186 = 8 * v282;
                  uint64_t v187 = &v288.i8[v185 + v186];
                  uint64_t v188 = v279;
                  uint64_t v189 = v280;
                  unint64_t v190 = 8 * v284;
                  if (v190 <= 1) {
                    unint64_t v191 = 1;
                  }
                  else {
                    unint64_t v191 = 8 * v284;
                  }
                  unint64_t v192 = v185 + v186;
                  unsigned int v193 = &v288.i8[v185 + v186];
                  if (v191) {
                    BOOL v194 = (v191 - 1) >> 32 == 0;
                  }
                  else {
                    BOOL v194 = 0;
                  }
                  char v195 = !v194;
                  uint64_t v196 = v191 & 0x7FFFFFFE0;
                  uint64_t v197 = v191 & 0x7FFFFFFF8;
                  unsigned int v198 = (char *)&v289 + v192;
                  unsigned int v199 = (long long *)(v279 + 16);
                  int v200 = v187;
                  uint64_t v201 = v279;
                  while (2)
                  {
                    int v202 = (char *)(v188 + v189 * v184);
                    int v203 = &v187[128 * v184];
                    if ((unint64_t)(&v193[128 * v184] - v202) < 0x20) {
                      char v204 = 1;
                    }
                    else {
                      char v204 = v195;
                    }
                    if (v204)
                    {
                      int v205 = 0;
LABEL_199:
                      unsigned int v215 = v205 + 1;
                      do
                      {
                        char v216 = *v202++;
                        *v203++ = v216;
                      }
                      while (v190 > v215++);
                    }
                    else
                    {
                      if (v191 >= 0x20)
                      {
                        unint64_t v207 = v199;
                        unsigned int v208 = v198;
                        uint64_t v209 = v191 & 0x7FFFFFFE0;
                        do
                        {
                          long long v210 = *v207;
                          *(v208 - 1) = *(v207 - 1);
                          *unsigned int v208 = v210;
                          v208 += 2;
                          v207 += 2;
                          v209 -= 32;
                        }
                        while (v209);
                        if (v191 == v196) {
                          goto LABEL_182;
                        }
                        uint64_t v206 = v191 & 0x7FFFFFFE0;
                        if ((v191 & 0x18) == 0)
                        {
                          v202 += v196;
                          v203 += v196;
                          int v205 = v191 & 0xFFFFFFE0;
                          goto LABEL_199;
                        }
                      }
                      else
                      {
                        uint64_t v206 = 0;
                      }
                      v203 += v197;
                      unint64_t v211 = v206 - (v191 & 0x7FFFFFFF8);
                      unsigned int v212 = (uint64_t *)(v201 + v206);
                      v213 = &v200[v206];
                      do
                      {
                        uint64_t v214 = *v212++;
                        *(void *)v213 = v214;
                        v213 += 8;
                        v211 += 8;
                      }
                      while (v211);
                      if (v191 != v197)
                      {
                        v202 += v197;
                        int v205 = v191 & 0xFFFFFFF8;
                        goto LABEL_199;
                      }
                    }
LABEL_182:
                    ++v184;
                    v198 += 128;
                    unsigned int v199 = (long long *)((char *)v199 + v189);
                    v201 += v189;
                    v200 += 128;
                    if (v184 == v175) {
                      goto LABEL_202;
                    }
                    continue;
                  }
                }
                float32x4_t v176 = vld1q_dup_f32((const float *)v173);
                int8x16_t v326 = (int8x16_t)v176;
                float32x4_t v327 = v176;
                float32x4_t v334 = v176;
                float32x4_t v335 = v176;
                float32x4_t v342 = v176;
                float32x4_t v343 = v176;
                float32x4_t v350 = v176;
                float32x4_t v351 = v176;
                uint64_t v175 = v283;
                if (v283) {
                  goto LABEL_171;
                }
              }
LABEL_202:
              uint64_t v218 = 0;
              __int32 v219 = v277;
              unsigned int v220 = v278;
              int v221 = v285;
              int v222 = v286;
              unsigned int v34 = a7;
              uint64_t v25 = v272;
              uint64_t v29 = 2 * a11;
              do
              {
                uint64_t v233 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,2u>::kSubblockPositions[v218 + 1];
                uint64_t v234 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,2u>::kSubblockPositions[v218];
                unsigned int v235 = (v221 - 4 * v234) & ~((v221 - 4 * (int)v234) >> 31);
                if (v235 >= 4) {
                  unsigned int v235 = 4;
                }
                unsigned int v236 = (v222 - 4 * v233) & ~((v222 - 4 * (int)v233) >> 31);
                if (v236 >= 4) {
                  unsigned int v236 = 4;
                }
                if (v235) {
                  BOOL v237 = v236 == 0;
                }
                else {
                  BOOL v237 = 1;
                }
                if (v237)
                {
                  char v232 = 0;
                }
                else
                {
                  long long v223 = &v288 + 32 * v233 + 2 * v234;
                  int8x16_t v224 = *v223;
                  int8x16_t v225 = v223[1];
                  int8x16_t v226 = v223[8];
                  int8x16_t v227 = v223[9];
                  int8x16_t v228 = v223[16];
                  int8x16_t v229 = v223[17];
                  v223 += 24;
                  int8x16_t v230 = *v223;
                  int8x16_t v231 = v223[1];
                  *__int32 v219 = v224;
                  v219[1] = v226;
                  v219[2] = v225;
                  v219[3] = v227;
                  v219[4] = v228;
                  v219[5] = v230;
                  v219[6] = v229;
                  v219[7] = v231;
                  v219 += 8;
                  char v232 = 127;
                }
                *v220++ = v232;
                v218 += 2;
              }
              while (v218 != 16);
LABEL_95:
              int v71 = __dst;
              if (v275) {
                goto LABEL_27;
              }
              goto LABEL_28;
            }
            uint64_t v76 = (int8x16_t *)v287;
          }
          else
          {
            uint64_t v76 = v71;
            if (v72) {
              goto LABEL_93;
            }
          }
          uint64_t v77 = 0;
          float32x4_t v78 = v76;
          do
          {
            uint64_t v92 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,2u>::kSubblockPositions[v77 + 1];
            uint64_t v93 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,2u>::kSubblockPositions[v77];
            unsigned int v94 = (v39 - 4 * v93) & ~((int)(v39 - 4 * v93) >> 31);
            if (v94 >= 4) {
              unsigned int v94 = 4;
            }
            unsigned int v95 = (v33 - 4 * v92) & ~((int)(v33 - 4 * v92) >> 31);
            if (v95 >= 4) {
              unsigned int v95 = 4;
            }
            if (v94) {
              BOOL v96 = v95 == 0;
            }
            else {
              BOOL v96 = 1;
            }
            if (v96)
            {
              char v91 = 0;
            }
            else
            {
              float32x4_t v79 = (long long *)(v70 + 4 * a11 * v92 + 32 * v93);
              float32x4_t v80 = (long long *)((char *)v79 + v28);
              long long v82 = *v79;
              long long v83 = v79[1];
              float32x4_t v81 = (long long *)((char *)v79 + v29);
              long long v84 = *v80;
              long long v85 = v80[1];
              long long v87 = *v81;
              long long v88 = v81[1];
              unsigned int v86 = (long long *)((char *)v81 + v28);
              long long v89 = *v86;
              long long v90 = v86[1];
              *float32x4_t v78 = (int8x16_t)v82;
              v78[1] = (int8x16_t)v84;
              v78[2] = (int8x16_t)v83;
              v78[3] = (int8x16_t)v85;
              v78[4] = (int8x16_t)v87;
              v78[5] = (int8x16_t)v89;
              v78[6] = (int8x16_t)v88;
              v78[7] = (int8x16_t)v90;
              v78 += 8;
              char v91 = 127;
            }
            *v69++ = v91;
            v77 += 2;
          }
          while (v77 != 16);
          unsigned int v34 = a7;
          if (v275)
          {
LABEL_27:
            memcpy(v71, v76, 0x400uLL);
            uint64_t v29 = 2 * a11;
            uint64_t v25 = v272;
          }
LABEL_28:
          BOOL v20 = v32++ == v263 >> 4;
        }
        while (!v20);
        BOOL v20 = v16++ == v255;
      }
      while (!v20);
    }
  }
}

uint64_t AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10, uint64_t a11, char a12)
{
  uint64_t v12 = MEMORY[0x270FA5388](a1);
  unsigned int v14 = v13;
  unsigned int v16 = v15;
  unsigned int v18 = v17;
  unsigned int v20 = v19;
  uint64_t v145 = v21;
  uint64_t v146 = v22;
  uint64_t v132 = v23;
  uint64_t v24 = v12;
  v174[208] = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(v12, 0);
  unsigned int v149 = v14;
  unsigned int v134 = v14 + a10 - 1;
  uint64_t v150 = v24;
  if (*(void *)(v24 + 168)) {
    int v25 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v25 = 0;
  }
  unsigned int v26 = v20 - 1;
  unsigned int v27 = v18 - 1;
  unsigned int v28 = v14 >> 3;
  unsigned int v133 = v134 >> 3;
  BOOL v29 = (v25 & 0xD00) == 0 || v25 == 768;
  int v30 = v25 & 0xE00;
  int v32 = !v29 && v30 != 1024;
  int v154 = v32;
  uint64_t result = v24;
  if (*(unsigned char *)(v24 + 232))
  {
    unsigned int v34 = *(unsigned __int8 *)(v24 + 255);
    unsigned int v35 = *(unsigned __int8 *)(v24 + 254);
    char v36 = __clz(v26);
    if (1 << v34 >= v18 || v20 >> v35)
    {
      if (!(v18 >> v34) && 1 << v35 < v20)
      {
        if (v18 < 2) {
          unsigned int v39 = 0;
        }
        else {
          unsigned int v39 = __clz(~(-1 << -(char)__clz(v27))) - 32;
        }
        v35 += v34 + v39;
        unsigned int v34 = -v39;
      }
    }
    else
    {
      unsigned int v37 = 32 - __clz(~(-1 << -v36));
      unsigned int v38 = v35 + v34;
      if (v20 < 2) {
        unsigned int v37 = 0;
      }
      unsigned int v34 = v38 - v37;
      unsigned int v35 = v37;
    }
    if (v20 < 2)
    {
      if (v35) {
        goto LABEL_27;
      }
    }
    else if (32 - __clz(~(-1 << -v36)) < v35)
    {
LABEL_27:
      BOOL v144 = 0;
LABEL_32:
      unsigned int v141 = v35 - 4;
      unsigned int v138 = v34 - 3;
      int v41 = -1 << *(unsigned char *)(*(void *)(v24 + 208) + 48);
      unsigned int v131 = (((~v41 + v20) & v41) + ~(-1 << v35)) >> v35;
      goto LABEL_33;
    }
    if (v18 < 2) {
      unsigned int v40 = 0;
    }
    else {
      unsigned int v40 = 32 - __clz(~(-1 << -(char)__clz(v27)));
    }
    BOOL v144 = v40 >= v34;
    goto LABEL_32;
  }
  BOOL v144 = 0;
  unsigned int v131 = 0;
  unsigned int v138 = 0;
  unsigned int v141 = 0;
LABEL_33:
  if (v28 <= v133)
  {
    unsigned int v143 = v16 + a9 - 1;
    unsigned int v130 = v16 >> 4;
    if (v16 >> 4 <= v143 >> 4)
    {
      unsigned int v153 = v26 >> 4;
      unsigned int v129 = v27 >> 3;
      int v152 = (v26 & 0xF) + 1;
      int v128 = (v27 & 7) + 1;
      int v127 = ~(-1 << v138);
      uint32x2_t v42 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(v20, v18), (int32x2_t)0xF00000007);
      int8x8_t v43 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32(vadd_s32((int32x2_t)vshl_u32(v42, (uint32x2_t)0xFFFFFFFCFFFFFFFDLL), (int32x2_t)-1))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x2000000010, v42));
      __int32 v139 = v43.i32[0] | v43.i32[1];
      int8x8_t v137 = v43;
      BOOL v135 = v43.i32[1] != 0;
      BOOL v136 = v43.i32[0] != 0;
      unsigned int v142 = v16;
      do
      {
        unsigned int v44 = (8 * v28) | 7;
        if (8 * v28 <= v149) {
          int v45 = v149;
        }
        else {
          int v45 = 8 * v28;
        }
        if (v134 < v44) {
          unsigned int v44 = v134;
        }
        int v140 = v45 - 8 * v28;
        int v148 = v44 - v45 + 1;
        unsigned int v46 = v130;
        if (v28 == v129) {
          unsigned int v47 = v128;
        }
        else {
          unsigned int v47 = 8;
        }
        int v48 = v28 & v127;
        uint64_t v147 = v132 + (v45 - v149) * a11;
        unsigned int v151 = v47;
        do
        {
          unsigned int v49 = 16 * v46;
          unsigned int v50 = 16 * (v46 + 1) - 1;
          if (16 * v46 <= v16) {
            int v51 = v16;
          }
          else {
            int v51 = 16 * v46;
          }
          if (v143 < v50) {
            unsigned int v50 = v143;
          }
          int v52 = v50 - v51 + 1;
          if (v46 == v153) {
            unsigned int v53 = v152;
          }
          else {
            unsigned int v53 = 16;
          }
          BOOL v54 = 1;
          if (8 * v28 >= v149 && v49 >= v16)
          {
            int v55 = v152;
            if (v46 != v153) {
              int v55 = 16;
            }
            BOOL v54 = v52 != v55 || v148 != v47;
          }
          if (v144)
          {
            if (v141 | v138)
            {
              int v57 = 0;
              uint64_t v58 = 0;
              BOOL v59 = v141 != 0;
              int v60 = 1;
              BOOL v62 = v138 != 0;
              unsigned int v61 = v138;
              unsigned int v63 = v141;
              do
              {
                --v61;
                if (v62) {
                  v58 |= (unint64_t)(v48 & v60) << v57++;
                }
                else {
                  unsigned int v61 = 0;
                }
                --v63;
                if (v59) {
                  v58 |= (unint64_t)(v46 & ~(-1 << v141) & v60) << v57++;
                }
                else {
                  unsigned int v63 = 0;
                }
                v60 *= 2;
                --v57;
                BOOL v59 = v63 != 0;
                BOOL v62 = v61 != 0;
              }
              while (v63 | v61);
            }
            else
            {
              uint64_t v58 = 0;
            }
            uint64_t v71 = *(void *)(result + 320) * ((v46 >> v141) + (v28 >> v138) * v131) + (v58 << 12);
          }
          else
          {
            if (v139)
            {
              int v64 = 0;
              uint64_t v65 = 0;
              int v66 = 1;
              BOOL v67 = v135;
              BOOL v68 = v136;
              __int32 v69 = v137.i32[0];
              __int32 v70 = v137.i32[1];
              do
              {
                --v69;
                if (v68) {
                  v65 |= (unint64_t)(v66 & v28) << v64++;
                }
                else {
                  __int32 v69 = 0;
                }
                --v70;
                if (v67) {
                  v65 |= (unint64_t)(v66 & v46) << v64++;
                }
                else {
                  __int32 v70 = 0;
                }
                v66 *= 2;
                --v64;
                BOOL v67 = v70 != 0;
                BOOL v68 = v69 != 0;
              }
              while (v70 | v69);
            }
            else
            {
              uint64_t v65 = 0;
            }
            uint64_t v71 = v65 << 12;
          }
          unsigned int v72 = *(_DWORD *)(result + 128) >> (*(unsigned char *)(result + 144) + a12);
          if (v72 <= 1) {
            unsigned int v72 = 1;
          }
          unsigned int v73 = v72 + 15;
          if (v73 < 0x20) {
            unsigned int v74 = 0;
          }
          else {
            unsigned int v74 = 32 - __clz(~(-1 << -(char)__clz((v73 >> 4) - 1)));
          }
          unsigned int v75 = *(_DWORD *)(result + 132) >> (*(unsigned char *)(result + 144) + a12);
          if (v75 <= 1) {
            unsigned int v75 = 1;
          }
          unsigned int v76 = v75 + 7;
          if (v76 < 0x10) {
            unsigned int v77 = 0;
          }
          else {
            unsigned int v77 = 32 - __clz(~(-1 << -(char)__clz((v76 >> 3) - 1)));
          }
          if (v77 | v74)
          {
            int v78 = 0;
            uint64_t v79 = 0;
            BOOL v80 = v74 != 0;
            BOOL v81 = v77 != 0;
            int v82 = 1;
            do
            {
              --v74;
              if (v80) {
                v79 |= (unint64_t)(v82 & v46) << v78++;
              }
              else {
                unsigned int v74 = 0;
              }
              --v77;
              if (v81) {
                v79 |= (unint64_t)(v82 & v28) << v78++;
              }
              else {
                unsigned int v77 = 0;
              }
              v82 *= 2;
              --v78;
              BOOL v81 = v77 != 0;
              BOOL v80 = v74 != 0;
            }
            while (v77 | v74);
          }
          else
          {
            uint64_t v79 = 0;
          }
          int v83 = v53 < 0x10 || v54;
          long long v84 = (unsigned __int8 *)(v146 + 8 * v79);
          uint64_t v85 = v147 + 32 * (v51 - v16);
          unsigned int v86 = (void *)(v145 + v71);
          if (v47 < 8) {
            int v87 = 1;
          }
          else {
            int v87 = v83;
          }
          if (v154)
          {
            if (!v87)
            {
              char v91 = __dst;
LABEL_123:
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock(v85, a11, (unint64_t)v91, v84, v53, v47);
              goto LABEL_124;
            }
            long long v88 = v86;
            long long v89 = v86;
            char v90 = v53;
            memcpy(__dst, v88, sizeof(__dst));
            unsigned int v49 = 16 * v46;
            char v91 = __dst;
            LOBYTE(v53) = v90;
            unsigned int v86 = v89;
            int v48 = v28 & v127;
            LOBYTE(v47) = v151;
            uint64_t result = v150;
          }
          else
          {
            char v91 = v86;
            if (!v87) {
              goto LABEL_123;
            }
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE20ELj2ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = result;
          float32x4_t v156 = v91;
          unsigned __int8 v164 = v53;
          unsigned __int8 v165 = v47;
          unsigned int v160 = v140;
          unsigned int v161 = v51 - v49;
          float32x4_t v157 = v84;
          uint64_t v158 = v85;
          uint64_t v159 = a11;
          unsigned int v162 = v148;
          unsigned int v163 = v52;
          if (!v54)
          {
            unint64_t v93 = (unint64_t)&v91[AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)v167, 512, (unint64_t)v91, *v84)];
            unint64_t v94 = v93
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v168, 512, v93, v84[1]);
            unint64_t v95 = v94
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v171, 512, v94, v84[2]);
            unint64_t v96 = v95
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v172, 512, v95, v84[3]);
            unint64_t v97 = v96
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v169, 512, v96, v84[4]);
            unint64_t v98 = v97
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v170, 512, v97, v84[5]);
            uint64_t v99 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v173, 512, v98, v84[6]);
            AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)v174, 512, v98 + v99, v84[7]);
            uint64_t v100 = v162;
            unsigned int v16 = v142;
            unsigned int v92 = v46 + 1;
            if (!v162 || !v163)
            {
LABEL_151:
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((uint64_t)v167, 512, (unint64_t)v156, v157, v164, v165);
              if (!v154) {
                goto LABEL_47;
              }
              goto LABEL_152;
            }
            uint64_t v101 = 0;
            unint64_t v102 = (unint64_t)v160 << 9;
            uint64_t v103 = 32 * v161;
            float32x4_t v104 = &v167[v102 + v103];
            uint64_t v105 = v158;
            uint64_t v106 = v159;
            unint64_t v107 = 32 * v163;
            if (v107 <= 1) {
              uint64_t v108 = 1;
            }
            else {
              uint64_t v108 = 32 * v163;
            }
            unint64_t v109 = v102 + v103;
            float32x4_t v110 = &v167[v102 + v103];
            if (v108) {
              BOOL v111 = (unint64_t)(v108 - 1) >> 32 == 0;
            }
            else {
              BOOL v111 = 0;
            }
            char v112 = !v111;
            uint64_t v113 = v108 & 0x1FFFFFFFE0;
            float32x4_t v114 = &v167[v109 + 16];
            float32x4_t v115 = (long long *)(v158 + 16);
            while (2)
            {
              float32x4_t v116 = (char *)(v105 + v106 * v101);
              float32x4_t v117 = &v104[512 * v101];
              if ((unint64_t)(&v110[512 * v101] - v116) < 0x20) {
                char v118 = 1;
              }
              else {
                char v118 = v112;
              }
              if (v118)
              {
                int v119 = 0;
LABEL_148:
                unsigned int v124 = v119 + 1;
                do
                {
                  char v125 = *v116++;
                  *v117++ = v125;
                }
                while (v107 > v124++);
              }
              else
              {
                uint64_t v120 = v115;
                float32x4_t v121 = v114;
                uint64_t v122 = v108 & 0x1FFFFFFFE0;
                do
                {
                  long long v123 = *v120;
                  *(v121 - 1) = *(v120 - 1);
                  *float32x4_t v121 = v123;
                  v121 += 2;
                  v120 += 2;
                  v122 -= 32;
                }
                while (v122);
                if (v108 != v113)
                {
                  v116 += v113;
                  v117 += v113;
                  int v119 = v108 & 0xFFFFFFE0;
                  goto LABEL_148;
                }
              }
              ++v101;
              v114 += 512;
              float32x4_t v115 = (long long *)((char *)v115 + v106);
              if (v101 == v100) {
                goto LABEL_151;
              }
              continue;
            }
          }
          dispatch_sync(*(dispatch_queue_t *)(*(void *)(result + 8) + 7384), block);
LABEL_124:
          unsigned int v16 = v142;
          unsigned int v92 = v46 + 1;
          if (!v154) {
            goto LABEL_47;
          }
LABEL_152:
          memcpy(v86, v91, 0x1000uLL);
LABEL_47:
          BOOL v29 = v46 == v143 >> 4;
          unsigned int v46 = v92;
          uint64_t result = v150;
          unsigned int v47 = v151;
        }
        while (!v29);
        BOOL v29 = v28++ == v133;
      }
      while (!v29);
    }
  }
  return result;
}

uint64_t AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10, uint64_t a11, char a12)
{
  uint64_t v12 = MEMORY[0x270FA5388](a1);
  unsigned int v14 = v13;
  unsigned int v16 = v15;
  unsigned int v18 = v17;
  unsigned int v20 = v19;
  uint64_t v145 = v21;
  uint64_t v146 = v22;
  uint64_t v132 = v23;
  uint64_t v24 = v12;
  v174[208] = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(v12, 0);
  unsigned int v149 = v14;
  unsigned int v134 = v14 + a10 - 1;
  uint64_t v150 = v24;
  if (*(void *)(v24 + 168)) {
    int v25 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v25 = 0;
  }
  unsigned int v26 = v20 - 1;
  unsigned int v27 = v18 - 1;
  unsigned int v28 = v14 >> 3;
  unsigned int v133 = v134 >> 3;
  BOOL v29 = (v25 & 0xD00) == 0 || v25 == 768;
  int v30 = v25 & 0xE00;
  int v32 = !v29 && v30 != 1024;
  int v154 = v32;
  uint64_t result = v24;
  if (*(unsigned char *)(v24 + 232))
  {
    unsigned int v34 = *(unsigned __int8 *)(v24 + 255);
    unsigned int v35 = *(unsigned __int8 *)(v24 + 254);
    char v36 = __clz(v26);
    if (1 << v34 >= v18 || v20 >> v35)
    {
      if (!(v18 >> v34) && 1 << v35 < v20)
      {
        if (v18 < 2) {
          unsigned int v39 = 0;
        }
        else {
          unsigned int v39 = __clz(~(-1 << -(char)__clz(v27))) - 32;
        }
        v35 += v34 + v39;
        unsigned int v34 = -v39;
      }
    }
    else
    {
      unsigned int v37 = 32 - __clz(~(-1 << -v36));
      unsigned int v38 = v35 + v34;
      if (v20 < 2) {
        unsigned int v37 = 0;
      }
      unsigned int v34 = v38 - v37;
      unsigned int v35 = v37;
    }
    if (v20 < 2)
    {
      if (v35) {
        goto LABEL_27;
      }
    }
    else if (32 - __clz(~(-1 << -v36)) < v35)
    {
LABEL_27:
      BOOL v144 = 0;
LABEL_32:
      unsigned int v141 = v35 - 4;
      unsigned int v138 = v34 - 3;
      int v41 = -1 << *(unsigned char *)(*(void *)(v24 + 208) + 48);
      unsigned int v131 = (((~v41 + v20) & v41) + ~(-1 << v35)) >> v35;
      goto LABEL_33;
    }
    if (v18 < 2) {
      unsigned int v40 = 0;
    }
    else {
      unsigned int v40 = 32 - __clz(~(-1 << -(char)__clz(v27)));
    }
    BOOL v144 = v40 >= v34;
    goto LABEL_32;
  }
  BOOL v144 = 0;
  unsigned int v131 = 0;
  unsigned int v138 = 0;
  unsigned int v141 = 0;
LABEL_33:
  if (v28 <= v133)
  {
    unsigned int v143 = v16 + a9 - 1;
    unsigned int v130 = v16 >> 4;
    if (v16 >> 4 <= v143 >> 4)
    {
      unsigned int v153 = v26 >> 4;
      unsigned int v129 = v27 >> 3;
      int v152 = (v26 & 0xF) + 1;
      int v128 = (v27 & 7) + 1;
      int v127 = ~(-1 << v138);
      uint32x2_t v42 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(v20, v18), (int32x2_t)0xF00000007);
      int8x8_t v43 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32(vadd_s32((int32x2_t)vshl_u32(v42, (uint32x2_t)0xFFFFFFFCFFFFFFFDLL), (int32x2_t)-1))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x2000000010, v42));
      __int32 v139 = v43.i32[0] | v43.i32[1];
      int8x8_t v137 = v43;
      BOOL v135 = v43.i32[1] != 0;
      BOOL v136 = v43.i32[0] != 0;
      unsigned int v142 = v16;
      do
      {
        unsigned int v44 = (8 * v28) | 7;
        if (8 * v28 <= v149) {
          int v45 = v149;
        }
        else {
          int v45 = 8 * v28;
        }
        if (v134 < v44) {
          unsigned int v44 = v134;
        }
        int v140 = v45 - 8 * v28;
        int v148 = v44 - v45 + 1;
        unsigned int v46 = v130;
        if (v28 == v129) {
          unsigned int v47 = v128;
        }
        else {
          unsigned int v47 = 8;
        }
        int v48 = v28 & v127;
        uint64_t v147 = v132 + (v45 - v149) * a11;
        unsigned int v151 = v47;
        do
        {
          unsigned int v49 = 16 * v46;
          unsigned int v50 = 16 * (v46 + 1) - 1;
          if (16 * v46 <= v16) {
            int v51 = v16;
          }
          else {
            int v51 = 16 * v46;
          }
          if (v143 < v50) {
            unsigned int v50 = v143;
          }
          int v52 = v50 - v51 + 1;
          if (v46 == v153) {
            unsigned int v53 = v152;
          }
          else {
            unsigned int v53 = 16;
          }
          BOOL v54 = 1;
          if (8 * v28 >= v149 && v49 >= v16)
          {
            int v55 = v152;
            if (v46 != v153) {
              int v55 = 16;
            }
            BOOL v54 = v52 != v55 || v148 != v47;
          }
          if (v144)
          {
            if (v141 | v138)
            {
              int v57 = 0;
              uint64_t v58 = 0;
              BOOL v59 = v141 != 0;
              int v60 = 1;
              BOOL v62 = v138 != 0;
              unsigned int v61 = v138;
              unsigned int v63 = v141;
              do
              {
                --v61;
                if (v62) {
                  v58 |= (unint64_t)(v48 & v60) << v57++;
                }
                else {
                  unsigned int v61 = 0;
                }
                --v63;
                if (v59) {
                  v58 |= (unint64_t)(v46 & ~(-1 << v141) & v60) << v57++;
                }
                else {
                  unsigned int v63 = 0;
                }
                v60 *= 2;
                --v57;
                BOOL v59 = v63 != 0;
                BOOL v62 = v61 != 0;
              }
              while (v63 | v61);
            }
            else
            {
              uint64_t v58 = 0;
            }
            uint64_t v71 = *(void *)(result + 320) * ((v46 >> v141) + (v28 >> v138) * v131) + (v58 << 12);
          }
          else
          {
            if (v139)
            {
              int v64 = 0;
              uint64_t v65 = 0;
              int v66 = 1;
              BOOL v67 = v135;
              BOOL v68 = v136;
              __int32 v69 = v137.i32[0];
              __int32 v70 = v137.i32[1];
              do
              {
                --v69;
                if (v68) {
                  v65 |= (unint64_t)(v66 & v28) << v64++;
                }
                else {
                  __int32 v69 = 0;
                }
                --v70;
                if (v67) {
                  v65 |= (unint64_t)(v66 & v46) << v64++;
                }
                else {
                  __int32 v70 = 0;
                }
                v66 *= 2;
                --v64;
                BOOL v67 = v70 != 0;
                BOOL v68 = v69 != 0;
              }
              while (v70 | v69);
            }
            else
            {
              uint64_t v65 = 0;
            }
            uint64_t v71 = v65 << 12;
          }
          unsigned int v72 = *(_DWORD *)(result + 128) >> (*(unsigned char *)(result + 144) + a12);
          if (v72 <= 1) {
            unsigned int v72 = 1;
          }
          unsigned int v73 = v72 + 15;
          if (v73 < 0x20) {
            unsigned int v74 = 0;
          }
          else {
            unsigned int v74 = 32 - __clz(~(-1 << -(char)__clz((v73 >> 4) - 1)));
          }
          unsigned int v75 = *(_DWORD *)(result + 132) >> (*(unsigned char *)(result + 144) + a12);
          if (v75 <= 1) {
            unsigned int v75 = 1;
          }
          unsigned int v76 = v75 + 7;
          if (v76 < 0x10) {
            unsigned int v77 = 0;
          }
          else {
            unsigned int v77 = 32 - __clz(~(-1 << -(char)__clz((v76 >> 3) - 1)));
          }
          if (v77 | v74)
          {
            int v78 = 0;
            uint64_t v79 = 0;
            BOOL v80 = v74 != 0;
            BOOL v81 = v77 != 0;
            int v82 = 1;
            do
            {
              --v74;
              if (v80) {
                v79 |= (unint64_t)(v82 & v46) << v78++;
              }
              else {
                unsigned int v74 = 0;
              }
              --v77;
              if (v81) {
                v79 |= (unint64_t)(v82 & v28) << v78++;
              }
              else {
                unsigned int v77 = 0;
              }
              v82 *= 2;
              --v78;
              BOOL v81 = v77 != 0;
              BOOL v80 = v74 != 0;
            }
            while (v77 | v74);
          }
          else
          {
            uint64_t v79 = 0;
          }
          int v83 = v53 < 0x10 || v54;
          long long v84 = (char *)(v146 + 8 * v79);
          uint64_t v85 = v147 + 32 * (v51 - v16);
          unsigned int v86 = (void *)(v145 + v71);
          if (v47 < 8) {
            int v87 = 1;
          }
          else {
            int v87 = v83;
          }
          if (v154)
          {
            if (!v87)
            {
              char v91 = __dst;
LABEL_123:
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock(v85, a11, v91, v84, v53, v47);
              goto LABEL_124;
            }
            long long v88 = v86;
            long long v89 = v86;
            char v90 = v53;
            memcpy(__dst, v88, sizeof(__dst));
            unsigned int v49 = 16 * v46;
            char v91 = __dst;
            LOBYTE(v53) = v90;
            unsigned int v86 = v89;
            int v48 = v28 & v127;
            LOBYTE(v47) = v151;
            uint64_t result = v150;
          }
          else
          {
            char v91 = v86;
            if (!v87) {
              goto LABEL_123;
            }
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE20ELj2ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = result;
          float32x4_t v156 = v91;
          unsigned __int8 v164 = v53;
          unsigned __int8 v165 = v47;
          unsigned int v160 = v140;
          unsigned int v161 = v51 - v49;
          float32x4_t v157 = v84;
          uint64_t v158 = v85;
          uint64_t v159 = a11;
          unsigned int v162 = v148;
          unsigned int v163 = v52;
          if (!v54)
          {
            unint64_t v93 = (unint64_t)v91
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)v167, 512, (unint64_t)v91, *v84);
            unint64_t v94 = v93
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v168, 512, v93, v84[1]);
            unint64_t v95 = v94
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v171, 512, v94, v84[2]);
            unint64_t v96 = v95
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v172, 512, v95, v84[3]);
            unint64_t v97 = v96
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v169, 512, v96, v84[4]);
            unint64_t v98 = v97
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v170, 512, v97, v84[5]);
            uint64_t v99 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v173, 512, v98, v84[6]);
            AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)v174, 512, v98 + v99, v84[7]);
            uint64_t v100 = v162;
            unsigned int v16 = v142;
            unsigned int v92 = v46 + 1;
            if (!v162 || !v163)
            {
LABEL_151:
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((uint64_t)v167, 512, v156, v157, v164, v165);
              if (!v154) {
                goto LABEL_47;
              }
              goto LABEL_152;
            }
            uint64_t v101 = 0;
            unint64_t v102 = (unint64_t)v160 << 9;
            uint64_t v103 = 32 * v161;
            float32x4_t v104 = &v167[v102 + v103];
            uint64_t v105 = v158;
            uint64_t v106 = v159;
            unint64_t v107 = 32 * v163;
            if (v107 <= 1) {
              uint64_t v108 = 1;
            }
            else {
              uint64_t v108 = 32 * v163;
            }
            unint64_t v109 = v102 + v103;
            float32x4_t v110 = &v167[v102 + v103];
            if (v108) {
              BOOL v111 = (unint64_t)(v108 - 1) >> 32 == 0;
            }
            else {
              BOOL v111 = 0;
            }
            char v112 = !v111;
            uint64_t v113 = v108 & 0x1FFFFFFFE0;
            float32x4_t v114 = &v167[v109 + 16];
            float32x4_t v115 = (long long *)(v158 + 16);
            while (2)
            {
              float32x4_t v116 = (char *)(v105 + v106 * v101);
              float32x4_t v117 = &v104[512 * v101];
              if ((unint64_t)(&v110[512 * v101] - v116) < 0x20) {
                char v118 = 1;
              }
              else {
                char v118 = v112;
              }
              if (v118)
              {
                int v119 = 0;
LABEL_148:
                unsigned int v124 = v119 + 1;
                do
                {
                  char v125 = *v116++;
                  *v117++ = v125;
                }
                while (v107 > v124++);
              }
              else
              {
                uint64_t v120 = v115;
                float32x4_t v121 = v114;
                uint64_t v122 = v108 & 0x1FFFFFFFE0;
                do
                {
                  long long v123 = *v120;
                  *(v121 - 1) = *(v120 - 1);
                  *float32x4_t v121 = v123;
                  v121 += 2;
                  v120 += 2;
                  v122 -= 32;
                }
                while (v122);
                if (v108 != v113)
                {
                  v116 += v113;
                  v117 += v113;
                  int v119 = v108 & 0xFFFFFFE0;
                  goto LABEL_148;
                }
              }
              ++v101;
              v114 += 512;
              float32x4_t v115 = (long long *)((char *)v115 + v106);
              if (v101 == v100) {
                goto LABEL_151;
              }
              continue;
            }
          }
          dispatch_sync(*(dispatch_queue_t *)(*(void *)(result + 8) + 7384), block);
LABEL_124:
          unsigned int v16 = v142;
          unsigned int v92 = v46 + 1;
          if (!v154) {
            goto LABEL_47;
          }
LABEL_152:
          memcpy(v86, v91, 0x1000uLL);
LABEL_47:
          BOOL v29 = v46 == v143 >> 4;
          unsigned int v46 = v92;
          uint64_t result = v150;
          unsigned int v47 = v151;
        }
        while (!v29);
        BOOL v29 = v28++ == v133;
      }
      while (!v29);
    }
  }
  return result;
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10, uint64_t a11, int a12)
{
  uint64_t v12 = MEMORY[0x270FA5388](a1);
  unsigned int v14 = v13;
  unsigned int v16 = v15;
  unsigned int v18 = v17;
  unsigned int v20 = v19;
  uint64_t v147 = v21;
  uint64_t v148 = v22;
  uint64_t v137 = v23;
  uint64_t v24 = v12;
  v177[208] = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(v12, 0);
  uint64_t v25 = v24;
  unsigned int v152 = v14;
  unsigned int v26 = v14 >> 3;
  unsigned int v136 = v14 + a10 - 1;
  unsigned int v138 = v136 >> 3;
  unsigned int v27 = *(unsigned __int8 *)(*(void *)(v24 + 208) + 88);
  unsigned int v28 = *(_DWORD *)(v24 + 112);
  uint64_t v153 = v25;
  if (*(void *)(v25 + 168))
  {
    __int16 CacheMode = IOSurfaceGetCacheMode();
    uint64_t v25 = v153;
    int v30 = CacheMode & 0xF00;
  }
  else
  {
    int v30 = 0;
  }
  BOOL v31 = (v30 & 0xD00) == 0 || v30 == 768;
  int v32 = v30 & 0xE00;
  int v34 = !v31 && v32 != 1024;
  int v157 = v34;
  BOOL isLevelTiled = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::isLevelTiled(v25, *(_DWORD *)(v25 + 144) + a12);
  uint64_t v36 = v153;
  BOOL v146 = isLevelTiled;
  if (v26 <= v138)
  {
    unsigned int v145 = v16 + a9 - 1;
    unsigned int v135 = v16 >> 4;
    if (v16 >> 4 <= v145 >> 4)
    {
      unsigned int v132 = v20 - 1;
      unsigned int v134 = (v18 - 1) >> 3;
      int v155 = ((v20 - 1) & 0xF) + 1;
      unsigned int v156 = (v20 - 1) >> 4;
      int v133 = ((v18 - 1) & 7) + 1;
      uint32x2_t v37 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(v20, v18), (int32x2_t)0xF00000007);
      int8x8_t v38 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32(vadd_s32((int32x2_t)vshl_u32(v37, (uint32x2_t)0xFFFFFFFCFFFFFFFDLL), (int32x2_t)-1))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x2000000010, v37));
      __int32 v143 = v38.i32[0] | v38.i32[1];
      int8x8_t v142 = v38;
      BOOL v140 = v38.i32[1] != 0;
      BOOL v141 = v38.i32[0] != 0;
      unint64_t v131 = 8 * v28 * (unint64_t)v27;
      unsigned int v144 = v16;
      do
      {
        unsigned int v39 = (8 * v26) | 7;
        if (8 * v26 <= v152) {
          int v40 = v152;
        }
        else {
          int v40 = 8 * v26;
        }
        unsigned int v41 = v135;
        if (v136 < v39) {
          unsigned int v39 = v136;
        }
        int v139 = v40 - 8 * v26;
        int v150 = v39 - v40 + 1;
        unsigned int v151 = 8 * v26;
        if (v26 == v134) {
          unsigned int v42 = v133;
        }
        else {
          unsigned int v42 = 8;
        }
        uint64_t v149 = v137 + (v40 - v152) * a11;
        unsigned int v154 = v42;
        do
        {
          unsigned int v43 = 16 * v41;
          unsigned int v44 = 16 * (v41 + 1) - 1;
          if (16 * v41 <= v16) {
            int v45 = v16;
          }
          else {
            int v45 = 16 * v41;
          }
          if (v145 < v44) {
            unsigned int v44 = v145;
          }
          int v46 = v44 - v45 + 1;
          if (v41 == v156) {
            unsigned int v47 = v155;
          }
          else {
            unsigned int v47 = 16;
          }
          BOOL v48 = 1;
          if (v151 >= v152 && v43 >= v16)
          {
            int v49 = v155;
            if (v41 != v156) {
              int v49 = 16;
            }
            BOOL v48 = v46 != v49 || v150 != v42;
          }
          if (v146)
          {
            unsigned int v70 = 0;
            uint64_t v71 = v131 >> (*(unsigned char *)(v36 + 57) != 0);
            char v72 = 1;
            if (v71 > 127)
            {
              if (v71 > 511)
              {
                if (v71 == 512)
                {
                  char v73 = 0;
                  unsigned int v70 = 16;
                  unsigned int v74 = 16;
                }
                else
                {
                  char v73 = 1;
                  unsigned int v74 = 0;
                  if (v71 == 1024)
                  {
                    unsigned int v74 = 8;
                    unsigned int v70 = 16;
                  }
                }
              }
              else if (v71 == 128)
              {
                char v72 = 0;
                char v73 = 0;
                unsigned int v70 = 32;
                unsigned int v74 = 32;
              }
              else
              {
                char v73 = 1;
                unsigned int v74 = 0;
                if (v71 == 256)
                {
                  char v72 = 0;
                  char v73 = 0;
                  unsigned int v74 = 16;
                  unsigned int v70 = 32;
                }
              }
            }
            else
            {
              char v73 = 1;
              unsigned int v74 = 0;
              switch(v71)
              {
                case 4:
                  char v72 = 0;
                  char v73 = 0;
                  unsigned int v74 = 128;
                  unsigned int v70 = 256;
                  break;
                case 5:
                case 6:
                case 7:
                case 9:
                case 10:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 17:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                  break;
                case 8:
                  char v72 = 0;
                  char v73 = 0;
                  unsigned int v70 = 128;
                  unsigned int v74 = 128;
                  break;
                case 16:
                  char v72 = 0;
                  char v73 = 0;
                  unsigned int v74 = 64;
                  unsigned int v70 = 128;
                  break;
                case 32:
                  char v72 = 0;
                  char v73 = 0;
                  unsigned int v70 = 64;
                  unsigned int v74 = 64;
                  break;
                default:
                  if (v71 == 64)
                  {
                    char v72 = 0;
                    char v73 = 0;
                    unsigned int v74 = 32;
                    unsigned int v70 = 64;
                  }
                  break;
              }
            }
            unsigned int v120 = (v70 >> 4) - 1;
            if (v72) {
              unsigned int v121 = 0;
            }
            else {
              unsigned int v121 = 32 - __clz(~(-1 << -(char)__clz(v120)));
            }
            unsigned int v122 = (v74 >> 3) - 1;
            if (v73)
            {
              unsigned int v123 = 0;
              if (v121) {
                goto LABEL_143;
              }
            }
            else
            {
              unsigned int v123 = 32 - __clz(~(-1 << -(char)__clz(v122)));
              if (v123 | v121)
              {
LABEL_143:
                int v124 = 0;
                uint64_t v125 = 0;
                int v126 = v41 & v120;
                int v127 = v26 & v122;
                BOOL v128 = v123 != 0;
                BOOL v129 = v121 != 0;
                int v130 = 1;
                do
                {
                  --v123;
                  if (v128) {
                    v125 |= (unint64_t)(v130 & v127) << v124++;
                  }
                  else {
                    unsigned int v123 = 0;
                  }
                  --v121;
                  if (v129) {
                    v125 |= (unint64_t)(v130 & v126) << v124++;
                  }
                  else {
                    unsigned int v121 = 0;
                  }
                  v130 *= 2;
                  --v124;
                  BOOL v129 = v121 != 0;
                  BOOL v128 = v123 != 0;
                }
                while (v121 | v123);
                goto LABEL_155;
              }
            }
            uint64_t v125 = 0;
LABEL_155:
            unint64_t v58 = ((unint64_t)(v43 / v70 + v151 / v74 * ((v70 + v132) / v70)) << 14) + (v125 << 12);
            goto LABEL_59;
          }
          if (v143)
          {
            int v51 = 0;
            uint64_t v52 = 0;
            int v53 = 1;
            BOOL v54 = v140;
            BOOL v55 = v141;
            __int32 v56 = v142.i32[0];
            __int32 v57 = v142.i32[1];
            do
            {
              --v56;
              if (v55) {
                v52 |= (unint64_t)(v53 & v26) << v51++;
              }
              else {
                __int32 v56 = 0;
              }
              --v57;
              if (v54) {
                v52 |= (unint64_t)(v53 & v41) << v51++;
              }
              else {
                __int32 v57 = 0;
              }
              v53 *= 2;
              --v51;
              BOOL v54 = v57 != 0;
              BOOL v55 = v56 != 0;
            }
            while (v57 | v56);
          }
          else
          {
            uint64_t v52 = 0;
          }
          unint64_t v58 = v52 << 12;
LABEL_59:
          unsigned int v59 = *(_DWORD *)(v36 + 128) >> (*(unsigned char *)(v36 + 144) + a12);
          if (v59 <= 1) {
            unsigned int v59 = 1;
          }
          unsigned int v60 = v59 + 15;
          if (v60 < 0x20) {
            unsigned int v61 = 0;
          }
          else {
            unsigned int v61 = 32 - __clz(~(-1 << -(char)__clz((v60 >> 4) - 1)));
          }
          unsigned int v62 = *(_DWORD *)(v36 + 132) >> (*(unsigned char *)(v36 + 144) + a12);
          if (v62 <= 1) {
            unsigned int v62 = 1;
          }
          unsigned int v63 = v62 + 7;
          if (v63 < 0x10)
          {
            unsigned int v64 = 0;
            if (!v61)
            {
LABEL_81:
              uint64_t v66 = 0;
              goto LABEL_82;
            }
          }
          else
          {
            unsigned int v64 = 32 - __clz(~(-1 << -(char)__clz((v63 >> 3) - 1)));
            if (!(v64 | v61)) {
              goto LABEL_81;
            }
          }
          int v65 = 0;
          uint64_t v66 = 0;
          BOOL v67 = v61 != 0;
          BOOL v68 = v64 != 0;
          int v69 = 1;
          do
          {
            --v61;
            if (v67) {
              v66 |= (unint64_t)(v69 & v41) << v65++;
            }
            else {
              unsigned int v61 = 0;
            }
            --v64;
            if (v68) {
              v66 |= (unint64_t)(v69 & v26) << v65++;
            }
            else {
              unsigned int v64 = 0;
            }
            v69 *= 2;
            --v65;
            BOOL v68 = v64 != 0;
            BOOL v67 = v61 != 0;
          }
          while (v64 | v61);
LABEL_82:
          int v75 = v47 < 0x10 || v48;
          unsigned int v76 = (unsigned __int8 *)(v148 + 8 * v66);
          uint64_t v77 = v149 + 32 * (v45 - v16);
          int v78 = (void *)(v147 + v58);
          if (v42 < 8) {
            int v79 = 1;
          }
          else {
            int v79 = v75;
          }
          if (v157)
          {
            if (!v79)
            {
              uint64_t v85 = __dst;
LABEL_95:
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock(v77, a11, (unint64_t)v85, v76, v47, v42);
              goto LABEL_96;
            }
            BOOL v80 = v78;
            char v81 = v47;
            int v82 = v78;
            int v83 = v46;
            BOOL v84 = v48;
            memcpy(__dst, v80, sizeof(__dst));
            BOOL v48 = v84;
            unsigned int v43 = 16 * v41;
            uint64_t v85 = __dst;
            int v46 = v83;
            int v78 = v82;
            LOBYTE(v47) = v81;
            LOBYTE(v42) = v154;
            uint64_t v36 = v153;
          }
          else
          {
            uint64_t v85 = v78;
            if (!v79) {
              goto LABEL_95;
            }
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE20ELj2ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = v36;
          uint64_t v159 = v85;
          unsigned __int8 v167 = v47;
          unsigned __int8 v168 = v42;
          unsigned int v163 = v139;
          unsigned int v164 = v45 - v43;
          unsigned int v160 = v76;
          uint64_t v161 = v77;
          uint64_t v162 = a11;
          unsigned int v165 = v150;
          unsigned int v166 = v46;
          if (!v48)
          {
            unint64_t v86 = (unint64_t)&v85[AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)v170, 512, (unint64_t)v85, *v76)];
            unint64_t v87 = v86
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v171, 512, v86, v76[1]);
            unint64_t v88 = v87
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v174, 512, v87, v76[2]);
            unint64_t v89 = v88
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v175, 512, v88, v76[3]);
            unint64_t v90 = v89
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v172, 512, v89, v76[4]);
            unint64_t v91 = v90
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v173, 512, v90, v76[5]);
            uint64_t v92 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v176, 512, v91, v76[6]);
            AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)v177, 512, v91 + v92, v76[7]);
            uint64_t v93 = v165;
            unsigned int v16 = v144;
            if (!v165 || !v166)
            {
LABEL_123:
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((uint64_t)v170, 512, (unint64_t)v159, v160, v167, v168);
              if (!v157) {
                goto LABEL_27;
              }
              goto LABEL_124;
            }
            uint64_t v94 = 0;
            unint64_t v95 = (unint64_t)v163 << 9;
            uint64_t v96 = 32 * v164;
            unint64_t v97 = &v170[v95 + v96];
            uint64_t v98 = v161;
            uint64_t v99 = v162;
            unint64_t v100 = 32 * v166;
            if (v100 <= 1) {
              uint64_t v101 = 1;
            }
            else {
              uint64_t v101 = 32 * v166;
            }
            unint64_t v102 = v95 + v96;
            uint64_t v103 = &v170[v95 + v96];
            if (v101) {
              BOOL v104 = (unint64_t)(v101 - 1) >> 32 == 0;
            }
            else {
              BOOL v104 = 0;
            }
            char v105 = !v104;
            uint64_t v106 = v101 & 0x1FFFFFFFE0;
            unint64_t v107 = &v170[v102 + 16];
            uint64_t v108 = (long long *)(v161 + 16);
            while (2)
            {
              unint64_t v109 = (char *)(v98 + v99 * v94);
              float32x4_t v110 = &v97[512 * v94];
              if ((unint64_t)(&v103[512 * v94] - v109) < 0x20) {
                char v111 = 1;
              }
              else {
                char v111 = v105;
              }
              if (v111)
              {
                int v112 = 0;
LABEL_120:
                unsigned int v117 = v112 + 1;
                do
                {
                  char v118 = *v109++;
                  *v110++ = v118;
                }
                while (v100 > v117++);
              }
              else
              {
                uint64_t v113 = v108;
                float32x4_t v114 = v107;
                uint64_t v115 = v101 & 0x1FFFFFFFE0;
                do
                {
                  long long v116 = *v113;
                  *(v114 - 1) = *(v113 - 1);
                  *float32x4_t v114 = v116;
                  v114 += 2;
                  v113 += 2;
                  v115 -= 32;
                }
                while (v115);
                if (v101 != v106)
                {
                  v109 += v106;
                  v110 += v106;
                  int v112 = v101 & 0xFFFFFFE0;
                  goto LABEL_120;
                }
              }
              ++v94;
              v107 += 512;
              uint64_t v108 = (long long *)((char *)v108 + v99);
              if (v94 == v93) {
                goto LABEL_123;
              }
              continue;
            }
          }
          dispatch_sync(*(dispatch_queue_t *)(*(void *)(v36 + 8) + 7384), block);
LABEL_96:
          unsigned int v16 = v144;
          if (!v157) {
            goto LABEL_27;
          }
LABEL_124:
          memcpy(v78, v85, 0x1000uLL);
LABEL_27:
          BOOL v31 = v41++ == v145 >> 4;
          uint64_t v36 = v153;
          unsigned int v42 = v154;
        }
        while (!v31);
        BOOL v31 = v26++ == v138;
      }
      while (!v31);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10, uint64_t a11, int a12)
{
  uint64_t v12 = MEMORY[0x270FA5388](a1);
  unsigned int v14 = v13;
  unsigned int v16 = v15;
  unsigned int v18 = v17;
  unsigned int v20 = v19;
  uint64_t v147 = v21;
  uint64_t v148 = v22;
  uint64_t v137 = v23;
  uint64_t v24 = v12;
  v177[208] = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(v12, 0);
  uint64_t v25 = v24;
  unsigned int v152 = v14;
  unsigned int v26 = v14 >> 3;
  unsigned int v136 = v14 + a10 - 1;
  unsigned int v138 = v136 >> 3;
  unsigned int v27 = *(unsigned __int8 *)(*(void *)(v24 + 208) + 88);
  unsigned int v28 = *(_DWORD *)(v24 + 112);
  uint64_t v153 = v25;
  if (*(void *)(v25 + 168))
  {
    __int16 CacheMode = IOSurfaceGetCacheMode();
    uint64_t v25 = v153;
    int v30 = CacheMode & 0xF00;
  }
  else
  {
    int v30 = 0;
  }
  BOOL v31 = (v30 & 0xD00) == 0 || v30 == 768;
  int v32 = v30 & 0xE00;
  int v34 = !v31 && v32 != 1024;
  int v157 = v34;
  BOOL isLevelTiled = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::isLevelTiled(v25, *(_DWORD *)(v25 + 144) + a12);
  uint64_t v36 = v153;
  BOOL v146 = isLevelTiled;
  if (v26 <= v138)
  {
    unsigned int v145 = v16 + a9 - 1;
    unsigned int v135 = v16 >> 4;
    if (v16 >> 4 <= v145 >> 4)
    {
      unsigned int v132 = v20 - 1;
      unsigned int v134 = (v18 - 1) >> 3;
      int v155 = ((v20 - 1) & 0xF) + 1;
      unsigned int v156 = (v20 - 1) >> 4;
      int v133 = ((v18 - 1) & 7) + 1;
      uint32x2_t v37 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(v20, v18), (int32x2_t)0xF00000007);
      int8x8_t v38 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32(vadd_s32((int32x2_t)vshl_u32(v37, (uint32x2_t)0xFFFFFFFCFFFFFFFDLL), (int32x2_t)-1))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x2000000010, v37));
      __int32 v143 = v38.i32[0] | v38.i32[1];
      int8x8_t v142 = v38;
      BOOL v140 = v38.i32[1] != 0;
      BOOL v141 = v38.i32[0] != 0;
      unint64_t v131 = 8 * v28 * (unint64_t)v27;
      unsigned int v144 = v16;
      do
      {
        unsigned int v39 = (8 * v26) | 7;
        if (8 * v26 <= v152) {
          int v40 = v152;
        }
        else {
          int v40 = 8 * v26;
        }
        unsigned int v41 = v135;
        if (v136 < v39) {
          unsigned int v39 = v136;
        }
        int v139 = v40 - 8 * v26;
        int v150 = v39 - v40 + 1;
        unsigned int v151 = 8 * v26;
        if (v26 == v134) {
          unsigned int v42 = v133;
        }
        else {
          unsigned int v42 = 8;
        }
        uint64_t v149 = v137 + (v40 - v152) * a11;
        unsigned int v154 = v42;
        do
        {
          unsigned int v43 = 16 * v41;
          unsigned int v44 = 16 * (v41 + 1) - 1;
          if (16 * v41 <= v16) {
            int v45 = v16;
          }
          else {
            int v45 = 16 * v41;
          }
          if (v145 < v44) {
            unsigned int v44 = v145;
          }
          int v46 = v44 - v45 + 1;
          if (v41 == v156) {
            unsigned int v47 = v155;
          }
          else {
            unsigned int v47 = 16;
          }
          BOOL v48 = 1;
          if (v151 >= v152 && v43 >= v16)
          {
            int v49 = v155;
            if (v41 != v156) {
              int v49 = 16;
            }
            BOOL v48 = v46 != v49 || v150 != v42;
          }
          if (v146)
          {
            unsigned int v70 = 0;
            uint64_t v71 = v131 >> (*(unsigned char *)(v36 + 57) != 0);
            char v72 = 1;
            if (v71 > 127)
            {
              if (v71 > 511)
              {
                if (v71 == 512)
                {
                  char v73 = 0;
                  unsigned int v70 = 16;
                  unsigned int v74 = 16;
                }
                else
                {
                  char v73 = 1;
                  unsigned int v74 = 0;
                  if (v71 == 1024)
                  {
                    unsigned int v74 = 8;
                    unsigned int v70 = 16;
                  }
                }
              }
              else if (v71 == 128)
              {
                char v72 = 0;
                char v73 = 0;
                unsigned int v70 = 32;
                unsigned int v74 = 32;
              }
              else
              {
                char v73 = 1;
                unsigned int v74 = 0;
                if (v71 == 256)
                {
                  char v72 = 0;
                  char v73 = 0;
                  unsigned int v74 = 16;
                  unsigned int v70 = 32;
                }
              }
            }
            else
            {
              char v73 = 1;
              unsigned int v74 = 0;
              switch(v71)
              {
                case 4:
                  char v72 = 0;
                  char v73 = 0;
                  unsigned int v74 = 128;
                  unsigned int v70 = 256;
                  break;
                case 5:
                case 6:
                case 7:
                case 9:
                case 10:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 17:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                  break;
                case 8:
                  char v72 = 0;
                  char v73 = 0;
                  unsigned int v70 = 128;
                  unsigned int v74 = 128;
                  break;
                case 16:
                  char v72 = 0;
                  char v73 = 0;
                  unsigned int v74 = 64;
                  unsigned int v70 = 128;
                  break;
                case 32:
                  char v72 = 0;
                  char v73 = 0;
                  unsigned int v70 = 64;
                  unsigned int v74 = 64;
                  break;
                default:
                  if (v71 == 64)
                  {
                    char v72 = 0;
                    char v73 = 0;
                    unsigned int v74 = 32;
                    unsigned int v70 = 64;
                  }
                  break;
              }
            }
            unsigned int v120 = (v70 >> 4) - 1;
            if (v72) {
              unsigned int v121 = 0;
            }
            else {
              unsigned int v121 = 32 - __clz(~(-1 << -(char)__clz(v120)));
            }
            unsigned int v122 = (v74 >> 3) - 1;
            if (v73)
            {
              unsigned int v123 = 0;
              if (v121) {
                goto LABEL_143;
              }
            }
            else
            {
              unsigned int v123 = 32 - __clz(~(-1 << -(char)__clz(v122)));
              if (v123 | v121)
              {
LABEL_143:
                int v124 = 0;
                uint64_t v125 = 0;
                int v126 = v41 & v120;
                int v127 = v26 & v122;
                BOOL v128 = v123 != 0;
                BOOL v129 = v121 != 0;
                int v130 = 1;
                do
                {
                  --v123;
                  if (v128) {
                    v125 |= (unint64_t)(v130 & v127) << v124++;
                  }
                  else {
                    unsigned int v123 = 0;
                  }
                  --v121;
                  if (v129) {
                    v125 |= (unint64_t)(v130 & v126) << v124++;
                  }
                  else {
                    unsigned int v121 = 0;
                  }
                  v130 *= 2;
                  --v124;
                  BOOL v129 = v121 != 0;
                  BOOL v128 = v123 != 0;
                }
                while (v121 | v123);
                goto LABEL_155;
              }
            }
            uint64_t v125 = 0;
LABEL_155:
            unint64_t v58 = ((unint64_t)(v43 / v70 + v151 / v74 * ((v70 + v132) / v70)) << 14) + (v125 << 12);
            goto LABEL_59;
          }
          if (v143)
          {
            int v51 = 0;
            uint64_t v52 = 0;
            int v53 = 1;
            BOOL v54 = v140;
            BOOL v55 = v141;
            __int32 v56 = v142.i32[0];
            __int32 v57 = v142.i32[1];
            do
            {
              --v56;
              if (v55) {
                v52 |= (unint64_t)(v53 & v26) << v51++;
              }
              else {
                __int32 v56 = 0;
              }
              --v57;
              if (v54) {
                v52 |= (unint64_t)(v53 & v41) << v51++;
              }
              else {
                __int32 v57 = 0;
              }
              v53 *= 2;
              --v51;
              BOOL v54 = v57 != 0;
              BOOL v55 = v56 != 0;
            }
            while (v57 | v56);
          }
          else
          {
            uint64_t v52 = 0;
          }
          unint64_t v58 = v52 << 12;
LABEL_59:
          unsigned int v59 = *(_DWORD *)(v36 + 128) >> (*(unsigned char *)(v36 + 144) + a12);
          if (v59 <= 1) {
            unsigned int v59 = 1;
          }
          unsigned int v60 = v59 + 15;
          if (v60 < 0x20) {
            unsigned int v61 = 0;
          }
          else {
            unsigned int v61 = 32 - __clz(~(-1 << -(char)__clz((v60 >> 4) - 1)));
          }
          unsigned int v62 = *(_DWORD *)(v36 + 132) >> (*(unsigned char *)(v36 + 144) + a12);
          if (v62 <= 1) {
            unsigned int v62 = 1;
          }
          unsigned int v63 = v62 + 7;
          if (v63 < 0x10)
          {
            unsigned int v64 = 0;
            if (!v61)
            {
LABEL_81:
              uint64_t v66 = 0;
              goto LABEL_82;
            }
          }
          else
          {
            unsigned int v64 = 32 - __clz(~(-1 << -(char)__clz((v63 >> 3) - 1)));
            if (!(v64 | v61)) {
              goto LABEL_81;
            }
          }
          int v65 = 0;
          uint64_t v66 = 0;
          BOOL v67 = v61 != 0;
          BOOL v68 = v64 != 0;
          int v69 = 1;
          do
          {
            --v61;
            if (v67) {
              v66 |= (unint64_t)(v69 & v41) << v65++;
            }
            else {
              unsigned int v61 = 0;
            }
            --v64;
            if (v68) {
              v66 |= (unint64_t)(v69 & v26) << v65++;
            }
            else {
              unsigned int v64 = 0;
            }
            v69 *= 2;
            --v65;
            BOOL v68 = v64 != 0;
            BOOL v67 = v61 != 0;
          }
          while (v64 | v61);
LABEL_82:
          int v75 = v47 < 0x10 || v48;
          unsigned int v76 = (char *)(v148 + 8 * v66);
          uint64_t v77 = v149 + 32 * (v45 - v16);
          int v78 = (void *)(v147 + v58);
          if (v42 < 8) {
            int v79 = 1;
          }
          else {
            int v79 = v75;
          }
          if (v157)
          {
            if (!v79)
            {
              uint64_t v85 = __dst;
LABEL_95:
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock(v77, a11, v85, v76, v47, v42);
              goto LABEL_96;
            }
            BOOL v80 = v78;
            char v81 = v47;
            int v82 = v78;
            int v83 = v46;
            BOOL v84 = v48;
            memcpy(__dst, v80, sizeof(__dst));
            BOOL v48 = v84;
            unsigned int v43 = 16 * v41;
            uint64_t v85 = __dst;
            int v46 = v83;
            int v78 = v82;
            LOBYTE(v47) = v81;
            LOBYTE(v42) = v154;
            uint64_t v36 = v153;
          }
          else
          {
            uint64_t v85 = v78;
            if (!v79) {
              goto LABEL_95;
            }
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE20ELj2ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = v36;
          uint64_t v159 = v85;
          unsigned __int8 v167 = v47;
          unsigned __int8 v168 = v42;
          unsigned int v163 = v139;
          unsigned int v164 = v45 - v43;
          unsigned int v160 = v76;
          uint64_t v161 = v77;
          uint64_t v162 = a11;
          unsigned int v165 = v150;
          unsigned int v166 = v46;
          if (!v48)
          {
            unint64_t v86 = (unint64_t)v85
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)v170, 512, (unint64_t)v85, *v76);
            unint64_t v87 = v86
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v171, 512, v86, v76[1]);
            unint64_t v88 = v87
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v174, 512, v87, v76[2]);
            unint64_t v89 = v88
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v175, 512, v88, v76[3]);
            unint64_t v90 = v89
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v172, 512, v89, v76[4]);
            unint64_t v91 = v90
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v173, 512, v90, v76[5]);
            uint64_t v92 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v176, 512, v91, v76[6]);
            AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)v177, 512, v91 + v92, v76[7]);
            uint64_t v93 = v165;
            unsigned int v16 = v144;
            if (!v165 || !v166)
            {
LABEL_123:
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((uint64_t)v170, 512, v159, v160, v167, v168);
              if (!v157) {
                goto LABEL_27;
              }
              goto LABEL_124;
            }
            uint64_t v94 = 0;
            unint64_t v95 = (unint64_t)v163 << 9;
            uint64_t v96 = 32 * v164;
            unint64_t v97 = &v170[v95 + v96];
            uint64_t v98 = v161;
            uint64_t v99 = v162;
            unint64_t v100 = 32 * v166;
            if (v100 <= 1) {
              uint64_t v101 = 1;
            }
            else {
              uint64_t v101 = 32 * v166;
            }
            unint64_t v102 = v95 + v96;
            uint64_t v103 = &v170[v95 + v96];
            if (v101) {
              BOOL v104 = (unint64_t)(v101 - 1) >> 32 == 0;
            }
            else {
              BOOL v104 = 0;
            }
            char v105 = !v104;
            uint64_t v106 = v101 & 0x1FFFFFFFE0;
            unint64_t v107 = &v170[v102 + 16];
            uint64_t v108 = (long long *)(v161 + 16);
            while (2)
            {
              unint64_t v109 = (char *)(v98 + v99 * v94);
              float32x4_t v110 = &v97[512 * v94];
              if ((unint64_t)(&v103[512 * v94] - v109) < 0x20) {
                char v111 = 1;
              }
              else {
                char v111 = v105;
              }
              if (v111)
              {
                int v112 = 0;
LABEL_120:
                unsigned int v117 = v112 + 1;
                do
                {
                  char v118 = *v109++;
                  *v110++ = v118;
                }
                while (v100 > v117++);
              }
              else
              {
                uint64_t v113 = v108;
                float32x4_t v114 = v107;
                uint64_t v115 = v101 & 0x1FFFFFFFE0;
                do
                {
                  long long v116 = *v113;
                  *(v114 - 1) = *(v113 - 1);
                  *float32x4_t v114 = v116;
                  v114 += 2;
                  v113 += 2;
                  v115 -= 32;
                }
                while (v115);
                if (v101 != v106)
                {
                  v109 += v106;
                  v110 += v106;
                  int v112 = v101 & 0xFFFFFFE0;
                  goto LABEL_120;
                }
              }
              ++v94;
              v107 += 512;
              uint64_t v108 = (long long *)((char *)v108 + v99);
              if (v94 == v93) {
                goto LABEL_123;
              }
              continue;
            }
          }
          dispatch_sync(*(dispatch_queue_t *)(*(void *)(v36 + 8) + 7384), block);
LABEL_96:
          unsigned int v16 = v144;
          if (!v157) {
            goto LABEL_27;
          }
LABEL_124:
          memcpy(v78, v85, 0x1000uLL);
LABEL_27:
          BOOL v31 = v41++ == v145 >> 4;
          uint64_t v36 = v153;
          unsigned int v42 = v154;
        }
        while (!v31);
        BOOL v31 = v26++ == v138;
      }
      while (!v31);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, char a12)
{
  uint64_t v208 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v160 = a8 + a10 - 1;
  if (*(void *)(a1 + 168)) {
    int v17 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v17 = 0;
  }
  unsigned int v18 = a5 - 1;
  unsigned int v19 = a6 - 1;
  unsigned int v20 = a8 >> 3;
  unsigned int v159 = v160 >> 3;
  BOOL v21 = (v17 & 0xD00) == 0 || v17 == 768;
  int v22 = v17 & 0xE00;
  int v24 = !v21 && v22 != 1024;
  if (*(unsigned char *)(a1 + 232))
  {
    unsigned int v25 = *(unsigned __int8 *)(a1 + 255);
    unsigned int v26 = *(unsigned __int8 *)(a1 + 254);
    char v27 = __clz(v18);
    if (1 << v25 >= a6 || a5 >> v26)
    {
      if (!(a6 >> v25) && 1 << v26 < a5)
      {
        if (a6 < 2) {
          unsigned int v30 = 0;
        }
        else {
          unsigned int v30 = __clz(~(-1 << -(char)__clz(v19))) - 32;
        }
        v26 += v25 + v30;
        unsigned int v25 = -v30;
      }
    }
    else
    {
      unsigned int v28 = 32 - __clz(~(-1 << -v27));
      unsigned int v29 = v26 + v25;
      if (a5 < 2) {
        unsigned int v28 = 0;
      }
      unsigned int v25 = v29 - v28;
      unsigned int v26 = v28;
    }
    if (a5 < 2)
    {
      if (v26) {
        goto LABEL_27;
      }
    }
    else if (32 - __clz(~(-1 << -v27)) < v26)
    {
LABEL_27:
      BOOL v172 = 0;
LABEL_32:
      unsigned int v169 = v26 - 3;
      unsigned int v166 = v25 - 3;
      int v32 = -1 << *(unsigned char *)(*(void *)(a1 + 208) + 48);
      unsigned int v157 = (((~v32 + a5) & v32) + ~(-1 << v26)) >> v26;
      goto LABEL_33;
    }
    if (a6 < 2) {
      unsigned int v31 = 0;
    }
    else {
      unsigned int v31 = 32 - __clz(~(-1 << -(char)__clz(v19)));
    }
    BOOL v172 = v31 >= v25;
    goto LABEL_32;
  }
  BOOL v172 = 0;
  unsigned int v157 = 0;
  unsigned int v166 = 0;
  unsigned int v169 = 0;
LABEL_33:
  if (v20 <= v159)
  {
    unsigned int v171 = a7 + a9 - 1;
    unsigned int v156 = a7 >> 3;
    if (a7 >> 3 <= v171 >> 3)
    {
      unsigned int v178 = v18 >> 3;
      unsigned int v155 = v19 >> 3;
      int v177 = (v18 & 7) + 1;
      int v154 = (v19 & 7) + 1;
      uint32x2_t v33 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0x700000007);
      v34.i64[0] = 0x2000000020;
      *(int32x2_t *)v35.i8 = vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v33, 3uLL)))))));
      v36.i64[0] = 0x1000000010;
      *(int8x8_t *)v37.i8 = vbic_s8(*(int8x8_t *)v35.i8, (int8x8_t)vcgt_u32((uint32x2_t)0x1000000010, v33));
      __int32 v167 = v37.i32[0] | v37.i32[1];
      uint64_t v165 = v37.i64[0];
      BOOL v163 = v37.i32[0] != 0;
      BOOL v164 = v37.i32[1] != 0;
      unsigned int v161 = a7;
      unsigned int v162 = a8;
      int v170 = v24;
      do
      {
        unsigned int v38 = (8 * v20) | 7;
        if (8 * v20 <= a8) {
          int v39 = a8;
        }
        else {
          int v39 = 8 * v20;
        }
        if (v160 < v38) {
          unsigned int v38 = v160;
        }
        int v168 = v39 - 8 * v20;
        int v176 = v38 - v39 + 1;
        unsigned int v40 = v156;
        int v41 = v154;
        if (v20 != v155) {
          int v41 = 8;
        }
        unsigned int v179 = v41;
        uint64_t v175 = a3 + (v39 - a8) * a11;
        do
        {
          unsigned int v42 = 8 * v40;
          unsigned int v43 = 8 * (v40 + 1) - 1;
          if (8 * v40 <= a7) {
            int v44 = a7;
          }
          else {
            int v44 = 8 * v40;
          }
          if (v171 < v43) {
            unsigned int v43 = v171;
          }
          int v45 = v43 - v44 + 1;
          if (v40 == v178) {
            unsigned int v46 = v177;
          }
          else {
            unsigned int v46 = 8;
          }
          BOOL v47 = 1;
          if (8 * v20 >= a8 && v42 >= a7)
          {
            int v48 = v177;
            if (v40 != v178) {
              int v48 = 8;
            }
            BOOL v47 = v45 != v48 || v176 != v179;
          }
          if (v172)
          {
            if (v169 | v166)
            {
              int v50 = 0;
              uint64_t v51 = 0;
              BOOL v52 = v166 != 0;
              int v53 = 1;
              BOOL v54 = v169 != 0;
              unsigned int v55 = v166;
              unsigned int v56 = v169;
              do
              {
                --v56;
                if (v54) {
                  v51 |= (unint64_t)(v40 & ~(-1 << v169) & v53) << v50++;
                }
                else {
                  unsigned int v56 = 0;
                }
                --v55;
                if (v52) {
                  v51 |= (unint64_t)(v20 & ~(-1 << v166) & v53) << v50++;
                }
                else {
                  unsigned int v55 = 0;
                }
                v53 *= 2;
                --v50;
                BOOL v52 = v55 != 0;
                BOOL v54 = v56 != 0;
              }
              while (v55 | v56);
            }
            else
            {
              uint64_t v51 = 0;
            }
            uint64_t v64 = *(void *)(a1 + 320) * ((v40 >> v169) + (v20 >> v166) * v157) + (v51 << 8);
          }
          else
          {
            if (v167)
            {
              int v57 = 0;
              uint64_t v58 = 0;
              int v59 = 1;
              BOOL v61 = v163;
              BOOL v60 = v164;
              int v63 = v165;
              int v62 = HIDWORD(v165);
              do
              {
                --v62;
                if (v60) {
                  v58 |= (unint64_t)(v59 & v40) << v57++;
                }
                else {
                  int v62 = 0;
                }
                --v63;
                if (v61) {
                  v58 |= (unint64_t)(v59 & v20) << v57++;
                }
                else {
                  int v63 = 0;
                }
                v59 *= 2;
                --v57;
                BOOL v61 = v63 != 0;
                BOOL v60 = v62 != 0;
              }
              while (v63 | v62);
            }
            else
            {
              uint64_t v58 = 0;
            }
            uint64_t v64 = v58 << 8;
          }
          unsigned int v65 = *(_DWORD *)(a1 + 128) >> (*(unsigned char *)(a1 + 144) + a12);
          if (v65 <= 1) {
            unsigned int v65 = 1;
          }
          unsigned int v66 = v65 + 7;
          if (v66 < 0x10) {
            unsigned int v67 = 0;
          }
          else {
            unsigned int v67 = 32 - __clz(~(-1 << -(char)__clz((v66 >> 3) - 1)));
          }
          unsigned int v68 = *(_DWORD *)(a1 + 132) >> (*(unsigned char *)(a1 + 144) + a12);
          if (v68 <= 1) {
            unsigned int v68 = 1;
          }
          unsigned int v69 = v68 + 7;
          if (v69 < 0x10)
          {
            unsigned int v70 = 0;
            if (!v67)
            {
LABEL_109:
              uint64_t v72 = 0;
              goto LABEL_110;
            }
          }
          else
          {
            unsigned int v70 = 32 - __clz(~(-1 << -(char)__clz((v69 >> 3) - 1)));
            if (!(v70 | v67)) {
              goto LABEL_109;
            }
          }
          int v71 = 0;
          uint64_t v72 = 0;
          BOOL v73 = v67 != 0;
          BOOL v74 = v70 != 0;
          int v75 = 1;
          do
          {
            --v67;
            if (v73) {
              v72 |= (unint64_t)(v75 & v40) << v71++;
            }
            else {
              unsigned int v67 = 0;
            }
            --v70;
            if (v74) {
              v72 |= (unint64_t)(v75 & v20) << v71++;
            }
            else {
              unsigned int v70 = 0;
            }
            v75 *= 2;
            --v71;
            BOOL v74 = v70 != 0;
            BOOL v73 = v67 != 0;
          }
          while (v70 | v67);
LABEL_110:
          int v76 = v46 < 8 || v47;
          uint64_t v77 = (char *)(a4 + 8 * v72);
          int v78 = (int8x16_t *)(a2 + v64);
          if (v179 < 8) {
            int v79 = 1;
          }
          else {
            int v79 = v76;
          }
          if (v24)
          {
            if (!v79)
            {
              unint64_t v87 = (int8x16_t *)v191;
LABEL_124:
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock(v175 + 4 * (v44 - a7), a11, (int8x8_t *)v87, v77, v46, v179, *(double *)v37.i64, *(double *)v35.i64, *(int8x8_t *)v36.i8, *(int8x8_t *)v34.i8);
              int v24 = v170;
              if (!v170) {
                goto LABEL_46;
              }
              goto LABEL_220;
            }
            int8x16_t v80 = v78[13];
            v191[12] = v78[12];
            v191[13] = v80;
            int8x16_t v81 = v78[15];
            v191[14] = v78[14];
            v191[15] = v81;
            int8x16_t v82 = v78[9];
            v191[8] = v78[8];
            v191[9] = v82;
            int8x16_t v83 = v78[11];
            v191[10] = v78[10];
            v191[11] = v83;
            int8x16_t v84 = v78[5];
            v191[4] = v78[4];
            v191[5] = v84;
            int8x16_t v85 = v78[7];
            v191[6] = v78[6];
            v191[7] = v85;
            int8x16_t v86 = v78[1];
            v191[0] = *v78;
            v191[1] = v86;
            int8x16_t v37 = v78[2];
            int8x16_t v35 = v78[3];
            unint64_t v87 = (int8x16_t *)v191;
            v191[2] = v37;
            v191[3] = v35;
          }
          else
          {
            unint64_t v87 = v78;
            if (!v79) {
              goto LABEL_124;
            }
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE0ELj4ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = a1;
          float32x4_t v181 = v87;
          unsigned __int8 v189 = v46;
          unsigned __int8 v190 = v179;
          unsigned int v185 = v168;
          unsigned int v186 = v44 - v42;
          float32x4_t v182 = (char *)(a4 + 8 * v72);
          float32x4_t v183 = (int8x16_t *)(v175 + 4 * (v44 - a7));
          uint64_t v184 = a11;
          unsigned int v187 = v176;
          unsigned int v188 = v45;
          if (!v47)
          {
            unsigned int v88 = *v77;
            if (v88 == 96)
            {
              int8x16_t v37 = vld1q_dup_s8(v87->i8);
              int8x16_t v192 = v37;
              int8x16_t v194 = v37;
              uint64_t v89 = 1;
            }
            else if (v88 == 31)
            {
              v37.i64[0] = v87->i64[0];
              v35.i64[0] = v87->i64[1];
              v36.i64[0] = v87[1].i64[0];
              v34.i64[0] = v87[1].i64[1];
              v192.i64[0] = v87->i64[0];
              v192.i64[1] = v36.i64[0];
              v194.i64[0] = v35.i64[0];
              v194.i64[1] = v34.i64[0];
              uint64_t v89 = 32;
            }
            else if (*v77)
            {
              uint64_t v89 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v192, 32, (uint64_t)v87, v88);
            }
            else
            {
              uint64_t v89 = 0;
              int8x16_t v192 = 0uLL;
              int8x16_t v194 = 0uLL;
            }
            uint64_t v90 = (uint64_t)v87->i64 + v89;
            unsigned int v91 = v77[1];
            if (v91 == 96)
            {
              int8x16_t v37 = vld1q_dup_s8((const char *)v90);
              int8x16_t v196 = v37;
              int8x16_t v198 = v37;
              uint64_t v92 = 1;
            }
            else if (v91 == 31)
            {
              v37.i64[0] = *(void *)v90;
              v35.i64[0] = *(void *)(v90 + 8);
              v36.i64[0] = *(void *)(v90 + 16);
              v34.i64[0] = *(void *)(v90 + 24);
              v196.i64[0] = *(void *)v90;
              v196.i64[1] = v36.i64[0];
              v198.i64[0] = v35.i64[0];
              v198.i64[1] = v34.i64[0];
              uint64_t v92 = 32;
            }
            else if (v77[1])
            {
              uint64_t v92 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v196, 32, v90, v91);
            }
            else
            {
              uint64_t v92 = 0;
              int8x16_t v196 = 0uLL;
              int8x16_t v198 = 0uLL;
            }
            uint64_t v93 = v90 + v92;
            unsigned int v94 = v77[2];
            if (v94 == 96)
            {
              int8x16_t v37 = vld1q_dup_s8((const char *)v93);
              int8x16_t v193 = v37;
              int8x16_t v195 = v37;
              uint64_t v95 = 1;
            }
            else if (v94 == 31)
            {
              v37.i64[0] = *(void *)v93;
              v35.i64[0] = *(void *)(v93 + 8);
              v36.i64[0] = *(void *)(v93 + 16);
              v34.i64[0] = *(void *)(v93 + 24);
              v193.i64[0] = *(void *)v93;
              v193.i64[1] = v36.i64[0];
              v195.i64[0] = v35.i64[0];
              v195.i64[1] = v34.i64[0];
              uint64_t v95 = 32;
            }
            else if (v77[2])
            {
              uint64_t v95 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v193, 32, v93, v94);
            }
            else
            {
              uint64_t v95 = 0;
              int8x16_t v193 = 0uLL;
              int8x16_t v195 = 0uLL;
            }
            uint64_t v96 = v93 + v95;
            unsigned int v97 = v77[3];
            if (v97 == 96)
            {
              int8x16_t v37 = vld1q_dup_s8((const char *)v96);
              int8x16_t v197 = v37;
              int8x16_t v199 = v37;
              uint64_t v98 = 1;
            }
            else if (v97 == 31)
            {
              v37.i64[0] = *(void *)v96;
              v35.i64[0] = *(void *)(v96 + 8);
              v36.i64[0] = *(void *)(v96 + 16);
              v34.i64[0] = *(void *)(v96 + 24);
              v197.i64[0] = *(void *)v96;
              v197.i64[1] = v36.i64[0];
              v199.i64[0] = v35.i64[0];
              v199.i64[1] = v34.i64[0];
              uint64_t v98 = 32;
            }
            else if (v77[3])
            {
              uint64_t v98 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v197, 32, v96, v97);
            }
            else
            {
              uint64_t v98 = 0;
              int8x16_t v197 = 0uLL;
              int8x16_t v199 = 0uLL;
            }
            uint64_t v99 = v96 + v98;
            unsigned int v100 = v77[4];
            if (v100 == 96)
            {
              int8x16_t v37 = vld1q_dup_s8((const char *)v99);
              int8x16_t v200 = v37;
              int8x16_t v202 = v37;
              uint64_t v101 = 1;
            }
            else if (v100 == 31)
            {
              v37.i64[0] = *(void *)v99;
              v35.i64[0] = *(void *)(v99 + 8);
              v36.i64[0] = *(void *)(v99 + 16);
              v34.i64[0] = *(void *)(v99 + 24);
              v200.i64[0] = *(void *)v99;
              v200.i64[1] = v36.i64[0];
              v202.i64[0] = v35.i64[0];
              v202.i64[1] = v34.i64[0];
              uint64_t v101 = 32;
            }
            else if (v77[4])
            {
              uint64_t v101 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v200, 32, v99, v100);
            }
            else
            {
              uint64_t v101 = 0;
              int8x16_t v200 = 0uLL;
              int8x16_t v202 = 0uLL;
            }
            uint64_t v102 = v99 + v101;
            unsigned int v103 = v77[5];
            if (v103 == 96)
            {
              int8x16_t v37 = vld1q_dup_s8((const char *)v102);
              int8x16_t v204 = v37;
              int8x16_t v206 = v37;
              uint64_t v104 = 1;
            }
            else if (v103 == 31)
            {
              v37.i64[0] = *(void *)v102;
              v35.i64[0] = *(void *)(v102 + 8);
              v36.i64[0] = *(void *)(v102 + 16);
              v34.i64[0] = *(void *)(v102 + 24);
              v204.i64[0] = *(void *)v102;
              v204.i64[1] = v36.i64[0];
              v206.i64[0] = v35.i64[0];
              v206.i64[1] = v34.i64[0];
              uint64_t v104 = 32;
            }
            else if (v77[5])
            {
              uint64_t v104 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v204, 32, v102, v103);
            }
            else
            {
              uint64_t v104 = 0;
              int8x16_t v204 = 0uLL;
              int8x16_t v206 = 0uLL;
            }
            uint64_t v105 = v102 + v104;
            unsigned int v106 = v77[6];
            if (v106 == 96)
            {
              int8x16_t v37 = vld1q_dup_s8((const char *)v105);
              int8x16_t v201 = v37;
              int8x16_t v203 = v37;
              uint64_t v107 = 1;
            }
            else if (v106 == 31)
            {
              v37.i64[0] = *(void *)v105;
              v35.i64[0] = *(void *)(v105 + 8);
              v36.i64[0] = *(void *)(v105 + 16);
              v34.i64[0] = *(void *)(v105 + 24);
              v201.i64[0] = *(void *)v105;
              v201.i64[1] = v36.i64[0];
              v203.i64[0] = v35.i64[0];
              v203.i64[1] = v34.i64[0];
              uint64_t v107 = 32;
            }
            else if (v77[6])
            {
              uint64_t v107 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v201, 32, v105, v106);
            }
            else
            {
              uint64_t v107 = 0;
              int8x16_t v201 = 0uLL;
              int8x16_t v203 = 0uLL;
            }
            uint64_t v108 = v105 + v107;
            unsigned int v109 = v77[7];
            if (v109 == 96)
            {
              int8x16_t v37 = vld1q_dup_s8((const char *)v108);
              int8x16_t v205 = v37;
              int8x16_t v207 = v37;
              uint64_t v110 = v187;
              if (v187) {
                goto LABEL_185;
              }
            }
            else
            {
              if (v109 != 31)
              {
                if (v77[7])
                {
                  AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v205, 32, v108, v109);
                  uint64_t v110 = v187;
                  if (!v187) {
                    goto LABEL_219;
                  }
                }
                else
                {
                  int8x16_t v205 = 0uLL;
                  int8x16_t v207 = 0uLL;
                  uint64_t v110 = v187;
                  if (!v187) {
                    goto LABEL_219;
                  }
                }
LABEL_185:
                if (!v188) {
                  goto LABEL_219;
                }
                uint64_t v111 = 0;
                uint64_t v112 = 32 * v185;
                uint64_t v113 = 4 * v186;
                float32x4_t v114 = &v192.i8[v112 + v113];
                uint64_t v115 = v183;
                uint64_t v116 = v184;
                unint64_t v117 = 4 * v188;
                if (v117 <= 1) {
                  unint64_t v118 = 1;
                }
                else {
                  unint64_t v118 = 4 * v188;
                }
                uint64_t v119 = v112 + v113;
                unsigned int v120 = &v192.i8[v112 + v113];
                if (v118) {
                  BOOL v121 = (v118 - 1) >> 32 == 0;
                }
                else {
                  BOOL v121 = 0;
                }
                uint64_t v122 = v118 & 0x3FFFFFFE0;
                uint64_t v123 = v118 & 0x3FFFFFFF8;
                char v125 = !v121 || v118 < 8;
                int v126 = &v193.i8[v119];
                int v127 = v183 + 1;
                BOOL v128 = v114;
                BOOL v129 = v183;
                while (2)
                {
                  int v130 = &v115->i8[v116 * v111];
                  unint64_t v131 = &v114[32 * v111];
                  if ((unint64_t)(&v120[32 * v111] - v130) < 0x20) {
                    char v132 = 1;
                  }
                  else {
                    char v132 = v125;
                  }
                  if (v132)
                  {
                    int v133 = 0;
LABEL_216:
                    unsigned int v142 = v133 + 1;
                    do
                    {
                      char v143 = *v130++;
                      *v131++ = v143;
                    }
                    while (v117 > v142++);
                  }
                  else
                  {
                    if (v118 >= 0x20)
                    {
                      unsigned int v135 = v127;
                      unsigned int v136 = (int8x16_t *)v126;
                      uint64_t v137 = v118 & 0x3FFFFFFE0;
                      do
                      {
                        int8x16_t v37 = v135[-1];
                        int8x16_t v35 = *v135;
                        v136[-1] = v37;
                        *unsigned int v136 = v35;
                        v136 += 2;
                        v135 += 2;
                        v137 -= 32;
                      }
                      while (v137);
                      if (v118 == v122) {
                        goto LABEL_199;
                      }
                      uint64_t v134 = v118 & 0x3FFFFFFE0;
                      if ((v118 & 0x18) == 0)
                      {
                        v130 += v122;
                        v131 += v122;
                        int v133 = v118 & 0xFFFFFFE0;
                        goto LABEL_216;
                      }
                    }
                    else
                    {
                      uint64_t v134 = 0;
                    }
                    v131 += v123;
                    uint64_t v138 = v134 - v123;
                    int v139 = (uint64_t *)((char *)v129->i64 + v134);
                    BOOL v140 = (uint64_t *)&v128[v134];
                    do
                    {
                      uint64_t v141 = *v139++;
                      v37.i64[0] = v141;
                      *v140++ = v141;
                      v138 += 8;
                    }
                    while (v138);
                    if (v118 != v123)
                    {
                      v130 += v123;
                      int v133 = v118 & 0xFFFFFFF8;
                      goto LABEL_216;
                    }
                  }
LABEL_199:
                  ++v111;
                  v126 += 32;
                  int v127 = (int8x16_t *)((char *)v127 + v116);
                  BOOL v129 = (int8x16_t *)((char *)v129 + v116);
                  v128 += 32;
                  if (v111 == v110) {
                    goto LABEL_219;
                  }
                  continue;
                }
              }
              v37.i64[0] = *(void *)v108;
              v35.i64[0] = *(void *)(v108 + 8);
              v36.i64[0] = *(void *)(v108 + 16);
              v34.i64[0] = *(void *)(v108 + 24);
              v205.i64[0] = *(void *)v108;
              v205.i64[1] = v36.i64[0];
              v207.i64[0] = v35.i64[0];
              v207.i64[1] = v34.i64[0];
              uint64_t v110 = v187;
              if (v187) {
                goto LABEL_185;
              }
            }
LABEL_219:
            AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)&v192, 32, (int8x8_t *)v181, v182, v189, v190, *(double *)v37.i64, *(double *)v35.i64, *(int8x8_t *)v36.i8, *(int8x8_t *)v34.i8);
            a7 = v161;
            a8 = v162;
            int v24 = v170;
            if (!v170) {
              goto LABEL_46;
            }
            goto LABEL_220;
          }
          dispatch_sync(*(dispatch_queue_t *)(*(void *)(a1 + 8) + 7384), block);
          int v24 = v170;
          if (!v170) {
            goto LABEL_46;
          }
LABEL_220:
          int8x16_t v145 = *v87;
          int8x16_t v146 = v87[1];
          int8x16_t v147 = v87[3];
          v78[2] = v87[2];
          v78[3] = v147;
          *int v78 = v145;
          v78[1] = v146;
          int8x16_t v148 = v87[4];
          int8x16_t v149 = v87[5];
          int8x16_t v150 = v87[7];
          v78[6] = v87[6];
          v78[7] = v150;
          v78[4] = v148;
          v78[5] = v149;
          int8x16_t v151 = v87[8];
          int8x16_t v152 = v87[9];
          int8x16_t v153 = v87[11];
          v78[10] = v87[10];
          v78[11] = v153;
          v78[8] = v151;
          v78[9] = v152;
          int8x16_t v37 = v87[12];
          int8x16_t v35 = v87[13];
          int8x16_t v36 = v87[14];
          int8x16_t v34 = v87[15];
          v78[14] = v36;
          v78[15] = v34;
          v78[12] = v37;
          v78[13] = v35;
LABEL_46:
          BOOL v21 = v40++ == v171 >> 3;
        }
        while (!v21);
        BOOL v21 = v20++ == v159;
      }
      while (!v21);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, char a12)
{
  uint64_t v278 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v230 = a8 + a10 - 1;
  if (*(void *)(a1 + 168)) {
    int v17 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v17 = 0;
  }
  unsigned int v18 = a5 - 1;
  unsigned int v19 = a6 - 1;
  unsigned int v20 = a8 >> 3;
  unsigned int v229 = v230 >> 3;
  BOOL v21 = (v17 & 0xD00) == 0 || v17 == 768;
  int v22 = v17 & 0xE00;
  int v24 = !v21 && v22 != 1024;
  if (*(unsigned char *)(a1 + 232))
  {
    unsigned int v25 = *(unsigned __int8 *)(a1 + 255);
    unsigned int v26 = *(unsigned __int8 *)(a1 + 254);
    char v27 = __clz(v18);
    if (1 << v25 >= a6 || a5 >> v26)
    {
      if (!(a6 >> v25) && 1 << v26 < a5)
      {
        if (a6 < 2) {
          unsigned int v30 = 0;
        }
        else {
          unsigned int v30 = __clz(~(-1 << -(char)__clz(v19))) - 32;
        }
        v26 += v25 + v30;
        unsigned int v25 = -v30;
      }
    }
    else
    {
      unsigned int v28 = 32 - __clz(~(-1 << -v27));
      unsigned int v29 = v26 + v25;
      if (a5 < 2) {
        unsigned int v28 = 0;
      }
      unsigned int v25 = v29 - v28;
      unsigned int v26 = v28;
    }
    if (a5 < 2)
    {
      if (v26) {
        goto LABEL_27;
      }
    }
    else if (32 - __clz(~(-1 << -v27)) < v26)
    {
LABEL_27:
      BOOL v242 = 0;
LABEL_32:
      unsigned int v239 = v26 - 3;
      unsigned int v236 = v25 - 3;
      int v32 = -1 << *(unsigned char *)(*(void *)(a1 + 208) + 48);
      unsigned int v227 = (((~v32 + a5) & v32) + ~(-1 << v26)) >> v26;
      goto LABEL_33;
    }
    if (a6 < 2) {
      unsigned int v31 = 0;
    }
    else {
      unsigned int v31 = 32 - __clz(~(-1 << -(char)__clz(v19)));
    }
    BOOL v242 = v31 >= v25;
    goto LABEL_32;
  }
  BOOL v242 = 0;
  unsigned int v227 = 0;
  unsigned int v236 = 0;
  unsigned int v239 = 0;
LABEL_33:
  if (v20 <= v229)
  {
    unsigned int v241 = a7 + a9 - 1;
    unsigned int v226 = a7 >> 3;
    if (a7 >> 3 <= v241 >> 3)
    {
      unsigned int v248 = v18 >> 3;
      unsigned int v225 = v19 >> 3;
      int v247 = (v18 & 7) + 1;
      int v224 = (v19 & 7) + 1;
      uint32x2_t v33 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0x700000007);
      int8x8_t v34 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v33, 3uLL))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x1000000010, v33));
      __int32 v237 = v34.i32[0] | v34.i32[1];
      int8x8_t v235 = v34;
      BOOL v233 = v34.i32[0] != 0;
      BOOL v234 = v34.i32[1] != 0;
      int v240 = v24;
      unsigned int v231 = a7;
      unsigned int v232 = a8;
      do
      {
        unsigned int v35 = (8 * v20) | 7;
        if (8 * v20 <= a8) {
          int v36 = a8;
        }
        else {
          int v36 = 8 * v20;
        }
        if (v230 < v35) {
          unsigned int v35 = v230;
        }
        int v238 = v36 - 8 * v20;
        int v246 = v35 - v36 + 1;
        unsigned int v37 = v226;
        int v38 = v224;
        if (v20 != v225) {
          int v38 = 8;
        }
        unsigned int v249 = v38;
        uint64_t v245 = a3 + (v36 - a8) * a11;
        do
        {
          unsigned int v39 = 8 * v37;
          unsigned int v40 = 8 * (v37 + 1) - 1;
          if (8 * v37 <= a7) {
            int v41 = a7;
          }
          else {
            int v41 = 8 * v37;
          }
          if (v241 < v40) {
            unsigned int v40 = v241;
          }
          int v42 = v40 - v41 + 1;
          if (v37 == v248) {
            unsigned int v43 = v247;
          }
          else {
            unsigned int v43 = 8;
          }
          BOOL v44 = 1;
          if (8 * v20 >= a8 && v39 >= a7)
          {
            int v45 = v247;
            if (v37 != v248) {
              int v45 = 8;
            }
            BOOL v44 = v42 != v45 || v246 != v249;
          }
          if (v242)
          {
            if (v239 | v236)
            {
              int v47 = 0;
              uint64_t v48 = 0;
              BOOL v49 = v236 != 0;
              int v50 = 1;
              BOOL v51 = v239 != 0;
              unsigned int v52 = v236;
              unsigned int v53 = v239;
              do
              {
                --v53;
                if (v51) {
                  v48 |= (unint64_t)(v37 & ~(-1 << v239) & v50) << v47++;
                }
                else {
                  unsigned int v53 = 0;
                }
                --v52;
                if (v49) {
                  v48 |= (unint64_t)(v20 & ~(-1 << v236) & v50) << v47++;
                }
                else {
                  unsigned int v52 = 0;
                }
                v50 *= 2;
                --v47;
                BOOL v49 = v52 != 0;
                BOOL v51 = v53 != 0;
              }
              while (v52 | v53);
            }
            else
            {
              uint64_t v48 = 0;
            }
            uint64_t v61 = *(void *)(a1 + 320) * ((v37 >> v239) + (v20 >> v236) * v227) + (v48 << 8);
          }
          else
          {
            if (v237)
            {
              int v54 = 0;
              uint64_t v55 = 0;
              int v56 = 1;
              BOOL v58 = v233;
              BOOL v57 = v234;
              __int32 v60 = v235.i32[0];
              __int32 v59 = v235.i32[1];
              do
              {
                --v59;
                if (v57) {
                  v55 |= (unint64_t)(v56 & v37) << v54++;
                }
                else {
                  __int32 v59 = 0;
                }
                --v60;
                if (v58) {
                  v55 |= (unint64_t)(v56 & v20) << v54++;
                }
                else {
                  __int32 v60 = 0;
                }
                v56 *= 2;
                --v54;
                BOOL v58 = v60 != 0;
                BOOL v57 = v59 != 0;
              }
              while (v60 | v59);
            }
            else
            {
              uint64_t v55 = 0;
            }
            uint64_t v61 = v55 << 8;
          }
          unsigned int v62 = *(_DWORD *)(a1 + 128) >> (*(unsigned char *)(a1 + 144) + a12);
          if (v62 <= 1) {
            unsigned int v62 = 1;
          }
          unsigned int v63 = v62 + 7;
          if (v63 < 0x10) {
            unsigned int v64 = 0;
          }
          else {
            unsigned int v64 = 32 - __clz(~(-1 << -(char)__clz((v63 >> 3) - 1)));
          }
          unsigned int v65 = *(_DWORD *)(a1 + 132) >> (*(unsigned char *)(a1 + 144) + a12);
          if (v65 <= 1) {
            unsigned int v65 = 1;
          }
          unsigned int v66 = v65 + 7;
          if (v66 < 0x10)
          {
            unsigned int v67 = 0;
            if (!v64)
            {
LABEL_109:
              uint64_t v69 = 0;
              goto LABEL_110;
            }
          }
          else
          {
            unsigned int v67 = 32 - __clz(~(-1 << -(char)__clz((v66 >> 3) - 1)));
            if (!(v67 | v64)) {
              goto LABEL_109;
            }
          }
          int v68 = 0;
          uint64_t v69 = 0;
          BOOL v70 = v64 != 0;
          BOOL v71 = v67 != 0;
          int v72 = 1;
          do
          {
            --v64;
            if (v70) {
              v69 |= (unint64_t)(v72 & v37) << v68++;
            }
            else {
              unsigned int v64 = 0;
            }
            --v67;
            if (v71) {
              v69 |= (unint64_t)(v72 & v20) << v68++;
            }
            else {
              unsigned int v67 = 0;
            }
            v72 *= 2;
            --v68;
            BOOL v71 = v67 != 0;
            BOOL v70 = v64 != 0;
          }
          while (v67 | v64);
LABEL_110:
          int v73 = v43 < 8 || v44;
          BOOL v74 = (char *)(a4 + 8 * v69);
          int v75 = (_OWORD *)(a2 + v61);
          if (v249 < 8) {
            int v76 = 1;
          }
          else {
            int v76 = v73;
          }
          if (v24)
          {
            if (!v76)
            {
              int8x16_t v85 = v261;
LABEL_124:
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((void *)(v245 + 4 * (v41 - a7)), a11, v85, v74, v43, v249);
              int v24 = v240;
              if (!v240) {
                goto LABEL_46;
              }
LABEL_269:
              long long v212 = *v85;
              long long v213 = v85[1];
              long long v214 = v85[3];
              v75[2] = v85[2];
              v75[3] = v214;
              *int v75 = v212;
              v75[1] = v213;
              long long v215 = v85[4];
              long long v216 = v85[5];
              long long v217 = v85[7];
              v75[6] = v85[6];
              v75[7] = v217;
              v75[4] = v215;
              v75[5] = v216;
              long long v218 = v85[8];
              long long v219 = v85[9];
              long long v220 = v85[11];
              v75[10] = v85[10];
              v75[11] = v220;
              v75[8] = v218;
              v75[9] = v219;
              long long v221 = v85[12];
              long long v222 = v85[13];
              long long v223 = v85[15];
              v75[14] = v85[14];
              v75[15] = v223;
              v75[12] = v221;
              v75[13] = v222;
              goto LABEL_46;
            }
            long long v77 = v75[13];
            v261[12] = v75[12];
            v261[13] = v77;
            long long v78 = v75[15];
            v261[14] = v75[14];
            v261[15] = v78;
            long long v79 = v75[9];
            v261[8] = v75[8];
            v261[9] = v79;
            long long v80 = v75[11];
            v261[10] = v75[10];
            v261[11] = v80;
            long long v81 = v75[5];
            v261[4] = v75[4];
            v261[5] = v81;
            long long v82 = v75[7];
            v261[6] = v75[6];
            v261[7] = v82;
            long long v83 = v75[1];
            v261[0] = *v75;
            v261[1] = v83;
            long long v84 = v75[3];
            int8x16_t v85 = v261;
            v261[2] = v75[2];
            v261[3] = v84;
          }
          else
          {
            int8x16_t v85 = v75;
            if (!v76) {
              goto LABEL_124;
            }
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE0ELj4ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = a1;
          int v251 = v85;
          unsigned __int8 v259 = v43;
          unsigned __int8 v260 = v249;
          unsigned int v255 = v238;
          unsigned int v256 = v41 - v39;
          unsigned int v252 = (char *)(a4 + 8 * v69);
          uint64_t v253 = v245 + 4 * (v41 - a7);
          uint64_t v254 = a11;
          unsigned int v257 = v246;
          unsigned int v258 = v42;
          if (v44)
          {
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(a1 + 8) + 7384), block);
            int v24 = v240;
            if (!v240) {
              goto LABEL_46;
            }
            goto LABEL_269;
          }
          unsigned int v86 = *v74;
          if (v86 == 96)
          {
            int8x16_t v91 = vld1q_dup_s8((const char *)v85);
            int8x16_t v262 = v91;
            int8x16_t v264 = v91;
            uint64_t v87 = 1;
          }
          else if (v86 == 31)
          {
            uint64_t v88 = *((void *)v85 + 1);
            uint64_t v89 = *((void *)v85 + 2);
            uint64_t v90 = *((void *)v85 + 3);
            v262.i64[0] = *(void *)v85;
            v262.i64[1] = v89;
            v264.i64[0] = v88;
            v264.i64[1] = v90;
            uint64_t v87 = 32;
          }
          else if (*v74)
          {
            uint64_t v87 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v262, 32, (uint64_t)v85, v86);
          }
          else
          {
            uint64_t v87 = 0;
            int8x16_t v262 = 0uLL;
            int8x16_t v264 = 0uLL;
          }
          uint64_t v92 = (uint64_t)v85 + v87;
          unsigned int v93 = v74[1];
          if (v93 == 96)
          {
            int8x16_t v98 = vld1q_dup_s8((const char *)v92);
            int8x16_t v266 = v98;
            int8x16_t v268 = v98;
            uint64_t v94 = 1;
          }
          else if (v93 == 31)
          {
            uint64_t v95 = *(void *)(v92 + 8);
            uint64_t v96 = *(void *)(v92 + 16);
            uint64_t v97 = *(void *)(v92 + 24);
            v266.i64[0] = *(void *)v92;
            v266.i64[1] = v96;
            v268.i64[0] = v95;
            v268.i64[1] = v97;
            uint64_t v94 = 32;
          }
          else if (v74[1])
          {
            uint64_t v94 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v266, 32, v92, v93);
          }
          else
          {
            uint64_t v94 = 0;
            int8x16_t v266 = 0uLL;
            int8x16_t v268 = 0uLL;
          }
          uint64_t v99 = v92 + v94;
          unsigned int v100 = v74[2];
          if (v100 == 96)
          {
            int8x16_t v105 = vld1q_dup_s8((const char *)v99);
            int8x16_t v263 = v105;
            int8x16_t v265 = v105;
            uint64_t v101 = 1;
          }
          else if (v100 == 31)
          {
            uint64_t v102 = *(void *)(v99 + 8);
            uint64_t v103 = *(void *)(v99 + 16);
            uint64_t v104 = *(void *)(v99 + 24);
            v263.i64[0] = *(void *)v99;
            v263.i64[1] = v103;
            v265.i64[0] = v102;
            v265.i64[1] = v104;
            uint64_t v101 = 32;
          }
          else if (v74[2])
          {
            uint64_t v101 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v263, 32, v99, v100);
          }
          else
          {
            uint64_t v101 = 0;
            int8x16_t v263 = 0uLL;
            int8x16_t v265 = 0uLL;
          }
          uint64_t v106 = v99 + v101;
          unsigned int v107 = v74[3];
          if (v107 == 96)
          {
            int8x16_t v112 = vld1q_dup_s8((const char *)v106);
            int8x16_t v267 = v112;
            int8x16_t v269 = v112;
            uint64_t v108 = 1;
          }
          else if (v107 == 31)
          {
            uint64_t v109 = *(void *)(v106 + 8);
            uint64_t v110 = *(void *)(v106 + 16);
            uint64_t v111 = *(void *)(v106 + 24);
            v267.i64[0] = *(void *)v106;
            v267.i64[1] = v110;
            v269.i64[0] = v109;
            v269.i64[1] = v111;
            uint64_t v108 = 32;
          }
          else if (v74[3])
          {
            uint64_t v108 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v267, 32, v106, v107);
          }
          else
          {
            uint64_t v108 = 0;
            int8x16_t v267 = 0uLL;
            int8x16_t v269 = 0uLL;
          }
          uint64_t v113 = v106 + v108;
          unsigned int v114 = v74[4];
          if (v114 == 96)
          {
            int8x16_t v119 = vld1q_dup_s8((const char *)v113);
            int8x16_t v270 = v119;
            int8x16_t v272 = v119;
            uint64_t v115 = 1;
          }
          else if (v114 == 31)
          {
            uint64_t v116 = *(void *)(v113 + 8);
            uint64_t v117 = *(void *)(v113 + 16);
            uint64_t v118 = *(void *)(v113 + 24);
            v270.i64[0] = *(void *)v113;
            v270.i64[1] = v117;
            v272.i64[0] = v116;
            v272.i64[1] = v118;
            uint64_t v115 = 32;
          }
          else if (v74[4])
          {
            uint64_t v115 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v270, 32, v113, v114);
          }
          else
          {
            uint64_t v115 = 0;
            int8x16_t v270 = 0uLL;
            int8x16_t v272 = 0uLL;
          }
          uint64_t v120 = v113 + v115;
          unsigned int v121 = v74[5];
          if (v121 == 96)
          {
            int8x16_t v126 = vld1q_dup_s8((const char *)v120);
            int8x16_t v274 = v126;
            int8x16_t v276 = v126;
            uint64_t v122 = 1;
          }
          else if (v121 == 31)
          {
            uint64_t v123 = *(void *)(v120 + 8);
            uint64_t v124 = *(void *)(v120 + 16);
            uint64_t v125 = *(void *)(v120 + 24);
            v274.i64[0] = *(void *)v120;
            v274.i64[1] = v124;
            v276.i64[0] = v123;
            v276.i64[1] = v125;
            uint64_t v122 = 32;
          }
          else if (v74[5])
          {
            uint64_t v122 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v274, 32, v120, v121);
          }
          else
          {
            uint64_t v122 = 0;
            int8x16_t v274 = 0uLL;
            int8x16_t v276 = 0uLL;
          }
          uint64_t v127 = v120 + v122;
          unsigned int v128 = v74[6];
          if (v128 == 96)
          {
            int8x16_t v133 = vld1q_dup_s8((const char *)v127);
            int8x16_t v271 = v133;
            int8x16_t v273 = v133;
            uint64_t v129 = 1;
          }
          else if (v128 == 31)
          {
            uint64_t v130 = *(void *)(v127 + 8);
            uint64_t v131 = *(void *)(v127 + 16);
            uint64_t v132 = *(void *)(v127 + 24);
            v271.i64[0] = *(void *)v127;
            v271.i64[1] = v131;
            v273.i64[0] = v130;
            v273.i64[1] = v132;
            uint64_t v129 = 32;
          }
          else if (v74[6])
          {
            uint64_t v129 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v271, 32, v127, v128);
          }
          else
          {
            uint64_t v129 = 0;
            int8x16_t v271 = 0uLL;
            int8x16_t v273 = 0uLL;
          }
          uint64_t v134 = v127 + v129;
          unsigned int v135 = v74[7];
          if (v135 == 96)
          {
            int8x16_t v140 = vld1q_dup_s8((const char *)v134);
            int8x16_t v275 = v140;
            int8x16_t v277 = v140;
            uint64_t v136 = v257;
            if (v257) {
              goto LABEL_185;
            }
          }
          else if (v135 == 31)
          {
            uint64_t v137 = *(void *)(v134 + 8);
            uint64_t v138 = *(void *)(v134 + 16);
            uint64_t v139 = *(void *)(v134 + 24);
            v275.i64[0] = *(void *)v134;
            v275.i64[1] = v138;
            v277.i64[0] = v137;
            v277.i64[1] = v139;
            uint64_t v136 = v257;
            if (v257) {
              goto LABEL_185;
            }
          }
          else
          {
            if (v74[7])
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v275, 32, v134, v135);
              uint64_t v136 = v257;
              if (!v257) {
                goto LABEL_219;
              }
LABEL_185:
              if (!v258) {
                goto LABEL_219;
              }
              uint64_t v141 = 0;
              uint64_t v142 = 32 * v255;
              uint64_t v143 = 4 * v256;
              unsigned int v144 = &v262.i8[v142 + v143];
              uint64_t v145 = v253;
              uint64_t v146 = v254;
              unint64_t v147 = 4 * v258;
              if (v147 <= 1) {
                unint64_t v148 = 1;
              }
              else {
                unint64_t v148 = 4 * v258;
              }
              uint64_t v149 = v142 + v143;
              int8x16_t v150 = &v262.i8[v142 + v143];
              if (v148) {
                BOOL v151 = (v148 - 1) >> 32 == 0;
              }
              else {
                BOOL v151 = 0;
              }
              uint64_t v152 = v148 & 0x3FFFFFFE0;
              uint64_t v153 = v148 & 0x3FFFFFFF8;
              char v155 = !v151 || v148 < 8;
              unsigned int v156 = &v263.i8[v149];
              unsigned int v157 = (long long *)(v253 + 16);
              uint64_t v158 = v144;
              uint64_t v159 = v253;
              while (2)
              {
                unsigned int v160 = (char *)(v145 + v146 * v141);
                unsigned int v161 = &v144[32 * v141];
                if ((unint64_t)(&v150[32 * v141] - v160) < 0x20) {
                  char v162 = 1;
                }
                else {
                  char v162 = v155;
                }
                if (v162)
                {
                  int v163 = 0;
LABEL_216:
                  unsigned int v173 = v163 + 1;
                  do
                  {
                    char v174 = *v160++;
                    *v161++ = v174;
                  }
                  while (v147 > v173++);
                }
                else
                {
                  if (v148 >= 0x20)
                  {
                    uint64_t v165 = v157;
                    unsigned int v166 = v156;
                    uint64_t v167 = v148 & 0x3FFFFFFE0;
                    do
                    {
                      long long v168 = *v165;
                      *((_OWORD *)v166 - 1) = *(v165 - 1);
                      *(_OWORD *)unsigned int v166 = v168;
                      v166 += 32;
                      v165 += 2;
                      v167 -= 32;
                    }
                    while (v167);
                    if (v148 == v152) {
                      goto LABEL_199;
                    }
                    uint64_t v164 = v148 & 0x3FFFFFFE0;
                    if ((v148 & 0x18) == 0)
                    {
                      v160 += v152;
                      v161 += v152;
                      int v163 = v148 & 0xFFFFFFE0;
                      goto LABEL_216;
                    }
                  }
                  else
                  {
                    uint64_t v164 = 0;
                  }
                  v161 += v153;
                  uint64_t v169 = v164 - v153;
                  int v170 = (uint64_t *)(v159 + v164);
                  unsigned int v171 = &v158[v164];
                  do
                  {
                    uint64_t v172 = *v170++;
                    *(void *)unsigned int v171 = v172;
                    v171 += 8;
                    v169 += 8;
                  }
                  while (v169);
                  if (v148 != v153)
                  {
                    v160 += v153;
                    int v163 = v148 & 0xFFFFFFF8;
                    goto LABEL_216;
                  }
                }
LABEL_199:
                ++v141;
                v156 += 32;
                unsigned int v157 = (long long *)((char *)v157 + v146);
                v159 += v146;
                v158 += 32;
                if (v141 == v136) {
                  goto LABEL_219;
                }
                continue;
              }
            }
            int8x16_t v275 = 0uLL;
            int8x16_t v277 = 0uLL;
            uint64_t v136 = v257;
            if (v257) {
              goto LABEL_185;
            }
          }
LABEL_219:
          char v176 = 0;
          unsigned int v178 = v251;
          int v177 = v252;
          int v179 = v259;
          int v180 = v260;
          if (v259 >= 4u) {
            int v181 = 4;
          }
          else {
            int v181 = v259;
          }
          if (v260 >= 2u) {
            int v182 = 2;
          }
          else {
            int v182 = v260;
          }
          if (v181)
          {
            a7 = v231;
            a8 = v232;
            int v24 = v240;
            if (v182)
            {
              uint64_t v183 = v262.i64[1];
              int8x16_t v184 = v264;
              *int v251 = v262.i64[0];
              v178[1] = v184.i64[0];
              v178[2] = v183;
              v178[3] = v184.i64[1];
              v178 += 4;
              char v176 = 31;
            }
          }
          else
          {
            a7 = v231;
            a8 = v232;
            int v24 = v240;
          }
          char v185 = 0;
          *int v177 = v176;
          if (v180 <= 2) {
            int v186 = 2;
          }
          else {
            int v186 = v180;
          }
          unsigned int v187 = v186 - 2;
          if (v187 >= 2) {
            unsigned int v187 = 2;
          }
          if (v181 && v187)
          {
            uint64_t v188 = v266.i64[1];
            int8x16_t v189 = v268;
            *unsigned int v178 = v266.i64[0];
            v178[1] = v189.i64[0];
            v178[2] = v188;
            v178[3] = v189.i64[1];
            v178 += 4;
            char v185 = 31;
          }
          char v190 = 0;
          v177[1] = v185;
          if (v179 <= 4) {
            int v179 = 4;
          }
          unsigned int v191 = v179 - 4;
          if (v191 >= 4) {
            unsigned int v191 = 4;
          }
          if (v191 && v182)
          {
            uint64_t v192 = v263.i64[1];
            int8x16_t v193 = v265;
            *unsigned int v178 = v263.i64[0];
            v178[1] = v193.i64[0];
            v178[2] = v192;
            v178[3] = v193.i64[1];
            v178 += 4;
            char v190 = 31;
          }
          char v194 = 0;
          v177[2] = v190;
          if (v191 && v187)
          {
            uint64_t v195 = v267.i64[1];
            int8x16_t v196 = v269;
            *unsigned int v178 = v267.i64[0];
            v178[1] = v196.i64[0];
            v178[2] = v195;
            v178[3] = v196.i64[1];
            v178 += 4;
            char v194 = 31;
          }
          char v197 = 0;
          v177[3] = v194;
          if (v180 <= 4) {
            int v198 = 4;
          }
          else {
            int v198 = v180;
          }
          unsigned int v199 = v198 - 4;
          if (v199 >= 2) {
            unsigned int v199 = 2;
          }
          if (v181 && v199)
          {
            uint64_t v200 = v270.i64[1];
            int8x16_t v201 = v272;
            *unsigned int v178 = v270.i64[0];
            v178[1] = v201.i64[0];
            v178[2] = v200;
            v178[3] = v201.i64[1];
            v178 += 4;
            char v197 = 31;
          }
          char v202 = 0;
          v177[4] = v197;
          if (v180 <= 6) {
            int v180 = 6;
          }
          unsigned int v203 = v180 - 6;
          if (v203 >= 2) {
            unsigned int v203 = 2;
          }
          if (v181 && v203)
          {
            uint64_t v204 = v274.i64[1];
            int8x16_t v205 = v276;
            *unsigned int v178 = v274.i64[0];
            v178[1] = v205.i64[0];
            v178[2] = v204;
            v178[3] = v205.i64[1];
            v178 += 4;
            char v202 = 31;
          }
          char v206 = 0;
          v177[5] = v202;
          if (v191 && v199)
          {
            uint64_t v207 = v271.i64[1];
            int8x16_t v208 = v273;
            *unsigned int v178 = v271.i64[0];
            v178[1] = v208.i64[0];
            v178[2] = v207;
            v178[3] = v208.i64[1];
            v178 += 4;
            char v206 = 31;
          }
          char v209 = 0;
          v177[6] = v206;
          if (v191)
          {
            if (v203)
            {
              uint64_t v210 = v275.i64[1];
              int8x16_t v211 = v277;
              *unsigned int v178 = v275.i64[0];
              v178[1] = v211.i64[0];
              v178[2] = v210;
              v178[3] = v211.i64[1];
              char v209 = 31;
            }
          }
          v177[7] = v209;
          if (v24) {
            goto LABEL_269;
          }
LABEL_46:
          BOOL v21 = v37++ == v241 >> 3;
        }
        while (!v21);
        BOOL v21 = v20++ == v229;
      }
      while (!v21);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, int a12)
{
  uint64_t v209 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v165 = a8;
  unsigned int v17 = a8 >> 3;
  unsigned int v161 = a8 + a10 - 1;
  unsigned int v163 = v161 >> 3;
  unsigned int v18 = *(unsigned __int8 *)(*(void *)(a1 + 208) + 88);
  unsigned int v19 = *(_DWORD *)(a1 + 112);
  if (*(void *)(a1 + 168)) {
    int v20 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v20 = 0;
  }
  BOOL v21 = (v20 & 0xD00) == 0 || v20 == 768;
  int v22 = v20 & 0xE00;
  int v24 = !v21 && v22 != 1024;
  int v179 = v24;
  BOOL isLevelTiled = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::isLevelTiled(a1, *(_DWORD *)(a1 + 144) + a12);
  if (v17 <= v163)
  {
    unsigned int v171 = a7 + a9 - 1;
    if (a7 >> 3 <= v171 >> 3)
    {
      unsigned int v158 = a5 - 1;
      unsigned int v178 = (a5 - 1) >> 3;
      int v177 = ((a5 - 1) & 7) + 1;
      int v159 = ((a6 - 1) & 7) + 1;
      unsigned int v160 = (a6 - 1) >> 3;
      uint32x2_t v25 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0x700000007);
      v26.i64[0] = 0x2000000020;
      *(int32x2_t *)v27.i8 = vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v25, 3uLL)))))));
      v28.i64[0] = 0x1000000010;
      *(int8x8_t *)v29.i8 = vbic_s8(*(int8x8_t *)v27.i8, (int8x8_t)vcgt_u32((uint32x2_t)0x1000000010, v25));
      __int32 v170 = v29.i32[0] | v29.i32[1];
      BOOL v168 = v29.i32[1] != 0;
      uint64_t v169 = v29.i64[0];
      BOOL v167 = v29.i32[0] != 0;
      unint64_t v157 = 8 * v19 * (unint64_t)v18;
      do
      {
        unsigned int v30 = (8 * v17) | 7;
        unsigned int v31 = v165;
        if (8 * v17 <= v165) {
          int v32 = v165;
        }
        else {
          int v32 = 8 * v17;
        }
        unsigned int v33 = a7 >> 3;
        if (v161 < v30) {
          unsigned int v30 = v161;
        }
        unsigned int v176 = 8 * v17;
        int v166 = v32 - 8 * v17;
        int v175 = v30 - v32 + 1;
        int v34 = v159;
        if (v17 != v160) {
          int v34 = 8;
        }
        unsigned int v180 = v34;
        uint64_t v174 = a3 + (v32 - v165) * a11;
        uint64_t v35 = a4;
        do
        {
          unsigned int v36 = 8 * v33;
          unsigned int v37 = 8 * (v33 + 1) - 1;
          if (8 * v33 <= a7) {
            int v38 = a7;
          }
          else {
            int v38 = 8 * v33;
          }
          if (v171 < v37) {
            unsigned int v37 = a7 + a9 - 1;
          }
          int v39 = v37 - v38 + 1;
          if (v33 == v178) {
            unsigned int v40 = v177;
          }
          else {
            unsigned int v40 = 8;
          }
          BOOL v41 = 1;
          if (v176 >= v31 && v36 >= a7)
          {
            int v42 = v177;
            if (v33 != v178) {
              int v42 = 8;
            }
            BOOL v41 = v39 != v42 || v175 != v180;
          }
          if (isLevelTiled)
          {
            unsigned int v63 = 0;
            uint64_t v64 = v157 >> (*(unsigned char *)(a1 + 57) != 0);
            char v65 = 1;
            if (v64 > 127)
            {
              if (v64 > 511)
              {
                if (v64 == 512)
                {
                  char v65 = 0;
                  char v66 = 0;
                  unsigned int v63 = 16;
                  unsigned int v67 = 16;
                }
                else
                {
                  char v66 = 1;
                  unsigned int v67 = 0;
                  if (v64 == 1024)
                  {
                    char v65 = 0;
                    unsigned int v67 = 8;
                    unsigned int v63 = 16;
                  }
                }
              }
              else if (v64 == 128)
              {
                char v65 = 0;
                char v66 = 0;
                unsigned int v63 = 32;
                unsigned int v67 = 32;
              }
              else
              {
                char v66 = 1;
                unsigned int v67 = 0;
                if (v64 == 256)
                {
                  char v65 = 0;
                  char v66 = 0;
                  unsigned int v67 = 16;
                  unsigned int v63 = 32;
                }
              }
            }
            else
            {
              char v66 = 1;
              unsigned int v67 = 0;
              switch(v64)
              {
                case 4:
                  char v65 = 0;
                  char v66 = 0;
                  unsigned int v67 = 128;
                  unsigned int v63 = 256;
                  break;
                case 5:
                case 6:
                case 7:
                case 9:
                case 10:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 17:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                  break;
                case 8:
                  char v65 = 0;
                  char v66 = 0;
                  unsigned int v63 = 128;
                  unsigned int v67 = 128;
                  break;
                case 16:
                  char v65 = 0;
                  char v66 = 0;
                  unsigned int v67 = 64;
                  unsigned int v63 = 128;
                  break;
                case 32:
                  char v65 = 0;
                  char v66 = 0;
                  unsigned int v63 = 64;
                  unsigned int v67 = 64;
                  break;
                default:
                  if (v64 == 64)
                  {
                    char v65 = 0;
                    char v66 = 0;
                    unsigned int v67 = 32;
                    unsigned int v63 = 64;
                  }
                  break;
              }
            }
            unsigned int v146 = (v63 >> 3) - 1;
            if (v65) {
              unsigned int v147 = 0;
            }
            else {
              unsigned int v147 = 32 - __clz(~(-1 << -(char)__clz(v146)));
            }
            unsigned int v148 = (v67 >> 3) - 1;
            if (v66)
            {
              unsigned int v149 = 0;
              if (v147) {
                goto LABEL_210;
              }
            }
            else
            {
              unsigned int v149 = 32 - __clz(~(-1 << -(char)__clz(v148)));
              if (v149 | v147)
              {
LABEL_210:
                int v150 = 0;
                uint64_t v151 = 0;
                int v152 = v33 & v146;
                int v153 = v17 & v148;
                BOOL v154 = v147 != 0;
                BOOL v155 = v149 != 0;
                int v156 = 1;
                do
                {
                  --v147;
                  if (v154) {
                    v151 |= (unint64_t)(v156 & v152) << v150++;
                  }
                  else {
                    unsigned int v147 = 0;
                  }
                  --v149;
                  if (v155) {
                    v151 |= (unint64_t)(v156 & v153) << v150++;
                  }
                  else {
                    unsigned int v149 = 0;
                  }
                  v156 *= 2;
                  --v150;
                  BOOL v155 = v149 != 0;
                  BOOL v154 = v147 != 0;
                }
                while (v149 | v147);
                goto LABEL_222;
              }
            }
            uint64_t v151 = 0;
LABEL_222:
            unint64_t v51 = ((unint64_t)(v36 / v63 + v176 / v67 * ((v63 + v158) / v63)) << 14) + (v151 << 8);
            goto LABEL_58;
          }
          if (v170)
          {
            int v44 = 0;
            uint64_t v45 = 0;
            int v46 = 1;
            BOOL v48 = v167;
            BOOL v47 = v168;
            int v50 = v169;
            int v49 = HIDWORD(v169);
            do
            {
              --v49;
              if (v47) {
                v45 |= (unint64_t)(v46 & v33) << v44++;
              }
              else {
                int v49 = 0;
              }
              --v50;
              if (v48) {
                v45 |= (unint64_t)(v46 & v17) << v44++;
              }
              else {
                int v50 = 0;
              }
              v46 *= 2;
              --v44;
              BOOL v48 = v50 != 0;
              BOOL v47 = v49 != 0;
            }
            while (v50 | v49);
          }
          else
          {
            uint64_t v45 = 0;
          }
          unint64_t v51 = v45 << 8;
LABEL_58:
          unsigned int v52 = *(_DWORD *)(a1 + 128) >> (*(unsigned char *)(a1 + 144) + a12);
          if (v52 <= 1) {
            unsigned int v52 = 1;
          }
          unsigned int v53 = v52 + 7;
          if (v53 < 0x10) {
            unsigned int v54 = 0;
          }
          else {
            unsigned int v54 = 32 - __clz(~(-1 << -(char)__clz((v53 >> 3) - 1)));
          }
          unsigned int v55 = *(_DWORD *)(a1 + 132) >> (*(unsigned char *)(a1 + 144) + a12);
          if (v55 <= 1) {
            unsigned int v55 = 1;
          }
          unsigned int v56 = v55 + 7;
          if (v56 < 0x10)
          {
            unsigned int v57 = 0;
            if (!v54)
            {
LABEL_80:
              uint64_t v59 = 0;
              goto LABEL_81;
            }
          }
          else
          {
            unsigned int v57 = 32 - __clz(~(-1 << -(char)__clz((v56 >> 3) - 1)));
            if (!(v57 | v54)) {
              goto LABEL_80;
            }
          }
          int v58 = 0;
          uint64_t v59 = 0;
          BOOL v60 = v54 != 0;
          BOOL v61 = v57 != 0;
          int v62 = 1;
          do
          {
            --v54;
            if (v60) {
              v59 |= (unint64_t)(v62 & v33) << v58++;
            }
            else {
              unsigned int v54 = 0;
            }
            --v57;
            if (v61) {
              v59 |= (unint64_t)(v62 & v17) << v58++;
            }
            else {
              unsigned int v57 = 0;
            }
            v62 *= 2;
            --v58;
            BOOL v61 = v57 != 0;
            BOOL v60 = v54 != 0;
          }
          while (v57 | v54);
LABEL_81:
          int v68 = v40 < 8 || v41;
          uint64_t v69 = (char *)(v35 + 8 * v59);
          BOOL v70 = (int8x16_t *)(a2 + v51);
          if (v180 < 8) {
            int v71 = 1;
          }
          else {
            int v71 = v68;
          }
          if (v179)
          {
            if (!v71)
            {
              long long v79 = (int8x16_t *)v192;
LABEL_95:
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock(v174 + 4 * (v38 - a7), a11, (int8x8_t *)v79, v69, v40, v180, *(double *)v29.i64, *(double *)v27.i64, *(int8x8_t *)v28.i8, *(int8x8_t *)v26.i8);
              if (!v179) {
                goto LABEL_26;
              }
              goto LABEL_191;
            }
            int8x16_t v72 = v70[13];
            v192[12] = v70[12];
            v192[13] = v72;
            int8x16_t v73 = v70[15];
            v192[14] = v70[14];
            v192[15] = v73;
            int8x16_t v74 = v70[9];
            v192[8] = v70[8];
            v192[9] = v74;
            int8x16_t v75 = v70[11];
            v192[10] = v70[10];
            v192[11] = v75;
            int8x16_t v76 = v70[5];
            v192[4] = v70[4];
            v192[5] = v76;
            int8x16_t v77 = v70[7];
            v192[6] = v70[6];
            v192[7] = v77;
            int8x16_t v78 = v70[1];
            v192[0] = *v70;
            v192[1] = v78;
            int8x16_t v29 = v70[2];
            int8x16_t v27 = v70[3];
            long long v79 = (int8x16_t *)v192;
            v192[2] = v29;
            v192[3] = v27;
          }
          else
          {
            long long v79 = v70;
            if (!v71) {
              goto LABEL_95;
            }
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE0ELj4ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = a1;
          int v182 = v79;
          unsigned __int8 v190 = v40;
          unsigned __int8 v191 = v180;
          unsigned int v186 = v166;
          unsigned int v187 = v38 - v36;
          uint64_t v183 = (char *)(v35 + 8 * v59);
          int8x16_t v184 = (int8x16_t *)(v174 + 4 * (v38 - a7));
          uint64_t v185 = a11;
          unsigned int v188 = v175;
          unsigned int v189 = v39;
          if (!v41)
          {
            unsigned int v80 = *v69;
            if (v80 == 96)
            {
              int8x16_t v29 = vld1q_dup_s8(v79->i8);
              int8x16_t v193 = v29;
              int8x16_t v195 = v29;
              uint64_t v81 = 1;
            }
            else if (v80 == 31)
            {
              v29.i64[0] = v79->i64[0];
              v27.i64[0] = v79->i64[1];
              v28.i64[0] = v79[1].i64[0];
              v26.i64[0] = v79[1].i64[1];
              v193.i64[0] = v79->i64[0];
              v193.i64[1] = v28.i64[0];
              v195.i64[0] = v27.i64[0];
              v195.i64[1] = v26.i64[0];
              uint64_t v81 = 32;
            }
            else if (*v69)
            {
              uint64_t v81 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v193, 32, (uint64_t)v79, v80);
            }
            else
            {
              uint64_t v81 = 0;
              int8x16_t v193 = 0uLL;
              int8x16_t v195 = 0uLL;
            }
            uint64_t v82 = (uint64_t)v79->i64 + v81;
            unsigned int v83 = v69[1];
            if (v83 == 96)
            {
              int8x16_t v29 = vld1q_dup_s8((const char *)v82);
              int8x16_t v197 = v29;
              int8x16_t v199 = v29;
              uint64_t v84 = 1;
            }
            else if (v83 == 31)
            {
              v29.i64[0] = *(void *)v82;
              v27.i64[0] = *(void *)(v82 + 8);
              v28.i64[0] = *(void *)(v82 + 16);
              v26.i64[0] = *(void *)(v82 + 24);
              v197.i64[0] = *(void *)v82;
              v197.i64[1] = v28.i64[0];
              v199.i64[0] = v27.i64[0];
              v199.i64[1] = v26.i64[0];
              uint64_t v84 = 32;
            }
            else if (v69[1])
            {
              uint64_t v84 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v197, 32, v82, v83);
            }
            else
            {
              uint64_t v84 = 0;
              int8x16_t v197 = 0uLL;
              int8x16_t v199 = 0uLL;
            }
            uint64_t v85 = v82 + v84;
            unsigned int v86 = v69[2];
            if (v86 == 96)
            {
              int8x16_t v29 = vld1q_dup_s8((const char *)v85);
              int8x16_t v194 = v29;
              int8x16_t v196 = v29;
              uint64_t v87 = 1;
            }
            else if (v86 == 31)
            {
              v29.i64[0] = *(void *)v85;
              v27.i64[0] = *(void *)(v85 + 8);
              v28.i64[0] = *(void *)(v85 + 16);
              v26.i64[0] = *(void *)(v85 + 24);
              v194.i64[0] = *(void *)v85;
              v194.i64[1] = v28.i64[0];
              v196.i64[0] = v27.i64[0];
              v196.i64[1] = v26.i64[0];
              uint64_t v87 = 32;
            }
            else if (v69[2])
            {
              uint64_t v87 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v194, 32, v85, v86);
            }
            else
            {
              uint64_t v87 = 0;
              int8x16_t v194 = 0uLL;
              int8x16_t v196 = 0uLL;
            }
            uint64_t v88 = v85 + v87;
            unsigned int v89 = v69[3];
            if (v89 == 96)
            {
              int8x16_t v29 = vld1q_dup_s8((const char *)v88);
              int8x16_t v198 = v29;
              int8x16_t v200 = v29;
              uint64_t v90 = 1;
            }
            else if (v89 == 31)
            {
              v29.i64[0] = *(void *)v88;
              v27.i64[0] = *(void *)(v88 + 8);
              v28.i64[0] = *(void *)(v88 + 16);
              v26.i64[0] = *(void *)(v88 + 24);
              v198.i64[0] = *(void *)v88;
              v198.i64[1] = v28.i64[0];
              v200.i64[0] = v27.i64[0];
              v200.i64[1] = v26.i64[0];
              uint64_t v90 = 32;
            }
            else if (v69[3])
            {
              uint64_t v90 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v198, 32, v88, v89);
            }
            else
            {
              uint64_t v90 = 0;
              int8x16_t v198 = 0uLL;
              int8x16_t v200 = 0uLL;
            }
            uint64_t v91 = v88 + v90;
            unsigned int v92 = v69[4];
            if (v92 == 96)
            {
              int8x16_t v29 = vld1q_dup_s8((const char *)v91);
              int8x16_t v201 = v29;
              int8x16_t v203 = v29;
              uint64_t v93 = 1;
            }
            else if (v92 == 31)
            {
              v29.i64[0] = *(void *)v91;
              v27.i64[0] = *(void *)(v91 + 8);
              v28.i64[0] = *(void *)(v91 + 16);
              v26.i64[0] = *(void *)(v91 + 24);
              v201.i64[0] = *(void *)v91;
              v201.i64[1] = v28.i64[0];
              v203.i64[0] = v27.i64[0];
              v203.i64[1] = v26.i64[0];
              uint64_t v93 = 32;
            }
            else if (v69[4])
            {
              uint64_t v93 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v201, 32, v91, v92);
            }
            else
            {
              uint64_t v93 = 0;
              int8x16_t v201 = 0uLL;
              int8x16_t v203 = 0uLL;
            }
            uint64_t v94 = v91 + v93;
            unsigned int v95 = v69[5];
            if (v95 == 96)
            {
              int8x16_t v29 = vld1q_dup_s8((const char *)v94);
              int8x16_t v205 = v29;
              int8x16_t v207 = v29;
              uint64_t v96 = 1;
            }
            else if (v95 == 31)
            {
              v29.i64[0] = *(void *)v94;
              v27.i64[0] = *(void *)(v94 + 8);
              v28.i64[0] = *(void *)(v94 + 16);
              v26.i64[0] = *(void *)(v94 + 24);
              v205.i64[0] = *(void *)v94;
              v205.i64[1] = v28.i64[0];
              v207.i64[0] = v27.i64[0];
              v207.i64[1] = v26.i64[0];
              uint64_t v96 = 32;
            }
            else if (v69[5])
            {
              uint64_t v96 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v205, 32, v94, v95);
            }
            else
            {
              uint64_t v96 = 0;
              int8x16_t v205 = 0uLL;
              int8x16_t v207 = 0uLL;
            }
            uint64_t v97 = v94 + v96;
            unsigned int v98 = v69[6];
            if (v98 == 96)
            {
              int8x16_t v29 = vld1q_dup_s8((const char *)v97);
              int8x16_t v202 = v29;
              int8x16_t v204 = v29;
              uint64_t v99 = 1;
            }
            else if (v98 == 31)
            {
              v29.i64[0] = *(void *)v97;
              v27.i64[0] = *(void *)(v97 + 8);
              v28.i64[0] = *(void *)(v97 + 16);
              v26.i64[0] = *(void *)(v97 + 24);
              v202.i64[0] = *(void *)v97;
              v202.i64[1] = v28.i64[0];
              v204.i64[0] = v27.i64[0];
              v204.i64[1] = v26.i64[0];
              uint64_t v99 = 32;
            }
            else if (v69[6])
            {
              uint64_t v99 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v202, 32, v97, v98);
            }
            else
            {
              uint64_t v99 = 0;
              int8x16_t v202 = 0uLL;
              int8x16_t v204 = 0uLL;
            }
            uint64_t v100 = v97 + v99;
            unsigned int v101 = v69[7];
            if (v101 == 96)
            {
              int8x16_t v29 = vld1q_dup_s8((const char *)v100);
              int8x16_t v206 = v29;
              int8x16_t v208 = v29;
              uint64_t v102 = v188;
              if (v188) {
                goto LABEL_156;
              }
            }
            else
            {
              if (v101 != 31)
              {
                if (v69[7])
                {
                  AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v206, 32, v100, v101);
                  uint64_t v102 = v188;
                  if (!v188) {
                    goto LABEL_190;
                  }
                }
                else
                {
                  int8x16_t v206 = 0uLL;
                  int8x16_t v208 = 0uLL;
                  uint64_t v102 = v188;
                  if (!v188) {
                    goto LABEL_190;
                  }
                }
LABEL_156:
                if (!v189) {
                  goto LABEL_190;
                }
                uint64_t v103 = 0;
                uint64_t v104 = 32 * v186;
                uint64_t v105 = 4 * v187;
                uint64_t v106 = &v193.i8[v104 + v105];
                unsigned int v107 = v184;
                uint64_t v108 = v185;
                unint64_t v109 = 4 * v189;
                if (v109 <= 1) {
                  unint64_t v110 = 1;
                }
                else {
                  unint64_t v110 = 4 * v189;
                }
                uint64_t v111 = v104 + v105;
                int8x16_t v112 = &v193.i8[v104 + v105];
                if (v110) {
                  BOOL v113 = (v110 - 1) >> 32 == 0;
                }
                else {
                  BOOL v113 = 0;
                }
                uint64_t v114 = v110 & 0x3FFFFFFE0;
                uint64_t v115 = v110 & 0x3FFFFFFF8;
                char v117 = !v113 || v110 < 8;
                uint64_t v118 = &v194.i8[v111];
                int8x16_t v119 = v184 + 1;
                uint64_t v120 = v106;
                unsigned int v121 = v184;
                while (2)
                {
                  uint64_t v122 = &v107->i8[v108 * v103];
                  uint64_t v123 = &v106[32 * v103];
                  if ((unint64_t)(&v112[32 * v103] - v122) < 0x20) {
                    char v124 = 1;
                  }
                  else {
                    char v124 = v117;
                  }
                  if (v124)
                  {
                    int v125 = 0;
LABEL_187:
                    unsigned int v134 = v125 + 1;
                    do
                    {
                      char v135 = *v122++;
                      *v123++ = v135;
                    }
                    while (v109 > v134++);
                  }
                  else
                  {
                    if (v110 >= 0x20)
                    {
                      uint64_t v127 = v119;
                      unsigned int v128 = (int8x16_t *)v118;
                      uint64_t v129 = v110 & 0x3FFFFFFE0;
                      do
                      {
                        int8x16_t v29 = v127[-1];
                        int8x16_t v27 = *v127;
                        v128[-1] = v29;
                        *unsigned int v128 = v27;
                        v128 += 2;
                        v127 += 2;
                        v129 -= 32;
                      }
                      while (v129);
                      if (v110 == v114) {
                        goto LABEL_170;
                      }
                      uint64_t v126 = v110 & 0x3FFFFFFE0;
                      if ((v110 & 0x18) == 0)
                      {
                        v122 += v114;
                        v123 += v114;
                        int v125 = v110 & 0xFFFFFFE0;
                        goto LABEL_187;
                      }
                    }
                    else
                    {
                      uint64_t v126 = 0;
                    }
                    v123 += v115;
                    uint64_t v130 = v126 - v115;
                    uint64_t v131 = (uint64_t *)((char *)v121->i64 + v126);
                    uint64_t v132 = (uint64_t *)&v120[v126];
                    do
                    {
                      uint64_t v133 = *v131++;
                      v29.i64[0] = v133;
                      *v132++ = v133;
                      v130 += 8;
                    }
                    while (v130);
                    if (v110 != v115)
                    {
                      v122 += v115;
                      int v125 = v110 & 0xFFFFFFF8;
                      goto LABEL_187;
                    }
                  }
LABEL_170:
                  ++v103;
                  v118 += 32;
                  int8x16_t v119 = (int8x16_t *)((char *)v119 + v108);
                  unsigned int v121 = (int8x16_t *)((char *)v121 + v108);
                  v120 += 32;
                  if (v103 == v102) {
                    goto LABEL_190;
                  }
                  continue;
                }
              }
              v29.i64[0] = *(void *)v100;
              v27.i64[0] = *(void *)(v100 + 8);
              v28.i64[0] = *(void *)(v100 + 16);
              v26.i64[0] = *(void *)(v100 + 24);
              v206.i64[0] = *(void *)v100;
              v206.i64[1] = v28.i64[0];
              v208.i64[0] = v27.i64[0];
              v208.i64[1] = v26.i64[0];
              uint64_t v102 = v188;
              if (v188) {
                goto LABEL_156;
              }
            }
LABEL_190:
            AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)&v193, 32, (int8x8_t *)v182, v183, v190, v191, *(double *)v29.i64, *(double *)v27.i64, *(int8x8_t *)v28.i8, *(int8x8_t *)v26.i8);
            unsigned int v31 = v165;
            uint64_t v35 = a4;
            if (!v179) {
              goto LABEL_26;
            }
            goto LABEL_191;
          }
          dispatch_sync(*(dispatch_queue_t *)(*(void *)(a1 + 8) + 7384), block);
          if (!v179) {
            goto LABEL_26;
          }
LABEL_191:
          int8x16_t v137 = *v79;
          int8x16_t v138 = v79[1];
          int8x16_t v139 = v79[3];
          v70[2] = v79[2];
          v70[3] = v139;
          *BOOL v70 = v137;
          v70[1] = v138;
          int8x16_t v140 = v79[4];
          int8x16_t v141 = v79[5];
          int8x16_t v142 = v79[7];
          v70[6] = v79[6];
          v70[7] = v142;
          v70[4] = v140;
          v70[5] = v141;
          int8x16_t v143 = v79[8];
          int8x16_t v144 = v79[9];
          int8x16_t v145 = v79[11];
          v70[10] = v79[10];
          v70[11] = v145;
          v70[8] = v143;
          v70[9] = v144;
          int8x16_t v29 = v79[12];
          int8x16_t v27 = v79[13];
          int8x16_t v28 = v79[14];
          int8x16_t v26 = v79[15];
          v70[14] = v28;
          v70[15] = v26;
          v70[12] = v29;
          v70[13] = v27;
LABEL_26:
          BOOL v21 = v33++ == v171 >> 3;
        }
        while (!v21);
        BOOL v21 = v17++ == v163;
      }
      while (!v21);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, int a12)
{
  uint64_t v279 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v235 = a8;
  unsigned int v17 = a8 >> 3;
  unsigned int v231 = a8 + a10 - 1;
  unsigned int v233 = v231 >> 3;
  unsigned int v18 = *(unsigned __int8 *)(*(void *)(a1 + 208) + 88);
  unsigned int v19 = *(_DWORD *)(a1 + 112);
  if (*(void *)(a1 + 168)) {
    int v20 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v20 = 0;
  }
  BOOL v21 = (v20 & 0xD00) == 0 || v20 == 768;
  int v22 = v20 & 0xE00;
  int v24 = !v21 && v22 != 1024;
  int v249 = v24;
  BOOL isLevelTiled = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::isLevelTiled(a1, *(_DWORD *)(a1 + 144) + a12);
  if (v17 <= v233)
  {
    unsigned int v241 = a7 + a9 - 1;
    if (a7 >> 3 <= v241 >> 3)
    {
      unsigned int v228 = a5 - 1;
      unsigned int v248 = (a5 - 1) >> 3;
      int v247 = ((a5 - 1) & 7) + 1;
      int v229 = ((a6 - 1) & 7) + 1;
      unsigned int v230 = (a6 - 1) >> 3;
      uint32x2_t v25 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0x700000007);
      int8x8_t v26 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v25, 3uLL))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x1000000010, v25));
      __int32 v240 = v26.i32[0] | v26.i32[1];
      BOOL v238 = v26.i32[1] != 0;
      int8x8_t v239 = v26;
      BOOL v237 = v26.i32[0] != 0;
      unint64_t v227 = 8 * v19 * (unint64_t)v18;
      do
      {
        unsigned int v27 = (8 * v17) | 7;
        unsigned int v28 = v235;
        if (8 * v17 <= v235) {
          int v29 = v235;
        }
        else {
          int v29 = 8 * v17;
        }
        unsigned int v30 = a7 >> 3;
        if (v231 < v27) {
          unsigned int v27 = v231;
        }
        unsigned int v246 = 8 * v17;
        int v236 = v29 - 8 * v17;
        int v245 = v27 - v29 + 1;
        int v31 = v229;
        if (v17 != v230) {
          int v31 = 8;
        }
        unsigned int v250 = v31;
        uint64_t v244 = a3 + (v29 - v235) * a11;
        uint64_t v32 = a4;
        do
        {
          unsigned int v33 = 8 * v30;
          unsigned int v34 = 8 * (v30 + 1) - 1;
          if (8 * v30 <= a7) {
            int v35 = a7;
          }
          else {
            int v35 = 8 * v30;
          }
          if (v241 < v34) {
            unsigned int v34 = a7 + a9 - 1;
          }
          int v36 = v34 - v35 + 1;
          if (v30 == v248) {
            unsigned int v37 = v247;
          }
          else {
            unsigned int v37 = 8;
          }
          BOOL v38 = 1;
          if (v246 >= v28 && v33 >= a7)
          {
            int v39 = v247;
            if (v30 != v248) {
              int v39 = 8;
            }
            BOOL v38 = v36 != v39 || v245 != v250;
          }
          if (isLevelTiled)
          {
            unsigned int v60 = 0;
            uint64_t v61 = v227 >> (*(unsigned char *)(a1 + 57) != 0);
            char v62 = 1;
            if (v61 > 127)
            {
              if (v61 > 511)
              {
                if (v61 == 512)
                {
                  char v62 = 0;
                  char v63 = 0;
                  unsigned int v60 = 16;
                  unsigned int v64 = 16;
                }
                else
                {
                  char v63 = 1;
                  unsigned int v64 = 0;
                  if (v61 == 1024)
                  {
                    char v62 = 0;
                    unsigned int v64 = 8;
                    unsigned int v60 = 16;
                  }
                }
              }
              else if (v61 == 128)
              {
                char v62 = 0;
                char v63 = 0;
                unsigned int v60 = 32;
                unsigned int v64 = 32;
              }
              else
              {
                char v63 = 1;
                unsigned int v64 = 0;
                if (v61 == 256)
                {
                  char v62 = 0;
                  char v63 = 0;
                  unsigned int v64 = 16;
                  unsigned int v60 = 32;
                }
              }
            }
            else
            {
              char v63 = 1;
              unsigned int v64 = 0;
              switch(v61)
              {
                case 4:
                  char v62 = 0;
                  char v63 = 0;
                  unsigned int v64 = 128;
                  unsigned int v60 = 256;
                  break;
                case 5:
                case 6:
                case 7:
                case 9:
                case 10:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 17:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                  break;
                case 8:
                  char v62 = 0;
                  char v63 = 0;
                  unsigned int v60 = 128;
                  unsigned int v64 = 128;
                  break;
                case 16:
                  char v62 = 0;
                  char v63 = 0;
                  unsigned int v64 = 64;
                  unsigned int v60 = 128;
                  break;
                case 32:
                  char v62 = 0;
                  char v63 = 0;
                  unsigned int v60 = 64;
                  unsigned int v64 = 64;
                  break;
                default:
                  if (v61 == 64)
                  {
                    char v62 = 0;
                    char v63 = 0;
                    unsigned int v64 = 32;
                    unsigned int v60 = 64;
                  }
                  break;
              }
            }
            unsigned int v216 = (v60 >> 3) - 1;
            if (v62) {
              unsigned int v217 = 0;
            }
            else {
              unsigned int v217 = 32 - __clz(~(-1 << -(char)__clz(v216)));
            }
            unsigned int v218 = (v64 >> 3) - 1;
            if (v63)
            {
              unsigned int v219 = 0;
              if (v217) {
                goto LABEL_259;
              }
            }
            else
            {
              unsigned int v219 = 32 - __clz(~(-1 << -(char)__clz(v218)));
              if (v219 | v217)
              {
LABEL_259:
                int v220 = 0;
                uint64_t v221 = 0;
                int v222 = v30 & v216;
                int v223 = v17 & v218;
                BOOL v224 = v217 != 0;
                BOOL v225 = v219 != 0;
                int v226 = 1;
                do
                {
                  --v217;
                  if (v224) {
                    v221 |= (unint64_t)(v226 & v222) << v220++;
                  }
                  else {
                    unsigned int v217 = 0;
                  }
                  --v219;
                  if (v225) {
                    v221 |= (unint64_t)(v226 & v223) << v220++;
                  }
                  else {
                    unsigned int v219 = 0;
                  }
                  v226 *= 2;
                  --v220;
                  BOOL v225 = v219 != 0;
                  BOOL v224 = v217 != 0;
                }
                while (v219 | v217);
                goto LABEL_271;
              }
            }
            uint64_t v221 = 0;
LABEL_271:
            unint64_t v48 = ((unint64_t)(v33 / v60 + v246 / v64 * ((v60 + v228) / v60)) << 14) + (v221 << 8);
            goto LABEL_58;
          }
          if (v240)
          {
            int v41 = 0;
            uint64_t v42 = 0;
            int v43 = 1;
            BOOL v45 = v237;
            BOOL v44 = v238;
            __int32 v47 = v239.i32[0];
            __int32 v46 = v239.i32[1];
            do
            {
              --v46;
              if (v44) {
                v42 |= (unint64_t)(v43 & v30) << v41++;
              }
              else {
                __int32 v46 = 0;
              }
              --v47;
              if (v45) {
                v42 |= (unint64_t)(v43 & v17) << v41++;
              }
              else {
                __int32 v47 = 0;
              }
              v43 *= 2;
              --v41;
              BOOL v45 = v47 != 0;
              BOOL v44 = v46 != 0;
            }
            while (v47 | v46);
          }
          else
          {
            uint64_t v42 = 0;
          }
          unint64_t v48 = v42 << 8;
LABEL_58:
          unsigned int v49 = *(_DWORD *)(a1 + 128) >> (*(unsigned char *)(a1 + 144) + a12);
          if (v49 <= 1) {
            unsigned int v49 = 1;
          }
          unsigned int v50 = v49 + 7;
          if (v50 < 0x10) {
            unsigned int v51 = 0;
          }
          else {
            unsigned int v51 = 32 - __clz(~(-1 << -(char)__clz((v50 >> 3) - 1)));
          }
          unsigned int v52 = *(_DWORD *)(a1 + 132) >> (*(unsigned char *)(a1 + 144) + a12);
          if (v52 <= 1) {
            unsigned int v52 = 1;
          }
          unsigned int v53 = v52 + 7;
          if (v53 < 0x10)
          {
            unsigned int v54 = 0;
            if (!v51)
            {
LABEL_80:
              uint64_t v56 = 0;
              goto LABEL_81;
            }
          }
          else
          {
            unsigned int v54 = 32 - __clz(~(-1 << -(char)__clz((v53 >> 3) - 1)));
            if (!(v54 | v51)) {
              goto LABEL_80;
            }
          }
          int v55 = 0;
          uint64_t v56 = 0;
          BOOL v57 = v51 != 0;
          BOOL v58 = v54 != 0;
          int v59 = 1;
          do
          {
            --v51;
            if (v57) {
              v56 |= (unint64_t)(v59 & v30) << v55++;
            }
            else {
              unsigned int v51 = 0;
            }
            --v54;
            if (v58) {
              v56 |= (unint64_t)(v59 & v17) << v55++;
            }
            else {
              unsigned int v54 = 0;
            }
            v59 *= 2;
            --v55;
            BOOL v58 = v54 != 0;
            BOOL v57 = v51 != 0;
          }
          while (v54 | v51);
LABEL_81:
          int v65 = v37 < 8 || v38;
          char v66 = (char *)(v32 + 8 * v56);
          unsigned int v67 = (_OWORD *)(a2 + v48);
          if (v250 < 8) {
            int v68 = 1;
          }
          else {
            int v68 = v65;
          }
          if (v249)
          {
            if (!v68)
            {
              int8x16_t v77 = v262;
LABEL_95:
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((void *)(v244 + 4 * (v35 - a7)), a11, v77, v66, v37, v250);
              if (!v249) {
                goto LABEL_26;
              }
LABEL_240:
              long long v204 = *v77;
              long long v205 = v77[1];
              long long v206 = v77[3];
              v67[2] = v77[2];
              v67[3] = v206;
              *unsigned int v67 = v204;
              v67[1] = v205;
              long long v207 = v77[4];
              long long v208 = v77[5];
              long long v209 = v77[7];
              v67[6] = v77[6];
              v67[7] = v209;
              v67[4] = v207;
              v67[5] = v208;
              long long v210 = v77[8];
              long long v211 = v77[9];
              long long v212 = v77[11];
              v67[10] = v77[10];
              v67[11] = v212;
              v67[8] = v210;
              v67[9] = v211;
              long long v213 = v77[12];
              long long v214 = v77[13];
              long long v215 = v77[15];
              v67[14] = v77[14];
              v67[15] = v215;
              v67[12] = v213;
              v67[13] = v214;
              goto LABEL_26;
            }
            long long v69 = v67[13];
            v262[12] = v67[12];
            v262[13] = v69;
            long long v70 = v67[15];
            v262[14] = v67[14];
            v262[15] = v70;
            long long v71 = v67[9];
            v262[8] = v67[8];
            v262[9] = v71;
            long long v72 = v67[11];
            v262[10] = v67[10];
            v262[11] = v72;
            long long v73 = v67[5];
            v262[4] = v67[4];
            v262[5] = v73;
            long long v74 = v67[7];
            v262[6] = v67[6];
            v262[7] = v74;
            long long v75 = v67[1];
            v262[0] = *v67;
            v262[1] = v75;
            long long v76 = v67[3];
            int8x16_t v77 = v262;
            v262[2] = v67[2];
            v262[3] = v76;
          }
          else
          {
            int8x16_t v77 = v67;
            if (!v68) {
              goto LABEL_95;
            }
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE0ELj4ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = a1;
          unsigned int v252 = v77;
          unsigned __int8 v260 = v37;
          unsigned __int8 v261 = v250;
          unsigned int v256 = v236;
          unsigned int v257 = v35 - v33;
          uint64_t v253 = (char *)(v32 + 8 * v56);
          uint64_t v254 = v244 + 4 * (v35 - a7);
          uint64_t v255 = a11;
          unsigned int v258 = v245;
          unsigned int v259 = v36;
          if (v38)
          {
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(a1 + 8) + 7384), block);
            if (!v249) {
              goto LABEL_26;
            }
            goto LABEL_240;
          }
          unsigned int v78 = *v66;
          if (v78 == 96)
          {
            int8x16_t v83 = vld1q_dup_s8((const char *)v77);
            int8x16_t v263 = v83;
            int8x16_t v265 = v83;
            uint64_t v79 = 1;
          }
          else if (v78 == 31)
          {
            uint64_t v80 = *((void *)v77 + 1);
            uint64_t v81 = *((void *)v77 + 2);
            uint64_t v82 = *((void *)v77 + 3);
            v263.i64[0] = *(void *)v77;
            v263.i64[1] = v81;
            v265.i64[0] = v80;
            v265.i64[1] = v82;
            uint64_t v79 = 32;
          }
          else if (*v66)
          {
            uint64_t v79 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v263, 32, (uint64_t)v77, v78);
          }
          else
          {
            uint64_t v79 = 0;
            int8x16_t v263 = 0uLL;
            int8x16_t v265 = 0uLL;
          }
          uint64_t v84 = (uint64_t)v77 + v79;
          unsigned int v85 = v66[1];
          if (v85 == 96)
          {
            int8x16_t v90 = vld1q_dup_s8((const char *)v84);
            int8x16_t v267 = v90;
            int8x16_t v269 = v90;
            uint64_t v86 = 1;
          }
          else if (v85 == 31)
          {
            uint64_t v87 = *(void *)(v84 + 8);
            uint64_t v88 = *(void *)(v84 + 16);
            uint64_t v89 = *(void *)(v84 + 24);
            v267.i64[0] = *(void *)v84;
            v267.i64[1] = v88;
            v269.i64[0] = v87;
            v269.i64[1] = v89;
            uint64_t v86 = 32;
          }
          else if (v66[1])
          {
            uint64_t v86 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v267, 32, v84, v85);
          }
          else
          {
            uint64_t v86 = 0;
            int8x16_t v267 = 0uLL;
            int8x16_t v269 = 0uLL;
          }
          uint64_t v91 = v84 + v86;
          unsigned int v92 = v66[2];
          if (v92 == 96)
          {
            int8x16_t v97 = vld1q_dup_s8((const char *)v91);
            int8x16_t v264 = v97;
            int8x16_t v266 = v97;
            uint64_t v93 = 1;
          }
          else if (v92 == 31)
          {
            uint64_t v94 = *(void *)(v91 + 8);
            uint64_t v95 = *(void *)(v91 + 16);
            uint64_t v96 = *(void *)(v91 + 24);
            v264.i64[0] = *(void *)v91;
            v264.i64[1] = v95;
            v266.i64[0] = v94;
            v266.i64[1] = v96;
            uint64_t v93 = 32;
          }
          else if (v66[2])
          {
            uint64_t v93 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v264, 32, v91, v92);
          }
          else
          {
            uint64_t v93 = 0;
            int8x16_t v264 = 0uLL;
            int8x16_t v266 = 0uLL;
          }
          uint64_t v98 = v91 + v93;
          unsigned int v99 = v66[3];
          if (v99 == 96)
          {
            int8x16_t v104 = vld1q_dup_s8((const char *)v98);
            int8x16_t v268 = v104;
            int8x16_t v270 = v104;
            uint64_t v100 = 1;
          }
          else if (v99 == 31)
          {
            uint64_t v101 = *(void *)(v98 + 8);
            uint64_t v102 = *(void *)(v98 + 16);
            uint64_t v103 = *(void *)(v98 + 24);
            v268.i64[0] = *(void *)v98;
            v268.i64[1] = v102;
            v270.i64[0] = v101;
            v270.i64[1] = v103;
            uint64_t v100 = 32;
          }
          else if (v66[3])
          {
            uint64_t v100 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v268, 32, v98, v99);
          }
          else
          {
            uint64_t v100 = 0;
            int8x16_t v268 = 0uLL;
            int8x16_t v270 = 0uLL;
          }
          uint64_t v105 = v98 + v100;
          unsigned int v106 = v66[4];
          if (v106 == 96)
          {
            int8x16_t v111 = vld1q_dup_s8((const char *)v105);
            int8x16_t v271 = v111;
            int8x16_t v273 = v111;
            uint64_t v107 = 1;
          }
          else if (v106 == 31)
          {
            uint64_t v108 = *(void *)(v105 + 8);
            uint64_t v109 = *(void *)(v105 + 16);
            uint64_t v110 = *(void *)(v105 + 24);
            v271.i64[0] = *(void *)v105;
            v271.i64[1] = v109;
            v273.i64[0] = v108;
            v273.i64[1] = v110;
            uint64_t v107 = 32;
          }
          else if (v66[4])
          {
            uint64_t v107 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v271, 32, v105, v106);
          }
          else
          {
            uint64_t v107 = 0;
            int8x16_t v271 = 0uLL;
            int8x16_t v273 = 0uLL;
          }
          uint64_t v112 = v105 + v107;
          unsigned int v113 = v66[5];
          if (v113 == 96)
          {
            int8x16_t v118 = vld1q_dup_s8((const char *)v112);
            int8x16_t v275 = v118;
            int8x16_t v277 = v118;
            uint64_t v114 = 1;
          }
          else if (v113 == 31)
          {
            uint64_t v115 = *(void *)(v112 + 8);
            uint64_t v116 = *(void *)(v112 + 16);
            uint64_t v117 = *(void *)(v112 + 24);
            v275.i64[0] = *(void *)v112;
            v275.i64[1] = v116;
            v277.i64[0] = v115;
            v277.i64[1] = v117;
            uint64_t v114 = 32;
          }
          else if (v66[5])
          {
            uint64_t v114 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v275, 32, v112, v113);
          }
          else
          {
            uint64_t v114 = 0;
            int8x16_t v275 = 0uLL;
            int8x16_t v277 = 0uLL;
          }
          uint64_t v119 = v112 + v114;
          unsigned int v120 = v66[6];
          if (v120 == 96)
          {
            int8x16_t v125 = vld1q_dup_s8((const char *)v119);
            int8x16_t v272 = v125;
            int8x16_t v274 = v125;
            uint64_t v121 = 1;
          }
          else if (v120 == 31)
          {
            uint64_t v122 = *(void *)(v119 + 8);
            uint64_t v123 = *(void *)(v119 + 16);
            uint64_t v124 = *(void *)(v119 + 24);
            v272.i64[0] = *(void *)v119;
            v272.i64[1] = v123;
            v274.i64[0] = v122;
            v274.i64[1] = v124;
            uint64_t v121 = 32;
          }
          else if (v66[6])
          {
            uint64_t v121 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v272, 32, v119, v120);
          }
          else
          {
            uint64_t v121 = 0;
            int8x16_t v272 = 0uLL;
            int8x16_t v274 = 0uLL;
          }
          uint64_t v126 = v119 + v121;
          unsigned int v127 = v66[7];
          if (v127 == 96)
          {
            int8x16_t v132 = vld1q_dup_s8((const char *)v126);
            int8x16_t v276 = v132;
            int8x16_t v278 = v132;
            uint64_t v128 = v258;
            if (v258) {
              goto LABEL_156;
            }
          }
          else if (v127 == 31)
          {
            uint64_t v129 = *(void *)(v126 + 8);
            uint64_t v130 = *(void *)(v126 + 16);
            uint64_t v131 = *(void *)(v126 + 24);
            v276.i64[0] = *(void *)v126;
            v276.i64[1] = v130;
            v278.i64[0] = v129;
            v278.i64[1] = v131;
            uint64_t v128 = v258;
            if (v258) {
              goto LABEL_156;
            }
          }
          else
          {
            if (v66[7])
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v276, 32, v126, v127);
              uint64_t v128 = v258;
              if (!v258) {
                goto LABEL_190;
              }
LABEL_156:
              if (!v259) {
                goto LABEL_190;
              }
              uint64_t v133 = 0;
              uint64_t v134 = 32 * v256;
              uint64_t v135 = 4 * v257;
              uint64_t v136 = &v263.i8[v134 + v135];
              uint64_t v137 = v254;
              uint64_t v138 = v255;
              unint64_t v139 = 4 * v259;
              if (v139 <= 1) {
                unint64_t v140 = 1;
              }
              else {
                unint64_t v140 = 4 * v259;
              }
              uint64_t v141 = v134 + v135;
              int8x16_t v142 = &v263.i8[v134 + v135];
              if (v140) {
                BOOL v143 = (v140 - 1) >> 32 == 0;
              }
              else {
                BOOL v143 = 0;
              }
              uint64_t v144 = v140 & 0x3FFFFFFE0;
              uint64_t v145 = v140 & 0x3FFFFFFF8;
              char v147 = !v143 || v140 < 8;
              unsigned int v148 = &v264.i8[v141];
              unsigned int v149 = (long long *)(v254 + 16);
              int v150 = v136;
              uint64_t v151 = v254;
              while (2)
              {
                int v152 = (char *)(v137 + v138 * v133);
                int v153 = &v136[32 * v133];
                if ((unint64_t)(&v142[32 * v133] - v152) < 0x20) {
                  char v154 = 1;
                }
                else {
                  char v154 = v147;
                }
                if (v154)
                {
                  int v155 = 0;
LABEL_187:
                  unsigned int v165 = v155 + 1;
                  do
                  {
                    char v166 = *v152++;
                    *v153++ = v166;
                  }
                  while (v139 > v165++);
                }
                else
                {
                  if (v140 >= 0x20)
                  {
                    unint64_t v157 = v149;
                    unsigned int v158 = v148;
                    uint64_t v159 = v140 & 0x3FFFFFFE0;
                    do
                    {
                      long long v160 = *v157;
                      *((_OWORD *)v158 - 1) = *(v157 - 1);
                      *(_OWORD *)unsigned int v158 = v160;
                      v158 += 32;
                      v157 += 2;
                      v159 -= 32;
                    }
                    while (v159);
                    if (v140 == v144) {
                      goto LABEL_170;
                    }
                    uint64_t v156 = v140 & 0x3FFFFFFE0;
                    if ((v140 & 0x18) == 0)
                    {
                      v152 += v144;
                      v153 += v144;
                      int v155 = v140 & 0xFFFFFFE0;
                      goto LABEL_187;
                    }
                  }
                  else
                  {
                    uint64_t v156 = 0;
                  }
                  v153 += v145;
                  uint64_t v161 = v156 - v145;
                  char v162 = (uint64_t *)(v151 + v156);
                  unsigned int v163 = &v150[v156];
                  do
                  {
                    uint64_t v164 = *v162++;
                    *(void *)unsigned int v163 = v164;
                    v163 += 8;
                    v161 += 8;
                  }
                  while (v161);
                  if (v140 != v145)
                  {
                    v152 += v145;
                    int v155 = v140 & 0xFFFFFFF8;
                    goto LABEL_187;
                  }
                }
LABEL_170:
                ++v133;
                v148 += 32;
                unsigned int v149 = (long long *)((char *)v149 + v138);
                v151 += v138;
                v150 += 32;
                if (v133 == v128) {
                  goto LABEL_190;
                }
                continue;
              }
            }
            int8x16_t v276 = 0uLL;
            int8x16_t v278 = 0uLL;
            uint64_t v128 = v258;
            if (v258) {
              goto LABEL_156;
            }
          }
LABEL_190:
          char v168 = 0;
          __int32 v170 = v252;
          uint64_t v169 = v253;
          int v171 = v260;
          int v172 = v261;
          if (v260 >= 4u) {
            int v173 = 4;
          }
          else {
            int v173 = v260;
          }
          if (v261 >= 2u) {
            int v174 = 2;
          }
          else {
            int v174 = v261;
          }
          if (v173)
          {
            unsigned int v28 = v235;
            uint64_t v32 = a4;
            if (v174)
            {
              uint64_t v175 = v263.i64[1];
              int8x16_t v176 = v265;
              *unsigned int v252 = v263.i64[0];
              v170[1] = v176.i64[0];
              v170[2] = v175;
              v170[3] = v176.i64[1];
              v170 += 4;
              char v168 = 31;
            }
          }
          else
          {
            unsigned int v28 = v235;
            uint64_t v32 = a4;
          }
          char v177 = 0;
          *uint64_t v169 = v168;
          if (v172 <= 2) {
            int v178 = 2;
          }
          else {
            int v178 = v172;
          }
          unsigned int v179 = v178 - 2;
          if (v179 >= 2) {
            unsigned int v179 = 2;
          }
          if (v173 && v179)
          {
            uint64_t v180 = v267.i64[1];
            int8x16_t v181 = v269;
            *__int32 v170 = v267.i64[0];
            v170[1] = v181.i64[0];
            v170[2] = v180;
            v170[3] = v181.i64[1];
            v170 += 4;
            char v177 = 31;
          }
          char v182 = 0;
          v169[1] = v177;
          if (v171 <= 4) {
            int v171 = 4;
          }
          unsigned int v183 = v171 - 4;
          if (v183 >= 4) {
            unsigned int v183 = 4;
          }
          if (v183 && v174)
          {
            uint64_t v184 = v264.i64[1];
            int8x16_t v185 = v266;
            *__int32 v170 = v264.i64[0];
            v170[1] = v185.i64[0];
            v170[2] = v184;
            v170[3] = v185.i64[1];
            v170 += 4;
            char v182 = 31;
          }
          char v186 = 0;
          v169[2] = v182;
          if (v183 && v179)
          {
            uint64_t v187 = v268.i64[1];
            int8x16_t v188 = v270;
            *__int32 v170 = v268.i64[0];
            v170[1] = v188.i64[0];
            v170[2] = v187;
            v170[3] = v188.i64[1];
            v170 += 4;
            char v186 = 31;
          }
          char v189 = 0;
          v169[3] = v186;
          if (v172 <= 4) {
            int v190 = 4;
          }
          else {
            int v190 = v172;
          }
          unsigned int v191 = v190 - 4;
          if (v191 >= 2) {
            unsigned int v191 = 2;
          }
          if (v173 && v191)
          {
            uint64_t v192 = v271.i64[1];
            int8x16_t v193 = v273;
            *__int32 v170 = v271.i64[0];
            v170[1] = v193.i64[0];
            v170[2] = v192;
            v170[3] = v193.i64[1];
            v170 += 4;
            char v189 = 31;
          }
          char v194 = 0;
          v169[4] = v189;
          if (v172 <= 6) {
            int v172 = 6;
          }
          unsigned int v195 = v172 - 6;
          if (v195 >= 2) {
            unsigned int v195 = 2;
          }
          if (v173 && v195)
          {
            uint64_t v196 = v275.i64[1];
            int8x16_t v197 = v277;
            *__int32 v170 = v275.i64[0];
            v170[1] = v197.i64[0];
            v170[2] = v196;
            v170[3] = v197.i64[1];
            v170 += 4;
            char v194 = 31;
          }
          char v198 = 0;
          v169[5] = v194;
          if (v183 && v191)
          {
            uint64_t v199 = v272.i64[1];
            int8x16_t v200 = v274;
            *__int32 v170 = v272.i64[0];
            v170[1] = v200.i64[0];
            v170[2] = v199;
            v170[3] = v200.i64[1];
            v170 += 4;
            char v198 = 31;
          }
          char v201 = 0;
          v169[6] = v198;
          if (v183)
          {
            if (v195)
            {
              uint64_t v202 = v276.i64[1];
              int8x16_t v203 = v278;
              *__int32 v170 = v276.i64[0];
              v170[1] = v203.i64[0];
              v170[2] = v202;
              v170[3] = v203.i64[1];
              char v201 = 31;
            }
          }
          v169[7] = v201;
          if (v249) {
            goto LABEL_240;
          }
LABEL_26:
          BOOL v21 = v30++ == v241 >> 3;
        }
        while (!v21);
        BOOL v21 = v17++ == v233;
      }
      while (!v21);
    }
  }
}

uint64_t AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, char a12)
{
  v174[24] = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v148 = a8;
  unsigned int v133 = a8 + a10 - 1;
  uint64_t v149 = a1;
  if (*(void *)(a1 + 168)) {
    int v17 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v17 = 0;
  }
  unsigned int v18 = a5 - 1;
  unsigned int v19 = a6 - 1;
  unsigned int v20 = a8 >> 3;
  unsigned int v132 = v133 >> 3;
  BOOL v21 = (v17 & 0xD00) == 0 || v17 == 768;
  int v22 = v17 & 0xE00;
  int v24 = !v21 && v22 != 1024;
  int v154 = v24;
  uint64_t result = a1;
  if (*(unsigned char *)(a1 + 232))
  {
    unsigned int v26 = *(unsigned __int8 *)(a1 + 255);
    unsigned int v27 = *(unsigned __int8 *)(a1 + 254);
    char v28 = __clz(v18);
    if (1 << v26 >= a6 || a5 >> v27)
    {
      if (!(a6 >> v26) && 1 << v27 < a5)
      {
        if (a6 < 2) {
          unsigned int v31 = 0;
        }
        else {
          unsigned int v31 = __clz(~(-1 << -(char)__clz(v19))) - 32;
        }
        v27 += v26 + v31;
        unsigned int v26 = -v31;
      }
    }
    else
    {
      unsigned int v29 = 32 - __clz(~(-1 << -v28));
      unsigned int v30 = v27 + v26;
      if (a5 < 2) {
        unsigned int v29 = 0;
      }
      unsigned int v26 = v30 - v29;
      unsigned int v27 = v29;
    }
    if (a5 < 2)
    {
      if (v27) {
        goto LABEL_27;
      }
    }
    else if (32 - __clz(~(-1 << -v28)) < v27)
    {
LABEL_27:
      BOOL v143 = 0;
LABEL_32:
      unsigned int v140 = v27 - 3;
      unsigned int v137 = v26 - 3;
      int v33 = -1 << *(unsigned char *)(*(void *)(a1 + 208) + 48);
      unsigned int v130 = (((~v33 + a5) & v33) + ~(-1 << v27)) >> v27;
      goto LABEL_33;
    }
    if (a6 < 2) {
      unsigned int v32 = 0;
    }
    else {
      unsigned int v32 = 32 - __clz(~(-1 << -(char)__clz(v19)));
    }
    BOOL v143 = v32 >= v26;
    goto LABEL_32;
  }
  BOOL v143 = 0;
  unsigned int v130 = 0;
  unsigned int v137 = 0;
  unsigned int v140 = 0;
LABEL_33:
  if (v20 <= v132)
  {
    unsigned int v142 = a7 + a9 - 1;
    unsigned int v129 = a7 >> 3;
    if (a7 >> 3 <= v142 >> 3)
    {
      unsigned int v152 = v18 >> 3;
      unsigned int v128 = v19 >> 3;
      int v151 = (v18 & 7) + 1;
      int v127 = (v19 & 7) + 1;
      uint32x2_t v34 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0x700000007);
      int8x8_t v35 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v34, 3uLL))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x1000000010, v34));
      __int32 v138 = v35.i32[0] | v35.i32[1];
      int8x8_t v136 = v35;
      BOOL v134 = v35.i32[0] != 0;
      BOOL v135 = v35.i32[1] != 0;
      unsigned int v141 = a7;
      do
      {
        unsigned int v36 = (8 * v20) | 7;
        if (8 * v20 <= v148) {
          int v37 = v148;
        }
        else {
          int v37 = 8 * v20;
        }
        if (v133 < v36) {
          unsigned int v36 = v133;
        }
        int v139 = v37 - 8 * v20;
        int v147 = v36 - v37 + 1;
        unsigned int v38 = v129;
        if (v20 == v128) {
          unsigned int v39 = v127;
        }
        else {
          unsigned int v39 = 8;
        }
        uint64_t v146 = a3 + (v37 - v148) * a11;
        unsigned int v150 = v39;
        do
        {
          unsigned int v40 = 8 * v38;
          unsigned int v41 = 8 * (v38 + 1) - 1;
          if (8 * v38 <= a7) {
            int v42 = a7;
          }
          else {
            int v42 = 8 * v38;
          }
          if (v142 < v41) {
            unsigned int v41 = v142;
          }
          int v43 = v41 - v42 + 1;
          if (v38 == v152) {
            unsigned int v44 = v151;
          }
          else {
            unsigned int v44 = 8;
          }
          BOOL v45 = 1;
          if (8 * v20 >= v148 && v40 >= a7)
          {
            int v46 = v151;
            if (v38 != v152) {
              int v46 = 8;
            }
            BOOL v45 = v43 != v46 || v147 != v39;
          }
          if (v143)
          {
            if (v140 | v137)
            {
              int v48 = 0;
              uint64_t v49 = 0;
              BOOL v50 = v137 != 0;
              int v51 = 1;
              BOOL v53 = v140 != 0;
              unsigned int v52 = v137;
              unsigned int v54 = v140;
              do
              {
                --v54;
                if (v53) {
                  v49 |= (unint64_t)(v38 & ~(-1 << v140) & v51) << v48++;
                }
                else {
                  unsigned int v54 = 0;
                }
                --v52;
                if (v50) {
                  v49 |= (unint64_t)(v20 & ~(-1 << v137) & v51) << v48++;
                }
                else {
                  unsigned int v52 = 0;
                }
                v51 *= 2;
                --v48;
                BOOL v50 = v52 != 0;
                BOOL v53 = v54 != 0;
              }
              while (v52 | v54);
            }
            else
            {
              uint64_t v49 = 0;
            }
            uint64_t v62 = *(void *)(result + 320) * ((v38 >> v140) + (v20 >> v137) * v130) + (v49 << 10);
          }
          else
          {
            if (v138)
            {
              int v55 = 0;
              uint64_t v56 = 0;
              int v57 = 1;
              BOOL v58 = v134;
              BOOL v59 = v135;
              __int32 v61 = v136.i32[0];
              __int32 v60 = v136.i32[1];
              do
              {
                --v60;
                if (v59) {
                  v56 |= (unint64_t)(v57 & v38) << v55++;
                }
                else {
                  __int32 v60 = 0;
                }
                --v61;
                if (v58) {
                  v56 |= (unint64_t)(v57 & v20) << v55++;
                }
                else {
                  __int32 v61 = 0;
                }
                v57 *= 2;
                --v55;
                BOOL v58 = v61 != 0;
                BOOL v59 = v60 != 0;
              }
              while (v61 | v60);
            }
            else
            {
              uint64_t v56 = 0;
            }
            uint64_t v62 = v56 << 10;
          }
          unsigned int v63 = *(_DWORD *)(result + 128) >> (*(unsigned char *)(result + 144) + a12);
          if (v63 <= 1) {
            unsigned int v63 = 1;
          }
          unsigned int v64 = v63 + 7;
          if (v64 < 0x10) {
            unsigned int v65 = 0;
          }
          else {
            unsigned int v65 = 32 - __clz(~(-1 << -(char)__clz((v64 >> 3) - 1)));
          }
          unsigned int v66 = *(_DWORD *)(result + 132) >> (*(unsigned char *)(result + 144) + a12);
          if (v66 <= 1) {
            unsigned int v66 = 1;
          }
          unsigned int v67 = v66 + 7;
          if (v67 < 0x10) {
            unsigned int v68 = 0;
          }
          else {
            unsigned int v68 = 32 - __clz(~(-1 << -(char)__clz((v67 >> 3) - 1)));
          }
          if (v68 | v65)
          {
            int v69 = 0;
            uint64_t v70 = 0;
            BOOL v71 = v65 != 0;
            BOOL v72 = v68 != 0;
            int v73 = 1;
            do
            {
              --v65;
              if (v71) {
                v70 |= (unint64_t)(v73 & v38) << v69++;
              }
              else {
                unsigned int v65 = 0;
              }
              --v68;
              if (v72) {
                v70 |= (unint64_t)(v73 & v20) << v69++;
              }
              else {
                unsigned int v68 = 0;
              }
              v73 *= 2;
              --v69;
              BOOL v72 = v68 != 0;
              BOOL v71 = v65 != 0;
            }
            while (v68 | v65);
          }
          else
          {
            uint64_t v70 = 0;
          }
          int v75 = v44 < 8 || v45;
          long long v76 = (unsigned __int8 *)(a4 + 8 * v70);
          unsigned int v74 = v42 - a7;
          uint64_t v77 = v146 + 16 * (v42 - a7);
          unsigned int v78 = (unsigned char *)(a2 + v62);
          if (v39 < 8) {
            int v79 = 1;
          }
          else {
            int v79 = v75;
          }
          __src = v78;
          if (v154)
          {
            if (!v79)
            {
              unsigned int v78 = __dst;
LABEL_123:
              uint64_t v81 = (unsigned char *)(v146 + 16 * v74);
              uint64_t v82 = a11;
              unint64_t v83 = (unint64_t)v78;
              uint64_t v84 = (char *)(a4 + 8 * v70);
              goto LABEL_157;
            }
            char v80 = v44;
            memcpy(__dst, __src, sizeof(__dst));
            LOBYTE(v44) = v80;
            unsigned int v78 = __dst;
            LOBYTE(v39) = v150;
            uint64_t result = v149;
          }
          else if (!v79)
          {
            goto LABEL_123;
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE13ELj4ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = result;
          uint64_t v156 = v78;
          unsigned __int8 v164 = v44;
          unsigned __int8 v165 = v39;
          unsigned int v160 = v139;
          unsigned int v161 = v42 - v40;
          unint64_t v157 = v76;
          uint64_t v158 = v77;
          uint64_t v159 = a11;
          unsigned int v162 = v147;
          unsigned int v163 = v43;
          if (v45)
          {
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(result + 8) + 7384), block);
            goto LABEL_158;
          }
          uint64_t v85 = (uint64_t)&v78[AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)v167, 128, (uint64_t)v78, *v76)];
          uint64_t v86 = v85
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v169, 128, v85, v76[1]);
          uint64_t v87 = v86
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v168, 128, v86, v76[2]);
          uint64_t v88 = v87
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v170, 128, v87, v76[3]);
          uint64_t v89 = v88
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v171, 128, v88, v76[4]);
          uint64_t v90 = v89
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v173, 128, v89, v76[5]);
          uint64_t v91 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v172, 128, v90, v76[6]);
          AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)v174, 128, v90 + v91, v76[7]);
          uint64_t v92 = v162;
          if (v162 && v163)
          {
            uint64_t v93 = 0;
            unint64_t v94 = (unint64_t)v160 << 7;
            uint64_t v95 = 16 * v161;
            uint64_t v96 = &v167[v94 + v95];
            uint64_t v97 = v158;
            uint64_t v98 = v159;
            unint64_t v99 = 16 * v163;
            if (v99 <= 1) {
              unint64_t v100 = 1;
            }
            else {
              unint64_t v100 = 16 * v163;
            }
            unint64_t v101 = v94 + v95;
            uint64_t v102 = &v167[v94 + v95];
            if (v100) {
              BOOL v103 = (v100 - 1) >> 32 == 0;
            }
            else {
              BOOL v103 = 0;
            }
            char v104 = !v103;
            uint64_t v105 = v100 & 0xFFFFFFFE0;
            uint64_t v106 = v100 & 0xFFFFFFFF0;
            uint64_t v107 = &v167[v101 + 16];
            uint64_t v108 = (long long *)(v158 + 16);
            uint64_t v109 = v96;
            uint64_t v110 = v158;
            do
            {
              int8x16_t v111 = (char *)(v97 + v98 * v93);
              uint64_t v112 = &v96[128 * v93];
              if ((unint64_t)(&v102[128 * v93] - v111) < 0x20) {
                char v113 = 1;
              }
              else {
                char v113 = v104;
              }
              if (v113)
              {
                int v114 = 0;
                goto LABEL_153;
              }
              if (v100 >= 0x20)
              {
                unsigned int v120 = v108;
                uint64_t v121 = v107;
                uint64_t v122 = v100 & 0xFFFFFFFE0;
                do
                {
                  long long v123 = *v120;
                  *(v121 - 1) = *(v120 - 1);
                  *uint64_t v121 = v123;
                  v121 += 2;
                  v120 += 2;
                  v122 -= 32;
                }
                while (v122);
                if (v100 == v105) {
                  goto LABEL_136;
                }
                uint64_t v115 = v100 & 0xFFFFFFFE0;
                if ((v100 & 0x10) == 0)
                {
                  v111 += v105;
                  v112 += v105;
                  int v114 = v100 & 0xFFFFFFE0;
                  goto LABEL_153;
                }
              }
              else
              {
                uint64_t v115 = 0;
              }
              v112 += v106;
              unint64_t v116 = v115 - (v100 & 0xFFFFFFFF0);
              uint64_t v117 = (uint64_t *)(v110 + v115);
              int8x16_t v118 = &v109[v115];
              do
              {
                uint64_t v119 = *v117++;
                *v118++ = v119;
                v116 += 8;
              }
              while (v116);
              if (v100 == v106) {
                goto LABEL_136;
              }
              v111 += v106;
              int v114 = v100 & 0xFFFFFFF0;
LABEL_153:
              unsigned int v124 = v114 + 1;
              do
              {
                char v125 = *v111++;
                *v112++ = v125;
              }
              while (v99 > v124++);
LABEL_136:
              ++v93;
              v107 += 128;
              uint64_t v108 = (long long *)((char *)v108 + v98);
              v110 += v98;
              v109 += 128;
            }
            while (v93 != v92);
          }
          unint64_t v83 = (unint64_t)v156;
          uint64_t v84 = (char *)v157;
          unsigned int v44 = v164;
          unsigned int v39 = v165;
          uint64_t v81 = v167;
          uint64_t v82 = 128;
LABEL_157:
          AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v81, v82, v83, v84, v44, v39);
LABEL_158:
          if (v154) {
            memcpy(__src, v78, 0x400uLL);
          }
          a7 = v141;
          BOOL v21 = v38++ == v142 >> 3;
          uint64_t result = v149;
          unsigned int v39 = v150;
        }
        while (!v21);
        BOOL v21 = v20++ == v132;
      }
      while (!v21);
    }
  }
  return result;
}

uint64_t AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, char a12)
{
  v221[24] = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v197 = a8;
  unsigned int v179 = a8 + a10 - 1;
  uint64_t v198 = a1;
  if (*(void *)(a1 + 168)) {
    int v17 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v17 = 0;
  }
  unsigned int v18 = a5 - 1;
  unsigned int v19 = a6 - 1;
  unsigned int v20 = a8 >> 3;
  unsigned int v178 = v179 >> 3;
  BOOL v21 = (v17 & 0xD00) == 0 || v17 == 768;
  int v22 = v17 & 0xE00;
  int v24 = !v21 && v22 != 1024;
  int v201 = v24;
  uint64_t result = a1;
  if (*(unsigned char *)(a1 + 232))
  {
    unsigned int v26 = *(unsigned __int8 *)(a1 + 255);
    unsigned int v27 = *(unsigned __int8 *)(a1 + 254);
    char v28 = __clz(v18);
    if (1 << v26 >= a6 || a5 >> v27)
    {
      if (!(a6 >> v26) && 1 << v27 < a5)
      {
        if (a6 < 2) {
          unsigned int v31 = 0;
        }
        else {
          unsigned int v31 = __clz(~(-1 << -(char)__clz(v19))) - 32;
        }
        v27 += v26 + v31;
        unsigned int v26 = -v31;
      }
    }
    else
    {
      unsigned int v29 = 32 - __clz(~(-1 << -v28));
      unsigned int v30 = v27 + v26;
      if (a5 < 2) {
        unsigned int v29 = 0;
      }
      unsigned int v26 = v30 - v29;
      unsigned int v27 = v29;
    }
    if (a5 < 2)
    {
      if (v27) {
        goto LABEL_27;
      }
    }
    else if (32 - __clz(~(-1 << -v28)) < v27)
    {
LABEL_27:
      BOOL v192 = 0;
LABEL_32:
      unsigned int v188 = v27 - 3;
      unsigned int v183 = v26 - 3;
      int v33 = -1 << *(unsigned char *)(*(void *)(a1 + 208) + 48);
      unsigned int v176 = (((~v33 + a5) & v33) + ~(-1 << v27)) >> v27;
      goto LABEL_33;
    }
    if (a6 < 2) {
      unsigned int v32 = 0;
    }
    else {
      unsigned int v32 = 32 - __clz(~(-1 << -(char)__clz(v19)));
    }
    BOOL v192 = v32 >= v26;
    goto LABEL_32;
  }
  BOOL v192 = 0;
  unsigned int v176 = 0;
  unsigned int v183 = 0;
  unsigned int v188 = 0;
LABEL_33:
  if (v20 <= v178)
  {
    unsigned int v191 = a7 + a9 - 1;
    unsigned int v175 = a7 >> 3;
    if (a7 >> 3 <= v191 >> 3)
    {
      unsigned int v200 = v18 >> 3;
      unsigned int v174 = v19 >> 3;
      int v199 = (v18 & 7) + 1;
      int v173 = (v19 & 7) + 1;
      int v172 = ~(-1 << v183);
      uint32x2_t v34 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0x700000007);
      int8x8_t v35 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v34, 3uLL))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x1000000010, v34));
      __int32 v186 = v35.i32[0] | v35.i32[1];
      int8x8_t v182 = v35;
      BOOL v181 = v35.i32[1] != 0;
      uint64_t v36 = a11;
      BOOL v180 = v35.i32[0] != 0;
      uint64_t v37 = 2 * a11;
      unsigned int v190 = a7;
      do
      {
        unsigned int v38 = (8 * v20) | 7;
        if (8 * v20 <= v197) {
          int v39 = v197;
        }
        else {
          int v39 = 8 * v20;
        }
        if (v179 < v38) {
          unsigned int v38 = v179;
        }
        int v187 = v39 - 8 * v20;
        int v196 = v38 - v39 + 1;
        unsigned int v40 = v175;
        if (v20 == v174) {
          unsigned int v41 = v173;
        }
        else {
          unsigned int v41 = 8;
        }
        int v42 = v20 & v172;
        uint64_t v195 = a3 + (v39 - v197) * v36;
        do
        {
          unsigned int v43 = 8 * v40;
          unsigned int v44 = 8 * (v40 + 1) - 1;
          if (8 * v40 <= a7) {
            int v45 = a7;
          }
          else {
            int v45 = 8 * v40;
          }
          if (v191 < v44) {
            unsigned int v44 = v191;
          }
          int v46 = v44 - v45 + 1;
          if (v40 == v200) {
            unsigned int v47 = v199;
          }
          else {
            unsigned int v47 = 8;
          }
          BOOL v48 = 1;
          if (8 * v20 >= v197 && v43 >= a7)
          {
            int v49 = v199;
            if (v40 != v200) {
              int v49 = 8;
            }
            BOOL v48 = v46 != v49 || v196 != v41;
          }
          if (v192)
          {
            if (v188 | v183)
            {
              int v51 = 0;
              uint64_t v52 = 0;
              BOOL v53 = v183 != 0;
              int v54 = 1;
              BOOL v56 = v188 != 0;
              unsigned int v55 = v183;
              unsigned int v57 = v188;
              do
              {
                --v57;
                if (v56) {
                  v52 |= (unint64_t)(v40 & ~(-1 << v188) & v54) << v51++;
                }
                else {
                  unsigned int v57 = 0;
                }
                --v55;
                if (v53) {
                  v52 |= (unint64_t)(v42 & v54) << v51++;
                }
                else {
                  unsigned int v55 = 0;
                }
                v54 *= 2;
                --v51;
                BOOL v53 = v55 != 0;
                BOOL v56 = v57 != 0;
              }
              while (v55 | v57);
            }
            else
            {
              uint64_t v52 = 0;
            }
            uint64_t v65 = *(void *)(result + 320) * ((v40 >> v188) + (v20 >> v183) * v176) + (v52 << 10);
          }
          else
          {
            if (v186)
            {
              int v58 = 0;
              uint64_t v59 = 0;
              int v60 = 1;
              BOOL v61 = v180;
              BOOL v62 = v181;
              __int32 v64 = v182.i32[0];
              __int32 v63 = v182.i32[1];
              do
              {
                --v63;
                if (v62) {
                  v59 |= (unint64_t)(v60 & v40) << v58++;
                }
                else {
                  __int32 v63 = 0;
                }
                --v64;
                if (v61) {
                  v59 |= (unint64_t)(v60 & v20) << v58++;
                }
                else {
                  __int32 v64 = 0;
                }
                v60 *= 2;
                --v58;
                BOOL v61 = v64 != 0;
                BOOL v62 = v63 != 0;
              }
              while (v64 | v63);
            }
            else
            {
              uint64_t v59 = 0;
            }
            uint64_t v65 = v59 << 10;
          }
          unsigned int v66 = *(_DWORD *)(result + 128) >> (*(unsigned char *)(result + 144) + a12);
          if (v66 <= 1) {
            unsigned int v66 = 1;
          }
          unsigned int v67 = v66 + 7;
          if (v67 < 0x10) {
            unsigned int v68 = 0;
          }
          else {
            unsigned int v68 = 32 - __clz(~(-1 << -(char)__clz((v67 >> 3) - 1)));
          }
          unsigned int v69 = *(_DWORD *)(result + 132) >> (*(unsigned char *)(result + 144) + a12);
          if (v69 <= 1) {
            unsigned int v69 = 1;
          }
          unsigned int v70 = v69 + 7;
          if (v70 < 0x10)
          {
            unsigned int v71 = 0;
            if (!v68)
            {
LABEL_111:
              uint64_t v73 = 0;
              goto LABEL_112;
            }
          }
          else
          {
            unsigned int v71 = 32 - __clz(~(-1 << -(char)__clz((v70 >> 3) - 1)));
            if (!(v71 | v68)) {
              goto LABEL_111;
            }
          }
          int v72 = 0;
          uint64_t v73 = 0;
          BOOL v74 = v68 != 0;
          BOOL v75 = v71 != 0;
          int v76 = 1;
          do
          {
            --v68;
            if (v74) {
              v73 |= (unint64_t)(v76 & v40) << v72++;
            }
            else {
              unsigned int v68 = 0;
            }
            --v71;
            if (v75) {
              v73 |= (unint64_t)(v76 & v20) << v72++;
            }
            else {
              unsigned int v71 = 0;
            }
            v76 *= 2;
            --v72;
            BOOL v75 = v71 != 0;
            BOOL v74 = v68 != 0;
          }
          while (v71 | v68);
LABEL_112:
          unsigned int v77 = v45 - a7;
          int v78 = v47 < 8 || v48;
          int v79 = (unsigned __int8 *)(a4 + 8 * v73);
          uint64_t v80 = v195 + 16 * v77;
          uint64_t v81 = (void *)(a2 + v65);
          if (v41 < 8) {
            int v82 = 1;
          }
          else {
            int v82 = v78;
          }
          if (v201)
          {
            if (!v82)
            {
              uint64_t v86 = __dst;
LABEL_125:
              uint64_t v88 = 0;
              uint64_t v89 = v86;
              do
              {
                uint64_t v102 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,4u>::kSubblockPositions[v88 + 1];
                uint64_t v103 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,4u>::kSubblockPositions[v88];
                unsigned int v104 = (v47 - 4 * v103) & ~((int)(v47 - 4 * v103) >> 31);
                if (v104 >= 4) {
                  unsigned int v104 = 4;
                }
                unsigned int v105 = (v41 - 2 * v102) & ~((int)(v41 - 2 * v102) >> 31);
                if (v105 >= 2) {
                  unsigned int v105 = 2;
                }
                if (v104) {
                  BOOL v106 = v105 == 0;
                }
                else {
                  BOOL v106 = 1;
                }
                if (v106)
                {
                  char v101 = 0;
                }
                else
                {
                  uint64_t v90 = (long long *)(v80 + v37 * v102 + (v103 << 6));
                  uint64_t v91 = v90 + 2;
                  long long v93 = *v90;
                  long long v94 = v90[1];
                  uint64_t v92 = (long long *)((char *)v90 + v36);
                  long long v95 = *v91;
                  long long v96 = v91[1];
                  long long v97 = *v92;
                  long long v98 = v92[1];
                  v92 += 2;
                  long long v99 = *v92;
                  long long v100 = v92[1];
                  *uint64_t v89 = v93;
                  v89[1] = v94;
                  v89[2] = v97;
                  v89[3] = v98;
                  v89[4] = v95;
                  v89[5] = v96;
                  v89[6] = v99;
                  v89[7] = v100;
                  v89 += 8;
                  char v101 = 127;
                }
                *v79++ = v101;
                v88 += 2;
              }
              while (v88 != 16);
              a7 = v190;
LABEL_138:
              unsigned int v107 = v40 + 1;
              if (v201) {
                goto LABEL_47;
              }
              goto LABEL_48;
            }
            unint64_t v83 = v81;
            int v84 = v46;
            BOOL v184 = v48;
            int v85 = v45;
            memcpy(__dst, v81, sizeof(__dst));
            int v45 = v85;
            BOOL v48 = v184;
            unsigned int v43 = 8 * v40;
            int v46 = v84;
            uint64_t v86 = __dst;
            uint64_t v81 = v83;
            int v42 = v20 & v172;
            uint64_t v36 = a11;
            uint64_t result = v198;
          }
          else
          {
            uint64_t v86 = v81;
            if (!v82) {
              goto LABEL_125;
            }
          }
          char v189 = v81;
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE13ELj4ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = result;
          int8x16_t v203 = v86;
          unsigned __int8 v211 = v47;
          unsigned __int8 v212 = v41;
          unsigned int v207 = v187;
          unsigned int v208 = v45 - v43;
          long long v204 = v79;
          uint64_t v205 = v80;
          uint64_t v206 = v36;
          unsigned int v209 = v196;
          unsigned int v210 = v46;
          if (v48)
          {
            uint64_t v87 = v86;
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(result + 8) + 7384), block);
            uint64_t v86 = v87;
            uint64_t v36 = a11;
            uint64_t result = v198;
            a7 = v190;
            uint64_t v81 = v189;
            uint64_t v37 = 2 * a11;
            goto LABEL_138;
          }
          int8x16_t v185 = v86;
          uint64_t v108 = (uint64_t)&v86[AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)v214, 128, (uint64_t)v86, *v79)];
          uint64_t v109 = v108
               + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v216, 128, v108, v79[1]);
          uint64_t v110 = v109
               + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v215, 128, v109, v79[2]);
          uint64_t v111 = v110
               + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v217, 128, v110, v79[3]);
          uint64_t v112 = v111
               + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v218, 128, v111, v79[4]);
          uint64_t v113 = v112
               + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v220, 128, v112, v79[5]);
          uint64_t v114 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v219, 128, v113, v79[6]);
          AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)v221, 128, v113 + v114, v79[7]);
          uint64_t v115 = v209;
          if (v209 && v210)
          {
            uint64_t v116 = 0;
            unint64_t v117 = (unint64_t)v207 << 7;
            uint64_t v118 = 16 * v208;
            uint64_t v119 = &v214[v117 + v118];
            uint64_t v120 = v205;
            uint64_t v121 = v206;
            unint64_t v122 = 16 * v210;
            if (v122 <= 1) {
              unint64_t v123 = 1;
            }
            else {
              unint64_t v123 = 16 * v210;
            }
            unint64_t v124 = v117 + v118;
            char v125 = &v214[v117 + v118];
            if (v123) {
              BOOL v126 = (v123 - 1) >> 32 == 0;
            }
            else {
              BOOL v126 = 0;
            }
            char v127 = !v126;
            uint64_t v128 = v123 & 0xFFFFFFFE0;
            uint64_t v129 = v123 & 0xFFFFFFFF0;
            unsigned int v130 = &v214[v124 + 16];
            uint64_t v131 = (long long *)(v205 + 16);
            unsigned int v132 = v119;
            uint64_t v133 = v205;
            do
            {
              BOOL v134 = (char *)(v120 + v121 * v116);
              BOOL v135 = &v119[128 * v116];
              if ((unint64_t)(&v125[128 * v116] - v134) < 0x20) {
                char v136 = 1;
              }
              else {
                char v136 = v127;
              }
              if (v136)
              {
                int v137 = 0;
                goto LABEL_169;
              }
              if (v123 >= 0x20)
              {
                BOOL v143 = v131;
                uint64_t v144 = v130;
                uint64_t v145 = v123 & 0xFFFFFFFE0;
                do
                {
                  long long v146 = *v143;
                  *(v144 - 1) = *(v143 - 1);
                  *uint64_t v144 = v146;
                  v144 += 2;
                  v143 += 2;
                  v145 -= 32;
                }
                while (v145);
                if (v123 == v128) {
                  goto LABEL_152;
                }
                uint64_t v138 = v123 & 0xFFFFFFFE0;
                if ((v123 & 0x10) == 0)
                {
                  v134 += v128;
                  v135 += v128;
                  int v137 = v123 & 0xFFFFFFE0;
                  goto LABEL_169;
                }
              }
              else
              {
                uint64_t v138 = 0;
              }
              v135 += v129;
              unint64_t v139 = v138 - (v123 & 0xFFFFFFFF0);
              unsigned int v140 = (uint64_t *)(v133 + v138);
              unsigned int v141 = &v132[v138];
              do
              {
                uint64_t v142 = *v140++;
                *v141++ = v142;
                v139 += 8;
              }
              while (v139);
              if (v123 == v129) {
                goto LABEL_152;
              }
              v134 += v129;
              int v137 = v123 & 0xFFFFFFF0;
LABEL_169:
              unsigned int v147 = v137 + 1;
              do
              {
                char v148 = *v134++;
                *v135++ = v148;
              }
              while (v122 > v147++);
LABEL_152:
              ++v116;
              v130 += 128;
              uint64_t v131 = (long long *)((char *)v131 + v121);
              v133 += v121;
              v132 += 128;
            }
            while (v116 != v115);
          }
          uint64_t v150 = 0;
          int v151 = v203;
          unsigned int v152 = (char *)v204;
          int v153 = v211;
          int v154 = v212;
          a7 = v190;
          uint64_t v36 = a11;
          uint64_t result = v198;
          uint64_t v37 = 2 * a11;
          unsigned int v107 = v40 + 1;
          uint64_t v86 = v185;
          do
          {
            uint64_t v167 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,4u>::kSubblockPositions[v150 + 1];
            uint64_t v168 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,4u>::kSubblockPositions[v150];
            unsigned int v169 = (v153 - 4 * v168) & ~((v153 - 4 * (int)v168) >> 31);
            if (v169 >= 4) {
              unsigned int v169 = 4;
            }
            unsigned int v170 = (v154 - 2 * v167) & ~((v154 - 2 * (int)v167) >> 31);
            if (v170 >= 2) {
              unsigned int v170 = 2;
            }
            if (v169) {
              BOOL v171 = v170 == 0;
            }
            else {
              BOOL v171 = 1;
            }
            if (v171)
            {
              char v166 = 0;
            }
            else
            {
              int v155 = (long long *)&v214[256 * v167 + 64 * v168];
              long long v157 = *v155;
              long long v158 = v155[1];
              uint64_t v156 = v155 + 2;
              uint64_t v159 = v155 + 8;
              v155 += 10;
              long long v160 = *v156;
              long long v161 = v156[1];
              long long v162 = *v159;
              long long v163 = v159[1];
              long long v164 = *v155;
              long long v165 = v155[1];
              *int v151 = v157;
              v151[1] = v158;
              v151[2] = v162;
              v151[3] = v163;
              v151[4] = v160;
              v151[5] = v161;
              v151[6] = v164;
              v151[7] = v165;
              v151 += 8;
              char v166 = 127;
            }
            *v152++ = v166;
            v150 += 2;
          }
          while (v150 != 16);
          uint64_t v81 = v189;
          if (v201)
          {
LABEL_47:
            memcpy(v81, v86, 0x400uLL);
            uint64_t v37 = 2 * a11;
            uint64_t v36 = a11;
            uint64_t result = v198;
          }
LABEL_48:
          BOOL v21 = v40 == v191 >> 3;
          unsigned int v40 = v107;
        }
        while (!v21);
        BOOL v21 = v20++ == v178;
      }
      while (!v21);
    }
  }
  return result;
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, int a12)
{
  v177[24] = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  uint64_t v17 = a1;
  unsigned int v152 = a8;
  unsigned int v18 = a8 >> 3;
  unsigned int v136 = a8 + a10 - 1;
  unsigned int v138 = v136 >> 3;
  unsigned int v19 = *(unsigned __int8 *)(*(void *)(a1 + 208) + 88);
  unsigned int v20 = *(_DWORD *)(a1 + 112);
  uint64_t v153 = v17;
  if (*(void *)(v17 + 168))
  {
    __int16 CacheMode = IOSurfaceGetCacheMode();
    uint64_t v17 = v153;
    int v22 = CacheMode & 0xF00;
  }
  else
  {
    int v22 = 0;
  }
  BOOL v23 = (v22 & 0xD00) == 0 || v22 == 768;
  int v24 = v22 & 0xE00;
  int v26 = !v23 && v24 != 1024;
  int v157 = v26;
  BOOL isLevelTiled = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::isLevelTiled(v17, *(_DWORD *)(v17 + 144) + a12);
  uint64_t v28 = v153;
  BOOL v146 = isLevelTiled;
  if (v18 <= v138)
  {
    unsigned int v145 = a7 + a9 - 1;
    unsigned int v135 = a7 >> 3;
    if (a7 >> 3 <= v145 >> 3)
    {
      unsigned int v132 = a5 - 1;
      unsigned int v134 = (a6 - 1) >> 3;
      int v155 = ((a5 - 1) & 7) + 1;
      unsigned int v156 = (a5 - 1) >> 3;
      int v133 = ((a6 - 1) & 7) + 1;
      uint32x2_t v29 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0x700000007);
      int8x8_t v30 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v29, 3uLL))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x1000000010, v29));
      __int32 v143 = v30.i32[0] | v30.i32[1];
      int8x8_t v142 = v30;
      BOOL v140 = v30.i32[0] != 0;
      BOOL v141 = v30.i32[1] != 0;
      unint64_t v131 = 8 * v20 * (unint64_t)v19;
      unsigned int v144 = a7;
      do
      {
        unsigned int v31 = (8 * v18) | 7;
        if (8 * v18 <= v152) {
          int v32 = v152;
        }
        else {
          int v32 = 8 * v18;
        }
        unsigned int v33 = v135;
        if (v136 < v31) {
          unsigned int v31 = v136;
        }
        int v139 = v32 - 8 * v18;
        int v150 = v31 - v32 + 1;
        unsigned int v151 = 8 * v18;
        if (v18 == v134) {
          unsigned int v34 = v133;
        }
        else {
          unsigned int v34 = 8;
        }
        uint64_t v149 = a3 + (v32 - v152) * a11;
        unsigned int v154 = v34;
        do
        {
          unsigned int v35 = 8 * v33;
          unsigned int v36 = 8 * (v33 + 1) - 1;
          if (8 * v33 <= a7) {
            int v37 = a7;
          }
          else {
            int v37 = 8 * v33;
          }
          if (v145 < v36) {
            unsigned int v36 = v145;
          }
          int v38 = v36 - v37 + 1;
          if (v33 == v156) {
            unsigned int v39 = v155;
          }
          else {
            unsigned int v39 = 8;
          }
          BOOL v40 = 1;
          if (v151 >= v152 && v35 >= a7)
          {
            int v41 = v155;
            if (v33 != v156) {
              int v41 = 8;
            }
            BOOL v40 = v38 != v41 || v150 != v34;
          }
          if (v146)
          {
            unsigned int v62 = 0;
            uint64_t v63 = v131 >> (*(unsigned char *)(v28 + 57) != 0);
            char v64 = 1;
            if (v63 > 127)
            {
              if (v63 > 511)
              {
                if (v63 == 512)
                {
                  char v64 = 0;
                  char v65 = 0;
                  unsigned int v62 = 16;
                  unsigned int v66 = 16;
                }
                else
                {
                  char v65 = 1;
                  unsigned int v66 = 0;
                  if (v63 == 1024)
                  {
                    char v64 = 0;
                    unsigned int v66 = 8;
                    unsigned int v62 = 16;
                  }
                }
              }
              else if (v63 == 128)
              {
                char v64 = 0;
                char v65 = 0;
                unsigned int v62 = 32;
                unsigned int v66 = 32;
              }
              else
              {
                char v65 = 1;
                unsigned int v66 = 0;
                if (v63 == 256)
                {
                  char v64 = 0;
                  char v65 = 0;
                  unsigned int v66 = 16;
                  unsigned int v62 = 32;
                }
              }
            }
            else
            {
              char v65 = 1;
              unsigned int v66 = 0;
              switch(v63)
              {
                case 4:
                  char v64 = 0;
                  char v65 = 0;
                  unsigned int v66 = 128;
                  unsigned int v62 = 256;
                  break;
                case 5:
                case 6:
                case 7:
                case 9:
                case 10:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 17:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                  break;
                case 8:
                  char v64 = 0;
                  char v65 = 0;
                  unsigned int v62 = 128;
                  unsigned int v66 = 128;
                  break;
                case 16:
                  char v64 = 0;
                  char v65 = 0;
                  unsigned int v66 = 64;
                  unsigned int v62 = 128;
                  break;
                case 32:
                  char v64 = 0;
                  char v65 = 0;
                  unsigned int v62 = 64;
                  unsigned int v66 = 64;
                  break;
                default:
                  if (v63 == 64)
                  {
                    char v64 = 0;
                    char v65 = 0;
                    unsigned int v66 = 32;
                    unsigned int v62 = 64;
                  }
                  break;
              }
            }
            unsigned int v120 = (v62 >> 3) - 1;
            if (v64) {
              unsigned int v121 = 0;
            }
            else {
              unsigned int v121 = 32 - __clz(~(-1 << -(char)__clz(v120)));
            }
            unsigned int v122 = (v66 >> 3) - 1;
            if (v65)
            {
              unsigned int v123 = 0;
              if (v121) {
                goto LABEL_149;
              }
            }
            else
            {
              unsigned int v123 = 32 - __clz(~(-1 << -(char)__clz(v122)));
              if (v123 | v121)
              {
LABEL_149:
                int v124 = 0;
                uint64_t v125 = 0;
                int v126 = v33 & v120;
                int v127 = v18 & v122;
                BOOL v128 = v121 != 0;
                BOOL v129 = v123 != 0;
                int v130 = 1;
                do
                {
                  --v121;
                  if (v128) {
                    v125 |= (unint64_t)(v130 & v126) << v124++;
                  }
                  else {
                    unsigned int v121 = 0;
                  }
                  --v123;
                  if (v129) {
                    v125 |= (unint64_t)(v130 & v127) << v124++;
                  }
                  else {
                    unsigned int v123 = 0;
                  }
                  v130 *= 2;
                  --v124;
                  BOOL v129 = v123 != 0;
                  BOOL v128 = v121 != 0;
                }
                while (v123 | v121);
                goto LABEL_161;
              }
            }
            uint64_t v125 = 0;
LABEL_161:
            unint64_t v50 = ((unint64_t)(v35 / v62 + v151 / v66 * ((v62 + v132) / v62)) << 14) + (v125 << 10);
            goto LABEL_59;
          }
          if (v143)
          {
            int v43 = 0;
            uint64_t v44 = 0;
            int v45 = 1;
            BOOL v46 = v140;
            BOOL v47 = v141;
            __int32 v49 = v142.i32[0];
            __int32 v48 = v142.i32[1];
            do
            {
              --v48;
              if (v47) {
                v44 |= (unint64_t)(v45 & v33) << v43++;
              }
              else {
                __int32 v48 = 0;
              }
              --v49;
              if (v46) {
                v44 |= (unint64_t)(v45 & v18) << v43++;
              }
              else {
                __int32 v49 = 0;
              }
              v45 *= 2;
              --v43;
              BOOL v46 = v49 != 0;
              BOOL v47 = v48 != 0;
            }
            while (v49 | v48);
          }
          else
          {
            uint64_t v44 = 0;
          }
          unint64_t v50 = v44 << 10;
LABEL_59:
          unsigned int v51 = *(_DWORD *)(v28 + 128) >> (*(unsigned char *)(v28 + 144) + a12);
          if (v51 <= 1) {
            unsigned int v51 = 1;
          }
          unsigned int v52 = v51 + 7;
          if (v52 < 0x10) {
            unsigned int v53 = 0;
          }
          else {
            unsigned int v53 = 32 - __clz(~(-1 << -(char)__clz((v52 >> 3) - 1)));
          }
          unsigned int v54 = *(_DWORD *)(v28 + 132) >> (*(unsigned char *)(v28 + 144) + a12);
          if (v54 <= 1) {
            unsigned int v54 = 1;
          }
          unsigned int v55 = v54 + 7;
          if (v55 < 0x10)
          {
            unsigned int v56 = 0;
            if (!v53)
            {
LABEL_81:
              uint64_t v58 = 0;
              goto LABEL_82;
            }
          }
          else
          {
            unsigned int v56 = 32 - __clz(~(-1 << -(char)__clz((v55 >> 3) - 1)));
            if (!(v56 | v53)) {
              goto LABEL_81;
            }
          }
          int v57 = 0;
          uint64_t v58 = 0;
          BOOL v59 = v53 != 0;
          BOOL v60 = v56 != 0;
          int v61 = 1;
          do
          {
            --v53;
            if (v59) {
              v58 |= (unint64_t)(v61 & v33) << v57++;
            }
            else {
              unsigned int v53 = 0;
            }
            --v56;
            if (v60) {
              v58 |= (unint64_t)(v61 & v18) << v57++;
            }
            else {
              unsigned int v56 = 0;
            }
            v61 *= 2;
            --v57;
            BOOL v60 = v56 != 0;
            BOOL v59 = v53 != 0;
          }
          while (v56 | v53);
LABEL_82:
          int v67 = v39 < 8 || v40;
          unsigned int v68 = (char *)(a4 + 8 * v58);
          unint64_t v69 = v149 + 16 * (v37 - a7);
          unsigned int v70 = (void *)(a2 + v50);
          if (v34 < 8) {
            int v71 = 1;
          }
          else {
            int v71 = v67;
          }
          if (v157)
          {
            if (!v71)
            {
              unsigned int v77 = __dst;
LABEL_95:
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock(v69, a11, (unint64_t)v77, v68, v39, v34);
              a7 = v144;
              goto LABEL_129;
            }
            int v72 = v70;
            char v73 = v39;
            int v74 = v38;
            BOOL v75 = v70;
            BOOL v76 = v40;
            memcpy(__dst, v72, sizeof(__dst));
            BOOL v40 = v76;
            unsigned int v70 = v75;
            int v38 = v74;
            LOBYTE(v39) = v73;
            unsigned int v35 = 8 * v33;
            unsigned int v77 = __dst;
            LOBYTE(v34) = v154;
            uint64_t v28 = v153;
          }
          else
          {
            unsigned int v77 = v70;
            if (!v71) {
              goto LABEL_95;
            }
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE13ELj4ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = v28;
          uint64_t v159 = v77;
          unsigned __int8 v167 = v39;
          unsigned __int8 v168 = v34;
          unsigned int v163 = v139;
          unsigned int v164 = v37 - v35;
          long long v160 = v68;
          unint64_t v161 = v69;
          uint64_t v162 = a11;
          unsigned int v165 = v150;
          unsigned int v166 = v38;
          if (v40)
          {
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(v28 + 8) + 7384), block);
            a7 = v144;
            goto LABEL_129;
          }
          uint64_t v78 = (uint64_t)&v77[AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)v170, 128, (uint64_t)v77, *v68)];
          uint64_t v79 = v78
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v172, 128, v78, v68[1]);
          uint64_t v80 = v79
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v171, 128, v79, v68[2]);
          uint64_t v81 = v80
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v173, 128, v80, v68[3]);
          uint64_t v82 = v81
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v174, 128, v81, v68[4]);
          uint64_t v83 = v82
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v176, 128, v82, v68[5]);
          uint64_t v84 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v175, 128, v83, v68[6]);
          AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)v177, 128, v83 + v84, v68[7]);
          uint64_t v85 = v165;
          a7 = v144;
          if (v165 && v166)
          {
            uint64_t v86 = 0;
            unint64_t v87 = (unint64_t)v163 << 7;
            uint64_t v88 = 16 * v164;
            uint64_t v89 = &v170[v87 + v88];
            unint64_t v90 = v161;
            uint64_t v91 = v162;
            unint64_t v92 = 16 * v166;
            if (v92 <= 1) {
              unint64_t v93 = 1;
            }
            else {
              unint64_t v93 = 16 * v166;
            }
            unint64_t v94 = v87 + v88;
            long long v95 = &v170[v87 + v88];
            if (v93) {
              BOOL v96 = (v93 - 1) >> 32 == 0;
            }
            else {
              BOOL v96 = 0;
            }
            char v97 = !v96;
            uint64_t v98 = v93 & 0xFFFFFFFE0;
            uint64_t v99 = v93 & 0xFFFFFFFF0;
            long long v100 = &v170[v94 + 16];
            char v101 = (long long *)(v161 + 16);
            uint64_t v102 = v89;
            unint64_t v103 = v161;
            do
            {
              unsigned int v104 = (char *)(v90 + v91 * v86);
              unsigned int v105 = &v89[128 * v86];
              if ((unint64_t)(&v95[128 * v86] - v104) < 0x20) {
                char v106 = 1;
              }
              else {
                char v106 = v97;
              }
              if (v106)
              {
                int v107 = 0;
                goto LABEL_125;
              }
              if (v93 >= 0x20)
              {
                uint64_t v113 = v101;
                uint64_t v114 = v100;
                uint64_t v115 = v93 & 0xFFFFFFFE0;
                do
                {
                  long long v116 = *v113;
                  *(v114 - 1) = *(v113 - 1);
                  *uint64_t v114 = v116;
                  v114 += 2;
                  v113 += 2;
                  v115 -= 32;
                }
                while (v115);
                if (v93 == v98) {
                  goto LABEL_108;
                }
                uint64_t v108 = v93 & 0xFFFFFFFE0;
                if ((v93 & 0x10) == 0)
                {
                  v104 += v98;
                  v105 += v98;
                  int v107 = v93 & 0xFFFFFFE0;
                  goto LABEL_125;
                }
              }
              else
              {
                uint64_t v108 = 0;
              }
              v105 += v99;
              unint64_t v109 = v108 - (v93 & 0xFFFFFFFF0);
              uint64_t v110 = (uint64_t *)(v103 + v108);
              uint64_t v111 = &v102[v108];
              do
              {
                uint64_t v112 = *v110++;
                *v111++ = v112;
                v109 += 8;
              }
              while (v109);
              if (v93 == v99) {
                goto LABEL_108;
              }
              v104 += v99;
              int v107 = v93 & 0xFFFFFFF0;
LABEL_125:
              unsigned int v117 = v107 + 1;
              do
              {
                char v118 = *v104++;
                *v105++ = v118;
              }
              while (v92 > v117++);
LABEL_108:
              ++v86;
              v100 += 128;
              char v101 = (long long *)((char *)v101 + v91);
              v103 += v91;
              v102 += 128;
            }
            while (v86 != v85);
          }
          AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v170, 128, (unint64_t)v159, v160, v167, v168);
LABEL_129:
          if (v157) {
            memcpy(v70, v77, 0x400uLL);
          }
          BOOL v23 = v33++ == v145 >> 3;
          uint64_t v28 = v153;
          unsigned int v34 = v154;
        }
        while (!v23);
        BOOL v23 = v18++ == v138;
      }
      while (!v23);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, int a12)
{
  v222[24] = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v198 = a8;
  unsigned int v17 = a8 >> 3;
  unsigned int v179 = a8 + a10 - 1;
  unsigned int v181 = v179 >> 3;
  unsigned int v18 = *(unsigned __int8 *)(*(void *)(a1 + 208) + 88);
  unsigned int v19 = *(_DWORD *)(a1 + 112);
  uint64_t v199 = a1;
  if (*(void *)(a1 + 168)) {
    int v20 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v20 = 0;
  }
  BOOL v21 = (v20 & 0xD00) == 0 || v20 == 768;
  int v22 = v20 & 0xE00;
  int v24 = !v21 && v22 != 1024;
  int v202 = v24;
  BOOL isLevelTiled = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::isLevelTiled(a1, *(_DWORD *)(a1 + 144) + a12);
  uint64_t v26 = a1;
  BOOL v192 = isLevelTiled;
  if (v17 <= v181)
  {
    unsigned int v191 = a7 + a9 - 1;
    unsigned int v178 = a7 >> 3;
    if (a7 >> 3 <= v191 >> 3)
    {
      unsigned int v175 = a5 - 1;
      unsigned int v201 = (a5 - 1) >> 3;
      int v200 = ((a5 - 1) & 7) + 1;
      int v176 = ((a6 - 1) & 7) + 1;
      unsigned int v177 = (a6 - 1) >> 3;
      unint64_t v27 = v19 * (unint64_t)v18;
      uint32x2_t v28 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0x700000007);
      int8x8_t v29 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v28, 3uLL))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x1000000010, v28));
      __int32 v189 = v29.i32[0] | v29.i32[1];
      int8x8_t v187 = v29;
      BOOL v185 = v29.i32[0] != 0;
      BOOL v186 = v29.i32[1] != 0;
      uint64_t v30 = a11;
      unint64_t v174 = 8 * v27;
      uint64_t v31 = 2 * a11;
      unsigned int v190 = a7;
      do
      {
        unsigned int v32 = (8 * v17) | 7;
        if (8 * v17 <= v198) {
          int v33 = v198;
        }
        else {
          int v33 = 8 * v17;
        }
        unsigned int v34 = v178;
        if (v179 < v32) {
          unsigned int v32 = v179;
        }
        int v184 = v33 - 8 * v17;
        int v196 = v32 - v33 + 1;
        unsigned int v197 = 8 * v17;
        if (v17 == v177) {
          unsigned int v35 = v176;
        }
        else {
          unsigned int v35 = 8;
        }
        uint64_t v195 = a3 + (v33 - v198) * v30;
        unsigned int v182 = v35;
        do
        {
          unsigned int v36 = 8 * v34;
          unsigned int v37 = 8 * (v34 + 1) - 1;
          if (8 * v34 <= a7) {
            int v38 = a7;
          }
          else {
            int v38 = 8 * v34;
          }
          if (v191 < v37) {
            unsigned int v37 = v191;
          }
          int v39 = v37 - v38 + 1;
          if (v34 == v201) {
            unsigned int v40 = v200;
          }
          else {
            unsigned int v40 = 8;
          }
          BOOL v41 = 1;
          if (v197 >= v198 && v36 >= a7)
          {
            int v42 = v200;
            if (v34 != v201) {
              int v42 = 8;
            }
            BOOL v41 = v39 != v42 || v196 != v35;
          }
          if (v192)
          {
            unsigned int v63 = 0;
            uint64_t v64 = v174 >> (*(unsigned char *)(v26 + 57) != 0);
            char v65 = 1;
            if (v64 > 127)
            {
              if (v64 > 511)
              {
                if (v64 == 512)
                {
                  char v65 = 0;
                  char v66 = 0;
                  unsigned int v63 = 16;
                  unsigned int v67 = 16;
                }
                else
                {
                  char v66 = 1;
                  unsigned int v67 = 0;
                  if (v64 == 1024)
                  {
                    char v65 = 0;
                    unsigned int v67 = 8;
                    unsigned int v63 = 16;
                  }
                }
              }
              else if (v64 == 128)
              {
                char v65 = 0;
                char v66 = 0;
                unsigned int v63 = 32;
                unsigned int v67 = 32;
              }
              else
              {
                char v66 = 1;
                unsigned int v67 = 0;
                if (v64 == 256)
                {
                  char v65 = 0;
                  char v66 = 0;
                  unsigned int v67 = 16;
                  unsigned int v63 = 32;
                }
              }
            }
            else
            {
              char v66 = 1;
              unsigned int v67 = 0;
              switch(v64)
              {
                case 4:
                  char v65 = 0;
                  char v66 = 0;
                  unsigned int v67 = 128;
                  unsigned int v63 = 256;
                  break;
                case 5:
                case 6:
                case 7:
                case 9:
                case 10:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 17:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                  break;
                case 8:
                  char v65 = 0;
                  char v66 = 0;
                  unsigned int v63 = 128;
                  unsigned int v67 = 128;
                  break;
                case 16:
                  char v65 = 0;
                  char v66 = 0;
                  unsigned int v67 = 64;
                  unsigned int v63 = 128;
                  break;
                case 32:
                  char v65 = 0;
                  char v66 = 0;
                  unsigned int v63 = 64;
                  unsigned int v67 = 64;
                  break;
                default:
                  if (v64 == 64)
                  {
                    char v65 = 0;
                    char v66 = 0;
                    unsigned int v67 = 32;
                    unsigned int v63 = 64;
                  }
                  break;
              }
            }
            unsigned int v163 = (v63 >> 3) - 1;
            if (v65) {
              unsigned int v164 = 0;
            }
            else {
              unsigned int v164 = 32 - __clz(~(-1 << -(char)__clz(v163)));
            }
            unsigned int v165 = (v67 >> 3) - 1;
            if (v66)
            {
              unsigned int v166 = 0;
              if (v164) {
                goto LABEL_174;
              }
            }
            else
            {
              unsigned int v166 = 32 - __clz(~(-1 << -(char)__clz(v165)));
              if (v166 | v164)
              {
LABEL_174:
                int v167 = 0;
                uint64_t v168 = 0;
                int v169 = v34 & v163;
                int v170 = v17 & v165;
                BOOL v171 = v164 != 0;
                BOOL v172 = v166 != 0;
                int v173 = 1;
                do
                {
                  --v164;
                  if (v171) {
                    v168 |= (unint64_t)(v173 & v169) << v167++;
                  }
                  else {
                    unsigned int v164 = 0;
                  }
                  --v166;
                  if (v172) {
                    v168 |= (unint64_t)(v173 & v170) << v167++;
                  }
                  else {
                    unsigned int v166 = 0;
                  }
                  v173 *= 2;
                  --v167;
                  BOOL v172 = v166 != 0;
                  BOOL v171 = v164 != 0;
                }
                while (v166 | v164);
                goto LABEL_186;
              }
            }
            uint64_t v168 = 0;
LABEL_186:
            unint64_t v51 = ((unint64_t)(v36 / v63 + v197 / v67 * ((v63 + v175) / v63)) << 14) + (v168 << 10);
            goto LABEL_59;
          }
          if (v189)
          {
            int v44 = 0;
            uint64_t v45 = 0;
            int v46 = 1;
            BOOL v47 = v185;
            BOOL v48 = v186;
            __int32 v50 = v187.i32[0];
            __int32 v49 = v187.i32[1];
            do
            {
              --v49;
              if (v48) {
                v45 |= (unint64_t)(v46 & v34) << v44++;
              }
              else {
                __int32 v49 = 0;
              }
              --v50;
              if (v47) {
                v45 |= (unint64_t)(v46 & v17) << v44++;
              }
              else {
                __int32 v50 = 0;
              }
              v46 *= 2;
              --v44;
              BOOL v47 = v50 != 0;
              BOOL v48 = v49 != 0;
            }
            while (v50 | v49);
          }
          else
          {
            uint64_t v45 = 0;
          }
          unint64_t v51 = v45 << 10;
LABEL_59:
          unsigned int v52 = *(_DWORD *)(v26 + 128) >> (*(unsigned char *)(v26 + 144) + a12);
          if (v52 <= 1) {
            unsigned int v52 = 1;
          }
          unsigned int v53 = v52 + 7;
          if (v53 < 0x10) {
            unsigned int v54 = 0;
          }
          else {
            unsigned int v54 = 32 - __clz(~(-1 << -(char)__clz((v53 >> 3) - 1)));
          }
          unsigned int v55 = *(_DWORD *)(v26 + 132) >> (*(unsigned char *)(v26 + 144) + a12);
          if (v55 <= 1) {
            unsigned int v55 = 1;
          }
          unsigned int v56 = v55 + 7;
          if (v56 < 0x10)
          {
            unsigned int v57 = 0;
            if (!v54)
            {
LABEL_81:
              uint64_t v59 = 0;
              goto LABEL_82;
            }
          }
          else
          {
            unsigned int v57 = 32 - __clz(~(-1 << -(char)__clz((v56 >> 3) - 1)));
            if (!(v57 | v54)) {
              goto LABEL_81;
            }
          }
          int v58 = 0;
          uint64_t v59 = 0;
          BOOL v60 = v54 != 0;
          BOOL v61 = v57 != 0;
          int v62 = 1;
          do
          {
            --v54;
            if (v60) {
              v59 |= (unint64_t)(v62 & v34) << v58++;
            }
            else {
              unsigned int v54 = 0;
            }
            --v57;
            if (v61) {
              v59 |= (unint64_t)(v62 & v17) << v58++;
            }
            else {
              unsigned int v57 = 0;
            }
            v62 *= 2;
            --v58;
            BOOL v61 = v57 != 0;
            BOOL v60 = v54 != 0;
          }
          while (v57 | v54);
LABEL_82:
          unsigned int v68 = v38 - a7;
          int v69 = v40 < 8 || v41;
          unsigned int v70 = (unsigned __int8 *)(a4 + 8 * v59);
          uint64_t v71 = v195 + 16 * v68;
          int v72 = (void *)(a2 + v51);
          if (v35 < 8) {
            int v73 = 1;
          }
          else {
            int v73 = v69;
          }
          if (v202)
          {
            if (!v73)
            {
              uint64_t v78 = __dst;
LABEL_96:
              uint64_t v80 = 0;
              uint64_t v81 = v78;
              do
              {
                uint64_t v94 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,4u>::kSubblockPositions[v80 + 1];
                uint64_t v95 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,4u>::kSubblockPositions[v80];
                unsigned int v96 = (v40 - 4 * v95) & ~((int)(v40 - 4 * v95) >> 31);
                if (v96 >= 4) {
                  unsigned int v96 = 4;
                }
                unsigned int v97 = (v35 - 2 * v94) & ~((int)(v35 - 2 * v94) >> 31);
                if (v97 >= 2) {
                  unsigned int v97 = 2;
                }
                if (v96) {
                  BOOL v98 = v97 == 0;
                }
                else {
                  BOOL v98 = 1;
                }
                if (v98)
                {
                  char v93 = 0;
                }
                else
                {
                  uint64_t v82 = (long long *)(v71 + v31 * v94 + (v95 << 6));
                  uint64_t v83 = v82 + 2;
                  long long v85 = *v82;
                  long long v86 = v82[1];
                  uint64_t v84 = (long long *)((char *)v82 + v30);
                  long long v87 = *v83;
                  long long v88 = v83[1];
                  long long v89 = *v84;
                  long long v90 = v84[1];
                  v84 += 2;
                  long long v91 = *v84;
                  long long v92 = v84[1];
                  *uint64_t v81 = v85;
                  v81[1] = v86;
                  v81[2] = v89;
                  v81[3] = v90;
                  v81[4] = v87;
                  v81[5] = v88;
                  v81[6] = v91;
                  v81[7] = v92;
                  v81 += 8;
                  char v93 = 127;
                }
                *v70++ = v93;
                v80 += 2;
              }
              while (v80 != 16);
              a7 = v190;
              if (v202) {
                goto LABEL_155;
              }
              goto LABEL_27;
            }
            int v74 = v72;
            int v75 = v39;
            BOOL v76 = v41;
            int v77 = v38;
            memcpy(__dst, v72, sizeof(__dst));
            uint64_t v78 = __dst;
            int v72 = v74;
            int v38 = v77;
            BOOL v41 = v76;
            unsigned int v35 = v182;
            unsigned int v36 = 8 * v34;
            int v39 = v75;
            uint64_t v30 = a11;
            uint64_t v26 = v199;
          }
          else
          {
            uint64_t v78 = v72;
            if (!v73) {
              goto LABEL_96;
            }
          }
          unsigned int v188 = v72;
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE13ELj4ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = v26;
          long long v204 = v78;
          unsigned __int8 v212 = v40;
          unsigned __int8 v213 = v35;
          unsigned int v208 = v184;
          unsigned int v209 = v38 - v36;
          uint64_t v205 = v70;
          uint64_t v206 = v71;
          uint64_t v207 = v30;
          unsigned int v210 = v196;
          unsigned int v211 = v39;
          if (v41)
          {
            uint64_t v79 = v78;
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(v26 + 8) + 7384), block);
            uint64_t v78 = v79;
            uint64_t v26 = v199;
            a7 = v190;
            uint64_t v31 = 2 * a11;
            int v72 = v188;
            if (!v202) {
              goto LABEL_27;
            }
LABEL_155:
            memcpy(v72, v78, 0x400uLL);
            uint64_t v31 = 2 * a11;
            uint64_t v26 = v199;
            goto LABEL_27;
          }
          unsigned int v183 = v78;
          uint64_t v99 = (uint64_t)&v78[AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)v215, 128, (uint64_t)v78, *v70)];
          uint64_t v100 = v99
               + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v217, 128, v99, v70[1]);
          uint64_t v101 = v100
               + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v216, 128, v100, v70[2]);
          uint64_t v102 = v101
               + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v218, 128, v101, v70[3]);
          uint64_t v103 = v102
               + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v219, 128, v102, v70[4]);
          uint64_t v104 = v103
               + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v221, 128, v103, v70[5]);
          uint64_t v105 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v220, 128, v104, v70[6]);
          AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)v222, 128, v104 + v105, v70[7]);
          uint64_t v106 = v210;
          if (v210 && v211)
          {
            uint64_t v107 = 0;
            unint64_t v108 = (unint64_t)v208 << 7;
            uint64_t v109 = 16 * v209;
            uint64_t v110 = &v215[v108 + v109];
            uint64_t v111 = v206;
            uint64_t v112 = v207;
            unint64_t v113 = 16 * v211;
            if (v113 <= 1) {
              unint64_t v114 = 1;
            }
            else {
              unint64_t v114 = 16 * v211;
            }
            unint64_t v115 = v108 + v109;
            long long v116 = &v215[v108 + v109];
            if (v114) {
              BOOL v117 = (v114 - 1) >> 32 == 0;
            }
            else {
              BOOL v117 = 0;
            }
            char v118 = !v117;
            uint64_t v119 = v114 & 0xFFFFFFFE0;
            uint64_t v120 = v114 & 0xFFFFFFFF0;
            unsigned int v121 = &v215[v115 + 16];
            unsigned int v122 = (long long *)(v206 + 16);
            unsigned int v123 = v110;
            uint64_t v124 = v206;
            do
            {
              uint64_t v125 = (char *)(v111 + v112 * v107);
              int v126 = &v110[128 * v107];
              if ((unint64_t)(&v116[128 * v107] - v125) < 0x20) {
                char v127 = 1;
              }
              else {
                char v127 = v118;
              }
              if (v127)
              {
                int v128 = 0;
                goto LABEL_139;
              }
              if (v114 >= 0x20)
              {
                unsigned int v134 = v122;
                unsigned int v135 = v121;
                uint64_t v136 = v114 & 0xFFFFFFFE0;
                do
                {
                  long long v137 = *v134;
                  *(v135 - 1) = *(v134 - 1);
                  *unsigned int v135 = v137;
                  v135 += 2;
                  v134 += 2;
                  v136 -= 32;
                }
                while (v136);
                if (v114 == v119) {
                  goto LABEL_122;
                }
                uint64_t v129 = v114 & 0xFFFFFFFE0;
                if ((v114 & 0x10) == 0)
                {
                  v125 += v119;
                  v126 += v119;
                  int v128 = v114 & 0xFFFFFFE0;
                  goto LABEL_139;
                }
              }
              else
              {
                uint64_t v129 = 0;
              }
              v126 += v120;
              unint64_t v130 = v129 - (v114 & 0xFFFFFFFF0);
              unint64_t v131 = (uint64_t *)(v124 + v129);
              unsigned int v132 = &v123[v129];
              do
              {
                uint64_t v133 = *v131++;
                *v132++ = v133;
                v130 += 8;
              }
              while (v130);
              if (v114 == v120) {
                goto LABEL_122;
              }
              v125 += v120;
              int v128 = v114 & 0xFFFFFFF0;
LABEL_139:
              unsigned int v138 = v128 + 1;
              do
              {
                char v139 = *v125++;
                *v126++ = v139;
              }
              while (v113 > v138++);
LABEL_122:
              ++v107;
              v121 += 128;
              unsigned int v122 = (long long *)((char *)v122 + v112);
              v124 += v112;
              v123 += 128;
            }
            while (v107 != v106);
          }
          uint64_t v141 = 0;
          int8x8_t v142 = v204;
          __int32 v143 = (char *)v205;
          int v144 = v212;
          int v145 = v213;
          a7 = v190;
          uint64_t v26 = v199;
          uint64_t v31 = 2 * a11;
          int v72 = v188;
          do
          {
            uint64_t v158 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,4u>::kSubblockPositions[v141 + 1];
            uint64_t v159 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,4u>::kSubblockPositions[v141];
            unsigned int v160 = (v144 - 4 * v159) & ~((v144 - 4 * (int)v159) >> 31);
            if (v160 >= 4) {
              unsigned int v160 = 4;
            }
            unsigned int v161 = (v145 - 2 * v158) & ~((v145 - 2 * (int)v158) >> 31);
            if (v161 >= 2) {
              unsigned int v161 = 2;
            }
            if (v160) {
              BOOL v162 = v161 == 0;
            }
            else {
              BOOL v162 = 1;
            }
            if (v162)
            {
              char v157 = 0;
            }
            else
            {
              BOOL v146 = (long long *)&v215[256 * v158 + 64 * v159];
              long long v148 = *v146;
              long long v149 = v146[1];
              unsigned int v147 = v146 + 2;
              int v150 = v146 + 8;
              v146 += 10;
              long long v151 = *v147;
              long long v152 = v147[1];
              long long v153 = *v150;
              long long v154 = v150[1];
              long long v155 = *v146;
              long long v156 = v146[1];
              *int8x8_t v142 = v148;
              v142[1] = v149;
              v142[2] = v153;
              v142[3] = v154;
              v142[4] = v151;
              v142[5] = v152;
              v142[6] = v155;
              v142[7] = v156;
              v142 += 8;
              char v157 = 127;
            }
            *v143++ = v157;
            v141 += 2;
          }
          while (v141 != 16);
          uint64_t v78 = v183;
          if (v202) {
            goto LABEL_155;
          }
LABEL_27:
          BOOL v21 = v34++ == v191 >> 3;
        }
        while (!v21);
        BOOL v21 = v17++ == v181;
      }
      while (!v21);
    }
  }
}

uint64_t AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, char a12)
{
  uint64_t v311 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v228 = a8;
  unsigned int v213 = a8 + a10 - 1;
  uint64_t v229 = a1;
  if (*(void *)(a1 + 168)) {
    int v17 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v17 = 0;
  }
  unsigned int v18 = a5 - 1;
  unsigned int v19 = a6 - 1;
  unsigned int v20 = a8 >> 3;
  unsigned int v212 = v213 >> 3;
  BOOL v21 = (v17 & 0xD00) == 0 || v17 == 768;
  int v22 = v17 & 0xE00;
  int v24 = !v21 && v22 != 1024;
  int v233 = v24;
  uint64_t result = a1;
  if (*(unsigned char *)(a1 + 232))
  {
    unsigned int v26 = *(unsigned __int8 *)(a1 + 255);
    unsigned int v27 = *(unsigned __int8 *)(a1 + 254);
    char v28 = __clz(v18);
    if (1 << v26 >= a6 || a5 >> v27)
    {
      if (!(a6 >> v26) && 1 << v27 < a5)
      {
        if (a6 < 2) {
          unsigned int v31 = 0;
        }
        else {
          unsigned int v31 = __clz(~(-1 << -(char)__clz(v19))) - 32;
        }
        v27 += v26 + v31;
        unsigned int v26 = -v31;
      }
    }
    else
    {
      unsigned int v29 = 32 - __clz(~(-1 << -v28));
      unsigned int v30 = v27 + v26;
      if (a5 < 2) {
        unsigned int v29 = 0;
      }
      unsigned int v26 = v30 - v29;
      unsigned int v27 = v29;
    }
    if (a5 < 2)
    {
      if (v27) {
        goto LABEL_27;
      }
    }
    else if (32 - __clz(~(-1 << -v28)) < v27)
    {
LABEL_27:
      BOOL v223 = 0;
LABEL_32:
      unsigned int v220 = v27 - 3;
      unsigned int v217 = v26 - 3;
      int v33 = -1 << *(unsigned char *)(*(void *)(a1 + 208) + 48);
      unsigned int v210 = (((~v33 + a5) & v33) + ~(-1 << v27)) >> v27;
      goto LABEL_33;
    }
    if (a6 < 2) {
      unsigned int v32 = 0;
    }
    else {
      unsigned int v32 = 32 - __clz(~(-1 << -(char)__clz(v19)));
    }
    BOOL v223 = v32 >= v26;
    goto LABEL_32;
  }
  BOOL v223 = 0;
  unsigned int v210 = 0;
  unsigned int v217 = 0;
  unsigned int v220 = 0;
LABEL_33:
  if (v20 <= v212)
  {
    unsigned int v222 = a7 + a9 - 1;
    unsigned int v209 = a7 >> 3;
    if (a7 >> 3 <= v222 >> 3)
    {
      unsigned int v231 = v18 >> 3;
      unsigned int v208 = v19 >> 3;
      int v230 = (v18 & 7) + 1;
      int v207 = (v19 & 7) + 1;
      int v206 = ~(-1 << v217);
      uint32x2_t v34 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0x700000007);
      int8x8_t v35 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v34, 3uLL))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x1000000010, v34));
      __int32 v218 = v35.i32[0] | v35.i32[1];
      BOOL v215 = v35.i32[1] != 0;
      int8x8_t v216 = v35;
      BOOL v214 = v35.i32[0] != 0;
      unsigned int v221 = a7;
      do
      {
        unsigned int v36 = (8 * v20) | 7;
        if (8 * v20 <= v228) {
          int v37 = v228;
        }
        else {
          int v37 = 8 * v20;
        }
        if (v213 < v36) {
          unsigned int v36 = v213;
        }
        int v219 = v37 - 8 * v20;
        int v227 = v36 - v37 + 1;
        unsigned int v38 = v209;
        int v39 = v207;
        if (v20 != v208) {
          int v39 = 8;
        }
        unsigned int v234 = v39;
        int v40 = v20 & v206;
        uint64_t v226 = a3 + (v37 - v228) * a11;
        do
        {
          unsigned int v41 = 8 * v38;
          unsigned int v42 = 8 * (v38 + 1) - 1;
          if (8 * v38 <= a7) {
            int v43 = a7;
          }
          else {
            int v43 = 8 * v38;
          }
          if (v222 < v42) {
            unsigned int v42 = v222;
          }
          int v44 = v42 - v43 + 1;
          if (v38 == v231) {
            unsigned int v45 = v230;
          }
          else {
            unsigned int v45 = 8;
          }
          BOOL v46 = 1;
          if (8 * v20 >= v228 && v41 >= a7)
          {
            int v47 = v230;
            if (v38 != v231) {
              int v47 = 8;
            }
            BOOL v46 = v44 != v47 || v227 != v234;
          }
          if (v223)
          {
            if (v220 | v217)
            {
              int v49 = 0;
              uint64_t v50 = 0;
              int v51 = 1;
              BOOL v52 = v220 != 0;
              BOOL v53 = v217 != 0;
              unsigned int v54 = v220;
              unsigned int v55 = v217;
              do
              {
                --v54;
                if (v52) {
                  v50 |= (unint64_t)(v38 & ~(-1 << v220) & v51) << v49++;
                }
                else {
                  unsigned int v54 = 0;
                }
                --v55;
                if (v53) {
                  v50 |= (unint64_t)(v40 & v51) << v49++;
                }
                else {
                  unsigned int v55 = 0;
                }
                v51 *= 2;
                --v49;
                BOOL v53 = v55 != 0;
                BOOL v52 = v54 != 0;
              }
              while (v55 | v54);
            }
            else
            {
              uint64_t v50 = 0;
            }
            uint64_t v63 = *(void *)(result + 320) * ((v38 >> v220) + (v20 >> v217) * v210) + (v50 << 10);
          }
          else
          {
            if (v218)
            {
              int v56 = 0;
              uint64_t v57 = 0;
              int v58 = 1;
              BOOL v59 = v215;
              BOOL v60 = v214;
              __int32 v61 = v216.i32[1];
              __int32 v62 = v216.i32[0];
              do
              {
                --v61;
                if (v59) {
                  v57 |= (unint64_t)(v58 & v38) << v56++;
                }
                else {
                  __int32 v61 = 0;
                }
                --v62;
                if (v60) {
                  v57 |= (unint64_t)(v58 & v20) << v56++;
                }
                else {
                  __int32 v62 = 0;
                }
                v58 *= 2;
                --v56;
                BOOL v60 = v62 != 0;
                BOOL v59 = v61 != 0;
              }
              while (v62 | v61);
            }
            else
            {
              uint64_t v57 = 0;
            }
            uint64_t v63 = v57 << 10;
          }
          unsigned int v64 = *(_DWORD *)(result + 128) >> (*(unsigned char *)(result + 144) + a12);
          if (v64 <= 1) {
            unsigned int v64 = 1;
          }
          unsigned int v65 = v64 + 7;
          if (v65 < 0x10) {
            unsigned int v66 = 0;
          }
          else {
            unsigned int v66 = 32 - __clz(~(-1 << -(char)__clz((v65 >> 3) - 1)));
          }
          unsigned int v67 = *(_DWORD *)(result + 132) >> (*(unsigned char *)(result + 144) + a12);
          if (v67 <= 1) {
            unsigned int v67 = 1;
          }
          unsigned int v68 = v67 + 7;
          if (v68 < 0x10) {
            unsigned int v69 = 0;
          }
          else {
            unsigned int v69 = 32 - __clz(~(-1 << -(char)__clz((v68 >> 3) - 1)));
          }
          if (v69 | v66)
          {
            int v70 = 0;
            uint64_t v71 = 0;
            BOOL v72 = v66 != 0;
            BOOL v73 = v69 != 0;
            int v74 = 1;
            do
            {
              --v66;
              if (v72) {
                v71 |= (unint64_t)(v74 & v38) << v70++;
              }
              else {
                unsigned int v66 = 0;
              }
              --v69;
              if (v73) {
                v71 |= (unint64_t)(v74 & v20) << v70++;
              }
              else {
                unsigned int v69 = 0;
              }
              v74 *= 2;
              --v70;
              BOOL v73 = v69 != 0;
              BOOL v72 = v66 != 0;
            }
            while (v69 | v66);
          }
          else
          {
            uint64_t v71 = 0;
          }
          int v75 = v45 < 8 || v46;
          BOOL v76 = (char *)(a4 + 8 * v71);
          uint64_t v77 = v226 + 16 * (v43 - a7);
          uint64_t v78 = (float32x4_t *)(a2 + v63);
          if (v234 < 8) {
            int v79 = 1;
          }
          else {
            int v79 = v75;
          }
          unsigned int v232 = v78;
          if (v233)
          {
            uint64_t v80 = (float32x4_t *)__dst;
            if (!v79) {
              goto LABEL_121;
            }
            uint64_t v81 = (char *)(a4 + 8 * v71);
            int v82 = v44;
            char v83 = v45;
            memcpy(__dst, v78, sizeof(__dst));
            unsigned int v41 = 8 * v38;
            LOBYTE(v45) = v83;
            int v44 = v82;
            BOOL v76 = v81;
            int v40 = v20 & v206;
            uint64_t result = v229;
          }
          else
          {
            uint64_t v80 = v78;
            if (!v79)
            {
LABEL_121:
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock(v77, a11, (unint64_t)v80, v76, v45, v234);
              goto LABEL_122;
            }
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE15ELj4ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = result;
          int v236 = v80;
          unsigned __int8 v244 = v45;
          unsigned __int8 v245 = v234;
          unsigned int v240 = v219;
          unsigned int v241 = v43 - v41;
          BOOL v237 = v76;
          uint64_t v238 = v77;
          uint64_t v239 = a11;
          unsigned int v242 = v227;
          unsigned int v243 = v44;
          if (v46)
          {
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(result + 8) + 7384), block);
LABEL_122:
            a7 = v221;
            unsigned int v84 = v38 + 1;
            goto LABEL_214;
          }
          unsigned int v85 = *v76;
          if (v85 == 127)
          {
            float32x4_t v88 = v80[1];
            float32x4_t v89 = v80[2];
            float32x4_t v90 = v80[3];
            float32x4_t v91 = v80[4];
            float32x4_t v92 = v80[5];
            float32x4_t v93 = v80[6];
            float32x4_t v94 = v80[7];
            int8x16_t v247 = *(int8x16_t *)v80;
            float32x4_t v248 = v88;
            float32x4_t v249 = v91;
            float32x4_t v250 = v92;
            float32x4_t v255 = v89;
            float32x4_t v256 = v90;
            float32x4_t v257 = v93;
            float32x4_t v258 = v94;
            uint64_t v86 = 128;
          }
          else if (v85 == 3)
          {
            float32x4_t v87 = vld1q_dup_f32(v80->f32);
            int8x16_t v247 = (int8x16_t)v87;
            float32x4_t v248 = v87;
            float32x4_t v249 = v87;
            float32x4_t v250 = v87;
            float32x4_t v255 = v87;
            float32x4_t v256 = v87;
            float32x4_t v257 = v87;
            float32x4_t v258 = v87;
            uint64_t v86 = 4;
          }
          else if (*v76)
          {
            uint64_t v86 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v247, 128, (uint64_t)v80, v85);
          }
          else
          {
            uint64_t v86 = 0;
            float32x4_t v250 = 0u;
            float32x4_t v249 = 0u;
            float32x4_t v248 = 0u;
            int8x16_t v247 = 0u;
            float32x4_t v255 = 0u;
            float32x4_t v256 = 0u;
            float32x4_t v257 = 0u;
            float32x4_t v258 = 0u;
          }
          uint64_t v95 = (uint64_t)v80 + v86;
          unsigned int v96 = v76[1];
          if (v96 == 127)
          {
            float32x4_t v99 = *(float32x4_t *)(v95 + 16);
            float32x4_t v100 = *(float32x4_t *)(v95 + 32);
            float32x4_t v101 = *(float32x4_t *)(v95 + 48);
            float32x4_t v102 = *(float32x4_t *)(v95 + 64);
            float32x4_t v103 = *(float32x4_t *)(v95 + 80);
            float32x4_t v104 = *(float32x4_t *)(v95 + 96);
            float32x4_t v105 = *(float32x4_t *)(v95 + 112);
            int8x16_t v263 = *(int8x16_t *)v95;
            float32x4_t v264 = v99;
            float32x4_t v265 = v102;
            float32x4_t v266 = v103;
            float32x4_t v271 = v100;
            float32x4_t v272 = v101;
            float32x4_t v273 = v104;
            float32x4_t v274 = v105;
            uint64_t v97 = 128;
          }
          else if (v96 == 3)
          {
            float32x4_t v98 = vld1q_dup_f32((const float *)v95);
            int8x16_t v263 = (int8x16_t)v98;
            float32x4_t v264 = v98;
            float32x4_t v265 = v98;
            float32x4_t v266 = v98;
            float32x4_t v271 = v98;
            float32x4_t v272 = v98;
            float32x4_t v273 = v98;
            float32x4_t v274 = v98;
            uint64_t v97 = 4;
          }
          else if (v76[1])
          {
            uint64_t v97 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v263, 128, v95, v96);
          }
          else
          {
            uint64_t v97 = 0;
            float32x4_t v265 = 0u;
            float32x4_t v266 = 0u;
            int8x16_t v263 = 0u;
            float32x4_t v264 = 0u;
            float32x4_t v271 = 0u;
            float32x4_t v272 = 0u;
            float32x4_t v273 = 0u;
            float32x4_t v274 = 0u;
          }
          uint64_t v106 = v95 + v97;
          unsigned int v107 = v76[2];
          if (v107 == 127)
          {
            float32x4_t v110 = *(float32x4_t *)(v106 + 16);
            float32x4_t v111 = *(float32x4_t *)(v106 + 32);
            float32x4_t v112 = *(float32x4_t *)(v106 + 48);
            float32x4_t v113 = *(float32x4_t *)(v106 + 64);
            float32x4_t v114 = *(float32x4_t *)(v106 + 80);
            float32x4_t v115 = *(float32x4_t *)(v106 + 96);
            float32x4_t v116 = *(float32x4_t *)(v106 + 112);
            int8x16_t v251 = *(int8x16_t *)v106;
            float32x4_t v252 = v110;
            float32x4_t v253 = v113;
            float32x4_t v254 = v114;
            float32x4_t v259 = v111;
            float32x4_t v260 = v112;
            float32x4_t v261 = v115;
            float32x4_t v262 = v116;
            uint64_t v108 = 128;
          }
          else if (v107 == 3)
          {
            float32x4_t v109 = vld1q_dup_f32((const float *)v106);
            int8x16_t v251 = (int8x16_t)v109;
            float32x4_t v252 = v109;
            float32x4_t v253 = v109;
            float32x4_t v254 = v109;
            float32x4_t v259 = v109;
            float32x4_t v260 = v109;
            float32x4_t v261 = v109;
            float32x4_t v262 = v109;
            uint64_t v108 = 4;
          }
          else if (v76[2])
          {
            uint64_t v108 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v251, 128, v106, v107);
          }
          else
          {
            uint64_t v108 = 0;
            float32x4_t v253 = 0u;
            float32x4_t v254 = 0u;
            int8x16_t v251 = 0u;
            float32x4_t v252 = 0u;
            float32x4_t v259 = 0u;
            float32x4_t v260 = 0u;
            float32x4_t v261 = 0u;
            float32x4_t v262 = 0u;
          }
          uint64_t v117 = v106 + v108;
          unsigned int v118 = v76[3];
          if (v118 == 127)
          {
            float32x4_t v121 = *(float32x4_t *)(v117 + 16);
            float32x4_t v122 = *(float32x4_t *)(v117 + 32);
            float32x4_t v123 = *(float32x4_t *)(v117 + 48);
            float32x4_t v124 = *(float32x4_t *)(v117 + 64);
            float32x4_t v125 = *(float32x4_t *)(v117 + 80);
            float32x4_t v126 = *(float32x4_t *)(v117 + 96);
            float32x4_t v127 = *(float32x4_t *)(v117 + 112);
            int8x16_t v267 = *(int8x16_t *)v117;
            float32x4_t v268 = v121;
            float32x4_t v269 = v124;
            float32x4_t v270 = v125;
            float32x4_t v275 = v122;
            float32x4_t v276 = v123;
            float32x4_t v277 = v126;
            float32x4_t v278 = v127;
            uint64_t v119 = 128;
          }
          else if (v118 == 3)
          {
            float32x4_t v120 = vld1q_dup_f32((const float *)v117);
            int8x16_t v267 = (int8x16_t)v120;
            float32x4_t v268 = v120;
            float32x4_t v269 = v120;
            float32x4_t v270 = v120;
            float32x4_t v275 = v120;
            float32x4_t v276 = v120;
            float32x4_t v277 = v120;
            float32x4_t v278 = v120;
            uint64_t v119 = 4;
          }
          else if (v76[3])
          {
            uint64_t v119 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v267, 128, v117, v118);
          }
          else
          {
            uint64_t v119 = 0;
            float32x4_t v269 = 0u;
            float32x4_t v270 = 0u;
            int8x16_t v267 = 0u;
            float32x4_t v268 = 0u;
            float32x4_t v275 = 0u;
            float32x4_t v276 = 0u;
            float32x4_t v277 = 0u;
            float32x4_t v278 = 0u;
          }
          uint64_t v128 = v117 + v119;
          unsigned int v129 = v76[4];
          if (v129 == 127)
          {
            float32x4_t v132 = *(float32x4_t *)(v128 + 16);
            float32x4_t v133 = *(float32x4_t *)(v128 + 32);
            float32x4_t v134 = *(float32x4_t *)(v128 + 48);
            float32x4_t v135 = *(float32x4_t *)(v128 + 64);
            float32x4_t v136 = *(float32x4_t *)(v128 + 80);
            float32x4_t v137 = *(float32x4_t *)(v128 + 96);
            float32x4_t v138 = *(float32x4_t *)(v128 + 112);
            int8x16_t v279 = *(int8x16_t *)v128;
            float32x4_t v280 = v132;
            float32x4_t v281 = v135;
            float32x4_t v282 = v136;
            float32x4_t v287 = v133;
            float32x4_t v288 = v134;
            float32x4_t v289 = v137;
            float32x4_t v290 = v138;
            uint64_t v130 = 128;
          }
          else if (v129 == 3)
          {
            float32x4_t v131 = vld1q_dup_f32((const float *)v128);
            int8x16_t v279 = (int8x16_t)v131;
            float32x4_t v280 = v131;
            float32x4_t v281 = v131;
            float32x4_t v282 = v131;
            float32x4_t v287 = v131;
            float32x4_t v288 = v131;
            float32x4_t v289 = v131;
            float32x4_t v290 = v131;
            uint64_t v130 = 4;
          }
          else if (v76[4])
          {
            uint64_t v130 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v279, 128, v128, v129);
          }
          else
          {
            uint64_t v130 = 0;
            float32x4_t v281 = 0u;
            float32x4_t v282 = 0u;
            int8x16_t v279 = 0u;
            float32x4_t v280 = 0u;
            float32x4_t v287 = 0u;
            float32x4_t v288 = 0u;
            float32x4_t v289 = 0u;
            float32x4_t v290 = 0u;
          }
          uint64_t v139 = v128 + v130;
          unsigned int v140 = v76[5];
          if (v140 == 127)
          {
            float32x4_t v143 = *(float32x4_t *)(v139 + 16);
            float32x4_t v144 = *(float32x4_t *)(v139 + 32);
            float32x4_t v145 = *(float32x4_t *)(v139 + 48);
            float32x4_t v146 = *(float32x4_t *)(v139 + 64);
            float32x4_t v147 = *(float32x4_t *)(v139 + 80);
            float32x4_t v148 = *(float32x4_t *)(v139 + 96);
            float32x4_t v149 = *(float32x4_t *)(v139 + 112);
            int8x16_t v295 = *(int8x16_t *)v139;
            float32x4_t v296 = v143;
            float32x4_t v297 = v146;
            float32x4_t v298 = v147;
            float32x4_t v303 = v144;
            float32x4_t v304 = v145;
            float32x4_t v305 = v148;
            float32x4_t v306 = v149;
            uint64_t v141 = 128;
          }
          else if (v140 == 3)
          {
            float32x4_t v142 = vld1q_dup_f32((const float *)v139);
            int8x16_t v295 = (int8x16_t)v142;
            float32x4_t v296 = v142;
            float32x4_t v297 = v142;
            float32x4_t v298 = v142;
            float32x4_t v303 = v142;
            float32x4_t v304 = v142;
            float32x4_t v305 = v142;
            float32x4_t v306 = v142;
            uint64_t v141 = 4;
          }
          else if (v76[5])
          {
            uint64_t v141 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v295, 128, v139, v140);
          }
          else
          {
            uint64_t v141 = 0;
            float32x4_t v297 = 0u;
            float32x4_t v298 = 0u;
            int8x16_t v295 = 0u;
            float32x4_t v296 = 0u;
            float32x4_t v303 = 0u;
            float32x4_t v304 = 0u;
            float32x4_t v305 = 0u;
            float32x4_t v306 = 0u;
          }
          uint64_t v150 = v139 + v141;
          unsigned int v151 = v76[6];
          if (v151 == 127)
          {
            float32x4_t v154 = *(float32x4_t *)(v150 + 16);
            float32x4_t v155 = *(float32x4_t *)(v150 + 32);
            float32x4_t v156 = *(float32x4_t *)(v150 + 48);
            float32x4_t v157 = *(float32x4_t *)(v150 + 64);
            float32x4_t v158 = *(float32x4_t *)(v150 + 80);
            float32x4_t v159 = *(float32x4_t *)(v150 + 96);
            float32x4_t v160 = *(float32x4_t *)(v150 + 112);
            int8x16_t v283 = *(int8x16_t *)v150;
            float32x4_t v284 = v154;
            float32x4_t v285 = v157;
            float32x4_t v286 = v158;
            float32x4_t v291 = v155;
            float32x4_t v292 = v156;
            float32x4_t v293 = v159;
            float32x4_t v294 = v160;
            uint64_t v152 = 128;
          }
          else if (v151 == 3)
          {
            float32x4_t v153 = vld1q_dup_f32((const float *)v150);
            int8x16_t v283 = (int8x16_t)v153;
            float32x4_t v284 = v153;
            float32x4_t v285 = v153;
            float32x4_t v286 = v153;
            float32x4_t v291 = v153;
            float32x4_t v292 = v153;
            float32x4_t v293 = v153;
            float32x4_t v294 = v153;
            uint64_t v152 = 4;
          }
          else if (v76[6])
          {
            uint64_t v152 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v283, 128, v150, v151);
          }
          else
          {
            uint64_t v152 = 0;
            float32x4_t v285 = 0u;
            float32x4_t v286 = 0u;
            int8x16_t v283 = 0u;
            float32x4_t v284 = 0u;
            float32x4_t v291 = 0u;
            float32x4_t v292 = 0u;
            float32x4_t v293 = 0u;
            float32x4_t v294 = 0u;
          }
          uint64_t v161 = v150 + v152;
          unsigned int v162 = v76[7];
          if (v162 == 127)
          {
            float32x4_t v165 = *(float32x4_t *)(v161 + 16);
            float32x4_t v166 = *(float32x4_t *)(v161 + 32);
            float32x4_t v167 = *(float32x4_t *)(v161 + 48);
            float32x4_t v168 = *(float32x4_t *)(v161 + 64);
            float32x4_t v169 = *(float32x4_t *)(v161 + 80);
            float32x4_t v170 = *(float32x4_t *)(v161 + 96);
            float32x4_t v171 = *(float32x4_t *)(v161 + 112);
            int8x16_t v299 = *(int8x16_t *)v161;
            float32x4_t v300 = v165;
            float32x4_t v301 = v168;
            float32x4_t v302 = v169;
            float32x4_t v307 = v166;
            float32x4_t v308 = v167;
            float32x4_t v309 = v170;
            float32x4_t v310 = v171;
            a7 = v221;
            unsigned int v84 = v38 + 1;
            uint64_t v163 = v242;
            if (!v242) {
              goto LABEL_213;
            }
          }
          else
          {
            a7 = v221;
            unsigned int v84 = v38 + 1;
            if (v162 == 3)
            {
              float32x4_t v164 = vld1q_dup_f32((const float *)v161);
              int8x16_t v299 = (int8x16_t)v164;
              float32x4_t v300 = v164;
              float32x4_t v301 = v164;
              float32x4_t v302 = v164;
              float32x4_t v307 = v164;
              float32x4_t v308 = v164;
              float32x4_t v309 = v164;
              float32x4_t v310 = v164;
              uint64_t v163 = v242;
              if (!v242) {
                goto LABEL_213;
              }
            }
            else if (v76[7])
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v299, 128, v161, v162);
              uint64_t v163 = v242;
              if (!v242) {
                goto LABEL_213;
              }
            }
            else
            {
              float32x4_t v301 = 0u;
              float32x4_t v302 = 0u;
              int8x16_t v299 = 0u;
              float32x4_t v300 = 0u;
              float32x4_t v307 = 0u;
              float32x4_t v308 = 0u;
              float32x4_t v309 = 0u;
              float32x4_t v310 = 0u;
              uint64_t v163 = v242;
              if (!v242) {
                goto LABEL_213;
              }
            }
          }
          if (v243)
          {
            uint64_t v172 = 0;
            unint64_t v173 = (unint64_t)v240 << 7;
            uint64_t v174 = 16 * v241;
            unsigned int v175 = &v247.i8[v173 + v174];
            uint64_t v176 = v238;
            uint64_t v177 = v239;
            unint64_t v178 = 16 * v243;
            if (v178 <= 1) {
              unint64_t v179 = 1;
            }
            else {
              unint64_t v179 = 16 * v243;
            }
            unint64_t v180 = v173 + v174;
            unsigned int v181 = &v247.i8[v173 + v174];
            if (v179) {
              BOOL v182 = (v179 - 1) >> 32 == 0;
            }
            else {
              BOOL v182 = 0;
            }
            char v183 = !v182;
            uint64_t v184 = v179 & 0xFFFFFFFE0;
            uint64_t v185 = v179 & 0xFFFFFFFF0;
            BOOL v186 = (char *)&v248 + v180;
            int8x8_t v187 = (long long *)(v238 + 16);
            unsigned int v188 = v175;
            uint64_t v189 = v238;
            do
            {
              unsigned int v190 = (char *)(v176 + v177 * v172);
              unsigned int v191 = &v175[128 * v172];
              if ((unint64_t)(&v181[128 * v172] - v190) < 0x20) {
                char v192 = 1;
              }
              else {
                char v192 = v183;
              }
              if (v192)
              {
                int v193 = 0;
                goto LABEL_210;
              }
              if (v179 >= 0x20)
              {
                uint64_t v199 = v187;
                int v200 = v186;
                uint64_t v201 = v179 & 0xFFFFFFFE0;
                do
                {
                  long long v202 = *v199;
                  *(v200 - 1) = *(v199 - 1);
                  _OWORD *v200 = v202;
                  v200 += 2;
                  v199 += 2;
                  v201 -= 32;
                }
                while (v201);
                if (v179 == v184) {
                  goto LABEL_193;
                }
                uint64_t v194 = v179 & 0xFFFFFFFE0;
                if ((v179 & 0x10) == 0)
                {
                  v190 += v184;
                  v191 += v184;
                  int v193 = v179 & 0xFFFFFFE0;
                  goto LABEL_210;
                }
              }
              else
              {
                uint64_t v194 = 0;
              }
              v191 += v185;
              unint64_t v195 = v194 - (v179 & 0xFFFFFFFF0);
              int v196 = (uint64_t *)(v189 + v194);
              unsigned int v197 = &v188[v194];
              do
              {
                uint64_t v198 = *v196++;
                *(void *)unsigned int v197 = v198;
                v197 += 8;
                v195 += 8;
              }
              while (v195);
              if (v179 == v185) {
                goto LABEL_193;
              }
              v190 += v185;
              int v193 = v179 & 0xFFFFFFF0;
LABEL_210:
              unsigned int v203 = v193 + 1;
              do
              {
                char v204 = *v190++;
                *v191++ = v204;
              }
              while (v178 > v203++);
LABEL_193:
              ++v172;
              v186 += 128;
              int8x8_t v187 = (long long *)((char *)v187 + v177);
              v189 += v177;
              v188 += 128;
            }
            while (v172 != v163);
          }
LABEL_213:
          AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((uint64_t)&v247, 128, (unint64_t)v236, v237, v244, v245);
LABEL_214:
          if (v233) {
            memcpy(v232, v80, 0x400uLL);
          }
          BOOL v21 = v38 == v222 >> 3;
          unsigned int v38 = v84;
          uint64_t result = v229;
        }
        while (!v21);
        BOOL v21 = v20++ == v212;
      }
      while (!v21);
    }
  }
  return result;
}

uint64_t AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, char a12)
{
  uint64_t v311 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v228 = a8;
  unsigned int v213 = a8 + a10 - 1;
  uint64_t v229 = a1;
  if (*(void *)(a1 + 168)) {
    int v17 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v17 = 0;
  }
  unsigned int v18 = a5 - 1;
  unsigned int v19 = a6 - 1;
  unsigned int v20 = a8 >> 3;
  unsigned int v212 = v213 >> 3;
  BOOL v21 = (v17 & 0xD00) == 0 || v17 == 768;
  int v22 = v17 & 0xE00;
  int v24 = !v21 && v22 != 1024;
  int v233 = v24;
  uint64_t result = a1;
  if (*(unsigned char *)(a1 + 232))
  {
    unsigned int v26 = *(unsigned __int8 *)(a1 + 255);
    unsigned int v27 = *(unsigned __int8 *)(a1 + 254);
    char v28 = __clz(v18);
    if (1 << v26 >= a6 || a5 >> v27)
    {
      if (!(a6 >> v26) && 1 << v27 < a5)
      {
        if (a6 < 2) {
          unsigned int v31 = 0;
        }
        else {
          unsigned int v31 = __clz(~(-1 << -(char)__clz(v19))) - 32;
        }
        v27 += v26 + v31;
        unsigned int v26 = -v31;
      }
    }
    else
    {
      unsigned int v29 = 32 - __clz(~(-1 << -v28));
      unsigned int v30 = v27 + v26;
      if (a5 < 2) {
        unsigned int v29 = 0;
      }
      unsigned int v26 = v30 - v29;
      unsigned int v27 = v29;
    }
    if (a5 < 2)
    {
      if (v27) {
        goto LABEL_27;
      }
    }
    else if (32 - __clz(~(-1 << -v28)) < v27)
    {
LABEL_27:
      BOOL v223 = 0;
LABEL_32:
      unsigned int v220 = v27 - 3;
      unsigned int v217 = v26 - 3;
      int v33 = -1 << *(unsigned char *)(*(void *)(a1 + 208) + 48);
      unsigned int v210 = (((~v33 + a5) & v33) + ~(-1 << v27)) >> v27;
      goto LABEL_33;
    }
    if (a6 < 2) {
      unsigned int v32 = 0;
    }
    else {
      unsigned int v32 = 32 - __clz(~(-1 << -(char)__clz(v19)));
    }
    BOOL v223 = v32 >= v26;
    goto LABEL_32;
  }
  BOOL v223 = 0;
  unsigned int v210 = 0;
  unsigned int v217 = 0;
  unsigned int v220 = 0;
LABEL_33:
  if (v20 <= v212)
  {
    unsigned int v222 = a7 + a9 - 1;
    unsigned int v209 = a7 >> 3;
    if (a7 >> 3 <= v222 >> 3)
    {
      unsigned int v231 = v18 >> 3;
      unsigned int v208 = v19 >> 3;
      int v230 = (v18 & 7) + 1;
      int v207 = (v19 & 7) + 1;
      int v206 = ~(-1 << v217);
      uint32x2_t v34 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0x700000007);
      int8x8_t v35 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v34, 3uLL))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x1000000010, v34));
      __int32 v218 = v35.i32[0] | v35.i32[1];
      BOOL v215 = v35.i32[1] != 0;
      int8x8_t v216 = v35;
      BOOL v214 = v35.i32[0] != 0;
      unsigned int v221 = a7;
      do
      {
        unsigned int v36 = (8 * v20) | 7;
        if (8 * v20 <= v228) {
          int v37 = v228;
        }
        else {
          int v37 = 8 * v20;
        }
        if (v213 < v36) {
          unsigned int v36 = v213;
        }
        int v219 = v37 - 8 * v20;
        int v227 = v36 - v37 + 1;
        unsigned int v38 = v209;
        int v39 = v207;
        if (v20 != v208) {
          int v39 = 8;
        }
        unsigned int v234 = v39;
        int v40 = v20 & v206;
        uint64_t v226 = a3 + (v37 - v228) * a11;
        do
        {
          unsigned int v41 = 8 * v38;
          unsigned int v42 = 8 * (v38 + 1) - 1;
          if (8 * v38 <= a7) {
            int v43 = a7;
          }
          else {
            int v43 = 8 * v38;
          }
          if (v222 < v42) {
            unsigned int v42 = v222;
          }
          int v44 = v42 - v43 + 1;
          if (v38 == v231) {
            unsigned int v45 = v230;
          }
          else {
            unsigned int v45 = 8;
          }
          BOOL v46 = 1;
          if (8 * v20 >= v228 && v41 >= a7)
          {
            int v47 = v230;
            if (v38 != v231) {
              int v47 = 8;
            }
            BOOL v46 = v44 != v47 || v227 != v234;
          }
          if (v223)
          {
            if (v220 | v217)
            {
              int v49 = 0;
              uint64_t v50 = 0;
              int v51 = 1;
              BOOL v52 = v220 != 0;
              BOOL v53 = v217 != 0;
              unsigned int v54 = v220;
              unsigned int v55 = v217;
              do
              {
                --v54;
                if (v52) {
                  v50 |= (unint64_t)(v38 & ~(-1 << v220) & v51) << v49++;
                }
                else {
                  unsigned int v54 = 0;
                }
                --v55;
                if (v53) {
                  v50 |= (unint64_t)(v40 & v51) << v49++;
                }
                else {
                  unsigned int v55 = 0;
                }
                v51 *= 2;
                --v49;
                BOOL v53 = v55 != 0;
                BOOL v52 = v54 != 0;
              }
              while (v55 | v54);
            }
            else
            {
              uint64_t v50 = 0;
            }
            uint64_t v63 = *(void *)(result + 320) * ((v38 >> v220) + (v20 >> v217) * v210) + (v50 << 10);
          }
          else
          {
            if (v218)
            {
              int v56 = 0;
              uint64_t v57 = 0;
              int v58 = 1;
              BOOL v59 = v215;
              BOOL v60 = v214;
              __int32 v61 = v216.i32[1];
              __int32 v62 = v216.i32[0];
              do
              {
                --v61;
                if (v59) {
                  v57 |= (unint64_t)(v58 & v38) << v56++;
                }
                else {
                  __int32 v61 = 0;
                }
                --v62;
                if (v60) {
                  v57 |= (unint64_t)(v58 & v20) << v56++;
                }
                else {
                  __int32 v62 = 0;
                }
                v58 *= 2;
                --v56;
                BOOL v60 = v62 != 0;
                BOOL v59 = v61 != 0;
              }
              while (v62 | v61);
            }
            else
            {
              uint64_t v57 = 0;
            }
            uint64_t v63 = v57 << 10;
          }
          unsigned int v64 = *(_DWORD *)(result + 128) >> (*(unsigned char *)(result + 144) + a12);
          if (v64 <= 1) {
            unsigned int v64 = 1;
          }
          unsigned int v65 = v64 + 7;
          if (v65 < 0x10) {
            unsigned int v66 = 0;
          }
          else {
            unsigned int v66 = 32 - __clz(~(-1 << -(char)__clz((v65 >> 3) - 1)));
          }
          unsigned int v67 = *(_DWORD *)(result + 132) >> (*(unsigned char *)(result + 144) + a12);
          if (v67 <= 1) {
            unsigned int v67 = 1;
          }
          unsigned int v68 = v67 + 7;
          if (v68 < 0x10) {
            unsigned int v69 = 0;
          }
          else {
            unsigned int v69 = 32 - __clz(~(-1 << -(char)__clz((v68 >> 3) - 1)));
          }
          if (v69 | v66)
          {
            int v70 = 0;
            uint64_t v71 = 0;
            BOOL v72 = v66 != 0;
            BOOL v73 = v69 != 0;
            int v74 = 1;
            do
            {
              --v66;
              if (v72) {
                v71 |= (unint64_t)(v74 & v38) << v70++;
              }
              else {
                unsigned int v66 = 0;
              }
              --v69;
              if (v73) {
                v71 |= (unint64_t)(v74 & v20) << v70++;
              }
              else {
                unsigned int v69 = 0;
              }
              v74 *= 2;
              --v70;
              BOOL v73 = v69 != 0;
              BOOL v72 = v66 != 0;
            }
            while (v69 | v66);
          }
          else
          {
            uint64_t v71 = 0;
          }
          int v75 = v45 < 8 || v46;
          BOOL v76 = (char *)(a4 + 8 * v71);
          uint64_t v77 = (_OWORD *)(v226 + 16 * (v43 - a7));
          uint64_t v78 = (void *)(a2 + v63);
          if (v234 < 8) {
            int v79 = 1;
          }
          else {
            int v79 = v75;
          }
          unsigned int v232 = v78;
          if (v233)
          {
            uint64_t v80 = __dst;
            if (!v79) {
              goto LABEL_121;
            }
            uint64_t v81 = (char *)(a4 + 8 * v71);
            int v82 = v44;
            char v83 = v45;
            memcpy(__dst, v78, sizeof(__dst));
            unsigned int v41 = 8 * v38;
            LOBYTE(v45) = v83;
            int v44 = v82;
            BOOL v76 = v81;
            int v40 = v20 & v206;
            uint64_t result = v229;
          }
          else
          {
            uint64_t v80 = v78;
            if (!v79)
            {
LABEL_121:
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock(v77, a11, v80, v76, v45, v234);
              goto LABEL_122;
            }
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE15ELj4ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = result;
          int v236 = v80;
          unsigned __int8 v244 = v45;
          unsigned __int8 v245 = v234;
          unsigned int v240 = v219;
          unsigned int v241 = v43 - v41;
          BOOL v237 = v76;
          uint64_t v238 = v77;
          uint64_t v239 = a11;
          unsigned int v242 = v227;
          unsigned int v243 = v44;
          if (v46)
          {
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(result + 8) + 7384), block);
LABEL_122:
            a7 = v221;
            unsigned int v84 = v38 + 1;
            goto LABEL_214;
          }
          unsigned int v85 = *v76;
          if (v85 == 127)
          {
            float32x4_t v88 = *((float32x4_t *)v80 + 1);
            float32x4_t v89 = *((float32x4_t *)v80 + 2);
            float32x4_t v90 = *((float32x4_t *)v80 + 3);
            float32x4_t v91 = *((float32x4_t *)v80 + 4);
            float32x4_t v92 = *((float32x4_t *)v80 + 5);
            float32x4_t v93 = *((float32x4_t *)v80 + 6);
            float32x4_t v94 = *((float32x4_t *)v80 + 7);
            int8x16_t v247 = *(int8x16_t *)v80;
            float32x4_t v248 = v88;
            float32x4_t v249 = v91;
            float32x4_t v250 = v92;
            float32x4_t v255 = v89;
            float32x4_t v256 = v90;
            float32x4_t v257 = v93;
            float32x4_t v258 = v94;
            uint64_t v86 = 128;
          }
          else if (v85 == 3)
          {
            float32x4_t v87 = vld1q_dup_f32((const float *)v80);
            int8x16_t v247 = (int8x16_t)v87;
            float32x4_t v248 = v87;
            float32x4_t v249 = v87;
            float32x4_t v250 = v87;
            float32x4_t v255 = v87;
            float32x4_t v256 = v87;
            float32x4_t v257 = v87;
            float32x4_t v258 = v87;
            uint64_t v86 = 4;
          }
          else if (*v76)
          {
            uint64_t v86 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v247, 128, (uint64_t)v80, v85);
          }
          else
          {
            uint64_t v86 = 0;
            float32x4_t v250 = 0u;
            float32x4_t v249 = 0u;
            float32x4_t v248 = 0u;
            int8x16_t v247 = 0u;
            float32x4_t v255 = 0u;
            float32x4_t v256 = 0u;
            float32x4_t v257 = 0u;
            float32x4_t v258 = 0u;
          }
          uint64_t v95 = (uint64_t)v80 + v86;
          unsigned int v96 = v76[1];
          if (v96 == 127)
          {
            float32x4_t v99 = *(float32x4_t *)(v95 + 16);
            float32x4_t v100 = *(float32x4_t *)(v95 + 32);
            float32x4_t v101 = *(float32x4_t *)(v95 + 48);
            float32x4_t v102 = *(float32x4_t *)(v95 + 64);
            float32x4_t v103 = *(float32x4_t *)(v95 + 80);
            float32x4_t v104 = *(float32x4_t *)(v95 + 96);
            float32x4_t v105 = *(float32x4_t *)(v95 + 112);
            int8x16_t v263 = *(int8x16_t *)v95;
            float32x4_t v264 = v99;
            float32x4_t v265 = v102;
            float32x4_t v266 = v103;
            float32x4_t v271 = v100;
            float32x4_t v272 = v101;
            float32x4_t v273 = v104;
            float32x4_t v274 = v105;
            uint64_t v97 = 128;
          }
          else if (v96 == 3)
          {
            float32x4_t v98 = vld1q_dup_f32((const float *)v95);
            int8x16_t v263 = (int8x16_t)v98;
            float32x4_t v264 = v98;
            float32x4_t v265 = v98;
            float32x4_t v266 = v98;
            float32x4_t v271 = v98;
            float32x4_t v272 = v98;
            float32x4_t v273 = v98;
            float32x4_t v274 = v98;
            uint64_t v97 = 4;
          }
          else if (v76[1])
          {
            uint64_t v97 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v263, 128, v95, v96);
          }
          else
          {
            uint64_t v97 = 0;
            float32x4_t v265 = 0u;
            float32x4_t v266 = 0u;
            int8x16_t v263 = 0u;
            float32x4_t v264 = 0u;
            float32x4_t v271 = 0u;
            float32x4_t v272 = 0u;
            float32x4_t v273 = 0u;
            float32x4_t v274 = 0u;
          }
          uint64_t v106 = v95 + v97;
          unsigned int v107 = v76[2];
          if (v107 == 127)
          {
            float32x4_t v110 = *(float32x4_t *)(v106 + 16);
            float32x4_t v111 = *(float32x4_t *)(v106 + 32);
            float32x4_t v112 = *(float32x4_t *)(v106 + 48);
            float32x4_t v113 = *(float32x4_t *)(v106 + 64);
            float32x4_t v114 = *(float32x4_t *)(v106 + 80);
            float32x4_t v115 = *(float32x4_t *)(v106 + 96);
            float32x4_t v116 = *(float32x4_t *)(v106 + 112);
            int8x16_t v251 = *(int8x16_t *)v106;
            float32x4_t v252 = v110;
            float32x4_t v253 = v113;
            float32x4_t v254 = v114;
            float32x4_t v259 = v111;
            float32x4_t v260 = v112;
            float32x4_t v261 = v115;
            float32x4_t v262 = v116;
            uint64_t v108 = 128;
          }
          else if (v107 == 3)
          {
            float32x4_t v109 = vld1q_dup_f32((const float *)v106);
            int8x16_t v251 = (int8x16_t)v109;
            float32x4_t v252 = v109;
            float32x4_t v253 = v109;
            float32x4_t v254 = v109;
            float32x4_t v259 = v109;
            float32x4_t v260 = v109;
            float32x4_t v261 = v109;
            float32x4_t v262 = v109;
            uint64_t v108 = 4;
          }
          else if (v76[2])
          {
            uint64_t v108 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v251, 128, v106, v107);
          }
          else
          {
            uint64_t v108 = 0;
            float32x4_t v253 = 0u;
            float32x4_t v254 = 0u;
            int8x16_t v251 = 0u;
            float32x4_t v252 = 0u;
            float32x4_t v259 = 0u;
            float32x4_t v260 = 0u;
            float32x4_t v261 = 0u;
            float32x4_t v262 = 0u;
          }
          uint64_t v117 = v106 + v108;
          unsigned int v118 = v76[3];
          if (v118 == 127)
          {
            float32x4_t v121 = *(float32x4_t *)(v117 + 16);
            float32x4_t v122 = *(float32x4_t *)(v117 + 32);
            float32x4_t v123 = *(float32x4_t *)(v117 + 48);
            float32x4_t v124 = *(float32x4_t *)(v117 + 64);
            float32x4_t v125 = *(float32x4_t *)(v117 + 80);
            float32x4_t v126 = *(float32x4_t *)(v117 + 96);
            float32x4_t v127 = *(float32x4_t *)(v117 + 112);
            int8x16_t v267 = *(int8x16_t *)v117;
            float32x4_t v268 = v121;
            float32x4_t v269 = v124;
            float32x4_t v270 = v125;
            float32x4_t v275 = v122;
            float32x4_t v276 = v123;
            float32x4_t v277 = v126;
            float32x4_t v278 = v127;
            uint64_t v119 = 128;
          }
          else if (v118 == 3)
          {
            float32x4_t v120 = vld1q_dup_f32((const float *)v117);
            int8x16_t v267 = (int8x16_t)v120;
            float32x4_t v268 = v120;
            float32x4_t v269 = v120;
            float32x4_t v270 = v120;
            float32x4_t v275 = v120;
            float32x4_t v276 = v120;
            float32x4_t v277 = v120;
            float32x4_t v278 = v120;
            uint64_t v119 = 4;
          }
          else if (v76[3])
          {
            uint64_t v119 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v267, 128, v117, v118);
          }
          else
          {
            uint64_t v119 = 0;
            float32x4_t v269 = 0u;
            float32x4_t v270 = 0u;
            int8x16_t v267 = 0u;
            float32x4_t v268 = 0u;
            float32x4_t v275 = 0u;
            float32x4_t v276 = 0u;
            float32x4_t v277 = 0u;
            float32x4_t v278 = 0u;
          }
          uint64_t v128 = v117 + v119;
          unsigned int v129 = v76[4];
          if (v129 == 127)
          {
            float32x4_t v132 = *(float32x4_t *)(v128 + 16);
            float32x4_t v133 = *(float32x4_t *)(v128 + 32);
            float32x4_t v134 = *(float32x4_t *)(v128 + 48);
            float32x4_t v135 = *(float32x4_t *)(v128 + 64);
            float32x4_t v136 = *(float32x4_t *)(v128 + 80);
            float32x4_t v137 = *(float32x4_t *)(v128 + 96);
            float32x4_t v138 = *(float32x4_t *)(v128 + 112);
            int8x16_t v279 = *(int8x16_t *)v128;
            float32x4_t v280 = v132;
            float32x4_t v281 = v135;
            float32x4_t v282 = v136;
            float32x4_t v287 = v133;
            float32x4_t v288 = v134;
            float32x4_t v289 = v137;
            float32x4_t v290 = v138;
            uint64_t v130 = 128;
          }
          else if (v129 == 3)
          {
            float32x4_t v131 = vld1q_dup_f32((const float *)v128);
            int8x16_t v279 = (int8x16_t)v131;
            float32x4_t v280 = v131;
            float32x4_t v281 = v131;
            float32x4_t v282 = v131;
            float32x4_t v287 = v131;
            float32x4_t v288 = v131;
            float32x4_t v289 = v131;
            float32x4_t v290 = v131;
            uint64_t v130 = 4;
          }
          else if (v76[4])
          {
            uint64_t v130 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v279, 128, v128, v129);
          }
          else
          {
            uint64_t v130 = 0;
            float32x4_t v281 = 0u;
            float32x4_t v282 = 0u;
            int8x16_t v279 = 0u;
            float32x4_t v280 = 0u;
            float32x4_t v287 = 0u;
            float32x4_t v288 = 0u;
            float32x4_t v289 = 0u;
            float32x4_t v290 = 0u;
          }
          uint64_t v139 = v128 + v130;
          unsigned int v140 = v76[5];
          if (v140 == 127)
          {
            float32x4_t v143 = *(float32x4_t *)(v139 + 16);
            float32x4_t v144 = *(float32x4_t *)(v139 + 32);
            float32x4_t v145 = *(float32x4_t *)(v139 + 48);
            float32x4_t v146 = *(float32x4_t *)(v139 + 64);
            float32x4_t v147 = *(float32x4_t *)(v139 + 80);
            float32x4_t v148 = *(float32x4_t *)(v139 + 96);
            float32x4_t v149 = *(float32x4_t *)(v139 + 112);
            int8x16_t v295 = *(int8x16_t *)v139;
            float32x4_t v296 = v143;
            float32x4_t v297 = v146;
            float32x4_t v298 = v147;
            float32x4_t v303 = v144;
            float32x4_t v304 = v145;
            float32x4_t v305 = v148;
            float32x4_t v306 = v149;
            uint64_t v141 = 128;
          }
          else if (v140 == 3)
          {
            float32x4_t v142 = vld1q_dup_f32((const float *)v139);
            int8x16_t v295 = (int8x16_t)v142;
            float32x4_t v296 = v142;
            float32x4_t v297 = v142;
            float32x4_t v298 = v142;
            float32x4_t v303 = v142;
            float32x4_t v304 = v142;
            float32x4_t v305 = v142;
            float32x4_t v306 = v142;
            uint64_t v141 = 4;
          }
          else if (v76[5])
          {
            uint64_t v141 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v295, 128, v139, v140);
          }
          else
          {
            uint64_t v141 = 0;
            float32x4_t v297 = 0u;
            float32x4_t v298 = 0u;
            int8x16_t v295 = 0u;
            float32x4_t v296 = 0u;
            float32x4_t v303 = 0u;
            float32x4_t v304 = 0u;
            float32x4_t v305 = 0u;
            float32x4_t v306 = 0u;
          }
          uint64_t v150 = v139 + v141;
          unsigned int v151 = v76[6];
          if (v151 == 127)
          {
            float32x4_t v154 = *(float32x4_t *)(v150 + 16);
            float32x4_t v155 = *(float32x4_t *)(v150 + 32);
            float32x4_t v156 = *(float32x4_t *)(v150 + 48);
            float32x4_t v157 = *(float32x4_t *)(v150 + 64);
            float32x4_t v158 = *(float32x4_t *)(v150 + 80);
            float32x4_t v159 = *(float32x4_t *)(v150 + 96);
            float32x4_t v160 = *(float32x4_t *)(v150 + 112);
            int8x16_t v283 = *(int8x16_t *)v150;
            float32x4_t v284 = v154;
            float32x4_t v285 = v157;
            float32x4_t v286 = v158;
            float32x4_t v291 = v155;
            float32x4_t v292 = v156;
            float32x4_t v293 = v159;
            float32x4_t v294 = v160;
            uint64_t v152 = 128;
          }
          else if (v151 == 3)
          {
            float32x4_t v153 = vld1q_dup_f32((const float *)v150);
            int8x16_t v283 = (int8x16_t)v153;
            float32x4_t v284 = v153;
            float32x4_t v285 = v153;
            float32x4_t v286 = v153;
            float32x4_t v291 = v153;
            float32x4_t v292 = v153;
            float32x4_t v293 = v153;
            float32x4_t v294 = v153;
            uint64_t v152 = 4;
          }
          else if (v76[6])
          {
            uint64_t v152 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v283, 128, v150, v151);
          }
          else
          {
            uint64_t v152 = 0;
            float32x4_t v285 = 0u;
            float32x4_t v286 = 0u;
            int8x16_t v283 = 0u;
            float32x4_t v284 = 0u;
            float32x4_t v291 = 0u;
            float32x4_t v292 = 0u;
            float32x4_t v293 = 0u;
            float32x4_t v294 = 0u;
          }
          uint64_t v161 = v150 + v152;
          unsigned int v162 = v76[7];
          if (v162 == 127)
          {
            float32x4_t v165 = *(float32x4_t *)(v161 + 16);
            float32x4_t v166 = *(float32x4_t *)(v161 + 32);
            float32x4_t v167 = *(float32x4_t *)(v161 + 48);
            float32x4_t v168 = *(float32x4_t *)(v161 + 64);
            float32x4_t v169 = *(float32x4_t *)(v161 + 80);
            float32x4_t v170 = *(float32x4_t *)(v161 + 96);
            float32x4_t v171 = *(float32x4_t *)(v161 + 112);
            int8x16_t v299 = *(int8x16_t *)v161;
            float32x4_t v300 = v165;
            float32x4_t v301 = v168;
            float32x4_t v302 = v169;
            float32x4_t v307 = v166;
            float32x4_t v308 = v167;
            float32x4_t v309 = v170;
            float32x4_t v310 = v171;
            a7 = v221;
            unsigned int v84 = v38 + 1;
            uint64_t v163 = v242;
            if (!v242) {
              goto LABEL_213;
            }
          }
          else
          {
            a7 = v221;
            unsigned int v84 = v38 + 1;
            if (v162 == 3)
            {
              float32x4_t v164 = vld1q_dup_f32((const float *)v161);
              int8x16_t v299 = (int8x16_t)v164;
              float32x4_t v300 = v164;
              float32x4_t v301 = v164;
              float32x4_t v302 = v164;
              float32x4_t v307 = v164;
              float32x4_t v308 = v164;
              float32x4_t v309 = v164;
              float32x4_t v310 = v164;
              uint64_t v163 = v242;
              if (!v242) {
                goto LABEL_213;
              }
            }
            else if (v76[7])
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v299, 128, v161, v162);
              uint64_t v163 = v242;
              if (!v242) {
                goto LABEL_213;
              }
            }
            else
            {
              float32x4_t v301 = 0u;
              float32x4_t v302 = 0u;
              int8x16_t v299 = 0u;
              float32x4_t v300 = 0u;
              float32x4_t v307 = 0u;
              float32x4_t v308 = 0u;
              float32x4_t v309 = 0u;
              float32x4_t v310 = 0u;
              uint64_t v163 = v242;
              if (!v242) {
                goto LABEL_213;
              }
            }
          }
          if (v243)
          {
            uint64_t v172 = 0;
            unint64_t v173 = (unint64_t)v240 << 7;
            uint64_t v174 = 16 * v241;
            unsigned int v175 = &v247.i8[v173 + v174];
            uint64_t v176 = v238;
            uint64_t v177 = v239;
            unint64_t v178 = 16 * v243;
            if (v178 <= 1) {
              unint64_t v179 = 1;
            }
            else {
              unint64_t v179 = 16 * v243;
            }
            unint64_t v180 = v173 + v174;
            unsigned int v181 = &v247.i8[v173 + v174];
            if (v179) {
              BOOL v182 = (v179 - 1) >> 32 == 0;
            }
            else {
              BOOL v182 = 0;
            }
            char v183 = !v182;
            uint64_t v184 = v179 & 0xFFFFFFFE0;
            uint64_t v185 = v179 & 0xFFFFFFFF0;
            BOOL v186 = (char *)&v248 + v180;
            int8x8_t v187 = v238 + 1;
            unsigned int v188 = v175;
            uint64_t v189 = v238;
            do
            {
              unsigned int v190 = (char *)v176 + v177 * v172;
              unsigned int v191 = &v175[128 * v172];
              if ((unint64_t)(&v181[128 * v172] - v190) < 0x20) {
                char v192 = 1;
              }
              else {
                char v192 = v183;
              }
              if (v192)
              {
                int v193 = 0;
                goto LABEL_210;
              }
              if (v179 >= 0x20)
              {
                uint64_t v199 = v187;
                int v200 = v186;
                uint64_t v201 = v179 & 0xFFFFFFFE0;
                do
                {
                  long long v202 = *v199;
                  *(v200 - 1) = *(v199 - 1);
                  _OWORD *v200 = v202;
                  v200 += 2;
                  v199 += 2;
                  v201 -= 32;
                }
                while (v201);
                if (v179 == v184) {
                  goto LABEL_193;
                }
                uint64_t v194 = v179 & 0xFFFFFFFE0;
                if ((v179 & 0x10) == 0)
                {
                  v190 += v184;
                  v191 += v184;
                  int v193 = v179 & 0xFFFFFFE0;
                  goto LABEL_210;
                }
              }
              else
              {
                uint64_t v194 = 0;
              }
              v191 += v185;
              unint64_t v195 = v194 - (v179 & 0xFFFFFFFF0);
              int v196 = (uint64_t *)((char *)v189 + v194);
              unsigned int v197 = &v188[v194];
              do
              {
                uint64_t v198 = *v196++;
                *(void *)unsigned int v197 = v198;
                v197 += 8;
                v195 += 8;
              }
              while (v195);
              if (v179 == v185) {
                goto LABEL_193;
              }
              v190 += v185;
              int v193 = v179 & 0xFFFFFFF0;
LABEL_210:
              unsigned int v203 = v193 + 1;
              do
              {
                char v204 = *v190++;
                *v191++ = v204;
              }
              while (v178 > v203++);
LABEL_193:
              ++v172;
              v186 += 128;
              int8x8_t v187 = (long long *)((char *)v187 + v177);
              uint64_t v189 = (_OWORD *)((char *)v189 + v177);
              v188 += 128;
            }
            while (v172 != v163);
          }
LABEL_213:
          AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock(&v247, 128, v236, v237, v244, v245);
LABEL_214:
          if (v233) {
            memcpy(v232, v80, 0x400uLL);
          }
          BOOL v21 = v38 == v222 >> 3;
          unsigned int v38 = v84;
          uint64_t result = v229;
        }
        while (!v21);
        BOOL v21 = v20++ == v212;
      }
      while (!v21);
    }
  }
  return result;
}

void *AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, int a12)
{
  uint64_t v311 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  uint64_t v17 = a1;
  unsigned int v228 = a8;
  unsigned int v18 = a8 >> 3;
  unsigned int v212 = a8 + a10 - 1;
  unsigned int v214 = v212 >> 3;
  unsigned int v19 = *(unsigned __int8 *)(*(void *)(a1 + 208) + 88);
  unsigned int v20 = *(_DWORD *)(a1 + 112);
  uint64_t v229 = v17;
  if (*(void *)(v17 + 168))
  {
    __int16 CacheMode = IOSurfaceGetCacheMode();
    uint64_t v17 = v229;
    int v22 = CacheMode & 0xF00;
  }
  else
  {
    int v22 = 0;
  }
  BOOL v23 = (v22 & 0xD00) == 0 || v22 == 768;
  int v24 = v22 & 0xE00;
  int v26 = !v23 && v24 != 1024;
  int v233 = v26;
  uint64_t result = (void *)AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::isLevelTiled(v17, *(_DWORD *)(v17 + 144) + a12);
  uint64_t v28 = v229;
  int v222 = (int)result;
  if (v18 <= v214)
  {
    unsigned int v221 = a7 + a9 - 1;
    unsigned int v211 = a7 >> 3;
    if (a7 >> 3 <= v221 >> 3)
    {
      unsigned int v208 = a5 - 1;
      unsigned int v231 = (a5 - 1) >> 3;
      int v230 = ((a5 - 1) & 7) + 1;
      int v209 = ((a6 - 1) & 7) + 1;
      unsigned int v210 = (a6 - 1) >> 3;
      uint32x2_t v29 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0x700000007);
      int8x8_t v30 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v29, 3uLL))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x1000000010, v29));
      __int32 v219 = v30.i32[0] | v30.i32[1];
      BOOL v217 = v30.i32[1] != 0;
      int8x8_t v218 = v30;
      BOOL v216 = v30.i32[0] != 0;
      unint64_t v207 = 8 * v20 * (unint64_t)v19;
      unsigned int v220 = a7;
      do
      {
        unsigned int v31 = (8 * v18) | 7;
        if (8 * v18 <= v228) {
          int v32 = v228;
        }
        else {
          int v32 = 8 * v18;
        }
        unsigned int v33 = v211;
        if (v212 < v31) {
          unsigned int v31 = v212;
        }
        unsigned int v227 = 8 * v18;
        int v215 = v32 - 8 * v18;
        int v226 = v31 - v32 + 1;
        int v34 = v209;
        if (v18 != v210) {
          int v34 = 8;
        }
        unsigned int v234 = v34;
        uint64_t v225 = a3 + (v32 - v228) * a11;
        do
        {
          unsigned int v35 = 8 * v33;
          unsigned int v36 = 8 * (v33 + 1) - 1;
          if (8 * v33 <= a7) {
            int v37 = a7;
          }
          else {
            int v37 = 8 * v33;
          }
          if (v221 < v36) {
            unsigned int v36 = v221;
          }
          int v38 = v36 - v37 + 1;
          if (v33 == v231) {
            unsigned int v39 = v230;
          }
          else {
            unsigned int v39 = 8;
          }
          BOOL v40 = 1;
          if (v227 >= v228 && v35 >= a7)
          {
            int v41 = v230;
            if (v33 != v231) {
              int v41 = 8;
            }
            BOOL v40 = v38 != v41 || v226 != v234;
          }
          if (v222)
          {
            unsigned int v62 = 0;
            uint64_t v63 = v207 >> (*(unsigned char *)(v28 + 57) != 0);
            char v64 = 1;
            if (v63 > 127)
            {
              if (v63 > 511)
              {
                if (v63 == 512)
                {
                  char v64 = 0;
                  char v65 = 0;
                  unsigned int v62 = 16;
                  unsigned int v66 = 16;
                }
                else
                {
                  char v65 = 1;
                  unsigned int v66 = 0;
                  if (v63 == 1024)
                  {
                    char v64 = 0;
                    unsigned int v66 = 8;
                    unsigned int v62 = 16;
                  }
                }
              }
              else if (v63 == 128)
              {
                char v64 = 0;
                char v65 = 0;
                unsigned int v62 = 32;
                unsigned int v66 = 32;
              }
              else
              {
                char v65 = 1;
                unsigned int v66 = 0;
                if (v63 == 256)
                {
                  char v64 = 0;
                  char v65 = 0;
                  unsigned int v66 = 16;
                  unsigned int v62 = 32;
                }
              }
            }
            else
            {
              char v65 = 1;
              unsigned int v66 = 0;
              switch(v63)
              {
                case 4:
                  char v64 = 0;
                  char v65 = 0;
                  unsigned int v66 = 128;
                  unsigned int v62 = 256;
                  break;
                case 5:
                case 6:
                case 7:
                case 9:
                case 10:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 17:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                  break;
                case 8:
                  char v64 = 0;
                  char v65 = 0;
                  unsigned int v62 = 128;
                  unsigned int v66 = 128;
                  break;
                case 16:
                  char v64 = 0;
                  char v65 = 0;
                  unsigned int v66 = 64;
                  unsigned int v62 = 128;
                  break;
                case 32:
                  char v64 = 0;
                  char v65 = 0;
                  unsigned int v62 = 64;
                  unsigned int v66 = 64;
                  break;
                default:
                  if (v63 == 64)
                  {
                    char v64 = 0;
                    char v65 = 0;
                    unsigned int v66 = 32;
                    unsigned int v62 = 64;
                  }
                  break;
              }
            }
            unsigned int v196 = (v62 >> 3) - 1;
            if (v64) {
              unsigned int v197 = 0;
            }
            else {
              unsigned int v197 = 32 - __clz(~(-1 << -(char)__clz(v196)));
            }
            unsigned int v198 = (v66 >> 3) - 1;
            if (v65)
            {
              unsigned int v199 = 0;
              if (v197) {
                goto LABEL_206;
              }
            }
            else
            {
              unsigned int v199 = 32 - __clz(~(-1 << -(char)__clz(v198)));
              if (v199 | v197)
              {
LABEL_206:
                int v200 = 0;
                uint64_t v201 = 0;
                int v202 = v33 & v196;
                int v203 = v18 & v198;
                BOOL v204 = v197 != 0;
                BOOL v205 = v199 != 0;
                int v206 = 1;
                do
                {
                  --v197;
                  if (v204) {
                    v201 |= (unint64_t)(v206 & v202) << v200++;
                  }
                  else {
                    unsigned int v197 = 0;
                  }
                  --v199;
                  if (v205) {
                    v201 |= (unint64_t)(v206 & v203) << v200++;
                  }
                  else {
                    unsigned int v199 = 0;
                  }
                  v206 *= 2;
                  --v200;
                  BOOL v205 = v199 != 0;
                  BOOL v204 = v197 != 0;
                }
                while (v199 | v197);
                goto LABEL_218;
              }
            }
            uint64_t v201 = 0;
LABEL_218:
            unint64_t v50 = ((unint64_t)(v35 / v62 + v227 / v66 * ((v62 + v208) / v62)) << 14) + (v201 << 10);
            goto LABEL_58;
          }
          if (v219)
          {
            int v43 = 0;
            uint64_t v44 = 0;
            int v45 = 1;
            BOOL v46 = v217;
            BOOL v47 = v216;
            __int32 v48 = v218.i32[1];
            __int32 v49 = v218.i32[0];
            do
            {
              --v48;
              if (v46) {
                v44 |= (unint64_t)(v45 & v33) << v43++;
              }
              else {
                __int32 v48 = 0;
              }
              --v49;
              if (v47) {
                v44 |= (unint64_t)(v45 & v18) << v43++;
              }
              else {
                __int32 v49 = 0;
              }
              v45 *= 2;
              --v43;
              BOOL v47 = v49 != 0;
              BOOL v46 = v48 != 0;
            }
            while (v49 | v48);
          }
          else
          {
            uint64_t v44 = 0;
          }
          unint64_t v50 = v44 << 10;
LABEL_58:
          unsigned int v51 = *(_DWORD *)(v28 + 128) >> (*(unsigned char *)(v28 + 144) + a12);
          if (v51 <= 1) {
            unsigned int v51 = 1;
          }
          unsigned int v52 = v51 + 7;
          if (v52 < 0x10) {
            unsigned int v53 = 0;
          }
          else {
            unsigned int v53 = 32 - __clz(~(-1 << -(char)__clz((v52 >> 3) - 1)));
          }
          unsigned int v54 = *(_DWORD *)(v28 + 132) >> (*(unsigned char *)(v28 + 144) + a12);
          if (v54 <= 1) {
            unsigned int v54 = 1;
          }
          unsigned int v55 = v54 + 7;
          if (v55 < 0x10)
          {
            unsigned int v56 = 0;
            if (!v53)
            {
LABEL_80:
              uint64_t v58 = 0;
              goto LABEL_81;
            }
          }
          else
          {
            unsigned int v56 = 32 - __clz(~(-1 << -(char)__clz((v55 >> 3) - 1)));
            if (!(v56 | v53)) {
              goto LABEL_80;
            }
          }
          int v57 = 0;
          uint64_t v58 = 0;
          BOOL v59 = v53 != 0;
          BOOL v60 = v56 != 0;
          int v61 = 1;
          do
          {
            --v53;
            if (v59) {
              v58 |= (unint64_t)(v61 & v33) << v57++;
            }
            else {
              unsigned int v53 = 0;
            }
            --v56;
            if (v60) {
              v58 |= (unint64_t)(v61 & v18) << v57++;
            }
            else {
              unsigned int v56 = 0;
            }
            v61 *= 2;
            --v57;
            BOOL v60 = v56 != 0;
            BOOL v59 = v53 != 0;
          }
          while (v56 | v53);
LABEL_81:
          int v67 = v39 < 8 || v40;
          unsigned int v68 = (char *)(a4 + 8 * v58);
          uint64_t v69 = v225 + 16 * (v37 - a7);
          int v70 = (float32x4_t *)(a2 + v50);
          if (v234 < 8) {
            int v71 = 1;
          }
          else {
            int v71 = v67;
          }
          unsigned int v232 = v70;
          if (v233)
          {
            BOOL v72 = (float32x4_t *)__dst;
            if (!v71) {
              goto LABEL_93;
            }
            char v73 = v39;
            int v74 = v37;
            memcpy(__dst, v70, sizeof(__dst));
            unsigned int v35 = 8 * v33;
            int v37 = v74;
            LOBYTE(v39) = v73;
            uint64_t v28 = v229;
          }
          else
          {
            BOOL v72 = v70;
            if (!v71)
            {
LABEL_93:
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock(v69, a11, (unint64_t)v72, v68, v39, v234);
              goto LABEL_94;
            }
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE15ELj4ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = v28;
          int v236 = v72;
          unsigned __int8 v244 = v39;
          unsigned __int8 v245 = v234;
          unsigned int v240 = v215;
          unsigned int v241 = v37 - v35;
          BOOL v237 = v68;
          uint64_t v238 = v69;
          uint64_t v239 = a11;
          unsigned int v242 = v226;
          unsigned int v243 = v38;
          if (v40)
          {
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(v28 + 8) + 7384), block);
LABEL_94:
            a7 = v220;
            goto LABEL_186;
          }
          unsigned int v75 = *v68;
          a7 = v220;
          if (v75 == 127)
          {
            float32x4_t v78 = v72[1];
            float32x4_t v79 = v72[2];
            float32x4_t v80 = v72[3];
            float32x4_t v81 = v72[4];
            float32x4_t v82 = v72[5];
            float32x4_t v83 = v72[6];
            float32x4_t v84 = v72[7];
            int8x16_t v247 = *(int8x16_t *)v72;
            float32x4_t v248 = v78;
            float32x4_t v249 = v81;
            float32x4_t v250 = v82;
            float32x4_t v255 = v79;
            float32x4_t v256 = v80;
            float32x4_t v257 = v83;
            float32x4_t v258 = v84;
            uint64_t v76 = 128;
          }
          else if (v75 == 3)
          {
            float32x4_t v77 = vld1q_dup_f32(v72->f32);
            int8x16_t v247 = (int8x16_t)v77;
            float32x4_t v248 = v77;
            float32x4_t v249 = v77;
            float32x4_t v250 = v77;
            float32x4_t v255 = v77;
            float32x4_t v256 = v77;
            float32x4_t v257 = v77;
            float32x4_t v258 = v77;
            uint64_t v76 = 4;
          }
          else if (*v68)
          {
            uint64_t v76 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v247, 128, (uint64_t)v72, v75);
          }
          else
          {
            uint64_t v76 = 0;
            float32x4_t v250 = 0u;
            float32x4_t v249 = 0u;
            float32x4_t v248 = 0u;
            int8x16_t v247 = 0u;
            float32x4_t v255 = 0u;
            float32x4_t v256 = 0u;
            float32x4_t v257 = 0u;
            float32x4_t v258 = 0u;
          }
          uint64_t v85 = (uint64_t)v72 + v76;
          unsigned int v86 = v68[1];
          if (v86 == 127)
          {
            float32x4_t v89 = *(float32x4_t *)(v85 + 16);
            float32x4_t v90 = *(float32x4_t *)(v85 + 32);
            float32x4_t v91 = *(float32x4_t *)(v85 + 48);
            float32x4_t v92 = *(float32x4_t *)(v85 + 64);
            float32x4_t v93 = *(float32x4_t *)(v85 + 80);
            float32x4_t v94 = *(float32x4_t *)(v85 + 96);
            float32x4_t v95 = *(float32x4_t *)(v85 + 112);
            int8x16_t v263 = *(int8x16_t *)v85;
            float32x4_t v264 = v89;
            float32x4_t v265 = v92;
            float32x4_t v266 = v93;
            float32x4_t v271 = v90;
            float32x4_t v272 = v91;
            float32x4_t v273 = v94;
            float32x4_t v274 = v95;
            uint64_t v87 = 128;
          }
          else if (v86 == 3)
          {
            float32x4_t v88 = vld1q_dup_f32((const float *)v85);
            int8x16_t v263 = (int8x16_t)v88;
            float32x4_t v264 = v88;
            float32x4_t v265 = v88;
            float32x4_t v266 = v88;
            float32x4_t v271 = v88;
            float32x4_t v272 = v88;
            float32x4_t v273 = v88;
            float32x4_t v274 = v88;
            uint64_t v87 = 4;
          }
          else if (v68[1])
          {
            uint64_t v87 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v263, 128, v85, v86);
          }
          else
          {
            uint64_t v87 = 0;
            float32x4_t v265 = 0u;
            float32x4_t v266 = 0u;
            int8x16_t v263 = 0u;
            float32x4_t v264 = 0u;
            float32x4_t v271 = 0u;
            float32x4_t v272 = 0u;
            float32x4_t v273 = 0u;
            float32x4_t v274 = 0u;
          }
          uint64_t v96 = v85 + v87;
          unsigned int v97 = v68[2];
          if (v97 == 127)
          {
            float32x4_t v100 = *(float32x4_t *)(v96 + 16);
            float32x4_t v101 = *(float32x4_t *)(v96 + 32);
            float32x4_t v102 = *(float32x4_t *)(v96 + 48);
            float32x4_t v103 = *(float32x4_t *)(v96 + 64);
            float32x4_t v104 = *(float32x4_t *)(v96 + 80);
            float32x4_t v105 = *(float32x4_t *)(v96 + 96);
            float32x4_t v106 = *(float32x4_t *)(v96 + 112);
            int8x16_t v251 = *(int8x16_t *)v96;
            float32x4_t v252 = v100;
            float32x4_t v253 = v103;
            float32x4_t v254 = v104;
            float32x4_t v259 = v101;
            float32x4_t v260 = v102;
            float32x4_t v261 = v105;
            float32x4_t v262 = v106;
            uint64_t v98 = 128;
          }
          else if (v97 == 3)
          {
            float32x4_t v99 = vld1q_dup_f32((const float *)v96);
            int8x16_t v251 = (int8x16_t)v99;
            float32x4_t v252 = v99;
            float32x4_t v253 = v99;
            float32x4_t v254 = v99;
            float32x4_t v259 = v99;
            float32x4_t v260 = v99;
            float32x4_t v261 = v99;
            float32x4_t v262 = v99;
            uint64_t v98 = 4;
          }
          else if (v68[2])
          {
            uint64_t v98 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v251, 128, v96, v97);
          }
          else
          {
            uint64_t v98 = 0;
            float32x4_t v253 = 0u;
            float32x4_t v254 = 0u;
            int8x16_t v251 = 0u;
            float32x4_t v252 = 0u;
            float32x4_t v259 = 0u;
            float32x4_t v260 = 0u;
            float32x4_t v261 = 0u;
            float32x4_t v262 = 0u;
          }
          uint64_t v107 = v96 + v98;
          unsigned int v108 = v68[3];
          if (v108 == 127)
          {
            float32x4_t v111 = *(float32x4_t *)(v107 + 16);
            float32x4_t v112 = *(float32x4_t *)(v107 + 32);
            float32x4_t v113 = *(float32x4_t *)(v107 + 48);
            float32x4_t v114 = *(float32x4_t *)(v107 + 64);
            float32x4_t v115 = *(float32x4_t *)(v107 + 80);
            float32x4_t v116 = *(float32x4_t *)(v107 + 96);
            float32x4_t v117 = *(float32x4_t *)(v107 + 112);
            int8x16_t v267 = *(int8x16_t *)v107;
            float32x4_t v268 = v111;
            float32x4_t v269 = v114;
            float32x4_t v270 = v115;
            float32x4_t v275 = v112;
            float32x4_t v276 = v113;
            float32x4_t v277 = v116;
            float32x4_t v278 = v117;
            uint64_t v109 = 128;
          }
          else if (v108 == 3)
          {
            float32x4_t v110 = vld1q_dup_f32((const float *)v107);
            int8x16_t v267 = (int8x16_t)v110;
            float32x4_t v268 = v110;
            float32x4_t v269 = v110;
            float32x4_t v270 = v110;
            float32x4_t v275 = v110;
            float32x4_t v276 = v110;
            float32x4_t v277 = v110;
            float32x4_t v278 = v110;
            uint64_t v109 = 4;
          }
          else if (v68[3])
          {
            uint64_t v109 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v267, 128, v107, v108);
          }
          else
          {
            uint64_t v109 = 0;
            float32x4_t v269 = 0u;
            float32x4_t v270 = 0u;
            int8x16_t v267 = 0u;
            float32x4_t v268 = 0u;
            float32x4_t v275 = 0u;
            float32x4_t v276 = 0u;
            float32x4_t v277 = 0u;
            float32x4_t v278 = 0u;
          }
          uint64_t v118 = v107 + v109;
          unsigned int v119 = v68[4];
          if (v119 == 127)
          {
            float32x4_t v122 = *(float32x4_t *)(v118 + 16);
            float32x4_t v123 = *(float32x4_t *)(v118 + 32);
            float32x4_t v124 = *(float32x4_t *)(v118 + 48);
            float32x4_t v125 = *(float32x4_t *)(v118 + 64);
            float32x4_t v126 = *(float32x4_t *)(v118 + 80);
            float32x4_t v127 = *(float32x4_t *)(v118 + 96);
            float32x4_t v128 = *(float32x4_t *)(v118 + 112);
            int8x16_t v279 = *(int8x16_t *)v118;
            float32x4_t v280 = v122;
            float32x4_t v281 = v125;
            float32x4_t v282 = v126;
            float32x4_t v287 = v123;
            float32x4_t v288 = v124;
            float32x4_t v289 = v127;
            float32x4_t v290 = v128;
            uint64_t v120 = 128;
          }
          else if (v119 == 3)
          {
            float32x4_t v121 = vld1q_dup_f32((const float *)v118);
            int8x16_t v279 = (int8x16_t)v121;
            float32x4_t v280 = v121;
            float32x4_t v281 = v121;
            float32x4_t v282 = v121;
            float32x4_t v287 = v121;
            float32x4_t v288 = v121;
            float32x4_t v289 = v121;
            float32x4_t v290 = v121;
            uint64_t v120 = 4;
          }
          else if (v68[4])
          {
            uint64_t v120 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v279, 128, v118, v119);
          }
          else
          {
            uint64_t v120 = 0;
            float32x4_t v281 = 0u;
            float32x4_t v282 = 0u;
            int8x16_t v279 = 0u;
            float32x4_t v280 = 0u;
            float32x4_t v287 = 0u;
            float32x4_t v288 = 0u;
            float32x4_t v289 = 0u;
            float32x4_t v290 = 0u;
          }
          uint64_t v129 = v118 + v120;
          unsigned int v130 = v68[5];
          if (v130 == 127)
          {
            float32x4_t v133 = *(float32x4_t *)(v129 + 16);
            float32x4_t v134 = *(float32x4_t *)(v129 + 32);
            float32x4_t v135 = *(float32x4_t *)(v129 + 48);
            float32x4_t v136 = *(float32x4_t *)(v129 + 64);
            float32x4_t v137 = *(float32x4_t *)(v129 + 80);
            float32x4_t v138 = *(float32x4_t *)(v129 + 96);
            float32x4_t v139 = *(float32x4_t *)(v129 + 112);
            int8x16_t v295 = *(int8x16_t *)v129;
            float32x4_t v296 = v133;
            float32x4_t v297 = v136;
            float32x4_t v298 = v137;
            float32x4_t v303 = v134;
            float32x4_t v304 = v135;
            float32x4_t v305 = v138;
            float32x4_t v306 = v139;
            uint64_t v131 = 128;
          }
          else if (v130 == 3)
          {
            float32x4_t v132 = vld1q_dup_f32((const float *)v129);
            int8x16_t v295 = (int8x16_t)v132;
            float32x4_t v296 = v132;
            float32x4_t v297 = v132;
            float32x4_t v298 = v132;
            float32x4_t v303 = v132;
            float32x4_t v304 = v132;
            float32x4_t v305 = v132;
            float32x4_t v306 = v132;
            uint64_t v131 = 4;
          }
          else if (v68[5])
          {
            uint64_t v131 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v295, 128, v129, v130);
          }
          else
          {
            uint64_t v131 = 0;
            float32x4_t v297 = 0u;
            float32x4_t v298 = 0u;
            int8x16_t v295 = 0u;
            float32x4_t v296 = 0u;
            float32x4_t v303 = 0u;
            float32x4_t v304 = 0u;
            float32x4_t v305 = 0u;
            float32x4_t v306 = 0u;
          }
          uint64_t v140 = v129 + v131;
          unsigned int v141 = v68[6];
          if (v141 == 127)
          {
            float32x4_t v144 = *(float32x4_t *)(v140 + 16);
            float32x4_t v145 = *(float32x4_t *)(v140 + 32);
            float32x4_t v146 = *(float32x4_t *)(v140 + 48);
            float32x4_t v147 = *(float32x4_t *)(v140 + 64);
            float32x4_t v148 = *(float32x4_t *)(v140 + 80);
            float32x4_t v149 = *(float32x4_t *)(v140 + 96);
            float32x4_t v150 = *(float32x4_t *)(v140 + 112);
            int8x16_t v283 = *(int8x16_t *)v140;
            float32x4_t v284 = v144;
            float32x4_t v285 = v147;
            float32x4_t v286 = v148;
            float32x4_t v291 = v145;
            float32x4_t v292 = v146;
            float32x4_t v293 = v149;
            float32x4_t v294 = v150;
            uint64_t v142 = 128;
          }
          else if (v141 == 3)
          {
            float32x4_t v143 = vld1q_dup_f32((const float *)v140);
            int8x16_t v283 = (int8x16_t)v143;
            float32x4_t v284 = v143;
            float32x4_t v285 = v143;
            float32x4_t v286 = v143;
            float32x4_t v291 = v143;
            float32x4_t v292 = v143;
            float32x4_t v293 = v143;
            float32x4_t v294 = v143;
            uint64_t v142 = 4;
          }
          else if (v68[6])
          {
            uint64_t v142 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v283, 128, v140, v141);
          }
          else
          {
            uint64_t v142 = 0;
            float32x4_t v285 = 0u;
            float32x4_t v286 = 0u;
            int8x16_t v283 = 0u;
            float32x4_t v284 = 0u;
            float32x4_t v291 = 0u;
            float32x4_t v292 = 0u;
            float32x4_t v293 = 0u;
            float32x4_t v294 = 0u;
          }
          uint64_t v151 = v140 + v142;
          unsigned int v152 = v68[7];
          if (v152 == 127)
          {
            float32x4_t v155 = *(float32x4_t *)(v151 + 16);
            float32x4_t v156 = *(float32x4_t *)(v151 + 32);
            float32x4_t v157 = *(float32x4_t *)(v151 + 48);
            float32x4_t v158 = *(float32x4_t *)(v151 + 64);
            float32x4_t v159 = *(float32x4_t *)(v151 + 80);
            float32x4_t v160 = *(float32x4_t *)(v151 + 96);
            float32x4_t v161 = *(float32x4_t *)(v151 + 112);
            int8x16_t v299 = *(int8x16_t *)v151;
            float32x4_t v300 = v155;
            float32x4_t v301 = v158;
            float32x4_t v302 = v159;
            float32x4_t v307 = v156;
            float32x4_t v308 = v157;
            float32x4_t v309 = v160;
            float32x4_t v310 = v161;
            uint64_t v153 = v242;
            if (!v242) {
              goto LABEL_185;
            }
          }
          else if (v152 == 3)
          {
            float32x4_t v154 = vld1q_dup_f32((const float *)v151);
            int8x16_t v299 = (int8x16_t)v154;
            float32x4_t v300 = v154;
            float32x4_t v301 = v154;
            float32x4_t v302 = v154;
            float32x4_t v307 = v154;
            float32x4_t v308 = v154;
            float32x4_t v309 = v154;
            float32x4_t v310 = v154;
            uint64_t v153 = v242;
            if (!v242) {
              goto LABEL_185;
            }
          }
          else if (v68[7])
          {
            AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v299, 128, v151, v152);
            uint64_t v153 = v242;
            if (!v242) {
              goto LABEL_185;
            }
          }
          else
          {
            float32x4_t v301 = 0u;
            float32x4_t v302 = 0u;
            int8x16_t v299 = 0u;
            float32x4_t v300 = 0u;
            float32x4_t v307 = 0u;
            float32x4_t v308 = 0u;
            float32x4_t v309 = 0u;
            float32x4_t v310 = 0u;
            uint64_t v153 = v242;
            if (!v242) {
              goto LABEL_185;
            }
          }
          if (v243)
          {
            uint64_t v162 = 0;
            unint64_t v163 = (unint64_t)v240 << 7;
            uint64_t v164 = 16 * v241;
            float32x4_t v165 = &v247.i8[v163 + v164];
            uint64_t v166 = v238;
            uint64_t v167 = v239;
            unint64_t v168 = 16 * v243;
            if (v168 <= 1) {
              unint64_t v169 = 1;
            }
            else {
              unint64_t v169 = 16 * v243;
            }
            unint64_t v170 = v163 + v164;
            float32x4_t v171 = &v247.i8[v163 + v164];
            if (v169) {
              BOOL v172 = (v169 - 1) >> 32 == 0;
            }
            else {
              BOOL v172 = 0;
            }
            char v173 = !v172;
            uint64_t v174 = v169 & 0xFFFFFFFE0;
            uint64_t v175 = v169 & 0xFFFFFFFF0;
            uint64_t v176 = (char *)&v248 + v170;
            uint64_t v177 = (long long *)(v238 + 16);
            unint64_t v178 = v165;
            uint64_t v179 = v238;
            do
            {
              unint64_t v180 = (char *)(v166 + v167 * v162);
              unsigned int v181 = &v165[128 * v162];
              if ((unint64_t)(&v171[128 * v162] - v180) < 0x20) {
                char v182 = 1;
              }
              else {
                char v182 = v173;
              }
              if (v182)
              {
                int v183 = 0;
                goto LABEL_182;
              }
              if (v169 >= 0x20)
              {
                uint64_t v189 = v177;
                unsigned int v190 = v176;
                uint64_t v191 = v169 & 0xFFFFFFFE0;
                do
                {
                  long long v192 = *v189;
                  *(v190 - 1) = *(v189 - 1);
                  *unsigned int v190 = v192;
                  v190 += 2;
                  v189 += 2;
                  v191 -= 32;
                }
                while (v191);
                if (v169 == v174) {
                  goto LABEL_165;
                }
                uint64_t v184 = v169 & 0xFFFFFFFE0;
                if ((v169 & 0x10) == 0)
                {
                  v180 += v174;
                  v181 += v174;
                  int v183 = v169 & 0xFFFFFFE0;
                  goto LABEL_182;
                }
              }
              else
              {
                uint64_t v184 = 0;
              }
              v181 += v175;
              unint64_t v185 = v184 - (v169 & 0xFFFFFFFF0);
              BOOL v186 = (uint64_t *)(v179 + v184);
              int8x8_t v187 = &v178[v184];
              do
              {
                uint64_t v188 = *v186++;
                *(void *)int8x8_t v187 = v188;
                v187 += 8;
                v185 += 8;
              }
              while (v185);
              if (v169 == v175) {
                goto LABEL_165;
              }
              v180 += v175;
              int v183 = v169 & 0xFFFFFFF0;
LABEL_182:
              unsigned int v193 = v183 + 1;
              do
              {
                char v194 = *v180++;
                *v181++ = v194;
              }
              while (v168 > v193++);
LABEL_165:
              ++v162;
              v176 += 128;
              uint64_t v177 = (long long *)((char *)v177 + v167);
              v179 += v167;
              v178 += 128;
            }
            while (v162 != v153);
          }
LABEL_185:
          AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((uint64_t)&v247, 128, (unint64_t)v236, v237, v244, v245);
LABEL_186:
          uint64_t result = v232;
          if (v233) {
            uint64_t result = memcpy(v232, v72, 0x400uLL);
          }
          BOOL v23 = v33++ == v221 >> 3;
          uint64_t v28 = v229;
        }
        while (!v23);
        BOOL v23 = v18++ == v214;
      }
      while (!v23);
    }
  }
  return result;
}

void *AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, int a12)
{
  uint64_t v311 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  uint64_t v17 = a1;
  unsigned int v228 = a8;
  unsigned int v18 = a8 >> 3;
  unsigned int v212 = a8 + a10 - 1;
  unsigned int v214 = v212 >> 3;
  unsigned int v19 = *(unsigned __int8 *)(*(void *)(a1 + 208) + 88);
  unsigned int v20 = *(_DWORD *)(a1 + 112);
  uint64_t v229 = v17;
  if (*(void *)(v17 + 168))
  {
    __int16 CacheMode = IOSurfaceGetCacheMode();
    uint64_t v17 = v229;
    int v22 = CacheMode & 0xF00;
  }
  else
  {
    int v22 = 0;
  }
  BOOL v23 = (v22 & 0xD00) == 0 || v22 == 768;
  int v24 = v22 & 0xE00;
  int v26 = !v23 && v24 != 1024;
  int v233 = v26;
  uint64_t result = (void *)AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::isLevelTiled(v17, *(_DWORD *)(v17 + 144) + a12);
  uint64_t v28 = v229;
  int v222 = (int)result;
  if (v18 <= v214)
  {
    unsigned int v221 = a7 + a9 - 1;
    unsigned int v211 = a7 >> 3;
    if (a7 >> 3 <= v221 >> 3)
    {
      unsigned int v208 = a5 - 1;
      unsigned int v231 = (a5 - 1) >> 3;
      int v230 = ((a5 - 1) & 7) + 1;
      int v209 = ((a6 - 1) & 7) + 1;
      unsigned int v210 = (a6 - 1) >> 3;
      uint32x2_t v29 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0x700000007);
      int8x8_t v30 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v29, 3uLL))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x1000000010, v29));
      __int32 v219 = v30.i32[0] | v30.i32[1];
      BOOL v217 = v30.i32[1] != 0;
      int8x8_t v218 = v30;
      BOOL v216 = v30.i32[0] != 0;
      unint64_t v207 = 8 * v20 * (unint64_t)v19;
      unsigned int v220 = a7;
      do
      {
        unsigned int v31 = (8 * v18) | 7;
        if (8 * v18 <= v228) {
          int v32 = v228;
        }
        else {
          int v32 = 8 * v18;
        }
        unsigned int v33 = v211;
        if (v212 < v31) {
          unsigned int v31 = v212;
        }
        unsigned int v227 = 8 * v18;
        int v215 = v32 - 8 * v18;
        int v226 = v31 - v32 + 1;
        int v34 = v209;
        if (v18 != v210) {
          int v34 = 8;
        }
        unsigned int v234 = v34;
        uint64_t v225 = a3 + (v32 - v228) * a11;
        do
        {
          unsigned int v35 = 8 * v33;
          unsigned int v36 = 8 * (v33 + 1) - 1;
          if (8 * v33 <= a7) {
            int v37 = a7;
          }
          else {
            int v37 = 8 * v33;
          }
          if (v221 < v36) {
            unsigned int v36 = v221;
          }
          int v38 = v36 - v37 + 1;
          if (v33 == v231) {
            unsigned int v39 = v230;
          }
          else {
            unsigned int v39 = 8;
          }
          BOOL v40 = 1;
          if (v227 >= v228 && v35 >= a7)
          {
            int v41 = v230;
            if (v33 != v231) {
              int v41 = 8;
            }
            BOOL v40 = v38 != v41 || v226 != v234;
          }
          if (v222)
          {
            unsigned int v62 = 0;
            uint64_t v63 = v207 >> (*(unsigned char *)(v28 + 57) != 0);
            char v64 = 1;
            if (v63 > 127)
            {
              if (v63 > 511)
              {
                if (v63 == 512)
                {
                  char v64 = 0;
                  char v65 = 0;
                  unsigned int v62 = 16;
                  unsigned int v66 = 16;
                }
                else
                {
                  char v65 = 1;
                  unsigned int v66 = 0;
                  if (v63 == 1024)
                  {
                    char v64 = 0;
                    unsigned int v66 = 8;
                    unsigned int v62 = 16;
                  }
                }
              }
              else if (v63 == 128)
              {
                char v64 = 0;
                char v65 = 0;
                unsigned int v62 = 32;
                unsigned int v66 = 32;
              }
              else
              {
                char v65 = 1;
                unsigned int v66 = 0;
                if (v63 == 256)
                {
                  char v64 = 0;
                  char v65 = 0;
                  unsigned int v66 = 16;
                  unsigned int v62 = 32;
                }
              }
            }
            else
            {
              char v65 = 1;
              unsigned int v66 = 0;
              switch(v63)
              {
                case 4:
                  char v64 = 0;
                  char v65 = 0;
                  unsigned int v66 = 128;
                  unsigned int v62 = 256;
                  break;
                case 5:
                case 6:
                case 7:
                case 9:
                case 10:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 17:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                  break;
                case 8:
                  char v64 = 0;
                  char v65 = 0;
                  unsigned int v62 = 128;
                  unsigned int v66 = 128;
                  break;
                case 16:
                  char v64 = 0;
                  char v65 = 0;
                  unsigned int v66 = 64;
                  unsigned int v62 = 128;
                  break;
                case 32:
                  char v64 = 0;
                  char v65 = 0;
                  unsigned int v62 = 64;
                  unsigned int v66 = 64;
                  break;
                default:
                  if (v63 == 64)
                  {
                    char v64 = 0;
                    char v65 = 0;
                    unsigned int v66 = 32;
                    unsigned int v62 = 64;
                  }
                  break;
              }
            }
            unsigned int v196 = (v62 >> 3) - 1;
            if (v64) {
              unsigned int v197 = 0;
            }
            else {
              unsigned int v197 = 32 - __clz(~(-1 << -(char)__clz(v196)));
            }
            unsigned int v198 = (v66 >> 3) - 1;
            if (v65)
            {
              unsigned int v199 = 0;
              if (v197) {
                goto LABEL_206;
              }
            }
            else
            {
              unsigned int v199 = 32 - __clz(~(-1 << -(char)__clz(v198)));
              if (v199 | v197)
              {
LABEL_206:
                int v200 = 0;
                uint64_t v201 = 0;
                int v202 = v33 & v196;
                int v203 = v18 & v198;
                BOOL v204 = v197 != 0;
                BOOL v205 = v199 != 0;
                int v206 = 1;
                do
                {
                  --v197;
                  if (v204) {
                    v201 |= (unint64_t)(v206 & v202) << v200++;
                  }
                  else {
                    unsigned int v197 = 0;
                  }
                  --v199;
                  if (v205) {
                    v201 |= (unint64_t)(v206 & v203) << v200++;
                  }
                  else {
                    unsigned int v199 = 0;
                  }
                  v206 *= 2;
                  --v200;
                  BOOL v205 = v199 != 0;
                  BOOL v204 = v197 != 0;
                }
                while (v199 | v197);
                goto LABEL_218;
              }
            }
            uint64_t v201 = 0;
LABEL_218:
            unint64_t v50 = ((unint64_t)(v35 / v62 + v227 / v66 * ((v62 + v208) / v62)) << 14) + (v201 << 10);
            goto LABEL_58;
          }
          if (v219)
          {
            int v43 = 0;
            uint64_t v44 = 0;
            int v45 = 1;
            BOOL v46 = v217;
            BOOL v47 = v216;
            __int32 v48 = v218.i32[1];
            __int32 v49 = v218.i32[0];
            do
            {
              --v48;
              if (v46) {
                v44 |= (unint64_t)(v45 & v33) << v43++;
              }
              else {
                __int32 v48 = 0;
              }
              --v49;
              if (v47) {
                v44 |= (unint64_t)(v45 & v18) << v43++;
              }
              else {
                __int32 v49 = 0;
              }
              v45 *= 2;
              --v43;
              BOOL v47 = v49 != 0;
              BOOL v46 = v48 != 0;
            }
            while (v49 | v48);
          }
          else
          {
            uint64_t v44 = 0;
          }
          unint64_t v50 = v44 << 10;
LABEL_58:
          unsigned int v51 = *(_DWORD *)(v28 + 128) >> (*(unsigned char *)(v28 + 144) + a12);
          if (v51 <= 1) {
            unsigned int v51 = 1;
          }
          unsigned int v52 = v51 + 7;
          if (v52 < 0x10) {
            unsigned int v53 = 0;
          }
          else {
            unsigned int v53 = 32 - __clz(~(-1 << -(char)__clz((v52 >> 3) - 1)));
          }
          unsigned int v54 = *(_DWORD *)(v28 + 132) >> (*(unsigned char *)(v28 + 144) + a12);
          if (v54 <= 1) {
            unsigned int v54 = 1;
          }
          unsigned int v55 = v54 + 7;
          if (v55 < 0x10)
          {
            unsigned int v56 = 0;
            if (!v53)
            {
LABEL_80:
              uint64_t v58 = 0;
              goto LABEL_81;
            }
          }
          else
          {
            unsigned int v56 = 32 - __clz(~(-1 << -(char)__clz((v55 >> 3) - 1)));
            if (!(v56 | v53)) {
              goto LABEL_80;
            }
          }
          int v57 = 0;
          uint64_t v58 = 0;
          BOOL v59 = v53 != 0;
          BOOL v60 = v56 != 0;
          int v61 = 1;
          do
          {
            --v53;
            if (v59) {
              v58 |= (unint64_t)(v61 & v33) << v57++;
            }
            else {
              unsigned int v53 = 0;
            }
            --v56;
            if (v60) {
              v58 |= (unint64_t)(v61 & v18) << v57++;
            }
            else {
              unsigned int v56 = 0;
            }
            v61 *= 2;
            --v57;
            BOOL v60 = v56 != 0;
            BOOL v59 = v53 != 0;
          }
          while (v56 | v53);
LABEL_81:
          int v67 = v39 < 8 || v40;
          unsigned int v68 = (char *)(a4 + 8 * v58);
          uint64_t v69 = (_OWORD *)(v225 + 16 * (v37 - a7));
          int v70 = (void *)(a2 + v50);
          if (v234 < 8) {
            int v71 = 1;
          }
          else {
            int v71 = v67;
          }
          unsigned int v232 = v70;
          if (v233)
          {
            BOOL v72 = __dst;
            if (!v71) {
              goto LABEL_93;
            }
            char v73 = v39;
            int v74 = v37;
            memcpy(__dst, v70, sizeof(__dst));
            unsigned int v35 = 8 * v33;
            int v37 = v74;
            LOBYTE(v39) = v73;
            uint64_t v28 = v229;
          }
          else
          {
            BOOL v72 = v70;
            if (!v71)
            {
LABEL_93:
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock(v69, a11, v72, v68, v39, v234);
              goto LABEL_94;
            }
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE15ELj4ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = v28;
          int v236 = v72;
          unsigned __int8 v244 = v39;
          unsigned __int8 v245 = v234;
          unsigned int v240 = v215;
          unsigned int v241 = v37 - v35;
          BOOL v237 = v68;
          uint64_t v238 = v69;
          uint64_t v239 = a11;
          unsigned int v242 = v226;
          unsigned int v243 = v38;
          if (v40)
          {
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(v28 + 8) + 7384), block);
LABEL_94:
            a7 = v220;
            goto LABEL_186;
          }
          unsigned int v75 = *v68;
          a7 = v220;
          if (v75 == 127)
          {
            float32x4_t v78 = *((float32x4_t *)v72 + 1);
            float32x4_t v79 = *((float32x4_t *)v72 + 2);
            float32x4_t v80 = *((float32x4_t *)v72 + 3);
            float32x4_t v81 = *((float32x4_t *)v72 + 4);
            float32x4_t v82 = *((float32x4_t *)v72 + 5);
            float32x4_t v83 = *((float32x4_t *)v72 + 6);
            float32x4_t v84 = *((float32x4_t *)v72 + 7);
            int8x16_t v247 = *(int8x16_t *)v72;
            float32x4_t v248 = v78;
            float32x4_t v249 = v81;
            float32x4_t v250 = v82;
            float32x4_t v255 = v79;
            float32x4_t v256 = v80;
            float32x4_t v257 = v83;
            float32x4_t v258 = v84;
            uint64_t v76 = 128;
          }
          else if (v75 == 3)
          {
            float32x4_t v77 = vld1q_dup_f32((const float *)v72);
            int8x16_t v247 = (int8x16_t)v77;
            float32x4_t v248 = v77;
            float32x4_t v249 = v77;
            float32x4_t v250 = v77;
            float32x4_t v255 = v77;
            float32x4_t v256 = v77;
            float32x4_t v257 = v77;
            float32x4_t v258 = v77;
            uint64_t v76 = 4;
          }
          else if (*v68)
          {
            uint64_t v76 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v247, 128, (uint64_t)v72, v75);
          }
          else
          {
            uint64_t v76 = 0;
            float32x4_t v250 = 0u;
            float32x4_t v249 = 0u;
            float32x4_t v248 = 0u;
            int8x16_t v247 = 0u;
            float32x4_t v255 = 0u;
            float32x4_t v256 = 0u;
            float32x4_t v257 = 0u;
            float32x4_t v258 = 0u;
          }
          uint64_t v85 = (uint64_t)v72 + v76;
          unsigned int v86 = v68[1];
          if (v86 == 127)
          {
            float32x4_t v89 = *(float32x4_t *)(v85 + 16);
            float32x4_t v90 = *(float32x4_t *)(v85 + 32);
            float32x4_t v91 = *(float32x4_t *)(v85 + 48);
            float32x4_t v92 = *(float32x4_t *)(v85 + 64);
            float32x4_t v93 = *(float32x4_t *)(v85 + 80);
            float32x4_t v94 = *(float32x4_t *)(v85 + 96);
            float32x4_t v95 = *(float32x4_t *)(v85 + 112);
            int8x16_t v263 = *(int8x16_t *)v85;
            float32x4_t v264 = v89;
            float32x4_t v265 = v92;
            float32x4_t v266 = v93;
            float32x4_t v271 = v90;
            float32x4_t v272 = v91;
            float32x4_t v273 = v94;
            float32x4_t v274 = v95;
            uint64_t v87 = 128;
          }
          else if (v86 == 3)
          {
            float32x4_t v88 = vld1q_dup_f32((const float *)v85);
            int8x16_t v263 = (int8x16_t)v88;
            float32x4_t v264 = v88;
            float32x4_t v265 = v88;
            float32x4_t v266 = v88;
            float32x4_t v271 = v88;
            float32x4_t v272 = v88;
            float32x4_t v273 = v88;
            float32x4_t v274 = v88;
            uint64_t v87 = 4;
          }
          else if (v68[1])
          {
            uint64_t v87 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v263, 128, v85, v86);
          }
          else
          {
            uint64_t v87 = 0;
            float32x4_t v265 = 0u;
            float32x4_t v266 = 0u;
            int8x16_t v263 = 0u;
            float32x4_t v264 = 0u;
            float32x4_t v271 = 0u;
            float32x4_t v272 = 0u;
            float32x4_t v273 = 0u;
            float32x4_t v274 = 0u;
          }
          uint64_t v96 = v85 + v87;
          unsigned int v97 = v68[2];
          if (v97 == 127)
          {
            float32x4_t v100 = *(float32x4_t *)(v96 + 16);
            float32x4_t v101 = *(float32x4_t *)(v96 + 32);
            float32x4_t v102 = *(float32x4_t *)(v96 + 48);
            float32x4_t v103 = *(float32x4_t *)(v96 + 64);
            float32x4_t v104 = *(float32x4_t *)(v96 + 80);
            float32x4_t v105 = *(float32x4_t *)(v96 + 96);
            float32x4_t v106 = *(float32x4_t *)(v96 + 112);
            int8x16_t v251 = *(int8x16_t *)v96;
            float32x4_t v252 = v100;
            float32x4_t v253 = v103;
            float32x4_t v254 = v104;
            float32x4_t v259 = v101;
            float32x4_t v260 = v102;
            float32x4_t v261 = v105;
            float32x4_t v262 = v106;
            uint64_t v98 = 128;
          }
          else if (v97 == 3)
          {
            float32x4_t v99 = vld1q_dup_f32((const float *)v96);
            int8x16_t v251 = (int8x16_t)v99;
            float32x4_t v252 = v99;
            float32x4_t v253 = v99;
            float32x4_t v254 = v99;
            float32x4_t v259 = v99;
            float32x4_t v260 = v99;
            float32x4_t v261 = v99;
            float32x4_t v262 = v99;
            uint64_t v98 = 4;
          }
          else if (v68[2])
          {
            uint64_t v98 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v251, 128, v96, v97);
          }
          else
          {
            uint64_t v98 = 0;
            float32x4_t v253 = 0u;
            float32x4_t v254 = 0u;
            int8x16_t v251 = 0u;
            float32x4_t v252 = 0u;
            float32x4_t v259 = 0u;
            float32x4_t v260 = 0u;
            float32x4_t v261 = 0u;
            float32x4_t v262 = 0u;
          }
          uint64_t v107 = v96 + v98;
          unsigned int v108 = v68[3];
          if (v108 == 127)
          {
            float32x4_t v111 = *(float32x4_t *)(v107 + 16);
            float32x4_t v112 = *(float32x4_t *)(v107 + 32);
            float32x4_t v113 = *(float32x4_t *)(v107 + 48);
            float32x4_t v114 = *(float32x4_t *)(v107 + 64);
            float32x4_t v115 = *(float32x4_t *)(v107 + 80);
            float32x4_t v116 = *(float32x4_t *)(v107 + 96);
            float32x4_t v117 = *(float32x4_t *)(v107 + 112);
            int8x16_t v267 = *(int8x16_t *)v107;
            float32x4_t v268 = v111;
            float32x4_t v269 = v114;
            float32x4_t v270 = v115;
            float32x4_t v275 = v112;
            float32x4_t v276 = v113;
            float32x4_t v277 = v116;
            float32x4_t v278 = v117;
            uint64_t v109 = 128;
          }
          else if (v108 == 3)
          {
            float32x4_t v110 = vld1q_dup_f32((const float *)v107);
            int8x16_t v267 = (int8x16_t)v110;
            float32x4_t v268 = v110;
            float32x4_t v269 = v110;
            float32x4_t v270 = v110;
            float32x4_t v275 = v110;
            float32x4_t v276 = v110;
            float32x4_t v277 = v110;
            float32x4_t v278 = v110;
            uint64_t v109 = 4;
          }
          else if (v68[3])
          {
            uint64_t v109 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v267, 128, v107, v108);
          }
          else
          {
            uint64_t v109 = 0;
            float32x4_t v269 = 0u;
            float32x4_t v270 = 0u;
            int8x16_t v267 = 0u;
            float32x4_t v268 = 0u;
            float32x4_t v275 = 0u;
            float32x4_t v276 = 0u;
            float32x4_t v277 = 0u;
            float32x4_t v278 = 0u;
          }
          uint64_t v118 = v107 + v109;
          unsigned int v119 = v68[4];
          if (v119 == 127)
          {
            float32x4_t v122 = *(float32x4_t *)(v118 + 16);
            float32x4_t v123 = *(float32x4_t *)(v118 + 32);
            float32x4_t v124 = *(float32x4_t *)(v118 + 48);
            float32x4_t v125 = *(float32x4_t *)(v118 + 64);
            float32x4_t v126 = *(float32x4_t *)(v118 + 80);
            float32x4_t v127 = *(float32x4_t *)(v118 + 96);
            float32x4_t v128 = *(float32x4_t *)(v118 + 112);
            int8x16_t v279 = *(int8x16_t *)v118;
            float32x4_t v280 = v122;
            float32x4_t v281 = v125;
            float32x4_t v282 = v126;
            float32x4_t v287 = v123;
            float32x4_t v288 = v124;
            float32x4_t v289 = v127;
            float32x4_t v290 = v128;
            uint64_t v120 = 128;
          }
          else if (v119 == 3)
          {
            float32x4_t v121 = vld1q_dup_f32((const float *)v118);
            int8x16_t v279 = (int8x16_t)v121;
            float32x4_t v280 = v121;
            float32x4_t v281 = v121;
            float32x4_t v282 = v121;
            float32x4_t v287 = v121;
            float32x4_t v288 = v121;
            float32x4_t v289 = v121;
            float32x4_t v290 = v121;
            uint64_t v120 = 4;
          }
          else if (v68[4])
          {
            uint64_t v120 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v279, 128, v118, v119);
          }
          else
          {
            uint64_t v120 = 0;
            float32x4_t v281 = 0u;
            float32x4_t v282 = 0u;
            int8x16_t v279 = 0u;
            float32x4_t v280 = 0u;
            float32x4_t v287 = 0u;
            float32x4_t v288 = 0u;
            float32x4_t v289 = 0u;
            float32x4_t v290 = 0u;
          }
          uint64_t v129 = v118 + v120;
          unsigned int v130 = v68[5];
          if (v130 == 127)
          {
            float32x4_t v133 = *(float32x4_t *)(v129 + 16);
            float32x4_t v134 = *(float32x4_t *)(v129 + 32);
            float32x4_t v135 = *(float32x4_t *)(v129 + 48);
            float32x4_t v136 = *(float32x4_t *)(v129 + 64);
            float32x4_t v137 = *(float32x4_t *)(v129 + 80);
            float32x4_t v138 = *(float32x4_t *)(v129 + 96);
            float32x4_t v139 = *(float32x4_t *)(v129 + 112);
            int8x16_t v295 = *(int8x16_t *)v129;
            float32x4_t v296 = v133;
            float32x4_t v297 = v136;
            float32x4_t v298 = v137;
            float32x4_t v303 = v134;
            float32x4_t v304 = v135;
            float32x4_t v305 = v138;
            float32x4_t v306 = v139;
            uint64_t v131 = 128;
          }
          else if (v130 == 3)
          {
            float32x4_t v132 = vld1q_dup_f32((const float *)v129);
            int8x16_t v295 = (int8x16_t)v132;
            float32x4_t v296 = v132;
            float32x4_t v297 = v132;
            float32x4_t v298 = v132;
            float32x4_t v303 = v132;
            float32x4_t v304 = v132;
            float32x4_t v305 = v132;
            float32x4_t v306 = v132;
            uint64_t v131 = 4;
          }
          else if (v68[5])
          {
            uint64_t v131 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v295, 128, v129, v130);
          }
          else
          {
            uint64_t v131 = 0;
            float32x4_t v297 = 0u;
            float32x4_t v298 = 0u;
            int8x16_t v295 = 0u;
            float32x4_t v296 = 0u;
            float32x4_t v303 = 0u;
            float32x4_t v304 = 0u;
            float32x4_t v305 = 0u;
            float32x4_t v306 = 0u;
          }
          uint64_t v140 = v129 + v131;
          unsigned int v141 = v68[6];
          if (v141 == 127)
          {
            float32x4_t v144 = *(float32x4_t *)(v140 + 16);
            float32x4_t v145 = *(float32x4_t *)(v140 + 32);
            float32x4_t v146 = *(float32x4_t *)(v140 + 48);
            float32x4_t v147 = *(float32x4_t *)(v140 + 64);
            float32x4_t v148 = *(float32x4_t *)(v140 + 80);
            float32x4_t v149 = *(float32x4_t *)(v140 + 96);
            float32x4_t v150 = *(float32x4_t *)(v140 + 112);
            int8x16_t v283 = *(int8x16_t *)v140;
            float32x4_t v284 = v144;
            float32x4_t v285 = v147;
            float32x4_t v286 = v148;
            float32x4_t v291 = v145;
            float32x4_t v292 = v146;
            float32x4_t v293 = v149;
            float32x4_t v294 = v150;
            uint64_t v142 = 128;
          }
          else if (v141 == 3)
          {
            float32x4_t v143 = vld1q_dup_f32((const float *)v140);
            int8x16_t v283 = (int8x16_t)v143;
            float32x4_t v284 = v143;
            float32x4_t v285 = v143;
            float32x4_t v286 = v143;
            float32x4_t v291 = v143;
            float32x4_t v292 = v143;
            float32x4_t v293 = v143;
            float32x4_t v294 = v143;
            uint64_t v142 = 4;
          }
          else if (v68[6])
          {
            uint64_t v142 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v283, 128, v140, v141);
          }
          else
          {
            uint64_t v142 = 0;
            float32x4_t v285 = 0u;
            float32x4_t v286 = 0u;
            int8x16_t v283 = 0u;
            float32x4_t v284 = 0u;
            float32x4_t v291 = 0u;
            float32x4_t v292 = 0u;
            float32x4_t v293 = 0u;
            float32x4_t v294 = 0u;
          }
          uint64_t v151 = v140 + v142;
          unsigned int v152 = v68[7];
          if (v152 == 127)
          {
            float32x4_t v155 = *(float32x4_t *)(v151 + 16);
            float32x4_t v156 = *(float32x4_t *)(v151 + 32);
            float32x4_t v157 = *(float32x4_t *)(v151 + 48);
            float32x4_t v158 = *(float32x4_t *)(v151 + 64);
            float32x4_t v159 = *(float32x4_t *)(v151 + 80);
            float32x4_t v160 = *(float32x4_t *)(v151 + 96);
            float32x4_t v161 = *(float32x4_t *)(v151 + 112);
            int8x16_t v299 = *(int8x16_t *)v151;
            float32x4_t v300 = v155;
            float32x4_t v301 = v158;
            float32x4_t v302 = v159;
            float32x4_t v307 = v156;
            float32x4_t v308 = v157;
            float32x4_t v309 = v160;
            float32x4_t v310 = v161;
            uint64_t v153 = v242;
            if (!v242) {
              goto LABEL_185;
            }
          }
          else if (v152 == 3)
          {
            float32x4_t v154 = vld1q_dup_f32((const float *)v151);
            int8x16_t v299 = (int8x16_t)v154;
            float32x4_t v300 = v154;
            float32x4_t v301 = v154;
            float32x4_t v302 = v154;
            float32x4_t v307 = v154;
            float32x4_t v308 = v154;
            float32x4_t v309 = v154;
            float32x4_t v310 = v154;
            uint64_t v153 = v242;
            if (!v242) {
              goto LABEL_185;
            }
          }
          else if (v68[7])
          {
            AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v299, 128, v151, v152);
            uint64_t v153 = v242;
            if (!v242) {
              goto LABEL_185;
            }
          }
          else
          {
            float32x4_t v301 = 0u;
            float32x4_t v302 = 0u;
            int8x16_t v299 = 0u;
            float32x4_t v300 = 0u;
            float32x4_t v307 = 0u;
            float32x4_t v308 = 0u;
            float32x4_t v309 = 0u;
            float32x4_t v310 = 0u;
            uint64_t v153 = v242;
            if (!v242) {
              goto LABEL_185;
            }
          }
          if (v243)
          {
            uint64_t v162 = 0;
            unint64_t v163 = (unint64_t)v240 << 7;
            uint64_t v164 = 16 * v241;
            float32x4_t v165 = &v247.i8[v163 + v164];
            uint64_t v166 = v238;
            uint64_t v167 = v239;
            unint64_t v168 = 16 * v243;
            if (v168 <= 1) {
              unint64_t v169 = 1;
            }
            else {
              unint64_t v169 = 16 * v243;
            }
            unint64_t v170 = v163 + v164;
            float32x4_t v171 = &v247.i8[v163 + v164];
            if (v169) {
              BOOL v172 = (v169 - 1) >> 32 == 0;
            }
            else {
              BOOL v172 = 0;
            }
            char v173 = !v172;
            uint64_t v174 = v169 & 0xFFFFFFFE0;
            uint64_t v175 = v169 & 0xFFFFFFFF0;
            uint64_t v176 = (char *)&v248 + v170;
            uint64_t v177 = v238 + 1;
            unint64_t v178 = v165;
            uint64_t v179 = v238;
            do
            {
              unint64_t v180 = (char *)v166 + v167 * v162;
              unsigned int v181 = &v165[128 * v162];
              if ((unint64_t)(&v171[128 * v162] - v180) < 0x20) {
                char v182 = 1;
              }
              else {
                char v182 = v173;
              }
              if (v182)
              {
                int v183 = 0;
                goto LABEL_182;
              }
              if (v169 >= 0x20)
              {
                uint64_t v189 = v177;
                unsigned int v190 = v176;
                uint64_t v191 = v169 & 0xFFFFFFFE0;
                do
                {
                  long long v192 = *v189;
                  *(v190 - 1) = *(v189 - 1);
                  *unsigned int v190 = v192;
                  v190 += 2;
                  v189 += 2;
                  v191 -= 32;
                }
                while (v191);
                if (v169 == v174) {
                  goto LABEL_165;
                }
                uint64_t v184 = v169 & 0xFFFFFFFE0;
                if ((v169 & 0x10) == 0)
                {
                  v180 += v174;
                  v181 += v174;
                  int v183 = v169 & 0xFFFFFFE0;
                  goto LABEL_182;
                }
              }
              else
              {
                uint64_t v184 = 0;
              }
              v181 += v175;
              unint64_t v185 = v184 - (v169 & 0xFFFFFFFF0);
              BOOL v186 = (uint64_t *)((char *)v179 + v184);
              int8x8_t v187 = &v178[v184];
              do
              {
                uint64_t v188 = *v186++;
                *(void *)int8x8_t v187 = v188;
                v187 += 8;
                v185 += 8;
              }
              while (v185);
              if (v169 == v175) {
                goto LABEL_165;
              }
              v180 += v175;
              int v183 = v169 & 0xFFFFFFF0;
LABEL_182:
              unsigned int v193 = v183 + 1;
              do
              {
                char v194 = *v180++;
                *v181++ = v194;
              }
              while (v168 > v193++);
LABEL_165:
              ++v162;
              v176 += 128;
              uint64_t v177 = (long long *)((char *)v177 + v167);
              uint64_t v179 = (_OWORD *)((char *)v179 + v167);
              v178 += 128;
            }
            while (v162 != v153);
          }
LABEL_185:
          AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock(&v247, 128, v236, v237, v244, v245);
LABEL_186:
          uint64_t result = v232;
          if (v233) {
            uint64_t result = memcpy(v232, v72, 0x400uLL);
          }
          BOOL v23 = v33++ == v221 >> 3;
          uint64_t v28 = v229;
        }
        while (!v23);
        BOOL v23 = v18++ == v214;
      }
      while (!v23);
    }
  }
  return result;
}

uint64_t AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, char a12)
{
  uint64_t v227 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v175 = a8;
  unsigned int v160 = a8 + a10 - 1;
  uint64_t v176 = a1;
  if (*(void *)(a1 + 168)) {
    int v21 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v21 = 0;
  }
  unsigned int v22 = a5 - 1;
  unsigned int v23 = a6 - 1;
  unsigned int v24 = a8 >> 3;
  unsigned int v159 = v160 >> 3;
  BOOL v25 = (v21 & 0xD00) == 0 || v21 == 768;
  int v26 = v21 & 0xE00;
  int v28 = !v25 && v26 != 1024;
  int v181 = v28;
  uint64_t result = a1;
  if (*(unsigned char *)(a1 + 232))
  {
    unsigned int v30 = *(unsigned __int8 *)(a1 + 255);
    unsigned int v31 = *(unsigned __int8 *)(a1 + 254);
    char v32 = __clz(v22);
    if (1 << v30 >= a6 || a5 >> v31)
    {
      if (!(a6 >> v30) && 1 << v31 < a5)
      {
        if (a6 < 2) {
          unsigned int v35 = 0;
        }
        else {
          unsigned int v35 = __clz(~(-1 << -(char)__clz(v23))) - 32;
        }
        v31 += v30 + v35;
        unsigned int v30 = -v35;
      }
    }
    else
    {
      unsigned int v33 = 32 - __clz(~(-1 << -v32));
      unsigned int v34 = v31 + v30;
      if (a5 < 2) {
        unsigned int v33 = 0;
      }
      unsigned int v30 = v34 - v33;
      unsigned int v31 = v33;
    }
    if (a5 < 2)
    {
      if (v31) {
        goto LABEL_27;
      }
    }
    else if (32 - __clz(~(-1 << -v32)) < v31)
    {
LABEL_27:
      BOOL v170 = 0;
LABEL_32:
      unsigned int v167 = v31 - 3;
      unsigned int v164 = v30 - 3;
      int v37 = -1 << *(unsigned char *)(*(void *)(a1 + 208) + 48);
      unsigned int v157 = (((~v37 + a5) & v37) + ~(-1 << v31)) >> v31;
      goto LABEL_33;
    }
    if (a6 < 2) {
      unsigned int v36 = 0;
    }
    else {
      unsigned int v36 = 32 - __clz(~(-1 << -(char)__clz(v23)));
    }
    BOOL v170 = v36 >= v30;
    goto LABEL_32;
  }
  BOOL v170 = 0;
  unsigned int v157 = 0;
  unsigned int v164 = 0;
  unsigned int v167 = 0;
LABEL_33:
  if (v24 <= v159)
  {
    unsigned int v169 = a7 + a9 - 1;
    unsigned int v156 = a7 >> 3;
    if (a7 >> 3 <= v169 >> 3)
    {
      unsigned int v178 = v22 >> 3;
      unsigned int v155 = v23 >> 3;
      int v177 = (v22 & 7) + 1;
      int v154 = (v23 & 7) + 1;
      uint32x2_t v38 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0x700000007);
      v39.i64[0] = 0x2000000020;
      *(int32x2_t *)v40.i8 = vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v38, 3uLL)))))));
      v41.i64[0] = 0x1000000010;
      int16x4_t v42 = (int16x4_t)vbic_s8(*(int8x8_t *)v40.i8, (int8x8_t)vcgt_u32((uint32x2_t)0x1000000010, v38));
      __int32 v165 = v42.i32[0] | v42.i32[1];
      int16x4_t v163 = v42;
      BOOL v161 = v42.i32[0] != 0;
      BOOL v162 = v42.i32[1] != 0;
      unsigned int v168 = a7;
      do
      {
        unsigned int v43 = (8 * v24) | 7;
        if (8 * v24 <= v175) {
          int v44 = v175;
        }
        else {
          int v44 = 8 * v24;
        }
        if (v160 < v43) {
          unsigned int v43 = v160;
        }
        int v166 = v44 - 8 * v24;
        int v174 = v43 - v44 + 1;
        unsigned int v45 = v156;
        int v46 = v154;
        if (v24 != v155) {
          int v46 = 8;
        }
        unsigned int v182 = v46;
        uint64_t v173 = a3 + (v44 - v175) * a11;
        do
        {
          unsigned int v47 = 8 * v45;
          unsigned int v48 = 8 * (v45 + 1) - 1;
          if (8 * v45 <= a7) {
            int v49 = a7;
          }
          else {
            int v49 = 8 * v45;
          }
          if (v169 < v48) {
            unsigned int v48 = v169;
          }
          int v50 = v48 - v49 + 1;
          if (v45 == v178) {
            unsigned int v51 = v177;
          }
          else {
            unsigned int v51 = 8;
          }
          BOOL v52 = 1;
          if (8 * v24 >= v175 && v47 >= a7)
          {
            int v53 = v177;
            if (v45 != v178) {
              int v53 = 8;
            }
            BOOL v52 = v50 != v53 || v174 != v182;
          }
          if (v170)
          {
            if (v167 | v164)
            {
              int v55 = 0;
              uint64_t v56 = 0;
              BOOL v57 = v164 != 0;
              int v58 = 1;
              BOOL v60 = v167 != 0;
              unsigned int v59 = v164;
              unsigned int v61 = v167;
              do
              {
                --v61;
                if (v60) {
                  v56 |= (unint64_t)(v45 & ~(-1 << v167) & v58) << v55++;
                }
                else {
                  unsigned int v61 = 0;
                }
                --v59;
                if (v57) {
                  v56 |= (unint64_t)(v24 & ~(-1 << v164) & v58) << v55++;
                }
                else {
                  unsigned int v59 = 0;
                }
                v58 *= 2;
                --v55;
                BOOL v57 = v59 != 0;
                BOOL v60 = v61 != 0;
              }
              while (v59 | v61);
            }
            else
            {
              uint64_t v56 = 0;
            }
            uint64_t v69 = *(void *)(result + 320) * ((v45 >> v167) + (v24 >> v164) * v157) + (v56 << 9);
          }
          else
          {
            if (v165)
            {
              int v62 = 0;
              uint64_t v63 = 0;
              int v64 = 1;
              BOOL v65 = v161;
              BOOL v66 = v162;
              __int32 v68 = v163.i32[0];
              __int32 v67 = v163.i32[1];
              do
              {
                --v67;
                if (v66) {
                  v63 |= (unint64_t)(v64 & v45) << v62++;
                }
                else {
                  __int32 v67 = 0;
                }
                --v68;
                if (v65) {
                  v63 |= (unint64_t)(v64 & v24) << v62++;
                }
                else {
                  __int32 v68 = 0;
                }
                v64 *= 2;
                --v62;
                BOOL v65 = v68 != 0;
                BOOL v66 = v67 != 0;
              }
              while (v68 | v67);
            }
            else
            {
              uint64_t v63 = 0;
            }
            uint64_t v69 = v63 << 9;
          }
          unsigned int v70 = *(_DWORD *)(result + 128) >> (*(unsigned char *)(result + 144) + a12);
          if (v70 <= 1) {
            unsigned int v70 = 1;
          }
          unsigned int v71 = v70 + 7;
          if (v71 < 0x10) {
            unsigned int v72 = 0;
          }
          else {
            unsigned int v72 = 32 - __clz(~(-1 << -(char)__clz((v71 >> 3) - 1)));
          }
          unsigned int v73 = *(_DWORD *)(result + 132) >> (*(unsigned char *)(result + 144) + a12);
          if (v73 <= 1) {
            unsigned int v73 = 1;
          }
          unsigned int v74 = v73 + 7;
          if (v74 < 0x10)
          {
            unsigned int v75 = 0;
            if (!v72)
            {
LABEL_109:
              uint64_t v77 = 0;
              goto LABEL_110;
            }
          }
          else
          {
            unsigned int v75 = 32 - __clz(~(-1 << -(char)__clz((v74 >> 3) - 1)));
            if (!(v75 | v72)) {
              goto LABEL_109;
            }
          }
          int v76 = 0;
          uint64_t v77 = 0;
          BOOL v78 = v72 != 0;
          BOOL v79 = v75 != 0;
          int v80 = 1;
          do
          {
            --v72;
            if (v78) {
              v77 |= (unint64_t)(v80 & v45) << v76++;
            }
            else {
              unsigned int v72 = 0;
            }
            --v75;
            if (v79) {
              v77 |= (unint64_t)(v80 & v24) << v76++;
            }
            else {
              unsigned int v75 = 0;
            }
            v80 *= 2;
            --v76;
            BOOL v79 = v75 != 0;
            BOOL v78 = v72 != 0;
          }
          while (v75 | v72);
LABEL_110:
          unsigned int v81 = v49 - a7;
          int v82 = v51 < 8 || v52;
          float32x4_t v83 = (char *)(a4 + 8 * v77);
          unint64_t v84 = v173 + 8 * v81;
          uint64_t v85 = (int16x8_t *)(a2 + v69);
          if (v182 < 8) {
            int v86 = 1;
          }
          else {
            int v86 = v82;
          }
          unint64_t v180 = v85;
          if (v181)
          {
            if (!v86)
            {
              uint64_t v87 = (int16x8_t *)__dst;
LABEL_123:
              __src = v87;
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock(v84, a11, v87, v83, v51, v182, v42, *(int16x4_t *)v40.i8, *(double *)v41.i64, *(double *)v39.i64, v17, v18, v19, v20);
LABEL_124:
              a7 = v168;
              unsigned int v88 = v45 + 1;
              goto LABEL_216;
            }
            memcpy(__dst, v85, sizeof(__dst));
            uint64_t v87 = (int16x8_t *)__dst;
            uint64_t result = v176;
          }
          else
          {
            uint64_t v87 = v85;
            if (!v86) {
              goto LABEL_123;
            }
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE3ELj4ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = result;
          uint64_t v184 = v87;
          __src = v87;
          unsigned __int8 v192 = v51;
          unsigned __int8 v193 = v182;
          unsigned int v188 = v166;
          unsigned int v189 = v49 - v47;
          unint64_t v185 = v83;
          unint64_t v186 = v84;
          uint64_t v187 = a11;
          unsigned int v190 = v174;
          unsigned int v191 = v50;
          if (v52)
          {
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(result + 8) + 7384), block);
            goto LABEL_124;
          }
          unsigned int v89 = *v83;
          if (v89 == 63)
          {
            float32x4_t v92 = (const __int16 *)v87;
            int16x8_t v91 = *v87;
            int16x8_t v40 = v87[1];
            int16x8_t v41 = v87[2];
            int16x8_t v39 = v87[3];
            int16x8_t v195 = *v87;
            int16x8_t v196 = v41;
            int16x8_t v199 = v40;
            int16x8_t v200 = v39;
            uint64_t v90 = 64;
          }
          else if (v89 == 1)
          {
            float32x4_t v92 = (const __int16 *)v87;
            int16x8_t v91 = vld1q_dup_s16(v92);
            int16x8_t v195 = v91;
            int16x8_t v196 = v91;
            int16x8_t v199 = v91;
            int16x8_t v200 = v91;
            uint64_t v90 = 2;
          }
          else if (*v83)
          {
            float32x4_t v92 = (const __int16 *)v87;
            uint64_t v90 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v195, 64, (uint64_t)v87, v89, *(double *)&v42, *(double *)v40.i64, *(double *)v41.i64, *(int8x8_t *)v39.i8);
          }
          else
          {
            uint64_t v90 = 0;
            v91.i64[0] = 0;
            int16x8_t v195 = 0u;
            int16x8_t v196 = 0u;
            int16x8_t v199 = 0u;
            int16x8_t v200 = 0u;
            float32x4_t v92 = (const __int16 *)v87;
          }
          uint64_t v93 = (uint64_t)v92 + v90;
          unsigned int v94 = v83[1];
          if (v94 == 63)
          {
            int16x8_t v96 = *(int16x8_t *)v93;
            int16x8_t v40 = *(int16x8_t *)(v93 + 16);
            int16x8_t v41 = *(int16x8_t *)(v93 + 32);
            int16x8_t v39 = *(int16x8_t *)(v93 + 48);
            int16x8_t v203 = *(int16x8_t *)v93;
            int16x8_t v204 = v41;
            int16x8_t v207 = v40;
            int16x8_t v208 = v39;
            uint64_t v95 = 64;
            unsigned int v88 = v45 + 1;
          }
          else
          {
            unsigned int v88 = v45 + 1;
            if (v94 == 1)
            {
              int16x8_t v96 = vld1q_dup_s16((const __int16 *)v93);
              int16x8_t v203 = v96;
              int16x8_t v204 = v96;
              int16x8_t v207 = v96;
              int16x8_t v208 = v96;
              uint64_t v95 = 2;
            }
            else if (v83[1])
            {
              uint64_t v95 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v203, 64, v93, v94, *(double *)v91.i64, *(double *)v40.i64, *(double *)v41.i64, *(int8x8_t *)v39.i8);
            }
            else
            {
              uint64_t v95 = 0;
              v96.i64[0] = 0;
              int16x8_t v203 = 0u;
              int16x8_t v204 = 0u;
              int16x8_t v207 = 0u;
              int16x8_t v208 = 0u;
            }
          }
          uint64_t v97 = v93 + v95;
          unsigned int v98 = v83[2];
          if (v98 == 63)
          {
            int16x8_t v100 = *(int16x8_t *)v97;
            int16x8_t v40 = *(int16x8_t *)(v97 + 16);
            int16x8_t v41 = *(int16x8_t *)(v97 + 32);
            int16x8_t v39 = *(int16x8_t *)(v97 + 48);
            int16x8_t v197 = *(int16x8_t *)v97;
            int16x8_t v198 = v41;
            int16x8_t v201 = v40;
            int16x8_t v202 = v39;
            uint64_t v99 = 64;
          }
          else if (v98 == 1)
          {
            int16x8_t v100 = vld1q_dup_s16((const __int16 *)v97);
            int16x8_t v197 = v100;
            int16x8_t v198 = v100;
            int16x8_t v201 = v100;
            int16x8_t v202 = v100;
            uint64_t v99 = 2;
          }
          else if (v83[2])
          {
            uint64_t v99 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v197, 64, v97, v98, *(double *)v96.i64, *(double *)v40.i64, *(double *)v41.i64, *(int8x8_t *)v39.i8);
          }
          else
          {
            uint64_t v99 = 0;
            v100.i64[0] = 0;
            int16x8_t v197 = 0u;
            int16x8_t v198 = 0u;
            int16x8_t v201 = 0u;
            int16x8_t v202 = 0u;
          }
          uint64_t v101 = v97 + v99;
          unsigned int v102 = v83[3];
          if (v102 == 63)
          {
            int16x8_t v104 = *(int16x8_t *)v101;
            int16x8_t v40 = *(int16x8_t *)(v101 + 16);
            int16x8_t v41 = *(int16x8_t *)(v101 + 32);
            int16x8_t v39 = *(int16x8_t *)(v101 + 48);
            int16x8_t v205 = *(int16x8_t *)v101;
            int16x8_t v206 = v41;
            int16x8_t v209 = v40;
            int16x8_t v210 = v39;
            uint64_t v103 = 64;
          }
          else if (v102 == 1)
          {
            int16x8_t v104 = vld1q_dup_s16((const __int16 *)v101);
            int16x8_t v205 = v104;
            int16x8_t v206 = v104;
            int16x8_t v209 = v104;
            int16x8_t v210 = v104;
            uint64_t v103 = 2;
          }
          else if (v83[3])
          {
            uint64_t v103 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v205, 64, v101, v102, *(double *)v100.i64, *(double *)v40.i64, *(double *)v41.i64, *(int8x8_t *)v39.i8);
          }
          else
          {
            uint64_t v103 = 0;
            v104.i64[0] = 0;
            int16x8_t v205 = 0u;
            int16x8_t v206 = 0u;
            int16x8_t v209 = 0u;
            int16x8_t v210 = 0u;
          }
          uint64_t v105 = v101 + v103;
          unsigned int v106 = v83[4];
          if (v106 == 63)
          {
            int16x8_t v108 = *(int16x8_t *)v105;
            int16x8_t v40 = *(int16x8_t *)(v105 + 16);
            int16x8_t v41 = *(int16x8_t *)(v105 + 32);
            int16x8_t v39 = *(int16x8_t *)(v105 + 48);
            int16x8_t v211 = *(int16x8_t *)v105;
            int16x8_t v212 = v41;
            int16x8_t v215 = v40;
            int16x8_t v216 = v39;
            uint64_t v107 = 64;
          }
          else if (v106 == 1)
          {
            int16x8_t v108 = vld1q_dup_s16((const __int16 *)v105);
            int16x8_t v211 = v108;
            int16x8_t v212 = v108;
            int16x8_t v215 = v108;
            int16x8_t v216 = v108;
            uint64_t v107 = 2;
          }
          else if (v83[4])
          {
            uint64_t v107 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v211, 64, v105, v106, *(double *)v104.i64, *(double *)v40.i64, *(double *)v41.i64, *(int8x8_t *)v39.i8);
          }
          else
          {
            uint64_t v107 = 0;
            v108.i64[0] = 0;
            int16x8_t v211 = 0u;
            int16x8_t v212 = 0u;
            int16x8_t v215 = 0u;
            int16x8_t v216 = 0u;
          }
          uint64_t v109 = v105 + v107;
          unsigned int v110 = v83[5];
          if (v110 == 63)
          {
            int16x8_t v112 = *(int16x8_t *)v109;
            int16x8_t v40 = *(int16x8_t *)(v109 + 16);
            int16x8_t v41 = *(int16x8_t *)(v109 + 32);
            int16x8_t v39 = *(int16x8_t *)(v109 + 48);
            int16x8_t v219 = *(int16x8_t *)v109;
            int16x8_t v220 = v41;
            int16x8_t v223 = v40;
            int16x8_t v224 = v39;
            uint64_t v111 = 64;
          }
          else if (v110 == 1)
          {
            int16x8_t v112 = vld1q_dup_s16((const __int16 *)v109);
            int16x8_t v219 = v112;
            int16x8_t v220 = v112;
            int16x8_t v223 = v112;
            int16x8_t v224 = v112;
            uint64_t v111 = 2;
          }
          else if (v83[5])
          {
            uint64_t v111 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v219, 64, v109, v110, *(double *)v108.i64, *(double *)v40.i64, *(double *)v41.i64, *(int8x8_t *)v39.i8);
          }
          else
          {
            uint64_t v111 = 0;
            v112.i64[0] = 0;
            int16x8_t v219 = 0u;
            int16x8_t v220 = 0u;
            int16x8_t v223 = 0u;
            int16x8_t v224 = 0u;
          }
          uint64_t v113 = v109 + v111;
          unsigned int v114 = v83[6];
          if (v114 == 63)
          {
            int16x8_t v116 = *(int16x8_t *)v113;
            int16x8_t v40 = *(int16x8_t *)(v113 + 16);
            int16x8_t v41 = *(int16x8_t *)(v113 + 32);
            int16x8_t v39 = *(int16x8_t *)(v113 + 48);
            int16x8_t v213 = *(int16x8_t *)v113;
            int16x8_t v214 = v41;
            int16x8_t v217 = v40;
            int16x8_t v218 = v39;
            uint64_t v115 = 64;
          }
          else if (v114 == 1)
          {
            int16x8_t v116 = vld1q_dup_s16((const __int16 *)v113);
            int16x8_t v213 = v116;
            int16x8_t v214 = v116;
            int16x8_t v217 = v116;
            int16x8_t v218 = v116;
            uint64_t v115 = 2;
          }
          else if (v83[6])
          {
            uint64_t v115 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v213, 64, v113, v114, *(double *)v112.i64, *(double *)v40.i64, *(double *)v41.i64, *(int8x8_t *)v39.i8);
          }
          else
          {
            uint64_t v115 = 0;
            v116.i64[0] = 0;
            int16x8_t v213 = 0u;
            int16x8_t v214 = 0u;
            int16x8_t v217 = 0u;
            int16x8_t v218 = 0u;
          }
          uint64_t v117 = v113 + v115;
          unsigned int v118 = v83[7];
          if (v118 == 63)
          {
            int16x8_t v119 = *(int16x8_t *)v117;
            int16x8_t v40 = *(int16x8_t *)(v117 + 16);
            int16x8_t v41 = *(int16x8_t *)(v117 + 32);
            int16x8_t v39 = *(int16x8_t *)(v117 + 48);
            int16x8_t v221 = *(int16x8_t *)v117;
            int16x8_t v222 = v41;
            int16x8_t v225 = v40;
            int16x8_t v226 = v39;
            a7 = v168;
            uint64_t v120 = v190;
            if (!v190) {
              goto LABEL_215;
            }
          }
          else
          {
            a7 = v168;
            if (v118 == 1)
            {
              int16x8_t v119 = vld1q_dup_s16((const __int16 *)v117);
              int16x8_t v221 = v119;
              int16x8_t v222 = v119;
              int16x8_t v225 = v119;
              int16x8_t v226 = v119;
              uint64_t v120 = v190;
              if (!v190) {
                goto LABEL_215;
              }
            }
            else if (v118)
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v221, 64, v117, v118, *(double *)v116.i64, *(double *)v40.i64, *(double *)v41.i64, *(int8x8_t *)v39.i8);
              uint64_t v120 = v190;
              if (!v190) {
                goto LABEL_215;
              }
            }
            else
            {
              v119.i64[0] = 0;
              int16x8_t v221 = 0u;
              int16x8_t v222 = 0u;
              int16x8_t v225 = 0u;
              int16x8_t v226 = 0u;
              uint64_t v120 = v190;
              if (!v190) {
                goto LABEL_215;
              }
            }
          }
          if (v191)
          {
            uint64_t v121 = 0;
            unint64_t v122 = (unint64_t)v188 << 6;
            uint64_t v123 = 8 * v189;
            float32x4_t v124 = &v195.i8[v122 + v123];
            unint64_t v125 = v186;
            uint64_t v126 = v187;
            unint64_t v127 = 8 * v191;
            if (v127 <= 1) {
              unint64_t v128 = 1;
            }
            else {
              unint64_t v128 = 8 * v191;
            }
            unint64_t v129 = v122 + v123;
            unsigned int v130 = &v195.i8[v122 + v123];
            if (v128) {
              BOOL v131 = (v128 - 1) >> 32 == 0;
            }
            else {
              BOOL v131 = 0;
            }
            char v132 = !v131;
            uint64_t v133 = v128 & 0x7FFFFFFE0;
            uint64_t v134 = v128 & 0x7FFFFFFF8;
            float32x4_t v135 = &v196.i8[v129];
            float32x4_t v136 = (int16x8_t *)(v186 + 16);
            float32x4_t v137 = v124;
            unint64_t v138 = v186;
            do
            {
              float32x4_t v139 = (char *)(v125 + v126 * v121);
              uint64_t v140 = &v124[64 * v121];
              if ((unint64_t)(&v130[64 * v121] - v139) < 0x20) {
                char v141 = 1;
              }
              else {
                char v141 = v132;
              }
              if (v141)
              {
                int v142 = 0;
                goto LABEL_212;
              }
              if (v128 >= 0x20)
              {
                float32x4_t v144 = v136;
                float32x4_t v145 = (int16x8_t *)v135;
                uint64_t v146 = v128 & 0x7FFFFFFE0;
                do
                {
                  int16x8_t v119 = v144[-1];
                  int16x8_t v40 = *v144;
                  v145[-1] = v119;
                  *float32x4_t v145 = v40;
                  v145 += 2;
                  v144 += 2;
                  v146 -= 32;
                }
                while (v146);
                if (v128 == v133) {
                  goto LABEL_195;
                }
                uint64_t v143 = v128 & 0x7FFFFFFE0;
                if ((v128 & 0x18) == 0)
                {
                  v139 += v133;
                  v140 += v133;
                  int v142 = v128 & 0xFFFFFFE0;
                  goto LABEL_212;
                }
              }
              else
              {
                uint64_t v143 = 0;
              }
              v140 += v134;
              unint64_t v147 = v143 - (v128 & 0x7FFFFFFF8);
              float32x4_t v148 = (uint64_t *)(v138 + v143);
              float32x4_t v149 = (uint64_t *)&v137[v143];
              do
              {
                uint64_t v150 = *v148++;
                v119.i64[0] = v150;
                *v149++ = v150;
                v147 += 8;
              }
              while (v147);
              if (v128 == v134) {
                goto LABEL_195;
              }
              v139 += v134;
              int v142 = v128 & 0xFFFFFFF8;
LABEL_212:
              unsigned int v151 = v142 + 1;
              do
              {
                char v152 = *v139++;
                *v140++ = v152;
              }
              while (v127 > v151++);
LABEL_195:
              ++v121;
              v135 += 64;
              float32x4_t v136 = (int16x8_t *)((char *)v136 + v126);
              v138 += v126;
              v137 += 64;
            }
            while (v121 != v120);
          }
LABEL_215:
          AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)&v195, 64, v184, v185, v192, v193, *(int16x4_t *)v119.i8, *(int16x4_t *)v40.i8, *(double *)v41.i64, *(double *)v39.i64, v17, v18, v19, v20);
LABEL_216:
          if (v181) {
            memcpy(v180, __src, 0x200uLL);
          }
          BOOL v25 = v45 == v169 >> 3;
          unsigned int v45 = v88;
          uint64_t result = v176;
        }
        while (!v25);
        BOOL v25 = v24++ == v159;
      }
      while (!v25);
    }
  }
  return result;
}

uint64_t AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, char a12)
{
  uint64_t v243 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v193 = a8;
  unsigned int v178 = a8 + a10 - 1;
  uint64_t result = *(void *)(a1 + 168);
  if (result)
  {
    uint64_t result = IOSurfaceGetCacheMode();
    int v18 = result & 0xF00;
  }
  else
  {
    int v18 = 0;
  }
  unsigned int v19 = a5 - 1;
  unsigned int v20 = a6 - 1;
  unsigned int v21 = a8 >> 3;
  unsigned int v177 = v178 >> 3;
  BOOL v22 = (v18 & 0xD00) == 0 || v18 == 768;
  int v23 = v18 & 0xE00;
  int v25 = !v22 && v23 != 1024;
  int v197 = v25;
  uint64_t v26 = a1;
  if (*(unsigned char *)(a1 + 232))
  {
    unsigned int v27 = *(unsigned __int8 *)(a1 + 255);
    unsigned int v28 = *(unsigned __int8 *)(a1 + 254);
    char v29 = __clz(v19);
    if (1 << v27 >= a6 || a5 >> v28)
    {
      if (!(a6 >> v27) && 1 << v28 < a5)
      {
        if (a6 < 2) {
          unsigned int v32 = 0;
        }
        else {
          unsigned int v32 = __clz(~(-1 << -(char)__clz(v20))) - 32;
        }
        v28 += v27 + v32;
        unsigned int v27 = -v32;
      }
    }
    else
    {
      unsigned int v30 = 32 - __clz(~(-1 << -v29));
      unsigned int v31 = v28 + v27;
      if (a5 < 2) {
        unsigned int v30 = 0;
      }
      unsigned int v27 = v31 - v30;
      unsigned int v28 = v30;
    }
    if (a5 < 2)
    {
      if (v28) {
        goto LABEL_27;
      }
    }
    else if (32 - __clz(~(-1 << -v29)) < v28)
    {
LABEL_27:
      BOOL v188 = 0;
LABEL_32:
      unsigned int v185 = v28 - 3;
      unsigned int v182 = v27 - 3;
      int v34 = -1 << *(unsigned char *)(*(void *)(a1 + 208) + 48);
      unsigned int v175 = (((~v34 + a5) & v34) + ~(-1 << v28)) >> v28;
      goto LABEL_33;
    }
    if (a6 < 2) {
      unsigned int v33 = 0;
    }
    else {
      unsigned int v33 = 32 - __clz(~(-1 << -(char)__clz(v20)));
    }
    BOOL v188 = v33 >= v27;
    goto LABEL_32;
  }
  BOOL v188 = 0;
  unsigned int v175 = 0;
  unsigned int v182 = 0;
  unsigned int v185 = 0;
LABEL_33:
  if (v21 <= v177)
  {
    unsigned int v187 = a7 + a9 - 1;
    unsigned int v174 = a7 >> 3;
    if (a7 >> 3 <= v187 >> 3)
    {
      unsigned int v195 = v19 >> 3;
      unsigned int v173 = v20 >> 3;
      int v194 = (v19 & 7) + 1;
      int v172 = (v20 & 7) + 1;
      uint32x2_t v35 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0x700000007);
      v36.i64[0] = 0x2000000020;
      *(int32x2_t *)v37.i8 = vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v35, 3uLL)))))));
      v38.i64[0] = 0x1000000010;
      *(int8x8_t *)v39.i8 = vbic_s8(*(int8x8_t *)v37.i8, (int8x8_t)vcgt_u32((uint32x2_t)0x1000000010, v35));
      __int32 v183 = v39.i32[0] | v39.i32[1];
      uint64_t v181 = v39.i64[0];
      BOOL v179 = v39.i32[0] != 0;
      BOOL v180 = v39.i32[1] != 0;
      unsigned int v186 = a7;
      do
      {
        unsigned int v40 = (8 * v21) | 7;
        if (8 * v21 <= v193) {
          int v41 = v193;
        }
        else {
          int v41 = 8 * v21;
        }
        if (v178 < v40) {
          unsigned int v40 = v178;
        }
        int v184 = v41 - 8 * v21;
        int v192 = v40 - v41 + 1;
        unsigned int v42 = v174;
        int v43 = v172;
        if (v21 != v173) {
          int v43 = 8;
        }
        unsigned int v198 = v43;
        uint64_t v191 = a3 + (v41 - v193) * a11;
        do
        {
          unsigned int v44 = 8 * v42;
          unsigned int v45 = 8 * (v42 + 1) - 1;
          if (8 * v42 <= a7) {
            int v46 = a7;
          }
          else {
            int v46 = 8 * v42;
          }
          if (v187 < v45) {
            unsigned int v45 = v187;
          }
          int v47 = v45 - v46 + 1;
          if (v42 == v195) {
            unsigned int v48 = v194;
          }
          else {
            unsigned int v48 = 8;
          }
          BOOL v49 = 1;
          if (8 * v21 >= v193 && v44 >= a7)
          {
            int v50 = v194;
            if (v42 != v195) {
              int v50 = 8;
            }
            BOOL v49 = v47 != v50 || v192 != v198;
          }
          if (v188)
          {
            if (v185 | v182)
            {
              int v52 = 0;
              uint64_t v53 = 0;
              BOOL v54 = v182 != 0;
              int v55 = 1;
              BOOL v57 = v185 != 0;
              unsigned int v56 = v182;
              unsigned int v58 = v185;
              do
              {
                --v58;
                if (v57) {
                  v53 |= (unint64_t)(v42 & ~(-1 << v185) & v55) << v52++;
                }
                else {
                  unsigned int v58 = 0;
                }
                --v56;
                if (v54) {
                  v53 |= (unint64_t)(v21 & ~(-1 << v182) & v55) << v52++;
                }
                else {
                  unsigned int v56 = 0;
                }
                v55 *= 2;
                --v52;
                BOOL v54 = v56 != 0;
                BOOL v57 = v58 != 0;
              }
              while (v56 | v58);
            }
            else
            {
              uint64_t v53 = 0;
            }
            uint64_t v66 = *(void *)(v26 + 320) * ((v42 >> v185) + (v21 >> v182) * v175) + (v53 << 9);
          }
          else
          {
            if (v183)
            {
              int v59 = 0;
              uint64_t v60 = 0;
              int v61 = 1;
              BOOL v62 = v179;
              BOOL v63 = v180;
              int v65 = v181;
              int v64 = HIDWORD(v181);
              do
              {
                --v64;
                if (v63) {
                  v60 |= (unint64_t)(v61 & v42) << v59++;
                }
                else {
                  int v64 = 0;
                }
                --v65;
                if (v62) {
                  v60 |= (unint64_t)(v61 & v21) << v59++;
                }
                else {
                  int v65 = 0;
                }
                v61 *= 2;
                --v59;
                BOOL v62 = v65 != 0;
                BOOL v63 = v64 != 0;
              }
              while (v65 | v64);
            }
            else
            {
              uint64_t v60 = 0;
            }
            uint64_t v66 = v60 << 9;
          }
          unsigned int v67 = *(_DWORD *)(v26 + 128) >> (*(unsigned char *)(v26 + 144) + a12);
          if (v67 <= 1) {
            unsigned int v67 = 1;
          }
          unsigned int v68 = v67 + 7;
          if (v68 < 0x10) {
            unsigned int v69 = 0;
          }
          else {
            unsigned int v69 = 32 - __clz(~(-1 << -(char)__clz((v68 >> 3) - 1)));
          }
          unsigned int v70 = *(_DWORD *)(v26 + 132) >> (*(unsigned char *)(v26 + 144) + a12);
          if (v70 <= 1) {
            unsigned int v70 = 1;
          }
          unsigned int v71 = v70 + 7;
          if (v71 < 0x10)
          {
            unsigned int v72 = 0;
            if (!v69)
            {
LABEL_109:
              uint64_t v74 = 0;
              goto LABEL_110;
            }
          }
          else
          {
            unsigned int v72 = 32 - __clz(~(-1 << -(char)__clz((v71 >> 3) - 1)));
            if (!(v72 | v69)) {
              goto LABEL_109;
            }
          }
          int v73 = 0;
          uint64_t v74 = 0;
          BOOL v75 = v69 != 0;
          BOOL v76 = v72 != 0;
          int v77 = 1;
          do
          {
            --v69;
            if (v75) {
              v74 |= (unint64_t)(v77 & v42) << v73++;
            }
            else {
              unsigned int v69 = 0;
            }
            --v72;
            if (v76) {
              v74 |= (unint64_t)(v77 & v21) << v73++;
            }
            else {
              unsigned int v72 = 0;
            }
            v77 *= 2;
            --v73;
            BOOL v76 = v72 != 0;
            BOOL v75 = v69 != 0;
          }
          while (v72 | v69);
LABEL_110:
          unsigned int v78 = v46 - a7;
          int v79 = v48 < 8 || v49;
          int v80 = (char *)(a4 + 8 * v74);
          unsigned int v81 = (_OWORD *)(v191 + 8 * v78);
          int v82 = (int16x8_t *)(a2 + v66);
          if (v198 < 8) {
            int v83 = 1;
          }
          else {
            int v83 = v79;
          }
          int16x8_t v196 = v82;
          if (v197)
          {
            if (!v83)
            {
              unint64_t v84 = (int16x8_t *)__dst;
LABEL_123:
              int v86 = v84;
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock(v81, a11, v84, v80, v48, v198);
              goto LABEL_124;
            }
            memcpy(__dst, v82, sizeof(__dst));
            unint64_t v84 = (int16x8_t *)__dst;
            uint64_t v26 = a1;
          }
          else
          {
            unint64_t v84 = v82;
            if (!v83) {
              goto LABEL_123;
            }
          }
          block[0] = MEMORY[0x263EF8330];
          unsigned int v85 = v46 - v44;
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE3ELj4ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = v26;
          int16x8_t v200 = v84;
          int v86 = v84;
          unsigned __int8 v208 = v48;
          unsigned __int8 v209 = v198;
          unsigned int v204 = v184;
          unsigned int v205 = v85;
          int16x8_t v201 = v80;
          int16x8_t v202 = v81;
          uint64_t v203 = a11;
          unsigned int v206 = v192;
          unsigned int v207 = v47;
          if (v49)
          {
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(v26 + 8) + 7384), block);
LABEL_124:
            uint64_t v26 = a1;
            uint64_t result = (uint64_t)v196;
            a7 = v186;
            unsigned int v87 = v42 + 1;
            if (!v197) {
              goto LABEL_46;
            }
LABEL_267:
            uint64_t result = (uint64_t)memcpy((void *)result, v86, 0x200uLL);
            uint64_t v26 = a1;
            goto LABEL_46;
          }
          unsigned int v88 = *v80;
          if (v88 == 63)
          {
            int16x8_t v91 = v84;
            int16x8_t v90 = *v84;
            int16x8_t v37 = v84[1];
            int16x8_t v38 = v84[2];
            int16x8_t v36 = v84[3];
            int16x8_t v211 = *v84;
            int16x8_t v212 = v38;
            int16x8_t v215 = v37;
            int16x8_t v216 = v36;
            uint64_t v89 = 64;
          }
          else if (v88 == 1)
          {
            int16x8_t v91 = v84;
            int16x8_t v90 = vld1q_dup_s16(v84->i16);
            int16x8_t v211 = v90;
            int16x8_t v212 = v90;
            int16x8_t v215 = v90;
            int16x8_t v216 = v90;
            uint64_t v89 = 2;
          }
          else if (*v80)
          {
            int16x8_t v91 = v84;
            uint64_t v89 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v211, 64, (uint64_t)v84, v88, *(double *)v39.i64, *(double *)v37.i64, *(double *)v38.i64, *(int8x8_t *)v36.i8);
          }
          else
          {
            uint64_t v89 = 0;
            v90.i64[0] = 0;
            int16x8_t v211 = 0u;
            int16x8_t v212 = 0u;
            int16x8_t v215 = 0u;
            int16x8_t v216 = 0u;
            int16x8_t v91 = v84;
          }
          uint64_t v92 = (uint64_t)v91->i64 + v89;
          unsigned int v93 = v80[1];
          if (v93 == 63)
          {
            int16x8_t v95 = *(int16x8_t *)v92;
            int16x8_t v37 = *(int16x8_t *)(v92 + 16);
            int16x8_t v38 = *(int16x8_t *)(v92 + 32);
            int16x8_t v36 = *(int16x8_t *)(v92 + 48);
            int16x8_t v219 = *(int16x8_t *)v92;
            int16x8_t v220 = v38;
            int16x8_t v223 = v37;
            int16x8_t v224 = v36;
            uint64_t v94 = 64;
          }
          else if (v93 == 1)
          {
            int16x8_t v95 = vld1q_dup_s16((const __int16 *)v92);
            int16x8_t v219 = v95;
            int16x8_t v220 = v95;
            int16x8_t v223 = v95;
            int16x8_t v224 = v95;
            uint64_t v94 = 2;
          }
          else if (v80[1])
          {
            uint64_t v94 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v219, 64, v92, v93, *(double *)v90.i64, *(double *)v37.i64, *(double *)v38.i64, *(int8x8_t *)v36.i8);
          }
          else
          {
            uint64_t v94 = 0;
            v95.i64[0] = 0;
            int16x8_t v219 = 0u;
            int16x8_t v220 = 0u;
            int16x8_t v223 = 0u;
            int16x8_t v224 = 0u;
          }
          uint64_t v96 = v92 + v94;
          unsigned int v97 = v80[2];
          if (v97 == 63)
          {
            int16x8_t v99 = *(int16x8_t *)v96;
            int16x8_t v37 = *(int16x8_t *)(v96 + 16);
            int16x8_t v38 = *(int16x8_t *)(v96 + 32);
            int16x8_t v36 = *(int16x8_t *)(v96 + 48);
            int16x8_t v213 = *(int16x8_t *)v96;
            int16x8_t v214 = v38;
            int16x8_t v217 = v37;
            int16x8_t v218 = v36;
            uint64_t v98 = 64;
          }
          else if (v97 == 1)
          {
            int16x8_t v99 = vld1q_dup_s16((const __int16 *)v96);
            int16x8_t v213 = v99;
            int16x8_t v214 = v99;
            int16x8_t v217 = v99;
            int16x8_t v218 = v99;
            uint64_t v98 = 2;
          }
          else if (v80[2])
          {
            uint64_t v98 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v213, 64, v96, v97, *(double *)v95.i64, *(double *)v37.i64, *(double *)v38.i64, *(int8x8_t *)v36.i8);
          }
          else
          {
            uint64_t v98 = 0;
            v99.i64[0] = 0;
            int16x8_t v213 = 0u;
            int16x8_t v214 = 0u;
            int16x8_t v217 = 0u;
            int16x8_t v218 = 0u;
          }
          uint64_t v100 = v96 + v98;
          unsigned int v101 = v80[3];
          if (v101 == 63)
          {
            int16x8_t v103 = *(int16x8_t *)v100;
            int16x8_t v37 = *(int16x8_t *)(v100 + 16);
            int16x8_t v38 = *(int16x8_t *)(v100 + 32);
            int16x8_t v36 = *(int16x8_t *)(v100 + 48);
            int16x8_t v221 = *(int16x8_t *)v100;
            int16x8_t v222 = v38;
            int16x8_t v225 = v37;
            int16x8_t v226 = v36;
            uint64_t v102 = 64;
          }
          else if (v101 == 1)
          {
            int16x8_t v103 = vld1q_dup_s16((const __int16 *)v100);
            int16x8_t v221 = v103;
            int16x8_t v222 = v103;
            int16x8_t v225 = v103;
            int16x8_t v226 = v103;
            uint64_t v102 = 2;
          }
          else if (v80[3])
          {
            uint64_t v102 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v221, 64, v100, v101, *(double *)v99.i64, *(double *)v37.i64, *(double *)v38.i64, *(int8x8_t *)v36.i8);
          }
          else
          {
            uint64_t v102 = 0;
            v103.i64[0] = 0;
            int16x8_t v221 = 0u;
            int16x8_t v222 = 0u;
            int16x8_t v225 = 0u;
            int16x8_t v226 = 0u;
          }
          uint64_t v104 = v100 + v102;
          unsigned int v105 = v80[4];
          if (v105 == 63)
          {
            int16x8_t v107 = *(int16x8_t *)v104;
            int16x8_t v37 = *(int16x8_t *)(v104 + 16);
            int16x8_t v38 = *(int16x8_t *)(v104 + 32);
            int16x8_t v36 = *(int16x8_t *)(v104 + 48);
            int16x8_t v227 = *(int16x8_t *)v104;
            int16x8_t v228 = v38;
            int16x8_t v231 = v37;
            int16x8_t v232 = v36;
            uint64_t v106 = 64;
          }
          else if (v105 == 1)
          {
            int16x8_t v107 = vld1q_dup_s16((const __int16 *)v104);
            int16x8_t v227 = v107;
            int16x8_t v228 = v107;
            int16x8_t v231 = v107;
            int16x8_t v232 = v107;
            uint64_t v106 = 2;
          }
          else if (v80[4])
          {
            uint64_t v106 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v227, 64, v104, v105, *(double *)v103.i64, *(double *)v37.i64, *(double *)v38.i64, *(int8x8_t *)v36.i8);
          }
          else
          {
            uint64_t v106 = 0;
            v107.i64[0] = 0;
            int16x8_t v227 = 0u;
            int16x8_t v228 = 0u;
            int16x8_t v231 = 0u;
            int16x8_t v232 = 0u;
          }
          uint64_t v108 = v104 + v106;
          unsigned int v109 = v80[5];
          if (v109 == 63)
          {
            int16x8_t v111 = *(int16x8_t *)v108;
            int16x8_t v37 = *(int16x8_t *)(v108 + 16);
            int16x8_t v38 = *(int16x8_t *)(v108 + 32);
            int16x8_t v36 = *(int16x8_t *)(v108 + 48);
            int16x8_t v235 = *(int16x8_t *)v108;
            int16x8_t v236 = v38;
            int16x8_t v239 = v37;
            int16x8_t v240 = v36;
            uint64_t v110 = 64;
          }
          else if (v109 == 1)
          {
            int16x8_t v111 = vld1q_dup_s16((const __int16 *)v108);
            int16x8_t v235 = v111;
            int16x8_t v236 = v111;
            int16x8_t v239 = v111;
            int16x8_t v240 = v111;
            uint64_t v110 = 2;
          }
          else if (v80[5])
          {
            uint64_t v110 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v235, 64, v108, v109, *(double *)v107.i64, *(double *)v37.i64, *(double *)v38.i64, *(int8x8_t *)v36.i8);
          }
          else
          {
            uint64_t v110 = 0;
            v111.i64[0] = 0;
            int16x8_t v235 = 0u;
            int16x8_t v236 = 0u;
            int16x8_t v239 = 0u;
            int16x8_t v240 = 0u;
          }
          uint64_t v112 = v108 + v110;
          unsigned int v113 = v80[6];
          if (v113 == 63)
          {
            int16x8_t v115 = *(int16x8_t *)v112;
            int16x8_t v37 = *(int16x8_t *)(v112 + 16);
            int16x8_t v38 = *(int16x8_t *)(v112 + 32);
            int16x8_t v36 = *(int16x8_t *)(v112 + 48);
            int16x8_t v229 = *(int16x8_t *)v112;
            int16x8_t v230 = v38;
            int16x8_t v233 = v37;
            int16x8_t v234 = v36;
            uint64_t v114 = 64;
          }
          else if (v113 == 1)
          {
            int16x8_t v115 = vld1q_dup_s16((const __int16 *)v112);
            int16x8_t v229 = v115;
            int16x8_t v230 = v115;
            int16x8_t v233 = v115;
            int16x8_t v234 = v115;
            uint64_t v114 = 2;
          }
          else if (v80[6])
          {
            uint64_t v114 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v229, 64, v112, v113, *(double *)v111.i64, *(double *)v37.i64, *(double *)v38.i64, *(int8x8_t *)v36.i8);
          }
          else
          {
            uint64_t v114 = 0;
            v115.i64[0] = 0;
            int16x8_t v229 = 0u;
            int16x8_t v230 = 0u;
            int16x8_t v233 = 0u;
            int16x8_t v234 = 0u;
          }
          uint64_t v116 = v112 + v114;
          unsigned int v117 = v80[7];
          if (v117 == 63)
          {
            int16x8_t v39 = *(int16x8_t *)v116;
            int16x8_t v37 = *(int16x8_t *)(v116 + 16);
            int16x8_t v38 = *(int16x8_t *)(v116 + 32);
            int16x8_t v36 = *(int16x8_t *)(v116 + 48);
            int16x8_t v237 = *(int16x8_t *)v116;
            int16x8_t v238 = v38;
            int16x8_t v241 = v37;
            int16x8_t v242 = v36;
            a7 = v186;
            uint64_t v118 = v206;
            if (v206) {
              goto LABEL_185;
            }
          }
          else
          {
            a7 = v186;
            if (v117 == 1)
            {
              int16x8_t v39 = vld1q_dup_s16((const __int16 *)v116);
              int16x8_t v237 = v39;
              int16x8_t v238 = v39;
              int16x8_t v241 = v39;
              int16x8_t v242 = v39;
              uint64_t v118 = v206;
              if (v206) {
                goto LABEL_185;
              }
            }
            else
            {
              if (v117)
              {
                AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v237, 64, v116, v117, *(double *)v115.i64, *(double *)v37.i64, *(double *)v38.i64, *(int8x8_t *)v36.i8);
                uint64_t v118 = v206;
                if (!v206) {
                  goto LABEL_216;
                }
LABEL_185:
                if (!v207) {
                  goto LABEL_216;
                }
                uint64_t v119 = 0;
                unint64_t v120 = (unint64_t)v204 << 6;
                uint64_t v121 = 8 * v205;
                unint64_t v122 = &v211.i8[v120 + v121];
                uint64_t v123 = v202;
                uint64_t v124 = v203;
                unint64_t v125 = 8 * v207;
                if (v125 <= 1) {
                  unint64_t v126 = 1;
                }
                else {
                  unint64_t v126 = 8 * v207;
                }
                unint64_t v127 = v120 + v121;
                unint64_t v128 = &v211.i8[v120 + v121];
                if (v126) {
                  BOOL v129 = (v126 - 1) >> 32 == 0;
                }
                else {
                  BOOL v129 = 0;
                }
                char v130 = !v129;
                uint64_t v131 = v126 & 0x7FFFFFFE0;
                uint64_t v132 = v126 & 0x7FFFFFFF8;
                uint64_t v133 = &v212.i8[v127];
                uint64_t v134 = (int16x8_t *)(v202 + 1);
                float32x4_t v135 = v122;
                float32x4_t v136 = v202;
                while (2)
                {
                  float32x4_t v137 = (char *)v123 + v124 * v119;
                  unint64_t v138 = &v122[64 * v119];
                  if ((unint64_t)(&v128[64 * v119] - v137) < 0x20) {
                    char v139 = 1;
                  }
                  else {
                    char v139 = v130;
                  }
                  if (v139)
                  {
                    int v140 = 0;
LABEL_213:
                    unsigned int v149 = v140 + 1;
                    do
                    {
                      char v150 = *v137++;
                      *v138++ = v150;
                    }
                    while (v125 > v149++);
                  }
                  else
                  {
                    if (v126 >= 0x20)
                    {
                      int v142 = v134;
                      uint64_t v143 = (int16x8_t *)v133;
                      uint64_t v144 = v126 & 0x7FFFFFFE0;
                      do
                      {
                        int16x8_t v39 = v142[-1];
                        int16x8_t v37 = *v142;
                        v143[-1] = v39;
                        *uint64_t v143 = v37;
                        v143 += 2;
                        v142 += 2;
                        v144 -= 32;
                      }
                      while (v144);
                      if (v126 == v131) {
                        goto LABEL_196;
                      }
                      uint64_t v141 = v126 & 0x7FFFFFFE0;
                      if ((v126 & 0x18) == 0)
                      {
                        v137 += v131;
                        v138 += v131;
                        int v140 = v126 & 0xFFFFFFE0;
                        goto LABEL_213;
                      }
                    }
                    else
                    {
                      uint64_t v141 = 0;
                    }
                    v138 += v132;
                    unint64_t v145 = v141 - (v126 & 0x7FFFFFFF8);
                    uint64_t v146 = (uint64_t *)((char *)v136 + v141);
                    unint64_t v147 = (uint64_t *)&v135[v141];
                    do
                    {
                      uint64_t v148 = *v146++;
                      v39.i64[0] = v148;
                      *v147++ = v148;
                      v145 += 8;
                    }
                    while (v145);
                    if (v126 != v132)
                    {
                      v137 += v132;
                      int v140 = v126 & 0xFFFFFFF8;
                      goto LABEL_213;
                    }
                  }
LABEL_196:
                  ++v119;
                  v133 += 64;
                  uint64_t v134 = (int16x8_t *)((char *)v134 + v124);
                  float32x4_t v136 = (_OWORD *)((char *)v136 + v124);
                  v135 += 64;
                  if (v119 == v118) {
                    goto LABEL_216;
                  }
                  continue;
                }
              }
              v39.i64[0] = 0;
              int16x8_t v237 = 0u;
              int16x8_t v238 = 0u;
              int16x8_t v241 = 0u;
              int16x8_t v242 = 0u;
              uint64_t v118 = v206;
              if (v206) {
                goto LABEL_185;
              }
            }
          }
LABEL_216:
          char v152 = 0;
          int v154 = v200;
          uint64_t v153 = v201;
          int v155 = v208;
          int v156 = v209;
          if (v208 >= 4u) {
            int v157 = 4;
          }
          else {
            int v157 = v208;
          }
          if (v209 >= 2u) {
            int v158 = 2;
          }
          else {
            int v158 = v209;
          }
          if (v157)
          {
            uint64_t v26 = a1;
            unsigned int v87 = v42 + 1;
            if (v158)
            {
              v39.i64[0] = v211.i64[0];
              int16x8_t v37 = v212;
              int16x8_t v38 = v215;
              int16x8_t v36 = v216;
              int16x8_t *v200 = v211;
              v154[1] = v38;
              v154[2] = v37;
              v154[3] = v36;
              v154 += 4;
              char v152 = 63;
            }
          }
          else
          {
            uint64_t v26 = a1;
            unsigned int v87 = v42 + 1;
          }
          char v159 = 0;
          *uint64_t v153 = v152;
          if (v156 <= 2) {
            int v160 = 2;
          }
          else {
            int v160 = v156;
          }
          unsigned int v161 = v160 - 2;
          if (v161 >= 2) {
            unsigned int v161 = 2;
          }
          if (v157 && v161)
          {
            v39.i64[0] = v219.i64[0];
            int16x8_t v37 = v220;
            int16x8_t v38 = v223;
            int16x8_t v36 = v224;
            *int v154 = v219;
            v154[1] = v38;
            v154[2] = v37;
            v154[3] = v36;
            v154 += 4;
            char v159 = 63;
          }
          char v162 = 0;
          v153[1] = v159;
          if (v155 <= 4) {
            int v155 = 4;
          }
          unsigned int v163 = v155 - 4;
          if (v163 >= 4) {
            unsigned int v163 = 4;
          }
          if (v163 && v158)
          {
            v39.i64[0] = v213.i64[0];
            int16x8_t v37 = v214;
            int16x8_t v38 = v217;
            int16x8_t v36 = v218;
            *int v154 = v213;
            v154[1] = v38;
            v154[2] = v37;
            v154[3] = v36;
            v154 += 4;
            char v162 = 63;
          }
          char v164 = 0;
          v153[2] = v162;
          if (v163)
          {
            uint64_t result = (uint64_t)v196;
            if (v161)
            {
              v39.i64[0] = v221.i64[0];
              int16x8_t v37 = v222;
              int16x8_t v38 = v225;
              int16x8_t v36 = v226;
              *int v154 = v221;
              v154[1] = v38;
              v154[2] = v37;
              v154[3] = v36;
              v154 += 4;
              char v164 = 63;
            }
          }
          else
          {
            uint64_t result = (uint64_t)v196;
          }
          char v165 = 0;
          v153[3] = v164;
          if (v156 <= 4) {
            int v166 = 4;
          }
          else {
            int v166 = v156;
          }
          unsigned int v167 = v166 - 4;
          if (v167 >= 2) {
            unsigned int v167 = 2;
          }
          if (v157 && v167)
          {
            v39.i64[0] = v227.i64[0];
            int16x8_t v37 = v228;
            int16x8_t v38 = v231;
            int16x8_t v36 = v232;
            *int v154 = v227;
            v154[1] = v38;
            v154[2] = v37;
            v154[3] = v36;
            v154 += 4;
            char v165 = 63;
          }
          char v168 = 0;
          v153[4] = v165;
          if (v156 <= 6) {
            int v156 = 6;
          }
          unsigned int v169 = v156 - 6;
          if (v169 >= 2) {
            unsigned int v169 = 2;
          }
          if (v157 && v169)
          {
            v39.i64[0] = v235.i64[0];
            int16x8_t v37 = v236;
            int16x8_t v38 = v239;
            int16x8_t v36 = v240;
            *int v154 = v235;
            v154[1] = v38;
            v154[2] = v37;
            v154[3] = v36;
            v154 += 4;
            char v168 = 63;
          }
          char v170 = 0;
          v153[5] = v168;
          if (v163 && v167)
          {
            v39.i64[0] = v229.i64[0];
            int16x8_t v37 = v230;
            int16x8_t v38 = v233;
            int16x8_t v36 = v234;
            *int v154 = v229;
            v154[1] = v38;
            v154[2] = v37;
            v154[3] = v36;
            v154 += 4;
            char v170 = 63;
          }
          char v171 = 0;
          v153[6] = v170;
          if (v163)
          {
            if (v169)
            {
              v39.i64[0] = v237.i64[0];
              int16x8_t v37 = v238;
              int16x8_t v38 = v241;
              int16x8_t v36 = v242;
              *int v154 = v237;
              v154[1] = v38;
              v154[2] = v37;
              v154[3] = v36;
              char v171 = 63;
            }
          }
          v153[7] = v171;
          if (v197) {
            goto LABEL_267;
          }
LABEL_46:
          BOOL v22 = v42 == v187 >> 3;
          unsigned int v42 = v87;
        }
        while (!v22);
        BOOL v22 = v21++ == v177;
      }
      while (!v22);
    }
  }
  return result;
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, uint64_t a7, unsigned int a8, int a9, int a10, uint64_t a11, int a12)
{
  uint64_t v227 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  uint64_t v17 = a1;
  unsigned int v176 = a8;
  unsigned int v18 = a8 >> 3;
  unsigned int v161 = a8 + a10 - 1;
  unsigned int v163 = v161 >> 3;
  unsigned int v19 = *(unsigned __int8 *)(*(void *)(a1 + 208) + 88);
  unsigned int v20 = *(_DWORD *)(a1 + 112);
  uint64_t v177 = v17;
  if (*(void *)(v17 + 168))
  {
    __int16 CacheMode = IOSurfaceGetCacheMode();
    uint64_t v17 = v177;
    int v22 = CacheMode & 0xF00;
  }
  else
  {
    int v22 = 0;
  }
  BOOL v23 = (v22 & 0xD00) == 0 || v22 == 768;
  int v24 = v22 & 0xE00;
  int v26 = !v23 && v24 != 1024;
  int v181 = v26;
  BOOL isLevelTiled = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::isLevelTiled(v17, *(_DWORD *)(v17 + 144) + a12);
  uint64_t v32 = v177;
  BOOL v170 = isLevelTiled;
  if (v18 <= v163)
  {
    unsigned int v169 = a7 + a9 - 1;
    unsigned int v160 = a7 >> 3;
    if (a7 >> 3 <= v169 >> 3)
    {
      unsigned int v157 = a5 - 1;
      unsigned int v179 = (a5 - 1) >> 3;
      int v178 = ((a5 - 1) & 7) + 1;
      int v158 = ((a6 - 1) & 7) + 1;
      unsigned int v159 = (a6 - 1) >> 3;
      uint32x2_t v33 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0x700000007);
      v34.i64[0] = 0x2000000020;
      *(int32x2_t *)v35.i8 = vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v33, 3uLL)))))));
      v36.i64[0] = 0x1000000010;
      int16x4_t v37 = (int16x4_t)vbic_s8(*(int8x8_t *)v35.i8, (int8x8_t)vcgt_u32((uint32x2_t)0x1000000010, v33));
      __int32 v168 = v37.i32[0] | v37.i32[1];
      BOOL v166 = v37.i32[1] != 0;
      int16x4_t v167 = v37;
      BOOL v165 = v37.i32[0] != 0;
      unint64_t v156 = 8 * v20 * (unint64_t)v19;
      do
      {
        unsigned int v38 = (8 * v18) | 7;
        if (8 * v18 <= v176) {
          int v39 = v176;
        }
        else {
          int v39 = 8 * v18;
        }
        unsigned int v40 = v160;
        if (v161 < v38) {
          unsigned int v38 = v161;
        }
        unsigned int v175 = 8 * v18;
        int v164 = v39 - 8 * v18;
        int v174 = v38 - v39 + 1;
        int v41 = v158;
        if (v18 != v159) {
          int v41 = 8;
        }
        unsigned int v182 = v41;
        uint64_t v173 = a3 + (v39 - v176) * a11;
        do
        {
          unsigned int v42 = 8 * v40;
          unsigned int v43 = 8 * (v40 + 1) - 1;
          if (8 * v40 <= a7) {
            int v44 = a7;
          }
          else {
            int v44 = 8 * v40;
          }
          if (v169 < v43) {
            unsigned int v43 = v169;
          }
          int v45 = v43 - v44 + 1;
          if (v40 == v179) {
            unsigned int v46 = v178;
          }
          else {
            unsigned int v46 = 8;
          }
          BOOL v47 = 1;
          if (v175 >= v176 && v42 >= a7)
          {
            int v48 = v178;
            if (v40 != v179) {
              int v48 = 8;
            }
            BOOL v47 = v45 != v48 || v174 != v182;
          }
          if (v170)
          {
            unsigned int v69 = 0;
            uint64_t v70 = v156 >> (*(unsigned char *)(v32 + 57) != 0);
            char v71 = 1;
            if (v70 > 127)
            {
              if (v70 > 511)
              {
                if (v70 == 512)
                {
                  char v71 = 0;
                  char v72 = 0;
                  unsigned int v69 = 16;
                  unsigned int v73 = 16;
                }
                else
                {
                  char v72 = 1;
                  unsigned int v73 = 0;
                  if (v70 == 1024)
                  {
                    char v71 = 0;
                    unsigned int v73 = 8;
                    unsigned int v69 = 16;
                  }
                }
              }
              else if (v70 == 128)
              {
                char v71 = 0;
                char v72 = 0;
                unsigned int v69 = 32;
                unsigned int v73 = 32;
              }
              else
              {
                char v72 = 1;
                unsigned int v73 = 0;
                if (v70 == 256)
                {
                  char v71 = 0;
                  char v72 = 0;
                  unsigned int v73 = 16;
                  unsigned int v69 = 32;
                }
              }
            }
            else
            {
              char v72 = 1;
              unsigned int v73 = 0;
              switch(v70)
              {
                case 4:
                  char v71 = 0;
                  char v72 = 0;
                  unsigned int v73 = 128;
                  unsigned int v69 = 256;
                  break;
                case 5:
                case 6:
                case 7:
                case 9:
                case 10:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 17:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                  break;
                case 8:
                  char v71 = 0;
                  char v72 = 0;
                  unsigned int v69 = 128;
                  unsigned int v73 = 128;
                  break;
                case 16:
                  char v71 = 0;
                  char v72 = 0;
                  unsigned int v73 = 64;
                  unsigned int v69 = 128;
                  break;
                case 32:
                  char v71 = 0;
                  char v72 = 0;
                  unsigned int v69 = 64;
                  unsigned int v73 = 64;
                  break;
                default:
                  if (v70 == 64)
                  {
                    char v71 = 0;
                    char v72 = 0;
                    unsigned int v73 = 32;
                    unsigned int v69 = 64;
                  }
                  break;
              }
            }
            unsigned int v145 = (v69 >> 3) - 1;
            if (v71) {
              unsigned int v146 = 0;
            }
            else {
              unsigned int v146 = 32 - __clz(~(-1 << -(char)__clz(v145)));
            }
            unsigned int v147 = (v73 >> 3) - 1;
            if (v72)
            {
              unsigned int v148 = 0;
              if (v146) {
                goto LABEL_207;
              }
            }
            else
            {
              unsigned int v148 = 32 - __clz(~(-1 << -(char)__clz(v147)));
              if (v148 | v146)
              {
LABEL_207:
                int v149 = 0;
                uint64_t v150 = 0;
                int v151 = v40 & v145;
                int v152 = v18 & v147;
                BOOL v153 = v146 != 0;
                BOOL v154 = v148 != 0;
                int v155 = 1;
                do
                {
                  --v146;
                  if (v153) {
                    v150 |= (unint64_t)(v155 & v151) << v149++;
                  }
                  else {
                    unsigned int v146 = 0;
                  }
                  --v148;
                  if (v154) {
                    v150 |= (unint64_t)(v155 & v152) << v149++;
                  }
                  else {
                    unsigned int v148 = 0;
                  }
                  v155 *= 2;
                  --v149;
                  BOOL v154 = v148 != 0;
                  BOOL v153 = v146 != 0;
                }
                while (v148 | v146);
                goto LABEL_219;
              }
            }
            uint64_t v150 = 0;
LABEL_219:
            unint64_t v57 = ((unint64_t)(v42 / v69 + v175 / v73 * ((v69 + v157) / v69)) << 14) + (v150 << 9);
            goto LABEL_58;
          }
          if (v168)
          {
            int v50 = 0;
            uint64_t v51 = 0;
            int v52 = 1;
            BOOL v53 = v165;
            BOOL v54 = v166;
            __int32 v56 = v167.i32[0];
            __int32 v55 = v167.i32[1];
            do
            {
              --v55;
              if (v54) {
                v51 |= (unint64_t)(v52 & v40) << v50++;
              }
              else {
                __int32 v55 = 0;
              }
              --v56;
              if (v53) {
                v51 |= (unint64_t)(v52 & v18) << v50++;
              }
              else {
                __int32 v56 = 0;
              }
              v52 *= 2;
              --v50;
              BOOL v53 = v56 != 0;
              BOOL v54 = v55 != 0;
            }
            while (v56 | v55);
          }
          else
          {
            uint64_t v51 = 0;
          }
          unint64_t v57 = v51 << 9;
LABEL_58:
          unsigned int v58 = *(_DWORD *)(v32 + 128) >> (*(unsigned char *)(v32 + 144) + a12);
          if (v58 <= 1) {
            unsigned int v58 = 1;
          }
          unsigned int v59 = v58 + 7;
          if (v59 < 0x10) {
            unsigned int v60 = 0;
          }
          else {
            unsigned int v60 = 32 - __clz(~(-1 << -(char)__clz((v59 >> 3) - 1)));
          }
          unsigned int v61 = *(_DWORD *)(v32 + 132) >> (*(unsigned char *)(v32 + 144) + a12);
          if (v61 <= 1) {
            unsigned int v61 = 1;
          }
          unsigned int v62 = v61 + 7;
          if (v62 < 0x10)
          {
            unsigned int v63 = 0;
            if (!v60)
            {
LABEL_80:
              uint64_t v65 = 0;
              goto LABEL_81;
            }
          }
          else
          {
            unsigned int v63 = 32 - __clz(~(-1 << -(char)__clz((v62 >> 3) - 1)));
            if (!(v63 | v60)) {
              goto LABEL_80;
            }
          }
          int v64 = 0;
          uint64_t v65 = 0;
          BOOL v66 = v60 != 0;
          BOOL v67 = v63 != 0;
          int v68 = 1;
          do
          {
            --v60;
            if (v66) {
              v65 |= (unint64_t)(v68 & v40) << v64++;
            }
            else {
              unsigned int v60 = 0;
            }
            --v63;
            if (v67) {
              v65 |= (unint64_t)(v68 & v18) << v64++;
            }
            else {
              unsigned int v63 = 0;
            }
            v68 *= 2;
            --v64;
            BOOL v67 = v63 != 0;
            BOOL v66 = v60 != 0;
          }
          while (v63 | v60);
LABEL_81:
          uint64_t v74 = a7;
          int v75 = v46 < 8 || v47;
          BOOL v76 = (char *)(a4 + 8 * v65);
          unint64_t v77 = v173 + 8 * (v44 - a7);
          unsigned int v78 = (int16x8_t *)(a2 + v57);
          if (v182 < 8) {
            int v79 = 1;
          }
          else {
            int v79 = v75;
          }
          __src = v78;
          if (v181)
          {
            if (!v79)
            {
              unsigned int v78 = (int16x8_t *)__dst;
LABEL_94:
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock(v77, a11, v78, v76, v46, v182, v37, *(int16x4_t *)v35.i8, *(double *)v36.i64, *(double *)v34.i64, v28, v29, v30, v31);
              goto LABEL_95;
            }
            int v80 = v45;
            memcpy(__dst, __src, sizeof(__dst));
            int v45 = v80;
            unsigned int v78 = (int16x8_t *)__dst;
            uint64_t v32 = v177;
          }
          else if (!v79)
          {
            goto LABEL_94;
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE3ELj4ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = v32;
          int v184 = v78;
          unsigned __int8 v192 = v46;
          unsigned __int8 v193 = v182;
          unsigned int v188 = v164;
          unsigned int v189 = v44 - v42;
          unsigned int v185 = v76;
          unint64_t v186 = v77;
          uint64_t v187 = a11;
          unsigned int v190 = v174;
          unsigned int v191 = v45;
          if (!v47)
          {
            unsigned int v81 = *v76;
            a7 = v74;
            if (v81 == 63)
            {
              int16x8_t v83 = *v78;
              int16x8_t v35 = v78[1];
              int16x8_t v36 = v78[2];
              int16x8_t v34 = v78[3];
              int16x8_t v195 = *v78;
              int16x8_t v196 = v36;
              int16x8_t v199 = v35;
              int16x8_t v200 = v34;
              uint64_t v82 = 64;
            }
            else if (v81 == 1)
            {
              int16x8_t v83 = vld1q_dup_s16(v78->i16);
              int16x8_t v195 = v83;
              int16x8_t v196 = v83;
              int16x8_t v199 = v83;
              int16x8_t v200 = v83;
              uint64_t v82 = 2;
            }
            else if (*v76)
            {
              uint64_t v82 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v195, 64, (uint64_t)v78, v81, *(double *)&v37, *(double *)v35.i64, *(double *)v36.i64, *(int8x8_t *)v34.i8);
            }
            else
            {
              uint64_t v82 = 0;
              v83.i64[0] = 0;
              int16x8_t v195 = 0u;
              int16x8_t v196 = 0u;
              int16x8_t v199 = 0u;
              int16x8_t v200 = 0u;
            }
            uint64_t v84 = (uint64_t)v78->i64 + v82;
            unsigned int v85 = v76[1];
            if (v85 == 63)
            {
              int16x8_t v87 = *(int16x8_t *)v84;
              int16x8_t v35 = *(int16x8_t *)(v84 + 16);
              int16x8_t v36 = *(int16x8_t *)(v84 + 32);
              int16x8_t v34 = *(int16x8_t *)(v84 + 48);
              int16x8_t v203 = *(int16x8_t *)v84;
              int16x8_t v204 = v36;
              int16x8_t v207 = v35;
              int16x8_t v208 = v34;
              uint64_t v86 = 64;
            }
            else if (v85 == 1)
            {
              int16x8_t v87 = vld1q_dup_s16((const __int16 *)v84);
              int16x8_t v203 = v87;
              int16x8_t v204 = v87;
              int16x8_t v207 = v87;
              int16x8_t v208 = v87;
              uint64_t v86 = 2;
            }
            else if (v76[1])
            {
              uint64_t v86 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v203, 64, v84, v85, *(double *)v83.i64, *(double *)v35.i64, *(double *)v36.i64, *(int8x8_t *)v34.i8);
            }
            else
            {
              uint64_t v86 = 0;
              v87.i64[0] = 0;
              int16x8_t v203 = 0u;
              int16x8_t v204 = 0u;
              int16x8_t v207 = 0u;
              int16x8_t v208 = 0u;
            }
            uint64_t v88 = v84 + v86;
            unsigned int v89 = v76[2];
            if (v89 == 63)
            {
              int16x8_t v91 = *(int16x8_t *)v88;
              int16x8_t v35 = *(int16x8_t *)(v88 + 16);
              int16x8_t v36 = *(int16x8_t *)(v88 + 32);
              int16x8_t v34 = *(int16x8_t *)(v88 + 48);
              int16x8_t v197 = *(int16x8_t *)v88;
              int16x8_t v198 = v36;
              int16x8_t v201 = v35;
              int16x8_t v202 = v34;
              uint64_t v90 = 64;
            }
            else if (v89 == 1)
            {
              int16x8_t v91 = vld1q_dup_s16((const __int16 *)v88);
              int16x8_t v197 = v91;
              int16x8_t v198 = v91;
              int16x8_t v201 = v91;
              int16x8_t v202 = v91;
              uint64_t v90 = 2;
            }
            else if (v76[2])
            {
              uint64_t v90 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v197, 64, v88, v89, *(double *)v87.i64, *(double *)v35.i64, *(double *)v36.i64, *(int8x8_t *)v34.i8);
            }
            else
            {
              uint64_t v90 = 0;
              v91.i64[0] = 0;
              int16x8_t v197 = 0u;
              int16x8_t v198 = 0u;
              int16x8_t v201 = 0u;
              int16x8_t v202 = 0u;
            }
            uint64_t v92 = v88 + v90;
            unsigned int v93 = v76[3];
            if (v93 == 63)
            {
              int16x8_t v95 = *(int16x8_t *)v92;
              int16x8_t v35 = *(int16x8_t *)(v92 + 16);
              int16x8_t v36 = *(int16x8_t *)(v92 + 32);
              int16x8_t v34 = *(int16x8_t *)(v92 + 48);
              int16x8_t v205 = *(int16x8_t *)v92;
              int16x8_t v206 = v36;
              int16x8_t v209 = v35;
              int16x8_t v210 = v34;
              uint64_t v94 = 64;
            }
            else if (v93 == 1)
            {
              int16x8_t v95 = vld1q_dup_s16((const __int16 *)v92);
              int16x8_t v205 = v95;
              int16x8_t v206 = v95;
              int16x8_t v209 = v95;
              int16x8_t v210 = v95;
              uint64_t v94 = 2;
            }
            else if (v76[3])
            {
              uint64_t v94 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v205, 64, v92, v93, *(double *)v91.i64, *(double *)v35.i64, *(double *)v36.i64, *(int8x8_t *)v34.i8);
            }
            else
            {
              uint64_t v94 = 0;
              v95.i64[0] = 0;
              int16x8_t v205 = 0u;
              int16x8_t v206 = 0u;
              int16x8_t v209 = 0u;
              int16x8_t v210 = 0u;
            }
            uint64_t v96 = v92 + v94;
            unsigned int v97 = v76[4];
            if (v97 == 63)
            {
              int16x8_t v99 = *(int16x8_t *)v96;
              int16x8_t v35 = *(int16x8_t *)(v96 + 16);
              int16x8_t v36 = *(int16x8_t *)(v96 + 32);
              int16x8_t v34 = *(int16x8_t *)(v96 + 48);
              int16x8_t v211 = *(int16x8_t *)v96;
              int16x8_t v212 = v36;
              int16x8_t v215 = v35;
              int16x8_t v216 = v34;
              uint64_t v98 = 64;
            }
            else if (v97 == 1)
            {
              int16x8_t v99 = vld1q_dup_s16((const __int16 *)v96);
              int16x8_t v211 = v99;
              int16x8_t v212 = v99;
              int16x8_t v215 = v99;
              int16x8_t v216 = v99;
              uint64_t v98 = 2;
            }
            else if (v76[4])
            {
              uint64_t v98 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v211, 64, v96, v97, *(double *)v95.i64, *(double *)v35.i64, *(double *)v36.i64, *(int8x8_t *)v34.i8);
            }
            else
            {
              uint64_t v98 = 0;
              v99.i64[0] = 0;
              int16x8_t v211 = 0u;
              int16x8_t v212 = 0u;
              int16x8_t v215 = 0u;
              int16x8_t v216 = 0u;
            }
            uint64_t v100 = v96 + v98;
            unsigned int v101 = v76[5];
            if (v101 == 63)
            {
              int16x8_t v103 = *(int16x8_t *)v100;
              int16x8_t v35 = *(int16x8_t *)(v100 + 16);
              int16x8_t v36 = *(int16x8_t *)(v100 + 32);
              int16x8_t v34 = *(int16x8_t *)(v100 + 48);
              int16x8_t v219 = *(int16x8_t *)v100;
              int16x8_t v220 = v36;
              int16x8_t v223 = v35;
              int16x8_t v224 = v34;
              uint64_t v102 = 64;
            }
            else if (v101 == 1)
            {
              int16x8_t v103 = vld1q_dup_s16((const __int16 *)v100);
              int16x8_t v219 = v103;
              int16x8_t v220 = v103;
              int16x8_t v223 = v103;
              int16x8_t v224 = v103;
              uint64_t v102 = 2;
            }
            else if (v76[5])
            {
              uint64_t v102 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v219, 64, v100, v101, *(double *)v99.i64, *(double *)v35.i64, *(double *)v36.i64, *(int8x8_t *)v34.i8);
            }
            else
            {
              uint64_t v102 = 0;
              v103.i64[0] = 0;
              int16x8_t v219 = 0u;
              int16x8_t v220 = 0u;
              int16x8_t v223 = 0u;
              int16x8_t v224 = 0u;
            }
            uint64_t v104 = v100 + v102;
            unsigned int v105 = v76[6];
            if (v105 == 63)
            {
              int16x8_t v107 = *(int16x8_t *)v104;
              int16x8_t v35 = *(int16x8_t *)(v104 + 16);
              int16x8_t v36 = *(int16x8_t *)(v104 + 32);
              int16x8_t v34 = *(int16x8_t *)(v104 + 48);
              int16x8_t v213 = *(int16x8_t *)v104;
              int16x8_t v214 = v36;
              int16x8_t v217 = v35;
              int16x8_t v218 = v34;
              uint64_t v106 = 64;
            }
            else if (v105 == 1)
            {
              int16x8_t v107 = vld1q_dup_s16((const __int16 *)v104);
              int16x8_t v213 = v107;
              int16x8_t v214 = v107;
              int16x8_t v217 = v107;
              int16x8_t v218 = v107;
              uint64_t v106 = 2;
            }
            else if (v76[6])
            {
              uint64_t v106 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v213, 64, v104, v105, *(double *)v103.i64, *(double *)v35.i64, *(double *)v36.i64, *(int8x8_t *)v34.i8);
            }
            else
            {
              uint64_t v106 = 0;
              v107.i64[0] = 0;
              int16x8_t v213 = 0u;
              int16x8_t v214 = 0u;
              int16x8_t v217 = 0u;
              int16x8_t v218 = 0u;
            }
            uint64_t v108 = v104 + v106;
            unsigned int v109 = v76[7];
            if (v109 == 63)
            {
              int16x8_t v110 = *(int16x8_t *)v108;
              int16x8_t v35 = *(int16x8_t *)(v108 + 16);
              int16x8_t v36 = *(int16x8_t *)(v108 + 32);
              int16x8_t v34 = *(int16x8_t *)(v108 + 48);
              int16x8_t v221 = *(int16x8_t *)v108;
              int16x8_t v222 = v36;
              int16x8_t v225 = v35;
              int16x8_t v226 = v34;
              uint64_t v111 = v190;
              if (v190) {
                goto LABEL_156;
              }
            }
            else
            {
              if (v109 != 1)
              {
                if (v76[7])
                {
                  AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v221, 64, v108, v109, *(double *)v107.i64, *(double *)v35.i64, *(double *)v36.i64, *(int8x8_t *)v34.i8);
                  uint64_t v111 = v190;
                  if (!v190) {
                    goto LABEL_187;
                  }
                }
                else
                {
                  v110.i64[0] = 0;
                  int16x8_t v221 = 0u;
                  int16x8_t v222 = 0u;
                  int16x8_t v225 = 0u;
                  int16x8_t v226 = 0u;
                  uint64_t v111 = v190;
                  if (!v190) {
                    goto LABEL_187;
                  }
                }
LABEL_156:
                if (!v191) {
                  goto LABEL_187;
                }
                uint64_t v112 = 0;
                unint64_t v113 = (unint64_t)v188 << 6;
                uint64_t v114 = 8 * v189;
                int16x8_t v115 = &v195.i8[v113 + v114];
                unint64_t v116 = v186;
                uint64_t v117 = v187;
                unint64_t v118 = 8 * v191;
                if (v118 <= 1) {
                  unint64_t v119 = 1;
                }
                else {
                  unint64_t v119 = 8 * v191;
                }
                unint64_t v120 = v113 + v114;
                uint64_t v121 = &v195.i8[v113 + v114];
                if (v119) {
                  BOOL v122 = (v119 - 1) >> 32 == 0;
                }
                else {
                  BOOL v122 = 0;
                }
                char v123 = !v122;
                uint64_t v124 = v119 & 0x7FFFFFFE0;
                uint64_t v125 = v119 & 0x7FFFFFFF8;
                unint64_t v126 = &v196.i8[v120];
                unint64_t v127 = (int16x8_t *)(v186 + 16);
                unint64_t v128 = v115;
                unint64_t v129 = v186;
                while (2)
                {
                  char v130 = (char *)(v116 + v117 * v112);
                  uint64_t v131 = &v115[64 * v112];
                  if ((unint64_t)(&v121[64 * v112] - v130) < 0x20) {
                    char v132 = 1;
                  }
                  else {
                    char v132 = v123;
                  }
                  if (v132)
                  {
                    int v133 = 0;
LABEL_184:
                    unsigned int v142 = v133 + 1;
                    do
                    {
                      char v143 = *v130++;
                      *v131++ = v143;
                    }
                    while (v118 > v142++);
                  }
                  else
                  {
                    if (v119 >= 0x20)
                    {
                      float32x4_t v135 = v127;
                      float32x4_t v136 = (int16x8_t *)v126;
                      uint64_t v137 = v119 & 0x7FFFFFFE0;
                      do
                      {
                        int16x8_t v110 = v135[-1];
                        int16x8_t v35 = *v135;
                        v136[-1] = v110;
                        *float32x4_t v136 = v35;
                        v136 += 2;
                        v135 += 2;
                        v137 -= 32;
                      }
                      while (v137);
                      if (v119 == v124) {
                        goto LABEL_167;
                      }
                      uint64_t v134 = v119 & 0x7FFFFFFE0;
                      if ((v119 & 0x18) == 0)
                      {
                        v130 += v124;
                        v131 += v124;
                        int v133 = v119 & 0xFFFFFFE0;
                        goto LABEL_184;
                      }
                    }
                    else
                    {
                      uint64_t v134 = 0;
                    }
                    v131 += v125;
                    unint64_t v138 = v134 - (v119 & 0x7FFFFFFF8);
                    char v139 = (uint64_t *)(v129 + v134);
                    int v140 = (uint64_t *)&v128[v134];
                    do
                    {
                      uint64_t v141 = *v139++;
                      v110.i64[0] = v141;
                      *v140++ = v141;
                      v138 += 8;
                    }
                    while (v138);
                    if (v119 != v125)
                    {
                      v130 += v125;
                      int v133 = v119 & 0xFFFFFFF8;
                      goto LABEL_184;
                    }
                  }
LABEL_167:
                  ++v112;
                  v126 += 64;
                  unint64_t v127 = (int16x8_t *)((char *)v127 + v117);
                  v129 += v117;
                  v128 += 64;
                  if (v112 == v111) {
                    goto LABEL_187;
                  }
                  continue;
                }
              }
              int16x8_t v110 = vld1q_dup_s16((const __int16 *)v108);
              int16x8_t v221 = v110;
              int16x8_t v222 = v110;
              int16x8_t v225 = v110;
              int16x8_t v226 = v110;
              uint64_t v111 = v190;
              if (v190) {
                goto LABEL_156;
              }
            }
LABEL_187:
            AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)&v195, 64, v184, v185, v192, v193, *(int16x4_t *)v110.i8, *(int16x4_t *)v35.i8, *(double *)v36.i64, *(double *)v34.i64, v28, v29, v30, v31);
            if (!v181) {
              goto LABEL_26;
            }
            goto LABEL_188;
          }
          dispatch_sync(*(dispatch_queue_t *)(*(void *)(v32 + 8) + 7384), block);
LABEL_95:
          a7 = v74;
          if (!v181) {
            goto LABEL_26;
          }
LABEL_188:
          memcpy(__src, v78, 0x200uLL);
LABEL_26:
          BOOL v23 = v40++ == v169 >> 3;
          uint64_t v32 = v177;
        }
        while (!v23);
        BOOL v23 = v18++ == v163;
      }
      while (!v23);
    }
  }
}

void *AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, uint64_t a7, unsigned int a8, int a9, int a10, uint64_t a11, int a12)
{
  uint64_t v245 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  uint64_t v17 = a1;
  unsigned int v194 = a8;
  unsigned int v18 = a8 >> 3;
  unsigned int v178 = a8 + a10 - 1;
  unsigned int v180 = v178 >> 3;
  unsigned int v19 = *(unsigned __int8 *)(*(void *)(a1 + 208) + 88);
  unsigned int v20 = *(_DWORD *)(a1 + 112);
  uint64_t v195 = v17;
  if (*(void *)(v17 + 168))
  {
    __int16 CacheMode = IOSurfaceGetCacheMode();
    uint64_t v17 = v195;
    int v22 = CacheMode & 0xF00;
  }
  else
  {
    int v22 = 0;
  }
  BOOL v23 = (v22 & 0xD00) == 0 || v22 == 768;
  int v24 = v22 & 0xE00;
  int v26 = !v23 && v24 != 1024;
  int v199 = v26;
  uint64_t result = (void *)AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::isLevelTiled(v17, *(_DWORD *)(v17 + 144) + a12);
  uint64_t v28 = v195;
  int v188 = (int)result;
  if (v18 <= v180)
  {
    unsigned int v187 = a7 + a9 - 1;
    unsigned int v177 = a7 >> 3;
    if (a7 >> 3 <= v187 >> 3)
    {
      unsigned int v174 = a5 - 1;
      unsigned int v197 = (a5 - 1) >> 3;
      int v196 = ((a5 - 1) & 7) + 1;
      int v175 = ((a6 - 1) & 7) + 1;
      unsigned int v176 = (a6 - 1) >> 3;
      uint32x2_t v29 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0x700000007);
      v30.i64[0] = 0x2000000020;
      *(int32x2_t *)v31.i8 = vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v29, 3uLL)))))));
      v32.i64[0] = 0x1000000010;
      *(int8x8_t *)v33.i8 = vbic_s8(*(int8x8_t *)v31.i8, (int8x8_t)vcgt_u32((uint32x2_t)0x1000000010, v29));
      __int32 v186 = v33.i32[0] | v33.i32[1];
      BOOL v184 = v33.i32[1] != 0;
      uint64_t v185 = v33.i64[0];
      BOOL v183 = v33.i32[0] != 0;
      unint64_t v173 = 8 * v20 * (unint64_t)v19;
      do
      {
        unsigned int v34 = (8 * v18) | 7;
        if (8 * v18 <= v194) {
          int v35 = v194;
        }
        else {
          int v35 = 8 * v18;
        }
        unsigned int v36 = v177;
        if (v178 < v34) {
          unsigned int v34 = v178;
        }
        unsigned int v193 = 8 * v18;
        int v182 = v35 - 8 * v18;
        int v192 = v34 - v35 + 1;
        int v37 = v175;
        if (v18 != v176) {
          int v37 = 8;
        }
        unsigned int v200 = v37;
        uint64_t v191 = a3 + (v35 - v194) * a11;
        do
        {
          unsigned int v38 = 8 * v36;
          unsigned int v39 = 8 * (v36 + 1) - 1;
          if (8 * v36 <= a7) {
            int v40 = a7;
          }
          else {
            int v40 = 8 * v36;
          }
          if (v187 < v39) {
            unsigned int v39 = v187;
          }
          int v41 = v39 - v40 + 1;
          if (v36 == v197) {
            unsigned int v42 = v196;
          }
          else {
            unsigned int v42 = 8;
          }
          BOOL v43 = 1;
          if (v193 >= v194 && v38 >= a7)
          {
            int v44 = v196;
            if (v36 != v197) {
              int v44 = 8;
            }
            BOOL v43 = v41 != v44 || v192 != v200;
          }
          if (v188)
          {
            unsigned int v65 = 0;
            uint64_t v66 = v173 >> (*(unsigned char *)(v28 + 57) != 0);
            char v67 = 1;
            if (v66 > 127)
            {
              if (v66 > 511)
              {
                if (v66 == 512)
                {
                  char v67 = 0;
                  char v68 = 0;
                  unsigned int v65 = 16;
                  unsigned int v69 = 16;
                }
                else
                {
                  char v68 = 1;
                  unsigned int v69 = 0;
                  if (v66 == 1024)
                  {
                    char v67 = 0;
                    unsigned int v69 = 8;
                    unsigned int v65 = 16;
                  }
                }
              }
              else if (v66 == 128)
              {
                char v67 = 0;
                char v68 = 0;
                unsigned int v65 = 32;
                unsigned int v69 = 32;
              }
              else
              {
                char v68 = 1;
                unsigned int v69 = 0;
                if (v66 == 256)
                {
                  char v67 = 0;
                  char v68 = 0;
                  unsigned int v69 = 16;
                  unsigned int v65 = 32;
                }
              }
            }
            else
            {
              char v68 = 1;
              unsigned int v69 = 0;
              switch(v66)
              {
                case 4:
                  char v67 = 0;
                  char v68 = 0;
                  unsigned int v69 = 128;
                  unsigned int v65 = 256;
                  break;
                case 5:
                case 6:
                case 7:
                case 9:
                case 10:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 17:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                  break;
                case 8:
                  char v67 = 0;
                  char v68 = 0;
                  unsigned int v65 = 128;
                  unsigned int v69 = 128;
                  break;
                case 16:
                  char v67 = 0;
                  char v68 = 0;
                  unsigned int v69 = 64;
                  unsigned int v65 = 128;
                  break;
                case 32:
                  char v67 = 0;
                  char v68 = 0;
                  unsigned int v65 = 64;
                  unsigned int v69 = 64;
                  break;
                default:
                  if (v66 == 64)
                  {
                    char v67 = 0;
                    char v68 = 0;
                    unsigned int v69 = 32;
                    unsigned int v65 = 64;
                  }
                  break;
              }
            }
            unsigned int v162 = (v65 >> 3) - 1;
            if (v67) {
              unsigned int v163 = 0;
            }
            else {
              unsigned int v163 = 32 - __clz(~(-1 << -(char)__clz(v162)));
            }
            unsigned int v164 = (v69 >> 3) - 1;
            if (v68)
            {
              unsigned int v165 = 0;
              if (v163) {
                goto LABEL_255;
              }
            }
            else
            {
              unsigned int v165 = 32 - __clz(~(-1 << -(char)__clz(v164)));
              if (v165 | v163)
              {
LABEL_255:
                int v166 = 0;
                uint64_t v167 = 0;
                int v168 = v36 & v162;
                int v169 = v18 & v164;
                BOOL v170 = v163 != 0;
                BOOL v171 = v165 != 0;
                int v172 = 1;
                do
                {
                  --v163;
                  if (v170) {
                    v167 |= (unint64_t)(v172 & v168) << v166++;
                  }
                  else {
                    unsigned int v163 = 0;
                  }
                  --v165;
                  if (v171) {
                    v167 |= (unint64_t)(v172 & v169) << v166++;
                  }
                  else {
                    unsigned int v165 = 0;
                  }
                  v172 *= 2;
                  --v166;
                  BOOL v171 = v165 != 0;
                  BOOL v170 = v163 != 0;
                }
                while (v165 | v163);
                goto LABEL_267;
              }
            }
            uint64_t v167 = 0;
LABEL_267:
            unint64_t v53 = ((unint64_t)(v38 / v65 + v193 / v69 * ((v65 + v174) / v65)) << 14) + (v167 << 9);
            goto LABEL_58;
          }
          if (v186)
          {
            int v46 = 0;
            uint64_t v47 = 0;
            int v48 = 1;
            BOOL v49 = v183;
            BOOL v50 = v184;
            int v52 = v185;
            int v51 = HIDWORD(v185);
            do
            {
              --v51;
              if (v50) {
                v47 |= (unint64_t)(v48 & v36) << v46++;
              }
              else {
                int v51 = 0;
              }
              --v52;
              if (v49) {
                v47 |= (unint64_t)(v48 & v18) << v46++;
              }
              else {
                int v52 = 0;
              }
              v48 *= 2;
              --v46;
              BOOL v49 = v52 != 0;
              BOOL v50 = v51 != 0;
            }
            while (v52 | v51);
          }
          else
          {
            uint64_t v47 = 0;
          }
          unint64_t v53 = v47 << 9;
LABEL_58:
          unsigned int v54 = *(_DWORD *)(v28 + 128) >> (*(unsigned char *)(v28 + 144) + a12);
          if (v54 <= 1) {
            unsigned int v54 = 1;
          }
          unsigned int v55 = v54 + 7;
          if (v55 < 0x10) {
            unsigned int v56 = 0;
          }
          else {
            unsigned int v56 = 32 - __clz(~(-1 << -(char)__clz((v55 >> 3) - 1)));
          }
          unsigned int v57 = *(_DWORD *)(v28 + 132) >> (*(unsigned char *)(v28 + 144) + a12);
          if (v57 <= 1) {
            unsigned int v57 = 1;
          }
          unsigned int v58 = v57 + 7;
          if (v58 < 0x10)
          {
            unsigned int v59 = 0;
            if (!v56)
            {
LABEL_80:
              uint64_t v61 = 0;
              goto LABEL_81;
            }
          }
          else
          {
            unsigned int v59 = 32 - __clz(~(-1 << -(char)__clz((v58 >> 3) - 1)));
            if (!(v59 | v56)) {
              goto LABEL_80;
            }
          }
          int v60 = 0;
          uint64_t v61 = 0;
          BOOL v62 = v56 != 0;
          BOOL v63 = v59 != 0;
          int v64 = 1;
          do
          {
            --v56;
            if (v62) {
              v61 |= (unint64_t)(v64 & v36) << v60++;
            }
            else {
              unsigned int v56 = 0;
            }
            --v59;
            if (v63) {
              v61 |= (unint64_t)(v64 & v18) << v60++;
            }
            else {
              unsigned int v59 = 0;
            }
            v64 *= 2;
            --v60;
            BOOL v63 = v59 != 0;
            BOOL v62 = v56 != 0;
          }
          while (v59 | v56);
LABEL_81:
          uint64_t v70 = a7;
          int v71 = v42 < 8 || v43;
          char v72 = (char *)(a4 + 8 * v61);
          unsigned int v73 = (_OWORD *)(v191 + 8 * (v40 - a7));
          uint64_t v74 = (int16x8_t *)(a2 + v53);
          if (v200 < 8) {
            int v75 = 1;
          }
          else {
            int v75 = v71;
          }
          int16x8_t v198 = v74;
          if (v199)
          {
            BOOL v76 = (int16x8_t *)__dst;
            if (!v75) {
              goto LABEL_93;
            }
            char v77 = v42;
            int v181 = (char *)(a4 + 8 * v61);
            int v78 = v40;
            memcpy(__dst, v74, sizeof(__dst));
            int v40 = v78;
            char v72 = v181;
            LOBYTE(v42) = v77;
            uint64_t v28 = v195;
          }
          else
          {
            BOOL v76 = v74;
            if (!v75)
            {
LABEL_93:
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock(v73, a11, v76, v72, v42, v200);
LABEL_94:
              a7 = v70;
              uint64_t result = v198;
              if (!v199) {
                goto LABEL_26;
              }
LABEL_236:
              uint64_t result = memcpy(result, v76, 0x200uLL);
              goto LABEL_26;
            }
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE3ELj4ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = v28;
          int16x8_t v202 = v76;
          unsigned __int8 v210 = v42;
          unsigned __int8 v211 = v200;
          unsigned int v206 = v182;
          unsigned int v207 = v40 - v38;
          int16x8_t v203 = v72;
          int16x8_t v204 = v73;
          uint64_t v205 = a11;
          unsigned int v208 = v192;
          unsigned int v209 = v41;
          if (v43)
          {
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(v28 + 8) + 7384), block);
            goto LABEL_94;
          }
          unsigned int v79 = *v72;
          a7 = v70;
          if (v79 == 63)
          {
            int16x8_t v81 = *v76;
            int16x8_t v31 = v76[1];
            int16x8_t v32 = v76[2];
            int16x8_t v30 = v76[3];
            int16x8_t v213 = *v76;
            int16x8_t v214 = v32;
            int16x8_t v217 = v31;
            int16x8_t v218 = v30;
            uint64_t v80 = 64;
          }
          else if (v79 == 1)
          {
            int16x8_t v81 = vld1q_dup_s16(v76->i16);
            int16x8_t v213 = v81;
            int16x8_t v214 = v81;
            int16x8_t v217 = v81;
            int16x8_t v218 = v81;
            uint64_t v80 = 2;
          }
          else if (*v72)
          {
            uint64_t v80 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v213, 64, (uint64_t)v76, v79, *(double *)v33.i64, *(double *)v31.i64, *(double *)v32.i64, *(int8x8_t *)v30.i8);
          }
          else
          {
            uint64_t v80 = 0;
            v81.i64[0] = 0;
            int16x8_t v213 = 0u;
            int16x8_t v214 = 0u;
            int16x8_t v217 = 0u;
            int16x8_t v218 = 0u;
          }
          uint64_t v82 = (uint64_t)v76->i64 + v80;
          unsigned int v83 = v72[1];
          if (v83 == 63)
          {
            int16x8_t v85 = *(int16x8_t *)v82;
            int16x8_t v31 = *(int16x8_t *)(v82 + 16);
            int16x8_t v32 = *(int16x8_t *)(v82 + 32);
            int16x8_t v30 = *(int16x8_t *)(v82 + 48);
            int16x8_t v221 = *(int16x8_t *)v82;
            int16x8_t v222 = v32;
            int16x8_t v225 = v31;
            int16x8_t v226 = v30;
            uint64_t v84 = 64;
          }
          else if (v83 == 1)
          {
            int16x8_t v85 = vld1q_dup_s16((const __int16 *)v82);
            int16x8_t v221 = v85;
            int16x8_t v222 = v85;
            int16x8_t v225 = v85;
            int16x8_t v226 = v85;
            uint64_t v84 = 2;
          }
          else if (v72[1])
          {
            uint64_t v84 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v221, 64, v82, v83, *(double *)v81.i64, *(double *)v31.i64, *(double *)v32.i64, *(int8x8_t *)v30.i8);
          }
          else
          {
            uint64_t v84 = 0;
            v85.i64[0] = 0;
            int16x8_t v221 = 0u;
            int16x8_t v222 = 0u;
            int16x8_t v225 = 0u;
            int16x8_t v226 = 0u;
          }
          uint64_t v86 = v82 + v84;
          unsigned int v87 = v72[2];
          if (v87 == 63)
          {
            int16x8_t v89 = *(int16x8_t *)v86;
            int16x8_t v31 = *(int16x8_t *)(v86 + 16);
            int16x8_t v32 = *(int16x8_t *)(v86 + 32);
            int16x8_t v30 = *(int16x8_t *)(v86 + 48);
            int16x8_t v215 = *(int16x8_t *)v86;
            int16x8_t v216 = v32;
            int16x8_t v219 = v31;
            int16x8_t v220 = v30;
            uint64_t v88 = 64;
          }
          else if (v87 == 1)
          {
            int16x8_t v89 = vld1q_dup_s16((const __int16 *)v86);
            int16x8_t v215 = v89;
            int16x8_t v216 = v89;
            int16x8_t v219 = v89;
            int16x8_t v220 = v89;
            uint64_t v88 = 2;
          }
          else if (v72[2])
          {
            uint64_t v88 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v215, 64, v86, v87, *(double *)v85.i64, *(double *)v31.i64, *(double *)v32.i64, *(int8x8_t *)v30.i8);
          }
          else
          {
            uint64_t v88 = 0;
            v89.i64[0] = 0;
            int16x8_t v215 = 0u;
            int16x8_t v216 = 0u;
            int16x8_t v219 = 0u;
            int16x8_t v220 = 0u;
          }
          uint64_t v90 = v86 + v88;
          unsigned int v91 = v72[3];
          if (v91 == 63)
          {
            int16x8_t v93 = *(int16x8_t *)v90;
            int16x8_t v31 = *(int16x8_t *)(v90 + 16);
            int16x8_t v32 = *(int16x8_t *)(v90 + 32);
            int16x8_t v30 = *(int16x8_t *)(v90 + 48);
            int16x8_t v223 = *(int16x8_t *)v90;
            int16x8_t v224 = v32;
            int16x8_t v227 = v31;
            int16x8_t v228 = v30;
            uint64_t v92 = 64;
          }
          else if (v91 == 1)
          {
            int16x8_t v93 = vld1q_dup_s16((const __int16 *)v90);
            int16x8_t v223 = v93;
            int16x8_t v224 = v93;
            int16x8_t v227 = v93;
            int16x8_t v228 = v93;
            uint64_t v92 = 2;
          }
          else if (v72[3])
          {
            uint64_t v92 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v223, 64, v90, v91, *(double *)v89.i64, *(double *)v31.i64, *(double *)v32.i64, *(int8x8_t *)v30.i8);
          }
          else
          {
            uint64_t v92 = 0;
            v93.i64[0] = 0;
            int16x8_t v223 = 0u;
            int16x8_t v224 = 0u;
            int16x8_t v227 = 0u;
            int16x8_t v228 = 0u;
          }
          uint64_t v94 = v90 + v92;
          unsigned int v95 = v72[4];
          if (v95 == 63)
          {
            int16x8_t v97 = *(int16x8_t *)v94;
            int16x8_t v31 = *(int16x8_t *)(v94 + 16);
            int16x8_t v32 = *(int16x8_t *)(v94 + 32);
            int16x8_t v30 = *(int16x8_t *)(v94 + 48);
            int16x8_t v229 = *(int16x8_t *)v94;
            int16x8_t v230 = v32;
            int16x8_t v233 = v31;
            int16x8_t v234 = v30;
            uint64_t v96 = 64;
          }
          else if (v95 == 1)
          {
            int16x8_t v97 = vld1q_dup_s16((const __int16 *)v94);
            int16x8_t v229 = v97;
            int16x8_t v230 = v97;
            int16x8_t v233 = v97;
            int16x8_t v234 = v97;
            uint64_t v96 = 2;
          }
          else if (v72[4])
          {
            uint64_t v96 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v229, 64, v94, v95, *(double *)v93.i64, *(double *)v31.i64, *(double *)v32.i64, *(int8x8_t *)v30.i8);
          }
          else
          {
            uint64_t v96 = 0;
            v97.i64[0] = 0;
            int16x8_t v229 = 0u;
            int16x8_t v230 = 0u;
            int16x8_t v233 = 0u;
            int16x8_t v234 = 0u;
          }
          uint64_t v98 = v94 + v96;
          unsigned int v99 = v72[5];
          if (v99 == 63)
          {
            int16x8_t v101 = *(int16x8_t *)v98;
            int16x8_t v31 = *(int16x8_t *)(v98 + 16);
            int16x8_t v32 = *(int16x8_t *)(v98 + 32);
            int16x8_t v30 = *(int16x8_t *)(v98 + 48);
            int16x8_t v237 = *(int16x8_t *)v98;
            int16x8_t v238 = v32;
            int16x8_t v241 = v31;
            int16x8_t v242 = v30;
            uint64_t v100 = 64;
          }
          else if (v99 == 1)
          {
            int16x8_t v101 = vld1q_dup_s16((const __int16 *)v98);
            int16x8_t v237 = v101;
            int16x8_t v238 = v101;
            int16x8_t v241 = v101;
            int16x8_t v242 = v101;
            uint64_t v100 = 2;
          }
          else if (v72[5])
          {
            uint64_t v100 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v237, 64, v98, v99, *(double *)v97.i64, *(double *)v31.i64, *(double *)v32.i64, *(int8x8_t *)v30.i8);
          }
          else
          {
            uint64_t v100 = 0;
            v101.i64[0] = 0;
            int16x8_t v237 = 0u;
            int16x8_t v238 = 0u;
            int16x8_t v241 = 0u;
            int16x8_t v242 = 0u;
          }
          uint64_t v102 = v98 + v100;
          unsigned int v103 = v72[6];
          if (v103 == 63)
          {
            int16x8_t v105 = *(int16x8_t *)v102;
            int16x8_t v31 = *(int16x8_t *)(v102 + 16);
            int16x8_t v32 = *(int16x8_t *)(v102 + 32);
            int16x8_t v30 = *(int16x8_t *)(v102 + 48);
            int16x8_t v231 = *(int16x8_t *)v102;
            int16x8_t v232 = v32;
            int16x8_t v235 = v31;
            int16x8_t v236 = v30;
            uint64_t v104 = 64;
          }
          else if (v103 == 1)
          {
            int16x8_t v105 = vld1q_dup_s16((const __int16 *)v102);
            int16x8_t v231 = v105;
            int16x8_t v232 = v105;
            int16x8_t v235 = v105;
            int16x8_t v236 = v105;
            uint64_t v104 = 2;
          }
          else if (v72[6])
          {
            uint64_t v104 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v231, 64, v102, v103, *(double *)v101.i64, *(double *)v31.i64, *(double *)v32.i64, *(int8x8_t *)v30.i8);
          }
          else
          {
            uint64_t v104 = 0;
            v105.i64[0] = 0;
            int16x8_t v231 = 0u;
            int16x8_t v232 = 0u;
            int16x8_t v235 = 0u;
            int16x8_t v236 = 0u;
          }
          uint64_t v106 = v102 + v104;
          unsigned int v107 = v72[7];
          if (v107 == 63)
          {
            int16x8_t v33 = *(int16x8_t *)v106;
            int16x8_t v31 = *(int16x8_t *)(v106 + 16);
            int16x8_t v32 = *(int16x8_t *)(v106 + 32);
            int16x8_t v30 = *(int16x8_t *)(v106 + 48);
            int16x8_t v239 = *(int16x8_t *)v106;
            int16x8_t v240 = v32;
            int16x8_t v243 = v31;
            int16x8_t v244 = v30;
            uint64_t v108 = v208;
            if (v208) {
              goto LABEL_155;
            }
          }
          else if (v107 == 1)
          {
            int16x8_t v33 = vld1q_dup_s16((const __int16 *)v106);
            int16x8_t v239 = v33;
            int16x8_t v240 = v33;
            int16x8_t v243 = v33;
            int16x8_t v244 = v33;
            uint64_t v108 = v208;
            if (v208) {
              goto LABEL_155;
            }
          }
          else
          {
            if (v72[7])
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v239, 64, v106, v107, *(double *)v105.i64, *(double *)v31.i64, *(double *)v32.i64, *(int8x8_t *)v30.i8);
              uint64_t v108 = v208;
              if (!v208) {
                goto LABEL_186;
              }
LABEL_155:
              if (!v209) {
                goto LABEL_186;
              }
              uint64_t v109 = 0;
              unint64_t v110 = (unint64_t)v206 << 6;
              uint64_t v111 = 8 * v207;
              uint64_t v112 = &v213.i8[v110 + v111];
              unint64_t v113 = v204;
              uint64_t v114 = v205;
              unint64_t v115 = 8 * v209;
              if (v115 <= 1) {
                unint64_t v116 = 1;
              }
              else {
                unint64_t v116 = 8 * v209;
              }
              unint64_t v117 = v110 + v111;
              unint64_t v118 = &v213.i8[v110 + v111];
              if (v116) {
                BOOL v119 = (v116 - 1) >> 32 == 0;
              }
              else {
                BOOL v119 = 0;
              }
              char v120 = !v119;
              uint64_t v121 = v116 & 0x7FFFFFFE0;
              uint64_t v122 = v116 & 0x7FFFFFFF8;
              char v123 = &v214.i8[v117];
              uint64_t v124 = (int16x8_t *)(v204 + 1);
              uint64_t v125 = v112;
              unint64_t v126 = v204;
              while (2)
              {
                unint64_t v127 = (char *)v113 + v114 * v109;
                unint64_t v128 = &v112[64 * v109];
                if ((unint64_t)(&v118[64 * v109] - v127) < 0x20) {
                  char v129 = 1;
                }
                else {
                  char v129 = v120;
                }
                if (v129)
                {
                  int v130 = 0;
LABEL_183:
                  unsigned int v139 = v130 + 1;
                  do
                  {
                    char v140 = *v127++;
                    *v128++ = v140;
                  }
                  while (v115 > v139++);
                }
                else
                {
                  if (v116 >= 0x20)
                  {
                    char v132 = v124;
                    int v133 = (int16x8_t *)v123;
                    uint64_t v134 = v116 & 0x7FFFFFFE0;
                    do
                    {
                      int16x8_t v33 = v132[-1];
                      int16x8_t v31 = *v132;
                      v133[-1] = v33;
                      *int v133 = v31;
                      v133 += 2;
                      v132 += 2;
                      v134 -= 32;
                    }
                    while (v134);
                    if (v116 == v121) {
                      goto LABEL_166;
                    }
                    uint64_t v131 = v116 & 0x7FFFFFFE0;
                    if ((v116 & 0x18) == 0)
                    {
                      v127 += v121;
                      v128 += v121;
                      int v130 = v116 & 0xFFFFFFE0;
                      goto LABEL_183;
                    }
                  }
                  else
                  {
                    uint64_t v131 = 0;
                  }
                  v128 += v122;
                  unint64_t v135 = v131 - (v116 & 0x7FFFFFFF8);
                  float32x4_t v136 = (uint64_t *)((char *)v126 + v131);
                  uint64_t v137 = (uint64_t *)&v125[v131];
                  do
                  {
                    uint64_t v138 = *v136++;
                    v33.i64[0] = v138;
                    *v137++ = v138;
                    v135 += 8;
                  }
                  while (v135);
                  if (v116 != v122)
                  {
                    v127 += v122;
                    int v130 = v116 & 0xFFFFFFF8;
                    goto LABEL_183;
                  }
                }
LABEL_166:
                ++v109;
                v123 += 64;
                uint64_t v124 = (int16x8_t *)((char *)v124 + v114);
                unint64_t v126 = (_OWORD *)((char *)v126 + v114);
                v125 += 64;
                if (v109 == v108) {
                  goto LABEL_186;
                }
                continue;
              }
            }
            v33.i64[0] = 0;
            int16x8_t v239 = 0u;
            int16x8_t v240 = 0u;
            int16x8_t v243 = 0u;
            int16x8_t v244 = 0u;
            uint64_t v108 = v208;
            if (v208) {
              goto LABEL_155;
            }
          }
LABEL_186:
          char v142 = 0;
          uint64_t v144 = v202;
          char v143 = v203;
          int v145 = v210;
          int v146 = v211;
          if (v210 >= 4u) {
            int v147 = 4;
          }
          else {
            int v147 = v210;
          }
          if (v211 >= 2u) {
            int v148 = 2;
          }
          else {
            int v148 = v211;
          }
          if (v147 && v148)
          {
            v33.i64[0] = v213.i64[0];
            int16x8_t v31 = v214;
            int16x8_t v32 = v217;
            int16x8_t v30 = v218;
            *int16x8_t v202 = v213;
            v144[1] = v32;
            v144[2] = v31;
            v144[3] = v30;
            v144 += 4;
            char v142 = 63;
          }
          char v149 = 0;
          *char v143 = v142;
          if (v146 <= 2) {
            int v150 = 2;
          }
          else {
            int v150 = v146;
          }
          unsigned int v151 = v150 - 2;
          if (v151 >= 2) {
            unsigned int v151 = 2;
          }
          if (v147 && v151)
          {
            v33.i64[0] = v221.i64[0];
            int16x8_t v31 = v222;
            int16x8_t v32 = v225;
            int16x8_t v30 = v226;
            *uint64_t v144 = v221;
            v144[1] = v32;
            v144[2] = v31;
            v144[3] = v30;
            v144 += 4;
            char v149 = 63;
          }
          char v152 = 0;
          v143[1] = v149;
          if (v145 <= 4) {
            int v145 = 4;
          }
          unsigned int v153 = v145 - 4;
          if (v153 >= 4) {
            unsigned int v153 = 4;
          }
          if (v153 && v148)
          {
            v33.i64[0] = v215.i64[0];
            int16x8_t v31 = v216;
            int16x8_t v32 = v219;
            int16x8_t v30 = v220;
            *uint64_t v144 = v215;
            v144[1] = v32;
            v144[2] = v31;
            v144[3] = v30;
            v144 += 4;
            char v152 = 63;
          }
          char v154 = 0;
          v143[2] = v152;
          if (v153)
          {
            uint64_t result = v198;
            if (v151)
            {
              v33.i64[0] = v223.i64[0];
              int16x8_t v31 = v224;
              int16x8_t v32 = v227;
              int16x8_t v30 = v228;
              *uint64_t v144 = v223;
              v144[1] = v32;
              v144[2] = v31;
              v144[3] = v30;
              v144 += 4;
              char v154 = 63;
            }
          }
          else
          {
            uint64_t result = v198;
          }
          char v155 = 0;
          v143[3] = v154;
          if (v146 <= 4) {
            int v156 = 4;
          }
          else {
            int v156 = v146;
          }
          unsigned int v157 = v156 - 4;
          if (v157 >= 2) {
            unsigned int v157 = 2;
          }
          if (v147 && v157)
          {
            v33.i64[0] = v229.i64[0];
            int16x8_t v31 = v230;
            int16x8_t v32 = v233;
            int16x8_t v30 = v234;
            *uint64_t v144 = v229;
            v144[1] = v32;
            v144[2] = v31;
            v144[3] = v30;
            v144 += 4;
            char v155 = 63;
          }
          char v158 = 0;
          v143[4] = v155;
          if (v146 <= 6) {
            int v146 = 6;
          }
          unsigned int v159 = v146 - 6;
          if (v159 >= 2) {
            unsigned int v159 = 2;
          }
          if (v147 && v159)
          {
            v33.i64[0] = v237.i64[0];
            int16x8_t v31 = v238;
            int16x8_t v32 = v241;
            int16x8_t v30 = v242;
            *uint64_t v144 = v237;
            v144[1] = v32;
            v144[2] = v31;
            v144[3] = v30;
            v144 += 4;
            char v158 = 63;
          }
          char v160 = 0;
          v143[5] = v158;
          if (v153 && v157)
          {
            v33.i64[0] = v231.i64[0];
            int16x8_t v31 = v232;
            int16x8_t v32 = v235;
            int16x8_t v30 = v236;
            *uint64_t v144 = v231;
            v144[1] = v32;
            v144[2] = v31;
            v144[3] = v30;
            v144 += 4;
            char v160 = 63;
          }
          char v161 = 0;
          v143[6] = v160;
          if (v153)
          {
            if (v159)
            {
              v33.i64[0] = v239.i64[0];
              int16x8_t v31 = v240;
              int16x8_t v32 = v243;
              int16x8_t v30 = v244;
              *uint64_t v144 = v239;
              v144[1] = v32;
              v144[2] = v31;
              v144[3] = v30;
              char v161 = 63;
            }
          }
          v143[7] = v161;
          if (v199) {
            goto LABEL_236;
          }
LABEL_26:
          BOOL v23 = v36++ == v187 >> 3;
          uint64_t v28 = v195;
        }
        while (!v23);
        BOOL v23 = v18++ == v180;
      }
      while (!v23);
    }
  }
  return result;
}

uint64_t AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, char a12)
{
  v174[24] = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v148 = a8;
  unsigned int v133 = a8 + a10 - 1;
  uint64_t v149 = a1;
  if (*(void *)(a1 + 168)) {
    int v17 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v17 = 0;
  }
  unsigned int v18 = a5 - 1;
  unsigned int v19 = a6 - 1;
  unsigned int v20 = a8 >> 3;
  unsigned int v132 = v133 >> 3;
  BOOL v21 = (v17 & 0xD00) == 0 || v17 == 768;
  int v22 = v17 & 0xE00;
  int v24 = !v21 && v22 != 1024;
  int v154 = v24;
  uint64_t result = a1;
  if (*(unsigned char *)(a1 + 232))
  {
    unsigned int v26 = *(unsigned __int8 *)(a1 + 255);
    unsigned int v27 = *(unsigned __int8 *)(a1 + 254);
    char v28 = __clz(v18);
    if (1 << v26 >= a6 || a5 >> v27)
    {
      if (!(a6 >> v26) && 1 << v27 < a5)
      {
        if (a6 < 2) {
          unsigned int v31 = 0;
        }
        else {
          unsigned int v31 = __clz(~(-1 << -(char)__clz(v19))) - 32;
        }
        v27 += v26 + v31;
        unsigned int v26 = -v31;
      }
    }
    else
    {
      unsigned int v29 = 32 - __clz(~(-1 << -v28));
      unsigned int v30 = v27 + v26;
      if (a5 < 2) {
        unsigned int v29 = 0;
      }
      unsigned int v26 = v30 - v29;
      unsigned int v27 = v29;
    }
    if (a5 < 2)
    {
      if (v27) {
        goto LABEL_27;
      }
    }
    else if (32 - __clz(~(-1 << -v28)) < v27)
    {
LABEL_27:
      BOOL v143 = 0;
LABEL_32:
      unsigned int v140 = v27 - 3;
      unsigned int v137 = v26 - 3;
      int v33 = -1 << *(unsigned char *)(*(void *)(a1 + 208) + 48);
      unsigned int v130 = (((~v33 + a5) & v33) + ~(-1 << v27)) >> v27;
      goto LABEL_33;
    }
    if (a6 < 2) {
      unsigned int v32 = 0;
    }
    else {
      unsigned int v32 = 32 - __clz(~(-1 << -(char)__clz(v19)));
    }
    BOOL v143 = v32 >= v26;
    goto LABEL_32;
  }
  BOOL v143 = 0;
  unsigned int v130 = 0;
  unsigned int v137 = 0;
  unsigned int v140 = 0;
LABEL_33:
  if (v20 <= v132)
  {
    unsigned int v142 = a7 + a9 - 1;
    unsigned int v129 = a7 >> 3;
    if (a7 >> 3 <= v142 >> 3)
    {
      unsigned int v152 = v18 >> 3;
      unsigned int v128 = v19 >> 3;
      int v151 = (v18 & 7) + 1;
      int v127 = (v19 & 7) + 1;
      uint32x2_t v34 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0x700000007);
      int8x8_t v35 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v34, 3uLL))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x1000000010, v34));
      __int32 v138 = v35.i32[0] | v35.i32[1];
      int8x8_t v136 = v35;
      BOOL v134 = v35.i32[0] != 0;
      BOOL v135 = v35.i32[1] != 0;
      unsigned int v141 = a7;
      do
      {
        unsigned int v36 = (8 * v20) | 7;
        if (8 * v20 <= v148) {
          int v37 = v148;
        }
        else {
          int v37 = 8 * v20;
        }
        if (v133 < v36) {
          unsigned int v36 = v133;
        }
        int v139 = v37 - 8 * v20;
        int v147 = v36 - v37 + 1;
        unsigned int v38 = v129;
        if (v20 == v128) {
          unsigned int v39 = v127;
        }
        else {
          unsigned int v39 = 8;
        }
        uint64_t v146 = a3 + (v37 - v148) * a11;
        unsigned int v150 = v39;
        do
        {
          unsigned int v40 = 8 * v38;
          unsigned int v41 = 8 * (v38 + 1) - 1;
          if (8 * v38 <= a7) {
            int v42 = a7;
          }
          else {
            int v42 = 8 * v38;
          }
          if (v142 < v41) {
            unsigned int v41 = v142;
          }
          int v43 = v41 - v42 + 1;
          if (v38 == v152) {
            unsigned int v44 = v151;
          }
          else {
            unsigned int v44 = 8;
          }
          BOOL v45 = 1;
          if (8 * v20 >= v148 && v40 >= a7)
          {
            int v46 = v151;
            if (v38 != v152) {
              int v46 = 8;
            }
            BOOL v45 = v43 != v46 || v147 != v39;
          }
          if (v143)
          {
            if (v140 | v137)
            {
              int v48 = 0;
              uint64_t v49 = 0;
              BOOL v50 = v137 != 0;
              int v51 = 1;
              BOOL v53 = v140 != 0;
              unsigned int v52 = v137;
              unsigned int v54 = v140;
              do
              {
                --v54;
                if (v53) {
                  v49 |= (unint64_t)(v38 & ~(-1 << v140) & v51) << v48++;
                }
                else {
                  unsigned int v54 = 0;
                }
                --v52;
                if (v50) {
                  v49 |= (unint64_t)(v20 & ~(-1 << v137) & v51) << v48++;
                }
                else {
                  unsigned int v52 = 0;
                }
                v51 *= 2;
                --v48;
                BOOL v50 = v52 != 0;
                BOOL v53 = v54 != 0;
              }
              while (v52 | v54);
            }
            else
            {
              uint64_t v49 = 0;
            }
            uint64_t v62 = *(void *)(result + 320) * ((v38 >> v140) + (v20 >> v137) * v130) + (v49 << 10);
          }
          else
          {
            if (v138)
            {
              int v55 = 0;
              uint64_t v56 = 0;
              int v57 = 1;
              BOOL v58 = v134;
              BOOL v59 = v135;
              __int32 v61 = v136.i32[0];
              __int32 v60 = v136.i32[1];
              do
              {
                --v60;
                if (v59) {
                  v56 |= (unint64_t)(v57 & v38) << v55++;
                }
                else {
                  __int32 v60 = 0;
                }
                --v61;
                if (v58) {
                  v56 |= (unint64_t)(v57 & v20) << v55++;
                }
                else {
                  __int32 v61 = 0;
                }
                v57 *= 2;
                --v55;
                BOOL v58 = v61 != 0;
                BOOL v59 = v60 != 0;
              }
              while (v61 | v60);
            }
            else
            {
              uint64_t v56 = 0;
            }
            uint64_t v62 = v56 << 10;
          }
          unsigned int v63 = *(_DWORD *)(result + 128) >> (*(unsigned char *)(result + 144) + a12);
          if (v63 <= 1) {
            unsigned int v63 = 1;
          }
          unsigned int v64 = v63 + 7;
          if (v64 < 0x10) {
            unsigned int v65 = 0;
          }
          else {
            unsigned int v65 = 32 - __clz(~(-1 << -(char)__clz((v64 >> 3) - 1)));
          }
          unsigned int v66 = *(_DWORD *)(result + 132) >> (*(unsigned char *)(result + 144) + a12);
          if (v66 <= 1) {
            unsigned int v66 = 1;
          }
          unsigned int v67 = v66 + 7;
          if (v67 < 0x10) {
            unsigned int v68 = 0;
          }
          else {
            unsigned int v68 = 32 - __clz(~(-1 << -(char)__clz((v67 >> 3) - 1)));
          }
          if (v68 | v65)
          {
            int v69 = 0;
            uint64_t v70 = 0;
            BOOL v71 = v65 != 0;
            BOOL v72 = v68 != 0;
            int v73 = 1;
            do
            {
              --v65;
              if (v71) {
                v70 |= (unint64_t)(v73 & v38) << v69++;
              }
              else {
                unsigned int v65 = 0;
              }
              --v68;
              if (v72) {
                v70 |= (unint64_t)(v73 & v20) << v69++;
              }
              else {
                unsigned int v68 = 0;
              }
              v73 *= 2;
              --v69;
              BOOL v72 = v68 != 0;
              BOOL v71 = v65 != 0;
            }
            while (v68 | v65);
          }
          else
          {
            uint64_t v70 = 0;
          }
          int v75 = v44 < 8 || v45;
          BOOL v76 = (unsigned __int8 *)(a4 + 8 * v70);
          unsigned int v74 = v42 - a7;
          uint64_t v77 = v146 + 16 * (v42 - a7);
          int v78 = (int8x16_t *)(a2 + v62);
          if (v39 < 8) {
            int v79 = 1;
          }
          else {
            int v79 = v75;
          }
          __src = v78;
          if (v154)
          {
            if (!v79)
            {
              int v78 = (int8x16_t *)__dst;
LABEL_123:
              int16x8_t v81 = (unsigned char *)(v146 + 16 * v74);
              uint64_t v82 = a11;
              unsigned int v83 = v78;
              uint64_t v84 = (char *)(a4 + 8 * v70);
              goto LABEL_157;
            }
            char v80 = v44;
            memcpy(__dst, __src, sizeof(__dst));
            LOBYTE(v44) = v80;
            int v78 = (int8x16_t *)__dst;
            LOBYTE(v39) = v150;
            uint64_t result = v149;
          }
          else if (!v79)
          {
            goto LABEL_123;
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE16ELj4ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = result;
          int v156 = v78;
          unsigned __int8 v164 = v44;
          unsigned __int8 v165 = v39;
          unsigned int v160 = v139;
          unsigned int v161 = v42 - v40;
          unsigned int v157 = v76;
          uint64_t v158 = v77;
          uint64_t v159 = a11;
          unsigned int v162 = v147;
          unsigned int v163 = v43;
          if (v45)
          {
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(result + 8) + 7384), block);
            goto LABEL_158;
          }
          uint64_t v85 = (uint64_t)v78->i64
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)v167, 128, (uint64_t)v78, *v76);
          uint64_t v86 = v85
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v169, 128, v85, v76[1]);
          uint64_t v87 = v86
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v168, 128, v86, v76[2]);
          uint64_t v88 = v87
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v170, 128, v87, v76[3]);
          uint64_t v89 = v88
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v171, 128, v88, v76[4]);
          uint64_t v90 = v89
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v173, 128, v89, v76[5]);
          uint64_t v91 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v172, 128, v90, v76[6]);
          AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)v174, 128, v90 + v91, v76[7]);
          uint64_t v92 = v162;
          if (v162 && v163)
          {
            uint64_t v93 = 0;
            unint64_t v94 = (unint64_t)v160 << 7;
            uint64_t v95 = 16 * v161;
            uint64_t v96 = &v167[v94 + v95];
            uint64_t v97 = v158;
            uint64_t v98 = v159;
            unint64_t v99 = 16 * v163;
            if (v99 <= 1) {
              unint64_t v100 = 1;
            }
            else {
              unint64_t v100 = 16 * v163;
            }
            unint64_t v101 = v94 + v95;
            uint64_t v102 = &v167[v94 + v95];
            if (v100) {
              BOOL v103 = (v100 - 1) >> 32 == 0;
            }
            else {
              BOOL v103 = 0;
            }
            char v104 = !v103;
            uint64_t v105 = v100 & 0xFFFFFFFE0;
            uint64_t v106 = v100 & 0xFFFFFFFF0;
            unsigned int v107 = &v167[v101 + 16];
            uint64_t v108 = (long long *)(v158 + 16);
            uint64_t v109 = v96;
            uint64_t v110 = v158;
            do
            {
              uint64_t v111 = (char *)(v97 + v98 * v93);
              uint64_t v112 = &v96[128 * v93];
              if ((unint64_t)(&v102[128 * v93] - v111) < 0x20) {
                char v113 = 1;
              }
              else {
                char v113 = v104;
              }
              if (v113)
              {
                int v114 = 0;
                goto LABEL_153;
              }
              if (v100 >= 0x20)
              {
                char v120 = v108;
                uint64_t v121 = v107;
                uint64_t v122 = v100 & 0xFFFFFFFE0;
                do
                {
                  long long v123 = *v120;
                  *(v121 - 1) = *(v120 - 1);
                  *uint64_t v121 = v123;
                  v121 += 2;
                  v120 += 2;
                  v122 -= 32;
                }
                while (v122);
                if (v100 == v105) {
                  goto LABEL_136;
                }
                uint64_t v115 = v100 & 0xFFFFFFFE0;
                if ((v100 & 0x10) == 0)
                {
                  v111 += v105;
                  v112 += v105;
                  int v114 = v100 & 0xFFFFFFE0;
                  goto LABEL_153;
                }
              }
              else
              {
                uint64_t v115 = 0;
              }
              v112 += v106;
              unint64_t v116 = v115 - (v100 & 0xFFFFFFFF0);
              unint64_t v117 = (uint64_t *)(v110 + v115);
              unint64_t v118 = &v109[v115];
              do
              {
                uint64_t v119 = *v117++;
                *v118++ = v119;
                v116 += 8;
              }
              while (v116);
              if (v100 == v106) {
                goto LABEL_136;
              }
              v111 += v106;
              int v114 = v100 & 0xFFFFFFF0;
LABEL_153:
              unsigned int v124 = v114 + 1;
              do
              {
                char v125 = *v111++;
                *v112++ = v125;
              }
              while (v99 > v124++);
LABEL_136:
              ++v93;
              v107 += 128;
              uint64_t v108 = (long long *)((char *)v108 + v98);
              v110 += v98;
              v109 += 128;
            }
            while (v93 != v92);
          }
          unsigned int v83 = v156;
          uint64_t v84 = (char *)v157;
          unsigned int v44 = v164;
          unsigned int v39 = v165;
          int16x8_t v81 = v167;
          uint64_t v82 = 128;
LABEL_157:
          AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((uint64_t)v81, v82, v83, v84, v44, v39);
LABEL_158:
          if (v154) {
            memcpy(__src, v78, 0x400uLL);
          }
          a7 = v141;
          BOOL v21 = v38++ == v142 >> 3;
          uint64_t result = v149;
          unsigned int v39 = v150;
        }
        while (!v21);
        BOOL v21 = v20++ == v132;
      }
      while (!v21);
    }
  }
  return result;
}

uint64_t AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, char a12)
{
  v221[24] = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v197 = a8;
  unsigned int v179 = a8 + a10 - 1;
  uint64_t v198 = a1;
  if (*(void *)(a1 + 168)) {
    int v17 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v17 = 0;
  }
  unsigned int v18 = a5 - 1;
  unsigned int v19 = a6 - 1;
  unsigned int v20 = a8 >> 3;
  unsigned int v178 = v179 >> 3;
  BOOL v21 = (v17 & 0xD00) == 0 || v17 == 768;
  int v22 = v17 & 0xE00;
  int v24 = !v21 && v22 != 1024;
  int v201 = v24;
  uint64_t result = a1;
  if (*(unsigned char *)(a1 + 232))
  {
    unsigned int v26 = *(unsigned __int8 *)(a1 + 255);
    unsigned int v27 = *(unsigned __int8 *)(a1 + 254);
    char v28 = __clz(v18);
    if (1 << v26 >= a6 || a5 >> v27)
    {
      if (!(a6 >> v26) && 1 << v27 < a5)
      {
        if (a6 < 2) {
          unsigned int v31 = 0;
        }
        else {
          unsigned int v31 = __clz(~(-1 << -(char)__clz(v19))) - 32;
        }
        v27 += v26 + v31;
        unsigned int v26 = -v31;
      }
    }
    else
    {
      unsigned int v29 = 32 - __clz(~(-1 << -v28));
      unsigned int v30 = v27 + v26;
      if (a5 < 2) {
        unsigned int v29 = 0;
      }
      unsigned int v26 = v30 - v29;
      unsigned int v27 = v29;
    }
    if (a5 < 2)
    {
      if (v27) {
        goto LABEL_27;
      }
    }
    else if (32 - __clz(~(-1 << -v28)) < v27)
    {
LABEL_27:
      BOOL v192 = 0;
LABEL_32:
      unsigned int v188 = v27 - 3;
      unsigned int v183 = v26 - 3;
      int v33 = -1 << *(unsigned char *)(*(void *)(a1 + 208) + 48);
      unsigned int v176 = (((~v33 + a5) & v33) + ~(-1 << v27)) >> v27;
      goto LABEL_33;
    }
    if (a6 < 2) {
      unsigned int v32 = 0;
    }
    else {
      unsigned int v32 = 32 - __clz(~(-1 << -(char)__clz(v19)));
    }
    BOOL v192 = v32 >= v26;
    goto LABEL_32;
  }
  BOOL v192 = 0;
  unsigned int v176 = 0;
  unsigned int v183 = 0;
  unsigned int v188 = 0;
LABEL_33:
  if (v20 <= v178)
  {
    unsigned int v191 = a7 + a9 - 1;
    unsigned int v175 = a7 >> 3;
    if (a7 >> 3 <= v191 >> 3)
    {
      unsigned int v200 = v18 >> 3;
      unsigned int v174 = v19 >> 3;
      int v199 = (v18 & 7) + 1;
      int v173 = (v19 & 7) + 1;
      int v172 = ~(-1 << v183);
      uint32x2_t v34 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0x700000007);
      int8x8_t v35 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v34, 3uLL))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x1000000010, v34));
      __int32 v186 = v35.i32[0] | v35.i32[1];
      int8x8_t v182 = v35;
      BOOL v181 = v35.i32[1] != 0;
      uint64_t v36 = a11;
      BOOL v180 = v35.i32[0] != 0;
      uint64_t v37 = 2 * a11;
      unsigned int v190 = a7;
      do
      {
        unsigned int v38 = (8 * v20) | 7;
        if (8 * v20 <= v197) {
          int v39 = v197;
        }
        else {
          int v39 = 8 * v20;
        }
        if (v179 < v38) {
          unsigned int v38 = v179;
        }
        int v187 = v39 - 8 * v20;
        int v196 = v38 - v39 + 1;
        unsigned int v40 = v175;
        if (v20 == v174) {
          unsigned int v41 = v173;
        }
        else {
          unsigned int v41 = 8;
        }
        int v42 = v20 & v172;
        uint64_t v195 = a3 + (v39 - v197) * v36;
        do
        {
          unsigned int v43 = 8 * v40;
          unsigned int v44 = 8 * (v40 + 1) - 1;
          if (8 * v40 <= a7) {
            int v45 = a7;
          }
          else {
            int v45 = 8 * v40;
          }
          if (v191 < v44) {
            unsigned int v44 = v191;
          }
          int v46 = v44 - v45 + 1;
          if (v40 == v200) {
            unsigned int v47 = v199;
          }
          else {
            unsigned int v47 = 8;
          }
          BOOL v48 = 1;
          if (8 * v20 >= v197 && v43 >= a7)
          {
            int v49 = v199;
            if (v40 != v200) {
              int v49 = 8;
            }
            BOOL v48 = v46 != v49 || v196 != v41;
          }
          if (v192)
          {
            if (v188 | v183)
            {
              int v51 = 0;
              uint64_t v52 = 0;
              BOOL v53 = v183 != 0;
              int v54 = 1;
              BOOL v56 = v188 != 0;
              unsigned int v55 = v183;
              unsigned int v57 = v188;
              do
              {
                --v57;
                if (v56) {
                  v52 |= (unint64_t)(v40 & ~(-1 << v188) & v54) << v51++;
                }
                else {
                  unsigned int v57 = 0;
                }
                --v55;
                if (v53) {
                  v52 |= (unint64_t)(v42 & v54) << v51++;
                }
                else {
                  unsigned int v55 = 0;
                }
                v54 *= 2;
                --v51;
                BOOL v53 = v55 != 0;
                BOOL v56 = v57 != 0;
              }
              while (v55 | v57);
            }
            else
            {
              uint64_t v52 = 0;
            }
            uint64_t v65 = *(void *)(result + 320) * ((v40 >> v188) + (v20 >> v183) * v176) + (v52 << 10);
          }
          else
          {
            if (v186)
            {
              int v58 = 0;
              uint64_t v59 = 0;
              int v60 = 1;
              BOOL v61 = v180;
              BOOL v62 = v181;
              __int32 v64 = v182.i32[0];
              __int32 v63 = v182.i32[1];
              do
              {
                --v63;
                if (v62) {
                  v59 |= (unint64_t)(v60 & v40) << v58++;
                }
                else {
                  __int32 v63 = 0;
                }
                --v64;
                if (v61) {
                  v59 |= (unint64_t)(v60 & v20) << v58++;
                }
                else {
                  __int32 v64 = 0;
                }
                v60 *= 2;
                --v58;
                BOOL v61 = v64 != 0;
                BOOL v62 = v63 != 0;
              }
              while (v64 | v63);
            }
            else
            {
              uint64_t v59 = 0;
            }
            uint64_t v65 = v59 << 10;
          }
          unsigned int v66 = *(_DWORD *)(result + 128) >> (*(unsigned char *)(result + 144) + a12);
          if (v66 <= 1) {
            unsigned int v66 = 1;
          }
          unsigned int v67 = v66 + 7;
          if (v67 < 0x10) {
            unsigned int v68 = 0;
          }
          else {
            unsigned int v68 = 32 - __clz(~(-1 << -(char)__clz((v67 >> 3) - 1)));
          }
          unsigned int v69 = *(_DWORD *)(result + 132) >> (*(unsigned char *)(result + 144) + a12);
          if (v69 <= 1) {
            unsigned int v69 = 1;
          }
          unsigned int v70 = v69 + 7;
          if (v70 < 0x10)
          {
            unsigned int v71 = 0;
            if (!v68)
            {
LABEL_111:
              uint64_t v73 = 0;
              goto LABEL_112;
            }
          }
          else
          {
            unsigned int v71 = 32 - __clz(~(-1 << -(char)__clz((v70 >> 3) - 1)));
            if (!(v71 | v68)) {
              goto LABEL_111;
            }
          }
          int v72 = 0;
          uint64_t v73 = 0;
          BOOL v74 = v68 != 0;
          BOOL v75 = v71 != 0;
          int v76 = 1;
          do
          {
            --v68;
            if (v74) {
              v73 |= (unint64_t)(v76 & v40) << v72++;
            }
            else {
              unsigned int v68 = 0;
            }
            --v71;
            if (v75) {
              v73 |= (unint64_t)(v76 & v20) << v72++;
            }
            else {
              unsigned int v71 = 0;
            }
            v76 *= 2;
            --v72;
            BOOL v75 = v71 != 0;
            BOOL v74 = v68 != 0;
          }
          while (v71 | v68);
LABEL_112:
          unsigned int v77 = v45 - a7;
          int v78 = v47 < 8 || v48;
          int v79 = (unsigned __int8 *)(a4 + 8 * v73);
          uint64_t v80 = v195 + 16 * v77;
          int16x8_t v81 = (void *)(a2 + v65);
          if (v41 < 8) {
            int v82 = 1;
          }
          else {
            int v82 = v78;
          }
          if (v201)
          {
            if (!v82)
            {
              uint64_t v86 = __dst;
LABEL_125:
              uint64_t v88 = 0;
              uint64_t v89 = v86;
              do
              {
                uint64_t v102 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,4u>::kSubblockPositions[v88 + 1];
                uint64_t v103 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,4u>::kSubblockPositions[v88];
                unsigned int v104 = (v47 - 4 * v103) & ~((int)(v47 - 4 * v103) >> 31);
                if (v104 >= 4) {
                  unsigned int v104 = 4;
                }
                unsigned int v105 = (v41 - 2 * v102) & ~((int)(v41 - 2 * v102) >> 31);
                if (v105 >= 2) {
                  unsigned int v105 = 2;
                }
                if (v104) {
                  BOOL v106 = v105 == 0;
                }
                else {
                  BOOL v106 = 1;
                }
                if (v106)
                {
                  char v101 = 0;
                }
                else
                {
                  uint64_t v90 = (long long *)(v80 + v37 * v102 + (v103 << 6));
                  uint64_t v91 = v90 + 2;
                  long long v93 = *v90;
                  long long v94 = v90[1];
                  uint64_t v92 = (long long *)((char *)v90 + v36);
                  long long v95 = *v91;
                  long long v96 = v91[1];
                  long long v97 = *v92;
                  long long v98 = v92[1];
                  v92 += 2;
                  long long v99 = *v92;
                  long long v100 = v92[1];
                  *uint64_t v89 = v93;
                  v89[1] = v94;
                  v89[2] = v97;
                  v89[3] = v98;
                  v89[4] = v95;
                  v89[5] = v96;
                  v89[6] = v99;
                  v89[7] = v100;
                  v89 += 8;
                  char v101 = 127;
                }
                *v79++ = v101;
                v88 += 2;
              }
              while (v88 != 16);
              a7 = v190;
LABEL_138:
              unsigned int v107 = v40 + 1;
              if (v201) {
                goto LABEL_47;
              }
              goto LABEL_48;
            }
            unsigned int v83 = v81;
            int v84 = v46;
            BOOL v184 = v48;
            int v85 = v45;
            memcpy(__dst, v81, sizeof(__dst));
            int v45 = v85;
            BOOL v48 = v184;
            unsigned int v43 = 8 * v40;
            int v46 = v84;
            uint64_t v86 = __dst;
            int16x8_t v81 = v83;
            int v42 = v20 & v172;
            uint64_t v36 = a11;
            uint64_t result = v198;
          }
          else
          {
            uint64_t v86 = v81;
            if (!v82) {
              goto LABEL_125;
            }
          }
          unsigned int v189 = v81;
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE16ELj4ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = result;
          int16x8_t v203 = v86;
          unsigned __int8 v211 = v47;
          unsigned __int8 v212 = v41;
          unsigned int v207 = v187;
          unsigned int v208 = v45 - v43;
          int16x8_t v204 = v79;
          uint64_t v205 = v80;
          uint64_t v206 = v36;
          unsigned int v209 = v196;
          unsigned int v210 = v46;
          if (v48)
          {
            uint64_t v87 = v86;
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(result + 8) + 7384), block);
            uint64_t v86 = v87;
            uint64_t v36 = a11;
            uint64_t result = v198;
            a7 = v190;
            int16x8_t v81 = v189;
            uint64_t v37 = 2 * a11;
            goto LABEL_138;
          }
          uint64_t v185 = v86;
          uint64_t v108 = (uint64_t)&v86[AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)v214, 128, (uint64_t)v86, *v79)];
          uint64_t v109 = v108
               + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v216, 128, v108, v79[1]);
          uint64_t v110 = v109
               + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v215, 128, v109, v79[2]);
          uint64_t v111 = v110
               + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v217, 128, v110, v79[3]);
          uint64_t v112 = v111
               + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v218, 128, v111, v79[4]);
          uint64_t v113 = v112
               + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v220, 128, v112, v79[5]);
          uint64_t v114 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v219, 128, v113, v79[6]);
          AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)v221, 128, v113 + v114, v79[7]);
          uint64_t v115 = v209;
          if (v209 && v210)
          {
            uint64_t v116 = 0;
            unint64_t v117 = (unint64_t)v207 << 7;
            uint64_t v118 = 16 * v208;
            uint64_t v119 = &v214[v117 + v118];
            uint64_t v120 = v205;
            uint64_t v121 = v206;
            unint64_t v122 = 16 * v210;
            if (v122 <= 1) {
              unint64_t v123 = 1;
            }
            else {
              unint64_t v123 = 16 * v210;
            }
            unint64_t v124 = v117 + v118;
            char v125 = &v214[v117 + v118];
            if (v123) {
              BOOL v126 = (v123 - 1) >> 32 == 0;
            }
            else {
              BOOL v126 = 0;
            }
            char v127 = !v126;
            uint64_t v128 = v123 & 0xFFFFFFFE0;
            uint64_t v129 = v123 & 0xFFFFFFFF0;
            unsigned int v130 = &v214[v124 + 16];
            uint64_t v131 = (long long *)(v205 + 16);
            unsigned int v132 = v119;
            uint64_t v133 = v205;
            do
            {
              BOOL v134 = (char *)(v120 + v121 * v116);
              BOOL v135 = &v119[128 * v116];
              if ((unint64_t)(&v125[128 * v116] - v134) < 0x20) {
                char v136 = 1;
              }
              else {
                char v136 = v127;
              }
              if (v136)
              {
                int v137 = 0;
                goto LABEL_169;
              }
              if (v123 >= 0x20)
              {
                BOOL v143 = v131;
                uint64_t v144 = v130;
                uint64_t v145 = v123 & 0xFFFFFFFE0;
                do
                {
                  long long v146 = *v143;
                  *(v144 - 1) = *(v143 - 1);
                  *uint64_t v144 = v146;
                  v144 += 2;
                  v143 += 2;
                  v145 -= 32;
                }
                while (v145);
                if (v123 == v128) {
                  goto LABEL_152;
                }
                uint64_t v138 = v123 & 0xFFFFFFFE0;
                if ((v123 & 0x10) == 0)
                {
                  v134 += v128;
                  v135 += v128;
                  int v137 = v123 & 0xFFFFFFE0;
                  goto LABEL_169;
                }
              }
              else
              {
                uint64_t v138 = 0;
              }
              v135 += v129;
              unint64_t v139 = v138 - (v123 & 0xFFFFFFFF0);
              unsigned int v140 = (uint64_t *)(v133 + v138);
              unsigned int v141 = &v132[v138];
              do
              {
                uint64_t v142 = *v140++;
                *v141++ = v142;
                v139 += 8;
              }
              while (v139);
              if (v123 == v129) {
                goto LABEL_152;
              }
              v134 += v129;
              int v137 = v123 & 0xFFFFFFF0;
LABEL_169:
              unsigned int v147 = v137 + 1;
              do
              {
                char v148 = *v134++;
                *v135++ = v148;
              }
              while (v122 > v147++);
LABEL_152:
              ++v116;
              v130 += 128;
              uint64_t v131 = (long long *)((char *)v131 + v121);
              v133 += v121;
              v132 += 128;
            }
            while (v116 != v115);
          }
          uint64_t v150 = 0;
          int v151 = v203;
          unsigned int v152 = (char *)v204;
          int v153 = v211;
          int v154 = v212;
          a7 = v190;
          uint64_t v36 = a11;
          uint64_t result = v198;
          uint64_t v37 = 2 * a11;
          unsigned int v107 = v40 + 1;
          uint64_t v86 = v185;
          do
          {
            uint64_t v167 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,4u>::kSubblockPositions[v150 + 1];
            uint64_t v168 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,4u>::kSubblockPositions[v150];
            unsigned int v169 = (v153 - 4 * v168) & ~((v153 - 4 * (int)v168) >> 31);
            if (v169 >= 4) {
              unsigned int v169 = 4;
            }
            unsigned int v170 = (v154 - 2 * v167) & ~((v154 - 2 * (int)v167) >> 31);
            if (v170 >= 2) {
              unsigned int v170 = 2;
            }
            if (v169) {
              BOOL v171 = v170 == 0;
            }
            else {
              BOOL v171 = 1;
            }
            if (v171)
            {
              char v166 = 0;
            }
            else
            {
              char v155 = (long long *)&v214[256 * v167 + 64 * v168];
              long long v157 = *v155;
              long long v158 = v155[1];
              int v156 = v155 + 2;
              uint64_t v159 = v155 + 8;
              v155 += 10;
              long long v160 = *v156;
              long long v161 = v156[1];
              long long v162 = *v159;
              long long v163 = v159[1];
              long long v164 = *v155;
              long long v165 = v155[1];
              *int v151 = v157;
              v151[1] = v158;
              v151[2] = v162;
              v151[3] = v163;
              v151[4] = v160;
              v151[5] = v161;
              v151[6] = v164;
              v151[7] = v165;
              v151 += 8;
              char v166 = 127;
            }
            *v152++ = v166;
            v150 += 2;
          }
          while (v150 != 16);
          int16x8_t v81 = v189;
          if (v201)
          {
LABEL_47:
            memcpy(v81, v86, 0x400uLL);
            uint64_t v37 = 2 * a11;
            uint64_t v36 = a11;
            uint64_t result = v198;
          }
LABEL_48:
          BOOL v21 = v40 == v191 >> 3;
          unsigned int v40 = v107;
        }
        while (!v21);
        BOOL v21 = v20++ == v178;
      }
      while (!v21);
    }
  }
  return result;
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, int a12)
{
  v177[24] = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  uint64_t v17 = a1;
  unsigned int v152 = a8;
  unsigned int v18 = a8 >> 3;
  unsigned int v136 = a8 + a10 - 1;
  unsigned int v138 = v136 >> 3;
  unsigned int v19 = *(unsigned __int8 *)(*(void *)(a1 + 208) + 88);
  unsigned int v20 = *(_DWORD *)(a1 + 112);
  uint64_t v153 = v17;
  if (*(void *)(v17 + 168))
  {
    __int16 CacheMode = IOSurfaceGetCacheMode();
    uint64_t v17 = v153;
    int v22 = CacheMode & 0xF00;
  }
  else
  {
    int v22 = 0;
  }
  BOOL v23 = (v22 & 0xD00) == 0 || v22 == 768;
  int v24 = v22 & 0xE00;
  int v26 = !v23 && v24 != 1024;
  int v157 = v26;
  BOOL isLevelTiled = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::isLevelTiled(v17, *(_DWORD *)(v17 + 144) + a12);
  uint64_t v28 = v153;
  BOOL v146 = isLevelTiled;
  if (v18 <= v138)
  {
    unsigned int v145 = a7 + a9 - 1;
    unsigned int v135 = a7 >> 3;
    if (a7 >> 3 <= v145 >> 3)
    {
      unsigned int v132 = a5 - 1;
      unsigned int v134 = (a6 - 1) >> 3;
      int v155 = ((a5 - 1) & 7) + 1;
      unsigned int v156 = (a5 - 1) >> 3;
      int v133 = ((a6 - 1) & 7) + 1;
      uint32x2_t v29 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0x700000007);
      int8x8_t v30 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v29, 3uLL))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x1000000010, v29));
      __int32 v143 = v30.i32[0] | v30.i32[1];
      int8x8_t v142 = v30;
      BOOL v140 = v30.i32[0] != 0;
      BOOL v141 = v30.i32[1] != 0;
      unint64_t v131 = 8 * v20 * (unint64_t)v19;
      unsigned int v144 = a7;
      do
      {
        unsigned int v31 = (8 * v18) | 7;
        if (8 * v18 <= v152) {
          int v32 = v152;
        }
        else {
          int v32 = 8 * v18;
        }
        unsigned int v33 = v135;
        if (v136 < v31) {
          unsigned int v31 = v136;
        }
        int v139 = v32 - 8 * v18;
        int v150 = v31 - v32 + 1;
        unsigned int v151 = 8 * v18;
        if (v18 == v134) {
          unsigned int v34 = v133;
        }
        else {
          unsigned int v34 = 8;
        }
        uint64_t v149 = a3 + (v32 - v152) * a11;
        unsigned int v154 = v34;
        do
        {
          unsigned int v35 = 8 * v33;
          unsigned int v36 = 8 * (v33 + 1) - 1;
          if (8 * v33 <= a7) {
            int v37 = a7;
          }
          else {
            int v37 = 8 * v33;
          }
          if (v145 < v36) {
            unsigned int v36 = v145;
          }
          int v38 = v36 - v37 + 1;
          if (v33 == v156) {
            unsigned int v39 = v155;
          }
          else {
            unsigned int v39 = 8;
          }
          BOOL v40 = 1;
          if (v151 >= v152 && v35 >= a7)
          {
            int v41 = v155;
            if (v33 != v156) {
              int v41 = 8;
            }
            BOOL v40 = v38 != v41 || v150 != v34;
          }
          if (v146)
          {
            unsigned int v62 = 0;
            uint64_t v63 = v131 >> (*(unsigned char *)(v28 + 57) != 0);
            char v64 = 1;
            if (v63 > 127)
            {
              if (v63 > 511)
              {
                if (v63 == 512)
                {
                  char v64 = 0;
                  char v65 = 0;
                  unsigned int v62 = 16;
                  unsigned int v66 = 16;
                }
                else
                {
                  char v65 = 1;
                  unsigned int v66 = 0;
                  if (v63 == 1024)
                  {
                    char v64 = 0;
                    unsigned int v66 = 8;
                    unsigned int v62 = 16;
                  }
                }
              }
              else if (v63 == 128)
              {
                char v64 = 0;
                char v65 = 0;
                unsigned int v62 = 32;
                unsigned int v66 = 32;
              }
              else
              {
                char v65 = 1;
                unsigned int v66 = 0;
                if (v63 == 256)
                {
                  char v64 = 0;
                  char v65 = 0;
                  unsigned int v66 = 16;
                  unsigned int v62 = 32;
                }
              }
            }
            else
            {
              char v65 = 1;
              unsigned int v66 = 0;
              switch(v63)
              {
                case 4:
                  char v64 = 0;
                  char v65 = 0;
                  unsigned int v66 = 128;
                  unsigned int v62 = 256;
                  break;
                case 5:
                case 6:
                case 7:
                case 9:
                case 10:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 17:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                  break;
                case 8:
                  char v64 = 0;
                  char v65 = 0;
                  unsigned int v62 = 128;
                  unsigned int v66 = 128;
                  break;
                case 16:
                  char v64 = 0;
                  char v65 = 0;
                  unsigned int v66 = 64;
                  unsigned int v62 = 128;
                  break;
                case 32:
                  char v64 = 0;
                  char v65 = 0;
                  unsigned int v62 = 64;
                  unsigned int v66 = 64;
                  break;
                default:
                  if (v63 == 64)
                  {
                    char v64 = 0;
                    char v65 = 0;
                    unsigned int v66 = 32;
                    unsigned int v62 = 64;
                  }
                  break;
              }
            }
            unsigned int v120 = (v62 >> 3) - 1;
            if (v64) {
              unsigned int v121 = 0;
            }
            else {
              unsigned int v121 = 32 - __clz(~(-1 << -(char)__clz(v120)));
            }
            unsigned int v122 = (v66 >> 3) - 1;
            if (v65)
            {
              unsigned int v123 = 0;
              if (v121) {
                goto LABEL_149;
              }
            }
            else
            {
              unsigned int v123 = 32 - __clz(~(-1 << -(char)__clz(v122)));
              if (v123 | v121)
              {
LABEL_149:
                int v124 = 0;
                uint64_t v125 = 0;
                int v126 = v33 & v120;
                int v127 = v18 & v122;
                BOOL v128 = v121 != 0;
                BOOL v129 = v123 != 0;
                int v130 = 1;
                do
                {
                  --v121;
                  if (v128) {
                    v125 |= (unint64_t)(v130 & v126) << v124++;
                  }
                  else {
                    unsigned int v121 = 0;
                  }
                  --v123;
                  if (v129) {
                    v125 |= (unint64_t)(v130 & v127) << v124++;
                  }
                  else {
                    unsigned int v123 = 0;
                  }
                  v130 *= 2;
                  --v124;
                  BOOL v129 = v123 != 0;
                  BOOL v128 = v121 != 0;
                }
                while (v123 | v121);
                goto LABEL_161;
              }
            }
            uint64_t v125 = 0;
LABEL_161:
            unint64_t v50 = ((unint64_t)(v35 / v62 + v151 / v66 * ((v62 + v132) / v62)) << 14) + (v125 << 10);
            goto LABEL_59;
          }
          if (v143)
          {
            int v43 = 0;
            uint64_t v44 = 0;
            int v45 = 1;
            BOOL v46 = v140;
            BOOL v47 = v141;
            __int32 v49 = v142.i32[0];
            __int32 v48 = v142.i32[1];
            do
            {
              --v48;
              if (v47) {
                v44 |= (unint64_t)(v45 & v33) << v43++;
              }
              else {
                __int32 v48 = 0;
              }
              --v49;
              if (v46) {
                v44 |= (unint64_t)(v45 & v18) << v43++;
              }
              else {
                __int32 v49 = 0;
              }
              v45 *= 2;
              --v43;
              BOOL v46 = v49 != 0;
              BOOL v47 = v48 != 0;
            }
            while (v49 | v48);
          }
          else
          {
            uint64_t v44 = 0;
          }
          unint64_t v50 = v44 << 10;
LABEL_59:
          unsigned int v51 = *(_DWORD *)(v28 + 128) >> (*(unsigned char *)(v28 + 144) + a12);
          if (v51 <= 1) {
            unsigned int v51 = 1;
          }
          unsigned int v52 = v51 + 7;
          if (v52 < 0x10) {
            unsigned int v53 = 0;
          }
          else {
            unsigned int v53 = 32 - __clz(~(-1 << -(char)__clz((v52 >> 3) - 1)));
          }
          unsigned int v54 = *(_DWORD *)(v28 + 132) >> (*(unsigned char *)(v28 + 144) + a12);
          if (v54 <= 1) {
            unsigned int v54 = 1;
          }
          unsigned int v55 = v54 + 7;
          if (v55 < 0x10)
          {
            unsigned int v56 = 0;
            if (!v53)
            {
LABEL_81:
              uint64_t v58 = 0;
              goto LABEL_82;
            }
          }
          else
          {
            unsigned int v56 = 32 - __clz(~(-1 << -(char)__clz((v55 >> 3) - 1)));
            if (!(v56 | v53)) {
              goto LABEL_81;
            }
          }
          int v57 = 0;
          uint64_t v58 = 0;
          BOOL v59 = v53 != 0;
          BOOL v60 = v56 != 0;
          int v61 = 1;
          do
          {
            --v53;
            if (v59) {
              v58 |= (unint64_t)(v61 & v33) << v57++;
            }
            else {
              unsigned int v53 = 0;
            }
            --v56;
            if (v60) {
              v58 |= (unint64_t)(v61 & v18) << v57++;
            }
            else {
              unsigned int v56 = 0;
            }
            v61 *= 2;
            --v57;
            BOOL v60 = v56 != 0;
            BOOL v59 = v53 != 0;
          }
          while (v56 | v53);
LABEL_82:
          int v67 = v39 < 8 || v40;
          unsigned int v68 = (char *)(a4 + 8 * v58);
          uint64_t v69 = v149 + 16 * (v37 - a7);
          unsigned int v70 = (int8x16_t *)(a2 + v50);
          if (v34 < 8) {
            int v71 = 1;
          }
          else {
            int v71 = v67;
          }
          if (v157)
          {
            if (!v71)
            {
              unsigned int v77 = (int8x16_t *)__dst;
LABEL_95:
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock(v69, a11, v77, v68, v39, v34);
              a7 = v144;
              goto LABEL_129;
            }
            int v72 = v70;
            char v73 = v39;
            int v74 = v38;
            BOOL v75 = v70;
            BOOL v76 = v40;
            memcpy(__dst, v72, sizeof(__dst));
            BOOL v40 = v76;
            unsigned int v70 = v75;
            int v38 = v74;
            LOBYTE(v39) = v73;
            unsigned int v35 = 8 * v33;
            unsigned int v77 = (int8x16_t *)__dst;
            LOBYTE(v34) = v154;
            uint64_t v28 = v153;
          }
          else
          {
            unsigned int v77 = v70;
            if (!v71) {
              goto LABEL_95;
            }
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE16ELj4ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = v28;
          uint64_t v159 = v77;
          unsigned __int8 v167 = v39;
          unsigned __int8 v168 = v34;
          unsigned int v163 = v139;
          unsigned int v164 = v37 - v35;
          long long v160 = v68;
          uint64_t v161 = v69;
          uint64_t v162 = a11;
          unsigned int v165 = v150;
          unsigned int v166 = v38;
          if (v40)
          {
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(v28 + 8) + 7384), block);
            a7 = v144;
            goto LABEL_129;
          }
          uint64_t v78 = (uint64_t)v77->i64
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)v170, 128, (uint64_t)v77, *v68);
          uint64_t v79 = v78
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v172, 128, v78, v68[1]);
          uint64_t v80 = v79
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v171, 128, v79, v68[2]);
          uint64_t v81 = v80
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v173, 128, v80, v68[3]);
          uint64_t v82 = v81
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v174, 128, v81, v68[4]);
          uint64_t v83 = v82
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v176, 128, v82, v68[5]);
          uint64_t v84 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v175, 128, v83, v68[6]);
          AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)v177, 128, v83 + v84, v68[7]);
          uint64_t v85 = v165;
          a7 = v144;
          if (v165 && v166)
          {
            uint64_t v86 = 0;
            unint64_t v87 = (unint64_t)v163 << 7;
            uint64_t v88 = 16 * v164;
            uint64_t v89 = &v170[v87 + v88];
            uint64_t v90 = v161;
            uint64_t v91 = v162;
            unint64_t v92 = 16 * v166;
            if (v92 <= 1) {
              unint64_t v93 = 1;
            }
            else {
              unint64_t v93 = 16 * v166;
            }
            unint64_t v94 = v87 + v88;
            long long v95 = &v170[v87 + v88];
            if (v93) {
              BOOL v96 = (v93 - 1) >> 32 == 0;
            }
            else {
              BOOL v96 = 0;
            }
            char v97 = !v96;
            uint64_t v98 = v93 & 0xFFFFFFFE0;
            uint64_t v99 = v93 & 0xFFFFFFFF0;
            long long v100 = &v170[v94 + 16];
            char v101 = (long long *)(v161 + 16);
            uint64_t v102 = v89;
            uint64_t v103 = v161;
            do
            {
              unsigned int v104 = (char *)(v90 + v91 * v86);
              unsigned int v105 = &v89[128 * v86];
              if ((unint64_t)(&v95[128 * v86] - v104) < 0x20) {
                char v106 = 1;
              }
              else {
                char v106 = v97;
              }
              if (v106)
              {
                int v107 = 0;
                goto LABEL_125;
              }
              if (v93 >= 0x20)
              {
                uint64_t v113 = v101;
                uint64_t v114 = v100;
                uint64_t v115 = v93 & 0xFFFFFFFE0;
                do
                {
                  long long v116 = *v113;
                  *(v114 - 1) = *(v113 - 1);
                  *uint64_t v114 = v116;
                  v114 += 2;
                  v113 += 2;
                  v115 -= 32;
                }
                while (v115);
                if (v93 == v98) {
                  goto LABEL_108;
                }
                uint64_t v108 = v93 & 0xFFFFFFFE0;
                if ((v93 & 0x10) == 0)
                {
                  v104 += v98;
                  v105 += v98;
                  int v107 = v93 & 0xFFFFFFE0;
                  goto LABEL_125;
                }
              }
              else
              {
                uint64_t v108 = 0;
              }
              v105 += v99;
              unint64_t v109 = v108 - (v93 & 0xFFFFFFFF0);
              uint64_t v110 = (uint64_t *)(v103 + v108);
              uint64_t v111 = &v102[v108];
              do
              {
                uint64_t v112 = *v110++;
                *v111++ = v112;
                v109 += 8;
              }
              while (v109);
              if (v93 == v99) {
                goto LABEL_108;
              }
              v104 += v99;
              int v107 = v93 & 0xFFFFFFF0;
LABEL_125:
              unsigned int v117 = v107 + 1;
              do
              {
                char v118 = *v104++;
                *v105++ = v118;
              }
              while (v92 > v117++);
LABEL_108:
              ++v86;
              v100 += 128;
              char v101 = (long long *)((char *)v101 + v91);
              v103 += v91;
              v102 += 128;
            }
            while (v86 != v85);
          }
          AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((uint64_t)v170, 128, v159, v160, v167, v168);
LABEL_129:
          if (v157) {
            memcpy(v70, v77, 0x400uLL);
          }
          BOOL v23 = v33++ == v145 >> 3;
          uint64_t v28 = v153;
          unsigned int v34 = v154;
        }
        while (!v23);
        BOOL v23 = v18++ == v138;
      }
      while (!v23);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, int a12)
{
  v222[24] = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v198 = a8;
  unsigned int v17 = a8 >> 3;
  unsigned int v179 = a8 + a10 - 1;
  unsigned int v181 = v179 >> 3;
  unsigned int v18 = *(unsigned __int8 *)(*(void *)(a1 + 208) + 88);
  unsigned int v19 = *(_DWORD *)(a1 + 112);
  uint64_t v199 = a1;
  if (*(void *)(a1 + 168)) {
    int v20 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v20 = 0;
  }
  BOOL v21 = (v20 & 0xD00) == 0 || v20 == 768;
  int v22 = v20 & 0xE00;
  int v24 = !v21 && v22 != 1024;
  int v202 = v24;
  BOOL isLevelTiled = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::isLevelTiled(a1, *(_DWORD *)(a1 + 144) + a12);
  uint64_t v26 = a1;
  BOOL v192 = isLevelTiled;
  if (v17 <= v181)
  {
    unsigned int v191 = a7 + a9 - 1;
    unsigned int v178 = a7 >> 3;
    if (a7 >> 3 <= v191 >> 3)
    {
      unsigned int v175 = a5 - 1;
      unsigned int v201 = (a5 - 1) >> 3;
      int v200 = ((a5 - 1) & 7) + 1;
      int v176 = ((a6 - 1) & 7) + 1;
      unsigned int v177 = (a6 - 1) >> 3;
      unint64_t v27 = v19 * (unint64_t)v18;
      uint32x2_t v28 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0x700000007);
      int8x8_t v29 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v28, 3uLL))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x1000000010, v28));
      __int32 v189 = v29.i32[0] | v29.i32[1];
      int8x8_t v187 = v29;
      BOOL v185 = v29.i32[0] != 0;
      BOOL v186 = v29.i32[1] != 0;
      uint64_t v30 = a11;
      unint64_t v174 = 8 * v27;
      uint64_t v31 = 2 * a11;
      unsigned int v190 = a7;
      do
      {
        unsigned int v32 = (8 * v17) | 7;
        if (8 * v17 <= v198) {
          int v33 = v198;
        }
        else {
          int v33 = 8 * v17;
        }
        unsigned int v34 = v178;
        if (v179 < v32) {
          unsigned int v32 = v179;
        }
        int v184 = v33 - 8 * v17;
        int v196 = v32 - v33 + 1;
        unsigned int v197 = 8 * v17;
        if (v17 == v177) {
          unsigned int v35 = v176;
        }
        else {
          unsigned int v35 = 8;
        }
        uint64_t v195 = a3 + (v33 - v198) * v30;
        unsigned int v182 = v35;
        do
        {
          unsigned int v36 = 8 * v34;
          unsigned int v37 = 8 * (v34 + 1) - 1;
          if (8 * v34 <= a7) {
            int v38 = a7;
          }
          else {
            int v38 = 8 * v34;
          }
          if (v191 < v37) {
            unsigned int v37 = v191;
          }
          int v39 = v37 - v38 + 1;
          if (v34 == v201) {
            unsigned int v40 = v200;
          }
          else {
            unsigned int v40 = 8;
          }
          BOOL v41 = 1;
          if (v197 >= v198 && v36 >= a7)
          {
            int v42 = v200;
            if (v34 != v201) {
              int v42 = 8;
            }
            BOOL v41 = v39 != v42 || v196 != v35;
          }
          if (v192)
          {
            unsigned int v63 = 0;
            uint64_t v64 = v174 >> (*(unsigned char *)(v26 + 57) != 0);
            char v65 = 1;
            if (v64 > 127)
            {
              if (v64 > 511)
              {
                if (v64 == 512)
                {
                  char v65 = 0;
                  char v66 = 0;
                  unsigned int v63 = 16;
                  unsigned int v67 = 16;
                }
                else
                {
                  char v66 = 1;
                  unsigned int v67 = 0;
                  if (v64 == 1024)
                  {
                    char v65 = 0;
                    unsigned int v67 = 8;
                    unsigned int v63 = 16;
                  }
                }
              }
              else if (v64 == 128)
              {
                char v65 = 0;
                char v66 = 0;
                unsigned int v63 = 32;
                unsigned int v67 = 32;
              }
              else
              {
                char v66 = 1;
                unsigned int v67 = 0;
                if (v64 == 256)
                {
                  char v65 = 0;
                  char v66 = 0;
                  unsigned int v67 = 16;
                  unsigned int v63 = 32;
                }
              }
            }
            else
            {
              char v66 = 1;
              unsigned int v67 = 0;
              switch(v64)
              {
                case 4:
                  char v65 = 0;
                  char v66 = 0;
                  unsigned int v67 = 128;
                  unsigned int v63 = 256;
                  break;
                case 5:
                case 6:
                case 7:
                case 9:
                case 10:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 17:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                  break;
                case 8:
                  char v65 = 0;
                  char v66 = 0;
                  unsigned int v63 = 128;
                  unsigned int v67 = 128;
                  break;
                case 16:
                  char v65 = 0;
                  char v66 = 0;
                  unsigned int v67 = 64;
                  unsigned int v63 = 128;
                  break;
                case 32:
                  char v65 = 0;
                  char v66 = 0;
                  unsigned int v63 = 64;
                  unsigned int v67 = 64;
                  break;
                default:
                  if (v64 == 64)
                  {
                    char v65 = 0;
                    char v66 = 0;
                    unsigned int v67 = 32;
                    unsigned int v63 = 64;
                  }
                  break;
              }
            }
            unsigned int v163 = (v63 >> 3) - 1;
            if (v65) {
              unsigned int v164 = 0;
            }
            else {
              unsigned int v164 = 32 - __clz(~(-1 << -(char)__clz(v163)));
            }
            unsigned int v165 = (v67 >> 3) - 1;
            if (v66)
            {
              unsigned int v166 = 0;
              if (v164) {
                goto LABEL_174;
              }
            }
            else
            {
              unsigned int v166 = 32 - __clz(~(-1 << -(char)__clz(v165)));
              if (v166 | v164)
              {
LABEL_174:
                int v167 = 0;
                uint64_t v168 = 0;
                int v169 = v34 & v163;
                int v170 = v17 & v165;
                BOOL v171 = v164 != 0;
                BOOL v172 = v166 != 0;
                int v173 = 1;
                do
                {
                  --v164;
                  if (v171) {
                    v168 |= (unint64_t)(v173 & v169) << v167++;
                  }
                  else {
                    unsigned int v164 = 0;
                  }
                  --v166;
                  if (v172) {
                    v168 |= (unint64_t)(v173 & v170) << v167++;
                  }
                  else {
                    unsigned int v166 = 0;
                  }
                  v173 *= 2;
                  --v167;
                  BOOL v172 = v166 != 0;
                  BOOL v171 = v164 != 0;
                }
                while (v166 | v164);
                goto LABEL_186;
              }
            }
            uint64_t v168 = 0;
LABEL_186:
            unint64_t v51 = ((unint64_t)(v36 / v63 + v197 / v67 * ((v63 + v175) / v63)) << 14) + (v168 << 10);
            goto LABEL_59;
          }
          if (v189)
          {
            int v44 = 0;
            uint64_t v45 = 0;
            int v46 = 1;
            BOOL v47 = v185;
            BOOL v48 = v186;
            __int32 v50 = v187.i32[0];
            __int32 v49 = v187.i32[1];
            do
            {
              --v49;
              if (v48) {
                v45 |= (unint64_t)(v46 & v34) << v44++;
              }
              else {
                __int32 v49 = 0;
              }
              --v50;
              if (v47) {
                v45 |= (unint64_t)(v46 & v17) << v44++;
              }
              else {
                __int32 v50 = 0;
              }
              v46 *= 2;
              --v44;
              BOOL v47 = v50 != 0;
              BOOL v48 = v49 != 0;
            }
            while (v50 | v49);
          }
          else
          {
            uint64_t v45 = 0;
          }
          unint64_t v51 = v45 << 10;
LABEL_59:
          unsigned int v52 = *(_DWORD *)(v26 + 128) >> (*(unsigned char *)(v26 + 144) + a12);
          if (v52 <= 1) {
            unsigned int v52 = 1;
          }
          unsigned int v53 = v52 + 7;
          if (v53 < 0x10) {
            unsigned int v54 = 0;
          }
          else {
            unsigned int v54 = 32 - __clz(~(-1 << -(char)__clz((v53 >> 3) - 1)));
          }
          unsigned int v55 = *(_DWORD *)(v26 + 132) >> (*(unsigned char *)(v26 + 144) + a12);
          if (v55 <= 1) {
            unsigned int v55 = 1;
          }
          unsigned int v56 = v55 + 7;
          if (v56 < 0x10)
          {
            unsigned int v57 = 0;
            if (!v54)
            {
LABEL_81:
              uint64_t v59 = 0;
              goto LABEL_82;
            }
          }
          else
          {
            unsigned int v57 = 32 - __clz(~(-1 << -(char)__clz((v56 >> 3) - 1)));
            if (!(v57 | v54)) {
              goto LABEL_81;
            }
          }
          int v58 = 0;
          uint64_t v59 = 0;
          BOOL v60 = v54 != 0;
          BOOL v61 = v57 != 0;
          int v62 = 1;
          do
          {
            --v54;
            if (v60) {
              v59 |= (unint64_t)(v62 & v34) << v58++;
            }
            else {
              unsigned int v54 = 0;
            }
            --v57;
            if (v61) {
              v59 |= (unint64_t)(v62 & v17) << v58++;
            }
            else {
              unsigned int v57 = 0;
            }
            v62 *= 2;
            --v58;
            BOOL v61 = v57 != 0;
            BOOL v60 = v54 != 0;
          }
          while (v57 | v54);
LABEL_82:
          unsigned int v68 = v38 - a7;
          int v69 = v40 < 8 || v41;
          unsigned int v70 = (unsigned __int8 *)(a4 + 8 * v59);
          uint64_t v71 = v195 + 16 * v68;
          int v72 = (void *)(a2 + v51);
          if (v35 < 8) {
            int v73 = 1;
          }
          else {
            int v73 = v69;
          }
          if (v202)
          {
            if (!v73)
            {
              uint64_t v78 = __dst;
LABEL_96:
              uint64_t v80 = 0;
              uint64_t v81 = v78;
              do
              {
                uint64_t v94 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,4u>::kSubblockPositions[v80 + 1];
                uint64_t v95 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,4u>::kSubblockPositions[v80];
                unsigned int v96 = (v40 - 4 * v95) & ~((int)(v40 - 4 * v95) >> 31);
                if (v96 >= 4) {
                  unsigned int v96 = 4;
                }
                unsigned int v97 = (v35 - 2 * v94) & ~((int)(v35 - 2 * v94) >> 31);
                if (v97 >= 2) {
                  unsigned int v97 = 2;
                }
                if (v96) {
                  BOOL v98 = v97 == 0;
                }
                else {
                  BOOL v98 = 1;
                }
                if (v98)
                {
                  char v93 = 0;
                }
                else
                {
                  uint64_t v82 = (long long *)(v71 + v31 * v94 + (v95 << 6));
                  uint64_t v83 = v82 + 2;
                  long long v85 = *v82;
                  long long v86 = v82[1];
                  uint64_t v84 = (long long *)((char *)v82 + v30);
                  long long v87 = *v83;
                  long long v88 = v83[1];
                  long long v89 = *v84;
                  long long v90 = v84[1];
                  v84 += 2;
                  long long v91 = *v84;
                  long long v92 = v84[1];
                  *uint64_t v81 = v85;
                  v81[1] = v86;
                  v81[2] = v89;
                  v81[3] = v90;
                  v81[4] = v87;
                  v81[5] = v88;
                  v81[6] = v91;
                  v81[7] = v92;
                  v81 += 8;
                  char v93 = 127;
                }
                *v70++ = v93;
                v80 += 2;
              }
              while (v80 != 16);
              a7 = v190;
              if (v202) {
                goto LABEL_155;
              }
              goto LABEL_27;
            }
            int v74 = v72;
            int v75 = v39;
            BOOL v76 = v41;
            int v77 = v38;
            memcpy(__dst, v72, sizeof(__dst));
            uint64_t v78 = __dst;
            int v72 = v74;
            int v38 = v77;
            BOOL v41 = v76;
            unsigned int v35 = v182;
            unsigned int v36 = 8 * v34;
            int v39 = v75;
            uint64_t v30 = a11;
            uint64_t v26 = v199;
          }
          else
          {
            uint64_t v78 = v72;
            if (!v73) {
              goto LABEL_96;
            }
          }
          unsigned int v188 = v72;
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE16ELj4ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = v26;
          int16x8_t v204 = v78;
          unsigned __int8 v212 = v40;
          unsigned __int8 v213 = v35;
          unsigned int v208 = v184;
          unsigned int v209 = v38 - v36;
          uint64_t v205 = v70;
          uint64_t v206 = v71;
          uint64_t v207 = v30;
          unsigned int v210 = v196;
          unsigned int v211 = v39;
          if (v41)
          {
            uint64_t v79 = v78;
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(v26 + 8) + 7384), block);
            uint64_t v78 = v79;
            uint64_t v26 = v199;
            a7 = v190;
            uint64_t v31 = 2 * a11;
            int v72 = v188;
            if (!v202) {
              goto LABEL_27;
            }
LABEL_155:
            memcpy(v72, v78, 0x400uLL);
            uint64_t v31 = 2 * a11;
            uint64_t v26 = v199;
            goto LABEL_27;
          }
          unsigned int v183 = v78;
          uint64_t v99 = (uint64_t)&v78[AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)v215, 128, (uint64_t)v78, *v70)];
          uint64_t v100 = v99
               + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v217, 128, v99, v70[1]);
          uint64_t v101 = v100
               + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v216, 128, v100, v70[2]);
          uint64_t v102 = v101
               + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v218, 128, v101, v70[3]);
          uint64_t v103 = v102
               + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v219, 128, v102, v70[4]);
          uint64_t v104 = v103
               + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v221, 128, v103, v70[5]);
          uint64_t v105 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v220, 128, v104, v70[6]);
          AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)v222, 128, v104 + v105, v70[7]);
          uint64_t v106 = v210;
          if (v210 && v211)
          {
            uint64_t v107 = 0;
            unint64_t v108 = (unint64_t)v208 << 7;
            uint64_t v109 = 16 * v209;
            uint64_t v110 = &v215[v108 + v109];
            uint64_t v111 = v206;
            uint64_t v112 = v207;
            unint64_t v113 = 16 * v211;
            if (v113 <= 1) {
              unint64_t v114 = 1;
            }
            else {
              unint64_t v114 = 16 * v211;
            }
            unint64_t v115 = v108 + v109;
            long long v116 = &v215[v108 + v109];
            if (v114) {
              BOOL v117 = (v114 - 1) >> 32 == 0;
            }
            else {
              BOOL v117 = 0;
            }
            char v118 = !v117;
            uint64_t v119 = v114 & 0xFFFFFFFE0;
            uint64_t v120 = v114 & 0xFFFFFFFF0;
            unsigned int v121 = &v215[v115 + 16];
            unsigned int v122 = (long long *)(v206 + 16);
            unsigned int v123 = v110;
            uint64_t v124 = v206;
            do
            {
              uint64_t v125 = (char *)(v111 + v112 * v107);
              int v126 = &v110[128 * v107];
              if ((unint64_t)(&v116[128 * v107] - v125) < 0x20) {
                char v127 = 1;
              }
              else {
                char v127 = v118;
              }
              if (v127)
              {
                int v128 = 0;
                goto LABEL_139;
              }
              if (v114 >= 0x20)
              {
                unsigned int v134 = v122;
                unsigned int v135 = v121;
                uint64_t v136 = v114 & 0xFFFFFFFE0;
                do
                {
                  long long v137 = *v134;
                  *(v135 - 1) = *(v134 - 1);
                  *unsigned int v135 = v137;
                  v135 += 2;
                  v134 += 2;
                  v136 -= 32;
                }
                while (v136);
                if (v114 == v119) {
                  goto LABEL_122;
                }
                uint64_t v129 = v114 & 0xFFFFFFFE0;
                if ((v114 & 0x10) == 0)
                {
                  v125 += v119;
                  v126 += v119;
                  int v128 = v114 & 0xFFFFFFE0;
                  goto LABEL_139;
                }
              }
              else
              {
                uint64_t v129 = 0;
              }
              v126 += v120;
              unint64_t v130 = v129 - (v114 & 0xFFFFFFFF0);
              unint64_t v131 = (uint64_t *)(v124 + v129);
              unsigned int v132 = &v123[v129];
              do
              {
                uint64_t v133 = *v131++;
                *v132++ = v133;
                v130 += 8;
              }
              while (v130);
              if (v114 == v120) {
                goto LABEL_122;
              }
              v125 += v120;
              int v128 = v114 & 0xFFFFFFF0;
LABEL_139:
              unsigned int v138 = v128 + 1;
              do
              {
                char v139 = *v125++;
                *v126++ = v139;
              }
              while (v113 > v138++);
LABEL_122:
              ++v107;
              v121 += 128;
              unsigned int v122 = (long long *)((char *)v122 + v112);
              v124 += v112;
              v123 += 128;
            }
            while (v107 != v106);
          }
          uint64_t v141 = 0;
          int8x8_t v142 = v204;
          __int32 v143 = (char *)v205;
          int v144 = v212;
          int v145 = v213;
          a7 = v190;
          uint64_t v26 = v199;
          uint64_t v31 = 2 * a11;
          int v72 = v188;
          do
          {
            uint64_t v158 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,4u>::kSubblockPositions[v141 + 1];
            uint64_t v159 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,4u>::kSubblockPositions[v141];
            unsigned int v160 = (v144 - 4 * v159) & ~((v144 - 4 * (int)v159) >> 31);
            if (v160 >= 4) {
              unsigned int v160 = 4;
            }
            unsigned int v161 = (v145 - 2 * v158) & ~((v145 - 2 * (int)v158) >> 31);
            if (v161 >= 2) {
              unsigned int v161 = 2;
            }
            if (v160) {
              BOOL v162 = v161 == 0;
            }
            else {
              BOOL v162 = 1;
            }
            if (v162)
            {
              char v157 = 0;
            }
            else
            {
              BOOL v146 = (long long *)&v215[256 * v158 + 64 * v159];
              long long v148 = *v146;
              long long v149 = v146[1];
              unsigned int v147 = v146 + 2;
              int v150 = v146 + 8;
              v146 += 10;
              long long v151 = *v147;
              long long v152 = v147[1];
              long long v153 = *v150;
              long long v154 = v150[1];
              long long v155 = *v146;
              long long v156 = v146[1];
              *int8x8_t v142 = v148;
              v142[1] = v149;
              v142[2] = v153;
              v142[3] = v154;
              v142[4] = v151;
              v142[5] = v152;
              v142[6] = v155;
              v142[7] = v156;
              v142 += 8;
              char v157 = 127;
            }
            *v143++ = v157;
            v141 += 2;
          }
          while (v141 != 16);
          uint64_t v78 = v183;
          if (v202) {
            goto LABEL_155;
          }
LABEL_27:
          BOOL v21 = v34++ == v191 >> 3;
        }
        while (!v21);
        BOOL v21 = v17++ == v181;
      }
      while (!v21);
    }
  }
}

uint64_t AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, char a12)
{
  uint64_t v305 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v222 = a8;
  unsigned int v207 = a8 + a10 - 1;
  uint64_t v223 = a1;
  if (*(void *)(a1 + 168)) {
    int v18 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v18 = 0;
  }
  unsigned int v19 = a5 - 1;
  unsigned int v20 = a6 - 1;
  unsigned int v21 = a8 >> 3;
  unsigned int v206 = v207 >> 3;
  BOOL v22 = (v18 & 0xD00) == 0 || v18 == 768;
  int v23 = v18 & 0xE00;
  int v25 = !v22 && v23 != 1024;
  int v227 = v25;
  uint64_t result = a1;
  if (*(unsigned char *)(a1 + 232))
  {
    unsigned int v27 = *(unsigned __int8 *)(a1 + 255);
    unsigned int v28 = *(unsigned __int8 *)(a1 + 254);
    char v29 = __clz(v19);
    if (1 << v27 >= a6 || a5 >> v28)
    {
      if (!(a6 >> v27) && 1 << v28 < a5)
      {
        if (a6 < 2) {
          unsigned int v32 = 0;
        }
        else {
          unsigned int v32 = __clz(~(-1 << -(char)__clz(v20))) - 32;
        }
        v28 += v27 + v32;
        unsigned int v27 = -v32;
      }
    }
    else
    {
      unsigned int v30 = 32 - __clz(~(-1 << -v29));
      unsigned int v31 = v28 + v27;
      if (a5 < 2) {
        unsigned int v30 = 0;
      }
      unsigned int v27 = v31 - v30;
      unsigned int v28 = v30;
    }
    if (a5 < 2)
    {
      if (v28) {
        goto LABEL_27;
      }
    }
    else if (32 - __clz(~(-1 << -v29)) < v28)
    {
LABEL_27:
      BOOL v217 = 0;
LABEL_32:
      unsigned int v214 = v28 - 3;
      unsigned int v211 = v27 - 3;
      int v34 = -1 << *(unsigned char *)(*(void *)(a1 + 208) + 48);
      unsigned int v204 = (((~v34 + a5) & v34) + ~(-1 << v28)) >> v28;
      goto LABEL_33;
    }
    if (a6 < 2) {
      unsigned int v33 = 0;
    }
    else {
      unsigned int v33 = 32 - __clz(~(-1 << -(char)__clz(v20)));
    }
    BOOL v217 = v33 >= v27;
    goto LABEL_32;
  }
  BOOL v217 = 0;
  unsigned int v204 = 0;
  unsigned int v211 = 0;
  unsigned int v214 = 0;
LABEL_33:
  if (v21 <= v206)
  {
    unsigned int v216 = a7 + a9 - 1;
    unsigned int v203 = a7 >> 3;
    if (a7 >> 3 <= v216 >> 3)
    {
      unsigned int v225 = v19 >> 3;
      unsigned int v202 = v20 >> 3;
      int v224 = (v19 & 7) + 1;
      int v201 = (v20 & 7) + 1;
      int v200 = ~(-1 << v211);
      uint32x2_t v35 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0x700000007);
      v36.i64[1] = -1;
      *(int32x2_t *)v36.i8 = vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v35, 3uLL)))))));
      *(int8x8_t *)v17.i8 = vbic_s8(*(int8x8_t *)v36.i8, (int8x8_t)vcgt_u32((uint32x2_t)0x1000000010, v35));
      __int32 v212 = v17.i32[0] | v17.i32[1];
      BOOL v209 = v17.i32[1] != 0;
      uint64_t v210 = v17.i64[0];
      BOOL v208 = v17.i32[0] != 0;
      unsigned int v215 = a7;
      do
      {
        unsigned int v37 = (8 * v21) | 7;
        if (8 * v21 <= v222) {
          int v38 = v222;
        }
        else {
          int v38 = 8 * v21;
        }
        if (v207 < v37) {
          unsigned int v37 = v207;
        }
        int v213 = v38 - 8 * v21;
        int v221 = v37 - v38 + 1;
        unsigned int v39 = v203;
        int v40 = v201;
        if (v21 != v202) {
          int v40 = 8;
        }
        unsigned int v228 = v40;
        int v41 = v21 & v200;
        uint64_t v220 = a3 + (v38 - v222) * a11;
        do
        {
          unsigned int v42 = 8 * v39;
          unsigned int v43 = 8 * (v39 + 1) - 1;
          if (8 * v39 <= a7) {
            int v44 = a7;
          }
          else {
            int v44 = 8 * v39;
          }
          if (v216 < v43) {
            unsigned int v43 = v216;
          }
          int v45 = v43 - v44 + 1;
          if (v39 == v225) {
            unsigned int v46 = v224;
          }
          else {
            unsigned int v46 = 8;
          }
          BOOL v47 = 1;
          if (8 * v21 >= v222 && v42 >= a7)
          {
            int v48 = v224;
            if (v39 != v225) {
              int v48 = 8;
            }
            BOOL v47 = v45 != v48 || v221 != v228;
          }
          if (v217)
          {
            if (v214 | v211)
            {
              int v50 = 0;
              uint64_t v51 = 0;
              int v52 = 1;
              BOOL v53 = v214 != 0;
              BOOL v54 = v211 != 0;
              unsigned int v55 = v214;
              unsigned int v56 = v211;
              do
              {
                --v55;
                if (v53) {
                  v51 |= (unint64_t)(v39 & ~(-1 << v214) & v52) << v50++;
                }
                else {
                  unsigned int v55 = 0;
                }
                --v56;
                if (v54) {
                  v51 |= (unint64_t)(v41 & v52) << v50++;
                }
                else {
                  unsigned int v56 = 0;
                }
                v52 *= 2;
                --v50;
                BOOL v54 = v56 != 0;
                BOOL v53 = v55 != 0;
              }
              while (v56 | v55);
            }
            else
            {
              uint64_t v51 = 0;
            }
            uint64_t v64 = *(void *)(result + 320) * ((v39 >> v214) + (v21 >> v211) * v204) + (v51 << 10);
          }
          else
          {
            if (v212)
            {
              int v57 = 0;
              uint64_t v58 = 0;
              int v59 = 1;
              BOOL v60 = v209;
              BOOL v61 = v208;
              int v62 = HIDWORD(v210);
              int v63 = v210;
              do
              {
                --v62;
                if (v60) {
                  v58 |= (unint64_t)(v59 & v39) << v57++;
                }
                else {
                  int v62 = 0;
                }
                --v63;
                if (v61) {
                  v58 |= (unint64_t)(v59 & v21) << v57++;
                }
                else {
                  int v63 = 0;
                }
                v59 *= 2;
                --v57;
                BOOL v61 = v63 != 0;
                BOOL v60 = v62 != 0;
              }
              while (v63 | v62);
            }
            else
            {
              uint64_t v58 = 0;
            }
            uint64_t v64 = v58 << 10;
          }
          unsigned int v65 = *(_DWORD *)(result + 128) >> (*(unsigned char *)(result + 144) + a12);
          if (v65 <= 1) {
            unsigned int v65 = 1;
          }
          unsigned int v66 = v65 + 7;
          if (v66 < 0x10) {
            unsigned int v67 = 0;
          }
          else {
            unsigned int v67 = 32 - __clz(~(-1 << -(char)__clz((v66 >> 3) - 1)));
          }
          unsigned int v68 = *(_DWORD *)(result + 132) >> (*(unsigned char *)(result + 144) + a12);
          if (v68 <= 1) {
            unsigned int v68 = 1;
          }
          unsigned int v69 = v68 + 7;
          if (v69 < 0x10) {
            unsigned int v70 = 0;
          }
          else {
            unsigned int v70 = 32 - __clz(~(-1 << -(char)__clz((v69 >> 3) - 1)));
          }
          if (v70 | v67)
          {
            int v71 = 0;
            uint64_t v72 = 0;
            BOOL v73 = v67 != 0;
            BOOL v74 = v70 != 0;
            int v75 = 1;
            do
            {
              --v67;
              if (v73) {
                v72 |= (unint64_t)(v75 & v39) << v71++;
              }
              else {
                unsigned int v67 = 0;
              }
              --v70;
              if (v74) {
                v72 |= (unint64_t)(v75 & v21) << v71++;
              }
              else {
                unsigned int v70 = 0;
              }
              v75 *= 2;
              --v71;
              BOOL v74 = v70 != 0;
              BOOL v73 = v67 != 0;
            }
            while (v70 | v67);
          }
          else
          {
            uint64_t v72 = 0;
          }
          int v76 = v46 < 8 || v47;
          int v77 = (char *)(a4 + 8 * v72);
          uint64_t v78 = v220 + 16 * (v44 - a7);
          uint64_t v79 = (int32x4_t *)(a2 + v64);
          if (v228 < 8) {
            int v80 = 1;
          }
          else {
            int v80 = v76;
          }
          int16x8_t v226 = v79;
          if (v227)
          {
            uint64_t v81 = (int32x4_t *)__dst;
            if (!v80) {
              goto LABEL_121;
            }
            uint64_t v82 = (char *)(a4 + 8 * v72);
            int v83 = v45;
            char v84 = v46;
            memcpy(__dst, v79, sizeof(__dst));
            unsigned int v42 = 8 * v39;
            LOBYTE(v46) = v84;
            int v45 = v83;
            int v77 = v82;
            int v41 = v21 & v200;
            uint64_t result = v223;
          }
          else
          {
            uint64_t v81 = v79;
            if (!v80)
            {
LABEL_121:
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock(v78, a11, (unint64_t)v81, v77, v46, v228);
              goto LABEL_122;
            }
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE11ELj4ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = result;
          int16x8_t v230 = v81;
          unsigned __int8 v238 = v46;
          unsigned __int8 v239 = v228;
          unsigned int v234 = v213;
          unsigned int v235 = v44 - v42;
          int16x8_t v231 = v77;
          uint64_t v232 = v78;
          uint64_t v233 = a11;
          unsigned int v236 = v221;
          unsigned int v237 = v45;
          if (v47)
          {
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(result + 8) + 7384), block);
LABEL_122:
            a7 = v215;
            unsigned int v85 = v39 + 1;
            goto LABEL_214;
          }
          unsigned int v86 = *v77;
          if (v86 == 127)
          {
            int32x4_t v88 = *v81;
            int32x4_t v36 = v81[1];
            int32x4_t v89 = v81[2];
            int32x4_t v90 = v81[3];
            int32x4_t v91 = v81[4];
            int32x4_t v92 = v81[5];
            int32x4_t v93 = v81[6];
            int32x4_t v94 = v81[7];
            int16x8_t v241 = *(int16x8_t *)v81;
            int32x4_t v242 = v36;
            int32x4_t v243 = v91;
            int32x4_t v244 = v92;
            int32x4_t v249 = v89;
            int32x4_t v250 = v90;
            int32x4_t v251 = v93;
            int32x4_t v252 = v94;
            uint64_t v87 = 128;
          }
          else if (v86 == 3)
          {
            int32x4_t v88 = (int32x4_t)vld1q_dup_f32((const float *)v81->i32);
            int16x8_t v241 = (int16x8_t)v88;
            int32x4_t v242 = v88;
            int32x4_t v243 = v88;
            int32x4_t v244 = v88;
            int32x4_t v249 = v88;
            int32x4_t v250 = v88;
            int32x4_t v251 = v88;
            int32x4_t v252 = v88;
            uint64_t v87 = 4;
          }
          else if (*v77)
          {
            uint64_t v87 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v241, 128, (uint64_t)v81, v86, v17, v36);
          }
          else
          {
            uint64_t v87 = 0;
            int32x4_t v88 = 0uLL;
            int32x4_t v244 = 0u;
            int32x4_t v243 = 0u;
            int32x4_t v242 = 0u;
            int16x8_t v241 = 0u;
            int32x4_t v249 = 0u;
            int32x4_t v250 = 0u;
            int32x4_t v251 = 0u;
            int32x4_t v252 = 0u;
          }
          uint64_t v95 = (uint64_t)v81->i64 + v87;
          unsigned int v96 = v77[1];
          if (v96 == 127)
          {
            int32x4_t v98 = *(int32x4_t *)v95;
            int32x4_t v36 = *(int32x4_t *)(v95 + 16);
            int32x4_t v99 = *(int32x4_t *)(v95 + 32);
            int32x4_t v100 = *(int32x4_t *)(v95 + 48);
            int32x4_t v101 = *(int32x4_t *)(v95 + 64);
            int32x4_t v102 = *(int32x4_t *)(v95 + 80);
            int32x4_t v103 = *(int32x4_t *)(v95 + 96);
            int32x4_t v104 = *(int32x4_t *)(v95 + 112);
            int16x8_t v257 = *(int16x8_t *)v95;
            int32x4_t v258 = v36;
            int32x4_t v259 = v101;
            int32x4_t v260 = v102;
            int32x4_t v265 = v99;
            int32x4_t v266 = v100;
            int32x4_t v267 = v103;
            int32x4_t v268 = v104;
            uint64_t v97 = 128;
          }
          else if (v96 == 3)
          {
            int32x4_t v98 = (int32x4_t)vld1q_dup_f32((const float *)v95);
            int16x8_t v257 = (int16x8_t)v98;
            int32x4_t v258 = v98;
            int32x4_t v259 = v98;
            int32x4_t v260 = v98;
            int32x4_t v265 = v98;
            int32x4_t v266 = v98;
            int32x4_t v267 = v98;
            int32x4_t v268 = v98;
            uint64_t v97 = 4;
          }
          else if (v77[1])
          {
            uint64_t v97 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v257, 128, v95, v96, v88, v36);
          }
          else
          {
            uint64_t v97 = 0;
            int32x4_t v98 = 0uLL;
            int32x4_t v259 = 0u;
            int32x4_t v260 = 0u;
            int16x8_t v257 = 0u;
            int32x4_t v258 = 0u;
            int32x4_t v265 = 0u;
            int32x4_t v266 = 0u;
            int32x4_t v267 = 0u;
            int32x4_t v268 = 0u;
          }
          uint64_t v105 = v95 + v97;
          unsigned int v106 = v77[2];
          if (v106 == 127)
          {
            int32x4_t v108 = *(int32x4_t *)v105;
            int32x4_t v36 = *(int32x4_t *)(v105 + 16);
            int32x4_t v109 = *(int32x4_t *)(v105 + 32);
            int32x4_t v110 = *(int32x4_t *)(v105 + 48);
            int32x4_t v111 = *(int32x4_t *)(v105 + 64);
            int32x4_t v112 = *(int32x4_t *)(v105 + 80);
            int32x4_t v113 = *(int32x4_t *)(v105 + 96);
            int32x4_t v114 = *(int32x4_t *)(v105 + 112);
            int16x8_t v245 = *(int16x8_t *)v105;
            int32x4_t v246 = v36;
            int32x4_t v247 = v111;
            int32x4_t v248 = v112;
            int32x4_t v253 = v109;
            int32x4_t v254 = v110;
            int32x4_t v255 = v113;
            int32x4_t v256 = v114;
            uint64_t v107 = 128;
          }
          else if (v106 == 3)
          {
            int32x4_t v108 = (int32x4_t)vld1q_dup_f32((const float *)v105);
            int16x8_t v245 = (int16x8_t)v108;
            int32x4_t v246 = v108;
            int32x4_t v247 = v108;
            int32x4_t v248 = v108;
            int32x4_t v253 = v108;
            int32x4_t v254 = v108;
            int32x4_t v255 = v108;
            int32x4_t v256 = v108;
            uint64_t v107 = 4;
          }
          else if (v77[2])
          {
            uint64_t v107 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v245, 128, v105, v106, v98, v36);
          }
          else
          {
            uint64_t v107 = 0;
            int32x4_t v108 = 0uLL;
            int32x4_t v247 = 0u;
            int32x4_t v248 = 0u;
            int16x8_t v245 = 0u;
            int32x4_t v246 = 0u;
            int32x4_t v253 = 0u;
            int32x4_t v254 = 0u;
            int32x4_t v255 = 0u;
            int32x4_t v256 = 0u;
          }
          uint64_t v115 = v105 + v107;
          unsigned int v116 = v77[3];
          if (v116 == 127)
          {
            int32x4_t v118 = *(int32x4_t *)v115;
            int32x4_t v36 = *(int32x4_t *)(v115 + 16);
            int32x4_t v119 = *(int32x4_t *)(v115 + 32);
            int32x4_t v120 = *(int32x4_t *)(v115 + 48);
            int32x4_t v121 = *(int32x4_t *)(v115 + 64);
            int32x4_t v122 = *(int32x4_t *)(v115 + 80);
            int32x4_t v123 = *(int32x4_t *)(v115 + 96);
            int32x4_t v124 = *(int32x4_t *)(v115 + 112);
            int16x8_t v261 = *(int16x8_t *)v115;
            int32x4_t v262 = v36;
            int32x4_t v263 = v121;
            int32x4_t v264 = v122;
            int32x4_t v269 = v119;
            int32x4_t v270 = v120;
            int32x4_t v271 = v123;
            int32x4_t v272 = v124;
            uint64_t v117 = 128;
          }
          else if (v116 == 3)
          {
            int32x4_t v118 = (int32x4_t)vld1q_dup_f32((const float *)v115);
            int16x8_t v261 = (int16x8_t)v118;
            int32x4_t v262 = v118;
            int32x4_t v263 = v118;
            int32x4_t v264 = v118;
            int32x4_t v269 = v118;
            int32x4_t v270 = v118;
            int32x4_t v271 = v118;
            int32x4_t v272 = v118;
            uint64_t v117 = 4;
          }
          else if (v77[3])
          {
            uint64_t v117 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v261, 128, v115, v116, v108, v36);
          }
          else
          {
            uint64_t v117 = 0;
            int32x4_t v118 = 0uLL;
            int32x4_t v263 = 0u;
            int32x4_t v264 = 0u;
            int16x8_t v261 = 0u;
            int32x4_t v262 = 0u;
            int32x4_t v269 = 0u;
            int32x4_t v270 = 0u;
            int32x4_t v271 = 0u;
            int32x4_t v272 = 0u;
          }
          uint64_t v125 = v115 + v117;
          unsigned int v126 = v77[4];
          if (v126 == 127)
          {
            int32x4_t v128 = *(int32x4_t *)v125;
            int32x4_t v36 = *(int32x4_t *)(v125 + 16);
            int32x4_t v129 = *(int32x4_t *)(v125 + 32);
            int32x4_t v130 = *(int32x4_t *)(v125 + 48);
            int32x4_t v131 = *(int32x4_t *)(v125 + 64);
            int32x4_t v132 = *(int32x4_t *)(v125 + 80);
            int32x4_t v133 = *(int32x4_t *)(v125 + 96);
            int32x4_t v134 = *(int32x4_t *)(v125 + 112);
            int16x8_t v273 = *(int16x8_t *)v125;
            int32x4_t v274 = v36;
            int32x4_t v275 = v131;
            int32x4_t v276 = v132;
            int32x4_t v281 = v129;
            int32x4_t v282 = v130;
            int32x4_t v283 = v133;
            int32x4_t v284 = v134;
            uint64_t v127 = 128;
          }
          else if (v126 == 3)
          {
            int32x4_t v128 = (int32x4_t)vld1q_dup_f32((const float *)v125);
            int16x8_t v273 = (int16x8_t)v128;
            int32x4_t v274 = v128;
            int32x4_t v275 = v128;
            int32x4_t v276 = v128;
            int32x4_t v281 = v128;
            int32x4_t v282 = v128;
            int32x4_t v283 = v128;
            int32x4_t v284 = v128;
            uint64_t v127 = 4;
          }
          else if (v77[4])
          {
            uint64_t v127 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v273, 128, v125, v126, v118, v36);
          }
          else
          {
            uint64_t v127 = 0;
            int32x4_t v128 = 0uLL;
            int32x4_t v275 = 0u;
            int32x4_t v276 = 0u;
            int16x8_t v273 = 0u;
            int32x4_t v274 = 0u;
            int32x4_t v281 = 0u;
            int32x4_t v282 = 0u;
            int32x4_t v283 = 0u;
            int32x4_t v284 = 0u;
          }
          uint64_t v135 = v125 + v127;
          unsigned int v136 = v77[5];
          if (v136 == 127)
          {
            int32x4_t v138 = *(int32x4_t *)v135;
            int32x4_t v36 = *(int32x4_t *)(v135 + 16);
            int32x4_t v139 = *(int32x4_t *)(v135 + 32);
            int32x4_t v140 = *(int32x4_t *)(v135 + 48);
            int32x4_t v141 = *(int32x4_t *)(v135 + 64);
            int32x4_t v142 = *(int32x4_t *)(v135 + 80);
            int32x4_t v143 = *(int32x4_t *)(v135 + 96);
            int32x4_t v144 = *(int32x4_t *)(v135 + 112);
            int16x8_t v289 = *(int16x8_t *)v135;
            int32x4_t v290 = v36;
            int32x4_t v291 = v141;
            int32x4_t v292 = v142;
            int32x4_t v297 = v139;
            int32x4_t v298 = v140;
            int32x4_t v299 = v143;
            int32x4_t v300 = v144;
            uint64_t v137 = 128;
          }
          else if (v136 == 3)
          {
            int32x4_t v138 = (int32x4_t)vld1q_dup_f32((const float *)v135);
            int16x8_t v289 = (int16x8_t)v138;
            int32x4_t v290 = v138;
            int32x4_t v291 = v138;
            int32x4_t v292 = v138;
            int32x4_t v297 = v138;
            int32x4_t v298 = v138;
            int32x4_t v299 = v138;
            int32x4_t v300 = v138;
            uint64_t v137 = 4;
          }
          else if (v77[5])
          {
            uint64_t v137 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v289, 128, v135, v136, v128, v36);
          }
          else
          {
            uint64_t v137 = 0;
            int32x4_t v138 = 0uLL;
            int32x4_t v291 = 0u;
            int32x4_t v292 = 0u;
            int16x8_t v289 = 0u;
            int32x4_t v290 = 0u;
            int32x4_t v297 = 0u;
            int32x4_t v298 = 0u;
            int32x4_t v299 = 0u;
            int32x4_t v300 = 0u;
          }
          uint64_t v145 = v135 + v137;
          unsigned int v146 = v77[6];
          if (v146 == 127)
          {
            int32x4_t v148 = *(int32x4_t *)v145;
            int32x4_t v36 = *(int32x4_t *)(v145 + 16);
            int32x4_t v149 = *(int32x4_t *)(v145 + 32);
            int32x4_t v150 = *(int32x4_t *)(v145 + 48);
            int32x4_t v151 = *(int32x4_t *)(v145 + 64);
            int32x4_t v152 = *(int32x4_t *)(v145 + 80);
            int32x4_t v153 = *(int32x4_t *)(v145 + 96);
            int32x4_t v154 = *(int32x4_t *)(v145 + 112);
            int16x8_t v277 = *(int16x8_t *)v145;
            int32x4_t v278 = v36;
            int32x4_t v279 = v151;
            int32x4_t v280 = v152;
            int32x4_t v285 = v149;
            int32x4_t v286 = v150;
            int32x4_t v287 = v153;
            int32x4_t v288 = v154;
            uint64_t v147 = 128;
          }
          else if (v146 == 3)
          {
            int32x4_t v148 = (int32x4_t)vld1q_dup_f32((const float *)v145);
            int16x8_t v277 = (int16x8_t)v148;
            int32x4_t v278 = v148;
            int32x4_t v279 = v148;
            int32x4_t v280 = v148;
            int32x4_t v285 = v148;
            int32x4_t v286 = v148;
            int32x4_t v287 = v148;
            int32x4_t v288 = v148;
            uint64_t v147 = 4;
          }
          else if (v77[6])
          {
            uint64_t v147 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v277, 128, v145, v146, v138, v36);
          }
          else
          {
            uint64_t v147 = 0;
            int32x4_t v148 = 0uLL;
            int32x4_t v279 = 0u;
            int32x4_t v280 = 0u;
            int16x8_t v277 = 0u;
            int32x4_t v278 = 0u;
            int32x4_t v285 = 0u;
            int32x4_t v286 = 0u;
            int32x4_t v287 = 0u;
            int32x4_t v288 = 0u;
          }
          uint64_t v155 = v145 + v147;
          unsigned int v156 = v77[7];
          if (v156 == 127)
          {
            float32x4_t v159 = *(float32x4_t *)(v155 + 16);
            float32x4_t v160 = *(float32x4_t *)(v155 + 32);
            float32x4_t v161 = *(float32x4_t *)(v155 + 48);
            float32x4_t v162 = *(float32x4_t *)(v155 + 64);
            float32x4_t v163 = *(float32x4_t *)(v155 + 80);
            float32x4_t v164 = *(float32x4_t *)(v155 + 96);
            float32x4_t v165 = *(float32x4_t *)(v155 + 112);
            int16x8_t v293 = *(int16x8_t *)v155;
            float32x4_t v294 = v159;
            float32x4_t v295 = v162;
            float32x4_t v296 = v163;
            float32x4_t v301 = v160;
            float32x4_t v302 = v161;
            float32x4_t v303 = v164;
            float32x4_t v304 = v165;
            a7 = v215;
            unsigned int v85 = v39 + 1;
            uint64_t v157 = v236;
            if (!v236) {
              goto LABEL_213;
            }
          }
          else
          {
            a7 = v215;
            unsigned int v85 = v39 + 1;
            if (v156 == 3)
            {
              float32x4_t v158 = vld1q_dup_f32((const float *)v155);
              int16x8_t v293 = (int16x8_t)v158;
              float32x4_t v294 = v158;
              float32x4_t v295 = v158;
              float32x4_t v296 = v158;
              float32x4_t v301 = v158;
              float32x4_t v302 = v158;
              float32x4_t v303 = v158;
              float32x4_t v304 = v158;
              uint64_t v157 = v236;
              if (!v236) {
                goto LABEL_213;
              }
            }
            else if (v77[7])
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v293, 128, v155, v156, v148, v36);
              uint64_t v157 = v236;
              if (!v236) {
                goto LABEL_213;
              }
            }
            else
            {
              float32x4_t v295 = 0u;
              float32x4_t v296 = 0u;
              int16x8_t v293 = 0u;
              float32x4_t v294 = 0u;
              float32x4_t v301 = 0u;
              float32x4_t v302 = 0u;
              float32x4_t v303 = 0u;
              float32x4_t v304 = 0u;
              uint64_t v157 = v236;
              if (!v236) {
                goto LABEL_213;
              }
            }
          }
          if (v237)
          {
            uint64_t v166 = 0;
            unint64_t v167 = (unint64_t)v234 << 7;
            uint64_t v168 = 16 * v235;
            int v169 = &v241.i8[v167 + v168];
            uint64_t v170 = v232;
            uint64_t v171 = v233;
            unint64_t v172 = 16 * v237;
            if (v172 <= 1) {
              unint64_t v173 = 1;
            }
            else {
              unint64_t v173 = 16 * v237;
            }
            unint64_t v174 = v167 + v168;
            unsigned int v175 = &v241.i8[v167 + v168];
            if (v173) {
              BOOL v176 = (v173 - 1) >> 32 == 0;
            }
            else {
              BOOL v176 = 0;
            }
            char v177 = !v176;
            uint64_t v178 = v173 & 0xFFFFFFFE0;
            uint64_t v179 = v173 & 0xFFFFFFFF0;
            BOOL v180 = &v242.i8[v174];
            unsigned int v181 = (long long *)(v232 + 16);
            unsigned int v182 = v169;
            uint64_t v183 = v232;
            do
            {
              int v184 = (char *)(v170 + v171 * v166);
              BOOL v185 = &v169[128 * v166];
              if ((unint64_t)(&v175[128 * v166] - v184) < 0x20) {
                char v186 = 1;
              }
              else {
                char v186 = v177;
              }
              if (v186)
              {
                int v187 = 0;
                goto LABEL_210;
              }
              if (v173 >= 0x20)
              {
                unsigned int v193 = v181;
                unsigned int v194 = v180;
                uint64_t v195 = v173 & 0xFFFFFFFE0;
                do
                {
                  long long v196 = *v193;
                  *((_OWORD *)v194 - 1) = *(v193 - 1);
                  *(_OWORD *)unsigned int v194 = v196;
                  v194 += 32;
                  v193 += 2;
                  v195 -= 32;
                }
                while (v195);
                if (v173 == v178) {
                  goto LABEL_193;
                }
                uint64_t v188 = v173 & 0xFFFFFFFE0;
                if ((v173 & 0x10) == 0)
                {
                  v184 += v178;
                  v185 += v178;
                  int v187 = v173 & 0xFFFFFFE0;
                  goto LABEL_210;
                }
              }
              else
              {
                uint64_t v188 = 0;
              }
              v185 += v179;
              unint64_t v189 = v188 - (v173 & 0xFFFFFFFF0);
              unsigned int v190 = (uint64_t *)(v183 + v188);
              unsigned int v191 = &v182[v188];
              do
              {
                uint64_t v192 = *v190++;
                *(void *)unsigned int v191 = v192;
                v191 += 8;
                v189 += 8;
              }
              while (v189);
              if (v173 == v179) {
                goto LABEL_193;
              }
              v184 += v179;
              int v187 = v173 & 0xFFFFFFF0;
LABEL_210:
              unsigned int v197 = v187 + 1;
              do
              {
                char v198 = *v184++;
                *v185++ = v198;
              }
              while (v172 > v197++);
LABEL_193:
              ++v166;
              v180 += 128;
              unsigned int v181 = (long long *)((char *)v181 + v171);
              v183 += v171;
              v182 += 128;
            }
            while (v166 != v157);
          }
LABEL_213:
          AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((uint64_t)&v241, 128, (unint64_t)v230, v231, v238, v239);
LABEL_214:
          if (v227) {
            memcpy(v226, v81, 0x400uLL);
          }
          BOOL v22 = v39 == v216 >> 3;
          unsigned int v39 = v85;
          uint64_t result = v223;
        }
        while (!v22);
        BOOL v22 = v21++ == v206;
      }
      while (!v22);
    }
  }
  return result;
}

uint64_t AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, char a12)
{
  uint64_t v305 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v222 = a8;
  unsigned int v207 = a8 + a10 - 1;
  uint64_t v223 = a1;
  if (*(void *)(a1 + 168)) {
    int v18 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v18 = 0;
  }
  unsigned int v19 = a5 - 1;
  unsigned int v20 = a6 - 1;
  unsigned int v21 = a8 >> 3;
  unsigned int v206 = v207 >> 3;
  BOOL v22 = (v18 & 0xD00) == 0 || v18 == 768;
  int v23 = v18 & 0xE00;
  int v25 = !v22 && v23 != 1024;
  int v227 = v25;
  uint64_t result = a1;
  if (*(unsigned char *)(a1 + 232))
  {
    unsigned int v27 = *(unsigned __int8 *)(a1 + 255);
    unsigned int v28 = *(unsigned __int8 *)(a1 + 254);
    char v29 = __clz(v19);
    if (1 << v27 >= a6 || a5 >> v28)
    {
      if (!(a6 >> v27) && 1 << v28 < a5)
      {
        if (a6 < 2) {
          unsigned int v32 = 0;
        }
        else {
          unsigned int v32 = __clz(~(-1 << -(char)__clz(v20))) - 32;
        }
        v28 += v27 + v32;
        unsigned int v27 = -v32;
      }
    }
    else
    {
      unsigned int v30 = 32 - __clz(~(-1 << -v29));
      unsigned int v31 = v28 + v27;
      if (a5 < 2) {
        unsigned int v30 = 0;
      }
      unsigned int v27 = v31 - v30;
      unsigned int v28 = v30;
    }
    if (a5 < 2)
    {
      if (v28) {
        goto LABEL_27;
      }
    }
    else if (32 - __clz(~(-1 << -v29)) < v28)
    {
LABEL_27:
      BOOL v217 = 0;
LABEL_32:
      unsigned int v214 = v28 - 3;
      unsigned int v211 = v27 - 3;
      int v34 = -1 << *(unsigned char *)(*(void *)(a1 + 208) + 48);
      unsigned int v204 = (((~v34 + a5) & v34) + ~(-1 << v28)) >> v28;
      goto LABEL_33;
    }
    if (a6 < 2) {
      unsigned int v33 = 0;
    }
    else {
      unsigned int v33 = 32 - __clz(~(-1 << -(char)__clz(v20)));
    }
    BOOL v217 = v33 >= v27;
    goto LABEL_32;
  }
  BOOL v217 = 0;
  unsigned int v204 = 0;
  unsigned int v211 = 0;
  unsigned int v214 = 0;
LABEL_33:
  if (v21 <= v206)
  {
    unsigned int v216 = a7 + a9 - 1;
    unsigned int v203 = a7 >> 3;
    if (a7 >> 3 <= v216 >> 3)
    {
      unsigned int v225 = v19 >> 3;
      unsigned int v202 = v20 >> 3;
      int v224 = (v19 & 7) + 1;
      int v201 = (v20 & 7) + 1;
      int v200 = ~(-1 << v211);
      uint32x2_t v35 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0x700000007);
      v36.i64[1] = -1;
      *(int32x2_t *)v36.i8 = vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v35, 3uLL)))))));
      *(int8x8_t *)v17.i8 = vbic_s8(*(int8x8_t *)v36.i8, (int8x8_t)vcgt_u32((uint32x2_t)0x1000000010, v35));
      __int32 v212 = v17.i32[0] | v17.i32[1];
      BOOL v209 = v17.i32[1] != 0;
      uint64_t v210 = v17.i64[0];
      BOOL v208 = v17.i32[0] != 0;
      unsigned int v215 = a7;
      do
      {
        unsigned int v37 = (8 * v21) | 7;
        if (8 * v21 <= v222) {
          int v38 = v222;
        }
        else {
          int v38 = 8 * v21;
        }
        if (v207 < v37) {
          unsigned int v37 = v207;
        }
        int v213 = v38 - 8 * v21;
        int v221 = v37 - v38 + 1;
        unsigned int v39 = v203;
        int v40 = v201;
        if (v21 != v202) {
          int v40 = 8;
        }
        unsigned int v228 = v40;
        int v41 = v21 & v200;
        uint64_t v220 = a3 + (v38 - v222) * a11;
        do
        {
          unsigned int v42 = 8 * v39;
          unsigned int v43 = 8 * (v39 + 1) - 1;
          if (8 * v39 <= a7) {
            int v44 = a7;
          }
          else {
            int v44 = 8 * v39;
          }
          if (v216 < v43) {
            unsigned int v43 = v216;
          }
          int v45 = v43 - v44 + 1;
          if (v39 == v225) {
            unsigned int v46 = v224;
          }
          else {
            unsigned int v46 = 8;
          }
          BOOL v47 = 1;
          if (8 * v21 >= v222 && v42 >= a7)
          {
            int v48 = v224;
            if (v39 != v225) {
              int v48 = 8;
            }
            BOOL v47 = v45 != v48 || v221 != v228;
          }
          if (v217)
          {
            if (v214 | v211)
            {
              int v50 = 0;
              uint64_t v51 = 0;
              int v52 = 1;
              BOOL v53 = v214 != 0;
              BOOL v54 = v211 != 0;
              unsigned int v55 = v214;
              unsigned int v56 = v211;
              do
              {
                --v55;
                if (v53) {
                  v51 |= (unint64_t)(v39 & ~(-1 << v214) & v52) << v50++;
                }
                else {
                  unsigned int v55 = 0;
                }
                --v56;
                if (v54) {
                  v51 |= (unint64_t)(v41 & v52) << v50++;
                }
                else {
                  unsigned int v56 = 0;
                }
                v52 *= 2;
                --v50;
                BOOL v54 = v56 != 0;
                BOOL v53 = v55 != 0;
              }
              while (v56 | v55);
            }
            else
            {
              uint64_t v51 = 0;
            }
            uint64_t v64 = *(void *)(result + 320) * ((v39 >> v214) + (v21 >> v211) * v204) + (v51 << 10);
          }
          else
          {
            if (v212)
            {
              int v57 = 0;
              uint64_t v58 = 0;
              int v59 = 1;
              BOOL v60 = v209;
              BOOL v61 = v208;
              int v62 = HIDWORD(v210);
              int v63 = v210;
              do
              {
                --v62;
                if (v60) {
                  v58 |= (unint64_t)(v59 & v39) << v57++;
                }
                else {
                  int v62 = 0;
                }
                --v63;
                if (v61) {
                  v58 |= (unint64_t)(v59 & v21) << v57++;
                }
                else {
                  int v63 = 0;
                }
                v59 *= 2;
                --v57;
                BOOL v61 = v63 != 0;
                BOOL v60 = v62 != 0;
              }
              while (v63 | v62);
            }
            else
            {
              uint64_t v58 = 0;
            }
            uint64_t v64 = v58 << 10;
          }
          unsigned int v65 = *(_DWORD *)(result + 128) >> (*(unsigned char *)(result + 144) + a12);
          if (v65 <= 1) {
            unsigned int v65 = 1;
          }
          unsigned int v66 = v65 + 7;
          if (v66 < 0x10) {
            unsigned int v67 = 0;
          }
          else {
            unsigned int v67 = 32 - __clz(~(-1 << -(char)__clz((v66 >> 3) - 1)));
          }
          unsigned int v68 = *(_DWORD *)(result + 132) >> (*(unsigned char *)(result + 144) + a12);
          if (v68 <= 1) {
            unsigned int v68 = 1;
          }
          unsigned int v69 = v68 + 7;
          if (v69 < 0x10) {
            unsigned int v70 = 0;
          }
          else {
            unsigned int v70 = 32 - __clz(~(-1 << -(char)__clz((v69 >> 3) - 1)));
          }
          if (v70 | v67)
          {
            int v71 = 0;
            uint64_t v72 = 0;
            BOOL v73 = v67 != 0;
            BOOL v74 = v70 != 0;
            int v75 = 1;
            do
            {
              --v67;
              if (v73) {
                v72 |= (unint64_t)(v75 & v39) << v71++;
              }
              else {
                unsigned int v67 = 0;
              }
              --v70;
              if (v74) {
                v72 |= (unint64_t)(v75 & v21) << v71++;
              }
              else {
                unsigned int v70 = 0;
              }
              v75 *= 2;
              --v71;
              BOOL v74 = v70 != 0;
              BOOL v73 = v67 != 0;
            }
            while (v70 | v67);
          }
          else
          {
            uint64_t v72 = 0;
          }
          int v76 = v46 < 8 || v47;
          int v77 = (char *)(a4 + 8 * v72);
          uint64_t v78 = (_OWORD *)(v220 + 16 * (v44 - a7));
          uint64_t v79 = (void *)(a2 + v64);
          if (v228 < 8) {
            int v80 = 1;
          }
          else {
            int v80 = v76;
          }
          int16x8_t v226 = v79;
          if (v227)
          {
            uint64_t v81 = __dst;
            if (!v80) {
              goto LABEL_121;
            }
            uint64_t v82 = (char *)(a4 + 8 * v72);
            int v83 = v45;
            char v84 = v46;
            memcpy(__dst, v79, sizeof(__dst));
            unsigned int v42 = 8 * v39;
            LOBYTE(v46) = v84;
            int v45 = v83;
            int v77 = v82;
            int v41 = v21 & v200;
            uint64_t result = v223;
          }
          else
          {
            uint64_t v81 = v79;
            if (!v80)
            {
LABEL_121:
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock(v78, a11, v81, v77, v46, v228);
              goto LABEL_122;
            }
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE11ELj4ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = result;
          int16x8_t v230 = v81;
          unsigned __int8 v238 = v46;
          unsigned __int8 v239 = v228;
          unsigned int v234 = v213;
          unsigned int v235 = v44 - v42;
          int16x8_t v231 = v77;
          uint64_t v232 = v78;
          uint64_t v233 = a11;
          unsigned int v236 = v221;
          unsigned int v237 = v45;
          if (v47)
          {
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(result + 8) + 7384), block);
LABEL_122:
            a7 = v215;
            unsigned int v85 = v39 + 1;
            goto LABEL_214;
          }
          unsigned int v86 = *v77;
          if (v86 == 127)
          {
            int32x4_t v88 = *(int32x4_t *)v81;
            int32x4_t v36 = *((int32x4_t *)v81 + 1);
            int32x4_t v89 = *((int32x4_t *)v81 + 2);
            int32x4_t v90 = *((int32x4_t *)v81 + 3);
            int32x4_t v91 = *((int32x4_t *)v81 + 4);
            int32x4_t v92 = *((int32x4_t *)v81 + 5);
            int32x4_t v93 = *((int32x4_t *)v81 + 6);
            int32x4_t v94 = *((int32x4_t *)v81 + 7);
            int16x8_t v241 = *(int16x8_t *)v81;
            int32x4_t v242 = v36;
            int32x4_t v243 = v91;
            int32x4_t v244 = v92;
            int32x4_t v249 = v89;
            int32x4_t v250 = v90;
            int32x4_t v251 = v93;
            int32x4_t v252 = v94;
            uint64_t v87 = 128;
          }
          else if (v86 == 3)
          {
            int32x4_t v88 = (int32x4_t)vld1q_dup_f32((const float *)v81);
            int16x8_t v241 = (int16x8_t)v88;
            int32x4_t v242 = v88;
            int32x4_t v243 = v88;
            int32x4_t v244 = v88;
            int32x4_t v249 = v88;
            int32x4_t v250 = v88;
            int32x4_t v251 = v88;
            int32x4_t v252 = v88;
            uint64_t v87 = 4;
          }
          else if (*v77)
          {
            uint64_t v87 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v241, 128, (uint64_t)v81, v86, v17, v36);
          }
          else
          {
            uint64_t v87 = 0;
            int32x4_t v88 = 0uLL;
            int32x4_t v244 = 0u;
            int32x4_t v243 = 0u;
            int32x4_t v242 = 0u;
            int16x8_t v241 = 0u;
            int32x4_t v249 = 0u;
            int32x4_t v250 = 0u;
            int32x4_t v251 = 0u;
            int32x4_t v252 = 0u;
          }
          uint64_t v95 = (uint64_t)v81 + v87;
          unsigned int v96 = v77[1];
          if (v96 == 127)
          {
            int32x4_t v98 = *(int32x4_t *)v95;
            int32x4_t v36 = *(int32x4_t *)(v95 + 16);
            int32x4_t v99 = *(int32x4_t *)(v95 + 32);
            int32x4_t v100 = *(int32x4_t *)(v95 + 48);
            int32x4_t v101 = *(int32x4_t *)(v95 + 64);
            int32x4_t v102 = *(int32x4_t *)(v95 + 80);
            int32x4_t v103 = *(int32x4_t *)(v95 + 96);
            int32x4_t v104 = *(int32x4_t *)(v95 + 112);
            int16x8_t v257 = *(int16x8_t *)v95;
            int32x4_t v258 = v36;
            int32x4_t v259 = v101;
            int32x4_t v260 = v102;
            int32x4_t v265 = v99;
            int32x4_t v266 = v100;
            int32x4_t v267 = v103;
            int32x4_t v268 = v104;
            uint64_t v97 = 128;
          }
          else if (v96 == 3)
          {
            int32x4_t v98 = (int32x4_t)vld1q_dup_f32((const float *)v95);
            int16x8_t v257 = (int16x8_t)v98;
            int32x4_t v258 = v98;
            int32x4_t v259 = v98;
            int32x4_t v260 = v98;
            int32x4_t v265 = v98;
            int32x4_t v266 = v98;
            int32x4_t v267 = v98;
            int32x4_t v268 = v98;
            uint64_t v97 = 4;
          }
          else if (v77[1])
          {
            uint64_t v97 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v257, 128, v95, v96, v88, v36);
          }
          else
          {
            uint64_t v97 = 0;
            int32x4_t v98 = 0uLL;
            int32x4_t v259 = 0u;
            int32x4_t v260 = 0u;
            int16x8_t v257 = 0u;
            int32x4_t v258 = 0u;
            int32x4_t v265 = 0u;
            int32x4_t v266 = 0u;
            int32x4_t v267 = 0u;
            int32x4_t v268 = 0u;
          }
          uint64_t v105 = v95 + v97;
          unsigned int v106 = v77[2];
          if (v106 == 127)
          {
            int32x4_t v108 = *(int32x4_t *)v105;
            int32x4_t v36 = *(int32x4_t *)(v105 + 16);
            int32x4_t v109 = *(int32x4_t *)(v105 + 32);
            int32x4_t v110 = *(int32x4_t *)(v105 + 48);
            int32x4_t v111 = *(int32x4_t *)(v105 + 64);
            int32x4_t v112 = *(int32x4_t *)(v105 + 80);
            int32x4_t v113 = *(int32x4_t *)(v105 + 96);
            int32x4_t v114 = *(int32x4_t *)(v105 + 112);
            int16x8_t v245 = *(int16x8_t *)v105;
            int32x4_t v246 = v36;
            int32x4_t v247 = v111;
            int32x4_t v248 = v112;
            int32x4_t v253 = v109;
            int32x4_t v254 = v110;
            int32x4_t v255 = v113;
            int32x4_t v256 = v114;
            uint64_t v107 = 128;
          }
          else if (v106 == 3)
          {
            int32x4_t v108 = (int32x4_t)vld1q_dup_f32((const float *)v105);
            int16x8_t v245 = (int16x8_t)v108;
            int32x4_t v246 = v108;
            int32x4_t v247 = v108;
            int32x4_t v248 = v108;
            int32x4_t v253 = v108;
            int32x4_t v254 = v108;
            int32x4_t v255 = v108;
            int32x4_t v256 = v108;
            uint64_t v107 = 4;
          }
          else if (v77[2])
          {
            uint64_t v107 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v245, 128, v105, v106, v98, v36);
          }
          else
          {
            uint64_t v107 = 0;
            int32x4_t v108 = 0uLL;
            int32x4_t v247 = 0u;
            int32x4_t v248 = 0u;
            int16x8_t v245 = 0u;
            int32x4_t v246 = 0u;
            int32x4_t v253 = 0u;
            int32x4_t v254 = 0u;
            int32x4_t v255 = 0u;
            int32x4_t v256 = 0u;
          }
          uint64_t v115 = v105 + v107;
          unsigned int v116 = v77[3];
          if (v116 == 127)
          {
            int32x4_t v118 = *(int32x4_t *)v115;
            int32x4_t v36 = *(int32x4_t *)(v115 + 16);
            int32x4_t v119 = *(int32x4_t *)(v115 + 32);
            int32x4_t v120 = *(int32x4_t *)(v115 + 48);
            int32x4_t v121 = *(int32x4_t *)(v115 + 64);
            int32x4_t v122 = *(int32x4_t *)(v115 + 80);
            int32x4_t v123 = *(int32x4_t *)(v115 + 96);
            int32x4_t v124 = *(int32x4_t *)(v115 + 112);
            int16x8_t v261 = *(int16x8_t *)v115;
            int32x4_t v262 = v36;
            int32x4_t v263 = v121;
            int32x4_t v264 = v122;
            int32x4_t v269 = v119;
            int32x4_t v270 = v120;
            int32x4_t v271 = v123;
            int32x4_t v272 = v124;
            uint64_t v117 = 128;
          }
          else if (v116 == 3)
          {
            int32x4_t v118 = (int32x4_t)vld1q_dup_f32((const float *)v115);
            int16x8_t v261 = (int16x8_t)v118;
            int32x4_t v262 = v118;
            int32x4_t v263 = v118;
            int32x4_t v264 = v118;
            int32x4_t v269 = v118;
            int32x4_t v270 = v118;
            int32x4_t v271 = v118;
            int32x4_t v272 = v118;
            uint64_t v117 = 4;
          }
          else if (v77[3])
          {
            uint64_t v117 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v261, 128, v115, v116, v108, v36);
          }
          else
          {
            uint64_t v117 = 0;
            int32x4_t v118 = 0uLL;
            int32x4_t v263 = 0u;
            int32x4_t v264 = 0u;
            int16x8_t v261 = 0u;
            int32x4_t v262 = 0u;
            int32x4_t v269 = 0u;
            int32x4_t v270 = 0u;
            int32x4_t v271 = 0u;
            int32x4_t v272 = 0u;
          }
          uint64_t v125 = v115 + v117;
          unsigned int v126 = v77[4];
          if (v126 == 127)
          {
            int32x4_t v128 = *(int32x4_t *)v125;
            int32x4_t v36 = *(int32x4_t *)(v125 + 16);
            int32x4_t v129 = *(int32x4_t *)(v125 + 32);
            int32x4_t v130 = *(int32x4_t *)(v125 + 48);
            int32x4_t v131 = *(int32x4_t *)(v125 + 64);
            int32x4_t v132 = *(int32x4_t *)(v125 + 80);
            int32x4_t v133 = *(int32x4_t *)(v125 + 96);
            int32x4_t v134 = *(int32x4_t *)(v125 + 112);
            int16x8_t v273 = *(int16x8_t *)v125;
            int32x4_t v274 = v36;
            int32x4_t v275 = v131;
            int32x4_t v276 = v132;
            int32x4_t v281 = v129;
            int32x4_t v282 = v130;
            int32x4_t v283 = v133;
            int32x4_t v284 = v134;
            uint64_t v127 = 128;
          }
          else if (v126 == 3)
          {
            int32x4_t v128 = (int32x4_t)vld1q_dup_f32((const float *)v125);
            int16x8_t v273 = (int16x8_t)v128;
            int32x4_t v274 = v128;
            int32x4_t v275 = v128;
            int32x4_t v276 = v128;
            int32x4_t v281 = v128;
            int32x4_t v282 = v128;
            int32x4_t v283 = v128;
            int32x4_t v284 = v128;
            uint64_t v127 = 4;
          }
          else if (v77[4])
          {
            uint64_t v127 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v273, 128, v125, v126, v118, v36);
          }
          else
          {
            uint64_t v127 = 0;
            int32x4_t v128 = 0uLL;
            int32x4_t v275 = 0u;
            int32x4_t v276 = 0u;
            int16x8_t v273 = 0u;
            int32x4_t v274 = 0u;
            int32x4_t v281 = 0u;
            int32x4_t v282 = 0u;
            int32x4_t v283 = 0u;
            int32x4_t v284 = 0u;
          }
          uint64_t v135 = v125 + v127;
          unsigned int v136 = v77[5];
          if (v136 == 127)
          {
            int32x4_t v138 = *(int32x4_t *)v135;
            int32x4_t v36 = *(int32x4_t *)(v135 + 16);
            int32x4_t v139 = *(int32x4_t *)(v135 + 32);
            int32x4_t v140 = *(int32x4_t *)(v135 + 48);
            int32x4_t v141 = *(int32x4_t *)(v135 + 64);
            int32x4_t v142 = *(int32x4_t *)(v135 + 80);
            int32x4_t v143 = *(int32x4_t *)(v135 + 96);
            int32x4_t v144 = *(int32x4_t *)(v135 + 112);
            int16x8_t v289 = *(int16x8_t *)v135;
            int32x4_t v290 = v36;
            int32x4_t v291 = v141;
            int32x4_t v292 = v142;
            int32x4_t v297 = v139;
            int32x4_t v298 = v140;
            int32x4_t v299 = v143;
            int32x4_t v300 = v144;
            uint64_t v137 = 128;
          }
          else if (v136 == 3)
          {
            int32x4_t v138 = (int32x4_t)vld1q_dup_f32((const float *)v135);
            int16x8_t v289 = (int16x8_t)v138;
            int32x4_t v290 = v138;
            int32x4_t v291 = v138;
            int32x4_t v292 = v138;
            int32x4_t v297 = v138;
            int32x4_t v298 = v138;
            int32x4_t v299 = v138;
            int32x4_t v300 = v138;
            uint64_t v137 = 4;
          }
          else if (v77[5])
          {
            uint64_t v137 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v289, 128, v135, v136, v128, v36);
          }
          else
          {
            uint64_t v137 = 0;
            int32x4_t v138 = 0uLL;
            int32x4_t v291 = 0u;
            int32x4_t v292 = 0u;
            int16x8_t v289 = 0u;
            int32x4_t v290 = 0u;
            int32x4_t v297 = 0u;
            int32x4_t v298 = 0u;
            int32x4_t v299 = 0u;
            int32x4_t v300 = 0u;
          }
          uint64_t v145 = v135 + v137;
          unsigned int v146 = v77[6];
          if (v146 == 127)
          {
            int32x4_t v148 = *(int32x4_t *)v145;
            int32x4_t v36 = *(int32x4_t *)(v145 + 16);
            int32x4_t v149 = *(int32x4_t *)(v145 + 32);
            int32x4_t v150 = *(int32x4_t *)(v145 + 48);
            int32x4_t v151 = *(int32x4_t *)(v145 + 64);
            int32x4_t v152 = *(int32x4_t *)(v145 + 80);
            int32x4_t v153 = *(int32x4_t *)(v145 + 96);
            int32x4_t v154 = *(int32x4_t *)(v145 + 112);
            int16x8_t v277 = *(int16x8_t *)v145;
            int32x4_t v278 = v36;
            int32x4_t v279 = v151;
            int32x4_t v280 = v152;
            int32x4_t v285 = v149;
            int32x4_t v286 = v150;
            int32x4_t v287 = v153;
            int32x4_t v288 = v154;
            uint64_t v147 = 128;
          }
          else if (v146 == 3)
          {
            int32x4_t v148 = (int32x4_t)vld1q_dup_f32((const float *)v145);
            int16x8_t v277 = (int16x8_t)v148;
            int32x4_t v278 = v148;
            int32x4_t v279 = v148;
            int32x4_t v280 = v148;
            int32x4_t v285 = v148;
            int32x4_t v286 = v148;
            int32x4_t v287 = v148;
            int32x4_t v288 = v148;
            uint64_t v147 = 4;
          }
          else if (v77[6])
          {
            uint64_t v147 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v277, 128, v145, v146, v138, v36);
          }
          else
          {
            uint64_t v147 = 0;
            int32x4_t v148 = 0uLL;
            int32x4_t v279 = 0u;
            int32x4_t v280 = 0u;
            int16x8_t v277 = 0u;
            int32x4_t v278 = 0u;
            int32x4_t v285 = 0u;
            int32x4_t v286 = 0u;
            int32x4_t v287 = 0u;
            int32x4_t v288 = 0u;
          }
          uint64_t v155 = v145 + v147;
          unsigned int v156 = v77[7];
          if (v156 == 127)
          {
            float32x4_t v159 = *(float32x4_t *)(v155 + 16);
            float32x4_t v160 = *(float32x4_t *)(v155 + 32);
            float32x4_t v161 = *(float32x4_t *)(v155 + 48);
            float32x4_t v162 = *(float32x4_t *)(v155 + 64);
            float32x4_t v163 = *(float32x4_t *)(v155 + 80);
            float32x4_t v164 = *(float32x4_t *)(v155 + 96);
            float32x4_t v165 = *(float32x4_t *)(v155 + 112);
            int16x8_t v293 = *(int16x8_t *)v155;
            float32x4_t v294 = v159;
            float32x4_t v295 = v162;
            float32x4_t v296 = v163;
            float32x4_t v301 = v160;
            float32x4_t v302 = v161;
            float32x4_t v303 = v164;
            float32x4_t v304 = v165;
            a7 = v215;
            unsigned int v85 = v39 + 1;
            uint64_t v157 = v236;
            if (!v236) {
              goto LABEL_213;
            }
          }
          else
          {
            a7 = v215;
            unsigned int v85 = v39 + 1;
            if (v156 == 3)
            {
              float32x4_t v158 = vld1q_dup_f32((const float *)v155);
              int16x8_t v293 = (int16x8_t)v158;
              float32x4_t v294 = v158;
              float32x4_t v295 = v158;
              float32x4_t v296 = v158;
              float32x4_t v301 = v158;
              float32x4_t v302 = v158;
              float32x4_t v303 = v158;
              float32x4_t v304 = v158;
              uint64_t v157 = v236;
              if (!v236) {
                goto LABEL_213;
              }
            }
            else if (v77[7])
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v293, 128, v155, v156, v148, v36);
              uint64_t v157 = v236;
              if (!v236) {
                goto LABEL_213;
              }
            }
            else
            {
              float32x4_t v295 = 0u;
              float32x4_t v296 = 0u;
              int16x8_t v293 = 0u;
              float32x4_t v294 = 0u;
              float32x4_t v301 = 0u;
              float32x4_t v302 = 0u;
              float32x4_t v303 = 0u;
              float32x4_t v304 = 0u;
              uint64_t v157 = v236;
              if (!v236) {
                goto LABEL_213;
              }
            }
          }
          if (v237)
          {
            uint64_t v166 = 0;
            unint64_t v167 = (unint64_t)v234 << 7;
            uint64_t v168 = 16 * v235;
            int v169 = &v241.i8[v167 + v168];
            uint64_t v170 = v232;
            uint64_t v171 = v233;
            unint64_t v172 = 16 * v237;
            if (v172 <= 1) {
              unint64_t v173 = 1;
            }
            else {
              unint64_t v173 = 16 * v237;
            }
            unint64_t v174 = v167 + v168;
            unsigned int v175 = &v241.i8[v167 + v168];
            if (v173) {
              BOOL v176 = (v173 - 1) >> 32 == 0;
            }
            else {
              BOOL v176 = 0;
            }
            char v177 = !v176;
            uint64_t v178 = v173 & 0xFFFFFFFE0;
            uint64_t v179 = v173 & 0xFFFFFFFF0;
            BOOL v180 = &v242.i8[v174];
            unsigned int v181 = v232 + 1;
            unsigned int v182 = v169;
            uint64_t v183 = v232;
            do
            {
              int v184 = (char *)v170 + v171 * v166;
              BOOL v185 = &v169[128 * v166];
              if ((unint64_t)(&v175[128 * v166] - v184) < 0x20) {
                char v186 = 1;
              }
              else {
                char v186 = v177;
              }
              if (v186)
              {
                int v187 = 0;
                goto LABEL_210;
              }
              if (v173 >= 0x20)
              {
                unsigned int v193 = v181;
                unsigned int v194 = v180;
                uint64_t v195 = v173 & 0xFFFFFFFE0;
                do
                {
                  long long v196 = *v193;
                  *((_OWORD *)v194 - 1) = *(v193 - 1);
                  *(_OWORD *)unsigned int v194 = v196;
                  v194 += 32;
                  v193 += 2;
                  v195 -= 32;
                }
                while (v195);
                if (v173 == v178) {
                  goto LABEL_193;
                }
                uint64_t v188 = v173 & 0xFFFFFFFE0;
                if ((v173 & 0x10) == 0)
                {
                  v184 += v178;
                  v185 += v178;
                  int v187 = v173 & 0xFFFFFFE0;
                  goto LABEL_210;
                }
              }
              else
              {
                uint64_t v188 = 0;
              }
              v185 += v179;
              unint64_t v189 = v188 - (v173 & 0xFFFFFFFF0);
              unsigned int v190 = (uint64_t *)((char *)v183 + v188);
              unsigned int v191 = &v182[v188];
              do
              {
                uint64_t v192 = *v190++;
                *(void *)unsigned int v191 = v192;
                v191 += 8;
                v189 += 8;
              }
              while (v189);
              if (v173 == v179) {
                goto LABEL_193;
              }
              v184 += v179;
              int v187 = v173 & 0xFFFFFFF0;
LABEL_210:
              unsigned int v197 = v187 + 1;
              do
              {
                char v198 = *v184++;
                *v185++ = v198;
              }
              while (v172 > v197++);
LABEL_193:
              ++v166;
              v180 += 128;
              unsigned int v181 = (long long *)((char *)v181 + v171);
              uint64_t v183 = (_OWORD *)((char *)v183 + v171);
              v182 += 128;
            }
            while (v166 != v157);
          }
LABEL_213:
          AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock(&v241, 128, v230, v231, v238, v239);
LABEL_214:
          if (v227) {
            memcpy(v226, v81, 0x400uLL);
          }
          BOOL v22 = v39 == v216 >> 3;
          unsigned int v39 = v85;
          uint64_t result = v223;
        }
        while (!v22);
        BOOL v22 = v21++ == v206;
      }
      while (!v22);
    }
  }
  return result;
}

void *AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, int a12)
{
  uint64_t v305 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  uint64_t v17 = a1;
  unsigned int v222 = a8;
  unsigned int v18 = a8 >> 3;
  unsigned int v206 = a8 + a10 - 1;
  unsigned int v208 = v206 >> 3;
  unsigned int v19 = *(unsigned __int8 *)(*(void *)(a1 + 208) + 88);
  unsigned int v20 = *(_DWORD *)(a1 + 112);
  uint64_t v223 = v17;
  if (*(void *)(v17 + 168))
  {
    __int16 CacheMode = IOSurfaceGetCacheMode();
    uint64_t v17 = v223;
    int v22 = CacheMode & 0xF00;
  }
  else
  {
    int v22 = 0;
  }
  BOOL v23 = (v22 & 0xD00) == 0 || v22 == 768;
  int v24 = v22 & 0xE00;
  int v26 = !v23 && v24 != 1024;
  int v227 = v26;
  uint64_t result = (void *)AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::isLevelTiled(v17, *(_DWORD *)(v17 + 144) + a12);
  uint64_t v29 = v223;
  int v216 = (int)result;
  if (v18 <= v208)
  {
    unsigned int v215 = a7 + a9 - 1;
    unsigned int v205 = a7 >> 3;
    if (a7 >> 3 <= v215 >> 3)
    {
      unsigned int v202 = a5 - 1;
      unsigned int v225 = (a5 - 1) >> 3;
      int v224 = ((a5 - 1) & 7) + 1;
      int v203 = ((a6 - 1) & 7) + 1;
      unsigned int v204 = (a6 - 1) >> 3;
      uint32x2_t v30 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0x700000007);
      v31.i64[1] = -1;
      *(int32x2_t *)v31.i8 = vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v30, 3uLL)))))));
      *(int8x8_t *)v28.i8 = vbic_s8(*(int8x8_t *)v31.i8, (int8x8_t)vcgt_u32((uint32x2_t)0x1000000010, v30));
      __int32 v213 = v28.i32[0] | v28.i32[1];
      BOOL v211 = v28.i32[1] != 0;
      uint64_t v212 = v28.i64[0];
      BOOL v210 = v28.i32[0] != 0;
      unint64_t v201 = 8 * v20 * (unint64_t)v19;
      unsigned int v214 = a7;
      do
      {
        unsigned int v32 = (8 * v18) | 7;
        if (8 * v18 <= v222) {
          int v33 = v222;
        }
        else {
          int v33 = 8 * v18;
        }
        unsigned int v34 = v205;
        if (v206 < v32) {
          unsigned int v32 = v206;
        }
        unsigned int v221 = 8 * v18;
        int v209 = v33 - 8 * v18;
        int v220 = v32 - v33 + 1;
        int v35 = v203;
        if (v18 != v204) {
          int v35 = 8;
        }
        unsigned int v228 = v35;
        uint64_t v219 = a3 + (v33 - v222) * a11;
        do
        {
          unsigned int v36 = 8 * v34;
          unsigned int v37 = 8 * (v34 + 1) - 1;
          if (8 * v34 <= a7) {
            int v38 = a7;
          }
          else {
            int v38 = 8 * v34;
          }
          if (v215 < v37) {
            unsigned int v37 = v215;
          }
          int v39 = v37 - v38 + 1;
          if (v34 == v225) {
            unsigned int v40 = v224;
          }
          else {
            unsigned int v40 = 8;
          }
          BOOL v41 = 1;
          if (v221 >= v222 && v36 >= a7)
          {
            int v42 = v224;
            if (v34 != v225) {
              int v42 = 8;
            }
            BOOL v41 = v39 != v42 || v220 != v228;
          }
          if (v216)
          {
            unsigned int v63 = 0;
            uint64_t v64 = v201 >> (*(unsigned char *)(v29 + 57) != 0);
            char v65 = 1;
            if (v64 > 127)
            {
              if (v64 > 511)
              {
                if (v64 == 512)
                {
                  char v65 = 0;
                  char v66 = 0;
                  unsigned int v63 = 16;
                  unsigned int v67 = 16;
                }
                else
                {
                  char v66 = 1;
                  unsigned int v67 = 0;
                  if (v64 == 1024)
                  {
                    char v65 = 0;
                    unsigned int v67 = 8;
                    unsigned int v63 = 16;
                  }
                }
              }
              else if (v64 == 128)
              {
                char v65 = 0;
                char v66 = 0;
                unsigned int v63 = 32;
                unsigned int v67 = 32;
              }
              else
              {
                char v66 = 1;
                unsigned int v67 = 0;
                if (v64 == 256)
                {
                  char v65 = 0;
                  char v66 = 0;
                  unsigned int v67 = 16;
                  unsigned int v63 = 32;
                }
              }
            }
            else
            {
              char v66 = 1;
              unsigned int v67 = 0;
              switch(v64)
              {
                case 4:
                  char v65 = 0;
                  char v66 = 0;
                  unsigned int v67 = 128;
                  unsigned int v63 = 256;
                  break;
                case 5:
                case 6:
                case 7:
                case 9:
                case 10:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 17:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                  break;
                case 8:
                  char v65 = 0;
                  char v66 = 0;
                  unsigned int v63 = 128;
                  unsigned int v67 = 128;
                  break;
                case 16:
                  char v65 = 0;
                  char v66 = 0;
                  unsigned int v67 = 64;
                  unsigned int v63 = 128;
                  break;
                case 32:
                  char v65 = 0;
                  char v66 = 0;
                  unsigned int v63 = 64;
                  unsigned int v67 = 64;
                  break;
                default:
                  if (v64 == 64)
                  {
                    char v65 = 0;
                    char v66 = 0;
                    unsigned int v67 = 32;
                    unsigned int v63 = 64;
                  }
                  break;
              }
            }
            unsigned int v190 = (v63 >> 3) - 1;
            if (v65) {
              unsigned int v191 = 0;
            }
            else {
              unsigned int v191 = 32 - __clz(~(-1 << -(char)__clz(v190)));
            }
            unsigned int v192 = (v67 >> 3) - 1;
            if (v66)
            {
              unsigned int v193 = 0;
              if (v191) {
                goto LABEL_206;
              }
            }
            else
            {
              unsigned int v193 = 32 - __clz(~(-1 << -(char)__clz(v192)));
              if (v193 | v191)
              {
LABEL_206:
                int v194 = 0;
                uint64_t v195 = 0;
                int v196 = v34 & v190;
                int v197 = v18 & v192;
                BOOL v198 = v191 != 0;
                BOOL v199 = v193 != 0;
                int v200 = 1;
                do
                {
                  --v191;
                  if (v198) {
                    v195 |= (unint64_t)(v200 & v196) << v194++;
                  }
                  else {
                    unsigned int v191 = 0;
                  }
                  --v193;
                  if (v199) {
                    v195 |= (unint64_t)(v200 & v197) << v194++;
                  }
                  else {
                    unsigned int v193 = 0;
                  }
                  v200 *= 2;
                  --v194;
                  BOOL v199 = v193 != 0;
                  BOOL v198 = v191 != 0;
                }
                while (v193 | v191);
                goto LABEL_218;
              }
            }
            uint64_t v195 = 0;
LABEL_218:
            unint64_t v51 = ((unint64_t)(v36 / v63 + v221 / v67 * ((v63 + v202) / v63)) << 14) + (v195 << 10);
            goto LABEL_58;
          }
          if (v213)
          {
            int v44 = 0;
            uint64_t v45 = 0;
            int v46 = 1;
            BOOL v47 = v211;
            BOOL v48 = v210;
            int v49 = HIDWORD(v212);
            int v50 = v212;
            do
            {
              --v49;
              if (v47) {
                v45 |= (unint64_t)(v46 & v34) << v44++;
              }
              else {
                int v49 = 0;
              }
              --v50;
              if (v48) {
                v45 |= (unint64_t)(v46 & v18) << v44++;
              }
              else {
                int v50 = 0;
              }
              v46 *= 2;
              --v44;
              BOOL v48 = v50 != 0;
              BOOL v47 = v49 != 0;
            }
            while (v50 | v49);
          }
          else
          {
            uint64_t v45 = 0;
          }
          unint64_t v51 = v45 << 10;
LABEL_58:
          unsigned int v52 = *(_DWORD *)(v29 + 128) >> (*(unsigned char *)(v29 + 144) + a12);
          if (v52 <= 1) {
            unsigned int v52 = 1;
          }
          unsigned int v53 = v52 + 7;
          if (v53 < 0x10) {
            unsigned int v54 = 0;
          }
          else {
            unsigned int v54 = 32 - __clz(~(-1 << -(char)__clz((v53 >> 3) - 1)));
          }
          unsigned int v55 = *(_DWORD *)(v29 + 132) >> (*(unsigned char *)(v29 + 144) + a12);
          if (v55 <= 1) {
            unsigned int v55 = 1;
          }
          unsigned int v56 = v55 + 7;
          if (v56 < 0x10)
          {
            unsigned int v57 = 0;
            if (!v54)
            {
LABEL_80:
              uint64_t v59 = 0;
              goto LABEL_81;
            }
          }
          else
          {
            unsigned int v57 = 32 - __clz(~(-1 << -(char)__clz((v56 >> 3) - 1)));
            if (!(v57 | v54)) {
              goto LABEL_80;
            }
          }
          int v58 = 0;
          uint64_t v59 = 0;
          BOOL v60 = v54 != 0;
          BOOL v61 = v57 != 0;
          int v62 = 1;
          do
          {
            --v54;
            if (v60) {
              v59 |= (unint64_t)(v62 & v34) << v58++;
            }
            else {
              unsigned int v54 = 0;
            }
            --v57;
            if (v61) {
              v59 |= (unint64_t)(v62 & v18) << v58++;
            }
            else {
              unsigned int v57 = 0;
            }
            v62 *= 2;
            --v58;
            BOOL v61 = v57 != 0;
            BOOL v60 = v54 != 0;
          }
          while (v57 | v54);
LABEL_81:
          int v68 = v40 < 8 || v41;
          unsigned int v69 = (char *)(a4 + 8 * v59);
          uint64_t v70 = v219 + 16 * (v38 - a7);
          int v71 = (int32x4_t *)(a2 + v51);
          if (v228 < 8) {
            int v72 = 1;
          }
          else {
            int v72 = v68;
          }
          int16x8_t v226 = v71;
          if (v227)
          {
            BOOL v73 = (int32x4_t *)__dst;
            if (!v72) {
              goto LABEL_93;
            }
            char v74 = v40;
            int v75 = v38;
            memcpy(__dst, v71, sizeof(__dst));
            unsigned int v36 = 8 * v34;
            int v38 = v75;
            LOBYTE(v40) = v74;
            uint64_t v29 = v223;
          }
          else
          {
            BOOL v73 = v71;
            if (!v72)
            {
LABEL_93:
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock(v70, a11, (unint64_t)v73, v69, v40, v228);
              goto LABEL_94;
            }
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE11ELj4ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = v29;
          int16x8_t v230 = v73;
          unsigned __int8 v238 = v40;
          unsigned __int8 v239 = v228;
          unsigned int v234 = v209;
          unsigned int v235 = v38 - v36;
          int16x8_t v231 = v69;
          uint64_t v232 = v70;
          uint64_t v233 = a11;
          unsigned int v236 = v220;
          unsigned int v237 = v39;
          if (v41)
          {
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(v29 + 8) + 7384), block);
LABEL_94:
            a7 = v214;
            goto LABEL_186;
          }
          unsigned int v76 = *v69;
          a7 = v214;
          if (v76 == 127)
          {
            int32x4_t v78 = *v73;
            int32x4_t v31 = v73[1];
            int32x4_t v79 = v73[2];
            int32x4_t v80 = v73[3];
            int32x4_t v81 = v73[4];
            int32x4_t v82 = v73[5];
            int32x4_t v83 = v73[6];
            int32x4_t v84 = v73[7];
            int16x8_t v241 = *(int16x8_t *)v73;
            int32x4_t v242 = v31;
            int32x4_t v243 = v81;
            int32x4_t v244 = v82;
            int32x4_t v249 = v79;
            int32x4_t v250 = v80;
            int32x4_t v251 = v83;
            int32x4_t v252 = v84;
            uint64_t v77 = 128;
          }
          else if (v76 == 3)
          {
            int32x4_t v78 = (int32x4_t)vld1q_dup_f32((const float *)v73->i32);
            int16x8_t v241 = (int16x8_t)v78;
            int32x4_t v242 = v78;
            int32x4_t v243 = v78;
            int32x4_t v244 = v78;
            int32x4_t v249 = v78;
            int32x4_t v250 = v78;
            int32x4_t v251 = v78;
            int32x4_t v252 = v78;
            uint64_t v77 = 4;
          }
          else if (*v69)
          {
            uint64_t v77 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v241, 128, (uint64_t)v73, v76, v28, v31);
          }
          else
          {
            uint64_t v77 = 0;
            int32x4_t v78 = 0uLL;
            int32x4_t v244 = 0u;
            int32x4_t v243 = 0u;
            int32x4_t v242 = 0u;
            int16x8_t v241 = 0u;
            int32x4_t v249 = 0u;
            int32x4_t v250 = 0u;
            int32x4_t v251 = 0u;
            int32x4_t v252 = 0u;
          }
          uint64_t v85 = (uint64_t)v73->i64 + v77;
          unsigned int v86 = v69[1];
          if (v86 == 127)
          {
            int32x4_t v88 = *(int32x4_t *)v85;
            int32x4_t v31 = *(int32x4_t *)(v85 + 16);
            int32x4_t v89 = *(int32x4_t *)(v85 + 32);
            int32x4_t v90 = *(int32x4_t *)(v85 + 48);
            int32x4_t v91 = *(int32x4_t *)(v85 + 64);
            int32x4_t v92 = *(int32x4_t *)(v85 + 80);
            int32x4_t v93 = *(int32x4_t *)(v85 + 96);
            int32x4_t v94 = *(int32x4_t *)(v85 + 112);
            int16x8_t v257 = *(int16x8_t *)v85;
            int32x4_t v258 = v31;
            int32x4_t v259 = v91;
            int32x4_t v260 = v92;
            int32x4_t v265 = v89;
            int32x4_t v266 = v90;
            int32x4_t v267 = v93;
            int32x4_t v268 = v94;
            uint64_t v87 = 128;
          }
          else if (v86 == 3)
          {
            int32x4_t v88 = (int32x4_t)vld1q_dup_f32((const float *)v85);
            int16x8_t v257 = (int16x8_t)v88;
            int32x4_t v258 = v88;
            int32x4_t v259 = v88;
            int32x4_t v260 = v88;
            int32x4_t v265 = v88;
            int32x4_t v266 = v88;
            int32x4_t v267 = v88;
            int32x4_t v268 = v88;
            uint64_t v87 = 4;
          }
          else if (v69[1])
          {
            uint64_t v87 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v257, 128, v85, v86, v78, v31);
          }
          else
          {
            uint64_t v87 = 0;
            int32x4_t v88 = 0uLL;
            int32x4_t v259 = 0u;
            int32x4_t v260 = 0u;
            int16x8_t v257 = 0u;
            int32x4_t v258 = 0u;
            int32x4_t v265 = 0u;
            int32x4_t v266 = 0u;
            int32x4_t v267 = 0u;
            int32x4_t v268 = 0u;
          }
          uint64_t v95 = v85 + v87;
          unsigned int v96 = v69[2];
          if (v96 == 127)
          {
            int32x4_t v98 = *(int32x4_t *)v95;
            int32x4_t v31 = *(int32x4_t *)(v95 + 16);
            int32x4_t v99 = *(int32x4_t *)(v95 + 32);
            int32x4_t v100 = *(int32x4_t *)(v95 + 48);
            int32x4_t v101 = *(int32x4_t *)(v95 + 64);
            int32x4_t v102 = *(int32x4_t *)(v95 + 80);
            int32x4_t v103 = *(int32x4_t *)(v95 + 96);
            int32x4_t v104 = *(int32x4_t *)(v95 + 112);
            int16x8_t v245 = *(int16x8_t *)v95;
            int32x4_t v246 = v31;
            int32x4_t v247 = v101;
            int32x4_t v248 = v102;
            int32x4_t v253 = v99;
            int32x4_t v254 = v100;
            int32x4_t v255 = v103;
            int32x4_t v256 = v104;
            uint64_t v97 = 128;
          }
          else if (v96 == 3)
          {
            int32x4_t v98 = (int32x4_t)vld1q_dup_f32((const float *)v95);
            int16x8_t v245 = (int16x8_t)v98;
            int32x4_t v246 = v98;
            int32x4_t v247 = v98;
            int32x4_t v248 = v98;
            int32x4_t v253 = v98;
            int32x4_t v254 = v98;
            int32x4_t v255 = v98;
            int32x4_t v256 = v98;
            uint64_t v97 = 4;
          }
          else if (v69[2])
          {
            uint64_t v97 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v245, 128, v95, v96, v88, v31);
          }
          else
          {
            uint64_t v97 = 0;
            int32x4_t v98 = 0uLL;
            int32x4_t v247 = 0u;
            int32x4_t v248 = 0u;
            int16x8_t v245 = 0u;
            int32x4_t v246 = 0u;
            int32x4_t v253 = 0u;
            int32x4_t v254 = 0u;
            int32x4_t v255 = 0u;
            int32x4_t v256 = 0u;
          }
          uint64_t v105 = v95 + v97;
          unsigned int v106 = v69[3];
          if (v106 == 127)
          {
            int32x4_t v108 = *(int32x4_t *)v105;
            int32x4_t v31 = *(int32x4_t *)(v105 + 16);
            int32x4_t v109 = *(int32x4_t *)(v105 + 32);
            int32x4_t v110 = *(int32x4_t *)(v105 + 48);
            int32x4_t v111 = *(int32x4_t *)(v105 + 64);
            int32x4_t v112 = *(int32x4_t *)(v105 + 80);
            int32x4_t v113 = *(int32x4_t *)(v105 + 96);
            int32x4_t v114 = *(int32x4_t *)(v105 + 112);
            int16x8_t v261 = *(int16x8_t *)v105;
            int32x4_t v262 = v31;
            int32x4_t v263 = v111;
            int32x4_t v264 = v112;
            int32x4_t v269 = v109;
            int32x4_t v270 = v110;
            int32x4_t v271 = v113;
            int32x4_t v272 = v114;
            uint64_t v107 = 128;
          }
          else if (v106 == 3)
          {
            int32x4_t v108 = (int32x4_t)vld1q_dup_f32((const float *)v105);
            int16x8_t v261 = (int16x8_t)v108;
            int32x4_t v262 = v108;
            int32x4_t v263 = v108;
            int32x4_t v264 = v108;
            int32x4_t v269 = v108;
            int32x4_t v270 = v108;
            int32x4_t v271 = v108;
            int32x4_t v272 = v108;
            uint64_t v107 = 4;
          }
          else if (v69[3])
          {
            uint64_t v107 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v261, 128, v105, v106, v98, v31);
          }
          else
          {
            uint64_t v107 = 0;
            int32x4_t v108 = 0uLL;
            int32x4_t v263 = 0u;
            int32x4_t v264 = 0u;
            int16x8_t v261 = 0u;
            int32x4_t v262 = 0u;
            int32x4_t v269 = 0u;
            int32x4_t v270 = 0u;
            int32x4_t v271 = 0u;
            int32x4_t v272 = 0u;
          }
          uint64_t v115 = v105 + v107;
          unsigned int v116 = v69[4];
          if (v116 == 127)
          {
            int32x4_t v118 = *(int32x4_t *)v115;
            int32x4_t v31 = *(int32x4_t *)(v115 + 16);
            int32x4_t v119 = *(int32x4_t *)(v115 + 32);
            int32x4_t v120 = *(int32x4_t *)(v115 + 48);
            int32x4_t v121 = *(int32x4_t *)(v115 + 64);
            int32x4_t v122 = *(int32x4_t *)(v115 + 80);
            int32x4_t v123 = *(int32x4_t *)(v115 + 96);
            int32x4_t v124 = *(int32x4_t *)(v115 + 112);
            int16x8_t v273 = *(int16x8_t *)v115;
            int32x4_t v274 = v31;
            int32x4_t v275 = v121;
            int32x4_t v276 = v122;
            int32x4_t v281 = v119;
            int32x4_t v282 = v120;
            int32x4_t v283 = v123;
            int32x4_t v284 = v124;
            uint64_t v117 = 128;
          }
          else if (v116 == 3)
          {
            int32x4_t v118 = (int32x4_t)vld1q_dup_f32((const float *)v115);
            int16x8_t v273 = (int16x8_t)v118;
            int32x4_t v274 = v118;
            int32x4_t v275 = v118;
            int32x4_t v276 = v118;
            int32x4_t v281 = v118;
            int32x4_t v282 = v118;
            int32x4_t v283 = v118;
            int32x4_t v284 = v118;
            uint64_t v117 = 4;
          }
          else if (v69[4])
          {
            uint64_t v117 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v273, 128, v115, v116, v108, v31);
          }
          else
          {
            uint64_t v117 = 0;
            int32x4_t v118 = 0uLL;
            int32x4_t v275 = 0u;
            int32x4_t v276 = 0u;
            int16x8_t v273 = 0u;
            int32x4_t v274 = 0u;
            int32x4_t v281 = 0u;
            int32x4_t v282 = 0u;
            int32x4_t v283 = 0u;
            int32x4_t v284 = 0u;
          }
          uint64_t v125 = v115 + v117;
          unsigned int v126 = v69[5];
          if (v126 == 127)
          {
            int32x4_t v128 = *(int32x4_t *)v125;
            int32x4_t v31 = *(int32x4_t *)(v125 + 16);
            int32x4_t v129 = *(int32x4_t *)(v125 + 32);
            int32x4_t v130 = *(int32x4_t *)(v125 + 48);
            int32x4_t v131 = *(int32x4_t *)(v125 + 64);
            int32x4_t v132 = *(int32x4_t *)(v125 + 80);
            int32x4_t v133 = *(int32x4_t *)(v125 + 96);
            int32x4_t v134 = *(int32x4_t *)(v125 + 112);
            int16x8_t v289 = *(int16x8_t *)v125;
            int32x4_t v290 = v31;
            int32x4_t v291 = v131;
            int32x4_t v292 = v132;
            int32x4_t v297 = v129;
            int32x4_t v298 = v130;
            int32x4_t v299 = v133;
            int32x4_t v300 = v134;
            uint64_t v127 = 128;
          }
          else if (v126 == 3)
          {
            int32x4_t v128 = (int32x4_t)vld1q_dup_f32((const float *)v125);
            int16x8_t v289 = (int16x8_t)v128;
            int32x4_t v290 = v128;
            int32x4_t v291 = v128;
            int32x4_t v292 = v128;
            int32x4_t v297 = v128;
            int32x4_t v298 = v128;
            int32x4_t v299 = v128;
            int32x4_t v300 = v128;
            uint64_t v127 = 4;
          }
          else if (v69[5])
          {
            uint64_t v127 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v289, 128, v125, v126, v118, v31);
          }
          else
          {
            uint64_t v127 = 0;
            int32x4_t v128 = 0uLL;
            int32x4_t v291 = 0u;
            int32x4_t v292 = 0u;
            int16x8_t v289 = 0u;
            int32x4_t v290 = 0u;
            int32x4_t v297 = 0u;
            int32x4_t v298 = 0u;
            int32x4_t v299 = 0u;
            int32x4_t v300 = 0u;
          }
          uint64_t v135 = v125 + v127;
          unsigned int v136 = v69[6];
          if (v136 == 127)
          {
            int32x4_t v138 = *(int32x4_t *)v135;
            int32x4_t v31 = *(int32x4_t *)(v135 + 16);
            int32x4_t v139 = *(int32x4_t *)(v135 + 32);
            int32x4_t v140 = *(int32x4_t *)(v135 + 48);
            int32x4_t v141 = *(int32x4_t *)(v135 + 64);
            int32x4_t v142 = *(int32x4_t *)(v135 + 80);
            int32x4_t v143 = *(int32x4_t *)(v135 + 96);
            int32x4_t v144 = *(int32x4_t *)(v135 + 112);
            int16x8_t v277 = *(int16x8_t *)v135;
            int32x4_t v278 = v31;
            int32x4_t v279 = v141;
            int32x4_t v280 = v142;
            int32x4_t v285 = v139;
            int32x4_t v286 = v140;
            int32x4_t v287 = v143;
            int32x4_t v288 = v144;
            uint64_t v137 = 128;
          }
          else if (v136 == 3)
          {
            int32x4_t v138 = (int32x4_t)vld1q_dup_f32((const float *)v135);
            int16x8_t v277 = (int16x8_t)v138;
            int32x4_t v278 = v138;
            int32x4_t v279 = v138;
            int32x4_t v280 = v138;
            int32x4_t v285 = v138;
            int32x4_t v286 = v138;
            int32x4_t v287 = v138;
            int32x4_t v288 = v138;
            uint64_t v137 = 4;
          }
          else if (v69[6])
          {
            uint64_t v137 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v277, 128, v135, v136, v128, v31);
          }
          else
          {
            uint64_t v137 = 0;
            int32x4_t v138 = 0uLL;
            int32x4_t v279 = 0u;
            int32x4_t v280 = 0u;
            int16x8_t v277 = 0u;
            int32x4_t v278 = 0u;
            int32x4_t v285 = 0u;
            int32x4_t v286 = 0u;
            int32x4_t v287 = 0u;
            int32x4_t v288 = 0u;
          }
          uint64_t v145 = v135 + v137;
          unsigned int v146 = v69[7];
          if (v146 == 127)
          {
            float32x4_t v149 = *(float32x4_t *)(v145 + 16);
            float32x4_t v150 = *(float32x4_t *)(v145 + 32);
            float32x4_t v151 = *(float32x4_t *)(v145 + 48);
            float32x4_t v152 = *(float32x4_t *)(v145 + 64);
            float32x4_t v153 = *(float32x4_t *)(v145 + 80);
            float32x4_t v154 = *(float32x4_t *)(v145 + 96);
            float32x4_t v155 = *(float32x4_t *)(v145 + 112);
            int16x8_t v293 = *(int16x8_t *)v145;
            float32x4_t v294 = v149;
            float32x4_t v295 = v152;
            float32x4_t v296 = v153;
            float32x4_t v301 = v150;
            float32x4_t v302 = v151;
            float32x4_t v303 = v154;
            float32x4_t v304 = v155;
            uint64_t v147 = v236;
            if (!v236) {
              goto LABEL_185;
            }
          }
          else if (v146 == 3)
          {
            float32x4_t v148 = vld1q_dup_f32((const float *)v145);
            int16x8_t v293 = (int16x8_t)v148;
            float32x4_t v294 = v148;
            float32x4_t v295 = v148;
            float32x4_t v296 = v148;
            float32x4_t v301 = v148;
            float32x4_t v302 = v148;
            float32x4_t v303 = v148;
            float32x4_t v304 = v148;
            uint64_t v147 = v236;
            if (!v236) {
              goto LABEL_185;
            }
          }
          else if (v69[7])
          {
            AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v293, 128, v145, v146, v138, v31);
            uint64_t v147 = v236;
            if (!v236) {
              goto LABEL_185;
            }
          }
          else
          {
            float32x4_t v295 = 0u;
            float32x4_t v296 = 0u;
            int16x8_t v293 = 0u;
            float32x4_t v294 = 0u;
            float32x4_t v301 = 0u;
            float32x4_t v302 = 0u;
            float32x4_t v303 = 0u;
            float32x4_t v304 = 0u;
            uint64_t v147 = v236;
            if (!v236) {
              goto LABEL_185;
            }
          }
          if (v237)
          {
            uint64_t v156 = 0;
            unint64_t v157 = (unint64_t)v234 << 7;
            uint64_t v158 = 16 * v235;
            float32x4_t v159 = &v241.i8[v157 + v158];
            uint64_t v160 = v232;
            uint64_t v161 = v233;
            unint64_t v162 = 16 * v237;
            if (v162 <= 1) {
              unint64_t v163 = 1;
            }
            else {
              unint64_t v163 = 16 * v237;
            }
            unint64_t v164 = v157 + v158;
            float32x4_t v165 = &v241.i8[v157 + v158];
            if (v163) {
              BOOL v166 = (v163 - 1) >> 32 == 0;
            }
            else {
              BOOL v166 = 0;
            }
            char v167 = !v166;
            uint64_t v168 = v163 & 0xFFFFFFFE0;
            uint64_t v169 = v163 & 0xFFFFFFFF0;
            uint64_t v170 = &v242.i8[v164];
            uint64_t v171 = (long long *)(v232 + 16);
            unint64_t v172 = v159;
            uint64_t v173 = v232;
            do
            {
              unint64_t v174 = (char *)(v160 + v161 * v156);
              unsigned int v175 = &v159[128 * v156];
              if ((unint64_t)(&v165[128 * v156] - v174) < 0x20) {
                char v176 = 1;
              }
              else {
                char v176 = v167;
              }
              if (v176)
              {
                int v177 = 0;
                goto LABEL_182;
              }
              if (v163 >= 0x20)
              {
                uint64_t v183 = v171;
                int v184 = v170;
                uint64_t v185 = v163 & 0xFFFFFFFE0;
                do
                {
                  long long v186 = *v183;
                  *((_OWORD *)v184 - 1) = *(v183 - 1);
                  *(_OWORD *)int v184 = v186;
                  v184 += 32;
                  v183 += 2;
                  v185 -= 32;
                }
                while (v185);
                if (v163 == v168) {
                  goto LABEL_165;
                }
                uint64_t v178 = v163 & 0xFFFFFFFE0;
                if ((v163 & 0x10) == 0)
                {
                  v174 += v168;
                  v175 += v168;
                  int v177 = v163 & 0xFFFFFFE0;
                  goto LABEL_182;
                }
              }
              else
              {
                uint64_t v178 = 0;
              }
              v175 += v169;
              unint64_t v179 = v178 - (v163 & 0xFFFFFFFF0);
              BOOL v180 = (uint64_t *)(v173 + v178);
              unsigned int v181 = &v172[v178];
              do
              {
                uint64_t v182 = *v180++;
                *(void *)unsigned int v181 = v182;
                v181 += 8;
                v179 += 8;
              }
              while (v179);
              if (v163 == v169) {
                goto LABEL_165;
              }
              v174 += v169;
              int v177 = v163 & 0xFFFFFFF0;
LABEL_182:
              unsigned int v187 = v177 + 1;
              do
              {
                char v188 = *v174++;
                *v175++ = v188;
              }
              while (v162 > v187++);
LABEL_165:
              ++v156;
              v170 += 128;
              uint64_t v171 = (long long *)((char *)v171 + v161);
              v173 += v161;
              v172 += 128;
            }
            while (v156 != v147);
          }
LABEL_185:
          AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((uint64_t)&v241, 128, (unint64_t)v230, v231, v238, v239);
LABEL_186:
          uint64_t result = v226;
          if (v227) {
            uint64_t result = memcpy(v226, v73, 0x400uLL);
          }
          BOOL v23 = v34++ == v215 >> 3;
          uint64_t v29 = v223;
        }
        while (!v23);
        BOOL v23 = v18++ == v208;
      }
      while (!v23);
    }
  }
  return result;
}

void *AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, int a12)
{
  uint64_t v305 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  uint64_t v17 = a1;
  unsigned int v222 = a8;
  unsigned int v18 = a8 >> 3;
  unsigned int v206 = a8 + a10 - 1;
  unsigned int v208 = v206 >> 3;
  unsigned int v19 = *(unsigned __int8 *)(*(void *)(a1 + 208) + 88);
  unsigned int v20 = *(_DWORD *)(a1 + 112);
  uint64_t v223 = v17;
  if (*(void *)(v17 + 168))
  {
    __int16 CacheMode = IOSurfaceGetCacheMode();
    uint64_t v17 = v223;
    int v22 = CacheMode & 0xF00;
  }
  else
  {
    int v22 = 0;
  }
  BOOL v23 = (v22 & 0xD00) == 0 || v22 == 768;
  int v24 = v22 & 0xE00;
  int v26 = !v23 && v24 != 1024;
  int v227 = v26;
  uint64_t result = (void *)AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::isLevelTiled(v17, *(_DWORD *)(v17 + 144) + a12);
  uint64_t v29 = v223;
  int v216 = (int)result;
  if (v18 <= v208)
  {
    unsigned int v215 = a7 + a9 - 1;
    unsigned int v205 = a7 >> 3;
    if (a7 >> 3 <= v215 >> 3)
    {
      unsigned int v202 = a5 - 1;
      unsigned int v225 = (a5 - 1) >> 3;
      int v224 = ((a5 - 1) & 7) + 1;
      int v203 = ((a6 - 1) & 7) + 1;
      unsigned int v204 = (a6 - 1) >> 3;
      uint32x2_t v30 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0x700000007);
      v31.i64[1] = -1;
      *(int32x2_t *)v31.i8 = vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v30, 3uLL)))))));
      *(int8x8_t *)v28.i8 = vbic_s8(*(int8x8_t *)v31.i8, (int8x8_t)vcgt_u32((uint32x2_t)0x1000000010, v30));
      __int32 v213 = v28.i32[0] | v28.i32[1];
      BOOL v211 = v28.i32[1] != 0;
      uint64_t v212 = v28.i64[0];
      BOOL v210 = v28.i32[0] != 0;
      unint64_t v201 = 8 * v20 * (unint64_t)v19;
      unsigned int v214 = a7;
      do
      {
        unsigned int v32 = (8 * v18) | 7;
        if (8 * v18 <= v222) {
          int v33 = v222;
        }
        else {
          int v33 = 8 * v18;
        }
        unsigned int v34 = v205;
        if (v206 < v32) {
          unsigned int v32 = v206;
        }
        unsigned int v221 = 8 * v18;
        int v209 = v33 - 8 * v18;
        int v220 = v32 - v33 + 1;
        int v35 = v203;
        if (v18 != v204) {
          int v35 = 8;
        }
        unsigned int v228 = v35;
        uint64_t v219 = a3 + (v33 - v222) * a11;
        do
        {
          unsigned int v36 = 8 * v34;
          unsigned int v37 = 8 * (v34 + 1) - 1;
          if (8 * v34 <= a7) {
            int v38 = a7;
          }
          else {
            int v38 = 8 * v34;
          }
          if (v215 < v37) {
            unsigned int v37 = v215;
          }
          int v39 = v37 - v38 + 1;
          if (v34 == v225) {
            unsigned int v40 = v224;
          }
          else {
            unsigned int v40 = 8;
          }
          BOOL v41 = 1;
          if (v221 >= v222 && v36 >= a7)
          {
            int v42 = v224;
            if (v34 != v225) {
              int v42 = 8;
            }
            BOOL v41 = v39 != v42 || v220 != v228;
          }
          if (v216)
          {
            unsigned int v63 = 0;
            uint64_t v64 = v201 >> (*(unsigned char *)(v29 + 57) != 0);
            char v65 = 1;
            if (v64 > 127)
            {
              if (v64 > 511)
              {
                if (v64 == 512)
                {
                  char v65 = 0;
                  char v66 = 0;
                  unsigned int v63 = 16;
                  unsigned int v67 = 16;
                }
                else
                {
                  char v66 = 1;
                  unsigned int v67 = 0;
                  if (v64 == 1024)
                  {
                    char v65 = 0;
                    unsigned int v67 = 8;
                    unsigned int v63 = 16;
                  }
                }
              }
              else if (v64 == 128)
              {
                char v65 = 0;
                char v66 = 0;
                unsigned int v63 = 32;
                unsigned int v67 = 32;
              }
              else
              {
                char v66 = 1;
                unsigned int v67 = 0;
                if (v64 == 256)
                {
                  char v65 = 0;
                  char v66 = 0;
                  unsigned int v67 = 16;
                  unsigned int v63 = 32;
                }
              }
            }
            else
            {
              char v66 = 1;
              unsigned int v67 = 0;
              switch(v64)
              {
                case 4:
                  char v65 = 0;
                  char v66 = 0;
                  unsigned int v67 = 128;
                  unsigned int v63 = 256;
                  break;
                case 5:
                case 6:
                case 7:
                case 9:
                case 10:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 17:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                  break;
                case 8:
                  char v65 = 0;
                  char v66 = 0;
                  unsigned int v63 = 128;
                  unsigned int v67 = 128;
                  break;
                case 16:
                  char v65 = 0;
                  char v66 = 0;
                  unsigned int v67 = 64;
                  unsigned int v63 = 128;
                  break;
                case 32:
                  char v65 = 0;
                  char v66 = 0;
                  unsigned int v63 = 64;
                  unsigned int v67 = 64;
                  break;
                default:
                  if (v64 == 64)
                  {
                    char v65 = 0;
                    char v66 = 0;
                    unsigned int v67 = 32;
                    unsigned int v63 = 64;
                  }
                  break;
              }
            }
            unsigned int v190 = (v63 >> 3) - 1;
            if (v65) {
              unsigned int v191 = 0;
            }
            else {
              unsigned int v191 = 32 - __clz(~(-1 << -(char)__clz(v190)));
            }
            unsigned int v192 = (v67 >> 3) - 1;
            if (v66)
            {
              unsigned int v193 = 0;
              if (v191) {
                goto LABEL_206;
              }
            }
            else
            {
              unsigned int v193 = 32 - __clz(~(-1 << -(char)__clz(v192)));
              if (v193 | v191)
              {
LABEL_206:
                int v194 = 0;
                uint64_t v195 = 0;
                int v196 = v34 & v190;
                int v197 = v18 & v192;
                BOOL v198 = v191 != 0;
                BOOL v199 = v193 != 0;
                int v200 = 1;
                do
                {
                  --v191;
                  if (v198) {
                    v195 |= (unint64_t)(v200 & v196) << v194++;
                  }
                  else {
                    unsigned int v191 = 0;
                  }
                  --v193;
                  if (v199) {
                    v195 |= (unint64_t)(v200 & v197) << v194++;
                  }
                  else {
                    unsigned int v193 = 0;
                  }
                  v200 *= 2;
                  --v194;
                  BOOL v199 = v193 != 0;
                  BOOL v198 = v191 != 0;
                }
                while (v193 | v191);
                goto LABEL_218;
              }
            }
            uint64_t v195 = 0;
LABEL_218:
            unint64_t v51 = ((unint64_t)(v36 / v63 + v221 / v67 * ((v63 + v202) / v63)) << 14) + (v195 << 10);
            goto LABEL_58;
          }
          if (v213)
          {
            int v44 = 0;
            uint64_t v45 = 0;
            int v46 = 1;
            BOOL v47 = v211;
            BOOL v48 = v210;
            int v49 = HIDWORD(v212);
            int v50 = v212;
            do
            {
              --v49;
              if (v47) {
                v45 |= (unint64_t)(v46 & v34) << v44++;
              }
              else {
                int v49 = 0;
              }
              --v50;
              if (v48) {
                v45 |= (unint64_t)(v46 & v18) << v44++;
              }
              else {
                int v50 = 0;
              }
              v46 *= 2;
              --v44;
              BOOL v48 = v50 != 0;
              BOOL v47 = v49 != 0;
            }
            while (v50 | v49);
          }
          else
          {
            uint64_t v45 = 0;
          }
          unint64_t v51 = v45 << 10;
LABEL_58:
          unsigned int v52 = *(_DWORD *)(v29 + 128) >> (*(unsigned char *)(v29 + 144) + a12);
          if (v52 <= 1) {
            unsigned int v52 = 1;
          }
          unsigned int v53 = v52 + 7;
          if (v53 < 0x10) {
            unsigned int v54 = 0;
          }
          else {
            unsigned int v54 = 32 - __clz(~(-1 << -(char)__clz((v53 >> 3) - 1)));
          }
          unsigned int v55 = *(_DWORD *)(v29 + 132) >> (*(unsigned char *)(v29 + 144) + a12);
          if (v55 <= 1) {
            unsigned int v55 = 1;
          }
          unsigned int v56 = v55 + 7;
          if (v56 < 0x10)
          {
            unsigned int v57 = 0;
            if (!v54)
            {
LABEL_80:
              uint64_t v59 = 0;
              goto LABEL_81;
            }
          }
          else
          {
            unsigned int v57 = 32 - __clz(~(-1 << -(char)__clz((v56 >> 3) - 1)));
            if (!(v57 | v54)) {
              goto LABEL_80;
            }
          }
          int v58 = 0;
          uint64_t v59 = 0;
          BOOL v60 = v54 != 0;
          BOOL v61 = v57 != 0;
          int v62 = 1;
          do
          {
            --v54;
            if (v60) {
              v59 |= (unint64_t)(v62 & v34) << v58++;
            }
            else {
              unsigned int v54 = 0;
            }
            --v57;
            if (v61) {
              v59 |= (unint64_t)(v62 & v18) << v58++;
            }
            else {
              unsigned int v57 = 0;
            }
            v62 *= 2;
            --v58;
            BOOL v61 = v57 != 0;
            BOOL v60 = v54 != 0;
          }
          while (v57 | v54);
LABEL_81:
          int v68 = v40 < 8 || v41;
          unsigned int v69 = (char *)(a4 + 8 * v59);
          uint64_t v70 = (_OWORD *)(v219 + 16 * (v38 - a7));
          int v71 = (void *)(a2 + v51);
          if (v228 < 8) {
            int v72 = 1;
          }
          else {
            int v72 = v68;
          }
          int16x8_t v226 = v71;
          if (v227)
          {
            BOOL v73 = __dst;
            if (!v72) {
              goto LABEL_93;
            }
            char v74 = v40;
            int v75 = v38;
            memcpy(__dst, v71, sizeof(__dst));
            unsigned int v36 = 8 * v34;
            int v38 = v75;
            LOBYTE(v40) = v74;
            uint64_t v29 = v223;
          }
          else
          {
            BOOL v73 = v71;
            if (!v72)
            {
LABEL_93:
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock(v70, a11, v73, v69, v40, v228);
              goto LABEL_94;
            }
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE11ELj4ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = v29;
          int16x8_t v230 = v73;
          unsigned __int8 v238 = v40;
          unsigned __int8 v239 = v228;
          unsigned int v234 = v209;
          unsigned int v235 = v38 - v36;
          int16x8_t v231 = v69;
          uint64_t v232 = v70;
          uint64_t v233 = a11;
          unsigned int v236 = v220;
          unsigned int v237 = v39;
          if (v41)
          {
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(v29 + 8) + 7384), block);
LABEL_94:
            a7 = v214;
            goto LABEL_186;
          }
          unsigned int v76 = *v69;
          a7 = v214;
          if (v76 == 127)
          {
            int32x4_t v78 = *(int32x4_t *)v73;
            int32x4_t v31 = *((int32x4_t *)v73 + 1);
            int32x4_t v79 = *((int32x4_t *)v73 + 2);
            int32x4_t v80 = *((int32x4_t *)v73 + 3);
            int32x4_t v81 = *((int32x4_t *)v73 + 4);
            int32x4_t v82 = *((int32x4_t *)v73 + 5);
            int32x4_t v83 = *((int32x4_t *)v73 + 6);
            int32x4_t v84 = *((int32x4_t *)v73 + 7);
            int16x8_t v241 = *(int16x8_t *)v73;
            int32x4_t v242 = v31;
            int32x4_t v243 = v81;
            int32x4_t v244 = v82;
            int32x4_t v249 = v79;
            int32x4_t v250 = v80;
            int32x4_t v251 = v83;
            int32x4_t v252 = v84;
            uint64_t v77 = 128;
          }
          else if (v76 == 3)
          {
            int32x4_t v78 = (int32x4_t)vld1q_dup_f32((const float *)v73);
            int16x8_t v241 = (int16x8_t)v78;
            int32x4_t v242 = v78;
            int32x4_t v243 = v78;
            int32x4_t v244 = v78;
            int32x4_t v249 = v78;
            int32x4_t v250 = v78;
            int32x4_t v251 = v78;
            int32x4_t v252 = v78;
            uint64_t v77 = 4;
          }
          else if (*v69)
          {
            uint64_t v77 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v241, 128, (uint64_t)v73, v76, v28, v31);
          }
          else
          {
            uint64_t v77 = 0;
            int32x4_t v78 = 0uLL;
            int32x4_t v244 = 0u;
            int32x4_t v243 = 0u;
            int32x4_t v242 = 0u;
            int16x8_t v241 = 0u;
            int32x4_t v249 = 0u;
            int32x4_t v250 = 0u;
            int32x4_t v251 = 0u;
            int32x4_t v252 = 0u;
          }
          uint64_t v85 = (uint64_t)v73 + v77;
          unsigned int v86 = v69[1];
          if (v86 == 127)
          {
            int32x4_t v88 = *(int32x4_t *)v85;
            int32x4_t v31 = *(int32x4_t *)(v85 + 16);
            int32x4_t v89 = *(int32x4_t *)(v85 + 32);
            int32x4_t v90 = *(int32x4_t *)(v85 + 48);
            int32x4_t v91 = *(int32x4_t *)(v85 + 64);
            int32x4_t v92 = *(int32x4_t *)(v85 + 80);
            int32x4_t v93 = *(int32x4_t *)(v85 + 96);
            int32x4_t v94 = *(int32x4_t *)(v85 + 112);
            int16x8_t v257 = *(int16x8_t *)v85;
            int32x4_t v258 = v31;
            int32x4_t v259 = v91;
            int32x4_t v260 = v92;
            int32x4_t v265 = v89;
            int32x4_t v266 = v90;
            int32x4_t v267 = v93;
            int32x4_t v268 = v94;
            uint64_t v87 = 128;
          }
          else if (v86 == 3)
          {
            int32x4_t v88 = (int32x4_t)vld1q_dup_f32((const float *)v85);
            int16x8_t v257 = (int16x8_t)v88;
            int32x4_t v258 = v88;
            int32x4_t v259 = v88;
            int32x4_t v260 = v88;
            int32x4_t v265 = v88;
            int32x4_t v266 = v88;
            int32x4_t v267 = v88;
            int32x4_t v268 = v88;
            uint64_t v87 = 4;
          }
          else if (v69[1])
          {
            uint64_t v87 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v257, 128, v85, v86, v78, v31);
          }
          else
          {
            uint64_t v87 = 0;
            int32x4_t v88 = 0uLL;
            int32x4_t v259 = 0u;
            int32x4_t v260 = 0u;
            int16x8_t v257 = 0u;
            int32x4_t v258 = 0u;
            int32x4_t v265 = 0u;
            int32x4_t v266 = 0u;
            int32x4_t v267 = 0u;
            int32x4_t v268 = 0u;
          }
          uint64_t v95 = v85 + v87;
          unsigned int v96 = v69[2];
          if (v96 == 127)
          {
            int32x4_t v98 = *(int32x4_t *)v95;
            int32x4_t v31 = *(int32x4_t *)(v95 + 16);
            int32x4_t v99 = *(int32x4_t *)(v95 + 32);
            int32x4_t v100 = *(int32x4_t *)(v95 + 48);
            int32x4_t v101 = *(int32x4_t *)(v95 + 64);
            int32x4_t v102 = *(int32x4_t *)(v95 + 80);
            int32x4_t v103 = *(int32x4_t *)(v95 + 96);
            int32x4_t v104 = *(int32x4_t *)(v95 + 112);
            int16x8_t v245 = *(int16x8_t *)v95;
            int32x4_t v246 = v31;
            int32x4_t v247 = v101;
            int32x4_t v248 = v102;
            int32x4_t v253 = v99;
            int32x4_t v254 = v100;
            int32x4_t v255 = v103;
            int32x4_t v256 = v104;
            uint64_t v97 = 128;
          }
          else if (v96 == 3)
          {
            int32x4_t v98 = (int32x4_t)vld1q_dup_f32((const float *)v95);
            int16x8_t v245 = (int16x8_t)v98;
            int32x4_t v246 = v98;
            int32x4_t v247 = v98;
            int32x4_t v248 = v98;
            int32x4_t v253 = v98;
            int32x4_t v254 = v98;
            int32x4_t v255 = v98;
            int32x4_t v256 = v98;
            uint64_t v97 = 4;
          }
          else if (v69[2])
          {
            uint64_t v97 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v245, 128, v95, v96, v88, v31);
          }
          else
          {
            uint64_t v97 = 0;
            int32x4_t v98 = 0uLL;
            int32x4_t v247 = 0u;
            int32x4_t v248 = 0u;
            int16x8_t v245 = 0u;
            int32x4_t v246 = 0u;
            int32x4_t v253 = 0u;
            int32x4_t v254 = 0u;
            int32x4_t v255 = 0u;
            int32x4_t v256 = 0u;
          }
          uint64_t v105 = v95 + v97;
          unsigned int v106 = v69[3];
          if (v106 == 127)
          {
            int32x4_t v108 = *(int32x4_t *)v105;
            int32x4_t v31 = *(int32x4_t *)(v105 + 16);
            int32x4_t v109 = *(int32x4_t *)(v105 + 32);
            int32x4_t v110 = *(int32x4_t *)(v105 + 48);
            int32x4_t v111 = *(int32x4_t *)(v105 + 64);
            int32x4_t v112 = *(int32x4_t *)(v105 + 80);
            int32x4_t v113 = *(int32x4_t *)(v105 + 96);
            int32x4_t v114 = *(int32x4_t *)(v105 + 112);
            int16x8_t v261 = *(int16x8_t *)v105;
            int32x4_t v262 = v31;
            int32x4_t v263 = v111;
            int32x4_t v264 = v112;
            int32x4_t v269 = v109;
            int32x4_t v270 = v110;
            int32x4_t v271 = v113;
            int32x4_t v272 = v114;
            uint64_t v107 = 128;
          }
          else if (v106 == 3)
          {
            int32x4_t v108 = (int32x4_t)vld1q_dup_f32((const float *)v105);
            int16x8_t v261 = (int16x8_t)v108;
            int32x4_t v262 = v108;
            int32x4_t v263 = v108;
            int32x4_t v264 = v108;
            int32x4_t v269 = v108;
            int32x4_t v270 = v108;
            int32x4_t v271 = v108;
            int32x4_t v272 = v108;
            uint64_t v107 = 4;
          }
          else if (v69[3])
          {
            uint64_t v107 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v261, 128, v105, v106, v98, v31);
          }
          else
          {
            uint64_t v107 = 0;
            int32x4_t v108 = 0uLL;
            int32x4_t v263 = 0u;
            int32x4_t v264 = 0u;
            int16x8_t v261 = 0u;
            int32x4_t v262 = 0u;
            int32x4_t v269 = 0u;
            int32x4_t v270 = 0u;
            int32x4_t v271 = 0u;
            int32x4_t v272 = 0u;
          }
          uint64_t v115 = v105 + v107;
          unsigned int v116 = v69[4];
          if (v116 == 127)
          {
            int32x4_t v118 = *(int32x4_t *)v115;
            int32x4_t v31 = *(int32x4_t *)(v115 + 16);
            int32x4_t v119 = *(int32x4_t *)(v115 + 32);
            int32x4_t v120 = *(int32x4_t *)(v115 + 48);
            int32x4_t v121 = *(int32x4_t *)(v115 + 64);
            int32x4_t v122 = *(int32x4_t *)(v115 + 80);
            int32x4_t v123 = *(int32x4_t *)(v115 + 96);
            int32x4_t v124 = *(int32x4_t *)(v115 + 112);
            int16x8_t v273 = *(int16x8_t *)v115;
            int32x4_t v274 = v31;
            int32x4_t v275 = v121;
            int32x4_t v276 = v122;
            int32x4_t v281 = v119;
            int32x4_t v282 = v120;
            int32x4_t v283 = v123;
            int32x4_t v284 = v124;
            uint64_t v117 = 128;
          }
          else if (v116 == 3)
          {
            int32x4_t v118 = (int32x4_t)vld1q_dup_f32((const float *)v115);
            int16x8_t v273 = (int16x8_t)v118;
            int32x4_t v274 = v118;
            int32x4_t v275 = v118;
            int32x4_t v276 = v118;
            int32x4_t v281 = v118;
            int32x4_t v282 = v118;
            int32x4_t v283 = v118;
            int32x4_t v284 = v118;
            uint64_t v117 = 4;
          }
          else if (v69[4])
          {
            uint64_t v117 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v273, 128, v115, v116, v108, v31);
          }
          else
          {
            uint64_t v117 = 0;
            int32x4_t v118 = 0uLL;
            int32x4_t v275 = 0u;
            int32x4_t v276 = 0u;
            int16x8_t v273 = 0u;
            int32x4_t v274 = 0u;
            int32x4_t v281 = 0u;
            int32x4_t v282 = 0u;
            int32x4_t v283 = 0u;
            int32x4_t v284 = 0u;
          }
          uint64_t v125 = v115 + v117;
          unsigned int v126 = v69[5];
          if (v126 == 127)
          {
            int32x4_t v128 = *(int32x4_t *)v125;
            int32x4_t v31 = *(int32x4_t *)(v125 + 16);
            int32x4_t v129 = *(int32x4_t *)(v125 + 32);
            int32x4_t v130 = *(int32x4_t *)(v125 + 48);
            int32x4_t v131 = *(int32x4_t *)(v125 + 64);
            int32x4_t v132 = *(int32x4_t *)(v125 + 80);
            int32x4_t v133 = *(int32x4_t *)(v125 + 96);
            int32x4_t v134 = *(int32x4_t *)(v125 + 112);
            int16x8_t v289 = *(int16x8_t *)v125;
            int32x4_t v290 = v31;
            int32x4_t v291 = v131;
            int32x4_t v292 = v132;
            int32x4_t v297 = v129;
            int32x4_t v298 = v130;
            int32x4_t v299 = v133;
            int32x4_t v300 = v134;
            uint64_t v127 = 128;
          }
          else if (v126 == 3)
          {
            int32x4_t v128 = (int32x4_t)vld1q_dup_f32((const float *)v125);
            int16x8_t v289 = (int16x8_t)v128;
            int32x4_t v290 = v128;
            int32x4_t v291 = v128;
            int32x4_t v292 = v128;
            int32x4_t v297 = v128;
            int32x4_t v298 = v128;
            int32x4_t v299 = v128;
            int32x4_t v300 = v128;
            uint64_t v127 = 4;
          }
          else if (v69[5])
          {
            uint64_t v127 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v289, 128, v125, v126, v118, v31);
          }
          else
          {
            uint64_t v127 = 0;
            int32x4_t v128 = 0uLL;
            int32x4_t v291 = 0u;
            int32x4_t v292 = 0u;
            int16x8_t v289 = 0u;
            int32x4_t v290 = 0u;
            int32x4_t v297 = 0u;
            int32x4_t v298 = 0u;
            int32x4_t v299 = 0u;
            int32x4_t v300 = 0u;
          }
          uint64_t v135 = v125 + v127;
          unsigned int v136 = v69[6];
          if (v136 == 127)
          {
            int32x4_t v138 = *(int32x4_t *)v135;
            int32x4_t v31 = *(int32x4_t *)(v135 + 16);
            int32x4_t v139 = *(int32x4_t *)(v135 + 32);
            int32x4_t v140 = *(int32x4_t *)(v135 + 48);
            int32x4_t v141 = *(int32x4_t *)(v135 + 64);
            int32x4_t v142 = *(int32x4_t *)(v135 + 80);
            int32x4_t v143 = *(int32x4_t *)(v135 + 96);
            int32x4_t v144 = *(int32x4_t *)(v135 + 112);
            int16x8_t v277 = *(int16x8_t *)v135;
            int32x4_t v278 = v31;
            int32x4_t v279 = v141;
            int32x4_t v280 = v142;
            int32x4_t v285 = v139;
            int32x4_t v286 = v140;
            int32x4_t v287 = v143;
            int32x4_t v288 = v144;
            uint64_t v137 = 128;
          }
          else if (v136 == 3)
          {
            int32x4_t v138 = (int32x4_t)vld1q_dup_f32((const float *)v135);
            int16x8_t v277 = (int16x8_t)v138;
            int32x4_t v278 = v138;
            int32x4_t v279 = v138;
            int32x4_t v280 = v138;
            int32x4_t v285 = v138;
            int32x4_t v286 = v138;
            int32x4_t v287 = v138;
            int32x4_t v288 = v138;
            uint64_t v137 = 4;
          }
          else if (v69[6])
          {
            uint64_t v137 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v277, 128, v135, v136, v128, v31);
          }
          else
          {
            uint64_t v137 = 0;
            int32x4_t v138 = 0uLL;
            int32x4_t v279 = 0u;
            int32x4_t v280 = 0u;
            int16x8_t v277 = 0u;
            int32x4_t v278 = 0u;
            int32x4_t v285 = 0u;
            int32x4_t v286 = 0u;
            int32x4_t v287 = 0u;
            int32x4_t v288 = 0u;
          }
          uint64_t v145 = v135 + v137;
          unsigned int v146 = v69[7];
          if (v146 == 127)
          {
            float32x4_t v149 = *(float32x4_t *)(v145 + 16);
            float32x4_t v150 = *(float32x4_t *)(v145 + 32);
            float32x4_t v151 = *(float32x4_t *)(v145 + 48);
            float32x4_t v152 = *(float32x4_t *)(v145 + 64);
            float32x4_t v153 = *(float32x4_t *)(v145 + 80);
            float32x4_t v154 = *(float32x4_t *)(v145 + 96);
            float32x4_t v155 = *(float32x4_t *)(v145 + 112);
            int16x8_t v293 = *(int16x8_t *)v145;
            float32x4_t v294 = v149;
            float32x4_t v295 = v152;
            float32x4_t v296 = v153;
            float32x4_t v301 = v150;
            float32x4_t v302 = v151;
            float32x4_t v303 = v154;
            float32x4_t v304 = v155;
            uint64_t v147 = v236;
            if (!v236) {
              goto LABEL_185;
            }
          }
          else if (v146 == 3)
          {
            float32x4_t v148 = vld1q_dup_f32((const float *)v145);
            int16x8_t v293 = (int16x8_t)v148;
            float32x4_t v294 = v148;
            float32x4_t v295 = v148;
            float32x4_t v296 = v148;
            float32x4_t v301 = v148;
            float32x4_t v302 = v148;
            float32x4_t v303 = v148;
            float32x4_t v304 = v148;
            uint64_t v147 = v236;
            if (!v236) {
              goto LABEL_185;
            }
          }
          else if (v69[7])
          {
            AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v293, 128, v145, v146, v138, v31);
            uint64_t v147 = v236;
            if (!v236) {
              goto LABEL_185;
            }
          }
          else
          {
            float32x4_t v295 = 0u;
            float32x4_t v296 = 0u;
            int16x8_t v293 = 0u;
            float32x4_t v294 = 0u;
            float32x4_t v301 = 0u;
            float32x4_t v302 = 0u;
            float32x4_t v303 = 0u;
            float32x4_t v304 = 0u;
            uint64_t v147 = v236;
            if (!v236) {
              goto LABEL_185;
            }
          }
          if (v237)
          {
            uint64_t v156 = 0;
            unint64_t v157 = (unint64_t)v234 << 7;
            uint64_t v158 = 16 * v235;
            float32x4_t v159 = &v241.i8[v157 + v158];
            uint64_t v160 = v232;
            uint64_t v161 = v233;
            unint64_t v162 = 16 * v237;
            if (v162 <= 1) {
              unint64_t v163 = 1;
            }
            else {
              unint64_t v163 = 16 * v237;
            }
            unint64_t v164 = v157 + v158;
            float32x4_t v165 = &v241.i8[v157 + v158];
            if (v163) {
              BOOL v166 = (v163 - 1) >> 32 == 0;
            }
            else {
              BOOL v166 = 0;
            }
            char v167 = !v166;
            uint64_t v168 = v163 & 0xFFFFFFFE0;
            uint64_t v169 = v163 & 0xFFFFFFFF0;
            uint64_t v170 = &v242.i8[v164];
            uint64_t v171 = v232 + 1;
            unint64_t v172 = v159;
            uint64_t v173 = v232;
            do
            {
              unint64_t v174 = (char *)v160 + v161 * v156;
              unsigned int v175 = &v159[128 * v156];
              if ((unint64_t)(&v165[128 * v156] - v174) < 0x20) {
                char v176 = 1;
              }
              else {
                char v176 = v167;
              }
              if (v176)
              {
                int v177 = 0;
                goto LABEL_182;
              }
              if (v163 >= 0x20)
              {
                uint64_t v183 = v171;
                int v184 = v170;
                uint64_t v185 = v163 & 0xFFFFFFFE0;
                do
                {
                  long long v186 = *v183;
                  *((_OWORD *)v184 - 1) = *(v183 - 1);
                  *(_OWORD *)int v184 = v186;
                  v184 += 32;
                  v183 += 2;
                  v185 -= 32;
                }
                while (v185);
                if (v163 == v168) {
                  goto LABEL_165;
                }
                uint64_t v178 = v163 & 0xFFFFFFFE0;
                if ((v163 & 0x10) == 0)
                {
                  v174 += v168;
                  v175 += v168;
                  int v177 = v163 & 0xFFFFFFE0;
                  goto LABEL_182;
                }
              }
              else
              {
                uint64_t v178 = 0;
              }
              v175 += v169;
              unint64_t v179 = v178 - (v163 & 0xFFFFFFFF0);
              BOOL v180 = (uint64_t *)((char *)v173 + v178);
              unsigned int v181 = &v172[v178];
              do
              {
                uint64_t v182 = *v180++;
                *(void *)unsigned int v181 = v182;
                v181 += 8;
                v179 += 8;
              }
              while (v179);
              if (v163 == v169) {
                goto LABEL_165;
              }
              v174 += v169;
              int v177 = v163 & 0xFFFFFFF0;
LABEL_182:
              unsigned int v187 = v177 + 1;
              do
              {
                char v188 = *v174++;
                *v175++ = v188;
              }
              while (v162 > v187++);
LABEL_165:
              ++v156;
              v170 += 128;
              uint64_t v171 = (long long *)((char *)v171 + v161);
              uint64_t v173 = (_OWORD *)((char *)v173 + v161);
              v172 += 128;
            }
            while (v156 != v147);
          }
LABEL_185:
          AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock(&v241, 128, v230, v231, v238, v239);
LABEL_186:
          uint64_t result = v226;
          if (v227) {
            uint64_t result = memcpy(v226, v73, 0x400uLL);
          }
          BOOL v23 = v34++ == v215 >> 3;
          uint64_t v29 = v223;
        }
        while (!v23);
        BOOL v23 = v18++ == v208;
      }
      while (!v23);
    }
  }
  return result;
}

uint64_t AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10, uint64_t a11, char a12)
{
  uint64_t v12 = MEMORY[0x270FA5388](a1);
  unsigned int v14 = v13;
  unsigned int v16 = v15;
  unsigned int v18 = v17;
  unsigned int v20 = v19;
  uint64_t v152 = v21;
  uint64_t v153 = v22;
  uint64_t v139 = v23;
  uint64_t v24 = v12;
  uint64_t v182 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(v12, 0);
  unsigned int v156 = v14;
  unsigned int v141 = v14 + a10 - 1;
  uint64_t v157 = v24;
  if (*(void *)(v24 + 168)) {
    int v25 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v25 = 0;
  }
  unsigned int v26 = v20 - 1;
  unsigned int v27 = v18 - 1;
  unsigned int v28 = v14 >> 3;
  unsigned int v140 = v141 >> 3;
  BOOL v29 = (v25 & 0xD00) == 0 || v25 == 768;
  int v30 = v25 & 0xE00;
  int v32 = !v29 && v30 != 1024;
  int v161 = v32;
  uint64_t result = v24;
  if (*(unsigned char *)(v24 + 232))
  {
    unsigned int v34 = *(unsigned __int8 *)(v24 + 255);
    unsigned int v35 = *(unsigned __int8 *)(v24 + 254);
    char v36 = __clz(v26);
    if (1 << v34 >= v18 || v20 >> v35)
    {
      if (!(v18 >> v34) && 1 << v35 < v20)
      {
        if (v18 < 2) {
          unsigned int v39 = 0;
        }
        else {
          unsigned int v39 = __clz(~(-1 << -(char)__clz(v27))) - 32;
        }
        v35 += v34 + v39;
        unsigned int v34 = -v39;
      }
    }
    else
    {
      unsigned int v37 = 32 - __clz(~(-1 << -v36));
      unsigned int v38 = v35 + v34;
      if (v20 < 2) {
        unsigned int v37 = 0;
      }
      unsigned int v34 = v38 - v37;
      unsigned int v35 = v37;
    }
    if (v20 < 2)
    {
      if (v35) {
        goto LABEL_27;
      }
    }
    else if (32 - __clz(~(-1 << -v36)) < v35)
    {
LABEL_27:
      BOOL v151 = 0;
LABEL_32:
      unsigned int v148 = v35 - 3;
      unsigned int v145 = v34 - 3;
      int v41 = -1 << *(unsigned char *)(*(void *)(v24 + 208) + 48);
      unsigned int v138 = (((~v41 + v20) & v41) + ~(-1 << v35)) >> v35;
      goto LABEL_33;
    }
    if (v18 < 2) {
      unsigned int v40 = 0;
    }
    else {
      unsigned int v40 = 32 - __clz(~(-1 << -(char)__clz(v27)));
    }
    BOOL v151 = v40 >= v34;
    goto LABEL_32;
  }
  BOOL v151 = 0;
  unsigned int v138 = 0;
  unsigned int v145 = 0;
  unsigned int v148 = 0;
LABEL_33:
  if (v28 <= v140)
  {
    unsigned int v150 = v16 + a9 - 1;
    unsigned int v137 = v16 >> 3;
    if (v16 >> 3 <= v150 >> 3)
    {
      unsigned int v160 = v26 >> 3;
      unsigned int v136 = v27 >> 3;
      int v159 = (v26 & 7) + 1;
      int v135 = (v27 & 7) + 1;
      int v134 = ~(-1 << v145);
      uint32x2_t v42 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(v20, v18), (int32x2_t)0x700000007);
      int8x8_t v43 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v42, 3uLL))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x1000000010, v42));
      __int32 v146 = v43.i32[0] | v43.i32[1];
      int8x8_t v144 = v43;
      BOOL v142 = v43.i32[0] != 0;
      BOOL v143 = v43.i32[1] != 0;
      unsigned int v149 = v16;
      do
      {
        unsigned int v44 = (8 * v28) | 7;
        if (8 * v28 <= v156) {
          int v45 = v156;
        }
        else {
          int v45 = 8 * v28;
        }
        if (v141 < v44) {
          unsigned int v44 = v141;
        }
        int v147 = v45 - 8 * v28;
        int v155 = v44 - v45 + 1;
        unsigned int v46 = v137;
        if (v28 == v136) {
          unsigned int v47 = v135;
        }
        else {
          unsigned int v47 = 8;
        }
        int v48 = v28 & v134;
        uint64_t v154 = v139 + (v45 - v156) * a11;
        unsigned int v158 = v47;
        do
        {
          unsigned int v49 = 8 * v46;
          unsigned int v50 = 8 * (v46 + 1) - 1;
          if (8 * v46 <= v16) {
            int v51 = v16;
          }
          else {
            int v51 = 8 * v46;
          }
          if (v150 < v50) {
            unsigned int v50 = v150;
          }
          int v52 = v50 - v51 + 1;
          if (v46 == v160) {
            unsigned int v53 = v159;
          }
          else {
            unsigned int v53 = 8;
          }
          BOOL v54 = 1;
          if (8 * v28 >= v156 && v49 >= v16)
          {
            int v55 = v159;
            if (v46 != v160) {
              int v55 = 8;
            }
            BOOL v54 = v52 != v55 || v155 != v47;
          }
          if (v151)
          {
            if (v148 | v145)
            {
              int v57 = 0;
              uint64_t v58 = 0;
              BOOL v59 = v145 != 0;
              int v60 = 1;
              BOOL v62 = v148 != 0;
              unsigned int v61 = v145;
              unsigned int v63 = v148;
              do
              {
                --v63;
                if (v62) {
                  v58 |= (unint64_t)(v46 & ~(-1 << v148) & v60) << v57++;
                }
                else {
                  unsigned int v63 = 0;
                }
                --v61;
                if (v59) {
                  v58 |= (unint64_t)(v48 & v60) << v57++;
                }
                else {
                  unsigned int v61 = 0;
                }
                v60 *= 2;
                --v57;
                BOOL v59 = v61 != 0;
                BOOL v62 = v63 != 0;
              }
              while (v61 | v63);
            }
            else
            {
              uint64_t v58 = 0;
            }
            uint64_t v71 = *(void *)(result + 320) * ((v46 >> v148) + (v28 >> v145) * v138) + (v58 << 11);
          }
          else
          {
            if (v146)
            {
              int v64 = 0;
              uint64_t v65 = 0;
              int v66 = 1;
              BOOL v67 = v142;
              BOOL v68 = v143;
              __int32 v70 = v144.i32[0];
              __int32 v69 = v144.i32[1];
              do
              {
                --v69;
                if (v68) {
                  v65 |= (unint64_t)(v66 & v46) << v64++;
                }
                else {
                  __int32 v69 = 0;
                }
                --v70;
                if (v67) {
                  v65 |= (unint64_t)(v66 & v28) << v64++;
                }
                else {
                  __int32 v70 = 0;
                }
                v66 *= 2;
                --v64;
                BOOL v67 = v70 != 0;
                BOOL v68 = v69 != 0;
              }
              while (v70 | v69);
            }
            else
            {
              uint64_t v65 = 0;
            }
            uint64_t v71 = v65 << 11;
          }
          unsigned int v72 = *(_DWORD *)(result + 128) >> (*(unsigned char *)(result + 144) + a12);
          if (v72 <= 1) {
            unsigned int v72 = 1;
          }
          unsigned int v73 = v72 + 7;
          if (v73 < 0x10) {
            unsigned int v74 = 0;
          }
          else {
            unsigned int v74 = 32 - __clz(~(-1 << -(char)__clz((v73 >> 3) - 1)));
          }
          unsigned int v75 = *(_DWORD *)(result + 132) >> (*(unsigned char *)(result + 144) + a12);
          if (v75 <= 1) {
            unsigned int v75 = 1;
          }
          unsigned int v76 = v75 + 7;
          if (v76 < 0x10) {
            unsigned int v77 = 0;
          }
          else {
            unsigned int v77 = 32 - __clz(~(-1 << -(char)__clz((v76 >> 3) - 1)));
          }
          if (v77 | v74)
          {
            int v78 = 0;
            uint64_t v79 = 0;
            BOOL v80 = v74 != 0;
            BOOL v81 = v77 != 0;
            int v82 = 1;
            do
            {
              --v74;
              if (v80) {
                v79 |= (unint64_t)(v82 & v46) << v78++;
              }
              else {
                unsigned int v74 = 0;
              }
              --v77;
              if (v81) {
                v79 |= (unint64_t)(v82 & v28) << v78++;
              }
              else {
                unsigned int v77 = 0;
              }
              v82 *= 2;
              --v78;
              BOOL v81 = v77 != 0;
              BOOL v80 = v74 != 0;
            }
            while (v77 | v74);
          }
          else
          {
            uint64_t v79 = 0;
          }
          int v83 = v53 < 8 || v54;
          int32x4_t v84 = (char *)(v153 + 8 * v79);
          uint64_t v85 = v154 + 32 * (v51 - v16);
          unsigned int v86 = (void *)(v152 + v71);
          if (v47 < 8) {
            int v87 = 1;
          }
          else {
            int v87 = v83;
          }
          if (v161)
          {
            if (!v87)
            {
              int32x4_t v91 = __dst;
LABEL_123:
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock(v85, a11, (unint64_t)v91, v84, v53, v47);
              goto LABEL_124;
            }
            int32x4_t v88 = v86;
            int32x4_t v89 = v86;
            char v90 = v53;
            memcpy(__dst, v88, sizeof(__dst));
            unsigned int v49 = 8 * v46;
            int32x4_t v91 = __dst;
            LOBYTE(v53) = v90;
            unsigned int v86 = v89;
            int v48 = v28 & v134;
            LOBYTE(v47) = v158;
            uint64_t result = v157;
          }
          else
          {
            int32x4_t v91 = v86;
            if (!v87) {
              goto LABEL_123;
            }
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE17ELj4ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = result;
          unint64_t v163 = v91;
          unsigned __int8 v171 = v53;
          unsigned __int8 v172 = v47;
          unsigned int v167 = v147;
          unsigned int v168 = v51 - v49;
          unint64_t v164 = v84;
          uint64_t v165 = v85;
          uint64_t v166 = a11;
          unsigned int v169 = v155;
          unsigned int v170 = v52;
          if (!v54)
          {
            uint64_t v93 = (uint64_t)&v91[AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v174, 256, (uint64_t)v91, *v84, v43)];
            uint64_t v95 = v93
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v176, 256, v93, v84[1], v94);
            uint64_t v97 = v95
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v175, 256, v95, v84[2], v96);
            uint64_t v99 = v97
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v177, 256, v97, v84[3], v98);
            uint64_t v101 = v99
                 + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v178, 256, v99, v84[4], v100);
            uint64_t v103 = v101
                 + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v180, 256, v101, v84[5], v102);
            uint64_t v105 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v179, 256, v103, v84[6], v104);
            AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v181, 256, v103 + v105, v84[7], v106);
            uint64_t v107 = v169;
            unsigned int v16 = v149;
            unsigned int v92 = v46 + 1;
            if (!v169 || !v170)
            {
LABEL_151:
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((uint64_t)v174, 256, (unint64_t)v163, v164, v171, v172);
              if (!v161) {
                goto LABEL_47;
              }
              goto LABEL_152;
            }
            uint64_t v108 = 0;
            unint64_t v109 = (unint64_t)v167 << 8;
            uint64_t v110 = 32 * v168;
            int32x4_t v111 = (char *)v174 + v109 + v110;
            uint64_t v112 = v165;
            uint64_t v113 = v166;
            unint64_t v114 = 32 * v170;
            if (v114 <= 1) {
              uint64_t v115 = 1;
            }
            else {
              uint64_t v115 = 32 * v170;
            }
            unint64_t v116 = v109 + v110;
            uint64_t v117 = (char *)v174 + v109 + v110;
            if (v115) {
              BOOL v118 = (unint64_t)(v115 - 1) >> 32 == 0;
            }
            else {
              BOOL v118 = 0;
            }
            char v119 = !v118;
            uint64_t v120 = v115 & 0x1FFFFFFFE0;
            int32x4_t v121 = (char *)&v174[1] + v116;
            int32x4_t v122 = (long long *)(v165 + 16);
            while (2)
            {
              int32x4_t v123 = (char *)(v112 + v113 * v108);
              int32x4_t v124 = &v111[256 * v108];
              if ((unint64_t)(&v117[256 * v108] - v123) < 0x20) {
                char v125 = 1;
              }
              else {
                char v125 = v119;
              }
              if (v125)
              {
                int v126 = 0;
LABEL_148:
                unsigned int v131 = v126 + 1;
                do
                {
                  char v132 = *v123++;
                  *v124++ = v132;
                }
                while (v114 > v131++);
              }
              else
              {
                uint64_t v127 = v122;
                int32x4_t v128 = v121;
                uint64_t v129 = v115 & 0x1FFFFFFFE0;
                do
                {
                  long long v130 = *v127;
                  *(v128 - 1) = *(v127 - 1);
                  *int32x4_t v128 = v130;
                  v128 += 2;
                  v127 += 2;
                  v129 -= 32;
                }
                while (v129);
                if (v115 != v120)
                {
                  v123 += v120;
                  v124 += v120;
                  int v126 = v115 & 0xFFFFFFE0;
                  goto LABEL_148;
                }
              }
              ++v108;
              v121 += 256;
              int32x4_t v122 = (long long *)((char *)v122 + v113);
              if (v108 == v107) {
                goto LABEL_151;
              }
              continue;
            }
          }
          dispatch_sync(*(dispatch_queue_t *)(*(void *)(result + 8) + 7384), block);
LABEL_124:
          unsigned int v16 = v149;
          unsigned int v92 = v46 + 1;
          if (!v161) {
            goto LABEL_47;
          }
LABEL_152:
          memcpy(v86, v91, 0x800uLL);
LABEL_47:
          BOOL v29 = v46 == v150 >> 3;
          unsigned int v46 = v92;
          uint64_t result = v157;
          unsigned int v47 = v158;
        }
        while (!v29);
        BOOL v29 = v28++ == v140;
      }
      while (!v29);
    }
  }
  return result;
}

uint64_t AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10, uint64_t a11, char a12)
{
  uint64_t v12 = MEMORY[0x270FA5388](a1);
  unsigned int v14 = v13;
  unsigned int v16 = v15;
  unsigned int v18 = v17;
  unsigned int v20 = v19;
  uint64_t v152 = v21;
  uint64_t v153 = v22;
  uint64_t v139 = v23;
  uint64_t v24 = v12;
  uint64_t v182 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(v12, 0);
  unsigned int v156 = v14;
  unsigned int v141 = v14 + a10 - 1;
  uint64_t v157 = v24;
  if (*(void *)(v24 + 168)) {
    int v25 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v25 = 0;
  }
  unsigned int v26 = v20 - 1;
  unsigned int v27 = v18 - 1;
  unsigned int v28 = v14 >> 3;
  unsigned int v140 = v141 >> 3;
  BOOL v29 = (v25 & 0xD00) == 0 || v25 == 768;
  int v30 = v25 & 0xE00;
  int v32 = !v29 && v30 != 1024;
  int v161 = v32;
  uint64_t result = v24;
  if (*(unsigned char *)(v24 + 232))
  {
    unsigned int v34 = *(unsigned __int8 *)(v24 + 255);
    unsigned int v35 = *(unsigned __int8 *)(v24 + 254);
    char v36 = __clz(v26);
    if (1 << v34 >= v18 || v20 >> v35)
    {
      if (!(v18 >> v34) && 1 << v35 < v20)
      {
        if (v18 < 2) {
          unsigned int v39 = 0;
        }
        else {
          unsigned int v39 = __clz(~(-1 << -(char)__clz(v27))) - 32;
        }
        v35 += v34 + v39;
        unsigned int v34 = -v39;
      }
    }
    else
    {
      unsigned int v37 = 32 - __clz(~(-1 << -v36));
      unsigned int v38 = v35 + v34;
      if (v20 < 2) {
        unsigned int v37 = 0;
      }
      unsigned int v34 = v38 - v37;
      unsigned int v35 = v37;
    }
    if (v20 < 2)
    {
      if (v35) {
        goto LABEL_27;
      }
    }
    else if (32 - __clz(~(-1 << -v36)) < v35)
    {
LABEL_27:
      BOOL v151 = 0;
LABEL_32:
      unsigned int v148 = v35 - 3;
      unsigned int v145 = v34 - 3;
      int v41 = -1 << *(unsigned char *)(*(void *)(v24 + 208) + 48);
      unsigned int v138 = (((~v41 + v20) & v41) + ~(-1 << v35)) >> v35;
      goto LABEL_33;
    }
    if (v18 < 2) {
      unsigned int v40 = 0;
    }
    else {
      unsigned int v40 = 32 - __clz(~(-1 << -(char)__clz(v27)));
    }
    BOOL v151 = v40 >= v34;
    goto LABEL_32;
  }
  BOOL v151 = 0;
  unsigned int v138 = 0;
  unsigned int v145 = 0;
  unsigned int v148 = 0;
LABEL_33:
  if (v28 <= v140)
  {
    unsigned int v150 = v16 + a9 - 1;
    unsigned int v137 = v16 >> 3;
    if (v16 >> 3 <= v150 >> 3)
    {
      unsigned int v160 = v26 >> 3;
      unsigned int v136 = v27 >> 3;
      int v159 = (v26 & 7) + 1;
      int v135 = (v27 & 7) + 1;
      int v134 = ~(-1 << v145);
      uint32x2_t v42 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(v20, v18), (int32x2_t)0x700000007);
      int8x8_t v43 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v42, 3uLL))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x1000000010, v42));
      __int32 v146 = v43.i32[0] | v43.i32[1];
      int8x8_t v144 = v43;
      BOOL v142 = v43.i32[0] != 0;
      BOOL v143 = v43.i32[1] != 0;
      unsigned int v149 = v16;
      do
      {
        unsigned int v44 = (8 * v28) | 7;
        if (8 * v28 <= v156) {
          int v45 = v156;
        }
        else {
          int v45 = 8 * v28;
        }
        if (v141 < v44) {
          unsigned int v44 = v141;
        }
        int v147 = v45 - 8 * v28;
        int v155 = v44 - v45 + 1;
        unsigned int v46 = v137;
        if (v28 == v136) {
          unsigned int v47 = v135;
        }
        else {
          unsigned int v47 = 8;
        }
        int v48 = v28 & v134;
        uint64_t v154 = v139 + (v45 - v156) * a11;
        unsigned int v158 = v47;
        do
        {
          unsigned int v49 = 8 * v46;
          unsigned int v50 = 8 * (v46 + 1) - 1;
          if (8 * v46 <= v16) {
            int v51 = v16;
          }
          else {
            int v51 = 8 * v46;
          }
          if (v150 < v50) {
            unsigned int v50 = v150;
          }
          int v52 = v50 - v51 + 1;
          if (v46 == v160) {
            unsigned int v53 = v159;
          }
          else {
            unsigned int v53 = 8;
          }
          BOOL v54 = 1;
          if (8 * v28 >= v156 && v49 >= v16)
          {
            int v55 = v159;
            if (v46 != v160) {
              int v55 = 8;
            }
            BOOL v54 = v52 != v55 || v155 != v47;
          }
          if (v151)
          {
            if (v148 | v145)
            {
              int v57 = 0;
              uint64_t v58 = 0;
              BOOL v59 = v145 != 0;
              int v60 = 1;
              BOOL v62 = v148 != 0;
              unsigned int v61 = v145;
              unsigned int v63 = v148;
              do
              {
                --v63;
                if (v62) {
                  v58 |= (unint64_t)(v46 & ~(-1 << v148) & v60) << v57++;
                }
                else {
                  unsigned int v63 = 0;
                }
                --v61;
                if (v59) {
                  v58 |= (unint64_t)(v48 & v60) << v57++;
                }
                else {
                  unsigned int v61 = 0;
                }
                v60 *= 2;
                --v57;
                BOOL v59 = v61 != 0;
                BOOL v62 = v63 != 0;
              }
              while (v61 | v63);
            }
            else
            {
              uint64_t v58 = 0;
            }
            uint64_t v71 = *(void *)(result + 320) * ((v46 >> v148) + (v28 >> v145) * v138) + (v58 << 11);
          }
          else
          {
            if (v146)
            {
              int v64 = 0;
              uint64_t v65 = 0;
              int v66 = 1;
              BOOL v67 = v142;
              BOOL v68 = v143;
              __int32 v70 = v144.i32[0];
              __int32 v69 = v144.i32[1];
              do
              {
                --v69;
                if (v68) {
                  v65 |= (unint64_t)(v66 & v46) << v64++;
                }
                else {
                  __int32 v69 = 0;
                }
                --v70;
                if (v67) {
                  v65 |= (unint64_t)(v66 & v28) << v64++;
                }
                else {
                  __int32 v70 = 0;
                }
                v66 *= 2;
                --v64;
                BOOL v67 = v70 != 0;
                BOOL v68 = v69 != 0;
              }
              while (v70 | v69);
            }
            else
            {
              uint64_t v65 = 0;
            }
            uint64_t v71 = v65 << 11;
          }
          unsigned int v72 = *(_DWORD *)(result + 128) >> (*(unsigned char *)(result + 144) + a12);
          if (v72 <= 1) {
            unsigned int v72 = 1;
          }
          unsigned int v73 = v72 + 7;
          if (v73 < 0x10) {
            unsigned int v74 = 0;
          }
          else {
            unsigned int v74 = 32 - __clz(~(-1 << -(char)__clz((v73 >> 3) - 1)));
          }
          unsigned int v75 = *(_DWORD *)(result + 132) >> (*(unsigned char *)(result + 144) + a12);
          if (v75 <= 1) {
            unsigned int v75 = 1;
          }
          unsigned int v76 = v75 + 7;
          if (v76 < 0x10) {
            unsigned int v77 = 0;
          }
          else {
            unsigned int v77 = 32 - __clz(~(-1 << -(char)__clz((v76 >> 3) - 1)));
          }
          if (v77 | v74)
          {
            int v78 = 0;
            uint64_t v79 = 0;
            BOOL v80 = v74 != 0;
            BOOL v81 = v77 != 0;
            int v82 = 1;
            do
            {
              --v74;
              if (v80) {
                v79 |= (unint64_t)(v82 & v46) << v78++;
              }
              else {
                unsigned int v74 = 0;
              }
              --v77;
              if (v81) {
                v79 |= (unint64_t)(v82 & v28) << v78++;
              }
              else {
                unsigned int v77 = 0;
              }
              v82 *= 2;
              --v78;
              BOOL v81 = v77 != 0;
              BOOL v80 = v74 != 0;
            }
            while (v77 | v74);
          }
          else
          {
            uint64_t v79 = 0;
          }
          int v83 = v53 < 8 || v54;
          int32x4_t v84 = (char *)(v153 + 8 * v79);
          uint64_t v85 = v154 + 32 * (v51 - v16);
          unsigned int v86 = (void *)(v152 + v71);
          if (v47 < 8) {
            int v87 = 1;
          }
          else {
            int v87 = v83;
          }
          if (v161)
          {
            if (!v87)
            {
              int32x4_t v91 = __dst;
LABEL_123:
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock(v85, a11, v91, v84, v53, v47);
              goto LABEL_124;
            }
            int32x4_t v88 = v86;
            int32x4_t v89 = v86;
            char v90 = v53;
            memcpy(__dst, v88, sizeof(__dst));
            unsigned int v49 = 8 * v46;
            int32x4_t v91 = __dst;
            LOBYTE(v53) = v90;
            unsigned int v86 = v89;
            int v48 = v28 & v134;
            LOBYTE(v47) = v158;
            uint64_t result = v157;
          }
          else
          {
            int32x4_t v91 = v86;
            if (!v87) {
              goto LABEL_123;
            }
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE17ELj4ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = result;
          unint64_t v163 = v91;
          unsigned __int8 v171 = v53;
          unsigned __int8 v172 = v47;
          unsigned int v167 = v147;
          unsigned int v168 = v51 - v49;
          unint64_t v164 = v84;
          uint64_t v165 = v85;
          uint64_t v166 = a11;
          unsigned int v169 = v155;
          unsigned int v170 = v52;
          if (!v54)
          {
            uint64_t v93 = (uint64_t)v91
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v174, 256, (uint64_t)v91, *v84, v43);
            uint64_t v95 = v93
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v176, 256, v93, v84[1], v94);
            uint64_t v97 = v95
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v175, 256, v95, v84[2], v96);
            uint64_t v99 = v97
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v177, 256, v97, v84[3], v98);
            uint64_t v101 = v99
                 + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v178, 256, v99, v84[4], v100);
            uint64_t v103 = v101
                 + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v180, 256, v101, v84[5], v102);
            uint64_t v105 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v179, 256, v103, v84[6], v104);
            AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v181, 256, v103 + v105, v84[7], v106);
            uint64_t v107 = v169;
            unsigned int v16 = v149;
            unsigned int v92 = v46 + 1;
            if (!v169 || !v170)
            {
LABEL_151:
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((uint64_t)v174, 256, v163, v164, v171, v172);
              if (!v161) {
                goto LABEL_47;
              }
              goto LABEL_152;
            }
            uint64_t v108 = 0;
            unint64_t v109 = (unint64_t)v167 << 8;
            uint64_t v110 = 32 * v168;
            int32x4_t v111 = (char *)v174 + v109 + v110;
            uint64_t v112 = v165;
            uint64_t v113 = v166;
            unint64_t v114 = 32 * v170;
            if (v114 <= 1) {
              uint64_t v115 = 1;
            }
            else {
              uint64_t v115 = 32 * v170;
            }
            unint64_t v116 = v109 + v110;
            uint64_t v117 = (char *)v174 + v109 + v110;
            if (v115) {
              BOOL v118 = (unint64_t)(v115 - 1) >> 32 == 0;
            }
            else {
              BOOL v118 = 0;
            }
            char v119 = !v118;
            uint64_t v120 = v115 & 0x1FFFFFFFE0;
            int32x4_t v121 = (char *)&v174[1] + v116;
            int32x4_t v122 = (long long *)(v165 + 16);
            while (2)
            {
              int32x4_t v123 = (char *)(v112 + v113 * v108);
              int32x4_t v124 = &v111[256 * v108];
              if ((unint64_t)(&v117[256 * v108] - v123) < 0x20) {
                char v125 = 1;
              }
              else {
                char v125 = v119;
              }
              if (v125)
              {
                int v126 = 0;
LABEL_148:
                unsigned int v131 = v126 + 1;
                do
                {
                  char v132 = *v123++;
                  *v124++ = v132;
                }
                while (v114 > v131++);
              }
              else
              {
                uint64_t v127 = v122;
                int32x4_t v128 = v121;
                uint64_t v129 = v115 & 0x1FFFFFFFE0;
                do
                {
                  long long v130 = *v127;
                  *(v128 - 1) = *(v127 - 1);
                  *int32x4_t v128 = v130;
                  v128 += 2;
                  v127 += 2;
                  v129 -= 32;
                }
                while (v129);
                if (v115 != v120)
                {
                  v123 += v120;
                  v124 += v120;
                  int v126 = v115 & 0xFFFFFFE0;
                  goto LABEL_148;
                }
              }
              ++v108;
              v121 += 256;
              int32x4_t v122 = (long long *)((char *)v122 + v113);
              if (v108 == v107) {
                goto LABEL_151;
              }
              continue;
            }
          }
          dispatch_sync(*(dispatch_queue_t *)(*(void *)(result + 8) + 7384), block);
LABEL_124:
          unsigned int v16 = v149;
          unsigned int v92 = v46 + 1;
          if (!v161) {
            goto LABEL_47;
          }
LABEL_152:
          memcpy(v86, v91, 0x800uLL);
LABEL_47:
          BOOL v29 = v46 == v150 >> 3;
          unsigned int v46 = v92;
          uint64_t result = v157;
          unsigned int v47 = v158;
        }
        while (!v29);
        BOOL v29 = v28++ == v140;
      }
      while (!v29);
    }
  }
  return result;
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10, uint64_t a11, int a12)
{
  uint64_t v12 = MEMORY[0x270FA5388](a1);
  unsigned int v14 = v13;
  unsigned int v16 = v15;
  unsigned int v18 = v17;
  unsigned int v20 = v19;
  uint64_t v154 = v21;
  uint64_t v155 = v22;
  uint64_t v144 = v23;
  uint64_t v24 = v12;
  uint64_t v185 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(v12, 0);
  uint64_t v25 = v24;
  unsigned int v159 = v14;
  unsigned int v26 = v14 >> 3;
  unsigned int v143 = v14 + a10 - 1;
  unsigned int v145 = v143 >> 3;
  unsigned int v27 = *(unsigned __int8 *)(*(void *)(v24 + 208) + 88);
  unsigned int v28 = *(_DWORD *)(v24 + 112);
  uint64_t v160 = v25;
  if (*(void *)(v25 + 168))
  {
    __int16 CacheMode = IOSurfaceGetCacheMode();
    uint64_t v25 = v160;
    int v30 = CacheMode & 0xF00;
  }
  else
  {
    int v30 = 0;
  }
  BOOL v31 = (v30 & 0xD00) == 0 || v30 == 768;
  int v32 = v30 & 0xE00;
  int v34 = !v31 && v32 != 1024;
  int v164 = v34;
  BOOL isLevelTiled = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::isLevelTiled(v25, *(_DWORD *)(v25 + 144) + a12);
  uint64_t v36 = v160;
  BOOL v153 = isLevelTiled;
  if (v26 <= v145)
  {
    unsigned int v152 = v16 + a9 - 1;
    unsigned int v142 = v16 >> 3;
    if (v16 >> 3 <= v152 >> 3)
    {
      unsigned int v139 = v20 - 1;
      unsigned int v141 = (v18 - 1) >> 3;
      int v162 = ((v20 - 1) & 7) + 1;
      unsigned int v163 = (v20 - 1) >> 3;
      int v140 = ((v18 - 1) & 7) + 1;
      uint32x2_t v37 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(v20, v18), (int32x2_t)0x700000007);
      int8x8_t v38 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v37, 3uLL))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x1000000010, v37));
      __int32 v150 = v38.i32[0] | v38.i32[1];
      int8x8_t v149 = v38;
      BOOL v147 = v38.i32[0] != 0;
      BOOL v148 = v38.i32[1] != 0;
      unint64_t v138 = 8 * v28 * (unint64_t)v27;
      unsigned int v151 = v16;
      do
      {
        unsigned int v39 = (8 * v26) | 7;
        if (8 * v26 <= v159) {
          int v40 = v159;
        }
        else {
          int v40 = 8 * v26;
        }
        unsigned int v41 = v142;
        if (v143 < v39) {
          unsigned int v39 = v143;
        }
        int v146 = v40 - 8 * v26;
        int v157 = v39 - v40 + 1;
        unsigned int v158 = 8 * v26;
        if (v26 == v141) {
          unsigned int v42 = v140;
        }
        else {
          unsigned int v42 = 8;
        }
        uint64_t v156 = v144 + (v40 - v159) * a11;
        unsigned int v161 = v42;
        do
        {
          unsigned int v43 = 8 * v41;
          unsigned int v44 = 8 * (v41 + 1) - 1;
          if (8 * v41 <= v16) {
            int v45 = v16;
          }
          else {
            int v45 = 8 * v41;
          }
          if (v152 < v44) {
            unsigned int v44 = v152;
          }
          int v46 = v44 - v45 + 1;
          if (v41 == v163) {
            unsigned int v47 = v162;
          }
          else {
            unsigned int v47 = 8;
          }
          BOOL v48 = 1;
          if (v158 >= v159 && v43 >= v16)
          {
            int v49 = v162;
            if (v41 != v163) {
              int v49 = 8;
            }
            BOOL v48 = v46 != v49 || v157 != v42;
          }
          if (v153)
          {
            unsigned int v70 = 0;
            uint64_t v71 = v138 >> (*(unsigned char *)(v36 + 57) != 0);
            char v72 = 1;
            if (v71 > 127)
            {
              if (v71 > 511)
              {
                if (v71 == 512)
                {
                  char v72 = 0;
                  char v73 = 0;
                  unsigned int v70 = 16;
                  unsigned int v74 = 16;
                }
                else
                {
                  char v73 = 1;
                  unsigned int v74 = 0;
                  if (v71 == 1024)
                  {
                    char v72 = 0;
                    unsigned int v74 = 8;
                    unsigned int v70 = 16;
                  }
                }
              }
              else if (v71 == 128)
              {
                char v72 = 0;
                char v73 = 0;
                unsigned int v70 = 32;
                unsigned int v74 = 32;
              }
              else
              {
                char v73 = 1;
                unsigned int v74 = 0;
                if (v71 == 256)
                {
                  char v72 = 0;
                  char v73 = 0;
                  unsigned int v74 = 16;
                  unsigned int v70 = 32;
                }
              }
            }
            else
            {
              char v73 = 1;
              unsigned int v74 = 0;
              switch(v71)
              {
                case 4:
                  char v72 = 0;
                  char v73 = 0;
                  unsigned int v74 = 128;
                  unsigned int v70 = 256;
                  break;
                case 5:
                case 6:
                case 7:
                case 9:
                case 10:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 17:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                  break;
                case 8:
                  char v72 = 0;
                  char v73 = 0;
                  unsigned int v70 = 128;
                  unsigned int v74 = 128;
                  break;
                case 16:
                  char v72 = 0;
                  char v73 = 0;
                  unsigned int v74 = 64;
                  unsigned int v70 = 128;
                  break;
                case 32:
                  char v72 = 0;
                  char v73 = 0;
                  unsigned int v70 = 64;
                  unsigned int v74 = 64;
                  break;
                default:
                  if (v71 == 64)
                  {
                    char v72 = 0;
                    char v73 = 0;
                    unsigned int v74 = 32;
                    unsigned int v70 = 64;
                  }
                  break;
              }
            }
            unsigned int v127 = (v70 >> 3) - 1;
            if (v72) {
              unsigned int v128 = 0;
            }
            else {
              unsigned int v128 = 32 - __clz(~(-1 << -(char)__clz(v127)));
            }
            unsigned int v129 = (v74 >> 3) - 1;
            if (v73)
            {
              unsigned int v130 = 0;
              if (v128) {
                goto LABEL_143;
              }
            }
            else
            {
              unsigned int v130 = 32 - __clz(~(-1 << -(char)__clz(v129)));
              if (v130 | v128)
              {
LABEL_143:
                int v131 = 0;
                uint64_t v132 = 0;
                int v133 = v41 & v127;
                int v134 = v26 & v129;
                BOOL v135 = v128 != 0;
                BOOL v136 = v130 != 0;
                int v137 = 1;
                do
                {
                  --v128;
                  if (v135) {
                    v132 |= (unint64_t)(v137 & v133) << v131++;
                  }
                  else {
                    unsigned int v128 = 0;
                  }
                  --v130;
                  if (v136) {
                    v132 |= (unint64_t)(v137 & v134) << v131++;
                  }
                  else {
                    unsigned int v130 = 0;
                  }
                  v137 *= 2;
                  --v131;
                  BOOL v136 = v130 != 0;
                  BOOL v135 = v128 != 0;
                }
                while (v130 | v128);
                goto LABEL_155;
              }
            }
            uint64_t v132 = 0;
LABEL_155:
            unint64_t v58 = ((unint64_t)(v43 / v70 + v158 / v74 * ((v70 + v139) / v70)) << 14) + (v132 << 11);
            goto LABEL_59;
          }
          if (v150)
          {
            int v51 = 0;
            uint64_t v52 = 0;
            int v53 = 1;
            BOOL v54 = v147;
            BOOL v55 = v148;
            __int32 v57 = v149.i32[0];
            __int32 v56 = v149.i32[1];
            do
            {
              --v56;
              if (v55) {
                v52 |= (unint64_t)(v53 & v41) << v51++;
              }
              else {
                __int32 v56 = 0;
              }
              --v57;
              if (v54) {
                v52 |= (unint64_t)(v53 & v26) << v51++;
              }
              else {
                __int32 v57 = 0;
              }
              v53 *= 2;
              --v51;
              BOOL v54 = v57 != 0;
              BOOL v55 = v56 != 0;
            }
            while (v57 | v56);
          }
          else
          {
            uint64_t v52 = 0;
          }
          unint64_t v58 = v52 << 11;
LABEL_59:
          unsigned int v59 = *(_DWORD *)(v36 + 128) >> (*(unsigned char *)(v36 + 144) + a12);
          if (v59 <= 1) {
            unsigned int v59 = 1;
          }
          unsigned int v60 = v59 + 7;
          if (v60 < 0x10) {
            unsigned int v61 = 0;
          }
          else {
            unsigned int v61 = 32 - __clz(~(-1 << -(char)__clz((v60 >> 3) - 1)));
          }
          unsigned int v62 = *(_DWORD *)(v36 + 132) >> (*(unsigned char *)(v36 + 144) + a12);
          if (v62 <= 1) {
            unsigned int v62 = 1;
          }
          unsigned int v63 = v62 + 7;
          if (v63 < 0x10)
          {
            unsigned int v64 = 0;
            if (!v61)
            {
LABEL_81:
              uint64_t v66 = 0;
              goto LABEL_82;
            }
          }
          else
          {
            unsigned int v64 = 32 - __clz(~(-1 << -(char)__clz((v63 >> 3) - 1)));
            if (!(v64 | v61)) {
              goto LABEL_81;
            }
          }
          int v65 = 0;
          uint64_t v66 = 0;
          BOOL v67 = v61 != 0;
          BOOL v68 = v64 != 0;
          int v69 = 1;
          do
          {
            --v61;
            if (v67) {
              v66 |= (unint64_t)(v69 & v41) << v65++;
            }
            else {
              unsigned int v61 = 0;
            }
            --v64;
            if (v68) {
              v66 |= (unint64_t)(v69 & v26) << v65++;
            }
            else {
              unsigned int v64 = 0;
            }
            v69 *= 2;
            --v65;
            BOOL v68 = v64 != 0;
            BOOL v67 = v61 != 0;
          }
          while (v64 | v61);
LABEL_82:
          int v75 = v47 < 8 || v48;
          unsigned int v76 = (char *)(v155 + 8 * v66);
          uint64_t v77 = v156 + 32 * (v45 - v16);
          int v78 = (void *)(v154 + v58);
          if (v42 < 8) {
            int v79 = 1;
          }
          else {
            int v79 = v75;
          }
          if (v164)
          {
            if (!v79)
            {
              uint64_t v85 = __dst;
LABEL_95:
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock(v77, a11, (unint64_t)v85, v76, v47, v42);
              goto LABEL_96;
            }
            BOOL v80 = v78;
            char v81 = v47;
            int v82 = v78;
            int v83 = v46;
            BOOL v84 = v48;
            memcpy(__dst, v80, sizeof(__dst));
            BOOL v48 = v84;
            unsigned int v43 = 8 * v41;
            uint64_t v85 = __dst;
            int v46 = v83;
            int v78 = v82;
            LOBYTE(v47) = v81;
            LOBYTE(v42) = v161;
            uint64_t v36 = v160;
          }
          else
          {
            uint64_t v85 = v78;
            if (!v79) {
              goto LABEL_95;
            }
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE17ELj4ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = v36;
          uint64_t v166 = v85;
          unsigned __int8 v174 = v47;
          unsigned __int8 v175 = v42;
          unsigned int v170 = v146;
          unsigned int v171 = v45 - v43;
          unsigned int v167 = v76;
          uint64_t v168 = v77;
          uint64_t v169 = a11;
          unsigned int v172 = v157;
          unsigned int v173 = v46;
          if (!v48)
          {
            uint64_t v86 = (uint64_t)&v85[AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v177, 256, (uint64_t)v85, *v76, v38)];
            uint64_t v88 = v86
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v179, 256, v86, v76[1], v87);
            uint64_t v90 = v88
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v178, 256, v88, v76[2], v89);
            uint64_t v92 = v90
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v180, 256, v90, v76[3], v91);
            uint64_t v94 = v92
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v181, 256, v92, v76[4], v93);
            uint64_t v96 = v94
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v183, 256, v94, v76[5], v95);
            uint64_t v98 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v182, 256, v96, v76[6], v97);
            AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v184, 256, v96 + v98, v76[7], v99);
            uint64_t v100 = v172;
            unsigned int v16 = v151;
            if (!v172 || !v173)
            {
LABEL_123:
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((uint64_t)v177, 256, (unint64_t)v166, v167, v174, v175);
              if (!v164) {
                goto LABEL_27;
              }
              goto LABEL_124;
            }
            uint64_t v101 = 0;
            unint64_t v102 = (unint64_t)v170 << 8;
            uint64_t v103 = 32 * v171;
            int8x8_t v104 = (char *)v177 + v102 + v103;
            uint64_t v105 = v168;
            uint64_t v106 = v169;
            unint64_t v107 = 32 * v173;
            if (v107 <= 1) {
              uint64_t v108 = 1;
            }
            else {
              uint64_t v108 = 32 * v173;
            }
            unint64_t v109 = v102 + v103;
            uint64_t v110 = (char *)v177 + v102 + v103;
            if (v108) {
              BOOL v111 = (unint64_t)(v108 - 1) >> 32 == 0;
            }
            else {
              BOOL v111 = 0;
            }
            char v112 = !v111;
            uint64_t v113 = v108 & 0x1FFFFFFFE0;
            unint64_t v114 = (char *)&v177[1] + v109;
            uint64_t v115 = (long long *)(v168 + 16);
            while (2)
            {
              unint64_t v116 = (char *)(v105 + v106 * v101);
              uint64_t v117 = &v104[256 * v101];
              if ((unint64_t)(&v110[256 * v101] - v116) < 0x20) {
                char v118 = 1;
              }
              else {
                char v118 = v112;
              }
              if (v118)
              {
                int v119 = 0;
LABEL_120:
                unsigned int v124 = v119 + 1;
                do
                {
                  char v125 = *v116++;
                  *v117++ = v125;
                }
                while (v107 > v124++);
              }
              else
              {
                uint64_t v120 = v115;
                int32x4_t v121 = v114;
                uint64_t v122 = v108 & 0x1FFFFFFFE0;
                do
                {
                  long long v123 = *v120;
                  *(v121 - 1) = *(v120 - 1);
                  *int32x4_t v121 = v123;
                  v121 += 2;
                  v120 += 2;
                  v122 -= 32;
                }
                while (v122);
                if (v108 != v113)
                {
                  v116 += v113;
                  v117 += v113;
                  int v119 = v108 & 0xFFFFFFE0;
                  goto LABEL_120;
                }
              }
              ++v101;
              v114 += 256;
              uint64_t v115 = (long long *)((char *)v115 + v106);
              if (v101 == v100) {
                goto LABEL_123;
              }
              continue;
            }
          }
          dispatch_sync(*(dispatch_queue_t *)(*(void *)(v36 + 8) + 7384), block);
LABEL_96:
          unsigned int v16 = v151;
          if (!v164) {
            goto LABEL_27;
          }
LABEL_124:
          memcpy(v78, v85, 0x800uLL);
LABEL_27:
          BOOL v31 = v41++ == v152 >> 3;
          uint64_t v36 = v160;
          unsigned int v42 = v161;
        }
        while (!v31);
        BOOL v31 = v26++ == v145;
      }
      while (!v31);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10, uint64_t a11, int a12)
{
  uint64_t v12 = MEMORY[0x270FA5388](a1);
  unsigned int v14 = v13;
  unsigned int v16 = v15;
  unsigned int v18 = v17;
  unsigned int v20 = v19;
  uint64_t v154 = v21;
  uint64_t v155 = v22;
  uint64_t v144 = v23;
  uint64_t v24 = v12;
  uint64_t v185 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(v12, 0);
  uint64_t v25 = v24;
  unsigned int v159 = v14;
  unsigned int v26 = v14 >> 3;
  unsigned int v143 = v14 + a10 - 1;
  unsigned int v145 = v143 >> 3;
  unsigned int v27 = *(unsigned __int8 *)(*(void *)(v24 + 208) + 88);
  unsigned int v28 = *(_DWORD *)(v24 + 112);
  uint64_t v160 = v25;
  if (*(void *)(v25 + 168))
  {
    __int16 CacheMode = IOSurfaceGetCacheMode();
    uint64_t v25 = v160;
    int v30 = CacheMode & 0xF00;
  }
  else
  {
    int v30 = 0;
  }
  BOOL v31 = (v30 & 0xD00) == 0 || v30 == 768;
  int v32 = v30 & 0xE00;
  int v34 = !v31 && v32 != 1024;
  int v164 = v34;
  BOOL isLevelTiled = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::isLevelTiled(v25, *(_DWORD *)(v25 + 144) + a12);
  uint64_t v36 = v160;
  BOOL v153 = isLevelTiled;
  if (v26 <= v145)
  {
    unsigned int v152 = v16 + a9 - 1;
    unsigned int v142 = v16 >> 3;
    if (v16 >> 3 <= v152 >> 3)
    {
      unsigned int v139 = v20 - 1;
      unsigned int v141 = (v18 - 1) >> 3;
      int v162 = ((v20 - 1) & 7) + 1;
      unsigned int v163 = (v20 - 1) >> 3;
      int v140 = ((v18 - 1) & 7) + 1;
      uint32x2_t v37 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(v20, v18), (int32x2_t)0x700000007);
      int8x8_t v38 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v37, 3uLL))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x1000000010, v37));
      __int32 v150 = v38.i32[0] | v38.i32[1];
      int8x8_t v149 = v38;
      BOOL v147 = v38.i32[0] != 0;
      BOOL v148 = v38.i32[1] != 0;
      unint64_t v138 = 8 * v28 * (unint64_t)v27;
      unsigned int v151 = v16;
      do
      {
        unsigned int v39 = (8 * v26) | 7;
        if (8 * v26 <= v159) {
          int v40 = v159;
        }
        else {
          int v40 = 8 * v26;
        }
        unsigned int v41 = v142;
        if (v143 < v39) {
          unsigned int v39 = v143;
        }
        int v146 = v40 - 8 * v26;
        int v157 = v39 - v40 + 1;
        unsigned int v158 = 8 * v26;
        if (v26 == v141) {
          unsigned int v42 = v140;
        }
        else {
          unsigned int v42 = 8;
        }
        uint64_t v156 = v144 + (v40 - v159) * a11;
        unsigned int v161 = v42;
        do
        {
          unsigned int v43 = 8 * v41;
          unsigned int v44 = 8 * (v41 + 1) - 1;
          if (8 * v41 <= v16) {
            int v45 = v16;
          }
          else {
            int v45 = 8 * v41;
          }
          if (v152 < v44) {
            unsigned int v44 = v152;
          }
          int v46 = v44 - v45 + 1;
          if (v41 == v163) {
            unsigned int v47 = v162;
          }
          else {
            unsigned int v47 = 8;
          }
          BOOL v48 = 1;
          if (v158 >= v159 && v43 >= v16)
          {
            int v49 = v162;
            if (v41 != v163) {
              int v49 = 8;
            }
            BOOL v48 = v46 != v49 || v157 != v42;
          }
          if (v153)
          {
            unsigned int v70 = 0;
            uint64_t v71 = v138 >> (*(unsigned char *)(v36 + 57) != 0);
            char v72 = 1;
            if (v71 > 127)
            {
              if (v71 > 511)
              {
                if (v71 == 512)
                {
                  char v72 = 0;
                  char v73 = 0;
                  unsigned int v70 = 16;
                  unsigned int v74 = 16;
                }
                else
                {
                  char v73 = 1;
                  unsigned int v74 = 0;
                  if (v71 == 1024)
                  {
                    char v72 = 0;
                    unsigned int v74 = 8;
                    unsigned int v70 = 16;
                  }
                }
              }
              else if (v71 == 128)
              {
                char v72 = 0;
                char v73 = 0;
                unsigned int v70 = 32;
                unsigned int v74 = 32;
              }
              else
              {
                char v73 = 1;
                unsigned int v74 = 0;
                if (v71 == 256)
                {
                  char v72 = 0;
                  char v73 = 0;
                  unsigned int v74 = 16;
                  unsigned int v70 = 32;
                }
              }
            }
            else
            {
              char v73 = 1;
              unsigned int v74 = 0;
              switch(v71)
              {
                case 4:
                  char v72 = 0;
                  char v73 = 0;
                  unsigned int v74 = 128;
                  unsigned int v70 = 256;
                  break;
                case 5:
                case 6:
                case 7:
                case 9:
                case 10:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 17:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                  break;
                case 8:
                  char v72 = 0;
                  char v73 = 0;
                  unsigned int v70 = 128;
                  unsigned int v74 = 128;
                  break;
                case 16:
                  char v72 = 0;
                  char v73 = 0;
                  unsigned int v74 = 64;
                  unsigned int v70 = 128;
                  break;
                case 32:
                  char v72 = 0;
                  char v73 = 0;
                  unsigned int v70 = 64;
                  unsigned int v74 = 64;
                  break;
                default:
                  if (v71 == 64)
                  {
                    char v72 = 0;
                    char v73 = 0;
                    unsigned int v74 = 32;
                    unsigned int v70 = 64;
                  }
                  break;
              }
            }
            unsigned int v127 = (v70 >> 3) - 1;
            if (v72) {
              unsigned int v128 = 0;
            }
            else {
              unsigned int v128 = 32 - __clz(~(-1 << -(char)__clz(v127)));
            }
            unsigned int v129 = (v74 >> 3) - 1;
            if (v73)
            {
              unsigned int v130 = 0;
              if (v128) {
                goto LABEL_143;
              }
            }
            else
            {
              unsigned int v130 = 32 - __clz(~(-1 << -(char)__clz(v129)));
              if (v130 | v128)
              {
LABEL_143:
                int v131 = 0;
                uint64_t v132 = 0;
                int v133 = v41 & v127;
                int v134 = v26 & v129;
                BOOL v135 = v128 != 0;
                BOOL v136 = v130 != 0;
                int v137 = 1;
                do
                {
                  --v128;
                  if (v135) {
                    v132 |= (unint64_t)(v137 & v133) << v131++;
                  }
                  else {
                    unsigned int v128 = 0;
                  }
                  --v130;
                  if (v136) {
                    v132 |= (unint64_t)(v137 & v134) << v131++;
                  }
                  else {
                    unsigned int v130 = 0;
                  }
                  v137 *= 2;
                  --v131;
                  BOOL v136 = v130 != 0;
                  BOOL v135 = v128 != 0;
                }
                while (v130 | v128);
                goto LABEL_155;
              }
            }
            uint64_t v132 = 0;
LABEL_155:
            unint64_t v58 = ((unint64_t)(v43 / v70 + v158 / v74 * ((v70 + v139) / v70)) << 14) + (v132 << 11);
            goto LABEL_59;
          }
          if (v150)
          {
            int v51 = 0;
            uint64_t v52 = 0;
            int v53 = 1;
            BOOL v54 = v147;
            BOOL v55 = v148;
            __int32 v57 = v149.i32[0];
            __int32 v56 = v149.i32[1];
            do
            {
              --v56;
              if (v55) {
                v52 |= (unint64_t)(v53 & v41) << v51++;
              }
              else {
                __int32 v56 = 0;
              }
              --v57;
              if (v54) {
                v52 |= (unint64_t)(v53 & v26) << v51++;
              }
              else {
                __int32 v57 = 0;
              }
              v53 *= 2;
              --v51;
              BOOL v54 = v57 != 0;
              BOOL v55 = v56 != 0;
            }
            while (v57 | v56);
          }
          else
          {
            uint64_t v52 = 0;
          }
          unint64_t v58 = v52 << 11;
LABEL_59:
          unsigned int v59 = *(_DWORD *)(v36 + 128) >> (*(unsigned char *)(v36 + 144) + a12);
          if (v59 <= 1) {
            unsigned int v59 = 1;
          }
          unsigned int v60 = v59 + 7;
          if (v60 < 0x10) {
            unsigned int v61 = 0;
          }
          else {
            unsigned int v61 = 32 - __clz(~(-1 << -(char)__clz((v60 >> 3) - 1)));
          }
          unsigned int v62 = *(_DWORD *)(v36 + 132) >> (*(unsigned char *)(v36 + 144) + a12);
          if (v62 <= 1) {
            unsigned int v62 = 1;
          }
          unsigned int v63 = v62 + 7;
          if (v63 < 0x10)
          {
            unsigned int v64 = 0;
            if (!v61)
            {
LABEL_81:
              uint64_t v66 = 0;
              goto LABEL_82;
            }
          }
          else
          {
            unsigned int v64 = 32 - __clz(~(-1 << -(char)__clz((v63 >> 3) - 1)));
            if (!(v64 | v61)) {
              goto LABEL_81;
            }
          }
          int v65 = 0;
          uint64_t v66 = 0;
          BOOL v67 = v61 != 0;
          BOOL v68 = v64 != 0;
          int v69 = 1;
          do
          {
            --v61;
            if (v67) {
              v66 |= (unint64_t)(v69 & v41) << v65++;
            }
            else {
              unsigned int v61 = 0;
            }
            --v64;
            if (v68) {
              v66 |= (unint64_t)(v69 & v26) << v65++;
            }
            else {
              unsigned int v64 = 0;
            }
            v69 *= 2;
            --v65;
            BOOL v68 = v64 != 0;
            BOOL v67 = v61 != 0;
          }
          while (v64 | v61);
LABEL_82:
          int v75 = v47 < 8 || v48;
          unsigned int v76 = (char *)(v155 + 8 * v66);
          uint64_t v77 = v156 + 32 * (v45 - v16);
          int v78 = (void *)(v154 + v58);
          if (v42 < 8) {
            int v79 = 1;
          }
          else {
            int v79 = v75;
          }
          if (v164)
          {
            if (!v79)
            {
              uint64_t v85 = __dst;
LABEL_95:
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock(v77, a11, v85, v76, v47, v42);
              goto LABEL_96;
            }
            BOOL v80 = v78;
            char v81 = v47;
            int v82 = v78;
            int v83 = v46;
            BOOL v84 = v48;
            memcpy(__dst, v80, sizeof(__dst));
            BOOL v48 = v84;
            unsigned int v43 = 8 * v41;
            uint64_t v85 = __dst;
            int v46 = v83;
            int v78 = v82;
            LOBYTE(v47) = v81;
            LOBYTE(v42) = v161;
            uint64_t v36 = v160;
          }
          else
          {
            uint64_t v85 = v78;
            if (!v79) {
              goto LABEL_95;
            }
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE17ELj4ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = v36;
          uint64_t v166 = v85;
          unsigned __int8 v174 = v47;
          unsigned __int8 v175 = v42;
          unsigned int v170 = v146;
          unsigned int v171 = v45 - v43;
          unsigned int v167 = v76;
          uint64_t v168 = v77;
          uint64_t v169 = a11;
          unsigned int v172 = v157;
          unsigned int v173 = v46;
          if (!v48)
          {
            uint64_t v86 = (uint64_t)v85
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v177, 256, (uint64_t)v85, *v76, v38);
            uint64_t v88 = v86
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v179, 256, v86, v76[1], v87);
            uint64_t v90 = v88
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v178, 256, v88, v76[2], v89);
            uint64_t v92 = v90
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v180, 256, v90, v76[3], v91);
            uint64_t v94 = v92
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v181, 256, v92, v76[4], v93);
            uint64_t v96 = v94
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v183, 256, v94, v76[5], v95);
            uint64_t v98 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v182, 256, v96, v76[6], v97);
            AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v184, 256, v96 + v98, v76[7], v99);
            uint64_t v100 = v172;
            unsigned int v16 = v151;
            if (!v172 || !v173)
            {
LABEL_123:
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((uint64_t)v177, 256, v166, v167, v174, v175);
              if (!v164) {
                goto LABEL_27;
              }
              goto LABEL_124;
            }
            uint64_t v101 = 0;
            unint64_t v102 = (unint64_t)v170 << 8;
            uint64_t v103 = 32 * v171;
            int8x8_t v104 = (char *)v177 + v102 + v103;
            uint64_t v105 = v168;
            uint64_t v106 = v169;
            unint64_t v107 = 32 * v173;
            if (v107 <= 1) {
              uint64_t v108 = 1;
            }
            else {
              uint64_t v108 = 32 * v173;
            }
            unint64_t v109 = v102 + v103;
            uint64_t v110 = (char *)v177 + v102 + v103;
            if (v108) {
              BOOL v111 = (unint64_t)(v108 - 1) >> 32 == 0;
            }
            else {
              BOOL v111 = 0;
            }
            char v112 = !v111;
            uint64_t v113 = v108 & 0x1FFFFFFFE0;
            unint64_t v114 = (char *)&v177[1] + v109;
            uint64_t v115 = (long long *)(v168 + 16);
            while (2)
            {
              unint64_t v116 = (char *)(v105 + v106 * v101);
              uint64_t v117 = &v104[256 * v101];
              if ((unint64_t)(&v110[256 * v101] - v116) < 0x20) {
                char v118 = 1;
              }
              else {
                char v118 = v112;
              }
              if (v118)
              {
                int v119 = 0;
LABEL_120:
                unsigned int v124 = v119 + 1;
                do
                {
                  char v125 = *v116++;
                  *v117++ = v125;
                }
                while (v107 > v124++);
              }
              else
              {
                uint64_t v120 = v115;
                int32x4_t v121 = v114;
                uint64_t v122 = v108 & 0x1FFFFFFFE0;
                do
                {
                  long long v123 = *v120;
                  *(v121 - 1) = *(v120 - 1);
                  *int32x4_t v121 = v123;
                  v121 += 2;
                  v120 += 2;
                  v122 -= 32;
                }
                while (v122);
                if (v108 != v113)
                {
                  v116 += v113;
                  v117 += v113;
                  int v119 = v108 & 0xFFFFFFE0;
                  goto LABEL_120;
                }
              }
              ++v101;
              v114 += 256;
              uint64_t v115 = (long long *)((char *)v115 + v106);
              if (v101 == v100) {
                goto LABEL_123;
              }
              continue;
            }
          }
          dispatch_sync(*(dispatch_queue_t *)(*(void *)(v36 + 8) + 7384), block);
LABEL_96:
          unsigned int v16 = v151;
          if (!v164) {
            goto LABEL_27;
          }
LABEL_124:
          memcpy(v78, v85, 0x800uLL);
LABEL_27:
          BOOL v31 = v41++ == v152 >> 3;
          uint64_t v36 = v160;
          unsigned int v42 = v161;
        }
        while (!v31);
        BOOL v31 = v26++ == v145;
      }
      while (!v31);
    }
  }
}

uint64_t AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, char a12)
{
  uint64_t v233 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v181 = a8;
  unsigned int v166 = a8 + a10 - 1;
  uint64_t v182 = a1;
  if (*(void *)(a1 + 168)) {
    int v17 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v17 = 0;
  }
  unsigned int v18 = a5 - 1;
  unsigned int v19 = a6 - 1;
  unsigned int v20 = a8 >> 3;
  unsigned int v165 = v166 >> 3;
  BOOL v21 = (v17 & 0xD00) == 0 || v17 == 768;
  int v22 = v17 & 0xE00;
  int v24 = !v21 && v22 != 1024;
  int v187 = v24;
  uint64_t result = a1;
  if (*(unsigned char *)(a1 + 232))
  {
    unsigned int v26 = *(unsigned __int8 *)(a1 + 255);
    unsigned int v27 = *(unsigned __int8 *)(a1 + 254);
    char v28 = __clz(v18);
    if (1 << v26 >= a6 || a5 >> v27)
    {
      if (!(a6 >> v26) && 1 << v27 < a5)
      {
        if (a6 < 2) {
          unsigned int v31 = 0;
        }
        else {
          unsigned int v31 = __clz(~(-1 << -(char)__clz(v19))) - 32;
        }
        v27 += v26 + v31;
        unsigned int v26 = -v31;
      }
    }
    else
    {
      unsigned int v29 = 32 - __clz(~(-1 << -v28));
      unsigned int v30 = v27 + v26;
      if (a5 < 2) {
        unsigned int v29 = 0;
      }
      unsigned int v26 = v30 - v29;
      unsigned int v27 = v29;
    }
    if (a5 < 2)
    {
      if (v27) {
        goto LABEL_27;
      }
    }
    else if (32 - __clz(~(-1 << -v28)) < v27)
    {
LABEL_27:
      BOOL v176 = 0;
LABEL_32:
      unsigned int v173 = v27 - 3;
      unsigned int v170 = v26 - 3;
      int v33 = -1 << *(unsigned char *)(*(void *)(a1 + 208) + 48);
      unsigned int v163 = (((~v33 + a5) & v33) + ~(-1 << v27)) >> v27;
      goto LABEL_33;
    }
    if (a6 < 2) {
      unsigned int v32 = 0;
    }
    else {
      unsigned int v32 = 32 - __clz(~(-1 << -(char)__clz(v19)));
    }
    BOOL v176 = v32 >= v26;
    goto LABEL_32;
  }
  BOOL v176 = 0;
  unsigned int v163 = 0;
  unsigned int v170 = 0;
  unsigned int v173 = 0;
LABEL_33:
  if (v20 <= v165)
  {
    unsigned int v175 = a7 + a9 - 1;
    unsigned int v162 = a7 >> 3;
    if (a7 >> 3 <= v175 >> 3)
    {
      unsigned int v184 = v18 >> 3;
      unsigned int v161 = v19 >> 3;
      int v183 = (v18 & 7) + 1;
      int v160 = (v19 & 7) + 1;
      uint32x2_t v34 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0x700000007);
      *(int32x2_t *)v35.i8 = vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v34, 3uLL)))))));
      v36.i64[0] = 0x1000000010;
      int8x8_t v37 = vbic_s8(*(int8x8_t *)v35.i8, (int8x8_t)vcgt_u32((uint32x2_t)0x1000000010, v34));
      __int32 v171 = v37.i32[0] | v37.i32[1];
      int8x8_t v169 = v37;
      BOOL v167 = v37.i32[0] != 0;
      BOOL v168 = v37.i32[1] != 0;
      unsigned int v174 = a7;
      do
      {
        unsigned int v38 = (8 * v20) | 7;
        if (8 * v20 <= v181) {
          int v39 = v181;
        }
        else {
          int v39 = 8 * v20;
        }
        if (v166 < v38) {
          unsigned int v38 = v166;
        }
        int v172 = v39 - 8 * v20;
        int v180 = v38 - v39 + 1;
        unsigned int v40 = v162;
        int v41 = v160;
        if (v20 != v161) {
          int v41 = 8;
        }
        unsigned int v188 = v41;
        uint64_t v179 = a3 + (v39 - v181) * a11;
        do
        {
          unsigned int v42 = 8 * v40;
          unsigned int v43 = 8 * (v40 + 1) - 1;
          if (8 * v40 <= a7) {
            int v44 = a7;
          }
          else {
            int v44 = 8 * v40;
          }
          if (v175 < v43) {
            unsigned int v43 = v175;
          }
          int v45 = v43 - v44 + 1;
          if (v40 == v184) {
            unsigned int v46 = v183;
          }
          else {
            unsigned int v46 = 8;
          }
          BOOL v47 = 1;
          if (8 * v20 >= v181 && v42 >= a7)
          {
            int v48 = v183;
            if (v40 != v184) {
              int v48 = 8;
            }
            BOOL v47 = v45 != v48 || v180 != v188;
          }
          if (v176)
          {
            if (v173 | v170)
            {
              int v50 = 0;
              uint64_t v51 = 0;
              BOOL v52 = v170 != 0;
              int v53 = 1;
              BOOL v55 = v173 != 0;
              unsigned int v54 = v170;
              unsigned int v56 = v173;
              do
              {
                --v56;
                if (v55) {
                  v51 |= (unint64_t)(v40 & ~(-1 << v173) & v53) << v50++;
                }
                else {
                  unsigned int v56 = 0;
                }
                --v54;
                if (v52) {
                  v51 |= (unint64_t)(v20 & ~(-1 << v170) & v53) << v50++;
                }
                else {
                  unsigned int v54 = 0;
                }
                v53 *= 2;
                --v50;
                BOOL v52 = v54 != 0;
                BOOL v55 = v56 != 0;
              }
              while (v54 | v56);
            }
            else
            {
              uint64_t v51 = 0;
            }
            uint64_t v64 = *(void *)(result + 320) * ((v40 >> v173) + (v20 >> v170) * v163) + (v51 << 9);
          }
          else
          {
            if (v171)
            {
              int v57 = 0;
              uint64_t v58 = 0;
              int v59 = 1;
              BOOL v60 = v167;
              BOOL v61 = v168;
              __int32 v63 = v169.i32[0];
              __int32 v62 = v169.i32[1];
              do
              {
                --v62;
                if (v61) {
                  v58 |= (unint64_t)(v59 & v40) << v57++;
                }
                else {
                  __int32 v62 = 0;
                }
                --v63;
                if (v60) {
                  v58 |= (unint64_t)(v59 & v20) << v57++;
                }
                else {
                  __int32 v63 = 0;
                }
                v59 *= 2;
                --v57;
                BOOL v60 = v63 != 0;
                BOOL v61 = v62 != 0;
              }
              while (v63 | v62);
            }
            else
            {
              uint64_t v58 = 0;
            }
            uint64_t v64 = v58 << 9;
          }
          unsigned int v65 = *(_DWORD *)(result + 128) >> (*(unsigned char *)(result + 144) + a12);
          if (v65 <= 1) {
            unsigned int v65 = 1;
          }
          unsigned int v66 = v65 + 7;
          if (v66 < 0x10) {
            unsigned int v67 = 0;
          }
          else {
            unsigned int v67 = 32 - __clz(~(-1 << -(char)__clz((v66 >> 3) - 1)));
          }
          unsigned int v68 = *(_DWORD *)(result + 132) >> (*(unsigned char *)(result + 144) + a12);
          if (v68 <= 1) {
            unsigned int v68 = 1;
          }
          unsigned int v69 = v68 + 7;
          if (v69 < 0x10)
          {
            unsigned int v70 = 0;
            if (!v67)
            {
LABEL_109:
              uint64_t v72 = 0;
              goto LABEL_110;
            }
          }
          else
          {
            unsigned int v70 = 32 - __clz(~(-1 << -(char)__clz((v69 >> 3) - 1)));
            if (!(v70 | v67)) {
              goto LABEL_109;
            }
          }
          int v71 = 0;
          uint64_t v72 = 0;
          BOOL v73 = v67 != 0;
          BOOL v74 = v70 != 0;
          int v75 = 1;
          do
          {
            --v67;
            if (v73) {
              v72 |= (unint64_t)(v75 & v40) << v71++;
            }
            else {
              unsigned int v67 = 0;
            }
            --v70;
            if (v74) {
              v72 |= (unint64_t)(v75 & v20) << v71++;
            }
            else {
              unsigned int v70 = 0;
            }
            v75 *= 2;
            --v71;
            BOOL v74 = v70 != 0;
            BOOL v73 = v67 != 0;
          }
          while (v70 | v67);
LABEL_110:
          unsigned int v76 = v44 - a7;
          int v77 = v46 < 8 || v47;
          int v78 = (char *)(a4 + 8 * v72);
          uint64_t v79 = v179 + 8 * v76;
          BOOL v80 = (int8x16_t *)(a2 + v64);
          if (v188 < 8) {
            int v81 = 1;
          }
          else {
            int v81 = v77;
          }
          long long v186 = v80;
          if (v187)
          {
            if (!v81)
            {
              int v82 = (int8x16_t *)__dst;
LABEL_123:
              __src = v82;
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock(v79, a11, v82, v78, v46, v188);
LABEL_124:
              a7 = v174;
              unsigned int v83 = v40 + 1;
              goto LABEL_216;
            }
            memcpy(__dst, v80, sizeof(__dst));
            int v82 = (int8x16_t *)__dst;
            uint64_t result = v182;
          }
          else
          {
            int v82 = v80;
            if (!v81) {
              goto LABEL_123;
            }
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE4ELj4ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = result;
          unsigned int v190 = v82;
          __src = v82;
          unsigned __int8 v198 = v46;
          unsigned __int8 v199 = v188;
          unsigned int v194 = v172;
          unsigned int v195 = v44 - v42;
          unsigned int v191 = v78;
          uint64_t v192 = v79;
          uint64_t v193 = a11;
          unsigned int v196 = v180;
          unsigned int v197 = v45;
          if (v47)
          {
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(result + 8) + 7384), block);
            goto LABEL_124;
          }
          unsigned int v84 = *v78;
          if (v84 == 63)
          {
            int8x8_t v87 = (const __int16 *)v82;
            int16x8_t v86 = *(int16x8_t *)v82;
            int8x16_t v35 = v82[1];
            int8x16_t v36 = v82[2];
            int16x8_t v88 = (int16x8_t)v82[3];
            int8x16_t v201 = *v82;
            int16x8_t v202 = (int16x8_t)v36;
            int16x8_t v205 = (int16x8_t)v35;
            int16x8_t v206 = v88;
            uint64_t v85 = 64;
          }
          else if (v84 == 1)
          {
            int8x8_t v87 = (const __int16 *)v82;
            int16x8_t v86 = vld1q_dup_s16(v87);
            int8x16_t v201 = (int8x16_t)v86;
            int16x8_t v202 = v86;
            int16x8_t v205 = v86;
            int16x8_t v206 = v86;
            uint64_t v85 = 2;
          }
          else if (*v78)
          {
            int8x8_t v87 = (const __int16 *)v82;
            uint64_t v85 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v201, 64, (uint64_t)v82, v84, v37, *(double *)v35.i64, *(int8x8_t *)v36.i8);
          }
          else
          {
            uint64_t v85 = 0;
            v86.i64[0] = 0;
            int8x16_t v201 = 0u;
            int16x8_t v202 = 0u;
            int16x8_t v205 = 0u;
            int16x8_t v206 = 0u;
            int8x8_t v87 = (const __int16 *)v82;
          }
          uint64_t v89 = (uint64_t)v87 + v85;
          unsigned int v90 = v78[1];
          if (v90 == 63)
          {
            int8x16_t v92 = *(int8x16_t *)v89;
            int8x16_t v35 = *(int8x16_t *)(v89 + 16);
            int8x16_t v36 = *(int8x16_t *)(v89 + 32);
            int8x16_t v93 = *(int8x16_t *)(v89 + 48);
            int8x16_t v209 = *(int8x16_t *)v89;
            int8x16_t v210 = v36;
            int8x16_t v213 = v35;
            int8x16_t v214 = v93;
            uint64_t v91 = 64;
            unsigned int v83 = v40 + 1;
          }
          else
          {
            unsigned int v83 = v40 + 1;
            if (v90 == 1)
            {
              int8x16_t v92 = (int8x16_t)vld1q_dup_s16((const __int16 *)v89);
              int8x16_t v209 = v92;
              int8x16_t v210 = v92;
              int8x16_t v213 = v92;
              int8x16_t v214 = v92;
              uint64_t v91 = 2;
            }
            else if (v78[1])
            {
              uint64_t v91 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v209, 64, v89, v90, *(int8x8_t *)v86.i8, *(double *)v35.i64, *(int8x8_t *)v36.i8);
            }
            else
            {
              uint64_t v91 = 0;
              v92.i64[0] = 0;
              int8x16_t v209 = 0u;
              int8x16_t v210 = 0u;
              int8x16_t v213 = 0u;
              int8x16_t v214 = 0u;
            }
          }
          uint64_t v94 = v89 + v91;
          unsigned int v95 = v78[2];
          if (v95 == 63)
          {
            int8x16_t v97 = *(int8x16_t *)v94;
            int8x16_t v35 = *(int8x16_t *)(v94 + 16);
            int8x16_t v36 = *(int8x16_t *)(v94 + 32);
            int8x16_t v98 = *(int8x16_t *)(v94 + 48);
            int8x16_t v203 = *(int8x16_t *)v94;
            int8x16_t v204 = v36;
            int8x16_t v207 = v35;
            int8x16_t v208 = v98;
            uint64_t v96 = 64;
          }
          else if (v95 == 1)
          {
            int8x16_t v97 = (int8x16_t)vld1q_dup_s16((const __int16 *)v94);
            int8x16_t v203 = v97;
            int8x16_t v204 = v97;
            int8x16_t v207 = v97;
            int8x16_t v208 = v97;
            uint64_t v96 = 2;
          }
          else if (v78[2])
          {
            uint64_t v96 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v203, 64, v94, v95, *(int8x8_t *)v92.i8, *(double *)v35.i64, *(int8x8_t *)v36.i8);
          }
          else
          {
            uint64_t v96 = 0;
            v97.i64[0] = 0;
            int8x16_t v203 = 0u;
            int8x16_t v204 = 0u;
            int8x16_t v207 = 0u;
            int8x16_t v208 = 0u;
          }
          uint64_t v99 = v94 + v96;
          unsigned int v100 = v78[3];
          if (v100 == 63)
          {
            int8x16_t v102 = *(int8x16_t *)v99;
            int8x16_t v35 = *(int8x16_t *)(v99 + 16);
            int8x16_t v36 = *(int8x16_t *)(v99 + 32);
            int8x16_t v103 = *(int8x16_t *)(v99 + 48);
            int8x16_t v211 = *(int8x16_t *)v99;
            int8x16_t v212 = v36;
            int8x16_t v215 = v35;
            int8x16_t v216 = v103;
            uint64_t v101 = 64;
          }
          else if (v100 == 1)
          {
            int8x16_t v102 = (int8x16_t)vld1q_dup_s16((const __int16 *)v99);
            int8x16_t v211 = v102;
            int8x16_t v212 = v102;
            int8x16_t v215 = v102;
            int8x16_t v216 = v102;
            uint64_t v101 = 2;
          }
          else if (v78[3])
          {
            uint64_t v101 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v211, 64, v99, v100, *(int8x8_t *)v97.i8, *(double *)v35.i64, *(int8x8_t *)v36.i8);
          }
          else
          {
            uint64_t v101 = 0;
            v102.i64[0] = 0;
            int8x16_t v211 = 0u;
            int8x16_t v212 = 0u;
            int8x16_t v215 = 0u;
            int8x16_t v216 = 0u;
          }
          uint64_t v104 = v99 + v101;
          unsigned int v105 = v78[4];
          if (v105 == 63)
          {
            int8x16_t v107 = *(int8x16_t *)v104;
            int8x16_t v35 = *(int8x16_t *)(v104 + 16);
            int8x16_t v36 = *(int8x16_t *)(v104 + 32);
            int8x16_t v108 = *(int8x16_t *)(v104 + 48);
            int8x16_t v217 = *(int8x16_t *)v104;
            int8x16_t v218 = v36;
            int8x16_t v221 = v35;
            int8x16_t v222 = v108;
            uint64_t v106 = 64;
          }
          else if (v105 == 1)
          {
            int8x16_t v107 = (int8x16_t)vld1q_dup_s16((const __int16 *)v104);
            int8x16_t v217 = v107;
            int8x16_t v218 = v107;
            int8x16_t v221 = v107;
            int8x16_t v222 = v107;
            uint64_t v106 = 2;
          }
          else if (v78[4])
          {
            uint64_t v106 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v217, 64, v104, v105, *(int8x8_t *)v102.i8, *(double *)v35.i64, *(int8x8_t *)v36.i8);
          }
          else
          {
            uint64_t v106 = 0;
            v107.i64[0] = 0;
            int8x16_t v217 = 0u;
            int8x16_t v218 = 0u;
            int8x16_t v221 = 0u;
            int8x16_t v222 = 0u;
          }
          uint64_t v109 = v104 + v106;
          unsigned int v110 = v78[5];
          if (v110 == 63)
          {
            int8x16_t v112 = *(int8x16_t *)v109;
            int8x16_t v35 = *(int8x16_t *)(v109 + 16);
            int8x16_t v36 = *(int8x16_t *)(v109 + 32);
            int8x16_t v113 = *(int8x16_t *)(v109 + 48);
            int8x16_t v225 = *(int8x16_t *)v109;
            int8x16_t v226 = v36;
            int8x16_t v229 = v35;
            int8x16_t v230 = v113;
            uint64_t v111 = 64;
          }
          else if (v110 == 1)
          {
            int8x16_t v112 = (int8x16_t)vld1q_dup_s16((const __int16 *)v109);
            int8x16_t v225 = v112;
            int8x16_t v226 = v112;
            int8x16_t v229 = v112;
            int8x16_t v230 = v112;
            uint64_t v111 = 2;
          }
          else if (v78[5])
          {
            uint64_t v111 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v225, 64, v109, v110, *(int8x8_t *)v107.i8, *(double *)v35.i64, *(int8x8_t *)v36.i8);
          }
          else
          {
            uint64_t v111 = 0;
            v112.i64[0] = 0;
            int8x16_t v225 = 0u;
            int8x16_t v226 = 0u;
            int8x16_t v229 = 0u;
            int8x16_t v230 = 0u;
          }
          uint64_t v114 = v109 + v111;
          unsigned int v115 = v78[6];
          if (v115 == 63)
          {
            int8x16_t v117 = *(int8x16_t *)v114;
            int8x16_t v35 = *(int8x16_t *)(v114 + 16);
            int8x16_t v36 = *(int8x16_t *)(v114 + 32);
            int8x16_t v118 = *(int8x16_t *)(v114 + 48);
            int8x16_t v219 = *(int8x16_t *)v114;
            int8x16_t v220 = v36;
            int8x16_t v223 = v35;
            int8x16_t v224 = v118;
            uint64_t v116 = 64;
          }
          else if (v115 == 1)
          {
            int8x16_t v117 = (int8x16_t)vld1q_dup_s16((const __int16 *)v114);
            int8x16_t v219 = v117;
            int8x16_t v220 = v117;
            int8x16_t v223 = v117;
            int8x16_t v224 = v117;
            uint64_t v116 = 2;
          }
          else if (v78[6])
          {
            uint64_t v116 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v219, 64, v114, v115, *(int8x8_t *)v112.i8, *(double *)v35.i64, *(int8x8_t *)v36.i8);
          }
          else
          {
            uint64_t v116 = 0;
            v117.i64[0] = 0;
            int8x16_t v219 = 0u;
            int8x16_t v220 = 0u;
            int8x16_t v223 = 0u;
            int8x16_t v224 = 0u;
          }
          uint64_t v119 = v114 + v116;
          unsigned int v120 = v78[7];
          if (v120 == 63)
          {
            int16x8_t v123 = *(int16x8_t *)(v119 + 16);
            int16x8_t v124 = *(int16x8_t *)(v119 + 32);
            int16x8_t v125 = *(int16x8_t *)(v119 + 48);
            int8x16_t v227 = *(int8x16_t *)v119;
            int16x8_t v228 = v124;
            int16x8_t v231 = v123;
            int16x8_t v232 = v125;
            a7 = v174;
            uint64_t v121 = v196;
            if (!v196) {
              goto LABEL_215;
            }
          }
          else
          {
            a7 = v174;
            if (v120 == 1)
            {
              int16x8_t v122 = vld1q_dup_s16((const __int16 *)v119);
              int8x16_t v227 = (int8x16_t)v122;
              int16x8_t v228 = v122;
              int16x8_t v231 = v122;
              int16x8_t v232 = v122;
              uint64_t v121 = v196;
              if (!v196) {
                goto LABEL_215;
              }
            }
            else if (v120)
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v227, 64, v119, v120, *(int8x8_t *)v117.i8, *(double *)v35.i64, *(int8x8_t *)v36.i8);
              uint64_t v121 = v196;
              if (!v196) {
                goto LABEL_215;
              }
            }
            else
            {
              int8x16_t v227 = 0u;
              int16x8_t v228 = 0u;
              int16x8_t v231 = 0u;
              int16x8_t v232 = 0u;
              uint64_t v121 = v196;
              if (!v196) {
                goto LABEL_215;
              }
            }
          }
          if (v197)
          {
            uint64_t v126 = 0;
            unint64_t v127 = (unint64_t)v194 << 6;
            uint64_t v128 = 8 * v195;
            unsigned int v129 = &v201.i8[v127 + v128];
            uint64_t v130 = v192;
            uint64_t v131 = v193;
            unint64_t v132 = 8 * v197;
            if (v132 <= 1) {
              unint64_t v133 = 1;
            }
            else {
              unint64_t v133 = 8 * v197;
            }
            unint64_t v134 = v127 + v128;
            BOOL v135 = &v201.i8[v127 + v128];
            if (v133) {
              BOOL v136 = (v133 - 1) >> 32 == 0;
            }
            else {
              BOOL v136 = 0;
            }
            char v137 = !v136;
            uint64_t v138 = v133 & 0x7FFFFFFE0;
            uint64_t v139 = v133 & 0x7FFFFFFF8;
            int v140 = &v202.i8[v134];
            unsigned int v141 = (long long *)(v192 + 16);
            unsigned int v142 = v129;
            uint64_t v143 = v192;
            do
            {
              uint64_t v144 = (char *)(v130 + v131 * v126);
              unsigned int v145 = &v129[64 * v126];
              if ((unint64_t)(&v135[64 * v126] - v144) < 0x20) {
                char v146 = 1;
              }
              else {
                char v146 = v137;
              }
              if (v146)
              {
                int v147 = 0;
                goto LABEL_212;
              }
              if (v133 >= 0x20)
              {
                int8x8_t v149 = v141;
                __int32 v150 = v140;
                uint64_t v151 = v133 & 0x7FFFFFFE0;
                do
                {
                  long long v152 = *v149;
                  *((_OWORD *)v150 - 1) = *(v149 - 1);
                  *(_OWORD *)__int32 v150 = v152;
                  v150 += 32;
                  v149 += 2;
                  v151 -= 32;
                }
                while (v151);
                if (v133 == v138) {
                  goto LABEL_195;
                }
                uint64_t v148 = v133 & 0x7FFFFFFE0;
                if ((v133 & 0x18) == 0)
                {
                  v144 += v138;
                  v145 += v138;
                  int v147 = v133 & 0xFFFFFFE0;
                  goto LABEL_212;
                }
              }
              else
              {
                uint64_t v148 = 0;
              }
              v145 += v139;
              unint64_t v153 = v148 - (v133 & 0x7FFFFFFF8);
              uint64_t v154 = (uint64_t *)(v143 + v148);
              uint64_t v155 = &v142[v148];
              do
              {
                uint64_t v156 = *v154++;
                *(void *)uint64_t v155 = v156;
                v155 += 8;
                v153 += 8;
              }
              while (v153);
              if (v133 == v139) {
                goto LABEL_195;
              }
              v144 += v139;
              int v147 = v133 & 0xFFFFFFF8;
LABEL_212:
              unsigned int v157 = v147 + 1;
              do
              {
                char v158 = *v144++;
                *v145++ = v158;
              }
              while (v132 > v157++);
LABEL_195:
              ++v126;
              v140 += 64;
              unsigned int v141 = (long long *)((char *)v141 + v131);
              v143 += v131;
              v142 += 64;
            }
            while (v126 != v121);
          }
LABEL_215:
          AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((uint64_t)&v201, 64, v190, v191, v198, v199);
LABEL_216:
          if (v187) {
            memcpy(v186, __src, 0x200uLL);
          }
          BOOL v21 = v40 == v175 >> 3;
          unsigned int v40 = v83;
          uint64_t result = v182;
        }
        while (!v21);
        BOOL v21 = v20++ == v165;
      }
      while (!v21);
    }
  }
  return result;
}

uint64_t AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, char a12)
{
  uint64_t v258 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v208 = a8;
  unsigned int v193 = a8 + a10 - 1;
  uint64_t result = *(void *)(a1 + 168);
  if (result)
  {
    uint64_t result = IOSurfaceGetCacheMode();
    int v18 = result & 0xF00;
  }
  else
  {
    int v18 = 0;
  }
  unsigned int v19 = a5 - 1;
  unsigned int v20 = a6 - 1;
  unsigned int v21 = a8 >> 3;
  unsigned int v192 = v193 >> 3;
  BOOL v22 = (v18 & 0xD00) == 0 || v18 == 768;
  int v23 = v18 & 0xE00;
  int v25 = !v22 && v23 != 1024;
  int v212 = v25;
  uint64_t v26 = a1;
  if (*(unsigned char *)(a1 + 232))
  {
    unsigned int v27 = *(unsigned __int8 *)(a1 + 255);
    unsigned int v28 = *(unsigned __int8 *)(a1 + 254);
    char v29 = __clz(v19);
    if (1 << v27 >= a6 || a5 >> v28)
    {
      if (!(a6 >> v27) && 1 << v28 < a5)
      {
        if (a6 < 2) {
          unsigned int v32 = 0;
        }
        else {
          unsigned int v32 = __clz(~(-1 << -(char)__clz(v20))) - 32;
        }
        v28 += v27 + v32;
        unsigned int v27 = -v32;
      }
    }
    else
    {
      unsigned int v30 = 32 - __clz(~(-1 << -v29));
      unsigned int v31 = v28 + v27;
      if (a5 < 2) {
        unsigned int v30 = 0;
      }
      unsigned int v27 = v31 - v30;
      unsigned int v28 = v30;
    }
    if (a5 < 2)
    {
      if (v28) {
        goto LABEL_27;
      }
    }
    else if (32 - __clz(~(-1 << -v29)) < v28)
    {
LABEL_27:
      BOOL v203 = 0;
LABEL_32:
      unsigned int v200 = v28 - 3;
      unsigned int v197 = v27 - 3;
      int v34 = -1 << *(unsigned char *)(*(void *)(a1 + 208) + 48);
      unsigned int v190 = (((~v34 + a5) & v34) + ~(-1 << v28)) >> v28;
      goto LABEL_33;
    }
    if (a6 < 2) {
      unsigned int v33 = 0;
    }
    else {
      unsigned int v33 = 32 - __clz(~(-1 << -(char)__clz(v20)));
    }
    BOOL v203 = v33 >= v27;
    goto LABEL_32;
  }
  BOOL v203 = 0;
  unsigned int v190 = 0;
  unsigned int v197 = 0;
  unsigned int v200 = 0;
LABEL_33:
  if (v21 <= v192)
  {
    unsigned int v202 = a7 + a9 - 1;
    unsigned int v189 = a7 >> 3;
    if (a7 >> 3 <= v202 >> 3)
    {
      unsigned int v210 = v19 >> 3;
      unsigned int v188 = v20 >> 3;
      int v209 = (v19 & 7) + 1;
      int v187 = (v20 & 7) + 1;
      uint32x2_t v35 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0x700000007);
      *(int32x2_t *)v36.i8 = vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v35, 3uLL)))))));
      v37.i64[0] = 0x1000000010;
      *(int8x8_t *)v38.i8 = vbic_s8(*(int8x8_t *)v36.i8, (int8x8_t)vcgt_u32((uint32x2_t)0x1000000010, v35));
      __int32 v198 = v38.i32[0] | v38.i32[1];
      uint64_t v196 = v38.i64[0];
      BOOL v194 = v38.i32[0] != 0;
      BOOL v195 = v38.i32[1] != 0;
      unsigned int v201 = a7;
      do
      {
        unsigned int v39 = (8 * v21) | 7;
        if (8 * v21 <= v208) {
          int v40 = v208;
        }
        else {
          int v40 = 8 * v21;
        }
        if (v193 < v39) {
          unsigned int v39 = v193;
        }
        int v199 = v40 - 8 * v21;
        int v207 = v39 - v40 + 1;
        unsigned int v41 = v189;
        int v42 = v187;
        if (v21 != v188) {
          int v42 = 8;
        }
        unsigned int v213 = v42;
        uint64_t v206 = a3 + (v40 - v208) * a11;
        do
        {
          unsigned int v43 = 8 * v41;
          unsigned int v44 = 8 * (v41 + 1) - 1;
          if (8 * v41 <= a7) {
            int v45 = a7;
          }
          else {
            int v45 = 8 * v41;
          }
          if (v202 < v44) {
            unsigned int v44 = v202;
          }
          int v46 = v44 - v45 + 1;
          if (v41 == v210) {
            unsigned int v47 = v209;
          }
          else {
            unsigned int v47 = 8;
          }
          BOOL v48 = 1;
          if (8 * v21 >= v208 && v43 >= a7)
          {
            int v49 = v209;
            if (v41 != v210) {
              int v49 = 8;
            }
            BOOL v48 = v46 != v49 || v207 != v213;
          }
          if (v203)
          {
            if (v200 | v197)
            {
              int v51 = 0;
              uint64_t v52 = 0;
              BOOL v53 = v197 != 0;
              int v54 = 1;
              BOOL v56 = v200 != 0;
              unsigned int v55 = v197;
              unsigned int v57 = v200;
              do
              {
                --v57;
                if (v56) {
                  v52 |= (unint64_t)(v41 & ~(-1 << v200) & v54) << v51++;
                }
                else {
                  unsigned int v57 = 0;
                }
                --v55;
                if (v53) {
                  v52 |= (unint64_t)(v21 & ~(-1 << v197) & v54) << v51++;
                }
                else {
                  unsigned int v55 = 0;
                }
                v54 *= 2;
                --v51;
                BOOL v53 = v55 != 0;
                BOOL v56 = v57 != 0;
              }
              while (v55 | v57);
            }
            else
            {
              uint64_t v52 = 0;
            }
            uint64_t v65 = *(void *)(v26 + 320) * ((v41 >> v200) + (v21 >> v197) * v190) + (v52 << 9);
          }
          else
          {
            if (v198)
            {
              int v58 = 0;
              uint64_t v59 = 0;
              int v60 = 1;
              BOOL v61 = v194;
              BOOL v62 = v195;
              int v64 = v196;
              int v63 = HIDWORD(v196);
              do
              {
                --v63;
                if (v62) {
                  v59 |= (unint64_t)(v60 & v41) << v58++;
                }
                else {
                  int v63 = 0;
                }
                --v64;
                if (v61) {
                  v59 |= (unint64_t)(v60 & v21) << v58++;
                }
                else {
                  int v64 = 0;
                }
                v60 *= 2;
                --v58;
                BOOL v61 = v64 != 0;
                BOOL v62 = v63 != 0;
              }
              while (v64 | v63);
            }
            else
            {
              uint64_t v59 = 0;
            }
            uint64_t v65 = v59 << 9;
          }
          unsigned int v66 = *(_DWORD *)(v26 + 128) >> (*(unsigned char *)(v26 + 144) + a12);
          if (v66 <= 1) {
            unsigned int v66 = 1;
          }
          unsigned int v67 = v66 + 7;
          if (v67 < 0x10) {
            unsigned int v68 = 0;
          }
          else {
            unsigned int v68 = 32 - __clz(~(-1 << -(char)__clz((v67 >> 3) - 1)));
          }
          unsigned int v69 = *(_DWORD *)(v26 + 132) >> (*(unsigned char *)(v26 + 144) + a12);
          if (v69 <= 1) {
            unsigned int v69 = 1;
          }
          unsigned int v70 = v69 + 7;
          if (v70 < 0x10)
          {
            unsigned int v71 = 0;
            if (!v68)
            {
LABEL_109:
              uint64_t v73 = 0;
              goto LABEL_110;
            }
          }
          else
          {
            unsigned int v71 = 32 - __clz(~(-1 << -(char)__clz((v70 >> 3) - 1)));
            if (!(v71 | v68)) {
              goto LABEL_109;
            }
          }
          int v72 = 0;
          uint64_t v73 = 0;
          BOOL v74 = v68 != 0;
          BOOL v75 = v71 != 0;
          int v76 = 1;
          do
          {
            --v68;
            if (v74) {
              v73 |= (unint64_t)(v76 & v41) << v72++;
            }
            else {
              unsigned int v68 = 0;
            }
            --v71;
            if (v75) {
              v73 |= (unint64_t)(v76 & v21) << v72++;
            }
            else {
              unsigned int v71 = 0;
            }
            v76 *= 2;
            --v72;
            BOOL v75 = v71 != 0;
            BOOL v74 = v68 != 0;
          }
          while (v71 | v68);
LABEL_110:
          unsigned int v77 = v45 - a7;
          int v78 = v47 < 8 || v48;
          uint64_t v79 = (char *)(a4 + 8 * v73);
          BOOL v80 = (_OWORD *)(v206 + 8 * v77);
          int v81 = (int8x16_t *)(a2 + v65);
          if (v213 < 8) {
            int v82 = 1;
          }
          else {
            int v82 = v78;
          }
          int8x16_t v211 = v81;
          if (v212)
          {
            if (!v82)
            {
              unsigned int v83 = (int8x16_t *)__dst;
LABEL_123:
              uint64_t v85 = v83;
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock(v80, a11, v83, v79, v47, v213);
              goto LABEL_124;
            }
            memcpy(__dst, v81, sizeof(__dst));
            unsigned int v83 = (int8x16_t *)__dst;
            uint64_t v26 = a1;
          }
          else
          {
            unsigned int v83 = v81;
            if (!v82) {
              goto LABEL_123;
            }
          }
          block[0] = MEMORY[0x263EF8330];
          unsigned int v84 = v45 - v43;
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE4ELj4ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = v26;
          int8x16_t v215 = v83;
          uint64_t v85 = v83;
          unsigned __int8 v223 = v47;
          unsigned __int8 v224 = v213;
          unsigned int v219 = v199;
          unsigned int v220 = v84;
          int8x16_t v216 = v79;
          int8x16_t v217 = v80;
          uint64_t v218 = a11;
          unsigned int v221 = v207;
          unsigned int v222 = v46;
          if (v48)
          {
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(v26 + 8) + 7384), block);
LABEL_124:
            uint64_t v26 = a1;
            uint64_t result = (uint64_t)v211;
            a7 = v201;
            unsigned int v86 = v41 + 1;
            if (!v212) {
              goto LABEL_46;
            }
LABEL_267:
            uint64_t result = (uint64_t)memcpy((void *)result, v85, 0x200uLL);
            uint64_t v26 = a1;
            goto LABEL_46;
          }
          unsigned int v87 = *v79;
          if (v87 == 63)
          {
            unsigned int v90 = v83;
            int16x8_t v89 = *(int16x8_t *)v83;
            int8x16_t v36 = v83[1];
            int8x16_t v37 = v83[2];
            int16x8_t v91 = (int16x8_t)v83[3];
            int8x16_t v226 = *v83;
            int16x8_t v227 = (int16x8_t)v37;
            int16x8_t v230 = (int16x8_t)v36;
            int16x8_t v231 = v91;
            uint64_t v88 = 64;
          }
          else if (v87 == 1)
          {
            unsigned int v90 = v83;
            int16x8_t v89 = vld1q_dup_s16(v83->i16);
            int8x16_t v226 = (int8x16_t)v89;
            int16x8_t v227 = v89;
            int16x8_t v230 = v89;
            int16x8_t v231 = v89;
            uint64_t v88 = 2;
          }
          else if (*v79)
          {
            unsigned int v90 = v83;
            uint64_t v88 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v226, 64, (uint64_t)v83, v87, *(int8x8_t *)v38.i8, *(double *)v36.i64, *(int8x8_t *)v37.i8);
          }
          else
          {
            uint64_t v88 = 0;
            v89.i64[0] = 0;
            int8x16_t v226 = 0u;
            int16x8_t v227 = 0u;
            int16x8_t v230 = 0u;
            int16x8_t v231 = 0u;
            unsigned int v90 = v83;
          }
          uint64_t v92 = (uint64_t)v90->i64 + v88;
          unsigned int v93 = v79[1];
          if (v93 == 63)
          {
            int8x16_t v95 = *(int8x16_t *)v92;
            int8x16_t v36 = *(int8x16_t *)(v92 + 16);
            int8x16_t v37 = *(int8x16_t *)(v92 + 32);
            int8x16_t v96 = *(int8x16_t *)(v92 + 48);
            int8x16_t v234 = *(int8x16_t *)v92;
            int8x16_t v235 = v37;
            int8x16_t v238 = v36;
            int8x16_t v239 = v96;
            uint64_t v94 = 64;
          }
          else if (v93 == 1)
          {
            int8x16_t v95 = (int8x16_t)vld1q_dup_s16((const __int16 *)v92);
            int8x16_t v234 = v95;
            int8x16_t v235 = v95;
            int8x16_t v238 = v95;
            int8x16_t v239 = v95;
            uint64_t v94 = 2;
          }
          else if (v79[1])
          {
            uint64_t v94 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v234, 64, v92, v93, *(int8x8_t *)v89.i8, *(double *)v36.i64, *(int8x8_t *)v37.i8);
          }
          else
          {
            uint64_t v94 = 0;
            v95.i64[0] = 0;
            int8x16_t v234 = 0u;
            int8x16_t v235 = 0u;
            int8x16_t v238 = 0u;
            int8x16_t v239 = 0u;
          }
          uint64_t v97 = v92 + v94;
          unsigned int v98 = v79[2];
          if (v98 == 63)
          {
            int8x16_t v100 = *(int8x16_t *)v97;
            int8x16_t v36 = *(int8x16_t *)(v97 + 16);
            int8x16_t v37 = *(int8x16_t *)(v97 + 32);
            int8x16_t v101 = *(int8x16_t *)(v97 + 48);
            int8x16_t v228 = *(int8x16_t *)v97;
            int8x16_t v229 = v37;
            int8x16_t v232 = v36;
            int8x16_t v233 = v101;
            uint64_t v99 = 64;
          }
          else if (v98 == 1)
          {
            int8x16_t v100 = (int8x16_t)vld1q_dup_s16((const __int16 *)v97);
            int8x16_t v228 = v100;
            int8x16_t v229 = v100;
            int8x16_t v232 = v100;
            int8x16_t v233 = v100;
            uint64_t v99 = 2;
          }
          else if (v79[2])
          {
            uint64_t v99 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v228, 64, v97, v98, *(int8x8_t *)v95.i8, *(double *)v36.i64, *(int8x8_t *)v37.i8);
          }
          else
          {
            uint64_t v99 = 0;
            v100.i64[0] = 0;
            int8x16_t v228 = 0u;
            int8x16_t v229 = 0u;
            int8x16_t v232 = 0u;
            int8x16_t v233 = 0u;
          }
          uint64_t v102 = v97 + v99;
          unsigned int v103 = v79[3];
          if (v103 == 63)
          {
            int8x16_t v105 = *(int8x16_t *)v102;
            int8x16_t v36 = *(int8x16_t *)(v102 + 16);
            int8x16_t v37 = *(int8x16_t *)(v102 + 32);
            int8x16_t v106 = *(int8x16_t *)(v102 + 48);
            int8x16_t v236 = *(int8x16_t *)v102;
            int8x16_t v237 = v37;
            int8x16_t v240 = v36;
            int8x16_t v241 = v106;
            uint64_t v104 = 64;
          }
          else if (v103 == 1)
          {
            int8x16_t v105 = (int8x16_t)vld1q_dup_s16((const __int16 *)v102);
            int8x16_t v236 = v105;
            int8x16_t v237 = v105;
            int8x16_t v240 = v105;
            int8x16_t v241 = v105;
            uint64_t v104 = 2;
          }
          else if (v79[3])
          {
            uint64_t v104 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v236, 64, v102, v103, *(int8x8_t *)v100.i8, *(double *)v36.i64, *(int8x8_t *)v37.i8);
          }
          else
          {
            uint64_t v104 = 0;
            v105.i64[0] = 0;
            int8x16_t v236 = 0u;
            int8x16_t v237 = 0u;
            int8x16_t v240 = 0u;
            int8x16_t v241 = 0u;
          }
          uint64_t v107 = v102 + v104;
          unsigned int v108 = v79[4];
          if (v108 == 63)
          {
            int8x16_t v110 = *(int8x16_t *)v107;
            int8x16_t v36 = *(int8x16_t *)(v107 + 16);
            int8x16_t v37 = *(int8x16_t *)(v107 + 32);
            int8x16_t v111 = *(int8x16_t *)(v107 + 48);
            int8x16_t v242 = *(int8x16_t *)v107;
            int8x16_t v243 = v37;
            int8x16_t v246 = v36;
            int8x16_t v247 = v111;
            uint64_t v109 = 64;
          }
          else if (v108 == 1)
          {
            int8x16_t v110 = (int8x16_t)vld1q_dup_s16((const __int16 *)v107);
            int8x16_t v242 = v110;
            int8x16_t v243 = v110;
            int8x16_t v246 = v110;
            int8x16_t v247 = v110;
            uint64_t v109 = 2;
          }
          else if (v79[4])
          {
            uint64_t v109 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v242, 64, v107, v108, *(int8x8_t *)v105.i8, *(double *)v36.i64, *(int8x8_t *)v37.i8);
          }
          else
          {
            uint64_t v109 = 0;
            v110.i64[0] = 0;
            int8x16_t v242 = 0u;
            int8x16_t v243 = 0u;
            int8x16_t v246 = 0u;
            int8x16_t v247 = 0u;
          }
          uint64_t v112 = v107 + v109;
          unsigned int v113 = v79[5];
          if (v113 == 63)
          {
            int8x16_t v115 = *(int8x16_t *)v112;
            int8x16_t v36 = *(int8x16_t *)(v112 + 16);
            int8x16_t v37 = *(int8x16_t *)(v112 + 32);
            int8x16_t v116 = *(int8x16_t *)(v112 + 48);
            int8x16_t v250 = *(int8x16_t *)v112;
            int8x16_t v251 = v37;
            int8x16_t v254 = v36;
            int8x16_t v255 = v116;
            uint64_t v114 = 64;
          }
          else if (v113 == 1)
          {
            int8x16_t v115 = (int8x16_t)vld1q_dup_s16((const __int16 *)v112);
            int8x16_t v250 = v115;
            int8x16_t v251 = v115;
            int8x16_t v254 = v115;
            int8x16_t v255 = v115;
            uint64_t v114 = 2;
          }
          else if (v79[5])
          {
            uint64_t v114 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v250, 64, v112, v113, *(int8x8_t *)v110.i8, *(double *)v36.i64, *(int8x8_t *)v37.i8);
          }
          else
          {
            uint64_t v114 = 0;
            v115.i64[0] = 0;
            int8x16_t v250 = 0u;
            int8x16_t v251 = 0u;
            int8x16_t v254 = 0u;
            int8x16_t v255 = 0u;
          }
          uint64_t v117 = v112 + v114;
          unsigned int v118 = v79[6];
          if (v118 == 63)
          {
            int8x16_t v120 = *(int8x16_t *)v117;
            int8x16_t v36 = *(int8x16_t *)(v117 + 16);
            int8x16_t v37 = *(int8x16_t *)(v117 + 32);
            int8x16_t v121 = *(int8x16_t *)(v117 + 48);
            int8x16_t v244 = *(int8x16_t *)v117;
            int8x16_t v245 = v37;
            int8x16_t v248 = v36;
            int8x16_t v249 = v121;
            uint64_t v119 = 64;
          }
          else if (v118 == 1)
          {
            int8x16_t v120 = (int8x16_t)vld1q_dup_s16((const __int16 *)v117);
            int8x16_t v244 = v120;
            int8x16_t v245 = v120;
            int8x16_t v248 = v120;
            int8x16_t v249 = v120;
            uint64_t v119 = 2;
          }
          else if (v79[6])
          {
            uint64_t v119 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v244, 64, v117, v118, *(int8x8_t *)v115.i8, *(double *)v36.i64, *(int8x8_t *)v37.i8);
          }
          else
          {
            uint64_t v119 = 0;
            v120.i64[0] = 0;
            int8x16_t v244 = 0u;
            int8x16_t v245 = 0u;
            int8x16_t v248 = 0u;
            int8x16_t v249 = 0u;
          }
          uint64_t v122 = v117 + v119;
          unsigned int v123 = v79[7];
          if (v123 == 63)
          {
            int8x16_t v38 = *(int8x16_t *)v122;
            int8x16_t v36 = *(int8x16_t *)(v122 + 16);
            int8x16_t v37 = *(int8x16_t *)(v122 + 32);
            int8x16_t v125 = *(int8x16_t *)(v122 + 48);
            int8x16_t v252 = *(int8x16_t *)v122;
            int8x16_t v253 = v37;
            int8x16_t v256 = v36;
            int8x16_t v257 = v125;
            a7 = v201;
            uint64_t v124 = v221;
            if (v221) {
              goto LABEL_185;
            }
          }
          else
          {
            a7 = v201;
            if (v123 == 1)
            {
              int8x16_t v38 = (int8x16_t)vld1q_dup_s16((const __int16 *)v122);
              int8x16_t v252 = v38;
              int8x16_t v253 = v38;
              int8x16_t v256 = v38;
              int8x16_t v257 = v38;
              uint64_t v124 = v221;
              if (v221) {
                goto LABEL_185;
              }
            }
            else
            {
              if (v123)
              {
                AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v252, 64, v122, v123, *(int8x8_t *)v120.i8, *(double *)v36.i64, *(int8x8_t *)v37.i8);
                uint64_t v124 = v221;
                if (!v221) {
                  goto LABEL_216;
                }
LABEL_185:
                if (!v222) {
                  goto LABEL_216;
                }
                uint64_t v126 = 0;
                unint64_t v127 = (unint64_t)v219 << 6;
                uint64_t v128 = 8 * v220;
                unsigned int v129 = &v226.i8[v127 + v128];
                uint64_t v130 = v217;
                uint64_t v131 = v218;
                unint64_t v132 = 8 * v222;
                if (v132 <= 1) {
                  unint64_t v133 = 1;
                }
                else {
                  unint64_t v133 = 8 * v222;
                }
                unint64_t v134 = v127 + v128;
                BOOL v135 = &v226.i8[v127 + v128];
                if (v133) {
                  BOOL v136 = (v133 - 1) >> 32 == 0;
                }
                else {
                  BOOL v136 = 0;
                }
                char v137 = !v136;
                uint64_t v138 = v133 & 0x7FFFFFFE0;
                uint64_t v139 = v133 & 0x7FFFFFFF8;
                int v140 = &v227.i8[v134];
                unsigned int v141 = (int8x16_t *)(v217 + 1);
                unsigned int v142 = v129;
                uint64_t v143 = v217;
                while (2)
                {
                  uint64_t v144 = (char *)v130 + v131 * v126;
                  unsigned int v145 = &v129[64 * v126];
                  if ((unint64_t)(&v135[64 * v126] - v144) < 0x20) {
                    char v146 = 1;
                  }
                  else {
                    char v146 = v137;
                  }
                  if (v146)
                  {
                    int v147 = 0;
LABEL_213:
                    unsigned int v156 = v147 + 1;
                    do
                    {
                      char v157 = *v144++;
                      *v145++ = v157;
                    }
                    while (v132 > v156++);
                  }
                  else
                  {
                    if (v133 >= 0x20)
                    {
                      int8x8_t v149 = v141;
                      __int32 v150 = (int8x16_t *)v140;
                      uint64_t v151 = v133 & 0x7FFFFFFE0;
                      do
                      {
                        int8x16_t v38 = v149[-1];
                        int8x16_t v36 = *v149;
                        v150[-1] = v38;
                        *__int32 v150 = v36;
                        v150 += 2;
                        v149 += 2;
                        v151 -= 32;
                      }
                      while (v151);
                      if (v133 == v138) {
                        goto LABEL_196;
                      }
                      uint64_t v148 = v133 & 0x7FFFFFFE0;
                      if ((v133 & 0x18) == 0)
                      {
                        v144 += v138;
                        v145 += v138;
                        int v147 = v133 & 0xFFFFFFE0;
                        goto LABEL_213;
                      }
                    }
                    else
                    {
                      uint64_t v148 = 0;
                    }
                    v145 += v139;
                    unint64_t v152 = v148 - (v133 & 0x7FFFFFFF8);
                    unint64_t v153 = (uint64_t *)((char *)v143 + v148);
                    uint64_t v154 = (uint64_t *)&v142[v148];
                    do
                    {
                      uint64_t v155 = *v153++;
                      v38.i64[0] = v155;
                      *v154++ = v155;
                      v152 += 8;
                    }
                    while (v152);
                    if (v133 != v139)
                    {
                      v144 += v139;
                      int v147 = v133 & 0xFFFFFFF8;
                      goto LABEL_213;
                    }
                  }
LABEL_196:
                  ++v126;
                  v140 += 64;
                  unsigned int v141 = (int8x16_t *)((char *)v141 + v131);
                  uint64_t v143 = (_OWORD *)((char *)v143 + v131);
                  v142 += 64;
                  if (v126 == v124) {
                    goto LABEL_216;
                  }
                  continue;
                }
              }
              v38.i64[0] = 0;
              int8x16_t v252 = 0u;
              int8x16_t v253 = 0u;
              int8x16_t v256 = 0u;
              int8x16_t v257 = 0u;
              uint64_t v124 = v221;
              if (v221) {
                goto LABEL_185;
              }
            }
          }
LABEL_216:
          char v159 = 0;
          unsigned int v161 = v215;
          int v160 = v216;
          int v162 = v223;
          int v163 = v224;
          if (v223 >= 4u) {
            int v164 = 4;
          }
          else {
            int v164 = v223;
          }
          if (v224 >= 2u) {
            int v165 = 2;
          }
          else {
            int v165 = v224;
          }
          if (v164)
          {
            uint64_t v26 = a1;
            unsigned int v86 = v41 + 1;
            if (v165)
            {
              v38.i64[0] = v226.i64[0];
              int8x16_t v36 = (int8x16_t)v227;
              int8x16_t v37 = (int8x16_t)v230;
              int16x8_t v166 = v231;
              int8x16_t *v215 = v226;
              v161[1] = v37;
              v161[2] = v36;
              v161[3] = (int8x16_t)v166;
              v161 += 4;
              char v159 = 63;
            }
          }
          else
          {
            uint64_t v26 = a1;
            unsigned int v86 = v41 + 1;
          }
          char v167 = 0;
          *int v160 = v159;
          if (v163 <= 2) {
            int v168 = 2;
          }
          else {
            int v168 = v163;
          }
          unsigned int v169 = v168 - 2;
          if (v169 >= 2) {
            unsigned int v169 = 2;
          }
          if (v164 && v169)
          {
            v38.i64[0] = v234.i64[0];
            int8x16_t v36 = v235;
            int8x16_t v37 = v238;
            int8x16_t v170 = v239;
            *unsigned int v161 = v234;
            v161[1] = v37;
            v161[2] = v36;
            v161[3] = v170;
            v161 += 4;
            char v167 = 63;
          }
          char v171 = 0;
          v160[1] = v167;
          if (v162 <= 4) {
            int v162 = 4;
          }
          unsigned int v172 = v162 - 4;
          if (v172 >= 4) {
            unsigned int v172 = 4;
          }
          if (v172 && v165)
          {
            v38.i64[0] = v228.i64[0];
            int8x16_t v36 = v229;
            int8x16_t v37 = v232;
            int8x16_t v173 = v233;
            *unsigned int v161 = v228;
            v161[1] = v37;
            v161[2] = v36;
            v161[3] = v173;
            v161 += 4;
            char v171 = 63;
          }
          char v174 = 0;
          v160[2] = v171;
          if (v172)
          {
            uint64_t result = (uint64_t)v211;
            if (v169)
            {
              v38.i64[0] = v236.i64[0];
              int8x16_t v36 = v237;
              int8x16_t v37 = v240;
              int8x16_t v175 = v241;
              *unsigned int v161 = v236;
              v161[1] = v37;
              v161[2] = v36;
              v161[3] = v175;
              v161 += 4;
              char v174 = 63;
            }
          }
          else
          {
            uint64_t result = (uint64_t)v211;
          }
          char v176 = 0;
          v160[3] = v174;
          if (v163 <= 4) {
            int v177 = 4;
          }
          else {
            int v177 = v163;
          }
          unsigned int v178 = v177 - 4;
          if (v178 >= 2) {
            unsigned int v178 = 2;
          }
          if (v164 && v178)
          {
            v38.i64[0] = v242.i64[0];
            int8x16_t v36 = v243;
            int8x16_t v37 = v246;
            int8x16_t v179 = v247;
            *unsigned int v161 = v242;
            v161[1] = v37;
            v161[2] = v36;
            v161[3] = v179;
            v161 += 4;
            char v176 = 63;
          }
          char v180 = 0;
          v160[4] = v176;
          if (v163 <= 6) {
            int v163 = 6;
          }
          unsigned int v181 = v163 - 6;
          if (v181 >= 2) {
            unsigned int v181 = 2;
          }
          if (v164 && v181)
          {
            v38.i64[0] = v250.i64[0];
            int8x16_t v36 = v251;
            int8x16_t v37 = v254;
            int8x16_t v182 = v255;
            *unsigned int v161 = v250;
            v161[1] = v37;
            v161[2] = v36;
            v161[3] = v182;
            v161 += 4;
            char v180 = 63;
          }
          char v183 = 0;
          v160[5] = v180;
          if (v172 && v178)
          {
            v38.i64[0] = v244.i64[0];
            int8x16_t v36 = v245;
            int8x16_t v37 = v248;
            int8x16_t v184 = v249;
            *unsigned int v161 = v244;
            v161[1] = v37;
            v161[2] = v36;
            v161[3] = v184;
            v161 += 4;
            char v183 = 63;
          }
          char v185 = 0;
          v160[6] = v183;
          if (v172)
          {
            if (v181)
            {
              v38.i64[0] = v252.i64[0];
              int8x16_t v36 = v253;
              int8x16_t v37 = v256;
              int8x16_t v186 = v257;
              *unsigned int v161 = v252;
              v161[1] = v37;
              v161[2] = v36;
              v161[3] = v186;
              char v185 = 63;
            }
          }
          v160[7] = v185;
          if (v212) {
            goto LABEL_267;
          }
LABEL_46:
          BOOL v22 = v41 == v202 >> 3;
          unsigned int v41 = v86;
        }
        while (!v22);
        BOOL v22 = v21++ == v192;
      }
      while (!v22);
    }
  }
  return result;
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, uint64_t a7, unsigned int a8, int a9, int a10, uint64_t a11, int a12)
{
  uint64_t v233 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  uint64_t v17 = a1;
  unsigned int v182 = a8;
  unsigned int v18 = a8 >> 3;
  unsigned int v167 = a8 + a10 - 1;
  unsigned int v169 = v167 >> 3;
  unsigned int v19 = *(unsigned __int8 *)(*(void *)(a1 + 208) + 88);
  unsigned int v20 = *(_DWORD *)(a1 + 112);
  uint64_t v183 = v17;
  if (*(void *)(v17 + 168))
  {
    __int16 CacheMode = IOSurfaceGetCacheMode();
    uint64_t v17 = v183;
    int v22 = CacheMode & 0xF00;
  }
  else
  {
    int v22 = 0;
  }
  BOOL v23 = (v22 & 0xD00) == 0 || v22 == 768;
  int v24 = v22 & 0xE00;
  int v26 = !v23 && v24 != 1024;
  int v187 = v26;
  BOOL isLevelTiled = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::isLevelTiled(v17, *(_DWORD *)(v17 + 144) + a12);
  uint64_t v28 = v183;
  BOOL v176 = isLevelTiled;
  if (v18 <= v169)
  {
    unsigned int v175 = a7 + a9 - 1;
    unsigned int v166 = a7 >> 3;
    if (a7 >> 3 <= v175 >> 3)
    {
      unsigned int v163 = a5 - 1;
      unsigned int v185 = (a5 - 1) >> 3;
      int v184 = ((a5 - 1) & 7) + 1;
      int v164 = ((a6 - 1) & 7) + 1;
      unsigned int v165 = (a6 - 1) >> 3;
      uint32x2_t v29 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0x700000007);
      *(int32x2_t *)v30.i8 = vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v29, 3uLL)))))));
      v31.i64[0] = 0x1000000010;
      int8x8_t v32 = vbic_s8(*(int8x8_t *)v30.i8, (int8x8_t)vcgt_u32((uint32x2_t)0x1000000010, v29));
      __int32 v174 = v32.i32[0] | v32.i32[1];
      BOOL v172 = v32.i32[1] != 0;
      int8x8_t v173 = v32;
      BOOL v171 = v32.i32[0] != 0;
      unint64_t v162 = 8 * v20 * (unint64_t)v19;
      do
      {
        unsigned int v33 = (8 * v18) | 7;
        if (8 * v18 <= v182) {
          int v34 = v182;
        }
        else {
          int v34 = 8 * v18;
        }
        unsigned int v35 = v166;
        if (v167 < v33) {
          unsigned int v33 = v167;
        }
        unsigned int v181 = 8 * v18;
        int v170 = v34 - 8 * v18;
        int v180 = v33 - v34 + 1;
        int v36 = v164;
        if (v18 != v165) {
          int v36 = 8;
        }
        unsigned int v188 = v36;
        uint64_t v179 = a3 + (v34 - v182) * a11;
        do
        {
          unsigned int v37 = 8 * v35;
          unsigned int v38 = 8 * (v35 + 1) - 1;
          if (8 * v35 <= a7) {
            int v39 = a7;
          }
          else {
            int v39 = 8 * v35;
          }
          if (v175 < v38) {
            unsigned int v38 = v175;
          }
          int v40 = v38 - v39 + 1;
          if (v35 == v185) {
            unsigned int v41 = v184;
          }
          else {
            unsigned int v41 = 8;
          }
          BOOL v42 = 1;
          if (v181 >= v182 && v37 >= a7)
          {
            int v43 = v184;
            if (v35 != v185) {
              int v43 = 8;
            }
            BOOL v42 = v40 != v43 || v180 != v188;
          }
          if (v176)
          {
            unsigned int v64 = 0;
            uint64_t v65 = v162 >> (*(unsigned char *)(v28 + 57) != 0);
            char v66 = 1;
            if (v65 > 127)
            {
              if (v65 > 511)
              {
                if (v65 == 512)
                {
                  char v66 = 0;
                  char v67 = 0;
                  unsigned int v64 = 16;
                  unsigned int v68 = 16;
                }
                else
                {
                  char v67 = 1;
                  unsigned int v68 = 0;
                  if (v65 == 1024)
                  {
                    char v66 = 0;
                    unsigned int v68 = 8;
                    unsigned int v64 = 16;
                  }
                }
              }
              else if (v65 == 128)
              {
                char v66 = 0;
                char v67 = 0;
                unsigned int v64 = 32;
                unsigned int v68 = 32;
              }
              else
              {
                char v67 = 1;
                unsigned int v68 = 0;
                if (v65 == 256)
                {
                  char v66 = 0;
                  char v67 = 0;
                  unsigned int v68 = 16;
                  unsigned int v64 = 32;
                }
              }
            }
            else
            {
              char v67 = 1;
              unsigned int v68 = 0;
              switch(v65)
              {
                case 4:
                  char v66 = 0;
                  char v67 = 0;
                  unsigned int v68 = 128;
                  unsigned int v64 = 256;
                  break;
                case 5:
                case 6:
                case 7:
                case 9:
                case 10:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 17:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                  break;
                case 8:
                  char v66 = 0;
                  char v67 = 0;
                  unsigned int v64 = 128;
                  unsigned int v68 = 128;
                  break;
                case 16:
                  char v66 = 0;
                  char v67 = 0;
                  unsigned int v68 = 64;
                  unsigned int v64 = 128;
                  break;
                case 32:
                  char v66 = 0;
                  char v67 = 0;
                  unsigned int v64 = 64;
                  unsigned int v68 = 64;
                  break;
                default:
                  if (v65 == 64)
                  {
                    char v66 = 0;
                    char v67 = 0;
                    unsigned int v68 = 32;
                    unsigned int v64 = 64;
                  }
                  break;
              }
            }
            unsigned int v151 = (v64 >> 3) - 1;
            if (v66) {
              unsigned int v152 = 0;
            }
            else {
              unsigned int v152 = 32 - __clz(~(-1 << -(char)__clz(v151)));
            }
            unsigned int v153 = (v68 >> 3) - 1;
            if (v67)
            {
              unsigned int v154 = 0;
              if (v152) {
                goto LABEL_207;
              }
            }
            else
            {
              unsigned int v154 = 32 - __clz(~(-1 << -(char)__clz(v153)));
              if (v154 | v152)
              {
LABEL_207:
                int v155 = 0;
                uint64_t v156 = 0;
                int v157 = v35 & v151;
                int v158 = v18 & v153;
                BOOL v159 = v152 != 0;
                BOOL v160 = v154 != 0;
                int v161 = 1;
                do
                {
                  --v152;
                  if (v159) {
                    v156 |= (unint64_t)(v161 & v157) << v155++;
                  }
                  else {
                    unsigned int v152 = 0;
                  }
                  --v154;
                  if (v160) {
                    v156 |= (unint64_t)(v161 & v158) << v155++;
                  }
                  else {
                    unsigned int v154 = 0;
                  }
                  v161 *= 2;
                  --v155;
                  BOOL v160 = v154 != 0;
                  BOOL v159 = v152 != 0;
                }
                while (v154 | v152);
                goto LABEL_219;
              }
            }
            uint64_t v156 = 0;
LABEL_219:
            unint64_t v52 = ((unint64_t)(v37 / v64 + v181 / v68 * ((v64 + v163) / v64)) << 14) + (v156 << 9);
            goto LABEL_58;
          }
          if (v174)
          {
            int v45 = 0;
            uint64_t v46 = 0;
            int v47 = 1;
            BOOL v48 = v171;
            BOOL v49 = v172;
            __int32 v51 = v173.i32[0];
            __int32 v50 = v173.i32[1];
            do
            {
              --v50;
              if (v49) {
                v46 |= (unint64_t)(v47 & v35) << v45++;
              }
              else {
                __int32 v50 = 0;
              }
              --v51;
              if (v48) {
                v46 |= (unint64_t)(v47 & v18) << v45++;
              }
              else {
                __int32 v51 = 0;
              }
              v47 *= 2;
              --v45;
              BOOL v48 = v51 != 0;
              BOOL v49 = v50 != 0;
            }
            while (v51 | v50);
          }
          else
          {
            uint64_t v46 = 0;
          }
          unint64_t v52 = v46 << 9;
LABEL_58:
          unsigned int v53 = *(_DWORD *)(v28 + 128) >> (*(unsigned char *)(v28 + 144) + a12);
          if (v53 <= 1) {
            unsigned int v53 = 1;
          }
          unsigned int v54 = v53 + 7;
          if (v54 < 0x10) {
            unsigned int v55 = 0;
          }
          else {
            unsigned int v55 = 32 - __clz(~(-1 << -(char)__clz((v54 >> 3) - 1)));
          }
          unsigned int v56 = *(_DWORD *)(v28 + 132) >> (*(unsigned char *)(v28 + 144) + a12);
          if (v56 <= 1) {
            unsigned int v56 = 1;
          }
          unsigned int v57 = v56 + 7;
          if (v57 < 0x10)
          {
            unsigned int v58 = 0;
            if (!v55)
            {
LABEL_80:
              uint64_t v60 = 0;
              goto LABEL_81;
            }
          }
          else
          {
            unsigned int v58 = 32 - __clz(~(-1 << -(char)__clz((v57 >> 3) - 1)));
            if (!(v58 | v55)) {
              goto LABEL_80;
            }
          }
          int v59 = 0;
          uint64_t v60 = 0;
          BOOL v61 = v55 != 0;
          BOOL v62 = v58 != 0;
          int v63 = 1;
          do
          {
            --v55;
            if (v61) {
              v60 |= (unint64_t)(v63 & v35) << v59++;
            }
            else {
              unsigned int v55 = 0;
            }
            --v58;
            if (v62) {
              v60 |= (unint64_t)(v63 & v18) << v59++;
            }
            else {
              unsigned int v58 = 0;
            }
            v63 *= 2;
            --v59;
            BOOL v62 = v58 != 0;
            BOOL v61 = v55 != 0;
          }
          while (v58 | v55);
LABEL_81:
          uint64_t v69 = a7;
          int v70 = v41 < 8 || v42;
          unsigned int v71 = (char *)(a4 + 8 * v60);
          uint64_t v72 = v179 + 8 * (v39 - a7);
          uint64_t v73 = (int8x16_t *)(a2 + v52);
          if (v188 < 8) {
            int v74 = 1;
          }
          else {
            int v74 = v70;
          }
          __src = v73;
          if (v187)
          {
            if (!v74)
            {
              uint64_t v73 = (int8x16_t *)__dst;
LABEL_94:
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock(v72, a11, v73, v71, v41, v188);
              goto LABEL_95;
            }
            int v75 = v40;
            memcpy(__dst, __src, sizeof(__dst));
            int v40 = v75;
            uint64_t v73 = (int8x16_t *)__dst;
            uint64_t v28 = v183;
          }
          else if (!v74)
          {
            goto LABEL_94;
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE4ELj4ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = v28;
          unsigned int v190 = v73;
          unsigned __int8 v198 = v41;
          unsigned __int8 v199 = v188;
          unsigned int v194 = v170;
          unsigned int v195 = v39 - v37;
          unsigned int v191 = v71;
          uint64_t v192 = v72;
          uint64_t v193 = a11;
          unsigned int v196 = v180;
          unsigned int v197 = v40;
          if (!v42)
          {
            unsigned int v76 = *v71;
            a7 = v69;
            if (v76 == 63)
            {
              int16x8_t v78 = *(int16x8_t *)v73;
              int8x16_t v30 = v73[1];
              int8x16_t v31 = v73[2];
              int16x8_t v79 = (int16x8_t)v73[3];
              int8x16_t v201 = *v73;
              int16x8_t v202 = (int16x8_t)v31;
              int16x8_t v205 = (int16x8_t)v30;
              int16x8_t v206 = v79;
              uint64_t v77 = 64;
            }
            else if (v76 == 1)
            {
              int16x8_t v78 = vld1q_dup_s16(v73->i16);
              int8x16_t v201 = (int8x16_t)v78;
              int16x8_t v202 = v78;
              int16x8_t v205 = v78;
              int16x8_t v206 = v78;
              uint64_t v77 = 2;
            }
            else if (*v71)
            {
              uint64_t v77 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v201, 64, (uint64_t)v73, v76, v32, *(double *)v30.i64, *(int8x8_t *)v31.i8);
            }
            else
            {
              uint64_t v77 = 0;
              v78.i64[0] = 0;
              int8x16_t v201 = 0u;
              int16x8_t v202 = 0u;
              int16x8_t v205 = 0u;
              int16x8_t v206 = 0u;
            }
            uint64_t v80 = (uint64_t)v73->i64 + v77;
            unsigned int v81 = v71[1];
            if (v81 == 63)
            {
              int8x16_t v83 = *(int8x16_t *)v80;
              int8x16_t v30 = *(int8x16_t *)(v80 + 16);
              int8x16_t v31 = *(int8x16_t *)(v80 + 32);
              int8x16_t v84 = *(int8x16_t *)(v80 + 48);
              int8x16_t v209 = *(int8x16_t *)v80;
              int8x16_t v210 = v31;
              int8x16_t v213 = v30;
              int8x16_t v214 = v84;
              uint64_t v82 = 64;
            }
            else if (v81 == 1)
            {
              int8x16_t v83 = (int8x16_t)vld1q_dup_s16((const __int16 *)v80);
              int8x16_t v209 = v83;
              int8x16_t v210 = v83;
              int8x16_t v213 = v83;
              int8x16_t v214 = v83;
              uint64_t v82 = 2;
            }
            else if (v71[1])
            {
              uint64_t v82 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v209, 64, v80, v81, *(int8x8_t *)v78.i8, *(double *)v30.i64, *(int8x8_t *)v31.i8);
            }
            else
            {
              uint64_t v82 = 0;
              v83.i64[0] = 0;
              int8x16_t v209 = 0u;
              int8x16_t v210 = 0u;
              int8x16_t v213 = 0u;
              int8x16_t v214 = 0u;
            }
            uint64_t v85 = v80 + v82;
            unsigned int v86 = v71[2];
            if (v86 == 63)
            {
              int8x16_t v88 = *(int8x16_t *)v85;
              int8x16_t v30 = *(int8x16_t *)(v85 + 16);
              int8x16_t v31 = *(int8x16_t *)(v85 + 32);
              int8x16_t v89 = *(int8x16_t *)(v85 + 48);
              int8x16_t v203 = *(int8x16_t *)v85;
              int8x16_t v204 = v31;
              int8x16_t v207 = v30;
              int8x16_t v208 = v89;
              uint64_t v87 = 64;
            }
            else if (v86 == 1)
            {
              int8x16_t v88 = (int8x16_t)vld1q_dup_s16((const __int16 *)v85);
              int8x16_t v203 = v88;
              int8x16_t v204 = v88;
              int8x16_t v207 = v88;
              int8x16_t v208 = v88;
              uint64_t v87 = 2;
            }
            else if (v71[2])
            {
              uint64_t v87 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v203, 64, v85, v86, *(int8x8_t *)v83.i8, *(double *)v30.i64, *(int8x8_t *)v31.i8);
            }
            else
            {
              uint64_t v87 = 0;
              v88.i64[0] = 0;
              int8x16_t v203 = 0u;
              int8x16_t v204 = 0u;
              int8x16_t v207 = 0u;
              int8x16_t v208 = 0u;
            }
            uint64_t v90 = v85 + v87;
            unsigned int v91 = v71[3];
            if (v91 == 63)
            {
              int8x16_t v93 = *(int8x16_t *)v90;
              int8x16_t v30 = *(int8x16_t *)(v90 + 16);
              int8x16_t v31 = *(int8x16_t *)(v90 + 32);
              int8x16_t v94 = *(int8x16_t *)(v90 + 48);
              int8x16_t v211 = *(int8x16_t *)v90;
              int8x16_t v212 = v31;
              int8x16_t v215 = v30;
              int8x16_t v216 = v94;
              uint64_t v92 = 64;
            }
            else if (v91 == 1)
            {
              int8x16_t v93 = (int8x16_t)vld1q_dup_s16((const __int16 *)v90);
              int8x16_t v211 = v93;
              int8x16_t v212 = v93;
              int8x16_t v215 = v93;
              int8x16_t v216 = v93;
              uint64_t v92 = 2;
            }
            else if (v71[3])
            {
              uint64_t v92 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v211, 64, v90, v91, *(int8x8_t *)v88.i8, *(double *)v30.i64, *(int8x8_t *)v31.i8);
            }
            else
            {
              uint64_t v92 = 0;
              v93.i64[0] = 0;
              int8x16_t v211 = 0u;
              int8x16_t v212 = 0u;
              int8x16_t v215 = 0u;
              int8x16_t v216 = 0u;
            }
            uint64_t v95 = v90 + v92;
            unsigned int v96 = v71[4];
            if (v96 == 63)
            {
              int8x16_t v98 = *(int8x16_t *)v95;
              int8x16_t v30 = *(int8x16_t *)(v95 + 16);
              int8x16_t v31 = *(int8x16_t *)(v95 + 32);
              int8x16_t v99 = *(int8x16_t *)(v95 + 48);
              int8x16_t v217 = *(int8x16_t *)v95;
              int8x16_t v218 = v31;
              int8x16_t v221 = v30;
              int8x16_t v222 = v99;
              uint64_t v97 = 64;
            }
            else if (v96 == 1)
            {
              int8x16_t v98 = (int8x16_t)vld1q_dup_s16((const __int16 *)v95);
              int8x16_t v217 = v98;
              int8x16_t v218 = v98;
              int8x16_t v221 = v98;
              int8x16_t v222 = v98;
              uint64_t v97 = 2;
            }
            else if (v71[4])
            {
              uint64_t v97 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v217, 64, v95, v96, *(int8x8_t *)v93.i8, *(double *)v30.i64, *(int8x8_t *)v31.i8);
            }
            else
            {
              uint64_t v97 = 0;
              v98.i64[0] = 0;
              int8x16_t v217 = 0u;
              int8x16_t v218 = 0u;
              int8x16_t v221 = 0u;
              int8x16_t v222 = 0u;
            }
            uint64_t v100 = v95 + v97;
            unsigned int v101 = v71[5];
            if (v101 == 63)
            {
              int8x16_t v103 = *(int8x16_t *)v100;
              int8x16_t v30 = *(int8x16_t *)(v100 + 16);
              int8x16_t v31 = *(int8x16_t *)(v100 + 32);
              int8x16_t v104 = *(int8x16_t *)(v100 + 48);
              int8x16_t v225 = *(int8x16_t *)v100;
              int8x16_t v226 = v31;
              int8x16_t v229 = v30;
              int8x16_t v230 = v104;
              uint64_t v102 = 64;
            }
            else if (v101 == 1)
            {
              int8x16_t v103 = (int8x16_t)vld1q_dup_s16((const __int16 *)v100);
              int8x16_t v225 = v103;
              int8x16_t v226 = v103;
              int8x16_t v229 = v103;
              int8x16_t v230 = v103;
              uint64_t v102 = 2;
            }
            else if (v71[5])
            {
              uint64_t v102 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v225, 64, v100, v101, *(int8x8_t *)v98.i8, *(double *)v30.i64, *(int8x8_t *)v31.i8);
            }
            else
            {
              uint64_t v102 = 0;
              v103.i64[0] = 0;
              int8x16_t v225 = 0u;
              int8x16_t v226 = 0u;
              int8x16_t v229 = 0u;
              int8x16_t v230 = 0u;
            }
            uint64_t v105 = v100 + v102;
            unsigned int v106 = v71[6];
            if (v106 == 63)
            {
              int8x16_t v108 = *(int8x16_t *)v105;
              int8x16_t v30 = *(int8x16_t *)(v105 + 16);
              int8x16_t v31 = *(int8x16_t *)(v105 + 32);
              int8x16_t v109 = *(int8x16_t *)(v105 + 48);
              int8x16_t v219 = *(int8x16_t *)v105;
              int8x16_t v220 = v31;
              int8x16_t v223 = v30;
              int8x16_t v224 = v109;
              uint64_t v107 = 64;
            }
            else if (v106 == 1)
            {
              int8x16_t v108 = (int8x16_t)vld1q_dup_s16((const __int16 *)v105);
              int8x16_t v219 = v108;
              int8x16_t v220 = v108;
              int8x16_t v223 = v108;
              int8x16_t v224 = v108;
              uint64_t v107 = 2;
            }
            else if (v71[6])
            {
              uint64_t v107 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v219, 64, v105, v106, *(int8x8_t *)v103.i8, *(double *)v30.i64, *(int8x8_t *)v31.i8);
            }
            else
            {
              uint64_t v107 = 0;
              v108.i64[0] = 0;
              int8x16_t v219 = 0u;
              int8x16_t v220 = 0u;
              int8x16_t v223 = 0u;
              int8x16_t v224 = 0u;
            }
            uint64_t v110 = v105 + v107;
            unsigned int v111 = v71[7];
            if (v111 == 63)
            {
              int16x8_t v114 = *(int16x8_t *)(v110 + 16);
              int16x8_t v115 = *(int16x8_t *)(v110 + 32);
              int16x8_t v116 = *(int16x8_t *)(v110 + 48);
              int8x16_t v227 = *(int8x16_t *)v110;
              int16x8_t v228 = v115;
              int16x8_t v231 = v114;
              int16x8_t v232 = v116;
              uint64_t v112 = v196;
              if (v196) {
                goto LABEL_156;
              }
            }
            else
            {
              if (v111 != 1)
              {
                if (v71[7])
                {
                  AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v227, 64, v110, v111, *(int8x8_t *)v108.i8, *(double *)v30.i64, *(int8x8_t *)v31.i8);
                  uint64_t v112 = v196;
                  if (!v196) {
                    goto LABEL_187;
                  }
                }
                else
                {
                  int8x16_t v227 = 0u;
                  int16x8_t v228 = 0u;
                  int16x8_t v231 = 0u;
                  int16x8_t v232 = 0u;
                  uint64_t v112 = v196;
                  if (!v196) {
                    goto LABEL_187;
                  }
                }
LABEL_156:
                if (!v197) {
                  goto LABEL_187;
                }
                uint64_t v117 = 0;
                unint64_t v118 = (unint64_t)v194 << 6;
                uint64_t v119 = 8 * v195;
                int8x16_t v120 = &v201.i8[v118 + v119];
                uint64_t v121 = v192;
                uint64_t v122 = v193;
                unint64_t v123 = 8 * v197;
                if (v123 <= 1) {
                  unint64_t v124 = 1;
                }
                else {
                  unint64_t v124 = 8 * v197;
                }
                unint64_t v125 = v118 + v119;
                uint64_t v126 = &v201.i8[v118 + v119];
                if (v124) {
                  BOOL v127 = (v124 - 1) >> 32 == 0;
                }
                else {
                  BOOL v127 = 0;
                }
                char v128 = !v127;
                uint64_t v129 = v124 & 0x7FFFFFFE0;
                uint64_t v130 = v124 & 0x7FFFFFFF8;
                uint64_t v131 = &v202.i8[v125];
                unint64_t v132 = (long long *)(v192 + 16);
                unint64_t v133 = v120;
                uint64_t v134 = v192;
                while (2)
                {
                  BOOL v135 = (char *)(v121 + v122 * v117);
                  BOOL v136 = &v120[64 * v117];
                  if ((unint64_t)(&v126[64 * v117] - v135) < 0x20) {
                    char v137 = 1;
                  }
                  else {
                    char v137 = v128;
                  }
                  if (v137)
                  {
                    int v138 = 0;
LABEL_184:
                    unsigned int v148 = v138 + 1;
                    do
                    {
                      char v149 = *v135++;
                      *v136++ = v149;
                    }
                    while (v123 > v148++);
                  }
                  else
                  {
                    if (v124 >= 0x20)
                    {
                      int v140 = v132;
                      unsigned int v141 = v131;
                      uint64_t v142 = v124 & 0x7FFFFFFE0;
                      do
                      {
                        long long v143 = *v140;
                        *((_OWORD *)v141 - 1) = *(v140 - 1);
                        *(_OWORD *)unsigned int v141 = v143;
                        v141 += 32;
                        v140 += 2;
                        v142 -= 32;
                      }
                      while (v142);
                      if (v124 == v129) {
                        goto LABEL_167;
                      }
                      uint64_t v139 = v124 & 0x7FFFFFFE0;
                      if ((v124 & 0x18) == 0)
                      {
                        v135 += v129;
                        v136 += v129;
                        int v138 = v124 & 0xFFFFFFE0;
                        goto LABEL_184;
                      }
                    }
                    else
                    {
                      uint64_t v139 = 0;
                    }
                    v136 += v130;
                    unint64_t v144 = v139 - (v124 & 0x7FFFFFFF8);
                    unsigned int v145 = (uint64_t *)(v134 + v139);
                    char v146 = &v133[v139];
                    do
                    {
                      uint64_t v147 = *v145++;
                      *(void *)char v146 = v147;
                      v146 += 8;
                      v144 += 8;
                    }
                    while (v144);
                    if (v124 != v130)
                    {
                      v135 += v130;
                      int v138 = v124 & 0xFFFFFFF8;
                      goto LABEL_184;
                    }
                  }
LABEL_167:
                  ++v117;
                  v131 += 64;
                  unint64_t v132 = (long long *)((char *)v132 + v122);
                  v134 += v122;
                  v133 += 64;
                  if (v117 == v112) {
                    goto LABEL_187;
                  }
                  continue;
                }
              }
              int16x8_t v113 = vld1q_dup_s16((const __int16 *)v110);
              int8x16_t v227 = (int8x16_t)v113;
              int16x8_t v228 = v113;
              int16x8_t v231 = v113;
              int16x8_t v232 = v113;
              uint64_t v112 = v196;
              if (v196) {
                goto LABEL_156;
              }
            }
LABEL_187:
            AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((uint64_t)&v201, 64, v190, v191, v198, v199);
            if (!v187) {
              goto LABEL_26;
            }
            goto LABEL_188;
          }
          dispatch_sync(*(dispatch_queue_t *)(*(void *)(v28 + 8) + 7384), block);
LABEL_95:
          a7 = v69;
          if (!v187) {
            goto LABEL_26;
          }
LABEL_188:
          memcpy(__src, v73, 0x200uLL);
LABEL_26:
          BOOL v23 = v35++ == v175 >> 3;
          uint64_t v28 = v183;
        }
        while (!v23);
        BOOL v23 = v18++ == v169;
      }
      while (!v23);
    }
  }
}

void *AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, uint64_t a7, unsigned int a8, int a9, int a10, uint64_t a11, int a12)
{
  uint64_t v260 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  uint64_t v17 = a1;
  unsigned int v209 = a8;
  unsigned int v18 = a8 >> 3;
  unsigned int v193 = a8 + a10 - 1;
  unsigned int v195 = v193 >> 3;
  unsigned int v19 = *(unsigned __int8 *)(*(void *)(a1 + 208) + 88);
  unsigned int v20 = *(_DWORD *)(a1 + 112);
  uint64_t v210 = v17;
  if (*(void *)(v17 + 168))
  {
    __int16 CacheMode = IOSurfaceGetCacheMode();
    uint64_t v17 = v210;
    int v22 = CacheMode & 0xF00;
  }
  else
  {
    int v22 = 0;
  }
  BOOL v23 = (v22 & 0xD00) == 0 || v22 == 768;
  int v24 = v22 & 0xE00;
  int v26 = !v23 && v24 != 1024;
  int v214 = v26;
  uint64_t result = (void *)AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::isLevelTiled(v17, *(_DWORD *)(v17 + 144) + a12);
  uint64_t v28 = v210;
  int v203 = (int)result;
  if (v18 <= v195)
  {
    unsigned int v202 = a7 + a9 - 1;
    unsigned int v192 = a7 >> 3;
    if (a7 >> 3 <= v202 >> 3)
    {
      unsigned int v189 = a5 - 1;
      unsigned int v212 = (a5 - 1) >> 3;
      int v211 = ((a5 - 1) & 7) + 1;
      int v190 = ((a6 - 1) & 7) + 1;
      unsigned int v191 = (a6 - 1) >> 3;
      uint32x2_t v29 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0x700000007);
      *(int32x2_t *)v30.i8 = vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v29, 3uLL)))))));
      v31.i64[0] = 0x1000000010;
      *(int8x8_t *)v32.i8 = vbic_s8(*(int8x8_t *)v30.i8, (int8x8_t)vcgt_u32((uint32x2_t)0x1000000010, v29));
      __int32 v201 = v32.i32[0] | v32.i32[1];
      BOOL v199 = v32.i32[1] != 0;
      uint64_t v200 = v32.i64[0];
      BOOL v198 = v32.i32[0] != 0;
      unint64_t v188 = 8 * v20 * (unint64_t)v19;
      do
      {
        unsigned int v33 = (8 * v18) | 7;
        if (8 * v18 <= v209) {
          int v34 = v209;
        }
        else {
          int v34 = 8 * v18;
        }
        unsigned int v35 = v192;
        if (v193 < v33) {
          unsigned int v33 = v193;
        }
        unsigned int v208 = 8 * v18;
        int v197 = v34 - 8 * v18;
        int v207 = v33 - v34 + 1;
        int v36 = v190;
        if (v18 != v191) {
          int v36 = 8;
        }
        unsigned int v215 = v36;
        uint64_t v206 = a3 + (v34 - v209) * a11;
        do
        {
          unsigned int v37 = 8 * v35;
          unsigned int v38 = 8 * (v35 + 1) - 1;
          if (8 * v35 <= a7) {
            int v39 = a7;
          }
          else {
            int v39 = 8 * v35;
          }
          if (v202 < v38) {
            unsigned int v38 = v202;
          }
          int v40 = v38 - v39 + 1;
          if (v35 == v212) {
            unsigned int v41 = v211;
          }
          else {
            unsigned int v41 = 8;
          }
          BOOL v42 = 1;
          if (v208 >= v209 && v37 >= a7)
          {
            int v43 = v211;
            if (v35 != v212) {
              int v43 = 8;
            }
            BOOL v42 = v40 != v43 || v207 != v215;
          }
          if (v203)
          {
            unsigned int v64 = 0;
            uint64_t v65 = v188 >> (*(unsigned char *)(v28 + 57) != 0);
            char v66 = 1;
            if (v65 > 127)
            {
              if (v65 > 511)
              {
                if (v65 == 512)
                {
                  char v66 = 0;
                  char v67 = 0;
                  unsigned int v64 = 16;
                  unsigned int v68 = 16;
                }
                else
                {
                  char v67 = 1;
                  unsigned int v68 = 0;
                  if (v65 == 1024)
                  {
                    char v66 = 0;
                    unsigned int v68 = 8;
                    unsigned int v64 = 16;
                  }
                }
              }
              else if (v65 == 128)
              {
                char v66 = 0;
                char v67 = 0;
                unsigned int v64 = 32;
                unsigned int v68 = 32;
              }
              else
              {
                char v67 = 1;
                unsigned int v68 = 0;
                if (v65 == 256)
                {
                  char v66 = 0;
                  char v67 = 0;
                  unsigned int v68 = 16;
                  unsigned int v64 = 32;
                }
              }
            }
            else
            {
              char v67 = 1;
              unsigned int v68 = 0;
              switch(v65)
              {
                case 4:
                  char v66 = 0;
                  char v67 = 0;
                  unsigned int v68 = 128;
                  unsigned int v64 = 256;
                  break;
                case 5:
                case 6:
                case 7:
                case 9:
                case 10:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 17:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                  break;
                case 8:
                  char v66 = 0;
                  char v67 = 0;
                  unsigned int v64 = 128;
                  unsigned int v68 = 128;
                  break;
                case 16:
                  char v66 = 0;
                  char v67 = 0;
                  unsigned int v68 = 64;
                  unsigned int v64 = 128;
                  break;
                case 32:
                  char v66 = 0;
                  char v67 = 0;
                  unsigned int v64 = 64;
                  unsigned int v68 = 64;
                  break;
                default:
                  if (v65 == 64)
                  {
                    char v66 = 0;
                    char v67 = 0;
                    unsigned int v68 = 32;
                    unsigned int v64 = 64;
                  }
                  break;
              }
            }
            unsigned int v177 = (v64 >> 3) - 1;
            if (v66) {
              unsigned int v178 = 0;
            }
            else {
              unsigned int v178 = 32 - __clz(~(-1 << -(char)__clz(v177)));
            }
            unsigned int v179 = (v68 >> 3) - 1;
            if (v67)
            {
              unsigned int v180 = 0;
              if (v178) {
                goto LABEL_255;
              }
            }
            else
            {
              unsigned int v180 = 32 - __clz(~(-1 << -(char)__clz(v179)));
              if (v180 | v178)
              {
LABEL_255:
                int v181 = 0;
                uint64_t v182 = 0;
                int v183 = v35 & v177;
                int v184 = v18 & v179;
                BOOL v185 = v178 != 0;
                BOOL v186 = v180 != 0;
                int v187 = 1;
                do
                {
                  --v178;
                  if (v185) {
                    v182 |= (unint64_t)(v187 & v183) << v181++;
                  }
                  else {
                    unsigned int v178 = 0;
                  }
                  --v180;
                  if (v186) {
                    v182 |= (unint64_t)(v187 & v184) << v181++;
                  }
                  else {
                    unsigned int v180 = 0;
                  }
                  v187 *= 2;
                  --v181;
                  BOOL v186 = v180 != 0;
                  BOOL v185 = v178 != 0;
                }
                while (v180 | v178);
                goto LABEL_267;
              }
            }
            uint64_t v182 = 0;
LABEL_267:
            unint64_t v52 = ((unint64_t)(v37 / v64 + v208 / v68 * ((v64 + v189) / v64)) << 14) + (v182 << 9);
            goto LABEL_58;
          }
          if (v201)
          {
            int v45 = 0;
            uint64_t v46 = 0;
            int v47 = 1;
            BOOL v48 = v198;
            BOOL v49 = v199;
            int v51 = v200;
            int v50 = HIDWORD(v200);
            do
            {
              --v50;
              if (v49) {
                v46 |= (unint64_t)(v47 & v35) << v45++;
              }
              else {
                int v50 = 0;
              }
              --v51;
              if (v48) {
                v46 |= (unint64_t)(v47 & v18) << v45++;
              }
              else {
                int v51 = 0;
              }
              v47 *= 2;
              --v45;
              BOOL v48 = v51 != 0;
              BOOL v49 = v50 != 0;
            }
            while (v51 | v50);
          }
          else
          {
            uint64_t v46 = 0;
          }
          unint64_t v52 = v46 << 9;
LABEL_58:
          unsigned int v53 = *(_DWORD *)(v28 + 128) >> (*(unsigned char *)(v28 + 144) + a12);
          if (v53 <= 1) {
            unsigned int v53 = 1;
          }
          unsigned int v54 = v53 + 7;
          if (v54 < 0x10) {
            unsigned int v55 = 0;
          }
          else {
            unsigned int v55 = 32 - __clz(~(-1 << -(char)__clz((v54 >> 3) - 1)));
          }
          unsigned int v56 = *(_DWORD *)(v28 + 132) >> (*(unsigned char *)(v28 + 144) + a12);
          if (v56 <= 1) {
            unsigned int v56 = 1;
          }
          unsigned int v57 = v56 + 7;
          if (v57 < 0x10)
          {
            unsigned int v58 = 0;
            if (!v55)
            {
LABEL_80:
              uint64_t v60 = 0;
              goto LABEL_81;
            }
          }
          else
          {
            unsigned int v58 = 32 - __clz(~(-1 << -(char)__clz((v57 >> 3) - 1)));
            if (!(v58 | v55)) {
              goto LABEL_80;
            }
          }
          int v59 = 0;
          uint64_t v60 = 0;
          BOOL v61 = v55 != 0;
          BOOL v62 = v58 != 0;
          int v63 = 1;
          do
          {
            --v55;
            if (v61) {
              v60 |= (unint64_t)(v63 & v35) << v59++;
            }
            else {
              unsigned int v55 = 0;
            }
            --v58;
            if (v62) {
              v60 |= (unint64_t)(v63 & v18) << v59++;
            }
            else {
              unsigned int v58 = 0;
            }
            v63 *= 2;
            --v59;
            BOOL v62 = v58 != 0;
            BOOL v61 = v55 != 0;
          }
          while (v58 | v55);
LABEL_81:
          uint64_t v69 = a7;
          int v70 = v41 < 8 || v42;
          unsigned int v71 = (char *)(a4 + 8 * v60);
          uint64_t v72 = (_OWORD *)(v206 + 8 * (v39 - a7));
          uint64_t v73 = (int8x16_t *)(a2 + v52);
          if (v215 < 8) {
            int v74 = 1;
          }
          else {
            int v74 = v70;
          }
          int8x16_t v213 = v73;
          if (v214)
          {
            int v75 = (int8x16_t *)__dst;
            if (!v74) {
              goto LABEL_93;
            }
            char v76 = v41;
            unsigned int v196 = (char *)(a4 + 8 * v60);
            int v77 = v39;
            memcpy(__dst, v73, sizeof(__dst));
            int v39 = v77;
            unsigned int v71 = v196;
            LOBYTE(v41) = v76;
            uint64_t v28 = v210;
          }
          else
          {
            int v75 = v73;
            if (!v74)
            {
LABEL_93:
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock(v72, a11, v75, v71, v41, v215);
LABEL_94:
              a7 = v69;
              uint64_t result = v213;
              if (!v214) {
                goto LABEL_26;
              }
LABEL_236:
              uint64_t result = memcpy(result, v75, 0x200uLL);
              goto LABEL_26;
            }
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE4ELj4ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = v28;
          int8x16_t v217 = v75;
          unsigned __int8 v225 = v41;
          unsigned __int8 v226 = v215;
          unsigned int v221 = v197;
          unsigned int v222 = v39 - v37;
          int8x16_t v218 = v71;
          int8x16_t v219 = v72;
          uint64_t v220 = a11;
          unsigned int v223 = v207;
          unsigned int v224 = v40;
          if (v42)
          {
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(v28 + 8) + 7384), block);
            goto LABEL_94;
          }
          unsigned int v78 = *v71;
          a7 = v69;
          if (v78 == 63)
          {
            int16x8_t v80 = *(int16x8_t *)v75;
            int8x16_t v30 = v75[1];
            int8x16_t v31 = v75[2];
            int16x8_t v81 = (int16x8_t)v75[3];
            int8x16_t v228 = *v75;
            int16x8_t v229 = (int16x8_t)v31;
            int16x8_t v232 = (int16x8_t)v30;
            int16x8_t v233 = v81;
            uint64_t v79 = 64;
          }
          else if (v78 == 1)
          {
            int16x8_t v80 = vld1q_dup_s16(v75->i16);
            int8x16_t v228 = (int8x16_t)v80;
            int16x8_t v229 = v80;
            int16x8_t v232 = v80;
            int16x8_t v233 = v80;
            uint64_t v79 = 2;
          }
          else if (*v71)
          {
            uint64_t v79 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v228, 64, (uint64_t)v75, v78, *(int8x8_t *)v32.i8, *(double *)v30.i64, *(int8x8_t *)v31.i8);
          }
          else
          {
            uint64_t v79 = 0;
            v80.i64[0] = 0;
            int8x16_t v228 = 0u;
            int16x8_t v229 = 0u;
            int16x8_t v232 = 0u;
            int16x8_t v233 = 0u;
          }
          uint64_t v82 = (uint64_t)v75->i64 + v79;
          unsigned int v83 = v71[1];
          if (v83 == 63)
          {
            int8x16_t v85 = *(int8x16_t *)v82;
            int8x16_t v30 = *(int8x16_t *)(v82 + 16);
            int8x16_t v31 = *(int8x16_t *)(v82 + 32);
            int8x16_t v86 = *(int8x16_t *)(v82 + 48);
            int8x16_t v236 = *(int8x16_t *)v82;
            int8x16_t v237 = v31;
            int8x16_t v240 = v30;
            int8x16_t v241 = v86;
            uint64_t v84 = 64;
          }
          else if (v83 == 1)
          {
            int8x16_t v85 = (int8x16_t)vld1q_dup_s16((const __int16 *)v82);
            int8x16_t v236 = v85;
            int8x16_t v237 = v85;
            int8x16_t v240 = v85;
            int8x16_t v241 = v85;
            uint64_t v84 = 2;
          }
          else if (v71[1])
          {
            uint64_t v84 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v236, 64, v82, v83, *(int8x8_t *)v80.i8, *(double *)v30.i64, *(int8x8_t *)v31.i8);
          }
          else
          {
            uint64_t v84 = 0;
            v85.i64[0] = 0;
            int8x16_t v236 = 0u;
            int8x16_t v237 = 0u;
            int8x16_t v240 = 0u;
            int8x16_t v241 = 0u;
          }
          uint64_t v87 = v82 + v84;
          unsigned int v88 = v71[2];
          if (v88 == 63)
          {
            int8x16_t v90 = *(int8x16_t *)v87;
            int8x16_t v30 = *(int8x16_t *)(v87 + 16);
            int8x16_t v31 = *(int8x16_t *)(v87 + 32);
            int8x16_t v91 = *(int8x16_t *)(v87 + 48);
            int8x16_t v230 = *(int8x16_t *)v87;
            int8x16_t v231 = v31;
            int8x16_t v234 = v30;
            int8x16_t v235 = v91;
            uint64_t v89 = 64;
          }
          else if (v88 == 1)
          {
            int8x16_t v90 = (int8x16_t)vld1q_dup_s16((const __int16 *)v87);
            int8x16_t v230 = v90;
            int8x16_t v231 = v90;
            int8x16_t v234 = v90;
            int8x16_t v235 = v90;
            uint64_t v89 = 2;
          }
          else if (v71[2])
          {
            uint64_t v89 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v230, 64, v87, v88, *(int8x8_t *)v85.i8, *(double *)v30.i64, *(int8x8_t *)v31.i8);
          }
          else
          {
            uint64_t v89 = 0;
            v90.i64[0] = 0;
            int8x16_t v230 = 0u;
            int8x16_t v231 = 0u;
            int8x16_t v234 = 0u;
            int8x16_t v235 = 0u;
          }
          uint64_t v92 = v87 + v89;
          unsigned int v93 = v71[3];
          if (v93 == 63)
          {
            int8x16_t v95 = *(int8x16_t *)v92;
            int8x16_t v30 = *(int8x16_t *)(v92 + 16);
            int8x16_t v31 = *(int8x16_t *)(v92 + 32);
            int8x16_t v96 = *(int8x16_t *)(v92 + 48);
            int8x16_t v238 = *(int8x16_t *)v92;
            int8x16_t v239 = v31;
            int8x16_t v242 = v30;
            int8x16_t v243 = v96;
            uint64_t v94 = 64;
          }
          else if (v93 == 1)
          {
            int8x16_t v95 = (int8x16_t)vld1q_dup_s16((const __int16 *)v92);
            int8x16_t v238 = v95;
            int8x16_t v239 = v95;
            int8x16_t v242 = v95;
            int8x16_t v243 = v95;
            uint64_t v94 = 2;
          }
          else if (v71[3])
          {
            uint64_t v94 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v238, 64, v92, v93, *(int8x8_t *)v90.i8, *(double *)v30.i64, *(int8x8_t *)v31.i8);
          }
          else
          {
            uint64_t v94 = 0;
            v95.i64[0] = 0;
            int8x16_t v238 = 0u;
            int8x16_t v239 = 0u;
            int8x16_t v242 = 0u;
            int8x16_t v243 = 0u;
          }
          uint64_t v97 = v92 + v94;
          unsigned int v98 = v71[4];
          if (v98 == 63)
          {
            int8x16_t v100 = *(int8x16_t *)v97;
            int8x16_t v30 = *(int8x16_t *)(v97 + 16);
            int8x16_t v31 = *(int8x16_t *)(v97 + 32);
            int8x16_t v101 = *(int8x16_t *)(v97 + 48);
            int8x16_t v244 = *(int8x16_t *)v97;
            int8x16_t v245 = v31;
            int8x16_t v248 = v30;
            int8x16_t v249 = v101;
            uint64_t v99 = 64;
          }
          else if (v98 == 1)
          {
            int8x16_t v100 = (int8x16_t)vld1q_dup_s16((const __int16 *)v97);
            int8x16_t v244 = v100;
            int8x16_t v245 = v100;
            int8x16_t v248 = v100;
            int8x16_t v249 = v100;
            uint64_t v99 = 2;
          }
          else if (v71[4])
          {
            uint64_t v99 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v244, 64, v97, v98, *(int8x8_t *)v95.i8, *(double *)v30.i64, *(int8x8_t *)v31.i8);
          }
          else
          {
            uint64_t v99 = 0;
            v100.i64[0] = 0;
            int8x16_t v244 = 0u;
            int8x16_t v245 = 0u;
            int8x16_t v248 = 0u;
            int8x16_t v249 = 0u;
          }
          uint64_t v102 = v97 + v99;
          unsigned int v103 = v71[5];
          if (v103 == 63)
          {
            int8x16_t v105 = *(int8x16_t *)v102;
            int8x16_t v30 = *(int8x16_t *)(v102 + 16);
            int8x16_t v31 = *(int8x16_t *)(v102 + 32);
            int8x16_t v106 = *(int8x16_t *)(v102 + 48);
            int8x16_t v252 = *(int8x16_t *)v102;
            int8x16_t v253 = v31;
            int8x16_t v256 = v30;
            int8x16_t v257 = v106;
            uint64_t v104 = 64;
          }
          else if (v103 == 1)
          {
            int8x16_t v105 = (int8x16_t)vld1q_dup_s16((const __int16 *)v102);
            int8x16_t v252 = v105;
            int8x16_t v253 = v105;
            int8x16_t v256 = v105;
            int8x16_t v257 = v105;
            uint64_t v104 = 2;
          }
          else if (v71[5])
          {
            uint64_t v104 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v252, 64, v102, v103, *(int8x8_t *)v100.i8, *(double *)v30.i64, *(int8x8_t *)v31.i8);
          }
          else
          {
            uint64_t v104 = 0;
            v105.i64[0] = 0;
            int8x16_t v252 = 0u;
            int8x16_t v253 = 0u;
            int8x16_t v256 = 0u;
            int8x16_t v257 = 0u;
          }
          uint64_t v107 = v102 + v104;
          unsigned int v108 = v71[6];
          if (v108 == 63)
          {
            int8x16_t v110 = *(int8x16_t *)v107;
            int8x16_t v30 = *(int8x16_t *)(v107 + 16);
            int8x16_t v31 = *(int8x16_t *)(v107 + 32);
            int8x16_t v111 = *(int8x16_t *)(v107 + 48);
            int8x16_t v246 = *(int8x16_t *)v107;
            int8x16_t v247 = v31;
            int8x16_t v250 = v30;
            int8x16_t v251 = v111;
            uint64_t v109 = 64;
          }
          else if (v108 == 1)
          {
            int8x16_t v110 = (int8x16_t)vld1q_dup_s16((const __int16 *)v107);
            int8x16_t v246 = v110;
            int8x16_t v247 = v110;
            int8x16_t v250 = v110;
            int8x16_t v251 = v110;
            uint64_t v109 = 2;
          }
          else if (v71[6])
          {
            uint64_t v109 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v246, 64, v107, v108, *(int8x8_t *)v105.i8, *(double *)v30.i64, *(int8x8_t *)v31.i8);
          }
          else
          {
            uint64_t v109 = 0;
            v110.i64[0] = 0;
            int8x16_t v246 = 0u;
            int8x16_t v247 = 0u;
            int8x16_t v250 = 0u;
            int8x16_t v251 = 0u;
          }
          uint64_t v112 = v107 + v109;
          unsigned int v113 = v71[7];
          if (v113 == 63)
          {
            int8x16_t v32 = *(int8x16_t *)v112;
            int8x16_t v30 = *(int8x16_t *)(v112 + 16);
            int8x16_t v31 = *(int8x16_t *)(v112 + 32);
            int8x16_t v115 = *(int8x16_t *)(v112 + 48);
            int8x16_t v254 = *(int8x16_t *)v112;
            int8x16_t v255 = v31;
            int8x16_t v258 = v30;
            int8x16_t v259 = v115;
            uint64_t v114 = v223;
            if (v223) {
              goto LABEL_155;
            }
          }
          else if (v113 == 1)
          {
            int8x16_t v32 = (int8x16_t)vld1q_dup_s16((const __int16 *)v112);
            int8x16_t v254 = v32;
            int8x16_t v255 = v32;
            int8x16_t v258 = v32;
            int8x16_t v259 = v32;
            uint64_t v114 = v223;
            if (v223) {
              goto LABEL_155;
            }
          }
          else
          {
            if (v71[7])
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v254, 64, v112, v113, *(int8x8_t *)v110.i8, *(double *)v30.i64, *(int8x8_t *)v31.i8);
              uint64_t v114 = v223;
              if (!v223) {
                goto LABEL_186;
              }
LABEL_155:
              if (!v224) {
                goto LABEL_186;
              }
              uint64_t v116 = 0;
              unint64_t v117 = (unint64_t)v221 << 6;
              uint64_t v118 = 8 * v222;
              uint64_t v119 = &v228.i8[v117 + v118];
              int8x16_t v120 = v219;
              uint64_t v121 = v220;
              unint64_t v122 = 8 * v224;
              if (v122 <= 1) {
                unint64_t v123 = 1;
              }
              else {
                unint64_t v123 = 8 * v224;
              }
              unint64_t v124 = v117 + v118;
              unint64_t v125 = &v228.i8[v117 + v118];
              if (v123) {
                BOOL v126 = (v123 - 1) >> 32 == 0;
              }
              else {
                BOOL v126 = 0;
              }
              char v127 = !v126;
              uint64_t v128 = v123 & 0x7FFFFFFE0;
              uint64_t v129 = v123 & 0x7FFFFFFF8;
              uint64_t v130 = &v229.i8[v124];
              uint64_t v131 = (int8x16_t *)(v219 + 1);
              unint64_t v132 = v119;
              unint64_t v133 = v219;
              while (2)
              {
                uint64_t v134 = (char *)v120 + v121 * v116;
                BOOL v135 = &v119[64 * v116];
                if ((unint64_t)(&v125[64 * v116] - v134) < 0x20) {
                  char v136 = 1;
                }
                else {
                  char v136 = v127;
                }
                if (v136)
                {
                  int v137 = 0;
LABEL_183:
                  unsigned int v146 = v137 + 1;
                  do
                  {
                    char v147 = *v134++;
                    *v135++ = v147;
                  }
                  while (v122 > v146++);
                }
                else
                {
                  if (v123 >= 0x20)
                  {
                    uint64_t v139 = v131;
                    int v140 = (int8x16_t *)v130;
                    uint64_t v141 = v123 & 0x7FFFFFFE0;
                    do
                    {
                      int8x16_t v32 = v139[-1];
                      int8x16_t v30 = *v139;
                      v140[-1] = v32;
                      *int v140 = v30;
                      v140 += 2;
                      v139 += 2;
                      v141 -= 32;
                    }
                    while (v141);
                    if (v123 == v128) {
                      goto LABEL_166;
                    }
                    uint64_t v138 = v123 & 0x7FFFFFFE0;
                    if ((v123 & 0x18) == 0)
                    {
                      v134 += v128;
                      v135 += v128;
                      int v137 = v123 & 0xFFFFFFE0;
                      goto LABEL_183;
                    }
                  }
                  else
                  {
                    uint64_t v138 = 0;
                  }
                  v135 += v129;
                  unint64_t v142 = v138 - (v123 & 0x7FFFFFFF8);
                  long long v143 = (uint64_t *)((char *)v133 + v138);
                  unint64_t v144 = (uint64_t *)&v132[v138];
                  do
                  {
                    uint64_t v145 = *v143++;
                    v32.i64[0] = v145;
                    *v144++ = v145;
                    v142 += 8;
                  }
                  while (v142);
                  if (v123 != v129)
                  {
                    v134 += v129;
                    int v137 = v123 & 0xFFFFFFF8;
                    goto LABEL_183;
                  }
                }
LABEL_166:
                ++v116;
                v130 += 64;
                uint64_t v131 = (int8x16_t *)((char *)v131 + v121);
                unint64_t v133 = (_OWORD *)((char *)v133 + v121);
                v132 += 64;
                if (v116 == v114) {
                  goto LABEL_186;
                }
                continue;
              }
            }
            v32.i64[0] = 0;
            int8x16_t v254 = 0u;
            int8x16_t v255 = 0u;
            int8x16_t v258 = 0u;
            int8x16_t v259 = 0u;
            uint64_t v114 = v223;
            if (v223) {
              goto LABEL_155;
            }
          }
LABEL_186:
          char v149 = 0;
          unsigned int v151 = v217;
          __int32 v150 = v218;
          int v152 = v225;
          int v153 = v226;
          if (v225 >= 4u) {
            int v154 = 4;
          }
          else {
            int v154 = v225;
          }
          if (v226 >= 2u) {
            int v155 = 2;
          }
          else {
            int v155 = v226;
          }
          if (v154 && v155)
          {
            v32.i64[0] = v228.i64[0];
            int8x16_t v30 = (int8x16_t)v229;
            int8x16_t v31 = (int8x16_t)v232;
            int16x8_t v156 = v233;
            *int8x16_t v217 = v228;
            v151[1] = v31;
            v151[2] = v30;
            v151[3] = (int8x16_t)v156;
            v151 += 4;
            char v149 = 63;
          }
          char v157 = 0;
          *__int32 v150 = v149;
          if (v153 <= 2) {
            int v158 = 2;
          }
          else {
            int v158 = v153;
          }
          unsigned int v159 = v158 - 2;
          if (v159 >= 2) {
            unsigned int v159 = 2;
          }
          if (v154 && v159)
          {
            v32.i64[0] = v236.i64[0];
            int8x16_t v30 = v237;
            int8x16_t v31 = v240;
            int8x16_t v160 = v241;
            *unsigned int v151 = v236;
            v151[1] = v31;
            v151[2] = v30;
            v151[3] = v160;
            v151 += 4;
            char v157 = 63;
          }
          char v161 = 0;
          v150[1] = v157;
          if (v152 <= 4) {
            int v152 = 4;
          }
          unsigned int v162 = v152 - 4;
          if (v162 >= 4) {
            unsigned int v162 = 4;
          }
          if (v162 && v155)
          {
            v32.i64[0] = v230.i64[0];
            int8x16_t v30 = v231;
            int8x16_t v31 = v234;
            int8x16_t v163 = v235;
            *unsigned int v151 = v230;
            v151[1] = v31;
            v151[2] = v30;
            v151[3] = v163;
            v151 += 4;
            char v161 = 63;
          }
          char v164 = 0;
          v150[2] = v161;
          if (v162)
          {
            uint64_t result = v213;
            if (v159)
            {
              v32.i64[0] = v238.i64[0];
              int8x16_t v30 = v239;
              int8x16_t v31 = v242;
              int8x16_t v165 = v243;
              *unsigned int v151 = v238;
              v151[1] = v31;
              v151[2] = v30;
              v151[3] = v165;
              v151 += 4;
              char v164 = 63;
            }
          }
          else
          {
            uint64_t result = v213;
          }
          char v166 = 0;
          v150[3] = v164;
          if (v153 <= 4) {
            int v167 = 4;
          }
          else {
            int v167 = v153;
          }
          unsigned int v168 = v167 - 4;
          if (v168 >= 2) {
            unsigned int v168 = 2;
          }
          if (v154 && v168)
          {
            v32.i64[0] = v244.i64[0];
            int8x16_t v30 = v245;
            int8x16_t v31 = v248;
            int8x16_t v169 = v249;
            *unsigned int v151 = v244;
            v151[1] = v31;
            v151[2] = v30;
            v151[3] = v169;
            v151 += 4;
            char v166 = 63;
          }
          char v170 = 0;
          v150[4] = v166;
          if (v153 <= 6) {
            int v153 = 6;
          }
          unsigned int v171 = v153 - 6;
          if (v171 >= 2) {
            unsigned int v171 = 2;
          }
          if (v154 && v171)
          {
            v32.i64[0] = v252.i64[0];
            int8x16_t v30 = v253;
            int8x16_t v31 = v256;
            int8x16_t v172 = v257;
            *unsigned int v151 = v252;
            v151[1] = v31;
            v151[2] = v30;
            v151[3] = v172;
            v151 += 4;
            char v170 = 63;
          }
          char v173 = 0;
          v150[5] = v170;
          if (v162 && v168)
          {
            v32.i64[0] = v246.i64[0];
            int8x16_t v30 = v247;
            int8x16_t v31 = v250;
            int8x16_t v174 = v251;
            *unsigned int v151 = v246;
            v151[1] = v31;
            v151[2] = v30;
            v151[3] = v174;
            v151 += 4;
            char v173 = 63;
          }
          char v175 = 0;
          v150[6] = v173;
          if (v162)
          {
            if (v171)
            {
              v32.i64[0] = v254.i64[0];
              int8x16_t v30 = v255;
              int8x16_t v31 = v258;
              int8x16_t v176 = v259;
              *unsigned int v151 = v254;
              v151[1] = v31;
              v151[2] = v30;
              v151[3] = v176;
              char v175 = 63;
            }
          }
          v150[7] = v175;
          if (v214) {
            goto LABEL_236;
          }
LABEL_26:
          BOOL v23 = v35++ == v202 >> 3;
          uint64_t v28 = v210;
        }
        while (!v23);
        BOOL v23 = v18++ == v195;
      }
      while (!v23);
    }
  }
  return result;
}

uint64_t AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10, uint64_t a11, char a12)
{
  uint64_t v12 = MEMORY[0x270FA5388](a1);
  unsigned int v14 = v13;
  unsigned int v16 = v15;
  unsigned int v18 = v17;
  unsigned int v20 = v19;
  uint64_t v289 = v21;
  uint64_t v290 = v22;
  uint64_t v276 = v23;
  uint64_t v24 = v12;
  uint64_t v440 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(v12, 0);
  unsigned int v292 = v14;
  unsigned int v278 = v14 + a10 - 1;
  uint64_t v294 = v24;
  if (*(void *)(v24 + 168)) {
    int v25 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v25 = 0;
  }
  unsigned int v26 = v20 - 1;
  unsigned int v27 = v18 - 1;
  unsigned int v28 = v14 >> 3;
  unsigned int v277 = v278 >> 3;
  BOOL v29 = (v25 & 0xD00) == 0 || v25 == 768;
  int v30 = v25 & 0xE00;
  int v32 = !v29 && v30 != 1024;
  int v298 = v32;
  uint64_t result = v24;
  if (*(unsigned char *)(v24 + 232))
  {
    unsigned int v34 = *(unsigned __int8 *)(v24 + 255);
    unsigned int v35 = *(unsigned __int8 *)(v24 + 254);
    char v36 = __clz(v26);
    if (1 << v34 >= v18 || v20 >> v35)
    {
      if (!(v18 >> v34) && 1 << v35 < v20)
      {
        if (v18 < 2) {
          unsigned int v39 = 0;
        }
        else {
          unsigned int v39 = __clz(~(-1 << -(char)__clz(v27))) - 32;
        }
        v35 += v34 + v39;
        unsigned int v34 = -v39;
      }
    }
    else
    {
      unsigned int v37 = 32 - __clz(~(-1 << -v36));
      unsigned int v38 = v35 + v34;
      if (v20 < 2) {
        unsigned int v37 = 0;
      }
      unsigned int v34 = v38 - v37;
      unsigned int v35 = v37;
    }
    if (v20 < 2)
    {
      if (v35) {
        goto LABEL_27;
      }
    }
    else if (32 - __clz(~(-1 << -v36)) < v35)
    {
LABEL_27:
      BOOL v288 = 0;
LABEL_32:
      unsigned int v285 = v35 - 3;
      unsigned int v282 = v34 - 3;
      int v41 = -1 << *(unsigned char *)(*(void *)(v24 + 208) + 48);
      unsigned int v275 = (((~v41 + v20) & v41) + ~(-1 << v35)) >> v35;
      goto LABEL_33;
    }
    if (v18 < 2) {
      unsigned int v40 = 0;
    }
    else {
      unsigned int v40 = 32 - __clz(~(-1 << -(char)__clz(v27)));
    }
    BOOL v288 = v40 >= v34;
    goto LABEL_32;
  }
  BOOL v288 = 0;
  unsigned int v275 = 0;
  unsigned int v282 = 0;
  unsigned int v285 = 0;
LABEL_33:
  if (v28 <= v277)
  {
    unsigned int v287 = v16 + a9 - 1;
    unsigned int v274 = v16 >> 3;
    if (v16 >> 3 <= v287 >> 3)
    {
      unsigned int v296 = v26 >> 3;
      unsigned int v273 = v27 >> 3;
      int v295 = (v26 & 7) + 1;
      int v272 = (v27 & 7) + 1;
      int v271 = ~(-1 << v282);
      uint32x2_t v42 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(v20, v18), (int32x2_t)0x700000007);
      int8x8_t v43 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v42, 3uLL))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x1000000010, v42));
      __int32 v283 = v43.i32[0] | v43.i32[1];
      BOOL v280 = v43.i32[1] != 0;
      int8x8_t v281 = v43;
      BOOL v279 = v43.i32[0] != 0;
      unsigned int v286 = v16;
      do
      {
        unsigned int v44 = (8 * v28) | 7;
        if (8 * v28 <= v292) {
          int v45 = v292;
        }
        else {
          int v45 = 8 * v28;
        }
        if (v278 < v44) {
          unsigned int v44 = v278;
        }
        int v284 = v45 - 8 * v28;
        int v293 = v44 - v45 + 1;
        unsigned int v46 = v274;
        int v47 = v272;
        if (v28 != v273) {
          int v47 = 8;
        }
        unsigned int v299 = v47;
        int v48 = v28 & v271;
        uint64_t v291 = v276 + (v45 - v292) * a11;
        do
        {
          unsigned int v49 = 8 * v46;
          unsigned int v50 = 8 * (v46 + 1) - 1;
          if (8 * v46 <= v16) {
            int v51 = v16;
          }
          else {
            int v51 = 8 * v46;
          }
          if (v287 < v50) {
            unsigned int v50 = v287;
          }
          int v52 = v50 - v51 + 1;
          if (v46 == v296) {
            unsigned int v53 = v295;
          }
          else {
            unsigned int v53 = 8;
          }
          BOOL v54 = 1;
          if (8 * v28 >= v292 && v49 >= v16)
          {
            int v55 = v295;
            if (v46 != v296) {
              int v55 = 8;
            }
            BOOL v54 = v52 != v55 || v293 != v299;
          }
          if (v288)
          {
            if (v285 | v282)
            {
              int v57 = 0;
              uint64_t v58 = 0;
              int v59 = 1;
              BOOL v60 = v285 != 0;
              BOOL v61 = v282 != 0;
              unsigned int v62 = v285;
              unsigned int v63 = v282;
              do
              {
                --v62;
                if (v60) {
                  v58 |= (unint64_t)(v46 & ~(-1 << v285) & v59) << v57++;
                }
                else {
                  unsigned int v62 = 0;
                }
                --v63;
                if (v61) {
                  v58 |= (unint64_t)(v48 & v59) << v57++;
                }
                else {
                  unsigned int v63 = 0;
                }
                v59 *= 2;
                --v57;
                BOOL v61 = v63 != 0;
                BOOL v60 = v62 != 0;
              }
              while (v63 | v62);
            }
            else
            {
              uint64_t v58 = 0;
            }
            uint64_t v71 = *(void *)(result + 320) * ((v46 >> v285) + (v28 >> v282) * v275) + (v58 << 11);
          }
          else
          {
            if (v283)
            {
              int v64 = 0;
              uint64_t v65 = 0;
              int v66 = 1;
              BOOL v67 = v280;
              BOOL v68 = v279;
              __int32 v69 = v281.i32[1];
              __int32 v70 = v281.i32[0];
              do
              {
                --v69;
                if (v67) {
                  v65 |= (unint64_t)(v66 & v46) << v64++;
                }
                else {
                  __int32 v69 = 0;
                }
                --v70;
                if (v68) {
                  v65 |= (unint64_t)(v66 & v28) << v64++;
                }
                else {
                  __int32 v70 = 0;
                }
                v66 *= 2;
                --v64;
                BOOL v68 = v70 != 0;
                BOOL v67 = v69 != 0;
              }
              while (v70 | v69);
            }
            else
            {
              uint64_t v65 = 0;
            }
            uint64_t v71 = v65 << 11;
          }
          unsigned int v72 = *(_DWORD *)(result + 128) >> (*(unsigned char *)(result + 144) + a12);
          if (v72 <= 1) {
            unsigned int v72 = 1;
          }
          unsigned int v73 = v72 + 7;
          if (v73 < 0x10) {
            unsigned int v74 = 0;
          }
          else {
            unsigned int v74 = 32 - __clz(~(-1 << -(char)__clz((v73 >> 3) - 1)));
          }
          unsigned int v75 = *(_DWORD *)(result + 132) >> (*(unsigned char *)(result + 144) + a12);
          if (v75 <= 1) {
            unsigned int v75 = 1;
          }
          unsigned int v76 = v75 + 7;
          if (v76 < 0x10) {
            unsigned int v77 = 0;
          }
          else {
            unsigned int v77 = 32 - __clz(~(-1 << -(char)__clz((v76 >> 3) - 1)));
          }
          if (v77 | v74)
          {
            int v78 = 0;
            uint64_t v79 = 0;
            BOOL v80 = v74 != 0;
            BOOL v81 = v77 != 0;
            int v82 = 1;
            do
            {
              --v74;
              if (v80) {
                v79 |= (unint64_t)(v82 & v46) << v78++;
              }
              else {
                unsigned int v74 = 0;
              }
              --v77;
              if (v81) {
                v79 |= (unint64_t)(v82 & v28) << v78++;
              }
              else {
                unsigned int v77 = 0;
              }
              v82 *= 2;
              --v78;
              BOOL v81 = v77 != 0;
              BOOL v80 = v74 != 0;
            }
            while (v77 | v74);
          }
          else
          {
            uint64_t v79 = 0;
          }
          int v83 = v53 < 8 || v54;
          uint64_t v84 = (char *)(v290 + 8 * v79);
          uint64_t v85 = v291 + 32 * (v51 - v16);
          int8x16_t v86 = (void *)(v289 + v71);
          if (v299 < 8) {
            int v87 = 1;
          }
          else {
            int v87 = v83;
          }
          int32x4_t v297 = v86;
          if (v298)
          {
            unsigned int v88 = __dst;
            if (!v87) {
              goto LABEL_121;
            }
            int v89 = v52;
            char v90 = v53;
            memcpy(__dst, v86, sizeof(__dst));
            unsigned int v49 = 8 * v46;
            LOBYTE(v53) = v90;
            int v52 = v89;
            int v48 = v28 & v271;
            uint64_t result = v294;
          }
          else
          {
            unsigned int v88 = v86;
            if (!v87)
            {
LABEL_121:
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock(v85, a11, (unint64_t)v88, v84, v53, v299);
              goto LABEL_122;
            }
          }
          block[0] = MEMORY[0x263EF8330];
          unsigned int v91 = v51 - v49;
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE18ELj4ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = result;
          float32x4_t v301 = v88;
          unsigned __int8 v309 = v53;
          unsigned __int8 v310 = v299;
          int v305 = v284;
          unsigned int v306 = v91;
          float32x4_t v302 = v84;
          uint64_t v303 = v85;
          uint64_t v304 = a11;
          int v307 = v293;
          unsigned int v308 = v52;
          if (v54)
          {
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(result + 8) + 7384), block);
LABEL_122:
            unsigned int v16 = v286;
            unsigned int v92 = v46 + 1;
            goto LABEL_207;
          }
          unsigned int v93 = *v84;
          if (v93 == 255)
          {
            float64x2_t v96 = *((float64x2_t *)v88 + 1);
            float64x2_t v97 = *((float64x2_t *)v88 + 2);
            float64x2_t v98 = *((float64x2_t *)v88 + 3);
            float64x2_t v99 = *((float64x2_t *)v88 + 4);
            float64x2_t v100 = *((float64x2_t *)v88 + 5);
            float64x2_t v101 = *((float64x2_t *)v88 + 6);
            float64x2_t v102 = *((float64x2_t *)v88 + 7);
            float64x2_t v103 = *((float64x2_t *)v88 + 8);
            float64x2_t v104 = *((float64x2_t *)v88 + 9);
            float64x2_t v105 = *((float64x2_t *)v88 + 10);
            float64x2_t v106 = *((float64x2_t *)v88 + 11);
            float64x2_t v107 = *((float64x2_t *)v88 + 12);
            float64x2_t v108 = *((float64x2_t *)v88 + 13);
            float64x2_t v109 = *((float64x2_t *)v88 + 14);
            float64x2_t v110 = *((float64x2_t *)v88 + 15);
            float64x2_t v312 = *(float64x2_t *)v88;
            float64x2_t v313 = v96;
            float64x2_t v314 = v97;
            float64x2_t v315 = v98;
            float64x2_t v316 = v103;
            float64x2_t v317 = v104;
            float64x2_t v318 = v105;
            float64x2_t v319 = v106;
            float64x2_t v328 = v99;
            float64x2_t v329 = v100;
            float64x2_t v330 = v101;
            float64x2_t v331 = v102;
            uint64_t v94 = 256;
            float64x2_t v332 = v107;
            float64x2_t v333 = v108;
            float64x2_t v334 = v109;
            float64x2_t v335 = v110;
          }
          else if (v93 == 7)
          {
            float64x2_t v95 = vld1q_dup_f64((const double *)v88);
            float64x2_t v312 = v95;
            float64x2_t v313 = v95;
            float64x2_t v314 = v95;
            float64x2_t v315 = v95;
            float64x2_t v316 = v95;
            float64x2_t v317 = v95;
            float64x2_t v318 = v95;
            float64x2_t v319 = v95;
            float64x2_t v328 = v95;
            float64x2_t v329 = v95;
            float64x2_t v330 = v95;
            float64x2_t v331 = v95;
            float64x2_t v332 = v95;
            float64x2_t v333 = v95;
            uint64_t v94 = 8;
            float64x2_t v334 = v95;
            float64x2_t v335 = v95;
          }
          else if (*v84)
          {
            uint64_t v94 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((uint64_t)&v312, 256, (uint64_t)v88, v93);
          }
          else
          {
            uint64_t v94 = 0;
            float64x2_t v319 = 0u;
            float64x2_t v318 = 0u;
            float64x2_t v317 = 0u;
            float64x2_t v316 = 0u;
            float64x2_t v315 = 0u;
            float64x2_t v314 = 0u;
            float64x2_t v313 = 0u;
            float64x2_t v312 = 0u;
            float64x2_t v328 = 0u;
            float64x2_t v329 = 0u;
            float64x2_t v330 = 0u;
            float64x2_t v331 = 0u;
            float64x2_t v332 = 0u;
            float64x2_t v333 = 0u;
            float64x2_t v334 = 0u;
            float64x2_t v335 = 0u;
          }
          uint64_t v111 = (uint64_t)&v88[v94];
          unsigned int v112 = v84[1];
          if (v112 == 255)
          {
            float64x2_t v115 = *(float64x2_t *)(v111 + 16);
            float64x2_t v116 = *(float64x2_t *)(v111 + 32);
            float64x2_t v117 = *(float64x2_t *)(v111 + 48);
            float64x2_t v118 = *(float64x2_t *)(v111 + 64);
            float64x2_t v119 = *(float64x2_t *)(v111 + 80);
            float64x2_t v120 = *(float64x2_t *)(v111 + 96);
            float64x2_t v121 = *(float64x2_t *)(v111 + 112);
            float64x2_t v122 = *(float64x2_t *)(v111 + 128);
            float64x2_t v123 = *(float64x2_t *)(v111 + 144);
            float64x2_t v124 = *(float64x2_t *)(v111 + 160);
            float64x2_t v125 = *(float64x2_t *)(v111 + 176);
            float64x2_t v126 = *(float64x2_t *)(v111 + 192);
            float64x2_t v127 = *(float64x2_t *)(v111 + 208);
            float64x2_t v128 = *(float64x2_t *)(v111 + 224);
            float64x2_t v129 = *(float64x2_t *)(v111 + 240);
            float64x2_t v344 = *(float64x2_t *)v111;
            float64x2_t v345 = v115;
            float64x2_t v346 = v116;
            float64x2_t v347 = v117;
            float64x2_t v348 = v122;
            float64x2_t v349 = v123;
            float64x2_t v350 = v124;
            float64x2_t v351 = v125;
            float64x2_t v360 = v118;
            float64x2_t v361 = v119;
            float64x2_t v362 = v120;
            float64x2_t v363 = v121;
            uint64_t v113 = 256;
            float64x2_t v364 = v126;
            float64x2_t v365 = v127;
            float64x2_t v366 = v128;
            float64x2_t v367 = v129;
          }
          else if (v112 == 7)
          {
            float64x2_t v114 = vld1q_dup_f64((const double *)v111);
            float64x2_t v344 = v114;
            float64x2_t v345 = v114;
            float64x2_t v346 = v114;
            float64x2_t v347 = v114;
            float64x2_t v348 = v114;
            float64x2_t v349 = v114;
            float64x2_t v350 = v114;
            float64x2_t v351 = v114;
            float64x2_t v360 = v114;
            float64x2_t v361 = v114;
            float64x2_t v362 = v114;
            float64x2_t v363 = v114;
            float64x2_t v364 = v114;
            float64x2_t v365 = v114;
            uint64_t v113 = 8;
            float64x2_t v366 = v114;
            float64x2_t v367 = v114;
          }
          else if (v84[1])
          {
            uint64_t v113 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((uint64_t)&v344, 256, v111, v112);
          }
          else
          {
            uint64_t v113 = 0;
            float64x2_t v350 = 0u;
            float64x2_t v351 = 0u;
            float64x2_t v348 = 0u;
            float64x2_t v349 = 0u;
            float64x2_t v346 = 0u;
            float64x2_t v347 = 0u;
            float64x2_t v344 = 0u;
            float64x2_t v345 = 0u;
            float64x2_t v360 = 0u;
            float64x2_t v361 = 0u;
            float64x2_t v362 = 0u;
            float64x2_t v363 = 0u;
            float64x2_t v364 = 0u;
            float64x2_t v365 = 0u;
            float64x2_t v366 = 0u;
            float64x2_t v367 = 0u;
          }
          uint64_t v130 = v111 + v113;
          unsigned int v131 = v84[2];
          if (v131 == 255)
          {
            float64x2_t v134 = *(float64x2_t *)(v130 + 16);
            float64x2_t v135 = *(float64x2_t *)(v130 + 32);
            float64x2_t v136 = *(float64x2_t *)(v130 + 48);
            float64x2_t v137 = *(float64x2_t *)(v130 + 64);
            float64x2_t v138 = *(float64x2_t *)(v130 + 80);
            float64x2_t v139 = *(float64x2_t *)(v130 + 96);
            float64x2_t v140 = *(float64x2_t *)(v130 + 112);
            float64x2_t v141 = *(float64x2_t *)(v130 + 128);
            float64x2_t v142 = *(float64x2_t *)(v130 + 144);
            float64x2_t v143 = *(float64x2_t *)(v130 + 160);
            float64x2_t v144 = *(float64x2_t *)(v130 + 176);
            float64x2_t v145 = *(float64x2_t *)(v130 + 192);
            float64x2_t v146 = *(float64x2_t *)(v130 + 208);
            float64x2_t v147 = *(float64x2_t *)(v130 + 224);
            float64x2_t v148 = *(float64x2_t *)(v130 + 240);
            float64x2_t v320 = *(float64x2_t *)v130;
            float64x2_t v321 = v134;
            float64x2_t v322 = v135;
            float64x2_t v323 = v136;
            float64x2_t v324 = v141;
            float64x2_t v325 = v142;
            float64x2_t v326 = v143;
            float64x2_t v327 = v144;
            float64x2_t v336 = v137;
            float64x2_t v337 = v138;
            float64x2_t v338 = v139;
            float64x2_t v339 = v140;
            uint64_t v132 = 256;
            float64x2_t v340 = v145;
            float64x2_t v341 = v146;
            float64x2_t v342 = v147;
            float64x2_t v343 = v148;
          }
          else if (v131 == 7)
          {
            float64x2_t v133 = vld1q_dup_f64((const double *)v130);
            float64x2_t v320 = v133;
            float64x2_t v321 = v133;
            float64x2_t v322 = v133;
            float64x2_t v323 = v133;
            float64x2_t v324 = v133;
            float64x2_t v325 = v133;
            float64x2_t v326 = v133;
            float64x2_t v327 = v133;
            float64x2_t v336 = v133;
            float64x2_t v337 = v133;
            float64x2_t v338 = v133;
            float64x2_t v339 = v133;
            float64x2_t v340 = v133;
            float64x2_t v341 = v133;
            uint64_t v132 = 8;
            float64x2_t v342 = v133;
            float64x2_t v343 = v133;
          }
          else if (v84[2])
          {
            uint64_t v132 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((uint64_t)&v320, 256, v130, v131);
          }
          else
          {
            uint64_t v132 = 0;
            float64x2_t v326 = 0u;
            float64x2_t v327 = 0u;
            float64x2_t v324 = 0u;
            float64x2_t v325 = 0u;
            float64x2_t v322 = 0u;
            float64x2_t v323 = 0u;
            float64x2_t v320 = 0u;
            float64x2_t v321 = 0u;
            float64x2_t v336 = 0u;
            float64x2_t v337 = 0u;
            float64x2_t v338 = 0u;
            float64x2_t v339 = 0u;
            float64x2_t v340 = 0u;
            float64x2_t v341 = 0u;
            float64x2_t v342 = 0u;
            float64x2_t v343 = 0u;
          }
          uint64_t v149 = v130 + v132;
          unsigned int v150 = v84[3];
          if (v150 == 255)
          {
            float64x2_t v153 = *(float64x2_t *)(v149 + 16);
            float64x2_t v154 = *(float64x2_t *)(v149 + 32);
            float64x2_t v155 = *(float64x2_t *)(v149 + 48);
            float64x2_t v156 = *(float64x2_t *)(v149 + 64);
            float64x2_t v157 = *(float64x2_t *)(v149 + 80);
            float64x2_t v158 = *(float64x2_t *)(v149 + 96);
            float64x2_t v159 = *(float64x2_t *)(v149 + 112);
            float64x2_t v160 = *(float64x2_t *)(v149 + 128);
            float64x2_t v161 = *(float64x2_t *)(v149 + 144);
            float64x2_t v162 = *(float64x2_t *)(v149 + 160);
            float64x2_t v163 = *(float64x2_t *)(v149 + 176);
            float64x2_t v164 = *(float64x2_t *)(v149 + 192);
            float64x2_t v165 = *(float64x2_t *)(v149 + 208);
            float64x2_t v166 = *(float64x2_t *)(v149 + 224);
            float64x2_t v167 = *(float64x2_t *)(v149 + 240);
            float64x2_t v352 = *(float64x2_t *)v149;
            float64x2_t v353 = v153;
            float64x2_t v354 = v154;
            float64x2_t v355 = v155;
            float64x2_t v356 = v160;
            float64x2_t v357 = v161;
            float64x2_t v358 = v162;
            float64x2_t v359 = v163;
            float64x2_t v368 = v156;
            float64x2_t v369 = v157;
            float64x2_t v370 = v158;
            float64x2_t v371 = v159;
            uint64_t v151 = 256;
            float64x2_t v372 = v164;
            float64x2_t v373 = v165;
            float64x2_t v374 = v166;
            float64x2_t v375 = v167;
          }
          else if (v150 == 7)
          {
            float64x2_t v152 = vld1q_dup_f64((const double *)v149);
            float64x2_t v352 = v152;
            float64x2_t v353 = v152;
            float64x2_t v354 = v152;
            float64x2_t v355 = v152;
            float64x2_t v356 = v152;
            float64x2_t v357 = v152;
            float64x2_t v358 = v152;
            float64x2_t v359 = v152;
            float64x2_t v368 = v152;
            float64x2_t v369 = v152;
            float64x2_t v370 = v152;
            float64x2_t v371 = v152;
            float64x2_t v372 = v152;
            float64x2_t v373 = v152;
            uint64_t v151 = 8;
            float64x2_t v374 = v152;
            float64x2_t v375 = v152;
          }
          else if (v84[3])
          {
            uint64_t v151 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((uint64_t)&v352, 256, v149, v150);
          }
          else
          {
            uint64_t v151 = 0;
            float64x2_t v358 = 0u;
            float64x2_t v359 = 0u;
            float64x2_t v356 = 0u;
            float64x2_t v357 = 0u;
            float64x2_t v354 = 0u;
            float64x2_t v355 = 0u;
            float64x2_t v352 = 0u;
            float64x2_t v353 = 0u;
            float64x2_t v368 = 0u;
            float64x2_t v369 = 0u;
            float64x2_t v370 = 0u;
            float64x2_t v371 = 0u;
            float64x2_t v372 = 0u;
            float64x2_t v373 = 0u;
            float64x2_t v374 = 0u;
            float64x2_t v375 = 0u;
          }
          uint64_t v168 = v149 + v151;
          unsigned int v169 = v84[4];
          if (v169 == 255)
          {
            float64x2_t v172 = *(float64x2_t *)(v168 + 16);
            float64x2_t v173 = *(float64x2_t *)(v168 + 32);
            float64x2_t v174 = *(float64x2_t *)(v168 + 48);
            float64x2_t v175 = *(float64x2_t *)(v168 + 64);
            float64x2_t v176 = *(float64x2_t *)(v168 + 80);
            float64x2_t v177 = *(float64x2_t *)(v168 + 96);
            float64x2_t v178 = *(float64x2_t *)(v168 + 112);
            float64x2_t v179 = *(float64x2_t *)(v168 + 128);
            float64x2_t v180 = *(float64x2_t *)(v168 + 144);
            float64x2_t v181 = *(float64x2_t *)(v168 + 160);
            float64x2_t v182 = *(float64x2_t *)(v168 + 176);
            float64x2_t v183 = *(float64x2_t *)(v168 + 192);
            float64x2_t v184 = *(float64x2_t *)(v168 + 208);
            float64x2_t v185 = *(float64x2_t *)(v168 + 224);
            float64x2_t v186 = *(float64x2_t *)(v168 + 240);
            float64x2_t v376 = *(float64x2_t *)v168;
            float64x2_t v377 = v172;
            float64x2_t v378 = v173;
            float64x2_t v379 = v174;
            float64x2_t v380 = v179;
            float64x2_t v381 = v180;
            float64x2_t v382 = v181;
            float64x2_t v383 = v182;
            float64x2_t v392 = v175;
            float64x2_t v393 = v176;
            float64x2_t v394 = v177;
            float64x2_t v395 = v178;
            uint64_t v170 = 256;
            float64x2_t v396 = v183;
            float64x2_t v397 = v184;
            float64x2_t v398 = v185;
            float64x2_t v399 = v186;
          }
          else if (v169 == 7)
          {
            float64x2_t v171 = vld1q_dup_f64((const double *)v168);
            float64x2_t v376 = v171;
            float64x2_t v377 = v171;
            float64x2_t v378 = v171;
            float64x2_t v379 = v171;
            float64x2_t v380 = v171;
            float64x2_t v381 = v171;
            float64x2_t v382 = v171;
            float64x2_t v383 = v171;
            float64x2_t v392 = v171;
            float64x2_t v393 = v171;
            float64x2_t v394 = v171;
            float64x2_t v395 = v171;
            float64x2_t v396 = v171;
            float64x2_t v397 = v171;
            float64x2_t v398 = v171;
            uint64_t v170 = 8;
            float64x2_t v399 = v171;
          }
          else if (v84[4])
          {
            uint64_t v170 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((uint64_t)&v376, 256, v168, v169);
          }
          else
          {
            uint64_t v170 = 0;
            float64x2_t v382 = 0u;
            float64x2_t v383 = 0u;
            float64x2_t v380 = 0u;
            float64x2_t v381 = 0u;
            float64x2_t v378 = 0u;
            float64x2_t v379 = 0u;
            float64x2_t v376 = 0u;
            float64x2_t v377 = 0u;
            float64x2_t v392 = 0u;
            float64x2_t v393 = 0u;
            float64x2_t v394 = 0u;
            float64x2_t v395 = 0u;
            float64x2_t v396 = 0u;
            float64x2_t v397 = 0u;
            float64x2_t v398 = 0u;
            float64x2_t v399 = 0u;
          }
          uint64_t v187 = v168 + v170;
          unsigned int v188 = v84[5];
          if (v188 == 255)
          {
            float64x2_t v191 = *(float64x2_t *)(v187 + 16);
            float64x2_t v192 = *(float64x2_t *)(v187 + 32);
            float64x2_t v193 = *(float64x2_t *)(v187 + 48);
            float64x2_t v194 = *(float64x2_t *)(v187 + 64);
            float64x2_t v195 = *(float64x2_t *)(v187 + 80);
            float64x2_t v196 = *(float64x2_t *)(v187 + 96);
            float64x2_t v197 = *(float64x2_t *)(v187 + 112);
            float64x2_t v198 = *(float64x2_t *)(v187 + 128);
            float64x2_t v199 = *(float64x2_t *)(v187 + 144);
            float64x2_t v200 = *(float64x2_t *)(v187 + 160);
            float64x2_t v201 = *(float64x2_t *)(v187 + 176);
            float64x2_t v202 = *(float64x2_t *)(v187 + 192);
            float64x2_t v203 = *(float64x2_t *)(v187 + 208);
            float64x2_t v204 = *(float64x2_t *)(v187 + 224);
            float64x2_t v205 = *(float64x2_t *)(v187 + 240);
            float64x2_t v408 = *(float64x2_t *)v187;
            float64x2_t v409 = v191;
            float64x2_t v410 = v192;
            float64x2_t v411 = v193;
            float64x2_t v412 = v198;
            float64x2_t v413 = v199;
            float64x2_t v414 = v200;
            float64x2_t v415 = v201;
            float64x2_t v424 = v194;
            float64x2_t v425 = v195;
            float64x2_t v426 = v196;
            float64x2_t v427 = v197;
            uint64_t v189 = 256;
            float64x2_t v428 = v202;
            float64x2_t v429 = v203;
            float64x2_t v430 = v204;
            float64x2_t v431 = v205;
          }
          else if (v188 == 7)
          {
            float64x2_t v190 = vld1q_dup_f64((const double *)v187);
            float64x2_t v408 = v190;
            float64x2_t v409 = v190;
            float64x2_t v410 = v190;
            float64x2_t v411 = v190;
            float64x2_t v412 = v190;
            float64x2_t v413 = v190;
            float64x2_t v414 = v190;
            float64x2_t v415 = v190;
            float64x2_t v424 = v190;
            float64x2_t v425 = v190;
            float64x2_t v426 = v190;
            float64x2_t v427 = v190;
            float64x2_t v428 = v190;
            float64x2_t v429 = v190;
            float64x2_t v430 = v190;
            uint64_t v189 = 8;
            float64x2_t v431 = v190;
          }
          else if (v84[5])
          {
            uint64_t v189 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((uint64_t)&v408, 256, v187, v188);
          }
          else
          {
            uint64_t v189 = 0;
            float64x2_t v414 = 0u;
            float64x2_t v415 = 0u;
            float64x2_t v412 = 0u;
            float64x2_t v413 = 0u;
            float64x2_t v410 = 0u;
            float64x2_t v411 = 0u;
            float64x2_t v408 = 0u;
            float64x2_t v409 = 0u;
            float64x2_t v424 = 0u;
            float64x2_t v425 = 0u;
            float64x2_t v426 = 0u;
            float64x2_t v427 = 0u;
            float64x2_t v428 = 0u;
            float64x2_t v429 = 0u;
            float64x2_t v430 = 0u;
            float64x2_t v431 = 0u;
          }
          uint64_t v206 = v187 + v189;
          unsigned int v207 = v84[6];
          if (v207 == 255)
          {
            float64x2_t v210 = *(float64x2_t *)(v206 + 16);
            float64x2_t v211 = *(float64x2_t *)(v206 + 32);
            float64x2_t v212 = *(float64x2_t *)(v206 + 48);
            float64x2_t v213 = *(float64x2_t *)(v206 + 64);
            float64x2_t v214 = *(float64x2_t *)(v206 + 80);
            float64x2_t v215 = *(float64x2_t *)(v206 + 96);
            float64x2_t v216 = *(float64x2_t *)(v206 + 112);
            float64x2_t v217 = *(float64x2_t *)(v206 + 128);
            float64x2_t v218 = *(float64x2_t *)(v206 + 144);
            float64x2_t v219 = *(float64x2_t *)(v206 + 160);
            float64x2_t v220 = *(float64x2_t *)(v206 + 176);
            float64x2_t v221 = *(float64x2_t *)(v206 + 192);
            float64x2_t v222 = *(float64x2_t *)(v206 + 208);
            float64x2_t v223 = *(float64x2_t *)(v206 + 224);
            float64x2_t v224 = *(float64x2_t *)(v206 + 240);
            float64x2_t v384 = *(float64x2_t *)v206;
            float64x2_t v385 = v210;
            float64x2_t v386 = v211;
            float64x2_t v387 = v212;
            float64x2_t v388 = v217;
            float64x2_t v389 = v218;
            float64x2_t v390 = v219;
            float64x2_t v391 = v220;
            float64x2_t v400 = v213;
            float64x2_t v401 = v214;
            float64x2_t v402 = v215;
            float64x2_t v403 = v216;
            uint64_t v208 = 256;
            float64x2_t v404 = v221;
            float64x2_t v405 = v222;
            float64x2_t v406 = v223;
            float64x2_t v407 = v224;
          }
          else if (v207 == 7)
          {
            float64x2_t v209 = vld1q_dup_f64((const double *)v206);
            float64x2_t v384 = v209;
            float64x2_t v385 = v209;
            float64x2_t v386 = v209;
            float64x2_t v387 = v209;
            float64x2_t v388 = v209;
            float64x2_t v389 = v209;
            float64x2_t v390 = v209;
            float64x2_t v391 = v209;
            float64x2_t v400 = v209;
            float64x2_t v401 = v209;
            float64x2_t v402 = v209;
            float64x2_t v403 = v209;
            float64x2_t v404 = v209;
            float64x2_t v405 = v209;
            float64x2_t v406 = v209;
            uint64_t v208 = 8;
            float64x2_t v407 = v209;
          }
          else if (v84[6])
          {
            uint64_t v208 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((uint64_t)&v384, 256, v206, v207);
          }
          else
          {
            uint64_t v208 = 0;
            float64x2_t v390 = 0u;
            float64x2_t v391 = 0u;
            float64x2_t v388 = 0u;
            float64x2_t v389 = 0u;
            float64x2_t v386 = 0u;
            float64x2_t v387 = 0u;
            float64x2_t v384 = 0u;
            float64x2_t v385 = 0u;
            float64x2_t v400 = 0u;
            float64x2_t v401 = 0u;
            float64x2_t v402 = 0u;
            float64x2_t v403 = 0u;
            float64x2_t v404 = 0u;
            float64x2_t v405 = 0u;
            float64x2_t v406 = 0u;
            float64x2_t v407 = 0u;
          }
          uint64_t v225 = v206 + v208;
          unsigned int v226 = v84[7];
          if (v226 == 255)
          {
            float64x2_t v230 = *(float64x2_t *)(v225 + 16);
            float64x2_t v231 = *(float64x2_t *)(v225 + 32);
            float64x2_t v232 = *(float64x2_t *)(v225 + 48);
            float64x2_t v233 = *(float64x2_t *)(v225 + 64);
            float64x2_t v234 = *(float64x2_t *)(v225 + 80);
            float64x2_t v235 = *(float64x2_t *)(v225 + 96);
            float64x2_t v236 = *(float64x2_t *)(v225 + 112);
            float64x2_t v237 = *(float64x2_t *)(v225 + 128);
            float64x2_t v238 = *(float64x2_t *)(v225 + 144);
            float64x2_t v239 = *(float64x2_t *)(v225 + 160);
            float64x2_t v240 = *(float64x2_t *)(v225 + 176);
            float64x2_t v241 = *(float64x2_t *)(v225 + 192);
            float64x2_t v242 = *(float64x2_t *)(v225 + 208);
            float64x2_t v243 = *(float64x2_t *)(v225 + 224);
            float64x2_t v244 = *(float64x2_t *)(v225 + 240);
            float64x2_t v416 = *(float64x2_t *)v225;
            float64x2_t v417 = v230;
            float64x2_t v418 = v231;
            float64x2_t v419 = v232;
            float64x2_t v420 = v237;
            float64x2_t v421 = v238;
            float64x2_t v422 = v239;
            float64x2_t v423 = v240;
            float64x2_t v432 = v233;
            float64x2_t v433 = v234;
            float64x2_t v434 = v235;
            float64x2_t v435 = v236;
            int v227 = v293;
            unsigned int v228 = v284;
            float64x2_t v436 = v241;
            float64x2_t v437 = v242;
            float64x2_t v438 = v243;
            float64x2_t v439 = v244;
            unsigned int v16 = v286;
            unsigned int v92 = v46 + 1;
            if (!v293) {
              goto LABEL_206;
            }
          }
          else
          {
            unsigned int v16 = v286;
            unsigned int v92 = v46 + 1;
            if (v226 == 7)
            {
              float64x2_t v229 = vld1q_dup_f64((const double *)v225);
              float64x2_t v416 = v229;
              float64x2_t v417 = v229;
              float64x2_t v418 = v229;
              float64x2_t v419 = v229;
              float64x2_t v420 = v229;
              float64x2_t v421 = v229;
              float64x2_t v422 = v229;
              float64x2_t v423 = v229;
              float64x2_t v432 = v229;
              float64x2_t v433 = v229;
              float64x2_t v434 = v229;
              float64x2_t v435 = v229;
              float64x2_t v436 = v229;
              float64x2_t v437 = v229;
              float64x2_t v438 = v229;
              int v227 = v293;
              unsigned int v228 = v284;
              float64x2_t v439 = v229;
              if (!v293) {
                goto LABEL_206;
              }
            }
            else if (v226)
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((uint64_t)&v416, 256, v225, v226);
              unsigned int v228 = v305;
              unsigned int v91 = v306;
              int v227 = v307;
              if (!v307) {
                goto LABEL_206;
              }
            }
            else
            {
              float64x2_t v422 = 0u;
              float64x2_t v423 = 0u;
              float64x2_t v420 = 0u;
              float64x2_t v421 = 0u;
              float64x2_t v418 = 0u;
              float64x2_t v419 = 0u;
              float64x2_t v416 = 0u;
              float64x2_t v417 = 0u;
              float64x2_t v432 = 0u;
              float64x2_t v433 = 0u;
              float64x2_t v434 = 0u;
              float64x2_t v435 = 0u;
              float64x2_t v436 = 0u;
              float64x2_t v437 = 0u;
              int v227 = v293;
              unsigned int v228 = v284;
              float64x2_t v438 = 0u;
              float64x2_t v439 = 0u;
              if (!v293) {
                goto LABEL_206;
              }
            }
          }
          if (v308)
          {
            uint64_t v245 = 0;
            unint64_t v246 = (unint64_t)v228 << 8;
            uint64_t v247 = 32 * v91;
            int8x16_t v248 = (char *)&v312 + v246 + v247;
            uint64_t v249 = v303;
            uint64_t v250 = v304;
            unint64_t v251 = 32 * v308;
            if (v251 <= 1) {
              uint64_t v252 = 1;
            }
            else {
              uint64_t v252 = 32 * v308;
            }
            unint64_t v253 = v246 + v247;
            int8x16_t v254 = (char *)&v312 + v246 + v247;
            if (v252) {
              BOOL v255 = (unint64_t)(v252 - 1) >> 32 == 0;
            }
            else {
              BOOL v255 = 0;
            }
            char v256 = !v255;
            uint64_t v257 = v252 & 0x1FFFFFFFE0;
            int8x16_t v258 = (char *)&v313 + v253;
            int8x16_t v259 = (long long *)(v303 + 16);
            do
            {
              uint64_t v260 = (char *)(v249 + v250 * v245);
              int16x8_t v261 = &v248[256 * v245];
              if ((unint64_t)(&v254[256 * v245] - v260) < 0x20) {
                char v262 = 1;
              }
              else {
                char v262 = v256;
              }
              if (v262)
              {
                int v263 = 0;
              }
              else
              {
                int32x4_t v264 = v259;
                int32x4_t v265 = v258;
                uint64_t v266 = v252 & 0x1FFFFFFFE0;
                do
                {
                  long long v267 = *v264;
                  *(v265 - 1) = *(v264 - 1);
                  *int32x4_t v265 = v267;
                  v265 += 2;
                  v264 += 2;
                  v266 -= 32;
                }
                while (v266);
                if (v252 == v257) {
                  goto LABEL_193;
                }
                v260 += v257;
                v261 += v257;
                int v263 = v252 & 0xFFFFFFE0;
              }
              unsigned int v268 = v263 + 1;
              do
              {
                char v269 = *v260++;
                *v261++ = v269;
              }
              while (v251 > v268++);
LABEL_193:
              ++v245;
              v258 += 256;
              int8x16_t v259 = (long long *)((char *)v259 + v250);
            }
            while (v245 != v227);
          }
LABEL_206:
          AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((uint64_t)&v312, 256, (unint64_t)v301, v302, v309, v310);
LABEL_207:
          if (v298) {
            memcpy(v297, v88, 0x800uLL);
          }
          BOOL v29 = v46 == v287 >> 3;
          unsigned int v46 = v92;
          uint64_t result = v294;
        }
        while (!v29);
        BOOL v29 = v28++ == v277;
      }
      while (!v29);
    }
  }
  return result;
}

uint64_t AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10, uint64_t a11, char a12)
{
  uint64_t v12 = MEMORY[0x270FA5388](a1);
  unsigned int v14 = v13;
  unsigned int v16 = v15;
  unsigned int v18 = v17;
  unsigned int v20 = v19;
  uint64_t v289 = v21;
  uint64_t v290 = v22;
  uint64_t v276 = v23;
  uint64_t v24 = v12;
  uint64_t v440 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(v12, 0);
  unsigned int v292 = v14;
  unsigned int v278 = v14 + a10 - 1;
  uint64_t v294 = v24;
  if (*(void *)(v24 + 168)) {
    int v25 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v25 = 0;
  }
  unsigned int v26 = v20 - 1;
  unsigned int v27 = v18 - 1;
  unsigned int v28 = v14 >> 3;
  unsigned int v277 = v278 >> 3;
  BOOL v29 = (v25 & 0xD00) == 0 || v25 == 768;
  int v30 = v25 & 0xE00;
  int v32 = !v29 && v30 != 1024;
  int v298 = v32;
  uint64_t result = v24;
  if (*(unsigned char *)(v24 + 232))
  {
    unsigned int v34 = *(unsigned __int8 *)(v24 + 255);
    unsigned int v35 = *(unsigned __int8 *)(v24 + 254);
    char v36 = __clz(v26);
    if (1 << v34 >= v18 || v20 >> v35)
    {
      if (!(v18 >> v34) && 1 << v35 < v20)
      {
        if (v18 < 2) {
          unsigned int v39 = 0;
        }
        else {
          unsigned int v39 = __clz(~(-1 << -(char)__clz(v27))) - 32;
        }
        v35 += v34 + v39;
        unsigned int v34 = -v39;
      }
    }
    else
    {
      unsigned int v37 = 32 - __clz(~(-1 << -v36));
      unsigned int v38 = v35 + v34;
      if (v20 < 2) {
        unsigned int v37 = 0;
      }
      unsigned int v34 = v38 - v37;
      unsigned int v35 = v37;
    }
    if (v20 < 2)
    {
      if (v35) {
        goto LABEL_27;
      }
    }
    else if (32 - __clz(~(-1 << -v36)) < v35)
    {
LABEL_27:
      BOOL v288 = 0;
LABEL_32:
      unsigned int v285 = v35 - 3;
      unsigned int v282 = v34 - 3;
      int v41 = -1 << *(unsigned char *)(*(void *)(v24 + 208) + 48);
      unsigned int v275 = (((~v41 + v20) & v41) + ~(-1 << v35)) >> v35;
      goto LABEL_33;
    }
    if (v18 < 2) {
      unsigned int v40 = 0;
    }
    else {
      unsigned int v40 = 32 - __clz(~(-1 << -(char)__clz(v27)));
    }
    BOOL v288 = v40 >= v34;
    goto LABEL_32;
  }
  BOOL v288 = 0;
  unsigned int v275 = 0;
  unsigned int v282 = 0;
  unsigned int v285 = 0;
LABEL_33:
  if (v28 <= v277)
  {
    unsigned int v287 = v16 + a9 - 1;
    unsigned int v274 = v16 >> 3;
    if (v16 >> 3 <= v287 >> 3)
    {
      unsigned int v296 = v26 >> 3;
      unsigned int v273 = v27 >> 3;
      int v295 = (v26 & 7) + 1;
      int v272 = (v27 & 7) + 1;
      int v271 = ~(-1 << v282);
      uint32x2_t v42 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(v20, v18), (int32x2_t)0x700000007);
      int8x8_t v43 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v42, 3uLL))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x1000000010, v42));
      __int32 v283 = v43.i32[0] | v43.i32[1];
      BOOL v280 = v43.i32[1] != 0;
      int8x8_t v281 = v43;
      BOOL v279 = v43.i32[0] != 0;
      unsigned int v286 = v16;
      do
      {
        unsigned int v44 = (8 * v28) | 7;
        if (8 * v28 <= v292) {
          int v45 = v292;
        }
        else {
          int v45 = 8 * v28;
        }
        if (v278 < v44) {
          unsigned int v44 = v278;
        }
        int v284 = v45 - 8 * v28;
        int v293 = v44 - v45 + 1;
        unsigned int v46 = v274;
        int v47 = v272;
        if (v28 != v273) {
          int v47 = 8;
        }
        unsigned int v299 = v47;
        int v48 = v28 & v271;
        uint64_t v291 = v276 + (v45 - v292) * a11;
        do
        {
          unsigned int v49 = 8 * v46;
          unsigned int v50 = 8 * (v46 + 1) - 1;
          if (8 * v46 <= v16) {
            int v51 = v16;
          }
          else {
            int v51 = 8 * v46;
          }
          if (v287 < v50) {
            unsigned int v50 = v287;
          }
          int v52 = v50 - v51 + 1;
          if (v46 == v296) {
            unsigned int v53 = v295;
          }
          else {
            unsigned int v53 = 8;
          }
          BOOL v54 = 1;
          if (8 * v28 >= v292 && v49 >= v16)
          {
            int v55 = v295;
            if (v46 != v296) {
              int v55 = 8;
            }
            BOOL v54 = v52 != v55 || v293 != v299;
          }
          if (v288)
          {
            if (v285 | v282)
            {
              int v57 = 0;
              uint64_t v58 = 0;
              int v59 = 1;
              BOOL v60 = v285 != 0;
              BOOL v61 = v282 != 0;
              unsigned int v62 = v285;
              unsigned int v63 = v282;
              do
              {
                --v62;
                if (v60) {
                  v58 |= (unint64_t)(v46 & ~(-1 << v285) & v59) << v57++;
                }
                else {
                  unsigned int v62 = 0;
                }
                --v63;
                if (v61) {
                  v58 |= (unint64_t)(v48 & v59) << v57++;
                }
                else {
                  unsigned int v63 = 0;
                }
                v59 *= 2;
                --v57;
                BOOL v61 = v63 != 0;
                BOOL v60 = v62 != 0;
              }
              while (v63 | v62);
            }
            else
            {
              uint64_t v58 = 0;
            }
            uint64_t v71 = *(void *)(result + 320) * ((v46 >> v285) + (v28 >> v282) * v275) + (v58 << 11);
          }
          else
          {
            if (v283)
            {
              int v64 = 0;
              uint64_t v65 = 0;
              int v66 = 1;
              BOOL v67 = v280;
              BOOL v68 = v279;
              __int32 v69 = v281.i32[1];
              __int32 v70 = v281.i32[0];
              do
              {
                --v69;
                if (v67) {
                  v65 |= (unint64_t)(v66 & v46) << v64++;
                }
                else {
                  __int32 v69 = 0;
                }
                --v70;
                if (v68) {
                  v65 |= (unint64_t)(v66 & v28) << v64++;
                }
                else {
                  __int32 v70 = 0;
                }
                v66 *= 2;
                --v64;
                BOOL v68 = v70 != 0;
                BOOL v67 = v69 != 0;
              }
              while (v70 | v69);
            }
            else
            {
              uint64_t v65 = 0;
            }
            uint64_t v71 = v65 << 11;
          }
          unsigned int v72 = *(_DWORD *)(result + 128) >> (*(unsigned char *)(result + 144) + a12);
          if (v72 <= 1) {
            unsigned int v72 = 1;
          }
          unsigned int v73 = v72 + 7;
          if (v73 < 0x10) {
            unsigned int v74 = 0;
          }
          else {
            unsigned int v74 = 32 - __clz(~(-1 << -(char)__clz((v73 >> 3) - 1)));
          }
          unsigned int v75 = *(_DWORD *)(result + 132) >> (*(unsigned char *)(result + 144) + a12);
          if (v75 <= 1) {
            unsigned int v75 = 1;
          }
          unsigned int v76 = v75 + 7;
          if (v76 < 0x10) {
            unsigned int v77 = 0;
          }
          else {
            unsigned int v77 = 32 - __clz(~(-1 << -(char)__clz((v76 >> 3) - 1)));
          }
          if (v77 | v74)
          {
            int v78 = 0;
            uint64_t v79 = 0;
            BOOL v80 = v74 != 0;
            BOOL v81 = v77 != 0;
            int v82 = 1;
            do
            {
              --v74;
              if (v80) {
                v79 |= (unint64_t)(v82 & v46) << v78++;
              }
              else {
                unsigned int v74 = 0;
              }
              --v77;
              if (v81) {
                v79 |= (unint64_t)(v82 & v28) << v78++;
              }
              else {
                unsigned int v77 = 0;
              }
              v82 *= 2;
              --v78;
              BOOL v81 = v77 != 0;
              BOOL v80 = v74 != 0;
            }
            while (v77 | v74);
          }
          else
          {
            uint64_t v79 = 0;
          }
          int v83 = v53 < 8 || v54;
          uint64_t v84 = (char *)(v290 + 8 * v79);
          uint64_t v85 = (_OWORD *)(v291 + 32 * (v51 - v16));
          int8x16_t v86 = (void *)(v289 + v71);
          if (v299 < 8) {
            int v87 = 1;
          }
          else {
            int v87 = v83;
          }
          int32x4_t v297 = v86;
          if (v298)
          {
            unsigned int v88 = __dst;
            if (!v87) {
              goto LABEL_121;
            }
            int v89 = v52;
            char v90 = v53;
            memcpy(__dst, v86, sizeof(__dst));
            unsigned int v49 = 8 * v46;
            LOBYTE(v53) = v90;
            int v52 = v89;
            int v48 = v28 & v271;
            uint64_t result = v294;
          }
          else
          {
            unsigned int v88 = v86;
            if (!v87)
            {
LABEL_121:
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock(v85, a11, v88, v84, v53, v299);
              goto LABEL_122;
            }
          }
          block[0] = MEMORY[0x263EF8330];
          unsigned int v91 = v51 - v49;
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE18ELj4ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = result;
          float32x4_t v301 = v88;
          unsigned __int8 v309 = v53;
          unsigned __int8 v310 = v299;
          int v305 = v284;
          unsigned int v306 = v91;
          float32x4_t v302 = v84;
          uint64_t v303 = v85;
          uint64_t v304 = a11;
          int v307 = v293;
          unsigned int v308 = v52;
          if (v54)
          {
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(result + 8) + 7384), block);
LABEL_122:
            unsigned int v16 = v286;
            unsigned int v92 = v46 + 1;
            goto LABEL_207;
          }
          unsigned int v93 = *v84;
          if (v93 == 255)
          {
            float64x2_t v96 = *((float64x2_t *)v88 + 1);
            float64x2_t v97 = *((float64x2_t *)v88 + 2);
            float64x2_t v98 = *((float64x2_t *)v88 + 3);
            float64x2_t v99 = *((float64x2_t *)v88 + 4);
            float64x2_t v100 = *((float64x2_t *)v88 + 5);
            float64x2_t v101 = *((float64x2_t *)v88 + 6);
            float64x2_t v102 = *((float64x2_t *)v88 + 7);
            float64x2_t v103 = *((float64x2_t *)v88 + 8);
            float64x2_t v104 = *((float64x2_t *)v88 + 9);
            float64x2_t v105 = *((float64x2_t *)v88 + 10);
            float64x2_t v106 = *((float64x2_t *)v88 + 11);
            float64x2_t v107 = *((float64x2_t *)v88 + 12);
            float64x2_t v108 = *((float64x2_t *)v88 + 13);
            float64x2_t v109 = *((float64x2_t *)v88 + 14);
            float64x2_t v110 = *((float64x2_t *)v88 + 15);
            float64x2_t v312 = *(float64x2_t *)v88;
            float64x2_t v313 = v96;
            float64x2_t v314 = v97;
            float64x2_t v315 = v98;
            float64x2_t v316 = v103;
            float64x2_t v317 = v104;
            float64x2_t v318 = v105;
            float64x2_t v319 = v106;
            float64x2_t v328 = v99;
            float64x2_t v329 = v100;
            float64x2_t v330 = v101;
            float64x2_t v331 = v102;
            uint64_t v94 = 256;
            float64x2_t v332 = v107;
            float64x2_t v333 = v108;
            float64x2_t v334 = v109;
            float64x2_t v335 = v110;
          }
          else if (v93 == 7)
          {
            float64x2_t v95 = vld1q_dup_f64((const double *)v88);
            float64x2_t v312 = v95;
            float64x2_t v313 = v95;
            float64x2_t v314 = v95;
            float64x2_t v315 = v95;
            float64x2_t v316 = v95;
            float64x2_t v317 = v95;
            float64x2_t v318 = v95;
            float64x2_t v319 = v95;
            float64x2_t v328 = v95;
            float64x2_t v329 = v95;
            float64x2_t v330 = v95;
            float64x2_t v331 = v95;
            float64x2_t v332 = v95;
            float64x2_t v333 = v95;
            uint64_t v94 = 8;
            float64x2_t v334 = v95;
            float64x2_t v335 = v95;
          }
          else if (*v84)
          {
            uint64_t v94 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((uint64_t)&v312, 256, (uint64_t)v88, v93);
          }
          else
          {
            uint64_t v94 = 0;
            float64x2_t v319 = 0u;
            float64x2_t v318 = 0u;
            float64x2_t v317 = 0u;
            float64x2_t v316 = 0u;
            float64x2_t v315 = 0u;
            float64x2_t v314 = 0u;
            float64x2_t v313 = 0u;
            float64x2_t v312 = 0u;
            float64x2_t v328 = 0u;
            float64x2_t v329 = 0u;
            float64x2_t v330 = 0u;
            float64x2_t v331 = 0u;
            float64x2_t v332 = 0u;
            float64x2_t v333 = 0u;
            float64x2_t v334 = 0u;
            float64x2_t v335 = 0u;
          }
          uint64_t v111 = (uint64_t)v88 + v94;
          unsigned int v112 = v84[1];
          if (v112 == 255)
          {
            float64x2_t v115 = *(float64x2_t *)(v111 + 16);
            float64x2_t v116 = *(float64x2_t *)(v111 + 32);
            float64x2_t v117 = *(float64x2_t *)(v111 + 48);
            float64x2_t v118 = *(float64x2_t *)(v111 + 64);
            float64x2_t v119 = *(float64x2_t *)(v111 + 80);
            float64x2_t v120 = *(float64x2_t *)(v111 + 96);
            float64x2_t v121 = *(float64x2_t *)(v111 + 112);
            float64x2_t v122 = *(float64x2_t *)(v111 + 128);
            float64x2_t v123 = *(float64x2_t *)(v111 + 144);
            float64x2_t v124 = *(float64x2_t *)(v111 + 160);
            float64x2_t v125 = *(float64x2_t *)(v111 + 176);
            float64x2_t v126 = *(float64x2_t *)(v111 + 192);
            float64x2_t v127 = *(float64x2_t *)(v111 + 208);
            float64x2_t v128 = *(float64x2_t *)(v111 + 224);
            float64x2_t v129 = *(float64x2_t *)(v111 + 240);
            float64x2_t v344 = *(float64x2_t *)v111;
            float64x2_t v345 = v115;
            float64x2_t v346 = v116;
            float64x2_t v347 = v117;
            float64x2_t v348 = v122;
            float64x2_t v349 = v123;
            float64x2_t v350 = v124;
            float64x2_t v351 = v125;
            float64x2_t v360 = v118;
            float64x2_t v361 = v119;
            float64x2_t v362 = v120;
            float64x2_t v363 = v121;
            uint64_t v113 = 256;
            float64x2_t v364 = v126;
            float64x2_t v365 = v127;
            float64x2_t v366 = v128;
            float64x2_t v367 = v129;
          }
          else if (v112 == 7)
          {
            float64x2_t v114 = vld1q_dup_f64((const double *)v111);
            float64x2_t v344 = v114;
            float64x2_t v345 = v114;
            float64x2_t v346 = v114;
            float64x2_t v347 = v114;
            float64x2_t v348 = v114;
            float64x2_t v349 = v114;
            float64x2_t v350 = v114;
            float64x2_t v351 = v114;
            float64x2_t v360 = v114;
            float64x2_t v361 = v114;
            float64x2_t v362 = v114;
            float64x2_t v363 = v114;
            float64x2_t v364 = v114;
            float64x2_t v365 = v114;
            uint64_t v113 = 8;
            float64x2_t v366 = v114;
            float64x2_t v367 = v114;
          }
          else if (v84[1])
          {
            uint64_t v113 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((uint64_t)&v344, 256, v111, v112);
          }
          else
          {
            uint64_t v113 = 0;
            float64x2_t v350 = 0u;
            float64x2_t v351 = 0u;
            float64x2_t v348 = 0u;
            float64x2_t v349 = 0u;
            float64x2_t v346 = 0u;
            float64x2_t v347 = 0u;
            float64x2_t v344 = 0u;
            float64x2_t v345 = 0u;
            float64x2_t v360 = 0u;
            float64x2_t v361 = 0u;
            float64x2_t v362 = 0u;
            float64x2_t v363 = 0u;
            float64x2_t v364 = 0u;
            float64x2_t v365 = 0u;
            float64x2_t v366 = 0u;
            float64x2_t v367 = 0u;
          }
          uint64_t v130 = v111 + v113;
          unsigned int v131 = v84[2];
          if (v131 == 255)
          {
            float64x2_t v134 = *(float64x2_t *)(v130 + 16);
            float64x2_t v135 = *(float64x2_t *)(v130 + 32);
            float64x2_t v136 = *(float64x2_t *)(v130 + 48);
            float64x2_t v137 = *(float64x2_t *)(v130 + 64);
            float64x2_t v138 = *(float64x2_t *)(v130 + 80);
            float64x2_t v139 = *(float64x2_t *)(v130 + 96);
            float64x2_t v140 = *(float64x2_t *)(v130 + 112);
            float64x2_t v141 = *(float64x2_t *)(v130 + 128);
            float64x2_t v142 = *(float64x2_t *)(v130 + 144);
            float64x2_t v143 = *(float64x2_t *)(v130 + 160);
            float64x2_t v144 = *(float64x2_t *)(v130 + 176);
            float64x2_t v145 = *(float64x2_t *)(v130 + 192);
            float64x2_t v146 = *(float64x2_t *)(v130 + 208);
            float64x2_t v147 = *(float64x2_t *)(v130 + 224);
            float64x2_t v148 = *(float64x2_t *)(v130 + 240);
            float64x2_t v320 = *(float64x2_t *)v130;
            float64x2_t v321 = v134;
            float64x2_t v322 = v135;
            float64x2_t v323 = v136;
            float64x2_t v324 = v141;
            float64x2_t v325 = v142;
            float64x2_t v326 = v143;
            float64x2_t v327 = v144;
            float64x2_t v336 = v137;
            float64x2_t v337 = v138;
            float64x2_t v338 = v139;
            float64x2_t v339 = v140;
            uint64_t v132 = 256;
            float64x2_t v340 = v145;
            float64x2_t v341 = v146;
            float64x2_t v342 = v147;
            float64x2_t v343 = v148;
          }
          else if (v131 == 7)
          {
            float64x2_t v133 = vld1q_dup_f64((const double *)v130);
            float64x2_t v320 = v133;
            float64x2_t v321 = v133;
            float64x2_t v322 = v133;
            float64x2_t v323 = v133;
            float64x2_t v324 = v133;
            float64x2_t v325 = v133;
            float64x2_t v326 = v133;
            float64x2_t v327 = v133;
            float64x2_t v336 = v133;
            float64x2_t v337 = v133;
            float64x2_t v338 = v133;
            float64x2_t v339 = v133;
            float64x2_t v340 = v133;
            float64x2_t v341 = v133;
            uint64_t v132 = 8;
            float64x2_t v342 = v133;
            float64x2_t v343 = v133;
          }
          else if (v84[2])
          {
            uint64_t v132 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((uint64_t)&v320, 256, v130, v131);
          }
          else
          {
            uint64_t v132 = 0;
            float64x2_t v326 = 0u;
            float64x2_t v327 = 0u;
            float64x2_t v324 = 0u;
            float64x2_t v325 = 0u;
            float64x2_t v322 = 0u;
            float64x2_t v323 = 0u;
            float64x2_t v320 = 0u;
            float64x2_t v321 = 0u;
            float64x2_t v336 = 0u;
            float64x2_t v337 = 0u;
            float64x2_t v338 = 0u;
            float64x2_t v339 = 0u;
            float64x2_t v340 = 0u;
            float64x2_t v341 = 0u;
            float64x2_t v342 = 0u;
            float64x2_t v343 = 0u;
          }
          uint64_t v149 = v130 + v132;
          unsigned int v150 = v84[3];
          if (v150 == 255)
          {
            float64x2_t v153 = *(float64x2_t *)(v149 + 16);
            float64x2_t v154 = *(float64x2_t *)(v149 + 32);
            float64x2_t v155 = *(float64x2_t *)(v149 + 48);
            float64x2_t v156 = *(float64x2_t *)(v149 + 64);
            float64x2_t v157 = *(float64x2_t *)(v149 + 80);
            float64x2_t v158 = *(float64x2_t *)(v149 + 96);
            float64x2_t v159 = *(float64x2_t *)(v149 + 112);
            float64x2_t v160 = *(float64x2_t *)(v149 + 128);
            float64x2_t v161 = *(float64x2_t *)(v149 + 144);
            float64x2_t v162 = *(float64x2_t *)(v149 + 160);
            float64x2_t v163 = *(float64x2_t *)(v149 + 176);
            float64x2_t v164 = *(float64x2_t *)(v149 + 192);
            float64x2_t v165 = *(float64x2_t *)(v149 + 208);
            float64x2_t v166 = *(float64x2_t *)(v149 + 224);
            float64x2_t v167 = *(float64x2_t *)(v149 + 240);
            float64x2_t v352 = *(float64x2_t *)v149;
            float64x2_t v353 = v153;
            float64x2_t v354 = v154;
            float64x2_t v355 = v155;
            float64x2_t v356 = v160;
            float64x2_t v357 = v161;
            float64x2_t v358 = v162;
            float64x2_t v359 = v163;
            float64x2_t v368 = v156;
            float64x2_t v369 = v157;
            float64x2_t v370 = v158;
            float64x2_t v371 = v159;
            uint64_t v151 = 256;
            float64x2_t v372 = v164;
            float64x2_t v373 = v165;
            float64x2_t v374 = v166;
            float64x2_t v375 = v167;
          }
          else if (v150 == 7)
          {
            float64x2_t v152 = vld1q_dup_f64((const double *)v149);
            float64x2_t v352 = v152;
            float64x2_t v353 = v152;
            float64x2_t v354 = v152;
            float64x2_t v355 = v152;
            float64x2_t v356 = v152;
            float64x2_t v357 = v152;
            float64x2_t v358 = v152;
            float64x2_t v359 = v152;
            float64x2_t v368 = v152;
            float64x2_t v369 = v152;
            float64x2_t v370 = v152;
            float64x2_t v371 = v152;
            float64x2_t v372 = v152;
            float64x2_t v373 = v152;
            uint64_t v151 = 8;
            float64x2_t v374 = v152;
            float64x2_t v375 = v152;
          }
          else if (v84[3])
          {
            uint64_t v151 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((uint64_t)&v352, 256, v149, v150);
          }
          else
          {
            uint64_t v151 = 0;
            float64x2_t v358 = 0u;
            float64x2_t v359 = 0u;
            float64x2_t v356 = 0u;
            float64x2_t v357 = 0u;
            float64x2_t v354 = 0u;
            float64x2_t v355 = 0u;
            float64x2_t v352 = 0u;
            float64x2_t v353 = 0u;
            float64x2_t v368 = 0u;
            float64x2_t v369 = 0u;
            float64x2_t v370 = 0u;
            float64x2_t v371 = 0u;
            float64x2_t v372 = 0u;
            float64x2_t v373 = 0u;
            float64x2_t v374 = 0u;
            float64x2_t v375 = 0u;
          }
          uint64_t v168 = v149 + v151;
          unsigned int v169 = v84[4];
          if (v169 == 255)
          {
            float64x2_t v172 = *(float64x2_t *)(v168 + 16);
            float64x2_t v173 = *(float64x2_t *)(v168 + 32);
            float64x2_t v174 = *(float64x2_t *)(v168 + 48);
            float64x2_t v175 = *(float64x2_t *)(v168 + 64);
            float64x2_t v176 = *(float64x2_t *)(v168 + 80);
            float64x2_t v177 = *(float64x2_t *)(v168 + 96);
            float64x2_t v178 = *(float64x2_t *)(v168 + 112);
            float64x2_t v179 = *(float64x2_t *)(v168 + 128);
            float64x2_t v180 = *(float64x2_t *)(v168 + 144);
            float64x2_t v181 = *(float64x2_t *)(v168 + 160);
            float64x2_t v182 = *(float64x2_t *)(v168 + 176);
            float64x2_t v183 = *(float64x2_t *)(v168 + 192);
            float64x2_t v184 = *(float64x2_t *)(v168 + 208);
            float64x2_t v185 = *(float64x2_t *)(v168 + 224);
            float64x2_t v186 = *(float64x2_t *)(v168 + 240);
            float64x2_t v376 = *(float64x2_t *)v168;
            float64x2_t v377 = v172;
            float64x2_t v378 = v173;
            float64x2_t v379 = v174;
            float64x2_t v380 = v179;
            float64x2_t v381 = v180;
            float64x2_t v382 = v181;
            float64x2_t v383 = v182;
            float64x2_t v392 = v175;
            float64x2_t v393 = v176;
            float64x2_t v394 = v177;
            float64x2_t v395 = v178;
            uint64_t v170 = 256;
            float64x2_t v396 = v183;
            float64x2_t v397 = v184;
            float64x2_t v398 = v185;
            float64x2_t v399 = v186;
          }
          else if (v169 == 7)
          {
            float64x2_t v171 = vld1q_dup_f64((const double *)v168);
            float64x2_t v376 = v171;
            float64x2_t v377 = v171;
            float64x2_t v378 = v171;
            float64x2_t v379 = v171;
            float64x2_t v380 = v171;
            float64x2_t v381 = v171;
            float64x2_t v382 = v171;
            float64x2_t v383 = v171;
            float64x2_t v392 = v171;
            float64x2_t v393 = v171;
            float64x2_t v394 = v171;
            float64x2_t v395 = v171;
            float64x2_t v396 = v171;
            float64x2_t v397 = v171;
            float64x2_t v398 = v171;
            uint64_t v170 = 8;
            float64x2_t v399 = v171;
          }
          else if (v84[4])
          {
            uint64_t v170 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((uint64_t)&v376, 256, v168, v169);
          }
          else
          {
            uint64_t v170 = 0;
            float64x2_t v382 = 0u;
            float64x2_t v383 = 0u;
            float64x2_t v380 = 0u;
            float64x2_t v381 = 0u;
            float64x2_t v378 = 0u;
            float64x2_t v379 = 0u;
            float64x2_t v376 = 0u;
            float64x2_t v377 = 0u;
            float64x2_t v392 = 0u;
            float64x2_t v393 = 0u;
            float64x2_t v394 = 0u;
            float64x2_t v395 = 0u;
            float64x2_t v396 = 0u;
            float64x2_t v397 = 0u;
            float64x2_t v398 = 0u;
            float64x2_t v399 = 0u;
          }
          uint64_t v187 = v168 + v170;
          unsigned int v188 = v84[5];
          if (v188 == 255)
          {
            float64x2_t v191 = *(float64x2_t *)(v187 + 16);
            float64x2_t v192 = *(float64x2_t *)(v187 + 32);
            float64x2_t v193 = *(float64x2_t *)(v187 + 48);
            float64x2_t v194 = *(float64x2_t *)(v187 + 64);
            float64x2_t v195 = *(float64x2_t *)(v187 + 80);
            float64x2_t v196 = *(float64x2_t *)(v187 + 96);
            float64x2_t v197 = *(float64x2_t *)(v187 + 112);
            float64x2_t v198 = *(float64x2_t *)(v187 + 128);
            float64x2_t v199 = *(float64x2_t *)(v187 + 144);
            float64x2_t v200 = *(float64x2_t *)(v187 + 160);
            float64x2_t v201 = *(float64x2_t *)(v187 + 176);
            float64x2_t v202 = *(float64x2_t *)(v187 + 192);
            float64x2_t v203 = *(float64x2_t *)(v187 + 208);
            float64x2_t v204 = *(float64x2_t *)(v187 + 224);
            float64x2_t v205 = *(float64x2_t *)(v187 + 240);
            float64x2_t v408 = *(float64x2_t *)v187;
            float64x2_t v409 = v191;
            float64x2_t v410 = v192;
            float64x2_t v411 = v193;
            float64x2_t v412 = v198;
            float64x2_t v413 = v199;
            float64x2_t v414 = v200;
            float64x2_t v415 = v201;
            float64x2_t v424 = v194;
            float64x2_t v425 = v195;
            float64x2_t v426 = v196;
            float64x2_t v427 = v197;
            uint64_t v189 = 256;
            float64x2_t v428 = v202;
            float64x2_t v429 = v203;
            float64x2_t v430 = v204;
            float64x2_t v431 = v205;
          }
          else if (v188 == 7)
          {
            float64x2_t v190 = vld1q_dup_f64((const double *)v187);
            float64x2_t v408 = v190;
            float64x2_t v409 = v190;
            float64x2_t v410 = v190;
            float64x2_t v411 = v190;
            float64x2_t v412 = v190;
            float64x2_t v413 = v190;
            float64x2_t v414 = v190;
            float64x2_t v415 = v190;
            float64x2_t v424 = v190;
            float64x2_t v425 = v190;
            float64x2_t v426 = v190;
            float64x2_t v427 = v190;
            float64x2_t v428 = v190;
            float64x2_t v429 = v190;
            float64x2_t v430 = v190;
            uint64_t v189 = 8;
            float64x2_t v431 = v190;
          }
          else if (v84[5])
          {
            uint64_t v189 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((uint64_t)&v408, 256, v187, v188);
          }
          else
          {
            uint64_t v189 = 0;
            float64x2_t v414 = 0u;
            float64x2_t v415 = 0u;
            float64x2_t v412 = 0u;
            float64x2_t v413 = 0u;
            float64x2_t v410 = 0u;
            float64x2_t v411 = 0u;
            float64x2_t v408 = 0u;
            float64x2_t v409 = 0u;
            float64x2_t v424 = 0u;
            float64x2_t v425 = 0u;
            float64x2_t v426 = 0u;
            float64x2_t v427 = 0u;
            float64x2_t v428 = 0u;
            float64x2_t v429 = 0u;
            float64x2_t v430 = 0u;
            float64x2_t v431 = 0u;
          }
          uint64_t v206 = v187 + v189;
          unsigned int v207 = v84[6];
          if (v207 == 255)
          {
            float64x2_t v210 = *(float64x2_t *)(v206 + 16);
            float64x2_t v211 = *(float64x2_t *)(v206 + 32);
            float64x2_t v212 = *(float64x2_t *)(v206 + 48);
            float64x2_t v213 = *(float64x2_t *)(v206 + 64);
            float64x2_t v214 = *(float64x2_t *)(v206 + 80);
            float64x2_t v215 = *(float64x2_t *)(v206 + 96);
            float64x2_t v216 = *(float64x2_t *)(v206 + 112);
            float64x2_t v217 = *(float64x2_t *)(v206 + 128);
            float64x2_t v218 = *(float64x2_t *)(v206 + 144);
            float64x2_t v219 = *(float64x2_t *)(v206 + 160);
            float64x2_t v220 = *(float64x2_t *)(v206 + 176);
            float64x2_t v221 = *(float64x2_t *)(v206 + 192);
            float64x2_t v222 = *(float64x2_t *)(v206 + 208);
            float64x2_t v223 = *(float64x2_t *)(v206 + 224);
            float64x2_t v224 = *(float64x2_t *)(v206 + 240);
            float64x2_t v384 = *(float64x2_t *)v206;
            float64x2_t v385 = v210;
            float64x2_t v386 = v211;
            float64x2_t v387 = v212;
            float64x2_t v388 = v217;
            float64x2_t v389 = v218;
            float64x2_t v390 = v219;
            float64x2_t v391 = v220;
            float64x2_t v400 = v213;
            float64x2_t v401 = v214;
            float64x2_t v402 = v215;
            float64x2_t v403 = v216;
            uint64_t v208 = 256;
            float64x2_t v404 = v221;
            float64x2_t v405 = v222;
            float64x2_t v406 = v223;
            float64x2_t v407 = v224;
          }
          else if (v207 == 7)
          {
            float64x2_t v209 = vld1q_dup_f64((const double *)v206);
            float64x2_t v384 = v209;
            float64x2_t v385 = v209;
            float64x2_t v386 = v209;
            float64x2_t v387 = v209;
            float64x2_t v388 = v209;
            float64x2_t v389 = v209;
            float64x2_t v390 = v209;
            float64x2_t v391 = v209;
            float64x2_t v400 = v209;
            float64x2_t v401 = v209;
            float64x2_t v402 = v209;
            float64x2_t v403 = v209;
            float64x2_t v404 = v209;
            float64x2_t v405 = v209;
            float64x2_t v406 = v209;
            uint64_t v208 = 8;
            float64x2_t v407 = v209;
          }
          else if (v84[6])
          {
            uint64_t v208 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((uint64_t)&v384, 256, v206, v207);
          }
          else
          {
            uint64_t v208 = 0;
            float64x2_t v390 = 0u;
            float64x2_t v391 = 0u;
            float64x2_t v388 = 0u;
            float64x2_t v389 = 0u;
            float64x2_t v386 = 0u;
            float64x2_t v387 = 0u;
            float64x2_t v384 = 0u;
            float64x2_t v385 = 0u;
            float64x2_t v400 = 0u;
            float64x2_t v401 = 0u;
            float64x2_t v402 = 0u;
            float64x2_t v403 = 0u;
            float64x2_t v404 = 0u;
            float64x2_t v405 = 0u;
            float64x2_t v406 = 0u;
            float64x2_t v407 = 0u;
          }
          uint64_t v225 = v206 + v208;
          unsigned int v226 = v84[7];
          if (v226 == 255)
          {
            float64x2_t v230 = *(float64x2_t *)(v225 + 16);
            float64x2_t v231 = *(float64x2_t *)(v225 + 32);
            float64x2_t v232 = *(float64x2_t *)(v225 + 48);
            float64x2_t v233 = *(float64x2_t *)(v225 + 64);
            float64x2_t v234 = *(float64x2_t *)(v225 + 80);
            float64x2_t v235 = *(float64x2_t *)(v225 + 96);
            float64x2_t v236 = *(float64x2_t *)(v225 + 112);
            float64x2_t v237 = *(float64x2_t *)(v225 + 128);
            float64x2_t v238 = *(float64x2_t *)(v225 + 144);
            float64x2_t v239 = *(float64x2_t *)(v225 + 160);
            float64x2_t v240 = *(float64x2_t *)(v225 + 176);
            float64x2_t v241 = *(float64x2_t *)(v225 + 192);
            float64x2_t v242 = *(float64x2_t *)(v225 + 208);
            float64x2_t v243 = *(float64x2_t *)(v225 + 224);
            float64x2_t v244 = *(float64x2_t *)(v225 + 240);
            float64x2_t v416 = *(float64x2_t *)v225;
            float64x2_t v417 = v230;
            float64x2_t v418 = v231;
            float64x2_t v419 = v232;
            float64x2_t v420 = v237;
            float64x2_t v421 = v238;
            float64x2_t v422 = v239;
            float64x2_t v423 = v240;
            float64x2_t v432 = v233;
            float64x2_t v433 = v234;
            float64x2_t v434 = v235;
            float64x2_t v435 = v236;
            int v227 = v293;
            unsigned int v228 = v284;
            float64x2_t v436 = v241;
            float64x2_t v437 = v242;
            float64x2_t v438 = v243;
            float64x2_t v439 = v244;
            unsigned int v16 = v286;
            unsigned int v92 = v46 + 1;
            if (!v293) {
              goto LABEL_206;
            }
          }
          else
          {
            unsigned int v16 = v286;
            unsigned int v92 = v46 + 1;
            if (v226 == 7)
            {
              float64x2_t v229 = vld1q_dup_f64((const double *)v225);
              float64x2_t v416 = v229;
              float64x2_t v417 = v229;
              float64x2_t v418 = v229;
              float64x2_t v419 = v229;
              float64x2_t v420 = v229;
              float64x2_t v421 = v229;
              float64x2_t v422 = v229;
              float64x2_t v423 = v229;
              float64x2_t v432 = v229;
              float64x2_t v433 = v229;
              float64x2_t v434 = v229;
              float64x2_t v435 = v229;
              float64x2_t v436 = v229;
              float64x2_t v437 = v229;
              float64x2_t v438 = v229;
              int v227 = v293;
              unsigned int v228 = v284;
              float64x2_t v439 = v229;
              if (!v293) {
                goto LABEL_206;
              }
            }
            else if (v226)
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((uint64_t)&v416, 256, v225, v226);
              unsigned int v228 = v305;
              unsigned int v91 = v306;
              int v227 = v307;
              if (!v307) {
                goto LABEL_206;
              }
            }
            else
            {
              float64x2_t v422 = 0u;
              float64x2_t v423 = 0u;
              float64x2_t v420 = 0u;
              float64x2_t v421 = 0u;
              float64x2_t v418 = 0u;
              float64x2_t v419 = 0u;
              float64x2_t v416 = 0u;
              float64x2_t v417 = 0u;
              float64x2_t v432 = 0u;
              float64x2_t v433 = 0u;
              float64x2_t v434 = 0u;
              float64x2_t v435 = 0u;
              float64x2_t v436 = 0u;
              float64x2_t v437 = 0u;
              int v227 = v293;
              unsigned int v228 = v284;
              float64x2_t v438 = 0u;
              float64x2_t v439 = 0u;
              if (!v293) {
                goto LABEL_206;
              }
            }
          }
          if (v308)
          {
            uint64_t v245 = 0;
            unint64_t v246 = (unint64_t)v228 << 8;
            uint64_t v247 = 32 * v91;
            int8x16_t v248 = (char *)&v312 + v246 + v247;
            uint64_t v249 = v303;
            uint64_t v250 = v304;
            unint64_t v251 = 32 * v308;
            if (v251 <= 1) {
              uint64_t v252 = 1;
            }
            else {
              uint64_t v252 = 32 * v308;
            }
            unint64_t v253 = v246 + v247;
            int8x16_t v254 = (char *)&v312 + v246 + v247;
            if (v252) {
              BOOL v255 = (unint64_t)(v252 - 1) >> 32 == 0;
            }
            else {
              BOOL v255 = 0;
            }
            char v256 = !v255;
            uint64_t v257 = v252 & 0x1FFFFFFFE0;
            int8x16_t v258 = (char *)&v313 + v253;
            int8x16_t v259 = v303 + 1;
            do
            {
              uint64_t v260 = (char *)v249 + v250 * v245;
              int16x8_t v261 = &v248[256 * v245];
              if ((unint64_t)(&v254[256 * v245] - v260) < 0x20) {
                char v262 = 1;
              }
              else {
                char v262 = v256;
              }
              if (v262)
              {
                int v263 = 0;
              }
              else
              {
                int32x4_t v264 = v259;
                int32x4_t v265 = v258;
                uint64_t v266 = v252 & 0x1FFFFFFFE0;
                do
                {
                  long long v267 = *v264;
                  *(v265 - 1) = *(v264 - 1);
                  *int32x4_t v265 = v267;
                  v265 += 2;
                  v264 += 2;
                  v266 -= 32;
                }
                while (v266);
                if (v252 == v257) {
                  goto LABEL_193;
                }
                v260 += v257;
                v261 += v257;
                int v263 = v252 & 0xFFFFFFE0;
              }
              unsigned int v268 = v263 + 1;
              do
              {
                char v269 = *v260++;
                *v261++ = v269;
              }
              while (v251 > v268++);
LABEL_193:
              ++v245;
              v258 += 256;
              int8x16_t v259 = (long long *)((char *)v259 + v250);
            }
            while (v245 != v227);
          }
LABEL_206:
          AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock(&v312, 256, v301, v302, v309, v310);
LABEL_207:
          if (v298) {
            memcpy(v297, v88, 0x800uLL);
          }
          BOOL v29 = v46 == v287 >> 3;
          unsigned int v46 = v92;
          uint64_t result = v294;
        }
        while (!v29);
        BOOL v29 = v28++ == v277;
      }
      while (!v29);
    }
  }
  return result;
}

void *AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10, uint64_t a11, int a12)
{
  uint64_t v12 = MEMORY[0x270FA5388](a1);
  unsigned int v14 = v13;
  unsigned int v16 = v15;
  unsigned int v18 = v17;
  unsigned int v20 = v19;
  uint64_t v291 = v21;
  uint64_t v292 = v22;
  uint64_t v281 = v23;
  uint64_t v24 = v12;
  uint64_t v443 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(v12, 0);
  uint64_t v25 = v24;
  unsigned int v295 = v14;
  unsigned int v26 = v14 >> 3;
  unsigned int v280 = v14 + a10 - 1;
  unsigned int v282 = v280 >> 3;
  unsigned int v27 = *(unsigned __int8 *)(*(void *)(v24 + 208) + 88);
  unsigned int v28 = *(_DWORD *)(v24 + 112);
  uint64_t v297 = v25;
  if (*(void *)(v25 + 168))
  {
    __int16 CacheMode = IOSurfaceGetCacheMode();
    uint64_t v25 = v297;
    int v30 = CacheMode & 0xF00;
  }
  else
  {
    int v30 = 0;
  }
  BOOL v31 = (v30 & 0xD00) == 0 || v30 == 768;
  int v32 = v30 & 0xE00;
  int v34 = !v31 && v32 != 1024;
  int v301 = v34;
  uint64_t result = (void *)AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::isLevelTiled(v25, *(_DWORD *)(v25 + 144) + a12);
  uint64_t v36 = v297;
  int v290 = (int)result;
  if (v26 <= v282)
  {
    unsigned int v289 = v16 + a9 - 1;
    unsigned int v279 = v16 >> 3;
    if (v16 >> 3 <= v289 >> 3)
    {
      unsigned int v276 = v20 - 1;
      unsigned int v299 = (v20 - 1) >> 3;
      int v298 = ((v20 - 1) & 7) + 1;
      int v277 = ((v18 - 1) & 7) + 1;
      unsigned int v278 = (v18 - 1) >> 3;
      uint32x2_t v37 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(v20, v18), (int32x2_t)0x700000007);
      int8x8_t v38 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v37, 3uLL))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x1000000010, v37));
      __int32 v287 = v38.i32[0] | v38.i32[1];
      BOOL v284 = v38.i32[1] != 0;
      int8x8_t v285 = v38;
      BOOL v283 = v38.i32[0] != 0;
      unint64_t v275 = 8 * v28 * (unint64_t)v27;
      unsigned int v288 = v16;
      do
      {
        unsigned int v39 = (8 * v26) | 7;
        if (8 * v26 <= v295) {
          int v40 = v295;
        }
        else {
          int v40 = 8 * v26;
        }
        unsigned int v41 = v279;
        if (v280 < v39) {
          unsigned int v39 = v280;
        }
        unsigned int v294 = 8 * v26;
        int v286 = v40 - 8 * v26;
        int v296 = v39 - v40 + 1;
        int v42 = v277;
        if (v26 != v278) {
          int v42 = 8;
        }
        unsigned int v302 = v42;
        uint64_t v293 = v281 + (v40 - v295) * a11;
        do
        {
          unsigned int v43 = 8 * v41;
          unsigned int v44 = 8 * (v41 + 1) - 1;
          if (8 * v41 <= v16) {
            int v45 = v16;
          }
          else {
            int v45 = 8 * v41;
          }
          if (v289 < v44) {
            unsigned int v44 = v289;
          }
          int v46 = v44 - v45 + 1;
          if (v41 == v299) {
            unsigned int v47 = v298;
          }
          else {
            unsigned int v47 = 8;
          }
          BOOL v48 = 1;
          if (v294 >= v295 && v43 >= v16)
          {
            int v49 = v298;
            if (v41 != v299) {
              int v49 = 8;
            }
            BOOL v48 = v46 != v49 || v296 != v302;
          }
          if (v290)
          {
            unsigned int v70 = 0;
            uint64_t v71 = v275 >> (*(unsigned char *)(v36 + 57) != 0);
            char v72 = 1;
            if (v71 > 127)
            {
              if (v71 > 511)
              {
                if (v71 == 512)
                {
                  char v72 = 0;
                  char v73 = 0;
                  unsigned int v70 = 16;
                  unsigned int v74 = 16;
                }
                else
                {
                  char v73 = 1;
                  unsigned int v74 = 0;
                  if (v71 == 1024)
                  {
                    char v72 = 0;
                    unsigned int v74 = 8;
                    unsigned int v70 = 16;
                  }
                }
              }
              else if (v71 == 128)
              {
                char v72 = 0;
                char v73 = 0;
                unsigned int v70 = 32;
                unsigned int v74 = 32;
              }
              else
              {
                char v73 = 1;
                unsigned int v74 = 0;
                if (v71 == 256)
                {
                  char v72 = 0;
                  char v73 = 0;
                  unsigned int v74 = 16;
                  unsigned int v70 = 32;
                }
              }
            }
            else
            {
              char v73 = 1;
              unsigned int v74 = 0;
              switch(v71)
              {
                case 4:
                  char v72 = 0;
                  char v73 = 0;
                  unsigned int v74 = 128;
                  unsigned int v70 = 256;
                  break;
                case 5:
                case 6:
                case 7:
                case 9:
                case 10:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 17:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                  break;
                case 8:
                  char v72 = 0;
                  char v73 = 0;
                  unsigned int v70 = 128;
                  unsigned int v74 = 128;
                  break;
                case 16:
                  char v72 = 0;
                  char v73 = 0;
                  unsigned int v74 = 64;
                  unsigned int v70 = 128;
                  break;
                case 32:
                  char v72 = 0;
                  char v73 = 0;
                  unsigned int v70 = 64;
                  unsigned int v74 = 64;
                  break;
                default:
                  if (v71 == 64)
                  {
                    char v72 = 0;
                    char v73 = 0;
                    unsigned int v74 = 32;
                    unsigned int v70 = 64;
                  }
                  break;
              }
            }
            unsigned int v264 = (v70 >> 3) - 1;
            if (v72) {
              unsigned int v265 = 0;
            }
            else {
              unsigned int v265 = 32 - __clz(~(-1 << -(char)__clz(v264)));
            }
            unsigned int v266 = (v74 >> 3) - 1;
            if (v73)
            {
              unsigned int v267 = 0;
              if (v265) {
                goto LABEL_199;
              }
            }
            else
            {
              unsigned int v267 = 32 - __clz(~(-1 << -(char)__clz(v266)));
              if (v267 | v265)
              {
LABEL_199:
                int v268 = 0;
                uint64_t v269 = 0;
                int v270 = v41 & v264;
                int v271 = v26 & v266;
                BOOL v272 = v265 != 0;
                BOOL v273 = v267 != 0;
                int v274 = 1;
                do
                {
                  --v265;
                  if (v272) {
                    v269 |= (unint64_t)(v274 & v270) << v268++;
                  }
                  else {
                    unsigned int v265 = 0;
                  }
                  --v267;
                  if (v273) {
                    v269 |= (unint64_t)(v274 & v271) << v268++;
                  }
                  else {
                    unsigned int v267 = 0;
                  }
                  v274 *= 2;
                  --v268;
                  BOOL v273 = v267 != 0;
                  BOOL v272 = v265 != 0;
                }
                while (v267 | v265);
                goto LABEL_211;
              }
            }
            uint64_t v269 = 0;
LABEL_211:
            unint64_t v58 = ((unint64_t)(v43 / v70 + v294 / v74 * ((v70 + v276) / v70)) << 14) + (v269 << 11);
            goto LABEL_58;
          }
          if (v287)
          {
            int v51 = 0;
            uint64_t v52 = 0;
            int v53 = 1;
            BOOL v54 = v284;
            BOOL v55 = v283;
            __int32 v56 = v285.i32[1];
            __int32 v57 = v285.i32[0];
            do
            {
              --v56;
              if (v54) {
                v52 |= (unint64_t)(v53 & v41) << v51++;
              }
              else {
                __int32 v56 = 0;
              }
              --v57;
              if (v55) {
                v52 |= (unint64_t)(v53 & v26) << v51++;
              }
              else {
                __int32 v57 = 0;
              }
              v53 *= 2;
              --v51;
              BOOL v55 = v57 != 0;
              BOOL v54 = v56 != 0;
            }
            while (v57 | v56);
          }
          else
          {
            uint64_t v52 = 0;
          }
          unint64_t v58 = v52 << 11;
LABEL_58:
          unsigned int v59 = *(_DWORD *)(v36 + 128) >> (*(unsigned char *)(v36 + 144) + a12);
          if (v59 <= 1) {
            unsigned int v59 = 1;
          }
          unsigned int v60 = v59 + 7;
          if (v60 < 0x10) {
            unsigned int v61 = 0;
          }
          else {
            unsigned int v61 = 32 - __clz(~(-1 << -(char)__clz((v60 >> 3) - 1)));
          }
          unsigned int v62 = *(_DWORD *)(v36 + 132) >> (*(unsigned char *)(v36 + 144) + a12);
          if (v62 <= 1) {
            unsigned int v62 = 1;
          }
          unsigned int v63 = v62 + 7;
          if (v63 < 0x10)
          {
            unsigned int v64 = 0;
            if (!v61)
            {
LABEL_80:
              uint64_t v66 = 0;
              goto LABEL_81;
            }
          }
          else
          {
            unsigned int v64 = 32 - __clz(~(-1 << -(char)__clz((v63 >> 3) - 1)));
            if (!(v64 | v61)) {
              goto LABEL_80;
            }
          }
          int v65 = 0;
          uint64_t v66 = 0;
          BOOL v67 = v61 != 0;
          BOOL v68 = v64 != 0;
          int v69 = 1;
          do
          {
            --v61;
            if (v67) {
              v66 |= (unint64_t)(v69 & v41) << v65++;
            }
            else {
              unsigned int v61 = 0;
            }
            --v64;
            if (v68) {
              v66 |= (unint64_t)(v69 & v26) << v65++;
            }
            else {
              unsigned int v64 = 0;
            }
            v69 *= 2;
            --v65;
            BOOL v68 = v64 != 0;
            BOOL v67 = v61 != 0;
          }
          while (v64 | v61);
LABEL_81:
          int v75 = v47 < 8 || v48;
          unsigned int v76 = (char *)(v292 + 8 * v66);
          uint64_t v77 = v293 + 32 * (v45 - v16);
          int v78 = (void *)(v291 + v58);
          if (v302 < 8) {
            int v79 = 1;
          }
          else {
            int v79 = v75;
          }
          int32x4_t v300 = v78;
          if (v301)
          {
            BOOL v80 = __dst;
            if (!v79) {
              goto LABEL_93;
            }
            BOOL v81 = (char *)(v292 + 8 * v66);
            int v82 = v46;
            char v83 = v47;
            BOOL v84 = v48;
            memcpy(__dst, v78, sizeof(__dst));
            unsigned int v43 = 8 * v41;
            BOOL v48 = v84;
            LOBYTE(v47) = v83;
            int v46 = v82;
            unsigned int v76 = v81;
            uint64_t v36 = v297;
          }
          else
          {
            BOOL v80 = v78;
            if (!v79)
            {
LABEL_93:
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock(v77, a11, (unint64_t)v80, v76, v47, v302);
              goto LABEL_94;
            }
          }
          block[0] = MEMORY[0x263EF8330];
          unsigned int v85 = v45 - v43;
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE18ELj4ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = v36;
          uint64_t v304 = v80;
          unsigned __int8 v312 = v47;
          unsigned __int8 v313 = v302;
          int v308 = v286;
          unsigned int v309 = v45 - v43;
          int v305 = v76;
          uint64_t v306 = v77;
          uint64_t v307 = a11;
          int v310 = v296;
          unsigned int v311 = v46;
          if (v48)
          {
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(v36 + 8) + 7384), block);
LABEL_94:
            unsigned int v16 = v288;
            goto LABEL_179;
          }
          unsigned int v86 = *v76;
          unsigned int v16 = v288;
          if (v86 == 255)
          {
            float64x2_t v89 = *((float64x2_t *)v80 + 1);
            float64x2_t v90 = *((float64x2_t *)v80 + 2);
            float64x2_t v91 = *((float64x2_t *)v80 + 3);
            float64x2_t v92 = *((float64x2_t *)v80 + 4);
            float64x2_t v93 = *((float64x2_t *)v80 + 5);
            float64x2_t v94 = *((float64x2_t *)v80 + 6);
            float64x2_t v95 = *((float64x2_t *)v80 + 7);
            float64x2_t v96 = *((float64x2_t *)v80 + 8);
            float64x2_t v97 = *((float64x2_t *)v80 + 9);
            float64x2_t v98 = *((float64x2_t *)v80 + 10);
            float64x2_t v99 = *((float64x2_t *)v80 + 11);
            float64x2_t v100 = *((float64x2_t *)v80 + 12);
            float64x2_t v101 = *((float64x2_t *)v80 + 13);
            float64x2_t v102 = *((float64x2_t *)v80 + 14);
            float64x2_t v103 = *((float64x2_t *)v80 + 15);
            float64x2_t v315 = *(float64x2_t *)v80;
            float64x2_t v316 = v89;
            float64x2_t v317 = v90;
            float64x2_t v318 = v91;
            float64x2_t v319 = v96;
            float64x2_t v320 = v97;
            float64x2_t v321 = v98;
            float64x2_t v322 = v99;
            float64x2_t v331 = v92;
            float64x2_t v332 = v93;
            float64x2_t v333 = v94;
            float64x2_t v334 = v95;
            uint64_t v87 = 256;
            float64x2_t v335 = v100;
            float64x2_t v336 = v101;
            float64x2_t v337 = v102;
            float64x2_t v338 = v103;
          }
          else if (v86 == 7)
          {
            float64x2_t v88 = vld1q_dup_f64((const double *)v80);
            float64x2_t v315 = v88;
            float64x2_t v316 = v88;
            float64x2_t v317 = v88;
            float64x2_t v318 = v88;
            float64x2_t v319 = v88;
            float64x2_t v320 = v88;
            float64x2_t v321 = v88;
            float64x2_t v322 = v88;
            float64x2_t v331 = v88;
            float64x2_t v332 = v88;
            float64x2_t v333 = v88;
            float64x2_t v334 = v88;
            float64x2_t v335 = v88;
            float64x2_t v336 = v88;
            uint64_t v87 = 8;
            float64x2_t v337 = v88;
            float64x2_t v338 = v88;
          }
          else if (*v76)
          {
            uint64_t v87 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((uint64_t)&v315, 256, (uint64_t)v80, v86);
          }
          else
          {
            uint64_t v87 = 0;
            float64x2_t v322 = 0u;
            float64x2_t v321 = 0u;
            float64x2_t v320 = 0u;
            float64x2_t v319 = 0u;
            float64x2_t v318 = 0u;
            float64x2_t v317 = 0u;
            float64x2_t v316 = 0u;
            float64x2_t v315 = 0u;
            float64x2_t v331 = 0u;
            float64x2_t v332 = 0u;
            float64x2_t v333 = 0u;
            float64x2_t v334 = 0u;
            float64x2_t v335 = 0u;
            float64x2_t v336 = 0u;
            float64x2_t v337 = 0u;
            float64x2_t v338 = 0u;
          }
          uint64_t v104 = (uint64_t)&v80[v87];
          unsigned int v105 = v76[1];
          if (v105 == 255)
          {
            float64x2_t v108 = *(float64x2_t *)(v104 + 16);
            float64x2_t v109 = *(float64x2_t *)(v104 + 32);
            float64x2_t v110 = *(float64x2_t *)(v104 + 48);
            float64x2_t v111 = *(float64x2_t *)(v104 + 64);
            float64x2_t v112 = *(float64x2_t *)(v104 + 80);
            float64x2_t v113 = *(float64x2_t *)(v104 + 96);
            float64x2_t v114 = *(float64x2_t *)(v104 + 112);
            float64x2_t v115 = *(float64x2_t *)(v104 + 128);
            float64x2_t v116 = *(float64x2_t *)(v104 + 144);
            float64x2_t v117 = *(float64x2_t *)(v104 + 160);
            float64x2_t v118 = *(float64x2_t *)(v104 + 176);
            float64x2_t v119 = *(float64x2_t *)(v104 + 192);
            float64x2_t v120 = *(float64x2_t *)(v104 + 208);
            float64x2_t v121 = *(float64x2_t *)(v104 + 224);
            float64x2_t v122 = *(float64x2_t *)(v104 + 240);
            float64x2_t v347 = *(float64x2_t *)v104;
            float64x2_t v348 = v108;
            float64x2_t v349 = v109;
            float64x2_t v350 = v110;
            float64x2_t v351 = v115;
            float64x2_t v352 = v116;
            float64x2_t v353 = v117;
            float64x2_t v354 = v118;
            float64x2_t v363 = v111;
            float64x2_t v364 = v112;
            float64x2_t v365 = v113;
            float64x2_t v366 = v114;
            uint64_t v106 = 256;
            float64x2_t v367 = v119;
            float64x2_t v368 = v120;
            float64x2_t v369 = v121;
            float64x2_t v370 = v122;
          }
          else if (v105 == 7)
          {
            float64x2_t v107 = vld1q_dup_f64((const double *)v104);
            float64x2_t v347 = v107;
            float64x2_t v348 = v107;
            float64x2_t v349 = v107;
            float64x2_t v350 = v107;
            float64x2_t v351 = v107;
            float64x2_t v352 = v107;
            float64x2_t v353 = v107;
            float64x2_t v354 = v107;
            float64x2_t v363 = v107;
            float64x2_t v364 = v107;
            float64x2_t v365 = v107;
            float64x2_t v366 = v107;
            float64x2_t v367 = v107;
            float64x2_t v368 = v107;
            uint64_t v106 = 8;
            float64x2_t v369 = v107;
            float64x2_t v370 = v107;
          }
          else if (v76[1])
          {
            uint64_t v106 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((uint64_t)&v347, 256, v104, v105);
          }
          else
          {
            uint64_t v106 = 0;
            float64x2_t v353 = 0u;
            float64x2_t v354 = 0u;
            float64x2_t v351 = 0u;
            float64x2_t v352 = 0u;
            float64x2_t v349 = 0u;
            float64x2_t v350 = 0u;
            float64x2_t v347 = 0u;
            float64x2_t v348 = 0u;
            float64x2_t v363 = 0u;
            float64x2_t v364 = 0u;
            float64x2_t v365 = 0u;
            float64x2_t v366 = 0u;
            float64x2_t v367 = 0u;
            float64x2_t v368 = 0u;
            float64x2_t v369 = 0u;
            float64x2_t v370 = 0u;
          }
          uint64_t v123 = v104 + v106;
          unsigned int v124 = v76[2];
          if (v124 == 255)
          {
            float64x2_t v127 = *(float64x2_t *)(v123 + 16);
            float64x2_t v128 = *(float64x2_t *)(v123 + 32);
            float64x2_t v129 = *(float64x2_t *)(v123 + 48);
            float64x2_t v130 = *(float64x2_t *)(v123 + 64);
            float64x2_t v131 = *(float64x2_t *)(v123 + 80);
            float64x2_t v132 = *(float64x2_t *)(v123 + 96);
            float64x2_t v133 = *(float64x2_t *)(v123 + 112);
            float64x2_t v134 = *(float64x2_t *)(v123 + 128);
            float64x2_t v135 = *(float64x2_t *)(v123 + 144);
            float64x2_t v136 = *(float64x2_t *)(v123 + 160);
            float64x2_t v137 = *(float64x2_t *)(v123 + 176);
            float64x2_t v138 = *(float64x2_t *)(v123 + 192);
            float64x2_t v139 = *(float64x2_t *)(v123 + 208);
            float64x2_t v140 = *(float64x2_t *)(v123 + 224);
            float64x2_t v141 = *(float64x2_t *)(v123 + 240);
            float64x2_t v323 = *(float64x2_t *)v123;
            float64x2_t v324 = v127;
            float64x2_t v325 = v128;
            float64x2_t v326 = v129;
            float64x2_t v327 = v134;
            float64x2_t v328 = v135;
            float64x2_t v329 = v136;
            float64x2_t v330 = v137;
            float64x2_t v339 = v130;
            float64x2_t v340 = v131;
            float64x2_t v341 = v132;
            float64x2_t v342 = v133;
            uint64_t v125 = 256;
            float64x2_t v343 = v138;
            float64x2_t v344 = v139;
            float64x2_t v345 = v140;
            float64x2_t v346 = v141;
          }
          else if (v124 == 7)
          {
            float64x2_t v126 = vld1q_dup_f64((const double *)v123);
            float64x2_t v323 = v126;
            float64x2_t v324 = v126;
            float64x2_t v325 = v126;
            float64x2_t v326 = v126;
            float64x2_t v327 = v126;
            float64x2_t v328 = v126;
            float64x2_t v329 = v126;
            float64x2_t v330 = v126;
            float64x2_t v339 = v126;
            float64x2_t v340 = v126;
            float64x2_t v341 = v126;
            float64x2_t v342 = v126;
            float64x2_t v343 = v126;
            float64x2_t v344 = v126;
            uint64_t v125 = 8;
            float64x2_t v345 = v126;
            float64x2_t v346 = v126;
          }
          else if (v76[2])
          {
            uint64_t v125 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((uint64_t)&v323, 256, v123, v124);
          }
          else
          {
            uint64_t v125 = 0;
            float64x2_t v329 = 0u;
            float64x2_t v330 = 0u;
            float64x2_t v327 = 0u;
            float64x2_t v328 = 0u;
            float64x2_t v325 = 0u;
            float64x2_t v326 = 0u;
            float64x2_t v323 = 0u;
            float64x2_t v324 = 0u;
            float64x2_t v339 = 0u;
            float64x2_t v340 = 0u;
            float64x2_t v341 = 0u;
            float64x2_t v342 = 0u;
            float64x2_t v343 = 0u;
            float64x2_t v344 = 0u;
            float64x2_t v345 = 0u;
            float64x2_t v346 = 0u;
          }
          uint64_t v142 = v123 + v125;
          unsigned int v143 = v76[3];
          if (v143 == 255)
          {
            float64x2_t v146 = *(float64x2_t *)(v142 + 16);
            float64x2_t v147 = *(float64x2_t *)(v142 + 32);
            float64x2_t v148 = *(float64x2_t *)(v142 + 48);
            float64x2_t v149 = *(float64x2_t *)(v142 + 64);
            float64x2_t v150 = *(float64x2_t *)(v142 + 80);
            float64x2_t v151 = *(float64x2_t *)(v142 + 96);
            float64x2_t v152 = *(float64x2_t *)(v142 + 112);
            float64x2_t v153 = *(float64x2_t *)(v142 + 128);
            float64x2_t v154 = *(float64x2_t *)(v142 + 144);
            float64x2_t v155 = *(float64x2_t *)(v142 + 160);
            float64x2_t v156 = *(float64x2_t *)(v142 + 176);
            float64x2_t v157 = *(float64x2_t *)(v142 + 192);
            float64x2_t v158 = *(float64x2_t *)(v142 + 208);
            float64x2_t v159 = *(float64x2_t *)(v142 + 224);
            float64x2_t v160 = *(float64x2_t *)(v142 + 240);
            float64x2_t v355 = *(float64x2_t *)v142;
            float64x2_t v356 = v146;
            float64x2_t v357 = v147;
            float64x2_t v358 = v148;
            float64x2_t v359 = v153;
            float64x2_t v360 = v154;
            float64x2_t v361 = v155;
            float64x2_t v362 = v156;
            float64x2_t v371 = v149;
            float64x2_t v372 = v150;
            float64x2_t v373 = v151;
            float64x2_t v374 = v152;
            uint64_t v144 = 256;
            float64x2_t v375 = v157;
            float64x2_t v376 = v158;
            float64x2_t v377 = v159;
            float64x2_t v378 = v160;
          }
          else if (v143 == 7)
          {
            float64x2_t v145 = vld1q_dup_f64((const double *)v142);
            float64x2_t v355 = v145;
            float64x2_t v356 = v145;
            float64x2_t v357 = v145;
            float64x2_t v358 = v145;
            float64x2_t v359 = v145;
            float64x2_t v360 = v145;
            float64x2_t v361 = v145;
            float64x2_t v362 = v145;
            float64x2_t v371 = v145;
            float64x2_t v372 = v145;
            float64x2_t v373 = v145;
            float64x2_t v374 = v145;
            float64x2_t v375 = v145;
            float64x2_t v376 = v145;
            uint64_t v144 = 8;
            float64x2_t v377 = v145;
            float64x2_t v378 = v145;
          }
          else if (v76[3])
          {
            uint64_t v144 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((uint64_t)&v355, 256, v142, v143);
          }
          else
          {
            uint64_t v144 = 0;
            float64x2_t v361 = 0u;
            float64x2_t v362 = 0u;
            float64x2_t v359 = 0u;
            float64x2_t v360 = 0u;
            float64x2_t v357 = 0u;
            float64x2_t v358 = 0u;
            float64x2_t v355 = 0u;
            float64x2_t v356 = 0u;
            float64x2_t v371 = 0u;
            float64x2_t v372 = 0u;
            float64x2_t v373 = 0u;
            float64x2_t v374 = 0u;
            float64x2_t v375 = 0u;
            float64x2_t v376 = 0u;
            float64x2_t v377 = 0u;
            float64x2_t v378 = 0u;
          }
          uint64_t v161 = v142 + v144;
          unsigned int v162 = v76[4];
          if (v162 == 255)
          {
            float64x2_t v165 = *(float64x2_t *)(v161 + 16);
            float64x2_t v166 = *(float64x2_t *)(v161 + 32);
            float64x2_t v167 = *(float64x2_t *)(v161 + 48);
            float64x2_t v168 = *(float64x2_t *)(v161 + 64);
            float64x2_t v169 = *(float64x2_t *)(v161 + 80);
            float64x2_t v170 = *(float64x2_t *)(v161 + 96);
            float64x2_t v171 = *(float64x2_t *)(v161 + 112);
            float64x2_t v172 = *(float64x2_t *)(v161 + 128);
            float64x2_t v173 = *(float64x2_t *)(v161 + 144);
            float64x2_t v174 = *(float64x2_t *)(v161 + 160);
            float64x2_t v175 = *(float64x2_t *)(v161 + 176);
            float64x2_t v176 = *(float64x2_t *)(v161 + 192);
            float64x2_t v177 = *(float64x2_t *)(v161 + 208);
            float64x2_t v178 = *(float64x2_t *)(v161 + 224);
            float64x2_t v179 = *(float64x2_t *)(v161 + 240);
            float64x2_t v379 = *(float64x2_t *)v161;
            float64x2_t v380 = v165;
            float64x2_t v381 = v166;
            float64x2_t v382 = v167;
            float64x2_t v383 = v172;
            float64x2_t v384 = v173;
            float64x2_t v385 = v174;
            float64x2_t v386 = v175;
            float64x2_t v395 = v168;
            float64x2_t v396 = v169;
            float64x2_t v397 = v170;
            float64x2_t v398 = v171;
            uint64_t v163 = 256;
            float64x2_t v399 = v176;
            float64x2_t v400 = v177;
            float64x2_t v401 = v178;
            float64x2_t v402 = v179;
          }
          else if (v162 == 7)
          {
            float64x2_t v164 = vld1q_dup_f64((const double *)v161);
            float64x2_t v379 = v164;
            float64x2_t v380 = v164;
            float64x2_t v381 = v164;
            float64x2_t v382 = v164;
            float64x2_t v383 = v164;
            float64x2_t v384 = v164;
            float64x2_t v385 = v164;
            float64x2_t v386 = v164;
            float64x2_t v395 = v164;
            float64x2_t v396 = v164;
            float64x2_t v397 = v164;
            float64x2_t v398 = v164;
            float64x2_t v399 = v164;
            float64x2_t v400 = v164;
            float64x2_t v401 = v164;
            uint64_t v163 = 8;
            float64x2_t v402 = v164;
          }
          else if (v76[4])
          {
            uint64_t v163 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((uint64_t)&v379, 256, v161, v162);
          }
          else
          {
            uint64_t v163 = 0;
            float64x2_t v385 = 0u;
            float64x2_t v386 = 0u;
            float64x2_t v383 = 0u;
            float64x2_t v384 = 0u;
            float64x2_t v381 = 0u;
            float64x2_t v382 = 0u;
            float64x2_t v379 = 0u;
            float64x2_t v380 = 0u;
            float64x2_t v395 = 0u;
            float64x2_t v396 = 0u;
            float64x2_t v397 = 0u;
            float64x2_t v398 = 0u;
            float64x2_t v399 = 0u;
            float64x2_t v400 = 0u;
            float64x2_t v401 = 0u;
            float64x2_t v402 = 0u;
          }
          uint64_t v180 = v161 + v163;
          unsigned int v181 = v76[5];
          if (v181 == 255)
          {
            float64x2_t v184 = *(float64x2_t *)(v180 + 16);
            float64x2_t v185 = *(float64x2_t *)(v180 + 32);
            float64x2_t v186 = *(float64x2_t *)(v180 + 48);
            float64x2_t v187 = *(float64x2_t *)(v180 + 64);
            float64x2_t v188 = *(float64x2_t *)(v180 + 80);
            float64x2_t v189 = *(float64x2_t *)(v180 + 96);
            float64x2_t v190 = *(float64x2_t *)(v180 + 112);
            float64x2_t v191 = *(float64x2_t *)(v180 + 128);
            float64x2_t v192 = *(float64x2_t *)(v180 + 144);
            float64x2_t v193 = *(float64x2_t *)(v180 + 160);
            float64x2_t v194 = *(float64x2_t *)(v180 + 176);
            float64x2_t v195 = *(float64x2_t *)(v180 + 192);
            float64x2_t v196 = *(float64x2_t *)(v180 + 208);
            float64x2_t v197 = *(float64x2_t *)(v180 + 224);
            float64x2_t v198 = *(float64x2_t *)(v180 + 240);
            float64x2_t v411 = *(float64x2_t *)v180;
            float64x2_t v412 = v184;
            float64x2_t v413 = v185;
            float64x2_t v414 = v186;
            float64x2_t v415 = v191;
            float64x2_t v416 = v192;
            float64x2_t v417 = v193;
            float64x2_t v418 = v194;
            float64x2_t v427 = v187;
            float64x2_t v428 = v188;
            float64x2_t v429 = v189;
            float64x2_t v430 = v190;
            uint64_t v182 = 256;
            float64x2_t v431 = v195;
            float64x2_t v432 = v196;
            float64x2_t v433 = v197;
            float64x2_t v434 = v198;
          }
          else if (v181 == 7)
          {
            float64x2_t v183 = vld1q_dup_f64((const double *)v180);
            float64x2_t v411 = v183;
            float64x2_t v412 = v183;
            float64x2_t v413 = v183;
            float64x2_t v414 = v183;
            float64x2_t v415 = v183;
            float64x2_t v416 = v183;
            float64x2_t v417 = v183;
            float64x2_t v418 = v183;
            float64x2_t v427 = v183;
            float64x2_t v428 = v183;
            float64x2_t v429 = v183;
            float64x2_t v430 = v183;
            float64x2_t v431 = v183;
            float64x2_t v432 = v183;
            float64x2_t v433 = v183;
            uint64_t v182 = 8;
            float64x2_t v434 = v183;
          }
          else if (v76[5])
          {
            uint64_t v182 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((uint64_t)&v411, 256, v180, v181);
          }
          else
          {
            uint64_t v182 = 0;
            float64x2_t v417 = 0u;
            float64x2_t v418 = 0u;
            float64x2_t v415 = 0u;
            float64x2_t v416 = 0u;
            float64x2_t v413 = 0u;
            float64x2_t v414 = 0u;
            float64x2_t v411 = 0u;
            float64x2_t v412 = 0u;
            float64x2_t v427 = 0u;
            float64x2_t v428 = 0u;
            float64x2_t v429 = 0u;
            float64x2_t v430 = 0u;
            float64x2_t v431 = 0u;
            float64x2_t v432 = 0u;
            float64x2_t v433 = 0u;
            float64x2_t v434 = 0u;
          }
          uint64_t v199 = v180 + v182;
          unsigned int v200 = v76[6];
          if (v200 == 255)
          {
            float64x2_t v203 = *(float64x2_t *)(v199 + 16);
            float64x2_t v204 = *(float64x2_t *)(v199 + 32);
            float64x2_t v205 = *(float64x2_t *)(v199 + 48);
            float64x2_t v206 = *(float64x2_t *)(v199 + 64);
            float64x2_t v207 = *(float64x2_t *)(v199 + 80);
            float64x2_t v208 = *(float64x2_t *)(v199 + 96);
            float64x2_t v209 = *(float64x2_t *)(v199 + 112);
            float64x2_t v210 = *(float64x2_t *)(v199 + 128);
            float64x2_t v211 = *(float64x2_t *)(v199 + 144);
            float64x2_t v212 = *(float64x2_t *)(v199 + 160);
            float64x2_t v213 = *(float64x2_t *)(v199 + 176);
            float64x2_t v214 = *(float64x2_t *)(v199 + 192);
            float64x2_t v215 = *(float64x2_t *)(v199 + 208);
            float64x2_t v216 = *(float64x2_t *)(v199 + 224);
            float64x2_t v217 = *(float64x2_t *)(v199 + 240);
            float64x2_t v387 = *(float64x2_t *)v199;
            float64x2_t v388 = v203;
            float64x2_t v389 = v204;
            float64x2_t v390 = v205;
            float64x2_t v391 = v210;
            float64x2_t v392 = v211;
            float64x2_t v393 = v212;
            float64x2_t v394 = v213;
            float64x2_t v403 = v206;
            float64x2_t v404 = v207;
            float64x2_t v405 = v208;
            float64x2_t v406 = v209;
            uint64_t v201 = 256;
            float64x2_t v407 = v214;
            float64x2_t v408 = v215;
            float64x2_t v409 = v216;
            float64x2_t v410 = v217;
          }
          else if (v200 == 7)
          {
            float64x2_t v202 = vld1q_dup_f64((const double *)v199);
            float64x2_t v387 = v202;
            float64x2_t v388 = v202;
            float64x2_t v389 = v202;
            float64x2_t v390 = v202;
            float64x2_t v391 = v202;
            float64x2_t v392 = v202;
            float64x2_t v393 = v202;
            float64x2_t v394 = v202;
            float64x2_t v403 = v202;
            float64x2_t v404 = v202;
            float64x2_t v405 = v202;
            float64x2_t v406 = v202;
            float64x2_t v407 = v202;
            float64x2_t v408 = v202;
            float64x2_t v409 = v202;
            uint64_t v201 = 8;
            float64x2_t v410 = v202;
          }
          else if (v76[6])
          {
            uint64_t v201 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((uint64_t)&v387, 256, v199, v200);
          }
          else
          {
            uint64_t v201 = 0;
            float64x2_t v393 = 0u;
            float64x2_t v394 = 0u;
            float64x2_t v391 = 0u;
            float64x2_t v392 = 0u;
            float64x2_t v389 = 0u;
            float64x2_t v390 = 0u;
            float64x2_t v387 = 0u;
            float64x2_t v388 = 0u;
            float64x2_t v403 = 0u;
            float64x2_t v404 = 0u;
            float64x2_t v405 = 0u;
            float64x2_t v406 = 0u;
            float64x2_t v407 = 0u;
            float64x2_t v408 = 0u;
            float64x2_t v409 = 0u;
            float64x2_t v410 = 0u;
          }
          uint64_t v218 = v199 + v201;
          unsigned int v219 = v76[7];
          if (v219 == 255)
          {
            float64x2_t v223 = *(float64x2_t *)(v218 + 16);
            float64x2_t v224 = *(float64x2_t *)(v218 + 32);
            float64x2_t v225 = *(float64x2_t *)(v218 + 48);
            float64x2_t v226 = *(float64x2_t *)(v218 + 64);
            float64x2_t v227 = *(float64x2_t *)(v218 + 80);
            float64x2_t v228 = *(float64x2_t *)(v218 + 96);
            float64x2_t v229 = *(float64x2_t *)(v218 + 112);
            float64x2_t v230 = *(float64x2_t *)(v218 + 128);
            float64x2_t v231 = *(float64x2_t *)(v218 + 144);
            float64x2_t v232 = *(float64x2_t *)(v218 + 160);
            float64x2_t v233 = *(float64x2_t *)(v218 + 176);
            float64x2_t v234 = *(float64x2_t *)(v218 + 192);
            float64x2_t v235 = *(float64x2_t *)(v218 + 208);
            float64x2_t v236 = *(float64x2_t *)(v218 + 224);
            float64x2_t v237 = *(float64x2_t *)(v218 + 240);
            float64x2_t v419 = *(float64x2_t *)v218;
            float64x2_t v420 = v223;
            float64x2_t v421 = v224;
            float64x2_t v422 = v225;
            float64x2_t v423 = v230;
            float64x2_t v424 = v231;
            float64x2_t v425 = v232;
            float64x2_t v426 = v233;
            float64x2_t v435 = v226;
            float64x2_t v436 = v227;
            float64x2_t v437 = v228;
            float64x2_t v438 = v229;
            int v220 = v296;
            unsigned int v221 = v286;
            float64x2_t v439 = v234;
            float64x2_t v440 = v235;
            float64x2_t v441 = v236;
            float64x2_t v442 = v237;
            if (!v296) {
              goto LABEL_178;
            }
          }
          else if (v219 == 7)
          {
            float64x2_t v222 = vld1q_dup_f64((const double *)v218);
            float64x2_t v419 = v222;
            float64x2_t v420 = v222;
            float64x2_t v421 = v222;
            float64x2_t v422 = v222;
            float64x2_t v423 = v222;
            float64x2_t v424 = v222;
            float64x2_t v425 = v222;
            float64x2_t v426 = v222;
            float64x2_t v435 = v222;
            float64x2_t v436 = v222;
            float64x2_t v437 = v222;
            float64x2_t v438 = v222;
            float64x2_t v439 = v222;
            float64x2_t v440 = v222;
            float64x2_t v441 = v222;
            int v220 = v296;
            unsigned int v221 = v286;
            float64x2_t v442 = v222;
            if (!v296) {
              goto LABEL_178;
            }
          }
          else if (v76[7])
          {
            AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((uint64_t)&v419, 256, v218, v219);
            unsigned int v221 = v308;
            unsigned int v85 = v309;
            int v220 = v310;
            if (!v310) {
              goto LABEL_178;
            }
          }
          else
          {
            float64x2_t v425 = 0u;
            float64x2_t v426 = 0u;
            float64x2_t v423 = 0u;
            float64x2_t v424 = 0u;
            float64x2_t v421 = 0u;
            float64x2_t v422 = 0u;
            float64x2_t v419 = 0u;
            float64x2_t v420 = 0u;
            float64x2_t v435 = 0u;
            float64x2_t v436 = 0u;
            float64x2_t v437 = 0u;
            float64x2_t v438 = 0u;
            float64x2_t v439 = 0u;
            float64x2_t v440 = 0u;
            int v220 = v296;
            unsigned int v221 = v286;
            float64x2_t v441 = 0u;
            float64x2_t v442 = 0u;
            if (!v296) {
              goto LABEL_178;
            }
          }
          if (v311)
          {
            uint64_t v238 = 0;
            unint64_t v239 = (unint64_t)v221 << 8;
            uint64_t v240 = 32 * v85;
            float64x2_t v241 = (char *)&v315 + v239 + v240;
            uint64_t v242 = v306;
            uint64_t v243 = v307;
            unint64_t v244 = 32 * v311;
            if (v244 <= 1) {
              uint64_t v245 = 1;
            }
            else {
              uint64_t v245 = 32 * v311;
            }
            unint64_t v246 = v239 + v240;
            uint64_t v247 = (char *)&v315 + v239 + v240;
            if (v245) {
              BOOL v248 = (unint64_t)(v245 - 1) >> 32 == 0;
            }
            else {
              BOOL v248 = 0;
            }
            char v249 = !v248;
            uint64_t v250 = v245 & 0x1FFFFFFFE0;
            unint64_t v251 = (char *)&v316 + v246;
            uint64_t v252 = (long long *)(v306 + 16);
            do
            {
              unint64_t v253 = (char *)(v242 + v243 * v238);
              int8x16_t v254 = &v241[256 * v238];
              if ((unint64_t)(&v247[256 * v238] - v253) < 0x20) {
                char v255 = 1;
              }
              else {
                char v255 = v249;
              }
              if (v255)
              {
                int v256 = 0;
              }
              else
              {
                uint64_t v257 = v252;
                int8x16_t v258 = v251;
                uint64_t v259 = v245 & 0x1FFFFFFFE0;
                do
                {
                  long long v260 = *v257;
                  *(v258 - 1) = *(v257 - 1);
                  *int8x16_t v258 = v260;
                  v258 += 2;
                  v257 += 2;
                  v259 -= 32;
                }
                while (v259);
                if (v245 == v250) {
                  goto LABEL_165;
                }
                v253 += v250;
                v254 += v250;
                int v256 = v245 & 0xFFFFFFE0;
              }
              unsigned int v261 = v256 + 1;
              do
              {
                char v262 = *v253++;
                *v254++ = v262;
              }
              while (v244 > v261++);
LABEL_165:
              ++v238;
              v251 += 256;
              uint64_t v252 = (long long *)((char *)v252 + v243);
            }
            while (v238 != v220);
          }
LABEL_178:
          AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((uint64_t)&v315, 256, (unint64_t)v304, v305, v312, v313);
LABEL_179:
          uint64_t result = v300;
          if (v301) {
            uint64_t result = memcpy(v300, v80, 0x800uLL);
          }
          BOOL v31 = v41++ == v289 >> 3;
          uint64_t v36 = v297;
        }
        while (!v31);
        BOOL v31 = v26++ == v282;
      }
      while (!v31);
    }
  }
  return result;
}

void *AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10, uint64_t a11, int a12)
{
  uint64_t v12 = MEMORY[0x270FA5388](a1);
  unsigned int v14 = v13;
  unsigned int v16 = v15;
  unsigned int v18 = v17;
  unsigned int v20 = v19;
  uint64_t v291 = v21;
  uint64_t v292 = v22;
  uint64_t v281 = v23;
  uint64_t v24 = v12;
  uint64_t v443 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(v12, 0);
  uint64_t v25 = v24;
  unsigned int v295 = v14;
  unsigned int v26 = v14 >> 3;
  unsigned int v280 = v14 + a10 - 1;
  unsigned int v282 = v280 >> 3;
  unsigned int v27 = *(unsigned __int8 *)(*(void *)(v24 + 208) + 88);
  unsigned int v28 = *(_DWORD *)(v24 + 112);
  uint64_t v297 = v25;
  if (*(void *)(v25 + 168))
  {
    __int16 CacheMode = IOSurfaceGetCacheMode();
    uint64_t v25 = v297;
    int v30 = CacheMode & 0xF00;
  }
  else
  {
    int v30 = 0;
  }
  BOOL v31 = (v30 & 0xD00) == 0 || v30 == 768;
  int v32 = v30 & 0xE00;
  int v34 = !v31 && v32 != 1024;
  int v301 = v34;
  uint64_t result = (void *)AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::isLevelTiled(v25, *(_DWORD *)(v25 + 144) + a12);
  uint64_t v36 = v297;
  int v290 = (int)result;
  if (v26 <= v282)
  {
    unsigned int v289 = v16 + a9 - 1;
    unsigned int v279 = v16 >> 3;
    if (v16 >> 3 <= v289 >> 3)
    {
      unsigned int v276 = v20 - 1;
      unsigned int v299 = (v20 - 1) >> 3;
      int v298 = ((v20 - 1) & 7) + 1;
      int v277 = ((v18 - 1) & 7) + 1;
      unsigned int v278 = (v18 - 1) >> 3;
      uint32x2_t v37 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(v20, v18), (int32x2_t)0x700000007);
      int8x8_t v38 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v37, 3uLL))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x1000000010, v37));
      __int32 v287 = v38.i32[0] | v38.i32[1];
      BOOL v284 = v38.i32[1] != 0;
      int8x8_t v285 = v38;
      BOOL v283 = v38.i32[0] != 0;
      unint64_t v275 = 8 * v28 * (unint64_t)v27;
      unsigned int v288 = v16;
      do
      {
        unsigned int v39 = (8 * v26) | 7;
        if (8 * v26 <= v295) {
          int v40 = v295;
        }
        else {
          int v40 = 8 * v26;
        }
        unsigned int v41 = v279;
        if (v280 < v39) {
          unsigned int v39 = v280;
        }
        unsigned int v294 = 8 * v26;
        int v286 = v40 - 8 * v26;
        int v296 = v39 - v40 + 1;
        int v42 = v277;
        if (v26 != v278) {
          int v42 = 8;
        }
        unsigned int v302 = v42;
        uint64_t v293 = v281 + (v40 - v295) * a11;
        do
        {
          unsigned int v43 = 8 * v41;
          unsigned int v44 = 8 * (v41 + 1) - 1;
          if (8 * v41 <= v16) {
            int v45 = v16;
          }
          else {
            int v45 = 8 * v41;
          }
          if (v289 < v44) {
            unsigned int v44 = v289;
          }
          int v46 = v44 - v45 + 1;
          if (v41 == v299) {
            unsigned int v47 = v298;
          }
          else {
            unsigned int v47 = 8;
          }
          BOOL v48 = 1;
          if (v294 >= v295 && v43 >= v16)
          {
            int v49 = v298;
            if (v41 != v299) {
              int v49 = 8;
            }
            BOOL v48 = v46 != v49 || v296 != v302;
          }
          if (v290)
          {
            unsigned int v70 = 0;
            uint64_t v71 = v275 >> (*(unsigned char *)(v36 + 57) != 0);
            char v72 = 1;
            if (v71 > 127)
            {
              if (v71 > 511)
              {
                if (v71 == 512)
                {
                  char v72 = 0;
                  char v73 = 0;
                  unsigned int v70 = 16;
                  unsigned int v74 = 16;
                }
                else
                {
                  char v73 = 1;
                  unsigned int v74 = 0;
                  if (v71 == 1024)
                  {
                    char v72 = 0;
                    unsigned int v74 = 8;
                    unsigned int v70 = 16;
                  }
                }
              }
              else if (v71 == 128)
              {
                char v72 = 0;
                char v73 = 0;
                unsigned int v70 = 32;
                unsigned int v74 = 32;
              }
              else
              {
                char v73 = 1;
                unsigned int v74 = 0;
                if (v71 == 256)
                {
                  char v72 = 0;
                  char v73 = 0;
                  unsigned int v74 = 16;
                  unsigned int v70 = 32;
                }
              }
            }
            else
            {
              char v73 = 1;
              unsigned int v74 = 0;
              switch(v71)
              {
                case 4:
                  char v72 = 0;
                  char v73 = 0;
                  unsigned int v74 = 128;
                  unsigned int v70 = 256;
                  break;
                case 5:
                case 6:
                case 7:
                case 9:
                case 10:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 17:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                  break;
                case 8:
                  char v72 = 0;
                  char v73 = 0;
                  unsigned int v70 = 128;
                  unsigned int v74 = 128;
                  break;
                case 16:
                  char v72 = 0;
                  char v73 = 0;
                  unsigned int v74 = 64;
                  unsigned int v70 = 128;
                  break;
                case 32:
                  char v72 = 0;
                  char v73 = 0;
                  unsigned int v70 = 64;
                  unsigned int v74 = 64;
                  break;
                default:
                  if (v71 == 64)
                  {
                    char v72 = 0;
                    char v73 = 0;
                    unsigned int v74 = 32;
                    unsigned int v70 = 64;
                  }
                  break;
              }
            }
            unsigned int v264 = (v70 >> 3) - 1;
            if (v72) {
              unsigned int v265 = 0;
            }
            else {
              unsigned int v265 = 32 - __clz(~(-1 << -(char)__clz(v264)));
            }
            unsigned int v266 = (v74 >> 3) - 1;
            if (v73)
            {
              unsigned int v267 = 0;
              if (v265) {
                goto LABEL_199;
              }
            }
            else
            {
              unsigned int v267 = 32 - __clz(~(-1 << -(char)__clz(v266)));
              if (v267 | v265)
              {
LABEL_199:
                int v268 = 0;
                uint64_t v269 = 0;
                int v270 = v41 & v264;
                int v271 = v26 & v266;
                BOOL v272 = v265 != 0;
                BOOL v273 = v267 != 0;
                int v274 = 1;
                do
                {
                  --v265;
                  if (v272) {
                    v269 |= (unint64_t)(v274 & v270) << v268++;
                  }
                  else {
                    unsigned int v265 = 0;
                  }
                  --v267;
                  if (v273) {
                    v269 |= (unint64_t)(v274 & v271) << v268++;
                  }
                  else {
                    unsigned int v267 = 0;
                  }
                  v274 *= 2;
                  --v268;
                  BOOL v273 = v267 != 0;
                  BOOL v272 = v265 != 0;
                }
                while (v267 | v265);
                goto LABEL_211;
              }
            }
            uint64_t v269 = 0;
LABEL_211:
            unint64_t v58 = ((unint64_t)(v43 / v70 + v294 / v74 * ((v70 + v276) / v70)) << 14) + (v269 << 11);
            goto LABEL_58;
          }
          if (v287)
          {
            int v51 = 0;
            uint64_t v52 = 0;
            int v53 = 1;
            BOOL v54 = v284;
            BOOL v55 = v283;
            __int32 v56 = v285.i32[1];
            __int32 v57 = v285.i32[0];
            do
            {
              --v56;
              if (v54) {
                v52 |= (unint64_t)(v53 & v41) << v51++;
              }
              else {
                __int32 v56 = 0;
              }
              --v57;
              if (v55) {
                v52 |= (unint64_t)(v53 & v26) << v51++;
              }
              else {
                __int32 v57 = 0;
              }
              v53 *= 2;
              --v51;
              BOOL v55 = v57 != 0;
              BOOL v54 = v56 != 0;
            }
            while (v57 | v56);
          }
          else
          {
            uint64_t v52 = 0;
          }
          unint64_t v58 = v52 << 11;
LABEL_58:
          unsigned int v59 = *(_DWORD *)(v36 + 128) >> (*(unsigned char *)(v36 + 144) + a12);
          if (v59 <= 1) {
            unsigned int v59 = 1;
          }
          unsigned int v60 = v59 + 7;
          if (v60 < 0x10) {
            unsigned int v61 = 0;
          }
          else {
            unsigned int v61 = 32 - __clz(~(-1 << -(char)__clz((v60 >> 3) - 1)));
          }
          unsigned int v62 = *(_DWORD *)(v36 + 132) >> (*(unsigned char *)(v36 + 144) + a12);
          if (v62 <= 1) {
            unsigned int v62 = 1;
          }
          unsigned int v63 = v62 + 7;
          if (v63 < 0x10)
          {
            unsigned int v64 = 0;
            if (!v61)
            {
LABEL_80:
              uint64_t v66 = 0;
              goto LABEL_81;
            }
          }
          else
          {
            unsigned int v64 = 32 - __clz(~(-1 << -(char)__clz((v63 >> 3) - 1)));
            if (!(v64 | v61)) {
              goto LABEL_80;
            }
          }
          int v65 = 0;
          uint64_t v66 = 0;
          BOOL v67 = v61 != 0;
          BOOL v68 = v64 != 0;
          int v69 = 1;
          do
          {
            --v61;
            if (v67) {
              v66 |= (unint64_t)(v69 & v41) << v65++;
            }
            else {
              unsigned int v61 = 0;
            }
            --v64;
            if (v68) {
              v66 |= (unint64_t)(v69 & v26) << v65++;
            }
            else {
              unsigned int v64 = 0;
            }
            v69 *= 2;
            --v65;
            BOOL v68 = v64 != 0;
            BOOL v67 = v61 != 0;
          }
          while (v64 | v61);
LABEL_81:
          int v75 = v47 < 8 || v48;
          unsigned int v76 = (char *)(v292 + 8 * v66);
          uint64_t v77 = (_OWORD *)(v293 + 32 * (v45 - v16));
          int v78 = (void *)(v291 + v58);
          if (v302 < 8) {
            int v79 = 1;
          }
          else {
            int v79 = v75;
          }
          int32x4_t v300 = v78;
          if (v301)
          {
            BOOL v80 = __dst;
            if (!v79) {
              goto LABEL_93;
            }
            BOOL v81 = (char *)(v292 + 8 * v66);
            int v82 = v46;
            char v83 = v47;
            BOOL v84 = v48;
            memcpy(__dst, v78, sizeof(__dst));
            unsigned int v43 = 8 * v41;
            BOOL v48 = v84;
            LOBYTE(v47) = v83;
            int v46 = v82;
            unsigned int v76 = v81;
            uint64_t v36 = v297;
          }
          else
          {
            BOOL v80 = v78;
            if (!v79)
            {
LABEL_93:
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock(v77, a11, v80, v76, v47, v302);
              goto LABEL_94;
            }
          }
          block[0] = MEMORY[0x263EF8330];
          unsigned int v85 = v45 - v43;
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE18ELj4ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = v36;
          uint64_t v304 = v80;
          unsigned __int8 v312 = v47;
          unsigned __int8 v313 = v302;
          int v308 = v286;
          unsigned int v309 = v45 - v43;
          int v305 = v76;
          uint64_t v306 = v77;
          uint64_t v307 = a11;
          int v310 = v296;
          unsigned int v311 = v46;
          if (v48)
          {
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(v36 + 8) + 7384), block);
LABEL_94:
            unsigned int v16 = v288;
            goto LABEL_179;
          }
          unsigned int v86 = *v76;
          unsigned int v16 = v288;
          if (v86 == 255)
          {
            float64x2_t v89 = *((float64x2_t *)v80 + 1);
            float64x2_t v90 = *((float64x2_t *)v80 + 2);
            float64x2_t v91 = *((float64x2_t *)v80 + 3);
            float64x2_t v92 = *((float64x2_t *)v80 + 4);
            float64x2_t v93 = *((float64x2_t *)v80 + 5);
            float64x2_t v94 = *((float64x2_t *)v80 + 6);
            float64x2_t v95 = *((float64x2_t *)v80 + 7);
            float64x2_t v96 = *((float64x2_t *)v80 + 8);
            float64x2_t v97 = *((float64x2_t *)v80 + 9);
            float64x2_t v98 = *((float64x2_t *)v80 + 10);
            float64x2_t v99 = *((float64x2_t *)v80 + 11);
            float64x2_t v100 = *((float64x2_t *)v80 + 12);
            float64x2_t v101 = *((float64x2_t *)v80 + 13);
            float64x2_t v102 = *((float64x2_t *)v80 + 14);
            float64x2_t v103 = *((float64x2_t *)v80 + 15);
            float64x2_t v315 = *(float64x2_t *)v80;
            float64x2_t v316 = v89;
            float64x2_t v317 = v90;
            float64x2_t v318 = v91;
            float64x2_t v319 = v96;
            float64x2_t v320 = v97;
            float64x2_t v321 = v98;
            float64x2_t v322 = v99;
            float64x2_t v331 = v92;
            float64x2_t v332 = v93;
            float64x2_t v333 = v94;
            float64x2_t v334 = v95;
            uint64_t v87 = 256;
            float64x2_t v335 = v100;
            float64x2_t v336 = v101;
            float64x2_t v337 = v102;
            float64x2_t v338 = v103;
          }
          else if (v86 == 7)
          {
            float64x2_t v88 = vld1q_dup_f64((const double *)v80);
            float64x2_t v315 = v88;
            float64x2_t v316 = v88;
            float64x2_t v317 = v88;
            float64x2_t v318 = v88;
            float64x2_t v319 = v88;
            float64x2_t v320 = v88;
            float64x2_t v321 = v88;
            float64x2_t v322 = v88;
            float64x2_t v331 = v88;
            float64x2_t v332 = v88;
            float64x2_t v333 = v88;
            float64x2_t v334 = v88;
            float64x2_t v335 = v88;
            float64x2_t v336 = v88;
            uint64_t v87 = 8;
            float64x2_t v337 = v88;
            float64x2_t v338 = v88;
          }
          else if (*v76)
          {
            uint64_t v87 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((uint64_t)&v315, 256, (uint64_t)v80, v86);
          }
          else
          {
            uint64_t v87 = 0;
            float64x2_t v322 = 0u;
            float64x2_t v321 = 0u;
            float64x2_t v320 = 0u;
            float64x2_t v319 = 0u;
            float64x2_t v318 = 0u;
            float64x2_t v317 = 0u;
            float64x2_t v316 = 0u;
            float64x2_t v315 = 0u;
            float64x2_t v331 = 0u;
            float64x2_t v332 = 0u;
            float64x2_t v333 = 0u;
            float64x2_t v334 = 0u;
            float64x2_t v335 = 0u;
            float64x2_t v336 = 0u;
            float64x2_t v337 = 0u;
            float64x2_t v338 = 0u;
          }
          uint64_t v104 = (uint64_t)v80 + v87;
          unsigned int v105 = v76[1];
          if (v105 == 255)
          {
            float64x2_t v108 = *(float64x2_t *)(v104 + 16);
            float64x2_t v109 = *(float64x2_t *)(v104 + 32);
            float64x2_t v110 = *(float64x2_t *)(v104 + 48);
            float64x2_t v111 = *(float64x2_t *)(v104 + 64);
            float64x2_t v112 = *(float64x2_t *)(v104 + 80);
            float64x2_t v113 = *(float64x2_t *)(v104 + 96);
            float64x2_t v114 = *(float64x2_t *)(v104 + 112);
            float64x2_t v115 = *(float64x2_t *)(v104 + 128);
            float64x2_t v116 = *(float64x2_t *)(v104 + 144);
            float64x2_t v117 = *(float64x2_t *)(v104 + 160);
            float64x2_t v118 = *(float64x2_t *)(v104 + 176);
            float64x2_t v119 = *(float64x2_t *)(v104 + 192);
            float64x2_t v120 = *(float64x2_t *)(v104 + 208);
            float64x2_t v121 = *(float64x2_t *)(v104 + 224);
            float64x2_t v122 = *(float64x2_t *)(v104 + 240);
            float64x2_t v347 = *(float64x2_t *)v104;
            float64x2_t v348 = v108;
            float64x2_t v349 = v109;
            float64x2_t v350 = v110;
            float64x2_t v351 = v115;
            float64x2_t v352 = v116;
            float64x2_t v353 = v117;
            float64x2_t v354 = v118;
            float64x2_t v363 = v111;
            float64x2_t v364 = v112;
            float64x2_t v365 = v113;
            float64x2_t v366 = v114;
            uint64_t v106 = 256;
            float64x2_t v367 = v119;
            float64x2_t v368 = v120;
            float64x2_t v369 = v121;
            float64x2_t v370 = v122;
          }
          else if (v105 == 7)
          {
            float64x2_t v107 = vld1q_dup_f64((const double *)v104);
            float64x2_t v347 = v107;
            float64x2_t v348 = v107;
            float64x2_t v349 = v107;
            float64x2_t v350 = v107;
            float64x2_t v351 = v107;
            float64x2_t v352 = v107;
            float64x2_t v353 = v107;
            float64x2_t v354 = v107;
            float64x2_t v363 = v107;
            float64x2_t v364 = v107;
            float64x2_t v365 = v107;
            float64x2_t v366 = v107;
            float64x2_t v367 = v107;
            float64x2_t v368 = v107;
            uint64_t v106 = 8;
            float64x2_t v369 = v107;
            float64x2_t v370 = v107;
          }
          else if (v76[1])
          {
            uint64_t v106 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((uint64_t)&v347, 256, v104, v105);
          }
          else
          {
            uint64_t v106 = 0;
            float64x2_t v353 = 0u;
            float64x2_t v354 = 0u;
            float64x2_t v351 = 0u;
            float64x2_t v352 = 0u;
            float64x2_t v349 = 0u;
            float64x2_t v350 = 0u;
            float64x2_t v347 = 0u;
            float64x2_t v348 = 0u;
            float64x2_t v363 = 0u;
            float64x2_t v364 = 0u;
            float64x2_t v365 = 0u;
            float64x2_t v366 = 0u;
            float64x2_t v367 = 0u;
            float64x2_t v368 = 0u;
            float64x2_t v369 = 0u;
            float64x2_t v370 = 0u;
          }
          uint64_t v123 = v104 + v106;
          unsigned int v124 = v76[2];
          if (v124 == 255)
          {
            float64x2_t v127 = *(float64x2_t *)(v123 + 16);
            float64x2_t v128 = *(float64x2_t *)(v123 + 32);
            float64x2_t v129 = *(float64x2_t *)(v123 + 48);
            float64x2_t v130 = *(float64x2_t *)(v123 + 64);
            float64x2_t v131 = *(float64x2_t *)(v123 + 80);
            float64x2_t v132 = *(float64x2_t *)(v123 + 96);
            float64x2_t v133 = *(float64x2_t *)(v123 + 112);
            float64x2_t v134 = *(float64x2_t *)(v123 + 128);
            float64x2_t v135 = *(float64x2_t *)(v123 + 144);
            float64x2_t v136 = *(float64x2_t *)(v123 + 160);
            float64x2_t v137 = *(float64x2_t *)(v123 + 176);
            float64x2_t v138 = *(float64x2_t *)(v123 + 192);
            float64x2_t v139 = *(float64x2_t *)(v123 + 208);
            float64x2_t v140 = *(float64x2_t *)(v123 + 224);
            float64x2_t v141 = *(float64x2_t *)(v123 + 240);
            float64x2_t v323 = *(float64x2_t *)v123;
            float64x2_t v324 = v127;
            float64x2_t v325 = v128;
            float64x2_t v326 = v129;
            float64x2_t v327 = v134;
            float64x2_t v328 = v135;
            float64x2_t v329 = v136;
            float64x2_t v330 = v137;
            float64x2_t v339 = v130;
            float64x2_t v340 = v131;
            float64x2_t v341 = v132;
            float64x2_t v342 = v133;
            uint64_t v125 = 256;
            float64x2_t v343 = v138;
            float64x2_t v344 = v139;
            float64x2_t v345 = v140;
            float64x2_t v346 = v141;
          }
          else if (v124 == 7)
          {
            float64x2_t v126 = vld1q_dup_f64((const double *)v123);
            float64x2_t v323 = v126;
            float64x2_t v324 = v126;
            float64x2_t v325 = v126;
            float64x2_t v326 = v126;
            float64x2_t v327 = v126;
            float64x2_t v328 = v126;
            float64x2_t v329 = v126;
            float64x2_t v330 = v126;
            float64x2_t v339 = v126;
            float64x2_t v340 = v126;
            float64x2_t v341 = v126;
            float64x2_t v342 = v126;
            float64x2_t v343 = v126;
            float64x2_t v344 = v126;
            uint64_t v125 = 8;
            float64x2_t v345 = v126;
            float64x2_t v346 = v126;
          }
          else if (v76[2])
          {
            uint64_t v125 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((uint64_t)&v323, 256, v123, v124);
          }
          else
          {
            uint64_t v125 = 0;
            float64x2_t v329 = 0u;
            float64x2_t v330 = 0u;
            float64x2_t v327 = 0u;
            float64x2_t v328 = 0u;
            float64x2_t v325 = 0u;
            float64x2_t v326 = 0u;
            float64x2_t v323 = 0u;
            float64x2_t v324 = 0u;
            float64x2_t v339 = 0u;
            float64x2_t v340 = 0u;
            float64x2_t v341 = 0u;
            float64x2_t v342 = 0u;
            float64x2_t v343 = 0u;
            float64x2_t v344 = 0u;
            float64x2_t v345 = 0u;
            float64x2_t v346 = 0u;
          }
          uint64_t v142 = v123 + v125;
          unsigned int v143 = v76[3];
          if (v143 == 255)
          {
            float64x2_t v146 = *(float64x2_t *)(v142 + 16);
            float64x2_t v147 = *(float64x2_t *)(v142 + 32);
            float64x2_t v148 = *(float64x2_t *)(v142 + 48);
            float64x2_t v149 = *(float64x2_t *)(v142 + 64);
            float64x2_t v150 = *(float64x2_t *)(v142 + 80);
            float64x2_t v151 = *(float64x2_t *)(v142 + 96);
            float64x2_t v152 = *(float64x2_t *)(v142 + 112);
            float64x2_t v153 = *(float64x2_t *)(v142 + 128);
            float64x2_t v154 = *(float64x2_t *)(v142 + 144);
            float64x2_t v155 = *(float64x2_t *)(v142 + 160);
            float64x2_t v156 = *(float64x2_t *)(v142 + 176);
            float64x2_t v157 = *(float64x2_t *)(v142 + 192);
            float64x2_t v158 = *(float64x2_t *)(v142 + 208);
            float64x2_t v159 = *(float64x2_t *)(v142 + 224);
            float64x2_t v160 = *(float64x2_t *)(v142 + 240);
            float64x2_t v355 = *(float64x2_t *)v142;
            float64x2_t v356 = v146;
            float64x2_t v357 = v147;
            float64x2_t v358 = v148;
            float64x2_t v359 = v153;
            float64x2_t v360 = v154;
            float64x2_t v361 = v155;
            float64x2_t v362 = v156;
            float64x2_t v371 = v149;
            float64x2_t v372 = v150;
            float64x2_t v373 = v151;
            float64x2_t v374 = v152;
            uint64_t v144 = 256;
            float64x2_t v375 = v157;
            float64x2_t v376 = v158;
            float64x2_t v377 = v159;
            float64x2_t v378 = v160;
          }
          else if (v143 == 7)
          {
            float64x2_t v145 = vld1q_dup_f64((const double *)v142);
            float64x2_t v355 = v145;
            float64x2_t v356 = v145;
            float64x2_t v357 = v145;
            float64x2_t v358 = v145;
            float64x2_t v359 = v145;
            float64x2_t v360 = v145;
            float64x2_t v361 = v145;
            float64x2_t v362 = v145;
            float64x2_t v371 = v145;
            float64x2_t v372 = v145;
            float64x2_t v373 = v145;
            float64x2_t v374 = v145;
            float64x2_t v375 = v145;
            float64x2_t v376 = v145;
            uint64_t v144 = 8;
            float64x2_t v377 = v145;
            float64x2_t v378 = v145;
          }
          else if (v76[3])
          {
            uint64_t v144 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((uint64_t)&v355, 256, v142, v143);
          }
          else
          {
            uint64_t v144 = 0;
            float64x2_t v361 = 0u;
            float64x2_t v362 = 0u;
            float64x2_t v359 = 0u;
            float64x2_t v360 = 0u;
            float64x2_t v357 = 0u;
            float64x2_t v358 = 0u;
            float64x2_t v355 = 0u;
            float64x2_t v356 = 0u;
            float64x2_t v371 = 0u;
            float64x2_t v372 = 0u;
            float64x2_t v373 = 0u;
            float64x2_t v374 = 0u;
            float64x2_t v375 = 0u;
            float64x2_t v376 = 0u;
            float64x2_t v377 = 0u;
            float64x2_t v378 = 0u;
          }
          uint64_t v161 = v142 + v144;
          unsigned int v162 = v76[4];
          if (v162 == 255)
          {
            float64x2_t v165 = *(float64x2_t *)(v161 + 16);
            float64x2_t v166 = *(float64x2_t *)(v161 + 32);
            float64x2_t v167 = *(float64x2_t *)(v161 + 48);
            float64x2_t v168 = *(float64x2_t *)(v161 + 64);
            float64x2_t v169 = *(float64x2_t *)(v161 + 80);
            float64x2_t v170 = *(float64x2_t *)(v161 + 96);
            float64x2_t v171 = *(float64x2_t *)(v161 + 112);
            float64x2_t v172 = *(float64x2_t *)(v161 + 128);
            float64x2_t v173 = *(float64x2_t *)(v161 + 144);
            float64x2_t v174 = *(float64x2_t *)(v161 + 160);
            float64x2_t v175 = *(float64x2_t *)(v161 + 176);
            float64x2_t v176 = *(float64x2_t *)(v161 + 192);
            float64x2_t v177 = *(float64x2_t *)(v161 + 208);
            float64x2_t v178 = *(float64x2_t *)(v161 + 224);
            float64x2_t v179 = *(float64x2_t *)(v161 + 240);
            float64x2_t v379 = *(float64x2_t *)v161;
            float64x2_t v380 = v165;
            float64x2_t v381 = v166;
            float64x2_t v382 = v167;
            float64x2_t v383 = v172;
            float64x2_t v384 = v173;
            float64x2_t v385 = v174;
            float64x2_t v386 = v175;
            float64x2_t v395 = v168;
            float64x2_t v396 = v169;
            float64x2_t v397 = v170;
            float64x2_t v398 = v171;
            uint64_t v163 = 256;
            float64x2_t v399 = v176;
            float64x2_t v400 = v177;
            float64x2_t v401 = v178;
            float64x2_t v402 = v179;
          }
          else if (v162 == 7)
          {
            float64x2_t v164 = vld1q_dup_f64((const double *)v161);
            float64x2_t v379 = v164;
            float64x2_t v380 = v164;
            float64x2_t v381 = v164;
            float64x2_t v382 = v164;
            float64x2_t v383 = v164;
            float64x2_t v384 = v164;
            float64x2_t v385 = v164;
            float64x2_t v386 = v164;
            float64x2_t v395 = v164;
            float64x2_t v396 = v164;
            float64x2_t v397 = v164;
            float64x2_t v398 = v164;
            float64x2_t v399 = v164;
            float64x2_t v400 = v164;
            float64x2_t v401 = v164;
            uint64_t v163 = 8;
            float64x2_t v402 = v164;
          }
          else if (v76[4])
          {
            uint64_t v163 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((uint64_t)&v379, 256, v161, v162);
          }
          else
          {
            uint64_t v163 = 0;
            float64x2_t v385 = 0u;
            float64x2_t v386 = 0u;
            float64x2_t v383 = 0u;
            float64x2_t v384 = 0u;
            float64x2_t v381 = 0u;
            float64x2_t v382 = 0u;
            float64x2_t v379 = 0u;
            float64x2_t v380 = 0u;
            float64x2_t v395 = 0u;
            float64x2_t v396 = 0u;
            float64x2_t v397 = 0u;
            float64x2_t v398 = 0u;
            float64x2_t v399 = 0u;
            float64x2_t v400 = 0u;
            float64x2_t v401 = 0u;
            float64x2_t v402 = 0u;
          }
          uint64_t v180 = v161 + v163;
          unsigned int v181 = v76[5];
          if (v181 == 255)
          {
            float64x2_t v184 = *(float64x2_t *)(v180 + 16);
            float64x2_t v185 = *(float64x2_t *)(v180 + 32);
            float64x2_t v186 = *(float64x2_t *)(v180 + 48);
            float64x2_t v187 = *(float64x2_t *)(v180 + 64);
            float64x2_t v188 = *(float64x2_t *)(v180 + 80);
            float64x2_t v189 = *(float64x2_t *)(v180 + 96);
            float64x2_t v190 = *(float64x2_t *)(v180 + 112);
            float64x2_t v191 = *(float64x2_t *)(v180 + 128);
            float64x2_t v192 = *(float64x2_t *)(v180 + 144);
            float64x2_t v193 = *(float64x2_t *)(v180 + 160);
            float64x2_t v194 = *(float64x2_t *)(v180 + 176);
            float64x2_t v195 = *(float64x2_t *)(v180 + 192);
            float64x2_t v196 = *(float64x2_t *)(v180 + 208);
            float64x2_t v197 = *(float64x2_t *)(v180 + 224);
            float64x2_t v198 = *(float64x2_t *)(v180 + 240);
            float64x2_t v411 = *(float64x2_t *)v180;
            float64x2_t v412 = v184;
            float64x2_t v413 = v185;
            float64x2_t v414 = v186;
            float64x2_t v415 = v191;
            float64x2_t v416 = v192;
            float64x2_t v417 = v193;
            float64x2_t v418 = v194;
            float64x2_t v427 = v187;
            float64x2_t v428 = v188;
            float64x2_t v429 = v189;
            float64x2_t v430 = v190;
            uint64_t v182 = 256;
            float64x2_t v431 = v195;
            float64x2_t v432 = v196;
            float64x2_t v433 = v197;
            float64x2_t v434 = v198;
          }
          else if (v181 == 7)
          {
            float64x2_t v183 = vld1q_dup_f64((const double *)v180);
            float64x2_t v411 = v183;
            float64x2_t v412 = v183;
            float64x2_t v413 = v183;
            float64x2_t v414 = v183;
            float64x2_t v415 = v183;
            float64x2_t v416 = v183;
            float64x2_t v417 = v183;
            float64x2_t v418 = v183;
            float64x2_t v427 = v183;
            float64x2_t v428 = v183;
            float64x2_t v429 = v183;
            float64x2_t v430 = v183;
            float64x2_t v431 = v183;
            float64x2_t v432 = v183;
            float64x2_t v433 = v183;
            uint64_t v182 = 8;
            float64x2_t v434 = v183;
          }
          else if (v76[5])
          {
            uint64_t v182 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((uint64_t)&v411, 256, v180, v181);
          }
          else
          {
            uint64_t v182 = 0;
            float64x2_t v417 = 0u;
            float64x2_t v418 = 0u;
            float64x2_t v415 = 0u;
            float64x2_t v416 = 0u;
            float64x2_t v413 = 0u;
            float64x2_t v414 = 0u;
            float64x2_t v411 = 0u;
            float64x2_t v412 = 0u;
            float64x2_t v427 = 0u;
            float64x2_t v428 = 0u;
            float64x2_t v429 = 0u;
            float64x2_t v430 = 0u;
            float64x2_t v431 = 0u;
            float64x2_t v432 = 0u;
            float64x2_t v433 = 0u;
            float64x2_t v434 = 0u;
          }
          uint64_t v199 = v180 + v182;
          unsigned int v200 = v76[6];
          if (v200 == 255)
          {
            float64x2_t v203 = *(float64x2_t *)(v199 + 16);
            float64x2_t v204 = *(float64x2_t *)(v199 + 32);
            float64x2_t v205 = *(float64x2_t *)(v199 + 48);
            float64x2_t v206 = *(float64x2_t *)(v199 + 64);
            float64x2_t v207 = *(float64x2_t *)(v199 + 80);
            float64x2_t v208 = *(float64x2_t *)(v199 + 96);
            float64x2_t v209 = *(float64x2_t *)(v199 + 112);
            float64x2_t v210 = *(float64x2_t *)(v199 + 128);
            float64x2_t v211 = *(float64x2_t *)(v199 + 144);
            float64x2_t v212 = *(float64x2_t *)(v199 + 160);
            float64x2_t v213 = *(float64x2_t *)(v199 + 176);
            float64x2_t v214 = *(float64x2_t *)(v199 + 192);
            float64x2_t v215 = *(float64x2_t *)(v199 + 208);
            float64x2_t v216 = *(float64x2_t *)(v199 + 224);
            float64x2_t v217 = *(float64x2_t *)(v199 + 240);
            float64x2_t v387 = *(float64x2_t *)v199;
            float64x2_t v388 = v203;
            float64x2_t v389 = v204;
            float64x2_t v390 = v205;
            float64x2_t v391 = v210;
            float64x2_t v392 = v211;
            float64x2_t v393 = v212;
            float64x2_t v394 = v213;
            float64x2_t v403 = v206;
            float64x2_t v404 = v207;
            float64x2_t v405 = v208;
            float64x2_t v406 = v209;
            uint64_t v201 = 256;
            float64x2_t v407 = v214;
            float64x2_t v408 = v215;
            float64x2_t v409 = v216;
            float64x2_t v410 = v217;
          }
          else if (v200 == 7)
          {
            float64x2_t v202 = vld1q_dup_f64((const double *)v199);
            float64x2_t v387 = v202;
            float64x2_t v388 = v202;
            float64x2_t v389 = v202;
            float64x2_t v390 = v202;
            float64x2_t v391 = v202;
            float64x2_t v392 = v202;
            float64x2_t v393 = v202;
            float64x2_t v394 = v202;
            float64x2_t v403 = v202;
            float64x2_t v404 = v202;
            float64x2_t v405 = v202;
            float64x2_t v406 = v202;
            float64x2_t v407 = v202;
            float64x2_t v408 = v202;
            float64x2_t v409 = v202;
            uint64_t v201 = 8;
            float64x2_t v410 = v202;
          }
          else if (v76[6])
          {
            uint64_t v201 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((uint64_t)&v387, 256, v199, v200);
          }
          else
          {
            uint64_t v201 = 0;
            float64x2_t v393 = 0u;
            float64x2_t v394 = 0u;
            float64x2_t v391 = 0u;
            float64x2_t v392 = 0u;
            float64x2_t v389 = 0u;
            float64x2_t v390 = 0u;
            float64x2_t v387 = 0u;
            float64x2_t v388 = 0u;
            float64x2_t v403 = 0u;
            float64x2_t v404 = 0u;
            float64x2_t v405 = 0u;
            float64x2_t v406 = 0u;
            float64x2_t v407 = 0u;
            float64x2_t v408 = 0u;
            float64x2_t v409 = 0u;
            float64x2_t v410 = 0u;
          }
          uint64_t v218 = v199 + v201;
          unsigned int v219 = v76[7];
          if (v219 == 255)
          {
            float64x2_t v223 = *(float64x2_t *)(v218 + 16);
            float64x2_t v224 = *(float64x2_t *)(v218 + 32);
            float64x2_t v225 = *(float64x2_t *)(v218 + 48);
            float64x2_t v226 = *(float64x2_t *)(v218 + 64);
            float64x2_t v227 = *(float64x2_t *)(v218 + 80);
            float64x2_t v228 = *(float64x2_t *)(v218 + 96);
            float64x2_t v229 = *(float64x2_t *)(v218 + 112);
            float64x2_t v230 = *(float64x2_t *)(v218 + 128);
            float64x2_t v231 = *(float64x2_t *)(v218 + 144);
            float64x2_t v232 = *(float64x2_t *)(v218 + 160);
            float64x2_t v233 = *(float64x2_t *)(v218 + 176);
            float64x2_t v234 = *(float64x2_t *)(v218 + 192);
            float64x2_t v235 = *(float64x2_t *)(v218 + 208);
            float64x2_t v236 = *(float64x2_t *)(v218 + 224);
            float64x2_t v237 = *(float64x2_t *)(v218 + 240);
            float64x2_t v419 = *(float64x2_t *)v218;
            float64x2_t v420 = v223;
            float64x2_t v421 = v224;
            float64x2_t v422 = v225;
            float64x2_t v423 = v230;
            float64x2_t v424 = v231;
            float64x2_t v425 = v232;
            float64x2_t v426 = v233;
            float64x2_t v435 = v226;
            float64x2_t v436 = v227;
            float64x2_t v437 = v228;
            float64x2_t v438 = v229;
            int v220 = v296;
            unsigned int v221 = v286;
            float64x2_t v439 = v234;
            float64x2_t v440 = v235;
            float64x2_t v441 = v236;
            float64x2_t v442 = v237;
            if (!v296) {
              goto LABEL_178;
            }
          }
          else if (v219 == 7)
          {
            float64x2_t v222 = vld1q_dup_f64((const double *)v218);
            float64x2_t v419 = v222;
            float64x2_t v420 = v222;
            float64x2_t v421 = v222;
            float64x2_t v422 = v222;
            float64x2_t v423 = v222;
            float64x2_t v424 = v222;
            float64x2_t v425 = v222;
            float64x2_t v426 = v222;
            float64x2_t v435 = v222;
            float64x2_t v436 = v222;
            float64x2_t v437 = v222;
            float64x2_t v438 = v222;
            float64x2_t v439 = v222;
            float64x2_t v440 = v222;
            float64x2_t v441 = v222;
            int v220 = v296;
            unsigned int v221 = v286;
            float64x2_t v442 = v222;
            if (!v296) {
              goto LABEL_178;
            }
          }
          else if (v76[7])
          {
            AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((uint64_t)&v419, 256, v218, v219);
            unsigned int v221 = v308;
            unsigned int v85 = v309;
            int v220 = v310;
            if (!v310) {
              goto LABEL_178;
            }
          }
          else
          {
            float64x2_t v425 = 0u;
            float64x2_t v426 = 0u;
            float64x2_t v423 = 0u;
            float64x2_t v424 = 0u;
            float64x2_t v421 = 0u;
            float64x2_t v422 = 0u;
            float64x2_t v419 = 0u;
            float64x2_t v420 = 0u;
            float64x2_t v435 = 0u;
            float64x2_t v436 = 0u;
            float64x2_t v437 = 0u;
            float64x2_t v438 = 0u;
            float64x2_t v439 = 0u;
            float64x2_t v440 = 0u;
            int v220 = v296;
            unsigned int v221 = v286;
            float64x2_t v441 = 0u;
            float64x2_t v442 = 0u;
            if (!v296) {
              goto LABEL_178;
            }
          }
          if (v311)
          {
            uint64_t v238 = 0;
            unint64_t v239 = (unint64_t)v221 << 8;
            uint64_t v240 = 32 * v85;
            float64x2_t v241 = (char *)&v315 + v239 + v240;
            uint64_t v242 = v306;
            uint64_t v243 = v307;
            unint64_t v244 = 32 * v311;
            if (v244 <= 1) {
              uint64_t v245 = 1;
            }
            else {
              uint64_t v245 = 32 * v311;
            }
            unint64_t v246 = v239 + v240;
            uint64_t v247 = (char *)&v315 + v239 + v240;
            if (v245) {
              BOOL v248 = (unint64_t)(v245 - 1) >> 32 == 0;
            }
            else {
              BOOL v248 = 0;
            }
            char v249 = !v248;
            uint64_t v250 = v245 & 0x1FFFFFFFE0;
            unint64_t v251 = (char *)&v316 + v246;
            uint64_t v252 = v306 + 1;
            do
            {
              unint64_t v253 = (char *)v242 + v243 * v238;
              int8x16_t v254 = &v241[256 * v238];
              if ((unint64_t)(&v247[256 * v238] - v253) < 0x20) {
                char v255 = 1;
              }
              else {
                char v255 = v249;
              }
              if (v255)
              {
                int v256 = 0;
              }
              else
              {
                uint64_t v257 = v252;
                int8x16_t v258 = v251;
                uint64_t v259 = v245 & 0x1FFFFFFFE0;
                do
                {
                  long long v260 = *v257;
                  *(v258 - 1) = *(v257 - 1);
                  *int8x16_t v258 = v260;
                  v258 += 2;
                  v257 += 2;
                  v259 -= 32;
                }
                while (v259);
                if (v245 == v250) {
                  goto LABEL_165;
                }
                v253 += v250;
                v254 += v250;
                int v256 = v245 & 0xFFFFFFE0;
              }
              unsigned int v261 = v256 + 1;
              do
              {
                char v262 = *v253++;
                *v254++ = v262;
              }
              while (v244 > v261++);
LABEL_165:
              ++v238;
              v251 += 256;
              uint64_t v252 = (long long *)((char *)v252 + v243);
            }
            while (v238 != v220);
          }
LABEL_178:
          AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock(&v315, 256, v304, v305, v312, v313);
LABEL_179:
          uint64_t result = v300;
          if (v301) {
            uint64_t result = memcpy(v300, v80, 0x800uLL);
          }
          BOOL v31 = v41++ == v289 >> 3;
          uint64_t v36 = v297;
        }
        while (!v31);
        BOOL v31 = v26++ == v282;
      }
      while (!v31);
    }
  }
  return result;
}

uint64_t AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10, uint64_t a11, char a12)
{
  uint64_t v12 = MEMORY[0x270FA5388](a1);
  unsigned int v14 = v13;
  unsigned int v16 = v15;
  unsigned int v18 = v17;
  unsigned int v20 = v19;
  uint64_t v147 = v21;
  uint64_t v148 = v22;
  uint64_t v134 = v23;
  uint64_t v24 = v12;
  uint64_t v177 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(v12, 0);
  unsigned int v151 = v14;
  unsigned int v136 = v14 + a10 - 1;
  uint64_t v152 = v24;
  if (*(void *)(v24 + 168)) {
    int v26 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v26 = 0;
  }
  unsigned int v27 = v20 - 1;
  unsigned int v28 = v18 - 1;
  unsigned int v29 = v14 >> 3;
  unsigned int v135 = v136 >> 3;
  BOOL v30 = (v26 & 0xD00) == 0 || v26 == 768;
  int v31 = v26 & 0xE00;
  int v33 = !v30 && v31 != 1024;
  int v156 = v33;
  uint64_t result = v24;
  if (*(unsigned char *)(v24 + 232))
  {
    unsigned int v35 = *(unsigned __int8 *)(v24 + 255);
    unsigned int v36 = *(unsigned __int8 *)(v24 + 254);
    char v37 = __clz(v27);
    if (1 << v35 >= v18 || v20 >> v36)
    {
      if (!(v18 >> v35) && 1 << v36 < v20)
      {
        if (v18 < 2) {
          unsigned int v40 = 0;
        }
        else {
          unsigned int v40 = __clz(~(-1 << -(char)__clz(v28))) - 32;
        }
        v36 += v35 + v40;
        unsigned int v35 = -v40;
      }
    }
    else
    {
      unsigned int v38 = 32 - __clz(~(-1 << -v37));
      unsigned int v39 = v36 + v35;
      if (v20 < 2) {
        unsigned int v38 = 0;
      }
      unsigned int v35 = v39 - v38;
      unsigned int v36 = v38;
    }
    if (v20 < 2)
    {
      if (v36) {
        goto LABEL_27;
      }
    }
    else if (32 - __clz(~(-1 << -v37)) < v36)
    {
LABEL_27:
      BOOL v146 = 0;
LABEL_32:
      unsigned int v143 = v36 - 3;
      unsigned int v140 = v35 - 3;
      int v42 = -1 << *(unsigned char *)(*(void *)(v24 + 208) + 48);
      unsigned int v133 = (((~v42 + v20) & v42) + ~(-1 << v36)) >> v36;
      goto LABEL_33;
    }
    if (v18 < 2) {
      unsigned int v41 = 0;
    }
    else {
      unsigned int v41 = 32 - __clz(~(-1 << -(char)__clz(v28)));
    }
    BOOL v146 = v41 >= v35;
    goto LABEL_32;
  }
  BOOL v146 = 0;
  unsigned int v133 = 0;
  unsigned int v140 = 0;
  unsigned int v143 = 0;
LABEL_33:
  if (v29 <= v135)
  {
    unsigned int v145 = v16 + a9 - 1;
    unsigned int v132 = v16 >> 3;
    if (v16 >> 3 <= v145 >> 3)
    {
      unsigned int v155 = v27 >> 3;
      unsigned int v131 = v28 >> 3;
      int v154 = (v27 & 7) + 1;
      unsigned int v130 = (v28 & 7) + 1;
      int v129 = ~(-1 << v140);
      uint32x2_t v43 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(v20, v18), (int32x2_t)0x700000007);
      int8x8_t v44 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v43, 3uLL))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x1000000010, v43));
      __int32 v141 = v44.i32[0] | v44.i32[1];
      int8x8_t v139 = v44;
      BOOL v137 = v44.i32[0] != 0;
      BOOL v138 = v44.i32[1] != 0;
      unsigned int v144 = v16;
      do
      {
        unsigned int v45 = (8 * v29) | 7;
        if (8 * v29 <= v151) {
          int v46 = v151;
        }
        else {
          int v46 = 8 * v29;
        }
        if (v136 < v45) {
          unsigned int v45 = v136;
        }
        int v142 = v46 - 8 * v29;
        int v150 = v45 - v46 + 1;
        unsigned int v47 = v132;
        if (v29 == v131) {
          uint64_t v48 = v130;
        }
        else {
          uint64_t v48 = 8;
        }
        int v49 = v29 & v129;
        uint64_t v149 = v134 + (v46 - v151) * a11;
        unsigned int v153 = v48;
        do
        {
          uint64_t v50 = 8 * v47;
          unsigned int v51 = 8 * (v47 + 1) - 1;
          if (v50 <= v16) {
            int v52 = v16;
          }
          else {
            int v52 = 8 * v47;
          }
          if (v145 < v51) {
            unsigned int v51 = v145;
          }
          int v53 = v51 - v52 + 1;
          if (v47 == v155) {
            unsigned int v54 = v154;
          }
          else {
            unsigned int v54 = 8;
          }
          BOOL v55 = 1;
          if (8 * v29 >= v151 && v50 >= v16)
          {
            int v56 = v154;
            if (v47 != v155) {
              int v56 = 8;
            }
            BOOL v55 = v53 != v56 || v150 != v48;
          }
          if (v146)
          {
            if (v143 | v140)
            {
              int v58 = 0;
              uint64_t v59 = 0;
              BOOL v60 = v140 != 0;
              int v61 = 1;
              BOOL v63 = v143 != 0;
              unsigned int v62 = v140;
              unsigned int v64 = v143;
              do
              {
                --v64;
                if (v63) {
                  v59 |= (unint64_t)(v47 & ~(-1 << v143) & v61) << v58++;
                }
                else {
                  unsigned int v64 = 0;
                }
                --v62;
                if (v60) {
                  v59 |= (unint64_t)(v49 & v61) << v58++;
                }
                else {
                  unsigned int v62 = 0;
                }
                v61 *= 2;
                --v58;
                BOOL v60 = v62 != 0;
                BOOL v63 = v64 != 0;
              }
              while (v62 | v64);
            }
            else
            {
              uint64_t v59 = 0;
            }
            uint64_t v72 = *(void *)(result + 320) * ((v47 >> v143) + (v29 >> v140) * v133) + (v59 << 11);
          }
          else
          {
            if (v141)
            {
              int v65 = 0;
              uint64_t v66 = 0;
              int v67 = 1;
              BOOL v68 = v137;
              BOOL v69 = v138;
              __int32 v71 = v139.i32[0];
              __int32 v70 = v139.i32[1];
              do
              {
                --v70;
                if (v69) {
                  v66 |= (unint64_t)(v67 & v47) << v65++;
                }
                else {
                  __int32 v70 = 0;
                }
                --v71;
                if (v68) {
                  v66 |= (unint64_t)(v67 & v29) << v65++;
                }
                else {
                  __int32 v71 = 0;
                }
                v67 *= 2;
                --v65;
                BOOL v68 = v71 != 0;
                BOOL v69 = v70 != 0;
              }
              while (v71 | v70);
            }
            else
            {
              uint64_t v66 = 0;
            }
            uint64_t v72 = v66 << 11;
          }
          unsigned int v73 = *(_DWORD *)(result + 128) >> (*(unsigned char *)(result + 144) + a12);
          if (v73 <= 1) {
            unsigned int v73 = 1;
          }
          unsigned int v74 = v73 + 7;
          if (v74 < 0x10) {
            unsigned int v75 = 0;
          }
          else {
            unsigned int v75 = 32 - __clz(~(-1 << -(char)__clz((v74 >> 3) - 1)));
          }
          unsigned int v76 = *(_DWORD *)(result + 132) >> (*(unsigned char *)(result + 144) + a12);
          if (v76 <= 1) {
            unsigned int v76 = 1;
          }
          unsigned int v77 = v76 + 7;
          if (v77 < 0x10) {
            unsigned int v78 = 0;
          }
          else {
            unsigned int v78 = 32 - __clz(~(-1 << -(char)__clz((v77 >> 3) - 1)));
          }
          if (v78 | v75)
          {
            int v79 = 0;
            uint64_t v80 = 0;
            BOOL v81 = v75 != 0;
            BOOL v82 = v78 != 0;
            int v83 = 1;
            do
            {
              --v75;
              if (v81) {
                v80 |= (unint64_t)(v83 & v47) << v79++;
              }
              else {
                unsigned int v75 = 0;
              }
              --v78;
              if (v82) {
                v80 |= (unint64_t)(v83 & v29) << v79++;
              }
              else {
                unsigned int v78 = 0;
              }
              v83 *= 2;
              --v79;
              BOOL v82 = v78 != 0;
              BOOL v81 = v75 != 0;
            }
            while (v78 | v75);
          }
          else
          {
            uint64_t v80 = 0;
          }
          int v84 = v54 < 8 || v55;
          unsigned int v85 = (unsigned __int8 *)(v148 + 8 * v80);
          unint64_t v86 = v149 + 32 * (v52 - v16);
          uint64_t v87 = (void *)(v147 + v72);
          if (v48 < 8) {
            int v88 = 1;
          }
          else {
            int v88 = v84;
          }
          if (v156)
          {
            if (!v88)
            {
              float64x2_t v92 = __dst;
LABEL_123:
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock(v86, a11, (uint64_t)v92, v85, v54, v48, v50, v25);
              goto LABEL_124;
            }
            float64x2_t v89 = v87;
            float64x2_t v90 = v87;
            char v91 = v54;
            memcpy(__dst, v89, sizeof(__dst));
            LODWORD(v50) = 8 * v47;
            float64x2_t v92 = __dst;
            LOBYTE(v54) = v91;
            uint64_t v87 = v90;
            int v49 = v29 & v129;
            LOBYTE(v48) = v153;
            uint64_t result = v152;
          }
          else
          {
            float64x2_t v92 = v87;
            if (!v88) {
              goto LABEL_123;
            }
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE19ELj4ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = result;
          float64x2_t v158 = v92;
          unsigned __int8 v166 = v54;
          unsigned __int8 v167 = v48;
          unsigned int v162 = v142;
          unsigned int v163 = v52 - v50;
          float64x2_t v159 = v85;
          unint64_t v160 = v86;
          uint64_t v161 = a11;
          unsigned int v164 = v150;
          unsigned int v165 = v53;
          if (!v55)
          {
            uint64_t v94 = (uint64_t)&v92[AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v169, 256, (uint64_t)v92, *v85)];
            uint64_t v95 = v94
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v171, 256, v94, v85[1]);
            uint64_t v96 = v95
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v170, 256, v95, v85[2]);
            uint64_t v97 = v96
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v172, 256, v96, v85[3]);
            uint64_t v98 = v97
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v173, 256, v97, v85[4]);
            uint64_t v99 = v98
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v175, 256, v98, v85[5]);
            uint64_t v100 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v174, 256, v99, v85[6]);
            AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v176, 256, v99 + v100, v85[7]);
            uint64_t v103 = v164;
            unsigned int v16 = v144;
            unsigned int v93 = v47 + 1;
            if (!v164 || !v165)
            {
LABEL_151:
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v169, 256, (uint64_t)v158, v159, v166, v167, v101, v102);
              if (!v156) {
                goto LABEL_47;
              }
              goto LABEL_152;
            }
            uint64_t v104 = 0;
            unint64_t v105 = (unint64_t)v162 << 8;
            uint64_t v106 = 32 * v163;
            float64x2_t v107 = &v169[0].i8[v105 + v106];
            unint64_t v108 = v160;
            uint64_t v109 = v161;
            unint64_t v110 = 32 * v165;
            if (v110 <= 1) {
              uint64_t v111 = 1;
            }
            else {
              uint64_t v111 = 32 * v165;
            }
            unint64_t v112 = v105 + v106;
            float64x2_t v113 = &v169[0].i8[v105 + v106];
            if (v111) {
              BOOL v114 = (unint64_t)(v111 - 1) >> 32 == 0;
            }
            else {
              BOOL v114 = 0;
            }
            char v115 = !v114;
            uint64_t v116 = v111 & 0x1FFFFFFFE0;
            float64x2_t v117 = &v169[1].i8[v112];
            float64x2_t v118 = (long long *)(v160 + 16);
            while (2)
            {
              float64x2_t v119 = (char *)(v108 + v109 * v104);
              float64x2_t v120 = &v107[256 * v104];
              if ((unint64_t)(&v113[256 * v104] - v119) < 0x20) {
                char v121 = 1;
              }
              else {
                char v121 = v115;
              }
              if (v121)
              {
                int v122 = 0;
LABEL_148:
                unsigned int v126 = v122 + 1;
                do
                {
                  char v127 = *v119++;
                  *v120++ = v127;
                }
                while (v110 > v126++);
              }
              else
              {
                uint64_t v123 = v118;
                unsigned int v124 = v117;
                uint64_t v101 = v111 & 0x1FFFFFFFE0;
                do
                {
                  long long v125 = *v123;
                  *((_OWORD *)v124 - 1) = *(v123 - 1);
                  *(_OWORD *)unsigned int v124 = v125;
                  v124 += 32;
                  v123 += 2;
                  v101 -= 32;
                }
                while (v101);
                if (v111 != v116)
                {
                  v119 += v116;
                  v120 += v116;
                  int v122 = v111 & 0xFFFFFFE0;
                  goto LABEL_148;
                }
              }
              ++v104;
              v117 += 256;
              float64x2_t v118 = (long long *)((char *)v118 + v109);
              if (v104 == v103) {
                goto LABEL_151;
              }
              continue;
            }
          }
          dispatch_sync(*(dispatch_queue_t *)(*(void *)(result + 8) + 7384), block);
LABEL_124:
          unsigned int v16 = v144;
          unsigned int v93 = v47 + 1;
          if (!v156) {
            goto LABEL_47;
          }
LABEL_152:
          memcpy(v87, v92, 0x800uLL);
LABEL_47:
          BOOL v30 = v47 == v145 >> 3;
          unsigned int v47 = v93;
          uint64_t result = v152;
          uint64_t v48 = v153;
        }
        while (!v30);
        BOOL v30 = v29++ == v135;
      }
      while (!v30);
    }
  }
  return result;
}

uint64_t AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10, uint64_t a11, char a12)
{
  uint64_t v12 = MEMORY[0x270FA5388](a1);
  unsigned int v14 = v13;
  unsigned int v16 = v15;
  unsigned int v18 = v17;
  unsigned int v20 = v19;
  uint64_t v145 = v21;
  uint64_t v146 = v22;
  uint64_t v132 = v23;
  uint64_t v24 = v12;
  uint64_t v175 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(v12, 0);
  unsigned int v149 = v14;
  unsigned int v134 = v14 + a10 - 1;
  uint64_t v150 = v24;
  if (*(void *)(v24 + 168)) {
    int v25 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v25 = 0;
  }
  unsigned int v26 = v20 - 1;
  unsigned int v27 = v18 - 1;
  unsigned int v28 = v14 >> 3;
  unsigned int v133 = v134 >> 3;
  BOOL v29 = (v25 & 0xD00) == 0 || v25 == 768;
  int v30 = v25 & 0xE00;
  int v32 = !v29 && v30 != 1024;
  int v154 = v32;
  uint64_t result = v24;
  if (*(unsigned char *)(v24 + 232))
  {
    unsigned int v34 = *(unsigned __int8 *)(v24 + 255);
    unsigned int v35 = *(unsigned __int8 *)(v24 + 254);
    char v36 = __clz(v26);
    if (1 << v34 >= v18 || v20 >> v35)
    {
      if (!(v18 >> v34) && 1 << v35 < v20)
      {
        if (v18 < 2) {
          unsigned int v39 = 0;
        }
        else {
          unsigned int v39 = __clz(~(-1 << -(char)__clz(v27))) - 32;
        }
        v35 += v34 + v39;
        unsigned int v34 = -v39;
      }
    }
    else
    {
      unsigned int v37 = 32 - __clz(~(-1 << -v36));
      unsigned int v38 = v35 + v34;
      if (v20 < 2) {
        unsigned int v37 = 0;
      }
      unsigned int v34 = v38 - v37;
      unsigned int v35 = v37;
    }
    if (v20 < 2)
    {
      if (v35) {
        goto LABEL_27;
      }
    }
    else if (32 - __clz(~(-1 << -v36)) < v35)
    {
LABEL_27:
      BOOL v144 = 0;
LABEL_32:
      unsigned int v141 = v35 - 3;
      unsigned int v138 = v34 - 3;
      int v41 = -1 << *(unsigned char *)(*(void *)(v24 + 208) + 48);
      unsigned int v131 = (((~v41 + v20) & v41) + ~(-1 << v35)) >> v35;
      goto LABEL_33;
    }
    if (v18 < 2) {
      unsigned int v40 = 0;
    }
    else {
      unsigned int v40 = 32 - __clz(~(-1 << -(char)__clz(v27)));
    }
    BOOL v144 = v40 >= v34;
    goto LABEL_32;
  }
  BOOL v144 = 0;
  unsigned int v131 = 0;
  unsigned int v138 = 0;
  unsigned int v141 = 0;
LABEL_33:
  if (v28 <= v133)
  {
    unsigned int v143 = v16 + a9 - 1;
    unsigned int v130 = v16 >> 3;
    if (v16 >> 3 <= v143 >> 3)
    {
      unsigned int v153 = v26 >> 3;
      unsigned int v129 = v27 >> 3;
      int v152 = (v26 & 7) + 1;
      int v128 = (v27 & 7) + 1;
      int v127 = ~(-1 << v138);
      uint32x2_t v42 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(v20, v18), (int32x2_t)0x700000007);
      int8x8_t v43 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v42, 3uLL))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x1000000010, v42));
      __int32 v139 = v43.i32[0] | v43.i32[1];
      int8x8_t v137 = v43;
      BOOL v135 = v43.i32[0] != 0;
      BOOL v136 = v43.i32[1] != 0;
      unsigned int v142 = v16;
      do
      {
        unsigned int v44 = (8 * v28) | 7;
        if (8 * v28 <= v149) {
          int v45 = v149;
        }
        else {
          int v45 = 8 * v28;
        }
        if (v134 < v44) {
          unsigned int v44 = v134;
        }
        int v140 = v45 - 8 * v28;
        int v148 = v44 - v45 + 1;
        unsigned int v46 = v130;
        if (v28 == v129) {
          unsigned int v47 = v128;
        }
        else {
          unsigned int v47 = 8;
        }
        int v48 = v28 & v127;
        uint64_t v147 = v132 + (v45 - v149) * a11;
        unsigned int v151 = v47;
        do
        {
          unsigned int v49 = 8 * v46;
          unsigned int v50 = 8 * (v46 + 1) - 1;
          if (8 * v46 <= v16) {
            int v51 = v16;
          }
          else {
            int v51 = 8 * v46;
          }
          if (v143 < v50) {
            unsigned int v50 = v143;
          }
          int v52 = v50 - v51 + 1;
          if (v46 == v153) {
            unsigned int v53 = v152;
          }
          else {
            unsigned int v53 = 8;
          }
          BOOL v54 = 1;
          if (8 * v28 >= v149 && v49 >= v16)
          {
            int v55 = v152;
            if (v46 != v153) {
              int v55 = 8;
            }
            BOOL v54 = v52 != v55 || v148 != v47;
          }
          if (v144)
          {
            if (v141 | v138)
            {
              int v57 = 0;
              uint64_t v58 = 0;
              BOOL v59 = v138 != 0;
              int v60 = 1;
              BOOL v62 = v141 != 0;
              unsigned int v61 = v138;
              unsigned int v63 = v141;
              do
              {
                --v63;
                if (v62) {
                  v58 |= (unint64_t)(v46 & ~(-1 << v141) & v60) << v57++;
                }
                else {
                  unsigned int v63 = 0;
                }
                --v61;
                if (v59) {
                  v58 |= (unint64_t)(v48 & v60) << v57++;
                }
                else {
                  unsigned int v61 = 0;
                }
                v60 *= 2;
                --v57;
                BOOL v59 = v61 != 0;
                BOOL v62 = v63 != 0;
              }
              while (v61 | v63);
            }
            else
            {
              uint64_t v58 = 0;
            }
            uint64_t v71 = *(void *)(result + 320) * ((v46 >> v141) + (v28 >> v138) * v131) + (v58 << 11);
          }
          else
          {
            if (v139)
            {
              int v64 = 0;
              uint64_t v65 = 0;
              int v66 = 1;
              BOOL v67 = v135;
              BOOL v68 = v136;
              __int32 v70 = v137.i32[0];
              __int32 v69 = v137.i32[1];
              do
              {
                --v69;
                if (v68) {
                  v65 |= (unint64_t)(v66 & v46) << v64++;
                }
                else {
                  __int32 v69 = 0;
                }
                --v70;
                if (v67) {
                  v65 |= (unint64_t)(v66 & v28) << v64++;
                }
                else {
                  __int32 v70 = 0;
                }
                v66 *= 2;
                --v64;
                BOOL v67 = v70 != 0;
                BOOL v68 = v69 != 0;
              }
              while (v70 | v69);
            }
            else
            {
              uint64_t v65 = 0;
            }
            uint64_t v71 = v65 << 11;
          }
          unsigned int v72 = *(_DWORD *)(result + 128) >> (*(unsigned char *)(result + 144) + a12);
          if (v72 <= 1) {
            unsigned int v72 = 1;
          }
          unsigned int v73 = v72 + 7;
          if (v73 < 0x10) {
            unsigned int v74 = 0;
          }
          else {
            unsigned int v74 = 32 - __clz(~(-1 << -(char)__clz((v73 >> 3) - 1)));
          }
          unsigned int v75 = *(_DWORD *)(result + 132) >> (*(unsigned char *)(result + 144) + a12);
          if (v75 <= 1) {
            unsigned int v75 = 1;
          }
          unsigned int v76 = v75 + 7;
          if (v76 < 0x10) {
            unsigned int v77 = 0;
          }
          else {
            unsigned int v77 = 32 - __clz(~(-1 << -(char)__clz((v76 >> 3) - 1)));
          }
          if (v77 | v74)
          {
            int v78 = 0;
            uint64_t v79 = 0;
            BOOL v80 = v74 != 0;
            BOOL v81 = v77 != 0;
            int v82 = 1;
            do
            {
              --v74;
              if (v80) {
                v79 |= (unint64_t)(v82 & v46) << v78++;
              }
              else {
                unsigned int v74 = 0;
              }
              --v77;
              if (v81) {
                v79 |= (unint64_t)(v82 & v28) << v78++;
              }
              else {
                unsigned int v77 = 0;
              }
              v82 *= 2;
              --v78;
              BOOL v81 = v77 != 0;
              BOOL v80 = v74 != 0;
            }
            while (v77 | v74);
          }
          else
          {
            uint64_t v79 = 0;
          }
          int v83 = v53 < 8 || v54;
          int v84 = (char *)(v146 + 8 * v79);
          uint64_t v85 = v147 + 32 * (v51 - v16);
          unint64_t v86 = (void *)(v145 + v71);
          if (v47 < 8) {
            int v87 = 1;
          }
          else {
            int v87 = v83;
          }
          if (v154)
          {
            if (!v87)
            {
              char v91 = __dst;
LABEL_123:
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock(v85, a11, v91, v84, v53, v47);
              goto LABEL_124;
            }
            int v88 = v86;
            float64x2_t v89 = v86;
            char v90 = v53;
            memcpy(__dst, v88, sizeof(__dst));
            unsigned int v49 = 8 * v46;
            char v91 = __dst;
            LOBYTE(v53) = v90;
            unint64_t v86 = v89;
            int v48 = v28 & v127;
            LOBYTE(v47) = v151;
            uint64_t result = v150;
          }
          else
          {
            char v91 = v86;
            if (!v87) {
              goto LABEL_123;
            }
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE19ELj4ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = result;
          int v156 = v91;
          unsigned __int8 v164 = v53;
          unsigned __int8 v165 = v47;
          unsigned int v160 = v140;
          unsigned int v161 = v51 - v49;
          float64x2_t v157 = v84;
          uint64_t v158 = v85;
          uint64_t v159 = a11;
          unsigned int v162 = v148;
          unsigned int v163 = v52;
          if (!v54)
          {
            uint64_t v93 = (uint64_t)v91
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v167, 256, (uint64_t)v91, *v84);
            uint64_t v94 = v93
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v169, 256, v93, v84[1]);
            uint64_t v95 = v94
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v168, 256, v94, v84[2]);
            uint64_t v96 = v95
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v170, 256, v95, v84[3]);
            uint64_t v97 = v96
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v171, 256, v96, v84[4]);
            uint64_t v98 = v97
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v173, 256, v97, v84[5]);
            uint64_t v99 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v172, 256, v98, v84[6]);
            AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v174, 256, v98 + v99, v84[7]);
            uint64_t v100 = v162;
            unsigned int v16 = v142;
            unsigned int v92 = v46 + 1;
            if (!v162 || !v163)
            {
LABEL_151:
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((uint64_t)v167, 256, v156, v157, v164, v165);
              if (!v154) {
                goto LABEL_47;
              }
              goto LABEL_152;
            }
            uint64_t v101 = 0;
            unint64_t v102 = (unint64_t)v160 << 8;
            uint64_t v103 = 32 * v161;
            uint64_t v104 = &v167[0].i8[v102 + v103];
            uint64_t v105 = v158;
            uint64_t v106 = v159;
            unint64_t v107 = 32 * v163;
            if (v107 <= 1) {
              uint64_t v108 = 1;
            }
            else {
              uint64_t v108 = 32 * v163;
            }
            unint64_t v109 = v102 + v103;
            unint64_t v110 = &v167[0].i8[v102 + v103];
            if (v108) {
              BOOL v111 = (unint64_t)(v108 - 1) >> 32 == 0;
            }
            else {
              BOOL v111 = 0;
            }
            char v112 = !v111;
            uint64_t v113 = v108 & 0x1FFFFFFFE0;
            BOOL v114 = &v167[1].i8[v109];
            char v115 = (long long *)(v158 + 16);
            while (2)
            {
              uint64_t v116 = (char *)(v105 + v106 * v101);
              float64x2_t v117 = &v104[256 * v101];
              if ((unint64_t)(&v110[256 * v101] - v116) < 0x20) {
                char v118 = 1;
              }
              else {
                char v118 = v112;
              }
              if (v118)
              {
                int v119 = 0;
LABEL_148:
                unsigned int v124 = v119 + 1;
                do
                {
                  char v125 = *v116++;
                  *v117++ = v125;
                }
                while (v107 > v124++);
              }
              else
              {
                float64x2_t v120 = v115;
                char v121 = v114;
                uint64_t v122 = v108 & 0x1FFFFFFFE0;
                do
                {
                  long long v123 = *v120;
                  *((_OWORD *)v121 - 1) = *(v120 - 1);
                  *(_OWORD *)char v121 = v123;
                  v121 += 32;
                  v120 += 2;
                  v122 -= 32;
                }
                while (v122);
                if (v108 != v113)
                {
                  v116 += v113;
                  v117 += v113;
                  int v119 = v108 & 0xFFFFFFE0;
                  goto LABEL_148;
                }
              }
              ++v101;
              v114 += 256;
              char v115 = (long long *)((char *)v115 + v106);
              if (v101 == v100) {
                goto LABEL_151;
              }
              continue;
            }
          }
          dispatch_sync(*(dispatch_queue_t *)(*(void *)(result + 8) + 7384), block);
LABEL_124:
          unsigned int v16 = v142;
          unsigned int v92 = v46 + 1;
          if (!v154) {
            goto LABEL_47;
          }
LABEL_152:
          memcpy(v86, v91, 0x800uLL);
LABEL_47:
          BOOL v29 = v46 == v143 >> 3;
          unsigned int v46 = v92;
          uint64_t result = v150;
          unsigned int v47 = v151;
        }
        while (!v29);
        BOOL v29 = v28++ == v133;
      }
      while (!v29);
    }
  }
  return result;
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10, uint64_t a11, int a12)
{
  uint64_t v12 = MEMORY[0x270FA5388](a1);
  unsigned int v14 = v13;
  unsigned int v16 = v15;
  unsigned int v18 = v17;
  unsigned int v20 = v19;
  uint64_t v149 = v21;
  uint64_t v150 = v22;
  uint64_t v139 = v23;
  uint64_t v24 = v12;
  uint64_t v180 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(v12, 0);
  uint64_t v25 = v24;
  unsigned int v154 = v14;
  unsigned int v26 = v14 >> 3;
  unsigned int v138 = v14 + a10 - 1;
  unsigned int v140 = v138 >> 3;
  unsigned int v27 = *(unsigned __int8 *)(*(void *)(v24 + 208) + 88);
  unsigned int v28 = *(_DWORD *)(v24 + 112);
  uint64_t v155 = v25;
  if (*(void *)(v25 + 168))
  {
    __int16 CacheMode = IOSurfaceGetCacheMode();
    uint64_t v25 = v155;
    int v30 = CacheMode & 0xF00;
  }
  else
  {
    int v30 = 0;
  }
  BOOL v31 = (v30 & 0xD00) == 0 || v30 == 768;
  int v32 = v30 & 0xE00;
  int v34 = !v31 && v32 != 1024;
  int v159 = v34;
  BOOL isLevelTiled = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::isLevelTiled(v25, *(_DWORD *)(v25 + 144) + a12);
  uint64_t v37 = v155;
  BOOL v148 = isLevelTiled;
  if (v26 <= v140)
  {
    unsigned int v147 = v16 + a9 - 1;
    unsigned int v137 = v16 >> 3;
    if (v16 >> 3 <= v147 >> 3)
    {
      unsigned int v134 = v20 - 1;
      unsigned int v136 = (v18 - 1) >> 3;
      int v157 = ((v20 - 1) & 7) + 1;
      unsigned int v158 = (v20 - 1) >> 3;
      unsigned int v135 = ((v18 - 1) & 7) + 1;
      uint32x2_t v38 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(v20, v18), (int32x2_t)0x700000007);
      int8x8_t v39 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v38, 3uLL))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x1000000010, v38));
      __int32 v145 = v39.i32[0] | v39.i32[1];
      int8x8_t v144 = v39;
      BOOL v142 = v39.i32[0] != 0;
      BOOL v143 = v39.i32[1] != 0;
      unint64_t v133 = 8 * v28 * (unint64_t)v27;
      unsigned int v146 = v16;
      do
      {
        unsigned int v40 = (8 * v26) | 7;
        if (8 * v26 <= v154) {
          int v41 = v154;
        }
        else {
          int v41 = 8 * v26;
        }
        unsigned int v42 = v137;
        if (v138 < v40) {
          unsigned int v40 = v138;
        }
        int v141 = v41 - 8 * v26;
        int v152 = v40 - v41 + 1;
        unsigned int v153 = 8 * v26;
        if (v26 == v136) {
          uint64_t v43 = v135;
        }
        else {
          uint64_t v43 = 8;
        }
        uint64_t v151 = v139 + (v41 - v154) * a11;
        unsigned int v156 = v43;
        do
        {
          unsigned int v44 = 8 * v42;
          unsigned int v45 = 8 * (v42 + 1) - 1;
          if (8 * v42 <= v16) {
            int v46 = v16;
          }
          else {
            int v46 = 8 * v42;
          }
          if (v147 < v45) {
            unsigned int v45 = v147;
          }
          int v47 = v45 - v46 + 1;
          if (v42 == v158) {
            unsigned int v48 = v157;
          }
          else {
            unsigned int v48 = 8;
          }
          BOOL v49 = 1;
          if (v153 >= v154 && v44 >= v16)
          {
            int v50 = v157;
            if (v42 != v158) {
              int v50 = 8;
            }
            BOOL v49 = v47 != v50 || v152 != v43;
          }
          if (v148)
          {
            unsigned int v71 = 0;
            uint64_t v72 = v133 >> (*(unsigned char *)(v37 + 57) != 0);
            char v73 = 1;
            if (v72 > 127)
            {
              if (v72 > 511)
              {
                if (v72 == 512)
                {
                  char v73 = 0;
                  char v74 = 0;
                  unsigned int v71 = 16;
                  unsigned int v75 = 16;
                }
                else
                {
                  char v74 = 1;
                  unsigned int v75 = 0;
                  if (v72 == 1024)
                  {
                    char v73 = 0;
                    unsigned int v75 = 8;
                    unsigned int v71 = 16;
                  }
                }
              }
              else if (v72 == 128)
              {
                char v73 = 0;
                char v74 = 0;
                unsigned int v71 = 32;
                unsigned int v75 = 32;
              }
              else
              {
                char v74 = 1;
                unsigned int v75 = 0;
                if (v72 == 256)
                {
                  char v73 = 0;
                  char v74 = 0;
                  unsigned int v75 = 16;
                  unsigned int v71 = 32;
                }
              }
            }
            else
            {
              char v74 = 1;
              unsigned int v75 = 0;
              switch(v72)
              {
                case 4:
                  char v73 = 0;
                  char v74 = 0;
                  unsigned int v75 = 128;
                  unsigned int v71 = 256;
                  break;
                case 5:
                case 6:
                case 7:
                case 9:
                case 10:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 17:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                  break;
                case 8:
                  char v73 = 0;
                  char v74 = 0;
                  unsigned int v71 = 128;
                  unsigned int v75 = 128;
                  break;
                case 16:
                  char v73 = 0;
                  char v74 = 0;
                  unsigned int v75 = 64;
                  unsigned int v71 = 128;
                  break;
                case 32:
                  char v73 = 0;
                  char v74 = 0;
                  unsigned int v71 = 64;
                  unsigned int v75 = 64;
                  break;
                default:
                  if (v72 == 64)
                  {
                    char v73 = 0;
                    char v74 = 0;
                    unsigned int v75 = 32;
                    unsigned int v71 = 64;
                  }
                  break;
              }
            }
            unsigned int v122 = (v71 >> 3) - 1;
            if (v73) {
              unsigned int v123 = 0;
            }
            else {
              unsigned int v123 = 32 - __clz(~(-1 << -(char)__clz(v122)));
            }
            unsigned int v124 = (v75 >> 3) - 1;
            if (v74)
            {
              unsigned int v125 = 0;
              if (v123) {
                goto LABEL_143;
              }
            }
            else
            {
              unsigned int v125 = 32 - __clz(~(-1 << -(char)__clz(v124)));
              if (v125 | v123)
              {
LABEL_143:
                int v126 = 0;
                uint64_t v127 = 0;
                int v128 = v42 & v122;
                int v129 = v26 & v124;
                BOOL v130 = v123 != 0;
                BOOL v131 = v125 != 0;
                int v132 = 1;
                do
                {
                  --v123;
                  if (v130) {
                    v127 |= (unint64_t)(v132 & v128) << v126++;
                  }
                  else {
                    unsigned int v123 = 0;
                  }
                  --v125;
                  if (v131) {
                    v127 |= (unint64_t)(v132 & v129) << v126++;
                  }
                  else {
                    unsigned int v125 = 0;
                  }
                  v132 *= 2;
                  --v126;
                  BOOL v131 = v125 != 0;
                  BOOL v130 = v123 != 0;
                }
                while (v125 | v123);
                goto LABEL_155;
              }
            }
            uint64_t v127 = 0;
LABEL_155:
            unint64_t v59 = ((unint64_t)(v44 / v71 + v153 / v75 * ((v71 + v134) / v71)) << 14) + (v127 << 11);
            goto LABEL_59;
          }
          if (v145)
          {
            int v52 = 0;
            uint64_t v53 = 0;
            int v54 = 1;
            BOOL v55 = v142;
            BOOL v56 = v143;
            __int32 v58 = v144.i32[0];
            __int32 v57 = v144.i32[1];
            do
            {
              --v57;
              if (v56) {
                v53 |= (unint64_t)(v54 & v42) << v52++;
              }
              else {
                __int32 v57 = 0;
              }
              --v58;
              if (v55) {
                v53 |= (unint64_t)(v54 & v26) << v52++;
              }
              else {
                __int32 v58 = 0;
              }
              v54 *= 2;
              --v52;
              BOOL v55 = v58 != 0;
              BOOL v56 = v57 != 0;
            }
            while (v58 | v57);
          }
          else
          {
            uint64_t v53 = 0;
          }
          unint64_t v59 = v53 << 11;
LABEL_59:
          unsigned int v60 = *(_DWORD *)(v37 + 128) >> (*(unsigned char *)(v37 + 144) + a12);
          if (v60 <= 1) {
            unsigned int v60 = 1;
          }
          unsigned int v61 = v60 + 7;
          if (v61 < 0x10) {
            unsigned int v62 = 0;
          }
          else {
            unsigned int v62 = 32 - __clz(~(-1 << -(char)__clz((v61 >> 3) - 1)));
          }
          unsigned int v63 = *(_DWORD *)(v37 + 132) >> (*(unsigned char *)(v37 + 144) + a12);
          if (v63 <= 1) {
            unsigned int v63 = 1;
          }
          unsigned int v64 = v63 + 7;
          if (v64 < 0x10)
          {
            unsigned int v65 = 0;
            if (!v62)
            {
LABEL_81:
              uint64_t v67 = 0;
              goto LABEL_82;
            }
          }
          else
          {
            unsigned int v65 = 32 - __clz(~(-1 << -(char)__clz((v64 >> 3) - 1)));
            if (!(v65 | v62)) {
              goto LABEL_81;
            }
          }
          int v66 = 0;
          uint64_t v67 = 0;
          BOOL v68 = v62 != 0;
          BOOL v69 = v65 != 0;
          int v70 = 1;
          do
          {
            --v62;
            if (v68) {
              v67 |= (unint64_t)(v70 & v42) << v66++;
            }
            else {
              unsigned int v62 = 0;
            }
            --v65;
            if (v69) {
              v67 |= (unint64_t)(v70 & v26) << v66++;
            }
            else {
              unsigned int v65 = 0;
            }
            v70 *= 2;
            --v66;
            BOOL v69 = v65 != 0;
            BOOL v68 = v62 != 0;
          }
          while (v65 | v62);
LABEL_82:
          int v76 = v48 < 8 || v49;
          unsigned int v77 = (unsigned __int8 *)(v150 + 8 * v67);
          unint64_t v78 = v151 + 32 * (v46 - v16);
          uint64_t v79 = (void *)(v149 + v59);
          if (v43 < 8) {
            int v80 = 1;
          }
          else {
            int v80 = v76;
          }
          if (v159)
          {
            if (!v80)
            {
              unint64_t v86 = __dst;
LABEL_95:
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock(v78, a11, (uint64_t)v86, v77, v48, v43, v49, v36);
              goto LABEL_96;
            }
            BOOL v81 = v79;
            char v82 = v48;
            int v83 = v79;
            int v84 = v47;
            BOOL v85 = v49;
            memcpy(__dst, v81, sizeof(__dst));
            LODWORD(v49) = v85;
            unsigned int v44 = 8 * v42;
            unint64_t v86 = __dst;
            int v47 = v84;
            uint64_t v79 = v83;
            LOBYTE(v48) = v82;
            LOBYTE(v43) = v156;
            uint64_t v37 = v155;
          }
          else
          {
            unint64_t v86 = v79;
            if (!v80) {
              goto LABEL_95;
            }
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE19ELj4ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = v37;
          unsigned int v161 = v86;
          unsigned __int8 v169 = v48;
          unsigned __int8 v170 = v43;
          unsigned int v165 = v141;
          unsigned int v166 = v46 - v44;
          unsigned int v162 = v77;
          unint64_t v163 = v78;
          uint64_t v164 = a11;
          unsigned int v167 = v152;
          unsigned int v168 = v47;
          if (!v49)
          {
            uint64_t v87 = (uint64_t)&v86[AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v172, 256, (uint64_t)v86, *v77)];
            uint64_t v88 = v87
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v174, 256, v87, v77[1]);
            uint64_t v89 = v88
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v173, 256, v88, v77[2]);
            uint64_t v90 = v89
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v175, 256, v89, v77[3]);
            uint64_t v91 = v90
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v176, 256, v90, v77[4]);
            uint64_t v92 = v91
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v178, 256, v91, v77[5]);
            uint64_t v93 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v177, 256, v92, v77[6]);
            AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v179, 256, v92 + v93, v77[7]);
            uint64_t v96 = v167;
            unsigned int v16 = v146;
            if (!v167 || !v168)
            {
LABEL_123:
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v172, 256, (uint64_t)v161, v162, v169, v170, v94, v95);
              if (!v159) {
                goto LABEL_27;
              }
              goto LABEL_124;
            }
            uint64_t v97 = 0;
            unint64_t v98 = (unint64_t)v165 << 8;
            uint64_t v99 = 32 * v166;
            uint64_t v100 = &v172[0].i8[v98 + v99];
            unint64_t v101 = v163;
            uint64_t v102 = v164;
            unint64_t v103 = 32 * v168;
            if (v103 <= 1) {
              uint64_t v104 = 1;
            }
            else {
              uint64_t v104 = 32 * v168;
            }
            unint64_t v105 = v98 + v99;
            uint64_t v106 = &v172[0].i8[v98 + v99];
            if (v104) {
              BOOL v107 = (unint64_t)(v104 - 1) >> 32 == 0;
            }
            else {
              BOOL v107 = 0;
            }
            char v108 = !v107;
            uint64_t v109 = v104 & 0x1FFFFFFFE0;
            unint64_t v110 = &v172[1].i8[v105];
            BOOL v111 = (long long *)(v163 + 16);
            while (2)
            {
              char v112 = (char *)(v101 + v102 * v97);
              uint64_t v113 = &v100[256 * v97];
              if ((unint64_t)(&v106[256 * v97] - v112) < 0x20) {
                char v114 = 1;
              }
              else {
                char v114 = v108;
              }
              if (v114)
              {
                int v115 = 0;
LABEL_120:
                unsigned int v119 = v115 + 1;
                do
                {
                  char v120 = *v112++;
                  *v113++ = v120;
                }
                while (v103 > v119++);
              }
              else
              {
                uint64_t v116 = v111;
                float64x2_t v117 = v110;
                uint64_t v94 = v104 & 0x1FFFFFFFE0;
                do
                {
                  long long v118 = *v116;
                  *((_OWORD *)v117 - 1) = *(v116 - 1);
                  *(_OWORD *)float64x2_t v117 = v118;
                  v117 += 32;
                  v116 += 2;
                  v94 -= 32;
                }
                while (v94);
                if (v104 != v109)
                {
                  v112 += v109;
                  v113 += v109;
                  int v115 = v104 & 0xFFFFFFE0;
                  goto LABEL_120;
                }
              }
              ++v97;
              v110 += 256;
              BOOL v111 = (long long *)((char *)v111 + v102);
              if (v97 == v96) {
                goto LABEL_123;
              }
              continue;
            }
          }
          dispatch_sync(*(dispatch_queue_t *)(*(void *)(v37 + 8) + 7384), block);
LABEL_96:
          unsigned int v16 = v146;
          if (!v159) {
            goto LABEL_27;
          }
LABEL_124:
          memcpy(v79, v86, 0x800uLL);
LABEL_27:
          BOOL v31 = v42++ == v147 >> 3;
          uint64_t v37 = v155;
          uint64_t v43 = v156;
        }
        while (!v31);
        BOOL v31 = v26++ == v140;
      }
      while (!v31);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10, uint64_t a11, int a12)
{
  uint64_t v12 = MEMORY[0x270FA5388](a1);
  unsigned int v14 = v13;
  unsigned int v16 = v15;
  unsigned int v18 = v17;
  unsigned int v20 = v19;
  uint64_t v147 = v21;
  uint64_t v148 = v22;
  uint64_t v137 = v23;
  uint64_t v24 = v12;
  uint64_t v178 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(v12, 0);
  uint64_t v25 = v24;
  unsigned int v152 = v14;
  unsigned int v26 = v14 >> 3;
  unsigned int v136 = v14 + a10 - 1;
  unsigned int v138 = v136 >> 3;
  unsigned int v27 = *(unsigned __int8 *)(*(void *)(v24 + 208) + 88);
  unsigned int v28 = *(_DWORD *)(v24 + 112);
  uint64_t v153 = v25;
  if (*(void *)(v25 + 168))
  {
    __int16 CacheMode = IOSurfaceGetCacheMode();
    uint64_t v25 = v153;
    int v30 = CacheMode & 0xF00;
  }
  else
  {
    int v30 = 0;
  }
  BOOL v31 = (v30 & 0xD00) == 0 || v30 == 768;
  int v32 = v30 & 0xE00;
  int v34 = !v31 && v32 != 1024;
  int v157 = v34;
  BOOL isLevelTiled = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::isLevelTiled(v25, *(_DWORD *)(v25 + 144) + a12);
  uint64_t v36 = v153;
  BOOL v146 = isLevelTiled;
  if (v26 <= v138)
  {
    unsigned int v145 = v16 + a9 - 1;
    unsigned int v135 = v16 >> 3;
    if (v16 >> 3 <= v145 >> 3)
    {
      unsigned int v132 = v20 - 1;
      unsigned int v134 = (v18 - 1) >> 3;
      int v155 = ((v20 - 1) & 7) + 1;
      unsigned int v156 = (v20 - 1) >> 3;
      int v133 = ((v18 - 1) & 7) + 1;
      uint32x2_t v37 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(v20, v18), (int32x2_t)0x700000007);
      int8x8_t v38 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v37, 3uLL))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x1000000010, v37));
      __int32 v143 = v38.i32[0] | v38.i32[1];
      int8x8_t v142 = v38;
      BOOL v140 = v38.i32[0] != 0;
      BOOL v141 = v38.i32[1] != 0;
      unint64_t v131 = 8 * v28 * (unint64_t)v27;
      unsigned int v144 = v16;
      do
      {
        unsigned int v39 = (8 * v26) | 7;
        if (8 * v26 <= v152) {
          int v40 = v152;
        }
        else {
          int v40 = 8 * v26;
        }
        unsigned int v41 = v135;
        if (v136 < v39) {
          unsigned int v39 = v136;
        }
        int v139 = v40 - 8 * v26;
        int v150 = v39 - v40 + 1;
        unsigned int v151 = 8 * v26;
        if (v26 == v134) {
          unsigned int v42 = v133;
        }
        else {
          unsigned int v42 = 8;
        }
        uint64_t v149 = v137 + (v40 - v152) * a11;
        unsigned int v154 = v42;
        do
        {
          unsigned int v43 = 8 * v41;
          unsigned int v44 = 8 * (v41 + 1) - 1;
          if (8 * v41 <= v16) {
            int v45 = v16;
          }
          else {
            int v45 = 8 * v41;
          }
          if (v145 < v44) {
            unsigned int v44 = v145;
          }
          int v46 = v44 - v45 + 1;
          if (v41 == v156) {
            unsigned int v47 = v155;
          }
          else {
            unsigned int v47 = 8;
          }
          BOOL v48 = 1;
          if (v151 >= v152 && v43 >= v16)
          {
            int v49 = v155;
            if (v41 != v156) {
              int v49 = 8;
            }
            BOOL v48 = v46 != v49 || v150 != v42;
          }
          if (v146)
          {
            unsigned int v70 = 0;
            uint64_t v71 = v131 >> (*(unsigned char *)(v36 + 57) != 0);
            char v72 = 1;
            if (v71 > 127)
            {
              if (v71 > 511)
              {
                if (v71 == 512)
                {
                  char v72 = 0;
                  char v73 = 0;
                  unsigned int v70 = 16;
                  unsigned int v74 = 16;
                }
                else
                {
                  char v73 = 1;
                  unsigned int v74 = 0;
                  if (v71 == 1024)
                  {
                    char v72 = 0;
                    unsigned int v74 = 8;
                    unsigned int v70 = 16;
                  }
                }
              }
              else if (v71 == 128)
              {
                char v72 = 0;
                char v73 = 0;
                unsigned int v70 = 32;
                unsigned int v74 = 32;
              }
              else
              {
                char v73 = 1;
                unsigned int v74 = 0;
                if (v71 == 256)
                {
                  char v72 = 0;
                  char v73 = 0;
                  unsigned int v74 = 16;
                  unsigned int v70 = 32;
                }
              }
            }
            else
            {
              char v73 = 1;
              unsigned int v74 = 0;
              switch(v71)
              {
                case 4:
                  char v72 = 0;
                  char v73 = 0;
                  unsigned int v74 = 128;
                  unsigned int v70 = 256;
                  break;
                case 5:
                case 6:
                case 7:
                case 9:
                case 10:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 17:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                  break;
                case 8:
                  char v72 = 0;
                  char v73 = 0;
                  unsigned int v70 = 128;
                  unsigned int v74 = 128;
                  break;
                case 16:
                  char v72 = 0;
                  char v73 = 0;
                  unsigned int v74 = 64;
                  unsigned int v70 = 128;
                  break;
                case 32:
                  char v72 = 0;
                  char v73 = 0;
                  unsigned int v70 = 64;
                  unsigned int v74 = 64;
                  break;
                default:
                  if (v71 == 64)
                  {
                    char v72 = 0;
                    char v73 = 0;
                    unsigned int v74 = 32;
                    unsigned int v70 = 64;
                  }
                  break;
              }
            }
            unsigned int v120 = (v70 >> 3) - 1;
            if (v72) {
              unsigned int v121 = 0;
            }
            else {
              unsigned int v121 = 32 - __clz(~(-1 << -(char)__clz(v120)));
            }
            unsigned int v122 = (v74 >> 3) - 1;
            if (v73)
            {
              unsigned int v123 = 0;
              if (v121) {
                goto LABEL_143;
              }
            }
            else
            {
              unsigned int v123 = 32 - __clz(~(-1 << -(char)__clz(v122)));
              if (v123 | v121)
              {
LABEL_143:
                int v124 = 0;
                uint64_t v125 = 0;
                int v126 = v41 & v120;
                int v127 = v26 & v122;
                BOOL v128 = v121 != 0;
                BOOL v129 = v123 != 0;
                int v130 = 1;
                do
                {
                  --v121;
                  if (v128) {
                    v125 |= (unint64_t)(v130 & v126) << v124++;
                  }
                  else {
                    unsigned int v121 = 0;
                  }
                  --v123;
                  if (v129) {
                    v125 |= (unint64_t)(v130 & v127) << v124++;
                  }
                  else {
                    unsigned int v123 = 0;
                  }
                  v130 *= 2;
                  --v124;
                  BOOL v129 = v123 != 0;
                  BOOL v128 = v121 != 0;
                }
                while (v123 | v121);
                goto LABEL_155;
              }
            }
            uint64_t v125 = 0;
LABEL_155:
            unint64_t v58 = ((unint64_t)(v43 / v70 + v151 / v74 * ((v70 + v132) / v70)) << 14) + (v125 << 11);
            goto LABEL_59;
          }
          if (v143)
          {
            int v51 = 0;
            uint64_t v52 = 0;
            int v53 = 1;
            BOOL v54 = v140;
            BOOL v55 = v141;
            __int32 v57 = v142.i32[0];
            __int32 v56 = v142.i32[1];
            do
            {
              --v56;
              if (v55) {
                v52 |= (unint64_t)(v53 & v41) << v51++;
              }
              else {
                __int32 v56 = 0;
              }
              --v57;
              if (v54) {
                v52 |= (unint64_t)(v53 & v26) << v51++;
              }
              else {
                __int32 v57 = 0;
              }
              v53 *= 2;
              --v51;
              BOOL v54 = v57 != 0;
              BOOL v55 = v56 != 0;
            }
            while (v57 | v56);
          }
          else
          {
            uint64_t v52 = 0;
          }
          unint64_t v58 = v52 << 11;
LABEL_59:
          unsigned int v59 = *(_DWORD *)(v36 + 128) >> (*(unsigned char *)(v36 + 144) + a12);
          if (v59 <= 1) {
            unsigned int v59 = 1;
          }
          unsigned int v60 = v59 + 7;
          if (v60 < 0x10) {
            unsigned int v61 = 0;
          }
          else {
            unsigned int v61 = 32 - __clz(~(-1 << -(char)__clz((v60 >> 3) - 1)));
          }
          unsigned int v62 = *(_DWORD *)(v36 + 132) >> (*(unsigned char *)(v36 + 144) + a12);
          if (v62 <= 1) {
            unsigned int v62 = 1;
          }
          unsigned int v63 = v62 + 7;
          if (v63 < 0x10)
          {
            unsigned int v64 = 0;
            if (!v61)
            {
LABEL_81:
              uint64_t v66 = 0;
              goto LABEL_82;
            }
          }
          else
          {
            unsigned int v64 = 32 - __clz(~(-1 << -(char)__clz((v63 >> 3) - 1)));
            if (!(v64 | v61)) {
              goto LABEL_81;
            }
          }
          int v65 = 0;
          uint64_t v66 = 0;
          BOOL v67 = v61 != 0;
          BOOL v68 = v64 != 0;
          int v69 = 1;
          do
          {
            --v61;
            if (v67) {
              v66 |= (unint64_t)(v69 & v41) << v65++;
            }
            else {
              unsigned int v61 = 0;
            }
            --v64;
            if (v68) {
              v66 |= (unint64_t)(v69 & v26) << v65++;
            }
            else {
              unsigned int v64 = 0;
            }
            v69 *= 2;
            --v65;
            BOOL v68 = v64 != 0;
            BOOL v67 = v61 != 0;
          }
          while (v64 | v61);
LABEL_82:
          int v75 = v47 < 8 || v48;
          int v76 = (char *)(v148 + 8 * v66);
          uint64_t v77 = v149 + 32 * (v45 - v16);
          unint64_t v78 = (void *)(v147 + v58);
          if (v42 < 8) {
            int v79 = 1;
          }
          else {
            int v79 = v75;
          }
          if (v157)
          {
            if (!v79)
            {
              BOOL v85 = __dst;
LABEL_95:
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock(v77, a11, v85, v76, v47, v42);
              goto LABEL_96;
            }
            int v80 = v78;
            char v81 = v47;
            char v82 = v78;
            int v83 = v46;
            BOOL v84 = v48;
            memcpy(__dst, v80, sizeof(__dst));
            BOOL v48 = v84;
            unsigned int v43 = 8 * v41;
            BOOL v85 = __dst;
            int v46 = v83;
            unint64_t v78 = v82;
            LOBYTE(v47) = v81;
            LOBYTE(v42) = v154;
            uint64_t v36 = v153;
          }
          else
          {
            BOOL v85 = v78;
            if (!v79) {
              goto LABEL_95;
            }
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE19ELj4ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = v36;
          int v159 = v85;
          unsigned __int8 v167 = v47;
          unsigned __int8 v168 = v42;
          unsigned int v163 = v139;
          unsigned int v164 = v45 - v43;
          unsigned int v160 = v76;
          uint64_t v161 = v77;
          uint64_t v162 = a11;
          unsigned int v165 = v150;
          unsigned int v166 = v46;
          if (!v48)
          {
            uint64_t v86 = (uint64_t)v85
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v170, 256, (uint64_t)v85, *v76);
            uint64_t v87 = v86
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v172, 256, v86, v76[1]);
            uint64_t v88 = v87
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v171, 256, v87, v76[2]);
            uint64_t v89 = v88
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v173, 256, v88, v76[3]);
            uint64_t v90 = v89
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v174, 256, v89, v76[4]);
            uint64_t v91 = v90
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v176, 256, v90, v76[5]);
            uint64_t v92 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v175, 256, v91, v76[6]);
            AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v177, 256, v91 + v92, v76[7]);
            uint64_t v93 = v165;
            unsigned int v16 = v144;
            if (!v165 || !v166)
            {
LABEL_123:
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((uint64_t)v170, 256, v159, v160, v167, v168);
              if (!v157) {
                goto LABEL_27;
              }
              goto LABEL_124;
            }
            uint64_t v94 = 0;
            unint64_t v95 = (unint64_t)v163 << 8;
            uint64_t v96 = 32 * v164;
            uint64_t v97 = &v170[0].i8[v95 + v96];
            uint64_t v98 = v161;
            uint64_t v99 = v162;
            unint64_t v100 = 32 * v166;
            if (v100 <= 1) {
              uint64_t v101 = 1;
            }
            else {
              uint64_t v101 = 32 * v166;
            }
            unint64_t v102 = v95 + v96;
            unint64_t v103 = &v170[0].i8[v95 + v96];
            if (v101) {
              BOOL v104 = (unint64_t)(v101 - 1) >> 32 == 0;
            }
            else {
              BOOL v104 = 0;
            }
            char v105 = !v104;
            uint64_t v106 = v101 & 0x1FFFFFFFE0;
            BOOL v107 = &v170[1].i8[v102];
            char v108 = (long long *)(v161 + 16);
            while (2)
            {
              uint64_t v109 = (char *)(v98 + v99 * v94);
              unint64_t v110 = &v97[256 * v94];
              if ((unint64_t)(&v103[256 * v94] - v109) < 0x20) {
                char v111 = 1;
              }
              else {
                char v111 = v105;
              }
              if (v111)
              {
                int v112 = 0;
LABEL_120:
                unsigned int v117 = v112 + 1;
                do
                {
                  char v118 = *v109++;
                  *v110++ = v118;
                }
                while (v100 > v117++);
              }
              else
              {
                uint64_t v113 = v108;
                char v114 = v107;
                uint64_t v115 = v101 & 0x1FFFFFFFE0;
                do
                {
                  long long v116 = *v113;
                  *((_OWORD *)v114 - 1) = *(v113 - 1);
                  *(_OWORD *)char v114 = v116;
                  v114 += 32;
                  v113 += 2;
                  v115 -= 32;
                }
                while (v115);
                if (v101 != v106)
                {
                  v109 += v106;
                  v110 += v106;
                  int v112 = v101 & 0xFFFFFFE0;
                  goto LABEL_120;
                }
              }
              ++v94;
              v107 += 256;
              char v108 = (long long *)((char *)v108 + v99);
              if (v94 == v93) {
                goto LABEL_123;
              }
              continue;
            }
          }
          dispatch_sync(*(dispatch_queue_t *)(*(void *)(v36 + 8) + 7384), block);
LABEL_96:
          unsigned int v16 = v144;
          if (!v157) {
            goto LABEL_27;
          }
LABEL_124:
          memcpy(v78, v85, 0x800uLL);
LABEL_27:
          BOOL v31 = v41++ == v145 >> 3;
          uint64_t v36 = v153;
          unsigned int v42 = v154;
        }
        while (!v31);
        BOOL v31 = v26++ == v138;
      }
      while (!v31);
    }
  }
}

uint64_t AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, char a12)
{
  uint64_t v175 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v148 = a8;
  unsigned int v133 = a8 + a10 - 1;
  uint64_t v149 = a1;
  if (*(void *)(a1 + 168)) {
    int v17 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v17 = 0;
  }
  unsigned int v18 = a5 - 1;
  unsigned int v19 = a6 - 1;
  unsigned int v20 = a8 >> 3;
  unsigned int v132 = v133 >> 3;
  BOOL v21 = (v17 & 0xD00) == 0 || v17 == 768;
  int v22 = v17 & 0xE00;
  int v24 = !v21 && v22 != 1024;
  int v154 = v24;
  uint64_t result = a1;
  if (*(unsigned char *)(a1 + 232))
  {
    unsigned int v26 = *(unsigned __int8 *)(a1 + 255);
    unsigned int v27 = *(unsigned __int8 *)(a1 + 254);
    char v28 = __clz(v18);
    if (1 << v26 >= a6 || a5 >> v27)
    {
      if (!(a6 >> v26) && 1 << v27 < a5)
      {
        if (a6 < 2) {
          unsigned int v31 = 0;
        }
        else {
          unsigned int v31 = __clz(~(-1 << -(char)__clz(v19))) - 32;
        }
        v27 += v26 + v31;
        unsigned int v26 = -v31;
      }
    }
    else
    {
      unsigned int v29 = 32 - __clz(~(-1 << -v28));
      unsigned int v30 = v27 + v26;
      if (a5 < 2) {
        unsigned int v29 = 0;
      }
      unsigned int v26 = v30 - v29;
      unsigned int v27 = v29;
    }
    if (a5 < 2)
    {
      if (v27) {
        goto LABEL_27;
      }
    }
    else if (32 - __clz(~(-1 << -v28)) < v27)
    {
LABEL_27:
      BOOL v143 = 0;
LABEL_32:
      unsigned int v140 = v27 - 3;
      unsigned int v137 = v26 - 3;
      int v33 = -1 << *(unsigned char *)(*(void *)(a1 + 208) + 48);
      unsigned int v130 = (((~v33 + a5) & v33) + ~(-1 << v27)) >> v27;
      goto LABEL_33;
    }
    if (a6 < 2) {
      unsigned int v32 = 0;
    }
    else {
      unsigned int v32 = 32 - __clz(~(-1 << -(char)__clz(v19)));
    }
    BOOL v143 = v32 >= v26;
    goto LABEL_32;
  }
  BOOL v143 = 0;
  unsigned int v130 = 0;
  unsigned int v137 = 0;
  unsigned int v140 = 0;
LABEL_33:
  if (v20 <= v132)
  {
    unsigned int v142 = a7 + a9 - 1;
    unsigned int v129 = a7 >> 3;
    if (a7 >> 3 <= v142 >> 3)
    {
      unsigned int v152 = v18 >> 3;
      unsigned int v128 = v19 >> 3;
      int v151 = (v18 & 7) + 1;
      int v127 = (v19 & 7) + 1;
      uint32x2_t v34 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0x700000007);
      int8x8_t v35 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v34, 3uLL))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x1000000010, v34));
      __int32 v138 = v35.i32[0] | v35.i32[1];
      int8x8_t v136 = v35;
      BOOL v134 = v35.i32[0] != 0;
      BOOL v135 = v35.i32[1] != 0;
      unsigned int v141 = a7;
      do
      {
        unsigned int v36 = (8 * v20) | 7;
        if (8 * v20 <= v148) {
          int v37 = v148;
        }
        else {
          int v37 = 8 * v20;
        }
        if (v133 < v36) {
          unsigned int v36 = v133;
        }
        int v139 = v37 - 8 * v20;
        int v147 = v36 - v37 + 1;
        unsigned int v38 = v129;
        if (v20 == v128) {
          unsigned int v39 = v127;
        }
        else {
          unsigned int v39 = 8;
        }
        uint64_t v146 = a3 + (v37 - v148) * a11;
        unsigned int v150 = v39;
        do
        {
          unsigned int v40 = 8 * v38;
          unsigned int v41 = 8 * (v38 + 1) - 1;
          if (8 * v38 <= a7) {
            int v42 = a7;
          }
          else {
            int v42 = 8 * v38;
          }
          if (v142 < v41) {
            unsigned int v41 = v142;
          }
          int v43 = v41 - v42 + 1;
          if (v38 == v152) {
            unsigned int v44 = v151;
          }
          else {
            unsigned int v44 = 8;
          }
          BOOL v45 = 1;
          if (8 * v20 >= v148 && v40 >= a7)
          {
            int v46 = v151;
            if (v38 != v152) {
              int v46 = 8;
            }
            BOOL v45 = v43 != v46 || v147 != v39;
          }
          if (v143)
          {
            if (v140 | v137)
            {
              int v48 = 0;
              uint64_t v49 = 0;
              BOOL v50 = v137 != 0;
              int v51 = 1;
              BOOL v53 = v140 != 0;
              unsigned int v52 = v137;
              unsigned int v54 = v140;
              do
              {
                --v54;
                if (v53) {
                  v49 |= (unint64_t)(v38 & ~(-1 << v140) & v51) << v48++;
                }
                else {
                  unsigned int v54 = 0;
                }
                --v52;
                if (v50) {
                  v49 |= (unint64_t)(v20 & ~(-1 << v137) & v51) << v48++;
                }
                else {
                  unsigned int v52 = 0;
                }
                v51 *= 2;
                --v48;
                BOOL v50 = v52 != 0;
                BOOL v53 = v54 != 0;
              }
              while (v52 | v54);
            }
            else
            {
              uint64_t v49 = 0;
            }
            uint64_t v62 = *(void *)(result + 320) * ((v38 >> v140) + (v20 >> v137) * v130) + (v49 << 9);
          }
          else
          {
            if (v138)
            {
              int v55 = 0;
              uint64_t v56 = 0;
              int v57 = 1;
              BOOL v58 = v134;
              BOOL v59 = v135;
              __int32 v61 = v136.i32[0];
              __int32 v60 = v136.i32[1];
              do
              {
                --v60;
                if (v59) {
                  v56 |= (unint64_t)(v57 & v38) << v55++;
                }
                else {
                  __int32 v60 = 0;
                }
                --v61;
                if (v58) {
                  v56 |= (unint64_t)(v57 & v20) << v55++;
                }
                else {
                  __int32 v61 = 0;
                }
                v57 *= 2;
                --v55;
                BOOL v58 = v61 != 0;
                BOOL v59 = v60 != 0;
              }
              while (v61 | v60);
            }
            else
            {
              uint64_t v56 = 0;
            }
            uint64_t v62 = v56 << 9;
          }
          unsigned int v63 = *(_DWORD *)(result + 128) >> (*(unsigned char *)(result + 144) + a12);
          if (v63 <= 1) {
            unsigned int v63 = 1;
          }
          unsigned int v64 = v63 + 7;
          if (v64 < 0x10) {
            unsigned int v65 = 0;
          }
          else {
            unsigned int v65 = 32 - __clz(~(-1 << -(char)__clz((v64 >> 3) - 1)));
          }
          unsigned int v66 = *(_DWORD *)(result + 132) >> (*(unsigned char *)(result + 144) + a12);
          if (v66 <= 1) {
            unsigned int v66 = 1;
          }
          unsigned int v67 = v66 + 7;
          if (v67 < 0x10) {
            unsigned int v68 = 0;
          }
          else {
            unsigned int v68 = 32 - __clz(~(-1 << -(char)__clz((v67 >> 3) - 1)));
          }
          if (v68 | v65)
          {
            int v69 = 0;
            uint64_t v70 = 0;
            BOOL v71 = v65 != 0;
            BOOL v72 = v68 != 0;
            int v73 = 1;
            do
            {
              --v65;
              if (v71) {
                v70 |= (unint64_t)(v73 & v38) << v69++;
              }
              else {
                unsigned int v65 = 0;
              }
              --v68;
              if (v72) {
                v70 |= (unint64_t)(v73 & v20) << v69++;
              }
              else {
                unsigned int v68 = 0;
              }
              v73 *= 2;
              --v69;
              BOOL v72 = v68 != 0;
              BOOL v71 = v65 != 0;
            }
            while (v68 | v65);
          }
          else
          {
            uint64_t v70 = 0;
          }
          int v75 = v44 < 8 || v45;
          int v76 = (unsigned __int8 *)(a4 + 8 * v70);
          unsigned int v74 = v42 - a7;
          uint64_t v77 = v146 + 8 * (v42 - a7);
          unint64_t v78 = (unsigned char *)(a2 + v62);
          if (v39 < 8) {
            int v79 = 1;
          }
          else {
            int v79 = v75;
          }
          __src = v78;
          if (v154)
          {
            if (!v79)
            {
              unint64_t v78 = __dst;
LABEL_123:
              char v81 = (int16x8_t *)(v146 + 8 * v74);
              uint64_t v82 = a11;
              unint64_t v83 = (unint64_t)v78;
              BOOL v84 = (char *)(a4 + 8 * v70);
              goto LABEL_157;
            }
            char v80 = v44;
            memcpy(__dst, __src, sizeof(__dst));
            LOBYTE(v44) = v80;
            unint64_t v78 = __dst;
            LOBYTE(v39) = v150;
            uint64_t result = v149;
          }
          else if (!v79)
          {
            goto LABEL_123;
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE10ELj4ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = result;
          unsigned int v156 = v78;
          unsigned __int8 v164 = v44;
          unsigned __int8 v165 = v39;
          unsigned int v160 = v139;
          unsigned int v161 = v42 - v40;
          int v157 = v76;
          uint64_t v158 = v77;
          uint64_t v159 = a11;
          unsigned int v162 = v147;
          unsigned int v163 = v43;
          if (v45)
          {
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(result + 8) + 7384), block);
            goto LABEL_158;
          }
          uint64_t v85 = (uint64_t)&v78[AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v167, 64, (uint64_t)v78, *v76)];
          uint64_t v86 = v85
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v169, 64, v85, v76[1]);
          uint64_t v87 = v86
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v168, 64, v86, v76[2]);
          uint64_t v88 = v87
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v170, 64, v87, v76[3]);
          uint64_t v89 = v88
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v171, 64, v88, v76[4]);
          uint64_t v90 = v89
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v173, 64, v89, v76[5]);
          uint64_t v91 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v172, 64, v90, v76[6]);
          AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v174, 64, v90 + v91, v76[7]);
          uint64_t v92 = v162;
          if (v162 && v163)
          {
            uint64_t v93 = 0;
            unint64_t v94 = (unint64_t)v160 << 6;
            uint64_t v95 = 8 * v161;
            uint64_t v96 = &v167[0].i8[v94 + v95];
            uint64_t v97 = v158;
            uint64_t v98 = v159;
            unint64_t v99 = 8 * v163;
            if (v99 <= 1) {
              unint64_t v100 = 1;
            }
            else {
              unint64_t v100 = 8 * v163;
            }
            unint64_t v101 = v94 + v95;
            unint64_t v102 = &v167[0].i8[v94 + v95];
            if (v100) {
              BOOL v103 = (v100 - 1) >> 32 == 0;
            }
            else {
              BOOL v103 = 0;
            }
            char v104 = !v103;
            uint64_t v105 = v100 & 0x7FFFFFFE0;
            uint64_t v106 = v100 & 0x7FFFFFFF8;
            BOOL v107 = &v167[1].i8[v101];
            char v108 = (long long *)(v158 + 16);
            uint64_t v109 = v96;
            uint64_t v110 = v158;
            do
            {
              char v111 = (char *)(v97 + v98 * v93);
              int v112 = &v96[64 * v93];
              if ((unint64_t)(&v102[64 * v93] - v111) < 0x20) {
                char v113 = 1;
              }
              else {
                char v113 = v104;
              }
              if (v113)
              {
                int v114 = 0;
                goto LABEL_153;
              }
              if (v100 >= 0x20)
              {
                long long v116 = v108;
                unsigned int v117 = v107;
                uint64_t v118 = v100 & 0x7FFFFFFE0;
                do
                {
                  long long v119 = *v116;
                  *((_OWORD *)v117 - 1) = *(v116 - 1);
                  *(_OWORD *)unsigned int v117 = v119;
                  v117 += 32;
                  v116 += 2;
                  v118 -= 32;
                }
                while (v118);
                if (v100 == v105) {
                  goto LABEL_136;
                }
                uint64_t v115 = v100 & 0x7FFFFFFE0;
                if ((v100 & 0x18) == 0)
                {
                  v111 += v105;
                  v112 += v105;
                  int v114 = v100 & 0xFFFFFFE0;
                  goto LABEL_153;
                }
              }
              else
              {
                uint64_t v115 = 0;
              }
              v112 += v106;
              unint64_t v120 = v115 - (v100 & 0x7FFFFFFF8);
              unsigned int v121 = (uint64_t *)(v110 + v115);
              unsigned int v122 = &v109[v115];
              do
              {
                uint64_t v123 = *v121++;
                *(void *)unsigned int v122 = v123;
                v122 += 8;
                v120 += 8;
              }
              while (v120);
              if (v100 == v106) {
                goto LABEL_136;
              }
              v111 += v106;
              int v114 = v100 & 0xFFFFFFF8;
LABEL_153:
              unsigned int v124 = v114 + 1;
              do
              {
                char v125 = *v111++;
                *v112++ = v125;
              }
              while (v99 > v124++);
LABEL_136:
              ++v93;
              v107 += 64;
              char v108 = (long long *)((char *)v108 + v98);
              v110 += v98;
              v109 += 64;
            }
            while (v93 != v92);
          }
          unint64_t v83 = (unint64_t)v156;
          BOOL v84 = (char *)v157;
          unsigned int v44 = v164;
          unsigned int v39 = v165;
          char v81 = v167;
          uint64_t v82 = 64;
LABEL_157:
          AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v81, v82, v83, v84, v44, v39);
LABEL_158:
          a7 = v141;
          if (v154) {
            memcpy(__src, v78, 0x200uLL);
          }
          BOOL v21 = v38++ == v142 >> 3;
          uint64_t result = v149;
          unsigned int v39 = v150;
        }
        while (!v21);
        BOOL v21 = v20++ == v132;
      }
      while (!v21);
    }
  }
  return result;
}

uint64_t AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, char a12)
{
  uint64_t v210 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v185 = a8;
  unsigned int v167 = a8 + a10 - 1;
  uint64_t v186 = a1;
  if (*(void *)(a1 + 168)) {
    int v17 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v17 = 0;
  }
  unsigned int v18 = a5 - 1;
  unsigned int v19 = a6 - 1;
  unsigned int v20 = a8 >> 3;
  unsigned int v166 = v167 >> 3;
  BOOL v21 = (v17 & 0xD00) == 0 || v17 == 768;
  int v22 = v17 & 0xE00;
  int v24 = !v21 && v22 != 1024;
  int v189 = v24;
  uint64_t result = a1;
  if (*(unsigned char *)(a1 + 232))
  {
    unsigned int v26 = *(unsigned __int8 *)(a1 + 255);
    unsigned int v27 = *(unsigned __int8 *)(a1 + 254);
    char v28 = __clz(v18);
    if (1 << v26 >= a6 || a5 >> v27)
    {
      if (!(a6 >> v26) && 1 << v27 < a5)
      {
        if (a6 < 2) {
          unsigned int v31 = 0;
        }
        else {
          unsigned int v31 = __clz(~(-1 << -(char)__clz(v19))) - 32;
        }
        v27 += v26 + v31;
        unsigned int v26 = -v31;
      }
    }
    else
    {
      unsigned int v29 = 32 - __clz(~(-1 << -v28));
      unsigned int v30 = v27 + v26;
      if (a5 < 2) {
        unsigned int v29 = 0;
      }
      unsigned int v26 = v30 - v29;
      unsigned int v27 = v29;
    }
    if (a5 < 2)
    {
      if (v27) {
        goto LABEL_27;
      }
    }
    else if (32 - __clz(~(-1 << -v28)) < v27)
    {
LABEL_27:
      BOOL v180 = 0;
LABEL_32:
      unsigned int v176 = v27 - 3;
      unsigned int v171 = v26 - 3;
      int v33 = -1 << *(unsigned char *)(*(void *)(a1 + 208) + 48);
      unsigned int v164 = (((~v33 + a5) & v33) + ~(-1 << v27)) >> v27;
      goto LABEL_33;
    }
    if (a6 < 2) {
      unsigned int v32 = 0;
    }
    else {
      unsigned int v32 = 32 - __clz(~(-1 << -(char)__clz(v19)));
    }
    BOOL v180 = v32 >= v26;
    goto LABEL_32;
  }
  BOOL v180 = 0;
  unsigned int v164 = 0;
  unsigned int v171 = 0;
  unsigned int v176 = 0;
LABEL_33:
  if (v20 <= v166)
  {
    unsigned int v179 = a7 + a9 - 1;
    unsigned int v163 = a7 >> 3;
    if (a7 >> 3 <= v179 >> 3)
    {
      unsigned int v188 = v18 >> 3;
      unsigned int v162 = v19 >> 3;
      int v187 = (v18 & 7) + 1;
      int v161 = (v19 & 7) + 1;
      int v160 = ~(-1 << v171);
      uint32x2_t v34 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0x700000007);
      int8x8_t v35 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v34, 3uLL))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x1000000010, v34));
      __int32 v174 = v35.i32[0] | v35.i32[1];
      int8x8_t v170 = v35;
      BOOL v169 = v35.i32[1] != 0;
      uint64_t v36 = a11;
      BOOL v168 = v35.i32[0] != 0;
      uint64_t v37 = 2 * a11;
      unsigned int v178 = a7;
      do
      {
        unsigned int v38 = (8 * v20) | 7;
        if (8 * v20 <= v185) {
          int v39 = v185;
        }
        else {
          int v39 = 8 * v20;
        }
        if (v167 < v38) {
          unsigned int v38 = v167;
        }
        int v175 = v39 - 8 * v20;
        int v184 = v38 - v39 + 1;
        unsigned int v40 = v163;
        if (v20 == v162) {
          unsigned int v41 = v161;
        }
        else {
          unsigned int v41 = 8;
        }
        int v42 = v20 & v160;
        uint64_t v183 = a3 + (v39 - v185) * v36;
        do
        {
          unsigned int v43 = 8 * v40;
          unsigned int v44 = 8 * (v40 + 1) - 1;
          if (8 * v40 <= a7) {
            int v45 = a7;
          }
          else {
            int v45 = 8 * v40;
          }
          if (v179 < v44) {
            unsigned int v44 = v179;
          }
          int v46 = v44 - v45 + 1;
          if (v40 == v188) {
            unsigned int v47 = v187;
          }
          else {
            unsigned int v47 = 8;
          }
          BOOL v48 = 1;
          if (8 * v20 >= v185 && v43 >= a7)
          {
            int v49 = v187;
            if (v40 != v188) {
              int v49 = 8;
            }
            BOOL v48 = v46 != v49 || v184 != v41;
          }
          if (v180)
          {
            if (v176 | v171)
            {
              int v51 = 0;
              uint64_t v52 = 0;
              BOOL v53 = v171 != 0;
              int v54 = 1;
              BOOL v56 = v176 != 0;
              unsigned int v55 = v171;
              unsigned int v57 = v176;
              do
              {
                --v57;
                if (v56) {
                  v52 |= (unint64_t)(v40 & ~(-1 << v176) & v54) << v51++;
                }
                else {
                  unsigned int v57 = 0;
                }
                --v55;
                if (v53) {
                  v52 |= (unint64_t)(v42 & v54) << v51++;
                }
                else {
                  unsigned int v55 = 0;
                }
                v54 *= 2;
                --v51;
                BOOL v53 = v55 != 0;
                BOOL v56 = v57 != 0;
              }
              while (v55 | v57);
            }
            else
            {
              uint64_t v52 = 0;
            }
            uint64_t v65 = *(void *)(result + 320) * ((v40 >> v176) + (v20 >> v171) * v164) + (v52 << 9);
          }
          else
          {
            if (v174)
            {
              int v58 = 0;
              uint64_t v59 = 0;
              int v60 = 1;
              BOOL v61 = v168;
              BOOL v62 = v169;
              __int32 v64 = v170.i32[0];
              __int32 v63 = v170.i32[1];
              do
              {
                --v63;
                if (v62) {
                  v59 |= (unint64_t)(v60 & v40) << v58++;
                }
                else {
                  __int32 v63 = 0;
                }
                --v64;
                if (v61) {
                  v59 |= (unint64_t)(v60 & v20) << v58++;
                }
                else {
                  __int32 v64 = 0;
                }
                v60 *= 2;
                --v58;
                BOOL v61 = v64 != 0;
                BOOL v62 = v63 != 0;
              }
              while (v64 | v63);
            }
            else
            {
              uint64_t v59 = 0;
            }
            uint64_t v65 = v59 << 9;
          }
          unsigned int v66 = *(_DWORD *)(result + 128) >> (*(unsigned char *)(result + 144) + a12);
          if (v66 <= 1) {
            unsigned int v66 = 1;
          }
          unsigned int v67 = v66 + 7;
          if (v67 < 0x10) {
            unsigned int v68 = 0;
          }
          else {
            unsigned int v68 = 32 - __clz(~(-1 << -(char)__clz((v67 >> 3) - 1)));
          }
          unsigned int v69 = *(_DWORD *)(result + 132) >> (*(unsigned char *)(result + 144) + a12);
          if (v69 <= 1) {
            unsigned int v69 = 1;
          }
          unsigned int v70 = v69 + 7;
          if (v70 < 0x10)
          {
            unsigned int v71 = 0;
            if (!v68)
            {
LABEL_111:
              uint64_t v73 = 0;
              goto LABEL_112;
            }
          }
          else
          {
            unsigned int v71 = 32 - __clz(~(-1 << -(char)__clz((v70 >> 3) - 1)));
            if (!(v71 | v68)) {
              goto LABEL_111;
            }
          }
          int v72 = 0;
          uint64_t v73 = 0;
          BOOL v74 = v68 != 0;
          BOOL v75 = v71 != 0;
          int v76 = 1;
          do
          {
            --v68;
            if (v74) {
              v73 |= (unint64_t)(v76 & v40) << v72++;
            }
            else {
              unsigned int v68 = 0;
            }
            --v71;
            if (v75) {
              v73 |= (unint64_t)(v76 & v20) << v72++;
            }
            else {
              unsigned int v71 = 0;
            }
            v76 *= 2;
            --v72;
            BOOL v75 = v71 != 0;
            BOOL v74 = v68 != 0;
          }
          while (v71 | v68);
LABEL_112:
          unsigned int v77 = v45 - a7;
          int v78 = v47 < 8 || v48;
          int v79 = (unsigned __int8 *)(a4 + 8 * v73);
          uint64_t v80 = v183 + 8 * v77;
          char v81 = (void *)(a2 + v65);
          if (v41 < 8) {
            int v82 = 1;
          }
          else {
            int v82 = v78;
          }
          if (v189)
          {
            if (!v82)
            {
              uint64_t v86 = __dst;
LABEL_125:
              uint64_t v88 = 0;
              uint64_t v89 = v86;
              do
              {
                uint64_t v97 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,4u>::kSubblockPositions[v88 + 1];
                uint64_t v98 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,4u>::kSubblockPositions[v88];
                unsigned int v99 = (v47 - 4 * v98) & ~((int)(v47 - 4 * v98) >> 31);
                if (v99 >= 4) {
                  unsigned int v99 = 4;
                }
                unsigned int v100 = (v41 - 2 * v97) & ~((int)(v41 - 2 * v97) >> 31);
                if (v100 >= 2) {
                  unsigned int v100 = 2;
                }
                if (v99) {
                  BOOL v101 = v100 == 0;
                }
                else {
                  BOOL v101 = 1;
                }
                if (v101)
                {
                  char v96 = 0;
                }
                else
                {
                  uint64_t v90 = (long long *)(v80 + v37 * v97 + 32 * v98);
                  long long v91 = *v90;
                  long long v92 = v90[1];
                  uint64_t v93 = (long long *)((char *)v90 + v36);
                  long long v94 = *v93;
                  long long v95 = v93[1];
                  *uint64_t v89 = v91;
                  v89[1] = v94;
                  v89[2] = v92;
                  v89[3] = v95;
                  v89 += 4;
                  char v96 = 63;
                }
                *v79++ = v96;
                v88 += 2;
              }
              while (v88 != 16);
              a7 = v178;
LABEL_138:
              unsigned int v102 = v40 + 1;
              if (v189) {
                goto LABEL_47;
              }
              goto LABEL_48;
            }
            unint64_t v83 = v81;
            int v84 = v46;
            BOOL v172 = v48;
            int v85 = v45;
            memcpy(__dst, v81, sizeof(__dst));
            int v45 = v85;
            BOOL v48 = v172;
            unsigned int v43 = 8 * v40;
            int v46 = v84;
            uint64_t v86 = __dst;
            char v81 = v83;
            int v42 = v20 & v160;
            uint64_t v36 = a11;
            uint64_t result = v186;
          }
          else
          {
            uint64_t v86 = v81;
            if (!v82) {
              goto LABEL_125;
            }
          }
          uint64_t v177 = v81;
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE10ELj4ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = result;
          float64x2_t v191 = (int16x8_t *)v86;
          unsigned __int8 v199 = v47;
          unsigned __int8 v200 = v41;
          unsigned int v195 = v175;
          unsigned int v196 = v45 - v43;
          float64x2_t v192 = v79;
          uint64_t v193 = v80;
          uint64_t v194 = v36;
          unsigned int v197 = v184;
          unsigned int v198 = v46;
          if (v48)
          {
            uint64_t v87 = v86;
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(result + 8) + 7384), block);
            uint64_t v86 = v87;
            uint64_t v36 = a11;
            uint64_t result = v186;
            a7 = v178;
            char v81 = v177;
            uint64_t v37 = 2 * a11;
            goto LABEL_138;
          }
          float64x2_t v173 = v86;
          uint64_t v103 = (uint64_t)&v86[AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v202, 64, (uint64_t)v86, *v79)];
          uint64_t v104 = v103
               + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v204, 64, v103, v79[1]);
          uint64_t v105 = v104
               + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v203, 64, v104, v79[2]);
          uint64_t v106 = v105
               + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v205, 64, v105, v79[3]);
          uint64_t v107 = v106
               + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v206, 64, v106, v79[4]);
          uint64_t v108 = v107
               + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v208, 64, v107, v79[5]);
          uint64_t v109 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v207, 64, v108, v79[6]);
          AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v209, 64, v108 + v109, v79[7]);
          uint64_t v110 = v197;
          if (v197 && v198)
          {
            uint64_t v111 = 0;
            unint64_t v112 = (unint64_t)v195 << 6;
            uint64_t v113 = 8 * v196;
            int v114 = &v202[0].i8[v112 + v113];
            uint64_t v115 = v193;
            uint64_t v116 = v194;
            unint64_t v117 = 8 * v198;
            if (v117 <= 1) {
              unint64_t v118 = 1;
            }
            else {
              unint64_t v118 = 8 * v198;
            }
            unint64_t v119 = v112 + v113;
            unint64_t v120 = &v202[0].i8[v112 + v113];
            if (v118) {
              BOOL v121 = (v118 - 1) >> 32 == 0;
            }
            else {
              BOOL v121 = 0;
            }
            char v122 = !v121;
            uint64_t v123 = v118 & 0x7FFFFFFE0;
            uint64_t v124 = v118 & 0x7FFFFFFF8;
            char v125 = &v202[1].i8[v119];
            int v126 = (long long *)(v193 + 16);
            int v127 = v114;
            uint64_t v128 = v193;
            do
            {
              unsigned int v129 = (char *)(v115 + v116 * v111);
              unsigned int v130 = &v114[64 * v111];
              if ((unint64_t)(&v120[64 * v111] - v129) < 0x20) {
                char v131 = 1;
              }
              else {
                char v131 = v122;
              }
              if (v131)
              {
                int v132 = 0;
                goto LABEL_169;
              }
              if (v118 >= 0x20)
              {
                BOOL v134 = v126;
                BOOL v135 = v125;
                uint64_t v136 = v118 & 0x7FFFFFFE0;
                do
                {
                  long long v137 = *v134;
                  *((_OWORD *)v135 - 1) = *(v134 - 1);
                  *(_OWORD *)BOOL v135 = v137;
                  v135 += 32;
                  v134 += 2;
                  v136 -= 32;
                }
                while (v136);
                if (v118 == v123) {
                  goto LABEL_152;
                }
                uint64_t v133 = v118 & 0x7FFFFFFE0;
                if ((v118 & 0x18) == 0)
                {
                  v129 += v123;
                  v130 += v123;
                  int v132 = v118 & 0xFFFFFFE0;
                  goto LABEL_169;
                }
              }
              else
              {
                uint64_t v133 = 0;
              }
              v130 += v124;
              unint64_t v138 = v133 - (v118 & 0x7FFFFFFF8);
              int v139 = (uint64_t *)(v128 + v133);
              unsigned int v140 = &v127[v133];
              do
              {
                uint64_t v141 = *v139++;
                *(void *)unsigned int v140 = v141;
                v140 += 8;
                v138 += 8;
              }
              while (v138);
              if (v118 == v124) {
                goto LABEL_152;
              }
              v129 += v124;
              int v132 = v118 & 0xFFFFFFF8;
LABEL_169:
              unsigned int v142 = v132 + 1;
              do
              {
                char v143 = *v129++;
                *v130++ = v143;
              }
              while (v117 > v142++);
LABEL_152:
              ++v111;
              v125 += 64;
              int v126 = (long long *)((char *)v126 + v116);
              v128 += v116;
              v127 += 64;
            }
            while (v111 != v110);
          }
          uint64_t v145 = 0;
          uint64_t v146 = v191;
          int v147 = (char *)v192;
          int v148 = v199;
          int v149 = v200;
          a7 = v178;
          uint64_t v36 = a11;
          uint64_t result = v186;
          unsigned int v102 = v40 + 1;
          uint64_t v86 = v173;
          do
          {
            uint64_t v155 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,4u>::kSubblockPositions[v145 + 1];
            uint64_t v156 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,4u>::kSubblockPositions[v145];
            unsigned int v157 = (v148 - 4 * v156) & ~((v148 - 4 * (int)v156) >> 31);
            if (v157 >= 4) {
              unsigned int v157 = 4;
            }
            unsigned int v158 = (v149 - 2 * v155) & ~((v149 - 2 * (int)v155) >> 31);
            if (v158 >= 2) {
              unsigned int v158 = 2;
            }
            if (v157) {
              BOOL v159 = v158 == 0;
            }
            else {
              BOOL v159 = 1;
            }
            if (v159)
            {
              char v154 = 0;
            }
            else
            {
              unsigned int v150 = &v202[8 * v155 + 2 * v156];
              int16x8_t v151 = v150[1];
              int16x8_t v152 = v150[4];
              int16x8_t v153 = v150[5];
              *uint64_t v146 = *v150;
              v146[1] = v152;
              v146[2] = v151;
              v146[3] = v153;
              v146 += 4;
              char v154 = 63;
            }
            *v147++ = v154;
            v145 += 2;
          }
          while (v145 != 16);
          char v81 = v177;
          uint64_t v37 = 2 * a11;
          if (v189)
          {
LABEL_47:
            memcpy(v81, v86, 0x200uLL);
            uint64_t v37 = 2 * a11;
            uint64_t v36 = a11;
            uint64_t result = v186;
          }
LABEL_48:
          BOOL v21 = v40 == v179 >> 3;
          unsigned int v40 = v102;
        }
        while (!v21);
        BOOL v21 = v20++ == v166;
      }
      while (!v21);
    }
  }
  return result;
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, int a12)
{
  uint64_t v176 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  uint64_t v17 = a1;
  unsigned int v150 = a8;
  unsigned int v18 = a8 >> 3;
  unsigned int v134 = a8 + a10 - 1;
  unsigned int v136 = v134 >> 3;
  unsigned int v19 = *(unsigned __int8 *)(*(void *)(a1 + 208) + 88);
  unsigned int v20 = *(_DWORD *)(a1 + 112);
  uint64_t v151 = v17;
  if (*(void *)(v17 + 168))
  {
    __int16 CacheMode = IOSurfaceGetCacheMode();
    uint64_t v17 = v151;
    int v22 = CacheMode & 0xF00;
  }
  else
  {
    int v22 = 0;
  }
  BOOL v23 = (v22 & 0xD00) == 0 || v22 == 768;
  int v24 = v22 & 0xE00;
  int v26 = !v23 && v24 != 1024;
  int v155 = v26;
  BOOL isLevelTiled = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::isLevelTiled(v17, *(_DWORD *)(v17 + 144) + a12);
  uint64_t v28 = v151;
  BOOL v144 = isLevelTiled;
  if (v18 <= v136)
  {
    unsigned int v143 = a7 + a9 - 1;
    unsigned int v133 = a7 >> 3;
    if (a7 >> 3 <= v143 >> 3)
    {
      unsigned int v130 = a5 - 1;
      unsigned int v132 = (a6 - 1) >> 3;
      int v153 = ((a5 - 1) & 7) + 1;
      unsigned int v154 = (a5 - 1) >> 3;
      int v131 = ((a6 - 1) & 7) + 1;
      uint32x2_t v29 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0x700000007);
      int8x8_t v30 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v29, 3uLL))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x1000000010, v29));
      __int32 v141 = v30.i32[0] | v30.i32[1];
      int8x8_t v140 = v30;
      BOOL v138 = v30.i32[0] != 0;
      BOOL v139 = v30.i32[1] != 0;
      unint64_t v129 = 8 * v20 * (unint64_t)v19;
      unsigned int v142 = a7;
      do
      {
        unsigned int v31 = (8 * v18) | 7;
        if (8 * v18 <= v150) {
          int v32 = v150;
        }
        else {
          int v32 = 8 * v18;
        }
        unsigned int v33 = v133;
        if (v134 < v31) {
          unsigned int v31 = v134;
        }
        int v137 = v32 - 8 * v18;
        int v148 = v31 - v32 + 1;
        unsigned int v149 = 8 * v18;
        if (v18 == v132) {
          unsigned int v34 = v131;
        }
        else {
          unsigned int v34 = 8;
        }
        uint64_t v147 = a3 + (v32 - v150) * a11;
        unsigned int v152 = v34;
        do
        {
          unsigned int v35 = 8 * v33;
          unsigned int v36 = 8 * (v33 + 1) - 1;
          if (8 * v33 <= a7) {
            int v37 = a7;
          }
          else {
            int v37 = 8 * v33;
          }
          if (v143 < v36) {
            unsigned int v36 = v143;
          }
          int v38 = v36 - v37 + 1;
          if (v33 == v154) {
            unsigned int v39 = v153;
          }
          else {
            unsigned int v39 = 8;
          }
          BOOL v40 = 1;
          if (v149 >= v150 && v35 >= a7)
          {
            int v41 = v153;
            if (v33 != v154) {
              int v41 = 8;
            }
            BOOL v40 = v38 != v41 || v148 != v34;
          }
          if (v144)
          {
            unsigned int v62 = 0;
            uint64_t v63 = v129 >> (*(unsigned char *)(v28 + 57) != 0);
            char v64 = 1;
            if (v63 > 127)
            {
              if (v63 > 511)
              {
                if (v63 == 512)
                {
                  char v64 = 0;
                  char v65 = 0;
                  unsigned int v62 = 16;
                  unsigned int v66 = 16;
                }
                else
                {
                  char v65 = 1;
                  unsigned int v66 = 0;
                  if (v63 == 1024)
                  {
                    char v64 = 0;
                    unsigned int v66 = 8;
                    unsigned int v62 = 16;
                  }
                }
              }
              else if (v63 == 128)
              {
                char v64 = 0;
                char v65 = 0;
                unsigned int v62 = 32;
                unsigned int v66 = 32;
              }
              else
              {
                char v65 = 1;
                unsigned int v66 = 0;
                if (v63 == 256)
                {
                  char v64 = 0;
                  char v65 = 0;
                  unsigned int v66 = 16;
                  unsigned int v62 = 32;
                }
              }
            }
            else
            {
              char v65 = 1;
              unsigned int v66 = 0;
              switch(v63)
              {
                case 4:
                  char v64 = 0;
                  char v65 = 0;
                  unsigned int v66 = 128;
                  unsigned int v62 = 256;
                  break;
                case 5:
                case 6:
                case 7:
                case 9:
                case 10:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 17:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                  break;
                case 8:
                  char v64 = 0;
                  char v65 = 0;
                  unsigned int v62 = 128;
                  unsigned int v66 = 128;
                  break;
                case 16:
                  char v64 = 0;
                  char v65 = 0;
                  unsigned int v66 = 64;
                  unsigned int v62 = 128;
                  break;
                case 32:
                  char v64 = 0;
                  char v65 = 0;
                  unsigned int v62 = 64;
                  unsigned int v66 = 64;
                  break;
                default:
                  if (v63 == 64)
                  {
                    char v64 = 0;
                    char v65 = 0;
                    unsigned int v66 = 32;
                    unsigned int v62 = 64;
                  }
                  break;
              }
            }
            unsigned int v118 = (v62 >> 3) - 1;
            if (v64) {
              unsigned int v119 = 0;
            }
            else {
              unsigned int v119 = 32 - __clz(~(-1 << -(char)__clz(v118)));
            }
            unsigned int v120 = (v66 >> 3) - 1;
            if (v65)
            {
              unsigned int v121 = 0;
              if (v119) {
                goto LABEL_149;
              }
            }
            else
            {
              unsigned int v121 = 32 - __clz(~(-1 << -(char)__clz(v120)));
              if (v121 | v119)
              {
LABEL_149:
                int v122 = 0;
                uint64_t v123 = 0;
                int v124 = v33 & v118;
                int v125 = v18 & v120;
                BOOL v126 = v119 != 0;
                BOOL v127 = v121 != 0;
                int v128 = 1;
                do
                {
                  --v119;
                  if (v126) {
                    v123 |= (unint64_t)(v128 & v124) << v122++;
                  }
                  else {
                    unsigned int v119 = 0;
                  }
                  --v121;
                  if (v127) {
                    v123 |= (unint64_t)(v128 & v125) << v122++;
                  }
                  else {
                    unsigned int v121 = 0;
                  }
                  v128 *= 2;
                  --v122;
                  BOOL v127 = v121 != 0;
                  BOOL v126 = v119 != 0;
                }
                while (v121 | v119);
                goto LABEL_161;
              }
            }
            uint64_t v123 = 0;
LABEL_161:
            unint64_t v50 = ((unint64_t)(v35 / v62 + v149 / v66 * ((v62 + v130) / v62)) << 14) + (v123 << 9);
            goto LABEL_59;
          }
          if (v141)
          {
            int v43 = 0;
            uint64_t v44 = 0;
            int v45 = 1;
            BOOL v46 = v138;
            BOOL v47 = v139;
            __int32 v49 = v140.i32[0];
            __int32 v48 = v140.i32[1];
            do
            {
              --v48;
              if (v47) {
                v44 |= (unint64_t)(v45 & v33) << v43++;
              }
              else {
                __int32 v48 = 0;
              }
              --v49;
              if (v46) {
                v44 |= (unint64_t)(v45 & v18) << v43++;
              }
              else {
                __int32 v49 = 0;
              }
              v45 *= 2;
              --v43;
              BOOL v46 = v49 != 0;
              BOOL v47 = v48 != 0;
            }
            while (v49 | v48);
          }
          else
          {
            uint64_t v44 = 0;
          }
          unint64_t v50 = v44 << 9;
LABEL_59:
          unsigned int v51 = *(_DWORD *)(v28 + 128) >> (*(unsigned char *)(v28 + 144) + a12);
          if (v51 <= 1) {
            unsigned int v51 = 1;
          }
          unsigned int v52 = v51 + 7;
          if (v52 < 0x10) {
            unsigned int v53 = 0;
          }
          else {
            unsigned int v53 = 32 - __clz(~(-1 << -(char)__clz((v52 >> 3) - 1)));
          }
          unsigned int v54 = *(_DWORD *)(v28 + 132) >> (*(unsigned char *)(v28 + 144) + a12);
          if (v54 <= 1) {
            unsigned int v54 = 1;
          }
          unsigned int v55 = v54 + 7;
          if (v55 < 0x10)
          {
            unsigned int v56 = 0;
            if (!v53)
            {
LABEL_81:
              uint64_t v58 = 0;
              goto LABEL_82;
            }
          }
          else
          {
            unsigned int v56 = 32 - __clz(~(-1 << -(char)__clz((v55 >> 3) - 1)));
            if (!(v56 | v53)) {
              goto LABEL_81;
            }
          }
          int v57 = 0;
          uint64_t v58 = 0;
          BOOL v59 = v53 != 0;
          BOOL v60 = v56 != 0;
          int v61 = 1;
          do
          {
            --v53;
            if (v59) {
              v58 |= (unint64_t)(v61 & v33) << v57++;
            }
            else {
              unsigned int v53 = 0;
            }
            --v56;
            if (v60) {
              v58 |= (unint64_t)(v61 & v18) << v57++;
            }
            else {
              unsigned int v56 = 0;
            }
            v61 *= 2;
            --v57;
            BOOL v60 = v56 != 0;
            BOOL v59 = v53 != 0;
          }
          while (v56 | v53);
LABEL_82:
          int v67 = v39 < 8 || v40;
          unsigned int v68 = (char *)(a4 + 8 * v58);
          unint64_t v69 = v147 + 8 * (v37 - a7);
          unsigned int v70 = (void *)(a2 + v50);
          if (v34 < 8) {
            int v71 = 1;
          }
          else {
            int v71 = v67;
          }
          if (v155)
          {
            if (!v71)
            {
              BOOL v75 = __dst;
LABEL_95:
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock(v69, a11, (unint64_t)v75, v68, v39, v34);
              a7 = v142;
              goto LABEL_129;
            }
            char v72 = v39;
            int v73 = v38;
            int v74 = v37;
            memcpy(__dst, v70, sizeof(__dst));
            int v37 = v74;
            BOOL v75 = __dst;
            int v38 = v73;
            unsigned int v35 = 8 * v33;
            LOBYTE(v39) = v72;
            LOBYTE(v34) = v152;
            uint64_t v28 = v151;
          }
          else
          {
            BOOL v75 = v70;
            if (!v71) {
              goto LABEL_95;
            }
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE10ELj4ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = v28;
          unsigned int v157 = v75;
          unsigned __int8 v165 = v39;
          unsigned __int8 v166 = v34;
          unsigned int v161 = v137;
          unsigned int v162 = v37 - v35;
          unsigned int v158 = v68;
          unint64_t v159 = v69;
          uint64_t v160 = a11;
          unsigned int v163 = v148;
          unsigned int v164 = v38;
          if (v40)
          {
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(v28 + 8) + 7384), block);
            a7 = v142;
            goto LABEL_129;
          }
          uint64_t v76 = (uint64_t)&v75[AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v168, 64, (uint64_t)v75, *v68)];
          uint64_t v77 = v76
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v170, 64, v76, v68[1]);
          uint64_t v78 = v77
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v169, 64, v77, v68[2]);
          uint64_t v79 = v78
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v171, 64, v78, v68[3]);
          uint64_t v80 = v79
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v172, 64, v79, v68[4]);
          uint64_t v81 = v80
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v174, 64, v80, v68[5]);
          uint64_t v82 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v173, 64, v81, v68[6]);
          AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v175, 64, v81 + v82, v68[7]);
          uint64_t v83 = v163;
          a7 = v142;
          if (v163 && v164)
          {
            uint64_t v84 = 0;
            unint64_t v85 = (unint64_t)v161 << 6;
            uint64_t v86 = 8 * v162;
            uint64_t v87 = &v168[0].i8[v85 + v86];
            unint64_t v88 = v159;
            uint64_t v89 = v160;
            unint64_t v90 = 8 * v164;
            if (v90 <= 1) {
              unint64_t v91 = 1;
            }
            else {
              unint64_t v91 = 8 * v164;
            }
            unint64_t v92 = v85 + v86;
            uint64_t v93 = &v168[0].i8[v85 + v86];
            if (v91) {
              BOOL v94 = (v91 - 1) >> 32 == 0;
            }
            else {
              BOOL v94 = 0;
            }
            char v95 = !v94;
            uint64_t v96 = v91 & 0x7FFFFFFE0;
            uint64_t v97 = v91 & 0x7FFFFFFF8;
            uint64_t v98 = &v168[1].i8[v92];
            unsigned int v99 = (long long *)(v159 + 16);
            unsigned int v100 = v87;
            unint64_t v101 = v159;
            do
            {
              unsigned int v102 = (char *)(v88 + v89 * v84);
              uint64_t v103 = &v87[64 * v84];
              if ((unint64_t)(&v93[64 * v84] - v102) < 0x20) {
                char v104 = 1;
              }
              else {
                char v104 = v95;
              }
              if (v104)
              {
                int v105 = 0;
                goto LABEL_125;
              }
              if (v91 >= 0x20)
              {
                uint64_t v107 = v99;
                uint64_t v108 = v98;
                uint64_t v109 = v91 & 0x7FFFFFFE0;
                do
                {
                  long long v110 = *v107;
                  *((_OWORD *)v108 - 1) = *(v107 - 1);
                  *(_OWORD *)uint64_t v108 = v110;
                  v108 += 32;
                  v107 += 2;
                  v109 -= 32;
                }
                while (v109);
                if (v91 == v96) {
                  goto LABEL_108;
                }
                uint64_t v106 = v91 & 0x7FFFFFFE0;
                if ((v91 & 0x18) == 0)
                {
                  v102 += v96;
                  v103 += v96;
                  int v105 = v91 & 0xFFFFFFE0;
                  goto LABEL_125;
                }
              }
              else
              {
                uint64_t v106 = 0;
              }
              v103 += v97;
              unint64_t v111 = v106 - (v91 & 0x7FFFFFFF8);
              unint64_t v112 = (uint64_t *)(v101 + v106);
              uint64_t v113 = &v100[v106];
              do
              {
                uint64_t v114 = *v112++;
                *(void *)uint64_t v113 = v114;
                v113 += 8;
                v111 += 8;
              }
              while (v111);
              if (v91 == v97) {
                goto LABEL_108;
              }
              v102 += v97;
              int v105 = v91 & 0xFFFFFFF8;
LABEL_125:
              unsigned int v115 = v105 + 1;
              do
              {
                char v116 = *v102++;
                *v103++ = v116;
              }
              while (v90 > v115++);
LABEL_108:
              ++v84;
              v98 += 64;
              unsigned int v99 = (long long *)((char *)v99 + v89);
              v101 += v89;
              v100 += 64;
            }
            while (v84 != v83);
          }
          AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v168, 64, (unint64_t)v157, v158, v165, v166);
LABEL_129:
          if (v155) {
            memcpy(v70, v75, 0x200uLL);
          }
          BOOL v23 = v33++ == v143 >> 3;
          uint64_t v28 = v151;
          unsigned int v34 = v152;
        }
        while (!v23);
        BOOL v23 = v18++ == v136;
      }
      while (!v23);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, int a12)
{
  uint64_t v210 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v185 = a8;
  unsigned int v17 = a8 >> 3;
  unsigned int v166 = a8 + a10 - 1;
  unsigned int v168 = v166 >> 3;
  unsigned int v18 = *(unsigned __int8 *)(*(void *)(a1 + 208) + 88);
  unsigned int v19 = *(_DWORD *)(a1 + 112);
  uint64_t v186 = a1;
  if (*(void *)(a1 + 168)) {
    int v20 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v20 = 0;
  }
  BOOL v21 = (v20 & 0xD00) == 0 || v20 == 768;
  int v22 = v20 & 0xE00;
  int v24 = !v21 && v22 != 1024;
  int v189 = v24;
  BOOL isLevelTiled = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::isLevelTiled(a1, *(_DWORD *)(a1 + 144) + a12);
  uint64_t v26 = a1;
  BOOL v179 = isLevelTiled;
  if (v17 <= v168)
  {
    unsigned int v178 = a7 + a9 - 1;
    unsigned int v165 = a7 >> 3;
    if (a7 >> 3 <= v178 >> 3)
    {
      unsigned int v162 = a5 - 1;
      unsigned int v188 = (a5 - 1) >> 3;
      int v187 = ((a5 - 1) & 7) + 1;
      int v163 = ((a6 - 1) & 7) + 1;
      unsigned int v164 = (a6 - 1) >> 3;
      unint64_t v27 = v19 * (unint64_t)v18;
      uint32x2_t v28 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0x700000007);
      int8x8_t v29 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v28, 3uLL))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x1000000010, v28));
      __int32 v176 = v29.i32[0] | v29.i32[1];
      int8x8_t v174 = v29;
      BOOL v172 = v29.i32[0] != 0;
      BOOL v173 = v29.i32[1] != 0;
      uint64_t v30 = a11;
      unint64_t v161 = 8 * v27;
      uint64_t v31 = 2 * a11;
      unsigned int v177 = a7;
      do
      {
        unsigned int v32 = (8 * v17) | 7;
        if (8 * v17 <= v185) {
          int v33 = v185;
        }
        else {
          int v33 = 8 * v17;
        }
        unsigned int v34 = v165;
        if (v166 < v32) {
          unsigned int v32 = v166;
        }
        int v171 = v33 - 8 * v17;
        int v183 = v32 - v33 + 1;
        unsigned int v184 = 8 * v17;
        if (v17 == v164) {
          unsigned int v35 = v163;
        }
        else {
          unsigned int v35 = 8;
        }
        uint64_t v182 = a3 + (v33 - v185) * v30;
        unsigned int v169 = v35;
        do
        {
          unsigned int v36 = 8 * v34;
          unsigned int v37 = 8 * (v34 + 1) - 1;
          if (8 * v34 <= a7) {
            int v38 = a7;
          }
          else {
            int v38 = 8 * v34;
          }
          if (v178 < v37) {
            unsigned int v37 = v178;
          }
          int v39 = v37 - v38 + 1;
          if (v34 == v188) {
            unsigned int v40 = v187;
          }
          else {
            unsigned int v40 = 8;
          }
          BOOL v41 = 1;
          if (v184 >= v185 && v36 >= a7)
          {
            int v42 = v187;
            if (v34 != v188) {
              int v42 = 8;
            }
            BOOL v41 = v39 != v42 || v183 != v35;
          }
          if (v179)
          {
            unsigned int v63 = 0;
            uint64_t v64 = v161 >> (*(unsigned char *)(v26 + 57) != 0);
            char v65 = 1;
            if (v64 > 127)
            {
              if (v64 > 511)
              {
                if (v64 == 512)
                {
                  char v65 = 0;
                  char v66 = 0;
                  unsigned int v63 = 16;
                  unsigned int v67 = 16;
                }
                else
                {
                  char v66 = 1;
                  unsigned int v67 = 0;
                  if (v64 == 1024)
                  {
                    char v65 = 0;
                    unsigned int v67 = 8;
                    unsigned int v63 = 16;
                  }
                }
              }
              else if (v64 == 128)
              {
                char v65 = 0;
                char v66 = 0;
                unsigned int v63 = 32;
                unsigned int v67 = 32;
              }
              else
              {
                char v66 = 1;
                unsigned int v67 = 0;
                if (v64 == 256)
                {
                  char v65 = 0;
                  char v66 = 0;
                  unsigned int v67 = 16;
                  unsigned int v63 = 32;
                }
              }
            }
            else
            {
              char v66 = 1;
              unsigned int v67 = 0;
              switch(v64)
              {
                case 4:
                  char v65 = 0;
                  char v66 = 0;
                  unsigned int v67 = 128;
                  unsigned int v63 = 256;
                  break;
                case 5:
                case 6:
                case 7:
                case 9:
                case 10:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 17:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                  break;
                case 8:
                  char v65 = 0;
                  char v66 = 0;
                  unsigned int v63 = 128;
                  unsigned int v67 = 128;
                  break;
                case 16:
                  char v65 = 0;
                  char v66 = 0;
                  unsigned int v67 = 64;
                  unsigned int v63 = 128;
                  break;
                case 32:
                  char v65 = 0;
                  char v66 = 0;
                  unsigned int v63 = 64;
                  unsigned int v67 = 64;
                  break;
                default:
                  if (v64 == 64)
                  {
                    char v65 = 0;
                    char v66 = 0;
                    unsigned int v67 = 32;
                    unsigned int v63 = 64;
                  }
                  break;
              }
            }
            unsigned int v150 = (v63 >> 3) - 1;
            if (v65) {
              unsigned int v151 = 0;
            }
            else {
              unsigned int v151 = 32 - __clz(~(-1 << -(char)__clz(v150)));
            }
            unsigned int v152 = (v67 >> 3) - 1;
            if (v66)
            {
              unsigned int v153 = 0;
              if (v151) {
                goto LABEL_174;
              }
            }
            else
            {
              unsigned int v153 = 32 - __clz(~(-1 << -(char)__clz(v152)));
              if (v153 | v151)
              {
LABEL_174:
                int v154 = 0;
                uint64_t v155 = 0;
                int v156 = v34 & v150;
                int v157 = v17 & v152;
                BOOL v158 = v151 != 0;
                BOOL v159 = v153 != 0;
                int v160 = 1;
                do
                {
                  --v151;
                  if (v158) {
                    v155 |= (unint64_t)(v160 & v156) << v154++;
                  }
                  else {
                    unsigned int v151 = 0;
                  }
                  --v153;
                  if (v159) {
                    v155 |= (unint64_t)(v160 & v157) << v154++;
                  }
                  else {
                    unsigned int v153 = 0;
                  }
                  v160 *= 2;
                  --v154;
                  BOOL v159 = v153 != 0;
                  BOOL v158 = v151 != 0;
                }
                while (v153 | v151);
                goto LABEL_186;
              }
            }
            uint64_t v155 = 0;
LABEL_186:
            unint64_t v51 = ((unint64_t)(v36 / v63 + v184 / v67 * ((v63 + v162) / v63)) << 14) + (v155 << 9);
            goto LABEL_59;
          }
          if (v176)
          {
            int v44 = 0;
            uint64_t v45 = 0;
            int v46 = 1;
            BOOL v47 = v172;
            BOOL v48 = v173;
            __int32 v50 = v174.i32[0];
            __int32 v49 = v174.i32[1];
            do
            {
              --v49;
              if (v48) {
                v45 |= (unint64_t)(v46 & v34) << v44++;
              }
              else {
                __int32 v49 = 0;
              }
              --v50;
              if (v47) {
                v45 |= (unint64_t)(v46 & v17) << v44++;
              }
              else {
                __int32 v50 = 0;
              }
              v46 *= 2;
              --v44;
              BOOL v47 = v50 != 0;
              BOOL v48 = v49 != 0;
            }
            while (v50 | v49);
          }
          else
          {
            uint64_t v45 = 0;
          }
          unint64_t v51 = v45 << 9;
LABEL_59:
          unsigned int v52 = *(_DWORD *)(v26 + 128) >> (*(unsigned char *)(v26 + 144) + a12);
          if (v52 <= 1) {
            unsigned int v52 = 1;
          }
          unsigned int v53 = v52 + 7;
          if (v53 < 0x10) {
            unsigned int v54 = 0;
          }
          else {
            unsigned int v54 = 32 - __clz(~(-1 << -(char)__clz((v53 >> 3) - 1)));
          }
          unsigned int v55 = *(_DWORD *)(v26 + 132) >> (*(unsigned char *)(v26 + 144) + a12);
          if (v55 <= 1) {
            unsigned int v55 = 1;
          }
          unsigned int v56 = v55 + 7;
          if (v56 < 0x10)
          {
            unsigned int v57 = 0;
            if (!v54)
            {
LABEL_81:
              uint64_t v59 = 0;
              goto LABEL_82;
            }
          }
          else
          {
            unsigned int v57 = 32 - __clz(~(-1 << -(char)__clz((v56 >> 3) - 1)));
            if (!(v57 | v54)) {
              goto LABEL_81;
            }
          }
          int v58 = 0;
          uint64_t v59 = 0;
          BOOL v60 = v54 != 0;
          BOOL v61 = v57 != 0;
          int v62 = 1;
          do
          {
            --v54;
            if (v60) {
              v59 |= (unint64_t)(v62 & v34) << v58++;
            }
            else {
              unsigned int v54 = 0;
            }
            --v57;
            if (v61) {
              v59 |= (unint64_t)(v62 & v17) << v58++;
            }
            else {
              unsigned int v57 = 0;
            }
            v62 *= 2;
            --v58;
            BOOL v61 = v57 != 0;
            BOOL v60 = v54 != 0;
          }
          while (v57 | v54);
LABEL_82:
          int v68 = v40 < 8 || v41;
          unint64_t v69 = (unsigned __int8 *)(a4 + 8 * v59);
          uint64_t v70 = v182 + 8 * (v38 - a7);
          int v71 = (void *)(a2 + v51);
          if (v35 < 8) {
            int v72 = 1;
          }
          else {
            int v72 = v68;
          }
          if (v189)
          {
            if (!v72)
            {
              uint64_t v77 = __dst;
LABEL_96:
              uint64_t v79 = 0;
              uint64_t v80 = v77;
              do
              {
                uint64_t v88 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,4u>::kSubblockPositions[v79 + 1];
                uint64_t v89 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,4u>::kSubblockPositions[v79];
                unsigned int v90 = (v40 - 4 * v89) & ~((int)(v40 - 4 * v89) >> 31);
                if (v90 >= 4) {
                  unsigned int v90 = 4;
                }
                unsigned int v91 = (v35 - 2 * v88) & ~((int)(v35 - 2 * v88) >> 31);
                if (v91 >= 2) {
                  unsigned int v91 = 2;
                }
                if (v90) {
                  BOOL v92 = v91 == 0;
                }
                else {
                  BOOL v92 = 1;
                }
                if (v92)
                {
                  char v87 = 0;
                }
                else
                {
                  uint64_t v81 = (long long *)(v70 + v31 * v88 + 32 * v89);
                  long long v82 = *v81;
                  long long v83 = v81[1];
                  uint64_t v84 = (long long *)((char *)v81 + v30);
                  long long v85 = *v84;
                  long long v86 = v84[1];
                  _OWORD *v80 = v82;
                  v80[1] = v85;
                  v80[2] = v83;
                  v80[3] = v86;
                  v80 += 4;
                  char v87 = 63;
                }
                *v69++ = v87;
                v79 += 2;
              }
              while (v79 != 16);
              a7 = v177;
              if (v189) {
                goto LABEL_155;
              }
              goto LABEL_27;
            }
            int v73 = v71;
            int v74 = v39;
            BOOL v75 = v41;
            int v76 = v38;
            memcpy(__dst, v71, sizeof(__dst));
            uint64_t v77 = __dst;
            int v71 = v73;
            int v38 = v76;
            BOOL v41 = v75;
            unsigned int v35 = v169;
            unsigned int v36 = 8 * v34;
            int v39 = v74;
            uint64_t v30 = a11;
            uint64_t v26 = v186;
          }
          else
          {
            uint64_t v77 = v71;
            if (!v72) {
              goto LABEL_96;
            }
          }
          int v175 = v71;
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE10ELj4ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = v26;
          float64x2_t v191 = (int16x8_t *)v77;
          unsigned __int8 v199 = v40;
          unsigned __int8 v200 = v35;
          unsigned int v195 = v171;
          unsigned int v196 = v38 - v36;
          float64x2_t v192 = v69;
          uint64_t v193 = v70;
          uint64_t v194 = v30;
          unsigned int v197 = v183;
          unsigned int v198 = v39;
          if (v41)
          {
            uint64_t v78 = v77;
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(v26 + 8) + 7384), block);
            uint64_t v77 = v78;
            uint64_t v26 = v186;
            a7 = v177;
            uint64_t v31 = 2 * a11;
            int v71 = v175;
            if (!v189) {
              goto LABEL_27;
            }
LABEL_155:
            memcpy(v71, v77, 0x200uLL);
            uint64_t v31 = 2 * a11;
            uint64_t v26 = v186;
            goto LABEL_27;
          }
          int8x8_t v170 = v77;
          uint64_t v93 = (uint64_t)&v77[AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v202, 64, (uint64_t)v77, *v69)];
          uint64_t v94 = v93
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v204, 64, v93, v69[1]);
          uint64_t v95 = v94
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v203, 64, v94, v69[2]);
          uint64_t v96 = v95
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v205, 64, v95, v69[3]);
          uint64_t v97 = v96
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v206, 64, v96, v69[4]);
          uint64_t v98 = v97
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v208, 64, v97, v69[5]);
          uint64_t v99 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v207, 64, v98, v69[6]);
          AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v209, 64, v98 + v99, v69[7]);
          uint64_t v100 = v197;
          if (v197 && v198)
          {
            uint64_t v101 = 0;
            unint64_t v102 = (unint64_t)v195 << 6;
            uint64_t v103 = 8 * v196;
            char v104 = &v202[0].i8[v102 + v103];
            uint64_t v105 = v193;
            uint64_t v106 = v194;
            unint64_t v107 = 8 * v198;
            if (v107 <= 1) {
              unint64_t v108 = 1;
            }
            else {
              unint64_t v108 = 8 * v198;
            }
            unint64_t v109 = v102 + v103;
            long long v110 = &v202[0].i8[v102 + v103];
            if (v108) {
              BOOL v111 = (v108 - 1) >> 32 == 0;
            }
            else {
              BOOL v111 = 0;
            }
            char v112 = !v111;
            uint64_t v113 = v108 & 0x7FFFFFFE0;
            uint64_t v114 = v108 & 0x7FFFFFFF8;
            unsigned int v115 = &v202[1].i8[v109];
            char v116 = (long long *)(v193 + 16);
            unint64_t v117 = v104;
            uint64_t v118 = v193;
            do
            {
              unsigned int v119 = (char *)(v105 + v106 * v101);
              unsigned int v120 = &v104[64 * v101];
              if ((unint64_t)(&v110[64 * v101] - v119) < 0x20) {
                char v121 = 1;
              }
              else {
                char v121 = v112;
              }
              if (v121)
              {
                int v122 = 0;
                goto LABEL_139;
              }
              if (v108 >= 0x20)
              {
                int v124 = v116;
                int v125 = v115;
                uint64_t v126 = v108 & 0x7FFFFFFE0;
                do
                {
                  long long v127 = *v124;
                  *((_OWORD *)v125 - 1) = *(v124 - 1);
                  *(_OWORD *)int v125 = v127;
                  v125 += 32;
                  v124 += 2;
                  v126 -= 32;
                }
                while (v126);
                if (v108 == v113) {
                  goto LABEL_122;
                }
                uint64_t v123 = v108 & 0x7FFFFFFE0;
                if ((v108 & 0x18) == 0)
                {
                  v119 += v113;
                  v120 += v113;
                  int v122 = v108 & 0xFFFFFFE0;
                  goto LABEL_139;
                }
              }
              else
              {
                uint64_t v123 = 0;
              }
              v120 += v114;
              unint64_t v128 = v123 - (v108 & 0x7FFFFFFF8);
              unint64_t v129 = (uint64_t *)(v118 + v123);
              unsigned int v130 = &v117[v123];
              do
              {
                uint64_t v131 = *v129++;
                *(void *)unsigned int v130 = v131;
                v130 += 8;
                v128 += 8;
              }
              while (v128);
              if (v108 == v114) {
                goto LABEL_122;
              }
              v119 += v114;
              int v122 = v108 & 0xFFFFFFF8;
LABEL_139:
              unsigned int v132 = v122 + 1;
              do
              {
                char v133 = *v119++;
                *v120++ = v133;
              }
              while (v107 > v132++);
LABEL_122:
              ++v101;
              v115 += 64;
              char v116 = (long long *)((char *)v116 + v106);
              v118 += v106;
              v117 += 64;
            }
            while (v101 != v100);
          }
          uint64_t v135 = 0;
          unsigned int v136 = v191;
          int v137 = (char *)v192;
          int v138 = v199;
          int v139 = v200;
          a7 = v177;
          uint64_t v26 = v186;
          uint64_t v31 = 2 * a11;
          int v71 = v175;
          do
          {
            uint64_t v145 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,4u>::kSubblockPositions[v135 + 1];
            uint64_t v146 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,4u>::kSubblockPositions[v135];
            unsigned int v147 = (v138 - 4 * v146) & ~((v138 - 4 * (int)v146) >> 31);
            if (v147 >= 4) {
              unsigned int v147 = 4;
            }
            unsigned int v148 = (v139 - 2 * v145) & ~((v139 - 2 * (int)v145) >> 31);
            if (v148 >= 2) {
              unsigned int v148 = 2;
            }
            if (v147) {
              BOOL v149 = v148 == 0;
            }
            else {
              BOOL v149 = 1;
            }
            if (v149)
            {
              char v144 = 0;
            }
            else
            {
              int8x8_t v140 = &v202[8 * v145 + 2 * v146];
              int16x8_t v141 = v140[1];
              int16x8_t v142 = v140[4];
              int16x8_t v143 = v140[5];
              *unsigned int v136 = *v140;
              v136[1] = v142;
              v136[2] = v141;
              v136[3] = v143;
              v136 += 4;
              char v144 = 63;
            }
            *v137++ = v144;
            v135 += 2;
          }
          while (v135 != 16);
          uint64_t v77 = v170;
          if (v189) {
            goto LABEL_155;
          }
LABEL_27:
          BOOL v21 = v34++ == v178 >> 3;
        }
        while (!v21);
        BOOL v21 = v17++ == v168;
      }
      while (!v21);
    }
  }
}

uint64_t AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, char a12)
{
  uint64_t v175 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v148 = a8;
  unsigned int v133 = a8 + a10 - 1;
  uint64_t v149 = a1;
  if (*(void *)(a1 + 168)) {
    int v17 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v17 = 0;
  }
  unsigned int v18 = a5 - 1;
  unsigned int v19 = a6 - 1;
  unsigned int v20 = a8 >> 3;
  unsigned int v132 = v133 >> 3;
  BOOL v21 = (v17 & 0xD00) == 0 || v17 == 768;
  int v22 = v17 & 0xE00;
  int v24 = !v21 && v22 != 1024;
  int v154 = v24;
  uint64_t result = a1;
  if (*(unsigned char *)(a1 + 232))
  {
    unsigned int v26 = *(unsigned __int8 *)(a1 + 255);
    unsigned int v27 = *(unsigned __int8 *)(a1 + 254);
    char v28 = __clz(v18);
    if (1 << v26 >= a6 || a5 >> v27)
    {
      if (!(a6 >> v26) && 1 << v27 < a5)
      {
        if (a6 < 2) {
          unsigned int v31 = 0;
        }
        else {
          unsigned int v31 = __clz(~(-1 << -(char)__clz(v19))) - 32;
        }
        v27 += v26 + v31;
        unsigned int v26 = -v31;
      }
    }
    else
    {
      unsigned int v29 = 32 - __clz(~(-1 << -v28));
      unsigned int v30 = v27 + v26;
      if (a5 < 2) {
        unsigned int v29 = 0;
      }
      unsigned int v26 = v30 - v29;
      unsigned int v27 = v29;
    }
    if (a5 < 2)
    {
      if (v27) {
        goto LABEL_27;
      }
    }
    else if (32 - __clz(~(-1 << -v28)) < v27)
    {
LABEL_27:
      BOOL v143 = 0;
LABEL_32:
      unsigned int v140 = v27 - 3;
      unsigned int v137 = v26 - 3;
      int v33 = -1 << *(unsigned char *)(*(void *)(a1 + 208) + 48);
      unsigned int v130 = (((~v33 + a5) & v33) + ~(-1 << v27)) >> v27;
      goto LABEL_33;
    }
    if (a6 < 2) {
      unsigned int v32 = 0;
    }
    else {
      unsigned int v32 = 32 - __clz(~(-1 << -(char)__clz(v19)));
    }
    BOOL v143 = v32 >= v26;
    goto LABEL_32;
  }
  BOOL v143 = 0;
  unsigned int v130 = 0;
  unsigned int v137 = 0;
  unsigned int v140 = 0;
LABEL_33:
  if (v20 <= v132)
  {
    unsigned int v142 = a7 + a9 - 1;
    unsigned int v129 = a7 >> 3;
    if (a7 >> 3 <= v142 >> 3)
    {
      unsigned int v152 = v18 >> 3;
      unsigned int v128 = v19 >> 3;
      int v151 = (v18 & 7) + 1;
      int v127 = (v19 & 7) + 1;
      uint32x2_t v34 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0x700000007);
      int8x8_t v35 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v34, 3uLL))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x1000000010, v34));
      __int32 v138 = v35.i32[0] | v35.i32[1];
      int8x8_t v136 = v35;
      BOOL v134 = v35.i32[0] != 0;
      BOOL v135 = v35.i32[1] != 0;
      unsigned int v141 = a7;
      do
      {
        unsigned int v36 = (8 * v20) | 7;
        if (8 * v20 <= v148) {
          int v37 = v148;
        }
        else {
          int v37 = 8 * v20;
        }
        if (v133 < v36) {
          unsigned int v36 = v133;
        }
        int v139 = v37 - 8 * v20;
        int v147 = v36 - v37 + 1;
        unsigned int v38 = v129;
        if (v20 == v128) {
          unsigned int v39 = v127;
        }
        else {
          unsigned int v39 = 8;
        }
        uint64_t v146 = a3 + (v37 - v148) * a11;
        unsigned int v150 = v39;
        do
        {
          unsigned int v40 = 8 * v38;
          unsigned int v41 = 8 * (v38 + 1) - 1;
          if (8 * v38 <= a7) {
            int v42 = a7;
          }
          else {
            int v42 = 8 * v38;
          }
          if (v142 < v41) {
            unsigned int v41 = v142;
          }
          int v43 = v41 - v42 + 1;
          if (v38 == v152) {
            unsigned int v44 = v151;
          }
          else {
            unsigned int v44 = 8;
          }
          BOOL v45 = 1;
          if (8 * v20 >= v148 && v40 >= a7)
          {
            int v46 = v151;
            if (v38 != v152) {
              int v46 = 8;
            }
            BOOL v45 = v43 != v46 || v147 != v39;
          }
          if (v143)
          {
            if (v140 | v137)
            {
              int v48 = 0;
              uint64_t v49 = 0;
              BOOL v50 = v137 != 0;
              int v51 = 1;
              BOOL v53 = v140 != 0;
              unsigned int v52 = v137;
              unsigned int v54 = v140;
              do
              {
                --v54;
                if (v53) {
                  v49 |= (unint64_t)(v38 & ~(-1 << v140) & v51) << v48++;
                }
                else {
                  unsigned int v54 = 0;
                }
                --v52;
                if (v50) {
                  v49 |= (unint64_t)(v20 & ~(-1 << v137) & v51) << v48++;
                }
                else {
                  unsigned int v52 = 0;
                }
                v51 *= 2;
                --v48;
                BOOL v50 = v52 != 0;
                BOOL v53 = v54 != 0;
              }
              while (v52 | v54);
            }
            else
            {
              uint64_t v49 = 0;
            }
            uint64_t v62 = *(void *)(result + 320) * ((v38 >> v140) + (v20 >> v137) * v130) + (v49 << 9);
          }
          else
          {
            if (v138)
            {
              int v55 = 0;
              uint64_t v56 = 0;
              int v57 = 1;
              BOOL v58 = v134;
              BOOL v59 = v135;
              __int32 v61 = v136.i32[0];
              __int32 v60 = v136.i32[1];
              do
              {
                --v60;
                if (v59) {
                  v56 |= (unint64_t)(v57 & v38) << v55++;
                }
                else {
                  __int32 v60 = 0;
                }
                --v61;
                if (v58) {
                  v56 |= (unint64_t)(v57 & v20) << v55++;
                }
                else {
                  __int32 v61 = 0;
                }
                v57 *= 2;
                --v55;
                BOOL v58 = v61 != 0;
                BOOL v59 = v60 != 0;
              }
              while (v61 | v60);
            }
            else
            {
              uint64_t v56 = 0;
            }
            uint64_t v62 = v56 << 9;
          }
          unsigned int v63 = *(_DWORD *)(result + 128) >> (*(unsigned char *)(result + 144) + a12);
          if (v63 <= 1) {
            unsigned int v63 = 1;
          }
          unsigned int v64 = v63 + 7;
          if (v64 < 0x10) {
            unsigned int v65 = 0;
          }
          else {
            unsigned int v65 = 32 - __clz(~(-1 << -(char)__clz((v64 >> 3) - 1)));
          }
          unsigned int v66 = *(_DWORD *)(result + 132) >> (*(unsigned char *)(result + 144) + a12);
          if (v66 <= 1) {
            unsigned int v66 = 1;
          }
          unsigned int v67 = v66 + 7;
          if (v67 < 0x10) {
            unsigned int v68 = 0;
          }
          else {
            unsigned int v68 = 32 - __clz(~(-1 << -(char)__clz((v67 >> 3) - 1)));
          }
          if (v68 | v65)
          {
            int v69 = 0;
            uint64_t v70 = 0;
            BOOL v71 = v65 != 0;
            BOOL v72 = v68 != 0;
            int v73 = 1;
            do
            {
              --v65;
              if (v71) {
                v70 |= (unint64_t)(v73 & v38) << v69++;
              }
              else {
                unsigned int v65 = 0;
              }
              --v68;
              if (v72) {
                v70 |= (unint64_t)(v73 & v20) << v69++;
              }
              else {
                unsigned int v68 = 0;
              }
              v73 *= 2;
              --v69;
              BOOL v72 = v68 != 0;
              BOOL v71 = v65 != 0;
            }
            while (v68 | v65);
          }
          else
          {
            uint64_t v70 = 0;
          }
          int v75 = v44 < 8 || v45;
          int v76 = (unsigned __int8 *)(a4 + 8 * v70);
          unsigned int v74 = v42 - a7;
          uint64_t v77 = v146 + 8 * (v42 - a7);
          uint64_t v78 = (uint16x8_t *)(a2 + v62);
          if (v39 < 8) {
            int v79 = 1;
          }
          else {
            int v79 = v75;
          }
          __src = v78;
          if (v154)
          {
            if (!v79)
            {
              uint64_t v78 = (uint16x8_t *)__dst;
LABEL_123:
              uint64_t v81 = (int16x8_t *)(v146 + 8 * v74);
              uint64_t v82 = a11;
              long long v83 = v78;
              uint64_t v84 = (char *)(a4 + 8 * v70);
              goto LABEL_157;
            }
            char v80 = v44;
            memcpy(__dst, __src, sizeof(__dst));
            LOBYTE(v44) = v80;
            uint64_t v78 = (uint16x8_t *)__dst;
            LOBYTE(v39) = v150;
            uint64_t result = v149;
          }
          else if (!v79)
          {
            goto LABEL_123;
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE8ELj4ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = result;
          int v156 = v78;
          unsigned __int8 v164 = v44;
          unsigned __int8 v165 = v39;
          unsigned int v160 = v139;
          unsigned int v161 = v42 - v40;
          int v157 = v76;
          uint64_t v158 = v77;
          uint64_t v159 = a11;
          unsigned int v162 = v147;
          unsigned int v163 = v43;
          if (v45)
          {
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(result + 8) + 7384), block);
            goto LABEL_158;
          }
          uint64_t v85 = (uint64_t)v78->i64
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v167, 64, (uint64_t)v78, *v76);
          uint64_t v86 = v85
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v169, 64, v85, v76[1]);
          uint64_t v87 = v86
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v168, 64, v86, v76[2]);
          uint64_t v88 = v87
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v170, 64, v87, v76[3]);
          uint64_t v89 = v88
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v171, 64, v88, v76[4]);
          uint64_t v90 = v89
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v173, 64, v89, v76[5]);
          uint64_t v91 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v172, 64, v90, v76[6]);
          AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v174, 64, v90 + v91, v76[7]);
          uint64_t v92 = v162;
          if (v162 && v163)
          {
            uint64_t v93 = 0;
            unint64_t v94 = (unint64_t)v160 << 6;
            uint64_t v95 = 8 * v161;
            uint64_t v96 = &v167[0].i8[v94 + v95];
            uint64_t v97 = v158;
            uint64_t v98 = v159;
            unint64_t v99 = 8 * v163;
            if (v99 <= 1) {
              unint64_t v100 = 1;
            }
            else {
              unint64_t v100 = 8 * v163;
            }
            unint64_t v101 = v94 + v95;
            unint64_t v102 = &v167[0].i8[v94 + v95];
            if (v100) {
              BOOL v103 = (v100 - 1) >> 32 == 0;
            }
            else {
              BOOL v103 = 0;
            }
            char v104 = !v103;
            uint64_t v105 = v100 & 0x7FFFFFFE0;
            uint64_t v106 = v100 & 0x7FFFFFFF8;
            unint64_t v107 = &v167[1].i8[v101];
            unint64_t v108 = (long long *)(v158 + 16);
            unint64_t v109 = v96;
            uint64_t v110 = v158;
            do
            {
              BOOL v111 = (char *)(v97 + v98 * v93);
              char v112 = &v96[64 * v93];
              if ((unint64_t)(&v102[64 * v93] - v111) < 0x20) {
                char v113 = 1;
              }
              else {
                char v113 = v104;
              }
              if (v113)
              {
                int v114 = 0;
                goto LABEL_153;
              }
              if (v100 >= 0x20)
              {
                char v116 = v108;
                unint64_t v117 = v107;
                uint64_t v118 = v100 & 0x7FFFFFFE0;
                do
                {
                  long long v119 = *v116;
                  *((_OWORD *)v117 - 1) = *(v116 - 1);
                  *(_OWORD *)unint64_t v117 = v119;
                  v117 += 32;
                  v116 += 2;
                  v118 -= 32;
                }
                while (v118);
                if (v100 == v105) {
                  goto LABEL_136;
                }
                uint64_t v115 = v100 & 0x7FFFFFFE0;
                if ((v100 & 0x18) == 0)
                {
                  v111 += v105;
                  v112 += v105;
                  int v114 = v100 & 0xFFFFFFE0;
                  goto LABEL_153;
                }
              }
              else
              {
                uint64_t v115 = 0;
              }
              v112 += v106;
              unint64_t v120 = v115 - (v100 & 0x7FFFFFFF8);
              char v121 = (uint64_t *)(v110 + v115);
              int v122 = &v109[v115];
              do
              {
                uint64_t v123 = *v121++;
                *(void *)int v122 = v123;
                v122 += 8;
                v120 += 8;
              }
              while (v120);
              if (v100 == v106) {
                goto LABEL_136;
              }
              v111 += v106;
              int v114 = v100 & 0xFFFFFFF8;
LABEL_153:
              unsigned int v124 = v114 + 1;
              do
              {
                char v125 = *v111++;
                *v112++ = v125;
              }
              while (v99 > v124++);
LABEL_136:
              ++v93;
              v107 += 64;
              unint64_t v108 = (long long *)((char *)v108 + v98);
              v110 += v98;
              v109 += 64;
            }
            while (v93 != v92);
          }
          long long v83 = v156;
          uint64_t v84 = (char *)v157;
          unsigned int v44 = v164;
          unsigned int v39 = v165;
          uint64_t v81 = v167;
          uint64_t v82 = 64;
LABEL_157:
          AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v81, v82, v83, v84, v44, v39);
LABEL_158:
          a7 = v141;
          if (v154) {
            memcpy(__src, v78, 0x200uLL);
          }
          BOOL v21 = v38++ == v142 >> 3;
          uint64_t result = v149;
          unsigned int v39 = v150;
        }
        while (!v21);
        BOOL v21 = v20++ == v132;
      }
      while (!v21);
    }
  }
  return result;
}

uint64_t AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, char a12)
{
  uint64_t v210 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v185 = a8;
  unsigned int v167 = a8 + a10 - 1;
  uint64_t v186 = a1;
  if (*(void *)(a1 + 168)) {
    int v17 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v17 = 0;
  }
  unsigned int v18 = a5 - 1;
  unsigned int v19 = a6 - 1;
  unsigned int v20 = a8 >> 3;
  unsigned int v166 = v167 >> 3;
  BOOL v21 = (v17 & 0xD00) == 0 || v17 == 768;
  int v22 = v17 & 0xE00;
  int v24 = !v21 && v22 != 1024;
  int v189 = v24;
  uint64_t result = a1;
  if (*(unsigned char *)(a1 + 232))
  {
    unsigned int v26 = *(unsigned __int8 *)(a1 + 255);
    unsigned int v27 = *(unsigned __int8 *)(a1 + 254);
    char v28 = __clz(v18);
    if (1 << v26 >= a6 || a5 >> v27)
    {
      if (!(a6 >> v26) && 1 << v27 < a5)
      {
        if (a6 < 2) {
          unsigned int v31 = 0;
        }
        else {
          unsigned int v31 = __clz(~(-1 << -(char)__clz(v19))) - 32;
        }
        v27 += v26 + v31;
        unsigned int v26 = -v31;
      }
    }
    else
    {
      unsigned int v29 = 32 - __clz(~(-1 << -v28));
      unsigned int v30 = v27 + v26;
      if (a5 < 2) {
        unsigned int v29 = 0;
      }
      unsigned int v26 = v30 - v29;
      unsigned int v27 = v29;
    }
    if (a5 < 2)
    {
      if (v27) {
        goto LABEL_27;
      }
    }
    else if (32 - __clz(~(-1 << -v28)) < v27)
    {
LABEL_27:
      BOOL v180 = 0;
LABEL_32:
      unsigned int v176 = v27 - 3;
      unsigned int v171 = v26 - 3;
      int v33 = -1 << *(unsigned char *)(*(void *)(a1 + 208) + 48);
      unsigned int v164 = (((~v33 + a5) & v33) + ~(-1 << v27)) >> v27;
      goto LABEL_33;
    }
    if (a6 < 2) {
      unsigned int v32 = 0;
    }
    else {
      unsigned int v32 = 32 - __clz(~(-1 << -(char)__clz(v19)));
    }
    BOOL v180 = v32 >= v26;
    goto LABEL_32;
  }
  BOOL v180 = 0;
  unsigned int v164 = 0;
  unsigned int v171 = 0;
  unsigned int v176 = 0;
LABEL_33:
  if (v20 <= v166)
  {
    unsigned int v179 = a7 + a9 - 1;
    unsigned int v163 = a7 >> 3;
    if (a7 >> 3 <= v179 >> 3)
    {
      unsigned int v188 = v18 >> 3;
      unsigned int v162 = v19 >> 3;
      int v187 = (v18 & 7) + 1;
      int v161 = (v19 & 7) + 1;
      int v160 = ~(-1 << v171);
      uint32x2_t v34 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0x700000007);
      int8x8_t v35 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v34, 3uLL))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x1000000010, v34));
      __int32 v174 = v35.i32[0] | v35.i32[1];
      int8x8_t v170 = v35;
      BOOL v169 = v35.i32[1] != 0;
      uint64_t v36 = a11;
      BOOL v168 = v35.i32[0] != 0;
      uint64_t v37 = 2 * a11;
      unsigned int v178 = a7;
      do
      {
        unsigned int v38 = (8 * v20) | 7;
        if (8 * v20 <= v185) {
          int v39 = v185;
        }
        else {
          int v39 = 8 * v20;
        }
        if (v167 < v38) {
          unsigned int v38 = v167;
        }
        int v175 = v39 - 8 * v20;
        int v184 = v38 - v39 + 1;
        unsigned int v40 = v163;
        if (v20 == v162) {
          unsigned int v41 = v161;
        }
        else {
          unsigned int v41 = 8;
        }
        int v42 = v20 & v160;
        uint64_t v183 = a3 + (v39 - v185) * v36;
        do
        {
          unsigned int v43 = 8 * v40;
          unsigned int v44 = 8 * (v40 + 1) - 1;
          if (8 * v40 <= a7) {
            int v45 = a7;
          }
          else {
            int v45 = 8 * v40;
          }
          if (v179 < v44) {
            unsigned int v44 = v179;
          }
          int v46 = v44 - v45 + 1;
          if (v40 == v188) {
            unsigned int v47 = v187;
          }
          else {
            unsigned int v47 = 8;
          }
          BOOL v48 = 1;
          if (8 * v20 >= v185 && v43 >= a7)
          {
            int v49 = v187;
            if (v40 != v188) {
              int v49 = 8;
            }
            BOOL v48 = v46 != v49 || v184 != v41;
          }
          if (v180)
          {
            if (v176 | v171)
            {
              int v51 = 0;
              uint64_t v52 = 0;
              BOOL v53 = v171 != 0;
              int v54 = 1;
              BOOL v56 = v176 != 0;
              unsigned int v55 = v171;
              unsigned int v57 = v176;
              do
              {
                --v57;
                if (v56) {
                  v52 |= (unint64_t)(v40 & ~(-1 << v176) & v54) << v51++;
                }
                else {
                  unsigned int v57 = 0;
                }
                --v55;
                if (v53) {
                  v52 |= (unint64_t)(v42 & v54) << v51++;
                }
                else {
                  unsigned int v55 = 0;
                }
                v54 *= 2;
                --v51;
                BOOL v53 = v55 != 0;
                BOOL v56 = v57 != 0;
              }
              while (v55 | v57);
            }
            else
            {
              uint64_t v52 = 0;
            }
            uint64_t v65 = *(void *)(result + 320) * ((v40 >> v176) + (v20 >> v171) * v164) + (v52 << 9);
          }
          else
          {
            if (v174)
            {
              int v58 = 0;
              uint64_t v59 = 0;
              int v60 = 1;
              BOOL v61 = v168;
              BOOL v62 = v169;
              __int32 v64 = v170.i32[0];
              __int32 v63 = v170.i32[1];
              do
              {
                --v63;
                if (v62) {
                  v59 |= (unint64_t)(v60 & v40) << v58++;
                }
                else {
                  __int32 v63 = 0;
                }
                --v64;
                if (v61) {
                  v59 |= (unint64_t)(v60 & v20) << v58++;
                }
                else {
                  __int32 v64 = 0;
                }
                v60 *= 2;
                --v58;
                BOOL v61 = v64 != 0;
                BOOL v62 = v63 != 0;
              }
              while (v64 | v63);
            }
            else
            {
              uint64_t v59 = 0;
            }
            uint64_t v65 = v59 << 9;
          }
          unsigned int v66 = *(_DWORD *)(result + 128) >> (*(unsigned char *)(result + 144) + a12);
          if (v66 <= 1) {
            unsigned int v66 = 1;
          }
          unsigned int v67 = v66 + 7;
          if (v67 < 0x10) {
            unsigned int v68 = 0;
          }
          else {
            unsigned int v68 = 32 - __clz(~(-1 << -(char)__clz((v67 >> 3) - 1)));
          }
          unsigned int v69 = *(_DWORD *)(result + 132) >> (*(unsigned char *)(result + 144) + a12);
          if (v69 <= 1) {
            unsigned int v69 = 1;
          }
          unsigned int v70 = v69 + 7;
          if (v70 < 0x10)
          {
            unsigned int v71 = 0;
            if (!v68)
            {
LABEL_111:
              uint64_t v73 = 0;
              goto LABEL_112;
            }
          }
          else
          {
            unsigned int v71 = 32 - __clz(~(-1 << -(char)__clz((v70 >> 3) - 1)));
            if (!(v71 | v68)) {
              goto LABEL_111;
            }
          }
          int v72 = 0;
          uint64_t v73 = 0;
          BOOL v74 = v68 != 0;
          BOOL v75 = v71 != 0;
          int v76 = 1;
          do
          {
            --v68;
            if (v74) {
              v73 |= (unint64_t)(v76 & v40) << v72++;
            }
            else {
              unsigned int v68 = 0;
            }
            --v71;
            if (v75) {
              v73 |= (unint64_t)(v76 & v20) << v72++;
            }
            else {
              unsigned int v71 = 0;
            }
            v76 *= 2;
            --v72;
            BOOL v75 = v71 != 0;
            BOOL v74 = v68 != 0;
          }
          while (v71 | v68);
LABEL_112:
          unsigned int v77 = v45 - a7;
          int v78 = v47 < 8 || v48;
          int v79 = (unsigned __int8 *)(a4 + 8 * v73);
          uint64_t v80 = v183 + 8 * v77;
          uint64_t v81 = (void *)(a2 + v65);
          if (v41 < 8) {
            int v82 = 1;
          }
          else {
            int v82 = v78;
          }
          if (v189)
          {
            if (!v82)
            {
              uint64_t v86 = __dst;
LABEL_125:
              uint64_t v88 = 0;
              uint64_t v89 = v86;
              do
              {
                uint64_t v97 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,4u>::kSubblockPositions[v88 + 1];
                uint64_t v98 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,4u>::kSubblockPositions[v88];
                unsigned int v99 = (v47 - 4 * v98) & ~((int)(v47 - 4 * v98) >> 31);
                if (v99 >= 4) {
                  unsigned int v99 = 4;
                }
                unsigned int v100 = (v41 - 2 * v97) & ~((int)(v41 - 2 * v97) >> 31);
                if (v100 >= 2) {
                  unsigned int v100 = 2;
                }
                if (v99) {
                  BOOL v101 = v100 == 0;
                }
                else {
                  BOOL v101 = 1;
                }
                if (v101)
                {
                  char v96 = 0;
                }
                else
                {
                  uint64_t v90 = (long long *)(v80 + v37 * v97 + 32 * v98);
                  long long v91 = *v90;
                  long long v92 = v90[1];
                  uint64_t v93 = (long long *)((char *)v90 + v36);
                  long long v94 = *v93;
                  long long v95 = v93[1];
                  *uint64_t v89 = v91;
                  v89[1] = v94;
                  v89[2] = v92;
                  v89[3] = v95;
                  v89 += 4;
                  char v96 = 63;
                }
                *v79++ = v96;
                v88 += 2;
              }
              while (v88 != 16);
              a7 = v178;
LABEL_138:
              unsigned int v102 = v40 + 1;
              if (v189) {
                goto LABEL_47;
              }
              goto LABEL_48;
            }
            long long v83 = v81;
            int v84 = v46;
            BOOL v172 = v48;
            int v85 = v45;
            memcpy(__dst, v81, sizeof(__dst));
            int v45 = v85;
            BOOL v48 = v172;
            unsigned int v43 = 8 * v40;
            int v46 = v84;
            uint64_t v86 = __dst;
            uint64_t v81 = v83;
            int v42 = v20 & v160;
            uint64_t v36 = a11;
            uint64_t result = v186;
          }
          else
          {
            uint64_t v86 = v81;
            if (!v82) {
              goto LABEL_125;
            }
          }
          unsigned int v177 = v81;
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE8ELj4ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = result;
          float64x2_t v191 = (int16x8_t *)v86;
          unsigned __int8 v199 = v47;
          unsigned __int8 v200 = v41;
          unsigned int v195 = v175;
          unsigned int v196 = v45 - v43;
          float64x2_t v192 = v79;
          uint64_t v193 = v80;
          uint64_t v194 = v36;
          unsigned int v197 = v184;
          unsigned int v198 = v46;
          if (v48)
          {
            uint64_t v87 = v86;
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(result + 8) + 7384), block);
            uint64_t v86 = v87;
            uint64_t v36 = a11;
            uint64_t result = v186;
            a7 = v178;
            uint64_t v81 = v177;
            uint64_t v37 = 2 * a11;
            goto LABEL_138;
          }
          BOOL v173 = v86;
          uint64_t v103 = (uint64_t)&v86[AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v202, 64, (uint64_t)v86, *v79)];
          uint64_t v104 = v103
               + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v204, 64, v103, v79[1]);
          uint64_t v105 = v104
               + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v203, 64, v104, v79[2]);
          uint64_t v106 = v105
               + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v205, 64, v105, v79[3]);
          uint64_t v107 = v106
               + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v206, 64, v106, v79[4]);
          uint64_t v108 = v107
               + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v208, 64, v107, v79[5]);
          uint64_t v109 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v207, 64, v108, v79[6]);
          AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v209, 64, v108 + v109, v79[7]);
          uint64_t v110 = v197;
          if (v197 && v198)
          {
            uint64_t v111 = 0;
            unint64_t v112 = (unint64_t)v195 << 6;
            uint64_t v113 = 8 * v196;
            int v114 = &v202[0].i8[v112 + v113];
            uint64_t v115 = v193;
            uint64_t v116 = v194;
            unint64_t v117 = 8 * v198;
            if (v117 <= 1) {
              unint64_t v118 = 1;
            }
            else {
              unint64_t v118 = 8 * v198;
            }
            unint64_t v119 = v112 + v113;
            unint64_t v120 = &v202[0].i8[v112 + v113];
            if (v118) {
              BOOL v121 = (v118 - 1) >> 32 == 0;
            }
            else {
              BOOL v121 = 0;
            }
            char v122 = !v121;
            uint64_t v123 = v118 & 0x7FFFFFFE0;
            uint64_t v124 = v118 & 0x7FFFFFFF8;
            char v125 = &v202[1].i8[v119];
            uint64_t v126 = (long long *)(v193 + 16);
            int v127 = v114;
            uint64_t v128 = v193;
            do
            {
              unsigned int v129 = (char *)(v115 + v116 * v111);
              unsigned int v130 = &v114[64 * v111];
              if ((unint64_t)(&v120[64 * v111] - v129) < 0x20) {
                char v131 = 1;
              }
              else {
                char v131 = v122;
              }
              if (v131)
              {
                int v132 = 0;
                goto LABEL_169;
              }
              if (v118 >= 0x20)
              {
                BOOL v134 = v126;
                BOOL v135 = v125;
                uint64_t v136 = v118 & 0x7FFFFFFE0;
                do
                {
                  long long v137 = *v134;
                  *((_OWORD *)v135 - 1) = *(v134 - 1);
                  *(_OWORD *)BOOL v135 = v137;
                  v135 += 32;
                  v134 += 2;
                  v136 -= 32;
                }
                while (v136);
                if (v118 == v123) {
                  goto LABEL_152;
                }
                uint64_t v133 = v118 & 0x7FFFFFFE0;
                if ((v118 & 0x18) == 0)
                {
                  v129 += v123;
                  v130 += v123;
                  int v132 = v118 & 0xFFFFFFE0;
                  goto LABEL_169;
                }
              }
              else
              {
                uint64_t v133 = 0;
              }
              v130 += v124;
              unint64_t v138 = v133 - (v118 & 0x7FFFFFFF8);
              int v139 = (uint64_t *)(v128 + v133);
              unsigned int v140 = &v127[v133];
              do
              {
                uint64_t v141 = *v139++;
                *(void *)unsigned int v140 = v141;
                v140 += 8;
                v138 += 8;
              }
              while (v138);
              if (v118 == v124) {
                goto LABEL_152;
              }
              v129 += v124;
              int v132 = v118 & 0xFFFFFFF8;
LABEL_169:
              unsigned int v142 = v132 + 1;
              do
              {
                char v143 = *v129++;
                *v130++ = v143;
              }
              while (v117 > v142++);
LABEL_152:
              ++v111;
              v125 += 64;
              uint64_t v126 = (long long *)((char *)v126 + v116);
              v128 += v116;
              v127 += 64;
            }
            while (v111 != v110);
          }
          uint64_t v145 = 0;
          uint64_t v146 = v191;
          int v147 = (char *)v192;
          int v148 = v199;
          int v149 = v200;
          a7 = v178;
          uint64_t v36 = a11;
          uint64_t result = v186;
          unsigned int v102 = v40 + 1;
          uint64_t v86 = v173;
          do
          {
            uint64_t v155 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,4u>::kSubblockPositions[v145 + 1];
            uint64_t v156 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,4u>::kSubblockPositions[v145];
            unsigned int v157 = (v148 - 4 * v156) & ~((v148 - 4 * (int)v156) >> 31);
            if (v157 >= 4) {
              unsigned int v157 = 4;
            }
            unsigned int v158 = (v149 - 2 * v155) & ~((v149 - 2 * (int)v155) >> 31);
            if (v158 >= 2) {
              unsigned int v158 = 2;
            }
            if (v157) {
              BOOL v159 = v158 == 0;
            }
            else {
              BOOL v159 = 1;
            }
            if (v159)
            {
              char v154 = 0;
            }
            else
            {
              unsigned int v150 = &v202[8 * v155 + 2 * v156];
              int16x8_t v151 = v150[1];
              int16x8_t v152 = v150[4];
              int16x8_t v153 = v150[5];
              *uint64_t v146 = *v150;
              v146[1] = v152;
              v146[2] = v151;
              v146[3] = v153;
              v146 += 4;
              char v154 = 63;
            }
            *v147++ = v154;
            v145 += 2;
          }
          while (v145 != 16);
          uint64_t v81 = v177;
          uint64_t v37 = 2 * a11;
          if (v189)
          {
LABEL_47:
            memcpy(v81, v86, 0x200uLL);
            uint64_t v37 = 2 * a11;
            uint64_t v36 = a11;
            uint64_t result = v186;
          }
LABEL_48:
          BOOL v21 = v40 == v179 >> 3;
          unsigned int v40 = v102;
        }
        while (!v21);
        BOOL v21 = v20++ == v166;
      }
      while (!v21);
    }
  }
  return result;
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, int a12)
{
  uint64_t v176 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  uint64_t v17 = a1;
  unsigned int v150 = a8;
  unsigned int v18 = a8 >> 3;
  unsigned int v134 = a8 + a10 - 1;
  unsigned int v136 = v134 >> 3;
  unsigned int v19 = *(unsigned __int8 *)(*(void *)(a1 + 208) + 88);
  unsigned int v20 = *(_DWORD *)(a1 + 112);
  uint64_t v151 = v17;
  if (*(void *)(v17 + 168))
  {
    __int16 CacheMode = IOSurfaceGetCacheMode();
    uint64_t v17 = v151;
    int v22 = CacheMode & 0xF00;
  }
  else
  {
    int v22 = 0;
  }
  BOOL v23 = (v22 & 0xD00) == 0 || v22 == 768;
  int v24 = v22 & 0xE00;
  int v26 = !v23 && v24 != 1024;
  int v155 = v26;
  BOOL isLevelTiled = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::isLevelTiled(v17, *(_DWORD *)(v17 + 144) + a12);
  uint64_t v28 = v151;
  BOOL v144 = isLevelTiled;
  if (v18 <= v136)
  {
    unsigned int v143 = a7 + a9 - 1;
    unsigned int v133 = a7 >> 3;
    if (a7 >> 3 <= v143 >> 3)
    {
      unsigned int v130 = a5 - 1;
      unsigned int v132 = (a6 - 1) >> 3;
      int v153 = ((a5 - 1) & 7) + 1;
      unsigned int v154 = (a5 - 1) >> 3;
      int v131 = ((a6 - 1) & 7) + 1;
      uint32x2_t v29 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0x700000007);
      int8x8_t v30 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v29, 3uLL))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x1000000010, v29));
      __int32 v141 = v30.i32[0] | v30.i32[1];
      int8x8_t v140 = v30;
      BOOL v138 = v30.i32[0] != 0;
      BOOL v139 = v30.i32[1] != 0;
      unint64_t v129 = 8 * v20 * (unint64_t)v19;
      unsigned int v142 = a7;
      do
      {
        unsigned int v31 = (8 * v18) | 7;
        if (8 * v18 <= v150) {
          int v32 = v150;
        }
        else {
          int v32 = 8 * v18;
        }
        unsigned int v33 = v133;
        if (v134 < v31) {
          unsigned int v31 = v134;
        }
        int v137 = v32 - 8 * v18;
        int v148 = v31 - v32 + 1;
        unsigned int v149 = 8 * v18;
        if (v18 == v132) {
          unsigned int v34 = v131;
        }
        else {
          unsigned int v34 = 8;
        }
        uint64_t v147 = a3 + (v32 - v150) * a11;
        unsigned int v152 = v34;
        do
        {
          unsigned int v35 = 8 * v33;
          unsigned int v36 = 8 * (v33 + 1) - 1;
          if (8 * v33 <= a7) {
            int v37 = a7;
          }
          else {
            int v37 = 8 * v33;
          }
          if (v143 < v36) {
            unsigned int v36 = v143;
          }
          int v38 = v36 - v37 + 1;
          if (v33 == v154) {
            unsigned int v39 = v153;
          }
          else {
            unsigned int v39 = 8;
          }
          BOOL v40 = 1;
          if (v149 >= v150 && v35 >= a7)
          {
            int v41 = v153;
            if (v33 != v154) {
              int v41 = 8;
            }
            BOOL v40 = v38 != v41 || v148 != v34;
          }
          if (v144)
          {
            unsigned int v62 = 0;
            uint64_t v63 = v129 >> (*(unsigned char *)(v28 + 57) != 0);
            char v64 = 1;
            if (v63 > 127)
            {
              if (v63 > 511)
              {
                if (v63 == 512)
                {
                  char v64 = 0;
                  char v65 = 0;
                  unsigned int v62 = 16;
                  unsigned int v66 = 16;
                }
                else
                {
                  char v65 = 1;
                  unsigned int v66 = 0;
                  if (v63 == 1024)
                  {
                    char v64 = 0;
                    unsigned int v66 = 8;
                    unsigned int v62 = 16;
                  }
                }
              }
              else if (v63 == 128)
              {
                char v64 = 0;
                char v65 = 0;
                unsigned int v62 = 32;
                unsigned int v66 = 32;
              }
              else
              {
                char v65 = 1;
                unsigned int v66 = 0;
                if (v63 == 256)
                {
                  char v64 = 0;
                  char v65 = 0;
                  unsigned int v66 = 16;
                  unsigned int v62 = 32;
                }
              }
            }
            else
            {
              char v65 = 1;
              unsigned int v66 = 0;
              switch(v63)
              {
                case 4:
                  char v64 = 0;
                  char v65 = 0;
                  unsigned int v66 = 128;
                  unsigned int v62 = 256;
                  break;
                case 5:
                case 6:
                case 7:
                case 9:
                case 10:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 17:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                  break;
                case 8:
                  char v64 = 0;
                  char v65 = 0;
                  unsigned int v62 = 128;
                  unsigned int v66 = 128;
                  break;
                case 16:
                  char v64 = 0;
                  char v65 = 0;
                  unsigned int v66 = 64;
                  unsigned int v62 = 128;
                  break;
                case 32:
                  char v64 = 0;
                  char v65 = 0;
                  unsigned int v62 = 64;
                  unsigned int v66 = 64;
                  break;
                default:
                  if (v63 == 64)
                  {
                    char v64 = 0;
                    char v65 = 0;
                    unsigned int v66 = 32;
                    unsigned int v62 = 64;
                  }
                  break;
              }
            }
            unsigned int v118 = (v62 >> 3) - 1;
            if (v64) {
              unsigned int v119 = 0;
            }
            else {
              unsigned int v119 = 32 - __clz(~(-1 << -(char)__clz(v118)));
            }
            unsigned int v120 = (v66 >> 3) - 1;
            if (v65)
            {
              unsigned int v121 = 0;
              if (v119) {
                goto LABEL_149;
              }
            }
            else
            {
              unsigned int v121 = 32 - __clz(~(-1 << -(char)__clz(v120)));
              if (v121 | v119)
              {
LABEL_149:
                int v122 = 0;
                uint64_t v123 = 0;
                int v124 = v33 & v118;
                int v125 = v18 & v120;
                BOOL v126 = v119 != 0;
                BOOL v127 = v121 != 0;
                int v128 = 1;
                do
                {
                  --v119;
                  if (v126) {
                    v123 |= (unint64_t)(v128 & v124) << v122++;
                  }
                  else {
                    unsigned int v119 = 0;
                  }
                  --v121;
                  if (v127) {
                    v123 |= (unint64_t)(v128 & v125) << v122++;
                  }
                  else {
                    unsigned int v121 = 0;
                  }
                  v128 *= 2;
                  --v122;
                  BOOL v127 = v121 != 0;
                  BOOL v126 = v119 != 0;
                }
                while (v121 | v119);
                goto LABEL_161;
              }
            }
            uint64_t v123 = 0;
LABEL_161:
            unint64_t v50 = ((unint64_t)(v35 / v62 + v149 / v66 * ((v62 + v130) / v62)) << 14) + (v123 << 9);
            goto LABEL_59;
          }
          if (v141)
          {
            int v43 = 0;
            uint64_t v44 = 0;
            int v45 = 1;
            BOOL v46 = v138;
            BOOL v47 = v139;
            __int32 v49 = v140.i32[0];
            __int32 v48 = v140.i32[1];
            do
            {
              --v48;
              if (v47) {
                v44 |= (unint64_t)(v45 & v33) << v43++;
              }
              else {
                __int32 v48 = 0;
              }
              --v49;
              if (v46) {
                v44 |= (unint64_t)(v45 & v18) << v43++;
              }
              else {
                __int32 v49 = 0;
              }
              v45 *= 2;
              --v43;
              BOOL v46 = v49 != 0;
              BOOL v47 = v48 != 0;
            }
            while (v49 | v48);
          }
          else
          {
            uint64_t v44 = 0;
          }
          unint64_t v50 = v44 << 9;
LABEL_59:
          unsigned int v51 = *(_DWORD *)(v28 + 128) >> (*(unsigned char *)(v28 + 144) + a12);
          if (v51 <= 1) {
            unsigned int v51 = 1;
          }
          unsigned int v52 = v51 + 7;
          if (v52 < 0x10) {
            unsigned int v53 = 0;
          }
          else {
            unsigned int v53 = 32 - __clz(~(-1 << -(char)__clz((v52 >> 3) - 1)));
          }
          unsigned int v54 = *(_DWORD *)(v28 + 132) >> (*(unsigned char *)(v28 + 144) + a12);
          if (v54 <= 1) {
            unsigned int v54 = 1;
          }
          unsigned int v55 = v54 + 7;
          if (v55 < 0x10)
          {
            unsigned int v56 = 0;
            if (!v53)
            {
LABEL_81:
              uint64_t v58 = 0;
              goto LABEL_82;
            }
          }
          else
          {
            unsigned int v56 = 32 - __clz(~(-1 << -(char)__clz((v55 >> 3) - 1)));
            if (!(v56 | v53)) {
              goto LABEL_81;
            }
          }
          int v57 = 0;
          uint64_t v58 = 0;
          BOOL v59 = v53 != 0;
          BOOL v60 = v56 != 0;
          int v61 = 1;
          do
          {
            --v53;
            if (v59) {
              v58 |= (unint64_t)(v61 & v33) << v57++;
            }
            else {
              unsigned int v53 = 0;
            }
            --v56;
            if (v60) {
              v58 |= (unint64_t)(v61 & v18) << v57++;
            }
            else {
              unsigned int v56 = 0;
            }
            v61 *= 2;
            --v57;
            BOOL v60 = v56 != 0;
            BOOL v59 = v53 != 0;
          }
          while (v56 | v53);
LABEL_82:
          int v67 = v39 < 8 || v40;
          unsigned int v68 = (char *)(a4 + 8 * v58);
          unint64_t v69 = v147 + 8 * (v37 - a7);
          unsigned int v70 = (uint16x8_t *)(a2 + v50);
          if (v34 < 8) {
            int v71 = 1;
          }
          else {
            int v71 = v67;
          }
          if (v155)
          {
            if (!v71)
            {
              BOOL v75 = (uint16x8_t *)__dst;
LABEL_95:
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock(v69, a11, v75, v68, v39, v34);
              a7 = v142;
              goto LABEL_129;
            }
            char v72 = v39;
            int v73 = v38;
            int v74 = v37;
            memcpy(__dst, v70, sizeof(__dst));
            int v37 = v74;
            BOOL v75 = (uint16x8_t *)__dst;
            int v38 = v73;
            unsigned int v35 = 8 * v33;
            LOBYTE(v39) = v72;
            LOBYTE(v34) = v152;
            uint64_t v28 = v151;
          }
          else
          {
            BOOL v75 = v70;
            if (!v71) {
              goto LABEL_95;
            }
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE8ELj4ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = v28;
          unsigned int v157 = v75;
          unsigned __int8 v165 = v39;
          unsigned __int8 v166 = v34;
          unsigned int v161 = v137;
          unsigned int v162 = v37 - v35;
          unsigned int v158 = v68;
          unint64_t v159 = v69;
          uint64_t v160 = a11;
          unsigned int v163 = v148;
          unsigned int v164 = v38;
          if (v40)
          {
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(v28 + 8) + 7384), block);
            a7 = v142;
            goto LABEL_129;
          }
          uint64_t v76 = (uint64_t)v75->i64
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v168, 64, (uint64_t)v75, *v68);
          uint64_t v77 = v76
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v170, 64, v76, v68[1]);
          uint64_t v78 = v77
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v169, 64, v77, v68[2]);
          uint64_t v79 = v78
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v171, 64, v78, v68[3]);
          uint64_t v80 = v79
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v172, 64, v79, v68[4]);
          uint64_t v81 = v80
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v174, 64, v80, v68[5]);
          uint64_t v82 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v173, 64, v81, v68[6]);
          AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v175, 64, v81 + v82, v68[7]);
          uint64_t v83 = v163;
          a7 = v142;
          if (v163 && v164)
          {
            uint64_t v84 = 0;
            unint64_t v85 = (unint64_t)v161 << 6;
            uint64_t v86 = 8 * v162;
            uint64_t v87 = &v168[0].i8[v85 + v86];
            unint64_t v88 = v159;
            uint64_t v89 = v160;
            unint64_t v90 = 8 * v164;
            if (v90 <= 1) {
              unint64_t v91 = 1;
            }
            else {
              unint64_t v91 = 8 * v164;
            }
            unint64_t v92 = v85 + v86;
            uint64_t v93 = &v168[0].i8[v85 + v86];
            if (v91) {
              BOOL v94 = (v91 - 1) >> 32 == 0;
            }
            else {
              BOOL v94 = 0;
            }
            char v95 = !v94;
            uint64_t v96 = v91 & 0x7FFFFFFE0;
            uint64_t v97 = v91 & 0x7FFFFFFF8;
            uint64_t v98 = &v168[1].i8[v92];
            unsigned int v99 = (long long *)(v159 + 16);
            unsigned int v100 = v87;
            unint64_t v101 = v159;
            do
            {
              unsigned int v102 = (char *)(v88 + v89 * v84);
              uint64_t v103 = &v87[64 * v84];
              if ((unint64_t)(&v93[64 * v84] - v102) < 0x20) {
                char v104 = 1;
              }
              else {
                char v104 = v95;
              }
              if (v104)
              {
                int v105 = 0;
                goto LABEL_125;
              }
              if (v91 >= 0x20)
              {
                uint64_t v107 = v99;
                uint64_t v108 = v98;
                uint64_t v109 = v91 & 0x7FFFFFFE0;
                do
                {
                  long long v110 = *v107;
                  *((_OWORD *)v108 - 1) = *(v107 - 1);
                  *(_OWORD *)uint64_t v108 = v110;
                  v108 += 32;
                  v107 += 2;
                  v109 -= 32;
                }
                while (v109);
                if (v91 == v96) {
                  goto LABEL_108;
                }
                uint64_t v106 = v91 & 0x7FFFFFFE0;
                if ((v91 & 0x18) == 0)
                {
                  v102 += v96;
                  v103 += v96;
                  int v105 = v91 & 0xFFFFFFE0;
                  goto LABEL_125;
                }
              }
              else
              {
                uint64_t v106 = 0;
              }
              v103 += v97;
              unint64_t v111 = v106 - (v91 & 0x7FFFFFFF8);
              unint64_t v112 = (uint64_t *)(v101 + v106);
              uint64_t v113 = &v100[v106];
              do
              {
                uint64_t v114 = *v112++;
                *(void *)uint64_t v113 = v114;
                v113 += 8;
                v111 += 8;
              }
              while (v111);
              if (v91 == v97) {
                goto LABEL_108;
              }
              v102 += v97;
              int v105 = v91 & 0xFFFFFFF8;
LABEL_125:
              unsigned int v115 = v105 + 1;
              do
              {
                char v116 = *v102++;
                *v103++ = v116;
              }
              while (v90 > v115++);
LABEL_108:
              ++v84;
              v98 += 64;
              unsigned int v99 = (long long *)((char *)v99 + v89);
              v101 += v89;
              v100 += 64;
            }
            while (v84 != v83);
          }
          AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v168, 64, v157, v158, v165, v166);
LABEL_129:
          if (v155) {
            memcpy(v70, v75, 0x200uLL);
          }
          BOOL v23 = v33++ == v143 >> 3;
          uint64_t v28 = v151;
          unsigned int v34 = v152;
        }
        while (!v23);
        BOOL v23 = v18++ == v136;
      }
      while (!v23);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, int a12)
{
  uint64_t v210 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v185 = a8;
  unsigned int v17 = a8 >> 3;
  unsigned int v166 = a8 + a10 - 1;
  unsigned int v168 = v166 >> 3;
  unsigned int v18 = *(unsigned __int8 *)(*(void *)(a1 + 208) + 88);
  unsigned int v19 = *(_DWORD *)(a1 + 112);
  uint64_t v186 = a1;
  if (*(void *)(a1 + 168)) {
    int v20 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v20 = 0;
  }
  BOOL v21 = (v20 & 0xD00) == 0 || v20 == 768;
  int v22 = v20 & 0xE00;
  int v24 = !v21 && v22 != 1024;
  int v189 = v24;
  BOOL isLevelTiled = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::isLevelTiled(a1, *(_DWORD *)(a1 + 144) + a12);
  uint64_t v26 = a1;
  BOOL v179 = isLevelTiled;
  if (v17 <= v168)
  {
    unsigned int v178 = a7 + a9 - 1;
    unsigned int v165 = a7 >> 3;
    if (a7 >> 3 <= v178 >> 3)
    {
      unsigned int v162 = a5 - 1;
      unsigned int v188 = (a5 - 1) >> 3;
      int v187 = ((a5 - 1) & 7) + 1;
      int v163 = ((a6 - 1) & 7) + 1;
      unsigned int v164 = (a6 - 1) >> 3;
      unint64_t v27 = v19 * (unint64_t)v18;
      uint32x2_t v28 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0x700000007);
      int8x8_t v29 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v28, 3uLL))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x1000000010, v28));
      __int32 v176 = v29.i32[0] | v29.i32[1];
      int8x8_t v174 = v29;
      BOOL v172 = v29.i32[0] != 0;
      BOOL v173 = v29.i32[1] != 0;
      uint64_t v30 = a11;
      unint64_t v161 = 8 * v27;
      uint64_t v31 = 2 * a11;
      unsigned int v177 = a7;
      do
      {
        unsigned int v32 = (8 * v17) | 7;
        if (8 * v17 <= v185) {
          int v33 = v185;
        }
        else {
          int v33 = 8 * v17;
        }
        unsigned int v34 = v165;
        if (v166 < v32) {
          unsigned int v32 = v166;
        }
        int v171 = v33 - 8 * v17;
        int v183 = v32 - v33 + 1;
        unsigned int v184 = 8 * v17;
        if (v17 == v164) {
          unsigned int v35 = v163;
        }
        else {
          unsigned int v35 = 8;
        }
        uint64_t v182 = a3 + (v33 - v185) * v30;
        unsigned int v169 = v35;
        do
        {
          unsigned int v36 = 8 * v34;
          unsigned int v37 = 8 * (v34 + 1) - 1;
          if (8 * v34 <= a7) {
            int v38 = a7;
          }
          else {
            int v38 = 8 * v34;
          }
          if (v178 < v37) {
            unsigned int v37 = v178;
          }
          int v39 = v37 - v38 + 1;
          if (v34 == v188) {
            unsigned int v40 = v187;
          }
          else {
            unsigned int v40 = 8;
          }
          BOOL v41 = 1;
          if (v184 >= v185 && v36 >= a7)
          {
            int v42 = v187;
            if (v34 != v188) {
              int v42 = 8;
            }
            BOOL v41 = v39 != v42 || v183 != v35;
          }
          if (v179)
          {
            unsigned int v63 = 0;
            uint64_t v64 = v161 >> (*(unsigned char *)(v26 + 57) != 0);
            char v65 = 1;
            if (v64 > 127)
            {
              if (v64 > 511)
              {
                if (v64 == 512)
                {
                  char v65 = 0;
                  char v66 = 0;
                  unsigned int v63 = 16;
                  unsigned int v67 = 16;
                }
                else
                {
                  char v66 = 1;
                  unsigned int v67 = 0;
                  if (v64 == 1024)
                  {
                    char v65 = 0;
                    unsigned int v67 = 8;
                    unsigned int v63 = 16;
                  }
                }
              }
              else if (v64 == 128)
              {
                char v65 = 0;
                char v66 = 0;
                unsigned int v63 = 32;
                unsigned int v67 = 32;
              }
              else
              {
                char v66 = 1;
                unsigned int v67 = 0;
                if (v64 == 256)
                {
                  char v65 = 0;
                  char v66 = 0;
                  unsigned int v67 = 16;
                  unsigned int v63 = 32;
                }
              }
            }
            else
            {
              char v66 = 1;
              unsigned int v67 = 0;
              switch(v64)
              {
                case 4:
                  char v65 = 0;
                  char v66 = 0;
                  unsigned int v67 = 128;
                  unsigned int v63 = 256;
                  break;
                case 5:
                case 6:
                case 7:
                case 9:
                case 10:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 17:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                  break;
                case 8:
                  char v65 = 0;
                  char v66 = 0;
                  unsigned int v63 = 128;
                  unsigned int v67 = 128;
                  break;
                case 16:
                  char v65 = 0;
                  char v66 = 0;
                  unsigned int v67 = 64;
                  unsigned int v63 = 128;
                  break;
                case 32:
                  char v65 = 0;
                  char v66 = 0;
                  unsigned int v63 = 64;
                  unsigned int v67 = 64;
                  break;
                default:
                  if (v64 == 64)
                  {
                    char v65 = 0;
                    char v66 = 0;
                    unsigned int v67 = 32;
                    unsigned int v63 = 64;
                  }
                  break;
              }
            }
            unsigned int v150 = (v63 >> 3) - 1;
            if (v65) {
              unsigned int v151 = 0;
            }
            else {
              unsigned int v151 = 32 - __clz(~(-1 << -(char)__clz(v150)));
            }
            unsigned int v152 = (v67 >> 3) - 1;
            if (v66)
            {
              unsigned int v153 = 0;
              if (v151) {
                goto LABEL_174;
              }
            }
            else
            {
              unsigned int v153 = 32 - __clz(~(-1 << -(char)__clz(v152)));
              if (v153 | v151)
              {
LABEL_174:
                int v154 = 0;
                uint64_t v155 = 0;
                int v156 = v34 & v150;
                int v157 = v17 & v152;
                BOOL v158 = v151 != 0;
                BOOL v159 = v153 != 0;
                int v160 = 1;
                do
                {
                  --v151;
                  if (v158) {
                    v155 |= (unint64_t)(v160 & v156) << v154++;
                  }
                  else {
                    unsigned int v151 = 0;
                  }
                  --v153;
                  if (v159) {
                    v155 |= (unint64_t)(v160 & v157) << v154++;
                  }
                  else {
                    unsigned int v153 = 0;
                  }
                  v160 *= 2;
                  --v154;
                  BOOL v159 = v153 != 0;
                  BOOL v158 = v151 != 0;
                }
                while (v153 | v151);
                goto LABEL_186;
              }
            }
            uint64_t v155 = 0;
LABEL_186:
            unint64_t v51 = ((unint64_t)(v36 / v63 + v184 / v67 * ((v63 + v162) / v63)) << 14) + (v155 << 9);
            goto LABEL_59;
          }
          if (v176)
          {
            int v44 = 0;
            uint64_t v45 = 0;
            int v46 = 1;
            BOOL v47 = v172;
            BOOL v48 = v173;
            __int32 v50 = v174.i32[0];
            __int32 v49 = v174.i32[1];
            do
            {
              --v49;
              if (v48) {
                v45 |= (unint64_t)(v46 & v34) << v44++;
              }
              else {
                __int32 v49 = 0;
              }
              --v50;
              if (v47) {
                v45 |= (unint64_t)(v46 & v17) << v44++;
              }
              else {
                __int32 v50 = 0;
              }
              v46 *= 2;
              --v44;
              BOOL v47 = v50 != 0;
              BOOL v48 = v49 != 0;
            }
            while (v50 | v49);
          }
          else
          {
            uint64_t v45 = 0;
          }
          unint64_t v51 = v45 << 9;
LABEL_59:
          unsigned int v52 = *(_DWORD *)(v26 + 128) >> (*(unsigned char *)(v26 + 144) + a12);
          if (v52 <= 1) {
            unsigned int v52 = 1;
          }
          unsigned int v53 = v52 + 7;
          if (v53 < 0x10) {
            unsigned int v54 = 0;
          }
          else {
            unsigned int v54 = 32 - __clz(~(-1 << -(char)__clz((v53 >> 3) - 1)));
          }
          unsigned int v55 = *(_DWORD *)(v26 + 132) >> (*(unsigned char *)(v26 + 144) + a12);
          if (v55 <= 1) {
            unsigned int v55 = 1;
          }
          unsigned int v56 = v55 + 7;
          if (v56 < 0x10)
          {
            unsigned int v57 = 0;
            if (!v54)
            {
LABEL_81:
              uint64_t v59 = 0;
              goto LABEL_82;
            }
          }
          else
          {
            unsigned int v57 = 32 - __clz(~(-1 << -(char)__clz((v56 >> 3) - 1)));
            if (!(v57 | v54)) {
              goto LABEL_81;
            }
          }
          int v58 = 0;
          uint64_t v59 = 0;
          BOOL v60 = v54 != 0;
          BOOL v61 = v57 != 0;
          int v62 = 1;
          do
          {
            --v54;
            if (v60) {
              v59 |= (unint64_t)(v62 & v34) << v58++;
            }
            else {
              unsigned int v54 = 0;
            }
            --v57;
            if (v61) {
              v59 |= (unint64_t)(v62 & v17) << v58++;
            }
            else {
              unsigned int v57 = 0;
            }
            v62 *= 2;
            --v58;
            BOOL v61 = v57 != 0;
            BOOL v60 = v54 != 0;
          }
          while (v57 | v54);
LABEL_82:
          int v68 = v40 < 8 || v41;
          unint64_t v69 = (unsigned __int8 *)(a4 + 8 * v59);
          uint64_t v70 = v182 + 8 * (v38 - a7);
          int v71 = (void *)(a2 + v51);
          if (v35 < 8) {
            int v72 = 1;
          }
          else {
            int v72 = v68;
          }
          if (v189)
          {
            if (!v72)
            {
              uint64_t v77 = __dst;
LABEL_96:
              uint64_t v79 = 0;
              uint64_t v80 = v77;
              do
              {
                uint64_t v88 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,4u>::kSubblockPositions[v79 + 1];
                uint64_t v89 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,4u>::kSubblockPositions[v79];
                unsigned int v90 = (v40 - 4 * v89) & ~((int)(v40 - 4 * v89) >> 31);
                if (v90 >= 4) {
                  unsigned int v90 = 4;
                }
                unsigned int v91 = (v35 - 2 * v88) & ~((int)(v35 - 2 * v88) >> 31);
                if (v91 >= 2) {
                  unsigned int v91 = 2;
                }
                if (v90) {
                  BOOL v92 = v91 == 0;
                }
                else {
                  BOOL v92 = 1;
                }
                if (v92)
                {
                  char v87 = 0;
                }
                else
                {
                  uint64_t v81 = (long long *)(v70 + v31 * v88 + 32 * v89);
                  long long v82 = *v81;
                  long long v83 = v81[1];
                  uint64_t v84 = (long long *)((char *)v81 + v30);
                  long long v85 = *v84;
                  long long v86 = v84[1];
                  _OWORD *v80 = v82;
                  v80[1] = v85;
                  v80[2] = v83;
                  v80[3] = v86;
                  v80 += 4;
                  char v87 = 63;
                }
                *v69++ = v87;
                v79 += 2;
              }
              while (v79 != 16);
              a7 = v177;
              if (v189) {
                goto LABEL_155;
              }
              goto LABEL_27;
            }
            int v73 = v71;
            int v74 = v39;
            BOOL v75 = v41;
            int v76 = v38;
            memcpy(__dst, v71, sizeof(__dst));
            uint64_t v77 = __dst;
            int v71 = v73;
            int v38 = v76;
            BOOL v41 = v75;
            unsigned int v35 = v169;
            unsigned int v36 = 8 * v34;
            int v39 = v74;
            uint64_t v30 = a11;
            uint64_t v26 = v186;
          }
          else
          {
            uint64_t v77 = v71;
            if (!v72) {
              goto LABEL_96;
            }
          }
          int v175 = v71;
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE8ELj4ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = v26;
          float64x2_t v191 = (int16x8_t *)v77;
          unsigned __int8 v199 = v40;
          unsigned __int8 v200 = v35;
          unsigned int v195 = v171;
          unsigned int v196 = v38 - v36;
          float64x2_t v192 = v69;
          uint64_t v193 = v70;
          uint64_t v194 = v30;
          unsigned int v197 = v183;
          unsigned int v198 = v39;
          if (v41)
          {
            uint64_t v78 = v77;
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(v26 + 8) + 7384), block);
            uint64_t v77 = v78;
            uint64_t v26 = v186;
            a7 = v177;
            uint64_t v31 = 2 * a11;
            int v71 = v175;
            if (!v189) {
              goto LABEL_27;
            }
LABEL_155:
            memcpy(v71, v77, 0x200uLL);
            uint64_t v31 = 2 * a11;
            uint64_t v26 = v186;
            goto LABEL_27;
          }
          int8x8_t v170 = v77;
          uint64_t v93 = (uint64_t)&v77[AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v202, 64, (uint64_t)v77, *v69)];
          uint64_t v94 = v93
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v204, 64, v93, v69[1]);
          uint64_t v95 = v94
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v203, 64, v94, v69[2]);
          uint64_t v96 = v95
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v205, 64, v95, v69[3]);
          uint64_t v97 = v96
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v206, 64, v96, v69[4]);
          uint64_t v98 = v97
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v208, 64, v97, v69[5]);
          uint64_t v99 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v207, 64, v98, v69[6]);
          AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v209, 64, v98 + v99, v69[7]);
          uint64_t v100 = v197;
          if (v197 && v198)
          {
            uint64_t v101 = 0;
            unint64_t v102 = (unint64_t)v195 << 6;
            uint64_t v103 = 8 * v196;
            char v104 = &v202[0].i8[v102 + v103];
            uint64_t v105 = v193;
            uint64_t v106 = v194;
            unint64_t v107 = 8 * v198;
            if (v107 <= 1) {
              unint64_t v108 = 1;
            }
            else {
              unint64_t v108 = 8 * v198;
            }
            unint64_t v109 = v102 + v103;
            long long v110 = &v202[0].i8[v102 + v103];
            if (v108) {
              BOOL v111 = (v108 - 1) >> 32 == 0;
            }
            else {
              BOOL v111 = 0;
            }
            char v112 = !v111;
            uint64_t v113 = v108 & 0x7FFFFFFE0;
            uint64_t v114 = v108 & 0x7FFFFFFF8;
            unsigned int v115 = &v202[1].i8[v109];
            char v116 = (long long *)(v193 + 16);
            unint64_t v117 = v104;
            uint64_t v118 = v193;
            do
            {
              unsigned int v119 = (char *)(v105 + v106 * v101);
              unsigned int v120 = &v104[64 * v101];
              if ((unint64_t)(&v110[64 * v101] - v119) < 0x20) {
                char v121 = 1;
              }
              else {
                char v121 = v112;
              }
              if (v121)
              {
                int v122 = 0;
                goto LABEL_139;
              }
              if (v108 >= 0x20)
              {
                int v124 = v116;
                int v125 = v115;
                uint64_t v126 = v108 & 0x7FFFFFFE0;
                do
                {
                  long long v127 = *v124;
                  *((_OWORD *)v125 - 1) = *(v124 - 1);
                  *(_OWORD *)int v125 = v127;
                  v125 += 32;
                  v124 += 2;
                  v126 -= 32;
                }
                while (v126);
                if (v108 == v113) {
                  goto LABEL_122;
                }
                uint64_t v123 = v108 & 0x7FFFFFFE0;
                if ((v108 & 0x18) == 0)
                {
                  v119 += v113;
                  v120 += v113;
                  int v122 = v108 & 0xFFFFFFE0;
                  goto LABEL_139;
                }
              }
              else
              {
                uint64_t v123 = 0;
              }
              v120 += v114;
              unint64_t v128 = v123 - (v108 & 0x7FFFFFFF8);
              unint64_t v129 = (uint64_t *)(v118 + v123);
              unsigned int v130 = &v117[v123];
              do
              {
                uint64_t v131 = *v129++;
                *(void *)unsigned int v130 = v131;
                v130 += 8;
                v128 += 8;
              }
              while (v128);
              if (v108 == v114) {
                goto LABEL_122;
              }
              v119 += v114;
              int v122 = v108 & 0xFFFFFFF8;
LABEL_139:
              unsigned int v132 = v122 + 1;
              do
              {
                char v133 = *v119++;
                *v120++ = v133;
              }
              while (v107 > v132++);
LABEL_122:
              ++v101;
              v115 += 64;
              char v116 = (long long *)((char *)v116 + v106);
              v118 += v106;
              v117 += 64;
            }
            while (v101 != v100);
          }
          uint64_t v135 = 0;
          unsigned int v136 = v191;
          int v137 = (char *)v192;
          int v138 = v199;
          int v139 = v200;
          a7 = v177;
          uint64_t v26 = v186;
          uint64_t v31 = 2 * a11;
          int v71 = v175;
          do
          {
            uint64_t v145 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,4u>::kSubblockPositions[v135 + 1];
            uint64_t v146 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,4u>::kSubblockPositions[v135];
            unsigned int v147 = (v138 - 4 * v146) & ~((v138 - 4 * (int)v146) >> 31);
            if (v147 >= 4) {
              unsigned int v147 = 4;
            }
            unsigned int v148 = (v139 - 2 * v145) & ~((v139 - 2 * (int)v145) >> 31);
            if (v148 >= 2) {
              unsigned int v148 = 2;
            }
            if (v147) {
              BOOL v149 = v148 == 0;
            }
            else {
              BOOL v149 = 1;
            }
            if (v149)
            {
              char v144 = 0;
            }
            else
            {
              int8x8_t v140 = &v202[8 * v145 + 2 * v146];
              int16x8_t v141 = v140[1];
              int16x8_t v142 = v140[4];
              int16x8_t v143 = v140[5];
              *unsigned int v136 = *v140;
              v136[1] = v142;
              v136[2] = v141;
              v136[3] = v143;
              v136 += 4;
              char v144 = 63;
            }
            *v137++ = v144;
            v135 += 2;
          }
          while (v135 != 16);
          uint64_t v77 = v170;
          if (v189) {
            goto LABEL_155;
          }
LABEL_27:
          BOOL v21 = v34++ == v178 >> 3;
        }
        while (!v21);
        BOOL v21 = v17++ == v168;
      }
      while (!v21);
    }
  }
}

uint64_t AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, char a12)
{
  uint64_t v175 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v148 = a8;
  unsigned int v133 = a8 + a10 - 1;
  uint64_t v149 = a1;
  if (*(void *)(a1 + 168)) {
    int v17 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v17 = 0;
  }
  unsigned int v18 = a5 - 1;
  unsigned int v19 = a6 - 1;
  unsigned int v20 = a8 >> 3;
  unsigned int v132 = v133 >> 3;
  BOOL v21 = (v17 & 0xD00) == 0 || v17 == 768;
  int v22 = v17 & 0xE00;
  int v24 = !v21 && v22 != 1024;
  int v154 = v24;
  uint64_t result = a1;
  if (*(unsigned char *)(a1 + 232))
  {
    unsigned int v26 = *(unsigned __int8 *)(a1 + 255);
    unsigned int v27 = *(unsigned __int8 *)(a1 + 254);
    char v28 = __clz(v18);
    if (1 << v26 >= a6 || a5 >> v27)
    {
      if (!(a6 >> v26) && 1 << v27 < a5)
      {
        if (a6 < 2) {
          unsigned int v31 = 0;
        }
        else {
          unsigned int v31 = __clz(~(-1 << -(char)__clz(v19))) - 32;
        }
        v27 += v26 + v31;
        unsigned int v26 = -v31;
      }
    }
    else
    {
      unsigned int v29 = 32 - __clz(~(-1 << -v28));
      unsigned int v30 = v27 + v26;
      if (a5 < 2) {
        unsigned int v29 = 0;
      }
      unsigned int v26 = v30 - v29;
      unsigned int v27 = v29;
    }
    if (a5 < 2)
    {
      if (v27) {
        goto LABEL_27;
      }
    }
    else if (32 - __clz(~(-1 << -v28)) < v27)
    {
LABEL_27:
      BOOL v143 = 0;
LABEL_32:
      unsigned int v140 = v27 - 3;
      unsigned int v137 = v26 - 3;
      int v33 = -1 << *(unsigned char *)(*(void *)(a1 + 208) + 48);
      unsigned int v130 = (((~v33 + a5) & v33) + ~(-1 << v27)) >> v27;
      goto LABEL_33;
    }
    if (a6 < 2) {
      unsigned int v32 = 0;
    }
    else {
      unsigned int v32 = 32 - __clz(~(-1 << -(char)__clz(v19)));
    }
    BOOL v143 = v32 >= v26;
    goto LABEL_32;
  }
  BOOL v143 = 0;
  unsigned int v130 = 0;
  unsigned int v137 = 0;
  unsigned int v140 = 0;
LABEL_33:
  if (v20 <= v132)
  {
    unsigned int v142 = a7 + a9 - 1;
    unsigned int v129 = a7 >> 3;
    if (a7 >> 3 <= v142 >> 3)
    {
      unsigned int v152 = v18 >> 3;
      unsigned int v128 = v19 >> 3;
      int v151 = (v18 & 7) + 1;
      int v127 = (v19 & 7) + 1;
      uint32x2_t v34 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0x700000007);
      int8x8_t v35 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v34, 3uLL))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x1000000010, v34));
      __int32 v138 = v35.i32[0] | v35.i32[1];
      int8x8_t v136 = v35;
      BOOL v134 = v35.i32[0] != 0;
      BOOL v135 = v35.i32[1] != 0;
      unsigned int v141 = a7;
      do
      {
        unsigned int v36 = (8 * v20) | 7;
        if (8 * v20 <= v148) {
          int v37 = v148;
        }
        else {
          int v37 = 8 * v20;
        }
        if (v133 < v36) {
          unsigned int v36 = v133;
        }
        int v139 = v37 - 8 * v20;
        int v147 = v36 - v37 + 1;
        unsigned int v38 = v129;
        if (v20 == v128) {
          unsigned int v39 = v127;
        }
        else {
          unsigned int v39 = 8;
        }
        uint64_t v146 = a3 + (v37 - v148) * a11;
        unsigned int v150 = v39;
        do
        {
          unsigned int v40 = 8 * v38;
          unsigned int v41 = 8 * (v38 + 1) - 1;
          if (8 * v38 <= a7) {
            int v42 = a7;
          }
          else {
            int v42 = 8 * v38;
          }
          if (v142 < v41) {
            unsigned int v41 = v142;
          }
          int v43 = v41 - v42 + 1;
          if (v38 == v152) {
            unsigned int v44 = v151;
          }
          else {
            unsigned int v44 = 8;
          }
          BOOL v45 = 1;
          if (8 * v20 >= v148 && v40 >= a7)
          {
            int v46 = v151;
            if (v38 != v152) {
              int v46 = 8;
            }
            BOOL v45 = v43 != v46 || v147 != v39;
          }
          if (v143)
          {
            if (v140 | v137)
            {
              int v48 = 0;
              uint64_t v49 = 0;
              BOOL v50 = v137 != 0;
              int v51 = 1;
              BOOL v53 = v140 != 0;
              unsigned int v52 = v137;
              unsigned int v54 = v140;
              do
              {
                --v54;
                if (v53) {
                  v49 |= (unint64_t)(v38 & ~(-1 << v140) & v51) << v48++;
                }
                else {
                  unsigned int v54 = 0;
                }
                --v52;
                if (v50) {
                  v49 |= (unint64_t)(v20 & ~(-1 << v137) & v51) << v48++;
                }
                else {
                  unsigned int v52 = 0;
                }
                v51 *= 2;
                --v48;
                BOOL v50 = v52 != 0;
                BOOL v53 = v54 != 0;
              }
              while (v52 | v54);
            }
            else
            {
              uint64_t v49 = 0;
            }
            uint64_t v62 = *(void *)(result + 320) * ((v38 >> v140) + (v20 >> v137) * v130) + (v49 << 9);
          }
          else
          {
            if (v138)
            {
              int v55 = 0;
              uint64_t v56 = 0;
              int v57 = 1;
              BOOL v58 = v134;
              BOOL v59 = v135;
              __int32 v61 = v136.i32[0];
              __int32 v60 = v136.i32[1];
              do
              {
                --v60;
                if (v59) {
                  v56 |= (unint64_t)(v57 & v38) << v55++;
                }
                else {
                  __int32 v60 = 0;
                }
                --v61;
                if (v58) {
                  v56 |= (unint64_t)(v57 & v20) << v55++;
                }
                else {
                  __int32 v61 = 0;
                }
                v57 *= 2;
                --v55;
                BOOL v58 = v61 != 0;
                BOOL v59 = v60 != 0;
              }
              while (v61 | v60);
            }
            else
            {
              uint64_t v56 = 0;
            }
            uint64_t v62 = v56 << 9;
          }
          unsigned int v63 = *(_DWORD *)(result + 128) >> (*(unsigned char *)(result + 144) + a12);
          if (v63 <= 1) {
            unsigned int v63 = 1;
          }
          unsigned int v64 = v63 + 7;
          if (v64 < 0x10) {
            unsigned int v65 = 0;
          }
          else {
            unsigned int v65 = 32 - __clz(~(-1 << -(char)__clz((v64 >> 3) - 1)));
          }
          unsigned int v66 = *(_DWORD *)(result + 132) >> (*(unsigned char *)(result + 144) + a12);
          if (v66 <= 1) {
            unsigned int v66 = 1;
          }
          unsigned int v67 = v66 + 7;
          if (v67 < 0x10) {
            unsigned int v68 = 0;
          }
          else {
            unsigned int v68 = 32 - __clz(~(-1 << -(char)__clz((v67 >> 3) - 1)));
          }
          if (v68 | v65)
          {
            int v69 = 0;
            uint64_t v70 = 0;
            BOOL v71 = v65 != 0;
            BOOL v72 = v68 != 0;
            int v73 = 1;
            do
            {
              --v65;
              if (v71) {
                v70 |= (unint64_t)(v73 & v38) << v69++;
              }
              else {
                unsigned int v65 = 0;
              }
              --v68;
              if (v72) {
                v70 |= (unint64_t)(v73 & v20) << v69++;
              }
              else {
                unsigned int v68 = 0;
              }
              v73 *= 2;
              --v69;
              BOOL v72 = v68 != 0;
              BOOL v71 = v65 != 0;
            }
            while (v68 | v65);
          }
          else
          {
            uint64_t v70 = 0;
          }
          int v75 = v44 < 8 || v45;
          int v76 = (unsigned __int8 *)(a4 + 8 * v70);
          unsigned int v74 = v42 - a7;
          uint64_t v77 = v146 + 8 * (v42 - a7);
          uint64_t v78 = (unsigned char *)(a2 + v62);
          if (v39 < 8) {
            int v79 = 1;
          }
          else {
            int v79 = v75;
          }
          __src = v78;
          if (v154)
          {
            if (!v79)
            {
              uint64_t v78 = __dst;
LABEL_123:
              uint64_t v81 = (int16x8_t *)(v146 + 8 * v74);
              uint64_t v82 = a11;
              unint64_t v83 = (unint64_t)v78;
              uint64_t v84 = (char *)(a4 + 8 * v70);
              goto LABEL_157;
            }
            char v80 = v44;
            memcpy(__dst, __src, sizeof(__dst));
            LOBYTE(v44) = v80;
            uint64_t v78 = __dst;
            LOBYTE(v39) = v150;
            uint64_t result = v149;
          }
          else if (!v79)
          {
            goto LABEL_123;
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE7ELj4ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = result;
          int v156 = v78;
          unsigned __int8 v164 = v44;
          unsigned __int8 v165 = v39;
          unsigned int v160 = v139;
          unsigned int v161 = v42 - v40;
          int v157 = v76;
          uint64_t v158 = v77;
          uint64_t v159 = a11;
          unsigned int v162 = v147;
          unsigned int v163 = v43;
          if (v45)
          {
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(result + 8) + 7384), block);
            goto LABEL_158;
          }
          uint64_t v85 = (uint64_t)&v78[AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v167, 64, (uint64_t)v78, *v76)];
          uint64_t v86 = v85
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v169, 64, v85, v76[1]);
          uint64_t v87 = v86
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v168, 64, v86, v76[2]);
          uint64_t v88 = v87
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v170, 64, v87, v76[3]);
          uint64_t v89 = v88
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v171, 64, v88, v76[4]);
          uint64_t v90 = v89
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v173, 64, v89, v76[5]);
          uint64_t v91 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v172, 64, v90, v76[6]);
          AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v174, 64, v90 + v91, v76[7]);
          uint64_t v92 = v162;
          if (v162 && v163)
          {
            uint64_t v93 = 0;
            unint64_t v94 = (unint64_t)v160 << 6;
            uint64_t v95 = 8 * v161;
            uint64_t v96 = &v167[0].i8[v94 + v95];
            uint64_t v97 = v158;
            uint64_t v98 = v159;
            unint64_t v99 = 8 * v163;
            if (v99 <= 1) {
              unint64_t v100 = 1;
            }
            else {
              unint64_t v100 = 8 * v163;
            }
            unint64_t v101 = v94 + v95;
            unint64_t v102 = &v167[0].i8[v94 + v95];
            if (v100) {
              BOOL v103 = (v100 - 1) >> 32 == 0;
            }
            else {
              BOOL v103 = 0;
            }
            char v104 = !v103;
            uint64_t v105 = v100 & 0x7FFFFFFE0;
            uint64_t v106 = v100 & 0x7FFFFFFF8;
            unint64_t v107 = &v167[1].i8[v101];
            unint64_t v108 = (long long *)(v158 + 16);
            unint64_t v109 = v96;
            uint64_t v110 = v158;
            do
            {
              BOOL v111 = (char *)(v97 + v98 * v93);
              char v112 = &v96[64 * v93];
              if ((unint64_t)(&v102[64 * v93] - v111) < 0x20) {
                char v113 = 1;
              }
              else {
                char v113 = v104;
              }
              if (v113)
              {
                int v114 = 0;
                goto LABEL_153;
              }
              if (v100 >= 0x20)
              {
                char v116 = v108;
                unint64_t v117 = v107;
                uint64_t v118 = v100 & 0x7FFFFFFE0;
                do
                {
                  long long v119 = *v116;
                  *((_OWORD *)v117 - 1) = *(v116 - 1);
                  *(_OWORD *)unint64_t v117 = v119;
                  v117 += 32;
                  v116 += 2;
                  v118 -= 32;
                }
                while (v118);
                if (v100 == v105) {
                  goto LABEL_136;
                }
                uint64_t v115 = v100 & 0x7FFFFFFE0;
                if ((v100 & 0x18) == 0)
                {
                  v111 += v105;
                  v112 += v105;
                  int v114 = v100 & 0xFFFFFFE0;
                  goto LABEL_153;
                }
              }
              else
              {
                uint64_t v115 = 0;
              }
              v112 += v106;
              unint64_t v120 = v115 - (v100 & 0x7FFFFFFF8);
              char v121 = (uint64_t *)(v110 + v115);
              int v122 = &v109[v115];
              do
              {
                uint64_t v123 = *v121++;
                *(void *)int v122 = v123;
                v122 += 8;
                v120 += 8;
              }
              while (v120);
              if (v100 == v106) {
                goto LABEL_136;
              }
              v111 += v106;
              int v114 = v100 & 0xFFFFFFF8;
LABEL_153:
              unsigned int v124 = v114 + 1;
              do
              {
                char v125 = *v111++;
                *v112++ = v125;
              }
              while (v99 > v124++);
LABEL_136:
              ++v93;
              v107 += 64;
              unint64_t v108 = (long long *)((char *)v108 + v98);
              v110 += v98;
              v109 += 64;
            }
            while (v93 != v92);
          }
          unint64_t v83 = (unint64_t)v156;
          uint64_t v84 = (char *)v157;
          unsigned int v44 = v164;
          unsigned int v39 = v165;
          uint64_t v81 = v167;
          uint64_t v82 = 64;
LABEL_157:
          AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v81, v82, v83, v84, v44, v39);
LABEL_158:
          a7 = v141;
          if (v154) {
            memcpy(__src, v78, 0x200uLL);
          }
          BOOL v21 = v38++ == v142 >> 3;
          uint64_t result = v149;
          unsigned int v39 = v150;
        }
        while (!v21);
        BOOL v21 = v20++ == v132;
      }
      while (!v21);
    }
  }
  return result;
}

uint64_t AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, char a12)
{
  uint64_t v210 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v185 = a8;
  unsigned int v167 = a8 + a10 - 1;
  uint64_t v186 = a1;
  if (*(void *)(a1 + 168)) {
    int v17 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v17 = 0;
  }
  unsigned int v18 = a5 - 1;
  unsigned int v19 = a6 - 1;
  unsigned int v20 = a8 >> 3;
  unsigned int v166 = v167 >> 3;
  BOOL v21 = (v17 & 0xD00) == 0 || v17 == 768;
  int v22 = v17 & 0xE00;
  int v24 = !v21 && v22 != 1024;
  int v189 = v24;
  uint64_t result = a1;
  if (*(unsigned char *)(a1 + 232))
  {
    unsigned int v26 = *(unsigned __int8 *)(a1 + 255);
    unsigned int v27 = *(unsigned __int8 *)(a1 + 254);
    char v28 = __clz(v18);
    if (1 << v26 >= a6 || a5 >> v27)
    {
      if (!(a6 >> v26) && 1 << v27 < a5)
      {
        if (a6 < 2) {
          unsigned int v31 = 0;
        }
        else {
          unsigned int v31 = __clz(~(-1 << -(char)__clz(v19))) - 32;
        }
        v27 += v26 + v31;
        unsigned int v26 = -v31;
      }
    }
    else
    {
      unsigned int v29 = 32 - __clz(~(-1 << -v28));
      unsigned int v30 = v27 + v26;
      if (a5 < 2) {
        unsigned int v29 = 0;
      }
      unsigned int v26 = v30 - v29;
      unsigned int v27 = v29;
    }
    if (a5 < 2)
    {
      if (v27) {
        goto LABEL_27;
      }
    }
    else if (32 - __clz(~(-1 << -v28)) < v27)
    {
LABEL_27:
      BOOL v180 = 0;
LABEL_32:
      unsigned int v176 = v27 - 3;
      unsigned int v171 = v26 - 3;
      int v33 = -1 << *(unsigned char *)(*(void *)(a1 + 208) + 48);
      unsigned int v164 = (((~v33 + a5) & v33) + ~(-1 << v27)) >> v27;
      goto LABEL_33;
    }
    if (a6 < 2) {
      unsigned int v32 = 0;
    }
    else {
      unsigned int v32 = 32 - __clz(~(-1 << -(char)__clz(v19)));
    }
    BOOL v180 = v32 >= v26;
    goto LABEL_32;
  }
  BOOL v180 = 0;
  unsigned int v164 = 0;
  unsigned int v171 = 0;
  unsigned int v176 = 0;
LABEL_33:
  if (v20 <= v166)
  {
    unsigned int v179 = a7 + a9 - 1;
    unsigned int v163 = a7 >> 3;
    if (a7 >> 3 <= v179 >> 3)
    {
      unsigned int v188 = v18 >> 3;
      unsigned int v162 = v19 >> 3;
      int v187 = (v18 & 7) + 1;
      int v161 = (v19 & 7) + 1;
      int v160 = ~(-1 << v171);
      uint32x2_t v34 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0x700000007);
      int8x8_t v35 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v34, 3uLL))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x1000000010, v34));
      __int32 v174 = v35.i32[0] | v35.i32[1];
      int8x8_t v170 = v35;
      BOOL v169 = v35.i32[1] != 0;
      uint64_t v36 = a11;
      BOOL v168 = v35.i32[0] != 0;
      uint64_t v37 = 2 * a11;
      unsigned int v178 = a7;
      do
      {
        unsigned int v38 = (8 * v20) | 7;
        if (8 * v20 <= v185) {
          int v39 = v185;
        }
        else {
          int v39 = 8 * v20;
        }
        if (v167 < v38) {
          unsigned int v38 = v167;
        }
        int v175 = v39 - 8 * v20;
        int v184 = v38 - v39 + 1;
        unsigned int v40 = v163;
        if (v20 == v162) {
          unsigned int v41 = v161;
        }
        else {
          unsigned int v41 = 8;
        }
        int v42 = v20 & v160;
        uint64_t v183 = a3 + (v39 - v185) * v36;
        do
        {
          unsigned int v43 = 8 * v40;
          unsigned int v44 = 8 * (v40 + 1) - 1;
          if (8 * v40 <= a7) {
            int v45 = a7;
          }
          else {
            int v45 = 8 * v40;
          }
          if (v179 < v44) {
            unsigned int v44 = v179;
          }
          int v46 = v44 - v45 + 1;
          if (v40 == v188) {
            unsigned int v47 = v187;
          }
          else {
            unsigned int v47 = 8;
          }
          BOOL v48 = 1;
          if (8 * v20 >= v185 && v43 >= a7)
          {
            int v49 = v187;
            if (v40 != v188) {
              int v49 = 8;
            }
            BOOL v48 = v46 != v49 || v184 != v41;
          }
          if (v180)
          {
            if (v176 | v171)
            {
              int v51 = 0;
              uint64_t v52 = 0;
              BOOL v53 = v171 != 0;
              int v54 = 1;
              BOOL v56 = v176 != 0;
              unsigned int v55 = v171;
              unsigned int v57 = v176;
              do
              {
                --v57;
                if (v56) {
                  v52 |= (unint64_t)(v40 & ~(-1 << v176) & v54) << v51++;
                }
                else {
                  unsigned int v57 = 0;
                }
                --v55;
                if (v53) {
                  v52 |= (unint64_t)(v42 & v54) << v51++;
                }
                else {
                  unsigned int v55 = 0;
                }
                v54 *= 2;
                --v51;
                BOOL v53 = v55 != 0;
                BOOL v56 = v57 != 0;
              }
              while (v55 | v57);
            }
            else
            {
              uint64_t v52 = 0;
            }
            uint64_t v65 = *(void *)(result + 320) * ((v40 >> v176) + (v20 >> v171) * v164) + (v52 << 9);
          }
          else
          {
            if (v174)
            {
              int v58 = 0;
              uint64_t v59 = 0;
              int v60 = 1;
              BOOL v61 = v168;
              BOOL v62 = v169;
              __int32 v64 = v170.i32[0];
              __int32 v63 = v170.i32[1];
              do
              {
                --v63;
                if (v62) {
                  v59 |= (unint64_t)(v60 & v40) << v58++;
                }
                else {
                  __int32 v63 = 0;
                }
                --v64;
                if (v61) {
                  v59 |= (unint64_t)(v60 & v20) << v58++;
                }
                else {
                  __int32 v64 = 0;
                }
                v60 *= 2;
                --v58;
                BOOL v61 = v64 != 0;
                BOOL v62 = v63 != 0;
              }
              while (v64 | v63);
            }
            else
            {
              uint64_t v59 = 0;
            }
            uint64_t v65 = v59 << 9;
          }
          unsigned int v66 = *(_DWORD *)(result + 128) >> (*(unsigned char *)(result + 144) + a12);
          if (v66 <= 1) {
            unsigned int v66 = 1;
          }
          unsigned int v67 = v66 + 7;
          if (v67 < 0x10) {
            unsigned int v68 = 0;
          }
          else {
            unsigned int v68 = 32 - __clz(~(-1 << -(char)__clz((v67 >> 3) - 1)));
          }
          unsigned int v69 = *(_DWORD *)(result + 132) >> (*(unsigned char *)(result + 144) + a12);
          if (v69 <= 1) {
            unsigned int v69 = 1;
          }
          unsigned int v70 = v69 + 7;
          if (v70 < 0x10)
          {
            unsigned int v71 = 0;
            if (!v68)
            {
LABEL_111:
              uint64_t v73 = 0;
              goto LABEL_112;
            }
          }
          else
          {
            unsigned int v71 = 32 - __clz(~(-1 << -(char)__clz((v70 >> 3) - 1)));
            if (!(v71 | v68)) {
              goto LABEL_111;
            }
          }
          int v72 = 0;
          uint64_t v73 = 0;
          BOOL v74 = v68 != 0;
          BOOL v75 = v71 != 0;
          int v76 = 1;
          do
          {
            --v68;
            if (v74) {
              v73 |= (unint64_t)(v76 & v40) << v72++;
            }
            else {
              unsigned int v68 = 0;
            }
            --v71;
            if (v75) {
              v73 |= (unint64_t)(v76 & v20) << v72++;
            }
            else {
              unsigned int v71 = 0;
            }
            v76 *= 2;
            --v72;
            BOOL v75 = v71 != 0;
            BOOL v74 = v68 != 0;
          }
          while (v71 | v68);
LABEL_112:
          unsigned int v77 = v45 - a7;
          int v78 = v47 < 8 || v48;
          int v79 = (unsigned __int8 *)(a4 + 8 * v73);
          uint64_t v80 = v183 + 8 * v77;
          uint64_t v81 = (void *)(a2 + v65);
          if (v41 < 8) {
            int v82 = 1;
          }
          else {
            int v82 = v78;
          }
          if (v189)
          {
            if (!v82)
            {
              uint64_t v86 = __dst;
LABEL_125:
              uint64_t v88 = 0;
              uint64_t v89 = v86;
              do
              {
                uint64_t v97 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,4u>::kSubblockPositions[v88 + 1];
                uint64_t v98 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,4u>::kSubblockPositions[v88];
                unsigned int v99 = (v47 - 4 * v98) & ~((int)(v47 - 4 * v98) >> 31);
                if (v99 >= 4) {
                  unsigned int v99 = 4;
                }
                unsigned int v100 = (v41 - 2 * v97) & ~((int)(v41 - 2 * v97) >> 31);
                if (v100 >= 2) {
                  unsigned int v100 = 2;
                }
                if (v99) {
                  BOOL v101 = v100 == 0;
                }
                else {
                  BOOL v101 = 1;
                }
                if (v101)
                {
                  char v96 = 0;
                }
                else
                {
                  uint64_t v90 = (long long *)(v80 + v37 * v97 + 32 * v98);
                  long long v91 = *v90;
                  long long v92 = v90[1];
                  uint64_t v93 = (long long *)((char *)v90 + v36);
                  long long v94 = *v93;
                  long long v95 = v93[1];
                  *uint64_t v89 = v91;
                  v89[1] = v94;
                  v89[2] = v92;
                  v89[3] = v95;
                  v89 += 4;
                  char v96 = 63;
                }
                *v79++ = v96;
                v88 += 2;
              }
              while (v88 != 16);
              a7 = v178;
LABEL_138:
              unsigned int v102 = v40 + 1;
              if (v189) {
                goto LABEL_47;
              }
              goto LABEL_48;
            }
            unint64_t v83 = v81;
            int v84 = v46;
            BOOL v172 = v48;
            int v85 = v45;
            memcpy(__dst, v81, sizeof(__dst));
            int v45 = v85;
            BOOL v48 = v172;
            unsigned int v43 = 8 * v40;
            int v46 = v84;
            uint64_t v86 = __dst;
            uint64_t v81 = v83;
            int v42 = v20 & v160;
            uint64_t v36 = a11;
            uint64_t result = v186;
          }
          else
          {
            uint64_t v86 = v81;
            if (!v82) {
              goto LABEL_125;
            }
          }
          unsigned int v177 = v81;
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE7ELj4ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = result;
          float64x2_t v191 = (int16x8_t *)v86;
          unsigned __int8 v199 = v47;
          unsigned __int8 v200 = v41;
          unsigned int v195 = v175;
          unsigned int v196 = v45 - v43;
          float64x2_t v192 = v79;
          uint64_t v193 = v80;
          uint64_t v194 = v36;
          unsigned int v197 = v184;
          unsigned int v198 = v46;
          if (v48)
          {
            uint64_t v87 = v86;
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(result + 8) + 7384), block);
            uint64_t v86 = v87;
            uint64_t v36 = a11;
            uint64_t result = v186;
            a7 = v178;
            uint64_t v81 = v177;
            uint64_t v37 = 2 * a11;
            goto LABEL_138;
          }
          BOOL v173 = v86;
          uint64_t v103 = (uint64_t)&v86[AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v202, 64, (uint64_t)v86, *v79)];
          uint64_t v104 = v103
               + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v204, 64, v103, v79[1]);
          uint64_t v105 = v104
               + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v203, 64, v104, v79[2]);
          uint64_t v106 = v105
               + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v205, 64, v105, v79[3]);
          uint64_t v107 = v106
               + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v206, 64, v106, v79[4]);
          uint64_t v108 = v107
               + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v208, 64, v107, v79[5]);
          uint64_t v109 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v207, 64, v108, v79[6]);
          AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v209, 64, v108 + v109, v79[7]);
          uint64_t v110 = v197;
          if (v197 && v198)
          {
            uint64_t v111 = 0;
            unint64_t v112 = (unint64_t)v195 << 6;
            uint64_t v113 = 8 * v196;
            int v114 = &v202[0].i8[v112 + v113];
            uint64_t v115 = v193;
            uint64_t v116 = v194;
            unint64_t v117 = 8 * v198;
            if (v117 <= 1) {
              unint64_t v118 = 1;
            }
            else {
              unint64_t v118 = 8 * v198;
            }
            unint64_t v119 = v112 + v113;
            unint64_t v120 = &v202[0].i8[v112 + v113];
            if (v118) {
              BOOL v121 = (v118 - 1) >> 32 == 0;
            }
            else {
              BOOL v121 = 0;
            }
            char v122 = !v121;
            uint64_t v123 = v118 & 0x7FFFFFFE0;
            uint64_t v124 = v118 & 0x7FFFFFFF8;
            char v125 = &v202[1].i8[v119];
            uint64_t v126 = (long long *)(v193 + 16);
            int v127 = v114;
            uint64_t v128 = v193;
            do
            {
              unsigned int v129 = (char *)(v115 + v116 * v111);
              unsigned int v130 = &v114[64 * v111];
              if ((unint64_t)(&v120[64 * v111] - v129) < 0x20) {
                char v131 = 1;
              }
              else {
                char v131 = v122;
              }
              if (v131)
              {
                int v132 = 0;
                goto LABEL_169;
              }
              if (v118 >= 0x20)
              {
                BOOL v134 = v126;
                BOOL v135 = v125;
                uint64_t v136 = v118 & 0x7FFFFFFE0;
                do
                {
                  long long v137 = *v134;
                  *((_OWORD *)v135 - 1) = *(v134 - 1);
                  *(_OWORD *)BOOL v135 = v137;
                  v135 += 32;
                  v134 += 2;
                  v136 -= 32;
                }
                while (v136);
                if (v118 == v123) {
                  goto LABEL_152;
                }
                uint64_t v133 = v118 & 0x7FFFFFFE0;
                if ((v118 & 0x18) == 0)
                {
                  v129 += v123;
                  v130 += v123;
                  int v132 = v118 & 0xFFFFFFE0;
                  goto LABEL_169;
                }
              }
              else
              {
                uint64_t v133 = 0;
              }
              v130 += v124;
              unint64_t v138 = v133 - (v118 & 0x7FFFFFFF8);
              int v139 = (uint64_t *)(v128 + v133);
              unsigned int v140 = &v127[v133];
              do
              {
                uint64_t v141 = *v139++;
                *(void *)unsigned int v140 = v141;
                v140 += 8;
                v138 += 8;
              }
              while (v138);
              if (v118 == v124) {
                goto LABEL_152;
              }
              v129 += v124;
              int v132 = v118 & 0xFFFFFFF8;
LABEL_169:
              unsigned int v142 = v132 + 1;
              do
              {
                char v143 = *v129++;
                *v130++ = v143;
              }
              while (v117 > v142++);
LABEL_152:
              ++v111;
              v125 += 64;
              uint64_t v126 = (long long *)((char *)v126 + v116);
              v128 += v116;
              v127 += 64;
            }
            while (v111 != v110);
          }
          uint64_t v145 = 0;
          uint64_t v146 = v191;
          int v147 = (char *)v192;
          int v148 = v199;
          int v149 = v200;
          a7 = v178;
          uint64_t v36 = a11;
          uint64_t result = v186;
          unsigned int v102 = v40 + 1;
          uint64_t v86 = v173;
          do
          {
            uint64_t v155 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,4u>::kSubblockPositions[v145 + 1];
            uint64_t v156 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,4u>::kSubblockPositions[v145];
            unsigned int v157 = (v148 - 4 * v156) & ~((v148 - 4 * (int)v156) >> 31);
            if (v157 >= 4) {
              unsigned int v157 = 4;
            }
            unsigned int v158 = (v149 - 2 * v155) & ~((v149 - 2 * (int)v155) >> 31);
            if (v158 >= 2) {
              unsigned int v158 = 2;
            }
            if (v157) {
              BOOL v159 = v158 == 0;
            }
            else {
              BOOL v159 = 1;
            }
            if (v159)
            {
              char v154 = 0;
            }
            else
            {
              unsigned int v150 = &v202[8 * v155 + 2 * v156];
              int16x8_t v151 = v150[1];
              int16x8_t v152 = v150[4];
              int16x8_t v153 = v150[5];
              *uint64_t v146 = *v150;
              v146[1] = v152;
              v146[2] = v151;
              v146[3] = v153;
              v146 += 4;
              char v154 = 63;
            }
            *v147++ = v154;
            v145 += 2;
          }
          while (v145 != 16);
          uint64_t v81 = v177;
          uint64_t v37 = 2 * a11;
          if (v189)
          {
LABEL_47:
            memcpy(v81, v86, 0x200uLL);
            uint64_t v37 = 2 * a11;
            uint64_t v36 = a11;
            uint64_t result = v186;
          }
LABEL_48:
          BOOL v21 = v40 == v179 >> 3;
          unsigned int v40 = v102;
        }
        while (!v21);
        BOOL v21 = v20++ == v166;
      }
      while (!v21);
    }
  }
  return result;
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, int a12)
{
  uint64_t v176 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  uint64_t v17 = a1;
  unsigned int v150 = a8;
  unsigned int v18 = a8 >> 3;
  unsigned int v134 = a8 + a10 - 1;
  unsigned int v136 = v134 >> 3;
  unsigned int v19 = *(unsigned __int8 *)(*(void *)(a1 + 208) + 88);
  unsigned int v20 = *(_DWORD *)(a1 + 112);
  uint64_t v151 = v17;
  if (*(void *)(v17 + 168))
  {
    __int16 CacheMode = IOSurfaceGetCacheMode();
    uint64_t v17 = v151;
    int v22 = CacheMode & 0xF00;
  }
  else
  {
    int v22 = 0;
  }
  BOOL v23 = (v22 & 0xD00) == 0 || v22 == 768;
  int v24 = v22 & 0xE00;
  int v26 = !v23 && v24 != 1024;
  int v155 = v26;
  BOOL isLevelTiled = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::isLevelTiled(v17, *(_DWORD *)(v17 + 144) + a12);
  uint64_t v28 = v151;
  BOOL v144 = isLevelTiled;
  if (v18 <= v136)
  {
    unsigned int v143 = a7 + a9 - 1;
    unsigned int v133 = a7 >> 3;
    if (a7 >> 3 <= v143 >> 3)
    {
      unsigned int v130 = a5 - 1;
      unsigned int v132 = (a6 - 1) >> 3;
      int v153 = ((a5 - 1) & 7) + 1;
      unsigned int v154 = (a5 - 1) >> 3;
      int v131 = ((a6 - 1) & 7) + 1;
      uint32x2_t v29 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0x700000007);
      int8x8_t v30 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v29, 3uLL))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x1000000010, v29));
      __int32 v141 = v30.i32[0] | v30.i32[1];
      int8x8_t v140 = v30;
      BOOL v138 = v30.i32[0] != 0;
      BOOL v139 = v30.i32[1] != 0;
      unint64_t v129 = 8 * v20 * (unint64_t)v19;
      unsigned int v142 = a7;
      do
      {
        unsigned int v31 = (8 * v18) | 7;
        if (8 * v18 <= v150) {
          int v32 = v150;
        }
        else {
          int v32 = 8 * v18;
        }
        unsigned int v33 = v133;
        if (v134 < v31) {
          unsigned int v31 = v134;
        }
        int v137 = v32 - 8 * v18;
        int v148 = v31 - v32 + 1;
        unsigned int v149 = 8 * v18;
        if (v18 == v132) {
          unsigned int v34 = v131;
        }
        else {
          unsigned int v34 = 8;
        }
        uint64_t v147 = a3 + (v32 - v150) * a11;
        unsigned int v152 = v34;
        do
        {
          unsigned int v35 = 8 * v33;
          unsigned int v36 = 8 * (v33 + 1) - 1;
          if (8 * v33 <= a7) {
            int v37 = a7;
          }
          else {
            int v37 = 8 * v33;
          }
          if (v143 < v36) {
            unsigned int v36 = v143;
          }
          int v38 = v36 - v37 + 1;
          if (v33 == v154) {
            unsigned int v39 = v153;
          }
          else {
            unsigned int v39 = 8;
          }
          BOOL v40 = 1;
          if (v149 >= v150 && v35 >= a7)
          {
            int v41 = v153;
            if (v33 != v154) {
              int v41 = 8;
            }
            BOOL v40 = v38 != v41 || v148 != v34;
          }
          if (v144)
          {
            unsigned int v62 = 0;
            uint64_t v63 = v129 >> (*(unsigned char *)(v28 + 57) != 0);
            char v64 = 1;
            if (v63 > 127)
            {
              if (v63 > 511)
              {
                if (v63 == 512)
                {
                  char v64 = 0;
                  char v65 = 0;
                  unsigned int v62 = 16;
                  unsigned int v66 = 16;
                }
                else
                {
                  char v65 = 1;
                  unsigned int v66 = 0;
                  if (v63 == 1024)
                  {
                    char v64 = 0;
                    unsigned int v66 = 8;
                    unsigned int v62 = 16;
                  }
                }
              }
              else if (v63 == 128)
              {
                char v64 = 0;
                char v65 = 0;
                unsigned int v62 = 32;
                unsigned int v66 = 32;
              }
              else
              {
                char v65 = 1;
                unsigned int v66 = 0;
                if (v63 == 256)
                {
                  char v64 = 0;
                  char v65 = 0;
                  unsigned int v66 = 16;
                  unsigned int v62 = 32;
                }
              }
            }
            else
            {
              char v65 = 1;
              unsigned int v66 = 0;
              switch(v63)
              {
                case 4:
                  char v64 = 0;
                  char v65 = 0;
                  unsigned int v66 = 128;
                  unsigned int v62 = 256;
                  break;
                case 5:
                case 6:
                case 7:
                case 9:
                case 10:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 17:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                  break;
                case 8:
                  char v64 = 0;
                  char v65 = 0;
                  unsigned int v62 = 128;
                  unsigned int v66 = 128;
                  break;
                case 16:
                  char v64 = 0;
                  char v65 = 0;
                  unsigned int v66 = 64;
                  unsigned int v62 = 128;
                  break;
                case 32:
                  char v64 = 0;
                  char v65 = 0;
                  unsigned int v62 = 64;
                  unsigned int v66 = 64;
                  break;
                default:
                  if (v63 == 64)
                  {
                    char v64 = 0;
                    char v65 = 0;
                    unsigned int v66 = 32;
                    unsigned int v62 = 64;
                  }
                  break;
              }
            }
            unsigned int v118 = (v62 >> 3) - 1;
            if (v64) {
              unsigned int v119 = 0;
            }
            else {
              unsigned int v119 = 32 - __clz(~(-1 << -(char)__clz(v118)));
            }
            unsigned int v120 = (v66 >> 3) - 1;
            if (v65)
            {
              unsigned int v121 = 0;
              if (v119) {
                goto LABEL_149;
              }
            }
            else
            {
              unsigned int v121 = 32 - __clz(~(-1 << -(char)__clz(v120)));
              if (v121 | v119)
              {
LABEL_149:
                int v122 = 0;
                uint64_t v123 = 0;
                int v124 = v33 & v118;
                int v125 = v18 & v120;
                BOOL v126 = v119 != 0;
                BOOL v127 = v121 != 0;
                int v128 = 1;
                do
                {
                  --v119;
                  if (v126) {
                    v123 |= (unint64_t)(v128 & v124) << v122++;
                  }
                  else {
                    unsigned int v119 = 0;
                  }
                  --v121;
                  if (v127) {
                    v123 |= (unint64_t)(v128 & v125) << v122++;
                  }
                  else {
                    unsigned int v121 = 0;
                  }
                  v128 *= 2;
                  --v122;
                  BOOL v127 = v121 != 0;
                  BOOL v126 = v119 != 0;
                }
                while (v121 | v119);
                goto LABEL_161;
              }
            }
            uint64_t v123 = 0;
LABEL_161:
            unint64_t v50 = ((unint64_t)(v35 / v62 + v149 / v66 * ((v62 + v130) / v62)) << 14) + (v123 << 9);
            goto LABEL_59;
          }
          if (v141)
          {
            int v43 = 0;
            uint64_t v44 = 0;
            int v45 = 1;
            BOOL v46 = v138;
            BOOL v47 = v139;
            __int32 v49 = v140.i32[0];
            __int32 v48 = v140.i32[1];
            do
            {
              --v48;
              if (v47) {
                v44 |= (unint64_t)(v45 & v33) << v43++;
              }
              else {
                __int32 v48 = 0;
              }
              --v49;
              if (v46) {
                v44 |= (unint64_t)(v45 & v18) << v43++;
              }
              else {
                __int32 v49 = 0;
              }
              v45 *= 2;
              --v43;
              BOOL v46 = v49 != 0;
              BOOL v47 = v48 != 0;
            }
            while (v49 | v48);
          }
          else
          {
            uint64_t v44 = 0;
          }
          unint64_t v50 = v44 << 9;
LABEL_59:
          unsigned int v51 = *(_DWORD *)(v28 + 128) >> (*(unsigned char *)(v28 + 144) + a12);
          if (v51 <= 1) {
            unsigned int v51 = 1;
          }
          unsigned int v52 = v51 + 7;
          if (v52 < 0x10) {
            unsigned int v53 = 0;
          }
          else {
            unsigned int v53 = 32 - __clz(~(-1 << -(char)__clz((v52 >> 3) - 1)));
          }
          unsigned int v54 = *(_DWORD *)(v28 + 132) >> (*(unsigned char *)(v28 + 144) + a12);
          if (v54 <= 1) {
            unsigned int v54 = 1;
          }
          unsigned int v55 = v54 + 7;
          if (v55 < 0x10)
          {
            unsigned int v56 = 0;
            if (!v53)
            {
LABEL_81:
              uint64_t v58 = 0;
              goto LABEL_82;
            }
          }
          else
          {
            unsigned int v56 = 32 - __clz(~(-1 << -(char)__clz((v55 >> 3) - 1)));
            if (!(v56 | v53)) {
              goto LABEL_81;
            }
          }
          int v57 = 0;
          uint64_t v58 = 0;
          BOOL v59 = v53 != 0;
          BOOL v60 = v56 != 0;
          int v61 = 1;
          do
          {
            --v53;
            if (v59) {
              v58 |= (unint64_t)(v61 & v33) << v57++;
            }
            else {
              unsigned int v53 = 0;
            }
            --v56;
            if (v60) {
              v58 |= (unint64_t)(v61 & v18) << v57++;
            }
            else {
              unsigned int v56 = 0;
            }
            v61 *= 2;
            --v57;
            BOOL v60 = v56 != 0;
            BOOL v59 = v53 != 0;
          }
          while (v56 | v53);
LABEL_82:
          int v67 = v39 < 8 || v40;
          unsigned int v68 = (char *)(a4 + 8 * v58);
          unint64_t v69 = v147 + 8 * (v37 - a7);
          unsigned int v70 = (void *)(a2 + v50);
          if (v34 < 8) {
            int v71 = 1;
          }
          else {
            int v71 = v67;
          }
          if (v155)
          {
            if (!v71)
            {
              BOOL v75 = __dst;
LABEL_95:
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock(v69, a11, (unint64_t)v75, v68, v39, v34);
              a7 = v142;
              goto LABEL_129;
            }
            char v72 = v39;
            int v73 = v38;
            int v74 = v37;
            memcpy(__dst, v70, sizeof(__dst));
            int v37 = v74;
            BOOL v75 = __dst;
            int v38 = v73;
            unsigned int v35 = 8 * v33;
            LOBYTE(v39) = v72;
            LOBYTE(v34) = v152;
            uint64_t v28 = v151;
          }
          else
          {
            BOOL v75 = v70;
            if (!v71) {
              goto LABEL_95;
            }
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE7ELj4ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = v28;
          unsigned int v157 = v75;
          unsigned __int8 v165 = v39;
          unsigned __int8 v166 = v34;
          unsigned int v161 = v137;
          unsigned int v162 = v37 - v35;
          unsigned int v158 = v68;
          unint64_t v159 = v69;
          uint64_t v160 = a11;
          unsigned int v163 = v148;
          unsigned int v164 = v38;
          if (v40)
          {
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(v28 + 8) + 7384), block);
            a7 = v142;
            goto LABEL_129;
          }
          uint64_t v76 = (uint64_t)&v75[AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v168, 64, (uint64_t)v75, *v68)];
          uint64_t v77 = v76
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v170, 64, v76, v68[1]);
          uint64_t v78 = v77
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v169, 64, v77, v68[2]);
          uint64_t v79 = v78
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v171, 64, v78, v68[3]);
          uint64_t v80 = v79
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v172, 64, v79, v68[4]);
          uint64_t v81 = v80
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v174, 64, v80, v68[5]);
          uint64_t v82 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v173, 64, v81, v68[6]);
          AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v175, 64, v81 + v82, v68[7]);
          uint64_t v83 = v163;
          a7 = v142;
          if (v163 && v164)
          {
            uint64_t v84 = 0;
            unint64_t v85 = (unint64_t)v161 << 6;
            uint64_t v86 = 8 * v162;
            uint64_t v87 = &v168[0].i8[v85 + v86];
            unint64_t v88 = v159;
            uint64_t v89 = v160;
            unint64_t v90 = 8 * v164;
            if (v90 <= 1) {
              unint64_t v91 = 1;
            }
            else {
              unint64_t v91 = 8 * v164;
            }
            unint64_t v92 = v85 + v86;
            uint64_t v93 = &v168[0].i8[v85 + v86];
            if (v91) {
              BOOL v94 = (v91 - 1) >> 32 == 0;
            }
            else {
              BOOL v94 = 0;
            }
            char v95 = !v94;
            uint64_t v96 = v91 & 0x7FFFFFFE0;
            uint64_t v97 = v91 & 0x7FFFFFFF8;
            uint64_t v98 = &v168[1].i8[v92];
            unsigned int v99 = (long long *)(v159 + 16);
            unsigned int v100 = v87;
            unint64_t v101 = v159;
            do
            {
              unsigned int v102 = (char *)(v88 + v89 * v84);
              uint64_t v103 = &v87[64 * v84];
              if ((unint64_t)(&v93[64 * v84] - v102) < 0x20) {
                char v104 = 1;
              }
              else {
                char v104 = v95;
              }
              if (v104)
              {
                int v105 = 0;
                goto LABEL_125;
              }
              if (v91 >= 0x20)
              {
                uint64_t v107 = v99;
                uint64_t v108 = v98;
                uint64_t v109 = v91 & 0x7FFFFFFE0;
                do
                {
                  long long v110 = *v107;
                  *((_OWORD *)v108 - 1) = *(v107 - 1);
                  *(_OWORD *)uint64_t v108 = v110;
                  v108 += 32;
                  v107 += 2;
                  v109 -= 32;
                }
                while (v109);
                if (v91 == v96) {
                  goto LABEL_108;
                }
                uint64_t v106 = v91 & 0x7FFFFFFE0;
                if ((v91 & 0x18) == 0)
                {
                  v102 += v96;
                  v103 += v96;
                  int v105 = v91 & 0xFFFFFFE0;
                  goto LABEL_125;
                }
              }
              else
              {
                uint64_t v106 = 0;
              }
              v103 += v97;
              unint64_t v111 = v106 - (v91 & 0x7FFFFFFF8);
              unint64_t v112 = (uint64_t *)(v101 + v106);
              uint64_t v113 = &v100[v106];
              do
              {
                uint64_t v114 = *v112++;
                *(void *)uint64_t v113 = v114;
                v113 += 8;
                v111 += 8;
              }
              while (v111);
              if (v91 == v97) {
                goto LABEL_108;
              }
              v102 += v97;
              int v105 = v91 & 0xFFFFFFF8;
LABEL_125:
              unsigned int v115 = v105 + 1;
              do
              {
                char v116 = *v102++;
                *v103++ = v116;
              }
              while (v90 > v115++);
LABEL_108:
              ++v84;
              v98 += 64;
              unsigned int v99 = (long long *)((char *)v99 + v89);
              v101 += v89;
              v100 += 64;
            }
            while (v84 != v83);
          }
          AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v168, 64, (unint64_t)v157, v158, v165, v166);
LABEL_129:
          if (v155) {
            memcpy(v70, v75, 0x200uLL);
          }
          BOOL v23 = v33++ == v143 >> 3;
          uint64_t v28 = v151;
          unsigned int v34 = v152;
        }
        while (!v23);
        BOOL v23 = v18++ == v136;
      }
      while (!v23);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, int a12)
{
  uint64_t v210 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v185 = a8;
  unsigned int v17 = a8 >> 3;
  unsigned int v166 = a8 + a10 - 1;
  unsigned int v168 = v166 >> 3;
  unsigned int v18 = *(unsigned __int8 *)(*(void *)(a1 + 208) + 88);
  unsigned int v19 = *(_DWORD *)(a1 + 112);
  uint64_t v186 = a1;
  if (*(void *)(a1 + 168)) {
    int v20 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v20 = 0;
  }
  BOOL v21 = (v20 & 0xD00) == 0 || v20 == 768;
  int v22 = v20 & 0xE00;
  int v24 = !v21 && v22 != 1024;
  int v189 = v24;
  BOOL isLevelTiled = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::isLevelTiled(a1, *(_DWORD *)(a1 + 144) + a12);
  uint64_t v26 = a1;
  BOOL v179 = isLevelTiled;
  if (v17 <= v168)
  {
    unsigned int v178 = a7 + a9 - 1;
    unsigned int v165 = a7 >> 3;
    if (a7 >> 3 <= v178 >> 3)
    {
      unsigned int v162 = a5 - 1;
      unsigned int v188 = (a5 - 1) >> 3;
      int v187 = ((a5 - 1) & 7) + 1;
      int v163 = ((a6 - 1) & 7) + 1;
      unsigned int v164 = (a6 - 1) >> 3;
      unint64_t v27 = v19 * (unint64_t)v18;
      uint32x2_t v28 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0x700000007);
      int8x8_t v29 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v28, 3uLL))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x1000000010, v28));
      __int32 v176 = v29.i32[0] | v29.i32[1];
      int8x8_t v174 = v29;
      BOOL v172 = v29.i32[0] != 0;
      BOOL v173 = v29.i32[1] != 0;
      uint64_t v30 = a11;
      unint64_t v161 = 8 * v27;
      uint64_t v31 = 2 * a11;
      unsigned int v177 = a7;
      do
      {
        unsigned int v32 = (8 * v17) | 7;
        if (8 * v17 <= v185) {
          int v33 = v185;
        }
        else {
          int v33 = 8 * v17;
        }
        unsigned int v34 = v165;
        if (v166 < v32) {
          unsigned int v32 = v166;
        }
        int v171 = v33 - 8 * v17;
        int v183 = v32 - v33 + 1;
        unsigned int v184 = 8 * v17;
        if (v17 == v164) {
          unsigned int v35 = v163;
        }
        else {
          unsigned int v35 = 8;
        }
        uint64_t v182 = a3 + (v33 - v185) * v30;
        unsigned int v169 = v35;
        do
        {
          unsigned int v36 = 8 * v34;
          unsigned int v37 = 8 * (v34 + 1) - 1;
          if (8 * v34 <= a7) {
            int v38 = a7;
          }
          else {
            int v38 = 8 * v34;
          }
          if (v178 < v37) {
            unsigned int v37 = v178;
          }
          int v39 = v37 - v38 + 1;
          if (v34 == v188) {
            unsigned int v40 = v187;
          }
          else {
            unsigned int v40 = 8;
          }
          BOOL v41 = 1;
          if (v184 >= v185 && v36 >= a7)
          {
            int v42 = v187;
            if (v34 != v188) {
              int v42 = 8;
            }
            BOOL v41 = v39 != v42 || v183 != v35;
          }
          if (v179)
          {
            unsigned int v63 = 0;
            uint64_t v64 = v161 >> (*(unsigned char *)(v26 + 57) != 0);
            char v65 = 1;
            if (v64 > 127)
            {
              if (v64 > 511)
              {
                if (v64 == 512)
                {
                  char v65 = 0;
                  char v66 = 0;
                  unsigned int v63 = 16;
                  unsigned int v67 = 16;
                }
                else
                {
                  char v66 = 1;
                  unsigned int v67 = 0;
                  if (v64 == 1024)
                  {
                    char v65 = 0;
                    unsigned int v67 = 8;
                    unsigned int v63 = 16;
                  }
                }
              }
              else if (v64 == 128)
              {
                char v65 = 0;
                char v66 = 0;
                unsigned int v63 = 32;
                unsigned int v67 = 32;
              }
              else
              {
                char v66 = 1;
                unsigned int v67 = 0;
                if (v64 == 256)
                {
                  char v65 = 0;
                  char v66 = 0;
                  unsigned int v67 = 16;
                  unsigned int v63 = 32;
                }
              }
            }
            else
            {
              char v66 = 1;
              unsigned int v67 = 0;
              switch(v64)
              {
                case 4:
                  char v65 = 0;
                  char v66 = 0;
                  unsigned int v67 = 128;
                  unsigned int v63 = 256;
                  break;
                case 5:
                case 6:
                case 7:
                case 9:
                case 10:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 17:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                  break;
                case 8:
                  char v65 = 0;
                  char v66 = 0;
                  unsigned int v63 = 128;
                  unsigned int v67 = 128;
                  break;
                case 16:
                  char v65 = 0;
                  char v66 = 0;
                  unsigned int v67 = 64;
                  unsigned int v63 = 128;
                  break;
                case 32:
                  char v65 = 0;
                  char v66 = 0;
                  unsigned int v63 = 64;
                  unsigned int v67 = 64;
                  break;
                default:
                  if (v64 == 64)
                  {
                    char v65 = 0;
                    char v66 = 0;
                    unsigned int v67 = 32;
                    unsigned int v63 = 64;
                  }
                  break;
              }
            }
            unsigned int v150 = (v63 >> 3) - 1;
            if (v65) {
              unsigned int v151 = 0;
            }
            else {
              unsigned int v151 = 32 - __clz(~(-1 << -(char)__clz(v150)));
            }
            unsigned int v152 = (v67 >> 3) - 1;
            if (v66)
            {
              unsigned int v153 = 0;
              if (v151) {
                goto LABEL_174;
              }
            }
            else
            {
              unsigned int v153 = 32 - __clz(~(-1 << -(char)__clz(v152)));
              if (v153 | v151)
              {
LABEL_174:
                int v154 = 0;
                uint64_t v155 = 0;
                int v156 = v34 & v150;
                int v157 = v17 & v152;
                BOOL v158 = v151 != 0;
                BOOL v159 = v153 != 0;
                int v160 = 1;
                do
                {
                  --v151;
                  if (v158) {
                    v155 |= (unint64_t)(v160 & v156) << v154++;
                  }
                  else {
                    unsigned int v151 = 0;
                  }
                  --v153;
                  if (v159) {
                    v155 |= (unint64_t)(v160 & v157) << v154++;
                  }
                  else {
                    unsigned int v153 = 0;
                  }
                  v160 *= 2;
                  --v154;
                  BOOL v159 = v153 != 0;
                  BOOL v158 = v151 != 0;
                }
                while (v153 | v151);
                goto LABEL_186;
              }
            }
            uint64_t v155 = 0;
LABEL_186:
            unint64_t v51 = ((unint64_t)(v36 / v63 + v184 / v67 * ((v63 + v162) / v63)) << 14) + (v155 << 9);
            goto LABEL_59;
          }
          if (v176)
          {
            int v44 = 0;
            uint64_t v45 = 0;
            int v46 = 1;
            BOOL v47 = v172;
            BOOL v48 = v173;
            __int32 v50 = v174.i32[0];
            __int32 v49 = v174.i32[1];
            do
            {
              --v49;
              if (v48) {
                v45 |= (unint64_t)(v46 & v34) << v44++;
              }
              else {
                __int32 v49 = 0;
              }
              --v50;
              if (v47) {
                v45 |= (unint64_t)(v46 & v17) << v44++;
              }
              else {
                __int32 v50 = 0;
              }
              v46 *= 2;
              --v44;
              BOOL v47 = v50 != 0;
              BOOL v48 = v49 != 0;
            }
            while (v50 | v49);
          }
          else
          {
            uint64_t v45 = 0;
          }
          unint64_t v51 = v45 << 9;
LABEL_59:
          unsigned int v52 = *(_DWORD *)(v26 + 128) >> (*(unsigned char *)(v26 + 144) + a12);
          if (v52 <= 1) {
            unsigned int v52 = 1;
          }
          unsigned int v53 = v52 + 7;
          if (v53 < 0x10) {
            unsigned int v54 = 0;
          }
          else {
            unsigned int v54 = 32 - __clz(~(-1 << -(char)__clz((v53 >> 3) - 1)));
          }
          unsigned int v55 = *(_DWORD *)(v26 + 132) >> (*(unsigned char *)(v26 + 144) + a12);
          if (v55 <= 1) {
            unsigned int v55 = 1;
          }
          unsigned int v56 = v55 + 7;
          if (v56 < 0x10)
          {
            unsigned int v57 = 0;
            if (!v54)
            {
LABEL_81:
              uint64_t v59 = 0;
              goto LABEL_82;
            }
          }
          else
          {
            unsigned int v57 = 32 - __clz(~(-1 << -(char)__clz((v56 >> 3) - 1)));
            if (!(v57 | v54)) {
              goto LABEL_81;
            }
          }
          int v58 = 0;
          uint64_t v59 = 0;
          BOOL v60 = v54 != 0;
          BOOL v61 = v57 != 0;
          int v62 = 1;
          do
          {
            --v54;
            if (v60) {
              v59 |= (unint64_t)(v62 & v34) << v58++;
            }
            else {
              unsigned int v54 = 0;
            }
            --v57;
            if (v61) {
              v59 |= (unint64_t)(v62 & v17) << v58++;
            }
            else {
              unsigned int v57 = 0;
            }
            v62 *= 2;
            --v58;
            BOOL v61 = v57 != 0;
            BOOL v60 = v54 != 0;
          }
          while (v57 | v54);
LABEL_82:
          int v68 = v40 < 8 || v41;
          unint64_t v69 = (unsigned __int8 *)(a4 + 8 * v59);
          uint64_t v70 = v182 + 8 * (v38 - a7);
          int v71 = (void *)(a2 + v51);
          if (v35 < 8) {
            int v72 = 1;
          }
          else {
            int v72 = v68;
          }
          if (v189)
          {
            if (!v72)
            {
              uint64_t v77 = __dst;
LABEL_96:
              uint64_t v79 = 0;
              uint64_t v80 = v77;
              do
              {
                uint64_t v88 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,4u>::kSubblockPositions[v79 + 1];
                uint64_t v89 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,4u>::kSubblockPositions[v79];
                unsigned int v90 = (v40 - 4 * v89) & ~((int)(v40 - 4 * v89) >> 31);
                if (v90 >= 4) {
                  unsigned int v90 = 4;
                }
                unsigned int v91 = (v35 - 2 * v88) & ~((int)(v35 - 2 * v88) >> 31);
                if (v91 >= 2) {
                  unsigned int v91 = 2;
                }
                if (v90) {
                  BOOL v92 = v91 == 0;
                }
                else {
                  BOOL v92 = 1;
                }
                if (v92)
                {
                  char v87 = 0;
                }
                else
                {
                  uint64_t v81 = (long long *)(v70 + v31 * v88 + 32 * v89);
                  long long v82 = *v81;
                  long long v83 = v81[1];
                  uint64_t v84 = (long long *)((char *)v81 + v30);
                  long long v85 = *v84;
                  long long v86 = v84[1];
                  _OWORD *v80 = v82;
                  v80[1] = v85;
                  v80[2] = v83;
                  v80[3] = v86;
                  v80 += 4;
                  char v87 = 63;
                }
                *v69++ = v87;
                v79 += 2;
              }
              while (v79 != 16);
              a7 = v177;
              if (v189) {
                goto LABEL_155;
              }
              goto LABEL_27;
            }
            int v73 = v71;
            int v74 = v39;
            BOOL v75 = v41;
            int v76 = v38;
            memcpy(__dst, v71, sizeof(__dst));
            uint64_t v77 = __dst;
            int v71 = v73;
            int v38 = v76;
            BOOL v41 = v75;
            unsigned int v35 = v169;
            unsigned int v36 = 8 * v34;
            int v39 = v74;
            uint64_t v30 = a11;
            uint64_t v26 = v186;
          }
          else
          {
            uint64_t v77 = v71;
            if (!v72) {
              goto LABEL_96;
            }
          }
          int v175 = v71;
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE7ELj4ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = v26;
          float64x2_t v191 = (int16x8_t *)v77;
          unsigned __int8 v199 = v40;
          unsigned __int8 v200 = v35;
          unsigned int v195 = v171;
          unsigned int v196 = v38 - v36;
          float64x2_t v192 = v69;
          uint64_t v193 = v70;
          uint64_t v194 = v30;
          unsigned int v197 = v183;
          unsigned int v198 = v39;
          if (v41)
          {
            uint64_t v78 = v77;
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(v26 + 8) + 7384), block);
            uint64_t v77 = v78;
            uint64_t v26 = v186;
            a7 = v177;
            uint64_t v31 = 2 * a11;
            int v71 = v175;
            if (!v189) {
              goto LABEL_27;
            }
LABEL_155:
            memcpy(v71, v77, 0x200uLL);
            uint64_t v31 = 2 * a11;
            uint64_t v26 = v186;
            goto LABEL_27;
          }
          int8x8_t v170 = v77;
          uint64_t v93 = (uint64_t)&v77[AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v202, 64, (uint64_t)v77, *v69)];
          uint64_t v94 = v93
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v204, 64, v93, v69[1]);
          uint64_t v95 = v94
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v203, 64, v94, v69[2]);
          uint64_t v96 = v95
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v205, 64, v95, v69[3]);
          uint64_t v97 = v96
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v206, 64, v96, v69[4]);
          uint64_t v98 = v97
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v208, 64, v97, v69[5]);
          uint64_t v99 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v207, 64, v98, v69[6]);
          AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v209, 64, v98 + v99, v69[7]);
          uint64_t v100 = v197;
          if (v197 && v198)
          {
            uint64_t v101 = 0;
            unint64_t v102 = (unint64_t)v195 << 6;
            uint64_t v103 = 8 * v196;
            char v104 = &v202[0].i8[v102 + v103];
            uint64_t v105 = v193;
            uint64_t v106 = v194;
            unint64_t v107 = 8 * v198;
            if (v107 <= 1) {
              unint64_t v108 = 1;
            }
            else {
              unint64_t v108 = 8 * v198;
            }
            unint64_t v109 = v102 + v103;
            long long v110 = &v202[0].i8[v102 + v103];
            if (v108) {
              BOOL v111 = (v108 - 1) >> 32 == 0;
            }
            else {
              BOOL v111 = 0;
            }
            char v112 = !v111;
            uint64_t v113 = v108 & 0x7FFFFFFE0;
            uint64_t v114 = v108 & 0x7FFFFFFF8;
            unsigned int v115 = &v202[1].i8[v109];
            char v116 = (long long *)(v193 + 16);
            unint64_t v117 = v104;
            uint64_t v118 = v193;
            do
            {
              unsigned int v119 = (char *)(v105 + v106 * v101);
              unsigned int v120 = &v104[64 * v101];
              if ((unint64_t)(&v110[64 * v101] - v119) < 0x20) {
                char v121 = 1;
              }
              else {
                char v121 = v112;
              }
              if (v121)
              {
                int v122 = 0;
                goto LABEL_139;
              }
              if (v108 >= 0x20)
              {
                int v124 = v116;
                int v125 = v115;
                uint64_t v126 = v108 & 0x7FFFFFFE0;
                do
                {
                  long long v127 = *v124;
                  *((_OWORD *)v125 - 1) = *(v124 - 1);
                  *(_OWORD *)int v125 = v127;
                  v125 += 32;
                  v124 += 2;
                  v126 -= 32;
                }
                while (v126);
                if (v108 == v113) {
                  goto LABEL_122;
                }
                uint64_t v123 = v108 & 0x7FFFFFFE0;
                if ((v108 & 0x18) == 0)
                {
                  v119 += v113;
                  v120 += v113;
                  int v122 = v108 & 0xFFFFFFE0;
                  goto LABEL_139;
                }
              }
              else
              {
                uint64_t v123 = 0;
              }
              v120 += v114;
              unint64_t v128 = v123 - (v108 & 0x7FFFFFFF8);
              unint64_t v129 = (uint64_t *)(v118 + v123);
              unsigned int v130 = &v117[v123];
              do
              {
                uint64_t v131 = *v129++;
                *(void *)unsigned int v130 = v131;
                v130 += 8;
                v128 += 8;
              }
              while (v128);
              if (v108 == v114) {
                goto LABEL_122;
              }
              v119 += v114;
              int v122 = v108 & 0xFFFFFFF8;
LABEL_139:
              unsigned int v132 = v122 + 1;
              do
              {
                char v133 = *v119++;
                *v120++ = v133;
              }
              while (v107 > v132++);
LABEL_122:
              ++v101;
              v115 += 64;
              char v116 = (long long *)((char *)v116 + v106);
              v118 += v106;
              v117 += 64;
            }
            while (v101 != v100);
          }
          uint64_t v135 = 0;
          unsigned int v136 = v191;
          int v137 = (char *)v192;
          int v138 = v199;
          int v139 = v200;
          a7 = v177;
          uint64_t v26 = v186;
          uint64_t v31 = 2 * a11;
          int v71 = v175;
          do
          {
            uint64_t v145 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,4u>::kSubblockPositions[v135 + 1];
            uint64_t v146 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,4u>::kSubblockPositions[v135];
            unsigned int v147 = (v138 - 4 * v146) & ~((v138 - 4 * (int)v146) >> 31);
            if (v147 >= 4) {
              unsigned int v147 = 4;
            }
            unsigned int v148 = (v139 - 2 * v145) & ~((v139 - 2 * (int)v145) >> 31);
            if (v148 >= 2) {
              unsigned int v148 = 2;
            }
            if (v147) {
              BOOL v149 = v148 == 0;
            }
            else {
              BOOL v149 = 1;
            }
            if (v149)
            {
              char v144 = 0;
            }
            else
            {
              int8x8_t v140 = &v202[8 * v145 + 2 * v146];
              int16x8_t v141 = v140[1];
              int16x8_t v142 = v140[4];
              int16x8_t v143 = v140[5];
              *unsigned int v136 = *v140;
              v136[1] = v142;
              v136[2] = v141;
              v136[3] = v143;
              v136 += 4;
              char v144 = 63;
            }
            *v137++ = v144;
            v135 += 2;
          }
          while (v135 != 16);
          uint64_t v77 = v170;
          if (v189) {
            goto LABEL_155;
          }
LABEL_27:
          BOOL v21 = v34++ == v178 >> 3;
        }
        while (!v21);
        BOOL v21 = v17++ == v168;
      }
      while (!v21);
    }
  }
}

uint64_t AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, char a12)
{
  uint64_t v175 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v148 = a8;
  unsigned int v133 = a8 + a10 - 1;
  uint64_t v149 = a1;
  if (*(void *)(a1 + 168)) {
    int v17 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v17 = 0;
  }
  unsigned int v18 = a5 - 1;
  unsigned int v19 = a6 - 1;
  unsigned int v20 = a8 >> 3;
  unsigned int v132 = v133 >> 3;
  BOOL v21 = (v17 & 0xD00) == 0 || v17 == 768;
  int v22 = v17 & 0xE00;
  int v24 = !v21 && v22 != 1024;
  int v154 = v24;
  uint64_t result = a1;
  if (*(unsigned char *)(a1 + 232))
  {
    unsigned int v26 = *(unsigned __int8 *)(a1 + 255);
    unsigned int v27 = *(unsigned __int8 *)(a1 + 254);
    char v28 = __clz(v18);
    if (1 << v26 >= a6 || a5 >> v27)
    {
      if (!(a6 >> v26) && 1 << v27 < a5)
      {
        if (a6 < 2) {
          unsigned int v31 = 0;
        }
        else {
          unsigned int v31 = __clz(~(-1 << -(char)__clz(v19))) - 32;
        }
        v27 += v26 + v31;
        unsigned int v26 = -v31;
      }
    }
    else
    {
      unsigned int v29 = 32 - __clz(~(-1 << -v28));
      unsigned int v30 = v27 + v26;
      if (a5 < 2) {
        unsigned int v29 = 0;
      }
      unsigned int v26 = v30 - v29;
      unsigned int v27 = v29;
    }
    if (a5 < 2)
    {
      if (v27) {
        goto LABEL_27;
      }
    }
    else if (32 - __clz(~(-1 << -v28)) < v27)
    {
LABEL_27:
      BOOL v143 = 0;
LABEL_32:
      unsigned int v140 = v27 - 3;
      unsigned int v137 = v26 - 3;
      int v33 = -1 << *(unsigned char *)(*(void *)(a1 + 208) + 48);
      unsigned int v130 = (((~v33 + a5) & v33) + ~(-1 << v27)) >> v27;
      goto LABEL_33;
    }
    if (a6 < 2) {
      unsigned int v32 = 0;
    }
    else {
      unsigned int v32 = 32 - __clz(~(-1 << -(char)__clz(v19)));
    }
    BOOL v143 = v32 >= v26;
    goto LABEL_32;
  }
  BOOL v143 = 0;
  unsigned int v130 = 0;
  unsigned int v137 = 0;
  unsigned int v140 = 0;
LABEL_33:
  if (v20 <= v132)
  {
    unsigned int v142 = a7 + a9 - 1;
    unsigned int v129 = a7 >> 3;
    if (a7 >> 3 <= v142 >> 3)
    {
      unsigned int v152 = v18 >> 3;
      unsigned int v128 = v19 >> 3;
      int v151 = (v18 & 7) + 1;
      int v127 = (v19 & 7) + 1;
      uint32x2_t v34 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0x700000007);
      int8x8_t v35 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v34, 3uLL))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x1000000010, v34));
      __int32 v138 = v35.i32[0] | v35.i32[1];
      int8x8_t v136 = v35;
      BOOL v134 = v35.i32[0] != 0;
      BOOL v135 = v35.i32[1] != 0;
      unsigned int v141 = a7;
      do
      {
        unsigned int v36 = (8 * v20) | 7;
        if (8 * v20 <= v148) {
          int v37 = v148;
        }
        else {
          int v37 = 8 * v20;
        }
        if (v133 < v36) {
          unsigned int v36 = v133;
        }
        int v139 = v37 - 8 * v20;
        int v147 = v36 - v37 + 1;
        unsigned int v38 = v129;
        if (v20 == v128) {
          unsigned int v39 = v127;
        }
        else {
          unsigned int v39 = 8;
        }
        uint64_t v146 = a3 + (v37 - v148) * a11;
        unsigned int v150 = v39;
        do
        {
          unsigned int v40 = 8 * v38;
          unsigned int v41 = 8 * (v38 + 1) - 1;
          if (8 * v38 <= a7) {
            int v42 = a7;
          }
          else {
            int v42 = 8 * v38;
          }
          if (v142 < v41) {
            unsigned int v41 = v142;
          }
          int v43 = v41 - v42 + 1;
          if (v38 == v152) {
            unsigned int v44 = v151;
          }
          else {
            unsigned int v44 = 8;
          }
          BOOL v45 = 1;
          if (8 * v20 >= v148 && v40 >= a7)
          {
            int v46 = v151;
            if (v38 != v152) {
              int v46 = 8;
            }
            BOOL v45 = v43 != v46 || v147 != v39;
          }
          if (v143)
          {
            if (v140 | v137)
            {
              int v48 = 0;
              uint64_t v49 = 0;
              BOOL v50 = v137 != 0;
              int v51 = 1;
              BOOL v53 = v140 != 0;
              unsigned int v52 = v137;
              unsigned int v54 = v140;
              do
              {
                --v54;
                if (v53) {
                  v49 |= (unint64_t)(v38 & ~(-1 << v140) & v51) << v48++;
                }
                else {
                  unsigned int v54 = 0;
                }
                --v52;
                if (v50) {
                  v49 |= (unint64_t)(v20 & ~(-1 << v137) & v51) << v48++;
                }
                else {
                  unsigned int v52 = 0;
                }
                v51 *= 2;
                --v48;
                BOOL v50 = v52 != 0;
                BOOL v53 = v54 != 0;
              }
              while (v52 | v54);
            }
            else
            {
              uint64_t v49 = 0;
            }
            uint64_t v62 = *(void *)(result + 320) * ((v38 >> v140) + (v20 >> v137) * v130) + (v49 << 9);
          }
          else
          {
            if (v138)
            {
              int v55 = 0;
              uint64_t v56 = 0;
              int v57 = 1;
              BOOL v58 = v134;
              BOOL v59 = v135;
              __int32 v61 = v136.i32[0];
              __int32 v60 = v136.i32[1];
              do
              {
                --v60;
                if (v59) {
                  v56 |= (unint64_t)(v57 & v38) << v55++;
                }
                else {
                  __int32 v60 = 0;
                }
                --v61;
                if (v58) {
                  v56 |= (unint64_t)(v57 & v20) << v55++;
                }
                else {
                  __int32 v61 = 0;
                }
                v57 *= 2;
                --v55;
                BOOL v58 = v61 != 0;
                BOOL v59 = v60 != 0;
              }
              while (v61 | v60);
            }
            else
            {
              uint64_t v56 = 0;
            }
            uint64_t v62 = v56 << 9;
          }
          unsigned int v63 = *(_DWORD *)(result + 128) >> (*(unsigned char *)(result + 144) + a12);
          if (v63 <= 1) {
            unsigned int v63 = 1;
          }
          unsigned int v64 = v63 + 7;
          if (v64 < 0x10) {
            unsigned int v65 = 0;
          }
          else {
            unsigned int v65 = 32 - __clz(~(-1 << -(char)__clz((v64 >> 3) - 1)));
          }
          unsigned int v66 = *(_DWORD *)(result + 132) >> (*(unsigned char *)(result + 144) + a12);
          if (v66 <= 1) {
            unsigned int v66 = 1;
          }
          unsigned int v67 = v66 + 7;
          if (v67 < 0x10) {
            unsigned int v68 = 0;
          }
          else {
            unsigned int v68 = 32 - __clz(~(-1 << -(char)__clz((v67 >> 3) - 1)));
          }
          if (v68 | v65)
          {
            int v69 = 0;
            uint64_t v70 = 0;
            BOOL v71 = v65 != 0;
            BOOL v72 = v68 != 0;
            int v73 = 1;
            do
            {
              --v65;
              if (v71) {
                v70 |= (unint64_t)(v73 & v38) << v69++;
              }
              else {
                unsigned int v65 = 0;
              }
              --v68;
              if (v72) {
                v70 |= (unint64_t)(v73 & v20) << v69++;
              }
              else {
                unsigned int v68 = 0;
              }
              v73 *= 2;
              --v69;
              BOOL v72 = v68 != 0;
              BOOL v71 = v65 != 0;
            }
            while (v68 | v65);
          }
          else
          {
            uint64_t v70 = 0;
          }
          int v75 = v44 < 8 || v45;
          int v76 = (unsigned __int8 *)(a4 + 8 * v70);
          unsigned int v74 = v42 - a7;
          uint64_t v77 = v146 + 8 * (v42 - a7);
          uint64_t v78 = (unsigned char *)(a2 + v62);
          if (v39 < 8) {
            int v79 = 1;
          }
          else {
            int v79 = v75;
          }
          __src = v78;
          if (v154)
          {
            if (!v79)
            {
              uint64_t v78 = __dst;
LABEL_123:
              uint64_t v81 = (int16x8_t *)(v146 + 8 * v74);
              uint64_t v82 = a11;
              unint64_t v83 = (unint64_t)v78;
              uint64_t v84 = (char *)(a4 + 8 * v70);
              goto LABEL_157;
            }
            char v80 = v44;
            memcpy(__dst, __src, sizeof(__dst));
            LOBYTE(v44) = v80;
            uint64_t v78 = __dst;
            LOBYTE(v39) = v150;
            uint64_t result = v149;
          }
          else if (!v79)
          {
            goto LABEL_123;
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE9ELj4ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = result;
          int v156 = v78;
          unsigned __int8 v164 = v44;
          unsigned __int8 v165 = v39;
          unsigned int v160 = v139;
          unsigned int v161 = v42 - v40;
          int v157 = v76;
          uint64_t v158 = v77;
          uint64_t v159 = a11;
          unsigned int v162 = v147;
          unsigned int v163 = v43;
          if (v45)
          {
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(result + 8) + 7384), block);
            goto LABEL_158;
          }
          uint64_t v85 = (uint64_t)&v78[AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v167, 64, (uint64_t)v78, *v76)];
          uint64_t v86 = v85
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v169, 64, v85, v76[1]);
          uint64_t v87 = v86
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v168, 64, v86, v76[2]);
          uint64_t v88 = v87
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v170, 64, v87, v76[3]);
          uint64_t v89 = v88
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v171, 64, v88, v76[4]);
          uint64_t v90 = v89
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v173, 64, v89, v76[5]);
          uint64_t v91 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v172, 64, v90, v76[6]);
          AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v174, 64, v90 + v91, v76[7]);
          uint64_t v92 = v162;
          if (v162 && v163)
          {
            uint64_t v93 = 0;
            unint64_t v94 = (unint64_t)v160 << 6;
            uint64_t v95 = 8 * v161;
            uint64_t v96 = &v167[0].i8[v94 + v95];
            uint64_t v97 = v158;
            uint64_t v98 = v159;
            unint64_t v99 = 8 * v163;
            if (v99 <= 1) {
              unint64_t v100 = 1;
            }
            else {
              unint64_t v100 = 8 * v163;
            }
            unint64_t v101 = v94 + v95;
            unint64_t v102 = &v167[0].i8[v94 + v95];
            if (v100) {
              BOOL v103 = (v100 - 1) >> 32 == 0;
            }
            else {
              BOOL v103 = 0;
            }
            char v104 = !v103;
            uint64_t v105 = v100 & 0x7FFFFFFE0;
            uint64_t v106 = v100 & 0x7FFFFFFF8;
            unint64_t v107 = &v167[1].i8[v101];
            unint64_t v108 = (long long *)(v158 + 16);
            unint64_t v109 = v96;
            uint64_t v110 = v158;
            do
            {
              BOOL v111 = (char *)(v97 + v98 * v93);
              char v112 = &v96[64 * v93];
              if ((unint64_t)(&v102[64 * v93] - v111) < 0x20) {
                char v113 = 1;
              }
              else {
                char v113 = v104;
              }
              if (v113)
              {
                int v114 = 0;
                goto LABEL_153;
              }
              if (v100 >= 0x20)
              {
                char v116 = v108;
                unint64_t v117 = v107;
                uint64_t v118 = v100 & 0x7FFFFFFE0;
                do
                {
                  long long v119 = *v116;
                  *((_OWORD *)v117 - 1) = *(v116 - 1);
                  *(_OWORD *)unint64_t v117 = v119;
                  v117 += 32;
                  v116 += 2;
                  v118 -= 32;
                }
                while (v118);
                if (v100 == v105) {
                  goto LABEL_136;
                }
                uint64_t v115 = v100 & 0x7FFFFFFE0;
                if ((v100 & 0x18) == 0)
                {
                  v111 += v105;
                  v112 += v105;
                  int v114 = v100 & 0xFFFFFFE0;
                  goto LABEL_153;
                }
              }
              else
              {
                uint64_t v115 = 0;
              }
              v112 += v106;
              unint64_t v120 = v115 - (v100 & 0x7FFFFFFF8);
              char v121 = (uint64_t *)(v110 + v115);
              int v122 = &v109[v115];
              do
              {
                uint64_t v123 = *v121++;
                *(void *)int v122 = v123;
                v122 += 8;
                v120 += 8;
              }
              while (v120);
              if (v100 == v106) {
                goto LABEL_136;
              }
              v111 += v106;
              int v114 = v100 & 0xFFFFFFF8;
LABEL_153:
              unsigned int v124 = v114 + 1;
              do
              {
                char v125 = *v111++;
                *v112++ = v125;
              }
              while (v99 > v124++);
LABEL_136:
              ++v93;
              v107 += 64;
              unint64_t v108 = (long long *)((char *)v108 + v98);
              v110 += v98;
              v109 += 64;
            }
            while (v93 != v92);
          }
          unint64_t v83 = (unint64_t)v156;
          uint64_t v84 = (char *)v157;
          unsigned int v44 = v164;
          unsigned int v39 = v165;
          uint64_t v81 = v167;
          uint64_t v82 = 64;
LABEL_157:
          AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v81, v82, v83, v84, v44, v39);
LABEL_158:
          a7 = v141;
          if (v154) {
            memcpy(__src, v78, 0x200uLL);
          }
          BOOL v21 = v38++ == v142 >> 3;
          uint64_t result = v149;
          unsigned int v39 = v150;
        }
        while (!v21);
        BOOL v21 = v20++ == v132;
      }
      while (!v21);
    }
  }
  return result;
}

uint64_t AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, char a12)
{
  uint64_t v210 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v185 = a8;
  unsigned int v167 = a8 + a10 - 1;
  uint64_t v186 = a1;
  if (*(void *)(a1 + 168)) {
    int v17 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v17 = 0;
  }
  unsigned int v18 = a5 - 1;
  unsigned int v19 = a6 - 1;
  unsigned int v20 = a8 >> 3;
  unsigned int v166 = v167 >> 3;
  BOOL v21 = (v17 & 0xD00) == 0 || v17 == 768;
  int v22 = v17 & 0xE00;
  int v24 = !v21 && v22 != 1024;
  int v189 = v24;
  uint64_t result = a1;
  if (*(unsigned char *)(a1 + 232))
  {
    unsigned int v26 = *(unsigned __int8 *)(a1 + 255);
    unsigned int v27 = *(unsigned __int8 *)(a1 + 254);
    char v28 = __clz(v18);
    if (1 << v26 >= a6 || a5 >> v27)
    {
      if (!(a6 >> v26) && 1 << v27 < a5)
      {
        if (a6 < 2) {
          unsigned int v31 = 0;
        }
        else {
          unsigned int v31 = __clz(~(-1 << -(char)__clz(v19))) - 32;
        }
        v27 += v26 + v31;
        unsigned int v26 = -v31;
      }
    }
    else
    {
      unsigned int v29 = 32 - __clz(~(-1 << -v28));
      unsigned int v30 = v27 + v26;
      if (a5 < 2) {
        unsigned int v29 = 0;
      }
      unsigned int v26 = v30 - v29;
      unsigned int v27 = v29;
    }
    if (a5 < 2)
    {
      if (v27) {
        goto LABEL_27;
      }
    }
    else if (32 - __clz(~(-1 << -v28)) < v27)
    {
LABEL_27:
      BOOL v180 = 0;
LABEL_32:
      unsigned int v176 = v27 - 3;
      unsigned int v171 = v26 - 3;
      int v33 = -1 << *(unsigned char *)(*(void *)(a1 + 208) + 48);
      unsigned int v164 = (((~v33 + a5) & v33) + ~(-1 << v27)) >> v27;
      goto LABEL_33;
    }
    if (a6 < 2) {
      unsigned int v32 = 0;
    }
    else {
      unsigned int v32 = 32 - __clz(~(-1 << -(char)__clz(v19)));
    }
    BOOL v180 = v32 >= v26;
    goto LABEL_32;
  }
  BOOL v180 = 0;
  unsigned int v164 = 0;
  unsigned int v171 = 0;
  unsigned int v176 = 0;
LABEL_33:
  if (v20 <= v166)
  {
    unsigned int v179 = a7 + a9 - 1;
    unsigned int v163 = a7 >> 3;
    if (a7 >> 3 <= v179 >> 3)
    {
      unsigned int v188 = v18 >> 3;
      unsigned int v162 = v19 >> 3;
      int v187 = (v18 & 7) + 1;
      int v161 = (v19 & 7) + 1;
      int v160 = ~(-1 << v171);
      uint32x2_t v34 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0x700000007);
      int8x8_t v35 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v34, 3uLL))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x1000000010, v34));
      __int32 v174 = v35.i32[0] | v35.i32[1];
      int8x8_t v170 = v35;
      BOOL v169 = v35.i32[1] != 0;
      uint64_t v36 = a11;
      BOOL v168 = v35.i32[0] != 0;
      uint64_t v37 = 2 * a11;
      unsigned int v178 = a7;
      do
      {
        unsigned int v38 = (8 * v20) | 7;
        if (8 * v20 <= v185) {
          int v39 = v185;
        }
        else {
          int v39 = 8 * v20;
        }
        if (v167 < v38) {
          unsigned int v38 = v167;
        }
        int v175 = v39 - 8 * v20;
        int v184 = v38 - v39 + 1;
        unsigned int v40 = v163;
        if (v20 == v162) {
          unsigned int v41 = v161;
        }
        else {
          unsigned int v41 = 8;
        }
        int v42 = v20 & v160;
        uint64_t v183 = a3 + (v39 - v185) * v36;
        do
        {
          unsigned int v43 = 8 * v40;
          unsigned int v44 = 8 * (v40 + 1) - 1;
          if (8 * v40 <= a7) {
            int v45 = a7;
          }
          else {
            int v45 = 8 * v40;
          }
          if (v179 < v44) {
            unsigned int v44 = v179;
          }
          int v46 = v44 - v45 + 1;
          if (v40 == v188) {
            unsigned int v47 = v187;
          }
          else {
            unsigned int v47 = 8;
          }
          BOOL v48 = 1;
          if (8 * v20 >= v185 && v43 >= a7)
          {
            int v49 = v187;
            if (v40 != v188) {
              int v49 = 8;
            }
            BOOL v48 = v46 != v49 || v184 != v41;
          }
          if (v180)
          {
            if (v176 | v171)
            {
              int v51 = 0;
              uint64_t v52 = 0;
              BOOL v53 = v171 != 0;
              int v54 = 1;
              BOOL v56 = v176 != 0;
              unsigned int v55 = v171;
              unsigned int v57 = v176;
              do
              {
                --v57;
                if (v56) {
                  v52 |= (unint64_t)(v40 & ~(-1 << v176) & v54) << v51++;
                }
                else {
                  unsigned int v57 = 0;
                }
                --v55;
                if (v53) {
                  v52 |= (unint64_t)(v42 & v54) << v51++;
                }
                else {
                  unsigned int v55 = 0;
                }
                v54 *= 2;
                --v51;
                BOOL v53 = v55 != 0;
                BOOL v56 = v57 != 0;
              }
              while (v55 | v57);
            }
            else
            {
              uint64_t v52 = 0;
            }
            uint64_t v65 = *(void *)(result + 320) * ((v40 >> v176) + (v20 >> v171) * v164) + (v52 << 9);
          }
          else
          {
            if (v174)
            {
              int v58 = 0;
              uint64_t v59 = 0;
              int v60 = 1;
              BOOL v61 = v168;
              BOOL v62 = v169;
              __int32 v64 = v170.i32[0];
              __int32 v63 = v170.i32[1];
              do
              {
                --v63;
                if (v62) {
                  v59 |= (unint64_t)(v60 & v40) << v58++;
                }
                else {
                  __int32 v63 = 0;
                }
                --v64;
                if (v61) {
                  v59 |= (unint64_t)(v60 & v20) << v58++;
                }
                else {
                  __int32 v64 = 0;
                }
                v60 *= 2;
                --v58;
                BOOL v61 = v64 != 0;
                BOOL v62 = v63 != 0;
              }
              while (v64 | v63);
            }
            else
            {
              uint64_t v59 = 0;
            }
            uint64_t v65 = v59 << 9;
          }
          unsigned int v66 = *(_DWORD *)(result + 128) >> (*(unsigned char *)(result + 144) + a12);
          if (v66 <= 1) {
            unsigned int v66 = 1;
          }
          unsigned int v67 = v66 + 7;
          if (v67 < 0x10) {
            unsigned int v68 = 0;
          }
          else {
            unsigned int v68 = 32 - __clz(~(-1 << -(char)__clz((v67 >> 3) - 1)));
          }
          unsigned int v69 = *(_DWORD *)(result + 132) >> (*(unsigned char *)(result + 144) + a12);
          if (v69 <= 1) {
            unsigned int v69 = 1;
          }
          unsigned int v70 = v69 + 7;
          if (v70 < 0x10)
          {
            unsigned int v71 = 0;
            if (!v68)
            {
LABEL_111:
              uint64_t v73 = 0;
              goto LABEL_112;
            }
          }
          else
          {
            unsigned int v71 = 32 - __clz(~(-1 << -(char)__clz((v70 >> 3) - 1)));
            if (!(v71 | v68)) {
              goto LABEL_111;
            }
          }
          int v72 = 0;
          uint64_t v73 = 0;
          BOOL v74 = v68 != 0;
          BOOL v75 = v71 != 0;
          int v76 = 1;
          do
          {
            --v68;
            if (v74) {
              v73 |= (unint64_t)(v76 & v40) << v72++;
            }
            else {
              unsigned int v68 = 0;
            }
            --v71;
            if (v75) {
              v73 |= (unint64_t)(v76 & v20) << v72++;
            }
            else {
              unsigned int v71 = 0;
            }
            v76 *= 2;
            --v72;
            BOOL v75 = v71 != 0;
            BOOL v74 = v68 != 0;
          }
          while (v71 | v68);
LABEL_112:
          unsigned int v77 = v45 - a7;
          int v78 = v47 < 8 || v48;
          int v79 = (unsigned __int8 *)(a4 + 8 * v73);
          uint64_t v80 = v183 + 8 * v77;
          uint64_t v81 = (void *)(a2 + v65);
          if (v41 < 8) {
            int v82 = 1;
          }
          else {
            int v82 = v78;
          }
          if (v189)
          {
            if (!v82)
            {
              uint64_t v86 = __dst;
LABEL_125:
              uint64_t v88 = 0;
              uint64_t v89 = v86;
              do
              {
                uint64_t v97 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,4u>::kSubblockPositions[v88 + 1];
                uint64_t v98 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,4u>::kSubblockPositions[v88];
                unsigned int v99 = (v47 - 4 * v98) & ~((int)(v47 - 4 * v98) >> 31);
                if (v99 >= 4) {
                  unsigned int v99 = 4;
                }
                unsigned int v100 = (v41 - 2 * v97) & ~((int)(v41 - 2 * v97) >> 31);
                if (v100 >= 2) {
                  unsigned int v100 = 2;
                }
                if (v99) {
                  BOOL v101 = v100 == 0;
                }
                else {
                  BOOL v101 = 1;
                }
                if (v101)
                {
                  char v96 = 0;
                }
                else
                {
                  uint64_t v90 = (long long *)(v80 + v37 * v97 + 32 * v98);
                  long long v91 = *v90;
                  long long v92 = v90[1];
                  uint64_t v93 = (long long *)((char *)v90 + v36);
                  long long v94 = *v93;
                  long long v95 = v93[1];
                  *uint64_t v89 = v91;
                  v89[1] = v94;
                  v89[2] = v92;
                  v89[3] = v95;
                  v89 += 4;
                  char v96 = 63;
                }
                *v79++ = v96;
                v88 += 2;
              }
              while (v88 != 16);
              a7 = v178;
LABEL_138:
              unsigned int v102 = v40 + 1;
              if (v189) {
                goto LABEL_47;
              }
              goto LABEL_48;
            }
            unint64_t v83 = v81;
            int v84 = v46;
            BOOL v172 = v48;
            int v85 = v45;
            memcpy(__dst, v81, sizeof(__dst));
            int v45 = v85;
            BOOL v48 = v172;
            unsigned int v43 = 8 * v40;
            int v46 = v84;
            uint64_t v86 = __dst;
            uint64_t v81 = v83;
            int v42 = v20 & v160;
            uint64_t v36 = a11;
            uint64_t result = v186;
          }
          else
          {
            uint64_t v86 = v81;
            if (!v82) {
              goto LABEL_125;
            }
          }
          unsigned int v177 = v81;
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE9ELj4ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = result;
          float64x2_t v191 = (int16x8_t *)v86;
          unsigned __int8 v199 = v47;
          unsigned __int8 v200 = v41;
          unsigned int v195 = v175;
          unsigned int v196 = v45 - v43;
          float64x2_t v192 = v79;
          uint64_t v193 = v80;
          uint64_t v194 = v36;
          unsigned int v197 = v184;
          unsigned int v198 = v46;
          if (v48)
          {
            uint64_t v87 = v86;
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(result + 8) + 7384), block);
            uint64_t v86 = v87;
            uint64_t v36 = a11;
            uint64_t result = v186;
            a7 = v178;
            uint64_t v81 = v177;
            uint64_t v37 = 2 * a11;
            goto LABEL_138;
          }
          BOOL v173 = v86;
          uint64_t v103 = (uint64_t)&v86[AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v202, 64, (uint64_t)v86, *v79)];
          uint64_t v104 = v103
               + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v204, 64, v103, v79[1]);
          uint64_t v105 = v104
               + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v203, 64, v104, v79[2]);
          uint64_t v106 = v105
               + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v205, 64, v105, v79[3]);
          uint64_t v107 = v106
               + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v206, 64, v106, v79[4]);
          uint64_t v108 = v107
               + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v208, 64, v107, v79[5]);
          uint64_t v109 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v207, 64, v108, v79[6]);
          AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v209, 64, v108 + v109, v79[7]);
          uint64_t v110 = v197;
          if (v197 && v198)
          {
            uint64_t v111 = 0;
            unint64_t v112 = (unint64_t)v195 << 6;
            uint64_t v113 = 8 * v196;
            int v114 = &v202[0].i8[v112 + v113];
            uint64_t v115 = v193;
            uint64_t v116 = v194;
            unint64_t v117 = 8 * v198;
            if (v117 <= 1) {
              unint64_t v118 = 1;
            }
            else {
              unint64_t v118 = 8 * v198;
            }
            unint64_t v119 = v112 + v113;
            unint64_t v120 = &v202[0].i8[v112 + v113];
            if (v118) {
              BOOL v121 = (v118 - 1) >> 32 == 0;
            }
            else {
              BOOL v121 = 0;
            }
            char v122 = !v121;
            uint64_t v123 = v118 & 0x7FFFFFFE0;
            uint64_t v124 = v118 & 0x7FFFFFFF8;
            char v125 = &v202[1].i8[v119];
            uint64_t v126 = (long long *)(v193 + 16);
            int v127 = v114;
            uint64_t v128 = v193;
            do
            {
              unsigned int v129 = (char *)(v115 + v116 * v111);
              unsigned int v130 = &v114[64 * v111];
              if ((unint64_t)(&v120[64 * v111] - v129) < 0x20) {
                char v131 = 1;
              }
              else {
                char v131 = v122;
              }
              if (v131)
              {
                int v132 = 0;
                goto LABEL_169;
              }
              if (v118 >= 0x20)
              {
                BOOL v134 = v126;
                BOOL v135 = v125;
                uint64_t v136 = v118 & 0x7FFFFFFE0;
                do
                {
                  long long v137 = *v134;
                  *((_OWORD *)v135 - 1) = *(v134 - 1);
                  *(_OWORD *)BOOL v135 = v137;
                  v135 += 32;
                  v134 += 2;
                  v136 -= 32;
                }
                while (v136);
                if (v118 == v123) {
                  goto LABEL_152;
                }
                uint64_t v133 = v118 & 0x7FFFFFFE0;
                if ((v118 & 0x18) == 0)
                {
                  v129 += v123;
                  v130 += v123;
                  int v132 = v118 & 0xFFFFFFE0;
                  goto LABEL_169;
                }
              }
              else
              {
                uint64_t v133 = 0;
              }
              v130 += v124;
              unint64_t v138 = v133 - (v118 & 0x7FFFFFFF8);
              int v139 = (uint64_t *)(v128 + v133);
              unsigned int v140 = &v127[v133];
              do
              {
                uint64_t v141 = *v139++;
                *(void *)unsigned int v140 = v141;
                v140 += 8;
                v138 += 8;
              }
              while (v138);
              if (v118 == v124) {
                goto LABEL_152;
              }
              v129 += v124;
              int v132 = v118 & 0xFFFFFFF8;
LABEL_169:
              unsigned int v142 = v132 + 1;
              do
              {
                char v143 = *v129++;
                *v130++ = v143;
              }
              while (v117 > v142++);
LABEL_152:
              ++v111;
              v125 += 64;
              uint64_t v126 = (long long *)((char *)v126 + v116);
              v128 += v116;
              v127 += 64;
            }
            while (v111 != v110);
          }
          uint64_t v145 = 0;
          uint64_t v146 = v191;
          int v147 = (char *)v192;
          int v148 = v199;
          int v149 = v200;
          a7 = v178;
          uint64_t v36 = a11;
          uint64_t result = v186;
          unsigned int v102 = v40 + 1;
          uint64_t v86 = v173;
          do
          {
            uint64_t v155 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,4u>::kSubblockPositions[v145 + 1];
            uint64_t v156 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,4u>::kSubblockPositions[v145];
            unsigned int v157 = (v148 - 4 * v156) & ~((v148 - 4 * (int)v156) >> 31);
            if (v157 >= 4) {
              unsigned int v157 = 4;
            }
            unsigned int v158 = (v149 - 2 * v155) & ~((v149 - 2 * (int)v155) >> 31);
            if (v158 >= 2) {
              unsigned int v158 = 2;
            }
            if (v157) {
              BOOL v159 = v158 == 0;
            }
            else {
              BOOL v159 = 1;
            }
            if (v159)
            {
              char v154 = 0;
            }
            else
            {
              unsigned int v150 = &v202[8 * v155 + 2 * v156];
              int16x8_t v151 = v150[1];
              int16x8_t v152 = v150[4];
              int16x8_t v153 = v150[5];
              *uint64_t v146 = *v150;
              v146[1] = v152;
              v146[2] = v151;
              v146[3] = v153;
              v146 += 4;
              char v154 = 63;
            }
            *v147++ = v154;
            v145 += 2;
          }
          while (v145 != 16);
          uint64_t v81 = v177;
          uint64_t v37 = 2 * a11;
          if (v189)
          {
LABEL_47:
            memcpy(v81, v86, 0x200uLL);
            uint64_t v37 = 2 * a11;
            uint64_t v36 = a11;
            uint64_t result = v186;
          }
LABEL_48:
          BOOL v21 = v40 == v179 >> 3;
          unsigned int v40 = v102;
        }
        while (!v21);
        BOOL v21 = v20++ == v166;
      }
      while (!v21);
    }
  }
  return result;
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, int a12)
{
  uint64_t v176 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  uint64_t v17 = a1;
  unsigned int v150 = a8;
  unsigned int v18 = a8 >> 3;
  unsigned int v134 = a8 + a10 - 1;
  unsigned int v136 = v134 >> 3;
  unsigned int v19 = *(unsigned __int8 *)(*(void *)(a1 + 208) + 88);
  unsigned int v20 = *(_DWORD *)(a1 + 112);
  uint64_t v151 = v17;
  if (*(void *)(v17 + 168))
  {
    __int16 CacheMode = IOSurfaceGetCacheMode();
    uint64_t v17 = v151;
    int v22 = CacheMode & 0xF00;
  }
  else
  {
    int v22 = 0;
  }
  BOOL v23 = (v22 & 0xD00) == 0 || v22 == 768;
  int v24 = v22 & 0xE00;
  int v26 = !v23 && v24 != 1024;
  int v155 = v26;
  BOOL isLevelTiled = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::isLevelTiled(v17, *(_DWORD *)(v17 + 144) + a12);
  uint64_t v28 = v151;
  BOOL v144 = isLevelTiled;
  if (v18 <= v136)
  {
    unsigned int v143 = a7 + a9 - 1;
    unsigned int v133 = a7 >> 3;
    if (a7 >> 3 <= v143 >> 3)
    {
      unsigned int v130 = a5 - 1;
      unsigned int v132 = (a6 - 1) >> 3;
      int v153 = ((a5 - 1) & 7) + 1;
      unsigned int v154 = (a5 - 1) >> 3;
      int v131 = ((a6 - 1) & 7) + 1;
      uint32x2_t v29 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0x700000007);
      int8x8_t v30 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v29, 3uLL))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x1000000010, v29));
      __int32 v141 = v30.i32[0] | v30.i32[1];
      int8x8_t v140 = v30;
      BOOL v138 = v30.i32[0] != 0;
      BOOL v139 = v30.i32[1] != 0;
      unint64_t v129 = 8 * v20 * (unint64_t)v19;
      unsigned int v142 = a7;
      do
      {
        unsigned int v31 = (8 * v18) | 7;
        if (8 * v18 <= v150) {
          int v32 = v150;
        }
        else {
          int v32 = 8 * v18;
        }
        unsigned int v33 = v133;
        if (v134 < v31) {
          unsigned int v31 = v134;
        }
        int v137 = v32 - 8 * v18;
        int v148 = v31 - v32 + 1;
        unsigned int v149 = 8 * v18;
        if (v18 == v132) {
          unsigned int v34 = v131;
        }
        else {
          unsigned int v34 = 8;
        }
        uint64_t v147 = a3 + (v32 - v150) * a11;
        unsigned int v152 = v34;
        do
        {
          unsigned int v35 = 8 * v33;
          unsigned int v36 = 8 * (v33 + 1) - 1;
          if (8 * v33 <= a7) {
            int v37 = a7;
          }
          else {
            int v37 = 8 * v33;
          }
          if (v143 < v36) {
            unsigned int v36 = v143;
          }
          int v38 = v36 - v37 + 1;
          if (v33 == v154) {
            unsigned int v39 = v153;
          }
          else {
            unsigned int v39 = 8;
          }
          BOOL v40 = 1;
          if (v149 >= v150 && v35 >= a7)
          {
            int v41 = v153;
            if (v33 != v154) {
              int v41 = 8;
            }
            BOOL v40 = v38 != v41 || v148 != v34;
          }
          if (v144)
          {
            unsigned int v62 = 0;
            uint64_t v63 = v129 >> (*(unsigned char *)(v28 + 57) != 0);
            char v64 = 1;
            if (v63 > 127)
            {
              if (v63 > 511)
              {
                if (v63 == 512)
                {
                  char v64 = 0;
                  char v65 = 0;
                  unsigned int v62 = 16;
                  unsigned int v66 = 16;
                }
                else
                {
                  char v65 = 1;
                  unsigned int v66 = 0;
                  if (v63 == 1024)
                  {
                    char v64 = 0;
                    unsigned int v66 = 8;
                    unsigned int v62 = 16;
                  }
                }
              }
              else if (v63 == 128)
              {
                char v64 = 0;
                char v65 = 0;
                unsigned int v62 = 32;
                unsigned int v66 = 32;
              }
              else
              {
                char v65 = 1;
                unsigned int v66 = 0;
                if (v63 == 256)
                {
                  char v64 = 0;
                  char v65 = 0;
                  unsigned int v66 = 16;
                  unsigned int v62 = 32;
                }
              }
            }
            else
            {
              char v65 = 1;
              unsigned int v66 = 0;
              switch(v63)
              {
                case 4:
                  char v64 = 0;
                  char v65 = 0;
                  unsigned int v66 = 128;
                  unsigned int v62 = 256;
                  break;
                case 5:
                case 6:
                case 7:
                case 9:
                case 10:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 17:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                  break;
                case 8:
                  char v64 = 0;
                  char v65 = 0;
                  unsigned int v62 = 128;
                  unsigned int v66 = 128;
                  break;
                case 16:
                  char v64 = 0;
                  char v65 = 0;
                  unsigned int v66 = 64;
                  unsigned int v62 = 128;
                  break;
                case 32:
                  char v64 = 0;
                  char v65 = 0;
                  unsigned int v62 = 64;
                  unsigned int v66 = 64;
                  break;
                default:
                  if (v63 == 64)
                  {
                    char v64 = 0;
                    char v65 = 0;
                    unsigned int v66 = 32;
                    unsigned int v62 = 64;
                  }
                  break;
              }
            }
            unsigned int v118 = (v62 >> 3) - 1;
            if (v64) {
              unsigned int v119 = 0;
            }
            else {
              unsigned int v119 = 32 - __clz(~(-1 << -(char)__clz(v118)));
            }
            unsigned int v120 = (v66 >> 3) - 1;
            if (v65)
            {
              unsigned int v121 = 0;
              if (v119) {
                goto LABEL_149;
              }
            }
            else
            {
              unsigned int v121 = 32 - __clz(~(-1 << -(char)__clz(v120)));
              if (v121 | v119)
              {
LABEL_149:
                int v122 = 0;
                uint64_t v123 = 0;
                int v124 = v33 & v118;
                int v125 = v18 & v120;
                BOOL v126 = v119 != 0;
                BOOL v127 = v121 != 0;
                int v128 = 1;
                do
                {
                  --v119;
                  if (v126) {
                    v123 |= (unint64_t)(v128 & v124) << v122++;
                  }
                  else {
                    unsigned int v119 = 0;
                  }
                  --v121;
                  if (v127) {
                    v123 |= (unint64_t)(v128 & v125) << v122++;
                  }
                  else {
                    unsigned int v121 = 0;
                  }
                  v128 *= 2;
                  --v122;
                  BOOL v127 = v121 != 0;
                  BOOL v126 = v119 != 0;
                }
                while (v121 | v119);
                goto LABEL_161;
              }
            }
            uint64_t v123 = 0;
LABEL_161:
            unint64_t v50 = ((unint64_t)(v35 / v62 + v149 / v66 * ((v62 + v130) / v62)) << 14) + (v123 << 9);
            goto LABEL_59;
          }
          if (v141)
          {
            int v43 = 0;
            uint64_t v44 = 0;
            int v45 = 1;
            BOOL v46 = v138;
            BOOL v47 = v139;
            __int32 v49 = v140.i32[0];
            __int32 v48 = v140.i32[1];
            do
            {
              --v48;
              if (v47) {
                v44 |= (unint64_t)(v45 & v33) << v43++;
              }
              else {
                __int32 v48 = 0;
              }
              --v49;
              if (v46) {
                v44 |= (unint64_t)(v45 & v18) << v43++;
              }
              else {
                __int32 v49 = 0;
              }
              v45 *= 2;
              --v43;
              BOOL v46 = v49 != 0;
              BOOL v47 = v48 != 0;
            }
            while (v49 | v48);
          }
          else
          {
            uint64_t v44 = 0;
          }
          unint64_t v50 = v44 << 9;
LABEL_59:
          unsigned int v51 = *(_DWORD *)(v28 + 128) >> (*(unsigned char *)(v28 + 144) + a12);
          if (v51 <= 1) {
            unsigned int v51 = 1;
          }
          unsigned int v52 = v51 + 7;
          if (v52 < 0x10) {
            unsigned int v53 = 0;
          }
          else {
            unsigned int v53 = 32 - __clz(~(-1 << -(char)__clz((v52 >> 3) - 1)));
          }
          unsigned int v54 = *(_DWORD *)(v28 + 132) >> (*(unsigned char *)(v28 + 144) + a12);
          if (v54 <= 1) {
            unsigned int v54 = 1;
          }
          unsigned int v55 = v54 + 7;
          if (v55 < 0x10)
          {
            unsigned int v56 = 0;
            if (!v53)
            {
LABEL_81:
              uint64_t v58 = 0;
              goto LABEL_82;
            }
          }
          else
          {
            unsigned int v56 = 32 - __clz(~(-1 << -(char)__clz((v55 >> 3) - 1)));
            if (!(v56 | v53)) {
              goto LABEL_81;
            }
          }
          int v57 = 0;
          uint64_t v58 = 0;
          BOOL v59 = v53 != 0;
          BOOL v60 = v56 != 0;
          int v61 = 1;
          do
          {
            --v53;
            if (v59) {
              v58 |= (unint64_t)(v61 & v33) << v57++;
            }
            else {
              unsigned int v53 = 0;
            }
            --v56;
            if (v60) {
              v58 |= (unint64_t)(v61 & v18) << v57++;
            }
            else {
              unsigned int v56 = 0;
            }
            v61 *= 2;
            --v57;
            BOOL v60 = v56 != 0;
            BOOL v59 = v53 != 0;
          }
          while (v56 | v53);
LABEL_82:
          int v67 = v39 < 8 || v40;
          unsigned int v68 = (char *)(a4 + 8 * v58);
          unint64_t v69 = v147 + 8 * (v37 - a7);
          unsigned int v70 = (void *)(a2 + v50);
          if (v34 < 8) {
            int v71 = 1;
          }
          else {
            int v71 = v67;
          }
          if (v155)
          {
            if (!v71)
            {
              BOOL v75 = __dst;
LABEL_95:
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock(v69, a11, (unint64_t)v75, v68, v39, v34);
              a7 = v142;
              goto LABEL_129;
            }
            char v72 = v39;
            int v73 = v38;
            int v74 = v37;
            memcpy(__dst, v70, sizeof(__dst));
            int v37 = v74;
            BOOL v75 = __dst;
            int v38 = v73;
            unsigned int v35 = 8 * v33;
            LOBYTE(v39) = v72;
            LOBYTE(v34) = v152;
            uint64_t v28 = v151;
          }
          else
          {
            BOOL v75 = v70;
            if (!v71) {
              goto LABEL_95;
            }
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE9ELj4ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = v28;
          unsigned int v157 = v75;
          unsigned __int8 v165 = v39;
          unsigned __int8 v166 = v34;
          unsigned int v161 = v137;
          unsigned int v162 = v37 - v35;
          unsigned int v158 = v68;
          unint64_t v159 = v69;
          uint64_t v160 = a11;
          unsigned int v163 = v148;
          unsigned int v164 = v38;
          if (v40)
          {
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(v28 + 8) + 7384), block);
            a7 = v142;
            goto LABEL_129;
          }
          uint64_t v76 = (uint64_t)&v75[AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v168, 64, (uint64_t)v75, *v68)];
          uint64_t v77 = v76
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v170, 64, v76, v68[1]);
          uint64_t v78 = v77
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v169, 64, v77, v68[2]);
          uint64_t v79 = v78
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v171, 64, v78, v68[3]);
          uint64_t v80 = v79
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v172, 64, v79, v68[4]);
          uint64_t v81 = v80
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v174, 64, v80, v68[5]);
          uint64_t v82 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v173, 64, v81, v68[6]);
          AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v175, 64, v81 + v82, v68[7]);
          uint64_t v83 = v163;
          a7 = v142;
          if (v163 && v164)
          {
            uint64_t v84 = 0;
            unint64_t v85 = (unint64_t)v161 << 6;
            uint64_t v86 = 8 * v162;
            uint64_t v87 = &v168[0].i8[v85 + v86];
            unint64_t v88 = v159;
            uint64_t v89 = v160;
            unint64_t v90 = 8 * v164;
            if (v90 <= 1) {
              unint64_t v91 = 1;
            }
            else {
              unint64_t v91 = 8 * v164;
            }
            unint64_t v92 = v85 + v86;
            uint64_t v93 = &v168[0].i8[v85 + v86];
            if (v91) {
              BOOL v94 = (v91 - 1) >> 32 == 0;
            }
            else {
              BOOL v94 = 0;
            }
            char v95 = !v94;
            uint64_t v96 = v91 & 0x7FFFFFFE0;
            uint64_t v97 = v91 & 0x7FFFFFFF8;
            uint64_t v98 = &v168[1].i8[v92];
            unsigned int v99 = (long long *)(v159 + 16);
            unsigned int v100 = v87;
            unint64_t v101 = v159;
            do
            {
              unsigned int v102 = (char *)(v88 + v89 * v84);
              uint64_t v103 = &v87[64 * v84];
              if ((unint64_t)(&v93[64 * v84] - v102) < 0x20) {
                char v104 = 1;
              }
              else {
                char v104 = v95;
              }
              if (v104)
              {
                int v105 = 0;
                goto LABEL_125;
              }
              if (v91 >= 0x20)
              {
                uint64_t v107 = v99;
                uint64_t v108 = v98;
                uint64_t v109 = v91 & 0x7FFFFFFE0;
                do
                {
                  long long v110 = *v107;
                  *((_OWORD *)v108 - 1) = *(v107 - 1);
                  *(_OWORD *)uint64_t v108 = v110;
                  v108 += 32;
                  v107 += 2;
                  v109 -= 32;
                }
                while (v109);
                if (v91 == v96) {
                  goto LABEL_108;
                }
                uint64_t v106 = v91 & 0x7FFFFFFE0;
                if ((v91 & 0x18) == 0)
                {
                  v102 += v96;
                  v103 += v96;
                  int v105 = v91 & 0xFFFFFFE0;
                  goto LABEL_125;
                }
              }
              else
              {
                uint64_t v106 = 0;
              }
              v103 += v97;
              unint64_t v111 = v106 - (v91 & 0x7FFFFFFF8);
              unint64_t v112 = (uint64_t *)(v101 + v106);
              uint64_t v113 = &v100[v106];
              do
              {
                uint64_t v114 = *v112++;
                *(void *)uint64_t v113 = v114;
                v113 += 8;
                v111 += 8;
              }
              while (v111);
              if (v91 == v97) {
                goto LABEL_108;
              }
              v102 += v97;
              int v105 = v91 & 0xFFFFFFF8;
LABEL_125:
              unsigned int v115 = v105 + 1;
              do
              {
                char v116 = *v102++;
                *v103++ = v116;
              }
              while (v90 > v115++);
LABEL_108:
              ++v84;
              v98 += 64;
              unsigned int v99 = (long long *)((char *)v99 + v89);
              v101 += v89;
              v100 += 64;
            }
            while (v84 != v83);
          }
          AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v168, 64, (unint64_t)v157, v158, v165, v166);
LABEL_129:
          if (v155) {
            memcpy(v70, v75, 0x200uLL);
          }
          BOOL v23 = v33++ == v143 >> 3;
          uint64_t v28 = v151;
          unsigned int v34 = v152;
        }
        while (!v23);
        BOOL v23 = v18++ == v136;
      }
      while (!v23);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, int a12)
{
  uint64_t v210 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v185 = a8;
  unsigned int v17 = a8 >> 3;
  unsigned int v166 = a8 + a10 - 1;
  unsigned int v168 = v166 >> 3;
  unsigned int v18 = *(unsigned __int8 *)(*(void *)(a1 + 208) + 88);
  unsigned int v19 = *(_DWORD *)(a1 + 112);
  uint64_t v186 = a1;
  if (*(void *)(a1 + 168)) {
    int v20 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v20 = 0;
  }
  BOOL v21 = (v20 & 0xD00) == 0 || v20 == 768;
  int v22 = v20 & 0xE00;
  int v24 = !v21 && v22 != 1024;
  int v189 = v24;
  BOOL isLevelTiled = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::isLevelTiled(a1, *(_DWORD *)(a1 + 144) + a12);
  uint64_t v26 = a1;
  BOOL v179 = isLevelTiled;
  if (v17 <= v168)
  {
    unsigned int v178 = a7 + a9 - 1;
    unsigned int v165 = a7 >> 3;
    if (a7 >> 3 <= v178 >> 3)
    {
      unsigned int v162 = a5 - 1;
      unsigned int v188 = (a5 - 1) >> 3;
      int v187 = ((a5 - 1) & 7) + 1;
      int v163 = ((a6 - 1) & 7) + 1;
      unsigned int v164 = (a6 - 1) >> 3;
      unint64_t v27 = v19 * (unint64_t)v18;
      uint32x2_t v28 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0x700000007);
      int8x8_t v29 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v28, 3uLL))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x1000000010, v28));
      __int32 v176 = v29.i32[0] | v29.i32[1];
      int8x8_t v174 = v29;
      BOOL v172 = v29.i32[0] != 0;
      BOOL v173 = v29.i32[1] != 0;
      uint64_t v30 = a11;
      unint64_t v161 = 8 * v27;
      uint64_t v31 = 2 * a11;
      unsigned int v177 = a7;
      do
      {
        unsigned int v32 = (8 * v17) | 7;
        if (8 * v17 <= v185) {
          int v33 = v185;
        }
        else {
          int v33 = 8 * v17;
        }
        unsigned int v34 = v165;
        if (v166 < v32) {
          unsigned int v32 = v166;
        }
        int v171 = v33 - 8 * v17;
        int v183 = v32 - v33 + 1;
        unsigned int v184 = 8 * v17;
        if (v17 == v164) {
          unsigned int v35 = v163;
        }
        else {
          unsigned int v35 = 8;
        }
        uint64_t v182 = a3 + (v33 - v185) * v30;
        unsigned int v169 = v35;
        do
        {
          unsigned int v36 = 8 * v34;
          unsigned int v37 = 8 * (v34 + 1) - 1;
          if (8 * v34 <= a7) {
            int v38 = a7;
          }
          else {
            int v38 = 8 * v34;
          }
          if (v178 < v37) {
            unsigned int v37 = v178;
          }
          int v39 = v37 - v38 + 1;
          if (v34 == v188) {
            unsigned int v40 = v187;
          }
          else {
            unsigned int v40 = 8;
          }
          BOOL v41 = 1;
          if (v184 >= v185 && v36 >= a7)
          {
            int v42 = v187;
            if (v34 != v188) {
              int v42 = 8;
            }
            BOOL v41 = v39 != v42 || v183 != v35;
          }
          if (v179)
          {
            unsigned int v63 = 0;
            uint64_t v64 = v161 >> (*(unsigned char *)(v26 + 57) != 0);
            char v65 = 1;
            if (v64 > 127)
            {
              if (v64 > 511)
              {
                if (v64 == 512)
                {
                  char v65 = 0;
                  char v66 = 0;
                  unsigned int v63 = 16;
                  unsigned int v67 = 16;
                }
                else
                {
                  char v66 = 1;
                  unsigned int v67 = 0;
                  if (v64 == 1024)
                  {
                    char v65 = 0;
                    unsigned int v67 = 8;
                    unsigned int v63 = 16;
                  }
                }
              }
              else if (v64 == 128)
              {
                char v65 = 0;
                char v66 = 0;
                unsigned int v63 = 32;
                unsigned int v67 = 32;
              }
              else
              {
                char v66 = 1;
                unsigned int v67 = 0;
                if (v64 == 256)
                {
                  char v65 = 0;
                  char v66 = 0;
                  unsigned int v67 = 16;
                  unsigned int v63 = 32;
                }
              }
            }
            else
            {
              char v66 = 1;
              unsigned int v67 = 0;
              switch(v64)
              {
                case 4:
                  char v65 = 0;
                  char v66 = 0;
                  unsigned int v67 = 128;
                  unsigned int v63 = 256;
                  break;
                case 5:
                case 6:
                case 7:
                case 9:
                case 10:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 17:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                  break;
                case 8:
                  char v65 = 0;
                  char v66 = 0;
                  unsigned int v63 = 128;
                  unsigned int v67 = 128;
                  break;
                case 16:
                  char v65 = 0;
                  char v66 = 0;
                  unsigned int v67 = 64;
                  unsigned int v63 = 128;
                  break;
                case 32:
                  char v65 = 0;
                  char v66 = 0;
                  unsigned int v63 = 64;
                  unsigned int v67 = 64;
                  break;
                default:
                  if (v64 == 64)
                  {
                    char v65 = 0;
                    char v66 = 0;
                    unsigned int v67 = 32;
                    unsigned int v63 = 64;
                  }
                  break;
              }
            }
            unsigned int v150 = (v63 >> 3) - 1;
            if (v65) {
              unsigned int v151 = 0;
            }
            else {
              unsigned int v151 = 32 - __clz(~(-1 << -(char)__clz(v150)));
            }
            unsigned int v152 = (v67 >> 3) - 1;
            if (v66)
            {
              unsigned int v153 = 0;
              if (v151) {
                goto LABEL_174;
              }
            }
            else
            {
              unsigned int v153 = 32 - __clz(~(-1 << -(char)__clz(v152)));
              if (v153 | v151)
              {
LABEL_174:
                int v154 = 0;
                uint64_t v155 = 0;
                int v156 = v34 & v150;
                int v157 = v17 & v152;
                BOOL v158 = v151 != 0;
                BOOL v159 = v153 != 0;
                int v160 = 1;
                do
                {
                  --v151;
                  if (v158) {
                    v155 |= (unint64_t)(v160 & v156) << v154++;
                  }
                  else {
                    unsigned int v151 = 0;
                  }
                  --v153;
                  if (v159) {
                    v155 |= (unint64_t)(v160 & v157) << v154++;
                  }
                  else {
                    unsigned int v153 = 0;
                  }
                  v160 *= 2;
                  --v154;
                  BOOL v159 = v153 != 0;
                  BOOL v158 = v151 != 0;
                }
                while (v153 | v151);
                goto LABEL_186;
              }
            }
            uint64_t v155 = 0;
LABEL_186:
            unint64_t v51 = ((unint64_t)(v36 / v63 + v184 / v67 * ((v63 + v162) / v63)) << 14) + (v155 << 9);
            goto LABEL_59;
          }
          if (v176)
          {
            int v44 = 0;
            uint64_t v45 = 0;
            int v46 = 1;
            BOOL v47 = v172;
            BOOL v48 = v173;
            __int32 v50 = v174.i32[0];
            __int32 v49 = v174.i32[1];
            do
            {
              --v49;
              if (v48) {
                v45 |= (unint64_t)(v46 & v34) << v44++;
              }
              else {
                __int32 v49 = 0;
              }
              --v50;
              if (v47) {
                v45 |= (unint64_t)(v46 & v17) << v44++;
              }
              else {
                __int32 v50 = 0;
              }
              v46 *= 2;
              --v44;
              BOOL v47 = v50 != 0;
              BOOL v48 = v49 != 0;
            }
            while (v50 | v49);
          }
          else
          {
            uint64_t v45 = 0;
          }
          unint64_t v51 = v45 << 9;
LABEL_59:
          unsigned int v52 = *(_DWORD *)(v26 + 128) >> (*(unsigned char *)(v26 + 144) + a12);
          if (v52 <= 1) {
            unsigned int v52 = 1;
          }
          unsigned int v53 = v52 + 7;
          if (v53 < 0x10) {
            unsigned int v54 = 0;
          }
          else {
            unsigned int v54 = 32 - __clz(~(-1 << -(char)__clz((v53 >> 3) - 1)));
          }
          unsigned int v55 = *(_DWORD *)(v26 + 132) >> (*(unsigned char *)(v26 + 144) + a12);
          if (v55 <= 1) {
            unsigned int v55 = 1;
          }
          unsigned int v56 = v55 + 7;
          if (v56 < 0x10)
          {
            unsigned int v57 = 0;
            if (!v54)
            {
LABEL_81:
              uint64_t v59 = 0;
              goto LABEL_82;
            }
          }
          else
          {
            unsigned int v57 = 32 - __clz(~(-1 << -(char)__clz((v56 >> 3) - 1)));
            if (!(v57 | v54)) {
              goto LABEL_81;
            }
          }
          int v58 = 0;
          uint64_t v59 = 0;
          BOOL v60 = v54 != 0;
          BOOL v61 = v57 != 0;
          int v62 = 1;
          do
          {
            --v54;
            if (v60) {
              v59 |= (unint64_t)(v62 & v34) << v58++;
            }
            else {
              unsigned int v54 = 0;
            }
            --v57;
            if (v61) {
              v59 |= (unint64_t)(v62 & v17) << v58++;
            }
            else {
              unsigned int v57 = 0;
            }
            v62 *= 2;
            --v58;
            BOOL v61 = v57 != 0;
            BOOL v60 = v54 != 0;
          }
          while (v57 | v54);
LABEL_82:
          int v68 = v40 < 8 || v41;
          unint64_t v69 = (unsigned __int8 *)(a4 + 8 * v59);
          uint64_t v70 = v182 + 8 * (v38 - a7);
          int v71 = (void *)(a2 + v51);
          if (v35 < 8) {
            int v72 = 1;
          }
          else {
            int v72 = v68;
          }
          if (v189)
          {
            if (!v72)
            {
              uint64_t v77 = __dst;
LABEL_96:
              uint64_t v79 = 0;
              uint64_t v80 = v77;
              do
              {
                uint64_t v88 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,4u>::kSubblockPositions[v79 + 1];
                uint64_t v89 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,4u>::kSubblockPositions[v79];
                unsigned int v90 = (v40 - 4 * v89) & ~((int)(v40 - 4 * v89) >> 31);
                if (v90 >= 4) {
                  unsigned int v90 = 4;
                }
                unsigned int v91 = (v35 - 2 * v88) & ~((int)(v35 - 2 * v88) >> 31);
                if (v91 >= 2) {
                  unsigned int v91 = 2;
                }
                if (v90) {
                  BOOL v92 = v91 == 0;
                }
                else {
                  BOOL v92 = 1;
                }
                if (v92)
                {
                  char v87 = 0;
                }
                else
                {
                  uint64_t v81 = (long long *)(v70 + v31 * v88 + 32 * v89);
                  long long v82 = *v81;
                  long long v83 = v81[1];
                  uint64_t v84 = (long long *)((char *)v81 + v30);
                  long long v85 = *v84;
                  long long v86 = v84[1];
                  _OWORD *v80 = v82;
                  v80[1] = v85;
                  v80[2] = v83;
                  v80[3] = v86;
                  v80 += 4;
                  char v87 = 63;
                }
                *v69++ = v87;
                v79 += 2;
              }
              while (v79 != 16);
              a7 = v177;
              if (v189) {
                goto LABEL_155;
              }
              goto LABEL_27;
            }
            int v73 = v71;
            int v74 = v39;
            BOOL v75 = v41;
            int v76 = v38;
            memcpy(__dst, v71, sizeof(__dst));
            uint64_t v77 = __dst;
            int v71 = v73;
            int v38 = v76;
            BOOL v41 = v75;
            unsigned int v35 = v169;
            unsigned int v36 = 8 * v34;
            int v39 = v74;
            uint64_t v30 = a11;
            uint64_t v26 = v186;
          }
          else
          {
            uint64_t v77 = v71;
            if (!v72) {
              goto LABEL_96;
            }
          }
          int v175 = v71;
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE9ELj4ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = v26;
          float64x2_t v191 = (int16x8_t *)v77;
          unsigned __int8 v199 = v40;
          unsigned __int8 v200 = v35;
          unsigned int v195 = v171;
          unsigned int v196 = v38 - v36;
          float64x2_t v192 = v69;
          uint64_t v193 = v70;
          uint64_t v194 = v30;
          unsigned int v197 = v183;
          unsigned int v198 = v39;
          if (v41)
          {
            uint64_t v78 = v77;
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(v26 + 8) + 7384), block);
            uint64_t v77 = v78;
            uint64_t v26 = v186;
            a7 = v177;
            uint64_t v31 = 2 * a11;
            int v71 = v175;
            if (!v189) {
              goto LABEL_27;
            }
LABEL_155:
            memcpy(v71, v77, 0x200uLL);
            uint64_t v31 = 2 * a11;
            uint64_t v26 = v186;
            goto LABEL_27;
          }
          int8x8_t v170 = v77;
          uint64_t v93 = (uint64_t)&v77[AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v202, 64, (uint64_t)v77, *v69)];
          uint64_t v94 = v93
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v204, 64, v93, v69[1]);
          uint64_t v95 = v94
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v203, 64, v94, v69[2]);
          uint64_t v96 = v95
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v205, 64, v95, v69[3]);
          uint64_t v97 = v96
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v206, 64, v96, v69[4]);
          uint64_t v98 = v97
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v208, 64, v97, v69[5]);
          uint64_t v99 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v207, 64, v98, v69[6]);
          AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v209, 64, v98 + v99, v69[7]);
          uint64_t v100 = v197;
          if (v197 && v198)
          {
            uint64_t v101 = 0;
            unint64_t v102 = (unint64_t)v195 << 6;
            uint64_t v103 = 8 * v196;
            char v104 = &v202[0].i8[v102 + v103];
            uint64_t v105 = v193;
            uint64_t v106 = v194;
            unint64_t v107 = 8 * v198;
            if (v107 <= 1) {
              unint64_t v108 = 1;
            }
            else {
              unint64_t v108 = 8 * v198;
            }
            unint64_t v109 = v102 + v103;
            long long v110 = &v202[0].i8[v102 + v103];
            if (v108) {
              BOOL v111 = (v108 - 1) >> 32 == 0;
            }
            else {
              BOOL v111 = 0;
            }
            char v112 = !v111;
            uint64_t v113 = v108 & 0x7FFFFFFE0;
            uint64_t v114 = v108 & 0x7FFFFFFF8;
            unsigned int v115 = &v202[1].i8[v109];
            char v116 = (long long *)(v193 + 16);
            unint64_t v117 = v104;
            uint64_t v118 = v193;
            do
            {
              unsigned int v119 = (char *)(v105 + v106 * v101);
              unsigned int v120 = &v104[64 * v101];
              if ((unint64_t)(&v110[64 * v101] - v119) < 0x20) {
                char v121 = 1;
              }
              else {
                char v121 = v112;
              }
              if (v121)
              {
                int v122 = 0;
                goto LABEL_139;
              }
              if (v108 >= 0x20)
              {
                int v124 = v116;
                int v125 = v115;
                uint64_t v126 = v108 & 0x7FFFFFFE0;
                do
                {
                  long long v127 = *v124;
                  *((_OWORD *)v125 - 1) = *(v124 - 1);
                  *(_OWORD *)int v125 = v127;
                  v125 += 32;
                  v124 += 2;
                  v126 -= 32;
                }
                while (v126);
                if (v108 == v113) {
                  goto LABEL_122;
                }
                uint64_t v123 = v108 & 0x7FFFFFFE0;
                if ((v108 & 0x18) == 0)
                {
                  v119 += v113;
                  v120 += v113;
                  int v122 = v108 & 0xFFFFFFE0;
                  goto LABEL_139;
                }
              }
              else
              {
                uint64_t v123 = 0;
              }
              v120 += v114;
              unint64_t v128 = v123 - (v108 & 0x7FFFFFFF8);
              unint64_t v129 = (uint64_t *)(v118 + v123);
              unsigned int v130 = &v117[v123];
              do
              {
                uint64_t v131 = *v129++;
                *(void *)unsigned int v130 = v131;
                v130 += 8;
                v128 += 8;
              }
              while (v128);
              if (v108 == v114) {
                goto LABEL_122;
              }
              v119 += v114;
              int v122 = v108 & 0xFFFFFFF8;
LABEL_139:
              unsigned int v132 = v122 + 1;
              do
              {
                char v133 = *v119++;
                *v120++ = v133;
              }
              while (v107 > v132++);
LABEL_122:
              ++v101;
              v115 += 64;
              char v116 = (long long *)((char *)v116 + v106);
              v118 += v106;
              v117 += 64;
            }
            while (v101 != v100);
          }
          uint64_t v135 = 0;
          unsigned int v136 = v191;
          int v137 = (char *)v192;
          int v138 = v199;
          int v139 = v200;
          a7 = v177;
          uint64_t v26 = v186;
          uint64_t v31 = 2 * a11;
          int v71 = v175;
          do
          {
            uint64_t v145 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,4u>::kSubblockPositions[v135 + 1];
            uint64_t v146 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,4u>::kSubblockPositions[v135];
            unsigned int v147 = (v138 - 4 * v146) & ~((v138 - 4 * (int)v146) >> 31);
            if (v147 >= 4) {
              unsigned int v147 = 4;
            }
            unsigned int v148 = (v139 - 2 * v145) & ~((v139 - 2 * (int)v145) >> 31);
            if (v148 >= 2) {
              unsigned int v148 = 2;
            }
            if (v147) {
              BOOL v149 = v148 == 0;
            }
            else {
              BOOL v149 = 1;
            }
            if (v149)
            {
              char v144 = 0;
            }
            else
            {
              int8x8_t v140 = &v202[8 * v145 + 2 * v146];
              int16x8_t v141 = v140[1];
              int16x8_t v142 = v140[4];
              int16x8_t v143 = v140[5];
              *unsigned int v136 = *v140;
              v136[1] = v142;
              v136[2] = v141;
              v136[3] = v143;
              v136 += 4;
              char v144 = 63;
            }
            *v137++ = v144;
            v135 += 2;
          }
          while (v135 != 16);
          uint64_t v77 = v170;
          if (v189) {
            goto LABEL_155;
          }
LABEL_27:
          BOOL v21 = v34++ == v178 >> 3;
        }
        while (!v21);
        BOOL v21 = v17++ == v168;
      }
      while (!v21);
    }
  }
}

uint64_t AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, char a12)
{
  int16x8_t v174[24] = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v148 = a8;
  unsigned int v133 = a8 + a10 - 1;
  uint64_t v149 = a1;
  if (*(void *)(a1 + 168)) {
    int v17 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v17 = 0;
  }
  unsigned int v18 = a5 - 1;
  unsigned int v19 = a6 - 1;
  unsigned int v20 = a8 >> 3;
  unsigned int v132 = v133 >> 3;
  BOOL v21 = (v17 & 0xD00) == 0 || v17 == 768;
  int v22 = v17 & 0xE00;
  int v24 = !v21 && v22 != 1024;
  int v154 = v24;
  uint64_t result = a1;
  if (*(unsigned char *)(a1 + 232))
  {
    unsigned int v26 = *(unsigned __int8 *)(a1 + 255);
    unsigned int v27 = *(unsigned __int8 *)(a1 + 254);
    char v28 = __clz(v18);
    if (1 << v26 >= a6 || a5 >> v27)
    {
      if (!(a6 >> v26) && 1 << v27 < a5)
      {
        if (a6 < 2) {
          unsigned int v31 = 0;
        }
        else {
          unsigned int v31 = __clz(~(-1 << -(char)__clz(v19))) - 32;
        }
        v27 += v26 + v31;
        unsigned int v26 = -v31;
      }
    }
    else
    {
      unsigned int v29 = 32 - __clz(~(-1 << -v28));
      unsigned int v30 = v27 + v26;
      if (a5 < 2) {
        unsigned int v29 = 0;
      }
      unsigned int v26 = v30 - v29;
      unsigned int v27 = v29;
    }
    if (a5 < 2)
    {
      if (v27) {
        goto LABEL_27;
      }
    }
    else if (32 - __clz(~(-1 << -v28)) < v27)
    {
LABEL_27:
      BOOL v143 = 0;
LABEL_32:
      unsigned int v140 = v27 - 3;
      unsigned int v137 = v26 - 3;
      int v33 = -1 << *(unsigned char *)(*(void *)(a1 + 208) + 48);
      unsigned int v130 = (((~v33 + a5) & v33) + ~(-1 << v27)) >> v27;
      goto LABEL_33;
    }
    if (a6 < 2) {
      unsigned int v32 = 0;
    }
    else {
      unsigned int v32 = 32 - __clz(~(-1 << -(char)__clz(v19)));
    }
    BOOL v143 = v32 >= v26;
    goto LABEL_32;
  }
  BOOL v143 = 0;
  unsigned int v130 = 0;
  unsigned int v137 = 0;
  unsigned int v140 = 0;
LABEL_33:
  if (v20 <= v132)
  {
    unsigned int v142 = a7 + a9 - 1;
    unsigned int v129 = a7 >> 3;
    if (a7 >> 3 <= v142 >> 3)
    {
      unsigned int v152 = v18 >> 3;
      unsigned int v128 = v19 >> 3;
      int v151 = (v18 & 7) + 1;
      int v127 = (v19 & 7) + 1;
      uint32x2_t v34 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0x700000007);
      int8x8_t v35 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v34, 3uLL))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x1000000010, v34));
      __int32 v138 = v35.i32[0] | v35.i32[1];
      int8x8_t v136 = v35;
      BOOL v134 = v35.i32[0] != 0;
      BOOL v135 = v35.i32[1] != 0;
      unsigned int v141 = a7;
      do
      {
        unsigned int v36 = (8 * v20) | 7;
        if (8 * v20 <= v148) {
          int v37 = v148;
        }
        else {
          int v37 = 8 * v20;
        }
        if (v133 < v36) {
          unsigned int v36 = v133;
        }
        int v139 = v37 - 8 * v20;
        int v147 = v36 - v37 + 1;
        unsigned int v38 = v129;
        if (v20 == v128) {
          unsigned int v39 = v127;
        }
        else {
          unsigned int v39 = 8;
        }
        uint64_t v146 = a3 + (v37 - v148) * a11;
        unsigned int v150 = v39;
        do
        {
          unsigned int v40 = 8 * v38;
          unsigned int v41 = 8 * (v38 + 1) - 1;
          if (8 * v38 <= a7) {
            int v42 = a7;
          }
          else {
            int v42 = 8 * v38;
          }
          if (v142 < v41) {
            unsigned int v41 = v142;
          }
          int v43 = v41 - v42 + 1;
          if (v38 == v152) {
            unsigned int v44 = v151;
          }
          else {
            unsigned int v44 = 8;
          }
          BOOL v45 = 1;
          if (8 * v20 >= v148 && v40 >= a7)
          {
            int v46 = v151;
            if (v38 != v152) {
              int v46 = 8;
            }
            BOOL v45 = v43 != v46 || v147 != v39;
          }
          if (v143)
          {
            if (v140 | v137)
            {
              int v48 = 0;
              uint64_t v49 = 0;
              BOOL v50 = v137 != 0;
              int v51 = 1;
              BOOL v53 = v140 != 0;
              unsigned int v52 = v137;
              unsigned int v54 = v140;
              do
              {
                --v54;
                if (v53) {
                  v49 |= (unint64_t)(v38 & ~(-1 << v140) & v51) << v48++;
                }
                else {
                  unsigned int v54 = 0;
                }
                --v52;
                if (v50) {
                  v49 |= (unint64_t)(v20 & ~(-1 << v137) & v51) << v48++;
                }
                else {
                  unsigned int v52 = 0;
                }
                v51 *= 2;
                --v48;
                BOOL v50 = v52 != 0;
                BOOL v53 = v54 != 0;
              }
              while (v52 | v54);
            }
            else
            {
              uint64_t v49 = 0;
            }
            uint64_t v62 = *(void *)(result + 320) * ((v38 >> v140) + (v20 >> v137) * v130) + (v49 << 10);
          }
          else
          {
            if (v138)
            {
              int v55 = 0;
              uint64_t v56 = 0;
              int v57 = 1;
              BOOL v58 = v134;
              BOOL v59 = v135;
              __int32 v61 = v136.i32[0];
              __int32 v60 = v136.i32[1];
              do
              {
                --v60;
                if (v59) {
                  v56 |= (unint64_t)(v57 & v38) << v55++;
                }
                else {
                  __int32 v60 = 0;
                }
                --v61;
                if (v58) {
                  v56 |= (unint64_t)(v57 & v20) << v55++;
                }
                else {
                  __int32 v61 = 0;
                }
                v57 *= 2;
                --v55;
                BOOL v58 = v61 != 0;
                BOOL v59 = v60 != 0;
              }
              while (v61 | v60);
            }
            else
            {
              uint64_t v56 = 0;
            }
            uint64_t v62 = v56 << 10;
          }
          unsigned int v63 = *(_DWORD *)(result + 128) >> (*(unsigned char *)(result + 144) + a12);
          if (v63 <= 1) {
            unsigned int v63 = 1;
          }
          unsigned int v64 = v63 + 7;
          if (v64 < 0x10) {
            unsigned int v65 = 0;
          }
          else {
            unsigned int v65 = 32 - __clz(~(-1 << -(char)__clz((v64 >> 3) - 1)));
          }
          unsigned int v66 = *(_DWORD *)(result + 132) >> (*(unsigned char *)(result + 144) + a12);
          if (v66 <= 1) {
            unsigned int v66 = 1;
          }
          unsigned int v67 = v66 + 7;
          if (v67 < 0x10) {
            unsigned int v68 = 0;
          }
          else {
            unsigned int v68 = 32 - __clz(~(-1 << -(char)__clz((v67 >> 3) - 1)));
          }
          if (v68 | v65)
          {
            int v69 = 0;
            uint64_t v70 = 0;
            BOOL v71 = v65 != 0;
            BOOL v72 = v68 != 0;
            int v73 = 1;
            do
            {
              --v65;
              if (v71) {
                v70 |= (unint64_t)(v73 & v38) << v69++;
              }
              else {
                unsigned int v65 = 0;
              }
              --v68;
              if (v72) {
                v70 |= (unint64_t)(v73 & v20) << v69++;
              }
              else {
                unsigned int v68 = 0;
              }
              v73 *= 2;
              --v69;
              BOOL v72 = v68 != 0;
              BOOL v71 = v65 != 0;
            }
            while (v68 | v65);
          }
          else
          {
            uint64_t v70 = 0;
          }
          int v75 = v44 < 8 || v45;
          int v76 = (unsigned __int8 *)(a4 + 8 * v70);
          unsigned int v74 = v42 - a7;
          uint64_t v77 = v146 + 16 * (v42 - a7);
          uint64_t v78 = (unsigned char *)(a2 + v62);
          if (v39 < 8) {
            int v79 = 1;
          }
          else {
            int v79 = v75;
          }
          __src = v78;
          if (v154)
          {
            if (!v79)
            {
              uint64_t v78 = __dst;
LABEL_123:
              uint64_t v81 = (unsigned char *)(v146 + 16 * v74);
              uint64_t v82 = a11;
              unint64_t v83 = (unint64_t)v78;
              uint64_t v84 = (char *)(a4 + 8 * v70);
              goto LABEL_157;
            }
            char v80 = v44;
            memcpy(__dst, __src, sizeof(__dst));
            LOBYTE(v44) = v80;
            uint64_t v78 = __dst;
            LOBYTE(v39) = v150;
            uint64_t result = v149;
          }
          else if (!v79)
          {
            goto LABEL_123;
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE12ELj4ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = result;
          int v156 = v78;
          unsigned __int8 v164 = v44;
          unsigned __int8 v165 = v39;
          unsigned int v160 = v139;
          unsigned int v161 = v42 - v40;
          int v157 = v76;
          uint64_t v158 = v77;
          uint64_t v159 = a11;
          unsigned int v162 = v147;
          unsigned int v163 = v43;
          if (v45)
          {
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(result + 8) + 7384), block);
            goto LABEL_158;
          }
          uint64_t v85 = (uint64_t)&v78[AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)v167, 128, (uint64_t)v78, *v76)];
          uint64_t v86 = v85
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v169, 128, v85, v76[1]);
          uint64_t v87 = v86
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v168, 128, v86, v76[2]);
          uint64_t v88 = v87
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v170, 128, v87, v76[3]);
          uint64_t v89 = v88
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v171, 128, v88, v76[4]);
          uint64_t v90 = v89
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v173, 128, v89, v76[5]);
          uint64_t v91 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v172, 128, v90, v76[6]);
          AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)v174, 128, v90 + v91, v76[7]);
          uint64_t v92 = v162;
          if (v162 && v163)
          {
            uint64_t v93 = 0;
            unint64_t v94 = (unint64_t)v160 << 7;
            uint64_t v95 = 16 * v161;
            uint64_t v96 = &v167[v94 + v95];
            uint64_t v97 = v158;
            uint64_t v98 = v159;
            unint64_t v99 = 16 * v163;
            if (v99 <= 1) {
              unint64_t v100 = 1;
            }
            else {
              unint64_t v100 = 16 * v163;
            }
            unint64_t v101 = v94 + v95;
            unint64_t v102 = &v167[v94 + v95];
            if (v100) {
              BOOL v103 = (v100 - 1) >> 32 == 0;
            }
            else {
              BOOL v103 = 0;
            }
            char v104 = !v103;
            uint64_t v105 = v100 & 0xFFFFFFFE0;
            uint64_t v106 = v100 & 0xFFFFFFFF0;
            unint64_t v107 = &v167[v101 + 16];
            unint64_t v108 = (long long *)(v158 + 16);
            unint64_t v109 = v96;
            uint64_t v110 = v158;
            do
            {
              BOOL v111 = (char *)(v97 + v98 * v93);
              char v112 = &v96[128 * v93];
              if ((unint64_t)(&v102[128 * v93] - v111) < 0x20) {
                char v113 = 1;
              }
              else {
                char v113 = v104;
              }
              if (v113)
              {
                int v114 = 0;
                goto LABEL_153;
              }
              if (v100 >= 0x20)
              {
                unsigned int v120 = v108;
                char v121 = v107;
                uint64_t v122 = v100 & 0xFFFFFFFE0;
                do
                {
                  long long v123 = *v120;
                  *(v121 - 1) = *(v120 - 1);
                  *char v121 = v123;
                  v121 += 2;
                  v120 += 2;
                  v122 -= 32;
                }
                while (v122);
                if (v100 == v105) {
                  goto LABEL_136;
                }
                uint64_t v115 = v100 & 0xFFFFFFFE0;
                if ((v100 & 0x10) == 0)
                {
                  v111 += v105;
                  v112 += v105;
                  int v114 = v100 & 0xFFFFFFE0;
                  goto LABEL_153;
                }
              }
              else
              {
                uint64_t v115 = 0;
              }
              v112 += v106;
              unint64_t v116 = v115 - (v100 & 0xFFFFFFFF0);
              unint64_t v117 = (uint64_t *)(v110 + v115);
              uint64_t v118 = &v109[v115];
              do
              {
                uint64_t v119 = *v117++;
                *v118++ = v119;
                v116 += 8;
              }
              while (v116);
              if (v100 == v106) {
                goto LABEL_136;
              }
              v111 += v106;
              int v114 = v100 & 0xFFFFFFF0;
LABEL_153:
              unsigned int v124 = v114 + 1;
              do
              {
                char v125 = *v111++;
                *v112++ = v125;
              }
              while (v99 > v124++);
LABEL_136:
              ++v93;
              v107 += 128;
              unint64_t v108 = (long long *)((char *)v108 + v98);
              v110 += v98;
              v109 += 128;
            }
            while (v93 != v92);
          }
          unint64_t v83 = (unint64_t)v156;
          uint64_t v84 = (char *)v157;
          unsigned int v44 = v164;
          unsigned int v39 = v165;
          uint64_t v81 = v167;
          uint64_t v82 = 128;
LABEL_157:
          AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v81, v82, v83, v84, v44, v39);
LABEL_158:
          if (v154) {
            memcpy(__src, v78, 0x400uLL);
          }
          a7 = v141;
          BOOL v21 = v38++ == v142 >> 3;
          uint64_t result = v149;
          unsigned int v39 = v150;
        }
        while (!v21);
        BOOL v21 = v20++ == v132;
      }
      while (!v21);
    }
  }
  return result;
}

uint64_t AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, char a12)
{
  v221[24] = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v197 = a8;
  unsigned int v179 = a8 + a10 - 1;
  uint64_t v198 = a1;
  if (*(void *)(a1 + 168)) {
    int v17 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v17 = 0;
  }
  unsigned int v18 = a5 - 1;
  unsigned int v19 = a6 - 1;
  unsigned int v20 = a8 >> 3;
  unsigned int v178 = v179 >> 3;
  BOOL v21 = (v17 & 0xD00) == 0 || v17 == 768;
  int v22 = v17 & 0xE00;
  int v24 = !v21 && v22 != 1024;
  int v201 = v24;
  uint64_t result = a1;
  if (*(unsigned char *)(a1 + 232))
  {
    unsigned int v26 = *(unsigned __int8 *)(a1 + 255);
    unsigned int v27 = *(unsigned __int8 *)(a1 + 254);
    char v28 = __clz(v18);
    if (1 << v26 >= a6 || a5 >> v27)
    {
      if (!(a6 >> v26) && 1 << v27 < a5)
      {
        if (a6 < 2) {
          unsigned int v31 = 0;
        }
        else {
          unsigned int v31 = __clz(~(-1 << -(char)__clz(v19))) - 32;
        }
        v27 += v26 + v31;
        unsigned int v26 = -v31;
      }
    }
    else
    {
      unsigned int v29 = 32 - __clz(~(-1 << -v28));
      unsigned int v30 = v27 + v26;
      if (a5 < 2) {
        unsigned int v29 = 0;
      }
      unsigned int v26 = v30 - v29;
      unsigned int v27 = v29;
    }
    if (a5 < 2)
    {
      if (v27) {
        goto LABEL_27;
      }
    }
    else if (32 - __clz(~(-1 << -v28)) < v27)
    {
LABEL_27:
      BOOL v192 = 0;
LABEL_32:
      unsigned int v188 = v27 - 3;
      unsigned int v183 = v26 - 3;
      int v33 = -1 << *(unsigned char *)(*(void *)(a1 + 208) + 48);
      unsigned int v176 = (((~v33 + a5) & v33) + ~(-1 << v27)) >> v27;
      goto LABEL_33;
    }
    if (a6 < 2) {
      unsigned int v32 = 0;
    }
    else {
      unsigned int v32 = 32 - __clz(~(-1 << -(char)__clz(v19)));
    }
    BOOL v192 = v32 >= v26;
    goto LABEL_32;
  }
  BOOL v192 = 0;
  unsigned int v176 = 0;
  unsigned int v183 = 0;
  unsigned int v188 = 0;
LABEL_33:
  if (v20 <= v178)
  {
    unsigned int v191 = a7 + a9 - 1;
    unsigned int v175 = a7 >> 3;
    if (a7 >> 3 <= v191 >> 3)
    {
      unsigned int v200 = v18 >> 3;
      unsigned int v174 = v19 >> 3;
      int v199 = (v18 & 7) + 1;
      int v173 = (v19 & 7) + 1;
      int v172 = ~(-1 << v183);
      uint32x2_t v34 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0x700000007);
      int8x8_t v35 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v34, 3uLL))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x1000000010, v34));
      __int32 v186 = v35.i32[0] | v35.i32[1];
      int8x8_t v182 = v35;
      BOOL v181 = v35.i32[1] != 0;
      uint64_t v36 = a11;
      BOOL v180 = v35.i32[0] != 0;
      uint64_t v37 = 2 * a11;
      unsigned int v190 = a7;
      do
      {
        unsigned int v38 = (8 * v20) | 7;
        if (8 * v20 <= v197) {
          int v39 = v197;
        }
        else {
          int v39 = 8 * v20;
        }
        if (v179 < v38) {
          unsigned int v38 = v179;
        }
        int v187 = v39 - 8 * v20;
        int v196 = v38 - v39 + 1;
        unsigned int v40 = v175;
        if (v20 == v174) {
          unsigned int v41 = v173;
        }
        else {
          unsigned int v41 = 8;
        }
        int v42 = v20 & v172;
        uint64_t v195 = a3 + (v39 - v197) * v36;
        do
        {
          unsigned int v43 = 8 * v40;
          unsigned int v44 = 8 * (v40 + 1) - 1;
          if (8 * v40 <= a7) {
            int v45 = a7;
          }
          else {
            int v45 = 8 * v40;
          }
          if (v191 < v44) {
            unsigned int v44 = v191;
          }
          int v46 = v44 - v45 + 1;
          if (v40 == v200) {
            unsigned int v47 = v199;
          }
          else {
            unsigned int v47 = 8;
          }
          BOOL v48 = 1;
          if (8 * v20 >= v197 && v43 >= a7)
          {
            int v49 = v199;
            if (v40 != v200) {
              int v49 = 8;
            }
            BOOL v48 = v46 != v49 || v196 != v41;
          }
          if (v192)
          {
            if (v188 | v183)
            {
              int v51 = 0;
              uint64_t v52 = 0;
              BOOL v53 = v183 != 0;
              int v54 = 1;
              BOOL v56 = v188 != 0;
              unsigned int v55 = v183;
              unsigned int v57 = v188;
              do
              {
                --v57;
                if (v56) {
                  v52 |= (unint64_t)(v40 & ~(-1 << v188) & v54) << v51++;
                }
                else {
                  unsigned int v57 = 0;
                }
                --v55;
                if (v53) {
                  v52 |= (unint64_t)(v42 & v54) << v51++;
                }
                else {
                  unsigned int v55 = 0;
                }
                v54 *= 2;
                --v51;
                BOOL v53 = v55 != 0;
                BOOL v56 = v57 != 0;
              }
              while (v55 | v57);
            }
            else
            {
              uint64_t v52 = 0;
            }
            uint64_t v65 = *(void *)(result + 320) * ((v40 >> v188) + (v20 >> v183) * v176) + (v52 << 10);
          }
          else
          {
            if (v186)
            {
              int v58 = 0;
              uint64_t v59 = 0;
              int v60 = 1;
              BOOL v61 = v180;
              BOOL v62 = v181;
              __int32 v64 = v182.i32[0];
              __int32 v63 = v182.i32[1];
              do
              {
                --v63;
                if (v62) {
                  v59 |= (unint64_t)(v60 & v40) << v58++;
                }
                else {
                  __int32 v63 = 0;
                }
                --v64;
                if (v61) {
                  v59 |= (unint64_t)(v60 & v20) << v58++;
                }
                else {
                  __int32 v64 = 0;
                }
                v60 *= 2;
                --v58;
                BOOL v61 = v64 != 0;
                BOOL v62 = v63 != 0;
              }
              while (v64 | v63);
            }
            else
            {
              uint64_t v59 = 0;
            }
            uint64_t v65 = v59 << 10;
          }
          unsigned int v66 = *(_DWORD *)(result + 128) >> (*(unsigned char *)(result + 144) + a12);
          if (v66 <= 1) {
            unsigned int v66 = 1;
          }
          unsigned int v67 = v66 + 7;
          if (v67 < 0x10) {
            unsigned int v68 = 0;
          }
          else {
            unsigned int v68 = 32 - __clz(~(-1 << -(char)__clz((v67 >> 3) - 1)));
          }
          unsigned int v69 = *(_DWORD *)(result + 132) >> (*(unsigned char *)(result + 144) + a12);
          if (v69 <= 1) {
            unsigned int v69 = 1;
          }
          unsigned int v70 = v69 + 7;
          if (v70 < 0x10)
          {
            unsigned int v71 = 0;
            if (!v68)
            {
LABEL_111:
              uint64_t v73 = 0;
              goto LABEL_112;
            }
          }
          else
          {
            unsigned int v71 = 32 - __clz(~(-1 << -(char)__clz((v70 >> 3) - 1)));
            if (!(v71 | v68)) {
              goto LABEL_111;
            }
          }
          int v72 = 0;
          uint64_t v73 = 0;
          BOOL v74 = v68 != 0;
          BOOL v75 = v71 != 0;
          int v76 = 1;
          do
          {
            --v68;
            if (v74) {
              v73 |= (unint64_t)(v76 & v40) << v72++;
            }
            else {
              unsigned int v68 = 0;
            }
            --v71;
            if (v75) {
              v73 |= (unint64_t)(v76 & v20) << v72++;
            }
            else {
              unsigned int v71 = 0;
            }
            v76 *= 2;
            --v72;
            BOOL v75 = v71 != 0;
            BOOL v74 = v68 != 0;
          }
          while (v71 | v68);
LABEL_112:
          unsigned int v77 = v45 - a7;
          int v78 = v47 < 8 || v48;
          int v79 = (unsigned __int8 *)(a4 + 8 * v73);
          uint64_t v80 = v195 + 16 * v77;
          uint64_t v81 = (void *)(a2 + v65);
          if (v41 < 8) {
            int v82 = 1;
          }
          else {
            int v82 = v78;
          }
          if (v201)
          {
            if (!v82)
            {
              uint64_t v86 = __dst;
LABEL_125:
              uint64_t v88 = 0;
              uint64_t v89 = v86;
              do
              {
                uint64_t v102 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,4u>::kSubblockPositions[v88 + 1];
                uint64_t v103 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,4u>::kSubblockPositions[v88];
                unsigned int v104 = (v47 - 4 * v103) & ~((int)(v47 - 4 * v103) >> 31);
                if (v104 >= 4) {
                  unsigned int v104 = 4;
                }
                unsigned int v105 = (v41 - 2 * v102) & ~((int)(v41 - 2 * v102) >> 31);
                if (v105 >= 2) {
                  unsigned int v105 = 2;
                }
                if (v104) {
                  BOOL v106 = v105 == 0;
                }
                else {
                  BOOL v106 = 1;
                }
                if (v106)
                {
                  char v101 = 0;
                }
                else
                {
                  uint64_t v90 = (long long *)(v80 + v37 * v102 + (v103 << 6));
                  uint64_t v91 = v90 + 2;
                  long long v93 = *v90;
                  long long v94 = v90[1];
                  uint64_t v92 = (long long *)((char *)v90 + v36);
                  long long v95 = *v91;
                  long long v96 = v91[1];
                  long long v97 = *v92;
                  long long v98 = v92[1];
                  v92 += 2;
                  long long v99 = *v92;
                  long long v100 = v92[1];
                  *uint64_t v89 = v93;
                  v89[1] = v94;
                  v89[2] = v97;
                  v89[3] = v98;
                  v89[4] = v95;
                  v89[5] = v96;
                  v89[6] = v99;
                  v89[7] = v100;
                  v89 += 8;
                  char v101 = 127;
                }
                *v79++ = v101;
                v88 += 2;
              }
              while (v88 != 16);
              a7 = v190;
LABEL_138:
              unsigned int v107 = v40 + 1;
              if (v201) {
                goto LABEL_47;
              }
              goto LABEL_48;
            }
            unint64_t v83 = v81;
            int v84 = v46;
            BOOL v184 = v48;
            int v85 = v45;
            memcpy(__dst, v81, sizeof(__dst));
            int v45 = v85;
            BOOL v48 = v184;
            unsigned int v43 = 8 * v40;
            int v46 = v84;
            uint64_t v86 = __dst;
            uint64_t v81 = v83;
            int v42 = v20 & v172;
            uint64_t v36 = a11;
            uint64_t result = v198;
          }
          else
          {
            uint64_t v86 = v81;
            if (!v82) {
              goto LABEL_125;
            }
          }
          int v189 = v81;
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE12ELj4ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = result;
          float64x2_t v203 = v86;
          unsigned __int8 v211 = v47;
          unsigned __int8 v212 = v41;
          unsigned int v207 = v187;
          unsigned int v208 = v45 - v43;
          float64x2_t v204 = v79;
          uint64_t v205 = v80;
          uint64_t v206 = v36;
          unsigned int v209 = v196;
          unsigned int v210 = v46;
          if (v48)
          {
            uint64_t v87 = v86;
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(result + 8) + 7384), block);
            uint64_t v86 = v87;
            uint64_t v36 = a11;
            uint64_t result = v198;
            a7 = v190;
            uint64_t v81 = v189;
            uint64_t v37 = 2 * a11;
            goto LABEL_138;
          }
          unsigned int v185 = v86;
          uint64_t v108 = (uint64_t)&v86[AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)v214, 128, (uint64_t)v86, *v79)];
          uint64_t v109 = v108
               + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v216, 128, v108, v79[1]);
          uint64_t v110 = v109
               + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v215, 128, v109, v79[2]);
          uint64_t v111 = v110
               + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v217, 128, v110, v79[3]);
          uint64_t v112 = v111
               + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v218, 128, v111, v79[4]);
          uint64_t v113 = v112
               + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v220, 128, v112, v79[5]);
          uint64_t v114 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v219, 128, v113, v79[6]);
          AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)v221, 128, v113 + v114, v79[7]);
          uint64_t v115 = v209;
          if (v209 && v210)
          {
            uint64_t v116 = 0;
            unint64_t v117 = (unint64_t)v207 << 7;
            uint64_t v118 = 16 * v208;
            uint64_t v119 = &v214[v117 + v118];
            uint64_t v120 = v205;
            uint64_t v121 = v206;
            unint64_t v122 = 16 * v210;
            if (v122 <= 1) {
              unint64_t v123 = 1;
            }
            else {
              unint64_t v123 = 16 * v210;
            }
            unint64_t v124 = v117 + v118;
            char v125 = &v214[v117 + v118];
            if (v123) {
              BOOL v126 = (v123 - 1) >> 32 == 0;
            }
            else {
              BOOL v126 = 0;
            }
            char v127 = !v126;
            uint64_t v128 = v123 & 0xFFFFFFFE0;
            uint64_t v129 = v123 & 0xFFFFFFFF0;
            unsigned int v130 = &v214[v124 + 16];
            uint64_t v131 = (long long *)(v205 + 16);
            unsigned int v132 = v119;
            uint64_t v133 = v205;
            do
            {
              BOOL v134 = (char *)(v120 + v121 * v116);
              BOOL v135 = &v119[128 * v116];
              if ((unint64_t)(&v125[128 * v116] - v134) < 0x20) {
                char v136 = 1;
              }
              else {
                char v136 = v127;
              }
              if (v136)
              {
                int v137 = 0;
                goto LABEL_169;
              }
              if (v123 >= 0x20)
              {
                BOOL v143 = v131;
                char v144 = v130;
                uint64_t v145 = v123 & 0xFFFFFFFE0;
                do
                {
                  long long v146 = *v143;
                  *(v144 - 1) = *(v143 - 1);
                  *char v144 = v146;
                  v144 += 2;
                  v143 += 2;
                  v145 -= 32;
                }
                while (v145);
                if (v123 == v128) {
                  goto LABEL_152;
                }
                uint64_t v138 = v123 & 0xFFFFFFFE0;
                if ((v123 & 0x10) == 0)
                {
                  v134 += v128;
                  v135 += v128;
                  int v137 = v123 & 0xFFFFFFE0;
                  goto LABEL_169;
                }
              }
              else
              {
                uint64_t v138 = 0;
              }
              v135 += v129;
              unint64_t v139 = v138 - (v123 & 0xFFFFFFFF0);
              unsigned int v140 = (uint64_t *)(v133 + v138);
              unsigned int v141 = &v132[v138];
              do
              {
                uint64_t v142 = *v140++;
                *v141++ = v142;
                v139 += 8;
              }
              while (v139);
              if (v123 == v129) {
                goto LABEL_152;
              }
              v134 += v129;
              int v137 = v123 & 0xFFFFFFF0;
LABEL_169:
              unsigned int v147 = v137 + 1;
              do
              {
                char v148 = *v134++;
                *v135++ = v148;
              }
              while (v122 > v147++);
LABEL_152:
              ++v116;
              v130 += 128;
              uint64_t v131 = (long long *)((char *)v131 + v121);
              v133 += v121;
              v132 += 128;
            }
            while (v116 != v115);
          }
          uint64_t v150 = 0;
          int v151 = v203;
          unsigned int v152 = (char *)v204;
          int v153 = v211;
          int v154 = v212;
          a7 = v190;
          uint64_t v36 = a11;
          uint64_t result = v198;
          uint64_t v37 = 2 * a11;
          unsigned int v107 = v40 + 1;
          uint64_t v86 = v185;
          do
          {
            uint64_t v167 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,4u>::kSubblockPositions[v150 + 1];
            uint64_t v168 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,4u>::kSubblockPositions[v150];
            unsigned int v169 = (v153 - 4 * v168) & ~((v153 - 4 * (int)v168) >> 31);
            if (v169 >= 4) {
              unsigned int v169 = 4;
            }
            unsigned int v170 = (v154 - 2 * v167) & ~((v154 - 2 * (int)v167) >> 31);
            if (v170 >= 2) {
              unsigned int v170 = 2;
            }
            if (v169) {
              BOOL v171 = v170 == 0;
            }
            else {
              BOOL v171 = 1;
            }
            if (v171)
            {
              char v166 = 0;
            }
            else
            {
              uint64_t v155 = (long long *)&v214[256 * v167 + 64 * v168];
              long long v157 = *v155;
              long long v158 = v155[1];
              int v156 = v155 + 2;
              uint64_t v159 = v155 + 8;
              v155 += 10;
              long long v160 = *v156;
              long long v161 = v156[1];
              long long v162 = *v159;
              long long v163 = v159[1];
              long long v164 = *v155;
              long long v165 = v155[1];
              *int v151 = v157;
              v151[1] = v158;
              v151[2] = v162;
              v151[3] = v163;
              v151[4] = v160;
              v151[5] = v161;
              v151[6] = v164;
              v151[7] = v165;
              v151 += 8;
              char v166 = 127;
            }
            *v152++ = v166;
            v150 += 2;
          }
          while (v150 != 16);
          uint64_t v81 = v189;
          if (v201)
          {
LABEL_47:
            memcpy(v81, v86, 0x400uLL);
            uint64_t v37 = 2 * a11;
            uint64_t v36 = a11;
            uint64_t result = v198;
          }
LABEL_48:
          BOOL v21 = v40 == v191 >> 3;
          unsigned int v40 = v107;
        }
        while (!v21);
        BOOL v21 = v20++ == v178;
      }
      while (!v21);
    }
  }
  return result;
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, int a12)
{
  int16x8_t v177[24] = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  uint64_t v17 = a1;
  unsigned int v152 = a8;
  unsigned int v18 = a8 >> 3;
  unsigned int v136 = a8 + a10 - 1;
  unsigned int v138 = v136 >> 3;
  unsigned int v19 = *(unsigned __int8 *)(*(void *)(a1 + 208) + 88);
  unsigned int v20 = *(_DWORD *)(a1 + 112);
  uint64_t v153 = v17;
  if (*(void *)(v17 + 168))
  {
    __int16 CacheMode = IOSurfaceGetCacheMode();
    uint64_t v17 = v153;
    int v22 = CacheMode & 0xF00;
  }
  else
  {
    int v22 = 0;
  }
  BOOL v23 = (v22 & 0xD00) == 0 || v22 == 768;
  int v24 = v22 & 0xE00;
  int v26 = !v23 && v24 != 1024;
  int v157 = v26;
  BOOL isLevelTiled = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::isLevelTiled(v17, *(_DWORD *)(v17 + 144) + a12);
  uint64_t v28 = v153;
  BOOL v146 = isLevelTiled;
  if (v18 <= v138)
  {
    unsigned int v145 = a7 + a9 - 1;
    unsigned int v135 = a7 >> 3;
    if (a7 >> 3 <= v145 >> 3)
    {
      unsigned int v132 = a5 - 1;
      unsigned int v134 = (a6 - 1) >> 3;
      int v155 = ((a5 - 1) & 7) + 1;
      unsigned int v156 = (a5 - 1) >> 3;
      int v133 = ((a6 - 1) & 7) + 1;
      uint32x2_t v29 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0x700000007);
      int8x8_t v30 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v29, 3uLL))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x1000000010, v29));
      __int32 v143 = v30.i32[0] | v30.i32[1];
      int8x8_t v142 = v30;
      BOOL v140 = v30.i32[0] != 0;
      BOOL v141 = v30.i32[1] != 0;
      unint64_t v131 = 8 * v20 * (unint64_t)v19;
      unsigned int v144 = a7;
      do
      {
        unsigned int v31 = (8 * v18) | 7;
        if (8 * v18 <= v152) {
          int v32 = v152;
        }
        else {
          int v32 = 8 * v18;
        }
        unsigned int v33 = v135;
        if (v136 < v31) {
          unsigned int v31 = v136;
        }
        int v139 = v32 - 8 * v18;
        int v150 = v31 - v32 + 1;
        unsigned int v151 = 8 * v18;
        if (v18 == v134) {
          unsigned int v34 = v133;
        }
        else {
          unsigned int v34 = 8;
        }
        uint64_t v149 = a3 + (v32 - v152) * a11;
        unsigned int v154 = v34;
        do
        {
          unsigned int v35 = 8 * v33;
          unsigned int v36 = 8 * (v33 + 1) - 1;
          if (8 * v33 <= a7) {
            int v37 = a7;
          }
          else {
            int v37 = 8 * v33;
          }
          if (v145 < v36) {
            unsigned int v36 = v145;
          }
          int v38 = v36 - v37 + 1;
          if (v33 == v156) {
            unsigned int v39 = v155;
          }
          else {
            unsigned int v39 = 8;
          }
          BOOL v40 = 1;
          if (v151 >= v152 && v35 >= a7)
          {
            int v41 = v155;
            if (v33 != v156) {
              int v41 = 8;
            }
            BOOL v40 = v38 != v41 || v150 != v34;
          }
          if (v146)
          {
            unsigned int v62 = 0;
            uint64_t v63 = v131 >> (*(unsigned char *)(v28 + 57) != 0);
            char v64 = 1;
            if (v63 > 127)
            {
              if (v63 > 511)
              {
                if (v63 == 512)
                {
                  char v64 = 0;
                  char v65 = 0;
                  unsigned int v62 = 16;
                  unsigned int v66 = 16;
                }
                else
                {
                  char v65 = 1;
                  unsigned int v66 = 0;
                  if (v63 == 1024)
                  {
                    char v64 = 0;
                    unsigned int v66 = 8;
                    unsigned int v62 = 16;
                  }
                }
              }
              else if (v63 == 128)
              {
                char v64 = 0;
                char v65 = 0;
                unsigned int v62 = 32;
                unsigned int v66 = 32;
              }
              else
              {
                char v65 = 1;
                unsigned int v66 = 0;
                if (v63 == 256)
                {
                  char v64 = 0;
                  char v65 = 0;
                  unsigned int v66 = 16;
                  unsigned int v62 = 32;
                }
              }
            }
            else
            {
              char v65 = 1;
              unsigned int v66 = 0;
              switch(v63)
              {
                case 4:
                  char v64 = 0;
                  char v65 = 0;
                  unsigned int v66 = 128;
                  unsigned int v62 = 256;
                  break;
                case 5:
                case 6:
                case 7:
                case 9:
                case 10:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 17:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                  break;
                case 8:
                  char v64 = 0;
                  char v65 = 0;
                  unsigned int v62 = 128;
                  unsigned int v66 = 128;
                  break;
                case 16:
                  char v64 = 0;
                  char v65 = 0;
                  unsigned int v66 = 64;
                  unsigned int v62 = 128;
                  break;
                case 32:
                  char v64 = 0;
                  char v65 = 0;
                  unsigned int v62 = 64;
                  unsigned int v66 = 64;
                  break;
                default:
                  if (v63 == 64)
                  {
                    char v64 = 0;
                    char v65 = 0;
                    unsigned int v66 = 32;
                    unsigned int v62 = 64;
                  }
                  break;
              }
            }
            unsigned int v120 = (v62 >> 3) - 1;
            if (v64) {
              unsigned int v121 = 0;
            }
            else {
              unsigned int v121 = 32 - __clz(~(-1 << -(char)__clz(v120)));
            }
            unsigned int v122 = (v66 >> 3) - 1;
            if (v65)
            {
              unsigned int v123 = 0;
              if (v121) {
                goto LABEL_149;
              }
            }
            else
            {
              unsigned int v123 = 32 - __clz(~(-1 << -(char)__clz(v122)));
              if (v123 | v121)
              {
LABEL_149:
                int v124 = 0;
                uint64_t v125 = 0;
                int v126 = v33 & v120;
                int v127 = v18 & v122;
                BOOL v128 = v121 != 0;
                BOOL v129 = v123 != 0;
                int v130 = 1;
                do
                {
                  --v121;
                  if (v128) {
                    v125 |= (unint64_t)(v130 & v126) << v124++;
                  }
                  else {
                    unsigned int v121 = 0;
                  }
                  --v123;
                  if (v129) {
                    v125 |= (unint64_t)(v130 & v127) << v124++;
                  }
                  else {
                    unsigned int v123 = 0;
                  }
                  v130 *= 2;
                  --v124;
                  BOOL v129 = v123 != 0;
                  BOOL v128 = v121 != 0;
                }
                while (v123 | v121);
                goto LABEL_161;
              }
            }
            uint64_t v125 = 0;
LABEL_161:
            unint64_t v50 = ((unint64_t)(v35 / v62 + v151 / v66 * ((v62 + v132) / v62)) << 14) + (v125 << 10);
            goto LABEL_59;
          }
          if (v143)
          {
            int v43 = 0;
            uint64_t v44 = 0;
            int v45 = 1;
            BOOL v46 = v140;
            BOOL v47 = v141;
            __int32 v49 = v142.i32[0];
            __int32 v48 = v142.i32[1];
            do
            {
              --v48;
              if (v47) {
                v44 |= (unint64_t)(v45 & v33) << v43++;
              }
              else {
                __int32 v48 = 0;
              }
              --v49;
              if (v46) {
                v44 |= (unint64_t)(v45 & v18) << v43++;
              }
              else {
                __int32 v49 = 0;
              }
              v45 *= 2;
              --v43;
              BOOL v46 = v49 != 0;
              BOOL v47 = v48 != 0;
            }
            while (v49 | v48);
          }
          else
          {
            uint64_t v44 = 0;
          }
          unint64_t v50 = v44 << 10;
LABEL_59:
          unsigned int v51 = *(_DWORD *)(v28 + 128) >> (*(unsigned char *)(v28 + 144) + a12);
          if (v51 <= 1) {
            unsigned int v51 = 1;
          }
          unsigned int v52 = v51 + 7;
          if (v52 < 0x10) {
            unsigned int v53 = 0;
          }
          else {
            unsigned int v53 = 32 - __clz(~(-1 << -(char)__clz((v52 >> 3) - 1)));
          }
          unsigned int v54 = *(_DWORD *)(v28 + 132) >> (*(unsigned char *)(v28 + 144) + a12);
          if (v54 <= 1) {
            unsigned int v54 = 1;
          }
          unsigned int v55 = v54 + 7;
          if (v55 < 0x10)
          {
            unsigned int v56 = 0;
            if (!v53)
            {
LABEL_81:
              uint64_t v58 = 0;
              goto LABEL_82;
            }
          }
          else
          {
            unsigned int v56 = 32 - __clz(~(-1 << -(char)__clz((v55 >> 3) - 1)));
            if (!(v56 | v53)) {
              goto LABEL_81;
            }
          }
          int v57 = 0;
          uint64_t v58 = 0;
          BOOL v59 = v53 != 0;
          BOOL v60 = v56 != 0;
          int v61 = 1;
          do
          {
            --v53;
            if (v59) {
              v58 |= (unint64_t)(v61 & v33) << v57++;
            }
            else {
              unsigned int v53 = 0;
            }
            --v56;
            if (v60) {
              v58 |= (unint64_t)(v61 & v18) << v57++;
            }
            else {
              unsigned int v56 = 0;
            }
            v61 *= 2;
            --v57;
            BOOL v60 = v56 != 0;
            BOOL v59 = v53 != 0;
          }
          while (v56 | v53);
LABEL_82:
          int v67 = v39 < 8 || v40;
          unsigned int v68 = (char *)(a4 + 8 * v58);
          unint64_t v69 = v149 + 16 * (v37 - a7);
          unsigned int v70 = (void *)(a2 + v50);
          if (v34 < 8) {
            int v71 = 1;
          }
          else {
            int v71 = v67;
          }
          if (v157)
          {
            if (!v71)
            {
              unsigned int v77 = __dst;
LABEL_95:
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock(v69, a11, (unint64_t)v77, v68, v39, v34);
              a7 = v144;
              goto LABEL_129;
            }
            int v72 = v70;
            char v73 = v39;
            int v74 = v38;
            BOOL v75 = v70;
            BOOL v76 = v40;
            memcpy(__dst, v72, sizeof(__dst));
            BOOL v40 = v76;
            unsigned int v70 = v75;
            int v38 = v74;
            LOBYTE(v39) = v73;
            unsigned int v35 = 8 * v33;
            unsigned int v77 = __dst;
            LOBYTE(v34) = v154;
            uint64_t v28 = v153;
          }
          else
          {
            unsigned int v77 = v70;
            if (!v71) {
              goto LABEL_95;
            }
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE12ELj4ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = v28;
          uint64_t v159 = v77;
          unsigned __int8 v167 = v39;
          unsigned __int8 v168 = v34;
          unsigned int v163 = v139;
          unsigned int v164 = v37 - v35;
          long long v160 = v68;
          unint64_t v161 = v69;
          uint64_t v162 = a11;
          unsigned int v165 = v150;
          unsigned int v166 = v38;
          if (v40)
          {
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(v28 + 8) + 7384), block);
            a7 = v144;
            goto LABEL_129;
          }
          uint64_t v78 = (uint64_t)&v77[AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)v170, 128, (uint64_t)v77, *v68)];
          uint64_t v79 = v78
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v172, 128, v78, v68[1]);
          uint64_t v80 = v79
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v171, 128, v79, v68[2]);
          uint64_t v81 = v80
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v173, 128, v80, v68[3]);
          uint64_t v82 = v81
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v174, 128, v81, v68[4]);
          uint64_t v83 = v82
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v176, 128, v82, v68[5]);
          uint64_t v84 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v175, 128, v83, v68[6]);
          AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)v177, 128, v83 + v84, v68[7]);
          uint64_t v85 = v165;
          a7 = v144;
          if (v165 && v166)
          {
            uint64_t v86 = 0;
            unint64_t v87 = (unint64_t)v163 << 7;
            uint64_t v88 = 16 * v164;
            uint64_t v89 = &v170[v87 + v88];
            unint64_t v90 = v161;
            uint64_t v91 = v162;
            unint64_t v92 = 16 * v166;
            if (v92 <= 1) {
              unint64_t v93 = 1;
            }
            else {
              unint64_t v93 = 16 * v166;
            }
            unint64_t v94 = v87 + v88;
            long long v95 = &v170[v87 + v88];
            if (v93) {
              BOOL v96 = (v93 - 1) >> 32 == 0;
            }
            else {
              BOOL v96 = 0;
            }
            char v97 = !v96;
            uint64_t v98 = v93 & 0xFFFFFFFE0;
            uint64_t v99 = v93 & 0xFFFFFFFF0;
            long long v100 = &v170[v94 + 16];
            char v101 = (long long *)(v161 + 16);
            uint64_t v102 = v89;
            unint64_t v103 = v161;
            do
            {
              unsigned int v104 = (char *)(v90 + v91 * v86);
              unsigned int v105 = &v89[128 * v86];
              if ((unint64_t)(&v95[128 * v86] - v104) < 0x20) {
                char v106 = 1;
              }
              else {
                char v106 = v97;
              }
              if (v106)
              {
                int v107 = 0;
                goto LABEL_125;
              }
              if (v93 >= 0x20)
              {
                uint64_t v113 = v101;
                uint64_t v114 = v100;
                uint64_t v115 = v93 & 0xFFFFFFFE0;
                do
                {
                  long long v116 = *v113;
                  *(v114 - 1) = *(v113 - 1);
                  *uint64_t v114 = v116;
                  v114 += 2;
                  v113 += 2;
                  v115 -= 32;
                }
                while (v115);
                if (v93 == v98) {
                  goto LABEL_108;
                }
                uint64_t v108 = v93 & 0xFFFFFFFE0;
                if ((v93 & 0x10) == 0)
                {
                  v104 += v98;
                  v105 += v98;
                  int v107 = v93 & 0xFFFFFFE0;
                  goto LABEL_125;
                }
              }
              else
              {
                uint64_t v108 = 0;
              }
              v105 += v99;
              unint64_t v109 = v108 - (v93 & 0xFFFFFFFF0);
              uint64_t v110 = (uint64_t *)(v103 + v108);
              uint64_t v111 = &v102[v108];
              do
              {
                uint64_t v112 = *v110++;
                *v111++ = v112;
                v109 += 8;
              }
              while (v109);
              if (v93 == v99) {
                goto LABEL_108;
              }
              v104 += v99;
              int v107 = v93 & 0xFFFFFFF0;
LABEL_125:
              unsigned int v117 = v107 + 1;
              do
              {
                char v118 = *v104++;
                *v105++ = v118;
              }
              while (v92 > v117++);
LABEL_108:
              ++v86;
              v100 += 128;
              char v101 = (long long *)((char *)v101 + v91);
              v103 += v91;
              v102 += 128;
            }
            while (v86 != v85);
          }
          AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v170, 128, (unint64_t)v159, v160, v167, v168);
LABEL_129:
          if (v157) {
            memcpy(v70, v77, 0x400uLL);
          }
          BOOL v23 = v33++ == v145 >> 3;
          uint64_t v28 = v153;
          unsigned int v34 = v154;
        }
        while (!v23);
        BOOL v23 = v18++ == v138;
      }
      while (!v23);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, int a12)
{
  v222[24] = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v198 = a8;
  unsigned int v17 = a8 >> 3;
  unsigned int v179 = a8 + a10 - 1;
  unsigned int v181 = v179 >> 3;
  unsigned int v18 = *(unsigned __int8 *)(*(void *)(a1 + 208) + 88);
  unsigned int v19 = *(_DWORD *)(a1 + 112);
  uint64_t v199 = a1;
  if (*(void *)(a1 + 168)) {
    int v20 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v20 = 0;
  }
  BOOL v21 = (v20 & 0xD00) == 0 || v20 == 768;
  int v22 = v20 & 0xE00;
  int v24 = !v21 && v22 != 1024;
  int v202 = v24;
  BOOL isLevelTiled = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::isLevelTiled(a1, *(_DWORD *)(a1 + 144) + a12);
  uint64_t v26 = a1;
  BOOL v192 = isLevelTiled;
  if (v17 <= v181)
  {
    unsigned int v191 = a7 + a9 - 1;
    unsigned int v178 = a7 >> 3;
    if (a7 >> 3 <= v191 >> 3)
    {
      unsigned int v175 = a5 - 1;
      unsigned int v201 = (a5 - 1) >> 3;
      int v200 = ((a5 - 1) & 7) + 1;
      int v176 = ((a6 - 1) & 7) + 1;
      unsigned int v177 = (a6 - 1) >> 3;
      unint64_t v27 = v19 * (unint64_t)v18;
      uint32x2_t v28 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0x700000007);
      int8x8_t v29 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v28, 3uLL))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x1000000010, v28));
      __int32 v189 = v29.i32[0] | v29.i32[1];
      int8x8_t v187 = v29;
      BOOL v185 = v29.i32[0] != 0;
      BOOL v186 = v29.i32[1] != 0;
      uint64_t v30 = a11;
      unint64_t v174 = 8 * v27;
      uint64_t v31 = 2 * a11;
      unsigned int v190 = a7;
      do
      {
        unsigned int v32 = (8 * v17) | 7;
        if (8 * v17 <= v198) {
          int v33 = v198;
        }
        else {
          int v33 = 8 * v17;
        }
        unsigned int v34 = v178;
        if (v179 < v32) {
          unsigned int v32 = v179;
        }
        int v184 = v33 - 8 * v17;
        int v196 = v32 - v33 + 1;
        unsigned int v197 = 8 * v17;
        if (v17 == v177) {
          unsigned int v35 = v176;
        }
        else {
          unsigned int v35 = 8;
        }
        uint64_t v195 = a3 + (v33 - v198) * v30;
        unsigned int v182 = v35;
        do
        {
          unsigned int v36 = 8 * v34;
          unsigned int v37 = 8 * (v34 + 1) - 1;
          if (8 * v34 <= a7) {
            int v38 = a7;
          }
          else {
            int v38 = 8 * v34;
          }
          if (v191 < v37) {
            unsigned int v37 = v191;
          }
          int v39 = v37 - v38 + 1;
          if (v34 == v201) {
            unsigned int v40 = v200;
          }
          else {
            unsigned int v40 = 8;
          }
          BOOL v41 = 1;
          if (v197 >= v198 && v36 >= a7)
          {
            int v42 = v200;
            if (v34 != v201) {
              int v42 = 8;
            }
            BOOL v41 = v39 != v42 || v196 != v35;
          }
          if (v192)
          {
            unsigned int v63 = 0;
            uint64_t v64 = v174 >> (*(unsigned char *)(v26 + 57) != 0);
            char v65 = 1;
            if (v64 > 127)
            {
              if (v64 > 511)
              {
                if (v64 == 512)
                {
                  char v65 = 0;
                  char v66 = 0;
                  unsigned int v63 = 16;
                  unsigned int v67 = 16;
                }
                else
                {
                  char v66 = 1;
                  unsigned int v67 = 0;
                  if (v64 == 1024)
                  {
                    char v65 = 0;
                    unsigned int v67 = 8;
                    unsigned int v63 = 16;
                  }
                }
              }
              else if (v64 == 128)
              {
                char v65 = 0;
                char v66 = 0;
                unsigned int v63 = 32;
                unsigned int v67 = 32;
              }
              else
              {
                char v66 = 1;
                unsigned int v67 = 0;
                if (v64 == 256)
                {
                  char v65 = 0;
                  char v66 = 0;
                  unsigned int v67 = 16;
                  unsigned int v63 = 32;
                }
              }
            }
            else
            {
              char v66 = 1;
              unsigned int v67 = 0;
              switch(v64)
              {
                case 4:
                  char v65 = 0;
                  char v66 = 0;
                  unsigned int v67 = 128;
                  unsigned int v63 = 256;
                  break;
                case 5:
                case 6:
                case 7:
                case 9:
                case 10:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 17:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                  break;
                case 8:
                  char v65 = 0;
                  char v66 = 0;
                  unsigned int v63 = 128;
                  unsigned int v67 = 128;
                  break;
                case 16:
                  char v65 = 0;
                  char v66 = 0;
                  unsigned int v67 = 64;
                  unsigned int v63 = 128;
                  break;
                case 32:
                  char v65 = 0;
                  char v66 = 0;
                  unsigned int v63 = 64;
                  unsigned int v67 = 64;
                  break;
                default:
                  if (v64 == 64)
                  {
                    char v65 = 0;
                    char v66 = 0;
                    unsigned int v67 = 32;
                    unsigned int v63 = 64;
                  }
                  break;
              }
            }
            unsigned int v163 = (v63 >> 3) - 1;
            if (v65) {
              unsigned int v164 = 0;
            }
            else {
              unsigned int v164 = 32 - __clz(~(-1 << -(char)__clz(v163)));
            }
            unsigned int v165 = (v67 >> 3) - 1;
            if (v66)
            {
              unsigned int v166 = 0;
              if (v164) {
                goto LABEL_174;
              }
            }
            else
            {
              unsigned int v166 = 32 - __clz(~(-1 << -(char)__clz(v165)));
              if (v166 | v164)
              {
LABEL_174:
                int v167 = 0;
                uint64_t v168 = 0;
                int v169 = v34 & v163;
                int v170 = v17 & v165;
                BOOL v171 = v164 != 0;
                BOOL v172 = v166 != 0;
                int v173 = 1;
                do
                {
                  --v164;
                  if (v171) {
                    v168 |= (unint64_t)(v173 & v169) << v167++;
                  }
                  else {
                    unsigned int v164 = 0;
                  }
                  --v166;
                  if (v172) {
                    v168 |= (unint64_t)(v173 & v170) << v167++;
                  }
                  else {
                    unsigned int v166 = 0;
                  }
                  v173 *= 2;
                  --v167;
                  BOOL v172 = v166 != 0;
                  BOOL v171 = v164 != 0;
                }
                while (v166 | v164);
                goto LABEL_186;
              }
            }
            uint64_t v168 = 0;
LABEL_186:
            unint64_t v51 = ((unint64_t)(v36 / v63 + v197 / v67 * ((v63 + v175) / v63)) << 14) + (v168 << 10);
            goto LABEL_59;
          }
          if (v189)
          {
            int v44 = 0;
            uint64_t v45 = 0;
            int v46 = 1;
            BOOL v47 = v185;
            BOOL v48 = v186;
            __int32 v50 = v187.i32[0];
            __int32 v49 = v187.i32[1];
            do
            {
              --v49;
              if (v48) {
                v45 |= (unint64_t)(v46 & v34) << v44++;
              }
              else {
                __int32 v49 = 0;
              }
              --v50;
              if (v47) {
                v45 |= (unint64_t)(v46 & v17) << v44++;
              }
              else {
                __int32 v50 = 0;
              }
              v46 *= 2;
              --v44;
              BOOL v47 = v50 != 0;
              BOOL v48 = v49 != 0;
            }
            while (v50 | v49);
          }
          else
          {
            uint64_t v45 = 0;
          }
          unint64_t v51 = v45 << 10;
LABEL_59:
          unsigned int v52 = *(_DWORD *)(v26 + 128) >> (*(unsigned char *)(v26 + 144) + a12);
          if (v52 <= 1) {
            unsigned int v52 = 1;
          }
          unsigned int v53 = v52 + 7;
          if (v53 < 0x10) {
            unsigned int v54 = 0;
          }
          else {
            unsigned int v54 = 32 - __clz(~(-1 << -(char)__clz((v53 >> 3) - 1)));
          }
          unsigned int v55 = *(_DWORD *)(v26 + 132) >> (*(unsigned char *)(v26 + 144) + a12);
          if (v55 <= 1) {
            unsigned int v55 = 1;
          }
          unsigned int v56 = v55 + 7;
          if (v56 < 0x10)
          {
            unsigned int v57 = 0;
            if (!v54)
            {
LABEL_81:
              uint64_t v59 = 0;
              goto LABEL_82;
            }
          }
          else
          {
            unsigned int v57 = 32 - __clz(~(-1 << -(char)__clz((v56 >> 3) - 1)));
            if (!(v57 | v54)) {
              goto LABEL_81;
            }
          }
          int v58 = 0;
          uint64_t v59 = 0;
          BOOL v60 = v54 != 0;
          BOOL v61 = v57 != 0;
          int v62 = 1;
          do
          {
            --v54;
            if (v60) {
              v59 |= (unint64_t)(v62 & v34) << v58++;
            }
            else {
              unsigned int v54 = 0;
            }
            --v57;
            if (v61) {
              v59 |= (unint64_t)(v62 & v17) << v58++;
            }
            else {
              unsigned int v57 = 0;
            }
            v62 *= 2;
            --v58;
            BOOL v61 = v57 != 0;
            BOOL v60 = v54 != 0;
          }
          while (v57 | v54);
LABEL_82:
          unsigned int v68 = v38 - a7;
          int v69 = v40 < 8 || v41;
          unsigned int v70 = (unsigned __int8 *)(a4 + 8 * v59);
          uint64_t v71 = v195 + 16 * v68;
          int v72 = (void *)(a2 + v51);
          if (v35 < 8) {
            int v73 = 1;
          }
          else {
            int v73 = v69;
          }
          if (v202)
          {
            if (!v73)
            {
              uint64_t v78 = __dst;
LABEL_96:
              uint64_t v80 = 0;
              uint64_t v81 = v78;
              do
              {
                uint64_t v94 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,4u>::kSubblockPositions[v80 + 1];
                uint64_t v95 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,4u>::kSubblockPositions[v80];
                unsigned int v96 = (v40 - 4 * v95) & ~((int)(v40 - 4 * v95) >> 31);
                if (v96 >= 4) {
                  unsigned int v96 = 4;
                }
                unsigned int v97 = (v35 - 2 * v94) & ~((int)(v35 - 2 * v94) >> 31);
                if (v97 >= 2) {
                  unsigned int v97 = 2;
                }
                if (v96) {
                  BOOL v98 = v97 == 0;
                }
                else {
                  BOOL v98 = 1;
                }
                if (v98)
                {
                  char v93 = 0;
                }
                else
                {
                  uint64_t v82 = (long long *)(v71 + v31 * v94 + (v95 << 6));
                  uint64_t v83 = v82 + 2;
                  long long v85 = *v82;
                  long long v86 = v82[1];
                  uint64_t v84 = (long long *)((char *)v82 + v30);
                  long long v87 = *v83;
                  long long v88 = v83[1];
                  long long v89 = *v84;
                  long long v90 = v84[1];
                  v84 += 2;
                  long long v91 = *v84;
                  long long v92 = v84[1];
                  *uint64_t v81 = v85;
                  v81[1] = v86;
                  v81[2] = v89;
                  v81[3] = v90;
                  v81[4] = v87;
                  v81[5] = v88;
                  v81[6] = v91;
                  v81[7] = v92;
                  v81 += 8;
                  char v93 = 127;
                }
                *v70++ = v93;
                v80 += 2;
              }
              while (v80 != 16);
              a7 = v190;
              if (v202) {
                goto LABEL_155;
              }
              goto LABEL_27;
            }
            int v74 = v72;
            int v75 = v39;
            BOOL v76 = v41;
            int v77 = v38;
            memcpy(__dst, v72, sizeof(__dst));
            uint64_t v78 = __dst;
            int v72 = v74;
            int v38 = v77;
            BOOL v41 = v76;
            unsigned int v35 = v182;
            unsigned int v36 = 8 * v34;
            int v39 = v75;
            uint64_t v30 = a11;
            uint64_t v26 = v199;
          }
          else
          {
            uint64_t v78 = v72;
            if (!v73) {
              goto LABEL_96;
            }
          }
          unsigned int v188 = v72;
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE12ELj4ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = v26;
          float64x2_t v204 = v78;
          unsigned __int8 v212 = v40;
          unsigned __int8 v213 = v35;
          unsigned int v208 = v184;
          unsigned int v209 = v38 - v36;
          uint64_t v205 = v70;
          uint64_t v206 = v71;
          uint64_t v207 = v30;
          unsigned int v210 = v196;
          unsigned int v211 = v39;
          if (v41)
          {
            uint64_t v79 = v78;
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(v26 + 8) + 7384), block);
            uint64_t v78 = v79;
            uint64_t v26 = v199;
            a7 = v190;
            uint64_t v31 = 2 * a11;
            int v72 = v188;
            if (!v202) {
              goto LABEL_27;
            }
LABEL_155:
            memcpy(v72, v78, 0x400uLL);
            uint64_t v31 = 2 * a11;
            uint64_t v26 = v199;
            goto LABEL_27;
          }
          unsigned int v183 = v78;
          uint64_t v99 = (uint64_t)&v78[AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)v215, 128, (uint64_t)v78, *v70)];
          uint64_t v100 = v99
               + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v217, 128, v99, v70[1]);
          uint64_t v101 = v100
               + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v216, 128, v100, v70[2]);
          uint64_t v102 = v101
               + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v218, 128, v101, v70[3]);
          uint64_t v103 = v102
               + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v219, 128, v102, v70[4]);
          uint64_t v104 = v103
               + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v221, 128, v103, v70[5]);
          uint64_t v105 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v220, 128, v104, v70[6]);
          AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)v222, 128, v104 + v105, v70[7]);
          uint64_t v106 = v210;
          if (v210 && v211)
          {
            uint64_t v107 = 0;
            unint64_t v108 = (unint64_t)v208 << 7;
            uint64_t v109 = 16 * v209;
            uint64_t v110 = &v215[v108 + v109];
            uint64_t v111 = v206;
            uint64_t v112 = v207;
            unint64_t v113 = 16 * v211;
            if (v113 <= 1) {
              unint64_t v114 = 1;
            }
            else {
              unint64_t v114 = 16 * v211;
            }
            unint64_t v115 = v108 + v109;
            long long v116 = &v215[v108 + v109];
            if (v114) {
              BOOL v117 = (v114 - 1) >> 32 == 0;
            }
            else {
              BOOL v117 = 0;
            }
            char v118 = !v117;
            uint64_t v119 = v114 & 0xFFFFFFFE0;
            uint64_t v120 = v114 & 0xFFFFFFFF0;
            unsigned int v121 = &v215[v115 + 16];
            unsigned int v122 = (long long *)(v206 + 16);
            unsigned int v123 = v110;
            uint64_t v124 = v206;
            do
            {
              uint64_t v125 = (char *)(v111 + v112 * v107);
              int v126 = &v110[128 * v107];
              if ((unint64_t)(&v116[128 * v107] - v125) < 0x20) {
                char v127 = 1;
              }
              else {
                char v127 = v118;
              }
              if (v127)
              {
                int v128 = 0;
                goto LABEL_139;
              }
              if (v114 >= 0x20)
              {
                unsigned int v134 = v122;
                unsigned int v135 = v121;
                uint64_t v136 = v114 & 0xFFFFFFFE0;
                do
                {
                  long long v137 = *v134;
                  *(v135 - 1) = *(v134 - 1);
                  *unsigned int v135 = v137;
                  v135 += 2;
                  v134 += 2;
                  v136 -= 32;
                }
                while (v136);
                if (v114 == v119) {
                  goto LABEL_122;
                }
                uint64_t v129 = v114 & 0xFFFFFFFE0;
                if ((v114 & 0x10) == 0)
                {
                  v125 += v119;
                  v126 += v119;
                  int v128 = v114 & 0xFFFFFFE0;
                  goto LABEL_139;
                }
              }
              else
              {
                uint64_t v129 = 0;
              }
              v126 += v120;
              unint64_t v130 = v129 - (v114 & 0xFFFFFFFF0);
              unint64_t v131 = (uint64_t *)(v124 + v129);
              unsigned int v132 = &v123[v129];
              do
              {
                uint64_t v133 = *v131++;
                *v132++ = v133;
                v130 += 8;
              }
              while (v130);
              if (v114 == v120) {
                goto LABEL_122;
              }
              v125 += v120;
              int v128 = v114 & 0xFFFFFFF0;
LABEL_139:
              unsigned int v138 = v128 + 1;
              do
              {
                char v139 = *v125++;
                *v126++ = v139;
              }
              while (v113 > v138++);
LABEL_122:
              ++v107;
              v121 += 128;
              unsigned int v122 = (long long *)((char *)v122 + v112);
              v124 += v112;
              v123 += 128;
            }
            while (v107 != v106);
          }
          uint64_t v141 = 0;
          int8x8_t v142 = v204;
          __int32 v143 = (char *)v205;
          int v144 = v212;
          int v145 = v213;
          a7 = v190;
          uint64_t v26 = v199;
          uint64_t v31 = 2 * a11;
          int v72 = v188;
          do
          {
            uint64_t v158 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,4u>::kSubblockPositions[v141 + 1];
            uint64_t v159 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,4u>::kSubblockPositions[v141];
            unsigned int v160 = (v144 - 4 * v159) & ~((v144 - 4 * (int)v159) >> 31);
            if (v160 >= 4) {
              unsigned int v160 = 4;
            }
            unsigned int v161 = (v145 - 2 * v158) & ~((v145 - 2 * (int)v158) >> 31);
            if (v161 >= 2) {
              unsigned int v161 = 2;
            }
            if (v160) {
              BOOL v162 = v161 == 0;
            }
            else {
              BOOL v162 = 1;
            }
            if (v162)
            {
              char v157 = 0;
            }
            else
            {
              BOOL v146 = (long long *)&v215[256 * v158 + 64 * v159];
              long long v148 = *v146;
              long long v149 = v146[1];
              unsigned int v147 = v146 + 2;
              int v150 = v146 + 8;
              v146 += 10;
              long long v151 = *v147;
              long long v152 = v147[1];
              long long v153 = *v150;
              long long v154 = v150[1];
              long long v155 = *v146;
              long long v156 = v146[1];
              *int8x8_t v142 = v148;
              v142[1] = v149;
              v142[2] = v153;
              v142[3] = v154;
              v142[4] = v151;
              v142[5] = v152;
              v142[6] = v155;
              v142[7] = v156;
              v142 += 8;
              char v157 = 127;
            }
            *v143++ = v157;
            v141 += 2;
          }
          while (v141 != 16);
          uint64_t v78 = v183;
          if (v202) {
            goto LABEL_155;
          }
LABEL_27:
          BOOL v21 = v34++ == v191 >> 3;
        }
        while (!v21);
        BOOL v21 = v17++ == v181;
      }
      while (!v21);
    }
  }
}

uint64_t AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, char a12)
{
  int16x8_t v174[24] = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v148 = a8;
  unsigned int v133 = a8 + a10 - 1;
  uint64_t v149 = a1;
  if (*(void *)(a1 + 168)) {
    int v17 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v17 = 0;
  }
  unsigned int v18 = a5 - 1;
  unsigned int v19 = a6 - 1;
  unsigned int v20 = a8 >> 3;
  unsigned int v132 = v133 >> 3;
  BOOL v21 = (v17 & 0xD00) == 0 || v17 == 768;
  int v22 = v17 & 0xE00;
  int v24 = !v21 && v22 != 1024;
  int v154 = v24;
  uint64_t result = a1;
  if (*(unsigned char *)(a1 + 232))
  {
    unsigned int v26 = *(unsigned __int8 *)(a1 + 255);
    unsigned int v27 = *(unsigned __int8 *)(a1 + 254);
    char v28 = __clz(v18);
    if (1 << v26 >= a6 || a5 >> v27)
    {
      if (!(a6 >> v26) && 1 << v27 < a5)
      {
        if (a6 < 2) {
          unsigned int v31 = 0;
        }
        else {
          unsigned int v31 = __clz(~(-1 << -(char)__clz(v19))) - 32;
        }
        v27 += v26 + v31;
        unsigned int v26 = -v31;
      }
    }
    else
    {
      unsigned int v29 = 32 - __clz(~(-1 << -v28));
      unsigned int v30 = v27 + v26;
      if (a5 < 2) {
        unsigned int v29 = 0;
      }
      unsigned int v26 = v30 - v29;
      unsigned int v27 = v29;
    }
    if (a5 < 2)
    {
      if (v27) {
        goto LABEL_27;
      }
    }
    else if (32 - __clz(~(-1 << -v28)) < v27)
    {
LABEL_27:
      BOOL v143 = 0;
LABEL_32:
      unsigned int v140 = v27 - 3;
      unsigned int v137 = v26 - 3;
      int v33 = -1 << *(unsigned char *)(*(void *)(a1 + 208) + 48);
      unsigned int v130 = (((~v33 + a5) & v33) + ~(-1 << v27)) >> v27;
      goto LABEL_33;
    }
    if (a6 < 2) {
      unsigned int v32 = 0;
    }
    else {
      unsigned int v32 = 32 - __clz(~(-1 << -(char)__clz(v19)));
    }
    BOOL v143 = v32 >= v26;
    goto LABEL_32;
  }
  BOOL v143 = 0;
  unsigned int v130 = 0;
  unsigned int v137 = 0;
  unsigned int v140 = 0;
LABEL_33:
  if (v20 <= v132)
  {
    unsigned int v142 = a7 + a9 - 1;
    unsigned int v129 = a7 >> 3;
    if (a7 >> 3 <= v142 >> 3)
    {
      unsigned int v152 = v18 >> 3;
      unsigned int v128 = v19 >> 3;
      int v151 = (v18 & 7) + 1;
      int v127 = (v19 & 7) + 1;
      uint32x2_t v34 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0x700000007);
      int8x8_t v35 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v34, 3uLL))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x1000000010, v34));
      __int32 v138 = v35.i32[0] | v35.i32[1];
      int8x8_t v136 = v35;
      BOOL v134 = v35.i32[0] != 0;
      BOOL v135 = v35.i32[1] != 0;
      unsigned int v141 = a7;
      do
      {
        unsigned int v36 = (8 * v20) | 7;
        if (8 * v20 <= v148) {
          int v37 = v148;
        }
        else {
          int v37 = 8 * v20;
        }
        if (v133 < v36) {
          unsigned int v36 = v133;
        }
        int v139 = v37 - 8 * v20;
        int v147 = v36 - v37 + 1;
        unsigned int v38 = v129;
        if (v20 == v128) {
          unsigned int v39 = v127;
        }
        else {
          unsigned int v39 = 8;
        }
        uint64_t v146 = a3 + (v37 - v148) * a11;
        unsigned int v150 = v39;
        do
        {
          unsigned int v40 = 8 * v38;
          unsigned int v41 = 8 * (v38 + 1) - 1;
          if (8 * v38 <= a7) {
            int v42 = a7;
          }
          else {
            int v42 = 8 * v38;
          }
          if (v142 < v41) {
            unsigned int v41 = v142;
          }
          int v43 = v41 - v42 + 1;
          if (v38 == v152) {
            unsigned int v44 = v151;
          }
          else {
            unsigned int v44 = 8;
          }
          BOOL v45 = 1;
          if (8 * v20 >= v148 && v40 >= a7)
          {
            int v46 = v151;
            if (v38 != v152) {
              int v46 = 8;
            }
            BOOL v45 = v43 != v46 || v147 != v39;
          }
          if (v143)
          {
            if (v140 | v137)
            {
              int v48 = 0;
              uint64_t v49 = 0;
              BOOL v50 = v137 != 0;
              int v51 = 1;
              BOOL v53 = v140 != 0;
              unsigned int v52 = v137;
              unsigned int v54 = v140;
              do
              {
                --v54;
                if (v53) {
                  v49 |= (unint64_t)(v38 & ~(-1 << v140) & v51) << v48++;
                }
                else {
                  unsigned int v54 = 0;
                }
                --v52;
                if (v50) {
                  v49 |= (unint64_t)(v20 & ~(-1 << v137) & v51) << v48++;
                }
                else {
                  unsigned int v52 = 0;
                }
                v51 *= 2;
                --v48;
                BOOL v50 = v52 != 0;
                BOOL v53 = v54 != 0;
              }
              while (v52 | v54);
            }
            else
            {
              uint64_t v49 = 0;
            }
            uint64_t v62 = *(void *)(result + 320) * ((v38 >> v140) + (v20 >> v137) * v130) + (v49 << 10);
          }
          else
          {
            if (v138)
            {
              int v55 = 0;
              uint64_t v56 = 0;
              int v57 = 1;
              BOOL v58 = v134;
              BOOL v59 = v135;
              __int32 v61 = v136.i32[0];
              __int32 v60 = v136.i32[1];
              do
              {
                --v60;
                if (v59) {
                  v56 |= (unint64_t)(v57 & v38) << v55++;
                }
                else {
                  __int32 v60 = 0;
                }
                --v61;
                if (v58) {
                  v56 |= (unint64_t)(v57 & v20) << v55++;
                }
                else {
                  __int32 v61 = 0;
                }
                v57 *= 2;
                --v55;
                BOOL v58 = v61 != 0;
                BOOL v59 = v60 != 0;
              }
              while (v61 | v60);
            }
            else
            {
              uint64_t v56 = 0;
            }
            uint64_t v62 = v56 << 10;
          }
          unsigned int v63 = *(_DWORD *)(result + 128) >> (*(unsigned char *)(result + 144) + a12);
          if (v63 <= 1) {
            unsigned int v63 = 1;
          }
          unsigned int v64 = v63 + 7;
          if (v64 < 0x10) {
            unsigned int v65 = 0;
          }
          else {
            unsigned int v65 = 32 - __clz(~(-1 << -(char)__clz((v64 >> 3) - 1)));
          }
          unsigned int v66 = *(_DWORD *)(result + 132) >> (*(unsigned char *)(result + 144) + a12);
          if (v66 <= 1) {
            unsigned int v66 = 1;
          }
          unsigned int v67 = v66 + 7;
          if (v67 < 0x10) {
            unsigned int v68 = 0;
          }
          else {
            unsigned int v68 = 32 - __clz(~(-1 << -(char)__clz((v67 >> 3) - 1)));
          }
          if (v68 | v65)
          {
            int v69 = 0;
            uint64_t v70 = 0;
            BOOL v71 = v65 != 0;
            BOOL v72 = v68 != 0;
            int v73 = 1;
            do
            {
              --v65;
              if (v71) {
                v70 |= (unint64_t)(v73 & v38) << v69++;
              }
              else {
                unsigned int v65 = 0;
              }
              --v68;
              if (v72) {
                v70 |= (unint64_t)(v73 & v20) << v69++;
              }
              else {
                unsigned int v68 = 0;
              }
              v73 *= 2;
              --v69;
              BOOL v72 = v68 != 0;
              BOOL v71 = v65 != 0;
            }
            while (v68 | v65);
          }
          else
          {
            uint64_t v70 = 0;
          }
          int v75 = v44 < 8 || v45;
          BOOL v76 = (unsigned __int8 *)(a4 + 8 * v70);
          unsigned int v74 = v42 - a7;
          uint64_t v77 = v146 + 16 * (v42 - a7);
          uint64_t v78 = (unsigned char *)(a2 + v62);
          if (v39 < 8) {
            int v79 = 1;
          }
          else {
            int v79 = v75;
          }
          __src = v78;
          if (v154)
          {
            if (!v79)
            {
              uint64_t v78 = __dst;
LABEL_123:
              uint64_t v81 = (unsigned char *)(v146 + 16 * v74);
              uint64_t v82 = a11;
              unint64_t v83 = (unint64_t)v78;
              uint64_t v84 = (char *)(a4 + 8 * v70);
              goto LABEL_157;
            }
            char v80 = v44;
            memcpy(__dst, __src, sizeof(__dst));
            LOBYTE(v44) = v80;
            uint64_t v78 = __dst;
            LOBYTE(v39) = v150;
            uint64_t result = v149;
          }
          else if (!v79)
          {
            goto LABEL_123;
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE14ELj4ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = result;
          long long v156 = v78;
          unsigned __int8 v164 = v44;
          unsigned __int8 v165 = v39;
          unsigned int v160 = v139;
          unsigned int v161 = v42 - v40;
          char v157 = v76;
          uint64_t v158 = v77;
          uint64_t v159 = a11;
          unsigned int v162 = v147;
          unsigned int v163 = v43;
          if (v45)
          {
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(result + 8) + 7384), block);
            goto LABEL_158;
          }
          uint64_t v85 = (uint64_t)&v78[AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)v167, 128, (uint64_t)v78, *v76)];
          uint64_t v86 = v85
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v169, 128, v85, v76[1]);
          uint64_t v87 = v86
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v168, 128, v86, v76[2]);
          uint64_t v88 = v87
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v170, 128, v87, v76[3]);
          uint64_t v89 = v88
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v171, 128, v88, v76[4]);
          uint64_t v90 = v89
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v173, 128, v89, v76[5]);
          uint64_t v91 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v172, 128, v90, v76[6]);
          AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)v174, 128, v90 + v91, v76[7]);
          uint64_t v92 = v162;
          if (v162 && v163)
          {
            uint64_t v93 = 0;
            unint64_t v94 = (unint64_t)v160 << 7;
            uint64_t v95 = 16 * v161;
            unsigned int v96 = &v167[v94 + v95];
            uint64_t v97 = v158;
            uint64_t v98 = v159;
            unint64_t v99 = 16 * v163;
            if (v99 <= 1) {
              unint64_t v100 = 1;
            }
            else {
              unint64_t v100 = 16 * v163;
            }
            unint64_t v101 = v94 + v95;
            uint64_t v102 = &v167[v94 + v95];
            if (v100) {
              BOOL v103 = (v100 - 1) >> 32 == 0;
            }
            else {
              BOOL v103 = 0;
            }
            char v104 = !v103;
            uint64_t v105 = v100 & 0xFFFFFFFE0;
            uint64_t v106 = v100 & 0xFFFFFFFF0;
            uint64_t v107 = &v167[v101 + 16];
            unint64_t v108 = (long long *)(v158 + 16);
            uint64_t v109 = v96;
            uint64_t v110 = v158;
            do
            {
              uint64_t v111 = (char *)(v97 + v98 * v93);
              uint64_t v112 = &v96[128 * v93];
              if ((unint64_t)(&v102[128 * v93] - v111) < 0x20) {
                char v113 = 1;
              }
              else {
                char v113 = v104;
              }
              if (v113)
              {
                int v114 = 0;
                goto LABEL_153;
              }
              if (v100 >= 0x20)
              {
                uint64_t v120 = v108;
                unsigned int v121 = v107;
                uint64_t v122 = v100 & 0xFFFFFFFE0;
                do
                {
                  long long v123 = *v120;
                  *(v121 - 1) = *(v120 - 1);
                  *unsigned int v121 = v123;
                  v121 += 2;
                  v120 += 2;
                  v122 -= 32;
                }
                while (v122);
                if (v100 == v105) {
                  goto LABEL_136;
                }
                uint64_t v115 = v100 & 0xFFFFFFFE0;
                if ((v100 & 0x10) == 0)
                {
                  v111 += v105;
                  v112 += v105;
                  int v114 = v100 & 0xFFFFFFE0;
                  goto LABEL_153;
                }
              }
              else
              {
                uint64_t v115 = 0;
              }
              v112 += v106;
              unint64_t v116 = v115 - (v100 & 0xFFFFFFFF0);
              BOOL v117 = (uint64_t *)(v110 + v115);
              char v118 = &v109[v115];
              do
              {
                uint64_t v119 = *v117++;
                *v118++ = v119;
                v116 += 8;
              }
              while (v116);
              if (v100 == v106) {
                goto LABEL_136;
              }
              v111 += v106;
              int v114 = v100 & 0xFFFFFFF0;
LABEL_153:
              unsigned int v124 = v114 + 1;
              do
              {
                char v125 = *v111++;
                *v112++ = v125;
              }
              while (v99 > v124++);
LABEL_136:
              ++v93;
              v107 += 128;
              unint64_t v108 = (long long *)((char *)v108 + v98);
              v110 += v98;
              v109 += 128;
            }
            while (v93 != v92);
          }
          unint64_t v83 = (unint64_t)v156;
          uint64_t v84 = (char *)v157;
          unsigned int v44 = v164;
          unsigned int v39 = v165;
          uint64_t v81 = v167;
          uint64_t v82 = 128;
LABEL_157:
          AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v81, v82, v83, v84, v44, v39);
LABEL_158:
          if (v154) {
            memcpy(__src, v78, 0x400uLL);
          }
          a7 = v141;
          BOOL v21 = v38++ == v142 >> 3;
          uint64_t result = v149;
          unsigned int v39 = v150;
        }
        while (!v21);
        BOOL v21 = v20++ == v132;
      }
      while (!v21);
    }
  }
  return result;
}

uint64_t AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, char a12)
{
  v221[24] = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v197 = a8;
  unsigned int v179 = a8 + a10 - 1;
  uint64_t v198 = a1;
  if (*(void *)(a1 + 168)) {
    int v17 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v17 = 0;
  }
  unsigned int v18 = a5 - 1;
  unsigned int v19 = a6 - 1;
  unsigned int v20 = a8 >> 3;
  unsigned int v178 = v179 >> 3;
  BOOL v21 = (v17 & 0xD00) == 0 || v17 == 768;
  int v22 = v17 & 0xE00;
  int v24 = !v21 && v22 != 1024;
  int v201 = v24;
  uint64_t result = a1;
  if (*(unsigned char *)(a1 + 232))
  {
    unsigned int v26 = *(unsigned __int8 *)(a1 + 255);
    unsigned int v27 = *(unsigned __int8 *)(a1 + 254);
    char v28 = __clz(v18);
    if (1 << v26 >= a6 || a5 >> v27)
    {
      if (!(a6 >> v26) && 1 << v27 < a5)
      {
        if (a6 < 2) {
          unsigned int v31 = 0;
        }
        else {
          unsigned int v31 = __clz(~(-1 << -(char)__clz(v19))) - 32;
        }
        v27 += v26 + v31;
        unsigned int v26 = -v31;
      }
    }
    else
    {
      unsigned int v29 = 32 - __clz(~(-1 << -v28));
      unsigned int v30 = v27 + v26;
      if (a5 < 2) {
        unsigned int v29 = 0;
      }
      unsigned int v26 = v30 - v29;
      unsigned int v27 = v29;
    }
    if (a5 < 2)
    {
      if (v27) {
        goto LABEL_27;
      }
    }
    else if (32 - __clz(~(-1 << -v28)) < v27)
    {
LABEL_27:
      BOOL v192 = 0;
LABEL_32:
      unsigned int v188 = v27 - 3;
      unsigned int v183 = v26 - 3;
      int v33 = -1 << *(unsigned char *)(*(void *)(a1 + 208) + 48);
      unsigned int v176 = (((~v33 + a5) & v33) + ~(-1 << v27)) >> v27;
      goto LABEL_33;
    }
    if (a6 < 2) {
      unsigned int v32 = 0;
    }
    else {
      unsigned int v32 = 32 - __clz(~(-1 << -(char)__clz(v19)));
    }
    BOOL v192 = v32 >= v26;
    goto LABEL_32;
  }
  BOOL v192 = 0;
  unsigned int v176 = 0;
  unsigned int v183 = 0;
  unsigned int v188 = 0;
LABEL_33:
  if (v20 <= v178)
  {
    unsigned int v191 = a7 + a9 - 1;
    unsigned int v175 = a7 >> 3;
    if (a7 >> 3 <= v191 >> 3)
    {
      unsigned int v200 = v18 >> 3;
      unsigned int v174 = v19 >> 3;
      int v199 = (v18 & 7) + 1;
      int v173 = (v19 & 7) + 1;
      int v172 = ~(-1 << v183);
      uint32x2_t v34 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0x700000007);
      int8x8_t v35 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v34, 3uLL))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x1000000010, v34));
      __int32 v186 = v35.i32[0] | v35.i32[1];
      int8x8_t v182 = v35;
      BOOL v181 = v35.i32[1] != 0;
      uint64_t v36 = a11;
      BOOL v180 = v35.i32[0] != 0;
      uint64_t v37 = 2 * a11;
      unsigned int v190 = a7;
      do
      {
        unsigned int v38 = (8 * v20) | 7;
        if (8 * v20 <= v197) {
          int v39 = v197;
        }
        else {
          int v39 = 8 * v20;
        }
        if (v179 < v38) {
          unsigned int v38 = v179;
        }
        int v187 = v39 - 8 * v20;
        int v196 = v38 - v39 + 1;
        unsigned int v40 = v175;
        if (v20 == v174) {
          unsigned int v41 = v173;
        }
        else {
          unsigned int v41 = 8;
        }
        int v42 = v20 & v172;
        uint64_t v195 = a3 + (v39 - v197) * v36;
        do
        {
          unsigned int v43 = 8 * v40;
          unsigned int v44 = 8 * (v40 + 1) - 1;
          if (8 * v40 <= a7) {
            int v45 = a7;
          }
          else {
            int v45 = 8 * v40;
          }
          if (v191 < v44) {
            unsigned int v44 = v191;
          }
          int v46 = v44 - v45 + 1;
          if (v40 == v200) {
            unsigned int v47 = v199;
          }
          else {
            unsigned int v47 = 8;
          }
          BOOL v48 = 1;
          if (8 * v20 >= v197 && v43 >= a7)
          {
            int v49 = v199;
            if (v40 != v200) {
              int v49 = 8;
            }
            BOOL v48 = v46 != v49 || v196 != v41;
          }
          if (v192)
          {
            if (v188 | v183)
            {
              int v51 = 0;
              uint64_t v52 = 0;
              BOOL v53 = v183 != 0;
              int v54 = 1;
              BOOL v56 = v188 != 0;
              unsigned int v55 = v183;
              unsigned int v57 = v188;
              do
              {
                --v57;
                if (v56) {
                  v52 |= (unint64_t)(v40 & ~(-1 << v188) & v54) << v51++;
                }
                else {
                  unsigned int v57 = 0;
                }
                --v55;
                if (v53) {
                  v52 |= (unint64_t)(v42 & v54) << v51++;
                }
                else {
                  unsigned int v55 = 0;
                }
                v54 *= 2;
                --v51;
                BOOL v53 = v55 != 0;
                BOOL v56 = v57 != 0;
              }
              while (v55 | v57);
            }
            else
            {
              uint64_t v52 = 0;
            }
            uint64_t v65 = *(void *)(result + 320) * ((v40 >> v188) + (v20 >> v183) * v176) + (v52 << 10);
          }
          else
          {
            if (v186)
            {
              int v58 = 0;
              uint64_t v59 = 0;
              int v60 = 1;
              BOOL v61 = v180;
              BOOL v62 = v181;
              __int32 v64 = v182.i32[0];
              __int32 v63 = v182.i32[1];
              do
              {
                --v63;
                if (v62) {
                  v59 |= (unint64_t)(v60 & v40) << v58++;
                }
                else {
                  __int32 v63 = 0;
                }
                --v64;
                if (v61) {
                  v59 |= (unint64_t)(v60 & v20) << v58++;
                }
                else {
                  __int32 v64 = 0;
                }
                v60 *= 2;
                --v58;
                BOOL v61 = v64 != 0;
                BOOL v62 = v63 != 0;
              }
              while (v64 | v63);
            }
            else
            {
              uint64_t v59 = 0;
            }
            uint64_t v65 = v59 << 10;
          }
          unsigned int v66 = *(_DWORD *)(result + 128) >> (*(unsigned char *)(result + 144) + a12);
          if (v66 <= 1) {
            unsigned int v66 = 1;
          }
          unsigned int v67 = v66 + 7;
          if (v67 < 0x10) {
            unsigned int v68 = 0;
          }
          else {
            unsigned int v68 = 32 - __clz(~(-1 << -(char)__clz((v67 >> 3) - 1)));
          }
          unsigned int v69 = *(_DWORD *)(result + 132) >> (*(unsigned char *)(result + 144) + a12);
          if (v69 <= 1) {
            unsigned int v69 = 1;
          }
          unsigned int v70 = v69 + 7;
          if (v70 < 0x10)
          {
            unsigned int v71 = 0;
            if (!v68)
            {
LABEL_111:
              uint64_t v73 = 0;
              goto LABEL_112;
            }
          }
          else
          {
            unsigned int v71 = 32 - __clz(~(-1 << -(char)__clz((v70 >> 3) - 1)));
            if (!(v71 | v68)) {
              goto LABEL_111;
            }
          }
          int v72 = 0;
          uint64_t v73 = 0;
          BOOL v74 = v68 != 0;
          BOOL v75 = v71 != 0;
          int v76 = 1;
          do
          {
            --v68;
            if (v74) {
              v73 |= (unint64_t)(v76 & v40) << v72++;
            }
            else {
              unsigned int v68 = 0;
            }
            --v71;
            if (v75) {
              v73 |= (unint64_t)(v76 & v20) << v72++;
            }
            else {
              unsigned int v71 = 0;
            }
            v76 *= 2;
            --v72;
            BOOL v75 = v71 != 0;
            BOOL v74 = v68 != 0;
          }
          while (v71 | v68);
LABEL_112:
          unsigned int v77 = v45 - a7;
          int v78 = v47 < 8 || v48;
          int v79 = (unsigned __int8 *)(a4 + 8 * v73);
          uint64_t v80 = v195 + 16 * v77;
          uint64_t v81 = (void *)(a2 + v65);
          if (v41 < 8) {
            int v82 = 1;
          }
          else {
            int v82 = v78;
          }
          if (v201)
          {
            if (!v82)
            {
              uint64_t v86 = __dst;
LABEL_125:
              uint64_t v88 = 0;
              uint64_t v89 = v86;
              do
              {
                uint64_t v102 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,4u>::kSubblockPositions[v88 + 1];
                uint64_t v103 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,4u>::kSubblockPositions[v88];
                unsigned int v104 = (v47 - 4 * v103) & ~((int)(v47 - 4 * v103) >> 31);
                if (v104 >= 4) {
                  unsigned int v104 = 4;
                }
                unsigned int v105 = (v41 - 2 * v102) & ~((int)(v41 - 2 * v102) >> 31);
                if (v105 >= 2) {
                  unsigned int v105 = 2;
                }
                if (v104) {
                  BOOL v106 = v105 == 0;
                }
                else {
                  BOOL v106 = 1;
                }
                if (v106)
                {
                  char v101 = 0;
                }
                else
                {
                  uint64_t v90 = (long long *)(v80 + v37 * v102 + (v103 << 6));
                  uint64_t v91 = v90 + 2;
                  long long v93 = *v90;
                  long long v94 = v90[1];
                  uint64_t v92 = (long long *)((char *)v90 + v36);
                  long long v95 = *v91;
                  long long v96 = v91[1];
                  long long v97 = *v92;
                  long long v98 = v92[1];
                  v92 += 2;
                  long long v99 = *v92;
                  long long v100 = v92[1];
                  *uint64_t v89 = v93;
                  v89[1] = v94;
                  v89[2] = v97;
                  v89[3] = v98;
                  v89[4] = v95;
                  v89[5] = v96;
                  v89[6] = v99;
                  v89[7] = v100;
                  v89 += 8;
                  char v101 = 127;
                }
                *v79++ = v101;
                v88 += 2;
              }
              while (v88 != 16);
              a7 = v190;
LABEL_138:
              unsigned int v107 = v40 + 1;
              if (v201) {
                goto LABEL_47;
              }
              goto LABEL_48;
            }
            unint64_t v83 = v81;
            int v84 = v46;
            BOOL v184 = v48;
            int v85 = v45;
            memcpy(__dst, v81, sizeof(__dst));
            int v45 = v85;
            BOOL v48 = v184;
            unsigned int v43 = 8 * v40;
            int v46 = v84;
            uint64_t v86 = __dst;
            uint64_t v81 = v83;
            int v42 = v20 & v172;
            uint64_t v36 = a11;
            uint64_t result = v198;
          }
          else
          {
            uint64_t v86 = v81;
            if (!v82) {
              goto LABEL_125;
            }
          }
          __int32 v189 = v81;
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE14ELj4ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = result;
          float64x2_t v203 = v86;
          unsigned __int8 v211 = v47;
          unsigned __int8 v212 = v41;
          unsigned int v207 = v187;
          unsigned int v208 = v45 - v43;
          float64x2_t v204 = v79;
          uint64_t v205 = v80;
          uint64_t v206 = v36;
          unsigned int v209 = v196;
          unsigned int v210 = v46;
          if (v48)
          {
            uint64_t v87 = v86;
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(result + 8) + 7384), block);
            uint64_t v86 = v87;
            uint64_t v36 = a11;
            uint64_t result = v198;
            a7 = v190;
            uint64_t v81 = v189;
            uint64_t v37 = 2 * a11;
            goto LABEL_138;
          }
          BOOL v185 = v86;
          uint64_t v108 = (uint64_t)&v86[AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)v214, 128, (uint64_t)v86, *v79)];
          uint64_t v109 = v108
               + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v216, 128, v108, v79[1]);
          uint64_t v110 = v109
               + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v215, 128, v109, v79[2]);
          uint64_t v111 = v110
               + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v217, 128, v110, v79[3]);
          uint64_t v112 = v111
               + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v218, 128, v111, v79[4]);
          uint64_t v113 = v112
               + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v220, 128, v112, v79[5]);
          uint64_t v114 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v219, 128, v113, v79[6]);
          AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)v221, 128, v113 + v114, v79[7]);
          uint64_t v115 = v209;
          if (v209 && v210)
          {
            uint64_t v116 = 0;
            unint64_t v117 = (unint64_t)v207 << 7;
            uint64_t v118 = 16 * v208;
            uint64_t v119 = &v214[v117 + v118];
            uint64_t v120 = v205;
            uint64_t v121 = v206;
            unint64_t v122 = 16 * v210;
            if (v122 <= 1) {
              unint64_t v123 = 1;
            }
            else {
              unint64_t v123 = 16 * v210;
            }
            unint64_t v124 = v117 + v118;
            char v125 = &v214[v117 + v118];
            if (v123) {
              BOOL v126 = (v123 - 1) >> 32 == 0;
            }
            else {
              BOOL v126 = 0;
            }
            char v127 = !v126;
            uint64_t v128 = v123 & 0xFFFFFFFE0;
            uint64_t v129 = v123 & 0xFFFFFFFF0;
            unsigned int v130 = &v214[v124 + 16];
            unint64_t v131 = (long long *)(v205 + 16);
            unsigned int v132 = v119;
            uint64_t v133 = v205;
            do
            {
              BOOL v134 = (char *)(v120 + v121 * v116);
              BOOL v135 = &v119[128 * v116];
              if ((unint64_t)(&v125[128 * v116] - v134) < 0x20) {
                char v136 = 1;
              }
              else {
                char v136 = v127;
              }
              if (v136)
              {
                int v137 = 0;
                goto LABEL_169;
              }
              if (v123 >= 0x20)
              {
                BOOL v143 = v131;
                int v144 = v130;
                uint64_t v145 = v123 & 0xFFFFFFFE0;
                do
                {
                  long long v146 = *v143;
                  *(v144 - 1) = *(v143 - 1);
                  *int v144 = v146;
                  v144 += 2;
                  v143 += 2;
                  v145 -= 32;
                }
                while (v145);
                if (v123 == v128) {
                  goto LABEL_152;
                }
                uint64_t v138 = v123 & 0xFFFFFFFE0;
                if ((v123 & 0x10) == 0)
                {
                  v134 += v128;
                  v135 += v128;
                  int v137 = v123 & 0xFFFFFFE0;
                  goto LABEL_169;
                }
              }
              else
              {
                uint64_t v138 = 0;
              }
              v135 += v129;
              unint64_t v139 = v138 - (v123 & 0xFFFFFFFF0);
              unsigned int v140 = (uint64_t *)(v133 + v138);
              unsigned int v141 = &v132[v138];
              do
              {
                uint64_t v142 = *v140++;
                *v141++ = v142;
                v139 += 8;
              }
              while (v139);
              if (v123 == v129) {
                goto LABEL_152;
              }
              v134 += v129;
              int v137 = v123 & 0xFFFFFFF0;
LABEL_169:
              unsigned int v147 = v137 + 1;
              do
              {
                char v148 = *v134++;
                *v135++ = v148;
              }
              while (v122 > v147++);
LABEL_152:
              ++v116;
              v130 += 128;
              unint64_t v131 = (long long *)((char *)v131 + v121);
              v133 += v121;
              v132 += 128;
            }
            while (v116 != v115);
          }
          uint64_t v150 = 0;
          int v151 = v203;
          unsigned int v152 = (char *)v204;
          int v153 = v211;
          int v154 = v212;
          a7 = v190;
          uint64_t v36 = a11;
          uint64_t result = v198;
          uint64_t v37 = 2 * a11;
          unsigned int v107 = v40 + 1;
          uint64_t v86 = v185;
          do
          {
            uint64_t v167 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,4u>::kSubblockPositions[v150 + 1];
            uint64_t v168 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,4u>::kSubblockPositions[v150];
            unsigned int v169 = (v153 - 4 * v168) & ~((v153 - 4 * (int)v168) >> 31);
            if (v169 >= 4) {
              unsigned int v169 = 4;
            }
            unsigned int v170 = (v154 - 2 * v167) & ~((v154 - 2 * (int)v167) >> 31);
            if (v170 >= 2) {
              unsigned int v170 = 2;
            }
            if (v169) {
              BOOL v171 = v170 == 0;
            }
            else {
              BOOL v171 = 1;
            }
            if (v171)
            {
              char v166 = 0;
            }
            else
            {
              long long v155 = (long long *)&v214[256 * v167 + 64 * v168];
              long long v157 = *v155;
              long long v158 = v155[1];
              long long v156 = v155 + 2;
              uint64_t v159 = v155 + 8;
              v155 += 10;
              long long v160 = *v156;
              long long v161 = v156[1];
              long long v162 = *v159;
              long long v163 = v159[1];
              long long v164 = *v155;
              long long v165 = v155[1];
              *int v151 = v157;
              v151[1] = v158;
              v151[2] = v162;
              v151[3] = v163;
              v151[4] = v160;
              v151[5] = v161;
              v151[6] = v164;
              v151[7] = v165;
              v151 += 8;
              char v166 = 127;
            }
            *v152++ = v166;
            v150 += 2;
          }
          while (v150 != 16);
          uint64_t v81 = v189;
          if (v201)
          {
LABEL_47:
            memcpy(v81, v86, 0x400uLL);
            uint64_t v37 = 2 * a11;
            uint64_t v36 = a11;
            uint64_t result = v198;
          }
LABEL_48:
          BOOL v21 = v40 == v191 >> 3;
          unsigned int v40 = v107;
        }
        while (!v21);
        BOOL v21 = v20++ == v178;
      }
      while (!v21);
    }
  }
  return result;
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, int a12)
{
  int16x8_t v177[24] = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  uint64_t v17 = a1;
  unsigned int v152 = a8;
  unsigned int v18 = a8 >> 3;
  unsigned int v136 = a8 + a10 - 1;
  unsigned int v138 = v136 >> 3;
  unsigned int v19 = *(unsigned __int8 *)(*(void *)(a1 + 208) + 88);
  unsigned int v20 = *(_DWORD *)(a1 + 112);
  uint64_t v153 = v17;
  if (*(void *)(v17 + 168))
  {
    __int16 CacheMode = IOSurfaceGetCacheMode();
    uint64_t v17 = v153;
    int v22 = CacheMode & 0xF00;
  }
  else
  {
    int v22 = 0;
  }
  BOOL v23 = (v22 & 0xD00) == 0 || v22 == 768;
  int v24 = v22 & 0xE00;
  int v26 = !v23 && v24 != 1024;
  int v157 = v26;
  BOOL isLevelTiled = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::isLevelTiled(v17, *(_DWORD *)(v17 + 144) + a12);
  uint64_t v28 = v153;
  BOOL v146 = isLevelTiled;
  if (v18 <= v138)
  {
    unsigned int v145 = a7 + a9 - 1;
    unsigned int v135 = a7 >> 3;
    if (a7 >> 3 <= v145 >> 3)
    {
      unsigned int v132 = a5 - 1;
      unsigned int v134 = (a6 - 1) >> 3;
      int v155 = ((a5 - 1) & 7) + 1;
      unsigned int v156 = (a5 - 1) >> 3;
      int v133 = ((a6 - 1) & 7) + 1;
      uint32x2_t v29 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0x700000007);
      int8x8_t v30 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v29, 3uLL))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x1000000010, v29));
      __int32 v143 = v30.i32[0] | v30.i32[1];
      int8x8_t v142 = v30;
      BOOL v140 = v30.i32[0] != 0;
      BOOL v141 = v30.i32[1] != 0;
      unint64_t v131 = 8 * v20 * (unint64_t)v19;
      unsigned int v144 = a7;
      do
      {
        unsigned int v31 = (8 * v18) | 7;
        if (8 * v18 <= v152) {
          int v32 = v152;
        }
        else {
          int v32 = 8 * v18;
        }
        unsigned int v33 = v135;
        if (v136 < v31) {
          unsigned int v31 = v136;
        }
        int v139 = v32 - 8 * v18;
        int v150 = v31 - v32 + 1;
        unsigned int v151 = 8 * v18;
        if (v18 == v134) {
          unsigned int v34 = v133;
        }
        else {
          unsigned int v34 = 8;
        }
        uint64_t v149 = a3 + (v32 - v152) * a11;
        unsigned int v154 = v34;
        do
        {
          unsigned int v35 = 8 * v33;
          unsigned int v36 = 8 * (v33 + 1) - 1;
          if (8 * v33 <= a7) {
            int v37 = a7;
          }
          else {
            int v37 = 8 * v33;
          }
          if (v145 < v36) {
            unsigned int v36 = v145;
          }
          int v38 = v36 - v37 + 1;
          if (v33 == v156) {
            unsigned int v39 = v155;
          }
          else {
            unsigned int v39 = 8;
          }
          BOOL v40 = 1;
          if (v151 >= v152 && v35 >= a7)
          {
            int v41 = v155;
            if (v33 != v156) {
              int v41 = 8;
            }
            BOOL v40 = v38 != v41 || v150 != v34;
          }
          if (v146)
          {
            unsigned int v62 = 0;
            uint64_t v63 = v131 >> (*(unsigned char *)(v28 + 57) != 0);
            char v64 = 1;
            if (v63 > 127)
            {
              if (v63 > 511)
              {
                if (v63 == 512)
                {
                  char v64 = 0;
                  char v65 = 0;
                  unsigned int v62 = 16;
                  unsigned int v66 = 16;
                }
                else
                {
                  char v65 = 1;
                  unsigned int v66 = 0;
                  if (v63 == 1024)
                  {
                    char v64 = 0;
                    unsigned int v66 = 8;
                    unsigned int v62 = 16;
                  }
                }
              }
              else if (v63 == 128)
              {
                char v64 = 0;
                char v65 = 0;
                unsigned int v62 = 32;
                unsigned int v66 = 32;
              }
              else
              {
                char v65 = 1;
                unsigned int v66 = 0;
                if (v63 == 256)
                {
                  char v64 = 0;
                  char v65 = 0;
                  unsigned int v66 = 16;
                  unsigned int v62 = 32;
                }
              }
            }
            else
            {
              char v65 = 1;
              unsigned int v66 = 0;
              switch(v63)
              {
                case 4:
                  char v64 = 0;
                  char v65 = 0;
                  unsigned int v66 = 128;
                  unsigned int v62 = 256;
                  break;
                case 5:
                case 6:
                case 7:
                case 9:
                case 10:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 17:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                  break;
                case 8:
                  char v64 = 0;
                  char v65 = 0;
                  unsigned int v62 = 128;
                  unsigned int v66 = 128;
                  break;
                case 16:
                  char v64 = 0;
                  char v65 = 0;
                  unsigned int v66 = 64;
                  unsigned int v62 = 128;
                  break;
                case 32:
                  char v64 = 0;
                  char v65 = 0;
                  unsigned int v62 = 64;
                  unsigned int v66 = 64;
                  break;
                default:
                  if (v63 == 64)
                  {
                    char v64 = 0;
                    char v65 = 0;
                    unsigned int v66 = 32;
                    unsigned int v62 = 64;
                  }
                  break;
              }
            }
            unsigned int v120 = (v62 >> 3) - 1;
            if (v64) {
              unsigned int v121 = 0;
            }
            else {
              unsigned int v121 = 32 - __clz(~(-1 << -(char)__clz(v120)));
            }
            unsigned int v122 = (v66 >> 3) - 1;
            if (v65)
            {
              unsigned int v123 = 0;
              if (v121) {
                goto LABEL_149;
              }
            }
            else
            {
              unsigned int v123 = 32 - __clz(~(-1 << -(char)__clz(v122)));
              if (v123 | v121)
              {
LABEL_149:
                int v124 = 0;
                uint64_t v125 = 0;
                int v126 = v33 & v120;
                int v127 = v18 & v122;
                BOOL v128 = v121 != 0;
                BOOL v129 = v123 != 0;
                int v130 = 1;
                do
                {
                  --v121;
                  if (v128) {
                    v125 |= (unint64_t)(v130 & v126) << v124++;
                  }
                  else {
                    unsigned int v121 = 0;
                  }
                  --v123;
                  if (v129) {
                    v125 |= (unint64_t)(v130 & v127) << v124++;
                  }
                  else {
                    unsigned int v123 = 0;
                  }
                  v130 *= 2;
                  --v124;
                  BOOL v129 = v123 != 0;
                  BOOL v128 = v121 != 0;
                }
                while (v123 | v121);
                goto LABEL_161;
              }
            }
            uint64_t v125 = 0;
LABEL_161:
            unint64_t v50 = ((unint64_t)(v35 / v62 + v151 / v66 * ((v62 + v132) / v62)) << 14) + (v125 << 10);
            goto LABEL_59;
          }
          if (v143)
          {
            int v43 = 0;
            uint64_t v44 = 0;
            int v45 = 1;
            BOOL v46 = v140;
            BOOL v47 = v141;
            __int32 v49 = v142.i32[0];
            __int32 v48 = v142.i32[1];
            do
            {
              --v48;
              if (v47) {
                v44 |= (unint64_t)(v45 & v33) << v43++;
              }
              else {
                __int32 v48 = 0;
              }
              --v49;
              if (v46) {
                v44 |= (unint64_t)(v45 & v18) << v43++;
              }
              else {
                __int32 v49 = 0;
              }
              v45 *= 2;
              --v43;
              BOOL v46 = v49 != 0;
              BOOL v47 = v48 != 0;
            }
            while (v49 | v48);
          }
          else
          {
            uint64_t v44 = 0;
          }
          unint64_t v50 = v44 << 10;
LABEL_59:
          unsigned int v51 = *(_DWORD *)(v28 + 128) >> (*(unsigned char *)(v28 + 144) + a12);
          if (v51 <= 1) {
            unsigned int v51 = 1;
          }
          unsigned int v52 = v51 + 7;
          if (v52 < 0x10) {
            unsigned int v53 = 0;
          }
          else {
            unsigned int v53 = 32 - __clz(~(-1 << -(char)__clz((v52 >> 3) - 1)));
          }
          unsigned int v54 = *(_DWORD *)(v28 + 132) >> (*(unsigned char *)(v28 + 144) + a12);
          if (v54 <= 1) {
            unsigned int v54 = 1;
          }
          unsigned int v55 = v54 + 7;
          if (v55 < 0x10)
          {
            unsigned int v56 = 0;
            if (!v53)
            {
LABEL_81:
              uint64_t v58 = 0;
              goto LABEL_82;
            }
          }
          else
          {
            unsigned int v56 = 32 - __clz(~(-1 << -(char)__clz((v55 >> 3) - 1)));
            if (!(v56 | v53)) {
              goto LABEL_81;
            }
          }
          int v57 = 0;
          uint64_t v58 = 0;
          BOOL v59 = v53 != 0;
          BOOL v60 = v56 != 0;
          int v61 = 1;
          do
          {
            --v53;
            if (v59) {
              v58 |= (unint64_t)(v61 & v33) << v57++;
            }
            else {
              unsigned int v53 = 0;
            }
            --v56;
            if (v60) {
              v58 |= (unint64_t)(v61 & v18) << v57++;
            }
            else {
              unsigned int v56 = 0;
            }
            v61 *= 2;
            --v57;
            BOOL v60 = v56 != 0;
            BOOL v59 = v53 != 0;
          }
          while (v56 | v53);
LABEL_82:
          int v67 = v39 < 8 || v40;
          unsigned int v68 = (char *)(a4 + 8 * v58);
          unint64_t v69 = v149 + 16 * (v37 - a7);
          unsigned int v70 = (void *)(a2 + v50);
          if (v34 < 8) {
            int v71 = 1;
          }
          else {
            int v71 = v67;
          }
          if (v157)
          {
            if (!v71)
            {
              unsigned int v77 = __dst;
LABEL_95:
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock(v69, a11, (unint64_t)v77, v68, v39, v34);
              a7 = v144;
              goto LABEL_129;
            }
            int v72 = v70;
            char v73 = v39;
            int v74 = v38;
            BOOL v75 = v70;
            BOOL v76 = v40;
            memcpy(__dst, v72, sizeof(__dst));
            BOOL v40 = v76;
            unsigned int v70 = v75;
            int v38 = v74;
            LOBYTE(v39) = v73;
            unsigned int v35 = 8 * v33;
            unsigned int v77 = __dst;
            LOBYTE(v34) = v154;
            uint64_t v28 = v153;
          }
          else
          {
            unsigned int v77 = v70;
            if (!v71) {
              goto LABEL_95;
            }
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE14ELj4ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = v28;
          uint64_t v159 = v77;
          unsigned __int8 v167 = v39;
          unsigned __int8 v168 = v34;
          unsigned int v163 = v139;
          unsigned int v164 = v37 - v35;
          long long v160 = v68;
          unint64_t v161 = v69;
          uint64_t v162 = a11;
          unsigned int v165 = v150;
          unsigned int v166 = v38;
          if (v40)
          {
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(v28 + 8) + 7384), block);
            a7 = v144;
            goto LABEL_129;
          }
          uint64_t v78 = (uint64_t)&v77[AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)v170, 128, (uint64_t)v77, *v68)];
          uint64_t v79 = v78
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v172, 128, v78, v68[1]);
          uint64_t v80 = v79
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v171, 128, v79, v68[2]);
          uint64_t v81 = v80
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v173, 128, v80, v68[3]);
          uint64_t v82 = v81
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v174, 128, v81, v68[4]);
          uint64_t v83 = v82
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v176, 128, v82, v68[5]);
          uint64_t v84 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v175, 128, v83, v68[6]);
          AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)v177, 128, v83 + v84, v68[7]);
          uint64_t v85 = v165;
          a7 = v144;
          if (v165 && v166)
          {
            uint64_t v86 = 0;
            unint64_t v87 = (unint64_t)v163 << 7;
            uint64_t v88 = 16 * v164;
            uint64_t v89 = &v170[v87 + v88];
            unint64_t v90 = v161;
            uint64_t v91 = v162;
            unint64_t v92 = 16 * v166;
            if (v92 <= 1) {
              unint64_t v93 = 1;
            }
            else {
              unint64_t v93 = 16 * v166;
            }
            unint64_t v94 = v87 + v88;
            long long v95 = &v170[v87 + v88];
            if (v93) {
              BOOL v96 = (v93 - 1) >> 32 == 0;
            }
            else {
              BOOL v96 = 0;
            }
            char v97 = !v96;
            uint64_t v98 = v93 & 0xFFFFFFFE0;
            uint64_t v99 = v93 & 0xFFFFFFFF0;
            long long v100 = &v170[v94 + 16];
            char v101 = (long long *)(v161 + 16);
            uint64_t v102 = v89;
            unint64_t v103 = v161;
            do
            {
              unsigned int v104 = (char *)(v90 + v91 * v86);
              unsigned int v105 = &v89[128 * v86];
              if ((unint64_t)(&v95[128 * v86] - v104) < 0x20) {
                char v106 = 1;
              }
              else {
                char v106 = v97;
              }
              if (v106)
              {
                int v107 = 0;
                goto LABEL_125;
              }
              if (v93 >= 0x20)
              {
                uint64_t v113 = v101;
                uint64_t v114 = v100;
                uint64_t v115 = v93 & 0xFFFFFFFE0;
                do
                {
                  long long v116 = *v113;
                  *(v114 - 1) = *(v113 - 1);
                  *uint64_t v114 = v116;
                  v114 += 2;
                  v113 += 2;
                  v115 -= 32;
                }
                while (v115);
                if (v93 == v98) {
                  goto LABEL_108;
                }
                uint64_t v108 = v93 & 0xFFFFFFFE0;
                if ((v93 & 0x10) == 0)
                {
                  v104 += v98;
                  v105 += v98;
                  int v107 = v93 & 0xFFFFFFE0;
                  goto LABEL_125;
                }
              }
              else
              {
                uint64_t v108 = 0;
              }
              v105 += v99;
              unint64_t v109 = v108 - (v93 & 0xFFFFFFFF0);
              uint64_t v110 = (uint64_t *)(v103 + v108);
              uint64_t v111 = &v102[v108];
              do
              {
                uint64_t v112 = *v110++;
                *v111++ = v112;
                v109 += 8;
              }
              while (v109);
              if (v93 == v99) {
                goto LABEL_108;
              }
              v104 += v99;
              int v107 = v93 & 0xFFFFFFF0;
LABEL_125:
              unsigned int v117 = v107 + 1;
              do
              {
                char v118 = *v104++;
                *v105++ = v118;
              }
              while (v92 > v117++);
LABEL_108:
              ++v86;
              v100 += 128;
              char v101 = (long long *)((char *)v101 + v91);
              v103 += v91;
              v102 += 128;
            }
            while (v86 != v85);
          }
          AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v170, 128, (unint64_t)v159, v160, v167, v168);
LABEL_129:
          if (v157) {
            memcpy(v70, v77, 0x400uLL);
          }
          BOOL v23 = v33++ == v145 >> 3;
          uint64_t v28 = v153;
          unsigned int v34 = v154;
        }
        while (!v23);
        BOOL v23 = v18++ == v138;
      }
      while (!v23);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, int a12)
{
  v222[24] = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v198 = a8;
  unsigned int v17 = a8 >> 3;
  unsigned int v179 = a8 + a10 - 1;
  unsigned int v181 = v179 >> 3;
  unsigned int v18 = *(unsigned __int8 *)(*(void *)(a1 + 208) + 88);
  unsigned int v19 = *(_DWORD *)(a1 + 112);
  uint64_t v199 = a1;
  if (*(void *)(a1 + 168)) {
    int v20 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v20 = 0;
  }
  BOOL v21 = (v20 & 0xD00) == 0 || v20 == 768;
  int v22 = v20 & 0xE00;
  int v24 = !v21 && v22 != 1024;
  int v202 = v24;
  BOOL isLevelTiled = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::isLevelTiled(a1, *(_DWORD *)(a1 + 144) + a12);
  uint64_t v26 = a1;
  BOOL v192 = isLevelTiled;
  if (v17 <= v181)
  {
    unsigned int v191 = a7 + a9 - 1;
    unsigned int v178 = a7 >> 3;
    if (a7 >> 3 <= v191 >> 3)
    {
      unsigned int v175 = a5 - 1;
      unsigned int v201 = (a5 - 1) >> 3;
      int v200 = ((a5 - 1) & 7) + 1;
      int v176 = ((a6 - 1) & 7) + 1;
      unsigned int v177 = (a6 - 1) >> 3;
      unint64_t v27 = v19 * (unint64_t)v18;
      uint32x2_t v28 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0x700000007);
      int8x8_t v29 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v28, 3uLL))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x1000000010, v28));
      __int32 v189 = v29.i32[0] | v29.i32[1];
      int8x8_t v187 = v29;
      BOOL v185 = v29.i32[0] != 0;
      BOOL v186 = v29.i32[1] != 0;
      uint64_t v30 = a11;
      unint64_t v174 = 8 * v27;
      uint64_t v31 = 2 * a11;
      unsigned int v190 = a7;
      do
      {
        unsigned int v32 = (8 * v17) | 7;
        if (8 * v17 <= v198) {
          int v33 = v198;
        }
        else {
          int v33 = 8 * v17;
        }
        unsigned int v34 = v178;
        if (v179 < v32) {
          unsigned int v32 = v179;
        }
        int v184 = v33 - 8 * v17;
        int v196 = v32 - v33 + 1;
        unsigned int v197 = 8 * v17;
        if (v17 == v177) {
          unsigned int v35 = v176;
        }
        else {
          unsigned int v35 = 8;
        }
        uint64_t v195 = a3 + (v33 - v198) * v30;
        unsigned int v182 = v35;
        do
        {
          unsigned int v36 = 8 * v34;
          unsigned int v37 = 8 * (v34 + 1) - 1;
          if (8 * v34 <= a7) {
            int v38 = a7;
          }
          else {
            int v38 = 8 * v34;
          }
          if (v191 < v37) {
            unsigned int v37 = v191;
          }
          int v39 = v37 - v38 + 1;
          if (v34 == v201) {
            unsigned int v40 = v200;
          }
          else {
            unsigned int v40 = 8;
          }
          BOOL v41 = 1;
          if (v197 >= v198 && v36 >= a7)
          {
            int v42 = v200;
            if (v34 != v201) {
              int v42 = 8;
            }
            BOOL v41 = v39 != v42 || v196 != v35;
          }
          if (v192)
          {
            unsigned int v63 = 0;
            uint64_t v64 = v174 >> (*(unsigned char *)(v26 + 57) != 0);
            char v65 = 1;
            if (v64 > 127)
            {
              if (v64 > 511)
              {
                if (v64 == 512)
                {
                  char v65 = 0;
                  char v66 = 0;
                  unsigned int v63 = 16;
                  unsigned int v67 = 16;
                }
                else
                {
                  char v66 = 1;
                  unsigned int v67 = 0;
                  if (v64 == 1024)
                  {
                    char v65 = 0;
                    unsigned int v67 = 8;
                    unsigned int v63 = 16;
                  }
                }
              }
              else if (v64 == 128)
              {
                char v65 = 0;
                char v66 = 0;
                unsigned int v63 = 32;
                unsigned int v67 = 32;
              }
              else
              {
                char v66 = 1;
                unsigned int v67 = 0;
                if (v64 == 256)
                {
                  char v65 = 0;
                  char v66 = 0;
                  unsigned int v67 = 16;
                  unsigned int v63 = 32;
                }
              }
            }
            else
            {
              char v66 = 1;
              unsigned int v67 = 0;
              switch(v64)
              {
                case 4:
                  char v65 = 0;
                  char v66 = 0;
                  unsigned int v67 = 128;
                  unsigned int v63 = 256;
                  break;
                case 5:
                case 6:
                case 7:
                case 9:
                case 10:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 17:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                  break;
                case 8:
                  char v65 = 0;
                  char v66 = 0;
                  unsigned int v63 = 128;
                  unsigned int v67 = 128;
                  break;
                case 16:
                  char v65 = 0;
                  char v66 = 0;
                  unsigned int v67 = 64;
                  unsigned int v63 = 128;
                  break;
                case 32:
                  char v65 = 0;
                  char v66 = 0;
                  unsigned int v63 = 64;
                  unsigned int v67 = 64;
                  break;
                default:
                  if (v64 == 64)
                  {
                    char v65 = 0;
                    char v66 = 0;
                    unsigned int v67 = 32;
                    unsigned int v63 = 64;
                  }
                  break;
              }
            }
            unsigned int v163 = (v63 >> 3) - 1;
            if (v65) {
              unsigned int v164 = 0;
            }
            else {
              unsigned int v164 = 32 - __clz(~(-1 << -(char)__clz(v163)));
            }
            unsigned int v165 = (v67 >> 3) - 1;
            if (v66)
            {
              unsigned int v166 = 0;
              if (v164) {
                goto LABEL_174;
              }
            }
            else
            {
              unsigned int v166 = 32 - __clz(~(-1 << -(char)__clz(v165)));
              if (v166 | v164)
              {
LABEL_174:
                int v167 = 0;
                uint64_t v168 = 0;
                int v169 = v34 & v163;
                int v170 = v17 & v165;
                BOOL v171 = v164 != 0;
                BOOL v172 = v166 != 0;
                int v173 = 1;
                do
                {
                  --v164;
                  if (v171) {
                    v168 |= (unint64_t)(v173 & v169) << v167++;
                  }
                  else {
                    unsigned int v164 = 0;
                  }
                  --v166;
                  if (v172) {
                    v168 |= (unint64_t)(v173 & v170) << v167++;
                  }
                  else {
                    unsigned int v166 = 0;
                  }
                  v173 *= 2;
                  --v167;
                  BOOL v172 = v166 != 0;
                  BOOL v171 = v164 != 0;
                }
                while (v166 | v164);
                goto LABEL_186;
              }
            }
            uint64_t v168 = 0;
LABEL_186:
            unint64_t v51 = ((unint64_t)(v36 / v63 + v197 / v67 * ((v63 + v175) / v63)) << 14) + (v168 << 10);
            goto LABEL_59;
          }
          if (v189)
          {
            int v44 = 0;
            uint64_t v45 = 0;
            int v46 = 1;
            BOOL v47 = v185;
            BOOL v48 = v186;
            __int32 v50 = v187.i32[0];
            __int32 v49 = v187.i32[1];
            do
            {
              --v49;
              if (v48) {
                v45 |= (unint64_t)(v46 & v34) << v44++;
              }
              else {
                __int32 v49 = 0;
              }
              --v50;
              if (v47) {
                v45 |= (unint64_t)(v46 & v17) << v44++;
              }
              else {
                __int32 v50 = 0;
              }
              v46 *= 2;
              --v44;
              BOOL v47 = v50 != 0;
              BOOL v48 = v49 != 0;
            }
            while (v50 | v49);
          }
          else
          {
            uint64_t v45 = 0;
          }
          unint64_t v51 = v45 << 10;
LABEL_59:
          unsigned int v52 = *(_DWORD *)(v26 + 128) >> (*(unsigned char *)(v26 + 144) + a12);
          if (v52 <= 1) {
            unsigned int v52 = 1;
          }
          unsigned int v53 = v52 + 7;
          if (v53 < 0x10) {
            unsigned int v54 = 0;
          }
          else {
            unsigned int v54 = 32 - __clz(~(-1 << -(char)__clz((v53 >> 3) - 1)));
          }
          unsigned int v55 = *(_DWORD *)(v26 + 132) >> (*(unsigned char *)(v26 + 144) + a12);
          if (v55 <= 1) {
            unsigned int v55 = 1;
          }
          unsigned int v56 = v55 + 7;
          if (v56 < 0x10)
          {
            unsigned int v57 = 0;
            if (!v54)
            {
LABEL_81:
              uint64_t v59 = 0;
              goto LABEL_82;
            }
          }
          else
          {
            unsigned int v57 = 32 - __clz(~(-1 << -(char)__clz((v56 >> 3) - 1)));
            if (!(v57 | v54)) {
              goto LABEL_81;
            }
          }
          int v58 = 0;
          uint64_t v59 = 0;
          BOOL v60 = v54 != 0;
          BOOL v61 = v57 != 0;
          int v62 = 1;
          do
          {
            --v54;
            if (v60) {
              v59 |= (unint64_t)(v62 & v34) << v58++;
            }
            else {
              unsigned int v54 = 0;
            }
            --v57;
            if (v61) {
              v59 |= (unint64_t)(v62 & v17) << v58++;
            }
            else {
              unsigned int v57 = 0;
            }
            v62 *= 2;
            --v58;
            BOOL v61 = v57 != 0;
            BOOL v60 = v54 != 0;
          }
          while (v57 | v54);
LABEL_82:
          unsigned int v68 = v38 - a7;
          int v69 = v40 < 8 || v41;
          unsigned int v70 = (unsigned __int8 *)(a4 + 8 * v59);
          uint64_t v71 = v195 + 16 * v68;
          int v72 = (void *)(a2 + v51);
          if (v35 < 8) {
            int v73 = 1;
          }
          else {
            int v73 = v69;
          }
          if (v202)
          {
            if (!v73)
            {
              uint64_t v78 = __dst;
LABEL_96:
              uint64_t v80 = 0;
              uint64_t v81 = v78;
              do
              {
                uint64_t v94 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,4u>::kSubblockPositions[v80 + 1];
                uint64_t v95 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,4u>::kSubblockPositions[v80];
                unsigned int v96 = (v40 - 4 * v95) & ~((int)(v40 - 4 * v95) >> 31);
                if (v96 >= 4) {
                  unsigned int v96 = 4;
                }
                unsigned int v97 = (v35 - 2 * v94) & ~((int)(v35 - 2 * v94) >> 31);
                if (v97 >= 2) {
                  unsigned int v97 = 2;
                }
                if (v96) {
                  BOOL v98 = v97 == 0;
                }
                else {
                  BOOL v98 = 1;
                }
                if (v98)
                {
                  char v93 = 0;
                }
                else
                {
                  uint64_t v82 = (long long *)(v71 + v31 * v94 + (v95 << 6));
                  uint64_t v83 = v82 + 2;
                  long long v85 = *v82;
                  long long v86 = v82[1];
                  uint64_t v84 = (long long *)((char *)v82 + v30);
                  long long v87 = *v83;
                  long long v88 = v83[1];
                  long long v89 = *v84;
                  long long v90 = v84[1];
                  v84 += 2;
                  long long v91 = *v84;
                  long long v92 = v84[1];
                  *uint64_t v81 = v85;
                  v81[1] = v86;
                  v81[2] = v89;
                  v81[3] = v90;
                  v81[4] = v87;
                  v81[5] = v88;
                  v81[6] = v91;
                  v81[7] = v92;
                  v81 += 8;
                  char v93 = 127;
                }
                *v70++ = v93;
                v80 += 2;
              }
              while (v80 != 16);
              a7 = v190;
              if (v202) {
                goto LABEL_155;
              }
              goto LABEL_27;
            }
            int v74 = v72;
            int v75 = v39;
            BOOL v76 = v41;
            int v77 = v38;
            memcpy(__dst, v72, sizeof(__dst));
            uint64_t v78 = __dst;
            int v72 = v74;
            int v38 = v77;
            BOOL v41 = v76;
            unsigned int v35 = v182;
            unsigned int v36 = 8 * v34;
            int v39 = v75;
            uint64_t v30 = a11;
            uint64_t v26 = v199;
          }
          else
          {
            uint64_t v78 = v72;
            if (!v73) {
              goto LABEL_96;
            }
          }
          unsigned int v188 = v72;
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE14ELj4ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = v26;
          float64x2_t v204 = v78;
          unsigned __int8 v212 = v40;
          unsigned __int8 v213 = v35;
          unsigned int v208 = v184;
          unsigned int v209 = v38 - v36;
          uint64_t v205 = v70;
          uint64_t v206 = v71;
          uint64_t v207 = v30;
          unsigned int v210 = v196;
          unsigned int v211 = v39;
          if (v41)
          {
            uint64_t v79 = v78;
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(v26 + 8) + 7384), block);
            uint64_t v78 = v79;
            uint64_t v26 = v199;
            a7 = v190;
            uint64_t v31 = 2 * a11;
            int v72 = v188;
            if (!v202) {
              goto LABEL_27;
            }
LABEL_155:
            memcpy(v72, v78, 0x400uLL);
            uint64_t v31 = 2 * a11;
            uint64_t v26 = v199;
            goto LABEL_27;
          }
          unsigned int v183 = v78;
          uint64_t v99 = (uint64_t)&v78[AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)v215, 128, (uint64_t)v78, *v70)];
          uint64_t v100 = v99
               + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v217, 128, v99, v70[1]);
          uint64_t v101 = v100
               + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v216, 128, v100, v70[2]);
          uint64_t v102 = v101
               + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v218, 128, v101, v70[3]);
          uint64_t v103 = v102
               + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v219, 128, v102, v70[4]);
          uint64_t v104 = v103
               + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v221, 128, v103, v70[5]);
          uint64_t v105 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v220, 128, v104, v70[6]);
          AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)v222, 128, v104 + v105, v70[7]);
          uint64_t v106 = v210;
          if (v210 && v211)
          {
            uint64_t v107 = 0;
            unint64_t v108 = (unint64_t)v208 << 7;
            uint64_t v109 = 16 * v209;
            uint64_t v110 = &v215[v108 + v109];
            uint64_t v111 = v206;
            uint64_t v112 = v207;
            unint64_t v113 = 16 * v211;
            if (v113 <= 1) {
              unint64_t v114 = 1;
            }
            else {
              unint64_t v114 = 16 * v211;
            }
            unint64_t v115 = v108 + v109;
            long long v116 = &v215[v108 + v109];
            if (v114) {
              BOOL v117 = (v114 - 1) >> 32 == 0;
            }
            else {
              BOOL v117 = 0;
            }
            char v118 = !v117;
            uint64_t v119 = v114 & 0xFFFFFFFE0;
            uint64_t v120 = v114 & 0xFFFFFFFF0;
            unsigned int v121 = &v215[v115 + 16];
            unsigned int v122 = (long long *)(v206 + 16);
            unsigned int v123 = v110;
            uint64_t v124 = v206;
            do
            {
              uint64_t v125 = (char *)(v111 + v112 * v107);
              int v126 = &v110[128 * v107];
              if ((unint64_t)(&v116[128 * v107] - v125) < 0x20) {
                char v127 = 1;
              }
              else {
                char v127 = v118;
              }
              if (v127)
              {
                int v128 = 0;
                goto LABEL_139;
              }
              if (v114 >= 0x20)
              {
                unsigned int v134 = v122;
                unsigned int v135 = v121;
                uint64_t v136 = v114 & 0xFFFFFFFE0;
                do
                {
                  long long v137 = *v134;
                  *(v135 - 1) = *(v134 - 1);
                  *unsigned int v135 = v137;
                  v135 += 2;
                  v134 += 2;
                  v136 -= 32;
                }
                while (v136);
                if (v114 == v119) {
                  goto LABEL_122;
                }
                uint64_t v129 = v114 & 0xFFFFFFFE0;
                if ((v114 & 0x10) == 0)
                {
                  v125 += v119;
                  v126 += v119;
                  int v128 = v114 & 0xFFFFFFE0;
                  goto LABEL_139;
                }
              }
              else
              {
                uint64_t v129 = 0;
              }
              v126 += v120;
              unint64_t v130 = v129 - (v114 & 0xFFFFFFFF0);
              unint64_t v131 = (uint64_t *)(v124 + v129);
              unsigned int v132 = &v123[v129];
              do
              {
                uint64_t v133 = *v131++;
                *v132++ = v133;
                v130 += 8;
              }
              while (v130);
              if (v114 == v120) {
                goto LABEL_122;
              }
              v125 += v120;
              int v128 = v114 & 0xFFFFFFF0;
LABEL_139:
              unsigned int v138 = v128 + 1;
              do
              {
                char v139 = *v125++;
                *v126++ = v139;
              }
              while (v113 > v138++);
LABEL_122:
              ++v107;
              v121 += 128;
              unsigned int v122 = (long long *)((char *)v122 + v112);
              v124 += v112;
              v123 += 128;
            }
            while (v107 != v106);
          }
          uint64_t v141 = 0;
          int8x8_t v142 = v204;
          __int32 v143 = (char *)v205;
          int v144 = v212;
          int v145 = v213;
          a7 = v190;
          uint64_t v26 = v199;
          uint64_t v31 = 2 * a11;
          int v72 = v188;
          do
          {
            uint64_t v158 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,4u>::kSubblockPositions[v141 + 1];
            uint64_t v159 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,4u>::kSubblockPositions[v141];
            unsigned int v160 = (v144 - 4 * v159) & ~((v144 - 4 * (int)v159) >> 31);
            if (v160 >= 4) {
              unsigned int v160 = 4;
            }
            unsigned int v161 = (v145 - 2 * v158) & ~((v145 - 2 * (int)v158) >> 31);
            if (v161 >= 2) {
              unsigned int v161 = 2;
            }
            if (v160) {
              BOOL v162 = v161 == 0;
            }
            else {
              BOOL v162 = 1;
            }
            if (v162)
            {
              char v157 = 0;
            }
            else
            {
              BOOL v146 = (long long *)&v215[256 * v158 + 64 * v159];
              long long v148 = *v146;
              long long v149 = v146[1];
              unsigned int v147 = v146 + 2;
              int v150 = v146 + 8;
              v146 += 10;
              long long v151 = *v147;
              long long v152 = v147[1];
              long long v153 = *v150;
              long long v154 = v150[1];
              long long v155 = *v146;
              long long v156 = v146[1];
              *int8x8_t v142 = v148;
              v142[1] = v149;
              v142[2] = v153;
              v142[3] = v154;
              v142[4] = v151;
              v142[5] = v152;
              v142[6] = v155;
              v142[7] = v156;
              v142 += 8;
              char v157 = 127;
            }
            *v143++ = v157;
            v141 += 2;
          }
          while (v141 != 16);
          uint64_t v78 = v183;
          if (v202) {
            goto LABEL_155;
          }
LABEL_27:
          BOOL v21 = v34++ == v191 >> 3;
        }
        while (!v21);
        BOOL v21 = v17++ == v181;
      }
      while (!v21);
    }
  }
}

uint64_t AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10, uint64_t a11, char a12)
{
  uint64_t v12 = MEMORY[0x270FA5388](a1);
  unsigned int v14 = v13;
  unsigned int v16 = v15;
  unsigned int v18 = v17;
  unsigned int v20 = v19;
  uint64_t v145 = v21;
  uint64_t v146 = v22;
  uint64_t v132 = v23;
  uint64_t v24 = v12;
  v174[96] = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(v12, 0);
  unsigned int v149 = v14;
  unsigned int v134 = v14 + a10 - 1;
  uint64_t v150 = v24;
  if (*(void *)(v24 + 168)) {
    int v25 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v25 = 0;
  }
  unsigned int v26 = v20 - 1;
  unsigned int v27 = v18 - 1;
  unsigned int v28 = v14 >> 3;
  unsigned int v133 = v134 >> 3;
  BOOL v29 = (v25 & 0xD00) == 0 || v25 == 768;
  int v30 = v25 & 0xE00;
  int v32 = !v29 && v30 != 1024;
  int v154 = v32;
  uint64_t result = v24;
  if (*(unsigned char *)(v24 + 232))
  {
    unsigned int v34 = *(unsigned __int8 *)(v24 + 255);
    unsigned int v35 = *(unsigned __int8 *)(v24 + 254);
    char v36 = __clz(v26);
    if (1 << v34 >= v18 || v20 >> v35)
    {
      if (!(v18 >> v34) && 1 << v35 < v20)
      {
        if (v18 < 2) {
          unsigned int v39 = 0;
        }
        else {
          unsigned int v39 = __clz(~(-1 << -(char)__clz(v27))) - 32;
        }
        v35 += v34 + v39;
        unsigned int v34 = -v39;
      }
    }
    else
    {
      unsigned int v37 = 32 - __clz(~(-1 << -v36));
      unsigned int v38 = v35 + v34;
      if (v20 < 2) {
        unsigned int v37 = 0;
      }
      unsigned int v34 = v38 - v37;
      unsigned int v35 = v37;
    }
    if (v20 < 2)
    {
      if (v35) {
        goto LABEL_27;
      }
    }
    else if (32 - __clz(~(-1 << -v36)) < v35)
    {
LABEL_27:
      BOOL v144 = 0;
LABEL_32:
      unsigned int v141 = v35 - 3;
      unsigned int v138 = v34 - 3;
      int v41 = -1 << *(unsigned char *)(*(void *)(v24 + 208) + 48);
      unsigned int v131 = (((~v41 + v20) & v41) + ~(-1 << v35)) >> v35;
      goto LABEL_33;
    }
    if (v18 < 2) {
      unsigned int v40 = 0;
    }
    else {
      unsigned int v40 = 32 - __clz(~(-1 << -(char)__clz(v27)));
    }
    BOOL v144 = v40 >= v34;
    goto LABEL_32;
  }
  BOOL v144 = 0;
  unsigned int v131 = 0;
  unsigned int v138 = 0;
  unsigned int v141 = 0;
LABEL_33:
  if (v28 <= v133)
  {
    unsigned int v143 = v16 + a9 - 1;
    unsigned int v130 = v16 >> 3;
    if (v16 >> 3 <= v143 >> 3)
    {
      unsigned int v153 = v26 >> 3;
      unsigned int v129 = v27 >> 3;
      int v152 = (v26 & 7) + 1;
      int v128 = (v27 & 7) + 1;
      int v127 = ~(-1 << v138);
      uint32x2_t v42 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(v20, v18), (int32x2_t)0x700000007);
      int8x8_t v43 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v42, 3uLL))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x1000000010, v42));
      __int32 v139 = v43.i32[0] | v43.i32[1];
      int8x8_t v137 = v43;
      BOOL v135 = v43.i32[0] != 0;
      BOOL v136 = v43.i32[1] != 0;
      unsigned int v142 = v16;
      do
      {
        unsigned int v44 = (8 * v28) | 7;
        if (8 * v28 <= v149) {
          int v45 = v149;
        }
        else {
          int v45 = 8 * v28;
        }
        if (v134 < v44) {
          unsigned int v44 = v134;
        }
        int v140 = v45 - 8 * v28;
        int v148 = v44 - v45 + 1;
        unsigned int v46 = v130;
        if (v28 == v129) {
          unsigned int v47 = v128;
        }
        else {
          unsigned int v47 = 8;
        }
        int v48 = v28 & v127;
        uint64_t v147 = v132 + (v45 - v149) * a11;
        unsigned int v151 = v47;
        do
        {
          unsigned int v49 = 8 * v46;
          unsigned int v50 = 8 * (v46 + 1) - 1;
          if (8 * v46 <= v16) {
            int v51 = v16;
          }
          else {
            int v51 = 8 * v46;
          }
          if (v143 < v50) {
            unsigned int v50 = v143;
          }
          int v52 = v50 - v51 + 1;
          if (v46 == v153) {
            unsigned int v53 = v152;
          }
          else {
            unsigned int v53 = 8;
          }
          BOOL v54 = 1;
          if (8 * v28 >= v149 && v49 >= v16)
          {
            int v55 = v152;
            if (v46 != v153) {
              int v55 = 8;
            }
            BOOL v54 = v52 != v55 || v148 != v47;
          }
          if (v144)
          {
            if (v141 | v138)
            {
              int v57 = 0;
              uint64_t v58 = 0;
              BOOL v59 = v138 != 0;
              int v60 = 1;
              BOOL v62 = v141 != 0;
              unsigned int v61 = v138;
              unsigned int v63 = v141;
              do
              {
                --v63;
                if (v62) {
                  v58 |= (unint64_t)(v46 & ~(-1 << v141) & v60) << v57++;
                }
                else {
                  unsigned int v63 = 0;
                }
                --v61;
                if (v59) {
                  v58 |= (unint64_t)(v48 & v60) << v57++;
                }
                else {
                  unsigned int v61 = 0;
                }
                v60 *= 2;
                --v57;
                BOOL v59 = v61 != 0;
                BOOL v62 = v63 != 0;
              }
              while (v61 | v63);
            }
            else
            {
              uint64_t v58 = 0;
            }
            uint64_t v71 = *(void *)(result + 320) * ((v46 >> v141) + (v28 >> v138) * v131) + (v58 << 12);
          }
          else
          {
            if (v139)
            {
              int v64 = 0;
              uint64_t v65 = 0;
              int v66 = 1;
              BOOL v67 = v135;
              BOOL v68 = v136;
              __int32 v70 = v137.i32[0];
              __int32 v69 = v137.i32[1];
              do
              {
                --v69;
                if (v68) {
                  v65 |= (unint64_t)(v66 & v46) << v64++;
                }
                else {
                  __int32 v69 = 0;
                }
                --v70;
                if (v67) {
                  v65 |= (unint64_t)(v66 & v28) << v64++;
                }
                else {
                  __int32 v70 = 0;
                }
                v66 *= 2;
                --v64;
                BOOL v67 = v70 != 0;
                BOOL v68 = v69 != 0;
              }
              while (v70 | v69);
            }
            else
            {
              uint64_t v65 = 0;
            }
            uint64_t v71 = v65 << 12;
          }
          unsigned int v72 = *(_DWORD *)(result + 128) >> (*(unsigned char *)(result + 144) + a12);
          if (v72 <= 1) {
            unsigned int v72 = 1;
          }
          unsigned int v73 = v72 + 7;
          if (v73 < 0x10) {
            unsigned int v74 = 0;
          }
          else {
            unsigned int v74 = 32 - __clz(~(-1 << -(char)__clz((v73 >> 3) - 1)));
          }
          unsigned int v75 = *(_DWORD *)(result + 132) >> (*(unsigned char *)(result + 144) + a12);
          if (v75 <= 1) {
            unsigned int v75 = 1;
          }
          unsigned int v76 = v75 + 7;
          if (v76 < 0x10) {
            unsigned int v77 = 0;
          }
          else {
            unsigned int v77 = 32 - __clz(~(-1 << -(char)__clz((v76 >> 3) - 1)));
          }
          if (v77 | v74)
          {
            int v78 = 0;
            uint64_t v79 = 0;
            BOOL v80 = v74 != 0;
            BOOL v81 = v77 != 0;
            int v82 = 1;
            do
            {
              --v74;
              if (v80) {
                v79 |= (unint64_t)(v82 & v46) << v78++;
              }
              else {
                unsigned int v74 = 0;
              }
              --v77;
              if (v81) {
                v79 |= (unint64_t)(v82 & v28) << v78++;
              }
              else {
                unsigned int v77 = 0;
              }
              v82 *= 2;
              --v78;
              BOOL v81 = v77 != 0;
              BOOL v80 = v74 != 0;
            }
            while (v77 | v74);
          }
          else
          {
            uint64_t v79 = 0;
          }
          int v83 = v53 < 8 || v54;
          uint64_t v84 = (unsigned __int8 *)(v146 + 8 * v79);
          uint64_t v85 = v147 + ((unint64_t)(v51 - v16) << 6);
          long long v86 = (void *)(v145 + v71);
          if (v47 < 8) {
            int v87 = 1;
          }
          else {
            int v87 = v83;
          }
          if (v154)
          {
            if (!v87)
            {
              long long v91 = __dst;
LABEL_123:
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock(v85, a11, (unint64_t)v91, v84, v53, v47);
              goto LABEL_124;
            }
            long long v88 = v86;
            long long v89 = v86;
            char v90 = v53;
            memcpy(__dst, v88, sizeof(__dst));
            unsigned int v49 = 8 * v46;
            long long v91 = __dst;
            LOBYTE(v53) = v90;
            long long v86 = v89;
            int v48 = v28 & v127;
            LOBYTE(v47) = v151;
            uint64_t result = v150;
          }
          else
          {
            long long v91 = v86;
            if (!v87) {
              goto LABEL_123;
            }
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE20ELj4ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = result;
          long long v156 = v91;
          unsigned __int8 v164 = v53;
          unsigned __int8 v165 = v47;
          unsigned int v160 = v140;
          unsigned int v161 = v51 - v49;
          char v157 = v84;
          uint64_t v158 = v85;
          uint64_t v159 = a11;
          unsigned int v162 = v148;
          unsigned int v163 = v52;
          if (!v54)
          {
            unint64_t v93 = (unint64_t)&v91[AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)v167, 512, (unint64_t)v91, *v84)];
            unint64_t v94 = v93
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v169, 512, v93, v84[1]);
            unint64_t v95 = v94
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v168, 512, v94, v84[2]);
            unint64_t v96 = v95
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v170, 512, v95, v84[3]);
            unint64_t v97 = v96
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v171, 512, v96, v84[4]);
            unint64_t v98 = v97
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v173, 512, v97, v84[5]);
            uint64_t v99 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v172, 512, v98, v84[6]);
            AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)v174, 512, v98 + v99, v84[7]);
            uint64_t v100 = v162;
            unsigned int v16 = v142;
            unsigned int v92 = v46 + 1;
            if (!v162 || !v163)
            {
LABEL_151:
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((uint64_t)v167, 512, (unint64_t)v156, v157, v164, v165);
              if (!v154) {
                goto LABEL_47;
              }
              goto LABEL_152;
            }
            uint64_t v101 = 0;
            unint64_t v102 = (unint64_t)v160 << 9;
            unint64_t v103 = (unint64_t)v161 << 6;
            uint64_t v104 = &v167[v102 + v103];
            uint64_t v105 = v158;
            uint64_t v106 = v159;
            unint64_t v107 = (unint64_t)v163 << 6;
            if (v107 <= 1) {
              unint64_t v108 = 1;
            }
            else {
              unint64_t v108 = (unint64_t)v163 << 6;
            }
            unint64_t v109 = v102 + v103;
            uint64_t v110 = &v167[v102 + v103];
            if (v108) {
              BOOL v111 = (v108 - 1) >> 32 == 0;
            }
            else {
              BOOL v111 = 0;
            }
            char v112 = !v111;
            uint64_t v113 = v108 & 0x3FFFFFFFC0;
            unint64_t v114 = &v167[v109 + 16];
            unint64_t v115 = (long long *)(v158 + 16);
            while (2)
            {
              long long v116 = (char *)(v105 + v106 * v101);
              BOOL v117 = &v104[512 * v101];
              if ((unint64_t)(&v110[512 * v101] - v116) < 0x20) {
                char v118 = 1;
              }
              else {
                char v118 = v112;
              }
              if (v118)
              {
                int v119 = 0;
LABEL_148:
                unsigned int v124 = v119 + 1;
                do
                {
                  char v125 = *v116++;
                  *v117++ = v125;
                }
                while (v107 > v124++);
              }
              else
              {
                uint64_t v120 = v115;
                unsigned int v121 = v114;
                uint64_t v122 = v108 & 0x3FFFFFFFC0;
                do
                {
                  long long v123 = *v120;
                  *(v121 - 1) = *(v120 - 1);
                  *unsigned int v121 = v123;
                  v121 += 2;
                  v120 += 2;
                  v122 -= 32;
                }
                while (v122);
                if (v108 != v113)
                {
                  v116 += v113;
                  v117 += v113;
                  int v119 = v108 & 0xFFFFFFC0;
                  goto LABEL_148;
                }
              }
              ++v101;
              v114 += 512;
              unint64_t v115 = (long long *)((char *)v115 + v106);
              if (v101 == v100) {
                goto LABEL_151;
              }
              continue;
            }
          }
          dispatch_sync(*(dispatch_queue_t *)(*(void *)(result + 8) + 7384), block);
LABEL_124:
          unsigned int v16 = v142;
          unsigned int v92 = v46 + 1;
          if (!v154) {
            goto LABEL_47;
          }
LABEL_152:
          memcpy(v86, v91, 0x1000uLL);
LABEL_47:
          BOOL v29 = v46 == v143 >> 3;
          unsigned int v46 = v92;
          uint64_t result = v150;
          unsigned int v47 = v151;
        }
        while (!v29);
        BOOL v29 = v28++ == v133;
      }
      while (!v29);
    }
  }
  return result;
}

uint64_t AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10, uint64_t a11, char a12)
{
  uint64_t v12 = MEMORY[0x270FA5388](a1);
  unsigned int v14 = v13;
  unsigned int v16 = v15;
  unsigned int v18 = v17;
  unsigned int v20 = v19;
  uint64_t v145 = v21;
  uint64_t v146 = v22;
  uint64_t v132 = v23;
  uint64_t v24 = v12;
  v174[96] = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(v12, 0);
  unsigned int v149 = v14;
  unsigned int v134 = v14 + a10 - 1;
  uint64_t v150 = v24;
  if (*(void *)(v24 + 168)) {
    int v25 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v25 = 0;
  }
  unsigned int v26 = v20 - 1;
  unsigned int v27 = v18 - 1;
  unsigned int v28 = v14 >> 3;
  unsigned int v133 = v134 >> 3;
  BOOL v29 = (v25 & 0xD00) == 0 || v25 == 768;
  int v30 = v25 & 0xE00;
  int v32 = !v29 && v30 != 1024;
  int v154 = v32;
  uint64_t result = v24;
  if (*(unsigned char *)(v24 + 232))
  {
    unsigned int v34 = *(unsigned __int8 *)(v24 + 255);
    unsigned int v35 = *(unsigned __int8 *)(v24 + 254);
    char v36 = __clz(v26);
    if (1 << v34 >= v18 || v20 >> v35)
    {
      if (!(v18 >> v34) && 1 << v35 < v20)
      {
        if (v18 < 2) {
          unsigned int v39 = 0;
        }
        else {
          unsigned int v39 = __clz(~(-1 << -(char)__clz(v27))) - 32;
        }
        v35 += v34 + v39;
        unsigned int v34 = -v39;
      }
    }
    else
    {
      unsigned int v37 = 32 - __clz(~(-1 << -v36));
      unsigned int v38 = v35 + v34;
      if (v20 < 2) {
        unsigned int v37 = 0;
      }
      unsigned int v34 = v38 - v37;
      unsigned int v35 = v37;
    }
    if (v20 < 2)
    {
      if (v35) {
        goto LABEL_27;
      }
    }
    else if (32 - __clz(~(-1 << -v36)) < v35)
    {
LABEL_27:
      BOOL v144 = 0;
LABEL_32:
      unsigned int v141 = v35 - 3;
      unsigned int v138 = v34 - 3;
      int v41 = -1 << *(unsigned char *)(*(void *)(v24 + 208) + 48);
      unsigned int v131 = (((~v41 + v20) & v41) + ~(-1 << v35)) >> v35;
      goto LABEL_33;
    }
    if (v18 < 2) {
      unsigned int v40 = 0;
    }
    else {
      unsigned int v40 = 32 - __clz(~(-1 << -(char)__clz(v27)));
    }
    BOOL v144 = v40 >= v34;
    goto LABEL_32;
  }
  BOOL v144 = 0;
  unsigned int v131 = 0;
  unsigned int v138 = 0;
  unsigned int v141 = 0;
LABEL_33:
  if (v28 <= v133)
  {
    unsigned int v143 = v16 + a9 - 1;
    unsigned int v130 = v16 >> 3;
    if (v16 >> 3 <= v143 >> 3)
    {
      unsigned int v153 = v26 >> 3;
      unsigned int v129 = v27 >> 3;
      int v152 = (v26 & 7) + 1;
      int v128 = (v27 & 7) + 1;
      int v127 = ~(-1 << v138);
      uint32x2_t v42 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(v20, v18), (int32x2_t)0x700000007);
      int8x8_t v43 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v42, 3uLL))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x1000000010, v42));
      __int32 v139 = v43.i32[0] | v43.i32[1];
      int8x8_t v137 = v43;
      BOOL v135 = v43.i32[0] != 0;
      BOOL v136 = v43.i32[1] != 0;
      unsigned int v142 = v16;
      do
      {
        unsigned int v44 = (8 * v28) | 7;
        if (8 * v28 <= v149) {
          int v45 = v149;
        }
        else {
          int v45 = 8 * v28;
        }
        if (v134 < v44) {
          unsigned int v44 = v134;
        }
        int v140 = v45 - 8 * v28;
        int v148 = v44 - v45 + 1;
        unsigned int v46 = v130;
        if (v28 == v129) {
          unsigned int v47 = v128;
        }
        else {
          unsigned int v47 = 8;
        }
        int v48 = v28 & v127;
        uint64_t v147 = v132 + (v45 - v149) * a11;
        unsigned int v151 = v47;
        do
        {
          unsigned int v49 = 8 * v46;
          unsigned int v50 = 8 * (v46 + 1) - 1;
          if (8 * v46 <= v16) {
            int v51 = v16;
          }
          else {
            int v51 = 8 * v46;
          }
          if (v143 < v50) {
            unsigned int v50 = v143;
          }
          int v52 = v50 - v51 + 1;
          if (v46 == v153) {
            unsigned int v53 = v152;
          }
          else {
            unsigned int v53 = 8;
          }
          BOOL v54 = 1;
          if (8 * v28 >= v149 && v49 >= v16)
          {
            int v55 = v152;
            if (v46 != v153) {
              int v55 = 8;
            }
            BOOL v54 = v52 != v55 || v148 != v47;
          }
          if (v144)
          {
            if (v141 | v138)
            {
              int v57 = 0;
              uint64_t v58 = 0;
              BOOL v59 = v138 != 0;
              int v60 = 1;
              BOOL v62 = v141 != 0;
              unsigned int v61 = v138;
              unsigned int v63 = v141;
              do
              {
                --v63;
                if (v62) {
                  v58 |= (unint64_t)(v46 & ~(-1 << v141) & v60) << v57++;
                }
                else {
                  unsigned int v63 = 0;
                }
                --v61;
                if (v59) {
                  v58 |= (unint64_t)(v48 & v60) << v57++;
                }
                else {
                  unsigned int v61 = 0;
                }
                v60 *= 2;
                --v57;
                BOOL v59 = v61 != 0;
                BOOL v62 = v63 != 0;
              }
              while (v61 | v63);
            }
            else
            {
              uint64_t v58 = 0;
            }
            uint64_t v71 = *(void *)(result + 320) * ((v46 >> v141) + (v28 >> v138) * v131) + (v58 << 12);
          }
          else
          {
            if (v139)
            {
              int v64 = 0;
              uint64_t v65 = 0;
              int v66 = 1;
              BOOL v67 = v135;
              BOOL v68 = v136;
              __int32 v70 = v137.i32[0];
              __int32 v69 = v137.i32[1];
              do
              {
                --v69;
                if (v68) {
                  v65 |= (unint64_t)(v66 & v46) << v64++;
                }
                else {
                  __int32 v69 = 0;
                }
                --v70;
                if (v67) {
                  v65 |= (unint64_t)(v66 & v28) << v64++;
                }
                else {
                  __int32 v70 = 0;
                }
                v66 *= 2;
                --v64;
                BOOL v67 = v70 != 0;
                BOOL v68 = v69 != 0;
              }
              while (v70 | v69);
            }
            else
            {
              uint64_t v65 = 0;
            }
            uint64_t v71 = v65 << 12;
          }
          unsigned int v72 = *(_DWORD *)(result + 128) >> (*(unsigned char *)(result + 144) + a12);
          if (v72 <= 1) {
            unsigned int v72 = 1;
          }
          unsigned int v73 = v72 + 7;
          if (v73 < 0x10) {
            unsigned int v74 = 0;
          }
          else {
            unsigned int v74 = 32 - __clz(~(-1 << -(char)__clz((v73 >> 3) - 1)));
          }
          unsigned int v75 = *(_DWORD *)(result + 132) >> (*(unsigned char *)(result + 144) + a12);
          if (v75 <= 1) {
            unsigned int v75 = 1;
          }
          unsigned int v76 = v75 + 7;
          if (v76 < 0x10) {
            unsigned int v77 = 0;
          }
          else {
            unsigned int v77 = 32 - __clz(~(-1 << -(char)__clz((v76 >> 3) - 1)));
          }
          if (v77 | v74)
          {
            int v78 = 0;
            uint64_t v79 = 0;
            BOOL v80 = v74 != 0;
            BOOL v81 = v77 != 0;
            int v82 = 1;
            do
            {
              --v74;
              if (v80) {
                v79 |= (unint64_t)(v82 & v46) << v78++;
              }
              else {
                unsigned int v74 = 0;
              }
              --v77;
              if (v81) {
                v79 |= (unint64_t)(v82 & v28) << v78++;
              }
              else {
                unsigned int v77 = 0;
              }
              v82 *= 2;
              --v78;
              BOOL v81 = v77 != 0;
              BOOL v80 = v74 != 0;
            }
            while (v77 | v74);
          }
          else
          {
            uint64_t v79 = 0;
          }
          int v83 = v53 < 8 || v54;
          uint64_t v84 = (char *)(v146 + 8 * v79);
          uint64_t v85 = v147 + ((unint64_t)(v51 - v16) << 6);
          long long v86 = (void *)(v145 + v71);
          if (v47 < 8) {
            int v87 = 1;
          }
          else {
            int v87 = v83;
          }
          if (v154)
          {
            if (!v87)
            {
              long long v91 = __dst;
LABEL_123:
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock(v85, a11, v91, v84, v53, v47);
              goto LABEL_124;
            }
            long long v88 = v86;
            long long v89 = v86;
            char v90 = v53;
            memcpy(__dst, v88, sizeof(__dst));
            unsigned int v49 = 8 * v46;
            long long v91 = __dst;
            LOBYTE(v53) = v90;
            long long v86 = v89;
            int v48 = v28 & v127;
            LOBYTE(v47) = v151;
            uint64_t result = v150;
          }
          else
          {
            long long v91 = v86;
            if (!v87) {
              goto LABEL_123;
            }
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE20ELj4ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = result;
          long long v156 = v91;
          unsigned __int8 v164 = v53;
          unsigned __int8 v165 = v47;
          unsigned int v160 = v140;
          unsigned int v161 = v51 - v49;
          char v157 = v84;
          uint64_t v158 = v85;
          uint64_t v159 = a11;
          unsigned int v162 = v148;
          unsigned int v163 = v52;
          if (!v54)
          {
            unint64_t v93 = (unint64_t)v91
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)v167, 512, (unint64_t)v91, *v84);
            unint64_t v94 = v93
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v169, 512, v93, v84[1]);
            unint64_t v95 = v94
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v168, 512, v94, v84[2]);
            unint64_t v96 = v95
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v170, 512, v95, v84[3]);
            unint64_t v97 = v96
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v171, 512, v96, v84[4]);
            unint64_t v98 = v97
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v173, 512, v97, v84[5]);
            uint64_t v99 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v172, 512, v98, v84[6]);
            AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)v174, 512, v98 + v99, v84[7]);
            uint64_t v100 = v162;
            unsigned int v16 = v142;
            unsigned int v92 = v46 + 1;
            if (!v162 || !v163)
            {
LABEL_151:
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((uint64_t)v167, 512, v156, v157, v164, v165);
              if (!v154) {
                goto LABEL_47;
              }
              goto LABEL_152;
            }
            uint64_t v101 = 0;
            unint64_t v102 = (unint64_t)v160 << 9;
            unint64_t v103 = (unint64_t)v161 << 6;
            uint64_t v104 = &v167[v102 + v103];
            uint64_t v105 = v158;
            uint64_t v106 = v159;
            unint64_t v107 = (unint64_t)v163 << 6;
            if (v107 <= 1) {
              unint64_t v108 = 1;
            }
            else {
              unint64_t v108 = (unint64_t)v163 << 6;
            }
            unint64_t v109 = v102 + v103;
            uint64_t v110 = &v167[v102 + v103];
            if (v108) {
              BOOL v111 = (v108 - 1) >> 32 == 0;
            }
            else {
              BOOL v111 = 0;
            }
            char v112 = !v111;
            uint64_t v113 = v108 & 0x3FFFFFFFC0;
            unint64_t v114 = &v167[v109 + 16];
            unint64_t v115 = (long long *)(v158 + 16);
            while (2)
            {
              long long v116 = (char *)(v105 + v106 * v101);
              BOOL v117 = &v104[512 * v101];
              if ((unint64_t)(&v110[512 * v101] - v116) < 0x20) {
                char v118 = 1;
              }
              else {
                char v118 = v112;
              }
              if (v118)
              {
                int v119 = 0;
LABEL_148:
                unsigned int v124 = v119 + 1;
                do
                {
                  char v125 = *v116++;
                  *v117++ = v125;
                }
                while (v107 > v124++);
              }
              else
              {
                uint64_t v120 = v115;
                unsigned int v121 = v114;
                uint64_t v122 = v108 & 0x3FFFFFFFC0;
                do
                {
                  long long v123 = *v120;
                  *(v121 - 1) = *(v120 - 1);
                  *unsigned int v121 = v123;
                  v121 += 2;
                  v120 += 2;
                  v122 -= 32;
                }
                while (v122);
                if (v108 != v113)
                {
                  v116 += v113;
                  v117 += v113;
                  int v119 = v108 & 0xFFFFFFC0;
                  goto LABEL_148;
                }
              }
              ++v101;
              v114 += 512;
              unint64_t v115 = (long long *)((char *)v115 + v106);
              if (v101 == v100) {
                goto LABEL_151;
              }
              continue;
            }
          }
          dispatch_sync(*(dispatch_queue_t *)(*(void *)(result + 8) + 7384), block);
LABEL_124:
          unsigned int v16 = v142;
          unsigned int v92 = v46 + 1;
          if (!v154) {
            goto LABEL_47;
          }
LABEL_152:
          memcpy(v86, v91, 0x1000uLL);
LABEL_47:
          BOOL v29 = v46 == v143 >> 3;
          unsigned int v46 = v92;
          uint64_t result = v150;
          unsigned int v47 = v151;
        }
        while (!v29);
        BOOL v29 = v28++ == v133;
      }
      while (!v29);
    }
  }
  return result;
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10, uint64_t a11, int a12)
{
  uint64_t v12 = MEMORY[0x270FA5388](a1);
  unsigned int v14 = v13;
  unsigned int v16 = v15;
  unsigned int v18 = v17;
  unsigned int v20 = v19;
  uint64_t v147 = v21;
  uint64_t v148 = v22;
  uint64_t v137 = v23;
  uint64_t v24 = v12;
  v177[96] = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(v12, 0);
  uint64_t v25 = v24;
  unsigned int v152 = v14;
  unsigned int v26 = v14 >> 3;
  unsigned int v136 = v14 + a10 - 1;
  unsigned int v138 = v136 >> 3;
  unsigned int v27 = *(unsigned __int8 *)(*(void *)(v24 + 208) + 88);
  unsigned int v28 = *(_DWORD *)(v24 + 112);
  uint64_t v153 = v25;
  if (*(void *)(v25 + 168))
  {
    __int16 CacheMode = IOSurfaceGetCacheMode();
    uint64_t v25 = v153;
    int v30 = CacheMode & 0xF00;
  }
  else
  {
    int v30 = 0;
  }
  BOOL v31 = (v30 & 0xD00) == 0 || v30 == 768;
  int v32 = v30 & 0xE00;
  int v34 = !v31 && v32 != 1024;
  int v157 = v34;
  BOOL isLevelTiled = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::isLevelTiled(v25, *(_DWORD *)(v25 + 144) + a12);
  uint64_t v36 = v153;
  BOOL v146 = isLevelTiled;
  if (v26 <= v138)
  {
    unsigned int v145 = v16 + a9 - 1;
    unsigned int v135 = v16 >> 3;
    if (v16 >> 3 <= v145 >> 3)
    {
      unsigned int v132 = v20 - 1;
      unsigned int v134 = (v18 - 1) >> 3;
      int v155 = ((v20 - 1) & 7) + 1;
      unsigned int v156 = (v20 - 1) >> 3;
      int v133 = ((v18 - 1) & 7) + 1;
      uint32x2_t v37 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(v20, v18), (int32x2_t)0x700000007);
      int8x8_t v38 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v37, 3uLL))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x1000000010, v37));
      __int32 v143 = v38.i32[0] | v38.i32[1];
      int8x8_t v142 = v38;
      BOOL v140 = v38.i32[0] != 0;
      BOOL v141 = v38.i32[1] != 0;
      unint64_t v131 = 8 * v28 * (unint64_t)v27;
      unsigned int v144 = v16;
      do
      {
        unsigned int v39 = (8 * v26) | 7;
        if (8 * v26 <= v152) {
          int v40 = v152;
        }
        else {
          int v40 = 8 * v26;
        }
        unsigned int v41 = v135;
        if (v136 < v39) {
          unsigned int v39 = v136;
        }
        int v139 = v40 - 8 * v26;
        int v150 = v39 - v40 + 1;
        unsigned int v151 = 8 * v26;
        if (v26 == v134) {
          unsigned int v42 = v133;
        }
        else {
          unsigned int v42 = 8;
        }
        uint64_t v149 = v137 + (v40 - v152) * a11;
        unsigned int v154 = v42;
        do
        {
          unsigned int v43 = 8 * v41;
          unsigned int v44 = 8 * (v41 + 1) - 1;
          if (8 * v41 <= v16) {
            int v45 = v16;
          }
          else {
            int v45 = 8 * v41;
          }
          if (v145 < v44) {
            unsigned int v44 = v145;
          }
          int v46 = v44 - v45 + 1;
          if (v41 == v156) {
            unsigned int v47 = v155;
          }
          else {
            unsigned int v47 = 8;
          }
          BOOL v48 = 1;
          if (v151 >= v152 && v43 >= v16)
          {
            int v49 = v155;
            if (v41 != v156) {
              int v49 = 8;
            }
            BOOL v48 = v46 != v49 || v150 != v42;
          }
          if (v146)
          {
            unsigned int v70 = 0;
            uint64_t v71 = v131 >> (*(unsigned char *)(v36 + 57) != 0);
            char v72 = 1;
            if (v71 > 127)
            {
              if (v71 > 511)
              {
                if (v71 == 512)
                {
                  char v72 = 0;
                  char v73 = 0;
                  unsigned int v70 = 16;
                  unsigned int v74 = 16;
                }
                else
                {
                  char v73 = 1;
                  unsigned int v74 = 0;
                  if (v71 == 1024)
                  {
                    char v72 = 0;
                    unsigned int v74 = 8;
                    unsigned int v70 = 16;
                  }
                }
              }
              else if (v71 == 128)
              {
                char v72 = 0;
                char v73 = 0;
                unsigned int v70 = 32;
                unsigned int v74 = 32;
              }
              else
              {
                char v73 = 1;
                unsigned int v74 = 0;
                if (v71 == 256)
                {
                  char v72 = 0;
                  char v73 = 0;
                  unsigned int v74 = 16;
                  unsigned int v70 = 32;
                }
              }
            }
            else
            {
              char v73 = 1;
              unsigned int v74 = 0;
              switch(v71)
              {
                case 4:
                  char v72 = 0;
                  char v73 = 0;
                  unsigned int v74 = 128;
                  unsigned int v70 = 256;
                  break;
                case 5:
                case 6:
                case 7:
                case 9:
                case 10:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 17:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                  break;
                case 8:
                  char v72 = 0;
                  char v73 = 0;
                  unsigned int v70 = 128;
                  unsigned int v74 = 128;
                  break;
                case 16:
                  char v72 = 0;
                  char v73 = 0;
                  unsigned int v74 = 64;
                  unsigned int v70 = 128;
                  break;
                case 32:
                  char v72 = 0;
                  char v73 = 0;
                  unsigned int v70 = 64;
                  unsigned int v74 = 64;
                  break;
                default:
                  if (v71 == 64)
                  {
                    char v72 = 0;
                    char v73 = 0;
                    unsigned int v74 = 32;
                    unsigned int v70 = 64;
                  }
                  break;
              }
            }
            unsigned int v120 = (v70 >> 3) - 1;
            if (v72) {
              unsigned int v121 = 0;
            }
            else {
              unsigned int v121 = 32 - __clz(~(-1 << -(char)__clz(v120)));
            }
            unsigned int v122 = (v74 >> 3) - 1;
            if (v73)
            {
              unsigned int v123 = 0;
              if (v121) {
                goto LABEL_143;
              }
            }
            else
            {
              unsigned int v123 = 32 - __clz(~(-1 << -(char)__clz(v122)));
              if (v123 | v121)
              {
LABEL_143:
                int v124 = 0;
                uint64_t v125 = 0;
                int v126 = v41 & v120;
                int v127 = v26 & v122;
                BOOL v128 = v121 != 0;
                BOOL v129 = v123 != 0;
                int v130 = 1;
                do
                {
                  --v121;
                  if (v128) {
                    v125 |= (unint64_t)(v130 & v126) << v124++;
                  }
                  else {
                    unsigned int v121 = 0;
                  }
                  --v123;
                  if (v129) {
                    v125 |= (unint64_t)(v130 & v127) << v124++;
                  }
                  else {
                    unsigned int v123 = 0;
                  }
                  v130 *= 2;
                  --v124;
                  BOOL v129 = v123 != 0;
                  BOOL v128 = v121 != 0;
                }
                while (v123 | v121);
                goto LABEL_155;
              }
            }
            uint64_t v125 = 0;
LABEL_155:
            unint64_t v58 = ((unint64_t)(v43 / v70 + v151 / v74 * ((v70 + v132) / v70)) << 14) + (v125 << 12);
            goto LABEL_59;
          }
          if (v143)
          {
            int v51 = 0;
            uint64_t v52 = 0;
            int v53 = 1;
            BOOL v54 = v140;
            BOOL v55 = v141;
            __int32 v57 = v142.i32[0];
            __int32 v56 = v142.i32[1];
            do
            {
              --v56;
              if (v55) {
                v52 |= (unint64_t)(v53 & v41) << v51++;
              }
              else {
                __int32 v56 = 0;
              }
              --v57;
              if (v54) {
                v52 |= (unint64_t)(v53 & v26) << v51++;
              }
              else {
                __int32 v57 = 0;
              }
              v53 *= 2;
              --v51;
              BOOL v54 = v57 != 0;
              BOOL v55 = v56 != 0;
            }
            while (v57 | v56);
          }
          else
          {
            uint64_t v52 = 0;
          }
          unint64_t v58 = v52 << 12;
LABEL_59:
          unsigned int v59 = *(_DWORD *)(v36 + 128) >> (*(unsigned char *)(v36 + 144) + a12);
          if (v59 <= 1) {
            unsigned int v59 = 1;
          }
          unsigned int v60 = v59 + 7;
          if (v60 < 0x10) {
            unsigned int v61 = 0;
          }
          else {
            unsigned int v61 = 32 - __clz(~(-1 << -(char)__clz((v60 >> 3) - 1)));
          }
          unsigned int v62 = *(_DWORD *)(v36 + 132) >> (*(unsigned char *)(v36 + 144) + a12);
          if (v62 <= 1) {
            unsigned int v62 = 1;
          }
          unsigned int v63 = v62 + 7;
          if (v63 < 0x10)
          {
            unsigned int v64 = 0;
            if (!v61)
            {
LABEL_81:
              uint64_t v66 = 0;
              goto LABEL_82;
            }
          }
          else
          {
            unsigned int v64 = 32 - __clz(~(-1 << -(char)__clz((v63 >> 3) - 1)));
            if (!(v64 | v61)) {
              goto LABEL_81;
            }
          }
          int v65 = 0;
          uint64_t v66 = 0;
          BOOL v67 = v61 != 0;
          BOOL v68 = v64 != 0;
          int v69 = 1;
          do
          {
            --v61;
            if (v67) {
              v66 |= (unint64_t)(v69 & v41) << v65++;
            }
            else {
              unsigned int v61 = 0;
            }
            --v64;
            if (v68) {
              v66 |= (unint64_t)(v69 & v26) << v65++;
            }
            else {
              unsigned int v64 = 0;
            }
            v69 *= 2;
            --v65;
            BOOL v68 = v64 != 0;
            BOOL v67 = v61 != 0;
          }
          while (v64 | v61);
LABEL_82:
          int v75 = v47 < 8 || v48;
          unsigned int v76 = (unsigned __int8 *)(v148 + 8 * v66);
          uint64_t v77 = v149 + ((unint64_t)(v45 - v16) << 6);
          int v78 = (void *)(v147 + v58);
          if (v42 < 8) {
            int v79 = 1;
          }
          else {
            int v79 = v75;
          }
          if (v157)
          {
            if (!v79)
            {
              uint64_t v85 = __dst;
LABEL_95:
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock(v77, a11, (unint64_t)v85, v76, v47, v42);
              goto LABEL_96;
            }
            BOOL v80 = v78;
            char v81 = v47;
            int v82 = v78;
            int v83 = v46;
            BOOL v84 = v48;
            memcpy(__dst, v80, sizeof(__dst));
            BOOL v48 = v84;
            unsigned int v43 = 8 * v41;
            uint64_t v85 = __dst;
            int v46 = v83;
            int v78 = v82;
            LOBYTE(v47) = v81;
            LOBYTE(v42) = v154;
            uint64_t v36 = v153;
          }
          else
          {
            uint64_t v85 = v78;
            if (!v79) {
              goto LABEL_95;
            }
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE20ELj4ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = v36;
          uint64_t v159 = v85;
          unsigned __int8 v167 = v47;
          unsigned __int8 v168 = v42;
          unsigned int v163 = v139;
          unsigned int v164 = v45 - v43;
          unsigned int v160 = v76;
          uint64_t v161 = v77;
          uint64_t v162 = a11;
          unsigned int v165 = v150;
          unsigned int v166 = v46;
          if (!v48)
          {
            unint64_t v86 = (unint64_t)&v85[AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)v170, 512, (unint64_t)v85, *v76)];
            unint64_t v87 = v86
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v172, 512, v86, v76[1]);
            unint64_t v88 = v87
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v171, 512, v87, v76[2]);
            unint64_t v89 = v88
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v173, 512, v88, v76[3]);
            unint64_t v90 = v89
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v174, 512, v89, v76[4]);
            unint64_t v91 = v90
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v176, 512, v90, v76[5]);
            uint64_t v92 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v175, 512, v91, v76[6]);
            AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)v177, 512, v91 + v92, v76[7]);
            uint64_t v93 = v165;
            unsigned int v16 = v144;
            if (!v165 || !v166)
            {
LABEL_123:
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((uint64_t)v170, 512, (unint64_t)v159, v160, v167, v168);
              if (!v157) {
                goto LABEL_27;
              }
              goto LABEL_124;
            }
            uint64_t v94 = 0;
            unint64_t v95 = (unint64_t)v163 << 9;
            unint64_t v96 = (unint64_t)v164 << 6;
            unint64_t v97 = &v170[v95 + v96];
            uint64_t v98 = v161;
            uint64_t v99 = v162;
            unint64_t v100 = (unint64_t)v166 << 6;
            if (v100 <= 1) {
              unint64_t v101 = 1;
            }
            else {
              unint64_t v101 = (unint64_t)v166 << 6;
            }
            unint64_t v102 = v95 + v96;
            unint64_t v103 = &v170[v95 + v96];
            if (v101) {
              BOOL v104 = (v101 - 1) >> 32 == 0;
            }
            else {
              BOOL v104 = 0;
            }
            char v105 = !v104;
            uint64_t v106 = v101 & 0x3FFFFFFFC0;
            unint64_t v107 = &v170[v102 + 16];
            unint64_t v108 = (long long *)(v161 + 16);
            while (2)
            {
              unint64_t v109 = (char *)(v98 + v99 * v94);
              uint64_t v110 = &v97[512 * v94];
              if ((unint64_t)(&v103[512 * v94] - v109) < 0x20) {
                char v111 = 1;
              }
              else {
                char v111 = v105;
              }
              if (v111)
              {
                int v112 = 0;
LABEL_120:
                unsigned int v117 = v112 + 1;
                do
                {
                  char v118 = *v109++;
                  *v110++ = v118;
                }
                while (v100 > v117++);
              }
              else
              {
                uint64_t v113 = v108;
                unint64_t v114 = v107;
                uint64_t v115 = v101 & 0x3FFFFFFFC0;
                do
                {
                  long long v116 = *v113;
                  *(v114 - 1) = *(v113 - 1);
                  *unint64_t v114 = v116;
                  v114 += 2;
                  v113 += 2;
                  v115 -= 32;
                }
                while (v115);
                if (v101 != v106)
                {
                  v109 += v106;
                  v110 += v106;
                  int v112 = v101 & 0xFFFFFFC0;
                  goto LABEL_120;
                }
              }
              ++v94;
              v107 += 512;
              unint64_t v108 = (long long *)((char *)v108 + v99);
              if (v94 == v93) {
                goto LABEL_123;
              }
              continue;
            }
          }
          dispatch_sync(*(dispatch_queue_t *)(*(void *)(v36 + 8) + 7384), block);
LABEL_96:
          unsigned int v16 = v144;
          if (!v157) {
            goto LABEL_27;
          }
LABEL_124:
          memcpy(v78, v85, 0x1000uLL);
LABEL_27:
          BOOL v31 = v41++ == v145 >> 3;
          uint64_t v36 = v153;
          unsigned int v42 = v154;
        }
        while (!v31);
        BOOL v31 = v26++ == v138;
      }
      while (!v31);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10, uint64_t a11, int a12)
{
  uint64_t v12 = MEMORY[0x270FA5388](a1);
  unsigned int v14 = v13;
  unsigned int v16 = v15;
  unsigned int v18 = v17;
  unsigned int v20 = v19;
  uint64_t v147 = v21;
  uint64_t v148 = v22;
  uint64_t v137 = v23;
  uint64_t v24 = v12;
  v177[96] = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(v12, 0);
  uint64_t v25 = v24;
  unsigned int v152 = v14;
  unsigned int v26 = v14 >> 3;
  unsigned int v136 = v14 + a10 - 1;
  unsigned int v138 = v136 >> 3;
  unsigned int v27 = *(unsigned __int8 *)(*(void *)(v24 + 208) + 88);
  unsigned int v28 = *(_DWORD *)(v24 + 112);
  uint64_t v153 = v25;
  if (*(void *)(v25 + 168))
  {
    __int16 CacheMode = IOSurfaceGetCacheMode();
    uint64_t v25 = v153;
    int v30 = CacheMode & 0xF00;
  }
  else
  {
    int v30 = 0;
  }
  BOOL v31 = (v30 & 0xD00) == 0 || v30 == 768;
  int v32 = v30 & 0xE00;
  int v34 = !v31 && v32 != 1024;
  int v157 = v34;
  BOOL isLevelTiled = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::isLevelTiled(v25, *(_DWORD *)(v25 + 144) + a12);
  uint64_t v36 = v153;
  BOOL v146 = isLevelTiled;
  if (v26 <= v138)
  {
    unsigned int v145 = v16 + a9 - 1;
    unsigned int v135 = v16 >> 3;
    if (v16 >> 3 <= v145 >> 3)
    {
      unsigned int v132 = v20 - 1;
      unsigned int v134 = (v18 - 1) >> 3;
      int v155 = ((v20 - 1) & 7) + 1;
      unsigned int v156 = (v20 - 1) >> 3;
      int v133 = ((v18 - 1) & 7) + 1;
      uint32x2_t v37 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(v20, v18), (int32x2_t)0x700000007);
      int8x8_t v38 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v37, 3uLL))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x1000000010, v37));
      __int32 v143 = v38.i32[0] | v38.i32[1];
      int8x8_t v142 = v38;
      BOOL v140 = v38.i32[0] != 0;
      BOOL v141 = v38.i32[1] != 0;
      unint64_t v131 = 8 * v28 * (unint64_t)v27;
      unsigned int v144 = v16;
      do
      {
        unsigned int v39 = (8 * v26) | 7;
        if (8 * v26 <= v152) {
          int v40 = v152;
        }
        else {
          int v40 = 8 * v26;
        }
        unsigned int v41 = v135;
        if (v136 < v39) {
          unsigned int v39 = v136;
        }
        int v139 = v40 - 8 * v26;
        int v150 = v39 - v40 + 1;
        unsigned int v151 = 8 * v26;
        if (v26 == v134) {
          unsigned int v42 = v133;
        }
        else {
          unsigned int v42 = 8;
        }
        uint64_t v149 = v137 + (v40 - v152) * a11;
        unsigned int v154 = v42;
        do
        {
          unsigned int v43 = 8 * v41;
          unsigned int v44 = 8 * (v41 + 1) - 1;
          if (8 * v41 <= v16) {
            int v45 = v16;
          }
          else {
            int v45 = 8 * v41;
          }
          if (v145 < v44) {
            unsigned int v44 = v145;
          }
          int v46 = v44 - v45 + 1;
          if (v41 == v156) {
            unsigned int v47 = v155;
          }
          else {
            unsigned int v47 = 8;
          }
          BOOL v48 = 1;
          if (v151 >= v152 && v43 >= v16)
          {
            int v49 = v155;
            if (v41 != v156) {
              int v49 = 8;
            }
            BOOL v48 = v46 != v49 || v150 != v42;
          }
          if (v146)
          {
            unsigned int v70 = 0;
            uint64_t v71 = v131 >> (*(unsigned char *)(v36 + 57) != 0);
            char v72 = 1;
            if (v71 > 127)
            {
              if (v71 > 511)
              {
                if (v71 == 512)
                {
                  char v72 = 0;
                  char v73 = 0;
                  unsigned int v70 = 16;
                  unsigned int v74 = 16;
                }
                else
                {
                  char v73 = 1;
                  unsigned int v74 = 0;
                  if (v71 == 1024)
                  {
                    char v72 = 0;
                    unsigned int v74 = 8;
                    unsigned int v70 = 16;
                  }
                }
              }
              else if (v71 == 128)
              {
                char v72 = 0;
                char v73 = 0;
                unsigned int v70 = 32;
                unsigned int v74 = 32;
              }
              else
              {
                char v73 = 1;
                unsigned int v74 = 0;
                if (v71 == 256)
                {
                  char v72 = 0;
                  char v73 = 0;
                  unsigned int v74 = 16;
                  unsigned int v70 = 32;
                }
              }
            }
            else
            {
              char v73 = 1;
              unsigned int v74 = 0;
              switch(v71)
              {
                case 4:
                  char v72 = 0;
                  char v73 = 0;
                  unsigned int v74 = 128;
                  unsigned int v70 = 256;
                  break;
                case 5:
                case 6:
                case 7:
                case 9:
                case 10:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 17:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                  break;
                case 8:
                  char v72 = 0;
                  char v73 = 0;
                  unsigned int v70 = 128;
                  unsigned int v74 = 128;
                  break;
                case 16:
                  char v72 = 0;
                  char v73 = 0;
                  unsigned int v74 = 64;
                  unsigned int v70 = 128;
                  break;
                case 32:
                  char v72 = 0;
                  char v73 = 0;
                  unsigned int v70 = 64;
                  unsigned int v74 = 64;
                  break;
                default:
                  if (v71 == 64)
                  {
                    char v72 = 0;
                    char v73 = 0;
                    unsigned int v74 = 32;
                    unsigned int v70 = 64;
                  }
                  break;
              }
            }
            unsigned int v120 = (v70 >> 3) - 1;
            if (v72) {
              unsigned int v121 = 0;
            }
            else {
              unsigned int v121 = 32 - __clz(~(-1 << -(char)__clz(v120)));
            }
            unsigned int v122 = (v74 >> 3) - 1;
            if (v73)
            {
              unsigned int v123 = 0;
              if (v121) {
                goto LABEL_143;
              }
            }
            else
            {
              unsigned int v123 = 32 - __clz(~(-1 << -(char)__clz(v122)));
              if (v123 | v121)
              {
LABEL_143:
                int v124 = 0;
                uint64_t v125 = 0;
                int v126 = v41 & v120;
                int v127 = v26 & v122;
                BOOL v128 = v121 != 0;
                BOOL v129 = v123 != 0;
                int v130 = 1;
                do
                {
                  --v121;
                  if (v128) {
                    v125 |= (unint64_t)(v130 & v126) << v124++;
                  }
                  else {
                    unsigned int v121 = 0;
                  }
                  --v123;
                  if (v129) {
                    v125 |= (unint64_t)(v130 & v127) << v124++;
                  }
                  else {
                    unsigned int v123 = 0;
                  }
                  v130 *= 2;
                  --v124;
                  BOOL v129 = v123 != 0;
                  BOOL v128 = v121 != 0;
                }
                while (v123 | v121);
                goto LABEL_155;
              }
            }
            uint64_t v125 = 0;
LABEL_155:
            unint64_t v58 = ((unint64_t)(v43 / v70 + v151 / v74 * ((v70 + v132) / v70)) << 14) + (v125 << 12);
            goto LABEL_59;
          }
          if (v143)
          {
            int v51 = 0;
            uint64_t v52 = 0;
            int v53 = 1;
            BOOL v54 = v140;
            BOOL v55 = v141;
            __int32 v57 = v142.i32[0];
            __int32 v56 = v142.i32[1];
            do
            {
              --v56;
              if (v55) {
                v52 |= (unint64_t)(v53 & v41) << v51++;
              }
              else {
                __int32 v56 = 0;
              }
              --v57;
              if (v54) {
                v52 |= (unint64_t)(v53 & v26) << v51++;
              }
              else {
                __int32 v57 = 0;
              }
              v53 *= 2;
              --v51;
              BOOL v54 = v57 != 0;
              BOOL v55 = v56 != 0;
            }
            while (v57 | v56);
          }
          else
          {
            uint64_t v52 = 0;
          }
          unint64_t v58 = v52 << 12;
LABEL_59:
          unsigned int v59 = *(_DWORD *)(v36 + 128) >> (*(unsigned char *)(v36 + 144) + a12);
          if (v59 <= 1) {
            unsigned int v59 = 1;
          }
          unsigned int v60 = v59 + 7;
          if (v60 < 0x10) {
            unsigned int v61 = 0;
          }
          else {
            unsigned int v61 = 32 - __clz(~(-1 << -(char)__clz((v60 >> 3) - 1)));
          }
          unsigned int v62 = *(_DWORD *)(v36 + 132) >> (*(unsigned char *)(v36 + 144) + a12);
          if (v62 <= 1) {
            unsigned int v62 = 1;
          }
          unsigned int v63 = v62 + 7;
          if (v63 < 0x10)
          {
            unsigned int v64 = 0;
            if (!v61)
            {
LABEL_81:
              uint64_t v66 = 0;
              goto LABEL_82;
            }
          }
          else
          {
            unsigned int v64 = 32 - __clz(~(-1 << -(char)__clz((v63 >> 3) - 1)));
            if (!(v64 | v61)) {
              goto LABEL_81;
            }
          }
          int v65 = 0;
          uint64_t v66 = 0;
          BOOL v67 = v61 != 0;
          BOOL v68 = v64 != 0;
          int v69 = 1;
          do
          {
            --v61;
            if (v67) {
              v66 |= (unint64_t)(v69 & v41) << v65++;
            }
            else {
              unsigned int v61 = 0;
            }
            --v64;
            if (v68) {
              v66 |= (unint64_t)(v69 & v26) << v65++;
            }
            else {
              unsigned int v64 = 0;
            }
            v69 *= 2;
            --v65;
            BOOL v68 = v64 != 0;
            BOOL v67 = v61 != 0;
          }
          while (v64 | v61);
LABEL_82:
          int v75 = v47 < 8 || v48;
          unsigned int v76 = (char *)(v148 + 8 * v66);
          uint64_t v77 = v149 + ((unint64_t)(v45 - v16) << 6);
          int v78 = (void *)(v147 + v58);
          if (v42 < 8) {
            int v79 = 1;
          }
          else {
            int v79 = v75;
          }
          if (v157)
          {
            if (!v79)
            {
              uint64_t v85 = __dst;
LABEL_95:
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock(v77, a11, v85, v76, v47, v42);
              goto LABEL_96;
            }
            BOOL v80 = v78;
            char v81 = v47;
            int v82 = v78;
            int v83 = v46;
            BOOL v84 = v48;
            memcpy(__dst, v80, sizeof(__dst));
            BOOL v48 = v84;
            unsigned int v43 = 8 * v41;
            uint64_t v85 = __dst;
            int v46 = v83;
            int v78 = v82;
            LOBYTE(v47) = v81;
            LOBYTE(v42) = v154;
            uint64_t v36 = v153;
          }
          else
          {
            uint64_t v85 = v78;
            if (!v79) {
              goto LABEL_95;
            }
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE20ELj4ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = v36;
          uint64_t v159 = v85;
          unsigned __int8 v167 = v47;
          unsigned __int8 v168 = v42;
          unsigned int v163 = v139;
          unsigned int v164 = v45 - v43;
          unsigned int v160 = v76;
          uint64_t v161 = v77;
          uint64_t v162 = a11;
          unsigned int v165 = v150;
          unsigned int v166 = v46;
          if (!v48)
          {
            unint64_t v86 = (unint64_t)v85
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)v170, 512, (unint64_t)v85, *v76);
            unint64_t v87 = v86
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v172, 512, v86, v76[1]);
            unint64_t v88 = v87
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v171, 512, v87, v76[2]);
            unint64_t v89 = v88
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v173, 512, v88, v76[3]);
            unint64_t v90 = v89
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v174, 512, v89, v76[4]);
            unint64_t v91 = v90
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v176, 512, v90, v76[5]);
            uint64_t v92 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v175, 512, v91, v76[6]);
            AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)v177, 512, v91 + v92, v76[7]);
            uint64_t v93 = v165;
            unsigned int v16 = v144;
            if (!v165 || !v166)
            {
LABEL_123:
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((uint64_t)v170, 512, v159, v160, v167, v168);
              if (!v157) {
                goto LABEL_27;
              }
              goto LABEL_124;
            }
            uint64_t v94 = 0;
            unint64_t v95 = (unint64_t)v163 << 9;
            unint64_t v96 = (unint64_t)v164 << 6;
            unint64_t v97 = &v170[v95 + v96];
            uint64_t v98 = v161;
            uint64_t v99 = v162;
            unint64_t v100 = (unint64_t)v166 << 6;
            if (v100 <= 1) {
              unint64_t v101 = 1;
            }
            else {
              unint64_t v101 = (unint64_t)v166 << 6;
            }
            unint64_t v102 = v95 + v96;
            unint64_t v103 = &v170[v95 + v96];
            if (v101) {
              BOOL v104 = (v101 - 1) >> 32 == 0;
            }
            else {
              BOOL v104 = 0;
            }
            char v105 = !v104;
            uint64_t v106 = v101 & 0x3FFFFFFFC0;
            unint64_t v107 = &v170[v102 + 16];
            unint64_t v108 = (long long *)(v161 + 16);
            while (2)
            {
              unint64_t v109 = (char *)(v98 + v99 * v94);
              uint64_t v110 = &v97[512 * v94];
              if ((unint64_t)(&v103[512 * v94] - v109) < 0x20) {
                char v111 = 1;
              }
              else {
                char v111 = v105;
              }
              if (v111)
              {
                int v112 = 0;
LABEL_120:
                unsigned int v117 = v112 + 1;
                do
                {
                  char v118 = *v109++;
                  *v110++ = v118;
                }
                while (v100 > v117++);
              }
              else
              {
                uint64_t v113 = v108;
                unint64_t v114 = v107;
                uint64_t v115 = v101 & 0x3FFFFFFFC0;
                do
                {
                  long long v116 = *v113;
                  *(v114 - 1) = *(v113 - 1);
                  *unint64_t v114 = v116;
                  v114 += 2;
                  v113 += 2;
                  v115 -= 32;
                }
                while (v115);
                if (v101 != v106)
                {
                  v109 += v106;
                  v110 += v106;
                  int v112 = v101 & 0xFFFFFFC0;
                  goto LABEL_120;
                }
              }
              ++v94;
              v107 += 512;
              unint64_t v108 = (long long *)((char *)v108 + v99);
              if (v94 == v93) {
                goto LABEL_123;
              }
              continue;
            }
          }
          dispatch_sync(*(dispatch_queue_t *)(*(void *)(v36 + 8) + 7384), block);
LABEL_96:
          unsigned int v16 = v144;
          if (!v157) {
            goto LABEL_27;
          }
LABEL_124:
          memcpy(v78, v85, 0x1000uLL);
LABEL_27:
          BOOL v31 = v41++ == v145 >> 3;
          uint64_t v36 = v153;
          unsigned int v42 = v154;
        }
        while (!v31);
        BOOL v31 = v26++ == v138;
      }
      while (!v31);
    }
  }
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE20ELj4ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v1 = MEMORY[0x270FA5388](a1);
  uint64_t v30 = *MEMORY[0x263EF8340];
  AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressMacroblock((uint64_t)v29, *(void *)(v1 + 40), *(unsigned __int8 **)(v1 + 48));
  uint64_t v2 = *(unsigned int *)(v1 + 80);
  if (!v2 || !*(_DWORD *)(v1 + 84)) {
    return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((uint64_t)v29, 512, *(_OWORD **)(v1 + 40), *(char **)(v1 + 48), *(unsigned __int8 *)(v1 + 88), *(unsigned __int8 *)(v1 + 89));
  }
  unint64_t v3 = (unint64_t)*(unsigned int *)(v1 + 72) << 9;
  unint64_t v4 = (unint64_t)*(unsigned int *)(v1 + 76) << 6;
  v5 = &v29[v3 + v4];
  uint64_t v6 = *(void *)(v1 + 56);
  uint64_t v7 = *(void *)(v1 + 64);
  unint64_t v8 = (unint64_t)*(unsigned int *)(v1 + 84) << 6;
  if (v8 <= 1) {
    unint64_t v9 = 1;
  }
  else {
    unint64_t v9 = (unint64_t)*(unsigned int *)(v1 + 84) << 6;
  }
  if (v9) {
    BOOL v10 = (v9 - 1) >> 32 == 0;
  }
  else {
    BOOL v10 = 0;
  }
  if (v10)
  {
    uint64_t v14 = 0;
    unsigned int v15 = &v29[v3 + v4];
    uint64_t v16 = v9 & 0x3FFFFFFFC0;
    unsigned int v17 = &v29[v3 + 16 + v4];
    unsigned int v18 = (long long *)(v6 + 16);
    while (1)
    {
      unsigned int v19 = (char *)(v6 + v7 * v14);
      unsigned int v20 = &v5[512 * v14];
      if ((unint64_t)(&v15[512 * v14] - v19) >= 0x20)
      {
        uint64_t v22 = v18;
        uint64_t v23 = v17;
        uint64_t v24 = v9 & 0x3FFFFFFFC0;
        do
        {
          long long v25 = *v22;
          *(v23 - 1) = *(v22 - 1);
          *uint64_t v23 = v25;
          v23 += 2;
          v22 += 2;
          v24 -= 32;
        }
        while (v24);
        if (v9 == v16) {
          goto LABEL_16;
        }
        v19 += v16;
        v20 += v16;
        int v21 = v9 & 0xFFFFFFC0;
      }
      else
      {
        int v21 = 0;
      }
      unsigned int v26 = v21 + 1;
      do
      {
        char v27 = *v19++;
        *v20++ = v27;
      }
      while (v8 > v26++);
LABEL_16:
      ++v14;
      v17 += 512;
      unsigned int v18 = (long long *)((char *)v18 + v7);
      if (v14 == v2) {
        return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((uint64_t)v29, 512, *(_OWORD **)(v1 + 40), *(char **)(v1 + 48), *(unsigned __int8 *)(v1 + 88), *(unsigned __int8 *)(v1 + 89));
      }
    }
  }
  for (uint64_t i = 0; i != v2; ++i)
  {
    uint64_t v12 = 0;
    do
    {
      v5[v12] = *(unsigned char *)(v6 + v12);
      ++v12;
    }
    while (v8 > v12);
    v5 += 512;
    v6 += v7;
  }
  return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((uint64_t)v29, 512, *(_OWORD **)(v1 + 40), *(char **)(v1 + 48), *(unsigned __int8 *)(v1 + 88), *(unsigned __int8 *)(v1 + 89));
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE20ELj4ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v1 = MEMORY[0x270FA5388](a1);
  uint64_t v30 = *MEMORY[0x263EF8340];
  AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressMacroblock((uint64_t)v29, *(void *)(v1 + 40), *(unsigned __int8 **)(v1 + 48));
  uint64_t v2 = *(unsigned int *)(v1 + 80);
  if (!v2 || !*(_DWORD *)(v1 + 84)) {
    return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((uint64_t)v29, 512, *(void *)(v1 + 40), *(unsigned char **)(v1 + 48), *(unsigned __int8 *)(v1 + 88), *(unsigned __int8 *)(v1 + 89));
  }
  unint64_t v3 = (unint64_t)*(unsigned int *)(v1 + 72) << 9;
  unint64_t v4 = (unint64_t)*(unsigned int *)(v1 + 76) << 6;
  v5 = &v29[v3 + v4];
  uint64_t v6 = *(void *)(v1 + 56);
  uint64_t v7 = *(void *)(v1 + 64);
  unint64_t v8 = (unint64_t)*(unsigned int *)(v1 + 84) << 6;
  if (v8 <= 1) {
    unint64_t v9 = 1;
  }
  else {
    unint64_t v9 = (unint64_t)*(unsigned int *)(v1 + 84) << 6;
  }
  if (v9) {
    BOOL v10 = (v9 - 1) >> 32 == 0;
  }
  else {
    BOOL v10 = 0;
  }
  if (v10)
  {
    uint64_t v14 = 0;
    unsigned int v15 = &v29[v3 + v4];
    uint64_t v16 = v9 & 0x3FFFFFFFC0;
    unsigned int v17 = &v29[v3 + 16 + v4];
    unsigned int v18 = (long long *)(v6 + 16);
    while (1)
    {
      unsigned int v19 = (char *)(v6 + v7 * v14);
      unsigned int v20 = &v5[512 * v14];
      if ((unint64_t)(&v15[512 * v14] - v19) >= 0x20)
      {
        uint64_t v22 = v18;
        uint64_t v23 = v17;
        uint64_t v24 = v9 & 0x3FFFFFFFC0;
        do
        {
          long long v25 = *v22;
          *(v23 - 1) = *(v22 - 1);
          *uint64_t v23 = v25;
          v23 += 2;
          v22 += 2;
          v24 -= 32;
        }
        while (v24);
        if (v9 == v16) {
          goto LABEL_16;
        }
        v19 += v16;
        v20 += v16;
        int v21 = v9 & 0xFFFFFFC0;
      }
      else
      {
        int v21 = 0;
      }
      unsigned int v26 = v21 + 1;
      do
      {
        char v27 = *v19++;
        *v20++ = v27;
      }
      while (v8 > v26++);
LABEL_16:
      ++v14;
      v17 += 512;
      unsigned int v18 = (long long *)((char *)v18 + v7);
      if (v14 == v2) {
        return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((uint64_t)v29, 512, *(void *)(v1 + 40), *(unsigned char **)(v1 + 48), *(unsigned __int8 *)(v1 + 88), *(unsigned __int8 *)(v1 + 89));
      }
    }
  }
  for (uint64_t i = 0; i != v2; ++i)
  {
    uint64_t v12 = 0;
    do
    {
      v5[v12] = *(unsigned char *)(v6 + v12);
      ++v12;
    }
    while (v8 > v12);
    v5 += 512;
    v6 += v7;
  }
  return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((uint64_t)v29, 512, *(void *)(v1 + 40), *(unsigned char **)(v1 + 48), *(unsigned __int8 *)(v1 + 88), *(unsigned __int8 *)(v1 + 89));
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE20ELj4ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v1 = MEMORY[0x270FA5388](a1);
  uint64_t v30 = *MEMORY[0x263EF8340];
  AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressMacroblock((uint64_t)v29, *(void *)(v1 + 40), *(unsigned __int8 **)(v1 + 48));
  uint64_t v2 = *(unsigned int *)(v1 + 80);
  if (!v2 || !*(_DWORD *)(v1 + 84)) {
    return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((uint64_t)v29, 512, *(_OWORD **)(v1 + 40), *(char **)(v1 + 48), *(unsigned __int8 *)(v1 + 88), *(unsigned __int8 *)(v1 + 89));
  }
  unint64_t v3 = (unint64_t)*(unsigned int *)(v1 + 72) << 9;
  unint64_t v4 = (unint64_t)*(unsigned int *)(v1 + 76) << 6;
  v5 = &v29[v3 + v4];
  uint64_t v6 = *(void *)(v1 + 56);
  uint64_t v7 = *(void *)(v1 + 64);
  unint64_t v8 = (unint64_t)*(unsigned int *)(v1 + 84) << 6;
  if (v8 <= 1) {
    unint64_t v9 = 1;
  }
  else {
    unint64_t v9 = (unint64_t)*(unsigned int *)(v1 + 84) << 6;
  }
  if (v9) {
    BOOL v10 = (v9 - 1) >> 32 == 0;
  }
  else {
    BOOL v10 = 0;
  }
  if (v10)
  {
    uint64_t v14 = 0;
    unsigned int v15 = &v29[v3 + v4];
    uint64_t v16 = v9 & 0x3FFFFFFFC0;
    unsigned int v17 = &v29[v3 + 16 + v4];
    unsigned int v18 = (long long *)(v6 + 16);
    while (1)
    {
      unsigned int v19 = (char *)(v6 + v7 * v14);
      unsigned int v20 = &v5[512 * v14];
      if ((unint64_t)(&v15[512 * v14] - v19) >= 0x20)
      {
        uint64_t v22 = v18;
        uint64_t v23 = v17;
        uint64_t v24 = v9 & 0x3FFFFFFFC0;
        do
        {
          long long v25 = *v22;
          *(v23 - 1) = *(v22 - 1);
          *uint64_t v23 = v25;
          v23 += 2;
          v22 += 2;
          v24 -= 32;
        }
        while (v24);
        if (v9 == v16) {
          goto LABEL_16;
        }
        v19 += v16;
        v20 += v16;
        int v21 = v9 & 0xFFFFFFC0;
      }
      else
      {
        int v21 = 0;
      }
      unsigned int v26 = v21 + 1;
      do
      {
        char v27 = *v19++;
        *v20++ = v27;
      }
      while (v8 > v26++);
LABEL_16:
      ++v14;
      v17 += 512;
      unsigned int v18 = (long long *)((char *)v18 + v7);
      if (v14 == v2) {
        return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((uint64_t)v29, 512, *(_OWORD **)(v1 + 40), *(char **)(v1 + 48), *(unsigned __int8 *)(v1 + 88), *(unsigned __int8 *)(v1 + 89));
      }
    }
  }
  for (uint64_t i = 0; i != v2; ++i)
  {
    uint64_t v12 = 0;
    do
    {
      v5[v12] = *(unsigned char *)(v6 + v12);
      ++v12;
    }
    while (v8 > v12);
    v5 += 512;
    v6 += v7;
  }
  return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((uint64_t)v29, 512, *(_OWORD **)(v1 + 40), *(char **)(v1 + 48), *(unsigned __int8 *)(v1 + 88), *(unsigned __int8 *)(v1 + 89));
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE20ELj4ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v1 = MEMORY[0x270FA5388](a1);
  uint64_t v30 = *MEMORY[0x263EF8340];
  AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressMacroblock((uint64_t)v29, *(void *)(v1 + 40), *(unsigned __int8 **)(v1 + 48));
  uint64_t v2 = *(unsigned int *)(v1 + 80);
  if (!v2 || !*(_DWORD *)(v1 + 84)) {
    return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((uint64_t)v29, 512, *(void *)(v1 + 40), *(unsigned char **)(v1 + 48), *(unsigned __int8 *)(v1 + 88), *(unsigned __int8 *)(v1 + 89));
  }
  unint64_t v3 = (unint64_t)*(unsigned int *)(v1 + 72) << 9;
  unint64_t v4 = (unint64_t)*(unsigned int *)(v1 + 76) << 6;
  v5 = &v29[v3 + v4];
  uint64_t v6 = *(void *)(v1 + 56);
  uint64_t v7 = *(void *)(v1 + 64);
  unint64_t v8 = (unint64_t)*(unsigned int *)(v1 + 84) << 6;
  if (v8 <= 1) {
    unint64_t v9 = 1;
  }
  else {
    unint64_t v9 = (unint64_t)*(unsigned int *)(v1 + 84) << 6;
  }
  if (v9) {
    BOOL v10 = (v9 - 1) >> 32 == 0;
  }
  else {
    BOOL v10 = 0;
  }
  if (v10)
  {
    uint64_t v14 = 0;
    unsigned int v15 = &v29[v3 + v4];
    uint64_t v16 = v9 & 0x3FFFFFFFC0;
    unsigned int v17 = &v29[v3 + 16 + v4];
    unsigned int v18 = (long long *)(v6 + 16);
    while (1)
    {
      unsigned int v19 = (char *)(v6 + v7 * v14);
      unsigned int v20 = &v5[512 * v14];
      if ((unint64_t)(&v15[512 * v14] - v19) >= 0x20)
      {
        uint64_t v22 = v18;
        uint64_t v23 = v17;
        uint64_t v24 = v9 & 0x3FFFFFFFC0;
        do
        {
          long long v25 = *v22;
          *(v23 - 1) = *(v22 - 1);
          *uint64_t v23 = v25;
          v23 += 2;
          v22 += 2;
          v24 -= 32;
        }
        while (v24);
        if (v9 == v16) {
          goto LABEL_16;
        }
        v19 += v16;
        v20 += v16;
        int v21 = v9 & 0xFFFFFFC0;
      }
      else
      {
        int v21 = 0;
      }
      unsigned int v26 = v21 + 1;
      do
      {
        char v27 = *v19++;
        *v20++ = v27;
      }
      while (v8 > v26++);
LABEL_16:
      ++v14;
      v17 += 512;
      unsigned int v18 = (long long *)((char *)v18 + v7);
      if (v14 == v2) {
        return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((uint64_t)v29, 512, *(void *)(v1 + 40), *(unsigned char **)(v1 + 48), *(unsigned __int8 *)(v1 + 88), *(unsigned __int8 *)(v1 + 89));
      }
    }
  }
  for (uint64_t i = 0; i != v2; ++i)
  {
    uint64_t v12 = 0;
    do
    {
      v5[v12] = *(unsigned char *)(v6 + v12);
      ++v12;
    }
    while (v8 > v12);
    v5 += 512;
    v6 += v7;
  }
  return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((uint64_t)v29, 512, *(void *)(v1 + 40), *(unsigned char **)(v1 + 48), *(unsigned __int8 *)(v1 + 88), *(unsigned __int8 *)(v1 + 89));
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE14ELj4ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v70 = *MEMORY[0x263EF8340];
  AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressMacroblock((uint64_t)v69, *(void *)(a1 + 40), *(unsigned __int8 **)(a1 + 48));
  uint64_t v2 = *(unsigned int *)(a1 + 80);
  if (v2 && *(_DWORD *)(a1 + 84))
  {
    unint64_t v3 = (unint64_t)*(unsigned int *)(a1 + 72) << 7;
    uint64_t v4 = 16 * *(unsigned int *)(a1 + 76);
    v5 = &v69[v3 + v4];
    uint64_t v6 = *(void *)(a1 + 56);
    uint64_t v7 = *(void *)(a1 + 64);
    unint64_t v8 = 16 * *(unsigned int *)(a1 + 84);
    if (v8 <= 1) {
      unint64_t v9 = 1;
    }
    else {
      unint64_t v9 = 16 * *(unsigned int *)(a1 + 84);
    }
    if (v9) {
      BOOL v10 = (v9 - 1) >> 32 == 0;
    }
    else {
      BOOL v10 = 0;
    }
    if (!v10)
    {
      for (uint64_t i = 0; i != v2; ++i)
      {
        uint64_t v12 = 0;
        do
        {
          v5[v12] = *(unsigned char *)(v6 + v12);
          ++v12;
        }
        while (v8 > v12);
        v5 += 128;
        v6 += v7;
      }
      goto LABEL_14;
    }
    int v34 = &v69[v3 + v4];
    uint64_t v35 = v9 & 0xFFFFFFFF0;
    if (v9 < 0x20)
    {
      uint64_t v36 = 0;
      uint32x2_t v37 = &v69[v3 + v4];
      int8x8_t v38 = *(uint64_t **)(a1 + 56);
      while (1)
      {
        unsigned int v39 = (char *)(v6 + v7 * v36);
        int v40 = &v5[128 * v36];
        if ((unint64_t)(&v34[128 * v36] - v39) > 0x1F)
        {
          v40 += v35;
          unsigned int v42 = v37;
          unsigned int v43 = v38;
          uint64_t v44 = v9 & 0xFFFFFFFF0;
          do
          {
            uint64_t v45 = *v43++;
            *v42++ = v45;
            v44 -= 8;
          }
          while (v44);
          if (v9 == v35) {
            goto LABEL_30;
          }
          v39 += v35;
          int v41 = v9 & 0xFFFFFFF0;
        }
        else
        {
          int v41 = 0;
        }
        unsigned int v46 = v41 + 1;
        do
        {
          char v47 = *v39++;
          *v40++ = v47;
          BOOL v48 = v8 > v46++;
        }
        while (v48);
LABEL_30:
        ++v36;
        int8x8_t v38 = (uint64_t *)((char *)v38 + v7);
        v37 += 128;
        if (v36 == v2) {
          goto LABEL_14;
        }
      }
    }
    uint64_t v49 = 0;
    uint64_t v50 = v9 & 0xFFFFFFFE0;
    int v51 = &v69[v3 + v4];
    uint64_t v52 = &v69[v3 + 16 + v4];
    int v53 = (long long *)(v6 + 16);
    BOOL v54 = (uint64_t *)(v6 + (v9 & 0xFFFFFFFE0));
    BOOL v55 = &v51[v9 & 0xFFFFFFFE0];
    do
    {
      __int32 v56 = (char *)(v6 + v7 * v49);
      __int32 v57 = &v5[128 * v49];
      if ((unint64_t)(&v34[128 * v49] - v56) >= 0x20)
      {
        unsigned int v59 = v53;
        unsigned int v60 = v52;
        uint64_t v61 = v9 & 0xFFFFFFFE0;
        do
        {
          long long v62 = *v59;
          *(v60 - 1) = *(v59 - 1);
          *unsigned int v60 = v62;
          v60 += 2;
          v59 += 2;
          v61 -= 32;
        }
        while (v61);
        if (v9 == v50) {
          goto LABEL_41;
        }
        if ((v9 & 0x10) != 0)
        {
          v57 += v35;
          unsigned int v63 = v55;
          unsigned int v64 = v54;
          unint64_t v65 = v35 - (v9 & 0xFFFFFFFE0);
          do
          {
            uint64_t v66 = *v64++;
            *v63++ = v66;
            v65 -= 8;
          }
          while (v65);
          if (v9 == v35) {
            goto LABEL_41;
          }
          v56 += v35;
          int v58 = v9 & 0xFFFFFFF0;
        }
        else
        {
          v56 += v50;
          v57 += v50;
          int v58 = v9 & 0xFFFFFFE0;
        }
      }
      else
      {
        int v58 = 0;
      }
      unsigned int v67 = v58 + 1;
      do
      {
        char v68 = *v56++;
        *v57++ = v68;
        BOOL v48 = v8 > v67++;
      }
      while (v48);
LABEL_41:
      ++v49;
      v52 += 128;
      int v53 = (long long *)((char *)v53 + v7);
      BOOL v54 = (uint64_t *)((char *)v54 + v7);
      v55 += 16;
    }
    while (v49 != v2);
  }
LABEL_14:
  uint64_t v13 = 0;
  uint64_t v14 = *(_OWORD **)(a1 + 40);
  unsigned int v15 = *(char **)(a1 + 48);
  int v16 = *(unsigned __int8 *)(a1 + 88);
  int v17 = *(unsigned __int8 *)(a1 + 89);
  do
  {
    uint64_t v29 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,4u>::kSubblockPositions[v13 + 1];
    uint64_t v30 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,4u>::kSubblockPositions[v13];
    LODWORD(result) = (v16 - 4 * v30) & ~((v16 - 4 * (int)v30) >> 31);
    if (result >= 4) {
      uint64_t result = 4;
    }
    else {
      uint64_t result = result;
    }
    unsigned int v32 = (v17 - 2 * v29) & ~((v17 - 2 * (int)v29) >> 31);
    if (v32 >= 2) {
      unsigned int v32 = 2;
    }
    if (result) {
      BOOL v33 = v32 == 0;
    }
    else {
      BOOL v33 = 1;
    }
    if (v33)
    {
      char v28 = 0;
    }
    else
    {
      unsigned int v18 = (long long *)&v69[256 * v29 + 64 * v30];
      long long v20 = *v18;
      long long v21 = v18[1];
      unsigned int v19 = v18 + 2;
      uint64_t result = (uint64_t)(v18 + 8);
      v18 += 10;
      long long v22 = *v19;
      long long v23 = v19[1];
      long long v24 = *(_OWORD *)result;
      long long v25 = *(_OWORD *)(result + 16);
      long long v26 = *v18;
      long long v27 = v18[1];
      *uint64_t v14 = v20;
      v14[1] = v21;
      v14[2] = v24;
      v14[3] = v25;
      v14[4] = v22;
      v14[5] = v23;
      v14[6] = v26;
      v14[7] = v27;
      v14 += 8;
      char v28 = 127;
    }
    *v15++ = v28;
    v13 += 2;
  }
  while (v13 != 16);
  return result;
}

unint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE14ELj4ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v50 = *MEMORY[0x263EF8340];
  AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressMacroblock((uint64_t)v49, *(void *)(a1 + 40), *(unsigned __int8 **)(a1 + 48));
  uint64_t v2 = *(unsigned int *)(a1 + 80);
  if (!v2 || !*(_DWORD *)(a1 + 84)) {
    return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v49, 128, *(void *)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
  }
  unint64_t v3 = (unint64_t)*(unsigned int *)(a1 + 72) << 7;
  uint64_t v4 = 16 * *(unsigned int *)(a1 + 76);
  v5 = &v49[v3 + v4];
  uint64_t v6 = *(void *)(a1 + 56);
  uint64_t v7 = *(void *)(a1 + 64);
  unint64_t v8 = 16 * *(unsigned int *)(a1 + 84);
  if (v8 <= 1) {
    unint64_t v9 = 1;
  }
  else {
    unint64_t v9 = 16 * *(unsigned int *)(a1 + 84);
  }
  if (v9) {
    BOOL v10 = (v9 - 1) >> 32 == 0;
  }
  else {
    BOOL v10 = 0;
  }
  if (v10)
  {
    uint64_t v14 = &v49[v3 + v4];
    uint64_t v15 = v9 & 0xFFFFFFFF0;
    if (v9 < 0x20)
    {
      uint64_t v16 = 0;
      int v17 = &v49[v3 + v4];
      unsigned int v18 = *(uint64_t **)(a1 + 56);
      while (1)
      {
        unsigned int v19 = (char *)(v6 + v7 * v16);
        long long v20 = &v5[128 * v16];
        if ((unint64_t)(&v14[128 * v16] - v19) > 0x1F)
        {
          v20 += v15;
          long long v22 = v17;
          long long v23 = v18;
          uint64_t v24 = v9 & 0xFFFFFFFF0;
          do
          {
            uint64_t v25 = *v23++;
            *v22++ = v25;
            v24 -= 8;
          }
          while (v24);
          if (v9 == v15) {
            goto LABEL_17;
          }
          v19 += v15;
          int v21 = v9 & 0xFFFFFFF0;
        }
        else
        {
          int v21 = 0;
        }
        unsigned int v26 = v21 + 1;
        do
        {
          char v27 = *v19++;
          *v20++ = v27;
          BOOL v28 = v8 > v26++;
        }
        while (v28);
LABEL_17:
        ++v16;
        unsigned int v18 = (uint64_t *)((char *)v18 + v7);
        v17 += 128;
        if (v16 == v2) {
          return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v49, 128, *(void *)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
        }
      }
    }
    uint64_t v29 = 0;
    uint64_t v30 = v9 & 0xFFFFFFFE0;
    BOOL v31 = &v49[v3 + v4];
    unsigned int v32 = &v49[v3 + 16 + v4];
    BOOL v33 = (long long *)(v6 + 16);
    int v34 = (uint64_t *)(v6 + (v9 & 0xFFFFFFFE0));
    for (uint64_t i = &v31[v9 & 0xFFFFFFFE0]; ; i += 16)
    {
      uint64_t v36 = (char *)(v6 + v7 * v29);
      uint32x2_t v37 = &v5[128 * v29];
      if ((unint64_t)(&v14[128 * v29] - v36) >= 0x20)
      {
        unsigned int v39 = v33;
        int v40 = v32;
        uint64_t v41 = v9 & 0xFFFFFFFE0;
        do
        {
          long long v42 = *v39;
          *(v40 - 1) = *(v39 - 1);
          *int v40 = v42;
          v40 += 2;
          v39 += 2;
          v41 -= 32;
        }
        while (v41);
        if (v9 == v30) {
          goto LABEL_28;
        }
        if ((v9 & 0x10) != 0)
        {
          v37 += v15;
          unsigned int v43 = i;
          uint64_t v44 = v34;
          unint64_t v45 = v15 - (v9 & 0xFFFFFFFE0);
          do
          {
            uint64_t v46 = *v44++;
            *v43++ = v46;
            v45 -= 8;
          }
          while (v45);
          if (v9 == v15) {
            goto LABEL_28;
          }
          v36 += v15;
          int v38 = v9 & 0xFFFFFFF0;
        }
        else
        {
          v36 += v30;
          v37 += v30;
          int v38 = v9 & 0xFFFFFFE0;
        }
      }
      else
      {
        int v38 = 0;
      }
      unsigned int v47 = v38 + 1;
      do
      {
        char v48 = *v36++;
        *v37++ = v48;
        BOOL v28 = v8 > v47++;
      }
      while (v28);
LABEL_28:
      ++v29;
      v32 += 128;
      BOOL v33 = (long long *)((char *)v33 + v7);
      int v34 = (uint64_t *)((char *)v34 + v7);
      if (v29 == v2) {
        return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v49, 128, *(void *)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
      }
    }
  }
  for (uint64_t j = 0; j != v2; ++j)
  {
    uint64_t v12 = 0;
    do
    {
      v5[v12] = *(unsigned char *)(v6 + v12);
      ++v12;
    }
    while (v8 > v12);
    v5 += 128;
    v6 += v7;
  }
  return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v49, 128, *(void *)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE14ELj4ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v70 = *MEMORY[0x263EF8340];
  AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressMacroblock((uint64_t)v69, *(void *)(a1 + 40), *(unsigned __int8 **)(a1 + 48));
  uint64_t v2 = *(unsigned int *)(a1 + 80);
  if (v2 && *(_DWORD *)(a1 + 84))
  {
    unint64_t v3 = (unint64_t)*(unsigned int *)(a1 + 72) << 7;
    uint64_t v4 = 16 * *(unsigned int *)(a1 + 76);
    v5 = &v69[v3 + v4];
    uint64_t v6 = *(void *)(a1 + 56);
    uint64_t v7 = *(void *)(a1 + 64);
    unint64_t v8 = 16 * *(unsigned int *)(a1 + 84);
    if (v8 <= 1) {
      unint64_t v9 = 1;
    }
    else {
      unint64_t v9 = 16 * *(unsigned int *)(a1 + 84);
    }
    if (v9) {
      BOOL v10 = (v9 - 1) >> 32 == 0;
    }
    else {
      BOOL v10 = 0;
    }
    if (!v10)
    {
      for (uint64_t i = 0; i != v2; ++i)
      {
        uint64_t v12 = 0;
        do
        {
          v5[v12] = *(unsigned char *)(v6 + v12);
          ++v12;
        }
        while (v8 > v12);
        v5 += 128;
        v6 += v7;
      }
      goto LABEL_14;
    }
    int v34 = &v69[v3 + v4];
    uint64_t v35 = v9 & 0xFFFFFFFF0;
    if (v9 < 0x20)
    {
      uint64_t v36 = 0;
      uint32x2_t v37 = &v69[v3 + v4];
      int v38 = *(uint64_t **)(a1 + 56);
      while (1)
      {
        unsigned int v39 = (char *)(v6 + v7 * v36);
        int v40 = &v5[128 * v36];
        if ((unint64_t)(&v34[128 * v36] - v39) > 0x1F)
        {
          v40 += v35;
          long long v42 = v37;
          unsigned int v43 = v38;
          uint64_t v44 = v9 & 0xFFFFFFFF0;
          do
          {
            uint64_t v45 = *v43++;
            *v42++ = v45;
            v44 -= 8;
          }
          while (v44);
          if (v9 == v35) {
            goto LABEL_30;
          }
          v39 += v35;
          int v41 = v9 & 0xFFFFFFF0;
        }
        else
        {
          int v41 = 0;
        }
        unsigned int v46 = v41 + 1;
        do
        {
          char v47 = *v39++;
          *v40++ = v47;
          BOOL v48 = v8 > v46++;
        }
        while (v48);
LABEL_30:
        ++v36;
        int v38 = (uint64_t *)((char *)v38 + v7);
        v37 += 128;
        if (v36 == v2) {
          goto LABEL_14;
        }
      }
    }
    uint64_t v49 = 0;
    uint64_t v50 = v9 & 0xFFFFFFFE0;
    int v51 = &v69[v3 + v4];
    uint64_t v52 = &v69[v3 + 16 + v4];
    int v53 = (long long *)(v6 + 16);
    BOOL v54 = (uint64_t *)(v6 + (v9 & 0xFFFFFFFE0));
    BOOL v55 = &v51[v9 & 0xFFFFFFFE0];
    do
    {
      __int32 v56 = (char *)(v6 + v7 * v49);
      __int32 v57 = &v5[128 * v49];
      if ((unint64_t)(&v34[128 * v49] - v56) >= 0x20)
      {
        unsigned int v59 = v53;
        unsigned int v60 = v52;
        uint64_t v61 = v9 & 0xFFFFFFFE0;
        do
        {
          long long v62 = *v59;
          *(v60 - 1) = *(v59 - 1);
          *unsigned int v60 = v62;
          v60 += 2;
          v59 += 2;
          v61 -= 32;
        }
        while (v61);
        if (v9 == v50) {
          goto LABEL_41;
        }
        if ((v9 & 0x10) != 0)
        {
          v57 += v35;
          unsigned int v63 = v55;
          unsigned int v64 = v54;
          unint64_t v65 = v35 - (v9 & 0xFFFFFFFE0);
          do
          {
            uint64_t v66 = *v64++;
            *v63++ = v66;
            v65 -= 8;
          }
          while (v65);
          if (v9 == v35) {
            goto LABEL_41;
          }
          v56 += v35;
          int v58 = v9 & 0xFFFFFFF0;
        }
        else
        {
          v56 += v50;
          v57 += v50;
          int v58 = v9 & 0xFFFFFFE0;
        }
      }
      else
      {
        int v58 = 0;
      }
      unsigned int v67 = v58 + 1;
      do
      {
        char v68 = *v56++;
        *v57++ = v68;
        BOOL v48 = v8 > v67++;
      }
      while (v48);
LABEL_41:
      ++v49;
      v52 += 128;
      int v53 = (long long *)((char *)v53 + v7);
      BOOL v54 = (uint64_t *)((char *)v54 + v7);
      v55 += 16;
    }
    while (v49 != v2);
  }
LABEL_14:
  uint64_t v13 = 0;
  uint64_t v14 = *(_OWORD **)(a1 + 40);
  uint64_t v15 = *(char **)(a1 + 48);
  int v16 = *(unsigned __int8 *)(a1 + 88);
  int v17 = *(unsigned __int8 *)(a1 + 89);
  do
  {
    uint64_t v29 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,4u>::kSubblockPositions[v13 + 1];
    uint64_t v30 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,4u>::kSubblockPositions[v13];
    LODWORD(result) = (v16 - 4 * v30) & ~((v16 - 4 * (int)v30) >> 31);
    if (result >= 4) {
      uint64_t result = 4;
    }
    else {
      uint64_t result = result;
    }
    unsigned int v32 = (v17 - 2 * v29) & ~((v17 - 2 * (int)v29) >> 31);
    if (v32 >= 2) {
      unsigned int v32 = 2;
    }
    if (result) {
      BOOL v33 = v32 == 0;
    }
    else {
      BOOL v33 = 1;
    }
    if (v33)
    {
      char v28 = 0;
    }
    else
    {
      unsigned int v18 = (long long *)&v69[256 * v29 + 64 * v30];
      long long v20 = *v18;
      long long v21 = v18[1];
      unsigned int v19 = v18 + 2;
      uint64_t result = (uint64_t)(v18 + 8);
      v18 += 10;
      long long v22 = *v19;
      long long v23 = v19[1];
      long long v24 = *(_OWORD *)result;
      long long v25 = *(_OWORD *)(result + 16);
      long long v26 = *v18;
      long long v27 = v18[1];
      *uint64_t v14 = v20;
      v14[1] = v21;
      v14[2] = v24;
      v14[3] = v25;
      v14[4] = v22;
      v14[5] = v23;
      v14[6] = v26;
      v14[7] = v27;
      v14 += 8;
      char v28 = 127;
    }
    *v15++ = v28;
    v13 += 2;
  }
  while (v13 != 16);
  return result;
}

unint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE14ELj4ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v50 = *MEMORY[0x263EF8340];
  AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressMacroblock((uint64_t)v49, *(void *)(a1 + 40), *(unsigned __int8 **)(a1 + 48));
  uint64_t v2 = *(unsigned int *)(a1 + 80);
  if (!v2 || !*(_DWORD *)(a1 + 84)) {
    return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v49, 128, *(void *)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
  }
  unint64_t v3 = (unint64_t)*(unsigned int *)(a1 + 72) << 7;
  uint64_t v4 = 16 * *(unsigned int *)(a1 + 76);
  v5 = &v49[v3 + v4];
  uint64_t v6 = *(void *)(a1 + 56);
  uint64_t v7 = *(void *)(a1 + 64);
  unint64_t v8 = 16 * *(unsigned int *)(a1 + 84);
  if (v8 <= 1) {
    unint64_t v9 = 1;
  }
  else {
    unint64_t v9 = 16 * *(unsigned int *)(a1 + 84);
  }
  if (v9) {
    BOOL v10 = (v9 - 1) >> 32 == 0;
  }
  else {
    BOOL v10 = 0;
  }
  if (v10)
  {
    uint64_t v14 = &v49[v3 + v4];
    uint64_t v15 = v9 & 0xFFFFFFFF0;
    if (v9 < 0x20)
    {
      uint64_t v16 = 0;
      int v17 = &v49[v3 + v4];
      unsigned int v18 = *(uint64_t **)(a1 + 56);
      while (1)
      {
        unsigned int v19 = (char *)(v6 + v7 * v16);
        long long v20 = &v5[128 * v16];
        if ((unint64_t)(&v14[128 * v16] - v19) > 0x1F)
        {
          v20 += v15;
          long long v22 = v17;
          long long v23 = v18;
          uint64_t v24 = v9 & 0xFFFFFFFF0;
          do
          {
            uint64_t v25 = *v23++;
            *v22++ = v25;
            v24 -= 8;
          }
          while (v24);
          if (v9 == v15) {
            goto LABEL_17;
          }
          v19 += v15;
          int v21 = v9 & 0xFFFFFFF0;
        }
        else
        {
          int v21 = 0;
        }
        unsigned int v26 = v21 + 1;
        do
        {
          char v27 = *v19++;
          *v20++ = v27;
          BOOL v28 = v8 > v26++;
        }
        while (v28);
LABEL_17:
        ++v16;
        unsigned int v18 = (uint64_t *)((char *)v18 + v7);
        v17 += 128;
        if (v16 == v2) {
          return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v49, 128, *(void *)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
        }
      }
    }
    uint64_t v29 = 0;
    uint64_t v30 = v9 & 0xFFFFFFFE0;
    BOOL v31 = &v49[v3 + v4];
    unsigned int v32 = &v49[v3 + 16 + v4];
    BOOL v33 = (long long *)(v6 + 16);
    int v34 = (uint64_t *)(v6 + (v9 & 0xFFFFFFFE0));
    for (uint64_t i = &v31[v9 & 0xFFFFFFFE0]; ; i += 16)
    {
      uint64_t v36 = (char *)(v6 + v7 * v29);
      uint32x2_t v37 = &v5[128 * v29];
      if ((unint64_t)(&v14[128 * v29] - v36) >= 0x20)
      {
        unsigned int v39 = v33;
        int v40 = v32;
        uint64_t v41 = v9 & 0xFFFFFFFE0;
        do
        {
          long long v42 = *v39;
          *(v40 - 1) = *(v39 - 1);
          *int v40 = v42;
          v40 += 2;
          v39 += 2;
          v41 -= 32;
        }
        while (v41);
        if (v9 == v30) {
          goto LABEL_28;
        }
        if ((v9 & 0x10) != 0)
        {
          v37 += v15;
          unsigned int v43 = i;
          uint64_t v44 = v34;
          unint64_t v45 = v15 - (v9 & 0xFFFFFFFE0);
          do
          {
            uint64_t v46 = *v44++;
            *v43++ = v46;
            v45 -= 8;
          }
          while (v45);
          if (v9 == v15) {
            goto LABEL_28;
          }
          v36 += v15;
          int v38 = v9 & 0xFFFFFFF0;
        }
        else
        {
          v36 += v30;
          v37 += v30;
          int v38 = v9 & 0xFFFFFFE0;
        }
      }
      else
      {
        int v38 = 0;
      }
      unsigned int v47 = v38 + 1;
      do
      {
        char v48 = *v36++;
        *v37++ = v48;
        BOOL v28 = v8 > v47++;
      }
      while (v28);
LABEL_28:
      ++v29;
      v32 += 128;
      BOOL v33 = (long long *)((char *)v33 + v7);
      int v34 = (uint64_t *)((char *)v34 + v7);
      if (v29 == v2) {
        return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v49, 128, *(void *)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
      }
    }
  }
  for (uint64_t j = 0; j != v2; ++j)
  {
    uint64_t v12 = 0;
    do
    {
      v5[v12] = *(unsigned char *)(v6 + v12);
      ++v12;
    }
    while (v8 > v12);
    v5 += 128;
    v6 += v7;
  }
  return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v49, 128, *(void *)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE12ELj4ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v70 = *MEMORY[0x263EF8340];
  AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressMacroblock((uint64_t)v69, *(void *)(a1 + 40), *(unsigned __int8 **)(a1 + 48));
  uint64_t v2 = *(unsigned int *)(a1 + 80);
  if (v2 && *(_DWORD *)(a1 + 84))
  {
    unint64_t v3 = (unint64_t)*(unsigned int *)(a1 + 72) << 7;
    uint64_t v4 = 16 * *(unsigned int *)(a1 + 76);
    v5 = &v69[v3 + v4];
    uint64_t v6 = *(void *)(a1 + 56);
    uint64_t v7 = *(void *)(a1 + 64);
    unint64_t v8 = 16 * *(unsigned int *)(a1 + 84);
    if (v8 <= 1) {
      unint64_t v9 = 1;
    }
    else {
      unint64_t v9 = 16 * *(unsigned int *)(a1 + 84);
    }
    if (v9) {
      BOOL v10 = (v9 - 1) >> 32 == 0;
    }
    else {
      BOOL v10 = 0;
    }
    if (!v10)
    {
      for (uint64_t i = 0; i != v2; ++i)
      {
        uint64_t v12 = 0;
        do
        {
          v5[v12] = *(unsigned char *)(v6 + v12);
          ++v12;
        }
        while (v8 > v12);
        v5 += 128;
        v6 += v7;
      }
      goto LABEL_14;
    }
    int v34 = &v69[v3 + v4];
    uint64_t v35 = v9 & 0xFFFFFFFF0;
    if (v9 < 0x20)
    {
      uint64_t v36 = 0;
      uint32x2_t v37 = &v69[v3 + v4];
      int v38 = *(uint64_t **)(a1 + 56);
      while (1)
      {
        unsigned int v39 = (char *)(v6 + v7 * v36);
        int v40 = &v5[128 * v36];
        if ((unint64_t)(&v34[128 * v36] - v39) > 0x1F)
        {
          v40 += v35;
          long long v42 = v37;
          unsigned int v43 = v38;
          uint64_t v44 = v9 & 0xFFFFFFFF0;
          do
          {
            uint64_t v45 = *v43++;
            *v42++ = v45;
            v44 -= 8;
          }
          while (v44);
          if (v9 == v35) {
            goto LABEL_30;
          }
          v39 += v35;
          int v41 = v9 & 0xFFFFFFF0;
        }
        else
        {
          int v41 = 0;
        }
        unsigned int v46 = v41 + 1;
        do
        {
          char v47 = *v39++;
          *v40++ = v47;
          BOOL v48 = v8 > v46++;
        }
        while (v48);
LABEL_30:
        ++v36;
        int v38 = (uint64_t *)((char *)v38 + v7);
        v37 += 128;
        if (v36 == v2) {
          goto LABEL_14;
        }
      }
    }
    uint64_t v49 = 0;
    uint64_t v50 = v9 & 0xFFFFFFFE0;
    int v51 = &v69[v3 + v4];
    uint64_t v52 = &v69[v3 + 16 + v4];
    int v53 = (long long *)(v6 + 16);
    BOOL v54 = (uint64_t *)(v6 + (v9 & 0xFFFFFFFE0));
    BOOL v55 = &v51[v9 & 0xFFFFFFFE0];
    do
    {
      __int32 v56 = (char *)(v6 + v7 * v49);
      __int32 v57 = &v5[128 * v49];
      if ((unint64_t)(&v34[128 * v49] - v56) >= 0x20)
      {
        unsigned int v59 = v53;
        unsigned int v60 = v52;
        uint64_t v61 = v9 & 0xFFFFFFFE0;
        do
        {
          long long v62 = *v59;
          *(v60 - 1) = *(v59 - 1);
          *unsigned int v60 = v62;
          v60 += 2;
          v59 += 2;
          v61 -= 32;
        }
        while (v61);
        if (v9 == v50) {
          goto LABEL_41;
        }
        if ((v9 & 0x10) != 0)
        {
          v57 += v35;
          unsigned int v63 = v55;
          unsigned int v64 = v54;
          unint64_t v65 = v35 - (v9 & 0xFFFFFFFE0);
          do
          {
            uint64_t v66 = *v64++;
            *v63++ = v66;
            v65 -= 8;
          }
          while (v65);
          if (v9 == v35) {
            goto LABEL_41;
          }
          v56 += v35;
          int v58 = v9 & 0xFFFFFFF0;
        }
        else
        {
          v56 += v50;
          v57 += v50;
          int v58 = v9 & 0xFFFFFFE0;
        }
      }
      else
      {
        int v58 = 0;
      }
      unsigned int v67 = v58 + 1;
      do
      {
        char v68 = *v56++;
        *v57++ = v68;
        BOOL v48 = v8 > v67++;
      }
      while (v48);
LABEL_41:
      ++v49;
      v52 += 128;
      int v53 = (long long *)((char *)v53 + v7);
      BOOL v54 = (uint64_t *)((char *)v54 + v7);
      v55 += 16;
    }
    while (v49 != v2);
  }
LABEL_14:
  uint64_t v13 = 0;
  uint64_t v14 = *(_OWORD **)(a1 + 40);
  uint64_t v15 = *(char **)(a1 + 48);
  int v16 = *(unsigned __int8 *)(a1 + 88);
  int v17 = *(unsigned __int8 *)(a1 + 89);
  do
  {
    uint64_t v29 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,4u>::kSubblockPositions[v13 + 1];
    uint64_t v30 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,4u>::kSubblockPositions[v13];
    LODWORD(result) = (v16 - 4 * v30) & ~((v16 - 4 * (int)v30) >> 31);
    if (result >= 4) {
      uint64_t result = 4;
    }
    else {
      uint64_t result = result;
    }
    unsigned int v32 = (v17 - 2 * v29) & ~((v17 - 2 * (int)v29) >> 31);
    if (v32 >= 2) {
      unsigned int v32 = 2;
    }
    if (result) {
      BOOL v33 = v32 == 0;
    }
    else {
      BOOL v33 = 1;
    }
    if (v33)
    {
      char v28 = 0;
    }
    else
    {
      unsigned int v18 = (long long *)&v69[256 * v29 + 64 * v30];
      long long v20 = *v18;
      long long v21 = v18[1];
      unsigned int v19 = v18 + 2;
      uint64_t result = (uint64_t)(v18 + 8);
      v18 += 10;
      long long v22 = *v19;
      long long v23 = v19[1];
      long long v24 = *(_OWORD *)result;
      long long v25 = *(_OWORD *)(result + 16);
      long long v26 = *v18;
      long long v27 = v18[1];
      *uint64_t v14 = v20;
      v14[1] = v21;
      v14[2] = v24;
      v14[3] = v25;
      v14[4] = v22;
      v14[5] = v23;
      v14[6] = v26;
      v14[7] = v27;
      v14 += 8;
      char v28 = 127;
    }
    *v15++ = v28;
    v13 += 2;
  }
  while (v13 != 16);
  return result;
}

unint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE12ELj4ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v50 = *MEMORY[0x263EF8340];
  AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressMacroblock((uint64_t)v49, *(void *)(a1 + 40), *(unsigned __int8 **)(a1 + 48));
  uint64_t v2 = *(unsigned int *)(a1 + 80);
  if (!v2 || !*(_DWORD *)(a1 + 84)) {
    return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v49, 128, *(void *)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
  }
  unint64_t v3 = (unint64_t)*(unsigned int *)(a1 + 72) << 7;
  uint64_t v4 = 16 * *(unsigned int *)(a1 + 76);
  v5 = &v49[v3 + v4];
  uint64_t v6 = *(void *)(a1 + 56);
  uint64_t v7 = *(void *)(a1 + 64);
  unint64_t v8 = 16 * *(unsigned int *)(a1 + 84);
  if (v8 <= 1) {
    unint64_t v9 = 1;
  }
  else {
    unint64_t v9 = 16 * *(unsigned int *)(a1 + 84);
  }
  if (v9) {
    BOOL v10 = (v9 - 1) >> 32 == 0;
  }
  else {
    BOOL v10 = 0;
  }
  if (v10)
  {
    uint64_t v14 = &v49[v3 + v4];
    uint64_t v15 = v9 & 0xFFFFFFFF0;
    if (v9 < 0x20)
    {
      uint64_t v16 = 0;
      int v17 = &v49[v3 + v4];
      unsigned int v18 = *(uint64_t **)(a1 + 56);
      while (1)
      {
        unsigned int v19 = (char *)(v6 + v7 * v16);
        long long v20 = &v5[128 * v16];
        if ((unint64_t)(&v14[128 * v16] - v19) > 0x1F)
        {
          v20 += v15;
          long long v22 = v17;
          long long v23 = v18;
          uint64_t v24 = v9 & 0xFFFFFFFF0;
          do
          {
            uint64_t v25 = *v23++;
            *v22++ = v25;
            v24 -= 8;
          }
          while (v24);
          if (v9 == v15) {
            goto LABEL_17;
          }
          v19 += v15;
          int v21 = v9 & 0xFFFFFFF0;
        }
        else
        {
          int v21 = 0;
        }
        unsigned int v26 = v21 + 1;
        do
        {
          char v27 = *v19++;
          *v20++ = v27;
          BOOL v28 = v8 > v26++;
        }
        while (v28);
LABEL_17:
        ++v16;
        unsigned int v18 = (uint64_t *)((char *)v18 + v7);
        v17 += 128;
        if (v16 == v2) {
          return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v49, 128, *(void *)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
        }
      }
    }
    uint64_t v29 = 0;
    uint64_t v30 = v9 & 0xFFFFFFFE0;
    BOOL v31 = &v49[v3 + v4];
    unsigned int v32 = &v49[v3 + 16 + v4];
    BOOL v33 = (long long *)(v6 + 16);
    int v34 = (uint64_t *)(v6 + (v9 & 0xFFFFFFFE0));
    for (uint64_t i = &v31[v9 & 0xFFFFFFFE0]; ; i += 16)
    {
      uint64_t v36 = (char *)(v6 + v7 * v29);
      uint32x2_t v37 = &v5[128 * v29];
      if ((unint64_t)(&v14[128 * v29] - v36) >= 0x20)
      {
        unsigned int v39 = v33;
        int v40 = v32;
        uint64_t v41 = v9 & 0xFFFFFFFE0;
        do
        {
          long long v42 = *v39;
          *(v40 - 1) = *(v39 - 1);
          *int v40 = v42;
          v40 += 2;
          v39 += 2;
          v41 -= 32;
        }
        while (v41);
        if (v9 == v30) {
          goto LABEL_28;
        }
        if ((v9 & 0x10) != 0)
        {
          v37 += v15;
          unsigned int v43 = i;
          uint64_t v44 = v34;
          unint64_t v45 = v15 - (v9 & 0xFFFFFFFE0);
          do
          {
            uint64_t v46 = *v44++;
            *v43++ = v46;
            v45 -= 8;
          }
          while (v45);
          if (v9 == v15) {
            goto LABEL_28;
          }
          v36 += v15;
          int v38 = v9 & 0xFFFFFFF0;
        }
        else
        {
          v36 += v30;
          v37 += v30;
          int v38 = v9 & 0xFFFFFFE0;
        }
      }
      else
      {
        int v38 = 0;
      }
      unsigned int v47 = v38 + 1;
      do
      {
        char v48 = *v36++;
        *v37++ = v48;
        BOOL v28 = v8 > v47++;
      }
      while (v28);
LABEL_28:
      ++v29;
      v32 += 128;
      BOOL v33 = (long long *)((char *)v33 + v7);
      int v34 = (uint64_t *)((char *)v34 + v7);
      if (v29 == v2) {
        return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v49, 128, *(void *)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
      }
    }
  }
  for (uint64_t j = 0; j != v2; ++j)
  {
    uint64_t v12 = 0;
    do
    {
      v5[v12] = *(unsigned char *)(v6 + v12);
      ++v12;
    }
    while (v8 > v12);
    v5 += 128;
    v6 += v7;
  }
  return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v49, 128, *(void *)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE12ELj4ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v70 = *MEMORY[0x263EF8340];
  AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressMacroblock((uint64_t)v69, *(void *)(a1 + 40), *(unsigned __int8 **)(a1 + 48));
  uint64_t v2 = *(unsigned int *)(a1 + 80);
  if (v2 && *(_DWORD *)(a1 + 84))
  {
    unint64_t v3 = (unint64_t)*(unsigned int *)(a1 + 72) << 7;
    uint64_t v4 = 16 * *(unsigned int *)(a1 + 76);
    v5 = &v69[v3 + v4];
    uint64_t v6 = *(void *)(a1 + 56);
    uint64_t v7 = *(void *)(a1 + 64);
    unint64_t v8 = 16 * *(unsigned int *)(a1 + 84);
    if (v8 <= 1) {
      unint64_t v9 = 1;
    }
    else {
      unint64_t v9 = 16 * *(unsigned int *)(a1 + 84);
    }
    if (v9) {
      BOOL v10 = (v9 - 1) >> 32 == 0;
    }
    else {
      BOOL v10 = 0;
    }
    if (!v10)
    {
      for (uint64_t i = 0; i != v2; ++i)
      {
        uint64_t v12 = 0;
        do
        {
          v5[v12] = *(unsigned char *)(v6 + v12);
          ++v12;
        }
        while (v8 > v12);
        v5 += 128;
        v6 += v7;
      }
      goto LABEL_14;
    }
    int v34 = &v69[v3 + v4];
    uint64_t v35 = v9 & 0xFFFFFFFF0;
    if (v9 < 0x20)
    {
      uint64_t v36 = 0;
      uint32x2_t v37 = &v69[v3 + v4];
      int v38 = *(uint64_t **)(a1 + 56);
      while (1)
      {
        unsigned int v39 = (char *)(v6 + v7 * v36);
        int v40 = &v5[128 * v36];
        if ((unint64_t)(&v34[128 * v36] - v39) > 0x1F)
        {
          v40 += v35;
          long long v42 = v37;
          unsigned int v43 = v38;
          uint64_t v44 = v9 & 0xFFFFFFFF0;
          do
          {
            uint64_t v45 = *v43++;
            *v42++ = v45;
            v44 -= 8;
          }
          while (v44);
          if (v9 == v35) {
            goto LABEL_30;
          }
          v39 += v35;
          int v41 = v9 & 0xFFFFFFF0;
        }
        else
        {
          int v41 = 0;
        }
        unsigned int v46 = v41 + 1;
        do
        {
          char v47 = *v39++;
          *v40++ = v47;
          BOOL v48 = v8 > v46++;
        }
        while (v48);
LABEL_30:
        ++v36;
        int v38 = (uint64_t *)((char *)v38 + v7);
        v37 += 128;
        if (v36 == v2) {
          goto LABEL_14;
        }
      }
    }
    uint64_t v49 = 0;
    uint64_t v50 = v9 & 0xFFFFFFFE0;
    int v51 = &v69[v3 + v4];
    uint64_t v52 = &v69[v3 + 16 + v4];
    int v53 = (long long *)(v6 + 16);
    BOOL v54 = (uint64_t *)(v6 + (v9 & 0xFFFFFFFE0));
    BOOL v55 = &v51[v9 & 0xFFFFFFFE0];
    do
    {
      __int32 v56 = (char *)(v6 + v7 * v49);
      __int32 v57 = &v5[128 * v49];
      if ((unint64_t)(&v34[128 * v49] - v56) >= 0x20)
      {
        unsigned int v59 = v53;
        unsigned int v60 = v52;
        uint64_t v61 = v9 & 0xFFFFFFFE0;
        do
        {
          long long v62 = *v59;
          *(v60 - 1) = *(v59 - 1);
          *unsigned int v60 = v62;
          v60 += 2;
          v59 += 2;
          v61 -= 32;
        }
        while (v61);
        if (v9 == v50) {
          goto LABEL_41;
        }
        if ((v9 & 0x10) != 0)
        {
          v57 += v35;
          unsigned int v63 = v55;
          unsigned int v64 = v54;
          unint64_t v65 = v35 - (v9 & 0xFFFFFFFE0);
          do
          {
            uint64_t v66 = *v64++;
            *v63++ = v66;
            v65 -= 8;
          }
          while (v65);
          if (v9 == v35) {
            goto LABEL_41;
          }
          v56 += v35;
          int v58 = v9 & 0xFFFFFFF0;
        }
        else
        {
          v56 += v50;
          v57 += v50;
          int v58 = v9 & 0xFFFFFFE0;
        }
      }
      else
      {
        int v58 = 0;
      }
      unsigned int v67 = v58 + 1;
      do
      {
        char v68 = *v56++;
        *v57++ = v68;
        BOOL v48 = v8 > v67++;
      }
      while (v48);
LABEL_41:
      ++v49;
      v52 += 128;
      int v53 = (long long *)((char *)v53 + v7);
      BOOL v54 = (uint64_t *)((char *)v54 + v7);
      v55 += 16;
    }
    while (v49 != v2);
  }
LABEL_14:
  uint64_t v13 = 0;
  uint64_t v14 = *(_OWORD **)(a1 + 40);
  uint64_t v15 = *(char **)(a1 + 48);
  int v16 = *(unsigned __int8 *)(a1 + 88);
  int v17 = *(unsigned __int8 *)(a1 + 89);
  do
  {
    uint64_t v29 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,4u>::kSubblockPositions[v13 + 1];
    uint64_t v30 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,4u>::kSubblockPositions[v13];
    LODWORD(result) = (v16 - 4 * v30) & ~((v16 - 4 * (int)v30) >> 31);
    if (result >= 4) {
      uint64_t result = 4;
    }
    else {
      uint64_t result = result;
    }
    unsigned int v32 = (v17 - 2 * v29) & ~((v17 - 2 * (int)v29) >> 31);
    if (v32 >= 2) {
      unsigned int v32 = 2;
    }
    if (result) {
      BOOL v33 = v32 == 0;
    }
    else {
      BOOL v33 = 1;
    }
    if (v33)
    {
      char v28 = 0;
    }
    else
    {
      unsigned int v18 = (long long *)&v69[256 * v29 + 64 * v30];
      long long v20 = *v18;
      long long v21 = v18[1];
      unsigned int v19 = v18 + 2;
      uint64_t result = (uint64_t)(v18 + 8);
      v18 += 10;
      long long v22 = *v19;
      long long v23 = v19[1];
      long long v24 = *(_OWORD *)result;
      long long v25 = *(_OWORD *)(result + 16);
      long long v26 = *v18;
      long long v27 = v18[1];
      *uint64_t v14 = v20;
      v14[1] = v21;
      v14[2] = v24;
      v14[3] = v25;
      v14[4] = v22;
      v14[5] = v23;
      v14[6] = v26;
      v14[7] = v27;
      v14 += 8;
      char v28 = 127;
    }
    *v15++ = v28;
    v13 += 2;
  }
  while (v13 != 16);
  return result;
}

unint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE12ELj4ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v50 = *MEMORY[0x263EF8340];
  AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressMacroblock((uint64_t)v49, *(void *)(a1 + 40), *(unsigned __int8 **)(a1 + 48));
  uint64_t v2 = *(unsigned int *)(a1 + 80);
  if (!v2 || !*(_DWORD *)(a1 + 84)) {
    return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v49, 128, *(void *)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
  }
  unint64_t v3 = (unint64_t)*(unsigned int *)(a1 + 72) << 7;
  uint64_t v4 = 16 * *(unsigned int *)(a1 + 76);
  v5 = &v49[v3 + v4];
  uint64_t v6 = *(void *)(a1 + 56);
  uint64_t v7 = *(void *)(a1 + 64);
  unint64_t v8 = 16 * *(unsigned int *)(a1 + 84);
  if (v8 <= 1) {
    unint64_t v9 = 1;
  }
  else {
    unint64_t v9 = 16 * *(unsigned int *)(a1 + 84);
  }
  if (v9) {
    BOOL v10 = (v9 - 1) >> 32 == 0;
  }
  else {
    BOOL v10 = 0;
  }
  if (v10)
  {
    uint64_t v14 = &v49[v3 + v4];
    uint64_t v15 = v9 & 0xFFFFFFFF0;
    if (v9 < 0x20)
    {
      uint64_t v16 = 0;
      int v17 = &v49[v3 + v4];
      unsigned int v18 = *(uint64_t **)(a1 + 56);
      while (1)
      {
        unsigned int v19 = (char *)(v6 + v7 * v16);
        long long v20 = &v5[128 * v16];
        if ((unint64_t)(&v14[128 * v16] - v19) > 0x1F)
        {
          v20 += v15;
          long long v22 = v17;
          long long v23 = v18;
          uint64_t v24 = v9 & 0xFFFFFFFF0;
          do
          {
            uint64_t v25 = *v23++;
            *v22++ = v25;
            v24 -= 8;
          }
          while (v24);
          if (v9 == v15) {
            goto LABEL_17;
          }
          v19 += v15;
          int v21 = v9 & 0xFFFFFFF0;
        }
        else
        {
          int v21 = 0;
        }
        unsigned int v26 = v21 + 1;
        do
        {
          char v27 = *v19++;
          *v20++ = v27;
          BOOL v28 = v8 > v26++;
        }
        while (v28);
LABEL_17:
        ++v16;
        unsigned int v18 = (uint64_t *)((char *)v18 + v7);
        v17 += 128;
        if (v16 == v2) {
          return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v49, 128, *(void *)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
        }
      }
    }
    uint64_t v29 = 0;
    uint64_t v30 = v9 & 0xFFFFFFFE0;
    BOOL v31 = &v49[v3 + v4];
    unsigned int v32 = &v49[v3 + 16 + v4];
    BOOL v33 = (long long *)(v6 + 16);
    int v34 = (uint64_t *)(v6 + (v9 & 0xFFFFFFFE0));
    for (uint64_t i = &v31[v9 & 0xFFFFFFFE0]; ; i += 16)
    {
      uint64_t v36 = (char *)(v6 + v7 * v29);
      uint32x2_t v37 = &v5[128 * v29];
      if ((unint64_t)(&v14[128 * v29] - v36) >= 0x20)
      {
        unsigned int v39 = v33;
        int v40 = v32;
        uint64_t v41 = v9 & 0xFFFFFFFE0;
        do
        {
          long long v42 = *v39;
          *(v40 - 1) = *(v39 - 1);
          *int v40 = v42;
          v40 += 2;
          v39 += 2;
          v41 -= 32;
        }
        while (v41);
        if (v9 == v30) {
          goto LABEL_28;
        }
        if ((v9 & 0x10) != 0)
        {
          v37 += v15;
          unsigned int v43 = i;
          uint64_t v44 = v34;
          unint64_t v45 = v15 - (v9 & 0xFFFFFFFE0);
          do
          {
            uint64_t v46 = *v44++;
            *v43++ = v46;
            v45 -= 8;
          }
          while (v45);
          if (v9 == v15) {
            goto LABEL_28;
          }
          v36 += v15;
          int v38 = v9 & 0xFFFFFFF0;
        }
        else
        {
          v36 += v30;
          v37 += v30;
          int v38 = v9 & 0xFFFFFFE0;
        }
      }
      else
      {
        int v38 = 0;
      }
      unsigned int v47 = v38 + 1;
      do
      {
        char v48 = *v36++;
        *v37++ = v48;
        BOOL v28 = v8 > v47++;
      }
      while (v28);
LABEL_28:
      ++v29;
      v32 += 128;
      BOOL v33 = (long long *)((char *)v33 + v7);
      int v34 = (uint64_t *)((char *)v34 + v7);
      if (v29 == v2) {
        return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v49, 128, *(void *)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
      }
    }
  }
  for (uint64_t j = 0; j != v2; ++j)
  {
    uint64_t v12 = 0;
    do
    {
      v5[v12] = *(unsigned char *)(v6 + v12);
      ++v12;
    }
    while (v8 > v12);
    v5 += 128;
    v6 += v7;
  }
  return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v49, 128, *(void *)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE9ELj4ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v64 = *MEMORY[0x263EF8340];
  AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressMacroblock(v63, *(void *)(a1 + 40), *(unsigned __int8 **)(a1 + 48));
  uint64_t v2 = *(unsigned int *)(a1 + 80);
  if (v2 && *(_DWORD *)(a1 + 84))
  {
    unint64_t v3 = (unint64_t)*(unsigned int *)(a1 + 72) << 6;
    uint64_t v4 = 8 * *(unsigned int *)(a1 + 76);
    v5 = &v63[0].i8[v3 + v4];
    uint64_t v6 = *(void *)(a1 + 56);
    uint64_t v7 = *(void *)(a1 + 64);
    unint64_t v8 = 8 * *(unsigned int *)(a1 + 84);
    if (v8 <= 1) {
      unint64_t v9 = 1;
    }
    else {
      unint64_t v9 = 8 * *(unsigned int *)(a1 + 84);
    }
    if (v9) {
      BOOL v10 = (v9 - 1) >> 32 == 0;
    }
    else {
      BOOL v10 = 0;
    }
    if (!v10)
    {
      for (uint64_t i = 0; i != v2; ++i)
      {
        uint64_t v12 = 0;
        do
        {
          v5[v12] = *(unsigned char *)(v6 + v12);
          ++v12;
        }
        while (v8 > v12);
        v5 += 64;
        v6 += v7;
      }
      goto LABEL_14;
    }
    BOOL v28 = &v63[0].i8[v3 + v4];
    uint64_t v29 = v9 & 0x7FFFFFFF8;
    if (v9 < 0x20)
    {
      uint64_t v30 = 0;
      BOOL v31 = &v63[0].i8[v3 + v4];
      unsigned int v32 = *(uint64_t **)(a1 + 56);
      while (1)
      {
        BOOL v33 = (char *)(v6 + v7 * v30);
        int v34 = &v5[64 * v30];
        if ((unint64_t)(&v28[64 * v30] - v33) > 0x1F)
        {
          v34 += v29;
          uint64_t v36 = v31;
          uint32x2_t v37 = v32;
          uint64_t v38 = v9 & 0x7FFFFFFF8;
          do
          {
            uint64_t v39 = *v37++;
            *(void *)uint64_t v36 = v39;
            v36 += 8;
            v38 -= 8;
          }
          while (v38);
          if (v9 == v29) {
            goto LABEL_30;
          }
          v33 += v29;
          int v35 = v9 & 0xFFFFFFF8;
        }
        else
        {
          int v35 = 0;
        }
        unsigned int v40 = v35 + 1;
        do
        {
          char v41 = *v33++;
          *v34++ = v41;
          BOOL v42 = v8 > v40++;
        }
        while (v42);
LABEL_30:
        ++v30;
        unsigned int v32 = (uint64_t *)((char *)v32 + v7);
        v31 += 64;
        if (v30 == v2) {
          goto LABEL_14;
        }
      }
    }
    uint64_t v43 = 0;
    uint64_t v44 = v9 & 0x7FFFFFFE0;
    unint64_t v45 = &v63[0].i8[v3 + v4];
    uint64_t v46 = &v63[1].i8[v3 + v4];
    unsigned int v47 = (long long *)(v6 + 16);
    char v48 = (uint64_t *)(v6 + (v9 & 0x7FFFFFFE0));
    uint64_t v49 = &v45[v9 & 0x7FFFFFFE0];
    do
    {
      uint64_t v50 = (char *)(v6 + v7 * v43);
      int v51 = &v5[64 * v43];
      if ((unint64_t)(&v28[64 * v43] - v50) >= 0x20)
      {
        BOOL v55 = v47;
        __int32 v56 = v46;
        uint64_t v57 = v9 & 0x7FFFFFFE0;
        do
        {
          long long v58 = *v55;
          *((_OWORD *)v56 - 1) = *(v55 - 1);
          *(_OWORD *)__int32 v56 = v58;
          v56 += 32;
          v55 += 2;
          v57 -= 32;
        }
        while (v57);
        if (v9 == v44) {
          goto LABEL_41;
        }
        if ((v9 & 0x18) != 0)
        {
          v51 += v29;
          unsigned int v59 = v49;
          unsigned int v60 = v48;
          unint64_t v61 = v29 - (v9 & 0x7FFFFFFE0);
          do
          {
            uint64_t v62 = *v60++;
            *(void *)unsigned int v59 = v62;
            v59 += 8;
            v61 -= 8;
          }
          while (v61);
          if (v9 == v29) {
            goto LABEL_41;
          }
          v50 += v29;
          int v52 = v9 & 0xFFFFFFF8;
        }
        else
        {
          v50 += v44;
          v51 += v44;
          int v52 = v9 & 0xFFFFFFE0;
        }
      }
      else
      {
        int v52 = 0;
      }
      unsigned int v53 = v52 + 1;
      do
      {
        char v54 = *v50++;
        *v51++ = v54;
        BOOL v42 = v8 > v53++;
      }
      while (v42);
LABEL_41:
      ++v43;
      v46 += 64;
      unsigned int v47 = (long long *)((char *)v47 + v7);
      char v48 = (uint64_t *)((char *)v48 + v7);
      v49 += 64;
    }
    while (v43 != v2);
  }
LABEL_14:
  uint64_t v13 = 0;
  uint64_t v14 = *(int16x8_t **)(a1 + 40);
  uint64_t v15 = *(char **)(a1 + 48);
  int v16 = *(unsigned __int8 *)(a1 + 88);
  int v17 = *(unsigned __int8 *)(a1 + 89);
  do
  {
    uint64_t v23 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,4u>::kSubblockPositions[v13 + 1];
    uint64_t v24 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,4u>::kSubblockPositions[v13];
    LODWORD(result) = (v16 - 4 * v24) & ~((v16 - 4 * (int)v24) >> 31);
    if (result >= 4) {
      uint64_t result = 4;
    }
    else {
      uint64_t result = result;
    }
    unsigned int v26 = (v17 - 2 * v23) & ~((v17 - 2 * (int)v23) >> 31);
    if (v26 >= 2) {
      unsigned int v26 = 2;
    }
    if (result) {
      BOOL v27 = v26 == 0;
    }
    else {
      BOOL v27 = 1;
    }
    if (v27)
    {
      char v22 = 0;
    }
    else
    {
      unsigned int v18 = &v63[8 * v23 + 2 * v24];
      int16x8_t v19 = v18[1];
      int16x8_t v20 = v18[4];
      int16x8_t v21 = v18[5];
      *uint64_t v14 = *v18;
      v14[1] = v20;
      v14[2] = v19;
      v14[3] = v21;
      v14 += 4;
      char v22 = 63;
    }
    *v15++ = v22;
    v13 += 2;
  }
  while (v13 != 16);
  return result;
}

unint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE9ELj4ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v50 = *MEMORY[0x263EF8340];
  AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressMacroblock(v49, *(void *)(a1 + 40), *(unsigned __int8 **)(a1 + 48));
  uint64_t v2 = *(unsigned int *)(a1 + 80);
  if (!v2 || !*(_DWORD *)(a1 + 84)) {
    return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v49, 64, *(void *)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
  }
  unint64_t v3 = (unint64_t)*(unsigned int *)(a1 + 72) << 6;
  uint64_t v4 = 8 * *(unsigned int *)(a1 + 76);
  v5 = &v49[0].i8[v3 + v4];
  uint64_t v6 = *(void *)(a1 + 56);
  uint64_t v7 = *(void *)(a1 + 64);
  unint64_t v8 = 8 * *(unsigned int *)(a1 + 84);
  if (v8 <= 1) {
    unint64_t v9 = 1;
  }
  else {
    unint64_t v9 = 8 * *(unsigned int *)(a1 + 84);
  }
  if (v9) {
    BOOL v10 = (v9 - 1) >> 32 == 0;
  }
  else {
    BOOL v10 = 0;
  }
  if (v10)
  {
    uint64_t v14 = &v49[0].i8[v3 + v4];
    uint64_t v15 = v9 & 0x7FFFFFFF8;
    if (v9 < 0x20)
    {
      uint64_t v16 = 0;
      int v17 = &v49[0].i8[v3 + v4];
      unsigned int v18 = *(uint64_t **)(a1 + 56);
      while (1)
      {
        int16x8_t v19 = (char *)(v6 + v7 * v16);
        int16x8_t v20 = &v5[64 * v16];
        if ((unint64_t)(&v14[64 * v16] - v19) > 0x1F)
        {
          v20 += v15;
          char v22 = v17;
          uint64_t v23 = v18;
          uint64_t v24 = v9 & 0x7FFFFFFF8;
          do
          {
            uint64_t v25 = *v23++;
            *(void *)char v22 = v25;
            v22 += 8;
            v24 -= 8;
          }
          while (v24);
          if (v9 == v15) {
            goto LABEL_17;
          }
          v19 += v15;
          int v21 = v9 & 0xFFFFFFF8;
        }
        else
        {
          int v21 = 0;
        }
        unsigned int v26 = v21 + 1;
        do
        {
          char v27 = *v19++;
          *v20++ = v27;
          BOOL v28 = v8 > v26++;
        }
        while (v28);
LABEL_17:
        ++v16;
        unsigned int v18 = (uint64_t *)((char *)v18 + v7);
        v17 += 64;
        if (v16 == v2) {
          return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v49, 64, *(void *)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
        }
      }
    }
    uint64_t v29 = 0;
    uint64_t v30 = v9 & 0x7FFFFFFE0;
    BOOL v31 = &v49[0].i8[v3 + v4];
    unsigned int v32 = &v49[1].i8[v3 + v4];
    BOOL v33 = (long long *)(v6 + 16);
    int v34 = (uint64_t *)(v6 + (v9 & 0x7FFFFFFE0));
    for (uint64_t i = &v31[v9 & 0x7FFFFFFE0]; ; i += 64)
    {
      uint64_t v36 = (char *)(v6 + v7 * v29);
      uint32x2_t v37 = &v5[64 * v29];
      if ((unint64_t)(&v14[64 * v29] - v36) >= 0x20)
      {
        char v41 = v33;
        BOOL v42 = v32;
        uint64_t v43 = v9 & 0x7FFFFFFE0;
        do
        {
          long long v44 = *v41;
          *((_OWORD *)v42 - 1) = *(v41 - 1);
          *(_OWORD *)BOOL v42 = v44;
          v42 += 32;
          v41 += 2;
          v43 -= 32;
        }
        while (v43);
        if (v9 == v30) {
          goto LABEL_28;
        }
        if ((v9 & 0x18) != 0)
        {
          v37 += v15;
          unint64_t v45 = i;
          uint64_t v46 = v34;
          unint64_t v47 = v15 - (v9 & 0x7FFFFFFE0);
          do
          {
            uint64_t v48 = *v46++;
            *(void *)unint64_t v45 = v48;
            v45 += 8;
            v47 -= 8;
          }
          while (v47);
          if (v9 == v15) {
            goto LABEL_28;
          }
          v36 += v15;
          int v38 = v9 & 0xFFFFFFF8;
        }
        else
        {
          v36 += v30;
          v37 += v30;
          int v38 = v9 & 0xFFFFFFE0;
        }
      }
      else
      {
        int v38 = 0;
      }
      unsigned int v39 = v38 + 1;
      do
      {
        char v40 = *v36++;
        *v37++ = v40;
        BOOL v28 = v8 > v39++;
      }
      while (v28);
LABEL_28:
      ++v29;
      v32 += 64;
      BOOL v33 = (long long *)((char *)v33 + v7);
      int v34 = (uint64_t *)((char *)v34 + v7);
      if (v29 == v2) {
        return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v49, 64, *(void *)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
      }
    }
  }
  for (uint64_t j = 0; j != v2; ++j)
  {
    uint64_t v12 = 0;
    do
    {
      v5[v12] = *(unsigned char *)(v6 + v12);
      ++v12;
    }
    while (v8 > v12);
    v5 += 64;
    v6 += v7;
  }
  return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v49, 64, *(void *)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE9ELj4ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v64 = *MEMORY[0x263EF8340];
  AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressMacroblock(v63, *(void *)(a1 + 40), *(unsigned __int8 **)(a1 + 48));
  uint64_t v2 = *(unsigned int *)(a1 + 80);
  if (v2 && *(_DWORD *)(a1 + 84))
  {
    unint64_t v3 = (unint64_t)*(unsigned int *)(a1 + 72) << 6;
    uint64_t v4 = 8 * *(unsigned int *)(a1 + 76);
    v5 = &v63[0].i8[v3 + v4];
    uint64_t v6 = *(void *)(a1 + 56);
    uint64_t v7 = *(void *)(a1 + 64);
    unint64_t v8 = 8 * *(unsigned int *)(a1 + 84);
    if (v8 <= 1) {
      unint64_t v9 = 1;
    }
    else {
      unint64_t v9 = 8 * *(unsigned int *)(a1 + 84);
    }
    if (v9) {
      BOOL v10 = (v9 - 1) >> 32 == 0;
    }
    else {
      BOOL v10 = 0;
    }
    if (!v10)
    {
      for (uint64_t i = 0; i != v2; ++i)
      {
        uint64_t v12 = 0;
        do
        {
          v5[v12] = *(unsigned char *)(v6 + v12);
          ++v12;
        }
        while (v8 > v12);
        v5 += 64;
        v6 += v7;
      }
      goto LABEL_14;
    }
    BOOL v28 = &v63[0].i8[v3 + v4];
    uint64_t v29 = v9 & 0x7FFFFFFF8;
    if (v9 < 0x20)
    {
      uint64_t v30 = 0;
      BOOL v31 = &v63[0].i8[v3 + v4];
      unsigned int v32 = *(uint64_t **)(a1 + 56);
      while (1)
      {
        BOOL v33 = (char *)(v6 + v7 * v30);
        int v34 = &v5[64 * v30];
        if ((unint64_t)(&v28[64 * v30] - v33) > 0x1F)
        {
          v34 += v29;
          uint64_t v36 = v31;
          uint32x2_t v37 = v32;
          uint64_t v38 = v9 & 0x7FFFFFFF8;
          do
          {
            uint64_t v39 = *v37++;
            *(void *)uint64_t v36 = v39;
            v36 += 8;
            v38 -= 8;
          }
          while (v38);
          if (v9 == v29) {
            goto LABEL_30;
          }
          v33 += v29;
          int v35 = v9 & 0xFFFFFFF8;
        }
        else
        {
          int v35 = 0;
        }
        unsigned int v40 = v35 + 1;
        do
        {
          char v41 = *v33++;
          *v34++ = v41;
          BOOL v42 = v8 > v40++;
        }
        while (v42);
LABEL_30:
        ++v30;
        unsigned int v32 = (uint64_t *)((char *)v32 + v7);
        v31 += 64;
        if (v30 == v2) {
          goto LABEL_14;
        }
      }
    }
    uint64_t v43 = 0;
    uint64_t v44 = v9 & 0x7FFFFFFE0;
    unint64_t v45 = &v63[0].i8[v3 + v4];
    uint64_t v46 = &v63[1].i8[v3 + v4];
    unint64_t v47 = (long long *)(v6 + 16);
    uint64_t v48 = (uint64_t *)(v6 + (v9 & 0x7FFFFFFE0));
    uint64_t v49 = &v45[v9 & 0x7FFFFFFE0];
    do
    {
      uint64_t v50 = (char *)(v6 + v7 * v43);
      int v51 = &v5[64 * v43];
      if ((unint64_t)(&v28[64 * v43] - v50) >= 0x20)
      {
        BOOL v55 = v47;
        __int32 v56 = v46;
        uint64_t v57 = v9 & 0x7FFFFFFE0;
        do
        {
          long long v58 = *v55;
          *((_OWORD *)v56 - 1) = *(v55 - 1);
          *(_OWORD *)__int32 v56 = v58;
          v56 += 32;
          v55 += 2;
          v57 -= 32;
        }
        while (v57);
        if (v9 == v44) {
          goto LABEL_41;
        }
        if ((v9 & 0x18) != 0)
        {
          v51 += v29;
          unsigned int v59 = v49;
          unsigned int v60 = v48;
          unint64_t v61 = v29 - (v9 & 0x7FFFFFFE0);
          do
          {
            uint64_t v62 = *v60++;
            *(void *)unsigned int v59 = v62;
            v59 += 8;
            v61 -= 8;
          }
          while (v61);
          if (v9 == v29) {
            goto LABEL_41;
          }
          v50 += v29;
          int v52 = v9 & 0xFFFFFFF8;
        }
        else
        {
          v50 += v44;
          v51 += v44;
          int v52 = v9 & 0xFFFFFFE0;
        }
      }
      else
      {
        int v52 = 0;
      }
      unsigned int v53 = v52 + 1;
      do
      {
        char v54 = *v50++;
        *v51++ = v54;
        BOOL v42 = v8 > v53++;
      }
      while (v42);
LABEL_41:
      ++v43;
      v46 += 64;
      unint64_t v47 = (long long *)((char *)v47 + v7);
      uint64_t v48 = (uint64_t *)((char *)v48 + v7);
      v49 += 64;
    }
    while (v43 != v2);
  }
LABEL_14:
  uint64_t v13 = 0;
  uint64_t v14 = *(int16x8_t **)(a1 + 40);
  uint64_t v15 = *(char **)(a1 + 48);
  int v16 = *(unsigned __int8 *)(a1 + 88);
  int v17 = *(unsigned __int8 *)(a1 + 89);
  do
  {
    uint64_t v23 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,4u>::kSubblockPositions[v13 + 1];
    uint64_t v24 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,4u>::kSubblockPositions[v13];
    LODWORD(result) = (v16 - 4 * v24) & ~((v16 - 4 * (int)v24) >> 31);
    if (result >= 4) {
      uint64_t result = 4;
    }
    else {
      uint64_t result = result;
    }
    unsigned int v26 = (v17 - 2 * v23) & ~((v17 - 2 * (int)v23) >> 31);
    if (v26 >= 2) {
      unsigned int v26 = 2;
    }
    if (result) {
      BOOL v27 = v26 == 0;
    }
    else {
      BOOL v27 = 1;
    }
    if (v27)
    {
      char v22 = 0;
    }
    else
    {
      unsigned int v18 = &v63[8 * v23 + 2 * v24];
      int16x8_t v19 = v18[1];
      int16x8_t v20 = v18[4];
      int16x8_t v21 = v18[5];
      *uint64_t v14 = *v18;
      v14[1] = v20;
      v14[2] = v19;
      v14[3] = v21;
      v14 += 4;
      char v22 = 63;
    }
    *v15++ = v22;
    v13 += 2;
  }
  while (v13 != 16);
  return result;
}

unint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE9ELj4ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v50 = *MEMORY[0x263EF8340];
  AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressMacroblock(v49, *(void *)(a1 + 40), *(unsigned __int8 **)(a1 + 48));
  uint64_t v2 = *(unsigned int *)(a1 + 80);
  if (!v2 || !*(_DWORD *)(a1 + 84)) {
    return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v49, 64, *(void *)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
  }
  unint64_t v3 = (unint64_t)*(unsigned int *)(a1 + 72) << 6;
  uint64_t v4 = 8 * *(unsigned int *)(a1 + 76);
  v5 = &v49[0].i8[v3 + v4];
  uint64_t v6 = *(void *)(a1 + 56);
  uint64_t v7 = *(void *)(a1 + 64);
  unint64_t v8 = 8 * *(unsigned int *)(a1 + 84);
  if (v8 <= 1) {
    unint64_t v9 = 1;
  }
  else {
    unint64_t v9 = 8 * *(unsigned int *)(a1 + 84);
  }
  if (v9) {
    BOOL v10 = (v9 - 1) >> 32 == 0;
  }
  else {
    BOOL v10 = 0;
  }
  if (v10)
  {
    uint64_t v14 = &v49[0].i8[v3 + v4];
    uint64_t v15 = v9 & 0x7FFFFFFF8;
    if (v9 < 0x20)
    {
      uint64_t v16 = 0;
      int v17 = &v49[0].i8[v3 + v4];
      unsigned int v18 = *(uint64_t **)(a1 + 56);
      while (1)
      {
        int16x8_t v19 = (char *)(v6 + v7 * v16);
        int16x8_t v20 = &v5[64 * v16];
        if ((unint64_t)(&v14[64 * v16] - v19) > 0x1F)
        {
          v20 += v15;
          char v22 = v17;
          uint64_t v23 = v18;
          uint64_t v24 = v9 & 0x7FFFFFFF8;
          do
          {
            uint64_t v25 = *v23++;
            *(void *)char v22 = v25;
            v22 += 8;
            v24 -= 8;
          }
          while (v24);
          if (v9 == v15) {
            goto LABEL_17;
          }
          v19 += v15;
          int v21 = v9 & 0xFFFFFFF8;
        }
        else
        {
          int v21 = 0;
        }
        unsigned int v26 = v21 + 1;
        do
        {
          char v27 = *v19++;
          *v20++ = v27;
          BOOL v28 = v8 > v26++;
        }
        while (v28);
LABEL_17:
        ++v16;
        unsigned int v18 = (uint64_t *)((char *)v18 + v7);
        v17 += 64;
        if (v16 == v2) {
          return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v49, 64, *(void *)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
        }
      }
    }
    uint64_t v29 = 0;
    uint64_t v30 = v9 & 0x7FFFFFFE0;
    BOOL v31 = &v49[0].i8[v3 + v4];
    unsigned int v32 = &v49[1].i8[v3 + v4];
    BOOL v33 = (long long *)(v6 + 16);
    int v34 = (uint64_t *)(v6 + (v9 & 0x7FFFFFFE0));
    for (uint64_t i = &v31[v9 & 0x7FFFFFFE0]; ; i += 64)
    {
      uint64_t v36 = (char *)(v6 + v7 * v29);
      uint32x2_t v37 = &v5[64 * v29];
      if ((unint64_t)(&v14[64 * v29] - v36) >= 0x20)
      {
        char v41 = v33;
        BOOL v42 = v32;
        uint64_t v43 = v9 & 0x7FFFFFFE0;
        do
        {
          long long v44 = *v41;
          *((_OWORD *)v42 - 1) = *(v41 - 1);
          *(_OWORD *)BOOL v42 = v44;
          v42 += 32;
          v41 += 2;
          v43 -= 32;
        }
        while (v43);
        if (v9 == v30) {
          goto LABEL_28;
        }
        if ((v9 & 0x18) != 0)
        {
          v37 += v15;
          unint64_t v45 = i;
          uint64_t v46 = v34;
          unint64_t v47 = v15 - (v9 & 0x7FFFFFFE0);
          do
          {
            uint64_t v48 = *v46++;
            *(void *)unint64_t v45 = v48;
            v45 += 8;
            v47 -= 8;
          }
          while (v47);
          if (v9 == v15) {
            goto LABEL_28;
          }
          v36 += v15;
          int v38 = v9 & 0xFFFFFFF8;
        }
        else
        {
          v36 += v30;
          v37 += v30;
          int v38 = v9 & 0xFFFFFFE0;
        }
      }
      else
      {
        int v38 = 0;
      }
      unsigned int v39 = v38 + 1;
      do
      {
        char v40 = *v36++;
        *v37++ = v40;
        BOOL v28 = v8 > v39++;
      }
      while (v28);
LABEL_28:
      ++v29;
      v32 += 64;
      BOOL v33 = (long long *)((char *)v33 + v7);
      int v34 = (uint64_t *)((char *)v34 + v7);
      if (v29 == v2) {
        return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v49, 64, *(void *)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
      }
    }
  }
  for (uint64_t j = 0; j != v2; ++j)
  {
    uint64_t v12 = 0;
    do
    {
      v5[v12] = *(unsigned char *)(v6 + v12);
      ++v12;
    }
    while (v8 > v12);
    v5 += 64;
    v6 += v7;
  }
  return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v49, 64, *(void *)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE7ELj4ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v64 = *MEMORY[0x263EF8340];
  AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressMacroblock(v63, *(void *)(a1 + 40), *(unsigned __int8 **)(a1 + 48));
  uint64_t v2 = *(unsigned int *)(a1 + 80);
  if (v2 && *(_DWORD *)(a1 + 84))
  {
    unint64_t v3 = (unint64_t)*(unsigned int *)(a1 + 72) << 6;
    uint64_t v4 = 8 * *(unsigned int *)(a1 + 76);
    v5 = &v63[0].i8[v3 + v4];
    uint64_t v6 = *(void *)(a1 + 56);
    uint64_t v7 = *(void *)(a1 + 64);
    unint64_t v8 = 8 * *(unsigned int *)(a1 + 84);
    if (v8 <= 1) {
      unint64_t v9 = 1;
    }
    else {
      unint64_t v9 = 8 * *(unsigned int *)(a1 + 84);
    }
    if (v9) {
      BOOL v10 = (v9 - 1) >> 32 == 0;
    }
    else {
      BOOL v10 = 0;
    }
    if (!v10)
    {
      for (uint64_t i = 0; i != v2; ++i)
      {
        uint64_t v12 = 0;
        do
        {
          v5[v12] = *(unsigned char *)(v6 + v12);
          ++v12;
        }
        while (v8 > v12);
        v5 += 64;
        v6 += v7;
      }
      goto LABEL_14;
    }
    BOOL v28 = &v63[0].i8[v3 + v4];
    uint64_t v29 = v9 & 0x7FFFFFFF8;
    if (v9 < 0x20)
    {
      uint64_t v30 = 0;
      BOOL v31 = &v63[0].i8[v3 + v4];
      unsigned int v32 = *(uint64_t **)(a1 + 56);
      while (1)
      {
        BOOL v33 = (char *)(v6 + v7 * v30);
        int v34 = &v5[64 * v30];
        if ((unint64_t)(&v28[64 * v30] - v33) > 0x1F)
        {
          v34 += v29;
          uint64_t v36 = v31;
          uint32x2_t v37 = v32;
          uint64_t v38 = v9 & 0x7FFFFFFF8;
          do
          {
            uint64_t v39 = *v37++;
            *(void *)uint64_t v36 = v39;
            v36 += 8;
            v38 -= 8;
          }
          while (v38);
          if (v9 == v29) {
            goto LABEL_30;
          }
          v33 += v29;
          int v35 = v9 & 0xFFFFFFF8;
        }
        else
        {
          int v35 = 0;
        }
        unsigned int v40 = v35 + 1;
        do
        {
          char v41 = *v33++;
          *v34++ = v41;
          BOOL v42 = v8 > v40++;
        }
        while (v42);
LABEL_30:
        ++v30;
        unsigned int v32 = (uint64_t *)((char *)v32 + v7);
        v31 += 64;
        if (v30 == v2) {
          goto LABEL_14;
        }
      }
    }
    uint64_t v43 = 0;
    uint64_t v44 = v9 & 0x7FFFFFFE0;
    unint64_t v45 = &v63[0].i8[v3 + v4];
    uint64_t v46 = &v63[1].i8[v3 + v4];
    unint64_t v47 = (long long *)(v6 + 16);
    uint64_t v48 = (uint64_t *)(v6 + (v9 & 0x7FFFFFFE0));
    uint64_t v49 = &v45[v9 & 0x7FFFFFFE0];
    do
    {
      uint64_t v50 = (char *)(v6 + v7 * v43);
      int v51 = &v5[64 * v43];
      if ((unint64_t)(&v28[64 * v43] - v50) >= 0x20)
      {
        BOOL v55 = v47;
        __int32 v56 = v46;
        uint64_t v57 = v9 & 0x7FFFFFFE0;
        do
        {
          long long v58 = *v55;
          *((_OWORD *)v56 - 1) = *(v55 - 1);
          *(_OWORD *)__int32 v56 = v58;
          v56 += 32;
          v55 += 2;
          v57 -= 32;
        }
        while (v57);
        if (v9 == v44) {
          goto LABEL_41;
        }
        if ((v9 & 0x18) != 0)
        {
          v51 += v29;
          unsigned int v59 = v49;
          unsigned int v60 = v48;
          unint64_t v61 = v29 - (v9 & 0x7FFFFFFE0);
          do
          {
            uint64_t v62 = *v60++;
            *(void *)unsigned int v59 = v62;
            v59 += 8;
            v61 -= 8;
          }
          while (v61);
          if (v9 == v29) {
            goto LABEL_41;
          }
          v50 += v29;
          int v52 = v9 & 0xFFFFFFF8;
        }
        else
        {
          v50 += v44;
          v51 += v44;
          int v52 = v9 & 0xFFFFFFE0;
        }
      }
      else
      {
        int v52 = 0;
      }
      unsigned int v53 = v52 + 1;
      do
      {
        char v54 = *v50++;
        *v51++ = v54;
        BOOL v42 = v8 > v53++;
      }
      while (v42);
LABEL_41:
      ++v43;
      v46 += 64;
      unint64_t v47 = (long long *)((char *)v47 + v7);
      uint64_t v48 = (uint64_t *)((char *)v48 + v7);
      v49 += 64;
    }
    while (v43 != v2);
  }
LABEL_14:
  uint64_t v13 = 0;
  uint64_t v14 = *(int16x8_t **)(a1 + 40);
  uint64_t v15 = *(char **)(a1 + 48);
  int v16 = *(unsigned __int8 *)(a1 + 88);
  int v17 = *(unsigned __int8 *)(a1 + 89);
  do
  {
    uint64_t v23 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,4u>::kSubblockPositions[v13 + 1];
    uint64_t v24 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,4u>::kSubblockPositions[v13];
    LODWORD(result) = (v16 - 4 * v24) & ~((v16 - 4 * (int)v24) >> 31);
    if (result >= 4) {
      uint64_t result = 4;
    }
    else {
      uint64_t result = result;
    }
    unsigned int v26 = (v17 - 2 * v23) & ~((v17 - 2 * (int)v23) >> 31);
    if (v26 >= 2) {
      unsigned int v26 = 2;
    }
    if (result) {
      BOOL v27 = v26 == 0;
    }
    else {
      BOOL v27 = 1;
    }
    if (v27)
    {
      char v22 = 0;
    }
    else
    {
      unsigned int v18 = &v63[8 * v23 + 2 * v24];
      int16x8_t v19 = v18[1];
      int16x8_t v20 = v18[4];
      int16x8_t v21 = v18[5];
      *uint64_t v14 = *v18;
      v14[1] = v20;
      v14[2] = v19;
      v14[3] = v21;
      v14 += 4;
      char v22 = 63;
    }
    *v15++ = v22;
    v13 += 2;
  }
  while (v13 != 16);
  return result;
}

unint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE7ELj4ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v50 = *MEMORY[0x263EF8340];
  AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressMacroblock(v49, *(void *)(a1 + 40), *(unsigned __int8 **)(a1 + 48));
  uint64_t v2 = *(unsigned int *)(a1 + 80);
  if (!v2 || !*(_DWORD *)(a1 + 84)) {
    return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v49, 64, *(void *)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
  }
  unint64_t v3 = (unint64_t)*(unsigned int *)(a1 + 72) << 6;
  uint64_t v4 = 8 * *(unsigned int *)(a1 + 76);
  v5 = &v49[0].i8[v3 + v4];
  uint64_t v6 = *(void *)(a1 + 56);
  uint64_t v7 = *(void *)(a1 + 64);
  unint64_t v8 = 8 * *(unsigned int *)(a1 + 84);
  if (v8 <= 1) {
    unint64_t v9 = 1;
  }
  else {
    unint64_t v9 = 8 * *(unsigned int *)(a1 + 84);
  }
  if (v9) {
    BOOL v10 = (v9 - 1) >> 32 == 0;
  }
  else {
    BOOL v10 = 0;
  }
  if (v10)
  {
    uint64_t v14 = &v49[0].i8[v3 + v4];
    uint64_t v15 = v9 & 0x7FFFFFFF8;
    if (v9 < 0x20)
    {
      uint64_t v16 = 0;
      int v17 = &v49[0].i8[v3 + v4];
      unsigned int v18 = *(uint64_t **)(a1 + 56);
      while (1)
      {
        int16x8_t v19 = (char *)(v6 + v7 * v16);
        int16x8_t v20 = &v5[64 * v16];
        if ((unint64_t)(&v14[64 * v16] - v19) > 0x1F)
        {
          v20 += v15;
          char v22 = v17;
          uint64_t v23 = v18;
          uint64_t v24 = v9 & 0x7FFFFFFF8;
          do
          {
            uint64_t v25 = *v23++;
            *(void *)char v22 = v25;
            v22 += 8;
            v24 -= 8;
          }
          while (v24);
          if (v9 == v15) {
            goto LABEL_17;
          }
          v19 += v15;
          int v21 = v9 & 0xFFFFFFF8;
        }
        else
        {
          int v21 = 0;
        }
        unsigned int v26 = v21 + 1;
        do
        {
          char v27 = *v19++;
          *v20++ = v27;
          BOOL v28 = v8 > v26++;
        }
        while (v28);
LABEL_17:
        ++v16;
        unsigned int v18 = (uint64_t *)((char *)v18 + v7);
        v17 += 64;
        if (v16 == v2) {
          return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v49, 64, *(void *)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
        }
      }
    }
    uint64_t v29 = 0;
    uint64_t v30 = v9 & 0x7FFFFFFE0;
    BOOL v31 = &v49[0].i8[v3 + v4];
    unsigned int v32 = &v49[1].i8[v3 + v4];
    BOOL v33 = (long long *)(v6 + 16);
    int v34 = (uint64_t *)(v6 + (v9 & 0x7FFFFFFE0));
    for (uint64_t i = &v31[v9 & 0x7FFFFFFE0]; ; i += 64)
    {
      uint64_t v36 = (char *)(v6 + v7 * v29);
      uint32x2_t v37 = &v5[64 * v29];
      if ((unint64_t)(&v14[64 * v29] - v36) >= 0x20)
      {
        char v41 = v33;
        BOOL v42 = v32;
        uint64_t v43 = v9 & 0x7FFFFFFE0;
        do
        {
          long long v44 = *v41;
          *((_OWORD *)v42 - 1) = *(v41 - 1);
          *(_OWORD *)BOOL v42 = v44;
          v42 += 32;
          v41 += 2;
          v43 -= 32;
        }
        while (v43);
        if (v9 == v30) {
          goto LABEL_28;
        }
        if ((v9 & 0x18) != 0)
        {
          v37 += v15;
          unint64_t v45 = i;
          uint64_t v46 = v34;
          unint64_t v47 = v15 - (v9 & 0x7FFFFFFE0);
          do
          {
            uint64_t v48 = *v46++;
            *(void *)unint64_t v45 = v48;
            v45 += 8;
            v47 -= 8;
          }
          while (v47);
          if (v9 == v15) {
            goto LABEL_28;
          }
          v36 += v15;
          int v38 = v9 & 0xFFFFFFF8;
        }
        else
        {
          v36 += v30;
          v37 += v30;
          int v38 = v9 & 0xFFFFFFE0;
        }
      }
      else
      {
        int v38 = 0;
      }
      unsigned int v39 = v38 + 1;
      do
      {
        char v40 = *v36++;
        *v37++ = v40;
        BOOL v28 = v8 > v39++;
      }
      while (v28);
LABEL_28:
      ++v29;
      v32 += 64;
      BOOL v33 = (long long *)((char *)v33 + v7);
      int v34 = (uint64_t *)((char *)v34 + v7);
      if (v29 == v2) {
        return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v49, 64, *(void *)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
      }
    }
  }
  for (uint64_t j = 0; j != v2; ++j)
  {
    uint64_t v12 = 0;
    do
    {
      v5[v12] = *(unsigned char *)(v6 + v12);
      ++v12;
    }
    while (v8 > v12);
    v5 += 64;
    v6 += v7;
  }
  return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v49, 64, *(void *)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE7ELj4ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v64 = *MEMORY[0x263EF8340];
  AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressMacroblock(v63, *(void *)(a1 + 40), *(unsigned __int8 **)(a1 + 48));
  uint64_t v2 = *(unsigned int *)(a1 + 80);
  if (v2 && *(_DWORD *)(a1 + 84))
  {
    unint64_t v3 = (unint64_t)*(unsigned int *)(a1 + 72) << 6;
    uint64_t v4 = 8 * *(unsigned int *)(a1 + 76);
    v5 = &v63[0].i8[v3 + v4];
    uint64_t v6 = *(void *)(a1 + 56);
    uint64_t v7 = *(void *)(a1 + 64);
    unint64_t v8 = 8 * *(unsigned int *)(a1 + 84);
    if (v8 <= 1) {
      unint64_t v9 = 1;
    }
    else {
      unint64_t v9 = 8 * *(unsigned int *)(a1 + 84);
    }
    if (v9) {
      BOOL v10 = (v9 - 1) >> 32 == 0;
    }
    else {
      BOOL v10 = 0;
    }
    if (!v10)
    {
      for (uint64_t i = 0; i != v2; ++i)
      {
        uint64_t v12 = 0;
        do
        {
          v5[v12] = *(unsigned char *)(v6 + v12);
          ++v12;
        }
        while (v8 > v12);
        v5 += 64;
        v6 += v7;
      }
      goto LABEL_14;
    }
    BOOL v28 = &v63[0].i8[v3 + v4];
    uint64_t v29 = v9 & 0x7FFFFFFF8;
    if (v9 < 0x20)
    {
      uint64_t v30 = 0;
      BOOL v31 = &v63[0].i8[v3 + v4];
      unsigned int v32 = *(uint64_t **)(a1 + 56);
      while (1)
      {
        BOOL v33 = (char *)(v6 + v7 * v30);
        int v34 = &v5[64 * v30];
        if ((unint64_t)(&v28[64 * v30] - v33) > 0x1F)
        {
          v34 += v29;
          uint64_t v36 = v31;
          uint32x2_t v37 = v32;
          uint64_t v38 = v9 & 0x7FFFFFFF8;
          do
          {
            uint64_t v39 = *v37++;
            *(void *)uint64_t v36 = v39;
            v36 += 8;
            v38 -= 8;
          }
          while (v38);
          if (v9 == v29) {
            goto LABEL_30;
          }
          v33 += v29;
          int v35 = v9 & 0xFFFFFFF8;
        }
        else
        {
          int v35 = 0;
        }
        unsigned int v40 = v35 + 1;
        do
        {
          char v41 = *v33++;
          *v34++ = v41;
          BOOL v42 = v8 > v40++;
        }
        while (v42);
LABEL_30:
        ++v30;
        unsigned int v32 = (uint64_t *)((char *)v32 + v7);
        v31 += 64;
        if (v30 == v2) {
          goto LABEL_14;
        }
      }
    }
    uint64_t v43 = 0;
    uint64_t v44 = v9 & 0x7FFFFFFE0;
    unint64_t v45 = &v63[0].i8[v3 + v4];
    uint64_t v46 = &v63[1].i8[v3 + v4];
    unint64_t v47 = (long long *)(v6 + 16);
    uint64_t v48 = (uint64_t *)(v6 + (v9 & 0x7FFFFFFE0));
    uint64_t v49 = &v45[v9 & 0x7FFFFFFE0];
    do
    {
      uint64_t v50 = (char *)(v6 + v7 * v43);
      int v51 = &v5[64 * v43];
      if ((unint64_t)(&v28[64 * v43] - v50) >= 0x20)
      {
        BOOL v55 = v47;
        __int32 v56 = v46;
        uint64_t v57 = v9 & 0x7FFFFFFE0;
        do
        {
          long long v58 = *v55;
          *((_OWORD *)v56 - 1) = *(v55 - 1);
          *(_OWORD *)__int32 v56 = v58;
          v56 += 32;
          v55 += 2;
          v57 -= 32;
        }
        while (v57);
        if (v9 == v44) {
          goto LABEL_41;
        }
        if ((v9 & 0x18) != 0)
        {
          v51 += v29;
          unsigned int v59 = v49;
          unsigned int v60 = v48;
          unint64_t v61 = v29 - (v9 & 0x7FFFFFFE0);
          do
          {
            uint64_t v62 = *v60++;
            *(void *)unsigned int v59 = v62;
            v59 += 8;
            v61 -= 8;
          }
          while (v61);
          if (v9 == v29) {
            goto LABEL_41;
          }
          v50 += v29;
          int v52 = v9 & 0xFFFFFFF8;
        }
        else
        {
          v50 += v44;
          v51 += v44;
          int v52 = v9 & 0xFFFFFFE0;
        }
      }
      else
      {
        int v52 = 0;
      }
      unsigned int v53 = v52 + 1;
      do
      {
        char v54 = *v50++;
        *v51++ = v54;
        BOOL v42 = v8 > v53++;
      }
      while (v42);
LABEL_41:
      ++v43;
      v46 += 64;
      unint64_t v47 = (long long *)((char *)v47 + v7);
      uint64_t v48 = (uint64_t *)((char *)v48 + v7);
      v49 += 64;
    }
    while (v43 != v2);
  }
LABEL_14:
  uint64_t v13 = 0;
  uint64_t v14 = *(int16x8_t **)(a1 + 40);
  uint64_t v15 = *(char **)(a1 + 48);
  int v16 = *(unsigned __int8 *)(a1 + 88);
  int v17 = *(unsigned __int8 *)(a1 + 89);
  do
  {
    uint64_t v23 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,4u>::kSubblockPositions[v13 + 1];
    uint64_t v24 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,4u>::kSubblockPositions[v13];
    LODWORD(result) = (v16 - 4 * v24) & ~((v16 - 4 * (int)v24) >> 31);
    if (result >= 4) {
      uint64_t result = 4;
    }
    else {
      uint64_t result = result;
    }
    unsigned int v26 = (v17 - 2 * v23) & ~((v17 - 2 * (int)v23) >> 31);
    if (v26 >= 2) {
      unsigned int v26 = 2;
    }
    if (result) {
      BOOL v27 = v26 == 0;
    }
    else {
      BOOL v27 = 1;
    }
    if (v27)
    {
      char v22 = 0;
    }
    else
    {
      unsigned int v18 = &v63[8 * v23 + 2 * v24];
      int16x8_t v19 = v18[1];
      int16x8_t v20 = v18[4];
      int16x8_t v21 = v18[5];
      *uint64_t v14 = *v18;
      v14[1] = v20;
      v14[2] = v19;
      v14[3] = v21;
      v14 += 4;
      char v22 = 63;
    }
    *v15++ = v22;
    v13 += 2;
  }
  while (v13 != 16);
  return result;
}

unint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE7ELj4ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v50 = *MEMORY[0x263EF8340];
  AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressMacroblock(v49, *(void *)(a1 + 40), *(unsigned __int8 **)(a1 + 48));
  uint64_t v2 = *(unsigned int *)(a1 + 80);
  if (!v2 || !*(_DWORD *)(a1 + 84)) {
    return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v49, 64, *(void *)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
  }
  unint64_t v3 = (unint64_t)*(unsigned int *)(a1 + 72) << 6;
  uint64_t v4 = 8 * *(unsigned int *)(a1 + 76);
  v5 = &v49[0].i8[v3 + v4];
  uint64_t v6 = *(void *)(a1 + 56);
  uint64_t v7 = *(void *)(a1 + 64);
  unint64_t v8 = 8 * *(unsigned int *)(a1 + 84);
  if (v8 <= 1) {
    unint64_t v9 = 1;
  }
  else {
    unint64_t v9 = 8 * *(unsigned int *)(a1 + 84);
  }
  if (v9) {
    BOOL v10 = (v9 - 1) >> 32 == 0;
  }
  else {
    BOOL v10 = 0;
  }
  if (v10)
  {
    uint64_t v14 = &v49[0].i8[v3 + v4];
    uint64_t v15 = v9 & 0x7FFFFFFF8;
    if (v9 < 0x20)
    {
      uint64_t v16 = 0;
      int v17 = &v49[0].i8[v3 + v4];
      unsigned int v18 = *(uint64_t **)(a1 + 56);
      while (1)
      {
        int16x8_t v19 = (char *)(v6 + v7 * v16);
        int16x8_t v20 = &v5[64 * v16];
        if ((unint64_t)(&v14[64 * v16] - v19) > 0x1F)
        {
          v20 += v15;
          char v22 = v17;
          uint64_t v23 = v18;
          uint64_t v24 = v9 & 0x7FFFFFFF8;
          do
          {
            uint64_t v25 = *v23++;
            *(void *)char v22 = v25;
            v22 += 8;
            v24 -= 8;
          }
          while (v24);
          if (v9 == v15) {
            goto LABEL_17;
          }
          v19 += v15;
          int v21 = v9 & 0xFFFFFFF8;
        }
        else
        {
          int v21 = 0;
        }
        unsigned int v26 = v21 + 1;
        do
        {
          char v27 = *v19++;
          *v20++ = v27;
          BOOL v28 = v8 > v26++;
        }
        while (v28);
LABEL_17:
        ++v16;
        unsigned int v18 = (uint64_t *)((char *)v18 + v7);
        v17 += 64;
        if (v16 == v2) {
          return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v49, 64, *(void *)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
        }
      }
    }
    uint64_t v29 = 0;
    uint64_t v30 = v9 & 0x7FFFFFFE0;
    BOOL v31 = &v49[0].i8[v3 + v4];
    unsigned int v32 = &v49[1].i8[v3 + v4];
    BOOL v33 = (long long *)(v6 + 16);
    int v34 = (uint64_t *)(v6 + (v9 & 0x7FFFFFFE0));
    for (uint64_t i = &v31[v9 & 0x7FFFFFFE0]; ; i += 64)
    {
      uint64_t v36 = (char *)(v6 + v7 * v29);
      uint32x2_t v37 = &v5[64 * v29];
      if ((unint64_t)(&v14[64 * v29] - v36) >= 0x20)
      {
        char v41 = v33;
        BOOL v42 = v32;
        uint64_t v43 = v9 & 0x7FFFFFFE0;
        do
        {
          long long v44 = *v41;
          *((_OWORD *)v42 - 1) = *(v41 - 1);
          *(_OWORD *)BOOL v42 = v44;
          v42 += 32;
          v41 += 2;
          v43 -= 32;
        }
        while (v43);
        if (v9 == v30) {
          goto LABEL_28;
        }
        if ((v9 & 0x18) != 0)
        {
          v37 += v15;
          unint64_t v45 = i;
          uint64_t v46 = v34;
          unint64_t v47 = v15 - (v9 & 0x7FFFFFFE0);
          do
          {
            uint64_t v48 = *v46++;
            *(void *)unint64_t v45 = v48;
            v45 += 8;
            v47 -= 8;
          }
          while (v47);
          if (v9 == v15) {
            goto LABEL_28;
          }
          v36 += v15;
          int v38 = v9 & 0xFFFFFFF8;
        }
        else
        {
          v36 += v30;
          v37 += v30;
          int v38 = v9 & 0xFFFFFFE0;
        }
      }
      else
      {
        int v38 = 0;
      }
      unsigned int v39 = v38 + 1;
      do
      {
        char v40 = *v36++;
        *v37++ = v40;
        BOOL v28 = v8 > v39++;
      }
      while (v28);
LABEL_28:
      ++v29;
      v32 += 64;
      BOOL v33 = (long long *)((char *)v33 + v7);
      int v34 = (uint64_t *)((char *)v34 + v7);
      if (v29 == v2) {
        return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v49, 64, *(void *)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
      }
    }
  }
  for (uint64_t j = 0; j != v2; ++j)
  {
    uint64_t v12 = 0;
    do
    {
      v5[v12] = *(unsigned char *)(v6 + v12);
      ++v12;
    }
    while (v8 > v12);
    v5 += 64;
    v6 += v7;
  }
  return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v49, 64, *(void *)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE8ELj4ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v64 = *MEMORY[0x263EF8340];
  AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressMacroblock(v63, *(void *)(a1 + 40), *(unsigned __int8 **)(a1 + 48));
  uint64_t v2 = *(unsigned int *)(a1 + 80);
  if (v2 && *(_DWORD *)(a1 + 84))
  {
    unint64_t v3 = (unint64_t)*(unsigned int *)(a1 + 72) << 6;
    uint64_t v4 = 8 * *(unsigned int *)(a1 + 76);
    v5 = &v63[0].i8[v3 + v4];
    uint64_t v6 = *(void *)(a1 + 56);
    uint64_t v7 = *(void *)(a1 + 64);
    unint64_t v8 = 8 * *(unsigned int *)(a1 + 84);
    if (v8 <= 1) {
      unint64_t v9 = 1;
    }
    else {
      unint64_t v9 = 8 * *(unsigned int *)(a1 + 84);
    }
    if (v9) {
      BOOL v10 = (v9 - 1) >> 32 == 0;
    }
    else {
      BOOL v10 = 0;
    }
    if (!v10)
    {
      for (uint64_t i = 0; i != v2; ++i)
      {
        uint64_t v12 = 0;
        do
        {
          v5[v12] = *(unsigned char *)(v6 + v12);
          ++v12;
        }
        while (v8 > v12);
        v5 += 64;
        v6 += v7;
      }
      goto LABEL_14;
    }
    BOOL v28 = &v63[0].i8[v3 + v4];
    uint64_t v29 = v9 & 0x7FFFFFFF8;
    if (v9 < 0x20)
    {
      uint64_t v30 = 0;
      BOOL v31 = &v63[0].i8[v3 + v4];
      unsigned int v32 = *(uint64_t **)(a1 + 56);
      while (1)
      {
        BOOL v33 = (char *)(v6 + v7 * v30);
        int v34 = &v5[64 * v30];
        if ((unint64_t)(&v28[64 * v30] - v33) > 0x1F)
        {
          v34 += v29;
          uint64_t v36 = v31;
          uint32x2_t v37 = v32;
          uint64_t v38 = v9 & 0x7FFFFFFF8;
          do
          {
            uint64_t v39 = *v37++;
            *(void *)uint64_t v36 = v39;
            v36 += 8;
            v38 -= 8;
          }
          while (v38);
          if (v9 == v29) {
            goto LABEL_30;
          }
          v33 += v29;
          int v35 = v9 & 0xFFFFFFF8;
        }
        else
        {
          int v35 = 0;
        }
        unsigned int v40 = v35 + 1;
        do
        {
          char v41 = *v33++;
          *v34++ = v41;
          BOOL v42 = v8 > v40++;
        }
        while (v42);
LABEL_30:
        ++v30;
        unsigned int v32 = (uint64_t *)((char *)v32 + v7);
        v31 += 64;
        if (v30 == v2) {
          goto LABEL_14;
        }
      }
    }
    uint64_t v43 = 0;
    uint64_t v44 = v9 & 0x7FFFFFFE0;
    unint64_t v45 = &v63[0].i8[v3 + v4];
    uint64_t v46 = &v63[1].i8[v3 + v4];
    unint64_t v47 = (long long *)(v6 + 16);
    uint64_t v48 = (uint64_t *)(v6 + (v9 & 0x7FFFFFFE0));
    uint64_t v49 = &v45[v9 & 0x7FFFFFFE0];
    do
    {
      uint64_t v50 = (char *)(v6 + v7 * v43);
      int v51 = &v5[64 * v43];
      if ((unint64_t)(&v28[64 * v43] - v50) >= 0x20)
      {
        BOOL v55 = v47;
        __int32 v56 = v46;
        uint64_t v57 = v9 & 0x7FFFFFFE0;
        do
        {
          long long v58 = *v55;
          *((_OWORD *)v56 - 1) = *(v55 - 1);
          *(_OWORD *)__int32 v56 = v58;
          v56 += 32;
          v55 += 2;
          v57 -= 32;
        }
        while (v57);
        if (v9 == v44) {
          goto LABEL_41;
        }
        if ((v9 & 0x18) != 0)
        {
          v51 += v29;
          unsigned int v59 = v49;
          unsigned int v60 = v48;
          unint64_t v61 = v29 - (v9 & 0x7FFFFFFE0);
          do
          {
            uint64_t v62 = *v60++;
            *(void *)unsigned int v59 = v62;
            v59 += 8;
            v61 -= 8;
          }
          while (v61);
          if (v9 == v29) {
            goto LABEL_41;
          }
          v50 += v29;
          int v52 = v9 & 0xFFFFFFF8;
        }
        else
        {
          v50 += v44;
          v51 += v44;
          int v52 = v9 & 0xFFFFFFE0;
        }
      }
      else
      {
        int v52 = 0;
      }
      unsigned int v53 = v52 + 1;
      do
      {
        char v54 = *v50++;
        *v51++ = v54;
        BOOL v42 = v8 > v53++;
      }
      while (v42);
LABEL_41:
      ++v43;
      v46 += 64;
      unint64_t v47 = (long long *)((char *)v47 + v7);
      uint64_t v48 = (uint64_t *)((char *)v48 + v7);
      v49 += 64;
    }
    while (v43 != v2);
  }
LABEL_14:
  uint64_t v13 = 0;
  uint64_t v14 = *(int16x8_t **)(a1 + 40);
  uint64_t v15 = *(char **)(a1 + 48);
  int v16 = *(unsigned __int8 *)(a1 + 88);
  int v17 = *(unsigned __int8 *)(a1 + 89);
  do
  {
    uint64_t v23 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,4u>::kSubblockPositions[v13 + 1];
    uint64_t v24 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,4u>::kSubblockPositions[v13];
    LODWORD(result) = (v16 - 4 * v24) & ~((v16 - 4 * (int)v24) >> 31);
    if (result >= 4) {
      uint64_t result = 4;
    }
    else {
      uint64_t result = result;
    }
    unsigned int v26 = (v17 - 2 * v23) & ~((v17 - 2 * (int)v23) >> 31);
    if (v26 >= 2) {
      unsigned int v26 = 2;
    }
    if (result) {
      BOOL v27 = v26 == 0;
    }
    else {
      BOOL v27 = 1;
    }
    if (v27)
    {
      char v22 = 0;
    }
    else
    {
      unsigned int v18 = &v63[8 * v23 + 2 * v24];
      int16x8_t v19 = v18[1];
      int16x8_t v20 = v18[4];
      int16x8_t v21 = v18[5];
      *uint64_t v14 = *v18;
      v14[1] = v20;
      v14[2] = v19;
      v14[3] = v21;
      v14 += 4;
      char v22 = 63;
    }
    *v15++ = v22;
    v13 += 2;
  }
  while (v13 != 16);
  return result;
}

unint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE8ELj4ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v50 = *MEMORY[0x263EF8340];
  AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressMacroblock(v49, *(void *)(a1 + 40), *(unsigned __int8 **)(a1 + 48));
  uint64_t v2 = *(unsigned int *)(a1 + 80);
  if (!v2 || !*(_DWORD *)(a1 + 84)) {
    return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v49, 64, *(uint16x8_t **)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
  }
  unint64_t v3 = (unint64_t)*(unsigned int *)(a1 + 72) << 6;
  uint64_t v4 = 8 * *(unsigned int *)(a1 + 76);
  v5 = &v49[0].i8[v3 + v4];
  uint64_t v6 = *(void *)(a1 + 56);
  uint64_t v7 = *(void *)(a1 + 64);
  unint64_t v8 = 8 * *(unsigned int *)(a1 + 84);
  if (v8 <= 1) {
    unint64_t v9 = 1;
  }
  else {
    unint64_t v9 = 8 * *(unsigned int *)(a1 + 84);
  }
  if (v9) {
    BOOL v10 = (v9 - 1) >> 32 == 0;
  }
  else {
    BOOL v10 = 0;
  }
  if (v10)
  {
    uint64_t v14 = &v49[0].i8[v3 + v4];
    uint64_t v15 = v9 & 0x7FFFFFFF8;
    if (v9 < 0x20)
    {
      uint64_t v16 = 0;
      int v17 = &v49[0].i8[v3 + v4];
      unsigned int v18 = *(uint64_t **)(a1 + 56);
      while (1)
      {
        int16x8_t v19 = (char *)(v6 + v7 * v16);
        int16x8_t v20 = &v5[64 * v16];
        if ((unint64_t)(&v14[64 * v16] - v19) > 0x1F)
        {
          v20 += v15;
          char v22 = v17;
          uint64_t v23 = v18;
          uint64_t v24 = v9 & 0x7FFFFFFF8;
          do
          {
            uint64_t v25 = *v23++;
            *(void *)char v22 = v25;
            v22 += 8;
            v24 -= 8;
          }
          while (v24);
          if (v9 == v15) {
            goto LABEL_17;
          }
          v19 += v15;
          int v21 = v9 & 0xFFFFFFF8;
        }
        else
        {
          int v21 = 0;
        }
        unsigned int v26 = v21 + 1;
        do
        {
          char v27 = *v19++;
          *v20++ = v27;
          BOOL v28 = v8 > v26++;
        }
        while (v28);
LABEL_17:
        ++v16;
        unsigned int v18 = (uint64_t *)((char *)v18 + v7);
        v17 += 64;
        if (v16 == v2) {
          return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v49, 64, *(uint16x8_t **)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
        }
      }
    }
    uint64_t v29 = 0;
    uint64_t v30 = v9 & 0x7FFFFFFE0;
    BOOL v31 = &v49[0].i8[v3 + v4];
    unsigned int v32 = &v49[1].i8[v3 + v4];
    BOOL v33 = (long long *)(v6 + 16);
    int v34 = (uint64_t *)(v6 + (v9 & 0x7FFFFFFE0));
    for (uint64_t i = &v31[v9 & 0x7FFFFFFE0]; ; i += 64)
    {
      uint64_t v36 = (char *)(v6 + v7 * v29);
      uint32x2_t v37 = &v5[64 * v29];
      if ((unint64_t)(&v14[64 * v29] - v36) >= 0x20)
      {
        char v41 = v33;
        BOOL v42 = v32;
        uint64_t v43 = v9 & 0x7FFFFFFE0;
        do
        {
          long long v44 = *v41;
          *((_OWORD *)v42 - 1) = *(v41 - 1);
          *(_OWORD *)BOOL v42 = v44;
          v42 += 32;
          v41 += 2;
          v43 -= 32;
        }
        while (v43);
        if (v9 == v30) {
          goto LABEL_28;
        }
        if ((v9 & 0x18) != 0)
        {
          v37 += v15;
          unint64_t v45 = i;
          uint64_t v46 = v34;
          unint64_t v47 = v15 - (v9 & 0x7FFFFFFE0);
          do
          {
            uint64_t v48 = *v46++;
            *(void *)unint64_t v45 = v48;
            v45 += 8;
            v47 -= 8;
          }
          while (v47);
          if (v9 == v15) {
            goto LABEL_28;
          }
          v36 += v15;
          int v38 = v9 & 0xFFFFFFF8;
        }
        else
        {
          v36 += v30;
          v37 += v30;
          int v38 = v9 & 0xFFFFFFE0;
        }
      }
      else
      {
        int v38 = 0;
      }
      unsigned int v39 = v38 + 1;
      do
      {
        char v40 = *v36++;
        *v37++ = v40;
        BOOL v28 = v8 > v39++;
      }
      while (v28);
LABEL_28:
      ++v29;
      v32 += 64;
      BOOL v33 = (long long *)((char *)v33 + v7);
      int v34 = (uint64_t *)((char *)v34 + v7);
      if (v29 == v2) {
        return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v49, 64, *(uint16x8_t **)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
      }
    }
  }
  for (uint64_t j = 0; j != v2; ++j)
  {
    uint64_t v12 = 0;
    do
    {
      v5[v12] = *(unsigned char *)(v6 + v12);
      ++v12;
    }
    while (v8 > v12);
    v5 += 64;
    v6 += v7;
  }
  return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v49, 64, *(uint16x8_t **)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE8ELj4ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v64 = *MEMORY[0x263EF8340];
  AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressMacroblock(v63, *(void *)(a1 + 40), *(unsigned __int8 **)(a1 + 48));
  uint64_t v2 = *(unsigned int *)(a1 + 80);
  if (v2 && *(_DWORD *)(a1 + 84))
  {
    unint64_t v3 = (unint64_t)*(unsigned int *)(a1 + 72) << 6;
    uint64_t v4 = 8 * *(unsigned int *)(a1 + 76);
    v5 = &v63[0].i8[v3 + v4];
    uint64_t v6 = *(void *)(a1 + 56);
    uint64_t v7 = *(void *)(a1 + 64);
    unint64_t v8 = 8 * *(unsigned int *)(a1 + 84);
    if (v8 <= 1) {
      unint64_t v9 = 1;
    }
    else {
      unint64_t v9 = 8 * *(unsigned int *)(a1 + 84);
    }
    if (v9) {
      BOOL v10 = (v9 - 1) >> 32 == 0;
    }
    else {
      BOOL v10 = 0;
    }
    if (!v10)
    {
      for (uint64_t i = 0; i != v2; ++i)
      {
        uint64_t v12 = 0;
        do
        {
          v5[v12] = *(unsigned char *)(v6 + v12);
          ++v12;
        }
        while (v8 > v12);
        v5 += 64;
        v6 += v7;
      }
      goto LABEL_14;
    }
    BOOL v28 = &v63[0].i8[v3 + v4];
    uint64_t v29 = v9 & 0x7FFFFFFF8;
    if (v9 < 0x20)
    {
      uint64_t v30 = 0;
      BOOL v31 = &v63[0].i8[v3 + v4];
      unsigned int v32 = *(uint64_t **)(a1 + 56);
      while (1)
      {
        BOOL v33 = (char *)(v6 + v7 * v30);
        int v34 = &v5[64 * v30];
        if ((unint64_t)(&v28[64 * v30] - v33) > 0x1F)
        {
          v34 += v29;
          uint64_t v36 = v31;
          uint32x2_t v37 = v32;
          uint64_t v38 = v9 & 0x7FFFFFFF8;
          do
          {
            uint64_t v39 = *v37++;
            *(void *)uint64_t v36 = v39;
            v36 += 8;
            v38 -= 8;
          }
          while (v38);
          if (v9 == v29) {
            goto LABEL_30;
          }
          v33 += v29;
          int v35 = v9 & 0xFFFFFFF8;
        }
        else
        {
          int v35 = 0;
        }
        unsigned int v40 = v35 + 1;
        do
        {
          char v41 = *v33++;
          *v34++ = v41;
          BOOL v42 = v8 > v40++;
        }
        while (v42);
LABEL_30:
        ++v30;
        unsigned int v32 = (uint64_t *)((char *)v32 + v7);
        v31 += 64;
        if (v30 == v2) {
          goto LABEL_14;
        }
      }
    }
    uint64_t v43 = 0;
    uint64_t v44 = v9 & 0x7FFFFFFE0;
    unint64_t v45 = &v63[0].i8[v3 + v4];
    uint64_t v46 = &v63[1].i8[v3 + v4];
    unint64_t v47 = (long long *)(v6 + 16);
    uint64_t v48 = (uint64_t *)(v6 + (v9 & 0x7FFFFFFE0));
    uint64_t v49 = &v45[v9 & 0x7FFFFFFE0];
    do
    {
      uint64_t v50 = (char *)(v6 + v7 * v43);
      int v51 = &v5[64 * v43];
      if ((unint64_t)(&v28[64 * v43] - v50) >= 0x20)
      {
        BOOL v55 = v47;
        __int32 v56 = v46;
        uint64_t v57 = v9 & 0x7FFFFFFE0;
        do
        {
          long long v58 = *v55;
          *((_OWORD *)v56 - 1) = *(v55 - 1);
          *(_OWORD *)__int32 v56 = v58;
          v56 += 32;
          v55 += 2;
          v57 -= 32;
        }
        while (v57);
        if (v9 == v44) {
          goto LABEL_41;
        }
        if ((v9 & 0x18) != 0)
        {
          v51 += v29;
          unsigned int v59 = v49;
          unsigned int v60 = v48;
          unint64_t v61 = v29 - (v9 & 0x7FFFFFFE0);
          do
          {
            uint64_t v62 = *v60++;
            *(void *)unsigned int v59 = v62;
            v59 += 8;
            v61 -= 8;
          }
          while (v61);
          if (v9 == v29) {
            goto LABEL_41;
          }
          v50 += v29;
          int v52 = v9 & 0xFFFFFFF8;
        }
        else
        {
          v50 += v44;
          v51 += v44;
          int v52 = v9 & 0xFFFFFFE0;
        }
      }
      else
      {
        int v52 = 0;
      }
      unsigned int v53 = v52 + 1;
      do
      {
        char v54 = *v50++;
        *v51++ = v54;
        BOOL v42 = v8 > v53++;
      }
      while (v42);
LABEL_41:
      ++v43;
      v46 += 64;
      unint64_t v47 = (long long *)((char *)v47 + v7);
      uint64_t v48 = (uint64_t *)((char *)v48 + v7);
      v49 += 64;
    }
    while (v43 != v2);
  }
LABEL_14:
  uint64_t v13 = 0;
  uint64_t v14 = *(int16x8_t **)(a1 + 40);
  uint64_t v15 = *(char **)(a1 + 48);
  int v16 = *(unsigned __int8 *)(a1 + 88);
  int v17 = *(unsigned __int8 *)(a1 + 89);
  do
  {
    uint64_t v23 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,4u>::kSubblockPositions[v13 + 1];
    uint64_t v24 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,4u>::kSubblockPositions[v13];
    LODWORD(result) = (v16 - 4 * v24) & ~((v16 - 4 * (int)v24) >> 31);
    if (result >= 4) {
      uint64_t result = 4;
    }
    else {
      uint64_t result = result;
    }
    unsigned int v26 = (v17 - 2 * v23) & ~((v17 - 2 * (int)v23) >> 31);
    if (v26 >= 2) {
      unsigned int v26 = 2;
    }
    if (result) {
      BOOL v27 = v26 == 0;
    }
    else {
      BOOL v27 = 1;
    }
    if (v27)
    {
      char v22 = 0;
    }
    else
    {
      unsigned int v18 = &v63[8 * v23 + 2 * v24];
      int16x8_t v19 = v18[1];
      int16x8_t v20 = v18[4];
      int16x8_t v21 = v18[5];
      *uint64_t v14 = *v18;
      v14[1] = v20;
      v14[2] = v19;
      v14[3] = v21;
      v14 += 4;
      char v22 = 63;
    }
    *v15++ = v22;
    v13 += 2;
  }
  while (v13 != 16);
  return result;
}

unint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE8ELj4ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v50 = *MEMORY[0x263EF8340];
  AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressMacroblock(v49, *(void *)(a1 + 40), *(unsigned __int8 **)(a1 + 48));
  uint64_t v2 = *(unsigned int *)(a1 + 80);
  if (!v2 || !*(_DWORD *)(a1 + 84)) {
    return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v49, 64, *(uint16x8_t **)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
  }
  unint64_t v3 = (unint64_t)*(unsigned int *)(a1 + 72) << 6;
  uint64_t v4 = 8 * *(unsigned int *)(a1 + 76);
  v5 = &v49[0].i8[v3 + v4];
  uint64_t v6 = *(void *)(a1 + 56);
  uint64_t v7 = *(void *)(a1 + 64);
  unint64_t v8 = 8 * *(unsigned int *)(a1 + 84);
  if (v8 <= 1) {
    unint64_t v9 = 1;
  }
  else {
    unint64_t v9 = 8 * *(unsigned int *)(a1 + 84);
  }
  if (v9) {
    BOOL v10 = (v9 - 1) >> 32 == 0;
  }
  else {
    BOOL v10 = 0;
  }
  if (v10)
  {
    uint64_t v14 = &v49[0].i8[v3 + v4];
    uint64_t v15 = v9 & 0x7FFFFFFF8;
    if (v9 < 0x20)
    {
      uint64_t v16 = 0;
      int v17 = &v49[0].i8[v3 + v4];
      unsigned int v18 = *(uint64_t **)(a1 + 56);
      while (1)
      {
        int16x8_t v19 = (char *)(v6 + v7 * v16);
        int16x8_t v20 = &v5[64 * v16];
        if ((unint64_t)(&v14[64 * v16] - v19) > 0x1F)
        {
          v20 += v15;
          char v22 = v17;
          uint64_t v23 = v18;
          uint64_t v24 = v9 & 0x7FFFFFFF8;
          do
          {
            uint64_t v25 = *v23++;
            *(void *)char v22 = v25;
            v22 += 8;
            v24 -= 8;
          }
          while (v24);
          if (v9 == v15) {
            goto LABEL_17;
          }
          v19 += v15;
          int v21 = v9 & 0xFFFFFFF8;
        }
        else
        {
          int v21 = 0;
        }
        unsigned int v26 = v21 + 1;
        do
        {
          char v27 = *v19++;
          *v20++ = v27;
          BOOL v28 = v8 > v26++;
        }
        while (v28);
LABEL_17:
        ++v16;
        unsigned int v18 = (uint64_t *)((char *)v18 + v7);
        v17 += 64;
        if (v16 == v2) {
          return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v49, 64, *(uint16x8_t **)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
        }
      }
    }
    uint64_t v29 = 0;
    uint64_t v30 = v9 & 0x7FFFFFFE0;
    BOOL v31 = &v49[0].i8[v3 + v4];
    unsigned int v32 = &v49[1].i8[v3 + v4];
    BOOL v33 = (long long *)(v6 + 16);
    int v34 = (uint64_t *)(v6 + (v9 & 0x7FFFFFFE0));
    for (uint64_t i = &v31[v9 & 0x7FFFFFFE0]; ; i += 64)
    {
      uint64_t v36 = (char *)(v6 + v7 * v29);
      uint32x2_t v37 = &v5[64 * v29];
      if ((unint64_t)(&v14[64 * v29] - v36) >= 0x20)
      {
        char v41 = v33;
        BOOL v42 = v32;
        uint64_t v43 = v9 & 0x7FFFFFFE0;
        do
        {
          long long v44 = *v41;
          *((_OWORD *)v42 - 1) = *(v41 - 1);
          *(_OWORD *)BOOL v42 = v44;
          v42 += 32;
          v41 += 2;
          v43 -= 32;
        }
        while (v43);
        if (v9 == v30) {
          goto LABEL_28;
        }
        if ((v9 & 0x18) != 0)
        {
          v37 += v15;
          unint64_t v45 = i;
          uint64_t v46 = v34;
          unint64_t v47 = v15 - (v9 & 0x7FFFFFFE0);
          do
          {
            uint64_t v48 = *v46++;
            *(void *)unint64_t v45 = v48;
            v45 += 8;
            v47 -= 8;
          }
          while (v47);
          if (v9 == v15) {
            goto LABEL_28;
          }
          v36 += v15;
          int v38 = v9 & 0xFFFFFFF8;
        }
        else
        {
          v36 += v30;
          v37 += v30;
          int v38 = v9 & 0xFFFFFFE0;
        }
      }
      else
      {
        int v38 = 0;
      }
      unsigned int v39 = v38 + 1;
      do
      {
        char v40 = *v36++;
        *v37++ = v40;
        BOOL v28 = v8 > v39++;
      }
      while (v28);
LABEL_28:
      ++v29;
      v32 += 64;
      BOOL v33 = (long long *)((char *)v33 + v7);
      int v34 = (uint64_t *)((char *)v34 + v7);
      if (v29 == v2) {
        return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v49, 64, *(uint16x8_t **)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
      }
    }
  }
  for (uint64_t j = 0; j != v2; ++j)
  {
    uint64_t v12 = 0;
    do
    {
      v5[v12] = *(unsigned char *)(v6 + v12);
      ++v12;
    }
    while (v8 > v12);
    v5 += 64;
    v6 += v7;
  }
  return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v49, 64, *(uint16x8_t **)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE10ELj4ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v64 = *MEMORY[0x263EF8340];
  AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressMacroblock(v63, *(void *)(a1 + 40), *(unsigned __int8 **)(a1 + 48));
  uint64_t v2 = *(unsigned int *)(a1 + 80);
  if (v2 && *(_DWORD *)(a1 + 84))
  {
    unint64_t v3 = (unint64_t)*(unsigned int *)(a1 + 72) << 6;
    uint64_t v4 = 8 * *(unsigned int *)(a1 + 76);
    v5 = &v63[0].i8[v3 + v4];
    uint64_t v6 = *(void *)(a1 + 56);
    uint64_t v7 = *(void *)(a1 + 64);
    unint64_t v8 = 8 * *(unsigned int *)(a1 + 84);
    if (v8 <= 1) {
      unint64_t v9 = 1;
    }
    else {
      unint64_t v9 = 8 * *(unsigned int *)(a1 + 84);
    }
    if (v9) {
      BOOL v10 = (v9 - 1) >> 32 == 0;
    }
    else {
      BOOL v10 = 0;
    }
    if (!v10)
    {
      for (uint64_t i = 0; i != v2; ++i)
      {
        uint64_t v12 = 0;
        do
        {
          v5[v12] = *(unsigned char *)(v6 + v12);
          ++v12;
        }
        while (v8 > v12);
        v5 += 64;
        v6 += v7;
      }
      goto LABEL_14;
    }
    BOOL v28 = &v63[0].i8[v3 + v4];
    uint64_t v29 = v9 & 0x7FFFFFFF8;
    if (v9 < 0x20)
    {
      uint64_t v30 = 0;
      BOOL v31 = &v63[0].i8[v3 + v4];
      unsigned int v32 = *(uint64_t **)(a1 + 56);
      while (1)
      {
        BOOL v33 = (char *)(v6 + v7 * v30);
        int v34 = &v5[64 * v30];
        if ((unint64_t)(&v28[64 * v30] - v33) > 0x1F)
        {
          v34 += v29;
          uint64_t v36 = v31;
          uint32x2_t v37 = v32;
          uint64_t v38 = v9 & 0x7FFFFFFF8;
          do
          {
            uint64_t v39 = *v37++;
            *(void *)uint64_t v36 = v39;
            v36 += 8;
            v38 -= 8;
          }
          while (v38);
          if (v9 == v29) {
            goto LABEL_30;
          }
          v33 += v29;
          int v35 = v9 & 0xFFFFFFF8;
        }
        else
        {
          int v35 = 0;
        }
        unsigned int v40 = v35 + 1;
        do
        {
          char v41 = *v33++;
          *v34++ = v41;
          BOOL v42 = v8 > v40++;
        }
        while (v42);
LABEL_30:
        ++v30;
        unsigned int v32 = (uint64_t *)((char *)v32 + v7);
        v31 += 64;
        if (v30 == v2) {
          goto LABEL_14;
        }
      }
    }
    uint64_t v43 = 0;
    uint64_t v44 = v9 & 0x7FFFFFFE0;
    unint64_t v45 = &v63[0].i8[v3 + v4];
    uint64_t v46 = &v63[1].i8[v3 + v4];
    unint64_t v47 = (long long *)(v6 + 16);
    uint64_t v48 = (uint64_t *)(v6 + (v9 & 0x7FFFFFFE0));
    uint64_t v49 = &v45[v9 & 0x7FFFFFFE0];
    do
    {
      uint64_t v50 = (char *)(v6 + v7 * v43);
      int v51 = &v5[64 * v43];
      if ((unint64_t)(&v28[64 * v43] - v50) >= 0x20)
      {
        BOOL v55 = v47;
        __int32 v56 = v46;
        uint64_t v57 = v9 & 0x7FFFFFFE0;
        do
        {
          long long v58 = *v55;
          *((_OWORD *)v56 - 1) = *(v55 - 1);
          *(_OWORD *)__int32 v56 = v58;
          v56 += 32;
          v55 += 2;
          v57 -= 32;
        }
        while (v57);
        if (v9 == v44) {
          goto LABEL_41;
        }
        if ((v9 & 0x18) != 0)
        {
          v51 += v29;
          unsigned int v59 = v49;
          unsigned int v60 = v48;
          unint64_t v61 = v29 - (v9 & 0x7FFFFFFE0);
          do
          {
            uint64_t v62 = *v60++;
            *(void *)unsigned int v59 = v62;
            v59 += 8;
            v61 -= 8;
          }
          while (v61);
          if (v9 == v29) {
            goto LABEL_41;
          }
          v50 += v29;
          int v52 = v9 & 0xFFFFFFF8;
        }
        else
        {
          v50 += v44;
          v51 += v44;
          int v52 = v9 & 0xFFFFFFE0;
        }
      }
      else
      {
        int v52 = 0;
      }
      unsigned int v53 = v52 + 1;
      do
      {
        char v54 = *v50++;
        *v51++ = v54;
        BOOL v42 = v8 > v53++;
      }
      while (v42);
LABEL_41:
      ++v43;
      v46 += 64;
      unint64_t v47 = (long long *)((char *)v47 + v7);
      uint64_t v48 = (uint64_t *)((char *)v48 + v7);
      v49 += 64;
    }
    while (v43 != v2);
  }
LABEL_14:
  uint64_t v13 = 0;
  uint64_t v14 = *(int16x8_t **)(a1 + 40);
  uint64_t v15 = *(char **)(a1 + 48);
  int v16 = *(unsigned __int8 *)(a1 + 88);
  int v17 = *(unsigned __int8 *)(a1 + 89);
  do
  {
    uint64_t v23 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,4u>::kSubblockPositions[v13 + 1];
    uint64_t v24 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,4u>::kSubblockPositions[v13];
    LODWORD(result) = (v16 - 4 * v24) & ~((v16 - 4 * (int)v24) >> 31);
    if (result >= 4) {
      uint64_t result = 4;
    }
    else {
      uint64_t result = result;
    }
    unsigned int v26 = (v17 - 2 * v23) & ~((v17 - 2 * (int)v23) >> 31);
    if (v26 >= 2) {
      unsigned int v26 = 2;
    }
    if (result) {
      BOOL v27 = v26 == 0;
    }
    else {
      BOOL v27 = 1;
    }
    if (v27)
    {
      char v22 = 0;
    }
    else
    {
      unsigned int v18 = &v63[8 * v23 + 2 * v24];
      int16x8_t v19 = v18[1];
      int16x8_t v20 = v18[4];
      int16x8_t v21 = v18[5];
      *uint64_t v14 = *v18;
      v14[1] = v20;
      v14[2] = v19;
      v14[3] = v21;
      v14 += 4;
      char v22 = 63;
    }
    *v15++ = v22;
    v13 += 2;
  }
  while (v13 != 16);
  return result;
}

unint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE10ELj4ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v50 = *MEMORY[0x263EF8340];
  AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressMacroblock(v49, *(void *)(a1 + 40), *(unsigned __int8 **)(a1 + 48));
  uint64_t v2 = *(unsigned int *)(a1 + 80);
  if (!v2 || !*(_DWORD *)(a1 + 84)) {
    return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v49, 64, *(void *)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
  }
  unint64_t v3 = (unint64_t)*(unsigned int *)(a1 + 72) << 6;
  uint64_t v4 = 8 * *(unsigned int *)(a1 + 76);
  v5 = &v49[0].i8[v3 + v4];
  uint64_t v6 = *(void *)(a1 + 56);
  uint64_t v7 = *(void *)(a1 + 64);
  unint64_t v8 = 8 * *(unsigned int *)(a1 + 84);
  if (v8 <= 1) {
    unint64_t v9 = 1;
  }
  else {
    unint64_t v9 = 8 * *(unsigned int *)(a1 + 84);
  }
  if (v9) {
    BOOL v10 = (v9 - 1) >> 32 == 0;
  }
  else {
    BOOL v10 = 0;
  }
  if (v10)
  {
    uint64_t v14 = &v49[0].i8[v3 + v4];
    uint64_t v15 = v9 & 0x7FFFFFFF8;
    if (v9 < 0x20)
    {
      uint64_t v16 = 0;
      int v17 = &v49[0].i8[v3 + v4];
      unsigned int v18 = *(uint64_t **)(a1 + 56);
      while (1)
      {
        int16x8_t v19 = (char *)(v6 + v7 * v16);
        int16x8_t v20 = &v5[64 * v16];
        if ((unint64_t)(&v14[64 * v16] - v19) > 0x1F)
        {
          v20 += v15;
          char v22 = v17;
          uint64_t v23 = v18;
          uint64_t v24 = v9 & 0x7FFFFFFF8;
          do
          {
            uint64_t v25 = *v23++;
            *(void *)char v22 = v25;
            v22 += 8;
            v24 -= 8;
          }
          while (v24);
          if (v9 == v15) {
            goto LABEL_17;
          }
          v19 += v15;
          int v21 = v9 & 0xFFFFFFF8;
        }
        else
        {
          int v21 = 0;
        }
        unsigned int v26 = v21 + 1;
        do
        {
          char v27 = *v19++;
          *v20++ = v27;
          BOOL v28 = v8 > v26++;
        }
        while (v28);
LABEL_17:
        ++v16;
        unsigned int v18 = (uint64_t *)((char *)v18 + v7);
        v17 += 64;
        if (v16 == v2) {
          return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v49, 64, *(void *)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
        }
      }
    }
    uint64_t v29 = 0;
    uint64_t v30 = v9 & 0x7FFFFFFE0;
    BOOL v31 = &v49[0].i8[v3 + v4];
    unsigned int v32 = &v49[1].i8[v3 + v4];
    BOOL v33 = (long long *)(v6 + 16);
    int v34 = (uint64_t *)(v6 + (v9 & 0x7FFFFFFE0));
    for (uint64_t i = &v31[v9 & 0x7FFFFFFE0]; ; i += 64)
    {
      uint64_t v36 = (char *)(v6 + v7 * v29);
      uint32x2_t v37 = &v5[64 * v29];
      if ((unint64_t)(&v14[64 * v29] - v36) >= 0x20)
      {
        char v41 = v33;
        BOOL v42 = v32;
        uint64_t v43 = v9 & 0x7FFFFFFE0;
        do
        {
          long long v44 = *v41;
          *((_OWORD *)v42 - 1) = *(v41 - 1);
          *(_OWORD *)BOOL v42 = v44;
          v42 += 32;
          v41 += 2;
          v43 -= 32;
        }
        while (v43);
        if (v9 == v30) {
          goto LABEL_28;
        }
        if ((v9 & 0x18) != 0)
        {
          v37 += v15;
          unint64_t v45 = i;
          uint64_t v46 = v34;
          unint64_t v47 = v15 - (v9 & 0x7FFFFFFE0);
          do
          {
            uint64_t v48 = *v46++;
            *(void *)unint64_t v45 = v48;
            v45 += 8;
            v47 -= 8;
          }
          while (v47);
          if (v9 == v15) {
            goto LABEL_28;
          }
          v36 += v15;
          int v38 = v9 & 0xFFFFFFF8;
        }
        else
        {
          v36 += v30;
          v37 += v30;
          int v38 = v9 & 0xFFFFFFE0;
        }
      }
      else
      {
        int v38 = 0;
      }
      unsigned int v39 = v38 + 1;
      do
      {
        char v40 = *v36++;
        *v37++ = v40;
        BOOL v28 = v8 > v39++;
      }
      while (v28);
LABEL_28:
      ++v29;
      v32 += 64;
      BOOL v33 = (long long *)((char *)v33 + v7);
      int v34 = (uint64_t *)((char *)v34 + v7);
      if (v29 == v2) {
        return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v49, 64, *(void *)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
      }
    }
  }
  for (uint64_t j = 0; j != v2; ++j)
  {
    uint64_t v12 = 0;
    do
    {
      v5[v12] = *(unsigned char *)(v6 + v12);
      ++v12;
    }
    while (v8 > v12);
    v5 += 64;
    v6 += v7;
  }
  return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v49, 64, *(void *)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE10ELj4ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v64 = *MEMORY[0x263EF8340];
  AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressMacroblock(v63, *(void *)(a1 + 40), *(unsigned __int8 **)(a1 + 48));
  uint64_t v2 = *(unsigned int *)(a1 + 80);
  if (v2 && *(_DWORD *)(a1 + 84))
  {
    unint64_t v3 = (unint64_t)*(unsigned int *)(a1 + 72) << 6;
    uint64_t v4 = 8 * *(unsigned int *)(a1 + 76);
    v5 = &v63[0].i8[v3 + v4];
    uint64_t v6 = *(void *)(a1 + 56);
    uint64_t v7 = *(void *)(a1 + 64);
    unint64_t v8 = 8 * *(unsigned int *)(a1 + 84);
    if (v8 <= 1) {
      unint64_t v9 = 1;
    }
    else {
      unint64_t v9 = 8 * *(unsigned int *)(a1 + 84);
    }
    if (v9) {
      BOOL v10 = (v9 - 1) >> 32 == 0;
    }
    else {
      BOOL v10 = 0;
    }
    if (!v10)
    {
      for (uint64_t i = 0; i != v2; ++i)
      {
        uint64_t v12 = 0;
        do
        {
          v5[v12] = *(unsigned char *)(v6 + v12);
          ++v12;
        }
        while (v8 > v12);
        v5 += 64;
        v6 += v7;
      }
      goto LABEL_14;
    }
    BOOL v28 = &v63[0].i8[v3 + v4];
    uint64_t v29 = v9 & 0x7FFFFFFF8;
    if (v9 < 0x20)
    {
      uint64_t v30 = 0;
      BOOL v31 = &v63[0].i8[v3 + v4];
      unsigned int v32 = *(uint64_t **)(a1 + 56);
      while (1)
      {
        BOOL v33 = (char *)(v6 + v7 * v30);
        int v34 = &v5[64 * v30];
        if ((unint64_t)(&v28[64 * v30] - v33) > 0x1F)
        {
          v34 += v29;
          uint64_t v36 = v31;
          uint32x2_t v37 = v32;
          uint64_t v38 = v9 & 0x7FFFFFFF8;
          do
          {
            uint64_t v39 = *v37++;
            *(void *)uint64_t v36 = v39;
            v36 += 8;
            v38 -= 8;
          }
          while (v38);
          if (v9 == v29) {
            goto LABEL_30;
          }
          v33 += v29;
          int v35 = v9 & 0xFFFFFFF8;
        }
        else
        {
          int v35 = 0;
        }
        unsigned int v40 = v35 + 1;
        do
        {
          char v41 = *v33++;
          *v34++ = v41;
          BOOL v42 = v8 > v40++;
        }
        while (v42);
LABEL_30:
        ++v30;
        unsigned int v32 = (uint64_t *)((char *)v32 + v7);
        v31 += 64;
        if (v30 == v2) {
          goto LABEL_14;
        }
      }
    }
    uint64_t v43 = 0;
    uint64_t v44 = v9 & 0x7FFFFFFE0;
    unint64_t v45 = &v63[0].i8[v3 + v4];
    uint64_t v46 = &v63[1].i8[v3 + v4];
    unint64_t v47 = (long long *)(v6 + 16);
    uint64_t v48 = (uint64_t *)(v6 + (v9 & 0x7FFFFFFE0));
    uint64_t v49 = &v45[v9 & 0x7FFFFFFE0];
    do
    {
      uint64_t v50 = (char *)(v6 + v7 * v43);
      int v51 = &v5[64 * v43];
      if ((unint64_t)(&v28[64 * v43] - v50) >= 0x20)
      {
        BOOL v55 = v47;
        __int32 v56 = v46;
        uint64_t v57 = v9 & 0x7FFFFFFE0;
        do
        {
          long long v58 = *v55;
          *((_OWORD *)v56 - 1) = *(v55 - 1);
          *(_OWORD *)__int32 v56 = v58;
          v56 += 32;
          v55 += 2;
          v57 -= 32;
        }
        while (v57);
        if (v9 == v44) {
          goto LABEL_41;
        }
        if ((v9 & 0x18) != 0)
        {
          v51 += v29;
          unsigned int v59 = v49;
          unsigned int v60 = v48;
          unint64_t v61 = v29 - (v9 & 0x7FFFFFFE0);
          do
          {
            uint64_t v62 = *v60++;
            *(void *)unsigned int v59 = v62;
            v59 += 8;
            v61 -= 8;
          }
          while (v61);
          if (v9 == v29) {
            goto LABEL_41;
          }
          v50 += v29;
          int v52 = v9 & 0xFFFFFFF8;
        }
        else
        {
          v50 += v44;
          v51 += v44;
          int v52 = v9 & 0xFFFFFFE0;
        }
      }
      else
      {
        int v52 = 0;
      }
      unsigned int v53 = v52 + 1;
      do
      {
        char v54 = *v50++;
        *v51++ = v54;
        BOOL v42 = v8 > v53++;
      }
      while (v42);
LABEL_41:
      ++v43;
      v46 += 64;
      unint64_t v47 = (long long *)((char *)v47 + v7);
      uint64_t v48 = (uint64_t *)((char *)v48 + v7);
      v49 += 64;
    }
    while (v43 != v2);
  }
LABEL_14:
  uint64_t v13 = 0;
  uint64_t v14 = *(int16x8_t **)(a1 + 40);
  uint64_t v15 = *(char **)(a1 + 48);
  int v16 = *(unsigned __int8 *)(a1 + 88);
  int v17 = *(unsigned __int8 *)(a1 + 89);
  do
  {
    uint64_t v23 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,4u>::kSubblockPositions[v13 + 1];
    uint64_t v24 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,4u>::kSubblockPositions[v13];
    LODWORD(result) = (v16 - 4 * v24) & ~((v16 - 4 * (int)v24) >> 31);
    if (result >= 4) {
      uint64_t result = 4;
    }
    else {
      uint64_t result = result;
    }
    unsigned int v26 = (v17 - 2 * v23) & ~((v17 - 2 * (int)v23) >> 31);
    if (v26 >= 2) {
      unsigned int v26 = 2;
    }
    if (result) {
      BOOL v27 = v26 == 0;
    }
    else {
      BOOL v27 = 1;
    }
    if (v27)
    {
      char v22 = 0;
    }
    else
    {
      unsigned int v18 = &v63[8 * v23 + 2 * v24];
      int16x8_t v19 = v18[1];
      int16x8_t v20 = v18[4];
      int16x8_t v21 = v18[5];
      *uint64_t v14 = *v18;
      v14[1] = v20;
      v14[2] = v19;
      v14[3] = v21;
      v14 += 4;
      char v22 = 63;
    }
    *v15++ = v22;
    v13 += 2;
  }
  while (v13 != 16);
  return result;
}

unint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE10ELj4ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v50 = *MEMORY[0x263EF8340];
  AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressMacroblock(v49, *(void *)(a1 + 40), *(unsigned __int8 **)(a1 + 48));
  uint64_t v2 = *(unsigned int *)(a1 + 80);
  if (!v2 || !*(_DWORD *)(a1 + 84)) {
    return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v49, 64, *(void *)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
  }
  unint64_t v3 = (unint64_t)*(unsigned int *)(a1 + 72) << 6;
  uint64_t v4 = 8 * *(unsigned int *)(a1 + 76);
  v5 = &v49[0].i8[v3 + v4];
  uint64_t v6 = *(void *)(a1 + 56);
  uint64_t v7 = *(void *)(a1 + 64);
  unint64_t v8 = 8 * *(unsigned int *)(a1 + 84);
  if (v8 <= 1) {
    unint64_t v9 = 1;
  }
  else {
    unint64_t v9 = 8 * *(unsigned int *)(a1 + 84);
  }
  if (v9) {
    BOOL v10 = (v9 - 1) >> 32 == 0;
  }
  else {
    BOOL v10 = 0;
  }
  if (v10)
  {
    uint64_t v14 = &v49[0].i8[v3 + v4];
    uint64_t v15 = v9 & 0x7FFFFFFF8;
    if (v9 < 0x20)
    {
      uint64_t v16 = 0;
      int v17 = &v49[0].i8[v3 + v4];
      unsigned int v18 = *(uint64_t **)(a1 + 56);
      while (1)
      {
        int16x8_t v19 = (char *)(v6 + v7 * v16);
        int16x8_t v20 = &v5[64 * v16];
        if ((unint64_t)(&v14[64 * v16] - v19) > 0x1F)
        {
          v20 += v15;
          char v22 = v17;
          uint64_t v23 = v18;
          uint64_t v24 = v9 & 0x7FFFFFFF8;
          do
          {
            uint64_t v25 = *v23++;
            *(void *)char v22 = v25;
            v22 += 8;
            v24 -= 8;
          }
          while (v24);
          if (v9 == v15) {
            goto LABEL_17;
          }
          v19 += v15;
          int v21 = v9 & 0xFFFFFFF8;
        }
        else
        {
          int v21 = 0;
        }
        unsigned int v26 = v21 + 1;
        do
        {
          char v27 = *v19++;
          *v20++ = v27;
          BOOL v28 = v8 > v26++;
        }
        while (v28);
LABEL_17:
        ++v16;
        unsigned int v18 = (uint64_t *)((char *)v18 + v7);
        v17 += 64;
        if (v16 == v2) {
          return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v49, 64, *(void *)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
        }
      }
    }
    uint64_t v29 = 0;
    uint64_t v30 = v9 & 0x7FFFFFFE0;
    BOOL v31 = &v49[0].i8[v3 + v4];
    unsigned int v32 = &v49[1].i8[v3 + v4];
    BOOL v33 = (long long *)(v6 + 16);
    int v34 = (uint64_t *)(v6 + (v9 & 0x7FFFFFFE0));
    for (uint64_t i = &v31[v9 & 0x7FFFFFFE0]; ; i += 64)
    {
      uint64_t v36 = (char *)(v6 + v7 * v29);
      uint32x2_t v37 = &v5[64 * v29];
      if ((unint64_t)(&v14[64 * v29] - v36) >= 0x20)
      {
        char v41 = v33;
        BOOL v42 = v32;
        uint64_t v43 = v9 & 0x7FFFFFFE0;
        do
        {
          long long v44 = *v41;
          *((_OWORD *)v42 - 1) = *(v41 - 1);
          *(_OWORD *)BOOL v42 = v44;
          v42 += 32;
          v41 += 2;
          v43 -= 32;
        }
        while (v43);
        if (v9 == v30) {
          goto LABEL_28;
        }
        if ((v9 & 0x18) != 0)
        {
          v37 += v15;
          unint64_t v45 = i;
          uint64_t v46 = v34;
          unint64_t v47 = v15 - (v9 & 0x7FFFFFFE0);
          do
          {
            uint64_t v48 = *v46++;
            *(void *)unint64_t v45 = v48;
            v45 += 8;
            v47 -= 8;
          }
          while (v47);
          if (v9 == v15) {
            goto LABEL_28;
          }
          v36 += v15;
          int v38 = v9 & 0xFFFFFFF8;
        }
        else
        {
          v36 += v30;
          v37 += v30;
          int v38 = v9 & 0xFFFFFFE0;
        }
      }
      else
      {
        int v38 = 0;
      }
      unsigned int v39 = v38 + 1;
      do
      {
        char v40 = *v36++;
        *v37++ = v40;
        BOOL v28 = v8 > v39++;
      }
      while (v28);
LABEL_28:
      ++v29;
      v32 += 64;
      BOOL v33 = (long long *)((char *)v33 + v7);
      int v34 = (uint64_t *)((char *)v34 + v7);
      if (v29 == v2) {
        return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v49, 64, *(void *)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
      }
    }
  }
  for (uint64_t j = 0; j != v2; ++j)
  {
    uint64_t v12 = 0;
    do
    {
      v5[v12] = *(unsigned char *)(v6 + v12);
      ++v12;
    }
    while (v8 > v12);
    v5 += 64;
    v6 += v7;
  }
  return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v49, 64, *(void *)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE19ELj4ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressMacroblock(v29, *(void *)(a1 + 40), *(unsigned __int8 **)(a1 + 48));
  uint64_t v2 = *(unsigned int *)(a1 + 80);
  if (!v2 || !*(_DWORD *)(a1 + 84)) {
    return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((uint64_t)v29, 256, *(_OWORD **)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
  }
  unint64_t v3 = (unint64_t)*(unsigned int *)(a1 + 72) << 8;
  uint64_t v4 = 32 * *(unsigned int *)(a1 + 76);
  v5 = &v29[0].i8[v3 + v4];
  uint64_t v6 = *(void *)(a1 + 56);
  uint64_t v7 = *(void *)(a1 + 64);
  unint64_t v8 = 32 * *(unsigned int *)(a1 + 84);
  if (v8 <= 1) {
    uint64_t v9 = 1;
  }
  else {
    uint64_t v9 = 32 * *(unsigned int *)(a1 + 84);
  }
  if (v9) {
    BOOL v10 = (unint64_t)(v9 - 1) >> 32 == 0;
  }
  else {
    BOOL v10 = 0;
  }
  if (v10)
  {
    uint64_t v14 = 0;
    uint64_t v15 = &v29[0].i8[v3 + v4];
    uint64_t v16 = v9 & 0x1FFFFFFFE0;
    int v17 = &v29[1].i8[v3 + v4];
    unsigned int v18 = (long long *)(v6 + 16);
    while (1)
    {
      int16x8_t v19 = (char *)(v6 + v7 * v14);
      int16x8_t v20 = &v5[256 * v14];
      if ((unint64_t)(&v15[256 * v14] - v19) >= 0x20)
      {
        char v22 = v18;
        uint64_t v23 = v17;
        uint64_t v24 = v9 & 0x1FFFFFFFE0;
        do
        {
          long long v25 = *v22;
          *((_OWORD *)v23 - 1) = *(v22 - 1);
          *(_OWORD *)uint64_t v23 = v25;
          v23 += 32;
          v22 += 2;
          v24 -= 32;
        }
        while (v24);
        if (v9 == v16) {
          goto LABEL_16;
        }
        v19 += v16;
        v20 += v16;
        int v21 = v9 & 0xFFFFFFE0;
      }
      else
      {
        int v21 = 0;
      }
      unsigned int v26 = v21 + 1;
      do
      {
        char v27 = *v19++;
        *v20++ = v27;
      }
      while (v8 > v26++);
LABEL_16:
      ++v14;
      v17 += 256;
      unsigned int v18 = (long long *)((char *)v18 + v7);
      if (v14 == v2) {
        return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((uint64_t)v29, 256, *(_OWORD **)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
      }
    }
  }
  for (uint64_t i = 0; i != v2; ++i)
  {
    uint64_t v12 = 0;
    do
    {
      v5[v12] = *(unsigned char *)(v6 + v12);
      ++v12;
    }
    while (v8 > v12);
    v5 += 256;
    v6 += v7;
  }
  return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((uint64_t)v29, 256, *(_OWORD **)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
}

unint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE19ELj4ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v32 = *MEMORY[0x263EF8340];
  AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressMacroblock(v31, *(void *)(a1 + 40), *(unsigned __int8 **)(a1 + 48));
  uint64_t v4 = *(unsigned int *)(a1 + 80);
  if (!v4 || !*(_DWORD *)(a1 + 84)) {
    return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v31, 256, *(void *)(a1 + 40), *(unsigned char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), v2, v3);
  }
  unint64_t v5 = (unint64_t)*(unsigned int *)(a1 + 72) << 8;
  uint64_t v6 = 32 * *(unsigned int *)(a1 + 76);
  uint64_t v7 = &v31[0].i8[v5 + v6];
  uint64_t v8 = *(void *)(a1 + 56);
  uint64_t v9 = *(void *)(a1 + 64);
  unint64_t v10 = 32 * *(unsigned int *)(a1 + 84);
  if (v10 <= 1) {
    uint64_t v11 = 1;
  }
  else {
    uint64_t v11 = 32 * *(unsigned int *)(a1 + 84);
  }
  if (v11) {
    BOOL v12 = (unint64_t)(v11 - 1) >> 32 == 0;
  }
  else {
    BOOL v12 = 0;
  }
  if (v12)
  {
    uint64_t v16 = 0;
    int v17 = &v31[0].i8[v5 + v6];
    uint64_t v18 = v11 & 0x1FFFFFFFE0;
    int16x8_t v19 = &v31[1].i8[v5 + v6];
    int16x8_t v20 = (long long *)(v8 + 16);
    while (1)
    {
      int v21 = (char *)(v8 + v9 * v16);
      char v22 = &v7[256 * v16];
      if ((unint64_t)(&v17[256 * v16] - v21) >= 0x20)
      {
        uint64_t v24 = v20;
        long long v25 = v19;
        uint64_t v26 = v11 & 0x1FFFFFFFE0;
        do
        {
          long long v27 = *v24;
          *((_OWORD *)v25 - 1) = *(v24 - 1);
          *(_OWORD *)long long v25 = v27;
          v25 += 32;
          v24 += 2;
          v26 -= 32;
        }
        while (v26);
        if (v11 == v18) {
          goto LABEL_16;
        }
        v21 += v18;
        v22 += v18;
        int v23 = v11 & 0xFFFFFFE0;
      }
      else
      {
        int v23 = 0;
      }
      unsigned int v28 = v23 + 1;
      do
      {
        char v29 = *v21++;
        *v22++ = v29;
      }
      while (v10 > v28++);
LABEL_16:
      ++v16;
      v19 += 256;
      int16x8_t v20 = (long long *)((char *)v20 + v9);
      if (v16 == v4) {
        return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v31, 256, *(void *)(a1 + 40), *(unsigned char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), v2, v3);
      }
    }
  }
  for (uint64_t i = 0; i != v4; ++i)
  {
    uint64_t v14 = 0;
    do
    {
      v7[v14] = *(unsigned char *)(v8 + v14);
      ++v14;
    }
    while (v10 > v14);
    v7 += 256;
    v8 += v9;
  }
  return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v31, 256, *(void *)(a1 + 40), *(unsigned char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), v2, v3);
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE19ELj4ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressMacroblock(v29, *(void *)(a1 + 40), *(unsigned __int8 **)(a1 + 48));
  uint64_t v2 = *(unsigned int *)(a1 + 80);
  if (!v2 || !*(_DWORD *)(a1 + 84)) {
    return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((uint64_t)v29, 256, *(_OWORD **)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
  }
  unint64_t v3 = (unint64_t)*(unsigned int *)(a1 + 72) << 8;
  uint64_t v4 = 32 * *(unsigned int *)(a1 + 76);
  unint64_t v5 = &v29[0].i8[v3 + v4];
  uint64_t v6 = *(void *)(a1 + 56);
  uint64_t v7 = *(void *)(a1 + 64);
  unint64_t v8 = 32 * *(unsigned int *)(a1 + 84);
  if (v8 <= 1) {
    uint64_t v9 = 1;
  }
  else {
    uint64_t v9 = 32 * *(unsigned int *)(a1 + 84);
  }
  if (v9) {
    BOOL v10 = (unint64_t)(v9 - 1) >> 32 == 0;
  }
  else {
    BOOL v10 = 0;
  }
  if (v10)
  {
    uint64_t v14 = 0;
    uint64_t v15 = &v29[0].i8[v3 + v4];
    uint64_t v16 = v9 & 0x1FFFFFFFE0;
    int v17 = &v29[1].i8[v3 + v4];
    uint64_t v18 = (long long *)(v6 + 16);
    while (1)
    {
      int16x8_t v19 = (char *)(v6 + v7 * v14);
      int16x8_t v20 = &v5[256 * v14];
      if ((unint64_t)(&v15[256 * v14] - v19) >= 0x20)
      {
        char v22 = v18;
        int v23 = v17;
        uint64_t v24 = v9 & 0x1FFFFFFFE0;
        do
        {
          long long v25 = *v22;
          *((_OWORD *)v23 - 1) = *(v22 - 1);
          *(_OWORD *)int v23 = v25;
          v23 += 32;
          v22 += 2;
          v24 -= 32;
        }
        while (v24);
        if (v9 == v16) {
          goto LABEL_16;
        }
        v19 += v16;
        v20 += v16;
        int v21 = v9 & 0xFFFFFFE0;
      }
      else
      {
        int v21 = 0;
      }
      unsigned int v26 = v21 + 1;
      do
      {
        char v27 = *v19++;
        *v20++ = v27;
      }
      while (v8 > v26++);
LABEL_16:
      ++v14;
      v17 += 256;
      uint64_t v18 = (long long *)((char *)v18 + v7);
      if (v14 == v2) {
        return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((uint64_t)v29, 256, *(_OWORD **)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
      }
    }
  }
  for (uint64_t i = 0; i != v2; ++i)
  {
    uint64_t v12 = 0;
    do
    {
      v5[v12] = *(unsigned char *)(v6 + v12);
      ++v12;
    }
    while (v8 > v12);
    v5 += 256;
    v6 += v7;
  }
  return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((uint64_t)v29, 256, *(_OWORD **)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
}

unint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE19ELj4ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v32 = *MEMORY[0x263EF8340];
  AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressMacroblock(v31, *(void *)(a1 + 40), *(unsigned __int8 **)(a1 + 48));
  uint64_t v4 = *(unsigned int *)(a1 + 80);
  if (!v4 || !*(_DWORD *)(a1 + 84)) {
    return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v31, 256, *(void *)(a1 + 40), *(unsigned char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), v2, v3);
  }
  unint64_t v5 = (unint64_t)*(unsigned int *)(a1 + 72) << 8;
  uint64_t v6 = 32 * *(unsigned int *)(a1 + 76);
  uint64_t v7 = &v31[0].i8[v5 + v6];
  uint64_t v8 = *(void *)(a1 + 56);
  uint64_t v9 = *(void *)(a1 + 64);
  unint64_t v10 = 32 * *(unsigned int *)(a1 + 84);
  if (v10 <= 1) {
    uint64_t v11 = 1;
  }
  else {
    uint64_t v11 = 32 * *(unsigned int *)(a1 + 84);
  }
  if (v11) {
    BOOL v12 = (unint64_t)(v11 - 1) >> 32 == 0;
  }
  else {
    BOOL v12 = 0;
  }
  if (v12)
  {
    uint64_t v16 = 0;
    int v17 = &v31[0].i8[v5 + v6];
    uint64_t v18 = v11 & 0x1FFFFFFFE0;
    int16x8_t v19 = &v31[1].i8[v5 + v6];
    int16x8_t v20 = (long long *)(v8 + 16);
    while (1)
    {
      int v21 = (char *)(v8 + v9 * v16);
      char v22 = &v7[256 * v16];
      if ((unint64_t)(&v17[256 * v16] - v21) >= 0x20)
      {
        uint64_t v24 = v20;
        long long v25 = v19;
        uint64_t v26 = v11 & 0x1FFFFFFFE0;
        do
        {
          long long v27 = *v24;
          *((_OWORD *)v25 - 1) = *(v24 - 1);
          *(_OWORD *)long long v25 = v27;
          v25 += 32;
          v24 += 2;
          v26 -= 32;
        }
        while (v26);
        if (v11 == v18) {
          goto LABEL_16;
        }
        v21 += v18;
        v22 += v18;
        int v23 = v11 & 0xFFFFFFE0;
      }
      else
      {
        int v23 = 0;
      }
      unsigned int v28 = v23 + 1;
      do
      {
        char v29 = *v21++;
        *v22++ = v29;
      }
      while (v10 > v28++);
LABEL_16:
      ++v16;
      v19 += 256;
      int16x8_t v20 = (long long *)((char *)v20 + v9);
      if (v16 == v4) {
        return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v31, 256, *(void *)(a1 + 40), *(unsigned char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), v2, v3);
      }
    }
  }
  for (uint64_t i = 0; i != v4; ++i)
  {
    uint64_t v14 = 0;
    do
    {
      v7[v14] = *(unsigned char *)(v8 + v14);
      ++v14;
    }
    while (v10 > v14);
    v7 += 256;
    v8 += v9;
  }
  return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v31, 256, *(void *)(a1 + 40), *(unsigned char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), v2, v3);
}

_OWORD *___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE18ELj4ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v2 = 0;
  uint64_t v51 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(a1 + 40);
  uint64_t v4 = *(unsigned char **)(a1 + 48);
  do
  {
    uint64_t v7 = (float64x2_t *)&v50[32
                           * (unint64_t)AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,4u>::kSubblockPositions[v2 + 1]
                           + 8
                           * (unint64_t)AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,4u>::kSubblockPositions[v2]];
    unsigned int v8 = *v4;
    if (v8 == 255)
    {
      float64x2_t v9 = *(float64x2_t *)(v3 + 16);
      float64x2_t v10 = *(float64x2_t *)(v3 + 32);
      float64x2_t v11 = *(float64x2_t *)(v3 + 48);
      float64x2_t v12 = *(float64x2_t *)(v3 + 64);
      float64x2_t v13 = *(float64x2_t *)(v3 + 80);
      float64x2_t v14 = *(float64x2_t *)(v3 + 96);
      float64x2_t v15 = *(float64x2_t *)(v3 + 112);
      float64x2_t v16 = *(float64x2_t *)(v3 + 128);
      float64x2_t v17 = *(float64x2_t *)(v3 + 144);
      float64x2_t v18 = *(float64x2_t *)(v3 + 160);
      float64x2_t v19 = *(float64x2_t *)(v3 + 176);
      float64x2_t v20 = *(float64x2_t *)(v3 + 192);
      float64x2_t v21 = *(float64x2_t *)(v3 + 208);
      float64x2_t v22 = *(float64x2_t *)(v3 + 224);
      float64x2_t v23 = *(float64x2_t *)(v3 + 240);
      *uint64_t v7 = *(float64x2_t *)v3;
      v7[1] = v9;
      v7[2] = v10;
      v7[3] = v11;
      v7[4] = v16;
      v7[5] = v17;
      v7[6] = v18;
      v7[7] = v19;
      v7[16] = v12;
      v7[17] = v13;
      v7[18] = v14;
      v7[19] = v15;
      uint64_t v6 = 256;
      v7[20] = v20;
      v7[21] = v21;
      v7[22] = v22;
      v7[23] = v23;
    }
    else if (v8 == 7)
    {
      float64x2_t v5 = vld1q_dup_f64((const double *)v3);
      *uint64_t v7 = v5;
      v7[1] = v5;
      v7[2] = v5;
      v7[3] = v5;
      v7[4] = v5;
      v7[5] = v5;
      v7[6] = v5;
      v7[7] = v5;
      v7[16] = v5;
      v7[17] = v5;
      v7[18] = v5;
      v7[19] = v5;
      v7[20] = v5;
      v7[21] = v5;
      v7[22] = v5;
      v7[23] = v5;
      uint64_t v6 = 8;
    }
    else if (*v4)
    {
      uint64_t v6 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((uint64_t)v7, 256, v3, v8);
    }
    else
    {
      uint64_t v6 = 0;
      v7[6] = 0u;
      v7[7] = 0u;
      v7[4] = 0u;
      v7[5] = 0u;
      v7[2] = 0u;
      v7[3] = 0u;
      *uint64_t v7 = 0u;
      v7[1] = 0u;
      v7[16] = 0u;
      v7[17] = 0u;
      v7[18] = 0u;
      v7[19] = 0u;
      v7[20] = 0u;
      v7[21] = 0u;
      v7[22] = 0u;
      v7[23] = 0u;
    }
    v3 += v6;
    ++v4;
    v2 += 2;
  }
  while (v2 != 16);
  uint64_t v24 = *(unsigned int *)(a1 + 80);
  if (v24 && *(_DWORD *)(a1 + 84))
  {
    unint64_t v25 = (unint64_t)*(unsigned int *)(a1 + 72) << 8;
    uint64_t v26 = 32 * *(unsigned int *)(a1 + 76);
    long long v27 = (char *)v50 + v25 + v26;
    uint64_t v28 = *(void *)(a1 + 56);
    uint64_t v29 = *(void *)(a1 + 64);
    unint64_t v30 = 32 * *(unsigned int *)(a1 + 84);
    if (v30 <= 1) {
      uint64_t v31 = 1;
    }
    else {
      uint64_t v31 = 32 * *(unsigned int *)(a1 + 84);
    }
    if (v31)
    {
      unint64_t v32 = (unint64_t)(v31 - 1) >> 32;
      if (!v32)
      {
        BOOL v33 = (char *)v50 + v25 + v26;
        uint64_t v34 = v31 & 0x1FFFFFFFE0;
        int v35 = (char *)&v50[1] + v25 + v26;
        uint64_t v36 = (long long *)(v28 + 16);
        while (1)
        {
          uint32x2_t v37 = (char *)(v28 + v29 * v32);
          int v38 = &v27[256 * v32];
          if ((unint64_t)(&v33[256 * v32] - v37) >= 0x20)
          {
            char v40 = v36;
            char v41 = v35;
            uint64_t v42 = v31 & 0x1FFFFFFFE0;
            do
            {
              long long v43 = *v40;
              *(v41 - 1) = *(v40 - 1);
              *char v41 = v43;
              v41 += 2;
              v40 += 2;
              v42 -= 32;
            }
            while (v42);
            if (v31 == v34) {
              goto LABEL_18;
            }
            v37 += v34;
            v38 += v34;
            int v39 = v31 & 0xFFFFFFE0;
          }
          else
          {
            int v39 = 0;
          }
          unsigned int v44 = v39 + 1;
          do
          {
            char v45 = *v37++;
            *v38++ = v45;
          }
          while (v30 > v44++);
LABEL_18:
          ++v32;
          v35 += 256;
          uint64_t v36 = (long long *)((char *)v36 + v29);
          if (v32 == v24) {
            return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock(v50, 256, *(_OWORD **)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
          }
        }
      }
    }
    for (uint64_t i = 0; i != v24; ++i)
    {
      uint64_t v48 = 0;
      do
      {
        v27[v48] = *(unsigned char *)(v28 + v48);
        ++v48;
      }
      while (v30 > v48);
      v27 += 256;
      v28 += v29;
    }
  }
  return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock(v50, 256, *(_OWORD **)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE18ELj4ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v2 = 0;
  uint64_t v51 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(a1 + 40);
  uint64_t v4 = *(unsigned char **)(a1 + 48);
  do
  {
    uint64_t v7 = (float64x2_t *)&v50[512
                           * (unint64_t)AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,4u>::kSubblockPositions[v2 + 1]
                           + 128
                           * (unint64_t)AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,4u>::kSubblockPositions[v2]];
    unsigned int v8 = *v4;
    if (v8 == 255)
    {
      float64x2_t v9 = *(float64x2_t *)(v3 + 16);
      float64x2_t v10 = *(float64x2_t *)(v3 + 32);
      float64x2_t v11 = *(float64x2_t *)(v3 + 48);
      float64x2_t v12 = *(float64x2_t *)(v3 + 64);
      float64x2_t v13 = *(float64x2_t *)(v3 + 80);
      float64x2_t v14 = *(float64x2_t *)(v3 + 96);
      float64x2_t v15 = *(float64x2_t *)(v3 + 112);
      float64x2_t v16 = *(float64x2_t *)(v3 + 128);
      float64x2_t v17 = *(float64x2_t *)(v3 + 144);
      float64x2_t v18 = *(float64x2_t *)(v3 + 160);
      float64x2_t v19 = *(float64x2_t *)(v3 + 176);
      float64x2_t v20 = *(float64x2_t *)(v3 + 192);
      float64x2_t v21 = *(float64x2_t *)(v3 + 208);
      float64x2_t v22 = *(float64x2_t *)(v3 + 224);
      float64x2_t v23 = *(float64x2_t *)(v3 + 240);
      *uint64_t v7 = *(float64x2_t *)v3;
      v7[1] = v9;
      v7[2] = v10;
      v7[3] = v11;
      v7[4] = v16;
      v7[5] = v17;
      v7[6] = v18;
      v7[7] = v19;
      v7[16] = v12;
      v7[17] = v13;
      v7[18] = v14;
      v7[19] = v15;
      uint64_t v6 = 256;
      v7[20] = v20;
      v7[21] = v21;
      v7[22] = v22;
      v7[23] = v23;
    }
    else if (v8 == 7)
    {
      float64x2_t v5 = vld1q_dup_f64((const double *)v3);
      *uint64_t v7 = v5;
      v7[1] = v5;
      v7[2] = v5;
      v7[3] = v5;
      v7[4] = v5;
      v7[5] = v5;
      v7[6] = v5;
      v7[7] = v5;
      v7[16] = v5;
      v7[17] = v5;
      v7[18] = v5;
      v7[19] = v5;
      v7[20] = v5;
      v7[21] = v5;
      v7[22] = v5;
      v7[23] = v5;
      uint64_t v6 = 8;
    }
    else if (*v4)
    {
      uint64_t v6 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((uint64_t)v7, 256, v3, v8);
    }
    else
    {
      uint64_t v6 = 0;
      v7[6] = 0u;
      v7[7] = 0u;
      v7[4] = 0u;
      v7[5] = 0u;
      v7[2] = 0u;
      v7[3] = 0u;
      *uint64_t v7 = 0u;
      v7[1] = 0u;
      v7[16] = 0u;
      v7[17] = 0u;
      v7[18] = 0u;
      v7[19] = 0u;
      v7[20] = 0u;
      v7[21] = 0u;
      v7[22] = 0u;
      v7[23] = 0u;
    }
    v3 += v6;
    ++v4;
    v2 += 2;
  }
  while (v2 != 16);
  uint64_t v24 = *(unsigned int *)(a1 + 80);
  if (v24 && *(_DWORD *)(a1 + 84))
  {
    unint64_t v25 = (unint64_t)*(unsigned int *)(a1 + 72) << 8;
    uint64_t v26 = 32 * *(unsigned int *)(a1 + 76);
    long long v27 = &v50[v25 + v26];
    uint64_t v28 = *(void *)(a1 + 56);
    uint64_t v29 = *(void *)(a1 + 64);
    unint64_t v30 = 32 * *(unsigned int *)(a1 + 84);
    if (v30 <= 1) {
      uint64_t v31 = 1;
    }
    else {
      uint64_t v31 = 32 * *(unsigned int *)(a1 + 84);
    }
    if (v31)
    {
      unint64_t v32 = (unint64_t)(v31 - 1) >> 32;
      if (!v32)
      {
        BOOL v33 = &v50[v25 + v26];
        uint64_t v34 = v31 & 0x1FFFFFFFE0;
        int v35 = &v50[v25 + 16 + v26];
        uint64_t v36 = (long long *)(v28 + 16);
        while (1)
        {
          uint32x2_t v37 = (char *)(v28 + v29 * v32);
          int v38 = &v27[256 * v32];
          if ((unint64_t)(&v33[256 * v32] - v37) >= 0x20)
          {
            char v40 = v36;
            char v41 = v35;
            uint64_t v42 = v31 & 0x1FFFFFFFE0;
            do
            {
              long long v43 = *v40;
              *(v41 - 1) = *(v40 - 1);
              *char v41 = v43;
              v41 += 2;
              v40 += 2;
              v42 -= 32;
            }
            while (v42);
            if (v31 == v34) {
              goto LABEL_18;
            }
            v37 += v34;
            v38 += v34;
            int v39 = v31 & 0xFFFFFFE0;
          }
          else
          {
            int v39 = 0;
          }
          unsigned int v44 = v39 + 1;
          do
          {
            char v45 = *v37++;
            *v38++ = v45;
          }
          while (v30 > v44++);
LABEL_18:
          ++v32;
          v35 += 256;
          uint64_t v36 = (long long *)((char *)v36 + v29);
          if (v32 == v24) {
            return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((uint64_t)v50, 256, *(void *)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
          }
        }
      }
    }
    for (uint64_t i = 0; i != v24; ++i)
    {
      uint64_t v48 = 0;
      do
      {
        v27[v48] = *(unsigned char *)(v28 + v48);
        ++v48;
      }
      while (v30 > v48);
      v27 += 256;
      v28 += v29;
    }
  }
  return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((uint64_t)v50, 256, *(void *)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
}

_OWORD *___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE18ELj4ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v2 = 0;
  uint64_t v51 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(a1 + 40);
  uint64_t v4 = *(unsigned char **)(a1 + 48);
  do
  {
    uint64_t v7 = (float64x2_t *)&v50[32
                           * (unint64_t)AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,4u>::kSubblockPositions[v2 + 1]
                           + 8
                           * (unint64_t)AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,4u>::kSubblockPositions[v2]];
    unsigned int v8 = *v4;
    if (v8 == 255)
    {
      float64x2_t v9 = *(float64x2_t *)(v3 + 16);
      float64x2_t v10 = *(float64x2_t *)(v3 + 32);
      float64x2_t v11 = *(float64x2_t *)(v3 + 48);
      float64x2_t v12 = *(float64x2_t *)(v3 + 64);
      float64x2_t v13 = *(float64x2_t *)(v3 + 80);
      float64x2_t v14 = *(float64x2_t *)(v3 + 96);
      float64x2_t v15 = *(float64x2_t *)(v3 + 112);
      float64x2_t v16 = *(float64x2_t *)(v3 + 128);
      float64x2_t v17 = *(float64x2_t *)(v3 + 144);
      float64x2_t v18 = *(float64x2_t *)(v3 + 160);
      float64x2_t v19 = *(float64x2_t *)(v3 + 176);
      float64x2_t v20 = *(float64x2_t *)(v3 + 192);
      float64x2_t v21 = *(float64x2_t *)(v3 + 208);
      float64x2_t v22 = *(float64x2_t *)(v3 + 224);
      float64x2_t v23 = *(float64x2_t *)(v3 + 240);
      *uint64_t v7 = *(float64x2_t *)v3;
      v7[1] = v9;
      v7[2] = v10;
      v7[3] = v11;
      v7[4] = v16;
      v7[5] = v17;
      v7[6] = v18;
      v7[7] = v19;
      v7[16] = v12;
      v7[17] = v13;
      v7[18] = v14;
      v7[19] = v15;
      uint64_t v6 = 256;
      v7[20] = v20;
      v7[21] = v21;
      v7[22] = v22;
      v7[23] = v23;
    }
    else if (v8 == 7)
    {
      float64x2_t v5 = vld1q_dup_f64((const double *)v3);
      *uint64_t v7 = v5;
      v7[1] = v5;
      v7[2] = v5;
      v7[3] = v5;
      v7[4] = v5;
      v7[5] = v5;
      v7[6] = v5;
      v7[7] = v5;
      v7[16] = v5;
      v7[17] = v5;
      v7[18] = v5;
      v7[19] = v5;
      v7[20] = v5;
      v7[21] = v5;
      v7[22] = v5;
      v7[23] = v5;
      uint64_t v6 = 8;
    }
    else if (*v4)
    {
      uint64_t v6 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((uint64_t)v7, 256, v3, v8);
    }
    else
    {
      uint64_t v6 = 0;
      v7[6] = 0u;
      v7[7] = 0u;
      v7[4] = 0u;
      v7[5] = 0u;
      v7[2] = 0u;
      v7[3] = 0u;
      *uint64_t v7 = 0u;
      v7[1] = 0u;
      v7[16] = 0u;
      v7[17] = 0u;
      v7[18] = 0u;
      v7[19] = 0u;
      v7[20] = 0u;
      v7[21] = 0u;
      v7[22] = 0u;
      v7[23] = 0u;
    }
    v3 += v6;
    ++v4;
    v2 += 2;
  }
  while (v2 != 16);
  uint64_t v24 = *(unsigned int *)(a1 + 80);
  if (v24 && *(_DWORD *)(a1 + 84))
  {
    unint64_t v25 = (unint64_t)*(unsigned int *)(a1 + 72) << 8;
    uint64_t v26 = 32 * *(unsigned int *)(a1 + 76);
    long long v27 = (char *)v50 + v25 + v26;
    uint64_t v28 = *(void *)(a1 + 56);
    uint64_t v29 = *(void *)(a1 + 64);
    unint64_t v30 = 32 * *(unsigned int *)(a1 + 84);
    if (v30 <= 1) {
      uint64_t v31 = 1;
    }
    else {
      uint64_t v31 = 32 * *(unsigned int *)(a1 + 84);
    }
    if (v31)
    {
      unint64_t v32 = (unint64_t)(v31 - 1) >> 32;
      if (!v32)
      {
        BOOL v33 = (char *)v50 + v25 + v26;
        uint64_t v34 = v31 & 0x1FFFFFFFE0;
        int v35 = (char *)&v50[1] + v25 + v26;
        uint64_t v36 = (long long *)(v28 + 16);
        while (1)
        {
          uint32x2_t v37 = (char *)(v28 + v29 * v32);
          int v38 = &v27[256 * v32];
          if ((unint64_t)(&v33[256 * v32] - v37) >= 0x20)
          {
            char v40 = v36;
            char v41 = v35;
            uint64_t v42 = v31 & 0x1FFFFFFFE0;
            do
            {
              long long v43 = *v40;
              *(v41 - 1) = *(v40 - 1);
              *char v41 = v43;
              v41 += 2;
              v40 += 2;
              v42 -= 32;
            }
            while (v42);
            if (v31 == v34) {
              goto LABEL_18;
            }
            v37 += v34;
            v38 += v34;
            int v39 = v31 & 0xFFFFFFE0;
          }
          else
          {
            int v39 = 0;
          }
          unsigned int v44 = v39 + 1;
          do
          {
            char v45 = *v37++;
            *v38++ = v45;
          }
          while (v30 > v44++);
LABEL_18:
          ++v32;
          v35 += 256;
          uint64_t v36 = (long long *)((char *)v36 + v29);
          if (v32 == v24) {
            return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock(v50, 256, *(_OWORD **)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
          }
        }
      }
    }
    for (uint64_t i = 0; i != v24; ++i)
    {
      uint64_t v48 = 0;
      do
      {
        v27[v48] = *(unsigned char *)(v28 + v48);
        ++v48;
      }
      while (v30 > v48);
      v27 += 256;
      v28 += v29;
    }
  }
  return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock(v50, 256, *(_OWORD **)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE18ELj4ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v2 = 0;
  uint64_t v51 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(a1 + 40);
  uint64_t v4 = *(unsigned char **)(a1 + 48);
  do
  {
    uint64_t v7 = (float64x2_t *)&v50[512
                           * (unint64_t)AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,4u>::kSubblockPositions[v2 + 1]
                           + 128
                           * (unint64_t)AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,4u>::kSubblockPositions[v2]];
    unsigned int v8 = *v4;
    if (v8 == 255)
    {
      float64x2_t v9 = *(float64x2_t *)(v3 + 16);
      float64x2_t v10 = *(float64x2_t *)(v3 + 32);
      float64x2_t v11 = *(float64x2_t *)(v3 + 48);
      float64x2_t v12 = *(float64x2_t *)(v3 + 64);
      float64x2_t v13 = *(float64x2_t *)(v3 + 80);
      float64x2_t v14 = *(float64x2_t *)(v3 + 96);
      float64x2_t v15 = *(float64x2_t *)(v3 + 112);
      float64x2_t v16 = *(float64x2_t *)(v3 + 128);
      float64x2_t v17 = *(float64x2_t *)(v3 + 144);
      float64x2_t v18 = *(float64x2_t *)(v3 + 160);
      float64x2_t v19 = *(float64x2_t *)(v3 + 176);
      float64x2_t v20 = *(float64x2_t *)(v3 + 192);
      float64x2_t v21 = *(float64x2_t *)(v3 + 208);
      float64x2_t v22 = *(float64x2_t *)(v3 + 224);
      float64x2_t v23 = *(float64x2_t *)(v3 + 240);
      *uint64_t v7 = *(float64x2_t *)v3;
      v7[1] = v9;
      v7[2] = v10;
      v7[3] = v11;
      v7[4] = v16;
      v7[5] = v17;
      v7[6] = v18;
      v7[7] = v19;
      v7[16] = v12;
      v7[17] = v13;
      v7[18] = v14;
      v7[19] = v15;
      uint64_t v6 = 256;
      v7[20] = v20;
      v7[21] = v21;
      v7[22] = v22;
      v7[23] = v23;
    }
    else if (v8 == 7)
    {
      float64x2_t v5 = vld1q_dup_f64((const double *)v3);
      *uint64_t v7 = v5;
      v7[1] = v5;
      v7[2] = v5;
      v7[3] = v5;
      v7[4] = v5;
      v7[5] = v5;
      v7[6] = v5;
      v7[7] = v5;
      v7[16] = v5;
      v7[17] = v5;
      v7[18] = v5;
      v7[19] = v5;
      v7[20] = v5;
      v7[21] = v5;
      v7[22] = v5;
      v7[23] = v5;
      uint64_t v6 = 8;
    }
    else if (*v4)
    {
      uint64_t v6 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((uint64_t)v7, 256, v3, v8);
    }
    else
    {
      uint64_t v6 = 0;
      v7[6] = 0u;
      v7[7] = 0u;
      v7[4] = 0u;
      v7[5] = 0u;
      v7[2] = 0u;
      v7[3] = 0u;
      *uint64_t v7 = 0u;
      v7[1] = 0u;
      v7[16] = 0u;
      v7[17] = 0u;
      v7[18] = 0u;
      v7[19] = 0u;
      v7[20] = 0u;
      v7[21] = 0u;
      v7[22] = 0u;
      v7[23] = 0u;
    }
    v3 += v6;
    ++v4;
    v2 += 2;
  }
  while (v2 != 16);
  uint64_t v24 = *(unsigned int *)(a1 + 80);
  if (v24 && *(_DWORD *)(a1 + 84))
  {
    unint64_t v25 = (unint64_t)*(unsigned int *)(a1 + 72) << 8;
    uint64_t v26 = 32 * *(unsigned int *)(a1 + 76);
    long long v27 = &v50[v25 + v26];
    uint64_t v28 = *(void *)(a1 + 56);
    uint64_t v29 = *(void *)(a1 + 64);
    unint64_t v30 = 32 * *(unsigned int *)(a1 + 84);
    if (v30 <= 1) {
      uint64_t v31 = 1;
    }
    else {
      uint64_t v31 = 32 * *(unsigned int *)(a1 + 84);
    }
    if (v31)
    {
      unint64_t v32 = (unint64_t)(v31 - 1) >> 32;
      if (!v32)
      {
        BOOL v33 = &v50[v25 + v26];
        uint64_t v34 = v31 & 0x1FFFFFFFE0;
        int v35 = &v50[v25 + 16 + v26];
        uint64_t v36 = (long long *)(v28 + 16);
        while (1)
        {
          uint32x2_t v37 = (char *)(v28 + v29 * v32);
          int v38 = &v27[256 * v32];
          if ((unint64_t)(&v33[256 * v32] - v37) >= 0x20)
          {
            char v40 = v36;
            char v41 = v35;
            uint64_t v42 = v31 & 0x1FFFFFFFE0;
            do
            {
              long long v43 = *v40;
              *(v41 - 1) = *(v40 - 1);
              *char v41 = v43;
              v41 += 2;
              v40 += 2;
              v42 -= 32;
            }
            while (v42);
            if (v31 == v34) {
              goto LABEL_18;
            }
            v37 += v34;
            v38 += v34;
            int v39 = v31 & 0xFFFFFFE0;
          }
          else
          {
            int v39 = 0;
          }
          unsigned int v44 = v39 + 1;
          do
          {
            char v45 = *v37++;
            *v38++ = v45;
          }
          while (v30 > v44++);
LABEL_18:
          ++v32;
          v35 += 256;
          uint64_t v36 = (long long *)((char *)v36 + v29);
          if (v32 == v24) {
            return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((uint64_t)v50, 256, *(void *)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
          }
        }
      }
    }
    for (uint64_t i = 0; i != v24; ++i)
    {
      uint64_t v48 = 0;
      do
      {
        v27[v48] = *(unsigned char *)(v28 + v48);
        ++v48;
      }
      while (v30 > v48);
      v27 += 256;
      v28 += v29;
    }
  }
  return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((uint64_t)v50, 256, *(void *)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE4ELj4ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1, int8x8_t a2, __n128 a3, __n128 a4)
{
  uint64_t v100 = *MEMORY[0x263EF8340];
  uint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressMacroblock((uint64_t)&v98, *(void *)(a1 + 40), *(unsigned __int8 **)(a1 + 48), a2, a3, a4);
  uint64_t v6 = *(unsigned int *)(a1 + 80);
  if (!v6 || !*(_DWORD *)(a1 + 84)) {
    goto LABEL_14;
  }
  unint64_t v7 = (unint64_t)*(unsigned int *)(a1 + 72) << 6;
  uint64_t v8 = 8 * *(unsigned int *)(a1 + 76);
  float64x2_t v9 = (char *)&v99[-1] + v7 + v8;
  uint64_t v10 = *(void *)(a1 + 56);
  uint64_t v11 = *(void *)(a1 + 64);
  unint64_t v12 = 8 * *(unsigned int *)(a1 + 84);
  if (v12 <= 1) {
    unint64_t v13 = 1;
  }
  else {
    unint64_t v13 = 8 * *(unsigned int *)(a1 + 84);
  }
  if (v13) {
    BOOL v14 = (v13 - 1) >> 32 == 0;
  }
  else {
    BOOL v14 = 0;
  }
  if (v14)
  {
    uint64_t v64 = (char *)&v99[-1] + v7 + v8;
    uint64_t v65 = v13 & 0x7FFFFFFF8;
    if (v13 < 0x20)
    {
      uint64_t v66 = 0;
      unsigned int v67 = (char *)&v99[-1] + v7 + v8;
      uint64_t result = *(void *)(a1 + 56);
      while (1)
      {
        char v68 = (char *)(v10 + v11 * v66);
        int v69 = &v9[64 * v66];
        if ((unint64_t)(&v64[64 * v66] - v68) > 0x1F)
        {
          v69 += v65;
          uint64_t v71 = v67;
          char v72 = (uint64_t *)result;
          uint64_t v73 = v13 & 0x7FFFFFFF8;
          do
          {
            uint64_t v74 = *v72++;
            *v71++ = v74;
            v73 -= 8;
          }
          while (v73);
          if (v13 == v65) {
            goto LABEL_72;
          }
          v68 += v65;
          int v70 = v13 & 0xFFFFFFF8;
        }
        else
        {
          int v70 = 0;
        }
        unsigned int v75 = v70 + 1;
        do
        {
          char v76 = *v68++;
          *v69++ = v76;
          BOOL v77 = v12 > v75++;
        }
        while (v77);
LABEL_72:
        ++v66;
        result += v11;
        v67 += 64;
        if (v66 == v6) {
          goto LABEL_14;
        }
      }
    }
    uint64_t v78 = 0;
    uint64_t v79 = v13 & 0x7FFFFFFE0;
    uint64_t result = v13 & 0x18;
    BOOL v80 = (char *)&v99[-1] + v7 + v8;
    char v81 = (char *)v99 + v7 + v8;
    int v82 = (long long *)(v10 + 16);
    int v83 = (uint64_t *)(v10 + (v13 & 0x7FFFFFFE0));
    BOOL v84 = &v80[v13 & 0x7FFFFFFE0];
    while (1)
    {
      uint64_t v85 = (char *)(v10 + v11 * v78);
      unint64_t v86 = &v9[64 * v78];
      if ((unint64_t)(&v64[64 * v78] - v85) >= 0x20)
      {
        unint64_t v90 = v82;
        unint64_t v91 = v81;
        uint64_t v92 = v13 & 0x7FFFFFFE0;
        do
        {
          long long v93 = *v90;
          *(v91 - 1) = *(v90 - 1);
          _OWORD *v91 = v93;
          v91 += 2;
          v90 += 2;
          v92 -= 32;
        }
        while (v92);
        if (v13 == v79) {
          goto LABEL_83;
        }
        if ((v13 & 0x18) != 0)
        {
          v86 += v65;
          uint64_t v94 = v84;
          unint64_t v95 = v83;
          unint64_t v96 = v65 - (v13 & 0x7FFFFFFE0);
          do
          {
            uint64_t v97 = *v95++;
            *(void *)uint64_t v94 = v97;
            v94 += 8;
            v96 -= 8;
          }
          while (v96);
          if (v13 == v65) {
            goto LABEL_83;
          }
          v85 += v65;
          int v87 = v13 & 0xFFFFFFF8;
        }
        else
        {
          v85 += v79;
          v86 += v79;
          int v87 = v13 & 0xFFFFFFE0;
        }
      }
      else
      {
        int v87 = 0;
      }
      unsigned int v88 = v87 + 1;
      do
      {
        char v89 = *v85++;
        *v86++ = v89;
        BOOL v77 = v12 > v88++;
      }
      while (v77);
LABEL_83:
      ++v78;
      v81 += 64;
      int v82 = (long long *)((char *)v82 + v11);
      int v83 = (uint64_t *)((char *)v83 + v11);
      v84 += 64;
      if (v78 == v6) {
        goto LABEL_14;
      }
    }
  }
  for (uint64_t i = 0; i != v6; ++i)
  {
    uint64_t v16 = 0;
    do
    {
      v9[v16] = *(unsigned char *)(v10 + v16);
      ++v16;
    }
    while (v12 > v16);
    v9 += 64;
    v10 += v11;
  }
LABEL_14:
  float64x2_t v18 = *(_OWORD **)(a1 + 40);
  float64x2_t v17 = *(char **)(a1 + 48);
  int v19 = *(unsigned __int8 *)(a1 + 88);
  int v20 = *(unsigned __int8 *)(a1 + 89);
  if (v19 >= 4) {
    int v21 = 4;
  }
  else {
    int v21 = *(unsigned __int8 *)(a1 + 88);
  }
  if (v20 >= 2) {
    int v22 = 2;
  }
  else {
    int v22 = *(unsigned __int8 *)(a1 + 89);
  }
  if (v21) {
    BOOL v23 = v22 == 0;
  }
  else {
    BOOL v23 = 1;
  }
  if (v23)
  {
    char v27 = 0;
  }
  else
  {
    long long v24 = v99[0];
    long long v25 = v99[3];
    long long v26 = v99[4];
    *float64x2_t v18 = v98;
    v18[1] = v25;
    v18[2] = v24;
    v18[3] = v26;
    v18 += 4;
    char v27 = 63;
  }
  char v28 = 0;
  *float64x2_t v17 = v27;
  if (v20 <= 2) {
    int v29 = 2;
  }
  else {
    int v29 = v20;
  }
  unsigned int v30 = v29 - 2;
  if (v30 >= 2) {
    int v31 = 2;
  }
  else {
    int v31 = v30;
  }
  if (v21 && v31)
  {
    long long v32 = v99[8];
    long long v33 = v99[11];
    long long v34 = v99[12];
    *float64x2_t v18 = v99[7];
    v18[1] = v33;
    v18[2] = v32;
    v18[3] = v34;
    v18 += 4;
    char v28 = 63;
  }
  v17[1] = v28;
  if (v19 <= 4) {
    int v19 = 4;
  }
  unsigned int v35 = v19 - 4;
  if (v35 >= 4) {
    unsigned int v35 = 4;
  }
  if (v35) {
    BOOL v36 = v22 == 0;
  }
  else {
    BOOL v36 = 1;
  }
  if (v36)
  {
    char v40 = 0;
  }
  else
  {
    long long v37 = v99[2];
    long long v38 = v99[5];
    long long v39 = v99[6];
    *float64x2_t v18 = v99[1];
    v18[1] = v38;
    v18[2] = v37;
    v18[3] = v39;
    v18 += 4;
    char v40 = 63;
  }
  char v41 = 0;
  v17[2] = v40;
  if (v35 && v31)
  {
    long long v42 = v99[10];
    long long v43 = v99[13];
    long long v44 = v99[14];
    *float64x2_t v18 = v99[9];
    v18[1] = v43;
    v18[2] = v42;
    v18[3] = v44;
    v18 += 4;
    char v41 = 63;
  }
  char v45 = 0;
  v17[3] = v41;
  if (v20 <= 4) {
    int v46 = 4;
  }
  else {
    int v46 = v20;
  }
  unsigned int v47 = v46 - 4;
  if (v47 >= 2) {
    unsigned int v47 = 2;
  }
  if (v21 && v47)
  {
    long long v48 = v99[16];
    long long v49 = v99[19];
    long long v50 = v99[20];
    *float64x2_t v18 = v99[15];
    v18[1] = v49;
    v18[2] = v48;
    v18[3] = v50;
    v18 += 4;
    char v45 = 63;
  }
  char v51 = 0;
  v17[4] = v45;
  if (v20 <= 6) {
    int v20 = 6;
  }
  unsigned int v52 = v20 - 6;
  if (v52 >= 2) {
    unsigned int v52 = 2;
  }
  if (v21 && v52)
  {
    long long v53 = v99[24];
    long long v54 = v99[27];
    long long v55 = v99[28];
    *float64x2_t v18 = v99[23];
    v18[1] = v54;
    v18[2] = v53;
    v18[3] = v55;
    v18 += 4;
    char v51 = 63;
  }
  char v56 = 0;
  v17[5] = v51;
  if (v35 && v47)
  {
    long long v57 = v99[18];
    long long v58 = v99[21];
    long long v59 = v99[22];
    *float64x2_t v18 = v99[17];
    v18[1] = v58;
    v18[2] = v57;
    v18[3] = v59;
    v18 += 4;
    char v56 = 63;
  }
  char v60 = 0;
  v17[6] = v56;
  if (v35 && v52)
  {
    long long v61 = v99[26];
    long long v62 = v99[29];
    long long v63 = v99[30];
    *float64x2_t v18 = v99[25];
    v18[1] = v62;
    v18[2] = v61;
    v18[3] = v63;
    char v60 = 63;
  }
  v17[7] = v60;
  return result;
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE4ELj4ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1, int8x8_t a2, __n128 a3, __n128 a4)
{
  uint64_t v53 = *MEMORY[0x263EF8340];
  AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressMacroblock((uint64_t)v52, *(void *)(a1 + 40), *(unsigned __int8 **)(a1 + 48), a2, a3, a4);
  uint64_t v5 = *(unsigned int *)(a1 + 80);
  if (!v5 || !*(_DWORD *)(a1 + 84)) {
    return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((uint64_t)v52, 64, *(int8x16_t **)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
  }
  unint64_t v6 = (unint64_t)*(unsigned int *)(a1 + 72) << 6;
  uint64_t v7 = 8 * *(unsigned int *)(a1 + 76);
  uint64_t v8 = &v52[v6 + v7];
  uint64_t v9 = *(void *)(a1 + 56);
  uint64_t v10 = *(void *)(a1 + 64);
  unint64_t v11 = 8 * *(unsigned int *)(a1 + 84);
  if (v11 <= 1) {
    unint64_t v12 = 1;
  }
  else {
    unint64_t v12 = 8 * *(unsigned int *)(a1 + 84);
  }
  if (v12) {
    BOOL v13 = (v12 - 1) >> 32 == 0;
  }
  else {
    BOOL v13 = 0;
  }
  if (v13)
  {
    float64x2_t v17 = &v52[v6 + v7];
    uint64_t v18 = v12 & 0x7FFFFFFF8;
    if (v12 < 0x20)
    {
      uint64_t v19 = 0;
      int v20 = &v52[v6 + v7];
      int v21 = *(uint64_t **)(a1 + 56);
      while (1)
      {
        int v22 = (char *)(v9 + v10 * v19);
        BOOL v23 = &v8[64 * v19];
        if ((unint64_t)(&v17[64 * v19] - v22) > 0x1F)
        {
          v23 += v18;
          long long v25 = v20;
          long long v26 = v21;
          uint64_t v27 = v12 & 0x7FFFFFFF8;
          do
          {
            uint64_t v28 = *v26++;
            *v25++ = v28;
            v27 -= 8;
          }
          while (v27);
          if (v12 == v18) {
            goto LABEL_17;
          }
          v22 += v18;
          int v24 = v12 & 0xFFFFFFF8;
        }
        else
        {
          int v24 = 0;
        }
        unsigned int v29 = v24 + 1;
        do
        {
          char v30 = *v22++;
          *v23++ = v30;
          BOOL v31 = v11 > v29++;
        }
        while (v31);
LABEL_17:
        ++v19;
        int v21 = (uint64_t *)((char *)v21 + v10);
        v20 += 64;
        if (v19 == v5) {
          return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((uint64_t)v52, 64, *(int8x16_t **)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
        }
      }
    }
    uint64_t v32 = 0;
    uint64_t v33 = v12 & 0x7FFFFFFE0;
    long long v34 = &v52[v6 + v7];
    unsigned int v35 = &v52[v6 + 16 + v7];
    BOOL v36 = (long long *)(v9 + 16);
    long long v37 = (uint64_t *)(v9 + (v12 & 0x7FFFFFFE0));
    for (uint64_t i = &v34[v12 & 0x7FFFFFFE0]; ; i += 8)
    {
      long long v39 = (char *)(v9 + v10 * v32);
      char v40 = &v8[64 * v32];
      if ((unint64_t)(&v17[64 * v32] - v39) >= 0x20)
      {
        long long v44 = v36;
        char v45 = v35;
        uint64_t v46 = v12 & 0x7FFFFFFE0;
        do
        {
          long long v47 = *v44;
          *(v45 - 1) = *(v44 - 1);
          *char v45 = v47;
          v45 += 2;
          v44 += 2;
          v46 -= 32;
        }
        while (v46);
        if (v12 == v33) {
          goto LABEL_28;
        }
        if ((v12 & 0x18) != 0)
        {
          v40 += v18;
          long long v48 = i;
          long long v49 = v37;
          unint64_t v50 = v18 - (v12 & 0x7FFFFFFE0);
          do
          {
            uint64_t v51 = *v49++;
            *v48++ = v51;
            v50 -= 8;
          }
          while (v50);
          if (v12 == v18) {
            goto LABEL_28;
          }
          v39 += v18;
          int v41 = v12 & 0xFFFFFFF8;
        }
        else
        {
          v39 += v33;
          v40 += v33;
          int v41 = v12 & 0xFFFFFFE0;
        }
      }
      else
      {
        int v41 = 0;
      }
      unsigned int v42 = v41 + 1;
      do
      {
        char v43 = *v39++;
        *v40++ = v43;
        BOOL v31 = v11 > v42++;
      }
      while (v31);
LABEL_28:
      ++v32;
      v35 += 64;
      BOOL v36 = (long long *)((char *)v36 + v10);
      long long v37 = (uint64_t *)((char *)v37 + v10);
      if (v32 == v5) {
        return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((uint64_t)v52, 64, *(int8x16_t **)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
      }
    }
  }
  for (uint64_t j = 0; j != v5; ++j)
  {
    uint64_t v15 = 0;
    do
    {
      v8[v15] = *(unsigned char *)(v9 + v15);
      ++v15;
    }
    while (v11 > v15);
    v8 += 64;
    v9 += v10;
  }
  return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((uint64_t)v52, 64, *(int8x16_t **)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE4ELj4ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1, int8x8_t a2, __n128 a3, __n128 a4)
{
  uint64_t v100 = *MEMORY[0x263EF8340];
  uint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressMacroblock((uint64_t)&v98, *(void *)(a1 + 40), *(unsigned __int8 **)(a1 + 48), a2, a3, a4);
  uint64_t v6 = *(unsigned int *)(a1 + 80);
  if (!v6 || !*(_DWORD *)(a1 + 84)) {
    goto LABEL_14;
  }
  unint64_t v7 = (unint64_t)*(unsigned int *)(a1 + 72) << 6;
  uint64_t v8 = 8 * *(unsigned int *)(a1 + 76);
  uint64_t v9 = (char *)&v99[-1] + v7 + v8;
  uint64_t v10 = *(void *)(a1 + 56);
  uint64_t v11 = *(void *)(a1 + 64);
  unint64_t v12 = 8 * *(unsigned int *)(a1 + 84);
  if (v12 <= 1) {
    unint64_t v13 = 1;
  }
  else {
    unint64_t v13 = 8 * *(unsigned int *)(a1 + 84);
  }
  if (v13) {
    BOOL v14 = (v13 - 1) >> 32 == 0;
  }
  else {
    BOOL v14 = 0;
  }
  if (v14)
  {
    uint64_t v64 = (char *)&v99[-1] + v7 + v8;
    uint64_t v65 = v13 & 0x7FFFFFFF8;
    if (v13 < 0x20)
    {
      uint64_t v66 = 0;
      unsigned int v67 = (char *)&v99[-1] + v7 + v8;
      uint64_t result = *(void *)(a1 + 56);
      while (1)
      {
        char v68 = (char *)(v10 + v11 * v66);
        int v69 = &v9[64 * v66];
        if ((unint64_t)(&v64[64 * v66] - v68) > 0x1F)
        {
          v69 += v65;
          uint64_t v71 = v67;
          char v72 = (uint64_t *)result;
          uint64_t v73 = v13 & 0x7FFFFFFF8;
          do
          {
            uint64_t v74 = *v72++;
            *v71++ = v74;
            v73 -= 8;
          }
          while (v73);
          if (v13 == v65) {
            goto LABEL_72;
          }
          v68 += v65;
          int v70 = v13 & 0xFFFFFFF8;
        }
        else
        {
          int v70 = 0;
        }
        unsigned int v75 = v70 + 1;
        do
        {
          char v76 = *v68++;
          *v69++ = v76;
          BOOL v77 = v12 > v75++;
        }
        while (v77);
LABEL_72:
        ++v66;
        result += v11;
        v67 += 64;
        if (v66 == v6) {
          goto LABEL_14;
        }
      }
    }
    uint64_t v78 = 0;
    uint64_t v79 = v13 & 0x7FFFFFFE0;
    uint64_t result = v13 & 0x18;
    BOOL v80 = (char *)&v99[-1] + v7 + v8;
    char v81 = (char *)v99 + v7 + v8;
    int v82 = (long long *)(v10 + 16);
    int v83 = (uint64_t *)(v10 + (v13 & 0x7FFFFFFE0));
    BOOL v84 = &v80[v13 & 0x7FFFFFFE0];
    while (1)
    {
      uint64_t v85 = (char *)(v10 + v11 * v78);
      unint64_t v86 = &v9[64 * v78];
      if ((unint64_t)(&v64[64 * v78] - v85) >= 0x20)
      {
        unint64_t v90 = v82;
        unint64_t v91 = v81;
        uint64_t v92 = v13 & 0x7FFFFFFE0;
        do
        {
          long long v93 = *v90;
          *(v91 - 1) = *(v90 - 1);
          _OWORD *v91 = v93;
          v91 += 2;
          v90 += 2;
          v92 -= 32;
        }
        while (v92);
        if (v13 == v79) {
          goto LABEL_83;
        }
        if ((v13 & 0x18) != 0)
        {
          v86 += v65;
          uint64_t v94 = v84;
          unint64_t v95 = v83;
          unint64_t v96 = v65 - (v13 & 0x7FFFFFFE0);
          do
          {
            uint64_t v97 = *v95++;
            *(void *)uint64_t v94 = v97;
            v94 += 8;
            v96 -= 8;
          }
          while (v96);
          if (v13 == v65) {
            goto LABEL_83;
          }
          v85 += v65;
          int v87 = v13 & 0xFFFFFFF8;
        }
        else
        {
          v85 += v79;
          v86 += v79;
          int v87 = v13 & 0xFFFFFFE0;
        }
      }
      else
      {
        int v87 = 0;
      }
      unsigned int v88 = v87 + 1;
      do
      {
        char v89 = *v85++;
        *v86++ = v89;
        BOOL v77 = v12 > v88++;
      }
      while (v77);
LABEL_83:
      ++v78;
      v81 += 64;
      int v82 = (long long *)((char *)v82 + v11);
      int v83 = (uint64_t *)((char *)v83 + v11);
      v84 += 64;
      if (v78 == v6) {
        goto LABEL_14;
      }
    }
  }
  for (uint64_t i = 0; i != v6; ++i)
  {
    uint64_t v16 = 0;
    do
    {
      v9[v16] = *(unsigned char *)(v10 + v16);
      ++v16;
    }
    while (v12 > v16);
    v9 += 64;
    v10 += v11;
  }
LABEL_14:
  uint64_t v18 = *(_OWORD **)(a1 + 40);
  float64x2_t v17 = *(char **)(a1 + 48);
  int v19 = *(unsigned __int8 *)(a1 + 88);
  int v20 = *(unsigned __int8 *)(a1 + 89);
  if (v19 >= 4) {
    int v21 = 4;
  }
  else {
    int v21 = *(unsigned __int8 *)(a1 + 88);
  }
  if (v20 >= 2) {
    int v22 = 2;
  }
  else {
    int v22 = *(unsigned __int8 *)(a1 + 89);
  }
  if (v21) {
    BOOL v23 = v22 == 0;
  }
  else {
    BOOL v23 = 1;
  }
  if (v23)
  {
    char v27 = 0;
  }
  else
  {
    long long v24 = v99[0];
    long long v25 = v99[3];
    long long v26 = v99[4];
    *uint64_t v18 = v98;
    v18[1] = v25;
    v18[2] = v24;
    v18[3] = v26;
    v18 += 4;
    char v27 = 63;
  }
  char v28 = 0;
  *float64x2_t v17 = v27;
  if (v20 <= 2) {
    int v29 = 2;
  }
  else {
    int v29 = v20;
  }
  unsigned int v30 = v29 - 2;
  if (v30 >= 2) {
    int v31 = 2;
  }
  else {
    int v31 = v30;
  }
  if (v21 && v31)
  {
    long long v32 = v99[8];
    long long v33 = v99[11];
    long long v34 = v99[12];
    *uint64_t v18 = v99[7];
    v18[1] = v33;
    v18[2] = v32;
    v18[3] = v34;
    v18 += 4;
    char v28 = 63;
  }
  v17[1] = v28;
  if (v19 <= 4) {
    int v19 = 4;
  }
  unsigned int v35 = v19 - 4;
  if (v35 >= 4) {
    unsigned int v35 = 4;
  }
  if (v35) {
    BOOL v36 = v22 == 0;
  }
  else {
    BOOL v36 = 1;
  }
  if (v36)
  {
    char v40 = 0;
  }
  else
  {
    long long v37 = v99[2];
    long long v38 = v99[5];
    long long v39 = v99[6];
    *uint64_t v18 = v99[1];
    v18[1] = v38;
    v18[2] = v37;
    v18[3] = v39;
    v18 += 4;
    char v40 = 63;
  }
  char v41 = 0;
  v17[2] = v40;
  if (v35 && v31)
  {
    long long v42 = v99[10];
    long long v43 = v99[13];
    long long v44 = v99[14];
    *uint64_t v18 = v99[9];
    v18[1] = v43;
    v18[2] = v42;
    v18[3] = v44;
    v18 += 4;
    char v41 = 63;
  }
  char v45 = 0;
  v17[3] = v41;
  if (v20 <= 4) {
    int v46 = 4;
  }
  else {
    int v46 = v20;
  }
  unsigned int v47 = v46 - 4;
  if (v47 >= 2) {
    unsigned int v47 = 2;
  }
  if (v21 && v47)
  {
    long long v48 = v99[16];
    long long v49 = v99[19];
    long long v50 = v99[20];
    *uint64_t v18 = v99[15];
    v18[1] = v49;
    v18[2] = v48;
    v18[3] = v50;
    v18 += 4;
    char v45 = 63;
  }
  char v51 = 0;
  v17[4] = v45;
  if (v20 <= 6) {
    int v20 = 6;
  }
  unsigned int v52 = v20 - 6;
  if (v52 >= 2) {
    unsigned int v52 = 2;
  }
  if (v21 && v52)
  {
    long long v53 = v99[24];
    long long v54 = v99[27];
    long long v55 = v99[28];
    *uint64_t v18 = v99[23];
    v18[1] = v54;
    v18[2] = v53;
    v18[3] = v55;
    v18 += 4;
    char v51 = 63;
  }
  char v56 = 0;
  v17[5] = v51;
  if (v35 && v47)
  {
    long long v57 = v99[18];
    long long v58 = v99[21];
    long long v59 = v99[22];
    *uint64_t v18 = v99[17];
    v18[1] = v58;
    v18[2] = v57;
    v18[3] = v59;
    v18 += 4;
    char v56 = 63;
  }
  char v60 = 0;
  v17[6] = v56;
  if (v35 && v52)
  {
    long long v61 = v99[26];
    long long v62 = v99[29];
    long long v63 = v99[30];
    *uint64_t v18 = v99[25];
    v18[1] = v62;
    v18[2] = v61;
    v18[3] = v63;
    char v60 = 63;
  }
  v17[7] = v60;
  return result;
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE4ELj4ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1, int8x8_t a2, __n128 a3, __n128 a4)
{
  uint64_t v53 = *MEMORY[0x263EF8340];
  AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressMacroblock((uint64_t)v52, *(void *)(a1 + 40), *(unsigned __int8 **)(a1 + 48), a2, a3, a4);
  uint64_t v5 = *(unsigned int *)(a1 + 80);
  if (!v5 || !*(_DWORD *)(a1 + 84)) {
    return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((uint64_t)v52, 64, *(int8x16_t **)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
  }
  unint64_t v6 = (unint64_t)*(unsigned int *)(a1 + 72) << 6;
  uint64_t v7 = 8 * *(unsigned int *)(a1 + 76);
  uint64_t v8 = &v52[v6 + v7];
  uint64_t v9 = *(void *)(a1 + 56);
  uint64_t v10 = *(void *)(a1 + 64);
  unint64_t v11 = 8 * *(unsigned int *)(a1 + 84);
  if (v11 <= 1) {
    unint64_t v12 = 1;
  }
  else {
    unint64_t v12 = 8 * *(unsigned int *)(a1 + 84);
  }
  if (v12) {
    BOOL v13 = (v12 - 1) >> 32 == 0;
  }
  else {
    BOOL v13 = 0;
  }
  if (v13)
  {
    float64x2_t v17 = &v52[v6 + v7];
    uint64_t v18 = v12 & 0x7FFFFFFF8;
    if (v12 < 0x20)
    {
      uint64_t v19 = 0;
      int v20 = &v52[v6 + v7];
      int v21 = *(uint64_t **)(a1 + 56);
      while (1)
      {
        int v22 = (char *)(v9 + v10 * v19);
        BOOL v23 = &v8[64 * v19];
        if ((unint64_t)(&v17[64 * v19] - v22) > 0x1F)
        {
          v23 += v18;
          long long v25 = v20;
          long long v26 = v21;
          uint64_t v27 = v12 & 0x7FFFFFFF8;
          do
          {
            uint64_t v28 = *v26++;
            *v25++ = v28;
            v27 -= 8;
          }
          while (v27);
          if (v12 == v18) {
            goto LABEL_17;
          }
          v22 += v18;
          int v24 = v12 & 0xFFFFFFF8;
        }
        else
        {
          int v24 = 0;
        }
        unsigned int v29 = v24 + 1;
        do
        {
          char v30 = *v22++;
          *v23++ = v30;
          BOOL v31 = v11 > v29++;
        }
        while (v31);
LABEL_17:
        ++v19;
        int v21 = (uint64_t *)((char *)v21 + v10);
        v20 += 64;
        if (v19 == v5) {
          return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((uint64_t)v52, 64, *(int8x16_t **)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
        }
      }
    }
    uint64_t v32 = 0;
    uint64_t v33 = v12 & 0x7FFFFFFE0;
    long long v34 = &v52[v6 + v7];
    unsigned int v35 = &v52[v6 + 16 + v7];
    BOOL v36 = (long long *)(v9 + 16);
    long long v37 = (uint64_t *)(v9 + (v12 & 0x7FFFFFFE0));
    for (uint64_t i = &v34[v12 & 0x7FFFFFFE0]; ; i += 8)
    {
      long long v39 = (char *)(v9 + v10 * v32);
      char v40 = &v8[64 * v32];
      if ((unint64_t)(&v17[64 * v32] - v39) >= 0x20)
      {
        long long v44 = v36;
        char v45 = v35;
        uint64_t v46 = v12 & 0x7FFFFFFE0;
        do
        {
          long long v47 = *v44;
          *(v45 - 1) = *(v44 - 1);
          *char v45 = v47;
          v45 += 2;
          v44 += 2;
          v46 -= 32;
        }
        while (v46);
        if (v12 == v33) {
          goto LABEL_28;
        }
        if ((v12 & 0x18) != 0)
        {
          v40 += v18;
          long long v48 = i;
          long long v49 = v37;
          unint64_t v50 = v18 - (v12 & 0x7FFFFFFE0);
          do
          {
            uint64_t v51 = *v49++;
            *v48++ = v51;
            v50 -= 8;
          }
          while (v50);
          if (v12 == v18) {
            goto LABEL_28;
          }
          v39 += v18;
          int v41 = v12 & 0xFFFFFFF8;
        }
        else
        {
          v39 += v33;
          v40 += v33;
          int v41 = v12 & 0xFFFFFFE0;
        }
      }
      else
      {
        int v41 = 0;
      }
      unsigned int v42 = v41 + 1;
      do
      {
        char v43 = *v39++;
        *v40++ = v43;
        BOOL v31 = v11 > v42++;
      }
      while (v31);
LABEL_28:
      ++v32;
      v35 += 64;
      BOOL v36 = (long long *)((char *)v36 + v10);
      long long v37 = (uint64_t *)((char *)v37 + v10);
      if (v32 == v5) {
        return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((uint64_t)v52, 64, *(int8x16_t **)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
      }
    }
  }
  for (uint64_t j = 0; j != v5; ++j)
  {
    uint64_t v15 = 0;
    do
    {
      v8[v15] = *(unsigned char *)(v9 + v15);
      ++v15;
    }
    while (v11 > v15);
    v8 += 64;
    v9 += v10;
  }
  return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((uint64_t)v52, 64, *(int8x16_t **)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE17ELj4ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1, int8x8_t a2)
{
  uint64_t v31 = *MEMORY[0x263EF8340];
  AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressMacroblock(v30, *(void *)(a1 + 40), *(unsigned __int8 **)(a1 + 48), a2);
  uint64_t v3 = *(unsigned int *)(a1 + 80);
  if (!v3 || !*(_DWORD *)(a1 + 84)) {
    return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((uint64_t)v30, 256, *(_OWORD **)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
  }
  unint64_t v4 = (unint64_t)*(unsigned int *)(a1 + 72) << 8;
  uint64_t v5 = 32 * *(unsigned int *)(a1 + 76);
  unint64_t v6 = (char *)v30 + v4 + v5;
  uint64_t v7 = *(void *)(a1 + 56);
  uint64_t v8 = *(void *)(a1 + 64);
  unint64_t v9 = 32 * *(unsigned int *)(a1 + 84);
  if (v9 <= 1) {
    uint64_t v10 = 1;
  }
  else {
    uint64_t v10 = 32 * *(unsigned int *)(a1 + 84);
  }
  if (v10) {
    BOOL v11 = (unint64_t)(v10 - 1) >> 32 == 0;
  }
  else {
    BOOL v11 = 0;
  }
  if (v11)
  {
    uint64_t v15 = 0;
    uint64_t v16 = (char *)v30 + v4 + v5;
    uint64_t v17 = v10 & 0x1FFFFFFFE0;
    uint64_t v18 = (char *)&v30[1] + v4 + v5;
    uint64_t v19 = (long long *)(v7 + 16);
    while (1)
    {
      int v20 = (char *)(v7 + v8 * v15);
      int v21 = &v6[256 * v15];
      if ((unint64_t)(&v16[256 * v15] - v20) >= 0x20)
      {
        BOOL v23 = v19;
        int v24 = v18;
        uint64_t v25 = v10 & 0x1FFFFFFFE0;
        do
        {
          long long v26 = *v23;
          *(v24 - 1) = *(v23 - 1);
          *int v24 = v26;
          v24 += 2;
          v23 += 2;
          v25 -= 32;
        }
        while (v25);
        if (v10 == v17) {
          goto LABEL_16;
        }
        v20 += v17;
        v21 += v17;
        int v22 = v10 & 0xFFFFFFE0;
      }
      else
      {
        int v22 = 0;
      }
      unsigned int v27 = v22 + 1;
      do
      {
        char v28 = *v20++;
        *v21++ = v28;
      }
      while (v9 > v27++);
LABEL_16:
      ++v15;
      v18 += 256;
      uint64_t v19 = (long long *)((char *)v19 + v8);
      if (v15 == v3) {
        return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((uint64_t)v30, 256, *(_OWORD **)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
      }
    }
  }
  for (uint64_t i = 0; i != v3; ++i)
  {
    uint64_t v13 = 0;
    do
    {
      v6[v13] = *(unsigned char *)(v7 + v13);
      ++v13;
    }
    while (v9 > v13);
    v6 += 256;
    v7 += v8;
  }
  return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((uint64_t)v30, 256, *(_OWORD **)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE17ELj4ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1, int8x8_t a2)
{
  uint64_t v31 = *MEMORY[0x263EF8340];
  AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressMacroblock(v30, *(void *)(a1 + 40), *(unsigned __int8 **)(a1 + 48), a2);
  uint64_t v3 = *(unsigned int *)(a1 + 80);
  if (!v3 || !*(_DWORD *)(a1 + 84)) {
    return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((uint64_t)v30, 256, *(void *)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
  }
  unint64_t v4 = (unint64_t)*(unsigned int *)(a1 + 72) << 8;
  uint64_t v5 = 32 * *(unsigned int *)(a1 + 76);
  unint64_t v6 = (char *)v30 + v4 + v5;
  uint64_t v7 = *(void *)(a1 + 56);
  uint64_t v8 = *(void *)(a1 + 64);
  unint64_t v9 = 32 * *(unsigned int *)(a1 + 84);
  if (v9 <= 1) {
    uint64_t v10 = 1;
  }
  else {
    uint64_t v10 = 32 * *(unsigned int *)(a1 + 84);
  }
  if (v10) {
    BOOL v11 = (unint64_t)(v10 - 1) >> 32 == 0;
  }
  else {
    BOOL v11 = 0;
  }
  if (v11)
  {
    uint64_t v15 = 0;
    uint64_t v16 = (char *)v30 + v4 + v5;
    uint64_t v17 = v10 & 0x1FFFFFFFE0;
    uint64_t v18 = (char *)&v30[1] + v4 + v5;
    uint64_t v19 = (long long *)(v7 + 16);
    while (1)
    {
      int v20 = (char *)(v7 + v8 * v15);
      int v21 = &v6[256 * v15];
      if ((unint64_t)(&v16[256 * v15] - v20) >= 0x20)
      {
        BOOL v23 = v19;
        int v24 = v18;
        uint64_t v25 = v10 & 0x1FFFFFFFE0;
        do
        {
          long long v26 = *v23;
          *(v24 - 1) = *(v23 - 1);
          *int v24 = v26;
          v24 += 2;
          v23 += 2;
          v25 -= 32;
        }
        while (v25);
        if (v10 == v17) {
          goto LABEL_16;
        }
        v20 += v17;
        v21 += v17;
        int v22 = v10 & 0xFFFFFFE0;
      }
      else
      {
        int v22 = 0;
      }
      unsigned int v27 = v22 + 1;
      do
      {
        char v28 = *v20++;
        *v21++ = v28;
      }
      while (v9 > v27++);
LABEL_16:
      ++v15;
      v18 += 256;
      uint64_t v19 = (long long *)((char *)v19 + v8);
      if (v15 == v3) {
        return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((uint64_t)v30, 256, *(void *)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
      }
    }
  }
  for (uint64_t i = 0; i != v3; ++i)
  {
    uint64_t v13 = 0;
    do
    {
      v6[v13] = *(unsigned char *)(v7 + v13);
      ++v13;
    }
    while (v9 > v13);
    v6 += 256;
    v7 += v8;
  }
  return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((uint64_t)v30, 256, *(void *)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE17ELj4ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1, int8x8_t a2)
{
  uint64_t v31 = *MEMORY[0x263EF8340];
  AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressMacroblock(v30, *(void *)(a1 + 40), *(unsigned __int8 **)(a1 + 48), a2);
  uint64_t v3 = *(unsigned int *)(a1 + 80);
  if (!v3 || !*(_DWORD *)(a1 + 84)) {
    return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((uint64_t)v30, 256, *(_OWORD **)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
  }
  unint64_t v4 = (unint64_t)*(unsigned int *)(a1 + 72) << 8;
  uint64_t v5 = 32 * *(unsigned int *)(a1 + 76);
  unint64_t v6 = (char *)v30 + v4 + v5;
  uint64_t v7 = *(void *)(a1 + 56);
  uint64_t v8 = *(void *)(a1 + 64);
  unint64_t v9 = 32 * *(unsigned int *)(a1 + 84);
  if (v9 <= 1) {
    uint64_t v10 = 1;
  }
  else {
    uint64_t v10 = 32 * *(unsigned int *)(a1 + 84);
  }
  if (v10) {
    BOOL v11 = (unint64_t)(v10 - 1) >> 32 == 0;
  }
  else {
    BOOL v11 = 0;
  }
  if (v11)
  {
    uint64_t v15 = 0;
    uint64_t v16 = (char *)v30 + v4 + v5;
    uint64_t v17 = v10 & 0x1FFFFFFFE0;
    uint64_t v18 = (char *)&v30[1] + v4 + v5;
    uint64_t v19 = (long long *)(v7 + 16);
    while (1)
    {
      int v20 = (char *)(v7 + v8 * v15);
      int v21 = &v6[256 * v15];
      if ((unint64_t)(&v16[256 * v15] - v20) >= 0x20)
      {
        BOOL v23 = v19;
        int v24 = v18;
        uint64_t v25 = v10 & 0x1FFFFFFFE0;
        do
        {
          long long v26 = *v23;
          *(v24 - 1) = *(v23 - 1);
          *int v24 = v26;
          v24 += 2;
          v23 += 2;
          v25 -= 32;
        }
        while (v25);
        if (v10 == v17) {
          goto LABEL_16;
        }
        v20 += v17;
        v21 += v17;
        int v22 = v10 & 0xFFFFFFE0;
      }
      else
      {
        int v22 = 0;
      }
      unsigned int v27 = v22 + 1;
      do
      {
        char v28 = *v20++;
        *v21++ = v28;
      }
      while (v9 > v27++);
LABEL_16:
      ++v15;
      v18 += 256;
      uint64_t v19 = (long long *)((char *)v19 + v8);
      if (v15 == v3) {
        return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((uint64_t)v30, 256, *(_OWORD **)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
      }
    }
  }
  for (uint64_t i = 0; i != v3; ++i)
  {
    uint64_t v13 = 0;
    do
    {
      v6[v13] = *(unsigned char *)(v7 + v13);
      ++v13;
    }
    while (v9 > v13);
    v6 += 256;
    v7 += v8;
  }
  return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((uint64_t)v30, 256, *(_OWORD **)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE17ELj4ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1, int8x8_t a2)
{
  uint64_t v31 = *MEMORY[0x263EF8340];
  AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressMacroblock(v30, *(void *)(a1 + 40), *(unsigned __int8 **)(a1 + 48), a2);
  uint64_t v3 = *(unsigned int *)(a1 + 80);
  if (!v3 || !*(_DWORD *)(a1 + 84)) {
    return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((uint64_t)v30, 256, *(void *)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
  }
  unint64_t v4 = (unint64_t)*(unsigned int *)(a1 + 72) << 8;
  uint64_t v5 = 32 * *(unsigned int *)(a1 + 76);
  unint64_t v6 = (char *)v30 + v4 + v5;
  uint64_t v7 = *(void *)(a1 + 56);
  uint64_t v8 = *(void *)(a1 + 64);
  unint64_t v9 = 32 * *(unsigned int *)(a1 + 84);
  if (v9 <= 1) {
    uint64_t v10 = 1;
  }
  else {
    uint64_t v10 = 32 * *(unsigned int *)(a1 + 84);
  }
  if (v10) {
    BOOL v11 = (unint64_t)(v10 - 1) >> 32 == 0;
  }
  else {
    BOOL v11 = 0;
  }
  if (v11)
  {
    uint64_t v15 = 0;
    uint64_t v16 = (char *)v30 + v4 + v5;
    uint64_t v17 = v10 & 0x1FFFFFFFE0;
    uint64_t v18 = (char *)&v30[1] + v4 + v5;
    uint64_t v19 = (long long *)(v7 + 16);
    while (1)
    {
      int v20 = (char *)(v7 + v8 * v15);
      int v21 = &v6[256 * v15];
      if ((unint64_t)(&v16[256 * v15] - v20) >= 0x20)
      {
        BOOL v23 = v19;
        int v24 = v18;
        uint64_t v25 = v10 & 0x1FFFFFFFE0;
        do
        {
          long long v26 = *v23;
          *(v24 - 1) = *(v23 - 1);
          *int v24 = v26;
          v24 += 2;
          v23 += 2;
          v25 -= 32;
        }
        while (v25);
        if (v10 == v17) {
          goto LABEL_16;
        }
        v20 += v17;
        v21 += v17;
        int v22 = v10 & 0xFFFFFFE0;
      }
      else
      {
        int v22 = 0;
      }
      unsigned int v27 = v22 + 1;
      do
      {
        char v28 = *v20++;
        *v21++ = v28;
      }
      while (v9 > v27++);
LABEL_16:
      ++v15;
      v18 += 256;
      uint64_t v19 = (long long *)((char *)v19 + v8);
      if (v15 == v3) {
        return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((uint64_t)v30, 256, *(void *)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
      }
    }
  }
  for (uint64_t i = 0; i != v3; ++i)
  {
    uint64_t v13 = 0;
    do
    {
      v6[v13] = *(unsigned char *)(v7 + v13);
      ++v13;
    }
    while (v9 > v13);
    v6 += 256;
    v7 += v8;
  }
  return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((uint64_t)v30, 256, *(void *)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
}

_OWORD *___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE11ELj4ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1, int32x4_t a2, int32x4_t a3)
{
  uint64_t v52 = *MEMORY[0x263EF8340];
  AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressMacroblock((uint64_t)v51, *(void *)(a1 + 40), *(unsigned __int8 **)(a1 + 48), a2, a3);
  uint64_t v4 = *(unsigned int *)(a1 + 80);
  if (!v4 || !*(_DWORD *)(a1 + 84)) {
    return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock(v51, 128, *(_OWORD **)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
  }
  unint64_t v5 = (unint64_t)*(unsigned int *)(a1 + 72) << 7;
  uint64_t v6 = 16 * *(unsigned int *)(a1 + 76);
  uint64_t v7 = (char *)v51 + v5 + v6;
  uint64_t v8 = *(void *)(a1 + 56);
  uint64_t v9 = *(void *)(a1 + 64);
  unint64_t v10 = 16 * *(unsigned int *)(a1 + 84);
  if (v10 <= 1) {
    unint64_t v11 = 1;
  }
  else {
    unint64_t v11 = 16 * *(unsigned int *)(a1 + 84);
  }
  if (v11) {
    BOOL v12 = (v11 - 1) >> 32 == 0;
  }
  else {
    BOOL v12 = 0;
  }
  if (v12)
  {
    uint64_t v16 = (char *)v51 + v5 + v6;
    uint64_t v17 = v11 & 0xFFFFFFFF0;
    if (v11 < 0x20)
    {
      uint64_t v18 = 0;
      uint64_t v19 = (char *)v51 + v5 + v6;
      int v20 = *(uint64_t **)(a1 + 56);
      while (1)
      {
        int v21 = (char *)(v8 + v9 * v18);
        int v22 = &v7[128 * v18];
        if ((unint64_t)(&v16[128 * v18] - v21) > 0x1F)
        {
          v22 += v17;
          int v24 = v19;
          uint64_t v25 = v20;
          uint64_t v26 = v11 & 0xFFFFFFFF0;
          do
          {
            uint64_t v27 = *v25++;
            *v24++ = v27;
            v26 -= 8;
          }
          while (v26);
          if (v11 == v17) {
            goto LABEL_17;
          }
          v21 += v17;
          int v23 = v11 & 0xFFFFFFF0;
        }
        else
        {
          int v23 = 0;
        }
        unsigned int v28 = v23 + 1;
        do
        {
          char v29 = *v21++;
          *v22++ = v29;
          BOOL v30 = v10 > v28++;
        }
        while (v30);
LABEL_17:
        ++v18;
        int v20 = (uint64_t *)((char *)v20 + v9);
        v19 += 128;
        if (v18 == v4) {
          return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock(v51, 128, *(_OWORD **)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
        }
      }
    }
    uint64_t v31 = 0;
    uint64_t v32 = v11 & 0xFFFFFFFE0;
    uint64_t v33 = (char *)v51 + v5 + v6;
    long long v34 = (char *)&v51[1] + v5 + v6;
    unsigned int v35 = (long long *)(v8 + 16);
    BOOL v36 = (uint64_t *)(v8 + (v11 & 0xFFFFFFFE0));
    for (uint64_t i = &v33[v11 & 0xFFFFFFFE0]; ; i += 128)
    {
      long long v38 = (char *)(v8 + v9 * v31);
      long long v39 = &v7[128 * v31];
      if ((unint64_t)(&v16[128 * v31] - v38) >= 0x20)
      {
        int v41 = v35;
        unsigned int v42 = v34;
        uint64_t v43 = v11 & 0xFFFFFFFE0;
        do
        {
          long long v44 = *v41;
          *(v42 - 1) = *(v41 - 1);
          *unsigned int v42 = v44;
          v42 += 2;
          v41 += 2;
          v43 -= 32;
        }
        while (v43);
        if (v11 == v32) {
          goto LABEL_28;
        }
        if ((v11 & 0x10) != 0)
        {
          v39 += v17;
          char v45 = i;
          uint64_t v46 = v36;
          unint64_t v47 = v17 - (v11 & 0xFFFFFFFE0);
          do
          {
            uint64_t v48 = *v46++;
            *(void *)char v45 = v48;
            v45 += 8;
            v47 -= 8;
          }
          while (v47);
          if (v11 == v17) {
            goto LABEL_28;
          }
          v38 += v17;
          int v40 = v11 & 0xFFFFFFF0;
        }
        else
        {
          v38 += v32;
          v39 += v32;
          int v40 = v11 & 0xFFFFFFE0;
        }
      }
      else
      {
        int v40 = 0;
      }
      unsigned int v49 = v40 + 1;
      do
      {
        char v50 = *v38++;
        *v39++ = v50;
        BOOL v30 = v10 > v49++;
      }
      while (v30);
LABEL_28:
      ++v31;
      v34 += 128;
      unsigned int v35 = (long long *)((char *)v35 + v9);
      BOOL v36 = (uint64_t *)((char *)v36 + v9);
      if (v31 == v4) {
        return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock(v51, 128, *(_OWORD **)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
      }
    }
  }
  for (uint64_t j = 0; j != v4; ++j)
  {
    uint64_t v14 = 0;
    do
    {
      v7[v14] = *(unsigned char *)(v8 + v14);
      ++v14;
    }
    while (v10 > v14);
    v7 += 128;
    v8 += v9;
  }
  return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock(v51, 128, *(_OWORD **)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE11ELj4ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1, int32x4_t a2, int32x4_t a3)
{
  uint64_t v52 = *MEMORY[0x263EF8340];
  AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressMacroblock((uint64_t)v51, *(void *)(a1 + 40), *(unsigned __int8 **)(a1 + 48), a2, a3);
  uint64_t v4 = *(unsigned int *)(a1 + 80);
  if (!v4 || !*(_DWORD *)(a1 + 84)) {
    return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((uint64_t)v51, 128, *(void *)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
  }
  unint64_t v5 = (unint64_t)*(unsigned int *)(a1 + 72) << 7;
  uint64_t v6 = 16 * *(unsigned int *)(a1 + 76);
  uint64_t v7 = &v51[v5 + v6];
  uint64_t v8 = *(void *)(a1 + 56);
  uint64_t v9 = *(void *)(a1 + 64);
  unint64_t v10 = 16 * *(unsigned int *)(a1 + 84);
  if (v10 <= 1) {
    unint64_t v11 = 1;
  }
  else {
    unint64_t v11 = 16 * *(unsigned int *)(a1 + 84);
  }
  if (v11) {
    BOOL v12 = (v11 - 1) >> 32 == 0;
  }
  else {
    BOOL v12 = 0;
  }
  if (v12)
  {
    uint64_t v16 = &v51[v5 + v6];
    uint64_t v17 = v11 & 0xFFFFFFFF0;
    if (v11 < 0x20)
    {
      uint64_t v18 = 0;
      uint64_t v19 = &v51[v5 + v6];
      int v20 = *(uint64_t **)(a1 + 56);
      while (1)
      {
        int v21 = (char *)(v8 + v9 * v18);
        int v22 = &v7[128 * v18];
        if ((unint64_t)(&v16[128 * v18] - v21) > 0x1F)
        {
          v22 += v17;
          int v24 = v19;
          uint64_t v25 = v20;
          uint64_t v26 = v11 & 0xFFFFFFFF0;
          do
          {
            uint64_t v27 = *v25++;
            *v24++ = v27;
            v26 -= 8;
          }
          while (v26);
          if (v11 == v17) {
            goto LABEL_17;
          }
          v21 += v17;
          int v23 = v11 & 0xFFFFFFF0;
        }
        else
        {
          int v23 = 0;
        }
        unsigned int v28 = v23 + 1;
        do
        {
          char v29 = *v21++;
          *v22++ = v29;
          BOOL v30 = v10 > v28++;
        }
        while (v30);
LABEL_17:
        ++v18;
        int v20 = (uint64_t *)((char *)v20 + v9);
        v19 += 128;
        if (v18 == v4) {
          return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((uint64_t)v51, 128, *(void *)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
        }
      }
    }
    uint64_t v31 = 0;
    uint64_t v32 = v11 & 0xFFFFFFFE0;
    uint64_t v33 = &v51[v5 + v6];
    long long v34 = &v51[v5 + 16 + v6];
    unsigned int v35 = (long long *)(v8 + 16);
    BOOL v36 = (uint64_t *)(v8 + (v11 & 0xFFFFFFFE0));
    for (uint64_t i = &v33[v11 & 0xFFFFFFFE0]; ; i += 16)
    {
      long long v38 = (char *)(v8 + v9 * v31);
      long long v39 = &v7[128 * v31];
      if ((unint64_t)(&v16[128 * v31] - v38) >= 0x20)
      {
        int v41 = v35;
        unsigned int v42 = v34;
        uint64_t v43 = v11 & 0xFFFFFFFE0;
        do
        {
          long long v44 = *v41;
          *(v42 - 1) = *(v41 - 1);
          *unsigned int v42 = v44;
          v42 += 2;
          v41 += 2;
          v43 -= 32;
        }
        while (v43);
        if (v11 == v32) {
          goto LABEL_28;
        }
        if ((v11 & 0x10) != 0)
        {
          v39 += v17;
          char v45 = i;
          uint64_t v46 = v36;
          unint64_t v47 = v17 - (v11 & 0xFFFFFFFE0);
          do
          {
            uint64_t v48 = *v46++;
            *v45++ = v48;
            v47 -= 8;
          }
          while (v47);
          if (v11 == v17) {
            goto LABEL_28;
          }
          v38 += v17;
          int v40 = v11 & 0xFFFFFFF0;
        }
        else
        {
          v38 += v32;
          v39 += v32;
          int v40 = v11 & 0xFFFFFFE0;
        }
      }
      else
      {
        int v40 = 0;
      }
      unsigned int v49 = v40 + 1;
      do
      {
        char v50 = *v38++;
        *v39++ = v50;
        BOOL v30 = v10 > v49++;
      }
      while (v30);
LABEL_28:
      ++v31;
      v34 += 128;
      unsigned int v35 = (long long *)((char *)v35 + v9);
      BOOL v36 = (uint64_t *)((char *)v36 + v9);
      if (v31 == v4) {
        return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((uint64_t)v51, 128, *(void *)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
      }
    }
  }
  for (uint64_t j = 0; j != v4; ++j)
  {
    uint64_t v14 = 0;
    do
    {
      v7[v14] = *(unsigned char *)(v8 + v14);
      ++v14;
    }
    while (v10 > v14);
    v7 += 128;
    v8 += v9;
  }
  return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((uint64_t)v51, 128, *(void *)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
}

_OWORD *___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE11ELj4ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1, int32x4_t a2, int32x4_t a3)
{
  uint64_t v52 = *MEMORY[0x263EF8340];
  AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressMacroblock((uint64_t)v51, *(void *)(a1 + 40), *(unsigned __int8 **)(a1 + 48), a2, a3);
  uint64_t v4 = *(unsigned int *)(a1 + 80);
  if (!v4 || !*(_DWORD *)(a1 + 84)) {
    return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock(v51, 128, *(_OWORD **)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
  }
  unint64_t v5 = (unint64_t)*(unsigned int *)(a1 + 72) << 7;
  uint64_t v6 = 16 * *(unsigned int *)(a1 + 76);
  uint64_t v7 = (char *)v51 + v5 + v6;
  uint64_t v8 = *(void *)(a1 + 56);
  uint64_t v9 = *(void *)(a1 + 64);
  unint64_t v10 = 16 * *(unsigned int *)(a1 + 84);
  if (v10 <= 1) {
    unint64_t v11 = 1;
  }
  else {
    unint64_t v11 = 16 * *(unsigned int *)(a1 + 84);
  }
  if (v11) {
    BOOL v12 = (v11 - 1) >> 32 == 0;
  }
  else {
    BOOL v12 = 0;
  }
  if (v12)
  {
    uint64_t v16 = (char *)v51 + v5 + v6;
    uint64_t v17 = v11 & 0xFFFFFFFF0;
    if (v11 < 0x20)
    {
      uint64_t v18 = 0;
      uint64_t v19 = (char *)v51 + v5 + v6;
      int v20 = *(uint64_t **)(a1 + 56);
      while (1)
      {
        int v21 = (char *)(v8 + v9 * v18);
        int v22 = &v7[128 * v18];
        if ((unint64_t)(&v16[128 * v18] - v21) > 0x1F)
        {
          v22 += v17;
          int v24 = v19;
          uint64_t v25 = v20;
          uint64_t v26 = v11 & 0xFFFFFFFF0;
          do
          {
            uint64_t v27 = *v25++;
            *v24++ = v27;
            v26 -= 8;
          }
          while (v26);
          if (v11 == v17) {
            goto LABEL_17;
          }
          v21 += v17;
          int v23 = v11 & 0xFFFFFFF0;
        }
        else
        {
          int v23 = 0;
        }
        unsigned int v28 = v23 + 1;
        do
        {
          char v29 = *v21++;
          *v22++ = v29;
          BOOL v30 = v10 > v28++;
        }
        while (v30);
LABEL_17:
        ++v18;
        int v20 = (uint64_t *)((char *)v20 + v9);
        v19 += 128;
        if (v18 == v4) {
          return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock(v51, 128, *(_OWORD **)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
        }
      }
    }
    uint64_t v31 = 0;
    uint64_t v32 = v11 & 0xFFFFFFFE0;
    uint64_t v33 = (char *)v51 + v5 + v6;
    long long v34 = (char *)&v51[1] + v5 + v6;
    unsigned int v35 = (long long *)(v8 + 16);
    BOOL v36 = (uint64_t *)(v8 + (v11 & 0xFFFFFFFE0));
    for (uint64_t i = &v33[v11 & 0xFFFFFFFE0]; ; i += 128)
    {
      long long v38 = (char *)(v8 + v9 * v31);
      long long v39 = &v7[128 * v31];
      if ((unint64_t)(&v16[128 * v31] - v38) >= 0x20)
      {
        int v41 = v35;
        unsigned int v42 = v34;
        uint64_t v43 = v11 & 0xFFFFFFFE0;
        do
        {
          long long v44 = *v41;
          *(v42 - 1) = *(v41 - 1);
          *unsigned int v42 = v44;
          v42 += 2;
          v41 += 2;
          v43 -= 32;
        }
        while (v43);
        if (v11 == v32) {
          goto LABEL_28;
        }
        if ((v11 & 0x10) != 0)
        {
          v39 += v17;
          char v45 = i;
          uint64_t v46 = v36;
          unint64_t v47 = v17 - (v11 & 0xFFFFFFFE0);
          do
          {
            uint64_t v48 = *v46++;
            *(void *)char v45 = v48;
            v45 += 8;
            v47 -= 8;
          }
          while (v47);
          if (v11 == v17) {
            goto LABEL_28;
          }
          v38 += v17;
          int v40 = v11 & 0xFFFFFFF0;
        }
        else
        {
          v38 += v32;
          v39 += v32;
          int v40 = v11 & 0xFFFFFFE0;
        }
      }
      else
      {
        int v40 = 0;
      }
      unsigned int v49 = v40 + 1;
      do
      {
        char v50 = *v38++;
        *v39++ = v50;
        BOOL v30 = v10 > v49++;
      }
      while (v30);
LABEL_28:
      ++v31;
      v34 += 128;
      unsigned int v35 = (long long *)((char *)v35 + v9);
      BOOL v36 = (uint64_t *)((char *)v36 + v9);
      if (v31 == v4) {
        return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock(v51, 128, *(_OWORD **)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
      }
    }
  }
  for (uint64_t j = 0; j != v4; ++j)
  {
    uint64_t v14 = 0;
    do
    {
      v7[v14] = *(unsigned char *)(v8 + v14);
      ++v14;
    }
    while (v10 > v14);
    v7 += 128;
    v8 += v9;
  }
  return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock(v51, 128, *(_OWORD **)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE11ELj4ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1, int32x4_t a2, int32x4_t a3)
{
  uint64_t v52 = *MEMORY[0x263EF8340];
  AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressMacroblock((uint64_t)v51, *(void *)(a1 + 40), *(unsigned __int8 **)(a1 + 48), a2, a3);
  uint64_t v4 = *(unsigned int *)(a1 + 80);
  if (!v4 || !*(_DWORD *)(a1 + 84)) {
    return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((uint64_t)v51, 128, *(void *)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
  }
  unint64_t v5 = (unint64_t)*(unsigned int *)(a1 + 72) << 7;
  uint64_t v6 = 16 * *(unsigned int *)(a1 + 76);
  uint64_t v7 = &v51[v5 + v6];
  uint64_t v8 = *(void *)(a1 + 56);
  uint64_t v9 = *(void *)(a1 + 64);
  unint64_t v10 = 16 * *(unsigned int *)(a1 + 84);
  if (v10 <= 1) {
    unint64_t v11 = 1;
  }
  else {
    unint64_t v11 = 16 * *(unsigned int *)(a1 + 84);
  }
  if (v11) {
    BOOL v12 = (v11 - 1) >> 32 == 0;
  }
  else {
    BOOL v12 = 0;
  }
  if (v12)
  {
    uint64_t v16 = &v51[v5 + v6];
    uint64_t v17 = v11 & 0xFFFFFFFF0;
    if (v11 < 0x20)
    {
      uint64_t v18 = 0;
      uint64_t v19 = &v51[v5 + v6];
      int v20 = *(uint64_t **)(a1 + 56);
      while (1)
      {
        int v21 = (char *)(v8 + v9 * v18);
        int v22 = &v7[128 * v18];
        if ((unint64_t)(&v16[128 * v18] - v21) > 0x1F)
        {
          v22 += v17;
          int v24 = v19;
          uint64_t v25 = v20;
          uint64_t v26 = v11 & 0xFFFFFFFF0;
          do
          {
            uint64_t v27 = *v25++;
            *v24++ = v27;
            v26 -= 8;
          }
          while (v26);
          if (v11 == v17) {
            goto LABEL_17;
          }
          v21 += v17;
          int v23 = v11 & 0xFFFFFFF0;
        }
        else
        {
          int v23 = 0;
        }
        unsigned int v28 = v23 + 1;
        do
        {
          char v29 = *v21++;
          *v22++ = v29;
          BOOL v30 = v10 > v28++;
        }
        while (v30);
LABEL_17:
        ++v18;
        int v20 = (uint64_t *)((char *)v20 + v9);
        v19 += 128;
        if (v18 == v4) {
          return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((uint64_t)v51, 128, *(void *)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
        }
      }
    }
    uint64_t v31 = 0;
    uint64_t v32 = v11 & 0xFFFFFFFE0;
    uint64_t v33 = &v51[v5 + v6];
    long long v34 = &v51[v5 + 16 + v6];
    unsigned int v35 = (long long *)(v8 + 16);
    BOOL v36 = (uint64_t *)(v8 + (v11 & 0xFFFFFFFE0));
    for (uint64_t i = &v33[v11 & 0xFFFFFFFE0]; ; i += 16)
    {
      long long v38 = (char *)(v8 + v9 * v31);
      long long v39 = &v7[128 * v31];
      if ((unint64_t)(&v16[128 * v31] - v38) >= 0x20)
      {
        int v41 = v35;
        unsigned int v42 = v34;
        uint64_t v43 = v11 & 0xFFFFFFFE0;
        do
        {
          long long v44 = *v41;
          *(v42 - 1) = *(v41 - 1);
          *unsigned int v42 = v44;
          v42 += 2;
          v41 += 2;
          v43 -= 32;
        }
        while (v43);
        if (v11 == v32) {
          goto LABEL_28;
        }
        if ((v11 & 0x10) != 0)
        {
          v39 += v17;
          char v45 = i;
          uint64_t v46 = v36;
          unint64_t v47 = v17 - (v11 & 0xFFFFFFFE0);
          do
          {
            uint64_t v48 = *v46++;
            *v45++ = v48;
            v47 -= 8;
          }
          while (v47);
          if (v11 == v17) {
            goto LABEL_28;
          }
          v38 += v17;
          int v40 = v11 & 0xFFFFFFF0;
        }
        else
        {
          v38 += v32;
          v39 += v32;
          int v40 = v11 & 0xFFFFFFE0;
        }
      }
      else
      {
        int v40 = 0;
      }
      unsigned int v49 = v40 + 1;
      do
      {
        char v50 = *v38++;
        *v39++ = v50;
        BOOL v30 = v10 > v49++;
      }
      while (v30);
LABEL_28:
      ++v31;
      v34 += 128;
      unsigned int v35 = (long long *)((char *)v35 + v9);
      BOOL v36 = (uint64_t *)((char *)v36 + v9);
      if (v31 == v4) {
        return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((uint64_t)v51, 128, *(void *)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
      }
    }
  }
  for (uint64_t j = 0; j != v4; ++j)
  {
    uint64_t v14 = 0;
    do
    {
      v7[v14] = *(unsigned char *)(v8 + v14);
      ++v14;
    }
    while (v10 > v14);
    v7 += 128;
    v8 += v9;
  }
  return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((uint64_t)v51, 128, *(void *)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE16ELj4ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v70 = *MEMORY[0x263EF8340];
  AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressMacroblock((uint64_t)v69, *(void *)(a1 + 40), *(unsigned __int8 **)(a1 + 48));
  uint64_t v2 = *(unsigned int *)(a1 + 80);
  if (v2 && *(_DWORD *)(a1 + 84))
  {
    unint64_t v3 = (unint64_t)*(unsigned int *)(a1 + 72) << 7;
    uint64_t v4 = 16 * *(unsigned int *)(a1 + 76);
    unint64_t v5 = &v69[v3 + v4];
    uint64_t v6 = *(void *)(a1 + 56);
    uint64_t v7 = *(void *)(a1 + 64);
    unint64_t v8 = 16 * *(unsigned int *)(a1 + 84);
    if (v8 <= 1) {
      unint64_t v9 = 1;
    }
    else {
      unint64_t v9 = 16 * *(unsigned int *)(a1 + 84);
    }
    if (v9) {
      BOOL v10 = (v9 - 1) >> 32 == 0;
    }
    else {
      BOOL v10 = 0;
    }
    if (!v10)
    {
      for (uint64_t i = 0; i != v2; ++i)
      {
        uint64_t v12 = 0;
        do
        {
          v5[v12] = *(unsigned char *)(v6 + v12);
          ++v12;
        }
        while (v8 > v12);
        v5 += 128;
        v6 += v7;
      }
      goto LABEL_14;
    }
    long long v34 = &v69[v3 + v4];
    uint64_t v35 = v9 & 0xFFFFFFFF0;
    if (v9 < 0x20)
    {
      uint64_t v36 = 0;
      long long v37 = &v69[v3 + v4];
      long long v38 = *(uint64_t **)(a1 + 56);
      while (1)
      {
        long long v39 = (char *)(v6 + v7 * v36);
        int v40 = &v5[128 * v36];
        if ((unint64_t)(&v34[128 * v36] - v39) > 0x1F)
        {
          v40 += v35;
          unsigned int v42 = v37;
          uint64_t v43 = v38;
          uint64_t v44 = v9 & 0xFFFFFFFF0;
          do
          {
            uint64_t v45 = *v43++;
            *v42++ = v45;
            v44 -= 8;
          }
          while (v44);
          if (v9 == v35) {
            goto LABEL_30;
          }
          v39 += v35;
          int v41 = v9 & 0xFFFFFFF0;
        }
        else
        {
          int v41 = 0;
        }
        unsigned int v46 = v41 + 1;
        do
        {
          char v47 = *v39++;
          *v40++ = v47;
          BOOL v48 = v8 > v46++;
        }
        while (v48);
LABEL_30:
        ++v36;
        long long v38 = (uint64_t *)((char *)v38 + v7);
        v37 += 128;
        if (v36 == v2) {
          goto LABEL_14;
        }
      }
    }
    uint64_t v49 = 0;
    uint64_t v50 = v9 & 0xFFFFFFFE0;
    uint64_t v51 = &v69[v3 + v4];
    uint64_t v52 = &v69[v3 + 16 + v4];
    uint64_t v53 = (long long *)(v6 + 16);
    long long v54 = (uint64_t *)(v6 + (v9 & 0xFFFFFFFE0));
    long long v55 = &v51[v9 & 0xFFFFFFFE0];
    do
    {
      char v56 = (char *)(v6 + v7 * v49);
      long long v57 = &v5[128 * v49];
      if ((unint64_t)(&v34[128 * v49] - v56) >= 0x20)
      {
        long long v59 = v53;
        char v60 = v52;
        uint64_t v61 = v9 & 0xFFFFFFFE0;
        do
        {
          long long v62 = *v59;
          *(v60 - 1) = *(v59 - 1);
          *char v60 = v62;
          v60 += 2;
          v59 += 2;
          v61 -= 32;
        }
        while (v61);
        if (v9 == v50) {
          goto LABEL_41;
        }
        if ((v9 & 0x10) != 0)
        {
          v57 += v35;
          long long v63 = v55;
          uint64_t v64 = v54;
          unint64_t v65 = v35 - (v9 & 0xFFFFFFFE0);
          do
          {
            uint64_t v66 = *v64++;
            *v63++ = v66;
            v65 -= 8;
          }
          while (v65);
          if (v9 == v35) {
            goto LABEL_41;
          }
          v56 += v35;
          int v58 = v9 & 0xFFFFFFF0;
        }
        else
        {
          v56 += v50;
          v57 += v50;
          int v58 = v9 & 0xFFFFFFE0;
        }
      }
      else
      {
        int v58 = 0;
      }
      unsigned int v67 = v58 + 1;
      do
      {
        char v68 = *v56++;
        *v57++ = v68;
        BOOL v48 = v8 > v67++;
      }
      while (v48);
LABEL_41:
      ++v49;
      v52 += 128;
      uint64_t v53 = (long long *)((char *)v53 + v7);
      long long v54 = (uint64_t *)((char *)v54 + v7);
      v55 += 16;
    }
    while (v49 != v2);
  }
LABEL_14:
  uint64_t v13 = 0;
  uint64_t v14 = *(_OWORD **)(a1 + 40);
  uint64_t v15 = *(char **)(a1 + 48);
  int v16 = *(unsigned __int8 *)(a1 + 88);
  int v17 = *(unsigned __int8 *)(a1 + 89);
  do
  {
    uint64_t v29 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,4u>::kSubblockPositions[v13 + 1];
    uint64_t v30 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,4u>::kSubblockPositions[v13];
    LODWORD(result) = (v16 - 4 * v30) & ~((v16 - 4 * (int)v30) >> 31);
    if (result >= 4) {
      uint64_t result = 4;
    }
    else {
      uint64_t result = result;
    }
    unsigned int v32 = (v17 - 2 * v29) & ~((v17 - 2 * (int)v29) >> 31);
    if (v32 >= 2) {
      unsigned int v32 = 2;
    }
    if (result) {
      BOOL v33 = v32 == 0;
    }
    else {
      BOOL v33 = 1;
    }
    if (v33)
    {
      char v28 = 0;
    }
    else
    {
      uint64_t v18 = (long long *)&v69[256 * v29 + 64 * v30];
      long long v20 = *v18;
      long long v21 = v18[1];
      uint64_t v19 = v18 + 2;
      uint64_t result = (uint64_t)(v18 + 8);
      v18 += 10;
      long long v22 = *v19;
      long long v23 = v19[1];
      long long v24 = *(_OWORD *)result;
      long long v25 = *(_OWORD *)(result + 16);
      long long v26 = *v18;
      long long v27 = v18[1];
      *uint64_t v14 = v20;
      v14[1] = v21;
      v14[2] = v24;
      v14[3] = v25;
      v14[4] = v22;
      v14[5] = v23;
      v14[6] = v26;
      v14[7] = v27;
      v14 += 8;
      char v28 = 127;
    }
    *v15++ = v28;
    v13 += 2;
  }
  while (v13 != 16);
  return result;
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE16ELj4ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v50 = *MEMORY[0x263EF8340];
  AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressMacroblock((uint64_t)v49, *(void *)(a1 + 40), *(unsigned __int8 **)(a1 + 48));
  uint64_t v2 = *(unsigned int *)(a1 + 80);
  if (!v2 || !*(_DWORD *)(a1 + 84)) {
    return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((uint64_t)v49, 128, *(int8x16_t **)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
  }
  unint64_t v3 = (unint64_t)*(unsigned int *)(a1 + 72) << 7;
  uint64_t v4 = 16 * *(unsigned int *)(a1 + 76);
  unint64_t v5 = &v49[v3 + v4];
  uint64_t v6 = *(void *)(a1 + 56);
  uint64_t v7 = *(void *)(a1 + 64);
  unint64_t v8 = 16 * *(unsigned int *)(a1 + 84);
  if (v8 <= 1) {
    unint64_t v9 = 1;
  }
  else {
    unint64_t v9 = 16 * *(unsigned int *)(a1 + 84);
  }
  if (v9) {
    BOOL v10 = (v9 - 1) >> 32 == 0;
  }
  else {
    BOOL v10 = 0;
  }
  if (v10)
  {
    uint64_t v14 = &v49[v3 + v4];
    uint64_t v15 = v9 & 0xFFFFFFFF0;
    if (v9 < 0x20)
    {
      uint64_t v16 = 0;
      int v17 = &v49[v3 + v4];
      uint64_t v18 = *(uint64_t **)(a1 + 56);
      while (1)
      {
        uint64_t v19 = (char *)(v6 + v7 * v16);
        long long v20 = &v5[128 * v16];
        if ((unint64_t)(&v14[128 * v16] - v19) > 0x1F)
        {
          v20 += v15;
          long long v22 = v17;
          long long v23 = v18;
          uint64_t v24 = v9 & 0xFFFFFFFF0;
          do
          {
            uint64_t v25 = *v23++;
            *v22++ = v25;
            v24 -= 8;
          }
          while (v24);
          if (v9 == v15) {
            goto LABEL_17;
          }
          v19 += v15;
          int v21 = v9 & 0xFFFFFFF0;
        }
        else
        {
          int v21 = 0;
        }
        unsigned int v26 = v21 + 1;
        do
        {
          char v27 = *v19++;
          *v20++ = v27;
          BOOL v28 = v8 > v26++;
        }
        while (v28);
LABEL_17:
        ++v16;
        uint64_t v18 = (uint64_t *)((char *)v18 + v7);
        v17 += 128;
        if (v16 == v2) {
          return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((uint64_t)v49, 128, *(int8x16_t **)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
        }
      }
    }
    uint64_t v29 = 0;
    uint64_t v30 = v9 & 0xFFFFFFFE0;
    uint64_t v31 = &v49[v3 + v4];
    unsigned int v32 = &v49[v3 + 16 + v4];
    BOOL v33 = (long long *)(v6 + 16);
    long long v34 = (uint64_t *)(v6 + (v9 & 0xFFFFFFFE0));
    for (uint64_t i = &v31[v9 & 0xFFFFFFFE0]; ; i += 16)
    {
      uint64_t v36 = (char *)(v6 + v7 * v29);
      long long v37 = &v5[128 * v29];
      if ((unint64_t)(&v14[128 * v29] - v36) >= 0x20)
      {
        long long v39 = v33;
        int v40 = v32;
        uint64_t v41 = v9 & 0xFFFFFFFE0;
        do
        {
          long long v42 = *v39;
          *(v40 - 1) = *(v39 - 1);
          *int v40 = v42;
          v40 += 2;
          v39 += 2;
          v41 -= 32;
        }
        while (v41);
        if (v9 == v30) {
          goto LABEL_28;
        }
        if ((v9 & 0x10) != 0)
        {
          v37 += v15;
          uint64_t v43 = i;
          uint64_t v44 = v34;
          unint64_t v45 = v15 - (v9 & 0xFFFFFFFE0);
          do
          {
            uint64_t v46 = *v44++;
            *v43++ = v46;
            v45 -= 8;
          }
          while (v45);
          if (v9 == v15) {
            goto LABEL_28;
          }
          v36 += v15;
          int v38 = v9 & 0xFFFFFFF0;
        }
        else
        {
          v36 += v30;
          v37 += v30;
          int v38 = v9 & 0xFFFFFFE0;
        }
      }
      else
      {
        int v38 = 0;
      }
      unsigned int v47 = v38 + 1;
      do
      {
        char v48 = *v36++;
        *v37++ = v48;
        BOOL v28 = v8 > v47++;
      }
      while (v28);
LABEL_28:
      ++v29;
      v32 += 128;
      BOOL v33 = (long long *)((char *)v33 + v7);
      long long v34 = (uint64_t *)((char *)v34 + v7);
      if (v29 == v2) {
        return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((uint64_t)v49, 128, *(int8x16_t **)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
      }
    }
  }
  for (uint64_t j = 0; j != v2; ++j)
  {
    uint64_t v12 = 0;
    do
    {
      v5[v12] = *(unsigned char *)(v6 + v12);
      ++v12;
    }
    while (v8 > v12);
    v5 += 128;
    v6 += v7;
  }
  return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((uint64_t)v49, 128, *(int8x16_t **)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE16ELj4ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v70 = *MEMORY[0x263EF8340];
  AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressMacroblock((uint64_t)v69, *(void *)(a1 + 40), *(unsigned __int8 **)(a1 + 48));
  uint64_t v2 = *(unsigned int *)(a1 + 80);
  if (v2 && *(_DWORD *)(a1 + 84))
  {
    unint64_t v3 = (unint64_t)*(unsigned int *)(a1 + 72) << 7;
    uint64_t v4 = 16 * *(unsigned int *)(a1 + 76);
    unint64_t v5 = &v69[v3 + v4];
    uint64_t v6 = *(void *)(a1 + 56);
    uint64_t v7 = *(void *)(a1 + 64);
    unint64_t v8 = 16 * *(unsigned int *)(a1 + 84);
    if (v8 <= 1) {
      unint64_t v9 = 1;
    }
    else {
      unint64_t v9 = 16 * *(unsigned int *)(a1 + 84);
    }
    if (v9) {
      BOOL v10 = (v9 - 1) >> 32 == 0;
    }
    else {
      BOOL v10 = 0;
    }
    if (!v10)
    {
      for (uint64_t i = 0; i != v2; ++i)
      {
        uint64_t v12 = 0;
        do
        {
          v5[v12] = *(unsigned char *)(v6 + v12);
          ++v12;
        }
        while (v8 > v12);
        v5 += 128;
        v6 += v7;
      }
      goto LABEL_14;
    }
    long long v34 = &v69[v3 + v4];
    uint64_t v35 = v9 & 0xFFFFFFFF0;
    if (v9 < 0x20)
    {
      uint64_t v36 = 0;
      long long v37 = &v69[v3 + v4];
      int v38 = *(uint64_t **)(a1 + 56);
      while (1)
      {
        long long v39 = (char *)(v6 + v7 * v36);
        int v40 = &v5[128 * v36];
        if ((unint64_t)(&v34[128 * v36] - v39) > 0x1F)
        {
          v40 += v35;
          long long v42 = v37;
          uint64_t v43 = v38;
          uint64_t v44 = v9 & 0xFFFFFFFF0;
          do
          {
            uint64_t v45 = *v43++;
            *v42++ = v45;
            v44 -= 8;
          }
          while (v44);
          if (v9 == v35) {
            goto LABEL_30;
          }
          v39 += v35;
          int v41 = v9 & 0xFFFFFFF0;
        }
        else
        {
          int v41 = 0;
        }
        unsigned int v46 = v41 + 1;
        do
        {
          char v47 = *v39++;
          *v40++ = v47;
          BOOL v48 = v8 > v46++;
        }
        while (v48);
LABEL_30:
        ++v36;
        int v38 = (uint64_t *)((char *)v38 + v7);
        v37 += 128;
        if (v36 == v2) {
          goto LABEL_14;
        }
      }
    }
    uint64_t v49 = 0;
    uint64_t v50 = v9 & 0xFFFFFFFE0;
    uint64_t v51 = &v69[v3 + v4];
    uint64_t v52 = &v69[v3 + 16 + v4];
    uint64_t v53 = (long long *)(v6 + 16);
    long long v54 = (uint64_t *)(v6 + (v9 & 0xFFFFFFFE0));
    long long v55 = &v51[v9 & 0xFFFFFFFE0];
    do
    {
      char v56 = (char *)(v6 + v7 * v49);
      long long v57 = &v5[128 * v49];
      if ((unint64_t)(&v34[128 * v49] - v56) >= 0x20)
      {
        long long v59 = v53;
        char v60 = v52;
        uint64_t v61 = v9 & 0xFFFFFFFE0;
        do
        {
          long long v62 = *v59;
          *(v60 - 1) = *(v59 - 1);
          *char v60 = v62;
          v60 += 2;
          v59 += 2;
          v61 -= 32;
        }
        while (v61);
        if (v9 == v50) {
          goto LABEL_41;
        }
        if ((v9 & 0x10) != 0)
        {
          v57 += v35;
          long long v63 = v55;
          uint64_t v64 = v54;
          unint64_t v65 = v35 - (v9 & 0xFFFFFFFE0);
          do
          {
            uint64_t v66 = *v64++;
            *v63++ = v66;
            v65 -= 8;
          }
          while (v65);
          if (v9 == v35) {
            goto LABEL_41;
          }
          v56 += v35;
          int v58 = v9 & 0xFFFFFFF0;
        }
        else
        {
          v56 += v50;
          v57 += v50;
          int v58 = v9 & 0xFFFFFFE0;
        }
      }
      else
      {
        int v58 = 0;
      }
      unsigned int v67 = v58 + 1;
      do
      {
        char v68 = *v56++;
        *v57++ = v68;
        BOOL v48 = v8 > v67++;
      }
      while (v48);
LABEL_41:
      ++v49;
      v52 += 128;
      uint64_t v53 = (long long *)((char *)v53 + v7);
      long long v54 = (uint64_t *)((char *)v54 + v7);
      v55 += 16;
    }
    while (v49 != v2);
  }
LABEL_14:
  uint64_t v13 = 0;
  uint64_t v14 = *(_OWORD **)(a1 + 40);
  uint64_t v15 = *(char **)(a1 + 48);
  int v16 = *(unsigned __int8 *)(a1 + 88);
  int v17 = *(unsigned __int8 *)(a1 + 89);
  do
  {
    uint64_t v29 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,4u>::kSubblockPositions[v13 + 1];
    uint64_t v30 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,4u>::kSubblockPositions[v13];
    LODWORD(result) = (v16 - 4 * v30) & ~((v16 - 4 * (int)v30) >> 31);
    if (result >= 4) {
      uint64_t result = 4;
    }
    else {
      uint64_t result = result;
    }
    unsigned int v32 = (v17 - 2 * v29) & ~((v17 - 2 * (int)v29) >> 31);
    if (v32 >= 2) {
      unsigned int v32 = 2;
    }
    if (result) {
      BOOL v33 = v32 == 0;
    }
    else {
      BOOL v33 = 1;
    }
    if (v33)
    {
      char v28 = 0;
    }
    else
    {
      uint64_t v18 = (long long *)&v69[256 * v29 + 64 * v30];
      long long v20 = *v18;
      long long v21 = v18[1];
      uint64_t v19 = v18 + 2;
      uint64_t result = (uint64_t)(v18 + 8);
      v18 += 10;
      long long v22 = *v19;
      long long v23 = v19[1];
      long long v24 = *(_OWORD *)result;
      long long v25 = *(_OWORD *)(result + 16);
      long long v26 = *v18;
      long long v27 = v18[1];
      *uint64_t v14 = v20;
      v14[1] = v21;
      v14[2] = v24;
      v14[3] = v25;
      v14[4] = v22;
      v14[5] = v23;
      v14[6] = v26;
      v14[7] = v27;
      v14 += 8;
      char v28 = 127;
    }
    *v15++ = v28;
    v13 += 2;
  }
  while (v13 != 16);
  return result;
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE16ELj4ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v50 = *MEMORY[0x263EF8340];
  AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressMacroblock((uint64_t)v49, *(void *)(a1 + 40), *(unsigned __int8 **)(a1 + 48));
  uint64_t v2 = *(unsigned int *)(a1 + 80);
  if (!v2 || !*(_DWORD *)(a1 + 84)) {
    return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((uint64_t)v49, 128, *(int8x16_t **)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
  }
  unint64_t v3 = (unint64_t)*(unsigned int *)(a1 + 72) << 7;
  uint64_t v4 = 16 * *(unsigned int *)(a1 + 76);
  unint64_t v5 = &v49[v3 + v4];
  uint64_t v6 = *(void *)(a1 + 56);
  uint64_t v7 = *(void *)(a1 + 64);
  unint64_t v8 = 16 * *(unsigned int *)(a1 + 84);
  if (v8 <= 1) {
    unint64_t v9 = 1;
  }
  else {
    unint64_t v9 = 16 * *(unsigned int *)(a1 + 84);
  }
  if (v9) {
    BOOL v10 = (v9 - 1) >> 32 == 0;
  }
  else {
    BOOL v10 = 0;
  }
  if (v10)
  {
    uint64_t v14 = &v49[v3 + v4];
    uint64_t v15 = v9 & 0xFFFFFFFF0;
    if (v9 < 0x20)
    {
      uint64_t v16 = 0;
      int v17 = &v49[v3 + v4];
      uint64_t v18 = *(uint64_t **)(a1 + 56);
      while (1)
      {
        uint64_t v19 = (char *)(v6 + v7 * v16);
        long long v20 = &v5[128 * v16];
        if ((unint64_t)(&v14[128 * v16] - v19) > 0x1F)
        {
          v20 += v15;
          long long v22 = v17;
          long long v23 = v18;
          uint64_t v24 = v9 & 0xFFFFFFFF0;
          do
          {
            uint64_t v25 = *v23++;
            *v22++ = v25;
            v24 -= 8;
          }
          while (v24);
          if (v9 == v15) {
            goto LABEL_17;
          }
          v19 += v15;
          int v21 = v9 & 0xFFFFFFF0;
        }
        else
        {
          int v21 = 0;
        }
        unsigned int v26 = v21 + 1;
        do
        {
          char v27 = *v19++;
          *v20++ = v27;
          BOOL v28 = v8 > v26++;
        }
        while (v28);
LABEL_17:
        ++v16;
        uint64_t v18 = (uint64_t *)((char *)v18 + v7);
        v17 += 128;
        if (v16 == v2) {
          return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((uint64_t)v49, 128, *(int8x16_t **)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
        }
      }
    }
    uint64_t v29 = 0;
    uint64_t v30 = v9 & 0xFFFFFFFE0;
    uint64_t v31 = &v49[v3 + v4];
    unsigned int v32 = &v49[v3 + 16 + v4];
    BOOL v33 = (long long *)(v6 + 16);
    long long v34 = (uint64_t *)(v6 + (v9 & 0xFFFFFFFE0));
    for (uint64_t i = &v31[v9 & 0xFFFFFFFE0]; ; i += 16)
    {
      uint64_t v36 = (char *)(v6 + v7 * v29);
      long long v37 = &v5[128 * v29];
      if ((unint64_t)(&v14[128 * v29] - v36) >= 0x20)
      {
        long long v39 = v33;
        int v40 = v32;
        uint64_t v41 = v9 & 0xFFFFFFFE0;
        do
        {
          long long v42 = *v39;
          *(v40 - 1) = *(v39 - 1);
          *int v40 = v42;
          v40 += 2;
          v39 += 2;
          v41 -= 32;
        }
        while (v41);
        if (v9 == v30) {
          goto LABEL_28;
        }
        if ((v9 & 0x10) != 0)
        {
          v37 += v15;
          uint64_t v43 = i;
          uint64_t v44 = v34;
          unint64_t v45 = v15 - (v9 & 0xFFFFFFFE0);
          do
          {
            uint64_t v46 = *v44++;
            *v43++ = v46;
            v45 -= 8;
          }
          while (v45);
          if (v9 == v15) {
            goto LABEL_28;
          }
          v36 += v15;
          int v38 = v9 & 0xFFFFFFF0;
        }
        else
        {
          v36 += v30;
          v37 += v30;
          int v38 = v9 & 0xFFFFFFE0;
        }
      }
      else
      {
        int v38 = 0;
      }
      unsigned int v47 = v38 + 1;
      do
      {
        char v48 = *v36++;
        *v37++ = v48;
        BOOL v28 = v8 > v47++;
      }
      while (v28);
LABEL_28:
      ++v29;
      v32 += 128;
      BOOL v33 = (long long *)((char *)v33 + v7);
      long long v34 = (uint64_t *)((char *)v34 + v7);
      if (v29 == v2) {
        return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((uint64_t)v49, 128, *(int8x16_t **)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
      }
    }
  }
  for (uint64_t j = 0; j != v2; ++j)
  {
    uint64_t v12 = 0;
    do
    {
      v5[v12] = *(unsigned char *)(v6 + v12);
      ++v12;
    }
    while (v8 > v12);
    v5 += 128;
    v6 += v7;
  }
  return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((uint64_t)v49, 128, *(int8x16_t **)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE3ELj4ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1, double a2, __n128 a3, __n128 a4, __n128 a5)
{
  uint64_t v101 = *MEMORY[0x263EF8340];
  uint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressMacroblock((uint64_t)&v99, *(__n128 **)(a1 + 40), *(unsigned __int8 **)(a1 + 48), a2, a3, a4, a5);
  uint64_t v7 = *(unsigned int *)(a1 + 80);
  if (!v7 || !*(_DWORD *)(a1 + 84)) {
    goto LABEL_14;
  }
  unint64_t v8 = (unint64_t)*(unsigned int *)(a1 + 72) << 6;
  uint64_t v9 = 8 * *(unsigned int *)(a1 + 76);
  BOOL v10 = (char *)&v100[-1] + v8 + v9;
  uint64_t v11 = *(void *)(a1 + 56);
  uint64_t v12 = *(void *)(a1 + 64);
  unint64_t v13 = 8 * *(unsigned int *)(a1 + 84);
  if (v13 <= 1) {
    unint64_t v14 = 1;
  }
  else {
    unint64_t v14 = 8 * *(unsigned int *)(a1 + 84);
  }
  if (v14) {
    BOOL v15 = (v14 - 1) >> 32 == 0;
  }
  else {
    BOOL v15 = 0;
  }
  if (v15)
  {
    unint64_t v65 = (char *)&v100[-1] + v8 + v9;
    uint64_t v66 = v14 & 0x7FFFFFFF8;
    if (v14 < 0x20)
    {
      uint64_t v67 = 0;
      char v68 = (char *)&v100[-1] + v8 + v9;
      uint64_t result = *(void *)(a1 + 56);
      while (1)
      {
        int v69 = (char *)(v11 + v12 * v67);
        uint64_t v70 = &v10[64 * v67];
        if ((unint64_t)(&v65[64 * v67] - v69) > 0x1F)
        {
          v70 += v66;
          char v72 = v68;
          uint64_t v73 = (uint64_t *)result;
          uint64_t v74 = v14 & 0x7FFFFFFF8;
          do
          {
            uint64_t v75 = *v73++;
            *v72++ = v75;
            v74 -= 8;
          }
          while (v74);
          if (v14 == v66) {
            goto LABEL_72;
          }
          v69 += v66;
          int v71 = v14 & 0xFFFFFFF8;
        }
        else
        {
          int v71 = 0;
        }
        unsigned int v76 = v71 + 1;
        do
        {
          char v77 = *v69++;
          *v70++ = v77;
          BOOL v78 = v13 > v76++;
        }
        while (v78);
LABEL_72:
        ++v67;
        result += v12;
        v68 += 64;
        if (v67 == v7) {
          goto LABEL_14;
        }
      }
    }
    uint64_t v79 = 0;
    uint64_t v80 = v14 & 0x7FFFFFFE0;
    uint64_t result = v14 & 0x18;
    char v81 = (char *)&v100[-1] + v8 + v9;
    int v82 = (char *)v100 + v8 + v9;
    int v83 = (long long *)(v11 + 16);
    BOOL v84 = (uint64_t *)(v11 + (v14 & 0x7FFFFFFE0));
    uint64_t v85 = &v81[v14 & 0x7FFFFFFE0];
    while (1)
    {
      unint64_t v86 = (char *)(v11 + v12 * v79);
      int v87 = &v10[64 * v79];
      if ((unint64_t)(&v65[64 * v79] - v86) >= 0x20)
      {
        unint64_t v91 = v83;
        uint64_t v92 = v82;
        uint64_t v93 = v14 & 0x7FFFFFFE0;
        do
        {
          long long v94 = *v91;
          *(v92 - 1) = *(v91 - 1);
          _OWORD *v92 = v94;
          v92 += 2;
          v91 += 2;
          v93 -= 32;
        }
        while (v93);
        if (v14 == v80) {
          goto LABEL_83;
        }
        if ((v14 & 0x18) != 0)
        {
          v87 += v66;
          unint64_t v95 = v85;
          unint64_t v96 = v84;
          unint64_t v97 = v66 - (v14 & 0x7FFFFFFE0);
          do
          {
            uint64_t v98 = *v96++;
            *(void *)unint64_t v95 = v98;
            v95 += 8;
            v97 -= 8;
          }
          while (v97);
          if (v14 == v66) {
            goto LABEL_83;
          }
          v86 += v66;
          int v88 = v14 & 0xFFFFFFF8;
        }
        else
        {
          v86 += v80;
          v87 += v80;
          int v88 = v14 & 0xFFFFFFE0;
        }
      }
      else
      {
        int v88 = 0;
      }
      unsigned int v89 = v88 + 1;
      do
      {
        char v90 = *v86++;
        *v87++ = v90;
        BOOL v78 = v13 > v89++;
      }
      while (v78);
LABEL_83:
      ++v79;
      v82 += 64;
      int v83 = (long long *)((char *)v83 + v12);
      BOOL v84 = (uint64_t *)((char *)v84 + v12);
      v85 += 64;
      if (v79 == v7) {
        goto LABEL_14;
      }
    }
  }
  for (uint64_t i = 0; i != v7; ++i)
  {
    uint64_t v17 = 0;
    do
    {
      v10[v17] = *(unsigned char *)(v11 + v17);
      ++v17;
    }
    while (v13 > v17);
    v10 += 64;
    v11 += v12;
  }
LABEL_14:
  uint64_t v19 = *(_OWORD **)(a1 + 40);
  uint64_t v18 = *(char **)(a1 + 48);
  int v20 = *(unsigned __int8 *)(a1 + 88);
  int v21 = *(unsigned __int8 *)(a1 + 89);
  if (v20 >= 4) {
    int v22 = 4;
  }
  else {
    int v22 = *(unsigned __int8 *)(a1 + 88);
  }
  if (v21 >= 2) {
    int v23 = 2;
  }
  else {
    int v23 = *(unsigned __int8 *)(a1 + 89);
  }
  if (v22) {
    BOOL v24 = v23 == 0;
  }
  else {
    BOOL v24 = 1;
  }
  if (v24)
  {
    char v28 = 0;
  }
  else
  {
    long long v25 = v100[0];
    long long v26 = v100[3];
    long long v27 = v100[4];
    *uint64_t v19 = v99;
    v19[1] = v26;
    v19[2] = v25;
    v19[3] = v27;
    v19 += 4;
    char v28 = 63;
  }
  char v29 = 0;
  *uint64_t v18 = v28;
  if (v21 <= 2) {
    int v30 = 2;
  }
  else {
    int v30 = v21;
  }
  unsigned int v31 = v30 - 2;
  if (v31 >= 2) {
    int v32 = 2;
  }
  else {
    int v32 = v31;
  }
  if (v22 && v32)
  {
    long long v33 = v100[8];
    long long v34 = v100[11];
    long long v35 = v100[12];
    *uint64_t v19 = v100[7];
    v19[1] = v34;
    v19[2] = v33;
    v19[3] = v35;
    v19 += 4;
    char v29 = 63;
  }
  v18[1] = v29;
  if (v20 <= 4) {
    int v20 = 4;
  }
  unsigned int v36 = v20 - 4;
  if (v36 >= 4) {
    unsigned int v36 = 4;
  }
  if (v36) {
    BOOL v37 = v23 == 0;
  }
  else {
    BOOL v37 = 1;
  }
  if (v37)
  {
    char v41 = 0;
  }
  else
  {
    long long v38 = v100[2];
    long long v39 = v100[5];
    long long v40 = v100[6];
    *uint64_t v19 = v100[1];
    v19[1] = v39;
    v19[2] = v38;
    v19[3] = v40;
    v19 += 4;
    char v41 = 63;
  }
  char v42 = 0;
  v18[2] = v41;
  if (v36 && v32)
  {
    long long v43 = v100[10];
    long long v44 = v100[13];
    long long v45 = v100[14];
    *uint64_t v19 = v100[9];
    v19[1] = v44;
    v19[2] = v43;
    v19[3] = v45;
    v19 += 4;
    char v42 = 63;
  }
  char v46 = 0;
  v18[3] = v42;
  if (v21 <= 4) {
    int v47 = 4;
  }
  else {
    int v47 = v21;
  }
  unsigned int v48 = v47 - 4;
  if (v48 >= 2) {
    unsigned int v48 = 2;
  }
  if (v22 && v48)
  {
    long long v49 = v100[16];
    long long v50 = v100[19];
    long long v51 = v100[20];
    *uint64_t v19 = v100[15];
    v19[1] = v50;
    v19[2] = v49;
    v19[3] = v51;
    v19 += 4;
    char v46 = 63;
  }
  char v52 = 0;
  v18[4] = v46;
  if (v21 <= 6) {
    int v21 = 6;
  }
  unsigned int v53 = v21 - 6;
  if (v53 >= 2) {
    unsigned int v53 = 2;
  }
  if (v22 && v53)
  {
    long long v54 = v100[24];
    long long v55 = v100[27];
    long long v56 = v100[28];
    *uint64_t v19 = v100[23];
    v19[1] = v55;
    v19[2] = v54;
    v19[3] = v56;
    v19 += 4;
    char v52 = 63;
  }
  char v57 = 0;
  v18[5] = v52;
  if (v36 && v48)
  {
    long long v58 = v100[18];
    long long v59 = v100[21];
    long long v60 = v100[22];
    *uint64_t v19 = v100[17];
    v19[1] = v59;
    v19[2] = v58;
    v19[3] = v60;
    v19 += 4;
    char v57 = 63;
  }
  char v61 = 0;
  v18[6] = v57;
  if (v36 && v53)
  {
    long long v62 = v100[26];
    long long v63 = v100[29];
    long long v64 = v100[30];
    *uint64_t v19 = v100[25];
    v19[1] = v63;
    v19[2] = v62;
    v19[3] = v64;
    char v61 = 63;
  }
  v18[7] = v61;
  return result;
}

unint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE3ELj4ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1, double a2, __n128 a3, __n128 a4, __n128 a5)
{
  uint64_t v61 = *MEMORY[0x263EF8340];
  AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressMacroblock((uint64_t)v60, *(__n128 **)(a1 + 40), *(unsigned __int8 **)(a1 + 48), a2, a3, a4, a5);
  uint64_t v14 = *(unsigned int *)(a1 + 80);
  if (!v14 || !*(_DWORD *)(a1 + 84)) {
    return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v60, 64, *(int16x8_t **)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), *(int16x4_t *)&v6, *(int16x4_t *)&v7, v8, v9, v10, v11, v12, v13);
  }
  unint64_t v15 = (unint64_t)*(unsigned int *)(a1 + 72) << 6;
  uint64_t v16 = 8 * *(unsigned int *)(a1 + 76);
  uint64_t v17 = &v60[v15 + v16];
  uint64_t v18 = *(void *)(a1 + 56);
  uint64_t v19 = *(void *)(a1 + 64);
  unint64_t v20 = 8 * *(unsigned int *)(a1 + 84);
  if (v20 <= 1) {
    unint64_t v21 = 1;
  }
  else {
    unint64_t v21 = 8 * *(unsigned int *)(a1 + 84);
  }
  if (v21) {
    BOOL v22 = (v21 - 1) >> 32 == 0;
  }
  else {
    BOOL v22 = 0;
  }
  if (v22)
  {
    long long v26 = &v60[v15 + v16];
    uint64_t v27 = v21 & 0x7FFFFFFF8;
    if (v21 < 0x20)
    {
      uint64_t v28 = 0;
      char v29 = &v60[v15 + v16];
      int v30 = *(uint64_t **)(a1 + 56);
      while (1)
      {
        unsigned int v31 = (char *)(v18 + v19 * v28);
        int v32 = &v17[64 * v28];
        if ((unint64_t)(&v26[64 * v28] - v31) > 0x1F)
        {
          v32 += v27;
          long long v34 = v29;
          long long v35 = v30;
          uint64_t v36 = v21 & 0x7FFFFFFF8;
          do
          {
            uint64_t v37 = *v35++;
            *(void *)&long long v6 = v37;
            *v34++ = v37;
            v36 -= 8;
          }
          while (v36);
          if (v21 == v27) {
            goto LABEL_17;
          }
          v31 += v27;
          int v33 = v21 & 0xFFFFFFF8;
        }
        else
        {
          int v33 = 0;
        }
        unsigned int v38 = v33 + 1;
        do
        {
          char v39 = *v31++;
          *v32++ = v39;
          BOOL v40 = v20 > v38++;
        }
        while (v40);
LABEL_17:
        ++v28;
        int v30 = (uint64_t *)((char *)v30 + v19);
        v29 += 64;
        if (v28 == v14) {
          return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v60, 64, *(int16x8_t **)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), *(int16x4_t *)&v6, *(int16x4_t *)&v7, v8, v9, v10, v11, v12, v13);
        }
      }
    }
    uint64_t v41 = 0;
    uint64_t v42 = v21 & 0x7FFFFFFE0;
    long long v43 = &v60[v15 + v16];
    long long v44 = &v60[v15 + 16 + v16];
    long long v45 = (long long *)(v18 + 16);
    char v46 = (uint64_t *)(v18 + (v21 & 0x7FFFFFFE0));
    for (uint64_t i = &v43[v21 & 0x7FFFFFFE0]; ; i += 8)
    {
      unsigned int v48 = (char *)(v18 + v19 * v41);
      long long v49 = &v17[64 * v41];
      if ((unint64_t)(&v26[64 * v41] - v48) >= 0x20)
      {
        unsigned int v53 = v45;
        long long v54 = v44;
        uint64_t v55 = v21 & 0x7FFFFFFE0;
        do
        {
          long long v6 = *(v53 - 1);
          long long v7 = *v53;
          *(v54 - 1) = v6;
          *long long v54 = v7;
          v54 += 2;
          v53 += 2;
          v55 -= 32;
        }
        while (v55);
        if (v21 == v42) {
          goto LABEL_28;
        }
        if ((v21 & 0x18) != 0)
        {
          v49 += v27;
          long long v56 = i;
          char v57 = v46;
          unint64_t v58 = v27 - (v21 & 0x7FFFFFFE0);
          do
          {
            uint64_t v59 = *v57++;
            *(void *)&long long v6 = v59;
            *v56++ = v59;
            v58 -= 8;
          }
          while (v58);
          if (v21 == v27) {
            goto LABEL_28;
          }
          v48 += v27;
          int v50 = v21 & 0xFFFFFFF8;
        }
        else
        {
          v48 += v42;
          v49 += v42;
          int v50 = v21 & 0xFFFFFFE0;
        }
      }
      else
      {
        int v50 = 0;
      }
      unsigned int v51 = v50 + 1;
      do
      {
        char v52 = *v48++;
        *v49++ = v52;
        BOOL v40 = v20 > v51++;
      }
      while (v40);
LABEL_28:
      ++v41;
      v44 += 64;
      long long v45 = (long long *)((char *)v45 + v19);
      char v46 = (uint64_t *)((char *)v46 + v19);
      if (v41 == v14) {
        return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v60, 64, *(int16x8_t **)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), *(int16x4_t *)&v6, *(int16x4_t *)&v7, v8, v9, v10, v11, v12, v13);
      }
    }
  }
  for (uint64_t j = 0; j != v14; ++j)
  {
    uint64_t v24 = 0;
    do
    {
      v17[v24] = *(unsigned char *)(v18 + v24);
      ++v24;
    }
    while (v20 > v24);
    v17 += 64;
    v18 += v19;
  }
  return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v60, 64, *(int16x8_t **)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), *(int16x4_t *)&v6, *(int16x4_t *)&v7, v8, v9, v10, v11, v12, v13);
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE3ELj4ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1, double a2, __n128 a3, __n128 a4, __n128 a5)
{
  uint64_t v101 = *MEMORY[0x263EF8340];
  uint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressMacroblock((uint64_t)&v99, *(__n128 **)(a1 + 40), *(unsigned __int8 **)(a1 + 48), a2, a3, a4, a5);
  uint64_t v7 = *(unsigned int *)(a1 + 80);
  if (!v7 || !*(_DWORD *)(a1 + 84)) {
    goto LABEL_14;
  }
  unint64_t v8 = (unint64_t)*(unsigned int *)(a1 + 72) << 6;
  uint64_t v9 = 8 * *(unsigned int *)(a1 + 76);
  double v10 = (char *)&v100[-1] + v8 + v9;
  uint64_t v11 = *(void *)(a1 + 56);
  uint64_t v12 = *(void *)(a1 + 64);
  unint64_t v13 = 8 * *(unsigned int *)(a1 + 84);
  if (v13 <= 1) {
    unint64_t v14 = 1;
  }
  else {
    unint64_t v14 = 8 * *(unsigned int *)(a1 + 84);
  }
  if (v14) {
    BOOL v15 = (v14 - 1) >> 32 == 0;
  }
  else {
    BOOL v15 = 0;
  }
  if (v15)
  {
    unint64_t v65 = (char *)&v100[-1] + v8 + v9;
    uint64_t v66 = v14 & 0x7FFFFFFF8;
    if (v14 < 0x20)
    {
      uint64_t v67 = 0;
      char v68 = (char *)&v100[-1] + v8 + v9;
      uint64_t result = *(void *)(a1 + 56);
      while (1)
      {
        int v69 = (char *)(v11 + v12 * v67);
        uint64_t v70 = &v10[64 * v67];
        if ((unint64_t)(&v65[64 * v67] - v69) > 0x1F)
        {
          v70 += v66;
          char v72 = v68;
          uint64_t v73 = (uint64_t *)result;
          uint64_t v74 = v14 & 0x7FFFFFFF8;
          do
          {
            uint64_t v75 = *v73++;
            *v72++ = v75;
            v74 -= 8;
          }
          while (v74);
          if (v14 == v66) {
            goto LABEL_72;
          }
          v69 += v66;
          int v71 = v14 & 0xFFFFFFF8;
        }
        else
        {
          int v71 = 0;
        }
        unsigned int v76 = v71 + 1;
        do
        {
          char v77 = *v69++;
          *v70++ = v77;
          BOOL v78 = v13 > v76++;
        }
        while (v78);
LABEL_72:
        ++v67;
        result += v12;
        v68 += 64;
        if (v67 == v7) {
          goto LABEL_14;
        }
      }
    }
    uint64_t v79 = 0;
    uint64_t v80 = v14 & 0x7FFFFFFE0;
    uint64_t result = v14 & 0x18;
    char v81 = (char *)&v100[-1] + v8 + v9;
    int v82 = (char *)v100 + v8 + v9;
    int v83 = (long long *)(v11 + 16);
    BOOL v84 = (uint64_t *)(v11 + (v14 & 0x7FFFFFFE0));
    uint64_t v85 = &v81[v14 & 0x7FFFFFFE0];
    while (1)
    {
      unint64_t v86 = (char *)(v11 + v12 * v79);
      int v87 = &v10[64 * v79];
      if ((unint64_t)(&v65[64 * v79] - v86) >= 0x20)
      {
        unint64_t v91 = v83;
        uint64_t v92 = v82;
        uint64_t v93 = v14 & 0x7FFFFFFE0;
        do
        {
          long long v94 = *v91;
          *(v92 - 1) = *(v91 - 1);
          _OWORD *v92 = v94;
          v92 += 2;
          v91 += 2;
          v93 -= 32;
        }
        while (v93);
        if (v14 == v80) {
          goto LABEL_83;
        }
        if ((v14 & 0x18) != 0)
        {
          v87 += v66;
          unint64_t v95 = v85;
          unint64_t v96 = v84;
          unint64_t v97 = v66 - (v14 & 0x7FFFFFFE0);
          do
          {
            uint64_t v98 = *v96++;
            *(void *)unint64_t v95 = v98;
            v95 += 8;
            v97 -= 8;
          }
          while (v97);
          if (v14 == v66) {
            goto LABEL_83;
          }
          v86 += v66;
          int v88 = v14 & 0xFFFFFFF8;
        }
        else
        {
          v86 += v80;
          v87 += v80;
          int v88 = v14 & 0xFFFFFFE0;
        }
      }
      else
      {
        int v88 = 0;
      }
      unsigned int v89 = v88 + 1;
      do
      {
        char v90 = *v86++;
        *v87++ = v90;
        BOOL v78 = v13 > v89++;
      }
      while (v78);
LABEL_83:
      ++v79;
      v82 += 64;
      int v83 = (long long *)((char *)v83 + v12);
      BOOL v84 = (uint64_t *)((char *)v84 + v12);
      v85 += 64;
      if (v79 == v7) {
        goto LABEL_14;
      }
    }
  }
  for (uint64_t i = 0; i != v7; ++i)
  {
    uint64_t v17 = 0;
    do
    {
      v10[v17] = *(unsigned char *)(v11 + v17);
      ++v17;
    }
    while (v13 > v17);
    v10 += 64;
    v11 += v12;
  }
LABEL_14:
  uint64_t v19 = *(_OWORD **)(a1 + 40);
  uint64_t v18 = *(char **)(a1 + 48);
  int v20 = *(unsigned __int8 *)(a1 + 88);
  int v21 = *(unsigned __int8 *)(a1 + 89);
  if (v20 >= 4) {
    int v22 = 4;
  }
  else {
    int v22 = *(unsigned __int8 *)(a1 + 88);
  }
  if (v21 >= 2) {
    int v23 = 2;
  }
  else {
    int v23 = *(unsigned __int8 *)(a1 + 89);
  }
  if (v22) {
    BOOL v24 = v23 == 0;
  }
  else {
    BOOL v24 = 1;
  }
  if (v24)
  {
    char v28 = 0;
  }
  else
  {
    long long v25 = v100[0];
    long long v26 = v100[3];
    long long v27 = v100[4];
    *uint64_t v19 = v99;
    v19[1] = v26;
    v19[2] = v25;
    v19[3] = v27;
    v19 += 4;
    char v28 = 63;
  }
  char v29 = 0;
  *uint64_t v18 = v28;
  if (v21 <= 2) {
    int v30 = 2;
  }
  else {
    int v30 = v21;
  }
  unsigned int v31 = v30 - 2;
  if (v31 >= 2) {
    int v32 = 2;
  }
  else {
    int v32 = v31;
  }
  if (v22 && v32)
  {
    long long v33 = v100[8];
    long long v34 = v100[11];
    long long v35 = v100[12];
    *uint64_t v19 = v100[7];
    v19[1] = v34;
    v19[2] = v33;
    v19[3] = v35;
    v19 += 4;
    char v29 = 63;
  }
  v18[1] = v29;
  if (v20 <= 4) {
    int v20 = 4;
  }
  unsigned int v36 = v20 - 4;
  if (v36 >= 4) {
    unsigned int v36 = 4;
  }
  if (v36) {
    BOOL v37 = v23 == 0;
  }
  else {
    BOOL v37 = 1;
  }
  if (v37)
  {
    char v41 = 0;
  }
  else
  {
    long long v38 = v100[2];
    long long v39 = v100[5];
    long long v40 = v100[6];
    *uint64_t v19 = v100[1];
    v19[1] = v39;
    v19[2] = v38;
    v19[3] = v40;
    v19 += 4;
    char v41 = 63;
  }
  char v42 = 0;
  v18[2] = v41;
  if (v36 && v32)
  {
    long long v43 = v100[10];
    long long v44 = v100[13];
    long long v45 = v100[14];
    *uint64_t v19 = v100[9];
    v19[1] = v44;
    v19[2] = v43;
    v19[3] = v45;
    v19 += 4;
    char v42 = 63;
  }
  char v46 = 0;
  v18[3] = v42;
  if (v21 <= 4) {
    int v47 = 4;
  }
  else {
    int v47 = v21;
  }
  unsigned int v48 = v47 - 4;
  if (v48 >= 2) {
    unsigned int v48 = 2;
  }
  if (v22 && v48)
  {
    long long v49 = v100[16];
    long long v50 = v100[19];
    long long v51 = v100[20];
    *uint64_t v19 = v100[15];
    v19[1] = v50;
    v19[2] = v49;
    v19[3] = v51;
    v19 += 4;
    char v46 = 63;
  }
  char v52 = 0;
  v18[4] = v46;
  if (v21 <= 6) {
    int v21 = 6;
  }
  unsigned int v53 = v21 - 6;
  if (v53 >= 2) {
    unsigned int v53 = 2;
  }
  if (v22 && v53)
  {
    long long v54 = v100[24];
    long long v55 = v100[27];
    long long v56 = v100[28];
    *uint64_t v19 = v100[23];
    v19[1] = v55;
    v19[2] = v54;
    v19[3] = v56;
    v19 += 4;
    char v52 = 63;
  }
  char v57 = 0;
  v18[5] = v52;
  if (v36 && v48)
  {
    long long v58 = v100[18];
    long long v59 = v100[21];
    long long v60 = v100[22];
    *uint64_t v19 = v100[17];
    v19[1] = v59;
    v19[2] = v58;
    v19[3] = v60;
    v19 += 4;
    char v57 = 63;
  }
  char v61 = 0;
  v18[6] = v57;
  if (v36 && v53)
  {
    long long v62 = v100[26];
    long long v63 = v100[29];
    long long v64 = v100[30];
    *uint64_t v19 = v100[25];
    v19[1] = v63;
    v19[2] = v62;
    v19[3] = v64;
    char v61 = 63;
  }
  v18[7] = v61;
  return result;
}

unint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE3ELj4ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1, double a2, __n128 a3, __n128 a4, __n128 a5)
{
  uint64_t v61 = *MEMORY[0x263EF8340];
  AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressMacroblock((uint64_t)v60, *(__n128 **)(a1 + 40), *(unsigned __int8 **)(a1 + 48), a2, a3, a4, a5);
  uint64_t v14 = *(unsigned int *)(a1 + 80);
  if (!v14 || !*(_DWORD *)(a1 + 84)) {
    return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v60, 64, *(int16x8_t **)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), *(int16x4_t *)&v6, *(int16x4_t *)&v7, v8, v9, v10, v11, v12, v13);
  }
  unint64_t v15 = (unint64_t)*(unsigned int *)(a1 + 72) << 6;
  uint64_t v16 = 8 * *(unsigned int *)(a1 + 76);
  uint64_t v17 = &v60[v15 + v16];
  uint64_t v18 = *(void *)(a1 + 56);
  uint64_t v19 = *(void *)(a1 + 64);
  unint64_t v20 = 8 * *(unsigned int *)(a1 + 84);
  if (v20 <= 1) {
    unint64_t v21 = 1;
  }
  else {
    unint64_t v21 = 8 * *(unsigned int *)(a1 + 84);
  }
  if (v21) {
    BOOL v22 = (v21 - 1) >> 32 == 0;
  }
  else {
    BOOL v22 = 0;
  }
  if (v22)
  {
    long long v26 = &v60[v15 + v16];
    uint64_t v27 = v21 & 0x7FFFFFFF8;
    if (v21 < 0x20)
    {
      uint64_t v28 = 0;
      char v29 = &v60[v15 + v16];
      int v30 = *(uint64_t **)(a1 + 56);
      while (1)
      {
        unsigned int v31 = (char *)(v18 + v19 * v28);
        int v32 = &v17[64 * v28];
        if ((unint64_t)(&v26[64 * v28] - v31) > 0x1F)
        {
          v32 += v27;
          long long v34 = v29;
          long long v35 = v30;
          uint64_t v36 = v21 & 0x7FFFFFFF8;
          do
          {
            uint64_t v37 = *v35++;
            *(void *)&long long v6 = v37;
            *v34++ = v37;
            v36 -= 8;
          }
          while (v36);
          if (v21 == v27) {
            goto LABEL_17;
          }
          v31 += v27;
          int v33 = v21 & 0xFFFFFFF8;
        }
        else
        {
          int v33 = 0;
        }
        unsigned int v38 = v33 + 1;
        do
        {
          char v39 = *v31++;
          *v32++ = v39;
          BOOL v40 = v20 > v38++;
        }
        while (v40);
LABEL_17:
        ++v28;
        int v30 = (uint64_t *)((char *)v30 + v19);
        v29 += 64;
        if (v28 == v14) {
          return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v60, 64, *(int16x8_t **)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), *(int16x4_t *)&v6, *(int16x4_t *)&v7, v8, v9, v10, v11, v12, v13);
        }
      }
    }
    uint64_t v41 = 0;
    uint64_t v42 = v21 & 0x7FFFFFFE0;
    long long v43 = &v60[v15 + v16];
    long long v44 = &v60[v15 + 16 + v16];
    long long v45 = (long long *)(v18 + 16);
    char v46 = (uint64_t *)(v18 + (v21 & 0x7FFFFFFE0));
    for (uint64_t i = &v43[v21 & 0x7FFFFFFE0]; ; i += 8)
    {
      unsigned int v48 = (char *)(v18 + v19 * v41);
      long long v49 = &v17[64 * v41];
      if ((unint64_t)(&v26[64 * v41] - v48) >= 0x20)
      {
        unsigned int v53 = v45;
        long long v54 = v44;
        uint64_t v55 = v21 & 0x7FFFFFFE0;
        do
        {
          long long v6 = *(v53 - 1);
          long long v7 = *v53;
          *(v54 - 1) = v6;
          *long long v54 = v7;
          v54 += 2;
          v53 += 2;
          v55 -= 32;
        }
        while (v55);
        if (v21 == v42) {
          goto LABEL_28;
        }
        if ((v21 & 0x18) != 0)
        {
          v49 += v27;
          long long v56 = i;
          char v57 = v46;
          unint64_t v58 = v27 - (v21 & 0x7FFFFFFE0);
          do
          {
            uint64_t v59 = *v57++;
            *(void *)&long long v6 = v59;
            *v56++ = v59;
            v58 -= 8;
          }
          while (v58);
          if (v21 == v27) {
            goto LABEL_28;
          }
          v48 += v27;
          int v50 = v21 & 0xFFFFFFF8;
        }
        else
        {
          v48 += v42;
          v49 += v42;
          int v50 = v21 & 0xFFFFFFE0;
        }
      }
      else
      {
        int v50 = 0;
      }
      unsigned int v51 = v50 + 1;
      do
      {
        char v52 = *v48++;
        *v49++ = v52;
        BOOL v40 = v20 > v51++;
      }
      while (v40);
LABEL_28:
      ++v41;
      v44 += 64;
      long long v45 = (long long *)((char *)v45 + v19);
      char v46 = (uint64_t *)((char *)v46 + v19);
      if (v41 == v14) {
        return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v60, 64, *(int16x8_t **)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), *(int16x4_t *)&v6, *(int16x4_t *)&v7, v8, v9, v10, v11, v12, v13);
      }
    }
  }
  for (uint64_t j = 0; j != v14; ++j)
  {
    uint64_t v24 = 0;
    do
    {
      v17[v24] = *(unsigned char *)(v18 + v24);
      ++v24;
    }
    while (v20 > v24);
    v17 += 64;
    v18 += v19;
  }
  return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v60, 64, *(int16x8_t **)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), *(int16x4_t *)&v6, *(int16x4_t *)&v7, v8, v9, v10, v11, v12, v13);
}

_OWORD *___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE15ELj4ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v50 = *MEMORY[0x263EF8340];
  AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressMacroblock((uint64_t)v49, *(void *)(a1 + 40), *(unsigned __int8 **)(a1 + 48));
  uint64_t v2 = *(unsigned int *)(a1 + 80);
  if (!v2 || !*(_DWORD *)(a1 + 84)) {
    return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock(v49, 128, *(_OWORD **)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
  }
  unint64_t v3 = (unint64_t)*(unsigned int *)(a1 + 72) << 7;
  uint64_t v4 = 16 * *(unsigned int *)(a1 + 76);
  unint64_t v5 = (char *)v49 + v3 + v4;
  uint64_t v6 = *(void *)(a1 + 56);
  uint64_t v7 = *(void *)(a1 + 64);
  unint64_t v8 = 16 * *(unsigned int *)(a1 + 84);
  if (v8 <= 1) {
    unint64_t v9 = 1;
  }
  else {
    unint64_t v9 = 16 * *(unsigned int *)(a1 + 84);
  }
  if (v9) {
    BOOL v10 = (v9 - 1) >> 32 == 0;
  }
  else {
    BOOL v10 = 0;
  }
  if (v10)
  {
    uint64_t v14 = (char *)v49 + v3 + v4;
    uint64_t v15 = v9 & 0xFFFFFFFF0;
    if (v9 < 0x20)
    {
      uint64_t v16 = 0;
      uint64_t v17 = (char *)v49 + v3 + v4;
      uint64_t v18 = *(uint64_t **)(a1 + 56);
      while (1)
      {
        uint64_t v19 = (char *)(v6 + v7 * v16);
        unint64_t v20 = &v5[128 * v16];
        if ((unint64_t)(&v14[128 * v16] - v19) > 0x1F)
        {
          v20 += v15;
          BOOL v22 = v17;
          int v23 = v18;
          uint64_t v24 = v9 & 0xFFFFFFFF0;
          do
          {
            uint64_t v25 = *v23++;
            *v22++ = v25;
            v24 -= 8;
          }
          while (v24);
          if (v9 == v15) {
            goto LABEL_17;
          }
          v19 += v15;
          int v21 = v9 & 0xFFFFFFF0;
        }
        else
        {
          int v21 = 0;
        }
        unsigned int v26 = v21 + 1;
        do
        {
          char v27 = *v19++;
          *v20++ = v27;
          BOOL v28 = v8 > v26++;
        }
        while (v28);
LABEL_17:
        ++v16;
        uint64_t v18 = (uint64_t *)((char *)v18 + v7);
        v17 += 128;
        if (v16 == v2) {
          return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock(v49, 128, *(_OWORD **)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
        }
      }
    }
    uint64_t v29 = 0;
    uint64_t v30 = v9 & 0xFFFFFFFE0;
    unsigned int v31 = (char *)v49 + v3 + v4;
    int v32 = (char *)&v49[1] + v3 + v4;
    int v33 = (long long *)(v6 + 16);
    long long v34 = (uint64_t *)(v6 + (v9 & 0xFFFFFFFE0));
    for (uint64_t i = &v31[v9 & 0xFFFFFFFE0]; ; i += 128)
    {
      uint64_t v36 = (char *)(v6 + v7 * v29);
      uint64_t v37 = &v5[128 * v29];
      if ((unint64_t)(&v14[128 * v29] - v36) >= 0x20)
      {
        char v39 = v33;
        BOOL v40 = v32;
        uint64_t v41 = v9 & 0xFFFFFFFE0;
        do
        {
          long long v42 = *v39;
          *(v40 - 1) = *(v39 - 1);
          *BOOL v40 = v42;
          v40 += 2;
          v39 += 2;
          v41 -= 32;
        }
        while (v41);
        if (v9 == v30) {
          goto LABEL_28;
        }
        if ((v9 & 0x10) != 0)
        {
          v37 += v15;
          long long v43 = i;
          long long v44 = v34;
          unint64_t v45 = v15 - (v9 & 0xFFFFFFFE0);
          do
          {
            uint64_t v46 = *v44++;
            *(void *)long long v43 = v46;
            v43 += 8;
            v45 -= 8;
          }
          while (v45);
          if (v9 == v15) {
            goto LABEL_28;
          }
          v36 += v15;
          int v38 = v9 & 0xFFFFFFF0;
        }
        else
        {
          v36 += v30;
          v37 += v30;
          int v38 = v9 & 0xFFFFFFE0;
        }
      }
      else
      {
        int v38 = 0;
      }
      unsigned int v47 = v38 + 1;
      do
      {
        char v48 = *v36++;
        *v37++ = v48;
        BOOL v28 = v8 > v47++;
      }
      while (v28);
LABEL_28:
      ++v29;
      v32 += 128;
      int v33 = (long long *)((char *)v33 + v7);
      long long v34 = (uint64_t *)((char *)v34 + v7);
      if (v29 == v2) {
        return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock(v49, 128, *(_OWORD **)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
      }
    }
  }
  for (uint64_t j = 0; j != v2; ++j)
  {
    uint64_t v12 = 0;
    do
    {
      v5[v12] = *(unsigned char *)(v6 + v12);
      ++v12;
    }
    while (v8 > v12);
    v5 += 128;
    v6 += v7;
  }
  return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock(v49, 128, *(_OWORD **)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE15ELj4ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v50 = *MEMORY[0x263EF8340];
  AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressMacroblock((uint64_t)v49, *(void *)(a1 + 40), *(unsigned __int8 **)(a1 + 48));
  uint64_t v2 = *(unsigned int *)(a1 + 80);
  if (!v2 || !*(_DWORD *)(a1 + 84)) {
    return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((uint64_t)v49, 128, *(void *)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
  }
  unint64_t v3 = (unint64_t)*(unsigned int *)(a1 + 72) << 7;
  uint64_t v4 = 16 * *(unsigned int *)(a1 + 76);
  unint64_t v5 = &v49[v3 + v4];
  uint64_t v6 = *(void *)(a1 + 56);
  uint64_t v7 = *(void *)(a1 + 64);
  unint64_t v8 = 16 * *(unsigned int *)(a1 + 84);
  if (v8 <= 1) {
    unint64_t v9 = 1;
  }
  else {
    unint64_t v9 = 16 * *(unsigned int *)(a1 + 84);
  }
  if (v9) {
    BOOL v10 = (v9 - 1) >> 32 == 0;
  }
  else {
    BOOL v10 = 0;
  }
  if (v10)
  {
    uint64_t v14 = &v49[v3 + v4];
    uint64_t v15 = v9 & 0xFFFFFFFF0;
    if (v9 < 0x20)
    {
      uint64_t v16 = 0;
      uint64_t v17 = &v49[v3 + v4];
      uint64_t v18 = *(uint64_t **)(a1 + 56);
      while (1)
      {
        uint64_t v19 = (char *)(v6 + v7 * v16);
        unint64_t v20 = &v5[128 * v16];
        if ((unint64_t)(&v14[128 * v16] - v19) > 0x1F)
        {
          v20 += v15;
          BOOL v22 = v17;
          int v23 = v18;
          uint64_t v24 = v9 & 0xFFFFFFFF0;
          do
          {
            uint64_t v25 = *v23++;
            *v22++ = v25;
            v24 -= 8;
          }
          while (v24);
          if (v9 == v15) {
            goto LABEL_17;
          }
          v19 += v15;
          int v21 = v9 & 0xFFFFFFF0;
        }
        else
        {
          int v21 = 0;
        }
        unsigned int v26 = v21 + 1;
        do
        {
          char v27 = *v19++;
          *v20++ = v27;
          BOOL v28 = v8 > v26++;
        }
        while (v28);
LABEL_17:
        ++v16;
        uint64_t v18 = (uint64_t *)((char *)v18 + v7);
        v17 += 128;
        if (v16 == v2) {
          return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((uint64_t)v49, 128, *(void *)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
        }
      }
    }
    uint64_t v29 = 0;
    uint64_t v30 = v9 & 0xFFFFFFFE0;
    unsigned int v31 = &v49[v3 + v4];
    int v32 = &v49[v3 + 16 + v4];
    int v33 = (long long *)(v6 + 16);
    long long v34 = (uint64_t *)(v6 + (v9 & 0xFFFFFFFE0));
    for (uint64_t i = &v31[v9 & 0xFFFFFFFE0]; ; i += 16)
    {
      uint64_t v36 = (char *)(v6 + v7 * v29);
      uint64_t v37 = &v5[128 * v29];
      if ((unint64_t)(&v14[128 * v29] - v36) >= 0x20)
      {
        char v39 = v33;
        BOOL v40 = v32;
        uint64_t v41 = v9 & 0xFFFFFFFE0;
        do
        {
          long long v42 = *v39;
          *(v40 - 1) = *(v39 - 1);
          *BOOL v40 = v42;
          v40 += 2;
          v39 += 2;
          v41 -= 32;
        }
        while (v41);
        if (v9 == v30) {
          goto LABEL_28;
        }
        if ((v9 & 0x10) != 0)
        {
          v37 += v15;
          long long v43 = i;
          long long v44 = v34;
          unint64_t v45 = v15 - (v9 & 0xFFFFFFFE0);
          do
          {
            uint64_t v46 = *v44++;
            *v43++ = v46;
            v45 -= 8;
          }
          while (v45);
          if (v9 == v15) {
            goto LABEL_28;
          }
          v36 += v15;
          int v38 = v9 & 0xFFFFFFF0;
        }
        else
        {
          v36 += v30;
          v37 += v30;
          int v38 = v9 & 0xFFFFFFE0;
        }
      }
      else
      {
        int v38 = 0;
      }
      unsigned int v47 = v38 + 1;
      do
      {
        char v48 = *v36++;
        *v37++ = v48;
        BOOL v28 = v8 > v47++;
      }
      while (v28);
LABEL_28:
      ++v29;
      v32 += 128;
      int v33 = (long long *)((char *)v33 + v7);
      long long v34 = (uint64_t *)((char *)v34 + v7);
      if (v29 == v2) {
        return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((uint64_t)v49, 128, *(void *)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
      }
    }
  }
  for (uint64_t j = 0; j != v2; ++j)
  {
    uint64_t v12 = 0;
    do
    {
      v5[v12] = *(unsigned char *)(v6 + v12);
      ++v12;
    }
    while (v8 > v12);
    v5 += 128;
    v6 += v7;
  }
  return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((uint64_t)v49, 128, *(void *)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
}

_OWORD *___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE15ELj4ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v50 = *MEMORY[0x263EF8340];
  AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressMacroblock((uint64_t)v49, *(void *)(a1 + 40), *(unsigned __int8 **)(a1 + 48));
  uint64_t v2 = *(unsigned int *)(a1 + 80);
  if (!v2 || !*(_DWORD *)(a1 + 84)) {
    return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock(v49, 128, *(_OWORD **)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
  }
  unint64_t v3 = (unint64_t)*(unsigned int *)(a1 + 72) << 7;
  uint64_t v4 = 16 * *(unsigned int *)(a1 + 76);
  unint64_t v5 = (char *)v49 + v3 + v4;
  uint64_t v6 = *(void *)(a1 + 56);
  uint64_t v7 = *(void *)(a1 + 64);
  unint64_t v8 = 16 * *(unsigned int *)(a1 + 84);
  if (v8 <= 1) {
    unint64_t v9 = 1;
  }
  else {
    unint64_t v9 = 16 * *(unsigned int *)(a1 + 84);
  }
  if (v9) {
    BOOL v10 = (v9 - 1) >> 32 == 0;
  }
  else {
    BOOL v10 = 0;
  }
  if (v10)
  {
    uint64_t v14 = (char *)v49 + v3 + v4;
    uint64_t v15 = v9 & 0xFFFFFFFF0;
    if (v9 < 0x20)
    {
      uint64_t v16 = 0;
      uint64_t v17 = (char *)v49 + v3 + v4;
      uint64_t v18 = *(uint64_t **)(a1 + 56);
      while (1)
      {
        uint64_t v19 = (char *)(v6 + v7 * v16);
        unint64_t v20 = &v5[128 * v16];
        if ((unint64_t)(&v14[128 * v16] - v19) > 0x1F)
        {
          v20 += v15;
          BOOL v22 = v17;
          int v23 = v18;
          uint64_t v24 = v9 & 0xFFFFFFFF0;
          do
          {
            uint64_t v25 = *v23++;
            *v22++ = v25;
            v24 -= 8;
          }
          while (v24);
          if (v9 == v15) {
            goto LABEL_17;
          }
          v19 += v15;
          int v21 = v9 & 0xFFFFFFF0;
        }
        else
        {
          int v21 = 0;
        }
        unsigned int v26 = v21 + 1;
        do
        {
          char v27 = *v19++;
          *v20++ = v27;
          BOOL v28 = v8 > v26++;
        }
        while (v28);
LABEL_17:
        ++v16;
        uint64_t v18 = (uint64_t *)((char *)v18 + v7);
        v17 += 128;
        if (v16 == v2) {
          return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock(v49, 128, *(_OWORD **)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
        }
      }
    }
    uint64_t v29 = 0;
    uint64_t v30 = v9 & 0xFFFFFFFE0;
    unsigned int v31 = (char *)v49 + v3 + v4;
    int v32 = (char *)&v49[1] + v3 + v4;
    int v33 = (long long *)(v6 + 16);
    long long v34 = (uint64_t *)(v6 + (v9 & 0xFFFFFFFE0));
    for (uint64_t i = &v31[v9 & 0xFFFFFFFE0]; ; i += 128)
    {
      uint64_t v36 = (char *)(v6 + v7 * v29);
      uint64_t v37 = &v5[128 * v29];
      if ((unint64_t)(&v14[128 * v29] - v36) >= 0x20)
      {
        char v39 = v33;
        BOOL v40 = v32;
        uint64_t v41 = v9 & 0xFFFFFFFE0;
        do
        {
          long long v42 = *v39;
          *(v40 - 1) = *(v39 - 1);
          *BOOL v40 = v42;
          v40 += 2;
          v39 += 2;
          v41 -= 32;
        }
        while (v41);
        if (v9 == v30) {
          goto LABEL_28;
        }
        if ((v9 & 0x10) != 0)
        {
          v37 += v15;
          long long v43 = i;
          long long v44 = v34;
          unint64_t v45 = v15 - (v9 & 0xFFFFFFFE0);
          do
          {
            uint64_t v46 = *v44++;
            *(void *)long long v43 = v46;
            v43 += 8;
            v45 -= 8;
          }
          while (v45);
          if (v9 == v15) {
            goto LABEL_28;
          }
          v36 += v15;
          int v38 = v9 & 0xFFFFFFF0;
        }
        else
        {
          v36 += v30;
          v37 += v30;
          int v38 = v9 & 0xFFFFFFE0;
        }
      }
      else
      {
        int v38 = 0;
      }
      unsigned int v47 = v38 + 1;
      do
      {
        char v48 = *v36++;
        *v37++ = v48;
        BOOL v28 = v8 > v47++;
      }
      while (v28);
LABEL_28:
      ++v29;
      v32 += 128;
      int v33 = (long long *)((char *)v33 + v7);
      long long v34 = (uint64_t *)((char *)v34 + v7);
      if (v29 == v2) {
        return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock(v49, 128, *(_OWORD **)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
      }
    }
  }
  for (uint64_t j = 0; j != v2; ++j)
  {
    uint64_t v12 = 0;
    do
    {
      v5[v12] = *(unsigned char *)(v6 + v12);
      ++v12;
    }
    while (v8 > v12);
    v5 += 128;
    v6 += v7;
  }
  return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock(v49, 128, *(_OWORD **)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE15ELj4ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v50 = *MEMORY[0x263EF8340];
  AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressMacroblock((uint64_t)v49, *(void *)(a1 + 40), *(unsigned __int8 **)(a1 + 48));
  uint64_t v2 = *(unsigned int *)(a1 + 80);
  if (!v2 || !*(_DWORD *)(a1 + 84)) {
    return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((uint64_t)v49, 128, *(void *)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
  }
  unint64_t v3 = (unint64_t)*(unsigned int *)(a1 + 72) << 7;
  uint64_t v4 = 16 * *(unsigned int *)(a1 + 76);
  unint64_t v5 = &v49[v3 + v4];
  uint64_t v6 = *(void *)(a1 + 56);
  uint64_t v7 = *(void *)(a1 + 64);
  unint64_t v8 = 16 * *(unsigned int *)(a1 + 84);
  if (v8 <= 1) {
    unint64_t v9 = 1;
  }
  else {
    unint64_t v9 = 16 * *(unsigned int *)(a1 + 84);
  }
  if (v9) {
    BOOL v10 = (v9 - 1) >> 32 == 0;
  }
  else {
    BOOL v10 = 0;
  }
  if (v10)
  {
    uint64_t v14 = &v49[v3 + v4];
    uint64_t v15 = v9 & 0xFFFFFFFF0;
    if (v9 < 0x20)
    {
      uint64_t v16 = 0;
      uint64_t v17 = &v49[v3 + v4];
      uint64_t v18 = *(uint64_t **)(a1 + 56);
      while (1)
      {
        uint64_t v19 = (char *)(v6 + v7 * v16);
        unint64_t v20 = &v5[128 * v16];
        if ((unint64_t)(&v14[128 * v16] - v19) > 0x1F)
        {
          v20 += v15;
          BOOL v22 = v17;
          int v23 = v18;
          uint64_t v24 = v9 & 0xFFFFFFFF0;
          do
          {
            uint64_t v25 = *v23++;
            *v22++ = v25;
            v24 -= 8;
          }
          while (v24);
          if (v9 == v15) {
            goto LABEL_17;
          }
          v19 += v15;
          int v21 = v9 & 0xFFFFFFF0;
        }
        else
        {
          int v21 = 0;
        }
        unsigned int v26 = v21 + 1;
        do
        {
          char v27 = *v19++;
          *v20++ = v27;
          BOOL v28 = v8 > v26++;
        }
        while (v28);
LABEL_17:
        ++v16;
        uint64_t v18 = (uint64_t *)((char *)v18 + v7);
        v17 += 128;
        if (v16 == v2) {
          return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((uint64_t)v49, 128, *(void *)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
        }
      }
    }
    uint64_t v29 = 0;
    uint64_t v30 = v9 & 0xFFFFFFFE0;
    unsigned int v31 = &v49[v3 + v4];
    int v32 = &v49[v3 + 16 + v4];
    int v33 = (long long *)(v6 + 16);
    long long v34 = (uint64_t *)(v6 + (v9 & 0xFFFFFFFE0));
    for (uint64_t i = &v31[v9 & 0xFFFFFFFE0]; ; i += 16)
    {
      uint64_t v36 = (char *)(v6 + v7 * v29);
      uint64_t v37 = &v5[128 * v29];
      if ((unint64_t)(&v14[128 * v29] - v36) >= 0x20)
      {
        char v39 = v33;
        BOOL v40 = v32;
        uint64_t v41 = v9 & 0xFFFFFFFE0;
        do
        {
          long long v42 = *v39;
          *(v40 - 1) = *(v39 - 1);
          *BOOL v40 = v42;
          v40 += 2;
          v39 += 2;
          v41 -= 32;
        }
        while (v41);
        if (v9 == v30) {
          goto LABEL_28;
        }
        if ((v9 & 0x10) != 0)
        {
          v37 += v15;
          long long v43 = i;
          long long v44 = v34;
          unint64_t v45 = v15 - (v9 & 0xFFFFFFFE0);
          do
          {
            uint64_t v46 = *v44++;
            *v43++ = v46;
            v45 -= 8;
          }
          while (v45);
          if (v9 == v15) {
            goto LABEL_28;
          }
          v36 += v15;
          int v38 = v9 & 0xFFFFFFF0;
        }
        else
        {
          v36 += v30;
          v37 += v30;
          int v38 = v9 & 0xFFFFFFE0;
        }
      }
      else
      {
        int v38 = 0;
      }
      unsigned int v47 = v38 + 1;
      do
      {
        char v48 = *v36++;
        *v37++ = v48;
        BOOL v28 = v8 > v47++;
      }
      while (v28);
LABEL_28:
      ++v29;
      v32 += 128;
      int v33 = (long long *)((char *)v33 + v7);
      long long v34 = (uint64_t *)((char *)v34 + v7);
      if (v29 == v2) {
        return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((uint64_t)v49, 128, *(void *)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
      }
    }
  }
  for (uint64_t j = 0; j != v2; ++j)
  {
    uint64_t v12 = 0;
    do
    {
      v5[v12] = *(unsigned char *)(v6 + v12);
      ++v12;
    }
    while (v8 > v12);
    v5 += 128;
    v6 += v7;
  }
  return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((uint64_t)v49, 128, *(void *)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE13ELj4ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v70 = *MEMORY[0x263EF8340];
  AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressMacroblock((uint64_t)v69, *(void *)(a1 + 40), *(unsigned __int8 **)(a1 + 48));
  uint64_t v2 = *(unsigned int *)(a1 + 80);
  if (v2 && *(_DWORD *)(a1 + 84))
  {
    unint64_t v3 = (unint64_t)*(unsigned int *)(a1 + 72) << 7;
    uint64_t v4 = 16 * *(unsigned int *)(a1 + 76);
    unint64_t v5 = &v69[v3 + v4];
    uint64_t v6 = *(void *)(a1 + 56);
    uint64_t v7 = *(void *)(a1 + 64);
    unint64_t v8 = 16 * *(unsigned int *)(a1 + 84);
    if (v8 <= 1) {
      unint64_t v9 = 1;
    }
    else {
      unint64_t v9 = 16 * *(unsigned int *)(a1 + 84);
    }
    if (v9) {
      BOOL v10 = (v9 - 1) >> 32 == 0;
    }
    else {
      BOOL v10 = 0;
    }
    if (!v10)
    {
      for (uint64_t i = 0; i != v2; ++i)
      {
        uint64_t v12 = 0;
        do
        {
          v5[v12] = *(unsigned char *)(v6 + v12);
          ++v12;
        }
        while (v8 > v12);
        v5 += 128;
        v6 += v7;
      }
      goto LABEL_14;
    }
    long long v34 = &v69[v3 + v4];
    uint64_t v35 = v9 & 0xFFFFFFFF0;
    if (v9 < 0x20)
    {
      uint64_t v36 = 0;
      uint64_t v37 = &v69[v3 + v4];
      int v38 = *(uint64_t **)(a1 + 56);
      while (1)
      {
        char v39 = (char *)(v6 + v7 * v36);
        BOOL v40 = &v5[128 * v36];
        if ((unint64_t)(&v34[128 * v36] - v39) > 0x1F)
        {
          v40 += v35;
          long long v42 = v37;
          long long v43 = v38;
          uint64_t v44 = v9 & 0xFFFFFFFF0;
          do
          {
            uint64_t v45 = *v43++;
            *v42++ = v45;
            v44 -= 8;
          }
          while (v44);
          if (v9 == v35) {
            goto LABEL_30;
          }
          v39 += v35;
          int v41 = v9 & 0xFFFFFFF0;
        }
        else
        {
          int v41 = 0;
        }
        unsigned int v46 = v41 + 1;
        do
        {
          char v47 = *v39++;
          *v40++ = v47;
          BOOL v48 = v8 > v46++;
        }
        while (v48);
LABEL_30:
        ++v36;
        int v38 = (uint64_t *)((char *)v38 + v7);
        v37 += 128;
        if (v36 == v2) {
          goto LABEL_14;
        }
      }
    }
    uint64_t v49 = 0;
    uint64_t v50 = v9 & 0xFFFFFFFE0;
    unsigned int v51 = &v69[v3 + v4];
    char v52 = &v69[v3 + 16 + v4];
    unsigned int v53 = (long long *)(v6 + 16);
    long long v54 = (uint64_t *)(v6 + (v9 & 0xFFFFFFFE0));
    uint64_t v55 = &v51[v9 & 0xFFFFFFFE0];
    do
    {
      long long v56 = (char *)(v6 + v7 * v49);
      char v57 = &v5[128 * v49];
      if ((unint64_t)(&v34[128 * v49] - v56) >= 0x20)
      {
        uint64_t v59 = v53;
        long long v60 = v52;
        uint64_t v61 = v9 & 0xFFFFFFFE0;
        do
        {
          long long v62 = *v59;
          *(v60 - 1) = *(v59 - 1);
          *long long v60 = v62;
          v60 += 2;
          v59 += 2;
          v61 -= 32;
        }
        while (v61);
        if (v9 == v50) {
          goto LABEL_41;
        }
        if ((v9 & 0x10) != 0)
        {
          v57 += v35;
          long long v63 = v55;
          long long v64 = v54;
          unint64_t v65 = v35 - (v9 & 0xFFFFFFFE0);
          do
          {
            uint64_t v66 = *v64++;
            *v63++ = v66;
            v65 -= 8;
          }
          while (v65);
          if (v9 == v35) {
            goto LABEL_41;
          }
          v56 += v35;
          int v58 = v9 & 0xFFFFFFF0;
        }
        else
        {
          v56 += v50;
          v57 += v50;
          int v58 = v9 & 0xFFFFFFE0;
        }
      }
      else
      {
        int v58 = 0;
      }
      unsigned int v67 = v58 + 1;
      do
      {
        char v68 = *v56++;
        *v57++ = v68;
        BOOL v48 = v8 > v67++;
      }
      while (v48);
LABEL_41:
      ++v49;
      v52 += 128;
      unsigned int v53 = (long long *)((char *)v53 + v7);
      long long v54 = (uint64_t *)((char *)v54 + v7);
      v55 += 16;
    }
    while (v49 != v2);
  }
LABEL_14:
  uint64_t v13 = 0;
  uint64_t v14 = *(_OWORD **)(a1 + 40);
  uint64_t v15 = *(char **)(a1 + 48);
  int v16 = *(unsigned __int8 *)(a1 + 88);
  int v17 = *(unsigned __int8 *)(a1 + 89);
  do
  {
    uint64_t v29 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,4u>::kSubblockPositions[v13 + 1];
    uint64_t v30 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,4u>::kSubblockPositions[v13];
    LODWORD(result) = (v16 - 4 * v30) & ~((v16 - 4 * (int)v30) >> 31);
    if (result >= 4) {
      uint64_t result = 4;
    }
    else {
      uint64_t result = result;
    }
    unsigned int v32 = (v17 - 2 * v29) & ~((v17 - 2 * (int)v29) >> 31);
    if (v32 >= 2) {
      unsigned int v32 = 2;
    }
    if (result) {
      BOOL v33 = v32 == 0;
    }
    else {
      BOOL v33 = 1;
    }
    if (v33)
    {
      char v28 = 0;
    }
    else
    {
      uint64_t v18 = (long long *)&v69[256 * v29 + 64 * v30];
      long long v20 = *v18;
      long long v21 = v18[1];
      uint64_t v19 = v18 + 2;
      uint64_t result = (uint64_t)(v18 + 8);
      v18 += 10;
      long long v22 = *v19;
      long long v23 = v19[1];
      long long v24 = *(_OWORD *)result;
      long long v25 = *(_OWORD *)(result + 16);
      long long v26 = *v18;
      long long v27 = v18[1];
      *uint64_t v14 = v20;
      v14[1] = v21;
      v14[2] = v24;
      v14[3] = v25;
      v14[4] = v22;
      v14[5] = v23;
      v14[6] = v26;
      v14[7] = v27;
      v14 += 8;
      char v28 = 127;
    }
    *v15++ = v28;
    v13 += 2;
  }
  while (v13 != 16);
  return result;
}

unint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE13ELj4ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v50 = *MEMORY[0x263EF8340];
  AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressMacroblock((uint64_t)v49, *(void *)(a1 + 40), *(unsigned __int8 **)(a1 + 48));
  uint64_t v2 = *(unsigned int *)(a1 + 80);
  if (!v2 || !*(_DWORD *)(a1 + 84)) {
    return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v49, 128, *(void *)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
  }
  unint64_t v3 = (unint64_t)*(unsigned int *)(a1 + 72) << 7;
  uint64_t v4 = 16 * *(unsigned int *)(a1 + 76);
  unint64_t v5 = &v49[v3 + v4];
  uint64_t v6 = *(void *)(a1 + 56);
  uint64_t v7 = *(void *)(a1 + 64);
  unint64_t v8 = 16 * *(unsigned int *)(a1 + 84);
  if (v8 <= 1) {
    unint64_t v9 = 1;
  }
  else {
    unint64_t v9 = 16 * *(unsigned int *)(a1 + 84);
  }
  if (v9) {
    BOOL v10 = (v9 - 1) >> 32 == 0;
  }
  else {
    BOOL v10 = 0;
  }
  if (v10)
  {
    uint64_t v14 = &v49[v3 + v4];
    uint64_t v15 = v9 & 0xFFFFFFFF0;
    if (v9 < 0x20)
    {
      uint64_t v16 = 0;
      int v17 = &v49[v3 + v4];
      uint64_t v18 = *(uint64_t **)(a1 + 56);
      while (1)
      {
        uint64_t v19 = (char *)(v6 + v7 * v16);
        long long v20 = &v5[128 * v16];
        if ((unint64_t)(&v14[128 * v16] - v19) > 0x1F)
        {
          v20 += v15;
          long long v22 = v17;
          long long v23 = v18;
          uint64_t v24 = v9 & 0xFFFFFFFF0;
          do
          {
            uint64_t v25 = *v23++;
            *v22++ = v25;
            v24 -= 8;
          }
          while (v24);
          if (v9 == v15) {
            goto LABEL_17;
          }
          v19 += v15;
          int v21 = v9 & 0xFFFFFFF0;
        }
        else
        {
          int v21 = 0;
        }
        unsigned int v26 = v21 + 1;
        do
        {
          char v27 = *v19++;
          *v20++ = v27;
          BOOL v28 = v8 > v26++;
        }
        while (v28);
LABEL_17:
        ++v16;
        uint64_t v18 = (uint64_t *)((char *)v18 + v7);
        v17 += 128;
        if (v16 == v2) {
          return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v49, 128, *(void *)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
        }
      }
    }
    uint64_t v29 = 0;
    uint64_t v30 = v9 & 0xFFFFFFFE0;
    unsigned int v31 = &v49[v3 + v4];
    unsigned int v32 = &v49[v3 + 16 + v4];
    BOOL v33 = (long long *)(v6 + 16);
    long long v34 = (uint64_t *)(v6 + (v9 & 0xFFFFFFFE0));
    for (uint64_t i = &v31[v9 & 0xFFFFFFFE0]; ; i += 16)
    {
      uint64_t v36 = (char *)(v6 + v7 * v29);
      uint64_t v37 = &v5[128 * v29];
      if ((unint64_t)(&v14[128 * v29] - v36) >= 0x20)
      {
        char v39 = v33;
        BOOL v40 = v32;
        uint64_t v41 = v9 & 0xFFFFFFFE0;
        do
        {
          long long v42 = *v39;
          *(v40 - 1) = *(v39 - 1);
          *BOOL v40 = v42;
          v40 += 2;
          v39 += 2;
          v41 -= 32;
        }
        while (v41);
        if (v9 == v30) {
          goto LABEL_28;
        }
        if ((v9 & 0x10) != 0)
        {
          v37 += v15;
          long long v43 = i;
          uint64_t v44 = v34;
          unint64_t v45 = v15 - (v9 & 0xFFFFFFFE0);
          do
          {
            uint64_t v46 = *v44++;
            *v43++ = v46;
            v45 -= 8;
          }
          while (v45);
          if (v9 == v15) {
            goto LABEL_28;
          }
          v36 += v15;
          int v38 = v9 & 0xFFFFFFF0;
        }
        else
        {
          v36 += v30;
          v37 += v30;
          int v38 = v9 & 0xFFFFFFE0;
        }
      }
      else
      {
        int v38 = 0;
      }
      unsigned int v47 = v38 + 1;
      do
      {
        char v48 = *v36++;
        *v37++ = v48;
        BOOL v28 = v8 > v47++;
      }
      while (v28);
LABEL_28:
      ++v29;
      v32 += 128;
      BOOL v33 = (long long *)((char *)v33 + v7);
      long long v34 = (uint64_t *)((char *)v34 + v7);
      if (v29 == v2) {
        return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v49, 128, *(void *)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
      }
    }
  }
  for (uint64_t j = 0; j != v2; ++j)
  {
    uint64_t v12 = 0;
    do
    {
      v5[v12] = *(unsigned char *)(v6 + v12);
      ++v12;
    }
    while (v8 > v12);
    v5 += 128;
    v6 += v7;
  }
  return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v49, 128, *(void *)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE13ELj4ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v70 = *MEMORY[0x263EF8340];
  AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressMacroblock((uint64_t)v69, *(void *)(a1 + 40), *(unsigned __int8 **)(a1 + 48));
  uint64_t v2 = *(unsigned int *)(a1 + 80);
  if (v2 && *(_DWORD *)(a1 + 84))
  {
    unint64_t v3 = (unint64_t)*(unsigned int *)(a1 + 72) << 7;
    uint64_t v4 = 16 * *(unsigned int *)(a1 + 76);
    unint64_t v5 = &v69[v3 + v4];
    uint64_t v6 = *(void *)(a1 + 56);
    uint64_t v7 = *(void *)(a1 + 64);
    unint64_t v8 = 16 * *(unsigned int *)(a1 + 84);
    if (v8 <= 1) {
      unint64_t v9 = 1;
    }
    else {
      unint64_t v9 = 16 * *(unsigned int *)(a1 + 84);
    }
    if (v9) {
      BOOL v10 = (v9 - 1) >> 32 == 0;
    }
    else {
      BOOL v10 = 0;
    }
    if (!v10)
    {
      for (uint64_t i = 0; i != v2; ++i)
      {
        uint64_t v12 = 0;
        do
        {
          v5[v12] = *(unsigned char *)(v6 + v12);
          ++v12;
        }
        while (v8 > v12);
        v5 += 128;
        v6 += v7;
      }
      goto LABEL_14;
    }
    long long v34 = &v69[v3 + v4];
    uint64_t v35 = v9 & 0xFFFFFFFF0;
    if (v9 < 0x20)
    {
      uint64_t v36 = 0;
      uint64_t v37 = &v69[v3 + v4];
      int v38 = *(uint64_t **)(a1 + 56);
      while (1)
      {
        char v39 = (char *)(v6 + v7 * v36);
        BOOL v40 = &v5[128 * v36];
        if ((unint64_t)(&v34[128 * v36] - v39) > 0x1F)
        {
          v40 += v35;
          long long v42 = v37;
          long long v43 = v38;
          uint64_t v44 = v9 & 0xFFFFFFFF0;
          do
          {
            uint64_t v45 = *v43++;
            *v42++ = v45;
            v44 -= 8;
          }
          while (v44);
          if (v9 == v35) {
            goto LABEL_30;
          }
          v39 += v35;
          int v41 = v9 & 0xFFFFFFF0;
        }
        else
        {
          int v41 = 0;
        }
        unsigned int v46 = v41 + 1;
        do
        {
          char v47 = *v39++;
          *v40++ = v47;
          BOOL v48 = v8 > v46++;
        }
        while (v48);
LABEL_30:
        ++v36;
        int v38 = (uint64_t *)((char *)v38 + v7);
        v37 += 128;
        if (v36 == v2) {
          goto LABEL_14;
        }
      }
    }
    uint64_t v49 = 0;
    uint64_t v50 = v9 & 0xFFFFFFFE0;
    unsigned int v51 = &v69[v3 + v4];
    char v52 = &v69[v3 + 16 + v4];
    unsigned int v53 = (long long *)(v6 + 16);
    long long v54 = (uint64_t *)(v6 + (v9 & 0xFFFFFFFE0));
    uint64_t v55 = &v51[v9 & 0xFFFFFFFE0];
    do
    {
      long long v56 = (char *)(v6 + v7 * v49);
      char v57 = &v5[128 * v49];
      if ((unint64_t)(&v34[128 * v49] - v56) >= 0x20)
      {
        uint64_t v59 = v53;
        long long v60 = v52;
        uint64_t v61 = v9 & 0xFFFFFFFE0;
        do
        {
          long long v62 = *v59;
          *(v60 - 1) = *(v59 - 1);
          *long long v60 = v62;
          v60 += 2;
          v59 += 2;
          v61 -= 32;
        }
        while (v61);
        if (v9 == v50) {
          goto LABEL_41;
        }
        if ((v9 & 0x10) != 0)
        {
          v57 += v35;
          long long v63 = v55;
          long long v64 = v54;
          unint64_t v65 = v35 - (v9 & 0xFFFFFFFE0);
          do
          {
            uint64_t v66 = *v64++;
            *v63++ = v66;
            v65 -= 8;
          }
          while (v65);
          if (v9 == v35) {
            goto LABEL_41;
          }
          v56 += v35;
          int v58 = v9 & 0xFFFFFFF0;
        }
        else
        {
          v56 += v50;
          v57 += v50;
          int v58 = v9 & 0xFFFFFFE0;
        }
      }
      else
      {
        int v58 = 0;
      }
      unsigned int v67 = v58 + 1;
      do
      {
        char v68 = *v56++;
        *v57++ = v68;
        BOOL v48 = v8 > v67++;
      }
      while (v48);
LABEL_41:
      ++v49;
      v52 += 128;
      unsigned int v53 = (long long *)((char *)v53 + v7);
      long long v54 = (uint64_t *)((char *)v54 + v7);
      v55 += 16;
    }
    while (v49 != v2);
  }
LABEL_14:
  uint64_t v13 = 0;
  uint64_t v14 = *(_OWORD **)(a1 + 40);
  uint64_t v15 = *(char **)(a1 + 48);
  int v16 = *(unsigned __int8 *)(a1 + 88);
  int v17 = *(unsigned __int8 *)(a1 + 89);
  do
  {
    uint64_t v29 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,4u>::kSubblockPositions[v13 + 1];
    uint64_t v30 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,4u>::kSubblockPositions[v13];
    LODWORD(result) = (v16 - 4 * v30) & ~((v16 - 4 * (int)v30) >> 31);
    if (result >= 4) {
      uint64_t result = 4;
    }
    else {
      uint64_t result = result;
    }
    unsigned int v32 = (v17 - 2 * v29) & ~((v17 - 2 * (int)v29) >> 31);
    if (v32 >= 2) {
      unsigned int v32 = 2;
    }
    if (result) {
      BOOL v33 = v32 == 0;
    }
    else {
      BOOL v33 = 1;
    }
    if (v33)
    {
      char v28 = 0;
    }
    else
    {
      uint64_t v18 = (long long *)&v69[256 * v29 + 64 * v30];
      long long v20 = *v18;
      long long v21 = v18[1];
      uint64_t v19 = v18 + 2;
      uint64_t result = (uint64_t)(v18 + 8);
      v18 += 10;
      long long v22 = *v19;
      long long v23 = v19[1];
      long long v24 = *(_OWORD *)result;
      long long v25 = *(_OWORD *)(result + 16);
      long long v26 = *v18;
      long long v27 = v18[1];
      *uint64_t v14 = v20;
      v14[1] = v21;
      v14[2] = v24;
      v14[3] = v25;
      v14[4] = v22;
      v14[5] = v23;
      v14[6] = v26;
      v14[7] = v27;
      v14 += 8;
      char v28 = 127;
    }
    *v15++ = v28;
    v13 += 2;
  }
  while (v13 != 16);
  return result;
}

unint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE13ELj4ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v50 = *MEMORY[0x263EF8340];
  AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressMacroblock((uint64_t)v49, *(void *)(a1 + 40), *(unsigned __int8 **)(a1 + 48));
  uint64_t v2 = *(unsigned int *)(a1 + 80);
  if (!v2 || !*(_DWORD *)(a1 + 84)) {
    return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v49, 128, *(void *)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
  }
  unint64_t v3 = (unint64_t)*(unsigned int *)(a1 + 72) << 7;
  uint64_t v4 = 16 * *(unsigned int *)(a1 + 76);
  unint64_t v5 = &v49[v3 + v4];
  uint64_t v6 = *(void *)(a1 + 56);
  uint64_t v7 = *(void *)(a1 + 64);
  unint64_t v8 = 16 * *(unsigned int *)(a1 + 84);
  if (v8 <= 1) {
    unint64_t v9 = 1;
  }
  else {
    unint64_t v9 = 16 * *(unsigned int *)(a1 + 84);
  }
  if (v9) {
    BOOL v10 = (v9 - 1) >> 32 == 0;
  }
  else {
    BOOL v10 = 0;
  }
  if (v10)
  {
    uint64_t v14 = &v49[v3 + v4];
    uint64_t v15 = v9 & 0xFFFFFFFF0;
    if (v9 < 0x20)
    {
      uint64_t v16 = 0;
      int v17 = &v49[v3 + v4];
      uint64_t v18 = *(uint64_t **)(a1 + 56);
      while (1)
      {
        uint64_t v19 = (char *)(v6 + v7 * v16);
        long long v20 = &v5[128 * v16];
        if ((unint64_t)(&v14[128 * v16] - v19) > 0x1F)
        {
          v20 += v15;
          long long v22 = v17;
          long long v23 = v18;
          uint64_t v24 = v9 & 0xFFFFFFFF0;
          do
          {
            uint64_t v25 = *v23++;
            *v22++ = v25;
            v24 -= 8;
          }
          while (v24);
          if (v9 == v15) {
            goto LABEL_17;
          }
          v19 += v15;
          int v21 = v9 & 0xFFFFFFF0;
        }
        else
        {
          int v21 = 0;
        }
        unsigned int v26 = v21 + 1;
        do
        {
          char v27 = *v19++;
          *v20++ = v27;
          BOOL v28 = v8 > v26++;
        }
        while (v28);
LABEL_17:
        ++v16;
        uint64_t v18 = (uint64_t *)((char *)v18 + v7);
        v17 += 128;
        if (v16 == v2) {
          return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v49, 128, *(void *)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
        }
      }
    }
    uint64_t v29 = 0;
    uint64_t v30 = v9 & 0xFFFFFFFE0;
    unsigned int v31 = &v49[v3 + v4];
    unsigned int v32 = &v49[v3 + 16 + v4];
    BOOL v33 = (long long *)(v6 + 16);
    long long v34 = (uint64_t *)(v6 + (v9 & 0xFFFFFFFE0));
    for (uint64_t i = &v31[v9 & 0xFFFFFFFE0]; ; i += 16)
    {
      uint64_t v36 = (char *)(v6 + v7 * v29);
      uint64_t v37 = &v5[128 * v29];
      if ((unint64_t)(&v14[128 * v29] - v36) >= 0x20)
      {
        char v39 = v33;
        BOOL v40 = v32;
        uint64_t v41 = v9 & 0xFFFFFFFE0;
        do
        {
          long long v42 = *v39;
          *(v40 - 1) = *(v39 - 1);
          *BOOL v40 = v42;
          v40 += 2;
          v39 += 2;
          v41 -= 32;
        }
        while (v41);
        if (v9 == v30) {
          goto LABEL_28;
        }
        if ((v9 & 0x10) != 0)
        {
          v37 += v15;
          long long v43 = i;
          uint64_t v44 = v34;
          unint64_t v45 = v15 - (v9 & 0xFFFFFFFE0);
          do
          {
            uint64_t v46 = *v44++;
            *v43++ = v46;
            v45 -= 8;
          }
          while (v45);
          if (v9 == v15) {
            goto LABEL_28;
          }
          v36 += v15;
          int v38 = v9 & 0xFFFFFFF0;
        }
        else
        {
          v36 += v30;
          v37 += v30;
          int v38 = v9 & 0xFFFFFFE0;
        }
      }
      else
      {
        int v38 = 0;
      }
      unsigned int v47 = v38 + 1;
      do
      {
        char v48 = *v36++;
        *v37++ = v48;
        BOOL v28 = v8 > v47++;
      }
      while (v28);
LABEL_28:
      ++v29;
      v32 += 128;
      BOOL v33 = (long long *)((char *)v33 + v7);
      long long v34 = (uint64_t *)((char *)v34 + v7);
      if (v29 == v2) {
        return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v49, 128, *(void *)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
      }
    }
  }
  for (uint64_t j = 0; j != v2; ++j)
  {
    uint64_t v12 = 0;
    do
    {
      v5[v12] = *(unsigned char *)(v6 + v12);
      ++v12;
    }
    while (v8 > v12);
    v5 += 128;
    v6 += v7;
  }
  return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v49, 128, *(void *)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE0ELj4ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  v98[31] = *MEMORY[0x263EF8340];
  uint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressMacroblock(&v97, *(void *)(a1 + 40), *(unsigned __int8 **)(a1 + 48));
  uint64_t v3 = *(unsigned int *)(a1 + 80);
  if (!v3 || !*(_DWORD *)(a1 + 84)) {
    goto LABEL_20;
  }
  unint64_t v4 = 32 * *(unsigned int *)(a1 + 72);
  uint64_t v5 = 4 * *(unsigned int *)(a1 + 76);
  uint64_t v6 = &v97.i8[v4 + v5];
  uint64_t v7 = *(void *)(a1 + 56);
  uint64_t v8 = *(void *)(a1 + 64);
  unint64_t v9 = 4 * *(unsigned int *)(a1 + 84);
  if (v9 <= 1) {
    unint64_t v10 = 1;
  }
  else {
    unint64_t v10 = 4 * *(unsigned int *)(a1 + 84);
  }
  if (v10 <= 7)
  {
    for (uint64_t i = 0; i != v3; ++i)
    {
      uint64_t v12 = 0;
      do
      {
        v6[v12] = *(unsigned char *)(v7 + v12);
        ++v12;
      }
      while (v9 > v12);
      v6 += 32;
      v7 += v8;
    }
    goto LABEL_20;
  }
  if (v10) {
    BOOL v13 = (v10 - 1) >> 32 == 0;
  }
  else {
    BOOL v13 = 0;
  }
  if (v13)
  {
    long long v63 = &v97.i8[v4 + v5];
    uint64_t v64 = v10 & 0x3FFFFFFF8;
    if (v10 < 0x20)
    {
      uint64_t v65 = 0;
      uint64_t v66 = &v97.i8[v4 + v5];
      uint64_t result = *(void *)(a1 + 56);
      while (1)
      {
        unsigned int v67 = (char *)(v7 + v8 * v65);
        char v68 = &v6[32 * v65];
        if ((unint64_t)(&v63[32 * v65] - v67) > 0x1F)
        {
          v68 += v64;
          uint64_t v70 = v66;
          int v71 = (uint64_t *)result;
          uint64_t v72 = v10 & 0x3FFFFFFF8;
          do
          {
            uint64_t v73 = *v71++;
            *(void *)uint64_t v70 = v73;
            v70 += 8;
            v72 -= 8;
          }
          while (v72);
          if (v10 == v64) {
            goto LABEL_78;
          }
          v67 += v64;
          int v69 = v10 & 0xFFFFFFF8;
        }
        else
        {
          int v69 = 0;
        }
        unsigned int v74 = v69 + 1;
        do
        {
          char v75 = *v67++;
          *v68++ = v75;
          BOOL v76 = v9 > v74++;
        }
        while (v76);
LABEL_78:
        ++v65;
        result += v8;
        v66 += 32;
        if (v65 == v3) {
          goto LABEL_20;
        }
      }
    }
    uint64_t v77 = 0;
    uint64_t v78 = v10 & 0x3FFFFFFE0;
    uint64_t result = v10 & 0x18;
    uint64_t v79 = &v97.i8[v4 + v5];
    uint64_t v80 = (char *)&v98[v4 / 8] + v5;
    char v81 = (long long *)(v7 + 16);
    int v82 = (uint64_t *)(v7 + (v10 & 0x3FFFFFFE0));
    int v83 = &v79[v10 & 0x3FFFFFFE0];
    while (1)
    {
      BOOL v84 = (char *)(v7 + v8 * v77);
      uint64_t v85 = &v6[32 * v77];
      if ((unint64_t)(&v63[32 * v77] - v84) >= 0x20)
      {
        unsigned int v89 = v81;
        char v90 = v80;
        uint64_t v91 = v10 & 0x3FFFFFFE0;
        do
        {
          long long v92 = *v89;
          *(v90 - 1) = *(v89 - 1);
          *char v90 = v92;
          v90 += 2;
          v89 += 2;
          v91 -= 32;
        }
        while (v91);
        if (v10 == v78) {
          goto LABEL_89;
        }
        if ((v10 & 0x18) != 0)
        {
          v85 += v64;
          uint64_t v93 = v83;
          long long v94 = v82;
          unint64_t v95 = v64 - (v10 & 0x3FFFFFFE0);
          do
          {
            uint64_t v96 = *v94++;
            *(void *)uint64_t v93 = v96;
            v93 += 8;
            v95 -= 8;
          }
          while (v95);
          if (v10 == v64) {
            goto LABEL_89;
          }
          v84 += v64;
          int v86 = v10 & 0xFFFFFFF8;
        }
        else
        {
          v84 += v78;
          v85 += v78;
          int v86 = v10 & 0xFFFFFFE0;
        }
      }
      else
      {
        int v86 = 0;
      }
      unsigned int v87 = v86 + 1;
      do
      {
        char v88 = *v84++;
        *v85++ = v88;
        BOOL v76 = v9 > v87++;
      }
      while (v76);
LABEL_89:
      ++v77;
      v80 += 32;
      char v81 = (long long *)((char *)v81 + v8);
      int v82 = (uint64_t *)((char *)v82 + v8);
      v83 += 32;
      if (v77 == v3) {
        goto LABEL_20;
      }
    }
  }
  for (uint64_t j = 0; j != v3; ++j)
  {
    uint64_t v15 = 0;
    do
    {
      v6[v15] = *(unsigned char *)(v7 + v15);
      ++v15;
    }
    while (v9 > v15);
    v6 += 32;
    v7 += v8;
  }
LABEL_20:
  int v17 = *(void **)(a1 + 40);
  uint64_t v16 = *(char **)(a1 + 48);
  int v18 = *(unsigned __int8 *)(a1 + 88);
  int v19 = *(unsigned __int8 *)(a1 + 89);
  if (v18 >= 4) {
    int v20 = 4;
  }
  else {
    int v20 = *(unsigned __int8 *)(a1 + 88);
  }
  if (v19 >= 2) {
    int v21 = 2;
  }
  else {
    int v21 = *(unsigned __int8 *)(a1 + 89);
  }
  if (v20) {
    BOOL v22 = v21 == 0;
  }
  else {
    BOOL v22 = 1;
  }
  if (v22)
  {
    char v26 = 0;
  }
  else
  {
    uint64_t v23 = v97.i64[1];
    uint64_t v24 = v98[2];
    uint64_t v25 = v98[3];
    *int v17 = v97.i64[0];
    v17[1] = v24;
    v17[2] = v23;
    v17[3] = v25;
    v17 += 4;
    char v26 = 31;
  }
  char v27 = 0;
  *uint64_t v16 = v26;
  if (v19 <= 2) {
    int v28 = 2;
  }
  else {
    int v28 = v19;
  }
  unsigned int v29 = v28 - 2;
  if (v29 >= 2) {
    int v30 = 2;
  }
  else {
    int v30 = v29;
  }
  if (v20 && v30)
  {
    uint64_t v31 = v98[7];
    uint64_t v32 = v98[10];
    uint64_t v33 = v98[11];
    *int v17 = v98[6];
    v17[1] = v32;
    v17[2] = v31;
    v17[3] = v33;
    v17 += 4;
    char v27 = 31;
  }
  v16[1] = v27;
  if (v18 <= 4) {
    int v18 = 4;
  }
  unsigned int v34 = v18 - 4;
  if (v34 >= 4) {
    unsigned int v34 = 4;
  }
  if (v34) {
    BOOL v35 = v21 == 0;
  }
  else {
    BOOL v35 = 1;
  }
  if (v35)
  {
    char v39 = 0;
  }
  else
  {
    uint64_t v36 = v98[1];
    uint64_t v37 = v98[4];
    uint64_t v38 = v98[5];
    *int v17 = v98[0];
    v17[1] = v37;
    v17[2] = v36;
    v17[3] = v38;
    v17 += 4;
    char v39 = 31;
  }
  char v40 = 0;
  v16[2] = v39;
  if (v34 && v30)
  {
    uint64_t v41 = v98[9];
    uint64_t v42 = v98[12];
    uint64_t v43 = v98[13];
    *int v17 = v98[8];
    v17[1] = v42;
    v17[2] = v41;
    v17[3] = v43;
    v17 += 4;
    char v40 = 31;
  }
  char v44 = 0;
  v16[3] = v40;
  if (v19 <= 4) {
    int v45 = 4;
  }
  else {
    int v45 = v19;
  }
  unsigned int v46 = v45 - 4;
  if (v46 >= 2) {
    unsigned int v46 = 2;
  }
  if (v20 && v46)
  {
    uint64_t v47 = v98[15];
    uint64_t v48 = v98[18];
    uint64_t v49 = v98[19];
    *int v17 = v98[14];
    v17[1] = v48;
    v17[2] = v47;
    v17[3] = v49;
    v17 += 4;
    char v44 = 31;
  }
  char v50 = 0;
  v16[4] = v44;
  if (v19 <= 6) {
    int v19 = 6;
  }
  unsigned int v51 = v19 - 6;
  if (v51 >= 2) {
    unsigned int v51 = 2;
  }
  if (v20 && v51)
  {
    uint64_t v52 = v98[23];
    uint64_t v53 = v98[26];
    uint64_t v54 = v98[27];
    *int v17 = v98[22];
    v17[1] = v53;
    v17[2] = v52;
    v17[3] = v54;
    v17 += 4;
    char v50 = 31;
  }
  char v55 = 0;
  v16[5] = v50;
  if (v34 && v46)
  {
    uint64_t v56 = v98[17];
    uint64_t v57 = v98[20];
    uint64_t v58 = v98[21];
    *int v17 = v98[16];
    v17[1] = v57;
    v17[2] = v56;
    v17[3] = v58;
    v17 += 4;
    char v55 = 31;
  }
  char v59 = 0;
  v16[6] = v55;
  if (v34 && v51)
  {
    uint64_t v60 = v98[25];
    uint64_t v61 = v98[28];
    uint64_t v62 = v98[29];
    *int v17 = v98[24];
    v17[1] = v61;
    v17[2] = v60;
    v17[3] = v62;
    char v59 = 31;
  }
  v16[7] = v59;
  return result;
}

unint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE0ELj4ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v55 = *MEMORY[0x263EF8340];
  AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressMacroblock(v54, *(void *)(a1 + 40), *(unsigned __int8 **)(a1 + 48));
  uint64_t v6 = *(unsigned int *)(a1 + 80);
  if (!v6 || !*(_DWORD *)(a1 + 84)) {
    return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v54, 32, *(int8x8_t **)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), *(double *)&v2, *(double *)&v3, v4, v5);
  }
  uint64_t v7 = 2 * *(unsigned int *)(a1 + 72);
  uint64_t v8 = 4 * *(unsigned int *)(a1 + 76);
  unint64_t v9 = &v54[v7].i8[v8];
  uint64_t v10 = *(void *)(a1 + 56);
  uint64_t v11 = *(void *)(a1 + 64);
  unint64_t v12 = 4 * *(unsigned int *)(a1 + 84);
  if (v12 <= 1) {
    unint64_t v13 = 1;
  }
  else {
    unint64_t v13 = 4 * *(unsigned int *)(a1 + 84);
  }
  if (v13 <= 7)
  {
    for (uint64_t i = 0; i != v6; ++i)
    {
      uint64_t v15 = 0;
      do
      {
        v9[v15] = *(unsigned char *)(v10 + v15);
        ++v15;
      }
      while (v12 > v15);
      v9 += 32;
      v10 += v11;
    }
    return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v54, 32, *(int8x8_t **)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), *(double *)&v2, *(double *)&v3, v4, v5);
  }
  if (v13) {
    BOOL v16 = (v13 - 1) >> 32 == 0;
  }
  else {
    BOOL v16 = 0;
  }
  if (v16)
  {
    int v20 = &v54[v7].i8[v8];
    uint64_t v21 = v13 & 0x3FFFFFFF8;
    if (v13 < 0x20)
    {
      uint64_t v22 = 0;
      uint64_t v23 = &v54[v7].i8[v8];
      uint64_t v24 = *(uint64_t **)(a1 + 56);
      while (1)
      {
        uint64_t v25 = (char *)(v10 + v11 * v22);
        char v26 = &v9[32 * v22];
        if ((unint64_t)(&v20[32 * v22] - v25) > 0x1F)
        {
          v26 += v21;
          int v28 = v23;
          unsigned int v29 = v24;
          uint64_t v30 = v13 & 0x3FFFFFFF8;
          do
          {
            uint64_t v31 = *v29++;
            *(void *)&long long v2 = v31;
            *(void *)int v28 = v31;
            v28 += 8;
            v30 -= 8;
          }
          while (v30);
          if (v13 == v21) {
            goto LABEL_23;
          }
          v25 += v21;
          int v27 = v13 & 0xFFFFFFF8;
        }
        else
        {
          int v27 = 0;
        }
        unsigned int v32 = v27 + 1;
        do
        {
          char v33 = *v25++;
          *v26++ = v33;
          BOOL v34 = v12 > v32++;
        }
        while (v34);
LABEL_23:
        ++v22;
        uint64_t v24 = (uint64_t *)((char *)v24 + v11);
        v23 += 32;
        if (v22 == v6) {
          return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v54, 32, *(int8x8_t **)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), *(double *)&v2, *(double *)&v3, v4, v5);
        }
      }
    }
    uint64_t v35 = 0;
    uint64_t v36 = v13 & 0x3FFFFFFE0;
    uint64_t v37 = &v54[v7].i8[v8];
    uint64_t v38 = &v54[v7 + 1].i8[v8];
    char v39 = (long long *)(v10 + 16);
    char v40 = (uint64_t *)(v10 + (v13 & 0x3FFFFFFE0));
    for (uint64_t j = &v37[v13 & 0x3FFFFFFE0]; ; j += 32)
    {
      uint64_t v42 = (char *)(v10 + v11 * v35);
      uint64_t v43 = &v9[32 * v35];
      if ((unint64_t)(&v20[32 * v35] - v42) >= 0x20)
      {
        uint64_t v47 = v39;
        uint64_t v48 = v38;
        uint64_t v49 = v13 & 0x3FFFFFFE0;
        do
        {
          long long v2 = *(v47 - 1);
          long long v3 = *v47;
          *((_OWORD *)v48 - 1) = v2;
          *(_OWORD *)uint64_t v48 = v3;
          v48 += 32;
          v47 += 2;
          v49 -= 32;
        }
        while (v49);
        if (v13 == v36) {
          goto LABEL_34;
        }
        if ((v13 & 0x18) != 0)
        {
          v43 += v21;
          char v50 = j;
          unsigned int v51 = v40;
          unint64_t v52 = v21 - (v13 & 0x3FFFFFFE0);
          do
          {
            uint64_t v53 = *v51++;
            *(void *)&long long v2 = v53;
            *(void *)char v50 = v53;
            v50 += 8;
            v52 -= 8;
          }
          while (v52);
          if (v13 == v21) {
            goto LABEL_34;
          }
          v42 += v21;
          int v44 = v13 & 0xFFFFFFF8;
        }
        else
        {
          v42 += v36;
          v43 += v36;
          int v44 = v13 & 0xFFFFFFE0;
        }
      }
      else
      {
        int v44 = 0;
      }
      unsigned int v45 = v44 + 1;
      do
      {
        char v46 = *v42++;
        *v43++ = v46;
        BOOL v34 = v12 > v45++;
      }
      while (v34);
LABEL_34:
      ++v35;
      v38 += 32;
      char v39 = (long long *)((char *)v39 + v11);
      char v40 = (uint64_t *)((char *)v40 + v11);
      if (v35 == v6) {
        return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v54, 32, *(int8x8_t **)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), *(double *)&v2, *(double *)&v3, v4, v5);
      }
    }
  }
  for (uint64_t k = 0; k != v6; ++k)
  {
    uint64_t v18 = 0;
    do
    {
      v9[v18] = *(unsigned char *)(v10 + v18);
      ++v18;
    }
    while (v12 > v18);
    v9 += 32;
    v10 += v11;
  }
  return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v54, 32, *(int8x8_t **)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), *(double *)&v2, *(double *)&v3, v4, v5);
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE0ELj4ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  v98[31] = *MEMORY[0x263EF8340];
  uint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressMacroblock(&v97, *(void *)(a1 + 40), *(unsigned __int8 **)(a1 + 48));
  uint64_t v3 = *(unsigned int *)(a1 + 80);
  if (!v3 || !*(_DWORD *)(a1 + 84)) {
    goto LABEL_20;
  }
  unint64_t v4 = 32 * *(unsigned int *)(a1 + 72);
  uint64_t v5 = 4 * *(unsigned int *)(a1 + 76);
  uint64_t v6 = &v97.i8[v4 + v5];
  uint64_t v7 = *(void *)(a1 + 56);
  uint64_t v8 = *(void *)(a1 + 64);
  unint64_t v9 = 4 * *(unsigned int *)(a1 + 84);
  if (v9 <= 1) {
    unint64_t v10 = 1;
  }
  else {
    unint64_t v10 = 4 * *(unsigned int *)(a1 + 84);
  }
  if (v10 <= 7)
  {
    for (uint64_t i = 0; i != v3; ++i)
    {
      uint64_t v12 = 0;
      do
      {
        v6[v12] = *(unsigned char *)(v7 + v12);
        ++v12;
      }
      while (v9 > v12);
      v6 += 32;
      v7 += v8;
    }
    goto LABEL_20;
  }
  if (v10) {
    BOOL v13 = (v10 - 1) >> 32 == 0;
  }
  else {
    BOOL v13 = 0;
  }
  if (v13)
  {
    long long v63 = &v97.i8[v4 + v5];
    uint64_t v64 = v10 & 0x3FFFFFFF8;
    if (v10 < 0x20)
    {
      uint64_t v65 = 0;
      uint64_t v66 = &v97.i8[v4 + v5];
      uint64_t result = *(void *)(a1 + 56);
      while (1)
      {
        unsigned int v67 = (char *)(v7 + v8 * v65);
        char v68 = &v6[32 * v65];
        if ((unint64_t)(&v63[32 * v65] - v67) > 0x1F)
        {
          v68 += v64;
          uint64_t v70 = v66;
          int v71 = (uint64_t *)result;
          uint64_t v72 = v10 & 0x3FFFFFFF8;
          do
          {
            uint64_t v73 = *v71++;
            *(void *)uint64_t v70 = v73;
            v70 += 8;
            v72 -= 8;
          }
          while (v72);
          if (v10 == v64) {
            goto LABEL_78;
          }
          v67 += v64;
          int v69 = v10 & 0xFFFFFFF8;
        }
        else
        {
          int v69 = 0;
        }
        unsigned int v74 = v69 + 1;
        do
        {
          char v75 = *v67++;
          *v68++ = v75;
          BOOL v76 = v9 > v74++;
        }
        while (v76);
LABEL_78:
        ++v65;
        result += v8;
        v66 += 32;
        if (v65 == v3) {
          goto LABEL_20;
        }
      }
    }
    uint64_t v77 = 0;
    uint64_t v78 = v10 & 0x3FFFFFFE0;
    uint64_t result = v10 & 0x18;
    uint64_t v79 = &v97.i8[v4 + v5];
    uint64_t v80 = (char *)&v98[v4 / 8] + v5;
    char v81 = (long long *)(v7 + 16);
    int v82 = (uint64_t *)(v7 + (v10 & 0x3FFFFFFE0));
    int v83 = &v79[v10 & 0x3FFFFFFE0];
    while (1)
    {
      BOOL v84 = (char *)(v7 + v8 * v77);
      uint64_t v85 = &v6[32 * v77];
      if ((unint64_t)(&v63[32 * v77] - v84) >= 0x20)
      {
        unsigned int v89 = v81;
        char v90 = v80;
        uint64_t v91 = v10 & 0x3FFFFFFE0;
        do
        {
          long long v92 = *v89;
          *(v90 - 1) = *(v89 - 1);
          *char v90 = v92;
          v90 += 2;
          v89 += 2;
          v91 -= 32;
        }
        while (v91);
        if (v10 == v78) {
          goto LABEL_89;
        }
        if ((v10 & 0x18) != 0)
        {
          v85 += v64;
          uint64_t v93 = v83;
          long long v94 = v82;
          unint64_t v95 = v64 - (v10 & 0x3FFFFFFE0);
          do
          {
            uint64_t v96 = *v94++;
            *(void *)uint64_t v93 = v96;
            v93 += 8;
            v95 -= 8;
          }
          while (v95);
          if (v10 == v64) {
            goto LABEL_89;
          }
          v84 += v64;
          int v86 = v10 & 0xFFFFFFF8;
        }
        else
        {
          v84 += v78;
          v85 += v78;
          int v86 = v10 & 0xFFFFFFE0;
        }
      }
      else
      {
        int v86 = 0;
      }
      unsigned int v87 = v86 + 1;
      do
      {
        char v88 = *v84++;
        *v85++ = v88;
        BOOL v76 = v9 > v87++;
      }
      while (v76);
LABEL_89:
      ++v77;
      v80 += 32;
      char v81 = (long long *)((char *)v81 + v8);
      int v82 = (uint64_t *)((char *)v82 + v8);
      v83 += 32;
      if (v77 == v3) {
        goto LABEL_20;
      }
    }
  }
  for (uint64_t j = 0; j != v3; ++j)
  {
    uint64_t v15 = 0;
    do
    {
      v6[v15] = *(unsigned char *)(v7 + v15);
      ++v15;
    }
    while (v9 > v15);
    v6 += 32;
    v7 += v8;
  }
LABEL_20:
  int v17 = *(void **)(a1 + 40);
  BOOL v16 = *(char **)(a1 + 48);
  int v18 = *(unsigned __int8 *)(a1 + 88);
  int v19 = *(unsigned __int8 *)(a1 + 89);
  if (v18 >= 4) {
    int v20 = 4;
  }
  else {
    int v20 = *(unsigned __int8 *)(a1 + 88);
  }
  if (v19 >= 2) {
    int v21 = 2;
  }
  else {
    int v21 = *(unsigned __int8 *)(a1 + 89);
  }
  if (v20) {
    BOOL v22 = v21 == 0;
  }
  else {
    BOOL v22 = 1;
  }
  if (v22)
  {
    char v26 = 0;
  }
  else
  {
    uint64_t v23 = v97.i64[1];
    uint64_t v24 = v98[2];
    uint64_t v25 = v98[3];
    *int v17 = v97.i64[0];
    v17[1] = v24;
    v17[2] = v23;
    v17[3] = v25;
    v17 += 4;
    char v26 = 31;
  }
  char v27 = 0;
  *BOOL v16 = v26;
  if (v19 <= 2) {
    int v28 = 2;
  }
  else {
    int v28 = v19;
  }
  unsigned int v29 = v28 - 2;
  if (v29 >= 2) {
    int v30 = 2;
  }
  else {
    int v30 = v29;
  }
  if (v20 && v30)
  {
    uint64_t v31 = v98[7];
    uint64_t v32 = v98[10];
    uint64_t v33 = v98[11];
    *int v17 = v98[6];
    v17[1] = v32;
    v17[2] = v31;
    v17[3] = v33;
    v17 += 4;
    char v27 = 31;
  }
  v16[1] = v27;
  if (v18 <= 4) {
    int v18 = 4;
  }
  unsigned int v34 = v18 - 4;
  if (v34 >= 4) {
    unsigned int v34 = 4;
  }
  if (v34) {
    BOOL v35 = v21 == 0;
  }
  else {
    BOOL v35 = 1;
  }
  if (v35)
  {
    char v39 = 0;
  }
  else
  {
    uint64_t v36 = v98[1];
    uint64_t v37 = v98[4];
    uint64_t v38 = v98[5];
    *int v17 = v98[0];
    v17[1] = v37;
    v17[2] = v36;
    v17[3] = v38;
    v17 += 4;
    char v39 = 31;
  }
  char v40 = 0;
  v16[2] = v39;
  if (v34 && v30)
  {
    uint64_t v41 = v98[9];
    uint64_t v42 = v98[12];
    uint64_t v43 = v98[13];
    *int v17 = v98[8];
    v17[1] = v42;
    v17[2] = v41;
    v17[3] = v43;
    v17 += 4;
    char v40 = 31;
  }
  char v44 = 0;
  v16[3] = v40;
  if (v19 <= 4) {
    int v45 = 4;
  }
  else {
    int v45 = v19;
  }
  unsigned int v46 = v45 - 4;
  if (v46 >= 2) {
    unsigned int v46 = 2;
  }
  if (v20 && v46)
  {
    uint64_t v47 = v98[15];
    uint64_t v48 = v98[18];
    uint64_t v49 = v98[19];
    *int v17 = v98[14];
    v17[1] = v48;
    v17[2] = v47;
    v17[3] = v49;
    v17 += 4;
    char v44 = 31;
  }
  char v50 = 0;
  v16[4] = v44;
  if (v19 <= 6) {
    int v19 = 6;
  }
  unsigned int v51 = v19 - 6;
  if (v51 >= 2) {
    unsigned int v51 = 2;
  }
  if (v20 && v51)
  {
    uint64_t v52 = v98[23];
    uint64_t v53 = v98[26];
    uint64_t v54 = v98[27];
    *int v17 = v98[22];
    v17[1] = v53;
    v17[2] = v52;
    v17[3] = v54;
    v17 += 4;
    char v50 = 31;
  }
  char v55 = 0;
  v16[5] = v50;
  if (v34 && v46)
  {
    uint64_t v56 = v98[17];
    uint64_t v57 = v98[20];
    uint64_t v58 = v98[21];
    *int v17 = v98[16];
    v17[1] = v57;
    v17[2] = v56;
    v17[3] = v58;
    v17 += 4;
    char v55 = 31;
  }
  char v59 = 0;
  v16[6] = v55;
  if (v34 && v51)
  {
    uint64_t v60 = v98[25];
    uint64_t v61 = v98[28];
    uint64_t v62 = v98[29];
    *int v17 = v98[24];
    v17[1] = v61;
    v17[2] = v60;
    v17[3] = v62;
    char v59 = 31;
  }
  v16[7] = v59;
  return result;
}

unint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE0ELj4ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v55 = *MEMORY[0x263EF8340];
  AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressMacroblock(v54, *(void *)(a1 + 40), *(unsigned __int8 **)(a1 + 48));
  uint64_t v6 = *(unsigned int *)(a1 + 80);
  if (!v6 || !*(_DWORD *)(a1 + 84)) {
    return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v54, 32, *(int8x8_t **)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), *(double *)&v2, *(double *)&v3, v4, v5);
  }
  uint64_t v7 = 2 * *(unsigned int *)(a1 + 72);
  uint64_t v8 = 4 * *(unsigned int *)(a1 + 76);
  unint64_t v9 = &v54[v7].i8[v8];
  uint64_t v10 = *(void *)(a1 + 56);
  uint64_t v11 = *(void *)(a1 + 64);
  unint64_t v12 = 4 * *(unsigned int *)(a1 + 84);
  if (v12 <= 1) {
    unint64_t v13 = 1;
  }
  else {
    unint64_t v13 = 4 * *(unsigned int *)(a1 + 84);
  }
  if (v13 <= 7)
  {
    for (uint64_t i = 0; i != v6; ++i)
    {
      uint64_t v15 = 0;
      do
      {
        v9[v15] = *(unsigned char *)(v10 + v15);
        ++v15;
      }
      while (v12 > v15);
      v9 += 32;
      v10 += v11;
    }
    return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v54, 32, *(int8x8_t **)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), *(double *)&v2, *(double *)&v3, v4, v5);
  }
  if (v13) {
    BOOL v16 = (v13 - 1) >> 32 == 0;
  }
  else {
    BOOL v16 = 0;
  }
  if (v16)
  {
    int v20 = &v54[v7].i8[v8];
    uint64_t v21 = v13 & 0x3FFFFFFF8;
    if (v13 < 0x20)
    {
      uint64_t v22 = 0;
      uint64_t v23 = &v54[v7].i8[v8];
      uint64_t v24 = *(uint64_t **)(a1 + 56);
      while (1)
      {
        uint64_t v25 = (char *)(v10 + v11 * v22);
        char v26 = &v9[32 * v22];
        if ((unint64_t)(&v20[32 * v22] - v25) > 0x1F)
        {
          v26 += v21;
          int v28 = v23;
          unsigned int v29 = v24;
          uint64_t v30 = v13 & 0x3FFFFFFF8;
          do
          {
            uint64_t v31 = *v29++;
            *(void *)&long long v2 = v31;
            *(void *)int v28 = v31;
            v28 += 8;
            v30 -= 8;
          }
          while (v30);
          if (v13 == v21) {
            goto LABEL_23;
          }
          v25 += v21;
          int v27 = v13 & 0xFFFFFFF8;
        }
        else
        {
          int v27 = 0;
        }
        unsigned int v32 = v27 + 1;
        do
        {
          char v33 = *v25++;
          *v26++ = v33;
          BOOL v34 = v12 > v32++;
        }
        while (v34);
LABEL_23:
        ++v22;
        uint64_t v24 = (uint64_t *)((char *)v24 + v11);
        v23 += 32;
        if (v22 == v6) {
          return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v54, 32, *(int8x8_t **)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), *(double *)&v2, *(double *)&v3, v4, v5);
        }
      }
    }
    uint64_t v35 = 0;
    uint64_t v36 = v13 & 0x3FFFFFFE0;
    uint64_t v37 = &v54[v7].i8[v8];
    uint64_t v38 = &v54[v7 + 1].i8[v8];
    char v39 = (long long *)(v10 + 16);
    char v40 = (uint64_t *)(v10 + (v13 & 0x3FFFFFFE0));
    for (uint64_t j = &v37[v13 & 0x3FFFFFFE0]; ; j += 32)
    {
      uint64_t v42 = (char *)(v10 + v11 * v35);
      uint64_t v43 = &v9[32 * v35];
      if ((unint64_t)(&v20[32 * v35] - v42) >= 0x20)
      {
        uint64_t v47 = v39;
        uint64_t v48 = v38;
        uint64_t v49 = v13 & 0x3FFFFFFE0;
        do
        {
          long long v2 = *(v47 - 1);
          long long v3 = *v47;
          *((_OWORD *)v48 - 1) = v2;
          *(_OWORD *)uint64_t v48 = v3;
          v48 += 32;
          v47 += 2;
          v49 -= 32;
        }
        while (v49);
        if (v13 == v36) {
          goto LABEL_34;
        }
        if ((v13 & 0x18) != 0)
        {
          v43 += v21;
          char v50 = j;
          unsigned int v51 = v40;
          unint64_t v52 = v21 - (v13 & 0x3FFFFFFE0);
          do
          {
            uint64_t v53 = *v51++;
            *(void *)&long long v2 = v53;
            *(void *)char v50 = v53;
            v50 += 8;
            v52 -= 8;
          }
          while (v52);
          if (v13 == v21) {
            goto LABEL_34;
          }
          v42 += v21;
          int v44 = v13 & 0xFFFFFFF8;
        }
        else
        {
          v42 += v36;
          v43 += v36;
          int v44 = v13 & 0xFFFFFFE0;
        }
      }
      else
      {
        int v44 = 0;
      }
      unsigned int v45 = v44 + 1;
      do
      {
        char v46 = *v42++;
        *v43++ = v46;
        BOOL v34 = v12 > v45++;
      }
      while (v34);
LABEL_34:
      ++v35;
      v38 += 32;
      char v39 = (long long *)((char *)v39 + v11);
      char v40 = (uint64_t *)((char *)v40 + v11);
      if (v35 == v6) {
        return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v54, 32, *(int8x8_t **)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), *(double *)&v2, *(double *)&v3, v4, v5);
      }
    }
  }
  for (uint64_t k = 0; k != v6; ++k)
  {
    uint64_t v18 = 0;
    do
    {
      v9[v18] = *(unsigned char *)(v10 + v18);
      ++v18;
    }
    while (v12 > v18);
    v9 += 32;
    v10 += v11;
  }
  return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v54, 32, *(int8x8_t **)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), *(double *)&v2, *(double *)&v3, v4, v5);
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE20ELj2ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v1 = MEMORY[0x270FA5388](a1);
  uint64_t v30 = *MEMORY[0x263EF8340];
  AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressMacroblock((uint64_t)v29, *(void *)(v1 + 40), *(unsigned __int8 **)(v1 + 48));
  uint64_t v2 = *(unsigned int *)(v1 + 80);
  if (!v2 || !*(_DWORD *)(v1 + 84)) {
    return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((uint64_t)v29, 512, *(_OWORD **)(v1 + 40), *(char **)(v1 + 48), *(unsigned __int8 *)(v1 + 88), *(unsigned __int8 *)(v1 + 89));
  }
  unint64_t v3 = (unint64_t)*(unsigned int *)(v1 + 72) << 9;
  uint64_t v4 = 32 * *(unsigned int *)(v1 + 76);
  int8x8_t v5 = &v29[v3 + v4];
  uint64_t v6 = *(void *)(v1 + 56);
  uint64_t v7 = *(void *)(v1 + 64);
  unint64_t v8 = 32 * *(unsigned int *)(v1 + 84);
  if (v8 <= 1) {
    uint64_t v9 = 1;
  }
  else {
    uint64_t v9 = 32 * *(unsigned int *)(v1 + 84);
  }
  if (v9) {
    BOOL v10 = (unint64_t)(v9 - 1) >> 32 == 0;
  }
  else {
    BOOL v10 = 0;
  }
  if (v10)
  {
    uint64_t v14 = 0;
    uint64_t v15 = &v29[v3 + v4];
    uint64_t v16 = v9 & 0x1FFFFFFFE0;
    int v17 = &v29[v3 + 16 + v4];
    uint64_t v18 = (long long *)(v6 + 16);
    while (1)
    {
      int v19 = (char *)(v6 + v7 * v14);
      int v20 = &v5[512 * v14];
      if ((unint64_t)(&v15[512 * v14] - v19) >= 0x20)
      {
        uint64_t v22 = v18;
        uint64_t v23 = v17;
        uint64_t v24 = v9 & 0x1FFFFFFFE0;
        do
        {
          long long v25 = *v22;
          *(v23 - 1) = *(v22 - 1);
          *uint64_t v23 = v25;
          v23 += 2;
          v22 += 2;
          v24 -= 32;
        }
        while (v24);
        if (v9 == v16) {
          goto LABEL_16;
        }
        v19 += v16;
        v20 += v16;
        int v21 = v9 & 0xFFFFFFE0;
      }
      else
      {
        int v21 = 0;
      }
      unsigned int v26 = v21 + 1;
      do
      {
        char v27 = *v19++;
        *v20++ = v27;
      }
      while (v8 > v26++);
LABEL_16:
      ++v14;
      v17 += 512;
      uint64_t v18 = (long long *)((char *)v18 + v7);
      if (v14 == v2) {
        return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((uint64_t)v29, 512, *(_OWORD **)(v1 + 40), *(char **)(v1 + 48), *(unsigned __int8 *)(v1 + 88), *(unsigned __int8 *)(v1 + 89));
      }
    }
  }
  for (uint64_t i = 0; i != v2; ++i)
  {
    uint64_t v12 = 0;
    do
    {
      v5[v12] = *(unsigned char *)(v6 + v12);
      ++v12;
    }
    while (v8 > v12);
    v5 += 512;
    v6 += v7;
  }
  return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((uint64_t)v29, 512, *(_OWORD **)(v1 + 40), *(char **)(v1 + 48), *(unsigned __int8 *)(v1 + 88), *(unsigned __int8 *)(v1 + 89));
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE20ELj2ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v1 = MEMORY[0x270FA5388](a1);
  uint64_t v30 = *MEMORY[0x263EF8340];
  AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressMacroblock((uint64_t)v29, *(void *)(v1 + 40), *(unsigned __int8 **)(v1 + 48));
  uint64_t v2 = *(unsigned int *)(v1 + 80);
  if (!v2 || !*(_DWORD *)(v1 + 84)) {
    return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((uint64_t)v29, 512, *(void *)(v1 + 40), *(unsigned char **)(v1 + 48), *(unsigned __int8 *)(v1 + 88), *(unsigned __int8 *)(v1 + 89));
  }
  unint64_t v3 = (unint64_t)*(unsigned int *)(v1 + 72) << 9;
  uint64_t v4 = 32 * *(unsigned int *)(v1 + 76);
  int8x8_t v5 = &v29[v3 + v4];
  uint64_t v6 = *(void *)(v1 + 56);
  uint64_t v7 = *(void *)(v1 + 64);
  unint64_t v8 = 32 * *(unsigned int *)(v1 + 84);
  if (v8 <= 1) {
    uint64_t v9 = 1;
  }
  else {
    uint64_t v9 = 32 * *(unsigned int *)(v1 + 84);
  }
  if (v9) {
    BOOL v10 = (unint64_t)(v9 - 1) >> 32 == 0;
  }
  else {
    BOOL v10 = 0;
  }
  if (v10)
  {
    uint64_t v14 = 0;
    uint64_t v15 = &v29[v3 + v4];
    uint64_t v16 = v9 & 0x1FFFFFFFE0;
    int v17 = &v29[v3 + 16 + v4];
    uint64_t v18 = (long long *)(v6 + 16);
    while (1)
    {
      int v19 = (char *)(v6 + v7 * v14);
      int v20 = &v5[512 * v14];
      if ((unint64_t)(&v15[512 * v14] - v19) >= 0x20)
      {
        uint64_t v22 = v18;
        uint64_t v23 = v17;
        uint64_t v24 = v9 & 0x1FFFFFFFE0;
        do
        {
          long long v25 = *v22;
          *(v23 - 1) = *(v22 - 1);
          *uint64_t v23 = v25;
          v23 += 2;
          v22 += 2;
          v24 -= 32;
        }
        while (v24);
        if (v9 == v16) {
          goto LABEL_16;
        }
        v19 += v16;
        v20 += v16;
        int v21 = v9 & 0xFFFFFFE0;
      }
      else
      {
        int v21 = 0;
      }
      unsigned int v26 = v21 + 1;
      do
      {
        char v27 = *v19++;
        *v20++ = v27;
      }
      while (v8 > v26++);
LABEL_16:
      ++v14;
      v17 += 512;
      uint64_t v18 = (long long *)((char *)v18 + v7);
      if (v14 == v2) {
        return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((uint64_t)v29, 512, *(void *)(v1 + 40), *(unsigned char **)(v1 + 48), *(unsigned __int8 *)(v1 + 88), *(unsigned __int8 *)(v1 + 89));
      }
    }
  }
  for (uint64_t i = 0; i != v2; ++i)
  {
    uint64_t v12 = 0;
    do
    {
      v5[v12] = *(unsigned char *)(v6 + v12);
      ++v12;
    }
    while (v8 > v12);
    v5 += 512;
    v6 += v7;
  }
  return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((uint64_t)v29, 512, *(void *)(v1 + 40), *(unsigned char **)(v1 + 48), *(unsigned __int8 *)(v1 + 88), *(unsigned __int8 *)(v1 + 89));
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE20ELj2ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v1 = MEMORY[0x270FA5388](a1);
  uint64_t v30 = *MEMORY[0x263EF8340];
  AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressMacroblock((uint64_t)v29, *(void *)(v1 + 40), *(unsigned __int8 **)(v1 + 48));
  uint64_t v2 = *(unsigned int *)(v1 + 80);
  if (!v2 || !*(_DWORD *)(v1 + 84)) {
    return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((uint64_t)v29, 512, *(_OWORD **)(v1 + 40), *(char **)(v1 + 48), *(unsigned __int8 *)(v1 + 88), *(unsigned __int8 *)(v1 + 89));
  }
  unint64_t v3 = (unint64_t)*(unsigned int *)(v1 + 72) << 9;
  uint64_t v4 = 32 * *(unsigned int *)(v1 + 76);
  int8x8_t v5 = &v29[v3 + v4];
  uint64_t v6 = *(void *)(v1 + 56);
  uint64_t v7 = *(void *)(v1 + 64);
  unint64_t v8 = 32 * *(unsigned int *)(v1 + 84);
  if (v8 <= 1) {
    uint64_t v9 = 1;
  }
  else {
    uint64_t v9 = 32 * *(unsigned int *)(v1 + 84);
  }
  if (v9) {
    BOOL v10 = (unint64_t)(v9 - 1) >> 32 == 0;
  }
  else {
    BOOL v10 = 0;
  }
  if (v10)
  {
    uint64_t v14 = 0;
    uint64_t v15 = &v29[v3 + v4];
    uint64_t v16 = v9 & 0x1FFFFFFFE0;
    int v17 = &v29[v3 + 16 + v4];
    uint64_t v18 = (long long *)(v6 + 16);
    while (1)
    {
      int v19 = (char *)(v6 + v7 * v14);
      int v20 = &v5[512 * v14];
      if ((unint64_t)(&v15[512 * v14] - v19) >= 0x20)
      {
        uint64_t v22 = v18;
        uint64_t v23 = v17;
        uint64_t v24 = v9 & 0x1FFFFFFFE0;
        do
        {
          long long v25 = *v22;
          *(v23 - 1) = *(v22 - 1);
          *uint64_t v23 = v25;
          v23 += 2;
          v22 += 2;
          v24 -= 32;
        }
        while (v24);
        if (v9 == v16) {
          goto LABEL_16;
        }
        v19 += v16;
        v20 += v16;
        int v21 = v9 & 0xFFFFFFE0;
      }
      else
      {
        int v21 = 0;
      }
      unsigned int v26 = v21 + 1;
      do
      {
        char v27 = *v19++;
        *v20++ = v27;
      }
      while (v8 > v26++);
LABEL_16:
      ++v14;
      v17 += 512;
      uint64_t v18 = (long long *)((char *)v18 + v7);
      if (v14 == v2) {
        return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((uint64_t)v29, 512, *(_OWORD **)(v1 + 40), *(char **)(v1 + 48), *(unsigned __int8 *)(v1 + 88), *(unsigned __int8 *)(v1 + 89));
      }
    }
  }
  for (uint64_t i = 0; i != v2; ++i)
  {
    uint64_t v12 = 0;
    do
    {
      v5[v12] = *(unsigned char *)(v6 + v12);
      ++v12;
    }
    while (v8 > v12);
    v5 += 512;
    v6 += v7;
  }
  return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((uint64_t)v29, 512, *(_OWORD **)(v1 + 40), *(char **)(v1 + 48), *(unsigned __int8 *)(v1 + 88), *(unsigned __int8 *)(v1 + 89));
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE20ELj2ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v1 = MEMORY[0x270FA5388](a1);
  uint64_t v30 = *MEMORY[0x263EF8340];
  AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressMacroblock((uint64_t)v29, *(void *)(v1 + 40), *(unsigned __int8 **)(v1 + 48));
  uint64_t v2 = *(unsigned int *)(v1 + 80);
  if (!v2 || !*(_DWORD *)(v1 + 84)) {
    return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((uint64_t)v29, 512, *(void *)(v1 + 40), *(unsigned char **)(v1 + 48), *(unsigned __int8 *)(v1 + 88), *(unsigned __int8 *)(v1 + 89));
  }
  unint64_t v3 = (unint64_t)*(unsigned int *)(v1 + 72) << 9;
  uint64_t v4 = 32 * *(unsigned int *)(v1 + 76);
  int8x8_t v5 = &v29[v3 + v4];
  uint64_t v6 = *(void *)(v1 + 56);
  uint64_t v7 = *(void *)(v1 + 64);
  unint64_t v8 = 32 * *(unsigned int *)(v1 + 84);
  if (v8 <= 1) {
    uint64_t v9 = 1;
  }
  else {
    uint64_t v9 = 32 * *(unsigned int *)(v1 + 84);
  }
  if (v9) {
    BOOL v10 = (unint64_t)(v9 - 1) >> 32 == 0;
  }
  else {
    BOOL v10 = 0;
  }
  if (v10)
  {
    uint64_t v14 = 0;
    uint64_t v15 = &v29[v3 + v4];
    uint64_t v16 = v9 & 0x1FFFFFFFE0;
    int v17 = &v29[v3 + 16 + v4];
    uint64_t v18 = (long long *)(v6 + 16);
    while (1)
    {
      int v19 = (char *)(v6 + v7 * v14);
      int v20 = &v5[512 * v14];
      if ((unint64_t)(&v15[512 * v14] - v19) >= 0x20)
      {
        uint64_t v22 = v18;
        uint64_t v23 = v17;
        uint64_t v24 = v9 & 0x1FFFFFFFE0;
        do
        {
          long long v25 = *v22;
          *(v23 - 1) = *(v22 - 1);
          *uint64_t v23 = v25;
          v23 += 2;
          v22 += 2;
          v24 -= 32;
        }
        while (v24);
        if (v9 == v16) {
          goto LABEL_16;
        }
        v19 += v16;
        v20 += v16;
        int v21 = v9 & 0xFFFFFFE0;
      }
      else
      {
        int v21 = 0;
      }
      unsigned int v26 = v21 + 1;
      do
      {
        char v27 = *v19++;
        *v20++ = v27;
      }
      while (v8 > v26++);
LABEL_16:
      ++v14;
      v17 += 512;
      uint64_t v18 = (long long *)((char *)v18 + v7);
      if (v14 == v2) {
        return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((uint64_t)v29, 512, *(void *)(v1 + 40), *(unsigned char **)(v1 + 48), *(unsigned __int8 *)(v1 + 88), *(unsigned __int8 *)(v1 + 89));
      }
    }
  }
  for (uint64_t i = 0; i != v2; ++i)
  {
    uint64_t v12 = 0;
    do
    {
      v5[v12] = *(unsigned char *)(v6 + v12);
      ++v12;
    }
    while (v8 > v12);
    v5 += 512;
    v6 += v7;
  }
  return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((uint64_t)v29, 512, *(void *)(v1 + 40), *(unsigned char **)(v1 + 48), *(unsigned __int8 *)(v1 + 88), *(unsigned __int8 *)(v1 + 89));
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE14ELj2ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v2 = 0;
  uint64_t v82 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(a1 + 40);
  uint64_t v4 = *(unsigned char **)(a1 + 48);
  do
  {
    uint64_t v7 = &v81[512
            * (unint64_t)AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,2u>::kSubblockPositions[v2 + 1]
            + 32
            * AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,2u>::kSubblockPositions[v2]];
    unsigned int v8 = *v4;
    if (v8 == 127)
    {
      long long v9 = *(_OWORD *)(v3 + 16);
      long long v10 = *(_OWORD *)(v3 + 32);
      long long v11 = *(_OWORD *)(v3 + 48);
      long long v12 = *(_OWORD *)(v3 + 80);
      long long v13 = *(_OWORD *)(v3 + 96);
      long long v14 = *(_OWORD *)(v3 + 112);
      long long v15 = *(_OWORD *)(v3 + 64);
      *(_OWORD *)uint64_t v7 = *(_OWORD *)v3;
      *((_OWORD *)v7 + 1) = v10;
      *((_OWORD *)v7 + 8) = v9;
      *((_OWORD *)v7 + 9) = v11;
      *((_OWORD *)v7 + 16) = v15;
      *((_OWORD *)v7 + 17) = v13;
      *((_OWORD *)v7 + 24) = v12;
      *((_OWORD *)v7 + 25) = v14;
      uint64_t v6 = 128;
    }
    else if (v8 == 3)
    {
      float32x4_t v5 = vld1q_dup_f32((const float *)v3);
      *(float32x4_t *)uint64_t v7 = v5;
      *((float32x4_t *)v7 + 1) = v5;
      *((float32x4_t *)v7 + 8) = v5;
      *((float32x4_t *)v7 + 9) = v5;
      *((float32x4_t *)v7 + 16) = v5;
      *((float32x4_t *)v7 + 17) = v5;
      *((float32x4_t *)v7 + 24) = v5;
      *((float32x4_t *)v7 + 25) = v5;
      uint64_t v6 = 4;
    }
    else if (*v4)
    {
      uint64_t v6 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((int8x16_t *)v7, 128, v3, v8);
    }
    else
    {
      uint64_t v6 = 0;
      *(_OWORD *)uint64_t v7 = 0u;
      *((_OWORD *)v7 + 1) = 0u;
      *((_OWORD *)v7 + 8) = 0u;
      *((_OWORD *)v7 + 9) = 0u;
      *((_OWORD *)v7 + 16) = 0u;
      *((_OWORD *)v7 + 17) = 0u;
      *((_OWORD *)v7 + 24) = 0u;
      *((_OWORD *)v7 + 25) = 0u;
    }
    v3 += v6;
    ++v4;
    v2 += 2;
  }
  while (v2 != 16);
  uint64_t v16 = *(unsigned int *)(a1 + 80);
  if (v16 && *(_DWORD *)(a1 + 84))
  {
    unint64_t v17 = (unint64_t)*(unsigned int *)(a1 + 72) << 7;
    uint64_t v18 = 8 * *(unsigned int *)(a1 + 76);
    int v19 = &v81[v17 + v18];
    uint64_t v20 = *(void *)(a1 + 56);
    uint64_t v21 = *(void *)(a1 + 64);
    unint64_t v22 = 8 * *(unsigned int *)(a1 + 84);
    if (v22 <= 1) {
      unint64_t v23 = 1;
    }
    else {
      unint64_t v23 = 8 * *(unsigned int *)(a1 + 84);
    }
    if (v23 && !((v23 - 1) >> 32))
    {
      uint64_t v24 = &v81[v17 + v18];
      uint64_t v25 = v23 & 0x7FFFFFFF8;
      if (v23 < 0x20)
      {
        uint64_t v26 = 0;
        char v27 = &v81[v17 + v18];
        int v28 = *(uint64_t **)(a1 + 56);
        while (1)
        {
          unsigned int v29 = (char *)(v20 + v21 * v26);
          uint64_t v30 = &v19[128 * v26];
          if ((unint64_t)(&v24[128 * v26] - v29) > 0x1F)
          {
            v30 += v25;
            unsigned int v32 = v27;
            char v33 = v28;
            uint64_t v34 = v23 & 0x7FFFFFFF8;
            do
            {
              uint64_t v35 = *v33++;
              *v32++ = v35;
              v34 -= 8;
            }
            while (v34);
            if (v23 == v25) {
              goto LABEL_19;
            }
            v29 += v25;
            int v31 = v23 & 0xFFFFFFF8;
          }
          else
          {
            int v31 = 0;
          }
          unsigned int v36 = v31 + 1;
          do
          {
            char v37 = *v29++;
            *v30++ = v37;
            BOOL v38 = v22 > v36++;
          }
          while (v38);
LABEL_19:
          ++v26;
          int v28 = (uint64_t *)((char *)v28 + v21);
          v27 += 128;
          if (v26 == v16) {
            goto LABEL_33;
          }
        }
      }
      uint64_t v61 = 0;
      uint64_t v62 = v23 & 0x7FFFFFFE0;
      long long v63 = &v81[v17 + v18];
      uint64_t v64 = &v81[v17 + 16 + v18];
      uint64_t v65 = (long long *)(v20 + 16);
      uint64_t v66 = (uint64_t *)(v20 + (v23 & 0x7FFFFFFE0));
      unsigned int v67 = &v63[v23 & 0x7FFFFFFE0];
      while (1)
      {
        char v68 = (char *)(v20 + v21 * v61);
        int v69 = &v19[128 * v61];
        if ((unint64_t)(&v24[128 * v61] - v68) >= 0x20)
        {
          uint64_t v73 = v65;
          unsigned int v74 = v64;
          uint64_t v75 = v23 & 0x7FFFFFFE0;
          do
          {
            long long v76 = *v73;
            *(v74 - 1) = *(v73 - 1);
            *unsigned int v74 = v76;
            v74 += 2;
            v73 += 2;
            v75 -= 32;
          }
          while (v75);
          if (v23 == v62) {
            goto LABEL_48;
          }
          if ((v23 & 0x18) != 0)
          {
            v69 += v25;
            uint64_t v77 = v67;
            uint64_t v78 = v66;
            unint64_t v79 = v25 - (v23 & 0x7FFFFFFE0);
            do
            {
              uint64_t v80 = *v78++;
              *v77++ = v80;
              v79 -= 8;
            }
            while (v79);
            if (v23 == v25) {
              goto LABEL_48;
            }
            v68 += v25;
            int v70 = v23 & 0xFFFFFFF8;
          }
          else
          {
            v68 += v62;
            v69 += v62;
            int v70 = v23 & 0xFFFFFFE0;
          }
        }
        else
        {
          int v70 = 0;
        }
        unsigned int v71 = v70 + 1;
        do
        {
          char v72 = *v68++;
          *v69++ = v72;
          BOOL v38 = v22 > v71++;
        }
        while (v38);
LABEL_48:
        ++v61;
        v64 += 128;
        uint64_t v65 = (long long *)((char *)v65 + v21);
        uint64_t v66 = (uint64_t *)((char *)v66 + v21);
        v67 += 16;
        if (v61 == v16) {
          goto LABEL_33;
        }
      }
    }
    for (uint64_t i = 0; i != v16; ++i)
    {
      uint64_t v40 = 0;
      do
      {
        v19[v40] = *(unsigned char *)(v20 + v40);
        ++v40;
      }
      while (v22 > v40);
      v19 += 128;
      v20 += v21;
    }
  }
LABEL_33:
  uint64_t v41 = 0;
  uint64_t v42 = *(_OWORD **)(a1 + 40);
  uint64_t v43 = *(char **)(a1 + 48);
  int v44 = *(unsigned __int8 *)(a1 + 88);
  int v45 = *(unsigned __int8 *)(a1 + 89);
  do
  {
    uint64_t v56 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,2u>::kSubblockPositions[v41 + 1];
    uint64_t v57 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,2u>::kSubblockPositions[v41];
    unsigned int v58 = (v44 - 4 * v57) & ~((v44 - 4 * (int)v57) >> 31);
    if (v58 >= 4) {
      unsigned int v58 = 4;
    }
    LODWORD(result) = (v45 - 4 * v56) & ~((v45 - 4 * (int)v56) >> 31);
    if (result >= 4) {
      uint64_t result = 4;
    }
    else {
      uint64_t result = result;
    }
    if (v58) {
      BOOL v60 = result == 0;
    }
    else {
      BOOL v60 = 1;
    }
    if (v60)
    {
      char v55 = 0;
    }
    else
    {
      char v46 = (long long *)&v81[512 * v56 + 32 * v57];
      long long v47 = *v46;
      long long v48 = v46[1];
      long long v49 = v46[8];
      long long v50 = v46[9];
      long long v51 = v46[16];
      long long v52 = v46[17];
      v46 += 24;
      long long v53 = *v46;
      long long v54 = v46[1];
      *uint64_t v42 = v47;
      v42[1] = v49;
      v42[2] = v48;
      v42[3] = v50;
      v42[4] = v51;
      v42[5] = v53;
      v42[6] = v52;
      v42[7] = v54;
      v42 += 8;
      char v55 = 127;
    }
    *v43++ = v55;
    v41 += 2;
  }
  while (v41 != 16);
  return result;
}

unint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE14ELj2ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v2 = 0;
  uint64_t v63 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(a1 + 40);
  uint64_t v4 = *(unsigned char **)(a1 + 48);
  do
  {
    uint64_t v7 = &v62[512
            * (unint64_t)AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,2u>::kSubblockPositions[v2 + 1]
            + 32
            * AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,2u>::kSubblockPositions[v2]];
    unsigned int v8 = *v4;
    if (v8 == 127)
    {
      long long v9 = *(_OWORD *)(v3 + 16);
      long long v10 = *(_OWORD *)(v3 + 32);
      long long v11 = *(_OWORD *)(v3 + 48);
      long long v12 = *(_OWORD *)(v3 + 80);
      long long v13 = *(_OWORD *)(v3 + 96);
      long long v14 = *(_OWORD *)(v3 + 112);
      long long v15 = *(_OWORD *)(v3 + 64);
      *(_OWORD *)uint64_t v7 = *(_OWORD *)v3;
      *((_OWORD *)v7 + 1) = v10;
      *((_OWORD *)v7 + 8) = v9;
      *((_OWORD *)v7 + 9) = v11;
      *((_OWORD *)v7 + 16) = v15;
      *((_OWORD *)v7 + 17) = v13;
      *((_OWORD *)v7 + 24) = v12;
      *((_OWORD *)v7 + 25) = v14;
      uint64_t v6 = 128;
    }
    else if (v8 == 3)
    {
      float32x4_t v5 = vld1q_dup_f32((const float *)v3);
      *(float32x4_t *)uint64_t v7 = v5;
      *((float32x4_t *)v7 + 1) = v5;
      *((float32x4_t *)v7 + 8) = v5;
      *((float32x4_t *)v7 + 9) = v5;
      *((float32x4_t *)v7 + 16) = v5;
      *((float32x4_t *)v7 + 17) = v5;
      *((float32x4_t *)v7 + 24) = v5;
      *((float32x4_t *)v7 + 25) = v5;
      uint64_t v6 = 4;
    }
    else if (*v4)
    {
      uint64_t v6 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((int8x16_t *)v7, 128, v3, v8);
    }
    else
    {
      uint64_t v6 = 0;
      *(_OWORD *)uint64_t v7 = 0u;
      *((_OWORD *)v7 + 1) = 0u;
      *((_OWORD *)v7 + 8) = 0u;
      *((_OWORD *)v7 + 9) = 0u;
      *((_OWORD *)v7 + 16) = 0u;
      *((_OWORD *)v7 + 17) = 0u;
      *((_OWORD *)v7 + 24) = 0u;
      *((_OWORD *)v7 + 25) = 0u;
    }
    v3 += v6;
    ++v4;
    v2 += 2;
  }
  while (v2 != 16);
  uint64_t v16 = *(unsigned int *)(a1 + 80);
  if (v16 && *(_DWORD *)(a1 + 84))
  {
    unint64_t v17 = (unint64_t)*(unsigned int *)(a1 + 72) << 7;
    uint64_t v18 = 8 * *(unsigned int *)(a1 + 76);
    int v19 = &v62[v17 + v18];
    uint64_t v20 = *(void *)(a1 + 56);
    uint64_t v21 = *(void *)(a1 + 64);
    unint64_t v22 = 8 * *(unsigned int *)(a1 + 84);
    if (v22 <= 1) {
      unint64_t v23 = 1;
    }
    else {
      unint64_t v23 = 8 * *(unsigned int *)(a1 + 84);
    }
    if (v23 && !((v23 - 1) >> 32))
    {
      uint64_t v24 = &v62[v17 + v18];
      uint64_t v25 = v23 & 0x7FFFFFFF8;
      if (v23 < 0x20)
      {
        uint64_t v26 = 0;
        char v27 = &v62[v17 + v18];
        int v28 = *(uint64_t **)(a1 + 56);
        while (1)
        {
          unsigned int v29 = (char *)(v20 + v21 * v26);
          uint64_t v30 = &v19[128 * v26];
          if ((unint64_t)(&v24[128 * v26] - v29) > 0x1F)
          {
            v30 += v25;
            unsigned int v32 = v27;
            char v33 = v28;
            uint64_t v34 = v23 & 0x7FFFFFFF8;
            do
            {
              uint64_t v35 = *v33++;
              *v32++ = v35;
              v34 -= 8;
            }
            while (v34);
            if (v23 == v25) {
              goto LABEL_19;
            }
            v29 += v25;
            int v31 = v23 & 0xFFFFFFF8;
          }
          else
          {
            int v31 = 0;
          }
          unsigned int v36 = v31 + 1;
          do
          {
            char v37 = *v29++;
            *v30++ = v37;
            BOOL v38 = v22 > v36++;
          }
          while (v38);
LABEL_19:
          ++v26;
          int v28 = (uint64_t *)((char *)v28 + v21);
          v27 += 128;
          if (v26 == v16) {
            return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v62, 128, *(void *)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
          }
        }
      }
      uint64_t v42 = 0;
      uint64_t v43 = v23 & 0x7FFFFFFE0;
      int v44 = &v62[v17 + v18];
      int v45 = &v62[v17 + 16 + v18];
      char v46 = (long long *)(v20 + 16);
      long long v47 = (uint64_t *)(v20 + (v23 & 0x7FFFFFFE0));
      for (uint64_t i = &v44[v23 & 0x7FFFFFFE0]; ; i += 16)
      {
        long long v49 = (char *)(v20 + v21 * v42);
        long long v50 = &v19[128 * v42];
        if ((unint64_t)(&v24[128 * v42] - v49) >= 0x20)
        {
          long long v54 = v46;
          char v55 = v45;
          uint64_t v56 = v23 & 0x7FFFFFFE0;
          do
          {
            long long v57 = *v54;
            *(v55 - 1) = *(v54 - 1);
            *char v55 = v57;
            v55 += 2;
            v54 += 2;
            v56 -= 32;
          }
          while (v56);
          if (v23 == v43) {
            goto LABEL_35;
          }
          if ((v23 & 0x18) != 0)
          {
            v50 += v25;
            unsigned int v58 = i;
            char v59 = v47;
            unint64_t v60 = v25 - (v23 & 0x7FFFFFFE0);
            do
            {
              uint64_t v61 = *v59++;
              *v58++ = v61;
              v60 -= 8;
            }
            while (v60);
            if (v23 == v25) {
              goto LABEL_35;
            }
            v49 += v25;
            int v51 = v23 & 0xFFFFFFF8;
          }
          else
          {
            v49 += v43;
            v50 += v43;
            int v51 = v23 & 0xFFFFFFE0;
          }
        }
        else
        {
          int v51 = 0;
        }
        unsigned int v52 = v51 + 1;
        do
        {
          char v53 = *v49++;
          *v50++ = v53;
          BOOL v38 = v22 > v52++;
        }
        while (v38);
LABEL_35:
        ++v42;
        v45 += 128;
        char v46 = (long long *)((char *)v46 + v21);
        long long v47 = (uint64_t *)((char *)v47 + v21);
        if (v42 == v16) {
          return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v62, 128, *(void *)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
        }
      }
    }
    for (uint64_t j = 0; j != v16; ++j)
    {
      uint64_t v40 = 0;
      do
      {
        v19[v40] = *(unsigned char *)(v20 + v40);
        ++v40;
      }
      while (v22 > v40);
      v19 += 128;
      v20 += v21;
    }
  }
  return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v62, 128, *(void *)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE14ELj2ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v2 = 0;
  uint64_t v82 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(a1 + 40);
  uint64_t v4 = *(unsigned char **)(a1 + 48);
  do
  {
    uint64_t v7 = &v81[512
            * (unint64_t)AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,2u>::kSubblockPositions[v2 + 1]
            + 32
            * AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,2u>::kSubblockPositions[v2]];
    unsigned int v8 = *v4;
    if (v8 == 127)
    {
      long long v9 = *(_OWORD *)(v3 + 16);
      long long v10 = *(_OWORD *)(v3 + 32);
      long long v11 = *(_OWORD *)(v3 + 48);
      long long v12 = *(_OWORD *)(v3 + 80);
      long long v13 = *(_OWORD *)(v3 + 96);
      long long v14 = *(_OWORD *)(v3 + 112);
      long long v15 = *(_OWORD *)(v3 + 64);
      *(_OWORD *)uint64_t v7 = *(_OWORD *)v3;
      *((_OWORD *)v7 + 1) = v10;
      *((_OWORD *)v7 + 8) = v9;
      *((_OWORD *)v7 + 9) = v11;
      *((_OWORD *)v7 + 16) = v15;
      *((_OWORD *)v7 + 17) = v13;
      *((_OWORD *)v7 + 24) = v12;
      *((_OWORD *)v7 + 25) = v14;
      uint64_t v6 = 128;
    }
    else if (v8 == 3)
    {
      float32x4_t v5 = vld1q_dup_f32((const float *)v3);
      *(float32x4_t *)uint64_t v7 = v5;
      *((float32x4_t *)v7 + 1) = v5;
      *((float32x4_t *)v7 + 8) = v5;
      *((float32x4_t *)v7 + 9) = v5;
      *((float32x4_t *)v7 + 16) = v5;
      *((float32x4_t *)v7 + 17) = v5;
      *((float32x4_t *)v7 + 24) = v5;
      *((float32x4_t *)v7 + 25) = v5;
      uint64_t v6 = 4;
    }
    else if (*v4)
    {
      uint64_t v6 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((int8x16_t *)v7, 128, v3, v8);
    }
    else
    {
      uint64_t v6 = 0;
      *(_OWORD *)uint64_t v7 = 0u;
      *((_OWORD *)v7 + 1) = 0u;
      *((_OWORD *)v7 + 8) = 0u;
      *((_OWORD *)v7 + 9) = 0u;
      *((_OWORD *)v7 + 16) = 0u;
      *((_OWORD *)v7 + 17) = 0u;
      *((_OWORD *)v7 + 24) = 0u;
      *((_OWORD *)v7 + 25) = 0u;
    }
    v3 += v6;
    ++v4;
    v2 += 2;
  }
  while (v2 != 16);
  uint64_t v16 = *(unsigned int *)(a1 + 80);
  if (v16 && *(_DWORD *)(a1 + 84))
  {
    unint64_t v17 = (unint64_t)*(unsigned int *)(a1 + 72) << 7;
    uint64_t v18 = 8 * *(unsigned int *)(a1 + 76);
    int v19 = &v81[v17 + v18];
    uint64_t v20 = *(void *)(a1 + 56);
    uint64_t v21 = *(void *)(a1 + 64);
    unint64_t v22 = 8 * *(unsigned int *)(a1 + 84);
    if (v22 <= 1) {
      unint64_t v23 = 1;
    }
    else {
      unint64_t v23 = 8 * *(unsigned int *)(a1 + 84);
    }
    if (v23 && !((v23 - 1) >> 32))
    {
      uint64_t v24 = &v81[v17 + v18];
      uint64_t v25 = v23 & 0x7FFFFFFF8;
      if (v23 < 0x20)
      {
        uint64_t v26 = 0;
        char v27 = &v81[v17 + v18];
        int v28 = *(uint64_t **)(a1 + 56);
        while (1)
        {
          unsigned int v29 = (char *)(v20 + v21 * v26);
          uint64_t v30 = &v19[128 * v26];
          if ((unint64_t)(&v24[128 * v26] - v29) > 0x1F)
          {
            v30 += v25;
            unsigned int v32 = v27;
            char v33 = v28;
            uint64_t v34 = v23 & 0x7FFFFFFF8;
            do
            {
              uint64_t v35 = *v33++;
              *v32++ = v35;
              v34 -= 8;
            }
            while (v34);
            if (v23 == v25) {
              goto LABEL_19;
            }
            v29 += v25;
            int v31 = v23 & 0xFFFFFFF8;
          }
          else
          {
            int v31 = 0;
          }
          unsigned int v36 = v31 + 1;
          do
          {
            char v37 = *v29++;
            *v30++ = v37;
            BOOL v38 = v22 > v36++;
          }
          while (v38);
LABEL_19:
          ++v26;
          int v28 = (uint64_t *)((char *)v28 + v21);
          v27 += 128;
          if (v26 == v16) {
            goto LABEL_33;
          }
        }
      }
      uint64_t v61 = 0;
      uint64_t v62 = v23 & 0x7FFFFFFE0;
      uint64_t v63 = &v81[v17 + v18];
      uint64_t v64 = &v81[v17 + 16 + v18];
      uint64_t v65 = (long long *)(v20 + 16);
      uint64_t v66 = (uint64_t *)(v20 + (v23 & 0x7FFFFFFE0));
      unsigned int v67 = &v63[v23 & 0x7FFFFFFE0];
      while (1)
      {
        char v68 = (char *)(v20 + v21 * v61);
        int v69 = &v19[128 * v61];
        if ((unint64_t)(&v24[128 * v61] - v68) >= 0x20)
        {
          uint64_t v73 = v65;
          unsigned int v74 = v64;
          uint64_t v75 = v23 & 0x7FFFFFFE0;
          do
          {
            long long v76 = *v73;
            *(v74 - 1) = *(v73 - 1);
            *unsigned int v74 = v76;
            v74 += 2;
            v73 += 2;
            v75 -= 32;
          }
          while (v75);
          if (v23 == v62) {
            goto LABEL_48;
          }
          if ((v23 & 0x18) != 0)
          {
            v69 += v25;
            uint64_t v77 = v67;
            uint64_t v78 = v66;
            unint64_t v79 = v25 - (v23 & 0x7FFFFFFE0);
            do
            {
              uint64_t v80 = *v78++;
              *v77++ = v80;
              v79 -= 8;
            }
            while (v79);
            if (v23 == v25) {
              goto LABEL_48;
            }
            v68 += v25;
            int v70 = v23 & 0xFFFFFFF8;
          }
          else
          {
            v68 += v62;
            v69 += v62;
            int v70 = v23 & 0xFFFFFFE0;
          }
        }
        else
        {
          int v70 = 0;
        }
        unsigned int v71 = v70 + 1;
        do
        {
          char v72 = *v68++;
          *v69++ = v72;
          BOOL v38 = v22 > v71++;
        }
        while (v38);
LABEL_48:
        ++v61;
        v64 += 128;
        uint64_t v65 = (long long *)((char *)v65 + v21);
        uint64_t v66 = (uint64_t *)((char *)v66 + v21);
        v67 += 16;
        if (v61 == v16) {
          goto LABEL_33;
        }
      }
    }
    for (uint64_t i = 0; i != v16; ++i)
    {
      uint64_t v40 = 0;
      do
      {
        v19[v40] = *(unsigned char *)(v20 + v40);
        ++v40;
      }
      while (v22 > v40);
      v19 += 128;
      v20 += v21;
    }
  }
LABEL_33:
  uint64_t v41 = 0;
  uint64_t v42 = *(_OWORD **)(a1 + 40);
  uint64_t v43 = *(char **)(a1 + 48);
  int v44 = *(unsigned __int8 *)(a1 + 88);
  int v45 = *(unsigned __int8 *)(a1 + 89);
  do
  {
    uint64_t v56 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,2u>::kSubblockPositions[v41 + 1];
    uint64_t v57 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,2u>::kSubblockPositions[v41];
    unsigned int v58 = (v44 - 4 * v57) & ~((v44 - 4 * (int)v57) >> 31);
    if (v58 >= 4) {
      unsigned int v58 = 4;
    }
    LODWORD(result) = (v45 - 4 * v56) & ~((v45 - 4 * (int)v56) >> 31);
    if (result >= 4) {
      uint64_t result = 4;
    }
    else {
      uint64_t result = result;
    }
    if (v58) {
      BOOL v60 = result == 0;
    }
    else {
      BOOL v60 = 1;
    }
    if (v60)
    {
      char v55 = 0;
    }
    else
    {
      char v46 = (long long *)&v81[512 * v56 + 32 * v57];
      long long v47 = *v46;
      long long v48 = v46[1];
      long long v49 = v46[8];
      long long v50 = v46[9];
      long long v51 = v46[16];
      long long v52 = v46[17];
      v46 += 24;
      long long v53 = *v46;
      long long v54 = v46[1];
      *uint64_t v42 = v47;
      v42[1] = v49;
      v42[2] = v48;
      v42[3] = v50;
      v42[4] = v51;
      v42[5] = v53;
      v42[6] = v52;
      v42[7] = v54;
      v42 += 8;
      char v55 = 127;
    }
    *v43++ = v55;
    v41 += 2;
  }
  while (v41 != 16);
  return result;
}

unint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE14ELj2ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v2 = 0;
  uint64_t v63 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(a1 + 40);
  uint64_t v4 = *(unsigned char **)(a1 + 48);
  do
  {
    uint64_t v7 = &v62[512
            * (unint64_t)AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,2u>::kSubblockPositions[v2 + 1]
            + 32
            * AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,2u>::kSubblockPositions[v2]];
    unsigned int v8 = *v4;
    if (v8 == 127)
    {
      long long v9 = *(_OWORD *)(v3 + 16);
      long long v10 = *(_OWORD *)(v3 + 32);
      long long v11 = *(_OWORD *)(v3 + 48);
      long long v12 = *(_OWORD *)(v3 + 80);
      long long v13 = *(_OWORD *)(v3 + 96);
      long long v14 = *(_OWORD *)(v3 + 112);
      long long v15 = *(_OWORD *)(v3 + 64);
      *(_OWORD *)uint64_t v7 = *(_OWORD *)v3;
      *((_OWORD *)v7 + 1) = v10;
      *((_OWORD *)v7 + 8) = v9;
      *((_OWORD *)v7 + 9) = v11;
      *((_OWORD *)v7 + 16) = v15;
      *((_OWORD *)v7 + 17) = v13;
      *((_OWORD *)v7 + 24) = v12;
      *((_OWORD *)v7 + 25) = v14;
      uint64_t v6 = 128;
    }
    else if (v8 == 3)
    {
      float32x4_t v5 = vld1q_dup_f32((const float *)v3);
      *(float32x4_t *)uint64_t v7 = v5;
      *((float32x4_t *)v7 + 1) = v5;
      *((float32x4_t *)v7 + 8) = v5;
      *((float32x4_t *)v7 + 9) = v5;
      *((float32x4_t *)v7 + 16) = v5;
      *((float32x4_t *)v7 + 17) = v5;
      *((float32x4_t *)v7 + 24) = v5;
      *((float32x4_t *)v7 + 25) = v5;
      uint64_t v6 = 4;
    }
    else if (*v4)
    {
      uint64_t v6 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((int8x16_t *)v7, 128, v3, v8);
    }
    else
    {
      uint64_t v6 = 0;
      *(_OWORD *)uint64_t v7 = 0u;
      *((_OWORD *)v7 + 1) = 0u;
      *((_OWORD *)v7 + 8) = 0u;
      *((_OWORD *)v7 + 9) = 0u;
      *((_OWORD *)v7 + 16) = 0u;
      *((_OWORD *)v7 + 17) = 0u;
      *((_OWORD *)v7 + 24) = 0u;
      *((_OWORD *)v7 + 25) = 0u;
    }
    v3 += v6;
    ++v4;
    v2 += 2;
  }
  while (v2 != 16);
  uint64_t v16 = *(unsigned int *)(a1 + 80);
  if (v16 && *(_DWORD *)(a1 + 84))
  {
    unint64_t v17 = (unint64_t)*(unsigned int *)(a1 + 72) << 7;
    uint64_t v18 = 8 * *(unsigned int *)(a1 + 76);
    int v19 = &v62[v17 + v18];
    uint64_t v20 = *(void *)(a1 + 56);
    uint64_t v21 = *(void *)(a1 + 64);
    unint64_t v22 = 8 * *(unsigned int *)(a1 + 84);
    if (v22 <= 1) {
      unint64_t v23 = 1;
    }
    else {
      unint64_t v23 = 8 * *(unsigned int *)(a1 + 84);
    }
    if (v23 && !((v23 - 1) >> 32))
    {
      uint64_t v24 = &v62[v17 + v18];
      uint64_t v25 = v23 & 0x7FFFFFFF8;
      if (v23 < 0x20)
      {
        uint64_t v26 = 0;
        char v27 = &v62[v17 + v18];
        int v28 = *(uint64_t **)(a1 + 56);
        while (1)
        {
          unsigned int v29 = (char *)(v20 + v21 * v26);
          uint64_t v30 = &v19[128 * v26];
          if ((unint64_t)(&v24[128 * v26] - v29) > 0x1F)
          {
            v30 += v25;
            unsigned int v32 = v27;
            char v33 = v28;
            uint64_t v34 = v23 & 0x7FFFFFFF8;
            do
            {
              uint64_t v35 = *v33++;
              *v32++ = v35;
              v34 -= 8;
            }
            while (v34);
            if (v23 == v25) {
              goto LABEL_19;
            }
            v29 += v25;
            int v31 = v23 & 0xFFFFFFF8;
          }
          else
          {
            int v31 = 0;
          }
          unsigned int v36 = v31 + 1;
          do
          {
            char v37 = *v29++;
            *v30++ = v37;
            BOOL v38 = v22 > v36++;
          }
          while (v38);
LABEL_19:
          ++v26;
          int v28 = (uint64_t *)((char *)v28 + v21);
          v27 += 128;
          if (v26 == v16) {
            return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v62, 128, *(void *)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
          }
        }
      }
      uint64_t v42 = 0;
      uint64_t v43 = v23 & 0x7FFFFFFE0;
      int v44 = &v62[v17 + v18];
      int v45 = &v62[v17 + 16 + v18];
      char v46 = (long long *)(v20 + 16);
      long long v47 = (uint64_t *)(v20 + (v23 & 0x7FFFFFFE0));
      for (uint64_t i = &v44[v23 & 0x7FFFFFFE0]; ; i += 16)
      {
        long long v49 = (char *)(v20 + v21 * v42);
        long long v50 = &v19[128 * v42];
        if ((unint64_t)(&v24[128 * v42] - v49) >= 0x20)
        {
          long long v54 = v46;
          char v55 = v45;
          uint64_t v56 = v23 & 0x7FFFFFFE0;
          do
          {
            long long v57 = *v54;
            *(v55 - 1) = *(v54 - 1);
            *char v55 = v57;
            v55 += 2;
            v54 += 2;
            v56 -= 32;
          }
          while (v56);
          if (v23 == v43) {
            goto LABEL_35;
          }
          if ((v23 & 0x18) != 0)
          {
            v50 += v25;
            unsigned int v58 = i;
            char v59 = v47;
            unint64_t v60 = v25 - (v23 & 0x7FFFFFFE0);
            do
            {
              uint64_t v61 = *v59++;
              *v58++ = v61;
              v60 -= 8;
            }
            while (v60);
            if (v23 == v25) {
              goto LABEL_35;
            }
            v49 += v25;
            int v51 = v23 & 0xFFFFFFF8;
          }
          else
          {
            v49 += v43;
            v50 += v43;
            int v51 = v23 & 0xFFFFFFE0;
          }
        }
        else
        {
          int v51 = 0;
        }
        unsigned int v52 = v51 + 1;
        do
        {
          char v53 = *v49++;
          *v50++ = v53;
          BOOL v38 = v22 > v52++;
        }
        while (v38);
LABEL_35:
        ++v42;
        v45 += 128;
        char v46 = (long long *)((char *)v46 + v21);
        long long v47 = (uint64_t *)((char *)v47 + v21);
        if (v42 == v16) {
          return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v62, 128, *(void *)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
        }
      }
    }
    for (uint64_t j = 0; j != v16; ++j)
    {
      uint64_t v40 = 0;
      do
      {
        v19[v40] = *(unsigned char *)(v20 + v40);
        ++v40;
      }
      while (v22 > v40);
      v19 += 128;
      v20 += v21;
    }
  }
  return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v62, 128, *(void *)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE12ELj2ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v2 = 0;
  uint64_t v82 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(a1 + 40);
  uint64_t v4 = *(unsigned char **)(a1 + 48);
  do
  {
    uint64_t v7 = &v81[512
            * (unint64_t)AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,2u>::kSubblockPositions[v2 + 1]
            + 32
            * AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,2u>::kSubblockPositions[v2]];
    unsigned int v8 = *v4;
    if (v8 == 127)
    {
      long long v9 = *(_OWORD *)(v3 + 16);
      long long v10 = *(_OWORD *)(v3 + 32);
      long long v11 = *(_OWORD *)(v3 + 48);
      long long v12 = *(_OWORD *)(v3 + 80);
      long long v13 = *(_OWORD *)(v3 + 96);
      long long v14 = *(_OWORD *)(v3 + 112);
      long long v15 = *(_OWORD *)(v3 + 64);
      *(_OWORD *)uint64_t v7 = *(_OWORD *)v3;
      *((_OWORD *)v7 + 1) = v10;
      *((_OWORD *)v7 + 8) = v9;
      *((_OWORD *)v7 + 9) = v11;
      *((_OWORD *)v7 + 16) = v15;
      *((_OWORD *)v7 + 17) = v13;
      *((_OWORD *)v7 + 24) = v12;
      *((_OWORD *)v7 + 25) = v14;
      uint64_t v6 = 128;
    }
    else if (v8 == 3)
    {
      float32x4_t v5 = vld1q_dup_f32((const float *)v3);
      *(float32x4_t *)uint64_t v7 = v5;
      *((float32x4_t *)v7 + 1) = v5;
      *((float32x4_t *)v7 + 8) = v5;
      *((float32x4_t *)v7 + 9) = v5;
      *((float32x4_t *)v7 + 16) = v5;
      *((float32x4_t *)v7 + 17) = v5;
      *((float32x4_t *)v7 + 24) = v5;
      *((float32x4_t *)v7 + 25) = v5;
      uint64_t v6 = 4;
    }
    else if (*v4)
    {
      uint64_t v6 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((int8x16_t *)v7, 128, v3, v8);
    }
    else
    {
      uint64_t v6 = 0;
      *(_OWORD *)uint64_t v7 = 0u;
      *((_OWORD *)v7 + 1) = 0u;
      *((_OWORD *)v7 + 8) = 0u;
      *((_OWORD *)v7 + 9) = 0u;
      *((_OWORD *)v7 + 16) = 0u;
      *((_OWORD *)v7 + 17) = 0u;
      *((_OWORD *)v7 + 24) = 0u;
      *((_OWORD *)v7 + 25) = 0u;
    }
    v3 += v6;
    ++v4;
    v2 += 2;
  }
  while (v2 != 16);
  uint64_t v16 = *(unsigned int *)(a1 + 80);
  if (v16 && *(_DWORD *)(a1 + 84))
  {
    unint64_t v17 = (unint64_t)*(unsigned int *)(a1 + 72) << 7;
    uint64_t v18 = 8 * *(unsigned int *)(a1 + 76);
    int v19 = &v81[v17 + v18];
    uint64_t v20 = *(void *)(a1 + 56);
    uint64_t v21 = *(void *)(a1 + 64);
    unint64_t v22 = 8 * *(unsigned int *)(a1 + 84);
    if (v22 <= 1) {
      unint64_t v23 = 1;
    }
    else {
      unint64_t v23 = 8 * *(unsigned int *)(a1 + 84);
    }
    if (v23 && !((v23 - 1) >> 32))
    {
      uint64_t v24 = &v81[v17 + v18];
      uint64_t v25 = v23 & 0x7FFFFFFF8;
      if (v23 < 0x20)
      {
        uint64_t v26 = 0;
        char v27 = &v81[v17 + v18];
        int v28 = *(uint64_t **)(a1 + 56);
        while (1)
        {
          unsigned int v29 = (char *)(v20 + v21 * v26);
          uint64_t v30 = &v19[128 * v26];
          if ((unint64_t)(&v24[128 * v26] - v29) > 0x1F)
          {
            v30 += v25;
            unsigned int v32 = v27;
            char v33 = v28;
            uint64_t v34 = v23 & 0x7FFFFFFF8;
            do
            {
              uint64_t v35 = *v33++;
              *v32++ = v35;
              v34 -= 8;
            }
            while (v34);
            if (v23 == v25) {
              goto LABEL_19;
            }
            v29 += v25;
            int v31 = v23 & 0xFFFFFFF8;
          }
          else
          {
            int v31 = 0;
          }
          unsigned int v36 = v31 + 1;
          do
          {
            char v37 = *v29++;
            *v30++ = v37;
            BOOL v38 = v22 > v36++;
          }
          while (v38);
LABEL_19:
          ++v26;
          int v28 = (uint64_t *)((char *)v28 + v21);
          v27 += 128;
          if (v26 == v16) {
            goto LABEL_33;
          }
        }
      }
      uint64_t v61 = 0;
      uint64_t v62 = v23 & 0x7FFFFFFE0;
      uint64_t v63 = &v81[v17 + v18];
      uint64_t v64 = &v81[v17 + 16 + v18];
      uint64_t v65 = (long long *)(v20 + 16);
      uint64_t v66 = (uint64_t *)(v20 + (v23 & 0x7FFFFFFE0));
      unsigned int v67 = &v63[v23 & 0x7FFFFFFE0];
      while (1)
      {
        char v68 = (char *)(v20 + v21 * v61);
        int v69 = &v19[128 * v61];
        if ((unint64_t)(&v24[128 * v61] - v68) >= 0x20)
        {
          uint64_t v73 = v65;
          unsigned int v74 = v64;
          uint64_t v75 = v23 & 0x7FFFFFFE0;
          do
          {
            long long v76 = *v73;
            *(v74 - 1) = *(v73 - 1);
            *unsigned int v74 = v76;
            v74 += 2;
            v73 += 2;
            v75 -= 32;
          }
          while (v75);
          if (v23 == v62) {
            goto LABEL_48;
          }
          if ((v23 & 0x18) != 0)
          {
            v69 += v25;
            uint64_t v77 = v67;
            uint64_t v78 = v66;
            unint64_t v79 = v25 - (v23 & 0x7FFFFFFE0);
            do
            {
              uint64_t v80 = *v78++;
              *v77++ = v80;
              v79 -= 8;
            }
            while (v79);
            if (v23 == v25) {
              goto LABEL_48;
            }
            v68 += v25;
            int v70 = v23 & 0xFFFFFFF8;
          }
          else
          {
            v68 += v62;
            v69 += v62;
            int v70 = v23 & 0xFFFFFFE0;
          }
        }
        else
        {
          int v70 = 0;
        }
        unsigned int v71 = v70 + 1;
        do
        {
          char v72 = *v68++;
          *v69++ = v72;
          BOOL v38 = v22 > v71++;
        }
        while (v38);
LABEL_48:
        ++v61;
        v64 += 128;
        uint64_t v65 = (long long *)((char *)v65 + v21);
        uint64_t v66 = (uint64_t *)((char *)v66 + v21);
        v67 += 16;
        if (v61 == v16) {
          goto LABEL_33;
        }
      }
    }
    for (uint64_t i = 0; i != v16; ++i)
    {
      uint64_t v40 = 0;
      do
      {
        v19[v40] = *(unsigned char *)(v20 + v40);
        ++v40;
      }
      while (v22 > v40);
      v19 += 128;
      v20 += v21;
    }
  }
LABEL_33:
  uint64_t v41 = 0;
  uint64_t v42 = *(_OWORD **)(a1 + 40);
  uint64_t v43 = *(char **)(a1 + 48);
  int v44 = *(unsigned __int8 *)(a1 + 88);
  int v45 = *(unsigned __int8 *)(a1 + 89);
  do
  {
    uint64_t v56 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,2u>::kSubblockPositions[v41 + 1];
    uint64_t v57 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,2u>::kSubblockPositions[v41];
    unsigned int v58 = (v44 - 4 * v57) & ~((v44 - 4 * (int)v57) >> 31);
    if (v58 >= 4) {
      unsigned int v58 = 4;
    }
    LODWORD(result) = (v45 - 4 * v56) & ~((v45 - 4 * (int)v56) >> 31);
    if (result >= 4) {
      uint64_t result = 4;
    }
    else {
      uint64_t result = result;
    }
    if (v58) {
      BOOL v60 = result == 0;
    }
    else {
      BOOL v60 = 1;
    }
    if (v60)
    {
      char v55 = 0;
    }
    else
    {
      char v46 = (long long *)&v81[512 * v56 + 32 * v57];
      long long v47 = *v46;
      long long v48 = v46[1];
      long long v49 = v46[8];
      long long v50 = v46[9];
      long long v51 = v46[16];
      long long v52 = v46[17];
      v46 += 24;
      long long v53 = *v46;
      long long v54 = v46[1];
      *uint64_t v42 = v47;
      v42[1] = v49;
      v42[2] = v48;
      v42[3] = v50;
      v42[4] = v51;
      v42[5] = v53;
      v42[6] = v52;
      v42[7] = v54;
      v42 += 8;
      char v55 = 127;
    }
    *v43++ = v55;
    v41 += 2;
  }
  while (v41 != 16);
  return result;
}

unint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE12ELj2ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v2 = 0;
  uint64_t v63 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(a1 + 40);
  uint64_t v4 = *(unsigned char **)(a1 + 48);
  do
  {
    uint64_t v7 = &v62[512
            * (unint64_t)AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,2u>::kSubblockPositions[v2 + 1]
            + 32
            * AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,2u>::kSubblockPositions[v2]];
    unsigned int v8 = *v4;
    if (v8 == 127)
    {
      long long v9 = *(_OWORD *)(v3 + 16);
      long long v10 = *(_OWORD *)(v3 + 32);
      long long v11 = *(_OWORD *)(v3 + 48);
      long long v12 = *(_OWORD *)(v3 + 80);
      long long v13 = *(_OWORD *)(v3 + 96);
      long long v14 = *(_OWORD *)(v3 + 112);
      long long v15 = *(_OWORD *)(v3 + 64);
      *(_OWORD *)uint64_t v7 = *(_OWORD *)v3;
      *((_OWORD *)v7 + 1) = v10;
      *((_OWORD *)v7 + 8) = v9;
      *((_OWORD *)v7 + 9) = v11;
      *((_OWORD *)v7 + 16) = v15;
      *((_OWORD *)v7 + 17) = v13;
      *((_OWORD *)v7 + 24) = v12;
      *((_OWORD *)v7 + 25) = v14;
      uint64_t v6 = 128;
    }
    else if (v8 == 3)
    {
      float32x4_t v5 = vld1q_dup_f32((const float *)v3);
      *(float32x4_t *)uint64_t v7 = v5;
      *((float32x4_t *)v7 + 1) = v5;
      *((float32x4_t *)v7 + 8) = v5;
      *((float32x4_t *)v7 + 9) = v5;
      *((float32x4_t *)v7 + 16) = v5;
      *((float32x4_t *)v7 + 17) = v5;
      *((float32x4_t *)v7 + 24) = v5;
      *((float32x4_t *)v7 + 25) = v5;
      uint64_t v6 = 4;
    }
    else if (*v4)
    {
      uint64_t v6 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((int8x16_t *)v7, 128, v3, v8);
    }
    else
    {
      uint64_t v6 = 0;
      *(_OWORD *)uint64_t v7 = 0u;
      *((_OWORD *)v7 + 1) = 0u;
      *((_OWORD *)v7 + 8) = 0u;
      *((_OWORD *)v7 + 9) = 0u;
      *((_OWORD *)v7 + 16) = 0u;
      *((_OWORD *)v7 + 17) = 0u;
      *((_OWORD *)v7 + 24) = 0u;
      *((_OWORD *)v7 + 25) = 0u;
    }
    v3 += v6;
    ++v4;
    v2 += 2;
  }
  while (v2 != 16);
  uint64_t v16 = *(unsigned int *)(a1 + 80);
  if (v16 && *(_DWORD *)(a1 + 84))
  {
    unint64_t v17 = (unint64_t)*(unsigned int *)(a1 + 72) << 7;
    uint64_t v18 = 8 * *(unsigned int *)(a1 + 76);
    int v19 = &v62[v17 + v18];
    uint64_t v20 = *(void *)(a1 + 56);
    uint64_t v21 = *(void *)(a1 + 64);
    unint64_t v22 = 8 * *(unsigned int *)(a1 + 84);
    if (v22 <= 1) {
      unint64_t v23 = 1;
    }
    else {
      unint64_t v23 = 8 * *(unsigned int *)(a1 + 84);
    }
    if (v23 && !((v23 - 1) >> 32))
    {
      uint64_t v24 = &v62[v17 + v18];
      uint64_t v25 = v23 & 0x7FFFFFFF8;
      if (v23 < 0x20)
      {
        uint64_t v26 = 0;
        char v27 = &v62[v17 + v18];
        int v28 = *(uint64_t **)(a1 + 56);
        while (1)
        {
          unsigned int v29 = (char *)(v20 + v21 * v26);
          uint64_t v30 = &v19[128 * v26];
          if ((unint64_t)(&v24[128 * v26] - v29) > 0x1F)
          {
            v30 += v25;
            unsigned int v32 = v27;
            char v33 = v28;
            uint64_t v34 = v23 & 0x7FFFFFFF8;
            do
            {
              uint64_t v35 = *v33++;
              *v32++ = v35;
              v34 -= 8;
            }
            while (v34);
            if (v23 == v25) {
              goto LABEL_19;
            }
            v29 += v25;
            int v31 = v23 & 0xFFFFFFF8;
          }
          else
          {
            int v31 = 0;
          }
          unsigned int v36 = v31 + 1;
          do
          {
            char v37 = *v29++;
            *v30++ = v37;
            BOOL v38 = v22 > v36++;
          }
          while (v38);
LABEL_19:
          ++v26;
          int v28 = (uint64_t *)((char *)v28 + v21);
          v27 += 128;
          if (v26 == v16) {
            return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v62, 128, *(void *)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
          }
        }
      }
      uint64_t v42 = 0;
      uint64_t v43 = v23 & 0x7FFFFFFE0;
      int v44 = &v62[v17 + v18];
      int v45 = &v62[v17 + 16 + v18];
      char v46 = (long long *)(v20 + 16);
      long long v47 = (uint64_t *)(v20 + (v23 & 0x7FFFFFFE0));
      for (uint64_t i = &v44[v23 & 0x7FFFFFFE0]; ; i += 16)
      {
        long long v49 = (char *)(v20 + v21 * v42);
        long long v50 = &v19[128 * v42];
        if ((unint64_t)(&v24[128 * v42] - v49) >= 0x20)
        {
          long long v54 = v46;
          char v55 = v45;
          uint64_t v56 = v23 & 0x7FFFFFFE0;
          do
          {
            long long v57 = *v54;
            *(v55 - 1) = *(v54 - 1);
            *char v55 = v57;
            v55 += 2;
            v54 += 2;
            v56 -= 32;
          }
          while (v56);
          if (v23 == v43) {
            goto LABEL_35;
          }
          if ((v23 & 0x18) != 0)
          {
            v50 += v25;
            unsigned int v58 = i;
            char v59 = v47;
            unint64_t v60 = v25 - (v23 & 0x7FFFFFFE0);
            do
            {
              uint64_t v61 = *v59++;
              *v58++ = v61;
              v60 -= 8;
            }
            while (v60);
            if (v23 == v25) {
              goto LABEL_35;
            }
            v49 += v25;
            int v51 = v23 & 0xFFFFFFF8;
          }
          else
          {
            v49 += v43;
            v50 += v43;
            int v51 = v23 & 0xFFFFFFE0;
          }
        }
        else
        {
          int v51 = 0;
        }
        unsigned int v52 = v51 + 1;
        do
        {
          char v53 = *v49++;
          *v50++ = v53;
          BOOL v38 = v22 > v52++;
        }
        while (v38);
LABEL_35:
        ++v42;
        v45 += 128;
        char v46 = (long long *)((char *)v46 + v21);
        long long v47 = (uint64_t *)((char *)v47 + v21);
        if (v42 == v16) {
          return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v62, 128, *(void *)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
        }
      }
    }
    for (uint64_t j = 0; j != v16; ++j)
    {
      uint64_t v40 = 0;
      do
      {
        v19[v40] = *(unsigned char *)(v20 + v40);
        ++v40;
      }
      while (v22 > v40);
      v19 += 128;
      v20 += v21;
    }
  }
  return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v62, 128, *(void *)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
}