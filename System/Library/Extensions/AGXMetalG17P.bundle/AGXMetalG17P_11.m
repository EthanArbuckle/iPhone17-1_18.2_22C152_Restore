void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>,false,(AGXHardwareTextureMemoryOrder)2>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, int a12)
{
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  __int16 CacheMode;
  int v22;
  BOOL v23;
  int v24;
  int v26;
  BOOL isLevelTiled;
  uint64_t v28;
  uint32x2_t v29;
  int8x8_t v30;
  unsigned int v31;
  int v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  int v37;
  int v38;
  unsigned int v39;
  BOOL v40;
  int v41;
  int v43;
  uint64_t v44;
  int v45;
  BOOL v46;
  BOOL v47;
  __int32 v48;
  __int32 v49;
  unint64_t v50;
  unsigned int v51;
  unsigned int v52;
  unsigned int v53;
  unsigned int v54;
  unsigned int v55;
  unsigned int v56;
  int v57;
  uint64_t v58;
  BOOL v59;
  BOOL v60;
  int v61;
  unsigned int v62;
  uint64_t v63;
  char v64;
  char v65;
  unsigned int v66;
  int v67;
  unsigned __int8 *v68;
  uint64_t v69;
  void *v70;
  int v71;
  const void *v72;
  char v73;
  void *v74;
  int v75;
  int v76;
  unsigned char *v77;
  int v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  unsigned char *v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  unint64_t v94;
  unint64_t v95;
  unsigned char *v96;
  BOOL v97;
  char v98;
  uint64_t v99;
  uint64_t v100;
  unsigned char *v101;
  long long *v102;
  unsigned char *v103;
  uint64_t v104;
  char *v105;
  unsigned char *v106;
  char v107;
  int v108;
  uint64_t v109;
  long long *v110;
  _OWORD *v111;
  uint64_t v112;
  long long v113;
  unint64_t v114;
  uint64_t *v115;
  void *v116;
  uint64_t v117;
  unsigned int v118;
  char v119;
  unsigned int v121;
  unsigned int v122;
  unsigned int v123;
  unsigned int v124;
  int v125;
  uint64_t v126;
  int v127;
  int v128;
  BOOL v129;
  BOOL v130;
  int v131;
  unint64_t v132;
  unsigned int v133;
  int v134;
  unsigned int v135;
  unsigned int v136;
  unsigned int v137;
  unsigned int v139;
  int v140;
  BOOL v141;
  BOOL v142;
  int8x8_t v143;
  __int32 v144;
  unsigned int v145;
  unsigned int v146;
  BOOL v147;
  uint64_t v150;
  int v151;
  unsigned int v152;
  unsigned int v153;
  unsigned int v154;
  int v155;
  unsigned int v156;
  uint64_t v157;
  int v158;
  void block[5];
  unsigned char *v160;
  unsigned char *v161;
  uint64_t v162;
  uint64_t v163;
  unsigned int v164;
  unsigned int v165;
  unsigned int v166;
  unsigned int v167;
  unsigned __int8 v168;
  unsigned __int8 v169;
  unsigned char __dst[1024];
  unsigned char v171[32];
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  void v178[54];

  v178[52] = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  v17 = a1;
  v153 = a8;
  v18 = a8 >> 3;
  v137 = a8 + a10 - 1;
  v139 = v137 >> 3;
  v19 = *(unsigned __int8 *)(*(void *)(a1 + 208) + 88);
  v20 = *(_DWORD *)(a1 + 112);
  v157 = v17;
  if (*(void *)(v17 + 168))
  {
    CacheMode = IOSurfaceGetCacheMode();
    v17 = v157;
    v22 = CacheMode & 0xF00;
  }
  else
  {
    v22 = 0;
  }
  v23 = (v22 & 0xD00) == 0 || v22 == 768;
  v24 = v22 & 0xE00;
  v26 = !v23 && v24 != 1024;
  v158 = v26;
  isLevelTiled = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::isLevelTiled(v17, *(_DWORD *)(v17 + 144) + a12);
  v28 = v157;
  v147 = isLevelTiled;
  if (v18 <= v139)
  {
    v146 = a7 + a9 - 1;
    v136 = a7 >> 4;
    if (a7 >> 4 <= v146 >> 4)
    {
      v133 = a5 - 1;
      v135 = (a6 - 1) >> 3;
      v155 = ((a5 - 1) & 0xF) + 1;
      v156 = (a5 - 1) >> 4;
      v134 = ((a6 - 1) & 7) + 1;
      v29 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0xF00000007);
      v30 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32(vadd_s32((int32x2_t)vshl_u32(v29, (uint32x2_t)0xFFFFFFFCFFFFFFFDLL), (int32x2_t)-1))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x2000000010, v29));
      v144 = v30.i32[0] | v30.i32[1];
      v143 = v30;
      v141 = v30.i32[1] != 0;
      v142 = v30.i32[0] != 0;
      v132 = 8 * v20 * (unint64_t)v19;
      v145 = a7;
      do
      {
        v31 = (8 * v18) | 7;
        if (8 * v18 <= v153) {
          v32 = v153;
        }
        else {
          v32 = 8 * v18;
        }
        v33 = v136;
        if (v137 < v31) {
          v31 = v137;
        }
        v140 = v32 - 8 * v18;
        v151 = v31 - v32 + 1;
        v152 = 8 * v18;
        if (v18 == v135) {
          v34 = v134;
        }
        else {
          v34 = 8;
        }
        v150 = a3 + (v32 - v153) * a11;
        v154 = v34;
        do
        {
          v35 = 16 * v33;
          v36 = 16 * (v33 + 1) - 1;
          if (16 * v33 <= a7) {
            v37 = a7;
          }
          else {
            v37 = 16 * v33;
          }
          if (v146 < v36) {
            v36 = v146;
          }
          v38 = v36 - v37 + 1;
          if (v33 == v156) {
            v39 = v155;
          }
          else {
            v39 = 16;
          }
          v40 = 1;
          if (v152 >= v153 && v35 >= a7)
          {
            v41 = v155;
            if (v33 != v156) {
              v41 = 16;
            }
            v40 = v38 != v41 || v151 != v34;
          }
          if (v147)
          {
            v62 = 0;
            v63 = v132 >> (*(unsigned char *)(v28 + 57) != 0);
            v64 = 1;
            if (v63 > 127)
            {
              if (v63 > 511)
              {
                if (v63 == 512)
                {
                  v65 = 0;
                  v62 = 16;
                  v66 = 16;
                }
                else
                {
                  v65 = 1;
                  v66 = 0;
                  if (v63 == 1024)
                  {
                    v66 = 8;
                    v62 = 16;
                  }
                }
              }
              else if (v63 == 128)
              {
                v64 = 0;
                v65 = 0;
                v62 = 32;
                v66 = 32;
              }
              else
              {
                v65 = 1;
                v66 = 0;
                if (v63 == 256)
                {
                  v64 = 0;
                  v65 = 0;
                  v66 = 16;
                  v62 = 32;
                }
              }
            }
            else
            {
              v65 = 1;
              v66 = 0;
              switch(v63)
              {
                case 4:
                  v64 = 0;
                  v65 = 0;
                  v66 = 128;
                  v62 = 256;
                  break;
                case 5:
                case 6:
                case 7:
                case 9:
                case 10:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 17:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                  break;
                case 8:
                  v64 = 0;
                  v65 = 0;
                  v62 = 128;
                  v66 = 128;
                  break;
                case 16:
                  v64 = 0;
                  v65 = 0;
                  v66 = 64;
                  v62 = 128;
                  break;
                case 32:
                  v64 = 0;
                  v65 = 0;
                  v62 = 64;
                  v66 = 64;
                  break;
                default:
                  if (v63 == 64)
                  {
                    v64 = 0;
                    v65 = 0;
                    v66 = 32;
                    v62 = 64;
                  }
                  break;
              }
            }
            v121 = (v62 >> 4) - 1;
            if (v64) {
              v122 = 0;
            }
            else {
              v122 = 32 - __clz(~(-1 << -(char)__clz(v121)));
            }
            v123 = (v66 >> 3) - 1;
            if (v65)
            {
              v124 = 0;
              if (v122) {
                goto LABEL_150;
              }
            }
            else
            {
              v124 = 32 - __clz(~(-1 << -(char)__clz(v123)));
              if (v124 | v122)
              {
LABEL_150:
                v125 = 0;
                v126 = 0;
                v127 = v33 & v121;
                v128 = v18 & v123;
                v129 = v124 != 0;
                v130 = v122 != 0;
                v131 = 1;
                do
                {
                  --v124;
                  if (v129) {
                    v126 |= (unint64_t)(v131 & v128) << v125++;
                  }
                  else {
                    v124 = 0;
                  }
                  --v122;
                  if (v130) {
                    v126 |= (unint64_t)(v131 & v127) << v125++;
                  }
                  else {
                    v122 = 0;
                  }
                  v131 *= 2;
                  --v125;
                  v130 = v122 != 0;
                  v129 = v124 != 0;
                }
                while (v122 | v124);
                goto LABEL_162;
              }
            }
            v126 = 0;
LABEL_162:
            v50 = ((unint64_t)(v35 / v62 + v152 / v66 * ((v62 + v133) / v62)) << 14) + (v126 << 9);
            goto LABEL_59;
          }
          if (v144)
          {
            v43 = 0;
            v44 = 0;
            v45 = 1;
            v46 = v141;
            v47 = v142;
            v48 = v143.i32[0];
            v49 = v143.i32[1];
            do
            {
              --v48;
              if (v47) {
                v44 |= (unint64_t)(v45 & v18) << v43++;
              }
              else {
                v48 = 0;
              }
              --v49;
              if (v46) {
                v44 |= (unint64_t)(v45 & v33) << v43++;
              }
              else {
                v49 = 0;
              }
              v45 *= 2;
              --v43;
              v46 = v49 != 0;
              v47 = v48 != 0;
            }
            while (v49 | v48);
          }
          else
          {
            v44 = 0;
          }
          v50 = v44 << 9;
LABEL_59:
          v51 = *(_DWORD *)(v28 + 128) >> (*(unsigned char *)(v28 + 144) + a12);
          if (v51 <= 1) {
            v51 = 1;
          }
          v52 = v51 + 15;
          if (v52 < 0x20) {
            v53 = 0;
          }
          else {
            v53 = 32 - __clz(~(-1 << -(char)__clz((v52 >> 4) - 1)));
          }
          v54 = *(_DWORD *)(v28 + 132) >> (*(unsigned char *)(v28 + 144) + a12);
          if (v54 <= 1) {
            v54 = 1;
          }
          v55 = v54 + 7;
          if (v55 < 0x10)
          {
            v56 = 0;
            if (!v53)
            {
LABEL_81:
              v58 = 0;
              goto LABEL_82;
            }
          }
          else
          {
            v56 = 32 - __clz(~(-1 << -(char)__clz((v55 >> 3) - 1)));
            if (!(v56 | v53)) {
              goto LABEL_81;
            }
          }
          v57 = 0;
          v58 = 0;
          v59 = v53 != 0;
          v60 = v56 != 0;
          v61 = 1;
          do
          {
            --v53;
            if (v59) {
              v58 |= (unint64_t)(v61 & v33) << v57++;
            }
            else {
              v53 = 0;
            }
            --v56;
            if (v60) {
              v58 |= (unint64_t)(v61 & v18) << v57++;
            }
            else {
              v56 = 0;
            }
            v61 *= 2;
            --v57;
            v60 = v56 != 0;
            v59 = v53 != 0;
          }
          while (v56 | v53);
LABEL_82:
          v67 = v39 < 0x10 || v40;
          v68 = (unsigned __int8 *)(a4 + 8 * v58);
          v69 = v150 + 8 * (v37 - a7);
          v70 = (void *)(a2 + v50);
          if (v34 < 8) {
            v71 = 1;
          }
          else {
            v71 = v67;
          }
          if (v158)
          {
            if (!v71)
            {
              v77 = __dst;
LABEL_95:
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::compressMacroblock(v69, a11, (unint64_t)v77, v68, v39, v34, *(_DWORD *)(*(void *)(v28 + 208) + 52));
              goto LABEL_96;
            }
            v72 = v70;
            v73 = v39;
            v74 = v70;
            v75 = v38;
            v76 = v37;
            memcpy(__dst, v72, sizeof(__dst));
            v37 = v76;
            v35 = 16 * v33;
            v77 = __dst;
            v38 = v75;
            v70 = v74;
            LOBYTE(v39) = v73;
            LOBYTE(v34) = v154;
            v28 = v157;
          }
          else
          {
            v77 = v70;
            if (!v71) {
              goto LABEL_95;
            }
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE13ELj2ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint3EEELb0EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = v28;
          v160 = v77;
          v168 = v39;
          v169 = v34;
          v164 = v140;
          v165 = v37 - v35;
          v161 = v68;
          v162 = v69;
          v163 = a11;
          v166 = v151;
          v167 = v38;
          if (!v40)
          {
            v78 = *(_DWORD *)(*(void *)(v28 + 208) + 52);
            v79 = (uint64_t)&v77[AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressSubblock((uint64_t)v171, 128, (uint64_t)v77, *v68, v78)];
            v80 = v79
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressSubblock((uint64_t)&v172, 128, v79, v68[1], v78);
            v81 = v80
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressSubblock((uint64_t)&v175, 128, v80, v68[2], v78);
            v82 = v81
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressSubblock((uint64_t)&v176, 128, v81, v68[3], v78);
            v83 = v82
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressSubblock((uint64_t)&v173, 128, v82, v68[4], v78);
            v84 = v83
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressSubblock((uint64_t)&v174, 128, v83, v68[5], v78);
            v85 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressSubblock((uint64_t)&v177, 128, v84, v68[6], v78);
            AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressSubblock((uint64_t)v178, 128, v84 + v85, v68[7], v78);
            v86 = v166;
            a7 = v145;
            if (!v166 || !v167)
            {
LABEL_130:
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::compressMacroblock((uint64_t)v171, 128, (unint64_t)v160, v161, v168, v169, *(_DWORD *)(*(void *)(v157 + 208) + 52));
              if (!v158) {
                goto LABEL_27;
              }
              goto LABEL_131;
            }
            v87 = 0;
            v88 = (unint64_t)v164 << 7;
            v89 = 8 * v165;
            v90 = &v171[v88 + v89];
            v91 = v162;
            v92 = v163;
            v93 = 8 * v167;
            if (v93 <= 1) {
              v94 = 1;
            }
            else {
              v94 = 8 * v167;
            }
            v95 = v88 + v89;
            v96 = &v171[v88 + v89];
            if (v94) {
              v97 = (v94 - 1) >> 32 == 0;
            }
            else {
              v97 = 0;
            }
            v98 = !v97;
            v99 = v94 & 0x7FFFFFFE0;
            v100 = v94 & 0x7FFFFFFF8;
            v101 = &v171[v95 + 16];
            v102 = (long long *)(v162 + 16);
            v103 = v90;
            v104 = v162;
            while (2)
            {
              v105 = (char *)(v91 + v92 * v87);
              v106 = &v90[128 * v87];
              if ((unint64_t)(&v96[128 * v87] - v105) < 0x20) {
                v107 = 1;
              }
              else {
                v107 = v98;
              }
              if (v107)
              {
                v108 = 0;
LABEL_127:
                v118 = v108 + 1;
                do
                {
                  v119 = *v105++;
                  *v106++ = v119;
                }
                while (v93 > v118++);
              }
              else
              {
                if (v94 >= 0x20)
                {
                  v110 = v102;
                  v111 = v101;
                  v112 = v94 & 0x7FFFFFFE0;
                  do
                  {
                    v113 = *v110;
                    *(v111 - 1) = *(v110 - 1);
                    *v111 = v113;
                    v111 += 2;
                    v110 += 2;
                    v112 -= 32;
                  }
                  while (v112);
                  if (v94 == v99) {
                    goto LABEL_110;
                  }
                  v109 = v94 & 0x7FFFFFFE0;
                  if ((v94 & 0x18) == 0)
                  {
                    v105 += v99;
                    v106 += v99;
                    v108 = v94 & 0xFFFFFFE0;
                    goto LABEL_127;
                  }
                }
                else
                {
                  v109 = 0;
                }
                v106 += v100;
                v114 = v109 - (v94 & 0x7FFFFFFF8);
                v115 = (uint64_t *)(v104 + v109);
                v116 = &v103[v109];
                do
                {
                  v117 = *v115++;
                  *v116++ = v117;
                  v114 += 8;
                }
                while (v114);
                if (v94 != v100)
                {
                  v105 += v100;
                  v108 = v94 & 0xFFFFFFF8;
                  goto LABEL_127;
                }
              }
LABEL_110:
              ++v87;
              v101 += 128;
              v102 = (long long *)((char *)v102 + v92);
              v104 += v92;
              v103 += 128;
              if (v87 == v86) {
                goto LABEL_130;
              }
              continue;
            }
          }
          dispatch_sync(*(dispatch_queue_t *)(*(void *)(v28 + 8) + 7384), block);
LABEL_96:
          a7 = v145;
          if (!v158) {
            goto LABEL_27;
          }
LABEL_131:
          memcpy(v70, v77, 0x400uLL);
LABEL_27:
          v23 = v33++ == v146 >> 4;
          v28 = v157;
          v34 = v154;
        }
        while (!v23);
        v23 = v18++ == v139;
      }
      while (!v23);
    }
  }
}

void *AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>,false,(AGXHardwareTextureMemoryOrder)2>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, int a12)
{
  uint64_t v313 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  uint64_t v17 = a1;
  unsigned int v230 = a8;
  unsigned int v18 = a8 >> 3;
  unsigned int v214 = a8 + a10 - 1;
  unsigned int v216 = v214 >> 3;
  unsigned int v19 = *(unsigned __int8 *)(*(void *)(a1 + 208) + 88);
  unsigned int v20 = *(_DWORD *)(a1 + 112);
  uint64_t v233 = v17;
  if (*(void *)(v17 + 168))
  {
    __int16 CacheMode = IOSurfaceGetCacheMode();
    uint64_t v17 = v233;
    int v22 = CacheMode & 0xF00;
  }
  else
  {
    int v22 = 0;
  }
  BOOL v23 = (v22 & 0xD00) == 0 || v22 == 768;
  int v24 = v22 & 0xE00;
  int v26 = !v23 && v24 != 1024;
  int v235 = v26;
  result = (void *)AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::isLevelTiled(v17, *(_DWORD *)(v17 + 144) + a12);
  uint64_t v28 = v233;
  int v224 = (int)result;
  if (v18 <= v216)
  {
    unsigned int v223 = a7 + a9 - 1;
    unsigned int v213 = a7 >> 4;
    if (a7 >> 4 <= v223 >> 4)
    {
      unsigned int v210 = a5 - 1;
      unsigned int v232 = (a5 - 1) >> 4;
      int v231 = ((a5 - 1) & 0xF) + 1;
      int v211 = ((a6 - 1) & 7) + 1;
      unsigned int v212 = (a6 - 1) >> 3;
      uint32x2_t v29 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0xF00000007);
      int8x8_t v30 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32(vadd_s32((int32x2_t)vshl_u32(v29, (uint32x2_t)0xFFFFFFFCFFFFFFFDLL), (int32x2_t)-1))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x2000000010, v29));
      __int32 v221 = v30.i32[0] | v30.i32[1];
      int8x8_t v220 = v30;
      BOOL v219 = v30.i32[0] != 0;
      BOOL v218 = v30.i32[1] != 0;
      unint64_t v209 = 8 * v20 * (unint64_t)v19;
      unsigned int v222 = a7;
      do
      {
        unsigned int v31 = (8 * v18) | 7;
        if (8 * v18 <= v230) {
          int v32 = v230;
        }
        else {
          int v32 = 8 * v18;
        }
        unsigned int v33 = v213;
        if (v214 < v31) {
          unsigned int v31 = v214;
        }
        unsigned int v229 = 8 * v18;
        int v217 = v32 - 8 * v18;
        int v228 = v31 - v32 + 1;
        int v34 = v211;
        if (v18 != v212) {
          int v34 = 8;
        }
        unsigned int v236 = v34;
        uint64_t v227 = a3 + (v32 - v230) * a11;
        do
        {
          unsigned int v35 = 16 * v33;
          unsigned int v36 = 16 * (v33 + 1) - 1;
          if (16 * v33 <= a7) {
            int v37 = a7;
          }
          else {
            int v37 = 16 * v33;
          }
          if (v223 < v36) {
            unsigned int v36 = v223;
          }
          int v38 = v36 - v37 + 1;
          if (v33 == v232) {
            unsigned int v39 = v231;
          }
          else {
            unsigned int v39 = 16;
          }
          BOOL v40 = 1;
          if (v229 >= v230 && v35 >= a7)
          {
            int v41 = v231;
            if (v33 != v232) {
              int v41 = 16;
            }
            BOOL v40 = v38 != v41 || v228 != v236;
          }
          if (v224)
          {
            unsigned int v62 = 0;
            uint64_t v63 = v209 >> (*(unsigned char *)(v28 + 57) != 0);
            char v64 = 1;
            if (v63 > 127)
            {
              if (v63 > 511)
              {
                if (v63 == 512)
                {
                  char v65 = 0;
                  unsigned int v62 = 16;
                  unsigned int v66 = 16;
                }
                else
                {
                  char v65 = 1;
                  unsigned int v66 = 0;
                  if (v63 == 1024)
                  {
                    unsigned int v66 = 8;
                    unsigned int v62 = 16;
                  }
                }
              }
              else if (v63 == 128)
              {
                char v64 = 0;
                char v65 = 0;
                unsigned int v62 = 32;
                unsigned int v66 = 32;
              }
              else
              {
                char v65 = 1;
                unsigned int v66 = 0;
                if (v63 == 256)
                {
                  char v64 = 0;
                  char v65 = 0;
                  unsigned int v66 = 16;
                  unsigned int v62 = 32;
                }
              }
            }
            else
            {
              char v65 = 1;
              unsigned int v66 = 0;
              switch(v63)
              {
                case 4:
                  char v64 = 0;
                  char v65 = 0;
                  unsigned int v66 = 128;
                  unsigned int v62 = 256;
                  break;
                case 5:
                case 6:
                case 7:
                case 9:
                case 10:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 17:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                  break;
                case 8:
                  char v64 = 0;
                  char v65 = 0;
                  unsigned int v62 = 128;
                  unsigned int v66 = 128;
                  break;
                case 16:
                  char v64 = 0;
                  char v65 = 0;
                  unsigned int v66 = 64;
                  unsigned int v62 = 128;
                  break;
                case 32:
                  char v64 = 0;
                  char v65 = 0;
                  unsigned int v62 = 64;
                  unsigned int v66 = 64;
                  break;
                default:
                  if (v63 == 64)
                  {
                    char v64 = 0;
                    char v65 = 0;
                    unsigned int v66 = 32;
                    unsigned int v62 = 64;
                  }
                  break;
              }
            }
            unsigned int v198 = (v62 >> 4) - 1;
            if (v64) {
              unsigned int v199 = 0;
            }
            else {
              unsigned int v199 = 32 - __clz(~(-1 << -(char)__clz(v198)));
            }
            unsigned int v200 = (v66 >> 3) - 1;
            if (v65)
            {
              unsigned int v201 = 0;
              if (v199) {
                goto LABEL_222;
              }
            }
            else
            {
              unsigned int v201 = 32 - __clz(~(-1 << -(char)__clz(v200)));
              if (v201 | v199)
              {
LABEL_222:
                int v202 = 0;
                uint64_t v203 = 0;
                int v204 = v33 & v198;
                int v205 = v18 & v200;
                BOOL v206 = v201 != 0;
                BOOL v207 = v199 != 0;
                int v208 = 1;
                do
                {
                  --v201;
                  if (v206) {
                    v203 |= (unint64_t)(v208 & v205) << v202++;
                  }
                  else {
                    unsigned int v201 = 0;
                  }
                  --v199;
                  if (v207) {
                    v203 |= (unint64_t)(v208 & v204) << v202++;
                  }
                  else {
                    unsigned int v199 = 0;
                  }
                  v208 *= 2;
                  --v202;
                  BOOL v207 = v199 != 0;
                  BOOL v206 = v201 != 0;
                }
                while (v199 | v201);
                goto LABEL_234;
              }
            }
            uint64_t v203 = 0;
LABEL_234:
            unint64_t v50 = ((unint64_t)(v35 / v62 + v229 / v66 * ((v62 + v210) / v62)) << 14) + (v203 << 9);
            goto LABEL_58;
          }
          if (v221)
          {
            int v43 = 0;
            uint64_t v44 = 0;
            int v45 = 1;
            BOOL v46 = v219;
            BOOL v47 = v218;
            __int32 v48 = v220.i32[0];
            __int32 v49 = v220.i32[1];
            do
            {
              --v48;
              if (v46) {
                v44 |= (unint64_t)(v45 & v18) << v43++;
              }
              else {
                __int32 v48 = 0;
              }
              --v49;
              if (v47) {
                v44 |= (unint64_t)(v45 & v33) << v43++;
              }
              else {
                __int32 v49 = 0;
              }
              v45 *= 2;
              --v43;
              BOOL v47 = v49 != 0;
              BOOL v46 = v48 != 0;
            }
            while (v49 | v48);
          }
          else
          {
            uint64_t v44 = 0;
          }
          unint64_t v50 = v44 << 9;
LABEL_58:
          unsigned int v51 = *(_DWORD *)(v28 + 128) >> (*(unsigned char *)(v28 + 144) + a12);
          if (v51 <= 1) {
            unsigned int v51 = 1;
          }
          unsigned int v52 = v51 + 15;
          if (v52 < 0x20) {
            unsigned int v53 = 0;
          }
          else {
            unsigned int v53 = 32 - __clz(~(-1 << -(char)__clz((v52 >> 4) - 1)));
          }
          unsigned int v54 = *(_DWORD *)(v28 + 132) >> (*(unsigned char *)(v28 + 144) + a12);
          if (v54 <= 1) {
            unsigned int v54 = 1;
          }
          unsigned int v55 = v54 + 7;
          if (v55 < 0x10)
          {
            unsigned int v56 = 0;
            if (!v53)
            {
LABEL_80:
              uint64_t v58 = 0;
              goto LABEL_81;
            }
          }
          else
          {
            unsigned int v56 = 32 - __clz(~(-1 << -(char)__clz((v55 >> 3) - 1)));
            if (!(v56 | v53)) {
              goto LABEL_80;
            }
          }
          int v57 = 0;
          uint64_t v58 = 0;
          BOOL v59 = v53 != 0;
          BOOL v60 = v56 != 0;
          int v61 = 1;
          do
          {
            --v53;
            if (v59) {
              v58 |= (unint64_t)(v61 & v33) << v57++;
            }
            else {
              unsigned int v53 = 0;
            }
            --v56;
            if (v60) {
              v58 |= (unint64_t)(v61 & v18) << v57++;
            }
            else {
              unsigned int v56 = 0;
            }
            v61 *= 2;
            --v57;
            BOOL v60 = v56 != 0;
            BOOL v59 = v53 != 0;
          }
          while (v56 | v53);
LABEL_81:
          int v67 = v39 < 0x10 || v40;
          v68 = (unsigned __int8 *)(a4 + 8 * v58);
          uint64_t v69 = v227 + 8 * (v37 - a7);
          v70 = (float32x4_t *)(a2 + v50);
          if (v236 < 8) {
            int v71 = 1;
          }
          else {
            int v71 = v67;
          }
          v234 = v70;
          if (v235)
          {
            v72 = (float32x4_t *)__dst;
            if (!v71) {
              goto LABEL_93;
            }
            memcpy(__dst, v70, sizeof(__dst));
            uint64_t v28 = v233;
          }
          else
          {
            v72 = v70;
            if (!v71)
            {
LABEL_93:
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::compressMacroblock(v69, a11, (unint64_t)v72, v68, v39, v236, *(_DWORD *)(*(void *)(v28 + 208) + 52));
              goto LABEL_94;
            }
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE15ELj2ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint3EEELb0EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = v28;
          v238 = v72;
          unsigned __int8 v246 = v39;
          unsigned __int8 v247 = v236;
          unsigned int v242 = v217;
          unsigned int v243 = v37 - v35;
          v239 = v68;
          uint64_t v240 = v69;
          uint64_t v241 = a11;
          unsigned int v244 = v228;
          unsigned int v245 = v38;
          if (v40)
          {
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(v28 + 8) + 7384), block);
LABEL_94:
            a7 = v222;
            unsigned int v73 = v33 + 1;
            goto LABEL_202;
          }
          uint64_t v74 = *(void *)(v28 + 208);
          int v75 = *(_DWORD *)(v74 + 52);
          unsigned int v76 = *v68;
          if (*v68)
          {
            if (v76 < 0xF0)
            {
              if (v76 == 127)
              {
                float32x4_t v79 = v72[1];
                float32x4_t v80 = v72[2];
                float32x4_t v81 = v72[3];
                float32x4_t v82 = v72[4];
                float32x4_t v83 = v72[5];
                float32x4_t v84 = v72[6];
                float32x4_t v85 = v72[7];
                int8x16_t v249 = *(int8x16_t *)v72;
                float32x4_t v250 = v80;
                float32x4_t v257 = v79;
                float32x4_t v258 = v81;
                float32x4_t v265 = v82;
                float32x4_t v266 = v84;
                float32x4_t v273 = v83;
                float32x4_t v274 = v85;
                uint64_t v77 = 128;
                unsigned int v73 = v33 + 1;
              }
              else
              {
                unsigned int v73 = v33 + 1;
                if (v76 == 3)
                {
                  float32x4_t v78 = vld1q_dup_f32(v72->f32);
                  int8x16_t v249 = (int8x16_t)v78;
                  float32x4_t v250 = v78;
                  float32x4_t v257 = v78;
                  float32x4_t v258 = v78;
                  float32x4_t v265 = v78;
                  float32x4_t v266 = v78;
                  float32x4_t v273 = v78;
                  float32x4_t v274 = v78;
                  uint64_t v77 = 4;
                }
                else
                {
                  uint64_t v77 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(&v249, 128, (uint64_t)v72, v76);
                }
              }
            }
            else
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(&v249, 128, (unint64_t)v72, v76, *(_DWORD *)(v74 + 52));
              uint64_t v77 = 64;
              unsigned int v73 = v33 + 1;
            }
          }
          else
          {
            uint64_t v77 = 0;
            float32x4_t v250 = 0u;
            int8x16_t v249 = 0u;
            float32x4_t v257 = 0u;
            float32x4_t v258 = 0u;
            float32x4_t v265 = 0u;
            float32x4_t v266 = 0u;
            float32x4_t v273 = 0u;
            float32x4_t v274 = 0u;
            unsigned int v73 = v33 + 1;
          }
          unint64_t v86 = (unint64_t)v72 + v77;
          unsigned int v87 = v68[1];
          if (v68[1])
          {
            if (v87 < 0xF0)
            {
              if (v87 == 127)
              {
                float32x4_t v90 = *(float32x4_t *)(v86 + 16);
                float32x4_t v91 = *(float32x4_t *)(v86 + 32);
                float32x4_t v92 = *(float32x4_t *)(v86 + 48);
                float32x4_t v93 = *(float32x4_t *)(v86 + 64);
                float32x4_t v94 = *(float32x4_t *)(v86 + 80);
                float32x4_t v95 = *(float32x4_t *)(v86 + 96);
                float32x4_t v96 = *(float32x4_t *)(v86 + 112);
                int8x16_t v251 = *(int8x16_t *)v86;
                float32x4_t v252 = v91;
                float32x4_t v259 = v90;
                float32x4_t v260 = v92;
                float32x4_t v267 = v93;
                float32x4_t v268 = v95;
                float32x4_t v275 = v94;
                float32x4_t v276 = v96;
                uint64_t v88 = 128;
              }
              else if (v87 == 3)
              {
                float32x4_t v89 = vld1q_dup_f32((const float *)v86);
                int8x16_t v251 = (int8x16_t)v89;
                float32x4_t v252 = v89;
                float32x4_t v259 = v89;
                float32x4_t v260 = v89;
                float32x4_t v267 = v89;
                float32x4_t v268 = v89;
                float32x4_t v275 = v89;
                float32x4_t v276 = v89;
                uint64_t v88 = 4;
              }
              else
              {
                uint64_t v88 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(&v251, 128, v86, v87);
              }
            }
            else
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(&v251, 128, v86, v87, v75);
              uint64_t v88 = 64;
            }
          }
          else
          {
            uint64_t v88 = 0;
            int8x16_t v251 = 0u;
            float32x4_t v252 = 0u;
            float32x4_t v259 = 0u;
            float32x4_t v260 = 0u;
            float32x4_t v267 = 0u;
            float32x4_t v268 = 0u;
            float32x4_t v275 = 0u;
            float32x4_t v276 = 0u;
          }
          unint64_t v97 = v86 + v88;
          unsigned int v98 = v68[2];
          if (v68[2])
          {
            if (v98 < 0xF0)
            {
              if (v98 == 127)
              {
                float32x4_t v101 = *(float32x4_t *)(v97 + 16);
                float32x4_t v102 = *(float32x4_t *)(v97 + 32);
                float32x4_t v103 = *(float32x4_t *)(v97 + 48);
                float32x4_t v104 = *(float32x4_t *)(v97 + 64);
                float32x4_t v105 = *(float32x4_t *)(v97 + 80);
                float32x4_t v106 = *(float32x4_t *)(v97 + 96);
                float32x4_t v107 = *(float32x4_t *)(v97 + 112);
                int8x16_t v281 = *(int8x16_t *)v97;
                float32x4_t v282 = v102;
                float32x4_t v289 = v101;
                float32x4_t v290 = v103;
                float32x4_t v297 = v104;
                float32x4_t v298 = v106;
                float32x4_t v305 = v105;
                float32x4_t v306 = v107;
                uint64_t v99 = 128;
              }
              else if (v98 == 3)
              {
                float32x4_t v100 = vld1q_dup_f32((const float *)v97);
                int8x16_t v281 = (int8x16_t)v100;
                float32x4_t v282 = v100;
                float32x4_t v289 = v100;
                float32x4_t v290 = v100;
                float32x4_t v297 = v100;
                float32x4_t v298 = v100;
                float32x4_t v305 = v100;
                float32x4_t v306 = v100;
                uint64_t v99 = 4;
              }
              else
              {
                uint64_t v99 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(&v281, 128, v97, v98);
              }
            }
            else
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(&v281, 128, v97, v98, v75);
              uint64_t v99 = 64;
            }
          }
          else
          {
            uint64_t v99 = 0;
            int8x16_t v281 = 0u;
            float32x4_t v282 = 0u;
            float32x4_t v289 = 0u;
            float32x4_t v290 = 0u;
            float32x4_t v297 = 0u;
            float32x4_t v298 = 0u;
            float32x4_t v305 = 0u;
            float32x4_t v306 = 0u;
          }
          unint64_t v108 = v97 + v99;
          unsigned int v109 = v68[3];
          if (v68[3])
          {
            if (v109 < 0xF0)
            {
              if (v109 == 127)
              {
                float32x4_t v112 = *(float32x4_t *)(v108 + 16);
                float32x4_t v113 = *(float32x4_t *)(v108 + 32);
                float32x4_t v114 = *(float32x4_t *)(v108 + 48);
                float32x4_t v115 = *(float32x4_t *)(v108 + 64);
                float32x4_t v116 = *(float32x4_t *)(v108 + 80);
                float32x4_t v117 = *(float32x4_t *)(v108 + 96);
                float32x4_t v118 = *(float32x4_t *)(v108 + 112);
                int8x16_t v283 = *(int8x16_t *)v108;
                float32x4_t v284 = v113;
                float32x4_t v291 = v112;
                float32x4_t v292 = v114;
                float32x4_t v299 = v115;
                float32x4_t v300 = v117;
                float32x4_t v307 = v116;
                float32x4_t v308 = v118;
                uint64_t v110 = 128;
              }
              else if (v109 == 3)
              {
                float32x4_t v111 = vld1q_dup_f32((const float *)v108);
                int8x16_t v283 = (int8x16_t)v111;
                float32x4_t v284 = v111;
                float32x4_t v291 = v111;
                float32x4_t v292 = v111;
                float32x4_t v299 = v111;
                float32x4_t v300 = v111;
                float32x4_t v307 = v111;
                float32x4_t v308 = v111;
                uint64_t v110 = 4;
              }
              else
              {
                uint64_t v110 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(&v283, 128, v108, v109);
              }
            }
            else
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(&v283, 128, v108, v109, v75);
              uint64_t v110 = 64;
            }
          }
          else
          {
            uint64_t v110 = 0;
            int8x16_t v283 = 0u;
            float32x4_t v284 = 0u;
            float32x4_t v291 = 0u;
            float32x4_t v292 = 0u;
            float32x4_t v299 = 0u;
            float32x4_t v300 = 0u;
            float32x4_t v307 = 0u;
            float32x4_t v308 = 0u;
          }
          unint64_t v119 = v108 + v110;
          unsigned int v120 = v68[4];
          if (v68[4])
          {
            if (v120 < 0xF0)
            {
              if (v120 == 127)
              {
                float32x4_t v123 = *(float32x4_t *)(v119 + 16);
                float32x4_t v124 = *(float32x4_t *)(v119 + 32);
                float32x4_t v125 = *(float32x4_t *)(v119 + 48);
                float32x4_t v126 = *(float32x4_t *)(v119 + 64);
                float32x4_t v127 = *(float32x4_t *)(v119 + 80);
                float32x4_t v128 = *(float32x4_t *)(v119 + 96);
                float32x4_t v129 = *(float32x4_t *)(v119 + 112);
                int8x16_t v253 = *(int8x16_t *)v119;
                float32x4_t v254 = v124;
                float32x4_t v261 = v123;
                float32x4_t v262 = v125;
                float32x4_t v269 = v126;
                float32x4_t v270 = v128;
                float32x4_t v277 = v127;
                float32x4_t v278 = v129;
                uint64_t v121 = 128;
              }
              else if (v120 == 3)
              {
                float32x4_t v122 = vld1q_dup_f32((const float *)v119);
                int8x16_t v253 = (int8x16_t)v122;
                float32x4_t v254 = v122;
                float32x4_t v261 = v122;
                float32x4_t v262 = v122;
                float32x4_t v269 = v122;
                float32x4_t v270 = v122;
                float32x4_t v277 = v122;
                float32x4_t v278 = v122;
                uint64_t v121 = 4;
              }
              else
              {
                uint64_t v121 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(&v253, 128, v119, v120);
              }
            }
            else
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(&v253, 128, v119, v120, v75);
              uint64_t v121 = 64;
            }
          }
          else
          {
            uint64_t v121 = 0;
            int8x16_t v253 = 0u;
            float32x4_t v254 = 0u;
            float32x4_t v261 = 0u;
            float32x4_t v262 = 0u;
            float32x4_t v269 = 0u;
            float32x4_t v270 = 0u;
            float32x4_t v277 = 0u;
            float32x4_t v278 = 0u;
          }
          unint64_t v130 = v119 + v121;
          unsigned int v131 = v68[5];
          if (v68[5])
          {
            if (v131 < 0xF0)
            {
              if (v131 == 127)
              {
                float32x4_t v134 = *(float32x4_t *)(v130 + 16);
                float32x4_t v135 = *(float32x4_t *)(v130 + 32);
                float32x4_t v136 = *(float32x4_t *)(v130 + 48);
                float32x4_t v137 = *(float32x4_t *)(v130 + 64);
                float32x4_t v138 = *(float32x4_t *)(v130 + 80);
                float32x4_t v139 = *(float32x4_t *)(v130 + 96);
                float32x4_t v140 = *(float32x4_t *)(v130 + 112);
                int8x16_t v255 = *(int8x16_t *)v130;
                float32x4_t v256 = v135;
                float32x4_t v263 = v134;
                float32x4_t v264 = v136;
                float32x4_t v271 = v137;
                float32x4_t v272 = v139;
                float32x4_t v279 = v138;
                float32x4_t v280 = v140;
                uint64_t v132 = 128;
              }
              else if (v131 == 3)
              {
                float32x4_t v133 = vld1q_dup_f32((const float *)v130);
                int8x16_t v255 = (int8x16_t)v133;
                float32x4_t v256 = v133;
                float32x4_t v263 = v133;
                float32x4_t v264 = v133;
                float32x4_t v271 = v133;
                float32x4_t v272 = v133;
                float32x4_t v279 = v133;
                float32x4_t v280 = v133;
                uint64_t v132 = 4;
              }
              else
              {
                uint64_t v132 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(&v255, 128, v130, v131);
              }
            }
            else
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(&v255, 128, v130, v131, v75);
              uint64_t v132 = 64;
            }
          }
          else
          {
            uint64_t v132 = 0;
            int8x16_t v255 = 0u;
            float32x4_t v256 = 0u;
            float32x4_t v263 = 0u;
            float32x4_t v264 = 0u;
            float32x4_t v271 = 0u;
            float32x4_t v272 = 0u;
            float32x4_t v279 = 0u;
            float32x4_t v280 = 0u;
          }
          unint64_t v141 = v130 + v132;
          unsigned int v142 = v68[6];
          if (v68[6])
          {
            if (v142 < 0xF0)
            {
              if (v142 == 127)
              {
                float32x4_t v145 = *(float32x4_t *)(v141 + 16);
                float32x4_t v146 = *(float32x4_t *)(v141 + 32);
                float32x4_t v147 = *(float32x4_t *)(v141 + 48);
                float32x4_t v148 = *(float32x4_t *)(v141 + 64);
                float32x4_t v149 = *(float32x4_t *)(v141 + 80);
                float32x4_t v150 = *(float32x4_t *)(v141 + 96);
                float32x4_t v151 = *(float32x4_t *)(v141 + 112);
                int8x16_t v285 = *(int8x16_t *)v141;
                float32x4_t v286 = v146;
                float32x4_t v293 = v145;
                float32x4_t v294 = v147;
                float32x4_t v301 = v148;
                float32x4_t v302 = v150;
                float32x4_t v309 = v149;
                float32x4_t v310 = v151;
                uint64_t v143 = 128;
              }
              else if (v142 == 3)
              {
                float32x4_t v144 = vld1q_dup_f32((const float *)v141);
                int8x16_t v285 = (int8x16_t)v144;
                float32x4_t v286 = v144;
                float32x4_t v293 = v144;
                float32x4_t v294 = v144;
                float32x4_t v301 = v144;
                float32x4_t v302 = v144;
                float32x4_t v309 = v144;
                float32x4_t v310 = v144;
                uint64_t v143 = 4;
              }
              else
              {
                uint64_t v143 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(&v285, 128, v141, v142);
              }
            }
            else
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(&v285, 128, v141, v142, v75);
              uint64_t v143 = 64;
            }
          }
          else
          {
            uint64_t v143 = 0;
            int8x16_t v285 = 0u;
            float32x4_t v286 = 0u;
            float32x4_t v293 = 0u;
            float32x4_t v294 = 0u;
            float32x4_t v301 = 0u;
            float32x4_t v302 = 0u;
            float32x4_t v309 = 0u;
            float32x4_t v310 = 0u;
          }
          v152 = v72;
          unsigned int v153 = v68[7];
          if (!v68[7])
          {
            int8x16_t v287 = 0u;
            float32x4_t v288 = 0u;
            float32x4_t v295 = 0u;
            float32x4_t v296 = 0u;
            float32x4_t v303 = 0u;
            float32x4_t v304 = 0u;
            float32x4_t v311 = 0u;
            float32x4_t v312 = 0u;
LABEL_162:
            a7 = v222;
            uint64_t v155 = v244;
            if (!v244) {
              goto LABEL_201;
            }
            goto LABEL_163;
          }
          unint64_t v154 = v141 + v143;
          if (v153 >= 0xF0)
          {
            AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(&v287, 128, v154, v153, v75);
            goto LABEL_162;
          }
          a7 = v222;
          if (v153 == 127)
          {
            float32x4_t v191 = *(float32x4_t *)(v154 + 16);
            float32x4_t v192 = *(float32x4_t *)(v154 + 32);
            float32x4_t v193 = *(float32x4_t *)(v154 + 48);
            float32x4_t v194 = *(float32x4_t *)(v154 + 80);
            float32x4_t v195 = *(float32x4_t *)(v154 + 96);
            float32x4_t v196 = *(float32x4_t *)(v154 + 112);
            float32x4_t v197 = *(float32x4_t *)(v154 + 64);
            int8x16_t v287 = *(int8x16_t *)v154;
            float32x4_t v288 = v192;
            float32x4_t v295 = v191;
            float32x4_t v296 = v193;
            float32x4_t v303 = v197;
            float32x4_t v304 = v195;
            float32x4_t v311 = v194;
            float32x4_t v312 = v196;
            uint64_t v155 = v244;
            if (!v244) {
              goto LABEL_201;
            }
          }
          else if (v153 == 3)
          {
            float32x4_t v190 = vld1q_dup_f32((const float *)v154);
            int8x16_t v287 = (int8x16_t)v190;
            float32x4_t v288 = v190;
            float32x4_t v295 = v190;
            float32x4_t v296 = v190;
            float32x4_t v303 = v190;
            float32x4_t v304 = v190;
            float32x4_t v311 = v190;
            float32x4_t v312 = v190;
            uint64_t v155 = v244;
            if (!v244) {
              goto LABEL_201;
            }
          }
          else
          {
            AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(&v287, 128, v154, v153);
            uint64_t v155 = v244;
            if (!v244) {
              goto LABEL_201;
            }
          }
LABEL_163:
          if (v245)
          {
            uint64_t v156 = 0;
            unint64_t v157 = (unint64_t)v242 << 7;
            uint64_t v158 = 8 * v243;
            v159 = &v249.i8[v157 + v158];
            uint64_t v160 = v240;
            uint64_t v161 = v241;
            unint64_t v162 = 8 * v245;
            if (v162 <= 1) {
              unint64_t v163 = 1;
            }
            else {
              unint64_t v163 = 8 * v245;
            }
            unint64_t v164 = v157 + v158;
            v165 = &v249.i8[v157 + v158];
            if (v163) {
              BOOL v166 = (v163 - 1) >> 32 == 0;
            }
            else {
              BOOL v166 = 0;
            }
            char v167 = !v166;
            uint64_t v168 = v163 & 0x7FFFFFFE0;
            uint64_t v169 = v163 & 0x7FFFFFFF8;
            v170 = (char *)&v250 + v164;
            v171 = (long long *)(v240 + 16);
            v172 = v159;
            uint64_t v173 = v240;
            do
            {
              v174 = (char *)(v160 + v161 * v156);
              v175 = &v159[128 * v156];
              if ((unint64_t)(&v165[128 * v156] - v174) < 0x20) {
                char v176 = 1;
              }
              else {
                char v176 = v167;
              }
              if (v176)
              {
                int v177 = 0;
                goto LABEL_191;
              }
              if (v163 >= 0x20)
              {
                v179 = v171;
                v180 = v170;
                uint64_t v181 = v163 & 0x7FFFFFFE0;
                do
                {
                  long long v182 = *v179;
                  *(v180 - 1) = *(v179 - 1);
                  _OWORD *v180 = v182;
                  v180 += 2;
                  v179 += 2;
                  v181 -= 32;
                }
                while (v181);
                if (v163 == v168) {
                  goto LABEL_174;
                }
                uint64_t v178 = v163 & 0x7FFFFFFE0;
                if ((v163 & 0x18) == 0)
                {
                  v174 += v168;
                  v175 += v168;
                  int v177 = v163 & 0xFFFFFFE0;
                  goto LABEL_191;
                }
              }
              else
              {
                uint64_t v178 = 0;
              }
              v175 += v169;
              unint64_t v183 = v178 - (v163 & 0x7FFFFFFF8);
              v184 = (uint64_t *)(v173 + v178);
              v185 = &v172[v178];
              do
              {
                uint64_t v186 = *v184++;
                *(void *)v185 = v186;
                v185 += 8;
                v183 += 8;
              }
              while (v183);
              if (v163 == v169) {
                goto LABEL_174;
              }
              v174 += v169;
              int v177 = v163 & 0xFFFFFFF8;
LABEL_191:
              unsigned int v187 = v177 + 1;
              do
              {
                char v188 = *v174++;
                *v175++ = v188;
              }
              while (v162 > v187++);
LABEL_174:
              ++v156;
              v170 += 128;
              v171 = (long long *)((char *)v171 + v161);
              v173 += v161;
              v172 += 128;
            }
            while (v156 != v155);
          }
LABEL_201:
          AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::compressMacroblock((uint64_t)&v249, 128, (unint64_t)v238, v239, v246, v247, *(_DWORD *)(*(void *)(v233 + 208) + 52));
          v72 = v152;
LABEL_202:
          result = v234;
          if (v235) {
            result = memcpy(v234, v72, 0x400uLL);
          }
          BOOL v23 = v33 == v223 >> 4;
          unsigned int v33 = v73;
          uint64_t v28 = v233;
        }
        while (!v23);
        BOOL v23 = v18++ == v216;
      }
      while (!v23);
    }
  }
  return result;
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>,false,(AGXHardwareTextureMemoryOrder)2>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, int a12)
{
  uint64_t v227 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  uint64_t v17 = a1;
  unsigned int v176 = a8;
  unsigned int v18 = a8 >> 3;
  unsigned int v160 = a8 + a10 - 1;
  unsigned int v162 = v160 >> 3;
  unsigned int v19 = *(unsigned __int8 *)(*(void *)(a1 + 208) + 88);
  unsigned int v20 = *(_DWORD *)(a1 + 112);
  uint64_t v179 = v17;
  if (*(void *)(v17 + 168))
  {
    __int16 CacheMode = IOSurfaceGetCacheMode();
    uint64_t v17 = v179;
    int v22 = CacheMode & 0xF00;
  }
  else
  {
    int v22 = 0;
  }
  BOOL v23 = (v22 & 0xD00) == 0 || v22 == 768;
  int v24 = v22 & 0xE00;
  int v26 = !v23 && v24 != 1024;
  int v181 = v26;
  BOOL isLevelTiled = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::isLevelTiled(v17, *(_DWORD *)(v17 + 144) + a12);
  uint64_t v29 = v179;
  BOOL v170 = isLevelTiled;
  if (v18 <= v162)
  {
    unsigned int v169 = a7 + a9 - 1;
    unsigned int v159 = a7 >> 4;
    if (a7 >> 4 <= v169 >> 4)
    {
      unsigned int v156 = a5 - 1;
      unsigned int v178 = (a5 - 1) >> 4;
      int v177 = ((a5 - 1) & 0xF) + 1;
      int v157 = ((a6 - 1) & 7) + 1;
      unsigned int v158 = (a6 - 1) >> 3;
      uint32x2_t v30 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0xF00000007);
      v31.i64[0] = 0x2000000020;
      *(int32x2_t *)v32.i8 = vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32(vadd_s32((int32x2_t)vshl_u32(v30, (uint32x2_t)0xFFFFFFFCFFFFFFFDLL), (int32x2_t)-1)))))));
      v33.i64[0] = 0x2000000010;
      *(int8x8_t *)v34.i8 = vbic_s8(*(int8x8_t *)v32.i8, (int8x8_t)vcgt_u32((uint32x2_t)0x2000000010, v30));
      __int32 v167 = v34.i32[0] | v34.i32[1];
      uint64_t v166 = v34.i64[0];
      BOOL v165 = v34.i32[0] != 0;
      BOOL v164 = v34.i32[1] != 0;
      unint64_t v155 = 8 * v20 * (unint64_t)v19;
      unsigned int v168 = a7;
      do
      {
        unsigned int v35 = (8 * v18) | 7;
        if (8 * v18 <= v176) {
          int v36 = v176;
        }
        else {
          int v36 = 8 * v18;
        }
        unsigned int v37 = v159;
        if (v160 < v35) {
          unsigned int v35 = v160;
        }
        unsigned int v175 = 8 * v18;
        int v163 = v36 - 8 * v18;
        int v174 = v35 - v36 + 1;
        int v38 = v157;
        if (v18 != v158) {
          int v38 = 8;
        }
        unsigned int v182 = v38;
        uint64_t v173 = a3 + (v36 - v176) * a11;
        do
        {
          unsigned int v39 = 16 * v37;
          unsigned int v40 = 16 * (v37 + 1) - 1;
          if (16 * v37 <= a7) {
            int v41 = a7;
          }
          else {
            int v41 = 16 * v37;
          }
          if (v169 < v40) {
            unsigned int v40 = v169;
          }
          int v42 = v40 - v41 + 1;
          if (v37 == v178) {
            unsigned int v43 = v177;
          }
          else {
            unsigned int v43 = 16;
          }
          BOOL v44 = 1;
          if (v175 >= v176 && v39 >= a7)
          {
            int v45 = v177;
            if (v37 != v178) {
              int v45 = 16;
            }
            BOOL v44 = v42 != v45 || v174 != v182;
          }
          if (v170)
          {
            unsigned int v66 = 0;
            uint64_t v67 = v155 >> (*(unsigned char *)(v29 + 57) != 0);
            char v68 = 1;
            if (v67 > 127)
            {
              if (v67 > 511)
              {
                if (v67 == 512)
                {
                  char v69 = 0;
                  unsigned int v66 = 16;
                  unsigned int v70 = 16;
                }
                else
                {
                  char v69 = 1;
                  unsigned int v70 = 0;
                  if (v67 == 1024)
                  {
                    unsigned int v70 = 8;
                    unsigned int v66 = 16;
                  }
                }
              }
              else if (v67 == 128)
              {
                char v68 = 0;
                char v69 = 0;
                unsigned int v66 = 32;
                unsigned int v70 = 32;
              }
              else
              {
                char v69 = 1;
                unsigned int v70 = 0;
                if (v67 == 256)
                {
                  char v68 = 0;
                  char v69 = 0;
                  unsigned int v70 = 16;
                  unsigned int v66 = 32;
                }
              }
            }
            else
            {
              char v69 = 1;
              unsigned int v70 = 0;
              switch(v67)
              {
                case 4:
                  char v68 = 0;
                  char v69 = 0;
                  unsigned int v70 = 128;
                  unsigned int v66 = 256;
                  break;
                case 5:
                case 6:
                case 7:
                case 9:
                case 10:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 17:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                  break;
                case 8:
                  char v68 = 0;
                  char v69 = 0;
                  unsigned int v66 = 128;
                  unsigned int v70 = 128;
                  break;
                case 16:
                  char v68 = 0;
                  char v69 = 0;
                  unsigned int v70 = 64;
                  unsigned int v66 = 128;
                  break;
                case 32:
                  char v68 = 0;
                  char v69 = 0;
                  unsigned int v66 = 64;
                  unsigned int v70 = 64;
                  break;
                default:
                  if (v67 == 64)
                  {
                    char v68 = 0;
                    char v69 = 0;
                    unsigned int v70 = 32;
                    unsigned int v66 = 64;
                  }
                  break;
              }
            }
            unsigned int v144 = (v66 >> 4) - 1;
            if (v68) {
              unsigned int v145 = 0;
            }
            else {
              unsigned int v145 = 32 - __clz(~(-1 << -(char)__clz(v144)));
            }
            unsigned int v146 = (v70 >> 3) - 1;
            if (v69)
            {
              unsigned int v147 = 0;
              if (v145) {
                goto LABEL_227;
              }
            }
            else
            {
              unsigned int v147 = 32 - __clz(~(-1 << -(char)__clz(v146)));
              if (v147 | v145)
              {
LABEL_227:
                int v148 = 0;
                uint64_t v149 = 0;
                int v150 = v37 & v144;
                int v151 = v18 & v146;
                BOOL v152 = v147 != 0;
                BOOL v153 = v145 != 0;
                int v154 = 1;
                do
                {
                  --v147;
                  if (v152) {
                    v149 |= (unint64_t)(v154 & v151) << v148++;
                  }
                  else {
                    unsigned int v147 = 0;
                  }
                  --v145;
                  if (v153) {
                    v149 |= (unint64_t)(v154 & v150) << v148++;
                  }
                  else {
                    unsigned int v145 = 0;
                  }
                  v154 *= 2;
                  --v148;
                  BOOL v153 = v145 != 0;
                  BOOL v152 = v147 != 0;
                }
                while (v145 | v147);
                goto LABEL_239;
              }
            }
            uint64_t v149 = 0;
LABEL_239:
            unint64_t v54 = ((unint64_t)(v39 / v66 + v175 / v70 * ((v66 + v156) / v66)) << 14) + (v149 << 8);
            goto LABEL_58;
          }
          if (v167)
          {
            int v47 = 0;
            uint64_t v48 = 0;
            int v49 = 1;
            BOOL v50 = v165;
            BOOL v51 = v164;
            int v52 = v166;
            int v53 = HIDWORD(v166);
            do
            {
              --v52;
              if (v50) {
                v48 |= (unint64_t)(v49 & v18) << v47++;
              }
              else {
                int v52 = 0;
              }
              --v53;
              if (v51) {
                v48 |= (unint64_t)(v49 & v37) << v47++;
              }
              else {
                int v53 = 0;
              }
              v49 *= 2;
              --v47;
              BOOL v51 = v53 != 0;
              BOOL v50 = v52 != 0;
            }
            while (v53 | v52);
          }
          else
          {
            uint64_t v48 = 0;
          }
          unint64_t v54 = v48 << 8;
LABEL_58:
          unsigned int v55 = *(_DWORD *)(v29 + 128) >> (*(unsigned char *)(v29 + 144) + a12);
          if (v55 <= 1) {
            unsigned int v55 = 1;
          }
          unsigned int v56 = v55 + 15;
          if (v56 < 0x20) {
            unsigned int v57 = 0;
          }
          else {
            unsigned int v57 = 32 - __clz(~(-1 << -(char)__clz((v56 >> 4) - 1)));
          }
          unsigned int v58 = *(_DWORD *)(v29 + 132) >> (*(unsigned char *)(v29 + 144) + a12);
          if (v58 <= 1) {
            unsigned int v58 = 1;
          }
          unsigned int v59 = v58 + 7;
          if (v59 < 0x10)
          {
            unsigned int v60 = 0;
            if (!v57)
            {
LABEL_80:
              uint64_t v62 = 0;
              goto LABEL_81;
            }
          }
          else
          {
            unsigned int v60 = 32 - __clz(~(-1 << -(char)__clz((v59 >> 3) - 1)));
            if (!(v60 | v57)) {
              goto LABEL_80;
            }
          }
          int v61 = 0;
          uint64_t v62 = 0;
          BOOL v63 = v57 != 0;
          BOOL v64 = v60 != 0;
          int v65 = 1;
          do
          {
            --v57;
            if (v63) {
              v62 |= (unint64_t)(v65 & v37) << v61++;
            }
            else {
              unsigned int v57 = 0;
            }
            --v60;
            if (v64) {
              v62 |= (unint64_t)(v65 & v18) << v61++;
            }
            else {
              unsigned int v60 = 0;
            }
            v65 *= 2;
            --v61;
            BOOL v64 = v60 != 0;
            BOOL v63 = v57 != 0;
          }
          while (v60 | v57);
LABEL_81:
          int v71 = v43 < 0x10 || v44;
          v72 = (unsigned __int8 *)(a4 + 8 * v62);
          unint64_t v73 = v173 + 4 * (v41 - a7);
          uint64_t v74 = (unsigned char *)(a2 + v54);
          if (v182 < 8) {
            int v75 = 1;
          }
          else {
            int v75 = v71;
          }
          __src = v74;
          if (v181)
          {
            uint64_t v74 = __dst;
            if (!v75) {
              goto LABEL_93;
            }
            memcpy(__dst, __src, sizeof(__dst));
            uint64_t v29 = v179;
          }
          else if (!v75)
          {
LABEL_93:
            AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::compressMacroblock(v73, a11, (unint64_t)v74, v72, v43, v182, *(_DWORD *)(*(void *)(v29 + 208) + 52), *(double *)v34.i64, *(double *)v32.i64, *(double *)v33.i64, *(double *)v31.i64, *(int16x4_t *)v28.i8);
            goto LABEL_94;
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE3ELj2ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint3EEELb0EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = v29;
          v184 = v74;
          unsigned __int8 v192 = v43;
          unsigned __int8 v193 = v182;
          unsigned int v188 = v163;
          unsigned int v189 = v41 - v39;
          v185 = v72;
          unint64_t v186 = v73;
          uint64_t v187 = a11;
          unsigned int v190 = v174;
          unsigned int v191 = v42;
          if (v44)
          {
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(v29 + 8) + 7384), block);
LABEL_94:
            a7 = v168;
            unsigned int v76 = v37 + 1;
            goto LABEL_207;
          }
          uint64_t v77 = *(void *)(v29 + 208);
          int v78 = *(_DWORD *)(v77 + 52);
          unsigned int v79 = *v72;
          if (*v72)
          {
            if (v79 < 0xF0)
            {
              if (v79 == 63)
              {
                int64x2_t v32 = *((int64x2_t *)v74 + 1);
                float32x4_t v81 = (const double *)(v74 + 32);
                *(float64x2x2_t *)v33.i8 = vld2q_f64(v81);
                int64x2_t v28 = vzip1q_s64(*(int64x2_t *)v74, v32);
                int64x2_t v34 = vzip2q_s64(*(int64x2_t *)v74, v32);
                int64x2_t v195 = v28;
                int64x2_t v199 = v34;
                int64x2_t v203 = v33;
                int64x2_t v207 = v31;
                uint64_t v80 = 64;
                unsigned int v76 = v37 + 1;
              }
              else
              {
                unsigned int v76 = v37 + 1;
                if (v79 == 1)
                {
                  int64x2_t v34 = (int64x2_t)vld1q_dup_s16((const __int16 *)v74);
                  int64x2_t v195 = v34;
                  int64x2_t v199 = v34;
                  int64x2_t v203 = v34;
                  int64x2_t v207 = v34;
                  uint64_t v80 = 2;
                }
                else
                {
                  uint64_t v80 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(&v195, 64, (uint64_t)v74, v79, *(double *)v34.i64, *(double *)v32.i64, *(double *)v33.i64, *(int8x8_t *)v31.i8);
                }
              }
            }
            else
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(v195.i16, 64, (uint64_t)v74, v79, *(_DWORD *)(v77 + 52));
              uint64_t v80 = 32;
              unsigned int v76 = v37 + 1;
            }
          }
          else
          {
            uint64_t v80 = 0;
            int64x2_t v195 = 0uLL;
            int64x2_t v199 = 0uLL;
            int64x2_t v203 = 0uLL;
            int64x2_t v207 = 0uLL;
            unsigned int v76 = v37 + 1;
          }
          uint64_t v82 = (uint64_t)&v74[v80];
          unsigned int v83 = v72[1];
          if (v72[1])
          {
            if (v83 < 0xF0)
            {
              if (v83 == 63)
              {
                int64x2_t v32 = *(int64x2_t *)(v82 + 16);
                float32x4_t v85 = (const double *)(v82 + 32);
                *(float64x2x2_t *)v33.i8 = vld2q_f64(v85);
                int64x2_t v28 = vzip1q_s64(*(int64x2_t *)v82, v32);
                int64x2_t v34 = vzip2q_s64(*(int64x2_t *)v82, v32);
                int64x2_t v196 = v28;
                int64x2_t v200 = v34;
                int64x2_t v204 = v33;
                int64x2_t v208 = v31;
                uint64_t v84 = 64;
              }
              else if (v83 == 1)
              {
                int64x2_t v34 = (int64x2_t)vld1q_dup_s16((const __int16 *)v82);
                int64x2_t v196 = v34;
                int64x2_t v200 = v34;
                int64x2_t v204 = v34;
                int64x2_t v208 = v34;
                uint64_t v84 = 2;
              }
              else
              {
                uint64_t v84 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(&v196, 64, v82, v83, *(double *)v34.i64, *(double *)v32.i64, *(double *)v33.i64, *(int8x8_t *)v31.i8);
              }
            }
            else
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(v196.i16, 64, v82, v83, v78);
              uint64_t v84 = 32;
            }
          }
          else
          {
            uint64_t v84 = 0;
            int64x2_t v196 = 0uLL;
            int64x2_t v200 = 0uLL;
            int64x2_t v204 = 0uLL;
            int64x2_t v208 = 0uLL;
          }
          uint64_t v86 = v82 + v84;
          unsigned int v87 = v72[2];
          if (v72[2])
          {
            if (v87 < 0xF0)
            {
              if (v87 == 63)
              {
                int64x2_t v32 = *(int64x2_t *)(v86 + 16);
                float32x4_t v89 = (const double *)(v86 + 32);
                *(float64x2x2_t *)v33.i8 = vld2q_f64(v89);
                int64x2_t v28 = vzip1q_s64(*(int64x2_t *)v86, v32);
                int64x2_t v34 = vzip2q_s64(*(int64x2_t *)v86, v32);
                int64x2_t v211 = v28;
                int64x2_t v215 = v34;
                int64x2_t v219 = v33;
                int64x2_t v223 = v31;
                uint64_t v88 = 64;
              }
              else if (v87 == 1)
              {
                int64x2_t v34 = (int64x2_t)vld1q_dup_s16((const __int16 *)v86);
                int64x2_t v211 = v34;
                int64x2_t v215 = v34;
                int64x2_t v219 = v34;
                int64x2_t v223 = v34;
                uint64_t v88 = 2;
              }
              else
              {
                uint64_t v88 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(&v211, 64, v86, v87, *(double *)v34.i64, *(double *)v32.i64, *(double *)v33.i64, *(int8x8_t *)v31.i8);
              }
            }
            else
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(v211.i16, 64, v86, v87, v78);
              uint64_t v88 = 32;
            }
          }
          else
          {
            uint64_t v88 = 0;
            int64x2_t v211 = 0uLL;
            int64x2_t v215 = 0uLL;
            int64x2_t v219 = 0uLL;
            int64x2_t v223 = 0uLL;
          }
          uint64_t v90 = v86 + v88;
          unsigned int v91 = v72[3];
          if (v72[3])
          {
            if (v91 < 0xF0)
            {
              if (v91 == 63)
              {
                int64x2_t v32 = *(int64x2_t *)(v90 + 16);
                float32x4_t v93 = (const double *)(v90 + 32);
                *(float64x2x2_t *)v33.i8 = vld2q_f64(v93);
                int64x2_t v28 = vzip1q_s64(*(int64x2_t *)v90, v32);
                int64x2_t v34 = vzip2q_s64(*(int64x2_t *)v90, v32);
                int64x2_t v212 = v28;
                int64x2_t v216 = v34;
                int64x2_t v220 = v33;
                int64x2_t v224 = v31;
                uint64_t v92 = 64;
              }
              else if (v91 == 1)
              {
                int64x2_t v34 = (int64x2_t)vld1q_dup_s16((const __int16 *)v90);
                int64x2_t v212 = v34;
                int64x2_t v216 = v34;
                int64x2_t v220 = v34;
                int64x2_t v224 = v34;
                uint64_t v92 = 2;
              }
              else
              {
                uint64_t v92 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(&v212, 64, v90, v91, *(double *)v34.i64, *(double *)v32.i64, *(double *)v33.i64, *(int8x8_t *)v31.i8);
              }
            }
            else
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(v212.i16, 64, v90, v91, v78);
              uint64_t v92 = 32;
            }
          }
          else
          {
            uint64_t v92 = 0;
            int64x2_t v212 = 0uLL;
            int64x2_t v216 = 0uLL;
            int64x2_t v220 = 0uLL;
            int64x2_t v224 = 0uLL;
          }
          uint64_t v94 = v90 + v92;
          unsigned int v95 = v72[4];
          if (v72[4])
          {
            if (v95 < 0xF0)
            {
              if (v95 == 63)
              {
                int64x2_t v32 = *(int64x2_t *)(v94 + 16);
                unint64_t v97 = (const double *)(v94 + 32);
                *(float64x2x2_t *)v33.i8 = vld2q_f64(v97);
                int64x2_t v28 = vzip1q_s64(*(int64x2_t *)v94, v32);
                int64x2_t v34 = vzip2q_s64(*(int64x2_t *)v94, v32);
                int64x2_t v197 = v28;
                int64x2_t v201 = v34;
                int64x2_t v205 = v33;
                int64x2_t v209 = v31;
                uint64_t v96 = 64;
              }
              else if (v95 == 1)
              {
                int64x2_t v34 = (int64x2_t)vld1q_dup_s16((const __int16 *)v94);
                int64x2_t v197 = v34;
                int64x2_t v201 = v34;
                int64x2_t v205 = v34;
                int64x2_t v209 = v34;
                uint64_t v96 = 2;
              }
              else
              {
                uint64_t v96 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(&v197, 64, v94, v95, *(double *)v34.i64, *(double *)v32.i64, *(double *)v33.i64, *(int8x8_t *)v31.i8);
              }
            }
            else
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(v197.i16, 64, v94, v95, v78);
              uint64_t v96 = 32;
            }
          }
          else
          {
            uint64_t v96 = 0;
            int64x2_t v197 = 0uLL;
            int64x2_t v201 = 0uLL;
            int64x2_t v205 = 0uLL;
            int64x2_t v209 = 0uLL;
          }
          uint64_t v98 = v94 + v96;
          unsigned int v99 = v72[5];
          if (v72[5])
          {
            if (v99 < 0xF0)
            {
              if (v99 == 63)
              {
                int64x2_t v32 = *(int64x2_t *)(v98 + 16);
                float32x4_t v101 = (const double *)(v98 + 32);
                *(float64x2x2_t *)v33.i8 = vld2q_f64(v101);
                int64x2_t v28 = vzip1q_s64(*(int64x2_t *)v98, v32);
                int64x2_t v34 = vzip2q_s64(*(int64x2_t *)v98, v32);
                int64x2_t v198 = v28;
                int64x2_t v202 = v34;
                int64x2_t v206 = v33;
                int64x2_t v210 = v31;
                uint64_t v100 = 64;
              }
              else if (v99 == 1)
              {
                int64x2_t v34 = (int64x2_t)vld1q_dup_s16((const __int16 *)v98);
                int64x2_t v198 = v34;
                int64x2_t v202 = v34;
                int64x2_t v206 = v34;
                int64x2_t v210 = v34;
                uint64_t v100 = 2;
              }
              else
              {
                uint64_t v100 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(&v198, 64, v98, v99, *(double *)v34.i64, *(double *)v32.i64, *(double *)v33.i64, *(int8x8_t *)v31.i8);
              }
            }
            else
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(v198.i16, 64, v98, v99, v78);
              uint64_t v100 = 32;
            }
          }
          else
          {
            uint64_t v100 = 0;
            int64x2_t v198 = 0uLL;
            int64x2_t v202 = 0uLL;
            int64x2_t v206 = 0uLL;
            int64x2_t v210 = 0uLL;
          }
          uint64_t v102 = v98 + v100;
          unsigned int v103 = v72[6];
          if (v72[6])
          {
            if (v103 < 0xF0)
            {
              if (v103 == 63)
              {
                int64x2_t v32 = *(int64x2_t *)(v102 + 16);
                unsigned int v142 = (const double *)(v102 + 32);
                *(float64x2x2_t *)v33.i8 = vld2q_f64(v142);
                int64x2_t v28 = vzip1q_s64(*(int64x2_t *)v102, v32);
                int64x2_t v34 = vzip2q_s64(*(int64x2_t *)v102, v32);
                int64x2_t v213 = v28;
                int64x2_t v217 = v34;
                int64x2_t v221 = v33;
                int64x2_t v225 = v31;
                uint64_t v104 = 64;
                unsigned int v105 = v72[7];
                if (!v72[7]) {
                  goto LABEL_152;
                }
              }
              else if (v103 == 1)
              {
                int64x2_t v34 = (int64x2_t)vld1q_dup_s16((const __int16 *)v102);
                int64x2_t v213 = v34;
                int64x2_t v217 = v34;
                int64x2_t v221 = v34;
                int64x2_t v225 = v34;
                uint64_t v104 = 2;
                unsigned int v105 = v72[7];
                if (!v72[7]) {
                  goto LABEL_152;
                }
              }
              else
              {
                uint64_t v104 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(&v213, 64, v102, v103, *(double *)v34.i64, *(double *)v32.i64, *(double *)v33.i64, *(int8x8_t *)v31.i8);
                unsigned int v105 = v72[7];
                if (!v72[7])
                {
LABEL_152:
                  int64x2_t v214 = 0uLL;
                  int64x2_t v218 = 0uLL;
                  int64x2_t v222 = 0uLL;
                  int64x2_t v226 = 0uLL;
                  goto LABEL_156;
                }
              }
            }
            else
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(v213.i16, 64, v102, v103, v78);
              uint64_t v104 = 32;
              unsigned int v105 = v72[7];
              if (!v72[7]) {
                goto LABEL_152;
              }
            }
          }
          else
          {
            uint64_t v104 = 0;
            int64x2_t v213 = 0uLL;
            int64x2_t v217 = 0uLL;
            int64x2_t v221 = 0uLL;
            int64x2_t v225 = 0uLL;
            unsigned int v105 = v72[7];
            if (!v72[7]) {
              goto LABEL_152;
            }
          }
          uint64_t v106 = v102 + v104;
          if (v105 >= 0xF0)
          {
            AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(v214.i16, 64, v106, v105, v78);
LABEL_156:
            a7 = v168;
            uint64_t v107 = v190;
            if (!v190) {
              goto LABEL_206;
            }
            goto LABEL_157;
          }
          a7 = v168;
          if (v105 == 63)
          {
            int64x2_t v32 = *(int64x2_t *)(v106 + 16);
            uint64_t v143 = (const double *)(v106 + 32);
            *(float64x2x2_t *)v33.i8 = vld2q_f64(v143);
            int64x2_t v28 = vzip1q_s64(*(int64x2_t *)v106, v32);
            int64x2_t v34 = vzip2q_s64(*(int64x2_t *)v106, v32);
            int64x2_t v214 = v28;
            int64x2_t v218 = v34;
            int64x2_t v222 = v33;
            int64x2_t v226 = v31;
            uint64_t v107 = v190;
            if (!v190) {
              goto LABEL_206;
            }
          }
          else if (v105 == 1)
          {
            int64x2_t v34 = (int64x2_t)vld1q_dup_s16((const __int16 *)v106);
            int64x2_t v214 = v34;
            int64x2_t v218 = v34;
            int64x2_t v222 = v34;
            int64x2_t v226 = v34;
            uint64_t v107 = v190;
            if (!v190) {
              goto LABEL_206;
            }
          }
          else
          {
            AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(&v214, 64, v106, v105, *(double *)v34.i64, *(double *)v32.i64, *(double *)v33.i64, *(int8x8_t *)v31.i8);
            uint64_t v107 = v190;
            if (!v190) {
              goto LABEL_206;
            }
          }
LABEL_157:
          if (v191)
          {
            uint64_t v108 = 0;
            unint64_t v109 = (unint64_t)v188 << 6;
            uint64_t v110 = 4 * v189;
            float32x4_t v111 = &v195.i8[v109 + v110];
            unint64_t v112 = v186;
            uint64_t v113 = v187;
            unint64_t v114 = 4 * v191;
            if (v114 <= 1) {
              unint64_t v115 = 1;
            }
            else {
              unint64_t v115 = 4 * v191;
            }
            unint64_t v116 = v109 + v110;
            float32x4_t v117 = &v195.i8[v109 + v110];
            if (v115) {
              BOOL v118 = (v115 - 1) >> 32 == 0;
            }
            else {
              BOOL v118 = 0;
            }
            uint64_t v119 = v115 & 0x3FFFFFFE0;
            uint64_t v120 = v115 & 0x3FFFFFFF8;
            char v122 = !v118 || v115 < 8;
            float32x4_t v123 = &v196.i8[v116];
            float32x4_t v124 = (int64x2_t *)(v186 + 16);
            float32x4_t v125 = v111;
            unint64_t v126 = v186;
            do
            {
              float32x4_t v127 = (char *)(v112 + v113 * v108);
              float32x4_t v128 = &v111[64 * v108];
              if ((unint64_t)(&v117[64 * v108] - v127) < 0x20) {
                char v129 = 1;
              }
              else {
                char v129 = v122;
              }
              if (v129)
              {
                int v130 = 0;
                goto LABEL_188;
              }
              if (v115 >= 0x20)
              {
                uint64_t v132 = v124;
                float32x4_t v133 = (int64x2_t *)v123;
                uint64_t v134 = v115 & 0x3FFFFFFE0;
                do
                {
                  int64x2_t v34 = v132[-1];
                  int64x2_t v32 = *v132;
                  v133[-1] = v34;
                  *float32x4_t v133 = v32;
                  v133 += 2;
                  v132 += 2;
                  v134 -= 32;
                }
                while (v134);
                if (v115 == v119) {
                  goto LABEL_171;
                }
                uint64_t v131 = v115 & 0x3FFFFFFE0;
                if ((v115 & 0x18) == 0)
                {
                  v127 += v119;
                  v128 += v119;
                  int v130 = v115 & 0xFFFFFFE0;
                  goto LABEL_188;
                }
              }
              else
              {
                uint64_t v131 = 0;
              }
              v128 += v120;
              uint64_t v135 = v131 - v120;
              float32x4_t v136 = (uint64_t *)(v126 + v131);
              float32x4_t v137 = (uint64_t *)&v125[v131];
              do
              {
                uint64_t v138 = *v136++;
                v34.i64[0] = v138;
                *v137++ = v138;
                v135 += 8;
              }
              while (v135);
              if (v115 == v120) {
                goto LABEL_171;
              }
              v127 += v120;
              int v130 = v115 & 0xFFFFFFF8;
LABEL_188:
              unsigned int v139 = v130 + 1;
              do
              {
                char v140 = *v127++;
                *v128++ = v140;
              }
              while (v114 > v139++);
LABEL_171:
              ++v108;
              v123 += 64;
              float32x4_t v124 = (int64x2_t *)((char *)v124 + v113);
              v126 += v113;
              v125 += 64;
            }
            while (v108 != v107);
          }
LABEL_206:
          AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::compressMacroblock((unint64_t)&v195, 64, (unint64_t)v184, v185, v192, v193, *(_DWORD *)(*(void *)(v179 + 208) + 52), *(double *)v34.i64, *(double *)v32.i64, *(double *)v33.i64, *(double *)v31.i64, *(int16x4_t *)v28.i8);
LABEL_207:
          if (v181) {
            memcpy(__src, v74, 0x200uLL);
          }
          BOOL v23 = v37 == v169 >> 4;
          unsigned int v37 = v76;
          uint64_t v29 = v179;
        }
        while (!v23);
        BOOL v23 = v18++ == v162;
      }
      while (!v23);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>,false,(AGXHardwareTextureMemoryOrder)2>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, int a12)
{
  v178[52] = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  uint64_t v17 = a1;
  unsigned int v153 = a8;
  unsigned int v18 = a8 >> 3;
  unsigned int v137 = a8 + a10 - 1;
  unsigned int v139 = v137 >> 3;
  unsigned int v19 = *(unsigned __int8 *)(*(void *)(a1 + 208) + 88);
  unsigned int v20 = *(_DWORD *)(a1 + 112);
  uint64_t v157 = v17;
  if (*(void *)(v17 + 168))
  {
    __int16 CacheMode = IOSurfaceGetCacheMode();
    uint64_t v17 = v157;
    int v22 = CacheMode & 0xF00;
  }
  else
  {
    int v22 = 0;
  }
  BOOL v23 = (v22 & 0xD00) == 0 || v22 == 768;
  int v24 = v22 & 0xE00;
  int v26 = !v23 && v24 != 1024;
  int v158 = v26;
  BOOL isLevelTiled = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::isLevelTiled(v17, *(_DWORD *)(v17 + 144) + a12);
  uint64_t v28 = v157;
  BOOL v147 = isLevelTiled;
  if (v18 <= v139)
  {
    unsigned int v146 = a7 + a9 - 1;
    unsigned int v136 = a7 >> 4;
    if (a7 >> 4 <= v146 >> 4)
    {
      unsigned int v133 = a5 - 1;
      unsigned int v135 = (a6 - 1) >> 3;
      int v155 = ((a5 - 1) & 0xF) + 1;
      unsigned int v156 = (a5 - 1) >> 4;
      int v134 = ((a6 - 1) & 7) + 1;
      uint32x2_t v29 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0xF00000007);
      int8x8_t v30 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32(vadd_s32((int32x2_t)vshl_u32(v29, (uint32x2_t)0xFFFFFFFCFFFFFFFDLL), (int32x2_t)-1))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x2000000010, v29));
      __int32 v144 = v30.i32[0] | v30.i32[1];
      int8x8_t v143 = v30;
      BOOL v141 = v30.i32[1] != 0;
      BOOL v142 = v30.i32[0] != 0;
      unint64_t v132 = 8 * v20 * (unint64_t)v19;
      unsigned int v145 = a7;
      do
      {
        unsigned int v31 = (8 * v18) | 7;
        if (8 * v18 <= v153) {
          int v32 = v153;
        }
        else {
          int v32 = 8 * v18;
        }
        unsigned int v33 = v136;
        if (v137 < v31) {
          unsigned int v31 = v137;
        }
        int v140 = v32 - 8 * v18;
        int v151 = v31 - v32 + 1;
        unsigned int v152 = 8 * v18;
        if (v18 == v135) {
          unsigned int v34 = v134;
        }
        else {
          unsigned int v34 = 8;
        }
        uint64_t v150 = a3 + (v32 - v153) * a11;
        unsigned int v154 = v34;
        do
        {
          unsigned int v35 = 16 * v33;
          unsigned int v36 = 16 * (v33 + 1) - 1;
          if (16 * v33 <= a7) {
            int v37 = a7;
          }
          else {
            int v37 = 16 * v33;
          }
          if (v146 < v36) {
            unsigned int v36 = v146;
          }
          int v38 = v36 - v37 + 1;
          if (v33 == v156) {
            unsigned int v39 = v155;
          }
          else {
            unsigned int v39 = 16;
          }
          BOOL v40 = 1;
          if (v152 >= v153 && v35 >= a7)
          {
            int v41 = v155;
            if (v33 != v156) {
              int v41 = 16;
            }
            BOOL v40 = v38 != v41 || v151 != v34;
          }
          if (v147)
          {
            unsigned int v62 = 0;
            uint64_t v63 = v132 >> (*(unsigned char *)(v28 + 57) != 0);
            char v64 = 1;
            if (v63 > 127)
            {
              if (v63 > 511)
              {
                if (v63 == 512)
                {
                  char v65 = 0;
                  unsigned int v62 = 16;
                  unsigned int v66 = 16;
                }
                else
                {
                  char v65 = 1;
                  unsigned int v66 = 0;
                  if (v63 == 1024)
                  {
                    unsigned int v66 = 8;
                    unsigned int v62 = 16;
                  }
                }
              }
              else if (v63 == 128)
              {
                char v64 = 0;
                char v65 = 0;
                unsigned int v62 = 32;
                unsigned int v66 = 32;
              }
              else
              {
                char v65 = 1;
                unsigned int v66 = 0;
                if (v63 == 256)
                {
                  char v64 = 0;
                  char v65 = 0;
                  unsigned int v66 = 16;
                  unsigned int v62 = 32;
                }
              }
            }
            else
            {
              char v65 = 1;
              unsigned int v66 = 0;
              switch(v63)
              {
                case 4:
                  char v64 = 0;
                  char v65 = 0;
                  unsigned int v66 = 128;
                  unsigned int v62 = 256;
                  break;
                case 5:
                case 6:
                case 7:
                case 9:
                case 10:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 17:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                  break;
                case 8:
                  char v64 = 0;
                  char v65 = 0;
                  unsigned int v62 = 128;
                  unsigned int v66 = 128;
                  break;
                case 16:
                  char v64 = 0;
                  char v65 = 0;
                  unsigned int v66 = 64;
                  unsigned int v62 = 128;
                  break;
                case 32:
                  char v64 = 0;
                  char v65 = 0;
                  unsigned int v62 = 64;
                  unsigned int v66 = 64;
                  break;
                default:
                  if (v63 == 64)
                  {
                    char v64 = 0;
                    char v65 = 0;
                    unsigned int v66 = 32;
                    unsigned int v62 = 64;
                  }
                  break;
              }
            }
            unsigned int v121 = (v62 >> 4) - 1;
            if (v64) {
              unsigned int v122 = 0;
            }
            else {
              unsigned int v122 = 32 - __clz(~(-1 << -(char)__clz(v121)));
            }
            unsigned int v123 = (v66 >> 3) - 1;
            if (v65)
            {
              unsigned int v124 = 0;
              if (v122) {
                goto LABEL_150;
              }
            }
            else
            {
              unsigned int v124 = 32 - __clz(~(-1 << -(char)__clz(v123)));
              if (v124 | v122)
              {
LABEL_150:
                int v125 = 0;
                uint64_t v126 = 0;
                int v127 = v33 & v121;
                int v128 = v18 & v123;
                BOOL v129 = v124 != 0;
                BOOL v130 = v122 != 0;
                int v131 = 1;
                do
                {
                  --v124;
                  if (v129) {
                    v126 |= (unint64_t)(v131 & v128) << v125++;
                  }
                  else {
                    unsigned int v124 = 0;
                  }
                  --v122;
                  if (v130) {
                    v126 |= (unint64_t)(v131 & v127) << v125++;
                  }
                  else {
                    unsigned int v122 = 0;
                  }
                  v131 *= 2;
                  --v125;
                  BOOL v130 = v122 != 0;
                  BOOL v129 = v124 != 0;
                }
                while (v122 | v124);
                goto LABEL_162;
              }
            }
            uint64_t v126 = 0;
LABEL_162:
            unint64_t v50 = ((unint64_t)(v35 / v62 + v152 / v66 * ((v62 + v133) / v62)) << 14) + (v126 << 9);
            goto LABEL_59;
          }
          if (v144)
          {
            int v43 = 0;
            uint64_t v44 = 0;
            int v45 = 1;
            BOOL v46 = v141;
            BOOL v47 = v142;
            __int32 v48 = v143.i32[0];
            __int32 v49 = v143.i32[1];
            do
            {
              --v48;
              if (v47) {
                v44 |= (unint64_t)(v45 & v18) << v43++;
              }
              else {
                __int32 v48 = 0;
              }
              --v49;
              if (v46) {
                v44 |= (unint64_t)(v45 & v33) << v43++;
              }
              else {
                __int32 v49 = 0;
              }
              v45 *= 2;
              --v43;
              BOOL v46 = v49 != 0;
              BOOL v47 = v48 != 0;
            }
            while (v49 | v48);
          }
          else
          {
            uint64_t v44 = 0;
          }
          unint64_t v50 = v44 << 9;
LABEL_59:
          unsigned int v51 = *(_DWORD *)(v28 + 128) >> (*(unsigned char *)(v28 + 144) + a12);
          if (v51 <= 1) {
            unsigned int v51 = 1;
          }
          unsigned int v52 = v51 + 15;
          if (v52 < 0x20) {
            unsigned int v53 = 0;
          }
          else {
            unsigned int v53 = 32 - __clz(~(-1 << -(char)__clz((v52 >> 4) - 1)));
          }
          unsigned int v54 = *(_DWORD *)(v28 + 132) >> (*(unsigned char *)(v28 + 144) + a12);
          if (v54 <= 1) {
            unsigned int v54 = 1;
          }
          unsigned int v55 = v54 + 7;
          if (v55 < 0x10)
          {
            unsigned int v56 = 0;
            if (!v53)
            {
LABEL_81:
              uint64_t v58 = 0;
              goto LABEL_82;
            }
          }
          else
          {
            unsigned int v56 = 32 - __clz(~(-1 << -(char)__clz((v55 >> 3) - 1)));
            if (!(v56 | v53)) {
              goto LABEL_81;
            }
          }
          int v57 = 0;
          uint64_t v58 = 0;
          BOOL v59 = v53 != 0;
          BOOL v60 = v56 != 0;
          int v61 = 1;
          do
          {
            --v53;
            if (v59) {
              v58 |= (unint64_t)(v61 & v33) << v57++;
            }
            else {
              unsigned int v53 = 0;
            }
            --v56;
            if (v60) {
              v58 |= (unint64_t)(v61 & v18) << v57++;
            }
            else {
              unsigned int v56 = 0;
            }
            v61 *= 2;
            --v57;
            BOOL v60 = v56 != 0;
            BOOL v59 = v53 != 0;
          }
          while (v56 | v53);
LABEL_82:
          int v67 = v39 < 0x10 || v40;
          char v68 = (unsigned __int8 *)(a4 + 8 * v58);
          uint64_t v69 = v150 + 8 * (v37 - a7);
          unsigned int v70 = (void *)(a2 + v50);
          if (v34 < 8) {
            int v71 = 1;
          }
          else {
            int v71 = v67;
          }
          if (v158)
          {
            if (!v71)
            {
              uint64_t v77 = __dst;
LABEL_95:
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::compressMacroblock(v69, a11, (unint64_t)v77, v68, v39, v34, *(_DWORD *)(*(void *)(v28 + 208) + 52));
              goto LABEL_96;
            }
            v72 = v70;
            char v73 = v39;
            uint64_t v74 = v70;
            int v75 = v38;
            int v76 = v37;
            memcpy(__dst, v72, sizeof(__dst));
            int v37 = v76;
            unsigned int v35 = 16 * v33;
            uint64_t v77 = __dst;
            int v38 = v75;
            unsigned int v70 = v74;
            LOBYTE(v39) = v73;
            LOBYTE(v34) = v154;
            uint64_t v28 = v157;
          }
          else
          {
            uint64_t v77 = v70;
            if (!v71) {
              goto LABEL_95;
            }
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE16ELj2ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint3EEELb0EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = v28;
          unsigned int v160 = v77;
          unsigned __int8 v168 = v39;
          unsigned __int8 v169 = v34;
          unsigned int v164 = v140;
          unsigned int v165 = v37 - v35;
          uint64_t v161 = v68;
          uint64_t v162 = v69;
          uint64_t v163 = a11;
          unsigned int v166 = v151;
          unsigned int v167 = v38;
          if (!v40)
          {
            int v78 = *(_DWORD *)(*(void *)(v28 + 208) + 52);
            uint64_t v79 = (uint64_t)&v77[AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressSubblock((uint64_t)v171, 128, (uint64_t)v77, *v68, v78)];
            uint64_t v80 = v79
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressSubblock((uint64_t)&v172, 128, v79, v68[1], v78);
            uint64_t v81 = v80
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressSubblock((uint64_t)&v175, 128, v80, v68[2], v78);
            uint64_t v82 = v81
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressSubblock((uint64_t)&v176, 128, v81, v68[3], v78);
            uint64_t v83 = v82
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressSubblock((uint64_t)&v173, 128, v82, v68[4], v78);
            uint64_t v84 = v83
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressSubblock((uint64_t)&v174, 128, v83, v68[5], v78);
            uint64_t v85 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressSubblock((uint64_t)&v177, 128, v84, v68[6], v78);
            AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressSubblock((uint64_t)v178, 128, v84 + v85, v68[7], v78);
            uint64_t v86 = v166;
            a7 = v145;
            if (!v166 || !v167)
            {
LABEL_130:
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::compressMacroblock((uint64_t)v171, 128, (unint64_t)v160, v161, v168, v169, *(_DWORD *)(*(void *)(v157 + 208) + 52));
              if (!v158) {
                goto LABEL_27;
              }
              goto LABEL_131;
            }
            uint64_t v87 = 0;
            unint64_t v88 = (unint64_t)v164 << 7;
            uint64_t v89 = 8 * v165;
            uint64_t v90 = &v171[v88 + v89];
            uint64_t v91 = v162;
            uint64_t v92 = v163;
            unint64_t v93 = 8 * v167;
            if (v93 <= 1) {
              unint64_t v94 = 1;
            }
            else {
              unint64_t v94 = 8 * v167;
            }
            unint64_t v95 = v88 + v89;
            uint64_t v96 = &v171[v88 + v89];
            if (v94) {
              BOOL v97 = (v94 - 1) >> 32 == 0;
            }
            else {
              BOOL v97 = 0;
            }
            char v98 = !v97;
            uint64_t v99 = v94 & 0x7FFFFFFE0;
            uint64_t v100 = v94 & 0x7FFFFFFF8;
            float32x4_t v101 = &v171[v95 + 16];
            uint64_t v102 = (long long *)(v162 + 16);
            unsigned int v103 = v90;
            uint64_t v104 = v162;
            while (2)
            {
              unsigned int v105 = (char *)(v91 + v92 * v87);
              uint64_t v106 = &v90[128 * v87];
              if ((unint64_t)(&v96[128 * v87] - v105) < 0x20) {
                char v107 = 1;
              }
              else {
                char v107 = v98;
              }
              if (v107)
              {
                int v108 = 0;
LABEL_127:
                unsigned int v118 = v108 + 1;
                do
                {
                  char v119 = *v105++;
                  *v106++ = v119;
                }
                while (v93 > v118++);
              }
              else
              {
                if (v94 >= 0x20)
                {
                  uint64_t v110 = v102;
                  float32x4_t v111 = v101;
                  uint64_t v112 = v94 & 0x7FFFFFFE0;
                  do
                  {
                    long long v113 = *v110;
                    *(v111 - 1) = *(v110 - 1);
                    *float32x4_t v111 = v113;
                    v111 += 2;
                    v110 += 2;
                    v112 -= 32;
                  }
                  while (v112);
                  if (v94 == v99) {
                    goto LABEL_110;
                  }
                  uint64_t v109 = v94 & 0x7FFFFFFE0;
                  if ((v94 & 0x18) == 0)
                  {
                    v105 += v99;
                    v106 += v99;
                    int v108 = v94 & 0xFFFFFFE0;
                    goto LABEL_127;
                  }
                }
                else
                {
                  uint64_t v109 = 0;
                }
                v106 += v100;
                unint64_t v114 = v109 - (v94 & 0x7FFFFFFF8);
                unint64_t v115 = (uint64_t *)(v104 + v109);
                unint64_t v116 = &v103[v109];
                do
                {
                  uint64_t v117 = *v115++;
                  *v116++ = v117;
                  v114 += 8;
                }
                while (v114);
                if (v94 != v100)
                {
                  v105 += v100;
                  int v108 = v94 & 0xFFFFFFF8;
                  goto LABEL_127;
                }
              }
LABEL_110:
              ++v87;
              v101 += 128;
              uint64_t v102 = (long long *)((char *)v102 + v92);
              v104 += v92;
              v103 += 128;
              if (v87 == v86) {
                goto LABEL_130;
              }
              continue;
            }
          }
          dispatch_sync(*(dispatch_queue_t *)(*(void *)(v28 + 8) + 7384), block);
LABEL_96:
          a7 = v145;
          if (!v158) {
            goto LABEL_27;
          }
LABEL_131:
          memcpy(v70, v77, 0x400uLL);
LABEL_27:
          BOOL v23 = v33++ == v146 >> 4;
          uint64_t v28 = v157;
          unsigned int v34 = v154;
        }
        while (!v23);
        BOOL v23 = v18++ == v139;
      }
      while (!v23);
    }
  }
}

void *AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>,false,(AGXHardwareTextureMemoryOrder)2>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, int a12)
{
  uint64_t v307 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  uint64_t v17 = a1;
  unsigned int v224 = a8;
  unsigned int v18 = a8 >> 3;
  unsigned int v208 = a8 + a10 - 1;
  unsigned int v210 = v208 >> 3;
  unsigned int v19 = *(unsigned __int8 *)(*(void *)(a1 + 208) + 88);
  unsigned int v20 = *(_DWORD *)(a1 + 112);
  uint64_t v227 = v17;
  if (*(void *)(v17 + 168))
  {
    __int16 CacheMode = IOSurfaceGetCacheMode();
    uint64_t v17 = v227;
    int v22 = CacheMode & 0xF00;
  }
  else
  {
    int v22 = 0;
  }
  BOOL v23 = (v22 & 0xD00) == 0 || v22 == 768;
  int v24 = v22 & 0xE00;
  int v26 = !v23 && v24 != 1024;
  int v229 = v26;
  result = (void *)AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::isLevelTiled(v17, *(_DWORD *)(v17 + 144) + a12);
  uint64_t v30 = v227;
  int v218 = (int)result;
  if (v18 <= v210)
  {
    unsigned int v217 = a7 + a9 - 1;
    unsigned int v207 = a7 >> 4;
    if (a7 >> 4 <= v217 >> 4)
    {
      unsigned int v204 = a5 - 1;
      unsigned int v226 = (a5 - 1) >> 4;
      int v225 = ((a5 - 1) & 0xF) + 1;
      int v205 = ((a6 - 1) & 7) + 1;
      unsigned int v206 = (a6 - 1) >> 3;
      uint32x2_t v31 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0xF00000007);
      *(int32x2_t *)v29.i8 = vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32(vadd_s32((int32x2_t)vshl_u32(v31, (uint32x2_t)0xFFFFFFFCFFFFFFFDLL), (int32x2_t)-1)))))));
      *(int8x8_t *)v28.i8 = vbic_s8(*(int8x8_t *)v29.i8, (int8x8_t)vcgt_u32((uint32x2_t)0x2000000010, v31));
      __int32 v215 = v28.i32[0] | v28.i32[1];
      uint64_t v214 = v28.i64[0];
      BOOL v213 = v28.i32[0] != 0;
      BOOL v212 = v28.i32[1] != 0;
      unint64_t v203 = 8 * v20 * (unint64_t)v19;
      unsigned int v216 = a7;
      do
      {
        unsigned int v32 = (8 * v18) | 7;
        if (8 * v18 <= v224) {
          int v33 = v224;
        }
        else {
          int v33 = 8 * v18;
        }
        unsigned int v34 = v207;
        if (v208 < v32) {
          unsigned int v32 = v208;
        }
        unsigned int v223 = 8 * v18;
        int v211 = v33 - 8 * v18;
        int v222 = v32 - v33 + 1;
        int v35 = v205;
        if (v18 != v206) {
          int v35 = 8;
        }
        unsigned int v230 = v35;
        uint64_t v221 = a3 + (v33 - v224) * a11;
        do
        {
          unsigned int v36 = 16 * v34;
          unsigned int v37 = 16 * (v34 + 1) - 1;
          if (16 * v34 <= a7) {
            int v38 = a7;
          }
          else {
            int v38 = 16 * v34;
          }
          if (v217 < v37) {
            unsigned int v37 = v217;
          }
          int v39 = v37 - v38 + 1;
          if (v34 == v226) {
            unsigned int v40 = v225;
          }
          else {
            unsigned int v40 = 16;
          }
          BOOL v41 = 1;
          if (v223 >= v224 && v36 >= a7)
          {
            int v42 = v225;
            if (v34 != v226) {
              int v42 = 16;
            }
            BOOL v41 = v39 != v42 || v222 != v230;
          }
          if (v218)
          {
            unsigned int v63 = 0;
            uint64_t v64 = v203 >> (*(unsigned char *)(v30 + 57) != 0);
            char v65 = 1;
            if (v64 > 127)
            {
              if (v64 > 511)
              {
                if (v64 == 512)
                {
                  char v66 = 0;
                  unsigned int v63 = 16;
                  unsigned int v67 = 16;
                }
                else
                {
                  char v66 = 1;
                  unsigned int v67 = 0;
                  if (v64 == 1024)
                  {
                    unsigned int v67 = 8;
                    unsigned int v63 = 16;
                  }
                }
              }
              else if (v64 == 128)
              {
                char v65 = 0;
                char v66 = 0;
                unsigned int v63 = 32;
                unsigned int v67 = 32;
              }
              else
              {
                char v66 = 1;
                unsigned int v67 = 0;
                if (v64 == 256)
                {
                  char v65 = 0;
                  char v66 = 0;
                  unsigned int v67 = 16;
                  unsigned int v63 = 32;
                }
              }
            }
            else
            {
              char v66 = 1;
              unsigned int v67 = 0;
              switch(v64)
              {
                case 4:
                  char v65 = 0;
                  char v66 = 0;
                  unsigned int v67 = 128;
                  unsigned int v63 = 256;
                  break;
                case 5:
                case 6:
                case 7:
                case 9:
                case 10:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 17:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                  break;
                case 8:
                  char v65 = 0;
                  char v66 = 0;
                  unsigned int v63 = 128;
                  unsigned int v67 = 128;
                  break;
                case 16:
                  char v65 = 0;
                  char v66 = 0;
                  unsigned int v67 = 64;
                  unsigned int v63 = 128;
                  break;
                case 32:
                  char v65 = 0;
                  char v66 = 0;
                  unsigned int v63 = 64;
                  unsigned int v67 = 64;
                  break;
                default:
                  if (v64 == 64)
                  {
                    char v65 = 0;
                    char v66 = 0;
                    unsigned int v67 = 32;
                    unsigned int v63 = 64;
                  }
                  break;
              }
            }
            unsigned int v192 = (v63 >> 4) - 1;
            if (v65) {
              unsigned int v193 = 0;
            }
            else {
              unsigned int v193 = 32 - __clz(~(-1 << -(char)__clz(v192)));
            }
            unsigned int v194 = (v67 >> 3) - 1;
            if (v66)
            {
              unsigned int v195 = 0;
              if (v193) {
                goto LABEL_222;
              }
            }
            else
            {
              unsigned int v195 = 32 - __clz(~(-1 << -(char)__clz(v194)));
              if (v195 | v193)
              {
LABEL_222:
                int v196 = 0;
                uint64_t v197 = 0;
                int v198 = v34 & v192;
                int v199 = v18 & v194;
                BOOL v200 = v195 != 0;
                BOOL v201 = v193 != 0;
                int v202 = 1;
                do
                {
                  --v195;
                  if (v200) {
                    v197 |= (unint64_t)(v202 & v199) << v196++;
                  }
                  else {
                    unsigned int v195 = 0;
                  }
                  --v193;
                  if (v201) {
                    v197 |= (unint64_t)(v202 & v198) << v196++;
                  }
                  else {
                    unsigned int v193 = 0;
                  }
                  v202 *= 2;
                  --v196;
                  BOOL v201 = v193 != 0;
                  BOOL v200 = v195 != 0;
                }
                while (v193 | v195);
                goto LABEL_234;
              }
            }
            uint64_t v197 = 0;
LABEL_234:
            unint64_t v51 = ((unint64_t)(v36 / v63 + v223 / v67 * ((v63 + v204) / v63)) << 14) + (v197 << 9);
            goto LABEL_58;
          }
          if (v215)
          {
            int v44 = 0;
            uint64_t v45 = 0;
            int v46 = 1;
            BOOL v47 = v213;
            BOOL v48 = v212;
            int v49 = v214;
            int v50 = HIDWORD(v214);
            do
            {
              --v49;
              if (v47) {
                v45 |= (unint64_t)(v46 & v18) << v44++;
              }
              else {
                int v49 = 0;
              }
              --v50;
              if (v48) {
                v45 |= (unint64_t)(v46 & v34) << v44++;
              }
              else {
                int v50 = 0;
              }
              v46 *= 2;
              --v44;
              BOOL v48 = v50 != 0;
              BOOL v47 = v49 != 0;
            }
            while (v50 | v49);
          }
          else
          {
            uint64_t v45 = 0;
          }
          unint64_t v51 = v45 << 9;
LABEL_58:
          unsigned int v52 = *(_DWORD *)(v30 + 128) >> (*(unsigned char *)(v30 + 144) + a12);
          if (v52 <= 1) {
            unsigned int v52 = 1;
          }
          unsigned int v53 = v52 + 15;
          if (v53 < 0x20) {
            unsigned int v54 = 0;
          }
          else {
            unsigned int v54 = 32 - __clz(~(-1 << -(char)__clz((v53 >> 4) - 1)));
          }
          unsigned int v55 = *(_DWORD *)(v30 + 132) >> (*(unsigned char *)(v30 + 144) + a12);
          if (v55 <= 1) {
            unsigned int v55 = 1;
          }
          unsigned int v56 = v55 + 7;
          if (v56 < 0x10)
          {
            unsigned int v57 = 0;
            if (!v54)
            {
LABEL_80:
              uint64_t v59 = 0;
              goto LABEL_81;
            }
          }
          else
          {
            unsigned int v57 = 32 - __clz(~(-1 << -(char)__clz((v56 >> 3) - 1)));
            if (!(v57 | v54)) {
              goto LABEL_80;
            }
          }
          int v58 = 0;
          uint64_t v59 = 0;
          BOOL v60 = v54 != 0;
          BOOL v61 = v57 != 0;
          int v62 = 1;
          do
          {
            --v54;
            if (v60) {
              v59 |= (unint64_t)(v62 & v34) << v58++;
            }
            else {
              unsigned int v54 = 0;
            }
            --v57;
            if (v61) {
              v59 |= (unint64_t)(v62 & v18) << v58++;
            }
            else {
              unsigned int v57 = 0;
            }
            v62 *= 2;
            --v58;
            BOOL v61 = v57 != 0;
            BOOL v60 = v54 != 0;
          }
          while (v57 | v54);
LABEL_81:
          int v68 = v40 < 0x10 || v41;
          uint64_t v69 = (unsigned __int8 *)(a4 + 8 * v59);
          uint64_t v70 = v221 + 8 * (v38 - a7);
          int v71 = (int32x4_t *)(a2 + v51);
          if (v230 < 8) {
            int v72 = 1;
          }
          else {
            int v72 = v68;
          }
          int v228 = v71;
          if (v229)
          {
            char v73 = (int32x4_t *)__dst;
            if (!v72) {
              goto LABEL_93;
            }
            memcpy(__dst, v71, sizeof(__dst));
            uint64_t v30 = v227;
          }
          else
          {
            char v73 = v71;
            if (!v72)
            {
LABEL_93:
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::compressMacroblock(v70, a11, (unint64_t)v73, v69, v40, v230, *(_DWORD *)(*(void *)(v30 + 208) + 52));
              goto LABEL_94;
            }
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE11ELj2ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint3EEELb0EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = v30;
          unsigned int v232 = v73;
          unsigned __int8 v240 = v40;
          unsigned __int8 v241 = v230;
          unsigned int v236 = v211;
          unsigned int v237 = v38 - v36;
          uint64_t v233 = v69;
          uint64_t v234 = v70;
          uint64_t v235 = a11;
          unsigned int v238 = v222;
          unsigned int v239 = v39;
          if (v41)
          {
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(v30 + 8) + 7384), block);
LABEL_94:
            a7 = v216;
            unsigned int v74 = v34 + 1;
            goto LABEL_202;
          }
          uint64_t v75 = *(void *)(v30 + 208);
          int v76 = *(_DWORD *)(v75 + 52);
          unsigned int v77 = *v69;
          if (*v69)
          {
            if (v77 < 0xF0)
            {
              if (v77 == 127)
              {
                int32x4_t v78 = *v73;
                int32x4_t v29 = v73[1];
                int32x4_t v80 = v73[2];
                int32x4_t v81 = v73[3];
                int32x4_t v82 = v73[4];
                int32x4_t v83 = v73[5];
                int32x4_t v84 = v73[6];
                int32x4_t v85 = v73[7];
                int16x8_t v243 = *(int16x8_t *)v73;
                int32x4_t v244 = v80;
                int32x4_t v251 = v29;
                int32x4_t v252 = v81;
                int32x4_t v259 = v82;
                int32x4_t v260 = v84;
                int32x4_t v267 = v83;
                int32x4_t v268 = v85;
                uint64_t v79 = 128;
                unsigned int v74 = v34 + 1;
              }
              else
              {
                unsigned int v74 = v34 + 1;
                if (v77 == 3)
                {
                  int32x4_t v78 = (int32x4_t)vld1q_dup_f32((const float *)v73->i32);
                  int16x8_t v243 = (int16x8_t)v78;
                  int32x4_t v244 = v78;
                  int32x4_t v251 = v78;
                  int32x4_t v252 = v78;
                  int32x4_t v259 = v78;
                  int32x4_t v260 = v78;
                  int32x4_t v267 = v78;
                  int32x4_t v268 = v78;
                  uint64_t v79 = 4;
                }
                else
                {
                  uint64_t v79 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(&v243, 128, (uint64_t)v73, v77, v28, v29);
                }
              }
            }
            else
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(v243.i32, 128, (uint64_t)v73, v77, *(_DWORD *)(v75 + 52));
              uint64_t v79 = 64;
              unsigned int v74 = v34 + 1;
            }
          }
          else
          {
            uint64_t v79 = 0;
            int32x4_t v78 = 0uLL;
            int32x4_t v244 = 0u;
            int16x8_t v243 = 0u;
            int32x4_t v251 = 0u;
            int32x4_t v252 = 0u;
            int32x4_t v259 = 0u;
            int32x4_t v260 = 0u;
            int32x4_t v267 = 0u;
            int32x4_t v268 = 0u;
            unsigned int v74 = v34 + 1;
          }
          uint64_t v86 = (uint64_t)v73->i64 + v79;
          unsigned int v87 = v69[1];
          if (v69[1])
          {
            if (v87 < 0xF0)
            {
              if (v87 == 127)
              {
                int32x4_t v88 = *(int32x4_t *)v86;
                int32x4_t v29 = *(int32x4_t *)(v86 + 16);
                int32x4_t v90 = *(int32x4_t *)(v86 + 32);
                int32x4_t v91 = *(int32x4_t *)(v86 + 48);
                int32x4_t v92 = *(int32x4_t *)(v86 + 64);
                int32x4_t v93 = *(int32x4_t *)(v86 + 80);
                int32x4_t v94 = *(int32x4_t *)(v86 + 96);
                int32x4_t v95 = *(int32x4_t *)(v86 + 112);
                int16x8_t v245 = *(int16x8_t *)v86;
                int32x4_t v246 = v90;
                int32x4_t v253 = v29;
                int32x4_t v254 = v91;
                int32x4_t v261 = v92;
                int32x4_t v262 = v94;
                int32x4_t v269 = v93;
                int32x4_t v270 = v95;
                uint64_t v89 = 128;
              }
              else if (v87 == 3)
              {
                int32x4_t v88 = (int32x4_t)vld1q_dup_f32((const float *)v86);
                int16x8_t v245 = (int16x8_t)v88;
                int32x4_t v246 = v88;
                int32x4_t v253 = v88;
                int32x4_t v254 = v88;
                int32x4_t v261 = v88;
                int32x4_t v262 = v88;
                int32x4_t v269 = v88;
                int32x4_t v270 = v88;
                uint64_t v89 = 4;
              }
              else
              {
                uint64_t v89 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(&v245, 128, v86, v87, v78, v29);
              }
            }
            else
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(v245.i32, 128, v86, v87, v76);
              uint64_t v89 = 64;
            }
          }
          else
          {
            uint64_t v89 = 0;
            int32x4_t v88 = 0uLL;
            int16x8_t v245 = 0u;
            int32x4_t v246 = 0u;
            int32x4_t v253 = 0u;
            int32x4_t v254 = 0u;
            int32x4_t v261 = 0u;
            int32x4_t v262 = 0u;
            int32x4_t v269 = 0u;
            int32x4_t v270 = 0u;
          }
          uint64_t v96 = v86 + v89;
          unsigned int v97 = v69[2];
          if (v69[2])
          {
            if (v97 < 0xF0)
            {
              if (v97 == 127)
              {
                int32x4_t v98 = *(int32x4_t *)v96;
                int32x4_t v29 = *(int32x4_t *)(v96 + 16);
                int32x4_t v100 = *(int32x4_t *)(v96 + 32);
                int32x4_t v101 = *(int32x4_t *)(v96 + 48);
                int32x4_t v102 = *(int32x4_t *)(v96 + 64);
                int32x4_t v103 = *(int32x4_t *)(v96 + 80);
                int32x4_t v104 = *(int32x4_t *)(v96 + 96);
                int32x4_t v105 = *(int32x4_t *)(v96 + 112);
                int16x8_t v275 = *(int16x8_t *)v96;
                int32x4_t v276 = v100;
                int32x4_t v283 = v29;
                int32x4_t v284 = v101;
                int32x4_t v291 = v102;
                int32x4_t v292 = v104;
                int32x4_t v299 = v103;
                int32x4_t v300 = v105;
                uint64_t v99 = 128;
              }
              else if (v97 == 3)
              {
                int32x4_t v98 = (int32x4_t)vld1q_dup_f32((const float *)v96);
                int16x8_t v275 = (int16x8_t)v98;
                int32x4_t v276 = v98;
                int32x4_t v283 = v98;
                int32x4_t v284 = v98;
                int32x4_t v291 = v98;
                int32x4_t v292 = v98;
                int32x4_t v299 = v98;
                int32x4_t v300 = v98;
                uint64_t v99 = 4;
              }
              else
              {
                uint64_t v99 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(&v275, 128, v96, v97, v88, v29);
              }
            }
            else
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(v275.i32, 128, v96, v97, v76);
              uint64_t v99 = 64;
            }
          }
          else
          {
            uint64_t v99 = 0;
            int32x4_t v98 = 0uLL;
            int16x8_t v275 = 0u;
            int32x4_t v276 = 0u;
            int32x4_t v283 = 0u;
            int32x4_t v284 = 0u;
            int32x4_t v291 = 0u;
            int32x4_t v292 = 0u;
            int32x4_t v299 = 0u;
            int32x4_t v300 = 0u;
          }
          uint64_t v106 = v96 + v99;
          unsigned int v107 = v69[3];
          if (v69[3])
          {
            if (v107 < 0xF0)
            {
              if (v107 == 127)
              {
                int32x4_t v108 = *(int32x4_t *)v106;
                int32x4_t v29 = *(int32x4_t *)(v106 + 16);
                int32x4_t v110 = *(int32x4_t *)(v106 + 32);
                int32x4_t v111 = *(int32x4_t *)(v106 + 48);
                int32x4_t v112 = *(int32x4_t *)(v106 + 64);
                int32x4_t v113 = *(int32x4_t *)(v106 + 80);
                int32x4_t v114 = *(int32x4_t *)(v106 + 96);
                int32x4_t v115 = *(int32x4_t *)(v106 + 112);
                int16x8_t v277 = *(int16x8_t *)v106;
                int32x4_t v278 = v110;
                int32x4_t v285 = v29;
                int32x4_t v286 = v111;
                int32x4_t v293 = v112;
                int32x4_t v294 = v114;
                int32x4_t v301 = v113;
                int32x4_t v302 = v115;
                uint64_t v109 = 128;
              }
              else if (v107 == 3)
              {
                int32x4_t v108 = (int32x4_t)vld1q_dup_f32((const float *)v106);
                int16x8_t v277 = (int16x8_t)v108;
                int32x4_t v278 = v108;
                int32x4_t v285 = v108;
                int32x4_t v286 = v108;
                int32x4_t v293 = v108;
                int32x4_t v294 = v108;
                int32x4_t v301 = v108;
                int32x4_t v302 = v108;
                uint64_t v109 = 4;
              }
              else
              {
                uint64_t v109 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(&v277, 128, v106, v107, v98, v29);
              }
            }
            else
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(v277.i32, 128, v106, v107, v76);
              uint64_t v109 = 64;
            }
          }
          else
          {
            uint64_t v109 = 0;
            int32x4_t v108 = 0uLL;
            int16x8_t v277 = 0u;
            int32x4_t v278 = 0u;
            int32x4_t v285 = 0u;
            int32x4_t v286 = 0u;
            int32x4_t v293 = 0u;
            int32x4_t v294 = 0u;
            int32x4_t v301 = 0u;
            int32x4_t v302 = 0u;
          }
          uint64_t v116 = v106 + v109;
          unsigned int v117 = v69[4];
          if (v69[4])
          {
            if (v117 < 0xF0)
            {
              if (v117 == 127)
              {
                int32x4_t v118 = *(int32x4_t *)v116;
                int32x4_t v29 = *(int32x4_t *)(v116 + 16);
                int32x4_t v120 = *(int32x4_t *)(v116 + 32);
                int32x4_t v121 = *(int32x4_t *)(v116 + 48);
                int32x4_t v122 = *(int32x4_t *)(v116 + 64);
                int32x4_t v123 = *(int32x4_t *)(v116 + 80);
                int32x4_t v124 = *(int32x4_t *)(v116 + 96);
                int32x4_t v125 = *(int32x4_t *)(v116 + 112);
                int16x8_t v247 = *(int16x8_t *)v116;
                int32x4_t v248 = v120;
                int32x4_t v255 = v29;
                int32x4_t v256 = v121;
                int32x4_t v263 = v122;
                int32x4_t v264 = v124;
                int32x4_t v271 = v123;
                int32x4_t v272 = v125;
                uint64_t v119 = 128;
              }
              else if (v117 == 3)
              {
                int32x4_t v118 = (int32x4_t)vld1q_dup_f32((const float *)v116);
                int16x8_t v247 = (int16x8_t)v118;
                int32x4_t v248 = v118;
                int32x4_t v255 = v118;
                int32x4_t v256 = v118;
                int32x4_t v263 = v118;
                int32x4_t v264 = v118;
                int32x4_t v271 = v118;
                int32x4_t v272 = v118;
                uint64_t v119 = 4;
              }
              else
              {
                uint64_t v119 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(&v247, 128, v116, v117, v108, v29);
              }
            }
            else
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(v247.i32, 128, v116, v117, v76);
              uint64_t v119 = 64;
            }
          }
          else
          {
            uint64_t v119 = 0;
            int32x4_t v118 = 0uLL;
            int16x8_t v247 = 0u;
            int32x4_t v248 = 0u;
            int32x4_t v255 = 0u;
            int32x4_t v256 = 0u;
            int32x4_t v263 = 0u;
            int32x4_t v264 = 0u;
            int32x4_t v271 = 0u;
            int32x4_t v272 = 0u;
          }
          uint64_t v126 = v116 + v119;
          unsigned int v127 = v69[5];
          if (v69[5])
          {
            if (v127 < 0xF0)
            {
              if (v127 == 127)
              {
                int32x4_t v128 = *(int32x4_t *)v126;
                int32x4_t v29 = *(int32x4_t *)(v126 + 16);
                int32x4_t v130 = *(int32x4_t *)(v126 + 32);
                int32x4_t v131 = *(int32x4_t *)(v126 + 48);
                int32x4_t v132 = *(int32x4_t *)(v126 + 64);
                int32x4_t v133 = *(int32x4_t *)(v126 + 80);
                int32x4_t v134 = *(int32x4_t *)(v126 + 96);
                int32x4_t v135 = *(int32x4_t *)(v126 + 112);
                int16x8_t v249 = *(int16x8_t *)v126;
                int32x4_t v250 = v130;
                int32x4_t v257 = v29;
                int32x4_t v258 = v131;
                int32x4_t v265 = v132;
                int32x4_t v266 = v134;
                int32x4_t v273 = v133;
                int32x4_t v274 = v135;
                uint64_t v129 = 128;
              }
              else if (v127 == 3)
              {
                int32x4_t v128 = (int32x4_t)vld1q_dup_f32((const float *)v126);
                int16x8_t v249 = (int16x8_t)v128;
                int32x4_t v250 = v128;
                int32x4_t v257 = v128;
                int32x4_t v258 = v128;
                int32x4_t v265 = v128;
                int32x4_t v266 = v128;
                int32x4_t v273 = v128;
                int32x4_t v274 = v128;
                uint64_t v129 = 4;
              }
              else
              {
                uint64_t v129 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(&v249, 128, v126, v127, v118, v29);
              }
            }
            else
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(v249.i32, 128, v126, v127, v76);
              uint64_t v129 = 64;
            }
          }
          else
          {
            uint64_t v129 = 0;
            int32x4_t v128 = 0uLL;
            int16x8_t v249 = 0u;
            int32x4_t v250 = 0u;
            int32x4_t v257 = 0u;
            int32x4_t v258 = 0u;
            int32x4_t v265 = 0u;
            int32x4_t v266 = 0u;
            int32x4_t v273 = 0u;
            int32x4_t v274 = 0u;
          }
          uint64_t v136 = v126 + v129;
          unsigned int v137 = v69[6];
          if (v69[6])
          {
            if (v137 < 0xF0)
            {
              if (v137 == 127)
              {
                int32x4_t v138 = *(int32x4_t *)v136;
                int32x4_t v29 = *(int32x4_t *)(v136 + 16);
                int32x4_t v140 = *(int32x4_t *)(v136 + 32);
                int32x4_t v141 = *(int32x4_t *)(v136 + 48);
                int32x4_t v142 = *(int32x4_t *)(v136 + 64);
                int32x4_t v143 = *(int32x4_t *)(v136 + 80);
                int32x4_t v144 = *(int32x4_t *)(v136 + 96);
                int32x4_t v145 = *(int32x4_t *)(v136 + 112);
                int16x8_t v279 = *(int16x8_t *)v136;
                int32x4_t v280 = v140;
                int32x4_t v287 = v29;
                int32x4_t v288 = v141;
                int32x4_t v295 = v142;
                int32x4_t v296 = v144;
                int32x4_t v303 = v143;
                int32x4_t v304 = v145;
                uint64_t v139 = 128;
              }
              else if (v137 == 3)
              {
                int32x4_t v138 = (int32x4_t)vld1q_dup_f32((const float *)v136);
                int16x8_t v279 = (int16x8_t)v138;
                int32x4_t v280 = v138;
                int32x4_t v287 = v138;
                int32x4_t v288 = v138;
                int32x4_t v295 = v138;
                int32x4_t v296 = v138;
                int32x4_t v303 = v138;
                int32x4_t v304 = v138;
                uint64_t v139 = 4;
              }
              else
              {
                uint64_t v139 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(&v279, 128, v136, v137, v128, v29);
              }
            }
            else
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(v279.i32, 128, v136, v137, v76);
              uint64_t v139 = 64;
            }
          }
          else
          {
            uint64_t v139 = 0;
            int32x4_t v138 = 0uLL;
            int16x8_t v279 = 0u;
            int32x4_t v280 = 0u;
            int32x4_t v287 = 0u;
            int32x4_t v288 = 0u;
            int32x4_t v295 = 0u;
            int32x4_t v296 = 0u;
            int32x4_t v303 = 0u;
            int32x4_t v304 = 0u;
          }
          unsigned int v146 = v73;
          unsigned int v147 = v69[7];
          if (!v69[7])
          {
            int16x8_t v281 = 0u;
            float32x4_t v282 = 0u;
            float32x4_t v289 = 0u;
            float32x4_t v290 = 0u;
            float32x4_t v297 = 0u;
            float32x4_t v298 = 0u;
            float32x4_t v305 = 0u;
            float32x4_t v306 = 0u;
LABEL_162:
            a7 = v216;
            uint64_t v149 = v238;
            if (!v238) {
              goto LABEL_201;
            }
            goto LABEL_163;
          }
          uint64_t v148 = v136 + v139;
          if (v147 >= 0xF0)
          {
            AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(v281.i32, 128, v148, v147, v76);
            goto LABEL_162;
          }
          a7 = v216;
          if (v147 == 127)
          {
            float32x4_t v185 = *(float32x4_t *)(v148 + 16);
            float32x4_t v186 = *(float32x4_t *)(v148 + 32);
            float32x4_t v187 = *(float32x4_t *)(v148 + 48);
            float32x4_t v188 = *(float32x4_t *)(v148 + 80);
            float32x4_t v189 = *(float32x4_t *)(v148 + 96);
            float32x4_t v190 = *(float32x4_t *)(v148 + 112);
            float32x4_t v191 = *(float32x4_t *)(v148 + 64);
            int16x8_t v281 = *(int16x8_t *)v148;
            float32x4_t v282 = v186;
            float32x4_t v289 = v185;
            float32x4_t v290 = v187;
            float32x4_t v297 = v191;
            float32x4_t v298 = v189;
            float32x4_t v305 = v188;
            float32x4_t v306 = v190;
            uint64_t v149 = v238;
            if (!v238) {
              goto LABEL_201;
            }
          }
          else if (v147 == 3)
          {
            float32x4_t v184 = vld1q_dup_f32((const float *)v148);
            int16x8_t v281 = (int16x8_t)v184;
            float32x4_t v282 = v184;
            float32x4_t v289 = v184;
            float32x4_t v290 = v184;
            float32x4_t v297 = v184;
            float32x4_t v298 = v184;
            float32x4_t v305 = v184;
            float32x4_t v306 = v184;
            uint64_t v149 = v238;
            if (!v238) {
              goto LABEL_201;
            }
          }
          else
          {
            AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(&v281, 128, v148, v147, v138, v29);
            uint64_t v149 = v238;
            if (!v238) {
              goto LABEL_201;
            }
          }
LABEL_163:
          if (v239)
          {
            uint64_t v150 = 0;
            unint64_t v151 = (unint64_t)v236 << 7;
            uint64_t v152 = 8 * v237;
            unsigned int v153 = &v243.i8[v151 + v152];
            uint64_t v154 = v234;
            uint64_t v155 = v235;
            unint64_t v156 = 8 * v239;
            if (v156 <= 1) {
              unint64_t v157 = 1;
            }
            else {
              unint64_t v157 = 8 * v239;
            }
            unint64_t v158 = v151 + v152;
            unsigned int v159 = &v243.i8[v151 + v152];
            if (v157) {
              BOOL v160 = (v157 - 1) >> 32 == 0;
            }
            else {
              BOOL v160 = 0;
            }
            char v161 = !v160;
            uint64_t v162 = v157 & 0x7FFFFFFE0;
            uint64_t v163 = v157 & 0x7FFFFFFF8;
            unsigned int v164 = &v244.i8[v158];
            unsigned int v165 = (long long *)(v234 + 16);
            unsigned int v166 = v153;
            uint64_t v167 = v234;
            do
            {
              unsigned __int8 v168 = (char *)(v154 + v155 * v150);
              unsigned __int8 v169 = &v153[128 * v150];
              if ((unint64_t)(&v159[128 * v150] - v168) < 0x20) {
                char v170 = 1;
              }
              else {
                char v170 = v161;
              }
              if (v170)
              {
                int v171 = 0;
                goto LABEL_191;
              }
              if (v157 >= 0x20)
              {
                uint64_t v173 = v165;
                uint64_t v174 = v164;
                uint64_t v175 = v157 & 0x7FFFFFFE0;
                do
                {
                  long long v176 = *v173;
                  *((_OWORD *)v174 - 1) = *(v173 - 1);
                  *(_OWORD *)uint64_t v174 = v176;
                  v174 += 32;
                  v173 += 2;
                  v175 -= 32;
                }
                while (v175);
                if (v157 == v162) {
                  goto LABEL_174;
                }
                uint64_t v172 = v157 & 0x7FFFFFFE0;
                if ((v157 & 0x18) == 0)
                {
                  v168 += v162;
                  v169 += v162;
                  int v171 = v157 & 0xFFFFFFE0;
                  goto LABEL_191;
                }
              }
              else
              {
                uint64_t v172 = 0;
              }
              v169 += v163;
              unint64_t v177 = v172 - (v157 & 0x7FFFFFFF8);
              unsigned int v178 = (uint64_t *)(v167 + v172);
              uint64_t v179 = &v166[v172];
              do
              {
                uint64_t v180 = *v178++;
                *(void *)uint64_t v179 = v180;
                v179 += 8;
                v177 += 8;
              }
              while (v177);
              if (v157 == v163) {
                goto LABEL_174;
              }
              v168 += v163;
              int v171 = v157 & 0xFFFFFFF8;
LABEL_191:
              unsigned int v181 = v171 + 1;
              do
              {
                char v182 = *v168++;
                *v169++ = v182;
              }
              while (v156 > v181++);
LABEL_174:
              ++v150;
              v164 += 128;
              unsigned int v165 = (long long *)((char *)v165 + v155);
              v167 += v155;
              v166 += 128;
            }
            while (v150 != v149);
          }
LABEL_201:
          AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::compressMacroblock((uint64_t)&v243, 128, (unint64_t)v232, v233, v240, v241, *(_DWORD *)(*(void *)(v227 + 208) + 52));
          char v73 = v146;
LABEL_202:
          result = v228;
          if (v229) {
            result = memcpy(v228, v73, 0x400uLL);
          }
          BOOL v23 = v34 == v217 >> 4;
          unsigned int v34 = v74;
          uint64_t v30 = v227;
        }
        while (!v23);
        BOOL v23 = v18++ == v210;
      }
      while (!v23);
    }
  }
  return result;
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>,false,(AGXHardwareTextureMemoryOrder)2>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10, uint64_t a11, int a12)
{
  uint64_t v12 = MEMORY[0x270FA5388](a1);
  unsigned int v14 = v13;
  unsigned int v16 = v15;
  unsigned int v18 = v17;
  unsigned int v20 = v19;
  uint64_t v164 = v21;
  uint64_t v165 = v22;
  uint64_t v154 = v23;
  uint64_t v24 = v12;
  uint64_t v195 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(v12, 0);
  uint64_t v25 = v24;
  unsigned int v169 = v14;
  unsigned int v26 = v14 >> 3;
  unsigned int v153 = v14 + a10 - 1;
  unsigned int v155 = v153 >> 3;
  unsigned int v27 = *(unsigned __int8 *)(*(void *)(v24 + 208) + 88);
  unsigned int v28 = *(_DWORD *)(v24 + 112);
  uint64_t v173 = v25;
  if (*(void *)(v25 + 168))
  {
    __int16 CacheMode = IOSurfaceGetCacheMode();
    uint64_t v25 = v173;
    int v30 = CacheMode & 0xF00;
  }
  else
  {
    int v30 = 0;
  }
  BOOL v31 = (v30 & 0xD00) == 0 || v30 == 768;
  int v32 = v30 & 0xE00;
  int v34 = !v31 && v32 != 1024;
  int v174 = v34;
  BOOL isLevelTiled = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::isLevelTiled(v25, *(_DWORD *)(v25 + 144) + a12);
  uint64_t v36 = v173;
  BOOL v163 = isLevelTiled;
  if (v26 <= v155)
  {
    unsigned int v162 = v16 + a9 - 1;
    unsigned int v152 = v16 >> 4;
    if (v16 >> 4 <= v162 >> 4)
    {
      unsigned int v149 = v20 - 1;
      unsigned int v151 = (v18 - 1) >> 3;
      int v171 = ((v20 - 1) & 0xF) + 1;
      unsigned int v172 = (v20 - 1) >> 4;
      int v150 = ((v18 - 1) & 7) + 1;
      uint32x2_t v37 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(v20, v18), (int32x2_t)0xF00000007);
      int8x8_t v38 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32(vadd_s32((int32x2_t)vshl_u32(v37, (uint32x2_t)0xFFFFFFFCFFFFFFFDLL), (int32x2_t)-1))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x2000000010, v37));
      __int32 v160 = v38.i32[0] | v38.i32[1];
      int8x8_t v159 = v38;
      BOOL v157 = v38.i32[1] != 0;
      BOOL v158 = v38.i32[0] != 0;
      unint64_t v148 = 8 * v28 * (unint64_t)v27;
      unsigned int v161 = v16;
      do
      {
        unsigned int v39 = (8 * v26) | 7;
        if (8 * v26 <= v169) {
          int v40 = v169;
        }
        else {
          int v40 = 8 * v26;
        }
        unsigned int v41 = v152;
        if (v153 < v39) {
          unsigned int v39 = v153;
        }
        int v156 = v40 - 8 * v26;
        int v167 = v39 - v40 + 1;
        unsigned int v168 = 8 * v26;
        if (v26 == v151) {
          unsigned int v42 = v150;
        }
        else {
          unsigned int v42 = 8;
        }
        uint64_t v166 = v154 + (v40 - v169) * a11;
        unsigned int v170 = v42;
        do
        {
          unsigned int v43 = 16 * v41;
          unsigned int v44 = 16 * (v41 + 1) - 1;
          if (16 * v41 <= v16) {
            int v45 = v16;
          }
          else {
            int v45 = 16 * v41;
          }
          if (v162 < v44) {
            unsigned int v44 = v162;
          }
          int v46 = v44 - v45 + 1;
          if (v41 == v172) {
            unsigned int v47 = v171;
          }
          else {
            unsigned int v47 = 16;
          }
          BOOL v48 = 1;
          if (v168 >= v169 && v43 >= v16)
          {
            int v49 = v171;
            if (v41 != v172) {
              int v49 = 16;
            }
            BOOL v48 = v46 != v49 || v167 != v42;
          }
          if (v163)
          {
            unsigned int v70 = 0;
            uint64_t v71 = v148 >> (*(unsigned char *)(v36 + 57) != 0);
            char v72 = 1;
            if (v71 > 127)
            {
              if (v71 > 511)
              {
                if (v71 == 512)
                {
                  char v73 = 0;
                  unsigned int v70 = 16;
                  unsigned int v74 = 16;
                }
                else
                {
                  char v73 = 1;
                  unsigned int v74 = 0;
                  if (v71 == 1024)
                  {
                    unsigned int v74 = 8;
                    unsigned int v70 = 16;
                  }
                }
              }
              else if (v71 == 128)
              {
                char v72 = 0;
                char v73 = 0;
                unsigned int v70 = 32;
                unsigned int v74 = 32;
              }
              else
              {
                char v73 = 1;
                unsigned int v74 = 0;
                if (v71 == 256)
                {
                  char v72 = 0;
                  char v73 = 0;
                  unsigned int v74 = 16;
                  unsigned int v70 = 32;
                }
              }
            }
            else
            {
              char v73 = 1;
              unsigned int v74 = 0;
              switch(v71)
              {
                case 4:
                  char v72 = 0;
                  char v73 = 0;
                  unsigned int v74 = 128;
                  unsigned int v70 = 256;
                  break;
                case 5:
                case 6:
                case 7:
                case 9:
                case 10:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 17:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                  break;
                case 8:
                  char v72 = 0;
                  char v73 = 0;
                  unsigned int v70 = 128;
                  unsigned int v74 = 128;
                  break;
                case 16:
                  char v72 = 0;
                  char v73 = 0;
                  unsigned int v74 = 64;
                  unsigned int v70 = 128;
                  break;
                case 32:
                  char v72 = 0;
                  char v73 = 0;
                  unsigned int v70 = 64;
                  unsigned int v74 = 64;
                  break;
                default:
                  if (v71 == 64)
                  {
                    char v72 = 0;
                    char v73 = 0;
                    unsigned int v74 = 32;
                    unsigned int v70 = 64;
                  }
                  break;
              }
            }
            unsigned int v137 = (v70 >> 4) - 1;
            if (v72) {
              unsigned int v138 = 0;
            }
            else {
              unsigned int v138 = 32 - __clz(~(-1 << -(char)__clz(v137)));
            }
            unsigned int v139 = (v74 >> 3) - 1;
            if (v73)
            {
              unsigned int v140 = 0;
              if (v138) {
                goto LABEL_150;
              }
            }
            else
            {
              unsigned int v140 = 32 - __clz(~(-1 << -(char)__clz(v139)));
              if (v140 | v138)
              {
LABEL_150:
                int v141 = 0;
                uint64_t v142 = 0;
                int v143 = v41 & v137;
                int v144 = v26 & v139;
                BOOL v145 = v140 != 0;
                BOOL v146 = v138 != 0;
                int v147 = 1;
                do
                {
                  --v140;
                  if (v145) {
                    v142 |= (unint64_t)(v147 & v144) << v141++;
                  }
                  else {
                    unsigned int v140 = 0;
                  }
                  --v138;
                  if (v146) {
                    v142 |= (unint64_t)(v147 & v143) << v141++;
                  }
                  else {
                    unsigned int v138 = 0;
                  }
                  v147 *= 2;
                  --v141;
                  BOOL v146 = v138 != 0;
                  BOOL v145 = v140 != 0;
                }
                while (v138 | v140);
                goto LABEL_162;
              }
            }
            uint64_t v142 = 0;
LABEL_162:
            unint64_t v58 = ((unint64_t)(v43 / v70 + v168 / v74 * ((v70 + v149) / v70)) << 14) + (v142 << 10);
            goto LABEL_59;
          }
          if (v160)
          {
            int v51 = 0;
            uint64_t v52 = 0;
            int v53 = 1;
            BOOL v54 = v157;
            BOOL v55 = v158;
            __int32 v56 = v159.i32[0];
            __int32 v57 = v159.i32[1];
            do
            {
              --v56;
              if (v55) {
                v52 |= (unint64_t)(v53 & v26) << v51++;
              }
              else {
                __int32 v56 = 0;
              }
              --v57;
              if (v54) {
                v52 |= (unint64_t)(v53 & v41) << v51++;
              }
              else {
                __int32 v57 = 0;
              }
              v53 *= 2;
              --v51;
              BOOL v54 = v57 != 0;
              BOOL v55 = v56 != 0;
            }
            while (v57 | v56);
          }
          else
          {
            uint64_t v52 = 0;
          }
          unint64_t v58 = v52 << 10;
LABEL_59:
          unsigned int v59 = *(_DWORD *)(v36 + 128) >> (*(unsigned char *)(v36 + 144) + a12);
          if (v59 <= 1) {
            unsigned int v59 = 1;
          }
          unsigned int v60 = v59 + 15;
          if (v60 < 0x20) {
            unsigned int v61 = 0;
          }
          else {
            unsigned int v61 = 32 - __clz(~(-1 << -(char)__clz((v60 >> 4) - 1)));
          }
          unsigned int v62 = *(_DWORD *)(v36 + 132) >> (*(unsigned char *)(v36 + 144) + a12);
          if (v62 <= 1) {
            unsigned int v62 = 1;
          }
          unsigned int v63 = v62 + 7;
          if (v63 < 0x10)
          {
            unsigned int v64 = 0;
            if (!v61)
            {
LABEL_81:
              uint64_t v66 = 0;
              goto LABEL_82;
            }
          }
          else
          {
            unsigned int v64 = 32 - __clz(~(-1 << -(char)__clz((v63 >> 3) - 1)));
            if (!(v64 | v61)) {
              goto LABEL_81;
            }
          }
          int v65 = 0;
          uint64_t v66 = 0;
          BOOL v67 = v61 != 0;
          BOOL v68 = v64 != 0;
          int v69 = 1;
          do
          {
            --v61;
            if (v67) {
              v66 |= (unint64_t)(v69 & v41) << v65++;
            }
            else {
              unsigned int v61 = 0;
            }
            --v64;
            if (v68) {
              v66 |= (unint64_t)(v69 & v26) << v65++;
            }
            else {
              unsigned int v64 = 0;
            }
            v69 *= 2;
            --v65;
            BOOL v68 = v64 != 0;
            BOOL v67 = v61 != 0;
          }
          while (v64 | v61);
LABEL_82:
          int v75 = v47 < 0x10 || v48;
          int v76 = (unsigned __int8 *)(v165 + 8 * v66);
          uint64_t v77 = v166 + 16 * (v45 - v16);
          int32x4_t v78 = (void *)(v164 + v58);
          if (v42 < 8) {
            int v79 = 1;
          }
          else {
            int v79 = v75;
          }
          if (v174)
          {
            if (!v79)
            {
              uint64_t v86 = __dst;
LABEL_95:
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::compressMacroblock(v77, a11, (unint64_t)v86, v76, v47, v42, *(_DWORD *)(*(void *)(v36 + 208) + 52));
              goto LABEL_96;
            }
            int32x4_t v80 = v78;
            char v81 = v47;
            int v82 = v45;
            int v83 = v46;
            int32x4_t v84 = v78;
            BOOL v85 = v48;
            memcpy(__dst, v80, sizeof(__dst));
            BOOL v48 = v85;
            int32x4_t v78 = v84;
            int v46 = v83;
            int v45 = v82;
            unsigned int v43 = 16 * v41;
            uint64_t v86 = __dst;
            LOBYTE(v47) = v81;
            LOBYTE(v42) = v170;
            uint64_t v36 = v173;
          }
          else
          {
            uint64_t v86 = v78;
            if (!v79) {
              goto LABEL_95;
            }
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE17ELj2ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint3EEELb0EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = v36;
          long long v176 = v86;
          unsigned __int8 v184 = v47;
          unsigned __int8 v185 = v42;
          unsigned int v180 = v156;
          unsigned int v181 = v45 - v43;
          unint64_t v177 = v76;
          uint64_t v178 = v77;
          uint64_t v179 = a11;
          unsigned int v182 = v167;
          unsigned int v183 = v46;
          if (!v48)
          {
            int v87 = *(_DWORD *)(*(void *)(v36 + 208) + 52);
            uint64_t v88 = (uint64_t)&v86[AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressSubblock(v187, 256, (uint64_t)v86, *v76, v87, v38)];
            uint64_t v90 = v88
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressSubblock(v188, 256, v88, v76[1], v87, v89);
            uint64_t v92 = v90
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressSubblock(v191, 256, v90, v76[2], v87, v91);
            uint64_t v94 = v92
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressSubblock(v192, 256, v92, v76[3], v87, v93);
            uint64_t v96 = v94
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressSubblock(v189, 256, v94, v76[4], v87, v95);
            uint64_t v98 = v96
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressSubblock(v190, 256, v96, v76[5], v87, v97);
            uint64_t v100 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressSubblock(v193, 256, v98, v76[6], v87, v99);
            AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressSubblock(v194, 256, v98 + v100, v76[7], v87, v101);
            uint64_t v102 = v182;
            unsigned int v16 = v161;
            if (!v182 || !v183)
            {
LABEL_130:
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::compressMacroblock((uint64_t)v187, 256, (unint64_t)v176, v177, v184, v185, *(_DWORD *)(*(void *)(v173 + 208) + 52));
              if (!v174) {
                goto LABEL_27;
              }
              goto LABEL_131;
            }
            uint64_t v103 = 0;
            unint64_t v104 = (unint64_t)v180 << 8;
            uint64_t v105 = 16 * v181;
            uint64_t v106 = (char *)v187 + v104 + v105;
            uint64_t v107 = v178;
            uint64_t v108 = v179;
            unint64_t v109 = 16 * v183;
            if (v109 <= 1) {
              unint64_t v110 = 1;
            }
            else {
              unint64_t v110 = 16 * v183;
            }
            unint64_t v111 = v104 + v105;
            int32x4_t v112 = (char *)v187 + v104 + v105;
            if (v110) {
              BOOL v113 = (v110 - 1) >> 32 == 0;
            }
            else {
              BOOL v113 = 0;
            }
            char v114 = !v113;
            uint64_t v115 = v110 & 0xFFFFFFFE0;
            uint64_t v116 = v110 & 0xFFFFFFFF0;
            unsigned int v117 = (char *)&v187[1] + v111;
            int32x4_t v118 = (long long *)(v178 + 16);
            uint64_t v119 = v106;
            uint64_t v120 = v178;
            while (2)
            {
              int32x4_t v121 = (char *)(v107 + v108 * v103);
              int32x4_t v122 = &v106[256 * v103];
              if ((unint64_t)(&v112[256 * v103] - v121) < 0x20) {
                char v123 = 1;
              }
              else {
                char v123 = v114;
              }
              if (v123)
              {
                int v124 = 0;
LABEL_127:
                unsigned int v134 = v124 + 1;
                do
                {
                  char v135 = *v121++;
                  *v122++ = v135;
                }
                while (v109 > v134++);
              }
              else
              {
                if (v110 >= 0x20)
                {
                  int32x4_t v130 = v118;
                  int32x4_t v131 = v117;
                  uint64_t v132 = v110 & 0xFFFFFFFE0;
                  do
                  {
                    long long v133 = *v130;
                    *(v131 - 1) = *(v130 - 1);
                    *int32x4_t v131 = v133;
                    v131 += 2;
                    v130 += 2;
                    v132 -= 32;
                  }
                  while (v132);
                  if (v110 == v115) {
                    goto LABEL_110;
                  }
                  uint64_t v125 = v110 & 0xFFFFFFFE0;
                  if ((v110 & 0x10) == 0)
                  {
                    v121 += v115;
                    v122 += v115;
                    int v124 = v110 & 0xFFFFFFE0;
                    goto LABEL_127;
                  }
                }
                else
                {
                  uint64_t v125 = 0;
                }
                v122 += v116;
                unint64_t v126 = v125 - (v110 & 0xFFFFFFFF0);
                unsigned int v127 = (uint64_t *)(v120 + v125);
                int32x4_t v128 = &v119[v125];
                do
                {
                  uint64_t v129 = *v127++;
                  *(void *)int32x4_t v128 = v129;
                  v128 += 8;
                  v126 += 8;
                }
                while (v126);
                if (v110 != v116)
                {
                  v121 += v116;
                  int v124 = v110 & 0xFFFFFFF0;
                  goto LABEL_127;
                }
              }
LABEL_110:
              ++v103;
              v117 += 256;
              int32x4_t v118 = (long long *)((char *)v118 + v108);
              v120 += v108;
              v119 += 256;
              if (v103 == v102) {
                goto LABEL_130;
              }
              continue;
            }
          }
          dispatch_sync(*(dispatch_queue_t *)(*(void *)(v36 + 8) + 7384), block);
LABEL_96:
          unsigned int v16 = v161;
          if (!v174) {
            goto LABEL_27;
          }
LABEL_131:
          memcpy(v78, v86, 0x800uLL);
LABEL_27:
          BOOL v31 = v41++ == v162 >> 4;
          uint64_t v36 = v173;
          unsigned int v42 = v170;
        }
        while (!v31);
        BOOL v31 = v26++ == v155;
      }
      while (!v31);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>,false,(AGXHardwareTextureMemoryOrder)2>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, int a12)
{
  uint64_t v236 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  uint64_t v17 = a1;
  unsigned int v185 = a8;
  unsigned int v18 = a8 >> 3;
  unsigned int v169 = a8 + a10 - 1;
  unsigned int v171 = v169 >> 3;
  unsigned int v19 = *(unsigned __int8 *)(*(void *)(a1 + 208) + 88);
  unsigned int v20 = *(_DWORD *)(a1 + 112);
  uint64_t v188 = v17;
  if (*(void *)(v17 + 168))
  {
    __int16 CacheMode = IOSurfaceGetCacheMode();
    uint64_t v17 = v188;
    int v22 = CacheMode & 0xF00;
  }
  else
  {
    int v22 = 0;
  }
  BOOL v23 = (v22 & 0xD00) == 0 || v22 == 768;
  int v24 = v22 & 0xE00;
  int v26 = !v23 && v24 != 1024;
  int v190 = v26;
  BOOL isLevelTiled = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::isLevelTiled(v17, *(_DWORD *)(v17 + 144) + a12);
  uint64_t v28 = v188;
  BOOL v179 = isLevelTiled;
  if (v18 <= v171)
  {
    unsigned int v178 = a7 + a9 - 1;
    unsigned int v168 = a7 >> 4;
    if (a7 >> 4 <= v178 >> 4)
    {
      unsigned int v165 = a5 - 1;
      unsigned int v187 = (a5 - 1) >> 4;
      int v186 = ((a5 - 1) & 0xF) + 1;
      int v166 = ((a6 - 1) & 7) + 1;
      unsigned int v167 = (a6 - 1) >> 3;
      uint32x2_t v29 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0xF00000007);
      *(int32x2_t *)v30.i8 = vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32(vadd_s32((int32x2_t)vshl_u32(v29, (uint32x2_t)0xFFFFFFFCFFFFFFFDLL), (int32x2_t)-1)))))));
      v31.i64[0] = 0x2000000010;
      *(int8x8_t *)v32.i8 = vbic_s8(*(int8x8_t *)v30.i8, (int8x8_t)vcgt_u32((uint32x2_t)0x2000000010, v29));
      __int32 v176 = v32.i32[0] | v32.i32[1];
      uint64_t v175 = v32.i64[0];
      BOOL v174 = v32.i32[0] != 0;
      BOOL v173 = v32.i32[1] != 0;
      unint64_t v164 = 8 * v20 * (unint64_t)v19;
      unsigned int v177 = a7;
      do
      {
        unsigned int v33 = (8 * v18) | 7;
        if (8 * v18 <= v185) {
          int v34 = v185;
        }
        else {
          int v34 = 8 * v18;
        }
        unsigned int v35 = v168;
        if (v169 < v33) {
          unsigned int v33 = v169;
        }
        unsigned int v184 = 8 * v18;
        int v172 = v34 - 8 * v18;
        int v183 = v33 - v34 + 1;
        int v36 = v166;
        if (v18 != v167) {
          int v36 = 8;
        }
        unsigned int v191 = v36;
        uint64_t v182 = a3 + (v34 - v185) * a11;
        do
        {
          unsigned int v37 = 16 * v35;
          unsigned int v38 = 16 * (v35 + 1) - 1;
          if (16 * v35 <= a7) {
            int v39 = a7;
          }
          else {
            int v39 = 16 * v35;
          }
          if (v178 < v38) {
            unsigned int v38 = v178;
          }
          int v40 = v38 - v39 + 1;
          if (v35 == v187) {
            unsigned int v41 = v186;
          }
          else {
            unsigned int v41 = 16;
          }
          BOOL v42 = 1;
          if (v184 >= v185 && v37 >= a7)
          {
            int v43 = v186;
            if (v35 != v187) {
              int v43 = 16;
            }
            BOOL v42 = v40 != v43 || v183 != v191;
          }
          if (v179)
          {
            unsigned int v64 = 0;
            uint64_t v65 = v164 >> (*(unsigned char *)(v28 + 57) != 0);
            char v66 = 1;
            if (v65 > 127)
            {
              if (v65 > 511)
              {
                if (v65 == 512)
                {
                  char v67 = 0;
                  unsigned int v64 = 16;
                  unsigned int v68 = 16;
                }
                else
                {
                  char v67 = 1;
                  unsigned int v68 = 0;
                  if (v65 == 1024)
                  {
                    unsigned int v68 = 8;
                    unsigned int v64 = 16;
                  }
                }
              }
              else if (v65 == 128)
              {
                char v66 = 0;
                char v67 = 0;
                unsigned int v64 = 32;
                unsigned int v68 = 32;
              }
              else
              {
                char v67 = 1;
                unsigned int v68 = 0;
                if (v65 == 256)
                {
                  char v66 = 0;
                  char v67 = 0;
                  unsigned int v68 = 16;
                  unsigned int v64 = 32;
                }
              }
            }
            else
            {
              char v67 = 1;
              unsigned int v68 = 0;
              switch(v65)
              {
                case 4:
                  char v66 = 0;
                  char v67 = 0;
                  unsigned int v68 = 128;
                  unsigned int v64 = 256;
                  break;
                case 5:
                case 6:
                case 7:
                case 9:
                case 10:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 17:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                  break;
                case 8:
                  char v66 = 0;
                  char v67 = 0;
                  unsigned int v64 = 128;
                  unsigned int v68 = 128;
                  break;
                case 16:
                  char v66 = 0;
                  char v67 = 0;
                  unsigned int v68 = 64;
                  unsigned int v64 = 128;
                  break;
                case 32:
                  char v66 = 0;
                  char v67 = 0;
                  unsigned int v64 = 64;
                  unsigned int v68 = 64;
                  break;
                default:
                  if (v65 == 64)
                  {
                    char v66 = 0;
                    char v67 = 0;
                    unsigned int v68 = 32;
                    unsigned int v64 = 64;
                  }
                  break;
              }
            }
            unsigned int v153 = (v64 >> 4) - 1;
            if (v66) {
              unsigned int v154 = 0;
            }
            else {
              unsigned int v154 = 32 - __clz(~(-1 << -(char)__clz(v153)));
            }
            unsigned int v155 = (v68 >> 3) - 1;
            if (v67)
            {
              unsigned int v156 = 0;
              if (v154) {
                goto LABEL_227;
              }
            }
            else
            {
              unsigned int v156 = 32 - __clz(~(-1 << -(char)__clz(v155)));
              if (v156 | v154)
              {
LABEL_227:
                int v157 = 0;
                uint64_t v158 = 0;
                int v159 = v35 & v153;
                int v160 = v18 & v155;
                BOOL v161 = v156 != 0;
                BOOL v162 = v154 != 0;
                int v163 = 1;
                do
                {
                  --v156;
                  if (v161) {
                    v158 |= (unint64_t)(v163 & v160) << v157++;
                  }
                  else {
                    unsigned int v156 = 0;
                  }
                  --v154;
                  if (v162) {
                    v158 |= (unint64_t)(v163 & v159) << v157++;
                  }
                  else {
                    unsigned int v154 = 0;
                  }
                  v163 *= 2;
                  --v157;
                  BOOL v162 = v154 != 0;
                  BOOL v161 = v156 != 0;
                }
                while (v154 | v156);
                goto LABEL_239;
              }
            }
            uint64_t v158 = 0;
LABEL_239:
            unint64_t v52 = ((unint64_t)(v37 / v64 + v184 / v68 * ((v64 + v165) / v64)) << 14) + (v158 << 8);
            goto LABEL_58;
          }
          if (v176)
          {
            int v45 = 0;
            uint64_t v46 = 0;
            int v47 = 1;
            BOOL v48 = v174;
            BOOL v49 = v173;
            int v50 = v175;
            int v51 = HIDWORD(v175);
            do
            {
              --v50;
              if (v48) {
                v46 |= (unint64_t)(v47 & v18) << v45++;
              }
              else {
                int v50 = 0;
              }
              --v51;
              if (v49) {
                v46 |= (unint64_t)(v47 & v35) << v45++;
              }
              else {
                int v51 = 0;
              }
              v47 *= 2;
              --v45;
              BOOL v49 = v51 != 0;
              BOOL v48 = v50 != 0;
            }
            while (v51 | v50);
          }
          else
          {
            uint64_t v46 = 0;
          }
          unint64_t v52 = v46 << 8;
LABEL_58:
          unsigned int v53 = *(_DWORD *)(v28 + 128) >> (*(unsigned char *)(v28 + 144) + a12);
          if (v53 <= 1) {
            unsigned int v53 = 1;
          }
          unsigned int v54 = v53 + 15;
          if (v54 < 0x20) {
            unsigned int v55 = 0;
          }
          else {
            unsigned int v55 = 32 - __clz(~(-1 << -(char)__clz((v54 >> 4) - 1)));
          }
          unsigned int v56 = *(_DWORD *)(v28 + 132) >> (*(unsigned char *)(v28 + 144) + a12);
          if (v56 <= 1) {
            unsigned int v56 = 1;
          }
          unsigned int v57 = v56 + 7;
          if (v57 < 0x10)
          {
            unsigned int v58 = 0;
            if (!v55)
            {
LABEL_80:
              uint64_t v60 = 0;
              goto LABEL_81;
            }
          }
          else
          {
            unsigned int v58 = 32 - __clz(~(-1 << -(char)__clz((v57 >> 3) - 1)));
            if (!(v58 | v55)) {
              goto LABEL_80;
            }
          }
          int v59 = 0;
          uint64_t v60 = 0;
          BOOL v61 = v55 != 0;
          BOOL v62 = v58 != 0;
          int v63 = 1;
          do
          {
            --v55;
            if (v61) {
              v60 |= (unint64_t)(v63 & v35) << v59++;
            }
            else {
              unsigned int v55 = 0;
            }
            --v58;
            if (v62) {
              v60 |= (unint64_t)(v63 & v18) << v59++;
            }
            else {
              unsigned int v58 = 0;
            }
            v63 *= 2;
            --v59;
            BOOL v62 = v58 != 0;
            BOOL v61 = v55 != 0;
          }
          while (v58 | v55);
LABEL_81:
          int v69 = v41 < 0x10 || v42;
          unsigned int v70 = (unsigned __int8 *)(a4 + 8 * v60);
          unint64_t v71 = v182 + 4 * (v39 - a7);
          char v72 = (unsigned char *)(a2 + v52);
          if (v191 < 8) {
            int v73 = 1;
          }
          else {
            int v73 = v69;
          }
          __src = v72;
          if (v190)
          {
            char v72 = __dst;
            if (!v73) {
              goto LABEL_93;
            }
            memcpy(__dst, __src, sizeof(__dst));
            uint64_t v28 = v188;
          }
          else if (!v73)
          {
LABEL_93:
            AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::compressMacroblock(v71, a11, (unint64_t)v72, v70, v41, v191, *(_DWORD *)(*(void *)(v28 + 208) + 52));
            goto LABEL_94;
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE4ELj2ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint3EEELb0EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = v28;
          unsigned int v193 = v72;
          unsigned __int8 v201 = v41;
          unsigned __int8 v202 = v191;
          unsigned int v197 = v172;
          unsigned int v198 = v39 - v37;
          unsigned int v194 = v70;
          unint64_t v195 = v71;
          uint64_t v196 = a11;
          unsigned int v199 = v183;
          unsigned int v200 = v40;
          if (v42)
          {
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(v28 + 8) + 7384), block);
LABEL_94:
            a7 = v177;
            unsigned int v74 = v35 + 1;
            goto LABEL_207;
          }
          uint64_t v75 = *(void *)(v28 + 208);
          int v76 = *(_DWORD *)(v75 + 52);
          unsigned int v77 = *v70;
          if (*v70)
          {
            if (v77 < 0xF0)
            {
              if (v77 == 63)
              {
                int64x2_t v30 = *((int64x2_t *)v72 + 1);
                int v79 = (const double *)(v72 + 32);
                *(float64x2x2_t *)v31.i8 = vld2q_f64(v79);
                int64x2_t v32 = vzip2q_s64(*(int64x2_t *)v72, v30);
                int64x2_t v204 = vzip1q_s64(*(int64x2_t *)v72, v30);
                int64x2_t v208 = v32;
                int64x2_t v212 = v31;
                int64x2_t v216 = v80;
                uint64_t v78 = 64;
                unsigned int v74 = v35 + 1;
              }
              else
              {
                unsigned int v74 = v35 + 1;
                if (v77 == 1)
                {
                  int64x2_t v32 = (int64x2_t)vld1q_dup_s16((const __int16 *)v72);
                  int64x2_t v204 = v32;
                  int64x2_t v208 = v32;
                  int64x2_t v212 = v32;
                  int64x2_t v216 = v32;
                  uint64_t v78 = 2;
                }
                else
                {
                  uint64_t v78 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(&v204, 64, (uint64_t)v72, v77, *(int8x8_t *)v32.i8, *(double *)v30.i64, *(int8x8_t *)v31.i8);
                }
              }
            }
            else
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(v204.i16, 64, (uint64_t)v72, v77, *(_DWORD *)(v75 + 52));
              uint64_t v78 = 32;
              unsigned int v74 = v35 + 1;
            }
          }
          else
          {
            uint64_t v78 = 0;
            int64x2_t v204 = 0uLL;
            int64x2_t v208 = 0uLL;
            int64x2_t v212 = 0uLL;
            int64x2_t v216 = 0uLL;
            unsigned int v74 = v35 + 1;
          }
          uint64_t v81 = (uint64_t)&v72[v78];
          unsigned int v82 = v70[1];
          if (v70[1])
          {
            if (v82 < 0xF0)
            {
              if (v82 == 63)
              {
                int64x2_t v30 = *(int64x2_t *)(v81 + 16);
                int32x4_t v84 = (const double *)(v81 + 32);
                *(float64x2x2_t *)v31.i8 = vld2q_f64(v84);
                int64x2_t v32 = vzip2q_s64(*(int64x2_t *)v81, v30);
                int64x2_t v205 = vzip1q_s64(*(int64x2_t *)v81, v30);
                int64x2_t v209 = v32;
                int64x2_t v213 = v31;
                int64x2_t v217 = v85;
                uint64_t v83 = 64;
              }
              else if (v82 == 1)
              {
                int64x2_t v32 = (int64x2_t)vld1q_dup_s16((const __int16 *)v81);
                int64x2_t v205 = v32;
                int64x2_t v209 = v32;
                int64x2_t v213 = v32;
                int64x2_t v217 = v32;
                uint64_t v83 = 2;
              }
              else
              {
                uint64_t v83 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(&v205, 64, v81, v82, *(int8x8_t *)v32.i8, *(double *)v30.i64, *(int8x8_t *)v31.i8);
              }
            }
            else
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(v205.i16, 64, v81, v82, v76);
              uint64_t v83 = 32;
            }
          }
          else
          {
            uint64_t v83 = 0;
            int64x2_t v205 = 0uLL;
            int64x2_t v209 = 0uLL;
            int64x2_t v213 = 0uLL;
            int64x2_t v217 = 0uLL;
          }
          uint64_t v86 = v81 + v83;
          unsigned int v87 = v70[2];
          if (v70[2])
          {
            if (v87 < 0xF0)
            {
              if (v87 == 63)
              {
                int64x2_t v30 = *(int64x2_t *)(v86 + 16);
                int8x8_t v89 = (const double *)(v86 + 32);
                *(float64x2x2_t *)v31.i8 = vld2q_f64(v89);
                int64x2_t v32 = vzip2q_s64(*(int64x2_t *)v86, v30);
                int64x2_t v220 = vzip1q_s64(*(int64x2_t *)v86, v30);
                int64x2_t v224 = v32;
                int64x2_t v228 = v31;
                int64x2_t v232 = v90;
                uint64_t v88 = 64;
              }
              else if (v87 == 1)
              {
                int64x2_t v32 = (int64x2_t)vld1q_dup_s16((const __int16 *)v86);
                int64x2_t v220 = v32;
                int64x2_t v224 = v32;
                int64x2_t v228 = v32;
                int64x2_t v232 = v32;
                uint64_t v88 = 2;
              }
              else
              {
                uint64_t v88 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(&v220, 64, v86, v87, *(int8x8_t *)v32.i8, *(double *)v30.i64, *(int8x8_t *)v31.i8);
              }
            }
            else
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(v220.i16, 64, v86, v87, v76);
              uint64_t v88 = 32;
            }
          }
          else
          {
            uint64_t v88 = 0;
            int64x2_t v220 = 0uLL;
            int64x2_t v224 = 0uLL;
            int64x2_t v228 = 0uLL;
            int64x2_t v232 = 0uLL;
          }
          uint64_t v91 = v86 + v88;
          unsigned int v92 = v70[3];
          if (v70[3])
          {
            if (v92 < 0xF0)
            {
              if (v92 == 63)
              {
                int64x2_t v30 = *(int64x2_t *)(v91 + 16);
                uint64_t v94 = (const double *)(v91 + 32);
                *(float64x2x2_t *)v31.i8 = vld2q_f64(v94);
                int64x2_t v32 = vzip2q_s64(*(int64x2_t *)v91, v30);
                int64x2_t v221 = vzip1q_s64(*(int64x2_t *)v91, v30);
                int64x2_t v225 = v32;
                int64x2_t v229 = v31;
                int64x2_t v233 = v95;
                uint64_t v93 = 64;
              }
              else if (v92 == 1)
              {
                int64x2_t v32 = (int64x2_t)vld1q_dup_s16((const __int16 *)v91);
                int64x2_t v221 = v32;
                int64x2_t v225 = v32;
                int64x2_t v229 = v32;
                int64x2_t v233 = v32;
                uint64_t v93 = 2;
              }
              else
              {
                uint64_t v93 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(&v221, 64, v91, v92, *(int8x8_t *)v32.i8, *(double *)v30.i64, *(int8x8_t *)v31.i8);
              }
            }
            else
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(v221.i16, 64, v91, v92, v76);
              uint64_t v93 = 32;
            }
          }
          else
          {
            uint64_t v93 = 0;
            int64x2_t v221 = 0uLL;
            int64x2_t v225 = 0uLL;
            int64x2_t v229 = 0uLL;
            int64x2_t v233 = 0uLL;
          }
          uint64_t v96 = v91 + v93;
          unsigned int v97 = v70[4];
          if (v70[4])
          {
            if (v97 < 0xF0)
            {
              if (v97 == 63)
              {
                int64x2_t v30 = *(int64x2_t *)(v96 + 16);
                int8x8_t v99 = (const double *)(v96 + 32);
                *(float64x2x2_t *)v31.i8 = vld2q_f64(v99);
                int64x2_t v32 = vzip2q_s64(*(int64x2_t *)v96, v30);
                int64x2_t v206 = vzip1q_s64(*(int64x2_t *)v96, v30);
                int64x2_t v210 = v32;
                int64x2_t v214 = v31;
                int64x2_t v218 = v100;
                uint64_t v98 = 64;
              }
              else if (v97 == 1)
              {
                int64x2_t v32 = (int64x2_t)vld1q_dup_s16((const __int16 *)v96);
                int64x2_t v206 = v32;
                int64x2_t v210 = v32;
                int64x2_t v214 = v32;
                int64x2_t v218 = v32;
                uint64_t v98 = 2;
              }
              else
              {
                uint64_t v98 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(&v206, 64, v96, v97, *(int8x8_t *)v32.i8, *(double *)v30.i64, *(int8x8_t *)v31.i8);
              }
            }
            else
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(v206.i16, 64, v96, v97, v76);
              uint64_t v98 = 32;
            }
          }
          else
          {
            uint64_t v98 = 0;
            int64x2_t v206 = 0uLL;
            int64x2_t v210 = 0uLL;
            int64x2_t v214 = 0uLL;
            int64x2_t v218 = 0uLL;
          }
          uint64_t v101 = v96 + v98;
          unsigned int v102 = v70[5];
          if (v70[5])
          {
            if (v102 < 0xF0)
            {
              if (v102 == 63)
              {
                int64x2_t v30 = *(int64x2_t *)(v101 + 16);
                unint64_t v104 = (const double *)(v101 + 32);
                *(float64x2x2_t *)v31.i8 = vld2q_f64(v104);
                int64x2_t v32 = vzip2q_s64(*(int64x2_t *)v101, v30);
                int64x2_t v207 = vzip1q_s64(*(int64x2_t *)v101, v30);
                int64x2_t v211 = v32;
                int64x2_t v215 = v31;
                int64x2_t v219 = v105;
                uint64_t v103 = 64;
              }
              else if (v102 == 1)
              {
                int64x2_t v32 = (int64x2_t)vld1q_dup_s16((const __int16 *)v101);
                int64x2_t v207 = v32;
                int64x2_t v211 = v32;
                int64x2_t v215 = v32;
                int64x2_t v219 = v32;
                uint64_t v103 = 2;
              }
              else
              {
                uint64_t v103 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(&v207, 64, v101, v102, *(int8x8_t *)v32.i8, *(double *)v30.i64, *(int8x8_t *)v31.i8);
              }
            }
            else
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(v207.i16, 64, v101, v102, v76);
              uint64_t v103 = 32;
            }
          }
          else
          {
            uint64_t v103 = 0;
            int64x2_t v207 = 0uLL;
            int64x2_t v211 = 0uLL;
            int64x2_t v215 = 0uLL;
            int64x2_t v219 = 0uLL;
          }
          uint64_t v106 = v101 + v103;
          unsigned int v107 = v70[6];
          if (v70[6])
          {
            if (v107 < 0xF0)
            {
              if (v107 == 63)
              {
                int64x2_t v30 = *(int64x2_t *)(v106 + 16);
                unint64_t v148 = (const double *)(v106 + 32);
                *(float64x2x2_t *)v31.i8 = vld2q_f64(v148);
                int64x2_t v32 = vzip2q_s64(*(int64x2_t *)v106, v30);
                int64x2_t v222 = vzip1q_s64(*(int64x2_t *)v106, v30);
                int64x2_t v226 = v32;
                int64x2_t v230 = v31;
                int64x2_t v234 = v149;
                uint64_t v108 = 64;
                unsigned int v109 = v70[7];
                if (!v70[7]) {
                  goto LABEL_152;
                }
              }
              else if (v107 == 1)
              {
                int64x2_t v32 = (int64x2_t)vld1q_dup_s16((const __int16 *)v106);
                int64x2_t v222 = v32;
                int64x2_t v226 = v32;
                int64x2_t v230 = v32;
                int64x2_t v234 = v32;
                uint64_t v108 = 2;
                unsigned int v109 = v70[7];
                if (!v70[7]) {
                  goto LABEL_152;
                }
              }
              else
              {
                uint64_t v108 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(&v222, 64, v106, v107, *(int8x8_t *)v32.i8, *(double *)v30.i64, *(int8x8_t *)v31.i8);
                unsigned int v109 = v70[7];
                if (!v70[7])
                {
LABEL_152:
                  int64x2_t v223 = 0uLL;
                  int64x2_t v227 = 0uLL;
                  float64x2_t v231 = 0uLL;
                  float64x2_t v235 = 0uLL;
                  goto LABEL_156;
                }
              }
            }
            else
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(v222.i16, 64, v106, v107, v76);
              uint64_t v108 = 32;
              unsigned int v109 = v70[7];
              if (!v70[7]) {
                goto LABEL_152;
              }
            }
          }
          else
          {
            uint64_t v108 = 0;
            int64x2_t v222 = 0uLL;
            int64x2_t v226 = 0uLL;
            int64x2_t v230 = 0uLL;
            int64x2_t v234 = 0uLL;
            unsigned int v109 = v70[7];
            if (!v70[7]) {
              goto LABEL_152;
            }
          }
          uint64_t v110 = v106 + v108;
          if (v109 >= 0xF0)
          {
            AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(v223.i16, 64, v110, v109, v76);
LABEL_156:
            a7 = v177;
            uint64_t v111 = v199;
            if (!v199) {
              goto LABEL_206;
            }
            goto LABEL_157;
          }
          a7 = v177;
          if (v109 == 63)
          {
            int64x2_t v150 = *(int64x2_t *)(v110 + 16);
            unsigned int v151 = (const double *)(v110 + 32);
            float64x2x2_t v237 = vld2q_f64(v151);
            int64x2_t v152 = vzip2q_s64(*(int64x2_t *)v110, v150);
            int64x2_t v223 = vzip1q_s64(*(int64x2_t *)v110, v150);
            int64x2_t v227 = v152;
            float64x2_t v231 = v237.val[0];
            float64x2_t v235 = v237.val[1];
            uint64_t v111 = v199;
            if (!v199) {
              goto LABEL_206;
            }
          }
          else if (v109 == 1)
          {
            int16x8_t v147 = vld1q_dup_s16((const __int16 *)v110);
            int64x2_t v223 = (int64x2_t)v147;
            int64x2_t v227 = (int64x2_t)v147;
            float64x2_t v231 = (float64x2_t)v147;
            float64x2_t v235 = (float64x2_t)v147;
            uint64_t v111 = v199;
            if (!v199) {
              goto LABEL_206;
            }
          }
          else
          {
            AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(&v223, 64, v110, v109, *(int8x8_t *)v32.i8, *(double *)v30.i64, *(int8x8_t *)v31.i8);
            uint64_t v111 = v199;
            if (!v199) {
              goto LABEL_206;
            }
          }
LABEL_157:
          if (v200)
          {
            uint64_t v112 = 0;
            unint64_t v113 = (unint64_t)v197 << 6;
            uint64_t v114 = 4 * v198;
            uint64_t v115 = &v204.i8[v113 + v114];
            unint64_t v116 = v195;
            uint64_t v117 = v196;
            unint64_t v118 = 4 * v200;
            if (v118 <= 1) {
              unint64_t v119 = 1;
            }
            else {
              unint64_t v119 = 4 * v200;
            }
            unint64_t v120 = v113 + v114;
            int32x4_t v121 = &v204.i8[v113 + v114];
            if (v119) {
              BOOL v122 = (v119 - 1) >> 32 == 0;
            }
            else {
              BOOL v122 = 0;
            }
            uint64_t v123 = v119 & 0x3FFFFFFE0;
            uint64_t v124 = v119 & 0x3FFFFFFF8;
            char v126 = !v122 || v119 < 8;
            unsigned int v127 = &v205.i8[v120];
            int32x4_t v128 = (long long *)(v195 + 16);
            uint64_t v129 = v115;
            unint64_t v130 = v195;
            do
            {
              int32x4_t v131 = (char *)(v116 + v117 * v112);
              uint64_t v132 = &v115[64 * v112];
              if ((unint64_t)(&v121[64 * v112] - v131) < 0x20) {
                char v133 = 1;
              }
              else {
                char v133 = v126;
              }
              if (v133)
              {
                int v134 = 0;
                goto LABEL_188;
              }
              if (v119 >= 0x20)
              {
                uint64_t v136 = v128;
                unsigned int v137 = v127;
                uint64_t v138 = v119 & 0x3FFFFFFE0;
                do
                {
                  long long v139 = *v136;
                  *((_OWORD *)v137 - 1) = *(v136 - 1);
                  *(_OWORD *)unsigned int v137 = v139;
                  v137 += 32;
                  v136 += 2;
                  v138 -= 32;
                }
                while (v138);
                if (v119 == v123) {
                  goto LABEL_171;
                }
                uint64_t v135 = v119 & 0x3FFFFFFE0;
                if ((v119 & 0x18) == 0)
                {
                  v131 += v123;
                  v132 += v123;
                  int v134 = v119 & 0xFFFFFFE0;
                  goto LABEL_188;
                }
              }
              else
              {
                uint64_t v135 = 0;
              }
              v132 += v124;
              uint64_t v140 = v135 - v124;
              int v141 = (uint64_t *)(v130 + v135);
              uint64_t v142 = &v129[v135];
              do
              {
                uint64_t v143 = *v141++;
                *(void *)uint64_t v142 = v143;
                v142 += 8;
                v140 += 8;
              }
              while (v140);
              if (v119 == v124) {
                goto LABEL_171;
              }
              v131 += v124;
              int v134 = v119 & 0xFFFFFFF8;
LABEL_188:
              unsigned int v144 = v134 + 1;
              do
              {
                char v145 = *v131++;
                *v132++ = v145;
              }
              while (v118 > v144++);
LABEL_171:
              ++v112;
              v127 += 64;
              int32x4_t v128 = (long long *)((char *)v128 + v117);
              v130 += v117;
              v129 += 64;
            }
            while (v112 != v111);
          }
LABEL_206:
          AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::compressMacroblock((unint64_t)&v204, 64, (unint64_t)v193, v194, v201, v202, *(_DWORD *)(*(void *)(v188 + 208) + 52));
LABEL_207:
          if (v190) {
            memcpy(__src, v72, 0x200uLL);
          }
          BOOL v23 = v35 == v178 >> 4;
          unsigned int v35 = v74;
          uint64_t v28 = v188;
        }
        while (!v23);
        BOOL v23 = v18++ == v171;
      }
      while (!v23);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>,false,(AGXHardwareTextureMemoryOrder)2>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10, uint64_t a11, int a12)
{
  uint64_t v12 = MEMORY[0x270FA5388](a1);
  unsigned int v14 = v13;
  unsigned int v16 = v15;
  unsigned int v18 = v17;
  unsigned int v20 = v19;
  uint64_t v175 = v21;
  uint64_t v176 = v22;
  uint64_t v165 = v23;
  uint64_t v24 = v12;
  uint64_t v327 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(v12, 0);
  uint64_t v25 = v24;
  unsigned int v180 = v14;
  unsigned int v26 = v14 >> 3;
  unsigned int v164 = v14 + a10 - 1;
  unsigned int v166 = v164 >> 3;
  unsigned int v27 = *(unsigned __int8 *)(*(void *)(v24 + 208) + 88);
  unsigned int v28 = *(_DWORD *)(v24 + 112);
  uint64_t v183 = v25;
  if (*(void *)(v25 + 168))
  {
    __int16 CacheMode = IOSurfaceGetCacheMode();
    uint64_t v25 = v183;
    int v30 = CacheMode & 0xF00;
  }
  else
  {
    int v30 = 0;
  }
  BOOL v31 = (v30 & 0xD00) == 0 || v30 == 768;
  int v32 = v30 & 0xE00;
  int v34 = !v31 && v32 != 1024;
  int v185 = v34;
  BOOL isLevelTiled = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::isLevelTiled(v25, *(_DWORD *)(v25 + 144) + a12);
  uint64_t v36 = v183;
  BOOL v174 = isLevelTiled;
  if (v26 <= v166)
  {
    unsigned int v173 = v16 + a9 - 1;
    unsigned int v163 = v16 >> 4;
    if (v16 >> 4 <= v173 >> 4)
    {
      unsigned int v160 = v20 - 1;
      unsigned int v182 = (v20 - 1) >> 4;
      int v181 = ((v20 - 1) & 0xF) + 1;
      int v161 = ((v18 - 1) & 7) + 1;
      unsigned int v162 = (v18 - 1) >> 3;
      uint32x2_t v37 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(v20, v18), (int32x2_t)0xF00000007);
      int8x8_t v38 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32(vadd_s32((int32x2_t)vshl_u32(v37, (uint32x2_t)0xFFFFFFFCFFFFFFFDLL), (int32x2_t)-1))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x2000000010, v37));
      __int32 v171 = v38.i32[0] | v38.i32[1];
      int8x8_t v170 = v38;
      BOOL v169 = v38.i32[0] != 0;
      BOOL v168 = v38.i32[1] != 0;
      unint64_t v159 = 8 * v28 * (unint64_t)v27;
      unsigned int v172 = v16;
      do
      {
        unsigned int v39 = (8 * v26) | 7;
        if (8 * v26 <= v180) {
          int v40 = v180;
        }
        else {
          int v40 = 8 * v26;
        }
        unsigned int v41 = v163;
        if (v164 < v39) {
          unsigned int v39 = v164;
        }
        unsigned int v179 = 8 * v26;
        int v167 = v40 - 8 * v26;
        int v178 = v39 - v40 + 1;
        int v42 = v161;
        if (v26 != v162) {
          int v42 = 8;
        }
        unsigned int v186 = v42;
        uint64_t v177 = v165 + (v40 - v180) * a11;
        do
        {
          unsigned int v43 = 16 * v41;
          unsigned int v44 = 16 * (v41 + 1) - 1;
          if (16 * v41 <= v16) {
            int v45 = v16;
          }
          else {
            int v45 = 16 * v41;
          }
          if (v173 < v44) {
            unsigned int v44 = v173;
          }
          int v46 = v44 - v45 + 1;
          if (v41 == v182) {
            unsigned int v47 = v181;
          }
          else {
            unsigned int v47 = 16;
          }
          BOOL v48 = 1;
          if (v179 >= v180 && v43 >= v16)
          {
            int v49 = v181;
            if (v41 != v182) {
              int v49 = 16;
            }
            BOOL v48 = v46 != v49 || v178 != v186;
          }
          if (v174)
          {
            unsigned int v70 = 0;
            uint64_t v71 = v159 >> (*(unsigned char *)(v36 + 57) != 0);
            char v72 = 1;
            if (v71 > 127)
            {
              if (v71 > 511)
              {
                if (v71 == 512)
                {
                  char v73 = 0;
                  unsigned int v70 = 16;
                  unsigned int v74 = 16;
                }
                else
                {
                  char v73 = 1;
                  unsigned int v74 = 0;
                  if (v71 == 1024)
                  {
                    unsigned int v74 = 8;
                    unsigned int v70 = 16;
                  }
                }
              }
              else if (v71 == 128)
              {
                char v72 = 0;
                char v73 = 0;
                unsigned int v70 = 32;
                unsigned int v74 = 32;
              }
              else
              {
                char v73 = 1;
                unsigned int v74 = 0;
                if (v71 == 256)
                {
                  char v72 = 0;
                  char v73 = 0;
                  unsigned int v74 = 16;
                  unsigned int v70 = 32;
                }
              }
            }
            else
            {
              char v73 = 1;
              unsigned int v74 = 0;
              switch(v71)
              {
                case 4:
                  char v72 = 0;
                  char v73 = 0;
                  unsigned int v74 = 128;
                  unsigned int v70 = 256;
                  break;
                case 5:
                case 6:
                case 7:
                case 9:
                case 10:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 17:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                  break;
                case 8:
                  char v72 = 0;
                  char v73 = 0;
                  unsigned int v70 = 128;
                  unsigned int v74 = 128;
                  break;
                case 16:
                  char v72 = 0;
                  char v73 = 0;
                  unsigned int v74 = 64;
                  unsigned int v70 = 128;
                  break;
                case 32:
                  char v72 = 0;
                  char v73 = 0;
                  unsigned int v70 = 64;
                  unsigned int v74 = 64;
                  break;
                default:
                  if (v71 == 64)
                  {
                    char v72 = 0;
                    char v73 = 0;
                    unsigned int v74 = 32;
                    unsigned int v70 = 64;
                  }
                  break;
              }
            }
            unsigned int v148 = (v70 >> 4) - 1;
            if (v72) {
              unsigned int v149 = 0;
            }
            else {
              unsigned int v149 = 32 - __clz(~(-1 << -(char)__clz(v148)));
            }
            unsigned int v150 = (v74 >> 3) - 1;
            if (v73)
            {
              unsigned int v151 = 0;
              if (v149) {
                goto LABEL_207;
              }
            }
            else
            {
              unsigned int v151 = 32 - __clz(~(-1 << -(char)__clz(v150)));
              if (v151 | v149)
              {
LABEL_207:
                int v152 = 0;
                uint64_t v153 = 0;
                int v154 = v41 & v148;
                int v155 = v26 & v150;
                BOOL v156 = v151 != 0;
                BOOL v157 = v149 != 0;
                int v158 = 1;
                do
                {
                  --v151;
                  if (v156) {
                    v153 |= (unint64_t)(v158 & v155) << v152++;
                  }
                  else {
                    unsigned int v151 = 0;
                  }
                  --v149;
                  if (v157) {
                    v153 |= (unint64_t)(v158 & v154) << v152++;
                  }
                  else {
                    unsigned int v149 = 0;
                  }
                  v158 *= 2;
                  --v152;
                  BOOL v157 = v149 != 0;
                  BOOL v156 = v151 != 0;
                }
                while (v149 | v151);
                goto LABEL_219;
              }
            }
            uint64_t v153 = 0;
LABEL_219:
            unint64_t v58 = ((unint64_t)(v43 / v70 + v179 / v74 * ((v70 + v160) / v70)) << 14) + (v153 << 10);
            goto LABEL_59;
          }
          if (v171)
          {
            int v51 = 0;
            uint64_t v52 = 0;
            int v53 = 1;
            BOOL v54 = v169;
            BOOL v55 = v168;
            __int32 v56 = v170.i32[0];
            __int32 v57 = v170.i32[1];
            do
            {
              --v56;
              if (v54) {
                v52 |= (unint64_t)(v53 & v26) << v51++;
              }
              else {
                __int32 v56 = 0;
              }
              --v57;
              if (v55) {
                v52 |= (unint64_t)(v53 & v41) << v51++;
              }
              else {
                __int32 v57 = 0;
              }
              v53 *= 2;
              --v51;
              BOOL v55 = v57 != 0;
              BOOL v54 = v56 != 0;
            }
            while (v57 | v56);
          }
          else
          {
            uint64_t v52 = 0;
          }
          unint64_t v58 = v52 << 10;
LABEL_59:
          unsigned int v59 = *(_DWORD *)(v36 + 128) >> (*(unsigned char *)(v36 + 144) + a12);
          if (v59 <= 1) {
            unsigned int v59 = 1;
          }
          unsigned int v60 = v59 + 15;
          if (v60 < 0x20) {
            unsigned int v61 = 0;
          }
          else {
            unsigned int v61 = 32 - __clz(~(-1 << -(char)__clz((v60 >> 4) - 1)));
          }
          unsigned int v62 = *(_DWORD *)(v36 + 132) >> (*(unsigned char *)(v36 + 144) + a12);
          if (v62 <= 1) {
            unsigned int v62 = 1;
          }
          unsigned int v63 = v62 + 7;
          if (v63 < 0x10)
          {
            unsigned int v64 = 0;
            if (!v61)
            {
LABEL_81:
              uint64_t v66 = 0;
              goto LABEL_82;
            }
          }
          else
          {
            unsigned int v64 = 32 - __clz(~(-1 << -(char)__clz((v63 >> 3) - 1)));
            if (!(v64 | v61)) {
              goto LABEL_81;
            }
          }
          int v65 = 0;
          uint64_t v66 = 0;
          BOOL v67 = v61 != 0;
          BOOL v68 = v64 != 0;
          int v69 = 1;
          do
          {
            --v61;
            if (v67) {
              v66 |= (unint64_t)(v69 & v41) << v65++;
            }
            else {
              unsigned int v61 = 0;
            }
            --v64;
            if (v68) {
              v66 |= (unint64_t)(v69 & v26) << v65++;
            }
            else {
              unsigned int v64 = 0;
            }
            v69 *= 2;
            --v65;
            BOOL v68 = v64 != 0;
            BOOL v67 = v61 != 0;
          }
          while (v64 | v61);
LABEL_82:
          int v75 = v47 < 0x10 || v48;
          int v76 = (unsigned __int8 *)(v176 + 8 * v66);
          uint64_t v77 = v177 + 16 * (v45 - v16);
          uint64_t v78 = (const double *)(v175 + v58);
          if (v186 < 8) {
            int v79 = 1;
          }
          else {
            int v79 = v75;
          }
          __dst = (double *)v78;
          if (v185)
          {
            uint64_t v78 = (const double *)v198;
            if (!v79) {
              goto LABEL_94;
            }
            memcpy(v198, __dst, sizeof(v198));
            uint64_t v36 = v183;
          }
          else if (!v79)
          {
LABEL_94:
            AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::compressMacroblock(v77, a11, (unint64_t)v78, v76, v47, v186, *(_DWORD *)(*(void *)(v36 + 208) + 52));
LABEL_95:
            unsigned int v16 = v172;
            unsigned int v80 = v41 + 1;
            if (v185) {
              goto LABEL_26;
            }
            goto LABEL_27;
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE18ELj2ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint3EEELb0EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = v36;
          uint64_t v188 = v78;
          unsigned __int8 v196 = v47;
          unsigned __int8 v197 = v186;
          unsigned int v192 = v167;
          unsigned int v193 = v45 - v43;
          float32x4_t v189 = v76;
          uint64_t v190 = v77;
          uint64_t v191 = a11;
          unsigned int v194 = v178;
          unsigned int v195 = v46;
          if (v48)
          {
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(v36 + 8) + 7384), block);
            goto LABEL_95;
          }
          uint64_t v81 = *(void *)(v36 + 208);
          int v82 = *(_DWORD *)(v81 + 52);
          unsigned int v83 = *v76;
          if (*v76)
          {
            if (v83 < 0xF0)
            {
              if (v83 == 7)
              {
                float64x2_t v85 = vld1q_dup_f64(v78);
                float64x2_t v199 = v85;
                float64x2_t v200 = v85;
                float64x2_t v201 = v85;
                float64x2_t v202 = v85;
                float64x2_t v215 = v85;
                float64x2_t v216 = v85;
                float64x2_t v217 = v85;
                float64x2_t v218 = v85;
                float64x2_t v231 = v85;
                float64x2_t v232 = v85;
                float64x2_t v233 = v85;
                float64x2_t v234 = v85;
                float64x2_t v247 = v85;
                float64x2_t v248 = v85;
                uint64_t v84 = 8;
                float64x2_t v249 = v85;
                float64x2_t v250 = v85;
              }
              else
              {
                uint64_t v84 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock((uint64_t)&v199, 256, (uint64_t)v78, v83);
              }
            }
            else
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock((int16x4_t *)&v199, 256, (unint64_t)v78, v83, *(_DWORD *)(v81 + 52));
              uint64_t v84 = 128;
            }
          }
          else
          {
            uint64_t v84 = 0;
            float64x2_t v202 = 0u;
            float64x2_t v201 = 0u;
            float64x2_t v200 = 0u;
            float64x2_t v199 = 0u;
            float64x2_t v215 = 0u;
            float64x2_t v216 = 0u;
            float64x2_t v217 = 0u;
            float64x2_t v218 = 0u;
            float64x2_t v231 = 0u;
            float64x2_t v232 = 0u;
            float64x2_t v233 = 0u;
            float64x2_t v234 = 0u;
            float64x2_t v247 = 0u;
            float64x2_t v248 = 0u;
            float64x2_t v249 = 0u;
            float64x2_t v250 = 0u;
          }
          unsigned int v80 = v41 + 1;
          uint64_t v86 = (const double *)((char *)v78 + v84);
          unsigned int v87 = v76[1];
          if (v76[1])
          {
            if (v87 < 0xF0)
            {
              if (v87 == 7)
              {
                float64x2_t v89 = vld1q_dup_f64(v86);
                float64x2_t v203 = v89;
                float64x2_t v204 = v89;
                float64x2_t v205 = v89;
                float64x2_t v206 = v89;
                float64x2_t v219 = v89;
                float64x2_t v220 = v89;
                float64x2_t v221 = v89;
                float64x2_t v222 = v89;
                float64x2_t v235 = v89;
                float64x2_t v236 = v89;
                float64x2_t v237 = v89;
                float64x2_t v238 = v89;
                float64x2_t v251 = v89;
                float64x2_t v252 = v89;
                uint64_t v88 = 8;
                float64x2_t v253 = v89;
                float64x2_t v254 = v89;
              }
              else
              {
                uint64_t v88 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock((uint64_t)&v203, 256, (uint64_t)v86, v87);
              }
            }
            else
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock((int16x4_t *)&v203, 256, (unint64_t)v86, v87, v82);
              uint64_t v88 = 128;
            }
          }
          else
          {
            uint64_t v88 = 0;
            float64x2_t v205 = 0u;
            float64x2_t v206 = 0u;
            float64x2_t v203 = 0u;
            float64x2_t v204 = 0u;
            float64x2_t v219 = 0u;
            float64x2_t v220 = 0u;
            float64x2_t v221 = 0u;
            float64x2_t v222 = 0u;
            float64x2_t v235 = 0u;
            float64x2_t v236 = 0u;
            float64x2_t v237 = 0u;
            float64x2_t v238 = 0u;
            float64x2_t v251 = 0u;
            float64x2_t v252 = 0u;
            float64x2_t v253 = 0u;
            float64x2_t v254 = 0u;
          }
          int64x2_t v90 = (const double *)((char *)v86 + v88);
          unsigned int v91 = v76[2];
          if (v76[2])
          {
            if (v91 < 0xF0)
            {
              if (v91 == 7)
              {
                float64x2_t v93 = vld1q_dup_f64(v90);
                float64x2_t v263 = v93;
                float64x2_t v264 = v93;
                float64x2_t v265 = v93;
                float64x2_t v266 = v93;
                float64x2_t v279 = v93;
                float64x2_t v280 = v93;
                float64x2_t v281 = v93;
                float64x2_t v282 = v93;
                float64x2_t v295 = v93;
                float64x2_t v296 = v93;
                float64x2_t v297 = v93;
                float64x2_t v298 = v93;
                float64x2_t v311 = v93;
                float64x2_t v312 = v93;
                float64x2_t v313 = v93;
                uint64_t v92 = 8;
                float64x2_t v314 = v93;
              }
              else
              {
                uint64_t v92 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock((uint64_t)&v263, 256, (uint64_t)v90, v91);
              }
            }
            else
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock((int16x4_t *)&v263, 256, (unint64_t)v90, v91, v82);
              uint64_t v92 = 128;
            }
          }
          else
          {
            uint64_t v92 = 0;
            float64x2_t v265 = 0u;
            float64x2_t v266 = 0u;
            float64x2_t v263 = 0u;
            float64x2_t v264 = 0u;
            float64x2_t v279 = 0u;
            float64x2_t v280 = 0u;
            float64x2_t v281 = 0u;
            float64x2_t v282 = 0u;
            float64x2_t v295 = 0u;
            float64x2_t v296 = 0u;
            float64x2_t v297 = 0u;
            float64x2_t v298 = 0u;
            float64x2_t v311 = 0u;
            float64x2_t v312 = 0u;
            float64x2_t v313 = 0u;
            float64x2_t v314 = 0u;
          }
          uint64_t v94 = (const double *)((char *)v90 + v92);
          unsigned int v95 = v76[3];
          if (v76[3])
          {
            if (v95 < 0xF0)
            {
              if (v95 == 7)
              {
                float64x2_t v97 = vld1q_dup_f64(v94);
                float64x2_t v267 = v97;
                float64x2_t v268 = v97;
                float64x2_t v269 = v97;
                float64x2_t v270 = v97;
                float64x2_t v283 = v97;
                float64x2_t v284 = v97;
                float64x2_t v285 = v97;
                float64x2_t v286 = v97;
                float64x2_t v299 = v97;
                float64x2_t v300 = v97;
                float64x2_t v301 = v97;
                float64x2_t v302 = v97;
                float64x2_t v315 = v97;
                float64x2_t v316 = v97;
                float64x2_t v317 = v97;
                uint64_t v96 = 8;
                float64x2_t v318 = v97;
              }
              else
              {
                uint64_t v96 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock((uint64_t)&v267, 256, (uint64_t)v94, v95);
              }
            }
            else
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock((int16x4_t *)&v267, 256, (unint64_t)v94, v95, v82);
              uint64_t v96 = 128;
            }
          }
          else
          {
            uint64_t v96 = 0;
            float64x2_t v269 = 0u;
            float64x2_t v270 = 0u;
            float64x2_t v267 = 0u;
            float64x2_t v268 = 0u;
            float64x2_t v283 = 0u;
            float64x2_t v284 = 0u;
            float64x2_t v285 = 0u;
            float64x2_t v286 = 0u;
            float64x2_t v299 = 0u;
            float64x2_t v300 = 0u;
            float64x2_t v301 = 0u;
            float64x2_t v302 = 0u;
            float64x2_t v315 = 0u;
            float64x2_t v316 = 0u;
            float64x2_t v317 = 0u;
            float64x2_t v318 = 0u;
          }
          uint64_t v98 = (const double *)((char *)v94 + v96);
          unsigned int v99 = v76[4];
          if (v76[4])
          {
            if (v99 < 0xF0)
            {
              if (v99 == 7)
              {
                float64x2_t v101 = vld1q_dup_f64(v98);
                float64x2_t v207 = v101;
                float64x2_t v208 = v101;
                float64x2_t v209 = v101;
                float64x2_t v210 = v101;
                float64x2_t v223 = v101;
                float64x2_t v224 = v101;
                float64x2_t v225 = v101;
                float64x2_t v226 = v101;
                float64x2_t v239 = v101;
                float64x2_t v240 = v101;
                float64x2_t v241 = v101;
                float64x2_t v242 = v101;
                float64x2_t v255 = v101;
                float64x2_t v256 = v101;
                uint64_t v100 = 8;
                float64x2_t v257 = v101;
                float64x2_t v258 = v101;
              }
              else
              {
                uint64_t v100 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock((uint64_t)&v207, 256, (uint64_t)v98, v99);
              }
            }
            else
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock((int16x4_t *)&v207, 256, (unint64_t)v98, v99, v82);
              uint64_t v100 = 128;
            }
          }
          else
          {
            uint64_t v100 = 0;
            float64x2_t v209 = 0u;
            float64x2_t v210 = 0u;
            float64x2_t v207 = 0u;
            float64x2_t v208 = 0u;
            float64x2_t v223 = 0u;
            float64x2_t v224 = 0u;
            float64x2_t v225 = 0u;
            float64x2_t v226 = 0u;
            float64x2_t v239 = 0u;
            float64x2_t v240 = 0u;
            float64x2_t v241 = 0u;
            float64x2_t v242 = 0u;
            float64x2_t v255 = 0u;
            float64x2_t v256 = 0u;
            float64x2_t v257 = 0u;
            float64x2_t v258 = 0u;
          }
          unsigned int v102 = (const double *)((char *)v98 + v100);
          unsigned int v103 = v76[5];
          if (v76[5])
          {
            if (v103 < 0xF0)
            {
              if (v103 == 7)
              {
                float64x2_t v105 = vld1q_dup_f64(v102);
                float64x2_t v211 = v105;
                float64x2_t v212 = v105;
                float64x2_t v213 = v105;
                float64x2_t v214 = v105;
                float64x2_t v227 = v105;
                float64x2_t v228 = v105;
                float64x2_t v229 = v105;
                float64x2_t v230 = v105;
                float64x2_t v243 = v105;
                float64x2_t v244 = v105;
                float64x2_t v245 = v105;
                float64x2_t v246 = v105;
                float64x2_t v259 = v105;
                float64x2_t v260 = v105;
                uint64_t v104 = 8;
                float64x2_t v261 = v105;
                float64x2_t v262 = v105;
              }
              else
              {
                uint64_t v104 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock((uint64_t)&v211, 256, (uint64_t)v102, v103);
              }
            }
            else
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock((int16x4_t *)&v211, 256, (unint64_t)v102, v103, v82);
              uint64_t v104 = 128;
            }
          }
          else
          {
            uint64_t v104 = 0;
            float64x2_t v213 = 0u;
            float64x2_t v214 = 0u;
            float64x2_t v211 = 0u;
            float64x2_t v212 = 0u;
            float64x2_t v227 = 0u;
            float64x2_t v228 = 0u;
            float64x2_t v229 = 0u;
            float64x2_t v230 = 0u;
            float64x2_t v243 = 0u;
            float64x2_t v244 = 0u;
            float64x2_t v245 = 0u;
            float64x2_t v246 = 0u;
            float64x2_t v259 = 0u;
            float64x2_t v260 = 0u;
            float64x2_t v261 = 0u;
            float64x2_t v262 = 0u;
          }
          uint64_t v106 = (const double *)((char *)v102 + v104);
          unsigned int v107 = v76[6];
          if (v76[6])
          {
            if (v107 < 0xF0)
            {
              if (v107 == 7)
              {
                float64x2_t v146 = vld1q_dup_f64(v106);
                float64x2_t v271 = v146;
                float64x2_t v272 = v146;
                float64x2_t v273 = v146;
                float64x2_t v274 = v146;
                float64x2_t v287 = v146;
                float64x2_t v288 = v146;
                float64x2_t v289 = v146;
                float64x2_t v290 = v146;
                float64x2_t v303 = v146;
                float64x2_t v304 = v146;
                float64x2_t v305 = v146;
                float64x2_t v306 = v146;
                float64x2_t v319 = v146;
                float64x2_t v320 = v146;
                float64x2_t v321 = v146;
                uint64_t v108 = 8;
                float64x2_t v322 = v146;
                unsigned int v109 = v76[7];
                if (!v76[7]) {
                  goto LABEL_142;
                }
              }
              else
              {
                uint64_t v108 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock((uint64_t)&v271, 256, (uint64_t)v106, v107);
                unsigned int v109 = v76[7];
                if (!v76[7])
                {
LABEL_142:
                  float64x2_t v277 = 0u;
                  float64x2_t v278 = 0u;
                  float64x2_t v275 = 0u;
                  float64x2_t v276 = 0u;
                  float64x2_t v291 = 0u;
                  float64x2_t v292 = 0u;
                  float64x2_t v293 = 0u;
                  float64x2_t v294 = 0u;
                  float64x2_t v307 = 0u;
                  float64x2_t v308 = 0u;
                  float64x2_t v309 = 0u;
                  float64x2_t v310 = 0u;
                  float64x2_t v323 = 0u;
                  float64x2_t v324 = 0u;
                  float64x2_t v325 = 0u;
                  float64x2_t v326 = 0u;
                  goto LABEL_146;
                }
              }
            }
            else
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock((int16x4_t *)&v271, 256, (unint64_t)v106, v107, v82);
              uint64_t v108 = 128;
              unsigned int v109 = v76[7];
              if (!v76[7]) {
                goto LABEL_142;
              }
            }
          }
          else
          {
            uint64_t v108 = 0;
            float64x2_t v273 = 0u;
            float64x2_t v274 = 0u;
            float64x2_t v271 = 0u;
            float64x2_t v272 = 0u;
            float64x2_t v287 = 0u;
            float64x2_t v288 = 0u;
            float64x2_t v289 = 0u;
            float64x2_t v290 = 0u;
            float64x2_t v303 = 0u;
            float64x2_t v304 = 0u;
            float64x2_t v305 = 0u;
            float64x2_t v306 = 0u;
            float64x2_t v319 = 0u;
            float64x2_t v320 = 0u;
            float64x2_t v321 = 0u;
            float64x2_t v322 = 0u;
            unsigned int v109 = v76[7];
            if (!v76[7]) {
              goto LABEL_142;
            }
          }
          uint64_t v110 = (const double *)((char *)v106 + v108);
          if (v109 >= 0xF0)
          {
            AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock((int16x4_t *)&v275, 256, (unint64_t)v110, v109, v82);
LABEL_146:
            unsigned int v16 = v172;
            uint64_t v111 = v194;
            if (!v194) {
              goto LABEL_187;
            }
            goto LABEL_147;
          }
          unsigned int v16 = v172;
          if (v109 == 7)
          {
            float64x2_t v147 = vld1q_dup_f64(v110);
            float64x2_t v275 = v147;
            float64x2_t v276 = v147;
            float64x2_t v277 = v147;
            float64x2_t v278 = v147;
            float64x2_t v291 = v147;
            float64x2_t v292 = v147;
            float64x2_t v293 = v147;
            float64x2_t v294 = v147;
            float64x2_t v307 = v147;
            float64x2_t v308 = v147;
            float64x2_t v309 = v147;
            float64x2_t v310 = v147;
            float64x2_t v323 = v147;
            float64x2_t v324 = v147;
            float64x2_t v325 = v147;
            float64x2_t v326 = v147;
            uint64_t v111 = v194;
            if (!v194) {
              goto LABEL_187;
            }
          }
          else
          {
            AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock((uint64_t)&v275, 256, (uint64_t)v110, v109);
            uint64_t v111 = v194;
            if (!v194) {
              goto LABEL_187;
            }
          }
LABEL_147:
          if (v195)
          {
            uint64_t v112 = 0;
            unint64_t v113 = (unint64_t)v192 << 8;
            uint64_t v114 = 16 * v193;
            uint64_t v115 = (char *)&v199 + v113 + v114;
            uint64_t v116 = v190;
            uint64_t v117 = v191;
            unint64_t v118 = 16 * v195;
            if (v118 <= 1) {
              unint64_t v119 = 1;
            }
            else {
              unint64_t v119 = 16 * v195;
            }
            unint64_t v120 = v113 + v114;
            int32x4_t v121 = (char *)&v199 + v113 + v114;
            if (v119) {
              BOOL v122 = (v119 - 1) >> 32 == 0;
            }
            else {
              BOOL v122 = 0;
            }
            char v123 = !v122;
            uint64_t v124 = v119 & 0xFFFFFFFE0;
            uint64_t v125 = v119 & 0xFFFFFFFF0;
            char v126 = (char *)&v200 + v120;
            unsigned int v127 = (long long *)(v190 + 16);
            int32x4_t v128 = v115;
            uint64_t v129 = v190;
            do
            {
              unint64_t v130 = (char *)(v116 + v117 * v112);
              int32x4_t v131 = &v115[256 * v112];
              if ((unint64_t)(&v121[256 * v112] - v130) < 0x20) {
                char v132 = 1;
              }
              else {
                char v132 = v123;
              }
              if (v132)
              {
                int v133 = 0;
                goto LABEL_175;
              }
              if (v119 >= 0x20)
              {
                long long v139 = v127;
                uint64_t v140 = v126;
                uint64_t v141 = v119 & 0xFFFFFFFE0;
                do
                {
                  long long v142 = *v139;
                  *(v140 - 1) = *(v139 - 1);
                  *uint64_t v140 = v142;
                  v140 += 2;
                  v139 += 2;
                  v141 -= 32;
                }
                while (v141);
                if (v119 == v124) {
                  goto LABEL_158;
                }
                uint64_t v134 = v119 & 0xFFFFFFFE0;
                if ((v119 & 0x10) == 0)
                {
                  v130 += v124;
                  v131 += v124;
                  int v133 = v119 & 0xFFFFFFE0;
                  goto LABEL_175;
                }
              }
              else
              {
                uint64_t v134 = 0;
              }
              v131 += v125;
              unint64_t v135 = v134 - (v119 & 0xFFFFFFFF0);
              uint64_t v136 = (uint64_t *)(v129 + v134);
              unsigned int v137 = &v128[v134];
              do
              {
                uint64_t v138 = *v136++;
                *(void *)unsigned int v137 = v138;
                v137 += 8;
                v135 += 8;
              }
              while (v135);
              if (v119 == v125) {
                goto LABEL_158;
              }
              v130 += v125;
              int v133 = v119 & 0xFFFFFFF0;
LABEL_175:
              unsigned int v143 = v133 + 1;
              do
              {
                char v144 = *v130++;
                *v131++ = v144;
              }
              while (v118 > v143++);
LABEL_158:
              ++v112;
              v126 += 256;
              unsigned int v127 = (long long *)((char *)v127 + v117);
              v129 += v117;
              v128 += 256;
            }
            while (v112 != v111);
          }
LABEL_187:
          AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::compressMacroblock((uint64_t)&v199, 256, (unint64_t)v188, v189, v196, v197, *(_DWORD *)(*(void *)(v183 + 208) + 52));
          if (v185) {
LABEL_26:
          }
            memcpy(__dst, v78, 0x800uLL);
LABEL_27:
          BOOL v31 = v41 == v173 >> 4;
          unsigned int v41 = v80;
          uint64_t v36 = v183;
        }
        while (!v31);
        BOOL v31 = v26++ == v166;
      }
      while (!v31);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>,false,(AGXHardwareTextureMemoryOrder)2>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10, uint64_t a11, int a12)
{
  uint64_t v12 = MEMORY[0x270FA5388](a1);
  unsigned int v14 = v13;
  unsigned int v16 = v15;
  unsigned int v18 = v17;
  unsigned int v20 = v19;
  uint64_t v148 = v21;
  uint64_t v149 = v22;
  uint64_t v138 = v23;
  uint64_t v24 = v12;
  v178[208] = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(v12, 0);
  uint64_t v25 = v24;
  unsigned int v153 = v14;
  unsigned int v26 = v14 >> 3;
  unsigned int v137 = v14 + a10 - 1;
  unsigned int v139 = v137 >> 3;
  unsigned int v27 = *(unsigned __int8 *)(*(void *)(v24 + 208) + 88);
  unsigned int v28 = *(_DWORD *)(v24 + 112);
  uint64_t v157 = v25;
  if (*(void *)(v25 + 168))
  {
    __int16 CacheMode = IOSurfaceGetCacheMode();
    uint64_t v25 = v157;
    int v30 = CacheMode & 0xF00;
  }
  else
  {
    int v30 = 0;
  }
  BOOL v31 = (v30 & 0xD00) == 0 || v30 == 768;
  int v32 = v30 & 0xE00;
  int v34 = !v31 && v32 != 1024;
  int v158 = v34;
  BOOL isLevelTiled = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::isLevelTiled(v25, *(_DWORD *)(v25 + 144) + a12);
  uint64_t v36 = v157;
  BOOL v147 = isLevelTiled;
  if (v26 <= v139)
  {
    unsigned int v146 = v16 + a9 - 1;
    unsigned int v136 = v16 >> 4;
    if (v16 >> 4 <= v146 >> 4)
    {
      unsigned int v133 = v20 - 1;
      unsigned int v135 = (v18 - 1) >> 3;
      int v155 = ((v20 - 1) & 0xF) + 1;
      unsigned int v156 = (v20 - 1) >> 4;
      int v134 = ((v18 - 1) & 7) + 1;
      uint32x2_t v37 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(v20, v18), (int32x2_t)0xF00000007);
      int8x8_t v38 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32(vadd_s32((int32x2_t)vshl_u32(v37, (uint32x2_t)0xFFFFFFFCFFFFFFFDLL), (int32x2_t)-1))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x2000000010, v37));
      __int32 v144 = v38.i32[0] | v38.i32[1];
      int8x8_t v143 = v38;
      BOOL v141 = v38.i32[1] != 0;
      BOOL v142 = v38.i32[0] != 0;
      unint64_t v132 = 8 * v28 * (unint64_t)v27;
      unsigned int v145 = v16;
      do
      {
        unsigned int v39 = (8 * v26) | 7;
        if (8 * v26 <= v153) {
          int v40 = v153;
        }
        else {
          int v40 = 8 * v26;
        }
        unsigned int v41 = v136;
        if (v137 < v39) {
          unsigned int v39 = v137;
        }
        int v140 = v40 - 8 * v26;
        int v151 = v39 - v40 + 1;
        unsigned int v152 = 8 * v26;
        if (v26 == v135) {
          unsigned int v42 = v134;
        }
        else {
          unsigned int v42 = 8;
        }
        uint64_t v150 = v138 + (v40 - v153) * a11;
        unsigned int v154 = v42;
        do
        {
          unsigned int v43 = 16 * v41;
          unsigned int v44 = 16 * (v41 + 1) - 1;
          if (16 * v41 <= v16) {
            int v45 = v16;
          }
          else {
            int v45 = 16 * v41;
          }
          if (v146 < v44) {
            unsigned int v44 = v146;
          }
          int v46 = v44 - v45 + 1;
          if (v41 == v156) {
            unsigned int v47 = v155;
          }
          else {
            unsigned int v47 = 16;
          }
          BOOL v48 = 1;
          if (v152 >= v153 && v43 >= v16)
          {
            int v49 = v155;
            if (v41 != v156) {
              int v49 = 16;
            }
            BOOL v48 = v46 != v49 || v151 != v42;
          }
          if (v147)
          {
            unsigned int v70 = 0;
            uint64_t v71 = v132 >> (*(unsigned char *)(v36 + 57) != 0);
            char v72 = 1;
            if (v71 > 127)
            {
              if (v71 > 511)
              {
                if (v71 == 512)
                {
                  char v73 = 0;
                  unsigned int v70 = 16;
                  unsigned int v74 = 16;
                }
                else
                {
                  char v73 = 1;
                  unsigned int v74 = 0;
                  if (v71 == 1024)
                  {
                    unsigned int v74 = 8;
                    unsigned int v70 = 16;
                  }
                }
              }
              else if (v71 == 128)
              {
                char v72 = 0;
                char v73 = 0;
                unsigned int v70 = 32;
                unsigned int v74 = 32;
              }
              else
              {
                char v73 = 1;
                unsigned int v74 = 0;
                if (v71 == 256)
                {
                  char v72 = 0;
                  char v73 = 0;
                  unsigned int v74 = 16;
                  unsigned int v70 = 32;
                }
              }
            }
            else
            {
              char v73 = 1;
              unsigned int v74 = 0;
              switch(v71)
              {
                case 4:
                  char v72 = 0;
                  char v73 = 0;
                  unsigned int v74 = 128;
                  unsigned int v70 = 256;
                  break;
                case 5:
                case 6:
                case 7:
                case 9:
                case 10:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 17:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                  break;
                case 8:
                  char v72 = 0;
                  char v73 = 0;
                  unsigned int v70 = 128;
                  unsigned int v74 = 128;
                  break;
                case 16:
                  char v72 = 0;
                  char v73 = 0;
                  unsigned int v74 = 64;
                  unsigned int v70 = 128;
                  break;
                case 32:
                  char v72 = 0;
                  char v73 = 0;
                  unsigned int v70 = 64;
                  unsigned int v74 = 64;
                  break;
                default:
                  if (v71 == 64)
                  {
                    char v72 = 0;
                    char v73 = 0;
                    unsigned int v74 = 32;
                    unsigned int v70 = 64;
                  }
                  break;
              }
            }
            unsigned int v121 = (v70 >> 4) - 1;
            if (v72) {
              unsigned int v122 = 0;
            }
            else {
              unsigned int v122 = 32 - __clz(~(-1 << -(char)__clz(v121)));
            }
            unsigned int v123 = (v74 >> 3) - 1;
            if (v73)
            {
              unsigned int v124 = 0;
              if (v122) {
                goto LABEL_143;
              }
            }
            else
            {
              unsigned int v124 = 32 - __clz(~(-1 << -(char)__clz(v123)));
              if (v124 | v122)
              {
LABEL_143:
                int v125 = 0;
                uint64_t v126 = 0;
                int v127 = v41 & v121;
                int v128 = v26 & v123;
                BOOL v129 = v124 != 0;
                BOOL v130 = v122 != 0;
                int v131 = 1;
                do
                {
                  --v124;
                  if (v129) {
                    v126 |= (unint64_t)(v131 & v128) << v125++;
                  }
                  else {
                    unsigned int v124 = 0;
                  }
                  --v122;
                  if (v130) {
                    v126 |= (unint64_t)(v131 & v127) << v125++;
                  }
                  else {
                    unsigned int v122 = 0;
                  }
                  v131 *= 2;
                  --v125;
                  BOOL v130 = v122 != 0;
                  BOOL v129 = v124 != 0;
                }
                while (v122 | v124);
                goto LABEL_155;
              }
            }
            uint64_t v126 = 0;
LABEL_155:
            unint64_t v58 = ((unint64_t)(v43 / v70 + v152 / v74 * ((v70 + v133) / v70)) << 14) + (v126 << 11);
            goto LABEL_59;
          }
          if (v144)
          {
            int v51 = 0;
            uint64_t v52 = 0;
            int v53 = 1;
            BOOL v54 = v141;
            BOOL v55 = v142;
            __int32 v56 = v143.i32[0];
            __int32 v57 = v143.i32[1];
            do
            {
              --v56;
              if (v55) {
                v52 |= (unint64_t)(v53 & v26) << v51++;
              }
              else {
                __int32 v56 = 0;
              }
              --v57;
              if (v54) {
                v52 |= (unint64_t)(v53 & v41) << v51++;
              }
              else {
                __int32 v57 = 0;
              }
              v53 *= 2;
              --v51;
              BOOL v54 = v57 != 0;
              BOOL v55 = v56 != 0;
            }
            while (v57 | v56);
          }
          else
          {
            uint64_t v52 = 0;
          }
          unint64_t v58 = v52 << 11;
LABEL_59:
          unsigned int v59 = *(_DWORD *)(v36 + 128) >> (*(unsigned char *)(v36 + 144) + a12);
          if (v59 <= 1) {
            unsigned int v59 = 1;
          }
          unsigned int v60 = v59 + 15;
          if (v60 < 0x20) {
            unsigned int v61 = 0;
          }
          else {
            unsigned int v61 = 32 - __clz(~(-1 << -(char)__clz((v60 >> 4) - 1)));
          }
          unsigned int v62 = *(_DWORD *)(v36 + 132) >> (*(unsigned char *)(v36 + 144) + a12);
          if (v62 <= 1) {
            unsigned int v62 = 1;
          }
          unsigned int v63 = v62 + 7;
          if (v63 < 0x10)
          {
            unsigned int v64 = 0;
            if (!v61)
            {
LABEL_81:
              uint64_t v66 = 0;
              goto LABEL_82;
            }
          }
          else
          {
            unsigned int v64 = 32 - __clz(~(-1 << -(char)__clz((v63 >> 3) - 1)));
            if (!(v64 | v61)) {
              goto LABEL_81;
            }
          }
          int v65 = 0;
          uint64_t v66 = 0;
          BOOL v67 = v61 != 0;
          BOOL v68 = v64 != 0;
          int v69 = 1;
          do
          {
            --v61;
            if (v67) {
              v66 |= (unint64_t)(v69 & v41) << v65++;
            }
            else {
              unsigned int v61 = 0;
            }
            --v64;
            if (v68) {
              v66 |= (unint64_t)(v69 & v26) << v65++;
            }
            else {
              unsigned int v64 = 0;
            }
            v69 *= 2;
            --v65;
            BOOL v68 = v64 != 0;
            BOOL v67 = v61 != 0;
          }
          while (v64 | v61);
LABEL_82:
          int v75 = v47 < 0x10 || v48;
          int v76 = (unsigned __int8 *)(v149 + 8 * v66);
          uint64_t v77 = v150 + 32 * (v45 - v16);
          uint64_t v78 = (void *)(v148 + v58);
          if (v42 < 8) {
            int v79 = 1;
          }
          else {
            int v79 = v75;
          }
          if (v158)
          {
            if (!v79)
            {
              float64x2_t v85 = __dst;
LABEL_95:
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::compressMacroblock(v77, a11, (unint64_t)v85, v76, v47, v42, *(_DWORD *)(*(void *)(v36 + 208) + 52));
              goto LABEL_96;
            }
            unsigned int v80 = v78;
            char v81 = v47;
            int v82 = v78;
            int v83 = v46;
            BOOL v84 = v48;
            memcpy(__dst, v80, sizeof(__dst));
            BOOL v48 = v84;
            unsigned int v43 = 16 * v41;
            float64x2_t v85 = __dst;
            int v46 = v83;
            uint64_t v78 = v82;
            LOBYTE(v47) = v81;
            LOBYTE(v42) = v154;
            uint64_t v36 = v157;
          }
          else
          {
            float64x2_t v85 = v78;
            if (!v79) {
              goto LABEL_95;
            }
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE20ELj2ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint3EEELb0EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = v36;
          unsigned int v160 = v85;
          unsigned __int8 v168 = v47;
          unsigned __int8 v169 = v42;
          unsigned int v164 = v140;
          unsigned int v165 = v45 - v43;
          int v161 = v76;
          uint64_t v162 = v77;
          uint64_t v163 = a11;
          unsigned int v166 = v151;
          unsigned int v167 = v46;
          if (!v48)
          {
            int v86 = *(_DWORD *)(*(void *)(v36 + 208) + 52);
            unint64_t v87 = (unint64_t)&v85[AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressSubblock((uint64_t)v171, 512, (unint64_t)v85, *v76, v86)];
            unint64_t v88 = v87
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressSubblock((uint64_t)&v172, 512, v87, v76[1], v86);
            unint64_t v89 = v88
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressSubblock((uint64_t)&v175, 512, v88, v76[2], v86);
            unint64_t v90 = v89
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressSubblock((uint64_t)&v176, 512, v89, v76[3], v86);
            unint64_t v91 = v90
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressSubblock((uint64_t)&v173, 512, v90, v76[4], v86);
            unint64_t v92 = v91
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressSubblock((uint64_t)&v174, 512, v91, v76[5], v86);
            uint64_t v93 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressSubblock((uint64_t)&v177, 512, v92, v76[6], v86);
            AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressSubblock((uint64_t)v178, 512, v92 + v93, v76[7], v86);
            uint64_t v94 = v166;
            unsigned int v16 = v145;
            if (!v166 || !v167)
            {
LABEL_123:
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::compressMacroblock((uint64_t)v171, 512, (unint64_t)v160, v161, v168, v169, *(_DWORD *)(*(void *)(v157 + 208) + 52));
              if (!v158) {
                goto LABEL_27;
              }
              goto LABEL_124;
            }
            uint64_t v95 = 0;
            unint64_t v96 = (unint64_t)v164 << 9;
            uint64_t v97 = 32 * v165;
            uint64_t v98 = &v171[v96 + v97];
            uint64_t v99 = v162;
            uint64_t v100 = v163;
            unint64_t v101 = 32 * v167;
            if (v101 <= 1) {
              uint64_t v102 = 1;
            }
            else {
              uint64_t v102 = 32 * v167;
            }
            unint64_t v103 = v96 + v97;
            uint64_t v104 = &v171[v96 + v97];
            if (v102) {
              BOOL v105 = (unint64_t)(v102 - 1) >> 32 == 0;
            }
            else {
              BOOL v105 = 0;
            }
            char v106 = !v105;
            uint64_t v107 = v102 & 0x1FFFFFFFE0;
            uint64_t v108 = &v171[v103 + 16];
            unsigned int v109 = (long long *)(v162 + 16);
            while (2)
            {
              uint64_t v110 = (char *)(v99 + v100 * v95);
              uint64_t v111 = &v98[512 * v95];
              if ((unint64_t)(&v104[512 * v95] - v110) < 0x20) {
                char v112 = 1;
              }
              else {
                char v112 = v106;
              }
              if (v112)
              {
                int v113 = 0;
LABEL_120:
                unsigned int v118 = v113 + 1;
                do
                {
                  char v119 = *v110++;
                  *v111++ = v119;
                }
                while (v101 > v118++);
              }
              else
              {
                uint64_t v114 = v109;
                uint64_t v115 = v108;
                uint64_t v116 = v102 & 0x1FFFFFFFE0;
                do
                {
                  long long v117 = *v114;
                  *(v115 - 1) = *(v114 - 1);
                  *uint64_t v115 = v117;
                  v115 += 2;
                  v114 += 2;
                  v116 -= 32;
                }
                while (v116);
                if (v102 != v107)
                {
                  v110 += v107;
                  v111 += v107;
                  int v113 = v102 & 0xFFFFFFE0;
                  goto LABEL_120;
                }
              }
              ++v95;
              v108 += 512;
              unsigned int v109 = (long long *)((char *)v109 + v100);
              if (v95 == v94) {
                goto LABEL_123;
              }
              continue;
            }
          }
          dispatch_sync(*(dispatch_queue_t *)(*(void *)(v36 + 8) + 7384), block);
LABEL_96:
          unsigned int v16 = v145;
          if (!v158) {
            goto LABEL_27;
          }
LABEL_124:
          memcpy(v78, v85, 0x1000uLL);
LABEL_27:
          BOOL v31 = v41++ == v146 >> 4;
          uint64_t v36 = v157;
          unsigned int v42 = v154;
        }
        while (!v31);
        BOOL v31 = v26++ == v139;
      }
      while (!v31);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>,false,(AGXHardwareTextureMemoryOrder)2>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, int a12)
{
  uint64_t v213 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v17 = a8 >> 3;
  unsigned int v165 = a8 + a10 - 1;
  unsigned int v167 = v165 >> 3;
  unsigned int v18 = *(unsigned __int8 *)(*(void *)(a1 + 208) + 88);
  unsigned int v19 = *(_DWORD *)(a1 + 112);
  if (*(void *)(a1 + 168)) {
    int v20 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v20 = 0;
  }
  BOOL v21 = (v20 & 0xD00) == 0 || v20 == 768;
  int v22 = v20 & 0xE00;
  int v24 = !v21 && v22 != 1024;
  int v183 = v24;
  BOOL isLevelTiled = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::isLevelTiled(a1, *(_DWORD *)(a1 + 144) + a12);
  if (v17 <= v167)
  {
    unsigned int v175 = a7 + a9 - 1;
    if (a7 >> 3 <= v175 >> 3)
    {
      unsigned int v162 = a5 - 1;
      unsigned int v182 = (a5 - 1) >> 3;
      int v181 = ((a5 - 1) & 7) + 1;
      int v163 = ((a6 - 1) & 7) + 1;
      unsigned int v164 = (a6 - 1) >> 3;
      uint32x2_t v28 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0x700000007);
      v29.i64[0] = 0x2000000020;
      *(int32x2_t *)v30.i8 = vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v28, 3uLL)))))));
      v31.i64[0] = 0x1000000010;
      *(int8x8_t *)v32.i8 = vbic_s8(*(int8x8_t *)v30.i8, (int8x8_t)vcgt_u32((uint32x2_t)0x1000000010, v28));
      __int32 v174 = v32.i32[0] | v32.i32[1];
      BOOL v172 = v32.i32[1] != 0;
      uint64_t v173 = v32.i64[0];
      BOOL v171 = v32.i32[0] != 0;
      unint64_t v161 = 8 * v19 * (unint64_t)v18;
      unsigned int v168 = a8;
      do
      {
        unsigned int v33 = (8 * v17) | 7;
        if (8 * v17 <= a8) {
          int v34 = a8;
        }
        else {
          int v34 = 8 * v17;
        }
        unsigned int v35 = a7 >> 3;
        if (v165 < v33) {
          unsigned int v33 = v165;
        }
        unsigned int v180 = 8 * v17;
        int v170 = v34 - 8 * v17;
        int v179 = v33 - v34 + 1;
        int v36 = v163;
        if (v17 != v164) {
          int v36 = 8;
        }
        unsigned int v184 = v36;
        uint64_t v178 = a3 + (v34 - a8) * a11;
        uint64_t v37 = a4;
        do
        {
          unsigned int v38 = 8 * v35;
          unsigned int v39 = 8 * (v35 + 1) - 1;
          if (8 * v35 <= a7) {
            int v40 = a7;
          }
          else {
            int v40 = 8 * v35;
          }
          if (v175 < v39) {
            unsigned int v39 = a7 + a9 - 1;
          }
          int v41 = v39 - v40 + 1;
          if (v35 == v182) {
            unsigned int v42 = v181;
          }
          else {
            unsigned int v42 = 8;
          }
          BOOL v43 = 1;
          if (v180 >= a8 && v38 >= a7)
          {
            int v44 = v181;
            if (v35 != v182) {
              int v44 = 8;
            }
            BOOL v43 = v41 != v44 || v179 != v184;
          }
          if (isLevelTiled)
          {
            unsigned int v65 = 0;
            uint64_t v66 = v161 >> (*(unsigned char *)(a1 + 57) != 0);
            char v67 = 1;
            if (v66 > 127)
            {
              if (v66 > 511)
              {
                if (v66 == 512)
                {
                  char v67 = 0;
                  char v68 = 0;
                  unsigned int v65 = 16;
                  unsigned int v69 = 16;
                }
                else
                {
                  char v68 = 1;
                  unsigned int v69 = 0;
                  if (v66 == 1024)
                  {
                    char v67 = 0;
                    unsigned int v69 = 8;
                    unsigned int v65 = 16;
                  }
                }
              }
              else if (v66 == 128)
              {
                char v67 = 0;
                char v68 = 0;
                unsigned int v65 = 32;
                unsigned int v69 = 32;
              }
              else
              {
                char v68 = 1;
                unsigned int v69 = 0;
                if (v66 == 256)
                {
                  char v67 = 0;
                  char v68 = 0;
                  unsigned int v69 = 16;
                  unsigned int v65 = 32;
                }
              }
            }
            else
            {
              char v68 = 1;
              unsigned int v69 = 0;
              switch(v66)
              {
                case 4:
                  char v67 = 0;
                  char v68 = 0;
                  unsigned int v69 = 128;
                  unsigned int v65 = 256;
                  break;
                case 5:
                case 6:
                case 7:
                case 9:
                case 10:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 17:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                  break;
                case 8:
                  char v67 = 0;
                  char v68 = 0;
                  unsigned int v65 = 128;
                  unsigned int v69 = 128;
                  break;
                case 16:
                  char v67 = 0;
                  char v68 = 0;
                  unsigned int v69 = 64;
                  unsigned int v65 = 128;
                  break;
                case 32:
                  char v67 = 0;
                  char v68 = 0;
                  unsigned int v65 = 64;
                  unsigned int v69 = 64;
                  break;
                default:
                  if (v66 == 64)
                  {
                    char v67 = 0;
                    char v68 = 0;
                    unsigned int v69 = 32;
                    unsigned int v65 = 64;
                  }
                  break;
              }
            }
            unsigned int v150 = (v65 >> 3) - 1;
            if (v67) {
              unsigned int v151 = 0;
            }
            else {
              unsigned int v151 = 32 - __clz(~(-1 << -(char)__clz(v150)));
            }
            unsigned int v152 = (v69 >> 3) - 1;
            if (v68)
            {
              unsigned int v153 = 0;
              if (v151) {
                goto LABEL_229;
              }
            }
            else
            {
              unsigned int v153 = 32 - __clz(~(-1 << -(char)__clz(v152)));
              if (v153 | v151)
              {
LABEL_229:
                int v154 = 0;
                uint64_t v155 = 0;
                int v156 = v35 & v150;
                int v157 = v17 & v152;
                BOOL v158 = v151 != 0;
                BOOL v159 = v153 != 0;
                int v160 = 1;
                do
                {
                  --v151;
                  if (v158) {
                    v155 |= (unint64_t)(v160 & v156) << v154++;
                  }
                  else {
                    unsigned int v151 = 0;
                  }
                  --v153;
                  if (v159) {
                    v155 |= (unint64_t)(v160 & v157) << v154++;
                  }
                  else {
                    unsigned int v153 = 0;
                  }
                  v160 *= 2;
                  --v154;
                  BOOL v159 = v153 != 0;
                  BOOL v158 = v151 != 0;
                }
                while (v153 | v151);
                goto LABEL_241;
              }
            }
            uint64_t v155 = 0;
LABEL_241:
            unint64_t v53 = ((unint64_t)(v38 / v65 + v180 / v69 * ((v65 + v162) / v65)) << 14) + (v155 << 7);
            goto LABEL_58;
          }
          if (v174)
          {
            int v46 = 0;
            uint64_t v47 = 0;
            int v48 = 1;
            BOOL v50 = v171;
            BOOL v49 = v172;
            int v52 = v173;
            int v51 = HIDWORD(v173);
            do
            {
              --v51;
              if (v49) {
                v47 |= (unint64_t)(v48 & v35) << v46++;
              }
              else {
                int v51 = 0;
              }
              --v52;
              if (v50) {
                v47 |= (unint64_t)(v48 & v17) << v46++;
              }
              else {
                int v52 = 0;
              }
              v48 *= 2;
              --v46;
              BOOL v50 = v52 != 0;
              BOOL v49 = v51 != 0;
            }
            while (v52 | v51);
          }
          else
          {
            uint64_t v47 = 0;
          }
          unint64_t v53 = v47 << 7;
LABEL_58:
          unsigned int v54 = *(_DWORD *)(a1 + 128) >> (*(unsigned char *)(a1 + 144) + a12);
          if (v54 <= 1) {
            unsigned int v54 = 1;
          }
          unsigned int v55 = v54 + 7;
          if (v55 < 0x10) {
            unsigned int v56 = 0;
          }
          else {
            unsigned int v56 = 32 - __clz(~(-1 << -(char)__clz((v55 >> 3) - 1)));
          }
          unsigned int v57 = *(_DWORD *)(a1 + 132) >> (*(unsigned char *)(a1 + 144) + a12);
          if (v57 <= 1) {
            unsigned int v57 = 1;
          }
          unsigned int v58 = v57 + 7;
          if (v58 < 0x10)
          {
            unsigned int v59 = 0;
            if (!v56)
            {
LABEL_80:
              uint64_t v61 = 0;
              goto LABEL_81;
            }
          }
          else
          {
            unsigned int v59 = 32 - __clz(~(-1 << -(char)__clz((v58 >> 3) - 1)));
            if (!(v59 | v56)) {
              goto LABEL_80;
            }
          }
          int v60 = 0;
          uint64_t v61 = 0;
          BOOL v62 = v56 != 0;
          BOOL v63 = v59 != 0;
          int v64 = 1;
          do
          {
            --v56;
            if (v62) {
              v61 |= (unint64_t)(v64 & v35) << v60++;
            }
            else {
              unsigned int v56 = 0;
            }
            --v59;
            if (v63) {
              v61 |= (unint64_t)(v64 & v17) << v60++;
            }
            else {
              unsigned int v59 = 0;
            }
            v64 *= 2;
            --v60;
            BOOL v63 = v59 != 0;
            BOOL v62 = v56 != 0;
          }
          while (v59 | v56);
LABEL_81:
          int v70 = v42 < 8 || v43;
          uint64_t v71 = (unsigned __int8 *)(v37 + 8 * v61);
          char v72 = (int8x16_t *)(a2 + v53);
          if (v184 < 8) {
            int v73 = 1;
          }
          else {
            int v73 = v70;
          }
          if (v183)
          {
            if (!v73)
            {
              char v81 = (int8x16_t *)v196;
LABEL_95:
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::compressMacroblock(v178 + 4 * (v40 - a7), a11, (unint64_t)v81, v71, v42, v184, *(_DWORD *)(*(void *)(a1 + 208) + 52), *(int8x8_t *)v32.i8, *(double *)v30.i64, *(int8x8_t *)v31.i8, *(double *)v29.i64, v25, v26, v27);
              if (!v183) {
                goto LABEL_26;
              }
              goto LABEL_210;
            }
            int8x16_t v74 = v72[13];
            v196[12] = v72[12];
            v196[13] = v74;
            int8x16_t v75 = v72[15];
            v196[14] = v72[14];
            v196[15] = v75;
            int8x16_t v76 = v72[9];
            v196[8] = v72[8];
            v196[9] = v76;
            int8x16_t v77 = v72[11];
            v196[10] = v72[10];
            v196[11] = v77;
            int8x16_t v78 = v72[5];
            v196[4] = v72[4];
            v196[5] = v78;
            int8x16_t v79 = v72[7];
            v196[6] = v72[6];
            v196[7] = v79;
            int8x16_t v80 = v72[1];
            v196[0] = *v72;
            v196[1] = v80;
            int8x16_t v32 = v72[2];
            int8x16_t v30 = v72[3];
            char v81 = (int8x16_t *)v196;
            v196[2] = v32;
            v196[3] = v30;
          }
          else
          {
            char v81 = v72;
            if (!v73) {
              goto LABEL_95;
            }
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE0ELj4ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint3EEELb0EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = a1;
          unsigned int v186 = v81;
          unsigned __int8 v194 = v42;
          unsigned __int8 v195 = v184;
          unsigned int v190 = v170;
          unsigned int v191 = v40 - v38;
          unsigned int v187 = (unsigned char *)(v37 + 8 * v61);
          uint64_t v188 = (int8x16_t *)(v178 + 4 * (v40 - a7));
          uint64_t v189 = a11;
          unsigned int v192 = v179;
          unsigned int v193 = v41;
          if (!v43)
          {
            uint64_t v82 = *(void *)(a1 + 208);
            int v83 = *(_DWORD *)(v82 + 52);
            unsigned int v84 = *v71;
            if (*v71)
            {
              if (v84 < 0xF0)
              {
                if (v84 == 31)
                {
                  v32.i64[0] = v81->i64[0];
                  v30.i64[0] = v81->i64[1];
                  v31.i64[0] = v81[1].i64[0];
                  v29.i64[0] = v81[1].i64[1];
                  v197.i64[0] = v81->i64[0];
                  v197.i64[1] = v31.i64[0];
                  v199.i64[0] = v30.i64[0];
                  v199.i64[1] = v29.i64[0];
                  uint64_t v85 = 32;
                }
                else if (v84 == 96)
                {
                  int8x16_t v32 = vld1q_dup_s8(v81->i8);
                  int8x16_t v197 = v32;
                  int8x16_t v199 = v32;
                  uint64_t v85 = 1;
                }
                else
                {
                  uint64_t v85 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(&v197, 32, (uint64_t)v81, v84);
                }
              }
              else
              {
                AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(&v197, 32, (uint64_t)v81, v84, *(_DWORD *)(v82 + 52));
                uint64_t v85 = 16;
              }
            }
            else
            {
              uint64_t v85 = 0;
              int8x16_t v197 = 0uLL;
              int8x16_t v199 = 0uLL;
            }
            uint64_t v86 = (uint64_t)v81->i64 + v85;
            unsigned int v87 = v71[1];
            if (v71[1])
            {
              if (v87 < 0xF0)
              {
                if (v87 == 31)
                {
                  v32.i64[0] = *(void *)v86;
                  v30.i64[0] = *(void *)(v86 + 8);
                  v31.i64[0] = *(void *)(v86 + 16);
                  v29.i64[0] = *(void *)(v86 + 24);
                  v201.i64[0] = *(void *)v86;
                  v201.i64[1] = v31.i64[0];
                  v203.i64[0] = v30.i64[0];
                  v203.i64[1] = v29.i64[0];
                  uint64_t v88 = 32;
                }
                else if (v87 == 96)
                {
                  int8x16_t v32 = vld1q_dup_s8((const char *)v86);
                  int8x16_t v201 = v32;
                  int8x16_t v203 = v32;
                  uint64_t v88 = 1;
                }
                else
                {
                  uint64_t v88 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(&v201, 32, v86, v87);
                }
              }
              else
              {
                AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(&v201, 32, v86, v87, v83);
                uint64_t v88 = 16;
              }
            }
            else
            {
              uint64_t v88 = 0;
              int8x16_t v201 = 0uLL;
              int8x16_t v203 = 0uLL;
            }
            uint64_t v89 = v86 + v88;
            unsigned int v90 = v71[2];
            if (v71[2])
            {
              if (v90 < 0xF0)
              {
                if (v90 == 31)
                {
                  v32.i64[0] = *(void *)v89;
                  v30.i64[0] = *(void *)(v89 + 8);
                  v31.i64[0] = *(void *)(v89 + 16);
                  v29.i64[0] = *(void *)(v89 + 24);
                  v198.i64[0] = *(void *)v89;
                  v198.i64[1] = v31.i64[0];
                  v200.i64[0] = v30.i64[0];
                  v200.i64[1] = v29.i64[0];
                  uint64_t v91 = 32;
                }
                else if (v90 == 96)
                {
                  int8x16_t v32 = vld1q_dup_s8((const char *)v89);
                  int8x16_t v198 = v32;
                  int8x16_t v200 = v32;
                  uint64_t v91 = 1;
                }
                else
                {
                  uint64_t v91 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(&v198, 32, v89, v90);
                }
              }
              else
              {
                AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(&v198, 32, v89, v90, v83);
                uint64_t v91 = 16;
              }
            }
            else
            {
              uint64_t v91 = 0;
              int8x16_t v198 = 0uLL;
              int8x16_t v200 = 0uLL;
            }
            uint64_t v92 = v89 + v91;
            unsigned int v93 = v71[3];
            if (v71[3])
            {
              if (v93 < 0xF0)
              {
                if (v93 == 31)
                {
                  v32.i64[0] = *(void *)v92;
                  v30.i64[0] = *(void *)(v92 + 8);
                  v31.i64[0] = *(void *)(v92 + 16);
                  v29.i64[0] = *(void *)(v92 + 24);
                  v202.i64[0] = *(void *)v92;
                  v202.i64[1] = v31.i64[0];
                  v204.i64[0] = v30.i64[0];
                  v204.i64[1] = v29.i64[0];
                  uint64_t v94 = 32;
                }
                else if (v93 == 96)
                {
                  int8x16_t v32 = vld1q_dup_s8((const char *)v92);
                  int8x16_t v202 = v32;
                  int8x16_t v204 = v32;
                  uint64_t v94 = 1;
                }
                else
                {
                  uint64_t v94 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(&v202, 32, v92, v93);
                }
              }
              else
              {
                AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(&v202, 32, v92, v93, v83);
                uint64_t v94 = 16;
              }
            }
            else
            {
              uint64_t v94 = 0;
              int8x16_t v202 = 0uLL;
              int8x16_t v204 = 0uLL;
            }
            uint64_t v95 = v92 + v94;
            unsigned int v96 = v71[4];
            if (v71[4])
            {
              if (v96 < 0xF0)
              {
                if (v96 == 31)
                {
                  v32.i64[0] = *(void *)v95;
                  v30.i64[0] = *(void *)(v95 + 8);
                  v31.i64[0] = *(void *)(v95 + 16);
                  v29.i64[0] = *(void *)(v95 + 24);
                  v205.i64[0] = *(void *)v95;
                  v205.i64[1] = v31.i64[0];
                  v207.i64[0] = v30.i64[0];
                  v207.i64[1] = v29.i64[0];
                  uint64_t v97 = 32;
                }
                else if (v96 == 96)
                {
                  int8x16_t v32 = vld1q_dup_s8((const char *)v95);
                  int8x16_t v205 = v32;
                  int8x16_t v207 = v32;
                  uint64_t v97 = 1;
                }
                else
                {
                  uint64_t v97 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(&v205, 32, v95, v96);
                }
              }
              else
              {
                AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(&v205, 32, v95, v96, v83);
                uint64_t v97 = 16;
              }
            }
            else
            {
              uint64_t v97 = 0;
              int8x16_t v205 = 0uLL;
              int8x16_t v207 = 0uLL;
            }
            uint64_t v98 = v95 + v97;
            unsigned int v99 = v71[5];
            if (v71[5])
            {
              if (v99 < 0xF0)
              {
                if (v99 == 31)
                {
                  v32.i64[0] = *(void *)v98;
                  v30.i64[0] = *(void *)(v98 + 8);
                  v31.i64[0] = *(void *)(v98 + 16);
                  v29.i64[0] = *(void *)(v98 + 24);
                  v209.i64[0] = *(void *)v98;
                  v209.i64[1] = v31.i64[0];
                  v211.i64[0] = v30.i64[0];
                  v211.i64[1] = v29.i64[0];
                  uint64_t v100 = 32;
                }
                else if (v99 == 96)
                {
                  int8x16_t v32 = vld1q_dup_s8((const char *)v98);
                  int8x16_t v209 = v32;
                  int8x16_t v211 = v32;
                  uint64_t v100 = 1;
                }
                else
                {
                  uint64_t v100 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(&v209, 32, v98, v99);
                }
              }
              else
              {
                AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(&v209, 32, v98, v99, v83);
                uint64_t v100 = 16;
              }
            }
            else
            {
              uint64_t v100 = 0;
              int8x16_t v209 = 0uLL;
              int8x16_t v211 = 0uLL;
            }
            uint64_t v101 = v98 + v100;
            unsigned int v102 = v71[6];
            if (v71[6])
            {
              if (v102 >= 0xF0)
              {
                AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(&v206, 32, v101, v102, v83);
                uint64_t v103 = 16;
                unsigned int v104 = v71[7];
                if (!v71[7]) {
                  goto LABEL_170;
                }
LABEL_162:
                uint64_t v105 = v101 + v103;
                if (v104 >= 0xF0)
                {
                  AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(&v210, 32, v105, v104, v83);
                  uint64_t v106 = v192;
                  if (!v192) {
                    goto LABEL_209;
                  }
LABEL_175:
                  if (!v193) {
                    goto LABEL_209;
                  }
                  uint64_t v107 = 0;
                  uint64_t v108 = 32 * v190;
                  uint64_t v109 = 4 * v191;
                  uint64_t v110 = &v197.i8[v108 + v109];
                  uint64_t v111 = v188;
                  uint64_t v112 = v189;
                  unint64_t v113 = 4 * v193;
                  if (v113 <= 1) {
                    unint64_t v114 = 1;
                  }
                  else {
                    unint64_t v114 = 4 * v193;
                  }
                  uint64_t v115 = v108 + v109;
                  uint64_t v116 = &v197.i8[v108 + v109];
                  if (v114) {
                    BOOL v117 = (v114 - 1) >> 32 == 0;
                  }
                  else {
                    BOOL v117 = 0;
                  }
                  uint64_t v118 = v114 & 0x3FFFFFFE0;
                  uint64_t v119 = v114 & 0x3FFFFFFF8;
                  char v121 = !v117 || v114 < 8;
                  unsigned int v122 = &v198.i8[v115];
                  unsigned int v123 = v188 + 1;
                  unsigned int v124 = v110;
                  int v125 = v188;
                  while (2)
                  {
                    uint64_t v126 = &v111->i8[v112 * v107];
                    int v127 = &v110[32 * v107];
                    if ((unint64_t)(&v116[32 * v107] - v126) < 0x20) {
                      char v128 = 1;
                    }
                    else {
                      char v128 = v121;
                    }
                    if (v128)
                    {
                      int v129 = 0;
LABEL_206:
                      unsigned int v138 = v129 + 1;
                      do
                      {
                        char v139 = *v126++;
                        *v127++ = v139;
                      }
                      while (v113 > v138++);
                    }
                    else
                    {
                      if (v114 >= 0x20)
                      {
                        int v131 = v123;
                        unint64_t v132 = (int8x16_t *)v122;
                        uint64_t v133 = v114 & 0x3FFFFFFE0;
                        do
                        {
                          int8x16_t v32 = v131[-1];
                          int8x16_t v30 = *v131;
                          v132[-1] = v32;
                          *unint64_t v132 = v30;
                          v132 += 2;
                          v131 += 2;
                          v133 -= 32;
                        }
                        while (v133);
                        if (v114 == v118) {
                          goto LABEL_189;
                        }
                        uint64_t v130 = v114 & 0x3FFFFFFE0;
                        if ((v114 & 0x18) == 0)
                        {
                          v126 += v118;
                          v127 += v118;
                          int v129 = v114 & 0xFFFFFFE0;
                          goto LABEL_206;
                        }
                      }
                      else
                      {
                        uint64_t v130 = 0;
                      }
                      v127 += v119;
                      uint64_t v134 = v130 - v119;
                      unsigned int v135 = (uint64_t *)((char *)v125->i64 + v130);
                      unsigned int v136 = (uint64_t *)&v124[v130];
                      do
                      {
                        uint64_t v137 = *v135++;
                        v32.i64[0] = v137;
                        *v136++ = v137;
                        v134 += 8;
                      }
                      while (v134);
                      if (v114 != v119)
                      {
                        v126 += v119;
                        int v129 = v114 & 0xFFFFFFF8;
                        goto LABEL_206;
                      }
                    }
LABEL_189:
                    ++v107;
                    v122 += 32;
                    unsigned int v123 = (int8x16_t *)((char *)v123 + v112);
                    int v125 = (int8x16_t *)((char *)v125 + v112);
                    v124 += 32;
                    if (v107 == v106) {
                      goto LABEL_209;
                    }
                    continue;
                  }
                }
                if (v104 == 31)
                {
                  v32.i64[0] = *(void *)v105;
                  v30.i64[0] = *(void *)(v105 + 8);
                  v31.i64[0] = *(void *)(v105 + 16);
                  v29.i64[0] = *(void *)(v105 + 24);
                  v210.i64[0] = *(void *)v105;
                  v210.i64[1] = v31.i64[0];
                  v212.i64[0] = v30.i64[0];
                  v212.i64[1] = v29.i64[0];
                  uint64_t v106 = v192;
                  if (v192) {
                    goto LABEL_175;
                  }
                }
                else
                {
                  if (v104 != 96)
                  {
                    AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(&v210, 32, v105, v104);
                    uint64_t v106 = v192;
                    if (!v192) {
                      goto LABEL_209;
                    }
                    goto LABEL_175;
                  }
                  int8x16_t v32 = vld1q_dup_s8((const char *)v105);
                  int8x16_t v210 = v32;
                  int8x16_t v212 = v32;
                  uint64_t v106 = v192;
                  if (v192) {
                    goto LABEL_175;
                  }
                }
LABEL_209:
                AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::compressMacroblock((unint64_t)&v197, 32, (unint64_t)v186, v187, v194, v195, *(_DWORD *)(*(void *)(a1 + 208) + 52), *(int8x8_t *)v32.i8, *(double *)v30.i64, *(int8x8_t *)v31.i8, *(double *)v29.i64, v25, v26, v27);
                a8 = v168;
                uint64_t v37 = a4;
                if (!v183) {
                  goto LABEL_26;
                }
                goto LABEL_210;
              }
              if (v102 == 31)
              {
                v32.i64[0] = *(void *)v101;
                v30.i64[0] = *(void *)(v101 + 8);
                v31.i64[0] = *(void *)(v101 + 16);
                v29.i64[0] = *(void *)(v101 + 24);
                v206.i64[0] = *(void *)v101;
                v206.i64[1] = v31.i64[0];
                v208.i64[0] = v30.i64[0];
                v208.i64[1] = v29.i64[0];
                uint64_t v103 = 32;
                unsigned int v104 = v71[7];
                if (!v71[7]) {
                  goto LABEL_170;
                }
                goto LABEL_162;
              }
              if (v102 != 96)
              {
                uint64_t v103 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(&v206, 32, v101, v102);
                unsigned int v104 = v71[7];
                if (!v71[7]) {
                  goto LABEL_170;
                }
                goto LABEL_162;
              }
              int8x16_t v32 = vld1q_dup_s8((const char *)v101);
              int8x16_t v206 = v32;
              int8x16_t v208 = v32;
              uint64_t v103 = 1;
              unsigned int v104 = v71[7];
              if (v71[7]) {
                goto LABEL_162;
              }
            }
            else
            {
              uint64_t v103 = 0;
              int8x16_t v206 = 0uLL;
              int8x16_t v208 = 0uLL;
              unsigned int v104 = v71[7];
              if (v71[7]) {
                goto LABEL_162;
              }
            }
LABEL_170:
            int8x16_t v210 = 0uLL;
            int8x16_t v212 = 0uLL;
            uint64_t v106 = v192;
            if (v192) {
              goto LABEL_175;
            }
            goto LABEL_209;
          }
          dispatch_sync(*(dispatch_queue_t *)(*(void *)(a1 + 8) + 7384), block);
          if (!v183) {
            goto LABEL_26;
          }
LABEL_210:
          int8x16_t v141 = *v81;
          int8x16_t v142 = v81[1];
          int8x16_t v143 = v81[3];
          v72[2] = v81[2];
          v72[3] = v143;
          int8x16_t *v72 = v141;
          v72[1] = v142;
          int8x16_t v144 = v81[4];
          int8x16_t v145 = v81[5];
          int8x16_t v146 = v81[7];
          v72[6] = v81[6];
          v72[7] = v146;
          v72[4] = v144;
          v72[5] = v145;
          int8x16_t v147 = v81[8];
          int8x16_t v148 = v81[9];
          int8x16_t v149 = v81[11];
          v72[10] = v81[10];
          v72[11] = v149;
          v72[8] = v147;
          v72[9] = v148;
          int8x16_t v32 = v81[12];
          int8x16_t v30 = v81[13];
          int8x16_t v31 = v81[14];
          int8x16_t v29 = v81[15];
          v72[14] = v31;
          v72[15] = v29;
          v72[12] = v32;
          v72[13] = v30;
LABEL_26:
          BOOL v21 = v35++ == v175 >> 3;
        }
        while (!v21);
        BOOL v21 = v17++ == v167;
      }
      while (!v21);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>,false,(AGXHardwareTextureMemoryOrder)2>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, int a12)
{
  v179[24] = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  uint64_t v17 = a1;
  unsigned int v154 = a8;
  unsigned int v18 = a8 >> 3;
  unsigned int v138 = a8 + a10 - 1;
  unsigned int v140 = v138 >> 3;
  unsigned int v19 = *(unsigned __int8 *)(*(void *)(a1 + 208) + 88);
  unsigned int v20 = *(_DWORD *)(a1 + 112);
  uint64_t v158 = v17;
  if (*(void *)(v17 + 168))
  {
    __int16 CacheMode = IOSurfaceGetCacheMode();
    uint64_t v17 = v158;
    int v22 = CacheMode & 0xF00;
  }
  else
  {
    int v22 = 0;
  }
  BOOL v23 = (v22 & 0xD00) == 0 || v22 == 768;
  int v24 = v22 & 0xE00;
  int v26 = !v23 && v24 != 1024;
  int v159 = v26;
  BOOL isLevelTiled = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::isLevelTiled(v17, *(_DWORD *)(v17 + 144) + a12);
  uint64_t v28 = v158;
  BOOL v148 = isLevelTiled;
  if (v18 <= v140)
  {
    unsigned int v147 = a7 + a9 - 1;
    unsigned int v137 = a7 >> 3;
    if (a7 >> 3 <= v147 >> 3)
    {
      unsigned int v134 = a5 - 1;
      unsigned int v136 = (a6 - 1) >> 3;
      int v156 = ((a5 - 1) & 7) + 1;
      unsigned int v157 = (a5 - 1) >> 3;
      int v135 = ((a6 - 1) & 7) + 1;
      uint32x2_t v29 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0x700000007);
      int8x8_t v30 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v29, 3uLL))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x1000000010, v29));
      __int32 v145 = v30.i32[0] | v30.i32[1];
      int8x8_t v144 = v30;
      BOOL v142 = v30.i32[0] != 0;
      BOOL v143 = v30.i32[1] != 0;
      unint64_t v133 = 8 * v20 * (unint64_t)v19;
      unsigned int v146 = a7;
      do
      {
        unsigned int v31 = (8 * v18) | 7;
        if (8 * v18 <= v154) {
          int v32 = v154;
        }
        else {
          int v32 = 8 * v18;
        }
        unsigned int v33 = v137;
        if (v138 < v31) {
          unsigned int v31 = v138;
        }
        int v141 = v32 - 8 * v18;
        int v152 = v31 - v32 + 1;
        unsigned int v153 = 8 * v18;
        if (v18 == v136) {
          unsigned int v34 = v135;
        }
        else {
          unsigned int v34 = 8;
        }
        uint64_t v151 = a3 + (v32 - v154) * a11;
        unsigned int v155 = v34;
        do
        {
          unsigned int v35 = 8 * v33;
          unsigned int v36 = 8 * (v33 + 1) - 1;
          if (8 * v33 <= a7) {
            int v37 = a7;
          }
          else {
            int v37 = 8 * v33;
          }
          if (v147 < v36) {
            unsigned int v36 = v147;
          }
          int v38 = v36 - v37 + 1;
          if (v33 == v157) {
            unsigned int v39 = v156;
          }
          else {
            unsigned int v39 = 8;
          }
          BOOL v40 = 1;
          if (v153 >= v154 && v35 >= a7)
          {
            int v41 = v156;
            if (v33 != v157) {
              int v41 = 8;
            }
            BOOL v40 = v38 != v41 || v152 != v34;
          }
          if (v148)
          {
            unsigned int v62 = 0;
            uint64_t v63 = v133 >> (*(unsigned char *)(v28 + 57) != 0);
            char v64 = 1;
            if (v63 > 127)
            {
              if (v63 > 511)
              {
                if (v63 == 512)
                {
                  char v64 = 0;
                  char v65 = 0;
                  unsigned int v62 = 16;
                  unsigned int v66 = 16;
                }
                else
                {
                  char v65 = 1;
                  unsigned int v66 = 0;
                  if (v63 == 1024)
                  {
                    char v64 = 0;
                    unsigned int v66 = 8;
                    unsigned int v62 = 16;
                  }
                }
              }
              else if (v63 == 128)
              {
                char v64 = 0;
                char v65 = 0;
                unsigned int v62 = 32;
                unsigned int v66 = 32;
              }
              else
              {
                char v65 = 1;
                unsigned int v66 = 0;
                if (v63 == 256)
                {
                  char v64 = 0;
                  char v65 = 0;
                  unsigned int v66 = 16;
                  unsigned int v62 = 32;
                }
              }
            }
            else
            {
              char v65 = 1;
              unsigned int v66 = 0;
              switch(v63)
              {
                case 4:
                  char v64 = 0;
                  char v65 = 0;
                  unsigned int v66 = 128;
                  unsigned int v62 = 256;
                  break;
                case 5:
                case 6:
                case 7:
                case 9:
                case 10:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 17:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                  break;
                case 8:
                  char v64 = 0;
                  char v65 = 0;
                  unsigned int v62 = 128;
                  unsigned int v66 = 128;
                  break;
                case 16:
                  char v64 = 0;
                  char v65 = 0;
                  unsigned int v66 = 64;
                  unsigned int v62 = 128;
                  break;
                case 32:
                  char v64 = 0;
                  char v65 = 0;
                  unsigned int v62 = 64;
                  unsigned int v66 = 64;
                  break;
                default:
                  if (v63 == 64)
                  {
                    char v64 = 0;
                    char v65 = 0;
                    unsigned int v66 = 32;
                    unsigned int v62 = 64;
                  }
                  break;
              }
            }
            unsigned int v122 = (v62 >> 3) - 1;
            if (v64) {
              unsigned int v123 = 0;
            }
            else {
              unsigned int v123 = 32 - __clz(~(-1 << -(char)__clz(v122)));
            }
            unsigned int v124 = (v66 >> 3) - 1;
            if (v65)
            {
              unsigned int v125 = 0;
              if (v123) {
                goto LABEL_150;
              }
            }
            else
            {
              unsigned int v125 = 32 - __clz(~(-1 << -(char)__clz(v124)));
              if (v125 | v123)
              {
LABEL_150:
                int v126 = 0;
                uint64_t v127 = 0;
                int v128 = v33 & v122;
                int v129 = v18 & v124;
                BOOL v130 = v123 != 0;
                BOOL v131 = v125 != 0;
                int v132 = 1;
                do
                {
                  --v123;
                  if (v130) {
                    v127 |= (unint64_t)(v132 & v128) << v126++;
                  }
                  else {
                    unsigned int v123 = 0;
                  }
                  --v125;
                  if (v131) {
                    v127 |= (unint64_t)(v132 & v129) << v126++;
                  }
                  else {
                    unsigned int v125 = 0;
                  }
                  v132 *= 2;
                  --v126;
                  BOOL v131 = v125 != 0;
                  BOOL v130 = v123 != 0;
                }
                while (v125 | v123);
                goto LABEL_162;
              }
            }
            uint64_t v127 = 0;
LABEL_162:
            unint64_t v50 = ((unint64_t)(v35 / v62 + v153 / v66 * ((v62 + v134) / v62)) << 14) + (v127 << 9);
            goto LABEL_59;
          }
          if (v145)
          {
            int v43 = 0;
            uint64_t v44 = 0;
            int v45 = 1;
            BOOL v46 = v142;
            BOOL v47 = v143;
            __int32 v49 = v144.i32[0];
            __int32 v48 = v144.i32[1];
            do
            {
              --v48;
              if (v47) {
                v44 |= (unint64_t)(v45 & v33) << v43++;
              }
              else {
                __int32 v48 = 0;
              }
              --v49;
              if (v46) {
                v44 |= (unint64_t)(v45 & v18) << v43++;
              }
              else {
                __int32 v49 = 0;
              }
              v45 *= 2;
              --v43;
              BOOL v46 = v49 != 0;
              BOOL v47 = v48 != 0;
            }
            while (v49 | v48);
          }
          else
          {
            uint64_t v44 = 0;
          }
          unint64_t v50 = v44 << 9;
LABEL_59:
          unsigned int v51 = *(_DWORD *)(v28 + 128) >> (*(unsigned char *)(v28 + 144) + a12);
          if (v51 <= 1) {
            unsigned int v51 = 1;
          }
          unsigned int v52 = v51 + 7;
          if (v52 < 0x10) {
            unsigned int v53 = 0;
          }
          else {
            unsigned int v53 = 32 - __clz(~(-1 << -(char)__clz((v52 >> 3) - 1)));
          }
          unsigned int v54 = *(_DWORD *)(v28 + 132) >> (*(unsigned char *)(v28 + 144) + a12);
          if (v54 <= 1) {
            unsigned int v54 = 1;
          }
          unsigned int v55 = v54 + 7;
          if (v55 < 0x10)
          {
            unsigned int v56 = 0;
            if (!v53)
            {
LABEL_81:
              uint64_t v58 = 0;
              goto LABEL_82;
            }
          }
          else
          {
            unsigned int v56 = 32 - __clz(~(-1 << -(char)__clz((v55 >> 3) - 1)));
            if (!(v56 | v53)) {
              goto LABEL_81;
            }
          }
          int v57 = 0;
          uint64_t v58 = 0;
          BOOL v59 = v53 != 0;
          BOOL v60 = v56 != 0;
          int v61 = 1;
          do
          {
            --v53;
            if (v59) {
              v58 |= (unint64_t)(v61 & v33) << v57++;
            }
            else {
              unsigned int v53 = 0;
            }
            --v56;
            if (v60) {
              v58 |= (unint64_t)(v61 & v18) << v57++;
            }
            else {
              unsigned int v56 = 0;
            }
            v61 *= 2;
            --v57;
            BOOL v60 = v56 != 0;
            BOOL v59 = v53 != 0;
          }
          while (v56 | v53);
LABEL_82:
          int v67 = v39 < 8 || v40;
          char v68 = (unsigned __int8 *)(a4 + 8 * v58);
          uint64_t v69 = v151 + 16 * (v37 - a7);
          int v70 = (void *)(a2 + v50);
          if (v34 < 8) {
            int v71 = 1;
          }
          else {
            int v71 = v67;
          }
          if (v159)
          {
            if (!v71)
            {
              int8x16_t v78 = __dst;
LABEL_95:
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::compressMacroblock(v69, a11, (unint64_t)v78, v68, v39, v34, *(_DWORD *)(*(void *)(v28 + 208) + 52));
              goto LABEL_96;
            }
            char v72 = v70;
            char v73 = v39;
            int v74 = v37;
            int v75 = v38;
            int8x16_t v76 = v70;
            BOOL v77 = v40;
            memcpy(__dst, v72, sizeof(__dst));
            BOOL v40 = v77;
            int v70 = v76;
            int v38 = v75;
            int v37 = v74;
            unsigned int v35 = 8 * v33;
            int8x16_t v78 = __dst;
            LOBYTE(v39) = v73;
            LOBYTE(v34) = v155;
            uint64_t v28 = v158;
          }
          else
          {
            int8x16_t v78 = v70;
            if (!v71) {
              goto LABEL_95;
            }
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE13ELj4ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint3EEELb0EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = v28;
          unint64_t v161 = v78;
          unsigned __int8 v169 = v39;
          unsigned __int8 v170 = v34;
          unsigned int v165 = v141;
          unsigned int v166 = v37 - v35;
          unsigned int v162 = v68;
          uint64_t v163 = v69;
          uint64_t v164 = a11;
          unsigned int v167 = v152;
          unsigned int v168 = v38;
          if (!v40)
          {
            int v79 = *(_DWORD *)(*(void *)(v28 + 208) + 52);
            uint64_t v80 = (uint64_t)&v78[AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressSubblock((uint64_t)v172, 128, (uint64_t)v78, *v68, v79)];
            uint64_t v81 = v80
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressSubblock((uint64_t)&v174, 128, v80, v68[1], v79);
            uint64_t v82 = v81
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressSubblock((uint64_t)&v173, 128, v81, v68[2], v79);
            uint64_t v83 = v82
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressSubblock((uint64_t)&v175, 128, v82, v68[3], v79);
            uint64_t v84 = v83
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressSubblock((uint64_t)&v176, 128, v83, v68[4], v79);
            uint64_t v85 = v84
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressSubblock((uint64_t)&v178, 128, v84, v68[5], v79);
            uint64_t v86 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressSubblock((uint64_t)&v177, 128, v85, v68[6], v79);
            AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressSubblock((uint64_t)v179, 128, v85 + v86, v68[7], v79);
            uint64_t v87 = v167;
            a7 = v146;
            if (!v167 || !v168)
            {
LABEL_130:
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::compressMacroblock((uint64_t)v172, 128, (unint64_t)v161, v162, v169, v170, *(_DWORD *)(*(void *)(v158 + 208) + 52));
              if (!v159) {
                goto LABEL_27;
              }
              goto LABEL_131;
            }
            uint64_t v88 = 0;
            unint64_t v89 = (unint64_t)v165 << 7;
            uint64_t v90 = 16 * v166;
            uint64_t v91 = &v172[v89 + v90];
            uint64_t v92 = v163;
            uint64_t v93 = v164;
            unint64_t v94 = 16 * v168;
            if (v94 <= 1) {
              unint64_t v95 = 1;
            }
            else {
              unint64_t v95 = 16 * v168;
            }
            unint64_t v96 = v89 + v90;
            uint64_t v97 = &v172[v89 + v90];
            if (v95) {
              BOOL v98 = (v95 - 1) >> 32 == 0;
            }
            else {
              BOOL v98 = 0;
            }
            char v99 = !v98;
            uint64_t v100 = v95 & 0xFFFFFFFE0;
            uint64_t v101 = v95 & 0xFFFFFFFF0;
            unsigned int v102 = &v172[v96 + 16];
            uint64_t v103 = (long long *)(v163 + 16);
            unsigned int v104 = v91;
            uint64_t v105 = v163;
            while (2)
            {
              uint64_t v106 = (char *)(v92 + v93 * v88);
              uint64_t v107 = &v91[128 * v88];
              if ((unint64_t)(&v97[128 * v88] - v106) < 0x20) {
                char v108 = 1;
              }
              else {
                char v108 = v99;
              }
              if (v108)
              {
                int v109 = 0;
LABEL_127:
                unsigned int v119 = v109 + 1;
                do
                {
                  char v120 = *v106++;
                  *v107++ = v120;
                }
                while (v94 > v119++);
              }
              else
              {
                if (v95 >= 0x20)
                {
                  uint64_t v115 = v103;
                  uint64_t v116 = v102;
                  uint64_t v117 = v95 & 0xFFFFFFFE0;
                  do
                  {
                    long long v118 = *v115;
                    *(v116 - 1) = *(v115 - 1);
                    *uint64_t v116 = v118;
                    v116 += 2;
                    v115 += 2;
                    v117 -= 32;
                  }
                  while (v117);
                  if (v95 == v100) {
                    goto LABEL_110;
                  }
                  uint64_t v110 = v95 & 0xFFFFFFFE0;
                  if ((v95 & 0x10) == 0)
                  {
                    v106 += v100;
                    v107 += v100;
                    int v109 = v95 & 0xFFFFFFE0;
                    goto LABEL_127;
                  }
                }
                else
                {
                  uint64_t v110 = 0;
                }
                v107 += v101;
                unint64_t v111 = v110 - (v95 & 0xFFFFFFFF0);
                uint64_t v112 = (uint64_t *)(v105 + v110);
                unint64_t v113 = &v104[v110];
                do
                {
                  uint64_t v114 = *v112++;
                  *v113++ = v114;
                  v111 += 8;
                }
                while (v111);
                if (v95 != v101)
                {
                  v106 += v101;
                  int v109 = v95 & 0xFFFFFFF0;
                  goto LABEL_127;
                }
              }
LABEL_110:
              ++v88;
              v102 += 128;
              uint64_t v103 = (long long *)((char *)v103 + v93);
              v105 += v93;
              v104 += 128;
              if (v88 == v87) {
                goto LABEL_130;
              }
              continue;
            }
          }
          dispatch_sync(*(dispatch_queue_t *)(*(void *)(v28 + 8) + 7384), block);
LABEL_96:
          a7 = v146;
          if (!v159) {
            goto LABEL_27;
          }
LABEL_131:
          memcpy(v70, v78, 0x400uLL);
LABEL_27:
          BOOL v23 = v33++ == v147 >> 3;
          uint64_t v28 = v158;
          unsigned int v34 = v155;
        }
        while (!v23);
        BOOL v23 = v18++ == v140;
      }
      while (!v23);
    }
  }
}

void *AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>,false,(AGXHardwareTextureMemoryOrder)2>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, int a12)
{
  uint64_t v313 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  uint64_t v17 = a1;
  unsigned int v230 = a8;
  unsigned int v18 = a8 >> 3;
  unsigned int v214 = a8 + a10 - 1;
  unsigned int v216 = v214 >> 3;
  unsigned int v19 = *(unsigned __int8 *)(*(void *)(a1 + 208) + 88);
  unsigned int v20 = *(_DWORD *)(a1 + 112);
  uint64_t v233 = v17;
  if (*(void *)(v17 + 168))
  {
    __int16 CacheMode = IOSurfaceGetCacheMode();
    uint64_t v17 = v233;
    int v22 = CacheMode & 0xF00;
  }
  else
  {
    int v22 = 0;
  }
  BOOL v23 = (v22 & 0xD00) == 0 || v22 == 768;
  int v24 = v22 & 0xE00;
  int v26 = !v23 && v24 != 1024;
  int v235 = v26;
  result = (void *)AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::isLevelTiled(v17, *(_DWORD *)(v17 + 144) + a12);
  uint64_t v28 = v233;
  int v224 = (int)result;
  if (v18 <= v216)
  {
    unsigned int v223 = a7 + a9 - 1;
    unsigned int v213 = a7 >> 3;
    if (a7 >> 3 <= v223 >> 3)
    {
      unsigned int v210 = a5 - 1;
      unsigned int v232 = (a5 - 1) >> 3;
      int v231 = ((a5 - 1) & 7) + 1;
      int v211 = ((a6 - 1) & 7) + 1;
      unsigned int v212 = (a6 - 1) >> 3;
      uint32x2_t v29 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0x700000007);
      int8x8_t v30 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v29, 3uLL))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x1000000010, v29));
      __int32 v221 = v30.i32[0] | v30.i32[1];
      BOOL v219 = v30.i32[1] != 0;
      int8x8_t v220 = v30;
      BOOL v218 = v30.i32[0] != 0;
      unint64_t v209 = 8 * v20 * (unint64_t)v19;
      unsigned int v222 = a7;
      do
      {
        unsigned int v31 = (8 * v18) | 7;
        if (8 * v18 <= v230) {
          int v32 = v230;
        }
        else {
          int v32 = 8 * v18;
        }
        unsigned int v33 = v213;
        if (v214 < v31) {
          unsigned int v31 = v214;
        }
        unsigned int v229 = 8 * v18;
        int v217 = v32 - 8 * v18;
        int v228 = v31 - v32 + 1;
        int v34 = v211;
        if (v18 != v212) {
          int v34 = 8;
        }
        unsigned int v236 = v34;
        uint64_t v227 = a3 + (v32 - v230) * a11;
        do
        {
          unsigned int v35 = 8 * v33;
          unsigned int v36 = 8 * (v33 + 1) - 1;
          if (8 * v33 <= a7) {
            int v37 = a7;
          }
          else {
            int v37 = 8 * v33;
          }
          if (v223 < v36) {
            unsigned int v36 = v223;
          }
          int v38 = v36 - v37 + 1;
          if (v33 == v232) {
            unsigned int v39 = v231;
          }
          else {
            unsigned int v39 = 8;
          }
          BOOL v40 = 1;
          if (v229 >= v230 && v35 >= a7)
          {
            int v41 = v231;
            if (v33 != v232) {
              int v41 = 8;
            }
            BOOL v40 = v38 != v41 || v228 != v236;
          }
          if (v224)
          {
            unsigned int v62 = 0;
            uint64_t v63 = v209 >> (*(unsigned char *)(v28 + 57) != 0);
            char v64 = 1;
            if (v63 > 127)
            {
              if (v63 > 511)
              {
                if (v63 == 512)
                {
                  char v64 = 0;
                  char v65 = 0;
                  unsigned int v62 = 16;
                  unsigned int v66 = 16;
                }
                else
                {
                  char v65 = 1;
                  unsigned int v66 = 0;
                  if (v63 == 1024)
                  {
                    char v64 = 0;
                    unsigned int v66 = 8;
                    unsigned int v62 = 16;
                  }
                }
              }
              else if (v63 == 128)
              {
                char v64 = 0;
                char v65 = 0;
                unsigned int v62 = 32;
                unsigned int v66 = 32;
              }
              else
              {
                char v65 = 1;
                unsigned int v66 = 0;
                if (v63 == 256)
                {
                  char v64 = 0;
                  char v65 = 0;
                  unsigned int v66 = 16;
                  unsigned int v62 = 32;
                }
              }
            }
            else
            {
              char v65 = 1;
              unsigned int v66 = 0;
              switch(v63)
              {
                case 4:
                  char v64 = 0;
                  char v65 = 0;
                  unsigned int v66 = 128;
                  unsigned int v62 = 256;
                  break;
                case 5:
                case 6:
                case 7:
                case 9:
                case 10:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 17:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                  break;
                case 8:
                  char v64 = 0;
                  char v65 = 0;
                  unsigned int v62 = 128;
                  unsigned int v66 = 128;
                  break;
                case 16:
                  char v64 = 0;
                  char v65 = 0;
                  unsigned int v66 = 64;
                  unsigned int v62 = 128;
                  break;
                case 32:
                  char v64 = 0;
                  char v65 = 0;
                  unsigned int v62 = 64;
                  unsigned int v66 = 64;
                  break;
                default:
                  if (v63 == 64)
                  {
                    char v64 = 0;
                    char v65 = 0;
                    unsigned int v66 = 32;
                    unsigned int v62 = 64;
                  }
                  break;
              }
            }
            unsigned int v198 = (v62 >> 3) - 1;
            if (v64) {
              unsigned int v199 = 0;
            }
            else {
              unsigned int v199 = 32 - __clz(~(-1 << -(char)__clz(v198)));
            }
            unsigned int v200 = (v66 >> 3) - 1;
            if (v65)
            {
              unsigned int v201 = 0;
              if (v199) {
                goto LABEL_224;
              }
            }
            else
            {
              unsigned int v201 = 32 - __clz(~(-1 << -(char)__clz(v200)));
              if (v201 | v199)
              {
LABEL_224:
                int v202 = 0;
                uint64_t v203 = 0;
                int v204 = v33 & v198;
                int v205 = v18 & v200;
                BOOL v206 = v199 != 0;
                BOOL v207 = v201 != 0;
                int v208 = 1;
                do
                {
                  --v199;
                  if (v206) {
                    v203 |= (unint64_t)(v208 & v204) << v202++;
                  }
                  else {
                    unsigned int v199 = 0;
                  }
                  --v201;
                  if (v207) {
                    v203 |= (unint64_t)(v208 & v205) << v202++;
                  }
                  else {
                    unsigned int v201 = 0;
                  }
                  v208 *= 2;
                  --v202;
                  BOOL v207 = v201 != 0;
                  BOOL v206 = v199 != 0;
                }
                while (v201 | v199);
                goto LABEL_236;
              }
            }
            uint64_t v203 = 0;
LABEL_236:
            unint64_t v50 = ((unint64_t)(v35 / v62 + v229 / v66 * ((v62 + v210) / v62)) << 14) + (v203 << 9);
            goto LABEL_58;
          }
          if (v221)
          {
            int v43 = 0;
            uint64_t v44 = 0;
            int v45 = 1;
            BOOL v46 = v219;
            BOOL v47 = v218;
            __int32 v48 = v220.i32[1];
            __int32 v49 = v220.i32[0];
            do
            {
              --v48;
              if (v46) {
                v44 |= (unint64_t)(v45 & v33) << v43++;
              }
              else {
                __int32 v48 = 0;
              }
              --v49;
              if (v47) {
                v44 |= (unint64_t)(v45 & v18) << v43++;
              }
              else {
                __int32 v49 = 0;
              }
              v45 *= 2;
              --v43;
              BOOL v47 = v49 != 0;
              BOOL v46 = v48 != 0;
            }
            while (v49 | v48);
          }
          else
          {
            uint64_t v44 = 0;
          }
          unint64_t v50 = v44 << 9;
LABEL_58:
          unsigned int v51 = *(_DWORD *)(v28 + 128) >> (*(unsigned char *)(v28 + 144) + a12);
          if (v51 <= 1) {
            unsigned int v51 = 1;
          }
          unsigned int v52 = v51 + 7;
          if (v52 < 0x10) {
            unsigned int v53 = 0;
          }
          else {
            unsigned int v53 = 32 - __clz(~(-1 << -(char)__clz((v52 >> 3) - 1)));
          }
          unsigned int v54 = *(_DWORD *)(v28 + 132) >> (*(unsigned char *)(v28 + 144) + a12);
          if (v54 <= 1) {
            unsigned int v54 = 1;
          }
          unsigned int v55 = v54 + 7;
          if (v55 < 0x10)
          {
            unsigned int v56 = 0;
            if (!v53)
            {
LABEL_80:
              uint64_t v58 = 0;
              goto LABEL_81;
            }
          }
          else
          {
            unsigned int v56 = 32 - __clz(~(-1 << -(char)__clz((v55 >> 3) - 1)));
            if (!(v56 | v53)) {
              goto LABEL_80;
            }
          }
          int v57 = 0;
          uint64_t v58 = 0;
          BOOL v59 = v53 != 0;
          BOOL v60 = v56 != 0;
          int v61 = 1;
          do
          {
            --v53;
            if (v59) {
              v58 |= (unint64_t)(v61 & v33) << v57++;
            }
            else {
              unsigned int v53 = 0;
            }
            --v56;
            if (v60) {
              v58 |= (unint64_t)(v61 & v18) << v57++;
            }
            else {
              unsigned int v56 = 0;
            }
            v61 *= 2;
            --v57;
            BOOL v60 = v56 != 0;
            BOOL v59 = v53 != 0;
          }
          while (v56 | v53);
LABEL_81:
          int v67 = v39 < 8 || v40;
          char v68 = (unsigned __int8 *)(a4 + 8 * v58);
          uint64_t v69 = v227 + 16 * (v37 - a7);
          int v70 = (float32x4_t *)(a2 + v50);
          if (v236 < 8) {
            int v71 = 1;
          }
          else {
            int v71 = v67;
          }
          float64x2_t v234 = v70;
          if (v235)
          {
            char v72 = (float32x4_t *)__dst;
            if (!v71) {
              goto LABEL_93;
            }
            memcpy(__dst, v70, sizeof(__dst));
            uint64_t v28 = v233;
          }
          else
          {
            char v72 = v70;
            if (!v71)
            {
LABEL_93:
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::compressMacroblock(v69, a11, (unint64_t)v72, v68, v39, v236, *(_DWORD *)(*(void *)(v28 + 208) + 52));
              goto LABEL_94;
            }
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE15ELj4ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint3EEELb0EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = v28;
          float64x2_t v238 = v72;
          unsigned __int8 v246 = v39;
          unsigned __int8 v247 = v236;
          unsigned int v242 = v217;
          unsigned int v243 = v37 - v35;
          float64x2_t v239 = v68;
          uint64_t v240 = v69;
          uint64_t v241 = a11;
          unsigned int v244 = v228;
          unsigned int v245 = v38;
          if (v40)
          {
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(v28 + 8) + 7384), block);
LABEL_94:
            a7 = v222;
            unsigned int v73 = v33 + 1;
            goto LABEL_204;
          }
          uint64_t v74 = *(void *)(v28 + 208);
          int v75 = *(_DWORD *)(v74 + 52);
          unsigned int v76 = *v68;
          if (*v68)
          {
            if (v76 < 0xF0)
            {
              if (v76 == 127)
              {
                float32x4_t v79 = v72[1];
                float32x4_t v80 = v72[2];
                float32x4_t v81 = v72[3];
                float32x4_t v82 = v72[4];
                float32x4_t v83 = v72[5];
                float32x4_t v84 = v72[6];
                float32x4_t v85 = v72[7];
                int8x16_t v249 = *(int8x16_t *)v72;
                float32x4_t v250 = v79;
                float32x4_t v251 = v82;
                float32x4_t v252 = v83;
                float32x4_t v257 = v80;
                float32x4_t v258 = v81;
                float32x4_t v259 = v84;
                float32x4_t v260 = v85;
                uint64_t v77 = 128;
                unsigned int v73 = v33 + 1;
              }
              else
              {
                unsigned int v73 = v33 + 1;
                if (v76 == 3)
                {
                  float32x4_t v78 = vld1q_dup_f32(v72->f32);
                  int8x16_t v249 = (int8x16_t)v78;
                  float32x4_t v250 = v78;
                  float32x4_t v251 = v78;
                  float32x4_t v252 = v78;
                  float32x4_t v257 = v78;
                  float32x4_t v258 = v78;
                  float32x4_t v259 = v78;
                  float32x4_t v260 = v78;
                  uint64_t v77 = 4;
                }
                else
                {
                  uint64_t v77 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(&v249, 128, (uint64_t)v72, v76);
                }
              }
            }
            else
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(&v249, 128, (unint64_t)v72, v76, *(_DWORD *)(v74 + 52));
              uint64_t v77 = 64;
              unsigned int v73 = v33 + 1;
            }
          }
          else
          {
            uint64_t v77 = 0;
            float32x4_t v252 = 0u;
            float32x4_t v251 = 0u;
            float32x4_t v250 = 0u;
            int8x16_t v249 = 0u;
            float32x4_t v257 = 0u;
            float32x4_t v258 = 0u;
            float32x4_t v259 = 0u;
            float32x4_t v260 = 0u;
            unsigned int v73 = v33 + 1;
          }
          unint64_t v86 = (unint64_t)v72 + v77;
          unsigned int v87 = v68[1];
          if (v68[1])
          {
            if (v87 < 0xF0)
            {
              if (v87 == 127)
              {
                float32x4_t v90 = *(float32x4_t *)(v86 + 16);
                float32x4_t v91 = *(float32x4_t *)(v86 + 32);
                float32x4_t v92 = *(float32x4_t *)(v86 + 48);
                float32x4_t v93 = *(float32x4_t *)(v86 + 64);
                float32x4_t v94 = *(float32x4_t *)(v86 + 80);
                float32x4_t v95 = *(float32x4_t *)(v86 + 96);
                float32x4_t v96 = *(float32x4_t *)(v86 + 112);
                int8x16_t v265 = *(int8x16_t *)v86;
                float32x4_t v266 = v90;
                float32x4_t v267 = v93;
                float32x4_t v268 = v94;
                float32x4_t v273 = v91;
                float32x4_t v274 = v92;
                float32x4_t v275 = v95;
                float32x4_t v276 = v96;
                uint64_t v88 = 128;
              }
              else if (v87 == 3)
              {
                float32x4_t v89 = vld1q_dup_f32((const float *)v86);
                int8x16_t v265 = (int8x16_t)v89;
                float32x4_t v266 = v89;
                float32x4_t v267 = v89;
                float32x4_t v268 = v89;
                float32x4_t v273 = v89;
                float32x4_t v274 = v89;
                float32x4_t v275 = v89;
                float32x4_t v276 = v89;
                uint64_t v88 = 4;
              }
              else
              {
                uint64_t v88 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(&v265, 128, v86, v87);
              }
            }
            else
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(&v265, 128, v86, v87, v75);
              uint64_t v88 = 64;
            }
          }
          else
          {
            uint64_t v88 = 0;
            float32x4_t v267 = 0u;
            float32x4_t v268 = 0u;
            int8x16_t v265 = 0u;
            float32x4_t v266 = 0u;
            float32x4_t v273 = 0u;
            float32x4_t v274 = 0u;
            float32x4_t v275 = 0u;
            float32x4_t v276 = 0u;
          }
          unint64_t v97 = v86 + v88;
          unsigned int v98 = v68[2];
          if (v68[2])
          {
            if (v98 < 0xF0)
            {
              if (v98 == 127)
              {
                float32x4_t v101 = *(float32x4_t *)(v97 + 16);
                float32x4_t v102 = *(float32x4_t *)(v97 + 32);
                float32x4_t v103 = *(float32x4_t *)(v97 + 48);
                float32x4_t v104 = *(float32x4_t *)(v97 + 64);
                float32x4_t v105 = *(float32x4_t *)(v97 + 80);
                float32x4_t v106 = *(float32x4_t *)(v97 + 96);
                float32x4_t v107 = *(float32x4_t *)(v97 + 112);
                int8x16_t v253 = *(int8x16_t *)v97;
                float32x4_t v254 = v101;
                float32x4_t v255 = v104;
                float32x4_t v256 = v105;
                float32x4_t v261 = v102;
                float32x4_t v262 = v103;
                float32x4_t v263 = v106;
                float32x4_t v264 = v107;
                uint64_t v99 = 128;
              }
              else if (v98 == 3)
              {
                float32x4_t v100 = vld1q_dup_f32((const float *)v97);
                int8x16_t v253 = (int8x16_t)v100;
                float32x4_t v254 = v100;
                float32x4_t v255 = v100;
                float32x4_t v256 = v100;
                float32x4_t v261 = v100;
                float32x4_t v262 = v100;
                float32x4_t v263 = v100;
                float32x4_t v264 = v100;
                uint64_t v99 = 4;
              }
              else
              {
                uint64_t v99 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(&v253, 128, v97, v98);
              }
            }
            else
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(&v253, 128, v97, v98, v75);
              uint64_t v99 = 64;
            }
          }
          else
          {
            uint64_t v99 = 0;
            float32x4_t v255 = 0u;
            float32x4_t v256 = 0u;
            int8x16_t v253 = 0u;
            float32x4_t v254 = 0u;
            float32x4_t v261 = 0u;
            float32x4_t v262 = 0u;
            float32x4_t v263 = 0u;
            float32x4_t v264 = 0u;
          }
          unint64_t v108 = v97 + v99;
          unsigned int v109 = v68[3];
          if (v68[3])
          {
            if (v109 < 0xF0)
            {
              if (v109 == 127)
              {
                float32x4_t v112 = *(float32x4_t *)(v108 + 16);
                float32x4_t v113 = *(float32x4_t *)(v108 + 32);
                float32x4_t v114 = *(float32x4_t *)(v108 + 48);
                float32x4_t v115 = *(float32x4_t *)(v108 + 64);
                float32x4_t v116 = *(float32x4_t *)(v108 + 80);
                float32x4_t v117 = *(float32x4_t *)(v108 + 96);
                float32x4_t v118 = *(float32x4_t *)(v108 + 112);
                int8x16_t v269 = *(int8x16_t *)v108;
                float32x4_t v270 = v112;
                float32x4_t v271 = v115;
                float32x4_t v272 = v116;
                float32x4_t v277 = v113;
                float32x4_t v278 = v114;
                float32x4_t v279 = v117;
                float32x4_t v280 = v118;
                uint64_t v110 = 128;
              }
              else if (v109 == 3)
              {
                float32x4_t v111 = vld1q_dup_f32((const float *)v108);
                int8x16_t v269 = (int8x16_t)v111;
                float32x4_t v270 = v111;
                float32x4_t v271 = v111;
                float32x4_t v272 = v111;
                float32x4_t v277 = v111;
                float32x4_t v278 = v111;
                float32x4_t v279 = v111;
                float32x4_t v280 = v111;
                uint64_t v110 = 4;
              }
              else
              {
                uint64_t v110 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(&v269, 128, v108, v109);
              }
            }
            else
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(&v269, 128, v108, v109, v75);
              uint64_t v110 = 64;
            }
          }
          else
          {
            uint64_t v110 = 0;
            float32x4_t v271 = 0u;
            float32x4_t v272 = 0u;
            int8x16_t v269 = 0u;
            float32x4_t v270 = 0u;
            float32x4_t v277 = 0u;
            float32x4_t v278 = 0u;
            float32x4_t v279 = 0u;
            float32x4_t v280 = 0u;
          }
          unint64_t v119 = v108 + v110;
          unsigned int v120 = v68[4];
          if (v68[4])
          {
            if (v120 < 0xF0)
            {
              if (v120 == 127)
              {
                float32x4_t v123 = *(float32x4_t *)(v119 + 16);
                float32x4_t v124 = *(float32x4_t *)(v119 + 32);
                float32x4_t v125 = *(float32x4_t *)(v119 + 48);
                float32x4_t v126 = *(float32x4_t *)(v119 + 64);
                float32x4_t v127 = *(float32x4_t *)(v119 + 80);
                float32x4_t v128 = *(float32x4_t *)(v119 + 96);
                float32x4_t v129 = *(float32x4_t *)(v119 + 112);
                int8x16_t v281 = *(int8x16_t *)v119;
                float32x4_t v282 = v123;
                float32x4_t v283 = v126;
                float32x4_t v284 = v127;
                float32x4_t v289 = v124;
                float32x4_t v290 = v125;
                float32x4_t v291 = v128;
                float32x4_t v292 = v129;
                uint64_t v121 = 128;
              }
              else if (v120 == 3)
              {
                float32x4_t v122 = vld1q_dup_f32((const float *)v119);
                int8x16_t v281 = (int8x16_t)v122;
                float32x4_t v282 = v122;
                float32x4_t v283 = v122;
                float32x4_t v284 = v122;
                float32x4_t v289 = v122;
                float32x4_t v290 = v122;
                float32x4_t v291 = v122;
                float32x4_t v292 = v122;
                uint64_t v121 = 4;
              }
              else
              {
                uint64_t v121 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(&v281, 128, v119, v120);
              }
            }
            else
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(&v281, 128, v119, v120, v75);
              uint64_t v121 = 64;
            }
          }
          else
          {
            uint64_t v121 = 0;
            float32x4_t v283 = 0u;
            float32x4_t v284 = 0u;
            int8x16_t v281 = 0u;
            float32x4_t v282 = 0u;
            float32x4_t v289 = 0u;
            float32x4_t v290 = 0u;
            float32x4_t v291 = 0u;
            float32x4_t v292 = 0u;
          }
          unint64_t v130 = v119 + v121;
          unsigned int v131 = v68[5];
          if (v68[5])
          {
            if (v131 < 0xF0)
            {
              if (v131 == 127)
              {
                float32x4_t v134 = *(float32x4_t *)(v130 + 16);
                float32x4_t v135 = *(float32x4_t *)(v130 + 32);
                float32x4_t v136 = *(float32x4_t *)(v130 + 48);
                float32x4_t v137 = *(float32x4_t *)(v130 + 64);
                float32x4_t v138 = *(float32x4_t *)(v130 + 80);
                float32x4_t v139 = *(float32x4_t *)(v130 + 96);
                float32x4_t v140 = *(float32x4_t *)(v130 + 112);
                int8x16_t v297 = *(int8x16_t *)v130;
                float32x4_t v298 = v134;
                float32x4_t v299 = v137;
                float32x4_t v300 = v138;
                float32x4_t v305 = v135;
                float32x4_t v306 = v136;
                float32x4_t v307 = v139;
                float32x4_t v308 = v140;
                uint64_t v132 = 128;
              }
              else if (v131 == 3)
              {
                float32x4_t v133 = vld1q_dup_f32((const float *)v130);
                int8x16_t v297 = (int8x16_t)v133;
                float32x4_t v298 = v133;
                float32x4_t v299 = v133;
                float32x4_t v300 = v133;
                float32x4_t v305 = v133;
                float32x4_t v306 = v133;
                float32x4_t v307 = v133;
                float32x4_t v308 = v133;
                uint64_t v132 = 4;
              }
              else
              {
                uint64_t v132 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(&v297, 128, v130, v131);
              }
            }
            else
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(&v297, 128, v130, v131, v75);
              uint64_t v132 = 64;
            }
          }
          else
          {
            uint64_t v132 = 0;
            float32x4_t v299 = 0u;
            float32x4_t v300 = 0u;
            int8x16_t v297 = 0u;
            float32x4_t v298 = 0u;
            float32x4_t v305 = 0u;
            float32x4_t v306 = 0u;
            float32x4_t v307 = 0u;
            float32x4_t v308 = 0u;
          }
          unint64_t v141 = v130 + v132;
          unsigned int v142 = v68[6];
          if (v68[6])
          {
            if (v142 < 0xF0)
            {
              if (v142 == 127)
              {
                float32x4_t v184 = *(float32x4_t *)(v141 + 16);
                float32x4_t v185 = *(float32x4_t *)(v141 + 32);
                float32x4_t v186 = *(float32x4_t *)(v141 + 48);
                float32x4_t v187 = *(float32x4_t *)(v141 + 64);
                float32x4_t v188 = *(float32x4_t *)(v141 + 80);
                float32x4_t v189 = *(float32x4_t *)(v141 + 96);
                float32x4_t v190 = *(float32x4_t *)(v141 + 112);
                int8x16_t v285 = *(int8x16_t *)v141;
                float32x4_t v286 = v184;
                float32x4_t v287 = v187;
                float32x4_t v288 = v188;
                float32x4_t v293 = v185;
                float32x4_t v294 = v186;
                float32x4_t v295 = v189;
                float32x4_t v296 = v190;
                uint64_t v143 = 128;
                unsigned int v144 = v68[7];
                if (!v68[7]) {
                  goto LABEL_152;
                }
              }
              else if (v142 == 3)
              {
                float32x4_t v182 = vld1q_dup_f32((const float *)v141);
                int8x16_t v285 = (int8x16_t)v182;
                float32x4_t v286 = v182;
                float32x4_t v287 = v182;
                float32x4_t v288 = v182;
                float32x4_t v293 = v182;
                float32x4_t v294 = v182;
                float32x4_t v295 = v182;
                float32x4_t v296 = v182;
                uint64_t v143 = 4;
                unsigned int v144 = v68[7];
                if (!v68[7]) {
                  goto LABEL_152;
                }
              }
              else
              {
                uint64_t v143 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(&v285, 128, v141, v142);
                unsigned int v144 = v68[7];
                if (!v68[7])
                {
LABEL_152:
                  __int32 v145 = v72;
                  float32x4_t v303 = 0u;
                  float32x4_t v304 = 0u;
                  int8x16_t v301 = 0u;
                  float32x4_t v302 = 0u;
                  float32x4_t v309 = 0u;
                  float32x4_t v310 = 0u;
                  float32x4_t v311 = 0u;
                  float32x4_t v312 = 0u;
                  goto LABEL_156;
                }
              }
            }
            else
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(&v285, 128, v141, v142, v75);
              uint64_t v143 = 64;
              unsigned int v144 = v68[7];
              if (!v68[7]) {
                goto LABEL_152;
              }
            }
          }
          else
          {
            uint64_t v143 = 0;
            float32x4_t v287 = 0u;
            float32x4_t v288 = 0u;
            int8x16_t v285 = 0u;
            float32x4_t v286 = 0u;
            float32x4_t v293 = 0u;
            float32x4_t v294 = 0u;
            float32x4_t v295 = 0u;
            float32x4_t v296 = 0u;
            unsigned int v144 = v68[7];
            if (!v68[7]) {
              goto LABEL_152;
            }
          }
          unint64_t v146 = v141 + v143;
          if (v144 >= 0xF0)
          {
            __int32 v145 = v72;
            AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(&v301, 128, v146, v144, v75);
LABEL_156:
            a7 = v222;
            uint64_t v147 = v244;
            if (!v244) {
              goto LABEL_203;
            }
            goto LABEL_157;
          }
          a7 = v222;
          __int32 v145 = v72;
          if (v144 == 127)
          {
            float32x4_t v191 = *(float32x4_t *)(v146 + 16);
            float32x4_t v192 = *(float32x4_t *)(v146 + 32);
            float32x4_t v193 = *(float32x4_t *)(v146 + 48);
            float32x4_t v194 = *(float32x4_t *)(v146 + 64);
            float32x4_t v195 = *(float32x4_t *)(v146 + 80);
            float32x4_t v196 = *(float32x4_t *)(v146 + 96);
            float32x4_t v197 = *(float32x4_t *)(v146 + 112);
            int8x16_t v301 = *(int8x16_t *)v146;
            float32x4_t v302 = v191;
            float32x4_t v303 = v194;
            float32x4_t v304 = v195;
            float32x4_t v309 = v192;
            float32x4_t v310 = v193;
            float32x4_t v311 = v196;
            float32x4_t v312 = v197;
            uint64_t v147 = v244;
            if (!v244) {
              goto LABEL_203;
            }
          }
          else if (v144 == 3)
          {
            float32x4_t v183 = vld1q_dup_f32((const float *)v146);
            int8x16_t v301 = (int8x16_t)v183;
            float32x4_t v302 = v183;
            float32x4_t v303 = v183;
            float32x4_t v304 = v183;
            float32x4_t v309 = v183;
            float32x4_t v310 = v183;
            float32x4_t v311 = v183;
            float32x4_t v312 = v183;
            uint64_t v147 = v244;
            if (!v244) {
              goto LABEL_203;
            }
          }
          else
          {
            AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(&v301, 128, v146, v144);
            uint64_t v147 = v244;
            if (!v244) {
              goto LABEL_203;
            }
          }
LABEL_157:
          if (v245)
          {
            uint64_t v148 = 0;
            unint64_t v149 = (unint64_t)v242 << 7;
            uint64_t v150 = 16 * v243;
            uint64_t v151 = &v249.i8[v149 + v150];
            uint64_t v152 = v240;
            uint64_t v153 = v241;
            unint64_t v154 = 16 * v245;
            if (v154 <= 1) {
              unint64_t v155 = 1;
            }
            else {
              unint64_t v155 = 16 * v245;
            }
            unint64_t v156 = v149 + v150;
            unsigned int v157 = &v249.i8[v149 + v150];
            if (v155) {
              BOOL v158 = (v155 - 1) >> 32 == 0;
            }
            else {
              BOOL v158 = 0;
            }
            char v159 = !v158;
            uint64_t v160 = v155 & 0xFFFFFFFE0;
            uint64_t v161 = v155 & 0xFFFFFFFF0;
            unsigned int v162 = (char *)&v250 + v156;
            uint64_t v163 = (long long *)(v240 + 16);
            uint64_t v164 = v151;
            uint64_t v165 = v240;
            do
            {
              unsigned int v166 = (char *)(v152 + v153 * v148);
              unsigned int v167 = &v151[128 * v148];
              if ((unint64_t)(&v157[128 * v148] - v166) < 0x20) {
                char v168 = 1;
              }
              else {
                char v168 = v159;
              }
              if (v168)
              {
                int v169 = 0;
                goto LABEL_185;
              }
              if (v155 >= 0x20)
              {
                uint64_t v175 = v163;
                uint64_t v176 = v162;
                uint64_t v177 = v155 & 0xFFFFFFFE0;
                do
                {
                  long long v178 = *v175;
                  *(v176 - 1) = *(v175 - 1);
                  *uint64_t v176 = v178;
                  v176 += 2;
                  v175 += 2;
                  v177 -= 32;
                }
                while (v177);
                if (v155 == v160) {
                  goto LABEL_168;
                }
                uint64_t v170 = v155 & 0xFFFFFFFE0;
                if ((v155 & 0x10) == 0)
                {
                  v166 += v160;
                  v167 += v160;
                  int v169 = v155 & 0xFFFFFFE0;
                  goto LABEL_185;
                }
              }
              else
              {
                uint64_t v170 = 0;
              }
              v167 += v161;
              unint64_t v171 = v170 - (v155 & 0xFFFFFFFF0);
              BOOL v172 = (uint64_t *)(v165 + v170);
              uint64_t v173 = &v164[v170];
              do
              {
                uint64_t v174 = *v172++;
                *(void *)uint64_t v173 = v174;
                v173 += 8;
                v171 += 8;
              }
              while (v171);
              if (v155 == v161) {
                goto LABEL_168;
              }
              v166 += v161;
              int v169 = v155 & 0xFFFFFFF0;
LABEL_185:
              unsigned int v179 = v169 + 1;
              do
              {
                char v180 = *v166++;
                *v167++ = v180;
              }
              while (v154 > v179++);
LABEL_168:
              ++v148;
              v162 += 128;
              uint64_t v163 = (long long *)((char *)v163 + v153);
              v165 += v153;
              v164 += 128;
            }
            while (v148 != v147);
          }
LABEL_203:
          AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::compressMacroblock((uint64_t)&v249, 128, (unint64_t)v238, v239, v246, v247, *(_DWORD *)(*(void *)(v233 + 208) + 52));
          char v72 = v145;
LABEL_204:
          result = v234;
          if (v235) {
            result = memcpy(v234, v72, 0x400uLL);
          }
          BOOL v23 = v33 == v223 >> 3;
          unsigned int v33 = v73;
          uint64_t v28 = v233;
        }
        while (!v23);
        BOOL v23 = v18++ == v216;
      }
      while (!v23);
    }
  }
  return result;
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>,false,(AGXHardwareTextureMemoryOrder)2>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, int a12)
{
  uint64_t v226 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  uint64_t v17 = a1;
  unsigned int v175 = a8;
  unsigned int v18 = a8 >> 3;
  unsigned int v159 = a8 + a10 - 1;
  unsigned int v161 = v159 >> 3;
  unsigned int v19 = *(unsigned __int8 *)(*(void *)(a1 + 208) + 88);
  unsigned int v20 = *(_DWORD *)(a1 + 112);
  uint64_t v178 = v17;
  if (*(void *)(v17 + 168))
  {
    __int16 CacheMode = IOSurfaceGetCacheMode();
    uint64_t v17 = v178;
    int v22 = CacheMode & 0xF00;
  }
  else
  {
    int v22 = 0;
  }
  BOOL v23 = (v22 & 0xD00) == 0 || v22 == 768;
  int v24 = v22 & 0xE00;
  int v26 = !v23 && v24 != 1024;
  int v180 = v26;
  BOOL isLevelTiled = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::isLevelTiled(v17, *(_DWORD *)(v17 + 144) + a12);
  uint64_t v29 = v178;
  BOOL v169 = isLevelTiled;
  if (v18 <= v161)
  {
    unsigned int v168 = a7 + a9 - 1;
    unsigned int v158 = a7 >> 3;
    if (a7 >> 3 <= v168 >> 3)
    {
      unsigned int v155 = a5 - 1;
      unsigned int v177 = (a5 - 1) >> 3;
      int v176 = ((a5 - 1) & 7) + 1;
      int v156 = ((a6 - 1) & 7) + 1;
      unsigned int v157 = (a6 - 1) >> 3;
      uint32x2_t v30 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0x700000007);
      v31.i64[0] = 0x2000000020;
      *(int32x2_t *)v32.i8 = vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v30, 3uLL)))))));
      v33.i64[0] = 0x1000000010;
      int16x4_t v34 = (int16x4_t)vbic_s8(*(int8x8_t *)v32.i8, (int8x8_t)vcgt_u32((uint32x2_t)0x1000000010, v30));
      __int32 v166 = v34.i32[0] | v34.i32[1];
      BOOL v164 = v34.i32[1] != 0;
      int16x4_t v165 = v34;
      BOOL v163 = v34.i32[0] != 0;
      unint64_t v154 = 8 * v20 * (unint64_t)v19;
      unsigned int v167 = a7;
      do
      {
        unsigned int v35 = (8 * v18) | 7;
        if (8 * v18 <= v175) {
          int v36 = v175;
        }
        else {
          int v36 = 8 * v18;
        }
        unsigned int v37 = v158;
        if (v159 < v35) {
          unsigned int v35 = v159;
        }
        unsigned int v174 = 8 * v18;
        int v162 = v36 - 8 * v18;
        int v173 = v35 - v36 + 1;
        int v38 = v156;
        if (v18 != v157) {
          int v38 = 8;
        }
        unsigned int v181 = v38;
        uint64_t v172 = a3 + (v36 - v175) * a11;
        do
        {
          unsigned int v39 = 8 * v37;
          unsigned int v40 = 8 * (v37 + 1) - 1;
          if (8 * v37 <= a7) {
            int v41 = a7;
          }
          else {
            int v41 = 8 * v37;
          }
          if (v168 < v40) {
            unsigned int v40 = v168;
          }
          int v42 = v40 - v41 + 1;
          if (v37 == v177) {
            unsigned int v43 = v176;
          }
          else {
            unsigned int v43 = 8;
          }
          BOOL v44 = 1;
          if (v174 >= v175 && v39 >= a7)
          {
            int v45 = v176;
            if (v37 != v177) {
              int v45 = 8;
            }
            BOOL v44 = v42 != v45 || v173 != v181;
          }
          if (v169)
          {
            unsigned int v66 = 0;
            uint64_t v67 = v154 >> (*(unsigned char *)(v29 + 57) != 0);
            char v68 = 1;
            if (v67 > 127)
            {
              if (v67 > 511)
              {
                if (v67 == 512)
                {
                  char v68 = 0;
                  char v69 = 0;
                  unsigned int v66 = 16;
                  unsigned int v70 = 16;
                }
                else
                {
                  char v69 = 1;
                  unsigned int v70 = 0;
                  if (v67 == 1024)
                  {
                    char v68 = 0;
                    unsigned int v70 = 8;
                    unsigned int v66 = 16;
                  }
                }
              }
              else if (v67 == 128)
              {
                char v68 = 0;
                char v69 = 0;
                unsigned int v66 = 32;
                unsigned int v70 = 32;
              }
              else
              {
                char v69 = 1;
                unsigned int v70 = 0;
                if (v67 == 256)
                {
                  char v68 = 0;
                  char v69 = 0;
                  unsigned int v70 = 16;
                  unsigned int v66 = 32;
                }
              }
            }
            else
            {
              char v69 = 1;
              unsigned int v70 = 0;
              switch(v67)
              {
                case 4:
                  char v68 = 0;
                  char v69 = 0;
                  unsigned int v70 = 128;
                  unsigned int v66 = 256;
                  break;
                case 5:
                case 6:
                case 7:
                case 9:
                case 10:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 17:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                  break;
                case 8:
                  char v68 = 0;
                  char v69 = 0;
                  unsigned int v66 = 128;
                  unsigned int v70 = 128;
                  break;
                case 16:
                  char v68 = 0;
                  char v69 = 0;
                  unsigned int v70 = 64;
                  unsigned int v66 = 128;
                  break;
                case 32:
                  char v68 = 0;
                  char v69 = 0;
                  unsigned int v66 = 64;
                  unsigned int v70 = 64;
                  break;
                default:
                  if (v67 == 64)
                  {
                    char v68 = 0;
                    char v69 = 0;
                    unsigned int v70 = 32;
                    unsigned int v66 = 64;
                  }
                  break;
              }
            }
            unsigned int v143 = (v66 >> 3) - 1;
            if (v68) {
              unsigned int v144 = 0;
            }
            else {
              unsigned int v144 = 32 - __clz(~(-1 << -(char)__clz(v143)));
            }
            unsigned int v145 = (v70 >> 3) - 1;
            if (v69)
            {
              unsigned int v146 = 0;
              if (v144) {
                goto LABEL_225;
              }
            }
            else
            {
              unsigned int v146 = 32 - __clz(~(-1 << -(char)__clz(v145)));
              if (v146 | v144)
              {
LABEL_225:
                int v147 = 0;
                uint64_t v148 = 0;
                int v149 = v37 & v143;
                int v150 = v18 & v145;
                BOOL v151 = v144 != 0;
                BOOL v152 = v146 != 0;
                int v153 = 1;
                do
                {
                  --v144;
                  if (v151) {
                    v148 |= (unint64_t)(v153 & v149) << v147++;
                  }
                  else {
                    unsigned int v144 = 0;
                  }
                  --v146;
                  if (v152) {
                    v148 |= (unint64_t)(v153 & v150) << v147++;
                  }
                  else {
                    unsigned int v146 = 0;
                  }
                  v153 *= 2;
                  --v147;
                  BOOL v152 = v146 != 0;
                  BOOL v151 = v144 != 0;
                }
                while (v146 | v144);
                goto LABEL_237;
              }
            }
            uint64_t v148 = 0;
LABEL_237:
            unint64_t v54 = ((unint64_t)(v39 / v66 + v174 / v70 * ((v66 + v155) / v66)) << 14) + (v148 << 8);
            goto LABEL_59;
          }
          if (v166)
          {
            int v47 = 0;
            uint64_t v48 = 0;
            int v49 = 1;
            BOOL v50 = v163;
            BOOL v51 = v164;
            __int32 v53 = v165.i32[0];
            __int32 v52 = v165.i32[1];
            do
            {
              --v52;
              if (v51) {
                v48 |= (unint64_t)(v49 & v37) << v47++;
              }
              else {
                __int32 v52 = 0;
              }
              --v53;
              if (v50) {
                v48 |= (unint64_t)(v49 & v18) << v47++;
              }
              else {
                __int32 v53 = 0;
              }
              v49 *= 2;
              --v47;
              BOOL v50 = v53 != 0;
              BOOL v51 = v52 != 0;
            }
            while (v53 | v52);
          }
          else
          {
            uint64_t v48 = 0;
          }
          unint64_t v54 = v48 << 8;
LABEL_59:
          unsigned int v55 = *(_DWORD *)(v29 + 128) >> (*(unsigned char *)(v29 + 144) + a12);
          if (v55 <= 1) {
            unsigned int v55 = 1;
          }
          unsigned int v56 = v55 + 7;
          if (v56 < 0x10) {
            unsigned int v57 = 0;
          }
          else {
            unsigned int v57 = 32 - __clz(~(-1 << -(char)__clz((v56 >> 3) - 1)));
          }
          unsigned int v58 = *(_DWORD *)(v29 + 132) >> (*(unsigned char *)(v29 + 144) + a12);
          if (v58 <= 1) {
            unsigned int v58 = 1;
          }
          unsigned int v59 = v58 + 7;
          if (v59 < 0x10)
          {
            unsigned int v60 = 0;
            if (!v57)
            {
LABEL_81:
              uint64_t v62 = 0;
              goto LABEL_82;
            }
          }
          else
          {
            unsigned int v60 = 32 - __clz(~(-1 << -(char)__clz((v59 >> 3) - 1)));
            if (!(v60 | v57)) {
              goto LABEL_81;
            }
          }
          int v61 = 0;
          uint64_t v62 = 0;
          BOOL v63 = v57 != 0;
          BOOL v64 = v60 != 0;
          int v65 = 1;
          do
          {
            --v57;
            if (v63) {
              v62 |= (unint64_t)(v65 & v37) << v61++;
            }
            else {
              unsigned int v57 = 0;
            }
            --v60;
            if (v64) {
              v62 |= (unint64_t)(v65 & v18) << v61++;
            }
            else {
              unsigned int v60 = 0;
            }
            v65 *= 2;
            --v61;
            BOOL v64 = v60 != 0;
            BOOL v63 = v57 != 0;
          }
          while (v60 | v57);
LABEL_82:
          int v71 = v43 < 8 || v44;
          char v72 = (unsigned __int8 *)(a4 + 8 * v62);
          uint64_t v73 = v172 + 8 * (v41 - a7);
          uint64_t v74 = (int16x8_t *)(a2 + v54);
          if (v181 < 8) {
            int v75 = 1;
          }
          else {
            int v75 = v71;
          }
          __dst = v74;
          if (v180)
          {
            uint64_t v74 = (int16x8_t *)v193;
            if (!v75) {
              goto LABEL_94;
            }
            memcpy(v193, __dst, sizeof(v193));
            uint64_t v29 = v178;
          }
          else if (!v75)
          {
LABEL_94:
            AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::compressMacroblock(v73, a11, (unint64_t)v74, v72, v43, v181, *(_DWORD *)(*(void *)(v29 + 208) + 52), v34, *(int16x4_t *)v32.i8, *(double *)v33.i64, *(double *)v31.i64, v28);
LABEL_95:
            a7 = v167;
            unsigned int v76 = v37 + 1;
            if (v180) {
              goto LABEL_26;
            }
            goto LABEL_27;
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE3ELj4ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint3EEELb0EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = v29;
          float32x4_t v183 = v74;
          unsigned __int8 v191 = v43;
          unsigned __int8 v192 = v181;
          unsigned int v187 = v162;
          unsigned int v188 = v41 - v39;
          float32x4_t v184 = v72;
          uint64_t v185 = v73;
          uint64_t v186 = a11;
          unsigned int v189 = v173;
          unsigned int v190 = v42;
          if (v44)
          {
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(v29 + 8) + 7384), block);
            goto LABEL_95;
          }
          uint64_t v77 = *(void *)(v29 + 208);
          int v78 = *(_DWORD *)(v77 + 52);
          unsigned int v79 = *v72;
          if (*v72)
          {
            if (v79 < 0xF0)
            {
              if (v79 == 63)
              {
                int16x8_t v80 = *v74;
                int16x8_t v32 = v74[1];
                int16x8_t v33 = v74[2];
                int16x8_t v31 = v74[3];
                int16x8_t v194 = *v74;
                int16x8_t v195 = v33;
                int16x8_t v198 = v32;
                int16x8_t v199 = v31;
                uint64_t v81 = 64;
                unsigned int v76 = v37 + 1;
              }
              else
              {
                unsigned int v76 = v37 + 1;
                if (v79 == 1)
                {
                  int16x8_t v80 = vld1q_dup_s16(v74->i16);
                  int16x8_t v194 = v80;
                  int16x8_t v195 = v80;
                  int16x8_t v198 = v80;
                  int16x8_t v199 = v80;
                  uint64_t v81 = 2;
                }
                else
                {
                  uint64_t v81 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(&v194, 64, (uint64_t)v74, v79, *(double *)&v34, *(double *)v32.i64, *(double *)v33.i64, *(int8x8_t *)v31.i8);
                }
              }
            }
            else
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(&v194, 64, (uint64_t)v74, v79, *(_DWORD *)(v77 + 52));
              uint64_t v81 = 32;
              unsigned int v76 = v37 + 1;
            }
          }
          else
          {
            uint64_t v81 = 0;
            v80.i64[0] = 0;
            int16x8_t v194 = 0u;
            int16x8_t v195 = 0u;
            int16x8_t v198 = 0u;
            int16x8_t v199 = 0u;
            unsigned int v76 = v37 + 1;
          }
          uint64_t v82 = (uint64_t)v74->i64 + v81;
          unsigned int v83 = v72[1];
          if (v72[1])
          {
            if (v83 < 0xF0)
            {
              if (v83 == 63)
              {
                int16x8_t v84 = *(int16x8_t *)v82;
                int16x8_t v32 = *(int16x8_t *)(v82 + 16);
                int16x8_t v33 = *(int16x8_t *)(v82 + 32);
                int16x8_t v31 = *(int16x8_t *)(v82 + 48);
                int16x8_t v202 = *(int16x8_t *)v82;
                int16x8_t v203 = v33;
                int16x8_t v206 = v32;
                int16x8_t v207 = v31;
                uint64_t v85 = 64;
              }
              else if (v83 == 1)
              {
                int16x8_t v84 = vld1q_dup_s16((const __int16 *)v82);
                int16x8_t v202 = v84;
                int16x8_t v203 = v84;
                int16x8_t v206 = v84;
                int16x8_t v207 = v84;
                uint64_t v85 = 2;
              }
              else
              {
                uint64_t v85 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(&v202, 64, v82, v83, *(double *)v80.i64, *(double *)v32.i64, *(double *)v33.i64, *(int8x8_t *)v31.i8);
              }
            }
            else
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(&v202, 64, v82, v83, v78);
              uint64_t v85 = 32;
            }
          }
          else
          {
            uint64_t v85 = 0;
            v84.i64[0] = 0;
            int16x8_t v202 = 0u;
            int16x8_t v203 = 0u;
            int16x8_t v206 = 0u;
            int16x8_t v207 = 0u;
          }
          uint64_t v86 = v82 + v85;
          unsigned int v87 = v72[2];
          if (v72[2])
          {
            if (v87 < 0xF0)
            {
              if (v87 == 63)
              {
                int16x8_t v88 = *(int16x8_t *)v86;
                int16x8_t v32 = *(int16x8_t *)(v86 + 16);
                int16x8_t v33 = *(int16x8_t *)(v86 + 32);
                int16x8_t v31 = *(int16x8_t *)(v86 + 48);
                int16x8_t v196 = *(int16x8_t *)v86;
                int16x8_t v197 = v33;
                int16x8_t v200 = v32;
                int16x8_t v201 = v31;
                uint64_t v89 = 64;
              }
              else if (v87 == 1)
              {
                int16x8_t v88 = vld1q_dup_s16((const __int16 *)v86);
                int16x8_t v196 = v88;
                int16x8_t v197 = v88;
                int16x8_t v200 = v88;
                int16x8_t v201 = v88;
                uint64_t v89 = 2;
              }
              else
              {
                uint64_t v89 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(&v196, 64, v86, v87, *(double *)v84.i64, *(double *)v32.i64, *(double *)v33.i64, *(int8x8_t *)v31.i8);
              }
            }
            else
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(&v196, 64, v86, v87, v78);
              uint64_t v89 = 32;
            }
          }
          else
          {
            uint64_t v89 = 0;
            v88.i64[0] = 0;
            int16x8_t v196 = 0u;
            int16x8_t v197 = 0u;
            int16x8_t v200 = 0u;
            int16x8_t v201 = 0u;
          }
          uint64_t v90 = v86 + v89;
          unsigned int v91 = v72[3];
          if (v72[3])
          {
            if (v91 < 0xF0)
            {
              if (v91 == 63)
              {
                int16x8_t v92 = *(int16x8_t *)v90;
                int16x8_t v32 = *(int16x8_t *)(v90 + 16);
                int16x8_t v33 = *(int16x8_t *)(v90 + 32);
                int16x8_t v31 = *(int16x8_t *)(v90 + 48);
                int16x8_t v204 = *(int16x8_t *)v90;
                int16x8_t v205 = v33;
                int16x8_t v208 = v32;
                int16x8_t v209 = v31;
                uint64_t v93 = 64;
              }
              else if (v91 == 1)
              {
                int16x8_t v92 = vld1q_dup_s16((const __int16 *)v90);
                int16x8_t v204 = v92;
                int16x8_t v205 = v92;
                int16x8_t v208 = v92;
                int16x8_t v209 = v92;
                uint64_t v93 = 2;
              }
              else
              {
                uint64_t v93 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(&v204, 64, v90, v91, *(double *)v88.i64, *(double *)v32.i64, *(double *)v33.i64, *(int8x8_t *)v31.i8);
              }
            }
            else
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(&v204, 64, v90, v91, v78);
              uint64_t v93 = 32;
            }
          }
          else
          {
            uint64_t v93 = 0;
            v92.i64[0] = 0;
            int16x8_t v204 = 0u;
            int16x8_t v205 = 0u;
            int16x8_t v208 = 0u;
            int16x8_t v209 = 0u;
          }
          uint64_t v94 = v90 + v93;
          unsigned int v95 = v72[4];
          if (v72[4])
          {
            if (v95 < 0xF0)
            {
              if (v95 == 63)
              {
                int16x8_t v96 = *(int16x8_t *)v94;
                int16x8_t v32 = *(int16x8_t *)(v94 + 16);
                int16x8_t v33 = *(int16x8_t *)(v94 + 32);
                int16x8_t v31 = *(int16x8_t *)(v94 + 48);
                int16x8_t v210 = *(int16x8_t *)v94;
                int16x8_t v211 = v33;
                int16x8_t v214 = v32;
                int16x8_t v215 = v31;
                uint64_t v97 = 64;
              }
              else if (v95 == 1)
              {
                int16x8_t v96 = vld1q_dup_s16((const __int16 *)v94);
                int16x8_t v210 = v96;
                int16x8_t v211 = v96;
                int16x8_t v214 = v96;
                int16x8_t v215 = v96;
                uint64_t v97 = 2;
              }
              else
              {
                uint64_t v97 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(&v210, 64, v94, v95, *(double *)v92.i64, *(double *)v32.i64, *(double *)v33.i64, *(int8x8_t *)v31.i8);
              }
            }
            else
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(&v210, 64, v94, v95, v78);
              uint64_t v97 = 32;
            }
          }
          else
          {
            uint64_t v97 = 0;
            v96.i64[0] = 0;
            int16x8_t v210 = 0u;
            int16x8_t v211 = 0u;
            int16x8_t v214 = 0u;
            int16x8_t v215 = 0u;
          }
          uint64_t v98 = v94 + v97;
          unsigned int v99 = v72[5];
          if (v72[5])
          {
            if (v99 < 0xF0)
            {
              if (v99 == 63)
              {
                int16x8_t v100 = *(int16x8_t *)v98;
                int16x8_t v32 = *(int16x8_t *)(v98 + 16);
                int16x8_t v33 = *(int16x8_t *)(v98 + 32);
                int16x8_t v31 = *(int16x8_t *)(v98 + 48);
                int16x8_t v218 = *(int16x8_t *)v98;
                int16x8_t v219 = v33;
                int16x8_t v222 = v32;
                int16x8_t v223 = v31;
                uint64_t v101 = 64;
              }
              else if (v99 == 1)
              {
                int16x8_t v100 = vld1q_dup_s16((const __int16 *)v98);
                int16x8_t v218 = v100;
                int16x8_t v219 = v100;
                int16x8_t v222 = v100;
                int16x8_t v223 = v100;
                uint64_t v101 = 2;
              }
              else
              {
                uint64_t v101 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(&v218, 64, v98, v99, *(double *)v96.i64, *(double *)v32.i64, *(double *)v33.i64, *(int8x8_t *)v31.i8);
              }
            }
            else
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(&v218, 64, v98, v99, v78);
              uint64_t v101 = 32;
            }
          }
          else
          {
            uint64_t v101 = 0;
            v100.i64[0] = 0;
            int16x8_t v218 = 0u;
            int16x8_t v219 = 0u;
            int16x8_t v222 = 0u;
            int16x8_t v223 = 0u;
          }
          uint64_t v102 = v98 + v101;
          unsigned int v103 = v72[6];
          if (v72[6])
          {
            if (v103 < 0xF0)
            {
              if (v103 == 63)
              {
                int16x8_t v104 = *(int16x8_t *)v102;
                int16x8_t v32 = *(int16x8_t *)(v102 + 16);
                int16x8_t v33 = *(int16x8_t *)(v102 + 32);
                int16x8_t v31 = *(int16x8_t *)(v102 + 48);
                int16x8_t v212 = *(int16x8_t *)v102;
                int16x8_t v213 = v33;
                int16x8_t v216 = v32;
                int16x8_t v217 = v31;
                uint64_t v105 = 64;
                unsigned int v106 = v72[7];
                if (!v72[7]) {
                  goto LABEL_154;
                }
              }
              else if (v103 == 1)
              {
                int16x8_t v104 = vld1q_dup_s16((const __int16 *)v102);
                int16x8_t v212 = v104;
                int16x8_t v213 = v104;
                int16x8_t v216 = v104;
                int16x8_t v217 = v104;
                uint64_t v105 = 2;
                unsigned int v106 = v72[7];
                if (!v72[7]) {
                  goto LABEL_154;
                }
              }
              else
              {
                uint64_t v105 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(&v212, 64, v102, v103, *(double *)v100.i64, *(double *)v32.i64, *(double *)v33.i64, *(int8x8_t *)v31.i8);
                unsigned int v106 = v72[7];
                if (!v72[7])
                {
LABEL_154:
                  v107.i64[0] = 0;
                  int16x8_t v220 = 0u;
                  int16x8_t v221 = 0u;
                  int16x8_t v224 = 0u;
                  int16x8_t v225 = 0u;
                  goto LABEL_158;
                }
              }
            }
            else
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(&v212, 64, v102, v103, v78);
              uint64_t v105 = 32;
              unsigned int v106 = v72[7];
              if (!v72[7]) {
                goto LABEL_154;
              }
            }
          }
          else
          {
            uint64_t v105 = 0;
            v104.i64[0] = 0;
            int16x8_t v212 = 0u;
            int16x8_t v213 = 0u;
            int16x8_t v216 = 0u;
            int16x8_t v217 = 0u;
            unsigned int v106 = v72[7];
            if (!v72[7]) {
              goto LABEL_154;
            }
          }
          uint64_t v108 = v102 + v105;
          if (v106 >= 0xF0)
          {
            AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(&v220, 64, v108, v106, v78);
LABEL_158:
            a7 = v167;
            uint64_t v109 = v189;
            if (!v189) {
              goto LABEL_205;
            }
            goto LABEL_159;
          }
          a7 = v167;
          if (v106 == 63)
          {
            int16x8_t v107 = *(int16x8_t *)v108;
            int16x8_t v32 = *(int16x8_t *)(v108 + 16);
            int16x8_t v33 = *(int16x8_t *)(v108 + 32);
            int16x8_t v31 = *(int16x8_t *)(v108 + 48);
            int16x8_t v220 = *(int16x8_t *)v108;
            int16x8_t v221 = v33;
            int16x8_t v224 = v32;
            int16x8_t v225 = v31;
            uint64_t v109 = v189;
            if (!v189) {
              goto LABEL_205;
            }
          }
          else if (v106 == 1)
          {
            int16x8_t v107 = vld1q_dup_s16((const __int16 *)v108);
            int16x8_t v220 = v107;
            int16x8_t v221 = v107;
            int16x8_t v224 = v107;
            int16x8_t v225 = v107;
            uint64_t v109 = v189;
            if (!v189) {
              goto LABEL_205;
            }
          }
          else
          {
            AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(&v220, 64, v108, v106, *(double *)v104.i64, *(double *)v32.i64, *(double *)v33.i64, *(int8x8_t *)v31.i8);
            uint64_t v109 = v189;
            if (!v189) {
              goto LABEL_205;
            }
          }
LABEL_159:
          if (v190)
          {
            uint64_t v110 = 0;
            unint64_t v111 = (unint64_t)v187 << 6;
            uint64_t v112 = 8 * v188;
            float32x4_t v113 = &v194.i8[v111 + v112];
            uint64_t v114 = v185;
            uint64_t v115 = v186;
            unint64_t v116 = 8 * v190;
            if (v116 <= 1) {
              unint64_t v117 = 1;
            }
            else {
              unint64_t v117 = 8 * v190;
            }
            unint64_t v118 = v111 + v112;
            unint64_t v119 = &v194.i8[v111 + v112];
            if (v117) {
              BOOL v120 = (v117 - 1) >> 32 == 0;
            }
            else {
              BOOL v120 = 0;
            }
            char v121 = !v120;
            uint64_t v122 = v117 & 0x7FFFFFFE0;
            uint64_t v123 = v117 & 0x7FFFFFFF8;
            float32x4_t v124 = &v195.i8[v118];
            float32x4_t v125 = (int16x8_t *)(v185 + 16);
            float32x4_t v126 = v113;
            uint64_t v127 = v185;
            do
            {
              float32x4_t v128 = (char *)(v114 + v115 * v110);
              float32x4_t v129 = &v113[64 * v110];
              if ((unint64_t)(&v119[64 * v110] - v128) < 0x20) {
                char v130 = 1;
              }
              else {
                char v130 = v121;
              }
              if (v130)
              {
                int v131 = 0;
                goto LABEL_187;
              }
              if (v117 >= 0x20)
              {
                float32x4_t v133 = v125;
                float32x4_t v134 = (int16x8_t *)v124;
                uint64_t v135 = v117 & 0x7FFFFFFE0;
                do
                {
                  int16x8_t v107 = v133[-1];
                  int16x8_t v32 = *v133;
                  v134[-1] = v107;
                  *float32x4_t v134 = v32;
                  v134 += 2;
                  v133 += 2;
                  v135 -= 32;
                }
                while (v135);
                if (v117 == v122) {
                  goto LABEL_170;
                }
                uint64_t v132 = v117 & 0x7FFFFFFE0;
                if ((v117 & 0x18) == 0)
                {
                  v128 += v122;
                  v129 += v122;
                  int v131 = v117 & 0xFFFFFFE0;
                  goto LABEL_187;
                }
              }
              else
              {
                uint64_t v132 = 0;
              }
              v129 += v123;
              unint64_t v136 = v132 - (v117 & 0x7FFFFFFF8);
              float32x4_t v137 = (uint64_t *)(v127 + v132);
              float32x4_t v138 = (uint64_t *)&v126[v132];
              do
              {
                uint64_t v139 = *v137++;
                v107.i64[0] = v139;
                *v138++ = v139;
                v136 += 8;
              }
              while (v136);
              if (v117 == v123) {
                goto LABEL_170;
              }
              v128 += v123;
              int v131 = v117 & 0xFFFFFFF8;
LABEL_187:
              unsigned int v140 = v131 + 1;
              do
              {
                char v141 = *v128++;
                *v129++ = v141;
              }
              while (v116 > v140++);
LABEL_170:
              ++v110;
              v124 += 64;
              float32x4_t v125 = (int16x8_t *)((char *)v125 + v115);
              v127 += v115;
              v126 += 64;
            }
            while (v110 != v109);
          }
LABEL_205:
          AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::compressMacroblock((uint64_t)&v194, 64, (unint64_t)v183, v184, v191, v192, *(_DWORD *)(*(void *)(v178 + 208) + 52), *(int16x4_t *)v107.i8, *(int16x4_t *)v32.i8, *(double *)v33.i64, *(double *)v31.i64, v28);
          if (v180) {
LABEL_26:
          }
            memcpy(__dst, v74, 0x200uLL);
LABEL_27:
          BOOL v23 = v37 == v168 >> 3;
          unsigned int v37 = v76;
          uint64_t v29 = v178;
        }
        while (!v23);
        BOOL v23 = v18++ == v161;
      }
      while (!v23);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>,false,(AGXHardwareTextureMemoryOrder)2>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, int a12)
{
  v179[24] = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  uint64_t v17 = a1;
  unsigned int v154 = a8;
  unsigned int v18 = a8 >> 3;
  unsigned int v138 = a8 + a10 - 1;
  unsigned int v140 = v138 >> 3;
  unsigned int v19 = *(unsigned __int8 *)(*(void *)(a1 + 208) + 88);
  unsigned int v20 = *(_DWORD *)(a1 + 112);
  uint64_t v158 = v17;
  if (*(void *)(v17 + 168))
  {
    __int16 CacheMode = IOSurfaceGetCacheMode();
    uint64_t v17 = v158;
    int v22 = CacheMode & 0xF00;
  }
  else
  {
    int v22 = 0;
  }
  BOOL v23 = (v22 & 0xD00) == 0 || v22 == 768;
  int v24 = v22 & 0xE00;
  int v26 = !v23 && v24 != 1024;
  int v159 = v26;
  BOOL isLevelTiled = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::isLevelTiled(v17, *(_DWORD *)(v17 + 144) + a12);
  uint64_t v28 = v158;
  BOOL v148 = isLevelTiled;
  if (v18 <= v140)
  {
    unsigned int v147 = a7 + a9 - 1;
    unsigned int v137 = a7 >> 3;
    if (a7 >> 3 <= v147 >> 3)
    {
      unsigned int v134 = a5 - 1;
      unsigned int v136 = (a6 - 1) >> 3;
      int v156 = ((a5 - 1) & 7) + 1;
      unsigned int v157 = (a5 - 1) >> 3;
      int v135 = ((a6 - 1) & 7) + 1;
      uint32x2_t v29 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0x700000007);
      int8x8_t v30 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v29, 3uLL))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x1000000010, v29));
      __int32 v145 = v30.i32[0] | v30.i32[1];
      int8x8_t v144 = v30;
      BOOL v142 = v30.i32[0] != 0;
      BOOL v143 = v30.i32[1] != 0;
      unint64_t v133 = 8 * v20 * (unint64_t)v19;
      unsigned int v146 = a7;
      do
      {
        unsigned int v31 = (8 * v18) | 7;
        if (8 * v18 <= v154) {
          int v32 = v154;
        }
        else {
          int v32 = 8 * v18;
        }
        unsigned int v33 = v137;
        if (v138 < v31) {
          unsigned int v31 = v138;
        }
        int v141 = v32 - 8 * v18;
        int v152 = v31 - v32 + 1;
        unsigned int v153 = 8 * v18;
        if (v18 == v136) {
          unsigned int v34 = v135;
        }
        else {
          unsigned int v34 = 8;
        }
        uint64_t v151 = a3 + (v32 - v154) * a11;
        unsigned int v155 = v34;
        do
        {
          unsigned int v35 = 8 * v33;
          unsigned int v36 = 8 * (v33 + 1) - 1;
          if (8 * v33 <= a7) {
            int v37 = a7;
          }
          else {
            int v37 = 8 * v33;
          }
          if (v147 < v36) {
            unsigned int v36 = v147;
          }
          int v38 = v36 - v37 + 1;
          if (v33 == v157) {
            unsigned int v39 = v156;
          }
          else {
            unsigned int v39 = 8;
          }
          BOOL v40 = 1;
          if (v153 >= v154 && v35 >= a7)
          {
            int v41 = v156;
            if (v33 != v157) {
              int v41 = 8;
            }
            BOOL v40 = v38 != v41 || v152 != v34;
          }
          if (v148)
          {
            unsigned int v62 = 0;
            uint64_t v63 = v133 >> (*(unsigned char *)(v28 + 57) != 0);
            char v64 = 1;
            if (v63 > 127)
            {
              if (v63 > 511)
              {
                if (v63 == 512)
                {
                  char v64 = 0;
                  char v65 = 0;
                  unsigned int v62 = 16;
                  unsigned int v66 = 16;
                }
                else
                {
                  char v65 = 1;
                  unsigned int v66 = 0;
                  if (v63 == 1024)
                  {
                    char v64 = 0;
                    unsigned int v66 = 8;
                    unsigned int v62 = 16;
                  }
                }
              }
              else if (v63 == 128)
              {
                char v64 = 0;
                char v65 = 0;
                unsigned int v62 = 32;
                unsigned int v66 = 32;
              }
              else
              {
                char v65 = 1;
                unsigned int v66 = 0;
                if (v63 == 256)
                {
                  char v64 = 0;
                  char v65 = 0;
                  unsigned int v66 = 16;
                  unsigned int v62 = 32;
                }
              }
            }
            else
            {
              char v65 = 1;
              unsigned int v66 = 0;
              switch(v63)
              {
                case 4:
                  char v64 = 0;
                  char v65 = 0;
                  unsigned int v66 = 128;
                  unsigned int v62 = 256;
                  break;
                case 5:
                case 6:
                case 7:
                case 9:
                case 10:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 17:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                  break;
                case 8:
                  char v64 = 0;
                  char v65 = 0;
                  unsigned int v62 = 128;
                  unsigned int v66 = 128;
                  break;
                case 16:
                  char v64 = 0;
                  char v65 = 0;
                  unsigned int v66 = 64;
                  unsigned int v62 = 128;
                  break;
                case 32:
                  char v64 = 0;
                  char v65 = 0;
                  unsigned int v62 = 64;
                  unsigned int v66 = 64;
                  break;
                default:
                  if (v63 == 64)
                  {
                    char v64 = 0;
                    char v65 = 0;
                    unsigned int v66 = 32;
                    unsigned int v62 = 64;
                  }
                  break;
              }
            }
            unsigned int v122 = (v62 >> 3) - 1;
            if (v64) {
              unsigned int v123 = 0;
            }
            else {
              unsigned int v123 = 32 - __clz(~(-1 << -(char)__clz(v122)));
            }
            unsigned int v124 = (v66 >> 3) - 1;
            if (v65)
            {
              unsigned int v125 = 0;
              if (v123) {
                goto LABEL_150;
              }
            }
            else
            {
              unsigned int v125 = 32 - __clz(~(-1 << -(char)__clz(v124)));
              if (v125 | v123)
              {
LABEL_150:
                int v126 = 0;
                uint64_t v127 = 0;
                int v128 = v33 & v122;
                int v129 = v18 & v124;
                BOOL v130 = v123 != 0;
                BOOL v131 = v125 != 0;
                int v132 = 1;
                do
                {
                  --v123;
                  if (v130) {
                    v127 |= (unint64_t)(v132 & v128) << v126++;
                  }
                  else {
                    unsigned int v123 = 0;
                  }
                  --v125;
                  if (v131) {
                    v127 |= (unint64_t)(v132 & v129) << v126++;
                  }
                  else {
                    unsigned int v125 = 0;
                  }
                  v132 *= 2;
                  --v126;
                  BOOL v131 = v125 != 0;
                  BOOL v130 = v123 != 0;
                }
                while (v125 | v123);
                goto LABEL_162;
              }
            }
            uint64_t v127 = 0;
LABEL_162:
            unint64_t v50 = ((unint64_t)(v35 / v62 + v153 / v66 * ((v62 + v134) / v62)) << 14) + (v127 << 9);
            goto LABEL_59;
          }
          if (v145)
          {
            int v43 = 0;
            uint64_t v44 = 0;
            int v45 = 1;
            BOOL v46 = v142;
            BOOL v47 = v143;
            __int32 v49 = v144.i32[0];
            __int32 v48 = v144.i32[1];
            do
            {
              --v48;
              if (v47) {
                v44 |= (unint64_t)(v45 & v33) << v43++;
              }
              else {
                __int32 v48 = 0;
              }
              --v49;
              if (v46) {
                v44 |= (unint64_t)(v45 & v18) << v43++;
              }
              else {
                __int32 v49 = 0;
              }
              v45 *= 2;
              --v43;
              BOOL v46 = v49 != 0;
              BOOL v47 = v48 != 0;
            }
            while (v49 | v48);
          }
          else
          {
            uint64_t v44 = 0;
          }
          unint64_t v50 = v44 << 9;
LABEL_59:
          unsigned int v51 = *(_DWORD *)(v28 + 128) >> (*(unsigned char *)(v28 + 144) + a12);
          if (v51 <= 1) {
            unsigned int v51 = 1;
          }
          unsigned int v52 = v51 + 7;
          if (v52 < 0x10) {
            unsigned int v53 = 0;
          }
          else {
            unsigned int v53 = 32 - __clz(~(-1 << -(char)__clz((v52 >> 3) - 1)));
          }
          unsigned int v54 = *(_DWORD *)(v28 + 132) >> (*(unsigned char *)(v28 + 144) + a12);
          if (v54 <= 1) {
            unsigned int v54 = 1;
          }
          unsigned int v55 = v54 + 7;
          if (v55 < 0x10)
          {
            unsigned int v56 = 0;
            if (!v53)
            {
LABEL_81:
              uint64_t v58 = 0;
              goto LABEL_82;
            }
          }
          else
          {
            unsigned int v56 = 32 - __clz(~(-1 << -(char)__clz((v55 >> 3) - 1)));
            if (!(v56 | v53)) {
              goto LABEL_81;
            }
          }
          int v57 = 0;
          uint64_t v58 = 0;
          BOOL v59 = v53 != 0;
          BOOL v60 = v56 != 0;
          int v61 = 1;
          do
          {
            --v53;
            if (v59) {
              v58 |= (unint64_t)(v61 & v33) << v57++;
            }
            else {
              unsigned int v53 = 0;
            }
            --v56;
            if (v60) {
              v58 |= (unint64_t)(v61 & v18) << v57++;
            }
            else {
              unsigned int v56 = 0;
            }
            v61 *= 2;
            --v57;
            BOOL v60 = v56 != 0;
            BOOL v59 = v53 != 0;
          }
          while (v56 | v53);
LABEL_82:
          int v67 = v39 < 8 || v40;
          char v68 = (unsigned __int8 *)(a4 + 8 * v58);
          uint64_t v69 = v151 + 16 * (v37 - a7);
          unsigned int v70 = (void *)(a2 + v50);
          if (v34 < 8) {
            int v71 = 1;
          }
          else {
            int v71 = v67;
          }
          if (v159)
          {
            if (!v71)
            {
              int v78 = __dst;
LABEL_95:
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::compressMacroblock(v69, a11, (unint64_t)v78, v68, v39, v34, *(_DWORD *)(*(void *)(v28 + 208) + 52));
              goto LABEL_96;
            }
            char v72 = v70;
            char v73 = v39;
            int v74 = v37;
            int v75 = v38;
            unsigned int v76 = v70;
            BOOL v77 = v40;
            memcpy(__dst, v72, sizeof(__dst));
            BOOL v40 = v77;
            unsigned int v70 = v76;
            int v38 = v75;
            int v37 = v74;
            unsigned int v35 = 8 * v33;
            int v78 = __dst;
            LOBYTE(v39) = v73;
            LOBYTE(v34) = v155;
            uint64_t v28 = v158;
          }
          else
          {
            int v78 = v70;
            if (!v71) {
              goto LABEL_95;
            }
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE16ELj4ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint3EEELb0EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = v28;
          unsigned int v161 = v78;
          unsigned __int8 v169 = v39;
          unsigned __int8 v170 = v34;
          unsigned int v165 = v141;
          unsigned int v166 = v37 - v35;
          int v162 = v68;
          uint64_t v163 = v69;
          uint64_t v164 = a11;
          unsigned int v167 = v152;
          unsigned int v168 = v38;
          if (!v40)
          {
            int v79 = *(_DWORD *)(*(void *)(v28 + 208) + 52);
            uint64_t v80 = (uint64_t)&v78[AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressSubblock((uint64_t)v172, 128, (uint64_t)v78, *v68, v79)];
            uint64_t v81 = v80
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressSubblock((uint64_t)&v174, 128, v80, v68[1], v79);
            uint64_t v82 = v81
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressSubblock((uint64_t)&v173, 128, v81, v68[2], v79);
            uint64_t v83 = v82
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressSubblock((uint64_t)&v175, 128, v82, v68[3], v79);
            uint64_t v84 = v83
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressSubblock((uint64_t)&v176, 128, v83, v68[4], v79);
            uint64_t v85 = v84
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressSubblock((uint64_t)&v178, 128, v84, v68[5], v79);
            uint64_t v86 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressSubblock((uint64_t)&v177, 128, v85, v68[6], v79);
            AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressSubblock((uint64_t)v179, 128, v85 + v86, v68[7], v79);
            uint64_t v87 = v167;
            a7 = v146;
            if (!v167 || !v168)
            {
LABEL_130:
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::compressMacroblock((uint64_t)v172, 128, (unint64_t)v161, v162, v169, v170, *(_DWORD *)(*(void *)(v158 + 208) + 52));
              if (!v159) {
                goto LABEL_27;
              }
              goto LABEL_131;
            }
            uint64_t v88 = 0;
            unint64_t v89 = (unint64_t)v165 << 7;
            uint64_t v90 = 16 * v166;
            unsigned int v91 = &v172[v89 + v90];
            uint64_t v92 = v163;
            uint64_t v93 = v164;
            unint64_t v94 = 16 * v168;
            if (v94 <= 1) {
              unint64_t v95 = 1;
            }
            else {
              unint64_t v95 = 16 * v168;
            }
            unint64_t v96 = v89 + v90;
            uint64_t v97 = &v172[v89 + v90];
            if (v95) {
              BOOL v98 = (v95 - 1) >> 32 == 0;
            }
            else {
              BOOL v98 = 0;
            }
            char v99 = !v98;
            uint64_t v100 = v95 & 0xFFFFFFFE0;
            uint64_t v101 = v95 & 0xFFFFFFFF0;
            uint64_t v102 = &v172[v96 + 16];
            unsigned int v103 = (long long *)(v163 + 16);
            int16x8_t v104 = v91;
            uint64_t v105 = v163;
            while (2)
            {
              unsigned int v106 = (char *)(v92 + v93 * v88);
              int16x8_t v107 = &v91[128 * v88];
              if ((unint64_t)(&v97[128 * v88] - v106) < 0x20) {
                char v108 = 1;
              }
              else {
                char v108 = v99;
              }
              if (v108)
              {
                int v109 = 0;
LABEL_127:
                unsigned int v119 = v109 + 1;
                do
                {
                  char v120 = *v106++;
                  *v107++ = v120;
                }
                while (v94 > v119++);
              }
              else
              {
                if (v95 >= 0x20)
                {
                  uint64_t v115 = v103;
                  unint64_t v116 = v102;
                  uint64_t v117 = v95 & 0xFFFFFFFE0;
                  do
                  {
                    long long v118 = *v115;
                    *(v116 - 1) = *(v115 - 1);
                    *unint64_t v116 = v118;
                    v116 += 2;
                    v115 += 2;
                    v117 -= 32;
                  }
                  while (v117);
                  if (v95 == v100) {
                    goto LABEL_110;
                  }
                  uint64_t v110 = v95 & 0xFFFFFFFE0;
                  if ((v95 & 0x10) == 0)
                  {
                    v106 += v100;
                    v107 += v100;
                    int v109 = v95 & 0xFFFFFFE0;
                    goto LABEL_127;
                  }
                }
                else
                {
                  uint64_t v110 = 0;
                }
                v107 += v101;
                unint64_t v111 = v110 - (v95 & 0xFFFFFFFF0);
                uint64_t v112 = (uint64_t *)(v105 + v110);
                float32x4_t v113 = &v104[v110];
                do
                {
                  uint64_t v114 = *v112++;
                  *v113++ = v114;
                  v111 += 8;
                }
                while (v111);
                if (v95 != v101)
                {
                  v106 += v101;
                  int v109 = v95 & 0xFFFFFFF0;
                  goto LABEL_127;
                }
              }
LABEL_110:
              ++v88;
              v102 += 128;
              unsigned int v103 = (long long *)((char *)v103 + v93);
              v105 += v93;
              v104 += 128;
              if (v88 == v87) {
                goto LABEL_130;
              }
              continue;
            }
          }
          dispatch_sync(*(dispatch_queue_t *)(*(void *)(v28 + 8) + 7384), block);
LABEL_96:
          a7 = v146;
          if (!v159) {
            goto LABEL_27;
          }
LABEL_131:
          memcpy(v70, v78, 0x400uLL);
LABEL_27:
          BOOL v23 = v33++ == v147 >> 3;
          uint64_t v28 = v158;
          unsigned int v34 = v155;
        }
        while (!v23);
        BOOL v23 = v18++ == v140;
      }
      while (!v23);
    }
  }
}

void *AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>,false,(AGXHardwareTextureMemoryOrder)2>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, int a12)
{
  uint64_t v307 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  uint64_t v17 = a1;
  unsigned int v224 = a8;
  unsigned int v18 = a8 >> 3;
  unsigned int v208 = a8 + a10 - 1;
  unsigned int v210 = v208 >> 3;
  unsigned int v19 = *(unsigned __int8 *)(*(void *)(a1 + 208) + 88);
  unsigned int v20 = *(_DWORD *)(a1 + 112);
  uint64_t v227 = v17;
  if (*(void *)(v17 + 168))
  {
    __int16 CacheMode = IOSurfaceGetCacheMode();
    uint64_t v17 = v227;
    int v22 = CacheMode & 0xF00;
  }
  else
  {
    int v22 = 0;
  }
  BOOL v23 = (v22 & 0xD00) == 0 || v22 == 768;
  int v24 = v22 & 0xE00;
  int v26 = !v23 && v24 != 1024;
  int v229 = v26;
  result = (void *)AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::isLevelTiled(v17, *(_DWORD *)(v17 + 144) + a12);
  uint64_t v29 = v227;
  int v218 = (int)result;
  if (v18 <= v210)
  {
    unsigned int v217 = a7 + a9 - 1;
    unsigned int v207 = a7 >> 3;
    if (a7 >> 3 <= v217 >> 3)
    {
      unsigned int v204 = a5 - 1;
      unsigned int v226 = (a5 - 1) >> 3;
      int v225 = ((a5 - 1) & 7) + 1;
      int v205 = ((a6 - 1) & 7) + 1;
      unsigned int v206 = (a6 - 1) >> 3;
      uint32x2_t v30 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0x700000007);
      v31.i64[1] = -1;
      *(int32x2_t *)v31.i8 = vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v30, 3uLL)))))));
      *(int8x8_t *)v28.i8 = vbic_s8(*(int8x8_t *)v31.i8, (int8x8_t)vcgt_u32((uint32x2_t)0x1000000010, v30));
      __int32 v215 = v28.i32[0] | v28.i32[1];
      BOOL v213 = v28.i32[1] != 0;
      uint64_t v214 = v28.i64[0];
      BOOL v212 = v28.i32[0] != 0;
      unint64_t v203 = 8 * v20 * (unint64_t)v19;
      unsigned int v216 = a7;
      do
      {
        unsigned int v32 = (8 * v18) | 7;
        if (8 * v18 <= v224) {
          int v33 = v224;
        }
        else {
          int v33 = 8 * v18;
        }
        unsigned int v34 = v207;
        if (v208 < v32) {
          unsigned int v32 = v208;
        }
        unsigned int v223 = 8 * v18;
        int v211 = v33 - 8 * v18;
        int v222 = v32 - v33 + 1;
        int v35 = v205;
        if (v18 != v206) {
          int v35 = 8;
        }
        unsigned int v230 = v35;
        uint64_t v221 = a3 + (v33 - v224) * a11;
        do
        {
          unsigned int v36 = 8 * v34;
          unsigned int v37 = 8 * (v34 + 1) - 1;
          if (8 * v34 <= a7) {
            int v38 = a7;
          }
          else {
            int v38 = 8 * v34;
          }
          if (v217 < v37) {
            unsigned int v37 = v217;
          }
          int v39 = v37 - v38 + 1;
          if (v34 == v226) {
            unsigned int v40 = v225;
          }
          else {
            unsigned int v40 = 8;
          }
          BOOL v41 = 1;
          if (v223 >= v224 && v36 >= a7)
          {
            int v42 = v225;
            if (v34 != v226) {
              int v42 = 8;
            }
            BOOL v41 = v39 != v42 || v222 != v230;
          }
          if (v218)
          {
            unsigned int v63 = 0;
            uint64_t v64 = v203 >> (*(unsigned char *)(v29 + 57) != 0);
            char v65 = 1;
            if (v64 > 127)
            {
              if (v64 > 511)
              {
                if (v64 == 512)
                {
                  char v65 = 0;
                  char v66 = 0;
                  unsigned int v63 = 16;
                  unsigned int v67 = 16;
                }
                else
                {
                  char v66 = 1;
                  unsigned int v67 = 0;
                  if (v64 == 1024)
                  {
                    char v65 = 0;
                    unsigned int v67 = 8;
                    unsigned int v63 = 16;
                  }
                }
              }
              else if (v64 == 128)
              {
                char v65 = 0;
                char v66 = 0;
                unsigned int v63 = 32;
                unsigned int v67 = 32;
              }
              else
              {
                char v66 = 1;
                unsigned int v67 = 0;
                if (v64 == 256)
                {
                  char v65 = 0;
                  char v66 = 0;
                  unsigned int v67 = 16;
                  unsigned int v63 = 32;
                }
              }
            }
            else
            {
              char v66 = 1;
              unsigned int v67 = 0;
              switch(v64)
              {
                case 4:
                  char v65 = 0;
                  char v66 = 0;
                  unsigned int v67 = 128;
                  unsigned int v63 = 256;
                  break;
                case 5:
                case 6:
                case 7:
                case 9:
                case 10:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 17:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                  break;
                case 8:
                  char v65 = 0;
                  char v66 = 0;
                  unsigned int v63 = 128;
                  unsigned int v67 = 128;
                  break;
                case 16:
                  char v65 = 0;
                  char v66 = 0;
                  unsigned int v67 = 64;
                  unsigned int v63 = 128;
                  break;
                case 32:
                  char v65 = 0;
                  char v66 = 0;
                  unsigned int v63 = 64;
                  unsigned int v67 = 64;
                  break;
                default:
                  if (v64 == 64)
                  {
                    char v65 = 0;
                    char v66 = 0;
                    unsigned int v67 = 32;
                    unsigned int v63 = 64;
                  }
                  break;
              }
            }
            unsigned int v192 = (v63 >> 3) - 1;
            if (v65) {
              unsigned int v193 = 0;
            }
            else {
              unsigned int v193 = 32 - __clz(~(-1 << -(char)__clz(v192)));
            }
            unsigned int v194 = (v67 >> 3) - 1;
            if (v66)
            {
              unsigned int v195 = 0;
              if (v193) {
                goto LABEL_224;
              }
            }
            else
            {
              unsigned int v195 = 32 - __clz(~(-1 << -(char)__clz(v194)));
              if (v195 | v193)
              {
LABEL_224:
                int v196 = 0;
                uint64_t v197 = 0;
                int v198 = v34 & v192;
                int v199 = v18 & v194;
                BOOL v200 = v193 != 0;
                BOOL v201 = v195 != 0;
                int v202 = 1;
                do
                {
                  --v193;
                  if (v200) {
                    v197 |= (unint64_t)(v202 & v198) << v196++;
                  }
                  else {
                    unsigned int v193 = 0;
                  }
                  --v195;
                  if (v201) {
                    v197 |= (unint64_t)(v202 & v199) << v196++;
                  }
                  else {
                    unsigned int v195 = 0;
                  }
                  v202 *= 2;
                  --v196;
                  BOOL v201 = v195 != 0;
                  BOOL v200 = v193 != 0;
                }
                while (v195 | v193);
                goto LABEL_236;
              }
            }
            uint64_t v197 = 0;
LABEL_236:
            unint64_t v51 = ((unint64_t)(v36 / v63 + v223 / v67 * ((v63 + v204) / v63)) << 14) + (v197 << 9);
            goto LABEL_58;
          }
          if (v215)
          {
            int v44 = 0;
            uint64_t v45 = 0;
            int v46 = 1;
            BOOL v47 = v213;
            BOOL v48 = v212;
            int v49 = HIDWORD(v214);
            int v50 = v214;
            do
            {
              --v49;
              if (v47) {
                v45 |= (unint64_t)(v46 & v34) << v44++;
              }
              else {
                int v49 = 0;
              }
              --v50;
              if (v48) {
                v45 |= (unint64_t)(v46 & v18) << v44++;
              }
              else {
                int v50 = 0;
              }
              v46 *= 2;
              --v44;
              BOOL v48 = v50 != 0;
              BOOL v47 = v49 != 0;
            }
            while (v50 | v49);
          }
          else
          {
            uint64_t v45 = 0;
          }
          unint64_t v51 = v45 << 9;
LABEL_58:
          unsigned int v52 = *(_DWORD *)(v29 + 128) >> (*(unsigned char *)(v29 + 144) + a12);
          if (v52 <= 1) {
            unsigned int v52 = 1;
          }
          unsigned int v53 = v52 + 7;
          if (v53 < 0x10) {
            unsigned int v54 = 0;
          }
          else {
            unsigned int v54 = 32 - __clz(~(-1 << -(char)__clz((v53 >> 3) - 1)));
          }
          unsigned int v55 = *(_DWORD *)(v29 + 132) >> (*(unsigned char *)(v29 + 144) + a12);
          if (v55 <= 1) {
            unsigned int v55 = 1;
          }
          unsigned int v56 = v55 + 7;
          if (v56 < 0x10)
          {
            unsigned int v57 = 0;
            if (!v54)
            {
LABEL_80:
              uint64_t v59 = 0;
              goto LABEL_81;
            }
          }
          else
          {
            unsigned int v57 = 32 - __clz(~(-1 << -(char)__clz((v56 >> 3) - 1)));
            if (!(v57 | v54)) {
              goto LABEL_80;
            }
          }
          int v58 = 0;
          uint64_t v59 = 0;
          BOOL v60 = v54 != 0;
          BOOL v61 = v57 != 0;
          int v62 = 1;
          do
          {
            --v54;
            if (v60) {
              v59 |= (unint64_t)(v62 & v34) << v58++;
            }
            else {
              unsigned int v54 = 0;
            }
            --v57;
            if (v61) {
              v59 |= (unint64_t)(v62 & v18) << v58++;
            }
            else {
              unsigned int v57 = 0;
            }
            v62 *= 2;
            --v58;
            BOOL v61 = v57 != 0;
            BOOL v60 = v54 != 0;
          }
          while (v57 | v54);
LABEL_81:
          int v68 = v40 < 8 || v41;
          uint64_t v69 = (unsigned __int8 *)(a4 + 8 * v59);
          uint64_t v70 = v221 + 16 * (v38 - a7);
          int v71 = (int32x4_t *)(a2 + v51);
          if (v230 < 8) {
            int v72 = 1;
          }
          else {
            int v72 = v68;
          }
          int v228 = v71;
          if (v229)
          {
            char v73 = (int32x4_t *)__dst;
            if (!v72) {
              goto LABEL_93;
            }
            memcpy(__dst, v71, sizeof(__dst));
            uint64_t v29 = v227;
          }
          else
          {
            char v73 = v71;
            if (!v72)
            {
LABEL_93:
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::compressMacroblock(v70, a11, (unint64_t)v73, v69, v40, v230, *(_DWORD *)(*(void *)(v29 + 208) + 52));
              goto LABEL_94;
            }
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE11ELj4ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint3EEELb0EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = v29;
          unsigned int v232 = v73;
          unsigned __int8 v240 = v40;
          unsigned __int8 v241 = v230;
          unsigned int v236 = v211;
          unsigned int v237 = v38 - v36;
          uint64_t v233 = v69;
          uint64_t v234 = v70;
          uint64_t v235 = a11;
          unsigned int v238 = v222;
          unsigned int v239 = v39;
          if (v41)
          {
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(v29 + 8) + 7384), block);
LABEL_94:
            a7 = v216;
            unsigned int v74 = v34 + 1;
            goto LABEL_204;
          }
          uint64_t v75 = *(void *)(v29 + 208);
          int v76 = *(_DWORD *)(v75 + 52);
          unsigned int v77 = *v69;
          if (*v69)
          {
            if (v77 < 0xF0)
            {
              if (v77 == 127)
              {
                int32x4_t v78 = *v73;
                int32x4_t v31 = v73[1];
                int32x4_t v80 = v73[2];
                int32x4_t v81 = v73[3];
                int32x4_t v82 = v73[4];
                int32x4_t v83 = v73[5];
                int32x4_t v84 = v73[6];
                int32x4_t v85 = v73[7];
                int16x8_t v243 = *(int16x8_t *)v73;
                int32x4_t v244 = v31;
                int32x4_t v245 = v82;
                int32x4_t v246 = v83;
                int32x4_t v251 = v80;
                int32x4_t v252 = v81;
                int32x4_t v253 = v84;
                int32x4_t v254 = v85;
                uint64_t v79 = 128;
                unsigned int v74 = v34 + 1;
              }
              else
              {
                unsigned int v74 = v34 + 1;
                if (v77 == 3)
                {
                  int32x4_t v78 = (int32x4_t)vld1q_dup_f32((const float *)v73->i32);
                  int16x8_t v243 = (int16x8_t)v78;
                  int32x4_t v244 = v78;
                  int32x4_t v245 = v78;
                  int32x4_t v246 = v78;
                  int32x4_t v251 = v78;
                  int32x4_t v252 = v78;
                  int32x4_t v253 = v78;
                  int32x4_t v254 = v78;
                  uint64_t v79 = 4;
                }
                else
                {
                  uint64_t v79 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(&v243, 128, (uint64_t)v73, v77, v28, v31);
                }
              }
            }
            else
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(v243.i32, 128, (uint64_t)v73, v77, *(_DWORD *)(v75 + 52));
              uint64_t v79 = 64;
              unsigned int v74 = v34 + 1;
            }
          }
          else
          {
            uint64_t v79 = 0;
            int32x4_t v78 = 0uLL;
            int32x4_t v246 = 0u;
            int32x4_t v245 = 0u;
            int32x4_t v244 = 0u;
            int16x8_t v243 = 0u;
            int32x4_t v251 = 0u;
            int32x4_t v252 = 0u;
            int32x4_t v253 = 0u;
            int32x4_t v254 = 0u;
            unsigned int v74 = v34 + 1;
          }
          uint64_t v86 = (uint64_t)v73->i64 + v79;
          unsigned int v87 = v69[1];
          if (v69[1])
          {
            if (v87 < 0xF0)
            {
              if (v87 == 127)
              {
                int32x4_t v88 = *(int32x4_t *)v86;
                int32x4_t v31 = *(int32x4_t *)(v86 + 16);
                int32x4_t v90 = *(int32x4_t *)(v86 + 32);
                int32x4_t v91 = *(int32x4_t *)(v86 + 48);
                int32x4_t v92 = *(int32x4_t *)(v86 + 64);
                int32x4_t v93 = *(int32x4_t *)(v86 + 80);
                int32x4_t v94 = *(int32x4_t *)(v86 + 96);
                int32x4_t v95 = *(int32x4_t *)(v86 + 112);
                int16x8_t v259 = *(int16x8_t *)v86;
                int32x4_t v260 = v31;
                int32x4_t v261 = v92;
                int32x4_t v262 = v93;
                int32x4_t v267 = v90;
                int32x4_t v268 = v91;
                int32x4_t v269 = v94;
                int32x4_t v270 = v95;
                uint64_t v89 = 128;
              }
              else if (v87 == 3)
              {
                int32x4_t v88 = (int32x4_t)vld1q_dup_f32((const float *)v86);
                int16x8_t v259 = (int16x8_t)v88;
                int32x4_t v260 = v88;
                int32x4_t v261 = v88;
                int32x4_t v262 = v88;
                int32x4_t v267 = v88;
                int32x4_t v268 = v88;
                int32x4_t v269 = v88;
                int32x4_t v270 = v88;
                uint64_t v89 = 4;
              }
              else
              {
                uint64_t v89 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(&v259, 128, v86, v87, v78, v31);
              }
            }
            else
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(v259.i32, 128, v86, v87, v76);
              uint64_t v89 = 64;
            }
          }
          else
          {
            uint64_t v89 = 0;
            int32x4_t v88 = 0uLL;
            int32x4_t v261 = 0u;
            int32x4_t v262 = 0u;
            int16x8_t v259 = 0u;
            int32x4_t v260 = 0u;
            int32x4_t v267 = 0u;
            int32x4_t v268 = 0u;
            int32x4_t v269 = 0u;
            int32x4_t v270 = 0u;
          }
          uint64_t v96 = v86 + v89;
          unsigned int v97 = v69[2];
          if (v69[2])
          {
            if (v97 < 0xF0)
            {
              if (v97 == 127)
              {
                int32x4_t v98 = *(int32x4_t *)v96;
                int32x4_t v31 = *(int32x4_t *)(v96 + 16);
                int32x4_t v100 = *(int32x4_t *)(v96 + 32);
                int32x4_t v101 = *(int32x4_t *)(v96 + 48);
                int32x4_t v102 = *(int32x4_t *)(v96 + 64);
                int32x4_t v103 = *(int32x4_t *)(v96 + 80);
                int32x4_t v104 = *(int32x4_t *)(v96 + 96);
                int32x4_t v105 = *(int32x4_t *)(v96 + 112);
                int16x8_t v247 = *(int16x8_t *)v96;
                int32x4_t v248 = v31;
                int32x4_t v249 = v102;
                int32x4_t v250 = v103;
                int32x4_t v255 = v100;
                int32x4_t v256 = v101;
                int32x4_t v257 = v104;
                int32x4_t v258 = v105;
                uint64_t v99 = 128;
              }
              else if (v97 == 3)
              {
                int32x4_t v98 = (int32x4_t)vld1q_dup_f32((const float *)v96);
                int16x8_t v247 = (int16x8_t)v98;
                int32x4_t v248 = v98;
                int32x4_t v249 = v98;
                int32x4_t v250 = v98;
                int32x4_t v255 = v98;
                int32x4_t v256 = v98;
                int32x4_t v257 = v98;
                int32x4_t v258 = v98;
                uint64_t v99 = 4;
              }
              else
              {
                uint64_t v99 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(&v247, 128, v96, v97, v88, v31);
              }
            }
            else
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(v247.i32, 128, v96, v97, v76);
              uint64_t v99 = 64;
            }
          }
          else
          {
            uint64_t v99 = 0;
            int32x4_t v98 = 0uLL;
            int32x4_t v249 = 0u;
            int32x4_t v250 = 0u;
            int16x8_t v247 = 0u;
            int32x4_t v248 = 0u;
            int32x4_t v255 = 0u;
            int32x4_t v256 = 0u;
            int32x4_t v257 = 0u;
            int32x4_t v258 = 0u;
          }
          uint64_t v106 = v96 + v99;
          unsigned int v107 = v69[3];
          if (v69[3])
          {
            if (v107 < 0xF0)
            {
              if (v107 == 127)
              {
                int32x4_t v108 = *(int32x4_t *)v106;
                int32x4_t v31 = *(int32x4_t *)(v106 + 16);
                int32x4_t v110 = *(int32x4_t *)(v106 + 32);
                int32x4_t v111 = *(int32x4_t *)(v106 + 48);
                int32x4_t v112 = *(int32x4_t *)(v106 + 64);
                int32x4_t v113 = *(int32x4_t *)(v106 + 80);
                int32x4_t v114 = *(int32x4_t *)(v106 + 96);
                int32x4_t v115 = *(int32x4_t *)(v106 + 112);
                int16x8_t v263 = *(int16x8_t *)v106;
                int32x4_t v264 = v31;
                int32x4_t v265 = v112;
                int32x4_t v266 = v113;
                int32x4_t v271 = v110;
                int32x4_t v272 = v111;
                int32x4_t v273 = v114;
                int32x4_t v274 = v115;
                uint64_t v109 = 128;
              }
              else if (v107 == 3)
              {
                int32x4_t v108 = (int32x4_t)vld1q_dup_f32((const float *)v106);
                int16x8_t v263 = (int16x8_t)v108;
                int32x4_t v264 = v108;
                int32x4_t v265 = v108;
                int32x4_t v266 = v108;
                int32x4_t v271 = v108;
                int32x4_t v272 = v108;
                int32x4_t v273 = v108;
                int32x4_t v274 = v108;
                uint64_t v109 = 4;
              }
              else
              {
                uint64_t v109 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(&v263, 128, v106, v107, v98, v31);
              }
            }
            else
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(v263.i32, 128, v106, v107, v76);
              uint64_t v109 = 64;
            }
          }
          else
          {
            uint64_t v109 = 0;
            int32x4_t v108 = 0uLL;
            int32x4_t v265 = 0u;
            int32x4_t v266 = 0u;
            int16x8_t v263 = 0u;
            int32x4_t v264 = 0u;
            int32x4_t v271 = 0u;
            int32x4_t v272 = 0u;
            int32x4_t v273 = 0u;
            int32x4_t v274 = 0u;
          }
          uint64_t v116 = v106 + v109;
          unsigned int v117 = v69[4];
          if (v69[4])
          {
            if (v117 < 0xF0)
            {
              if (v117 == 127)
              {
                int32x4_t v118 = *(int32x4_t *)v116;
                int32x4_t v31 = *(int32x4_t *)(v116 + 16);
                int32x4_t v120 = *(int32x4_t *)(v116 + 32);
                int32x4_t v121 = *(int32x4_t *)(v116 + 48);
                int32x4_t v122 = *(int32x4_t *)(v116 + 64);
                int32x4_t v123 = *(int32x4_t *)(v116 + 80);
                int32x4_t v124 = *(int32x4_t *)(v116 + 96);
                int32x4_t v125 = *(int32x4_t *)(v116 + 112);
                int16x8_t v275 = *(int16x8_t *)v116;
                int32x4_t v276 = v31;
                int32x4_t v277 = v122;
                int32x4_t v278 = v123;
                int32x4_t v283 = v120;
                int32x4_t v284 = v121;
                int32x4_t v285 = v124;
                int32x4_t v286 = v125;
                uint64_t v119 = 128;
              }
              else if (v117 == 3)
              {
                int32x4_t v118 = (int32x4_t)vld1q_dup_f32((const float *)v116);
                int16x8_t v275 = (int16x8_t)v118;
                int32x4_t v276 = v118;
                int32x4_t v277 = v118;
                int32x4_t v278 = v118;
                int32x4_t v283 = v118;
                int32x4_t v284 = v118;
                int32x4_t v285 = v118;
                int32x4_t v286 = v118;
                uint64_t v119 = 4;
              }
              else
              {
                uint64_t v119 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(&v275, 128, v116, v117, v108, v31);
              }
            }
            else
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(v275.i32, 128, v116, v117, v76);
              uint64_t v119 = 64;
            }
          }
          else
          {
            uint64_t v119 = 0;
            int32x4_t v118 = 0uLL;
            int32x4_t v277 = 0u;
            int32x4_t v278 = 0u;
            int16x8_t v275 = 0u;
            int32x4_t v276 = 0u;
            int32x4_t v283 = 0u;
            int32x4_t v284 = 0u;
            int32x4_t v285 = 0u;
            int32x4_t v286 = 0u;
          }
          uint64_t v126 = v116 + v119;
          unsigned int v127 = v69[5];
          if (v69[5])
          {
            if (v127 < 0xF0)
            {
              if (v127 == 127)
              {
                int32x4_t v128 = *(int32x4_t *)v126;
                int32x4_t v31 = *(int32x4_t *)(v126 + 16);
                int32x4_t v130 = *(int32x4_t *)(v126 + 32);
                int32x4_t v131 = *(int32x4_t *)(v126 + 48);
                int32x4_t v132 = *(int32x4_t *)(v126 + 64);
                int32x4_t v133 = *(int32x4_t *)(v126 + 80);
                int32x4_t v134 = *(int32x4_t *)(v126 + 96);
                int32x4_t v135 = *(int32x4_t *)(v126 + 112);
                int16x8_t v291 = *(int16x8_t *)v126;
                int32x4_t v292 = v31;
                int32x4_t v293 = v132;
                int32x4_t v294 = v133;
                int32x4_t v299 = v130;
                int32x4_t v300 = v131;
                int32x4_t v301 = v134;
                int32x4_t v302 = v135;
                uint64_t v129 = 128;
              }
              else if (v127 == 3)
              {
                int32x4_t v128 = (int32x4_t)vld1q_dup_f32((const float *)v126);
                int16x8_t v291 = (int16x8_t)v128;
                int32x4_t v292 = v128;
                int32x4_t v293 = v128;
                int32x4_t v294 = v128;
                int32x4_t v299 = v128;
                int32x4_t v300 = v128;
                int32x4_t v301 = v128;
                int32x4_t v302 = v128;
                uint64_t v129 = 4;
              }
              else
              {
                uint64_t v129 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(&v291, 128, v126, v127, v118, v31);
              }
            }
            else
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(v291.i32, 128, v126, v127, v76);
              uint64_t v129 = 64;
            }
          }
          else
          {
            uint64_t v129 = 0;
            int32x4_t v128 = 0uLL;
            int32x4_t v293 = 0u;
            int32x4_t v294 = 0u;
            int16x8_t v291 = 0u;
            int32x4_t v292 = 0u;
            int32x4_t v299 = 0u;
            int32x4_t v300 = 0u;
            int32x4_t v301 = 0u;
            int32x4_t v302 = 0u;
          }
          uint64_t v136 = v126 + v129;
          unsigned int v137 = v69[6];
          if (v69[6])
          {
            if (v137 < 0xF0)
            {
              if (v137 == 127)
              {
                int32x4_t v138 = *(int32x4_t *)v136;
                int32x4_t v31 = *(int32x4_t *)(v136 + 16);
                int32x4_t v179 = *(int32x4_t *)(v136 + 32);
                int32x4_t v180 = *(int32x4_t *)(v136 + 48);
                int32x4_t v181 = *(int32x4_t *)(v136 + 64);
                int32x4_t v182 = *(int32x4_t *)(v136 + 80);
                int32x4_t v183 = *(int32x4_t *)(v136 + 96);
                int32x4_t v184 = *(int32x4_t *)(v136 + 112);
                int16x8_t v279 = *(int16x8_t *)v136;
                int32x4_t v280 = v31;
                int32x4_t v281 = v181;
                int32x4_t v282 = v182;
                int32x4_t v287 = v179;
                int32x4_t v288 = v180;
                int32x4_t v289 = v183;
                int32x4_t v290 = v184;
                uint64_t v139 = 128;
                unsigned int v140 = v69[7];
                if (!v69[7]) {
                  goto LABEL_152;
                }
              }
              else if (v137 == 3)
              {
                int32x4_t v138 = (int32x4_t)vld1q_dup_f32((const float *)v136);
                int16x8_t v279 = (int16x8_t)v138;
                int32x4_t v280 = v138;
                int32x4_t v281 = v138;
                int32x4_t v282 = v138;
                int32x4_t v287 = v138;
                int32x4_t v288 = v138;
                int32x4_t v289 = v138;
                int32x4_t v290 = v138;
                uint64_t v139 = 4;
                unsigned int v140 = v69[7];
                if (!v69[7]) {
                  goto LABEL_152;
                }
              }
              else
              {
                uint64_t v139 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(&v279, 128, v136, v137, v128, v31);
                unsigned int v140 = v69[7];
                if (!v69[7])
                {
LABEL_152:
                  int v141 = v73;
                  float32x4_t v297 = 0u;
                  float32x4_t v298 = 0u;
                  int16x8_t v295 = 0u;
                  float32x4_t v296 = 0u;
                  float32x4_t v303 = 0u;
                  float32x4_t v304 = 0u;
                  float32x4_t v305 = 0u;
                  float32x4_t v306 = 0u;
                  goto LABEL_156;
                }
              }
            }
            else
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(v279.i32, 128, v136, v137, v76);
              uint64_t v139 = 64;
              unsigned int v140 = v69[7];
              if (!v69[7]) {
                goto LABEL_152;
              }
            }
          }
          else
          {
            uint64_t v139 = 0;
            int32x4_t v138 = 0uLL;
            int32x4_t v281 = 0u;
            int32x4_t v282 = 0u;
            int16x8_t v279 = 0u;
            int32x4_t v280 = 0u;
            int32x4_t v287 = 0u;
            int32x4_t v288 = 0u;
            int32x4_t v289 = 0u;
            int32x4_t v290 = 0u;
            unsigned int v140 = v69[7];
            if (!v69[7]) {
              goto LABEL_152;
            }
          }
          uint64_t v142 = v136 + v139;
          if (v140 >= 0xF0)
          {
            int v141 = v73;
            AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(v295.i32, 128, v142, v140, v76);
LABEL_156:
            a7 = v216;
            uint64_t v143 = v238;
            if (!v238) {
              goto LABEL_203;
            }
            goto LABEL_157;
          }
          a7 = v216;
          int v141 = v73;
          if (v140 == 127)
          {
            float32x4_t v185 = *(float32x4_t *)(v142 + 16);
            float32x4_t v186 = *(float32x4_t *)(v142 + 32);
            float32x4_t v187 = *(float32x4_t *)(v142 + 48);
            float32x4_t v188 = *(float32x4_t *)(v142 + 64);
            float32x4_t v189 = *(float32x4_t *)(v142 + 80);
            float32x4_t v190 = *(float32x4_t *)(v142 + 96);
            float32x4_t v191 = *(float32x4_t *)(v142 + 112);
            int16x8_t v295 = *(int16x8_t *)v142;
            float32x4_t v296 = v185;
            float32x4_t v297 = v188;
            float32x4_t v298 = v189;
            float32x4_t v303 = v186;
            float32x4_t v304 = v187;
            float32x4_t v305 = v190;
            float32x4_t v306 = v191;
            uint64_t v143 = v238;
            if (!v238) {
              goto LABEL_203;
            }
          }
          else if (v140 == 3)
          {
            float32x4_t v178 = vld1q_dup_f32((const float *)v142);
            int16x8_t v295 = (int16x8_t)v178;
            float32x4_t v296 = v178;
            float32x4_t v297 = v178;
            float32x4_t v298 = v178;
            float32x4_t v303 = v178;
            float32x4_t v304 = v178;
            float32x4_t v305 = v178;
            float32x4_t v306 = v178;
            uint64_t v143 = v238;
            if (!v238) {
              goto LABEL_203;
            }
          }
          else
          {
            AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(&v295, 128, v142, v140, v138, v31);
            uint64_t v143 = v238;
            if (!v238) {
              goto LABEL_203;
            }
          }
LABEL_157:
          if (v239)
          {
            uint64_t v144 = 0;
            unint64_t v145 = (unint64_t)v236 << 7;
            uint64_t v146 = 16 * v237;
            unsigned int v147 = &v243.i8[v145 + v146];
            uint64_t v148 = v234;
            uint64_t v149 = v235;
            unint64_t v150 = 16 * v239;
            if (v150 <= 1) {
              unint64_t v151 = 1;
            }
            else {
              unint64_t v151 = 16 * v239;
            }
            unint64_t v152 = v145 + v146;
            unsigned int v153 = &v243.i8[v145 + v146];
            if (v151) {
              BOOL v154 = (v151 - 1) >> 32 == 0;
            }
            else {
              BOOL v154 = 0;
            }
            char v155 = !v154;
            uint64_t v156 = v151 & 0xFFFFFFFE0;
            uint64_t v157 = v151 & 0xFFFFFFFF0;
            uint64_t v158 = &v244.i8[v152];
            int v159 = (long long *)(v234 + 16);
            uint64_t v160 = v147;
            uint64_t v161 = v234;
            do
            {
              int v162 = (char *)(v148 + v149 * v144);
              uint64_t v163 = &v147[128 * v144];
              if ((unint64_t)(&v153[128 * v144] - v162) < 0x20) {
                char v164 = 1;
              }
              else {
                char v164 = v155;
              }
              if (v164)
              {
                int v165 = 0;
                goto LABEL_185;
              }
              if (v151 >= 0x20)
              {
                unint64_t v171 = v159;
                uint64_t v172 = v158;
                uint64_t v173 = v151 & 0xFFFFFFFE0;
                do
                {
                  long long v174 = *v171;
                  *((_OWORD *)v172 - 1) = *(v171 - 1);
                  *(_OWORD *)uint64_t v172 = v174;
                  v172 += 32;
                  v171 += 2;
                  v173 -= 32;
                }
                while (v173);
                if (v151 == v156) {
                  goto LABEL_168;
                }
                uint64_t v166 = v151 & 0xFFFFFFFE0;
                if ((v151 & 0x10) == 0)
                {
                  v162 += v156;
                  v163 += v156;
                  int v165 = v151 & 0xFFFFFFE0;
                  goto LABEL_185;
                }
              }
              else
              {
                uint64_t v166 = 0;
              }
              v163 += v157;
              unint64_t v167 = v166 - (v151 & 0xFFFFFFFF0);
              unsigned int v168 = (uint64_t *)(v161 + v166);
              unsigned __int8 v169 = &v160[v166];
              do
              {
                uint64_t v170 = *v168++;
                *(void *)unsigned __int8 v169 = v170;
                v169 += 8;
                v167 += 8;
              }
              while (v167);
              if (v151 == v157) {
                goto LABEL_168;
              }
              v162 += v157;
              int v165 = v151 & 0xFFFFFFF0;
LABEL_185:
              unsigned int v175 = v165 + 1;
              do
              {
                char v176 = *v162++;
                *v163++ = v176;
              }
              while (v150 > v175++);
LABEL_168:
              ++v144;
              v158 += 128;
              int v159 = (long long *)((char *)v159 + v149);
              v161 += v149;
              v160 += 128;
            }
            while (v144 != v143);
          }
LABEL_203:
          AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::compressMacroblock((uint64_t)&v243, 128, (unint64_t)v232, v233, v240, v241, *(_DWORD *)(*(void *)(v227 + 208) + 52));
          char v73 = v141;
LABEL_204:
          result = v228;
          if (v229) {
            result = memcpy(v228, v73, 0x400uLL);
          }
          BOOL v23 = v34 == v217 >> 3;
          unsigned int v34 = v74;
          uint64_t v29 = v227;
        }
        while (!v23);
        BOOL v23 = v18++ == v210;
      }
      while (!v23);
    }
  }
  return result;
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>,false,(AGXHardwareTextureMemoryOrder)2>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10, uint64_t a11, int a12)
{
  uint64_t v12 = MEMORY[0x270FA5388](a1);
  unsigned int v14 = v13;
  unsigned int v16 = v15;
  unsigned int v18 = v17;
  unsigned int v20 = v19;
  uint64_t v167 = v21;
  uint64_t v168 = v22;
  uint64_t v157 = v23;
  uint64_t v24 = v12;
  uint64_t v319 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(v12, 0);
  uint64_t v25 = v24;
  unsigned int v172 = v14;
  unsigned int v26 = v14 >> 3;
  unsigned int v156 = v14 + a10 - 1;
  unsigned int v158 = v156 >> 3;
  unsigned int v27 = *(unsigned __int8 *)(*(void *)(v24 + 208) + 88);
  unsigned int v28 = *(_DWORD *)(v24 + 112);
  uint64_t v175 = v25;
  if (*(void *)(v25 + 168))
  {
    __int16 CacheMode = IOSurfaceGetCacheMode();
    uint64_t v25 = v175;
    int v30 = CacheMode & 0xF00;
  }
  else
  {
    int v30 = 0;
  }
  BOOL v31 = (v30 & 0xD00) == 0 || v30 == 768;
  int v32 = v30 & 0xE00;
  int v34 = !v31 && v32 != 1024;
  int v177 = v34;
  BOOL isLevelTiled = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::isLevelTiled(v25, *(_DWORD *)(v25 + 144) + a12);
  uint64_t v36 = v175;
  BOOL v166 = isLevelTiled;
  if (v26 <= v158)
  {
    unsigned int v165 = v16 + a9 - 1;
    unsigned int v155 = v16 >> 3;
    if (v16 >> 3 <= v165 >> 3)
    {
      unsigned int v152 = v20 - 1;
      unsigned int v174 = (v20 - 1) >> 3;
      int v173 = ((v20 - 1) & 7) + 1;
      int v153 = ((v18 - 1) & 7) + 1;
      unsigned int v154 = (v18 - 1) >> 3;
      uint32x2_t v37 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(v20, v18), (int32x2_t)0x700000007);
      int8x8_t v38 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v37, 3uLL))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x1000000010, v37));
      __int32 v163 = v38.i32[0] | v38.i32[1];
      BOOL v161 = v38.i32[1] != 0;
      int8x8_t v162 = v38;
      BOOL v160 = v38.i32[0] != 0;
      unint64_t v151 = 8 * v28 * (unint64_t)v27;
      unsigned int v164 = v16;
      do
      {
        unsigned int v39 = (8 * v26) | 7;
        if (8 * v26 <= v172) {
          int v40 = v172;
        }
        else {
          int v40 = 8 * v26;
        }
        unsigned int v41 = v155;
        if (v156 < v39) {
          unsigned int v39 = v156;
        }
        unsigned int v171 = 8 * v26;
        int v159 = v40 - 8 * v26;
        int v170 = v39 - v40 + 1;
        int v42 = v153;
        if (v26 != v154) {
          int v42 = 8;
        }
        unsigned int v178 = v42;
        uint64_t v169 = v157 + (v40 - v172) * a11;
        do
        {
          unsigned int v43 = 8 * v41;
          unsigned int v44 = 8 * (v41 + 1) - 1;
          if (8 * v41 <= v16) {
            int v45 = v16;
          }
          else {
            int v45 = 8 * v41;
          }
          if (v165 < v44) {
            unsigned int v44 = v165;
          }
          int v46 = v44 - v45 + 1;
          if (v41 == v174) {
            unsigned int v47 = v173;
          }
          else {
            unsigned int v47 = 8;
          }
          BOOL v48 = 1;
          if (v171 >= v172 && v43 >= v16)
          {
            int v49 = v173;
            if (v41 != v174) {
              int v49 = 8;
            }
            BOOL v48 = v46 != v49 || v170 != v178;
          }
          if (v166)
          {
            unsigned int v70 = 0;
            uint64_t v71 = v151 >> (*(unsigned char *)(v36 + 57) != 0);
            char v72 = 1;
            if (v71 > 127)
            {
              if (v71 > 511)
              {
                if (v71 == 512)
                {
                  char v72 = 0;
                  char v73 = 0;
                  unsigned int v70 = 16;
                  unsigned int v74 = 16;
                }
                else
                {
                  char v73 = 1;
                  unsigned int v74 = 0;
                  if (v71 == 1024)
                  {
                    char v72 = 0;
                    unsigned int v74 = 8;
                    unsigned int v70 = 16;
                  }
                }
              }
              else if (v71 == 128)
              {
                char v72 = 0;
                char v73 = 0;
                unsigned int v70 = 32;
                unsigned int v74 = 32;
              }
              else
              {
                char v73 = 1;
                unsigned int v74 = 0;
                if (v71 == 256)
                {
                  char v72 = 0;
                  char v73 = 0;
                  unsigned int v74 = 16;
                  unsigned int v70 = 32;
                }
              }
            }
            else
            {
              char v73 = 1;
              unsigned int v74 = 0;
              switch(v71)
              {
                case 4:
                  char v72 = 0;
                  char v73 = 0;
                  unsigned int v74 = 128;
                  unsigned int v70 = 256;
                  break;
                case 5:
                case 6:
                case 7:
                case 9:
                case 10:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 17:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                  break;
                case 8:
                  char v72 = 0;
                  char v73 = 0;
                  unsigned int v70 = 128;
                  unsigned int v74 = 128;
                  break;
                case 16:
                  char v72 = 0;
                  char v73 = 0;
                  unsigned int v74 = 64;
                  unsigned int v70 = 128;
                  break;
                case 32:
                  char v72 = 0;
                  char v73 = 0;
                  unsigned int v70 = 64;
                  unsigned int v74 = 64;
                  break;
                default:
                  if (v71 == 64)
                  {
                    char v72 = 0;
                    char v73 = 0;
                    unsigned int v74 = 32;
                    unsigned int v70 = 64;
                  }
                  break;
              }
            }
            unsigned int v140 = (v70 >> 3) - 1;
            if (v72) {
              unsigned int v141 = 0;
            }
            else {
              unsigned int v141 = 32 - __clz(~(-1 << -(char)__clz(v140)));
            }
            unsigned int v142 = (v74 >> 3) - 1;
            if (v73)
            {
              unsigned int v143 = 0;
              if (v141) {
                goto LABEL_198;
              }
            }
            else
            {
              unsigned int v143 = 32 - __clz(~(-1 << -(char)__clz(v142)));
              if (v143 | v141)
              {
LABEL_198:
                int v144 = 0;
                uint64_t v145 = 0;
                int v146 = v41 & v140;
                int v147 = v26 & v142;
                BOOL v148 = v141 != 0;
                BOOL v149 = v143 != 0;
                int v150 = 1;
                do
                {
                  --v141;
                  if (v148) {
                    v145 |= (unint64_t)(v150 & v146) << v144++;
                  }
                  else {
                    unsigned int v141 = 0;
                  }
                  --v143;
                  if (v149) {
                    v145 |= (unint64_t)(v150 & v147) << v144++;
                  }
                  else {
                    unsigned int v143 = 0;
                  }
                  v150 *= 2;
                  --v144;
                  BOOL v149 = v143 != 0;
                  BOOL v148 = v141 != 0;
                }
                while (v143 | v141);
                goto LABEL_210;
              }
            }
            uint64_t v145 = 0;
LABEL_210:
            unint64_t v58 = ((unint64_t)(v43 / v70 + v171 / v74 * ((v70 + v152) / v70)) << 14) + (v145 << 10);
            goto LABEL_58;
          }
          if (v163)
          {
            int v51 = 0;
            uint64_t v52 = 0;
            int v53 = 1;
            BOOL v54 = v160;
            BOOL v55 = v161;
            __int32 v57 = v162.i32[0];
            __int32 v56 = v162.i32[1];
            do
            {
              --v56;
              if (v55) {
                v52 |= (unint64_t)(v53 & v41) << v51++;
              }
              else {
                __int32 v56 = 0;
              }
              --v57;
              if (v54) {
                v52 |= (unint64_t)(v53 & v26) << v51++;
              }
              else {
                __int32 v57 = 0;
              }
              v53 *= 2;
              --v51;
              BOOL v54 = v57 != 0;
              BOOL v55 = v56 != 0;
            }
            while (v57 | v56);
          }
          else
          {
            uint64_t v52 = 0;
          }
          unint64_t v58 = v52 << 10;
LABEL_58:
          unsigned int v59 = *(_DWORD *)(v36 + 128) >> (*(unsigned char *)(v36 + 144) + a12);
          if (v59 <= 1) {
            unsigned int v59 = 1;
          }
          unsigned int v60 = v59 + 7;
          if (v60 < 0x10) {
            unsigned int v61 = 0;
          }
          else {
            unsigned int v61 = 32 - __clz(~(-1 << -(char)__clz((v60 >> 3) - 1)));
          }
          unsigned int v62 = *(_DWORD *)(v36 + 132) >> (*(unsigned char *)(v36 + 144) + a12);
          if (v62 <= 1) {
            unsigned int v62 = 1;
          }
          unsigned int v63 = v62 + 7;
          if (v63 < 0x10)
          {
            unsigned int v64 = 0;
            if (!v61)
            {
LABEL_80:
              uint64_t v66 = 0;
              goto LABEL_81;
            }
          }
          else
          {
            unsigned int v64 = 32 - __clz(~(-1 << -(char)__clz((v63 >> 3) - 1)));
            if (!(v64 | v61)) {
              goto LABEL_80;
            }
          }
          int v65 = 0;
          uint64_t v66 = 0;
          BOOL v67 = v61 != 0;
          BOOL v68 = v64 != 0;
          int v69 = 1;
          do
          {
            --v61;
            if (v67) {
              v66 |= (unint64_t)(v69 & v41) << v65++;
            }
            else {
              unsigned int v61 = 0;
            }
            --v64;
            if (v68) {
              v66 |= (unint64_t)(v69 & v26) << v65++;
            }
            else {
              unsigned int v64 = 0;
            }
            v69 *= 2;
            --v65;
            BOOL v68 = v64 != 0;
            BOOL v67 = v61 != 0;
          }
          while (v64 | v61);
LABEL_81:
          int v75 = v47 < 8 || v48;
          int v76 = (unsigned __int8 *)(v168 + 8 * v66);
          uint64_t v77 = v169 + 32 * (v45 - v16);
          int32x4_t v78 = (const double *)(v167 + v58);
          if (v178 < 8) {
            int v79 = 1;
          }
          else {
            int v79 = v75;
          }
          __src = (double *)v78;
          if (v177)
          {
            int32x4_t v78 = (const double *)__dst;
            if (!v79) {
              goto LABEL_93;
            }
            memcpy(__dst, __src, sizeof(__dst));
            uint64_t v36 = v175;
          }
          else if (!v79)
          {
LABEL_93:
            AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::compressMacroblock(v77, a11, (unint64_t)v78, v76, v47, v178, *(_DWORD *)(*(void *)(v36 + 208) + 52));
            goto LABEL_94;
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE17ELj4ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint3EEELb0EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = v36;
          int32x4_t v180 = v78;
          unsigned __int8 v188 = v47;
          unsigned __int8 v189 = v178;
          unsigned int v184 = v159;
          unsigned int v185 = v45 - v43;
          int32x4_t v181 = v76;
          uint64_t v182 = v77;
          uint64_t v183 = a11;
          unsigned int v186 = v170;
          unsigned int v187 = v46;
          if (!v48)
          {
            uint64_t v81 = *(void *)(v36 + 208);
            int v82 = *(_DWORD *)(v81 + 52);
            unsigned int v83 = *v76;
            if (*v76)
            {
              if (v83 < 0xF0)
              {
                if (v83 == 7)
                {
                  float64x2_t v84 = vld1q_dup_f64(v78);
                  float64x2_t v191 = v84;
                  __n128 v192 = (__n128)v84;
                  __n128 v193 = (__n128)v84;
                  __n128 v194 = (__n128)v84;
                  __n128 v195 = (__n128)v84;
                  __n128 v196 = (__n128)v84;
                  __n128 v197 = (__n128)v84;
                  __n128 v198 = (__n128)v84;
                  __n128 v207 = (__n128)v84;
                  __n128 v208 = (__n128)v84;
                  __n128 v209 = (__n128)v84;
                  __n128 v210 = (__n128)v84;
                  __n128 v211 = (__n128)v84;
                  __n128 v212 = (__n128)v84;
                  uint64_t v85 = 8;
                  __n128 v213 = (__n128)v84;
                  __n128 v214 = (__n128)v84;
                }
                else
                {
                  uint64_t v85 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock((uint64_t)&v191, 256, (uint64_t)v78, v83, v38);
                }
              }
              else
              {
                *(void *)&v84.f64[0] = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock((__n128 *)&v191, 256, (uint64_t)v78, v83, *(_DWORD *)(v81 + 52)).n128_u64[0];
                uint64_t v85 = 128;
              }
            }
            else
            {
              uint64_t v85 = 0;
              v84.f64[0] = 0.0;
              __n128 v198 = 0u;
              __n128 v197 = 0u;
              __n128 v196 = 0u;
              __n128 v195 = 0u;
              __n128 v194 = 0u;
              __n128 v193 = 0u;
              __n128 v192 = 0u;
              float64x2_t v191 = 0u;
              __n128 v207 = 0u;
              __n128 v208 = 0u;
              __n128 v209 = 0u;
              __n128 v210 = 0u;
              __n128 v211 = 0u;
              __n128 v212 = 0u;
              __n128 v213 = 0u;
              __n128 v214 = 0u;
            }
            uint64_t v86 = (const double *)((char *)v78 + v85);
            unsigned int v87 = v76[1];
            if (v76[1])
            {
              if (v87 < 0xF0)
              {
                if (v87 == 7)
                {
                  float64x2_t v88 = vld1q_dup_f64(v86);
                  float64x2_t v223 = v88;
                  __n128 v224 = (__n128)v88;
                  __n128 v225 = (__n128)v88;
                  __n128 v226 = (__n128)v88;
                  __n128 v227 = (__n128)v88;
                  __n128 v228 = (__n128)v88;
                  __n128 v229 = (__n128)v88;
                  __n128 v230 = (__n128)v88;
                  __n128 v239 = (__n128)v88;
                  __n128 v240 = (__n128)v88;
                  __n128 v241 = (__n128)v88;
                  __n128 v242 = (__n128)v88;
                  __n128 v243 = (__n128)v88;
                  __n128 v244 = (__n128)v88;
                  uint64_t v89 = 8;
                  __n128 v245 = (__n128)v88;
                  __n128 v246 = (__n128)v88;
                }
                else
                {
                  uint64_t v89 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock((uint64_t)&v223, 256, (uint64_t)v86, v87, *(int8x8_t *)&v84.f64[0]);
                }
              }
              else
              {
                *(void *)&v88.f64[0] = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock((__n128 *)&v223, 256, (uint64_t)v86, v87, v82).n128_u64[0];
                uint64_t v89 = 128;
              }
            }
            else
            {
              uint64_t v89 = 0;
              v88.f64[0] = 0.0;
              __n128 v229 = 0u;
              __n128 v230 = 0u;
              __n128 v227 = 0u;
              __n128 v228 = 0u;
              __n128 v225 = 0u;
              __n128 v226 = 0u;
              float64x2_t v223 = 0u;
              __n128 v224 = 0u;
              __n128 v239 = 0u;
              __n128 v240 = 0u;
              __n128 v241 = 0u;
              __n128 v242 = 0u;
              __n128 v243 = 0u;
              __n128 v244 = 0u;
              __n128 v245 = 0u;
              __n128 v246 = 0u;
            }
            int32x4_t v90 = (const double *)((char *)v86 + v89);
            unsigned int v91 = v76[2];
            if (v76[2])
            {
              if (v91 < 0xF0)
              {
                if (v91 == 7)
                {
                  float64x2_t v92 = vld1q_dup_f64(v90);
                  float64x2_t v199 = v92;
                  __n128 v200 = (__n128)v92;
                  __n128 v201 = (__n128)v92;
                  __n128 v202 = (__n128)v92;
                  __n128 v203 = (__n128)v92;
                  __n128 v204 = (__n128)v92;
                  __n128 v205 = (__n128)v92;
                  __n128 v206 = (__n128)v92;
                  __n128 v215 = (__n128)v92;
                  __n128 v216 = (__n128)v92;
                  __n128 v217 = (__n128)v92;
                  __n128 v218 = (__n128)v92;
                  __n128 v219 = (__n128)v92;
                  __n128 v220 = (__n128)v92;
                  uint64_t v93 = 8;
                  __n128 v221 = (__n128)v92;
                  __n128 v222 = (__n128)v92;
                }
                else
                {
                  uint64_t v93 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock((uint64_t)&v199, 256, (uint64_t)v90, v91, *(int8x8_t *)&v88.f64[0]);
                }
              }
              else
              {
                *(void *)&v92.f64[0] = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock((__n128 *)&v199, 256, (uint64_t)v90, v91, v82).n128_u64[0];
                uint64_t v93 = 128;
              }
            }
            else
            {
              uint64_t v93 = 0;
              v92.f64[0] = 0.0;
              __n128 v205 = 0u;
              __n128 v206 = 0u;
              __n128 v203 = 0u;
              __n128 v204 = 0u;
              __n128 v201 = 0u;
              __n128 v202 = 0u;
              float64x2_t v199 = 0u;
              __n128 v200 = 0u;
              __n128 v215 = 0u;
              __n128 v216 = 0u;
              __n128 v217 = 0u;
              __n128 v218 = 0u;
              __n128 v219 = 0u;
              __n128 v220 = 0u;
              __n128 v221 = 0u;
              __n128 v222 = 0u;
            }
            int32x4_t v94 = (const double *)((char *)v90 + v93);
            unsigned int v95 = v76[3];
            if (v76[3])
            {
              if (v95 < 0xF0)
              {
                if (v95 == 7)
                {
                  float64x2_t v96 = vld1q_dup_f64(v94);
                  float64x2_t v231 = v96;
                  __n128 v232 = (__n128)v96;
                  __n128 v233 = (__n128)v96;
                  __n128 v234 = (__n128)v96;
                  __n128 v235 = (__n128)v96;
                  __n128 v236 = (__n128)v96;
                  __n128 v237 = (__n128)v96;
                  __n128 v238 = (__n128)v96;
                  __n128 v247 = (__n128)v96;
                  __n128 v248 = (__n128)v96;
                  __n128 v249 = (__n128)v96;
                  __n128 v250 = (__n128)v96;
                  __n128 v251 = (__n128)v96;
                  __n128 v252 = (__n128)v96;
                  uint64_t v97 = 8;
                  __n128 v253 = (__n128)v96;
                  __n128 v254 = (__n128)v96;
                }
                else
                {
                  uint64_t v97 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock((uint64_t)&v231, 256, (uint64_t)v94, v95, *(int8x8_t *)&v92.f64[0]);
                }
              }
              else
              {
                *(void *)&v96.f64[0] = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock((__n128 *)&v231, 256, (uint64_t)v94, v95, v82).n128_u64[0];
                uint64_t v97 = 128;
              }
            }
            else
            {
              uint64_t v97 = 0;
              v96.f64[0] = 0.0;
              __n128 v237 = 0u;
              __n128 v238 = 0u;
              __n128 v235 = 0u;
              __n128 v236 = 0u;
              __n128 v233 = 0u;
              __n128 v234 = 0u;
              float64x2_t v231 = 0u;
              __n128 v232 = 0u;
              __n128 v247 = 0u;
              __n128 v248 = 0u;
              __n128 v249 = 0u;
              __n128 v250 = 0u;
              __n128 v251 = 0u;
              __n128 v252 = 0u;
              __n128 v253 = 0u;
              __n128 v254 = 0u;
            }
            int32x4_t v98 = (const double *)((char *)v94 + v97);
            unsigned int v99 = v76[4];
            if (v76[4])
            {
              if (v99 < 0xF0)
              {
                if (v99 == 7)
                {
                  float64x2_t v100 = vld1q_dup_f64(v98);
                  float64x2_t v255 = v100;
                  __n128 v256 = (__n128)v100;
                  __n128 v257 = (__n128)v100;
                  __n128 v258 = (__n128)v100;
                  __n128 v259 = (__n128)v100;
                  __n128 v260 = (__n128)v100;
                  __n128 v261 = (__n128)v100;
                  __n128 v262 = (__n128)v100;
                  __n128 v271 = (__n128)v100;
                  __n128 v272 = (__n128)v100;
                  __n128 v273 = (__n128)v100;
                  __n128 v274 = (__n128)v100;
                  __n128 v275 = (__n128)v100;
                  __n128 v276 = (__n128)v100;
                  __n128 v277 = (__n128)v100;
                  uint64_t v101 = 8;
                  __n128 v278 = (__n128)v100;
                }
                else
                {
                  uint64_t v101 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock((uint64_t)&v255, 256, (uint64_t)v98, v99, *(int8x8_t *)&v96.f64[0]);
                }
              }
              else
              {
                *(void *)&v100.f64[0] = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock((__n128 *)&v255, 256, (uint64_t)v98, v99, v82).n128_u64[0];
                uint64_t v101 = 128;
              }
            }
            else
            {
              uint64_t v101 = 0;
              v100.f64[0] = 0.0;
              __n128 v261 = 0u;
              __n128 v262 = 0u;
              __n128 v259 = 0u;
              __n128 v260 = 0u;
              __n128 v257 = 0u;
              __n128 v258 = 0u;
              float64x2_t v255 = 0u;
              __n128 v256 = 0u;
              __n128 v271 = 0u;
              __n128 v272 = 0u;
              __n128 v273 = 0u;
              __n128 v274 = 0u;
              __n128 v275 = 0u;
              __n128 v276 = 0u;
              __n128 v277 = 0u;
              __n128 v278 = 0u;
            }
            int32x4_t v102 = (const double *)((char *)v98 + v101);
            unsigned int v103 = v76[5];
            if (v76[5])
            {
              if (v103 < 0xF0)
              {
                if (v103 == 7)
                {
                  float64x2_t v104 = vld1q_dup_f64(v102);
                  float64x2_t v287 = v104;
                  __n128 v288 = (__n128)v104;
                  __n128 v289 = (__n128)v104;
                  __n128 v290 = (__n128)v104;
                  __n128 v291 = (__n128)v104;
                  __n128 v292 = (__n128)v104;
                  __n128 v293 = (__n128)v104;
                  __n128 v294 = (__n128)v104;
                  __n128 v303 = (__n128)v104;
                  __n128 v304 = (__n128)v104;
                  __n128 v305 = (__n128)v104;
                  __n128 v306 = (__n128)v104;
                  __n128 v307 = (__n128)v104;
                  __n128 v308 = (__n128)v104;
                  __n128 v309 = (__n128)v104;
                  uint64_t v105 = 8;
                  __n128 v310 = (__n128)v104;
                }
                else
                {
                  uint64_t v105 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock((uint64_t)&v287, 256, (uint64_t)v102, v103, *(int8x8_t *)&v100.f64[0]);
                }
              }
              else
              {
                *(void *)&v104.f64[0] = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock((__n128 *)&v287, 256, (uint64_t)v102, v103, v82).n128_u64[0];
                uint64_t v105 = 128;
              }
            }
            else
            {
              uint64_t v105 = 0;
              v104.f64[0] = 0.0;
              __n128 v293 = 0u;
              __n128 v294 = 0u;
              __n128 v291 = 0u;
              __n128 v292 = 0u;
              __n128 v289 = 0u;
              __n128 v290 = 0u;
              float64x2_t v287 = 0u;
              __n128 v288 = 0u;
              __n128 v303 = 0u;
              __n128 v304 = 0u;
              __n128 v305 = 0u;
              __n128 v306 = 0u;
              __n128 v307 = 0u;
              __n128 v308 = 0u;
              __n128 v309 = 0u;
              __n128 v310 = 0u;
            }
            uint64_t v106 = (const double *)((char *)v102 + v105);
            unsigned int v107 = v76[6];
            if (v76[6])
            {
              if (v107 < 0xF0)
              {
                if (v107 == 7)
                {
                  float64x2_t v108 = vld1q_dup_f64(v106);
                  float64x2_t v263 = v108;
                  __n128 v264 = (__n128)v108;
                  __n128 v265 = (__n128)v108;
                  __n128 v266 = (__n128)v108;
                  __n128 v267 = (__n128)v108;
                  __n128 v268 = (__n128)v108;
                  __n128 v269 = (__n128)v108;
                  __n128 v270 = (__n128)v108;
                  __n128 v279 = (__n128)v108;
                  __n128 v280 = (__n128)v108;
                  __n128 v281 = (__n128)v108;
                  __n128 v282 = (__n128)v108;
                  __n128 v283 = (__n128)v108;
                  __n128 v284 = (__n128)v108;
                  __n128 v285 = (__n128)v108;
                  uint64_t v109 = 8;
                  __n128 v286 = (__n128)v108;
                  unsigned int v110 = v76[7];
                  if (!v76[7]) {
                    goto LABEL_151;
                  }
                }
                else
                {
                  uint64_t v109 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock((uint64_t)&v263, 256, (uint64_t)v106, v107, *(int8x8_t *)&v104.f64[0]);
                  unsigned int v110 = v76[7];
                  if (!v76[7]) {
                    goto LABEL_151;
                  }
                }
              }
              else
              {
                *(void *)&v108.f64[0] = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock((__n128 *)&v263, 256, (uint64_t)v106, v107, v82).n128_u64[0];
                uint64_t v109 = 128;
                unsigned int v110 = v76[7];
                if (!v76[7]) {
                  goto LABEL_151;
                }
              }
LABEL_146:
              int32x4_t v111 = (const double *)((char *)v106 + v109);
              if (v110 < 0xF0)
              {
                unsigned int v16 = v164;
                if (v110 == 7)
                {
                  float64x2_t v112 = vld1q_dup_f64(v111);
                  __n128 v295 = (__n128)v112;
                  float64x2_t v296 = v112;
                  float64x2_t v297 = v112;
                  float64x2_t v298 = v112;
                  float64x2_t v299 = v112;
                  float64x2_t v300 = v112;
                  float64x2_t v301 = v112;
                  float64x2_t v302 = v112;
                  float64x2_t v311 = v112;
                  float64x2_t v312 = v112;
                  float64x2_t v313 = v112;
                  float64x2_t v314 = v112;
                  float64x2_t v315 = v112;
                  float64x2_t v316 = v112;
                  float64x2_t v317 = v112;
                  float64x2_t v318 = v112;
                }
                else
                {
                  AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock((uint64_t)&v295, 256, (uint64_t)v111, v110, *(int8x8_t *)&v108.f64[0]);
                }
              }
              else
              {
                AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(&v295, 256, (uint64_t)v111, v110, v82);
                unsigned int v16 = v164;
              }
            }
            else
            {
              uint64_t v109 = 0;
              v108.f64[0] = 0.0;
              __n128 v269 = 0u;
              __n128 v270 = 0u;
              __n128 v267 = 0u;
              __n128 v268 = 0u;
              __n128 v265 = 0u;
              __n128 v266 = 0u;
              float64x2_t v263 = 0u;
              __n128 v264 = 0u;
              __n128 v279 = 0u;
              __n128 v280 = 0u;
              __n128 v281 = 0u;
              __n128 v282 = 0u;
              __n128 v283 = 0u;
              __n128 v284 = 0u;
              __n128 v285 = 0u;
              __n128 v286 = 0u;
              unsigned int v110 = v76[7];
              if (v76[7]) {
                goto LABEL_146;
              }
LABEL_151:
              float64x2_t v301 = 0u;
              float64x2_t v302 = 0u;
              float64x2_t v299 = 0u;
              float64x2_t v300 = 0u;
              float64x2_t v297 = 0u;
              float64x2_t v298 = 0u;
              __n128 v295 = 0u;
              float64x2_t v296 = 0u;
              float64x2_t v311 = 0u;
              float64x2_t v312 = 0u;
              float64x2_t v313 = 0u;
              float64x2_t v314 = 0u;
              float64x2_t v315 = 0u;
              float64x2_t v316 = 0u;
              float64x2_t v317 = 0u;
              float64x2_t v318 = 0u;
              unsigned int v16 = v164;
            }
            unsigned int v80 = v41 + 1;
            uint64_t v113 = v186;
            if (!v186 || !v187)
            {
LABEL_178:
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::compressMacroblock((uint64_t)&v191, 256, (unint64_t)v180, v181, v188, v189, *(_DWORD *)(*(void *)(v175 + 208) + 52));
              if (!v177) {
                goto LABEL_26;
              }
              goto LABEL_179;
            }
            uint64_t v114 = 0;
            unint64_t v115 = (unint64_t)v184 << 8;
            uint64_t v116 = 32 * v185;
            unsigned int v117 = (char *)&v191 + v115 + v116;
            uint64_t v118 = v182;
            uint64_t v119 = v183;
            unint64_t v120 = 32 * v187;
            if (v120 <= 1) {
              uint64_t v121 = 1;
            }
            else {
              uint64_t v121 = 32 * v187;
            }
            unint64_t v122 = v115 + v116;
            int32x4_t v123 = (char *)&v191 + v115 + v116;
            if (v121) {
              BOOL v124 = (unint64_t)(v121 - 1) >> 32 == 0;
            }
            else {
              BOOL v124 = 0;
            }
            char v125 = !v124;
            uint64_t v126 = v121 & 0x1FFFFFFFE0;
            unsigned int v127 = (char *)&v192 + v122;
            int32x4_t v128 = (long long *)(v182 + 16);
            while (2)
            {
              uint64_t v129 = (char *)(v118 + v119 * v114);
              int32x4_t v130 = &v117[256 * v114];
              if ((unint64_t)(&v123[256 * v114] - v129) < 0x20) {
                char v131 = 1;
              }
              else {
                char v131 = v125;
              }
              if (v131)
              {
                int v132 = 0;
LABEL_175:
                unsigned int v137 = v132 + 1;
                do
                {
                  char v138 = *v129++;
                  *v130++ = v138;
                }
                while (v120 > v137++);
              }
              else
              {
                int32x4_t v133 = v128;
                int32x4_t v134 = v127;
                uint64_t v135 = v121 & 0x1FFFFFFFE0;
                do
                {
                  long long v136 = *v133;
                  *(v134 - 1) = *(v133 - 1);
                  *int32x4_t v134 = v136;
                  v134 += 2;
                  v133 += 2;
                  v135 -= 32;
                }
                while (v135);
                if (v121 != v126)
                {
                  v129 += v126;
                  v130 += v126;
                  int v132 = v121 & 0xFFFFFFE0;
                  goto LABEL_175;
                }
              }
              ++v114;
              v127 += 256;
              int32x4_t v128 = (long long *)((char *)v128 + v119);
              if (v114 == v113) {
                goto LABEL_178;
              }
              continue;
            }
          }
          dispatch_sync(*(dispatch_queue_t *)(*(void *)(v36 + 8) + 7384), block);
LABEL_94:
          unsigned int v16 = v164;
          unsigned int v80 = v41 + 1;
          if (!v177) {
            goto LABEL_26;
          }
LABEL_179:
          memcpy(__src, v78, 0x800uLL);
LABEL_26:
          BOOL v31 = v41 == v165 >> 3;
          unsigned int v41 = v80;
          uint64_t v36 = v175;
        }
        while (!v31);
        BOOL v31 = v26++ == v158;
      }
      while (!v31);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>,false,(AGXHardwareTextureMemoryOrder)2>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, int a12)
{
  uint64_t v235 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  uint64_t v17 = a1;
  unsigned int v184 = a8;
  unsigned int v18 = a8 >> 3;
  unsigned int v168 = a8 + a10 - 1;
  unsigned int v170 = v168 >> 3;
  unsigned int v19 = *(unsigned __int8 *)(*(void *)(a1 + 208) + 88);
  unsigned int v20 = *(_DWORD *)(a1 + 112);
  uint64_t v187 = v17;
  if (*(void *)(v17 + 168))
  {
    __int16 CacheMode = IOSurfaceGetCacheMode();
    uint64_t v17 = v187;
    int v22 = CacheMode & 0xF00;
  }
  else
  {
    int v22 = 0;
  }
  BOOL v23 = (v22 & 0xD00) == 0 || v22 == 768;
  int v24 = v22 & 0xE00;
  int v26 = !v23 && v24 != 1024;
  int v189 = v26;
  BOOL isLevelTiled = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::isLevelTiled(v17, *(_DWORD *)(v17 + 144) + a12);
  uint64_t v28 = v187;
  BOOL v178 = isLevelTiled;
  if (v18 <= v170)
  {
    unsigned int v177 = a7 + a9 - 1;
    unsigned int v167 = a7 >> 3;
    if (a7 >> 3 <= v177 >> 3)
    {
      unsigned int v164 = a5 - 1;
      unsigned int v186 = (a5 - 1) >> 3;
      int v185 = ((a5 - 1) & 7) + 1;
      int v165 = ((a6 - 1) & 7) + 1;
      unsigned int v166 = (a6 - 1) >> 3;
      uint32x2_t v29 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0x700000007);
      *(int32x2_t *)v30.i8 = vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v29, 3uLL)))))));
      v31.i64[0] = 0x1000000010;
      int8x8_t v32 = vbic_s8(*(int8x8_t *)v30.i8, (int8x8_t)vcgt_u32((uint32x2_t)0x1000000010, v29));
      __int32 v175 = v32.i32[0] | v32.i32[1];
      BOOL v173 = v32.i32[1] != 0;
      int8x8_t v174 = v32;
      BOOL v172 = v32.i32[0] != 0;
      unint64_t v163 = 8 * v20 * (unint64_t)v19;
      unsigned int v176 = a7;
      do
      {
        unsigned int v33 = (8 * v18) | 7;
        if (8 * v18 <= v184) {
          int v34 = v184;
        }
        else {
          int v34 = 8 * v18;
        }
        unsigned int v35 = v167;
        if (v168 < v33) {
          unsigned int v33 = v168;
        }
        unsigned int v183 = 8 * v18;
        int v171 = v34 - 8 * v18;
        int v182 = v33 - v34 + 1;
        int v36 = v165;
        if (v18 != v166) {
          int v36 = 8;
        }
        unsigned int v190 = v36;
        uint64_t v181 = a3 + (v34 - v184) * a11;
        do
        {
          unsigned int v37 = 8 * v35;
          unsigned int v38 = 8 * (v35 + 1) - 1;
          if (8 * v35 <= a7) {
            int v39 = a7;
          }
          else {
            int v39 = 8 * v35;
          }
          if (v177 < v38) {
            unsigned int v38 = v177;
          }
          int v40 = v38 - v39 + 1;
          if (v35 == v186) {
            unsigned int v41 = v185;
          }
          else {
            unsigned int v41 = 8;
          }
          BOOL v42 = 1;
          if (v183 >= v184 && v37 >= a7)
          {
            int v43 = v185;
            if (v35 != v186) {
              int v43 = 8;
            }
            BOOL v42 = v40 != v43 || v182 != v190;
          }
          if (v178)
          {
            unsigned int v64 = 0;
            uint64_t v65 = v163 >> (*(unsigned char *)(v28 + 57) != 0);
            char v66 = 1;
            if (v65 > 127)
            {
              if (v65 > 511)
              {
                if (v65 == 512)
                {
                  char v66 = 0;
                  char v67 = 0;
                  unsigned int v64 = 16;
                  unsigned int v68 = 16;
                }
                else
                {
                  char v67 = 1;
                  unsigned int v68 = 0;
                  if (v65 == 1024)
                  {
                    char v66 = 0;
                    unsigned int v68 = 8;
                    unsigned int v64 = 16;
                  }
                }
              }
              else if (v65 == 128)
              {
                char v66 = 0;
                char v67 = 0;
                unsigned int v64 = 32;
                unsigned int v68 = 32;
              }
              else
              {
                char v67 = 1;
                unsigned int v68 = 0;
                if (v65 == 256)
                {
                  char v66 = 0;
                  char v67 = 0;
                  unsigned int v68 = 16;
                  unsigned int v64 = 32;
                }
              }
            }
            else
            {
              char v67 = 1;
              unsigned int v68 = 0;
              switch(v65)
              {
                case 4:
                  char v66 = 0;
                  char v67 = 0;
                  unsigned int v68 = 128;
                  unsigned int v64 = 256;
                  break;
                case 5:
                case 6:
                case 7:
                case 9:
                case 10:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 17:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                  break;
                case 8:
                  char v66 = 0;
                  char v67 = 0;
                  unsigned int v64 = 128;
                  unsigned int v68 = 128;
                  break;
                case 16:
                  char v66 = 0;
                  char v67 = 0;
                  unsigned int v68 = 64;
                  unsigned int v64 = 128;
                  break;
                case 32:
                  char v66 = 0;
                  char v67 = 0;
                  unsigned int v64 = 64;
                  unsigned int v68 = 64;
                  break;
                default:
                  if (v65 == 64)
                  {
                    char v66 = 0;
                    char v67 = 0;
                    unsigned int v68 = 32;
                    unsigned int v64 = 64;
                  }
                  break;
              }
            }
            unsigned int v152 = (v64 >> 3) - 1;
            if (v66) {
              unsigned int v153 = 0;
            }
            else {
              unsigned int v153 = 32 - __clz(~(-1 << -(char)__clz(v152)));
            }
            unsigned int v154 = (v68 >> 3) - 1;
            if (v67)
            {
              unsigned int v155 = 0;
              if (v153) {
                goto LABEL_225;
              }
            }
            else
            {
              unsigned int v155 = 32 - __clz(~(-1 << -(char)__clz(v154)));
              if (v155 | v153)
              {
LABEL_225:
                int v156 = 0;
                uint64_t v157 = 0;
                int v158 = v35 & v152;
                int v159 = v18 & v154;
                BOOL v160 = v153 != 0;
                BOOL v161 = v155 != 0;
                int v162 = 1;
                do
                {
                  --v153;
                  if (v160) {
                    v157 |= (unint64_t)(v162 & v158) << v156++;
                  }
                  else {
                    unsigned int v153 = 0;
                  }
                  --v155;
                  if (v161) {
                    v157 |= (unint64_t)(v162 & v159) << v156++;
                  }
                  else {
                    unsigned int v155 = 0;
                  }
                  v162 *= 2;
                  --v156;
                  BOOL v161 = v155 != 0;
                  BOOL v160 = v153 != 0;
                }
                while (v155 | v153);
                goto LABEL_237;
              }
            }
            uint64_t v157 = 0;
LABEL_237:
            unint64_t v52 = ((unint64_t)(v37 / v64 + v183 / v68 * ((v64 + v164) / v64)) << 14) + (v157 << 8);
            goto LABEL_59;
          }
          if (v175)
          {
            int v45 = 0;
            uint64_t v46 = 0;
            int v47 = 1;
            BOOL v48 = v172;
            BOOL v49 = v173;
            __int32 v51 = v174.i32[0];
            __int32 v50 = v174.i32[1];
            do
            {
              --v50;
              if (v49) {
                v46 |= (unint64_t)(v47 & v35) << v45++;
              }
              else {
                __int32 v50 = 0;
              }
              --v51;
              if (v48) {
                v46 |= (unint64_t)(v47 & v18) << v45++;
              }
              else {
                __int32 v51 = 0;
              }
              v47 *= 2;
              --v45;
              BOOL v48 = v51 != 0;
              BOOL v49 = v50 != 0;
            }
            while (v51 | v50);
          }
          else
          {
            uint64_t v46 = 0;
          }
          unint64_t v52 = v46 << 8;
LABEL_59:
          unsigned int v53 = *(_DWORD *)(v28 + 128) >> (*(unsigned char *)(v28 + 144) + a12);
          if (v53 <= 1) {
            unsigned int v53 = 1;
          }
          unsigned int v54 = v53 + 7;
          if (v54 < 0x10) {
            unsigned int v55 = 0;
          }
          else {
            unsigned int v55 = 32 - __clz(~(-1 << -(char)__clz((v54 >> 3) - 1)));
          }
          unsigned int v56 = *(_DWORD *)(v28 + 132) >> (*(unsigned char *)(v28 + 144) + a12);
          if (v56 <= 1) {
            unsigned int v56 = 1;
          }
          unsigned int v57 = v56 + 7;
          if (v57 < 0x10)
          {
            unsigned int v58 = 0;
            if (!v55)
            {
LABEL_81:
              uint64_t v60 = 0;
              goto LABEL_82;
            }
          }
          else
          {
            unsigned int v58 = 32 - __clz(~(-1 << -(char)__clz((v57 >> 3) - 1)));
            if (!(v58 | v55)) {
              goto LABEL_81;
            }
          }
          int v59 = 0;
          uint64_t v60 = 0;
          BOOL v61 = v55 != 0;
          BOOL v62 = v58 != 0;
          int v63 = 1;
          do
          {
            --v55;
            if (v61) {
              v60 |= (unint64_t)(v63 & v35) << v59++;
            }
            else {
              unsigned int v55 = 0;
            }
            --v58;
            if (v62) {
              v60 |= (unint64_t)(v63 & v18) << v59++;
            }
            else {
              unsigned int v58 = 0;
            }
            v63 *= 2;
            --v59;
            BOOL v62 = v58 != 0;
            BOOL v61 = v55 != 0;
          }
          while (v58 | v55);
LABEL_82:
          int v69 = v41 < 8 || v42;
          unsigned int v70 = (unsigned __int8 *)(a4 + 8 * v60);
          uint64_t v71 = v181 + 8 * (v39 - a7);
          char v72 = (int8x16_t *)(a2 + v52);
          if (v190 < 8) {
            int v73 = 1;
          }
          else {
            int v73 = v69;
          }
          __dst = v72;
          if (v189)
          {
            char v72 = (int8x16_t *)v202;
            if (!v73) {
              goto LABEL_94;
            }
            memcpy(v202, __dst, sizeof(v202));
            uint64_t v28 = v187;
          }
          else if (!v73)
          {
LABEL_94:
            AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::compressMacroblock(v71, a11, (unint64_t)v72, v70, v41, v190, *(_DWORD *)(*(void *)(v28 + 208) + 52));
LABEL_95:
            a7 = v176;
            unsigned int v74 = v35 + 1;
            if (v189) {
              goto LABEL_26;
            }
            goto LABEL_27;
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE4ELj4ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint3EEELb0EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = v28;
          __n128 v192 = v72;
          unsigned __int8 v200 = v41;
          unsigned __int8 v201 = v190;
          unsigned int v196 = v171;
          unsigned int v197 = v39 - v37;
          __n128 v193 = v70;
          uint64_t v194 = v71;
          uint64_t v195 = a11;
          unsigned int v198 = v182;
          unsigned int v199 = v40;
          if (v42)
          {
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(v28 + 8) + 7384), block);
            goto LABEL_95;
          }
          uint64_t v75 = *(void *)(v28 + 208);
          int v76 = *(_DWORD *)(v75 + 52);
          unsigned int v77 = *v70;
          if (*v70)
          {
            if (v77 < 0xF0)
            {
              if (v77 == 63)
              {
                int8x16_t v78 = *v72;
                int8x16_t v30 = v72[1];
                int8x16_t v31 = v72[2];
                int8x16_t v80 = v72[3];
                int8x16_t v203 = *v72;
                int8x16_t v204 = v31;
                int8x16_t v207 = v30;
                int8x16_t v208 = v80;
                uint64_t v79 = 64;
                unsigned int v74 = v35 + 1;
              }
              else
              {
                unsigned int v74 = v35 + 1;
                if (v77 == 1)
                {
                  int8x16_t v78 = (int8x16_t)vld1q_dup_s16(v72->i16);
                  int8x16_t v203 = v78;
                  int8x16_t v204 = v78;
                  int8x16_t v207 = v78;
                  int8x16_t v208 = v78;
                  uint64_t v79 = 2;
                }
                else
                {
                  uint64_t v79 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(&v203, 64, (uint64_t)v72, v77, v32, *(double *)v30.i64, *(int8x8_t *)v31.i8);
                }
              }
            }
            else
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(&v203, 64, (uint64_t)v72, v77, *(_DWORD *)(v75 + 52));
              uint64_t v79 = 32;
              unsigned int v74 = v35 + 1;
            }
          }
          else
          {
            uint64_t v79 = 0;
            v78.i64[0] = 0;
            int8x16_t v203 = 0u;
            int8x16_t v204 = 0u;
            int8x16_t v207 = 0u;
            int8x16_t v208 = 0u;
            unsigned int v74 = v35 + 1;
          }
          uint64_t v81 = (uint64_t)v72->i64 + v79;
          unsigned int v82 = v70[1];
          if (v70[1])
          {
            if (v82 < 0xF0)
            {
              if (v82 == 63)
              {
                int8x16_t v83 = *(int8x16_t *)v81;
                int8x16_t v30 = *(int8x16_t *)(v81 + 16);
                int8x16_t v31 = *(int8x16_t *)(v81 + 32);
                int8x16_t v85 = *(int8x16_t *)(v81 + 48);
                int8x16_t v211 = *(int8x16_t *)v81;
                int8x16_t v212 = v31;
                int8x16_t v215 = v30;
                int8x16_t v216 = v85;
                uint64_t v84 = 64;
              }
              else if (v82 == 1)
              {
                int8x16_t v83 = (int8x16_t)vld1q_dup_s16((const __int16 *)v81);
                int8x16_t v211 = v83;
                int8x16_t v212 = v83;
                int8x16_t v215 = v83;
                int8x16_t v216 = v83;
                uint64_t v84 = 2;
              }
              else
              {
                uint64_t v84 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(&v211, 64, v81, v82, *(int8x8_t *)v78.i8, *(double *)v30.i64, *(int8x8_t *)v31.i8);
              }
            }
            else
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(&v211, 64, v81, v82, v76);
              uint64_t v84 = 32;
            }
          }
          else
          {
            uint64_t v84 = 0;
            v83.i64[0] = 0;
            int8x16_t v211 = 0u;
            int8x16_t v212 = 0u;
            int8x16_t v215 = 0u;
            int8x16_t v216 = 0u;
          }
          uint64_t v86 = v81 + v84;
          unsigned int v87 = v70[2];
          if (v70[2])
          {
            if (v87 < 0xF0)
            {
              if (v87 == 63)
              {
                int8x16_t v88 = *(int8x16_t *)v86;
                int8x16_t v30 = *(int8x16_t *)(v86 + 16);
                int8x16_t v31 = *(int8x16_t *)(v86 + 32);
                int8x16_t v90 = *(int8x16_t *)(v86 + 48);
                int8x16_t v205 = *(int8x16_t *)v86;
                int8x16_t v206 = v31;
                int8x16_t v209 = v30;
                int8x16_t v210 = v90;
                uint64_t v89 = 64;
              }
              else if (v87 == 1)
              {
                int8x16_t v88 = (int8x16_t)vld1q_dup_s16((const __int16 *)v86);
                int8x16_t v205 = v88;
                int8x16_t v206 = v88;
                int8x16_t v209 = v88;
                int8x16_t v210 = v88;
                uint64_t v89 = 2;
              }
              else
              {
                uint64_t v89 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(&v205, 64, v86, v87, *(int8x8_t *)v83.i8, *(double *)v30.i64, *(int8x8_t *)v31.i8);
              }
            }
            else
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(&v205, 64, v86, v87, v76);
              uint64_t v89 = 32;
            }
          }
          else
          {
            uint64_t v89 = 0;
            v88.i64[0] = 0;
            int8x16_t v205 = 0u;
            int8x16_t v206 = 0u;
            int8x16_t v209 = 0u;
            int8x16_t v210 = 0u;
          }
          uint64_t v91 = v86 + v89;
          unsigned int v92 = v70[3];
          if (v70[3])
          {
            if (v92 < 0xF0)
            {
              if (v92 == 63)
              {
                int8x16_t v93 = *(int8x16_t *)v91;
                int8x16_t v30 = *(int8x16_t *)(v91 + 16);
                int8x16_t v31 = *(int8x16_t *)(v91 + 32);
                int8x16_t v95 = *(int8x16_t *)(v91 + 48);
                int8x16_t v213 = *(int8x16_t *)v91;
                int8x16_t v214 = v31;
                int8x16_t v217 = v30;
                int8x16_t v218 = v95;
                uint64_t v94 = 64;
              }
              else if (v92 == 1)
              {
                int8x16_t v93 = (int8x16_t)vld1q_dup_s16((const __int16 *)v91);
                int8x16_t v213 = v93;
                int8x16_t v214 = v93;
                int8x16_t v217 = v93;
                int8x16_t v218 = v93;
                uint64_t v94 = 2;
              }
              else
              {
                uint64_t v94 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(&v213, 64, v91, v92, *(int8x8_t *)v88.i8, *(double *)v30.i64, *(int8x8_t *)v31.i8);
              }
            }
            else
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(&v213, 64, v91, v92, v76);
              uint64_t v94 = 32;
            }
          }
          else
          {
            uint64_t v94 = 0;
            v93.i64[0] = 0;
            int8x16_t v213 = 0u;
            int8x16_t v214 = 0u;
            int8x16_t v217 = 0u;
            int8x16_t v218 = 0u;
          }
          uint64_t v96 = v91 + v94;
          unsigned int v97 = v70[4];
          if (v70[4])
          {
            if (v97 < 0xF0)
            {
              if (v97 == 63)
              {
                int8x16_t v98 = *(int8x16_t *)v96;
                int8x16_t v30 = *(int8x16_t *)(v96 + 16);
                int8x16_t v31 = *(int8x16_t *)(v96 + 32);
                int8x16_t v100 = *(int8x16_t *)(v96 + 48);
                int8x16_t v219 = *(int8x16_t *)v96;
                int8x16_t v220 = v31;
                int8x16_t v223 = v30;
                int8x16_t v224 = v100;
                uint64_t v99 = 64;
              }
              else if (v97 == 1)
              {
                int8x16_t v98 = (int8x16_t)vld1q_dup_s16((const __int16 *)v96);
                int8x16_t v219 = v98;
                int8x16_t v220 = v98;
                int8x16_t v223 = v98;
                int8x16_t v224 = v98;
                uint64_t v99 = 2;
              }
              else
              {
                uint64_t v99 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(&v219, 64, v96, v97, *(int8x8_t *)v93.i8, *(double *)v30.i64, *(int8x8_t *)v31.i8);
              }
            }
            else
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(&v219, 64, v96, v97, v76);
              uint64_t v99 = 32;
            }
          }
          else
          {
            uint64_t v99 = 0;
            v98.i64[0] = 0;
            int8x16_t v219 = 0u;
            int8x16_t v220 = 0u;
            int8x16_t v223 = 0u;
            int8x16_t v224 = 0u;
          }
          uint64_t v101 = v96 + v99;
          unsigned int v102 = v70[5];
          if (v70[5])
          {
            if (v102 < 0xF0)
            {
              if (v102 == 63)
              {
                int8x16_t v103 = *(int8x16_t *)v101;
                int8x16_t v30 = *(int8x16_t *)(v101 + 16);
                int8x16_t v31 = *(int8x16_t *)(v101 + 32);
                int8x16_t v105 = *(int8x16_t *)(v101 + 48);
                int8x16_t v227 = *(int8x16_t *)v101;
                int8x16_t v228 = v31;
                int8x16_t v231 = v30;
                int8x16_t v232 = v105;
                uint64_t v104 = 64;
              }
              else if (v102 == 1)
              {
                int8x16_t v103 = (int8x16_t)vld1q_dup_s16((const __int16 *)v101);
                int8x16_t v227 = v103;
                int8x16_t v228 = v103;
                int8x16_t v231 = v103;
                int8x16_t v232 = v103;
                uint64_t v104 = 2;
              }
              else
              {
                uint64_t v104 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(&v227, 64, v101, v102, *(int8x8_t *)v98.i8, *(double *)v30.i64, *(int8x8_t *)v31.i8);
              }
            }
            else
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(&v227, 64, v101, v102, v76);
              uint64_t v104 = 32;
            }
          }
          else
          {
            uint64_t v104 = 0;
            v103.i64[0] = 0;
            int8x16_t v227 = 0u;
            int8x16_t v228 = 0u;
            int8x16_t v231 = 0u;
            int8x16_t v232 = 0u;
          }
          uint64_t v106 = v101 + v104;
          unsigned int v107 = v70[6];
          if (v70[6])
          {
            if (v107 < 0xF0)
            {
              if (v107 == 63)
              {
                int8x16_t v108 = *(int8x16_t *)v106;
                int8x16_t v30 = *(int8x16_t *)(v106 + 16);
                int8x16_t v31 = *(int8x16_t *)(v106 + 32);
                int8x16_t v148 = *(int8x16_t *)(v106 + 48);
                int8x16_t v221 = *(int8x16_t *)v106;
                int8x16_t v222 = v31;
                int8x16_t v225 = v30;
                int8x16_t v226 = v148;
                uint64_t v109 = 64;
                unsigned int v110 = v70[7];
                if (!v70[7]) {
                  goto LABEL_154;
                }
              }
              else if (v107 == 1)
              {
                int8x16_t v108 = (int8x16_t)vld1q_dup_s16((const __int16 *)v106);
                int8x16_t v221 = v108;
                int8x16_t v222 = v108;
                int8x16_t v225 = v108;
                int8x16_t v226 = v108;
                uint64_t v109 = 2;
                unsigned int v110 = v70[7];
                if (!v70[7]) {
                  goto LABEL_154;
                }
              }
              else
              {
                uint64_t v109 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(&v221, 64, v106, v107, *(int8x8_t *)v103.i8, *(double *)v30.i64, *(int8x8_t *)v31.i8);
                unsigned int v110 = v70[7];
                if (!v70[7])
                {
LABEL_154:
                  int8x16_t v229 = 0u;
                  int16x8_t v230 = 0u;
                  int16x8_t v233 = 0u;
                  int16x8_t v234 = 0u;
                  goto LABEL_158;
                }
              }
            }
            else
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(&v221, 64, v106, v107, v76);
              uint64_t v109 = 32;
              unsigned int v110 = v70[7];
              if (!v70[7]) {
                goto LABEL_154;
              }
            }
          }
          else
          {
            uint64_t v109 = 0;
            v108.i64[0] = 0;
            int8x16_t v221 = 0u;
            int8x16_t v222 = 0u;
            int8x16_t v225 = 0u;
            int8x16_t v226 = 0u;
            unsigned int v110 = v70[7];
            if (!v70[7]) {
              goto LABEL_154;
            }
          }
          uint64_t v111 = v106 + v109;
          if (v110 >= 0xF0)
          {
            AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(&v229, 64, v111, v110, v76);
LABEL_158:
            a7 = v176;
            uint64_t v112 = v198;
            if (!v198) {
              goto LABEL_205;
            }
            goto LABEL_159;
          }
          a7 = v176;
          if (v110 == 63)
          {
            int16x8_t v149 = *(int16x8_t *)(v111 + 16);
            int16x8_t v150 = *(int16x8_t *)(v111 + 32);
            int16x8_t v151 = *(int16x8_t *)(v111 + 48);
            int8x16_t v229 = *(int8x16_t *)v111;
            int16x8_t v230 = v150;
            int16x8_t v233 = v149;
            int16x8_t v234 = v151;
            uint64_t v112 = v198;
            if (!v198) {
              goto LABEL_205;
            }
          }
          else if (v110 == 1)
          {
            int16x8_t v147 = vld1q_dup_s16((const __int16 *)v111);
            int8x16_t v229 = (int8x16_t)v147;
            int16x8_t v230 = v147;
            int16x8_t v233 = v147;
            int16x8_t v234 = v147;
            uint64_t v112 = v198;
            if (!v198) {
              goto LABEL_205;
            }
          }
          else
          {
            AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(&v229, 64, v111, v110, *(int8x8_t *)v108.i8, *(double *)v30.i64, *(int8x8_t *)v31.i8);
            uint64_t v112 = v198;
            if (!v198) {
              goto LABEL_205;
            }
          }
LABEL_159:
          if (v199)
          {
            uint64_t v113 = 0;
            unint64_t v114 = (unint64_t)v196 << 6;
            uint64_t v115 = 8 * v197;
            uint64_t v116 = &v203.i8[v114 + v115];
            uint64_t v117 = v194;
            uint64_t v118 = v195;
            unint64_t v119 = 8 * v199;
            if (v119 <= 1) {
              unint64_t v120 = 1;
            }
            else {
              unint64_t v120 = 8 * v199;
            }
            unint64_t v121 = v114 + v115;
            unint64_t v122 = &v203.i8[v114 + v115];
            if (v120) {
              BOOL v123 = (v120 - 1) >> 32 == 0;
            }
            else {
              BOOL v123 = 0;
            }
            char v124 = !v123;
            uint64_t v125 = v120 & 0x7FFFFFFE0;
            uint64_t v126 = v120 & 0x7FFFFFFF8;
            unsigned int v127 = &v204.i8[v121];
            int32x4_t v128 = (long long *)(v194 + 16);
            uint64_t v129 = v116;
            uint64_t v130 = v194;
            do
            {
              char v131 = (char *)(v117 + v118 * v113);
              int v132 = &v116[64 * v113];
              if ((unint64_t)(&v122[64 * v113] - v131) < 0x20) {
                char v133 = 1;
              }
              else {
                char v133 = v124;
              }
              if (v133)
              {
                int v134 = 0;
                goto LABEL_187;
              }
              if (v120 >= 0x20)
              {
                long long v136 = v128;
                unsigned int v137 = v127;
                uint64_t v138 = v120 & 0x7FFFFFFE0;
                do
                {
                  long long v139 = *v136;
                  *((_OWORD *)v137 - 1) = *(v136 - 1);
                  *(_OWORD *)unsigned int v137 = v139;
                  v137 += 32;
                  v136 += 2;
                  v138 -= 32;
                }
                while (v138);
                if (v120 == v125) {
                  goto LABEL_170;
                }
                uint64_t v135 = v120 & 0x7FFFFFFE0;
                if ((v120 & 0x18) == 0)
                {
                  v131 += v125;
                  v132 += v125;
                  int v134 = v120 & 0xFFFFFFE0;
                  goto LABEL_187;
                }
              }
              else
              {
                uint64_t v135 = 0;
              }
              v132 += v126;
              unint64_t v140 = v135 - (v120 & 0x7FFFFFFF8);
              unsigned int v141 = (uint64_t *)(v130 + v135);
              unsigned int v142 = &v129[v135];
              do
              {
                uint64_t v143 = *v141++;
                *(void *)unsigned int v142 = v143;
                v142 += 8;
                v140 += 8;
              }
              while (v140);
              if (v120 == v126) {
                goto LABEL_170;
              }
              v131 += v126;
              int v134 = v120 & 0xFFFFFFF8;
LABEL_187:
              unsigned int v144 = v134 + 1;
              do
              {
                char v145 = *v131++;
                *v132++ = v145;
              }
              while (v119 > v144++);
LABEL_170:
              ++v113;
              v127 += 64;
              int32x4_t v128 = (long long *)((char *)v128 + v118);
              v130 += v118;
              v129 += 64;
            }
            while (v113 != v112);
          }
LABEL_205:
          AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::compressMacroblock((uint64_t)&v203, 64, (unint64_t)v192, v193, v200, v201, *(_DWORD *)(*(void *)(v187 + 208) + 52));
          if (v189) {
LABEL_26:
          }
            memcpy(__dst, v72, 0x200uLL);
LABEL_27:
          BOOL v23 = v35 == v177 >> 3;
          unsigned int v35 = v74;
          uint64_t v28 = v187;
        }
        while (!v23);
        BOOL v23 = v18++ == v170;
      }
      while (!v23);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>,false,(AGXHardwareTextureMemoryOrder)2>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10, uint64_t a11, int a12)
{
  uint64_t v12 = MEMORY[0x270FA5388](a1);
  unsigned int v14 = v13;
  unsigned int v16 = v15;
  unsigned int v18 = v17;
  unsigned int v20 = v19;
  uint64_t v167 = v21;
  uint64_t v168 = v22;
  uint64_t v157 = v23;
  uint64_t v24 = v12;
  uint64_t v319 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(v12, 0);
  uint64_t v25 = v24;
  unsigned int v172 = v14;
  unsigned int v26 = v14 >> 3;
  unsigned int v156 = v14 + a10 - 1;
  unsigned int v158 = v156 >> 3;
  unsigned int v27 = *(unsigned __int8 *)(*(void *)(v24 + 208) + 88);
  unsigned int v28 = *(_DWORD *)(v24 + 112);
  uint64_t v175 = v25;
  if (*(void *)(v25 + 168))
  {
    __int16 CacheMode = IOSurfaceGetCacheMode();
    uint64_t v25 = v175;
    int v30 = CacheMode & 0xF00;
  }
  else
  {
    int v30 = 0;
  }
  BOOL v31 = (v30 & 0xD00) == 0 || v30 == 768;
  int v32 = v30 & 0xE00;
  int v34 = !v31 && v32 != 1024;
  int v177 = v34;
  BOOL isLevelTiled = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::isLevelTiled(v25, *(_DWORD *)(v25 + 144) + a12);
  uint64_t v36 = v175;
  BOOL v166 = isLevelTiled;
  if (v26 <= v158)
  {
    unsigned int v165 = v16 + a9 - 1;
    unsigned int v155 = v16 >> 3;
    if (v16 >> 3 <= v165 >> 3)
    {
      unsigned int v152 = v20 - 1;
      unsigned int v174 = (v20 - 1) >> 3;
      int v173 = ((v20 - 1) & 7) + 1;
      int v153 = ((v18 - 1) & 7) + 1;
      unsigned int v154 = (v18 - 1) >> 3;
      uint32x2_t v37 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(v20, v18), (int32x2_t)0x700000007);
      int8x8_t v38 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v37, 3uLL))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x1000000010, v37));
      __int32 v163 = v38.i32[0] | v38.i32[1];
      BOOL v161 = v38.i32[1] != 0;
      int8x8_t v162 = v38;
      BOOL v160 = v38.i32[0] != 0;
      unint64_t v151 = 8 * v28 * (unint64_t)v27;
      unsigned int v164 = v16;
      do
      {
        unsigned int v39 = (8 * v26) | 7;
        if (8 * v26 <= v172) {
          int v40 = v172;
        }
        else {
          int v40 = 8 * v26;
        }
        unsigned int v41 = v155;
        if (v156 < v39) {
          unsigned int v39 = v156;
        }
        unsigned int v171 = 8 * v26;
        int v159 = v40 - 8 * v26;
        int v170 = v39 - v40 + 1;
        int v42 = v153;
        if (v26 != v154) {
          int v42 = 8;
        }
        unsigned int v178 = v42;
        uint64_t v169 = v157 + (v40 - v172) * a11;
        do
        {
          unsigned int v43 = 8 * v41;
          unsigned int v44 = 8 * (v41 + 1) - 1;
          if (8 * v41 <= v16) {
            int v45 = v16;
          }
          else {
            int v45 = 8 * v41;
          }
          if (v165 < v44) {
            unsigned int v44 = v165;
          }
          int v46 = v44 - v45 + 1;
          if (v41 == v174) {
            unsigned int v47 = v173;
          }
          else {
            unsigned int v47 = 8;
          }
          BOOL v48 = 1;
          if (v171 >= v172 && v43 >= v16)
          {
            int v49 = v173;
            if (v41 != v174) {
              int v49 = 8;
            }
            BOOL v48 = v46 != v49 || v170 != v178;
          }
          if (v166)
          {
            unsigned int v70 = 0;
            uint64_t v71 = v151 >> (*(unsigned char *)(v36 + 57) != 0);
            char v72 = 1;
            if (v71 > 127)
            {
              if (v71 > 511)
              {
                if (v71 == 512)
                {
                  char v72 = 0;
                  char v73 = 0;
                  unsigned int v70 = 16;
                  unsigned int v74 = 16;
                }
                else
                {
                  char v73 = 1;
                  unsigned int v74 = 0;
                  if (v71 == 1024)
                  {
                    char v72 = 0;
                    unsigned int v74 = 8;
                    unsigned int v70 = 16;
                  }
                }
              }
              else if (v71 == 128)
              {
                char v72 = 0;
                char v73 = 0;
                unsigned int v70 = 32;
                unsigned int v74 = 32;
              }
              else
              {
                char v73 = 1;
                unsigned int v74 = 0;
                if (v71 == 256)
                {
                  char v72 = 0;
                  char v73 = 0;
                  unsigned int v74 = 16;
                  unsigned int v70 = 32;
                }
              }
            }
            else
            {
              char v73 = 1;
              unsigned int v74 = 0;
              switch(v71)
              {
                case 4:
                  char v72 = 0;
                  char v73 = 0;
                  unsigned int v74 = 128;
                  unsigned int v70 = 256;
                  break;
                case 5:
                case 6:
                case 7:
                case 9:
                case 10:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 17:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                  break;
                case 8:
                  char v72 = 0;
                  char v73 = 0;
                  unsigned int v70 = 128;
                  unsigned int v74 = 128;
                  break;
                case 16:
                  char v72 = 0;
                  char v73 = 0;
                  unsigned int v74 = 64;
                  unsigned int v70 = 128;
                  break;
                case 32:
                  char v72 = 0;
                  char v73 = 0;
                  unsigned int v70 = 64;
                  unsigned int v74 = 64;
                  break;
                default:
                  if (v71 == 64)
                  {
                    char v72 = 0;
                    char v73 = 0;
                    unsigned int v74 = 32;
                    unsigned int v70 = 64;
                  }
                  break;
              }
            }
            unsigned int v140 = (v70 >> 3) - 1;
            if (v72) {
              unsigned int v141 = 0;
            }
            else {
              unsigned int v141 = 32 - __clz(~(-1 << -(char)__clz(v140)));
            }
            unsigned int v142 = (v74 >> 3) - 1;
            if (v73)
            {
              unsigned int v143 = 0;
              if (v141) {
                goto LABEL_198;
              }
            }
            else
            {
              unsigned int v143 = 32 - __clz(~(-1 << -(char)__clz(v142)));
              if (v143 | v141)
              {
LABEL_198:
                int v144 = 0;
                uint64_t v145 = 0;
                int v146 = v41 & v140;
                int v147 = v26 & v142;
                BOOL v148 = v141 != 0;
                BOOL v149 = v143 != 0;
                int v150 = 1;
                do
                {
                  --v141;
                  if (v148) {
                    v145 |= (unint64_t)(v150 & v146) << v144++;
                  }
                  else {
                    unsigned int v141 = 0;
                  }
                  --v143;
                  if (v149) {
                    v145 |= (unint64_t)(v150 & v147) << v144++;
                  }
                  else {
                    unsigned int v143 = 0;
                  }
                  v150 *= 2;
                  --v144;
                  BOOL v149 = v143 != 0;
                  BOOL v148 = v141 != 0;
                }
                while (v143 | v141);
                goto LABEL_210;
              }
            }
            uint64_t v145 = 0;
LABEL_210:
            unint64_t v58 = ((unint64_t)(v43 / v70 + v171 / v74 * ((v70 + v152) / v70)) << 14) + (v145 << 10);
            goto LABEL_58;
          }
          if (v163)
          {
            int v51 = 0;
            uint64_t v52 = 0;
            int v53 = 1;
            BOOL v54 = v160;
            BOOL v55 = v161;
            __int32 v57 = v162.i32[0];
            __int32 v56 = v162.i32[1];
            do
            {
              --v56;
              if (v55) {
                v52 |= (unint64_t)(v53 & v41) << v51++;
              }
              else {
                __int32 v56 = 0;
              }
              --v57;
              if (v54) {
                v52 |= (unint64_t)(v53 & v26) << v51++;
              }
              else {
                __int32 v57 = 0;
              }
              v53 *= 2;
              --v51;
              BOOL v54 = v57 != 0;
              BOOL v55 = v56 != 0;
            }
            while (v57 | v56);
          }
          else
          {
            uint64_t v52 = 0;
          }
          unint64_t v58 = v52 << 10;
LABEL_58:
          unsigned int v59 = *(_DWORD *)(v36 + 128) >> (*(unsigned char *)(v36 + 144) + a12);
          if (v59 <= 1) {
            unsigned int v59 = 1;
          }
          unsigned int v60 = v59 + 7;
          if (v60 < 0x10) {
            unsigned int v61 = 0;
          }
          else {
            unsigned int v61 = 32 - __clz(~(-1 << -(char)__clz((v60 >> 3) - 1)));
          }
          unsigned int v62 = *(_DWORD *)(v36 + 132) >> (*(unsigned char *)(v36 + 144) + a12);
          if (v62 <= 1) {
            unsigned int v62 = 1;
          }
          unsigned int v63 = v62 + 7;
          if (v63 < 0x10)
          {
            unsigned int v64 = 0;
            if (!v61)
            {
LABEL_80:
              uint64_t v66 = 0;
              goto LABEL_81;
            }
          }
          else
          {
            unsigned int v64 = 32 - __clz(~(-1 << -(char)__clz((v63 >> 3) - 1)));
            if (!(v64 | v61)) {
              goto LABEL_80;
            }
          }
          int v65 = 0;
          uint64_t v66 = 0;
          BOOL v67 = v61 != 0;
          BOOL v68 = v64 != 0;
          int v69 = 1;
          do
          {
            --v61;
            if (v67) {
              v66 |= (unint64_t)(v69 & v41) << v65++;
            }
            else {
              unsigned int v61 = 0;
            }
            --v64;
            if (v68) {
              v66 |= (unint64_t)(v69 & v26) << v65++;
            }
            else {
              unsigned int v64 = 0;
            }
            v69 *= 2;
            --v65;
            BOOL v68 = v64 != 0;
            BOOL v67 = v61 != 0;
          }
          while (v64 | v61);
LABEL_81:
          int v75 = v47 < 8 || v48;
          int v76 = (unsigned __int8 *)(v168 + 8 * v66);
          uint64_t v77 = v169 + 32 * (v45 - v16);
          int8x16_t v78 = (const double *)(v167 + v58);
          if (v178 < 8) {
            int v79 = 1;
          }
          else {
            int v79 = v75;
          }
          __src = (double *)v78;
          if (v177)
          {
            int8x16_t v78 = (const double *)__dst;
            if (!v79) {
              goto LABEL_93;
            }
            memcpy(__dst, __src, sizeof(__dst));
            uint64_t v36 = v175;
          }
          else if (!v79)
          {
LABEL_93:
            AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::compressMacroblock(v77, a11, (unint64_t)v78, v76, v47, v178, *(_DWORD *)(*(void *)(v36 + 208) + 52));
            goto LABEL_94;
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE18ELj4ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint3EEELb0EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = v36;
          int32x4_t v180 = v78;
          unsigned __int8 v188 = v47;
          unsigned __int8 v189 = v178;
          unsigned int v184 = v159;
          unsigned int v185 = v45 - v43;
          uint64_t v181 = v76;
          uint64_t v182 = v77;
          uint64_t v183 = a11;
          unsigned int v186 = v170;
          unsigned int v187 = v46;
          if (!v48)
          {
            uint64_t v81 = *(void *)(v36 + 208);
            int v82 = *(_DWORD *)(v81 + 52);
            unsigned int v83 = *v76;
            if (*v76)
            {
              if (v83 < 0xF0)
              {
                if (v83 == 7)
                {
                  float64x2_t v85 = vld1q_dup_f64(v78);
                  float64x2_t v191 = v85;
                  float64x2_t v192 = v85;
                  float64x2_t v193 = v85;
                  float64x2_t v194 = v85;
                  float64x2_t v195 = v85;
                  float64x2_t v196 = v85;
                  float64x2_t v197 = v85;
                  float64x2_t v198 = v85;
                  float64x2_t v207 = v85;
                  float64x2_t v208 = v85;
                  float64x2_t v209 = v85;
                  float64x2_t v210 = v85;
                  float64x2_t v211 = v85;
                  float64x2_t v212 = v85;
                  uint64_t v84 = 8;
                  float64x2_t v213 = v85;
                  float64x2_t v214 = v85;
                }
                else
                {
                  uint64_t v84 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock((uint64_t)&v191, 256, (uint64_t)v78, v83);
                }
              }
              else
              {
                AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock((int16x4_t *)&v191, 256, (unint64_t)v78, v83, *(_DWORD *)(v81 + 52));
                uint64_t v84 = 128;
              }
            }
            else
            {
              uint64_t v84 = 0;
              float64x2_t v198 = 0u;
              float64x2_t v197 = 0u;
              float64x2_t v196 = 0u;
              float64x2_t v195 = 0u;
              float64x2_t v194 = 0u;
              float64x2_t v193 = 0u;
              float64x2_t v192 = 0u;
              float64x2_t v191 = 0u;
              float64x2_t v207 = 0u;
              float64x2_t v208 = 0u;
              float64x2_t v209 = 0u;
              float64x2_t v210 = 0u;
              float64x2_t v211 = 0u;
              float64x2_t v212 = 0u;
              float64x2_t v213 = 0u;
              float64x2_t v214 = 0u;
            }
            uint64_t v86 = (const double *)((char *)v78 + v84);
            unsigned int v87 = v76[1];
            if (v76[1])
            {
              if (v87 < 0xF0)
              {
                if (v87 == 7)
                {
                  float64x2_t v89 = vld1q_dup_f64(v86);
                  float64x2_t v223 = v89;
                  float64x2_t v224 = v89;
                  float64x2_t v225 = v89;
                  float64x2_t v226 = v89;
                  float64x2_t v227 = v89;
                  float64x2_t v228 = v89;
                  float64x2_t v229 = v89;
                  float64x2_t v230 = v89;
                  float64x2_t v239 = v89;
                  float64x2_t v240 = v89;
                  float64x2_t v241 = v89;
                  float64x2_t v242 = v89;
                  float64x2_t v243 = v89;
                  float64x2_t v244 = v89;
                  uint64_t v88 = 8;
                  float64x2_t v245 = v89;
                  float64x2_t v246 = v89;
                }
                else
                {
                  uint64_t v88 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock((uint64_t)&v223, 256, (uint64_t)v86, v87);
                }
              }
              else
              {
                AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock((int16x4_t *)&v223, 256, (unint64_t)v86, v87, v82);
                uint64_t v88 = 128;
              }
            }
            else
            {
              uint64_t v88 = 0;
              float64x2_t v229 = 0u;
              float64x2_t v230 = 0u;
              float64x2_t v227 = 0u;
              float64x2_t v228 = 0u;
              float64x2_t v225 = 0u;
              float64x2_t v226 = 0u;
              float64x2_t v223 = 0u;
              float64x2_t v224 = 0u;
              float64x2_t v239 = 0u;
              float64x2_t v240 = 0u;
              float64x2_t v241 = 0u;
              float64x2_t v242 = 0u;
              float64x2_t v243 = 0u;
              float64x2_t v244 = 0u;
              float64x2_t v245 = 0u;
              float64x2_t v246 = 0u;
            }
            int8x16_t v90 = (const double *)((char *)v86 + v88);
            unsigned int v91 = v76[2];
            if (v76[2])
            {
              if (v91 < 0xF0)
              {
                if (v91 == 7)
                {
                  float64x2_t v93 = vld1q_dup_f64(v90);
                  float64x2_t v199 = v93;
                  float64x2_t v200 = v93;
                  float64x2_t v201 = v93;
                  float64x2_t v202 = v93;
                  float64x2_t v203 = v93;
                  float64x2_t v204 = v93;
                  float64x2_t v205 = v93;
                  float64x2_t v206 = v93;
                  float64x2_t v215 = v93;
                  float64x2_t v216 = v93;
                  float64x2_t v217 = v93;
                  float64x2_t v218 = v93;
                  float64x2_t v219 = v93;
                  float64x2_t v220 = v93;
                  uint64_t v92 = 8;
                  float64x2_t v221 = v93;
                  float64x2_t v222 = v93;
                }
                else
                {
                  uint64_t v92 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock((uint64_t)&v199, 256, (uint64_t)v90, v91);
                }
              }
              else
              {
                AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock((int16x4_t *)&v199, 256, (unint64_t)v90, v91, v82);
                uint64_t v92 = 128;
              }
            }
            else
            {
              uint64_t v92 = 0;
              float64x2_t v205 = 0u;
              float64x2_t v206 = 0u;
              float64x2_t v203 = 0u;
              float64x2_t v204 = 0u;
              float64x2_t v201 = 0u;
              float64x2_t v202 = 0u;
              float64x2_t v199 = 0u;
              float64x2_t v200 = 0u;
              float64x2_t v215 = 0u;
              float64x2_t v216 = 0u;
              float64x2_t v217 = 0u;
              float64x2_t v218 = 0u;
              float64x2_t v219 = 0u;
              float64x2_t v220 = 0u;
              float64x2_t v221 = 0u;
              float64x2_t v222 = 0u;
            }
            uint64_t v94 = (const double *)((char *)v90 + v92);
            unsigned int v95 = v76[3];
            if (v76[3])
            {
              if (v95 < 0xF0)
              {
                if (v95 == 7)
                {
                  float64x2_t v97 = vld1q_dup_f64(v94);
                  float64x2_t v231 = v97;
                  float64x2_t v232 = v97;
                  float64x2_t v233 = v97;
                  float64x2_t v234 = v97;
                  float64x2_t v235 = v97;
                  float64x2_t v236 = v97;
                  float64x2_t v237 = v97;
                  float64x2_t v238 = v97;
                  float64x2_t v247 = v97;
                  float64x2_t v248 = v97;
                  float64x2_t v249 = v97;
                  float64x2_t v250 = v97;
                  float64x2_t v251 = v97;
                  float64x2_t v252 = v97;
                  uint64_t v96 = 8;
                  float64x2_t v253 = v97;
                  float64x2_t v254 = v97;
                }
                else
                {
                  uint64_t v96 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock((uint64_t)&v231, 256, (uint64_t)v94, v95);
                }
              }
              else
              {
                AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock((int16x4_t *)&v231, 256, (unint64_t)v94, v95, v82);
                uint64_t v96 = 128;
              }
            }
            else
            {
              uint64_t v96 = 0;
              float64x2_t v237 = 0u;
              float64x2_t v238 = 0u;
              float64x2_t v235 = 0u;
              float64x2_t v236 = 0u;
              float64x2_t v233 = 0u;
              float64x2_t v234 = 0u;
              float64x2_t v231 = 0u;
              float64x2_t v232 = 0u;
              float64x2_t v247 = 0u;
              float64x2_t v248 = 0u;
              float64x2_t v249 = 0u;
              float64x2_t v250 = 0u;
              float64x2_t v251 = 0u;
              float64x2_t v252 = 0u;
              float64x2_t v253 = 0u;
              float64x2_t v254 = 0u;
            }
            int8x16_t v98 = (const double *)((char *)v94 + v96);
            unsigned int v99 = v76[4];
            if (v76[4])
            {
              if (v99 < 0xF0)
              {
                if (v99 == 7)
                {
                  float64x2_t v101 = vld1q_dup_f64(v98);
                  float64x2_t v255 = v101;
                  float64x2_t v256 = v101;
                  float64x2_t v257 = v101;
                  float64x2_t v258 = v101;
                  float64x2_t v259 = v101;
                  float64x2_t v260 = v101;
                  float64x2_t v261 = v101;
                  float64x2_t v262 = v101;
                  float64x2_t v271 = v101;
                  float64x2_t v272 = v101;
                  float64x2_t v273 = v101;
                  float64x2_t v274 = v101;
                  float64x2_t v275 = v101;
                  float64x2_t v276 = v101;
                  float64x2_t v277 = v101;
                  uint64_t v100 = 8;
                  float64x2_t v278 = v101;
                }
                else
                {
                  uint64_t v100 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock((uint64_t)&v255, 256, (uint64_t)v98, v99);
                }
              }
              else
              {
                AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock((int16x4_t *)&v255, 256, (unint64_t)v98, v99, v82);
                uint64_t v100 = 128;
              }
            }
            else
            {
              uint64_t v100 = 0;
              float64x2_t v261 = 0u;
              float64x2_t v262 = 0u;
              float64x2_t v259 = 0u;
              float64x2_t v260 = 0u;
              float64x2_t v257 = 0u;
              float64x2_t v258 = 0u;
              float64x2_t v255 = 0u;
              float64x2_t v256 = 0u;
              float64x2_t v271 = 0u;
              float64x2_t v272 = 0u;
              float64x2_t v273 = 0u;
              float64x2_t v274 = 0u;
              float64x2_t v275 = 0u;
              float64x2_t v276 = 0u;
              float64x2_t v277 = 0u;
              float64x2_t v278 = 0u;
            }
            unsigned int v102 = (const double *)((char *)v98 + v100);
            unsigned int v103 = v76[5];
            if (v76[5])
            {
              if (v103 < 0xF0)
              {
                if (v103 == 7)
                {
                  float64x2_t v105 = vld1q_dup_f64(v102);
                  float64x2_t v287 = v105;
                  float64x2_t v288 = v105;
                  float64x2_t v289 = v105;
                  float64x2_t v290 = v105;
                  float64x2_t v291 = v105;
                  float64x2_t v292 = v105;
                  float64x2_t v293 = v105;
                  float64x2_t v294 = v105;
                  float64x2_t v303 = v105;
                  float64x2_t v304 = v105;
                  float64x2_t v305 = v105;
                  float64x2_t v306 = v105;
                  float64x2_t v307 = v105;
                  float64x2_t v308 = v105;
                  float64x2_t v309 = v105;
                  uint64_t v104 = 8;
                  float64x2_t v310 = v105;
                }
                else
                {
                  uint64_t v104 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock((uint64_t)&v287, 256, (uint64_t)v102, v103);
                }
              }
              else
              {
                AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock((int16x4_t *)&v287, 256, (unint64_t)v102, v103, v82);
                uint64_t v104 = 128;
              }
            }
            else
            {
              uint64_t v104 = 0;
              float64x2_t v293 = 0u;
              float64x2_t v294 = 0u;
              float64x2_t v291 = 0u;
              float64x2_t v292 = 0u;
              float64x2_t v289 = 0u;
              float64x2_t v290 = 0u;
              float64x2_t v287 = 0u;
              float64x2_t v288 = 0u;
              float64x2_t v303 = 0u;
              float64x2_t v304 = 0u;
              float64x2_t v305 = 0u;
              float64x2_t v306 = 0u;
              float64x2_t v307 = 0u;
              float64x2_t v308 = 0u;
              float64x2_t v309 = 0u;
              float64x2_t v310 = 0u;
            }
            uint64_t v106 = (const double *)((char *)v102 + v104);
            unsigned int v107 = v76[6];
            if (v76[6])
            {
              if (v107 < 0xF0)
              {
                if (v107 == 7)
                {
                  float64x2_t v110 = vld1q_dup_f64(v106);
                  float64x2_t v263 = v110;
                  float64x2_t v264 = v110;
                  float64x2_t v265 = v110;
                  float64x2_t v266 = v110;
                  float64x2_t v267 = v110;
                  float64x2_t v268 = v110;
                  float64x2_t v269 = v110;
                  float64x2_t v270 = v110;
                  float64x2_t v279 = v110;
                  float64x2_t v280 = v110;
                  float64x2_t v281 = v110;
                  float64x2_t v282 = v110;
                  float64x2_t v283 = v110;
                  float64x2_t v284 = v110;
                  float64x2_t v285 = v110;
                  uint64_t v108 = 8;
                  float64x2_t v286 = v110;
                  unsigned int v109 = v76[7];
                  if (!v76[7]) {
                    goto LABEL_151;
                  }
                }
                else
                {
                  uint64_t v108 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock((uint64_t)&v263, 256, (uint64_t)v106, v107);
                  unsigned int v109 = v76[7];
                  if (!v76[7]) {
                    goto LABEL_151;
                  }
                }
              }
              else
              {
                AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock((int16x4_t *)&v263, 256, (unint64_t)v106, v107, v82);
                uint64_t v108 = 128;
                unsigned int v109 = v76[7];
                if (!v76[7]) {
                  goto LABEL_151;
                }
              }
LABEL_146:
              uint64_t v111 = (const double *)((char *)v106 + v108);
              if (v109 < 0xF0)
              {
                unsigned int v16 = v164;
                if (v109 == 7)
                {
                  float64x2_t v112 = vld1q_dup_f64(v111);
                  float64x2_t v295 = v112;
                  float64x2_t v296 = v112;
                  float64x2_t v297 = v112;
                  float64x2_t v298 = v112;
                  float64x2_t v299 = v112;
                  float64x2_t v300 = v112;
                  float64x2_t v301 = v112;
                  float64x2_t v302 = v112;
                  float64x2_t v311 = v112;
                  float64x2_t v312 = v112;
                  float64x2_t v313 = v112;
                  float64x2_t v314 = v112;
                  float64x2_t v315 = v112;
                  float64x2_t v316 = v112;
                  float64x2_t v317 = v112;
                  float64x2_t v318 = v112;
                }
                else
                {
                  AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock((uint64_t)&v295, 256, (uint64_t)v111, v109);
                }
              }
              else
              {
                AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock((int16x4_t *)&v295, 256, (unint64_t)v111, v109, v82);
                unsigned int v16 = v164;
              }
            }
            else
            {
              uint64_t v108 = 0;
              float64x2_t v269 = 0u;
              float64x2_t v270 = 0u;
              float64x2_t v267 = 0u;
              float64x2_t v268 = 0u;
              float64x2_t v265 = 0u;
              float64x2_t v266 = 0u;
              float64x2_t v263 = 0u;
              float64x2_t v264 = 0u;
              float64x2_t v279 = 0u;
              float64x2_t v280 = 0u;
              float64x2_t v281 = 0u;
              float64x2_t v282 = 0u;
              float64x2_t v283 = 0u;
              float64x2_t v284 = 0u;
              float64x2_t v285 = 0u;
              float64x2_t v286 = 0u;
              unsigned int v109 = v76[7];
              if (v76[7]) {
                goto LABEL_146;
              }
LABEL_151:
              float64x2_t v301 = 0u;
              float64x2_t v302 = 0u;
              float64x2_t v299 = 0u;
              float64x2_t v300 = 0u;
              float64x2_t v297 = 0u;
              float64x2_t v298 = 0u;
              float64x2_t v295 = 0u;
              float64x2_t v296 = 0u;
              float64x2_t v311 = 0u;
              float64x2_t v312 = 0u;
              float64x2_t v313 = 0u;
              float64x2_t v314 = 0u;
              float64x2_t v315 = 0u;
              float64x2_t v316 = 0u;
              float64x2_t v317 = 0u;
              float64x2_t v318 = 0u;
              unsigned int v16 = v164;
            }
            unsigned int v80 = v41 + 1;
            uint64_t v113 = v186;
            if (!v186 || !v187)
            {
LABEL_178:
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::compressMacroblock((uint64_t)&v191, 256, (unint64_t)v180, v181, v188, v189, *(_DWORD *)(*(void *)(v175 + 208) + 52));
              if (!v177) {
                goto LABEL_26;
              }
              goto LABEL_179;
            }
            uint64_t v114 = 0;
            unint64_t v115 = (unint64_t)v184 << 8;
            uint64_t v116 = 32 * v185;
            uint64_t v117 = (char *)&v191 + v115 + v116;
            uint64_t v118 = v182;
            uint64_t v119 = v183;
            unint64_t v120 = 32 * v187;
            if (v120 <= 1) {
              uint64_t v121 = 1;
            }
            else {
              uint64_t v121 = 32 * v187;
            }
            unint64_t v122 = v115 + v116;
            BOOL v123 = (char *)&v191 + v115 + v116;
            if (v121) {
              BOOL v124 = (unint64_t)(v121 - 1) >> 32 == 0;
            }
            else {
              BOOL v124 = 0;
            }
            char v125 = !v124;
            uint64_t v126 = v121 & 0x1FFFFFFFE0;
            unsigned int v127 = (char *)&v192 + v122;
            int32x4_t v128 = (long long *)(v182 + 16);
            while (2)
            {
              uint64_t v129 = (char *)(v118 + v119 * v114);
              uint64_t v130 = &v117[256 * v114];
              if ((unint64_t)(&v123[256 * v114] - v129) < 0x20) {
                char v131 = 1;
              }
              else {
                char v131 = v125;
              }
              if (v131)
              {
                int v132 = 0;
LABEL_175:
                unsigned int v137 = v132 + 1;
                do
                {
                  char v138 = *v129++;
                  *v130++ = v138;
                }
                while (v120 > v137++);
              }
              else
              {
                char v133 = v128;
                int v134 = v127;
                uint64_t v135 = v121 & 0x1FFFFFFFE0;
                do
                {
                  long long v136 = *v133;
                  *(v134 - 1) = *(v133 - 1);
                  *int v134 = v136;
                  v134 += 2;
                  v133 += 2;
                  v135 -= 32;
                }
                while (v135);
                if (v121 != v126)
                {
                  v129 += v126;
                  v130 += v126;
                  int v132 = v121 & 0xFFFFFFE0;
                  goto LABEL_175;
                }
              }
              ++v114;
              v127 += 256;
              int32x4_t v128 = (long long *)((char *)v128 + v119);
              if (v114 == v113) {
                goto LABEL_178;
              }
              continue;
            }
          }
          dispatch_sync(*(dispatch_queue_t *)(*(void *)(v36 + 8) + 7384), block);
LABEL_94:
          unsigned int v16 = v164;
          unsigned int v80 = v41 + 1;
          if (!v177) {
            goto LABEL_26;
          }
LABEL_179:
          memcpy(__src, v78, 0x800uLL);
LABEL_26:
          BOOL v31 = v41 == v165 >> 3;
          unsigned int v41 = v80;
          uint64_t v36 = v175;
        }
        while (!v31);
        BOOL v31 = v26++ == v158;
      }
      while (!v31);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>,false,(AGXHardwareTextureMemoryOrder)2>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10, uint64_t a11, int a12)
{
  uint64_t v12 = MEMORY[0x270FA5388](a1);
  unsigned int v14 = v13;
  unsigned int v16 = v15;
  unsigned int v18 = v17;
  unsigned int v20 = v19;
  uint64_t v148 = v21;
  uint64_t v149 = v22;
  uint64_t v138 = v23;
  uint64_t v24 = v12;
  v178[96] = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(v12, 0);
  uint64_t v25 = v24;
  unsigned int v153 = v14;
  unsigned int v26 = v14 >> 3;
  unsigned int v137 = v14 + a10 - 1;
  unsigned int v139 = v137 >> 3;
  unsigned int v27 = *(unsigned __int8 *)(*(void *)(v24 + 208) + 88);
  unsigned int v28 = *(_DWORD *)(v24 + 112);
  uint64_t v157 = v25;
  if (*(void *)(v25 + 168))
  {
    __int16 CacheMode = IOSurfaceGetCacheMode();
    uint64_t v25 = v157;
    int v30 = CacheMode & 0xF00;
  }
  else
  {
    int v30 = 0;
  }
  BOOL v31 = (v30 & 0xD00) == 0 || v30 == 768;
  int v32 = v30 & 0xE00;
  int v34 = !v31 && v32 != 1024;
  int v158 = v34;
  BOOL isLevelTiled = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::isLevelTiled(v25, *(_DWORD *)(v25 + 144) + a12);
  uint64_t v36 = v157;
  BOOL v147 = isLevelTiled;
  if (v26 <= v139)
  {
    unsigned int v146 = v16 + a9 - 1;
    unsigned int v136 = v16 >> 3;
    if (v16 >> 3 <= v146 >> 3)
    {
      unsigned int v133 = v20 - 1;
      unsigned int v135 = (v18 - 1) >> 3;
      int v155 = ((v20 - 1) & 7) + 1;
      unsigned int v156 = (v20 - 1) >> 3;
      int v134 = ((v18 - 1) & 7) + 1;
      uint32x2_t v37 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(v20, v18), (int32x2_t)0x700000007);
      int8x8_t v38 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v37, 3uLL))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x1000000010, v37));
      __int32 v144 = v38.i32[0] | v38.i32[1];
      int8x8_t v143 = v38;
      BOOL v141 = v38.i32[0] != 0;
      BOOL v142 = v38.i32[1] != 0;
      unint64_t v132 = 8 * v28 * (unint64_t)v27;
      unsigned int v145 = v16;
      do
      {
        unsigned int v39 = (8 * v26) | 7;
        if (8 * v26 <= v153) {
          int v40 = v153;
        }
        else {
          int v40 = 8 * v26;
        }
        unsigned int v41 = v136;
        if (v137 < v39) {
          unsigned int v39 = v137;
        }
        int v140 = v40 - 8 * v26;
        int v151 = v39 - v40 + 1;
        unsigned int v152 = 8 * v26;
        if (v26 == v135) {
          unsigned int v42 = v134;
        }
        else {
          unsigned int v42 = 8;
        }
        uint64_t v150 = v138 + (v40 - v153) * a11;
        unsigned int v154 = v42;
        do
        {
          unsigned int v43 = 8 * v41;
          unsigned int v44 = 8 * (v41 + 1) - 1;
          if (8 * v41 <= v16) {
            int v45 = v16;
          }
          else {
            int v45 = 8 * v41;
          }
          if (v146 < v44) {
            unsigned int v44 = v146;
          }
          int v46 = v44 - v45 + 1;
          if (v41 == v156) {
            unsigned int v47 = v155;
          }
          else {
            unsigned int v47 = 8;
          }
          BOOL v48 = 1;
          if (v152 >= v153 && v43 >= v16)
          {
            int v49 = v155;
            if (v41 != v156) {
              int v49 = 8;
            }
            BOOL v48 = v46 != v49 || v151 != v42;
          }
          if (v147)
          {
            unsigned int v70 = 0;
            uint64_t v71 = v132 >> (*(unsigned char *)(v36 + 57) != 0);
            char v72 = 1;
            if (v71 > 127)
            {
              if (v71 > 511)
              {
                if (v71 == 512)
                {
                  char v72 = 0;
                  char v73 = 0;
                  unsigned int v70 = 16;
                  unsigned int v74 = 16;
                }
                else
                {
                  char v73 = 1;
                  unsigned int v74 = 0;
                  if (v71 == 1024)
                  {
                    char v72 = 0;
                    unsigned int v74 = 8;
                    unsigned int v70 = 16;
                  }
                }
              }
              else if (v71 == 128)
              {
                char v72 = 0;
                char v73 = 0;
                unsigned int v70 = 32;
                unsigned int v74 = 32;
              }
              else
              {
                char v73 = 1;
                unsigned int v74 = 0;
                if (v71 == 256)
                {
                  char v72 = 0;
                  char v73 = 0;
                  unsigned int v74 = 16;
                  unsigned int v70 = 32;
                }
              }
            }
            else
            {
              char v73 = 1;
              unsigned int v74 = 0;
              switch(v71)
              {
                case 4:
                  char v72 = 0;
                  char v73 = 0;
                  unsigned int v74 = 128;
                  unsigned int v70 = 256;
                  break;
                case 5:
                case 6:
                case 7:
                case 9:
                case 10:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 17:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                  break;
                case 8:
                  char v72 = 0;
                  char v73 = 0;
                  unsigned int v70 = 128;
                  unsigned int v74 = 128;
                  break;
                case 16:
                  char v72 = 0;
                  char v73 = 0;
                  unsigned int v74 = 64;
                  unsigned int v70 = 128;
                  break;
                case 32:
                  char v72 = 0;
                  char v73 = 0;
                  unsigned int v70 = 64;
                  unsigned int v74 = 64;
                  break;
                default:
                  if (v71 == 64)
                  {
                    char v72 = 0;
                    char v73 = 0;
                    unsigned int v74 = 32;
                    unsigned int v70 = 64;
                  }
                  break;
              }
            }
            unsigned int v121 = (v70 >> 3) - 1;
            if (v72) {
              unsigned int v122 = 0;
            }
            else {
              unsigned int v122 = 32 - __clz(~(-1 << -(char)__clz(v121)));
            }
            unsigned int v123 = (v74 >> 3) - 1;
            if (v73)
            {
              unsigned int v124 = 0;
              if (v122) {
                goto LABEL_143;
              }
            }
            else
            {
              unsigned int v124 = 32 - __clz(~(-1 << -(char)__clz(v123)));
              if (v124 | v122)
              {
LABEL_143:
                int v125 = 0;
                uint64_t v126 = 0;
                int v127 = v41 & v121;
                int v128 = v26 & v123;
                BOOL v129 = v122 != 0;
                BOOL v130 = v124 != 0;
                int v131 = 1;
                do
                {
                  --v122;
                  if (v129) {
                    v126 |= (unint64_t)(v131 & v127) << v125++;
                  }
                  else {
                    unsigned int v122 = 0;
                  }
                  --v124;
                  if (v130) {
                    v126 |= (unint64_t)(v131 & v128) << v125++;
                  }
                  else {
                    unsigned int v124 = 0;
                  }
                  v131 *= 2;
                  --v125;
                  BOOL v130 = v124 != 0;
                  BOOL v129 = v122 != 0;
                }
                while (v124 | v122);
                goto LABEL_155;
              }
            }
            uint64_t v126 = 0;
LABEL_155:
            unint64_t v58 = ((unint64_t)(v43 / v70 + v152 / v74 * ((v70 + v133) / v70)) << 14) + (v126 << 11);
            goto LABEL_59;
          }
          if (v144)
          {
            int v51 = 0;
            uint64_t v52 = 0;
            int v53 = 1;
            BOOL v54 = v141;
            BOOL v55 = v142;
            __int32 v57 = v143.i32[0];
            __int32 v56 = v143.i32[1];
            do
            {
              --v56;
              if (v55) {
                v52 |= (unint64_t)(v53 & v41) << v51++;
              }
              else {
                __int32 v56 = 0;
              }
              --v57;
              if (v54) {
                v52 |= (unint64_t)(v53 & v26) << v51++;
              }
              else {
                __int32 v57 = 0;
              }
              v53 *= 2;
              --v51;
              BOOL v54 = v57 != 0;
              BOOL v55 = v56 != 0;
            }
            while (v57 | v56);
          }
          else
          {
            uint64_t v52 = 0;
          }
          unint64_t v58 = v52 << 11;
LABEL_59:
          unsigned int v59 = *(_DWORD *)(v36 + 128) >> (*(unsigned char *)(v36 + 144) + a12);
          if (v59 <= 1) {
            unsigned int v59 = 1;
          }
          unsigned int v60 = v59 + 7;
          if (v60 < 0x10) {
            unsigned int v61 = 0;
          }
          else {
            unsigned int v61 = 32 - __clz(~(-1 << -(char)__clz((v60 >> 3) - 1)));
          }
          unsigned int v62 = *(_DWORD *)(v36 + 132) >> (*(unsigned char *)(v36 + 144) + a12);
          if (v62 <= 1) {
            unsigned int v62 = 1;
          }
          unsigned int v63 = v62 + 7;
          if (v63 < 0x10)
          {
            unsigned int v64 = 0;
            if (!v61)
            {
LABEL_81:
              uint64_t v66 = 0;
              goto LABEL_82;
            }
          }
          else
          {
            unsigned int v64 = 32 - __clz(~(-1 << -(char)__clz((v63 >> 3) - 1)));
            if (!(v64 | v61)) {
              goto LABEL_81;
            }
          }
          int v65 = 0;
          uint64_t v66 = 0;
          BOOL v67 = v61 != 0;
          BOOL v68 = v64 != 0;
          int v69 = 1;
          do
          {
            --v61;
            if (v67) {
              v66 |= (unint64_t)(v69 & v41) << v65++;
            }
            else {
              unsigned int v61 = 0;
            }
            --v64;
            if (v68) {
              v66 |= (unint64_t)(v69 & v26) << v65++;
            }
            else {
              unsigned int v64 = 0;
            }
            v69 *= 2;
            --v65;
            BOOL v68 = v64 != 0;
            BOOL v67 = v61 != 0;
          }
          while (v64 | v61);
LABEL_82:
          int v75 = v47 < 8 || v48;
          int v76 = (unsigned __int8 *)(v149 + 8 * v66);
          uint64_t v77 = v150 + ((unint64_t)(v45 - v16) << 6);
          int8x16_t v78 = (void *)(v148 + v58);
          if (v42 < 8) {
            int v79 = 1;
          }
          else {
            int v79 = v75;
          }
          if (v158)
          {
            if (!v79)
            {
              float64x2_t v85 = __dst;
LABEL_95:
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::compressMacroblock(v77, a11, (unint64_t)v85, v76, v47, v42, *(_DWORD *)(*(void *)(v36 + 208) + 52));
              goto LABEL_96;
            }
            unsigned int v80 = v78;
            char v81 = v47;
            int v82 = v78;
            int v83 = v46;
            BOOL v84 = v48;
            memcpy(__dst, v80, sizeof(__dst));
            BOOL v48 = v84;
            unsigned int v43 = 8 * v41;
            float64x2_t v85 = __dst;
            int v46 = v83;
            int8x16_t v78 = v82;
            LOBYTE(v47) = v81;
            LOBYTE(v42) = v154;
            uint64_t v36 = v157;
          }
          else
          {
            float64x2_t v85 = v78;
            if (!v79) {
              goto LABEL_95;
            }
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE20ELj4ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint3EEELb0EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = v36;
          BOOL v160 = v85;
          unsigned __int8 v168 = v47;
          unsigned __int8 v169 = v42;
          unsigned int v164 = v140;
          unsigned int v165 = v45 - v43;
          BOOL v161 = v76;
          uint64_t v162 = v77;
          uint64_t v163 = a11;
          unsigned int v166 = v151;
          unsigned int v167 = v46;
          if (!v48)
          {
            int v86 = *(_DWORD *)(*(void *)(v36 + 208) + 52);
            unint64_t v87 = (unint64_t)&v85[AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressSubblock((uint64_t)v171, 512, (unint64_t)v85, *v76, v86)];
            unint64_t v88 = v87
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressSubblock((uint64_t)&v173, 512, v87, v76[1], v86);
            unint64_t v89 = v88
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressSubblock((uint64_t)&v172, 512, v88, v76[2], v86);
            unint64_t v90 = v89
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressSubblock((uint64_t)&v174, 512, v89, v76[3], v86);
            unint64_t v91 = v90
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressSubblock((uint64_t)&v175, 512, v90, v76[4], v86);
            unint64_t v92 = v91
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressSubblock((uint64_t)&v177, 512, v91, v76[5], v86);
            uint64_t v93 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressSubblock((uint64_t)&v176, 512, v92, v76[6], v86);
            AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressSubblock((uint64_t)v178, 512, v92 + v93, v76[7], v86);
            uint64_t v94 = v166;
            unsigned int v16 = v145;
            if (!v166 || !v167)
            {
LABEL_123:
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::compressMacroblock((uint64_t)v171, 512, (unint64_t)v160, v161, v168, v169, *(_DWORD *)(*(void *)(v157 + 208) + 52));
              if (!v158) {
                goto LABEL_27;
              }
              goto LABEL_124;
            }
            uint64_t v95 = 0;
            unint64_t v96 = (unint64_t)v164 << 9;
            unint64_t v97 = (unint64_t)v165 << 6;
            int8x16_t v98 = &v171[v96 + v97];
            uint64_t v99 = v162;
            uint64_t v100 = v163;
            unint64_t v101 = (unint64_t)v167 << 6;
            if (v101 <= 1) {
              unint64_t v102 = 1;
            }
            else {
              unint64_t v102 = (unint64_t)v167 << 6;
            }
            unint64_t v103 = v96 + v97;
            uint64_t v104 = &v171[v96 + v97];
            if (v102) {
              BOOL v105 = (v102 - 1) >> 32 == 0;
            }
            else {
              BOOL v105 = 0;
            }
            char v106 = !v105;
            uint64_t v107 = v102 & 0x3FFFFFFFC0;
            uint64_t v108 = &v171[v103 + 16];
            unsigned int v109 = (long long *)(v162 + 16);
            while (2)
            {
              float64x2_t v110 = (char *)(v99 + v100 * v95);
              uint64_t v111 = &v98[512 * v95];
              if ((unint64_t)(&v104[512 * v95] - v110) < 0x20) {
                char v112 = 1;
              }
              else {
                char v112 = v106;
              }
              if (v112)
              {
                int v113 = 0;
LABEL_120:
                unsigned int v118 = v113 + 1;
                do
                {
                  char v119 = *v110++;
                  *v111++ = v119;
                }
                while (v101 > v118++);
              }
              else
              {
                uint64_t v114 = v109;
                unint64_t v115 = v108;
                uint64_t v116 = v102 & 0x3FFFFFFFC0;
                do
                {
                  long long v117 = *v114;
                  *(v115 - 1) = *(v114 - 1);
                  *unint64_t v115 = v117;
                  v115 += 2;
                  v114 += 2;
                  v116 -= 32;
                }
                while (v116);
                if (v102 != v107)
                {
                  v110 += v107;
                  v111 += v107;
                  int v113 = v102 & 0xFFFFFFC0;
                  goto LABEL_120;
                }
              }
              ++v95;
              v108 += 512;
              unsigned int v109 = (long long *)((char *)v109 + v100);
              if (v95 == v94) {
                goto LABEL_123;
              }
              continue;
            }
          }
          dispatch_sync(*(dispatch_queue_t *)(*(void *)(v36 + 8) + 7384), block);
LABEL_96:
          unsigned int v16 = v145;
          if (!v158) {
            goto LABEL_27;
          }
LABEL_124:
          memcpy(v78, v85, 0x1000uLL);
LABEL_27:
          BOOL v31 = v41++ == v146 >> 3;
          uint64_t v36 = v157;
          unsigned int v42 = v154;
        }
        while (!v31);
        BOOL v31 = v26++ == v139;
      }
      while (!v31);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, char a12)
{
  uint64_t v239 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v175 = a8 + a10 - 1;
  if (*(void *)(a1 + 168)) {
    int v16 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v16 = 0;
  }
  unsigned int v17 = a5 - 1;
  unsigned int v18 = a6 - 1;
  unsigned int v19 = a8 >> 3;
  unsigned int v174 = v175 >> 3;
  BOOL v20 = (v16 & 0xD00) == 0 || v16 == 768;
  int v21 = v16 & 0xE00;
  int v23 = !v20 && v21 != 1024;
  if (*(unsigned char *)(a1 + 232))
  {
    unsigned int v24 = *(unsigned __int8 *)(a1 + 255);
    unsigned int v25 = *(unsigned __int8 *)(a1 + 254);
    char v26 = __clz(v17);
    if (1 << v24 >= a6 || a5 >> v25)
    {
      if (!(a6 >> v24) && 1 << v25 < a5)
      {
        if (a6 < 2) {
          unsigned int v29 = 0;
        }
        else {
          unsigned int v29 = __clz(~(-1 << -(char)__clz(v18))) - 32;
        }
        v25 += v24 + v29;
        unsigned int v24 = -v29;
      }
    }
    else
    {
      unsigned int v27 = 32 - __clz(~(-1 << -v26));
      unsigned int v28 = v25 + v24;
      if (a5 < 2) {
        unsigned int v27 = 0;
      }
      unsigned int v24 = v28 - v27;
      unsigned int v25 = v27;
    }
    if (a5 < 2)
    {
      if (v25) {
        goto LABEL_27;
      }
    }
    else if (32 - __clz(~(-1 << -v26)) < v25)
    {
LABEL_27:
      BOOL v187 = 0;
LABEL_32:
      unsigned int v184 = v25 - 4;
      unsigned int v181 = v24 - 3;
      int v31 = -1 << *(unsigned char *)(*(void *)(a1 + 208) + 48);
      unsigned int v172 = (((~v31 + a5) & v31) + ~(-1 << v25)) >> v25;
      goto LABEL_33;
    }
    if (a6 < 2) {
      unsigned int v30 = 0;
    }
    else {
      unsigned int v30 = 32 - __clz(~(-1 << -(char)__clz(v18)));
    }
    BOOL v187 = v30 >= v24;
    goto LABEL_32;
  }
  BOOL v187 = 0;
  unsigned int v172 = 0;
  unsigned int v181 = 0;
  unsigned int v184 = 0;
LABEL_33:
  if (v19 <= v174)
  {
    unsigned int v186 = a7 + a9 - 1;
    if (a7 >> 4 <= v186 >> 4)
    {
      unsigned int v193 = v17 >> 4;
      unsigned int v171 = v18 >> 3;
      int v192 = (v17 & 0xF) + 1;
      int v170 = (v18 & 7) + 1;
      uint32x2_t v32 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0xF00000007);
      v33.i64[0] = 0x2000000020;
      *(int32x2_t *)v34.i8 = vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32(vadd_s32((int32x2_t)vshl_u32(v32, (uint32x2_t)0xFFFFFFFCFFFFFFFDLL), (int32x2_t)-1)))))));
      v35.i64[0] = 0x2000000010;
      *(int8x8_t *)v36.i8 = vbic_s8(*(int8x8_t *)v34.i8, (int8x8_t)vcgt_u32((uint32x2_t)0x2000000010, v32));
      __int32 v182 = v36.i32[0] | v36.i32[1];
      uint64_t v180 = v36.i64[0];
      BOOL v178 = v36.i32[1] != 0;
      BOOL v179 = v36.i32[0] != 0;
      unsigned int v176 = a8;
      int v185 = v23;
      do
      {
        unsigned int v37 = (8 * v19) | 7;
        if (8 * v19 <= a8) {
          int v38 = a8;
        }
        else {
          int v38 = 8 * v19;
        }
        if (v175 < v37) {
          unsigned int v37 = v175;
        }
        int v183 = v38 - 8 * v19;
        int v191 = v37 - v38 + 1;
        unsigned int v39 = a7 >> 4;
        int v40 = v170;
        if (v19 != v171) {
          int v40 = 8;
        }
        unsigned int v194 = v40;
        uint64_t v190 = a3 + (v38 - a8) * a11;
        unsigned int v41 = a7;
        do
        {
          unsigned int v42 = 16 * v39;
          unsigned int v43 = 16 * (v39 + 1) - 1;
          if (16 * v39 <= v41) {
            int v44 = v41;
          }
          else {
            int v44 = 16 * v39;
          }
          if (v186 < v43) {
            unsigned int v43 = a7 + a9 - 1;
          }
          int v45 = v43 - v44 + 1;
          if (v39 == v193) {
            unsigned int v46 = v192;
          }
          else {
            unsigned int v46 = 16;
          }
          BOOL v47 = 1;
          if (8 * v19 >= a8 && v42 >= v41)
          {
            int v48 = v192;
            if (v39 != v193) {
              int v48 = 16;
            }
            BOOL v47 = v45 != v48 || v191 != v194;
          }
          if (v187)
          {
            if (v184 | v181)
            {
              int v50 = 0;
              uint64_t v51 = 0;
              BOOL v52 = v184 != 0;
              int v53 = 1;
              BOOL v54 = v181 != 0;
              unsigned int v55 = v181;
              unsigned int v56 = v184;
              do
              {
                --v55;
                if (v54) {
                  v51 |= (unint64_t)(v19 & ~(-1 << v181) & v53) << v50++;
                }
                else {
                  unsigned int v55 = 0;
                }
                --v56;
                if (v52) {
                  v51 |= (unint64_t)(v39 & ~(-1 << v184) & v53) << v50++;
                }
                else {
                  unsigned int v56 = 0;
                }
                v53 *= 2;
                --v50;
                BOOL v52 = v56 != 0;
                BOOL v54 = v55 != 0;
              }
              while (v56 | v55);
            }
            else
            {
              uint64_t v51 = 0;
            }
            uint64_t v64 = *(void *)(a1 + 320) * ((v39 >> v184) + (v19 >> v181) * v172) + (v51 << 8);
          }
          else
          {
            if (v182)
            {
              int v57 = 0;
              uint64_t v58 = 0;
              int v59 = 1;
              BOOL v61 = v178;
              BOOL v60 = v179;
              int v62 = v180;
              int v63 = HIDWORD(v180);
              do
              {
                --v62;
                if (v60) {
                  v58 |= (unint64_t)(v59 & v19) << v57++;
                }
                else {
                  int v62 = 0;
                }
                --v63;
                if (v61) {
                  v58 |= (unint64_t)(v59 & v39) << v57++;
                }
                else {
                  int v63 = 0;
                }
                v59 *= 2;
                --v57;
                BOOL v61 = v63 != 0;
                BOOL v60 = v62 != 0;
              }
              while (v63 | v62);
            }
            else
            {
              uint64_t v58 = 0;
            }
            uint64_t v64 = v58 << 8;
          }
          unsigned int v65 = *(_DWORD *)(a1 + 128) >> (*(unsigned char *)(a1 + 144) + a12);
          if (v65 <= 1) {
            unsigned int v65 = 1;
          }
          unsigned int v66 = v65 + 15;
          if (v66 < 0x20) {
            unsigned int v67 = 0;
          }
          else {
            unsigned int v67 = 32 - __clz(~(-1 << -(char)__clz((v66 >> 4) - 1)));
          }
          unsigned int v68 = *(_DWORD *)(a1 + 132) >> (*(unsigned char *)(a1 + 144) + a12);
          if (v68 <= 1) {
            unsigned int v68 = 1;
          }
          unsigned int v69 = v68 + 7;
          if (v69 < 0x10)
          {
            unsigned int v70 = 0;
            if (!v67)
            {
LABEL_109:
              uint64_t v72 = 0;
              goto LABEL_110;
            }
          }
          else
          {
            unsigned int v70 = 32 - __clz(~(-1 << -(char)__clz((v69 >> 3) - 1)));
            if (!(v70 | v67)) {
              goto LABEL_109;
            }
          }
          int v71 = 0;
          uint64_t v72 = 0;
          BOOL v73 = v67 != 0;
          BOOL v74 = v70 != 0;
          int v75 = 1;
          do
          {
            --v67;
            if (v73) {
              v72 |= (unint64_t)(v75 & v39) << v71++;
            }
            else {
              unsigned int v67 = 0;
            }
            --v70;
            if (v74) {
              v72 |= (unint64_t)(v75 & v19) << v71++;
            }
            else {
              unsigned int v70 = 0;
            }
            v75 *= 2;
            --v71;
            BOOL v74 = v70 != 0;
            BOOL v73 = v67 != 0;
          }
          while (v70 | v67);
LABEL_110:
          int v76 = v46 < 0x10 || v47;
          uint64_t v77 = (char *)(a4 + 8 * v72);
          int8x16_t v78 = (int8x16_t *)(a2 + v64);
          if (v194 < 8) {
            int v79 = 1;
          }
          else {
            int v79 = v76;
          }
          if (v23)
          {
            if (!v79)
            {
              unint64_t v87 = (int8x16_t *)v206;
LABEL_124:
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock(v190 + 2 * (v44 - v41), a11, v87, v77, v46, v194, *(double *)v36.i64, *(double *)v34.i64, *(int8x8_t *)v35.i8, *(int8x8_t *)v33.i8);
              int v23 = v185;
              if (!v185) {
                goto LABEL_46;
              }
              goto LABEL_220;
            }
            int8x16_t v80 = v78[13];
            v206[12] = v78[12];
            v206[13] = v80;
            int8x16_t v81 = v78[15];
            v206[14] = v78[14];
            v206[15] = v81;
            int8x16_t v82 = v78[9];
            v206[8] = v78[8];
            v206[9] = v82;
            int8x16_t v83 = v78[11];
            v206[10] = v78[10];
            v206[11] = v83;
            int8x16_t v84 = v78[5];
            v206[4] = v78[4];
            v206[5] = v84;
            int8x16_t v85 = v78[7];
            v206[6] = v78[6];
            v206[7] = v85;
            int8x16_t v86 = v78[1];
            v206[0] = *v78;
            v206[1] = v86;
            int8x16_t v36 = v78[2];
            int8x16_t v34 = v78[3];
            unint64_t v87 = (int8x16_t *)v206;
            v206[2] = v36;
            v206[3] = v34;
          }
          else
          {
            unint64_t v87 = v78;
            if (!v79) {
              goto LABEL_124;
            }
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE0ELj2ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = a1;
          float64x2_t v196 = v87;
          unsigned __int8 v204 = v46;
          unsigned __int8 v205 = v194;
          unsigned int v200 = v183;
          unsigned int v201 = v44 - v42;
          float64x2_t v197 = (char *)(a4 + 8 * v72);
          float64x2_t v198 = (int8x16_t *)(v190 + 2 * (v44 - v41));
          uint64_t v199 = a11;
          unsigned int v202 = v191;
          unsigned int v203 = v45;
          if (!v47)
          {
            unsigned int v88 = *v77;
            if (v88 == 96)
            {
              *(int8x8_t *)v36.i8 = vdup_lane_s8(*(int8x8_t *)v87->i8, 0);
              int32x2_t v207 = *(int32x2_t *)v36.i8;
              int32x2_t v211 = *(int32x2_t *)v36.i8;
              uint64_t v215 = v36.i64[0];
              uint64_t v219 = v36.i64[0];
              uint64_t v89 = 1;
            }
            else if (v88 == 31)
            {
              int32x2_t v90 = (int32x2_t)v87->u64[1];
              v35.i64[0] = v87[1].i64[0];
              v33.i64[0] = v87[1].i64[1];
              int32x2_t v91 = vzip2_s32(*(int32x2_t *)v87->i8, v90);
              int32x2_t v207 = vzip1_s32(*(int32x2_t *)v87->i8, v90);
              int32x2_t v211 = v91;
              *(int32x2_t *)v36.i8 = vzip1_s32(*(int32x2_t *)v35.i8, *(int32x2_t *)v33.i8);
              *(int32x2_t *)v34.i8 = vzip2_s32(*(int32x2_t *)v35.i8, *(int32x2_t *)v33.i8);
              uint64_t v215 = v36.i64[0];
              uint64_t v219 = v34.i64[0];
              uint64_t v89 = 32;
            }
            else if (*v77)
            {
              uint64_t v89 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v207, 32, (uint64_t)v87, v88);
            }
            else
            {
              uint64_t v89 = 0;
              int32x2_t v207 = 0;
              int32x2_t v211 = 0;
              uint64_t v215 = 0;
              uint64_t v219 = 0;
            }
            unint64_t v92 = (int8x8_t *)&v87->i8[v89];
            unsigned int v93 = v77[1];
            if (v93 == 96)
            {
              *(int8x8_t *)v36.i8 = vdup_lane_s8(*v92, 0);
              int32x2_t v208 = *(int32x2_t *)v36.i8;
              int32x2_t v212 = *(int32x2_t *)v36.i8;
              uint64_t v216 = v36.i64[0];
              uint64_t v220 = v36.i64[0];
              uint64_t v94 = 1;
            }
            else if (v93 == 31)
            {
              int32x2_t v95 = (int32x2_t)v92[1];
              *(int8x8_t *)v35.i8 = v92[2];
              *(int8x8_t *)v33.i8 = v92[3];
              int32x2_t v96 = vzip2_s32((int32x2_t)*v92, v95);
              int32x2_t v208 = vzip1_s32((int32x2_t)*v92, v95);
              int32x2_t v212 = v96;
              *(int32x2_t *)v36.i8 = vzip1_s32(*(int32x2_t *)v35.i8, *(int32x2_t *)v33.i8);
              *(int32x2_t *)v34.i8 = vzip2_s32(*(int32x2_t *)v35.i8, *(int32x2_t *)v33.i8);
              uint64_t v216 = v36.i64[0];
              uint64_t v220 = v34.i64[0];
              uint64_t v94 = 32;
            }
            else if (v77[1])
            {
              uint64_t v94 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v208, 32, (uint64_t)v92, v93);
            }
            else
            {
              uint64_t v94 = 0;
              int32x2_t v208 = 0;
              int32x2_t v212 = 0;
              uint64_t v216 = 0;
              uint64_t v220 = 0;
            }
            unint64_t v97 = (int8x8_t *)((char *)v92 + v94);
            unsigned int v98 = v77[2];
            if (v98 == 96)
            {
              *(int8x8_t *)v36.i8 = vdup_lane_s8(*v97, 0);
              int32x2_t v223 = *(int32x2_t *)v36.i8;
              int32x2_t v227 = *(int32x2_t *)v36.i8;
              uint64_t v231 = v36.i64[0];
              uint64_t v235 = v36.i64[0];
              uint64_t v99 = 1;
            }
            else if (v98 == 31)
            {
              int32x2_t v100 = (int32x2_t)v97[1];
              *(int8x8_t *)v35.i8 = v97[2];
              *(int8x8_t *)v33.i8 = v97[3];
              int32x2_t v101 = vzip2_s32((int32x2_t)*v97, v100);
              int32x2_t v223 = vzip1_s32((int32x2_t)*v97, v100);
              int32x2_t v227 = v101;
              *(int32x2_t *)v36.i8 = vzip1_s32(*(int32x2_t *)v35.i8, *(int32x2_t *)v33.i8);
              *(int32x2_t *)v34.i8 = vzip2_s32(*(int32x2_t *)v35.i8, *(int32x2_t *)v33.i8);
              uint64_t v231 = v36.i64[0];
              uint64_t v235 = v34.i64[0];
              uint64_t v99 = 32;
            }
            else if (v77[2])
            {
              uint64_t v99 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v223, 32, (uint64_t)v97, v98);
            }
            else
            {
              uint64_t v99 = 0;
              int32x2_t v223 = 0;
              int32x2_t v227 = 0;
              uint64_t v231 = 0;
              uint64_t v235 = 0;
            }
            unint64_t v102 = (int8x8_t *)((char *)v97 + v99);
            unsigned int v103 = v77[3];
            if (v103 == 96)
            {
              *(int8x8_t *)v36.i8 = vdup_lane_s8(*v102, 0);
              int32x2_t v224 = *(int32x2_t *)v36.i8;
              int32x2_t v228 = *(int32x2_t *)v36.i8;
              uint64_t v232 = v36.i64[0];
              uint64_t v236 = v36.i64[0];
              uint64_t v104 = 1;
            }
            else if (v103 == 31)
            {
              int32x2_t v105 = (int32x2_t)v102[1];
              *(int8x8_t *)v35.i8 = v102[2];
              *(int8x8_t *)v33.i8 = v102[3];
              int32x2_t v106 = vzip2_s32((int32x2_t)*v102, v105);
              int32x2_t v224 = vzip1_s32((int32x2_t)*v102, v105);
              int32x2_t v228 = v106;
              *(int32x2_t *)v36.i8 = vzip1_s32(*(int32x2_t *)v35.i8, *(int32x2_t *)v33.i8);
              *(int32x2_t *)v34.i8 = vzip2_s32(*(int32x2_t *)v35.i8, *(int32x2_t *)v33.i8);
              uint64_t v232 = v36.i64[0];
              uint64_t v236 = v34.i64[0];
              uint64_t v104 = 32;
            }
            else if (v77[3])
            {
              uint64_t v104 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v224, 32, (uint64_t)v102, v103);
            }
            else
            {
              uint64_t v104 = 0;
              int32x2_t v224 = 0;
              int32x2_t v228 = 0;
              uint64_t v232 = 0;
              uint64_t v236 = 0;
            }
            uint64_t v107 = (int8x8_t *)((char *)v102 + v104);
            unsigned int v108 = v77[4];
            if (v108 == 96)
            {
              *(int8x8_t *)v36.i8 = vdup_lane_s8(*v107, 0);
              int32x2_t v209 = *(int32x2_t *)v36.i8;
              int32x2_t v213 = *(int32x2_t *)v36.i8;
              uint64_t v217 = v36.i64[0];
              uint64_t v221 = v36.i64[0];
              uint64_t v109 = 1;
            }
            else if (v108 == 31)
            {
              int32x2_t v110 = (int32x2_t)v107[1];
              *(int8x8_t *)v35.i8 = v107[2];
              *(int8x8_t *)v33.i8 = v107[3];
              int32x2_t v111 = vzip2_s32((int32x2_t)*v107, v110);
              int32x2_t v209 = vzip1_s32((int32x2_t)*v107, v110);
              int32x2_t v213 = v111;
              *(int32x2_t *)v36.i8 = vzip1_s32(*(int32x2_t *)v35.i8, *(int32x2_t *)v33.i8);
              *(int32x2_t *)v34.i8 = vzip2_s32(*(int32x2_t *)v35.i8, *(int32x2_t *)v33.i8);
              uint64_t v217 = v36.i64[0];
              uint64_t v221 = v34.i64[0];
              uint64_t v109 = 32;
            }
            else if (v77[4])
            {
              uint64_t v109 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v209, 32, (uint64_t)v107, v108);
            }
            else
            {
              uint64_t v109 = 0;
              int32x2_t v209 = 0;
              int32x2_t v213 = 0;
              uint64_t v217 = 0;
              uint64_t v221 = 0;
            }
            char v112 = (int8x8_t *)((char *)v107 + v109);
            unsigned int v113 = v77[5];
            if (v113 == 96)
            {
              *(int8x8_t *)v36.i8 = vdup_lane_s8(*v112, 0);
              int32x2_t v210 = *(int32x2_t *)v36.i8;
              int32x2_t v214 = *(int32x2_t *)v36.i8;
              uint64_t v218 = v36.i64[0];
              uint64_t v222 = v36.i64[0];
              uint64_t v114 = 1;
            }
            else if (v113 == 31)
            {
              int32x2_t v115 = (int32x2_t)v112[1];
              *(int8x8_t *)v35.i8 = v112[2];
              *(int8x8_t *)v33.i8 = v112[3];
              int32x2_t v116 = vzip2_s32((int32x2_t)*v112, v115);
              int32x2_t v210 = vzip1_s32((int32x2_t)*v112, v115);
              int32x2_t v214 = v116;
              *(int32x2_t *)v36.i8 = vzip1_s32(*(int32x2_t *)v35.i8, *(int32x2_t *)v33.i8);
              *(int32x2_t *)v34.i8 = vzip2_s32(*(int32x2_t *)v35.i8, *(int32x2_t *)v33.i8);
              uint64_t v218 = v36.i64[0];
              uint64_t v222 = v34.i64[0];
              uint64_t v114 = 32;
            }
            else if (v77[5])
            {
              uint64_t v114 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v210, 32, (uint64_t)v112, v113);
            }
            else
            {
              uint64_t v114 = 0;
              int32x2_t v210 = 0;
              int32x2_t v214 = 0;
              uint64_t v218 = 0;
              uint64_t v222 = 0;
            }
            long long v117 = (int8x8_t *)((char *)v112 + v114);
            unsigned int v118 = v77[6];
            if (v118 == 96)
            {
              *(int8x8_t *)v36.i8 = vdup_lane_s8(*v117, 0);
              int32x2_t v225 = *(int32x2_t *)v36.i8;
              int32x2_t v229 = *(int32x2_t *)v36.i8;
              uint64_t v233 = v36.i64[0];
              uint64_t v237 = v36.i64[0];
              uint64_t v119 = 1;
            }
            else if (v118 == 31)
            {
              int32x2_t v120 = (int32x2_t)v117[1];
              *(int8x8_t *)v35.i8 = v117[2];
              *(int8x8_t *)v33.i8 = v117[3];
              int32x2_t v121 = vzip2_s32((int32x2_t)*v117, v120);
              int32x2_t v225 = vzip1_s32((int32x2_t)*v117, v120);
              int32x2_t v229 = v121;
              *(int32x2_t *)v36.i8 = vzip1_s32(*(int32x2_t *)v35.i8, *(int32x2_t *)v33.i8);
              *(int32x2_t *)v34.i8 = vzip2_s32(*(int32x2_t *)v35.i8, *(int32x2_t *)v33.i8);
              uint64_t v233 = v36.i64[0];
              uint64_t v237 = v34.i64[0];
              uint64_t v119 = 32;
            }
            else if (v77[6])
            {
              uint64_t v119 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v225, 32, (uint64_t)v117, v118);
            }
            else
            {
              uint64_t v119 = 0;
              int32x2_t v225 = 0;
              int32x2_t v229 = 0;
              uint64_t v233 = 0;
              uint64_t v237 = 0;
            }
            unsigned int v122 = (int8x8_t *)((char *)v117 + v119);
            unsigned int v123 = v77[7];
            if (v123 == 96)
            {
              *(int8x8_t *)v36.i8 = vdup_lane_s8(*v122, 0);
              int32x2_t v226 = *(int32x2_t *)v36.i8;
              int32x2_t v230 = *(int32x2_t *)v36.i8;
              uint64_t v234 = v36.i64[0];
              uint64_t v238 = v36.i64[0];
              uint64_t v124 = v202;
              if (v202) {
                goto LABEL_185;
              }
            }
            else
            {
              if (v123 != 31)
              {
                if (v77[7])
                {
                  AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v226, 32, (uint64_t)v122, v123);
                  uint64_t v124 = v202;
                  if (!v202) {
                    goto LABEL_219;
                  }
                }
                else
                {
                  int32x2_t v226 = 0;
                  int32x2_t v230 = 0;
                  uint64_t v234 = 0;
                  uint64_t v238 = 0;
                  uint64_t v124 = v202;
                  if (!v202) {
                    goto LABEL_219;
                  }
                }
LABEL_185:
                if (!v203) {
                  goto LABEL_219;
                }
                uint64_t v127 = 0;
                uint64_t v128 = 32 * v200;
                uint64_t v129 = 2 * v201;
                BOOL v130 = (char *)&v207 + v128 + v129;
                int v131 = v198;
                uint64_t v132 = v199;
                unint64_t v133 = 2 * v203;
                if (v133 <= 1) {
                  unint64_t v134 = 1;
                }
                else {
                  unint64_t v134 = 2 * v203;
                }
                uint64_t v135 = v128 + v129;
                unsigned int v136 = (char *)&v207 + v128 + v129;
                if (v134) {
                  BOOL v137 = (v134 - 1) >> 32 == 0;
                }
                else {
                  BOOL v137 = 0;
                }
                uint64_t v138 = v134 & 0x1FFFFFFE0;
                uint64_t v139 = v134 & 0x1FFFFFFF8;
                char v141 = !v137 || v134 < 8;
                BOOL v142 = (int8x16_t *)((char *)&v209 + v135);
                int8x8_t v143 = v198 + 1;
                __int32 v144 = v130;
                unsigned int v145 = v198;
                while (2)
                {
                  unsigned int v146 = &v131->i8[v132 * v127];
                  BOOL v147 = &v130[32 * v127];
                  if ((unint64_t)(&v136[32 * v127] - v146) < 0x20) {
                    char v148 = 1;
                  }
                  else {
                    char v148 = v141;
                  }
                  if (v148)
                  {
                    int v149 = 0;
LABEL_216:
                    unsigned int v158 = v149 + 1;
                    do
                    {
                      char v159 = *v146++;
                      *v147++ = v159;
                    }
                    while (v133 > v158++);
                  }
                  else
                  {
                    if (v134 >= 0x20)
                    {
                      int v151 = v143;
                      unsigned int v152 = v142;
                      uint64_t v153 = v134 & 0x1FFFFFFE0;
                      do
                      {
                        int8x16_t v36 = v151[-1];
                        int8x16_t v34 = *v151;
                        v152[-1] = v36;
                        int8x16_t *v152 = v34;
                        v152 += 2;
                        v151 += 2;
                        v153 -= 32;
                      }
                      while (v153);
                      if (v134 == v138) {
                        goto LABEL_199;
                      }
                      uint64_t v150 = v134 & 0x1FFFFFFE0;
                      if ((v134 & 0x18) == 0)
                      {
                        v146 += v138;
                        v147 += v138;
                        int v149 = v134 & 0xFFFFFFE0;
                        goto LABEL_216;
                      }
                    }
                    else
                    {
                      uint64_t v150 = 0;
                    }
                    v147 += v139;
                    uint64_t v154 = v150 - v139;
                    int v155 = (uint64_t *)((char *)v145->i64 + v150);
                    unsigned int v156 = &v144[v150];
                    do
                    {
                      uint64_t v157 = *v155++;
                      v36.i64[0] = v157;
                      *(void *)unsigned int v156 = v157;
                      v156 += 8;
                      v154 += 8;
                    }
                    while (v154);
                    if (v134 != v139)
                    {
                      v146 += v139;
                      int v149 = v134 & 0xFFFFFFF8;
                      goto LABEL_216;
                    }
                  }
LABEL_199:
                  ++v127;
                  v142 += 2;
                  int8x8_t v143 = (int8x16_t *)((char *)v143 + v132);
                  unsigned int v145 = (int8x16_t *)((char *)v145 + v132);
                  v144 += 32;
                  if (v127 == v124) {
                    goto LABEL_219;
                  }
                  continue;
                }
              }
              int32x2_t v125 = (int32x2_t)v122[1];
              *(int8x8_t *)v35.i8 = v122[2];
              *(int8x8_t *)v33.i8 = v122[3];
              int32x2_t v126 = vzip2_s32((int32x2_t)*v122, v125);
              int32x2_t v226 = vzip1_s32((int32x2_t)*v122, v125);
              int32x2_t v230 = v126;
              *(int32x2_t *)v36.i8 = vzip1_s32(*(int32x2_t *)v35.i8, *(int32x2_t *)v33.i8);
              *(int32x2_t *)v34.i8 = vzip2_s32(*(int32x2_t *)v35.i8, *(int32x2_t *)v33.i8);
              uint64_t v234 = v36.i64[0];
              uint64_t v238 = v34.i64[0];
              uint64_t v124 = v202;
              if (v202) {
                goto LABEL_185;
              }
            }
LABEL_219:
            AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)&v207, 32, v196, v197, v204, v205, *(double *)v36.i64, *(double *)v34.i64, *(int8x8_t *)v35.i8, *(int8x8_t *)v33.i8);
            a8 = v176;
            unsigned int v41 = a7;
            int v23 = v185;
            if (!v185) {
              goto LABEL_46;
            }
            goto LABEL_220;
          }
          dispatch_sync(*(dispatch_queue_t *)(*(void *)(a1 + 8) + 7384), block);
          int v23 = v185;
          if (!v185) {
            goto LABEL_46;
          }
LABEL_220:
          int8x16_t v161 = *v87;
          int8x16_t v162 = v87[1];
          int8x16_t v163 = v87[3];
          v78[2] = v87[2];
          v78[3] = v163;
          *int8x16_t v78 = v161;
          v78[1] = v162;
          int8x16_t v164 = v87[4];
          int8x16_t v165 = v87[5];
          int8x16_t v166 = v87[7];
          v78[6] = v87[6];
          v78[7] = v166;
          v78[4] = v164;
          v78[5] = v165;
          int8x16_t v167 = v87[8];
          int8x16_t v168 = v87[9];
          int8x16_t v169 = v87[11];
          v78[10] = v87[10];
          v78[11] = v169;
          v78[8] = v167;
          v78[9] = v168;
          int8x16_t v36 = v87[12];
          int8x16_t v34 = v87[13];
          int8x16_t v35 = v87[14];
          int8x16_t v33 = v87[15];
          v78[14] = v35;
          v78[15] = v33;
          v78[12] = v36;
          v78[13] = v34;
LABEL_46:
          BOOL v20 = v39++ == v186 >> 4;
        }
        while (!v20);
        BOOL v20 = v19++ == v174;
      }
      while (!v20);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, char a12)
{
  uint64_t v285 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v223 = a8;
  unsigned int v222 = a8 + a10 - 1;
  if (*(void *)(a1 + 168))
  {
    __int16 CacheMode = IOSurfaceGetCacheMode();
    uint64_t v20 = a1;
    int v21 = CacheMode & 0xF00;
  }
  else
  {
    uint64_t v20 = a1;
    int v21 = 0;
  }
  unsigned int v22 = a5 - 1;
  unsigned int v23 = a6 - 1;
  unsigned int v24 = a8 >> 3;
  unsigned int v221 = v222 >> 3;
  BOOL v25 = (v21 & 0xD00) == 0 || v21 == 768;
  int v26 = v21 & 0xE00;
  int v28 = !v25 && v26 != 1024;
  unsigned int v29 = a7;
  if (*(unsigned char *)(v20 + 232))
  {
    unsigned int v30 = *(unsigned __int8 *)(v20 + 255);
    unsigned int v31 = *(unsigned __int8 *)(v20 + 254);
    char v32 = __clz(v22);
    if (1 << v30 >= a6 || a5 >> v31)
    {
      if (!(a6 >> v30) && 1 << v31 < a5)
      {
        if (a6 < 2) {
          unsigned int v35 = 0;
        }
        else {
          unsigned int v35 = __clz(~(-1 << -(char)__clz(v23))) - 32;
        }
        v31 += v30 + v35;
        unsigned int v30 = -v35;
      }
    }
    else
    {
      unsigned int v33 = 32 - __clz(~(-1 << -v32));
      unsigned int v34 = v31 + v30;
      if (a5 < 2) {
        unsigned int v33 = 0;
      }
      unsigned int v30 = v34 - v33;
      unsigned int v31 = v33;
    }
    if (a5 < 2)
    {
      if (v31) {
        goto LABEL_27;
      }
    }
    else if (32 - __clz(~(-1 << -v32)) < v31)
    {
LABEL_27:
      BOOL v234 = 0;
LABEL_32:
      unsigned int v232 = v31 - 4;
      unsigned int v227 = v30 - 3;
      int v37 = -1 << *(unsigned char *)(*(void *)(v20 + 208) + 48);
      unsigned int v219 = (((~v37 + a5) & v37) + ~(-1 << v31)) >> v31;
      goto LABEL_33;
    }
    if (a6 < 2) {
      unsigned int v36 = 0;
    }
    else {
      unsigned int v36 = 32 - __clz(~(-1 << -(char)__clz(v23)));
    }
    BOOL v234 = v36 >= v30;
    goto LABEL_32;
  }
  BOOL v234 = 0;
  unsigned int v219 = 0;
  unsigned int v227 = 0;
  unsigned int v232 = 0;
LABEL_33:
  if (v24 <= v221)
  {
    unsigned int v233 = a7 + a9 - 1;
    if (a7 >> 4 <= v233 >> 4)
    {
      unsigned int v240 = v22 >> 4;
      unsigned int v218 = v23 >> 3;
      int v239 = (v22 & 0xF) + 1;
      int v217 = (v23 & 7) + 1;
      int v216 = ~(-1 << v227);
      uint32x2_t v38 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0xF00000007);
      v39.i64[1] = -1;
      int8x8_t v40 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32(vadd_s32((int32x2_t)vshl_u32(v38, (uint32x2_t)0xFFFFFFFCFFFFFFFDLL), (int32x2_t)-1))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x2000000010, v38));
      __int32 v228 = v40.i32[0] | v40.i32[1];
      int8x8_t v226 = v40;
      BOOL v225 = v40.i32[0] != 0;
      BOOL v224 = v40.i32[1] != 0;
      int v229 = v28;
      do
      {
        unsigned int v41 = (8 * v24) | 7;
        unsigned int v42 = v223;
        if (8 * v24 <= v223) {
          int v43 = v223;
        }
        else {
          int v43 = 8 * v24;
        }
        if (v222 < v41) {
          unsigned int v41 = v222;
        }
        int v231 = v43 - 8 * v24;
        int v238 = v41 - v43 + 1;
        unsigned int v44 = a7 >> 4;
        if (v24 == v218) {
          unsigned int v45 = v217;
        }
        else {
          unsigned int v45 = 8;
        }
        int v46 = v24 & v216;
        uint64_t v237 = a3 + (v43 - v223) * a11;
        do
        {
          unsigned int v47 = 16 * v44;
          unsigned int v48 = 16 * (v44 + 1) - 1;
          if (16 * v44 <= v29) {
            int v49 = v29;
          }
          else {
            int v49 = 16 * v44;
          }
          if (v233 < v48) {
            unsigned int v48 = a7 + a9 - 1;
          }
          int v50 = v48 - v49 + 1;
          unsigned int v51 = v239;
          if (v44 != v240) {
            unsigned int v51 = 16;
          }
          BOOL v52 = 1;
          if (8 * v24 >= v42 && v47 >= v29)
          {
            int v53 = v239;
            if (v44 != v240) {
              int v53 = 16;
            }
            BOOL v52 = v50 != v53 || v238 != v45;
          }
          if (v234)
          {
            if (v232 | v227)
            {
              int v55 = 0;
              uint64_t v56 = 0;
              BOOL v57 = v232 != 0;
              int v58 = 1;
              BOOL v59 = v227 != 0;
              unsigned int v60 = v227;
              unsigned int v61 = v232;
              do
              {
                --v60;
                if (v59) {
                  v56 |= (unint64_t)(v46 & v58) << v55++;
                }
                else {
                  unsigned int v60 = 0;
                }
                --v61;
                if (v57) {
                  v56 |= (unint64_t)(v44 & ~(-1 << v232) & v58) << v55++;
                }
                else {
                  unsigned int v61 = 0;
                }
                v58 *= 2;
                --v55;
                BOOL v57 = v61 != 0;
                BOOL v59 = v60 != 0;
              }
              while (v61 | v60);
            }
            else
            {
              uint64_t v56 = 0;
            }
            uint64_t v69 = *(void *)(v20 + 320) * ((v44 >> v232) + (v24 >> v227) * v219) + (v56 << 8);
          }
          else
          {
            if (v228)
            {
              int v62 = 0;
              uint64_t v63 = 0;
              int v64 = 1;
              BOOL v65 = v224;
              BOOL v66 = v225;
              __int32 v67 = v226.i32[0];
              __int32 v68 = v226.i32[1];
              do
              {
                --v67;
                if (v66) {
                  v63 |= (unint64_t)(v64 & v24) << v62++;
                }
                else {
                  __int32 v67 = 0;
                }
                --v68;
                if (v65) {
                  v63 |= (unint64_t)(v64 & v44) << v62++;
                }
                else {
                  __int32 v68 = 0;
                }
                v64 *= 2;
                --v62;
                BOOL v65 = v68 != 0;
                BOOL v66 = v67 != 0;
              }
              while (v68 | v67);
            }
            else
            {
              uint64_t v63 = 0;
            }
            uint64_t v69 = v63 << 8;
          }
          unsigned int v70 = *(_DWORD *)(v20 + 128) >> (*(unsigned char *)(v20 + 144) + a12);
          if (v70 <= 1) {
            unsigned int v70 = 1;
          }
          unsigned int v71 = v70 + 15;
          if (v71 < 0x20) {
            unsigned int v72 = 0;
          }
          else {
            unsigned int v72 = 32 - __clz(~(-1 << -(char)__clz((v71 >> 4) - 1)));
          }
          unsigned int v73 = *(_DWORD *)(v20 + 132) >> (*(unsigned char *)(v20 + 144) + a12);
          if (v73 <= 1) {
            unsigned int v73 = 1;
          }
          unsigned int v74 = v73 + 7;
          if (v74 < 0x10)
          {
            unsigned int v75 = 0;
            if (!v72)
            {
LABEL_109:
              uint64_t v77 = 0;
              goto LABEL_110;
            }
          }
          else
          {
            unsigned int v75 = 32 - __clz(~(-1 << -(char)__clz((v74 >> 3) - 1)));
            if (!(v75 | v72)) {
              goto LABEL_109;
            }
          }
          int v76 = 0;
          uint64_t v77 = 0;
          BOOL v78 = v72 != 0;
          BOOL v79 = v75 != 0;
          int v80 = 1;
          do
          {
            --v72;
            if (v78) {
              v77 |= (unint64_t)(v80 & v44) << v76++;
            }
            else {
              unsigned int v72 = 0;
            }
            --v75;
            if (v79) {
              v77 |= (unint64_t)(v80 & v24) << v76++;
            }
            else {
              unsigned int v75 = 0;
            }
            v80 *= 2;
            --v76;
            BOOL v79 = v75 != 0;
            BOOL v78 = v72 != 0;
          }
          while (v75 | v72);
LABEL_110:
          int v81 = v51 < 0x10 || v52;
          int8x16_t v82 = (char *)(a4 + 8 * v77);
          uint64_t v83 = v237 + 2 * (v49 - v29);
          int8x16_t v84 = (int32x4_t *)(a2 + v69);
          if (v45 < 8) {
            int v85 = 1;
          }
          else {
            int v85 = v81;
          }
          if (v28)
          {
            uint64_t v87 = 2 * a11;
            uint64_t v86 = 4 * a11;
            if (!v85)
            {
              int32x2_t v95 = (int32x4_t *)v252;
LABEL_126:
              uint64_t v105 = 0;
              int32x2_t v106 = v95;
              do
              {
                uint64_t v110 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,2u>::kSubblockPositions[v105 + 1];
                uint64_t v111 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,2u>::kSubblockPositions[v105];
                unsigned int v112 = (v51 - 4 * v111) & ~((int)(v51 - 4 * v111) >> 31);
                if (v112 >= 4) {
                  unsigned int v112 = 4;
                }
                unsigned int v113 = (v45 - 4 * v110) & ~((int)(v45 - 4 * v110) >> 31);
                if (v113 >= 4) {
                  unsigned int v113 = 4;
                }
                if (v112) {
                  BOOL v114 = v113 == 0;
                }
                else {
                  BOOL v114 = 1;
                }
                if (v114)
                {
                  char v109 = 0;
                }
                else
                {
                  uint64_t v107 = (uint64_t *)(v83 + v86 * v110 + 8 * v111);
                  v16.i64[0] = *v107;
                  v17.i64[0] = *(uint64_t *)((char *)v107 + a11);
                  unsigned int v108 = (uint64_t *)((char *)v107 + v87);
                  v39.i64[0] = *v108;
                  v18.i64[0] = *(uint64_t *)((char *)v108 + a11);
                  int32x4_t v16 = vzip1q_s32(v16, v17);
                  int32x4_t v17 = vzip1q_s32(v39, v18);
                  *int32x2_t v106 = v16;
                  v106[1] = v17;
                  v106 += 2;
                  char v109 = 31;
                }
                *v82++ = v109;
                v105 += 2;
              }
              while (v105 != 16);
LABEL_122:
              int v46 = v24 & v216;
              goto LABEL_123;
            }
            int32x4_t v88 = v84[13];
            v252[12] = v84[12];
            v252[13] = v88;
            int32x4_t v89 = v84[15];
            v252[14] = v84[14];
            v252[15] = v89;
            int32x4_t v90 = v84[9];
            v252[8] = v84[8];
            v252[9] = v90;
            int32x4_t v91 = v84[11];
            v252[10] = v84[10];
            v252[11] = v91;
            int32x4_t v92 = v84[5];
            v252[4] = v84[4];
            v252[5] = v92;
            int32x4_t v93 = v84[7];
            v252[6] = v84[6];
            v252[7] = v93;
            int32x4_t v94 = v84[1];
            v252[0] = *v84;
            v252[1] = v94;
            int32x4_t v16 = v84[2];
            int32x4_t v17 = v84[3];
            int32x2_t v95 = (int32x4_t *)v252;
            v252[2] = v16;
            v252[3] = v17;
          }
          else
          {
            int32x2_t v95 = v84;
            uint64_t v87 = 2 * a11;
            uint64_t v86 = 4 * a11;
            if (!v85) {
              goto LABEL_126;
            }
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE0ELj2ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = v20;
          float64x2_t v242 = v95;
          unsigned __int8 v250 = v51;
          unsigned __int8 v251 = v45;
          unsigned int v246 = v231;
          unsigned int v247 = v49 - v47;
          float64x2_t v243 = v82;
          float64x2_t v244 = (int32x4_t *)(v237 + 2 * (v49 - v29));
          uint64_t v245 = a11;
          unsigned int v248 = v238;
          unsigned int v249 = v50;
          if (v52)
          {
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(v20 + 8) + 7384), block);
            int v28 = v229;
            uint64_t v20 = a1;
            unsigned int v29 = a7;
            goto LABEL_122;
          }
          unsigned int v115 = *v82;
          if (v115 == 96)
          {
            int32x4_t v16 = *v95;
            int32x2_t v253 = (int32x2_t)vdup_lane_s8(*(int8x8_t *)v95->i8, 0);
            int32x2_t v257 = v253;
            int32x2_t v261 = v253;
            int32x2_t v265 = v253;
            uint64_t v116 = 1;
          }
          else if (v115 == 31)
          {
            int32x2_t v117 = (int32x2_t)v95->u64[1];
            int32x2_t v118 = *(int32x2_t *)v95[1].i8;
            int32x2_t v119 = (int32x2_t)v95[1].u64[1];
            int32x2_t v120 = vzip2_s32(*(int32x2_t *)v95->i8, v117);
            int32x2_t v253 = vzip1_s32(*(int32x2_t *)v95->i8, v117);
            int32x2_t v257 = v120;
            int32x2_t v261 = vzip1_s32(v118, v119);
            int32x2_t v265 = vzip2_s32(v118, v119);
            uint64_t v116 = 32;
          }
          else if (*v82)
          {
            uint64_t v116 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v253, 32, (uint64_t)v95, v115);
          }
          else
          {
            uint64_t v116 = 0;
            int32x2_t v253 = 0;
            int32x2_t v257 = 0;
            int32x2_t v261 = 0;
            int32x2_t v265 = 0;
          }
          int32x2_t v121 = (int8x8_t *)&v95->i8[v116];
          unsigned int v122 = v82[1];
          if (v122 == 96)
          {
            int32x4_t v16 = *(int32x4_t *)v121->i8;
            int32x2_t v254 = (int32x2_t)vdup_lane_s8(*v121, 0);
            int32x2_t v258 = v254;
            int32x2_t v262 = v254;
            int32x2_t v266 = v254;
            uint64_t v123 = 1;
          }
          else if (v122 == 31)
          {
            int32x2_t v124 = (int32x2_t)v121[1];
            int32x2_t v125 = (int32x2_t)v121[2];
            int32x2_t v126 = (int32x2_t)v121[3];
            int32x2_t v127 = vzip2_s32((int32x2_t)*v121, v124);
            int32x2_t v254 = vzip1_s32((int32x2_t)*v121, v124);
            int32x2_t v258 = v127;
            int32x2_t v262 = vzip1_s32(v125, v126);
            int32x2_t v266 = vzip2_s32(v125, v126);
            uint64_t v123 = 32;
          }
          else if (v82[1])
          {
            uint64_t v123 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v254, 32, (uint64_t)v121, v122);
          }
          else
          {
            uint64_t v123 = 0;
            int32x2_t v254 = 0;
            int32x2_t v258 = 0;
            int32x2_t v262 = 0;
            int32x2_t v266 = 0;
          }
          uint64_t v128 = (int8x8_t *)((char *)v121 + v123);
          unsigned int v129 = v82[2];
          if (v129 == 96)
          {
            int32x4_t v16 = *(int32x4_t *)v128->i8;
            int32x2_t v269 = (int32x2_t)vdup_lane_s8(*v128, 0);
            int32x2_t v273 = v269;
            int32x2_t v277 = v269;
            int32x2_t v281 = v269;
            uint64_t v130 = 1;
          }
          else if (v129 == 31)
          {
            int32x2_t v131 = (int32x2_t)v128[1];
            int32x2_t v132 = (int32x2_t)v128[2];
            int32x2_t v133 = (int32x2_t)v128[3];
            int32x2_t v134 = vzip2_s32((int32x2_t)*v128, v131);
            int32x2_t v269 = vzip1_s32((int32x2_t)*v128, v131);
            int32x2_t v273 = v134;
            int32x2_t v277 = vzip1_s32(v132, v133);
            int32x2_t v281 = vzip2_s32(v132, v133);
            uint64_t v130 = 32;
          }
          else if (v82[2])
          {
            uint64_t v130 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v269, 32, (uint64_t)v128, v129);
          }
          else
          {
            uint64_t v130 = 0;
            int32x2_t v269 = 0;
            int32x2_t v273 = 0;
            int32x2_t v277 = 0;
            int32x2_t v281 = 0;
          }
          uint64_t v135 = (int8x8_t *)((char *)v128 + v130);
          unsigned int v136 = v82[3];
          if (v136 == 96)
          {
            int32x4_t v16 = *(int32x4_t *)v135->i8;
            int32x2_t v270 = (int32x2_t)vdup_lane_s8(*v135, 0);
            int32x2_t v274 = v270;
            int32x2_t v278 = v270;
            int32x2_t v282 = v270;
            uint64_t v137 = 1;
          }
          else if (v136 == 31)
          {
            int32x2_t v138 = (int32x2_t)v135[1];
            int32x2_t v139 = (int32x2_t)v135[2];
            int32x2_t v140 = (int32x2_t)v135[3];
            int32x2_t v141 = vzip2_s32((int32x2_t)*v135, v138);
            int32x2_t v270 = vzip1_s32((int32x2_t)*v135, v138);
            int32x2_t v274 = v141;
            int32x2_t v278 = vzip1_s32(v139, v140);
            int32x2_t v282 = vzip2_s32(v139, v140);
            uint64_t v137 = 32;
          }
          else if (v82[3])
          {
            uint64_t v137 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v270, 32, (uint64_t)v135, v136);
          }
          else
          {
            uint64_t v137 = 0;
            int32x2_t v270 = 0;
            int32x2_t v274 = 0;
            int32x2_t v278 = 0;
            int32x2_t v282 = 0;
          }
          BOOL v142 = (int8x8_t *)((char *)v135 + v137);
          unsigned int v143 = v82[4];
          if (v143 == 96)
          {
            int32x4_t v16 = *(int32x4_t *)v142->i8;
            int32x2_t v255 = (int32x2_t)vdup_lane_s8(*v142, 0);
            int32x2_t v259 = v255;
            int32x2_t v263 = v255;
            int32x2_t v267 = v255;
            uint64_t v144 = 1;
          }
          else if (v143 == 31)
          {
            int32x2_t v145 = (int32x2_t)v142[1];
            int32x2_t v146 = (int32x2_t)v142[2];
            int32x2_t v147 = (int32x2_t)v142[3];
            int32x2_t v148 = vzip2_s32((int32x2_t)*v142, v145);
            int32x2_t v255 = vzip1_s32((int32x2_t)*v142, v145);
            int32x2_t v259 = v148;
            int32x2_t v263 = vzip1_s32(v146, v147);
            int32x2_t v267 = vzip2_s32(v146, v147);
            uint64_t v144 = 32;
          }
          else if (v82[4])
          {
            uint64_t v144 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v255, 32, (uint64_t)v142, v143);
          }
          else
          {
            uint64_t v144 = 0;
            int32x2_t v255 = 0;
            int32x2_t v259 = 0;
            int32x2_t v263 = 0;
            int32x2_t v267 = 0;
          }
          int v149 = (int8x8_t *)((char *)v142 + v144);
          unsigned int v150 = v82[5];
          if (v150 == 96)
          {
            int32x4_t v16 = *(int32x4_t *)v149->i8;
            int32x2_t v256 = (int32x2_t)vdup_lane_s8(*v149, 0);
            int32x2_t v260 = v256;
            int32x2_t v264 = v256;
            int32x2_t v268 = v256;
            uint64_t v151 = 1;
          }
          else if (v150 == 31)
          {
            int32x2_t v152 = (int32x2_t)v149[1];
            int32x2_t v153 = (int32x2_t)v149[2];
            int32x2_t v154 = (int32x2_t)v149[3];
            int32x2_t v155 = vzip2_s32((int32x2_t)*v149, v152);
            int32x2_t v256 = vzip1_s32((int32x2_t)*v149, v152);
            int32x2_t v260 = v155;
            int32x2_t v264 = vzip1_s32(v153, v154);
            int32x2_t v268 = vzip2_s32(v153, v154);
            uint64_t v151 = 32;
          }
          else if (v82[5])
          {
            uint64_t v151 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v256, 32, (uint64_t)v149, v150);
          }
          else
          {
            uint64_t v151 = 0;
            int32x2_t v256 = 0;
            int32x2_t v260 = 0;
            int32x2_t v264 = 0;
            int32x2_t v268 = 0;
          }
          unsigned int v156 = (int8x8_t *)((char *)v149 + v151);
          unsigned int v157 = v82[6];
          if (v157 == 96)
          {
            int32x4_t v16 = *(int32x4_t *)v156->i8;
            int32x2_t v271 = (int32x2_t)vdup_lane_s8(*v156, 0);
            int32x2_t v275 = v271;
            int32x2_t v279 = v271;
            int32x2_t v283 = v271;
            uint64_t v158 = 1;
          }
          else if (v157 == 31)
          {
            int32x2_t v159 = (int32x2_t)v156[1];
            int32x2_t v160 = (int32x2_t)v156[2];
            int32x2_t v161 = (int32x2_t)v156[3];
            int32x2_t v162 = vzip2_s32((int32x2_t)*v156, v159);
            int32x2_t v271 = vzip1_s32((int32x2_t)*v156, v159);
            int32x2_t v275 = v162;
            int32x2_t v279 = vzip1_s32(v160, v161);
            int32x2_t v283 = vzip2_s32(v160, v161);
            uint64_t v158 = 32;
          }
          else if (v82[6])
          {
            uint64_t v158 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v271, 32, (uint64_t)v156, v157);
          }
          else
          {
            uint64_t v158 = 0;
            int32x2_t v271 = 0;
            int32x2_t v275 = 0;
            int32x2_t v279 = 0;
            int32x2_t v283 = 0;
          }
          int8x16_t v163 = (int8x8_t *)((char *)v156 + v158);
          unsigned int v164 = v82[7];
          if (v164 == 96)
          {
            int32x4_t v16 = *(int32x4_t *)v163->i8;
            int32x2_t v272 = (int32x2_t)vdup_lane_s8(*v163, 0);
            int32x2_t v276 = v272;
            int32x2_t v280 = v272;
            int32x2_t v284 = v272;
            uint64_t v165 = v248;
            if (v248) {
              goto LABEL_197;
            }
          }
          else if (v164 == 31)
          {
            int32x2_t v166 = (int32x2_t)v163[1];
            int32x2_t v167 = (int32x2_t)v163[2];
            int32x2_t v168 = (int32x2_t)v163[3];
            int32x2_t v169 = vzip2_s32((int32x2_t)*v163, v166);
            int32x2_t v272 = vzip1_s32((int32x2_t)*v163, v166);
            int32x2_t v276 = v169;
            int32x2_t v280 = vzip1_s32(v167, v168);
            int32x2_t v284 = vzip2_s32(v167, v168);
            uint64_t v165 = v248;
            if (v248) {
              goto LABEL_197;
            }
          }
          else
          {
            if (v82[7])
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v272, 32, (uint64_t)v163, v164);
              uint64_t v165 = v248;
              if (!v248) {
                goto LABEL_231;
              }
LABEL_197:
              if (!v249) {
                goto LABEL_231;
              }
              uint64_t v170 = 0;
              uint64_t v171 = 32 * v246;
              uint64_t v172 = 2 * v247;
              uint64_t v173 = (char *)&v253 + v171 + v172;
              unsigned int v174 = v244;
              uint64_t v175 = v245;
              unint64_t v176 = 2 * v249;
              if (v176 <= 1) {
                unint64_t v177 = 1;
              }
              else {
                unint64_t v177 = 2 * v249;
              }
              uint64_t v178 = v171 + v172;
              BOOL v179 = (char *)&v253 + v171 + v172;
              if (v177) {
                BOOL v180 = (v177 - 1) >> 32 == 0;
              }
              else {
                BOOL v180 = 0;
              }
              uint64_t v181 = v177 & 0x1FFFFFFE0;
              uint64_t v182 = v177 & 0x1FFFFFFF8;
              char v184 = !v180 || v177 < 8;
              int v185 = (int32x4_t *)((char *)&v255 + v178);
              unsigned int v186 = v244 + 1;
              BOOL v187 = v173;
              unsigned __int8 v188 = v244;
              while (2)
              {
                unsigned __int8 v189 = &v174->i8[v175 * v170];
                uint64_t v190 = &v173[32 * v170];
                if ((unint64_t)(&v179[32 * v170] - v189) < 0x20) {
                  char v191 = 1;
                }
                else {
                  char v191 = v184;
                }
                if (v191)
                {
                  int v192 = 0;
LABEL_228:
                  unsigned int v201 = v192 + 1;
                  do
                  {
                    char v202 = *v189++;
                    *v190++ = v202;
                  }
                  while (v176 > v201++);
                }
                else
                {
                  if (v177 >= 0x20)
                  {
                    unsigned int v194 = v186;
                    float64x2_t v195 = v185;
                    uint64_t v196 = v177 & 0x1FFFFFFE0;
                    do
                    {
                      int32x4_t v16 = v194[-1];
                      int32x4_t v17 = *v194;
                      v195[-1] = v16;
                      *float64x2_t v195 = v17;
                      v195 += 2;
                      v194 += 2;
                      v196 -= 32;
                    }
                    while (v196);
                    if (v177 == v181) {
                      goto LABEL_211;
                    }
                    uint64_t v193 = v177 & 0x1FFFFFFE0;
                    if ((v177 & 0x18) == 0)
                    {
                      v189 += v181;
                      v190 += v181;
                      int v192 = v177 & 0xFFFFFFE0;
                      goto LABEL_228;
                    }
                  }
                  else
                  {
                    uint64_t v193 = 0;
                  }
                  v190 += v182;
                  uint64_t v197 = v193 - v182;
                  float64x2_t v198 = (uint64_t *)((char *)v188->i64 + v193);
                  uint64_t v199 = &v187[v193];
                  do
                  {
                    uint64_t v200 = *v198++;
                    *(void *)uint64_t v199 = v200;
                    v199 += 8;
                    v197 += 8;
                  }
                  while (v197);
                  if (v177 != v182)
                  {
                    v189 += v182;
                    int v192 = v177 & 0xFFFFFFF8;
                    goto LABEL_228;
                  }
                }
LABEL_211:
                ++v170;
                v185 += 2;
                unsigned int v186 = (int32x4_t *)((char *)v186 + v175);
                unsigned __int8 v188 = (int32x4_t *)((char *)v188 + v175);
                v187 += 32;
                if (v170 == v165) {
                  goto LABEL_231;
                }
                continue;
              }
            }
            int32x2_t v272 = 0;
            int32x2_t v276 = 0;
            int32x2_t v280 = 0;
            int32x2_t v284 = 0;
            uint64_t v165 = v248;
            if (v248) {
              goto LABEL_197;
            }
          }
LABEL_231:
          uint64_t v204 = 0;
          unsigned __int8 v205 = v242;
          float64x2_t v206 = v243;
          int v207 = v250;
          int v208 = v251;
          unsigned int v42 = v223;
          unsigned int v29 = a7;
          uint64_t v20 = a1;
          int v28 = v229;
          int v46 = v24 & v216;
          do
          {
            uint64_t v211 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,2u>::kSubblockPositions[v204 + 1];
            uint64_t v212 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,2u>::kSubblockPositions[v204];
            unsigned int v213 = (v207 - 4 * v212) & ~((v207 - 4 * (int)v212) >> 31);
            if (v213 >= 4) {
              unsigned int v213 = 4;
            }
            unsigned int v214 = (v208 - 4 * v211) & ~((v208 - 4 * (int)v211) >> 31);
            if (v214 >= 4) {
              unsigned int v214 = 4;
            }
            if (v213) {
              BOOL v215 = v214 == 0;
            }
            else {
              BOOL v215 = 1;
            }
            if (v215)
            {
              char v210 = 0;
            }
            else
            {
              int32x2_t v209 = &v253 + 16 * v211 + v212;
              *(int32x2_t *)v16.i8 = *v209;
              *(int32x2_t *)v17.i8 = v209[4];
              *(int32x2_t *)v39.i8 = v209[8];
              *(int32x2_t *)v18.i8 = v209[12];
              int32x4_t v16 = vzip1q_s32(v16, v17);
              int32x4_t v17 = vzip1q_s32(v39, v18);
              *unsigned __int8 v205 = v16;
              v205[1] = v17;
              v205 += 2;
              char v210 = 31;
            }
            *v206++ = v210;
            v204 += 2;
          }
          while (v204 != 16);
LABEL_123:
          if (v28)
          {
            int32x4_t v96 = *v95;
            int32x4_t v97 = v95[1];
            int32x4_t v98 = v95[3];
            v84[2] = v95[2];
            v84[3] = v98;
            *int8x16_t v84 = v96;
            v84[1] = v97;
            int32x4_t v99 = v95[4];
            int32x4_t v100 = v95[5];
            int32x4_t v101 = v95[7];
            v84[6] = v95[6];
            v84[7] = v101;
            v84[4] = v99;
            v84[5] = v100;
            int32x4_t v102 = v95[8];
            int32x4_t v103 = v95[9];
            int32x4_t v104 = v95[11];
            v84[10] = v95[10];
            v84[11] = v104;
            v84[8] = v102;
            v84[9] = v103;
            int32x4_t v16 = v95[12];
            int32x4_t v17 = v95[13];
            int32x4_t v39 = v95[14];
            int32x4_t v18 = v95[15];
            v84[14] = v39;
            v84[15] = v18;
            v84[12] = v16;
            v84[13] = v17;
          }
          BOOL v25 = v44++ == v233 >> 4;
        }
        while (!v25);
        BOOL v25 = v24++ == v221;
      }
      while (!v25);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, int a12)
{
  uint64_t v242 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v17 = a8 + a10 - 1;
  unsigned int v182 = a8;
  unsigned int v18 = a8 >> 3;
  unsigned int v178 = v17;
  unsigned int v180 = v17 >> 3;
  unsigned int v19 = *(unsigned __int8 *)(*(void *)(a1 + 208) + 88);
  unsigned int v20 = *(_DWORD *)(a1 + 112);
  if (*(void *)(a1 + 168)) {
    int v21 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v21 = 0;
  }
  BOOL v22 = (v21 & 0xD00) == 0 || v21 == 768;
  int v23 = v21 & 0xE00;
  int v25 = !v22 && v23 != 1024;
  int v196 = v25;
  BOOL isLevelTiled = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::isLevelTiled(a1, *(_DWORD *)(a1 + 144) + a12);
  if (v18 <= v180)
  {
    unsigned int v188 = a7 + a9 - 1;
    if (a7 >> 4 <= v188 >> 4)
    {
      unsigned int v175 = a5 - 1;
      unsigned int v177 = (a6 - 1) >> 3;
      int v194 = ((a5 - 1) & 0xF) + 1;
      unsigned int v195 = (a5 - 1) >> 4;
      int v176 = ((a6 - 1) & 7) + 1;
      uint32x2_t v26 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0xF00000007);
      v27.i64[0] = 0x2000000020;
      *(int32x2_t *)v28.i8 = vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32(vadd_s32((int32x2_t)vshl_u32(v26, (uint32x2_t)0xFFFFFFFCFFFFFFFDLL), (int32x2_t)-1)))))));
      v29.i64[0] = 0x2000000010;
      *(int8x8_t *)v30.i8 = vbic_s8(*(int8x8_t *)v28.i8, (int8x8_t)vcgt_u32((uint32x2_t)0x2000000010, v26));
      __int32 v187 = v30.i32[0] | v30.i32[1];
      uint64_t v186 = v30.i64[0];
      BOOL v184 = v30.i32[1] != 0;
      BOOL v185 = v30.i32[0] != 0;
      unint64_t v174 = 8 * v20 * (unint64_t)v19;
      do
      {
        unsigned int v31 = (8 * v18) | 7;
        unsigned int v32 = v182;
        if (8 * v18 <= v182) {
          int v33 = v182;
        }
        else {
          int v33 = 8 * v18;
        }
        unsigned int v34 = a7 >> 4;
        if (v178 < v31) {
          unsigned int v31 = v178;
        }
        int v183 = v33 - 8 * v18;
        int v192 = v31 - v33 + 1;
        unsigned int v193 = 8 * v18;
        int v35 = v176;
        if (v18 != v177) {
          int v35 = 8;
        }
        unsigned int v197 = v35;
        uint64_t v191 = a3 + (v33 - v182) * a11;
        uint64_t v36 = a4;
        do
        {
          unsigned int v37 = 16 * v34;
          unsigned int v38 = 16 * (v34 + 1) - 1;
          if (16 * v34 <= a7) {
            int v39 = a7;
          }
          else {
            int v39 = 16 * v34;
          }
          if (v188 < v38) {
            unsigned int v38 = a7 + a9 - 1;
          }
          int v40 = v38 - v39 + 1;
          if (v34 == v195) {
            unsigned int v41 = v194;
          }
          else {
            unsigned int v41 = 16;
          }
          BOOL v42 = 1;
          if (v193 >= v32 && v37 >= a7)
          {
            int v43 = v194;
            if (v34 != v195) {
              int v43 = 16;
            }
            BOOL v42 = v40 != v43 || v192 != v197;
          }
          if (isLevelTiled)
          {
            unsigned int v64 = 0;
            uint64_t v65 = v174 >> (*(unsigned char *)(a1 + 57) != 0);
            char v66 = 1;
            if (v65 > 127)
            {
              if (v65 > 511)
              {
                if (v65 == 512)
                {
                  char v67 = 0;
                  unsigned int v64 = 16;
                  unsigned int v68 = 16;
                }
                else
                {
                  char v67 = 1;
                  unsigned int v68 = 0;
                  if (v65 == 1024)
                  {
                    unsigned int v68 = 8;
                    unsigned int v64 = 16;
                  }
                }
              }
              else if (v65 == 128)
              {
                char v66 = 0;
                char v67 = 0;
                unsigned int v64 = 32;
                unsigned int v68 = 32;
              }
              else
              {
                char v67 = 1;
                unsigned int v68 = 0;
                if (v65 == 256)
                {
                  char v66 = 0;
                  char v67 = 0;
                  unsigned int v68 = 16;
                  unsigned int v64 = 32;
                }
              }
            }
            else
            {
              char v67 = 1;
              unsigned int v68 = 0;
              switch(v65)
              {
                case 4:
                  char v66 = 0;
                  char v67 = 0;
                  unsigned int v68 = 128;
                  unsigned int v64 = 256;
                  break;
                case 5:
                case 6:
                case 7:
                case 9:
                case 10:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 17:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                  break;
                case 8:
                  char v66 = 0;
                  char v67 = 0;
                  unsigned int v64 = 128;
                  unsigned int v68 = 128;
                  break;
                case 16:
                  char v66 = 0;
                  char v67 = 0;
                  unsigned int v68 = 64;
                  unsigned int v64 = 128;
                  break;
                case 32:
                  char v66 = 0;
                  char v67 = 0;
                  unsigned int v64 = 64;
                  unsigned int v68 = 64;
                  break;
                default:
                  if (v65 == 64)
                  {
                    char v66 = 0;
                    char v67 = 0;
                    unsigned int v68 = 32;
                    unsigned int v64 = 64;
                  }
                  break;
              }
            }
            unsigned int v163 = (v64 >> 4) - 1;
            if (v66) {
              unsigned int v164 = 0;
            }
            else {
              unsigned int v164 = 32 - __clz(~(-1 << -(char)__clz(v163)));
            }
            unsigned int v165 = (v68 >> 3) - 1;
            if (v67)
            {
              unsigned int v166 = 0;
              if (v164) {
                goto LABEL_210;
              }
            }
            else
            {
              unsigned int v166 = 32 - __clz(~(-1 << -(char)__clz(v165)));
              if (v166 | v164)
              {
LABEL_210:
                int v167 = 0;
                uint64_t v168 = 0;
                int v169 = v34 & v163;
                int v170 = v18 & v165;
                BOOL v171 = v166 != 0;
                BOOL v172 = v164 != 0;
                int v173 = 1;
                do
                {
                  --v166;
                  if (v171) {
                    v168 |= (unint64_t)(v173 & v170) << v167++;
                  }
                  else {
                    unsigned int v166 = 0;
                  }
                  --v164;
                  if (v172) {
                    v168 |= (unint64_t)(v173 & v169) << v167++;
                  }
                  else {
                    unsigned int v164 = 0;
                  }
                  v173 *= 2;
                  --v167;
                  BOOL v172 = v164 != 0;
                  BOOL v171 = v166 != 0;
                }
                while (v164 | v166);
                goto LABEL_222;
              }
            }
            uint64_t v168 = 0;
LABEL_222:
            unint64_t v52 = ((unint64_t)(v37 / v64 + v193 / v68 * ((v64 + v175) / v64)) << 14) + (v168 << 8);
            goto LABEL_58;
          }
          if (v187)
          {
            int v45 = 0;
            uint64_t v46 = 0;
            int v47 = 1;
            BOOL v49 = v184;
            BOOL v48 = v185;
            int v50 = v186;
            int v51 = HIDWORD(v186);
            do
            {
              --v50;
              if (v48) {
                v46 |= (unint64_t)(v47 & v18) << v45++;
              }
              else {
                int v50 = 0;
              }
              --v51;
              if (v49) {
                v46 |= (unint64_t)(v47 & v34) << v45++;
              }
              else {
                int v51 = 0;
              }
              v47 *= 2;
              --v45;
              BOOL v49 = v51 != 0;
              BOOL v48 = v50 != 0;
            }
            while (v51 | v50);
          }
          else
          {
            uint64_t v46 = 0;
          }
          unint64_t v52 = v46 << 8;
LABEL_58:
          unsigned int v53 = *(_DWORD *)(a1 + 128) >> (*(unsigned char *)(a1 + 144) + a12);
          if (v53 <= 1) {
            unsigned int v53 = 1;
          }
          unsigned int v54 = v53 + 15;
          if (v54 < 0x20) {
            unsigned int v55 = 0;
          }
          else {
            unsigned int v55 = 32 - __clz(~(-1 << -(char)__clz((v54 >> 4) - 1)));
          }
          unsigned int v56 = *(_DWORD *)(a1 + 132) >> (*(unsigned char *)(a1 + 144) + a12);
          if (v56 <= 1) {
            unsigned int v56 = 1;
          }
          unsigned int v57 = v56 + 7;
          if (v57 < 0x10)
          {
            unsigned int v58 = 0;
            if (!v55)
            {
LABEL_80:
              uint64_t v60 = 0;
              goto LABEL_81;
            }
          }
          else
          {
            unsigned int v58 = 32 - __clz(~(-1 << -(char)__clz((v57 >> 3) - 1)));
            if (!(v58 | v55)) {
              goto LABEL_80;
            }
          }
          int v59 = 0;
          uint64_t v60 = 0;
          BOOL v61 = v55 != 0;
          BOOL v62 = v58 != 0;
          int v63 = 1;
          do
          {
            --v55;
            if (v61) {
              v60 |= (unint64_t)(v63 & v34) << v59++;
            }
            else {
              unsigned int v55 = 0;
            }
            --v58;
            if (v62) {
              v60 |= (unint64_t)(v63 & v18) << v59++;
            }
            else {
              unsigned int v58 = 0;
            }
            v63 *= 2;
            --v59;
            BOOL v62 = v58 != 0;
            BOOL v61 = v55 != 0;
          }
          while (v58 | v55);
LABEL_81:
          int v69 = v41 < 0x10 || v42;
          unsigned int v70 = (char *)(v36 + 8 * v60);
          unsigned int v71 = (int8x16_t *)(a2 + v52);
          if (v197 < 8) {
            int v72 = 1;
          }
          else {
            int v72 = v69;
          }
          if (v196)
          {
            if (!v72)
            {
              int v80 = (int8x16_t *)v209;
LABEL_95:
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock(v191 + 2 * (v39 - a7), a11, v80, v70, v41, v197, *(double *)v30.i64, *(double *)v28.i64, *(int8x8_t *)v29.i8, *(int8x8_t *)v27.i8);
              if (!v196) {
                goto LABEL_26;
              }
              goto LABEL_191;
            }
            int8x16_t v73 = v71[13];
            v209[12] = v71[12];
            v209[13] = v73;
            int8x16_t v74 = v71[15];
            v209[14] = v71[14];
            v209[15] = v74;
            int8x16_t v75 = v71[9];
            v209[8] = v71[8];
            v209[9] = v75;
            int8x16_t v76 = v71[11];
            v209[10] = v71[10];
            v209[11] = v76;
            int8x16_t v77 = v71[5];
            v209[4] = v71[4];
            v209[5] = v77;
            int8x16_t v78 = v71[7];
            v209[6] = v71[6];
            v209[7] = v78;
            int8x16_t v79 = v71[1];
            v209[0] = *v71;
            v209[1] = v79;
            int8x16_t v30 = v71[2];
            int8x16_t v28 = v71[3];
            int v80 = (int8x16_t *)v209;
            v209[2] = v30;
            v209[3] = v28;
          }
          else
          {
            int v80 = v71;
            if (!v72) {
              goto LABEL_95;
            }
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE0ELj2ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = a1;
          uint64_t v199 = v80;
          unsigned __int8 v207 = v41;
          unsigned __int8 v208 = v197;
          unsigned int v203 = v183;
          unsigned int v204 = v39 - v37;
          uint64_t v200 = (char *)(v36 + 8 * v60);
          unsigned int v201 = (int8x16_t *)(v191 + 2 * (v39 - a7));
          uint64_t v202 = a11;
          unsigned int v205 = v192;
          unsigned int v206 = v40;
          if (!v42)
          {
            unsigned int v81 = *v70;
            if (v81 == 96)
            {
              *(int8x8_t *)v30.i8 = vdup_lane_s8(*(int8x8_t *)v80->i8, 0);
              int32x2_t v210 = *(int32x2_t *)v30.i8;
              int32x2_t v214 = *(int32x2_t *)v30.i8;
              uint64_t v218 = v30.i64[0];
              uint64_t v222 = v30.i64[0];
              uint64_t v82 = 1;
            }
            else if (v81 == 31)
            {
              int32x2_t v83 = (int32x2_t)v80->u64[1];
              v29.i64[0] = v80[1].i64[0];
              v27.i64[0] = v80[1].i64[1];
              int32x2_t v84 = vzip2_s32(*(int32x2_t *)v80->i8, v83);
              int32x2_t v210 = vzip1_s32(*(int32x2_t *)v80->i8, v83);
              int32x2_t v214 = v84;
              *(int32x2_t *)v30.i8 = vzip1_s32(*(int32x2_t *)v29.i8, *(int32x2_t *)v27.i8);
              *(int32x2_t *)v28.i8 = vzip2_s32(*(int32x2_t *)v29.i8, *(int32x2_t *)v27.i8);
              uint64_t v218 = v30.i64[0];
              uint64_t v222 = v28.i64[0];
              uint64_t v82 = 32;
            }
            else if (*v70)
            {
              uint64_t v82 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v210, 32, (uint64_t)v80, v81);
            }
            else
            {
              uint64_t v82 = 0;
              int32x2_t v210 = 0;
              int32x2_t v214 = 0;
              uint64_t v218 = 0;
              uint64_t v222 = 0;
            }
            int v85 = (int8x8_t *)&v80->i8[v82];
            unsigned int v86 = v70[1];
            if (v86 == 96)
            {
              *(int8x8_t *)v30.i8 = vdup_lane_s8(*v85, 0);
              int32x2_t v211 = *(int32x2_t *)v30.i8;
              int32x2_t v215 = *(int32x2_t *)v30.i8;
              uint64_t v219 = v30.i64[0];
              uint64_t v223 = v30.i64[0];
              uint64_t v87 = 1;
            }
            else if (v86 == 31)
            {
              int32x2_t v88 = (int32x2_t)v85[1];
              *(int8x8_t *)v29.i8 = v85[2];
              *(int8x8_t *)v27.i8 = v85[3];
              int32x2_t v89 = vzip2_s32((int32x2_t)*v85, v88);
              int32x2_t v211 = vzip1_s32((int32x2_t)*v85, v88);
              int32x2_t v215 = v89;
              *(int32x2_t *)v30.i8 = vzip1_s32(*(int32x2_t *)v29.i8, *(int32x2_t *)v27.i8);
              *(int32x2_t *)v28.i8 = vzip2_s32(*(int32x2_t *)v29.i8, *(int32x2_t *)v27.i8);
              uint64_t v219 = v30.i64[0];
              uint64_t v223 = v28.i64[0];
              uint64_t v87 = 32;
            }
            else if (v70[1])
            {
              uint64_t v87 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v211, 32, (uint64_t)v85, v86);
            }
            else
            {
              uint64_t v87 = 0;
              int32x2_t v211 = 0;
              int32x2_t v215 = 0;
              uint64_t v219 = 0;
              uint64_t v223 = 0;
            }
            int32x4_t v90 = (int8x8_t *)((char *)v85 + v87);
            unsigned int v91 = v70[2];
            if (v91 == 96)
            {
              *(int8x8_t *)v30.i8 = vdup_lane_s8(*v90, 0);
              int32x2_t v226 = *(int32x2_t *)v30.i8;
              int32x2_t v230 = *(int32x2_t *)v30.i8;
              uint64_t v234 = v30.i64[0];
              uint64_t v238 = v30.i64[0];
              uint64_t v92 = 1;
            }
            else if (v91 == 31)
            {
              int32x2_t v93 = (int32x2_t)v90[1];
              *(int8x8_t *)v29.i8 = v90[2];
              *(int8x8_t *)v27.i8 = v90[3];
              int32x2_t v94 = vzip2_s32((int32x2_t)*v90, v93);
              int32x2_t v226 = vzip1_s32((int32x2_t)*v90, v93);
              int32x2_t v230 = v94;
              *(int32x2_t *)v30.i8 = vzip1_s32(*(int32x2_t *)v29.i8, *(int32x2_t *)v27.i8);
              *(int32x2_t *)v28.i8 = vzip2_s32(*(int32x2_t *)v29.i8, *(int32x2_t *)v27.i8);
              uint64_t v234 = v30.i64[0];
              uint64_t v238 = v28.i64[0];
              uint64_t v92 = 32;
            }
            else if (v70[2])
            {
              uint64_t v92 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v226, 32, (uint64_t)v90, v91);
            }
            else
            {
              uint64_t v92 = 0;
              int32x2_t v226 = 0;
              int32x2_t v230 = 0;
              uint64_t v234 = 0;
              uint64_t v238 = 0;
            }
            int32x2_t v95 = (int8x8_t *)((char *)v90 + v92);
            unsigned int v96 = v70[3];
            if (v96 == 96)
            {
              *(int8x8_t *)v30.i8 = vdup_lane_s8(*v95, 0);
              int32x2_t v227 = *(int32x2_t *)v30.i8;
              int32x2_t v231 = *(int32x2_t *)v30.i8;
              uint64_t v235 = v30.i64[0];
              uint64_t v239 = v30.i64[0];
              uint64_t v97 = 1;
            }
            else if (v96 == 31)
            {
              int32x2_t v98 = (int32x2_t)v95[1];
              *(int8x8_t *)v29.i8 = v95[2];
              *(int8x8_t *)v27.i8 = v95[3];
              int32x2_t v99 = vzip2_s32((int32x2_t)*v95, v98);
              int32x2_t v227 = vzip1_s32((int32x2_t)*v95, v98);
              int32x2_t v231 = v99;
              *(int32x2_t *)v30.i8 = vzip1_s32(*(int32x2_t *)v29.i8, *(int32x2_t *)v27.i8);
              *(int32x2_t *)v28.i8 = vzip2_s32(*(int32x2_t *)v29.i8, *(int32x2_t *)v27.i8);
              uint64_t v235 = v30.i64[0];
              uint64_t v239 = v28.i64[0];
              uint64_t v97 = 32;
            }
            else if (v70[3])
            {
              uint64_t v97 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v227, 32, (uint64_t)v95, v96);
            }
            else
            {
              uint64_t v97 = 0;
              int32x2_t v227 = 0;
              int32x2_t v231 = 0;
              uint64_t v235 = 0;
              uint64_t v239 = 0;
            }
            int32x4_t v100 = (int8x8_t *)((char *)v95 + v97);
            unsigned int v101 = v70[4];
            if (v101 == 96)
            {
              *(int8x8_t *)v30.i8 = vdup_lane_s8(*v100, 0);
              int32x2_t v212 = *(int32x2_t *)v30.i8;
              int32x2_t v216 = *(int32x2_t *)v30.i8;
              uint64_t v220 = v30.i64[0];
              uint64_t v224 = v30.i64[0];
              uint64_t v102 = 1;
            }
            else if (v101 == 31)
            {
              int32x2_t v103 = (int32x2_t)v100[1];
              *(int8x8_t *)v29.i8 = v100[2];
              *(int8x8_t *)v27.i8 = v100[3];
              int32x2_t v104 = vzip2_s32((int32x2_t)*v100, v103);
              int32x2_t v212 = vzip1_s32((int32x2_t)*v100, v103);
              int32x2_t v216 = v104;
              *(int32x2_t *)v30.i8 = vzip1_s32(*(int32x2_t *)v29.i8, *(int32x2_t *)v27.i8);
              *(int32x2_t *)v28.i8 = vzip2_s32(*(int32x2_t *)v29.i8, *(int32x2_t *)v27.i8);
              uint64_t v220 = v30.i64[0];
              uint64_t v224 = v28.i64[0];
              uint64_t v102 = 32;
            }
            else if (v70[4])
            {
              uint64_t v102 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v212, 32, (uint64_t)v100, v101);
            }
            else
            {
              uint64_t v102 = 0;
              int32x2_t v212 = 0;
              int32x2_t v216 = 0;
              uint64_t v220 = 0;
              uint64_t v224 = 0;
            }
            uint64_t v105 = (int8x8_t *)((char *)v100 + v102);
            unsigned int v106 = v70[5];
            if (v106 == 96)
            {
              *(int8x8_t *)v30.i8 = vdup_lane_s8(*v105, 0);
              int32x2_t v213 = *(int32x2_t *)v30.i8;
              int32x2_t v217 = *(int32x2_t *)v30.i8;
              uint64_t v221 = v30.i64[0];
              uint64_t v225 = v30.i64[0];
              uint64_t v107 = 1;
            }
            else if (v106 == 31)
            {
              int32x2_t v108 = (int32x2_t)v105[1];
              *(int8x8_t *)v29.i8 = v105[2];
              *(int8x8_t *)v27.i8 = v105[3];
              int32x2_t v109 = vzip2_s32((int32x2_t)*v105, v108);
              int32x2_t v213 = vzip1_s32((int32x2_t)*v105, v108);
              int32x2_t v217 = v109;
              *(int32x2_t *)v30.i8 = vzip1_s32(*(int32x2_t *)v29.i8, *(int32x2_t *)v27.i8);
              *(int32x2_t *)v28.i8 = vzip2_s32(*(int32x2_t *)v29.i8, *(int32x2_t *)v27.i8);
              uint64_t v221 = v30.i64[0];
              uint64_t v225 = v28.i64[0];
              uint64_t v107 = 32;
            }
            else if (v70[5])
            {
              uint64_t v107 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v213, 32, (uint64_t)v105, v106);
            }
            else
            {
              uint64_t v107 = 0;
              int32x2_t v213 = 0;
              int32x2_t v217 = 0;
              uint64_t v221 = 0;
              uint64_t v225 = 0;
            }
            uint64_t v110 = (int8x8_t *)((char *)v105 + v107);
            unsigned int v111 = v70[6];
            if (v111 == 96)
            {
              *(int8x8_t *)v30.i8 = vdup_lane_s8(*v110, 0);
              int32x2_t v228 = *(int32x2_t *)v30.i8;
              int32x2_t v232 = *(int32x2_t *)v30.i8;
              uint64_t v236 = v30.i64[0];
              uint64_t v240 = v30.i64[0];
              uint64_t v112 = 1;
            }
            else if (v111 == 31)
            {
              int32x2_t v113 = (int32x2_t)v110[1];
              *(int8x8_t *)v29.i8 = v110[2];
              *(int8x8_t *)v27.i8 = v110[3];
              int32x2_t v114 = vzip2_s32((int32x2_t)*v110, v113);
              int32x2_t v228 = vzip1_s32((int32x2_t)*v110, v113);
              int32x2_t v232 = v114;
              *(int32x2_t *)v30.i8 = vzip1_s32(*(int32x2_t *)v29.i8, *(int32x2_t *)v27.i8);
              *(int32x2_t *)v28.i8 = vzip2_s32(*(int32x2_t *)v29.i8, *(int32x2_t *)v27.i8);
              uint64_t v236 = v30.i64[0];
              uint64_t v240 = v28.i64[0];
              uint64_t v112 = 32;
            }
            else if (v70[6])
            {
              uint64_t v112 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v228, 32, (uint64_t)v110, v111);
            }
            else
            {
              uint64_t v112 = 0;
              int32x2_t v228 = 0;
              int32x2_t v232 = 0;
              uint64_t v236 = 0;
              uint64_t v240 = 0;
            }
            unsigned int v115 = (int8x8_t *)((char *)v110 + v112);
            unsigned int v116 = v70[7];
            if (v116 == 96)
            {
              *(int8x8_t *)v30.i8 = vdup_lane_s8(*v115, 0);
              int32x2_t v229 = *(int32x2_t *)v30.i8;
              int32x2_t v233 = *(int32x2_t *)v30.i8;
              uint64_t v237 = v30.i64[0];
              uint64_t v241 = v30.i64[0];
              uint64_t v117 = v205;
              if (v205) {
                goto LABEL_156;
              }
            }
            else
            {
              if (v116 != 31)
              {
                if (v70[7])
                {
                  AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v229, 32, (uint64_t)v115, v116);
                  uint64_t v117 = v205;
                  if (!v205) {
                    goto LABEL_190;
                  }
                }
                else
                {
                  int32x2_t v229 = 0;
                  int32x2_t v233 = 0;
                  uint64_t v237 = 0;
                  uint64_t v241 = 0;
                  uint64_t v117 = v205;
                  if (!v205) {
                    goto LABEL_190;
                  }
                }
LABEL_156:
                if (!v206) {
                  goto LABEL_190;
                }
                uint64_t v120 = 0;
                uint64_t v121 = 32 * v203;
                uint64_t v122 = 2 * v204;
                uint64_t v123 = (char *)&v210 + v121 + v122;
                int32x2_t v124 = v201;
                uint64_t v125 = v202;
                unint64_t v126 = 2 * v206;
                if (v126 <= 1) {
                  unint64_t v127 = 1;
                }
                else {
                  unint64_t v127 = 2 * v206;
                }
                uint64_t v128 = v121 + v122;
                unsigned int v129 = (char *)&v210 + v121 + v122;
                if (v127) {
                  BOOL v130 = (v127 - 1) >> 32 == 0;
                }
                else {
                  BOOL v130 = 0;
                }
                uint64_t v131 = v127 & 0x1FFFFFFE0;
                uint64_t v132 = v127 & 0x1FFFFFFF8;
                char v134 = !v130 || v127 < 8;
                uint64_t v135 = (int8x16_t *)((char *)&v212 + v128);
                unsigned int v136 = v201 + 1;
                uint64_t v137 = v123;
                int32x2_t v138 = v201;
                while (2)
                {
                  int32x2_t v139 = &v124->i8[v125 * v120];
                  int32x2_t v140 = &v123[32 * v120];
                  if ((unint64_t)(&v129[32 * v120] - v139) < 0x20) {
                    char v141 = 1;
                  }
                  else {
                    char v141 = v134;
                  }
                  if (v141)
                  {
                    int v142 = 0;
LABEL_187:
                    unsigned int v151 = v142 + 1;
                    do
                    {
                      char v152 = *v139++;
                      *v140++ = v152;
                    }
                    while (v126 > v151++);
                  }
                  else
                  {
                    if (v127 >= 0x20)
                    {
                      uint64_t v144 = v136;
                      int32x2_t v145 = v135;
                      uint64_t v146 = v127 & 0x1FFFFFFE0;
                      do
                      {
                        int8x16_t v30 = v144[-1];
                        int8x16_t v28 = *v144;
                        v145[-1] = v30;
                        *int32x2_t v145 = v28;
                        v145 += 2;
                        v144 += 2;
                        v146 -= 32;
                      }
                      while (v146);
                      if (v127 == v131) {
                        goto LABEL_170;
                      }
                      uint64_t v143 = v127 & 0x1FFFFFFE0;
                      if ((v127 & 0x18) == 0)
                      {
                        v139 += v131;
                        v140 += v131;
                        int v142 = v127 & 0xFFFFFFE0;
                        goto LABEL_187;
                      }
                    }
                    else
                    {
                      uint64_t v143 = 0;
                    }
                    v140 += v132;
                    uint64_t v147 = v143 - v132;
                    int32x2_t v148 = (uint64_t *)((char *)v138->i64 + v143);
                    int v149 = &v137[v143];
                    do
                    {
                      uint64_t v150 = *v148++;
                      v30.i64[0] = v150;
                      *(void *)int v149 = v150;
                      v149 += 8;
                      v147 += 8;
                    }
                    while (v147);
                    if (v127 != v132)
                    {
                      v139 += v132;
                      int v142 = v127 & 0xFFFFFFF8;
                      goto LABEL_187;
                    }
                  }
LABEL_170:
                  ++v120;
                  v135 += 2;
                  unsigned int v136 = (int8x16_t *)((char *)v136 + v125);
                  int32x2_t v138 = (int8x16_t *)((char *)v138 + v125);
                  v137 += 32;
                  if (v120 == v117) {
                    goto LABEL_190;
                  }
                  continue;
                }
              }
              int32x2_t v118 = (int32x2_t)v115[1];
              *(int8x8_t *)v29.i8 = v115[2];
              *(int8x8_t *)v27.i8 = v115[3];
              int32x2_t v119 = vzip2_s32((int32x2_t)*v115, v118);
              int32x2_t v229 = vzip1_s32((int32x2_t)*v115, v118);
              int32x2_t v233 = v119;
              *(int32x2_t *)v30.i8 = vzip1_s32(*(int32x2_t *)v29.i8, *(int32x2_t *)v27.i8);
              *(int32x2_t *)v28.i8 = vzip2_s32(*(int32x2_t *)v29.i8, *(int32x2_t *)v27.i8);
              uint64_t v237 = v30.i64[0];
              uint64_t v241 = v28.i64[0];
              uint64_t v117 = v205;
              if (v205) {
                goto LABEL_156;
              }
            }
LABEL_190:
            AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)&v210, 32, v199, v200, v207, v208, *(double *)v30.i64, *(double *)v28.i64, *(int8x8_t *)v29.i8, *(int8x8_t *)v27.i8);
            unsigned int v32 = v182;
            uint64_t v36 = a4;
            if (!v196) {
              goto LABEL_26;
            }
            goto LABEL_191;
          }
          dispatch_sync(*(dispatch_queue_t *)(*(void *)(a1 + 8) + 7384), block);
          if (!v196) {
            goto LABEL_26;
          }
LABEL_191:
          int8x16_t v154 = *v80;
          int8x16_t v155 = v80[1];
          int8x16_t v156 = v80[3];
          v71[2] = v80[2];
          v71[3] = v156;
          *unsigned int v71 = v154;
          v71[1] = v155;
          int8x16_t v157 = v80[4];
          int8x16_t v158 = v80[5];
          int8x16_t v159 = v80[7];
          v71[6] = v80[6];
          v71[7] = v159;
          v71[4] = v157;
          v71[5] = v158;
          int8x16_t v160 = v80[8];
          int8x16_t v161 = v80[9];
          int8x16_t v162 = v80[11];
          v71[10] = v80[10];
          v71[11] = v162;
          v71[8] = v160;
          v71[9] = v161;
          int8x16_t v30 = v80[12];
          int8x16_t v28 = v80[13];
          int8x16_t v29 = v80[14];
          int8x16_t v27 = v80[15];
          v71[14] = v29;
          v71[15] = v27;
          v71[12] = v30;
          v71[13] = v28;
LABEL_26:
          BOOL v22 = v34++ == v188 >> 4;
        }
        while (!v22);
        BOOL v22 = v18++ == v180;
      }
      while (!v22);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, int a12)
{
  uint64_t v287 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v226 = a8;
  unsigned int v16 = a8 >> 3;
  unsigned int v223 = a8 + a10 - 1;
  unsigned int v225 = v223 >> 3;
  unsigned int v17 = *(unsigned __int8 *)(*(void *)(a1 + 208) + 88);
  unsigned int v18 = *(_DWORD *)(a1 + 112);
  uint64_t v228 = a1;
  if (*(void *)(a1 + 168))
  {
    __int16 CacheMode = IOSurfaceGetCacheMode();
    uint64_t v20 = a1;
    int v21 = CacheMode & 0xF00;
  }
  else
  {
    uint64_t v20 = a1;
    int v21 = 0;
  }
  BOOL v22 = (v21 & 0xD00) == 0 || v21 == 768;
  int v23 = v21 & 0xE00;
  int v25 = !v22 && v23 != 1024;
  BOOL isLevelTiled = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::isLevelTiled(v20, *(_DWORD *)(v20 + 144) + a12);
  uint64_t v30 = v228;
  BOOL v235 = isLevelTiled;
  unsigned int v31 = a7;
  if (v16 <= v225)
  {
    unsigned int v234 = a7 + a9 - 1;
    if (a7 >> 4 <= v234 >> 4)
    {
      int v32 = v25;
      unsigned int v220 = a5 - 1;
      unsigned int v222 = (a6 - 1) >> 3;
      int v241 = ((a5 - 1) & 0xF) + 1;
      unsigned int v242 = (a5 - 1) >> 4;
      int v221 = ((a6 - 1) & 7) + 1;
      uint32x2_t v33 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0xF00000007);
      v34.i64[1] = -1;
      int8x8_t v35 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32(vadd_s32((int32x2_t)vshl_u32(v33, (uint32x2_t)0xFFFFFFFCFFFFFFFDLL), (int32x2_t)-1))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x2000000010, v33));
      __int32 v233 = v35.i32[0] | v35.i32[1];
      int8x8_t v232 = v35;
      BOOL v230 = v35.i32[1] != 0;
      BOOL v231 = v35.i32[0] != 0;
      unint64_t v219 = 8 * v18 * (unint64_t)v17;
      uint64_t v36 = 4 * a11;
      do
      {
        unsigned int v37 = (8 * v16) | 7;
        unsigned int v38 = v226;
        if (8 * v16 <= v226) {
          int v39 = v226;
        }
        else {
          int v39 = 8 * v16;
        }
        unsigned int v40 = a7 >> 4;
        if (v223 < v37) {
          unsigned int v37 = v223;
        }
        int v229 = v39 - 8 * v16;
        int v239 = v37 - v39 + 1;
        unsigned int v240 = 8 * v16;
        if (v16 == v222) {
          unsigned int v41 = v221;
        }
        else {
          unsigned int v41 = 8;
        }
        uint64_t v238 = a3 + (v39 - v226) * a11;
        do
        {
          unsigned int v42 = 16 * v40;
          unsigned int v43 = 16 * (v40 + 1) - 1;
          if (16 * v40 <= v31) {
            int v44 = v31;
          }
          else {
            int v44 = 16 * v40;
          }
          if (v234 < v43) {
            unsigned int v43 = a7 + a9 - 1;
          }
          int v45 = v43 - v44 + 1;
          unsigned int v46 = v241;
          if (v40 != v242) {
            unsigned int v46 = 16;
          }
          BOOL v47 = 1;
          if (v240 >= v38 && v42 >= v31)
          {
            int v48 = v241;
            if (v40 != v242) {
              int v48 = 16;
            }
            BOOL v47 = v45 != v48 || v239 != v41;
          }
          if (v235)
          {
            unsigned int v69 = 0;
            uint64_t v70 = v219 >> (*(unsigned char *)(v30 + 57) != 0);
            char v71 = 1;
            if (v70 > 127)
            {
              if (v70 > 511)
              {
                if (v70 == 512)
                {
                  char v72 = 0;
                  unsigned int v69 = 16;
                  unsigned int v73 = 16;
                }
                else
                {
                  char v72 = 1;
                  unsigned int v73 = 0;
                  if (v70 == 1024)
                  {
                    unsigned int v73 = 8;
                    unsigned int v69 = 16;
                  }
                }
              }
              else if (v70 == 128)
              {
                char v71 = 0;
                char v72 = 0;
                unsigned int v69 = 32;
                unsigned int v73 = 32;
              }
              else
              {
                char v72 = 1;
                unsigned int v73 = 0;
                if (v70 == 256)
                {
                  char v71 = 0;
                  char v72 = 0;
                  unsigned int v73 = 16;
                  unsigned int v69 = 32;
                }
              }
            }
            else
            {
              char v72 = 1;
              unsigned int v73 = 0;
              switch(v70)
              {
                case 4:
                  char v71 = 0;
                  char v72 = 0;
                  unsigned int v73 = 128;
                  unsigned int v69 = 256;
                  break;
                case 5:
                case 6:
                case 7:
                case 9:
                case 10:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 17:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                  break;
                case 8:
                  char v71 = 0;
                  char v72 = 0;
                  unsigned int v69 = 128;
                  unsigned int v73 = 128;
                  break;
                case 16:
                  char v71 = 0;
                  char v72 = 0;
                  unsigned int v73 = 64;
                  unsigned int v69 = 128;
                  break;
                case 32:
                  char v71 = 0;
                  char v72 = 0;
                  unsigned int v69 = 64;
                  unsigned int v73 = 64;
                  break;
                default:
                  if (v70 == 64)
                  {
                    char v71 = 0;
                    char v72 = 0;
                    unsigned int v73 = 32;
                    unsigned int v69 = 64;
                  }
                  break;
              }
            }
            unsigned int v208 = (v69 >> 4) - 1;
            if (v71) {
              unsigned int v209 = 0;
            }
            else {
              unsigned int v209 = 32 - __clz(~(-1 << -(char)__clz(v208)));
            }
            unsigned int v210 = (v73 >> 3) - 1;
            if (v72)
            {
              unsigned int v211 = 0;
              if (v209) {
                goto LABEL_231;
              }
            }
            else
            {
              unsigned int v211 = 32 - __clz(~(-1 << -(char)__clz(v210)));
              if (v211 | v209)
              {
LABEL_231:
                int v212 = 0;
                uint64_t v213 = 0;
                int v214 = v40 & v208;
                int v215 = v16 & v210;
                BOOL v216 = v211 != 0;
                BOOL v217 = v209 != 0;
                int v218 = 1;
                do
                {
                  --v211;
                  if (v216) {
                    v213 |= (unint64_t)(v218 & v215) << v212++;
                  }
                  else {
                    unsigned int v211 = 0;
                  }
                  --v209;
                  if (v217) {
                    v213 |= (unint64_t)(v218 & v214) << v212++;
                  }
                  else {
                    unsigned int v209 = 0;
                  }
                  v218 *= 2;
                  --v212;
                  BOOL v217 = v209 != 0;
                  BOOL v216 = v211 != 0;
                }
                while (v209 | v211);
                goto LABEL_243;
              }
            }
            uint64_t v213 = 0;
LABEL_243:
            unint64_t v57 = ((unint64_t)(v42 / v69 + v240 / v73 * ((v69 + v220) / v69)) << 14) + (v213 << 8);
            uint64_t v30 = v228;
            int v32 = v25;
            uint64_t v36 = 4 * a11;
            goto LABEL_58;
          }
          if (v233)
          {
            int v50 = 0;
            uint64_t v51 = 0;
            int v52 = 1;
            BOOL v53 = v230;
            BOOL v54 = v231;
            __int32 v55 = v232.i32[0];
            __int32 v56 = v232.i32[1];
            do
            {
              --v55;
              if (v54) {
                v51 |= (unint64_t)(v52 & v16) << v50++;
              }
              else {
                __int32 v55 = 0;
              }
              --v56;
              if (v53) {
                v51 |= (unint64_t)(v52 & v40) << v50++;
              }
              else {
                __int32 v56 = 0;
              }
              v52 *= 2;
              --v50;
              BOOL v53 = v56 != 0;
              BOOL v54 = v55 != 0;
            }
            while (v56 | v55);
          }
          else
          {
            uint64_t v51 = 0;
          }
          unint64_t v57 = v51 << 8;
LABEL_58:
          unsigned int v58 = *(_DWORD *)(v30 + 128) >> (*(unsigned char *)(v30 + 144) + a12);
          if (v58 <= 1) {
            unsigned int v58 = 1;
          }
          unsigned int v59 = v58 + 15;
          if (v59 < 0x20) {
            unsigned int v60 = 0;
          }
          else {
            unsigned int v60 = 32 - __clz(~(-1 << -(char)__clz((v59 >> 4) - 1)));
          }
          unsigned int v61 = *(_DWORD *)(v30 + 132) >> (*(unsigned char *)(v30 + 144) + a12);
          if (v61 <= 1) {
            unsigned int v61 = 1;
          }
          unsigned int v62 = v61 + 7;
          if (v62 < 0x10)
          {
            unsigned int v63 = 0;
            if (!v60)
            {
LABEL_80:
              uint64_t v65 = 0;
              goto LABEL_81;
            }
          }
          else
          {
            unsigned int v63 = 32 - __clz(~(-1 << -(char)__clz((v62 >> 3) - 1)));
            if (!(v63 | v60)) {
              goto LABEL_80;
            }
          }
          int v64 = 0;
          uint64_t v65 = 0;
          BOOL v66 = v60 != 0;
          BOOL v67 = v63 != 0;
          int v68 = 1;
          do
          {
            --v60;
            if (v66) {
              v65 |= (unint64_t)(v68 & v40) << v64++;
            }
            else {
              unsigned int v60 = 0;
            }
            --v63;
            if (v67) {
              v65 |= (unint64_t)(v68 & v16) << v64++;
            }
            else {
              unsigned int v63 = 0;
            }
            v68 *= 2;
            --v64;
            BOOL v67 = v63 != 0;
            BOOL v66 = v60 != 0;
          }
          while (v63 | v60);
LABEL_81:
          int v74 = v46 < 0x10 || v47;
          int8x16_t v75 = (char *)(a4 + 8 * v65);
          uint64_t v76 = v238 + 2 * (v44 - v31);
          int8x16_t v77 = (int32x4_t *)(a2 + v57);
          if (v41 < 8) {
            int v78 = 1;
          }
          else {
            int v78 = v74;
          }
          if (v32)
          {
            uint64_t v79 = 2 * a11;
            if (v78)
            {
              int32x4_t v80 = v77[13];
              v254[12] = v77[12];
              v254[13] = v80;
              int32x4_t v81 = v77[15];
              v254[14] = v77[14];
              v254[15] = v81;
              int32x4_t v82 = v77[9];
              v254[8] = v77[8];
              v254[9] = v82;
              int32x4_t v83 = v77[11];
              v254[10] = v77[10];
              v254[11] = v83;
              int32x4_t v84 = v77[5];
              v254[4] = v77[4];
              v254[5] = v84;
              int32x4_t v85 = v77[7];
              v254[6] = v77[6];
              v254[7] = v85;
              int32x4_t v86 = v77[1];
              v254[0] = *v77;
              v254[1] = v86;
              int32x4_t v27 = v77[2];
              int32x4_t v28 = v77[3];
              uint64_t v87 = (int32x4_t *)v254;
              v254[2] = v27;
              v254[3] = v28;
LABEL_91:
              block[0] = MEMORY[0x263EF8330];
              block[1] = 3221225472;
              block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE0ELj2ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
              block[3] = &__block_descriptor_90_e5_v8__0l;
              block[4] = v30;
              float64x2_t v244 = v87;
              unsigned __int8 v252 = v46;
              unsigned __int8 v253 = v41;
              unsigned int v248 = v229;
              unsigned int v249 = v44 - v42;
              uint64_t v245 = v75;
              unsigned int v246 = (int32x4_t *)(v238 + 2 * (v44 - v31));
              uint64_t v247 = a11;
              unsigned int v250 = v239;
              unsigned int v251 = v45;
              if (v47)
              {
                dispatch_sync(*(dispatch_queue_t *)(*(void *)(v30 + 8) + 7384), block);
                uint64_t v36 = 4 * a11;
                int v32 = v25;
                unsigned int v31 = a7;
                uint64_t v30 = v228;
                goto LABEL_93;
              }
              unsigned int v107 = *v75;
              if (v107 == 96)
              {
                int32x4_t v27 = *v87;
                int32x2_t v255 = (int32x2_t)vdup_lane_s8(*(int8x8_t *)v87->i8, 0);
                int32x2_t v259 = v255;
                int32x2_t v263 = v255;
                int32x2_t v267 = v255;
                uint64_t v108 = 1;
              }
              else if (v107 == 31)
              {
                int32x2_t v109 = (int32x2_t)v87->u64[1];
                int32x2_t v110 = *(int32x2_t *)v87[1].i8;
                int32x2_t v111 = (int32x2_t)v87[1].u64[1];
                int32x2_t v112 = vzip2_s32(*(int32x2_t *)v87->i8, v109);
                int32x2_t v255 = vzip1_s32(*(int32x2_t *)v87->i8, v109);
                int32x2_t v259 = v112;
                int32x2_t v263 = vzip1_s32(v110, v111);
                int32x2_t v267 = vzip2_s32(v110, v111);
                uint64_t v108 = 32;
              }
              else if (*v75)
              {
                uint64_t v108 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v255, 32, (uint64_t)v87, v107);
              }
              else
              {
                uint64_t v108 = 0;
                int32x2_t v255 = 0;
                int32x2_t v259 = 0;
                int32x2_t v263 = 0;
                int32x2_t v267 = 0;
              }
              int32x2_t v113 = (int8x8_t *)&v87->i8[v108];
              unsigned int v114 = v75[1];
              if (v114 == 96)
              {
                int32x4_t v27 = *(int32x4_t *)v113->i8;
                int32x2_t v256 = (int32x2_t)vdup_lane_s8(*v113, 0);
                int32x2_t v260 = v256;
                int32x2_t v264 = v256;
                int32x2_t v268 = v256;
                uint64_t v115 = 1;
              }
              else if (v114 == 31)
              {
                int32x2_t v116 = (int32x2_t)v113[1];
                int32x2_t v117 = (int32x2_t)v113[2];
                int32x2_t v118 = (int32x2_t)v113[3];
                int32x2_t v119 = vzip2_s32((int32x2_t)*v113, v116);
                int32x2_t v256 = vzip1_s32((int32x2_t)*v113, v116);
                int32x2_t v260 = v119;
                int32x2_t v264 = vzip1_s32(v117, v118);
                int32x2_t v268 = vzip2_s32(v117, v118);
                uint64_t v115 = 32;
              }
              else if (v75[1])
              {
                uint64_t v115 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v256, 32, (uint64_t)v113, v114);
              }
              else
              {
                uint64_t v115 = 0;
                int32x2_t v256 = 0;
                int32x2_t v260 = 0;
                int32x2_t v264 = 0;
                int32x2_t v268 = 0;
              }
              uint64_t v120 = (int8x8_t *)((char *)v113 + v115);
              unsigned int v121 = v75[2];
              if (v121 == 96)
              {
                int32x4_t v27 = *(int32x4_t *)v120->i8;
                int32x2_t v271 = (int32x2_t)vdup_lane_s8(*v120, 0);
                int32x2_t v275 = v271;
                int32x2_t v279 = v271;
                int32x2_t v283 = v271;
                uint64_t v122 = 1;
              }
              else if (v121 == 31)
              {
                int32x2_t v123 = (int32x2_t)v120[1];
                int32x2_t v124 = (int32x2_t)v120[2];
                int32x2_t v125 = (int32x2_t)v120[3];
                int32x2_t v126 = vzip2_s32((int32x2_t)*v120, v123);
                int32x2_t v271 = vzip1_s32((int32x2_t)*v120, v123);
                int32x2_t v275 = v126;
                int32x2_t v279 = vzip1_s32(v124, v125);
                int32x2_t v283 = vzip2_s32(v124, v125);
                uint64_t v122 = 32;
              }
              else if (v75[2])
              {
                uint64_t v122 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v271, 32, (uint64_t)v120, v121);
              }
              else
              {
                uint64_t v122 = 0;
                int32x2_t v271 = 0;
                int32x2_t v275 = 0;
                int32x2_t v279 = 0;
                int32x2_t v283 = 0;
              }
              unint64_t v127 = (int8x8_t *)((char *)v120 + v122);
              unsigned int v128 = v75[3];
              if (v128 == 96)
              {
                int32x4_t v27 = *(int32x4_t *)v127->i8;
                int32x2_t v272 = (int32x2_t)vdup_lane_s8(*v127, 0);
                int32x2_t v276 = v272;
                int32x2_t v280 = v272;
                int32x2_t v284 = v272;
                uint64_t v129 = 1;
              }
              else if (v128 == 31)
              {
                int32x2_t v130 = (int32x2_t)v127[1];
                int32x2_t v131 = (int32x2_t)v127[2];
                int32x2_t v132 = (int32x2_t)v127[3];
                int32x2_t v133 = vzip2_s32((int32x2_t)*v127, v130);
                int32x2_t v272 = vzip1_s32((int32x2_t)*v127, v130);
                int32x2_t v276 = v133;
                int32x2_t v280 = vzip1_s32(v131, v132);
                int32x2_t v284 = vzip2_s32(v131, v132);
                uint64_t v129 = 32;
              }
              else if (v75[3])
              {
                uint64_t v129 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v272, 32, (uint64_t)v127, v128);
              }
              else
              {
                uint64_t v129 = 0;
                int32x2_t v272 = 0;
                int32x2_t v276 = 0;
                int32x2_t v280 = 0;
                int32x2_t v284 = 0;
              }
              char v134 = (int8x8_t *)((char *)v127 + v129);
              unsigned int v135 = v75[4];
              if (v135 == 96)
              {
                int32x4_t v27 = *(int32x4_t *)v134->i8;
                int32x2_t v257 = (int32x2_t)vdup_lane_s8(*v134, 0);
                int32x2_t v261 = v257;
                int32x2_t v265 = v257;
                int32x2_t v269 = v257;
                uint64_t v136 = 1;
              }
              else if (v135 == 31)
              {
                int32x2_t v137 = (int32x2_t)v134[1];
                int32x2_t v138 = (int32x2_t)v134[2];
                int32x2_t v139 = (int32x2_t)v134[3];
                int32x2_t v140 = vzip2_s32((int32x2_t)*v134, v137);
                int32x2_t v257 = vzip1_s32((int32x2_t)*v134, v137);
                int32x2_t v261 = v140;
                int32x2_t v265 = vzip1_s32(v138, v139);
                int32x2_t v269 = vzip2_s32(v138, v139);
                uint64_t v136 = 32;
              }
              else if (v75[4])
              {
                uint64_t v136 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v257, 32, (uint64_t)v134, v135);
              }
              else
              {
                uint64_t v136 = 0;
                int32x2_t v257 = 0;
                int32x2_t v261 = 0;
                int32x2_t v265 = 0;
                int32x2_t v269 = 0;
              }
              char v141 = (int8x8_t *)((char *)v134 + v136);
              unsigned int v142 = v75[5];
              if (v142 == 96)
              {
                int32x4_t v27 = *(int32x4_t *)v141->i8;
                int32x2_t v258 = (int32x2_t)vdup_lane_s8(*v141, 0);
                int32x2_t v262 = v258;
                int32x2_t v266 = v258;
                int32x2_t v270 = v258;
                uint64_t v143 = 1;
              }
              else if (v142 == 31)
              {
                int32x2_t v144 = (int32x2_t)v141[1];
                int32x2_t v145 = (int32x2_t)v141[2];
                int32x2_t v146 = (int32x2_t)v141[3];
                int32x2_t v147 = vzip2_s32((int32x2_t)*v141, v144);
                int32x2_t v258 = vzip1_s32((int32x2_t)*v141, v144);
                int32x2_t v262 = v147;
                int32x2_t v266 = vzip1_s32(v145, v146);
                int32x2_t v270 = vzip2_s32(v145, v146);
                uint64_t v143 = 32;
              }
              else if (v75[5])
              {
                uint64_t v143 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v258, 32, (uint64_t)v141, v142);
              }
              else
              {
                uint64_t v143 = 0;
                int32x2_t v258 = 0;
                int32x2_t v262 = 0;
                int32x2_t v266 = 0;
                int32x2_t v270 = 0;
              }
              int32x2_t v148 = (int8x8_t *)((char *)v141 + v143);
              unsigned int v149 = v75[6];
              if (v149 == 96)
              {
                int32x4_t v27 = *(int32x4_t *)v148->i8;
                int32x2_t v273 = (int32x2_t)vdup_lane_s8(*v148, 0);
                int32x2_t v277 = v273;
                int32x2_t v281 = v273;
                int32x2_t v285 = v273;
                uint64_t v150 = 1;
              }
              else if (v149 == 31)
              {
                int32x2_t v151 = (int32x2_t)v148[1];
                int32x2_t v152 = (int32x2_t)v148[2];
                int32x2_t v153 = (int32x2_t)v148[3];
                int32x2_t v154 = vzip2_s32((int32x2_t)*v148, v151);
                int32x2_t v273 = vzip1_s32((int32x2_t)*v148, v151);
                int32x2_t v277 = v154;
                int32x2_t v281 = vzip1_s32(v152, v153);
                int32x2_t v285 = vzip2_s32(v152, v153);
                uint64_t v150 = 32;
              }
              else if (v75[6])
              {
                uint64_t v150 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v273, 32, (uint64_t)v148, v149);
              }
              else
              {
                uint64_t v150 = 0;
                int32x2_t v273 = 0;
                int32x2_t v277 = 0;
                int32x2_t v281 = 0;
                int32x2_t v285 = 0;
              }
              int8x16_t v155 = (int8x8_t *)((char *)v148 + v150);
              unsigned int v156 = v75[7];
              if (v156 == 96)
              {
                int32x4_t v27 = *(int32x4_t *)v155->i8;
                int32x2_t v274 = (int32x2_t)vdup_lane_s8(*v155, 0);
                int32x2_t v278 = v274;
                int32x2_t v282 = v274;
                int32x2_t v286 = v274;
                uint64_t v157 = v250;
                if (v250) {
                  goto LABEL_167;
                }
              }
              else
              {
                if (v156 != 31)
                {
                  if (v75[7])
                  {
                    AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v274, 32, (uint64_t)v155, v156);
                    uint64_t v157 = v250;
                    if (!v250) {
                      goto LABEL_201;
                    }
                  }
                  else
                  {
                    int32x2_t v274 = 0;
                    int32x2_t v278 = 0;
                    int32x2_t v282 = 0;
                    int32x2_t v286 = 0;
                    uint64_t v157 = v250;
                    if (!v250) {
                      goto LABEL_201;
                    }
                  }
LABEL_167:
                  if (!v251) {
                    goto LABEL_201;
                  }
                  uint64_t v162 = 0;
                  uint64_t v163 = 32 * v248;
                  uint64_t v164 = 2 * v249;
                  unsigned int v165 = (char *)&v255 + v163 + v164;
                  unsigned int v166 = v246;
                  uint64_t v167 = v247;
                  unint64_t v168 = 2 * v251;
                  if (v168 <= 1) {
                    unint64_t v169 = 1;
                  }
                  else {
                    unint64_t v169 = 2 * v251;
                  }
                  uint64_t v170 = v163 + v164;
                  BOOL v171 = (char *)&v255 + v163 + v164;
                  if (v169) {
                    BOOL v172 = (v169 - 1) >> 32 == 0;
                  }
                  else {
                    BOOL v172 = 0;
                  }
                  uint64_t v173 = v169 & 0x1FFFFFFE0;
                  uint64_t v174 = v169 & 0x1FFFFFFF8;
                  char v176 = !v172 || v169 < 8;
                  unsigned int v177 = (int32x4_t *)((char *)&v257 + v170);
                  unsigned int v178 = v246 + 1;
                  BOOL v179 = v165;
                  unsigned int v180 = v246;
                  while (2)
                  {
                    uint64_t v181 = &v166->i8[v167 * v162];
                    unsigned int v182 = &v165[32 * v162];
                    if ((unint64_t)(&v171[32 * v162] - v181) < 0x20) {
                      char v183 = 1;
                    }
                    else {
                      char v183 = v176;
                    }
                    if (v183)
                    {
                      int v184 = 0;
LABEL_198:
                      unsigned int v193 = v184 + 1;
                      do
                      {
                        char v194 = *v181++;
                        *v182++ = v194;
                      }
                      while (v168 > v193++);
                    }
                    else
                    {
                      if (v169 >= 0x20)
                      {
                        uint64_t v186 = v178;
                        __int32 v187 = v177;
                        uint64_t v188 = v169 & 0x1FFFFFFE0;
                        do
                        {
                          int32x4_t v27 = v186[-1];
                          int32x4_t v28 = *v186;
                          v187[-1] = v27;
                          *__int32 v187 = v28;
                          v187 += 2;
                          v186 += 2;
                          v188 -= 32;
                        }
                        while (v188);
                        if (v169 == v173) {
                          goto LABEL_181;
                        }
                        uint64_t v185 = v169 & 0x1FFFFFFE0;
                        if ((v169 & 0x18) == 0)
                        {
                          v181 += v173;
                          v182 += v173;
                          int v184 = v169 & 0xFFFFFFE0;
                          goto LABEL_198;
                        }
                      }
                      else
                      {
                        uint64_t v185 = 0;
                      }
                      v182 += v174;
                      uint64_t v189 = v185 - v174;
                      uint64_t v190 = (uint64_t *)((char *)v180->i64 + v185);
                      uint64_t v191 = &v179[v185];
                      do
                      {
                        uint64_t v192 = *v190++;
                        *(void *)uint64_t v191 = v192;
                        v191 += 8;
                        v189 += 8;
                      }
                      while (v189);
                      if (v169 != v174)
                      {
                        v181 += v174;
                        int v184 = v169 & 0xFFFFFFF8;
                        goto LABEL_198;
                      }
                    }
LABEL_181:
                    ++v162;
                    v177 += 2;
                    unsigned int v178 = (int32x4_t *)((char *)v178 + v167);
                    unsigned int v180 = (int32x4_t *)((char *)v180 + v167);
                    v179 += 32;
                    if (v162 == v157) {
                      goto LABEL_201;
                    }
                    continue;
                  }
                }
                int32x2_t v158 = (int32x2_t)v155[1];
                int32x2_t v159 = (int32x2_t)v155[2];
                int32x2_t v160 = (int32x2_t)v155[3];
                int32x2_t v161 = vzip2_s32((int32x2_t)*v155, v158);
                int32x2_t v274 = vzip1_s32((int32x2_t)*v155, v158);
                int32x2_t v278 = v161;
                int32x2_t v282 = vzip1_s32(v159, v160);
                int32x2_t v286 = vzip2_s32(v159, v160);
                uint64_t v157 = v250;
                if (v250) {
                  goto LABEL_167;
                }
              }
LABEL_201:
              uint64_t v196 = 0;
              unsigned int v197 = v244;
              float64x2_t v198 = v245;
              int v199 = v252;
              int v200 = v253;
              unsigned int v38 = v226;
              int v32 = v25;
              unsigned int v31 = a7;
              uint64_t v30 = v228;
              uint64_t v36 = 4 * a11;
              do
              {
                uint64_t v203 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,2u>::kSubblockPositions[v196 + 1];
                uint64_t v204 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,2u>::kSubblockPositions[v196];
                unsigned int v205 = (v199 - 4 * v204) & ~((v199 - 4 * (int)v204) >> 31);
                if (v205 >= 4) {
                  unsigned int v205 = 4;
                }
                unsigned int v206 = (v200 - 4 * v203) & ~((v200 - 4 * (int)v203) >> 31);
                if (v206 >= 4) {
                  unsigned int v206 = 4;
                }
                if (v205) {
                  BOOL v207 = v206 == 0;
                }
                else {
                  BOOL v207 = 1;
                }
                if (v207)
                {
                  char v202 = 0;
                }
                else
                {
                  unsigned int v201 = &v255 + 16 * v203 + v204;
                  *(int32x2_t *)v27.i8 = *v201;
                  *(int32x2_t *)v28.i8 = v201[4];
                  *(int32x2_t *)v34.i8 = v201[8];
                  *(int32x2_t *)v29.i8 = v201[12];
                  int32x4_t v27 = vzip1q_s32(v27, v28);
                  int32x4_t v28 = vzip1q_s32(v34, v29);
                  *unsigned int v197 = v27;
                  v197[1] = v28;
                  v197 += 2;
                  char v202 = 31;
                }
                *v198++ = v202;
                v196 += 2;
              }
              while (v196 != 16);
              goto LABEL_93;
            }
            uint64_t v87 = (int32x4_t *)v254;
          }
          else
          {
            uint64_t v87 = v77;
            uint64_t v79 = 2 * a11;
            if (v78) {
              goto LABEL_91;
            }
          }
          uint64_t v97 = 0;
          int32x2_t v98 = v87;
          do
          {
            uint64_t v102 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,2u>::kSubblockPositions[v97 + 1];
            uint64_t v103 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,2u>::kSubblockPositions[v97];
            unsigned int v104 = (v46 - 4 * v103) & ~((int)(v46 - 4 * v103) >> 31);
            if (v104 >= 4) {
              unsigned int v104 = 4;
            }
            unsigned int v105 = (v41 - 4 * v102) & ~((int)(v41 - 4 * v102) >> 31);
            if (v105 >= 4) {
              unsigned int v105 = 4;
            }
            if (v104) {
              BOOL v106 = v105 == 0;
            }
            else {
              BOOL v106 = 1;
            }
            if (v106)
            {
              char v101 = 0;
            }
            else
            {
              int32x2_t v99 = (uint64_t *)(v76 + v36 * v102 + 8 * v103);
              v27.i64[0] = *v99;
              v28.i64[0] = *(uint64_t *)((char *)v99 + a11);
              int32x4_t v100 = (uint64_t *)((char *)v99 + v79);
              v34.i64[0] = *v100;
              v29.i64[0] = *(uint64_t *)((char *)v100 + a11);
              int32x4_t v27 = vzip1q_s32(v27, v28);
              int32x4_t v28 = vzip1q_s32(v34, v29);
              *int32x2_t v98 = v27;
              v98[1] = v28;
              v98 += 2;
              char v101 = 31;
            }
            *v75++ = v101;
            v97 += 2;
          }
          while (v97 != 16);
LABEL_93:
          if (v32)
          {
            int32x4_t v88 = *v87;
            int32x4_t v89 = v87[1];
            int32x4_t v90 = v87[3];
            v77[2] = v87[2];
            v77[3] = v90;
            *int8x16_t v77 = v88;
            v77[1] = v89;
            int32x4_t v91 = v87[4];
            int32x4_t v92 = v87[5];
            int32x4_t v93 = v87[7];
            v77[6] = v87[6];
            v77[7] = v93;
            v77[4] = v91;
            v77[5] = v92;
            int32x4_t v94 = v87[8];
            int32x4_t v95 = v87[9];
            int32x4_t v96 = v87[11];
            v77[10] = v87[10];
            v77[11] = v96;
            v77[8] = v94;
            v77[9] = v95;
            int32x4_t v27 = v87[12];
            int32x4_t v28 = v87[13];
            int32x4_t v34 = v87[14];
            int32x4_t v29 = v87[15];
            v77[14] = v34;
            v77[15] = v29;
            v77[12] = v27;
            v77[13] = v28;
          }
          BOOL v22 = v40++ == v234 >> 4;
        }
        while (!v22);
        BOOL v22 = v16++ == v225;
      }
      while (!v22);
    }
  }
}

uint64_t AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, char a12)
{
  uint64_t v312 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v229 = a8;
  unsigned int v214 = a8 + a10 - 1;
  uint64_t v230 = a1;
  if (*(void *)(a1 + 168)) {
    int v17 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v17 = 0;
  }
  unsigned int v18 = a5 - 1;
  unsigned int v19 = a6 - 1;
  unsigned int v20 = a8 >> 3;
  unsigned int v213 = v214 >> 3;
  BOOL v21 = (v17 & 0xD00) == 0 || v17 == 768;
  int v22 = v17 & 0xE00;
  int v24 = !v21 && v22 != 1024;
  int v234 = v24;
  uint64_t result = a1;
  if (*(unsigned char *)(a1 + 232))
  {
    unsigned int v26 = *(unsigned __int8 *)(a1 + 255);
    unsigned int v27 = *(unsigned __int8 *)(a1 + 254);
    char v28 = __clz(v18);
    if (1 << v26 >= a6 || a5 >> v27)
    {
      if (!(a6 >> v26) && 1 << v27 < a5)
      {
        if (a6 < 2) {
          unsigned int v31 = 0;
        }
        else {
          unsigned int v31 = __clz(~(-1 << -(char)__clz(v19))) - 32;
        }
        v27 += v26 + v31;
        unsigned int v26 = -v31;
      }
    }
    else
    {
      unsigned int v29 = 32 - __clz(~(-1 << -v28));
      unsigned int v30 = v27 + v26;
      if (a5 < 2) {
        unsigned int v29 = 0;
      }
      unsigned int v26 = v30 - v29;
      unsigned int v27 = v29;
    }
    if (a5 < 2)
    {
      if (v27) {
        goto LABEL_27;
      }
    }
    else if (32 - __clz(~(-1 << -v28)) < v27)
    {
LABEL_27:
      BOOL v224 = 0;
LABEL_32:
      unsigned int v221 = v27 - 4;
      unsigned int v218 = v26 - 3;
      int v33 = -1 << *(unsigned char *)(*(void *)(a1 + 208) + 48);
      unsigned int v211 = (((~v33 + a5) & v33) + ~(-1 << v27)) >> v27;
      goto LABEL_33;
    }
    if (a6 < 2) {
      unsigned int v32 = 0;
    }
    else {
      unsigned int v32 = 32 - __clz(~(-1 << -(char)__clz(v19)));
    }
    BOOL v224 = v32 >= v26;
    goto LABEL_32;
  }
  BOOL v224 = 0;
  unsigned int v211 = 0;
  unsigned int v218 = 0;
  unsigned int v221 = 0;
LABEL_33:
  if (v20 <= v213)
  {
    unsigned int v223 = a7 + a9 - 1;
    unsigned int v210 = a7 >> 4;
    if (a7 >> 4 <= v223 >> 4)
    {
      unsigned int v232 = v18 >> 4;
      unsigned int v209 = v19 >> 3;
      int v231 = (v18 & 0xF) + 1;
      int v208 = (v19 & 7) + 1;
      int v207 = ~(-1 << v218);
      uint32x2_t v34 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0xF00000007);
      int8x8_t v35 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32(vadd_s32((int32x2_t)vshl_u32(v34, (uint32x2_t)0xFFFFFFFCFFFFFFFDLL), (int32x2_t)-1))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x2000000010, v34));
      __int32 v219 = v35.i32[0] | v35.i32[1];
      int8x8_t v217 = v35;
      BOOL v216 = v35.i32[0] != 0;
      BOOL v215 = v35.i32[1] != 0;
      unsigned int v222 = a7;
      do
      {
        unsigned int v36 = (8 * v20) | 7;
        if (8 * v20 <= v229) {
          int v37 = v229;
        }
        else {
          int v37 = 8 * v20;
        }
        if (v214 < v36) {
          unsigned int v36 = v214;
        }
        int v220 = v37 - 8 * v20;
        int v228 = v36 - v37 + 1;
        unsigned int v38 = v210;
        int v39 = v208;
        if (v20 != v209) {
          int v39 = 8;
        }
        unsigned int v235 = v39;
        int v40 = v20 & v207;
        uint64_t v227 = a3 + (v37 - v229) * a11;
        do
        {
          unsigned int v41 = 16 * v38;
          unsigned int v42 = 16 * (v38 + 1) - 1;
          if (16 * v38 <= a7) {
            int v43 = a7;
          }
          else {
            int v43 = 16 * v38;
          }
          if (v223 < v42) {
            unsigned int v42 = v223;
          }
          int v44 = v42 - v43 + 1;
          if (v38 == v232) {
            unsigned int v45 = v231;
          }
          else {
            unsigned int v45 = 16;
          }
          BOOL v46 = 1;
          if (8 * v20 >= v229 && v41 >= a7)
          {
            int v47 = v231;
            if (v38 != v232) {
              int v47 = 16;
            }
            BOOL v46 = v44 != v47 || v228 != v235;
          }
          if (v224)
          {
            if (v221 | v218)
            {
              int v49 = 0;
              uint64_t v50 = 0;
              int v51 = 1;
              BOOL v52 = v218 != 0;
              BOOL v53 = v221 != 0;
              unsigned int v54 = v218;
              unsigned int v55 = v221;
              do
              {
                --v54;
                if (v52) {
                  v50 |= (unint64_t)(v40 & v51) << v49++;
                }
                else {
                  unsigned int v54 = 0;
                }
                --v55;
                if (v53) {
                  v50 |= (unint64_t)(v38 & ~(-1 << v221) & v51) << v49++;
                }
                else {
                  unsigned int v55 = 0;
                }
                v51 *= 2;
                --v49;
                BOOL v53 = v55 != 0;
                BOOL v52 = v54 != 0;
              }
              while (v55 | v54);
            }
            else
            {
              uint64_t v50 = 0;
            }
            uint64_t v63 = *(void *)(result + 320) * ((v38 >> v221) + (v20 >> v218) * v211) + (v50 << 10);
          }
          else
          {
            if (v219)
            {
              int v56 = 0;
              uint64_t v57 = 0;
              int v58 = 1;
              BOOL v59 = v216;
              BOOL v60 = v215;
              __int32 v61 = v217.i32[0];
              __int32 v62 = v217.i32[1];
              do
              {
                --v61;
                if (v59) {
                  v57 |= (unint64_t)(v58 & v20) << v56++;
                }
                else {
                  __int32 v61 = 0;
                }
                --v62;
                if (v60) {
                  v57 |= (unint64_t)(v58 & v38) << v56++;
                }
                else {
                  __int32 v62 = 0;
                }
                v58 *= 2;
                --v56;
                BOOL v60 = v62 != 0;
                BOOL v59 = v61 != 0;
              }
              while (v62 | v61);
            }
            else
            {
              uint64_t v57 = 0;
            }
            uint64_t v63 = v57 << 10;
          }
          unsigned int v64 = *(_DWORD *)(result + 128) >> (*(unsigned char *)(result + 144) + a12);
          if (v64 <= 1) {
            unsigned int v64 = 1;
          }
          unsigned int v65 = v64 + 15;
          if (v65 < 0x20) {
            unsigned int v66 = 0;
          }
          else {
            unsigned int v66 = 32 - __clz(~(-1 << -(char)__clz((v65 >> 4) - 1)));
          }
          unsigned int v67 = *(_DWORD *)(result + 132) >> (*(unsigned char *)(result + 144) + a12);
          if (v67 <= 1) {
            unsigned int v67 = 1;
          }
          unsigned int v68 = v67 + 7;
          if (v68 < 0x10)
          {
            unsigned int v69 = 0;
            if (!v66)
            {
LABEL_109:
              uint64_t v71 = 0;
              goto LABEL_110;
            }
          }
          else
          {
            unsigned int v69 = 32 - __clz(~(-1 << -(char)__clz((v68 >> 3) - 1)));
            if (!(v69 | v66)) {
              goto LABEL_109;
            }
          }
          int v70 = 0;
          uint64_t v71 = 0;
          BOOL v72 = v66 != 0;
          BOOL v73 = v69 != 0;
          int v74 = 1;
          do
          {
            --v66;
            if (v72) {
              v71 |= (unint64_t)(v74 & v38) << v70++;
            }
            else {
              unsigned int v66 = 0;
            }
            --v69;
            if (v73) {
              v71 |= (unint64_t)(v74 & v20) << v70++;
            }
            else {
              unsigned int v69 = 0;
            }
            v74 *= 2;
            --v70;
            BOOL v73 = v69 != 0;
            BOOL v72 = v66 != 0;
          }
          while (v69 | v66);
LABEL_110:
          unsigned int v75 = v43 - a7;
          int v76 = v45 < 0x10 || v46;
          int8x16_t v77 = (char *)(a4 + 8 * v71);
          unint64_t v78 = v227 + 8 * v75;
          uint64_t v79 = (float32x4_t *)(a2 + v63);
          if (v235 < 8) {
            int v80 = 1;
          }
          else {
            int v80 = v76;
          }
          __int32 v233 = v79;
          if (v234)
          {
            int32x4_t v81 = (float32x4_t *)__dst;
            if (!v80) {
              goto LABEL_122;
            }
            int32x4_t v82 = (char *)(a4 + 8 * v71);
            int v83 = v44;
            char v84 = v45;
            memcpy(__dst, v79, sizeof(__dst));
            unsigned int v41 = 16 * v38;
            LOBYTE(v45) = v84;
            int v44 = v83;
            int8x16_t v77 = v82;
            int v40 = v20 & v207;
            uint64_t result = v230;
          }
          else
          {
            int32x4_t v81 = v79;
            if (!v80)
            {
LABEL_122:
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock(v78, a11, (unint64_t)v81, v77, v45, v235);
              goto LABEL_123;
            }
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE13ELj2ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = result;
          uint64_t v237 = v81;
          unsigned __int8 v245 = v45;
          unsigned __int8 v246 = v235;
          unsigned int v241 = v220;
          unsigned int v242 = v43 - v41;
          uint64_t v238 = v77;
          unint64_t v239 = v78;
          uint64_t v240 = a11;
          unsigned int v243 = v228;
          unsigned int v244 = v44;
          if (v46)
          {
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(result + 8) + 7384), block);
LABEL_123:
            a7 = v222;
            unsigned int v85 = v38 + 1;
            goto LABEL_215;
          }
          unsigned int v86 = *v77;
          if (v86 == 127)
          {
            float32x4_t v89 = v81[1];
            float32x4_t v90 = v81[2];
            float32x4_t v91 = v81[3];
            float32x4_t v92 = v81[4];
            float32x4_t v93 = v81[5];
            float32x4_t v94 = v81[6];
            float32x4_t v95 = v81[7];
            int8x16_t v248 = *(int8x16_t *)v81;
            float32x4_t v249 = v90;
            float32x4_t v256 = v89;
            float32x4_t v257 = v91;
            float32x4_t v264 = v92;
            float32x4_t v265 = v94;
            float32x4_t v272 = v93;
            float32x4_t v273 = v95;
            uint64_t v87 = 128;
          }
          else if (v86 == 3)
          {
            float32x4_t v88 = vld1q_dup_f32(v81->f32);
            int8x16_t v248 = (int8x16_t)v88;
            float32x4_t v249 = v88;
            float32x4_t v256 = v88;
            float32x4_t v257 = v88;
            float32x4_t v264 = v88;
            float32x4_t v265 = v88;
            float32x4_t v272 = v88;
            float32x4_t v273 = v88;
            uint64_t v87 = 4;
          }
          else if (*v77)
          {
            uint64_t v87 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v248, 128, (uint64_t)v81, v86);
          }
          else
          {
            uint64_t v87 = 0;
            float32x4_t v249 = 0u;
            int8x16_t v248 = 0u;
            float32x4_t v256 = 0u;
            float32x4_t v257 = 0u;
            float32x4_t v264 = 0u;
            float32x4_t v265 = 0u;
            float32x4_t v272 = 0u;
            float32x4_t v273 = 0u;
          }
          uint64_t v96 = (uint64_t)v81 + v87;
          unsigned int v97 = v77[1];
          if (v97 == 127)
          {
            float32x4_t v100 = *(float32x4_t *)(v96 + 16);
            float32x4_t v101 = *(float32x4_t *)(v96 + 32);
            float32x4_t v102 = *(float32x4_t *)(v96 + 48);
            float32x4_t v103 = *(float32x4_t *)(v96 + 64);
            float32x4_t v104 = *(float32x4_t *)(v96 + 80);
            float32x4_t v105 = *(float32x4_t *)(v96 + 96);
            float32x4_t v106 = *(float32x4_t *)(v96 + 112);
            int8x16_t v250 = *(int8x16_t *)v96;
            float32x4_t v251 = v101;
            float32x4_t v258 = v100;
            float32x4_t v259 = v102;
            float32x4_t v266 = v103;
            float32x4_t v267 = v105;
            float32x4_t v274 = v104;
            float32x4_t v275 = v106;
            uint64_t v98 = 128;
            unsigned int v85 = v38 + 1;
          }
          else
          {
            unsigned int v85 = v38 + 1;
            if (v97 == 3)
            {
              float32x4_t v99 = vld1q_dup_f32((const float *)v96);
              int8x16_t v250 = (int8x16_t)v99;
              float32x4_t v251 = v99;
              float32x4_t v258 = v99;
              float32x4_t v259 = v99;
              float32x4_t v266 = v99;
              float32x4_t v267 = v99;
              float32x4_t v274 = v99;
              float32x4_t v275 = v99;
              uint64_t v98 = 4;
            }
            else if (v77[1])
            {
              uint64_t v98 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v250, 128, v96, v97);
            }
            else
            {
              uint64_t v98 = 0;
              int8x16_t v250 = 0u;
              float32x4_t v251 = 0u;
              float32x4_t v258 = 0u;
              float32x4_t v259 = 0u;
              float32x4_t v266 = 0u;
              float32x4_t v267 = 0u;
              float32x4_t v274 = 0u;
              float32x4_t v275 = 0u;
            }
          }
          uint64_t v107 = v96 + v98;
          unsigned int v108 = v77[2];
          if (v108 == 127)
          {
            float32x4_t v111 = *(float32x4_t *)(v107 + 16);
            float32x4_t v112 = *(float32x4_t *)(v107 + 32);
            float32x4_t v113 = *(float32x4_t *)(v107 + 48);
            float32x4_t v114 = *(float32x4_t *)(v107 + 64);
            float32x4_t v115 = *(float32x4_t *)(v107 + 80);
            float32x4_t v116 = *(float32x4_t *)(v107 + 96);
            float32x4_t v117 = *(float32x4_t *)(v107 + 112);
            int8x16_t v280 = *(int8x16_t *)v107;
            float32x4_t v281 = v112;
            float32x4_t v288 = v111;
            float32x4_t v289 = v113;
            float32x4_t v296 = v114;
            float32x4_t v297 = v116;
            float32x4_t v304 = v115;
            float32x4_t v305 = v117;
            uint64_t v109 = 128;
          }
          else if (v108 == 3)
          {
            float32x4_t v110 = vld1q_dup_f32((const float *)v107);
            int8x16_t v280 = (int8x16_t)v110;
            float32x4_t v281 = v110;
            float32x4_t v288 = v110;
            float32x4_t v289 = v110;
            float32x4_t v296 = v110;
            float32x4_t v297 = v110;
            float32x4_t v304 = v110;
            float32x4_t v305 = v110;
            uint64_t v109 = 4;
          }
          else if (v77[2])
          {
            uint64_t v109 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v280, 128, v107, v108);
          }
          else
          {
            uint64_t v109 = 0;
            int8x16_t v280 = 0u;
            float32x4_t v281 = 0u;
            float32x4_t v288 = 0u;
            float32x4_t v289 = 0u;
            float32x4_t v296 = 0u;
            float32x4_t v297 = 0u;
            float32x4_t v304 = 0u;
            float32x4_t v305 = 0u;
          }
          uint64_t v118 = v107 + v109;
          unsigned int v119 = v77[3];
          if (v119 == 127)
          {
            float32x4_t v122 = *(float32x4_t *)(v118 + 16);
            float32x4_t v123 = *(float32x4_t *)(v118 + 32);
            float32x4_t v124 = *(float32x4_t *)(v118 + 48);
            float32x4_t v125 = *(float32x4_t *)(v118 + 64);
            float32x4_t v126 = *(float32x4_t *)(v118 + 80);
            float32x4_t v127 = *(float32x4_t *)(v118 + 96);
            float32x4_t v128 = *(float32x4_t *)(v118 + 112);
            int8x16_t v282 = *(int8x16_t *)v118;
            float32x4_t v283 = v123;
            float32x4_t v290 = v122;
            float32x4_t v291 = v124;
            float32x4_t v298 = v125;
            float32x4_t v299 = v127;
            float32x4_t v306 = v126;
            float32x4_t v307 = v128;
            uint64_t v120 = 128;
          }
          else if (v119 == 3)
          {
            float32x4_t v121 = vld1q_dup_f32((const float *)v118);
            int8x16_t v282 = (int8x16_t)v121;
            float32x4_t v283 = v121;
            float32x4_t v290 = v121;
            float32x4_t v291 = v121;
            float32x4_t v298 = v121;
            float32x4_t v299 = v121;
            float32x4_t v306 = v121;
            float32x4_t v307 = v121;
            uint64_t v120 = 4;
          }
          else if (v77[3])
          {
            uint64_t v120 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v282, 128, v118, v119);
          }
          else
          {
            uint64_t v120 = 0;
            int8x16_t v282 = 0u;
            float32x4_t v283 = 0u;
            float32x4_t v290 = 0u;
            float32x4_t v291 = 0u;
            float32x4_t v298 = 0u;
            float32x4_t v299 = 0u;
            float32x4_t v306 = 0u;
            float32x4_t v307 = 0u;
          }
          uint64_t v129 = v118 + v120;
          unsigned int v130 = v77[4];
          if (v130 == 127)
          {
            float32x4_t v133 = *(float32x4_t *)(v129 + 16);
            float32x4_t v134 = *(float32x4_t *)(v129 + 32);
            float32x4_t v135 = *(float32x4_t *)(v129 + 48);
            float32x4_t v136 = *(float32x4_t *)(v129 + 64);
            float32x4_t v137 = *(float32x4_t *)(v129 + 80);
            float32x4_t v138 = *(float32x4_t *)(v129 + 96);
            float32x4_t v139 = *(float32x4_t *)(v129 + 112);
            int8x16_t v252 = *(int8x16_t *)v129;
            float32x4_t v253 = v134;
            float32x4_t v260 = v133;
            float32x4_t v261 = v135;
            float32x4_t v268 = v136;
            float32x4_t v269 = v138;
            float32x4_t v276 = v137;
            float32x4_t v277 = v139;
            uint64_t v131 = 128;
          }
          else if (v130 == 3)
          {
            float32x4_t v132 = vld1q_dup_f32((const float *)v129);
            int8x16_t v252 = (int8x16_t)v132;
            float32x4_t v253 = v132;
            float32x4_t v260 = v132;
            float32x4_t v261 = v132;
            float32x4_t v268 = v132;
            float32x4_t v269 = v132;
            float32x4_t v276 = v132;
            float32x4_t v277 = v132;
            uint64_t v131 = 4;
          }
          else if (v77[4])
          {
            uint64_t v131 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v252, 128, v129, v130);
          }
          else
          {
            uint64_t v131 = 0;
            int8x16_t v252 = 0u;
            float32x4_t v253 = 0u;
            float32x4_t v260 = 0u;
            float32x4_t v261 = 0u;
            float32x4_t v268 = 0u;
            float32x4_t v269 = 0u;
            float32x4_t v276 = 0u;
            float32x4_t v277 = 0u;
          }
          uint64_t v140 = v129 + v131;
          unsigned int v141 = v77[5];
          if (v141 == 127)
          {
            float32x4_t v144 = *(float32x4_t *)(v140 + 16);
            float32x4_t v145 = *(float32x4_t *)(v140 + 32);
            float32x4_t v146 = *(float32x4_t *)(v140 + 48);
            float32x4_t v147 = *(float32x4_t *)(v140 + 64);
            float32x4_t v148 = *(float32x4_t *)(v140 + 80);
            float32x4_t v149 = *(float32x4_t *)(v140 + 96);
            float32x4_t v150 = *(float32x4_t *)(v140 + 112);
            int8x16_t v254 = *(int8x16_t *)v140;
            float32x4_t v255 = v145;
            float32x4_t v262 = v144;
            float32x4_t v263 = v146;
            float32x4_t v270 = v147;
            float32x4_t v271 = v149;
            float32x4_t v278 = v148;
            float32x4_t v279 = v150;
            uint64_t v142 = 128;
          }
          else if (v141 == 3)
          {
            float32x4_t v143 = vld1q_dup_f32((const float *)v140);
            int8x16_t v254 = (int8x16_t)v143;
            float32x4_t v255 = v143;
            float32x4_t v262 = v143;
            float32x4_t v263 = v143;
            float32x4_t v270 = v143;
            float32x4_t v271 = v143;
            float32x4_t v278 = v143;
            float32x4_t v279 = v143;
            uint64_t v142 = 4;
          }
          else if (v77[5])
          {
            uint64_t v142 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v254, 128, v140, v141);
          }
          else
          {
            uint64_t v142 = 0;
            int8x16_t v254 = 0u;
            float32x4_t v255 = 0u;
            float32x4_t v262 = 0u;
            float32x4_t v263 = 0u;
            float32x4_t v270 = 0u;
            float32x4_t v271 = 0u;
            float32x4_t v278 = 0u;
            float32x4_t v279 = 0u;
          }
          uint64_t v151 = v140 + v142;
          unsigned int v152 = v77[6];
          if (v152 == 127)
          {
            float32x4_t v155 = *(float32x4_t *)(v151 + 16);
            float32x4_t v156 = *(float32x4_t *)(v151 + 32);
            float32x4_t v157 = *(float32x4_t *)(v151 + 48);
            float32x4_t v158 = *(float32x4_t *)(v151 + 64);
            float32x4_t v159 = *(float32x4_t *)(v151 + 80);
            float32x4_t v160 = *(float32x4_t *)(v151 + 96);
            float32x4_t v161 = *(float32x4_t *)(v151 + 112);
            int8x16_t v284 = *(int8x16_t *)v151;
            float32x4_t v285 = v156;
            float32x4_t v292 = v155;
            float32x4_t v293 = v157;
            float32x4_t v300 = v158;
            float32x4_t v301 = v160;
            float32x4_t v308 = v159;
            float32x4_t v309 = v161;
            uint64_t v153 = 128;
          }
          else if (v152 == 3)
          {
            float32x4_t v154 = vld1q_dup_f32((const float *)v151);
            int8x16_t v284 = (int8x16_t)v154;
            float32x4_t v285 = v154;
            float32x4_t v292 = v154;
            float32x4_t v293 = v154;
            float32x4_t v300 = v154;
            float32x4_t v301 = v154;
            float32x4_t v308 = v154;
            float32x4_t v309 = v154;
            uint64_t v153 = 4;
          }
          else if (v77[6])
          {
            uint64_t v153 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v284, 128, v151, v152);
          }
          else
          {
            uint64_t v153 = 0;
            int8x16_t v284 = 0u;
            float32x4_t v285 = 0u;
            float32x4_t v292 = 0u;
            float32x4_t v293 = 0u;
            float32x4_t v300 = 0u;
            float32x4_t v301 = 0u;
            float32x4_t v308 = 0u;
            float32x4_t v309 = 0u;
          }
          uint64_t v162 = v151 + v153;
          unsigned int v163 = v77[7];
          if (v163 == 127)
          {
            float32x4_t v166 = *(float32x4_t *)(v162 + 16);
            float32x4_t v167 = *(float32x4_t *)(v162 + 32);
            float32x4_t v168 = *(float32x4_t *)(v162 + 48);
            float32x4_t v169 = *(float32x4_t *)(v162 + 80);
            float32x4_t v170 = *(float32x4_t *)(v162 + 96);
            float32x4_t v171 = *(float32x4_t *)(v162 + 112);
            float32x4_t v172 = *(float32x4_t *)(v162 + 64);
            int8x16_t v286 = *(int8x16_t *)v162;
            float32x4_t v287 = v167;
            float32x4_t v294 = v166;
            float32x4_t v295 = v168;
            float32x4_t v302 = v172;
            float32x4_t v303 = v170;
            float32x4_t v310 = v169;
            float32x4_t v311 = v171;
            a7 = v222;
            uint64_t v164 = v243;
            if (!v243) {
              goto LABEL_214;
            }
          }
          else
          {
            a7 = v222;
            if (v163 == 3)
            {
              float32x4_t v165 = vld1q_dup_f32((const float *)v162);
              int8x16_t v286 = (int8x16_t)v165;
              float32x4_t v287 = v165;
              float32x4_t v294 = v165;
              float32x4_t v295 = v165;
              float32x4_t v302 = v165;
              float32x4_t v303 = v165;
              float32x4_t v310 = v165;
              float32x4_t v311 = v165;
              uint64_t v164 = v243;
              if (!v243) {
                goto LABEL_214;
              }
            }
            else if (v163)
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v286, 128, v162, v163);
              uint64_t v164 = v243;
              if (!v243) {
                goto LABEL_214;
              }
            }
            else
            {
              int8x16_t v286 = 0u;
              float32x4_t v287 = 0u;
              float32x4_t v294 = 0u;
              float32x4_t v295 = 0u;
              float32x4_t v302 = 0u;
              float32x4_t v303 = 0u;
              float32x4_t v310 = 0u;
              float32x4_t v311 = 0u;
              uint64_t v164 = v243;
              if (!v243) {
                goto LABEL_214;
              }
            }
          }
          if (v244)
          {
            uint64_t v173 = 0;
            unint64_t v174 = (unint64_t)v241 << 7;
            uint64_t v175 = 8 * v242;
            char v176 = &v248.i8[v174 + v175];
            unint64_t v177 = v239;
            uint64_t v178 = v240;
            unint64_t v179 = 8 * v244;
            if (v179 <= 1) {
              unint64_t v180 = 1;
            }
            else {
              unint64_t v180 = 8 * v244;
            }
            unint64_t v181 = v174 + v175;
            unsigned int v182 = &v248.i8[v174 + v175];
            if (v180) {
              BOOL v183 = (v180 - 1) >> 32 == 0;
            }
            else {
              BOOL v183 = 0;
            }
            char v184 = !v183;
            uint64_t v185 = v180 & 0x7FFFFFFE0;
            uint64_t v186 = v180 & 0x7FFFFFFF8;
            __int32 v187 = (char *)&v249 + v181;
            uint64_t v188 = (long long *)(v239 + 16);
            uint64_t v189 = v176;
            unint64_t v190 = v239;
            do
            {
              uint64_t v191 = (char *)(v177 + v178 * v173);
              uint64_t v192 = &v176[128 * v173];
              if ((unint64_t)(&v182[128 * v173] - v191) < 0x20) {
                char v193 = 1;
              }
              else {
                char v193 = v184;
              }
              if (v193)
              {
                int v194 = 0;
                goto LABEL_211;
              }
              if (v180 >= 0x20)
              {
                uint64_t v196 = v188;
                unsigned int v197 = v187;
                uint64_t v198 = v180 & 0x7FFFFFFE0;
                do
                {
                  long long v199 = *v196;
                  *(v197 - 1) = *(v196 - 1);
                  *unsigned int v197 = v199;
                  v197 += 2;
                  v196 += 2;
                  v198 -= 32;
                }
                while (v198);
                if (v180 == v185) {
                  goto LABEL_194;
                }
                uint64_t v195 = v180 & 0x7FFFFFFE0;
                if ((v180 & 0x18) == 0)
                {
                  v191 += v185;
                  v192 += v185;
                  int v194 = v180 & 0xFFFFFFE0;
                  goto LABEL_211;
                }
              }
              else
              {
                uint64_t v195 = 0;
              }
              v192 += v186;
              unint64_t v200 = v195 - (v180 & 0x7FFFFFFF8);
              unsigned int v201 = (uint64_t *)(v190 + v195);
              char v202 = &v189[v195];
              do
              {
                uint64_t v203 = *v201++;
                *(void *)char v202 = v203;
                v202 += 8;
                v200 += 8;
              }
              while (v200);
              if (v180 == v186) {
                goto LABEL_194;
              }
              v191 += v186;
              int v194 = v180 & 0xFFFFFFF8;
LABEL_211:
              unsigned int v204 = v194 + 1;
              do
              {
                char v205 = *v191++;
                *v192++ = v205;
              }
              while (v179 > v204++);
LABEL_194:
              ++v173;
              v187 += 128;
              uint64_t v188 = (long long *)((char *)v188 + v178);
              v190 += v178;
              v189 += 128;
            }
            while (v173 != v164);
          }
LABEL_214:
          AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)&v248, 128, (unint64_t)v237, v238, v245, v246);
LABEL_215:
          if (v234) {
            memcpy(v233, v81, 0x400uLL);
          }
          BOOL v21 = v38 == v223 >> 4;
          unsigned int v38 = v85;
          uint64_t result = v230;
        }
        while (!v21);
        BOOL v21 = v20++ == v213;
      }
      while (!v21);
    }
  }
  return result;
}

uint64_t AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, char a12)
{
  uint64_t v360 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v279 = a8;
  unsigned int v258 = a8 + a10 - 1;
  uint64_t v280 = a1;
  if (*(void *)(a1 + 168)) {
    int v17 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v17 = 0;
  }
  unsigned int v18 = a5 - 1;
  unsigned int v19 = a6 - 1;
  unsigned int v20 = a8 >> 3;
  unsigned int v257 = v258 >> 3;
  BOOL v21 = (v17 & 0xD00) == 0 || v17 == 768;
  int v22 = v17 & 0xE00;
  int v24 = !v21 && v22 != 1024;
  int v283 = v24;
  uint64_t result = a1;
  if (*(unsigned char *)(a1 + 232))
  {
    unsigned int v26 = *(unsigned __int8 *)(a1 + 255);
    unsigned int v27 = *(unsigned __int8 *)(a1 + 254);
    char v28 = __clz(v18);
    if (1 << v26 >= a6 || a5 >> v27)
    {
      if (!(a6 >> v26) && 1 << v27 < a5)
      {
        if (a6 < 2) {
          unsigned int v31 = 0;
        }
        else {
          unsigned int v31 = __clz(~(-1 << -(char)__clz(v19))) - 32;
        }
        v27 += v26 + v31;
        unsigned int v26 = -v31;
      }
    }
    else
    {
      unsigned int v29 = 32 - __clz(~(-1 << -v28));
      unsigned int v30 = v27 + v26;
      if (a5 < 2) {
        unsigned int v29 = 0;
      }
      unsigned int v26 = v30 - v29;
      unsigned int v27 = v29;
    }
    if (a5 < 2)
    {
      if (v27) {
        goto LABEL_27;
      }
    }
    else if (32 - __clz(~(-1 << -v28)) < v27)
    {
LABEL_27:
      BOOL v272 = 0;
LABEL_32:
      unsigned int v268 = v27 - 4;
      unsigned int v264 = v26 - 3;
      int v33 = -1 << *(unsigned char *)(*(void *)(a1 + 208) + 48);
      unsigned int v255 = (((~v33 + a5) & v33) + ~(-1 << v27)) >> v27;
      goto LABEL_33;
    }
    if (a6 < 2) {
      unsigned int v32 = 0;
    }
    else {
      unsigned int v32 = 32 - __clz(~(-1 << -(char)__clz(v19)));
    }
    BOOL v272 = v32 >= v26;
    goto LABEL_32;
  }
  BOOL v272 = 0;
  unsigned int v255 = 0;
  unsigned int v264 = 0;
  unsigned int v268 = 0;
LABEL_33:
  if (v20 <= v257)
  {
    unsigned int v271 = a7 + a9 - 1;
    unsigned int v254 = a7 >> 4;
    if (a7 >> 4 <= v271 >> 4)
    {
      unsigned int v282 = v18 >> 4;
      unsigned int v253 = v19 >> 3;
      int v281 = (v18 & 0xF) + 1;
      int v252 = (v19 & 7) + 1;
      int v251 = ~(-1 << v264);
      uint32x2_t v34 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0xF00000007);
      int8x8_t v35 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32(vadd_s32((int32x2_t)vshl_u32(v34, (uint32x2_t)0xFFFFFFFCFFFFFFFDLL), (int32x2_t)-1))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x2000000010, v34));
      __int32 v265 = v35.i32[0] | v35.i32[1];
      int8x8_t v263 = v35;
      BOOL v262 = v35.i32[0] != 0;
      BOOL v261 = v35.i32[1] != 0;
      uint64_t v36 = a11;
      uint64_t v37 = 4 * a11;
      uint64_t v38 = 2 * a11;
      unsigned int v270 = a7;
      do
      {
        unsigned int v39 = (8 * v20) | 7;
        if (8 * v20 <= v279) {
          int v40 = v279;
        }
        else {
          int v40 = 8 * v20;
        }
        if (v258 < v39) {
          unsigned int v39 = v258;
        }
        unsigned int v278 = 8 * v20;
        int v267 = v40 - 8 * v20;
        int v277 = v39 - v40 + 1;
        unsigned int v41 = v254;
        if (v20 == v253) {
          unsigned int v42 = v252;
        }
        else {
          unsigned int v42 = 8;
        }
        int v266 = (v20 >> v264) * v255;
        int v43 = v20 & v251;
        uint64_t v275 = a3 + (v40 - v279) * v36;
        int v276 = v20 & v251;
        unsigned int v260 = v20;
        unsigned int v259 = v42;
        do
        {
          unsigned int v44 = 16 * v41;
          unsigned int v45 = 16 * (v41 + 1) - 1;
          if (16 * v41 <= a7) {
            int v46 = a7;
          }
          else {
            int v46 = 16 * v41;
          }
          if (v271 < v45) {
            unsigned int v45 = v271;
          }
          int v47 = v45 - v46 + 1;
          if (v41 == v282) {
            unsigned int v48 = v281;
          }
          else {
            unsigned int v48 = 16;
          }
          BOOL v49 = 1;
          if (v278 >= v279 && v44 >= a7)
          {
            int v50 = v281;
            if (v41 != v282) {
              int v50 = 16;
            }
            BOOL v49 = v47 != v50 || v277 != v42;
          }
          if (v272)
          {
            if (v268 | v264)
            {
              int v52 = 0;
              uint64_t v53 = 0;
              int v54 = 1;
              BOOL v55 = v264 != 0;
              BOOL v56 = v268 != 0;
              unsigned int v57 = v264;
              unsigned int v58 = v268;
              do
              {
                --v57;
                if (v55) {
                  v53 |= (unint64_t)(v43 & v54) << v52++;
                }
                else {
                  unsigned int v57 = 0;
                }
                --v58;
                if (v56) {
                  v53 |= (unint64_t)(v41 & ~(-1 << v268) & v54) << v52++;
                }
                else {
                  unsigned int v58 = 0;
                }
                v54 *= 2;
                --v52;
                BOOL v56 = v58 != 0;
                BOOL v55 = v57 != 0;
              }
              while (v58 | v57);
            }
            else
            {
              uint64_t v53 = 0;
            }
            uint64_t v66 = *(void *)(result + 320) * ((v41 >> v268) + v266) + (v53 << 10);
          }
          else
          {
            if (v265)
            {
              int v59 = 0;
              uint64_t v60 = 0;
              int v61 = 1;
              BOOL v62 = v262;
              BOOL v63 = v261;
              __int32 v64 = v263.i32[0];
              __int32 v65 = v263.i32[1];
              do
              {
                --v64;
                if (v62) {
                  v60 |= (unint64_t)(v61 & v20) << v59++;
                }
                else {
                  __int32 v64 = 0;
                }
                --v65;
                if (v63) {
                  v60 |= (unint64_t)(v61 & v41) << v59++;
                }
                else {
                  __int32 v65 = 0;
                }
                v61 *= 2;
                --v59;
                BOOL v63 = v65 != 0;
                BOOL v62 = v64 != 0;
              }
              while (v65 | v64);
            }
            else
            {
              uint64_t v60 = 0;
            }
            uint64_t v66 = v60 << 10;
          }
          unsigned int v67 = *(_DWORD *)(result + 128) >> (*(unsigned char *)(result + 144) + a12);
          if (v67 <= 1) {
            unsigned int v67 = 1;
          }
          unsigned int v68 = v67 + 15;
          if (v68 < 0x20) {
            unsigned int v69 = 0;
          }
          else {
            unsigned int v69 = 32 - __clz(~(-1 << -(char)__clz((v68 >> 4) - 1)));
          }
          unsigned int v70 = *(_DWORD *)(result + 132) >> (*(unsigned char *)(result + 144) + a12);
          if (v70 <= 1) {
            unsigned int v70 = 1;
          }
          unsigned int v71 = v70 + 7;
          if (v71 < 0x10)
          {
            unsigned int v72 = 0;
            if (!v69)
            {
LABEL_111:
              uint64_t v74 = 0;
              goto LABEL_112;
            }
          }
          else
          {
            unsigned int v72 = 32 - __clz(~(-1 << -(char)__clz((v71 >> 3) - 1)));
            if (!(v72 | v69)) {
              goto LABEL_111;
            }
          }
          int v73 = 0;
          uint64_t v74 = 0;
          BOOL v75 = v69 != 0;
          BOOL v76 = v72 != 0;
          int v77 = 1;
          do
          {
            --v69;
            if (v75) {
              v74 |= (unint64_t)(v77 & v41) << v73++;
            }
            else {
              unsigned int v69 = 0;
            }
            --v72;
            if (v76) {
              v74 |= (unint64_t)(v77 & v20) << v73++;
            }
            else {
              unsigned int v72 = 0;
            }
            v77 *= 2;
            --v73;
            BOOL v76 = v72 != 0;
            BOOL v75 = v69 != 0;
          }
          while (v72 | v69);
LABEL_112:
          unsigned int v78 = v46 - a7;
          int v79 = v48 < 0x10 || v49;
          int v80 = (char *)(a4 + 8 * v74);
          uint64_t v81 = v275 + 8 * v78;
          int32x4_t v82 = (int8x16_t *)(a2 + v66);
          if (v42 < 8) {
            int v83 = 1;
          }
          else {
            int v83 = v79;
          }
          if (v283)
          {
            if (v83)
            {
              uint64_t v84 = v36;
              int v85 = v47;
              BOOL v86 = v49;
              int v87 = v46;
              memcpy(__dst, v82, sizeof(__dst));
              int v46 = v87;
              BOOL v49 = v86;
              unsigned int v20 = v260;
              unsigned int v44 = 16 * v41;
              unsigned int v42 = v259;
              int v47 = v85;
              uint64_t v36 = v84;
              float32x4_t v88 = (int8x16_t *)__dst;
              uint64_t result = v280;
LABEL_122:
              float32x4_t v269 = v82;
              block[0] = MEMORY[0x263EF8330];
              block[1] = 3221225472;
              block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE13ELj2ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
              block[3] = &__block_descriptor_90_e5_v8__0l;
              block[4] = result;
              float32x4_t v285 = v88;
              unsigned __int8 v293 = v48;
              unsigned __int8 v294 = v42;
              unsigned int v289 = v267;
              unsigned int v290 = v46 - v44;
              int8x16_t v286 = v80;
              uint64_t v287 = v81;
              uint64_t v288 = v36;
              unsigned int v291 = v277;
              unsigned int v292 = v47;
              if (v49)
              {
                dispatch_sync(*(dispatch_queue_t *)(*(void *)(result + 8) + 7384), block);
                uint64_t result = v280;
                a7 = v270;
                uint64_t v38 = 2 * a11;
                uint64_t v37 = 4 * a11;
                int v43 = v276;
                unsigned int v89 = v41 + 1;
                goto LABEL_242;
              }
              unsigned int v110 = *v80;
              if (v110 == 127)
              {
                float32x4_t v113 = (float32x4_t)v88[1];
                float32x4_t v114 = (float32x4_t)v88[2];
                float32x4_t v115 = (float32x4_t)v88[3];
                float32x4_t v116 = (float32x4_t)v88[4];
                float32x4_t v117 = (float32x4_t)v88[5];
                float32x4_t v118 = (float32x4_t)v88[6];
                float32x4_t v119 = (float32x4_t)v88[7];
                int8x16_t v296 = *v88;
                float32x4_t v297 = v114;
                float32x4_t v304 = v113;
                float32x4_t v305 = v115;
                float32x4_t v312 = v116;
                float32x4_t v313 = v118;
                float32x4_t v320 = v117;
                float32x4_t v321 = v119;
                uint64_t v111 = 128;
              }
              else if (v110 == 3)
              {
                float32x4_t v112 = vld1q_dup_f32((const float *)v88->i32);
                int8x16_t v296 = (int8x16_t)v112;
                float32x4_t v297 = v112;
                float32x4_t v304 = v112;
                float32x4_t v305 = v112;
                float32x4_t v312 = v112;
                float32x4_t v313 = v112;
                float32x4_t v320 = v112;
                float32x4_t v321 = v112;
                uint64_t v111 = 4;
              }
              else if (*v80)
              {
                uint64_t v111 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v296, 128, (uint64_t)v88, v110);
              }
              else
              {
                uint64_t v111 = 0;
                float32x4_t v297 = 0u;
                int8x16_t v296 = 0u;
                float32x4_t v304 = 0u;
                float32x4_t v305 = 0u;
                float32x4_t v312 = 0u;
                float32x4_t v313 = 0u;
                float32x4_t v320 = 0u;
                float32x4_t v321 = 0u;
              }
              uint64_t v120 = (uint64_t)v88->i64 + v111;
              unsigned int v121 = v80[1];
              if (v121 == 127)
              {
                float32x4_t v124 = *(float32x4_t *)(v120 + 16);
                float32x4_t v125 = *(float32x4_t *)(v120 + 32);
                float32x4_t v126 = *(float32x4_t *)(v120 + 48);
                float32x4_t v127 = *(float32x4_t *)(v120 + 64);
                float32x4_t v128 = *(float32x4_t *)(v120 + 80);
                float32x4_t v129 = *(float32x4_t *)(v120 + 96);
                float32x4_t v130 = *(float32x4_t *)(v120 + 112);
                int8x16_t v298 = *(int8x16_t *)v120;
                float32x4_t v299 = v125;
                float32x4_t v306 = v124;
                float32x4_t v307 = v126;
                float32x4_t v314 = v127;
                float32x4_t v315 = v129;
                float32x4_t v322 = v128;
                float32x4_t v323 = v130;
                uint64_t v122 = 128;
              }
              else if (v121 == 3)
              {
                float32x4_t v123 = vld1q_dup_f32((const float *)v120);
                int8x16_t v298 = (int8x16_t)v123;
                float32x4_t v299 = v123;
                float32x4_t v306 = v123;
                float32x4_t v307 = v123;
                float32x4_t v314 = v123;
                float32x4_t v315 = v123;
                float32x4_t v322 = v123;
                float32x4_t v323 = v123;
                uint64_t v122 = 4;
              }
              else if (v80[1])
              {
                uint64_t v122 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v298, 128, v120, v121);
              }
              else
              {
                uint64_t v122 = 0;
                int8x16_t v298 = 0u;
                float32x4_t v299 = 0u;
                float32x4_t v306 = 0u;
                float32x4_t v307 = 0u;
                float32x4_t v314 = 0u;
                float32x4_t v315 = 0u;
                float32x4_t v322 = 0u;
                float32x4_t v323 = 0u;
              }
              uint64_t v131 = v120 + v122;
              unsigned int v132 = v80[2];
              if (v132 == 127)
              {
                float32x4_t v135 = *(float32x4_t *)(v131 + 16);
                float32x4_t v136 = *(float32x4_t *)(v131 + 32);
                float32x4_t v137 = *(float32x4_t *)(v131 + 48);
                float32x4_t v138 = *(float32x4_t *)(v131 + 64);
                float32x4_t v139 = *(float32x4_t *)(v131 + 80);
                float32x4_t v140 = *(float32x4_t *)(v131 + 96);
                float32x4_t v141 = *(float32x4_t *)(v131 + 112);
                int8x16_t v328 = *(int8x16_t *)v131;
                float32x4_t v329 = v136;
                float32x4_t v336 = v135;
                float32x4_t v337 = v137;
                float32x4_t v344 = v138;
                float32x4_t v345 = v140;
                float32x4_t v352 = v139;
                float32x4_t v353 = v141;
                uint64_t v133 = 128;
              }
              else if (v132 == 3)
              {
                float32x4_t v134 = vld1q_dup_f32((const float *)v131);
                int8x16_t v328 = (int8x16_t)v134;
                float32x4_t v329 = v134;
                float32x4_t v336 = v134;
                float32x4_t v337 = v134;
                float32x4_t v344 = v134;
                float32x4_t v345 = v134;
                float32x4_t v352 = v134;
                float32x4_t v353 = v134;
                uint64_t v133 = 4;
              }
              else if (v80[2])
              {
                uint64_t v133 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v328, 128, v131, v132);
              }
              else
              {
                uint64_t v133 = 0;
                int8x16_t v328 = 0u;
                float32x4_t v329 = 0u;
                float32x4_t v336 = 0u;
                float32x4_t v337 = 0u;
                float32x4_t v344 = 0u;
                float32x4_t v345 = 0u;
                float32x4_t v352 = 0u;
                float32x4_t v353 = 0u;
              }
              uint64_t v142 = v131 + v133;
              unsigned int v143 = v80[3];
              if (v143 == 127)
              {
                float32x4_t v146 = *(float32x4_t *)(v142 + 16);
                float32x4_t v147 = *(float32x4_t *)(v142 + 32);
                float32x4_t v148 = *(float32x4_t *)(v142 + 48);
                float32x4_t v149 = *(float32x4_t *)(v142 + 64);
                float32x4_t v150 = *(float32x4_t *)(v142 + 80);
                float32x4_t v151 = *(float32x4_t *)(v142 + 96);
                float32x4_t v152 = *(float32x4_t *)(v142 + 112);
                int8x16_t v330 = *(int8x16_t *)v142;
                float32x4_t v331 = v147;
                float32x4_t v338 = v146;
                float32x4_t v339 = v148;
                float32x4_t v346 = v149;
                float32x4_t v347 = v151;
                float32x4_t v354 = v150;
                float32x4_t v355 = v152;
                uint64_t v144 = 128;
              }
              else if (v143 == 3)
              {
                float32x4_t v145 = vld1q_dup_f32((const float *)v142);
                int8x16_t v330 = (int8x16_t)v145;
                float32x4_t v331 = v145;
                float32x4_t v338 = v145;
                float32x4_t v339 = v145;
                float32x4_t v346 = v145;
                float32x4_t v347 = v145;
                float32x4_t v354 = v145;
                float32x4_t v355 = v145;
                uint64_t v144 = 4;
              }
              else if (v80[3])
              {
                uint64_t v144 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v330, 128, v142, v143);
              }
              else
              {
                uint64_t v144 = 0;
                int8x16_t v330 = 0u;
                float32x4_t v331 = 0u;
                float32x4_t v338 = 0u;
                float32x4_t v339 = 0u;
                float32x4_t v346 = 0u;
                float32x4_t v347 = 0u;
                float32x4_t v354 = 0u;
                float32x4_t v355 = 0u;
              }
              uint64_t v153 = v142 + v144;
              unsigned int v154 = v80[4];
              if (v154 == 127)
              {
                float32x4_t v157 = *(float32x4_t *)(v153 + 16);
                float32x4_t v158 = *(float32x4_t *)(v153 + 32);
                float32x4_t v159 = *(float32x4_t *)(v153 + 48);
                float32x4_t v160 = *(float32x4_t *)(v153 + 64);
                float32x4_t v161 = *(float32x4_t *)(v153 + 80);
                float32x4_t v162 = *(float32x4_t *)(v153 + 96);
                float32x4_t v163 = *(float32x4_t *)(v153 + 112);
                int8x16_t v300 = *(int8x16_t *)v153;
                float32x4_t v301 = v158;
                float32x4_t v308 = v157;
                float32x4_t v309 = v159;
                float32x4_t v316 = v160;
                float32x4_t v317 = v162;
                float32x4_t v324 = v161;
                float32x4_t v325 = v163;
                uint64_t v155 = 128;
              }
              else if (v154 == 3)
              {
                float32x4_t v156 = vld1q_dup_f32((const float *)v153);
                int8x16_t v300 = (int8x16_t)v156;
                float32x4_t v301 = v156;
                float32x4_t v308 = v156;
                float32x4_t v309 = v156;
                float32x4_t v316 = v156;
                float32x4_t v317 = v156;
                float32x4_t v324 = v156;
                float32x4_t v325 = v156;
                uint64_t v155 = 4;
              }
              else if (v80[4])
              {
                uint64_t v155 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v300, 128, v153, v154);
              }
              else
              {
                uint64_t v155 = 0;
                int8x16_t v300 = 0u;
                float32x4_t v301 = 0u;
                float32x4_t v308 = 0u;
                float32x4_t v309 = 0u;
                float32x4_t v316 = 0u;
                float32x4_t v317 = 0u;
                float32x4_t v324 = 0u;
                float32x4_t v325 = 0u;
              }
              uint64_t v164 = v153 + v155;
              unsigned int v165 = v80[5];
              if (v165 == 127)
              {
                float32x4_t v168 = *(float32x4_t *)(v164 + 16);
                float32x4_t v169 = *(float32x4_t *)(v164 + 32);
                float32x4_t v170 = *(float32x4_t *)(v164 + 48);
                float32x4_t v171 = *(float32x4_t *)(v164 + 64);
                float32x4_t v172 = *(float32x4_t *)(v164 + 80);
                float32x4_t v173 = *(float32x4_t *)(v164 + 96);
                float32x4_t v174 = *(float32x4_t *)(v164 + 112);
                int8x16_t v302 = *(int8x16_t *)v164;
                float32x4_t v303 = v169;
                float32x4_t v310 = v168;
                float32x4_t v311 = v170;
                float32x4_t v318 = v171;
                float32x4_t v319 = v173;
                float32x4_t v326 = v172;
                float32x4_t v327 = v174;
                uint64_t v166 = 128;
              }
              else if (v165 == 3)
              {
                float32x4_t v167 = vld1q_dup_f32((const float *)v164);
                int8x16_t v302 = (int8x16_t)v167;
                float32x4_t v303 = v167;
                float32x4_t v310 = v167;
                float32x4_t v311 = v167;
                float32x4_t v318 = v167;
                float32x4_t v319 = v167;
                float32x4_t v326 = v167;
                float32x4_t v327 = v167;
                uint64_t v166 = 4;
              }
              else if (v80[5])
              {
                uint64_t v166 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v302, 128, v164, v165);
              }
              else
              {
                uint64_t v166 = 0;
                int8x16_t v302 = 0u;
                float32x4_t v303 = 0u;
                float32x4_t v310 = 0u;
                float32x4_t v311 = 0u;
                float32x4_t v318 = 0u;
                float32x4_t v319 = 0u;
                float32x4_t v326 = 0u;
                float32x4_t v327 = 0u;
              }
              uint64_t v175 = v164 + v166;
              unsigned int v176 = v80[6];
              if (v176 == 127)
              {
                float32x4_t v179 = *(float32x4_t *)(v175 + 16);
                float32x4_t v180 = *(float32x4_t *)(v175 + 32);
                float32x4_t v181 = *(float32x4_t *)(v175 + 48);
                float32x4_t v182 = *(float32x4_t *)(v175 + 64);
                float32x4_t v183 = *(float32x4_t *)(v175 + 80);
                float32x4_t v184 = *(float32x4_t *)(v175 + 96);
                float32x4_t v185 = *(float32x4_t *)(v175 + 112);
                int8x16_t v332 = *(int8x16_t *)v175;
                float32x4_t v333 = v180;
                float32x4_t v340 = v179;
                float32x4_t v341 = v181;
                float32x4_t v348 = v182;
                float32x4_t v349 = v184;
                float32x4_t v356 = v183;
                float32x4_t v357 = v185;
                uint64_t v177 = 128;
              }
              else if (v176 == 3)
              {
                float32x4_t v178 = vld1q_dup_f32((const float *)v175);
                int8x16_t v332 = (int8x16_t)v178;
                float32x4_t v333 = v178;
                float32x4_t v340 = v178;
                float32x4_t v341 = v178;
                float32x4_t v348 = v178;
                float32x4_t v349 = v178;
                float32x4_t v356 = v178;
                float32x4_t v357 = v178;
                uint64_t v177 = 4;
              }
              else if (v80[6])
              {
                uint64_t v177 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v332, 128, v175, v176);
              }
              else
              {
                uint64_t v177 = 0;
                int8x16_t v332 = 0u;
                float32x4_t v333 = 0u;
                float32x4_t v340 = 0u;
                float32x4_t v341 = 0u;
                float32x4_t v348 = 0u;
                float32x4_t v349 = 0u;
                float32x4_t v356 = 0u;
                float32x4_t v357 = 0u;
              }
              uint64_t v186 = v175 + v177;
              unsigned int v187 = v80[7];
              if (v187 == 127)
              {
                float32x4_t v190 = *(float32x4_t *)(v186 + 16);
                float32x4_t v191 = *(float32x4_t *)(v186 + 32);
                float32x4_t v192 = *(float32x4_t *)(v186 + 48);
                float32x4_t v193 = *(float32x4_t *)(v186 + 80);
                float32x4_t v194 = *(float32x4_t *)(v186 + 96);
                float32x4_t v195 = *(float32x4_t *)(v186 + 112);
                float32x4_t v196 = *(float32x4_t *)(v186 + 64);
                int8x16_t v334 = *(int8x16_t *)v186;
                float32x4_t v335 = v191;
                float32x4_t v342 = v190;
                float32x4_t v343 = v192;
                float32x4_t v350 = v196;
                float32x4_t v351 = v194;
                float32x4_t v358 = v193;
                float32x4_t v359 = v195;
                a7 = v270;
                uint64_t v188 = v291;
                if (v291) {
                  goto LABEL_198;
                }
              }
              else
              {
                a7 = v270;
                if (v187 != 3)
                {
                  if (v187)
                  {
                    AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v334, 128, v186, v187);
                    uint64_t v188 = v291;
                    if (!v291) {
                      goto LABEL_229;
                    }
                  }
                  else
                  {
                    int8x16_t v334 = 0u;
                    float32x4_t v335 = 0u;
                    float32x4_t v342 = 0u;
                    float32x4_t v343 = 0u;
                    float32x4_t v350 = 0u;
                    float32x4_t v351 = 0u;
                    float32x4_t v358 = 0u;
                    float32x4_t v359 = 0u;
                    uint64_t v188 = v291;
                    if (!v291) {
                      goto LABEL_229;
                    }
                  }
LABEL_198:
                  if (!v292) {
                    goto LABEL_229;
                  }
                  uint64_t v197 = 0;
                  unint64_t v198 = (unint64_t)v289 << 7;
                  uint64_t v199 = 8 * v290;
                  unint64_t v200 = &v296.i8[v198 + v199];
                  uint64_t v201 = v287;
                  uint64_t v202 = v288;
                  unint64_t v203 = 8 * v292;
                  if (v203 <= 1) {
                    unint64_t v204 = 1;
                  }
                  else {
                    unint64_t v204 = 8 * v292;
                  }
                  unint64_t v205 = v198 + v199;
                  unsigned int v206 = &v296.i8[v198 + v199];
                  if (v204) {
                    BOOL v207 = (v204 - 1) >> 32 == 0;
                  }
                  else {
                    BOOL v207 = 0;
                  }
                  char v208 = !v207;
                  uint64_t v209 = v204 & 0x7FFFFFFE0;
                  uint64_t v210 = v204 & 0x7FFFFFFF8;
                  unsigned int v211 = (char *)&v297 + v205;
                  int v212 = (long long *)(v287 + 16);
                  unsigned int v213 = v200;
                  uint64_t v214 = v287;
                  while (2)
                  {
                    BOOL v215 = (char *)(v201 + v202 * v197);
                    BOOL v216 = &v200[128 * v197];
                    if ((unint64_t)(&v206[128 * v197] - v215) < 0x20) {
                      char v217 = 1;
                    }
                    else {
                      char v217 = v208;
                    }
                    if (v217)
                    {
                      int v218 = 0;
LABEL_226:
                      unsigned int v228 = v218 + 1;
                      do
                      {
                        char v229 = *v215++;
                        *v216++ = v229;
                      }
                      while (v203 > v228++);
                    }
                    else
                    {
                      if (v204 >= 0x20)
                      {
                        int v220 = v212;
                        unsigned int v221 = v211;
                        uint64_t v222 = v204 & 0x7FFFFFFE0;
                        do
                        {
                          long long v223 = *v220;
                          *(v221 - 1) = *(v220 - 1);
                          *unsigned int v221 = v223;
                          v221 += 2;
                          v220 += 2;
                          v222 -= 32;
                        }
                        while (v222);
                        if (v204 == v209) {
                          goto LABEL_209;
                        }
                        uint64_t v219 = v204 & 0x7FFFFFFE0;
                        if ((v204 & 0x18) == 0)
                        {
                          v215 += v209;
                          v216 += v209;
                          int v218 = v204 & 0xFFFFFFE0;
                          goto LABEL_226;
                        }
                      }
                      else
                      {
                        uint64_t v219 = 0;
                      }
                      v216 += v210;
                      unint64_t v224 = v219 - (v204 & 0x7FFFFFFF8);
                      unsigned int v225 = (uint64_t *)(v214 + v219);
                      unsigned int v226 = &v213[v219];
                      do
                      {
                        uint64_t v227 = *v225++;
                        *(void *)unsigned int v226 = v227;
                        v226 += 8;
                        v224 += 8;
                      }
                      while (v224);
                      if (v204 != v210)
                      {
                        v215 += v210;
                        int v218 = v204 & 0xFFFFFFF8;
                        goto LABEL_226;
                      }
                    }
LABEL_209:
                    ++v197;
                    v211 += 128;
                    int v212 = (long long *)((char *)v212 + v202);
                    v214 += v202;
                    v213 += 128;
                    if (v197 == v188) {
                      goto LABEL_229;
                    }
                    continue;
                  }
                }
                float32x4_t v189 = vld1q_dup_f32((const float *)v186);
                int8x16_t v334 = (int8x16_t)v189;
                float32x4_t v335 = v189;
                float32x4_t v342 = v189;
                float32x4_t v343 = v189;
                float32x4_t v350 = v189;
                float32x4_t v351 = v189;
                float32x4_t v358 = v189;
                float32x4_t v359 = v189;
                uint64_t v188 = v291;
                if (v291) {
                  goto LABEL_198;
                }
              }
LABEL_229:
              uint64_t v231 = 0;
              unsigned int v232 = v285;
              __int32 v233 = v286;
              int v234 = v293;
              int v235 = v294;
              uint64_t result = v280;
              uint64_t v38 = 2 * a11;
              int v43 = v276;
              unsigned int v89 = v41 + 1;
              do
              {
                uint64_t v246 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,2u>::kSubblockPositions[v231 + 1];
                uint64_t v247 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,2u>::kSubblockPositions[v231];
                unsigned int v248 = (v234 - 4 * v247) & ~((v234 - 4 * (int)v247) >> 31);
                if (v248 >= 4) {
                  unsigned int v248 = 4;
                }
                unsigned int v249 = (v235 - 4 * v246) & ~((v235 - 4 * (int)v246) >> 31);
                if (v249 >= 4) {
                  unsigned int v249 = 4;
                }
                if (v248) {
                  BOOL v250 = v249 == 0;
                }
                else {
                  BOOL v250 = 1;
                }
                if (v250)
                {
                  char v245 = 0;
                }
                else
                {
                  uint64_t v236 = &v296 + 32 * v246 + 2 * v247;
                  int8x16_t v237 = *v236;
                  int8x16_t v238 = v236[1];
                  int8x16_t v239 = v236[8];
                  int8x16_t v240 = v236[9];
                  int8x16_t v241 = v236[16];
                  int8x16_t v242 = v236[17];
                  v236 += 24;
                  int8x16_t v243 = *v236;
                  int8x16_t v244 = v236[1];
                  *unsigned int v232 = v237;
                  v232[1] = v239;
                  v232[2] = v238;
                  v232[3] = v240;
                  v232[4] = v241;
                  v232[5] = v243;
                  v232[6] = v242;
                  v232[7] = v244;
                  v232 += 8;
                  char v245 = 127;
                }
                *v233++ = v245;
                v231 += 2;
              }
              while (v231 != 16);
              uint64_t v37 = 4 * a11;
LABEL_242:
              int32x4_t v82 = v269;
              if (v283) {
                goto LABEL_47;
              }
              goto LABEL_48;
            }
            float32x4_t v88 = (int8x16_t *)__dst;
          }
          else
          {
            float32x4_t v88 = v82;
            if (v83) {
              goto LABEL_122;
            }
          }
          uint64_t v90 = 0;
          float32x4_t v91 = v88;
          do
          {
            uint64_t v105 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,2u>::kSubblockPositions[v90 + 1];
            uint64_t v106 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,2u>::kSubblockPositions[v90];
            unsigned int v107 = (v48 - 4 * v106) & ~((int)(v48 - 4 * v106) >> 31);
            if (v107 >= 4) {
              unsigned int v107 = 4;
            }
            unsigned int v108 = (v42 - 4 * v105) & ~((int)(v42 - 4 * v105) >> 31);
            if (v108 >= 4) {
              unsigned int v108 = 4;
            }
            if (v107) {
              BOOL v109 = v108 == 0;
            }
            else {
              BOOL v109 = 1;
            }
            if (v109)
            {
              char v104 = 0;
            }
            else
            {
              float32x4_t v92 = (long long *)(v81 + v37 * v105 + 32 * v106);
              float32x4_t v93 = (long long *)((char *)v92 + v36);
              long long v95 = *v92;
              long long v96 = v92[1];
              float32x4_t v94 = (long long *)((char *)v92 + v38);
              long long v97 = *v93;
              long long v98 = v93[1];
              long long v100 = *v94;
              long long v101 = v94[1];
              float32x4_t v99 = (long long *)((char *)v94 + v36);
              long long v102 = *v99;
              long long v103 = v99[1];
              *float32x4_t v91 = (int8x16_t)v95;
              v91[1] = (int8x16_t)v97;
              v91[2] = (int8x16_t)v96;
              v91[3] = (int8x16_t)v98;
              v91[4] = (int8x16_t)v100;
              v91[5] = (int8x16_t)v102;
              v91[6] = (int8x16_t)v101;
              v91[7] = (int8x16_t)v103;
              v91 += 8;
              char v104 = 127;
            }
            *v80++ = v104;
            v90 += 2;
          }
          while (v90 != 16);
          a7 = v270;
          int v43 = v276;
          unsigned int v89 = v41 + 1;
          if (v283)
          {
LABEL_47:
            memcpy(v82, v88, 0x400uLL);
            uint64_t v38 = 2 * a11;
            uint64_t v37 = 4 * a11;
            uint64_t result = v280;
          }
LABEL_48:
          BOOL v21 = v41 == v271 >> 4;
          unsigned int v41 = v89;
        }
        while (!v21);
        BOOL v21 = v20++ == v257;
      }
      while (!v21);
    }
  }
  return result;
}

void *AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, int a12)
{
  uint64_t v311 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  uint64_t v17 = a1;
  unsigned int v228 = a8;
  unsigned int v18 = a8 >> 3;
  unsigned int v212 = a8 + a10 - 1;
  unsigned int v214 = v212 >> 3;
  unsigned int v19 = *(unsigned __int8 *)(*(void *)(a1 + 208) + 88);
  unsigned int v20 = *(_DWORD *)(a1 + 112);
  uint64_t v229 = v17;
  if (*(void *)(v17 + 168))
  {
    __int16 CacheMode = IOSurfaceGetCacheMode();
    uint64_t v17 = v229;
    int v22 = CacheMode & 0xF00;
  }
  else
  {
    int v22 = 0;
  }
  BOOL v23 = (v22 & 0xD00) == 0 || v22 == 768;
  int v24 = v22 & 0xE00;
  int v26 = !v23 && v24 != 1024;
  int v233 = v26;
  uint64_t result = (void *)AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::isLevelTiled(v17, *(_DWORD *)(v17 + 144) + a12);
  uint64_t v28 = v229;
  int v222 = (int)result;
  if (v18 <= v214)
  {
    unsigned int v221 = a7 + a9 - 1;
    unsigned int v211 = a7 >> 4;
    if (a7 >> 4 <= v221 >> 4)
    {
      unsigned int v208 = a5 - 1;
      unsigned int v231 = (a5 - 1) >> 4;
      int v230 = ((a5 - 1) & 0xF) + 1;
      int v209 = ((a6 - 1) & 7) + 1;
      unsigned int v210 = (a6 - 1) >> 3;
      uint32x2_t v29 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0xF00000007);
      int8x8_t v30 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32(vadd_s32((int32x2_t)vshl_u32(v29, (uint32x2_t)0xFFFFFFFCFFFFFFFDLL), (int32x2_t)-1))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x2000000010, v29));
      __int32 v219 = v30.i32[0] | v30.i32[1];
      int8x8_t v218 = v30;
      BOOL v217 = v30.i32[0] != 0;
      BOOL v216 = v30.i32[1] != 0;
      unint64_t v207 = 8 * v20 * (unint64_t)v19;
      unsigned int v220 = a7;
      do
      {
        unsigned int v31 = (8 * v18) | 7;
        if (8 * v18 <= v228) {
          int v32 = v228;
        }
        else {
          int v32 = 8 * v18;
        }
        unsigned int v33 = v211;
        if (v212 < v31) {
          unsigned int v31 = v212;
        }
        unsigned int v227 = 8 * v18;
        int v215 = v32 - 8 * v18;
        int v226 = v31 - v32 + 1;
        int v34 = v209;
        if (v18 != v210) {
          int v34 = 8;
        }
        unsigned int v234 = v34;
        uint64_t v225 = a3 + (v32 - v228) * a11;
        do
        {
          unsigned int v35 = 16 * v33;
          unsigned int v36 = 16 * (v33 + 1) - 1;
          if (16 * v33 <= a7) {
            int v37 = a7;
          }
          else {
            int v37 = 16 * v33;
          }
          if (v221 < v36) {
            unsigned int v36 = v221;
          }
          int v38 = v36 - v37 + 1;
          if (v33 == v231) {
            unsigned int v39 = v230;
          }
          else {
            unsigned int v39 = 16;
          }
          BOOL v40 = 1;
          if (v227 >= v228 && v35 >= a7)
          {
            int v41 = v230;
            if (v33 != v231) {
              int v41 = 16;
            }
            BOOL v40 = v38 != v41 || v226 != v234;
          }
          if (v222)
          {
            unsigned int v62 = 0;
            uint64_t v63 = v207 >> (*(unsigned char *)(v28 + 57) != 0);
            char v64 = 1;
            if (v63 > 127)
            {
              if (v63 > 511)
              {
                if (v63 == 512)
                {
                  char v65 = 0;
                  unsigned int v62 = 16;
                  unsigned int v66 = 16;
                }
                else
                {
                  char v65 = 1;
                  unsigned int v66 = 0;
                  if (v63 == 1024)
                  {
                    unsigned int v66 = 8;
                    unsigned int v62 = 16;
                  }
                }
              }
              else if (v63 == 128)
              {
                char v64 = 0;
                char v65 = 0;
                unsigned int v62 = 32;
                unsigned int v66 = 32;
              }
              else
              {
                char v65 = 1;
                unsigned int v66 = 0;
                if (v63 == 256)
                {
                  char v64 = 0;
                  char v65 = 0;
                  unsigned int v66 = 16;
                  unsigned int v62 = 32;
                }
              }
            }
            else
            {
              char v65 = 1;
              unsigned int v66 = 0;
              switch(v63)
              {
                case 4:
                  char v64 = 0;
                  char v65 = 0;
                  unsigned int v66 = 128;
                  unsigned int v62 = 256;
                  break;
                case 5:
                case 6:
                case 7:
                case 9:
                case 10:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 17:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                  break;
                case 8:
                  char v64 = 0;
                  char v65 = 0;
                  unsigned int v62 = 128;
                  unsigned int v66 = 128;
                  break;
                case 16:
                  char v64 = 0;
                  char v65 = 0;
                  unsigned int v66 = 64;
                  unsigned int v62 = 128;
                  break;
                case 32:
                  char v64 = 0;
                  char v65 = 0;
                  unsigned int v62 = 64;
                  unsigned int v66 = 64;
                  break;
                default:
                  if (v63 == 64)
                  {
                    char v64 = 0;
                    char v65 = 0;
                    unsigned int v66 = 32;
                    unsigned int v62 = 64;
                  }
                  break;
              }
            }
            unsigned int v196 = (v62 >> 4) - 1;
            if (v64) {
              unsigned int v197 = 0;
            }
            else {
              unsigned int v197 = 32 - __clz(~(-1 << -(char)__clz(v196)));
            }
            unsigned int v198 = (v66 >> 3) - 1;
            if (v65)
            {
              unsigned int v199 = 0;
              if (v197) {
                goto LABEL_206;
              }
            }
            else
            {
              unsigned int v199 = 32 - __clz(~(-1 << -(char)__clz(v198)));
              if (v199 | v197)
              {
LABEL_206:
                int v200 = 0;
                uint64_t v201 = 0;
                int v202 = v33 & v196;
                int v203 = v18 & v198;
                BOOL v204 = v199 != 0;
                BOOL v205 = v197 != 0;
                int v206 = 1;
                do
                {
                  --v199;
                  if (v204) {
                    v201 |= (unint64_t)(v206 & v203) << v200++;
                  }
                  else {
                    unsigned int v199 = 0;
                  }
                  --v197;
                  if (v205) {
                    v201 |= (unint64_t)(v206 & v202) << v200++;
                  }
                  else {
                    unsigned int v197 = 0;
                  }
                  v206 *= 2;
                  --v200;
                  BOOL v205 = v197 != 0;
                  BOOL v204 = v199 != 0;
                }
                while (v197 | v199);
                goto LABEL_218;
              }
            }
            uint64_t v201 = 0;
LABEL_218:
            unint64_t v50 = ((unint64_t)(v35 / v62 + v227 / v66 * ((v62 + v208) / v62)) << 14) + (v201 << 10);
            goto LABEL_58;
          }
          if (v219)
          {
            int v43 = 0;
            uint64_t v44 = 0;
            int v45 = 1;
            BOOL v46 = v217;
            BOOL v47 = v216;
            __int32 v48 = v218.i32[0];
            __int32 v49 = v218.i32[1];
            do
            {
              --v48;
              if (v46) {
                v44 |= (unint64_t)(v45 & v18) << v43++;
              }
              else {
                __int32 v48 = 0;
              }
              --v49;
              if (v47) {
                v44 |= (unint64_t)(v45 & v33) << v43++;
              }
              else {
                __int32 v49 = 0;
              }
              v45 *= 2;
              --v43;
              BOOL v47 = v49 != 0;
              BOOL v46 = v48 != 0;
            }
            while (v49 | v48);
          }
          else
          {
            uint64_t v44 = 0;
          }
          unint64_t v50 = v44 << 10;
LABEL_58:
          unsigned int v51 = *(_DWORD *)(v28 + 128) >> (*(unsigned char *)(v28 + 144) + a12);
          if (v51 <= 1) {
            unsigned int v51 = 1;
          }
          unsigned int v52 = v51 + 15;
          if (v52 < 0x20) {
            unsigned int v53 = 0;
          }
          else {
            unsigned int v53 = 32 - __clz(~(-1 << -(char)__clz((v52 >> 4) - 1)));
          }
          unsigned int v54 = *(_DWORD *)(v28 + 132) >> (*(unsigned char *)(v28 + 144) + a12);
          if (v54 <= 1) {
            unsigned int v54 = 1;
          }
          unsigned int v55 = v54 + 7;
          if (v55 < 0x10)
          {
            unsigned int v56 = 0;
            if (!v53)
            {
LABEL_80:
              uint64_t v58 = 0;
              goto LABEL_81;
            }
          }
          else
          {
            unsigned int v56 = 32 - __clz(~(-1 << -(char)__clz((v55 >> 3) - 1)));
            if (!(v56 | v53)) {
              goto LABEL_80;
            }
          }
          int v57 = 0;
          uint64_t v58 = 0;
          BOOL v59 = v53 != 0;
          BOOL v60 = v56 != 0;
          int v61 = 1;
          do
          {
            --v53;
            if (v59) {
              v58 |= (unint64_t)(v61 & v33) << v57++;
            }
            else {
              unsigned int v53 = 0;
            }
            --v56;
            if (v60) {
              v58 |= (unint64_t)(v61 & v18) << v57++;
            }
            else {
              unsigned int v56 = 0;
            }
            v61 *= 2;
            --v57;
            BOOL v60 = v56 != 0;
            BOOL v59 = v53 != 0;
          }
          while (v56 | v53);
LABEL_81:
          int v67 = v39 < 0x10 || v40;
          unsigned int v68 = (char *)(a4 + 8 * v58);
          unint64_t v69 = v225 + 8 * (v37 - a7);
          unsigned int v70 = (float32x4_t *)(a2 + v50);
          if (v234 < 8) {
            int v71 = 1;
          }
          else {
            int v71 = v67;
          }
          unsigned int v232 = v70;
          if (v233)
          {
            unsigned int v72 = (float32x4_t *)__dst;
            if (!v71) {
              goto LABEL_93;
            }
            char v73 = v39;
            int v74 = v37;
            memcpy(__dst, v70, sizeof(__dst));
            unsigned int v35 = 16 * v33;
            int v37 = v74;
            LOBYTE(v39) = v73;
            uint64_t v28 = v229;
          }
          else
          {
            unsigned int v72 = v70;
            if (!v71)
            {
LABEL_93:
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock(v69, a11, (unint64_t)v72, v68, v39, v234);
              goto LABEL_94;
            }
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE13ELj2ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = v28;
          uint64_t v236 = v72;
          unsigned __int8 v244 = v39;
          unsigned __int8 v245 = v234;
          unsigned int v240 = v215;
          unsigned int v241 = v37 - v35;
          int8x16_t v237 = v68;
          unint64_t v238 = v69;
          uint64_t v239 = a11;
          unsigned int v242 = v226;
          unsigned int v243 = v38;
          if (v40)
          {
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(v28 + 8) + 7384), block);
LABEL_94:
            a7 = v220;
            goto LABEL_186;
          }
          unsigned int v75 = *v68;
          a7 = v220;
          if (v75 == 127)
          {
            float32x4_t v78 = v72[1];
            float32x4_t v79 = v72[2];
            float32x4_t v80 = v72[3];
            float32x4_t v81 = v72[4];
            float32x4_t v82 = v72[5];
            float32x4_t v83 = v72[6];
            float32x4_t v84 = v72[7];
            int8x16_t v247 = *(int8x16_t *)v72;
            float32x4_t v248 = v79;
            float32x4_t v255 = v78;
            float32x4_t v256 = v80;
            float32x4_t v263 = v81;
            float32x4_t v264 = v83;
            float32x4_t v271 = v82;
            float32x4_t v272 = v84;
            uint64_t v76 = 128;
          }
          else if (v75 == 3)
          {
            float32x4_t v77 = vld1q_dup_f32(v72->f32);
            int8x16_t v247 = (int8x16_t)v77;
            float32x4_t v248 = v77;
            float32x4_t v255 = v77;
            float32x4_t v256 = v77;
            float32x4_t v263 = v77;
            float32x4_t v264 = v77;
            float32x4_t v271 = v77;
            float32x4_t v272 = v77;
            uint64_t v76 = 4;
          }
          else if (*v68)
          {
            uint64_t v76 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v247, 128, (uint64_t)v72, v75);
          }
          else
          {
            uint64_t v76 = 0;
            float32x4_t v248 = 0u;
            int8x16_t v247 = 0u;
            float32x4_t v255 = 0u;
            float32x4_t v256 = 0u;
            float32x4_t v263 = 0u;
            float32x4_t v264 = 0u;
            float32x4_t v271 = 0u;
            float32x4_t v272 = 0u;
          }
          uint64_t v85 = (uint64_t)v72 + v76;
          unsigned int v86 = v68[1];
          if (v86 == 127)
          {
            float32x4_t v89 = *(float32x4_t *)(v85 + 16);
            float32x4_t v90 = *(float32x4_t *)(v85 + 32);
            float32x4_t v91 = *(float32x4_t *)(v85 + 48);
            float32x4_t v92 = *(float32x4_t *)(v85 + 64);
            float32x4_t v93 = *(float32x4_t *)(v85 + 80);
            float32x4_t v94 = *(float32x4_t *)(v85 + 96);
            float32x4_t v95 = *(float32x4_t *)(v85 + 112);
            int8x16_t v249 = *(int8x16_t *)v85;
            float32x4_t v250 = v90;
            float32x4_t v257 = v89;
            float32x4_t v258 = v91;
            float32x4_t v265 = v92;
            float32x4_t v266 = v94;
            float32x4_t v273 = v93;
            float32x4_t v274 = v95;
            uint64_t v87 = 128;
          }
          else if (v86 == 3)
          {
            float32x4_t v88 = vld1q_dup_f32((const float *)v85);
            int8x16_t v249 = (int8x16_t)v88;
            float32x4_t v250 = v88;
            float32x4_t v257 = v88;
            float32x4_t v258 = v88;
            float32x4_t v265 = v88;
            float32x4_t v266 = v88;
            float32x4_t v273 = v88;
            float32x4_t v274 = v88;
            uint64_t v87 = 4;
          }
          else if (v68[1])
          {
            uint64_t v87 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v249, 128, v85, v86);
          }
          else
          {
            uint64_t v87 = 0;
            int8x16_t v249 = 0u;
            float32x4_t v250 = 0u;
            float32x4_t v257 = 0u;
            float32x4_t v258 = 0u;
            float32x4_t v265 = 0u;
            float32x4_t v266 = 0u;
            float32x4_t v273 = 0u;
            float32x4_t v274 = 0u;
          }
          uint64_t v96 = v85 + v87;
          unsigned int v97 = v68[2];
          if (v97 == 127)
          {
            float32x4_t v100 = *(float32x4_t *)(v96 + 16);
            float32x4_t v101 = *(float32x4_t *)(v96 + 32);
            float32x4_t v102 = *(float32x4_t *)(v96 + 48);
            float32x4_t v103 = *(float32x4_t *)(v96 + 64);
            float32x4_t v104 = *(float32x4_t *)(v96 + 80);
            float32x4_t v105 = *(float32x4_t *)(v96 + 96);
            float32x4_t v106 = *(float32x4_t *)(v96 + 112);
            int8x16_t v279 = *(int8x16_t *)v96;
            float32x4_t v280 = v101;
            float32x4_t v287 = v100;
            float32x4_t v288 = v102;
            float32x4_t v295 = v103;
            float32x4_t v296 = v105;
            float32x4_t v303 = v104;
            float32x4_t v304 = v106;
            uint64_t v98 = 128;
          }
          else if (v97 == 3)
          {
            float32x4_t v99 = vld1q_dup_f32((const float *)v96);
            int8x16_t v279 = (int8x16_t)v99;
            float32x4_t v280 = v99;
            float32x4_t v287 = v99;
            float32x4_t v288 = v99;
            float32x4_t v295 = v99;
            float32x4_t v296 = v99;
            float32x4_t v303 = v99;
            float32x4_t v304 = v99;
            uint64_t v98 = 4;
          }
          else if (v68[2])
          {
            uint64_t v98 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v279, 128, v96, v97);
          }
          else
          {
            uint64_t v98 = 0;
            int8x16_t v279 = 0u;
            float32x4_t v280 = 0u;
            float32x4_t v287 = 0u;
            float32x4_t v288 = 0u;
            float32x4_t v295 = 0u;
            float32x4_t v296 = 0u;
            float32x4_t v303 = 0u;
            float32x4_t v304 = 0u;
          }
          uint64_t v107 = v96 + v98;
          unsigned int v108 = v68[3];
          if (v108 == 127)
          {
            float32x4_t v111 = *(float32x4_t *)(v107 + 16);
            float32x4_t v112 = *(float32x4_t *)(v107 + 32);
            float32x4_t v113 = *(float32x4_t *)(v107 + 48);
            float32x4_t v114 = *(float32x4_t *)(v107 + 64);
            float32x4_t v115 = *(float32x4_t *)(v107 + 80);
            float32x4_t v116 = *(float32x4_t *)(v107 + 96);
            float32x4_t v117 = *(float32x4_t *)(v107 + 112);
            int8x16_t v281 = *(int8x16_t *)v107;
            float32x4_t v282 = v112;
            float32x4_t v289 = v111;
            float32x4_t v290 = v113;
            float32x4_t v297 = v114;
            float32x4_t v298 = v116;
            float32x4_t v305 = v115;
            float32x4_t v306 = v117;
            uint64_t v109 = 128;
          }
          else if (v108 == 3)
          {
            float32x4_t v110 = vld1q_dup_f32((const float *)v107);
            int8x16_t v281 = (int8x16_t)v110;
            float32x4_t v282 = v110;
            float32x4_t v289 = v110;
            float32x4_t v290 = v110;
            float32x4_t v297 = v110;
            float32x4_t v298 = v110;
            float32x4_t v305 = v110;
            float32x4_t v306 = v110;
            uint64_t v109 = 4;
          }
          else if (v68[3])
          {
            uint64_t v109 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v281, 128, v107, v108);
          }
          else
          {
            uint64_t v109 = 0;
            int8x16_t v281 = 0u;
            float32x4_t v282 = 0u;
            float32x4_t v289 = 0u;
            float32x4_t v290 = 0u;
            float32x4_t v297 = 0u;
            float32x4_t v298 = 0u;
            float32x4_t v305 = 0u;
            float32x4_t v306 = 0u;
          }
          uint64_t v118 = v107 + v109;
          unsigned int v119 = v68[4];
          if (v119 == 127)
          {
            float32x4_t v122 = *(float32x4_t *)(v118 + 16);
            float32x4_t v123 = *(float32x4_t *)(v118 + 32);
            float32x4_t v124 = *(float32x4_t *)(v118 + 48);
            float32x4_t v125 = *(float32x4_t *)(v118 + 64);
            float32x4_t v126 = *(float32x4_t *)(v118 + 80);
            float32x4_t v127 = *(float32x4_t *)(v118 + 96);
            float32x4_t v128 = *(float32x4_t *)(v118 + 112);
            int8x16_t v251 = *(int8x16_t *)v118;
            float32x4_t v252 = v123;
            float32x4_t v259 = v122;
            float32x4_t v260 = v124;
            float32x4_t v267 = v125;
            float32x4_t v268 = v127;
            float32x4_t v275 = v126;
            float32x4_t v276 = v128;
            uint64_t v120 = 128;
          }
          else if (v119 == 3)
          {
            float32x4_t v121 = vld1q_dup_f32((const float *)v118);
            int8x16_t v251 = (int8x16_t)v121;
            float32x4_t v252 = v121;
            float32x4_t v259 = v121;
            float32x4_t v260 = v121;
            float32x4_t v267 = v121;
            float32x4_t v268 = v121;
            float32x4_t v275 = v121;
            float32x4_t v276 = v121;
            uint64_t v120 = 4;
          }
          else if (v68[4])
          {
            uint64_t v120 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v251, 128, v118, v119);
          }
          else
          {
            uint64_t v120 = 0;
            int8x16_t v251 = 0u;
            float32x4_t v252 = 0u;
            float32x4_t v259 = 0u;
            float32x4_t v260 = 0u;
            float32x4_t v267 = 0u;
            float32x4_t v268 = 0u;
            float32x4_t v275 = 0u;
            float32x4_t v276 = 0u;
          }
          uint64_t v129 = v118 + v120;
          unsigned int v130 = v68[5];
          if (v130 == 127)
          {
            float32x4_t v133 = *(float32x4_t *)(v129 + 16);
            float32x4_t v134 = *(float32x4_t *)(v129 + 32);
            float32x4_t v135 = *(float32x4_t *)(v129 + 48);
            float32x4_t v136 = *(float32x4_t *)(v129 + 64);
            float32x4_t v137 = *(float32x4_t *)(v129 + 80);
            float32x4_t v138 = *(float32x4_t *)(v129 + 96);
            float32x4_t v139 = *(float32x4_t *)(v129 + 112);
            int8x16_t v253 = *(int8x16_t *)v129;
            float32x4_t v254 = v134;
            float32x4_t v261 = v133;
            float32x4_t v262 = v135;
            float32x4_t v269 = v136;
            float32x4_t v270 = v138;
            float32x4_t v277 = v137;
            float32x4_t v278 = v139;
            uint64_t v131 = 128;
          }
          else if (v130 == 3)
          {
            float32x4_t v132 = vld1q_dup_f32((const float *)v129);
            int8x16_t v253 = (int8x16_t)v132;
            float32x4_t v254 = v132;
            float32x4_t v261 = v132;
            float32x4_t v262 = v132;
            float32x4_t v269 = v132;
            float32x4_t v270 = v132;
            float32x4_t v277 = v132;
            float32x4_t v278 = v132;
            uint64_t v131 = 4;
          }
          else if (v68[5])
          {
            uint64_t v131 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v253, 128, v129, v130);
          }
          else
          {
            uint64_t v131 = 0;
            int8x16_t v253 = 0u;
            float32x4_t v254 = 0u;
            float32x4_t v261 = 0u;
            float32x4_t v262 = 0u;
            float32x4_t v269 = 0u;
            float32x4_t v270 = 0u;
            float32x4_t v277 = 0u;
            float32x4_t v278 = 0u;
          }
          uint64_t v140 = v129 + v131;
          unsigned int v141 = v68[6];
          if (v141 == 127)
          {
            float32x4_t v144 = *(float32x4_t *)(v140 + 16);
            float32x4_t v145 = *(float32x4_t *)(v140 + 32);
            float32x4_t v146 = *(float32x4_t *)(v140 + 48);
            float32x4_t v147 = *(float32x4_t *)(v140 + 64);
            float32x4_t v148 = *(float32x4_t *)(v140 + 80);
            float32x4_t v149 = *(float32x4_t *)(v140 + 96);
            float32x4_t v150 = *(float32x4_t *)(v140 + 112);
            int8x16_t v283 = *(int8x16_t *)v140;
            float32x4_t v284 = v145;
            float32x4_t v291 = v144;
            float32x4_t v292 = v146;
            float32x4_t v299 = v147;
            float32x4_t v300 = v149;
            float32x4_t v307 = v148;
            float32x4_t v308 = v150;
            uint64_t v142 = 128;
          }
          else if (v141 == 3)
          {
            float32x4_t v143 = vld1q_dup_f32((const float *)v140);
            int8x16_t v283 = (int8x16_t)v143;
            float32x4_t v284 = v143;
            float32x4_t v291 = v143;
            float32x4_t v292 = v143;
            float32x4_t v299 = v143;
            float32x4_t v300 = v143;
            float32x4_t v307 = v143;
            float32x4_t v308 = v143;
            uint64_t v142 = 4;
          }
          else if (v68[6])
          {
            uint64_t v142 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v283, 128, v140, v141);
          }
          else
          {
            uint64_t v142 = 0;
            int8x16_t v283 = 0u;
            float32x4_t v284 = 0u;
            float32x4_t v291 = 0u;
            float32x4_t v292 = 0u;
            float32x4_t v299 = 0u;
            float32x4_t v300 = 0u;
            float32x4_t v307 = 0u;
            float32x4_t v308 = 0u;
          }
          uint64_t v151 = v140 + v142;
          unsigned int v152 = v68[7];
          if (v152 == 127)
          {
            float32x4_t v155 = *(float32x4_t *)(v151 + 16);
            float32x4_t v156 = *(float32x4_t *)(v151 + 32);
            float32x4_t v157 = *(float32x4_t *)(v151 + 48);
            float32x4_t v158 = *(float32x4_t *)(v151 + 80);
            float32x4_t v159 = *(float32x4_t *)(v151 + 96);
            float32x4_t v160 = *(float32x4_t *)(v151 + 112);
            float32x4_t v161 = *(float32x4_t *)(v151 + 64);
            int8x16_t v285 = *(int8x16_t *)v151;
            float32x4_t v286 = v156;
            float32x4_t v293 = v155;
            float32x4_t v294 = v157;
            float32x4_t v301 = v161;
            float32x4_t v302 = v159;
            float32x4_t v309 = v158;
            float32x4_t v310 = v160;
            uint64_t v153 = v242;
            if (!v242) {
              goto LABEL_185;
            }
          }
          else if (v152 == 3)
          {
            float32x4_t v154 = vld1q_dup_f32((const float *)v151);
            int8x16_t v285 = (int8x16_t)v154;
            float32x4_t v286 = v154;
            float32x4_t v293 = v154;
            float32x4_t v294 = v154;
            float32x4_t v301 = v154;
            float32x4_t v302 = v154;
            float32x4_t v309 = v154;
            float32x4_t v310 = v154;
            uint64_t v153 = v242;
            if (!v242) {
              goto LABEL_185;
            }
          }
          else if (v68[7])
          {
            AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v285, 128, v151, v152);
            uint64_t v153 = v242;
            if (!v242) {
              goto LABEL_185;
            }
          }
          else
          {
            int8x16_t v285 = 0u;
            float32x4_t v286 = 0u;
            float32x4_t v293 = 0u;
            float32x4_t v294 = 0u;
            float32x4_t v301 = 0u;
            float32x4_t v302 = 0u;
            float32x4_t v309 = 0u;
            float32x4_t v310 = 0u;
            uint64_t v153 = v242;
            if (!v242) {
              goto LABEL_185;
            }
          }
          if (v243)
          {
            uint64_t v162 = 0;
            unint64_t v163 = (unint64_t)v240 << 7;
            uint64_t v164 = 8 * v241;
            unsigned int v165 = &v247.i8[v163 + v164];
            unint64_t v166 = v238;
            uint64_t v167 = v239;
            unint64_t v168 = 8 * v243;
            if (v168 <= 1) {
              unint64_t v169 = 1;
            }
            else {
              unint64_t v169 = 8 * v243;
            }
            unint64_t v170 = v163 + v164;
            float32x4_t v171 = &v247.i8[v163 + v164];
            if (v169) {
              BOOL v172 = (v169 - 1) >> 32 == 0;
            }
            else {
              BOOL v172 = 0;
            }
            char v173 = !v172;
            uint64_t v174 = v169 & 0x7FFFFFFE0;
            uint64_t v175 = v169 & 0x7FFFFFFF8;
            unsigned int v176 = (char *)&v248 + v170;
            uint64_t v177 = (long long *)(v238 + 16);
            float32x4_t v178 = v165;
            unint64_t v179 = v238;
            do
            {
              float32x4_t v180 = (char *)(v166 + v167 * v162);
              float32x4_t v181 = &v165[128 * v162];
              if ((unint64_t)(&v171[128 * v162] - v180) < 0x20) {
                char v182 = 1;
              }
              else {
                char v182 = v173;
              }
              if (v182)
              {
                int v183 = 0;
                goto LABEL_182;
              }
              if (v169 >= 0x20)
              {
                float32x4_t v185 = v177;
                uint64_t v186 = v176;
                uint64_t v187 = v169 & 0x7FFFFFFE0;
                do
                {
                  long long v188 = *v185;
                  *(v186 - 1) = *(v185 - 1);
                  *uint64_t v186 = v188;
                  v186 += 2;
                  v185 += 2;
                  v187 -= 32;
                }
                while (v187);
                if (v169 == v174) {
                  goto LABEL_165;
                }
                uint64_t v184 = v169 & 0x7FFFFFFE0;
                if ((v169 & 0x18) == 0)
                {
                  v180 += v174;
                  v181 += v174;
                  int v183 = v169 & 0xFFFFFFE0;
                  goto LABEL_182;
                }
              }
              else
              {
                uint64_t v184 = 0;
              }
              v181 += v175;
              unint64_t v189 = v184 - (v169 & 0x7FFFFFFF8);
              float32x4_t v190 = (uint64_t *)(v179 + v184);
              float32x4_t v191 = &v178[v184];
              do
              {
                uint64_t v192 = *v190++;
                *(void *)float32x4_t v191 = v192;
                v191 += 8;
                v189 += 8;
              }
              while (v189);
              if (v169 == v175) {
                goto LABEL_165;
              }
              v180 += v175;
              int v183 = v169 & 0xFFFFFFF8;
LABEL_182:
              unsigned int v193 = v183 + 1;
              do
              {
                char v194 = *v180++;
                *v181++ = v194;
              }
              while (v168 > v193++);
LABEL_165:
              ++v162;
              v176 += 128;
              uint64_t v177 = (long long *)((char *)v177 + v167);
              v179 += v167;
              v178 += 128;
            }
            while (v162 != v153);
          }
LABEL_185:
          AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)&v247, 128, (unint64_t)v236, v237, v244, v245);
LABEL_186:
          uint64_t result = v232;
          if (v233) {
            uint64_t result = memcpy(v232, v72, 0x400uLL);
          }
          BOOL v23 = v33++ == v221 >> 4;
          uint64_t v28 = v229;
        }
        while (!v23);
        BOOL v23 = v18++ == v214;
      }
      while (!v23);
    }
  }
  return result;
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, int a12)
{
  uint64_t v352 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v270 = a8;
  unsigned int v16 = a8 >> 3;
  unsigned int v253 = a8 + a10 - 1;
  unsigned int v255 = v253 >> 3;
  unsigned int v17 = *(unsigned __int8 *)(*(void *)(a1 + 208) + 88);
  unsigned int v18 = *(_DWORD *)(a1 + 112);
  uint64_t v272 = a1;
  if (*(void *)(a1 + 168)) {
    int v19 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v19 = 0;
  }
  BOOL v20 = (v19 & 0xD00) == 0 || v19 == 768;
  int v21 = v19 & 0xE00;
  int v23 = !v20 && v21 != 1024;
  int v275 = v23;
  BOOL isLevelTiled = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::isLevelTiled(a1, *(_DWORD *)(a1 + 144) + a12);
  uint64_t v25 = a1;
  BOOL v264 = isLevelTiled;
  if (v16 <= v255)
  {
    unsigned int v263 = a7 + a9 - 1;
    if (a7 >> 4 <= v263 >> 4)
    {
      unsigned int v250 = a5 - 1;
      unsigned int v274 = (a5 - 1) >> 4;
      int v273 = ((a5 - 1) & 0xF) + 1;
      int v251 = ((a6 - 1) & 7) + 1;
      unsigned int v252 = (a6 - 1) >> 3;
      uint32x2_t v26 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0xF00000007);
      int8x8_t v27 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32(vadd_s32((int32x2_t)vshl_u32(v26, (uint32x2_t)0xFFFFFFFCFFFFFFFDLL), (int32x2_t)-1))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x2000000010, v26));
      __int32 v262 = v27.i32[0] | v27.i32[1];
      int8x8_t v260 = v27;
      BOOL v259 = v27.i32[0] != 0;
      BOOL v258 = v27.i32[1] != 0;
      unint64_t v249 = 8 * v18 * (unint64_t)v17;
      uint64_t v28 = a11;
      uint64_t v29 = 2 * a11;
      do
      {
        unsigned int v30 = (8 * v16) | 7;
        if (8 * v16 <= v270) {
          int v31 = v270;
        }
        else {
          int v31 = 8 * v16;
        }
        unsigned int v32 = a7 >> 4;
        if (v253 < v30) {
          unsigned int v30 = v253;
        }
        unsigned int v269 = 8 * v16;
        int v257 = v31 - 8 * v16;
        int v268 = v30 - v31 + 1;
        if (v16 == v252) {
          unsigned int v33 = v251;
        }
        else {
          unsigned int v33 = 8;
        }
        uint64_t v267 = a3 + (v31 - v270) * v28;
        unsigned int v34 = a7;
        unsigned int v256 = v33;
        do
        {
          unsigned int v35 = 16 * v32;
          unsigned int v36 = 16 * (v32 + 1) - 1;
          if (16 * v32 <= v34) {
            int v37 = v34;
          }
          else {
            int v37 = 16 * v32;
          }
          if (v263 < v36) {
            unsigned int v36 = a7 + a9 - 1;
          }
          int v38 = v36 - v37 + 1;
          if (v32 == v274) {
            unsigned int v39 = v273;
          }
          else {
            unsigned int v39 = 16;
          }
          BOOL v40 = 1;
          if (v269 >= v270 && v35 >= v34)
          {
            int v41 = v273;
            if (v32 != v274) {
              int v41 = 16;
            }
            BOOL v40 = v38 != v41 || v268 != v33;
          }
          if (v264)
          {
            unsigned int v62 = 0;
            uint64_t v63 = v249 >> (*(unsigned char *)(v25 + 57) != 0);
            char v64 = 1;
            if (v63 > 127)
            {
              if (v63 > 511)
              {
                if (v63 == 512)
                {
                  char v65 = 0;
                  unsigned int v62 = 16;
                  unsigned int v66 = 16;
                }
                else
                {
                  char v65 = 1;
                  unsigned int v66 = 0;
                  if (v63 == 1024)
                  {
                    unsigned int v66 = 8;
                    unsigned int v62 = 16;
                  }
                }
              }
              else if (v63 == 128)
              {
                char v64 = 0;
                char v65 = 0;
                unsigned int v62 = 32;
                unsigned int v66 = 32;
              }
              else
              {
                char v65 = 1;
                unsigned int v66 = 0;
                if (v63 == 256)
                {
                  char v64 = 0;
                  char v65 = 0;
                  unsigned int v66 = 16;
                  unsigned int v62 = 32;
                }
              }
            }
            else
            {
              char v65 = 1;
              unsigned int v66 = 0;
              switch(v63)
              {
                case 4:
                  char v64 = 0;
                  char v65 = 0;
                  unsigned int v66 = 128;
                  unsigned int v62 = 256;
                  break;
                case 5:
                case 6:
                case 7:
                case 9:
                case 10:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 17:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                  break;
                case 8:
                  char v64 = 0;
                  char v65 = 0;
                  unsigned int v62 = 128;
                  unsigned int v66 = 128;
                  break;
                case 16:
                  char v64 = 0;
                  char v65 = 0;
                  unsigned int v66 = 64;
                  unsigned int v62 = 128;
                  break;
                case 32:
                  char v64 = 0;
                  char v65 = 0;
                  unsigned int v62 = 64;
                  unsigned int v66 = 64;
                  break;
                default:
                  if (v63 == 64)
                  {
                    char v64 = 0;
                    char v65 = 0;
                    unsigned int v66 = 32;
                    unsigned int v62 = 64;
                  }
                  break;
              }
            }
            unsigned int v238 = (v62 >> 4) - 1;
            if (v64) {
              unsigned int v239 = 0;
            }
            else {
              unsigned int v239 = 32 - __clz(~(-1 << -(char)__clz(v238)));
            }
            unsigned int v240 = (v66 >> 3) - 1;
            if (v65)
            {
              unsigned int v241 = 0;
              if (v239) {
                goto LABEL_232;
              }
            }
            else
            {
              unsigned int v241 = 32 - __clz(~(-1 << -(char)__clz(v240)));
              if (v241 | v239)
              {
LABEL_232:
                int v242 = 0;
                uint64_t v243 = 0;
                int v244 = v32 & v238;
                int v245 = v16 & v240;
                BOOL v246 = v241 != 0;
                BOOL v247 = v239 != 0;
                int v248 = 1;
                do
                {
                  --v241;
                  if (v246) {
                    v243 |= (unint64_t)(v248 & v245) << v242++;
                  }
                  else {
                    unsigned int v241 = 0;
                  }
                  --v239;
                  if (v247) {
                    v243 |= (unint64_t)(v248 & v244) << v242++;
                  }
                  else {
                    unsigned int v239 = 0;
                  }
                  v248 *= 2;
                  --v242;
                  BOOL v247 = v239 != 0;
                  BOOL v246 = v241 != 0;
                }
                while (v239 | v241);
                goto LABEL_244;
              }
            }
            uint64_t v243 = 0;
LABEL_244:
            unint64_t v50 = ((unint64_t)(v35 / v62 + v269 / v66 * ((v62 + v250) / v62)) << 14) + (v243 << 10);
            goto LABEL_60;
          }
          if (v262)
          {
            int v43 = 0;
            uint64_t v44 = 0;
            int v45 = 1;
            BOOL v46 = v259;
            BOOL v47 = v258;
            __int32 v48 = v260.i32[0];
            __int32 v49 = v260.i32[1];
            do
            {
              --v48;
              if (v46) {
                v44 |= (unint64_t)(v45 & v16) << v43++;
              }
              else {
                __int32 v48 = 0;
              }
              --v49;
              if (v47) {
                v44 |= (unint64_t)(v45 & v32) << v43++;
              }
              else {
                __int32 v49 = 0;
              }
              v45 *= 2;
              --v43;
              BOOL v47 = v49 != 0;
              BOOL v46 = v48 != 0;
            }
            while (v49 | v48);
          }
          else
          {
            uint64_t v44 = 0;
          }
          unint64_t v50 = v44 << 10;
LABEL_60:
          unsigned int v51 = *(_DWORD *)(v25 + 128) >> (*(unsigned char *)(v25 + 144) + a12);
          if (v51 <= 1) {
            unsigned int v51 = 1;
          }
          unsigned int v52 = v51 + 15;
          if (v52 < 0x20) {
            unsigned int v53 = 0;
          }
          else {
            unsigned int v53 = 32 - __clz(~(-1 << -(char)__clz((v52 >> 4) - 1)));
          }
          unsigned int v54 = *(_DWORD *)(v25 + 132) >> (*(unsigned char *)(v25 + 144) + a12);
          if (v54 <= 1) {
            unsigned int v54 = 1;
          }
          unsigned int v55 = v54 + 7;
          if (v55 < 0x10)
          {
            unsigned int v56 = 0;
            if (!v53)
            {
LABEL_82:
              uint64_t v58 = 0;
              goto LABEL_83;
            }
          }
          else
          {
            unsigned int v56 = 32 - __clz(~(-1 << -(char)__clz((v55 >> 3) - 1)));
            if (!(v56 | v53)) {
              goto LABEL_82;
            }
          }
          int v57 = 0;
          uint64_t v58 = 0;
          BOOL v59 = v53 != 0;
          BOOL v60 = v56 != 0;
          int v61 = 1;
          do
          {
            --v53;
            if (v59) {
              v58 |= (unint64_t)(v61 & v32) << v57++;
            }
            else {
              unsigned int v53 = 0;
            }
            --v56;
            if (v60) {
              v58 |= (unint64_t)(v61 & v16) << v57++;
            }
            else {
              unsigned int v56 = 0;
            }
            v61 *= 2;
            --v57;
            BOOL v60 = v56 != 0;
            BOOL v59 = v53 != 0;
          }
          while (v56 | v53);
LABEL_83:
          unsigned int v67 = v37 - v34;
          int v68 = v39 < 0x10 || v40;
          unint64_t v69 = (char *)(a4 + 8 * v58);
          uint64_t v70 = v267 + 8 * v67;
          int v71 = (int8x16_t *)(a2 + v50);
          if (v33 < 8) {
            int v72 = 1;
          }
          else {
            int v72 = v68;
          }
          if (v275)
          {
            if (v72)
            {
              char v73 = v71;
              int v74 = v38;
              BOOL v75 = v40;
              memcpy(v287, v71, sizeof(v287));
              BOOL v40 = v75;
              unsigned int v35 = 16 * v32;
              int v38 = v74;
              uint64_t v28 = a11;
              unsigned int v33 = v256;
              uint64_t v76 = (int8x16_t *)v287;
              int v71 = v73;
              uint64_t v25 = v272;
LABEL_93:
              __dst = v71;
              block[0] = MEMORY[0x263EF8330];
              block[1] = 3221225472;
              block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE13ELj2ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
              block[3] = &__block_descriptor_90_e5_v8__0l;
              block[4] = v25;
              float32x4_t v277 = v76;
              unsigned __int8 v285 = v39;
              unsigned __int8 v286 = v33;
              unsigned int v281 = v257;
              unsigned int v282 = v37 - v35;
              float32x4_t v278 = v69;
              uint64_t v279 = v70;
              uint64_t v280 = v28;
              unsigned int v283 = v268;
              unsigned int v284 = v38;
              if (v40)
              {
                dispatch_sync(*(dispatch_queue_t *)(*(void *)(v25 + 8) + 7384), block);
                uint64_t v25 = v272;
                unsigned int v34 = a7;
                uint64_t v29 = 2 * a11;
                goto LABEL_95;
              }
              unsigned int v97 = *v69;
              if (v97 == 127)
              {
                float32x4_t v100 = (float32x4_t)v76[1];
                float32x4_t v101 = (float32x4_t)v76[2];
                float32x4_t v102 = (float32x4_t)v76[3];
                float32x4_t v103 = (float32x4_t)v76[4];
                float32x4_t v104 = (float32x4_t)v76[5];
                float32x4_t v105 = (float32x4_t)v76[6];
                float32x4_t v106 = (float32x4_t)v76[7];
                int8x16_t v288 = *v76;
                float32x4_t v289 = v101;
                float32x4_t v296 = v100;
                float32x4_t v297 = v102;
                float32x4_t v304 = v103;
                float32x4_t v305 = v105;
                float32x4_t v312 = v104;
                float32x4_t v313 = v106;
                uint64_t v98 = 128;
              }
              else if (v97 == 3)
              {
                float32x4_t v99 = vld1q_dup_f32((const float *)v76->i32);
                int8x16_t v288 = (int8x16_t)v99;
                float32x4_t v289 = v99;
                float32x4_t v296 = v99;
                float32x4_t v297 = v99;
                float32x4_t v304 = v99;
                float32x4_t v305 = v99;
                float32x4_t v312 = v99;
                float32x4_t v313 = v99;
                uint64_t v98 = 4;
              }
              else if (*v69)
              {
                uint64_t v98 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v288, 128, (uint64_t)v76, v97);
              }
              else
              {
                uint64_t v98 = 0;
                float32x4_t v289 = 0u;
                int8x16_t v288 = 0u;
                float32x4_t v296 = 0u;
                float32x4_t v297 = 0u;
                float32x4_t v304 = 0u;
                float32x4_t v305 = 0u;
                float32x4_t v312 = 0u;
                float32x4_t v313 = 0u;
              }
              uint64_t v107 = (uint64_t)v76->i64 + v98;
              unsigned int v108 = v69[1];
              if (v108 == 127)
              {
                float32x4_t v111 = *(float32x4_t *)(v107 + 16);
                float32x4_t v112 = *(float32x4_t *)(v107 + 32);
                float32x4_t v113 = *(float32x4_t *)(v107 + 48);
                float32x4_t v114 = *(float32x4_t *)(v107 + 64);
                float32x4_t v115 = *(float32x4_t *)(v107 + 80);
                float32x4_t v116 = *(float32x4_t *)(v107 + 96);
                float32x4_t v117 = *(float32x4_t *)(v107 + 112);
                int8x16_t v290 = *(int8x16_t *)v107;
                float32x4_t v291 = v112;
                float32x4_t v298 = v111;
                float32x4_t v299 = v113;
                float32x4_t v306 = v114;
                float32x4_t v307 = v116;
                float32x4_t v314 = v115;
                float32x4_t v315 = v117;
                uint64_t v109 = 128;
              }
              else if (v108 == 3)
              {
                float32x4_t v110 = vld1q_dup_f32((const float *)v107);
                int8x16_t v290 = (int8x16_t)v110;
                float32x4_t v291 = v110;
                float32x4_t v298 = v110;
                float32x4_t v299 = v110;
                float32x4_t v306 = v110;
                float32x4_t v307 = v110;
                float32x4_t v314 = v110;
                float32x4_t v315 = v110;
                uint64_t v109 = 4;
              }
              else if (v69[1])
              {
                uint64_t v109 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v290, 128, v107, v108);
              }
              else
              {
                uint64_t v109 = 0;
                int8x16_t v290 = 0u;
                float32x4_t v291 = 0u;
                float32x4_t v298 = 0u;
                float32x4_t v299 = 0u;
                float32x4_t v306 = 0u;
                float32x4_t v307 = 0u;
                float32x4_t v314 = 0u;
                float32x4_t v315 = 0u;
              }
              uint64_t v118 = v107 + v109;
              unsigned int v119 = v69[2];
              if (v119 == 127)
              {
                float32x4_t v122 = *(float32x4_t *)(v118 + 16);
                float32x4_t v123 = *(float32x4_t *)(v118 + 32);
                float32x4_t v124 = *(float32x4_t *)(v118 + 48);
                float32x4_t v125 = *(float32x4_t *)(v118 + 64);
                float32x4_t v126 = *(float32x4_t *)(v118 + 80);
                float32x4_t v127 = *(float32x4_t *)(v118 + 96);
                float32x4_t v128 = *(float32x4_t *)(v118 + 112);
                int8x16_t v320 = *(int8x16_t *)v118;
                float32x4_t v321 = v123;
                float32x4_t v328 = v122;
                float32x4_t v329 = v124;
                float32x4_t v336 = v125;
                float32x4_t v337 = v127;
                float32x4_t v344 = v126;
                float32x4_t v345 = v128;
                uint64_t v120 = 128;
              }
              else if (v119 == 3)
              {
                float32x4_t v121 = vld1q_dup_f32((const float *)v118);
                int8x16_t v320 = (int8x16_t)v121;
                float32x4_t v321 = v121;
                float32x4_t v328 = v121;
                float32x4_t v329 = v121;
                float32x4_t v336 = v121;
                float32x4_t v337 = v121;
                float32x4_t v344 = v121;
                float32x4_t v345 = v121;
                uint64_t v120 = 4;
              }
              else if (v69[2])
              {
                uint64_t v120 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v320, 128, v118, v119);
              }
              else
              {
                uint64_t v120 = 0;
                int8x16_t v320 = 0u;
                float32x4_t v321 = 0u;
                float32x4_t v328 = 0u;
                float32x4_t v329 = 0u;
                float32x4_t v336 = 0u;
                float32x4_t v337 = 0u;
                float32x4_t v344 = 0u;
                float32x4_t v345 = 0u;
              }
              uint64_t v129 = v118 + v120;
              unsigned int v130 = v69[3];
              if (v130 == 127)
              {
                float32x4_t v133 = *(float32x4_t *)(v129 + 16);
                float32x4_t v134 = *(float32x4_t *)(v129 + 32);
                float32x4_t v135 = *(float32x4_t *)(v129 + 48);
                float32x4_t v136 = *(float32x4_t *)(v129 + 64);
                float32x4_t v137 = *(float32x4_t *)(v129 + 80);
                float32x4_t v138 = *(float32x4_t *)(v129 + 96);
                float32x4_t v139 = *(float32x4_t *)(v129 + 112);
                int8x16_t v322 = *(int8x16_t *)v129;
                float32x4_t v323 = v134;
                float32x4_t v330 = v133;
                float32x4_t v331 = v135;
                float32x4_t v338 = v136;
                float32x4_t v339 = v138;
                float32x4_t v346 = v137;
                float32x4_t v347 = v139;
                uint64_t v131 = 128;
              }
              else if (v130 == 3)
              {
                float32x4_t v132 = vld1q_dup_f32((const float *)v129);
                int8x16_t v322 = (int8x16_t)v132;
                float32x4_t v323 = v132;
                float32x4_t v330 = v132;
                float32x4_t v331 = v132;
                float32x4_t v338 = v132;
                float32x4_t v339 = v132;
                float32x4_t v346 = v132;
                float32x4_t v347 = v132;
                uint64_t v131 = 4;
              }
              else if (v69[3])
              {
                uint64_t v131 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v322, 128, v129, v130);
              }
              else
              {
                uint64_t v131 = 0;
                int8x16_t v322 = 0u;
                float32x4_t v323 = 0u;
                float32x4_t v330 = 0u;
                float32x4_t v331 = 0u;
                float32x4_t v338 = 0u;
                float32x4_t v339 = 0u;
                float32x4_t v346 = 0u;
                float32x4_t v347 = 0u;
              }
              uint64_t v140 = v129 + v131;
              unsigned int v141 = v69[4];
              if (v141 == 127)
              {
                float32x4_t v144 = *(float32x4_t *)(v140 + 16);
                float32x4_t v145 = *(float32x4_t *)(v140 + 32);
                float32x4_t v146 = *(float32x4_t *)(v140 + 48);
                float32x4_t v147 = *(float32x4_t *)(v140 + 64);
                float32x4_t v148 = *(float32x4_t *)(v140 + 80);
                float32x4_t v149 = *(float32x4_t *)(v140 + 96);
                float32x4_t v150 = *(float32x4_t *)(v140 + 112);
                int8x16_t v292 = *(int8x16_t *)v140;
                float32x4_t v293 = v145;
                float32x4_t v300 = v144;
                float32x4_t v301 = v146;
                float32x4_t v308 = v147;
                float32x4_t v309 = v149;
                float32x4_t v316 = v148;
                float32x4_t v317 = v150;
                uint64_t v142 = 128;
              }
              else if (v141 == 3)
              {
                float32x4_t v143 = vld1q_dup_f32((const float *)v140);
                int8x16_t v292 = (int8x16_t)v143;
                float32x4_t v293 = v143;
                float32x4_t v300 = v143;
                float32x4_t v301 = v143;
                float32x4_t v308 = v143;
                float32x4_t v309 = v143;
                float32x4_t v316 = v143;
                float32x4_t v317 = v143;
                uint64_t v142 = 4;
              }
              else if (v69[4])
              {
                uint64_t v142 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v292, 128, v140, v141);
              }
              else
              {
                uint64_t v142 = 0;
                int8x16_t v292 = 0u;
                float32x4_t v293 = 0u;
                float32x4_t v300 = 0u;
                float32x4_t v301 = 0u;
                float32x4_t v308 = 0u;
                float32x4_t v309 = 0u;
                float32x4_t v316 = 0u;
                float32x4_t v317 = 0u;
              }
              uint64_t v151 = v140 + v142;
              unsigned int v152 = v69[5];
              if (v152 == 127)
              {
                float32x4_t v155 = *(float32x4_t *)(v151 + 16);
                float32x4_t v156 = *(float32x4_t *)(v151 + 32);
                float32x4_t v157 = *(float32x4_t *)(v151 + 48);
                float32x4_t v158 = *(float32x4_t *)(v151 + 64);
                float32x4_t v159 = *(float32x4_t *)(v151 + 80);
                float32x4_t v160 = *(float32x4_t *)(v151 + 96);
                float32x4_t v161 = *(float32x4_t *)(v151 + 112);
                int8x16_t v294 = *(int8x16_t *)v151;
                float32x4_t v295 = v156;
                float32x4_t v302 = v155;
                float32x4_t v303 = v157;
                float32x4_t v310 = v158;
                float32x4_t v311 = v160;
                float32x4_t v318 = v159;
                float32x4_t v319 = v161;
                uint64_t v153 = 128;
              }
              else if (v152 == 3)
              {
                float32x4_t v154 = vld1q_dup_f32((const float *)v151);
                int8x16_t v294 = (int8x16_t)v154;
                float32x4_t v295 = v154;
                float32x4_t v302 = v154;
                float32x4_t v303 = v154;
                float32x4_t v310 = v154;
                float32x4_t v311 = v154;
                float32x4_t v318 = v154;
                float32x4_t v319 = v154;
                uint64_t v153 = 4;
              }
              else if (v69[5])
              {
                uint64_t v153 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v294, 128, v151, v152);
              }
              else
              {
                uint64_t v153 = 0;
                int8x16_t v294 = 0u;
                float32x4_t v295 = 0u;
                float32x4_t v302 = 0u;
                float32x4_t v303 = 0u;
                float32x4_t v310 = 0u;
                float32x4_t v311 = 0u;
                float32x4_t v318 = 0u;
                float32x4_t v319 = 0u;
              }
              uint64_t v162 = v151 + v153;
              unsigned int v163 = v69[6];
              if (v163 == 127)
              {
                float32x4_t v166 = *(float32x4_t *)(v162 + 16);
                float32x4_t v167 = *(float32x4_t *)(v162 + 32);
                float32x4_t v168 = *(float32x4_t *)(v162 + 48);
                float32x4_t v169 = *(float32x4_t *)(v162 + 64);
                float32x4_t v170 = *(float32x4_t *)(v162 + 80);
                float32x4_t v171 = *(float32x4_t *)(v162 + 96);
                float32x4_t v172 = *(float32x4_t *)(v162 + 112);
                int8x16_t v324 = *(int8x16_t *)v162;
                float32x4_t v325 = v167;
                float32x4_t v332 = v166;
                float32x4_t v333 = v168;
                float32x4_t v340 = v169;
                float32x4_t v341 = v171;
                float32x4_t v348 = v170;
                float32x4_t v349 = v172;
                uint64_t v164 = 128;
              }
              else if (v163 == 3)
              {
                float32x4_t v165 = vld1q_dup_f32((const float *)v162);
                int8x16_t v324 = (int8x16_t)v165;
                float32x4_t v325 = v165;
                float32x4_t v332 = v165;
                float32x4_t v333 = v165;
                float32x4_t v340 = v165;
                float32x4_t v341 = v165;
                float32x4_t v348 = v165;
                float32x4_t v349 = v165;
                uint64_t v164 = 4;
              }
              else if (v69[6])
              {
                uint64_t v164 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v324, 128, v162, v163);
              }
              else
              {
                uint64_t v164 = 0;
                int8x16_t v324 = 0u;
                float32x4_t v325 = 0u;
                float32x4_t v332 = 0u;
                float32x4_t v333 = 0u;
                float32x4_t v340 = 0u;
                float32x4_t v341 = 0u;
                float32x4_t v348 = 0u;
                float32x4_t v349 = 0u;
              }
              uint64_t v173 = v162 + v164;
              unsigned int v174 = v69[7];
              if (v174 == 127)
              {
                float32x4_t v177 = *(float32x4_t *)(v173 + 16);
                float32x4_t v178 = *(float32x4_t *)(v173 + 32);
                float32x4_t v179 = *(float32x4_t *)(v173 + 48);
                float32x4_t v180 = *(float32x4_t *)(v173 + 80);
                float32x4_t v181 = *(float32x4_t *)(v173 + 96);
                float32x4_t v182 = *(float32x4_t *)(v173 + 112);
                float32x4_t v183 = *(float32x4_t *)(v173 + 64);
                int8x16_t v326 = *(int8x16_t *)v173;
                float32x4_t v327 = v178;
                float32x4_t v334 = v177;
                float32x4_t v335 = v179;
                float32x4_t v342 = v183;
                float32x4_t v343 = v181;
                float32x4_t v350 = v180;
                float32x4_t v351 = v182;
                uint64_t v175 = v283;
                if (v283) {
                  goto LABEL_171;
                }
              }
              else
              {
                if (v174 != 3)
                {
                  if (v69[7])
                  {
                    AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v326, 128, v173, v174);
                    uint64_t v175 = v283;
                    if (!v283) {
                      goto LABEL_202;
                    }
                  }
                  else
                  {
                    int8x16_t v326 = 0u;
                    float32x4_t v327 = 0u;
                    float32x4_t v334 = 0u;
                    float32x4_t v335 = 0u;
                    float32x4_t v342 = 0u;
                    float32x4_t v343 = 0u;
                    float32x4_t v350 = 0u;
                    float32x4_t v351 = 0u;
                    uint64_t v175 = v283;
                    if (!v283) {
                      goto LABEL_202;
                    }
                  }
LABEL_171:
                  if (!v284) {
                    goto LABEL_202;
                  }
                  uint64_t v184 = 0;
                  unint64_t v185 = (unint64_t)v281 << 7;
                  uint64_t v186 = 8 * v282;
                  uint64_t v187 = &v288.i8[v185 + v186];
                  uint64_t v188 = v279;
                  uint64_t v189 = v280;
                  unint64_t v190 = 8 * v284;
                  if (v190 <= 1) {
                    unint64_t v191 = 1;
                  }
                  else {
                    unint64_t v191 = 8 * v284;
                  }
                  unint64_t v192 = v185 + v186;
                  unsigned int v193 = &v288.i8[v185 + v186];
                  if (v191) {
                    BOOL v194 = (v191 - 1) >> 32 == 0;
                  }
                  else {
                    BOOL v194 = 0;
                  }
                  char v195 = !v194;
                  uint64_t v196 = v191 & 0x7FFFFFFE0;
                  uint64_t v197 = v191 & 0x7FFFFFFF8;
                  unsigned int v198 = (char *)&v289 + v192;
                  unsigned int v199 = (long long *)(v279 + 16);
                  int v200 = v187;
                  uint64_t v201 = v279;
                  while (2)
                  {
                    int v202 = (char *)(v188 + v189 * v184);
                    int v203 = &v187[128 * v184];
                    if ((unint64_t)(&v193[128 * v184] - v202) < 0x20) {
                      char v204 = 1;
                    }
                    else {
                      char v204 = v195;
                    }
                    if (v204)
                    {
                      int v205 = 0;
LABEL_199:
                      unsigned int v215 = v205 + 1;
                      do
                      {
                        char v216 = *v202++;
                        *v203++ = v216;
                      }
                      while (v190 > v215++);
                    }
                    else
                    {
                      if (v191 >= 0x20)
                      {
                        unint64_t v207 = v199;
                        unsigned int v208 = v198;
                        uint64_t v209 = v191 & 0x7FFFFFFE0;
                        do
                        {
                          long long v210 = *v207;
                          *(v208 - 1) = *(v207 - 1);
                          *unsigned int v208 = v210;
                          v208 += 2;
                          v207 += 2;
                          v209 -= 32;
                        }
                        while (v209);
                        if (v191 == v196) {
                          goto LABEL_182;
                        }
                        uint64_t v206 = v191 & 0x7FFFFFFE0;
                        if ((v191 & 0x18) == 0)
                        {
                          v202 += v196;
                          v203 += v196;
                          int v205 = v191 & 0xFFFFFFE0;
                          goto LABEL_199;
                        }
                      }
                      else
                      {
                        uint64_t v206 = 0;
                      }
                      v203 += v197;
                      unint64_t v211 = v206 - (v191 & 0x7FFFFFFF8);
                      unsigned int v212 = (uint64_t *)(v201 + v206);
                      unsigned int v213 = &v200[v206];
                      do
                      {
                        uint64_t v214 = *v212++;
                        *(void *)unsigned int v213 = v214;
                        v213 += 8;
                        v211 += 8;
                      }
                      while (v211);
                      if (v191 != v197)
                      {
                        v202 += v197;
                        int v205 = v191 & 0xFFFFFFF8;
                        goto LABEL_199;
                      }
                    }
LABEL_182:
                    ++v184;
                    v198 += 128;
                    unsigned int v199 = (long long *)((char *)v199 + v189);
                    v201 += v189;
                    v200 += 128;
                    if (v184 == v175) {
                      goto LABEL_202;
                    }
                    continue;
                  }
                }
                float32x4_t v176 = vld1q_dup_f32((const float *)v173);
                int8x16_t v326 = (int8x16_t)v176;
                float32x4_t v327 = v176;
                float32x4_t v334 = v176;
                float32x4_t v335 = v176;
                float32x4_t v342 = v176;
                float32x4_t v343 = v176;
                float32x4_t v350 = v176;
                float32x4_t v351 = v176;
                uint64_t v175 = v283;
                if (v283) {
                  goto LABEL_171;
                }
              }
LABEL_202:
              uint64_t v218 = 0;
              __int32 v219 = v277;
              unsigned int v220 = v278;
              int v221 = v285;
              int v222 = v286;
              unsigned int v34 = a7;
              uint64_t v25 = v272;
              uint64_t v29 = 2 * a11;
              do
              {
                uint64_t v233 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,2u>::kSubblockPositions[v218 + 1];
                uint64_t v234 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,2u>::kSubblockPositions[v218];
                unsigned int v235 = (v221 - 4 * v234) & ~((v221 - 4 * (int)v234) >> 31);
                if (v235 >= 4) {
                  unsigned int v235 = 4;
                }
                unsigned int v236 = (v222 - 4 * v233) & ~((v222 - 4 * (int)v233) >> 31);
                if (v236 >= 4) {
                  unsigned int v236 = 4;
                }
                if (v235) {
                  BOOL v237 = v236 == 0;
                }
                else {
                  BOOL v237 = 1;
                }
                if (v237)
                {
                  char v232 = 0;
                }
                else
                {
                  long long v223 = &v288 + 32 * v233 + 2 * v234;
                  int8x16_t v224 = *v223;
                  int8x16_t v225 = v223[1];
                  int8x16_t v226 = v223[8];
                  int8x16_t v227 = v223[9];
                  int8x16_t v228 = v223[16];
                  int8x16_t v229 = v223[17];
                  v223 += 24;
                  int8x16_t v230 = *v223;
                  int8x16_t v231 = v223[1];
                  *__int32 v219 = v224;
                  v219[1] = v226;
                  v219[2] = v225;
                  v219[3] = v227;
                  v219[4] = v228;
                  v219[5] = v230;
                  v219[6] = v229;
                  v219[7] = v231;
                  v219 += 8;
                  char v232 = 127;
                }
                *v220++ = v232;
                v218 += 2;
              }
              while (v218 != 16);
LABEL_95:
              int v71 = __dst;
              if (v275) {
                goto LABEL_27;
              }
              goto LABEL_28;
            }
            uint64_t v76 = (int8x16_t *)v287;
          }
          else
          {
            uint64_t v76 = v71;
            if (v72) {
              goto LABEL_93;
            }
          }
          uint64_t v77 = 0;
          float32x4_t v78 = v76;
          do
          {
            uint64_t v92 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,2u>::kSubblockPositions[v77 + 1];
            uint64_t v93 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,2u>::kSubblockPositions[v77];
            unsigned int v94 = (v39 - 4 * v93) & ~((int)(v39 - 4 * v93) >> 31);
            if (v94 >= 4) {
              unsigned int v94 = 4;
            }
            unsigned int v95 = (v33 - 4 * v92) & ~((int)(v33 - 4 * v92) >> 31);
            if (v95 >= 4) {
              unsigned int v95 = 4;
            }
            if (v94) {
              BOOL v96 = v95 == 0;
            }
            else {
              BOOL v96 = 1;
            }
            if (v96)
            {
              char v91 = 0;
            }
            else
            {
              float32x4_t v79 = (long long *)(v70 + 4 * a11 * v92 + 32 * v93);
              float32x4_t v80 = (long long *)((char *)v79 + v28);
              long long v82 = *v79;
              long long v83 = v79[1];
              float32x4_t v81 = (long long *)((char *)v79 + v29);
              long long v84 = *v80;
              long long v85 = v80[1];
              long long v87 = *v81;
              long long v88 = v81[1];
              unsigned int v86 = (long long *)((char *)v81 + v28);
              long long v89 = *v86;
              long long v90 = v86[1];
              *float32x4_t v78 = (int8x16_t)v82;
              v78[1] = (int8x16_t)v84;
              v78[2] = (int8x16_t)v83;
              v78[3] = (int8x16_t)v85;
              v78[4] = (int8x16_t)v87;
              v78[5] = (int8x16_t)v89;
              v78[6] = (int8x16_t)v88;
              v78[7] = (int8x16_t)v90;
              v78 += 8;
              char v91 = 127;
            }
            *v69++ = v91;
            v77 += 2;
          }
          while (v77 != 16);
          unsigned int v34 = a7;
          if (v275)
          {
LABEL_27:
            memcpy(v71, v76, 0x400uLL);
            uint64_t v29 = 2 * a11;
            uint64_t v25 = v272;
          }
LABEL_28:
          BOOL v20 = v32++ == v263 >> 4;
        }
        while (!v20);
        BOOL v20 = v16++ == v255;
      }
      while (!v20);
    }
  }
}

uint64_t AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, char a12)
{
  uint64_t v312 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v229 = a8;
  unsigned int v214 = a8 + a10 - 1;
  uint64_t v230 = a1;
  if (*(void *)(a1 + 168)) {
    int v17 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v17 = 0;
  }
  unsigned int v18 = a5 - 1;
  unsigned int v19 = a6 - 1;
  unsigned int v20 = a8 >> 3;
  unsigned int v213 = v214 >> 3;
  BOOL v21 = (v17 & 0xD00) == 0 || v17 == 768;
  int v22 = v17 & 0xE00;
  int v24 = !v21 && v22 != 1024;
  int v234 = v24;
  uint64_t result = a1;
  if (*(unsigned char *)(a1 + 232))
  {
    unsigned int v26 = *(unsigned __int8 *)(a1 + 255);
    unsigned int v27 = *(unsigned __int8 *)(a1 + 254);
    char v28 = __clz(v18);
    if (1 << v26 >= a6 || a5 >> v27)
    {
      if (!(a6 >> v26) && 1 << v27 < a5)
      {
        if (a6 < 2) {
          unsigned int v31 = 0;
        }
        else {
          unsigned int v31 = __clz(~(-1 << -(char)__clz(v19))) - 32;
        }
        v27 += v26 + v31;
        unsigned int v26 = -v31;
      }
    }
    else
    {
      unsigned int v29 = 32 - __clz(~(-1 << -v28));
      unsigned int v30 = v27 + v26;
      if (a5 < 2) {
        unsigned int v29 = 0;
      }
      unsigned int v26 = v30 - v29;
      unsigned int v27 = v29;
    }
    if (a5 < 2)
    {
      if (v27) {
        goto LABEL_27;
      }
    }
    else if (32 - __clz(~(-1 << -v28)) < v27)
    {
LABEL_27:
      BOOL v224 = 0;
LABEL_32:
      unsigned int v221 = v27 - 4;
      unsigned int v218 = v26 - 3;
      int v33 = -1 << *(unsigned char *)(*(void *)(a1 + 208) + 48);
      unsigned int v211 = (((~v33 + a5) & v33) + ~(-1 << v27)) >> v27;
      goto LABEL_33;
    }
    if (a6 < 2) {
      unsigned int v32 = 0;
    }
    else {
      unsigned int v32 = 32 - __clz(~(-1 << -(char)__clz(v19)));
    }
    BOOL v224 = v32 >= v26;
    goto LABEL_32;
  }
  BOOL v224 = 0;
  unsigned int v211 = 0;
  unsigned int v218 = 0;
  unsigned int v221 = 0;
LABEL_33:
  if (v20 <= v213)
  {
    unsigned int v223 = a7 + a9 - 1;
    unsigned int v210 = a7 >> 4;
    if (a7 >> 4 <= v223 >> 4)
    {
      unsigned int v232 = v18 >> 4;
      unsigned int v209 = v19 >> 3;
      int v231 = (v18 & 0xF) + 1;
      int v208 = (v19 & 7) + 1;
      int v207 = ~(-1 << v218);
      uint32x2_t v34 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0xF00000007);
      int8x8_t v35 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32(vadd_s32((int32x2_t)vshl_u32(v34, (uint32x2_t)0xFFFFFFFCFFFFFFFDLL), (int32x2_t)-1))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x2000000010, v34));
      __int32 v219 = v35.i32[0] | v35.i32[1];
      int8x8_t v217 = v35;
      BOOL v216 = v35.i32[0] != 0;
      BOOL v215 = v35.i32[1] != 0;
      unsigned int v222 = a7;
      do
      {
        unsigned int v36 = (8 * v20) | 7;
        if (8 * v20 <= v229) {
          int v37 = v229;
        }
        else {
          int v37 = 8 * v20;
        }
        if (v214 < v36) {
          unsigned int v36 = v214;
        }
        int v220 = v37 - 8 * v20;
        int v228 = v36 - v37 + 1;
        unsigned int v38 = v210;
        int v39 = v208;
        if (v20 != v209) {
          int v39 = 8;
        }
        unsigned int v235 = v39;
        int v40 = v20 & v207;
        uint64_t v227 = a3 + (v37 - v229) * a11;
        do
        {
          unsigned int v41 = 16 * v38;
          unsigned int v42 = 16 * (v38 + 1) - 1;
          if (16 * v38 <= a7) {
            int v43 = a7;
          }
          else {
            int v43 = 16 * v38;
          }
          if (v223 < v42) {
            unsigned int v42 = v223;
          }
          int v44 = v42 - v43 + 1;
          if (v38 == v232) {
            unsigned int v45 = v231;
          }
          else {
            unsigned int v45 = 16;
          }
          BOOL v46 = 1;
          if (8 * v20 >= v229 && v41 >= a7)
          {
            int v47 = v231;
            if (v38 != v232) {
              int v47 = 16;
            }
            BOOL v46 = v44 != v47 || v228 != v235;
          }
          if (v224)
          {
            if (v221 | v218)
            {
              int v49 = 0;
              uint64_t v50 = 0;
              int v51 = 1;
              BOOL v52 = v218 != 0;
              BOOL v53 = v221 != 0;
              unsigned int v54 = v218;
              unsigned int v55 = v221;
              do
              {
                --v54;
                if (v52) {
                  v50 |= (unint64_t)(v40 & v51) << v49++;
                }
                else {
                  unsigned int v54 = 0;
                }
                --v55;
                if (v53) {
                  v50 |= (unint64_t)(v38 & ~(-1 << v221) & v51) << v49++;
                }
                else {
                  unsigned int v55 = 0;
                }
                v51 *= 2;
                --v49;
                BOOL v53 = v55 != 0;
                BOOL v52 = v54 != 0;
              }
              while (v55 | v54);
            }
            else
            {
              uint64_t v50 = 0;
            }
            uint64_t v63 = *(void *)(result + 320) * ((v38 >> v221) + (v20 >> v218) * v211) + (v50 << 10);
          }
          else
          {
            if (v219)
            {
              int v56 = 0;
              uint64_t v57 = 0;
              int v58 = 1;
              BOOL v59 = v216;
              BOOL v60 = v215;
              __int32 v61 = v217.i32[0];
              __int32 v62 = v217.i32[1];
              do
              {
                --v61;
                if (v59) {
                  v57 |= (unint64_t)(v58 & v20) << v56++;
                }
                else {
                  __int32 v61 = 0;
                }
                --v62;
                if (v60) {
                  v57 |= (unint64_t)(v58 & v38) << v56++;
                }
                else {
                  __int32 v62 = 0;
                }
                v58 *= 2;
                --v56;
                BOOL v60 = v62 != 0;
                BOOL v59 = v61 != 0;
              }
              while (v62 | v61);
            }
            else
            {
              uint64_t v57 = 0;
            }
            uint64_t v63 = v57 << 10;
          }
          unsigned int v64 = *(_DWORD *)(result + 128) >> (*(unsigned char *)(result + 144) + a12);
          if (v64 <= 1) {
            unsigned int v64 = 1;
          }
          unsigned int v65 = v64 + 15;
          if (v65 < 0x20) {
            unsigned int v66 = 0;
          }
          else {
            unsigned int v66 = 32 - __clz(~(-1 << -(char)__clz((v65 >> 4) - 1)));
          }
          unsigned int v67 = *(_DWORD *)(result + 132) >> (*(unsigned char *)(result + 144) + a12);
          if (v67 <= 1) {
            unsigned int v67 = 1;
          }
          unsigned int v68 = v67 + 7;
          if (v68 < 0x10)
          {
            unsigned int v69 = 0;
            if (!v66)
            {
LABEL_109:
              uint64_t v71 = 0;
              goto LABEL_110;
            }
          }
          else
          {
            unsigned int v69 = 32 - __clz(~(-1 << -(char)__clz((v68 >> 3) - 1)));
            if (!(v69 | v66)) {
              goto LABEL_109;
            }
          }
          int v70 = 0;
          uint64_t v71 = 0;
          BOOL v72 = v66 != 0;
          BOOL v73 = v69 != 0;
          int v74 = 1;
          do
          {
            --v66;
            if (v72) {
              v71 |= (unint64_t)(v74 & v38) << v70++;
            }
            else {
              unsigned int v66 = 0;
            }
            --v69;
            if (v73) {
              v71 |= (unint64_t)(v74 & v20) << v70++;
            }
            else {
              unsigned int v69 = 0;
            }
            v74 *= 2;
            --v70;
            BOOL v73 = v69 != 0;
            BOOL v72 = v66 != 0;
          }
          while (v69 | v66);
LABEL_110:
          unsigned int v75 = v43 - a7;
          int v76 = v45 < 0x10 || v46;
          uint64_t v77 = (char *)(a4 + 8 * v71);
          unint64_t v78 = v227 + 8 * v75;
          float32x4_t v79 = (int8x16_t *)(a2 + v63);
          if (v235 < 8) {
            int v80 = 1;
          }
          else {
            int v80 = v76;
          }
          uint64_t v233 = v79;
          if (v234)
          {
            float32x4_t v81 = (int8x16_t *)__dst;
            if (!v80) {
              goto LABEL_122;
            }
            long long v82 = (char *)(a4 + 8 * v71);
            int v83 = v44;
            char v84 = v45;
            memcpy(__dst, v79, sizeof(__dst));
            unsigned int v41 = 16 * v38;
            LOBYTE(v45) = v84;
            int v44 = v83;
            uint64_t v77 = v82;
            int v40 = v20 & v207;
            uint64_t result = v230;
          }
          else
          {
            float32x4_t v81 = v79;
            if (!v80)
            {
LABEL_122:
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock(v78, a11, v81, v77, v45, v235);
              goto LABEL_123;
            }
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE15ELj2ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = result;
          BOOL v237 = v81;
          unsigned __int8 v245 = v45;
          unsigned __int8 v246 = v235;
          unsigned int v241 = v220;
          unsigned int v242 = v43 - v41;
          unsigned int v238 = v77;
          unint64_t v239 = v78;
          uint64_t v240 = a11;
          unsigned int v243 = v228;
          unsigned int v244 = v44;
          if (v46)
          {
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(result + 8) + 7384), block);
LABEL_123:
            a7 = v222;
            unsigned int v85 = v38 + 1;
            goto LABEL_215;
          }
          unsigned int v86 = *v77;
          if (v86 == 127)
          {
            float32x4_t v89 = (float32x4_t)v81[1];
            float32x4_t v90 = (float32x4_t)v81[2];
            float32x4_t v91 = (float32x4_t)v81[3];
            float32x4_t v92 = (float32x4_t)v81[4];
            float32x4_t v93 = (float32x4_t)v81[5];
            float32x4_t v94 = (float32x4_t)v81[6];
            float32x4_t v95 = (float32x4_t)v81[7];
            int8x16_t v248 = *v81;
            float32x4_t v249 = v90;
            float32x4_t v256 = v89;
            float32x4_t v257 = v91;
            float32x4_t v264 = v92;
            float32x4_t v265 = v94;
            float32x4_t v272 = v93;
            float32x4_t v273 = v95;
            uint64_t v87 = 128;
          }
          else if (v86 == 3)
          {
            float32x4_t v88 = vld1q_dup_f32((const float *)v81->i32);
            int8x16_t v248 = (int8x16_t)v88;
            float32x4_t v249 = v88;
            float32x4_t v256 = v88;
            float32x4_t v257 = v88;
            float32x4_t v264 = v88;
            float32x4_t v265 = v88;
            float32x4_t v272 = v88;
            float32x4_t v273 = v88;
            uint64_t v87 = 4;
          }
          else if (*v77)
          {
            uint64_t v87 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v248, 128, (uint64_t)v81, v86);
          }
          else
          {
            uint64_t v87 = 0;
            float32x4_t v249 = 0u;
            int8x16_t v248 = 0u;
            float32x4_t v256 = 0u;
            float32x4_t v257 = 0u;
            float32x4_t v264 = 0u;
            float32x4_t v265 = 0u;
            float32x4_t v272 = 0u;
            float32x4_t v273 = 0u;
          }
          uint64_t v96 = (uint64_t)v81->i64 + v87;
          unsigned int v97 = v77[1];
          if (v97 == 127)
          {
            float32x4_t v100 = *(float32x4_t *)(v96 + 16);
            float32x4_t v101 = *(float32x4_t *)(v96 + 32);
            float32x4_t v102 = *(float32x4_t *)(v96 + 48);
            float32x4_t v103 = *(float32x4_t *)(v96 + 64);
            float32x4_t v104 = *(float32x4_t *)(v96 + 80);
            float32x4_t v105 = *(float32x4_t *)(v96 + 96);
            float32x4_t v106 = *(float32x4_t *)(v96 + 112);
            int8x16_t v250 = *(int8x16_t *)v96;
            float32x4_t v251 = v101;
            float32x4_t v258 = v100;
            float32x4_t v259 = v102;
            float32x4_t v266 = v103;
            float32x4_t v267 = v105;
            float32x4_t v274 = v104;
            float32x4_t v275 = v106;
            uint64_t v98 = 128;
            unsigned int v85 = v38 + 1;
          }
          else
          {
            unsigned int v85 = v38 + 1;
            if (v97 == 3)
            {
              float32x4_t v99 = vld1q_dup_f32((const float *)v96);
              int8x16_t v250 = (int8x16_t)v99;
              float32x4_t v251 = v99;
              float32x4_t v258 = v99;
              float32x4_t v259 = v99;
              float32x4_t v266 = v99;
              float32x4_t v267 = v99;
              float32x4_t v274 = v99;
              float32x4_t v275 = v99;
              uint64_t v98 = 4;
            }
            else if (v77[1])
            {
              uint64_t v98 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v250, 128, v96, v97);
            }
            else
            {
              uint64_t v98 = 0;
              int8x16_t v250 = 0u;
              float32x4_t v251 = 0u;
              float32x4_t v258 = 0u;
              float32x4_t v259 = 0u;
              float32x4_t v266 = 0u;
              float32x4_t v267 = 0u;
              float32x4_t v274 = 0u;
              float32x4_t v275 = 0u;
            }
          }
          uint64_t v107 = v96 + v98;
          unsigned int v108 = v77[2];
          if (v108 == 127)
          {
            float32x4_t v111 = *(float32x4_t *)(v107 + 16);
            float32x4_t v112 = *(float32x4_t *)(v107 + 32);
            float32x4_t v113 = *(float32x4_t *)(v107 + 48);
            float32x4_t v114 = *(float32x4_t *)(v107 + 64);
            float32x4_t v115 = *(float32x4_t *)(v107 + 80);
            float32x4_t v116 = *(float32x4_t *)(v107 + 96);
            float32x4_t v117 = *(float32x4_t *)(v107 + 112);
            int8x16_t v280 = *(int8x16_t *)v107;
            float32x4_t v281 = v112;
            float32x4_t v288 = v111;
            float32x4_t v289 = v113;
            float32x4_t v296 = v114;
            float32x4_t v297 = v116;
            float32x4_t v304 = v115;
            float32x4_t v305 = v117;
            uint64_t v109 = 128;
          }
          else if (v108 == 3)
          {
            float32x4_t v110 = vld1q_dup_f32((const float *)v107);
            int8x16_t v280 = (int8x16_t)v110;
            float32x4_t v281 = v110;
            float32x4_t v288 = v110;
            float32x4_t v289 = v110;
            float32x4_t v296 = v110;
            float32x4_t v297 = v110;
            float32x4_t v304 = v110;
            float32x4_t v305 = v110;
            uint64_t v109 = 4;
          }
          else if (v77[2])
          {
            uint64_t v109 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v280, 128, v107, v108);
          }
          else
          {
            uint64_t v109 = 0;
            int8x16_t v280 = 0u;
            float32x4_t v281 = 0u;
            float32x4_t v288 = 0u;
            float32x4_t v289 = 0u;
            float32x4_t v296 = 0u;
            float32x4_t v297 = 0u;
            float32x4_t v304 = 0u;
            float32x4_t v305 = 0u;
          }
          uint64_t v118 = v107 + v109;
          unsigned int v119 = v77[3];
          if (v119 == 127)
          {
            float32x4_t v122 = *(float32x4_t *)(v118 + 16);
            float32x4_t v123 = *(float32x4_t *)(v118 + 32);
            float32x4_t v124 = *(float32x4_t *)(v118 + 48);
            float32x4_t v125 = *(float32x4_t *)(v118 + 64);
            float32x4_t v126 = *(float32x4_t *)(v118 + 80);
            float32x4_t v127 = *(float32x4_t *)(v118 + 96);
            float32x4_t v128 = *(float32x4_t *)(v118 + 112);
            int8x16_t v282 = *(int8x16_t *)v118;
            float32x4_t v283 = v123;
            float32x4_t v290 = v122;
            float32x4_t v291 = v124;
            float32x4_t v298 = v125;
            float32x4_t v299 = v127;
            float32x4_t v306 = v126;
            float32x4_t v307 = v128;
            uint64_t v120 = 128;
          }
          else if (v119 == 3)
          {
            float32x4_t v121 = vld1q_dup_f32((const float *)v118);
            int8x16_t v282 = (int8x16_t)v121;
            float32x4_t v283 = v121;
            float32x4_t v290 = v121;
            float32x4_t v291 = v121;
            float32x4_t v298 = v121;
            float32x4_t v299 = v121;
            float32x4_t v306 = v121;
            float32x4_t v307 = v121;
            uint64_t v120 = 4;
          }
          else if (v77[3])
          {
            uint64_t v120 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v282, 128, v118, v119);
          }
          else
          {
            uint64_t v120 = 0;
            int8x16_t v282 = 0u;
            float32x4_t v283 = 0u;
            float32x4_t v290 = 0u;
            float32x4_t v291 = 0u;
            float32x4_t v298 = 0u;
            float32x4_t v299 = 0u;
            float32x4_t v306 = 0u;
            float32x4_t v307 = 0u;
          }
          uint64_t v129 = v118 + v120;
          unsigned int v130 = v77[4];
          if (v130 == 127)
          {
            float32x4_t v133 = *(float32x4_t *)(v129 + 16);
            float32x4_t v134 = *(float32x4_t *)(v129 + 32);
            float32x4_t v135 = *(float32x4_t *)(v129 + 48);
            float32x4_t v136 = *(float32x4_t *)(v129 + 64);
            float32x4_t v137 = *(float32x4_t *)(v129 + 80);
            float32x4_t v138 = *(float32x4_t *)(v129 + 96);
            float32x4_t v139 = *(float32x4_t *)(v129 + 112);
            int8x16_t v252 = *(int8x16_t *)v129;
            float32x4_t v253 = v134;
            float32x4_t v260 = v133;
            float32x4_t v261 = v135;
            float32x4_t v268 = v136;
            float32x4_t v269 = v138;
            float32x4_t v276 = v137;
            float32x4_t v277 = v139;
            uint64_t v131 = 128;
          }
          else if (v130 == 3)
          {
            float32x4_t v132 = vld1q_dup_f32((const float *)v129);
            int8x16_t v252 = (int8x16_t)v132;
            float32x4_t v253 = v132;
            float32x4_t v260 = v132;
            float32x4_t v261 = v132;
            float32x4_t v268 = v132;
            float32x4_t v269 = v132;
            float32x4_t v276 = v132;
            float32x4_t v277 = v132;
            uint64_t v131 = 4;
          }
          else if (v77[4])
          {
            uint64_t v131 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v252, 128, v129, v130);
          }
          else
          {
            uint64_t v131 = 0;
            int8x16_t v252 = 0u;
            float32x4_t v253 = 0u;
            float32x4_t v260 = 0u;
            float32x4_t v261 = 0u;
            float32x4_t v268 = 0u;
            float32x4_t v269 = 0u;
            float32x4_t v276 = 0u;
            float32x4_t v277 = 0u;
          }
          uint64_t v140 = v129 + v131;
          unsigned int v141 = v77[5];
          if (v141 == 127)
          {
            float32x4_t v144 = *(float32x4_t *)(v140 + 16);
            float32x4_t v145 = *(float32x4_t *)(v140 + 32);
            float32x4_t v146 = *(float32x4_t *)(v140 + 48);
            float32x4_t v147 = *(float32x4_t *)(v140 + 64);
            float32x4_t v148 = *(float32x4_t *)(v140 + 80);
            float32x4_t v149 = *(float32x4_t *)(v140 + 96);
            float32x4_t v150 = *(float32x4_t *)(v140 + 112);
            int8x16_t v254 = *(int8x16_t *)v140;
            float32x4_t v255 = v145;
            float32x4_t v262 = v144;
            float32x4_t v263 = v146;
            float32x4_t v270 = v147;
            float32x4_t v271 = v149;
            float32x4_t v278 = v148;
            float32x4_t v279 = v150;
            uint64_t v142 = 128;
          }
          else if (v141 == 3)
          {
            float32x4_t v143 = vld1q_dup_f32((const float *)v140);
            int8x16_t v254 = (int8x16_t)v143;
            float32x4_t v255 = v143;
            float32x4_t v262 = v143;
            float32x4_t v263 = v143;
            float32x4_t v270 = v143;
            float32x4_t v271 = v143;
            float32x4_t v278 = v143;
            float32x4_t v279 = v143;
            uint64_t v142 = 4;
          }
          else if (v77[5])
          {
            uint64_t v142 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v254, 128, v140, v141);
          }
          else
          {
            uint64_t v142 = 0;
            int8x16_t v254 = 0u;
            float32x4_t v255 = 0u;
            float32x4_t v262 = 0u;
            float32x4_t v263 = 0u;
            float32x4_t v270 = 0u;
            float32x4_t v271 = 0u;
            float32x4_t v278 = 0u;
            float32x4_t v279 = 0u;
          }
          uint64_t v151 = v140 + v142;
          unsigned int v152 = v77[6];
          if (v152 == 127)
          {
            float32x4_t v155 = *(float32x4_t *)(v151 + 16);
            float32x4_t v156 = *(float32x4_t *)(v151 + 32);
            float32x4_t v157 = *(float32x4_t *)(v151 + 48);
            float32x4_t v158 = *(float32x4_t *)(v151 + 64);
            float32x4_t v159 = *(float32x4_t *)(v151 + 80);
            float32x4_t v160 = *(float32x4_t *)(v151 + 96);
            float32x4_t v161 = *(float32x4_t *)(v151 + 112);
            int8x16_t v284 = *(int8x16_t *)v151;
            float32x4_t v285 = v156;
            float32x4_t v292 = v155;
            float32x4_t v293 = v157;
            float32x4_t v300 = v158;
            float32x4_t v301 = v160;
            float32x4_t v308 = v159;
            float32x4_t v309 = v161;
            uint64_t v153 = 128;
          }
          else if (v152 == 3)
          {
            float32x4_t v154 = vld1q_dup_f32((const float *)v151);
            int8x16_t v284 = (int8x16_t)v154;
            float32x4_t v285 = v154;
            float32x4_t v292 = v154;
            float32x4_t v293 = v154;
            float32x4_t v300 = v154;
            float32x4_t v301 = v154;
            float32x4_t v308 = v154;
            float32x4_t v309 = v154;
            uint64_t v153 = 4;
          }
          else if (v77[6])
          {
            uint64_t v153 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v284, 128, v151, v152);
          }
          else
          {
            uint64_t v153 = 0;
            int8x16_t v284 = 0u;
            float32x4_t v285 = 0u;
            float32x4_t v292 = 0u;
            float32x4_t v293 = 0u;
            float32x4_t v300 = 0u;
            float32x4_t v301 = 0u;
            float32x4_t v308 = 0u;
            float32x4_t v309 = 0u;
          }
          uint64_t v162 = v151 + v153;
          unsigned int v163 = v77[7];
          if (v163 == 127)
          {
            float32x4_t v166 = *(float32x4_t *)(v162 + 16);
            float32x4_t v167 = *(float32x4_t *)(v162 + 32);
            float32x4_t v168 = *(float32x4_t *)(v162 + 48);
            float32x4_t v169 = *(float32x4_t *)(v162 + 80);
            float32x4_t v170 = *(float32x4_t *)(v162 + 96);
            float32x4_t v171 = *(float32x4_t *)(v162 + 112);
            float32x4_t v172 = *(float32x4_t *)(v162 + 64);
            int8x16_t v286 = *(int8x16_t *)v162;
            float32x4_t v287 = v167;
            float32x4_t v294 = v166;
            float32x4_t v295 = v168;
            float32x4_t v302 = v172;
            float32x4_t v303 = v170;
            float32x4_t v310 = v169;
            float32x4_t v311 = v171;
            a7 = v222;
            uint64_t v164 = v243;
            if (!v243) {
              goto LABEL_214;
            }
          }
          else
          {
            a7 = v222;
            if (v163 == 3)
            {
              float32x4_t v165 = vld1q_dup_f32((const float *)v162);
              int8x16_t v286 = (int8x16_t)v165;
              float32x4_t v287 = v165;
              float32x4_t v294 = v165;
              float32x4_t v295 = v165;
              float32x4_t v302 = v165;
              float32x4_t v303 = v165;
              float32x4_t v310 = v165;
              float32x4_t v311 = v165;
              uint64_t v164 = v243;
              if (!v243) {
                goto LABEL_214;
              }
            }
            else if (v163)
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v286, 128, v162, v163);
              uint64_t v164 = v243;
              if (!v243) {
                goto LABEL_214;
              }
            }
            else
            {
              int8x16_t v286 = 0u;
              float32x4_t v287 = 0u;
              float32x4_t v294 = 0u;
              float32x4_t v295 = 0u;
              float32x4_t v302 = 0u;
              float32x4_t v303 = 0u;
              float32x4_t v310 = 0u;
              float32x4_t v311 = 0u;
              uint64_t v164 = v243;
              if (!v243) {
                goto LABEL_214;
              }
            }
          }
          if (v244)
          {
            uint64_t v173 = 0;
            unint64_t v174 = (unint64_t)v241 << 7;
            uint64_t v175 = 8 * v242;
            float32x4_t v176 = &v248.i8[v174 + v175];
            unint64_t v177 = v239;
            uint64_t v178 = v240;
            unint64_t v179 = 8 * v244;
            if (v179 <= 1) {
              unint64_t v180 = 1;
            }
            else {
              unint64_t v180 = 8 * v244;
            }
            unint64_t v181 = v174 + v175;
            float32x4_t v182 = &v248.i8[v174 + v175];
            if (v180) {
              BOOL v183 = (v180 - 1) >> 32 == 0;
            }
            else {
              BOOL v183 = 0;
            }
            char v184 = !v183;
            uint64_t v185 = v180 & 0x7FFFFFFE0;
            uint64_t v186 = v180 & 0x7FFFFFFF8;
            uint64_t v187 = (char *)&v249 + v181;
            uint64_t v188 = (long long *)(v239 + 16);
            uint64_t v189 = v176;
            unint64_t v190 = v239;
            do
            {
              unint64_t v191 = (char *)(v177 + v178 * v173);
              unint64_t v192 = &v176[128 * v173];
              if ((unint64_t)(&v182[128 * v173] - v191) < 0x20) {
                char v193 = 1;
              }
              else {
                char v193 = v184;
              }
              if (v193)
              {
                int v194 = 0;
                goto LABEL_211;
              }
              if (v180 >= 0x20)
              {
                uint64_t v196 = v188;
                uint64_t v197 = v187;
                uint64_t v198 = v180 & 0x7FFFFFFE0;
                do
                {
                  long long v199 = *v196;
                  *(v197 - 1) = *(v196 - 1);
                  *uint64_t v197 = v199;
                  v197 += 2;
                  v196 += 2;
                  v198 -= 32;
                }
                while (v198);
                if (v180 == v185) {
                  goto LABEL_194;
                }
                uint64_t v195 = v180 & 0x7FFFFFFE0;
                if ((v180 & 0x18) == 0)
                {
                  v191 += v185;
                  v192 += v185;
                  int v194 = v180 & 0xFFFFFFE0;
                  goto LABEL_211;
                }
              }
              else
              {
                uint64_t v195 = 0;
              }
              v192 += v186;
              unint64_t v200 = v195 - (v180 & 0x7FFFFFFF8);
              uint64_t v201 = (uint64_t *)(v190 + v195);
              int v202 = &v189[v195];
              do
              {
                uint64_t v203 = *v201++;
                *(void *)int v202 = v203;
                v202 += 8;
                v200 += 8;
              }
              while (v200);
              if (v180 == v186) {
                goto LABEL_194;
              }
              v191 += v186;
              int v194 = v180 & 0xFFFFFFF8;
LABEL_211:
              unsigned int v204 = v194 + 1;
              do
              {
                char v205 = *v191++;
                *v192++ = v205;
              }
              while (v179 > v204++);
LABEL_194:
              ++v173;
              v187 += 128;
              uint64_t v188 = (long long *)((char *)v188 + v178);
              v190 += v178;
              v189 += 128;
            }
            while (v173 != v164);
          }
LABEL_214:
          AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)&v248, 128, v237, v238, v245, v246);
LABEL_215:
          if (v234) {
            memcpy(v233, v81, 0x400uLL);
          }
          BOOL v21 = v38 == v223 >> 4;
          unsigned int v38 = v85;
          uint64_t result = v230;
        }
        while (!v21);
        BOOL v21 = v20++ == v213;
      }
      while (!v21);
    }
  }
  return result;
}

uint64_t AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, char a12)
{
  uint64_t v312 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v229 = a8;
  unsigned int v214 = a8 + a10 - 1;
  uint64_t v230 = a1;
  if (*(void *)(a1 + 168)) {
    int v17 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v17 = 0;
  }
  unsigned int v18 = a5 - 1;
  unsigned int v19 = a6 - 1;
  unsigned int v20 = a8 >> 3;
  unsigned int v213 = v214 >> 3;
  BOOL v21 = (v17 & 0xD00) == 0 || v17 == 768;
  int v22 = v17 & 0xE00;
  int v24 = !v21 && v22 != 1024;
  int v234 = v24;
  uint64_t result = a1;
  if (*(unsigned char *)(a1 + 232))
  {
    unsigned int v26 = *(unsigned __int8 *)(a1 + 255);
    unsigned int v27 = *(unsigned __int8 *)(a1 + 254);
    char v28 = __clz(v18);
    if (1 << v26 >= a6 || a5 >> v27)
    {
      if (!(a6 >> v26) && 1 << v27 < a5)
      {
        if (a6 < 2) {
          unsigned int v31 = 0;
        }
        else {
          unsigned int v31 = __clz(~(-1 << -(char)__clz(v19))) - 32;
        }
        v27 += v26 + v31;
        unsigned int v26 = -v31;
      }
    }
    else
    {
      unsigned int v29 = 32 - __clz(~(-1 << -v28));
      unsigned int v30 = v27 + v26;
      if (a5 < 2) {
        unsigned int v29 = 0;
      }
      unsigned int v26 = v30 - v29;
      unsigned int v27 = v29;
    }
    if (a5 < 2)
    {
      if (v27) {
        goto LABEL_27;
      }
    }
    else if (32 - __clz(~(-1 << -v28)) < v27)
    {
LABEL_27:
      BOOL v224 = 0;
LABEL_32:
      unsigned int v221 = v27 - 4;
      unsigned int v218 = v26 - 3;
      int v33 = -1 << *(unsigned char *)(*(void *)(a1 + 208) + 48);
      unsigned int v211 = (((~v33 + a5) & v33) + ~(-1 << v27)) >> v27;
      goto LABEL_33;
    }
    if (a6 < 2) {
      unsigned int v32 = 0;
    }
    else {
      unsigned int v32 = 32 - __clz(~(-1 << -(char)__clz(v19)));
    }
    BOOL v224 = v32 >= v26;
    goto LABEL_32;
  }
  BOOL v224 = 0;
  unsigned int v211 = 0;
  unsigned int v218 = 0;
  unsigned int v221 = 0;
LABEL_33:
  if (v20 <= v213)
  {
    unsigned int v223 = a7 + a9 - 1;
    unsigned int v210 = a7 >> 4;
    if (a7 >> 4 <= v223 >> 4)
    {
      unsigned int v232 = v18 >> 4;
      unsigned int v209 = v19 >> 3;
      int v231 = (v18 & 0xF) + 1;
      int v208 = (v19 & 7) + 1;
      int v207 = ~(-1 << v218);
      uint32x2_t v34 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0xF00000007);
      int8x8_t v35 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32(vadd_s32((int32x2_t)vshl_u32(v34, (uint32x2_t)0xFFFFFFFCFFFFFFFDLL), (int32x2_t)-1))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x2000000010, v34));
      __int32 v219 = v35.i32[0] | v35.i32[1];
      int8x8_t v217 = v35;
      BOOL v216 = v35.i32[0] != 0;
      BOOL v215 = v35.i32[1] != 0;
      unsigned int v222 = a7;
      do
      {
        unsigned int v36 = (8 * v20) | 7;
        if (8 * v20 <= v229) {
          int v37 = v229;
        }
        else {
          int v37 = 8 * v20;
        }
        if (v214 < v36) {
          unsigned int v36 = v214;
        }
        int v220 = v37 - 8 * v20;
        int v228 = v36 - v37 + 1;
        unsigned int v38 = v210;
        int v39 = v208;
        if (v20 != v209) {
          int v39 = 8;
        }
        unsigned int v235 = v39;
        int v40 = v20 & v207;
        uint64_t v227 = a3 + (v37 - v229) * a11;
        do
        {
          unsigned int v41 = 16 * v38;
          unsigned int v42 = 16 * (v38 + 1) - 1;
          if (16 * v38 <= a7) {
            int v43 = a7;
          }
          else {
            int v43 = 16 * v38;
          }
          if (v223 < v42) {
            unsigned int v42 = v223;
          }
          int v44 = v42 - v43 + 1;
          if (v38 == v232) {
            unsigned int v45 = v231;
          }
          else {
            unsigned int v45 = 16;
          }
          BOOL v46 = 1;
          if (8 * v20 >= v229 && v41 >= a7)
          {
            int v47 = v231;
            if (v38 != v232) {
              int v47 = 16;
            }
            BOOL v46 = v44 != v47 || v228 != v235;
          }
          if (v224)
          {
            if (v221 | v218)
            {
              int v49 = 0;
              uint64_t v50 = 0;
              int v51 = 1;
              BOOL v52 = v218 != 0;
              BOOL v53 = v221 != 0;
              unsigned int v54 = v218;
              unsigned int v55 = v221;
              do
              {
                --v54;
                if (v52) {
                  v50 |= (unint64_t)(v40 & v51) << v49++;
                }
                else {
                  unsigned int v54 = 0;
                }
                --v55;
                if (v53) {
                  v50 |= (unint64_t)(v38 & ~(-1 << v221) & v51) << v49++;
                }
                else {
                  unsigned int v55 = 0;
                }
                v51 *= 2;
                --v49;
                BOOL v53 = v55 != 0;
                BOOL v52 = v54 != 0;
              }
              while (v55 | v54);
            }
            else
            {
              uint64_t v50 = 0;
            }
            uint64_t v63 = *(void *)(result + 320) * ((v38 >> v221) + (v20 >> v218) * v211) + (v50 << 10);
          }
          else
          {
            if (v219)
            {
              int v56 = 0;
              uint64_t v57 = 0;
              int v58 = 1;
              BOOL v59 = v216;
              BOOL v60 = v215;
              __int32 v61 = v217.i32[0];
              __int32 v62 = v217.i32[1];
              do
              {
                --v61;
                if (v59) {
                  v57 |= (unint64_t)(v58 & v20) << v56++;
                }
                else {
                  __int32 v61 = 0;
                }
                --v62;
                if (v60) {
                  v57 |= (unint64_t)(v58 & v38) << v56++;
                }
                else {
                  __int32 v62 = 0;
                }
                v58 *= 2;
                --v56;
                BOOL v60 = v62 != 0;
                BOOL v59 = v61 != 0;
              }
              while (v62 | v61);
            }
            else
            {
              uint64_t v57 = 0;
            }
            uint64_t v63 = v57 << 10;
          }
          unsigned int v64 = *(_DWORD *)(result + 128) >> (*(unsigned char *)(result + 144) + a12);
          if (v64 <= 1) {
            unsigned int v64 = 1;
          }
          unsigned int v65 = v64 + 15;
          if (v65 < 0x20) {
            unsigned int v66 = 0;
          }
          else {
            unsigned int v66 = 32 - __clz(~(-1 << -(char)__clz((v65 >> 4) - 1)));
          }
          unsigned int v67 = *(_DWORD *)(result + 132) >> (*(unsigned char *)(result + 144) + a12);
          if (v67 <= 1) {
            unsigned int v67 = 1;
          }
          unsigned int v68 = v67 + 7;
          if (v68 < 0x10)
          {
            unsigned int v69 = 0;
            if (!v66)
            {
LABEL_109:
              uint64_t v71 = 0;
              goto LABEL_110;
            }
          }
          else
          {
            unsigned int v69 = 32 - __clz(~(-1 << -(char)__clz((v68 >> 3) - 1)));
            if (!(v69 | v66)) {
              goto LABEL_109;
            }
          }
          int v70 = 0;
          uint64_t v71 = 0;
          BOOL v72 = v66 != 0;
          BOOL v73 = v69 != 0;
          int v74 = 1;
          do
          {
            --v66;
            if (v72) {
              v71 |= (unint64_t)(v74 & v38) << v70++;
            }
            else {
              unsigned int v66 = 0;
            }
            --v69;
            if (v73) {
              v71 |= (unint64_t)(v74 & v20) << v70++;
            }
            else {
              unsigned int v69 = 0;
            }
            v74 *= 2;
            --v70;
            BOOL v73 = v69 != 0;
            BOOL v72 = v66 != 0;
          }
          while (v69 | v66);
LABEL_110:
          unsigned int v75 = v43 - a7;
          int v76 = v45 < 0x10 || v46;
          uint64_t v77 = (char *)(a4 + 8 * v71);
          unint64_t v78 = (_OWORD *)(v227 + 8 * v75);
          float32x4_t v79 = (void *)(a2 + v63);
          if (v235 < 8) {
            int v80 = 1;
          }
          else {
            int v80 = v76;
          }
          uint64_t v233 = v79;
          if (v234)
          {
            float32x4_t v81 = __dst;
            if (!v80) {
              goto LABEL_122;
            }
            long long v82 = (char *)(a4 + 8 * v71);
            int v83 = v44;
            char v84 = v45;
            memcpy(__dst, v79, sizeof(__dst));
            unsigned int v41 = 16 * v38;
            LOBYTE(v45) = v84;
            int v44 = v83;
            uint64_t v77 = v82;
            int v40 = v20 & v207;
            uint64_t result = v230;
          }
          else
          {
            float32x4_t v81 = v79;
            if (!v80)
            {
LABEL_122:
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock(v78, a11, v81, v77, v45, v235);
              goto LABEL_123;
            }
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE15ELj2ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = result;
          BOOL v237 = v81;
          unsigned __int8 v245 = v45;
          unsigned __int8 v246 = v235;
          unsigned int v241 = v220;
          unsigned int v242 = v43 - v41;
          unsigned int v238 = v77;
          unint64_t v239 = v78;
          uint64_t v240 = a11;
          unsigned int v243 = v228;
          unsigned int v244 = v44;
          if (v46)
          {
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(result + 8) + 7384), block);
LABEL_123:
            a7 = v222;
            unsigned int v85 = v38 + 1;
            goto LABEL_215;
          }
          unsigned int v86 = *v77;
          if (v86 == 127)
          {
            float32x4_t v89 = *((float32x4_t *)v81 + 1);
            float32x4_t v90 = *((float32x4_t *)v81 + 2);
            float32x4_t v91 = *((float32x4_t *)v81 + 3);
            float32x4_t v92 = *((float32x4_t *)v81 + 4);
            float32x4_t v93 = *((float32x4_t *)v81 + 5);
            float32x4_t v94 = *((float32x4_t *)v81 + 6);
            float32x4_t v95 = *((float32x4_t *)v81 + 7);
            int8x16_t v248 = *(int8x16_t *)v81;
            float32x4_t v249 = v90;
            float32x4_t v256 = v89;
            float32x4_t v257 = v91;
            float32x4_t v264 = v92;
            float32x4_t v265 = v94;
            float32x4_t v272 = v93;
            float32x4_t v273 = v95;
            uint64_t v87 = 128;
          }
          else if (v86 == 3)
          {
            float32x4_t v88 = vld1q_dup_f32((const float *)v81);
            int8x16_t v248 = (int8x16_t)v88;
            float32x4_t v249 = v88;
            float32x4_t v256 = v88;
            float32x4_t v257 = v88;
            float32x4_t v264 = v88;
            float32x4_t v265 = v88;
            float32x4_t v272 = v88;
            float32x4_t v273 = v88;
            uint64_t v87 = 4;
          }
          else if (*v77)
          {
            uint64_t v87 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v248, 128, (uint64_t)v81, v86);
          }
          else
          {
            uint64_t v87 = 0;
            float32x4_t v249 = 0u;
            int8x16_t v248 = 0u;
            float32x4_t v256 = 0u;
            float32x4_t v257 = 0u;
            float32x4_t v264 = 0u;
            float32x4_t v265 = 0u;
            float32x4_t v272 = 0u;
            float32x4_t v273 = 0u;
          }
          uint64_t v96 = (uint64_t)v81 + v87;
          unsigned int v97 = v77[1];
          if (v97 == 127)
          {
            float32x4_t v100 = *(float32x4_t *)(v96 + 16);
            float32x4_t v101 = *(float32x4_t *)(v96 + 32);
            float32x4_t v102 = *(float32x4_t *)(v96 + 48);
            float32x4_t v103 = *(float32x4_t *)(v96 + 64);
            float32x4_t v104 = *(float32x4_t *)(v96 + 80);
            float32x4_t v105 = *(float32x4_t *)(v96 + 96);
            float32x4_t v106 = *(float32x4_t *)(v96 + 112);
            int8x16_t v250 = *(int8x16_t *)v96;
            float32x4_t v251 = v101;
            float32x4_t v258 = v100;
            float32x4_t v259 = v102;
            float32x4_t v266 = v103;
            float32x4_t v267 = v105;
            float32x4_t v274 = v104;
            float32x4_t v275 = v106;
            uint64_t v98 = 128;
            unsigned int v85 = v38 + 1;
          }
          else
          {
            unsigned int v85 = v38 + 1;
            if (v97 == 3)
            {
              float32x4_t v99 = vld1q_dup_f32((const float *)v96);
              int8x16_t v250 = (int8x16_t)v99;
              float32x4_t v251 = v99;
              float32x4_t v258 = v99;
              float32x4_t v259 = v99;
              float32x4_t v266 = v99;
              float32x4_t v267 = v99;
              float32x4_t v274 = v99;
              float32x4_t v275 = v99;
              uint64_t v98 = 4;
            }
            else if (v77[1])
            {
              uint64_t v98 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v250, 128, v96, v97);
            }
            else
            {
              uint64_t v98 = 0;
              int8x16_t v250 = 0u;
              float32x4_t v251 = 0u;
              float32x4_t v258 = 0u;
              float32x4_t v259 = 0u;
              float32x4_t v266 = 0u;
              float32x4_t v267 = 0u;
              float32x4_t v274 = 0u;
              float32x4_t v275 = 0u;
            }
          }
          uint64_t v107 = v96 + v98;
          unsigned int v108 = v77[2];
          if (v108 == 127)
          {
            float32x4_t v111 = *(float32x4_t *)(v107 + 16);
            float32x4_t v112 = *(float32x4_t *)(v107 + 32);
            float32x4_t v113 = *(float32x4_t *)(v107 + 48);
            float32x4_t v114 = *(float32x4_t *)(v107 + 64);
            float32x4_t v115 = *(float32x4_t *)(v107 + 80);
            float32x4_t v116 = *(float32x4_t *)(v107 + 96);
            float32x4_t v117 = *(float32x4_t *)(v107 + 112);
            int8x16_t v280 = *(int8x16_t *)v107;
            float32x4_t v281 = v112;
            float32x4_t v288 = v111;
            float32x4_t v289 = v113;
            float32x4_t v296 = v114;
            float32x4_t v297 = v116;
            float32x4_t v304 = v115;
            float32x4_t v305 = v117;
            uint64_t v109 = 128;
          }
          else if (v108 == 3)
          {
            float32x4_t v110 = vld1q_dup_f32((const float *)v107);
            int8x16_t v280 = (int8x16_t)v110;
            float32x4_t v281 = v110;
            float32x4_t v288 = v110;
            float32x4_t v289 = v110;
            float32x4_t v296 = v110;
            float32x4_t v297 = v110;
            float32x4_t v304 = v110;
            float32x4_t v305 = v110;
            uint64_t v109 = 4;
          }
          else if (v77[2])
          {
            uint64_t v109 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v280, 128, v107, v108);
          }
          else
          {
            uint64_t v109 = 0;
            int8x16_t v280 = 0u;
            float32x4_t v281 = 0u;
            float32x4_t v288 = 0u;
            float32x4_t v289 = 0u;
            float32x4_t v296 = 0u;
            float32x4_t v297 = 0u;
            float32x4_t v304 = 0u;
            float32x4_t v305 = 0u;
          }
          uint64_t v118 = v107 + v109;
          unsigned int v119 = v77[3];
          if (v119 == 127)
          {
            float32x4_t v122 = *(float32x4_t *)(v118 + 16);
            float32x4_t v123 = *(float32x4_t *)(v118 + 32);
            float32x4_t v124 = *(float32x4_t *)(v118 + 48);
            float32x4_t v125 = *(float32x4_t *)(v118 + 64);
            float32x4_t v126 = *(float32x4_t *)(v118 + 80);
            float32x4_t v127 = *(float32x4_t *)(v118 + 96);
            float32x4_t v128 = *(float32x4_t *)(v118 + 112);
            int8x16_t v282 = *(int8x16_t *)v118;
            float32x4_t v283 = v123;
            float32x4_t v290 = v122;
            float32x4_t v291 = v124;
            float32x4_t v298 = v125;
            float32x4_t v299 = v127;
            float32x4_t v306 = v126;
            float32x4_t v307 = v128;
            uint64_t v120 = 128;
          }
          else if (v119 == 3)
          {
            float32x4_t v121 = vld1q_dup_f32((const float *)v118);
            int8x16_t v282 = (int8x16_t)v121;
            float32x4_t v283 = v121;
            float32x4_t v290 = v121;
            float32x4_t v291 = v121;
            float32x4_t v298 = v121;
            float32x4_t v299 = v121;
            float32x4_t v306 = v121;
            float32x4_t v307 = v121;
            uint64_t v120 = 4;
          }
          else if (v77[3])
          {
            uint64_t v120 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v282, 128, v118, v119);
          }
          else
          {
            uint64_t v120 = 0;
            int8x16_t v282 = 0u;
            float32x4_t v283 = 0u;
            float32x4_t v290 = 0u;
            float32x4_t v291 = 0u;
            float32x4_t v298 = 0u;
            float32x4_t v299 = 0u;
            float32x4_t v306 = 0u;
            float32x4_t v307 = 0u;
          }
          uint64_t v129 = v118 + v120;
          unsigned int v130 = v77[4];
          if (v130 == 127)
          {
            float32x4_t v133 = *(float32x4_t *)(v129 + 16);
            float32x4_t v134 = *(float32x4_t *)(v129 + 32);
            float32x4_t v135 = *(float32x4_t *)(v129 + 48);
            float32x4_t v136 = *(float32x4_t *)(v129 + 64);
            float32x4_t v137 = *(float32x4_t *)(v129 + 80);
            float32x4_t v138 = *(float32x4_t *)(v129 + 96);
            float32x4_t v139 = *(float32x4_t *)(v129 + 112);
            int8x16_t v252 = *(int8x16_t *)v129;
            float32x4_t v253 = v134;
            float32x4_t v260 = v133;
            float32x4_t v261 = v135;
            float32x4_t v268 = v136;
            float32x4_t v269 = v138;
            float32x4_t v276 = v137;
            float32x4_t v277 = v139;
            uint64_t v131 = 128;
          }
          else if (v130 == 3)
          {
            float32x4_t v132 = vld1q_dup_f32((const float *)v129);
            int8x16_t v252 = (int8x16_t)v132;
            float32x4_t v253 = v132;
            float32x4_t v260 = v132;
            float32x4_t v261 = v132;
            float32x4_t v268 = v132;
            float32x4_t v269 = v132;
            float32x4_t v276 = v132;
            float32x4_t v277 = v132;
            uint64_t v131 = 4;
          }
          else if (v77[4])
          {
            uint64_t v131 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v252, 128, v129, v130);
          }
          else
          {
            uint64_t v131 = 0;
            int8x16_t v252 = 0u;
            float32x4_t v253 = 0u;
            float32x4_t v260 = 0u;
            float32x4_t v261 = 0u;
            float32x4_t v268 = 0u;
            float32x4_t v269 = 0u;
            float32x4_t v276 = 0u;
            float32x4_t v277 = 0u;
          }
          uint64_t v140 = v129 + v131;
          unsigned int v141 = v77[5];
          if (v141 == 127)
          {
            float32x4_t v144 = *(float32x4_t *)(v140 + 16);
            float32x4_t v145 = *(float32x4_t *)(v140 + 32);
            float32x4_t v146 = *(float32x4_t *)(v140 + 48);
            float32x4_t v147 = *(float32x4_t *)(v140 + 64);
            float32x4_t v148 = *(float32x4_t *)(v140 + 80);
            float32x4_t v149 = *(float32x4_t *)(v140 + 96);
            float32x4_t v150 = *(float32x4_t *)(v140 + 112);
            int8x16_t v254 = *(int8x16_t *)v140;
            float32x4_t v255 = v145;
            float32x4_t v262 = v144;
            float32x4_t v263 = v146;
            float32x4_t v270 = v147;
            float32x4_t v271 = v149;
            float32x4_t v278 = v148;
            float32x4_t v279 = v150;
            uint64_t v142 = 128;
          }
          else if (v141 == 3)
          {
            float32x4_t v143 = vld1q_dup_f32((const float *)v140);
            int8x16_t v254 = (int8x16_t)v143;
            float32x4_t v255 = v143;
            float32x4_t v262 = v143;
            float32x4_t v263 = v143;
            float32x4_t v270 = v143;
            float32x4_t v271 = v143;
            float32x4_t v278 = v143;
            float32x4_t v279 = v143;
            uint64_t v142 = 4;
          }
          else if (v77[5])
          {
            uint64_t v142 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v254, 128, v140, v141);
          }
          else
          {
            uint64_t v142 = 0;
            int8x16_t v254 = 0u;
            float32x4_t v255 = 0u;
            float32x4_t v262 = 0u;
            float32x4_t v263 = 0u;
            float32x4_t v270 = 0u;
            float32x4_t v271 = 0u;
            float32x4_t v278 = 0u;
            float32x4_t v279 = 0u;
          }
          uint64_t v151 = v140 + v142;
          unsigned int v152 = v77[6];
          if (v152 == 127)
          {
            float32x4_t v155 = *(float32x4_t *)(v151 + 16);
            float32x4_t v156 = *(float32x4_t *)(v151 + 32);
            float32x4_t v157 = *(float32x4_t *)(v151 + 48);
            float32x4_t v158 = *(float32x4_t *)(v151 + 64);
            float32x4_t v159 = *(float32x4_t *)(v151 + 80);
            float32x4_t v160 = *(float32x4_t *)(v151 + 96);
            float32x4_t v161 = *(float32x4_t *)(v151 + 112);
            int8x16_t v284 = *(int8x16_t *)v151;
            float32x4_t v285 = v156;
            float32x4_t v292 = v155;
            float32x4_t v293 = v157;
            float32x4_t v300 = v158;
            float32x4_t v301 = v160;
            float32x4_t v308 = v159;
            float32x4_t v309 = v161;
            uint64_t v153 = 128;
          }
          else if (v152 == 3)
          {
            float32x4_t v154 = vld1q_dup_f32((const float *)v151);
            int8x16_t v284 = (int8x16_t)v154;
            float32x4_t v285 = v154;
            float32x4_t v292 = v154;
            float32x4_t v293 = v154;
            float32x4_t v300 = v154;
            float32x4_t v301 = v154;
            float32x4_t v308 = v154;
            float32x4_t v309 = v154;
            uint64_t v153 = 4;
          }
          else if (v77[6])
          {
            uint64_t v153 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v284, 128, v151, v152);
          }
          else
          {
            uint64_t v153 = 0;
            int8x16_t v284 = 0u;
            float32x4_t v285 = 0u;
            float32x4_t v292 = 0u;
            float32x4_t v293 = 0u;
            float32x4_t v300 = 0u;
            float32x4_t v301 = 0u;
            float32x4_t v308 = 0u;
            float32x4_t v309 = 0u;
          }
          uint64_t v162 = v151 + v153;
          unsigned int v163 = v77[7];
          if (v163 == 127)
          {
            float32x4_t v166 = *(float32x4_t *)(v162 + 16);
            float32x4_t v167 = *(float32x4_t *)(v162 + 32);
            float32x4_t v168 = *(float32x4_t *)(v162 + 48);
            float32x4_t v169 = *(float32x4_t *)(v162 + 80);
            float32x4_t v170 = *(float32x4_t *)(v162 + 96);
            float32x4_t v171 = *(float32x4_t *)(v162 + 112);
            float32x4_t v172 = *(float32x4_t *)(v162 + 64);
            int8x16_t v286 = *(int8x16_t *)v162;
            float32x4_t v287 = v167;
            float32x4_t v294 = v166;
            float32x4_t v295 = v168;
            float32x4_t v302 = v172;
            float32x4_t v303 = v170;
            float32x4_t v310 = v169;
            float32x4_t v311 = v171;
            a7 = v222;
            uint64_t v164 = v243;
            if (!v243) {
              goto LABEL_214;
            }
          }
          else
          {
            a7 = v222;
            if (v163 == 3)
            {
              float32x4_t v165 = vld1q_dup_f32((const float *)v162);
              int8x16_t v286 = (int8x16_t)v165;
              float32x4_t v287 = v165;
              float32x4_t v294 = v165;
              float32x4_t v295 = v165;
              float32x4_t v302 = v165;
              float32x4_t v303 = v165;
              float32x4_t v310 = v165;
              float32x4_t v311 = v165;
              uint64_t v164 = v243;
              if (!v243) {
                goto LABEL_214;
              }
            }
            else if (v163)
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v286, 128, v162, v163);
              uint64_t v164 = v243;
              if (!v243) {
                goto LABEL_214;
              }
            }
            else
            {
              int8x16_t v286 = 0u;
              float32x4_t v287 = 0u;
              float32x4_t v294 = 0u;
              float32x4_t v295 = 0u;
              float32x4_t v302 = 0u;
              float32x4_t v303 = 0u;
              float32x4_t v310 = 0u;
              float32x4_t v311 = 0u;
              uint64_t v164 = v243;
              if (!v243) {
                goto LABEL_214;
              }
            }
          }
          if (v244)
          {
            uint64_t v173 = 0;
            unint64_t v174 = (unint64_t)v241 << 7;
            uint64_t v175 = 8 * v242;
            float32x4_t v176 = &v248.i8[v174 + v175];
            unint64_t v177 = v239;
            uint64_t v178 = v240;
            unint64_t v179 = 8 * v244;
            if (v179 <= 1) {
              unint64_t v180 = 1;
            }
            else {
              unint64_t v180 = 8 * v244;
            }
            unint64_t v181 = v174 + v175;
            float32x4_t v182 = &v248.i8[v174 + v175];
            if (v180) {
              BOOL v183 = (v180 - 1) >> 32 == 0;
            }
            else {
              BOOL v183 = 0;
            }
            char v184 = !v183;
            uint64_t v185 = v180 & 0x7FFFFFFE0;
            uint64_t v186 = v180 & 0x7FFFFFFF8;
            uint64_t v187 = (char *)&v249 + v181;
            uint64_t v188 = v239 + 1;
            uint64_t v189 = v176;
            unint64_t v190 = v239;
            do
            {
              unint64_t v191 = (char *)v177 + v178 * v173;
              unint64_t v192 = &v176[128 * v173];
              if ((unint64_t)(&v182[128 * v173] - v191) < 0x20) {
                char v193 = 1;
              }
              else {
                char v193 = v184;
              }
              if (v193)
              {
                int v194 = 0;
                goto LABEL_211;
              }
              if (v180 >= 0x20)
              {
                uint64_t v196 = v188;
                uint64_t v197 = v187;
                uint64_t v198 = v180 & 0x7FFFFFFE0;
                do
                {
                  long long v199 = *v196;
                  *(v197 - 1) = *(v196 - 1);
                  *uint64_t v197 = v199;
                  v197 += 2;
                  v196 += 2;
                  v198 -= 32;
                }
                while (v198);
                if (v180 == v185) {
                  goto LABEL_194;
                }
                uint64_t v195 = v180 & 0x7FFFFFFE0;
                if ((v180 & 0x18) == 0)
                {
                  v191 += v185;
                  v192 += v185;
                  int v194 = v180 & 0xFFFFFFE0;
                  goto LABEL_211;
                }
              }
              else
              {
                uint64_t v195 = 0;
              }
              v192 += v186;
              unint64_t v200 = v195 - (v180 & 0x7FFFFFFF8);
              uint64_t v201 = (uint64_t *)((char *)v190 + v195);
              int v202 = &v189[v195];
              do
              {
                uint64_t v203 = *v201++;
                *(void *)int v202 = v203;
                v202 += 8;
                v200 += 8;
              }
              while (v200);
              if (v180 == v186) {
                goto LABEL_194;
              }
              v191 += v186;
              int v194 = v180 & 0xFFFFFFF8;
LABEL_211:
              unsigned int v204 = v194 + 1;
              do
              {
                char v205 = *v191++;
                *v192++ = v205;
              }
              while (v179 > v204++);
LABEL_194:
              ++v173;
              v187 += 128;
              uint64_t v188 = (long long *)((char *)v188 + v178);
              unint64_t v190 = (_OWORD *)((char *)v190 + v178);
              v189 += 128;
            }
            while (v173 != v164);
          }
LABEL_214:
          AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock(&v248, 128, v237, v238, v245, v246);
LABEL_215:
          if (v234) {
            memcpy(v233, v81, 0x400uLL);
          }
          BOOL v21 = v38 == v223 >> 4;
          unsigned int v38 = v85;
          uint64_t result = v230;
        }
        while (!v21);
        BOOL v21 = v20++ == v213;
      }
      while (!v21);
    }
  }
  return result;
}

void *AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, int a12)
{
  uint64_t v311 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  uint64_t v17 = a1;
  unsigned int v228 = a8;
  unsigned int v18 = a8 >> 3;
  unsigned int v212 = a8 + a10 - 1;
  unsigned int v214 = v212 >> 3;
  unsigned int v19 = *(unsigned __int8 *)(*(void *)(a1 + 208) + 88);
  unsigned int v20 = *(_DWORD *)(a1 + 112);
  uint64_t v229 = v17;
  if (*(void *)(v17 + 168))
  {
    __int16 CacheMode = IOSurfaceGetCacheMode();
    uint64_t v17 = v229;
    int v22 = CacheMode & 0xF00;
  }
  else
  {
    int v22 = 0;
  }
  BOOL v23 = (v22 & 0xD00) == 0 || v22 == 768;
  int v24 = v22 & 0xE00;
  int v26 = !v23 && v24 != 1024;
  int v233 = v26;
  uint64_t result = (void *)AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::isLevelTiled(v17, *(_DWORD *)(v17 + 144) + a12);
  uint64_t v28 = v229;
  int v222 = (int)result;
  if (v18 <= v214)
  {
    unsigned int v221 = a7 + a9 - 1;
    unsigned int v211 = a7 >> 4;
    if (a7 >> 4 <= v221 >> 4)
    {
      unsigned int v208 = a5 - 1;
      unsigned int v231 = (a5 - 1) >> 4;
      int v230 = ((a5 - 1) & 0xF) + 1;
      int v209 = ((a6 - 1) & 7) + 1;
      unsigned int v210 = (a6 - 1) >> 3;
      uint32x2_t v29 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0xF00000007);
      int8x8_t v30 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32(vadd_s32((int32x2_t)vshl_u32(v29, (uint32x2_t)0xFFFFFFFCFFFFFFFDLL), (int32x2_t)-1))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x2000000010, v29));
      __int32 v219 = v30.i32[0] | v30.i32[1];
      int8x8_t v218 = v30;
      BOOL v217 = v30.i32[0] != 0;
      BOOL v216 = v30.i32[1] != 0;
      unint64_t v207 = 8 * v20 * (unint64_t)v19;
      unsigned int v220 = a7;
      do
      {
        unsigned int v31 = (8 * v18) | 7;
        if (8 * v18 <= v228) {
          int v32 = v228;
        }
        else {
          int v32 = 8 * v18;
        }
        unsigned int v33 = v211;
        if (v212 < v31) {
          unsigned int v31 = v212;
        }
        unsigned int v227 = 8 * v18;
        int v215 = v32 - 8 * v18;
        int v226 = v31 - v32 + 1;
        int v34 = v209;
        if (v18 != v210) {
          int v34 = 8;
        }
        unsigned int v234 = v34;
        uint64_t v225 = a3 + (v32 - v228) * a11;
        do
        {
          unsigned int v35 = 16 * v33;
          unsigned int v36 = 16 * (v33 + 1) - 1;
          if (16 * v33 <= a7) {
            int v37 = a7;
          }
          else {
            int v37 = 16 * v33;
          }
          if (v221 < v36) {
            unsigned int v36 = v221;
          }
          int v38 = v36 - v37 + 1;
          if (v33 == v231) {
            unsigned int v39 = v230;
          }
          else {
            unsigned int v39 = 16;
          }
          BOOL v40 = 1;
          if (v227 >= v228 && v35 >= a7)
          {
            int v41 = v230;
            if (v33 != v231) {
              int v41 = 16;
            }
            BOOL v40 = v38 != v41 || v226 != v234;
          }
          if (v222)
          {
            unsigned int v62 = 0;
            uint64_t v63 = v207 >> (*(unsigned char *)(v28 + 57) != 0);
            char v64 = 1;
            if (v63 > 127)
            {
              if (v63 > 511)
              {
                if (v63 == 512)
                {
                  char v65 = 0;
                  unsigned int v62 = 16;
                  unsigned int v66 = 16;
                }
                else
                {
                  char v65 = 1;
                  unsigned int v66 = 0;
                  if (v63 == 1024)
                  {
                    unsigned int v66 = 8;
                    unsigned int v62 = 16;
                  }
                }
              }
              else if (v63 == 128)
              {
                char v64 = 0;
                char v65 = 0;
                unsigned int v62 = 32;
                unsigned int v66 = 32;
              }
              else
              {
                char v65 = 1;
                unsigned int v66 = 0;
                if (v63 == 256)
                {
                  char v64 = 0;
                  char v65 = 0;
                  unsigned int v66 = 16;
                  unsigned int v62 = 32;
                }
              }
            }
            else
            {
              char v65 = 1;
              unsigned int v66 = 0;
              switch(v63)
              {
                case 4:
                  char v64 = 0;
                  char v65 = 0;
                  unsigned int v66 = 128;
                  unsigned int v62 = 256;
                  break;
                case 5:
                case 6:
                case 7:
                case 9:
                case 10:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 17:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                  break;
                case 8:
                  char v64 = 0;
                  char v65 = 0;
                  unsigned int v62 = 128;
                  unsigned int v66 = 128;
                  break;
                case 16:
                  char v64 = 0;
                  char v65 = 0;
                  unsigned int v66 = 64;
                  unsigned int v62 = 128;
                  break;
                case 32:
                  char v64 = 0;
                  char v65 = 0;
                  unsigned int v62 = 64;
                  unsigned int v66 = 64;
                  break;
                default:
                  if (v63 == 64)
                  {
                    char v64 = 0;
                    char v65 = 0;
                    unsigned int v66 = 32;
                    unsigned int v62 = 64;
                  }
                  break;
              }
            }
            unsigned int v196 = (v62 >> 4) - 1;
            if (v64) {
              unsigned int v197 = 0;
            }
            else {
              unsigned int v197 = 32 - __clz(~(-1 << -(char)__clz(v196)));
            }
            unsigned int v198 = (v66 >> 3) - 1;
            if (v65)
            {
              unsigned int v199 = 0;
              if (v197) {
                goto LABEL_206;
              }
            }
            else
            {
              unsigned int v199 = 32 - __clz(~(-1 << -(char)__clz(v198)));
              if (v199 | v197)
              {
LABEL_206:
                int v200 = 0;
                uint64_t v201 = 0;
                int v202 = v33 & v196;
                int v203 = v18 & v198;
                BOOL v204 = v199 != 0;
                BOOL v205 = v197 != 0;
                int v206 = 1;
                do
                {
                  --v199;
                  if (v204) {
                    v201 |= (unint64_t)(v206 & v203) << v200++;
                  }
                  else {
                    unsigned int v199 = 0;
                  }
                  --v197;
                  if (v205) {
                    v201 |= (unint64_t)(v206 & v202) << v200++;
                  }
                  else {
                    unsigned int v197 = 0;
                  }
                  v206 *= 2;
                  --v200;
                  BOOL v205 = v197 != 0;
                  BOOL v204 = v199 != 0;
                }
                while (v197 | v199);
                goto LABEL_218;
              }
            }
            uint64_t v201 = 0;
LABEL_218:
            unint64_t v50 = ((unint64_t)(v35 / v62 + v227 / v66 * ((v62 + v208) / v62)) << 14) + (v201 << 10);
            goto LABEL_58;
          }
          if (v219)
          {
            int v43 = 0;
            uint64_t v44 = 0;
            int v45 = 1;
            BOOL v46 = v217;
            BOOL v47 = v216;
            __int32 v48 = v218.i32[0];
            __int32 v49 = v218.i32[1];
            do
            {
              --v48;
              if (v46) {
                v44 |= (unint64_t)(v45 & v18) << v43++;
              }
              else {
                __int32 v48 = 0;
              }
              --v49;
              if (v47) {
                v44 |= (unint64_t)(v45 & v33) << v43++;
              }
              else {
                __int32 v49 = 0;
              }
              v45 *= 2;
              --v43;
              BOOL v47 = v49 != 0;
              BOOL v46 = v48 != 0;
            }
            while (v49 | v48);
          }
          else
          {
            uint64_t v44 = 0;
          }
          unint64_t v50 = v44 << 10;
LABEL_58:
          unsigned int v51 = *(_DWORD *)(v28 + 128) >> (*(unsigned char *)(v28 + 144) + a12);
          if (v51 <= 1) {
            unsigned int v51 = 1;
          }
          unsigned int v52 = v51 + 15;
          if (v52 < 0x20) {
            unsigned int v53 = 0;
          }
          else {
            unsigned int v53 = 32 - __clz(~(-1 << -(char)__clz((v52 >> 4) - 1)));
          }
          unsigned int v54 = *(_DWORD *)(v28 + 132) >> (*(unsigned char *)(v28 + 144) + a12);
          if (v54 <= 1) {
            unsigned int v54 = 1;
          }
          unsigned int v55 = v54 + 7;
          if (v55 < 0x10)
          {
            unsigned int v56 = 0;
            if (!v53)
            {
LABEL_80:
              uint64_t v58 = 0;
              goto LABEL_81;
            }
          }
          else
          {
            unsigned int v56 = 32 - __clz(~(-1 << -(char)__clz((v55 >> 3) - 1)));
            if (!(v56 | v53)) {
              goto LABEL_80;
            }
          }
          int v57 = 0;
          uint64_t v58 = 0;
          BOOL v59 = v53 != 0;
          BOOL v60 = v56 != 0;
          int v61 = 1;
          do
          {
            --v53;
            if (v59) {
              v58 |= (unint64_t)(v61 & v33) << v57++;
            }
            else {
              unsigned int v53 = 0;
            }
            --v56;
            if (v60) {
              v58 |= (unint64_t)(v61 & v18) << v57++;
            }
            else {
              unsigned int v56 = 0;
            }
            v61 *= 2;
            --v57;
            BOOL v60 = v56 != 0;
            BOOL v59 = v53 != 0;
          }
          while (v56 | v53);
LABEL_81:
          int v67 = v39 < 0x10 || v40;
          unsigned int v68 = (char *)(a4 + 8 * v58);
          unint64_t v69 = v225 + 8 * (v37 - a7);
          int v70 = (int8x16_t *)(a2 + v50);
          if (v234 < 8) {
            int v71 = 1;
          }
          else {
            int v71 = v67;
          }
          unsigned int v232 = v70;
          if (v233)
          {
            BOOL v72 = (int8x16_t *)__dst;
            if (!v71) {
              goto LABEL_93;
            }
            char v73 = v39;
            int v74 = v37;
            memcpy(__dst, v70, sizeof(__dst));
            unsigned int v35 = 16 * v33;
            int v37 = v74;
            LOBYTE(v39) = v73;
            uint64_t v28 = v229;
          }
          else
          {
            BOOL v72 = v70;
            if (!v71)
            {
LABEL_93:
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock(v69, a11, v72, v68, v39, v234);
              goto LABEL_94;
            }
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE15ELj2ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = v28;
          unsigned int v236 = v72;
          unsigned __int8 v244 = v39;
          unsigned __int8 v245 = v234;
          unsigned int v240 = v215;
          unsigned int v241 = v37 - v35;
          BOOL v237 = v68;
          unint64_t v238 = v69;
          uint64_t v239 = a11;
          unsigned int v242 = v226;
          unsigned int v243 = v38;
          if (v40)
          {
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(v28 + 8) + 7384), block);
LABEL_94:
            a7 = v220;
            goto LABEL_186;
          }
          unsigned int v75 = *v68;
          a7 = v220;
          if (v75 == 127)
          {
            float32x4_t v78 = (float32x4_t)v72[1];
            float32x4_t v79 = (float32x4_t)v72[2];
            float32x4_t v80 = (float32x4_t)v72[3];
            float32x4_t v81 = (float32x4_t)v72[4];
            float32x4_t v82 = (float32x4_t)v72[5];
            float32x4_t v83 = (float32x4_t)v72[6];
            float32x4_t v84 = (float32x4_t)v72[7];
            int8x16_t v247 = *v72;
            float32x4_t v248 = v79;
            float32x4_t v255 = v78;
            float32x4_t v256 = v80;
            float32x4_t v263 = v81;
            float32x4_t v264 = v83;
            float32x4_t v271 = v82;
            float32x4_t v272 = v84;
            uint64_t v76 = 128;
          }
          else if (v75 == 3)
          {
            float32x4_t v77 = vld1q_dup_f32((const float *)v72->i32);
            int8x16_t v247 = (int8x16_t)v77;
            float32x4_t v248 = v77;
            float32x4_t v255 = v77;
            float32x4_t v256 = v77;
            float32x4_t v263 = v77;
            float32x4_t v264 = v77;
            float32x4_t v271 = v77;
            float32x4_t v272 = v77;
            uint64_t v76 = 4;
          }
          else if (*v68)
          {
            uint64_t v76 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v247, 128, (uint64_t)v72, v75);
          }
          else
          {
            uint64_t v76 = 0;
            float32x4_t v248 = 0u;
            int8x16_t v247 = 0u;
            float32x4_t v255 = 0u;
            float32x4_t v256 = 0u;
            float32x4_t v263 = 0u;
            float32x4_t v264 = 0u;
            float32x4_t v271 = 0u;
            float32x4_t v272 = 0u;
          }
          uint64_t v85 = (uint64_t)v72->i64 + v76;
          unsigned int v86 = v68[1];
          if (v86 == 127)
          {
            float32x4_t v89 = *(float32x4_t *)(v85 + 16);
            float32x4_t v90 = *(float32x4_t *)(v85 + 32);
            float32x4_t v91 = *(float32x4_t *)(v85 + 48);
            float32x4_t v92 = *(float32x4_t *)(v85 + 64);
            float32x4_t v93 = *(float32x4_t *)(v85 + 80);
            float32x4_t v94 = *(float32x4_t *)(v85 + 96);
            float32x4_t v95 = *(float32x4_t *)(v85 + 112);
            int8x16_t v249 = *(int8x16_t *)v85;
            float32x4_t v250 = v90;
            float32x4_t v257 = v89;
            float32x4_t v258 = v91;
            float32x4_t v265 = v92;
            float32x4_t v266 = v94;
            float32x4_t v273 = v93;
            float32x4_t v274 = v95;
            uint64_t v87 = 128;
          }
          else if (v86 == 3)
          {
            float32x4_t v88 = vld1q_dup_f32((const float *)v85);
            int8x16_t v249 = (int8x16_t)v88;
            float32x4_t v250 = v88;
            float32x4_t v257 = v88;
            float32x4_t v258 = v88;
            float32x4_t v265 = v88;
            float32x4_t v266 = v88;
            float32x4_t v273 = v88;
            float32x4_t v274 = v88;
            uint64_t v87 = 4;
          }
          else if (v68[1])
          {
            uint64_t v87 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v249, 128, v85, v86);
          }
          else
          {
            uint64_t v87 = 0;
            int8x16_t v249 = 0u;
            float32x4_t v250 = 0u;
            float32x4_t v257 = 0u;
            float32x4_t v258 = 0u;
            float32x4_t v265 = 0u;
            float32x4_t v266 = 0u;
            float32x4_t v273 = 0u;
            float32x4_t v274 = 0u;
          }
          uint64_t v96 = v85 + v87;
          unsigned int v97 = v68[2];
          if (v97 == 127)
          {
            float32x4_t v100 = *(float32x4_t *)(v96 + 16);
            float32x4_t v101 = *(float32x4_t *)(v96 + 32);
            float32x4_t v102 = *(float32x4_t *)(v96 + 48);
            float32x4_t v103 = *(float32x4_t *)(v96 + 64);
            float32x4_t v104 = *(float32x4_t *)(v96 + 80);
            float32x4_t v105 = *(float32x4_t *)(v96 + 96);
            float32x4_t v106 = *(float32x4_t *)(v96 + 112);
            int8x16_t v279 = *(int8x16_t *)v96;
            float32x4_t v280 = v101;
            float32x4_t v287 = v100;
            float32x4_t v288 = v102;
            float32x4_t v295 = v103;
            float32x4_t v296 = v105;
            float32x4_t v303 = v104;
            float32x4_t v304 = v106;
            uint64_t v98 = 128;
          }
          else if (v97 == 3)
          {
            float32x4_t v99 = vld1q_dup_f32((const float *)v96);
            int8x16_t v279 = (int8x16_t)v99;
            float32x4_t v280 = v99;
            float32x4_t v287 = v99;
            float32x4_t v288 = v99;
            float32x4_t v295 = v99;
            float32x4_t v296 = v99;
            float32x4_t v303 = v99;
            float32x4_t v304 = v99;
            uint64_t v98 = 4;
          }
          else if (v68[2])
          {
            uint64_t v98 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v279, 128, v96, v97);
          }
          else
          {
            uint64_t v98 = 0;
            int8x16_t v279 = 0u;
            float32x4_t v280 = 0u;
            float32x4_t v287 = 0u;
            float32x4_t v288 = 0u;
            float32x4_t v295 = 0u;
            float32x4_t v296 = 0u;
            float32x4_t v303 = 0u;
            float32x4_t v304 = 0u;
          }
          uint64_t v107 = v96 + v98;
          unsigned int v108 = v68[3];
          if (v108 == 127)
          {
            float32x4_t v111 = *(float32x4_t *)(v107 + 16);
            float32x4_t v112 = *(float32x4_t *)(v107 + 32);
            float32x4_t v113 = *(float32x4_t *)(v107 + 48);
            float32x4_t v114 = *(float32x4_t *)(v107 + 64);
            float32x4_t v115 = *(float32x4_t *)(v107 + 80);
            float32x4_t v116 = *(float32x4_t *)(v107 + 96);
            float32x4_t v117 = *(float32x4_t *)(v107 + 112);
            int8x16_t v281 = *(int8x16_t *)v107;
            float32x4_t v282 = v112;
            float32x4_t v289 = v111;
            float32x4_t v290 = v113;
            float32x4_t v297 = v114;
            float32x4_t v298 = v116;
            float32x4_t v305 = v115;
            float32x4_t v306 = v117;
            uint64_t v109 = 128;
          }
          else if (v108 == 3)
          {
            float32x4_t v110 = vld1q_dup_f32((const float *)v107);
            int8x16_t v281 = (int8x16_t)v110;
            float32x4_t v282 = v110;
            float32x4_t v289 = v110;
            float32x4_t v290 = v110;
            float32x4_t v297 = v110;
            float32x4_t v298 = v110;
            float32x4_t v305 = v110;
            float32x4_t v306 = v110;
            uint64_t v109 = 4;
          }
          else if (v68[3])
          {
            uint64_t v109 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v281, 128, v107, v108);
          }
          else
          {
            uint64_t v109 = 0;
            int8x16_t v281 = 0u;
            float32x4_t v282 = 0u;
            float32x4_t v289 = 0u;
            float32x4_t v290 = 0u;
            float32x4_t v297 = 0u;
            float32x4_t v298 = 0u;
            float32x4_t v305 = 0u;
            float32x4_t v306 = 0u;
          }
          uint64_t v118 = v107 + v109;
          unsigned int v119 = v68[4];
          if (v119 == 127)
          {
            float32x4_t v122 = *(float32x4_t *)(v118 + 16);
            float32x4_t v123 = *(float32x4_t *)(v118 + 32);
            float32x4_t v124 = *(float32x4_t *)(v118 + 48);
            float32x4_t v125 = *(float32x4_t *)(v118 + 64);
            float32x4_t v126 = *(float32x4_t *)(v118 + 80);
            float32x4_t v127 = *(float32x4_t *)(v118 + 96);
            float32x4_t v128 = *(float32x4_t *)(v118 + 112);
            int8x16_t v251 = *(int8x16_t *)v118;
            float32x4_t v252 = v123;
            float32x4_t v259 = v122;
            float32x4_t v260 = v124;
            float32x4_t v267 = v125;
            float32x4_t v268 = v127;
            float32x4_t v275 = v126;
            float32x4_t v276 = v128;
            uint64_t v120 = 128;
          }
          else if (v119 == 3)
          {
            float32x4_t v121 = vld1q_dup_f32((const float *)v118);
            int8x16_t v251 = (int8x16_t)v121;
            float32x4_t v252 = v121;
            float32x4_t v259 = v121;
            float32x4_t v260 = v121;
            float32x4_t v267 = v121;
            float32x4_t v268 = v121;
            float32x4_t v275 = v121;
            float32x4_t v276 = v121;
            uint64_t v120 = 4;
          }
          else if (v68[4])
          {
            uint64_t v120 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v251, 128, v118, v119);
          }
          else
          {
            uint64_t v120 = 0;
            int8x16_t v251 = 0u;
            float32x4_t v252 = 0u;
            float32x4_t v259 = 0u;
            float32x4_t v260 = 0u;
            float32x4_t v267 = 0u;
            float32x4_t v268 = 0u;
            float32x4_t v275 = 0u;
            float32x4_t v276 = 0u;
          }
          uint64_t v129 = v118 + v120;
          unsigned int v130 = v68[5];
          if (v130 == 127)
          {
            float32x4_t v133 = *(float32x4_t *)(v129 + 16);
            float32x4_t v134 = *(float32x4_t *)(v129 + 32);
            float32x4_t v135 = *(float32x4_t *)(v129 + 48);
            float32x4_t v136 = *(float32x4_t *)(v129 + 64);
            float32x4_t v137 = *(float32x4_t *)(v129 + 80);
            float32x4_t v138 = *(float32x4_t *)(v129 + 96);
            float32x4_t v139 = *(float32x4_t *)(v129 + 112);
            int8x16_t v253 = *(int8x16_t *)v129;
            float32x4_t v254 = v134;
            float32x4_t v261 = v133;
            float32x4_t v262 = v135;
            float32x4_t v269 = v136;
            float32x4_t v270 = v138;
            float32x4_t v277 = v137;
            float32x4_t v278 = v139;
            uint64_t v131 = 128;
          }
          else if (v130 == 3)
          {
            float32x4_t v132 = vld1q_dup_f32((const float *)v129);
            int8x16_t v253 = (int8x16_t)v132;
            float32x4_t v254 = v132;
            float32x4_t v261 = v132;
            float32x4_t v262 = v132;
            float32x4_t v269 = v132;
            float32x4_t v270 = v132;
            float32x4_t v277 = v132;
            float32x4_t v278 = v132;
            uint64_t v131 = 4;
          }
          else if (v68[5])
          {
            uint64_t v131 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v253, 128, v129, v130);
          }
          else
          {
            uint64_t v131 = 0;
            int8x16_t v253 = 0u;
            float32x4_t v254 = 0u;
            float32x4_t v261 = 0u;
            float32x4_t v262 = 0u;
            float32x4_t v269 = 0u;
            float32x4_t v270 = 0u;
            float32x4_t v277 = 0u;
            float32x4_t v278 = 0u;
          }
          uint64_t v140 = v129 + v131;
          unsigned int v141 = v68[6];
          if (v141 == 127)
          {
            float32x4_t v144 = *(float32x4_t *)(v140 + 16);
            float32x4_t v145 = *(float32x4_t *)(v140 + 32);
            float32x4_t v146 = *(float32x4_t *)(v140 + 48);
            float32x4_t v147 = *(float32x4_t *)(v140 + 64);
            float32x4_t v148 = *(float32x4_t *)(v140 + 80);
            float32x4_t v149 = *(float32x4_t *)(v140 + 96);
            float32x4_t v150 = *(float32x4_t *)(v140 + 112);
            int8x16_t v283 = *(int8x16_t *)v140;
            float32x4_t v284 = v145;
            float32x4_t v291 = v144;
            float32x4_t v292 = v146;
            float32x4_t v299 = v147;
            float32x4_t v300 = v149;
            float32x4_t v307 = v148;
            float32x4_t v308 = v150;
            uint64_t v142 = 128;
          }
          else if (v141 == 3)
          {
            float32x4_t v143 = vld1q_dup_f32((const float *)v140);
            int8x16_t v283 = (int8x16_t)v143;
            float32x4_t v284 = v143;
            float32x4_t v291 = v143;
            float32x4_t v292 = v143;
            float32x4_t v299 = v143;
            float32x4_t v300 = v143;
            float32x4_t v307 = v143;
            float32x4_t v308 = v143;
            uint64_t v142 = 4;
          }
          else if (v68[6])
          {
            uint64_t v142 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v283, 128, v140, v141);
          }
          else
          {
            uint64_t v142 = 0;
            int8x16_t v283 = 0u;
            float32x4_t v284 = 0u;
            float32x4_t v291 = 0u;
            float32x4_t v292 = 0u;
            float32x4_t v299 = 0u;
            float32x4_t v300 = 0u;
            float32x4_t v307 = 0u;
            float32x4_t v308 = 0u;
          }
          uint64_t v151 = v140 + v142;
          unsigned int v152 = v68[7];
          if (v152 == 127)
          {
            float32x4_t v155 = *(float32x4_t *)(v151 + 16);
            float32x4_t v156 = *(float32x4_t *)(v151 + 32);
            float32x4_t v157 = *(float32x4_t *)(v151 + 48);
            float32x4_t v158 = *(float32x4_t *)(v151 + 80);
            float32x4_t v159 = *(float32x4_t *)(v151 + 96);
            float32x4_t v160 = *(float32x4_t *)(v151 + 112);
            float32x4_t v161 = *(float32x4_t *)(v151 + 64);
            int8x16_t v285 = *(int8x16_t *)v151;
            float32x4_t v286 = v156;
            float32x4_t v293 = v155;
            float32x4_t v294 = v157;
            float32x4_t v301 = v161;
            float32x4_t v302 = v159;
            float32x4_t v309 = v158;
            float32x4_t v310 = v160;
            uint64_t v153 = v242;
            if (!v242) {
              goto LABEL_185;
            }
          }
          else if (v152 == 3)
          {
            float32x4_t v154 = vld1q_dup_f32((const float *)v151);
            int8x16_t v285 = (int8x16_t)v154;
            float32x4_t v286 = v154;
            float32x4_t v293 = v154;
            float32x4_t v294 = v154;
            float32x4_t v301 = v154;
            float32x4_t v302 = v154;
            float32x4_t v309 = v154;
            float32x4_t v310 = v154;
            uint64_t v153 = v242;
            if (!v242) {
              goto LABEL_185;
            }
          }
          else if (v68[7])
          {
            AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v285, 128, v151, v152);
            uint64_t v153 = v242;
            if (!v242) {
              goto LABEL_185;
            }
          }
          else
          {
            int8x16_t v285 = 0u;
            float32x4_t v286 = 0u;
            float32x4_t v293 = 0u;
            float32x4_t v294 = 0u;
            float32x4_t v301 = 0u;
            float32x4_t v302 = 0u;
            float32x4_t v309 = 0u;
            float32x4_t v310 = 0u;
            uint64_t v153 = v242;
            if (!v242) {
              goto LABEL_185;
            }
          }
          if (v243)
          {
            uint64_t v162 = 0;
            unint64_t v163 = (unint64_t)v240 << 7;
            uint64_t v164 = 8 * v241;
            float32x4_t v165 = &v247.i8[v163 + v164];
            unint64_t v166 = v238;
            uint64_t v167 = v239;
            unint64_t v168 = 8 * v243;
            if (v168 <= 1) {
              unint64_t v169 = 1;
            }
            else {
              unint64_t v169 = 8 * v243;
            }
            unint64_t v170 = v163 + v164;
            float32x4_t v171 = &v247.i8[v163 + v164];
            if (v169) {
              BOOL v172 = (v169 - 1) >> 32 == 0;
            }
            else {
              BOOL v172 = 0;
            }
            char v173 = !v172;
            uint64_t v174 = v169 & 0x7FFFFFFE0;
            uint64_t v175 = v169 & 0x7FFFFFFF8;
            float32x4_t v176 = (char *)&v248 + v170;
            unint64_t v177 = (long long *)(v238 + 16);
            uint64_t v178 = v165;
            unint64_t v179 = v238;
            do
            {
              unint64_t v180 = (char *)(v166 + v167 * v162);
              unint64_t v181 = &v165[128 * v162];
              if ((unint64_t)(&v171[128 * v162] - v180) < 0x20) {
                char v182 = 1;
              }
              else {
                char v182 = v173;
              }
              if (v182)
              {
                int v183 = 0;
                goto LABEL_182;
              }
              if (v169 >= 0x20)
              {
                uint64_t v185 = v177;
                uint64_t v186 = v176;
                uint64_t v187 = v169 & 0x7FFFFFFE0;
                do
                {
                  long long v188 = *v185;
                  *(v186 - 1) = *(v185 - 1);
                  *uint64_t v186 = v188;
                  v186 += 2;
                  v185 += 2;
                  v187 -= 32;
                }
                while (v187);
                if (v169 == v174) {
                  goto LABEL_165;
                }
                uint64_t v184 = v169 & 0x7FFFFFFE0;
                if ((v169 & 0x18) == 0)
                {
                  v180 += v174;
                  v181 += v174;
                  int v183 = v169 & 0xFFFFFFE0;
                  goto LABEL_182;
                }
              }
              else
              {
                uint64_t v184 = 0;
              }
              v181 += v175;
              unint64_t v189 = v184 - (v169 & 0x7FFFFFFF8);
              unint64_t v190 = (uint64_t *)(v179 + v184);
              unint64_t v191 = &v178[v184];
              do
              {
                uint64_t v192 = *v190++;
                *(void *)unint64_t v191 = v192;
                v191 += 8;
                v189 += 8;
              }
              while (v189);
              if (v169 == v175) {
                goto LABEL_165;
              }
              v180 += v175;
              int v183 = v169 & 0xFFFFFFF8;
LABEL_182:
              unsigned int v193 = v183 + 1;
              do
              {
                char v194 = *v180++;
                *v181++ = v194;
              }
              while (v168 > v193++);
LABEL_165:
              ++v162;
              v176 += 128;
              unint64_t v177 = (long long *)((char *)v177 + v167);
              v179 += v167;
              v178 += 128;
            }
            while (v162 != v153);
          }
LABEL_185:
          AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)&v247, 128, v236, v237, v244, v245);
LABEL_186:
          uint64_t result = v232;
          if (v233) {
            uint64_t result = memcpy(v232, v72, 0x400uLL);
          }
          BOOL v23 = v33++ == v221 >> 4;
          uint64_t v28 = v229;
        }
        while (!v23);
        BOOL v23 = v18++ == v214;
      }
      while (!v23);
    }
  }
  return result;
}

void *AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, int a12)
{
  uint64_t v311 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  uint64_t v17 = a1;
  unsigned int v228 = a8;
  unsigned int v18 = a8 >> 3;
  unsigned int v212 = a8 + a10 - 1;
  unsigned int v214 = v212 >> 3;
  unsigned int v19 = *(unsigned __int8 *)(*(void *)(a1 + 208) + 88);
  unsigned int v20 = *(_DWORD *)(a1 + 112);
  uint64_t v229 = v17;
  if (*(void *)(v17 + 168))
  {
    __int16 CacheMode = IOSurfaceGetCacheMode();
    uint64_t v17 = v229;
    int v22 = CacheMode & 0xF00;
  }
  else
  {
    int v22 = 0;
  }
  BOOL v23 = (v22 & 0xD00) == 0 || v22 == 768;
  int v24 = v22 & 0xE00;
  int v26 = !v23 && v24 != 1024;
  int v233 = v26;
  uint64_t result = (void *)AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::isLevelTiled(v17, *(_DWORD *)(v17 + 144) + a12);
  uint64_t v28 = v229;
  int v222 = (int)result;
  if (v18 <= v214)
  {
    unsigned int v221 = a7 + a9 - 1;
    unsigned int v211 = a7 >> 4;
    if (a7 >> 4 <= v221 >> 4)
    {
      unsigned int v208 = a5 - 1;
      unsigned int v231 = (a5 - 1) >> 4;
      int v230 = ((a5 - 1) & 0xF) + 1;
      int v209 = ((a6 - 1) & 7) + 1;
      unsigned int v210 = (a6 - 1) >> 3;
      uint32x2_t v29 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0xF00000007);
      int8x8_t v30 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32(vadd_s32((int32x2_t)vshl_u32(v29, (uint32x2_t)0xFFFFFFFCFFFFFFFDLL), (int32x2_t)-1))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x2000000010, v29));
      __int32 v219 = v30.i32[0] | v30.i32[1];
      int8x8_t v218 = v30;
      BOOL v217 = v30.i32[0] != 0;
      BOOL v216 = v30.i32[1] != 0;
      unint64_t v207 = 8 * v20 * (unint64_t)v19;
      unsigned int v220 = a7;
      do
      {
        unsigned int v31 = (8 * v18) | 7;
        if (8 * v18 <= v228) {
          int v32 = v228;
        }
        else {
          int v32 = 8 * v18;
        }
        unsigned int v33 = v211;
        if (v212 < v31) {
          unsigned int v31 = v212;
        }
        unsigned int v227 = 8 * v18;
        int v215 = v32 - 8 * v18;
        int v226 = v31 - v32 + 1;
        int v34 = v209;
        if (v18 != v210) {
          int v34 = 8;
        }
        unsigned int v234 = v34;
        uint64_t v225 = a3 + (v32 - v228) * a11;
        do
        {
          unsigned int v35 = 16 * v33;
          unsigned int v36 = 16 * (v33 + 1) - 1;
          if (16 * v33 <= a7) {
            int v37 = a7;
          }
          else {
            int v37 = 16 * v33;
          }
          if (v221 < v36) {
            unsigned int v36 = v221;
          }
          int v38 = v36 - v37 + 1;
          if (v33 == v231) {
            unsigned int v39 = v230;
          }
          else {
            unsigned int v39 = 16;
          }
          BOOL v40 = 1;
          if (v227 >= v228 && v35 >= a7)
          {
            int v41 = v230;
            if (v33 != v231) {
              int v41 = 16;
            }
            BOOL v40 = v38 != v41 || v226 != v234;
          }
          if (v222)
          {
            unsigned int v62 = 0;
            uint64_t v63 = v207 >> (*(unsigned char *)(v28 + 57) != 0);
            char v64 = 1;
            if (v63 > 127)
            {
              if (v63 > 511)
              {
                if (v63 == 512)
                {
                  char v65 = 0;
                  unsigned int v62 = 16;
                  unsigned int v66 = 16;
                }
                else
                {
                  char v65 = 1;
                  unsigned int v66 = 0;
                  if (v63 == 1024)
                  {
                    unsigned int v66 = 8;
                    unsigned int v62 = 16;
                  }
                }
              }
              else if (v63 == 128)
              {
                char v64 = 0;
                char v65 = 0;
                unsigned int v62 = 32;
                unsigned int v66 = 32;
              }
              else
              {
                char v65 = 1;
                unsigned int v66 = 0;
                if (v63 == 256)
                {
                  char v64 = 0;
                  char v65 = 0;
                  unsigned int v66 = 16;
                  unsigned int v62 = 32;
                }
              }
            }
            else
            {
              char v65 = 1;
              unsigned int v66 = 0;
              switch(v63)
              {
                case 4:
                  char v64 = 0;
                  char v65 = 0;
                  unsigned int v66 = 128;
                  unsigned int v62 = 256;
                  break;
                case 5:
                case 6:
                case 7:
                case 9:
                case 10:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 17:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                  break;
                case 8:
                  char v64 = 0;
                  char v65 = 0;
                  unsigned int v62 = 128;
                  unsigned int v66 = 128;
                  break;
                case 16:
                  char v64 = 0;
                  char v65 = 0;
                  unsigned int v66 = 64;
                  unsigned int v62 = 128;
                  break;
                case 32:
                  char v64 = 0;
                  char v65 = 0;
                  unsigned int v62 = 64;
                  unsigned int v66 = 64;
                  break;
                default:
                  if (v63 == 64)
                  {
                    char v64 = 0;
                    char v65 = 0;
                    unsigned int v66 = 32;
                    unsigned int v62 = 64;
                  }
                  break;
              }
            }
            unsigned int v196 = (v62 >> 4) - 1;
            if (v64) {
              unsigned int v197 = 0;
            }
            else {
              unsigned int v197 = 32 - __clz(~(-1 << -(char)__clz(v196)));
            }
            unsigned int v198 = (v66 >> 3) - 1;
            if (v65)
            {
              unsigned int v199 = 0;
              if (v197) {
                goto LABEL_206;
              }
            }
            else
            {
              unsigned int v199 = 32 - __clz(~(-1 << -(char)__clz(v198)));
              if (v199 | v197)
              {
LABEL_206:
                int v200 = 0;
                uint64_t v201 = 0;
                int v202 = v33 & v196;
                int v203 = v18 & v198;
                BOOL v204 = v199 != 0;
                BOOL v205 = v197 != 0;
                int v206 = 1;
                do
                {
                  --v199;
                  if (v204) {
                    v201 |= (unint64_t)(v206 & v203) << v200++;
                  }
                  else {
                    unsigned int v199 = 0;
                  }
                  --v197;
                  if (v205) {
                    v201 |= (unint64_t)(v206 & v202) << v200++;
                  }
                  else {
                    unsigned int v197 = 0;
                  }
                  v206 *= 2;
                  --v200;
                  BOOL v205 = v197 != 0;
                  BOOL v204 = v199 != 0;
                }
                while (v197 | v199);
                goto LABEL_218;
              }
            }
            uint64_t v201 = 0;
LABEL_218:
            unint64_t v50 = ((unint64_t)(v35 / v62 + v227 / v66 * ((v62 + v208) / v62)) << 14) + (v201 << 10);
            goto LABEL_58;
          }
          if (v219)
          {
            int v43 = 0;
            uint64_t v44 = 0;
            int v45 = 1;
            BOOL v46 = v217;
            BOOL v47 = v216;
            __int32 v48 = v218.i32[0];
            __int32 v49 = v218.i32[1];
            do
            {
              --v48;
              if (v46) {
                v44 |= (unint64_t)(v45 & v18) << v43++;
              }
              else {
                __int32 v48 = 0;
              }
              --v49;
              if (v47) {
                v44 |= (unint64_t)(v45 & v33) << v43++;
              }
              else {
                __int32 v49 = 0;
              }
              v45 *= 2;
              --v43;
              BOOL v47 = v49 != 0;
              BOOL v46 = v48 != 0;
            }
            while (v49 | v48);
          }
          else
          {
            uint64_t v44 = 0;
          }
          unint64_t v50 = v44 << 10;
LABEL_58:
          unsigned int v51 = *(_DWORD *)(v28 + 128) >> (*(unsigned char *)(v28 + 144) + a12);
          if (v51 <= 1) {
            unsigned int v51 = 1;
          }
          unsigned int v52 = v51 + 15;
          if (v52 < 0x20) {
            unsigned int v53 = 0;
          }
          else {
            unsigned int v53 = 32 - __clz(~(-1 << -(char)__clz((v52 >> 4) - 1)));
          }
          unsigned int v54 = *(_DWORD *)(v28 + 132) >> (*(unsigned char *)(v28 + 144) + a12);
          if (v54 <= 1) {
            unsigned int v54 = 1;
          }
          unsigned int v55 = v54 + 7;
          if (v55 < 0x10)
          {
            unsigned int v56 = 0;
            if (!v53)
            {
LABEL_80:
              uint64_t v58 = 0;
              goto LABEL_81;
            }
          }
          else
          {
            unsigned int v56 = 32 - __clz(~(-1 << -(char)__clz((v55 >> 3) - 1)));
            if (!(v56 | v53)) {
              goto LABEL_80;
            }
          }
          int v57 = 0;
          uint64_t v58 = 0;
          BOOL v59 = v53 != 0;
          BOOL v60 = v56 != 0;
          int v61 = 1;
          do
          {
            --v53;
            if (v59) {
              v58 |= (unint64_t)(v61 & v33) << v57++;
            }
            else {
              unsigned int v53 = 0;
            }
            --v56;
            if (v60) {
              v58 |= (unint64_t)(v61 & v18) << v57++;
            }
            else {
              unsigned int v56 = 0;
            }
            v61 *= 2;
            --v57;
            BOOL v60 = v56 != 0;
            BOOL v59 = v53 != 0;
          }
          while (v56 | v53);
LABEL_81:
          int v67 = v39 < 0x10 || v40;
          unsigned int v68 = (char *)(a4 + 8 * v58);
          unint64_t v69 = (_OWORD *)(v225 + 8 * (v37 - a7));
          int v70 = (void *)(a2 + v50);
          if (v234 < 8) {
            int v71 = 1;
          }
          else {
            int v71 = v67;
          }
          unsigned int v232 = v70;
          if (v233)
          {
            BOOL v72 = __dst;
            if (!v71) {
              goto LABEL_93;
            }
            char v73 = v39;
            int v74 = v37;
            memcpy(__dst, v70, sizeof(__dst));
            unsigned int v35 = 16 * v33;
            int v37 = v74;
            LOBYTE(v39) = v73;
            uint64_t v28 = v229;
          }
          else
          {
            BOOL v72 = v70;
            if (!v71)
            {
LABEL_93:
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock(v69, a11, v72, v68, v39, v234);
              goto LABEL_94;
            }
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE15ELj2ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = v28;
          unsigned int v236 = v72;
          unsigned __int8 v244 = v39;
          unsigned __int8 v245 = v234;
          unsigned int v240 = v215;
          unsigned int v241 = v37 - v35;
          BOOL v237 = v68;
          unint64_t v238 = v69;
          uint64_t v239 = a11;
          unsigned int v242 = v226;
          unsigned int v243 = v38;
          if (v40)
          {
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(v28 + 8) + 7384), block);
LABEL_94:
            a7 = v220;
            goto LABEL_186;
          }
          unsigned int v75 = *v68;
          a7 = v220;
          if (v75 == 127)
          {
            float32x4_t v78 = *((float32x4_t *)v72 + 1);
            float32x4_t v79 = *((float32x4_t *)v72 + 2);
            float32x4_t v80 = *((float32x4_t *)v72 + 3);
            float32x4_t v81 = *((float32x4_t *)v72 + 4);
            float32x4_t v82 = *((float32x4_t *)v72 + 5);
            float32x4_t v83 = *((float32x4_t *)v72 + 6);
            float32x4_t v84 = *((float32x4_t *)v72 + 7);
            int8x16_t v247 = *(int8x16_t *)v72;
            float32x4_t v248 = v79;
            float32x4_t v255 = v78;
            float32x4_t v256 = v80;
            float32x4_t v263 = v81;
            float32x4_t v264 = v83;
            float32x4_t v271 = v82;
            float32x4_t v272 = v84;
            uint64_t v76 = 128;
          }
          else if (v75 == 3)
          {
            float32x4_t v77 = vld1q_dup_f32((const float *)v72);
            int8x16_t v247 = (int8x16_t)v77;
            float32x4_t v248 = v77;
            float32x4_t v255 = v77;
            float32x4_t v256 = v77;
            float32x4_t v263 = v77;
            float32x4_t v264 = v77;
            float32x4_t v271 = v77;
            float32x4_t v272 = v77;
            uint64_t v76 = 4;
          }
          else if (*v68)
          {
            uint64_t v76 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v247, 128, (uint64_t)v72, v75);
          }
          else
          {
            uint64_t v76 = 0;
            float32x4_t v248 = 0u;
            int8x16_t v247 = 0u;
            float32x4_t v255 = 0u;
            float32x4_t v256 = 0u;
            float32x4_t v263 = 0u;
            float32x4_t v264 = 0u;
            float32x4_t v271 = 0u;
            float32x4_t v272 = 0u;
          }
          uint64_t v85 = (uint64_t)v72 + v76;
          unsigned int v86 = v68[1];
          if (v86 == 127)
          {
            float32x4_t v89 = *(float32x4_t *)(v85 + 16);
            float32x4_t v90 = *(float32x4_t *)(v85 + 32);
            float32x4_t v91 = *(float32x4_t *)(v85 + 48);
            float32x4_t v92 = *(float32x4_t *)(v85 + 64);
            float32x4_t v93 = *(float32x4_t *)(v85 + 80);
            float32x4_t v94 = *(float32x4_t *)(v85 + 96);
            float32x4_t v95 = *(float32x4_t *)(v85 + 112);
            int8x16_t v249 = *(int8x16_t *)v85;
            float32x4_t v250 = v90;
            float32x4_t v257 = v89;
            float32x4_t v258 = v91;
            float32x4_t v265 = v92;
            float32x4_t v266 = v94;
            float32x4_t v273 = v93;
            float32x4_t v274 = v95;
            uint64_t v87 = 128;
          }
          else if (v86 == 3)
          {
            float32x4_t v88 = vld1q_dup_f32((const float *)v85);
            int8x16_t v249 = (int8x16_t)v88;
            float32x4_t v250 = v88;
            float32x4_t v257 = v88;
            float32x4_t v258 = v88;
            float32x4_t v265 = v88;
            float32x4_t v266 = v88;
            float32x4_t v273 = v88;
            float32x4_t v274 = v88;
            uint64_t v87 = 4;
          }
          else if (v68[1])
          {
            uint64_t v87 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v249, 128, v85, v86);
          }
          else
          {
            uint64_t v87 = 0;
            int8x16_t v249 = 0u;
            float32x4_t v250 = 0u;
            float32x4_t v257 = 0u;
            float32x4_t v258 = 0u;
            float32x4_t v265 = 0u;
            float32x4_t v266 = 0u;
            float32x4_t v273 = 0u;
            float32x4_t v274 = 0u;
          }
          uint64_t v96 = v85 + v87;
          unsigned int v97 = v68[2];
          if (v97 == 127)
          {
            float32x4_t v100 = *(float32x4_t *)(v96 + 16);
            float32x4_t v101 = *(float32x4_t *)(v96 + 32);
            float32x4_t v102 = *(float32x4_t *)(v96 + 48);
            float32x4_t v103 = *(float32x4_t *)(v96 + 64);
            float32x4_t v104 = *(float32x4_t *)(v96 + 80);
            float32x4_t v105 = *(float32x4_t *)(v96 + 96);
            float32x4_t v106 = *(float32x4_t *)(v96 + 112);
            int8x16_t v279 = *(int8x16_t *)v96;
            float32x4_t v280 = v101;
            float32x4_t v287 = v100;
            float32x4_t v288 = v102;
            float32x4_t v295 = v103;
            float32x4_t v296 = v105;
            float32x4_t v303 = v104;
            float32x4_t v304 = v106;
            uint64_t v98 = 128;
          }
          else if (v97 == 3)
          {
            float32x4_t v99 = vld1q_dup_f32((const float *)v96);
            int8x16_t v279 = (int8x16_t)v99;
            float32x4_t v280 = v99;
            float32x4_t v287 = v99;
            float32x4_t v288 = v99;
            float32x4_t v295 = v99;
            float32x4_t v296 = v99;
            float32x4_t v303 = v99;
            float32x4_t v304 = v99;
            uint64_t v98 = 4;
          }
          else if (v68[2])
          {
            uint64_t v98 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v279, 128, v96, v97);
          }
          else
          {
            uint64_t v98 = 0;
            int8x16_t v279 = 0u;
            float32x4_t v280 = 0u;
            float32x4_t v287 = 0u;
            float32x4_t v288 = 0u;
            float32x4_t v295 = 0u;
            float32x4_t v296 = 0u;
            float32x4_t v303 = 0u;
            float32x4_t v304 = 0u;
          }
          uint64_t v107 = v96 + v98;
          unsigned int v108 = v68[3];
          if (v108 == 127)
          {
            float32x4_t v111 = *(float32x4_t *)(v107 + 16);
            float32x4_t v112 = *(float32x4_t *)(v107 + 32);
            float32x4_t v113 = *(float32x4_t *)(v107 + 48);
            float32x4_t v114 = *(float32x4_t *)(v107 + 64);
            float32x4_t v115 = *(float32x4_t *)(v107 + 80);
            float32x4_t v116 = *(float32x4_t *)(v107 + 96);
            float32x4_t v117 = *(float32x4_t *)(v107 + 112);
            int8x16_t v281 = *(int8x16_t *)v107;
            float32x4_t v282 = v112;
            float32x4_t v289 = v111;
            float32x4_t v290 = v113;
            float32x4_t v297 = v114;
            float32x4_t v298 = v116;
            float32x4_t v305 = v115;
            float32x4_t v306 = v117;
            uint64_t v109 = 128;
          }
          else if (v108 == 3)
          {
            float32x4_t v110 = vld1q_dup_f32((const float *)v107);
            int8x16_t v281 = (int8x16_t)v110;
            float32x4_t v282 = v110;
            float32x4_t v289 = v110;
            float32x4_t v290 = v110;
            float32x4_t v297 = v110;
            float32x4_t v298 = v110;
            float32x4_t v305 = v110;
            float32x4_t v306 = v110;
            uint64_t v109 = 4;
          }
          else if (v68[3])
          {
            uint64_t v109 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v281, 128, v107, v108);
          }
          else
          {
            uint64_t v109 = 0;
            int8x16_t v281 = 0u;
            float32x4_t v282 = 0u;
            float32x4_t v289 = 0u;
            float32x4_t v290 = 0u;
            float32x4_t v297 = 0u;
            float32x4_t v298 = 0u;
            float32x4_t v305 = 0u;
            float32x4_t v306 = 0u;
          }
          uint64_t v118 = v107 + v109;
          unsigned int v119 = v68[4];
          if (v119 == 127)
          {
            float32x4_t v122 = *(float32x4_t *)(v118 + 16);
            float32x4_t v123 = *(float32x4_t *)(v118 + 32);
            float32x4_t v124 = *(float32x4_t *)(v118 + 48);
            float32x4_t v125 = *(float32x4_t *)(v118 + 64);
            float32x4_t v126 = *(float32x4_t *)(v118 + 80);
            float32x4_t v127 = *(float32x4_t *)(v118 + 96);
            float32x4_t v128 = *(float32x4_t *)(v118 + 112);
            int8x16_t v251 = *(int8x16_t *)v118;
            float32x4_t v252 = v123;
            float32x4_t v259 = v122;
            float32x4_t v260 = v124;
            float32x4_t v267 = v125;
            float32x4_t v268 = v127;
            float32x4_t v275 = v126;
            float32x4_t v276 = v128;
            uint64_t v120 = 128;
          }
          else if (v119 == 3)
          {
            float32x4_t v121 = vld1q_dup_f32((const float *)v118);
            int8x16_t v251 = (int8x16_t)v121;
            float32x4_t v252 = v121;
            float32x4_t v259 = v121;
            float32x4_t v260 = v121;
            float32x4_t v267 = v121;
            float32x4_t v268 = v121;
            float32x4_t v275 = v121;
            float32x4_t v276 = v121;
            uint64_t v120 = 4;
          }
          else if (v68[4])
          {
            uint64_t v120 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v251, 128, v118, v119);
          }
          else
          {
            uint64_t v120 = 0;
            int8x16_t v251 = 0u;
            float32x4_t v252 = 0u;
            float32x4_t v259 = 0u;
            float32x4_t v260 = 0u;
            float32x4_t v267 = 0u;
            float32x4_t v268 = 0u;
            float32x4_t v275 = 0u;
            float32x4_t v276 = 0u;
          }
          uint64_t v129 = v118 + v120;
          unsigned int v130 = v68[5];
          if (v130 == 127)
          {
            float32x4_t v133 = *(float32x4_t *)(v129 + 16);
            float32x4_t v134 = *(float32x4_t *)(v129 + 32);
            float32x4_t v135 = *(float32x4_t *)(v129 + 48);
            float32x4_t v136 = *(float32x4_t *)(v129 + 64);
            float32x4_t v137 = *(float32x4_t *)(v129 + 80);
            float32x4_t v138 = *(float32x4_t *)(v129 + 96);
            float32x4_t v139 = *(float32x4_t *)(v129 + 112);
            int8x16_t v253 = *(int8x16_t *)v129;
            float32x4_t v254 = v134;
            float32x4_t v261 = v133;
            float32x4_t v262 = v135;
            float32x4_t v269 = v136;
            float32x4_t v270 = v138;
            float32x4_t v277 = v137;
            float32x4_t v278 = v139;
            uint64_t v131 = 128;
          }
          else if (v130 == 3)
          {
            float32x4_t v132 = vld1q_dup_f32((const float *)v129);
            int8x16_t v253 = (int8x16_t)v132;
            float32x4_t v254 = v132;
            float32x4_t v261 = v132;
            float32x4_t v262 = v132;
            float32x4_t v269 = v132;
            float32x4_t v270 = v132;
            float32x4_t v277 = v132;
            float32x4_t v278 = v132;
            uint64_t v131 = 4;
          }
          else if (v68[5])
          {
            uint64_t v131 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v253, 128, v129, v130);
          }
          else
          {
            uint64_t v131 = 0;
            int8x16_t v253 = 0u;
            float32x4_t v254 = 0u;
            float32x4_t v261 = 0u;
            float32x4_t v262 = 0u;
            float32x4_t v269 = 0u;
            float32x4_t v270 = 0u;
            float32x4_t v277 = 0u;
            float32x4_t v278 = 0u;
          }
          uint64_t v140 = v129 + v131;
          unsigned int v141 = v68[6];
          if (v141 == 127)
          {
            float32x4_t v144 = *(float32x4_t *)(v140 + 16);
            float32x4_t v145 = *(float32x4_t *)(v140 + 32);
            float32x4_t v146 = *(float32x4_t *)(v140 + 48);
            float32x4_t v147 = *(float32x4_t *)(v140 + 64);
            float32x4_t v148 = *(float32x4_t *)(v140 + 80);
            float32x4_t v149 = *(float32x4_t *)(v140 + 96);
            float32x4_t v150 = *(float32x4_t *)(v140 + 112);
            int8x16_t v283 = *(int8x16_t *)v140;
            float32x4_t v284 = v145;
            float32x4_t v291 = v144;
            float32x4_t v292 = v146;
            float32x4_t v299 = v147;
            float32x4_t v300 = v149;
            float32x4_t v307 = v148;
            float32x4_t v308 = v150;
            uint64_t v142 = 128;
          }
          else if (v141 == 3)
          {
            float32x4_t v143 = vld1q_dup_f32((const float *)v140);
            int8x16_t v283 = (int8x16_t)v143;
            float32x4_t v284 = v143;
            float32x4_t v291 = v143;
            float32x4_t v292 = v143;
            float32x4_t v299 = v143;
            float32x4_t v300 = v143;
            float32x4_t v307 = v143;
            float32x4_t v308 = v143;
            uint64_t v142 = 4;
          }
          else if (v68[6])
          {
            uint64_t v142 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v283, 128, v140, v141);
          }
          else
          {
            uint64_t v142 = 0;
            int8x16_t v283 = 0u;
            float32x4_t v284 = 0u;
            float32x4_t v291 = 0u;
            float32x4_t v292 = 0u;
            float32x4_t v299 = 0u;
            float32x4_t v300 = 0u;
            float32x4_t v307 = 0u;
            float32x4_t v308 = 0u;
          }
          uint64_t v151 = v140 + v142;
          unsigned int v152 = v68[7];
          if (v152 == 127)
          {
            float32x4_t v155 = *(float32x4_t *)(v151 + 16);
            float32x4_t v156 = *(float32x4_t *)(v151 + 32);
            float32x4_t v157 = *(float32x4_t *)(v151 + 48);
            float32x4_t v158 = *(float32x4_t *)(v151 + 80);
            float32x4_t v159 = *(float32x4_t *)(v151 + 96);
            float32x4_t v160 = *(float32x4_t *)(v151 + 112);
            float32x4_t v161 = *(float32x4_t *)(v151 + 64);
            int8x16_t v285 = *(int8x16_t *)v151;
            float32x4_t v286 = v156;
            float32x4_t v293 = v155;
            float32x4_t v294 = v157;
            float32x4_t v301 = v161;
            float32x4_t v302 = v159;
            float32x4_t v309 = v158;
            float32x4_t v310 = v160;
            uint64_t v153 = v242;
            if (!v242) {
              goto LABEL_185;
            }
          }
          else if (v152 == 3)
          {
            float32x4_t v154 = vld1q_dup_f32((const float *)v151);
            int8x16_t v285 = (int8x16_t)v154;
            float32x4_t v286 = v154;
            float32x4_t v293 = v154;
            float32x4_t v294 = v154;
            float32x4_t v301 = v154;
            float32x4_t v302 = v154;
            float32x4_t v309 = v154;
            float32x4_t v310 = v154;
            uint64_t v153 = v242;
            if (!v242) {
              goto LABEL_185;
            }
          }
          else if (v68[7])
          {
            AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v285, 128, v151, v152);
            uint64_t v153 = v242;
            if (!v242) {
              goto LABEL_185;
            }
          }
          else
          {
            int8x16_t v285 = 0u;
            float32x4_t v286 = 0u;
            float32x4_t v293 = 0u;
            float32x4_t v294 = 0u;
            float32x4_t v301 = 0u;
            float32x4_t v302 = 0u;
            float32x4_t v309 = 0u;
            float32x4_t v310 = 0u;
            uint64_t v153 = v242;
            if (!v242) {
              goto LABEL_185;
            }
          }
          if (v243)
          {
            uint64_t v162 = 0;
            unint64_t v163 = (unint64_t)v240 << 7;
            uint64_t v164 = 8 * v241;
            float32x4_t v165 = &v247.i8[v163 + v164];
            unint64_t v166 = v238;
            uint64_t v167 = v239;
            unint64_t v168 = 8 * v243;
            if (v168 <= 1) {
              unint64_t v169 = 1;
            }
            else {
              unint64_t v169 = 8 * v243;
            }
            unint64_t v170 = v163 + v164;
            float32x4_t v171 = &v247.i8[v163 + v164];
            if (v169) {
              BOOL v172 = (v169 - 1) >> 32 == 0;
            }
            else {
              BOOL v172 = 0;
            }
            char v173 = !v172;
            uint64_t v174 = v169 & 0x7FFFFFFE0;
            uint64_t v175 = v169 & 0x7FFFFFFF8;
            float32x4_t v176 = (char *)&v248 + v170;
            unint64_t v177 = v238 + 1;
            uint64_t v178 = v165;
            unint64_t v179 = v238;
            do
            {
              unint64_t v180 = (char *)v166 + v167 * v162;
              unint64_t v181 = &v165[128 * v162];
              if ((unint64_t)(&v171[128 * v162] - v180) < 0x20) {
                char v182 = 1;
              }
              else {
                char v182 = v173;
              }
              if (v182)
              {
                int v183 = 0;
                goto LABEL_182;
              }
              if (v169 >= 0x20)
              {
                uint64_t v185 = v177;
                uint64_t v186 = v176;
                uint64_t v187 = v169 & 0x7FFFFFFE0;
                do
                {
                  long long v188 = *v185;
                  *(v186 - 1) = *(v185 - 1);
                  *uint64_t v186 = v188;
                  v186 += 2;
                  v185 += 2;
                  v187 -= 32;
                }
                while (v187);
                if (v169 == v174) {
                  goto LABEL_165;
                }
                uint64_t v184 = v169 & 0x7FFFFFFE0;
                if ((v169 & 0x18) == 0)
                {
                  v180 += v174;
                  v181 += v174;
                  int v183 = v169 & 0xFFFFFFE0;
                  goto LABEL_182;
                }
              }
              else
              {
                uint64_t v184 = 0;
              }
              v181 += v175;
              unint64_t v189 = v184 - (v169 & 0x7FFFFFFF8);
              unint64_t v190 = (uint64_t *)((char *)v179 + v184);
              unint64_t v191 = &v178[v184];
              do
              {
                uint64_t v192 = *v190++;
                *(void *)unint64_t v191 = v192;
                v191 += 8;
                v189 += 8;
              }
              while (v189);
              if (v169 == v175) {
                goto LABEL_165;
              }
              v180 += v175;
              int v183 = v169 & 0xFFFFFFF8;
LABEL_182:
              unsigned int v193 = v183 + 1;
              do
              {
                char v194 = *v180++;
                *v181++ = v194;
              }
              while (v168 > v193++);
LABEL_165:
              ++v162;
              v176 += 128;
              unint64_t v177 = (long long *)((char *)v177 + v167);
              unint64_t v179 = (_OWORD *)((char *)v179 + v167);
              v178 += 128;
            }
            while (v162 != v153);
          }
LABEL_185:
          AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock(&v247, 128, v236, v237, v244, v245);
LABEL_186:
          uint64_t result = v232;
          if (v233) {
            uint64_t result = memcpy(v232, v72, 0x400uLL);
          }
          BOOL v23 = v33++ == v221 >> 4;
          uint64_t v28 = v229;
        }
        while (!v23);
        BOOL v23 = v18++ == v214;
      }
      while (!v23);
    }
  }
  return result;
}

uint64_t AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, char a12)
{
  uint64_t v231 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v180 = a8;
  unsigned int v164 = a8 + a10 - 1;
  uint64_t v181 = a1;
  if (*(void *)(a1 + 168)) {
    int v21 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v21 = 0;
  }
  unsigned int v22 = a5 - 1;
  unsigned int v23 = a6 - 1;
  unsigned int v24 = a8 >> 3;
  unsigned int v163 = v164 >> 3;
  BOOL v25 = (v21 & 0xD00) == 0 || v21 == 768;
  int v26 = v21 & 0xE00;
  int v28 = !v25 && v26 != 1024;
  int v185 = v28;
  uint64_t result = a1;
  if (*(unsigned char *)(a1 + 232))
  {
    unsigned int v30 = *(unsigned __int8 *)(a1 + 255);
    unsigned int v31 = *(unsigned __int8 *)(a1 + 254);
    char v32 = __clz(v22);
    if (1 << v30 >= a6 || a5 >> v31)
    {
      if (!(a6 >> v30) && 1 << v31 < a5)
      {
        if (a6 < 2) {
          unsigned int v35 = 0;
        }
        else {
          unsigned int v35 = __clz(~(-1 << -(char)__clz(v23))) - 32;
        }
        v31 += v30 + v35;
        unsigned int v30 = -v35;
      }
    }
    else
    {
      unsigned int v33 = 32 - __clz(~(-1 << -v32));
      unsigned int v34 = v31 + v30;
      if (a5 < 2) {
        unsigned int v33 = 0;
      }
      unsigned int v30 = v34 - v33;
      unsigned int v31 = v33;
    }
    if (a5 < 2)
    {
      if (v31) {
        goto LABEL_27;
      }
    }
    else if (32 - __clz(~(-1 << -v32)) < v31)
    {
LABEL_27:
      BOOL v175 = 0;
LABEL_32:
      unsigned int v172 = v31 - 4;
      unsigned int v168 = v30 - 3;
      int v37 = -1 << *(unsigned char *)(*(void *)(a1 + 208) + 48);
      unsigned int v161 = (((~v37 + a5) & v37) + ~(-1 << v31)) >> v31;
      goto LABEL_33;
    }
    if (a6 < 2) {
      unsigned int v36 = 0;
    }
    else {
      unsigned int v36 = 32 - __clz(~(-1 << -(char)__clz(v23)));
    }
    BOOL v175 = v36 >= v30;
    goto LABEL_32;
  }
  BOOL v175 = 0;
  unsigned int v161 = 0;
  unsigned int v168 = 0;
  unsigned int v172 = 0;
LABEL_33:
  if (v24 <= v163)
  {
    unsigned int v174 = a7 + a9 - 1;
    unsigned int v160 = a7 >> 4;
    if (a7 >> 4 <= v174 >> 4)
    {
      unsigned int v183 = v22 >> 4;
      unsigned int v159 = v23 >> 3;
      int v182 = (v22 & 0xF) + 1;
      int v158 = (v23 & 7) + 1;
      uint32x2_t v38 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0xF00000007);
      v39.i64[0] = 0x2000000020;
      *(int32x2_t *)v40.i8 = vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32(vadd_s32((int32x2_t)vshl_u32(v38, (uint32x2_t)0xFFFFFFFCFFFFFFFDLL), (int32x2_t)-1)))))));
      v41.i64[0] = 0x2000000010;
      *(int8x8_t *)v42.i8 = vbic_s8(*(int8x8_t *)v40.i8, (int8x8_t)vcgt_u32((uint32x2_t)0x2000000010, v38));
      __int32 v170 = v42.i32[0] | v42.i32[1];
      uint64_t v167 = v42.i64[0];
      BOOL v166 = v42.i32[0] != 0;
      BOOL v165 = v42.i32[1] != 0;
      unsigned int v173 = a7;
      do
      {
        unsigned int v43 = (8 * v24) | 7;
        if (8 * v24 <= v180) {
          int v44 = v180;
        }
        else {
          int v44 = 8 * v24;
        }
        if (v164 < v43) {
          unsigned int v43 = v164;
        }
        int v171 = v44 - 8 * v24;
        int v179 = v43 - v44 + 1;
        unsigned int v45 = v160;
        int v46 = v158;
        if (v24 != v159) {
          int v46 = 8;
        }
        unsigned int v186 = v46;
        uint64_t v47 = v24 & ~(-1 << v168);
        uint64_t v178 = a3 + (v44 - v180) * a11;
        do
        {
          unsigned int v48 = 16 * v45;
          unsigned int v49 = 16 * (v45 + 1) - 1;
          if (16 * v45 <= a7) {
            int v50 = a7;
          }
          else {
            int v50 = 16 * v45;
          }
          if (v174 < v49) {
            unsigned int v49 = v174;
          }
          int v51 = v49 - v50 + 1;
          if (v45 == v183) {
            unsigned int v52 = v182;
          }
          else {
            unsigned int v52 = 16;
          }
          BOOL v53 = 1;
          if (8 * v24 >= v180 && v48 >= a7)
          {
            int v54 = v182;
            if (v45 != v183) {
              int v54 = 16;
            }
            BOOL v53 = v51 != v54 || v179 != v186;
          }
          if (v175)
          {
            if (v172 | v168)
            {
              int v56 = 0;
              uint64_t v57 = 0;
              int v58 = 1;
              BOOL v59 = v168 != 0;
              BOOL v60 = v172 != 0;
              unsigned int v61 = v168;
              unsigned int v62 = v172;
              do
              {
                --v61;
                if (v59) {
                  v57 |= (unint64_t)(v47 & v58) << v56++;
                }
                else {
                  unsigned int v61 = 0;
                }
                --v62;
                if (v60) {
                  v57 |= (unint64_t)(v45 & ~(-1 << v172) & v58) << v56++;
                }
                else {
                  unsigned int v62 = 0;
                }
                v58 *= 2;
                --v56;
                BOOL v60 = v62 != 0;
                BOOL v59 = v61 != 0;
              }
              while (v62 | v61);
            }
            else
            {
              uint64_t v57 = 0;
            }
            uint64_t v70 = *(void *)(result + 320) * ((v45 >> v172) + (v24 >> v168) * v161) + (v57 << 9);
          }
          else
          {
            if (v170)
            {
              int v63 = 0;
              uint64_t v64 = 0;
              int v65 = 1;
              BOOL v66 = v166;
              BOOL v67 = v165;
              int v68 = v167;
              int v69 = HIDWORD(v167);
              do
              {
                --v68;
                if (v66) {
                  v64 |= (unint64_t)(v65 & v24) << v63++;
                }
                else {
                  int v68 = 0;
                }
                --v69;
                if (v67) {
                  v64 |= (unint64_t)(v65 & v45) << v63++;
                }
                else {
                  int v69 = 0;
                }
                v65 *= 2;
                --v63;
                BOOL v67 = v69 != 0;
                BOOL v66 = v68 != 0;
              }
              while (v69 | v68);
            }
            else
            {
              uint64_t v64 = 0;
            }
            uint64_t v70 = v64 << 9;
          }
          unsigned int v71 = *(_DWORD *)(result + 128) >> (*(unsigned char *)(result + 144) + a12);
          if (v71 <= 1) {
            unsigned int v71 = 1;
          }
          unsigned int v72 = v71 + 15;
          if (v72 < 0x20) {
            unsigned int v73 = 0;
          }
          else {
            unsigned int v73 = 32 - __clz(~(-1 << -(char)__clz((v72 >> 4) - 1)));
          }
          unsigned int v74 = *(_DWORD *)(result + 132) >> (*(unsigned char *)(result + 144) + a12);
          if (v74 <= 1) {
            unsigned int v74 = 1;
          }
          unsigned int v75 = v74 + 7;
          if (v75 < 0x10)
          {
            unsigned int v76 = 0;
            if (!v73)
            {
LABEL_109:
              uint64_t v78 = 0;
              goto LABEL_110;
            }
          }
          else
          {
            unsigned int v76 = 32 - __clz(~(-1 << -(char)__clz((v75 >> 3) - 1)));
            if (!(v76 | v73)) {
              goto LABEL_109;
            }
          }
          int v77 = 0;
          uint64_t v78 = 0;
          BOOL v79 = v73 != 0;
          BOOL v80 = v76 != 0;
          int v81 = 1;
          do
          {
            --v73;
            if (v79) {
              v78 |= (unint64_t)(v81 & v45) << v77++;
            }
            else {
              unsigned int v73 = 0;
            }
            --v76;
            if (v80) {
              v78 |= (unint64_t)(v81 & v24) << v77++;
            }
            else {
              unsigned int v76 = 0;
            }
            v81 *= 2;
            --v77;
            BOOL v80 = v76 != 0;
            BOOL v79 = v73 != 0;
          }
          while (v76 | v73);
LABEL_110:
          unsigned int v82 = v50 - a7;
          int v83 = v52 < 0x10 || v53;
          float32x4_t v84 = (char *)(a4 + 8 * v78);
          unint64_t v85 = v178 + 4 * v82;
          unsigned int v86 = (void *)(a2 + v70);
          if (v186 < 8) {
            int v87 = 1;
          }
          else {
            int v87 = v83;
          }
          uint64_t v184 = v86;
          if (v185)
          {
            float32x4_t v88 = __dst;
            if (!v87) {
              goto LABEL_122;
            }
            unint64_t v169 = (char *)(a4 + 8 * v78);
            int v89 = v51;
            char v90 = v52;
            uint64_t v91 = v47;
            BOOL v92 = v53;
            memcpy(__dst, v86, sizeof(__dst));
            BOOL v53 = v92;
            uint64_t v47 = v91;
            LOBYTE(v52) = v90;
            int v51 = v89;
            float32x4_t v84 = v169;
            uint64_t result = v181;
          }
          else
          {
            float32x4_t v88 = v86;
            if (!v87)
            {
LABEL_122:
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock(v85, a11, (int16x8_t *)v88, v84, v52, v186, *(double *)v42.i64, *(double *)v40.i64, *(double *)v41.i64, *(double *)v39.i64, *(double *)v17.i64, v18, v19, v20);
              a7 = v173;
              goto LABEL_217;
            }
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE3ELj2ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = result;
          long long v188 = (int16x8_t *)v88;
          unsigned __int8 v196 = v52;
          unsigned __int8 v197 = v186;
          unsigned int v192 = v171;
          unsigned int v193 = v50 - v48;
          unint64_t v189 = v84;
          unint64_t v190 = v85;
          uint64_t v191 = a11;
          unsigned int v194 = v179;
          unsigned int v195 = v51;
          if (v53)
          {
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(result + 8) + 7384), block);
            a7 = v173;
            goto LABEL_217;
          }
          unsigned int v93 = *v84;
          if (v93 == 63)
          {
            int64x2_t v40 = *((int64x2_t *)v88 + 1);
            float32x4_t v95 = (const double *)(v88 + 32);
            *(float64x2x2_t *)v41.i8 = vld2q_f64(v95);
            int64x2_t v17 = vzip1q_s64(*(int64x2_t *)v88, v40);
            int64x2_t v42 = vzip2q_s64(*(int64x2_t *)v88, v40);
            int64x2_t v199 = v17;
            int64x2_t v203 = v42;
            int64x2_t v207 = v41;
            int64x2_t v211 = v39;
            uint64_t v94 = 64;
          }
          else if (v93 == 1)
          {
            int64x2_t v42 = (int64x2_t)vld1q_dup_s16((const __int16 *)v88);
            int64x2_t v199 = v42;
            int64x2_t v203 = v42;
            int64x2_t v207 = v42;
            int64x2_t v211 = v42;
            uint64_t v94 = 2;
          }
          else if (*v84)
          {
            uint64_t v94 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v199, 64, (uint64_t)v88, v93, *(double *)v42.i64, *(double *)v40.i64, *(double *)v41.i64, *(int8x8_t *)v39.i8);
          }
          else
          {
            uint64_t v94 = 0;
            int64x2_t v199 = 0uLL;
            int64x2_t v203 = 0uLL;
            int64x2_t v207 = 0uLL;
            int64x2_t v211 = 0uLL;
          }
          uint64_t v96 = (uint64_t)&v88[v94];
          unsigned int v97 = v84[1];
          if (v97 == 63)
          {
            int64x2_t v40 = *(int64x2_t *)(v96 + 16);
            float32x4_t v99 = (const double *)(v96 + 32);
            *(float64x2x2_t *)v41.i8 = vld2q_f64(v99);
            int64x2_t v17 = vzip1q_s64(*(int64x2_t *)v96, v40);
            int64x2_t v42 = vzip2q_s64(*(int64x2_t *)v96, v40);
            int64x2_t v200 = v17;
            int64x2_t v204 = v42;
            int64x2_t v208 = v41;
            int64x2_t v212 = v39;
            uint64_t v98 = 64;
          }
          else if (v97 == 1)
          {
            int64x2_t v42 = (int64x2_t)vld1q_dup_s16((const __int16 *)v96);
            int64x2_t v200 = v42;
            int64x2_t v204 = v42;
            int64x2_t v208 = v42;
            int64x2_t v212 = v42;
            uint64_t v98 = 2;
          }
          else if (v84[1])
          {
            uint64_t v98 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v200, 64, v96, v97, *(double *)v42.i64, *(double *)v40.i64, *(double *)v41.i64, *(int8x8_t *)v39.i8);
          }
          else
          {
            uint64_t v98 = 0;
            int64x2_t v200 = 0uLL;
            int64x2_t v204 = 0uLL;
            int64x2_t v208 = 0uLL;
            int64x2_t v212 = 0uLL;
          }
          uint64_t v100 = v96 + v98;
          unsigned int v101 = v84[2];
          if (v101 == 63)
          {
            int64x2_t v40 = *(int64x2_t *)(v100 + 16);
            float32x4_t v103 = (const double *)(v100 + 32);
            *(float64x2x2_t *)v41.i8 = vld2q_f64(v103);
            int64x2_t v17 = vzip1q_s64(*(int64x2_t *)v100, v40);
            int64x2_t v42 = vzip2q_s64(*(int64x2_t *)v100, v40);
            int64x2_t v215 = v17;
            int64x2_t v219 = v42;
            int64x2_t v223 = v41;
            int64x2_t v227 = v39;
            uint64_t v102 = 64;
          }
          else if (v101 == 1)
          {
            int64x2_t v42 = (int64x2_t)vld1q_dup_s16((const __int16 *)v100);
            int64x2_t v215 = v42;
            int64x2_t v219 = v42;
            int64x2_t v223 = v42;
            int64x2_t v227 = v42;
            uint64_t v102 = 2;
          }
          else if (v84[2])
          {
            uint64_t v102 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v215, 64, v100, v101, *(double *)v42.i64, *(double *)v40.i64, *(double *)v41.i64, *(int8x8_t *)v39.i8);
          }
          else
          {
            uint64_t v102 = 0;
            int64x2_t v215 = 0uLL;
            int64x2_t v219 = 0uLL;
            int64x2_t v223 = 0uLL;
            int64x2_t v227 = 0uLL;
          }
          uint64_t v104 = v100 + v102;
          unsigned int v105 = v84[3];
          if (v105 == 63)
          {
            int64x2_t v40 = *(int64x2_t *)(v104 + 16);
            uint64_t v107 = (const double *)(v104 + 32);
            *(float64x2x2_t *)v41.i8 = vld2q_f64(v107);
            int64x2_t v17 = vzip1q_s64(*(int64x2_t *)v104, v40);
            int64x2_t v42 = vzip2q_s64(*(int64x2_t *)v104, v40);
            int64x2_t v216 = v17;
            int64x2_t v220 = v42;
            int64x2_t v224 = v41;
            int64x2_t v228 = v39;
            uint64_t v106 = 64;
          }
          else if (v105 == 1)
          {
            int64x2_t v42 = (int64x2_t)vld1q_dup_s16((const __int16 *)v104);
            int64x2_t v216 = v42;
            int64x2_t v220 = v42;
            int64x2_t v224 = v42;
            int64x2_t v228 = v42;
            uint64_t v106 = 2;
          }
          else if (v84[3])
          {
            uint64_t v106 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v216, 64, v104, v105, *(double *)v42.i64, *(double *)v40.i64, *(double *)v41.i64, *(int8x8_t *)v39.i8);
          }
          else
          {
            uint64_t v106 = 0;
            int64x2_t v216 = 0uLL;
            int64x2_t v220 = 0uLL;
            int64x2_t v224 = 0uLL;
            int64x2_t v228 = 0uLL;
          }
          uint64_t v108 = v104 + v106;
          unsigned int v109 = v84[4];
          if (v109 == 63)
          {
            int64x2_t v40 = *(int64x2_t *)(v108 + 16);
            float32x4_t v111 = (const double *)(v108 + 32);
            *(float64x2x2_t *)v41.i8 = vld2q_f64(v111);
            int64x2_t v17 = vzip1q_s64(*(int64x2_t *)v108, v40);
            int64x2_t v42 = vzip2q_s64(*(int64x2_t *)v108, v40);
            int64x2_t v201 = v17;
            int64x2_t v205 = v42;
            int64x2_t v209 = v41;
            int64x2_t v213 = v39;
            uint64_t v110 = 64;
          }
          else if (v109 == 1)
          {
            int64x2_t v42 = (int64x2_t)vld1q_dup_s16((const __int16 *)v108);
            int64x2_t v201 = v42;
            int64x2_t v205 = v42;
            int64x2_t v209 = v42;
            int64x2_t v213 = v42;
            uint64_t v110 = 2;
          }
          else if (v84[4])
          {
            uint64_t v110 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v201, 64, v108, v109, *(double *)v42.i64, *(double *)v40.i64, *(double *)v41.i64, *(int8x8_t *)v39.i8);
          }
          else
          {
            uint64_t v110 = 0;
            int64x2_t v201 = 0uLL;
            int64x2_t v205 = 0uLL;
            int64x2_t v209 = 0uLL;
            int64x2_t v213 = 0uLL;
          }
          uint64_t v112 = v108 + v110;
          unsigned int v113 = v84[5];
          if (v113 == 63)
          {
            int64x2_t v40 = *(int64x2_t *)(v112 + 16);
            float32x4_t v115 = (const double *)(v112 + 32);
            *(float64x2x2_t *)v41.i8 = vld2q_f64(v115);
            int64x2_t v17 = vzip1q_s64(*(int64x2_t *)v112, v40);
            int64x2_t v42 = vzip2q_s64(*(int64x2_t *)v112, v40);
            int64x2_t v202 = v17;
            int64x2_t v206 = v42;
            int64x2_t v210 = v41;
            int64x2_t v214 = v39;
            uint64_t v114 = 64;
          }
          else if (v113 == 1)
          {
            int64x2_t v42 = (int64x2_t)vld1q_dup_s16((const __int16 *)v112);
            int64x2_t v202 = v42;
            int64x2_t v206 = v42;
            int64x2_t v210 = v42;
            int64x2_t v214 = v42;
            uint64_t v114 = 2;
          }
          else if (v84[5])
          {
            uint64_t v114 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v202, 64, v112, v113, *(double *)v42.i64, *(double *)v40.i64, *(double *)v41.i64, *(int8x8_t *)v39.i8);
          }
          else
          {
            uint64_t v114 = 0;
            int64x2_t v202 = 0uLL;
            int64x2_t v206 = 0uLL;
            int64x2_t v210 = 0uLL;
            int64x2_t v214 = 0uLL;
          }
          uint64_t v116 = v112 + v114;
          unsigned int v117 = v84[6];
          if (v117 == 63)
          {
            int64x2_t v40 = *(int64x2_t *)(v116 + 16);
            unsigned int v119 = (const double *)(v116 + 32);
            *(float64x2x2_t *)v41.i8 = vld2q_f64(v119);
            int64x2_t v17 = vzip1q_s64(*(int64x2_t *)v116, v40);
            int64x2_t v42 = vzip2q_s64(*(int64x2_t *)v116, v40);
            int64x2_t v217 = v17;
            int64x2_t v221 = v42;
            int64x2_t v225 = v41;
            int64x2_t v229 = v39;
            uint64_t v118 = 64;
          }
          else if (v117 == 1)
          {
            int64x2_t v42 = (int64x2_t)vld1q_dup_s16((const __int16 *)v116);
            int64x2_t v217 = v42;
            int64x2_t v221 = v42;
            int64x2_t v225 = v42;
            int64x2_t v229 = v42;
            uint64_t v118 = 2;
          }
          else if (v84[6])
          {
            uint64_t v118 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v217, 64, v116, v117, *(double *)v42.i64, *(double *)v40.i64, *(double *)v41.i64, *(int8x8_t *)v39.i8);
          }
          else
          {
            uint64_t v118 = 0;
            int64x2_t v217 = 0uLL;
            int64x2_t v221 = 0uLL;
            int64x2_t v225 = 0uLL;
            int64x2_t v229 = 0uLL;
          }
          uint64_t v120 = v116 + v118;
          unsigned int v121 = v84[7];
          if (v121 == 63)
          {
            int64x2_t v40 = *(int64x2_t *)(v120 + 16);
            float32x4_t v123 = (const double *)(v120 + 32);
            *(float64x2x2_t *)v41.i8 = vld2q_f64(v123);
            int64x2_t v17 = vzip1q_s64(*(int64x2_t *)v120, v40);
            int64x2_t v42 = vzip2q_s64(*(int64x2_t *)v120, v40);
            int64x2_t v218 = v17;
            int64x2_t v222 = v42;
            int64x2_t v226 = v41;
            int64x2_t v230 = v39;
            a7 = v173;
            uint64_t v122 = v194;
            if (!v194) {
              goto LABEL_216;
            }
          }
          else
          {
            a7 = v173;
            if (v121 == 1)
            {
              int64x2_t v42 = (int64x2_t)vld1q_dup_s16((const __int16 *)v120);
              int64x2_t v218 = v42;
              int64x2_t v222 = v42;
              int64x2_t v226 = v42;
              int64x2_t v230 = v42;
              uint64_t v122 = v194;
              if (!v194) {
                goto LABEL_216;
              }
            }
            else if (v121)
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v218, 64, v120, v121, *(double *)v42.i64, *(double *)v40.i64, *(double *)v41.i64, *(int8x8_t *)v39.i8);
              uint64_t v122 = v194;
              if (!v194) {
                goto LABEL_216;
              }
            }
            else
            {
              int64x2_t v218 = 0uLL;
              int64x2_t v222 = 0uLL;
              int64x2_t v226 = 0uLL;
              int64x2_t v230 = 0uLL;
              uint64_t v122 = v194;
              if (!v194) {
                goto LABEL_216;
              }
            }
          }
          if (v195)
          {
            uint64_t v124 = 0;
            unint64_t v125 = (unint64_t)v192 << 6;
            uint64_t v126 = 4 * v193;
            float32x4_t v127 = &v199.i8[v125 + v126];
            unint64_t v128 = v190;
            uint64_t v129 = v191;
            unint64_t v130 = 4 * v195;
            if (v130 <= 1) {
              unint64_t v131 = 1;
            }
            else {
              unint64_t v131 = 4 * v195;
            }
            unint64_t v132 = v125 + v126;
            float32x4_t v133 = &v199.i8[v125 + v126];
            if (v131) {
              BOOL v134 = (v131 - 1) >> 32 == 0;
            }
            else {
              BOOL v134 = 0;
            }
            uint64_t v135 = v131 & 0x3FFFFFFE0;
            uint64_t v136 = v131 & 0x3FFFFFFF8;
            char v138 = !v134 || v131 < 8;
            float32x4_t v139 = &v200.i8[v132];
            uint64_t v140 = (int64x2_t *)(v190 + 16);
            unsigned int v141 = v127;
            unint64_t v142 = v190;
            do
            {
              float32x4_t v143 = (char *)(v128 + v129 * v124);
              float32x4_t v144 = &v127[64 * v124];
              if ((unint64_t)(&v133[64 * v124] - v143) < 0x20) {
                char v145 = 1;
              }
              else {
                char v145 = v138;
              }
              if (v145)
              {
                int v146 = 0;
                goto LABEL_213;
              }
              if (v131 >= 0x20)
              {
                float32x4_t v148 = v140;
                float32x4_t v149 = (int64x2_t *)v139;
                uint64_t v150 = v131 & 0x3FFFFFFE0;
                do
                {
                  int64x2_t v42 = v148[-1];
                  int64x2_t v40 = *v148;
                  v149[-1] = v42;
                  *float32x4_t v149 = v40;
                  v149 += 2;
                  v148 += 2;
                  v150 -= 32;
                }
                while (v150);
                if (v131 == v135) {
                  goto LABEL_196;
                }
                uint64_t v147 = v131 & 0x3FFFFFFE0;
                if ((v131 & 0x18) == 0)
                {
                  v143 += v135;
                  v144 += v135;
                  int v146 = v131 & 0xFFFFFFE0;
                  goto LABEL_213;
                }
              }
              else
              {
                uint64_t v147 = 0;
              }
              v144 += v136;
              uint64_t v151 = v147 - v136;
              unsigned int v152 = (uint64_t *)(v142 + v147);
              uint64_t v153 = (uint64_t *)&v141[v147];
              do
              {
                uint64_t v154 = *v152++;
                v42.i64[0] = v154;
                *v153++ = v154;
                v151 += 8;
              }
              while (v151);
              if (v131 == v136) {
                goto LABEL_196;
              }
              v143 += v136;
              int v146 = v131 & 0xFFFFFFF8;
LABEL_213:
              unsigned int v155 = v146 + 1;
              do
              {
                char v156 = *v143++;
                *v144++ = v156;
              }
              while (v130 > v155++);
LABEL_196:
              ++v124;
              v139 += 64;
              uint64_t v140 = (int64x2_t *)((char *)v140 + v129);
              v142 += v129;
              v141 += 64;
            }
            while (v124 != v122);
          }
LABEL_216:
          AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)&v199, 64, v188, v189, v196, v197, *(double *)v42.i64, *(double *)v40.i64, *(double *)v41.i64, *(double *)v39.i64, *(double *)v17.i64, v18, v19, v20);
LABEL_217:
          if (v185) {
            memcpy(v184, v88, 0x200uLL);
          }
          BOOL v25 = v45++ == v174 >> 4;
          uint64_t result = v181;
        }
        while (!v25);
        BOOL v25 = v24++ == v163;
      }
      while (!v25);
    }
  }
  return result;
}

uint64_t AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, char a12)
{
  uint64_t v231 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v180 = a8;
  unsigned int v164 = a8 + a10 - 1;
  uint64_t v181 = a1;
  if (*(void *)(a1 + 168)) {
    int v17 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v17 = 0;
  }
  unsigned int v18 = a5 - 1;
  unsigned int v19 = a6 - 1;
  unsigned int v20 = a8 >> 3;
  unsigned int v163 = v164 >> 3;
  BOOL v21 = (v17 & 0xD00) == 0 || v17 == 768;
  int v22 = v17 & 0xE00;
  int v24 = !v21 && v22 != 1024;
  int v185 = v24;
  uint64_t result = a1;
  if (*(unsigned char *)(a1 + 232))
  {
    unsigned int v26 = *(unsigned __int8 *)(a1 + 255);
    unsigned int v27 = *(unsigned __int8 *)(a1 + 254);
    char v28 = __clz(v18);
    if (1 << v26 >= a6 || a5 >> v27)
    {
      if (!(a6 >> v26) && 1 << v27 < a5)
      {
        if (a6 < 2) {
          unsigned int v31 = 0;
        }
        else {
          unsigned int v31 = __clz(~(-1 << -(char)__clz(v19))) - 32;
        }
        v27 += v26 + v31;
        unsigned int v26 = -v31;
      }
    }
    else
    {
      unsigned int v29 = 32 - __clz(~(-1 << -v28));
      unsigned int v30 = v27 + v26;
      if (a5 < 2) {
        unsigned int v29 = 0;
      }
      unsigned int v26 = v30 - v29;
      unsigned int v27 = v29;
    }
    if (a5 < 2)
    {
      if (v27) {
        goto LABEL_27;
      }
    }
    else if (32 - __clz(~(-1 << -v28)) < v27)
    {
LABEL_27:
      BOOL v175 = 0;
LABEL_32:
      unsigned int v172 = v27 - 4;
      unsigned int v168 = v26 - 3;
      int v33 = -1 << *(unsigned char *)(*(void *)(a1 + 208) + 48);
      unsigned int v161 = (((~v33 + a5) & v33) + ~(-1 << v27)) >> v27;
      goto LABEL_33;
    }
    if (a6 < 2) {
      unsigned int v32 = 0;
    }
    else {
      unsigned int v32 = 32 - __clz(~(-1 << -(char)__clz(v19)));
    }
    BOOL v175 = v32 >= v26;
    goto LABEL_32;
  }
  BOOL v175 = 0;
  unsigned int v161 = 0;
  unsigned int v168 = 0;
  unsigned int v172 = 0;
LABEL_33:
  if (v20 <= v163)
  {
    unsigned int v174 = a7 + a9 - 1;
    unsigned int v160 = a7 >> 4;
    if (a7 >> 4 <= v174 >> 4)
    {
      unsigned int v183 = v18 >> 4;
      unsigned int v159 = v19 >> 3;
      int v182 = (v18 & 0xF) + 1;
      int v158 = (v19 & 7) + 1;
      uint32x2_t v34 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0xF00000007);
      v35.i64[0] = 0x2000000020;
      *(int32x2_t *)v36.i8 = vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32(vadd_s32((int32x2_t)vshl_u32(v34, (uint32x2_t)0xFFFFFFFCFFFFFFFDLL), (int32x2_t)-1)))))));
      v37.i64[0] = 0x2000000010;
      *(int8x8_t *)v38.i8 = vbic_s8(*(int8x8_t *)v36.i8, (int8x8_t)vcgt_u32((uint32x2_t)0x2000000010, v34));
      __int32 v170 = v38.i32[0] | v38.i32[1];
      uint64_t v167 = v38.i64[0];
      BOOL v166 = v38.i32[0] != 0;
      BOOL v165 = v38.i32[1] != 0;
      unsigned int v173 = a7;
      do
      {
        unsigned int v39 = (8 * v20) | 7;
        if (8 * v20 <= v180) {
          int v40 = v180;
        }
        else {
          int v40 = 8 * v20;
        }
        if (v164 < v39) {
          unsigned int v39 = v164;
        }
        int v171 = v40 - 8 * v20;
        int v179 = v39 - v40 + 1;
        unsigned int v41 = v160;
        int v42 = v158;
        if (v20 != v159) {
          int v42 = 8;
        }
        unsigned int v186 = v42;
        uint64_t v43 = v20 & ~(-1 << v168);
        uint64_t v178 = a3 + (v40 - v180) * a11;
        do
        {
          unsigned int v44 = 16 * v41;
          unsigned int v45 = 16 * (v41 + 1) - 1;
          if (16 * v41 <= a7) {
            int v46 = a7;
          }
          else {
            int v46 = 16 * v41;
          }
          if (v174 < v45) {
            unsigned int v45 = v174;
          }
          int v47 = v45 - v46 + 1;
          if (v41 == v183) {
            unsigned int v48 = v182;
          }
          else {
            unsigned int v48 = 16;
          }
          BOOL v49 = 1;
          if (8 * v20 >= v180 && v44 >= a7)
          {
            int v50 = v182;
            if (v41 != v183) {
              int v50 = 16;
            }
            BOOL v49 = v47 != v50 || v179 != v186;
          }
          if (v175)
          {
            if (v172 | v168)
            {
              int v52 = 0;
              uint64_t v53 = 0;
              int v54 = 1;
              BOOL v55 = v168 != 0;
              BOOL v56 = v172 != 0;
              unsigned int v57 = v168;
              unsigned int v58 = v172;
              do
              {
                --v57;
                if (v55) {
                  v53 |= (unint64_t)(v43 & v54) << v52++;
                }
                else {
                  unsigned int v57 = 0;
                }
                --v58;
                if (v56) {
                  v53 |= (unint64_t)(v41 & ~(-1 << v172) & v54) << v52++;
                }
                else {
                  unsigned int v58 = 0;
                }
                v54 *= 2;
                --v52;
                BOOL v56 = v58 != 0;
                BOOL v55 = v57 != 0;
              }
              while (v58 | v57);
            }
            else
            {
              uint64_t v53 = 0;
            }
            uint64_t v66 = *(void *)(result + 320) * ((v41 >> v172) + (v20 >> v168) * v161) + (v53 << 9);
          }
          else
          {
            if (v170)
            {
              int v59 = 0;
              uint64_t v60 = 0;
              int v61 = 1;
              BOOL v62 = v166;
              BOOL v63 = v165;
              int v64 = v167;
              int v65 = HIDWORD(v167);
              do
              {
                --v64;
                if (v62) {
                  v60 |= (unint64_t)(v61 & v20) << v59++;
                }
                else {
                  int v64 = 0;
                }
                --v65;
                if (v63) {
                  v60 |= (unint64_t)(v61 & v41) << v59++;
                }
                else {
                  int v65 = 0;
                }
                v61 *= 2;
                --v59;
                BOOL v63 = v65 != 0;
                BOOL v62 = v64 != 0;
              }
              while (v65 | v64);
            }
            else
            {
              uint64_t v60 = 0;
            }
            uint64_t v66 = v60 << 9;
          }
          unsigned int v67 = *(_DWORD *)(result + 128) >> (*(unsigned char *)(result + 144) + a12);
          if (v67 <= 1) {
            unsigned int v67 = 1;
          }
          unsigned int v68 = v67 + 15;
          if (v68 < 0x20) {
            unsigned int v69 = 0;
          }
          else {
            unsigned int v69 = 32 - __clz(~(-1 << -(char)__clz((v68 >> 4) - 1)));
          }
          unsigned int v70 = *(_DWORD *)(result + 132) >> (*(unsigned char *)(result + 144) + a12);
          if (v70 <= 1) {
            unsigned int v70 = 1;
          }
          unsigned int v71 = v70 + 7;
          if (v71 < 0x10)
          {
            unsigned int v72 = 0;
            if (!v69)
            {
LABEL_109:
              uint64_t v74 = 0;
              goto LABEL_110;
            }
          }
          else
          {
            unsigned int v72 = 32 - __clz(~(-1 << -(char)__clz((v71 >> 3) - 1)));
            if (!(v72 | v69)) {
              goto LABEL_109;
            }
          }
          int v73 = 0;
          uint64_t v74 = 0;
          BOOL v75 = v69 != 0;
          BOOL v76 = v72 != 0;
          int v77 = 1;
          do
          {
            --v69;
            if (v75) {
              v74 |= (unint64_t)(v77 & v41) << v73++;
            }
            else {
              unsigned int v69 = 0;
            }
            --v72;
            if (v76) {
              v74 |= (unint64_t)(v77 & v20) << v73++;
            }
            else {
              unsigned int v72 = 0;
            }
            v77 *= 2;
            --v73;
            BOOL v76 = v72 != 0;
            BOOL v75 = v69 != 0;
          }
          while (v72 | v69);
LABEL_110:
          unsigned int v78 = v46 - a7;
          int v79 = v48 < 0x10 || v49;
          BOOL v80 = (char *)(a4 + 8 * v74);
          int v81 = (int64x2_t *)(v178 + 4 * v78);
          unsigned int v82 = (void *)(a2 + v66);
          if (v186 < 8) {
            int v83 = 1;
          }
          else {
            int v83 = v79;
          }
          uint64_t v184 = v82;
          if (v185)
          {
            float32x4_t v84 = __dst;
            if (!v83) {
              goto LABEL_122;
            }
            unint64_t v169 = (char *)(a4 + 8 * v74);
            int v85 = v47;
            char v86 = v48;
            uint64_t v87 = v43;
            BOOL v88 = v49;
            memcpy(__dst, v82, sizeof(__dst));
            BOOL v49 = v88;
            uint64_t v43 = v87;
            LOBYTE(v48) = v86;
            int v47 = v85;
            BOOL v80 = v169;
            uint64_t result = v181;
          }
          else
          {
            float32x4_t v84 = v82;
            if (!v83)
            {
LABEL_122:
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock(v81, a11, (int64x2_t *)v84, v80, v48, v186);
              a7 = v173;
              goto LABEL_217;
            }
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE3ELj2ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = result;
          long long v188 = (int64x2_t *)v84;
          unsigned __int8 v196 = v48;
          unsigned __int8 v197 = v186;
          unsigned int v192 = v171;
          unsigned int v193 = v46 - v44;
          unint64_t v189 = v80;
          unint64_t v190 = v81;
          uint64_t v191 = a11;
          unsigned int v194 = v179;
          unsigned int v195 = v47;
          if (v49)
          {
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(result + 8) + 7384), block);
            a7 = v173;
            goto LABEL_217;
          }
          unsigned int v89 = *v80;
          if (v89 == 63)
          {
            int64x2_t v36 = *((int64x2_t *)v84 + 1);
            uint64_t v91 = (const double *)(v84 + 32);
            *(float64x2x2_t *)v37.i8 = vld2q_f64(v91);
            int64x2_t v38 = vzip2q_s64(*(int64x2_t *)v84, v36);
            int64x2_t v199 = vzip1q_s64(*(int64x2_t *)v84, v36);
            int64x2_t v203 = v38;
            int64x2_t v207 = v37;
            int64x2_t v211 = v35;
            uint64_t v90 = 64;
          }
          else if (v89 == 1)
          {
            int64x2_t v38 = (int64x2_t)vld1q_dup_s16((const __int16 *)v84);
            int64x2_t v199 = v38;
            int64x2_t v203 = v38;
            int64x2_t v207 = v38;
            int64x2_t v211 = v38;
            uint64_t v90 = 2;
          }
          else if (*v80)
          {
            uint64_t v90 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v199, 64, (uint64_t)v84, v89, *(double *)v38.i64, *(double *)v36.i64, *(double *)v37.i64, *(int8x8_t *)v35.i8);
          }
          else
          {
            uint64_t v90 = 0;
            int64x2_t v199 = 0uLL;
            int64x2_t v203 = 0uLL;
            int64x2_t v207 = 0uLL;
            int64x2_t v211 = 0uLL;
          }
          uint64_t v92 = (uint64_t)&v84[v90];
          unsigned int v93 = v80[1];
          if (v93 == 63)
          {
            int64x2_t v36 = *(int64x2_t *)(v92 + 16);
            float32x4_t v95 = (const double *)(v92 + 32);
            *(float64x2x2_t *)v37.i8 = vld2q_f64(v95);
            int64x2_t v38 = vzip2q_s64(*(int64x2_t *)v92, v36);
            int64x2_t v200 = vzip1q_s64(*(int64x2_t *)v92, v36);
            int64x2_t v204 = v38;
            int64x2_t v208 = v37;
            int64x2_t v212 = v35;
            uint64_t v94 = 64;
          }
          else if (v93 == 1)
          {
            int64x2_t v38 = (int64x2_t)vld1q_dup_s16((const __int16 *)v92);
            int64x2_t v200 = v38;
            int64x2_t v204 = v38;
            int64x2_t v208 = v38;
            int64x2_t v212 = v38;
            uint64_t v94 = 2;
          }
          else if (v80[1])
          {
            uint64_t v94 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v200, 64, v92, v93, *(double *)v38.i64, *(double *)v36.i64, *(double *)v37.i64, *(int8x8_t *)v35.i8);
          }
          else
          {
            uint64_t v94 = 0;
            int64x2_t v200 = 0uLL;
            int64x2_t v204 = 0uLL;
            int64x2_t v208 = 0uLL;
            int64x2_t v212 = 0uLL;
          }
          uint64_t v96 = v92 + v94;
          unsigned int v97 = v80[2];
          if (v97 == 63)
          {
            int64x2_t v36 = *(int64x2_t *)(v96 + 16);
            float32x4_t v99 = (const double *)(v96 + 32);
            *(float64x2x2_t *)v37.i8 = vld2q_f64(v99);
            int64x2_t v38 = vzip2q_s64(*(int64x2_t *)v96, v36);
            int64x2_t v215 = vzip1q_s64(*(int64x2_t *)v96, v36);
            int64x2_t v219 = v38;
            int64x2_t v223 = v37;
            int64x2_t v227 = v35;
            uint64_t v98 = 64;
          }
          else if (v97 == 1)
          {
            int64x2_t v38 = (int64x2_t)vld1q_dup_s16((const __int16 *)v96);
            int64x2_t v215 = v38;
            int64x2_t v219 = v38;
            int64x2_t v223 = v38;
            int64x2_t v227 = v38;
            uint64_t v98 = 2;
          }
          else if (v80[2])
          {
            uint64_t v98 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v215, 64, v96, v97, *(double *)v38.i64, *(double *)v36.i64, *(double *)v37.i64, *(int8x8_t *)v35.i8);
          }
          else
          {
            uint64_t v98 = 0;
            int64x2_t v215 = 0uLL;
            int64x2_t v219 = 0uLL;
            int64x2_t v223 = 0uLL;
            int64x2_t v227 = 0uLL;
          }
          uint64_t v100 = v96 + v98;
          unsigned int v101 = v80[3];
          if (v101 == 63)
          {
            int64x2_t v36 = *(int64x2_t *)(v100 + 16);
            float32x4_t v103 = (const double *)(v100 + 32);
            *(float64x2x2_t *)v37.i8 = vld2q_f64(v103);
            int64x2_t v38 = vzip2q_s64(*(int64x2_t *)v100, v36);
            int64x2_t v216 = vzip1q_s64(*(int64x2_t *)v100, v36);
            int64x2_t v220 = v38;
            int64x2_t v224 = v37;
            int64x2_t v228 = v35;
            uint64_t v102 = 64;
          }
          else if (v101 == 1)
          {
            int64x2_t v38 = (int64x2_t)vld1q_dup_s16((const __int16 *)v100);
            int64x2_t v216 = v38;
            int64x2_t v220 = v38;
            int64x2_t v224 = v38;
            int64x2_t v228 = v38;
            uint64_t v102 = 2;
          }
          else if (v80[3])
          {
            uint64_t v102 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v216, 64, v100, v101, *(double *)v38.i64, *(double *)v36.i64, *(double *)v37.i64, *(int8x8_t *)v35.i8);
          }
          else
          {
            uint64_t v102 = 0;
            int64x2_t v216 = 0uLL;
            int64x2_t v220 = 0uLL;
            int64x2_t v224 = 0uLL;
            int64x2_t v228 = 0uLL;
          }
          uint64_t v104 = v100 + v102;
          unsigned int v105 = v80[4];
          if (v105 == 63)
          {
            int64x2_t v36 = *(int64x2_t *)(v104 + 16);
            uint64_t v107 = (const double *)(v104 + 32);
            *(float64x2x2_t *)v37.i8 = vld2q_f64(v107);
            int64x2_t v38 = vzip2q_s64(*(int64x2_t *)v104, v36);
            int64x2_t v201 = vzip1q_s64(*(int64x2_t *)v104, v36);
            int64x2_t v205 = v38;
            int64x2_t v209 = v37;
            int64x2_t v213 = v35;
            uint64_t v106 = 64;
          }
          else if (v105 == 1)
          {
            int64x2_t v38 = (int64x2_t)vld1q_dup_s16((const __int16 *)v104);
            int64x2_t v201 = v38;
            int64x2_t v205 = v38;
            int64x2_t v209 = v38;
            int64x2_t v213 = v38;
            uint64_t v106 = 2;
          }
          else if (v80[4])
          {
            uint64_t v106 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v201, 64, v104, v105, *(double *)v38.i64, *(double *)v36.i64, *(double *)v37.i64, *(int8x8_t *)v35.i8);
          }
          else
          {
            uint64_t v106 = 0;
            int64x2_t v201 = 0uLL;
            int64x2_t v205 = 0uLL;
            int64x2_t v209 = 0uLL;
            int64x2_t v213 = 0uLL;
          }
          uint64_t v108 = v104 + v106;
          unsigned int v109 = v80[5];
          if (v109 == 63)
          {
            int64x2_t v36 = *(int64x2_t *)(v108 + 16);
            float32x4_t v111 = (const double *)(v108 + 32);
            *(float64x2x2_t *)v37.i8 = vld2q_f64(v111);
            int64x2_t v38 = vzip2q_s64(*(int64x2_t *)v108, v36);
            int64x2_t v202 = vzip1q_s64(*(int64x2_t *)v108, v36);
            int64x2_t v206 = v38;
            int64x2_t v210 = v37;
            int64x2_t v214 = v35;
            uint64_t v110 = 64;
          }
          else if (v109 == 1)
          {
            int64x2_t v38 = (int64x2_t)vld1q_dup_s16((const __int16 *)v108);
            int64x2_t v202 = v38;
            int64x2_t v206 = v38;
            int64x2_t v210 = v38;
            int64x2_t v214 = v38;
            uint64_t v110 = 2;
          }
          else if (v80[5])
          {
            uint64_t v110 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v202, 64, v108, v109, *(double *)v38.i64, *(double *)v36.i64, *(double *)v37.i64, *(int8x8_t *)v35.i8);
          }
          else
          {
            uint64_t v110 = 0;
            int64x2_t v202 = 0uLL;
            int64x2_t v206 = 0uLL;
            int64x2_t v210 = 0uLL;
            int64x2_t v214 = 0uLL;
          }
          uint64_t v112 = v108 + v110;
          unsigned int v113 = v80[6];
          if (v113 == 63)
          {
            int64x2_t v36 = *(int64x2_t *)(v112 + 16);
            float32x4_t v115 = (const double *)(v112 + 32);
            *(float64x2x2_t *)v37.i8 = vld2q_f64(v115);
            int64x2_t v38 = vzip2q_s64(*(int64x2_t *)v112, v36);
            int64x2_t v217 = vzip1q_s64(*(int64x2_t *)v112, v36);
            int64x2_t v221 = v38;
            int64x2_t v225 = v37;
            int64x2_t v229 = v35;
            uint64_t v114 = 64;
          }
          else if (v113 == 1)
          {
            int64x2_t v38 = (int64x2_t)vld1q_dup_s16((const __int16 *)v112);
            int64x2_t v217 = v38;
            int64x2_t v221 = v38;
            int64x2_t v225 = v38;
            int64x2_t v229 = v38;
            uint64_t v114 = 2;
          }
          else if (v80[6])
          {
            uint64_t v114 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v217, 64, v112, v113, *(double *)v38.i64, *(double *)v36.i64, *(double *)v37.i64, *(int8x8_t *)v35.i8);
          }
          else
          {
            uint64_t v114 = 0;
            int64x2_t v217 = 0uLL;
            int64x2_t v221 = 0uLL;
            int64x2_t v225 = 0uLL;
            int64x2_t v229 = 0uLL;
          }
          uint64_t v116 = v112 + v114;
          unsigned int v117 = v80[7];
          if (v117 == 63)
          {
            int64x2_t v120 = *(int64x2_t *)(v116 + 16);
            unsigned int v121 = (const double *)(v116 + 32);
            float64x2x2_t v232 = vld2q_f64(v121);
            int64x2_t v122 = vzip2q_s64(*(int64x2_t *)v116, v120);
            int64x2_t v218 = vzip1q_s64(*(int64x2_t *)v116, v120);
            int64x2_t v222 = v122;
            float64x2_t v226 = v232.val[0];
            float64x2_t v230 = v232.val[1];
            a7 = v173;
            uint64_t v118 = v194;
            if (!v194) {
              goto LABEL_216;
            }
          }
          else
          {
            a7 = v173;
            if (v117 == 1)
            {
              int16x8_t v119 = vld1q_dup_s16((const __int16 *)v116);
              int64x2_t v218 = (int64x2_t)v119;
              int64x2_t v222 = (int64x2_t)v119;
              float64x2_t v226 = (float64x2_t)v119;
              float64x2_t v230 = (float64x2_t)v119;
              uint64_t v118 = v194;
              if (!v194) {
                goto LABEL_216;
              }
            }
            else if (v117)
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v218, 64, v116, v117, *(double *)v38.i64, *(double *)v36.i64, *(double *)v37.i64, *(int8x8_t *)v35.i8);
              uint64_t v118 = v194;
              if (!v194) {
                goto LABEL_216;
              }
            }
            else
            {
              int64x2_t v218 = 0uLL;
              int64x2_t v222 = 0uLL;
              float64x2_t v226 = 0uLL;
              float64x2_t v230 = 0uLL;
              uint64_t v118 = v194;
              if (!v194) {
                goto LABEL_216;
              }
            }
          }
          if (v195)
          {
            uint64_t v123 = 0;
            unint64_t v124 = (unint64_t)v192 << 6;
            uint64_t v125 = 4 * v193;
            uint64_t v126 = &v199.i8[v124 + v125];
            float32x4_t v127 = v190;
            uint64_t v128 = v191;
            unint64_t v129 = 4 * v195;
            if (v129 <= 1) {
              unint64_t v130 = 1;
            }
            else {
              unint64_t v130 = 4 * v195;
            }
            unint64_t v131 = v124 + v125;
            unint64_t v132 = &v199.i8[v124 + v125];
            if (v130) {
              BOOL v133 = (v130 - 1) >> 32 == 0;
            }
            else {
              BOOL v133 = 0;
            }
            uint64_t v134 = v130 & 0x3FFFFFFE0;
            uint64_t v135 = v130 & 0x3FFFFFFF8;
            char v137 = !v133 || v130 < 8;
            char v138 = &v200.i8[v131];
            float32x4_t v139 = v190 + 1;
            uint64_t v140 = v126;
            unsigned int v141 = v190;
            do
            {
              unint64_t v142 = &v127->i8[v128 * v123];
              float32x4_t v143 = &v126[64 * v123];
              if ((unint64_t)(&v132[64 * v123] - v142) < 0x20) {
                char v144 = 1;
              }
              else {
                char v144 = v137;
              }
              if (v144)
              {
                int v145 = 0;
                goto LABEL_213;
              }
              if (v130 >= 0x20)
              {
                uint64_t v147 = v139;
                float32x4_t v148 = v138;
                uint64_t v149 = v130 & 0x3FFFFFFE0;
                do
                {
                  int64x2_t v150 = *v147;
                  *((int64x2_t *)v148 - 1) = v147[-1];
                  *(int64x2_t *)float32x4_t v148 = v150;
                  v148 += 32;
                  v147 += 2;
                  v149 -= 32;
                }
                while (v149);
                if (v130 == v134) {
                  goto LABEL_196;
                }
                uint64_t v146 = v130 & 0x3FFFFFFE0;
                if ((v130 & 0x18) == 0)
                {
                  v142 += v134;
                  v143 += v134;
                  int v145 = v130 & 0xFFFFFFE0;
                  goto LABEL_213;
                }
              }
              else
              {
                uint64_t v146 = 0;
              }
              v143 += v135;
              uint64_t v151 = v146 - v135;
              unsigned int v152 = (uint64_t *)((char *)v141->i64 + v146);
              uint64_t v153 = &v140[v146];
              do
              {
                uint64_t v154 = *v152++;
                *(void *)uint64_t v153 = v154;
                v153 += 8;
                v151 += 8;
              }
              while (v151);
              if (v130 == v135) {
                goto LABEL_196;
              }
              v142 += v135;
              int v145 = v130 & 0xFFFFFFF8;
LABEL_213:
              unsigned int v155 = v145 + 1;
              do
              {
                char v156 = *v142++;
                *v143++ = v156;
              }
              while (v129 > v155++);
LABEL_196:
              ++v123;
              v138 += 64;
              float32x4_t v139 = (int64x2_t *)((char *)v139 + v128);
              unsigned int v141 = (int64x2_t *)((char *)v141 + v128);
              v140 += 64;
            }
            while (v123 != v118);
          }
LABEL_216:
          AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock(&v199, 64, v188, v189, v196, v197);
LABEL_217:
          if (v185) {
            memcpy(v184, v84, 0x200uLL);
          }
          BOOL v21 = v41++ == v174 >> 4;
          uint64_t result = v181;
        }
        while (!v21);
        BOOL v21 = v20++ == v163;
      }
      while (!v21);
    }
  }
  return result;
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, uint64_t a7, unsigned int a8, int a9, int a10, uint64_t a11, int a12)
{
  uint64_t v228 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  uint64_t v17 = a1;
  unsigned int v177 = a8;
  unsigned int v18 = a8 >> 3;
  unsigned int v162 = a8 + a10 - 1;
  unsigned int v164 = v162 >> 3;
  unsigned int v19 = *(unsigned __int8 *)(*(void *)(a1 + 208) + 88);
  unsigned int v20 = *(_DWORD *)(a1 + 112);
  uint64_t v178 = v17;
  if (*(void *)(v17 + 168))
  {
    __int16 CacheMode = IOSurfaceGetCacheMode();
    uint64_t v17 = v178;
    int v22 = CacheMode & 0xF00;
  }
  else
  {
    int v22 = 0;
  }
  BOOL v23 = (v22 & 0xD00) == 0 || v22 == 768;
  int v24 = v22 & 0xE00;
  int v26 = !v23 && v24 != 1024;
  int v182 = v26;
  BOOL isLevelTiled = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::isLevelTiled(v17, *(_DWORD *)(v17 + 144) + a12);
  uint64_t v32 = v178;
  BOOL v171 = isLevelTiled;
  if (v18 <= v164)
  {
    unsigned int v170 = a7 + a9 - 1;
    unsigned int v161 = a7 >> 4;
    if (a7 >> 4 <= v170 >> 4)
    {
      unsigned int v158 = a5 - 1;
      unsigned int v180 = (a5 - 1) >> 4;
      int v179 = ((a5 - 1) & 0xF) + 1;
      int v159 = ((a6 - 1) & 7) + 1;
      unsigned int v160 = (a6 - 1) >> 3;
      uint32x2_t v33 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0xF00000007);
      v34.i64[0] = 0x2000000020;
      *(int32x2_t *)v35.i8 = vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32(vadd_s32((int32x2_t)vshl_u32(v33, (uint32x2_t)0xFFFFFFFCFFFFFFFDLL), (int32x2_t)-1)))))));
      v36.i64[0] = 0x2000000010;
      *(int8x8_t *)v37.i8 = vbic_s8(*(int8x8_t *)v35.i8, (int8x8_t)vcgt_u32((uint32x2_t)0x2000000010, v33));
      __int32 v169 = v37.i32[0] | v37.i32[1];
      uint64_t v168 = v37.i64[0];
      BOOL v167 = v37.i32[0] != 0;
      BOOL v166 = v37.i32[1] != 0;
      unint64_t v157 = 8 * v20 * (unint64_t)v19;
      do
      {
        unsigned int v38 = (8 * v18) | 7;
        if (8 * v18 <= v177) {
          int v39 = v177;
        }
        else {
          int v39 = 8 * v18;
        }
        unsigned int v40 = v161;
        if (v162 < v38) {
          unsigned int v38 = v162;
        }
        unsigned int v176 = 8 * v18;
        int v165 = v39 - 8 * v18;
        int v175 = v38 - v39 + 1;
        int v41 = v159;
        if (v18 != v160) {
          int v41 = 8;
        }
        unsigned int v183 = v41;
        uint64_t v174 = a3 + (v39 - v177) * a11;
        do
        {
          unsigned int v42 = 16 * v40;
          unsigned int v43 = 16 * (v40 + 1) - 1;
          if (16 * v40 <= a7) {
            int v44 = a7;
          }
          else {
            int v44 = 16 * v40;
          }
          if (v170 < v43) {
            unsigned int v43 = v170;
          }
          int v45 = v43 - v44 + 1;
          if (v40 == v180) {
            unsigned int v46 = v179;
          }
          else {
            unsigned int v46 = 16;
          }
          BOOL v47 = 1;
          if (v176 >= v177 && v42 >= a7)
          {
            int v48 = v179;
            if (v40 != v180) {
              int v48 = 16;
            }
            BOOL v47 = v45 != v48 || v175 != v183;
          }
          if (v171)
          {
            unsigned int v69 = 0;
            uint64_t v70 = v157 >> (*(unsigned char *)(v32 + 57) != 0);
            char v71 = 1;
            if (v70 > 127)
            {
              if (v70 > 511)
              {
                if (v70 == 512)
                {
                  char v72 = 0;
                  unsigned int v69 = 16;
                  unsigned int v73 = 16;
                }
                else
                {
                  char v72 = 1;
                  unsigned int v73 = 0;
                  if (v70 == 1024)
                  {
                    unsigned int v73 = 8;
                    unsigned int v69 = 16;
                  }
                }
              }
              else if (v70 == 128)
              {
                char v71 = 0;
                char v72 = 0;
                unsigned int v69 = 32;
                unsigned int v73 = 32;
              }
              else
              {
                char v72 = 1;
                unsigned int v73 = 0;
                if (v70 == 256)
                {
                  char v71 = 0;
                  char v72 = 0;
                  unsigned int v73 = 16;
                  unsigned int v69 = 32;
                }
              }
            }
            else
            {
              char v72 = 1;
              unsigned int v73 = 0;
              switch(v70)
              {
                case 4:
                  char v71 = 0;
                  char v72 = 0;
                  unsigned int v73 = 128;
                  unsigned int v69 = 256;
                  break;
                case 5:
                case 6:
                case 7:
                case 9:
                case 10:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 17:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                  break;
                case 8:
                  char v71 = 0;
                  char v72 = 0;
                  unsigned int v69 = 128;
                  unsigned int v73 = 128;
                  break;
                case 16:
                  char v71 = 0;
                  char v72 = 0;
                  unsigned int v73 = 64;
                  unsigned int v69 = 128;
                  break;
                case 32:
                  char v71 = 0;
                  char v72 = 0;
                  unsigned int v69 = 64;
                  unsigned int v73 = 64;
                  break;
                default:
                  if (v70 == 64)
                  {
                    char v71 = 0;
                    char v72 = 0;
                    unsigned int v73 = 32;
                    unsigned int v69 = 64;
                  }
                  break;
              }
            }
            unsigned int v146 = (v69 >> 4) - 1;
            if (v71) {
              unsigned int v147 = 0;
            }
            else {
              unsigned int v147 = 32 - __clz(~(-1 << -(char)__clz(v146)));
            }
            unsigned int v148 = (v73 >> 3) - 1;
            if (v72)
            {
              unsigned int v149 = 0;
              if (v147) {
                goto LABEL_210;
              }
            }
            else
            {
              unsigned int v149 = 32 - __clz(~(-1 << -(char)__clz(v148)));
              if (v149 | v147)
              {
LABEL_210:
                int v150 = 0;
                uint64_t v151 = 0;
                int v152 = v40 & v146;
                int v153 = v18 & v148;
                BOOL v154 = v149 != 0;
                BOOL v155 = v147 != 0;
                int v156 = 1;
                do
                {
                  --v149;
                  if (v154) {
                    v151 |= (unint64_t)(v156 & v153) << v150++;
                  }
                  else {
                    unsigned int v149 = 0;
                  }
                  --v147;
                  if (v155) {
                    v151 |= (unint64_t)(v156 & v152) << v150++;
                  }
                  else {
                    unsigned int v147 = 0;
                  }
                  v156 *= 2;
                  --v150;
                  BOOL v155 = v147 != 0;
                  BOOL v154 = v149 != 0;
                }
                while (v147 | v149);
                goto LABEL_222;
              }
            }
            uint64_t v151 = 0;
LABEL_222:
            unint64_t v57 = ((unint64_t)(v42 / v69 + v176 / v73 * ((v69 + v158) / v69)) << 14) + (v151 << 9);
            goto LABEL_58;
          }
          if (v169)
          {
            int v50 = 0;
            uint64_t v51 = 0;
            int v52 = 1;
            BOOL v53 = v167;
            BOOL v54 = v166;
            int v55 = v168;
            int v56 = HIDWORD(v168);
            do
            {
              --v55;
              if (v53) {
                v51 |= (unint64_t)(v52 & v18) << v50++;
              }
              else {
                int v55 = 0;
              }
              --v56;
              if (v54) {
                v51 |= (unint64_t)(v52 & v40) << v50++;
              }
              else {
                int v56 = 0;
              }
              v52 *= 2;
              --v50;
              BOOL v54 = v56 != 0;
              BOOL v53 = v55 != 0;
            }
            while (v56 | v55);
          }
          else
          {
            uint64_t v51 = 0;
          }
          unint64_t v57 = v51 << 9;
LABEL_58:
          unsigned int v58 = *(_DWORD *)(v32 + 128) >> (*(unsigned char *)(v32 + 144) + a12);
          if (v58 <= 1) {
            unsigned int v58 = 1;
          }
          unsigned int v59 = v58 + 15;
          if (v59 < 0x20) {
            unsigned int v60 = 0;
          }
          else {
            unsigned int v60 = 32 - __clz(~(-1 << -(char)__clz((v59 >> 4) - 1)));
          }
          unsigned int v61 = *(_DWORD *)(v32 + 132) >> (*(unsigned char *)(v32 + 144) + a12);
          if (v61 <= 1) {
            unsigned int v61 = 1;
          }
          unsigned int v62 = v61 + 7;
          if (v62 < 0x10)
          {
            unsigned int v63 = 0;
            if (!v60)
            {
LABEL_80:
              uint64_t v65 = 0;
              goto LABEL_81;
            }
          }
          else
          {
            unsigned int v63 = 32 - __clz(~(-1 << -(char)__clz((v62 >> 3) - 1)));
            if (!(v63 | v60)) {
              goto LABEL_80;
            }
          }
          int v64 = 0;
          uint64_t v65 = 0;
          BOOL v66 = v60 != 0;
          BOOL v67 = v63 != 0;
          int v68 = 1;
          do
          {
            --v60;
            if (v66) {
              v65 |= (unint64_t)(v68 & v40) << v64++;
            }
            else {
              unsigned int v60 = 0;
            }
            --v63;
            if (v67) {
              v65 |= (unint64_t)(v68 & v18) << v64++;
            }
            else {
              unsigned int v63 = 0;
            }
            v68 *= 2;
            --v64;
            BOOL v67 = v63 != 0;
            BOOL v66 = v60 != 0;
          }
          while (v63 | v60);
LABEL_81:
          uint64_t v74 = a7;
          int v75 = v46 < 0x10 || v47;
          BOOL v76 = (char *)(a4 + 8 * v65);
          unint64_t v77 = v174 + 4 * (v44 - a7);
          unsigned int v78 = (unsigned char *)(a2 + v57);
          if (v183 < 8) {
            int v79 = 1;
          }
          else {
            int v79 = v75;
          }
          __src = v78;
          if (v182)
          {
            if (!v79)
            {
              unsigned int v78 = __dst;
LABEL_94:
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock(v77, a11, (int16x8_t *)v78, v76, v46, v183, *(double *)v37.i64, *(double *)v35.i64, *(double *)v36.i64, *(double *)v34.i64, *(double *)v28.i64, v29, v30, v31);
              goto LABEL_95;
            }
            int v80 = v45;
            memcpy(__dst, __src, sizeof(__dst));
            int v45 = v80;
            unsigned int v78 = __dst;
            uint64_t v32 = v178;
          }
          else if (!v79)
          {
            goto LABEL_94;
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE3ELj2ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = v32;
          int v185 = (int16x8_t *)v78;
          unsigned __int8 v193 = v46;
          unsigned __int8 v194 = v183;
          unsigned int v189 = v165;
          unsigned int v190 = v44 - v42;
          unsigned int v186 = v76;
          unint64_t v187 = v77;
          uint64_t v188 = a11;
          unsigned int v191 = v175;
          unsigned int v192 = v45;
          if (!v47)
          {
            unsigned int v81 = *v76;
            a7 = v74;
            if (v81 == 63)
            {
              int64x2_t v35 = *((int64x2_t *)v78 + 1);
              int v83 = (const double *)(v78 + 32);
              *(float64x2x2_t *)v36.i8 = vld2q_f64(v83);
              int64x2_t v28 = vzip1q_s64(*(int64x2_t *)v78, v35);
              int64x2_t v37 = vzip2q_s64(*(int64x2_t *)v78, v35);
              int64x2_t v196 = v28;
              int64x2_t v200 = v37;
              int64x2_t v204 = v36;
              int64x2_t v208 = v34;
              uint64_t v82 = 64;
            }
            else if (v81 == 1)
            {
              int64x2_t v37 = (int64x2_t)vld1q_dup_s16((const __int16 *)v78);
              int64x2_t v196 = v37;
              int64x2_t v200 = v37;
              int64x2_t v204 = v37;
              int64x2_t v208 = v37;
              uint64_t v82 = 2;
            }
            else if (*v76)
            {
              uint64_t v82 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v196, 64, (uint64_t)v78, v81, *(double *)v37.i64, *(double *)v35.i64, *(double *)v36.i64, *(int8x8_t *)v34.i8);
            }
            else
            {
              uint64_t v82 = 0;
              int64x2_t v196 = 0uLL;
              int64x2_t v200 = 0uLL;
              int64x2_t v204 = 0uLL;
              int64x2_t v208 = 0uLL;
            }
            uint64_t v84 = (uint64_t)&v78[v82];
            unsigned int v85 = v76[1];
            if (v85 == 63)
            {
              int64x2_t v35 = *(int64x2_t *)(v84 + 16);
              uint64_t v87 = (const double *)(v84 + 32);
              *(float64x2x2_t *)v36.i8 = vld2q_f64(v87);
              int64x2_t v28 = vzip1q_s64(*(int64x2_t *)v84, v35);
              int64x2_t v37 = vzip2q_s64(*(int64x2_t *)v84, v35);
              int64x2_t v197 = v28;
              int64x2_t v201 = v37;
              int64x2_t v205 = v36;
              int64x2_t v209 = v34;
              uint64_t v86 = 64;
            }
            else if (v85 == 1)
            {
              int64x2_t v37 = (int64x2_t)vld1q_dup_s16((const __int16 *)v84);
              int64x2_t v197 = v37;
              int64x2_t v201 = v37;
              int64x2_t v205 = v37;
              int64x2_t v209 = v37;
              uint64_t v86 = 2;
            }
            else if (v76[1])
            {
              uint64_t v86 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v197, 64, v84, v85, *(double *)v37.i64, *(double *)v35.i64, *(double *)v36.i64, *(int8x8_t *)v34.i8);
            }
            else
            {
              uint64_t v86 = 0;
              int64x2_t v197 = 0uLL;
              int64x2_t v201 = 0uLL;
              int64x2_t v205 = 0uLL;
              int64x2_t v209 = 0uLL;
            }
            uint64_t v88 = v84 + v86;
            unsigned int v89 = v76[2];
            if (v89 == 63)
            {
              int64x2_t v35 = *(int64x2_t *)(v88 + 16);
              uint64_t v91 = (const double *)(v88 + 32);
              *(float64x2x2_t *)v36.i8 = vld2q_f64(v91);
              int64x2_t v28 = vzip1q_s64(*(int64x2_t *)v88, v35);
              int64x2_t v37 = vzip2q_s64(*(int64x2_t *)v88, v35);
              int64x2_t v212 = v28;
              int64x2_t v216 = v37;
              int64x2_t v220 = v36;
              int64x2_t v224 = v34;
              uint64_t v90 = 64;
            }
            else if (v89 == 1)
            {
              int64x2_t v37 = (int64x2_t)vld1q_dup_s16((const __int16 *)v88);
              int64x2_t v212 = v37;
              int64x2_t v216 = v37;
              int64x2_t v220 = v37;
              int64x2_t v224 = v37;
              uint64_t v90 = 2;
            }
            else if (v76[2])
            {
              uint64_t v90 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v212, 64, v88, v89, *(double *)v37.i64, *(double *)v35.i64, *(double *)v36.i64, *(int8x8_t *)v34.i8);
            }
            else
            {
              uint64_t v90 = 0;
              int64x2_t v212 = 0uLL;
              int64x2_t v216 = 0uLL;
              int64x2_t v220 = 0uLL;
              int64x2_t v224 = 0uLL;
            }
            uint64_t v92 = v88 + v90;
            unsigned int v93 = v76[3];
            if (v93 == 63)
            {
              int64x2_t v35 = *(int64x2_t *)(v92 + 16);
              float32x4_t v95 = (const double *)(v92 + 32);
              *(float64x2x2_t *)v36.i8 = vld2q_f64(v95);
              int64x2_t v28 = vzip1q_s64(*(int64x2_t *)v92, v35);
              int64x2_t v37 = vzip2q_s64(*(int64x2_t *)v92, v35);
              int64x2_t v213 = v28;
              int64x2_t v217 = v37;
              int64x2_t v221 = v36;
              int64x2_t v225 = v34;
              uint64_t v94 = 64;
            }
            else if (v93 == 1)
            {
              int64x2_t v37 = (int64x2_t)vld1q_dup_s16((const __int16 *)v92);
              int64x2_t v213 = v37;
              int64x2_t v217 = v37;
              int64x2_t v221 = v37;
              int64x2_t v225 = v37;
              uint64_t v94 = 2;
            }
            else if (v76[3])
            {
              uint64_t v94 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v213, 64, v92, v93, *(double *)v37.i64, *(double *)v35.i64, *(double *)v36.i64, *(int8x8_t *)v34.i8);
            }
            else
            {
              uint64_t v94 = 0;
              int64x2_t v213 = 0uLL;
              int64x2_t v217 = 0uLL;
              int64x2_t v221 = 0uLL;
              int64x2_t v225 = 0uLL;
            }
            uint64_t v96 = v92 + v94;
            unsigned int v97 = v76[4];
            if (v97 == 63)
            {
              int64x2_t v35 = *(int64x2_t *)(v96 + 16);
              float32x4_t v99 = (const double *)(v96 + 32);
              *(float64x2x2_t *)v36.i8 = vld2q_f64(v99);
              int64x2_t v28 = vzip1q_s64(*(int64x2_t *)v96, v35);
              int64x2_t v37 = vzip2q_s64(*(int64x2_t *)v96, v35);
              int64x2_t v198 = v28;
              int64x2_t v202 = v37;
              int64x2_t v206 = v36;
              int64x2_t v210 = v34;
              uint64_t v98 = 64;
            }
            else if (v97 == 1)
            {
              int64x2_t v37 = (int64x2_t)vld1q_dup_s16((const __int16 *)v96);
              int64x2_t v198 = v37;
              int64x2_t v202 = v37;
              int64x2_t v206 = v37;
              int64x2_t v210 = v37;
              uint64_t v98 = 2;
            }
            else if (v76[4])
            {
              uint64_t v98 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v198, 64, v96, v97, *(double *)v37.i64, *(double *)v35.i64, *(double *)v36.i64, *(int8x8_t *)v34.i8);
            }
            else
            {
              uint64_t v98 = 0;
              int64x2_t v198 = 0uLL;
              int64x2_t v202 = 0uLL;
              int64x2_t v206 = 0uLL;
              int64x2_t v210 = 0uLL;
            }
            uint64_t v100 = v96 + v98;
            unsigned int v101 = v76[5];
            if (v101 == 63)
            {
              int64x2_t v35 = *(int64x2_t *)(v100 + 16);
              float32x4_t v103 = (const double *)(v100 + 32);
              *(float64x2x2_t *)v36.i8 = vld2q_f64(v103);
              int64x2_t v28 = vzip1q_s64(*(int64x2_t *)v100, v35);
              int64x2_t v37 = vzip2q_s64(*(int64x2_t *)v100, v35);
              int64x2_t v199 = v28;
              int64x2_t v203 = v37;
              int64x2_t v207 = v36;
              int64x2_t v211 = v34;
              uint64_t v102 = 64;
            }
            else if (v101 == 1)
            {
              int64x2_t v37 = (int64x2_t)vld1q_dup_s16((const __int16 *)v100);
              int64x2_t v199 = v37;
              int64x2_t v203 = v37;
              int64x2_t v207 = v37;
              int64x2_t v211 = v37;
              uint64_t v102 = 2;
            }
            else if (v76[5])
            {
              uint64_t v102 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v199, 64, v100, v101, *(double *)v37.i64, *(double *)v35.i64, *(double *)v36.i64, *(int8x8_t *)v34.i8);
            }
            else
            {
              uint64_t v102 = 0;
              int64x2_t v199 = 0uLL;
              int64x2_t v203 = 0uLL;
              int64x2_t v207 = 0uLL;
              int64x2_t v211 = 0uLL;
            }
            uint64_t v104 = v100 + v102;
            unsigned int v105 = v76[6];
            if (v105 == 63)
            {
              int64x2_t v35 = *(int64x2_t *)(v104 + 16);
              uint64_t v107 = (const double *)(v104 + 32);
              *(float64x2x2_t *)v36.i8 = vld2q_f64(v107);
              int64x2_t v28 = vzip1q_s64(*(int64x2_t *)v104, v35);
              int64x2_t v37 = vzip2q_s64(*(int64x2_t *)v104, v35);
              int64x2_t v214 = v28;
              int64x2_t v218 = v37;
              int64x2_t v222 = v36;
              int64x2_t v226 = v34;
              uint64_t v106 = 64;
            }
            else if (v105 == 1)
            {
              int64x2_t v37 = (int64x2_t)vld1q_dup_s16((const __int16 *)v104);
              int64x2_t v214 = v37;
              int64x2_t v218 = v37;
              int64x2_t v222 = v37;
              int64x2_t v226 = v37;
              uint64_t v106 = 2;
            }
            else if (v76[6])
            {
              uint64_t v106 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v214, 64, v104, v105, *(double *)v37.i64, *(double *)v35.i64, *(double *)v36.i64, *(int8x8_t *)v34.i8);
            }
            else
            {
              uint64_t v106 = 0;
              int64x2_t v214 = 0uLL;
              int64x2_t v218 = 0uLL;
              int64x2_t v222 = 0uLL;
              int64x2_t v226 = 0uLL;
            }
            uint64_t v108 = v104 + v106;
            unsigned int v109 = v76[7];
            if (v109 == 63)
            {
              int64x2_t v35 = *(int64x2_t *)(v108 + 16);
              float32x4_t v111 = (const double *)(v108 + 32);
              *(float64x2x2_t *)v36.i8 = vld2q_f64(v111);
              int64x2_t v28 = vzip1q_s64(*(int64x2_t *)v108, v35);
              int64x2_t v37 = vzip2q_s64(*(int64x2_t *)v108, v35);
              int64x2_t v215 = v28;
              int64x2_t v219 = v37;
              int64x2_t v223 = v36;
              int64x2_t v227 = v34;
              uint64_t v110 = v191;
              if (v191) {
                goto LABEL_156;
              }
            }
            else
            {
              if (v109 != 1)
              {
                if (v76[7])
                {
                  AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v215, 64, v108, v109, *(double *)v37.i64, *(double *)v35.i64, *(double *)v36.i64, *(int8x8_t *)v34.i8);
                  uint64_t v110 = v191;
                  if (!v191) {
                    goto LABEL_190;
                  }
                }
                else
                {
                  int64x2_t v215 = 0uLL;
                  int64x2_t v219 = 0uLL;
                  int64x2_t v223 = 0uLL;
                  int64x2_t v227 = 0uLL;
                  uint64_t v110 = v191;
                  if (!v191) {
                    goto LABEL_190;
                  }
                }
LABEL_156:
                if (!v192) {
                  goto LABEL_190;
                }
                uint64_t v112 = 0;
                unint64_t v113 = (unint64_t)v189 << 6;
                uint64_t v114 = 4 * v190;
                float32x4_t v115 = &v196.i8[v113 + v114];
                unint64_t v116 = v187;
                uint64_t v117 = v188;
                unint64_t v118 = 4 * v192;
                if (v118 <= 1) {
                  unint64_t v119 = 1;
                }
                else {
                  unint64_t v119 = 4 * v192;
                }
                unint64_t v120 = v113 + v114;
                unsigned int v121 = &v196.i8[v113 + v114];
                if (v119) {
                  BOOL v122 = (v119 - 1) >> 32 == 0;
                }
                else {
                  BOOL v122 = 0;
                }
                uint64_t v123 = v119 & 0x3FFFFFFE0;
                uint64_t v124 = v119 & 0x3FFFFFFF8;
                char v126 = !v122 || v119 < 8;
                float32x4_t v127 = &v197.i8[v120];
                uint64_t v128 = (int64x2_t *)(v187 + 16);
                unint64_t v129 = v115;
                unint64_t v130 = v187;
                while (2)
                {
                  unint64_t v131 = (char *)(v116 + v117 * v112);
                  unint64_t v132 = &v115[64 * v112];
                  if ((unint64_t)(&v121[64 * v112] - v131) < 0x20) {
                    char v133 = 1;
                  }
                  else {
                    char v133 = v126;
                  }
                  if (v133)
                  {
                    int v134 = 0;
LABEL_187:
                    unsigned int v143 = v134 + 1;
                    do
                    {
                      char v144 = *v131++;
                      *v132++ = v144;
                    }
                    while (v118 > v143++);
                  }
                  else
                  {
                    if (v119 >= 0x20)
                    {
                      uint64_t v136 = v128;
                      char v137 = (int64x2_t *)v127;
                      uint64_t v138 = v119 & 0x3FFFFFFE0;
                      do
                      {
                        int64x2_t v37 = v136[-1];
                        int64x2_t v35 = *v136;
                        v137[-1] = v37;
                        *char v137 = v35;
                        v137 += 2;
                        v136 += 2;
                        v138 -= 32;
                      }
                      while (v138);
                      if (v119 == v123) {
                        goto LABEL_170;
                      }
                      uint64_t v135 = v119 & 0x3FFFFFFE0;
                      if ((v119 & 0x18) == 0)
                      {
                        v131 += v123;
                        v132 += v123;
                        int v134 = v119 & 0xFFFFFFE0;
                        goto LABEL_187;
                      }
                    }
                    else
                    {
                      uint64_t v135 = 0;
                    }
                    v132 += v124;
                    uint64_t v139 = v135 - v124;
                    uint64_t v140 = (uint64_t *)(v130 + v135);
                    unsigned int v141 = (uint64_t *)&v129[v135];
                    do
                    {
                      uint64_t v142 = *v140++;
                      v37.i64[0] = v142;
                      *v141++ = v142;
                      v139 += 8;
                    }
                    while (v139);
                    if (v119 != v124)
                    {
                      v131 += v124;
                      int v134 = v119 & 0xFFFFFFF8;
                      goto LABEL_187;
                    }
                  }
LABEL_170:
                  ++v112;
                  v127 += 64;
                  uint64_t v128 = (int64x2_t *)((char *)v128 + v117);
                  v130 += v117;
                  v129 += 64;
                  if (v112 == v110) {
                    goto LABEL_190;
                  }
                  continue;
                }
              }
              int64x2_t v37 = (int64x2_t)vld1q_dup_s16((const __int16 *)v108);
              int64x2_t v215 = v37;
              int64x2_t v219 = v37;
              int64x2_t v223 = v37;
              int64x2_t v227 = v37;
              uint64_t v110 = v191;
              if (v191) {
                goto LABEL_156;
              }
            }
LABEL_190:
            AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)&v196, 64, v185, v186, v193, v194, *(double *)v37.i64, *(double *)v35.i64, *(double *)v36.i64, *(double *)v34.i64, *(double *)v28.i64, v29, v30, v31);
            if (!v182) {
              goto LABEL_26;
            }
            goto LABEL_191;
          }
          dispatch_sync(*(dispatch_queue_t *)(*(void *)(v32 + 8) + 7384), block);
LABEL_95:
          a7 = v74;
          if (!v182) {
            goto LABEL_26;
          }
LABEL_191:
          memcpy(__src, v78, 0x200uLL);
LABEL_26:
          BOOL v23 = v40++ == v170 >> 4;
          uint64_t v32 = v178;
        }
        while (!v23);
        BOOL v23 = v18++ == v164;
      }
      while (!v23);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, uint64_t a7, unsigned int a8, int a9, int a10, uint64_t a11, int a12)
{
  uint64_t v228 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  uint64_t v17 = a1;
  unsigned int v177 = a8;
  unsigned int v18 = a8 >> 3;
  unsigned int v162 = a8 + a10 - 1;
  unsigned int v164 = v162 >> 3;
  unsigned int v19 = *(unsigned __int8 *)(*(void *)(a1 + 208) + 88);
  unsigned int v20 = *(_DWORD *)(a1 + 112);
  uint64_t v178 = v17;
  if (*(void *)(v17 + 168))
  {
    __int16 CacheMode = IOSurfaceGetCacheMode();
    uint64_t v17 = v178;
    int v22 = CacheMode & 0xF00;
  }
  else
  {
    int v22 = 0;
  }
  BOOL v23 = (v22 & 0xD00) == 0 || v22 == 768;
  int v24 = v22 & 0xE00;
  int v26 = !v23 && v24 != 1024;
  int v182 = v26;
  BOOL isLevelTiled = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::isLevelTiled(v17, *(_DWORD *)(v17 + 144) + a12);
  uint64_t v28 = v178;
  BOOL v171 = isLevelTiled;
  if (v18 <= v164)
  {
    unsigned int v170 = a7 + a9 - 1;
    unsigned int v161 = a7 >> 4;
    if (a7 >> 4 <= v170 >> 4)
    {
      unsigned int v158 = a5 - 1;
      unsigned int v180 = (a5 - 1) >> 4;
      int v179 = ((a5 - 1) & 0xF) + 1;
      int v159 = ((a6 - 1) & 7) + 1;
      unsigned int v160 = (a6 - 1) >> 3;
      uint32x2_t v29 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0xF00000007);
      v30.i64[0] = 0x2000000020;
      *(int32x2_t *)v31.i8 = vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32(vadd_s32((int32x2_t)vshl_u32(v29, (uint32x2_t)0xFFFFFFFCFFFFFFFDLL), (int32x2_t)-1)))))));
      v32.i64[0] = 0x2000000010;
      *(int8x8_t *)v33.i8 = vbic_s8(*(int8x8_t *)v31.i8, (int8x8_t)vcgt_u32((uint32x2_t)0x2000000010, v29));
      __int32 v169 = v33.i32[0] | v33.i32[1];
      uint64_t v168 = v33.i64[0];
      BOOL v167 = v33.i32[0] != 0;
      BOOL v166 = v33.i32[1] != 0;
      unint64_t v157 = 8 * v20 * (unint64_t)v19;
      do
      {
        unsigned int v34 = (8 * v18) | 7;
        if (8 * v18 <= v177) {
          int v35 = v177;
        }
        else {
          int v35 = 8 * v18;
        }
        unsigned int v36 = v161;
        if (v162 < v34) {
          unsigned int v34 = v162;
        }
        unsigned int v176 = 8 * v18;
        int v165 = v35 - 8 * v18;
        int v175 = v34 - v35 + 1;
        int v37 = v159;
        if (v18 != v160) {
          int v37 = 8;
        }
        unsigned int v183 = v37;
        uint64_t v174 = a3 + (v35 - v177) * a11;
        do
        {
          unsigned int v38 = 16 * v36;
          unsigned int v39 = 16 * (v36 + 1) - 1;
          if (16 * v36 <= a7) {
            int v40 = a7;
          }
          else {
            int v40 = 16 * v36;
          }
          if (v170 < v39) {
            unsigned int v39 = v170;
          }
          int v41 = v39 - v40 + 1;
          if (v36 == v180) {
            unsigned int v42 = v179;
          }
          else {
            unsigned int v42 = 16;
          }
          BOOL v43 = 1;
          if (v176 >= v177 && v38 >= a7)
          {
            int v44 = v179;
            if (v36 != v180) {
              int v44 = 16;
            }
            BOOL v43 = v41 != v44 || v175 != v183;
          }
          if (v171)
          {
            unsigned int v65 = 0;
            uint64_t v66 = v157 >> (*(unsigned char *)(v28 + 57) != 0);
            char v67 = 1;
            if (v66 > 127)
            {
              if (v66 > 511)
              {
                if (v66 == 512)
                {
                  char v68 = 0;
                  unsigned int v65 = 16;
                  unsigned int v69 = 16;
                }
                else
                {
                  char v68 = 1;
                  unsigned int v69 = 0;
                  if (v66 == 1024)
                  {
                    unsigned int v69 = 8;
                    unsigned int v65 = 16;
                  }
                }
              }
              else if (v66 == 128)
              {
                char v67 = 0;
                char v68 = 0;
                unsigned int v65 = 32;
                unsigned int v69 = 32;
              }
              else
              {
                char v68 = 1;
                unsigned int v69 = 0;
                if (v66 == 256)
                {
                  char v67 = 0;
                  char v68 = 0;
                  unsigned int v69 = 16;
                  unsigned int v65 = 32;
                }
              }
            }
            else
            {
              char v68 = 1;
              unsigned int v69 = 0;
              switch(v66)
              {
                case 4:
                  char v67 = 0;
                  char v68 = 0;
                  unsigned int v69 = 128;
                  unsigned int v65 = 256;
                  break;
                case 5:
                case 6:
                case 7:
                case 9:
                case 10:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 17:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                  break;
                case 8:
                  char v67 = 0;
                  char v68 = 0;
                  unsigned int v65 = 128;
                  unsigned int v69 = 128;
                  break;
                case 16:
                  char v67 = 0;
                  char v68 = 0;
                  unsigned int v69 = 64;
                  unsigned int v65 = 128;
                  break;
                case 32:
                  char v67 = 0;
                  char v68 = 0;
                  unsigned int v65 = 64;
                  unsigned int v69 = 64;
                  break;
                default:
                  if (v66 == 64)
                  {
                    char v67 = 0;
                    char v68 = 0;
                    unsigned int v69 = 32;
                    unsigned int v65 = 64;
                  }
                  break;
              }
            }
            unsigned int v146 = (v65 >> 4) - 1;
            if (v67) {
              unsigned int v147 = 0;
            }
            else {
              unsigned int v147 = 32 - __clz(~(-1 << -(char)__clz(v146)));
            }
            unsigned int v148 = (v69 >> 3) - 1;
            if (v68)
            {
              unsigned int v149 = 0;
              if (v147) {
                goto LABEL_210;
              }
            }
            else
            {
              unsigned int v149 = 32 - __clz(~(-1 << -(char)__clz(v148)));
              if (v149 | v147)
              {
LABEL_210:
                int v150 = 0;
                uint64_t v151 = 0;
                int v152 = v36 & v146;
                int v153 = v18 & v148;
                BOOL v154 = v149 != 0;
                BOOL v155 = v147 != 0;
                int v156 = 1;
                do
                {
                  --v149;
                  if (v154) {
                    v151 |= (unint64_t)(v156 & v153) << v150++;
                  }
                  else {
                    unsigned int v149 = 0;
                  }
                  --v147;
                  if (v155) {
                    v151 |= (unint64_t)(v156 & v152) << v150++;
                  }
                  else {
                    unsigned int v147 = 0;
                  }
                  v156 *= 2;
                  --v150;
                  BOOL v155 = v147 != 0;
                  BOOL v154 = v149 != 0;
                }
                while (v147 | v149);
                goto LABEL_222;
              }
            }
            uint64_t v151 = 0;
LABEL_222:
            unint64_t v53 = ((unint64_t)(v38 / v65 + v176 / v69 * ((v65 + v158) / v65)) << 14) + (v151 << 9);
            goto LABEL_58;
          }
          if (v169)
          {
            int v46 = 0;
            uint64_t v47 = 0;
            int v48 = 1;
            BOOL v49 = v167;
            BOOL v50 = v166;
            int v51 = v168;
            int v52 = HIDWORD(v168);
            do
            {
              --v51;
              if (v49) {
                v47 |= (unint64_t)(v48 & v18) << v46++;
              }
              else {
                int v51 = 0;
              }
              --v52;
              if (v50) {
                v47 |= (unint64_t)(v48 & v36) << v46++;
              }
              else {
                int v52 = 0;
              }
              v48 *= 2;
              --v46;
              BOOL v50 = v52 != 0;
              BOOL v49 = v51 != 0;
            }
            while (v52 | v51);
          }
          else
          {
            uint64_t v47 = 0;
          }
          unint64_t v53 = v47 << 9;
LABEL_58:
          unsigned int v54 = *(_DWORD *)(v28 + 128) >> (*(unsigned char *)(v28 + 144) + a12);
          if (v54 <= 1) {
            unsigned int v54 = 1;
          }
          unsigned int v55 = v54 + 15;
          if (v55 < 0x20) {
            unsigned int v56 = 0;
          }
          else {
            unsigned int v56 = 32 - __clz(~(-1 << -(char)__clz((v55 >> 4) - 1)));
          }
          unsigned int v57 = *(_DWORD *)(v28 + 132) >> (*(unsigned char *)(v28 + 144) + a12);
          if (v57 <= 1) {
            unsigned int v57 = 1;
          }
          unsigned int v58 = v57 + 7;
          if (v58 < 0x10)
          {
            unsigned int v59 = 0;
            if (!v56)
            {
LABEL_80:
              uint64_t v61 = 0;
              goto LABEL_81;
            }
          }
          else
          {
            unsigned int v59 = 32 - __clz(~(-1 << -(char)__clz((v58 >> 3) - 1)));
            if (!(v59 | v56)) {
              goto LABEL_80;
            }
          }
          int v60 = 0;
          uint64_t v61 = 0;
          BOOL v62 = v56 != 0;
          BOOL v63 = v59 != 0;
          int v64 = 1;
          do
          {
            --v56;
            if (v62) {
              v61 |= (unint64_t)(v64 & v36) << v60++;
            }
            else {
              unsigned int v56 = 0;
            }
            --v59;
            if (v63) {
              v61 |= (unint64_t)(v64 & v18) << v60++;
            }
            else {
              unsigned int v59 = 0;
            }
            v64 *= 2;
            --v60;
            BOOL v63 = v59 != 0;
            BOOL v62 = v56 != 0;
          }
          while (v59 | v56);
LABEL_81:
          uint64_t v70 = a7;
          int v71 = v42 < 0x10 || v43;
          char v72 = (char *)(a4 + 8 * v61);
          unsigned int v73 = (int64x2_t *)(v174 + 4 * (v40 - a7));
          uint64_t v74 = (unsigned char *)(a2 + v53);
          if (v183 < 8) {
            int v75 = 1;
          }
          else {
            int v75 = v71;
          }
          __src = v74;
          if (v182)
          {
            if (!v75)
            {
              uint64_t v74 = __dst;
LABEL_94:
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock(v73, a11, (int64x2_t *)v74, v72, v42, v183);
              goto LABEL_95;
            }
            int v76 = v41;
            memcpy(__dst, __src, sizeof(__dst));
            int v41 = v76;
            uint64_t v74 = __dst;
            uint64_t v28 = v178;
          }
          else if (!v75)
          {
            goto LABEL_94;
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE3ELj2ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = v28;
          int v185 = (int64x2_t *)v74;
          unsigned __int8 v193 = v42;
          unsigned __int8 v194 = v183;
          unsigned int v189 = v165;
          unsigned int v190 = v40 - v38;
          unsigned int v186 = v72;
          unint64_t v187 = v73;
          uint64_t v188 = a11;
          unsigned int v191 = v175;
          unsigned int v192 = v41;
          if (!v43)
          {
            unsigned int v77 = *v72;
            a7 = v70;
            if (v77 == 63)
            {
              int64x2_t v31 = *((int64x2_t *)v74 + 1);
              int v79 = (const double *)(v74 + 32);
              *(float64x2x2_t *)v32.i8 = vld2q_f64(v79);
              int64x2_t v33 = vzip2q_s64(*(int64x2_t *)v74, v31);
              int64x2_t v196 = vzip1q_s64(*(int64x2_t *)v74, v31);
              int64x2_t v200 = v33;
              int64x2_t v204 = v32;
              int64x2_t v208 = v30;
              uint64_t v78 = 64;
            }
            else if (v77 == 1)
            {
              int64x2_t v33 = (int64x2_t)vld1q_dup_s16((const __int16 *)v74);
              int64x2_t v196 = v33;
              int64x2_t v200 = v33;
              int64x2_t v204 = v33;
              int64x2_t v208 = v33;
              uint64_t v78 = 2;
            }
            else if (*v72)
            {
              uint64_t v78 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v196, 64, (uint64_t)v74, v77, *(double *)v33.i64, *(double *)v31.i64, *(double *)v32.i64, *(int8x8_t *)v30.i8);
            }
            else
            {
              uint64_t v78 = 0;
              int64x2_t v196 = 0uLL;
              int64x2_t v200 = 0uLL;
              int64x2_t v204 = 0uLL;
              int64x2_t v208 = 0uLL;
            }
            uint64_t v80 = (uint64_t)&v74[v78];
            unsigned int v81 = v72[1];
            if (v81 == 63)
            {
              int64x2_t v31 = *(int64x2_t *)(v80 + 16);
              int v83 = (const double *)(v80 + 32);
              *(float64x2x2_t *)v32.i8 = vld2q_f64(v83);
              int64x2_t v33 = vzip2q_s64(*(int64x2_t *)v80, v31);
              int64x2_t v197 = vzip1q_s64(*(int64x2_t *)v80, v31);
              int64x2_t v201 = v33;
              int64x2_t v205 = v32;
              int64x2_t v209 = v30;
              uint64_t v82 = 64;
            }
            else if (v81 == 1)
            {
              int64x2_t v33 = (int64x2_t)vld1q_dup_s16((const __int16 *)v80);
              int64x2_t v197 = v33;
              int64x2_t v201 = v33;
              int64x2_t v205 = v33;
              int64x2_t v209 = v33;
              uint64_t v82 = 2;
            }
            else if (v72[1])
            {
              uint64_t v82 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v197, 64, v80, v81, *(double *)v33.i64, *(double *)v31.i64, *(double *)v32.i64, *(int8x8_t *)v30.i8);
            }
            else
            {
              uint64_t v82 = 0;
              int64x2_t v197 = 0uLL;
              int64x2_t v201 = 0uLL;
              int64x2_t v205 = 0uLL;
              int64x2_t v209 = 0uLL;
            }
            uint64_t v84 = v80 + v82;
            unsigned int v85 = v72[2];
            if (v85 == 63)
            {
              int64x2_t v31 = *(int64x2_t *)(v84 + 16);
              uint64_t v87 = (const double *)(v84 + 32);
              *(float64x2x2_t *)v32.i8 = vld2q_f64(v87);
              int64x2_t v33 = vzip2q_s64(*(int64x2_t *)v84, v31);
              int64x2_t v212 = vzip1q_s64(*(int64x2_t *)v84, v31);
              int64x2_t v216 = v33;
              int64x2_t v220 = v32;
              int64x2_t v224 = v30;
              uint64_t v86 = 64;
            }
            else if (v85 == 1)
            {
              int64x2_t v33 = (int64x2_t)vld1q_dup_s16((const __int16 *)v84);
              int64x2_t v212 = v33;
              int64x2_t v216 = v33;
              int64x2_t v220 = v33;
              int64x2_t v224 = v33;
              uint64_t v86 = 2;
            }
            else if (v72[2])
            {
              uint64_t v86 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v212, 64, v84, v85, *(double *)v33.i64, *(double *)v31.i64, *(double *)v32.i64, *(int8x8_t *)v30.i8);
            }
            else
            {
              uint64_t v86 = 0;
              int64x2_t v212 = 0uLL;
              int64x2_t v216 = 0uLL;
              int64x2_t v220 = 0uLL;
              int64x2_t v224 = 0uLL;
            }
            uint64_t v88 = v84 + v86;
            unsigned int v89 = v72[3];
            if (v89 == 63)
            {
              int64x2_t v31 = *(int64x2_t *)(v88 + 16);
              uint64_t v91 = (const double *)(v88 + 32);
              *(float64x2x2_t *)v32.i8 = vld2q_f64(v91);
              int64x2_t v33 = vzip2q_s64(*(int64x2_t *)v88, v31);
              int64x2_t v213 = vzip1q_s64(*(int64x2_t *)v88, v31);
              int64x2_t v217 = v33;
              int64x2_t v221 = v32;
              int64x2_t v225 = v30;
              uint64_t v90 = 64;
            }
            else if (v89 == 1)
            {
              int64x2_t v33 = (int64x2_t)vld1q_dup_s16((const __int16 *)v88);
              int64x2_t v213 = v33;
              int64x2_t v217 = v33;
              int64x2_t v221 = v33;
              int64x2_t v225 = v33;
              uint64_t v90 = 2;
            }
            else if (v72[3])
            {
              uint64_t v90 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v213, 64, v88, v89, *(double *)v33.i64, *(double *)v31.i64, *(double *)v32.i64, *(int8x8_t *)v30.i8);
            }
            else
            {
              uint64_t v90 = 0;
              int64x2_t v213 = 0uLL;
              int64x2_t v217 = 0uLL;
              int64x2_t v221 = 0uLL;
              int64x2_t v225 = 0uLL;
            }
            uint64_t v92 = v88 + v90;
            unsigned int v93 = v72[4];
            if (v93 == 63)
            {
              int64x2_t v31 = *(int64x2_t *)(v92 + 16);
              float32x4_t v95 = (const double *)(v92 + 32);
              *(float64x2x2_t *)v32.i8 = vld2q_f64(v95);
              int64x2_t v33 = vzip2q_s64(*(int64x2_t *)v92, v31);
              int64x2_t v198 = vzip1q_s64(*(int64x2_t *)v92, v31);
              int64x2_t v202 = v33;
              int64x2_t v206 = v32;
              int64x2_t v210 = v30;
              uint64_t v94 = 64;
            }
            else if (v93 == 1)
            {
              int64x2_t v33 = (int64x2_t)vld1q_dup_s16((const __int16 *)v92);
              int64x2_t v198 = v33;
              int64x2_t v202 = v33;
              int64x2_t v206 = v33;
              int64x2_t v210 = v33;
              uint64_t v94 = 2;
            }
            else if (v72[4])
            {
              uint64_t v94 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v198, 64, v92, v93, *(double *)v33.i64, *(double *)v31.i64, *(double *)v32.i64, *(int8x8_t *)v30.i8);
            }
            else
            {
              uint64_t v94 = 0;
              int64x2_t v198 = 0uLL;
              int64x2_t v202 = 0uLL;
              int64x2_t v206 = 0uLL;
              int64x2_t v210 = 0uLL;
            }
            uint64_t v96 = v92 + v94;
            unsigned int v97 = v72[5];
            if (v97 == 63)
            {
              int64x2_t v31 = *(int64x2_t *)(v96 + 16);
              float32x4_t v99 = (const double *)(v96 + 32);
              *(float64x2x2_t *)v32.i8 = vld2q_f64(v99);
              int64x2_t v33 = vzip2q_s64(*(int64x2_t *)v96, v31);
              int64x2_t v199 = vzip1q_s64(*(int64x2_t *)v96, v31);
              int64x2_t v203 = v33;
              int64x2_t v207 = v32;
              int64x2_t v211 = v30;
              uint64_t v98 = 64;
            }
            else if (v97 == 1)
            {
              int64x2_t v33 = (int64x2_t)vld1q_dup_s16((const __int16 *)v96);
              int64x2_t v199 = v33;
              int64x2_t v203 = v33;
              int64x2_t v207 = v33;
              int64x2_t v211 = v33;
              uint64_t v98 = 2;
            }
            else if (v72[5])
            {
              uint64_t v98 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v199, 64, v96, v97, *(double *)v33.i64, *(double *)v31.i64, *(double *)v32.i64, *(int8x8_t *)v30.i8);
            }
            else
            {
              uint64_t v98 = 0;
              int64x2_t v199 = 0uLL;
              int64x2_t v203 = 0uLL;
              int64x2_t v207 = 0uLL;
              int64x2_t v211 = 0uLL;
            }
            uint64_t v100 = v96 + v98;
            unsigned int v101 = v72[6];
            if (v101 == 63)
            {
              int64x2_t v31 = *(int64x2_t *)(v100 + 16);
              float32x4_t v103 = (const double *)(v100 + 32);
              *(float64x2x2_t *)v32.i8 = vld2q_f64(v103);
              int64x2_t v33 = vzip2q_s64(*(int64x2_t *)v100, v31);
              int64x2_t v214 = vzip1q_s64(*(int64x2_t *)v100, v31);
              int64x2_t v218 = v33;
              int64x2_t v222 = v32;
              int64x2_t v226 = v30;
              uint64_t v102 = 64;
            }
            else if (v101 == 1)
            {
              int64x2_t v33 = (int64x2_t)vld1q_dup_s16((const __int16 *)v100);
              int64x2_t v214 = v33;
              int64x2_t v218 = v33;
              int64x2_t v222 = v33;
              int64x2_t v226 = v33;
              uint64_t v102 = 2;
            }
            else if (v72[6])
            {
              uint64_t v102 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v214, 64, v100, v101, *(double *)v33.i64, *(double *)v31.i64, *(double *)v32.i64, *(int8x8_t *)v30.i8);
            }
            else
            {
              uint64_t v102 = 0;
              int64x2_t v214 = 0uLL;
              int64x2_t v218 = 0uLL;
              int64x2_t v222 = 0uLL;
              int64x2_t v226 = 0uLL;
            }
            uint64_t v104 = v100 + v102;
            unsigned int v105 = v72[7];
            if (v105 == 63)
            {
              int64x2_t v108 = *(int64x2_t *)(v104 + 16);
              unsigned int v109 = (const double *)(v104 + 32);
              float64x2x2_t v229 = vld2q_f64(v109);
              int64x2_t v110 = vzip2q_s64(*(int64x2_t *)v104, v108);
              int64x2_t v215 = vzip1q_s64(*(int64x2_t *)v104, v108);
              int64x2_t v219 = v110;
              float64x2_t v223 = v229.val[0];
              float64x2_t v227 = v229.val[1];
              uint64_t v106 = v191;
              if (v191) {
                goto LABEL_156;
              }
            }
            else
            {
              if (v105 != 1)
              {
                if (v72[7])
                {
                  AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v215, 64, v104, v105, *(double *)v33.i64, *(double *)v31.i64, *(double *)v32.i64, *(int8x8_t *)v30.i8);
                  uint64_t v106 = v191;
                  if (!v191) {
                    goto LABEL_190;
                  }
                }
                else
                {
                  int64x2_t v215 = 0uLL;
                  int64x2_t v219 = 0uLL;
                  float64x2_t v223 = 0uLL;
                  float64x2_t v227 = 0uLL;
                  uint64_t v106 = v191;
                  if (!v191) {
                    goto LABEL_190;
                  }
                }
LABEL_156:
                if (!v192) {
                  goto LABEL_190;
                }
                uint64_t v111 = 0;
                unint64_t v112 = (unint64_t)v189 << 6;
                uint64_t v113 = 4 * v190;
                uint64_t v114 = &v196.i8[v112 + v113];
                float32x4_t v115 = v187;
                uint64_t v116 = v188;
                unint64_t v117 = 4 * v192;
                if (v117 <= 1) {
                  unint64_t v118 = 1;
                }
                else {
                  unint64_t v118 = 4 * v192;
                }
                unint64_t v119 = v112 + v113;
                unint64_t v120 = &v196.i8[v112 + v113];
                if (v118) {
                  BOOL v121 = (v118 - 1) >> 32 == 0;
                }
                else {
                  BOOL v121 = 0;
                }
                uint64_t v122 = v118 & 0x3FFFFFFE0;
                uint64_t v123 = v118 & 0x3FFFFFFF8;
                char v125 = !v121 || v118 < 8;
                char v126 = &v197.i8[v119];
                float32x4_t v127 = v187 + 1;
                uint64_t v128 = v114;
                unint64_t v129 = v187;
                while (2)
                {
                  unint64_t v130 = &v115->i8[v116 * v111];
                  unint64_t v131 = &v114[64 * v111];
                  if ((unint64_t)(&v120[64 * v111] - v130) < 0x20) {
                    char v132 = 1;
                  }
                  else {
                    char v132 = v125;
                  }
                  if (v132)
                  {
                    int v133 = 0;
LABEL_187:
                    unsigned int v143 = v133 + 1;
                    do
                    {
                      char v144 = *v130++;
                      *v131++ = v144;
                    }
                    while (v117 > v143++);
                  }
                  else
                  {
                    if (v118 >= 0x20)
                    {
                      uint64_t v135 = v127;
                      uint64_t v136 = v126;
                      uint64_t v137 = v118 & 0x3FFFFFFE0;
                      do
                      {
                        int64x2_t v138 = *v135;
                        *((int64x2_t *)v136 - 1) = v135[-1];
                        *(int64x2_t *)uint64_t v136 = v138;
                        v136 += 32;
                        v135 += 2;
                        v137 -= 32;
                      }
                      while (v137);
                      if (v118 == v122) {
                        goto LABEL_170;
                      }
                      uint64_t v134 = v118 & 0x3FFFFFFE0;
                      if ((v118 & 0x18) == 0)
                      {
                        v130 += v122;
                        v131 += v122;
                        int v133 = v118 & 0xFFFFFFE0;
                        goto LABEL_187;
                      }
                    }
                    else
                    {
                      uint64_t v134 = 0;
                    }
                    v131 += v123;
                    uint64_t v139 = v134 - v123;
                    uint64_t v140 = (uint64_t *)((char *)v129->i64 + v134);
                    unsigned int v141 = &v128[v134];
                    do
                    {
                      uint64_t v142 = *v140++;
                      *(void *)unsigned int v141 = v142;
                      v141 += 8;
                      v139 += 8;
                    }
                    while (v139);
                    if (v118 != v123)
                    {
                      v130 += v123;
                      int v133 = v118 & 0xFFFFFFF8;
                      goto LABEL_187;
                    }
                  }
LABEL_170:
                  ++v111;
                  v126 += 64;
                  float32x4_t v127 = (int64x2_t *)((char *)v127 + v116);
                  unint64_t v129 = (int64x2_t *)((char *)v129 + v116);
                  v128 += 64;
                  if (v111 == v106) {
                    goto LABEL_190;
                  }
                  continue;
                }
              }
              int16x8_t v107 = vld1q_dup_s16((const __int16 *)v104);
              int64x2_t v215 = (int64x2_t)v107;
              int64x2_t v219 = (int64x2_t)v107;
              float64x2_t v223 = (float64x2_t)v107;
              float64x2_t v227 = (float64x2_t)v107;
              uint64_t v106 = v191;
              if (v191) {
                goto LABEL_156;
              }
            }
LABEL_190:
            AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock(&v196, 64, v185, v186, v193, v194);
            if (!v182) {
              goto LABEL_26;
            }
            goto LABEL_191;
          }
          dispatch_sync(*(dispatch_queue_t *)(*(void *)(v28 + 8) + 7384), block);
LABEL_95:
          a7 = v70;
          if (!v182) {
            goto LABEL_26;
          }
LABEL_191:
          memcpy(__src, v74, 0x200uLL);
LABEL_26:
          BOOL v23 = v36++ == v170 >> 4;
          uint64_t v28 = v178;
        }
        while (!v23);
        BOOL v23 = v18++ == v164;
      }
      while (!v23);
    }
  }
}

uint64_t AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, char a12)
{
  uint64_t v312 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v229 = a8;
  unsigned int v214 = a8 + a10 - 1;
  uint64_t v230 = a1;
  if (*(void *)(a1 + 168)) {
    int v17 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v17 = 0;
  }
  unsigned int v18 = a5 - 1;
  unsigned int v19 = a6 - 1;
  unsigned int v20 = a8 >> 3;
  unsigned int v213 = v214 >> 3;
  BOOL v21 = (v17 & 0xD00) == 0 || v17 == 768;
  int v22 = v17 & 0xE00;
  int v24 = !v21 && v22 != 1024;
  int v234 = v24;
  uint64_t result = a1;
  if (*(unsigned char *)(a1 + 232))
  {
    unsigned int v26 = *(unsigned __int8 *)(a1 + 255);
    unsigned int v27 = *(unsigned __int8 *)(a1 + 254);
    char v28 = __clz(v18);
    if (1 << v26 >= a6 || a5 >> v27)
    {
      if (!(a6 >> v26) && 1 << v27 < a5)
      {
        if (a6 < 2) {
          unsigned int v31 = 0;
        }
        else {
          unsigned int v31 = __clz(~(-1 << -(char)__clz(v19))) - 32;
        }
        v27 += v26 + v31;
        unsigned int v26 = -v31;
      }
    }
    else
    {
      unsigned int v29 = 32 - __clz(~(-1 << -v28));
      unsigned int v30 = v27 + v26;
      if (a5 < 2) {
        unsigned int v29 = 0;
      }
      unsigned int v26 = v30 - v29;
      unsigned int v27 = v29;
    }
    if (a5 < 2)
    {
      if (v27) {
        goto LABEL_27;
      }
    }
    else if (32 - __clz(~(-1 << -v28)) < v27)
    {
LABEL_27:
      BOOL v224 = 0;
LABEL_32:
      unsigned int v221 = v27 - 4;
      unsigned int v218 = v26 - 3;
      int v33 = -1 << *(unsigned char *)(*(void *)(a1 + 208) + 48);
      unsigned int v211 = (((~v33 + a5) & v33) + ~(-1 << v27)) >> v27;
      goto LABEL_33;
    }
    if (a6 < 2) {
      unsigned int v32 = 0;
    }
    else {
      unsigned int v32 = 32 - __clz(~(-1 << -(char)__clz(v19)));
    }
    BOOL v224 = v32 >= v26;
    goto LABEL_32;
  }
  BOOL v224 = 0;
  unsigned int v211 = 0;
  unsigned int v218 = 0;
  unsigned int v221 = 0;
LABEL_33:
  if (v20 <= v213)
  {
    unsigned int v223 = a7 + a9 - 1;
    unsigned int v210 = a7 >> 4;
    if (a7 >> 4 <= v223 >> 4)
    {
      unsigned int v232 = v18 >> 4;
      unsigned int v209 = v19 >> 3;
      int v231 = (v18 & 0xF) + 1;
      int v208 = (v19 & 7) + 1;
      int v207 = ~(-1 << v218);
      uint32x2_t v34 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0xF00000007);
      int8x8_t v35 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32(vadd_s32((int32x2_t)vshl_u32(v34, (uint32x2_t)0xFFFFFFFCFFFFFFFDLL), (int32x2_t)-1))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x2000000010, v34));
      __int32 v219 = v35.i32[0] | v35.i32[1];
      int8x8_t v217 = v35;
      BOOL v216 = v35.i32[0] != 0;
      BOOL v215 = v35.i32[1] != 0;
      unsigned int v222 = a7;
      do
      {
        unsigned int v36 = (8 * v20) | 7;
        if (8 * v20 <= v229) {
          int v37 = v229;
        }
        else {
          int v37 = 8 * v20;
        }
        if (v214 < v36) {
          unsigned int v36 = v214;
        }
        int v220 = v37 - 8 * v20;
        int v228 = v36 - v37 + 1;
        unsigned int v38 = v210;
        int v39 = v208;
        if (v20 != v209) {
          int v39 = 8;
        }
        unsigned int v235 = v39;
        int v40 = v20 & v207;
        uint64_t v227 = a3 + (v37 - v229) * a11;
        do
        {
          unsigned int v41 = 16 * v38;
          unsigned int v42 = 16 * (v38 + 1) - 1;
          if (16 * v38 <= a7) {
            int v43 = a7;
          }
          else {
            int v43 = 16 * v38;
          }
          if (v223 < v42) {
            unsigned int v42 = v223;
          }
          int v44 = v42 - v43 + 1;
          if (v38 == v232) {
            unsigned int v45 = v231;
          }
          else {
            unsigned int v45 = 16;
          }
          BOOL v46 = 1;
          if (8 * v20 >= v229 && v41 >= a7)
          {
            int v47 = v231;
            if (v38 != v232) {
              int v47 = 16;
            }
            BOOL v46 = v44 != v47 || v228 != v235;
          }
          if (v224)
          {
            if (v221 | v218)
            {
              int v49 = 0;
              uint64_t v50 = 0;
              int v51 = 1;
              BOOL v52 = v218 != 0;
              BOOL v53 = v221 != 0;
              unsigned int v54 = v218;
              unsigned int v55 = v221;
              do
              {
                --v54;
                if (v52) {
                  v50 |= (unint64_t)(v40 & v51) << v49++;
                }
                else {
                  unsigned int v54 = 0;
                }
                --v55;
                if (v53) {
                  v50 |= (unint64_t)(v38 & ~(-1 << v221) & v51) << v49++;
                }
                else {
                  unsigned int v55 = 0;
                }
                v51 *= 2;
                --v49;
                BOOL v53 = v55 != 0;
                BOOL v52 = v54 != 0;
              }
              while (v55 | v54);
            }
            else
            {
              uint64_t v50 = 0;
            }
            uint64_t v63 = *(void *)(result + 320) * ((v38 >> v221) + (v20 >> v218) * v211) + (v50 << 10);
          }
          else
          {
            if (v219)
            {
              int v56 = 0;
              uint64_t v57 = 0;
              int v58 = 1;
              BOOL v59 = v216;
              BOOL v60 = v215;
              __int32 v61 = v217.i32[0];
              __int32 v62 = v217.i32[1];
              do
              {
                --v61;
                if (v59) {
                  v57 |= (unint64_t)(v58 & v20) << v56++;
                }
                else {
                  __int32 v61 = 0;
                }
                --v62;
                if (v60) {
                  v57 |= (unint64_t)(v58 & v38) << v56++;
                }
                else {
                  __int32 v62 = 0;
                }
                v58 *= 2;
                --v56;
                BOOL v60 = v62 != 0;
                BOOL v59 = v61 != 0;
              }
              while (v62 | v61);
            }
            else
            {
              uint64_t v57 = 0;
            }
            uint64_t v63 = v57 << 10;
          }
          unsigned int v64 = *(_DWORD *)(result + 128) >> (*(unsigned char *)(result + 144) + a12);
          if (v64 <= 1) {
            unsigned int v64 = 1;
          }
          unsigned int v65 = v64 + 15;
          if (v65 < 0x20) {
            unsigned int v66 = 0;
          }
          else {
            unsigned int v66 = 32 - __clz(~(-1 << -(char)__clz((v65 >> 4) - 1)));
          }
          unsigned int v67 = *(_DWORD *)(result + 132) >> (*(unsigned char *)(result + 144) + a12);
          if (v67 <= 1) {
            unsigned int v67 = 1;
          }
          unsigned int v68 = v67 + 7;
          if (v68 < 0x10)
          {
            unsigned int v69 = 0;
            if (!v66)
            {
LABEL_109:
              uint64_t v71 = 0;
              goto LABEL_110;
            }
          }
          else
          {
            unsigned int v69 = 32 - __clz(~(-1 << -(char)__clz((v68 >> 3) - 1)));
            if (!(v69 | v66)) {
              goto LABEL_109;
            }
          }
          int v70 = 0;
          uint64_t v71 = 0;
          BOOL v72 = v66 != 0;
          BOOL v73 = v69 != 0;
          int v74 = 1;
          do
          {
            --v66;
            if (v72) {
              v71 |= (unint64_t)(v74 & v38) << v70++;
            }
            else {
              unsigned int v66 = 0;
            }
            --v69;
            if (v73) {
              v71 |= (unint64_t)(v74 & v20) << v70++;
            }
            else {
              unsigned int v69 = 0;
            }
            v74 *= 2;
            --v70;
            BOOL v73 = v69 != 0;
            BOOL v72 = v66 != 0;
          }
          while (v69 | v66);
LABEL_110:
          unsigned int v75 = v43 - a7;
          int v76 = v45 < 0x10 || v46;
          unsigned int v77 = (char *)(a4 + 8 * v71);
          uint64_t v78 = v227 + 8 * v75;
          int v79 = (int8x16_t *)(a2 + v63);
          if (v235 < 8) {
            int v80 = 1;
          }
          else {
            int v80 = v76;
          }
          int v233 = v79;
          if (v234)
          {
            unsigned int v81 = (int8x16_t *)__dst;
            if (!v80) {
              goto LABEL_122;
            }
            uint64_t v82 = (char *)(a4 + 8 * v71);
            int v83 = v44;
            char v84 = v45;
            memcpy(__dst, v79, sizeof(__dst));
            unsigned int v41 = 16 * v38;
            LOBYTE(v45) = v84;
            int v44 = v83;
            unsigned int v77 = v82;
            int v40 = v20 & v207;
            uint64_t result = v230;
          }
          else
          {
            unsigned int v81 = v79;
            if (!v80)
            {
LABEL_122:
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock(v78, a11, v81, v77, v45, v235);
              goto LABEL_123;
            }
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE16ELj2ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = result;
          BOOL v237 = v81;
          unsigned __int8 v245 = v45;
          unsigned __int8 v246 = v235;
          unsigned int v241 = v220;
          unsigned int v242 = v43 - v41;
          unint64_t v238 = v77;
          uint64_t v239 = v78;
          uint64_t v240 = a11;
          unsigned int v243 = v228;
          unsigned int v244 = v44;
          if (v46)
          {
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(result + 8) + 7384), block);
LABEL_123:
            a7 = v222;
            unsigned int v85 = v38 + 1;
            goto LABEL_215;
          }
          unsigned int v86 = *v77;
          if (v86 == 127)
          {
            float32x4_t v89 = (float32x4_t)v81[1];
            float32x4_t v90 = (float32x4_t)v81[2];
            float32x4_t v91 = (float32x4_t)v81[3];
            float32x4_t v92 = (float32x4_t)v81[4];
            float32x4_t v93 = (float32x4_t)v81[5];
            float32x4_t v94 = (float32x4_t)v81[6];
            float32x4_t v95 = (float32x4_t)v81[7];
            int8x16_t v248 = *v81;
            float32x4_t v249 = v90;
            float32x4_t v256 = v89;
            float32x4_t v257 = v91;
            float32x4_t v264 = v92;
            float32x4_t v265 = v94;
            float32x4_t v272 = v93;
            float32x4_t v273 = v95;
            uint64_t v87 = 128;
          }
          else if (v86 == 3)
          {
            float32x4_t v88 = vld1q_dup_f32((const float *)v81->i32);
            int8x16_t v248 = (int8x16_t)v88;
            float32x4_t v249 = v88;
            float32x4_t v256 = v88;
            float32x4_t v257 = v88;
            float32x4_t v264 = v88;
            float32x4_t v265 = v88;
            float32x4_t v272 = v88;
            float32x4_t v273 = v88;
            uint64_t v87 = 4;
          }
          else if (*v77)
          {
            uint64_t v87 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((int32x4_t *)&v248, 128, (uint64_t)v81, v86);
          }
          else
          {
            uint64_t v87 = 0;
            float32x4_t v249 = 0u;
            int8x16_t v248 = 0u;
            float32x4_t v256 = 0u;
            float32x4_t v257 = 0u;
            float32x4_t v264 = 0u;
            float32x4_t v265 = 0u;
            float32x4_t v272 = 0u;
            float32x4_t v273 = 0u;
          }
          uint64_t v96 = (uint64_t)v81->i64 + v87;
          unsigned int v97 = v77[1];
          if (v97 == 127)
          {
            float32x4_t v100 = *(float32x4_t *)(v96 + 16);
            float32x4_t v101 = *(float32x4_t *)(v96 + 32);
            float32x4_t v102 = *(float32x4_t *)(v96 + 48);
            float32x4_t v103 = *(float32x4_t *)(v96 + 64);
            float32x4_t v104 = *(float32x4_t *)(v96 + 80);
            float32x4_t v105 = *(float32x4_t *)(v96 + 96);
            float32x4_t v106 = *(float32x4_t *)(v96 + 112);
            int32x4_t v250 = *(int32x4_t *)v96;
            float32x4_t v251 = v101;
            float32x4_t v258 = v100;
            float32x4_t v259 = v102;
            float32x4_t v266 = v103;
            float32x4_t v267 = v105;
            float32x4_t v274 = v104;
            float32x4_t v275 = v106;
            uint64_t v98 = 128;
            unsigned int v85 = v38 + 1;
          }
          else
          {
            unsigned int v85 = v38 + 1;
            if (v97 == 3)
            {
              float32x4_t v99 = vld1q_dup_f32((const float *)v96);
              int32x4_t v250 = (int32x4_t)v99;
              float32x4_t v251 = v99;
              float32x4_t v258 = v99;
              float32x4_t v259 = v99;
              float32x4_t v266 = v99;
              float32x4_t v267 = v99;
              float32x4_t v274 = v99;
              float32x4_t v275 = v99;
              uint64_t v98 = 4;
            }
            else if (v77[1])
            {
              uint64_t v98 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v250, 128, v96, v97);
            }
            else
            {
              uint64_t v98 = 0;
              int32x4_t v250 = 0u;
              float32x4_t v251 = 0u;
              float32x4_t v258 = 0u;
              float32x4_t v259 = 0u;
              float32x4_t v266 = 0u;
              float32x4_t v267 = 0u;
              float32x4_t v274 = 0u;
              float32x4_t v275 = 0u;
            }
          }
          uint64_t v107 = v96 + v98;
          unsigned int v108 = v77[2];
          if (v108 == 127)
          {
            float32x4_t v111 = *(float32x4_t *)(v107 + 16);
            float32x4_t v112 = *(float32x4_t *)(v107 + 32);
            float32x4_t v113 = *(float32x4_t *)(v107 + 48);
            float32x4_t v114 = *(float32x4_t *)(v107 + 64);
            float32x4_t v115 = *(float32x4_t *)(v107 + 80);
            float32x4_t v116 = *(float32x4_t *)(v107 + 96);
            float32x4_t v117 = *(float32x4_t *)(v107 + 112);
            int32x4_t v280 = *(int32x4_t *)v107;
            float32x4_t v281 = v112;
            float32x4_t v288 = v111;
            float32x4_t v289 = v113;
            float32x4_t v296 = v114;
            float32x4_t v297 = v116;
            float32x4_t v304 = v115;
            float32x4_t v305 = v117;
            uint64_t v109 = 128;
          }
          else if (v108 == 3)
          {
            float32x4_t v110 = vld1q_dup_f32((const float *)v107);
            int32x4_t v280 = (int32x4_t)v110;
            float32x4_t v281 = v110;
            float32x4_t v288 = v110;
            float32x4_t v289 = v110;
            float32x4_t v296 = v110;
            float32x4_t v297 = v110;
            float32x4_t v304 = v110;
            float32x4_t v305 = v110;
            uint64_t v109 = 4;
          }
          else if (v77[2])
          {
            uint64_t v109 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v280, 128, v107, v108);
          }
          else
          {
            uint64_t v109 = 0;
            int32x4_t v280 = 0u;
            float32x4_t v281 = 0u;
            float32x4_t v288 = 0u;
            float32x4_t v289 = 0u;
            float32x4_t v296 = 0u;
            float32x4_t v297 = 0u;
            float32x4_t v304 = 0u;
            float32x4_t v305 = 0u;
          }
          uint64_t v118 = v107 + v109;
          unsigned int v119 = v77[3];
          if (v119 == 127)
          {
            float32x4_t v122 = *(float32x4_t *)(v118 + 16);
            float32x4_t v123 = *(float32x4_t *)(v118 + 32);
            float32x4_t v124 = *(float32x4_t *)(v118 + 48);
            float32x4_t v125 = *(float32x4_t *)(v118 + 64);
            float32x4_t v126 = *(float32x4_t *)(v118 + 80);
            float32x4_t v127 = *(float32x4_t *)(v118 + 96);
            float32x4_t v128 = *(float32x4_t *)(v118 + 112);
            int32x4_t v282 = *(int32x4_t *)v118;
            float32x4_t v283 = v123;
            float32x4_t v290 = v122;
            float32x4_t v291 = v124;
            float32x4_t v298 = v125;
            float32x4_t v299 = v127;
            float32x4_t v306 = v126;
            float32x4_t v307 = v128;
            uint64_t v120 = 128;
          }
          else if (v119 == 3)
          {
            float32x4_t v121 = vld1q_dup_f32((const float *)v118);
            int32x4_t v282 = (int32x4_t)v121;
            float32x4_t v283 = v121;
            float32x4_t v290 = v121;
            float32x4_t v291 = v121;
            float32x4_t v298 = v121;
            float32x4_t v299 = v121;
            float32x4_t v306 = v121;
            float32x4_t v307 = v121;
            uint64_t v120 = 4;
          }
          else if (v77[3])
          {
            uint64_t v120 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v282, 128, v118, v119);
          }
          else
          {
            uint64_t v120 = 0;
            int32x4_t v282 = 0u;
            float32x4_t v283 = 0u;
            float32x4_t v290 = 0u;
            float32x4_t v291 = 0u;
            float32x4_t v298 = 0u;
            float32x4_t v299 = 0u;
            float32x4_t v306 = 0u;
            float32x4_t v307 = 0u;
          }
          uint64_t v129 = v118 + v120;
          unsigned int v130 = v77[4];
          if (v130 == 127)
          {
            float32x4_t v133 = *(float32x4_t *)(v129 + 16);
            float32x4_t v134 = *(float32x4_t *)(v129 + 32);
            float32x4_t v135 = *(float32x4_t *)(v129 + 48);
            float32x4_t v136 = *(float32x4_t *)(v129 + 64);
            float32x4_t v137 = *(float32x4_t *)(v129 + 80);
            float32x4_t v138 = *(float32x4_t *)(v129 + 96);
            float32x4_t v139 = *(float32x4_t *)(v129 + 112);
            int32x4_t v252 = *(int32x4_t *)v129;
            float32x4_t v253 = v134;
            float32x4_t v260 = v133;
            float32x4_t v261 = v135;
            float32x4_t v268 = v136;
            float32x4_t v269 = v138;
            float32x4_t v276 = v137;
            float32x4_t v277 = v139;
            uint64_t v131 = 128;
          }
          else if (v130 == 3)
          {
            float32x4_t v132 = vld1q_dup_f32((const float *)v129);
            int32x4_t v252 = (int32x4_t)v132;
            float32x4_t v253 = v132;
            float32x4_t v260 = v132;
            float32x4_t v261 = v132;
            float32x4_t v268 = v132;
            float32x4_t v269 = v132;
            float32x4_t v276 = v132;
            float32x4_t v277 = v132;
            uint64_t v131 = 4;
          }
          else if (v77[4])
          {
            uint64_t v131 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v252, 128, v129, v130);
          }
          else
          {
            uint64_t v131 = 0;
            int32x4_t v252 = 0u;
            float32x4_t v253 = 0u;
            float32x4_t v260 = 0u;
            float32x4_t v261 = 0u;
            float32x4_t v268 = 0u;
            float32x4_t v269 = 0u;
            float32x4_t v276 = 0u;
            float32x4_t v277 = 0u;
          }
          uint64_t v140 = v129 + v131;
          unsigned int v141 = v77[5];
          if (v141 == 127)
          {
            float32x4_t v144 = *(float32x4_t *)(v140 + 16);
            float32x4_t v145 = *(float32x4_t *)(v140 + 32);
            float32x4_t v146 = *(float32x4_t *)(v140 + 48);
            float32x4_t v147 = *(float32x4_t *)(v140 + 64);
            float32x4_t v148 = *(float32x4_t *)(v140 + 80);
            float32x4_t v149 = *(float32x4_t *)(v140 + 96);
            float32x4_t v150 = *(float32x4_t *)(v140 + 112);
            int32x4_t v254 = *(int32x4_t *)v140;
            float32x4_t v255 = v145;
            float32x4_t v262 = v144;
            float32x4_t v263 = v146;
            float32x4_t v270 = v147;
            float32x4_t v271 = v149;
            float32x4_t v278 = v148;
            float32x4_t v279 = v150;
            uint64_t v142 = 128;
          }
          else if (v141 == 3)
          {
            float32x4_t v143 = vld1q_dup_f32((const float *)v140);
            int32x4_t v254 = (int32x4_t)v143;
            float32x4_t v255 = v143;
            float32x4_t v262 = v143;
            float32x4_t v263 = v143;
            float32x4_t v270 = v143;
            float32x4_t v271 = v143;
            float32x4_t v278 = v143;
            float32x4_t v279 = v143;
            uint64_t v142 = 4;
          }
          else if (v77[5])
          {
            uint64_t v142 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v254, 128, v140, v141);
          }
          else
          {
            uint64_t v142 = 0;
            int32x4_t v254 = 0u;
            float32x4_t v255 = 0u;
            float32x4_t v262 = 0u;
            float32x4_t v263 = 0u;
            float32x4_t v270 = 0u;
            float32x4_t v271 = 0u;
            float32x4_t v278 = 0u;
            float32x4_t v279 = 0u;
          }
          uint64_t v151 = v140 + v142;
          unsigned int v152 = v77[6];
          if (v152 == 127)
          {
            float32x4_t v155 = *(float32x4_t *)(v151 + 16);
            float32x4_t v156 = *(float32x4_t *)(v151 + 32);
            float32x4_t v157 = *(float32x4_t *)(v151 + 48);
            float32x4_t v158 = *(float32x4_t *)(v151 + 64);
            float32x4_t v159 = *(float32x4_t *)(v151 + 80);
            float32x4_t v160 = *(float32x4_t *)(v151 + 96);
            float32x4_t v161 = *(float32x4_t *)(v151 + 112);
            int32x4_t v284 = *(int32x4_t *)v151;
            float32x4_t v285 = v156;
            float32x4_t v292 = v155;
            float32x4_t v293 = v157;
            float32x4_t v300 = v158;
            float32x4_t v301 = v160;
            float32x4_t v308 = v159;
            float32x4_t v309 = v161;
            uint64_t v153 = 128;
          }
          else if (v152 == 3)
          {
            float32x4_t v154 = vld1q_dup_f32((const float *)v151);
            int32x4_t v284 = (int32x4_t)v154;
            float32x4_t v285 = v154;
            float32x4_t v292 = v154;
            float32x4_t v293 = v154;
            float32x4_t v300 = v154;
            float32x4_t v301 = v154;
            float32x4_t v308 = v154;
            float32x4_t v309 = v154;
            uint64_t v153 = 4;
          }
          else if (v77[6])
          {
            uint64_t v153 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v284, 128, v151, v152);
          }
          else
          {
            uint64_t v153 = 0;
            int32x4_t v284 = 0u;
            float32x4_t v285 = 0u;
            float32x4_t v292 = 0u;
            float32x4_t v293 = 0u;
            float32x4_t v300 = 0u;
            float32x4_t v301 = 0u;
            float32x4_t v308 = 0u;
            float32x4_t v309 = 0u;
          }
          uint64_t v162 = v151 + v153;
          unsigned int v163 = v77[7];
          if (v163 == 127)
          {
            float32x4_t v166 = *(float32x4_t *)(v162 + 16);
            float32x4_t v167 = *(float32x4_t *)(v162 + 32);
            float32x4_t v168 = *(float32x4_t *)(v162 + 48);
            float32x4_t v169 = *(float32x4_t *)(v162 + 80);
            float32x4_t v170 = *(float32x4_t *)(v162 + 96);
            float32x4_t v171 = *(float32x4_t *)(v162 + 112);
            float32x4_t v172 = *(float32x4_t *)(v162 + 64);
            int32x4_t v286 = *(int32x4_t *)v162;
            float32x4_t v287 = v167;
            float32x4_t v294 = v166;
            float32x4_t v295 = v168;
            float32x4_t v302 = v172;
            float32x4_t v303 = v170;
            float32x4_t v310 = v169;
            float32x4_t v311 = v171;
            a7 = v222;
            uint64_t v164 = v243;
            if (!v243) {
              goto LABEL_214;
            }
          }
          else
          {
            a7 = v222;
            if (v163 == 3)
            {
              float32x4_t v165 = vld1q_dup_f32((const float *)v162);
              int32x4_t v286 = (int32x4_t)v165;
              float32x4_t v287 = v165;
              float32x4_t v294 = v165;
              float32x4_t v295 = v165;
              float32x4_t v302 = v165;
              float32x4_t v303 = v165;
              float32x4_t v310 = v165;
              float32x4_t v311 = v165;
              uint64_t v164 = v243;
              if (!v243) {
                goto LABEL_214;
              }
            }
            else if (v163)
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v286, 128, v162, v163);
              uint64_t v164 = v243;
              if (!v243) {
                goto LABEL_214;
              }
            }
            else
            {
              int32x4_t v286 = 0u;
              float32x4_t v287 = 0u;
              float32x4_t v294 = 0u;
              float32x4_t v295 = 0u;
              float32x4_t v302 = 0u;
              float32x4_t v303 = 0u;
              float32x4_t v310 = 0u;
              float32x4_t v311 = 0u;
              uint64_t v164 = v243;
              if (!v243) {
                goto LABEL_214;
              }
            }
          }
          if (v244)
          {
            uint64_t v173 = 0;
            unint64_t v174 = (unint64_t)v241 << 7;
            uint64_t v175 = 8 * v242;
            unsigned int v176 = &v248.i8[v174 + v175];
            uint64_t v177 = v239;
            uint64_t v178 = v240;
            unint64_t v179 = 8 * v244;
            if (v179 <= 1) {
              unint64_t v180 = 1;
            }
            else {
              unint64_t v180 = 8 * v244;
            }
            unint64_t v181 = v174 + v175;
            int v182 = &v248.i8[v174 + v175];
            if (v180) {
              BOOL v183 = (v180 - 1) >> 32 == 0;
            }
            else {
              BOOL v183 = 0;
            }
            char v184 = !v183;
            uint64_t v185 = v180 & 0x7FFFFFFE0;
            uint64_t v186 = v180 & 0x7FFFFFFF8;
            unint64_t v187 = (char *)&v249 + v181;
            uint64_t v188 = (long long *)(v239 + 16);
            unsigned int v189 = v176;
            uint64_t v190 = v239;
            do
            {
              unsigned int v191 = (char *)(v177 + v178 * v173);
              unsigned int v192 = &v176[128 * v173];
              if ((unint64_t)(&v182[128 * v173] - v191) < 0x20) {
                char v193 = 1;
              }
              else {
                char v193 = v184;
              }
              if (v193)
              {
                int v194 = 0;
                goto LABEL_211;
              }
              if (v180 >= 0x20)
              {
                int64x2_t v196 = v188;
                int64x2_t v197 = v187;
                uint64_t v198 = v180 & 0x7FFFFFFE0;
                do
                {
                  long long v199 = *v196;
                  *(v197 - 1) = *(v196 - 1);
                  *int64x2_t v197 = v199;
                  v197 += 2;
                  v196 += 2;
                  v198 -= 32;
                }
                while (v198);
                if (v180 == v185) {
                  goto LABEL_194;
                }
                uint64_t v195 = v180 & 0x7FFFFFFE0;
                if ((v180 & 0x18) == 0)
                {
                  v191 += v185;
                  v192 += v185;
                  int v194 = v180 & 0xFFFFFFE0;
                  goto LABEL_211;
                }
              }
              else
              {
                uint64_t v195 = 0;
              }
              v192 += v186;
              unint64_t v200 = v195 - (v180 & 0x7FFFFFFF8);
              int64x2_t v201 = (uint64_t *)(v190 + v195);
              int64x2_t v202 = &v189[v195];
              do
              {
                uint64_t v203 = *v201++;
                *(void *)int64x2_t v202 = v203;
                v202 += 8;
                v200 += 8;
              }
              while (v200);
              if (v180 == v186) {
                goto LABEL_194;
              }
              v191 += v186;
              int v194 = v180 & 0xFFFFFFF8;
LABEL_211:
              unsigned int v204 = v194 + 1;
              do
              {
                char v205 = *v191++;
                *v192++ = v205;
              }
              while (v179 > v204++);
LABEL_194:
              ++v173;
              v187 += 128;
              uint64_t v188 = (long long *)((char *)v188 + v178);
              v190 += v178;
              v189 += 128;
            }
            while (v173 != v164);
          }
LABEL_214:
          AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((uint64_t)&v248, 128, v237, v238, v245, v246);
LABEL_215:
          if (v234) {
            memcpy(v233, v81, 0x400uLL);
          }
          BOOL v21 = v38 == v223 >> 4;
          unsigned int v38 = v85;
          uint64_t result = v230;
        }
        while (!v21);
        BOOL v21 = v20++ == v213;
      }
      while (!v21);
    }
  }
  return result;
}

uint64_t AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, char a12)
{
  uint64_t v360 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v279 = a8;
  unsigned int v258 = a8 + a10 - 1;
  uint64_t v280 = a1;
  if (*(void *)(a1 + 168)) {
    int v17 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v17 = 0;
  }
  unsigned int v18 = a5 - 1;
  unsigned int v19 = a6 - 1;
  unsigned int v20 = a8 >> 3;
  unsigned int v257 = v258 >> 3;
  BOOL v21 = (v17 & 0xD00) == 0 || v17 == 768;
  int v22 = v17 & 0xE00;
  int v24 = !v21 && v22 != 1024;
  int v283 = v24;
  uint64_t result = a1;
  if (*(unsigned char *)(a1 + 232))
  {
    unsigned int v26 = *(unsigned __int8 *)(a1 + 255);
    unsigned int v27 = *(unsigned __int8 *)(a1 + 254);
    char v28 = __clz(v18);
    if (1 << v26 >= a6 || a5 >> v27)
    {
      if (!(a6 >> v26) && 1 << v27 < a5)
      {
        if (a6 < 2) {
          unsigned int v31 = 0;
        }
        else {
          unsigned int v31 = __clz(~(-1 << -(char)__clz(v19))) - 32;
        }
        v27 += v26 + v31;
        unsigned int v26 = -v31;
      }
    }
    else
    {
      unsigned int v29 = 32 - __clz(~(-1 << -v28));
      unsigned int v30 = v27 + v26;
      if (a5 < 2) {
        unsigned int v29 = 0;
      }
      unsigned int v26 = v30 - v29;
      unsigned int v27 = v29;
    }
    if (a5 < 2)
    {
      if (v27) {
        goto LABEL_27;
      }
    }
    else if (32 - __clz(~(-1 << -v28)) < v27)
    {
LABEL_27:
      BOOL v272 = 0;
LABEL_32:
      unsigned int v268 = v27 - 4;
      unsigned int v264 = v26 - 3;
      int v33 = -1 << *(unsigned char *)(*(void *)(a1 + 208) + 48);
      unsigned int v255 = (((~v33 + a5) & v33) + ~(-1 << v27)) >> v27;
      goto LABEL_33;
    }
    if (a6 < 2) {
      unsigned int v32 = 0;
    }
    else {
      unsigned int v32 = 32 - __clz(~(-1 << -(char)__clz(v19)));
    }
    BOOL v272 = v32 >= v26;
    goto LABEL_32;
  }
  BOOL v272 = 0;
  unsigned int v255 = 0;
  unsigned int v264 = 0;
  unsigned int v268 = 0;
LABEL_33:
  if (v20 <= v257)
  {
    unsigned int v271 = a7 + a9 - 1;
    unsigned int v254 = a7 >> 4;
    if (a7 >> 4 <= v271 >> 4)
    {
      unsigned int v282 = v18 >> 4;
      unsigned int v253 = v19 >> 3;
      int v281 = (v18 & 0xF) + 1;
      int v252 = (v19 & 7) + 1;
      int v251 = ~(-1 << v264);
      uint32x2_t v34 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0xF00000007);
      int8x8_t v35 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32(vadd_s32((int32x2_t)vshl_u32(v34, (uint32x2_t)0xFFFFFFFCFFFFFFFDLL), (int32x2_t)-1))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x2000000010, v34));
      __int32 v265 = v35.i32[0] | v35.i32[1];
      int8x8_t v263 = v35;
      BOOL v262 = v35.i32[0] != 0;
      BOOL v261 = v35.i32[1] != 0;
      uint64_t v36 = a11;
      uint64_t v37 = 4 * a11;
      uint64_t v38 = 2 * a11;
      unsigned int v270 = a7;
      do
      {
        unsigned int v39 = (8 * v20) | 7;
        if (8 * v20 <= v279) {
          int v40 = v279;
        }
        else {
          int v40 = 8 * v20;
        }
        if (v258 < v39) {
          unsigned int v39 = v258;
        }
        unsigned int v278 = 8 * v20;
        int v267 = v40 - 8 * v20;
        int v277 = v39 - v40 + 1;
        unsigned int v41 = v254;
        if (v20 == v253) {
          unsigned int v42 = v252;
        }
        else {
          unsigned int v42 = 8;
        }
        int v266 = (v20 >> v264) * v255;
        int v43 = v20 & v251;
        uint64_t v275 = a3 + (v40 - v279) * v36;
        int v276 = v20 & v251;
        unsigned int v260 = v20;
        unsigned int v259 = v42;
        do
        {
          unsigned int v44 = 16 * v41;
          unsigned int v45 = 16 * (v41 + 1) - 1;
          if (16 * v41 <= a7) {
            int v46 = a7;
          }
          else {
            int v46 = 16 * v41;
          }
          if (v271 < v45) {
            unsigned int v45 = v271;
          }
          int v47 = v45 - v46 + 1;
          if (v41 == v282) {
            unsigned int v48 = v281;
          }
          else {
            unsigned int v48 = 16;
          }
          BOOL v49 = 1;
          if (v278 >= v279 && v44 >= a7)
          {
            int v50 = v281;
            if (v41 != v282) {
              int v50 = 16;
            }
            BOOL v49 = v47 != v50 || v277 != v42;
          }
          if (v272)
          {
            if (v268 | v264)
            {
              int v52 = 0;
              uint64_t v53 = 0;
              int v54 = 1;
              BOOL v55 = v264 != 0;
              BOOL v56 = v268 != 0;
              unsigned int v57 = v264;
              unsigned int v58 = v268;
              do
              {
                --v57;
                if (v55) {
                  v53 |= (unint64_t)(v43 & v54) << v52++;
                }
                else {
                  unsigned int v57 = 0;
                }
                --v58;
                if (v56) {
                  v53 |= (unint64_t)(v41 & ~(-1 << v268) & v54) << v52++;
                }
                else {
                  unsigned int v58 = 0;
                }
                v54 *= 2;
                --v52;
                BOOL v56 = v58 != 0;
                BOOL v55 = v57 != 0;
              }
              while (v58 | v57);
            }
            else
            {
              uint64_t v53 = 0;
            }
            uint64_t v66 = *(void *)(result + 320) * ((v41 >> v268) + v266) + (v53 << 10);
          }
          else
          {
            if (v265)
            {
              int v59 = 0;
              uint64_t v60 = 0;
              int v61 = 1;
              BOOL v62 = v262;
              BOOL v63 = v261;
              __int32 v64 = v263.i32[0];
              __int32 v65 = v263.i32[1];
              do
              {
                --v64;
                if (v62) {
                  v60 |= (unint64_t)(v61 & v20) << v59++;
                }
                else {
                  __int32 v64 = 0;
                }
                --v65;
                if (v63) {
                  v60 |= (unint64_t)(v61 & v41) << v59++;
                }
                else {
                  __int32 v65 = 0;
                }
                v61 *= 2;
                --v59;
                BOOL v63 = v65 != 0;
                BOOL v62 = v64 != 0;
              }
              while (v65 | v64);
            }
            else
            {
              uint64_t v60 = 0;
            }
            uint64_t v66 = v60 << 10;
          }
          unsigned int v67 = *(_DWORD *)(result + 128) >> (*(unsigned char *)(result + 144) + a12);
          if (v67 <= 1) {
            unsigned int v67 = 1;
          }
          unsigned int v68 = v67 + 15;
          if (v68 < 0x20) {
            unsigned int v69 = 0;
          }
          else {
            unsigned int v69 = 32 - __clz(~(-1 << -(char)__clz((v68 >> 4) - 1)));
          }
          unsigned int v70 = *(_DWORD *)(result + 132) >> (*(unsigned char *)(result + 144) + a12);
          if (v70 <= 1) {
            unsigned int v70 = 1;
          }
          unsigned int v71 = v70 + 7;
          if (v71 < 0x10)
          {
            unsigned int v72 = 0;
            if (!v69)
            {
LABEL_111:
              uint64_t v74 = 0;
              goto LABEL_112;
            }
          }
          else
          {
            unsigned int v72 = 32 - __clz(~(-1 << -(char)__clz((v71 >> 3) - 1)));
            if (!(v72 | v69)) {
              goto LABEL_111;
            }
          }
          int v73 = 0;
          uint64_t v74 = 0;
          BOOL v75 = v69 != 0;
          BOOL v76 = v72 != 0;
          int v77 = 1;
          do
          {
            --v69;
            if (v75) {
              v74 |= (unint64_t)(v77 & v41) << v73++;
            }
            else {
              unsigned int v69 = 0;
            }
            --v72;
            if (v76) {
              v74 |= (unint64_t)(v77 & v20) << v73++;
            }
            else {
              unsigned int v72 = 0;
            }
            v77 *= 2;
            --v73;
            BOOL v76 = v72 != 0;
            BOOL v75 = v69 != 0;
          }
          while (v72 | v69);
LABEL_112:
          unsigned int v78 = v46 - a7;
          int v79 = v48 < 0x10 || v49;
          int v80 = (char *)(a4 + 8 * v74);
          uint64_t v81 = v275 + 8 * v78;
          uint64_t v82 = (int32x4_t *)(a2 + v66);
          if (v42 < 8) {
            int v83 = 1;
          }
          else {
            int v83 = v79;
          }
          if (v283)
          {
            if (v83)
            {
              uint64_t v84 = v36;
              int v85 = v47;
              BOOL v86 = v49;
              int v87 = v46;
              memcpy(__dst, v82, sizeof(__dst));
              int v46 = v87;
              BOOL v49 = v86;
              unsigned int v20 = v260;
              unsigned int v44 = 16 * v41;
              unsigned int v42 = v259;
              int v47 = v85;
              uint64_t v36 = v84;
              float32x4_t v88 = (int32x4_t *)__dst;
              uint64_t result = v280;
LABEL_122:
              float32x4_t v269 = v82;
              block[0] = MEMORY[0x263EF8330];
              block[1] = 3221225472;
              block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE16ELj2ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
              block[3] = &__block_descriptor_90_e5_v8__0l;
              block[4] = result;
              float32x4_t v285 = v88;
              unsigned __int8 v293 = v48;
              unsigned __int8 v294 = v42;
              unsigned int v289 = v267;
              unsigned int v290 = v46 - v44;
              int32x4_t v286 = v80;
              uint64_t v287 = v81;
              uint64_t v288 = v36;
              unsigned int v291 = v277;
              unsigned int v292 = v47;
              if (v49)
              {
                dispatch_sync(*(dispatch_queue_t *)(*(void *)(result + 8) + 7384), block);
                uint64_t result = v280;
                a7 = v270;
                uint64_t v38 = 2 * a11;
                uint64_t v37 = 4 * a11;
                int v43 = v276;
                unsigned int v89 = v41 + 1;
                goto LABEL_242;
              }
              unsigned int v110 = *v80;
              if (v110 == 127)
              {
                float32x4_t v113 = (float32x4_t)v88[1];
                float32x4_t v114 = (float32x4_t)v88[2];
                float32x4_t v115 = (float32x4_t)v88[3];
                float32x4_t v116 = (float32x4_t)v88[4];
                float32x4_t v117 = (float32x4_t)v88[5];
                float32x4_t v118 = (float32x4_t)v88[6];
                float32x4_t v119 = (float32x4_t)v88[7];
                int32x4_t v296 = *v88;
                float32x4_t v297 = v114;
                float32x4_t v304 = v113;
                float32x4_t v305 = v115;
                float32x4_t v312 = v116;
                float32x4_t v313 = v118;
                float32x4_t v320 = v117;
                float32x4_t v321 = v119;
                uint64_t v111 = 128;
              }
              else if (v110 == 3)
              {
                float32x4_t v112 = vld1q_dup_f32((const float *)v88->i32);
                int32x4_t v296 = (int32x4_t)v112;
                float32x4_t v297 = v112;
                float32x4_t v304 = v112;
                float32x4_t v305 = v112;
                float32x4_t v312 = v112;
                float32x4_t v313 = v112;
                float32x4_t v320 = v112;
                float32x4_t v321 = v112;
                uint64_t v111 = 4;
              }
              else if (*v80)
              {
                uint64_t v111 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v296, 128, (uint64_t)v88, v110);
              }
              else
              {
                uint64_t v111 = 0;
                float32x4_t v297 = 0u;
                int32x4_t v296 = 0u;
                float32x4_t v304 = 0u;
                float32x4_t v305 = 0u;
                float32x4_t v312 = 0u;
                float32x4_t v313 = 0u;
                float32x4_t v320 = 0u;
                float32x4_t v321 = 0u;
              }
              uint64_t v120 = (uint64_t)v88->i64 + v111;
              unsigned int v121 = v80[1];
              if (v121 == 127)
              {
                float32x4_t v124 = *(float32x4_t *)(v120 + 16);
                float32x4_t v125 = *(float32x4_t *)(v120 + 32);
                float32x4_t v126 = *(float32x4_t *)(v120 + 48);
                float32x4_t v127 = *(float32x4_t *)(v120 + 64);
                float32x4_t v128 = *(float32x4_t *)(v120 + 80);
                float32x4_t v129 = *(float32x4_t *)(v120 + 96);
                float32x4_t v130 = *(float32x4_t *)(v120 + 112);
                int32x4_t v298 = *(int32x4_t *)v120;
                float32x4_t v299 = v125;
                float32x4_t v306 = v124;
                float32x4_t v307 = v126;
                float32x4_t v314 = v127;
                float32x4_t v315 = v129;
                float32x4_t v322 = v128;
                float32x4_t v323 = v130;
                uint64_t v122 = 128;
              }
              else if (v121 == 3)
              {
                float32x4_t v123 = vld1q_dup_f32((const float *)v120);
                int32x4_t v298 = (int32x4_t)v123;
                float32x4_t v299 = v123;
                float32x4_t v306 = v123;
                float32x4_t v307 = v123;
                float32x4_t v314 = v123;
                float32x4_t v315 = v123;
                float32x4_t v322 = v123;
                float32x4_t v323 = v123;
                uint64_t v122 = 4;
              }
              else if (v80[1])
              {
                uint64_t v122 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v298, 128, v120, v121);
              }
              else
              {
                uint64_t v122 = 0;
                int32x4_t v298 = 0u;
                float32x4_t v299 = 0u;
                float32x4_t v306 = 0u;
                float32x4_t v307 = 0u;
                float32x4_t v314 = 0u;
                float32x4_t v315 = 0u;
                float32x4_t v322 = 0u;
                float32x4_t v323 = 0u;
              }
              uint64_t v131 = v120 + v122;
              unsigned int v132 = v80[2];
              if (v132 == 127)
              {
                float32x4_t v135 = *(float32x4_t *)(v131 + 16);
                float32x4_t v136 = *(float32x4_t *)(v131 + 32);
                float32x4_t v137 = *(float32x4_t *)(v131 + 48);
                float32x4_t v138 = *(float32x4_t *)(v131 + 64);
                float32x4_t v139 = *(float32x4_t *)(v131 + 80);
                float32x4_t v140 = *(float32x4_t *)(v131 + 96);
                float32x4_t v141 = *(float32x4_t *)(v131 + 112);
                int32x4_t v328 = *(int32x4_t *)v131;
                float32x4_t v329 = v136;
                float32x4_t v336 = v135;
                float32x4_t v337 = v137;
                float32x4_t v344 = v138;
                float32x4_t v345 = v140;
                float32x4_t v352 = v139;
                float32x4_t v353 = v141;
                uint64_t v133 = 128;
              }
              else if (v132 == 3)
              {
                float32x4_t v134 = vld1q_dup_f32((const float *)v131);
                int32x4_t v328 = (int32x4_t)v134;
                float32x4_t v329 = v134;
                float32x4_t v336 = v134;
                float32x4_t v337 = v134;
                float32x4_t v344 = v134;
                float32x4_t v345 = v134;
                float32x4_t v352 = v134;
                float32x4_t v353 = v134;
                uint64_t v133 = 4;
              }
              else if (v80[2])
              {
                uint64_t v133 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v328, 128, v131, v132);
              }
              else
              {
                uint64_t v133 = 0;
                int32x4_t v328 = 0u;
                float32x4_t v329 = 0u;
                float32x4_t v336 = 0u;
                float32x4_t v337 = 0u;
                float32x4_t v344 = 0u;
                float32x4_t v345 = 0u;
                float32x4_t v352 = 0u;
                float32x4_t v353 = 0u;
              }
              uint64_t v142 = v131 + v133;
              unsigned int v143 = v80[3];
              if (v143 == 127)
              {
                float32x4_t v146 = *(float32x4_t *)(v142 + 16);
                float32x4_t v147 = *(float32x4_t *)(v142 + 32);
                float32x4_t v148 = *(float32x4_t *)(v142 + 48);
                float32x4_t v149 = *(float32x4_t *)(v142 + 64);
                float32x4_t v150 = *(float32x4_t *)(v142 + 80);
                float32x4_t v151 = *(float32x4_t *)(v142 + 96);
                float32x4_t v152 = *(float32x4_t *)(v142 + 112);
                int32x4_t v330 = *(int32x4_t *)v142;
                float32x4_t v331 = v147;
                float32x4_t v338 = v146;
                float32x4_t v339 = v148;
                float32x4_t v346 = v149;
                float32x4_t v347 = v151;
                float32x4_t v354 = v150;
                float32x4_t v355 = v152;
                uint64_t v144 = 128;
              }
              else if (v143 == 3)
              {
                float32x4_t v145 = vld1q_dup_f32((const float *)v142);
                int32x4_t v330 = (int32x4_t)v145;
                float32x4_t v331 = v145;
                float32x4_t v338 = v145;
                float32x4_t v339 = v145;
                float32x4_t v346 = v145;
                float32x4_t v347 = v145;
                float32x4_t v354 = v145;
                float32x4_t v355 = v145;
                uint64_t v144 = 4;
              }
              else if (v80[3])
              {
                uint64_t v144 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v330, 128, v142, v143);
              }
              else
              {
                uint64_t v144 = 0;
                int32x4_t v330 = 0u;
                float32x4_t v331 = 0u;
                float32x4_t v338 = 0u;
                float32x4_t v339 = 0u;
                float32x4_t v346 = 0u;
                float32x4_t v347 = 0u;
                float32x4_t v354 = 0u;
                float32x4_t v355 = 0u;
              }
              uint64_t v153 = v142 + v144;
              unsigned int v154 = v80[4];
              if (v154 == 127)
              {
                float32x4_t v157 = *(float32x4_t *)(v153 + 16);
                float32x4_t v158 = *(float32x4_t *)(v153 + 32);
                float32x4_t v159 = *(float32x4_t *)(v153 + 48);
                float32x4_t v160 = *(float32x4_t *)(v153 + 64);
                float32x4_t v161 = *(float32x4_t *)(v153 + 80);
                float32x4_t v162 = *(float32x4_t *)(v153 + 96);
                float32x4_t v163 = *(float32x4_t *)(v153 + 112);
                int32x4_t v300 = *(int32x4_t *)v153;
                float32x4_t v301 = v158;
                float32x4_t v308 = v157;
                float32x4_t v309 = v159;
                float32x4_t v316 = v160;
                float32x4_t v317 = v162;
                float32x4_t v324 = v161;
                float32x4_t v325 = v163;
                uint64_t v155 = 128;
              }
              else if (v154 == 3)
              {
                float32x4_t v156 = vld1q_dup_f32((const float *)v153);
                int32x4_t v300 = (int32x4_t)v156;
                float32x4_t v301 = v156;
                float32x4_t v308 = v156;
                float32x4_t v309 = v156;
                float32x4_t v316 = v156;
                float32x4_t v317 = v156;
                float32x4_t v324 = v156;
                float32x4_t v325 = v156;
                uint64_t v155 = 4;
              }
              else if (v80[4])
              {
                uint64_t v155 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v300, 128, v153, v154);
              }
              else
              {
                uint64_t v155 = 0;
                int32x4_t v300 = 0u;
                float32x4_t v301 = 0u;
                float32x4_t v308 = 0u;
                float32x4_t v309 = 0u;
                float32x4_t v316 = 0u;
                float32x4_t v317 = 0u;
                float32x4_t v324 = 0u;
                float32x4_t v325 = 0u;
              }
              uint64_t v164 = v153 + v155;
              unsigned int v165 = v80[5];
              if (v165 == 127)
              {
                float32x4_t v168 = *(float32x4_t *)(v164 + 16);
                float32x4_t v169 = *(float32x4_t *)(v164 + 32);
                float32x4_t v170 = *(float32x4_t *)(v164 + 48);
                float32x4_t v171 = *(float32x4_t *)(v164 + 64);
                float32x4_t v172 = *(float32x4_t *)(v164 + 80);
                float32x4_t v173 = *(float32x4_t *)(v164 + 96);
                float32x4_t v174 = *(float32x4_t *)(v164 + 112);
                int32x4_t v302 = *(int32x4_t *)v164;
                float32x4_t v303 = v169;
                float32x4_t v310 = v168;
                float32x4_t v311 = v170;
                float32x4_t v318 = v171;
                float32x4_t v319 = v173;
                float32x4_t v326 = v172;
                float32x4_t v327 = v174;
                uint64_t v166 = 128;
              }
              else if (v165 == 3)
              {
                float32x4_t v167 = vld1q_dup_f32((const float *)v164);
                int32x4_t v302 = (int32x4_t)v167;
                float32x4_t v303 = v167;
                float32x4_t v310 = v167;
                float32x4_t v311 = v167;
                float32x4_t v318 = v167;
                float32x4_t v319 = v167;
                float32x4_t v326 = v167;
                float32x4_t v327 = v167;
                uint64_t v166 = 4;
              }
              else if (v80[5])
              {
                uint64_t v166 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v302, 128, v164, v165);
              }
              else
              {
                uint64_t v166 = 0;
                int32x4_t v302 = 0u;
                float32x4_t v303 = 0u;
                float32x4_t v310 = 0u;
                float32x4_t v311 = 0u;
                float32x4_t v318 = 0u;
                float32x4_t v319 = 0u;
                float32x4_t v326 = 0u;
                float32x4_t v327 = 0u;
              }
              uint64_t v175 = v164 + v166;
              unsigned int v176 = v80[6];
              if (v176 == 127)
              {
                float32x4_t v179 = *(float32x4_t *)(v175 + 16);
                float32x4_t v180 = *(float32x4_t *)(v175 + 32);
                float32x4_t v181 = *(float32x4_t *)(v175 + 48);
                float32x4_t v182 = *(float32x4_t *)(v175 + 64);
                float32x4_t v183 = *(float32x4_t *)(v175 + 80);
                float32x4_t v184 = *(float32x4_t *)(v175 + 96);
                float32x4_t v185 = *(float32x4_t *)(v175 + 112);
                int32x4_t v332 = *(int32x4_t *)v175;
                float32x4_t v333 = v180;
                float32x4_t v340 = v179;
                float32x4_t v341 = v181;
                float32x4_t v348 = v182;
                float32x4_t v349 = v184;
                float32x4_t v356 = v183;
                float32x4_t v357 = v185;
                uint64_t v177 = 128;
              }
              else if (v176 == 3)
              {
                float32x4_t v178 = vld1q_dup_f32((const float *)v175);
                int32x4_t v332 = (int32x4_t)v178;
                float32x4_t v333 = v178;
                float32x4_t v340 = v178;
                float32x4_t v341 = v178;
                float32x4_t v348 = v178;
                float32x4_t v349 = v178;
                float32x4_t v356 = v178;
                float32x4_t v357 = v178;
                uint64_t v177 = 4;
              }
              else if (v80[6])
              {
                uint64_t v177 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v332, 128, v175, v176);
              }
              else
              {
                uint64_t v177 = 0;
                int32x4_t v332 = 0u;
                float32x4_t v333 = 0u;
                float32x4_t v340 = 0u;
                float32x4_t v341 = 0u;
                float32x4_t v348 = 0u;
                float32x4_t v349 = 0u;
                float32x4_t v356 = 0u;
                float32x4_t v357 = 0u;
              }
              uint64_t v186 = v175 + v177;
              unsigned int v187 = v80[7];
              if (v187 == 127)
              {
                float32x4_t v190 = *(float32x4_t *)(v186 + 16);
                float32x4_t v191 = *(float32x4_t *)(v186 + 32);
                float32x4_t v192 = *(float32x4_t *)(v186 + 48);
                float32x4_t v193 = *(float32x4_t *)(v186 + 80);
                float32x4_t v194 = *(float32x4_t *)(v186 + 96);
                float32x4_t v195 = *(float32x4_t *)(v186 + 112);
                float32x4_t v196 = *(float32x4_t *)(v186 + 64);
                int32x4_t v334 = *(int32x4_t *)v186;
                float32x4_t v335 = v191;
                float32x4_t v342 = v190;
                float32x4_t v343 = v192;
                float32x4_t v350 = v196;
                float32x4_t v351 = v194;
                float32x4_t v358 = v193;
                float32x4_t v359 = v195;
                a7 = v270;
                uint64_t v188 = v291;
                if (v291) {
                  goto LABEL_198;
                }
              }
              else
              {
                a7 = v270;
                if (v187 != 3)
                {
                  if (v187)
                  {
                    AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v334, 128, v186, v187);
                    uint64_t v188 = v291;
                    if (!v291) {
                      goto LABEL_229;
                    }
                  }
                  else
                  {
                    int32x4_t v334 = 0u;
                    float32x4_t v335 = 0u;
                    float32x4_t v342 = 0u;
                    float32x4_t v343 = 0u;
                    float32x4_t v350 = 0u;
                    float32x4_t v351 = 0u;
                    float32x4_t v358 = 0u;
                    float32x4_t v359 = 0u;
                    uint64_t v188 = v291;
                    if (!v291) {
                      goto LABEL_229;
                    }
                  }
LABEL_198:
                  if (!v292) {
                    goto LABEL_229;
                  }
                  uint64_t v197 = 0;
                  unint64_t v198 = (unint64_t)v289 << 7;
                  uint64_t v199 = 8 * v290;
                  unint64_t v200 = &v296.i8[v198 + v199];
                  uint64_t v201 = v287;
                  uint64_t v202 = v288;
                  unint64_t v203 = 8 * v292;
                  if (v203 <= 1) {
                    unint64_t v204 = 1;
                  }
                  else {
                    unint64_t v204 = 8 * v292;
                  }
                  unint64_t v205 = v198 + v199;
                  int64x2_t v206 = &v296.i8[v198 + v199];
                  if (v204) {
                    BOOL v207 = (v204 - 1) >> 32 == 0;
                  }
                  else {
                    BOOL v207 = 0;
                  }
                  char v208 = !v207;
                  uint64_t v209 = v204 & 0x7FFFFFFE0;
                  uint64_t v210 = v204 & 0x7FFFFFFF8;
                  unsigned int v211 = (char *)&v297 + v205;
                  int64x2_t v212 = (long long *)(v287 + 16);
                  unsigned int v213 = v200;
                  uint64_t v214 = v287;
                  while (2)
                  {
                    BOOL v215 = (char *)(v201 + v202 * v197);
                    BOOL v216 = &v200[128 * v197];
                    if ((unint64_t)(&v206[128 * v197] - v215) < 0x20) {
                      char v217 = 1;
                    }
                    else {
                      char v217 = v208;
                    }
                    if (v217)
                    {
                      int v218 = 0;
LABEL_226:
                      unsigned int v228 = v218 + 1;
                      do
                      {
                        char v229 = *v215++;
                        *v216++ = v229;
                      }
                      while (v203 > v228++);
                    }
                    else
                    {
                      if (v204 >= 0x20)
                      {
                        int v220 = v212;
                        unsigned int v221 = v211;
                        uint64_t v222 = v204 & 0x7FFFFFFE0;
                        do
                        {
                          long long v223 = *v220;
                          *(v221 - 1) = *(v220 - 1);
                          *unsigned int v221 = v223;
                          v221 += 2;
                          v220 += 2;
                          v222 -= 32;
                        }
                        while (v222);
                        if (v204 == v209) {
                          goto LABEL_209;
                        }
                        uint64_t v219 = v204 & 0x7FFFFFFE0;
                        if ((v204 & 0x18) == 0)
                        {
                          v215 += v209;
                          v216 += v209;
                          int v218 = v204 & 0xFFFFFFE0;
                          goto LABEL_226;
                        }
                      }
                      else
                      {
                        uint64_t v219 = 0;
                      }
                      v216 += v210;
                      unint64_t v224 = v219 - (v204 & 0x7FFFFFFF8);
                      int64x2_t v225 = (uint64_t *)(v214 + v219);
                      int64x2_t v226 = &v213[v219];
                      do
                      {
                        uint64_t v227 = *v225++;
                        *(void *)int64x2_t v226 = v227;
                        v226 += 8;
                        v224 += 8;
                      }
                      while (v224);
                      if (v204 != v210)
                      {
                        v215 += v210;
                        int v218 = v204 & 0xFFFFFFF8;
                        goto LABEL_226;
                      }
                    }
LABEL_209:
                    ++v197;
                    v211 += 128;
                    int64x2_t v212 = (long long *)((char *)v212 + v202);
                    v214 += v202;
                    v213 += 128;
                    if (v197 == v188) {
                      goto LABEL_229;
                    }
                    continue;
                  }
                }
                float32x4_t v189 = vld1q_dup_f32((const float *)v186);
                int32x4_t v334 = (int32x4_t)v189;
                float32x4_t v335 = v189;
                float32x4_t v342 = v189;
                float32x4_t v343 = v189;
                float32x4_t v350 = v189;
                float32x4_t v351 = v189;
                float32x4_t v358 = v189;
                float32x4_t v359 = v189;
                uint64_t v188 = v291;
                if (v291) {
                  goto LABEL_198;
                }
              }
LABEL_229:
              uint64_t v231 = 0;
              unsigned int v232 = v285;
              int v233 = v286;
              int v234 = v293;
              int v235 = v294;
              uint64_t result = v280;
              uint64_t v38 = 2 * a11;
              int v43 = v276;
              unsigned int v89 = v41 + 1;
              do
              {
                uint64_t v246 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,2u>::kSubblockPositions[v231 + 1];
                uint64_t v247 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,2u>::kSubblockPositions[v231];
                unsigned int v248 = (v234 - 4 * v247) & ~((v234 - 4 * (int)v247) >> 31);
                if (v248 >= 4) {
                  unsigned int v248 = 4;
                }
                unsigned int v249 = (v235 - 4 * v246) & ~((v235 - 4 * (int)v246) >> 31);
                if (v249 >= 4) {
                  unsigned int v249 = 4;
                }
                if (v248) {
                  BOOL v250 = v249 == 0;
                }
                else {
                  BOOL v250 = 1;
                }
                if (v250)
                {
                  char v245 = 0;
                }
                else
                {
                  unsigned int v236 = &v296 + 32 * v246 + 2 * v247;
                  int32x4_t v237 = *v236;
                  int32x4_t v238 = v236[1];
                  int32x4_t v239 = v236[8];
                  int32x4_t v240 = v236[9];
                  int32x4_t v241 = v236[16];
                  int32x4_t v242 = v236[17];
                  v236 += 24;
                  int32x4_t v243 = *v236;
                  int32x4_t v244 = v236[1];
                  *unsigned int v232 = v237;
                  v232[1] = v239;
                  v232[2] = v238;
                  v232[3] = v240;
                  v232[4] = v241;
                  v232[5] = v243;
                  v232[6] = v242;
                  v232[7] = v244;
                  v232 += 8;
                  char v245 = 127;
                }
                *v233++ = v245;
                v231 += 2;
              }
              while (v231 != 16);
              uint64_t v37 = 4 * a11;
LABEL_242:
              uint64_t v82 = v269;
              if (v283) {
                goto LABEL_47;
              }
              goto LABEL_48;
            }
            float32x4_t v88 = (int32x4_t *)__dst;
          }
          else
          {
            float32x4_t v88 = v82;
            if (v83) {
              goto LABEL_122;
            }
          }
          uint64_t v90 = 0;
          float32x4_t v91 = v88;
          do
          {
            uint64_t v105 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,2u>::kSubblockPositions[v90 + 1];
            uint64_t v106 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,2u>::kSubblockPositions[v90];
            unsigned int v107 = (v48 - 4 * v106) & ~((int)(v48 - 4 * v106) >> 31);
            if (v107 >= 4) {
              unsigned int v107 = 4;
            }
            unsigned int v108 = (v42 - 4 * v105) & ~((int)(v42 - 4 * v105) >> 31);
            if (v108 >= 4) {
              unsigned int v108 = 4;
            }
            if (v107) {
              BOOL v109 = v108 == 0;
            }
            else {
              BOOL v109 = 1;
            }
            if (v109)
            {
              char v104 = 0;
            }
            else
            {
              float32x4_t v92 = (long long *)(v81 + v37 * v105 + 32 * v106);
              float32x4_t v93 = (long long *)((char *)v92 + v36);
              long long v95 = *v92;
              long long v96 = v92[1];
              float32x4_t v94 = (long long *)((char *)v92 + v38);
              long long v97 = *v93;
              long long v98 = v93[1];
              long long v100 = *v94;
              long long v101 = v94[1];
              float32x4_t v99 = (long long *)((char *)v94 + v36);
              long long v102 = *v99;
              long long v103 = v99[1];
              *float32x4_t v91 = (int32x4_t)v95;
              v91[1] = (int32x4_t)v97;
              v91[2] = (int32x4_t)v96;
              v91[3] = (int32x4_t)v98;
              v91[4] = (int32x4_t)v100;
              v91[5] = (int32x4_t)v102;
              v91[6] = (int32x4_t)v101;
              v91[7] = (int32x4_t)v103;
              v91 += 8;
              char v104 = 127;
            }
            *v80++ = v104;
            v90 += 2;
          }
          while (v90 != 16);
          a7 = v270;
          int v43 = v276;
          unsigned int v89 = v41 + 1;
          if (v283)
          {
LABEL_47:
            memcpy(v82, v88, 0x400uLL);
            uint64_t v38 = 2 * a11;
            uint64_t v37 = 4 * a11;
            uint64_t result = v280;
          }
LABEL_48:
          BOOL v21 = v41 == v271 >> 4;
          unsigned int v41 = v89;
        }
        while (!v21);
        BOOL v21 = v20++ == v257;
      }
      while (!v21);
    }
  }
  return result;
}

void *AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, int a12)
{
  uint64_t v311 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  uint64_t v17 = a1;
  unsigned int v228 = a8;
  unsigned int v18 = a8 >> 3;
  unsigned int v212 = a8 + a10 - 1;
  unsigned int v214 = v212 >> 3;
  unsigned int v19 = *(unsigned __int8 *)(*(void *)(a1 + 208) + 88);
  unsigned int v20 = *(_DWORD *)(a1 + 112);
  uint64_t v229 = v17;
  if (*(void *)(v17 + 168))
  {
    __int16 CacheMode = IOSurfaceGetCacheMode();
    uint64_t v17 = v229;
    int v22 = CacheMode & 0xF00;
  }
  else
  {
    int v22 = 0;
  }
  BOOL v23 = (v22 & 0xD00) == 0 || v22 == 768;
  int v24 = v22 & 0xE00;
  int v26 = !v23 && v24 != 1024;
  int v233 = v26;
  uint64_t result = (void *)AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::isLevelTiled(v17, *(_DWORD *)(v17 + 144) + a12);
  uint64_t v28 = v229;
  int v222 = (int)result;
  if (v18 <= v214)
  {
    unsigned int v221 = a7 + a9 - 1;
    unsigned int v211 = a7 >> 4;
    if (a7 >> 4 <= v221 >> 4)
    {
      unsigned int v208 = a5 - 1;
      unsigned int v231 = (a5 - 1) >> 4;
      int v230 = ((a5 - 1) & 0xF) + 1;
      int v209 = ((a6 - 1) & 7) + 1;
      unsigned int v210 = (a6 - 1) >> 3;
      uint32x2_t v29 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0xF00000007);
      int8x8_t v30 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32(vadd_s32((int32x2_t)vshl_u32(v29, (uint32x2_t)0xFFFFFFFCFFFFFFFDLL), (int32x2_t)-1))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x2000000010, v29));
      __int32 v219 = v30.i32[0] | v30.i32[1];
      int8x8_t v218 = v30;
      BOOL v217 = v30.i32[0] != 0;
      BOOL v216 = v30.i32[1] != 0;
      unint64_t v207 = 8 * v20 * (unint64_t)v19;
      unsigned int v220 = a7;
      do
      {
        unsigned int v31 = (8 * v18) | 7;
        if (8 * v18 <= v228) {
          int v32 = v228;
        }
        else {
          int v32 = 8 * v18;
        }
        unsigned int v33 = v211;
        if (v212 < v31) {
          unsigned int v31 = v212;
        }
        unsigned int v227 = 8 * v18;
        int v215 = v32 - 8 * v18;
        int v226 = v31 - v32 + 1;
        int v34 = v209;
        if (v18 != v210) {
          int v34 = 8;
        }
        unsigned int v234 = v34;
        uint64_t v225 = a3 + (v32 - v228) * a11;
        do
        {
          unsigned int v35 = 16 * v33;
          unsigned int v36 = 16 * (v33 + 1) - 1;
          if (16 * v33 <= a7) {
            int v37 = a7;
          }
          else {
            int v37 = 16 * v33;
          }
          if (v221 < v36) {
            unsigned int v36 = v221;
          }
          int v38 = v36 - v37 + 1;
          if (v33 == v231) {
            unsigned int v39 = v230;
          }
          else {
            unsigned int v39 = 16;
          }
          BOOL v40 = 1;
          if (v227 >= v228 && v35 >= a7)
          {
            int v41 = v230;
            if (v33 != v231) {
              int v41 = 16;
            }
            BOOL v40 = v38 != v41 || v226 != v234;
          }
          if (v222)
          {
            unsigned int v62 = 0;
            uint64_t v63 = v207 >> (*(unsigned char *)(v28 + 57) != 0);
            char v64 = 1;
            if (v63 > 127)
            {
              if (v63 > 511)
              {
                if (v63 == 512)
                {
                  char v65 = 0;
                  unsigned int v62 = 16;
                  unsigned int v66 = 16;
                }
                else
                {
                  char v65 = 1;
                  unsigned int v66 = 0;
                  if (v63 == 1024)
                  {
                    unsigned int v66 = 8;
                    unsigned int v62 = 16;
                  }
                }
              }
              else if (v63 == 128)
              {
                char v64 = 0;
                char v65 = 0;
                unsigned int v62 = 32;
                unsigned int v66 = 32;
              }
              else
              {
                char v65 = 1;
                unsigned int v66 = 0;
                if (v63 == 256)
                {
                  char v64 = 0;
                  char v65 = 0;
                  unsigned int v66 = 16;
                  unsigned int v62 = 32;
                }
              }
            }
            else
            {
              char v65 = 1;
              unsigned int v66 = 0;
              switch(v63)
              {
                case 4:
                  char v64 = 0;
                  char v65 = 0;
                  unsigned int v66 = 128;
                  unsigned int v62 = 256;
                  break;
                case 5:
                case 6:
                case 7:
                case 9:
                case 10:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 17:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                  break;
                case 8:
                  char v64 = 0;
                  char v65 = 0;
                  unsigned int v62 = 128;
                  unsigned int v66 = 128;
                  break;
                case 16:
                  char v64 = 0;
                  char v65 = 0;
                  unsigned int v66 = 64;
                  unsigned int v62 = 128;
                  break;
                case 32:
                  char v64 = 0;
                  char v65 = 0;
                  unsigned int v62 = 64;
                  unsigned int v66 = 64;
                  break;
                default:
                  if (v63 == 64)
                  {
                    char v64 = 0;
                    char v65 = 0;
                    unsigned int v66 = 32;
                    unsigned int v62 = 64;
                  }
                  break;
              }
            }
            unsigned int v196 = (v62 >> 4) - 1;
            if (v64) {
              unsigned int v197 = 0;
            }
            else {
              unsigned int v197 = 32 - __clz(~(-1 << -(char)__clz(v196)));
            }
            unsigned int v198 = (v66 >> 3) - 1;
            if (v65)
            {
              unsigned int v199 = 0;
              if (v197) {
                goto LABEL_206;
              }
            }
            else
            {
              unsigned int v199 = 32 - __clz(~(-1 << -(char)__clz(v198)));
              if (v199 | v197)
              {
LABEL_206:
                int v200 = 0;
                uint64_t v201 = 0;
                int v202 = v33 & v196;
                int v203 = v18 & v198;
                BOOL v204 = v199 != 0;
                BOOL v205 = v197 != 0;
                int v206 = 1;
                do
                {
                  --v199;
                  if (v204) {
                    v201 |= (unint64_t)(v206 & v203) << v200++;
                  }
                  else {
                    unsigned int v199 = 0;
                  }
                  --v197;
                  if (v205) {
                    v201 |= (unint64_t)(v206 & v202) << v200++;
                  }
                  else {
                    unsigned int v197 = 0;
                  }
                  v206 *= 2;
                  --v200;
                  BOOL v205 = v197 != 0;
                  BOOL v204 = v199 != 0;
                }
                while (v197 | v199);
                goto LABEL_218;
              }
            }
            uint64_t v201 = 0;
LABEL_218:
            unint64_t v50 = ((unint64_t)(v35 / v62 + v227 / v66 * ((v62 + v208) / v62)) << 14) + (v201 << 10);
            goto LABEL_58;
          }
          if (v219)
          {
            int v43 = 0;
            uint64_t v44 = 0;
            int v45 = 1;
            BOOL v46 = v217;
            BOOL v47 = v216;
            __int32 v48 = v218.i32[0];
            __int32 v49 = v218.i32[1];
            do
            {
              --v48;
              if (v46) {
                v44 |= (unint64_t)(v45 & v18) << v43++;
              }
              else {
                __int32 v48 = 0;
              }
              --v49;
              if (v47) {
                v44 |= (unint64_t)(v45 & v33) << v43++;
              }
              else {
                __int32 v49 = 0;
              }
              v45 *= 2;
              --v43;
              BOOL v47 = v49 != 0;
              BOOL v46 = v48 != 0;
            }
            while (v49 | v48);
          }
          else
          {
            uint64_t v44 = 0;
          }
          unint64_t v50 = v44 << 10;
LABEL_58:
          unsigned int v51 = *(_DWORD *)(v28 + 128) >> (*(unsigned char *)(v28 + 144) + a12);
          if (v51 <= 1) {
            unsigned int v51 = 1;
          }
          unsigned int v52 = v51 + 15;
          if (v52 < 0x20) {
            unsigned int v53 = 0;
          }
          else {
            unsigned int v53 = 32 - __clz(~(-1 << -(char)__clz((v52 >> 4) - 1)));
          }
          unsigned int v54 = *(_DWORD *)(v28 + 132) >> (*(unsigned char *)(v28 + 144) + a12);
          if (v54 <= 1) {
            unsigned int v54 = 1;
          }
          unsigned int v55 = v54 + 7;
          if (v55 < 0x10)
          {
            unsigned int v56 = 0;
            if (!v53)
            {
LABEL_80:
              uint64_t v58 = 0;
              goto LABEL_81;
            }
          }
          else
          {
            unsigned int v56 = 32 - __clz(~(-1 << -(char)__clz((v55 >> 3) - 1)));
            if (!(v56 | v53)) {
              goto LABEL_80;
            }
          }
          int v57 = 0;
          uint64_t v58 = 0;
          BOOL v59 = v53 != 0;
          BOOL v60 = v56 != 0;
          int v61 = 1;
          do
          {
            --v53;
            if (v59) {
              v58 |= (unint64_t)(v61 & v33) << v57++;
            }
            else {
              unsigned int v53 = 0;
            }
            --v56;
            if (v60) {
              v58 |= (unint64_t)(v61 & v18) << v57++;
            }
            else {
              unsigned int v56 = 0;
            }
            v61 *= 2;
            --v57;
            BOOL v60 = v56 != 0;
            BOOL v59 = v53 != 0;
          }
          while (v56 | v53);
LABEL_81:
          int v67 = v39 < 0x10 || v40;
          unsigned int v68 = (char *)(a4 + 8 * v58);
          uint64_t v69 = v225 + 8 * (v37 - a7);
          unsigned int v70 = (int8x16_t *)(a2 + v50);
          if (v234 < 8) {
            int v71 = 1;
          }
          else {
            int v71 = v67;
          }
          unsigned int v232 = v70;
          if (v233)
          {
            unsigned int v72 = (int8x16_t *)__dst;
            if (!v71) {
              goto LABEL_93;
            }
            char v73 = v39;
            int v74 = v37;
            memcpy(__dst, v70, sizeof(__dst));
            unsigned int v35 = 16 * v33;
            int v37 = v74;
            LOBYTE(v39) = v73;
            uint64_t v28 = v229;
          }
          else
          {
            unsigned int v72 = v70;
            if (!v71)
            {
LABEL_93:
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock(v69, a11, v72, v68, v39, v234);
              goto LABEL_94;
            }
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE16ELj2ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = v28;
          unsigned int v236 = v72;
          unsigned __int8 v244 = v39;
          unsigned __int8 v245 = v234;
          unsigned int v240 = v215;
          unsigned int v241 = v37 - v35;
          int32x4_t v237 = v68;
          uint64_t v238 = v69;
          uint64_t v239 = a11;
          unsigned int v242 = v226;
          unsigned int v243 = v38;
          if (v40)
          {
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(v28 + 8) + 7384), block);
LABEL_94:
            a7 = v220;
            goto LABEL_186;
          }
          unsigned int v75 = *v68;
          a7 = v220;
          if (v75 == 127)
          {
            float32x4_t v78 = (float32x4_t)v72[1];
            float32x4_t v79 = (float32x4_t)v72[2];
            float32x4_t v80 = (float32x4_t)v72[3];
            float32x4_t v81 = (float32x4_t)v72[4];
            float32x4_t v82 = (float32x4_t)v72[5];
            float32x4_t v83 = (float32x4_t)v72[6];
            float32x4_t v84 = (float32x4_t)v72[7];
            int8x16_t v247 = *v72;
            float32x4_t v248 = v79;
            float32x4_t v255 = v78;
            float32x4_t v256 = v80;
            float32x4_t v263 = v81;
            float32x4_t v264 = v83;
            float32x4_t v271 = v82;
            float32x4_t v272 = v84;
            uint64_t v76 = 128;
          }
          else if (v75 == 3)
          {
            float32x4_t v77 = vld1q_dup_f32((const float *)v72->i32);
            int8x16_t v247 = (int8x16_t)v77;
            float32x4_t v248 = v77;
            float32x4_t v255 = v77;
            float32x4_t v256 = v77;
            float32x4_t v263 = v77;
            float32x4_t v264 = v77;
            float32x4_t v271 = v77;
            float32x4_t v272 = v77;
            uint64_t v76 = 4;
          }
          else if (*v68)
          {
            uint64_t v76 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((int32x4_t *)&v247, 128, (uint64_t)v72, v75);
          }
          else
          {
            uint64_t v76 = 0;
            float32x4_t v248 = 0u;
            int8x16_t v247 = 0u;
            float32x4_t v255 = 0u;
            float32x4_t v256 = 0u;
            float32x4_t v263 = 0u;
            float32x4_t v264 = 0u;
            float32x4_t v271 = 0u;
            float32x4_t v272 = 0u;
          }
          uint64_t v85 = (uint64_t)v72->i64 + v76;
          unsigned int v86 = v68[1];
          if (v86 == 127)
          {
            float32x4_t v89 = *(float32x4_t *)(v85 + 16);
            float32x4_t v90 = *(float32x4_t *)(v85 + 32);
            float32x4_t v91 = *(float32x4_t *)(v85 + 48);
            float32x4_t v92 = *(float32x4_t *)(v85 + 64);
            float32x4_t v93 = *(float32x4_t *)(v85 + 80);
            float32x4_t v94 = *(float32x4_t *)(v85 + 96);
            float32x4_t v95 = *(float32x4_t *)(v85 + 112);
            int32x4_t v249 = *(int32x4_t *)v85;
            float32x4_t v250 = v90;
            float32x4_t v257 = v89;
            float32x4_t v258 = v91;
            float32x4_t v265 = v92;
            float32x4_t v266 = v94;
            float32x4_t v273 = v93;
            float32x4_t v274 = v95;
            uint64_t v87 = 128;
          }
          else if (v86 == 3)
          {
            float32x4_t v88 = vld1q_dup_f32((const float *)v85);
            int32x4_t v249 = (int32x4_t)v88;
            float32x4_t v250 = v88;
            float32x4_t v257 = v88;
            float32x4_t v258 = v88;
            float32x4_t v265 = v88;
            float32x4_t v266 = v88;
            float32x4_t v273 = v88;
            float32x4_t v274 = v88;
            uint64_t v87 = 4;
          }
          else if (v68[1])
          {
            uint64_t v87 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v249, 128, v85, v86);
          }
          else
          {
            uint64_t v87 = 0;
            int32x4_t v249 = 0u;
            float32x4_t v250 = 0u;
            float32x4_t v257 = 0u;
            float32x4_t v258 = 0u;
            float32x4_t v265 = 0u;
            float32x4_t v266 = 0u;
            float32x4_t v273 = 0u;
            float32x4_t v274 = 0u;
          }
          uint64_t v96 = v85 + v87;
          unsigned int v97 = v68[2];
          if (v97 == 127)
          {
            float32x4_t v100 = *(float32x4_t *)(v96 + 16);
            float32x4_t v101 = *(float32x4_t *)(v96 + 32);
            float32x4_t v102 = *(float32x4_t *)(v96 + 48);
            float32x4_t v103 = *(float32x4_t *)(v96 + 64);
            float32x4_t v104 = *(float32x4_t *)(v96 + 80);
            float32x4_t v105 = *(float32x4_t *)(v96 + 96);
            float32x4_t v106 = *(float32x4_t *)(v96 + 112);
            int32x4_t v279 = *(int32x4_t *)v96;
            float32x4_t v280 = v101;
            float32x4_t v287 = v100;
            float32x4_t v288 = v102;
            float32x4_t v295 = v103;
            float32x4_t v296 = v105;
            float32x4_t v303 = v104;
            float32x4_t v304 = v106;
            uint64_t v98 = 128;
          }
          else if (v97 == 3)
          {
            float32x4_t v99 = vld1q_dup_f32((const float *)v96);
            int32x4_t v279 = (int32x4_t)v99;
            float32x4_t v280 = v99;
            float32x4_t v287 = v99;
            float32x4_t v288 = v99;
            float32x4_t v295 = v99;
            float32x4_t v296 = v99;
            float32x4_t v303 = v99;
            float32x4_t v304 = v99;
            uint64_t v98 = 4;
          }
          else if (v68[2])
          {
            uint64_t v98 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v279, 128, v96, v97);
          }
          else
          {
            uint64_t v98 = 0;
            int32x4_t v279 = 0u;
            float32x4_t v280 = 0u;
            float32x4_t v287 = 0u;
            float32x4_t v288 = 0u;
            float32x4_t v295 = 0u;
            float32x4_t v296 = 0u;
            float32x4_t v303 = 0u;
            float32x4_t v304 = 0u;
          }
          uint64_t v107 = v96 + v98;
          unsigned int v108 = v68[3];
          if (v108 == 127)
          {
            float32x4_t v111 = *(float32x4_t *)(v107 + 16);
            float32x4_t v112 = *(float32x4_t *)(v107 + 32);
            float32x4_t v113 = *(float32x4_t *)(v107 + 48);
            float32x4_t v114 = *(float32x4_t *)(v107 + 64);
            float32x4_t v115 = *(float32x4_t *)(v107 + 80);
            float32x4_t v116 = *(float32x4_t *)(v107 + 96);
            float32x4_t v117 = *(float32x4_t *)(v107 + 112);
            int32x4_t v281 = *(int32x4_t *)v107;
            float32x4_t v282 = v112;
            float32x4_t v289 = v111;
            float32x4_t v290 = v113;
            float32x4_t v297 = v114;
            float32x4_t v298 = v116;
            float32x4_t v305 = v115;
            float32x4_t v306 = v117;
            uint64_t v109 = 128;
          }
          else if (v108 == 3)
          {
            float32x4_t v110 = vld1q_dup_f32((const float *)v107);
            int32x4_t v281 = (int32x4_t)v110;
            float32x4_t v282 = v110;
            float32x4_t v289 = v110;
            float32x4_t v290 = v110;
            float32x4_t v297 = v110;
            float32x4_t v298 = v110;
            float32x4_t v305 = v110;
            float32x4_t v306 = v110;
            uint64_t v109 = 4;
          }
          else if (v68[3])
          {
            uint64_t v109 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v281, 128, v107, v108);
          }
          else
          {
            uint64_t v109 = 0;
            int32x4_t v281 = 0u;
            float32x4_t v282 = 0u;
            float32x4_t v289 = 0u;
            float32x4_t v290 = 0u;
            float32x4_t v297 = 0u;
            float32x4_t v298 = 0u;
            float32x4_t v305 = 0u;
            float32x4_t v306 = 0u;
          }
          uint64_t v118 = v107 + v109;
          unsigned int v119 = v68[4];
          if (v119 == 127)
          {
            float32x4_t v122 = *(float32x4_t *)(v118 + 16);
            float32x4_t v123 = *(float32x4_t *)(v118 + 32);
            float32x4_t v124 = *(float32x4_t *)(v118 + 48);
            float32x4_t v125 = *(float32x4_t *)(v118 + 64);
            float32x4_t v126 = *(float32x4_t *)(v118 + 80);
            float32x4_t v127 = *(float32x4_t *)(v118 + 96);
            float32x4_t v128 = *(float32x4_t *)(v118 + 112);
            int32x4_t v251 = *(int32x4_t *)v118;
            float32x4_t v252 = v123;
            float32x4_t v259 = v122;
            float32x4_t v260 = v124;
            float32x4_t v267 = v125;
            float32x4_t v268 = v127;
            float32x4_t v275 = v126;
            float32x4_t v276 = v128;
            uint64_t v120 = 128;
          }
          else if (v119 == 3)
          {
            float32x4_t v121 = vld1q_dup_f32((const float *)v118);
            int32x4_t v251 = (int32x4_t)v121;
            float32x4_t v252 = v121;
            float32x4_t v259 = v121;
            float32x4_t v260 = v121;
            float32x4_t v267 = v121;
            float32x4_t v268 = v121;
            float32x4_t v275 = v121;
            float32x4_t v276 = v121;
            uint64_t v120 = 4;
          }
          else if (v68[4])
          {
            uint64_t v120 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v251, 128, v118, v119);
          }
          else
          {
            uint64_t v120 = 0;
            int32x4_t v251 = 0u;
            float32x4_t v252 = 0u;
            float32x4_t v259 = 0u;
            float32x4_t v260 = 0u;
            float32x4_t v267 = 0u;
            float32x4_t v268 = 0u;
            float32x4_t v275 = 0u;
            float32x4_t v276 = 0u;
          }
          uint64_t v129 = v118 + v120;
          unsigned int v130 = v68[5];
          if (v130 == 127)
          {
            float32x4_t v133 = *(float32x4_t *)(v129 + 16);
            float32x4_t v134 = *(float32x4_t *)(v129 + 32);
            float32x4_t v135 = *(float32x4_t *)(v129 + 48);
            float32x4_t v136 = *(float32x4_t *)(v129 + 64);
            float32x4_t v137 = *(float32x4_t *)(v129 + 80);
            float32x4_t v138 = *(float32x4_t *)(v129 + 96);
            float32x4_t v139 = *(float32x4_t *)(v129 + 112);
            int32x4_t v253 = *(int32x4_t *)v129;
            float32x4_t v254 = v134;
            float32x4_t v261 = v133;
            float32x4_t v262 = v135;
            float32x4_t v269 = v136;
            float32x4_t v270 = v138;
            float32x4_t v277 = v137;
            float32x4_t v278 = v139;
            uint64_t v131 = 128;
          }
          else if (v130 == 3)
          {
            float32x4_t v132 = vld1q_dup_f32((const float *)v129);
            int32x4_t v253 = (int32x4_t)v132;
            float32x4_t v254 = v132;
            float32x4_t v261 = v132;
            float32x4_t v262 = v132;
            float32x4_t v269 = v132;
            float32x4_t v270 = v132;
            float32x4_t v277 = v132;
            float32x4_t v278 = v132;
            uint64_t v131 = 4;
          }
          else if (v68[5])
          {
            uint64_t v131 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v253, 128, v129, v130);
          }
          else
          {
            uint64_t v131 = 0;
            int32x4_t v253 = 0u;
            float32x4_t v254 = 0u;
            float32x4_t v261 = 0u;
            float32x4_t v262 = 0u;
            float32x4_t v269 = 0u;
            float32x4_t v270 = 0u;
            float32x4_t v277 = 0u;
            float32x4_t v278 = 0u;
          }
          uint64_t v140 = v129 + v131;
          unsigned int v141 = v68[6];
          if (v141 == 127)
          {
            float32x4_t v144 = *(float32x4_t *)(v140 + 16);
            float32x4_t v145 = *(float32x4_t *)(v140 + 32);
            float32x4_t v146 = *(float32x4_t *)(v140 + 48);
            float32x4_t v147 = *(float32x4_t *)(v140 + 64);
            float32x4_t v148 = *(float32x4_t *)(v140 + 80);
            float32x4_t v149 = *(float32x4_t *)(v140 + 96);
            float32x4_t v150 = *(float32x4_t *)(v140 + 112);
            int32x4_t v283 = *(int32x4_t *)v140;
            float32x4_t v284 = v145;
            float32x4_t v291 = v144;
            float32x4_t v292 = v146;
            float32x4_t v299 = v147;
            float32x4_t v300 = v149;
            float32x4_t v307 = v148;
            float32x4_t v308 = v150;
            uint64_t v142 = 128;
          }
          else if (v141 == 3)
          {
            float32x4_t v143 = vld1q_dup_f32((const float *)v140);
            int32x4_t v283 = (int32x4_t)v143;
            float32x4_t v284 = v143;
            float32x4_t v291 = v143;
            float32x4_t v292 = v143;
            float32x4_t v299 = v143;
            float32x4_t v300 = v143;
            float32x4_t v307 = v143;
            float32x4_t v308 = v143;
            uint64_t v142 = 4;
          }
          else if (v68[6])
          {
            uint64_t v142 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v283, 128, v140, v141);
          }
          else
          {
            uint64_t v142 = 0;
            int32x4_t v283 = 0u;
            float32x4_t v284 = 0u;
            float32x4_t v291 = 0u;
            float32x4_t v292 = 0u;
            float32x4_t v299 = 0u;
            float32x4_t v300 = 0u;
            float32x4_t v307 = 0u;
            float32x4_t v308 = 0u;
          }
          uint64_t v151 = v140 + v142;
          unsigned int v152 = v68[7];
          if (v152 == 127)
          {
            float32x4_t v155 = *(float32x4_t *)(v151 + 16);
            float32x4_t v156 = *(float32x4_t *)(v151 + 32);
            float32x4_t v157 = *(float32x4_t *)(v151 + 48);
            float32x4_t v158 = *(float32x4_t *)(v151 + 80);
            float32x4_t v159 = *(float32x4_t *)(v151 + 96);
            float32x4_t v160 = *(float32x4_t *)(v151 + 112);
            float32x4_t v161 = *(float32x4_t *)(v151 + 64);
            int32x4_t v285 = *(int32x4_t *)v151;
            float32x4_t v286 = v156;
            float32x4_t v293 = v155;
            float32x4_t v294 = v157;
            float32x4_t v301 = v161;
            float32x4_t v302 = v159;
            float32x4_t v309 = v158;
            float32x4_t v310 = v160;
            uint64_t v153 = v242;
            if (!v242) {
              goto LABEL_185;
            }
          }
          else if (v152 == 3)
          {
            float32x4_t v154 = vld1q_dup_f32((const float *)v151);
            int32x4_t v285 = (int32x4_t)v154;
            float32x4_t v286 = v154;
            float32x4_t v293 = v154;
            float32x4_t v294 = v154;
            float32x4_t v301 = v154;
            float32x4_t v302 = v154;
            float32x4_t v309 = v154;
            float32x4_t v310 = v154;
            uint64_t v153 = v242;
            if (!v242) {
              goto LABEL_185;
            }
          }
          else if (v68[7])
          {
            AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v285, 128, v151, v152);
            uint64_t v153 = v242;
            if (!v242) {
              goto LABEL_185;
            }
          }
          else
          {
            int32x4_t v285 = 0u;
            float32x4_t v286 = 0u;
            float32x4_t v293 = 0u;
            float32x4_t v294 = 0u;
            float32x4_t v301 = 0u;
            float32x4_t v302 = 0u;
            float32x4_t v309 = 0u;
            float32x4_t v310 = 0u;
            uint64_t v153 = v242;
            if (!v242) {
              goto LABEL_185;
            }
          }
          if (v243)
          {
            uint64_t v162 = 0;
            unint64_t v163 = (unint64_t)v240 << 7;
            uint64_t v164 = 8 * v241;
            unsigned int v165 = &v247.i8[v163 + v164];
            uint64_t v166 = v238;
            uint64_t v167 = v239;
            unint64_t v168 = 8 * v243;
            if (v168 <= 1) {
              unint64_t v169 = 1;
            }
            else {
              unint64_t v169 = 8 * v243;
            }
            unint64_t v170 = v163 + v164;
            float32x4_t v171 = &v247.i8[v163 + v164];
            if (v169) {
              BOOL v172 = (v169 - 1) >> 32 == 0;
            }
            else {
              BOOL v172 = 0;
            }
            char v173 = !v172;
            uint64_t v174 = v169 & 0x7FFFFFFE0;
            uint64_t v175 = v169 & 0x7FFFFFFF8;
            unsigned int v176 = (char *)&v248 + v170;
            uint64_t v177 = (long long *)(v238 + 16);
            float32x4_t v178 = v165;
            uint64_t v179 = v238;
            do
            {
              float32x4_t v180 = (char *)(v166 + v167 * v162);
              float32x4_t v181 = &v165[128 * v162];
              if ((unint64_t)(&v171[128 * v162] - v180) < 0x20) {
                char v182 = 1;
              }
              else {
                char v182 = v173;
              }
              if (v182)
              {
                int v183 = 0;
                goto LABEL_182;
              }
              if (v169 >= 0x20)
              {
                float32x4_t v185 = v177;
                uint64_t v186 = v176;
                uint64_t v187 = v169 & 0x7FFFFFFE0;
                do
                {
                  long long v188 = *v185;
                  *(v186 - 1) = *(v185 - 1);
                  *uint64_t v186 = v188;
                  v186 += 2;
                  v185 += 2;
                  v187 -= 32;
                }
                while (v187);
                if (v169 == v174) {
                  goto LABEL_165;
                }
                uint64_t v184 = v169 & 0x7FFFFFFE0;
                if ((v169 & 0x18) == 0)
                {
                  v180 += v174;
                  v181 += v174;
                  int v183 = v169 & 0xFFFFFFE0;
                  goto LABEL_182;
                }
              }
              else
              {
                uint64_t v184 = 0;
              }
              v181 += v175;
              unint64_t v189 = v184 - (v169 & 0x7FFFFFFF8);
              float32x4_t v190 = (uint64_t *)(v179 + v184);
              float32x4_t v191 = &v178[v184];
              do
              {
                uint64_t v192 = *v190++;
                *(void *)float32x4_t v191 = v192;
                v191 += 8;
                v189 += 8;
              }
              while (v189);
              if (v169 == v175) {
                goto LABEL_165;
              }
              v180 += v175;
              int v183 = v169 & 0xFFFFFFF8;
LABEL_182:
              unsigned int v193 = v183 + 1;
              do
              {
                char v194 = *v180++;
                *v181++ = v194;
              }
              while (v168 > v193++);
LABEL_165:
              ++v162;
              v176 += 128;
              uint64_t v177 = (long long *)((char *)v177 + v167);
              v179 += v167;
              v178 += 128;
            }
            while (v162 != v153);
          }
LABEL_185:
          AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((uint64_t)&v247, 128, v236, v237, v244, v245);
LABEL_186:
          uint64_t result = v232;
          if (v233) {
            uint64_t result = memcpy(v232, v72, 0x400uLL);
          }
          BOOL v23 = v33++ == v221 >> 4;
          uint64_t v28 = v229;
        }
        while (!v23);
        BOOL v23 = v18++ == v214;
      }
      while (!v23);
    }
  }
  return result;
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, int a12)
{
  uint64_t v352 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v270 = a8;
  unsigned int v16 = a8 >> 3;
  unsigned int v253 = a8 + a10 - 1;
  unsigned int v255 = v253 >> 3;
  unsigned int v17 = *(unsigned __int8 *)(*(void *)(a1 + 208) + 88);
  unsigned int v18 = *(_DWORD *)(a1 + 112);
  uint64_t v272 = a1;
  if (*(void *)(a1 + 168)) {
    int v19 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v19 = 0;
  }
  BOOL v20 = (v19 & 0xD00) == 0 || v19 == 768;
  int v21 = v19 & 0xE00;
  int v23 = !v20 && v21 != 1024;
  int v275 = v23;
  BOOL isLevelTiled = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::isLevelTiled(a1, *(_DWORD *)(a1 + 144) + a12);
  uint64_t v25 = a1;
  BOOL v264 = isLevelTiled;
  if (v16 <= v255)
  {
    unsigned int v263 = a7 + a9 - 1;
    if (a7 >> 4 <= v263 >> 4)
    {
      unsigned int v250 = a5 - 1;
      unsigned int v274 = (a5 - 1) >> 4;
      int v273 = ((a5 - 1) & 0xF) + 1;
      int v251 = ((a6 - 1) & 7) + 1;
      unsigned int v252 = (a6 - 1) >> 3;
      uint32x2_t v26 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0xF00000007);
      int8x8_t v27 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32(vadd_s32((int32x2_t)vshl_u32(v26, (uint32x2_t)0xFFFFFFFCFFFFFFFDLL), (int32x2_t)-1))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x2000000010, v26));
      __int32 v262 = v27.i32[0] | v27.i32[1];
      int8x8_t v260 = v27;
      BOOL v259 = v27.i32[0] != 0;
      BOOL v258 = v27.i32[1] != 0;
      unint64_t v249 = 8 * v18 * (unint64_t)v17;
      uint64_t v28 = a11;
      uint64_t v29 = 2 * a11;
      do
      {
        unsigned int v30 = (8 * v16) | 7;
        if (8 * v16 <= v270) {
          int v31 = v270;
        }
        else {
          int v31 = 8 * v16;
        }
        unsigned int v32 = a7 >> 4;
        if (v253 < v30) {
          unsigned int v30 = v253;
        }
        unsigned int v269 = 8 * v16;
        int v257 = v31 - 8 * v16;
        int v268 = v30 - v31 + 1;
        if (v16 == v252) {
          unsigned int v33 = v251;
        }
        else {
          unsigned int v33 = 8;
        }
        uint64_t v267 = a3 + (v31 - v270) * v28;
        unsigned int v34 = a7;
        unsigned int v256 = v33;
        do
        {
          unsigned int v35 = 16 * v32;
          unsigned int v36 = 16 * (v32 + 1) - 1;
          if (16 * v32 <= v34) {
            int v37 = v34;
          }
          else {
            int v37 = 16 * v32;
          }
          if (v263 < v36) {
            unsigned int v36 = a7 + a9 - 1;
          }
          int v38 = v36 - v37 + 1;
          if (v32 == v274) {
            unsigned int v39 = v273;
          }
          else {
            unsigned int v39 = 16;
          }
          BOOL v40 = 1;
          if (v269 >= v270 && v35 >= v34)
          {
            int v41 = v273;
            if (v32 != v274) {
              int v41 = 16;
            }
            BOOL v40 = v38 != v41 || v268 != v33;
          }
          if (v264)
          {
            unsigned int v62 = 0;
            uint64_t v63 = v249 >> (*(unsigned char *)(v25 + 57) != 0);
            char v64 = 1;
            if (v63 > 127)
            {
              if (v63 > 511)
              {
                if (v63 == 512)
                {
                  char v65 = 0;
                  unsigned int v62 = 16;
                  unsigned int v66 = 16;
                }
                else
                {
                  char v65 = 1;
                  unsigned int v66 = 0;
                  if (v63 == 1024)
                  {
                    unsigned int v66 = 8;
                    unsigned int v62 = 16;
                  }
                }
              }
              else if (v63 == 128)
              {
                char v64 = 0;
                char v65 = 0;
                unsigned int v62 = 32;
                unsigned int v66 = 32;
              }
              else
              {
                char v65 = 1;
                unsigned int v66 = 0;
                if (v63 == 256)
                {
                  char v64 = 0;
                  char v65 = 0;
                  unsigned int v66 = 16;
                  unsigned int v62 = 32;
                }
              }
            }
            else
            {
              char v65 = 1;
              unsigned int v66 = 0;
              switch(v63)
              {
                case 4:
                  char v64 = 0;
                  char v65 = 0;
                  unsigned int v66 = 128;
                  unsigned int v62 = 256;
                  break;
                case 5:
                case 6:
                case 7:
                case 9:
                case 10:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 17:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                  break;
                case 8:
                  char v64 = 0;
                  char v65 = 0;
                  unsigned int v62 = 128;
                  unsigned int v66 = 128;
                  break;
                case 16:
                  char v64 = 0;
                  char v65 = 0;
                  unsigned int v66 = 64;
                  unsigned int v62 = 128;
                  break;
                case 32:
                  char v64 = 0;
                  char v65 = 0;
                  unsigned int v62 = 64;
                  unsigned int v66 = 64;
                  break;
                default:
                  if (v63 == 64)
                  {
                    char v64 = 0;
                    char v65 = 0;
                    unsigned int v66 = 32;
                    unsigned int v62 = 64;
                  }
                  break;
              }
            }
            unsigned int v238 = (v62 >> 4) - 1;
            if (v64) {
              unsigned int v239 = 0;
            }
            else {
              unsigned int v239 = 32 - __clz(~(-1 << -(char)__clz(v238)));
            }
            unsigned int v240 = (v66 >> 3) - 1;
            if (v65)
            {
              unsigned int v241 = 0;
              if (v239) {
                goto LABEL_232;
              }
            }
            else
            {
              unsigned int v241 = 32 - __clz(~(-1 << -(char)__clz(v240)));
              if (v241 | v239)
              {
LABEL_232:
                int v242 = 0;
                uint64_t v243 = 0;
                int v244 = v32 & v238;
                int v245 = v16 & v240;
                BOOL v246 = v241 != 0;
                BOOL v247 = v239 != 0;
                int v248 = 1;
                do
                {
                  --v241;
                  if (v246) {
                    v243 |= (unint64_t)(v248 & v245) << v242++;
                  }
                  else {
                    unsigned int v241 = 0;
                  }
                  --v239;
                  if (v247) {
                    v243 |= (unint64_t)(v248 & v244) << v242++;
                  }
                  else {
                    unsigned int v239 = 0;
                  }
                  v248 *= 2;
                  --v242;
                  BOOL v247 = v239 != 0;
                  BOOL v246 = v241 != 0;
                }
                while (v239 | v241);
                goto LABEL_244;
              }
            }
            uint64_t v243 = 0;
LABEL_244:
            unint64_t v50 = ((unint64_t)(v35 / v62 + v269 / v66 * ((v62 + v250) / v62)) << 14) + (v243 << 10);
            goto LABEL_60;
          }
          if (v262)
          {
            int v43 = 0;
            uint64_t v44 = 0;
            int v45 = 1;
            BOOL v46 = v259;
            BOOL v47 = v258;
            __int32 v48 = v260.i32[0];
            __int32 v49 = v260.i32[1];
            do
            {
              --v48;
              if (v46) {
                v44 |= (unint64_t)(v45 & v16) << v43++;
              }
              else {
                __int32 v48 = 0;
              }
              --v49;
              if (v47) {
                v44 |= (unint64_t)(v45 & v32) << v43++;
              }
              else {
                __int32 v49 = 0;
              }
              v45 *= 2;
              --v43;
              BOOL v47 = v49 != 0;
              BOOL v46 = v48 != 0;
            }
            while (v49 | v48);
          }
          else
          {
            uint64_t v44 = 0;
          }
          unint64_t v50 = v44 << 10;
LABEL_60:
          unsigned int v51 = *(_DWORD *)(v25 + 128) >> (*(unsigned char *)(v25 + 144) + a12);
          if (v51 <= 1) {
            unsigned int v51 = 1;
          }
          unsigned int v52 = v51 + 15;
          if (v52 < 0x20) {
            unsigned int v53 = 0;
          }
          else {
            unsigned int v53 = 32 - __clz(~(-1 << -(char)__clz((v52 >> 4) - 1)));
          }
          unsigned int v54 = *(_DWORD *)(v25 + 132) >> (*(unsigned char *)(v25 + 144) + a12);
          if (v54 <= 1) {
            unsigned int v54 = 1;
          }
          unsigned int v55 = v54 + 7;
          if (v55 < 0x10)
          {
            unsigned int v56 = 0;
            if (!v53)
            {
LABEL_82:
              uint64_t v58 = 0;
              goto LABEL_83;
            }
          }
          else
          {
            unsigned int v56 = 32 - __clz(~(-1 << -(char)__clz((v55 >> 3) - 1)));
            if (!(v56 | v53)) {
              goto LABEL_82;
            }
          }
          int v57 = 0;
          uint64_t v58 = 0;
          BOOL v59 = v53 != 0;
          BOOL v60 = v56 != 0;
          int v61 = 1;
          do
          {
            --v53;
            if (v59) {
              v58 |= (unint64_t)(v61 & v32) << v57++;
            }
            else {
              unsigned int v53 = 0;
            }
            --v56;
            if (v60) {
              v58 |= (unint64_t)(v61 & v16) << v57++;
            }
            else {
              unsigned int v56 = 0;
            }
            v61 *= 2;
            --v57;
            BOOL v60 = v56 != 0;
            BOOL v59 = v53 != 0;
          }
          while (v56 | v53);
LABEL_83:
          unsigned int v67 = v37 - v34;
          int v68 = v39 < 0x10 || v40;
          uint64_t v69 = (char *)(a4 + 8 * v58);
          uint64_t v70 = v267 + 8 * v67;
          int v71 = (int32x4_t *)(a2 + v50);
          if (v33 < 8) {
            int v72 = 1;
          }
          else {
            int v72 = v68;
          }
          if (v275)
          {
            if (v72)
            {
              char v73 = v71;
              int v74 = v38;
              BOOL v75 = v40;
              memcpy(v287, v71, sizeof(v287));
              BOOL v40 = v75;
              unsigned int v35 = 16 * v32;
              int v38 = v74;
              uint64_t v28 = a11;
              unsigned int v33 = v256;
              uint64_t v76 = (int32x4_t *)v287;
              int v71 = v73;
              uint64_t v25 = v272;
LABEL_93:
              __dst = v71;
              block[0] = MEMORY[0x263EF8330];
              block[1] = 3221225472;
              block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE16ELj2ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
              block[3] = &__block_descriptor_90_e5_v8__0l;
              block[4] = v25;
              float32x4_t v277 = v76;
              unsigned __int8 v285 = v39;
              unsigned __int8 v286 = v33;
              unsigned int v281 = v257;
              unsigned int v282 = v37 - v35;
              float32x4_t v278 = v69;
              uint64_t v279 = v70;
              uint64_t v280 = v28;
              unsigned int v283 = v268;
              unsigned int v284 = v38;
              if (v40)
              {
                dispatch_sync(*(dispatch_queue_t *)(*(void *)(v25 + 8) + 7384), block);
                uint64_t v25 = v272;
                unsigned int v34 = a7;
                uint64_t v29 = 2 * a11;
                goto LABEL_95;
              }
              unsigned int v97 = *v69;
              if (v97 == 127)
              {
                float32x4_t v100 = (float32x4_t)v76[1];
                float32x4_t v101 = (float32x4_t)v76[2];
                float32x4_t v102 = (float32x4_t)v76[3];
                float32x4_t v103 = (float32x4_t)v76[4];
                float32x4_t v104 = (float32x4_t)v76[5];
                float32x4_t v105 = (float32x4_t)v76[6];
                float32x4_t v106 = (float32x4_t)v76[7];
                int32x4_t v288 = *v76;
                float32x4_t v289 = v101;
                float32x4_t v296 = v100;
                float32x4_t v297 = v102;
                float32x4_t v304 = v103;
                float32x4_t v305 = v105;
                float32x4_t v312 = v104;
                float32x4_t v313 = v106;
                uint64_t v98 = 128;
              }
              else if (v97 == 3)
              {
                float32x4_t v99 = vld1q_dup_f32((const float *)v76->i32);
                int32x4_t v288 = (int32x4_t)v99;
                float32x4_t v289 = v99;
                float32x4_t v296 = v99;
                float32x4_t v297 = v99;
                float32x4_t v304 = v99;
                float32x4_t v305 = v99;
                float32x4_t v312 = v99;
                float32x4_t v313 = v99;
                uint64_t v98 = 4;
              }
              else if (*v69)
              {
                uint64_t v98 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v288, 128, (uint64_t)v76, v97);
              }
              else
              {
                uint64_t v98 = 0;
                float32x4_t v289 = 0u;
                int32x4_t v288 = 0u;
                float32x4_t v296 = 0u;
                float32x4_t v297 = 0u;
                float32x4_t v304 = 0u;
                float32x4_t v305 = 0u;
                float32x4_t v312 = 0u;
                float32x4_t v313 = 0u;
              }
              uint64_t v107 = (uint64_t)v76->i64 + v98;
              unsigned int v108 = v69[1];
              if (v108 == 127)
              {
                float32x4_t v111 = *(float32x4_t *)(v107 + 16);
                float32x4_t v112 = *(float32x4_t *)(v107 + 32);
                float32x4_t v113 = *(float32x4_t *)(v107 + 48);
                float32x4_t v114 = *(float32x4_t *)(v107 + 64);
                float32x4_t v115 = *(float32x4_t *)(v107 + 80);
                float32x4_t v116 = *(float32x4_t *)(v107 + 96);
                float32x4_t v117 = *(float32x4_t *)(v107 + 112);
                int32x4_t v290 = *(int32x4_t *)v107;
                float32x4_t v291 = v112;
                float32x4_t v298 = v111;
                float32x4_t v299 = v113;
                float32x4_t v306 = v114;
                float32x4_t v307 = v116;
                float32x4_t v314 = v115;
                float32x4_t v315 = v117;
                uint64_t v109 = 128;
              }
              else if (v108 == 3)
              {
                float32x4_t v110 = vld1q_dup_f32((const float *)v107);
                int32x4_t v290 = (int32x4_t)v110;
                float32x4_t v291 = v110;
                float32x4_t v298 = v110;
                float32x4_t v299 = v110;
                float32x4_t v306 = v110;
                float32x4_t v307 = v110;
                float32x4_t v314 = v110;
                float32x4_t v315 = v110;
                uint64_t v109 = 4;
              }
              else if (v69[1])
              {
                uint64_t v109 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v290, 128, v107, v108);
              }
              else
              {
                uint64_t v109 = 0;
                int32x4_t v290 = 0u;
                float32x4_t v291 = 0u;
                float32x4_t v298 = 0u;
                float32x4_t v299 = 0u;
                float32x4_t v306 = 0u;
                float32x4_t v307 = 0u;
                float32x4_t v314 = 0u;
                float32x4_t v315 = 0u;
              }
              uint64_t v118 = v107 + v109;
              unsigned int v119 = v69[2];
              if (v119 == 127)
              {
                float32x4_t v122 = *(float32x4_t *)(v118 + 16);
                float32x4_t v123 = *(float32x4_t *)(v118 + 32);
                float32x4_t v124 = *(float32x4_t *)(v118 + 48);
                float32x4_t v125 = *(float32x4_t *)(v118 + 64);
                float32x4_t v126 = *(float32x4_t *)(v118 + 80);
                float32x4_t v127 = *(float32x4_t *)(v118 + 96);
                float32x4_t v128 = *(float32x4_t *)(v118 + 112);
                int32x4_t v320 = *(int32x4_t *)v118;
                float32x4_t v321 = v123;
                float32x4_t v328 = v122;
                float32x4_t v329 = v124;
                float32x4_t v336 = v125;
                float32x4_t v337 = v127;
                float32x4_t v344 = v126;
                float32x4_t v345 = v128;
                uint64_t v120 = 128;
              }
              else if (v119 == 3)
              {
                float32x4_t v121 = vld1q_dup_f32((const float *)v118);
                int32x4_t v320 = (int32x4_t)v121;
                float32x4_t v321 = v121;
                float32x4_t v328 = v121;
                float32x4_t v329 = v121;
                float32x4_t v336 = v121;
                float32x4_t v337 = v121;
                float32x4_t v344 = v121;
                float32x4_t v345 = v121;
                uint64_t v120 = 4;
              }
              else if (v69[2])
              {
                uint64_t v120 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v320, 128, v118, v119);
              }
              else
              {
                uint64_t v120 = 0;
                int32x4_t v320 = 0u;
                float32x4_t v321 = 0u;
                float32x4_t v328 = 0u;
                float32x4_t v329 = 0u;
                float32x4_t v336 = 0u;
                float32x4_t v337 = 0u;
                float32x4_t v344 = 0u;
                float32x4_t v345 = 0u;
              }
              uint64_t v129 = v118 + v120;
              unsigned int v130 = v69[3];
              if (v130 == 127)
              {
                float32x4_t v133 = *(float32x4_t *)(v129 + 16);
                float32x4_t v134 = *(float32x4_t *)(v129 + 32);
                float32x4_t v135 = *(float32x4_t *)(v129 + 48);
                float32x4_t v136 = *(float32x4_t *)(v129 + 64);
                float32x4_t v137 = *(float32x4_t *)(v129 + 80);
                float32x4_t v138 = *(float32x4_t *)(v129 + 96);
                float32x4_t v139 = *(float32x4_t *)(v129 + 112);
                int32x4_t v322 = *(int32x4_t *)v129;
                float32x4_t v323 = v134;
                float32x4_t v330 = v133;
                float32x4_t v331 = v135;
                float32x4_t v338 = v136;
                float32x4_t v339 = v138;
                float32x4_t v346 = v137;
                float32x4_t v347 = v139;
                uint64_t v131 = 128;
              }
              else if (v130 == 3)
              {
                float32x4_t v132 = vld1q_dup_f32((const float *)v129);
                int32x4_t v322 = (int32x4_t)v132;
                float32x4_t v323 = v132;
                float32x4_t v330 = v132;
                float32x4_t v331 = v132;
                float32x4_t v338 = v132;
                float32x4_t v339 = v132;
                float32x4_t v346 = v132;
                float32x4_t v347 = v132;
                uint64_t v131 = 4;
              }
              else if (v69[3])
              {
                uint64_t v131 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v322, 128, v129, v130);
              }
              else
              {
                uint64_t v131 = 0;
                int32x4_t v322 = 0u;
                float32x4_t v323 = 0u;
                float32x4_t v330 = 0u;
                float32x4_t v331 = 0u;
                float32x4_t v338 = 0u;
                float32x4_t v339 = 0u;
                float32x4_t v346 = 0u;
                float32x4_t v347 = 0u;
              }
              uint64_t v140 = v129 + v131;
              unsigned int v141 = v69[4];
              if (v141 == 127)
              {
                float32x4_t v144 = *(float32x4_t *)(v140 + 16);
                float32x4_t v145 = *(float32x4_t *)(v140 + 32);
                float32x4_t v146 = *(float32x4_t *)(v140 + 48);
                float32x4_t v147 = *(float32x4_t *)(v140 + 64);
                float32x4_t v148 = *(float32x4_t *)(v140 + 80);
                float32x4_t v149 = *(float32x4_t *)(v140 + 96);
                float32x4_t v150 = *(float32x4_t *)(v140 + 112);
                int32x4_t v292 = *(int32x4_t *)v140;
                float32x4_t v293 = v145;
                float32x4_t v300 = v144;
                float32x4_t v301 = v146;
                float32x4_t v308 = v147;
                float32x4_t v309 = v149;
                float32x4_t v316 = v148;
                float32x4_t v317 = v150;
                uint64_t v142 = 128;
              }
              else if (v141 == 3)
              {
                float32x4_t v143 = vld1q_dup_f32((const float *)v140);
                int32x4_t v292 = (int32x4_t)v143;
                float32x4_t v293 = v143;
                float32x4_t v300 = v143;
                float32x4_t v301 = v143;
                float32x4_t v308 = v143;
                float32x4_t v309 = v143;
                float32x4_t v316 = v143;
                float32x4_t v317 = v143;
                uint64_t v142 = 4;
              }
              else if (v69[4])
              {
                uint64_t v142 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v292, 128, v140, v141);
              }
              else
              {
                uint64_t v142 = 0;
                int32x4_t v292 = 0u;
                float32x4_t v293 = 0u;
                float32x4_t v300 = 0u;
                float32x4_t v301 = 0u;
                float32x4_t v308 = 0u;
                float32x4_t v309 = 0u;
                float32x4_t v316 = 0u;
                float32x4_t v317 = 0u;
              }
              uint64_t v151 = v140 + v142;
              unsigned int v152 = v69[5];
              if (v152 == 127)
              {
                float32x4_t v155 = *(float32x4_t *)(v151 + 16);
                float32x4_t v156 = *(float32x4_t *)(v151 + 32);
                float32x4_t v157 = *(float32x4_t *)(v151 + 48);
                float32x4_t v158 = *(float32x4_t *)(v151 + 64);
                float32x4_t v159 = *(float32x4_t *)(v151 + 80);
                float32x4_t v160 = *(float32x4_t *)(v151 + 96);
                float32x4_t v161 = *(float32x4_t *)(v151 + 112);
                int32x4_t v294 = *(int32x4_t *)v151;
                float32x4_t v295 = v156;
                float32x4_t v302 = v155;
                float32x4_t v303 = v157;
                float32x4_t v310 = v158;
                float32x4_t v311 = v160;
                float32x4_t v318 = v159;
                float32x4_t v319 = v161;
                uint64_t v153 = 128;
              }
              else if (v152 == 3)
              {
                float32x4_t v154 = vld1q_dup_f32((const float *)v151);
                int32x4_t v294 = (int32x4_t)v154;
                float32x4_t v295 = v154;
                float32x4_t v302 = v154;
                float32x4_t v303 = v154;
                float32x4_t v310 = v154;
                float32x4_t v311 = v154;
                float32x4_t v318 = v154;
                float32x4_t v319 = v154;
                uint64_t v153 = 4;
              }
              else if (v69[5])
              {
                uint64_t v153 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v294, 128, v151, v152);
              }
              else
              {
                uint64_t v153 = 0;
                int32x4_t v294 = 0u;
                float32x4_t v295 = 0u;
                float32x4_t v302 = 0u;
                float32x4_t v303 = 0u;
                float32x4_t v310 = 0u;
                float32x4_t v311 = 0u;
                float32x4_t v318 = 0u;
                float32x4_t v319 = 0u;
              }
              uint64_t v162 = v151 + v153;
              unsigned int v163 = v69[6];
              if (v163 == 127)
              {
                float32x4_t v166 = *(float32x4_t *)(v162 + 16);
                float32x4_t v167 = *(float32x4_t *)(v162 + 32);
                float32x4_t v168 = *(float32x4_t *)(v162 + 48);
                float32x4_t v169 = *(float32x4_t *)(v162 + 64);
                float32x4_t v170 = *(float32x4_t *)(v162 + 80);
                float32x4_t v171 = *(float32x4_t *)(v162 + 96);
                float32x4_t v172 = *(float32x4_t *)(v162 + 112);
                int32x4_t v324 = *(int32x4_t *)v162;
                float32x4_t v325 = v167;
                float32x4_t v332 = v166;
                float32x4_t v333 = v168;
                float32x4_t v340 = v169;
                float32x4_t v341 = v171;
                float32x4_t v348 = v170;
                float32x4_t v349 = v172;
                uint64_t v164 = 128;
              }
              else if (v163 == 3)
              {
                float32x4_t v165 = vld1q_dup_f32((const float *)v162);
                int32x4_t v324 = (int32x4_t)v165;
                float32x4_t v325 = v165;
                float32x4_t v332 = v165;
                float32x4_t v333 = v165;
                float32x4_t v340 = v165;
                float32x4_t v341 = v165;
                float32x4_t v348 = v165;
                float32x4_t v349 = v165;
                uint64_t v164 = 4;
              }
              else if (v69[6])
              {
                uint64_t v164 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v324, 128, v162, v163);
              }
              else
              {
                uint64_t v164 = 0;
                int32x4_t v324 = 0u;
                float32x4_t v325 = 0u;
                float32x4_t v332 = 0u;
                float32x4_t v333 = 0u;
                float32x4_t v340 = 0u;
                float32x4_t v341 = 0u;
                float32x4_t v348 = 0u;
                float32x4_t v349 = 0u;
              }
              uint64_t v173 = v162 + v164;
              unsigned int v174 = v69[7];
              if (v174 == 127)
              {
                float32x4_t v177 = *(float32x4_t *)(v173 + 16);
                float32x4_t v178 = *(float32x4_t *)(v173 + 32);
                float32x4_t v179 = *(float32x4_t *)(v173 + 48);
                float32x4_t v180 = *(float32x4_t *)(v173 + 80);
                float32x4_t v181 = *(float32x4_t *)(v173 + 96);
                float32x4_t v182 = *(float32x4_t *)(v173 + 112);
                float32x4_t v183 = *(float32x4_t *)(v173 + 64);
                int32x4_t v326 = *(int32x4_t *)v173;
                float32x4_t v327 = v178;
                float32x4_t v334 = v177;
                float32x4_t v335 = v179;
                float32x4_t v342 = v183;
                float32x4_t v343 = v181;
                float32x4_t v350 = v180;
                float32x4_t v351 = v182;
                uint64_t v175 = v283;
                if (v283) {
                  goto LABEL_171;
                }
              }
              else
              {
                if (v174 != 3)
                {
                  if (v69[7])
                  {
                    AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v326, 128, v173, v174);
                    uint64_t v175 = v283;
                    if (!v283) {
                      goto LABEL_202;
                    }
                  }
                  else
                  {
                    int32x4_t v326 = 0u;
                    float32x4_t v327 = 0u;
                    float32x4_t v334 = 0u;
                    float32x4_t v335 = 0u;
                    float32x4_t v342 = 0u;
                    float32x4_t v343 = 0u;
                    float32x4_t v350 = 0u;
                    float32x4_t v351 = 0u;
                    uint64_t v175 = v283;
                    if (!v283) {
                      goto LABEL_202;
                    }
                  }
LABEL_171:
                  if (!v284) {
                    goto LABEL_202;
                  }
                  uint64_t v184 = 0;
                  unint64_t v185 = (unint64_t)v281 << 7;
                  uint64_t v186 = 8 * v282;
                  uint64_t v187 = &v288.i8[v185 + v186];
                  uint64_t v188 = v279;
                  uint64_t v189 = v280;
                  unint64_t v190 = 8 * v284;
                  if (v190 <= 1) {
                    unint64_t v191 = 1;
                  }
                  else {
                    unint64_t v191 = 8 * v284;
                  }
                  unint64_t v192 = v185 + v186;
                  unsigned int v193 = &v288.i8[v185 + v186];
                  if (v191) {
                    BOOL v194 = (v191 - 1) >> 32 == 0;
                  }
                  else {
                    BOOL v194 = 0;
                  }
                  char v195 = !v194;
                  uint64_t v196 = v191 & 0x7FFFFFFE0;
                  uint64_t v197 = v191 & 0x7FFFFFFF8;
                  unsigned int v198 = (char *)&v289 + v192;
                  unsigned int v199 = (long long *)(v279 + 16);
                  int v200 = v187;
                  uint64_t v201 = v279;
                  while (2)
                  {
                    int v202 = (char *)(v188 + v189 * v184);
                    int v203 = &v187[128 * v184];
                    if ((unint64_t)(&v193[128 * v184] - v202) < 0x20) {
                      char v204 = 1;
                    }
                    else {
                      char v204 = v195;
                    }
                    if (v204)
                    {
                      int v205 = 0;
LABEL_199:
                      unsigned int v215 = v205 + 1;
                      do
                      {
                        char v216 = *v202++;
                        *v203++ = v216;
                      }
                      while (v190 > v215++);
                    }
                    else
                    {
                      if (v191 >= 0x20)
                      {
                        unint64_t v207 = v199;
                        unsigned int v208 = v198;
                        uint64_t v209 = v191 & 0x7FFFFFFE0;
                        do
                        {
                          long long v210 = *v207;
                          *(v208 - 1) = *(v207 - 1);
                          *unsigned int v208 = v210;
                          v208 += 2;
                          v207 += 2;
                          v209 -= 32;
                        }
                        while (v209);
                        if (v191 == v196) {
                          goto LABEL_182;
                        }
                        uint64_t v206 = v191 & 0x7FFFFFFE0;
                        if ((v191 & 0x18) == 0)
                        {
                          v202 += v196;
                          v203 += v196;
                          int v205 = v191 & 0xFFFFFFE0;
                          goto LABEL_199;
                        }
                      }
                      else
                      {
                        uint64_t v206 = 0;
                      }
                      v203 += v197;
                      unint64_t v211 = v206 - (v191 & 0x7FFFFFFF8);
                      unsigned int v212 = (uint64_t *)(v201 + v206);
                      unsigned int v213 = &v200[v206];
                      do
                      {
                        uint64_t v214 = *v212++;
                        *(void *)unsigned int v213 = v214;
                        v213 += 8;
                        v211 += 8;
                      }
                      while (v211);
                      if (v191 != v197)
                      {
                        v202 += v197;
                        int v205 = v191 & 0xFFFFFFF8;
                        goto LABEL_199;
                      }
                    }
LABEL_182:
                    ++v184;
                    v198 += 128;
                    unsigned int v199 = (long long *)((char *)v199 + v189);
                    v201 += v189;
                    v200 += 128;
                    if (v184 == v175) {
                      goto LABEL_202;
                    }
                    continue;
                  }
                }
                float32x4_t v176 = vld1q_dup_f32((const float *)v173);
                int32x4_t v326 = (int32x4_t)v176;
                float32x4_t v327 = v176;
                float32x4_t v334 = v176;
                float32x4_t v335 = v176;
                float32x4_t v342 = v176;
                float32x4_t v343 = v176;
                float32x4_t v350 = v176;
                float32x4_t v351 = v176;
                uint64_t v175 = v283;
                if (v283) {
                  goto LABEL_171;
                }
              }
LABEL_202:
              uint64_t v218 = 0;
              __int32 v219 = v277;
              unsigned int v220 = v278;
              int v221 = v285;
              int v222 = v286;
              unsigned int v34 = a7;
              uint64_t v25 = v272;
              uint64_t v29 = 2 * a11;
              do
              {
                uint64_t v233 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,2u>::kSubblockPositions[v218 + 1];
                uint64_t v234 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,2u>::kSubblockPositions[v218];
                unsigned int v235 = (v221 - 4 * v234) & ~((v221 - 4 * (int)v234) >> 31);
                if (v235 >= 4) {
                  unsigned int v235 = 4;
                }
                unsigned int v236 = (v222 - 4 * v233) & ~((v222 - 4 * (int)v233) >> 31);
                if (v236 >= 4) {
                  unsigned int v236 = 4;
                }
                if (v235) {
                  BOOL v237 = v236 == 0;
                }
                else {
                  BOOL v237 = 1;
                }
                if (v237)
                {
                  char v232 = 0;
                }
                else
                {
                  long long v223 = &v288 + 32 * v233 + 2 * v234;
                  int32x4_t v224 = *v223;
                  int32x4_t v225 = v223[1];
                  int32x4_t v226 = v223[8];
                  int32x4_t v227 = v223[9];
                  int32x4_t v228 = v223[16];
                  int32x4_t v229 = v223[17];
                  v223 += 24;
                  int32x4_t v230 = *v223;
                  int32x4_t v231 = v223[1];
                  *__int32 v219 = v224;
                  v219[1] = v226;
                  v219[2] = v225;
                  v219[3] = v227;
                  v219[4] = v228;
                  v219[5] = v230;
                  v219[6] = v229;
                  v219[7] = v231;
                  v219 += 8;
                  char v232 = 127;
                }
                *v220++ = v232;
                v218 += 2;
              }
              while (v218 != 16);
LABEL_95:
              int v71 = __dst;
              if (v275) {
                goto LABEL_27;
              }
              goto LABEL_28;
            }
            uint64_t v76 = (int32x4_t *)v287;
          }
          else
          {
            uint64_t v76 = v71;
            if (v72) {
              goto LABEL_93;
            }
          }
          uint64_t v77 = 0;
          float32x4_t v78 = v76;
          do
          {
            uint64_t v92 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,2u>::kSubblockPositions[v77 + 1];
            uint64_t v93 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,2u>::kSubblockPositions[v77];
            unsigned int v94 = (v39 - 4 * v93) & ~((int)(v39 - 4 * v93) >> 31);
            if (v94 >= 4) {
              unsigned int v94 = 4;
            }
            unsigned int v95 = (v33 - 4 * v92) & ~((int)(v33 - 4 * v92) >> 31);
            if (v95 >= 4) {
              unsigned int v95 = 4;
            }
            if (v94) {
              BOOL v96 = v95 == 0;
            }
            else {
              BOOL v96 = 1;
            }
            if (v96)
            {
              char v91 = 0;
            }
            else
            {
              float32x4_t v79 = (long long *)(v70 + 4 * a11 * v92 + 32 * v93);
              float32x4_t v80 = (long long *)((char *)v79 + v28);
              long long v82 = *v79;
              long long v83 = v79[1];
              float32x4_t v81 = (long long *)((char *)v79 + v29);
              long long v84 = *v80;
              long long v85 = v80[1];
              long long v87 = *v81;
              long long v88 = v81[1];
              unsigned int v86 = (long long *)((char *)v81 + v28);
              long long v89 = *v86;
              long long v90 = v86[1];
              *float32x4_t v78 = (int32x4_t)v82;
              v78[1] = (int32x4_t)v84;
              v78[2] = (int32x4_t)v83;
              v78[3] = (int32x4_t)v85;
              v78[4] = (int32x4_t)v87;
              v78[5] = (int32x4_t)v89;
              v78[6] = (int32x4_t)v88;
              v78[7] = (int32x4_t)v90;
              v78 += 8;
              char v91 = 127;
            }
            *v69++ = v91;
            v77 += 2;
          }
          while (v77 != 16);
          unsigned int v34 = a7;
          if (v275)
          {
LABEL_27:
            memcpy(v71, v76, 0x400uLL);
            uint64_t v29 = 2 * a11;
            uint64_t v25 = v272;
          }
LABEL_28:
          BOOL v20 = v32++ == v263 >> 4;
        }
        while (!v20);
        BOOL v20 = v16++ == v255;
      }
      while (!v20);
    }
  }
}

uint64_t AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, char a12)
{
  uint64_t v306 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v223 = a8;
  unsigned int v208 = a8 + a10 - 1;
  uint64_t v224 = a1;
  if (*(void *)(a1 + 168)) {
    int v19 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v19 = 0;
  }
  unsigned int v20 = a5 - 1;
  unsigned int v21 = a6 - 1;
  unsigned int v22 = a8 >> 3;
  unsigned int v207 = v208 >> 3;
  BOOL v23 = (v19 & 0xD00) == 0 || v19 == 768;
  int v24 = v19 & 0xE00;
  int v26 = !v23 && v24 != 1024;
  int v228 = v26;
  uint64_t result = a1;
  if (*(unsigned char *)(a1 + 232))
  {
    unsigned int v28 = *(unsigned __int8 *)(a1 + 255);
    unsigned int v29 = *(unsigned __int8 *)(a1 + 254);
    char v30 = __clz(v20);
    if (1 << v28 >= a6 || a5 >> v29)
    {
      if (!(a6 >> v28) && 1 << v29 < a5)
      {
        if (a6 < 2) {
          unsigned int v33 = 0;
        }
        else {
          unsigned int v33 = __clz(~(-1 << -(char)__clz(v21))) - 32;
        }
        v29 += v28 + v33;
        unsigned int v28 = -v33;
      }
    }
    else
    {
      unsigned int v31 = 32 - __clz(~(-1 << -v30));
      unsigned int v32 = v29 + v28;
      if (a5 < 2) {
        unsigned int v31 = 0;
      }
      unsigned int v28 = v32 - v31;
      unsigned int v29 = v31;
    }
    if (a5 < 2)
    {
      if (v29) {
        goto LABEL_27;
      }
    }
    else if (32 - __clz(~(-1 << -v30)) < v29)
    {
LABEL_27:
      BOOL v218 = 0;
LABEL_32:
      unsigned int v215 = v29 - 4;
      unsigned int v212 = v28 - 3;
      int v35 = -1 << *(unsigned char *)(*(void *)(a1 + 208) + 48);
      unsigned int v205 = (((~v35 + a5) & v35) + ~(-1 << v29)) >> v29;
      goto LABEL_33;
    }
    if (a6 < 2) {
      unsigned int v34 = 0;
    }
    else {
      unsigned int v34 = 32 - __clz(~(-1 << -(char)__clz(v21)));
    }
    BOOL v218 = v34 >= v28;
    goto LABEL_32;
  }
  BOOL v218 = 0;
  unsigned int v205 = 0;
  unsigned int v212 = 0;
  unsigned int v215 = 0;
LABEL_33:
  if (v22 <= v207)
  {
    unsigned int v217 = a7 + a9 - 1;
    unsigned int v204 = a7 >> 4;
    if (a7 >> 4 <= v217 >> 4)
    {
      unsigned int v226 = v20 >> 4;
      unsigned int v203 = v21 >> 3;
      int v225 = (v20 & 0xF) + 1;
      int v202 = (v21 & 7) + 1;
      int v201 = ~(-1 << v212);
      uint32x2_t v36 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0xF00000007);
      *(int32x2_t *)v18.i8 = vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32(vadd_s32((int32x2_t)vshl_u32(v36, (uint32x2_t)0xFFFFFFFCFFFFFFFDLL), (int32x2_t)-1)))))));
      *(int8x8_t *)v17.i8 = vbic_s8(*(int8x8_t *)v18.i8, (int8x8_t)vcgt_u32((uint32x2_t)0x2000000010, v36));
      __int32 v213 = v17.i32[0] | v17.i32[1];
      uint64_t v211 = v17.i64[0];
      BOOL v210 = v17.i32[0] != 0;
      BOOL v209 = v17.i32[1] != 0;
      unsigned int v216 = a7;
      do
      {
        unsigned int v37 = (8 * v22) | 7;
        if (8 * v22 <= v223) {
          int v38 = v223;
        }
        else {
          int v38 = 8 * v22;
        }
        if (v208 < v37) {
          unsigned int v37 = v208;
        }
        int v214 = v38 - 8 * v22;
        int v222 = v37 - v38 + 1;
        unsigned int v39 = v204;
        int v40 = v202;
        if (v22 != v203) {
          int v40 = 8;
        }
        unsigned int v229 = v40;
        int v41 = v22 & v201;
        uint64_t v221 = a3 + (v38 - v223) * a11;
        do
        {
          unsigned int v42 = 16 * v39;
          unsigned int v43 = 16 * (v39 + 1) - 1;
          if (16 * v39 <= a7) {
            int v44 = a7;
          }
          else {
            int v44 = 16 * v39;
          }
          if (v217 < v43) {
            unsigned int v43 = v217;
          }
          int v45 = v43 - v44 + 1;
          if (v39 == v226) {
            unsigned int v46 = v225;
          }
          else {
            unsigned int v46 = 16;
          }
          BOOL v47 = 1;
          if (8 * v22 >= v223 && v42 >= a7)
          {
            int v48 = v225;
            if (v39 != v226) {
              int v48 = 16;
            }
            BOOL v47 = v45 != v48 || v222 != v229;
          }
          if (v218)
          {
            if (v215 | v212)
            {
              int v50 = 0;
              uint64_t v51 = 0;
              int v52 = 1;
              BOOL v53 = v212 != 0;
              BOOL v54 = v215 != 0;
              unsigned int v55 = v212;
              unsigned int v56 = v215;
              do
              {
                --v55;
                if (v53) {
                  v51 |= (unint64_t)(v41 & v52) << v50++;
                }
                else {
                  unsigned int v55 = 0;
                }
                --v56;
                if (v54) {
                  v51 |= (unint64_t)(v39 & ~(-1 << v215) & v52) << v50++;
                }
                else {
                  unsigned int v56 = 0;
                }
                v52 *= 2;
                --v50;
                BOOL v54 = v56 != 0;
                BOOL v53 = v55 != 0;
              }
              while (v56 | v55);
            }
            else
            {
              uint64_t v51 = 0;
            }
            uint64_t v64 = *(void *)(result + 320) * ((v39 >> v215) + (v22 >> v212) * v205) + (v51 << 10);
          }
          else
          {
            if (v213)
            {
              int v57 = 0;
              uint64_t v58 = 0;
              int v59 = 1;
              BOOL v60 = v210;
              BOOL v61 = v209;
              int v62 = v211;
              int v63 = HIDWORD(v211);
              do
              {
                --v62;
                if (v60) {
                  v58 |= (unint64_t)(v59 & v22) << v57++;
                }
                else {
                  int v62 = 0;
                }
                --v63;
                if (v61) {
                  v58 |= (unint64_t)(v59 & v39) << v57++;
                }
                else {
                  int v63 = 0;
                }
                v59 *= 2;
                --v57;
                BOOL v61 = v63 != 0;
                BOOL v60 = v62 != 0;
              }
              while (v63 | v62);
            }
            else
            {
              uint64_t v58 = 0;
            }
            uint64_t v64 = v58 << 10;
          }
          unsigned int v65 = *(_DWORD *)(result + 128) >> (*(unsigned char *)(result + 144) + a12);
          if (v65 <= 1) {
            unsigned int v65 = 1;
          }
          unsigned int v66 = v65 + 15;
          if (v66 < 0x20) {
            unsigned int v67 = 0;
          }
          else {
            unsigned int v67 = 32 - __clz(~(-1 << -(char)__clz((v66 >> 4) - 1)));
          }
          unsigned int v68 = *(_DWORD *)(result + 132) >> (*(unsigned char *)(result + 144) + a12);
          if (v68 <= 1) {
            unsigned int v68 = 1;
          }
          unsigned int v69 = v68 + 7;
          if (v69 < 0x10)
          {
            unsigned int v70 = 0;
            if (!v67)
            {
LABEL_109:
              uint64_t v72 = 0;
              goto LABEL_110;
            }
          }
          else
          {
            unsigned int v70 = 32 - __clz(~(-1 << -(char)__clz((v69 >> 3) - 1)));
            if (!(v70 | v67)) {
              goto LABEL_109;
            }
          }
          int v71 = 0;
          uint64_t v72 = 0;
          BOOL v73 = v67 != 0;
          BOOL v74 = v70 != 0;
          int v75 = 1;
          do
          {
            --v67;
            if (v73) {
              v72 |= (unint64_t)(v75 & v39) << v71++;
            }
            else {
              unsigned int v67 = 0;
            }
            --v70;
            if (v74) {
              v72 |= (unint64_t)(v75 & v22) << v71++;
            }
            else {
              unsigned int v70 = 0;
            }
            v75 *= 2;
            --v71;
            BOOL v74 = v70 != 0;
            BOOL v73 = v67 != 0;
          }
          while (v70 | v67);
LABEL_110:
          unsigned int v76 = v44 - a7;
          int v77 = v46 < 0x10 || v47;
          float32x4_t v78 = (char *)(a4 + 8 * v72);
          unint64_t v79 = v221 + 8 * v76;
          float32x4_t v80 = (int16x8_t *)(a2 + v64);
          if (v229 < 8) {
            int v81 = 1;
          }
          else {
            int v81 = v77;
          }
          int32x4_t v227 = v80;
          if (v228)
          {
            long long v82 = (int16x8_t *)__dst;
            if (!v81) {
              goto LABEL_122;
            }
            long long v83 = (char *)(a4 + 8 * v72);
            int v84 = v45;
            char v85 = v46;
            memcpy(__dst, v80, sizeof(__dst));
            unsigned int v42 = 16 * v39;
            LOBYTE(v46) = v85;
            int v45 = v84;
            float32x4_t v78 = v83;
            int v41 = v22 & v201;
            uint64_t result = v224;
          }
          else
          {
            long long v82 = v80;
            if (!v81)
            {
LABEL_122:
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock(v79, a11, v82, v78, v46, v229);
              goto LABEL_123;
            }
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE11ELj2ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = result;
          int32x4_t v231 = v82;
          unsigned __int8 v239 = v46;
          unsigned __int8 v240 = v229;
          unsigned int v235 = v214;
          unsigned int v236 = v44 - v42;
          char v232 = v78;
          unint64_t v233 = v79;
          uint64_t v234 = a11;
          unsigned int v237 = v222;
          unsigned int v238 = v45;
          if (v47)
          {
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(result + 8) + 7384), block);
LABEL_123:
            a7 = v216;
            unsigned int v86 = v39 + 1;
            goto LABEL_215;
          }
          unsigned int v87 = *v78;
          if (v87 == 127)
          {
            int32x4_t v89 = *(int32x4_t *)v82;
            int32x4_t v18 = (int32x4_t)v82[1];
            int32x4_t v90 = (int32x4_t)v82[2];
            int32x4_t v91 = (int32x4_t)v82[3];
            int32x4_t v92 = (int32x4_t)v82[4];
            int32x4_t v93 = (int32x4_t)v82[5];
            int32x4_t v94 = (int32x4_t)v82[6];
            int32x4_t v95 = (int32x4_t)v82[7];
            int16x8_t v242 = *v82;
            int32x4_t v243 = v90;
            int32x4_t v250 = v18;
            int32x4_t v251 = v91;
            int32x4_t v258 = v92;
            int32x4_t v259 = v94;
            int32x4_t v266 = v93;
            int32x4_t v267 = v95;
            uint64_t v88 = 128;
          }
          else if (v87 == 3)
          {
            int32x4_t v89 = (int32x4_t)vld1q_dup_f32((const float *)v82->i32);
            int16x8_t v242 = (int16x8_t)v89;
            int32x4_t v243 = v89;
            int32x4_t v250 = v89;
            int32x4_t v251 = v89;
            int32x4_t v258 = v89;
            int32x4_t v259 = v89;
            int32x4_t v266 = v89;
            int32x4_t v267 = v89;
            uint64_t v88 = 4;
          }
          else if (*v78)
          {
            uint64_t v88 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v242, 128, (uint64_t)v82, v87, v17, v18);
          }
          else
          {
            uint64_t v88 = 0;
            int32x4_t v89 = 0uLL;
            int32x4_t v243 = 0u;
            int16x8_t v242 = 0u;
            int32x4_t v250 = 0u;
            int32x4_t v251 = 0u;
            int32x4_t v258 = 0u;
            int32x4_t v259 = 0u;
            int32x4_t v266 = 0u;
            int32x4_t v267 = 0u;
          }
          uint64_t v96 = (uint64_t)v82->i64 + v88;
          unsigned int v97 = v78[1];
          if (v97 == 127)
          {
            int32x4_t v99 = *(int32x4_t *)v96;
            int32x4_t v18 = *(int32x4_t *)(v96 + 16);
            int32x4_t v100 = *(int32x4_t *)(v96 + 32);
            int32x4_t v101 = *(int32x4_t *)(v96 + 48);
            int32x4_t v102 = *(int32x4_t *)(v96 + 64);
            int32x4_t v103 = *(int32x4_t *)(v96 + 80);
            int32x4_t v104 = *(int32x4_t *)(v96 + 96);
            int32x4_t v105 = *(int32x4_t *)(v96 + 112);
            int16x8_t v244 = *(int16x8_t *)v96;
            int32x4_t v245 = v100;
            int32x4_t v252 = v18;
            int32x4_t v253 = v101;
            int32x4_t v260 = v102;
            int32x4_t v261 = v104;
            int32x4_t v268 = v103;
            int32x4_t v269 = v105;
            uint64_t v98 = 128;
            unsigned int v86 = v39 + 1;
          }
          else
          {
            unsigned int v86 = v39 + 1;
            if (v97 == 3)
            {
              int32x4_t v99 = (int32x4_t)vld1q_dup_f32((const float *)v96);
              int16x8_t v244 = (int16x8_t)v99;
              int32x4_t v245 = v99;
              int32x4_t v252 = v99;
              int32x4_t v253 = v99;
              int32x4_t v260 = v99;
              int32x4_t v261 = v99;
              int32x4_t v268 = v99;
              int32x4_t v269 = v99;
              uint64_t v98 = 4;
            }
            else if (v78[1])
            {
              uint64_t v98 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v244, 128, v96, v97, v89, v18);
            }
            else
            {
              uint64_t v98 = 0;
              int32x4_t v99 = 0uLL;
              int16x8_t v244 = 0u;
              int32x4_t v245 = 0u;
              int32x4_t v252 = 0u;
              int32x4_t v253 = 0u;
              int32x4_t v260 = 0u;
              int32x4_t v261 = 0u;
              int32x4_t v268 = 0u;
              int32x4_t v269 = 0u;
            }
          }
          uint64_t v106 = v96 + v98;
          unsigned int v107 = v78[2];
          if (v107 == 127)
          {
            int32x4_t v109 = *(int32x4_t *)v106;
            int32x4_t v18 = *(int32x4_t *)(v106 + 16);
            int32x4_t v110 = *(int32x4_t *)(v106 + 32);
            int32x4_t v111 = *(int32x4_t *)(v106 + 48);
            int32x4_t v112 = *(int32x4_t *)(v106 + 64);
            int32x4_t v113 = *(int32x4_t *)(v106 + 80);
            int32x4_t v114 = *(int32x4_t *)(v106 + 96);
            int32x4_t v115 = *(int32x4_t *)(v106 + 112);
            int16x8_t v274 = *(int16x8_t *)v106;
            int32x4_t v275 = v110;
            int32x4_t v282 = v18;
            int32x4_t v283 = v111;
            int32x4_t v290 = v112;
            int32x4_t v291 = v114;
            int32x4_t v298 = v113;
            int32x4_t v299 = v115;
            uint64_t v108 = 128;
          }
          else if (v107 == 3)
          {
            int32x4_t v109 = (int32x4_t)vld1q_dup_f32((const float *)v106);
            int16x8_t v274 = (int16x8_t)v109;
            int32x4_t v275 = v109;
            int32x4_t v282 = v109;
            int32x4_t v283 = v109;
            int32x4_t v290 = v109;
            int32x4_t v291 = v109;
            int32x4_t v298 = v109;
            int32x4_t v299 = v109;
            uint64_t v108 = 4;
          }
          else if (v78[2])
          {
            uint64_t v108 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v274, 128, v106, v107, v99, v18);
          }
          else
          {
            uint64_t v108 = 0;
            int32x4_t v109 = 0uLL;
            int16x8_t v274 = 0u;
            int32x4_t v275 = 0u;
            int32x4_t v282 = 0u;
            int32x4_t v283 = 0u;
            int32x4_t v290 = 0u;
            int32x4_t v291 = 0u;
            int32x4_t v298 = 0u;
            int32x4_t v299 = 0u;
          }
          uint64_t v116 = v106 + v108;
          unsigned int v117 = v78[3];
          if (v117 == 127)
          {
            int32x4_t v119 = *(int32x4_t *)v116;
            int32x4_t v18 = *(int32x4_t *)(v116 + 16);
            int32x4_t v120 = *(int32x4_t *)(v116 + 32);
            int32x4_t v121 = *(int32x4_t *)(v116 + 48);
            int32x4_t v122 = *(int32x4_t *)(v116 + 64);
            int32x4_t v123 = *(int32x4_t *)(v116 + 80);
            int32x4_t v124 = *(int32x4_t *)(v116 + 96);
            int32x4_t v125 = *(int32x4_t *)(v116 + 112);
            int16x8_t v276 = *(int16x8_t *)v116;
            int32x4_t v277 = v120;
            int32x4_t v284 = v18;
            int32x4_t v285 = v121;
            int32x4_t v292 = v122;
            int32x4_t v293 = v124;
            int32x4_t v300 = v123;
            int32x4_t v301 = v125;
            uint64_t v118 = 128;
          }
          else if (v117 == 3)
          {
            int32x4_t v119 = (int32x4_t)vld1q_dup_f32((const float *)v116);
            int16x8_t v276 = (int16x8_t)v119;
            int32x4_t v277 = v119;
            int32x4_t v284 = v119;
            int32x4_t v285 = v119;
            int32x4_t v292 = v119;
            int32x4_t v293 = v119;
            int32x4_t v300 = v119;
            int32x4_t v301 = v119;
            uint64_t v118 = 4;
          }
          else if (v78[3])
          {
            uint64_t v118 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v276, 128, v116, v117, v109, v18);
          }
          else
          {
            uint64_t v118 = 0;
            int32x4_t v119 = 0uLL;
            int16x8_t v276 = 0u;
            int32x4_t v277 = 0u;
            int32x4_t v284 = 0u;
            int32x4_t v285 = 0u;
            int32x4_t v292 = 0u;
            int32x4_t v293 = 0u;
            int32x4_t v300 = 0u;
            int32x4_t v301 = 0u;
          }
          uint64_t v126 = v116 + v118;
          unsigned int v127 = v78[4];
          if (v127 == 127)
          {
            int32x4_t v129 = *(int32x4_t *)v126;
            int32x4_t v18 = *(int32x4_t *)(v126 + 16);
            int32x4_t v130 = *(int32x4_t *)(v126 + 32);
            int32x4_t v131 = *(int32x4_t *)(v126 + 48);
            int32x4_t v132 = *(int32x4_t *)(v126 + 64);
            int32x4_t v133 = *(int32x4_t *)(v126 + 80);
            int32x4_t v134 = *(int32x4_t *)(v126 + 96);
            int32x4_t v135 = *(int32x4_t *)(v126 + 112);
            int16x8_t v246 = *(int16x8_t *)v126;
            int32x4_t v247 = v130;
            int32x4_t v254 = v18;
            int32x4_t v255 = v131;
            int32x4_t v262 = v132;
            int32x4_t v263 = v134;
            int32x4_t v270 = v133;
            int32x4_t v271 = v135;
            uint64_t v128 = 128;
          }
          else if (v127 == 3)
          {
            int32x4_t v129 = (int32x4_t)vld1q_dup_f32((const float *)v126);
            int16x8_t v246 = (int16x8_t)v129;
            int32x4_t v247 = v129;
            int32x4_t v254 = v129;
            int32x4_t v255 = v129;
            int32x4_t v262 = v129;
            int32x4_t v263 = v129;
            int32x4_t v270 = v129;
            int32x4_t v271 = v129;
            uint64_t v128 = 4;
          }
          else if (v78[4])
          {
            uint64_t v128 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v246, 128, v126, v127, v119, v18);
          }
          else
          {
            uint64_t v128 = 0;
            int32x4_t v129 = 0uLL;
            int16x8_t v246 = 0u;
            int32x4_t v247 = 0u;
            int32x4_t v254 = 0u;
            int32x4_t v255 = 0u;
            int32x4_t v262 = 0u;
            int32x4_t v263 = 0u;
            int32x4_t v270 = 0u;
            int32x4_t v271 = 0u;
          }
          uint64_t v136 = v126 + v128;
          unsigned int v137 = v78[5];
          if (v137 == 127)
          {
            int32x4_t v139 = *(int32x4_t *)v136;
            int32x4_t v18 = *(int32x4_t *)(v136 + 16);
            int32x4_t v140 = *(int32x4_t *)(v136 + 32);
            int32x4_t v141 = *(int32x4_t *)(v136 + 48);
            int32x4_t v142 = *(int32x4_t *)(v136 + 64);
            int32x4_t v143 = *(int32x4_t *)(v136 + 80);
            int32x4_t v144 = *(int32x4_t *)(v136 + 96);
            int32x4_t v145 = *(int32x4_t *)(v136 + 112);
            int16x8_t v248 = *(int16x8_t *)v136;
            int32x4_t v249 = v140;
            int32x4_t v256 = v18;
            int32x4_t v257 = v141;
            int32x4_t v264 = v142;
            int32x4_t v265 = v144;
            int32x4_t v272 = v143;
            int32x4_t v273 = v145;
            uint64_t v138 = 128;
          }
          else if (v137 == 3)
          {
            int32x4_t v139 = (int32x4_t)vld1q_dup_f32((const float *)v136);
            int16x8_t v248 = (int16x8_t)v139;
            int32x4_t v249 = v139;
            int32x4_t v256 = v139;
            int32x4_t v257 = v139;
            int32x4_t v264 = v139;
            int32x4_t v265 = v139;
            int32x4_t v272 = v139;
            int32x4_t v273 = v139;
            uint64_t v138 = 4;
          }
          else if (v78[5])
          {
            uint64_t v138 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v248, 128, v136, v137, v129, v18);
          }
          else
          {
            uint64_t v138 = 0;
            int32x4_t v139 = 0uLL;
            int16x8_t v248 = 0u;
            int32x4_t v249 = 0u;
            int32x4_t v256 = 0u;
            int32x4_t v257 = 0u;
            int32x4_t v264 = 0u;
            int32x4_t v265 = 0u;
            int32x4_t v272 = 0u;
            int32x4_t v273 = 0u;
          }
          uint64_t v146 = v136 + v138;
          unsigned int v147 = v78[6];
          if (v147 == 127)
          {
            int32x4_t v149 = *(int32x4_t *)v146;
            int32x4_t v18 = *(int32x4_t *)(v146 + 16);
            int32x4_t v150 = *(int32x4_t *)(v146 + 32);
            int32x4_t v151 = *(int32x4_t *)(v146 + 48);
            int32x4_t v152 = *(int32x4_t *)(v146 + 64);
            int32x4_t v153 = *(int32x4_t *)(v146 + 80);
            int32x4_t v154 = *(int32x4_t *)(v146 + 96);
            int32x4_t v155 = *(int32x4_t *)(v146 + 112);
            int16x8_t v278 = *(int16x8_t *)v146;
            int32x4_t v279 = v150;
            int32x4_t v286 = v18;
            int32x4_t v287 = v151;
            int32x4_t v294 = v152;
            int32x4_t v295 = v154;
            int32x4_t v302 = v153;
            int32x4_t v303 = v155;
            uint64_t v148 = 128;
          }
          else if (v147 == 3)
          {
            int32x4_t v149 = (int32x4_t)vld1q_dup_f32((const float *)v146);
            int16x8_t v278 = (int16x8_t)v149;
            int32x4_t v279 = v149;
            int32x4_t v286 = v149;
            int32x4_t v287 = v149;
            int32x4_t v294 = v149;
            int32x4_t v295 = v149;
            int32x4_t v302 = v149;
            int32x4_t v303 = v149;
            uint64_t v148 = 4;
          }
          else if (v78[6])
          {
            uint64_t v148 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v278, 128, v146, v147, v139, v18);
          }
          else
          {
            uint64_t v148 = 0;
            int32x4_t v149 = 0uLL;
            int16x8_t v278 = 0u;
            int32x4_t v279 = 0u;
            int32x4_t v286 = 0u;
            int32x4_t v287 = 0u;
            int32x4_t v294 = 0u;
            int32x4_t v295 = 0u;
            int32x4_t v302 = 0u;
            int32x4_t v303 = 0u;
          }
          uint64_t v156 = v146 + v148;
          unsigned int v157 = v78[7];
          if (v157 == 127)
          {
            float32x4_t v160 = *(float32x4_t *)(v156 + 16);
            float32x4_t v161 = *(float32x4_t *)(v156 + 32);
            float32x4_t v162 = *(float32x4_t *)(v156 + 48);
            float32x4_t v163 = *(float32x4_t *)(v156 + 80);
            float32x4_t v164 = *(float32x4_t *)(v156 + 96);
            float32x4_t v165 = *(float32x4_t *)(v156 + 112);
            float32x4_t v166 = *(float32x4_t *)(v156 + 64);
            int16x8_t v280 = *(int16x8_t *)v156;
            float32x4_t v281 = v161;
            float32x4_t v288 = v160;
            float32x4_t v289 = v162;
            float32x4_t v296 = v166;
            float32x4_t v297 = v164;
            float32x4_t v304 = v163;
            float32x4_t v305 = v165;
            a7 = v216;
            uint64_t v158 = v237;
            if (!v237) {
              goto LABEL_214;
            }
          }
          else
          {
            a7 = v216;
            if (v157 == 3)
            {
              float32x4_t v159 = vld1q_dup_f32((const float *)v156);
              int16x8_t v280 = (int16x8_t)v159;
              float32x4_t v281 = v159;
              float32x4_t v288 = v159;
              float32x4_t v289 = v159;
              float32x4_t v296 = v159;
              float32x4_t v297 = v159;
              float32x4_t v304 = v159;
              float32x4_t v305 = v159;
              uint64_t v158 = v237;
              if (!v237) {
                goto LABEL_214;
              }
            }
            else if (v157)
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v280, 128, v156, v157, v149, v18);
              uint64_t v158 = v237;
              if (!v237) {
                goto LABEL_214;
              }
            }
            else
            {
              int16x8_t v280 = 0u;
              float32x4_t v281 = 0u;
              float32x4_t v288 = 0u;
              float32x4_t v289 = 0u;
              float32x4_t v296 = 0u;
              float32x4_t v297 = 0u;
              float32x4_t v304 = 0u;
              float32x4_t v305 = 0u;
              uint64_t v158 = v237;
              if (!v237) {
                goto LABEL_214;
              }
            }
          }
          if (v238)
          {
            uint64_t v167 = 0;
            unint64_t v168 = (unint64_t)v235 << 7;
            uint64_t v169 = 8 * v236;
            float32x4_t v170 = &v242.i8[v168 + v169];
            unint64_t v171 = v233;
            uint64_t v172 = v234;
            unint64_t v173 = 8 * v238;
            if (v173 <= 1) {
              unint64_t v174 = 1;
            }
            else {
              unint64_t v174 = 8 * v238;
            }
            unint64_t v175 = v168 + v169;
            float32x4_t v176 = &v242.i8[v168 + v169];
            if (v174) {
              BOOL v177 = (v174 - 1) >> 32 == 0;
            }
            else {
              BOOL v177 = 0;
            }
            char v178 = !v177;
            uint64_t v179 = v174 & 0x7FFFFFFE0;
            uint64_t v180 = v174 & 0x7FFFFFFF8;
            float32x4_t v181 = &v243.i8[v175];
            float32x4_t v182 = (long long *)(v233 + 16);
            float32x4_t v183 = v170;
            unint64_t v184 = v233;
            do
            {
              unint64_t v185 = (char *)(v171 + v172 * v167);
              uint64_t v186 = &v170[128 * v167];
              if ((unint64_t)(&v176[128 * v167] - v185) < 0x20) {
                char v187 = 1;
              }
              else {
                char v187 = v178;
              }
              if (v187)
              {
                int v188 = 0;
                goto LABEL_211;
              }
              if (v174 >= 0x20)
              {
                unint64_t v190 = v182;
                unint64_t v191 = v181;
                uint64_t v192 = v174 & 0x7FFFFFFE0;
                do
                {
                  long long v193 = *v190;
                  *((_OWORD *)v191 - 1) = *(v190 - 1);
                  *(_OWORD *)unint64_t v191 = v193;
                  v191 += 32;
                  v190 += 2;
                  v192 -= 32;
                }
                while (v192);
                if (v174 == v179) {
                  goto LABEL_194;
                }
                uint64_t v189 = v174 & 0x7FFFFFFE0;
                if ((v174 & 0x18) == 0)
                {
                  v185 += v179;
                  v186 += v179;
                  int v188 = v174 & 0xFFFFFFE0;
                  goto LABEL_211;
                }
              }
              else
              {
                uint64_t v189 = 0;
              }
              v186 += v180;
              unint64_t v194 = v189 - (v174 & 0x7FFFFFFF8);
              char v195 = (uint64_t *)(v184 + v189);
              uint64_t v196 = &v183[v189];
              do
              {
                uint64_t v197 = *v195++;
                *(void *)uint64_t v196 = v197;
                v196 += 8;
                v194 += 8;
              }
              while (v194);
              if (v174 == v180) {
                goto LABEL_194;
              }
              v185 += v180;
              int v188 = v174 & 0xFFFFFFF8;
LABEL_211:
              unsigned int v198 = v188 + 1;
              do
              {
                char v199 = *v185++;
                *v186++ = v199;
              }
              while (v173 > v198++);
LABEL_194:
              ++v167;
              v181 += 128;
              float32x4_t v182 = (long long *)((char *)v182 + v172);
              v184 += v172;
              v183 += 128;
            }
            while (v167 != v158);
          }
LABEL_214:
          AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)&v242, 128, v231, v232, v239, v240);
LABEL_215:
          if (v228) {
            memcpy(v227, v82, 0x400uLL);
          }
          BOOL v23 = v39 == v217 >> 4;
          unsigned int v39 = v86;
          uint64_t result = v224;
        }
        while (!v23);
        BOOL v23 = v22++ == v207;
      }
      while (!v23);
    }
  }
  return result;
}

uint64_t AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, char a12)
{
  uint64_t v306 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v223 = a8;
  unsigned int v208 = a8 + a10 - 1;
  uint64_t v224 = a1;
  if (*(void *)(a1 + 168)) {
    int v19 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v19 = 0;
  }
  unsigned int v20 = a5 - 1;
  unsigned int v21 = a6 - 1;
  unsigned int v22 = a8 >> 3;
  unsigned int v207 = v208 >> 3;
  BOOL v23 = (v19 & 0xD00) == 0 || v19 == 768;
  int v24 = v19 & 0xE00;
  int v26 = !v23 && v24 != 1024;
  int v228 = v26;
  uint64_t result = a1;
  if (*(unsigned char *)(a1 + 232))
  {
    unsigned int v28 = *(unsigned __int8 *)(a1 + 255);
    unsigned int v29 = *(unsigned __int8 *)(a1 + 254);
    char v30 = __clz(v20);
    if (1 << v28 >= a6 || a5 >> v29)
    {
      if (!(a6 >> v28) && 1 << v29 < a5)
      {
        if (a6 < 2) {
          unsigned int v33 = 0;
        }
        else {
          unsigned int v33 = __clz(~(-1 << -(char)__clz(v21))) - 32;
        }
        v29 += v28 + v33;
        unsigned int v28 = -v33;
      }
    }
    else
    {
      unsigned int v31 = 32 - __clz(~(-1 << -v30));
      unsigned int v32 = v29 + v28;
      if (a5 < 2) {
        unsigned int v31 = 0;
      }
      unsigned int v28 = v32 - v31;
      unsigned int v29 = v31;
    }
    if (a5 < 2)
    {
      if (v29) {
        goto LABEL_27;
      }
    }
    else if (32 - __clz(~(-1 << -v30)) < v29)
    {
LABEL_27:
      BOOL v218 = 0;
LABEL_32:
      unsigned int v215 = v29 - 4;
      unsigned int v212 = v28 - 3;
      int v35 = -1 << *(unsigned char *)(*(void *)(a1 + 208) + 48);
      unsigned int v205 = (((~v35 + a5) & v35) + ~(-1 << v29)) >> v29;
      goto LABEL_33;
    }
    if (a6 < 2) {
      unsigned int v34 = 0;
    }
    else {
      unsigned int v34 = 32 - __clz(~(-1 << -(char)__clz(v21)));
    }
    BOOL v218 = v34 >= v28;
    goto LABEL_32;
  }
  BOOL v218 = 0;
  unsigned int v205 = 0;
  unsigned int v212 = 0;
  unsigned int v215 = 0;
LABEL_33:
  if (v22 <= v207)
  {
    unsigned int v217 = a7 + a9 - 1;
    unsigned int v204 = a7 >> 4;
    if (a7 >> 4 <= v217 >> 4)
    {
      unsigned int v226 = v20 >> 4;
      unsigned int v203 = v21 >> 3;
      int v225 = (v20 & 0xF) + 1;
      int v202 = (v21 & 7) + 1;
      int v201 = ~(-1 << v212);
      uint32x2_t v36 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0xF00000007);
      *(int32x2_t *)v18.i8 = vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32(vadd_s32((int32x2_t)vshl_u32(v36, (uint32x2_t)0xFFFFFFFCFFFFFFFDLL), (int32x2_t)-1)))))));
      *(int8x8_t *)v17.i8 = vbic_s8(*(int8x8_t *)v18.i8, (int8x8_t)vcgt_u32((uint32x2_t)0x2000000010, v36));
      __int32 v213 = v17.i32[0] | v17.i32[1];
      uint64_t v211 = v17.i64[0];
      BOOL v210 = v17.i32[0] != 0;
      BOOL v209 = v17.i32[1] != 0;
      unsigned int v216 = a7;
      do
      {
        unsigned int v37 = (8 * v22) | 7;
        if (8 * v22 <= v223) {
          int v38 = v223;
        }
        else {
          int v38 = 8 * v22;
        }
        if (v208 < v37) {
          unsigned int v37 = v208;
        }
        int v214 = v38 - 8 * v22;
        int v222 = v37 - v38 + 1;
        unsigned int v39 = v204;
        int v40 = v202;
        if (v22 != v203) {
          int v40 = 8;
        }
        unsigned int v229 = v40;
        int v41 = v22 & v201;
        uint64_t v221 = a3 + (v38 - v223) * a11;
        do
        {
          unsigned int v42 = 16 * v39;
          unsigned int v43 = 16 * (v39 + 1) - 1;
          if (16 * v39 <= a7) {
            int v44 = a7;
          }
          else {
            int v44 = 16 * v39;
          }
          if (v217 < v43) {
            unsigned int v43 = v217;
          }
          int v45 = v43 - v44 + 1;
          if (v39 == v226) {
            unsigned int v46 = v225;
          }
          else {
            unsigned int v46 = 16;
          }
          BOOL v47 = 1;
          if (8 * v22 >= v223 && v42 >= a7)
          {
            int v48 = v225;
            if (v39 != v226) {
              int v48 = 16;
            }
            BOOL v47 = v45 != v48 || v222 != v229;
          }
          if (v218)
          {
            if (v215 | v212)
            {
              int v50 = 0;
              uint64_t v51 = 0;
              int v52 = 1;
              BOOL v53 = v212 != 0;
              BOOL v54 = v215 != 0;
              unsigned int v55 = v212;
              unsigned int v56 = v215;
              do
              {
                --v55;
                if (v53) {
                  v51 |= (unint64_t)(v41 & v52) << v50++;
                }
                else {
                  unsigned int v55 = 0;
                }
                --v56;
                if (v54) {
                  v51 |= (unint64_t)(v39 & ~(-1 << v215) & v52) << v50++;
                }
                else {
                  unsigned int v56 = 0;
                }
                v52 *= 2;
                --v50;
                BOOL v54 = v56 != 0;
                BOOL v53 = v55 != 0;
              }
              while (v56 | v55);
            }
            else
            {
              uint64_t v51 = 0;
            }
            uint64_t v64 = *(void *)(result + 320) * ((v39 >> v215) + (v22 >> v212) * v205) + (v51 << 10);
          }
          else
          {
            if (v213)
            {
              int v57 = 0;
              uint64_t v58 = 0;
              int v59 = 1;
              BOOL v60 = v210;
              BOOL v61 = v209;
              int v62 = v211;
              int v63 = HIDWORD(v211);
              do
              {
                --v62;
                if (v60) {
                  v58 |= (unint64_t)(v59 & v22) << v57++;
                }
                else {
                  int v62 = 0;
                }
                --v63;
                if (v61) {
                  v58 |= (unint64_t)(v59 & v39) << v57++;
                }
                else {
                  int v63 = 0;
                }
                v59 *= 2;
                --v57;
                BOOL v61 = v63 != 0;
                BOOL v60 = v62 != 0;
              }
              while (v63 | v62);
            }
            else
            {
              uint64_t v58 = 0;
            }
            uint64_t v64 = v58 << 10;
          }
          unsigned int v65 = *(_DWORD *)(result + 128) >> (*(unsigned char *)(result + 144) + a12);
          if (v65 <= 1) {
            unsigned int v65 = 1;
          }
          unsigned int v66 = v65 + 15;
          if (v66 < 0x20) {
            unsigned int v67 = 0;
          }
          else {
            unsigned int v67 = 32 - __clz(~(-1 << -(char)__clz((v66 >> 4) - 1)));
          }
          unsigned int v68 = *(_DWORD *)(result + 132) >> (*(unsigned char *)(result + 144) + a12);
          if (v68 <= 1) {
            unsigned int v68 = 1;
          }
          unsigned int v69 = v68 + 7;
          if (v69 < 0x10)
          {
            unsigned int v70 = 0;
            if (!v67)
            {
LABEL_109:
              uint64_t v72 = 0;
              goto LABEL_110;
            }
          }
          else
          {
            unsigned int v70 = 32 - __clz(~(-1 << -(char)__clz((v69 >> 3) - 1)));
            if (!(v70 | v67)) {
              goto LABEL_109;
            }
          }
          int v71 = 0;
          uint64_t v72 = 0;
          BOOL v73 = v67 != 0;
          BOOL v74 = v70 != 0;
          int v75 = 1;
          do
          {
            --v67;
            if (v73) {
              v72 |= (unint64_t)(v75 & v39) << v71++;
            }
            else {
              unsigned int v67 = 0;
            }
            --v70;
            if (v74) {
              v72 |= (unint64_t)(v75 & v22) << v71++;
            }
            else {
              unsigned int v70 = 0;
            }
            v75 *= 2;
            --v71;
            BOOL v74 = v70 != 0;
            BOOL v73 = v67 != 0;
          }
          while (v70 | v67);
LABEL_110:
          unsigned int v76 = v44 - a7;
          int v77 = v46 < 0x10 || v47;
          float32x4_t v78 = (char *)(a4 + 8 * v72);
          unint64_t v79 = (_OWORD *)(v221 + 8 * v76);
          float32x4_t v80 = (void *)(a2 + v64);
          if (v229 < 8) {
            int v81 = 1;
          }
          else {
            int v81 = v77;
          }
          int32x4_t v227 = v80;
          if (v228)
          {
            long long v82 = __dst;
            if (!v81) {
              goto LABEL_122;
            }
            long long v83 = (char *)(a4 + 8 * v72);
            int v84 = v45;
            char v85 = v46;
            memcpy(__dst, v80, sizeof(__dst));
            unsigned int v42 = 16 * v39;
            LOBYTE(v46) = v85;
            int v45 = v84;
            float32x4_t v78 = v83;
            int v41 = v22 & v201;
            uint64_t result = v224;
          }
          else
          {
            long long v82 = v80;
            if (!v81)
            {
LABEL_122:
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock(v79, a11, v82, v78, v46, v229);
              goto LABEL_123;
            }
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE11ELj2ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = result;
          int32x4_t v231 = v82;
          unsigned __int8 v239 = v46;
          unsigned __int8 v240 = v229;
          unsigned int v235 = v214;
          unsigned int v236 = v44 - v42;
          char v232 = v78;
          unint64_t v233 = v79;
          uint64_t v234 = a11;
          unsigned int v237 = v222;
          unsigned int v238 = v45;
          if (v47)
          {
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(result + 8) + 7384), block);
LABEL_123:
            a7 = v216;
            unsigned int v86 = v39 + 1;
            goto LABEL_215;
          }
          unsigned int v87 = *v78;
          if (v87 == 127)
          {
            int32x4_t v89 = *(int32x4_t *)v82;
            int32x4_t v18 = *((int32x4_t *)v82 + 1);
            int32x4_t v90 = *((int32x4_t *)v82 + 2);
            int32x4_t v91 = *((int32x4_t *)v82 + 3);
            int32x4_t v92 = *((int32x4_t *)v82 + 4);
            int32x4_t v93 = *((int32x4_t *)v82 + 5);
            int32x4_t v94 = *((int32x4_t *)v82 + 6);
            int32x4_t v95 = *((int32x4_t *)v82 + 7);
            int16x8_t v242 = *(int16x8_t *)v82;
            int32x4_t v243 = v90;
            int32x4_t v250 = v18;
            int32x4_t v251 = v91;
            int32x4_t v258 = v92;
            int32x4_t v259 = v94;
            int32x4_t v266 = v93;
            int32x4_t v267 = v95;
            uint64_t v88 = 128;
          }
          else if (v87 == 3)
          {
            int32x4_t v89 = (int32x4_t)vld1q_dup_f32((const float *)v82);
            int16x8_t v242 = (int16x8_t)v89;
            int32x4_t v243 = v89;
            int32x4_t v250 = v89;
            int32x4_t v251 = v89;
            int32x4_t v258 = v89;
            int32x4_t v259 = v89;
            int32x4_t v266 = v89;
            int32x4_t v267 = v89;
            uint64_t v88 = 4;
          }
          else if (*v78)
          {
            uint64_t v88 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v242, 128, (uint64_t)v82, v87, v17, v18);
          }
          else
          {
            uint64_t v88 = 0;
            int32x4_t v89 = 0uLL;
            int32x4_t v243 = 0u;
            int16x8_t v242 = 0u;
            int32x4_t v250 = 0u;
            int32x4_t v251 = 0u;
            int32x4_t v258 = 0u;
            int32x4_t v259 = 0u;
            int32x4_t v266 = 0u;
            int32x4_t v267 = 0u;
          }
          uint64_t v96 = (uint64_t)v82 + v88;
          unsigned int v97 = v78[1];
          if (v97 == 127)
          {
            int32x4_t v99 = *(int32x4_t *)v96;
            int32x4_t v18 = *(int32x4_t *)(v96 + 16);
            int32x4_t v100 = *(int32x4_t *)(v96 + 32);
            int32x4_t v101 = *(int32x4_t *)(v96 + 48);
            int32x4_t v102 = *(int32x4_t *)(v96 + 64);
            int32x4_t v103 = *(int32x4_t *)(v96 + 80);
            int32x4_t v104 = *(int32x4_t *)(v96 + 96);
            int32x4_t v105 = *(int32x4_t *)(v96 + 112);
            int16x8_t v244 = *(int16x8_t *)v96;
            int32x4_t v245 = v100;
            int32x4_t v252 = v18;
            int32x4_t v253 = v101;
            int32x4_t v260 = v102;
            int32x4_t v261 = v104;
            int32x4_t v268 = v103;
            int32x4_t v269 = v105;
            uint64_t v98 = 128;
            unsigned int v86 = v39 + 1;
          }
          else
          {
            unsigned int v86 = v39 + 1;
            if (v97 == 3)
            {
              int32x4_t v99 = (int32x4_t)vld1q_dup_f32((const float *)v96);
              int16x8_t v244 = (int16x8_t)v99;
              int32x4_t v245 = v99;
              int32x4_t v252 = v99;
              int32x4_t v253 = v99;
              int32x4_t v260 = v99;
              int32x4_t v261 = v99;
              int32x4_t v268 = v99;
              int32x4_t v269 = v99;
              uint64_t v98 = 4;
            }
            else if (v78[1])
            {
              uint64_t v98 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v244, 128, v96, v97, v89, v18);
            }
            else
            {
              uint64_t v98 = 0;
              int32x4_t v99 = 0uLL;
              int16x8_t v244 = 0u;
              int32x4_t v245 = 0u;
              int32x4_t v252 = 0u;
              int32x4_t v253 = 0u;
              int32x4_t v260 = 0u;
              int32x4_t v261 = 0u;
              int32x4_t v268 = 0u;
              int32x4_t v269 = 0u;
            }
          }
          uint64_t v106 = v96 + v98;
          unsigned int v107 = v78[2];
          if (v107 == 127)
          {
            int32x4_t v109 = *(int32x4_t *)v106;
            int32x4_t v18 = *(int32x4_t *)(v106 + 16);
            int32x4_t v110 = *(int32x4_t *)(v106 + 32);
            int32x4_t v111 = *(int32x4_t *)(v106 + 48);
            int32x4_t v112 = *(int32x4_t *)(v106 + 64);
            int32x4_t v113 = *(int32x4_t *)(v106 + 80);
            int32x4_t v114 = *(int32x4_t *)(v106 + 96);
            int32x4_t v115 = *(int32x4_t *)(v106 + 112);
            int16x8_t v274 = *(int16x8_t *)v106;
            int32x4_t v275 = v110;
            int32x4_t v282 = v18;
            int32x4_t v283 = v111;
            int32x4_t v290 = v112;
            int32x4_t v291 = v114;
            int32x4_t v298 = v113;
            int32x4_t v299 = v115;
            uint64_t v108 = 128;
          }
          else if (v107 == 3)
          {
            int32x4_t v109 = (int32x4_t)vld1q_dup_f32((const float *)v106);
            int16x8_t v274 = (int16x8_t)v109;
            int32x4_t v275 = v109;
            int32x4_t v282 = v109;
            int32x4_t v283 = v109;
            int32x4_t v290 = v109;
            int32x4_t v291 = v109;
            int32x4_t v298 = v109;
            int32x4_t v299 = v109;
            uint64_t v108 = 4;
          }
          else if (v78[2])
          {
            uint64_t v108 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v274, 128, v106, v107, v99, v18);
          }
          else
          {
            uint64_t v108 = 0;
            int32x4_t v109 = 0uLL;
            int16x8_t v274 = 0u;
            int32x4_t v275 = 0u;
            int32x4_t v282 = 0u;
            int32x4_t v283 = 0u;
            int32x4_t v290 = 0u;
            int32x4_t v291 = 0u;
            int32x4_t v298 = 0u;
            int32x4_t v299 = 0u;
          }
          uint64_t v116 = v106 + v108;
          unsigned int v117 = v78[3];
          if (v117 == 127)
          {
            int32x4_t v119 = *(int32x4_t *)v116;
            int32x4_t v18 = *(int32x4_t *)(v116 + 16);
            int32x4_t v120 = *(int32x4_t *)(v116 + 32);
            int32x4_t v121 = *(int32x4_t *)(v116 + 48);
            int32x4_t v122 = *(int32x4_t *)(v116 + 64);
            int32x4_t v123 = *(int32x4_t *)(v116 + 80);
            int32x4_t v124 = *(int32x4_t *)(v116 + 96);
            int32x4_t v125 = *(int32x4_t *)(v116 + 112);
            int16x8_t v276 = *(int16x8_t *)v116;
            int32x4_t v277 = v120;
            int32x4_t v284 = v18;
            int32x4_t v285 = v121;
            int32x4_t v292 = v122;
            int32x4_t v293 = v124;
            int32x4_t v300 = v123;
            int32x4_t v301 = v125;
            uint64_t v118 = 128;
          }
          else if (v117 == 3)
          {
            int32x4_t v119 = (int32x4_t)vld1q_dup_f32((const float *)v116);
            int16x8_t v276 = (int16x8_t)v119;
            int32x4_t v277 = v119;
            int32x4_t v284 = v119;
            int32x4_t v285 = v119;
            int32x4_t v292 = v119;
            int32x4_t v293 = v119;
            int32x4_t v300 = v119;
            int32x4_t v301 = v119;
            uint64_t v118 = 4;
          }
          else if (v78[3])
          {
            uint64_t v118 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v276, 128, v116, v117, v109, v18);
          }
          else
          {
            uint64_t v118 = 0;
            int32x4_t v119 = 0uLL;
            int16x8_t v276 = 0u;
            int32x4_t v277 = 0u;
            int32x4_t v284 = 0u;
            int32x4_t v285 = 0u;
            int32x4_t v292 = 0u;
            int32x4_t v293 = 0u;
            int32x4_t v300 = 0u;
            int32x4_t v301 = 0u;
          }
          uint64_t v126 = v116 + v118;
          unsigned int v127 = v78[4];
          if (v127 == 127)
          {
            int32x4_t v129 = *(int32x4_t *)v126;
            int32x4_t v18 = *(int32x4_t *)(v126 + 16);
            int32x4_t v130 = *(int32x4_t *)(v126 + 32);
            int32x4_t v131 = *(int32x4_t *)(v126 + 48);
            int32x4_t v132 = *(int32x4_t *)(v126 + 64);
            int32x4_t v133 = *(int32x4_t *)(v126 + 80);
            int32x4_t v134 = *(int32x4_t *)(v126 + 96);
            int32x4_t v135 = *(int32x4_t *)(v126 + 112);
            int16x8_t v246 = *(int16x8_t *)v126;
            int32x4_t v247 = v130;
            int32x4_t v254 = v18;
            int32x4_t v255 = v131;
            int32x4_t v262 = v132;
            int32x4_t v263 = v134;
            int32x4_t v270 = v133;
            int32x4_t v271 = v135;
            uint64_t v128 = 128;
          }
          else if (v127 == 3)
          {
            int32x4_t v129 = (int32x4_t)vld1q_dup_f32((const float *)v126);
            int16x8_t v246 = (int16x8_t)v129;
            int32x4_t v247 = v129;
            int32x4_t v254 = v129;
            int32x4_t v255 = v129;
            int32x4_t v262 = v129;
            int32x4_t v263 = v129;
            int32x4_t v270 = v129;
            int32x4_t v271 = v129;
            uint64_t v128 = 4;
          }
          else if (v78[4])
          {
            uint64_t v128 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v246, 128, v126, v127, v119, v18);
          }
          else
          {
            uint64_t v128 = 0;
            int32x4_t v129 = 0uLL;
            int16x8_t v246 = 0u;
            int32x4_t v247 = 0u;
            int32x4_t v254 = 0u;
            int32x4_t v255 = 0u;
            int32x4_t v262 = 0u;
            int32x4_t v263 = 0u;
            int32x4_t v270 = 0u;
            int32x4_t v271 = 0u;
          }
          uint64_t v136 = v126 + v128;
          unsigned int v137 = v78[5];
          if (v137 == 127)
          {
            int32x4_t v139 = *(int32x4_t *)v136;
            int32x4_t v18 = *(int32x4_t *)(v136 + 16);
            int32x4_t v140 = *(int32x4_t *)(v136 + 32);
            int32x4_t v141 = *(int32x4_t *)(v136 + 48);
            int32x4_t v142 = *(int32x4_t *)(v136 + 64);
            int32x4_t v143 = *(int32x4_t *)(v136 + 80);
            int32x4_t v144 = *(int32x4_t *)(v136 + 96);
            int32x4_t v145 = *(int32x4_t *)(v136 + 112);
            int16x8_t v248 = *(int16x8_t *)v136;
            int32x4_t v249 = v140;
            int32x4_t v256 = v18;
            int32x4_t v257 = v141;
            int32x4_t v264 = v142;
            int32x4_t v265 = v144;
            int32x4_t v272 = v143;
            int32x4_t v273 = v145;
            uint64_t v138 = 128;
          }
          else if (v137 == 3)
          {
            int32x4_t v139 = (int32x4_t)vld1q_dup_f32((const float *)v136);
            int16x8_t v248 = (int16x8_t)v139;
            int32x4_t v249 = v139;
            int32x4_t v256 = v139;
            int32x4_t v257 = v139;
            int32x4_t v264 = v139;
            int32x4_t v265 = v139;
            int32x4_t v272 = v139;
            int32x4_t v273 = v139;
            uint64_t v138 = 4;
          }
          else if (v78[5])
          {
            uint64_t v138 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v248, 128, v136, v137, v129, v18);
          }
          else
          {
            uint64_t v138 = 0;
            int32x4_t v139 = 0uLL;
            int16x8_t v248 = 0u;
            int32x4_t v249 = 0u;
            int32x4_t v256 = 0u;
            int32x4_t v257 = 0u;
            int32x4_t v264 = 0u;
            int32x4_t v265 = 0u;
            int32x4_t v272 = 0u;
            int32x4_t v273 = 0u;
          }
          uint64_t v146 = v136 + v138;
          unsigned int v147 = v78[6];
          if (v147 == 127)
          {
            int32x4_t v149 = *(int32x4_t *)v146;
            int32x4_t v18 = *(int32x4_t *)(v146 + 16);
            int32x4_t v150 = *(int32x4_t *)(v146 + 32);
            int32x4_t v151 = *(int32x4_t *)(v146 + 48);
            int32x4_t v152 = *(int32x4_t *)(v146 + 64);
            int32x4_t v153 = *(int32x4_t *)(v146 + 80);
            int32x4_t v154 = *(int32x4_t *)(v146 + 96);
            int32x4_t v155 = *(int32x4_t *)(v146 + 112);
            int16x8_t v278 = *(int16x8_t *)v146;
            int32x4_t v279 = v150;
            int32x4_t v286 = v18;
            int32x4_t v287 = v151;
            int32x4_t v294 = v152;
            int32x4_t v295 = v154;
            int32x4_t v302 = v153;
            int32x4_t v303 = v155;
            uint64_t v148 = 128;
          }
          else if (v147 == 3)
          {
            int32x4_t v149 = (int32x4_t)vld1q_dup_f32((const float *)v146);
            int16x8_t v278 = (int16x8_t)v149;
            int32x4_t v279 = v149;
            int32x4_t v286 = v149;
            int32x4_t v287 = v149;
            int32x4_t v294 = v149;
            int32x4_t v295 = v149;
            int32x4_t v302 = v149;
            int32x4_t v303 = v149;
            uint64_t v148 = 4;
          }
          else if (v78[6])
          {
            uint64_t v148 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v278, 128, v146, v147, v139, v18);
          }
          else
          {
            uint64_t v148 = 0;
            int32x4_t v149 = 0uLL;
            int16x8_t v278 = 0u;
            int32x4_t v279 = 0u;
            int32x4_t v286 = 0u;
            int32x4_t v287 = 0u;
            int32x4_t v294 = 0u;
            int32x4_t v295 = 0u;
            int32x4_t v302 = 0u;
            int32x4_t v303 = 0u;
          }
          uint64_t v156 = v146 + v148;
          unsigned int v157 = v78[7];
          if (v157 == 127)
          {
            float32x4_t v160 = *(float32x4_t *)(v156 + 16);
            float32x4_t v161 = *(float32x4_t *)(v156 + 32);
            float32x4_t v162 = *(float32x4_t *)(v156 + 48);
            float32x4_t v163 = *(float32x4_t *)(v156 + 80);
            float32x4_t v164 = *(float32x4_t *)(v156 + 96);
            float32x4_t v165 = *(float32x4_t *)(v156 + 112);
            float32x4_t v166 = *(float32x4_t *)(v156 + 64);
            int16x8_t v280 = *(int16x8_t *)v156;
            float32x4_t v281 = v161;
            float32x4_t v288 = v160;
            float32x4_t v289 = v162;
            float32x4_t v296 = v166;
            float32x4_t v297 = v164;
            float32x4_t v304 = v163;
            float32x4_t v305 = v165;
            a7 = v216;
            uint64_t v158 = v237;
            if (!v237) {
              goto LABEL_214;
            }
          }
          else
          {
            a7 = v216;
            if (v157 == 3)
            {
              float32x4_t v159 = vld1q_dup_f32((const float *)v156);
              int16x8_t v280 = (int16x8_t)v159;
              float32x4_t v281 = v159;
              float32x4_t v288 = v159;
              float32x4_t v289 = v159;
              float32x4_t v296 = v159;
              float32x4_t v297 = v159;
              float32x4_t v304 = v159;
              float32x4_t v305 = v159;
              uint64_t v158 = v237;
              if (!v237) {
                goto LABEL_214;
              }
            }
            else if (v157)
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v280, 128, v156, v157, v149, v18);
              uint64_t v158 = v237;
              if (!v237) {
                goto LABEL_214;
              }
            }
            else
            {
              int16x8_t v280 = 0u;
              float32x4_t v281 = 0u;
              float32x4_t v288 = 0u;
              float32x4_t v289 = 0u;
              float32x4_t v296 = 0u;
              float32x4_t v297 = 0u;
              float32x4_t v304 = 0u;
              float32x4_t v305 = 0u;
              uint64_t v158 = v237;
              if (!v237) {
                goto LABEL_214;
              }
            }
          }
          if (v238)
          {
            uint64_t v167 = 0;
            unint64_t v168 = (unint64_t)v235 << 7;
            uint64_t v169 = 8 * v236;
            float32x4_t v170 = &v242.i8[v168 + v169];
            unint64_t v171 = v233;
            uint64_t v172 = v234;
            unint64_t v173 = 8 * v238;
            if (v173 <= 1) {
              unint64_t v174 = 1;
            }
            else {
              unint64_t v174 = 8 * v238;
            }
            unint64_t v175 = v168 + v169;
            float32x4_t v176 = &v242.i8[v168 + v169];
            if (v174) {
              BOOL v177 = (v174 - 1) >> 32 == 0;
            }
            else {
              BOOL v177 = 0;
            }
            char v178 = !v177;
            uint64_t v179 = v174 & 0x7FFFFFFE0;
            uint64_t v180 = v174 & 0x7FFFFFFF8;
            float32x4_t v181 = &v243.i8[v175];
            float32x4_t v182 = v233 + 1;
            float32x4_t v183 = v170;
            unint64_t v184 = v233;
            do
            {
              unint64_t v185 = (char *)v171 + v172 * v167;
              uint64_t v186 = &v170[128 * v167];
              if ((unint64_t)(&v176[128 * v167] - v185) < 0x20) {
                char v187 = 1;
              }
              else {
                char v187 = v178;
              }
              if (v187)
              {
                int v188 = 0;
                goto LABEL_211;
              }
              if (v174 >= 0x20)
              {
                unint64_t v190 = v182;
                unint64_t v191 = v181;
                uint64_t v192 = v174 & 0x7FFFFFFE0;
                do
                {
                  long long v193 = *v190;
                  *((_OWORD *)v191 - 1) = *(v190 - 1);
                  *(_OWORD *)unint64_t v191 = v193;
                  v191 += 32;
                  v190 += 2;
                  v192 -= 32;
                }
                while (v192);
                if (v174 == v179) {
                  goto LABEL_194;
                }
                uint64_t v189 = v174 & 0x7FFFFFFE0;
                if ((v174 & 0x18) == 0)
                {
                  v185 += v179;
                  v186 += v179;
                  int v188 = v174 & 0xFFFFFFE0;
                  goto LABEL_211;
                }
              }
              else
              {
                uint64_t v189 = 0;
              }
              v186 += v180;
              unint64_t v194 = v189 - (v174 & 0x7FFFFFFF8);
              char v195 = (uint64_t *)((char *)v184 + v189);
              uint64_t v196 = &v183[v189];
              do
              {
                uint64_t v197 = *v195++;
                *(void *)uint64_t v196 = v197;
                v196 += 8;
                v194 += 8;
              }
              while (v194);
              if (v174 == v180) {
                goto LABEL_194;
              }
              v185 += v180;
              int v188 = v174 & 0xFFFFFFF8;
LABEL_211:
              unsigned int v198 = v188 + 1;
              do
              {
                char v199 = *v185++;
                *v186++ = v199;
              }
              while (v173 > v198++);
LABEL_194:
              ++v167;
              v181 += 128;
              float32x4_t v182 = (long long *)((char *)v182 + v172);
              unint64_t v184 = (_OWORD *)((char *)v184 + v172);
              v183 += 128;
            }
            while (v167 != v158);
          }
LABEL_214:
          AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock(&v242, 128, v231, v232, v239, v240);
LABEL_215:
          if (v228) {
            memcpy(v227, v82, 0x400uLL);
          }
          BOOL v23 = v39 == v217 >> 4;
          unsigned int v39 = v86;
          uint64_t result = v224;
        }
        while (!v23);
        BOOL v23 = v22++ == v207;
      }
      while (!v23);
    }
  }
  return result;
}

void *AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, int a12)
{
  uint64_t v305 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  uint64_t v17 = a1;
  unsigned int v222 = a8;
  unsigned int v18 = a8 >> 3;
  unsigned int v206 = a8 + a10 - 1;
  unsigned int v208 = v206 >> 3;
  unsigned int v19 = *(unsigned __int8 *)(*(void *)(a1 + 208) + 88);
  unsigned int v20 = *(_DWORD *)(a1 + 112);
  uint64_t v223 = v17;
  if (*(void *)(v17 + 168))
  {
    __int16 CacheMode = IOSurfaceGetCacheMode();
    uint64_t v17 = v223;
    int v22 = CacheMode & 0xF00;
  }
  else
  {
    int v22 = 0;
  }
  BOOL v23 = (v22 & 0xD00) == 0 || v22 == 768;
  int v24 = v22 & 0xE00;
  int v26 = !v23 && v24 != 1024;
  int v227 = v26;
  uint64_t result = (void *)AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::isLevelTiled(v17, *(_DWORD *)(v17 + 144) + a12);
  uint64_t v30 = v223;
  int v216 = (int)result;
  if (v18 <= v208)
  {
    unsigned int v215 = a7 + a9 - 1;
    unsigned int v205 = a7 >> 4;
    if (a7 >> 4 <= v215 >> 4)
    {
      unsigned int v202 = a5 - 1;
      unsigned int v225 = (a5 - 1) >> 4;
      int v224 = ((a5 - 1) & 0xF) + 1;
      int v203 = ((a6 - 1) & 7) + 1;
      unsigned int v204 = (a6 - 1) >> 3;
      uint32x2_t v31 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0xF00000007);
      *(int32x2_t *)v29.i8 = vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32(vadd_s32((int32x2_t)vshl_u32(v31, (uint32x2_t)0xFFFFFFFCFFFFFFFDLL), (int32x2_t)-1)))))));
      *(int8x8_t *)v28.i8 = vbic_s8(*(int8x8_t *)v29.i8, (int8x8_t)vcgt_u32((uint32x2_t)0x2000000010, v31));
      __int32 v213 = v28.i32[0] | v28.i32[1];
      uint64_t v212 = v28.i64[0];
      BOOL v211 = v28.i32[0] != 0;
      BOOL v210 = v28.i32[1] != 0;
      unint64_t v201 = 8 * v20 * (unint64_t)v19;
      unsigned int v214 = a7;
      do
      {
        unsigned int v32 = (8 * v18) | 7;
        if (8 * v18 <= v222) {
          int v33 = v222;
        }
        else {
          int v33 = 8 * v18;
        }
        unsigned int v34 = v205;
        if (v206 < v32) {
          unsigned int v32 = v206;
        }
        unsigned int v221 = 8 * v18;
        int v209 = v33 - 8 * v18;
        int v220 = v32 - v33 + 1;
        int v35 = v203;
        if (v18 != v204) {
          int v35 = 8;
        }
        unsigned int v228 = v35;
        uint64_t v219 = a3 + (v33 - v222) * a11;
        do
        {
          unsigned int v36 = 16 * v34;
          unsigned int v37 = 16 * (v34 + 1) - 1;
          if (16 * v34 <= a7) {
            int v38 = a7;
          }
          else {
            int v38 = 16 * v34;
          }
          if (v215 < v37) {
            unsigned int v37 = v215;
          }
          int v39 = v37 - v38 + 1;
          if (v34 == v225) {
            unsigned int v40 = v224;
          }
          else {
            unsigned int v40 = 16;
          }
          BOOL v41 = 1;
          if (v221 >= v222 && v36 >= a7)
          {
            int v42 = v224;
            if (v34 != v225) {
              int v42 = 16;
            }
            BOOL v41 = v39 != v42 || v220 != v228;
          }
          if (v216)
          {
            unsigned int v63 = 0;
            uint64_t v64 = v201 >> (*(unsigned char *)(v30 + 57) != 0);
            char v65 = 1;
            if (v64 > 127)
            {
              if (v64 > 511)
              {
                if (v64 == 512)
                {
                  char v66 = 0;
                  unsigned int v63 = 16;
                  unsigned int v67 = 16;
                }
                else
                {
                  char v66 = 1;
                  unsigned int v67 = 0;
                  if (v64 == 1024)
                  {
                    unsigned int v67 = 8;
                    unsigned int v63 = 16;
                  }
                }
              }
              else if (v64 == 128)
              {
                char v65 = 0;
                char v66 = 0;
                unsigned int v63 = 32;
                unsigned int v67 = 32;
              }
              else
              {
                char v66 = 1;
                unsigned int v67 = 0;
                if (v64 == 256)
                {
                  char v65 = 0;
                  char v66 = 0;
                  unsigned int v67 = 16;
                  unsigned int v63 = 32;
                }
              }
            }
            else
            {
              char v66 = 1;
              unsigned int v67 = 0;
              switch(v64)
              {
                case 4:
                  char v65 = 0;
                  char v66 = 0;
                  unsigned int v67 = 128;
                  unsigned int v63 = 256;
                  break;
                case 5:
                case 6:
                case 7:
                case 9:
                case 10:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 17:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                  break;
                case 8:
                  char v65 = 0;
                  char v66 = 0;
                  unsigned int v63 = 128;
                  unsigned int v67 = 128;
                  break;
                case 16:
                  char v65 = 0;
                  char v66 = 0;
                  unsigned int v67 = 64;
                  unsigned int v63 = 128;
                  break;
                case 32:
                  char v65 = 0;
                  char v66 = 0;
                  unsigned int v63 = 64;
                  unsigned int v67 = 64;
                  break;
                default:
                  if (v64 == 64)
                  {
                    char v65 = 0;
                    char v66 = 0;
                    unsigned int v67 = 32;
                    unsigned int v63 = 64;
                  }
                  break;
              }
            }
            unsigned int v190 = (v63 >> 4) - 1;
            if (v65) {
              unsigned int v191 = 0;
            }
            else {
              unsigned int v191 = 32 - __clz(~(-1 << -(char)__clz(v190)));
            }
            unsigned int v192 = (v67 >> 3) - 1;
            if (v66)
            {
              unsigned int v193 = 0;
              if (v191) {
                goto LABEL_206;
              }
            }
            else
            {
              unsigned int v193 = 32 - __clz(~(-1 << -(char)__clz(v192)));
              if (v193 | v191)
              {
LABEL_206:
                int v194 = 0;
                uint64_t v195 = 0;
                int v196 = v34 & v190;
                int v197 = v18 & v192;
                BOOL v198 = v193 != 0;
                BOOL v199 = v191 != 0;
                int v200 = 1;
                do
                {
                  --v193;
                  if (v198) {
                    v195 |= (unint64_t)(v200 & v197) << v194++;
                  }
                  else {
                    unsigned int v193 = 0;
                  }
                  --v191;
                  if (v199) {
                    v195 |= (unint64_t)(v200 & v196) << v194++;
                  }
                  else {
                    unsigned int v191 = 0;
                  }
                  v200 *= 2;
                  --v194;
                  BOOL v199 = v191 != 0;
                  BOOL v198 = v193 != 0;
                }
                while (v191 | v193);
                goto LABEL_218;
              }
            }
            uint64_t v195 = 0;
LABEL_218:
            unint64_t v51 = ((unint64_t)(v36 / v63 + v221 / v67 * ((v63 + v202) / v63)) << 14) + (v195 << 10);
            goto LABEL_58;
          }
          if (v213)
          {
            int v44 = 0;
            uint64_t v45 = 0;
            int v46 = 1;
            BOOL v47 = v211;
            BOOL v48 = v210;
            int v49 = v212;
            int v50 = HIDWORD(v212);
            do
            {
              --v49;
              if (v47) {
                v45 |= (unint64_t)(v46 & v18) << v44++;
              }
              else {
                int v49 = 0;
              }
              --v50;
              if (v48) {
                v45 |= (unint64_t)(v46 & v34) << v44++;
              }
              else {
                int v50 = 0;
              }
              v46 *= 2;
              --v44;
              BOOL v48 = v50 != 0;
              BOOL v47 = v49 != 0;
            }
            while (v50 | v49);
          }
          else
          {
            uint64_t v45 = 0;
          }
          unint64_t v51 = v45 << 10;
LABEL_58:
          unsigned int v52 = *(_DWORD *)(v30 + 128) >> (*(unsigned char *)(v30 + 144) + a12);
          if (v52 <= 1) {
            unsigned int v52 = 1;
          }
          unsigned int v53 = v52 + 15;
          if (v53 < 0x20) {
            unsigned int v54 = 0;
          }
          else {
            unsigned int v54 = 32 - __clz(~(-1 << -(char)__clz((v53 >> 4) - 1)));
          }
          unsigned int v55 = *(_DWORD *)(v30 + 132) >> (*(unsigned char *)(v30 + 144) + a12);
          if (v55 <= 1) {
            unsigned int v55 = 1;
          }
          unsigned int v56 = v55 + 7;
          if (v56 < 0x10)
          {
            unsigned int v57 = 0;
            if (!v54)
            {
LABEL_80:
              uint64_t v59 = 0;
              goto LABEL_81;
            }
          }
          else
          {
            unsigned int v57 = 32 - __clz(~(-1 << -(char)__clz((v56 >> 3) - 1)));
            if (!(v57 | v54)) {
              goto LABEL_80;
            }
          }
          int v58 = 0;
          uint64_t v59 = 0;
          BOOL v60 = v54 != 0;
          BOOL v61 = v57 != 0;
          int v62 = 1;
          do
          {
            --v54;
            if (v60) {
              v59 |= (unint64_t)(v62 & v34) << v58++;
            }
            else {
              unsigned int v54 = 0;
            }
            --v57;
            if (v61) {
              v59 |= (unint64_t)(v62 & v18) << v58++;
            }
            else {
              unsigned int v57 = 0;
            }
            v62 *= 2;
            --v58;
            BOOL v61 = v57 != 0;
            BOOL v60 = v54 != 0;
          }
          while (v57 | v54);
LABEL_81:
          int v68 = v40 < 0x10 || v41;
          unsigned int v69 = (char *)(a4 + 8 * v59);
          unint64_t v70 = v219 + 8 * (v38 - a7);
          int v71 = (int16x8_t *)(a2 + v51);
          if (v228 < 8) {
            int v72 = 1;
          }
          else {
            int v72 = v68;
          }
          unsigned int v226 = v71;
          if (v227)
          {
            BOOL v73 = (int16x8_t *)__dst;
            if (!v72) {
              goto LABEL_93;
            }
            char v74 = v40;
            int v75 = v38;
            memcpy(__dst, v71, sizeof(__dst));
            unsigned int v36 = 16 * v34;
            int v38 = v75;
            LOBYTE(v40) = v74;
            uint64_t v30 = v223;
          }
          else
          {
            BOOL v73 = v71;
            if (!v72)
            {
LABEL_93:
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock(v70, a11, v73, v69, v40, v228);
              goto LABEL_94;
            }
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE11ELj2ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = v30;
          int32x4_t v230 = v73;
          unsigned __int8 v238 = v40;
          unsigned __int8 v239 = v228;
          unsigned int v234 = v209;
          unsigned int v235 = v38 - v36;
          int32x4_t v231 = v69;
          unint64_t v232 = v70;
          uint64_t v233 = a11;
          unsigned int v236 = v220;
          unsigned int v237 = v39;
          if (v41)
          {
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(v30 + 8) + 7384), block);
LABEL_94:
            a7 = v214;
            goto LABEL_186;
          }
          unsigned int v76 = *v69;
          a7 = v214;
          if (v76 == 127)
          {
            int32x4_t v78 = *(int32x4_t *)v73;
            int32x4_t v29 = (int32x4_t)v73[1];
            int32x4_t v79 = (int32x4_t)v73[2];
            int32x4_t v80 = (int32x4_t)v73[3];
            int32x4_t v81 = (int32x4_t)v73[4];
            int32x4_t v82 = (int32x4_t)v73[5];
            int32x4_t v83 = (int32x4_t)v73[6];
            int32x4_t v84 = (int32x4_t)v73[7];
            int16x8_t v241 = *v73;
            int32x4_t v242 = v79;
            int32x4_t v249 = v29;
            int32x4_t v250 = v80;
            int32x4_t v257 = v81;
            int32x4_t v258 = v83;
            int32x4_t v265 = v82;
            int32x4_t v266 = v84;
            uint64_t v77 = 128;
          }
          else if (v76 == 3)
          {
            int32x4_t v78 = (int32x4_t)vld1q_dup_f32((const float *)v73->i32);
            int16x8_t v241 = (int16x8_t)v78;
            int32x4_t v242 = v78;
            int32x4_t v249 = v78;
            int32x4_t v250 = v78;
            int32x4_t v257 = v78;
            int32x4_t v258 = v78;
            int32x4_t v265 = v78;
            int32x4_t v266 = v78;
            uint64_t v77 = 4;
          }
          else if (*v69)
          {
            uint64_t v77 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v241, 128, (uint64_t)v73, v76, v28, v29);
          }
          else
          {
            uint64_t v77 = 0;
            int32x4_t v78 = 0uLL;
            int32x4_t v242 = 0u;
            int16x8_t v241 = 0u;
            int32x4_t v249 = 0u;
            int32x4_t v250 = 0u;
            int32x4_t v257 = 0u;
            int32x4_t v258 = 0u;
            int32x4_t v265 = 0u;
            int32x4_t v266 = 0u;
          }
          uint64_t v85 = (uint64_t)v73->i64 + v77;
          unsigned int v86 = v69[1];
          if (v86 == 127)
          {
            int32x4_t v88 = *(int32x4_t *)v85;
            int32x4_t v29 = *(int32x4_t *)(v85 + 16);
            int32x4_t v89 = *(int32x4_t *)(v85 + 32);
            int32x4_t v90 = *(int32x4_t *)(v85 + 48);
            int32x4_t v91 = *(int32x4_t *)(v85 + 64);
            int32x4_t v92 = *(int32x4_t *)(v85 + 80);
            int32x4_t v93 = *(int32x4_t *)(v85 + 96);
            int32x4_t v94 = *(int32x4_t *)(v85 + 112);
            int16x8_t v243 = *(int16x8_t *)v85;
            int32x4_t v244 = v89;
            int32x4_t v251 = v29;
            int32x4_t v252 = v90;
            int32x4_t v259 = v91;
            int32x4_t v260 = v93;
            int32x4_t v267 = v92;
            int32x4_t v268 = v94;
            uint64_t v87 = 128;
          }
          else if (v86 == 3)
          {
            int32x4_t v88 = (int32x4_t)vld1q_dup_f32((const float *)v85);
            int16x8_t v243 = (int16x8_t)v88;
            int32x4_t v244 = v88;
            int32x4_t v251 = v88;
            int32x4_t v252 = v88;
            int32x4_t v259 = v88;
            int32x4_t v260 = v88;
            int32x4_t v267 = v88;
            int32x4_t v268 = v88;
            uint64_t v87 = 4;
          }
          else if (v69[1])
          {
            uint64_t v87 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v243, 128, v85, v86, v78, v29);
          }
          else
          {
            uint64_t v87 = 0;
            int32x4_t v88 = 0uLL;
            int16x8_t v243 = 0u;
            int32x4_t v244 = 0u;
            int32x4_t v251 = 0u;
            int32x4_t v252 = 0u;
            int32x4_t v259 = 0u;
            int32x4_t v260 = 0u;
            int32x4_t v267 = 0u;
            int32x4_t v268 = 0u;
          }
          uint64_t v95 = v85 + v87;
          unsigned int v96 = v69[2];
          if (v96 == 127)
          {
            int32x4_t v98 = *(int32x4_t *)v95;
            int32x4_t v29 = *(int32x4_t *)(v95 + 16);
            int32x4_t v99 = *(int32x4_t *)(v95 + 32);
            int32x4_t v100 = *(int32x4_t *)(v95 + 48);
            int32x4_t v101 = *(int32x4_t *)(v95 + 64);
            int32x4_t v102 = *(int32x4_t *)(v95 + 80);
            int32x4_t v103 = *(int32x4_t *)(v95 + 96);
            int32x4_t v104 = *(int32x4_t *)(v95 + 112);
            int16x8_t v273 = *(int16x8_t *)v95;
            int32x4_t v274 = v99;
            int32x4_t v281 = v29;
            int32x4_t v282 = v100;
            int32x4_t v289 = v101;
            int32x4_t v290 = v103;
            int32x4_t v297 = v102;
            int32x4_t v298 = v104;
            uint64_t v97 = 128;
          }
          else if (v96 == 3)
          {
            int32x4_t v98 = (int32x4_t)vld1q_dup_f32((const float *)v95);
            int16x8_t v273 = (int16x8_t)v98;
            int32x4_t v274 = v98;
            int32x4_t v281 = v98;
            int32x4_t v282 = v98;
            int32x4_t v289 = v98;
            int32x4_t v290 = v98;
            int32x4_t v297 = v98;
            int32x4_t v298 = v98;
            uint64_t v97 = 4;
          }
          else if (v69[2])
          {
            uint64_t v97 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v273, 128, v95, v96, v88, v29);
          }
          else
          {
            uint64_t v97 = 0;
            int32x4_t v98 = 0uLL;
            int16x8_t v273 = 0u;
            int32x4_t v274 = 0u;
            int32x4_t v281 = 0u;
            int32x4_t v282 = 0u;
            int32x4_t v289 = 0u;
            int32x4_t v290 = 0u;
            int32x4_t v297 = 0u;
            int32x4_t v298 = 0u;
          }
          uint64_t v105 = v95 + v97;
          unsigned int v106 = v69[3];
          if (v106 == 127)
          {
            int32x4_t v108 = *(int32x4_t *)v105;
            int32x4_t v29 = *(int32x4_t *)(v105 + 16);
            int32x4_t v109 = *(int32x4_t *)(v105 + 32);
            int32x4_t v110 = *(int32x4_t *)(v105 + 48);
            int32x4_t v111 = *(int32x4_t *)(v105 + 64);
            int32x4_t v112 = *(int32x4_t *)(v105 + 80);
            int32x4_t v113 = *(int32x4_t *)(v105 + 96);
            int32x4_t v114 = *(int32x4_t *)(v105 + 112);
            int16x8_t v275 = *(int16x8_t *)v105;
            int32x4_t v276 = v109;
            int32x4_t v283 = v29;
            int32x4_t v284 = v110;
            int32x4_t v291 = v111;
            int32x4_t v292 = v113;
            int32x4_t v299 = v112;
            int32x4_t v300 = v114;
            uint64_t v107 = 128;
          }
          else if (v106 == 3)
          {
            int32x4_t v108 = (int32x4_t)vld1q_dup_f32((const float *)v105);
            int16x8_t v275 = (int16x8_t)v108;
            int32x4_t v276 = v108;
            int32x4_t v283 = v108;
            int32x4_t v284 = v108;
            int32x4_t v291 = v108;
            int32x4_t v292 = v108;
            int32x4_t v299 = v108;
            int32x4_t v300 = v108;
            uint64_t v107 = 4;
          }
          else if (v69[3])
          {
            uint64_t v107 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v275, 128, v105, v106, v98, v29);
          }
          else
          {
            uint64_t v107 = 0;
            int32x4_t v108 = 0uLL;
            int16x8_t v275 = 0u;
            int32x4_t v276 = 0u;
            int32x4_t v283 = 0u;
            int32x4_t v284 = 0u;
            int32x4_t v291 = 0u;
            int32x4_t v292 = 0u;
            int32x4_t v299 = 0u;
            int32x4_t v300 = 0u;
          }
          uint64_t v115 = v105 + v107;
          unsigned int v116 = v69[4];
          if (v116 == 127)
          {
            int32x4_t v118 = *(int32x4_t *)v115;
            int32x4_t v29 = *(int32x4_t *)(v115 + 16);
            int32x4_t v119 = *(int32x4_t *)(v115 + 32);
            int32x4_t v120 = *(int32x4_t *)(v115 + 48);
            int32x4_t v121 = *(int32x4_t *)(v115 + 64);
            int32x4_t v122 = *(int32x4_t *)(v115 + 80);
            int32x4_t v123 = *(int32x4_t *)(v115 + 96);
            int32x4_t v124 = *(int32x4_t *)(v115 + 112);
            int16x8_t v245 = *(int16x8_t *)v115;
            int32x4_t v246 = v119;
            int32x4_t v253 = v29;
            int32x4_t v254 = v120;
            int32x4_t v261 = v121;
            int32x4_t v262 = v123;
            int32x4_t v269 = v122;
            int32x4_t v270 = v124;
            uint64_t v117 = 128;
          }
          else if (v116 == 3)
          {
            int32x4_t v118 = (int32x4_t)vld1q_dup_f32((const float *)v115);
            int16x8_t v245 = (int16x8_t)v118;
            int32x4_t v246 = v118;
            int32x4_t v253 = v118;
            int32x4_t v254 = v118;
            int32x4_t v261 = v118;
            int32x4_t v262 = v118;
            int32x4_t v269 = v118;
            int32x4_t v270 = v118;
            uint64_t v117 = 4;
          }
          else if (v69[4])
          {
            uint64_t v117 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v245, 128, v115, v116, v108, v29);
          }
          else
          {
            uint64_t v117 = 0;
            int32x4_t v118 = 0uLL;
            int16x8_t v245 = 0u;
            int32x4_t v246 = 0u;
            int32x4_t v253 = 0u;
            int32x4_t v254 = 0u;
            int32x4_t v261 = 0u;
            int32x4_t v262 = 0u;
            int32x4_t v269 = 0u;
            int32x4_t v270 = 0u;
          }
          uint64_t v125 = v115 + v117;
          unsigned int v126 = v69[5];
          if (v126 == 127)
          {
            int32x4_t v128 = *(int32x4_t *)v125;
            int32x4_t v29 = *(int32x4_t *)(v125 + 16);
            int32x4_t v129 = *(int32x4_t *)(v125 + 32);
            int32x4_t v130 = *(int32x4_t *)(v125 + 48);
            int32x4_t v131 = *(int32x4_t *)(v125 + 64);
            int32x4_t v132 = *(int32x4_t *)(v125 + 80);
            int32x4_t v133 = *(int32x4_t *)(v125 + 96);
            int32x4_t v134 = *(int32x4_t *)(v125 + 112);
            int16x8_t v247 = *(int16x8_t *)v125;
            int32x4_t v248 = v129;
            int32x4_t v255 = v29;
            int32x4_t v256 = v130;
            int32x4_t v263 = v131;
            int32x4_t v264 = v133;
            int32x4_t v271 = v132;
            int32x4_t v272 = v134;
            uint64_t v127 = 128;
          }
          else if (v126 == 3)
          {
            int32x4_t v128 = (int32x4_t)vld1q_dup_f32((const float *)v125);
            int16x8_t v247 = (int16x8_t)v128;
            int32x4_t v248 = v128;
            int32x4_t v255 = v128;
            int32x4_t v256 = v128;
            int32x4_t v263 = v128;
            int32x4_t v264 = v128;
            int32x4_t v271 = v128;
            int32x4_t v272 = v128;
            uint64_t v127 = 4;
          }
          else if (v69[5])
          {
            uint64_t v127 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v247, 128, v125, v126, v118, v29);
          }
          else
          {
            uint64_t v127 = 0;
            int32x4_t v128 = 0uLL;
            int16x8_t v247 = 0u;
            int32x4_t v248 = 0u;
            int32x4_t v255 = 0u;
            int32x4_t v256 = 0u;
            int32x4_t v263 = 0u;
            int32x4_t v264 = 0u;
            int32x4_t v271 = 0u;
            int32x4_t v272 = 0u;
          }
          uint64_t v135 = v125 + v127;
          unsigned int v136 = v69[6];
          if (v136 == 127)
          {
            int32x4_t v138 = *(int32x4_t *)v135;
            int32x4_t v29 = *(int32x4_t *)(v135 + 16);
            int32x4_t v139 = *(int32x4_t *)(v135 + 32);
            int32x4_t v140 = *(int32x4_t *)(v135 + 48);
            int32x4_t v141 = *(int32x4_t *)(v135 + 64);
            int32x4_t v142 = *(int32x4_t *)(v135 + 80);
            int32x4_t v143 = *(int32x4_t *)(v135 + 96);
            int32x4_t v144 = *(int32x4_t *)(v135 + 112);
            int16x8_t v277 = *(int16x8_t *)v135;
            int32x4_t v278 = v139;
            int32x4_t v285 = v29;
            int32x4_t v286 = v140;
            int32x4_t v293 = v141;
            int32x4_t v294 = v143;
            int32x4_t v301 = v142;
            int32x4_t v302 = v144;
            uint64_t v137 = 128;
          }
          else if (v136 == 3)
          {
            int32x4_t v138 = (int32x4_t)vld1q_dup_f32((const float *)v135);
            int16x8_t v277 = (int16x8_t)v138;
            int32x4_t v278 = v138;
            int32x4_t v285 = v138;
            int32x4_t v286 = v138;
            int32x4_t v293 = v138;
            int32x4_t v294 = v138;
            int32x4_t v301 = v138;
            int32x4_t v302 = v138;
            uint64_t v137 = 4;
          }
          else if (v69[6])
          {
            uint64_t v137 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v277, 128, v135, v136, v128, v29);
          }
          else
          {
            uint64_t v137 = 0;
            int32x4_t v138 = 0uLL;
            int16x8_t v277 = 0u;
            int32x4_t v278 = 0u;
            int32x4_t v285 = 0u;
            int32x4_t v286 = 0u;
            int32x4_t v293 = 0u;
            int32x4_t v294 = 0u;
            int32x4_t v301 = 0u;
            int32x4_t v302 = 0u;
          }
          uint64_t v145 = v135 + v137;
          unsigned int v146 = v69[7];
          if (v146 == 127)
          {
            float32x4_t v149 = *(float32x4_t *)(v145 + 16);
            float32x4_t v150 = *(float32x4_t *)(v145 + 32);
            float32x4_t v151 = *(float32x4_t *)(v145 + 48);
            float32x4_t v152 = *(float32x4_t *)(v145 + 80);
            float32x4_t v153 = *(float32x4_t *)(v145 + 96);
            float32x4_t v154 = *(float32x4_t *)(v145 + 112);
            float32x4_t v155 = *(float32x4_t *)(v145 + 64);
            int16x8_t v279 = *(int16x8_t *)v145;
            float32x4_t v280 = v150;
            float32x4_t v287 = v149;
            float32x4_t v288 = v151;
            float32x4_t v295 = v155;
            float32x4_t v296 = v153;
            float32x4_t v303 = v152;
            float32x4_t v304 = v154;
            uint64_t v147 = v236;
            if (!v236) {
              goto LABEL_185;
            }
          }
          else if (v146 == 3)
          {
            float32x4_t v148 = vld1q_dup_f32((const float *)v145);
            int16x8_t v279 = (int16x8_t)v148;
            float32x4_t v280 = v148;
            float32x4_t v287 = v148;
            float32x4_t v288 = v148;
            float32x4_t v295 = v148;
            float32x4_t v296 = v148;
            float32x4_t v303 = v148;
            float32x4_t v304 = v148;
            uint64_t v147 = v236;
            if (!v236) {
              goto LABEL_185;
            }
          }
          else if (v69[7])
          {
            AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v279, 128, v145, v146, v138, v29);
            uint64_t v147 = v236;
            if (!v236) {
              goto LABEL_185;
            }
          }
          else
          {
            int16x8_t v279 = 0u;
            float32x4_t v280 = 0u;
            float32x4_t v287 = 0u;
            float32x4_t v288 = 0u;
            float32x4_t v295 = 0u;
            float32x4_t v296 = 0u;
            float32x4_t v303 = 0u;
            float32x4_t v304 = 0u;
            uint64_t v147 = v236;
            if (!v236) {
              goto LABEL_185;
            }
          }
          if (v237)
          {
            uint64_t v156 = 0;
            unint64_t v157 = (unint64_t)v234 << 7;
            uint64_t v158 = 8 * v235;
            float32x4_t v159 = &v241.i8[v157 + v158];
            unint64_t v160 = v232;
            uint64_t v161 = v233;
            unint64_t v162 = 8 * v237;
            if (v162 <= 1) {
              unint64_t v163 = 1;
            }
            else {
              unint64_t v163 = 8 * v237;
            }
            unint64_t v164 = v157 + v158;
            float32x4_t v165 = &v241.i8[v157 + v158];
            if (v163) {
              BOOL v166 = (v163 - 1) >> 32 == 0;
            }
            else {
              BOOL v166 = 0;
            }
            char v167 = !v166;
            uint64_t v168 = v163 & 0x7FFFFFFE0;
            uint64_t v169 = v163 & 0x7FFFFFFF8;
            float32x4_t v170 = &v242.i8[v164];
            unint64_t v171 = (long long *)(v232 + 16);
            uint64_t v172 = v159;
            unint64_t v173 = v232;
            do
            {
              unint64_t v174 = (char *)(v160 + v161 * v156);
              unint64_t v175 = &v159[128 * v156];
              if ((unint64_t)(&v165[128 * v156] - v174) < 0x20) {
                char v176 = 1;
              }
              else {
                char v176 = v167;
              }
              if (v176)
              {
                int v177 = 0;
                goto LABEL_182;
              }
              if (v163 >= 0x20)
              {
                uint64_t v179 = v171;
                uint64_t v180 = v170;
                uint64_t v181 = v163 & 0x7FFFFFFE0;
                do
                {
                  long long v182 = *v179;
                  *((_OWORD *)v180 - 1) = *(v179 - 1);
                  *(_OWORD *)uint64_t v180 = v182;
                  v180 += 32;
                  v179 += 2;
                  v181 -= 32;
                }
                while (v181);
                if (v163 == v168) {
                  goto LABEL_165;
                }
                uint64_t v178 = v163 & 0x7FFFFFFE0;
                if ((v163 & 0x18) == 0)
                {
                  v174 += v168;
                  v175 += v168;
                  int v177 = v163 & 0xFFFFFFE0;
                  goto LABEL_182;
                }
              }
              else
              {
                uint64_t v178 = 0;
              }
              v175 += v169;
              unint64_t v183 = v178 - (v163 & 0x7FFFFFFF8);
              unint64_t v184 = (uint64_t *)(v173 + v178);
              unint64_t v185 = &v172[v178];
              do
              {
                uint64_t v186 = *v184++;
                *(void *)unint64_t v185 = v186;
                v185 += 8;
                v183 += 8;
              }
              while (v183);
              if (v163 == v169) {
                goto LABEL_165;
              }
              v174 += v169;
              int v177 = v163 & 0xFFFFFFF8;
LABEL_182:
              unsigned int v187 = v177 + 1;
              do
              {
                char v188 = *v174++;
                *v175++ = v188;
              }
              while (v162 > v187++);
LABEL_165:
              ++v156;
              v170 += 128;
              unint64_t v171 = (long long *)((char *)v171 + v161);
              v173 += v161;
              v172 += 128;
            }
            while (v156 != v147);
          }
LABEL_185:
          AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)&v241, 128, v230, v231, v238, v239);
LABEL_186:
          uint64_t result = v226;
          if (v227) {
            uint64_t result = memcpy(v226, v73, 0x400uLL);
          }
          BOOL v23 = v34++ == v215 >> 4;
          uint64_t v30 = v223;
        }
        while (!v23);
        BOOL v23 = v18++ == v208;
      }
      while (!v23);
    }
  }
  return result;
}

void *AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, int a12)
{
  uint64_t v305 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  uint64_t v17 = a1;
  unsigned int v222 = a8;
  unsigned int v18 = a8 >> 3;
  unsigned int v206 = a8 + a10 - 1;
  unsigned int v208 = v206 >> 3;
  unsigned int v19 = *(unsigned __int8 *)(*(void *)(a1 + 208) + 88);
  unsigned int v20 = *(_DWORD *)(a1 + 112);
  uint64_t v223 = v17;
  if (*(void *)(v17 + 168))
  {
    __int16 CacheMode = IOSurfaceGetCacheMode();
    uint64_t v17 = v223;
    int v22 = CacheMode & 0xF00;
  }
  else
  {
    int v22 = 0;
  }
  BOOL v23 = (v22 & 0xD00) == 0 || v22 == 768;
  int v24 = v22 & 0xE00;
  int v26 = !v23 && v24 != 1024;
  int v227 = v26;
  uint64_t result = (void *)AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::isLevelTiled(v17, *(_DWORD *)(v17 + 144) + a12);
  uint64_t v30 = v223;
  int v216 = (int)result;
  if (v18 <= v208)
  {
    unsigned int v215 = a7 + a9 - 1;
    unsigned int v205 = a7 >> 4;
    if (a7 >> 4 <= v215 >> 4)
    {
      unsigned int v202 = a5 - 1;
      unsigned int v225 = (a5 - 1) >> 4;
      int v224 = ((a5 - 1) & 0xF) + 1;
      int v203 = ((a6 - 1) & 7) + 1;
      unsigned int v204 = (a6 - 1) >> 3;
      uint32x2_t v31 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0xF00000007);
      *(int32x2_t *)v29.i8 = vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32(vadd_s32((int32x2_t)vshl_u32(v31, (uint32x2_t)0xFFFFFFFCFFFFFFFDLL), (int32x2_t)-1)))))));
      *(int8x8_t *)v28.i8 = vbic_s8(*(int8x8_t *)v29.i8, (int8x8_t)vcgt_u32((uint32x2_t)0x2000000010, v31));
      __int32 v213 = v28.i32[0] | v28.i32[1];
      uint64_t v212 = v28.i64[0];
      BOOL v211 = v28.i32[0] != 0;
      BOOL v210 = v28.i32[1] != 0;
      unint64_t v201 = 8 * v20 * (unint64_t)v19;
      unsigned int v214 = a7;
      do
      {
        unsigned int v32 = (8 * v18) | 7;
        if (8 * v18 <= v222) {
          int v33 = v222;
        }
        else {
          int v33 = 8 * v18;
        }
        unsigned int v34 = v205;
        if (v206 < v32) {
          unsigned int v32 = v206;
        }
        unsigned int v221 = 8 * v18;
        int v209 = v33 - 8 * v18;
        int v220 = v32 - v33 + 1;
        int v35 = v203;
        if (v18 != v204) {
          int v35 = 8;
        }
        unsigned int v228 = v35;
        uint64_t v219 = a3 + (v33 - v222) * a11;
        do
        {
          unsigned int v36 = 16 * v34;
          unsigned int v37 = 16 * (v34 + 1) - 1;
          if (16 * v34 <= a7) {
            int v38 = a7;
          }
          else {
            int v38 = 16 * v34;
          }
          if (v215 < v37) {
            unsigned int v37 = v215;
          }
          int v39 = v37 - v38 + 1;
          if (v34 == v225) {
            unsigned int v40 = v224;
          }
          else {
            unsigned int v40 = 16;
          }
          BOOL v41 = 1;
          if (v221 >= v222 && v36 >= a7)
          {
            int v42 = v224;
            if (v34 != v225) {
              int v42 = 16;
            }
            BOOL v41 = v39 != v42 || v220 != v228;
          }
          if (v216)
          {
            unsigned int v63 = 0;
            uint64_t v64 = v201 >> (*(unsigned char *)(v30 + 57) != 0);
            char v65 = 1;
            if (v64 > 127)
            {
              if (v64 > 511)
              {
                if (v64 == 512)
                {
                  char v66 = 0;
                  unsigned int v63 = 16;
                  unsigned int v67 = 16;
                }
                else
                {
                  char v66 = 1;
                  unsigned int v67 = 0;
                  if (v64 == 1024)
                  {
                    unsigned int v67 = 8;
                    unsigned int v63 = 16;
                  }
                }
              }
              else if (v64 == 128)
              {
                char v65 = 0;
                char v66 = 0;
                unsigned int v63 = 32;
                unsigned int v67 = 32;
              }
              else
              {
                char v66 = 1;
                unsigned int v67 = 0;
                if (v64 == 256)
                {
                  char v65 = 0;
                  char v66 = 0;
                  unsigned int v67 = 16;
                  unsigned int v63 = 32;
                }
              }
            }
            else
            {
              char v66 = 1;
              unsigned int v67 = 0;
              switch(v64)
              {
                case 4:
                  char v65 = 0;
                  char v66 = 0;
                  unsigned int v67 = 128;
                  unsigned int v63 = 256;
                  break;
                case 5:
                case 6:
                case 7:
                case 9:
                case 10:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 17:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                  break;
                case 8:
                  char v65 = 0;
                  char v66 = 0;
                  unsigned int v63 = 128;
                  unsigned int v67 = 128;
                  break;
                case 16:
                  char v65 = 0;
                  char v66 = 0;
                  unsigned int v67 = 64;
                  unsigned int v63 = 128;
                  break;
                case 32:
                  char v65 = 0;
                  char v66 = 0;
                  unsigned int v63 = 64;
                  unsigned int v67 = 64;
                  break;
                default:
                  if (v64 == 64)
                  {
                    char v65 = 0;
                    char v66 = 0;
                    unsigned int v67 = 32;
                    unsigned int v63 = 64;
                  }
                  break;
              }
            }
            unsigned int v190 = (v63 >> 4) - 1;
            if (v65) {
              unsigned int v191 = 0;
            }
            else {
              unsigned int v191 = 32 - __clz(~(-1 << -(char)__clz(v190)));
            }
            unsigned int v192 = (v67 >> 3) - 1;
            if (v66)
            {
              unsigned int v193 = 0;
              if (v191) {
                goto LABEL_206;
              }
            }
            else
            {
              unsigned int v193 = 32 - __clz(~(-1 << -(char)__clz(v192)));
              if (v193 | v191)
              {
LABEL_206:
                int v194 = 0;
                uint64_t v195 = 0;
                int v196 = v34 & v190;
                int v197 = v18 & v192;
                BOOL v198 = v193 != 0;
                BOOL v199 = v191 != 0;
                int v200 = 1;
                do
                {
                  --v193;
                  if (v198) {
                    v195 |= (unint64_t)(v200 & v197) << v194++;
                  }
                  else {
                    unsigned int v193 = 0;
                  }
                  --v191;
                  if (v199) {
                    v195 |= (unint64_t)(v200 & v196) << v194++;
                  }
                  else {
                    unsigned int v191 = 0;
                  }
                  v200 *= 2;
                  --v194;
                  BOOL v199 = v191 != 0;
                  BOOL v198 = v193 != 0;
                }
                while (v191 | v193);
                goto LABEL_218;
              }
            }
            uint64_t v195 = 0;
LABEL_218:
            unint64_t v51 = ((unint64_t)(v36 / v63 + v221 / v67 * ((v63 + v202) / v63)) << 14) + (v195 << 10);
            goto LABEL_58;
          }
          if (v213)
          {
            int v44 = 0;
            uint64_t v45 = 0;
            int v46 = 1;
            BOOL v47 = v211;
            BOOL v48 = v210;
            int v49 = v212;
            int v50 = HIDWORD(v212);
            do
            {
              --v49;
              if (v47) {
                v45 |= (unint64_t)(v46 & v18) << v44++;
              }
              else {
                int v49 = 0;
              }
              --v50;
              if (v48) {
                v45 |= (unint64_t)(v46 & v34) << v44++;
              }
              else {
                int v50 = 0;
              }
              v46 *= 2;
              --v44;
              BOOL v48 = v50 != 0;
              BOOL v47 = v49 != 0;
            }
            while (v50 | v49);
          }
          else
          {
            uint64_t v45 = 0;
          }
          unint64_t v51 = v45 << 10;
LABEL_58:
          unsigned int v52 = *(_DWORD *)(v30 + 128) >> (*(unsigned char *)(v30 + 144) + a12);
          if (v52 <= 1) {
            unsigned int v52 = 1;
          }
          unsigned int v53 = v52 + 15;
          if (v53 < 0x20) {
            unsigned int v54 = 0;
          }
          else {
            unsigned int v54 = 32 - __clz(~(-1 << -(char)__clz((v53 >> 4) - 1)));
          }
          unsigned int v55 = *(_DWORD *)(v30 + 132) >> (*(unsigned char *)(v30 + 144) + a12);
          if (v55 <= 1) {
            unsigned int v55 = 1;
          }
          unsigned int v56 = v55 + 7;
          if (v56 < 0x10)
          {
            unsigned int v57 = 0;
            if (!v54)
            {
LABEL_80:
              uint64_t v59 = 0;
              goto LABEL_81;
            }
          }
          else
          {
            unsigned int v57 = 32 - __clz(~(-1 << -(char)__clz((v56 >> 3) - 1)));
            if (!(v57 | v54)) {
              goto LABEL_80;
            }
          }
          int v58 = 0;
          uint64_t v59 = 0;
          BOOL v60 = v54 != 0;
          BOOL v61 = v57 != 0;
          int v62 = 1;
          do
          {
            --v54;
            if (v60) {
              v59 |= (unint64_t)(v62 & v34) << v58++;
            }
            else {
              unsigned int v54 = 0;
            }
            --v57;
            if (v61) {
              v59 |= (unint64_t)(v62 & v18) << v58++;
            }
            else {
              unsigned int v57 = 0;
            }
            v62 *= 2;
            --v58;
            BOOL v61 = v57 != 0;
            BOOL v60 = v54 != 0;
          }
          while (v57 | v54);
LABEL_81:
          int v68 = v40 < 0x10 || v41;
          unsigned int v69 = (char *)(a4 + 8 * v59);
          unint64_t v70 = (_OWORD *)(v219 + 8 * (v38 - a7));
          int v71 = (void *)(a2 + v51);
          if (v228 < 8) {
            int v72 = 1;
          }
          else {
            int v72 = v68;
          }
          unsigned int v226 = v71;
          if (v227)
          {
            BOOL v73 = __dst;
            if (!v72) {
              goto LABEL_93;
            }
            char v74 = v40;
            int v75 = v38;
            memcpy(__dst, v71, sizeof(__dst));
            unsigned int v36 = 16 * v34;
            int v38 = v75;
            LOBYTE(v40) = v74;
            uint64_t v30 = v223;
          }
          else
          {
            BOOL v73 = v71;
            if (!v72)
            {
LABEL_93:
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock(v70, a11, v73, v69, v40, v228);
              goto LABEL_94;
            }
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE11ELj2ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = v30;
          int32x4_t v230 = v73;
          unsigned __int8 v238 = v40;
          unsigned __int8 v239 = v228;
          unsigned int v234 = v209;
          unsigned int v235 = v38 - v36;
          int32x4_t v231 = v69;
          unint64_t v232 = v70;
          uint64_t v233 = a11;
          unsigned int v236 = v220;
          unsigned int v237 = v39;
          if (v41)
          {
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(v30 + 8) + 7384), block);
LABEL_94:
            a7 = v214;
            goto LABEL_186;
          }
          unsigned int v76 = *v69;
          a7 = v214;
          if (v76 == 127)
          {
            int32x4_t v78 = *(int32x4_t *)v73;
            int32x4_t v29 = *((int32x4_t *)v73 + 1);
            int32x4_t v79 = *((int32x4_t *)v73 + 2);
            int32x4_t v80 = *((int32x4_t *)v73 + 3);
            int32x4_t v81 = *((int32x4_t *)v73 + 4);
            int32x4_t v82 = *((int32x4_t *)v73 + 5);
            int32x4_t v83 = *((int32x4_t *)v73 + 6);
            int32x4_t v84 = *((int32x4_t *)v73 + 7);
            int16x8_t v241 = *(int16x8_t *)v73;
            int32x4_t v242 = v79;
            int32x4_t v249 = v29;
            int32x4_t v250 = v80;
            int32x4_t v257 = v81;
            int32x4_t v258 = v83;
            int32x4_t v265 = v82;
            int32x4_t v266 = v84;
            uint64_t v77 = 128;
          }
          else if (v76 == 3)
          {
            int32x4_t v78 = (int32x4_t)vld1q_dup_f32((const float *)v73);
            int16x8_t v241 = (int16x8_t)v78;
            int32x4_t v242 = v78;
            int32x4_t v249 = v78;
            int32x4_t v250 = v78;
            int32x4_t v257 = v78;
            int32x4_t v258 = v78;
            int32x4_t v265 = v78;
            int32x4_t v266 = v78;
            uint64_t v77 = 4;
          }
          else if (*v69)
          {
            uint64_t v77 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v241, 128, (uint64_t)v73, v76, v28, v29);
          }
          else
          {
            uint64_t v77 = 0;
            int32x4_t v78 = 0uLL;
            int32x4_t v242 = 0u;
            int16x8_t v241 = 0u;
            int32x4_t v249 = 0u;
            int32x4_t v250 = 0u;
            int32x4_t v257 = 0u;
            int32x4_t v258 = 0u;
            int32x4_t v265 = 0u;
            int32x4_t v266 = 0u;
          }
          uint64_t v85 = (uint64_t)v73 + v77;
          unsigned int v86 = v69[1];
          if (v86 == 127)
          {
            int32x4_t v88 = *(int32x4_t *)v85;
            int32x4_t v29 = *(int32x4_t *)(v85 + 16);
            int32x4_t v89 = *(int32x4_t *)(v85 + 32);
            int32x4_t v90 = *(int32x4_t *)(v85 + 48);
            int32x4_t v91 = *(int32x4_t *)(v85 + 64);
            int32x4_t v92 = *(int32x4_t *)(v85 + 80);
            int32x4_t v93 = *(int32x4_t *)(v85 + 96);
            int32x4_t v94 = *(int32x4_t *)(v85 + 112);
            int16x8_t v243 = *(int16x8_t *)v85;
            int32x4_t v244 = v89;
            int32x4_t v251 = v29;
            int32x4_t v252 = v90;
            int32x4_t v259 = v91;
            int32x4_t v260 = v93;
            int32x4_t v267 = v92;
            int32x4_t v268 = v94;
            uint64_t v87 = 128;
          }
          else if (v86 == 3)
          {
            int32x4_t v88 = (int32x4_t)vld1q_dup_f32((const float *)v85);
            int16x8_t v243 = (int16x8_t)v88;
            int32x4_t v244 = v88;
            int32x4_t v251 = v88;
            int32x4_t v252 = v88;
            int32x4_t v259 = v88;
            int32x4_t v260 = v88;
            int32x4_t v267 = v88;
            int32x4_t v268 = v88;
            uint64_t v87 = 4;
          }
          else if (v69[1])
          {
            uint64_t v87 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v243, 128, v85, v86, v78, v29);
          }
          else
          {
            uint64_t v87 = 0;
            int32x4_t v88 = 0uLL;
            int16x8_t v243 = 0u;
            int32x4_t v244 = 0u;
            int32x4_t v251 = 0u;
            int32x4_t v252 = 0u;
            int32x4_t v259 = 0u;
            int32x4_t v260 = 0u;
            int32x4_t v267 = 0u;
            int32x4_t v268 = 0u;
          }
          uint64_t v95 = v85 + v87;
          unsigned int v96 = v69[2];
          if (v96 == 127)
          {
            int32x4_t v98 = *(int32x4_t *)v95;
            int32x4_t v29 = *(int32x4_t *)(v95 + 16);
            int32x4_t v99 = *(int32x4_t *)(v95 + 32);
            int32x4_t v100 = *(int32x4_t *)(v95 + 48);
            int32x4_t v101 = *(int32x4_t *)(v95 + 64);
            int32x4_t v102 = *(int32x4_t *)(v95 + 80);
            int32x4_t v103 = *(int32x4_t *)(v95 + 96);
            int32x4_t v104 = *(int32x4_t *)(v95 + 112);
            int16x8_t v273 = *(int16x8_t *)v95;
            int32x4_t v274 = v99;
            int32x4_t v281 = v29;
            int32x4_t v282 = v100;
            int32x4_t v289 = v101;
            int32x4_t v290 = v103;
            int32x4_t v297 = v102;
            int32x4_t v298 = v104;
            uint64_t v97 = 128;
          }
          else if (v96 == 3)
          {
            int32x4_t v98 = (int32x4_t)vld1q_dup_f32((const float *)v95);
            int16x8_t v273 = (int16x8_t)v98;
            int32x4_t v274 = v98;
            int32x4_t v281 = v98;
            int32x4_t v282 = v98;
            int32x4_t v289 = v98;
            int32x4_t v290 = v98;
            int32x4_t v297 = v98;
            int32x4_t v298 = v98;
            uint64_t v97 = 4;
          }
          else if (v69[2])
          {
            uint64_t v97 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v273, 128, v95, v96, v88, v29);
          }
          else
          {
            uint64_t v97 = 0;
            int32x4_t v98 = 0uLL;
            int16x8_t v273 = 0u;
            int32x4_t v274 = 0u;
            int32x4_t v281 = 0u;
            int32x4_t v282 = 0u;
            int32x4_t v289 = 0u;
            int32x4_t v290 = 0u;
            int32x4_t v297 = 0u;
            int32x4_t v298 = 0u;
          }
          uint64_t v105 = v95 + v97;
          unsigned int v106 = v69[3];
          if (v106 == 127)
          {
            int32x4_t v108 = *(int32x4_t *)v105;
            int32x4_t v29 = *(int32x4_t *)(v105 + 16);
            int32x4_t v109 = *(int32x4_t *)(v105 + 32);
            int32x4_t v110 = *(int32x4_t *)(v105 + 48);
            int32x4_t v111 = *(int32x4_t *)(v105 + 64);
            int32x4_t v112 = *(int32x4_t *)(v105 + 80);
            int32x4_t v113 = *(int32x4_t *)(v105 + 96);
            int32x4_t v114 = *(int32x4_t *)(v105 + 112);
            int16x8_t v275 = *(int16x8_t *)v105;
            int32x4_t v276 = v109;
            int32x4_t v283 = v29;
            int32x4_t v284 = v110;
            int32x4_t v291 = v111;
            int32x4_t v292 = v113;
            int32x4_t v299 = v112;
            int32x4_t v300 = v114;
            uint64_t v107 = 128;
          }
          else if (v106 == 3)
          {
            int32x4_t v108 = (int32x4_t)vld1q_dup_f32((const float *)v105);
            int16x8_t v275 = (int16x8_t)v108;
            int32x4_t v276 = v108;
            int32x4_t v283 = v108;
            int32x4_t v284 = v108;
            int32x4_t v291 = v108;
            int32x4_t v292 = v108;
            int32x4_t v299 = v108;
            int32x4_t v300 = v108;
            uint64_t v107 = 4;
          }
          else if (v69[3])
          {
            uint64_t v107 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v275, 128, v105, v106, v98, v29);
          }
          else
          {
            uint64_t v107 = 0;
            int32x4_t v108 = 0uLL;
            int16x8_t v275 = 0u;
            int32x4_t v276 = 0u;
            int32x4_t v283 = 0u;
            int32x4_t v284 = 0u;
            int32x4_t v291 = 0u;
            int32x4_t v292 = 0u;
            int32x4_t v299 = 0u;
            int32x4_t v300 = 0u;
          }
          uint64_t v115 = v105 + v107;
          unsigned int v116 = v69[4];
          if (v116 == 127)
          {
            int32x4_t v118 = *(int32x4_t *)v115;
            int32x4_t v29 = *(int32x4_t *)(v115 + 16);
            int32x4_t v119 = *(int32x4_t *)(v115 + 32);
            int32x4_t v120 = *(int32x4_t *)(v115 + 48);
            int32x4_t v121 = *(int32x4_t *)(v115 + 64);
            int32x4_t v122 = *(int32x4_t *)(v115 + 80);
            int32x4_t v123 = *(int32x4_t *)(v115 + 96);
            int32x4_t v124 = *(int32x4_t *)(v115 + 112);
            int16x8_t v245 = *(int16x8_t *)v115;
            int32x4_t v246 = v119;
            int32x4_t v253 = v29;
            int32x4_t v254 = v120;
            int32x4_t v261 = v121;
            int32x4_t v262 = v123;
            int32x4_t v269 = v122;
            int32x4_t v270 = v124;
            uint64_t v117 = 128;
          }
          else if (v116 == 3)
          {
            int32x4_t v118 = (int32x4_t)vld1q_dup_f32((const float *)v115);
            int16x8_t v245 = (int16x8_t)v118;
            int32x4_t v246 = v118;
            int32x4_t v253 = v118;
            int32x4_t v254 = v118;
            int32x4_t v261 = v118;
            int32x4_t v262 = v118;
            int32x4_t v269 = v118;
            int32x4_t v270 = v118;
            uint64_t v117 = 4;
          }
          else if (v69[4])
          {
            uint64_t v117 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v245, 128, v115, v116, v108, v29);
          }
          else
          {
            uint64_t v117 = 0;
            int32x4_t v118 = 0uLL;
            int16x8_t v245 = 0u;
            int32x4_t v246 = 0u;
            int32x4_t v253 = 0u;
            int32x4_t v254 = 0u;
            int32x4_t v261 = 0u;
            int32x4_t v262 = 0u;
            int32x4_t v269 = 0u;
            int32x4_t v270 = 0u;
          }
          uint64_t v125 = v115 + v117;
          unsigned int v126 = v69[5];
          if (v126 == 127)
          {
            int32x4_t v128 = *(int32x4_t *)v125;
            int32x4_t v29 = *(int32x4_t *)(v125 + 16);
            int32x4_t v129 = *(int32x4_t *)(v125 + 32);
            int32x4_t v130 = *(int32x4_t *)(v125 + 48);
            int32x4_t v131 = *(int32x4_t *)(v125 + 64);
            int32x4_t v132 = *(int32x4_t *)(v125 + 80);
            int32x4_t v133 = *(int32x4_t *)(v125 + 96);
            int32x4_t v134 = *(int32x4_t *)(v125 + 112);
            int16x8_t v247 = *(int16x8_t *)v125;
            int32x4_t v248 = v129;
            int32x4_t v255 = v29;
            int32x4_t v256 = v130;
            int32x4_t v263 = v131;
            int32x4_t v264 = v133;
            int32x4_t v271 = v132;
            int32x4_t v272 = v134;
            uint64_t v127 = 128;
          }
          else if (v126 == 3)
          {
            int32x4_t v128 = (int32x4_t)vld1q_dup_f32((const float *)v125);
            int16x8_t v247 = (int16x8_t)v128;
            int32x4_t v248 = v128;
            int32x4_t v255 = v128;
            int32x4_t v256 = v128;
            int32x4_t v263 = v128;
            int32x4_t v264 = v128;
            int32x4_t v271 = v128;
            int32x4_t v272 = v128;
            uint64_t v127 = 4;
          }
          else if (v69[5])
          {
            uint64_t v127 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v247, 128, v125, v126, v118, v29);
          }
          else
          {
            uint64_t v127 = 0;
            int32x4_t v128 = 0uLL;
            int16x8_t v247 = 0u;
            int32x4_t v248 = 0u;
            int32x4_t v255 = 0u;
            int32x4_t v256 = 0u;
            int32x4_t v263 = 0u;
            int32x4_t v264 = 0u;
            int32x4_t v271 = 0u;
            int32x4_t v272 = 0u;
          }
          uint64_t v135 = v125 + v127;
          unsigned int v136 = v69[6];
          if (v136 == 127)
          {
            int32x4_t v138 = *(int32x4_t *)v135;
            int32x4_t v29 = *(int32x4_t *)(v135 + 16);
            int32x4_t v139 = *(int32x4_t *)(v135 + 32);
            int32x4_t v140 = *(int32x4_t *)(v135 + 48);
            int32x4_t v141 = *(int32x4_t *)(v135 + 64);
            int32x4_t v142 = *(int32x4_t *)(v135 + 80);
            int32x4_t v143 = *(int32x4_t *)(v135 + 96);
            int32x4_t v144 = *(int32x4_t *)(v135 + 112);
            int16x8_t v277 = *(int16x8_t *)v135;
            int32x4_t v278 = v139;
            int32x4_t v285 = v29;
            int32x4_t v286 = v140;
            int32x4_t v293 = v141;
            int32x4_t v294 = v143;
            int32x4_t v301 = v142;
            int32x4_t v302 = v144;
            uint64_t v137 = 128;
          }
          else if (v136 == 3)
          {
            int32x4_t v138 = (int32x4_t)vld1q_dup_f32((const float *)v135);
            int16x8_t v277 = (int16x8_t)v138;
            int32x4_t v278 = v138;
            int32x4_t v285 = v138;
            int32x4_t v286 = v138;
            int32x4_t v293 = v138;
            int32x4_t v294 = v138;
            int32x4_t v301 = v138;
            int32x4_t v302 = v138;
            uint64_t v137 = 4;
          }
          else if (v69[6])
          {
            uint64_t v137 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v277, 128, v135, v136, v128, v29);
          }
          else
          {
            uint64_t v137 = 0;
            int32x4_t v138 = 0uLL;
            int16x8_t v277 = 0u;
            int32x4_t v278 = 0u;
            int32x4_t v285 = 0u;
            int32x4_t v286 = 0u;
            int32x4_t v293 = 0u;
            int32x4_t v294 = 0u;
            int32x4_t v301 = 0u;
            int32x4_t v302 = 0u;
          }
          uint64_t v145 = v135 + v137;
          unsigned int v146 = v69[7];
          if (v146 == 127)
          {
            float32x4_t v149 = *(float32x4_t *)(v145 + 16);
            float32x4_t v150 = *(float32x4_t *)(v145 + 32);
            float32x4_t v151 = *(float32x4_t *)(v145 + 48);
            float32x4_t v152 = *(float32x4_t *)(v145 + 80);
            float32x4_t v153 = *(float32x4_t *)(v145 + 96);
            float32x4_t v154 = *(float32x4_t *)(v145 + 112);
            float32x4_t v155 = *(float32x4_t *)(v145 + 64);
            int16x8_t v279 = *(int16x8_t *)v145;
            float32x4_t v280 = v150;
            float32x4_t v287 = v149;
            float32x4_t v288 = v151;
            float32x4_t v295 = v155;
            float32x4_t v296 = v153;
            float32x4_t v303 = v152;
            float32x4_t v304 = v154;
            uint64_t v147 = v236;
            if (!v236) {
              goto LABEL_185;
            }
          }
          else if (v146 == 3)
          {
            float32x4_t v148 = vld1q_dup_f32((const float *)v145);
            int16x8_t v279 = (int16x8_t)v148;
            float32x4_t v280 = v148;
            float32x4_t v287 = v148;
            float32x4_t v288 = v148;
            float32x4_t v295 = v148;
            float32x4_t v296 = v148;
            float32x4_t v303 = v148;
            float32x4_t v304 = v148;
            uint64_t v147 = v236;
            if (!v236) {
              goto LABEL_185;
            }
          }
          else if (v69[7])
          {
            AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v279, 128, v145, v146, v138, v29);
            uint64_t v147 = v236;
            if (!v236) {
              goto LABEL_185;
            }
          }
          else
          {
            int16x8_t v279 = 0u;
            float32x4_t v280 = 0u;
            float32x4_t v287 = 0u;
            float32x4_t v288 = 0u;
            float32x4_t v295 = 0u;
            float32x4_t v296 = 0u;
            float32x4_t v303 = 0u;
            float32x4_t v304 = 0u;
            uint64_t v147 = v236;
            if (!v236) {
              goto LABEL_185;
            }
          }
          if (v237)
          {
            uint64_t v156 = 0;
            unint64_t v157 = (unint64_t)v234 << 7;
            uint64_t v158 = 8 * v235;
            float32x4_t v159 = &v241.i8[v157 + v158];
            unint64_t v160 = v232;
            uint64_t v161 = v233;
            unint64_t v162 = 8 * v237;
            if (v162 <= 1) {
              unint64_t v163 = 1;
            }
            else {
              unint64_t v163 = 8 * v237;
            }
            unint64_t v164 = v157 + v158;
            float32x4_t v165 = &v241.i8[v157 + v158];
            if (v163) {
              BOOL v166 = (v163 - 1) >> 32 == 0;
            }
            else {
              BOOL v166 = 0;
            }
            char v167 = !v166;
            uint64_t v168 = v163 & 0x7FFFFFFE0;
            uint64_t v169 = v163 & 0x7FFFFFFF8;
            float32x4_t v170 = &v242.i8[v164];
            unint64_t v171 = v232 + 1;
            uint64_t v172 = v159;
            unint64_t v173 = v232;
            do
            {
              unint64_t v174 = (char *)v160 + v161 * v156;
              unint64_t v175 = &v159[128 * v156];
              if ((unint64_t)(&v165[128 * v156] - v174) < 0x20) {
                char v176 = 1;
              }
              else {
                char v176 = v167;
              }
              if (v176)
              {
                int v177 = 0;
                goto LABEL_182;
              }
              if (v163 >= 0x20)
              {
                uint64_t v179 = v171;
                uint64_t v180 = v170;
                uint64_t v181 = v163 & 0x7FFFFFFE0;
                do
                {
                  long long v182 = *v179;
                  *((_OWORD *)v180 - 1) = *(v179 - 1);
                  *(_OWORD *)uint64_t v180 = v182;
                  v180 += 32;
                  v179 += 2;
                  v181 -= 32;
                }
                while (v181);
                if (v163 == v168) {
                  goto LABEL_165;
                }
                uint64_t v178 = v163 & 0x7FFFFFFE0;
                if ((v163 & 0x18) == 0)
                {
                  v174 += v168;
                  v175 += v168;
                  int v177 = v163 & 0xFFFFFFE0;
                  goto LABEL_182;
                }
              }
              else
              {
                uint64_t v178 = 0;
              }
              v175 += v169;
              unint64_t v183 = v178 - (v163 & 0x7FFFFFFF8);
              unint64_t v184 = (uint64_t *)((char *)v173 + v178);
              unint64_t v185 = &v172[v178];
              do
              {
                uint64_t v186 = *v184++;
                *(void *)unint64_t v185 = v186;
                v185 += 8;
                v183 += 8;
              }
              while (v183);
              if (v163 == v169) {
                goto LABEL_165;
              }
              v174 += v169;
              int v177 = v163 & 0xFFFFFFF8;
LABEL_182:
              unsigned int v187 = v177 + 1;
              do
              {
                char v188 = *v174++;
                *v175++ = v188;
              }
              while (v162 > v187++);
LABEL_165:
              ++v156;
              v170 += 128;
              unint64_t v171 = (long long *)((char *)v171 + v161);
              unint64_t v173 = (_OWORD *)((char *)v173 + v161);
              v172 += 128;
            }
            while (v156 != v147);
          }
LABEL_185:
          AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock(&v241, 128, v230, v231, v238, v239);
LABEL_186:
          uint64_t result = v226;
          if (v227) {
            uint64_t result = memcpy(v226, v73, 0x400uLL);
          }
          BOOL v23 = v34++ == v215 >> 4;
          uint64_t v30 = v223;
        }
        while (!v23);
        BOOL v23 = v18++ == v208;
      }
      while (!v23);
    }
  }
  return result;
}

uint64_t AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10, uint64_t a11, char a12)
{
  uint64_t v12 = MEMORY[0x270FA5388](a1);
  unsigned int v14 = v13;
  unsigned int v16 = v15;
  unsigned int v18 = v17;
  unsigned int v20 = v19;
  uint64_t v159 = v21;
  uint64_t v160 = v22;
  uint64_t v146 = v23;
  uint64_t v24 = v12;
  uint64_t v190 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(v12, 0);
  unsigned int v163 = v14;
  unsigned int v148 = v14 + a10 - 1;
  uint64_t v164 = v24;
  if (*(void *)(v24 + 168)) {
    int v25 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v25 = 0;
  }
  unsigned int v26 = v20 - 1;
  unsigned int v27 = v18 - 1;
  unsigned int v28 = v14 >> 3;
  unsigned int v147 = v148 >> 3;
  BOOL v29 = (v25 & 0xD00) == 0 || v25 == 768;
  int v30 = v25 & 0xE00;
  int v32 = !v29 && v30 != 1024;
  int v169 = v32;
  uint64_t result = v24;
  if (*(unsigned char *)(v24 + 232))
  {
    unsigned int v34 = *(unsigned __int8 *)(v24 + 255);
    unsigned int v35 = *(unsigned __int8 *)(v24 + 254);
    char v36 = __clz(v26);
    if (1 << v34 >= v18 || v20 >> v35)
    {
      if (!(v18 >> v34) && 1 << v35 < v20)
      {
        if (v18 < 2) {
          unsigned int v39 = 0;
        }
        else {
          unsigned int v39 = __clz(~(-1 << -(char)__clz(v27))) - 32;
        }
        v35 += v34 + v39;
        unsigned int v34 = -v39;
      }
    }
    else
    {
      unsigned int v37 = 32 - __clz(~(-1 << -v36));
      unsigned int v38 = v35 + v34;
      if (v20 < 2) {
        unsigned int v37 = 0;
      }
      unsigned int v34 = v38 - v37;
      unsigned int v35 = v37;
    }
    if (v20 < 2)
    {
      if (v35) {
        goto LABEL_27;
      }
    }
    else if (32 - __clz(~(-1 << -v36)) < v35)
    {
LABEL_27:
      BOOL v158 = 0;
LABEL_32:
      unsigned int v155 = v35 - 4;
      unsigned int v152 = v34 - 3;
      int v41 = -1 << *(unsigned char *)(*(void *)(v24 + 208) + 48);
      unsigned int v145 = (((~v41 + v20) & v41) + ~(-1 << v35)) >> v35;
      goto LABEL_33;
    }
    if (v18 < 2) {
      unsigned int v40 = 0;
    }
    else {
      unsigned int v40 = 32 - __clz(~(-1 << -(char)__clz(v27)));
    }
    BOOL v158 = v40 >= v34;
    goto LABEL_32;
  }
  BOOL v158 = 0;
  unsigned int v145 = 0;
  unsigned int v152 = 0;
  unsigned int v155 = 0;
LABEL_33:
  if (v28 <= v147)
  {
    unsigned int v157 = v16 + a9 - 1;
    unsigned int v144 = v16 >> 4;
    if (v16 >> 4 <= v157 >> 4)
    {
      unsigned int v167 = v26 >> 4;
      unsigned int v143 = v27 >> 3;
      int v166 = (v26 & 0xF) + 1;
      int v142 = (v27 & 7) + 1;
      uint32x2_t v42 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(v20, v18), (int32x2_t)0xF00000007);
      int8x8_t v43 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32(vadd_s32((int32x2_t)vshl_u32(v42, (uint32x2_t)0xFFFFFFFCFFFFFFFDLL), (int32x2_t)-1))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x2000000010, v42));
      __int32 v153 = v43.i32[0] | v43.i32[1];
      int8x8_t v151 = v43;
      BOOL v149 = v43.i32[1] != 0;
      BOOL v150 = v43.i32[0] != 0;
      unsigned int v156 = v16;
      do
      {
        unsigned int v44 = (8 * v28) | 7;
        if (8 * v28 <= v163) {
          int v45 = v163;
        }
        else {
          int v45 = 8 * v28;
        }
        if (v148 < v44) {
          unsigned int v44 = v148;
        }
        int v154 = v45 - 8 * v28;
        int v162 = v44 - v45 + 1;
        unsigned int v46 = v144;
        if (v28 == v143) {
          unsigned int v47 = v142;
        }
        else {
          unsigned int v47 = 8;
        }
        uint64_t v161 = v146 + (v45 - v163) * a11;
        unsigned int v165 = v47;
        do
        {
          unsigned int v48 = 16 * v46;
          unsigned int v49 = 16 * (v46 + 1) - 1;
          if (16 * v46 <= v16) {
            int v50 = v16;
          }
          else {
            int v50 = 16 * v46;
          }
          if (v157 < v49) {
            unsigned int v49 = v157;
          }
          int v51 = v49 - v50 + 1;
          if (v46 == v167) {
            unsigned int v52 = v166;
          }
          else {
            unsigned int v52 = 16;
          }
          BOOL v53 = 1;
          if (8 * v28 >= v163 && v48 >= v16)
          {
            int v54 = v166;
            if (v46 != v167) {
              int v54 = 16;
            }
            BOOL v53 = v51 != v54 || v162 != v47;
          }
          if (v158)
          {
            if (v155 | v152)
            {
              int v56 = 0;
              uint64_t v57 = 0;
              BOOL v58 = v155 != 0;
              int v59 = 1;
              BOOL v61 = v152 != 0;
              unsigned int v60 = v152;
              unsigned int v62 = v155;
              do
              {
                --v60;
                if (v61) {
                  v57 |= (unint64_t)(v28 & ~(-1 << v152) & v59) << v56++;
                }
                else {
                  unsigned int v60 = 0;
                }
                --v62;
                if (v58) {
                  v57 |= (unint64_t)(v46 & ~(-1 << v155) & v59) << v56++;
                }
                else {
                  unsigned int v62 = 0;
                }
                v59 *= 2;
                --v56;
                BOOL v58 = v62 != 0;
                BOOL v61 = v60 != 0;
              }
              while (v62 | v60);
            }
            else
            {
              uint64_t v57 = 0;
            }
            uint64_t v70 = *(void *)(result + 320) * ((v46 >> v155) + (v28 >> v152) * v145) + (v57 << 11);
          }
          else
          {
            if (v153)
            {
              int v63 = 0;
              uint64_t v64 = 0;
              int v65 = 1;
              BOOL v66 = v149;
              BOOL v67 = v150;
              __int32 v68 = v151.i32[0];
              __int32 v69 = v151.i32[1];
              do
              {
                --v68;
                if (v67) {
                  v64 |= (unint64_t)(v65 & v28) << v63++;
                }
                else {
                  __int32 v68 = 0;
                }
                --v69;
                if (v66) {
                  v64 |= (unint64_t)(v65 & v46) << v63++;
                }
                else {
                  __int32 v69 = 0;
                }
                v65 *= 2;
                --v63;
                BOOL v66 = v69 != 0;
                BOOL v67 = v68 != 0;
              }
              while (v69 | v68);
            }
            else
            {
              uint64_t v64 = 0;
            }
            uint64_t v70 = v64 << 11;
          }
          unsigned int v71 = *(_DWORD *)(result + 128) >> (*(unsigned char *)(result + 144) + a12);
          if (v71 <= 1) {
            unsigned int v71 = 1;
          }
          unsigned int v72 = v71 + 15;
          if (v72 < 0x20) {
            unsigned int v73 = 0;
          }
          else {
            unsigned int v73 = 32 - __clz(~(-1 << -(char)__clz((v72 >> 4) - 1)));
          }
          unsigned int v74 = *(_DWORD *)(result + 132) >> (*(unsigned char *)(result + 144) + a12);
          if (v74 <= 1) {
            unsigned int v74 = 1;
          }
          unsigned int v75 = v74 + 7;
          if (v75 < 0x10) {
            unsigned int v76 = 0;
          }
          else {
            unsigned int v76 = 32 - __clz(~(-1 << -(char)__clz((v75 >> 3) - 1)));
          }
          if (v76 | v73)
          {
            int v77 = 0;
            uint64_t v78 = 0;
            BOOL v79 = v73 != 0;
            BOOL v80 = v76 != 0;
            int v81 = 1;
            do
            {
              --v73;
              if (v79) {
                v78 |= (unint64_t)(v81 & v46) << v77++;
              }
              else {
                unsigned int v73 = 0;
              }
              --v76;
              if (v80) {
                v78 |= (unint64_t)(v81 & v28) << v77++;
              }
              else {
                unsigned int v76 = 0;
              }
              v81 *= 2;
              --v77;
              BOOL v80 = v76 != 0;
              BOOL v79 = v73 != 0;
            }
            while (v76 | v73);
          }
          else
          {
            uint64_t v78 = 0;
          }
          int v83 = v52 < 0x10 || v53;
          int32x4_t v84 = (unsigned __int8 *)(v160 + 8 * v78);
          unsigned int v82 = v50 - v16;
          uint64_t v85 = v161 + 16 * (v50 - v16);
          unsigned int v86 = (unsigned char *)(v159 + v70);
          if (v47 < 8) {
            int v87 = 1;
          }
          else {
            int v87 = v83;
          }
          __src = v86;
          if (v169)
          {
            if (!v87)
            {
              unsigned int v86 = __dst;
LABEL_123:
              int32x4_t v89 = (float64x2_t *)(v161 + 16 * v82);
              uint64_t v90 = a11;
              unint64_t v91 = (unint64_t)v86;
              int32x4_t v92 = (char *)(v160 + 8 * v78);
              goto LABEL_157;
            }
            char v88 = v52;
            memcpy(__dst, __src, sizeof(__dst));
            LOBYTE(v52) = v88;
            unsigned int v86 = __dst;
            LOBYTE(v47) = v165;
            uint64_t result = v164;
          }
          else if (!v87)
          {
            goto LABEL_123;
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE17ELj2ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = result;
          unint64_t v171 = v86;
          unsigned __int8 v179 = v52;
          unsigned __int8 v180 = v47;
          unsigned int v175 = v154;
          unsigned int v176 = v50 - v48;
          uint64_t v172 = v84;
          uint64_t v173 = v85;
          uint64_t v174 = a11;
          unsigned int v177 = v162;
          unsigned int v178 = v51;
          if (v53)
          {
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(result + 8) + 7384), block);
            goto LABEL_158;
          }
          uint64_t v93 = (uint64_t)&v86[AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v182, 256, (uint64_t)v86, *v84, v43)];
          uint64_t v95 = v93
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v183, 256, v93, v84[1], v94);
          uint64_t v97 = v95
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v186, 256, v95, v84[2], v96);
          uint64_t v99 = v97
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v187, 256, v97, v84[3], v98);
          uint64_t v101 = v99
               + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v184, 256, v99, v84[4], v100);
          uint64_t v103 = v101
               + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v185, 256, v101, v84[5], v102);
          uint64_t v105 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v188, 256, v103, v84[6], v104);
          AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v189, 256, v103 + v105, v84[7], v106);
          uint64_t v107 = v177;
          if (v177 && v178)
          {
            uint64_t v108 = 0;
            unint64_t v109 = (unint64_t)v175 << 8;
            uint64_t v110 = 16 * v176;
            int32x4_t v111 = (char *)v182 + v109 + v110;
            uint64_t v112 = v173;
            uint64_t v113 = v174;
            unint64_t v114 = 16 * v178;
            if (v114 <= 1) {
              unint64_t v115 = 1;
            }
            else {
              unint64_t v115 = 16 * v178;
            }
            unint64_t v116 = v109 + v110;
            uint64_t v117 = (char *)v182 + v109 + v110;
            if (v115) {
              BOOL v118 = (v115 - 1) >> 32 == 0;
            }
            else {
              BOOL v118 = 0;
            }
            char v119 = !v118;
            uint64_t v120 = v115 & 0xFFFFFFFE0;
            uint64_t v121 = v115 & 0xFFFFFFFF0;
            int32x4_t v122 = (char *)&v182[1] + v116;
            int32x4_t v123 = (long long *)(v173 + 16);
            int32x4_t v124 = v111;
            uint64_t v125 = v173;
            do
            {
              unsigned int v126 = (char *)(v112 + v113 * v108);
              uint64_t v127 = &v111[256 * v108];
              if ((unint64_t)(&v117[256 * v108] - v126) < 0x20) {
                char v128 = 1;
              }
              else {
                char v128 = v119;
              }
              if (v128)
              {
                int v129 = 0;
                goto LABEL_153;
              }
              if (v115 >= 0x20)
              {
                uint64_t v135 = v123;
                unsigned int v136 = v122;
                uint64_t v137 = v115 & 0xFFFFFFFE0;
                do
                {
                  long long v138 = *v135;
                  *(v136 - 1) = *(v135 - 1);
                  *unsigned int v136 = v138;
                  v136 += 2;
                  v135 += 2;
                  v137 -= 32;
                }
                while (v137);
                if (v115 == v120) {
                  goto LABEL_136;
                }
                uint64_t v130 = v115 & 0xFFFFFFFE0;
                if ((v115 & 0x10) == 0)
                {
                  v126 += v120;
                  v127 += v120;
                  int v129 = v115 & 0xFFFFFFE0;
                  goto LABEL_153;
                }
              }
              else
              {
                uint64_t v130 = 0;
              }
              v127 += v121;
              unint64_t v131 = v130 - (v115 & 0xFFFFFFFF0);
              int32x4_t v132 = (uint64_t *)(v125 + v130);
              int32x4_t v133 = &v124[v130];
              do
              {
                uint64_t v134 = *v132++;
                *(void *)int32x4_t v133 = v134;
                v133 += 8;
                v131 += 8;
              }
              while (v131);
              if (v115 == v121) {
                goto LABEL_136;
              }
              v126 += v121;
              int v129 = v115 & 0xFFFFFFF0;
LABEL_153:
              unsigned int v139 = v129 + 1;
              do
              {
                char v140 = *v126++;
                *v127++ = v140;
              }
              while (v114 > v139++);
LABEL_136:
              ++v108;
              v122 += 256;
              int32x4_t v123 = (long long *)((char *)v123 + v113);
              v125 += v113;
              v124 += 256;
            }
            while (v108 != v107);
          }
          unint64_t v91 = (unint64_t)v171;
          int32x4_t v92 = (char *)v172;
          unsigned int v52 = v179;
          unsigned int v47 = v180;
          int32x4_t v89 = v182;
          uint64_t v90 = 256;
LABEL_157:
          AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v89, v90, v91, v92, v52, v47);
LABEL_158:
          if (v169) {
            memcpy(__src, v86, 0x800uLL);
          }
          unsigned int v16 = v156;
          BOOL v29 = v46++ == v157 >> 4;
          uint64_t result = v164;
          unsigned int v47 = v165;
        }
        while (!v29);
        BOOL v29 = v28++ == v147;
      }
      while (!v29);
    }
  }
  return result;
}

uint64_t AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10, uint64_t a11, char a12)
{
  uint64_t v12 = MEMORY[0x270FA5388](a1);
  unsigned int v14 = v13;
  unsigned int v16 = v15;
  unsigned int v18 = v17;
  unsigned int v20 = v19;
  uint64_t v224 = v21;
  uint64_t v225 = v22;
  uint64_t v207 = v23;
  uint64_t v24 = v12;
  uint64_t v252 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(v12, 0);
  unsigned int v209 = v14 + a10 - 1;
  uint64_t v228 = v24;
  if (*(void *)(v24 + 168)) {
    int v25 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v25 = 0;
  }
  unsigned int v26 = v20 - 1;
  unsigned int v27 = v18 - 1;
  unsigned int v28 = v14 >> 3;
  unsigned int v208 = v209 >> 3;
  BOOL v29 = (v25 & 0xD00) == 0 || v25 == 768;
  int v30 = v25 & 0xE00;
  int v32 = !v29 && v30 != 1024;
  int v231 = v32;
  uint64_t result = v24;
  if (*(unsigned char *)(v24 + 232))
  {
    unsigned int v34 = *(unsigned __int8 *)(v24 + 255);
    unsigned int v35 = *(unsigned __int8 *)(v24 + 254);
    char v36 = __clz(v26);
    if (1 << v34 >= v18 || v20 >> v35)
    {
      if (!(v18 >> v34) && 1 << v35 < v20)
      {
        if (v18 < 2) {
          unsigned int v39 = 0;
        }
        else {
          unsigned int v39 = __clz(~(-1 << -(char)__clz(v27))) - 32;
        }
        v35 += v34 + v39;
        unsigned int v34 = -v39;
      }
    }
    else
    {
      unsigned int v37 = 32 - __clz(~(-1 << -v36));
      unsigned int v38 = v35 + v34;
      if (v20 < 2) {
        unsigned int v37 = 0;
      }
      unsigned int v34 = v38 - v37;
      unsigned int v35 = v37;
    }
    if (v20 < 2)
    {
      if (v35) {
        goto LABEL_27;
      }
    }
    else if (32 - __clz(~(-1 << -v36)) < v35)
    {
LABEL_27:
      BOOL v223 = 0;
LABEL_32:
      unsigned int v219 = v35 - 4;
      unsigned int v213 = v34 - 3;
      int v41 = -1 << *(unsigned char *)(*(void *)(v24 + 208) + 48);
      unsigned int v206 = (((~v41 + v20) & v41) + ~(-1 << v35)) >> v35;
      goto LABEL_33;
    }
    if (v18 < 2) {
      unsigned int v40 = 0;
    }
    else {
      unsigned int v40 = 32 - __clz(~(-1 << -(char)__clz(v27)));
    }
    BOOL v223 = v40 >= v34;
    goto LABEL_32;
  }
  BOOL v223 = 0;
  unsigned int v206 = 0;
  unsigned int v213 = 0;
  unsigned int v219 = 0;
LABEL_33:
  if (v28 <= v208)
  {
    unsigned int v222 = v16 + a9 - 1;
    unsigned int v205 = v16 >> 4;
    if (v16 >> 4 <= v222 >> 4)
    {
      unsigned int v230 = v26 >> 4;
      unsigned int v204 = v27 >> 3;
      int v229 = (v26 & 0xF) + 1;
      int v203 = (v27 & 7) + 1;
      int v202 = ~(-1 << v213);
      uint32x2_t v42 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(v20, v18), (int32x2_t)0xF00000007);
      *(int8x8_t *)&v43.f64[0] = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32(vadd_s32((int32x2_t)vshl_u32(v42, (uint32x2_t)0xFFFFFFFCFFFFFFFDLL), (int32x2_t)-1))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x2000000010, v42));
      int v217 = LODWORD(v43.f64[0]) | HIDWORD(v43.f64[0]);
      float64_t v212 = v43.f64[0];
      BOOL v210 = HIDWORD(v43.f64[0]) != 0;
      BOOL v211 = LODWORD(v43.f64[0]) != 0;
      uint64_t v44 = a11;
      uint64_t v45 = 4 * a11;
      uint64_t v46 = 2 * a11;
      unsigned int v221 = v16;
      do
      {
        unsigned int v47 = (8 * v28) | 7;
        if (8 * v28 <= v14) {
          int v48 = v14;
        }
        else {
          int v48 = 8 * v28;
        }
        if (v209 < v47) {
          unsigned int v47 = v14 + a10 - 1;
        }
        int v218 = v48 - 8 * v28;
        int v227 = v47 - v48 + 1;
        unsigned int v49 = v205;
        if (v28 == v204) {
          unsigned int v50 = v203;
        }
        else {
          unsigned int v50 = 8;
        }
        int v51 = v28 & v202;
        uint64_t v226 = v207 + (v48 - v14) * v44;
        do
        {
          unsigned int v52 = 16 * v49;
          unsigned int v53 = 16 * (v49 + 1) - 1;
          if (16 * v49 <= v16) {
            int v54 = v16;
          }
          else {
            int v54 = 16 * v49;
          }
          if (v222 < v53) {
            unsigned int v53 = v222;
          }
          int v55 = v53 - v54 + 1;
          if (v49 == v230) {
            unsigned int v56 = v229;
          }
          else {
            unsigned int v56 = 16;
          }
          BOOL v57 = 1;
          if (8 * v28 >= v14 && v52 >= v16)
          {
            int v58 = v229;
            if (v49 != v230) {
              int v58 = 16;
            }
            BOOL v57 = v55 != v58 || v227 != v50;
          }
          if (v223)
          {
            if (v219 | v213)
            {
              int v60 = 0;
              uint64_t v61 = 0;
              BOOL v62 = v219 != 0;
              int v63 = 1;
              BOOL v65 = v213 != 0;
              unsigned int v64 = v213;
              unsigned int v66 = v219;
              do
              {
                --v64;
                if (v65) {
                  v61 |= (unint64_t)(v51 & v63) << v60++;
                }
                else {
                  unsigned int v64 = 0;
                }
                --v66;
                if (v62) {
                  v61 |= (unint64_t)(v49 & ~(-1 << v219) & v63) << v60++;
                }
                else {
                  unsigned int v66 = 0;
                }
                v63 *= 2;
                --v60;
                BOOL v62 = v66 != 0;
                BOOL v65 = v64 != 0;
              }
              while (v66 | v64);
            }
            else
            {
              uint64_t v61 = 0;
            }
            uint64_t v74 = *(void *)(result + 320) * ((v49 >> v219) + (v28 >> v213) * v206) + (v61 << 11);
          }
          else
          {
            if (v217)
            {
              int v67 = 0;
              uint64_t v68 = 0;
              int v69 = 1;
              BOOL v70 = v210;
              BOOL v71 = v211;
              int v72 = LODWORD(v212);
              int v73 = HIDWORD(v212);
              do
              {
                --v72;
                if (v71) {
                  v68 |= (unint64_t)(v69 & v28) << v67++;
                }
                else {
                  int v72 = 0;
                }
                --v73;
                if (v70) {
                  v68 |= (unint64_t)(v69 & v49) << v67++;
                }
                else {
                  int v73 = 0;
                }
                v69 *= 2;
                --v67;
                BOOL v70 = v73 != 0;
                BOOL v71 = v72 != 0;
              }
              while (v73 | v72);
            }
            else
            {
              uint64_t v68 = 0;
            }
            uint64_t v74 = v68 << 11;
          }
          unsigned int v75 = *(_DWORD *)(result + 128) >> (*(unsigned char *)(result + 144) + a12);
          if (v75 <= 1) {
            unsigned int v75 = 1;
          }
          unsigned int v76 = v75 + 15;
          if (v76 < 0x20) {
            unsigned int v77 = 0;
          }
          else {
            unsigned int v77 = 32 - __clz(~(-1 << -(char)__clz((v76 >> 4) - 1)));
          }
          unsigned int v78 = *(_DWORD *)(result + 132) >> (*(unsigned char *)(result + 144) + a12);
          if (v78 <= 1) {
            unsigned int v78 = 1;
          }
          unsigned int v79 = v78 + 7;
          if (v79 < 0x10)
          {
            unsigned int v80 = 0;
            if (!v77)
            {
LABEL_110:
              uint64_t v82 = 0;
              goto LABEL_111;
            }
          }
          else
          {
            unsigned int v80 = 32 - __clz(~(-1 << -(char)__clz((v79 >> 3) - 1)));
            if (!(v80 | v77)) {
              goto LABEL_110;
            }
          }
          int v81 = 0;
          uint64_t v82 = 0;
          BOOL v83 = v77 != 0;
          BOOL v84 = v80 != 0;
          int v85 = 1;
          do
          {
            --v77;
            if (v83) {
              v82 |= (unint64_t)(v85 & v49) << v81++;
            }
            else {
              unsigned int v77 = 0;
            }
            --v80;
            if (v84) {
              v82 |= (unint64_t)(v85 & v28) << v81++;
            }
            else {
              unsigned int v80 = 0;
            }
            v85 *= 2;
            --v81;
            BOOL v84 = v80 != 0;
            BOOL v83 = v77 != 0;
          }
          while (v80 | v77);
LABEL_111:
          unsigned int v86 = v54 - v16;
          int v87 = v56 < 0x10 || v57;
          char v88 = (unsigned __int8 *)(v225 + 8 * v82);
          int32x4_t v89 = (float64x2_t *)(v226 + 16 * v86);
          uint64_t v90 = (float64x2_t *)(v224 + v74);
          if (v50 < 8) {
            int v91 = 1;
          }
          else {
            int v91 = v87;
          }
          if (v231)
          {
            if (v91)
            {
              int v214 = v55;
              BOOL v215 = v57;
              int v92 = v54;
              memcpy(__dst, v90, sizeof(__dst));
              int v54 = v92;
              int v55 = v214;
              BOOL v57 = v215;
              unsigned int v52 = 16 * v49;
              uint64_t v44 = a11;
              uint64_t v93 = (float64x2_t *)__dst;
              uint64_t result = v228;
LABEL_121:
              int v220 = v90;
              block[0] = MEMORY[0x263EF8330];
              block[1] = 3221225472;
              block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE17ELj2ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
              block[3] = &__block_descriptor_90_e5_v8__0l;
              block[4] = result;
              uint64_t v233 = v93;
              unsigned __int8 v241 = v56;
              unsigned __int8 v242 = v50;
              unsigned int v237 = v218;
              unsigned int v238 = v54 - v52;
              unsigned int v234 = v88;
              unsigned int v235 = v89;
              uint64_t v236 = v44;
              unsigned int v239 = v227;
              unsigned int v240 = v55;
              if (v57)
              {
                int8x8_t v94 = v93;
                dispatch_sync(*(dispatch_queue_t *)(*(void *)(result + 8) + 7384), block);
                uint64_t v93 = v94;
                uint64_t result = v228;
                unsigned int v16 = v221;
                uint64_t v46 = 2 * a11;
                uint64_t v45 = 4 * a11;
                unsigned int v95 = v49 + 1;
LABEL_123:
                uint64_t v90 = v220;
                goto LABEL_138;
              }
              int v216 = v93;
              uint64_t v125 = (uint64_t)v93
                   + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v244, 256, (uint64_t)v93, *v88, *(int8x8_t *)&v43.f64[0]);
              uint64_t v127 = v125
                   + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v245, 256, v125, v88[1], v126);
              uint64_t v129 = v127
                   + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v248, 256, v127, v88[2], v128);
              uint64_t v131 = v129
                   + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v249, 256, v129, v88[3], v130);
              uint64_t v133 = v131
                   + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v246, 256, v131, v88[4], v132);
              uint64_t v135 = v133
                   + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v247, 256, v133, v88[5], v134);
              uint64_t v137 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v250, 256, v135, v88[6], v136);
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v251, 256, v135 + v137, v88[7], v138);
              uint64_t v139 = v239;
              if (!v239 || !v240)
              {
LABEL_172:
                uint64_t v174 = 0;
                unsigned int v175 = v233;
                unsigned int v176 = (char *)v234;
                int v177 = v241;
                int v178 = v242;
                unsigned int v16 = v221;
                uint64_t result = v228;
                uint64_t v46 = 2 * a11;
                uint64_t v45 = 4 * a11;
                unsigned int v95 = v49 + 1;
                uint64_t v93 = v216;
                do
                {
                  uint64_t v197 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,2u>::kSubblockPositions[v174 + 1];
                  uint64_t v198 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,2u>::kSubblockPositions[v174];
                  unsigned int v199 = (v177 - 4 * v198) & ~((v177 - 4 * (int)v198) >> 31);
                  if (v199 >= 4) {
                    unsigned int v199 = 4;
                  }
                  unsigned int v200 = (v178 - 4 * v197) & ~((v178 - 4 * (int)v197) >> 31);
                  if (v200 >= 4) {
                    unsigned int v200 = 4;
                  }
                  if (v199) {
                    BOOL v201 = v200 == 0;
                  }
                  else {
                    BOOL v201 = 1;
                  }
                  if (v201)
                  {
                    char v196 = 0;
                  }
                  else
                  {
                    unsigned __int8 v179 = &v244[64 * v197 + 4 * v198];
                    float64x2_t v43 = *v179;
                    float64x2_t v180 = v179[1];
                    float64x2_t v181 = v179[16];
                    float64x2_t v182 = v179[17];
                    float64x2_t v183 = v179[2];
                    float64x2_t v184 = v179[3];
                    float64x2_t v185 = v179[18];
                    float64x2_t v186 = v179[32];
                    float64x2_t v187 = v179[33];
                    float64x2_t v188 = v179[34];
                    float64x2_t v189 = v179[35];
                    float64x2_t v190 = v179[19];
                    v179 += 48;
                    float64x2_t v191 = *v179;
                    float64x2_t v192 = v179[1];
                    float64x2_t v193 = v179[2];
                    float64x2_t v194 = v179[3];
                    float64x2_t *v175 = v43;
                    v175[1] = v180;
                    v175[2] = v181;
                    v175[3] = v182;
                    v175[4] = v183;
                    v175[5] = v184;
                    v175[6] = v185;
                    v175[7] = v190;
                    v175[8] = v186;
                    v175[9] = v187;
                    v175[10] = v191;
                    v175[11] = v192;
                    uint64_t v195 = v175 + 12;
                    v175 += 16;
                    char v196 = -1;
                    *uint64_t v195 = v188;
                    v195[1] = v189;
                    v195[2] = v193;
                    v195[3] = v194;
                  }
                  *v176++ = v196;
                  v174 += 2;
                }
                while (v174 != 16);
                goto LABEL_123;
              }
              uint64_t v140 = 0;
              unint64_t v141 = (unint64_t)v237 << 8;
              uint64_t v142 = 16 * v238;
              unsigned int v143 = (char *)v244 + v141 + v142;
              unsigned int v144 = v235;
              uint64_t v145 = v236;
              unint64_t v146 = 16 * v240;
              if (v146 <= 1) {
                unint64_t v147 = 1;
              }
              else {
                unint64_t v147 = 16 * v240;
              }
              unint64_t v148 = v141 + v142;
              BOOL v149 = (char *)v244 + v141 + v142;
              if (v147) {
                BOOL v150 = (v147 - 1) >> 32 == 0;
              }
              else {
                BOOL v150 = 0;
              }
              char v151 = !v150;
              uint64_t v152 = v147 & 0xFFFFFFFE0;
              uint64_t v153 = v147 & 0xFFFFFFFF0;
              int v154 = (float64x2_t *)((char *)&v244[1] + v148);
              unsigned int v155 = v235 + 1;
              unsigned int v156 = v143;
              unsigned int v157 = v235;
              while (2)
              {
                BOOL v158 = (char *)v144 + v145 * v140;
                uint64_t v159 = &v143[256 * v140];
                if ((unint64_t)(&v149[256 * v140] - v158) < 0x20) {
                  char v160 = 1;
                }
                else {
                  char v160 = v151;
                }
                if (v160)
                {
                  int v161 = 0;
LABEL_169:
                  unsigned int v171 = v161 + 1;
                  do
                  {
                    char v172 = *v158++;
                    *v159++ = v172;
                  }
                  while (v146 > v171++);
                }
                else
                {
                  if (v147 >= 0x20)
                  {
                    unsigned int v167 = v155;
                    uint64_t v168 = v154;
                    uint64_t v169 = v147 & 0xFFFFFFFE0;
                    do
                    {
                      float64x2_t v43 = v167[-1];
                      float64x2_t v170 = *v167;
                      v168[-1] = v43;
                      *uint64_t v168 = v170;
                      v168 += 2;
                      v167 += 2;
                      v169 -= 32;
                    }
                    while (v169);
                    if (v147 == v152) {
                      goto LABEL_152;
                    }
                    uint64_t v162 = v147 & 0xFFFFFFFE0;
                    if ((v147 & 0x10) == 0)
                    {
                      v158 += v152;
                      v159 += v152;
                      int v161 = v147 & 0xFFFFFFE0;
                      goto LABEL_169;
                    }
                  }
                  else
                  {
                    uint64_t v162 = 0;
                  }
                  v159 += v153;
                  unint64_t v163 = v162 - (v147 & 0xFFFFFFFF0);
                  uint64_t v164 = (double *)((char *)v157->f64 + v162);
                  unsigned int v165 = &v156[v162];
                  do
                  {
                    float64_t v166 = *v164++;
                    v43.f64[0] = v166;
                    *(float64_t *)unsigned int v165 = v166;
                    v165 += 8;
                    v163 += 8;
                  }
                  while (v163);
                  if (v147 != v153)
                  {
                    v158 += v153;
                    int v161 = v147 & 0xFFFFFFF0;
                    goto LABEL_169;
                  }
                }
LABEL_152:
                ++v140;
                v154 += 16;
                unsigned int v155 = (float64x2_t *)((char *)v155 + v145);
                unsigned int v157 = (float64x2_t *)((char *)v157 + v145);
                v156 += 256;
                if (v140 == v139) {
                  goto LABEL_172;
                }
                continue;
              }
            }
            uint64_t v93 = (float64x2_t *)__dst;
          }
          else
          {
            uint64_t v93 = v90;
            if (v91) {
              goto LABEL_121;
            }
          }
          uint64_t v96 = 0;
          uint64_t v97 = v93;
          do
          {
            uint64_t v120 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,2u>::kSubblockPositions[v96 + 1];
            uint64_t v121 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,2u>::kSubblockPositions[v96];
            unsigned int v122 = (v56 - 4 * v121) & ~((int)(v56 - 4 * v121) >> 31);
            if (v122 >= 4) {
              unsigned int v122 = 4;
            }
            unsigned int v123 = (v50 - 4 * v120) & ~((int)(v50 - 4 * v120) >> 31);
            if (v123 >= 4) {
              unsigned int v123 = 4;
            }
            if (v122) {
              BOOL v124 = v123 == 0;
            }
            else {
              BOOL v124 = 1;
            }
            if (v124)
            {
              char v119 = 0;
            }
            else
            {
              int8x8_t v98 = (float64x2_t *)((char *)&v89[4 * v121] + v45 * v120);
              uint64_t v99 = (float64x2_t *)((char *)v98 + v44);
              float64x2_t v43 = *v98;
              float64x2_t v101 = v98[1];
              float64x2_t v102 = v98[2];
              float64x2_t v103 = v98[3];
              int8x8_t v100 = (float64x2_t *)((char *)v98 + v46);
              float64x2_t v104 = v102;
              float64x2_t v105 = v103;
              float64x2_t v107 = *v100;
              float64x2_t v108 = v100[1];
              float64x2_t v109 = v100[2];
              float64x2_t v110 = v100[3];
              int8x8_t v106 = (float64x2_t *)((char *)v100 + v44);
              float64x2_t v111 = v99[2];
              float64x2_t v112 = v99[3];
              float64x2_t v113 = *v106;
              float64x2_t v114 = v106[1];
              float64x2_t v115 = *v99;
              float64x2_t v116 = v99[1];
              float64x2_t v117 = v106[2];
              float64x2_t v118 = v106[3];
              *uint64_t v97 = v43;
              v97[1] = v101;
              v97[2] = v115;
              v97[3] = v116;
              v97[4] = v104;
              v97[5] = v105;
              v97[6] = v111;
              v97[7] = v112;
              v97[8] = v107;
              v97[9] = v108;
              v97[10] = v113;
              v97[11] = v114;
              v97[12] = v109;
              v97[13] = v110;
              v97[14] = v117;
              v97[15] = v118;
              v97 += 16;
              char v119 = -1;
            }
            *v88++ = v119;
            v96 += 2;
          }
          while (v96 != 16);
          unsigned int v16 = v221;
          unsigned int v95 = v49 + 1;
LABEL_138:
          int v51 = v28 & v202;
          if (v231)
          {
            memcpy(v90, v93, 0x800uLL);
            uint64_t v46 = 2 * a11;
            uint64_t v45 = 4 * a11;
            uint64_t result = v228;
          }
          BOOL v29 = v49 == v222 >> 4;
          unsigned int v49 = v95;
        }
        while (!v29);
        BOOL v29 = v28++ == v208;
      }
      while (!v29);
    }
  }
  return result;
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10, uint64_t a11, int a12)
{
  uint64_t v12 = MEMORY[0x270FA5388](a1);
  unsigned int v14 = v13;
  unsigned int v16 = v15;
  unsigned int v18 = v17;
  unsigned int v20 = v19;
  uint64_t v162 = v21;
  uint64_t v163 = v22;
  uint64_t v152 = v23;
  uint64_t v24 = v12;
  uint64_t v193 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(v12, 0);
  uint64_t v25 = v24;
  unsigned int v167 = v14;
  unsigned int v26 = v14 >> 3;
  unsigned int v151 = v14 + a10 - 1;
  unsigned int v153 = v151 >> 3;
  unsigned int v27 = *(unsigned __int8 *)(*(void *)(v24 + 208) + 88);
  unsigned int v28 = *(_DWORD *)(v24 + 112);
  uint64_t v168 = v25;
  if (*(void *)(v25 + 168))
  {
    __int16 CacheMode = IOSurfaceGetCacheMode();
    uint64_t v25 = v168;
    int v30 = CacheMode & 0xF00;
  }
  else
  {
    int v30 = 0;
  }
  BOOL v31 = (v30 & 0xD00) == 0 || v30 == 768;
  int v32 = v30 & 0xE00;
  int v34 = !v31 && v32 != 1024;
  int v172 = v34;
  BOOL isLevelTiled = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::isLevelTiled(v25, *(_DWORD *)(v25 + 144) + a12);
  uint64_t v36 = v168;
  BOOL v161 = isLevelTiled;
  if (v26 <= v153)
  {
    unsigned int v160 = v16 + a9 - 1;
    unsigned int v150 = v16 >> 4;
    if (v16 >> 4 <= v160 >> 4)
    {
      unsigned int v147 = v20 - 1;
      unsigned int v149 = (v18 - 1) >> 3;
      int v170 = ((v20 - 1) & 0xF) + 1;
      unsigned int v171 = (v20 - 1) >> 4;
      int v148 = ((v18 - 1) & 7) + 1;
      uint32x2_t v37 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(v20, v18), (int32x2_t)0xF00000007);
      int8x8_t v38 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32(vadd_s32((int32x2_t)vshl_u32(v37, (uint32x2_t)0xFFFFFFFCFFFFFFFDLL), (int32x2_t)-1))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x2000000010, v37));
      __int32 v158 = v38.i32[0] | v38.i32[1];
      int8x8_t v157 = v38;
      BOOL v155 = v38.i32[1] != 0;
      BOOL v156 = v38.i32[0] != 0;
      unint64_t v146 = 8 * v28 * (unint64_t)v27;
      unsigned int v159 = v16;
      do
      {
        unsigned int v39 = (8 * v26) | 7;
        if (8 * v26 <= v167) {
          int v40 = v167;
        }
        else {
          int v40 = 8 * v26;
        }
        unsigned int v41 = v150;
        if (v151 < v39) {
          unsigned int v39 = v151;
        }
        int v154 = v40 - 8 * v26;
        int v165 = v39 - v40 + 1;
        unsigned int v166 = 8 * v26;
        if (v26 == v149) {
          unsigned int v42 = v148;
        }
        else {
          unsigned int v42 = 8;
        }
        uint64_t v164 = v152 + (v40 - v167) * a11;
        unsigned int v169 = v42;
        do
        {
          unsigned int v43 = 16 * v41;
          unsigned int v44 = 16 * (v41 + 1) - 1;
          if (16 * v41 <= v16) {
            int v45 = v16;
          }
          else {
            int v45 = 16 * v41;
          }
          if (v160 < v44) {
            unsigned int v44 = v160;
          }
          int v46 = v44 - v45 + 1;
          if (v41 == v171) {
            unsigned int v47 = v170;
          }
          else {
            unsigned int v47 = 16;
          }
          BOOL v48 = 1;
          if (v166 >= v167 && v43 >= v16)
          {
            int v49 = v170;
            if (v41 != v171) {
              int v49 = 16;
            }
            BOOL v48 = v46 != v49 || v165 != v42;
          }
          if (v161)
          {
            unsigned int v70 = 0;
            uint64_t v71 = v146 >> (*(unsigned char *)(v36 + 57) != 0);
            char v72 = 1;
            if (v71 > 127)
            {
              if (v71 > 511)
              {
                if (v71 == 512)
                {
                  char v73 = 0;
                  unsigned int v70 = 16;
                  unsigned int v74 = 16;
                }
                else
                {
                  char v73 = 1;
                  unsigned int v74 = 0;
                  if (v71 == 1024)
                  {
                    unsigned int v74 = 8;
                    unsigned int v70 = 16;
                  }
                }
              }
              else if (v71 == 128)
              {
                char v72 = 0;
                char v73 = 0;
                unsigned int v70 = 32;
                unsigned int v74 = 32;
              }
              else
              {
                char v73 = 1;
                unsigned int v74 = 0;
                if (v71 == 256)
                {
                  char v72 = 0;
                  char v73 = 0;
                  unsigned int v74 = 16;
                  unsigned int v70 = 32;
                }
              }
            }
            else
            {
              char v73 = 1;
              unsigned int v74 = 0;
              switch(v71)
              {
                case 4:
                  char v72 = 0;
                  char v73 = 0;
                  unsigned int v74 = 128;
                  unsigned int v70 = 256;
                  break;
                case 5:
                case 6:
                case 7:
                case 9:
                case 10:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 17:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                  break;
                case 8:
                  char v72 = 0;
                  char v73 = 0;
                  unsigned int v70 = 128;
                  unsigned int v74 = 128;
                  break;
                case 16:
                  char v72 = 0;
                  char v73 = 0;
                  unsigned int v74 = 64;
                  unsigned int v70 = 128;
                  break;
                case 32:
                  char v72 = 0;
                  char v73 = 0;
                  unsigned int v70 = 64;
                  unsigned int v74 = 64;
                  break;
                default:
                  if (v71 == 64)
                  {
                    char v72 = 0;
                    char v73 = 0;
                    unsigned int v74 = 32;
                    unsigned int v70 = 64;
                  }
                  break;
              }
            }
            unsigned int v135 = (v70 >> 4) - 1;
            if (v72) {
              unsigned int v136 = 0;
            }
            else {
              unsigned int v136 = 32 - __clz(~(-1 << -(char)__clz(v135)));
            }
            unsigned int v137 = (v74 >> 3) - 1;
            if (v73)
            {
              unsigned int v138 = 0;
              if (v136) {
                goto LABEL_149;
              }
            }
            else
            {
              unsigned int v138 = 32 - __clz(~(-1 << -(char)__clz(v137)));
              if (v138 | v136)
              {
LABEL_149:
                int v139 = 0;
                uint64_t v140 = 0;
                int v141 = v41 & v135;
                int v142 = v26 & v137;
                BOOL v143 = v138 != 0;
                BOOL v144 = v136 != 0;
                int v145 = 1;
                do
                {
                  --v138;
                  if (v143) {
                    v140 |= (unint64_t)(v145 & v142) << v139++;
                  }
                  else {
                    unsigned int v138 = 0;
                  }
                  --v136;
                  if (v144) {
                    v140 |= (unint64_t)(v145 & v141) << v139++;
                  }
                  else {
                    unsigned int v136 = 0;
                  }
                  v145 *= 2;
                  --v139;
                  BOOL v144 = v136 != 0;
                  BOOL v143 = v138 != 0;
                }
                while (v136 | v138);
                goto LABEL_161;
              }
            }
            uint64_t v140 = 0;
LABEL_161:
            unint64_t v58 = ((unint64_t)(v43 / v70 + v166 / v74 * ((v70 + v147) / v70)) << 14) + (v140 << 11);
            goto LABEL_59;
          }
          if (v158)
          {
            int v51 = 0;
            uint64_t v52 = 0;
            int v53 = 1;
            BOOL v54 = v155;
            BOOL v55 = v156;
            __int32 v56 = v157.i32[0];
            __int32 v57 = v157.i32[1];
            do
            {
              --v56;
              if (v55) {
                v52 |= (unint64_t)(v53 & v26) << v51++;
              }
              else {
                __int32 v56 = 0;
              }
              --v57;
              if (v54) {
                v52 |= (unint64_t)(v53 & v41) << v51++;
              }
              else {
                __int32 v57 = 0;
              }
              v53 *= 2;
              --v51;
              BOOL v54 = v57 != 0;
              BOOL v55 = v56 != 0;
            }
            while (v57 | v56);
          }
          else
          {
            uint64_t v52 = 0;
          }
          unint64_t v58 = v52 << 11;
LABEL_59:
          unsigned int v59 = *(_DWORD *)(v36 + 128) >> (*(unsigned char *)(v36 + 144) + a12);
          if (v59 <= 1) {
            unsigned int v59 = 1;
          }
          unsigned int v60 = v59 + 15;
          if (v60 < 0x20) {
            unsigned int v61 = 0;
          }
          else {
            unsigned int v61 = 32 - __clz(~(-1 << -(char)__clz((v60 >> 4) - 1)));
          }
          unsigned int v62 = *(_DWORD *)(v36 + 132) >> (*(unsigned char *)(v36 + 144) + a12);
          if (v62 <= 1) {
            unsigned int v62 = 1;
          }
          unsigned int v63 = v62 + 7;
          if (v63 < 0x10)
          {
            unsigned int v64 = 0;
            if (!v61)
            {
LABEL_81:
              uint64_t v66 = 0;
              goto LABEL_82;
            }
          }
          else
          {
            unsigned int v64 = 32 - __clz(~(-1 << -(char)__clz((v63 >> 3) - 1)));
            if (!(v64 | v61)) {
              goto LABEL_81;
            }
          }
          int v65 = 0;
          uint64_t v66 = 0;
          BOOL v67 = v61 != 0;
          BOOL v68 = v64 != 0;
          int v69 = 1;
          do
          {
            --v61;
            if (v67) {
              v66 |= (unint64_t)(v69 & v41) << v65++;
            }
            else {
              unsigned int v61 = 0;
            }
            --v64;
            if (v68) {
              v66 |= (unint64_t)(v69 & v26) << v65++;
            }
            else {
              unsigned int v64 = 0;
            }
            v69 *= 2;
            --v65;
            BOOL v68 = v64 != 0;
            BOOL v67 = v61 != 0;
          }
          while (v64 | v61);
LABEL_82:
          int v75 = v47 < 0x10 || v48;
          unsigned int v76 = (char *)(v163 + 8 * v66);
          unint64_t v77 = v164 + 16 * (v45 - v16);
          unsigned int v78 = (void *)(v162 + v58);
          if (v42 < 8) {
            int v79 = 1;
          }
          else {
            int v79 = v75;
          }
          if (v172)
          {
            if (!v79)
            {
              int v85 = __dst;
LABEL_95:
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock(v77, a11, (unint64_t)v85, v76, v47, v42);
              unsigned int v16 = v159;
              goto LABEL_129;
            }
            unsigned int v80 = v78;
            char v81 = v47;
            int v82 = v46;
            BOOL v83 = v78;
            BOOL v84 = v48;
            memcpy(__dst, v80, sizeof(__dst));
            BOOL v48 = v84;
            unsigned int v78 = v83;
            int v46 = v82;
            LOBYTE(v47) = v81;
            unsigned int v43 = 16 * v41;
            int v85 = __dst;
            LOBYTE(v42) = v169;
            uint64_t v36 = v168;
          }
          else
          {
            int v85 = v78;
            if (!v79) {
              goto LABEL_95;
            }
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE17ELj2ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = v36;
          uint64_t v174 = v85;
          unsigned __int8 v182 = v47;
          unsigned __int8 v183 = v42;
          unsigned int v178 = v154;
          unsigned int v179 = v45 - v43;
          unsigned int v175 = v76;
          unint64_t v176 = v77;
          uint64_t v177 = a11;
          unsigned int v180 = v165;
          unsigned int v181 = v46;
          if (v48)
          {
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(v36 + 8) + 7384), block);
            unsigned int v16 = v159;
            goto LABEL_129;
          }
          uint64_t v86 = (uint64_t)&v85[AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v185, 256, (uint64_t)v85, *v76, v38)];
          uint64_t v88 = v86
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v186, 256, v86, v76[1], v87);
          uint64_t v90 = v88
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v189, 256, v88, v76[2], v89);
          uint64_t v92 = v90
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v190, 256, v90, v76[3], v91);
          uint64_t v94 = v92
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v187, 256, v92, v76[4], v93);
          uint64_t v96 = v94
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v188, 256, v94, v76[5], v95);
          uint64_t v98 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v191, 256, v96, v76[6], v97);
          AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v192, 256, v96 + v98, v76[7], v99);
          uint64_t v100 = v180;
          unsigned int v16 = v159;
          if (v180 && v181)
          {
            uint64_t v101 = 0;
            unint64_t v102 = (unint64_t)v178 << 8;
            uint64_t v103 = 16 * v179;
            float64x2_t v104 = (char *)v185 + v102 + v103;
            unint64_t v105 = v176;
            uint64_t v106 = v177;
            unint64_t v107 = 16 * v181;
            if (v107 <= 1) {
              unint64_t v108 = 1;
            }
            else {
              unint64_t v108 = 16 * v181;
            }
            unint64_t v109 = v102 + v103;
            float64x2_t v110 = (char *)v185 + v102 + v103;
            if (v108) {
              BOOL v111 = (v108 - 1) >> 32 == 0;
            }
            else {
              BOOL v111 = 0;
            }
            char v112 = !v111;
            uint64_t v113 = v108 & 0xFFFFFFFE0;
            uint64_t v114 = v108 & 0xFFFFFFFF0;
            float64x2_t v115 = (char *)&v185[1] + v109;
            float64x2_t v116 = (long long *)(v176 + 16);
            float64x2_t v117 = v104;
            unint64_t v118 = v176;
            do
            {
              char v119 = (char *)(v105 + v106 * v101);
              uint64_t v120 = &v104[256 * v101];
              if ((unint64_t)(&v110[256 * v101] - v119) < 0x20) {
                char v121 = 1;
              }
              else {
                char v121 = v112;
              }
              if (v121)
              {
                int v122 = 0;
                goto LABEL_125;
              }
              if (v108 >= 0x20)
              {
                int8x8_t v128 = v116;
                uint64_t v129 = v115;
                uint64_t v130 = v108 & 0xFFFFFFFE0;
                do
                {
                  long long v131 = *v128;
                  *(v129 - 1) = *(v128 - 1);
                  *uint64_t v129 = v131;
                  v129 += 2;
                  v128 += 2;
                  v130 -= 32;
                }
                while (v130);
                if (v108 == v113) {
                  goto LABEL_108;
                }
                uint64_t v123 = v108 & 0xFFFFFFFE0;
                if ((v108 & 0x10) == 0)
                {
                  v119 += v113;
                  v120 += v113;
                  int v122 = v108 & 0xFFFFFFE0;
                  goto LABEL_125;
                }
              }
              else
              {
                uint64_t v123 = 0;
              }
              v120 += v114;
              unint64_t v124 = v123 - (v108 & 0xFFFFFFFF0);
              uint64_t v125 = (uint64_t *)(v118 + v123);
              int8x8_t v126 = &v117[v123];
              do
              {
                uint64_t v127 = *v125++;
                *(void *)int8x8_t v126 = v127;
                v126 += 8;
                v124 += 8;
              }
              while (v124);
              if (v108 == v114) {
                goto LABEL_108;
              }
              v119 += v114;
              int v122 = v108 & 0xFFFFFFF0;
LABEL_125:
              unsigned int v132 = v122 + 1;
              do
              {
                char v133 = *v119++;
                *v120++ = v133;
              }
              while (v107 > v132++);
LABEL_108:
              ++v101;
              v115 += 256;
              float64x2_t v116 = (long long *)((char *)v116 + v106);
              v118 += v106;
              v117 += 256;
            }
            while (v101 != v100);
          }
          AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v185, 256, (unint64_t)v174, v175, v182, v183);
LABEL_129:
          if (v172) {
            memcpy(v78, v85, 0x800uLL);
          }
          BOOL v31 = v41++ == v160 >> 4;
          uint64_t v36 = v168;
          unsigned int v42 = v169;
        }
        while (!v31);
        BOOL v31 = v26++ == v153;
      }
      while (!v31);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10, uint64_t a11, int a12)
{
  uint64_t v12 = MEMORY[0x270FA5388](a1);
  unsigned int v14 = v13;
  unsigned int v16 = v15;
  unsigned int v18 = v17;
  unsigned int v20 = v19;
  uint64_t v224 = v21;
  uint64_t v225 = v22;
  uint64_t v210 = v23;
  uint64_t v24 = v12;
  uint64_t v254 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(v12, 0);
  unsigned int v229 = v14;
  unsigned int v25 = v14 >> 3;
  unsigned int v209 = v14 + a10 - 1;
  unsigned int v211 = v209 >> 3;
  unsigned int v26 = *(unsigned __int8 *)(*(void *)(v24 + 208) + 88);
  unsigned int v27 = *(_DWORD *)(v24 + 112);
  uint64_t v230 = v24;
  if (*(void *)(v24 + 168)) {
    int v28 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v28 = 0;
  }
  BOOL v29 = (v28 & 0xD00) == 0 || v28 == 768;
  int v30 = v28 & 0xE00;
  int v32 = !v29 && v30 != 1024;
  int v233 = v32;
  BOOL isLevelTiled = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::isLevelTiled(v24, *(_DWORD *)(v24 + 144) + a12);
  uint64_t v34 = v24;
  BOOL v223 = isLevelTiled;
  if (v25 <= v211)
  {
    unsigned int v222 = v16 + a9 - 1;
    unsigned int v208 = v16 >> 4;
    if (v16 >> 4 <= v222 >> 4)
    {
      unsigned int v205 = v20 - 1;
      unsigned int v232 = (v20 - 1) >> 4;
      int v231 = ((v20 - 1) & 0xF) + 1;
      int v206 = ((v18 - 1) & 7) + 1;
      unsigned int v207 = (v18 - 1) >> 3;
      uint32x2_t v35 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(v20, v18), (int32x2_t)0xF00000007);
      *(int8x8_t *)&v36.f64[0] = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32(vadd_s32((int32x2_t)vshl_u32(v35, (uint32x2_t)0xFFFFFFFCFFFFFFFDLL), (int32x2_t)-1))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x2000000010, v35));
      int v220 = LODWORD(v36.f64[0]) | HIDWORD(v36.f64[0]);
      float64_t v218 = v36.f64[0];
      BOOL v216 = HIDWORD(v36.f64[0]) != 0;
      BOOL v217 = LODWORD(v36.f64[0]) != 0;
      uint64_t v37 = a11;
      unint64_t v204 = 8 * v27 * (unint64_t)v26;
      uint64_t v38 = 4 * a11;
      uint64_t v39 = 2 * a11;
      unsigned int v221 = v16;
      do
      {
        unsigned int v40 = (8 * v25) | 7;
        if (8 * v25 <= v229) {
          int v41 = v229;
        }
        else {
          int v41 = 8 * v25;
        }
        unsigned int v42 = v208;
        if (v209 < v40) {
          unsigned int v40 = v209;
        }
        int v215 = v41 - 8 * v25;
        int v227 = v40 - v41 + 1;
        unsigned int v228 = 8 * v25;
        if (v25 == v207) {
          unsigned int v43 = v206;
        }
        else {
          unsigned int v43 = 8;
        }
        uint64_t v226 = v210 + (v41 - v229) * v37;
        unsigned int v212 = v43;
        do
        {
          unsigned int v44 = 16 * v42;
          unsigned int v45 = 16 * (v42 + 1) - 1;
          if (16 * v42 <= v16) {
            int v46 = v16;
          }
          else {
            int v46 = 16 * v42;
          }
          if (v222 < v45) {
            unsigned int v45 = v222;
          }
          int v47 = v45 - v46 + 1;
          if (v42 == v232) {
            unsigned int v48 = v231;
          }
          else {
            unsigned int v48 = 16;
          }
          BOOL v49 = 1;
          if (v228 >= v229 && v44 >= v16)
          {
            int v50 = v231;
            if (v42 != v232) {
              int v50 = 16;
            }
            BOOL v49 = v47 != v50 || v227 != v43;
          }
          if (v223)
          {
            unsigned int v71 = 0;
            uint64_t v72 = v204 >> (*(unsigned char *)(v34 + 57) != 0);
            char v73 = 1;
            if (v72 > 127)
            {
              if (v72 > 511)
              {
                if (v72 == 512)
                {
                  char v74 = 0;
                  unsigned int v71 = 16;
                  unsigned int v75 = 16;
                }
                else
                {
                  char v74 = 1;
                  unsigned int v75 = 0;
                  if (v72 == 1024)
                  {
                    unsigned int v75 = 8;
                    unsigned int v71 = 16;
                  }
                }
              }
              else if (v72 == 128)
              {
                char v73 = 0;
                char v74 = 0;
                unsigned int v71 = 32;
                unsigned int v75 = 32;
              }
              else
              {
                char v74 = 1;
                unsigned int v75 = 0;
                if (v72 == 256)
                {
                  char v73 = 0;
                  char v74 = 0;
                  unsigned int v75 = 16;
                  unsigned int v71 = 32;
                }
              }
            }
            else
            {
              char v74 = 1;
              unsigned int v75 = 0;
              switch(v72)
              {
                case 4:
                  char v73 = 0;
                  char v74 = 0;
                  unsigned int v75 = 128;
                  unsigned int v71 = 256;
                  break;
                case 5:
                case 6:
                case 7:
                case 9:
                case 10:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 17:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                  break;
                case 8:
                  char v73 = 0;
                  char v74 = 0;
                  unsigned int v71 = 128;
                  unsigned int v75 = 128;
                  break;
                case 16:
                  char v73 = 0;
                  char v74 = 0;
                  unsigned int v75 = 64;
                  unsigned int v71 = 128;
                  break;
                case 32:
                  char v73 = 0;
                  char v74 = 0;
                  unsigned int v71 = 64;
                  unsigned int v75 = 64;
                  break;
                default:
                  if (v72 == 64)
                  {
                    char v73 = 0;
                    char v74 = 0;
                    unsigned int v75 = 32;
                    unsigned int v71 = 64;
                  }
                  break;
              }
            }
            unsigned int v193 = (v71 >> 4) - 1;
            if (v73) {
              unsigned int v194 = 0;
            }
            else {
              unsigned int v194 = 32 - __clz(~(-1 << -(char)__clz(v193)));
            }
            unsigned int v195 = (v75 >> 3) - 1;
            if (v74)
            {
              unsigned int v196 = 0;
              if (v194) {
                goto LABEL_174;
              }
            }
            else
            {
              unsigned int v196 = 32 - __clz(~(-1 << -(char)__clz(v195)));
              if (v196 | v194)
              {
LABEL_174:
                int v197 = 0;
                uint64_t v198 = 0;
                int v199 = v42 & v193;
                int v200 = v25 & v195;
                BOOL v201 = v196 != 0;
                BOOL v202 = v194 != 0;
                int v203 = 1;
                do
                {
                  --v196;
                  if (v201) {
                    v198 |= (unint64_t)(v203 & v200) << v197++;
                  }
                  else {
                    unsigned int v196 = 0;
                  }
                  --v194;
                  if (v202) {
                    v198 |= (unint64_t)(v203 & v199) << v197++;
                  }
                  else {
                    unsigned int v194 = 0;
                  }
                  v203 *= 2;
                  --v197;
                  BOOL v202 = v194 != 0;
                  BOOL v201 = v196 != 0;
                }
                while (v194 | v196);
                goto LABEL_186;
              }
            }
            uint64_t v198 = 0;
LABEL_186:
            unint64_t v59 = ((unint64_t)(v44 / v71 + v228 / v75 * ((v71 + v205) / v71)) << 14) + (v198 << 11);
            goto LABEL_59;
          }
          if (v220)
          {
            int v52 = 0;
            uint64_t v53 = 0;
            int v54 = 1;
            BOOL v55 = v216;
            BOOL v56 = v217;
            int v57 = LODWORD(v218);
            int v58 = HIDWORD(v218);
            do
            {
              --v57;
              if (v56) {
                v53 |= (unint64_t)(v54 & v25) << v52++;
              }
              else {
                int v57 = 0;
              }
              --v58;
              if (v55) {
                v53 |= (unint64_t)(v54 & v42) << v52++;
              }
              else {
                int v58 = 0;
              }
              v54 *= 2;
              --v52;
              BOOL v55 = v58 != 0;
              BOOL v56 = v57 != 0;
            }
            while (v58 | v57);
          }
          else
          {
            uint64_t v53 = 0;
          }
          unint64_t v59 = v53 << 11;
LABEL_59:
          unsigned int v60 = *(_DWORD *)(v34 + 128) >> (*(unsigned char *)(v34 + 144) + a12);
          if (v60 <= 1) {
            unsigned int v60 = 1;
          }
          unsigned int v61 = v60 + 15;
          if (v61 < 0x20) {
            unsigned int v62 = 0;
          }
          else {
            unsigned int v62 = 32 - __clz(~(-1 << -(char)__clz((v61 >> 4) - 1)));
          }
          unsigned int v63 = *(_DWORD *)(v34 + 132) >> (*(unsigned char *)(v34 + 144) + a12);
          if (v63 <= 1) {
            unsigned int v63 = 1;
          }
          unsigned int v64 = v63 + 7;
          if (v64 < 0x10)
          {
            unsigned int v65 = 0;
            if (!v62)
            {
LABEL_81:
              uint64_t v67 = 0;
              goto LABEL_82;
            }
          }
          else
          {
            unsigned int v65 = 32 - __clz(~(-1 << -(char)__clz((v64 >> 3) - 1)));
            if (!(v65 | v62)) {
              goto LABEL_81;
            }
          }
          int v66 = 0;
          uint64_t v67 = 0;
          BOOL v68 = v62 != 0;
          BOOL v69 = v65 != 0;
          int v70 = 1;
          do
          {
            --v62;
            if (v68) {
              v67 |= (unint64_t)(v70 & v42) << v66++;
            }
            else {
              unsigned int v62 = 0;
            }
            --v65;
            if (v69) {
              v67 |= (unint64_t)(v70 & v25) << v66++;
            }
            else {
              unsigned int v65 = 0;
            }
            v70 *= 2;
            --v66;
            BOOL v69 = v65 != 0;
            BOOL v68 = v62 != 0;
          }
          while (v65 | v62);
LABEL_82:
          unsigned int v76 = v46 - v16;
          int v77 = v48 < 0x10 || v49;
          unsigned int v78 = (unsigned __int8 *)(v225 + 8 * v67);
          int v79 = (float64x2_t *)(v226 + 16 * v76);
          unsigned int v80 = (float64x2_t *)(v224 + v59);
          if (v43 < 8) {
            int v81 = 1;
          }
          else {
            int v81 = v77;
          }
          if (v233)
          {
            if (!v81)
            {
              int v85 = (float64x2_t *)__dst;
LABEL_96:
              uint64_t v87 = 0;
              uint64_t v88 = v85;
              do
              {
                uint64_t v111 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,2u>::kSubblockPositions[v87 + 1];
                uint64_t v112 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,2u>::kSubblockPositions[v87];
                unsigned int v113 = (v48 - 4 * v112) & ~((int)(v48 - 4 * v112) >> 31);
                if (v113 >= 4) {
                  unsigned int v113 = 4;
                }
                unsigned int v114 = (v43 - 4 * v111) & ~((int)(v43 - 4 * v111) >> 31);
                if (v114 >= 4) {
                  unsigned int v114 = 4;
                }
                if (v113) {
                  BOOL v115 = v114 == 0;
                }
                else {
                  BOOL v115 = 1;
                }
                if (v115)
                {
                  char v110 = 0;
                }
                else
                {
                  int8x8_t v89 = (float64x2_t *)((char *)&v79[4 * v112] + v38 * v111);
                  uint64_t v90 = (float64x2_t *)((char *)v89 + v37);
                  float64x2_t v36 = *v89;
                  float64x2_t v92 = v89[1];
                  float64x2_t v93 = v89[2];
                  float64x2_t v94 = v89[3];
                  int8x8_t v91 = (float64x2_t *)((char *)v89 + v39);
                  float64x2_t v95 = v93;
                  float64x2_t v96 = v94;
                  float64x2_t v98 = *v91;
                  float64x2_t v99 = v91[1];
                  float64x2_t v100 = v91[2];
                  float64x2_t v101 = v91[3];
                  int8x8_t v97 = (float64x2_t *)((char *)v91 + v37);
                  float64x2_t v102 = v90[2];
                  float64x2_t v103 = v90[3];
                  float64x2_t v104 = *v97;
                  float64x2_t v105 = v97[1];
                  float64x2_t v106 = *v90;
                  float64x2_t v107 = v90[1];
                  float64x2_t v108 = v97[2];
                  float64x2_t v109 = v97[3];
                  *uint64_t v88 = v36;
                  v88[1] = v92;
                  v88[2] = v106;
                  v88[3] = v107;
                  v88[4] = v95;
                  v88[5] = v96;
                  v88[6] = v102;
                  v88[7] = v103;
                  v88[8] = v98;
                  v88[9] = v99;
                  v88[10] = v104;
                  v88[11] = v105;
                  v88[12] = v100;
                  v88[13] = v101;
                  v88[14] = v108;
                  v88[15] = v109;
                  v88 += 16;
                  char v110 = -1;
                }
                *v78++ = v110;
                v87 += 2;
              }
              while (v87 != 16);
              unsigned int v16 = v221;
              if (v233) {
                goto LABEL_155;
              }
              goto LABEL_27;
            }
            int v82 = v80;
            int v213 = v46;
            int v83 = v47;
            BOOL v84 = v49;
            memcpy(__dst, v80, sizeof(__dst));
            int v85 = (float64x2_t *)__dst;
            unsigned int v80 = v82;
            BOOL v49 = v84;
            unsigned int v44 = 16 * v42;
            uint64_t v37 = a11;
            int v47 = v83;
            unsigned int v43 = v212;
            int v46 = v213;
            uint64_t v34 = v230;
          }
          else
          {
            int v85 = v80;
            if (!v81) {
              goto LABEL_96;
            }
          }
          unsigned int v219 = v80;
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE17ELj2ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = v34;
          unsigned int v235 = v85;
          unsigned __int8 v243 = v48;
          unsigned __int8 v244 = v43;
          unsigned int v239 = v215;
          unsigned int v240 = v46 - v44;
          uint64_t v236 = v78;
          unsigned int v237 = v79;
          uint64_t v238 = v37;
          unsigned int v241 = v227;
          unsigned int v242 = v47;
          if (v49)
          {
            uint64_t v86 = v85;
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(v34 + 8) + 7384), block);
            int v85 = v86;
            uint64_t v34 = v230;
            unsigned int v16 = v221;
            uint64_t v39 = 2 * a11;
            uint64_t v38 = 4 * a11;
            unsigned int v80 = v219;
            if (!v233) {
              goto LABEL_27;
            }
LABEL_155:
            memcpy(v80, v85, 0x800uLL);
            uint64_t v39 = 2 * a11;
            uint64_t v38 = 4 * a11;
            uint64_t v34 = v230;
            goto LABEL_27;
          }
          int v214 = v85;
          uint64_t v116 = (uint64_t)v85
               + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v246, 256, (uint64_t)v85, *v78, *(int8x8_t *)&v36.f64[0]);
          uint64_t v118 = v116
               + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v247, 256, v116, v78[1], v117);
          uint64_t v120 = v118
               + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v250, 256, v118, v78[2], v119);
          uint64_t v122 = v120
               + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v251, 256, v120, v78[3], v121);
          uint64_t v124 = v122
               + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v248, 256, v122, v78[4], v123);
          uint64_t v126 = v124
               + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v249, 256, v124, v78[5], v125);
          uint64_t v128 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v252, 256, v126, v78[6], v127);
          AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v253, 256, v126 + v128, v78[7], v129);
          uint64_t v130 = v241;
          if (v241 && v242)
          {
            uint64_t v131 = 0;
            unint64_t v132 = (unint64_t)v239 << 8;
            uint64_t v133 = 16 * v240;
            int8x8_t v134 = (char *)v246 + v132 + v133;
            unsigned int v135 = v237;
            uint64_t v136 = v238;
            unint64_t v137 = 16 * v242;
            if (v137 <= 1) {
              unint64_t v138 = 1;
            }
            else {
              unint64_t v138 = 16 * v242;
            }
            unint64_t v139 = v132 + v133;
            uint64_t v140 = (char *)v246 + v132 + v133;
            if (v138) {
              BOOL v141 = (v138 - 1) >> 32 == 0;
            }
            else {
              BOOL v141 = 0;
            }
            char v142 = !v141;
            uint64_t v143 = v138 & 0xFFFFFFFE0;
            uint64_t v144 = v138 & 0xFFFFFFFF0;
            int v145 = (float64x2_t *)((char *)&v246[1] + v139);
            unint64_t v146 = v237 + 1;
            unsigned int v147 = v134;
            int v148 = v237;
            do
            {
              unsigned int v149 = (char *)v135 + v136 * v131;
              unsigned int v150 = &v134[256 * v131];
              if ((unint64_t)(&v140[256 * v131] - v149) < 0x20) {
                char v151 = 1;
              }
              else {
                char v151 = v142;
              }
              if (v151)
              {
                int v152 = 0;
                goto LABEL_139;
              }
              if (v138 >= 0x20)
              {
                __int32 v158 = v146;
                unsigned int v159 = v145;
                uint64_t v160 = v138 & 0xFFFFFFFE0;
                do
                {
                  float64x2_t v36 = v158[-1];
                  float64x2_t v161 = *v158;
                  v159[-1] = v36;
                  float64x2_t *v159 = v161;
                  v159 += 2;
                  v158 += 2;
                  v160 -= 32;
                }
                while (v160);
                if (v138 == v143) {
                  goto LABEL_122;
                }
                uint64_t v153 = v138 & 0xFFFFFFFE0;
                if ((v138 & 0x10) == 0)
                {
                  v149 += v143;
                  v150 += v143;
                  int v152 = v138 & 0xFFFFFFE0;
                  goto LABEL_139;
                }
              }
              else
              {
                uint64_t v153 = 0;
              }
              v150 += v144;
              unint64_t v154 = v153 - (v138 & 0xFFFFFFFF0);
              BOOL v155 = (double *)((char *)v148->f64 + v153);
              BOOL v156 = &v147[v153];
              do
              {
                float64_t v157 = *v155++;
                v36.f64[0] = v157;
                *(float64_t *)BOOL v156 = v157;
                v156 += 8;
                v154 += 8;
              }
              while (v154);
              if (v138 == v144) {
                goto LABEL_122;
              }
              v149 += v144;
              int v152 = v138 & 0xFFFFFFF0;
LABEL_139:
              unsigned int v162 = v152 + 1;
              do
              {
                char v163 = *v149++;
                *v150++ = v163;
              }
              while (v137 > v162++);
LABEL_122:
              ++v131;
              v145 += 16;
              unint64_t v146 = (float64x2_t *)((char *)v146 + v136);
              int v148 = (float64x2_t *)((char *)v148 + v136);
              v147 += 256;
            }
            while (v131 != v130);
          }
          uint64_t v165 = 0;
          unsigned int v166 = v235;
          unsigned int v167 = (char *)v236;
          int v168 = v243;
          int v169 = v244;
          unsigned int v16 = v221;
          uint64_t v34 = v230;
          uint64_t v39 = 2 * a11;
          uint64_t v38 = 4 * a11;
          unsigned int v80 = v219;
          do
          {
            uint64_t v188 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,2u>::kSubblockPositions[v165 + 1];
            uint64_t v189 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,2u>::kSubblockPositions[v165];
            unsigned int v190 = (v168 - 4 * v189) & ~((v168 - 4 * (int)v189) >> 31);
            if (v190 >= 4) {
              unsigned int v190 = 4;
            }
            unsigned int v191 = (v169 - 4 * v188) & ~((v169 - 4 * (int)v188) >> 31);
            if (v191 >= 4) {
              unsigned int v191 = 4;
            }
            if (v190) {
              BOOL v192 = v191 == 0;
            }
            else {
              BOOL v192 = 1;
            }
            if (v192)
            {
              char v187 = 0;
            }
            else
            {
              int v170 = &v246[64 * v188 + 4 * v189];
              float64x2_t v36 = *v170;
              float64x2_t v171 = v170[1];
              float64x2_t v172 = v170[16];
              float64x2_t v173 = v170[17];
              float64x2_t v174 = v170[2];
              float64x2_t v175 = v170[3];
              float64x2_t v176 = v170[18];
              float64x2_t v177 = v170[32];
              float64x2_t v178 = v170[33];
              float64x2_t v179 = v170[34];
              float64x2_t v180 = v170[35];
              float64x2_t v181 = v170[19];
              v170 += 48;
              float64x2_t v182 = *v170;
              float64x2_t v183 = v170[1];
              float64x2_t v184 = v170[2];
              float64x2_t v185 = v170[3];
              *unsigned int v166 = v36;
              v166[1] = v171;
              v166[2] = v172;
              v166[3] = v173;
              v166[4] = v174;
              v166[5] = v175;
              v166[6] = v176;
              v166[7] = v181;
              v166[8] = v177;
              v166[9] = v178;
              v166[10] = v182;
              v166[11] = v183;
              float64x2_t v186 = v166 + 12;
              v166 += 16;
              char v187 = -1;
              *float64x2_t v186 = v179;
              v186[1] = v180;
              v186[2] = v184;
              v186[3] = v185;
            }
            *v167++ = v187;
            v165 += 2;
          }
          while (v165 != 16);
          int v85 = v214;
          if (v233) {
            goto LABEL_155;
          }
LABEL_27:
          BOOL v29 = v42++ == v222 >> 4;
        }
        while (!v29);
        BOOL v29 = v25++ == v211;
      }
      while (!v29);
    }
  }
}

uint64_t AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, char a12)
{
  uint64_t v237 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v186 = a8;
  unsigned int v170 = a8 + a10 - 1;
  uint64_t v187 = a1;
  if (*(void *)(a1 + 168)) {
    int v17 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v17 = 0;
  }
  unsigned int v18 = a5 - 1;
  unsigned int v19 = a6 - 1;
  unsigned int v20 = a8 >> 3;
  unsigned int v169 = v170 >> 3;
  BOOL v21 = (v17 & 0xD00) == 0 || v17 == 768;
  int v22 = v17 & 0xE00;
  int v24 = !v21 && v22 != 1024;
  int v191 = v24;
  uint64_t result = a1;
  if (*(unsigned char *)(a1 + 232))
  {
    unsigned int v26 = *(unsigned __int8 *)(a1 + 255);
    unsigned int v27 = *(unsigned __int8 *)(a1 + 254);
    char v28 = __clz(v18);
    if (1 << v26 >= a6 || a5 >> v27)
    {
      if (!(a6 >> v26) && 1 << v27 < a5)
      {
        if (a6 < 2) {
          unsigned int v31 = 0;
        }
        else {
          unsigned int v31 = __clz(~(-1 << -(char)__clz(v19))) - 32;
        }
        v27 += v26 + v31;
        unsigned int v26 = -v31;
      }
    }
    else
    {
      unsigned int v29 = 32 - __clz(~(-1 << -v28));
      unsigned int v30 = v27 + v26;
      if (a5 < 2) {
        unsigned int v29 = 0;
      }
      unsigned int v26 = v30 - v29;
      unsigned int v27 = v29;
    }
    if (a5 < 2)
    {
      if (v27) {
        goto LABEL_27;
      }
    }
    else if (32 - __clz(~(-1 << -v28)) < v27)
    {
LABEL_27:
      BOOL v181 = 0;
LABEL_32:
      unsigned int v178 = v27 - 4;
      unsigned int v174 = v26 - 3;
      int v33 = -1 << *(unsigned char *)(*(void *)(a1 + 208) + 48);
      unsigned int v167 = (((~v33 + a5) & v33) + ~(-1 << v27)) >> v27;
      goto LABEL_33;
    }
    if (a6 < 2) {
      unsigned int v32 = 0;
    }
    else {
      unsigned int v32 = 32 - __clz(~(-1 << -(char)__clz(v19)));
    }
    BOOL v181 = v32 >= v26;
    goto LABEL_32;
  }
  BOOL v181 = 0;
  unsigned int v167 = 0;
  unsigned int v174 = 0;
  unsigned int v178 = 0;
LABEL_33:
  if (v20 <= v169)
  {
    unsigned int v180 = a7 + a9 - 1;
    unsigned int v166 = a7 >> 4;
    if (a7 >> 4 <= v180 >> 4)
    {
      unsigned int v189 = v18 >> 4;
      unsigned int v165 = v19 >> 3;
      int v188 = (v18 & 0xF) + 1;
      int v164 = (v19 & 7) + 1;
      uint32x2_t v34 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0xF00000007);
      *(int32x2_t *)v35.i8 = vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32(vadd_s32((int32x2_t)vshl_u32(v34, (uint32x2_t)0xFFFFFFFCFFFFFFFDLL), (int32x2_t)-1)))))));
      v36.i64[0] = 0x2000000010;
      *(int8x8_t *)v37.i8 = vbic_s8(*(int8x8_t *)v35.i8, (int8x8_t)vcgt_u32((uint32x2_t)0x2000000010, v34));
      __int32 v176 = v37.i32[0] | v37.i32[1];
      uint64_t v173 = v37.i64[0];
      BOOL v172 = v37.i32[0] != 0;
      BOOL v171 = v37.i32[1] != 0;
      unsigned int v179 = a7;
      do
      {
        unsigned int v38 = (8 * v20) | 7;
        if (8 * v20 <= v186) {
          int v39 = v186;
        }
        else {
          int v39 = 8 * v20;
        }
        if (v170 < v38) {
          unsigned int v38 = v170;
        }
        int v177 = v39 - 8 * v20;
        int v185 = v38 - v39 + 1;
        unsigned int v40 = v166;
        int v41 = v164;
        if (v20 != v165) {
          int v41 = 8;
        }
        unsigned int v192 = v41;
        uint64_t v42 = v20 & ~(-1 << v174);
        uint64_t v184 = a3 + (v39 - v186) * a11;
        do
        {
          unsigned int v43 = 16 * v40;
          unsigned int v44 = 16 * (v40 + 1) - 1;
          if (16 * v40 <= a7) {
            int v45 = a7;
          }
          else {
            int v45 = 16 * v40;
          }
          if (v180 < v44) {
            unsigned int v44 = v180;
          }
          int v46 = v44 - v45 + 1;
          if (v40 == v189) {
            unsigned int v47 = v188;
          }
          else {
            unsigned int v47 = 16;
          }
          BOOL v48 = 1;
          if (8 * v20 >= v186 && v43 >= a7)
          {
            int v49 = v188;
            if (v40 != v189) {
              int v49 = 16;
            }
            BOOL v48 = v46 != v49 || v185 != v192;
          }
          if (v181)
          {
            if (v178 | v174)
            {
              int v51 = 0;
              uint64_t v52 = 0;
              int v53 = 1;
              BOOL v54 = v174 != 0;
              BOOL v55 = v178 != 0;
              unsigned int v56 = v174;
              unsigned int v57 = v178;
              do
              {
                --v56;
                if (v54) {
                  v52 |= (unint64_t)(v42 & v53) << v51++;
                }
                else {
                  unsigned int v56 = 0;
                }
                --v57;
                if (v55) {
                  v52 |= (unint64_t)(v40 & ~(-1 << v178) & v53) << v51++;
                }
                else {
                  unsigned int v57 = 0;
                }
                v53 *= 2;
                --v51;
                BOOL v55 = v57 != 0;
                BOOL v54 = v56 != 0;
              }
              while (v57 | v56);
            }
            else
            {
              uint64_t v52 = 0;
            }
            uint64_t v65 = *(void *)(result + 320) * ((v40 >> v178) + (v20 >> v174) * v167) + (v52 << 9);
          }
          else
          {
            if (v176)
            {
              int v58 = 0;
              uint64_t v59 = 0;
              int v60 = 1;
              BOOL v61 = v172;
              BOOL v62 = v171;
              int v63 = v173;
              int v64 = HIDWORD(v173);
              do
              {
                --v63;
                if (v61) {
                  v59 |= (unint64_t)(v60 & v20) << v58++;
                }
                else {
                  int v63 = 0;
                }
                --v64;
                if (v62) {
                  v59 |= (unint64_t)(v60 & v40) << v58++;
                }
                else {
                  int v64 = 0;
                }
                v60 *= 2;
                --v58;
                BOOL v62 = v64 != 0;
                BOOL v61 = v63 != 0;
              }
              while (v64 | v63);
            }
            else
            {
              uint64_t v59 = 0;
            }
            uint64_t v65 = v59 << 9;
          }
          unsigned int v66 = *(_DWORD *)(result + 128) >> (*(unsigned char *)(result + 144) + a12);
          if (v66 <= 1) {
            unsigned int v66 = 1;
          }
          unsigned int v67 = v66 + 15;
          if (v67 < 0x20) {
            unsigned int v68 = 0;
          }
          else {
            unsigned int v68 = 32 - __clz(~(-1 << -(char)__clz((v67 >> 4) - 1)));
          }
          unsigned int v69 = *(_DWORD *)(result + 132) >> (*(unsigned char *)(result + 144) + a12);
          if (v69 <= 1) {
            unsigned int v69 = 1;
          }
          unsigned int v70 = v69 + 7;
          if (v70 < 0x10)
          {
            unsigned int v71 = 0;
            if (!v68)
            {
LABEL_109:
              uint64_t v73 = 0;
              goto LABEL_110;
            }
          }
          else
          {
            unsigned int v71 = 32 - __clz(~(-1 << -(char)__clz((v70 >> 3) - 1)));
            if (!(v71 | v68)) {
              goto LABEL_109;
            }
          }
          int v72 = 0;
          uint64_t v73 = 0;
          BOOL v74 = v68 != 0;
          BOOL v75 = v71 != 0;
          int v76 = 1;
          do
          {
            --v68;
            if (v74) {
              v73 |= (unint64_t)(v76 & v40) << v72++;
            }
            else {
              unsigned int v68 = 0;
            }
            --v71;
            if (v75) {
              v73 |= (unint64_t)(v76 & v20) << v72++;
            }
            else {
              unsigned int v71 = 0;
            }
            v76 *= 2;
            --v72;
            BOOL v75 = v71 != 0;
            BOOL v74 = v68 != 0;
          }
          while (v71 | v68);
LABEL_110:
          unsigned int v77 = v45 - a7;
          int v78 = v47 < 0x10 || v48;
          int v79 = (char *)(a4 + 8 * v73);
          unint64_t v80 = v184 + 4 * v77;
          int v81 = (void *)(a2 + v65);
          if (v192 < 8) {
            int v82 = 1;
          }
          else {
            int v82 = v78;
          }
          unsigned int v190 = v81;
          if (v191)
          {
            int v83 = __dst;
            if (!v82) {
              goto LABEL_122;
            }
            float64x2_t v175 = (char *)(a4 + 8 * v73);
            int v84 = v46;
            char v85 = v47;
            uint64_t v86 = v42;
            BOOL v87 = v48;
            memcpy(__dst, v81, sizeof(__dst));
            BOOL v48 = v87;
            uint64_t v42 = v86;
            LOBYTE(v47) = v85;
            int v46 = v84;
            int v79 = v175;
            uint64_t result = v187;
          }
          else
          {
            int v83 = v81;
            if (!v82)
            {
LABEL_122:
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock(v80, a11, (int8x16_t *)v83, v79, v47, v192);
              a7 = v179;
              goto LABEL_217;
            }
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE4ELj2ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = result;
          unsigned int v194 = (int8x16_t *)v83;
          unsigned __int8 v202 = v47;
          unsigned __int8 v203 = v192;
          unsigned int v198 = v177;
          unsigned int v199 = v45 - v43;
          unsigned int v195 = v79;
          unint64_t v196 = v80;
          uint64_t v197 = a11;
          unsigned int v200 = v185;
          unsigned int v201 = v46;
          if (v48)
          {
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(result + 8) + 7384), block);
            a7 = v179;
            goto LABEL_217;
          }
          unsigned int v88 = *v79;
          if (v88 == 63)
          {
            int64x2_t v35 = *((int64x2_t *)v83 + 1);
            uint64_t v90 = (const double *)(v83 + 32);
            *(float64x2x2_t *)v36.i8 = vld2q_f64(v90);
            int64x2_t v37 = vzip2q_s64(*(int64x2_t *)v83, v35);
            int64x2_t v205 = vzip1q_s64(*(int64x2_t *)v83, v35);
            int64x2_t v209 = v37;
            int64x2_t v213 = v36;
            int64x2_t v217 = v91;
            uint64_t v89 = 64;
          }
          else if (v88 == 1)
          {
            int64x2_t v37 = (int64x2_t)vld1q_dup_s16((const __int16 *)v83);
            int64x2_t v205 = v37;
            int64x2_t v209 = v37;
            int64x2_t v213 = v37;
            int64x2_t v217 = v37;
            uint64_t v89 = 2;
          }
          else if (*v79)
          {
            uint64_t v89 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v205, 64, (uint64_t)v83, v88, *(int8x8_t *)v37.i8, *(double *)v35.i64, *(int8x8_t *)v36.i8);
          }
          else
          {
            uint64_t v89 = 0;
            int64x2_t v205 = 0uLL;
            int64x2_t v209 = 0uLL;
            int64x2_t v213 = 0uLL;
            int64x2_t v217 = 0uLL;
          }
          uint64_t v92 = (uint64_t)&v83[v89];
          unsigned int v93 = v79[1];
          if (v93 == 63)
          {
            int64x2_t v35 = *(int64x2_t *)(v92 + 16);
            float64x2_t v95 = (const double *)(v92 + 32);
            *(float64x2x2_t *)v36.i8 = vld2q_f64(v95);
            int64x2_t v37 = vzip2q_s64(*(int64x2_t *)v92, v35);
            int64x2_t v206 = vzip1q_s64(*(int64x2_t *)v92, v35);
            int64x2_t v210 = v37;
            int64x2_t v214 = v36;
            int64x2_t v218 = v96;
            uint64_t v94 = 64;
          }
          else if (v93 == 1)
          {
            int64x2_t v37 = (int64x2_t)vld1q_dup_s16((const __int16 *)v92);
            int64x2_t v206 = v37;
            int64x2_t v210 = v37;
            int64x2_t v214 = v37;
            int64x2_t v218 = v37;
            uint64_t v94 = 2;
          }
          else if (v79[1])
          {
            uint64_t v94 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v206, 64, v92, v93, *(int8x8_t *)v37.i8, *(double *)v35.i64, *(int8x8_t *)v36.i8);
          }
          else
          {
            uint64_t v94 = 0;
            int64x2_t v206 = 0uLL;
            int64x2_t v210 = 0uLL;
            int64x2_t v214 = 0uLL;
            int64x2_t v218 = 0uLL;
          }
          uint64_t v97 = v92 + v94;
          unsigned int v98 = v79[2];
          if (v98 == 63)
          {
            int64x2_t v35 = *(int64x2_t *)(v97 + 16);
            float64x2_t v100 = (const double *)(v97 + 32);
            *(float64x2x2_t *)v36.i8 = vld2q_f64(v100);
            int64x2_t v37 = vzip2q_s64(*(int64x2_t *)v97, v35);
            int64x2_t v221 = vzip1q_s64(*(int64x2_t *)v97, v35);
            int64x2_t v225 = v37;
            int64x2_t v229 = v36;
            int64x2_t v233 = v101;
            uint64_t v99 = 64;
          }
          else if (v98 == 1)
          {
            int64x2_t v37 = (int64x2_t)vld1q_dup_s16((const __int16 *)v97);
            int64x2_t v221 = v37;
            int64x2_t v225 = v37;
            int64x2_t v229 = v37;
            int64x2_t v233 = v37;
            uint64_t v99 = 2;
          }
          else if (v79[2])
          {
            uint64_t v99 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v221, 64, v97, v98, *(int8x8_t *)v37.i8, *(double *)v35.i64, *(int8x8_t *)v36.i8);
          }
          else
          {
            uint64_t v99 = 0;
            int64x2_t v221 = 0uLL;
            int64x2_t v225 = 0uLL;
            int64x2_t v229 = 0uLL;
            int64x2_t v233 = 0uLL;
          }
          uint64_t v102 = v97 + v99;
          unsigned int v103 = v79[3];
          if (v103 == 63)
          {
            int64x2_t v35 = *(int64x2_t *)(v102 + 16);
            float64x2_t v105 = (const double *)(v102 + 32);
            *(float64x2x2_t *)v36.i8 = vld2q_f64(v105);
            int64x2_t v37 = vzip2q_s64(*(int64x2_t *)v102, v35);
            int64x2_t v222 = vzip1q_s64(*(int64x2_t *)v102, v35);
            int64x2_t v226 = v37;
            int64x2_t v230 = v36;
            int64x2_t v234 = v106;
            uint64_t v104 = 64;
          }
          else if (v103 == 1)
          {
            int64x2_t v37 = (int64x2_t)vld1q_dup_s16((const __int16 *)v102);
            int64x2_t v222 = v37;
            int64x2_t v226 = v37;
            int64x2_t v230 = v37;
            int64x2_t v234 = v37;
            uint64_t v104 = 2;
          }
          else if (v79[3])
          {
            uint64_t v104 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v222, 64, v102, v103, *(int8x8_t *)v37.i8, *(double *)v35.i64, *(int8x8_t *)v36.i8);
          }
          else
          {
            uint64_t v104 = 0;
            int64x2_t v222 = 0uLL;
            int64x2_t v226 = 0uLL;
            int64x2_t v230 = 0uLL;
            int64x2_t v234 = 0uLL;
          }
          uint64_t v107 = v102 + v104;
          unsigned int v108 = v79[4];
          if (v108 == 63)
          {
            int64x2_t v35 = *(int64x2_t *)(v107 + 16);
            char v110 = (const double *)(v107 + 32);
            *(float64x2x2_t *)v36.i8 = vld2q_f64(v110);
            int64x2_t v37 = vzip2q_s64(*(int64x2_t *)v107, v35);
            int64x2_t v207 = vzip1q_s64(*(int64x2_t *)v107, v35);
            int64x2_t v211 = v37;
            int64x2_t v215 = v36;
            int64x2_t v219 = v111;
            uint64_t v109 = 64;
          }
          else if (v108 == 1)
          {
            int64x2_t v37 = (int64x2_t)vld1q_dup_s16((const __int16 *)v107);
            int64x2_t v207 = v37;
            int64x2_t v211 = v37;
            int64x2_t v215 = v37;
            int64x2_t v219 = v37;
            uint64_t v109 = 2;
          }
          else if (v79[4])
          {
            uint64_t v109 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v207, 64, v107, v108, *(int8x8_t *)v37.i8, *(double *)v35.i64, *(int8x8_t *)v36.i8);
          }
          else
          {
            uint64_t v109 = 0;
            int64x2_t v207 = 0uLL;
            int64x2_t v211 = 0uLL;
            int64x2_t v215 = 0uLL;
            int64x2_t v219 = 0uLL;
          }
          uint64_t v112 = v107 + v109;
          unsigned int v113 = v79[5];
          if (v113 == 63)
          {
            int64x2_t v35 = *(int64x2_t *)(v112 + 16);
            BOOL v115 = (const double *)(v112 + 32);
            *(float64x2x2_t *)v36.i8 = vld2q_f64(v115);
            int64x2_t v37 = vzip2q_s64(*(int64x2_t *)v112, v35);
            int64x2_t v208 = vzip1q_s64(*(int64x2_t *)v112, v35);
            int64x2_t v212 = v37;
            int64x2_t v216 = v36;
            int64x2_t v220 = v116;
            uint64_t v114 = 64;
          }
          else if (v113 == 1)
          {
            int64x2_t v37 = (int64x2_t)vld1q_dup_s16((const __int16 *)v112);
            int64x2_t v208 = v37;
            int64x2_t v212 = v37;
            int64x2_t v216 = v37;
            int64x2_t v220 = v37;
            uint64_t v114 = 2;
          }
          else if (v79[5])
          {
            uint64_t v114 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v208, 64, v112, v113, *(int8x8_t *)v37.i8, *(double *)v35.i64, *(int8x8_t *)v36.i8);
          }
          else
          {
            uint64_t v114 = 0;
            int64x2_t v208 = 0uLL;
            int64x2_t v212 = 0uLL;
            int64x2_t v216 = 0uLL;
            int64x2_t v220 = 0uLL;
          }
          uint64_t v117 = v112 + v114;
          unsigned int v118 = v79[6];
          if (v118 == 63)
          {
            int64x2_t v35 = *(int64x2_t *)(v117 + 16);
            uint64_t v120 = (const double *)(v117 + 32);
            *(float64x2x2_t *)v36.i8 = vld2q_f64(v120);
            int64x2_t v37 = vzip2q_s64(*(int64x2_t *)v117, v35);
            int64x2_t v223 = vzip1q_s64(*(int64x2_t *)v117, v35);
            int64x2_t v227 = v37;
            int64x2_t v231 = v36;
            int64x2_t v235 = v121;
            uint64_t v119 = 64;
          }
          else if (v118 == 1)
          {
            int64x2_t v37 = (int64x2_t)vld1q_dup_s16((const __int16 *)v117);
            int64x2_t v223 = v37;
            int64x2_t v227 = v37;
            int64x2_t v231 = v37;
            int64x2_t v235 = v37;
            uint64_t v119 = 2;
          }
          else if (v79[6])
          {
            uint64_t v119 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v223, 64, v117, v118, *(int8x8_t *)v37.i8, *(double *)v35.i64, *(int8x8_t *)v36.i8);
          }
          else
          {
            uint64_t v119 = 0;
            int64x2_t v223 = 0uLL;
            int64x2_t v227 = 0uLL;
            int64x2_t v231 = 0uLL;
            int64x2_t v235 = 0uLL;
          }
          uint64_t v122 = v117 + v119;
          unsigned int v123 = v79[7];
          if (v123 == 63)
          {
            int64x2_t v126 = *(int64x2_t *)(v122 + 16);
            int8x8_t v127 = (const double *)(v122 + 32);
            float64x2x2_t v238 = vld2q_f64(v127);
            int64x2_t v128 = vzip2q_s64(*(int64x2_t *)v122, v126);
            int64x2_t v224 = vzip1q_s64(*(int64x2_t *)v122, v126);
            int64x2_t v228 = v128;
            float64x2_t v232 = v238.val[0];
            float64x2_t v236 = v238.val[1];
            a7 = v179;
            uint64_t v124 = v200;
            if (!v200) {
              goto LABEL_216;
            }
          }
          else
          {
            a7 = v179;
            if (v123 == 1)
            {
              int16x8_t v125 = vld1q_dup_s16((const __int16 *)v122);
              int64x2_t v224 = (int64x2_t)v125;
              int64x2_t v228 = (int64x2_t)v125;
              float64x2_t v232 = (float64x2_t)v125;
              float64x2_t v236 = (float64x2_t)v125;
              uint64_t v124 = v200;
              if (!v200) {
                goto LABEL_216;
              }
            }
            else if (v123)
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v224, 64, v122, v123, *(int8x8_t *)v37.i8, *(double *)v35.i64, *(int8x8_t *)v36.i8);
              uint64_t v124 = v200;
              if (!v200) {
                goto LABEL_216;
              }
            }
            else
            {
              int64x2_t v224 = 0uLL;
              int64x2_t v228 = 0uLL;
              float64x2_t v232 = 0uLL;
              float64x2_t v236 = 0uLL;
              uint64_t v124 = v200;
              if (!v200) {
                goto LABEL_216;
              }
            }
          }
          if (v201)
          {
            uint64_t v129 = 0;
            unint64_t v130 = (unint64_t)v198 << 6;
            uint64_t v131 = 4 * v199;
            unint64_t v132 = &v205.i8[v130 + v131];
            unint64_t v133 = v196;
            uint64_t v134 = v197;
            unint64_t v135 = 4 * v201;
            if (v135 <= 1) {
              unint64_t v136 = 1;
            }
            else {
              unint64_t v136 = 4 * v201;
            }
            unint64_t v137 = v130 + v131;
            unint64_t v138 = &v205.i8[v130 + v131];
            if (v136) {
              BOOL v139 = (v136 - 1) >> 32 == 0;
            }
            else {
              BOOL v139 = 0;
            }
            uint64_t v140 = v136 & 0x3FFFFFFE0;
            uint64_t v141 = v136 & 0x3FFFFFFF8;
            char v143 = !v139 || v136 < 8;
            uint64_t v144 = &v206.i8[v137];
            int v145 = (long long *)(v196 + 16);
            unint64_t v146 = v132;
            unint64_t v147 = v196;
            do
            {
              int v148 = (char *)(v133 + v134 * v129);
              unsigned int v149 = &v132[64 * v129];
              if ((unint64_t)(&v138[64 * v129] - v148) < 0x20) {
                char v150 = 1;
              }
              else {
                char v150 = v143;
              }
              if (v150)
              {
                int v151 = 0;
                goto LABEL_213;
              }
              if (v136 >= 0x20)
              {
                uint64_t v153 = v145;
                unint64_t v154 = v144;
                uint64_t v155 = v136 & 0x3FFFFFFE0;
                do
                {
                  long long v156 = *v153;
                  *((_OWORD *)v154 - 1) = *(v153 - 1);
                  *(_OWORD *)unint64_t v154 = v156;
                  v154 += 32;
                  v153 += 2;
                  v155 -= 32;
                }
                while (v155);
                if (v136 == v140) {
                  goto LABEL_196;
                }
                uint64_t v152 = v136 & 0x3FFFFFFE0;
                if ((v136 & 0x18) == 0)
                {
                  v148 += v140;
                  v149 += v140;
                  int v151 = v136 & 0xFFFFFFE0;
                  goto LABEL_213;
                }
              }
              else
              {
                uint64_t v152 = 0;
              }
              v149 += v141;
              uint64_t v157 = v152 - v141;
              __int32 v158 = (uint64_t *)(v147 + v152);
              unsigned int v159 = &v146[v152];
              do
              {
                uint64_t v160 = *v158++;
                *(void *)unsigned int v159 = v160;
                v159 += 8;
                v157 += 8;
              }
              while (v157);
              if (v136 == v141) {
                goto LABEL_196;
              }
              v148 += v141;
              int v151 = v136 & 0xFFFFFFF8;
LABEL_213:
              unsigned int v161 = v151 + 1;
              do
              {
                char v162 = *v148++;
                *v149++ = v162;
              }
              while (v135 > v161++);
LABEL_196:
              ++v129;
              v144 += 64;
              int v145 = (long long *)((char *)v145 + v134);
              v147 += v134;
              v146 += 64;
            }
            while (v129 != v124);
          }
LABEL_216:
          AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)&v205, 64, v194, v195, v202, v203);
LABEL_217:
          if (v191) {
            memcpy(v190, v83, 0x200uLL);
          }
          BOOL v21 = v40++ == v180 >> 4;
          uint64_t result = v187;
        }
        while (!v21);
        BOOL v21 = v20++ == v169;
      }
      while (!v21);
    }
  }
  return result;
}

uint64_t AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, char a12)
{
  uint64_t v237 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v186 = a8;
  unsigned int v170 = a8 + a10 - 1;
  uint64_t v187 = a1;
  if (*(void *)(a1 + 168)) {
    int v17 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v17 = 0;
  }
  unsigned int v18 = a5 - 1;
  unsigned int v19 = a6 - 1;
  unsigned int v20 = a8 >> 3;
  unsigned int v169 = v170 >> 3;
  BOOL v21 = (v17 & 0xD00) == 0 || v17 == 768;
  int v22 = v17 & 0xE00;
  int v24 = !v21 && v22 != 1024;
  int v191 = v24;
  uint64_t result = a1;
  if (*(unsigned char *)(a1 + 232))
  {
    unsigned int v26 = *(unsigned __int8 *)(a1 + 255);
    unsigned int v27 = *(unsigned __int8 *)(a1 + 254);
    char v28 = __clz(v18);
    if (1 << v26 >= a6 || a5 >> v27)
    {
      if (!(a6 >> v26) && 1 << v27 < a5)
      {
        if (a6 < 2) {
          unsigned int v31 = 0;
        }
        else {
          unsigned int v31 = __clz(~(-1 << -(char)__clz(v19))) - 32;
        }
        v27 += v26 + v31;
        unsigned int v26 = -v31;
      }
    }
    else
    {
      unsigned int v29 = 32 - __clz(~(-1 << -v28));
      unsigned int v30 = v27 + v26;
      if (a5 < 2) {
        unsigned int v29 = 0;
      }
      unsigned int v26 = v30 - v29;
      unsigned int v27 = v29;
    }
    if (a5 < 2)
    {
      if (v27) {
        goto LABEL_27;
      }
    }
    else if (32 - __clz(~(-1 << -v28)) < v27)
    {
LABEL_27:
      BOOL v181 = 0;
LABEL_32:
      unsigned int v178 = v27 - 4;
      unsigned int v174 = v26 - 3;
      int v33 = -1 << *(unsigned char *)(*(void *)(a1 + 208) + 48);
      unsigned int v167 = (((~v33 + a5) & v33) + ~(-1 << v27)) >> v27;
      goto LABEL_33;
    }
    if (a6 < 2) {
      unsigned int v32 = 0;
    }
    else {
      unsigned int v32 = 32 - __clz(~(-1 << -(char)__clz(v19)));
    }
    BOOL v181 = v32 >= v26;
    goto LABEL_32;
  }
  BOOL v181 = 0;
  unsigned int v167 = 0;
  unsigned int v174 = 0;
  unsigned int v178 = 0;
LABEL_33:
  if (v20 <= v169)
  {
    unsigned int v180 = a7 + a9 - 1;
    unsigned int v166 = a7 >> 4;
    if (a7 >> 4 <= v180 >> 4)
    {
      unsigned int v189 = v18 >> 4;
      unsigned int v165 = v19 >> 3;
      int v188 = (v18 & 0xF) + 1;
      int v164 = (v19 & 7) + 1;
      uint32x2_t v34 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0xF00000007);
      *(int32x2_t *)v35.i8 = vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32(vadd_s32((int32x2_t)vshl_u32(v34, (uint32x2_t)0xFFFFFFFCFFFFFFFDLL), (int32x2_t)-1)))))));
      v36.i64[0] = 0x2000000010;
      *(int8x8_t *)v37.i8 = vbic_s8(*(int8x8_t *)v35.i8, (int8x8_t)vcgt_u32((uint32x2_t)0x2000000010, v34));
      __int32 v176 = v37.i32[0] | v37.i32[1];
      uint64_t v173 = v37.i64[0];
      BOOL v172 = v37.i32[0] != 0;
      BOOL v171 = v37.i32[1] != 0;
      unsigned int v179 = a7;
      do
      {
        unsigned int v38 = (8 * v20) | 7;
        if (8 * v20 <= v186) {
          int v39 = v186;
        }
        else {
          int v39 = 8 * v20;
        }
        if (v170 < v38) {
          unsigned int v38 = v170;
        }
        int v177 = v39 - 8 * v20;
        int v185 = v38 - v39 + 1;
        unsigned int v40 = v166;
        int v41 = v164;
        if (v20 != v165) {
          int v41 = 8;
        }
        unsigned int v192 = v41;
        uint64_t v42 = v20 & ~(-1 << v174);
        uint64_t v184 = a3 + (v39 - v186) * a11;
        do
        {
          unsigned int v43 = 16 * v40;
          unsigned int v44 = 16 * (v40 + 1) - 1;
          if (16 * v40 <= a7) {
            int v45 = a7;
          }
          else {
            int v45 = 16 * v40;
          }
          if (v180 < v44) {
            unsigned int v44 = v180;
          }
          int v46 = v44 - v45 + 1;
          if (v40 == v189) {
            unsigned int v47 = v188;
          }
          else {
            unsigned int v47 = 16;
          }
          BOOL v48 = 1;
          if (8 * v20 >= v186 && v43 >= a7)
          {
            int v49 = v188;
            if (v40 != v189) {
              int v49 = 16;
            }
            BOOL v48 = v46 != v49 || v185 != v192;
          }
          if (v181)
          {
            if (v178 | v174)
            {
              int v51 = 0;
              uint64_t v52 = 0;
              int v53 = 1;
              BOOL v54 = v174 != 0;
              BOOL v55 = v178 != 0;
              unsigned int v56 = v174;
              unsigned int v57 = v178;
              do
              {
                --v56;
                if (v54) {
                  v52 |= (unint64_t)(v42 & v53) << v51++;
                }
                else {
                  unsigned int v56 = 0;
                }
                --v57;
                if (v55) {
                  v52 |= (unint64_t)(v40 & ~(-1 << v178) & v53) << v51++;
                }
                else {
                  unsigned int v57 = 0;
                }
                v53 *= 2;
                --v51;
                BOOL v55 = v57 != 0;
                BOOL v54 = v56 != 0;
              }
              while (v57 | v56);
            }
            else
            {
              uint64_t v52 = 0;
            }
            uint64_t v65 = *(void *)(result + 320) * ((v40 >> v178) + (v20 >> v174) * v167) + (v52 << 9);
          }
          else
          {
            if (v176)
            {
              int v58 = 0;
              uint64_t v59 = 0;
              int v60 = 1;
              BOOL v61 = v172;
              BOOL v62 = v171;
              int v63 = v173;
              int v64 = HIDWORD(v173);
              do
              {
                --v63;
                if (v61) {
                  v59 |= (unint64_t)(v60 & v20) << v58++;
                }
                else {
                  int v63 = 0;
                }
                --v64;
                if (v62) {
                  v59 |= (unint64_t)(v60 & v40) << v58++;
                }
                else {
                  int v64 = 0;
                }
                v60 *= 2;
                --v58;
                BOOL v62 = v64 != 0;
                BOOL v61 = v63 != 0;
              }
              while (v64 | v63);
            }
            else
            {
              uint64_t v59 = 0;
            }
            uint64_t v65 = v59 << 9;
          }
          unsigned int v66 = *(_DWORD *)(result + 128) >> (*(unsigned char *)(result + 144) + a12);
          if (v66 <= 1) {
            unsigned int v66 = 1;
          }
          unsigned int v67 = v66 + 15;
          if (v67 < 0x20) {
            unsigned int v68 = 0;
          }
          else {
            unsigned int v68 = 32 - __clz(~(-1 << -(char)__clz((v67 >> 4) - 1)));
          }
          unsigned int v69 = *(_DWORD *)(result + 132) >> (*(unsigned char *)(result + 144) + a12);
          if (v69 <= 1) {
            unsigned int v69 = 1;
          }
          unsigned int v70 = v69 + 7;
          if (v70 < 0x10)
          {
            unsigned int v71 = 0;
            if (!v68)
            {
LABEL_109:
              uint64_t v73 = 0;
              goto LABEL_110;
            }
          }
          else
          {
            unsigned int v71 = 32 - __clz(~(-1 << -(char)__clz((v70 >> 3) - 1)));
            if (!(v71 | v68)) {
              goto LABEL_109;
            }
          }
          int v72 = 0;
          uint64_t v73 = 0;
          BOOL v74 = v68 != 0;
          BOOL v75 = v71 != 0;
          int v76 = 1;
          do
          {
            --v68;
            if (v74) {
              v73 |= (unint64_t)(v76 & v40) << v72++;
            }
            else {
              unsigned int v68 = 0;
            }
            --v71;
            if (v75) {
              v73 |= (unint64_t)(v76 & v20) << v72++;
            }
            else {
              unsigned int v71 = 0;
            }
            v76 *= 2;
            --v72;
            BOOL v75 = v71 != 0;
            BOOL v74 = v68 != 0;
          }
          while (v71 | v68);
LABEL_110:
          unsigned int v77 = v45 - a7;
          int v78 = v47 < 0x10 || v48;
          int v79 = (char *)(a4 + 8 * v73);
          unint64_t v80 = (int64x2_t *)(v184 + 4 * v77);
          int v81 = (void *)(a2 + v65);
          if (v192 < 8) {
            int v82 = 1;
          }
          else {
            int v82 = v78;
          }
          unsigned int v190 = v81;
          if (v191)
          {
            int v83 = __dst;
            if (!v82) {
              goto LABEL_122;
            }
            float64x2_t v175 = (char *)(a4 + 8 * v73);
            int v84 = v46;
            char v85 = v47;
            uint64_t v86 = v42;
            BOOL v87 = v48;
            memcpy(__dst, v81, sizeof(__dst));
            BOOL v48 = v87;
            uint64_t v42 = v86;
            LOBYTE(v47) = v85;
            int v46 = v84;
            int v79 = v175;
            uint64_t result = v187;
          }
          else
          {
            int v83 = v81;
            if (!v82)
            {
LABEL_122:
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock(v80, a11, (int64x2_t *)v83, v79, v47, v192);
              a7 = v179;
              goto LABEL_217;
            }
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE4ELj2ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = result;
          unsigned int v194 = (int64x2_t *)v83;
          unsigned __int8 v202 = v47;
          unsigned __int8 v203 = v192;
          unsigned int v198 = v177;
          unsigned int v199 = v45 - v43;
          unsigned int v195 = v79;
          unint64_t v196 = v80;
          uint64_t v197 = a11;
          unsigned int v200 = v185;
          unsigned int v201 = v46;
          if (v48)
          {
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(result + 8) + 7384), block);
            a7 = v179;
            goto LABEL_217;
          }
          unsigned int v88 = *v79;
          if (v88 == 63)
          {
            int64x2_t v35 = *((int64x2_t *)v83 + 1);
            uint64_t v90 = (const double *)(v83 + 32);
            *(float64x2x2_t *)v36.i8 = vld2q_f64(v90);
            int64x2_t v37 = vzip2q_s64(*(int64x2_t *)v83, v35);
            int64x2_t v205 = vzip1q_s64(*(int64x2_t *)v83, v35);
            int64x2_t v209 = v37;
            int64x2_t v213 = v36;
            int64x2_t v217 = v91;
            uint64_t v89 = 64;
          }
          else if (v88 == 1)
          {
            int64x2_t v37 = (int64x2_t)vld1q_dup_s16((const __int16 *)v83);
            int64x2_t v205 = v37;
            int64x2_t v209 = v37;
            int64x2_t v213 = v37;
            int64x2_t v217 = v37;
            uint64_t v89 = 2;
          }
          else if (*v79)
          {
            uint64_t v89 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v205, 64, (uint64_t)v83, v88, *(int8x8_t *)v37.i8, *(double *)v35.i64, *(int8x8_t *)v36.i8);
          }
          else
          {
            uint64_t v89 = 0;
            int64x2_t v205 = 0uLL;
            int64x2_t v209 = 0uLL;
            int64x2_t v213 = 0uLL;
            int64x2_t v217 = 0uLL;
          }
          uint64_t v92 = (uint64_t)&v83[v89];
          unsigned int v93 = v79[1];
          if (v93 == 63)
          {
            int64x2_t v35 = *(int64x2_t *)(v92 + 16);
            float64x2_t v95 = (const double *)(v92 + 32);
            *(float64x2x2_t *)v36.i8 = vld2q_f64(v95);
            int64x2_t v37 = vzip2q_s64(*(int64x2_t *)v92, v35);
            int64x2_t v206 = vzip1q_s64(*(int64x2_t *)v92, v35);
            int64x2_t v210 = v37;
            int64x2_t v214 = v36;
            int64x2_t v218 = v96;
            uint64_t v94 = 64;
          }
          else if (v93 == 1)
          {
            int64x2_t v37 = (int64x2_t)vld1q_dup_s16((const __int16 *)v92);
            int64x2_t v206 = v37;
            int64x2_t v210 = v37;
            int64x2_t v214 = v37;
            int64x2_t v218 = v37;
            uint64_t v94 = 2;
          }
          else if (v79[1])
          {
            uint64_t v94 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v206, 64, v92, v93, *(int8x8_t *)v37.i8, *(double *)v35.i64, *(int8x8_t *)v36.i8);
          }
          else
          {
            uint64_t v94 = 0;
            int64x2_t v206 = 0uLL;
            int64x2_t v210 = 0uLL;
            int64x2_t v214 = 0uLL;
            int64x2_t v218 = 0uLL;
          }
          uint64_t v97 = v92 + v94;
          unsigned int v98 = v79[2];
          if (v98 == 63)
          {
            int64x2_t v35 = *(int64x2_t *)(v97 + 16);
            float64x2_t v100 = (const double *)(v97 + 32);
            *(float64x2x2_t *)v36.i8 = vld2q_f64(v100);
            int64x2_t v37 = vzip2q_s64(*(int64x2_t *)v97, v35);
            int64x2_t v221 = vzip1q_s64(*(int64x2_t *)v97, v35);
            int64x2_t v225 = v37;
            int64x2_t v229 = v36;
            int64x2_t v233 = v101;
            uint64_t v99 = 64;
          }
          else if (v98 == 1)
          {
            int64x2_t v37 = (int64x2_t)vld1q_dup_s16((const __int16 *)v97);
            int64x2_t v221 = v37;
            int64x2_t v225 = v37;
            int64x2_t v229 = v37;
            int64x2_t v233 = v37;
            uint64_t v99 = 2;
          }
          else if (v79[2])
          {
            uint64_t v99 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v221, 64, v97, v98, *(int8x8_t *)v37.i8, *(double *)v35.i64, *(int8x8_t *)v36.i8);
          }
          else
          {
            uint64_t v99 = 0;
            int64x2_t v221 = 0uLL;
            int64x2_t v225 = 0uLL;
            int64x2_t v229 = 0uLL;
            int64x2_t v233 = 0uLL;
          }
          uint64_t v102 = v97 + v99;
          unsigned int v103 = v79[3];
          if (v103 == 63)
          {
            int64x2_t v35 = *(int64x2_t *)(v102 + 16);
            float64x2_t v105 = (const double *)(v102 + 32);
            *(float64x2x2_t *)v36.i8 = vld2q_f64(v105);
            int64x2_t v37 = vzip2q_s64(*(int64x2_t *)v102, v35);
            int64x2_t v222 = vzip1q_s64(*(int64x2_t *)v102, v35);
            int64x2_t v226 = v37;
            int64x2_t v230 = v36;
            int64x2_t v234 = v106;
            uint64_t v104 = 64;
          }
          else if (v103 == 1)
          {
            int64x2_t v37 = (int64x2_t)vld1q_dup_s16((const __int16 *)v102);
            int64x2_t v222 = v37;
            int64x2_t v226 = v37;
            int64x2_t v230 = v37;
            int64x2_t v234 = v37;
            uint64_t v104 = 2;
          }
          else if (v79[3])
          {
            uint64_t v104 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v222, 64, v102, v103, *(int8x8_t *)v37.i8, *(double *)v35.i64, *(int8x8_t *)v36.i8);
          }
          else
          {
            uint64_t v104 = 0;
            int64x2_t v222 = 0uLL;
            int64x2_t v226 = 0uLL;
            int64x2_t v230 = 0uLL;
            int64x2_t v234 = 0uLL;
          }
          uint64_t v107 = v102 + v104;
          unsigned int v108 = v79[4];
          if (v108 == 63)
          {
            int64x2_t v35 = *(int64x2_t *)(v107 + 16);
            char v110 = (const double *)(v107 + 32);
            *(float64x2x2_t *)v36.i8 = vld2q_f64(v110);
            int64x2_t v37 = vzip2q_s64(*(int64x2_t *)v107, v35);
            int64x2_t v207 = vzip1q_s64(*(int64x2_t *)v107, v35);
            int64x2_t v211 = v37;
            int64x2_t v215 = v36;
            int64x2_t v219 = v111;
            uint64_t v109 = 64;
          }
          else if (v108 == 1)
          {
            int64x2_t v37 = (int64x2_t)vld1q_dup_s16((const __int16 *)v107);
            int64x2_t v207 = v37;
            int64x2_t v211 = v37;
            int64x2_t v215 = v37;
            int64x2_t v219 = v37;
            uint64_t v109 = 2;
          }
          else if (v79[4])
          {
            uint64_t v109 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v207, 64, v107, v108, *(int8x8_t *)v37.i8, *(double *)v35.i64, *(int8x8_t *)v36.i8);
          }
          else
          {
            uint64_t v109 = 0;
            int64x2_t v207 = 0uLL;
            int64x2_t v211 = 0uLL;
            int64x2_t v215 = 0uLL;
            int64x2_t v219 = 0uLL;
          }
          uint64_t v112 = v107 + v109;
          unsigned int v113 = v79[5];
          if (v113 == 63)
          {
            int64x2_t v35 = *(int64x2_t *)(v112 + 16);
            BOOL v115 = (const double *)(v112 + 32);
            *(float64x2x2_t *)v36.i8 = vld2q_f64(v115);
            int64x2_t v37 = vzip2q_s64(*(int64x2_t *)v112, v35);
            int64x2_t v208 = vzip1q_s64(*(int64x2_t *)v112, v35);
            int64x2_t v212 = v37;
            int64x2_t v216 = v36;
            int64x2_t v220 = v116;
            uint64_t v114 = 64;
          }
          else if (v113 == 1)
          {
            int64x2_t v37 = (int64x2_t)vld1q_dup_s16((const __int16 *)v112);
            int64x2_t v208 = v37;
            int64x2_t v212 = v37;
            int64x2_t v216 = v37;
            int64x2_t v220 = v37;
            uint64_t v114 = 2;
          }
          else if (v79[5])
          {
            uint64_t v114 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v208, 64, v112, v113, *(int8x8_t *)v37.i8, *(double *)v35.i64, *(int8x8_t *)v36.i8);
          }
          else
          {
            uint64_t v114 = 0;
            int64x2_t v208 = 0uLL;
            int64x2_t v212 = 0uLL;
            int64x2_t v216 = 0uLL;
            int64x2_t v220 = 0uLL;
          }
          uint64_t v117 = v112 + v114;
          unsigned int v118 = v79[6];
          if (v118 == 63)
          {
            int64x2_t v35 = *(int64x2_t *)(v117 + 16);
            uint64_t v120 = (const double *)(v117 + 32);
            *(float64x2x2_t *)v36.i8 = vld2q_f64(v120);
            int64x2_t v37 = vzip2q_s64(*(int64x2_t *)v117, v35);
            int64x2_t v223 = vzip1q_s64(*(int64x2_t *)v117, v35);
            int64x2_t v227 = v37;
            int64x2_t v231 = v36;
            int64x2_t v235 = v121;
            uint64_t v119 = 64;
          }
          else if (v118 == 1)
          {
            int64x2_t v37 = (int64x2_t)vld1q_dup_s16((const __int16 *)v117);
            int64x2_t v223 = v37;
            int64x2_t v227 = v37;
            int64x2_t v231 = v37;
            int64x2_t v235 = v37;
            uint64_t v119 = 2;
          }
          else if (v79[6])
          {
            uint64_t v119 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v223, 64, v117, v118, *(int8x8_t *)v37.i8, *(double *)v35.i64, *(int8x8_t *)v36.i8);
          }
          else
          {
            uint64_t v119 = 0;
            int64x2_t v223 = 0uLL;
            int64x2_t v227 = 0uLL;
            int64x2_t v231 = 0uLL;
            int64x2_t v235 = 0uLL;
          }
          uint64_t v122 = v117 + v119;
          unsigned int v123 = v79[7];
          if (v123 == 63)
          {
            int64x2_t v126 = *(int64x2_t *)(v122 + 16);
            int8x8_t v127 = (const double *)(v122 + 32);
            float64x2x2_t v238 = vld2q_f64(v127);
            int64x2_t v128 = vzip2q_s64(*(int64x2_t *)v122, v126);
            int64x2_t v224 = vzip1q_s64(*(int64x2_t *)v122, v126);
            int64x2_t v228 = v128;
            float64x2_t v232 = v238.val[0];
            float64x2_t v236 = v238.val[1];
            a7 = v179;
            uint64_t v124 = v200;
            if (!v200) {
              goto LABEL_216;
            }
          }
          else
          {
            a7 = v179;
            if (v123 == 1)
            {
              int16x8_t v125 = vld1q_dup_s16((const __int16 *)v122);
              int64x2_t v224 = (int64x2_t)v125;
              int64x2_t v228 = (int64x2_t)v125;
              float64x2_t v232 = (float64x2_t)v125;
              float64x2_t v236 = (float64x2_t)v125;
              uint64_t v124 = v200;
              if (!v200) {
                goto LABEL_216;
              }
            }
            else if (v123)
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v224, 64, v122, v123, *(int8x8_t *)v37.i8, *(double *)v35.i64, *(int8x8_t *)v36.i8);
              uint64_t v124 = v200;
              if (!v200) {
                goto LABEL_216;
              }
            }
            else
            {
              int64x2_t v224 = 0uLL;
              int64x2_t v228 = 0uLL;
              float64x2_t v232 = 0uLL;
              float64x2_t v236 = 0uLL;
              uint64_t v124 = v200;
              if (!v200) {
                goto LABEL_216;
              }
            }
          }
          if (v201)
          {
            uint64_t v129 = 0;
            unint64_t v130 = (unint64_t)v198 << 6;
            uint64_t v131 = 4 * v199;
            unint64_t v132 = &v205.i8[v130 + v131];
            unint64_t v133 = v196;
            uint64_t v134 = v197;
            unint64_t v135 = 4 * v201;
            if (v135 <= 1) {
              unint64_t v136 = 1;
            }
            else {
              unint64_t v136 = 4 * v201;
            }
            unint64_t v137 = v130 + v131;
            unint64_t v138 = &v205.i8[v130 + v131];
            if (v136) {
              BOOL v139 = (v136 - 1) >> 32 == 0;
            }
            else {
              BOOL v139 = 0;
            }
            uint64_t v140 = v136 & 0x3FFFFFFE0;
            uint64_t v141 = v136 & 0x3FFFFFFF8;
            char v143 = !v139 || v136 < 8;
            uint64_t v144 = &v206.i8[v137];
            int v145 = v196 + 1;
            unint64_t v146 = v132;
            unint64_t v147 = v196;
            do
            {
              int v148 = &v133->i8[v134 * v129];
              unsigned int v149 = &v132[64 * v129];
              if ((unint64_t)(&v138[64 * v129] - v148) < 0x20) {
                char v150 = 1;
              }
              else {
                char v150 = v143;
              }
              if (v150)
              {
                int v151 = 0;
                goto LABEL_213;
              }
              if (v136 >= 0x20)
              {
                uint64_t v153 = v145;
                unint64_t v154 = v144;
                uint64_t v155 = v136 & 0x3FFFFFFE0;
                do
                {
                  int64x2_t v156 = *v153;
                  *((int64x2_t *)v154 - 1) = v153[-1];
                  *(int64x2_t *)unint64_t v154 = v156;
                  v154 += 32;
                  v153 += 2;
                  v155 -= 32;
                }
                while (v155);
                if (v136 == v140) {
                  goto LABEL_196;
                }
                uint64_t v152 = v136 & 0x3FFFFFFE0;
                if ((v136 & 0x18) == 0)
                {
                  v148 += v140;
                  v149 += v140;
                  int v151 = v136 & 0xFFFFFFE0;
                  goto LABEL_213;
                }
              }
              else
              {
                uint64_t v152 = 0;
              }
              v149 += v141;
              uint64_t v157 = v152 - v141;
              __int32 v158 = (uint64_t *)((char *)v147->i64 + v152);
              unsigned int v159 = &v146[v152];
              do
              {
                uint64_t v160 = *v158++;
                *(void *)unsigned int v159 = v160;
                v159 += 8;
                v157 += 8;
              }
              while (v157);
              if (v136 == v141) {
                goto LABEL_196;
              }
              v148 += v141;
              int v151 = v136 & 0xFFFFFFF8;
LABEL_213:
              unsigned int v161 = v151 + 1;
              do
              {
                char v162 = *v148++;
                *v149++ = v162;
              }
              while (v135 > v161++);
LABEL_196:
              ++v129;
              v144 += 64;
              int v145 = (int64x2_t *)((char *)v145 + v134);
              unint64_t v147 = (int64x2_t *)((char *)v147 + v134);
              v146 += 64;
            }
            while (v129 != v124);
          }
LABEL_216:
          AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock(&v205, 64, v194, v195, v202, v203);
LABEL_217:
          if (v191) {
            memcpy(v190, v83, 0x200uLL);
          }
          BOOL v21 = v40++ == v180 >> 4;
          uint64_t result = v187;
        }
        while (!v21);
        BOOL v21 = v20++ == v169;
      }
      while (!v21);
    }
  }
  return result;
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, uint64_t a7, unsigned int a8, int a9, int a10, uint64_t a11, int a12)
{
  uint64_t v234 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  uint64_t v17 = a1;
  unsigned int v183 = a8;
  unsigned int v18 = a8 >> 3;
  unsigned int v168 = a8 + a10 - 1;
  unsigned int v170 = v168 >> 3;
  unsigned int v19 = *(unsigned __int8 *)(*(void *)(a1 + 208) + 88);
  unsigned int v20 = *(_DWORD *)(a1 + 112);
  uint64_t v184 = v17;
  if (*(void *)(v17 + 168))
  {
    __int16 CacheMode = IOSurfaceGetCacheMode();
    uint64_t v17 = v184;
    int v22 = CacheMode & 0xF00;
  }
  else
  {
    int v22 = 0;
  }
  BOOL v23 = (v22 & 0xD00) == 0 || v22 == 768;
  int v24 = v22 & 0xE00;
  int v26 = !v23 && v24 != 1024;
  int v188 = v26;
  BOOL isLevelTiled = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::isLevelTiled(v17, *(_DWORD *)(v17 + 144) + a12);
  uint64_t v28 = v184;
  BOOL v177 = isLevelTiled;
  if (v18 <= v170)
  {
    unsigned int v176 = a7 + a9 - 1;
    unsigned int v167 = a7 >> 4;
    if (a7 >> 4 <= v176 >> 4)
    {
      unsigned int v164 = a5 - 1;
      unsigned int v186 = (a5 - 1) >> 4;
      int v185 = ((a5 - 1) & 0xF) + 1;
      int v165 = ((a6 - 1) & 7) + 1;
      unsigned int v166 = (a6 - 1) >> 3;
      uint32x2_t v29 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0xF00000007);
      *(int32x2_t *)v30.i8 = vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32(vadd_s32((int32x2_t)vshl_u32(v29, (uint32x2_t)0xFFFFFFFCFFFFFFFDLL), (int32x2_t)-1)))))));
      v31.i64[0] = 0x2000000010;
      *(int8x8_t *)v32.i8 = vbic_s8(*(int8x8_t *)v30.i8, (int8x8_t)vcgt_u32((uint32x2_t)0x2000000010, v29));
      __int32 v175 = v32.i32[0] | v32.i32[1];
      uint64_t v174 = v32.i64[0];
      BOOL v173 = v32.i32[0] != 0;
      BOOL v172 = v32.i32[1] != 0;
      unint64_t v163 = 8 * v20 * (unint64_t)v19;
      do
      {
        unsigned int v33 = (8 * v18) | 7;
        if (8 * v18 <= v183) {
          int v34 = v183;
        }
        else {
          int v34 = 8 * v18;
        }
        unsigned int v35 = v167;
        if (v168 < v33) {
          unsigned int v33 = v168;
        }
        unsigned int v182 = 8 * v18;
        int v171 = v34 - 8 * v18;
        int v181 = v33 - v34 + 1;
        int v36 = v165;
        if (v18 != v166) {
          int v36 = 8;
        }
        unsigned int v189 = v36;
        uint64_t v180 = a3 + (v34 - v183) * a11;
        do
        {
          unsigned int v37 = 16 * v35;
          unsigned int v38 = 16 * (v35 + 1) - 1;
          if (16 * v35 <= a7) {
            int v39 = a7;
          }
          else {
            int v39 = 16 * v35;
          }
          if (v176 < v38) {
            unsigned int v38 = v176;
          }
          int v40 = v38 - v39 + 1;
          if (v35 == v186) {
            unsigned int v41 = v185;
          }
          else {
            unsigned int v41 = 16;
          }
          BOOL v42 = 1;
          if (v182 >= v183 && v37 >= a7)
          {
            int v43 = v185;
            if (v35 != v186) {
              int v43 = 16;
            }
            BOOL v42 = v40 != v43 || v181 != v189;
          }
          if (v177)
          {
            unsigned int v64 = 0;
            uint64_t v65 = v163 >> (*(unsigned char *)(v28 + 57) != 0);
            char v66 = 1;
            if (v65 > 127)
            {
              if (v65 > 511)
              {
                if (v65 == 512)
                {
                  char v67 = 0;
                  unsigned int v64 = 16;
                  unsigned int v68 = 16;
                }
                else
                {
                  char v67 = 1;
                  unsigned int v68 = 0;
                  if (v65 == 1024)
                  {
                    unsigned int v68 = 8;
                    unsigned int v64 = 16;
                  }
                }
              }
              else if (v65 == 128)
              {
                char v66 = 0;
                char v67 = 0;
                unsigned int v64 = 32;
                unsigned int v68 = 32;
              }
              else
              {
                char v67 = 1;
                unsigned int v68 = 0;
                if (v65 == 256)
                {
                  char v66 = 0;
                  char v67 = 0;
                  unsigned int v68 = 16;
                  unsigned int v64 = 32;
                }
              }
            }
            else
            {
              char v67 = 1;
              unsigned int v68 = 0;
              switch(v65)
              {
                case 4:
                  char v66 = 0;
                  char v67 = 0;
                  unsigned int v68 = 128;
                  unsigned int v64 = 256;
                  break;
                case 5:
                case 6:
                case 7:
                case 9:
                case 10:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 17:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                  break;
                case 8:
                  char v66 = 0;
                  char v67 = 0;
                  unsigned int v64 = 128;
                  unsigned int v68 = 128;
                  break;
                case 16:
                  char v66 = 0;
                  char v67 = 0;
                  unsigned int v68 = 64;
                  unsigned int v64 = 128;
                  break;
                case 32:
                  char v66 = 0;
                  char v67 = 0;
                  unsigned int v64 = 64;
                  unsigned int v68 = 64;
                  break;
                default:
                  if (v65 == 64)
                  {
                    char v66 = 0;
                    char v67 = 0;
                    unsigned int v68 = 32;
                    unsigned int v64 = 64;
                  }
                  break;
              }
            }
            unsigned int v152 = (v64 >> 4) - 1;
            if (v66) {
              unsigned int v153 = 0;
            }
            else {
              unsigned int v153 = 32 - __clz(~(-1 << -(char)__clz(v152)));
            }
            unsigned int v154 = (v68 >> 3) - 1;
            if (v67)
            {
              unsigned int v155 = 0;
              if (v153) {
                goto LABEL_210;
              }
            }
            else
            {
              unsigned int v155 = 32 - __clz(~(-1 << -(char)__clz(v154)));
              if (v155 | v153)
              {
LABEL_210:
                int v156 = 0;
                uint64_t v157 = 0;
                int v158 = v35 & v152;
                int v159 = v18 & v154;
                BOOL v160 = v155 != 0;
                BOOL v161 = v153 != 0;
                int v162 = 1;
                do
                {
                  --v155;
                  if (v160) {
                    v157 |= (unint64_t)(v162 & v159) << v156++;
                  }
                  else {
                    unsigned int v155 = 0;
                  }
                  --v153;
                  if (v161) {
                    v157 |= (unint64_t)(v162 & v158) << v156++;
                  }
                  else {
                    unsigned int v153 = 0;
                  }
                  v162 *= 2;
                  --v156;
                  BOOL v161 = v153 != 0;
                  BOOL v160 = v155 != 0;
                }
                while (v153 | v155);
                goto LABEL_222;
              }
            }
            uint64_t v157 = 0;
LABEL_222:
            unint64_t v52 = ((unint64_t)(v37 / v64 + v182 / v68 * ((v64 + v164) / v64)) << 14) + (v157 << 9);
            goto LABEL_58;
          }
          if (v175)
          {
            int v45 = 0;
            uint64_t v46 = 0;
            int v47 = 1;
            BOOL v48 = v173;
            BOOL v49 = v172;
            int v50 = v174;
            int v51 = HIDWORD(v174);
            do
            {
              --v50;
              if (v48) {
                v46 |= (unint64_t)(v47 & v18) << v45++;
              }
              else {
                int v50 = 0;
              }
              --v51;
              if (v49) {
                v46 |= (unint64_t)(v47 & v35) << v45++;
              }
              else {
                int v51 = 0;
              }
              v47 *= 2;
              --v45;
              BOOL v49 = v51 != 0;
              BOOL v48 = v50 != 0;
            }
            while (v51 | v50);
          }
          else
          {
            uint64_t v46 = 0;
          }
          unint64_t v52 = v46 << 9;
LABEL_58:
          unsigned int v53 = *(_DWORD *)(v28 + 128) >> (*(unsigned char *)(v28 + 144) + a12);
          if (v53 <= 1) {
            unsigned int v53 = 1;
          }
          unsigned int v54 = v53 + 15;
          if (v54 < 0x20) {
            unsigned int v55 = 0;
          }
          else {
            unsigned int v55 = 32 - __clz(~(-1 << -(char)__clz((v54 >> 4) - 1)));
          }
          unsigned int v56 = *(_DWORD *)(v28 + 132) >> (*(unsigned char *)(v28 + 144) + a12);
          if (v56 <= 1) {
            unsigned int v56 = 1;
          }
          unsigned int v57 = v56 + 7;
          if (v57 < 0x10)
          {
            unsigned int v58 = 0;
            if (!v55)
            {
LABEL_80:
              uint64_t v60 = 0;
              goto LABEL_81;
            }
          }
          else
          {
            unsigned int v58 = 32 - __clz(~(-1 << -(char)__clz((v57 >> 3) - 1)));
            if (!(v58 | v55)) {
              goto LABEL_80;
            }
          }
          int v59 = 0;
          uint64_t v60 = 0;
          BOOL v61 = v55 != 0;
          BOOL v62 = v58 != 0;
          int v63 = 1;
          do
          {
            --v55;
            if (v61) {
              v60 |= (unint64_t)(v63 & v35) << v59++;
            }
            else {
              unsigned int v55 = 0;
            }
            --v58;
            if (v62) {
              v60 |= (unint64_t)(v63 & v18) << v59++;
            }
            else {
              unsigned int v58 = 0;
            }
            v63 *= 2;
            --v59;
            BOOL v62 = v58 != 0;
            BOOL v61 = v55 != 0;
          }
          while (v58 | v55);
LABEL_81:
          uint64_t v69 = a7;
          int v70 = v41 < 0x10 || v42;
          unsigned int v71 = (char *)(a4 + 8 * v60);
          unint64_t v72 = v180 + 4 * (v39 - a7);
          uint64_t v73 = (unsigned char *)(a2 + v52);
          if (v189 < 8) {
            int v74 = 1;
          }
          else {
            int v74 = v70;
          }
          __src = v73;
          if (v188)
          {
            if (!v74)
            {
              uint64_t v73 = __dst;
LABEL_94:
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock(v72, a11, (int8x16_t *)v73, v71, v41, v189);
              goto LABEL_95;
            }
            int v75 = v40;
            memcpy(__dst, __src, sizeof(__dst));
            int v40 = v75;
            uint64_t v73 = __dst;
            uint64_t v28 = v184;
          }
          else if (!v74)
          {
            goto LABEL_94;
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE4ELj2ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = v28;
          int v191 = (int8x16_t *)v73;
          unsigned __int8 v199 = v41;
          unsigned __int8 v200 = v189;
          unsigned int v195 = v171;
          unsigned int v196 = v39 - v37;
          unsigned int v192 = v71;
          unint64_t v193 = v72;
          uint64_t v194 = a11;
          unsigned int v197 = v181;
          unsigned int v198 = v40;
          if (!v42)
          {
            unsigned int v76 = *v71;
            a7 = v69;
            if (v76 == 63)
            {
              int64x2_t v30 = *((int64x2_t *)v73 + 1);
              int v78 = (const double *)(v73 + 32);
              *(float64x2x2_t *)v31.i8 = vld2q_f64(v78);
              int64x2_t v32 = vzip2q_s64(*(int64x2_t *)v73, v30);
              int64x2_t v202 = vzip1q_s64(*(int64x2_t *)v73, v30);
              int64x2_t v206 = v32;
              int64x2_t v210 = v31;
              int64x2_t v214 = v79;
              uint64_t v77 = 64;
            }
            else if (v76 == 1)
            {
              int64x2_t v32 = (int64x2_t)vld1q_dup_s16((const __int16 *)v73);
              int64x2_t v202 = v32;
              int64x2_t v206 = v32;
              int64x2_t v210 = v32;
              int64x2_t v214 = v32;
              uint64_t v77 = 2;
            }
            else if (*v71)
            {
              uint64_t v77 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v202, 64, (uint64_t)v73, v76, *(int8x8_t *)v32.i8, *(double *)v30.i64, *(int8x8_t *)v31.i8);
            }
            else
            {
              uint64_t v77 = 0;
              int64x2_t v202 = 0uLL;
              int64x2_t v206 = 0uLL;
              int64x2_t v210 = 0uLL;
              int64x2_t v214 = 0uLL;
            }
            uint64_t v80 = (uint64_t)&v73[v77];
            unsigned int v81 = v71[1];
            if (v81 == 63)
            {
              int64x2_t v30 = *(int64x2_t *)(v80 + 16);
              int v83 = (const double *)(v80 + 32);
              *(float64x2x2_t *)v31.i8 = vld2q_f64(v83);
              int64x2_t v32 = vzip2q_s64(*(int64x2_t *)v80, v30);
              int64x2_t v203 = vzip1q_s64(*(int64x2_t *)v80, v30);
              int64x2_t v207 = v32;
              int64x2_t v211 = v31;
              int64x2_t v215 = v84;
              uint64_t v82 = 64;
            }
            else if (v81 == 1)
            {
              int64x2_t v32 = (int64x2_t)vld1q_dup_s16((const __int16 *)v80);
              int64x2_t v203 = v32;
              int64x2_t v207 = v32;
              int64x2_t v211 = v32;
              int64x2_t v215 = v32;
              uint64_t v82 = 2;
            }
            else if (v71[1])
            {
              uint64_t v82 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v203, 64, v80, v81, *(int8x8_t *)v32.i8, *(double *)v30.i64, *(int8x8_t *)v31.i8);
            }
            else
            {
              uint64_t v82 = 0;
              int64x2_t v203 = 0uLL;
              int64x2_t v207 = 0uLL;
              int64x2_t v211 = 0uLL;
              int64x2_t v215 = 0uLL;
            }
            uint64_t v85 = v80 + v82;
            unsigned int v86 = v71[2];
            if (v86 == 63)
            {
              int64x2_t v30 = *(int64x2_t *)(v85 + 16);
              unsigned int v88 = (const double *)(v85 + 32);
              *(float64x2x2_t *)v31.i8 = vld2q_f64(v88);
              int64x2_t v32 = vzip2q_s64(*(int64x2_t *)v85, v30);
              int64x2_t v218 = vzip1q_s64(*(int64x2_t *)v85, v30);
              int64x2_t v222 = v32;
              int64x2_t v226 = v31;
              int64x2_t v230 = v89;
              uint64_t v87 = 64;
            }
            else if (v86 == 1)
            {
              int64x2_t v32 = (int64x2_t)vld1q_dup_s16((const __int16 *)v85);
              int64x2_t v218 = v32;
              int64x2_t v222 = v32;
              int64x2_t v226 = v32;
              int64x2_t v230 = v32;
              uint64_t v87 = 2;
            }
            else if (v71[2])
            {
              uint64_t v87 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v218, 64, v85, v86, *(int8x8_t *)v32.i8, *(double *)v30.i64, *(int8x8_t *)v31.i8);
            }
            else
            {
              uint64_t v87 = 0;
              int64x2_t v218 = 0uLL;
              int64x2_t v222 = 0uLL;
              int64x2_t v226 = 0uLL;
              int64x2_t v230 = 0uLL;
            }
            uint64_t v90 = v85 + v87;
            unsigned int v91 = v71[3];
            if (v91 == 63)
            {
              int64x2_t v30 = *(int64x2_t *)(v90 + 16);
              unsigned int v93 = (const double *)(v90 + 32);
              *(float64x2x2_t *)v31.i8 = vld2q_f64(v93);
              int64x2_t v32 = vzip2q_s64(*(int64x2_t *)v90, v30);
              int64x2_t v219 = vzip1q_s64(*(int64x2_t *)v90, v30);
              int64x2_t v223 = v32;
              int64x2_t v227 = v31;
              int64x2_t v231 = v94;
              uint64_t v92 = 64;
            }
            else if (v91 == 1)
            {
              int64x2_t v32 = (int64x2_t)vld1q_dup_s16((const __int16 *)v90);
              int64x2_t v219 = v32;
              int64x2_t v223 = v32;
              int64x2_t v227 = v32;
              int64x2_t v231 = v32;
              uint64_t v92 = 2;
            }
            else if (v71[3])
            {
              uint64_t v92 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v219, 64, v90, v91, *(int8x8_t *)v32.i8, *(double *)v30.i64, *(int8x8_t *)v31.i8);
            }
            else
            {
              uint64_t v92 = 0;
              int64x2_t v219 = 0uLL;
              int64x2_t v223 = 0uLL;
              int64x2_t v227 = 0uLL;
              int64x2_t v231 = 0uLL;
            }
            uint64_t v95 = v90 + v92;
            unsigned int v96 = v71[4];
            if (v96 == 63)
            {
              int64x2_t v30 = *(int64x2_t *)(v95 + 16);
              unsigned int v98 = (const double *)(v95 + 32);
              *(float64x2x2_t *)v31.i8 = vld2q_f64(v98);
              int64x2_t v32 = vzip2q_s64(*(int64x2_t *)v95, v30);
              int64x2_t v204 = vzip1q_s64(*(int64x2_t *)v95, v30);
              int64x2_t v208 = v32;
              int64x2_t v212 = v31;
              int64x2_t v216 = v99;
              uint64_t v97 = 64;
            }
            else if (v96 == 1)
            {
              int64x2_t v32 = (int64x2_t)vld1q_dup_s16((const __int16 *)v95);
              int64x2_t v204 = v32;
              int64x2_t v208 = v32;
              int64x2_t v212 = v32;
              int64x2_t v216 = v32;
              uint64_t v97 = 2;
            }
            else if (v71[4])
            {
              uint64_t v97 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v204, 64, v95, v96, *(int8x8_t *)v32.i8, *(double *)v30.i64, *(int8x8_t *)v31.i8);
            }
            else
            {
              uint64_t v97 = 0;
              int64x2_t v204 = 0uLL;
              int64x2_t v208 = 0uLL;
              int64x2_t v212 = 0uLL;
              int64x2_t v216 = 0uLL;
            }
            uint64_t v100 = v95 + v97;
            unsigned int v101 = v71[5];
            if (v101 == 63)
            {
              int64x2_t v30 = *(int64x2_t *)(v100 + 16);
              unsigned int v103 = (const double *)(v100 + 32);
              *(float64x2x2_t *)v31.i8 = vld2q_f64(v103);
              int64x2_t v32 = vzip2q_s64(*(int64x2_t *)v100, v30);
              int64x2_t v205 = vzip1q_s64(*(int64x2_t *)v100, v30);
              int64x2_t v209 = v32;
              int64x2_t v213 = v31;
              int64x2_t v217 = v104;
              uint64_t v102 = 64;
            }
            else if (v101 == 1)
            {
              int64x2_t v32 = (int64x2_t)vld1q_dup_s16((const __int16 *)v100);
              int64x2_t v205 = v32;
              int64x2_t v209 = v32;
              int64x2_t v213 = v32;
              int64x2_t v217 = v32;
              uint64_t v102 = 2;
            }
            else if (v71[5])
            {
              uint64_t v102 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v205, 64, v100, v101, *(int8x8_t *)v32.i8, *(double *)v30.i64, *(int8x8_t *)v31.i8);
            }
            else
            {
              uint64_t v102 = 0;
              int64x2_t v205 = 0uLL;
              int64x2_t v209 = 0uLL;
              int64x2_t v213 = 0uLL;
              int64x2_t v217 = 0uLL;
            }
            uint64_t v105 = v100 + v102;
            unsigned int v106 = v71[6];
            if (v106 == 63)
            {
              int64x2_t v30 = *(int64x2_t *)(v105 + 16);
              unsigned int v108 = (const double *)(v105 + 32);
              *(float64x2x2_t *)v31.i8 = vld2q_f64(v108);
              int64x2_t v32 = vzip2q_s64(*(int64x2_t *)v105, v30);
              int64x2_t v220 = vzip1q_s64(*(int64x2_t *)v105, v30);
              int64x2_t v224 = v32;
              int64x2_t v228 = v31;
              int64x2_t v232 = v109;
              uint64_t v107 = 64;
            }
            else if (v106 == 1)
            {
              int64x2_t v32 = (int64x2_t)vld1q_dup_s16((const __int16 *)v105);
              int64x2_t v220 = v32;
              int64x2_t v224 = v32;
              int64x2_t v228 = v32;
              int64x2_t v232 = v32;
              uint64_t v107 = 2;
            }
            else if (v71[6])
            {
              uint64_t v107 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v220, 64, v105, v106, *(int8x8_t *)v32.i8, *(double *)v30.i64, *(int8x8_t *)v31.i8);
            }
            else
            {
              uint64_t v107 = 0;
              int64x2_t v220 = 0uLL;
              int64x2_t v224 = 0uLL;
              int64x2_t v228 = 0uLL;
              int64x2_t v232 = 0uLL;
            }
            uint64_t v110 = v105 + v107;
            unsigned int v111 = v71[7];
            if (v111 == 63)
            {
              int64x2_t v114 = *(int64x2_t *)(v110 + 16);
              BOOL v115 = (const double *)(v110 + 32);
              float64x2x2_t v235 = vld2q_f64(v115);
              int64x2_t v116 = vzip2q_s64(*(int64x2_t *)v110, v114);
              int64x2_t v221 = vzip1q_s64(*(int64x2_t *)v110, v114);
              int64x2_t v225 = v116;
              float64x2_t v229 = v235.val[0];
              float64x2_t v233 = v235.val[1];
              uint64_t v112 = v197;
              if (v197) {
                goto LABEL_156;
              }
            }
            else
            {
              if (v111 != 1)
              {
                if (v71[7])
                {
                  AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v221, 64, v110, v111, *(int8x8_t *)v32.i8, *(double *)v30.i64, *(int8x8_t *)v31.i8);
                  uint64_t v112 = v197;
                  if (!v197) {
                    goto LABEL_190;
                  }
                }
                else
                {
                  int64x2_t v221 = 0uLL;
                  int64x2_t v225 = 0uLL;
                  float64x2_t v229 = 0uLL;
                  float64x2_t v233 = 0uLL;
                  uint64_t v112 = v197;
                  if (!v197) {
                    goto LABEL_190;
                  }
                }
LABEL_156:
                if (!v198) {
                  goto LABEL_190;
                }
                uint64_t v117 = 0;
                unint64_t v118 = (unint64_t)v195 << 6;
                uint64_t v119 = 4 * v196;
                uint64_t v120 = &v202.i8[v118 + v119];
                unint64_t v121 = v193;
                uint64_t v122 = v194;
                unint64_t v123 = 4 * v198;
                if (v123 <= 1) {
                  unint64_t v124 = 1;
                }
                else {
                  unint64_t v124 = 4 * v198;
                }
                unint64_t v125 = v118 + v119;
                int64x2_t v126 = &v202.i8[v118 + v119];
                if (v124) {
                  BOOL v127 = (v124 - 1) >> 32 == 0;
                }
                else {
                  BOOL v127 = 0;
                }
                uint64_t v128 = v124 & 0x3FFFFFFE0;
                uint64_t v129 = v124 & 0x3FFFFFFF8;
                char v131 = !v127 || v124 < 8;
                unint64_t v132 = &v203.i8[v125];
                unint64_t v133 = (long long *)(v193 + 16);
                uint64_t v134 = v120;
                unint64_t v135 = v193;
                while (2)
                {
                  unint64_t v136 = (char *)(v121 + v122 * v117);
                  unint64_t v137 = &v120[64 * v117];
                  if ((unint64_t)(&v126[64 * v117] - v136) < 0x20) {
                    char v138 = 1;
                  }
                  else {
                    char v138 = v131;
                  }
                  if (v138)
                  {
                    int v139 = 0;
LABEL_187:
                    unsigned int v149 = v139 + 1;
                    do
                    {
                      char v150 = *v136++;
                      *v137++ = v150;
                    }
                    while (v123 > v149++);
                  }
                  else
                  {
                    if (v124 >= 0x20)
                    {
                      uint64_t v141 = v133;
                      char v142 = v132;
                      uint64_t v143 = v124 & 0x3FFFFFFE0;
                      do
                      {
                        long long v144 = *v141;
                        *((_OWORD *)v142 - 1) = *(v141 - 1);
                        *(_OWORD *)char v142 = v144;
                        v142 += 32;
                        v141 += 2;
                        v143 -= 32;
                      }
                      while (v143);
                      if (v124 == v128) {
                        goto LABEL_170;
                      }
                      uint64_t v140 = v124 & 0x3FFFFFFE0;
                      if ((v124 & 0x18) == 0)
                      {
                        v136 += v128;
                        v137 += v128;
                        int v139 = v124 & 0xFFFFFFE0;
                        goto LABEL_187;
                      }
                    }
                    else
                    {
                      uint64_t v140 = 0;
                    }
                    v137 += v129;
                    uint64_t v145 = v140 - v129;
                    unint64_t v146 = (uint64_t *)(v135 + v140);
                    unint64_t v147 = &v134[v140];
                    do
                    {
                      uint64_t v148 = *v146++;
                      *(void *)unint64_t v147 = v148;
                      v147 += 8;
                      v145 += 8;
                    }
                    while (v145);
                    if (v124 != v129)
                    {
                      v136 += v129;
                      int v139 = v124 & 0xFFFFFFF8;
                      goto LABEL_187;
                    }
                  }
LABEL_170:
                  ++v117;
                  v132 += 64;
                  unint64_t v133 = (long long *)((char *)v133 + v122);
                  v135 += v122;
                  v134 += 64;
                  if (v117 == v112) {
                    goto LABEL_190;
                  }
                  continue;
                }
              }
              int16x8_t v113 = vld1q_dup_s16((const __int16 *)v110);
              int64x2_t v221 = (int64x2_t)v113;
              int64x2_t v225 = (int64x2_t)v113;
              float64x2_t v229 = (float64x2_t)v113;
              float64x2_t v233 = (float64x2_t)v113;
              uint64_t v112 = v197;
              if (v197) {
                goto LABEL_156;
              }
            }
LABEL_190:
            AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)&v202, 64, v191, v192, v199, v200);
            if (!v188) {
              goto LABEL_26;
            }
            goto LABEL_191;
          }
          dispatch_sync(*(dispatch_queue_t *)(*(void *)(v28 + 8) + 7384), block);
LABEL_95:
          a7 = v69;
          if (!v188) {
            goto LABEL_26;
          }
LABEL_191:
          memcpy(__src, v73, 0x200uLL);
LABEL_26:
          BOOL v23 = v35++ == v176 >> 4;
          uint64_t v28 = v184;
        }
        while (!v23);
        BOOL v23 = v18++ == v170;
      }
      while (!v23);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, uint64_t a7, unsigned int a8, int a9, int a10, uint64_t a11, int a12)
{
  uint64_t v234 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  uint64_t v17 = a1;
  unsigned int v183 = a8;
  unsigned int v18 = a8 >> 3;
  unsigned int v168 = a8 + a10 - 1;
  unsigned int v170 = v168 >> 3;
  unsigned int v19 = *(unsigned __int8 *)(*(void *)(a1 + 208) + 88);
  unsigned int v20 = *(_DWORD *)(a1 + 112);
  uint64_t v184 = v17;
  if (*(void *)(v17 + 168))
  {
    __int16 CacheMode = IOSurfaceGetCacheMode();
    uint64_t v17 = v184;
    int v22 = CacheMode & 0xF00;
  }
  else
  {
    int v22 = 0;
  }
  BOOL v23 = (v22 & 0xD00) == 0 || v22 == 768;
  int v24 = v22 & 0xE00;
  int v26 = !v23 && v24 != 1024;
  int v188 = v26;
  BOOL isLevelTiled = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::isLevelTiled(v17, *(_DWORD *)(v17 + 144) + a12);
  uint64_t v28 = v184;
  BOOL v177 = isLevelTiled;
  if (v18 <= v170)
  {
    unsigned int v176 = a7 + a9 - 1;
    unsigned int v167 = a7 >> 4;
    if (a7 >> 4 <= v176 >> 4)
    {
      unsigned int v164 = a5 - 1;
      unsigned int v186 = (a5 - 1) >> 4;
      int v185 = ((a5 - 1) & 0xF) + 1;
      int v165 = ((a6 - 1) & 7) + 1;
      unsigned int v166 = (a6 - 1) >> 3;
      uint32x2_t v29 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0xF00000007);
      *(int32x2_t *)v30.i8 = vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32(vadd_s32((int32x2_t)vshl_u32(v29, (uint32x2_t)0xFFFFFFFCFFFFFFFDLL), (int32x2_t)-1)))))));
      v31.i64[0] = 0x2000000010;
      *(int8x8_t *)v32.i8 = vbic_s8(*(int8x8_t *)v30.i8, (int8x8_t)vcgt_u32((uint32x2_t)0x2000000010, v29));
      __int32 v175 = v32.i32[0] | v32.i32[1];
      uint64_t v174 = v32.i64[0];
      BOOL v173 = v32.i32[0] != 0;
      BOOL v172 = v32.i32[1] != 0;
      unint64_t v163 = 8 * v20 * (unint64_t)v19;
      do
      {
        unsigned int v33 = (8 * v18) | 7;
        if (8 * v18 <= v183) {
          int v34 = v183;
        }
        else {
          int v34 = 8 * v18;
        }
        unsigned int v35 = v167;
        if (v168 < v33) {
          unsigned int v33 = v168;
        }
        unsigned int v182 = 8 * v18;
        int v171 = v34 - 8 * v18;
        int v181 = v33 - v34 + 1;
        int v36 = v165;
        if (v18 != v166) {
          int v36 = 8;
        }
        unsigned int v189 = v36;
        uint64_t v180 = a3 + (v34 - v183) * a11;
        do
        {
          unsigned int v37 = 16 * v35;
          unsigned int v38 = 16 * (v35 + 1) - 1;
          if (16 * v35 <= a7) {
            int v39 = a7;
          }
          else {
            int v39 = 16 * v35;
          }
          if (v176 < v38) {
            unsigned int v38 = v176;
          }
          int v40 = v38 - v39 + 1;
          if (v35 == v186) {
            unsigned int v41 = v185;
          }
          else {
            unsigned int v41 = 16;
          }
          BOOL v42 = 1;
          if (v182 >= v183 && v37 >= a7)
          {
            int v43 = v185;
            if (v35 != v186) {
              int v43 = 16;
            }
            BOOL v42 = v40 != v43 || v181 != v189;
          }
          if (v177)
          {
            unsigned int v64 = 0;
            uint64_t v65 = v163 >> (*(unsigned char *)(v28 + 57) != 0);
            char v66 = 1;
            if (v65 > 127)
            {
              if (v65 > 511)
              {
                if (v65 == 512)
                {
                  char v67 = 0;
                  unsigned int v64 = 16;
                  unsigned int v68 = 16;
                }
                else
                {
                  char v67 = 1;
                  unsigned int v68 = 0;
                  if (v65 == 1024)
                  {
                    unsigned int v68 = 8;
                    unsigned int v64 = 16;
                  }
                }
              }
              else if (v65 == 128)
              {
                char v66 = 0;
                char v67 = 0;
                unsigned int v64 = 32;
                unsigned int v68 = 32;
              }
              else
              {
                char v67 = 1;
                unsigned int v68 = 0;
                if (v65 == 256)
                {
                  char v66 = 0;
                  char v67 = 0;
                  unsigned int v68 = 16;
                  unsigned int v64 = 32;
                }
              }
            }
            else
            {
              char v67 = 1;
              unsigned int v68 = 0;
              switch(v65)
              {
                case 4:
                  char v66 = 0;
                  char v67 = 0;
                  unsigned int v68 = 128;
                  unsigned int v64 = 256;
                  break;
                case 5:
                case 6:
                case 7:
                case 9:
                case 10:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 17:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                  break;
                case 8:
                  char v66 = 0;
                  char v67 = 0;
                  unsigned int v64 = 128;
                  unsigned int v68 = 128;
                  break;
                case 16:
                  char v66 = 0;
                  char v67 = 0;
                  unsigned int v68 = 64;
                  unsigned int v64 = 128;
                  break;
                case 32:
                  char v66 = 0;
                  char v67 = 0;
                  unsigned int v64 = 64;
                  unsigned int v68 = 64;
                  break;
                default:
                  if (v65 == 64)
                  {
                    char v66 = 0;
                    char v67 = 0;
                    unsigned int v68 = 32;
                    unsigned int v64 = 64;
                  }
                  break;
              }
            }
            unsigned int v152 = (v64 >> 4) - 1;
            if (v66) {
              unsigned int v153 = 0;
            }
            else {
              unsigned int v153 = 32 - __clz(~(-1 << -(char)__clz(v152)));
            }
            unsigned int v154 = (v68 >> 3) - 1;
            if (v67)
            {
              unsigned int v155 = 0;
              if (v153) {
                goto LABEL_210;
              }
            }
            else
            {
              unsigned int v155 = 32 - __clz(~(-1 << -(char)__clz(v154)));
              if (v155 | v153)
              {
LABEL_210:
                int v156 = 0;
                uint64_t v157 = 0;
                int v158 = v35 & v152;
                int v159 = v18 & v154;
                BOOL v160 = v155 != 0;
                BOOL v161 = v153 != 0;
                int v162 = 1;
                do
                {
                  --v155;
                  if (v160) {
                    v157 |= (unint64_t)(v162 & v159) << v156++;
                  }
                  else {
                    unsigned int v155 = 0;
                  }
                  --v153;
                  if (v161) {
                    v157 |= (unint64_t)(v162 & v158) << v156++;
                  }
                  else {
                    unsigned int v153 = 0;
                  }
                  v162 *= 2;
                  --v156;
                  BOOL v161 = v153 != 0;
                  BOOL v160 = v155 != 0;
                }
                while (v153 | v155);
                goto LABEL_222;
              }
            }
            uint64_t v157 = 0;
LABEL_222:
            unint64_t v52 = ((unint64_t)(v37 / v64 + v182 / v68 * ((v64 + v164) / v64)) << 14) + (v157 << 9);
            goto LABEL_58;
          }
          if (v175)
          {
            int v45 = 0;
            uint64_t v46 = 0;
            int v47 = 1;
            BOOL v48 = v173;
            BOOL v49 = v172;
            int v50 = v174;
            int v51 = HIDWORD(v174);
            do
            {
              --v50;
              if (v48) {
                v46 |= (unint64_t)(v47 & v18) << v45++;
              }
              else {
                int v50 = 0;
              }
              --v51;
              if (v49) {
                v46 |= (unint64_t)(v47 & v35) << v45++;
              }
              else {
                int v51 = 0;
              }
              v47 *= 2;
              --v45;
              BOOL v49 = v51 != 0;
              BOOL v48 = v50 != 0;
            }
            while (v51 | v50);
          }
          else
          {
            uint64_t v46 = 0;
          }
          unint64_t v52 = v46 << 9;
LABEL_58:
          unsigned int v53 = *(_DWORD *)(v28 + 128) >> (*(unsigned char *)(v28 + 144) + a12);
          if (v53 <= 1) {
            unsigned int v53 = 1;
          }
          unsigned int v54 = v53 + 15;
          if (v54 < 0x20) {
            unsigned int v55 = 0;
          }
          else {
            unsigned int v55 = 32 - __clz(~(-1 << -(char)__clz((v54 >> 4) - 1)));
          }
          unsigned int v56 = *(_DWORD *)(v28 + 132) >> (*(unsigned char *)(v28 + 144) + a12);
          if (v56 <= 1) {
            unsigned int v56 = 1;
          }
          unsigned int v57 = v56 + 7;
          if (v57 < 0x10)
          {
            unsigned int v58 = 0;
            if (!v55)
            {
LABEL_80:
              uint64_t v60 = 0;
              goto LABEL_81;
            }
          }
          else
          {
            unsigned int v58 = 32 - __clz(~(-1 << -(char)__clz((v57 >> 3) - 1)));
            if (!(v58 | v55)) {
              goto LABEL_80;
            }
          }
          int v59 = 0;
          uint64_t v60 = 0;
          BOOL v61 = v55 != 0;
          BOOL v62 = v58 != 0;
          int v63 = 1;
          do
          {
            --v55;
            if (v61) {
              v60 |= (unint64_t)(v63 & v35) << v59++;
            }
            else {
              unsigned int v55 = 0;
            }
            --v58;
            if (v62) {
              v60 |= (unint64_t)(v63 & v18) << v59++;
            }
            else {
              unsigned int v58 = 0;
            }
            v63 *= 2;
            --v59;
            BOOL v62 = v58 != 0;
            BOOL v61 = v55 != 0;
          }
          while (v58 | v55);
LABEL_81:
          uint64_t v69 = a7;
          int v70 = v41 < 0x10 || v42;
          unsigned int v71 = (char *)(a4 + 8 * v60);
          unint64_t v72 = (int64x2_t *)(v180 + 4 * (v39 - a7));
          uint64_t v73 = (unsigned char *)(a2 + v52);
          if (v189 < 8) {
            int v74 = 1;
          }
          else {
            int v74 = v70;
          }
          __src = v73;
          if (v188)
          {
            if (!v74)
            {
              uint64_t v73 = __dst;
LABEL_94:
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock(v72, a11, (int64x2_t *)v73, v71, v41, v189);
              goto LABEL_95;
            }
            int v75 = v40;
            memcpy(__dst, __src, sizeof(__dst));
            int v40 = v75;
            uint64_t v73 = __dst;
            uint64_t v28 = v184;
          }
          else if (!v74)
          {
            goto LABEL_94;
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE4ELj2ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = v28;
          int v191 = (int64x2_t *)v73;
          unsigned __int8 v199 = v41;
          unsigned __int8 v200 = v189;
          unsigned int v195 = v171;
          unsigned int v196 = v39 - v37;
          unsigned int v192 = v71;
          unint64_t v193 = v72;
          uint64_t v194 = a11;
          unsigned int v197 = v181;
          unsigned int v198 = v40;
          if (!v42)
          {
            unsigned int v76 = *v71;
            a7 = v69;
            if (v76 == 63)
            {
              int64x2_t v30 = *((int64x2_t *)v73 + 1);
              int v78 = (const double *)(v73 + 32);
              *(float64x2x2_t *)v31.i8 = vld2q_f64(v78);
              int64x2_t v32 = vzip2q_s64(*(int64x2_t *)v73, v30);
              int64x2_t v202 = vzip1q_s64(*(int64x2_t *)v73, v30);
              int64x2_t v206 = v32;
              int64x2_t v210 = v31;
              int64x2_t v214 = v79;
              uint64_t v77 = 64;
            }
            else if (v76 == 1)
            {
              int64x2_t v32 = (int64x2_t)vld1q_dup_s16((const __int16 *)v73);
              int64x2_t v202 = v32;
              int64x2_t v206 = v32;
              int64x2_t v210 = v32;
              int64x2_t v214 = v32;
              uint64_t v77 = 2;
            }
            else if (*v71)
            {
              uint64_t v77 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v202, 64, (uint64_t)v73, v76, *(int8x8_t *)v32.i8, *(double *)v30.i64, *(int8x8_t *)v31.i8);
            }
            else
            {
              uint64_t v77 = 0;
              int64x2_t v202 = 0uLL;
              int64x2_t v206 = 0uLL;
              int64x2_t v210 = 0uLL;
              int64x2_t v214 = 0uLL;
            }
            uint64_t v80 = (uint64_t)&v73[v77];
            unsigned int v81 = v71[1];
            if (v81 == 63)
            {
              int64x2_t v30 = *(int64x2_t *)(v80 + 16);
              int v83 = (const double *)(v80 + 32);
              *(float64x2x2_t *)v31.i8 = vld2q_f64(v83);
              int64x2_t v32 = vzip2q_s64(*(int64x2_t *)v80, v30);
              int64x2_t v203 = vzip1q_s64(*(int64x2_t *)v80, v30);
              int64x2_t v207 = v32;
              int64x2_t v211 = v31;
              int64x2_t v215 = v84;
              uint64_t v82 = 64;
            }
            else if (v81 == 1)
            {
              int64x2_t v32 = (int64x2_t)vld1q_dup_s16((const __int16 *)v80);
              int64x2_t v203 = v32;
              int64x2_t v207 = v32;
              int64x2_t v211 = v32;
              int64x2_t v215 = v32;
              uint64_t v82 = 2;
            }
            else if (v71[1])
            {
              uint64_t v82 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v203, 64, v80, v81, *(int8x8_t *)v32.i8, *(double *)v30.i64, *(int8x8_t *)v31.i8);
            }
            else
            {
              uint64_t v82 = 0;
              int64x2_t v203 = 0uLL;
              int64x2_t v207 = 0uLL;
              int64x2_t v211 = 0uLL;
              int64x2_t v215 = 0uLL;
            }
            uint64_t v85 = v80 + v82;
            unsigned int v86 = v71[2];
            if (v86 == 63)
            {
              int64x2_t v30 = *(int64x2_t *)(v85 + 16);
              unsigned int v88 = (const double *)(v85 + 32);
              *(float64x2x2_t *)v31.i8 = vld2q_f64(v88);
              int64x2_t v32 = vzip2q_s64(*(int64x2_t *)v85, v30);
              int64x2_t v218 = vzip1q_s64(*(int64x2_t *)v85, v30);
              int64x2_t v222 = v32;
              int64x2_t v226 = v31;
              int64x2_t v230 = v89;
              uint64_t v87 = 64;
            }
            else if (v86 == 1)
            {
              int64x2_t v32 = (int64x2_t)vld1q_dup_s16((const __int16 *)v85);
              int64x2_t v218 = v32;
              int64x2_t v222 = v32;
              int64x2_t v226 = v32;
              int64x2_t v230 = v32;
              uint64_t v87 = 2;
            }
            else if (v71[2])
            {
              uint64_t v87 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v218, 64, v85, v86, *(int8x8_t *)v32.i8, *(double *)v30.i64, *(int8x8_t *)v31.i8);
            }
            else
            {
              uint64_t v87 = 0;
              int64x2_t v218 = 0uLL;
              int64x2_t v222 = 0uLL;
              int64x2_t v226 = 0uLL;
              int64x2_t v230 = 0uLL;
            }
            uint64_t v90 = v85 + v87;
            unsigned int v91 = v71[3];
            if (v91 == 63)
            {
              int64x2_t v30 = *(int64x2_t *)(v90 + 16);
              unsigned int v93 = (const double *)(v90 + 32);
              *(float64x2x2_t *)v31.i8 = vld2q_f64(v93);
              int64x2_t v32 = vzip2q_s64(*(int64x2_t *)v90, v30);
              int64x2_t v219 = vzip1q_s64(*(int64x2_t *)v90, v30);
              int64x2_t v223 = v32;
              int64x2_t v227 = v31;
              int64x2_t v231 = v94;
              uint64_t v92 = 64;
            }
            else if (v91 == 1)
            {
              int64x2_t v32 = (int64x2_t)vld1q_dup_s16((const __int16 *)v90);
              int64x2_t v219 = v32;
              int64x2_t v223 = v32;
              int64x2_t v227 = v32;
              int64x2_t v231 = v32;
              uint64_t v92 = 2;
            }
            else if (v71[3])
            {
              uint64_t v92 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v219, 64, v90, v91, *(int8x8_t *)v32.i8, *(double *)v30.i64, *(int8x8_t *)v31.i8);
            }
            else
            {
              uint64_t v92 = 0;
              int64x2_t v219 = 0uLL;
              int64x2_t v223 = 0uLL;
              int64x2_t v227 = 0uLL;
              int64x2_t v231 = 0uLL;
            }
            uint64_t v95 = v90 + v92;
            unsigned int v96 = v71[4];
            if (v96 == 63)
            {
              int64x2_t v30 = *(int64x2_t *)(v95 + 16);
              unsigned int v98 = (const double *)(v95 + 32);
              *(float64x2x2_t *)v31.i8 = vld2q_f64(v98);
              int64x2_t v32 = vzip2q_s64(*(int64x2_t *)v95, v30);
              int64x2_t v204 = vzip1q_s64(*(int64x2_t *)v95, v30);
              int64x2_t v208 = v32;
              int64x2_t v212 = v31;
              int64x2_t v216 = v99;
              uint64_t v97 = 64;
            }
            else if (v96 == 1)
            {
              int64x2_t v32 = (int64x2_t)vld1q_dup_s16((const __int16 *)v95);
              int64x2_t v204 = v32;
              int64x2_t v208 = v32;
              int64x2_t v212 = v32;
              int64x2_t v216 = v32;
              uint64_t v97 = 2;
            }
            else if (v71[4])
            {
              uint64_t v97 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v204, 64, v95, v96, *(int8x8_t *)v32.i8, *(double *)v30.i64, *(int8x8_t *)v31.i8);
            }
            else
            {
              uint64_t v97 = 0;
              int64x2_t v204 = 0uLL;
              int64x2_t v208 = 0uLL;
              int64x2_t v212 = 0uLL;
              int64x2_t v216 = 0uLL;
            }
            uint64_t v100 = v95 + v97;
            unsigned int v101 = v71[5];
            if (v101 == 63)
            {
              int64x2_t v30 = *(int64x2_t *)(v100 + 16);
              unsigned int v103 = (const double *)(v100 + 32);
              *(float64x2x2_t *)v31.i8 = vld2q_f64(v103);
              int64x2_t v32 = vzip2q_s64(*(int64x2_t *)v100, v30);
              int64x2_t v205 = vzip1q_s64(*(int64x2_t *)v100, v30);
              int64x2_t v209 = v32;
              int64x2_t v213 = v31;
              int64x2_t v217 = v104;
              uint64_t v102 = 64;
            }
            else if (v101 == 1)
            {
              int64x2_t v32 = (int64x2_t)vld1q_dup_s16((const __int16 *)v100);
              int64x2_t v205 = v32;
              int64x2_t v209 = v32;
              int64x2_t v213 = v32;
              int64x2_t v217 = v32;
              uint64_t v102 = 2;
            }
            else if (v71[5])
            {
              uint64_t v102 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v205, 64, v100, v101, *(int8x8_t *)v32.i8, *(double *)v30.i64, *(int8x8_t *)v31.i8);
            }
            else
            {
              uint64_t v102 = 0;
              int64x2_t v205 = 0uLL;
              int64x2_t v209 = 0uLL;
              int64x2_t v213 = 0uLL;
              int64x2_t v217 = 0uLL;
            }
            uint64_t v105 = v100 + v102;
            unsigned int v106 = v71[6];
            if (v106 == 63)
            {
              int64x2_t v30 = *(int64x2_t *)(v105 + 16);
              unsigned int v108 = (const double *)(v105 + 32);
              *(float64x2x2_t *)v31.i8 = vld2q_f64(v108);
              int64x2_t v32 = vzip2q_s64(*(int64x2_t *)v105, v30);
              int64x2_t v220 = vzip1q_s64(*(int64x2_t *)v105, v30);
              int64x2_t v224 = v32;
              int64x2_t v228 = v31;
              int64x2_t v232 = v109;
              uint64_t v107 = 64;
            }
            else if (v106 == 1)
            {
              int64x2_t v32 = (int64x2_t)vld1q_dup_s16((const __int16 *)v105);
              int64x2_t v220 = v32;
              int64x2_t v224 = v32;
              int64x2_t v228 = v32;
              int64x2_t v232 = v32;
              uint64_t v107 = 2;
            }
            else if (v71[6])
            {
              uint64_t v107 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v220, 64, v105, v106, *(int8x8_t *)v32.i8, *(double *)v30.i64, *(int8x8_t *)v31.i8);
            }
            else
            {
              uint64_t v107 = 0;
              int64x2_t v220 = 0uLL;
              int64x2_t v224 = 0uLL;
              int64x2_t v228 = 0uLL;
              int64x2_t v232 = 0uLL;
            }
            uint64_t v110 = v105 + v107;
            unsigned int v111 = v71[7];
            if (v111 == 63)
            {
              int64x2_t v114 = *(int64x2_t *)(v110 + 16);
              BOOL v115 = (const double *)(v110 + 32);
              float64x2x2_t v235 = vld2q_f64(v115);
              int64x2_t v116 = vzip2q_s64(*(int64x2_t *)v110, v114);
              int64x2_t v221 = vzip1q_s64(*(int64x2_t *)v110, v114);
              int64x2_t v225 = v116;
              float64x2_t v229 = v235.val[0];
              float64x2_t v233 = v235.val[1];
              uint64_t v112 = v197;
              if (v197) {
                goto LABEL_156;
              }
            }
            else
            {
              if (v111 != 1)
              {
                if (v71[7])
                {
                  AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v221, 64, v110, v111, *(int8x8_t *)v32.i8, *(double *)v30.i64, *(int8x8_t *)v31.i8);
                  uint64_t v112 = v197;
                  if (!v197) {
                    goto LABEL_190;
                  }
                }
                else
                {
                  int64x2_t v221 = 0uLL;
                  int64x2_t v225 = 0uLL;
                  float64x2_t v229 = 0uLL;
                  float64x2_t v233 = 0uLL;
                  uint64_t v112 = v197;
                  if (!v197) {
                    goto LABEL_190;
                  }
                }
LABEL_156:
                if (!v198) {
                  goto LABEL_190;
                }
                uint64_t v117 = 0;
                unint64_t v118 = (unint64_t)v195 << 6;
                uint64_t v119 = 4 * v196;
                uint64_t v120 = &v202.i8[v118 + v119];
                unint64_t v121 = v193;
                uint64_t v122 = v194;
                unint64_t v123 = 4 * v198;
                if (v123 <= 1) {
                  unint64_t v124 = 1;
                }
                else {
                  unint64_t v124 = 4 * v198;
                }
                unint64_t v125 = v118 + v119;
                int64x2_t v126 = &v202.i8[v118 + v119];
                if (v124) {
                  BOOL v127 = (v124 - 1) >> 32 == 0;
                }
                else {
                  BOOL v127 = 0;
                }
                uint64_t v128 = v124 & 0x3FFFFFFE0;
                uint64_t v129 = v124 & 0x3FFFFFFF8;
                char v131 = !v127 || v124 < 8;
                unint64_t v132 = &v203.i8[v125];
                unint64_t v133 = v193 + 1;
                uint64_t v134 = v120;
                unint64_t v135 = v193;
                while (2)
                {
                  unint64_t v136 = &v121->i8[v122 * v117];
                  unint64_t v137 = &v120[64 * v117];
                  if ((unint64_t)(&v126[64 * v117] - v136) < 0x20) {
                    char v138 = 1;
                  }
                  else {
                    char v138 = v131;
                  }
                  if (v138)
                  {
                    int v139 = 0;
LABEL_187:
                    unsigned int v149 = v139 + 1;
                    do
                    {
                      char v150 = *v136++;
                      *v137++ = v150;
                    }
                    while (v123 > v149++);
                  }
                  else
                  {
                    if (v124 >= 0x20)
                    {
                      uint64_t v141 = v133;
                      char v142 = v132;
                      uint64_t v143 = v124 & 0x3FFFFFFE0;
                      do
                      {
                        int64x2_t v144 = *v141;
                        *((int64x2_t *)v142 - 1) = v141[-1];
                        *(int64x2_t *)char v142 = v144;
                        v142 += 32;
                        v141 += 2;
                        v143 -= 32;
                      }
                      while (v143);
                      if (v124 == v128) {
                        goto LABEL_170;
                      }
                      uint64_t v140 = v124 & 0x3FFFFFFE0;
                      if ((v124 & 0x18) == 0)
                      {
                        v136 += v128;
                        v137 += v128;
                        int v139 = v124 & 0xFFFFFFE0;
                        goto LABEL_187;
                      }
                    }
                    else
                    {
                      uint64_t v140 = 0;
                    }
                    v137 += v129;
                    uint64_t v145 = v140 - v129;
                    unint64_t v146 = (uint64_t *)((char *)v135->i64 + v140);
                    unint64_t v147 = &v134[v140];
                    do
                    {
                      uint64_t v148 = *v146++;
                      *(void *)unint64_t v147 = v148;
                      v147 += 8;
                      v145 += 8;
                    }
                    while (v145);
                    if (v124 != v129)
                    {
                      v136 += v129;
                      int v139 = v124 & 0xFFFFFFF8;
                      goto LABEL_187;
                    }
                  }
LABEL_170:
                  ++v117;
                  v132 += 64;
                  unint64_t v133 = (int64x2_t *)((char *)v133 + v122);
                  unint64_t v135 = (int64x2_t *)((char *)v135 + v122);
                  v134 += 64;
                  if (v117 == v112) {
                    goto LABEL_190;
                  }
                  continue;
                }
              }
              int16x8_t v113 = vld1q_dup_s16((const __int16 *)v110);
              int64x2_t v221 = (int64x2_t)v113;
              int64x2_t v225 = (int64x2_t)v113;
              float64x2_t v229 = (float64x2_t)v113;
              float64x2_t v233 = (float64x2_t)v113;
              uint64_t v112 = v197;
              if (v197) {
                goto LABEL_156;
              }
            }
LABEL_190:
            AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock(&v202, 64, v191, v192, v199, v200);
            if (!v188) {
              goto LABEL_26;
            }
            goto LABEL_191;
          }
          dispatch_sync(*(dispatch_queue_t *)(*(void *)(v28 + 8) + 7384), block);
LABEL_95:
          a7 = v69;
          if (!v188) {
            goto LABEL_26;
          }
LABEL_191:
          memcpy(__src, v73, 0x200uLL);
LABEL_26:
          BOOL v23 = v35++ == v176 >> 4;
          uint64_t v28 = v184;
        }
        while (!v23);
        BOOL v23 = v18++ == v170;
      }
      while (!v23);
    }
  }
}

uint64_t AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10, uint64_t a11, char a12)
{
  uint64_t v12 = MEMORY[0x270FA5388](a1);
  unsigned int v14 = v13;
  unsigned int v16 = v15;
  unsigned int v18 = v17;
  unsigned int v20 = v19;
  uint64_t v298 = v21;
  uint64_t v299 = v22;
  uint64_t v285 = v23;
  uint64_t v24 = v12;
  uint64_t v449 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(v12, 0);
  unsigned int v301 = v14;
  unsigned int v287 = v14 + a10 - 1;
  uint64_t v303 = v24;
  if (*(void *)(v24 + 168)) {
    int v25 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v25 = 0;
  }
  unsigned int v26 = v20 - 1;
  unsigned int v27 = v18 - 1;
  unsigned int v28 = v14 >> 3;
  unsigned int v286 = v287 >> 3;
  BOOL v29 = (v25 & 0xD00) == 0 || v25 == 768;
  int v30 = v25 & 0xE00;
  int v32 = !v29 && v30 != 1024;
  int v307 = v32;
  uint64_t result = v24;
  if (*(unsigned char *)(v24 + 232))
  {
    unsigned int v34 = *(unsigned __int8 *)(v24 + 255);
    unsigned int v35 = *(unsigned __int8 *)(v24 + 254);
    char v36 = __clz(v26);
    if (1 << v34 >= v18 || v20 >> v35)
    {
      if (!(v18 >> v34) && 1 << v35 < v20)
      {
        if (v18 < 2) {
          unsigned int v39 = 0;
        }
        else {
          unsigned int v39 = __clz(~(-1 << -(char)__clz(v27))) - 32;
        }
        v35 += v34 + v39;
        unsigned int v34 = -v39;
      }
    }
    else
    {
      unsigned int v37 = 32 - __clz(~(-1 << -v36));
      unsigned int v38 = v35 + v34;
      if (v20 < 2) {
        unsigned int v37 = 0;
      }
      unsigned int v34 = v38 - v37;
      unsigned int v35 = v37;
    }
    if (v20 < 2)
    {
      if (v35) {
        goto LABEL_27;
      }
    }
    else if (32 - __clz(~(-1 << -v36)) < v35)
    {
LABEL_27:
      BOOL v297 = 0;
LABEL_32:
      unsigned int v294 = v35 - 4;
      unsigned int v291 = v34 - 3;
      int v41 = -1 << *(unsigned char *)(*(void *)(v24 + 208) + 48);
      unsigned int v284 = (((~v41 + v20) & v41) + ~(-1 << v35)) >> v35;
      goto LABEL_33;
    }
    if (v18 < 2) {
      unsigned int v40 = 0;
    }
    else {
      unsigned int v40 = 32 - __clz(~(-1 << -(char)__clz(v27)));
    }
    BOOL v297 = v40 >= v34;
    goto LABEL_32;
  }
  BOOL v297 = 0;
  unsigned int v284 = 0;
  unsigned int v291 = 0;
  unsigned int v294 = 0;
LABEL_33:
  if (v28 <= v286)
  {
    unsigned int v296 = v16 + a9 - 1;
    unsigned int v283 = v16 >> 4;
    if (v16 >> 4 <= v296 >> 4)
    {
      unsigned int v305 = v26 >> 4;
      unsigned int v282 = v27 >> 3;
      int v304 = (v26 & 0xF) + 1;
      int v281 = (v27 & 7) + 1;
      int v280 = ~(-1 << v291);
      uint32x2_t v42 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(v20, v18), (int32x2_t)0xF00000007);
      int8x8_t v43 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32(vadd_s32((int32x2_t)vshl_u32(v42, (uint32x2_t)0xFFFFFFFCFFFFFFFDLL), (int32x2_t)-1))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x2000000010, v42));
      __int32 v292 = v43.i32[0] | v43.i32[1];
      int8x8_t v290 = v43;
      BOOL v289 = v43.i32[0] != 0;
      BOOL v288 = v43.i32[1] != 0;
      unsigned int v295 = v16;
      do
      {
        unsigned int v44 = (8 * v28) | 7;
        if (8 * v28 <= v301) {
          int v45 = v301;
        }
        else {
          int v45 = 8 * v28;
        }
        if (v287 < v44) {
          unsigned int v44 = v287;
        }
        int v293 = v45 - 8 * v28;
        int v302 = v44 - v45 + 1;
        unsigned int v46 = v283;
        int v47 = v281;
        if (v28 != v282) {
          int v47 = 8;
        }
        unsigned int v308 = v47;
        int v48 = v28 & v280;
        uint64_t v300 = v285 + (v45 - v301) * a11;
        do
        {
          unsigned int v49 = 16 * v46;
          unsigned int v50 = 16 * (v46 + 1) - 1;
          if (16 * v46 <= v16) {
            int v51 = v16;
          }
          else {
            int v51 = 16 * v46;
          }
          if (v296 < v50) {
            unsigned int v50 = v296;
          }
          int v52 = v50 - v51 + 1;
          if (v46 == v305) {
            unsigned int v53 = v304;
          }
          else {
            unsigned int v53 = 16;
          }
          BOOL v54 = 1;
          if (8 * v28 >= v301 && v49 >= v16)
          {
            int v55 = v304;
            if (v46 != v305) {
              int v55 = 16;
            }
            BOOL v54 = v52 != v55 || v302 != v308;
          }
          if (v297)
          {
            if (v294 | v291)
            {
              int v57 = 0;
              uint64_t v58 = 0;
              int v59 = 1;
              BOOL v60 = v291 != 0;
              BOOL v61 = v294 != 0;
              unsigned int v62 = v291;
              unsigned int v63 = v294;
              do
              {
                --v62;
                if (v60) {
                  v58 |= (unint64_t)(v48 & v59) << v57++;
                }
                else {
                  unsigned int v62 = 0;
                }
                --v63;
                if (v61) {
                  v58 |= (unint64_t)(v46 & ~(-1 << v294) & v59) << v57++;
                }
                else {
                  unsigned int v63 = 0;
                }
                v59 *= 2;
                --v57;
                BOOL v61 = v63 != 0;
                BOOL v60 = v62 != 0;
              }
              while (v63 | v62);
            }
            else
            {
              uint64_t v58 = 0;
            }
            uint64_t v71 = *(void *)(result + 320) * ((v46 >> v294) + (v28 >> v291) * v284) + (v58 << 11);
          }
          else
          {
            if (v292)
            {
              int v64 = 0;
              uint64_t v65 = 0;
              int v66 = 1;
              BOOL v67 = v289;
              BOOL v68 = v288;
              __int32 v69 = v290.i32[0];
              __int32 v70 = v290.i32[1];
              do
              {
                --v69;
                if (v67) {
                  v65 |= (unint64_t)(v66 & v28) << v64++;
                }
                else {
                  __int32 v69 = 0;
                }
                --v70;
                if (v68) {
                  v65 |= (unint64_t)(v66 & v46) << v64++;
                }
                else {
                  __int32 v70 = 0;
                }
                v66 *= 2;
                --v64;
                BOOL v68 = v70 != 0;
                BOOL v67 = v69 != 0;
              }
              while (v70 | v69);
            }
            else
            {
              uint64_t v65 = 0;
            }
            uint64_t v71 = v65 << 11;
          }
          unsigned int v72 = *(_DWORD *)(result + 128) >> (*(unsigned char *)(result + 144) + a12);
          if (v72 <= 1) {
            unsigned int v72 = 1;
          }
          unsigned int v73 = v72 + 15;
          if (v73 < 0x20) {
            unsigned int v74 = 0;
          }
          else {
            unsigned int v74 = 32 - __clz(~(-1 << -(char)__clz((v73 >> 4) - 1)));
          }
          unsigned int v75 = *(_DWORD *)(result + 132) >> (*(unsigned char *)(result + 144) + a12);
          if (v75 <= 1) {
            unsigned int v75 = 1;
          }
          unsigned int v76 = v75 + 7;
          if (v76 < 0x10) {
            unsigned int v77 = 0;
          }
          else {
            unsigned int v77 = 32 - __clz(~(-1 << -(char)__clz((v76 >> 3) - 1)));
          }
          if (v77 | v74)
          {
            int v78 = 0;
            uint64_t v79 = 0;
            BOOL v80 = v74 != 0;
            BOOL v81 = v77 != 0;
            int v82 = 1;
            do
            {
              --v74;
              if (v80) {
                v79 |= (unint64_t)(v82 & v46) << v78++;
              }
              else {
                unsigned int v74 = 0;
              }
              --v77;
              if (v81) {
                v79 |= (unint64_t)(v82 & v28) << v78++;
              }
              else {
                unsigned int v77 = 0;
              }
              v82 *= 2;
              --v78;
              BOOL v81 = v77 != 0;
              BOOL v80 = v74 != 0;
            }
            while (v77 | v74);
          }
          else
          {
            uint64_t v79 = 0;
          }
          int v83 = v53 < 0x10 || v54;
          int64x2_t v84 = (char *)(v299 + 8 * v79);
          unint64_t v85 = v300 + 16 * (v51 - v16);
          unsigned int v86 = (void *)(v298 + v71);
          if (v308 < 8) {
            int v87 = 1;
          }
          else {
            int v87 = v83;
          }
          uint64_t v306 = v86;
          if (v307)
          {
            unsigned int v88 = __dst;
            if (!v87) {
              goto LABEL_121;
            }
            int v89 = v52;
            char v90 = v53;
            BOOL v91 = v54;
            memcpy(__dst, v86, sizeof(__dst));
            unsigned int v49 = 16 * v46;
            BOOL v54 = v91;
            LOBYTE(v53) = v90;
            int v52 = v89;
            int v48 = v28 & v280;
            uint64_t result = v303;
          }
          else
          {
            unsigned int v88 = v86;
            if (!v87)
            {
LABEL_121:
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock(v85, a11, (unint64_t)v88, v84, v53, v308);
              goto LABEL_122;
            }
          }
          block[0] = MEMORY[0x263EF8330];
          unsigned int v92 = v51 - v49;
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE18ELj2ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = result;
          float32x4_t v310 = v88;
          unsigned __int8 v318 = v53;
          unsigned __int8 v319 = v308;
          int v314 = v293;
          unsigned int v315 = v51 - v49;
          float32x4_t v311 = v84;
          unint64_t v312 = v85;
          uint64_t v313 = a11;
          int v316 = v302;
          unsigned int v317 = v52;
          if (v54)
          {
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(result + 8) + 7384), block);
LABEL_122:
            unsigned int v16 = v295;
            unsigned int v93 = v46 + 1;
            goto LABEL_214;
          }
          unsigned int v94 = *v84;
          if (v94 == 255)
          {
            float64x2_t v97 = *((float64x2_t *)v88 + 1);
            float64x2_t v98 = *((float64x2_t *)v88 + 2);
            float64x2_t v99 = *((float64x2_t *)v88 + 3);
            float64x2_t v100 = *((float64x2_t *)v88 + 6);
            float64x2_t v101 = *((float64x2_t *)v88 + 7);
            float64x2_t v102 = *((float64x2_t *)v88 + 8);
            float64x2_t v103 = *((float64x2_t *)v88 + 9);
            float64x2_t v104 = *((float64x2_t *)v88 + 11);
            float64x2_t v105 = *((float64x2_t *)v88 + 4);
            float64x2_t v106 = *((float64x2_t *)v88 + 12);
            float64x2_t v107 = *((float64x2_t *)v88 + 13);
            float64x2_t v108 = *((float64x2_t *)v88 + 14);
            float64x2_t v109 = *((float64x2_t *)v88 + 15);
            float64x2_t v110 = *((float64x2_t *)v88 + 5);
            float64x2_t v111 = *((float64x2_t *)v88 + 10);
            float64x2_t v321 = *(float64x2_t *)v88;
            float64x2_t v322 = v97;
            float64x2_t v323 = v105;
            float64x2_t v324 = v110;
            float64x2_t v337 = v98;
            float64x2_t v338 = v99;
            float64x2_t v339 = v100;
            float64x2_t v340 = v101;
            float64x2_t v353 = v102;
            float64x2_t v354 = v103;
            float64x2_t v355 = v106;
            float64x2_t v356 = v107;
            uint64_t v95 = 256;
            float64x2_t v369 = v111;
            float64x2_t v370 = v104;
            float64x2_t v371 = v108;
            float64x2_t v372 = v109;
          }
          else if (v94 == 7)
          {
            float64x2_t v96 = vld1q_dup_f64((const double *)v88);
            float64x2_t v321 = v96;
            float64x2_t v322 = v96;
            float64x2_t v323 = v96;
            float64x2_t v324 = v96;
            float64x2_t v337 = v96;
            float64x2_t v338 = v96;
            float64x2_t v339 = v96;
            float64x2_t v340 = v96;
            float64x2_t v353 = v96;
            float64x2_t v354 = v96;
            float64x2_t v355 = v96;
            float64x2_t v356 = v96;
            float64x2_t v369 = v96;
            float64x2_t v370 = v96;
            uint64_t v95 = 8;
            float64x2_t v371 = v96;
            float64x2_t v372 = v96;
          }
          else if (*v84)
          {
            uint64_t v95 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((uint64_t)&v321, 256, (uint64_t)v88, v94);
          }
          else
          {
            uint64_t v95 = 0;
            float64x2_t v324 = 0u;
            float64x2_t v323 = 0u;
            float64x2_t v322 = 0u;
            float64x2_t v321 = 0u;
            float64x2_t v337 = 0u;
            float64x2_t v338 = 0u;
            float64x2_t v339 = 0u;
            float64x2_t v340 = 0u;
            float64x2_t v353 = 0u;
            float64x2_t v354 = 0u;
            float64x2_t v355 = 0u;
            float64x2_t v356 = 0u;
            float64x2_t v369 = 0u;
            float64x2_t v370 = 0u;
            float64x2_t v371 = 0u;
            float64x2_t v372 = 0u;
          }
          uint64_t v112 = (uint64_t)&v88[v95];
          unsigned int v113 = v84[1];
          if (v113 == 255)
          {
            float64x2_t v116 = *(float64x2_t *)(v112 + 16);
            float64x2_t v117 = *(float64x2_t *)(v112 + 32);
            float64x2_t v118 = *(float64x2_t *)(v112 + 48);
            float64x2_t v119 = *(float64x2_t *)(v112 + 96);
            float64x2_t v120 = *(float64x2_t *)(v112 + 112);
            float64x2_t v121 = *(float64x2_t *)(v112 + 128);
            float64x2_t v122 = *(float64x2_t *)(v112 + 144);
            float64x2_t v123 = *(float64x2_t *)(v112 + 176);
            float64x2_t v124 = *(float64x2_t *)(v112 + 64);
            float64x2_t v125 = *(float64x2_t *)(v112 + 192);
            float64x2_t v126 = *(float64x2_t *)(v112 + 208);
            float64x2_t v127 = *(float64x2_t *)(v112 + 224);
            float64x2_t v128 = *(float64x2_t *)(v112 + 240);
            float64x2_t v129 = *(float64x2_t *)(v112 + 80);
            float64x2_t v130 = *(float64x2_t *)(v112 + 160);
            float64x2_t v325 = *(float64x2_t *)v112;
            float64x2_t v326 = v116;
            float64x2_t v327 = v124;
            float64x2_t v328 = v129;
            float64x2_t v341 = v117;
            float64x2_t v342 = v118;
            float64x2_t v343 = v119;
            float64x2_t v344 = v120;
            float64x2_t v357 = v121;
            float64x2_t v358 = v122;
            float64x2_t v359 = v125;
            float64x2_t v360 = v126;
            uint64_t v114 = 256;
            float64x2_t v373 = v130;
            float64x2_t v374 = v123;
            float64x2_t v375 = v127;
            float64x2_t v376 = v128;
          }
          else if (v113 == 7)
          {
            float64x2_t v115 = vld1q_dup_f64((const double *)v112);
            float64x2_t v325 = v115;
            float64x2_t v326 = v115;
            float64x2_t v327 = v115;
            float64x2_t v328 = v115;
            float64x2_t v341 = v115;
            float64x2_t v342 = v115;
            float64x2_t v343 = v115;
            float64x2_t v344 = v115;
            float64x2_t v357 = v115;
            float64x2_t v358 = v115;
            float64x2_t v359 = v115;
            float64x2_t v360 = v115;
            float64x2_t v373 = v115;
            float64x2_t v374 = v115;
            uint64_t v114 = 8;
            float64x2_t v375 = v115;
            float64x2_t v376 = v115;
          }
          else if (v84[1])
          {
            uint64_t v114 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((uint64_t)&v325, 256, v112, v113);
          }
          else
          {
            uint64_t v114 = 0;
            float64x2_t v327 = 0u;
            float64x2_t v328 = 0u;
            float64x2_t v325 = 0u;
            float64x2_t v326 = 0u;
            float64x2_t v341 = 0u;
            float64x2_t v342 = 0u;
            float64x2_t v343 = 0u;
            float64x2_t v344 = 0u;
            float64x2_t v357 = 0u;
            float64x2_t v358 = 0u;
            float64x2_t v359 = 0u;
            float64x2_t v360 = 0u;
            float64x2_t v373 = 0u;
            float64x2_t v374 = 0u;
            float64x2_t v375 = 0u;
            float64x2_t v376 = 0u;
          }
          uint64_t v131 = v112 + v114;
          unsigned int v132 = v84[2];
          if (v132 == 255)
          {
            float64x2_t v135 = *(float64x2_t *)(v131 + 16);
            float64x2_t v136 = *(float64x2_t *)(v131 + 32);
            float64x2_t v137 = *(float64x2_t *)(v131 + 48);
            float64x2_t v138 = *(float64x2_t *)(v131 + 96);
            float64x2_t v139 = *(float64x2_t *)(v131 + 112);
            float64x2_t v140 = *(float64x2_t *)(v131 + 128);
            float64x2_t v141 = *(float64x2_t *)(v131 + 144);
            float64x2_t v142 = *(float64x2_t *)(v131 + 176);
            float64x2_t v143 = *(float64x2_t *)(v131 + 64);
            float64x2_t v144 = *(float64x2_t *)(v131 + 192);
            float64x2_t v145 = *(float64x2_t *)(v131 + 208);
            float64x2_t v146 = *(float64x2_t *)(v131 + 224);
            float64x2_t v147 = *(float64x2_t *)(v131 + 240);
            float64x2_t v148 = *(float64x2_t *)(v131 + 80);
            float64x2_t v149 = *(float64x2_t *)(v131 + 160);
            float64x2_t v385 = *(float64x2_t *)v131;
            float64x2_t v386 = v135;
            float64x2_t v387 = v143;
            float64x2_t v388 = v148;
            float64x2_t v401 = v136;
            float64x2_t v402 = v137;
            float64x2_t v403 = v138;
            float64x2_t v404 = v139;
            float64x2_t v417 = v140;
            float64x2_t v418 = v141;
            float64x2_t v419 = v144;
            float64x2_t v420 = v145;
            uint64_t v133 = 256;
            float64x2_t v433 = v149;
            float64x2_t v434 = v142;
            float64x2_t v435 = v146;
            float64x2_t v436 = v147;
          }
          else if (v132 == 7)
          {
            float64x2_t v134 = vld1q_dup_f64((const double *)v131);
            float64x2_t v385 = v134;
            float64x2_t v386 = v134;
            float64x2_t v387 = v134;
            float64x2_t v388 = v134;
            float64x2_t v401 = v134;
            float64x2_t v402 = v134;
            float64x2_t v403 = v134;
            float64x2_t v404 = v134;
            float64x2_t v417 = v134;
            float64x2_t v418 = v134;
            float64x2_t v419 = v134;
            float64x2_t v420 = v134;
            float64x2_t v433 = v134;
            float64x2_t v434 = v134;
            float64x2_t v435 = v134;
            uint64_t v133 = 8;
            float64x2_t v436 = v134;
          }
          else if (v84[2])
          {
            uint64_t v133 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((uint64_t)&v385, 256, v131, v132);
          }
          else
          {
            uint64_t v133 = 0;
            float64x2_t v387 = 0u;
            float64x2_t v388 = 0u;
            float64x2_t v385 = 0u;
            float64x2_t v386 = 0u;
            float64x2_t v401 = 0u;
            float64x2_t v402 = 0u;
            float64x2_t v403 = 0u;
            float64x2_t v404 = 0u;
            float64x2_t v417 = 0u;
            float64x2_t v418 = 0u;
            float64x2_t v419 = 0u;
            float64x2_t v420 = 0u;
            float64x2_t v433 = 0u;
            float64x2_t v434 = 0u;
            float64x2_t v435 = 0u;
            float64x2_t v436 = 0u;
          }
          uint64_t v150 = v131 + v133;
          unsigned int v151 = v84[3];
          if (v151 == 255)
          {
            float64x2_t v154 = *(float64x2_t *)(v150 + 16);
            float64x2_t v155 = *(float64x2_t *)(v150 + 32);
            float64x2_t v156 = *(float64x2_t *)(v150 + 48);
            float64x2_t v157 = *(float64x2_t *)(v150 + 96);
            float64x2_t v158 = *(float64x2_t *)(v150 + 112);
            float64x2_t v159 = *(float64x2_t *)(v150 + 128);
            float64x2_t v160 = *(float64x2_t *)(v150 + 144);
            float64x2_t v161 = *(float64x2_t *)(v150 + 176);
            float64x2_t v162 = *(float64x2_t *)(v150 + 64);
            float64x2_t v163 = *(float64x2_t *)(v150 + 192);
            float64x2_t v164 = *(float64x2_t *)(v150 + 208);
            float64x2_t v165 = *(float64x2_t *)(v150 + 224);
            float64x2_t v166 = *(float64x2_t *)(v150 + 240);
            float64x2_t v167 = *(float64x2_t *)(v150 + 80);
            float64x2_t v168 = *(float64x2_t *)(v150 + 160);
            float64x2_t v389 = *(float64x2_t *)v150;
            float64x2_t v390 = v154;
            float64x2_t v391 = v162;
            float64x2_t v392 = v167;
            float64x2_t v405 = v155;
            float64x2_t v406 = v156;
            float64x2_t v407 = v157;
            float64x2_t v408 = v158;
            float64x2_t v421 = v159;
            float64x2_t v422 = v160;
            float64x2_t v423 = v163;
            float64x2_t v424 = v164;
            uint64_t v152 = 256;
            float64x2_t v437 = v168;
            float64x2_t v438 = v161;
            float64x2_t v439 = v165;
            float64x2_t v440 = v166;
          }
          else if (v151 == 7)
          {
            float64x2_t v153 = vld1q_dup_f64((const double *)v150);
            float64x2_t v389 = v153;
            float64x2_t v390 = v153;
            float64x2_t v391 = v153;
            float64x2_t v392 = v153;
            float64x2_t v405 = v153;
            float64x2_t v406 = v153;
            float64x2_t v407 = v153;
            float64x2_t v408 = v153;
            float64x2_t v421 = v153;
            float64x2_t v422 = v153;
            float64x2_t v423 = v153;
            float64x2_t v424 = v153;
            float64x2_t v437 = v153;
            float64x2_t v438 = v153;
            float64x2_t v439 = v153;
            uint64_t v152 = 8;
            float64x2_t v440 = v153;
          }
          else if (v84[3])
          {
            uint64_t v152 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((uint64_t)&v389, 256, v150, v151);
          }
          else
          {
            uint64_t v152 = 0;
            float64x2_t v391 = 0u;
            float64x2_t v392 = 0u;
            float64x2_t v389 = 0u;
            float64x2_t v390 = 0u;
            float64x2_t v405 = 0u;
            float64x2_t v406 = 0u;
            float64x2_t v407 = 0u;
            float64x2_t v408 = 0u;
            float64x2_t v421 = 0u;
            float64x2_t v422 = 0u;
            float64x2_t v423 = 0u;
            float64x2_t v424 = 0u;
            float64x2_t v437 = 0u;
            float64x2_t v438 = 0u;
            float64x2_t v439 = 0u;
            float64x2_t v440 = 0u;
          }
          uint64_t v169 = v150 + v152;
          unsigned int v170 = v84[4];
          if (v170 == 255)
          {
            float64x2_t v173 = *(float64x2_t *)(v169 + 16);
            float64x2_t v174 = *(float64x2_t *)(v169 + 32);
            float64x2_t v175 = *(float64x2_t *)(v169 + 48);
            float64x2_t v176 = *(float64x2_t *)(v169 + 96);
            float64x2_t v177 = *(float64x2_t *)(v169 + 112);
            float64x2_t v178 = *(float64x2_t *)(v169 + 128);
            float64x2_t v179 = *(float64x2_t *)(v169 + 144);
            float64x2_t v180 = *(float64x2_t *)(v169 + 176);
            float64x2_t v181 = *(float64x2_t *)(v169 + 64);
            float64x2_t v182 = *(float64x2_t *)(v169 + 192);
            float64x2_t v183 = *(float64x2_t *)(v169 + 208);
            float64x2_t v184 = *(float64x2_t *)(v169 + 224);
            float64x2_t v185 = *(float64x2_t *)(v169 + 240);
            float64x2_t v186 = *(float64x2_t *)(v169 + 80);
            float64x2_t v187 = *(float64x2_t *)(v169 + 160);
            float64x2_t v329 = *(float64x2_t *)v169;
            float64x2_t v330 = v173;
            float64x2_t v331 = v181;
            float64x2_t v332 = v186;
            float64x2_t v345 = v174;
            float64x2_t v346 = v175;
            float64x2_t v347 = v176;
            float64x2_t v348 = v177;
            float64x2_t v361 = v178;
            float64x2_t v362 = v179;
            float64x2_t v363 = v182;
            float64x2_t v364 = v183;
            uint64_t v171 = 256;
            float64x2_t v377 = v187;
            float64x2_t v378 = v180;
            float64x2_t v379 = v184;
            float64x2_t v380 = v185;
          }
          else if (v170 == 7)
          {
            float64x2_t v172 = vld1q_dup_f64((const double *)v169);
            float64x2_t v329 = v172;
            float64x2_t v330 = v172;
            float64x2_t v331 = v172;
            float64x2_t v332 = v172;
            float64x2_t v345 = v172;
            float64x2_t v346 = v172;
            float64x2_t v347 = v172;
            float64x2_t v348 = v172;
            float64x2_t v361 = v172;
            float64x2_t v362 = v172;
            float64x2_t v363 = v172;
            float64x2_t v364 = v172;
            float64x2_t v377 = v172;
            float64x2_t v378 = v172;
            uint64_t v171 = 8;
            float64x2_t v379 = v172;
            float64x2_t v380 = v172;
          }
          else if (v84[4])
          {
            uint64_t v171 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((uint64_t)&v329, 256, v169, v170);
          }
          else
          {
            uint64_t v171 = 0;
            float64x2_t v331 = 0u;
            float64x2_t v332 = 0u;
            float64x2_t v329 = 0u;
            float64x2_t v330 = 0u;
            float64x2_t v345 = 0u;
            float64x2_t v346 = 0u;
            float64x2_t v347 = 0u;
            float64x2_t v348 = 0u;
            float64x2_t v361 = 0u;
            float64x2_t v362 = 0u;
            float64x2_t v363 = 0u;
            float64x2_t v364 = 0u;
            float64x2_t v377 = 0u;
            float64x2_t v378 = 0u;
            float64x2_t v379 = 0u;
            float64x2_t v380 = 0u;
          }
          uint64_t v188 = v169 + v171;
          unsigned int v189 = v84[5];
          if (v189 == 255)
          {
            float64x2_t v192 = *(float64x2_t *)(v188 + 16);
            float64x2_t v193 = *(float64x2_t *)(v188 + 32);
            float64x2_t v194 = *(float64x2_t *)(v188 + 48);
            float64x2_t v195 = *(float64x2_t *)(v188 + 96);
            float64x2_t v196 = *(float64x2_t *)(v188 + 112);
            float64x2_t v197 = *(float64x2_t *)(v188 + 128);
            float64x2_t v198 = *(float64x2_t *)(v188 + 144);
            float64x2_t v199 = *(float64x2_t *)(v188 + 176);
            float64x2_t v200 = *(float64x2_t *)(v188 + 64);
            float64x2_t v201 = *(float64x2_t *)(v188 + 192);
            float64x2_t v202 = *(float64x2_t *)(v188 + 208);
            float64x2_t v203 = *(float64x2_t *)(v188 + 224);
            float64x2_t v204 = *(float64x2_t *)(v188 + 240);
            float64x2_t v205 = *(float64x2_t *)(v188 + 80);
            float64x2_t v206 = *(float64x2_t *)(v188 + 160);
            float64x2_t v333 = *(float64x2_t *)v188;
            float64x2_t v334 = v192;
            float64x2_t v335 = v200;
            float64x2_t v336 = v205;
            float64x2_t v349 = v193;
            float64x2_t v350 = v194;
            float64x2_t v351 = v195;
            float64x2_t v352 = v196;
            float64x2_t v365 = v197;
            float64x2_t v366 = v198;
            float64x2_t v367 = v201;
            float64x2_t v368 = v202;
            uint64_t v190 = 256;
            float64x2_t v381 = v206;
            float64x2_t v382 = v199;
            float64x2_t v383 = v203;
            float64x2_t v384 = v204;
          }
          else if (v189 == 7)
          {
            float64x2_t v191 = vld1q_dup_f64((const double *)v188);
            float64x2_t v333 = v191;
            float64x2_t v334 = v191;
            float64x2_t v335 = v191;
            float64x2_t v336 = v191;
            float64x2_t v349 = v191;
            float64x2_t v350 = v191;
            float64x2_t v351 = v191;
            float64x2_t v352 = v191;
            float64x2_t v365 = v191;
            float64x2_t v366 = v191;
            float64x2_t v367 = v191;
            float64x2_t v368 = v191;
            float64x2_t v381 = v191;
            float64x2_t v382 = v191;
            uint64_t v190 = 8;
            float64x2_t v383 = v191;
            float64x2_t v384 = v191;
          }
          else if (v84[5])
          {
            uint64_t v190 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((uint64_t)&v333, 256, v188, v189);
          }
          else
          {
            uint64_t v190 = 0;
            float64x2_t v335 = 0u;
            float64x2_t v336 = 0u;
            float64x2_t v333 = 0u;
            float64x2_t v334 = 0u;
            float64x2_t v349 = 0u;
            float64x2_t v350 = 0u;
            float64x2_t v351 = 0u;
            float64x2_t v352 = 0u;
            float64x2_t v365 = 0u;
            float64x2_t v366 = 0u;
            float64x2_t v367 = 0u;
            float64x2_t v368 = 0u;
            float64x2_t v381 = 0u;
            float64x2_t v382 = 0u;
            float64x2_t v383 = 0u;
            float64x2_t v384 = 0u;
          }
          uint64_t v207 = v188 + v190;
          unsigned int v208 = v84[6];
          if (v208 == 255)
          {
            float64x2_t v211 = *(float64x2_t *)(v207 + 16);
            float64x2_t v212 = *(float64x2_t *)(v207 + 32);
            float64x2_t v213 = *(float64x2_t *)(v207 + 48);
            float64x2_t v214 = *(float64x2_t *)(v207 + 96);
            float64x2_t v215 = *(float64x2_t *)(v207 + 112);
            float64x2_t v216 = *(float64x2_t *)(v207 + 128);
            float64x2_t v217 = *(float64x2_t *)(v207 + 144);
            float64x2_t v218 = *(float64x2_t *)(v207 + 176);
            float64x2_t v219 = *(float64x2_t *)(v207 + 64);
            float64x2_t v220 = *(float64x2_t *)(v207 + 192);
            float64x2_t v221 = *(float64x2_t *)(v207 + 208);
            float64x2_t v222 = *(float64x2_t *)(v207 + 224);
            float64x2_t v223 = *(float64x2_t *)(v207 + 240);
            float64x2_t v224 = *(float64x2_t *)(v207 + 80);
            float64x2_t v225 = *(float64x2_t *)(v207 + 160);
            float64x2_t v393 = *(float64x2_t *)v207;
            float64x2_t v394 = v211;
            float64x2_t v395 = v219;
            float64x2_t v396 = v224;
            float64x2_t v409 = v212;
            float64x2_t v410 = v213;
            float64x2_t v411 = v214;
            float64x2_t v412 = v215;
            float64x2_t v425 = v216;
            float64x2_t v426 = v217;
            float64x2_t v427 = v220;
            float64x2_t v428 = v221;
            uint64_t v209 = 256;
            float64x2_t v441 = v225;
            float64x2_t v442 = v218;
            float64x2_t v443 = v222;
            float64x2_t v444 = v223;
          }
          else if (v208 == 7)
          {
            float64x2_t v210 = vld1q_dup_f64((const double *)v207);
            float64x2_t v393 = v210;
            float64x2_t v394 = v210;
            float64x2_t v395 = v210;
            float64x2_t v396 = v210;
            float64x2_t v409 = v210;
            float64x2_t v410 = v210;
            float64x2_t v411 = v210;
            float64x2_t v412 = v210;
            float64x2_t v425 = v210;
            float64x2_t v426 = v210;
            float64x2_t v427 = v210;
            float64x2_t v428 = v210;
            float64x2_t v441 = v210;
            float64x2_t v442 = v210;
            float64x2_t v443 = v210;
            uint64_t v209 = 8;
            float64x2_t v444 = v210;
          }
          else if (v84[6])
          {
            uint64_t v209 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((uint64_t)&v393, 256, v207, v208);
          }
          else
          {
            uint64_t v209 = 0;
            float64x2_t v395 = 0u;
            float64x2_t v396 = 0u;
            float64x2_t v393 = 0u;
            float64x2_t v394 = 0u;
            float64x2_t v409 = 0u;
            float64x2_t v410 = 0u;
            float64x2_t v411 = 0u;
            float64x2_t v412 = 0u;
            float64x2_t v425 = 0u;
            float64x2_t v426 = 0u;
            float64x2_t v427 = 0u;
            float64x2_t v428 = 0u;
            float64x2_t v441 = 0u;
            float64x2_t v442 = 0u;
            float64x2_t v443 = 0u;
            float64x2_t v444 = 0u;
          }
          uint64_t v226 = v207 + v209;
          unsigned int v227 = v84[7];
          if (v227 == 255)
          {
            float64x2_t v231 = *(float64x2_t *)(v226 + 16);
            float64x2_t v232 = *(float64x2_t *)(v226 + 32);
            float64x2_t v233 = *(float64x2_t *)(v226 + 48);
            float64x2_t v234 = *(float64x2_t *)(v226 + 96);
            float64x2_t v235 = *(float64x2_t *)(v226 + 112);
            float64x2_t v236 = *(float64x2_t *)(v226 + 64);
            float64x2_t v237 = *(float64x2_t *)(v226 + 128);
            float64x2_t v238 = *(float64x2_t *)(v226 + 144);
            float64x2_t v239 = *(float64x2_t *)(v226 + 80);
            float64x2_t v240 = *(float64x2_t *)(v226 + 192);
            float64x2_t v241 = *(float64x2_t *)(v226 + 208);
            float64x2_t v242 = *(float64x2_t *)(v226 + 224);
            float64x2_t v243 = *(float64x2_t *)(v226 + 240);
            float64x2_t v244 = *(float64x2_t *)(v226 + 160);
            float64x2_t v245 = *(float64x2_t *)(v226 + 176);
            float64x2_t v397 = *(float64x2_t *)v226;
            float64x2_t v398 = v231;
            float64x2_t v399 = v236;
            float64x2_t v400 = v239;
            float64x2_t v413 = v232;
            float64x2_t v414 = v233;
            float64x2_t v415 = v234;
            float64x2_t v416 = v235;
            float64x2_t v429 = v237;
            float64x2_t v430 = v238;
            float64x2_t v431 = v240;
            float64x2_t v432 = v241;
            int v228 = v302;
            unsigned int v229 = v293;
            float64x2_t v445 = v244;
            float64x2_t v446 = v245;
            float64x2_t v447 = v242;
            float64x2_t v448 = v243;
            unsigned int v16 = v295;
            unsigned int v93 = v46 + 1;
            if (!v302) {
              goto LABEL_213;
            }
          }
          else
          {
            unsigned int v16 = v295;
            unsigned int v93 = v46 + 1;
            if (v227 == 7)
            {
              float64x2_t v230 = vld1q_dup_f64((const double *)v226);
              float64x2_t v397 = v230;
              float64x2_t v398 = v230;
              float64x2_t v399 = v230;
              float64x2_t v400 = v230;
              float64x2_t v413 = v230;
              float64x2_t v414 = v230;
              float64x2_t v415 = v230;
              float64x2_t v416 = v230;
              float64x2_t v429 = v230;
              float64x2_t v430 = v230;
              float64x2_t v431 = v230;
              float64x2_t v432 = v230;
              float64x2_t v445 = v230;
              float64x2_t v446 = v230;
              float64x2_t v447 = v230;
              int v228 = v302;
              unsigned int v229 = v293;
              float64x2_t v448 = v230;
              if (!v302) {
                goto LABEL_213;
              }
            }
            else if (v84[7])
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((uint64_t)&v397, 256, v226, v227);
              unsigned int v229 = v314;
              unsigned int v92 = v315;
              int v228 = v316;
              if (!v316) {
                goto LABEL_213;
              }
            }
            else
            {
              float64x2_t v399 = 0u;
              float64x2_t v400 = 0u;
              float64x2_t v397 = 0u;
              float64x2_t v398 = 0u;
              float64x2_t v413 = 0u;
              float64x2_t v414 = 0u;
              float64x2_t v415 = 0u;
              float64x2_t v416 = 0u;
              float64x2_t v429 = 0u;
              float64x2_t v430 = 0u;
              float64x2_t v431 = 0u;
              float64x2_t v432 = 0u;
              float64x2_t v445 = 0u;
              float64x2_t v446 = 0u;
              int v228 = v302;
              unsigned int v229 = v293;
              float64x2_t v447 = 0u;
              float64x2_t v448 = 0u;
              if (!v302) {
                goto LABEL_213;
              }
            }
          }
          if (v317)
          {
            uint64_t v246 = 0;
            unint64_t v247 = (unint64_t)v229 << 8;
            uint64_t v248 = 16 * v92;
            int32x4_t v249 = (char *)&v321 + v247 + v248;
            unint64_t v250 = v312;
            uint64_t v251 = v313;
            unint64_t v252 = 16 * v317;
            if (v252 <= 1) {
              unint64_t v253 = 1;
            }
            else {
              unint64_t v253 = 16 * v317;
            }
            unint64_t v254 = v247 + v248;
            int32x4_t v255 = (char *)&v321 + v247 + v248;
            if (v253) {
              BOOL v256 = (v253 - 1) >> 32 == 0;
            }
            else {
              BOOL v256 = 0;
            }
            char v257 = !v256;
            uint64_t v258 = v253 & 0xFFFFFFFE0;
            uint64_t v259 = v253 & 0xFFFFFFFF0;
            int32x4_t v260 = (char *)&v322 + v254;
            int32x4_t v261 = (long long *)(v312 + 16);
            int32x4_t v262 = v249;
            unint64_t v263 = v312;
            do
            {
              int32x4_t v264 = (char *)(v250 + v251 * v246);
              int32x4_t v265 = &v249[256 * v246];
              if ((unint64_t)(&v255[256 * v246] - v264) < 0x20) {
                char v266 = 1;
              }
              else {
                char v266 = v257;
              }
              if (v266)
              {
                int v267 = 0;
                goto LABEL_210;
              }
              if (v253 >= 0x20)
              {
                int16x8_t v273 = v261;
                int32x4_t v274 = v260;
                uint64_t v275 = v253 & 0xFFFFFFFE0;
                do
                {
                  long long v276 = *v273;
                  *(v274 - 1) = *(v273 - 1);
                  *int32x4_t v274 = v276;
                  v274 += 2;
                  v273 += 2;
                  v275 -= 32;
                }
                while (v275);
                if (v253 == v258) {
                  goto LABEL_193;
                }
                uint64_t v268 = v253 & 0xFFFFFFFE0;
                if ((v253 & 0x10) == 0)
                {
                  v264 += v258;
                  v265 += v258;
                  int v267 = v253 & 0xFFFFFFE0;
                  goto LABEL_210;
                }
              }
              else
              {
                uint64_t v268 = 0;
              }
              v265 += v259;
              unint64_t v269 = v268 - (v253 & 0xFFFFFFFF0);
              int32x4_t v270 = (uint64_t *)(v263 + v268);
              int32x4_t v271 = &v262[v268];
              do
              {
                uint64_t v272 = *v270++;
                *(void *)int32x4_t v271 = v272;
                v271 += 8;
                v269 += 8;
              }
              while (v269);
              if (v253 == v259) {
                goto LABEL_193;
              }
              v264 += v259;
              int v267 = v253 & 0xFFFFFFF0;
LABEL_210:
              unsigned int v277 = v267 + 1;
              do
              {
                char v278 = *v264++;
                *v265++ = v278;
              }
              while (v252 > v277++);
LABEL_193:
              ++v246;
              v260 += 256;
              int32x4_t v261 = (long long *)((char *)v261 + v251);
              v263 += v251;
              v262 += 256;
            }
            while (v246 != v228);
          }
LABEL_213:
          AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)&v321, 256, (unint64_t)v310, v311, v318, v319);
LABEL_214:
          if (v307) {
            memcpy(v306, v88, 0x800uLL);
          }
          BOOL v29 = v46 == v296 >> 4;
          unsigned int v46 = v93;
          uint64_t result = v303;
        }
        while (!v29);
        BOOL v29 = v28++ == v286;
      }
      while (!v29);
    }
  }
  return result;
}

uint64_t AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10, uint64_t a11, char a12)
{
  uint64_t v12 = MEMORY[0x270FA5388](a1);
  unsigned int v14 = v13;
  unsigned int v16 = v15;
  unsigned int v18 = v17;
  unsigned int v20 = v19;
  uint64_t v298 = v21;
  uint64_t v299 = v22;
  uint64_t v285 = v23;
  uint64_t v24 = v12;
  uint64_t v449 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(v12, 0);
  unsigned int v301 = v14;
  unsigned int v287 = v14 + a10 - 1;
  uint64_t v303 = v24;
  if (*(void *)(v24 + 168)) {
    int v25 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v25 = 0;
  }
  unsigned int v26 = v20 - 1;
  unsigned int v27 = v18 - 1;
  unsigned int v28 = v14 >> 3;
  unsigned int v286 = v287 >> 3;
  BOOL v29 = (v25 & 0xD00) == 0 || v25 == 768;
  int v30 = v25 & 0xE00;
  int v32 = !v29 && v30 != 1024;
  int v307 = v32;
  uint64_t result = v24;
  if (*(unsigned char *)(v24 + 232))
  {
    unsigned int v34 = *(unsigned __int8 *)(v24 + 255);
    unsigned int v35 = *(unsigned __int8 *)(v24 + 254);
    char v36 = __clz(v26);
    if (1 << v34 >= v18 || v20 >> v35)
    {
      if (!(v18 >> v34) && 1 << v35 < v20)
      {
        if (v18 < 2) {
          unsigned int v39 = 0;
        }
        else {
          unsigned int v39 = __clz(~(-1 << -(char)__clz(v27))) - 32;
        }
        v35 += v34 + v39;
        unsigned int v34 = -v39;
      }
    }
    else
    {
      unsigned int v37 = 32 - __clz(~(-1 << -v36));
      unsigned int v38 = v35 + v34;
      if (v20 < 2) {
        unsigned int v37 = 0;
      }
      unsigned int v34 = v38 - v37;
      unsigned int v35 = v37;
    }
    if (v20 < 2)
    {
      if (v35) {
        goto LABEL_27;
      }
    }
    else if (32 - __clz(~(-1 << -v36)) < v35)
    {
LABEL_27:
      BOOL v297 = 0;
LABEL_32:
      unsigned int v294 = v35 - 4;
      unsigned int v291 = v34 - 3;
      int v41 = -1 << *(unsigned char *)(*(void *)(v24 + 208) + 48);
      unsigned int v284 = (((~v41 + v20) & v41) + ~(-1 << v35)) >> v35;
      goto LABEL_33;
    }
    if (v18 < 2) {
      unsigned int v40 = 0;
    }
    else {
      unsigned int v40 = 32 - __clz(~(-1 << -(char)__clz(v27)));
    }
    BOOL v297 = v40 >= v34;
    goto LABEL_32;
  }
  BOOL v297 = 0;
  unsigned int v284 = 0;
  unsigned int v291 = 0;
  unsigned int v294 = 0;
LABEL_33:
  if (v28 <= v286)
  {
    unsigned int v296 = v16 + a9 - 1;
    unsigned int v283 = v16 >> 4;
    if (v16 >> 4 <= v296 >> 4)
    {
      unsigned int v305 = v26 >> 4;
      unsigned int v282 = v27 >> 3;
      int v304 = (v26 & 0xF) + 1;
      int v281 = (v27 & 7) + 1;
      int v280 = ~(-1 << v291);
      uint32x2_t v42 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(v20, v18), (int32x2_t)0xF00000007);
      int8x8_t v43 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32(vadd_s32((int32x2_t)vshl_u32(v42, (uint32x2_t)0xFFFFFFFCFFFFFFFDLL), (int32x2_t)-1))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x2000000010, v42));
      __int32 v292 = v43.i32[0] | v43.i32[1];
      int8x8_t v290 = v43;
      BOOL v289 = v43.i32[0] != 0;
      BOOL v288 = v43.i32[1] != 0;
      unsigned int v295 = v16;
      do
      {
        unsigned int v44 = (8 * v28) | 7;
        if (8 * v28 <= v301) {
          int v45 = v301;
        }
        else {
          int v45 = 8 * v28;
        }
        if (v287 < v44) {
          unsigned int v44 = v287;
        }
        int v293 = v45 - 8 * v28;
        int v302 = v44 - v45 + 1;
        unsigned int v46 = v283;
        int v47 = v281;
        if (v28 != v282) {
          int v47 = 8;
        }
        unsigned int v308 = v47;
        int v48 = v28 & v280;
        uint64_t v300 = v285 + (v45 - v301) * a11;
        do
        {
          unsigned int v49 = 16 * v46;
          unsigned int v50 = 16 * (v46 + 1) - 1;
          if (16 * v46 <= v16) {
            int v51 = v16;
          }
          else {
            int v51 = 16 * v46;
          }
          if (v296 < v50) {
            unsigned int v50 = v296;
          }
          int v52 = v50 - v51 + 1;
          if (v46 == v305) {
            unsigned int v53 = v304;
          }
          else {
            unsigned int v53 = 16;
          }
          BOOL v54 = 1;
          if (8 * v28 >= v301 && v49 >= v16)
          {
            int v55 = v304;
            if (v46 != v305) {
              int v55 = 16;
            }
            BOOL v54 = v52 != v55 || v302 != v308;
          }
          if (v297)
          {
            if (v294 | v291)
            {
              int v57 = 0;
              uint64_t v58 = 0;
              int v59 = 1;
              BOOL v60 = v291 != 0;
              BOOL v61 = v294 != 0;
              unsigned int v62 = v291;
              unsigned int v63 = v294;
              do
              {
                --v62;
                if (v60) {
                  v58 |= (unint64_t)(v48 & v59) << v57++;
                }
                else {
                  unsigned int v62 = 0;
                }
                --v63;
                if (v61) {
                  v58 |= (unint64_t)(v46 & ~(-1 << v294) & v59) << v57++;
                }
                else {
                  unsigned int v63 = 0;
                }
                v59 *= 2;
                --v57;
                BOOL v61 = v63 != 0;
                BOOL v60 = v62 != 0;
              }
              while (v63 | v62);
            }
            else
            {
              uint64_t v58 = 0;
            }
            uint64_t v71 = *(void *)(result + 320) * ((v46 >> v294) + (v28 >> v291) * v284) + (v58 << 11);
          }
          else
          {
            if (v292)
            {
              int v64 = 0;
              uint64_t v65 = 0;
              int v66 = 1;
              BOOL v67 = v289;
              BOOL v68 = v288;
              __int32 v69 = v290.i32[0];
              __int32 v70 = v290.i32[1];
              do
              {
                --v69;
                if (v67) {
                  v65 |= (unint64_t)(v66 & v28) << v64++;
                }
                else {
                  __int32 v69 = 0;
                }
                --v70;
                if (v68) {
                  v65 |= (unint64_t)(v66 & v46) << v64++;
                }
                else {
                  __int32 v70 = 0;
                }
                v66 *= 2;
                --v64;
                BOOL v68 = v70 != 0;
                BOOL v67 = v69 != 0;
              }
              while (v70 | v69);
            }
            else
            {
              uint64_t v65 = 0;
            }
            uint64_t v71 = v65 << 11;
          }
          unsigned int v72 = *(_DWORD *)(result + 128) >> (*(unsigned char *)(result + 144) + a12);
          if (v72 <= 1) {
            unsigned int v72 = 1;
          }
          unsigned int v73 = v72 + 15;
          if (v73 < 0x20) {
            unsigned int v74 = 0;
          }
          else {
            unsigned int v74 = 32 - __clz(~(-1 << -(char)__clz((v73 >> 4) - 1)));
          }
          unsigned int v75 = *(_DWORD *)(result + 132) >> (*(unsigned char *)(result + 144) + a12);
          if (v75 <= 1) {
            unsigned int v75 = 1;
          }
          unsigned int v76 = v75 + 7;
          if (v76 < 0x10) {
            unsigned int v77 = 0;
          }
          else {
            unsigned int v77 = 32 - __clz(~(-1 << -(char)__clz((v76 >> 3) - 1)));
          }
          if (v77 | v74)
          {
            int v78 = 0;
            uint64_t v79 = 0;
            BOOL v80 = v74 != 0;
            BOOL v81 = v77 != 0;
            int v82 = 1;
            do
            {
              --v74;
              if (v80) {
                v79 |= (unint64_t)(v82 & v46) << v78++;
              }
              else {
                unsigned int v74 = 0;
              }
              --v77;
              if (v81) {
                v79 |= (unint64_t)(v82 & v28) << v78++;
              }
              else {
                unsigned int v77 = 0;
              }
              v82 *= 2;
              --v78;
              BOOL v81 = v77 != 0;
              BOOL v80 = v74 != 0;
            }
            while (v77 | v74);
          }
          else
          {
            uint64_t v79 = 0;
          }
          int v83 = v53 < 0x10 || v54;
          int64x2_t v84 = (char *)(v299 + 8 * v79);
          unint64_t v85 = (_OWORD *)(v300 + 16 * (v51 - v16));
          unsigned int v86 = (void *)(v298 + v71);
          if (v308 < 8) {
            int v87 = 1;
          }
          else {
            int v87 = v83;
          }
          uint64_t v306 = v86;
          if (v307)
          {
            unsigned int v88 = __dst;
            if (!v87) {
              goto LABEL_121;
            }
            int v89 = v52;
            char v90 = v53;
            BOOL v91 = v54;
            memcpy(__dst, v86, sizeof(__dst));
            unsigned int v49 = 16 * v46;
            BOOL v54 = v91;
            LOBYTE(v53) = v90;
            int v52 = v89;
            int v48 = v28 & v280;
            uint64_t result = v303;
          }
          else
          {
            unsigned int v88 = v86;
            if (!v87)
            {
LABEL_121:
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock(v85, a11, v88, v84, v53, v308);
              goto LABEL_122;
            }
          }
          block[0] = MEMORY[0x263EF8330];
          unsigned int v92 = v51 - v49;
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE18ELj2ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = result;
          float32x4_t v310 = v88;
          unsigned __int8 v318 = v53;
          unsigned __int8 v319 = v308;
          int v314 = v293;
          unsigned int v315 = v51 - v49;
          float32x4_t v311 = v84;
          unint64_t v312 = v85;
          uint64_t v313 = a11;
          int v316 = v302;
          unsigned int v317 = v52;
          if (v54)
          {
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(result + 8) + 7384), block);
LABEL_122:
            unsigned int v16 = v295;
            unsigned int v93 = v46 + 1;
            goto LABEL_214;
          }
          unsigned int v94 = *v84;
          if (v94 == 255)
          {
            float64x2_t v97 = *((float64x2_t *)v88 + 1);
            float64x2_t v98 = *((float64x2_t *)v88 + 2);
            float64x2_t v99 = *((float64x2_t *)v88 + 3);
            float64x2_t v100 = *((float64x2_t *)v88 + 6);
            float64x2_t v101 = *((float64x2_t *)v88 + 7);
            float64x2_t v102 = *((float64x2_t *)v88 + 8);
            float64x2_t v103 = *((float64x2_t *)v88 + 9);
            float64x2_t v104 = *((float64x2_t *)v88 + 11);
            float64x2_t v105 = *((float64x2_t *)v88 + 4);
            float64x2_t v106 = *((float64x2_t *)v88 + 12);
            float64x2_t v107 = *((float64x2_t *)v88 + 13);
            float64x2_t v108 = *((float64x2_t *)v88 + 14);
            float64x2_t v109 = *((float64x2_t *)v88 + 15);
            float64x2_t v110 = *((float64x2_t *)v88 + 5);
            float64x2_t v111 = *((float64x2_t *)v88 + 10);
            float64x2_t v321 = *(float64x2_t *)v88;
            float64x2_t v322 = v97;
            float64x2_t v323 = v105;
            float64x2_t v324 = v110;
            float64x2_t v337 = v98;
            float64x2_t v338 = v99;
            float64x2_t v339 = v100;
            float64x2_t v340 = v101;
            float64x2_t v353 = v102;
            float64x2_t v354 = v103;
            float64x2_t v355 = v106;
            float64x2_t v356 = v107;
            uint64_t v95 = 256;
            float64x2_t v369 = v111;
            float64x2_t v370 = v104;
            float64x2_t v371 = v108;
            float64x2_t v372 = v109;
          }
          else if (v94 == 7)
          {
            float64x2_t v96 = vld1q_dup_f64((const double *)v88);
            float64x2_t v321 = v96;
            float64x2_t v322 = v96;
            float64x2_t v323 = v96;
            float64x2_t v324 = v96;
            float64x2_t v337 = v96;
            float64x2_t v338 = v96;
            float64x2_t v339 = v96;
            float64x2_t v340 = v96;
            float64x2_t v353 = v96;
            float64x2_t v354 = v96;
            float64x2_t v355 = v96;
            float64x2_t v356 = v96;
            float64x2_t v369 = v96;
            float64x2_t v370 = v96;
            uint64_t v95 = 8;
            float64x2_t v371 = v96;
            float64x2_t v372 = v96;
          }
          else if (*v84)
          {
            uint64_t v95 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((uint64_t)&v321, 256, (uint64_t)v88, v94);
          }
          else
          {
            uint64_t v95 = 0;
            float64x2_t v324 = 0u;
            float64x2_t v323 = 0u;
            float64x2_t v322 = 0u;
            float64x2_t v321 = 0u;
            float64x2_t v337 = 0u;
            float64x2_t v338 = 0u;
            float64x2_t v339 = 0u;
            float64x2_t v340 = 0u;
            float64x2_t v353 = 0u;
            float64x2_t v354 = 0u;
            float64x2_t v355 = 0u;
            float64x2_t v356 = 0u;
            float64x2_t v369 = 0u;
            float64x2_t v370 = 0u;
            float64x2_t v371 = 0u;
            float64x2_t v372 = 0u;
          }
          uint64_t v112 = (uint64_t)v88 + v95;
          unsigned int v113 = v84[1];
          if (v113 == 255)
          {
            float64x2_t v116 = *(float64x2_t *)(v112 + 16);
            float64x2_t v117 = *(float64x2_t *)(v112 + 32);
            float64x2_t v118 = *(float64x2_t *)(v112 + 48);
            float64x2_t v119 = *(float64x2_t *)(v112 + 96);
            float64x2_t v120 = *(float64x2_t *)(v112 + 112);
            float64x2_t v121 = *(float64x2_t *)(v112 + 128);
            float64x2_t v122 = *(float64x2_t *)(v112 + 144);
            float64x2_t v123 = *(float64x2_t *)(v112 + 176);
            float64x2_t v124 = *(float64x2_t *)(v112 + 64);
            float64x2_t v125 = *(float64x2_t *)(v112 + 192);
            float64x2_t v126 = *(float64x2_t *)(v112 + 208);
            float64x2_t v127 = *(float64x2_t *)(v112 + 224);
            float64x2_t v128 = *(float64x2_t *)(v112 + 240);
            float64x2_t v129 = *(float64x2_t *)(v112 + 80);
            float64x2_t v130 = *(float64x2_t *)(v112 + 160);
            float64x2_t v325 = *(float64x2_t *)v112;
            float64x2_t v326 = v116;
            float64x2_t v327 = v124;
            float64x2_t v328 = v129;
            float64x2_t v341 = v117;
            float64x2_t v342 = v118;
            float64x2_t v343 = v119;
            float64x2_t v344 = v120;
            float64x2_t v357 = v121;
            float64x2_t v358 = v122;
            float64x2_t v359 = v125;
            float64x2_t v360 = v126;
            uint64_t v114 = 256;
            float64x2_t v373 = v130;
            float64x2_t v374 = v123;
            float64x2_t v375 = v127;
            float64x2_t v376 = v128;
          }
          else if (v113 == 7)
          {
            float64x2_t v115 = vld1q_dup_f64((const double *)v112);
            float64x2_t v325 = v115;
            float64x2_t v326 = v115;
            float64x2_t v327 = v115;
            float64x2_t v328 = v115;
            float64x2_t v341 = v115;
            float64x2_t v342 = v115;
            float64x2_t v343 = v115;
            float64x2_t v344 = v115;
            float64x2_t v357 = v115;
            float64x2_t v358 = v115;
            float64x2_t v359 = v115;
            float64x2_t v360 = v115;
            float64x2_t v373 = v115;
            float64x2_t v374 = v115;
            uint64_t v114 = 8;
            float64x2_t v375 = v115;
            float64x2_t v376 = v115;
          }
          else if (v84[1])
          {
            uint64_t v114 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((uint64_t)&v325, 256, v112, v113);
          }
          else
          {
            uint64_t v114 = 0;
            float64x2_t v327 = 0u;
            float64x2_t v328 = 0u;
            float64x2_t v325 = 0u;
            float64x2_t v326 = 0u;
            float64x2_t v341 = 0u;
            float64x2_t v342 = 0u;
            float64x2_t v343 = 0u;
            float64x2_t v344 = 0u;
            float64x2_t v357 = 0u;
            float64x2_t v358 = 0u;
            float64x2_t v359 = 0u;
            float64x2_t v360 = 0u;
            float64x2_t v373 = 0u;
            float64x2_t v374 = 0u;
            float64x2_t v375 = 0u;
            float64x2_t v376 = 0u;
          }
          uint64_t v131 = v112 + v114;
          unsigned int v132 = v84[2];
          if (v132 == 255)
          {
            float64x2_t v135 = *(float64x2_t *)(v131 + 16);
            float64x2_t v136 = *(float64x2_t *)(v131 + 32);
            float64x2_t v137 = *(float64x2_t *)(v131 + 48);
            float64x2_t v138 = *(float64x2_t *)(v131 + 96);
            float64x2_t v139 = *(float64x2_t *)(v131 + 112);
            float64x2_t v140 = *(float64x2_t *)(v131 + 128);
            float64x2_t v141 = *(float64x2_t *)(v131 + 144);
            float64x2_t v142 = *(float64x2_t *)(v131 + 176);
            float64x2_t v143 = *(float64x2_t *)(v131 + 64);
            float64x2_t v144 = *(float64x2_t *)(v131 + 192);
            float64x2_t v145 = *(float64x2_t *)(v131 + 208);
            float64x2_t v146 = *(float64x2_t *)(v131 + 224);
            float64x2_t v147 = *(float64x2_t *)(v131 + 240);
            float64x2_t v148 = *(float64x2_t *)(v131 + 80);
            float64x2_t v149 = *(float64x2_t *)(v131 + 160);
            float64x2_t v385 = *(float64x2_t *)v131;
            float64x2_t v386 = v135;
            float64x2_t v387 = v143;
            float64x2_t v388 = v148;
            float64x2_t v401 = v136;
            float64x2_t v402 = v137;
            float64x2_t v403 = v138;
            float64x2_t v404 = v139;
            float64x2_t v417 = v140;
            float64x2_t v418 = v141;
            float64x2_t v419 = v144;
            float64x2_t v420 = v145;
            uint64_t v133 = 256;
            float64x2_t v433 = v149;
            float64x2_t v434 = v142;
            float64x2_t v435 = v146;
            float64x2_t v436 = v147;
          }
          else if (v132 == 7)
          {
            float64x2_t v134 = vld1q_dup_f64((const double *)v131);
            float64x2_t v385 = v134;
            float64x2_t v386 = v134;
            float64x2_t v387 = v134;
            float64x2_t v388 = v134;
            float64x2_t v401 = v134;
            float64x2_t v402 = v134;
            float64x2_t v403 = v134;
            float64x2_t v404 = v134;
            float64x2_t v417 = v134;
            float64x2_t v418 = v134;
            float64x2_t v419 = v134;
            float64x2_t v420 = v134;
            float64x2_t v433 = v134;
            float64x2_t v434 = v134;
            float64x2_t v435 = v134;
            uint64_t v133 = 8;
            float64x2_t v436 = v134;
          }
          else if (v84[2])
          {
            uint64_t v133 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((uint64_t)&v385, 256, v131, v132);
          }
          else
          {
            uint64_t v133 = 0;
            float64x2_t v387 = 0u;
            float64x2_t v388 = 0u;
            float64x2_t v385 = 0u;
            float64x2_t v386 = 0u;
            float64x2_t v401 = 0u;
            float64x2_t v402 = 0u;
            float64x2_t v403 = 0u;
            float64x2_t v404 = 0u;
            float64x2_t v417 = 0u;
            float64x2_t v418 = 0u;
            float64x2_t v419 = 0u;
            float64x2_t v420 = 0u;
            float64x2_t v433 = 0u;
            float64x2_t v434 = 0u;
            float64x2_t v435 = 0u;
            float64x2_t v436 = 0u;
          }
          uint64_t v150 = v131 + v133;
          unsigned int v151 = v84[3];
          if (v151 == 255)
          {
            float64x2_t v154 = *(float64x2_t *)(v150 + 16);
            float64x2_t v155 = *(float64x2_t *)(v150 + 32);
            float64x2_t v156 = *(float64x2_t *)(v150 + 48);
            float64x2_t v157 = *(float64x2_t *)(v150 + 96);
            float64x2_t v158 = *(float64x2_t *)(v150 + 112);
            float64x2_t v159 = *(float64x2_t *)(v150 + 128);
            float64x2_t v160 = *(float64x2_t *)(v150 + 144);
            float64x2_t v161 = *(float64x2_t *)(v150 + 176);
            float64x2_t v162 = *(float64x2_t *)(v150 + 64);
            float64x2_t v163 = *(float64x2_t *)(v150 + 192);
            float64x2_t v164 = *(float64x2_t *)(v150 + 208);
            float64x2_t v165 = *(float64x2_t *)(v150 + 224);
            float64x2_t v166 = *(float64x2_t *)(v150 + 240);
            float64x2_t v167 = *(float64x2_t *)(v150 + 80);
            float64x2_t v168 = *(float64x2_t *)(v150 + 160);
            float64x2_t v389 = *(float64x2_t *)v150;
            float64x2_t v390 = v154;
            float64x2_t v391 = v162;
            float64x2_t v392 = v167;
            float64x2_t v405 = v155;
            float64x2_t v406 = v156;
            float64x2_t v407 = v157;
            float64x2_t v408 = v158;
            float64x2_t v421 = v159;
            float64x2_t v422 = v160;
            float64x2_t v423 = v163;
            float64x2_t v424 = v164;
            uint64_t v152 = 256;
            float64x2_t v437 = v168;
            float64x2_t v438 = v161;
            float64x2_t v439 = v165;
            float64x2_t v440 = v166;
          }
          else if (v151 == 7)
          {
            float64x2_t v153 = vld1q_dup_f64((const double *)v150);
            float64x2_t v389 = v153;
            float64x2_t v390 = v153;
            float64x2_t v391 = v153;
            float64x2_t v392 = v153;
            float64x2_t v405 = v153;
            float64x2_t v406 = v153;
            float64x2_t v407 = v153;
            float64x2_t v408 = v153;
            float64x2_t v421 = v153;
            float64x2_t v422 = v153;
            float64x2_t v423 = v153;
            float64x2_t v424 = v153;
            float64x2_t v437 = v153;
            float64x2_t v438 = v153;
            float64x2_t v439 = v153;
            uint64_t v152 = 8;
            float64x2_t v440 = v153;
          }
          else if (v84[3])
          {
            uint64_t v152 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((uint64_t)&v389, 256, v150, v151);
          }
          else
          {
            uint64_t v152 = 0;
            float64x2_t v391 = 0u;
            float64x2_t v392 = 0u;
            float64x2_t v389 = 0u;
            float64x2_t v390 = 0u;
            float64x2_t v405 = 0u;
            float64x2_t v406 = 0u;
            float64x2_t v407 = 0u;
            float64x2_t v408 = 0u;
            float64x2_t v421 = 0u;
            float64x2_t v422 = 0u;
            float64x2_t v423 = 0u;
            float64x2_t v424 = 0u;
            float64x2_t v437 = 0u;
            float64x2_t v438 = 0u;
            float64x2_t v439 = 0u;
            float64x2_t v440 = 0u;
          }
          uint64_t v169 = v150 + v152;
          unsigned int v170 = v84[4];
          if (v170 == 255)
          {
            float64x2_t v173 = *(float64x2_t *)(v169 + 16);
            float64x2_t v174 = *(float64x2_t *)(v169 + 32);
            float64x2_t v175 = *(float64x2_t *)(v169 + 48);
            float64x2_t v176 = *(float64x2_t *)(v169 + 96);
            float64x2_t v177 = *(float64x2_t *)(v169 + 112);
            float64x2_t v178 = *(float64x2_t *)(v169 + 128);
            float64x2_t v179 = *(float64x2_t *)(v169 + 144);
            float64x2_t v180 = *(float64x2_t *)(v169 + 176);
            float64x2_t v181 = *(float64x2_t *)(v169 + 64);
            float64x2_t v182 = *(float64x2_t *)(v169 + 192);
            float64x2_t v183 = *(float64x2_t *)(v169 + 208);
            float64x2_t v184 = *(float64x2_t *)(v169 + 224);
            float64x2_t v185 = *(float64x2_t *)(v169 + 240);
            float64x2_t v186 = *(float64x2_t *)(v169 + 80);
            float64x2_t v187 = *(float64x2_t *)(v169 + 160);
            float64x2_t v329 = *(float64x2_t *)v169;
            float64x2_t v330 = v173;
            float64x2_t v331 = v181;
            float64x2_t v332 = v186;
            float64x2_t v345 = v174;
            float64x2_t v346 = v175;
            float64x2_t v347 = v176;
            float64x2_t v348 = v177;
            float64x2_t v361 = v178;
            float64x2_t v362 = v179;
            float64x2_t v363 = v182;
            float64x2_t v364 = v183;
            uint64_t v171 = 256;
            float64x2_t v377 = v187;
            float64x2_t v378 = v180;
            float64x2_t v379 = v184;
            float64x2_t v380 = v185;
          }
          else if (v170 == 7)
          {
            float64x2_t v172 = vld1q_dup_f64((const double *)v169);
            float64x2_t v329 = v172;
            float64x2_t v330 = v172;
            float64x2_t v331 = v172;
            float64x2_t v332 = v172;
            float64x2_t v345 = v172;
            float64x2_t v346 = v172;
            float64x2_t v347 = v172;
            float64x2_t v348 = v172;
            float64x2_t v361 = v172;
            float64x2_t v362 = v172;
            float64x2_t v363 = v172;
            float64x2_t v364 = v172;
            float64x2_t v377 = v172;
            float64x2_t v378 = v172;
            uint64_t v171 = 8;
            float64x2_t v379 = v172;
            float64x2_t v380 = v172;
          }
          else if (v84[4])
          {
            uint64_t v171 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((uint64_t)&v329, 256, v169, v170);
          }
          else
          {
            uint64_t v171 = 0;
            float64x2_t v331 = 0u;
            float64x2_t v332 = 0u;
            float64x2_t v329 = 0u;
            float64x2_t v330 = 0u;
            float64x2_t v345 = 0u;
            float64x2_t v346 = 0u;
            float64x2_t v347 = 0u;
            float64x2_t v348 = 0u;
            float64x2_t v361 = 0u;
            float64x2_t v362 = 0u;
            float64x2_t v363 = 0u;
            float64x2_t v364 = 0u;
            float64x2_t v377 = 0u;
            float64x2_t v378 = 0u;
            float64x2_t v379 = 0u;
            float64x2_t v380 = 0u;
          }
          uint64_t v188 = v169 + v171;
          unsigned int v189 = v84[5];
          if (v189 == 255)
          {
            float64x2_t v192 = *(float64x2_t *)(v188 + 16);
            float64x2_t v193 = *(float64x2_t *)(v188 + 32);
            float64x2_t v194 = *(float64x2_t *)(v188 + 48);
            float64x2_t v195 = *(float64x2_t *)(v188 + 96);
            float64x2_t v196 = *(float64x2_t *)(v188 + 112);
            float64x2_t v197 = *(float64x2_t *)(v188 + 128);
            float64x2_t v198 = *(float64x2_t *)(v188 + 144);
            float64x2_t v199 = *(float64x2_t *)(v188 + 176);
            float64x2_t v200 = *(float64x2_t *)(v188 + 64);
            float64x2_t v201 = *(float64x2_t *)(v188 + 192);
            float64x2_t v202 = *(float64x2_t *)(v188 + 208);
            float64x2_t v203 = *(float64x2_t *)(v188 + 224);
            float64x2_t v204 = *(float64x2_t *)(v188 + 240);
            float64x2_t v205 = *(float64x2_t *)(v188 + 80);
            float64x2_t v206 = *(float64x2_t *)(v188 + 160);
            float64x2_t v333 = *(float64x2_t *)v188;
            float64x2_t v334 = v192;
            float64x2_t v335 = v200;
            float64x2_t v336 = v205;
            float64x2_t v349 = v193;
            float64x2_t v350 = v194;
            float64x2_t v351 = v195;
            float64x2_t v352 = v196;
            float64x2_t v365 = v197;
            float64x2_t v366 = v198;
            float64x2_t v367 = v201;
            float64x2_t v368 = v202;
            uint64_t v190 = 256;
            float64x2_t v381 = v206;
            float64x2_t v382 = v199;
            float64x2_t v383 = v203;
            float64x2_t v384 = v204;
          }
          else if (v189 == 7)
          {
            float64x2_t v191 = vld1q_dup_f64((const double *)v188);
            float64x2_t v333 = v191;
            float64x2_t v334 = v191;
            float64x2_t v335 = v191;
            float64x2_t v336 = v191;
            float64x2_t v349 = v191;
            float64x2_t v350 = v191;
            float64x2_t v351 = v191;
            float64x2_t v352 = v191;
            float64x2_t v365 = v191;
            float64x2_t v366 = v191;
            float64x2_t v367 = v191;
            float64x2_t v368 = v191;
            float64x2_t v381 = v191;
            float64x2_t v382 = v191;
            uint64_t v190 = 8;
            float64x2_t v383 = v191;
            float64x2_t v384 = v191;
          }
          else if (v84[5])
          {
            uint64_t v190 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((uint64_t)&v333, 256, v188, v189);
          }
          else
          {
            uint64_t v190 = 0;
            float64x2_t v335 = 0u;
            float64x2_t v336 = 0u;
            float64x2_t v333 = 0u;
            float64x2_t v334 = 0u;
            float64x2_t v349 = 0u;
            float64x2_t v350 = 0u;
            float64x2_t v351 = 0u;
            float64x2_t v352 = 0u;
            float64x2_t v365 = 0u;
            float64x2_t v366 = 0u;
            float64x2_t v367 = 0u;
            float64x2_t v368 = 0u;
            float64x2_t v381 = 0u;
            float64x2_t v382 = 0u;
            float64x2_t v383 = 0u;
            float64x2_t v384 = 0u;
          }
          uint64_t v207 = v188 + v190;
          unsigned int v208 = v84[6];
          if (v208 == 255)
          {
            float64x2_t v211 = *(float64x2_t *)(v207 + 16);
            float64x2_t v212 = *(float64x2_t *)(v207 + 32);
            float64x2_t v213 = *(float64x2_t *)(v207 + 48);
            float64x2_t v214 = *(float64x2_t *)(v207 + 96);
            float64x2_t v215 = *(float64x2_t *)(v207 + 112);
            float64x2_t v216 = *(float64x2_t *)(v207 + 128);
            float64x2_t v217 = *(float64x2_t *)(v207 + 144);
            float64x2_t v218 = *(float64x2_t *)(v207 + 176);
            float64x2_t v219 = *(float64x2_t *)(v207 + 64);
            float64x2_t v220 = *(float64x2_t *)(v207 + 192);
            float64x2_t v221 = *(float64x2_t *)(v207 + 208);
            float64x2_t v222 = *(float64x2_t *)(v207 + 224);
            float64x2_t v223 = *(float64x2_t *)(v207 + 240);
            float64x2_t v224 = *(float64x2_t *)(v207 + 80);
            float64x2_t v225 = *(float64x2_t *)(v207 + 160);
            float64x2_t v393 = *(float64x2_t *)v207;
            float64x2_t v394 = v211;
            float64x2_t v395 = v219;
            float64x2_t v396 = v224;
            float64x2_t v409 = v212;
            float64x2_t v410 = v213;
            float64x2_t v411 = v214;
            float64x2_t v412 = v215;
            float64x2_t v425 = v216;
            float64x2_t v426 = v217;
            float64x2_t v427 = v220;
            float64x2_t v428 = v221;
            uint64_t v209 = 256;
            float64x2_t v441 = v225;
            float64x2_t v442 = v218;
            float64x2_t v443 = v222;
            float64x2_t v444 = v223;
          }
          else if (v208 == 7)
          {
            float64x2_t v210 = vld1q_dup_f64((const double *)v207);
            float64x2_t v393 = v210;
            float64x2_t v394 = v210;
            float64x2_t v395 = v210;
            float64x2_t v396 = v210;
            float64x2_t v409 = v210;
            float64x2_t v410 = v210;
            float64x2_t v411 = v210;
            float64x2_t v412 = v210;
            float64x2_t v425 = v210;
            float64x2_t v426 = v210;
            float64x2_t v427 = v210;
            float64x2_t v428 = v210;
            float64x2_t v441 = v210;
            float64x2_t v442 = v210;
            float64x2_t v443 = v210;
            uint64_t v209 = 8;
            float64x2_t v444 = v210;
          }
          else if (v84[6])
          {
            uint64_t v209 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((uint64_t)&v393, 256, v207, v208);
          }
          else
          {
            uint64_t v209 = 0;
            float64x2_t v395 = 0u;
            float64x2_t v396 = 0u;
            float64x2_t v393 = 0u;
            float64x2_t v394 = 0u;
            float64x2_t v409 = 0u;
            float64x2_t v410 = 0u;
            float64x2_t v411 = 0u;
            float64x2_t v412 = 0u;
            float64x2_t v425 = 0u;
            float64x2_t v426 = 0u;
            float64x2_t v427 = 0u;
            float64x2_t v428 = 0u;
            float64x2_t v441 = 0u;
            float64x2_t v442 = 0u;
            float64x2_t v443 = 0u;
            float64x2_t v444 = 0u;
          }
          uint64_t v226 = v207 + v209;
          unsigned int v227 = v84[7];
          if (v227 == 255)
          {
            float64x2_t v231 = *(float64x2_t *)(v226 + 16);
            float64x2_t v232 = *(float64x2_t *)(v226 + 32);
            float64x2_t v233 = *(float64x2_t *)(v226 + 48);
            float64x2_t v234 = *(float64x2_t *)(v226 + 96);
            float64x2_t v235 = *(float64x2_t *)(v226 + 112);
            float64x2_t v236 = *(float64x2_t *)(v226 + 64);
            float64x2_t v237 = *(float64x2_t *)(v226 + 128);
            float64x2_t v238 = *(float64x2_t *)(v226 + 144);
            float64x2_t v239 = *(float64x2_t *)(v226 + 80);
            float64x2_t v240 = *(float64x2_t *)(v226 + 192);
            float64x2_t v241 = *(float64x2_t *)(v226 + 208);
            float64x2_t v242 = *(float64x2_t *)(v226 + 224);
            float64x2_t v243 = *(float64x2_t *)(v226 + 240);
            float64x2_t v244 = *(float64x2_t *)(v226 + 160);
            float64x2_t v245 = *(float64x2_t *)(v226 + 176);
            float64x2_t v397 = *(float64x2_t *)v226;
            float64x2_t v398 = v231;
            float64x2_t v399 = v236;
            float64x2_t v400 = v239;
            float64x2_t v413 = v232;
            float64x2_t v414 = v233;
            float64x2_t v415 = v234;
            float64x2_t v416 = v235;
            float64x2_t v429 = v237;
            float64x2_t v430 = v238;
            float64x2_t v431 = v240;
            float64x2_t v432 = v241;
            int v228 = v302;
            unsigned int v229 = v293;
            float64x2_t v445 = v244;
            float64x2_t v446 = v245;
            float64x2_t v447 = v242;
            float64x2_t v448 = v243;
            unsigned int v16 = v295;
            unsigned int v93 = v46 + 1;
            if (!v302) {
              goto LABEL_213;
            }
          }
          else
          {
            unsigned int v16 = v295;
            unsigned int v93 = v46 + 1;
            if (v227 == 7)
            {
              float64x2_t v230 = vld1q_dup_f64((const double *)v226);
              float64x2_t v397 = v230;
              float64x2_t v398 = v230;
              float64x2_t v399 = v230;
              float64x2_t v400 = v230;
              float64x2_t v413 = v230;
              float64x2_t v414 = v230;
              float64x2_t v415 = v230;
              float64x2_t v416 = v230;
              float64x2_t v429 = v230;
              float64x2_t v430 = v230;
              float64x2_t v431 = v230;
              float64x2_t v432 = v230;
              float64x2_t v445 = v230;
              float64x2_t v446 = v230;
              float64x2_t v447 = v230;
              int v228 = v302;
              unsigned int v229 = v293;
              float64x2_t v448 = v230;
              if (!v302) {
                goto LABEL_213;
              }
            }
            else if (v84[7])
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((uint64_t)&v397, 256, v226, v227);
              unsigned int v229 = v314;
              unsigned int v92 = v315;
              int v228 = v316;
              if (!v316) {
                goto LABEL_213;
              }
            }
            else
            {
              float64x2_t v399 = 0u;
              float64x2_t v400 = 0u;
              float64x2_t v397 = 0u;
              float64x2_t v398 = 0u;
              float64x2_t v413 = 0u;
              float64x2_t v414 = 0u;
              float64x2_t v415 = 0u;
              float64x2_t v416 = 0u;
              float64x2_t v429 = 0u;
              float64x2_t v430 = 0u;
              float64x2_t v431 = 0u;
              float64x2_t v432 = 0u;
              float64x2_t v445 = 0u;
              float64x2_t v446 = 0u;
              int v228 = v302;
              unsigned int v229 = v293;
              float64x2_t v447 = 0u;
              float64x2_t v448 = 0u;
              if (!v302) {
                goto LABEL_213;
              }
            }
          }
          if (v317)
          {
            uint64_t v246 = 0;
            unint64_t v247 = (unint64_t)v229 << 8;
            uint64_t v248 = 16 * v92;
            int32x4_t v249 = (char *)&v321 + v247 + v248;
            unint64_t v250 = v312;
            uint64_t v251 = v313;
            unint64_t v252 = 16 * v317;
            if (v252 <= 1) {
              unint64_t v253 = 1;
            }
            else {
              unint64_t v253 = 16 * v317;
            }
            unint64_t v254 = v247 + v248;
            int32x4_t v255 = (char *)&v321 + v247 + v248;
            if (v253) {
              BOOL v256 = (v253 - 1) >> 32 == 0;
            }
            else {
              BOOL v256 = 0;
            }
            char v257 = !v256;
            uint64_t v258 = v253 & 0xFFFFFFFE0;
            uint64_t v259 = v253 & 0xFFFFFFFF0;
            int32x4_t v260 = (char *)&v322 + v254;
            int32x4_t v261 = v312 + 1;
            int32x4_t v262 = v249;
            unint64_t v263 = v312;
            do
            {
              int32x4_t v264 = (char *)v250 + v251 * v246;
              int32x4_t v265 = &v249[256 * v246];
              if ((unint64_t)(&v255[256 * v246] - v264) < 0x20) {
                char v266 = 1;
              }
              else {
                char v266 = v257;
              }
              if (v266)
              {
                int v267 = 0;
                goto LABEL_210;
              }
              if (v253 >= 0x20)
              {
                int16x8_t v273 = v261;
                int32x4_t v274 = v260;
                uint64_t v275 = v253 & 0xFFFFFFFE0;
                do
                {
                  long long v276 = *v273;
                  *(v274 - 1) = *(v273 - 1);
                  *int32x4_t v274 = v276;
                  v274 += 2;
                  v273 += 2;
                  v275 -= 32;
                }
                while (v275);
                if (v253 == v258) {
                  goto LABEL_193;
                }
                uint64_t v268 = v253 & 0xFFFFFFFE0;
                if ((v253 & 0x10) == 0)
                {
                  v264 += v258;
                  v265 += v258;
                  int v267 = v253 & 0xFFFFFFE0;
                  goto LABEL_210;
                }
              }
              else
              {
                uint64_t v268 = 0;
              }
              v265 += v259;
              unint64_t v269 = v268 - (v253 & 0xFFFFFFFF0);
              int32x4_t v270 = (uint64_t *)((char *)v263 + v268);
              int32x4_t v271 = &v262[v268];
              do
              {
                uint64_t v272 = *v270++;
                *(void *)int32x4_t v271 = v272;
                v271 += 8;
                v269 += 8;
              }
              while (v269);
              if (v253 == v259) {
                goto LABEL_193;
              }
              v264 += v259;
              int v267 = v253 & 0xFFFFFFF0;
LABEL_210:
              unsigned int v277 = v267 + 1;
              do
              {
                char v278 = *v264++;
                *v265++ = v278;
              }
              while (v252 > v277++);
LABEL_193:
              ++v246;
              v260 += 256;
              int32x4_t v261 = (long long *)((char *)v261 + v251);
              unint64_t v263 = (_OWORD *)((char *)v263 + v251);
              v262 += 256;
            }
            while (v246 != v228);
          }
LABEL_213:
          AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock(&v321, 256, v310, v311, v318, v319);
LABEL_214:
          if (v307) {
            memcpy(v306, v88, 0x800uLL);
          }
          BOOL v29 = v46 == v296 >> 4;
          unsigned int v46 = v93;
          uint64_t result = v303;
        }
        while (!v29);
        BOOL v29 = v28++ == v286;
      }
      while (!v29);
    }
  }
  return result;
}

void *AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10, uint64_t a11, int a12)
{
  uint64_t v12 = MEMORY[0x270FA5388](a1);
  unsigned int v14 = v13;
  uint64_t v16 = v15;
  unsigned int v18 = v17;
  unsigned int v20 = v19;
  uint64_t v299 = v21;
  uint64_t v300 = v22;
  uint64_t v290 = v23;
  uint64_t v24 = v12;
  uint64_t v451 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(v12, 0);
  uint64_t v25 = v24;
  unsigned int v303 = v14;
  unsigned int v26 = v14 >> 3;
  unsigned int v289 = v14 + a10 - 1;
  unsigned int v291 = v289 >> 3;
  unsigned int v27 = *(unsigned __int8 *)(*(void *)(v24 + 208) + 88);
  unsigned int v28 = *(_DWORD *)(v24 + 112);
  uint64_t v305 = v25;
  if (*(void *)(v25 + 168))
  {
    __int16 CacheMode = IOSurfaceGetCacheMode();
    uint64_t v25 = v305;
    int v30 = CacheMode & 0xF00;
  }
  else
  {
    int v30 = 0;
  }
  BOOL v31 = (v30 & 0xD00) == 0 || v30 == 768;
  int v32 = v30 & 0xE00;
  int v34 = !v31 && v32 != 1024;
  int v309 = v34;
  uint64_t result = (void *)AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::isLevelTiled(v25, *(_DWORD *)(v25 + 144) + a12);
  uint64_t v36 = v305;
  int v298 = (int)result;
  if (v26 <= v291)
  {
    unsigned int v297 = v16 + a9 - 1;
    unsigned int v288 = v16 >> 4;
    if (v16 >> 4 <= v297 >> 4)
    {
      unsigned int v285 = v20 - 1;
      unsigned int v307 = (v20 - 1) >> 4;
      int v306 = ((v20 - 1) & 0xF) + 1;
      int v286 = ((v18 - 1) & 7) + 1;
      unsigned int v287 = (v18 - 1) >> 3;
      uint32x2_t v37 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(v20, v18), (int32x2_t)0xF00000007);
      int8x8_t v38 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32(vadd_s32((int32x2_t)vshl_u32(v37, (uint32x2_t)0xFFFFFFFCFFFFFFFDLL), (int32x2_t)-1))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x2000000010, v37));
      __int32 v296 = v38.i32[0] | v38.i32[1];
      int8x8_t v294 = v38;
      BOOL v293 = v38.i32[0] != 0;
      BOOL v292 = v38.i32[1] != 0;
      unint64_t v284 = 8 * v28 * (unint64_t)v27;
      do
      {
        unsigned int v39 = (8 * v26) | 7;
        if (8 * v26 <= v303) {
          int v40 = v303;
        }
        else {
          int v40 = 8 * v26;
        }
        unsigned int v41 = v288;
        if (v289 < v39) {
          unsigned int v39 = v289;
        }
        unsigned int v302 = 8 * v26;
        int v295 = v40 - 8 * v26;
        int v304 = v39 - v40 + 1;
        int v42 = v286;
        if (v26 != v287) {
          int v42 = 8;
        }
        unsigned int v310 = v42;
        uint64_t v301 = v290 + (v40 - v303) * a11;
        do
        {
          unsigned int v43 = 16 * v41;
          unsigned int v44 = 16 * (v41 + 1) - 1;
          if (16 * v41 <= v16) {
            int v45 = v16;
          }
          else {
            int v45 = 16 * v41;
          }
          if (v297 < v44) {
            unsigned int v44 = v297;
          }
          int v46 = v44 - v45 + 1;
          if (v41 == v307) {
            unsigned int v47 = v306;
          }
          else {
            unsigned int v47 = 16;
          }
          BOOL v48 = 1;
          if (v302 >= v303 && v43 >= v16)
          {
            int v49 = v306;
            if (v41 != v307) {
              int v49 = 16;
            }
            BOOL v48 = v46 != v49 || v304 != v310;
          }
          if (v298)
          {
            unsigned int v70 = 0;
            uint64_t v71 = v284 >> (*(unsigned char *)(v36 + 57) != 0);
            char v72 = 1;
            if (v71 > 127)
            {
              if (v71 > 511)
              {
                if (v71 == 512)
                {
                  char v73 = 0;
                  unsigned int v70 = 16;
                  unsigned int v74 = 16;
                }
                else
                {
                  char v73 = 1;
                  unsigned int v74 = 0;
                  if (v71 == 1024)
                  {
                    unsigned int v74 = 8;
                    unsigned int v70 = 16;
                  }
                }
              }
              else if (v71 == 128)
              {
                char v72 = 0;
                char v73 = 0;
                unsigned int v70 = 32;
                unsigned int v74 = 32;
              }
              else
              {
                char v73 = 1;
                unsigned int v74 = 0;
                if (v71 == 256)
                {
                  char v72 = 0;
                  char v73 = 0;
                  unsigned int v74 = 16;
                  unsigned int v70 = 32;
                }
              }
            }
            else
            {
              char v73 = 1;
              unsigned int v74 = 0;
              switch(v71)
              {
                case 4:
                  char v72 = 0;
                  char v73 = 0;
                  unsigned int v74 = 128;
                  unsigned int v70 = 256;
                  break;
                case 5:
                case 6:
                case 7:
                case 9:
                case 10:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 17:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                  break;
                case 8:
                  char v72 = 0;
                  char v73 = 0;
                  unsigned int v70 = 128;
                  unsigned int v74 = 128;
                  break;
                case 16:
                  char v72 = 0;
                  char v73 = 0;
                  unsigned int v74 = 64;
                  unsigned int v70 = 128;
                  break;
                case 32:
                  char v72 = 0;
                  char v73 = 0;
                  unsigned int v70 = 64;
                  unsigned int v74 = 64;
                  break;
                default:
                  if (v71 == 64)
                  {
                    char v72 = 0;
                    char v73 = 0;
                    unsigned int v74 = 32;
                    unsigned int v70 = 64;
                  }
                  break;
              }
            }
            unsigned int v273 = (v70 >> 4) - 1;
            if (v72) {
              unsigned int v274 = 0;
            }
            else {
              unsigned int v274 = 32 - __clz(~(-1 << -(char)__clz(v273)));
            }
            unsigned int v275 = (v74 >> 3) - 1;
            if (v73)
            {
              unsigned int v276 = 0;
              if (v274) {
                goto LABEL_206;
              }
            }
            else
            {
              unsigned int v276 = 32 - __clz(~(-1 << -(char)__clz(v275)));
              if (v276 | v274)
              {
LABEL_206:
                int v277 = 0;
                uint64_t v278 = 0;
                int v279 = v41 & v273;
                int v280 = v26 & v275;
                BOOL v281 = v276 != 0;
                BOOL v282 = v274 != 0;
                int v283 = 1;
                do
                {
                  --v276;
                  if (v281) {
                    v278 |= (unint64_t)(v283 & v280) << v277++;
                  }
                  else {
                    unsigned int v276 = 0;
                  }
                  --v274;
                  if (v282) {
                    v278 |= (unint64_t)(v283 & v279) << v277++;
                  }
                  else {
                    unsigned int v274 = 0;
                  }
                  v283 *= 2;
                  --v277;
                  BOOL v282 = v274 != 0;
                  BOOL v281 = v276 != 0;
                }
                while (v274 | v276);
                goto LABEL_218;
              }
            }
            uint64_t v278 = 0;
LABEL_218:
            unint64_t v58 = ((unint64_t)(v43 / v70 + v302 / v74 * ((v70 + v285) / v70)) << 14) + (v278 << 11);
            goto LABEL_58;
          }
          if (v296)
          {
            int v51 = 0;
            uint64_t v52 = 0;
            int v53 = 1;
            BOOL v54 = v293;
            BOOL v55 = v292;
            __int32 v56 = v294.i32[0];
            __int32 v57 = v294.i32[1];
            do
            {
              --v56;
              if (v54) {
                v52 |= (unint64_t)(v53 & v26) << v51++;
              }
              else {
                __int32 v56 = 0;
              }
              --v57;
              if (v55) {
                v52 |= (unint64_t)(v53 & v41) << v51++;
              }
              else {
                __int32 v57 = 0;
              }
              v53 *= 2;
              --v51;
              BOOL v55 = v57 != 0;
              BOOL v54 = v56 != 0;
            }
            while (v57 | v56);
          }
          else
          {
            uint64_t v52 = 0;
          }
          unint64_t v58 = v52 << 11;
LABEL_58:
          unsigned int v59 = *(_DWORD *)(v36 + 128) >> (*(unsigned char *)(v36 + 144) + a12);
          if (v59 <= 1) {
            unsigned int v59 = 1;
          }
          unsigned int v60 = v59 + 15;
          if (v60 < 0x20) {
            unsigned int v61 = 0;
          }
          else {
            unsigned int v61 = 32 - __clz(~(-1 << -(char)__clz((v60 >> 4) - 1)));
          }
          unsigned int v62 = *(_DWORD *)(v36 + 132) >> (*(unsigned char *)(v36 + 144) + a12);
          if (v62 <= 1) {
            unsigned int v62 = 1;
          }
          unsigned int v63 = v62 + 7;
          if (v63 < 0x10)
          {
            unsigned int v64 = 0;
            if (!v61)
            {
LABEL_80:
              uint64_t v66 = 0;
              goto LABEL_81;
            }
          }
          else
          {
            unsigned int v64 = 32 - __clz(~(-1 << -(char)__clz((v63 >> 3) - 1)));
            if (!(v64 | v61)) {
              goto LABEL_80;
            }
          }
          int v65 = 0;
          uint64_t v66 = 0;
          BOOL v67 = v61 != 0;
          BOOL v68 = v64 != 0;
          int v69 = 1;
          do
          {
            --v61;
            if (v67) {
              v66 |= (unint64_t)(v69 & v41) << v65++;
            }
            else {
              unsigned int v61 = 0;
            }
            --v64;
            if (v68) {
              v66 |= (unint64_t)(v69 & v26) << v65++;
            }
            else {
              unsigned int v64 = 0;
            }
            v69 *= 2;
            --v65;
            BOOL v68 = v64 != 0;
            BOOL v67 = v61 != 0;
          }
          while (v64 | v61);
LABEL_81:
          uint64_t v75 = v16;
          int v76 = v47 < 0x10 || v48;
          unsigned int v77 = (char *)(v300 + 8 * v66);
          unint64_t v78 = v301 + 16 * (v45 - v16);
          uint64_t v79 = (void *)(v299 + v58);
          if (v310 < 8) {
            int v80 = 1;
          }
          else {
            int v80 = v76;
          }
          unsigned int v308 = v79;
          if (v309)
          {
            BOOL v81 = __dst;
            if (!v80) {
              goto LABEL_93;
            }
            int v82 = (char *)(v300 + 8 * v66);
            int v83 = v46;
            char v84 = v47;
            BOOL v85 = v48;
            memcpy(__dst, v79, sizeof(__dst));
            BOOL v48 = v85;
            LOBYTE(v47) = v84;
            unsigned int v43 = 16 * v41;
            int v46 = v83;
            unsigned int v77 = v82;
            uint64_t v36 = v305;
          }
          else
          {
            BOOL v81 = v79;
            if (!v80)
            {
LABEL_93:
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock(v78, a11, (unint64_t)v81, v77, v47, v310);
              goto LABEL_94;
            }
          }
          block[0] = MEMORY[0x263EF8330];
          unsigned int v86 = v45 - v43;
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE18ELj2ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = v36;
          unint64_t v312 = v81;
          unsigned __int8 v320 = v47;
          unsigned __int8 v321 = v310;
          int v316 = v295;
          unsigned int v317 = v45 - v43;
          uint64_t v313 = v77;
          unint64_t v314 = v78;
          uint64_t v315 = a11;
          int v318 = v304;
          unsigned int v319 = v46;
          if (v48)
          {
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(v36 + 8) + 7384), block);
LABEL_94:
            uint64_t v16 = v75;
            goto LABEL_186;
          }
          unsigned int v87 = *v77;
          uint64_t v16 = v75;
          if (v87 == 255)
          {
            float64x2_t v90 = *((float64x2_t *)v81 + 1);
            float64x2_t v91 = *((float64x2_t *)v81 + 2);
            float64x2_t v92 = *((float64x2_t *)v81 + 3);
            float64x2_t v93 = *((float64x2_t *)v81 + 6);
            float64x2_t v94 = *((float64x2_t *)v81 + 7);
            float64x2_t v95 = *((float64x2_t *)v81 + 8);
            float64x2_t v96 = *((float64x2_t *)v81 + 9);
            float64x2_t v97 = *((float64x2_t *)v81 + 11);
            float64x2_t v98 = *((float64x2_t *)v81 + 4);
            float64x2_t v99 = *((float64x2_t *)v81 + 12);
            float64x2_t v100 = *((float64x2_t *)v81 + 13);
            float64x2_t v101 = *((float64x2_t *)v81 + 14);
            float64x2_t v102 = *((float64x2_t *)v81 + 15);
            float64x2_t v103 = *((float64x2_t *)v81 + 5);
            float64x2_t v104 = *((float64x2_t *)v81 + 10);
            float64x2_t v323 = *(float64x2_t *)v81;
            float64x2_t v324 = v90;
            float64x2_t v325 = v98;
            float64x2_t v326 = v103;
            float64x2_t v339 = v91;
            float64x2_t v340 = v92;
            float64x2_t v341 = v93;
            float64x2_t v342 = v94;
            float64x2_t v355 = v95;
            float64x2_t v356 = v96;
            float64x2_t v357 = v99;
            float64x2_t v358 = v100;
            uint64_t v88 = 256;
            float64x2_t v371 = v104;
            float64x2_t v372 = v97;
            float64x2_t v373 = v101;
            float64x2_t v374 = v102;
          }
          else if (v87 == 7)
          {
            float64x2_t v89 = vld1q_dup_f64((const double *)v81);
            float64x2_t v323 = v89;
            float64x2_t v324 = v89;
            float64x2_t v325 = v89;
            float64x2_t v326 = v89;
            float64x2_t v339 = v89;
            float64x2_t v340 = v89;
            float64x2_t v341 = v89;
            float64x2_t v342 = v89;
            float64x2_t v355 = v89;
            float64x2_t v356 = v89;
            float64x2_t v357 = v89;
            float64x2_t v358 = v89;
            float64x2_t v371 = v89;
            float64x2_t v372 = v89;
            uint64_t v88 = 8;
            float64x2_t v373 = v89;
            float64x2_t v374 = v89;
          }
          else if (*v77)
          {
            uint64_t v88 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((uint64_t)&v323, 256, (uint64_t)v81, v87);
          }
          else
          {
            uint64_t v88 = 0;
            float64x2_t v326 = 0u;
            float64x2_t v325 = 0u;
            float64x2_t v324 = 0u;
            float64x2_t v323 = 0u;
            float64x2_t v339 = 0u;
            float64x2_t v340 = 0u;
            float64x2_t v341 = 0u;
            float64x2_t v342 = 0u;
            float64x2_t v355 = 0u;
            float64x2_t v356 = 0u;
            float64x2_t v357 = 0u;
            float64x2_t v358 = 0u;
            float64x2_t v371 = 0u;
            float64x2_t v372 = 0u;
            float64x2_t v373 = 0u;
            float64x2_t v374 = 0u;
          }
          uint64_t v105 = (uint64_t)&v81[v88];
          unsigned int v106 = v77[1];
          if (v106 == 255)
          {
            float64x2_t v109 = *(float64x2_t *)(v105 + 16);
            float64x2_t v110 = *(float64x2_t *)(v105 + 32);
            float64x2_t v111 = *(float64x2_t *)(v105 + 48);
            float64x2_t v112 = *(float64x2_t *)(v105 + 96);
            float64x2_t v113 = *(float64x2_t *)(v105 + 112);
            float64x2_t v114 = *(float64x2_t *)(v105 + 128);
            float64x2_t v115 = *(float64x2_t *)(v105 + 144);
            float64x2_t v116 = *(float64x2_t *)(v105 + 176);
            float64x2_t v117 = *(float64x2_t *)(v105 + 64);
            float64x2_t v118 = *(float64x2_t *)(v105 + 192);
            float64x2_t v119 = *(float64x2_t *)(v105 + 208);
            float64x2_t v120 = *(float64x2_t *)(v105 + 224);
            float64x2_t v121 = *(float64x2_t *)(v105 + 240);
            float64x2_t v122 = *(float64x2_t *)(v105 + 80);
            float64x2_t v123 = *(float64x2_t *)(v105 + 160);
            float64x2_t v327 = *(float64x2_t *)v105;
            float64x2_t v328 = v109;
            float64x2_t v329 = v117;
            float64x2_t v330 = v122;
            float64x2_t v343 = v110;
            float64x2_t v344 = v111;
            float64x2_t v345 = v112;
            float64x2_t v346 = v113;
            float64x2_t v359 = v114;
            float64x2_t v360 = v115;
            float64x2_t v361 = v118;
            float64x2_t v362 = v119;
            uint64_t v107 = 256;
            float64x2_t v375 = v123;
            float64x2_t v376 = v116;
            float64x2_t v377 = v120;
            float64x2_t v378 = v121;
          }
          else if (v106 == 7)
          {
            float64x2_t v108 = vld1q_dup_f64((const double *)v105);
            float64x2_t v327 = v108;
            float64x2_t v328 = v108;
            float64x2_t v329 = v108;
            float64x2_t v330 = v108;
            float64x2_t v343 = v108;
            float64x2_t v344 = v108;
            float64x2_t v345 = v108;
            float64x2_t v346 = v108;
            float64x2_t v359 = v108;
            float64x2_t v360 = v108;
            float64x2_t v361 = v108;
            float64x2_t v362 = v108;
            float64x2_t v375 = v108;
            float64x2_t v376 = v108;
            uint64_t v107 = 8;
            float64x2_t v377 = v108;
            float64x2_t v378 = v108;
          }
          else if (v77[1])
          {
            uint64_t v107 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((uint64_t)&v327, 256, v105, v106);
          }
          else
          {
            uint64_t v107 = 0;
            float64x2_t v329 = 0u;
            float64x2_t v330 = 0u;
            float64x2_t v327 = 0u;
            float64x2_t v328 = 0u;
            float64x2_t v343 = 0u;
            float64x2_t v344 = 0u;
            float64x2_t v345 = 0u;
            float64x2_t v346 = 0u;
            float64x2_t v359 = 0u;
            float64x2_t v360 = 0u;
            float64x2_t v361 = 0u;
            float64x2_t v362 = 0u;
            float64x2_t v375 = 0u;
            float64x2_t v376 = 0u;
            float64x2_t v377 = 0u;
            float64x2_t v378 = 0u;
          }
          uint64_t v124 = v105 + v107;
          unsigned int v125 = v77[2];
          if (v125 == 255)
          {
            float64x2_t v128 = *(float64x2_t *)(v124 + 16);
            float64x2_t v129 = *(float64x2_t *)(v124 + 32);
            float64x2_t v130 = *(float64x2_t *)(v124 + 48);
            float64x2_t v131 = *(float64x2_t *)(v124 + 96);
            float64x2_t v132 = *(float64x2_t *)(v124 + 112);
            float64x2_t v133 = *(float64x2_t *)(v124 + 128);
            float64x2_t v134 = *(float64x2_t *)(v124 + 144);
            float64x2_t v135 = *(float64x2_t *)(v124 + 176);
            float64x2_t v136 = *(float64x2_t *)(v124 + 64);
            float64x2_t v137 = *(float64x2_t *)(v124 + 192);
            float64x2_t v138 = *(float64x2_t *)(v124 + 208);
            float64x2_t v139 = *(float64x2_t *)(v124 + 224);
            float64x2_t v140 = *(float64x2_t *)(v124 + 240);
            float64x2_t v141 = *(float64x2_t *)(v124 + 80);
            float64x2_t v142 = *(float64x2_t *)(v124 + 160);
            float64x2_t v387 = *(float64x2_t *)v124;
            float64x2_t v388 = v128;
            float64x2_t v389 = v136;
            float64x2_t v390 = v141;
            float64x2_t v403 = v129;
            float64x2_t v404 = v130;
            float64x2_t v405 = v131;
            float64x2_t v406 = v132;
            float64x2_t v419 = v133;
            float64x2_t v420 = v134;
            float64x2_t v421 = v137;
            float64x2_t v422 = v138;
            uint64_t v126 = 256;
            float64x2_t v435 = v142;
            float64x2_t v436 = v135;
            float64x2_t v437 = v139;
            float64x2_t v438 = v140;
          }
          else if (v125 == 7)
          {
            float64x2_t v127 = vld1q_dup_f64((const double *)v124);
            float64x2_t v387 = v127;
            float64x2_t v388 = v127;
            float64x2_t v389 = v127;
            float64x2_t v390 = v127;
            float64x2_t v403 = v127;
            float64x2_t v404 = v127;
            float64x2_t v405 = v127;
            float64x2_t v406 = v127;
            float64x2_t v419 = v127;
            float64x2_t v420 = v127;
            float64x2_t v421 = v127;
            float64x2_t v422 = v127;
            float64x2_t v435 = v127;
            float64x2_t v436 = v127;
            float64x2_t v437 = v127;
            uint64_t v126 = 8;
            float64x2_t v438 = v127;
          }
          else if (v77[2])
          {
            uint64_t v126 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((uint64_t)&v387, 256, v124, v125);
          }
          else
          {
            uint64_t v126 = 0;
            float64x2_t v389 = 0u;
            float64x2_t v390 = 0u;
            float64x2_t v387 = 0u;
            float64x2_t v388 = 0u;
            float64x2_t v403 = 0u;
            float64x2_t v404 = 0u;
            float64x2_t v405 = 0u;
            float64x2_t v406 = 0u;
            float64x2_t v419 = 0u;
            float64x2_t v420 = 0u;
            float64x2_t v421 = 0u;
            float64x2_t v422 = 0u;
            float64x2_t v435 = 0u;
            float64x2_t v436 = 0u;
            float64x2_t v437 = 0u;
            float64x2_t v438 = 0u;
          }
          uint64_t v143 = v124 + v126;
          unsigned int v144 = v77[3];
          if (v144 == 255)
          {
            float64x2_t v147 = *(float64x2_t *)(v143 + 16);
            float64x2_t v148 = *(float64x2_t *)(v143 + 32);
            float64x2_t v149 = *(float64x2_t *)(v143 + 48);
            float64x2_t v150 = *(float64x2_t *)(v143 + 96);
            float64x2_t v151 = *(float64x2_t *)(v143 + 112);
            float64x2_t v152 = *(float64x2_t *)(v143 + 128);
            float64x2_t v153 = *(float64x2_t *)(v143 + 144);
            float64x2_t v154 = *(float64x2_t *)(v143 + 176);
            float64x2_t v155 = *(float64x2_t *)(v143 + 64);
            float64x2_t v156 = *(float64x2_t *)(v143 + 192);
            float64x2_t v157 = *(float64x2_t *)(v143 + 208);
            float64x2_t v158 = *(float64x2_t *)(v143 + 224);
            float64x2_t v159 = *(float64x2_t *)(v143 + 240);
            float64x2_t v160 = *(float64x2_t *)(v143 + 80);
            float64x2_t v161 = *(float64x2_t *)(v143 + 160);
            float64x2_t v391 = *(float64x2_t *)v143;
            float64x2_t v392 = v147;
            float64x2_t v393 = v155;
            float64x2_t v394 = v160;
            float64x2_t v407 = v148;
            float64x2_t v408 = v149;
            float64x2_t v409 = v150;
            float64x2_t v410 = v151;
            float64x2_t v423 = v152;
            float64x2_t v424 = v153;
            float64x2_t v425 = v156;
            float64x2_t v426 = v157;
            uint64_t v145 = 256;
            float64x2_t v439 = v161;
            float64x2_t v440 = v154;
            float64x2_t v441 = v158;
            float64x2_t v442 = v159;
          }
          else if (v144 == 7)
          {
            float64x2_t v146 = vld1q_dup_f64((const double *)v143);
            float64x2_t v391 = v146;
            float64x2_t v392 = v146;
            float64x2_t v393 = v146;
            float64x2_t v394 = v146;
            float64x2_t v407 = v146;
            float64x2_t v408 = v146;
            float64x2_t v409 = v146;
            float64x2_t v410 = v146;
            float64x2_t v423 = v146;
            float64x2_t v424 = v146;
            float64x2_t v425 = v146;
            float64x2_t v426 = v146;
            float64x2_t v439 = v146;
            float64x2_t v440 = v146;
            float64x2_t v441 = v146;
            uint64_t v145 = 8;
            float64x2_t v442 = v146;
          }
          else if (v77[3])
          {
            uint64_t v145 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((uint64_t)&v391, 256, v143, v144);
          }
          else
          {
            uint64_t v145 = 0;
            float64x2_t v393 = 0u;
            float64x2_t v394 = 0u;
            float64x2_t v391 = 0u;
            float64x2_t v392 = 0u;
            float64x2_t v407 = 0u;
            float64x2_t v408 = 0u;
            float64x2_t v409 = 0u;
            float64x2_t v410 = 0u;
            float64x2_t v423 = 0u;
            float64x2_t v424 = 0u;
            float64x2_t v425 = 0u;
            float64x2_t v426 = 0u;
            float64x2_t v439 = 0u;
            float64x2_t v440 = 0u;
            float64x2_t v441 = 0u;
            float64x2_t v442 = 0u;
          }
          uint64_t v162 = v143 + v145;
          unsigned int v163 = v77[4];
          if (v163 == 255)
          {
            float64x2_t v166 = *(float64x2_t *)(v162 + 16);
            float64x2_t v167 = *(float64x2_t *)(v162 + 32);
            float64x2_t v168 = *(float64x2_t *)(v162 + 48);
            float64x2_t v169 = *(float64x2_t *)(v162 + 96);
            float64x2_t v170 = *(float64x2_t *)(v162 + 112);
            float64x2_t v171 = *(float64x2_t *)(v162 + 128);
            float64x2_t v172 = *(float64x2_t *)(v162 + 144);
            float64x2_t v173 = *(float64x2_t *)(v162 + 176);
            float64x2_t v174 = *(float64x2_t *)(v162 + 64);
            float64x2_t v175 = *(float64x2_t *)(v162 + 192);
            float64x2_t v176 = *(float64x2_t *)(v162 + 208);
            float64x2_t v177 = *(float64x2_t *)(v162 + 224);
            float64x2_t v178 = *(float64x2_t *)(v162 + 240);
            float64x2_t v179 = *(float64x2_t *)(v162 + 80);
            float64x2_t v180 = *(float64x2_t *)(v162 + 160);
            float64x2_t v331 = *(float64x2_t *)v162;
            float64x2_t v332 = v166;
            float64x2_t v333 = v174;
            float64x2_t v334 = v179;
            float64x2_t v347 = v167;
            float64x2_t v348 = v168;
            float64x2_t v349 = v169;
            float64x2_t v350 = v170;
            float64x2_t v363 = v171;
            float64x2_t v364 = v172;
            float64x2_t v365 = v175;
            float64x2_t v366 = v176;
            uint64_t v164 = 256;
            float64x2_t v379 = v180;
            float64x2_t v380 = v173;
            float64x2_t v381 = v177;
            float64x2_t v382 = v178;
          }
          else if (v163 == 7)
          {
            float64x2_t v165 = vld1q_dup_f64((const double *)v162);
            float64x2_t v331 = v165;
            float64x2_t v332 = v165;
            float64x2_t v333 = v165;
            float64x2_t v334 = v165;
            float64x2_t v347 = v165;
            float64x2_t v348 = v165;
            float64x2_t v349 = v165;
            float64x2_t v350 = v165;
            float64x2_t v363 = v165;
            float64x2_t v364 = v165;
            float64x2_t v365 = v165;
            float64x2_t v366 = v165;
            float64x2_t v379 = v165;
            float64x2_t v380 = v165;
            uint64_t v164 = 8;
            float64x2_t v381 = v165;
            float64x2_t v382 = v165;
          }
          else if (v77[4])
          {
            uint64_t v164 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((uint64_t)&v331, 256, v162, v163);
          }
          else
          {
            uint64_t v164 = 0;
            float64x2_t v333 = 0u;
            float64x2_t v334 = 0u;
            float64x2_t v331 = 0u;
            float64x2_t v332 = 0u;
            float64x2_t v347 = 0u;
            float64x2_t v348 = 0u;
            float64x2_t v349 = 0u;
            float64x2_t v350 = 0u;
            float64x2_t v363 = 0u;
            float64x2_t v364 = 0u;
            float64x2_t v365 = 0u;
            float64x2_t v366 = 0u;
            float64x2_t v379 = 0u;
            float64x2_t v380 = 0u;
            float64x2_t v381 = 0u;
            float64x2_t v382 = 0u;
          }
          uint64_t v181 = v162 + v164;
          unsigned int v182 = v77[5];
          if (v182 == 255)
          {
            float64x2_t v185 = *(float64x2_t *)(v181 + 16);
            float64x2_t v186 = *(float64x2_t *)(v181 + 32);
            float64x2_t v187 = *(float64x2_t *)(v181 + 48);
            float64x2_t v188 = *(float64x2_t *)(v181 + 96);
            float64x2_t v189 = *(float64x2_t *)(v181 + 112);
            float64x2_t v190 = *(float64x2_t *)(v181 + 128);
            float64x2_t v191 = *(float64x2_t *)(v181 + 144);
            float64x2_t v192 = *(float64x2_t *)(v181 + 176);
            float64x2_t v193 = *(float64x2_t *)(v181 + 64);
            float64x2_t v194 = *(float64x2_t *)(v181 + 192);
            float64x2_t v195 = *(float64x2_t *)(v181 + 208);
            float64x2_t v196 = *(float64x2_t *)(v181 + 224);
            float64x2_t v197 = *(float64x2_t *)(v181 + 240);
            float64x2_t v198 = *(float64x2_t *)(v181 + 80);
            float64x2_t v199 = *(float64x2_t *)(v181 + 160);
            float64x2_t v335 = *(float64x2_t *)v181;
            float64x2_t v336 = v185;
            float64x2_t v337 = v193;
            float64x2_t v338 = v198;
            float64x2_t v351 = v186;
            float64x2_t v352 = v187;
            float64x2_t v353 = v188;
            float64x2_t v354 = v189;
            float64x2_t v367 = v190;
            float64x2_t v368 = v191;
            float64x2_t v369 = v194;
            float64x2_t v370 = v195;
            uint64_t v183 = 256;
            float64x2_t v383 = v199;
            float64x2_t v384 = v192;
            float64x2_t v385 = v196;
            float64x2_t v386 = v197;
          }
          else if (v182 == 7)
          {
            float64x2_t v184 = vld1q_dup_f64((const double *)v181);
            float64x2_t v335 = v184;
            float64x2_t v336 = v184;
            float64x2_t v337 = v184;
            float64x2_t v338 = v184;
            float64x2_t v351 = v184;
            float64x2_t v352 = v184;
            float64x2_t v353 = v184;
            float64x2_t v354 = v184;
            float64x2_t v367 = v184;
            float64x2_t v368 = v184;
            float64x2_t v369 = v184;
            float64x2_t v370 = v184;
            float64x2_t v383 = v184;
            float64x2_t v384 = v184;
            uint64_t v183 = 8;
            float64x2_t v385 = v184;
            float64x2_t v386 = v184;
          }
          else if (v77[5])
          {
            uint64_t v183 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((uint64_t)&v335, 256, v181, v182);
          }
          else
          {
            uint64_t v183 = 0;
            float64x2_t v337 = 0u;
            float64x2_t v338 = 0u;
            float64x2_t v335 = 0u;
            float64x2_t v336 = 0u;
            float64x2_t v351 = 0u;
            float64x2_t v352 = 0u;
            float64x2_t v353 = 0u;
            float64x2_t v354 = 0u;
            float64x2_t v367 = 0u;
            float64x2_t v368 = 0u;
            float64x2_t v369 = 0u;
            float64x2_t v370 = 0u;
            float64x2_t v383 = 0u;
            float64x2_t v384 = 0u;
            float64x2_t v385 = 0u;
            float64x2_t v386 = 0u;
          }
          uint64_t v200 = v181 + v183;
          unsigned int v201 = v77[6];
          if (v201 == 255)
          {
            float64x2_t v204 = *(float64x2_t *)(v200 + 16);
            float64x2_t v205 = *(float64x2_t *)(v200 + 32);
            float64x2_t v206 = *(float64x2_t *)(v200 + 48);
            float64x2_t v207 = *(float64x2_t *)(v200 + 96);
            float64x2_t v208 = *(float64x2_t *)(v200 + 112);
            float64x2_t v209 = *(float64x2_t *)(v200 + 128);
            float64x2_t v210 = *(float64x2_t *)(v200 + 144);
            float64x2_t v211 = *(float64x2_t *)(v200 + 176);
            float64x2_t v212 = *(float64x2_t *)(v200 + 64);
            float64x2_t v213 = *(float64x2_t *)(v200 + 192);
            float64x2_t v214 = *(float64x2_t *)(v200 + 208);
            float64x2_t v215 = *(float64x2_t *)(v200 + 224);
            float64x2_t v216 = *(float64x2_t *)(v200 + 240);
            float64x2_t v217 = *(float64x2_t *)(v200 + 80);
            float64x2_t v218 = *(float64x2_t *)(v200 + 160);
            float64x2_t v395 = *(float64x2_t *)v200;
            float64x2_t v396 = v204;
            float64x2_t v397 = v212;
            float64x2_t v398 = v217;
            float64x2_t v411 = v205;
            float64x2_t v412 = v206;
            float64x2_t v413 = v207;
            float64x2_t v414 = v208;
            float64x2_t v427 = v209;
            float64x2_t v428 = v210;
            float64x2_t v429 = v213;
            float64x2_t v430 = v214;
            uint64_t v202 = 256;
            float64x2_t v443 = v218;
            float64x2_t v444 = v211;
            float64x2_t v445 = v215;
            float64x2_t v446 = v216;
          }
          else if (v201 == 7)
          {
            float64x2_t v203 = vld1q_dup_f64((const double *)v200);
            float64x2_t v395 = v203;
            float64x2_t v396 = v203;
            float64x2_t v397 = v203;
            float64x2_t v398 = v203;
            float64x2_t v411 = v203;
            float64x2_t v412 = v203;
            float64x2_t v413 = v203;
            float64x2_t v414 = v203;
            float64x2_t v427 = v203;
            float64x2_t v428 = v203;
            float64x2_t v429 = v203;
            float64x2_t v430 = v203;
            float64x2_t v443 = v203;
            float64x2_t v444 = v203;
            float64x2_t v445 = v203;
            uint64_t v202 = 8;
            float64x2_t v446 = v203;
          }
          else if (v77[6])
          {
            uint64_t v202 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((uint64_t)&v395, 256, v200, v201);
          }
          else
          {
            uint64_t v202 = 0;
            float64x2_t v397 = 0u;
            float64x2_t v398 = 0u;
            float64x2_t v395 = 0u;
            float64x2_t v396 = 0u;
            float64x2_t v411 = 0u;
            float64x2_t v412 = 0u;
            float64x2_t v413 = 0u;
            float64x2_t v414 = 0u;
            float64x2_t v427 = 0u;
            float64x2_t v428 = 0u;
            float64x2_t v429 = 0u;
            float64x2_t v430 = 0u;
            float64x2_t v443 = 0u;
            float64x2_t v444 = 0u;
            float64x2_t v445 = 0u;
            float64x2_t v446 = 0u;
          }
          uint64_t v219 = v200 + v202;
          unsigned int v220 = v77[7];
          if (v220 == 255)
          {
            float64x2_t v224 = *(float64x2_t *)(v219 + 16);
            float64x2_t v225 = *(float64x2_t *)(v219 + 32);
            float64x2_t v226 = *(float64x2_t *)(v219 + 48);
            float64x2_t v227 = *(float64x2_t *)(v219 + 96);
            float64x2_t v228 = *(float64x2_t *)(v219 + 112);
            float64x2_t v229 = *(float64x2_t *)(v219 + 64);
            float64x2_t v230 = *(float64x2_t *)(v219 + 128);
            float64x2_t v231 = *(float64x2_t *)(v219 + 144);
            float64x2_t v232 = *(float64x2_t *)(v219 + 80);
            float64x2_t v233 = *(float64x2_t *)(v219 + 192);
            float64x2_t v234 = *(float64x2_t *)(v219 + 208);
            float64x2_t v235 = *(float64x2_t *)(v219 + 224);
            float64x2_t v236 = *(float64x2_t *)(v219 + 240);
            float64x2_t v237 = *(float64x2_t *)(v219 + 160);
            float64x2_t v238 = *(float64x2_t *)(v219 + 176);
            float64x2_t v399 = *(float64x2_t *)v219;
            float64x2_t v400 = v224;
            float64x2_t v401 = v229;
            float64x2_t v402 = v232;
            float64x2_t v415 = v225;
            float64x2_t v416 = v226;
            float64x2_t v417 = v227;
            float64x2_t v418 = v228;
            float64x2_t v431 = v230;
            float64x2_t v432 = v231;
            float64x2_t v433 = v233;
            float64x2_t v434 = v234;
            int v221 = v304;
            unsigned int v222 = v295;
            float64x2_t v447 = v237;
            float64x2_t v448 = v238;
            float64x2_t v449 = v235;
            float64x2_t v450 = v236;
            if (!v304) {
              goto LABEL_185;
            }
          }
          else if (v220 == 7)
          {
            float64x2_t v223 = vld1q_dup_f64((const double *)v219);
            float64x2_t v399 = v223;
            float64x2_t v400 = v223;
            float64x2_t v401 = v223;
            float64x2_t v402 = v223;
            float64x2_t v415 = v223;
            float64x2_t v416 = v223;
            float64x2_t v417 = v223;
            float64x2_t v418 = v223;
            float64x2_t v431 = v223;
            float64x2_t v432 = v223;
            float64x2_t v433 = v223;
            float64x2_t v434 = v223;
            float64x2_t v447 = v223;
            float64x2_t v448 = v223;
            float64x2_t v449 = v223;
            int v221 = v304;
            unsigned int v222 = v295;
            float64x2_t v450 = v223;
            if (!v304) {
              goto LABEL_185;
            }
          }
          else if (v77[7])
          {
            AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((uint64_t)&v399, 256, v219, v220);
            unsigned int v222 = v316;
            unsigned int v86 = v317;
            int v221 = v318;
            if (!v318) {
              goto LABEL_185;
            }
          }
          else
          {
            float64x2_t v401 = 0u;
            float64x2_t v402 = 0u;
            float64x2_t v399 = 0u;
            float64x2_t v400 = 0u;
            float64x2_t v415 = 0u;
            float64x2_t v416 = 0u;
            float64x2_t v417 = 0u;
            float64x2_t v418 = 0u;
            float64x2_t v431 = 0u;
            float64x2_t v432 = 0u;
            float64x2_t v433 = 0u;
            float64x2_t v434 = 0u;
            float64x2_t v447 = 0u;
            float64x2_t v448 = 0u;
            int v221 = v304;
            unsigned int v222 = v295;
            float64x2_t v449 = 0u;
            float64x2_t v450 = 0u;
            if (!v304) {
              goto LABEL_185;
            }
          }
          if (v319)
          {
            uint64_t v239 = 0;
            unint64_t v240 = (unint64_t)v222 << 8;
            uint64_t v241 = 16 * v86;
            float64x2_t v242 = (char *)&v323 + v240 + v241;
            unint64_t v243 = v314;
            uint64_t v244 = v315;
            unint64_t v245 = 16 * v319;
            if (v245 <= 1) {
              unint64_t v246 = 1;
            }
            else {
              unint64_t v246 = 16 * v319;
            }
            unint64_t v247 = v240 + v241;
            uint64_t v248 = (char *)&v323 + v240 + v241;
            if (v246) {
              BOOL v249 = (v246 - 1) >> 32 == 0;
            }
            else {
              BOOL v249 = 0;
            }
            char v250 = !v249;
            uint64_t v251 = v246 & 0xFFFFFFFE0;
            uint64_t v252 = v246 & 0xFFFFFFFF0;
            unint64_t v253 = (char *)&v324 + v247;
            unint64_t v254 = (long long *)(v314 + 16);
            int32x4_t v255 = v242;
            unint64_t v256 = v314;
            do
            {
              char v257 = (char *)(v243 + v244 * v239);
              uint64_t v258 = &v242[256 * v239];
              if ((unint64_t)(&v248[256 * v239] - v257) < 0x20) {
                char v259 = 1;
              }
              else {
                char v259 = v250;
              }
              if (v259)
              {
                int v260 = 0;
                goto LABEL_182;
              }
              if (v246 >= 0x20)
              {
                char v266 = v254;
                int v267 = v253;
                uint64_t v268 = v246 & 0xFFFFFFFE0;
                do
                {
                  long long v269 = *v266;
                  *(v267 - 1) = *(v266 - 1);
                  *int v267 = v269;
                  v267 += 2;
                  v266 += 2;
                  v268 -= 32;
                }
                while (v268);
                if (v246 == v251) {
                  goto LABEL_165;
                }
                uint64_t v261 = v246 & 0xFFFFFFFE0;
                if ((v246 & 0x10) == 0)
                {
                  v257 += v251;
                  v258 += v251;
                  int v260 = v246 & 0xFFFFFFE0;
                  goto LABEL_182;
                }
              }
              else
              {
                uint64_t v261 = 0;
              }
              v258 += v252;
              unint64_t v262 = v261 - (v246 & 0xFFFFFFFF0);
              unint64_t v263 = (uint64_t *)(v256 + v261);
              int32x4_t v264 = &v255[v261];
              do
              {
                uint64_t v265 = *v263++;
                *(void *)int32x4_t v264 = v265;
                v264 += 8;
                v262 += 8;
              }
              while (v262);
              if (v246 == v252) {
                goto LABEL_165;
              }
              v257 += v252;
              int v260 = v246 & 0xFFFFFFF0;
LABEL_182:
              unsigned int v270 = v260 + 1;
              do
              {
                char v271 = *v257++;
                *v258++ = v271;
              }
              while (v245 > v270++);
LABEL_165:
              ++v239;
              v253 += 256;
              unint64_t v254 = (long long *)((char *)v254 + v244);
              v256 += v244;
              v255 += 256;
            }
            while (v239 != v221);
          }
LABEL_185:
          AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)&v323, 256, (unint64_t)v312, v313, v320, v321);
LABEL_186:
          uint64_t result = v308;
          if (v309) {
            uint64_t result = memcpy(v308, v81, 0x800uLL);
          }
          BOOL v31 = v41++ == v297 >> 4;
          uint64_t v36 = v305;
        }
        while (!v31);
        BOOL v31 = v26++ == v291;
      }
      while (!v31);
    }
  }
  return result;
}

void *AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10, uint64_t a11, int a12)
{
  uint64_t v12 = MEMORY[0x270FA5388](a1);
  unsigned int v14 = v13;
  uint64_t v16 = v15;
  unsigned int v18 = v17;
  unsigned int v20 = v19;
  uint64_t v299 = v21;
  uint64_t v300 = v22;
  uint64_t v290 = v23;
  uint64_t v24 = v12;
  uint64_t v451 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(v12, 0);
  uint64_t v25 = v24;
  unsigned int v303 = v14;
  unsigned int v26 = v14 >> 3;
  unsigned int v289 = v14 + a10 - 1;
  unsigned int v291 = v289 >> 3;
  unsigned int v27 = *(unsigned __int8 *)(*(void *)(v24 + 208) + 88);
  unsigned int v28 = *(_DWORD *)(v24 + 112);
  uint64_t v305 = v25;
  if (*(void *)(v25 + 168))
  {
    __int16 CacheMode = IOSurfaceGetCacheMode();
    uint64_t v25 = v305;
    int v30 = CacheMode & 0xF00;
  }
  else
  {
    int v30 = 0;
  }
  BOOL v31 = (v30 & 0xD00) == 0 || v30 == 768;
  int v32 = v30 & 0xE00;
  int v34 = !v31 && v32 != 1024;
  int v309 = v34;
  uint64_t result = (void *)AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::isLevelTiled(v25, *(_DWORD *)(v25 + 144) + a12);
  uint64_t v36 = v305;
  int v298 = (int)result;
  if (v26 <= v291)
  {
    unsigned int v297 = v16 + a9 - 1;
    unsigned int v288 = v16 >> 4;
    if (v16 >> 4 <= v297 >> 4)
    {
      unsigned int v285 = v20 - 1;
      unsigned int v307 = (v20 - 1) >> 4;
      int v306 = ((v20 - 1) & 0xF) + 1;
      int v286 = ((v18 - 1) & 7) + 1;
      unsigned int v287 = (v18 - 1) >> 3;
      uint32x2_t v37 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(v20, v18), (int32x2_t)0xF00000007);
      int8x8_t v38 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32(vadd_s32((int32x2_t)vshl_u32(v37, (uint32x2_t)0xFFFFFFFCFFFFFFFDLL), (int32x2_t)-1))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x2000000010, v37));
      __int32 v296 = v38.i32[0] | v38.i32[1];
      int8x8_t v294 = v38;
      BOOL v293 = v38.i32[0] != 0;
      BOOL v292 = v38.i32[1] != 0;
      unint64_t v284 = 8 * v28 * (unint64_t)v27;
      do
      {
        unsigned int v39 = (8 * v26) | 7;
        if (8 * v26 <= v303) {
          int v40 = v303;
        }
        else {
          int v40 = 8 * v26;
        }
        unsigned int v41 = v288;
        if (v289 < v39) {
          unsigned int v39 = v289;
        }
        unsigned int v302 = 8 * v26;
        int v295 = v40 - 8 * v26;
        int v304 = v39 - v40 + 1;
        int v42 = v286;
        if (v26 != v287) {
          int v42 = 8;
        }
        unsigned int v310 = v42;
        uint64_t v301 = v290 + (v40 - v303) * a11;
        do
        {
          unsigned int v43 = 16 * v41;
          unsigned int v44 = 16 * (v41 + 1) - 1;
          if (16 * v41 <= v16) {
            int v45 = v16;
          }
          else {
            int v45 = 16 * v41;
          }
          if (v297 < v44) {
            unsigned int v44 = v297;
          }
          int v46 = v44 - v45 + 1;
          if (v41 == v307) {
            unsigned int v47 = v306;
          }
          else {
            unsigned int v47 = 16;
          }
          BOOL v48 = 1;
          if (v302 >= v303 && v43 >= v16)
          {
            int v49 = v306;
            if (v41 != v307) {
              int v49 = 16;
            }
            BOOL v48 = v46 != v49 || v304 != v310;
          }
          if (v298)
          {
            unsigned int v70 = 0;
            uint64_t v71 = v284 >> (*(unsigned char *)(v36 + 57) != 0);
            char v72 = 1;
            if (v71 > 127)
            {
              if (v71 > 511)
              {
                if (v71 == 512)
                {
                  char v73 = 0;
                  unsigned int v70 = 16;
                  unsigned int v74 = 16;
                }
                else
                {
                  char v73 = 1;
                  unsigned int v74 = 0;
                  if (v71 == 1024)
                  {
                    unsigned int v74 = 8;
                    unsigned int v70 = 16;
                  }
                }
              }
              else if (v71 == 128)
              {
                char v72 = 0;
                char v73 = 0;
                unsigned int v70 = 32;
                unsigned int v74 = 32;
              }
              else
              {
                char v73 = 1;
                unsigned int v74 = 0;
                if (v71 == 256)
                {
                  char v72 = 0;
                  char v73 = 0;
                  unsigned int v74 = 16;
                  unsigned int v70 = 32;
                }
              }
            }
            else
            {
              char v73 = 1;
              unsigned int v74 = 0;
              switch(v71)
              {
                case 4:
                  char v72 = 0;
                  char v73 = 0;
                  unsigned int v74 = 128;
                  unsigned int v70 = 256;
                  break;
                case 5:
                case 6:
                case 7:
                case 9:
                case 10:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 17:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                  break;
                case 8:
                  char v72 = 0;
                  char v73 = 0;
                  unsigned int v70 = 128;
                  unsigned int v74 = 128;
                  break;
                case 16:
                  char v72 = 0;
                  char v73 = 0;
                  unsigned int v74 = 64;
                  unsigned int v70 = 128;
                  break;
                case 32:
                  char v72 = 0;
                  char v73 = 0;
                  unsigned int v70 = 64;
                  unsigned int v74 = 64;
                  break;
                default:
                  if (v71 == 64)
                  {
                    char v72 = 0;
                    char v73 = 0;
                    unsigned int v74 = 32;
                    unsigned int v70 = 64;
                  }
                  break;
              }
            }
            unsigned int v273 = (v70 >> 4) - 1;
            if (v72) {
              unsigned int v274 = 0;
            }
            else {
              unsigned int v274 = 32 - __clz(~(-1 << -(char)__clz(v273)));
            }
            unsigned int v275 = (v74 >> 3) - 1;
            if (v73)
            {
              unsigned int v276 = 0;
              if (v274) {
                goto LABEL_206;
              }
            }
            else
            {
              unsigned int v276 = 32 - __clz(~(-1 << -(char)__clz(v275)));
              if (v276 | v274)
              {
LABEL_206:
                int v277 = 0;
                uint64_t v278 = 0;
                int v279 = v41 & v273;
                int v280 = v26 & v275;
                BOOL v281 = v276 != 0;
                BOOL v282 = v274 != 0;
                int v283 = 1;
                do
                {
                  --v276;
                  if (v281) {
                    v278 |= (unint64_t)(v283 & v280) << v277++;
                  }
                  else {
                    unsigned int v276 = 0;
                  }
                  --v274;
                  if (v282) {
                    v278 |= (unint64_t)(v283 & v279) << v277++;
                  }
                  else {
                    unsigned int v274 = 0;
                  }
                  v283 *= 2;
                  --v277;
                  BOOL v282 = v274 != 0;
                  BOOL v281 = v276 != 0;
                }
                while (v274 | v276);
                goto LABEL_218;
              }
            }
            uint64_t v278 = 0;
LABEL_218:
            unint64_t v58 = ((unint64_t)(v43 / v70 + v302 / v74 * ((v70 + v285) / v70)) << 14) + (v278 << 11);
            goto LABEL_58;
          }
          if (v296)
          {
            int v51 = 0;
            uint64_t v52 = 0;
            int v53 = 1;
            BOOL v54 = v293;
            BOOL v55 = v292;
            __int32 v56 = v294.i32[0];
            __int32 v57 = v294.i32[1];
            do
            {
              --v56;
              if (v54) {
                v52 |= (unint64_t)(v53 & v26) << v51++;
              }
              else {
                __int32 v56 = 0;
              }
              --v57;
              if (v55) {
                v52 |= (unint64_t)(v53 & v41) << v51++;
              }
              else {
                __int32 v57 = 0;
              }
              v53 *= 2;
              --v51;
              BOOL v55 = v57 != 0;
              BOOL v54 = v56 != 0;
            }
            while (v57 | v56);
          }
          else
          {
            uint64_t v52 = 0;
          }
          unint64_t v58 = v52 << 11;
LABEL_58:
          unsigned int v59 = *(_DWORD *)(v36 + 128) >> (*(unsigned char *)(v36 + 144) + a12);
          if (v59 <= 1) {
            unsigned int v59 = 1;
          }
          unsigned int v60 = v59 + 15;
          if (v60 < 0x20) {
            unsigned int v61 = 0;
          }
          else {
            unsigned int v61 = 32 - __clz(~(-1 << -(char)__clz((v60 >> 4) - 1)));
          }
          unsigned int v62 = *(_DWORD *)(v36 + 132) >> (*(unsigned char *)(v36 + 144) + a12);
          if (v62 <= 1) {
            unsigned int v62 = 1;
          }
          unsigned int v63 = v62 + 7;
          if (v63 < 0x10)
          {
            unsigned int v64 = 0;
            if (!v61)
            {
LABEL_80:
              uint64_t v66 = 0;
              goto LABEL_81;
            }
          }
          else
          {
            unsigned int v64 = 32 - __clz(~(-1 << -(char)__clz((v63 >> 3) - 1)));
            if (!(v64 | v61)) {
              goto LABEL_80;
            }
          }
          int v65 = 0;
          uint64_t v66 = 0;
          BOOL v67 = v61 != 0;
          BOOL v68 = v64 != 0;
          int v69 = 1;
          do
          {
            --v61;
            if (v67) {
              v66 |= (unint64_t)(v69 & v41) << v65++;
            }
            else {
              unsigned int v61 = 0;
            }
            --v64;
            if (v68) {
              v66 |= (unint64_t)(v69 & v26) << v65++;
            }
            else {
              unsigned int v64 = 0;
            }
            v69 *= 2;
            --v65;
            BOOL v68 = v64 != 0;
            BOOL v67 = v61 != 0;
          }
          while (v64 | v61);
LABEL_81:
          uint64_t v75 = v16;
          int v76 = v47 < 0x10 || v48;
          unsigned int v77 = (char *)(v300 + 8 * v66);
          unint64_t v78 = (_OWORD *)(v301 + 16 * (v45 - v16));
          uint64_t v79 = (void *)(v299 + v58);
          if (v310 < 8) {
            int v80 = 1;
          }
          else {
            int v80 = v76;
          }
          unsigned int v308 = v79;
          if (v309)
          {
            BOOL v81 = __dst;
            if (!v80) {
              goto LABEL_93;
            }
            int v82 = (char *)(v300 + 8 * v66);
            int v83 = v46;
            char v84 = v47;
            BOOL v85 = v48;
            memcpy(__dst, v79, sizeof(__dst));
            BOOL v48 = v85;
            LOBYTE(v47) = v84;
            unsigned int v43 = 16 * v41;
            int v46 = v83;
            unsigned int v77 = v82;
            uint64_t v36 = v305;
          }
          else
          {
            BOOL v81 = v79;
            if (!v80)
            {
LABEL_93:
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock(v78, a11, v81, v77, v47, v310);
              goto LABEL_94;
            }
          }
          block[0] = MEMORY[0x263EF8330];
          unsigned int v86 = v45 - v43;
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE18ELj2ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = v36;
          unint64_t v312 = v81;
          unsigned __int8 v320 = v47;
          unsigned __int8 v321 = v310;
          int v316 = v295;
          unsigned int v317 = v45 - v43;
          uint64_t v313 = v77;
          unint64_t v314 = v78;
          uint64_t v315 = a11;
          int v318 = v304;
          unsigned int v319 = v46;
          if (v48)
          {
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(v36 + 8) + 7384), block);
LABEL_94:
            uint64_t v16 = v75;
            goto LABEL_186;
          }
          unsigned int v87 = *v77;
          uint64_t v16 = v75;
          if (v87 == 255)
          {
            float64x2_t v90 = *((float64x2_t *)v81 + 1);
            float64x2_t v91 = *((float64x2_t *)v81 + 2);
            float64x2_t v92 = *((float64x2_t *)v81 + 3);
            float64x2_t v93 = *((float64x2_t *)v81 + 6);
            float64x2_t v94 = *((float64x2_t *)v81 + 7);
            float64x2_t v95 = *((float64x2_t *)v81 + 8);
            float64x2_t v96 = *((float64x2_t *)v81 + 9);
            float64x2_t v97 = *((float64x2_t *)v81 + 11);
            float64x2_t v98 = *((float64x2_t *)v81 + 4);
            float64x2_t v99 = *((float64x2_t *)v81 + 12);
            float64x2_t v100 = *((float64x2_t *)v81 + 13);
            float64x2_t v101 = *((float64x2_t *)v81 + 14);
            float64x2_t v102 = *((float64x2_t *)v81 + 15);
            float64x2_t v103 = *((float64x2_t *)v81 + 5);
            float64x2_t v104 = *((float64x2_t *)v81 + 10);
            float64x2_t v323 = *(float64x2_t *)v81;
            float64x2_t v324 = v90;
            float64x2_t v325 = v98;
            float64x2_t v326 = v103;
            float64x2_t v339 = v91;
            float64x2_t v340 = v92;
            float64x2_t v341 = v93;
            float64x2_t v342 = v94;
            float64x2_t v355 = v95;
            float64x2_t v356 = v96;
            float64x2_t v357 = v99;
            float64x2_t v358 = v100;
            uint64_t v88 = 256;
            float64x2_t v371 = v104;
            float64x2_t v372 = v97;
            float64x2_t v373 = v101;
            float64x2_t v374 = v102;
          }
          else if (v87 == 7)
          {
            float64x2_t v89 = vld1q_dup_f64((const double *)v81);
            float64x2_t v323 = v89;
            float64x2_t v324 = v89;
            float64x2_t v325 = v89;
            float64x2_t v326 = v89;
            float64x2_t v339 = v89;
            float64x2_t v340 = v89;
            float64x2_t v341 = v89;
            float64x2_t v342 = v89;
            float64x2_t v355 = v89;
            float64x2_t v356 = v89;
            float64x2_t v357 = v89;
            float64x2_t v358 = v89;
            float64x2_t v371 = v89;
            float64x2_t v372 = v89;
            uint64_t v88 = 8;
            float64x2_t v373 = v89;
            float64x2_t v374 = v89;
          }
          else if (*v77)
          {
            uint64_t v88 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((uint64_t)&v323, 256, (uint64_t)v81, v87);
          }
          else
          {
            uint64_t v88 = 0;
            float64x2_t v326 = 0u;
            float64x2_t v325 = 0u;
            float64x2_t v324 = 0u;
            float64x2_t v323 = 0u;
            float64x2_t v339 = 0u;
            float64x2_t v340 = 0u;
            float64x2_t v341 = 0u;
            float64x2_t v342 = 0u;
            float64x2_t v355 = 0u;
            float64x2_t v356 = 0u;
            float64x2_t v357 = 0u;
            float64x2_t v358 = 0u;
            float64x2_t v371 = 0u;
            float64x2_t v372 = 0u;
            float64x2_t v373 = 0u;
            float64x2_t v374 = 0u;
          }
          uint64_t v105 = (uint64_t)v81 + v88;
          unsigned int v106 = v77[1];
          if (v106 == 255)
          {
            float64x2_t v109 = *(float64x2_t *)(v105 + 16);
            float64x2_t v110 = *(float64x2_t *)(v105 + 32);
            float64x2_t v111 = *(float64x2_t *)(v105 + 48);
            float64x2_t v112 = *(float64x2_t *)(v105 + 96);
            float64x2_t v113 = *(float64x2_t *)(v105 + 112);
            float64x2_t v114 = *(float64x2_t *)(v105 + 128);
            float64x2_t v115 = *(float64x2_t *)(v105 + 144);
            float64x2_t v116 = *(float64x2_t *)(v105 + 176);
            float64x2_t v117 = *(float64x2_t *)(v105 + 64);
            float64x2_t v118 = *(float64x2_t *)(v105 + 192);
            float64x2_t v119 = *(float64x2_t *)(v105 + 208);
            float64x2_t v120 = *(float64x2_t *)(v105 + 224);
            float64x2_t v121 = *(float64x2_t *)(v105 + 240);
            float64x2_t v122 = *(float64x2_t *)(v105 + 80);
            float64x2_t v123 = *(float64x2_t *)(v105 + 160);
            float64x2_t v327 = *(float64x2_t *)v105;
            float64x2_t v328 = v109;
            float64x2_t v329 = v117;
            float64x2_t v330 = v122;
            float64x2_t v343 = v110;
            float64x2_t v344 = v111;
            float64x2_t v345 = v112;
            float64x2_t v346 = v113;
            float64x2_t v359 = v114;
            float64x2_t v360 = v115;
            float64x2_t v361 = v118;
            float64x2_t v362 = v119;
            uint64_t v107 = 256;
            float64x2_t v375 = v123;
            float64x2_t v376 = v116;
            float64x2_t v377 = v120;
            float64x2_t v378 = v121;
          }
          else if (v106 == 7)
          {
            float64x2_t v108 = vld1q_dup_f64((const double *)v105);
            float64x2_t v327 = v108;
            float64x2_t v328 = v108;
            float64x2_t v329 = v108;
            float64x2_t v330 = v108;
            float64x2_t v343 = v108;
            float64x2_t v344 = v108;
            float64x2_t v345 = v108;
            float64x2_t v346 = v108;
            float64x2_t v359 = v108;
            float64x2_t v360 = v108;
            float64x2_t v361 = v108;
            float64x2_t v362 = v108;
            float64x2_t v375 = v108;
            float64x2_t v376 = v108;
            uint64_t v107 = 8;
            float64x2_t v377 = v108;
            float64x2_t v378 = v108;
          }
          else if (v77[1])
          {
            uint64_t v107 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((uint64_t)&v327, 256, v105, v106);
          }
          else
          {
            uint64_t v107 = 0;
            float64x2_t v329 = 0u;
            float64x2_t v330 = 0u;
            float64x2_t v327 = 0u;
            float64x2_t v328 = 0u;
            float64x2_t v343 = 0u;
            float64x2_t v344 = 0u;
            float64x2_t v345 = 0u;
            float64x2_t v346 = 0u;
            float64x2_t v359 = 0u;
            float64x2_t v360 = 0u;
            float64x2_t v361 = 0u;
            float64x2_t v362 = 0u;
            float64x2_t v375 = 0u;
            float64x2_t v376 = 0u;
            float64x2_t v377 = 0u;
            float64x2_t v378 = 0u;
          }
          uint64_t v124 = v105 + v107;
          unsigned int v125 = v77[2];
          if (v125 == 255)
          {
            float64x2_t v128 = *(float64x2_t *)(v124 + 16);
            float64x2_t v129 = *(float64x2_t *)(v124 + 32);
            float64x2_t v130 = *(float64x2_t *)(v124 + 48);
            float64x2_t v131 = *(float64x2_t *)(v124 + 96);
            float64x2_t v132 = *(float64x2_t *)(v124 + 112);
            float64x2_t v133 = *(float64x2_t *)(v124 + 128);
            float64x2_t v134 = *(float64x2_t *)(v124 + 144);
            float64x2_t v135 = *(float64x2_t *)(v124 + 176);
            float64x2_t v136 = *(float64x2_t *)(v124 + 64);
            float64x2_t v137 = *(float64x2_t *)(v124 + 192);
            float64x2_t v138 = *(float64x2_t *)(v124 + 208);
            float64x2_t v139 = *(float64x2_t *)(v124 + 224);
            float64x2_t v140 = *(float64x2_t *)(v124 + 240);
            float64x2_t v141 = *(float64x2_t *)(v124 + 80);
            float64x2_t v142 = *(float64x2_t *)(v124 + 160);
            float64x2_t v387 = *(float64x2_t *)v124;
            float64x2_t v388 = v128;
            float64x2_t v389 = v136;
            float64x2_t v390 = v141;
            float64x2_t v403 = v129;
            float64x2_t v404 = v130;
            float64x2_t v405 = v131;
            float64x2_t v406 = v132;
            float64x2_t v419 = v133;
            float64x2_t v420 = v134;
            float64x2_t v421 = v137;
            float64x2_t v422 = v138;
            uint64_t v126 = 256;
            float64x2_t v435 = v142;
            float64x2_t v436 = v135;
            float64x2_t v437 = v139;
            float64x2_t v438 = v140;
          }
          else if (v125 == 7)
          {
            float64x2_t v127 = vld1q_dup_f64((const double *)v124);
            float64x2_t v387 = v127;
            float64x2_t v388 = v127;
            float64x2_t v389 = v127;
            float64x2_t v390 = v127;
            float64x2_t v403 = v127;
            float64x2_t v404 = v127;
            float64x2_t v405 = v127;
            float64x2_t v406 = v127;
            float64x2_t v419 = v127;
            float64x2_t v420 = v127;
            float64x2_t v421 = v127;
            float64x2_t v422 = v127;
            float64x2_t v435 = v127;
            float64x2_t v436 = v127;
            float64x2_t v437 = v127;
            uint64_t v126 = 8;
            float64x2_t v438 = v127;
          }
          else if (v77[2])
          {
            uint64_t v126 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((uint64_t)&v387, 256, v124, v125);
          }
          else
          {
            uint64_t v126 = 0;
            float64x2_t v389 = 0u;
            float64x2_t v390 = 0u;
            float64x2_t v387 = 0u;
            float64x2_t v388 = 0u;
            float64x2_t v403 = 0u;
            float64x2_t v404 = 0u;
            float64x2_t v405 = 0u;
            float64x2_t v406 = 0u;
            float64x2_t v419 = 0u;
            float64x2_t v420 = 0u;
            float64x2_t v421 = 0u;
            float64x2_t v422 = 0u;
            float64x2_t v435 = 0u;
            float64x2_t v436 = 0u;
            float64x2_t v437 = 0u;
            float64x2_t v438 = 0u;
          }
          uint64_t v143 = v124 + v126;
          unsigned int v144 = v77[3];
          if (v144 == 255)
          {
            float64x2_t v147 = *(float64x2_t *)(v143 + 16);
            float64x2_t v148 = *(float64x2_t *)(v143 + 32);
            float64x2_t v149 = *(float64x2_t *)(v143 + 48);
            float64x2_t v150 = *(float64x2_t *)(v143 + 96);
            float64x2_t v151 = *(float64x2_t *)(v143 + 112);
            float64x2_t v152 = *(float64x2_t *)(v143 + 128);
            float64x2_t v153 = *(float64x2_t *)(v143 + 144);
            float64x2_t v154 = *(float64x2_t *)(v143 + 176);
            float64x2_t v155 = *(float64x2_t *)(v143 + 64);
            float64x2_t v156 = *(float64x2_t *)(v143 + 192);
            float64x2_t v157 = *(float64x2_t *)(v143 + 208);
            float64x2_t v158 = *(float64x2_t *)(v143 + 224);
            float64x2_t v159 = *(float64x2_t *)(v143 + 240);
            float64x2_t v160 = *(float64x2_t *)(v143 + 80);
            float64x2_t v161 = *(float64x2_t *)(v143 + 160);
            float64x2_t v391 = *(float64x2_t *)v143;
            float64x2_t v392 = v147;
            float64x2_t v393 = v155;
            float64x2_t v394 = v160;
            float64x2_t v407 = v148;
            float64x2_t v408 = v149;
            float64x2_t v409 = v150;
            float64x2_t v410 = v151;
            float64x2_t v423 = v152;
            float64x2_t v424 = v153;
            float64x2_t v425 = v156;
            float64x2_t v426 = v157;
            uint64_t v145 = 256;
            float64x2_t v439 = v161;
            float64x2_t v440 = v154;
            float64x2_t v441 = v158;
            float64x2_t v442 = v159;
          }
          else if (v144 == 7)
          {
            float64x2_t v146 = vld1q_dup_f64((const double *)v143);
            float64x2_t v391 = v146;
            float64x2_t v392 = v146;
            float64x2_t v393 = v146;
            float64x2_t v394 = v146;
            float64x2_t v407 = v146;
            float64x2_t v408 = v146;
            float64x2_t v409 = v146;
            float64x2_t v410 = v146;
            float64x2_t v423 = v146;
            float64x2_t v424 = v146;
            float64x2_t v425 = v146;
            float64x2_t v426 = v146;
            float64x2_t v439 = v146;
            float64x2_t v440 = v146;
            float64x2_t v441 = v146;
            uint64_t v145 = 8;
            float64x2_t v442 = v146;
          }
          else if (v77[3])
          {
            uint64_t v145 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((uint64_t)&v391, 256, v143, v144);
          }
          else
          {
            uint64_t v145 = 0;
            float64x2_t v393 = 0u;
            float64x2_t v394 = 0u;
            float64x2_t v391 = 0u;
            float64x2_t v392 = 0u;
            float64x2_t v407 = 0u;
            float64x2_t v408 = 0u;
            float64x2_t v409 = 0u;
            float64x2_t v410 = 0u;
            float64x2_t v423 = 0u;
            float64x2_t v424 = 0u;
            float64x2_t v425 = 0u;
            float64x2_t v426 = 0u;
            float64x2_t v439 = 0u;
            float64x2_t v440 = 0u;
            float64x2_t v441 = 0u;
            float64x2_t v442 = 0u;
          }
          uint64_t v162 = v143 + v145;
          unsigned int v163 = v77[4];
          if (v163 == 255)
          {
            float64x2_t v166 = *(float64x2_t *)(v162 + 16);
            float64x2_t v167 = *(float64x2_t *)(v162 + 32);
            float64x2_t v168 = *(float64x2_t *)(v162 + 48);
            float64x2_t v169 = *(float64x2_t *)(v162 + 96);
            float64x2_t v170 = *(float64x2_t *)(v162 + 112);
            float64x2_t v171 = *(float64x2_t *)(v162 + 128);
            float64x2_t v172 = *(float64x2_t *)(v162 + 144);
            float64x2_t v173 = *(float64x2_t *)(v162 + 176);
            float64x2_t v174 = *(float64x2_t *)(v162 + 64);
            float64x2_t v175 = *(float64x2_t *)(v162 + 192);
            float64x2_t v176 = *(float64x2_t *)(v162 + 208);
            float64x2_t v177 = *(float64x2_t *)(v162 + 224);
            float64x2_t v178 = *(float64x2_t *)(v162 + 240);
            float64x2_t v179 = *(float64x2_t *)(v162 + 80);
            float64x2_t v180 = *(float64x2_t *)(v162 + 160);
            float64x2_t v331 = *(float64x2_t *)v162;
            float64x2_t v332 = v166;
            float64x2_t v333 = v174;
            float64x2_t v334 = v179;
            float64x2_t v347 = v167;
            float64x2_t v348 = v168;
            float64x2_t v349 = v169;
            float64x2_t v350 = v170;
            float64x2_t v363 = v171;
            float64x2_t v364 = v172;
            float64x2_t v365 = v175;
            float64x2_t v366 = v176;
            uint64_t v164 = 256;
            float64x2_t v379 = v180;
            float64x2_t v380 = v173;
            float64x2_t v381 = v177;
            float64x2_t v382 = v178;
          }
          else if (v163 == 7)
          {
            float64x2_t v165 = vld1q_dup_f64((const double *)v162);
            float64x2_t v331 = v165;
            float64x2_t v332 = v165;
            float64x2_t v333 = v165;
            float64x2_t v334 = v165;
            float64x2_t v347 = v165;
            float64x2_t v348 = v165;
            float64x2_t v349 = v165;
            float64x2_t v350 = v165;
            float64x2_t v363 = v165;
            float64x2_t v364 = v165;
            float64x2_t v365 = v165;
            float64x2_t v366 = v165;
            float64x2_t v379 = v165;
            float64x2_t v380 = v165;
            uint64_t v164 = 8;
            float64x2_t v381 = v165;
            float64x2_t v382 = v165;
          }
          else if (v77[4])
          {
            uint64_t v164 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((uint64_t)&v331, 256, v162, v163);
          }
          else
          {
            uint64_t v164 = 0;
            float64x2_t v333 = 0u;
            float64x2_t v334 = 0u;
            float64x2_t v331 = 0u;
            float64x2_t v332 = 0u;
            float64x2_t v347 = 0u;
            float64x2_t v348 = 0u;
            float64x2_t v349 = 0u;
            float64x2_t v350 = 0u;
            float64x2_t v363 = 0u;
            float64x2_t v364 = 0u;
            float64x2_t v365 = 0u;
            float64x2_t v366 = 0u;
            float64x2_t v379 = 0u;
            float64x2_t v380 = 0u;
            float64x2_t v381 = 0u;
            float64x2_t v382 = 0u;
          }
          uint64_t v181 = v162 + v164;
          unsigned int v182 = v77[5];
          if (v182 == 255)
          {
            float64x2_t v185 = *(float64x2_t *)(v181 + 16);
            float64x2_t v186 = *(float64x2_t *)(v181 + 32);
            float64x2_t v187 = *(float64x2_t *)(v181 + 48);
            float64x2_t v188 = *(float64x2_t *)(v181 + 96);
            float64x2_t v189 = *(float64x2_t *)(v181 + 112);
            float64x2_t v190 = *(float64x2_t *)(v181 + 128);
            float64x2_t v191 = *(float64x2_t *)(v181 + 144);
            float64x2_t v192 = *(float64x2_t *)(v181 + 176);
            float64x2_t v193 = *(float64x2_t *)(v181 + 64);
            float64x2_t v194 = *(float64x2_t *)(v181 + 192);
            float64x2_t v195 = *(float64x2_t *)(v181 + 208);
            float64x2_t v196 = *(float64x2_t *)(v181 + 224);
            float64x2_t v197 = *(float64x2_t *)(v181 + 240);
            float64x2_t v198 = *(float64x2_t *)(v181 + 80);
            float64x2_t v199 = *(float64x2_t *)(v181 + 160);
            float64x2_t v335 = *(float64x2_t *)v181;
            float64x2_t v336 = v185;
            float64x2_t v337 = v193;
            float64x2_t v338 = v198;
            float64x2_t v351 = v186;
            float64x2_t v352 = v187;
            float64x2_t v353 = v188;
            float64x2_t v354 = v189;
            float64x2_t v367 = v190;
            float64x2_t v368 = v191;
            float64x2_t v369 = v194;
            float64x2_t v370 = v195;
            uint64_t v183 = 256;
            float64x2_t v383 = v199;
            float64x2_t v384 = v192;
            float64x2_t v385 = v196;
            float64x2_t v386 = v197;
          }
          else if (v182 == 7)
          {
            float64x2_t v184 = vld1q_dup_f64((const double *)v181);
            float64x2_t v335 = v184;
            float64x2_t v336 = v184;
            float64x2_t v337 = v184;
            float64x2_t v338 = v184;
            float64x2_t v351 = v184;
            float64x2_t v352 = v184;
            float64x2_t v353 = v184;
            float64x2_t v354 = v184;
            float64x2_t v367 = v184;
            float64x2_t v368 = v184;
            float64x2_t v369 = v184;
            float64x2_t v370 = v184;
            float64x2_t v383 = v184;
            float64x2_t v384 = v184;
            uint64_t v183 = 8;
            float64x2_t v385 = v184;
            float64x2_t v386 = v184;
          }
          else if (v77[5])
          {
            uint64_t v183 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((uint64_t)&v335, 256, v181, v182);
          }
          else
          {
            uint64_t v183 = 0;
            float64x2_t v337 = 0u;
            float64x2_t v338 = 0u;
            float64x2_t v335 = 0u;
            float64x2_t v336 = 0u;
            float64x2_t v351 = 0u;
            float64x2_t v352 = 0u;
            float64x2_t v353 = 0u;
            float64x2_t v354 = 0u;
            float64x2_t v367 = 0u;
            float64x2_t v368 = 0u;
            float64x2_t v369 = 0u;
            float64x2_t v370 = 0u;
            float64x2_t v383 = 0u;
            float64x2_t v384 = 0u;
            float64x2_t v385 = 0u;
            float64x2_t v386 = 0u;
          }
          uint64_t v200 = v181 + v183;
          unsigned int v201 = v77[6];
          if (v201 == 255)
          {
            float64x2_t v204 = *(float64x2_t *)(v200 + 16);
            float64x2_t v205 = *(float64x2_t *)(v200 + 32);
            float64x2_t v206 = *(float64x2_t *)(v200 + 48);
            float64x2_t v207 = *(float64x2_t *)(v200 + 96);
            float64x2_t v208 = *(float64x2_t *)(v200 + 112);
            float64x2_t v209 = *(float64x2_t *)(v200 + 128);
            float64x2_t v210 = *(float64x2_t *)(v200 + 144);
            float64x2_t v211 = *(float64x2_t *)(v200 + 176);
            float64x2_t v212 = *(float64x2_t *)(v200 + 64);
            float64x2_t v213 = *(float64x2_t *)(v200 + 192);
            float64x2_t v214 = *(float64x2_t *)(v200 + 208);
            float64x2_t v215 = *(float64x2_t *)(v200 + 224);
            float64x2_t v216 = *(float64x2_t *)(v200 + 240);
            float64x2_t v217 = *(float64x2_t *)(v200 + 80);
            float64x2_t v218 = *(float64x2_t *)(v200 + 160);
            float64x2_t v395 = *(float64x2_t *)v200;
            float64x2_t v396 = v204;
            float64x2_t v397 = v212;
            float64x2_t v398 = v217;
            float64x2_t v411 = v205;
            float64x2_t v412 = v206;
            float64x2_t v413 = v207;
            float64x2_t v414 = v208;
            float64x2_t v427 = v209;
            float64x2_t v428 = v210;
            float64x2_t v429 = v213;
            float64x2_t v430 = v214;
            uint64_t v202 = 256;
            float64x2_t v443 = v218;
            float64x2_t v444 = v211;
            float64x2_t v445 = v215;
            float64x2_t v446 = v216;
          }
          else if (v201 == 7)
          {
            float64x2_t v203 = vld1q_dup_f64((const double *)v200);
            float64x2_t v395 = v203;
            float64x2_t v396 = v203;
            float64x2_t v397 = v203;
            float64x2_t v398 = v203;
            float64x2_t v411 = v203;
            float64x2_t v412 = v203;
            float64x2_t v413 = v203;
            float64x2_t v414 = v203;
            float64x2_t v427 = v203;
            float64x2_t v428 = v203;
            float64x2_t v429 = v203;
            float64x2_t v430 = v203;
            float64x2_t v443 = v203;
            float64x2_t v444 = v203;
            float64x2_t v445 = v203;
            uint64_t v202 = 8;
            float64x2_t v446 = v203;
          }
          else if (v77[6])
          {
            uint64_t v202 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((uint64_t)&v395, 256, v200, v201);
          }
          else
          {
            uint64_t v202 = 0;
            float64x2_t v397 = 0u;
            float64x2_t v398 = 0u;
            float64x2_t v395 = 0u;
            float64x2_t v396 = 0u;
            float64x2_t v411 = 0u;
            float64x2_t v412 = 0u;
            float64x2_t v413 = 0u;
            float64x2_t v414 = 0u;
            float64x2_t v427 = 0u;
            float64x2_t v428 = 0u;
            float64x2_t v429 = 0u;
            float64x2_t v430 = 0u;
            float64x2_t v443 = 0u;
            float64x2_t v444 = 0u;
            float64x2_t v445 = 0u;
            float64x2_t v446 = 0u;
          }
          uint64_t v219 = v200 + v202;
          unsigned int v220 = v77[7];
          if (v220 == 255)
          {
            float64x2_t v224 = *(float64x2_t *)(v219 + 16);
            float64x2_t v225 = *(float64x2_t *)(v219 + 32);
            float64x2_t v226 = *(float64x2_t *)(v219 + 48);
            float64x2_t v227 = *(float64x2_t *)(v219 + 96);
            float64x2_t v228 = *(float64x2_t *)(v219 + 112);
            float64x2_t v229 = *(float64x2_t *)(v219 + 64);
            float64x2_t v230 = *(float64x2_t *)(v219 + 128);
            float64x2_t v231 = *(float64x2_t *)(v219 + 144);
            float64x2_t v232 = *(float64x2_t *)(v219 + 80);
            float64x2_t v233 = *(float64x2_t *)(v219 + 192);
            float64x2_t v234 = *(float64x2_t *)(v219 + 208);
            float64x2_t v235 = *(float64x2_t *)(v219 + 224);
            float64x2_t v236 = *(float64x2_t *)(v219 + 240);
            float64x2_t v237 = *(float64x2_t *)(v219 + 160);
            float64x2_t v238 = *(float64x2_t *)(v219 + 176);
            float64x2_t v399 = *(float64x2_t *)v219;
            float64x2_t v400 = v224;
            float64x2_t v401 = v229;
            float64x2_t v402 = v232;
            float64x2_t v415 = v225;
            float64x2_t v416 = v226;
            float64x2_t v417 = v227;
            float64x2_t v418 = v228;
            float64x2_t v431 = v230;
            float64x2_t v432 = v231;
            float64x2_t v433 = v233;
            float64x2_t v434 = v234;
            int v221 = v304;
            unsigned int v222 = v295;
            float64x2_t v447 = v237;
            float64x2_t v448 = v238;
            float64x2_t v449 = v235;
            float64x2_t v450 = v236;
            if (!v304) {
              goto LABEL_185;
            }
          }
          else if (v220 == 7)
          {
            float64x2_t v223 = vld1q_dup_f64((const double *)v219);
            float64x2_t v399 = v223;
            float64x2_t v400 = v223;
            float64x2_t v401 = v223;
            float64x2_t v402 = v223;
            float64x2_t v415 = v223;
            float64x2_t v416 = v223;
            float64x2_t v417 = v223;
            float64x2_t v418 = v223;
            float64x2_t v431 = v223;
            float64x2_t v432 = v223;
            float64x2_t v433 = v223;
            float64x2_t v434 = v223;
            float64x2_t v447 = v223;
            float64x2_t v448 = v223;
            float64x2_t v449 = v223;
            int v221 = v304;
            unsigned int v222 = v295;
            float64x2_t v450 = v223;
            if (!v304) {
              goto LABEL_185;
            }
          }
          else if (v77[7])
          {
            AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((uint64_t)&v399, 256, v219, v220);
            unsigned int v222 = v316;
            unsigned int v86 = v317;
            int v221 = v318;
            if (!v318) {
              goto LABEL_185;
            }
          }
          else
          {
            float64x2_t v401 = 0u;
            float64x2_t v402 = 0u;
            float64x2_t v399 = 0u;
            float64x2_t v400 = 0u;
            float64x2_t v415 = 0u;
            float64x2_t v416 = 0u;
            float64x2_t v417 = 0u;
            float64x2_t v418 = 0u;
            float64x2_t v431 = 0u;
            float64x2_t v432 = 0u;
            float64x2_t v433 = 0u;
            float64x2_t v434 = 0u;
            float64x2_t v447 = 0u;
            float64x2_t v448 = 0u;
            int v221 = v304;
            unsigned int v222 = v295;
            float64x2_t v449 = 0u;
            float64x2_t v450 = 0u;
            if (!v304) {
              goto LABEL_185;
            }
          }
          if (v319)
          {
            uint64_t v239 = 0;
            unint64_t v240 = (unint64_t)v222 << 8;
            uint64_t v241 = 16 * v86;
            float64x2_t v242 = (char *)&v323 + v240 + v241;
            unint64_t v243 = v314;
            uint64_t v244 = v315;
            unint64_t v245 = 16 * v319;
            if (v245 <= 1) {
              unint64_t v246 = 1;
            }
            else {
              unint64_t v246 = 16 * v319;
            }
            unint64_t v247 = v240 + v241;
            uint64_t v248 = (char *)&v323 + v240 + v241;
            if (v246) {
              BOOL v249 = (v246 - 1) >> 32 == 0;
            }
            else {
              BOOL v249 = 0;
            }
            char v250 = !v249;
            uint64_t v251 = v246 & 0xFFFFFFFE0;
            uint64_t v252 = v246 & 0xFFFFFFFF0;
            unint64_t v253 = (char *)&v324 + v247;
            unint64_t v254 = v314 + 1;
            int32x4_t v255 = v242;
            unint64_t v256 = v314;
            do
            {
              char v257 = (char *)v243 + v244 * v239;
              uint64_t v258 = &v242[256 * v239];
              if ((unint64_t)(&v248[256 * v239] - v257) < 0x20) {
                char v259 = 1;
              }
              else {
                char v259 = v250;
              }
              if (v259)
              {
                int v260 = 0;
                goto LABEL_182;
              }
              if (v246 >= 0x20)
              {
                char v266 = v254;
                int v267 = v253;
                uint64_t v268 = v246 & 0xFFFFFFFE0;
                do
                {
                  long long v269 = *v266;
                  *(v267 - 1) = *(v266 - 1);
                  *int v267 = v269;
                  v267 += 2;
                  v266 += 2;
                  v268 -= 32;
                }
                while (v268);
                if (v246 == v251) {
                  goto LABEL_165;
                }
                uint64_t v261 = v246 & 0xFFFFFFFE0;
                if ((v246 & 0x10) == 0)
                {
                  v257 += v251;
                  v258 += v251;
                  int v260 = v246 & 0xFFFFFFE0;
                  goto LABEL_182;
                }
              }
              else
              {
                uint64_t v261 = 0;
              }
              v258 += v252;
              unint64_t v262 = v261 - (v246 & 0xFFFFFFFF0);
              unint64_t v263 = (uint64_t *)((char *)v256 + v261);
              int32x4_t v264 = &v255[v261];
              do
              {
                uint64_t v265 = *v263++;
                *(void *)int32x4_t v264 = v265;
                v264 += 8;
                v262 += 8;
              }
              while (v262);
              if (v246 == v252) {
                goto LABEL_165;
              }
              v257 += v252;
              int v260 = v246 & 0xFFFFFFF0;
LABEL_182:
              unsigned int v270 = v260 + 1;
              do
              {
                char v271 = *v257++;
                *v258++ = v271;
              }
              while (v245 > v270++);
LABEL_165:
              ++v239;
              v253 += 256;
              unint64_t v254 = (long long *)((char *)v254 + v244);
              unint64_t v256 = (_OWORD *)((char *)v256 + v244);
              v255 += 256;
            }
            while (v239 != v221);
          }
LABEL_185:
          AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock(&v323, 256, v312, v313, v320, v321);
LABEL_186:
          uint64_t result = v308;
          if (v309) {
            uint64_t result = memcpy(v308, v81, 0x800uLL);
          }
          BOOL v31 = v41++ == v297 >> 4;
          uint64_t v36 = v305;
        }
        while (!v31);
        BOOL v31 = v26++ == v291;
      }
      while (!v31);
    }
  }
  return result;
}

uint64_t AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10, uint64_t a11, char a12)
{
  uint64_t v12 = MEMORY[0x270FA5388](a1);
  unsigned int v14 = v13;
  unsigned int v16 = v15;
  unsigned int v18 = v17;
  unsigned int v20 = v19;
  uint64_t v152 = v21;
  uint64_t v153 = v22;
  uint64_t v139 = v23;
  uint64_t v24 = v12;
  uint64_t v183 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(v12, 0);
  unsigned int v156 = v14;
  unsigned int v141 = v14 + a10 - 1;
  uint64_t v157 = v24;
  if (*(void *)(v24 + 168)) {
    int v27 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v27 = 0;
  }
  unsigned int v28 = v20 - 1;
  unsigned int v29 = v18 - 1;
  unsigned int v30 = v14 >> 3;
  unsigned int v140 = v141 >> 3;
  BOOL v31 = (v27 & 0xD00) == 0 || v27 == 768;
  int v32 = v27 & 0xE00;
  int v34 = !v31 && v32 != 1024;
  int v162 = v34;
  uint64_t result = v24;
  if (*(unsigned char *)(v24 + 232))
  {
    unsigned int v36 = *(unsigned __int8 *)(v24 + 255);
    unsigned int v37 = *(unsigned __int8 *)(v24 + 254);
    char v38 = __clz(v28);
    if (1 << v36 >= v18 || v20 >> v37)
    {
      if (!(v18 >> v36) && 1 << v37 < v20)
      {
        if (v18 < 2) {
          unsigned int v41 = 0;
        }
        else {
          unsigned int v41 = __clz(~(-1 << -(char)__clz(v29))) - 32;
        }
        v37 += v36 + v41;
        unsigned int v36 = -v41;
      }
    }
    else
    {
      unsigned int v39 = 32 - __clz(~(-1 << -v38));
      unsigned int v40 = v37 + v36;
      if (v20 < 2) {
        unsigned int v39 = 0;
      }
      unsigned int v36 = v40 - v39;
      unsigned int v37 = v39;
    }
    if (v20 < 2)
    {
      if (v37) {
        goto LABEL_27;
      }
    }
    else if (32 - __clz(~(-1 << -v38)) < v37)
    {
LABEL_27:
      BOOL v151 = 0;
LABEL_32:
      unsigned int v148 = v37 - 4;
      unsigned int v145 = v36 - 3;
      int v43 = -1 << *(unsigned char *)(*(void *)(v24 + 208) + 48);
      unsigned int v138 = (((~v43 + v20) & v43) + ~(-1 << v37)) >> v37;
      goto LABEL_33;
    }
    if (v18 < 2) {
      unsigned int v42 = 0;
    }
    else {
      unsigned int v42 = 32 - __clz(~(-1 << -(char)__clz(v29)));
    }
    BOOL v151 = v42 >= v36;
    goto LABEL_32;
  }
  BOOL v151 = 0;
  unsigned int v138 = 0;
  unsigned int v145 = 0;
  unsigned int v148 = 0;
LABEL_33:
  if (v30 <= v140)
  {
    unsigned int v150 = v16 + a9 - 1;
    unsigned int v137 = v16 >> 4;
    if (v16 >> 4 <= v150 >> 4)
    {
      unsigned int v160 = v28 >> 4;
      unsigned int v136 = v29 >> 3;
      int v159 = (v28 & 0xF) + 1;
      int v135 = (v29 & 7) + 1;
      uint32x2_t v44 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(v20, v18), (int32x2_t)0xF00000007);
      int8x8_t v45 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32(vadd_s32((int32x2_t)vshl_u32(v44, (uint32x2_t)0xFFFFFFFCFFFFFFFDLL), (int32x2_t)-1))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x2000000010, v44));
      __int32 v146 = v45.i32[0] | v45.i32[1];
      int8x8_t v144 = v45;
      BOOL v142 = v45.i32[1] != 0;
      BOOL v143 = v45.i32[0] != 0;
      unsigned int v149 = v16;
      do
      {
        unsigned int v46 = (8 * v30) | 7;
        if (8 * v30 <= v156) {
          int v47 = v156;
        }
        else {
          int v47 = 8 * v30;
        }
        if (v141 < v46) {
          unsigned int v46 = v141;
        }
        int v147 = v47 - 8 * v30;
        int v155 = v46 - v47 + 1;
        unsigned int v48 = v137;
        if (v30 == v136) {
          unsigned int v49 = v135;
        }
        else {
          unsigned int v49 = 8;
        }
        uint64_t v154 = v139 + (v47 - v156) * a11;
        unsigned int v158 = v49;
        do
        {
          unsigned int v50 = 16 * v48;
          unsigned int v51 = 16 * (v48 + 1) - 1;
          if (16 * v48 <= v16) {
            int v52 = v16;
          }
          else {
            int v52 = 16 * v48;
          }
          if (v150 < v51) {
            unsigned int v51 = v150;
          }
          int v53 = v51 - v52 + 1;
          if (v48 == v160) {
            unsigned int v54 = v159;
          }
          else {
            unsigned int v54 = 16;
          }
          BOOL v55 = 1;
          if (8 * v30 >= v156 && v50 >= v16)
          {
            int v56 = v159;
            if (v48 != v160) {
              int v56 = 16;
            }
            BOOL v55 = v53 != v56 || v155 != v49;
          }
          if (v151)
          {
            if (v148 | v145)
            {
              int v58 = 0;
              uint64_t v59 = 0;
              BOOL v60 = v148 != 0;
              int v61 = 1;
              BOOL v63 = v145 != 0;
              unsigned int v62 = v145;
              unsigned int v64 = v148;
              do
              {
                --v62;
                if (v63) {
                  v59 |= (unint64_t)(v30 & ~(-1 << v145) & v61) << v58++;
                }
                else {
                  unsigned int v62 = 0;
                }
                --v64;
                if (v60) {
                  v59 |= (unint64_t)(v48 & ~(-1 << v148) & v61) << v58++;
                }
                else {
                  unsigned int v64 = 0;
                }
                v61 *= 2;
                --v58;
                BOOL v60 = v64 != 0;
                BOOL v63 = v62 != 0;
              }
              while (v64 | v62);
            }
            else
            {
              uint64_t v59 = 0;
            }
            uint64_t v72 = *(void *)(result + 320) * ((v48 >> v148) + (v30 >> v145) * v138) + (v59 << 11);
          }
          else
          {
            if (v146)
            {
              int v65 = 0;
              uint64_t v66 = 0;
              int v67 = 1;
              BOOL v68 = v142;
              BOOL v69 = v143;
              __int32 v70 = v144.i32[0];
              __int32 v71 = v144.i32[1];
              do
              {
                --v70;
                if (v69) {
                  v66 |= (unint64_t)(v67 & v30) << v65++;
                }
                else {
                  __int32 v70 = 0;
                }
                --v71;
                if (v68) {
                  v66 |= (unint64_t)(v67 & v48) << v65++;
                }
                else {
                  __int32 v71 = 0;
                }
                v67 *= 2;
                --v65;
                BOOL v68 = v71 != 0;
                BOOL v69 = v70 != 0;
              }
              while (v71 | v70);
            }
            else
            {
              uint64_t v66 = 0;
            }
            uint64_t v72 = v66 << 11;
          }
          unsigned int v73 = *(_DWORD *)(result + 128) >> (*(unsigned char *)(result + 144) + a12);
          if (v73 <= 1) {
            unsigned int v73 = 1;
          }
          unsigned int v74 = v73 + 15;
          if (v74 < 0x20) {
            unsigned int v75 = 0;
          }
          else {
            unsigned int v75 = 32 - __clz(~(-1 << -(char)__clz((v74 >> 4) - 1)));
          }
          unsigned int v76 = *(_DWORD *)(result + 132) >> (*(unsigned char *)(result + 144) + a12);
          if (v76 <= 1) {
            unsigned int v76 = 1;
          }
          unsigned int v77 = v76 + 7;
          if (v77 < 0x10) {
            unsigned int v78 = 0;
          }
          else {
            unsigned int v78 = 32 - __clz(~(-1 << -(char)__clz((v77 >> 3) - 1)));
          }
          if (v78 | v75)
          {
            int v79 = 0;
            uint64_t v80 = 0;
            BOOL v81 = v75 != 0;
            BOOL v82 = v78 != 0;
            int v83 = 1;
            do
            {
              --v75;
              if (v81) {
                v80 |= (unint64_t)(v83 & v48) << v79++;
              }
              else {
                unsigned int v75 = 0;
              }
              --v78;
              if (v82) {
                v80 |= (unint64_t)(v83 & v30) << v79++;
              }
              else {
                unsigned int v78 = 0;
              }
              v83 *= 2;
              --v79;
              BOOL v82 = v78 != 0;
              BOOL v81 = v75 != 0;
            }
            while (v78 | v75);
          }
          else
          {
            uint64_t v80 = 0;
          }
          int v85 = v54 < 0x10 || v55;
          unsigned int v86 = (unsigned __int8 *)(v153 + 8 * v80);
          unsigned int v84 = v52 - v16;
          uint64_t v87 = v154 + 16 * (v52 - v16);
          uint64_t v88 = (unsigned char *)(v152 + v72);
          if (v49 < 8) {
            int v89 = 1;
          }
          else {
            int v89 = v85;
          }
          __src = v88;
          if (v162)
          {
            if (!v89)
            {
              uint64_t v88 = __dst;
LABEL_123:
              float64x2_t v91 = (_OWORD *)(v154 + 16 * v84);
              uint64_t v92 = a11;
              uint64_t v93 = (uint64_t)v88;
              float64x2_t v94 = (unsigned __int8 *)(v153 + 8 * v80);
              goto LABEL_157;
            }
            char v90 = v54;
            memcpy(__dst, __src, sizeof(__dst));
            LOBYTE(v54) = v90;
            uint64_t v88 = __dst;
            LOBYTE(v49) = v158;
            uint64_t result = v157;
          }
          else if (!v89)
          {
            goto LABEL_123;
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE19ELj2ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = result;
          uint64_t v164 = v88;
          unsigned __int8 v172 = v54;
          unsigned __int8 v173 = v49;
          unsigned int v168 = v147;
          unsigned int v169 = v52 - v50;
          float64x2_t v165 = v86;
          uint64_t v166 = v87;
          uint64_t v167 = a11;
          unsigned int v170 = v155;
          unsigned int v171 = v53;
          if (v55)
          {
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(result + 8) + 7384), block);
            goto LABEL_158;
          }
          uint64_t v95 = (uint64_t)&v88[AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v175, 256, (uint64_t)v88, *v86)];
          uint64_t v96 = v95
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v176, 256, v95, v86[1]);
          uint64_t v97 = v96
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v179, 256, v96, v86[2]);
          uint64_t v98 = v97
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v180, 256, v97, v86[3]);
          uint64_t v99 = v98
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v177, 256, v98, v86[4]);
          uint64_t v100 = v99
               + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v178, 256, v99, v86[5]);
          uint64_t v101 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v181, 256, v100, v86[6]);
          AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v182, 256, v100 + v101, v86[7]);
          uint64_t v102 = v170;
          if (v170 && v171)
          {
            uint64_t v103 = 0;
            unint64_t v104 = (unint64_t)v168 << 8;
            uint64_t v105 = 16 * v169;
            unsigned int v106 = (char *)v175 + v104 + v105;
            uint64_t v107 = v166;
            uint64_t v108 = v167;
            unint64_t v109 = 16 * v171;
            if (v109 <= 1) {
              unint64_t v110 = 1;
            }
            else {
              unint64_t v110 = 16 * v171;
            }
            unint64_t v111 = v104 + v105;
            float64x2_t v112 = (char *)v175 + v104 + v105;
            if (v110) {
              BOOL v113 = (v110 - 1) >> 32 == 0;
            }
            else {
              BOOL v113 = 0;
            }
            char v114 = !v113;
            uint64_t v115 = v110 & 0xFFFFFFFE0;
            uint64_t v116 = v110 & 0xFFFFFFFF0;
            float64x2_t v117 = (char *)&v175[1] + v111;
            float64x2_t v118 = (long long *)(v166 + 16);
            float64x2_t v119 = v106;
            uint64_t v120 = v166;
            do
            {
              uint64_t v25 = (char *)(v107 + v108 * v103);
              unsigned int v26 = &v106[256 * v103];
              if ((unint64_t)(&v112[256 * v103] - v25) < 0x20) {
                char v121 = 1;
              }
              else {
                char v121 = v114;
              }
              if (v121)
              {
                int v122 = 0;
                goto LABEL_153;
              }
              if (v110 >= 0x20)
              {
                float64x2_t v128 = v118;
                float64x2_t v129 = v117;
                uint64_t v130 = v110 & 0xFFFFFFFE0;
                do
                {
                  long long v131 = *v128;
                  *(v129 - 1) = *(v128 - 1);
                  *float64x2_t v129 = v131;
                  v129 += 2;
                  v128 += 2;
                  v130 -= 32;
                }
                while (v130);
                if (v110 == v115) {
                  goto LABEL_136;
                }
                uint64_t v123 = v110 & 0xFFFFFFFE0;
                if ((v110 & 0x10) == 0)
                {
                  v25 += v115;
                  v26 += v115;
                  int v122 = v110 & 0xFFFFFFE0;
                  goto LABEL_153;
                }
              }
              else
              {
                uint64_t v123 = 0;
              }
              v26 += v116;
              unint64_t v124 = v123 - (v110 & 0xFFFFFFFF0);
              unsigned int v125 = (uint64_t *)(v120 + v123);
              uint64_t v126 = &v119[v123];
              do
              {
                uint64_t v127 = *v125++;
                *(void *)uint64_t v126 = v127;
                v126 += 8;
                v124 += 8;
              }
              while (v124);
              if (v110 == v116) {
                goto LABEL_136;
              }
              v25 += v116;
              int v122 = v110 & 0xFFFFFFF0;
LABEL_153:
              unsigned int v132 = v122 + 1;
              do
              {
                char v133 = *v25++;
                *v26++ = v133;
              }
              while (v109 > v132++);
LABEL_136:
              ++v103;
              v117 += 256;
              float64x2_t v118 = (long long *)((char *)v118 + v108);
              v120 += v108;
              v119 += 256;
            }
            while (v103 != v102);
          }
          uint64_t v93 = (uint64_t)v164;
          float64x2_t v94 = v165;
          unsigned int v54 = v172;
          unsigned int v49 = v173;
          float64x2_t v91 = v175;
          uint64_t v92 = 256;
LABEL_157:
          AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v91, v92, v93, v94, v54, v49, (uint64_t)v25, (uint64_t)v26);
LABEL_158:
          if (v162) {
            memcpy(__src, v88, 0x800uLL);
          }
          unsigned int v16 = v149;
          BOOL v31 = v48++ == v150 >> 4;
          uint64_t result = v157;
          unsigned int v49 = v158;
        }
        while (!v31);
        BOOL v31 = v30++ == v140;
      }
      while (!v31);
    }
  }
  return result;
}

uint64_t AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10, uint64_t a11, char a12)
{
  uint64_t v12 = MEMORY[0x270FA5388](a1);
  unsigned int v14 = v13;
  unsigned int v16 = v15;
  unsigned int v18 = v17;
  unsigned int v20 = v19;
  uint64_t v219 = v21;
  uint64_t v220 = v22;
  uint64_t v202 = v23;
  uint64_t v24 = v12;
  uint64_t v247 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(v12, 0);
  unsigned int v204 = v14 + a10 - 1;
  uint64_t v223 = v24;
  if (*(void *)(v24 + 168)) {
    int v25 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v25 = 0;
  }
  unsigned int v26 = v20 - 1;
  unsigned int v27 = v18 - 1;
  unsigned int v28 = v14 >> 3;
  unsigned int v203 = v204 >> 3;
  BOOL v29 = (v25 & 0xD00) == 0 || v25 == 768;
  int v30 = v25 & 0xE00;
  int v32 = !v29 && v30 != 1024;
  int v226 = v32;
  uint64_t result = v24;
  if (*(unsigned char *)(v24 + 232))
  {
    unsigned int v34 = *(unsigned __int8 *)(v24 + 255);
    unsigned int v35 = *(unsigned __int8 *)(v24 + 254);
    char v36 = __clz(v26);
    if (1 << v34 >= v18 || v20 >> v35)
    {
      if (!(v18 >> v34) && 1 << v35 < v20)
      {
        if (v18 < 2) {
          unsigned int v39 = 0;
        }
        else {
          unsigned int v39 = __clz(~(-1 << -(char)__clz(v27))) - 32;
        }
        v35 += v34 + v39;
        unsigned int v34 = -v39;
      }
    }
    else
    {
      unsigned int v37 = 32 - __clz(~(-1 << -v36));
      unsigned int v38 = v35 + v34;
      if (v20 < 2) {
        unsigned int v37 = 0;
      }
      unsigned int v34 = v38 - v37;
      unsigned int v35 = v37;
    }
    if (v20 < 2)
    {
      if (v35) {
        goto LABEL_27;
      }
    }
    else if (32 - __clz(~(-1 << -v36)) < v35)
    {
LABEL_27:
      BOOL v218 = 0;
LABEL_32:
      unsigned int v214 = v35 - 4;
      unsigned int v208 = v34 - 3;
      int v41 = -1 << *(unsigned char *)(*(void *)(v24 + 208) + 48);
      unsigned int v201 = (((~v41 + v20) & v41) + ~(-1 << v35)) >> v35;
      goto LABEL_33;
    }
    if (v18 < 2) {
      unsigned int v40 = 0;
    }
    else {
      unsigned int v40 = 32 - __clz(~(-1 << -(char)__clz(v27)));
    }
    BOOL v218 = v40 >= v34;
    goto LABEL_32;
  }
  BOOL v218 = 0;
  unsigned int v201 = 0;
  unsigned int v208 = 0;
  unsigned int v214 = 0;
LABEL_33:
  if (v28 <= v203)
  {
    unsigned int v217 = v16 + a9 - 1;
    unsigned int v200 = v16 >> 4;
    if (v16 >> 4 <= v217 >> 4)
    {
      unsigned int v225 = v26 >> 4;
      unsigned int v199 = v27 >> 3;
      int v224 = (v26 & 0xF) + 1;
      int v198 = (v27 & 7) + 1;
      int v197 = ~(-1 << v208);
      uint32x2_t v42 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(v20, v18), (int32x2_t)0xF00000007);
      int8x8_t v43 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32(vadd_s32((int32x2_t)vshl_u32(v42, (uint32x2_t)0xFFFFFFFCFFFFFFFDLL), (int32x2_t)-1))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x2000000010, v42));
      __int32 v212 = v43.i32[0] | v43.i32[1];
      int8x8_t v207 = v43;
      BOOL v205 = v43.i32[1] != 0;
      BOOL v206 = v43.i32[0] != 0;
      uint64_t v44 = a11;
      uint64_t v45 = 4 * a11;
      uint64_t v46 = 2 * a11;
      unsigned int v216 = v16;
      do
      {
        unsigned int v47 = (8 * v28) | 7;
        if (8 * v28 <= v14) {
          int v48 = v14;
        }
        else {
          int v48 = 8 * v28;
        }
        if (v204 < v47) {
          unsigned int v47 = v14 + a10 - 1;
        }
        int v213 = v48 - 8 * v28;
        int v222 = v47 - v48 + 1;
        unsigned int v49 = v200;
        if (v28 == v199) {
          unsigned int v50 = v198;
        }
        else {
          unsigned int v50 = 8;
        }
        int v51 = v28 & v197;
        uint64_t v221 = v202 + (v48 - v14) * v44;
        do
        {
          unsigned int v52 = 16 * v49;
          unsigned int v53 = 16 * (v49 + 1) - 1;
          if (16 * v49 <= v16) {
            int v54 = v16;
          }
          else {
            int v54 = 16 * v49;
          }
          if (v217 < v53) {
            unsigned int v53 = v217;
          }
          int v55 = v53 - v54 + 1;
          if (v49 == v225) {
            unsigned int v56 = v224;
          }
          else {
            unsigned int v56 = 16;
          }
          BOOL v57 = 1;
          if (8 * v28 >= v14 && v52 >= v16)
          {
            int v58 = v224;
            if (v49 != v225) {
              int v58 = 16;
            }
            BOOL v57 = v55 != v58 || v222 != v50;
          }
          if (v218)
          {
            if (v214 | v208)
            {
              int v60 = 0;
              uint64_t v61 = 0;
              BOOL v62 = v214 != 0;
              int v63 = 1;
              BOOL v65 = v208 != 0;
              unsigned int v64 = v208;
              unsigned int v66 = v214;
              do
              {
                --v64;
                if (v65) {
                  v61 |= (unint64_t)(v51 & v63) << v60++;
                }
                else {
                  unsigned int v64 = 0;
                }
                --v66;
                if (v62) {
                  v61 |= (unint64_t)(v49 & ~(-1 << v214) & v63) << v60++;
                }
                else {
                  unsigned int v66 = 0;
                }
                v63 *= 2;
                --v60;
                BOOL v62 = v66 != 0;
                BOOL v65 = v64 != 0;
              }
              while (v66 | v64);
            }
            else
            {
              uint64_t v61 = 0;
            }
            uint64_t v74 = *(void *)(result + 320) * ((v49 >> v214) + (v28 >> v208) * v201) + (v61 << 11);
          }
          else
          {
            if (v212)
            {
              int v67 = 0;
              uint64_t v68 = 0;
              int v69 = 1;
              BOOL v70 = v205;
              BOOL v71 = v206;
              __int32 v72 = v207.i32[0];
              __int32 v73 = v207.i32[1];
              do
              {
                --v72;
                if (v71) {
                  v68 |= (unint64_t)(v69 & v28) << v67++;
                }
                else {
                  __int32 v72 = 0;
                }
                --v73;
                if (v70) {
                  v68 |= (unint64_t)(v69 & v49) << v67++;
                }
                else {
                  __int32 v73 = 0;
                }
                v69 *= 2;
                --v67;
                BOOL v70 = v73 != 0;
                BOOL v71 = v72 != 0;
              }
              while (v73 | v72);
            }
            else
            {
              uint64_t v68 = 0;
            }
            uint64_t v74 = v68 << 11;
          }
          unsigned int v75 = *(_DWORD *)(result + 128) >> (*(unsigned char *)(result + 144) + a12);
          if (v75 <= 1) {
            unsigned int v75 = 1;
          }
          unsigned int v76 = v75 + 15;
          if (v76 < 0x20) {
            unsigned int v77 = 0;
          }
          else {
            unsigned int v77 = 32 - __clz(~(-1 << -(char)__clz((v76 >> 4) - 1)));
          }
          unsigned int v78 = *(_DWORD *)(result + 132) >> (*(unsigned char *)(result + 144) + a12);
          if (v78 <= 1) {
            unsigned int v78 = 1;
          }
          unsigned int v79 = v78 + 7;
          if (v79 < 0x10)
          {
            unsigned int v80 = 0;
            if (!v77)
            {
LABEL_110:
              uint64_t v82 = 0;
              goto LABEL_111;
            }
          }
          else
          {
            unsigned int v80 = 32 - __clz(~(-1 << -(char)__clz((v79 >> 3) - 1)));
            if (!(v80 | v77)) {
              goto LABEL_110;
            }
          }
          int v81 = 0;
          uint64_t v82 = 0;
          BOOL v83 = v77 != 0;
          BOOL v84 = v80 != 0;
          int v85 = 1;
          do
          {
            --v77;
            if (v83) {
              v82 |= (unint64_t)(v85 & v49) << v81++;
            }
            else {
              unsigned int v77 = 0;
            }
            --v80;
            if (v84) {
              v82 |= (unint64_t)(v85 & v28) << v81++;
            }
            else {
              unsigned int v80 = 0;
            }
            v85 *= 2;
            --v81;
            BOOL v84 = v80 != 0;
            BOOL v83 = v77 != 0;
          }
          while (v80 | v77);
LABEL_111:
          unsigned int v86 = v54 - v16;
          int v87 = v56 < 0x10 || v57;
          uint64_t v88 = (unsigned __int8 *)(v220 + 8 * v82);
          uint64_t v89 = v221 + 16 * v86;
          char v90 = (void *)(v219 + v74);
          if (v50 < 8) {
            int v91 = 1;
          }
          else {
            int v91 = v87;
          }
          if (v226)
          {
            if (v91)
            {
              int v209 = v55;
              BOOL v210 = v57;
              int v92 = v54;
              memcpy(__dst, v90, sizeof(__dst));
              int v54 = v92;
              int v55 = v209;
              BOOL v57 = v210;
              unsigned int v52 = 16 * v49;
              uint64_t v44 = a11;
              uint64_t v93 = __dst;
              uint64_t result = v223;
LABEL_121:
              float64x2_t v215 = v90;
              block[0] = MEMORY[0x263EF8330];
              block[1] = 3221225472;
              block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE19ELj2ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
              block[3] = &__block_descriptor_90_e5_v8__0l;
              block[4] = result;
              float64x2_t v228 = v93;
              unsigned __int8 v236 = v56;
              unsigned __int8 v237 = v50;
              unsigned int v232 = v213;
              unsigned int v233 = v54 - v52;
              float64x2_t v229 = v88;
              uint64_t v230 = v89;
              uint64_t v231 = v44;
              unsigned int v234 = v222;
              unsigned int v235 = v55;
              if (v57)
              {
                float64x2_t v94 = v93;
                dispatch_sync(*(dispatch_queue_t *)(*(void *)(result + 8) + 7384), block);
                uint64_t v93 = v94;
                uint64_t result = v223;
                unsigned int v16 = v216;
                uint64_t v46 = 2 * a11;
                uint64_t v45 = 4 * a11;
                unsigned int v95 = v49 + 1;
LABEL_123:
                char v90 = v215;
                goto LABEL_138;
              }
              float64x2_t v211 = v93;
              uint64_t v126 = (uint64_t)&v93[AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v239, 256, (uint64_t)v93, *v88)];
              uint64_t v127 = v126
                   + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v240, 256, v126, v88[1]);
              uint64_t v128 = v127
                   + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v243, 256, v127, v88[2]);
              uint64_t v129 = v128
                   + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v244, 256, v128, v88[3]);
              uint64_t v130 = v129
                   + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v241, 256, v129, v88[4]);
              uint64_t v131 = v130
                   + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v242, 256, v130, v88[5]);
              uint64_t v132 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v245, 256, v131, v88[6]);
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v246, 256, v131 + v132, v88[7]);
              uint64_t v133 = v234;
              if (!v234 || !v235)
              {
LABEL_172:
                uint64_t v168 = 0;
                unsigned int v169 = v228;
                unsigned int v170 = (char *)v229;
                int v171 = v236;
                int v172 = v237;
                unsigned int v16 = v216;
                uint64_t result = v223;
                uint64_t v46 = 2 * a11;
                uint64_t v45 = 4 * a11;
                unsigned int v95 = v49 + 1;
                uint64_t v93 = v211;
                do
                {
                  uint64_t v192 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,2u>::kSubblockPositions[v168 + 1];
                  uint64_t v193 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,2u>::kSubblockPositions[v168];
                  unsigned int v194 = (v171 - 4 * v193) & ~((v171 - 4 * (int)v193) >> 31);
                  if (v194 >= 4) {
                    unsigned int v194 = 4;
                  }
                  unsigned int v195 = (v172 - 4 * v192) & ~((v172 - 4 * (int)v192) >> 31);
                  if (v195 >= 4) {
                    unsigned int v195 = 4;
                  }
                  if (v194) {
                    BOOL v196 = v195 == 0;
                  }
                  else {
                    BOOL v196 = 1;
                  }
                  if (v196)
                  {
                    char v191 = 0;
                  }
                  else
                  {
                    unsigned __int8 v173 = &v239[64 * v192 + 4 * v193];
                    long long v174 = *v173;
                    long long v175 = v173[1];
                    long long v176 = v173[16];
                    long long v177 = v173[17];
                    long long v178 = v173[2];
                    long long v179 = v173[3];
                    long long v180 = v173[18];
                    long long v181 = v173[32];
                    long long v182 = v173[33];
                    long long v183 = v173[34];
                    long long v184 = v173[35];
                    long long v185 = v173[19];
                    v173 += 48;
                    long long v186 = *v173;
                    long long v187 = v173[1];
                    long long v188 = v173[2];
                    long long v189 = v173[3];
                    *unsigned int v169 = v174;
                    v169[1] = v175;
                    v169[2] = v176;
                    v169[3] = v177;
                    v169[4] = v178;
                    v169[5] = v179;
                    v169[6] = v180;
                    v169[7] = v185;
                    v169[8] = v181;
                    v169[9] = v182;
                    v169[10] = v186;
                    v169[11] = v187;
                    float64x2_t v190 = v169 + 12;
                    v169 += 16;
                    char v191 = -1;
                    *float64x2_t v190 = v183;
                    v190[1] = v184;
                    v190[2] = v188;
                    v190[3] = v189;
                  }
                  *v170++ = v191;
                  v168 += 2;
                }
                while (v168 != 16);
                goto LABEL_123;
              }
              uint64_t v134 = 0;
              unint64_t v135 = (unint64_t)v232 << 8;
              uint64_t v136 = 16 * v233;
              unsigned int v137 = (char *)v239 + v135 + v136;
              uint64_t v138 = v230;
              uint64_t v139 = v231;
              unint64_t v140 = 16 * v235;
              if (v140 <= 1) {
                unint64_t v141 = 1;
              }
              else {
                unint64_t v141 = 16 * v235;
              }
              unint64_t v142 = v135 + v136;
              BOOL v143 = (char *)v239 + v135 + v136;
              if (v141) {
                BOOL v144 = (v141 - 1) >> 32 == 0;
              }
              else {
                BOOL v144 = 0;
              }
              char v145 = !v144;
              uint64_t v146 = v141 & 0xFFFFFFFE0;
              uint64_t v147 = v141 & 0xFFFFFFFF0;
              unsigned int v148 = (char *)&v239[1] + v142;
              unsigned int v149 = (long long *)(v230 + 16);
              unsigned int v150 = v137;
              uint64_t v151 = v230;
              while (2)
              {
                uint64_t v152 = (char *)(v138 + v139 * v134);
                uint64_t v153 = &v137[256 * v134];
                if ((unint64_t)(&v143[256 * v134] - v152) < 0x20) {
                  char v154 = 1;
                }
                else {
                  char v154 = v145;
                }
                if (v154)
                {
                  int v155 = 0;
LABEL_169:
                  unsigned int v165 = v155 + 1;
                  do
                  {
                    char v166 = *v152++;
                    *v153++ = v166;
                  }
                  while (v140 > v165++);
                }
                else
                {
                  if (v141 >= 0x20)
                  {
                    float64x2_t v161 = v149;
                    int v162 = v148;
                    uint64_t v163 = v141 & 0xFFFFFFFE0;
                    do
                    {
                      long long v164 = *v161;
                      *(v162 - 1) = *(v161 - 1);
                      *int v162 = v164;
                      v162 += 2;
                      v161 += 2;
                      v163 -= 32;
                    }
                    while (v163);
                    if (v141 == v146) {
                      goto LABEL_152;
                    }
                    uint64_t v156 = v141 & 0xFFFFFFFE0;
                    if ((v141 & 0x10) == 0)
                    {
                      v152 += v146;
                      v153 += v146;
                      int v155 = v141 & 0xFFFFFFE0;
                      goto LABEL_169;
                    }
                  }
                  else
                  {
                    uint64_t v156 = 0;
                  }
                  v153 += v147;
                  unint64_t v157 = v156 - (v141 & 0xFFFFFFFF0);
                  unsigned int v158 = (uint64_t *)(v151 + v156);
                  int v159 = &v150[v156];
                  do
                  {
                    uint64_t v160 = *v158++;
                    *(void *)int v159 = v160;
                    v159 += 8;
                    v157 += 8;
                  }
                  while (v157);
                  if (v141 != v147)
                  {
                    v152 += v147;
                    int v155 = v141 & 0xFFFFFFF0;
                    goto LABEL_169;
                  }
                }
LABEL_152:
                ++v134;
                v148 += 256;
                unsigned int v149 = (long long *)((char *)v149 + v139);
                v151 += v139;
                v150 += 256;
                if (v134 == v133) {
                  goto LABEL_172;
                }
                continue;
              }
            }
            uint64_t v93 = __dst;
          }
          else
          {
            uint64_t v93 = v90;
            if (v91) {
              goto LABEL_121;
            }
          }
          uint64_t v96 = 0;
          uint64_t v97 = v93;
          do
          {
            uint64_t v121 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,2u>::kSubblockPositions[v96 + 1];
            uint64_t v122 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,2u>::kSubblockPositions[v96];
            unsigned int v123 = (v56 - 4 * v122) & ~((int)(v56 - 4 * v122) >> 31);
            if (v123 >= 4) {
              unsigned int v123 = 4;
            }
            unsigned int v124 = (v50 - 4 * v121) & ~((int)(v50 - 4 * v121) >> 31);
            if (v124 >= 4) {
              unsigned int v124 = 4;
            }
            if (v123) {
              BOOL v125 = v124 == 0;
            }
            else {
              BOOL v125 = 1;
            }
            if (v125)
            {
              char v120 = 0;
            }
            else
            {
              uint64_t v98 = (long long *)(v89 + v45 * v121 + (v122 << 6));
              uint64_t v99 = (long long *)((char *)v98 + v44);
              long long v101 = *v98;
              long long v102 = v98[1];
              long long v103 = v98[2];
              long long v104 = v98[3];
              uint64_t v100 = (long long *)((char *)v98 + v46);
              long long v105 = v103;
              long long v106 = v104;
              long long v108 = *v100;
              long long v109 = v100[1];
              long long v110 = v100[2];
              long long v111 = v100[3];
              uint64_t v107 = (long long *)((char *)v100 + v44);
              long long v112 = v99[2];
              long long v113 = v99[3];
              long long v114 = *v107;
              long long v115 = v107[1];
              long long v116 = *v99;
              long long v117 = v99[1];
              long long v118 = v107[2];
              long long v119 = v107[3];
              *uint64_t v97 = v101;
              v97[1] = v102;
              v97[2] = v116;
              v97[3] = v117;
              v97[4] = v105;
              v97[5] = v106;
              v97[6] = v112;
              v97[7] = v113;
              v97[8] = v108;
              v97[9] = v109;
              v97[10] = v114;
              v97[11] = v115;
              v97[12] = v110;
              v97[13] = v111;
              v97[14] = v118;
              v97[15] = v119;
              v97 += 16;
              char v120 = -1;
            }
            *v88++ = v120;
            v96 += 2;
          }
          while (v96 != 16);
          unsigned int v16 = v216;
          unsigned int v95 = v49 + 1;
LABEL_138:
          int v51 = v28 & v197;
          if (v226)
          {
            memcpy(v90, v93, 0x800uLL);
            uint64_t v46 = 2 * a11;
            uint64_t v45 = 4 * a11;
            uint64_t result = v223;
          }
          BOOL v29 = v49 == v217 >> 4;
          unsigned int v49 = v95;
        }
        while (!v29);
        BOOL v29 = v28++ == v203;
      }
      while (!v29);
    }
  }
  return result;
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10, uint64_t a11, int a12)
{
  uint64_t v12 = MEMORY[0x270FA5388](a1);
  unsigned int v14 = v13;
  unsigned int v16 = v15;
  unsigned int v18 = v17;
  unsigned int v20 = v19;
  uint64_t v155 = v21;
  uint64_t v156 = v22;
  uint64_t v145 = v23;
  uint64_t v24 = v12;
  uint64_t v186 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(v12, 0);
  uint64_t v25 = v24;
  unsigned int v160 = v14;
  unsigned int v26 = v14 >> 3;
  unsigned int v144 = v14 + a10 - 1;
  unsigned int v146 = v144 >> 3;
  unsigned int v27 = *(unsigned __int8 *)(*(void *)(v24 + 208) + 88);
  unsigned int v28 = *(_DWORD *)(v24 + 112);
  uint64_t v161 = v25;
  if (*(void *)(v25 + 168))
  {
    __int16 CacheMode = IOSurfaceGetCacheMode();
    uint64_t v25 = v161;
    int v30 = CacheMode & 0xF00;
  }
  else
  {
    int v30 = 0;
  }
  BOOL v31 = (v30 & 0xD00) == 0 || v30 == 768;
  int v32 = v30 & 0xE00;
  int v34 = !v31 && v32 != 1024;
  int v165 = v34;
  BOOL isLevelTiled = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::isLevelTiled(v25, *(_DWORD *)(v25 + 144) + a12);
  uint64_t v36 = v161;
  BOOL v154 = isLevelTiled;
  if (v26 <= v146)
  {
    unsigned int v153 = v16 + a9 - 1;
    unsigned int v143 = v16 >> 4;
    if (v16 >> 4 <= v153 >> 4)
    {
      unsigned int v140 = v20 - 1;
      unsigned int v142 = (v18 - 1) >> 3;
      int v163 = ((v20 - 1) & 0xF) + 1;
      unsigned int v164 = (v20 - 1) >> 4;
      int v141 = ((v18 - 1) & 7) + 1;
      uint32x2_t v37 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(v20, v18), (int32x2_t)0xF00000007);
      int8x8_t v38 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32(vadd_s32((int32x2_t)vshl_u32(v37, (uint32x2_t)0xFFFFFFFCFFFFFFFDLL), (int32x2_t)-1))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x2000000010, v37));
      __int32 v151 = v38.i32[0] | v38.i32[1];
      int8x8_t v150 = v38;
      BOOL v148 = v38.i32[1] != 0;
      BOOL v149 = v38.i32[0] != 0;
      unint64_t v139 = 8 * v28 * (unint64_t)v27;
      unsigned int v152 = v16;
      do
      {
        unsigned int v39 = (8 * v26) | 7;
        if (8 * v26 <= v160) {
          int v40 = v160;
        }
        else {
          int v40 = 8 * v26;
        }
        unsigned int v41 = v143;
        if (v144 < v39) {
          unsigned int v39 = v144;
        }
        int v147 = v40 - 8 * v26;
        int v158 = v39 - v40 + 1;
        unsigned int v159 = 8 * v26;
        if (v26 == v142) {
          unsigned int v42 = v141;
        }
        else {
          unsigned int v42 = 8;
        }
        uint64_t v157 = v145 + (v40 - v160) * a11;
        unsigned int v162 = v42;
        do
        {
          unsigned int v43 = 16 * v41;
          unsigned int v44 = 16 * (v41 + 1) - 1;
          if (16 * v41 <= v16) {
            int v45 = v16;
          }
          else {
            int v45 = 16 * v41;
          }
          if (v153 < v44) {
            unsigned int v44 = v153;
          }
          uint64_t v46 = v44 - v45 + 1;
          if (v41 == v164) {
            unsigned int v47 = v163;
          }
          else {
            unsigned int v47 = 16;
          }
          BOOL v48 = 1;
          if (v159 >= v160 && v43 >= v16)
          {
            int v49 = v163;
            if (v41 != v164) {
              int v49 = 16;
            }
            BOOL v48 = v46 != v49 || v158 != v42;
          }
          if (v154)
          {
            unsigned int v70 = 0;
            uint64_t v71 = v139 >> (*(unsigned char *)(v36 + 57) != 0);
            char v72 = 1;
            if (v71 > 127)
            {
              if (v71 > 511)
              {
                if (v71 == 512)
                {
                  char v73 = 0;
                  unsigned int v70 = 16;
                  unsigned int v74 = 16;
                }
                else
                {
                  char v73 = 1;
                  unsigned int v74 = 0;
                  if (v71 == 1024)
                  {
                    unsigned int v74 = 8;
                    unsigned int v70 = 16;
                  }
                }
              }
              else if (v71 == 128)
              {
                char v72 = 0;
                char v73 = 0;
                unsigned int v70 = 32;
                unsigned int v74 = 32;
              }
              else
              {
                char v73 = 1;
                unsigned int v74 = 0;
                if (v71 == 256)
                {
                  char v72 = 0;
                  char v73 = 0;
                  unsigned int v74 = 16;
                  unsigned int v70 = 32;
                }
              }
            }
            else
            {
              char v73 = 1;
              unsigned int v74 = 0;
              switch(v71)
              {
                case 4:
                  char v72 = 0;
                  char v73 = 0;
                  unsigned int v74 = 128;
                  unsigned int v70 = 256;
                  break;
                case 5:
                case 6:
                case 7:
                case 9:
                case 10:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 17:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                  break;
                case 8:
                  char v72 = 0;
                  char v73 = 0;
                  unsigned int v70 = 128;
                  unsigned int v74 = 128;
                  break;
                case 16:
                  char v72 = 0;
                  char v73 = 0;
                  unsigned int v74 = 64;
                  unsigned int v70 = 128;
                  break;
                case 32:
                  char v72 = 0;
                  char v73 = 0;
                  unsigned int v70 = 64;
                  unsigned int v74 = 64;
                  break;
                default:
                  if (v71 == 64)
                  {
                    char v72 = 0;
                    char v73 = 0;
                    unsigned int v74 = 32;
                    unsigned int v70 = 64;
                  }
                  break;
              }
            }
            unsigned int v128 = (v70 >> 4) - 1;
            if (v72) {
              unsigned int v129 = 0;
            }
            else {
              unsigned int v129 = 32 - __clz(~(-1 << -(char)__clz(v128)));
            }
            unsigned int v130 = (v74 >> 3) - 1;
            if (v73)
            {
              unsigned int v131 = 0;
              if (v129) {
                goto LABEL_149;
              }
            }
            else
            {
              unsigned int v131 = 32 - __clz(~(-1 << -(char)__clz(v130)));
              if (v131 | v129)
              {
LABEL_149:
                int v132 = 0;
                uint64_t v133 = 0;
                int v134 = v41 & v128;
                int v135 = v26 & v130;
                BOOL v136 = v131 != 0;
                BOOL v137 = v129 != 0;
                int v138 = 1;
                do
                {
                  --v131;
                  if (v136) {
                    v133 |= (unint64_t)(v138 & v135) << v132++;
                  }
                  else {
                    unsigned int v131 = 0;
                  }
                  --v129;
                  if (v137) {
                    v133 |= (unint64_t)(v138 & v134) << v132++;
                  }
                  else {
                    unsigned int v129 = 0;
                  }
                  v138 *= 2;
                  --v132;
                  BOOL v137 = v129 != 0;
                  BOOL v136 = v131 != 0;
                }
                while (v129 | v131);
                goto LABEL_161;
              }
            }
            uint64_t v133 = 0;
LABEL_161:
            unint64_t v58 = ((unint64_t)(v43 / v70 + v159 / v74 * ((v70 + v140) / v70)) << 14) + (v133 << 11);
            goto LABEL_59;
          }
          if (v151)
          {
            int v51 = 0;
            uint64_t v52 = 0;
            int v53 = 1;
            BOOL v54 = v148;
            BOOL v55 = v149;
            __int32 v56 = v150.i32[0];
            __int32 v57 = v150.i32[1];
            do
            {
              --v56;
              if (v55) {
                v52 |= (unint64_t)(v53 & v26) << v51++;
              }
              else {
                __int32 v56 = 0;
              }
              --v57;
              if (v54) {
                v52 |= (unint64_t)(v53 & v41) << v51++;
              }
              else {
                __int32 v57 = 0;
              }
              v53 *= 2;
              --v51;
              BOOL v54 = v57 != 0;
              BOOL v55 = v56 != 0;
            }
            while (v57 | v56);
          }
          else
          {
            uint64_t v52 = 0;
          }
          unint64_t v58 = v52 << 11;
LABEL_59:
          unsigned int v59 = *(_DWORD *)(v36 + 128) >> (*(unsigned char *)(v36 + 144) + a12);
          if (v59 <= 1) {
            unsigned int v59 = 1;
          }
          unsigned int v60 = v59 + 15;
          if (v60 < 0x20) {
            unsigned int v61 = 0;
          }
          else {
            unsigned int v61 = 32 - __clz(~(-1 << -(char)__clz((v60 >> 4) - 1)));
          }
          unsigned int v62 = *(_DWORD *)(v36 + 132) >> (*(unsigned char *)(v36 + 144) + a12);
          if (v62 <= 1) {
            unsigned int v62 = 1;
          }
          unsigned int v63 = v62 + 7;
          if (v63 < 0x10)
          {
            unsigned int v64 = 0;
            if (!v61)
            {
LABEL_81:
              uint64_t v66 = 0;
              goto LABEL_82;
            }
          }
          else
          {
            unsigned int v64 = 32 - __clz(~(-1 << -(char)__clz((v63 >> 3) - 1)));
            if (!(v64 | v61)) {
              goto LABEL_81;
            }
          }
          int v65 = 0;
          uint64_t v66 = 0;
          BOOL v67 = v61 != 0;
          BOOL v68 = v64 != 0;
          int v69 = 1;
          do
          {
            --v61;
            if (v67) {
              v66 |= (unint64_t)(v69 & v41) << v65++;
            }
            else {
              unsigned int v61 = 0;
            }
            --v64;
            if (v68) {
              v66 |= (unint64_t)(v69 & v26) << v65++;
            }
            else {
              unsigned int v64 = 0;
            }
            v69 *= 2;
            --v65;
            BOOL v68 = v64 != 0;
            BOOL v67 = v61 != 0;
          }
          while (v64 | v61);
LABEL_82:
          int v75 = v47 < 0x10 || v48;
          unsigned int v76 = (unsigned __int8 *)(v156 + 8 * v66);
          unint64_t v77 = v157 + 16 * (v45 - v16);
          unsigned int v78 = (void *)(v155 + v58);
          if (v42 < 8) {
            int v79 = 1;
          }
          else {
            int v79 = v75;
          }
          if (v165)
          {
            if (!v79)
            {
              int v85 = __dst;
LABEL_95:
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock(v77, a11, (uint64_t)v85, v76, v47, v42, v46, v48);
              unsigned int v16 = v152;
              goto LABEL_129;
            }
            unsigned int v80 = v78;
            char v81 = v47;
            int v82 = v46;
            BOOL v83 = v78;
            BOOL v84 = v48;
            memcpy(__dst, v80, sizeof(__dst));
            LODWORD(v48) = v84;
            unsigned int v78 = v83;
            LODWORD(v46) = v82;
            LOBYTE(v47) = v81;
            unsigned int v43 = 16 * v41;
            int v85 = __dst;
            LOBYTE(v42) = v162;
            uint64_t v36 = v161;
          }
          else
          {
            int v85 = v78;
            if (!v79) {
              goto LABEL_95;
            }
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE19ELj2ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = v36;
          uint64_t v167 = v85;
          unsigned __int8 v175 = v47;
          unsigned __int8 v176 = v42;
          unsigned int v171 = v147;
          unsigned int v172 = v45 - v43;
          uint64_t v168 = v76;
          unint64_t v169 = v77;
          uint64_t v170 = a11;
          unsigned int v173 = v158;
          unsigned int v174 = v46;
          if (v48)
          {
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(v36 + 8) + 7384), block);
            unsigned int v16 = v152;
            goto LABEL_129;
          }
          uint64_t v86 = (uint64_t)&v85[AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v178, 256, (uint64_t)v85, *v76)];
          uint64_t v87 = v86
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v179, 256, v86, v76[1]);
          uint64_t v88 = v87
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v182, 256, v87, v76[2]);
          uint64_t v89 = v88
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v183, 256, v88, v76[3]);
          uint64_t v90 = v89
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v180, 256, v89, v76[4]);
          uint64_t v91 = v90
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v181, 256, v90, v76[5]);
          uint64_t v92 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v184, 256, v91, v76[6]);
          AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v185, 256, v91 + v92, v76[7]);
          uint64_t v95 = v173;
          unsigned int v16 = v152;
          if (v173 && v174)
          {
            uint64_t v96 = 0;
            unint64_t v97 = (unint64_t)v171 << 8;
            uint64_t v98 = 16 * v172;
            uint64_t v99 = (char *)v178 + v97 + v98;
            unint64_t v100 = v169;
            uint64_t v101 = v170;
            unint64_t v102 = 16 * v174;
            if (v102 <= 1) {
              unint64_t v103 = 1;
            }
            else {
              unint64_t v103 = 16 * v174;
            }
            unint64_t v104 = v97 + v98;
            long long v105 = (char *)v178 + v97 + v98;
            if (v103) {
              BOOL v106 = (v103 - 1) >> 32 == 0;
            }
            else {
              BOOL v106 = 0;
            }
            char v107 = !v106;
            uint64_t v108 = v103 & 0xFFFFFFFE0;
            uint64_t v109 = v103 & 0xFFFFFFFF0;
            long long v110 = (char *)&v178[1] + v104;
            long long v111 = (long long *)(v169 + 16);
            long long v112 = v99;
            unint64_t v113 = v169;
            do
            {
              uint64_t v93 = (char *)(v100 + v101 * v96);
              float64x2_t v94 = &v99[256 * v96];
              if ((unint64_t)(&v105[256 * v96] - v93) < 0x20) {
                char v114 = 1;
              }
              else {
                char v114 = v107;
              }
              if (v114)
              {
                int v115 = 0;
                goto LABEL_125;
              }
              if (v103 >= 0x20)
              {
                uint64_t v121 = v111;
                uint64_t v122 = v110;
                uint64_t v123 = v103 & 0xFFFFFFFE0;
                do
                {
                  long long v124 = *v121;
                  *(v122 - 1) = *(v121 - 1);
                  *uint64_t v122 = v124;
                  v122 += 2;
                  v121 += 2;
                  v123 -= 32;
                }
                while (v123);
                if (v103 == v108) {
                  goto LABEL_108;
                }
                uint64_t v116 = v103 & 0xFFFFFFFE0;
                if ((v103 & 0x10) == 0)
                {
                  v93 += v108;
                  v94 += v108;
                  int v115 = v103 & 0xFFFFFFE0;
                  goto LABEL_125;
                }
              }
              else
              {
                uint64_t v116 = 0;
              }
              v94 += v109;
              unint64_t v117 = v116 - (v103 & 0xFFFFFFFF0);
              long long v118 = (uint64_t *)(v113 + v116);
              long long v119 = &v112[v116];
              do
              {
                uint64_t v120 = *v118++;
                *(void *)long long v119 = v120;
                v119 += 8;
                v117 += 8;
              }
              while (v117);
              if (v103 == v109) {
                goto LABEL_108;
              }
              v93 += v109;
              int v115 = v103 & 0xFFFFFFF0;
LABEL_125:
              unsigned int v125 = v115 + 1;
              do
              {
                char v126 = *v93++;
                *v94++ = v126;
              }
              while (v102 > v125++);
LABEL_108:
              ++v96;
              v110 += 256;
              long long v111 = (long long *)((char *)v111 + v101);
              v113 += v101;
              v112 += 256;
            }
            while (v96 != v95);
          }
          AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v178, 256, (uint64_t)v167, v168, v175, v176, (uint64_t)v93, (uint64_t)v94);
LABEL_129:
          if (v165) {
            memcpy(v78, v85, 0x800uLL);
          }
          BOOL v31 = v41++ == v153 >> 4;
          uint64_t v36 = v161;
          unsigned int v42 = v162;
        }
        while (!v31);
        BOOL v31 = v26++ == v146;
      }
      while (!v31);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10, uint64_t a11, int a12)
{
  uint64_t v12 = MEMORY[0x270FA5388](a1);
  unsigned int v14 = v13;
  unsigned int v16 = v15;
  unsigned int v18 = v17;
  unsigned int v20 = v19;
  uint64_t v219 = v21;
  uint64_t v220 = v22;
  uint64_t v205 = v23;
  uint64_t v24 = v12;
  uint64_t v249 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(v12, 0);
  unsigned int v224 = v14;
  unsigned int v25 = v14 >> 3;
  unsigned int v204 = v14 + a10 - 1;
  unsigned int v206 = v204 >> 3;
  unsigned int v26 = *(unsigned __int8 *)(*(void *)(v24 + 208) + 88);
  unsigned int v27 = *(_DWORD *)(v24 + 112);
  uint64_t v225 = v24;
  if (*(void *)(v24 + 168)) {
    int v28 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v28 = 0;
  }
  BOOL v29 = (v28 & 0xD00) == 0 || v28 == 768;
  int v30 = v28 & 0xE00;
  int v32 = !v29 && v30 != 1024;
  int v228 = v32;
  BOOL isLevelTiled = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::isLevelTiled(v24, *(_DWORD *)(v24 + 144) + a12);
  uint64_t v34 = v24;
  BOOL v218 = isLevelTiled;
  if (v25 <= v206)
  {
    unsigned int v217 = v16 + a9 - 1;
    unsigned int v203 = v16 >> 4;
    if (v16 >> 4 <= v217 >> 4)
    {
      unsigned int v200 = v20 - 1;
      unsigned int v227 = (v20 - 1) >> 4;
      int v226 = ((v20 - 1) & 0xF) + 1;
      int v201 = ((v18 - 1) & 7) + 1;
      unsigned int v202 = (v18 - 1) >> 3;
      uint32x2_t v35 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(v20, v18), (int32x2_t)0xF00000007);
      int8x8_t v36 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32(vadd_s32((int32x2_t)vshl_u32(v35, (uint32x2_t)0xFFFFFFFCFFFFFFFDLL), (int32x2_t)-1))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x2000000010, v35));
      __int32 v215 = v36.i32[0] | v36.i32[1];
      int8x8_t v213 = v36;
      BOOL v211 = v36.i32[1] != 0;
      BOOL v212 = v36.i32[0] != 0;
      uint64_t v37 = a11;
      unint64_t v199 = 8 * v27 * (unint64_t)v26;
      uint64_t v38 = 4 * a11;
      uint64_t v39 = 2 * a11;
      unsigned int v216 = v16;
      do
      {
        unsigned int v40 = (8 * v25) | 7;
        if (8 * v25 <= v224) {
          int v41 = v224;
        }
        else {
          int v41 = 8 * v25;
        }
        unsigned int v42 = v203;
        if (v204 < v40) {
          unsigned int v40 = v204;
        }
        int v210 = v41 - 8 * v25;
        int v222 = v40 - v41 + 1;
        unsigned int v223 = 8 * v25;
        if (v25 == v202) {
          unsigned int v43 = v201;
        }
        else {
          unsigned int v43 = 8;
        }
        uint64_t v221 = v205 + (v41 - v224) * v37;
        unsigned int v207 = v43;
        do
        {
          unsigned int v44 = 16 * v42;
          unsigned int v45 = 16 * (v42 + 1) - 1;
          if (16 * v42 <= v16) {
            int v46 = v16;
          }
          else {
            int v46 = 16 * v42;
          }
          if (v217 < v45) {
            unsigned int v45 = v217;
          }
          int v47 = v45 - v46 + 1;
          if (v42 == v227) {
            unsigned int v48 = v226;
          }
          else {
            unsigned int v48 = 16;
          }
          BOOL v49 = 1;
          if (v223 >= v224 && v44 >= v16)
          {
            int v50 = v226;
            if (v42 != v227) {
              int v50 = 16;
            }
            BOOL v49 = v47 != v50 || v222 != v43;
          }
          if (v218)
          {
            unsigned int v71 = 0;
            uint64_t v72 = v199 >> (*(unsigned char *)(v34 + 57) != 0);
            char v73 = 1;
            if (v72 > 127)
            {
              if (v72 > 511)
              {
                if (v72 == 512)
                {
                  char v74 = 0;
                  unsigned int v71 = 16;
                  unsigned int v75 = 16;
                }
                else
                {
                  char v74 = 1;
                  unsigned int v75 = 0;
                  if (v72 == 1024)
                  {
                    unsigned int v75 = 8;
                    unsigned int v71 = 16;
                  }
                }
              }
              else if (v72 == 128)
              {
                char v73 = 0;
                char v74 = 0;
                unsigned int v71 = 32;
                unsigned int v75 = 32;
              }
              else
              {
                char v74 = 1;
                unsigned int v75 = 0;
                if (v72 == 256)
                {
                  char v73 = 0;
                  char v74 = 0;
                  unsigned int v75 = 16;
                  unsigned int v71 = 32;
                }
              }
            }
            else
            {
              char v74 = 1;
              unsigned int v75 = 0;
              switch(v72)
              {
                case 4:
                  char v73 = 0;
                  char v74 = 0;
                  unsigned int v75 = 128;
                  unsigned int v71 = 256;
                  break;
                case 5:
                case 6:
                case 7:
                case 9:
                case 10:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 17:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                  break;
                case 8:
                  char v73 = 0;
                  char v74 = 0;
                  unsigned int v71 = 128;
                  unsigned int v75 = 128;
                  break;
                case 16:
                  char v73 = 0;
                  char v74 = 0;
                  unsigned int v75 = 64;
                  unsigned int v71 = 128;
                  break;
                case 32:
                  char v73 = 0;
                  char v74 = 0;
                  unsigned int v71 = 64;
                  unsigned int v75 = 64;
                  break;
                default:
                  if (v72 == 64)
                  {
                    char v73 = 0;
                    char v74 = 0;
                    unsigned int v75 = 32;
                    unsigned int v71 = 64;
                  }
                  break;
              }
            }
            unsigned int v188 = (v71 >> 4) - 1;
            if (v73) {
              unsigned int v189 = 0;
            }
            else {
              unsigned int v189 = 32 - __clz(~(-1 << -(char)__clz(v188)));
            }
            unsigned int v190 = (v75 >> 3) - 1;
            if (v74)
            {
              unsigned int v191 = 0;
              if (v189) {
                goto LABEL_174;
              }
            }
            else
            {
              unsigned int v191 = 32 - __clz(~(-1 << -(char)__clz(v190)));
              if (v191 | v189)
              {
LABEL_174:
                int v192 = 0;
                uint64_t v193 = 0;
                int v194 = v42 & v188;
                int v195 = v25 & v190;
                BOOL v196 = v191 != 0;
                BOOL v197 = v189 != 0;
                int v198 = 1;
                do
                {
                  --v191;
                  if (v196) {
                    v193 |= (unint64_t)(v198 & v195) << v192++;
                  }
                  else {
                    unsigned int v191 = 0;
                  }
                  --v189;
                  if (v197) {
                    v193 |= (unint64_t)(v198 & v194) << v192++;
                  }
                  else {
                    unsigned int v189 = 0;
                  }
                  v198 *= 2;
                  --v192;
                  BOOL v197 = v189 != 0;
                  BOOL v196 = v191 != 0;
                }
                while (v189 | v191);
                goto LABEL_186;
              }
            }
            uint64_t v193 = 0;
LABEL_186:
            unint64_t v59 = ((unint64_t)(v44 / v71 + v223 / v75 * ((v71 + v200) / v71)) << 14) + (v193 << 11);
            goto LABEL_59;
          }
          if (v215)
          {
            int v52 = 0;
            uint64_t v53 = 0;
            int v54 = 1;
            BOOL v55 = v211;
            BOOL v56 = v212;
            __int32 v57 = v213.i32[0];
            __int32 v58 = v213.i32[1];
            do
            {
              --v57;
              if (v56) {
                v53 |= (unint64_t)(v54 & v25) << v52++;
              }
              else {
                __int32 v57 = 0;
              }
              --v58;
              if (v55) {
                v53 |= (unint64_t)(v54 & v42) << v52++;
              }
              else {
                __int32 v58 = 0;
              }
              v54 *= 2;
              --v52;
              BOOL v55 = v58 != 0;
              BOOL v56 = v57 != 0;
            }
            while (v58 | v57);
          }
          else
          {
            uint64_t v53 = 0;
          }
          unint64_t v59 = v53 << 11;
LABEL_59:
          unsigned int v60 = *(_DWORD *)(v34 + 128) >> (*(unsigned char *)(v34 + 144) + a12);
          if (v60 <= 1) {
            unsigned int v60 = 1;
          }
          unsigned int v61 = v60 + 15;
          if (v61 < 0x20) {
            unsigned int v62 = 0;
          }
          else {
            unsigned int v62 = 32 - __clz(~(-1 << -(char)__clz((v61 >> 4) - 1)));
          }
          unsigned int v63 = *(_DWORD *)(v34 + 132) >> (*(unsigned char *)(v34 + 144) + a12);
          if (v63 <= 1) {
            unsigned int v63 = 1;
          }
          unsigned int v64 = v63 + 7;
          if (v64 < 0x10)
          {
            unsigned int v65 = 0;
            if (!v62)
            {
LABEL_81:
              uint64_t v67 = 0;
              goto LABEL_82;
            }
          }
          else
          {
            unsigned int v65 = 32 - __clz(~(-1 << -(char)__clz((v64 >> 3) - 1)));
            if (!(v65 | v62)) {
              goto LABEL_81;
            }
          }
          int v66 = 0;
          uint64_t v67 = 0;
          BOOL v68 = v62 != 0;
          BOOL v69 = v65 != 0;
          int v70 = 1;
          do
          {
            --v62;
            if (v68) {
              v67 |= (unint64_t)(v70 & v42) << v66++;
            }
            else {
              unsigned int v62 = 0;
            }
            --v65;
            if (v69) {
              v67 |= (unint64_t)(v70 & v25) << v66++;
            }
            else {
              unsigned int v65 = 0;
            }
            v70 *= 2;
            --v66;
            BOOL v69 = v65 != 0;
            BOOL v68 = v62 != 0;
          }
          while (v65 | v62);
LABEL_82:
          unsigned int v76 = v46 - v16;
          int v77 = v48 < 0x10 || v49;
          unsigned int v78 = (unsigned __int8 *)(v220 + 8 * v67);
          uint64_t v79 = v221 + 16 * v76;
          unsigned int v80 = (void *)(v219 + v59);
          if (v43 < 8) {
            int v81 = 1;
          }
          else {
            int v81 = v77;
          }
          if (v228)
          {
            if (!v81)
            {
              int v85 = __dst;
LABEL_96:
              uint64_t v87 = 0;
              uint64_t v88 = v85;
              do
              {
                uint64_t v112 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,2u>::kSubblockPositions[v87 + 1];
                uint64_t v113 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,2u>::kSubblockPositions[v87];
                unsigned int v114 = (v48 - 4 * v113) & ~((int)(v48 - 4 * v113) >> 31);
                if (v114 >= 4) {
                  unsigned int v114 = 4;
                }
                unsigned int v115 = (v43 - 4 * v112) & ~((int)(v43 - 4 * v112) >> 31);
                if (v115 >= 4) {
                  unsigned int v115 = 4;
                }
                if (v114) {
                  BOOL v116 = v115 == 0;
                }
                else {
                  BOOL v116 = 1;
                }
                if (v116)
                {
                  char v111 = 0;
                }
                else
                {
                  uint64_t v89 = (long long *)(v79 + v38 * v112 + (v113 << 6));
                  uint64_t v90 = (long long *)((char *)v89 + v37);
                  long long v92 = *v89;
                  long long v93 = v89[1];
                  long long v94 = v89[2];
                  long long v95 = v89[3];
                  uint64_t v91 = (long long *)((char *)v89 + v39);
                  long long v96 = v94;
                  long long v97 = v95;
                  long long v99 = *v91;
                  long long v100 = v91[1];
                  long long v101 = v91[2];
                  long long v102 = v91[3];
                  uint64_t v98 = (long long *)((char *)v91 + v37);
                  long long v103 = v90[2];
                  long long v104 = v90[3];
                  long long v105 = *v98;
                  long long v106 = v98[1];
                  long long v107 = *v90;
                  long long v108 = v90[1];
                  long long v109 = v98[2];
                  long long v110 = v98[3];
                  *uint64_t v88 = v92;
                  v88[1] = v93;
                  v88[2] = v107;
                  v88[3] = v108;
                  v88[4] = v96;
                  v88[5] = v97;
                  v88[6] = v103;
                  v88[7] = v104;
                  v88[8] = v99;
                  v88[9] = v100;
                  v88[10] = v105;
                  v88[11] = v106;
                  v88[12] = v101;
                  v88[13] = v102;
                  v88[14] = v109;
                  v88[15] = v110;
                  v88 += 16;
                  char v111 = -1;
                }
                *v78++ = v111;
                v87 += 2;
              }
              while (v87 != 16);
              unsigned int v16 = v216;
              if (v228) {
                goto LABEL_155;
              }
              goto LABEL_27;
            }
            int v82 = v80;
            int v208 = v46;
            int v83 = v47;
            BOOL v84 = v49;
            memcpy(__dst, v80, sizeof(__dst));
            int v85 = __dst;
            unsigned int v80 = v82;
            BOOL v49 = v84;
            unsigned int v44 = 16 * v42;
            uint64_t v37 = a11;
            int v47 = v83;
            unsigned int v43 = v207;
            int v46 = v208;
            uint64_t v34 = v225;
          }
          else
          {
            int v85 = v80;
            if (!v81) {
              goto LABEL_96;
            }
          }
          unsigned int v214 = v80;
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE19ELj2ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = v34;
          uint64_t v230 = v85;
          unsigned __int8 v238 = v48;
          unsigned __int8 v239 = v43;
          unsigned int v234 = v210;
          unsigned int v235 = v46 - v44;
          uint64_t v231 = v78;
          uint64_t v232 = v79;
          uint64_t v233 = v37;
          unsigned int v236 = v222;
          unsigned int v237 = v47;
          if (v49)
          {
            uint64_t v86 = v85;
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(v34 + 8) + 7384), block);
            int v85 = v86;
            uint64_t v34 = v225;
            unsigned int v16 = v216;
            uint64_t v39 = 2 * a11;
            uint64_t v38 = 4 * a11;
            unsigned int v80 = v214;
            if (!v228) {
              goto LABEL_27;
            }
LABEL_155:
            memcpy(v80, v85, 0x800uLL);
            uint64_t v39 = 2 * a11;
            uint64_t v38 = 4 * a11;
            uint64_t v34 = v225;
            goto LABEL_27;
          }
          int v209 = v85;
          uint64_t v117 = (uint64_t)&v85[AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v241, 256, (uint64_t)v85, *v78)];
          uint64_t v118 = v117
               + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v242, 256, v117, v78[1]);
          uint64_t v119 = v118
               + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v245, 256, v118, v78[2]);
          uint64_t v120 = v119
               + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v246, 256, v119, v78[3]);
          uint64_t v121 = v120
               + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v243, 256, v120, v78[4]);
          uint64_t v122 = v121
               + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v244, 256, v121, v78[5]);
          uint64_t v123 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v247, 256, v122, v78[6]);
          AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v248, 256, v122 + v123, v78[7]);
          uint64_t v124 = v236;
          if (v236 && v237)
          {
            uint64_t v125 = 0;
            unint64_t v126 = (unint64_t)v234 << 8;
            uint64_t v127 = 16 * v235;
            unsigned int v128 = (char *)v241 + v126 + v127;
            uint64_t v129 = v232;
            uint64_t v130 = v233;
            unint64_t v131 = 16 * v237;
            if (v131 <= 1) {
              unint64_t v132 = 1;
            }
            else {
              unint64_t v132 = 16 * v237;
            }
            unint64_t v133 = v126 + v127;
            int v134 = (char *)v241 + v126 + v127;
            if (v132) {
              BOOL v135 = (v132 - 1) >> 32 == 0;
            }
            else {
              BOOL v135 = 0;
            }
            char v136 = !v135;
            uint64_t v137 = v132 & 0xFFFFFFFE0;
            uint64_t v138 = v132 & 0xFFFFFFFF0;
            unint64_t v139 = (char *)&v241[1] + v133;
            unsigned int v140 = (long long *)(v232 + 16);
            int v141 = v128;
            uint64_t v142 = v232;
            do
            {
              unsigned int v143 = (char *)(v129 + v130 * v125);
              unsigned int v144 = &v128[256 * v125];
              if ((unint64_t)(&v134[256 * v125] - v143) < 0x20) {
                char v145 = 1;
              }
              else {
                char v145 = v136;
              }
              if (v145)
              {
                int v146 = 0;
                goto LABEL_139;
              }
              if (v132 >= 0x20)
              {
                unsigned int v152 = v140;
                unsigned int v153 = v139;
                uint64_t v154 = v132 & 0xFFFFFFFE0;
                do
                {
                  long long v155 = *v152;
                  *(v153 - 1) = *(v152 - 1);
                  *unsigned int v153 = v155;
                  v153 += 2;
                  v152 += 2;
                  v154 -= 32;
                }
                while (v154);
                if (v132 == v137) {
                  goto LABEL_122;
                }
                uint64_t v147 = v132 & 0xFFFFFFFE0;
                if ((v132 & 0x10) == 0)
                {
                  v143 += v137;
                  v144 += v137;
                  int v146 = v132 & 0xFFFFFFE0;
                  goto LABEL_139;
                }
              }
              else
              {
                uint64_t v147 = 0;
              }
              v144 += v138;
              unint64_t v148 = v147 - (v132 & 0xFFFFFFFF0);
              BOOL v149 = (uint64_t *)(v142 + v147);
              int8x8_t v150 = &v141[v147];
              do
              {
                uint64_t v151 = *v149++;
                *(void *)int8x8_t v150 = v151;
                v150 += 8;
                v148 += 8;
              }
              while (v148);
              if (v132 == v138) {
                goto LABEL_122;
              }
              v143 += v138;
              int v146 = v132 & 0xFFFFFFF0;
LABEL_139:
              unsigned int v156 = v146 + 1;
              do
              {
                char v157 = *v143++;
                *v144++ = v157;
              }
              while (v131 > v156++);
LABEL_122:
              ++v125;
              v139 += 256;
              unsigned int v140 = (long long *)((char *)v140 + v130);
              v142 += v130;
              v141 += 256;
            }
            while (v125 != v124);
          }
          uint64_t v159 = 0;
          unsigned int v160 = v230;
          uint64_t v161 = (char *)v231;
          int v162 = v238;
          int v163 = v239;
          unsigned int v16 = v216;
          uint64_t v34 = v225;
          uint64_t v39 = 2 * a11;
          uint64_t v38 = 4 * a11;
          unsigned int v80 = v214;
          do
          {
            uint64_t v183 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,2u>::kSubblockPositions[v159 + 1];
            uint64_t v184 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,2u>::kSubblockPositions[v159];
            unsigned int v185 = (v162 - 4 * v184) & ~((v162 - 4 * (int)v184) >> 31);
            if (v185 >= 4) {
              unsigned int v185 = 4;
            }
            unsigned int v186 = (v163 - 4 * v183) & ~((v163 - 4 * (int)v183) >> 31);
            if (v186 >= 4) {
              unsigned int v186 = 4;
            }
            if (v185) {
              BOOL v187 = v186 == 0;
            }
            else {
              BOOL v187 = 1;
            }
            if (v187)
            {
              char v182 = 0;
            }
            else
            {
              unsigned int v164 = &v241[64 * v183 + 4 * v184];
              long long v165 = *v164;
              long long v166 = v164[1];
              long long v167 = v164[16];
              long long v168 = v164[17];
              long long v169 = v164[2];
              long long v170 = v164[3];
              long long v171 = v164[18];
              long long v172 = v164[32];
              long long v173 = v164[33];
              long long v174 = v164[34];
              long long v175 = v164[35];
              long long v176 = v164[19];
              v164 += 48;
              long long v177 = *v164;
              long long v178 = v164[1];
              long long v179 = v164[2];
              long long v180 = v164[3];
              *unsigned int v160 = v165;
              v160[1] = v166;
              v160[2] = v167;
              v160[3] = v168;
              v160[4] = v169;
              v160[5] = v170;
              v160[6] = v171;
              v160[7] = v176;
              v160[8] = v172;
              v160[9] = v173;
              v160[10] = v177;
              v160[11] = v178;
              long long v181 = v160 + 12;
              v160 += 16;
              char v182 = -1;
              *long long v181 = v174;
              v181[1] = v175;
              v181[2] = v179;
              v181[3] = v180;
            }
            *v161++ = v182;
            v159 += 2;
          }
          while (v159 != 16);
          int v85 = v209;
          if (v228) {
            goto LABEL_155;
          }
LABEL_27:
          BOOL v29 = v42++ == v217 >> 4;
        }
        while (!v29);
        BOOL v29 = v25++ == v206;
      }
      while (!v29);
    }
  }
}

uint64_t AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, char a12)
{
  uint64_t v249 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v198 = a8;
  unsigned int v182 = a8 + a10 - 1;
  uint64_t v199 = a1;
  if (*(void *)(a1 + 168)) {
    int v17 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v17 = 0;
  }
  unsigned int v18 = a5 - 1;
  unsigned int v19 = a6 - 1;
  unsigned int v20 = a8 >> 3;
  unsigned int v181 = v182 >> 3;
  BOOL v21 = (v17 & 0xD00) == 0 || v17 == 768;
  int v22 = v17 & 0xE00;
  int v24 = !v21 && v22 != 1024;
  int v203 = v24;
  uint64_t result = a1;
  if (*(unsigned char *)(a1 + 232))
  {
    unsigned int v26 = *(unsigned __int8 *)(a1 + 255);
    unsigned int v27 = *(unsigned __int8 *)(a1 + 254);
    char v28 = __clz(v18);
    if (1 << v26 >= a6 || a5 >> v27)
    {
      if (!(a6 >> v26) && 1 << v27 < a5)
      {
        if (a6 < 2) {
          unsigned int v31 = 0;
        }
        else {
          unsigned int v31 = __clz(~(-1 << -(char)__clz(v19))) - 32;
        }
        v27 += v26 + v31;
        unsigned int v26 = -v31;
      }
    }
    else
    {
      unsigned int v29 = 32 - __clz(~(-1 << -v28));
      unsigned int v30 = v27 + v26;
      if (a5 < 2) {
        unsigned int v29 = 0;
      }
      unsigned int v26 = v30 - v29;
      unsigned int v27 = v29;
    }
    if (a5 < 2)
    {
      if (v27) {
        goto LABEL_27;
      }
    }
    else if (32 - __clz(~(-1 << -v28)) < v27)
    {
LABEL_27:
      BOOL v193 = 0;
LABEL_32:
      unsigned int v190 = v27 - 4;
      unsigned int v186 = v26 - 3;
      int v33 = -1 << *(unsigned char *)(*(void *)(a1 + 208) + 48);
      unsigned int v179 = (((~v33 + a5) & v33) + ~(-1 << v27)) >> v27;
      goto LABEL_33;
    }
    if (a6 < 2) {
      unsigned int v32 = 0;
    }
    else {
      unsigned int v32 = 32 - __clz(~(-1 << -(char)__clz(v19)));
    }
    BOOL v193 = v32 >= v26;
    goto LABEL_32;
  }
  BOOL v193 = 0;
  unsigned int v179 = 0;
  unsigned int v186 = 0;
  unsigned int v190 = 0;
LABEL_33:
  if (v20 <= v181)
  {
    unsigned int v192 = a7 + a9 - 1;
    unsigned int v178 = a7 >> 4;
    if (a7 >> 4 <= v192 >> 4)
    {
      unsigned int v201 = v18 >> 4;
      unsigned int v177 = v19 >> 3;
      int v200 = (v18 & 0xF) + 1;
      int v176 = (v19 & 7) + 1;
      uint32x2_t v34 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0xF00000007);
      int8x8_t v35 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32(vadd_s32((int32x2_t)vshl_u32(v34, (uint32x2_t)0xFFFFFFFCFFFFFFFDLL), (int32x2_t)-1))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x2000000010, v34));
      __int32 v188 = v35.i32[0] | v35.i32[1];
      int8x8_t v185 = v35;
      BOOL v184 = v35.i32[0] != 0;
      BOOL v183 = v35.i32[1] != 0;
      unsigned int v191 = a7;
      do
      {
        unsigned int v36 = (8 * v20) | 7;
        if (8 * v20 <= v198) {
          int v37 = v198;
        }
        else {
          int v37 = 8 * v20;
        }
        if (v182 < v36) {
          unsigned int v36 = v182;
        }
        int v189 = v37 - 8 * v20;
        int v197 = v36 - v37 + 1;
        unsigned int v38 = v178;
        int v39 = v176;
        if (v20 != v177) {
          int v39 = 8;
        }
        unsigned int v204 = v39;
        uint64_t v40 = v20 & ~(-1 << v186);
        uint64_t v196 = a3 + (v37 - v198) * a11;
        do
        {
          unsigned int v41 = 16 * v38;
          unsigned int v42 = 16 * (v38 + 1) - 1;
          if (16 * v38 <= a7) {
            int v43 = a7;
          }
          else {
            int v43 = 16 * v38;
          }
          if (v192 < v42) {
            unsigned int v42 = v192;
          }
          int v44 = v42 - v43 + 1;
          if (v38 == v201) {
            unsigned int v45 = v200;
          }
          else {
            unsigned int v45 = 16;
          }
          BOOL v46 = 1;
          if (8 * v20 >= v198 && v41 >= a7)
          {
            int v47 = v200;
            if (v38 != v201) {
              int v47 = 16;
            }
            BOOL v46 = v44 != v47 || v197 != v204;
          }
          if (v193)
          {
            if (v190 | v186)
            {
              int v49 = 0;
              uint64_t v50 = 0;
              int v51 = 1;
              BOOL v52 = v186 != 0;
              BOOL v53 = v190 != 0;
              unsigned int v54 = v186;
              unsigned int v55 = v190;
              do
              {
                --v54;
                if (v52) {
                  v50 |= (unint64_t)(v40 & v51) << v49++;
                }
                else {
                  unsigned int v54 = 0;
                }
                --v55;
                if (v53) {
                  v50 |= (unint64_t)(v38 & ~(-1 << v190) & v51) << v49++;
                }
                else {
                  unsigned int v55 = 0;
                }
                v51 *= 2;
                --v49;
                BOOL v53 = v55 != 0;
                BOOL v52 = v54 != 0;
              }
              while (v55 | v54);
            }
            else
            {
              uint64_t v50 = 0;
            }
            uint64_t v63 = *(void *)(result + 320) * ((v38 >> v190) + (v20 >> v186) * v179) + (v50 << 9);
          }
          else
          {
            if (v188)
            {
              int v56 = 0;
              uint64_t v57 = 0;
              int v58 = 1;
              BOOL v59 = v184;
              BOOL v60 = v183;
              __int32 v61 = v185.i32[0];
              __int32 v62 = v185.i32[1];
              do
              {
                --v61;
                if (v59) {
                  v57 |= (unint64_t)(v58 & v20) << v56++;
                }
                else {
                  __int32 v61 = 0;
                }
                --v62;
                if (v60) {
                  v57 |= (unint64_t)(v58 & v38) << v56++;
                }
                else {
                  __int32 v62 = 0;
                }
                v58 *= 2;
                --v56;
                BOOL v60 = v62 != 0;
                BOOL v59 = v61 != 0;
              }
              while (v62 | v61);
            }
            else
            {
              uint64_t v57 = 0;
            }
            uint64_t v63 = v57 << 9;
          }
          unsigned int v64 = *(_DWORD *)(result + 128) >> (*(unsigned char *)(result + 144) + a12);
          if (v64 <= 1) {
            unsigned int v64 = 1;
          }
          unsigned int v65 = v64 + 15;
          if (v65 < 0x20) {
            unsigned int v66 = 0;
          }
          else {
            unsigned int v66 = 32 - __clz(~(-1 << -(char)__clz((v65 >> 4) - 1)));
          }
          unsigned int v67 = *(_DWORD *)(result + 132) >> (*(unsigned char *)(result + 144) + a12);
          if (v67 <= 1) {
            unsigned int v67 = 1;
          }
          unsigned int v68 = v67 + 7;
          if (v68 < 0x10)
          {
            unsigned int v69 = 0;
            if (!v66)
            {
LABEL_109:
              uint64_t v71 = 0;
              goto LABEL_110;
            }
          }
          else
          {
            unsigned int v69 = 32 - __clz(~(-1 << -(char)__clz((v68 >> 3) - 1)));
            if (!(v69 | v66)) {
              goto LABEL_109;
            }
          }
          int v70 = 0;
          uint64_t v71 = 0;
          BOOL v72 = v66 != 0;
          BOOL v73 = v69 != 0;
          int v74 = 1;
          do
          {
            --v66;
            if (v72) {
              v71 |= (unint64_t)(v74 & v38) << v70++;
            }
            else {
              unsigned int v66 = 0;
            }
            --v69;
            if (v73) {
              v71 |= (unint64_t)(v74 & v20) << v70++;
            }
            else {
              unsigned int v69 = 0;
            }
            v74 *= 2;
            --v70;
            BOOL v73 = v69 != 0;
            BOOL v72 = v66 != 0;
          }
          while (v69 | v66);
LABEL_110:
          unsigned int v75 = v43 - a7;
          int v76 = v45 < 0x10 || v46;
          int v77 = (char *)(a4 + 8 * v71);
          unint64_t v78 = v196 + 4 * v75;
          uint64_t v79 = (void *)(a2 + v63);
          if (v204 < 8) {
            int v80 = 1;
          }
          else {
            int v80 = v76;
          }
          unsigned int v202 = v79;
          if (v203)
          {
            int v81 = __dst;
            if (!v80) {
              goto LABEL_122;
            }
            BOOL v187 = (char *)(a4 + 8 * v71);
            int v82 = v44;
            char v83 = v45;
            uint64_t v84 = v40;
            BOOL v85 = v46;
            memcpy(__dst, v79, sizeof(__dst));
            BOOL v46 = v85;
            uint64_t v40 = v84;
            LOBYTE(v45) = v83;
            int v44 = v82;
            int v77 = v187;
            uint64_t result = v199;
          }
          else
          {
            int v81 = v79;
            if (!v80)
            {
LABEL_122:
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock(v78, a11, (unint64_t)v81, v77, v45, v204);
              a7 = v191;
              goto LABEL_217;
            }
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE10ELj2ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = result;
          unsigned int v206 = v81;
          unsigned __int8 v214 = v45;
          unsigned __int8 v215 = v204;
          unsigned int v210 = v189;
          unsigned int v211 = v43 - v41;
          unsigned int v207 = v77;
          unint64_t v208 = v78;
          uint64_t v209 = a11;
          unsigned int v212 = v197;
          unsigned int v213 = v44;
          if (v46)
          {
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(result + 8) + 7384), block);
            a7 = v191;
            goto LABEL_217;
          }
          unsigned int v86 = *v77;
          if (v86 == 63)
          {
            int64x2_t v89 = *((int64x2_t *)v81 + 1);
            uint64_t v90 = (const double *)(v81 + 32);
            float64x2x2_t v250 = vld2q_f64(v90);
            int64x2_t v91 = vzip2q_s64(*(int64x2_t *)v81, v89);
            int64x2_t v217 = vzip1q_s64(*(int64x2_t *)v81, v89);
            int64x2_t v221 = v91;
            float64x2_t v225 = v250.val[0];
            float64x2_t v229 = v250.val[1];
            uint64_t v87 = 64;
          }
          else if (v86 == 1)
          {
            int16x8_t v88 = vld1q_dup_s16((const __int16 *)v81);
            int64x2_t v217 = (int64x2_t)v88;
            int64x2_t v221 = (int64x2_t)v88;
            float64x2_t v225 = (float64x2_t)v88;
            float64x2_t v229 = (float64x2_t)v88;
            uint64_t v87 = 2;
          }
          else if (*v77)
          {
            uint64_t v87 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v217, 64, (uint64_t)v81, v86);
          }
          else
          {
            uint64_t v87 = 0;
            int64x2_t v217 = 0uLL;
            int64x2_t v221 = 0uLL;
            float64x2_t v225 = 0uLL;
            float64x2_t v229 = 0uLL;
          }
          uint64_t v92 = (uint64_t)&v81[v87];
          unsigned int v93 = v77[1];
          if (v93 == 63)
          {
            int64x2_t v96 = *(int64x2_t *)(v92 + 16);
            long long v97 = (const double *)(v92 + 32);
            float64x2x2_t v251 = vld2q_f64(v97);
            int64x2_t v98 = vzip2q_s64(*(int64x2_t *)v92, v96);
            int64x2_t v218 = vzip1q_s64(*(int64x2_t *)v92, v96);
            int64x2_t v222 = v98;
            float64x2_t v226 = v251.val[0];
            float64x2_t v230 = v251.val[1];
            uint64_t v94 = 64;
          }
          else if (v93 == 1)
          {
            int16x8_t v95 = vld1q_dup_s16((const __int16 *)v92);
            int64x2_t v218 = (int64x2_t)v95;
            int64x2_t v222 = (int64x2_t)v95;
            float64x2_t v226 = (float64x2_t)v95;
            float64x2_t v230 = (float64x2_t)v95;
            uint64_t v94 = 2;
          }
          else if (v77[1])
          {
            uint64_t v94 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v218, 64, v92, v93);
          }
          else
          {
            uint64_t v94 = 0;
            int64x2_t v218 = 0uLL;
            int64x2_t v222 = 0uLL;
            float64x2_t v226 = 0uLL;
            float64x2_t v230 = 0uLL;
          }
          uint64_t v99 = v92 + v94;
          unsigned int v100 = v77[2];
          if (v100 == 63)
          {
            int64x2_t v103 = *(int64x2_t *)(v99 + 16);
            long long v104 = (const double *)(v99 + 32);
            float64x2x2_t v252 = vld2q_f64(v104);
            int64x2_t v105 = vzip2q_s64(*(int64x2_t *)v99, v103);
            int64x2_t v233 = vzip1q_s64(*(int64x2_t *)v99, v103);
            int64x2_t v237 = v105;
            float64x2_t v241 = v252.val[0];
            float64x2_t v245 = v252.val[1];
            uint64_t v101 = 64;
          }
          else if (v100 == 1)
          {
            int16x8_t v102 = vld1q_dup_s16((const __int16 *)v99);
            int64x2_t v233 = (int64x2_t)v102;
            int64x2_t v237 = (int64x2_t)v102;
            float64x2_t v241 = (float64x2_t)v102;
            float64x2_t v245 = (float64x2_t)v102;
            uint64_t v101 = 2;
          }
          else if (v77[2])
          {
            uint64_t v101 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v233, 64, v99, v100);
          }
          else
          {
            uint64_t v101 = 0;
            int64x2_t v233 = 0uLL;
            int64x2_t v237 = 0uLL;
            float64x2_t v241 = 0uLL;
            float64x2_t v245 = 0uLL;
          }
          uint64_t v106 = v99 + v101;
          unsigned int v107 = v77[3];
          if (v107 == 63)
          {
            int64x2_t v110 = *(int64x2_t *)(v106 + 16);
            char v111 = (const double *)(v106 + 32);
            float64x2x2_t v253 = vld2q_f64(v111);
            int64x2_t v112 = vzip2q_s64(*(int64x2_t *)v106, v110);
            int64x2_t v234 = vzip1q_s64(*(int64x2_t *)v106, v110);
            int64x2_t v238 = v112;
            float64x2_t v242 = v253.val[0];
            float64x2_t v246 = v253.val[1];
            uint64_t v108 = 64;
          }
          else if (v107 == 1)
          {
            int16x8_t v109 = vld1q_dup_s16((const __int16 *)v106);
            int64x2_t v234 = (int64x2_t)v109;
            int64x2_t v238 = (int64x2_t)v109;
            float64x2_t v242 = (float64x2_t)v109;
            float64x2_t v246 = (float64x2_t)v109;
            uint64_t v108 = 2;
          }
          else if (v77[3])
          {
            uint64_t v108 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v234, 64, v106, v107);
          }
          else
          {
            uint64_t v108 = 0;
            int64x2_t v234 = 0uLL;
            int64x2_t v238 = 0uLL;
            float64x2_t v242 = 0uLL;
            float64x2_t v246 = 0uLL;
          }
          uint64_t v113 = v106 + v108;
          unsigned int v114 = v77[4];
          if (v114 == 63)
          {
            int64x2_t v117 = *(int64x2_t *)(v113 + 16);
            uint64_t v118 = (const double *)(v113 + 32);
            float64x2x2_t v254 = vld2q_f64(v118);
            int64x2_t v119 = vzip2q_s64(*(int64x2_t *)v113, v117);
            int64x2_t v219 = vzip1q_s64(*(int64x2_t *)v113, v117);
            int64x2_t v223 = v119;
            float64x2_t v227 = v254.val[0];
            float64x2_t v231 = v254.val[1];
            uint64_t v115 = 64;
          }
          else if (v114 == 1)
          {
            int16x8_t v116 = vld1q_dup_s16((const __int16 *)v113);
            int64x2_t v219 = (int64x2_t)v116;
            int64x2_t v223 = (int64x2_t)v116;
            float64x2_t v227 = (float64x2_t)v116;
            float64x2_t v231 = (float64x2_t)v116;
            uint64_t v115 = 2;
          }
          else if (v77[4])
          {
            uint64_t v115 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v219, 64, v113, v114);
          }
          else
          {
            uint64_t v115 = 0;
            int64x2_t v219 = 0uLL;
            int64x2_t v223 = 0uLL;
            float64x2_t v227 = 0uLL;
            float64x2_t v231 = 0uLL;
          }
          uint64_t v120 = v113 + v115;
          unsigned int v121 = v77[5];
          if (v121 == 63)
          {
            int64x2_t v124 = *(int64x2_t *)(v120 + 16);
            uint64_t v125 = (const double *)(v120 + 32);
            float64x2x2_t v255 = vld2q_f64(v125);
            int64x2_t v126 = vzip2q_s64(*(int64x2_t *)v120, v124);
            int64x2_t v220 = vzip1q_s64(*(int64x2_t *)v120, v124);
            int64x2_t v224 = v126;
            float64x2_t v228 = v255.val[0];
            float64x2_t v232 = v255.val[1];
            uint64_t v122 = 64;
          }
          else if (v121 == 1)
          {
            int16x8_t v123 = vld1q_dup_s16((const __int16 *)v120);
            int64x2_t v220 = (int64x2_t)v123;
            int64x2_t v224 = (int64x2_t)v123;
            float64x2_t v228 = (float64x2_t)v123;
            float64x2_t v232 = (float64x2_t)v123;
            uint64_t v122 = 2;
          }
          else if (v77[5])
          {
            uint64_t v122 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v220, 64, v120, v121);
          }
          else
          {
            uint64_t v122 = 0;
            int64x2_t v220 = 0uLL;
            int64x2_t v224 = 0uLL;
            float64x2_t v228 = 0uLL;
            float64x2_t v232 = 0uLL;
          }
          uint64_t v127 = v120 + v122;
          unsigned int v128 = v77[6];
          if (v128 == 63)
          {
            int64x2_t v131 = *(int64x2_t *)(v127 + 16);
            unint64_t v132 = (const double *)(v127 + 32);
            float64x2x2_t v256 = vld2q_f64(v132);
            int64x2_t v133 = vzip2q_s64(*(int64x2_t *)v127, v131);
            int64x2_t v235 = vzip1q_s64(*(int64x2_t *)v127, v131);
            int64x2_t v239 = v133;
            float64x2_t v243 = v256.val[0];
            float64x2_t v247 = v256.val[1];
            uint64_t v129 = 64;
          }
          else if (v128 == 1)
          {
            int16x8_t v130 = vld1q_dup_s16((const __int16 *)v127);
            int64x2_t v235 = (int64x2_t)v130;
            int64x2_t v239 = (int64x2_t)v130;
            float64x2_t v243 = (float64x2_t)v130;
            float64x2_t v247 = (float64x2_t)v130;
            uint64_t v129 = 2;
          }
          else if (v77[6])
          {
            uint64_t v129 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v235, 64, v127, v128);
          }
          else
          {
            uint64_t v129 = 0;
            int64x2_t v235 = 0uLL;
            int64x2_t v239 = 0uLL;
            float64x2_t v243 = 0uLL;
            float64x2_t v247 = 0uLL;
          }
          uint64_t v134 = v127 + v129;
          unsigned int v135 = v77[7];
          if (v135 == 63)
          {
            int64x2_t v138 = *(int64x2_t *)(v134 + 16);
            unint64_t v139 = (const double *)(v134 + 32);
            float64x2x2_t v257 = vld2q_f64(v139);
            int64x2_t v140 = vzip2q_s64(*(int64x2_t *)v134, v138);
            int64x2_t v236 = vzip1q_s64(*(int64x2_t *)v134, v138);
            int64x2_t v240 = v140;
            float64x2_t v244 = v257.val[0];
            float64x2_t v248 = v257.val[1];
            a7 = v191;
            uint64_t v136 = v212;
            if (!v212) {
              goto LABEL_216;
            }
          }
          else
          {
            a7 = v191;
            if (v135 == 1)
            {
              int16x8_t v137 = vld1q_dup_s16((const __int16 *)v134);
              int64x2_t v236 = (int64x2_t)v137;
              int64x2_t v240 = (int64x2_t)v137;
              float64x2_t v244 = (float64x2_t)v137;
              float64x2_t v248 = (float64x2_t)v137;
              uint64_t v136 = v212;
              if (!v212) {
                goto LABEL_216;
              }
            }
            else if (v135)
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v236, 64, v134, v135);
              uint64_t v136 = v212;
              if (!v212) {
                goto LABEL_216;
              }
            }
            else
            {
              int64x2_t v236 = 0uLL;
              int64x2_t v240 = 0uLL;
              float64x2_t v244 = 0uLL;
              float64x2_t v248 = 0uLL;
              uint64_t v136 = v212;
              if (!v212) {
                goto LABEL_216;
              }
            }
          }
          if (v213)
          {
            uint64_t v141 = 0;
            unint64_t v142 = (unint64_t)v210 << 6;
            uint64_t v143 = 4 * v211;
            unsigned int v144 = &v217.i8[v142 + v143];
            unint64_t v145 = v208;
            uint64_t v146 = v209;
            unint64_t v147 = 4 * v213;
            if (v147 <= 1) {
              unint64_t v148 = 1;
            }
            else {
              unint64_t v148 = 4 * v213;
            }
            unint64_t v149 = v142 + v143;
            int8x8_t v150 = &v217.i8[v142 + v143];
            if (v148) {
              BOOL v151 = (v148 - 1) >> 32 == 0;
            }
            else {
              BOOL v151 = 0;
            }
            uint64_t v152 = v148 & 0x3FFFFFFE0;
            uint64_t v153 = v148 & 0x3FFFFFFF8;
            char v155 = !v151 || v148 < 8;
            unsigned int v156 = &v218.i8[v149];
            char v157 = (long long *)(v208 + 16);
            int v158 = v144;
            unint64_t v159 = v208;
            do
            {
              unsigned int v160 = (char *)(v145 + v146 * v141);
              uint64_t v161 = &v144[64 * v141];
              if ((unint64_t)(&v150[64 * v141] - v160) < 0x20) {
                char v162 = 1;
              }
              else {
                char v162 = v155;
              }
              if (v162)
              {
                int v163 = 0;
                goto LABEL_213;
              }
              if (v148 >= 0x20)
              {
                long long v165 = v157;
                long long v166 = v156;
                uint64_t v167 = v148 & 0x3FFFFFFE0;
                do
                {
                  long long v168 = *v165;
                  *((_OWORD *)v166 - 1) = *(v165 - 1);
                  *(_OWORD *)long long v166 = v168;
                  v166 += 32;
                  v165 += 2;
                  v167 -= 32;
                }
                while (v167);
                if (v148 == v152) {
                  goto LABEL_196;
                }
                uint64_t v164 = v148 & 0x3FFFFFFE0;
                if ((v148 & 0x18) == 0)
                {
                  v160 += v152;
                  v161 += v152;
                  int v163 = v148 & 0xFFFFFFE0;
                  goto LABEL_213;
                }
              }
              else
              {
                uint64_t v164 = 0;
              }
              v161 += v153;
              uint64_t v169 = v164 - v153;
              long long v170 = (uint64_t *)(v159 + v164);
              long long v171 = &v158[v164];
              do
              {
                uint64_t v172 = *v170++;
                *(void *)long long v171 = v172;
                v171 += 8;
                v169 += 8;
              }
              while (v169);
              if (v148 == v153) {
                goto LABEL_196;
              }
              v160 += v153;
              int v163 = v148 & 0xFFFFFFF8;
LABEL_213:
              unsigned int v173 = v163 + 1;
              do
              {
                char v174 = *v160++;
                *v161++ = v174;
              }
              while (v147 > v173++);
LABEL_196:
              ++v141;
              v156 += 64;
              char v157 = (long long *)((char *)v157 + v146);
              v159 += v146;
              v158 += 64;
            }
            while (v141 != v136);
          }
LABEL_216:
          AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)&v217, 64, (unint64_t)v206, v207, v214, v215);
LABEL_217:
          if (v203) {
            memcpy(v202, v81, 0x200uLL);
          }
          BOOL v21 = v38++ == v192 >> 4;
          uint64_t result = v199;
        }
        while (!v21);
        BOOL v21 = v20++ == v181;
      }
      while (!v21);
    }
  }
  return result;
}

uint64_t AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, char a12)
{
  uint64_t v281 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v215 = a8 + a10 - 1;
  uint64_t v233 = a1;
  if (*(void *)(a1 + 168)) {
    int v17 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v17 = 0;
  }
  unsigned int v18 = a5 - 1;
  unsigned int v19 = a6 - 1;
  unsigned int v20 = a8 >> 3;
  unsigned int v214 = v215 >> 3;
  BOOL v21 = (v17 & 0xD00) == 0 || v17 == 768;
  int v22 = v17 & 0xE00;
  int v24 = !v21 && v22 != 1024;
  int v236 = v24;
  uint64_t result = a1;
  if (*(unsigned char *)(a1 + 232))
  {
    unsigned int v26 = *(unsigned __int8 *)(a1 + 255);
    unsigned int v27 = *(unsigned __int8 *)(a1 + 254);
    char v28 = __clz(v18);
    if (1 << v26 >= a6 || a5 >> v27)
    {
      if (!(a6 >> v26) && 1 << v27 < a5)
      {
        if (a6 < 2) {
          unsigned int v31 = 0;
        }
        else {
          unsigned int v31 = __clz(~(-1 << -(char)__clz(v19))) - 32;
        }
        v27 += v26 + v31;
        unsigned int v26 = -v31;
      }
    }
    else
    {
      unsigned int v29 = 32 - __clz(~(-1 << -v28));
      unsigned int v30 = v27 + v26;
      if (a5 < 2) {
        unsigned int v29 = 0;
      }
      unsigned int v26 = v30 - v29;
      unsigned int v27 = v29;
    }
    if (a5 < 2)
    {
      if (v27) {
        goto LABEL_27;
      }
    }
    else if (32 - __clz(~(-1 << -v28)) < v27)
    {
LABEL_27:
      BOOL v228 = 0;
LABEL_32:
      unsigned int v224 = v27 - 4;
      unsigned int v220 = v26 - 3;
      int v33 = -1 << *(unsigned char *)(*(void *)(a1 + 208) + 48);
      unsigned int v212 = (((~v33 + a5) & v33) + ~(-1 << v27)) >> v27;
      goto LABEL_33;
    }
    if (a6 < 2) {
      unsigned int v32 = 0;
    }
    else {
      unsigned int v32 = 32 - __clz(~(-1 << -(char)__clz(v19)));
    }
    BOOL v228 = v32 >= v26;
    goto LABEL_32;
  }
  BOOL v228 = 0;
  unsigned int v212 = 0;
  unsigned int v220 = 0;
  unsigned int v224 = 0;
LABEL_33:
  if (v20 <= v214)
  {
    unsigned int v227 = a7 + a9 - 1;
    unsigned int v211 = a7 >> 4;
    if (a7 >> 4 <= v227 >> 4)
    {
      unsigned int v235 = v18 >> 4;
      unsigned int v210 = v19 >> 3;
      int v234 = (v18 & 0xF) + 1;
      int v209 = (v19 & 7) + 1;
      int v208 = ~(-1 << v220);
      uint32x2_t v34 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0xF00000007);
      int8x8_t v35 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32(vadd_s32((int32x2_t)vshl_u32(v34, (uint32x2_t)0xFFFFFFFCFFFFFFFDLL), (int32x2_t)-1))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x2000000010, v34));
      __int32 v222 = v35.i32[0] | v35.i32[1];
      int8x8_t v219 = v35;
      BOOL v218 = v35.i32[0] != 0;
      BOOL v217 = v35.i32[1] != 0;
      uint64_t v36 = a11;
      unsigned int v226 = a7;
      do
      {
        unsigned int v37 = (8 * v20) | 7;
        if (8 * v20 <= a8) {
          int v38 = a8;
        }
        else {
          int v38 = 8 * v20;
        }
        if (v215 < v37) {
          unsigned int v37 = a8 + a10 - 1;
        }
        int v223 = v38 - 8 * v20;
        int v232 = v37 - v38 + 1;
        unsigned int v39 = v211;
        if (v20 == v210) {
          unsigned int v40 = v209;
        }
        else {
          unsigned int v40 = 8;
        }
        int v41 = v20 & v208;
        uint64_t v231 = a3 + (v38 - a8) * v36;
        unsigned int v216 = v40;
        do
        {
          unsigned int v42 = 16 * v39;
          unsigned int v43 = 16 * (v39 + 1) - 1;
          if (16 * v39 <= a7) {
            int v44 = a7;
          }
          else {
            int v44 = 16 * v39;
          }
          if (v227 < v43) {
            unsigned int v43 = v227;
          }
          int v45 = v43 - v44 + 1;
          if (v39 == v235) {
            unsigned int v46 = v234;
          }
          else {
            unsigned int v46 = 16;
          }
          BOOL v47 = 1;
          if (8 * v20 >= a8 && v42 >= a7)
          {
            int v48 = v234;
            if (v39 != v235) {
              int v48 = 16;
            }
            BOOL v47 = v45 != v48 || v232 != v40;
          }
          if (v228)
          {
            if (v224 | v220)
            {
              int v50 = 0;
              uint64_t v51 = 0;
              int v52 = 1;
              BOOL v53 = v220 != 0;
              BOOL v54 = v224 != 0;
              unsigned int v55 = v220;
              unsigned int v56 = v224;
              do
              {
                --v55;
                if (v53) {
                  v51 |= (unint64_t)(v41 & v52) << v50++;
                }
                else {
                  unsigned int v55 = 0;
                }
                --v56;
                if (v54) {
                  v51 |= (unint64_t)(v39 & ~(-1 << v224) & v52) << v50++;
                }
                else {
                  unsigned int v56 = 0;
                }
                v52 *= 2;
                --v50;
                BOOL v54 = v56 != 0;
                BOOL v53 = v55 != 0;
              }
              while (v56 | v55);
            }
            else
            {
              uint64_t v51 = 0;
            }
            uint64_t v64 = *(void *)(result + 320) * ((v39 >> v224) + (v20 >> v220) * v212) + (v51 << 9);
          }
          else
          {
            if (v222)
            {
              int v57 = 0;
              uint64_t v58 = 0;
              int v59 = 1;
              BOOL v60 = v218;
              BOOL v61 = v217;
              __int32 v62 = v219.i32[0];
              __int32 v63 = v219.i32[1];
              do
              {
                --v62;
                if (v60) {
                  v58 |= (unint64_t)(v59 & v20) << v57++;
                }
                else {
                  __int32 v62 = 0;
                }
                --v63;
                if (v61) {
                  v58 |= (unint64_t)(v59 & v39) << v57++;
                }
                else {
                  __int32 v63 = 0;
                }
                v59 *= 2;
                --v57;
                BOOL v61 = v63 != 0;
                BOOL v60 = v62 != 0;
              }
              while (v63 | v62);
            }
            else
            {
              uint64_t v58 = 0;
            }
            uint64_t v64 = v58 << 9;
          }
          unsigned int v65 = *(_DWORD *)(result + 128) >> (*(unsigned char *)(result + 144) + a12);
          if (v65 <= 1) {
            unsigned int v65 = 1;
          }
          unsigned int v66 = v65 + 15;
          if (v66 < 0x20) {
            unsigned int v67 = 0;
          }
          else {
            unsigned int v67 = 32 - __clz(~(-1 << -(char)__clz((v66 >> 4) - 1)));
          }
          unsigned int v68 = *(_DWORD *)(result + 132) >> (*(unsigned char *)(result + 144) + a12);
          if (v68 <= 1) {
            unsigned int v68 = 1;
          }
          unsigned int v69 = v68 + 7;
          if (v69 < 0x10)
          {
            unsigned int v70 = 0;
            if (!v67)
            {
LABEL_110:
              uint64_t v72 = 0;
              goto LABEL_111;
            }
          }
          else
          {
            unsigned int v70 = 32 - __clz(~(-1 << -(char)__clz((v69 >> 3) - 1)));
            if (!(v70 | v67)) {
              goto LABEL_110;
            }
          }
          int v71 = 0;
          uint64_t v72 = 0;
          BOOL v73 = v67 != 0;
          BOOL v74 = v70 != 0;
          int v75 = 1;
          do
          {
            --v67;
            if (v73) {
              v72 |= (unint64_t)(v75 & v39) << v71++;
            }
            else {
              unsigned int v67 = 0;
            }
            --v70;
            if (v74) {
              v72 |= (unint64_t)(v75 & v20) << v71++;
            }
            else {
              unsigned int v70 = 0;
            }
            v75 *= 2;
            --v71;
            BOOL v74 = v70 != 0;
            BOOL v73 = v67 != 0;
          }
          while (v70 | v67);
LABEL_111:
          int v76 = v46 < 0x10 || v47;
          int v77 = (char *)(a4 + 8 * v72);
          uint64_t v78 = v231 + 4 * (v44 - a7);
          uint64_t v79 = (void *)(a2 + v64);
          if (v40 < 8) {
            int v80 = 1;
          }
          else {
            int v80 = v76;
          }
          if (v236)
          {
            if (v80)
            {
              int v221 = v45;
              int v81 = v79;
              BOOL v82 = v47;
              memcpy(__dst, v79, sizeof(__dst));
              unsigned int v42 = 16 * v39;
              BOOL v47 = v82;
              uint64_t v36 = a11;
              unsigned int v40 = v216;
              int v45 = v221;
              char v83 = __dst;
              uint64_t v79 = v81;
              uint64_t result = v233;
LABEL_121:
              float64x2_t v225 = v79;
              block[0] = MEMORY[0x263EF8330];
              block[1] = 3221225472;
              block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE10ELj2ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
              block[3] = &__block_descriptor_90_e5_v8__0l;
              block[4] = result;
              int64x2_t v238 = (int64x2_t *)v83;
              unsigned __int8 v246 = v46;
              unsigned __int8 v247 = v40;
              unsigned int v242 = v223;
              unsigned int v243 = v44 - v42;
              int64x2_t v239 = v77;
              uint64_t v240 = v78;
              uint64_t v241 = v36;
              unsigned int v244 = v232;
              unsigned int v245 = v45;
              if (v47)
              {
                dispatch_sync(*(dispatch_queue_t *)(*(void *)(result + 8) + 7384), block);
                uint64_t result = v233;
                a7 = v226;
                int v41 = v20 & v208;
                goto LABEL_123;
              }
              unsigned int v101 = *v77;
              if (v101 == 63)
              {
                int64x2_t v104 = *((int64x2_t *)v83 + 1);
                int64x2_t v105 = (const double *)(v83 + 32);
                float64x2x2_t v282 = vld2q_f64(v105);
                int64x2_t v106 = vzip2q_s64(*(int64x2_t *)v83, v104);
                int64x2_t v249 = vzip1q_s64(*(int64x2_t *)v83, v104);
                int64x2_t v253 = v106;
                float64x2_t v257 = v282.val[0];
                float64x2_t v261 = v282.val[1];
                uint64_t v102 = 64;
              }
              else if (v101 == 1)
              {
                int16x8_t v103 = vld1q_dup_s16((const __int16 *)v83);
                int64x2_t v249 = (int64x2_t)v103;
                int64x2_t v253 = (int64x2_t)v103;
                float64x2_t v257 = (float64x2_t)v103;
                float64x2_t v261 = (float64x2_t)v103;
                uint64_t v102 = 2;
              }
              else if (*v77)
              {
                uint64_t v102 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v249, 64, (uint64_t)v83, v101);
              }
              else
              {
                uint64_t v102 = 0;
                int64x2_t v249 = 0uLL;
                int64x2_t v253 = 0uLL;
                float64x2_t v257 = 0uLL;
                float64x2_t v261 = 0uLL;
              }
              uint64_t v107 = (uint64_t)&v83[v102];
              unsigned int v108 = v77[1];
              if (v108 == 63)
              {
                int64x2_t v111 = *(int64x2_t *)(v107 + 16);
                int64x2_t v112 = (const double *)(v107 + 32);
                float64x2x2_t v283 = vld2q_f64(v112);
                int64x2_t v113 = vzip2q_s64(*(int64x2_t *)v107, v111);
                int64x2_t v250 = vzip1q_s64(*(int64x2_t *)v107, v111);
                int64x2_t v254 = v113;
                float64x2_t v258 = v283.val[0];
                float64x2_t v262 = v283.val[1];
                uint64_t v109 = 64;
              }
              else if (v108 == 1)
              {
                int16x8_t v110 = vld1q_dup_s16((const __int16 *)v107);
                int64x2_t v250 = (int64x2_t)v110;
                int64x2_t v254 = (int64x2_t)v110;
                float64x2_t v258 = (float64x2_t)v110;
                float64x2_t v262 = (float64x2_t)v110;
                uint64_t v109 = 2;
              }
              else if (v77[1])
              {
                uint64_t v109 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v250, 64, v107, v108);
              }
              else
              {
                uint64_t v109 = 0;
                int64x2_t v250 = 0uLL;
                int64x2_t v254 = 0uLL;
                float64x2_t v258 = 0uLL;
                float64x2_t v262 = 0uLL;
              }
              uint64_t v114 = v107 + v109;
              unsigned int v115 = v77[2];
              if (v115 == 63)
              {
                int64x2_t v118 = *(int64x2_t *)(v114 + 16);
                int64x2_t v119 = (const double *)(v114 + 32);
                float64x2x2_t v284 = vld2q_f64(v119);
                int64x2_t v120 = vzip2q_s64(*(int64x2_t *)v114, v118);
                int64x2_t v265 = vzip1q_s64(*(int64x2_t *)v114, v118);
                int64x2_t v269 = v120;
                float64x2_t v273 = v284.val[0];
                float64x2_t v277 = v284.val[1];
                uint64_t v116 = 64;
              }
              else if (v115 == 1)
              {
                int16x8_t v117 = vld1q_dup_s16((const __int16 *)v114);
                int64x2_t v265 = (int64x2_t)v117;
                int64x2_t v269 = (int64x2_t)v117;
                float64x2_t v273 = (float64x2_t)v117;
                float64x2_t v277 = (float64x2_t)v117;
                uint64_t v116 = 2;
              }
              else if (v77[2])
              {
                uint64_t v116 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v265, 64, v114, v115);
              }
              else
              {
                uint64_t v116 = 0;
                int64x2_t v265 = 0uLL;
                int64x2_t v269 = 0uLL;
                float64x2_t v273 = 0uLL;
                float64x2_t v277 = 0uLL;
              }
              uint64_t v121 = v114 + v116;
              unsigned int v122 = v77[3];
              if (v122 == 63)
              {
                int64x2_t v125 = *(int64x2_t *)(v121 + 16);
                int64x2_t v126 = (const double *)(v121 + 32);
                float64x2x2_t v285 = vld2q_f64(v126);
                int64x2_t v127 = vzip2q_s64(*(int64x2_t *)v121, v125);
                int64x2_t v266 = vzip1q_s64(*(int64x2_t *)v121, v125);
                int64x2_t v270 = v127;
                float64x2_t v274 = v285.val[0];
                float64x2_t v278 = v285.val[1];
                uint64_t v123 = 64;
              }
              else if (v122 == 1)
              {
                int16x8_t v124 = vld1q_dup_s16((const __int16 *)v121);
                int64x2_t v266 = (int64x2_t)v124;
                int64x2_t v270 = (int64x2_t)v124;
                float64x2_t v274 = (float64x2_t)v124;
                float64x2_t v278 = (float64x2_t)v124;
                uint64_t v123 = 2;
              }
              else if (v77[3])
              {
                uint64_t v123 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v266, 64, v121, v122);
              }
              else
              {
                uint64_t v123 = 0;
                int64x2_t v266 = 0uLL;
                int64x2_t v270 = 0uLL;
                float64x2_t v274 = 0uLL;
                float64x2_t v278 = 0uLL;
              }
              uint64_t v128 = v121 + v123;
              unsigned int v129 = v77[4];
              if (v129 == 63)
              {
                int64x2_t v132 = *(int64x2_t *)(v128 + 16);
                int64x2_t v133 = (const double *)(v128 + 32);
                float64x2x2_t v286 = vld2q_f64(v133);
                int64x2_t v134 = vzip2q_s64(*(int64x2_t *)v128, v132);
                int64x2_t v251 = vzip1q_s64(*(int64x2_t *)v128, v132);
                int64x2_t v255 = v134;
                float64x2_t v259 = v286.val[0];
                float64x2_t v263 = v286.val[1];
                uint64_t v130 = 64;
              }
              else if (v129 == 1)
              {
                int16x8_t v131 = vld1q_dup_s16((const __int16 *)v128);
                int64x2_t v251 = (int64x2_t)v131;
                int64x2_t v255 = (int64x2_t)v131;
                float64x2_t v259 = (float64x2_t)v131;
                float64x2_t v263 = (float64x2_t)v131;
                uint64_t v130 = 2;
              }
              else if (v77[4])
              {
                uint64_t v130 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v251, 64, v128, v129);
              }
              else
              {
                uint64_t v130 = 0;
                int64x2_t v251 = 0uLL;
                int64x2_t v255 = 0uLL;
                float64x2_t v259 = 0uLL;
                float64x2_t v263 = 0uLL;
              }
              uint64_t v135 = v128 + v130;
              unsigned int v136 = v77[5];
              if (v136 == 63)
              {
                int64x2_t v139 = *(int64x2_t *)(v135 + 16);
                int64x2_t v140 = (const double *)(v135 + 32);
                float64x2x2_t v287 = vld2q_f64(v140);
                int64x2_t v141 = vzip2q_s64(*(int64x2_t *)v135, v139);
                int64x2_t v252 = vzip1q_s64(*(int64x2_t *)v135, v139);
                int64x2_t v256 = v141;
                float64x2_t v260 = v287.val[0];
                float64x2_t v264 = v287.val[1];
                uint64_t v137 = 64;
              }
              else if (v136 == 1)
              {
                int16x8_t v138 = vld1q_dup_s16((const __int16 *)v135);
                int64x2_t v252 = (int64x2_t)v138;
                int64x2_t v256 = (int64x2_t)v138;
                float64x2_t v260 = (float64x2_t)v138;
                float64x2_t v264 = (float64x2_t)v138;
                uint64_t v137 = 2;
              }
              else if (v77[5])
              {
                uint64_t v137 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v252, 64, v135, v136);
              }
              else
              {
                uint64_t v137 = 0;
                int64x2_t v252 = 0uLL;
                int64x2_t v256 = 0uLL;
                float64x2_t v260 = 0uLL;
                float64x2_t v264 = 0uLL;
              }
              uint64_t v142 = v135 + v137;
              unsigned int v143 = v77[6];
              if (v143 == 63)
              {
                int64x2_t v146 = *(int64x2_t *)(v142 + 16);
                unint64_t v147 = (const double *)(v142 + 32);
                float64x2x2_t v288 = vld2q_f64(v147);
                int64x2_t v148 = vzip2q_s64(*(int64x2_t *)v142, v146);
                int64x2_t v267 = vzip1q_s64(*(int64x2_t *)v142, v146);
                int64x2_t v271 = v148;
                float64x2_t v275 = v288.val[0];
                float64x2_t v279 = v288.val[1];
                uint64_t v144 = 64;
              }
              else if (v143 == 1)
              {
                int16x8_t v145 = vld1q_dup_s16((const __int16 *)v142);
                int64x2_t v267 = (int64x2_t)v145;
                int64x2_t v271 = (int64x2_t)v145;
                float64x2_t v275 = (float64x2_t)v145;
                float64x2_t v279 = (float64x2_t)v145;
                uint64_t v144 = 2;
              }
              else if (v77[6])
              {
                uint64_t v144 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v267, 64, v142, v143);
              }
              else
              {
                uint64_t v144 = 0;
                int64x2_t v267 = 0uLL;
                int64x2_t v271 = 0uLL;
                float64x2_t v275 = 0uLL;
                float64x2_t v279 = 0uLL;
              }
              uint64_t v149 = v142 + v144;
              unsigned int v150 = v77[7];
              if (v150 == 63)
              {
                int64x2_t v153 = *(int64x2_t *)(v149 + 16);
                uint64_t v154 = (const double *)(v149 + 32);
                float64x2x2_t v289 = vld2q_f64(v154);
                int64x2_t v155 = vzip2q_s64(*(int64x2_t *)v149, v153);
                int64x2_t v268 = vzip1q_s64(*(int64x2_t *)v149, v153);
                int64x2_t v272 = v155;
                float64x2_t v276 = v289.val[0];
                float64x2_t v280 = v289.val[1];
                uint64_t v151 = v244;
                if (v244) {
                  goto LABEL_199;
                }
              }
              else
              {
                if (v150 != 1)
                {
                  if (v77[7])
                  {
                    AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v268, 64, v149, v150);
                    uint64_t v151 = v244;
                    if (!v244) {
                      goto LABEL_233;
                    }
                  }
                  else
                  {
                    int64x2_t v268 = 0uLL;
                    int64x2_t v272 = 0uLL;
                    float64x2_t v276 = 0uLL;
                    float64x2_t v280 = 0uLL;
                    uint64_t v151 = v244;
                    if (!v244) {
                      goto LABEL_233;
                    }
                  }
LABEL_199:
                  if (!v245) {
                    goto LABEL_233;
                  }
                  uint64_t v156 = 0;
                  unint64_t v157 = (unint64_t)v242 << 6;
                  uint64_t v158 = 4 * v243;
                  unint64_t v159 = &v249.i8[v157 + v158];
                  uint64_t v160 = v240;
                  uint64_t v161 = v241;
                  unint64_t v162 = 4 * v245;
                  if (v162 <= 1) {
                    unint64_t v163 = 1;
                  }
                  else {
                    unint64_t v163 = 4 * v245;
                  }
                  unint64_t v164 = v157 + v158;
                  long long v165 = &v249.i8[v157 + v158];
                  if (v163) {
                    BOOL v166 = (v163 - 1) >> 32 == 0;
                  }
                  else {
                    BOOL v166 = 0;
                  }
                  uint64_t v167 = v163 & 0x3FFFFFFE0;
                  uint64_t v168 = v163 & 0x3FFFFFFF8;
                  char v170 = !v166 || v163 < 8;
                  long long v171 = &v250.i8[v164];
                  uint64_t v172 = (long long *)(v240 + 16);
                  unsigned int v173 = v159;
                  uint64_t v174 = v240;
                  while (2)
                  {
                    long long v175 = (char *)(v160 + v161 * v156);
                    int v176 = &v159[64 * v156];
                    if ((unint64_t)(&v165[64 * v156] - v175) < 0x20) {
                      char v177 = 1;
                    }
                    else {
                      char v177 = v170;
                    }
                    if (v177)
                    {
                      int v178 = 0;
LABEL_230:
                      unsigned int v188 = v178 + 1;
                      do
                      {
                        char v189 = *v175++;
                        *v176++ = v189;
                      }
                      while (v162 > v188++);
                    }
                    else
                    {
                      if (v163 >= 0x20)
                      {
                        long long v180 = v172;
                        unsigned int v181 = v171;
                        uint64_t v182 = v163 & 0x3FFFFFFE0;
                        do
                        {
                          long long v183 = *v180;
                          *((_OWORD *)v181 - 1) = *(v180 - 1);
                          *(_OWORD *)unsigned int v181 = v183;
                          v181 += 32;
                          v180 += 2;
                          v182 -= 32;
                        }
                        while (v182);
                        if (v163 == v167) {
                          goto LABEL_213;
                        }
                        uint64_t v179 = v163 & 0x3FFFFFFE0;
                        if ((v163 & 0x18) == 0)
                        {
                          v175 += v167;
                          v176 += v167;
                          int v178 = v163 & 0xFFFFFFE0;
                          goto LABEL_230;
                        }
                      }
                      else
                      {
                        uint64_t v179 = 0;
                      }
                      v176 += v168;
                      uint64_t v184 = v179 - v168;
                      int8x8_t v185 = (uint64_t *)(v174 + v179);
                      unsigned int v186 = &v173[v179];
                      do
                      {
                        uint64_t v187 = *v185++;
                        *(void *)unsigned int v186 = v187;
                        v186 += 8;
                        v184 += 8;
                      }
                      while (v184);
                      if (v163 != v168)
                      {
                        v175 += v168;
                        int v178 = v163 & 0xFFFFFFF8;
                        goto LABEL_230;
                      }
                    }
LABEL_213:
                    ++v156;
                    v171 += 64;
                    uint64_t v172 = (long long *)((char *)v172 + v161);
                    v174 += v161;
                    v173 += 64;
                    if (v156 == v151) {
                      goto LABEL_233;
                    }
                    continue;
                  }
                }
                int16x8_t v152 = vld1q_dup_s16((const __int16 *)v149);
                int64x2_t v268 = (int64x2_t)v152;
                int64x2_t v272 = (int64x2_t)v152;
                float64x2_t v276 = (float64x2_t)v152;
                float64x2_t v280 = (float64x2_t)v152;
                uint64_t v151 = v244;
                if (v244) {
                  goto LABEL_199;
                }
              }
LABEL_233:
              uint64_t v191 = 0;
              unsigned int v192 = v238;
              BOOL v193 = v239;
              int v194 = v246;
              int v195 = v247;
              a7 = v226;
              uint64_t result = v233;
              int v41 = v20 & v208;
              do
              {
                uint64_t v203 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,2u>::kSubblockPositions[v191 + 1];
                uint64_t v204 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,2u>::kSubblockPositions[v191];
                unsigned int v205 = (v194 - 4 * v204) & ~((v194 - 4 * (int)v204) >> 31);
                if (v205 >= 4) {
                  unsigned int v205 = 4;
                }
                unsigned int v206 = (v195 - 4 * v203) & ~((v195 - 4 * (int)v203) >> 31);
                if (v206 >= 4) {
                  unsigned int v206 = 4;
                }
                if (v205) {
                  BOOL v207 = v206 == 0;
                }
                else {
                  BOOL v207 = 1;
                }
                if (v207)
                {
                  char v202 = 0;
                }
                else
                {
                  uint64_t v196 = &v249 + 16 * v203 + v204;
                  int64x2_t v197 = v196[4];
                  int64x2_t v198 = vzip1q_s64(*v196, v197);
                  int64x2_t v199 = vzip2q_s64(*v196, v197);
                  int64x2_t v200 = v196[8];
                  int64x2_t v201 = v196[12];
                  *unsigned int v192 = v198;
                  v192[1] = v199;
                  v192[2] = vzip1q_s64(v200, v201);
                  v192[3] = vzip2q_s64(v200, v201);
                  v192 += 4;
                  char v202 = 63;
                }
                *v193++ = v202;
                v191 += 2;
              }
              while (v191 != 16);
LABEL_123:
              unsigned int v84 = v39 + 1;
              uint64_t v79 = v225;
              if (!v236) {
                goto LABEL_47;
              }
LABEL_139:
              memcpy(v79, v83, 0x200uLL);
              int v41 = v20 & v208;
              uint64_t result = v233;
              goto LABEL_47;
            }
            char v83 = __dst;
          }
          else
          {
            char v83 = v79;
            if (v80) {
              goto LABEL_121;
            }
          }
          uint64_t v85 = 0;
          unsigned int v86 = (int64x2_t *)v83;
          do
          {
            uint64_t v96 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,2u>::kSubblockPositions[v85 + 1];
            uint64_t v97 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,2u>::kSubblockPositions[v85];
            unsigned int v98 = (v46 - 4 * v97) & ~((int)(v46 - 4 * v97) >> 31);
            if (v98 >= 4) {
              unsigned int v98 = 4;
            }
            unsigned int v99 = (v40 - 4 * v96) & ~((int)(v40 - 4 * v96) >> 31);
            if (v99 >= 4) {
              unsigned int v99 = 4;
            }
            if (v98) {
              BOOL v100 = v99 == 0;
            }
            else {
              BOOL v100 = 1;
            }
            if (v100)
            {
              char v95 = 0;
            }
            else
            {
              uint64_t v87 = (int64x2_t *)(v78 + 4 * a11 * v96 + 16 * v97);
              int64x2_t v88 = *(int64x2_t *)((char *)v87 + v36);
              int64x2_t v89 = vzip1q_s64(*v87, v88);
              int64x2_t v90 = vzip2q_s64(*v87, v88);
              int64x2_t v91 = (int64x2_t *)((char *)v87 + 2 * a11);
              int64x2_t v92 = *(int64x2_t *)((char *)v91 + v36);
              int64x2_t v93 = vzip1q_s64(*v91, v92);
              int64x2_t v94 = vzip2q_s64(*v91, v92);
              *unsigned int v86 = v89;
              v86[1] = v90;
              v86[2] = v93;
              v86[3] = v94;
              v86 += 4;
              char v95 = 63;
            }
            *v77++ = v95;
            v85 += 2;
          }
          while (v85 != 16);
          a7 = v226;
          unsigned int v84 = v39 + 1;
          if (v236) {
            goto LABEL_139;
          }
LABEL_47:
          BOOL v21 = v39 == v227 >> 4;
          unsigned int v39 = v84;
        }
        while (!v21);
        BOOL v21 = v20++ == v214;
      }
      while (!v21);
    }
  }
  return result;
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, uint64_t a7, unsigned int a8, int a9, int a10, uint64_t a11, int a12)
{
  uint64_t v246 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  uint64_t v17 = a1;
  unsigned int v195 = a8;
  unsigned int v18 = a8 >> 3;
  unsigned int v180 = a8 + a10 - 1;
  unsigned int v182 = v180 >> 3;
  unsigned int v19 = *(unsigned __int8 *)(*(void *)(a1 + 208) + 88);
  unsigned int v20 = *(_DWORD *)(a1 + 112);
  uint64_t v196 = v17;
  if (*(void *)(v17 + 168))
  {
    __int16 CacheMode = IOSurfaceGetCacheMode();
    uint64_t v17 = v196;
    int v22 = CacheMode & 0xF00;
  }
  else
  {
    int v22 = 0;
  }
  BOOL v23 = (v22 & 0xD00) == 0 || v22 == 768;
  int v24 = v22 & 0xE00;
  int v26 = !v23 && v24 != 1024;
  int v200 = v26;
  BOOL isLevelTiled = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::isLevelTiled(v17, *(_DWORD *)(v17 + 144) + a12);
  uint64_t v28 = v196;
  BOOL v189 = isLevelTiled;
  if (v18 <= v182)
  {
    unsigned int v188 = a7 + a9 - 1;
    unsigned int v179 = a7 >> 4;
    if (a7 >> 4 <= v188 >> 4)
    {
      unsigned int v176 = a5 - 1;
      unsigned int v198 = (a5 - 1) >> 4;
      int v197 = ((a5 - 1) & 0xF) + 1;
      int v177 = ((a6 - 1) & 7) + 1;
      unsigned int v178 = (a6 - 1) >> 3;
      uint32x2_t v29 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0xF00000007);
      int8x8_t v30 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32(vadd_s32((int32x2_t)vshl_u32(v29, (uint32x2_t)0xFFFFFFFCFFFFFFFDLL), (int32x2_t)-1))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x2000000010, v29));
      __int32 v187 = v30.i32[0] | v30.i32[1];
      int8x8_t v186 = v30;
      BOOL v185 = v30.i32[0] != 0;
      BOOL v184 = v30.i32[1] != 0;
      unint64_t v175 = 8 * v20 * (unint64_t)v19;
      do
      {
        unsigned int v31 = (8 * v18) | 7;
        if (8 * v18 <= v195) {
          int v32 = v195;
        }
        else {
          int v32 = 8 * v18;
        }
        unsigned int v33 = v179;
        if (v180 < v31) {
          unsigned int v31 = v180;
        }
        unsigned int v194 = 8 * v18;
        int v183 = v32 - 8 * v18;
        int v193 = v31 - v32 + 1;
        int v34 = v177;
        if (v18 != v178) {
          int v34 = 8;
        }
        unsigned int v201 = v34;
        uint64_t v192 = a3 + (v32 - v195) * a11;
        do
        {
          unsigned int v35 = 16 * v33;
          unsigned int v36 = 16 * (v33 + 1) - 1;
          if (16 * v33 <= a7) {
            int v37 = a7;
          }
          else {
            int v37 = 16 * v33;
          }
          if (v188 < v36) {
            unsigned int v36 = v188;
          }
          int v38 = v36 - v37 + 1;
          if (v33 == v198) {
            unsigned int v39 = v197;
          }
          else {
            unsigned int v39 = 16;
          }
          BOOL v40 = 1;
          if (v194 >= v195 && v35 >= a7)
          {
            int v41 = v197;
            if (v33 != v198) {
              int v41 = 16;
            }
            BOOL v40 = v38 != v41 || v193 != v201;
          }
          if (v189)
          {
            unsigned int v62 = 0;
            uint64_t v63 = v175 >> (*(unsigned char *)(v28 + 57) != 0);
            char v64 = 1;
            if (v63 > 127)
            {
              if (v63 > 511)
              {
                if (v63 == 512)
                {
                  char v65 = 0;
                  unsigned int v62 = 16;
                  unsigned int v66 = 16;
                }
                else
                {
                  char v65 = 1;
                  unsigned int v66 = 0;
                  if (v63 == 1024)
                  {
                    unsigned int v66 = 8;
                    unsigned int v62 = 16;
                  }
                }
              }
              else if (v63 == 128)
              {
                char v64 = 0;
                char v65 = 0;
                unsigned int v62 = 32;
                unsigned int v66 = 32;
              }
              else
              {
                char v65 = 1;
                unsigned int v66 = 0;
                if (v63 == 256)
                {
                  char v64 = 0;
                  char v65 = 0;
                  unsigned int v66 = 16;
                  unsigned int v62 = 32;
                }
              }
            }
            else
            {
              char v65 = 1;
              unsigned int v66 = 0;
              switch(v63)
              {
                case 4:
                  char v64 = 0;
                  char v65 = 0;
                  unsigned int v66 = 128;
                  unsigned int v62 = 256;
                  break;
                case 5:
                case 6:
                case 7:
                case 9:
                case 10:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 17:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                  break;
                case 8:
                  char v64 = 0;
                  char v65 = 0;
                  unsigned int v62 = 128;
                  unsigned int v66 = 128;
                  break;
                case 16:
                  char v64 = 0;
                  char v65 = 0;
                  unsigned int v66 = 64;
                  unsigned int v62 = 128;
                  break;
                case 32:
                  char v64 = 0;
                  char v65 = 0;
                  unsigned int v62 = 64;
                  unsigned int v66 = 64;
                  break;
                default:
                  if (v63 == 64)
                  {
                    char v64 = 0;
                    char v65 = 0;
                    unsigned int v66 = 32;
                    unsigned int v62 = 64;
                  }
                  break;
              }
            }
            unsigned int v164 = (v62 >> 4) - 1;
            if (v64) {
              unsigned int v165 = 0;
            }
            else {
              unsigned int v165 = 32 - __clz(~(-1 << -(char)__clz(v164)));
            }
            unsigned int v166 = (v66 >> 3) - 1;
            if (v65)
            {
              unsigned int v167 = 0;
              if (v165) {
                goto LABEL_210;
              }
            }
            else
            {
              unsigned int v167 = 32 - __clz(~(-1 << -(char)__clz(v166)));
              if (v167 | v165)
              {
LABEL_210:
                int v168 = 0;
                uint64_t v169 = 0;
                int v170 = v33 & v164;
                int v171 = v18 & v166;
                BOOL v172 = v167 != 0;
                BOOL v173 = v165 != 0;
                int v174 = 1;
                do
                {
                  --v167;
                  if (v172) {
                    v169 |= (unint64_t)(v174 & v171) << v168++;
                  }
                  else {
                    unsigned int v167 = 0;
                  }
                  --v165;
                  if (v173) {
                    v169 |= (unint64_t)(v174 & v170) << v168++;
                  }
                  else {
                    unsigned int v165 = 0;
                  }
                  v174 *= 2;
                  --v168;
                  BOOL v173 = v165 != 0;
                  BOOL v172 = v167 != 0;
                }
                while (v165 | v167);
                goto LABEL_222;
              }
            }
            uint64_t v169 = 0;
LABEL_222:
            unint64_t v50 = ((unint64_t)(v35 / v62 + v194 / v66 * ((v62 + v176) / v62)) << 14) + (v169 << 9);
            goto LABEL_58;
          }
          if (v187)
          {
            int v43 = 0;
            uint64_t v44 = 0;
            int v45 = 1;
            BOOL v46 = v185;
            BOOL v47 = v184;
            __int32 v48 = v186.i32[0];
            __int32 v49 = v186.i32[1];
            do
            {
              --v48;
              if (v46) {
                v44 |= (unint64_t)(v45 & v18) << v43++;
              }
              else {
                __int32 v48 = 0;
              }
              --v49;
              if (v47) {
                v44 |= (unint64_t)(v45 & v33) << v43++;
              }
              else {
                __int32 v49 = 0;
              }
              v45 *= 2;
              --v43;
              BOOL v47 = v49 != 0;
              BOOL v46 = v48 != 0;
            }
            while (v49 | v48);
          }
          else
          {
            uint64_t v44 = 0;
          }
          unint64_t v50 = v44 << 9;
LABEL_58:
          unsigned int v51 = *(_DWORD *)(v28 + 128) >> (*(unsigned char *)(v28 + 144) + a12);
          if (v51 <= 1) {
            unsigned int v51 = 1;
          }
          unsigned int v52 = v51 + 15;
          if (v52 < 0x20) {
            unsigned int v53 = 0;
          }
          else {
            unsigned int v53 = 32 - __clz(~(-1 << -(char)__clz((v52 >> 4) - 1)));
          }
          unsigned int v54 = *(_DWORD *)(v28 + 132) >> (*(unsigned char *)(v28 + 144) + a12);
          if (v54 <= 1) {
            unsigned int v54 = 1;
          }
          unsigned int v55 = v54 + 7;
          if (v55 < 0x10)
          {
            unsigned int v56 = 0;
            if (!v53)
            {
LABEL_80:
              uint64_t v58 = 0;
              goto LABEL_81;
            }
          }
          else
          {
            unsigned int v56 = 32 - __clz(~(-1 << -(char)__clz((v55 >> 3) - 1)));
            if (!(v56 | v53)) {
              goto LABEL_80;
            }
          }
          int v57 = 0;
          uint64_t v58 = 0;
          BOOL v59 = v53 != 0;
          BOOL v60 = v56 != 0;
          int v61 = 1;
          do
          {
            --v53;
            if (v59) {
              v58 |= (unint64_t)(v61 & v33) << v57++;
            }
            else {
              unsigned int v53 = 0;
            }
            --v56;
            if (v60) {
              v58 |= (unint64_t)(v61 & v18) << v57++;
            }
            else {
              unsigned int v56 = 0;
            }
            v61 *= 2;
            --v57;
            BOOL v60 = v56 != 0;
            BOOL v59 = v53 != 0;
          }
          while (v56 | v53);
LABEL_81:
          uint64_t v67 = a7;
          int v68 = v39 < 0x10 || v40;
          unsigned int v69 = (char *)(a4 + 8 * v58);
          unint64_t v70 = v192 + 4 * (v37 - a7);
          int v71 = (unsigned char *)(a2 + v50);
          if (v201 < 8) {
            int v72 = 1;
          }
          else {
            int v72 = v68;
          }
          __src = v71;
          if (v200)
          {
            if (!v72)
            {
              int v71 = __dst;
LABEL_94:
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock(v70, a11, (unint64_t)v71, v69, v39, v201);
              goto LABEL_95;
            }
            int v73 = v38;
            memcpy(__dst, __src, sizeof(__dst));
            int v38 = v73;
            int v71 = __dst;
            uint64_t v28 = v196;
          }
          else if (!v72)
          {
            goto LABEL_94;
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE10ELj2ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = v28;
          uint64_t v203 = v71;
          unsigned __int8 v211 = v39;
          unsigned __int8 v212 = v201;
          unsigned int v207 = v183;
          unsigned int v208 = v37 - v35;
          uint64_t v204 = v69;
          unint64_t v205 = v70;
          uint64_t v206 = a11;
          unsigned int v209 = v193;
          unsigned int v210 = v38;
          if (!v40)
          {
            unsigned int v74 = *v69;
            a7 = v67;
            if (v74 == 63)
            {
              int64x2_t v77 = *((int64x2_t *)v71 + 1);
              uint64_t v78 = (const double *)(v71 + 32);
              float64x2x2_t v247 = vld2q_f64(v78);
              int64x2_t v79 = vzip2q_s64(*(int64x2_t *)v71, v77);
              int64x2_t v214 = vzip1q_s64(*(int64x2_t *)v71, v77);
              int64x2_t v218 = v79;
              float64x2_t v222 = v247.val[0];
              float64x2_t v226 = v247.val[1];
              uint64_t v75 = 64;
            }
            else if (v74 == 1)
            {
              int16x8_t v76 = vld1q_dup_s16((const __int16 *)v71);
              int64x2_t v214 = (int64x2_t)v76;
              int64x2_t v218 = (int64x2_t)v76;
              float64x2_t v222 = (float64x2_t)v76;
              float64x2_t v226 = (float64x2_t)v76;
              uint64_t v75 = 2;
            }
            else if (*v69)
            {
              uint64_t v75 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v214, 64, (uint64_t)v71, v74);
            }
            else
            {
              uint64_t v75 = 0;
              int64x2_t v214 = 0uLL;
              int64x2_t v218 = 0uLL;
              float64x2_t v222 = 0uLL;
              float64x2_t v226 = 0uLL;
            }
            uint64_t v80 = (uint64_t)&v71[v75];
            unsigned int v81 = v69[1];
            if (v81 == 63)
            {
              int64x2_t v84 = *(int64x2_t *)(v80 + 16);
              uint64_t v85 = (const double *)(v80 + 32);
              float64x2x2_t v248 = vld2q_f64(v85);
              int64x2_t v86 = vzip2q_s64(*(int64x2_t *)v80, v84);
              int64x2_t v215 = vzip1q_s64(*(int64x2_t *)v80, v84);
              int64x2_t v219 = v86;
              float64x2_t v223 = v248.val[0];
              float64x2_t v227 = v248.val[1];
              uint64_t v82 = 64;
            }
            else if (v81 == 1)
            {
              int16x8_t v83 = vld1q_dup_s16((const __int16 *)v80);
              int64x2_t v215 = (int64x2_t)v83;
              int64x2_t v219 = (int64x2_t)v83;
              float64x2_t v223 = (float64x2_t)v83;
              float64x2_t v227 = (float64x2_t)v83;
              uint64_t v82 = 2;
            }
            else if (v69[1])
            {
              uint64_t v82 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v215, 64, v80, v81);
            }
            else
            {
              uint64_t v82 = 0;
              int64x2_t v215 = 0uLL;
              int64x2_t v219 = 0uLL;
              float64x2_t v223 = 0uLL;
              float64x2_t v227 = 0uLL;
            }
            uint64_t v87 = v80 + v82;
            unsigned int v88 = v69[2];
            if (v88 == 63)
            {
              int64x2_t v91 = *(int64x2_t *)(v87 + 16);
              int64x2_t v92 = (const double *)(v87 + 32);
              float64x2x2_t v249 = vld2q_f64(v92);
              int64x2_t v93 = vzip2q_s64(*(int64x2_t *)v87, v91);
              int64x2_t v230 = vzip1q_s64(*(int64x2_t *)v87, v91);
              int64x2_t v234 = v93;
              float64x2_t v238 = v249.val[0];
              float64x2_t v242 = v249.val[1];
              uint64_t v89 = 64;
            }
            else if (v88 == 1)
            {
              int16x8_t v90 = vld1q_dup_s16((const __int16 *)v87);
              int64x2_t v230 = (int64x2_t)v90;
              int64x2_t v234 = (int64x2_t)v90;
              float64x2_t v238 = (float64x2_t)v90;
              float64x2_t v242 = (float64x2_t)v90;
              uint64_t v89 = 2;
            }
            else if (v69[2])
            {
              uint64_t v89 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v230, 64, v87, v88);
            }
            else
            {
              uint64_t v89 = 0;
              int64x2_t v230 = 0uLL;
              int64x2_t v234 = 0uLL;
              float64x2_t v238 = 0uLL;
              float64x2_t v242 = 0uLL;
            }
            uint64_t v94 = v87 + v89;
            unsigned int v95 = v69[3];
            if (v95 == 63)
            {
              int64x2_t v98 = *(int64x2_t *)(v94 + 16);
              unsigned int v99 = (const double *)(v94 + 32);
              float64x2x2_t v250 = vld2q_f64(v99);
              int64x2_t v100 = vzip2q_s64(*(int64x2_t *)v94, v98);
              int64x2_t v231 = vzip1q_s64(*(int64x2_t *)v94, v98);
              int64x2_t v235 = v100;
              float64x2_t v239 = v250.val[0];
              float64x2_t v243 = v250.val[1];
              uint64_t v96 = 64;
            }
            else if (v95 == 1)
            {
              int16x8_t v97 = vld1q_dup_s16((const __int16 *)v94);
              int64x2_t v231 = (int64x2_t)v97;
              int64x2_t v235 = (int64x2_t)v97;
              float64x2_t v239 = (float64x2_t)v97;
              float64x2_t v243 = (float64x2_t)v97;
              uint64_t v96 = 2;
            }
            else if (v69[3])
            {
              uint64_t v96 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v231, 64, v94, v95);
            }
            else
            {
              uint64_t v96 = 0;
              int64x2_t v231 = 0uLL;
              int64x2_t v235 = 0uLL;
              float64x2_t v239 = 0uLL;
              float64x2_t v243 = 0uLL;
            }
            uint64_t v101 = v94 + v96;
            unsigned int v102 = v69[4];
            if (v102 == 63)
            {
              int64x2_t v105 = *(int64x2_t *)(v101 + 16);
              int64x2_t v106 = (const double *)(v101 + 32);
              float64x2x2_t v251 = vld2q_f64(v106);
              int64x2_t v107 = vzip2q_s64(*(int64x2_t *)v101, v105);
              int64x2_t v216 = vzip1q_s64(*(int64x2_t *)v101, v105);
              int64x2_t v220 = v107;
              float64x2_t v224 = v251.val[0];
              float64x2_t v228 = v251.val[1];
              uint64_t v103 = 64;
            }
            else if (v102 == 1)
            {
              int16x8_t v104 = vld1q_dup_s16((const __int16 *)v101);
              int64x2_t v216 = (int64x2_t)v104;
              int64x2_t v220 = (int64x2_t)v104;
              float64x2_t v224 = (float64x2_t)v104;
              float64x2_t v228 = (float64x2_t)v104;
              uint64_t v103 = 2;
            }
            else if (v69[4])
            {
              uint64_t v103 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v216, 64, v101, v102);
            }
            else
            {
              uint64_t v103 = 0;
              int64x2_t v216 = 0uLL;
              int64x2_t v220 = 0uLL;
              float64x2_t v224 = 0uLL;
              float64x2_t v228 = 0uLL;
            }
            uint64_t v108 = v101 + v103;
            unsigned int v109 = v69[5];
            if (v109 == 63)
            {
              int64x2_t v112 = *(int64x2_t *)(v108 + 16);
              int64x2_t v113 = (const double *)(v108 + 32);
              float64x2x2_t v252 = vld2q_f64(v113);
              int64x2_t v114 = vzip2q_s64(*(int64x2_t *)v108, v112);
              int64x2_t v217 = vzip1q_s64(*(int64x2_t *)v108, v112);
              int64x2_t v221 = v114;
              float64x2_t v225 = v252.val[0];
              float64x2_t v229 = v252.val[1];
              uint64_t v110 = 64;
            }
            else if (v109 == 1)
            {
              int16x8_t v111 = vld1q_dup_s16((const __int16 *)v108);
              int64x2_t v217 = (int64x2_t)v111;
              int64x2_t v221 = (int64x2_t)v111;
              float64x2_t v225 = (float64x2_t)v111;
              float64x2_t v229 = (float64x2_t)v111;
              uint64_t v110 = 2;
            }
            else if (v69[5])
            {
              uint64_t v110 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v217, 64, v108, v109);
            }
            else
            {
              uint64_t v110 = 0;
              int64x2_t v217 = 0uLL;
              int64x2_t v221 = 0uLL;
              float64x2_t v225 = 0uLL;
              float64x2_t v229 = 0uLL;
            }
            uint64_t v115 = v108 + v110;
            unsigned int v116 = v69[6];
            if (v116 == 63)
            {
              int64x2_t v119 = *(int64x2_t *)(v115 + 16);
              int64x2_t v120 = (const double *)(v115 + 32);
              float64x2x2_t v253 = vld2q_f64(v120);
              int64x2_t v121 = vzip2q_s64(*(int64x2_t *)v115, v119);
              int64x2_t v232 = vzip1q_s64(*(int64x2_t *)v115, v119);
              int64x2_t v236 = v121;
              float64x2_t v240 = v253.val[0];
              float64x2_t v244 = v253.val[1];
              uint64_t v117 = 64;
            }
            else if (v116 == 1)
            {
              int16x8_t v118 = vld1q_dup_s16((const __int16 *)v115);
              int64x2_t v232 = (int64x2_t)v118;
              int64x2_t v236 = (int64x2_t)v118;
              float64x2_t v240 = (float64x2_t)v118;
              float64x2_t v244 = (float64x2_t)v118;
              uint64_t v117 = 2;
            }
            else if (v69[6])
            {
              uint64_t v117 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v232, 64, v115, v116);
            }
            else
            {
              uint64_t v117 = 0;
              int64x2_t v232 = 0uLL;
              int64x2_t v236 = 0uLL;
              float64x2_t v240 = 0uLL;
              float64x2_t v244 = 0uLL;
            }
            uint64_t v122 = v115 + v117;
            unsigned int v123 = v69[7];
            if (v123 == 63)
            {
              int64x2_t v126 = *(int64x2_t *)(v122 + 16);
              int64x2_t v127 = (const double *)(v122 + 32);
              float64x2x2_t v254 = vld2q_f64(v127);
              int64x2_t v128 = vzip2q_s64(*(int64x2_t *)v122, v126);
              int64x2_t v233 = vzip1q_s64(*(int64x2_t *)v122, v126);
              int64x2_t v237 = v128;
              float64x2_t v241 = v254.val[0];
              float64x2_t v245 = v254.val[1];
              uint64_t v124 = v209;
              if (v209) {
                goto LABEL_156;
              }
            }
            else
            {
              if (v123 != 1)
              {
                if (v69[7])
                {
                  AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v233, 64, v122, v123);
                  uint64_t v124 = v209;
                  if (!v209) {
                    goto LABEL_190;
                  }
                }
                else
                {
                  int64x2_t v233 = 0uLL;
                  int64x2_t v237 = 0uLL;
                  float64x2_t v241 = 0uLL;
                  float64x2_t v245 = 0uLL;
                  uint64_t v124 = v209;
                  if (!v209) {
                    goto LABEL_190;
                  }
                }
LABEL_156:
                if (!v210) {
                  goto LABEL_190;
                }
                uint64_t v129 = 0;
                unint64_t v130 = (unint64_t)v207 << 6;
                uint64_t v131 = 4 * v208;
                int64x2_t v132 = &v214.i8[v130 + v131];
                unint64_t v133 = v205;
                uint64_t v134 = v206;
                unint64_t v135 = 4 * v210;
                if (v135 <= 1) {
                  unint64_t v136 = 1;
                }
                else {
                  unint64_t v136 = 4 * v210;
                }
                unint64_t v137 = v130 + v131;
                int16x8_t v138 = &v214.i8[v130 + v131];
                if (v136) {
                  BOOL v139 = (v136 - 1) >> 32 == 0;
                }
                else {
                  BOOL v139 = 0;
                }
                uint64_t v140 = v136 & 0x3FFFFFFE0;
                uint64_t v141 = v136 & 0x3FFFFFFF8;
                char v143 = !v139 || v136 < 8;
                uint64_t v144 = &v215.i8[v137];
                int16x8_t v145 = (long long *)(v205 + 16);
                int64x2_t v146 = v132;
                unint64_t v147 = v205;
                while (2)
                {
                  int64x2_t v148 = (char *)(v133 + v134 * v129);
                  uint64_t v149 = &v132[64 * v129];
                  if ((unint64_t)(&v138[64 * v129] - v148) < 0x20) {
                    char v150 = 1;
                  }
                  else {
                    char v150 = v143;
                  }
                  if (v150)
                  {
                    int v151 = 0;
LABEL_187:
                    unsigned int v161 = v151 + 1;
                    do
                    {
                      char v162 = *v148++;
                      *v149++ = v162;
                    }
                    while (v135 > v161++);
                  }
                  else
                  {
                    if (v136 >= 0x20)
                    {
                      int64x2_t v153 = v145;
                      uint64_t v154 = v144;
                      uint64_t v155 = v136 & 0x3FFFFFFE0;
                      do
                      {
                        long long v156 = *v153;
                        *((_OWORD *)v154 - 1) = *(v153 - 1);
                        *(_OWORD *)uint64_t v154 = v156;
                        v154 += 32;
                        v153 += 2;
                        v155 -= 32;
                      }
                      while (v155);
                      if (v136 == v140) {
                        goto LABEL_170;
                      }
                      uint64_t v152 = v136 & 0x3FFFFFFE0;
                      if ((v136 & 0x18) == 0)
                      {
                        v148 += v140;
                        v149 += v140;
                        int v151 = v136 & 0xFFFFFFE0;
                        goto LABEL_187;
                      }
                    }
                    else
                    {
                      uint64_t v152 = 0;
                    }
                    v149 += v141;
                    uint64_t v157 = v152 - v141;
                    uint64_t v158 = (uint64_t *)(v147 + v152);
                    unint64_t v159 = &v146[v152];
                    do
                    {
                      uint64_t v160 = *v158++;
                      *(void *)unint64_t v159 = v160;
                      v159 += 8;
                      v157 += 8;
                    }
                    while (v157);
                    if (v136 != v141)
                    {
                      v148 += v141;
                      int v151 = v136 & 0xFFFFFFF8;
                      goto LABEL_187;
                    }
                  }
LABEL_170:
                  ++v129;
                  v144 += 64;
                  int16x8_t v145 = (long long *)((char *)v145 + v134);
                  v147 += v134;
                  v146 += 64;
                  if (v129 == v124) {
                    goto LABEL_190;
                  }
                  continue;
                }
              }
              int16x8_t v125 = vld1q_dup_s16((const __int16 *)v122);
              int64x2_t v233 = (int64x2_t)v125;
              int64x2_t v237 = (int64x2_t)v125;
              float64x2_t v241 = (float64x2_t)v125;
              float64x2_t v245 = (float64x2_t)v125;
              uint64_t v124 = v209;
              if (v209) {
                goto LABEL_156;
              }
            }
LABEL_190:
            AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)&v214, 64, (unint64_t)v203, v204, v211, v212);
            if (!v200) {
              goto LABEL_26;
            }
            goto LABEL_191;
          }
          dispatch_sync(*(dispatch_queue_t *)(*(void *)(v28 + 8) + 7384), block);
LABEL_95:
          a7 = v67;
          if (!v200) {
            goto LABEL_26;
          }
LABEL_191:
          memcpy(__src, v71, 0x200uLL);
LABEL_26:
          BOOL v23 = v33++ == v188 >> 4;
          uint64_t v28 = v196;
        }
        while (!v23);
        BOOL v23 = v18++ == v182;
      }
      while (!v23);
    }
  }
}

uint64_t AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, int a12)
{
  uint64_t v281 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v232 = a8;
  unsigned int v16 = a8 >> 3;
  unsigned int v214 = a8 + a10 - 1;
  unsigned int v216 = v214 >> 3;
  unsigned int v17 = *(unsigned __int8 *)(*(void *)(a1 + 208) + 88);
  unsigned int v18 = *(_DWORD *)(a1 + 112);
  uint64_t v233 = a1;
  if (*(void *)(a1 + 168)) {
    int v19 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v19 = 0;
  }
  BOOL v20 = (v19 & 0xD00) == 0 || v19 == 768;
  int v21 = v19 & 0xE00;
  int v23 = !v20 && v21 != 1024;
  int v236 = v23;
  uint64_t result = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::isLevelTiled(a1, *(_DWORD *)(a1 + 144) + a12);
  uint64_t v25 = a1;
  int v225 = result;
  unsigned int v26 = a7;
  if (v16 <= v216)
  {
    unsigned int v224 = a7 + a9 - 1;
    if (a7 >> 4 <= v224 >> 4)
    {
      unsigned int v211 = a5 - 1;
      unsigned int v235 = (a5 - 1) >> 4;
      int v234 = ((a5 - 1) & 0xF) + 1;
      int v212 = ((a6 - 1) & 7) + 1;
      unsigned int v213 = (a6 - 1) >> 3;
      uint32x2_t v27 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0xF00000007);
      int8x8_t v28 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32(vadd_s32((int32x2_t)vshl_u32(v27, (uint32x2_t)0xFFFFFFFCFFFFFFFDLL), (int32x2_t)-1))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x2000000010, v27));
      __int32 v223 = v28.i32[0] | v28.i32[1];
      int8x8_t v221 = v28;
      BOOL v220 = v28.i32[0] != 0;
      BOOL v219 = v28.i32[1] != 0;
      unint64_t v210 = 8 * v18 * (unint64_t)v17;
      uint64_t v29 = a11;
      uint64_t result = 2 * a11;
      do
      {
        unsigned int v30 = (8 * v16) | 7;
        if (8 * v16 <= v232) {
          int v31 = v232;
        }
        else {
          int v31 = 8 * v16;
        }
        unsigned int v32 = a7 >> 4;
        if (v214 < v30) {
          unsigned int v30 = v214;
        }
        unsigned int v231 = 8 * v16;
        int v218 = v31 - 8 * v16;
        int v230 = v30 - v31 + 1;
        if (v16 == v213) {
          unsigned int v33 = v212;
        }
        else {
          unsigned int v33 = 8;
        }
        uint64_t v229 = a3 + (v31 - v232) * v29;
        unsigned int v217 = v33;
        do
        {
          unsigned int v34 = 16 * v32;
          unsigned int v35 = 16 * (v32 + 1) - 1;
          if (16 * v32 <= v26) {
            int v36 = v26;
          }
          else {
            int v36 = 16 * v32;
          }
          if (v224 < v35) {
            unsigned int v35 = a7 + a9 - 1;
          }
          int v37 = v35 - v36 + 1;
          if (v32 == v235) {
            unsigned int v38 = v234;
          }
          else {
            unsigned int v38 = 16;
          }
          BOOL v39 = 1;
          if (v231 >= v232 && v34 >= v26)
          {
            int v40 = v234;
            if (v32 != v235) {
              int v40 = 16;
            }
            BOOL v39 = v37 != v40 || v230 != v33;
          }
          if (v225)
          {
            unsigned int v61 = 0;
            uint64_t v62 = v210 >> (*(unsigned char *)(v25 + 57) != 0);
            char v63 = 1;
            if (v62 > 127)
            {
              if (v62 > 511)
              {
                if (v62 == 512)
                {
                  char v64 = 0;
                  unsigned int v61 = 16;
                  unsigned int v65 = 16;
                }
                else
                {
                  char v64 = 1;
                  unsigned int v65 = 0;
                  if (v62 == 1024)
                  {
                    unsigned int v65 = 8;
                    unsigned int v61 = 16;
                  }
                }
              }
              else if (v62 == 128)
              {
                char v63 = 0;
                char v64 = 0;
                unsigned int v61 = 32;
                unsigned int v65 = 32;
              }
              else
              {
                char v64 = 1;
                unsigned int v65 = 0;
                if (v62 == 256)
                {
                  char v63 = 0;
                  char v64 = 0;
                  unsigned int v65 = 16;
                  unsigned int v61 = 32;
                }
              }
            }
            else
            {
              char v64 = 1;
              unsigned int v65 = 0;
              switch(v62)
              {
                case 4:
                  char v63 = 0;
                  char v64 = 0;
                  unsigned int v65 = 128;
                  unsigned int v61 = 256;
                  break;
                case 5:
                case 6:
                case 7:
                case 9:
                case 10:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 17:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                  break;
                case 8:
                  char v63 = 0;
                  char v64 = 0;
                  unsigned int v61 = 128;
                  unsigned int v65 = 128;
                  break;
                case 16:
                  char v63 = 0;
                  char v64 = 0;
                  unsigned int v65 = 64;
                  unsigned int v61 = 128;
                  break;
                case 32:
                  char v63 = 0;
                  char v64 = 0;
                  unsigned int v61 = 64;
                  unsigned int v65 = 64;
                  break;
                default:
                  if (v62 == 64)
                  {
                    char v63 = 0;
                    char v64 = 0;
                    unsigned int v65 = 32;
                    unsigned int v61 = 64;
                  }
                  break;
              }
            }
            unsigned int v199 = (v61 >> 4) - 1;
            if (v63) {
              unsigned int v200 = 0;
            }
            else {
              unsigned int v200 = 32 - __clz(~(-1 << -(char)__clz(v199)));
            }
            unsigned int v201 = (v65 >> 3) - 1;
            if (v64)
            {
              unsigned int v202 = 0;
              if (v200) {
                goto LABEL_233;
              }
            }
            else
            {
              unsigned int v202 = 32 - __clz(~(-1 << -(char)__clz(v201)));
              if (v202 | v200)
              {
LABEL_233:
                int v203 = 0;
                uint64_t v204 = 0;
                int v205 = v32 & v199;
                int v206 = v16 & v201;
                BOOL v207 = v202 != 0;
                BOOL v208 = v200 != 0;
                int v209 = 1;
                do
                {
                  --v202;
                  if (v207) {
                    v204 |= (unint64_t)(v209 & v206) << v203++;
                  }
                  else {
                    unsigned int v202 = 0;
                  }
                  --v200;
                  if (v208) {
                    v204 |= (unint64_t)(v209 & v205) << v203++;
                  }
                  else {
                    unsigned int v200 = 0;
                  }
                  v209 *= 2;
                  --v203;
                  BOOL v208 = v200 != 0;
                  BOOL v207 = v202 != 0;
                }
                while (v200 | v202);
                goto LABEL_245;
              }
            }
            uint64_t v204 = 0;
LABEL_245:
            unint64_t v49 = ((unint64_t)(v34 / v61 + v231 / v65 * ((v61 + v211) / v61)) << 14) + (v204 << 9);
            uint64_t result = 2 * a11;
            goto LABEL_59;
          }
          if (v223)
          {
            int v42 = 0;
            uint64_t v43 = 0;
            int v44 = 1;
            BOOL v45 = v220;
            BOOL v46 = v219;
            __int32 v47 = v221.i32[0];
            __int32 v48 = v221.i32[1];
            do
            {
              --v47;
              if (v45) {
                v43 |= (unint64_t)(v44 & v16) << v42++;
              }
              else {
                __int32 v47 = 0;
              }
              --v48;
              if (v46) {
                v43 |= (unint64_t)(v44 & v32) << v42++;
              }
              else {
                __int32 v48 = 0;
              }
              v44 *= 2;
              --v42;
              BOOL v46 = v48 != 0;
              BOOL v45 = v47 != 0;
            }
            while (v48 | v47);
          }
          else
          {
            uint64_t v43 = 0;
          }
          unint64_t v49 = v43 << 9;
LABEL_59:
          unsigned int v50 = *(_DWORD *)(v25 + 128) >> (*(unsigned char *)(v25 + 144) + a12);
          if (v50 <= 1) {
            unsigned int v50 = 1;
          }
          unsigned int v51 = v50 + 15;
          if (v51 < 0x20) {
            unsigned int v52 = 0;
          }
          else {
            unsigned int v52 = 32 - __clz(~(-1 << -(char)__clz((v51 >> 4) - 1)));
          }
          unsigned int v53 = *(_DWORD *)(v25 + 132) >> (*(unsigned char *)(v25 + 144) + a12);
          if (v53 <= 1) {
            unsigned int v53 = 1;
          }
          unsigned int v54 = v53 + 7;
          if (v54 < 0x10)
          {
            unsigned int v55 = 0;
            if (!v52)
            {
LABEL_81:
              uint64_t v57 = 0;
              goto LABEL_82;
            }
          }
          else
          {
            unsigned int v55 = 32 - __clz(~(-1 << -(char)__clz((v54 >> 3) - 1)));
            if (!(v55 | v52)) {
              goto LABEL_81;
            }
          }
          int v56 = 0;
          uint64_t v57 = 0;
          BOOL v58 = v52 != 0;
          BOOL v59 = v55 != 0;
          int v60 = 1;
          do
          {
            --v52;
            if (v58) {
              v57 |= (unint64_t)(v60 & v32) << v56++;
            }
            else {
              unsigned int v52 = 0;
            }
            --v55;
            if (v59) {
              v57 |= (unint64_t)(v60 & v16) << v56++;
            }
            else {
              unsigned int v55 = 0;
            }
            v60 *= 2;
            --v56;
            BOOL v59 = v55 != 0;
            BOOL v58 = v52 != 0;
          }
          while (v55 | v52);
LABEL_82:
          int v66 = v38 < 0x10 || v39;
          uint64_t v67 = (char *)(a4 + 8 * v57);
          uint64_t v68 = v229 + 4 * (v36 - v26);
          unsigned int v69 = (void *)(a2 + v49);
          if (v33 < 8) {
            int v70 = 1;
          }
          else {
            int v70 = v66;
          }
          if (v236)
          {
            if (v70)
            {
              int v71 = v69;
              int v72 = v37;
              BOOL v73 = v39;
              int v74 = v36;
              memcpy(__dst, v69, sizeof(__dst));
              int v36 = v74;
              BOOL v39 = v73;
              unsigned int v34 = 16 * v32;
              int v37 = v72;
              uint64_t v29 = a11;
              unsigned int v33 = v217;
              uint64_t v75 = __dst;
              unsigned int v69 = v71;
              uint64_t v25 = v233;
LABEL_92:
              float64x2_t v222 = v69;
              block[0] = MEMORY[0x263EF8330];
              block[1] = 3221225472;
              block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE10ELj2ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
              block[3] = &__block_descriptor_90_e5_v8__0l;
              block[4] = v25;
              float64x2_t v238 = (int64x2_t *)v75;
              unsigned __int8 v246 = v38;
              unsigned __int8 v247 = v33;
              unsigned int v242 = v218;
              unsigned int v243 = v36 - v34;
              float64x2_t v239 = v67;
              uint64_t v240 = v68;
              uint64_t v241 = v29;
              unsigned int v244 = v230;
              unsigned int v245 = v37;
              if (v39)
              {
                dispatch_sync(*(dispatch_queue_t *)(*(void *)(v25 + 8) + 7384), block);
                uint64_t result = 2 * a11;
                uint64_t v25 = v233;
                unsigned int v26 = a7;
LABEL_94:
                unsigned int v69 = v222;
                goto LABEL_95;
              }
              unsigned int v92 = *v67;
              if (v92 == 63)
              {
                int64x2_t v95 = *((int64x2_t *)v75 + 1);
                uint64_t v96 = (const double *)(v75 + 32);
                float64x2x2_t v282 = vld2q_f64(v96);
                int64x2_t v97 = vzip2q_s64(*(int64x2_t *)v75, v95);
                int64x2_t v249 = vzip1q_s64(*(int64x2_t *)v75, v95);
                int64x2_t v253 = v97;
                float64x2_t v257 = v282.val[0];
                float64x2_t v261 = v282.val[1];
                uint64_t v93 = 64;
              }
              else if (v92 == 1)
              {
                int16x8_t v94 = vld1q_dup_s16((const __int16 *)v75);
                int64x2_t v249 = (int64x2_t)v94;
                int64x2_t v253 = (int64x2_t)v94;
                float64x2_t v257 = (float64x2_t)v94;
                float64x2_t v261 = (float64x2_t)v94;
                uint64_t v93 = 2;
              }
              else if (*v67)
              {
                uint64_t v93 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v249, 64, (uint64_t)v75, v92);
              }
              else
              {
                uint64_t v93 = 0;
                int64x2_t v249 = 0uLL;
                int64x2_t v253 = 0uLL;
                float64x2_t v257 = 0uLL;
                float64x2_t v261 = 0uLL;
              }
              uint64_t v98 = (uint64_t)&v75[v93];
              unsigned int v99 = v67[1];
              if (v99 == 63)
              {
                int64x2_t v102 = *(int64x2_t *)(v98 + 16);
                uint64_t v103 = (const double *)(v98 + 32);
                float64x2x2_t v283 = vld2q_f64(v103);
                int64x2_t v104 = vzip2q_s64(*(int64x2_t *)v98, v102);
                int64x2_t v250 = vzip1q_s64(*(int64x2_t *)v98, v102);
                int64x2_t v254 = v104;
                float64x2_t v258 = v283.val[0];
                float64x2_t v262 = v283.val[1];
                uint64_t v100 = 64;
              }
              else if (v99 == 1)
              {
                int16x8_t v101 = vld1q_dup_s16((const __int16 *)v98);
                int64x2_t v250 = (int64x2_t)v101;
                int64x2_t v254 = (int64x2_t)v101;
                float64x2_t v258 = (float64x2_t)v101;
                float64x2_t v262 = (float64x2_t)v101;
                uint64_t v100 = 2;
              }
              else if (v67[1])
              {
                uint64_t v100 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v250, 64, v98, v99);
              }
              else
              {
                uint64_t v100 = 0;
                int64x2_t v250 = 0uLL;
                int64x2_t v254 = 0uLL;
                float64x2_t v258 = 0uLL;
                float64x2_t v262 = 0uLL;
              }
              uint64_t v105 = v98 + v100;
              unsigned int v106 = v67[2];
              if (v106 == 63)
              {
                int64x2_t v109 = *(int64x2_t *)(v105 + 16);
                uint64_t v110 = (const double *)(v105 + 32);
                float64x2x2_t v284 = vld2q_f64(v110);
                int64x2_t v111 = vzip2q_s64(*(int64x2_t *)v105, v109);
                int64x2_t v265 = vzip1q_s64(*(int64x2_t *)v105, v109);
                int64x2_t v269 = v111;
                float64x2_t v273 = v284.val[0];
                float64x2_t v277 = v284.val[1];
                uint64_t v107 = 64;
              }
              else if (v106 == 1)
              {
                int16x8_t v108 = vld1q_dup_s16((const __int16 *)v105);
                int64x2_t v265 = (int64x2_t)v108;
                int64x2_t v269 = (int64x2_t)v108;
                float64x2_t v273 = (float64x2_t)v108;
                float64x2_t v277 = (float64x2_t)v108;
                uint64_t v107 = 2;
              }
              else if (v67[2])
              {
                uint64_t v107 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v265, 64, v105, v106);
              }
              else
              {
                uint64_t v107 = 0;
                int64x2_t v265 = 0uLL;
                int64x2_t v269 = 0uLL;
                float64x2_t v273 = 0uLL;
                float64x2_t v277 = 0uLL;
              }
              uint64_t v112 = v105 + v107;
              unsigned int v113 = v67[3];
              if (v113 == 63)
              {
                int64x2_t v116 = *(int64x2_t *)(v112 + 16);
                uint64_t v117 = (const double *)(v112 + 32);
                float64x2x2_t v285 = vld2q_f64(v117);
                int64x2_t v118 = vzip2q_s64(*(int64x2_t *)v112, v116);
                int64x2_t v266 = vzip1q_s64(*(int64x2_t *)v112, v116);
                int64x2_t v270 = v118;
                float64x2_t v274 = v285.val[0];
                float64x2_t v278 = v285.val[1];
                uint64_t v114 = 64;
              }
              else if (v113 == 1)
              {
                int16x8_t v115 = vld1q_dup_s16((const __int16 *)v112);
                int64x2_t v266 = (int64x2_t)v115;
                int64x2_t v270 = (int64x2_t)v115;
                float64x2_t v274 = (float64x2_t)v115;
                float64x2_t v278 = (float64x2_t)v115;
                uint64_t v114 = 2;
              }
              else if (v67[3])
              {
                uint64_t v114 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v266, 64, v112, v113);
              }
              else
              {
                uint64_t v114 = 0;
                int64x2_t v266 = 0uLL;
                int64x2_t v270 = 0uLL;
                float64x2_t v274 = 0uLL;
                float64x2_t v278 = 0uLL;
              }
              uint64_t v119 = v112 + v114;
              unsigned int v120 = v67[4];
              if (v120 == 63)
              {
                int64x2_t v123 = *(int64x2_t *)(v119 + 16);
                uint64_t v124 = (const double *)(v119 + 32);
                float64x2x2_t v286 = vld2q_f64(v124);
                int64x2_t v125 = vzip2q_s64(*(int64x2_t *)v119, v123);
                int64x2_t v251 = vzip1q_s64(*(int64x2_t *)v119, v123);
                int64x2_t v255 = v125;
                float64x2_t v259 = v286.val[0];
                float64x2_t v263 = v286.val[1];
                uint64_t v121 = 64;
              }
              else if (v120 == 1)
              {
                int16x8_t v122 = vld1q_dup_s16((const __int16 *)v119);
                int64x2_t v251 = (int64x2_t)v122;
                int64x2_t v255 = (int64x2_t)v122;
                float64x2_t v259 = (float64x2_t)v122;
                float64x2_t v263 = (float64x2_t)v122;
                uint64_t v121 = 2;
              }
              else if (v67[4])
              {
                uint64_t v121 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v251, 64, v119, v120);
              }
              else
              {
                uint64_t v121 = 0;
                int64x2_t v251 = 0uLL;
                int64x2_t v255 = 0uLL;
                float64x2_t v259 = 0uLL;
                float64x2_t v263 = 0uLL;
              }
              uint64_t v126 = v119 + v121;
              unsigned int v127 = v67[5];
              if (v127 == 63)
              {
                int64x2_t v130 = *(int64x2_t *)(v126 + 16);
                uint64_t v131 = (const double *)(v126 + 32);
                float64x2x2_t v287 = vld2q_f64(v131);
                int64x2_t v132 = vzip2q_s64(*(int64x2_t *)v126, v130);
                int64x2_t v252 = vzip1q_s64(*(int64x2_t *)v126, v130);
                int64x2_t v256 = v132;
                float64x2_t v260 = v287.val[0];
                float64x2_t v264 = v287.val[1];
                uint64_t v128 = 64;
              }
              else if (v127 == 1)
              {
                int16x8_t v129 = vld1q_dup_s16((const __int16 *)v126);
                int64x2_t v252 = (int64x2_t)v129;
                int64x2_t v256 = (int64x2_t)v129;
                float64x2_t v260 = (float64x2_t)v129;
                float64x2_t v264 = (float64x2_t)v129;
                uint64_t v128 = 2;
              }
              else if (v67[5])
              {
                uint64_t v128 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v252, 64, v126, v127);
              }
              else
              {
                uint64_t v128 = 0;
                int64x2_t v252 = 0uLL;
                int64x2_t v256 = 0uLL;
                float64x2_t v260 = 0uLL;
                float64x2_t v264 = 0uLL;
              }
              uint64_t v133 = v126 + v128;
              unsigned int v134 = v67[6];
              if (v134 == 63)
              {
                int64x2_t v137 = *(int64x2_t *)(v133 + 16);
                int16x8_t v138 = (const double *)(v133 + 32);
                float64x2x2_t v288 = vld2q_f64(v138);
                int64x2_t v139 = vzip2q_s64(*(int64x2_t *)v133, v137);
                int64x2_t v267 = vzip1q_s64(*(int64x2_t *)v133, v137);
                int64x2_t v271 = v139;
                float64x2_t v275 = v288.val[0];
                float64x2_t v279 = v288.val[1];
                uint64_t v135 = 64;
              }
              else if (v134 == 1)
              {
                int16x8_t v136 = vld1q_dup_s16((const __int16 *)v133);
                int64x2_t v267 = (int64x2_t)v136;
                int64x2_t v271 = (int64x2_t)v136;
                float64x2_t v275 = (float64x2_t)v136;
                float64x2_t v279 = (float64x2_t)v136;
                uint64_t v135 = 2;
              }
              else if (v67[6])
              {
                uint64_t v135 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v267, 64, v133, v134);
              }
              else
              {
                uint64_t v135 = 0;
                int64x2_t v267 = 0uLL;
                int64x2_t v271 = 0uLL;
                float64x2_t v275 = 0uLL;
                float64x2_t v279 = 0uLL;
              }
              uint64_t v140 = v133 + v135;
              unsigned int v141 = v67[7];
              if (v141 == 63)
              {
                int64x2_t v144 = *(int64x2_t *)(v140 + 16);
                int16x8_t v145 = (const double *)(v140 + 32);
                float64x2x2_t v289 = vld2q_f64(v145);
                int64x2_t v146 = vzip2q_s64(*(int64x2_t *)v140, v144);
                int64x2_t v268 = vzip1q_s64(*(int64x2_t *)v140, v144);
                int64x2_t v272 = v146;
                float64x2_t v276 = v289.val[0];
                float64x2_t v280 = v289.val[1];
                uint64_t v142 = v244;
                if (v244) {
                  goto LABEL_169;
                }
              }
              else
              {
                if (v141 != 1)
                {
                  if (v67[7])
                  {
                    AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v268, 64, v140, v141);
                    uint64_t v142 = v244;
                    if (!v244) {
                      goto LABEL_203;
                    }
                  }
                  else
                  {
                    int64x2_t v268 = 0uLL;
                    int64x2_t v272 = 0uLL;
                    float64x2_t v276 = 0uLL;
                    float64x2_t v280 = 0uLL;
                    uint64_t v142 = v244;
                    if (!v244) {
                      goto LABEL_203;
                    }
                  }
LABEL_169:
                  if (!v245) {
                    goto LABEL_203;
                  }
                  uint64_t v147 = 0;
                  unint64_t v148 = (unint64_t)v242 << 6;
                  uint64_t v149 = 4 * v243;
                  char v150 = &v249.i8[v148 + v149];
                  uint64_t v151 = v240;
                  uint64_t v152 = v241;
                  unint64_t v153 = 4 * v245;
                  if (v153 <= 1) {
                    unint64_t v154 = 1;
                  }
                  else {
                    unint64_t v154 = 4 * v245;
                  }
                  unint64_t v155 = v148 + v149;
                  long long v156 = &v249.i8[v148 + v149];
                  if (v154) {
                    BOOL v157 = (v154 - 1) >> 32 == 0;
                  }
                  else {
                    BOOL v157 = 0;
                  }
                  uint64_t v158 = v154 & 0x3FFFFFFE0;
                  uint64_t v159 = v154 & 0x3FFFFFFF8;
                  char v161 = !v157 || v154 < 8;
                  char v162 = &v250.i8[v155];
                  unint64_t v163 = (long long *)(v240 + 16);
                  unsigned int v164 = v150;
                  uint64_t v165 = v240;
                  while (2)
                  {
                    unsigned int v166 = (char *)(v151 + v152 * v147);
                    unsigned int v167 = &v150[64 * v147];
                    if ((unint64_t)(&v156[64 * v147] - v166) < 0x20) {
                      char v168 = 1;
                    }
                    else {
                      char v168 = v161;
                    }
                    if (v168)
                    {
                      int v169 = 0;
LABEL_200:
                      unsigned int v179 = v169 + 1;
                      do
                      {
                        char v180 = *v166++;
                        *v167++ = v180;
                      }
                      while (v153 > v179++);
                    }
                    else
                    {
                      if (v154 >= 0x20)
                      {
                        int v171 = v163;
                        BOOL v172 = v162;
                        uint64_t v173 = v154 & 0x3FFFFFFE0;
                        do
                        {
                          long long v174 = *v171;
                          *((_OWORD *)v172 - 1) = *(v171 - 1);
                          *(_OWORD *)BOOL v172 = v174;
                          v172 += 32;
                          v171 += 2;
                          v173 -= 32;
                        }
                        while (v173);
                        if (v154 == v158) {
                          goto LABEL_183;
                        }
                        uint64_t v170 = v154 & 0x3FFFFFFE0;
                        if ((v154 & 0x18) == 0)
                        {
                          v166 += v158;
                          v167 += v158;
                          int v169 = v154 & 0xFFFFFFE0;
                          goto LABEL_200;
                        }
                      }
                      else
                      {
                        uint64_t v170 = 0;
                      }
                      v167 += v159;
                      uint64_t v175 = v170 - v159;
                      unsigned int v176 = (uint64_t *)(v165 + v170);
                      int v177 = &v164[v170];
                      do
                      {
                        uint64_t v178 = *v176++;
                        *(void *)int v177 = v178;
                        v177 += 8;
                        v175 += 8;
                      }
                      while (v175);
                      if (v154 != v159)
                      {
                        v166 += v159;
                        int v169 = v154 & 0xFFFFFFF8;
                        goto LABEL_200;
                      }
                    }
LABEL_183:
                    ++v147;
                    v162 += 64;
                    unint64_t v163 = (long long *)((char *)v163 + v152);
                    v165 += v152;
                    v164 += 64;
                    if (v147 == v142) {
                      goto LABEL_203;
                    }
                    continue;
                  }
                }
                int16x8_t v143 = vld1q_dup_s16((const __int16 *)v140);
                int64x2_t v268 = (int64x2_t)v143;
                int64x2_t v272 = (int64x2_t)v143;
                float64x2_t v276 = (float64x2_t)v143;
                float64x2_t v280 = (float64x2_t)v143;
                uint64_t v142 = v244;
                if (v244) {
                  goto LABEL_169;
                }
              }
LABEL_203:
              uint64_t v182 = 0;
              int v183 = v238;
              BOOL v184 = v239;
              int v185 = v246;
              int v186 = v247;
              unsigned int v26 = a7;
              uint64_t v25 = v233;
              uint64_t result = 2 * a11;
              do
              {
                uint64_t v194 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,2u>::kSubblockPositions[v182 + 1];
                uint64_t v195 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,2u>::kSubblockPositions[v182];
                unsigned int v196 = (v185 - 4 * v195) & ~((v185 - 4 * (int)v195) >> 31);
                if (v196 >= 4) {
                  unsigned int v196 = 4;
                }
                unsigned int v197 = (v186 - 4 * v194) & ~((v186 - 4 * (int)v194) >> 31);
                if (v197 >= 4) {
                  unsigned int v197 = 4;
                }
                if (v196) {
                  BOOL v198 = v197 == 0;
                }
                else {
                  BOOL v198 = 1;
                }
                if (v198)
                {
                  char v193 = 0;
                }
                else
                {
                  __int32 v187 = &v249 + 16 * v194 + v195;
                  int64x2_t v188 = v187[4];
                  int64x2_t v189 = vzip1q_s64(*v187, v188);
                  int64x2_t v190 = vzip2q_s64(*v187, v188);
                  int64x2_t v191 = v187[8];
                  int64x2_t v192 = v187[12];
                  *int v183 = v189;
                  v183[1] = v190;
                  v183[2] = vzip1q_s64(v191, v192);
                  v183[3] = vzip2q_s64(v191, v192);
                  v183 += 4;
                  char v193 = 63;
                }
                *v184++ = v193;
                v182 += 2;
              }
              while (v182 != 16);
              goto LABEL_94;
            }
            uint64_t v75 = __dst;
          }
          else
          {
            uint64_t v75 = v69;
            if (v70) {
              goto LABEL_92;
            }
          }
          uint64_t v76 = 0;
          int64x2_t v77 = (int64x2_t *)v75;
          do
          {
            uint64_t v87 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,2u>::kSubblockPositions[v76 + 1];
            uint64_t v88 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,2u>::kSubblockPositions[v76];
            unsigned int v89 = (v38 - 4 * v88) & ~((int)(v38 - 4 * v88) >> 31);
            if (v89 >= 4) {
              unsigned int v89 = 4;
            }
            unsigned int v90 = (v33 - 4 * v87) & ~((int)(v33 - 4 * v87) >> 31);
            if (v90 >= 4) {
              unsigned int v90 = 4;
            }
            if (v89) {
              BOOL v91 = v90 == 0;
            }
            else {
              BOOL v91 = 1;
            }
            if (v91)
            {
              char v86 = 0;
            }
            else
            {
              uint64_t v78 = (int64x2_t *)(v68 + 4 * a11 * v87 + 16 * v88);
              int64x2_t v79 = *(int64x2_t *)((char *)v78 + v29);
              int64x2_t v80 = vzip1q_s64(*v78, v79);
              int64x2_t v81 = vzip2q_s64(*v78, v79);
              uint64_t v82 = (int64x2_t *)((char *)v78 + result);
              int64x2_t v83 = *(int64x2_t *)((char *)v82 + v29);
              int64x2_t v84 = vzip1q_s64(*v82, v83);
              int64x2_t v85 = vzip2q_s64(*v82, v83);
              *int64x2_t v77 = v80;
              v77[1] = v81;
              v77[2] = v84;
              v77[3] = v85;
              v77 += 4;
              char v86 = 63;
            }
            *v67++ = v86;
            v76 += 2;
          }
          while (v76 != 16);
LABEL_95:
          if (v236)
          {
            memcpy(v69, v75, 0x200uLL);
            uint64_t result = 2 * a11;
            uint64_t v25 = v233;
            unsigned int v26 = a7;
          }
          BOOL v20 = v32++ == v224 >> 4;
        }
        while (!v20);
        BOOL v20 = v16++ == v216;
      }
      while (!v20);
    }
  }
  return result;
}

uint64_t AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, char a12)
{
  uint64_t v249 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v198 = a8;
  unsigned int v182 = a8 + a10 - 1;
  uint64_t v199 = a1;
  if (*(void *)(a1 + 168)) {
    int v17 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v17 = 0;
  }
  unsigned int v18 = a5 - 1;
  unsigned int v19 = a6 - 1;
  unsigned int v20 = a8 >> 3;
  unsigned int v181 = v182 >> 3;
  BOOL v21 = (v17 & 0xD00) == 0 || v17 == 768;
  int v22 = v17 & 0xE00;
  int v24 = !v21 && v22 != 1024;
  int v203 = v24;
  uint64_t result = a1;
  if (*(unsigned char *)(a1 + 232))
  {
    unsigned int v26 = *(unsigned __int8 *)(a1 + 255);
    unsigned int v27 = *(unsigned __int8 *)(a1 + 254);
    char v28 = __clz(v18);
    if (1 << v26 >= a6 || a5 >> v27)
    {
      if (!(a6 >> v26) && 1 << v27 < a5)
      {
        if (a6 < 2) {
          unsigned int v31 = 0;
        }
        else {
          unsigned int v31 = __clz(~(-1 << -(char)__clz(v19))) - 32;
        }
        v27 += v26 + v31;
        unsigned int v26 = -v31;
      }
    }
    else
    {
      unsigned int v29 = 32 - __clz(~(-1 << -v28));
      unsigned int v30 = v27 + v26;
      if (a5 < 2) {
        unsigned int v29 = 0;
      }
      unsigned int v26 = v30 - v29;
      unsigned int v27 = v29;
    }
    if (a5 < 2)
    {
      if (v27) {
        goto LABEL_27;
      }
    }
    else if (32 - __clz(~(-1 << -v28)) < v27)
    {
LABEL_27:
      BOOL v193 = 0;
LABEL_32:
      unsigned int v190 = v27 - 4;
      unsigned int v186 = v26 - 3;
      int v33 = -1 << *(unsigned char *)(*(void *)(a1 + 208) + 48);
      unsigned int v179 = (((~v33 + a5) & v33) + ~(-1 << v27)) >> v27;
      goto LABEL_33;
    }
    if (a6 < 2) {
      unsigned int v32 = 0;
    }
    else {
      unsigned int v32 = 32 - __clz(~(-1 << -(char)__clz(v19)));
    }
    BOOL v193 = v32 >= v26;
    goto LABEL_32;
  }
  BOOL v193 = 0;
  unsigned int v179 = 0;
  unsigned int v186 = 0;
  unsigned int v190 = 0;
LABEL_33:
  if (v20 <= v181)
  {
    unsigned int v192 = a7 + a9 - 1;
    unsigned int v178 = a7 >> 4;
    if (a7 >> 4 <= v192 >> 4)
    {
      unsigned int v201 = v18 >> 4;
      unsigned int v177 = v19 >> 3;
      int v200 = (v18 & 0xF) + 1;
      int v176 = (v19 & 7) + 1;
      uint32x2_t v34 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0xF00000007);
      int8x8_t v35 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32(vadd_s32((int32x2_t)vshl_u32(v34, (uint32x2_t)0xFFFFFFFCFFFFFFFDLL), (int32x2_t)-1))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x2000000010, v34));
      __int32 v188 = v35.i32[0] | v35.i32[1];
      int8x8_t v185 = v35;
      BOOL v184 = v35.i32[0] != 0;
      BOOL v183 = v35.i32[1] != 0;
      unsigned int v191 = a7;
      do
      {
        unsigned int v36 = (8 * v20) | 7;
        if (8 * v20 <= v198) {
          int v37 = v198;
        }
        else {
          int v37 = 8 * v20;
        }
        if (v182 < v36) {
          unsigned int v36 = v182;
        }
        int v189 = v37 - 8 * v20;
        int v197 = v36 - v37 + 1;
        unsigned int v38 = v178;
        int v39 = v176;
        if (v20 != v177) {
          int v39 = 8;
        }
        unsigned int v204 = v39;
        uint64_t v40 = v20 & ~(-1 << v186);
        uint64_t v196 = a3 + (v37 - v198) * a11;
        do
        {
          unsigned int v41 = 16 * v38;
          unsigned int v42 = 16 * (v38 + 1) - 1;
          if (16 * v38 <= a7) {
            int v43 = a7;
          }
          else {
            int v43 = 16 * v38;
          }
          if (v192 < v42) {
            unsigned int v42 = v192;
          }
          int v44 = v42 - v43 + 1;
          if (v38 == v201) {
            unsigned int v45 = v200;
          }
          else {
            unsigned int v45 = 16;
          }
          BOOL v46 = 1;
          if (8 * v20 >= v198 && v41 >= a7)
          {
            int v47 = v200;
            if (v38 != v201) {
              int v47 = 16;
            }
            BOOL v46 = v44 != v47 || v197 != v204;
          }
          if (v193)
          {
            if (v190 | v186)
            {
              int v49 = 0;
              uint64_t v50 = 0;
              int v51 = 1;
              BOOL v52 = v186 != 0;
              BOOL v53 = v190 != 0;
              unsigned int v54 = v186;
              unsigned int v55 = v190;
              do
              {
                --v54;
                if (v52) {
                  v50 |= (unint64_t)(v40 & v51) << v49++;
                }
                else {
                  unsigned int v54 = 0;
                }
                --v55;
                if (v53) {
                  v50 |= (unint64_t)(v38 & ~(-1 << v190) & v51) << v49++;
                }
                else {
                  unsigned int v55 = 0;
                }
                v51 *= 2;
                --v49;
                BOOL v53 = v55 != 0;
                BOOL v52 = v54 != 0;
              }
              while (v55 | v54);
            }
            else
            {
              uint64_t v50 = 0;
            }
            uint64_t v63 = *(void *)(result + 320) * ((v38 >> v190) + (v20 >> v186) * v179) + (v50 << 9);
          }
          else
          {
            if (v188)
            {
              int v56 = 0;
              uint64_t v57 = 0;
              int v58 = 1;
              BOOL v59 = v184;
              BOOL v60 = v183;
              __int32 v61 = v185.i32[0];
              __int32 v62 = v185.i32[1];
              do
              {
                --v61;
                if (v59) {
                  v57 |= (unint64_t)(v58 & v20) << v56++;
                }
                else {
                  __int32 v61 = 0;
                }
                --v62;
                if (v60) {
                  v57 |= (unint64_t)(v58 & v38) << v56++;
                }
                else {
                  __int32 v62 = 0;
                }
                v58 *= 2;
                --v56;
                BOOL v60 = v62 != 0;
                BOOL v59 = v61 != 0;
              }
              while (v62 | v61);
            }
            else
            {
              uint64_t v57 = 0;
            }
            uint64_t v63 = v57 << 9;
          }
          unsigned int v64 = *(_DWORD *)(result + 128) >> (*(unsigned char *)(result + 144) + a12);
          if (v64 <= 1) {
            unsigned int v64 = 1;
          }
          unsigned int v65 = v64 + 15;
          if (v65 < 0x20) {
            unsigned int v66 = 0;
          }
          else {
            unsigned int v66 = 32 - __clz(~(-1 << -(char)__clz((v65 >> 4) - 1)));
          }
          unsigned int v67 = *(_DWORD *)(result + 132) >> (*(unsigned char *)(result + 144) + a12);
          if (v67 <= 1) {
            unsigned int v67 = 1;
          }
          unsigned int v68 = v67 + 7;
          if (v68 < 0x10)
          {
            unsigned int v69 = 0;
            if (!v66)
            {
LABEL_109:
              uint64_t v71 = 0;
              goto LABEL_110;
            }
          }
          else
          {
            unsigned int v69 = 32 - __clz(~(-1 << -(char)__clz((v68 >> 3) - 1)));
            if (!(v69 | v66)) {
              goto LABEL_109;
            }
          }
          int v70 = 0;
          uint64_t v71 = 0;
          BOOL v72 = v66 != 0;
          BOOL v73 = v69 != 0;
          int v74 = 1;
          do
          {
            --v66;
            if (v72) {
              v71 |= (unint64_t)(v74 & v38) << v70++;
            }
            else {
              unsigned int v66 = 0;
            }
            --v69;
            if (v73) {
              v71 |= (unint64_t)(v74 & v20) << v70++;
            }
            else {
              unsigned int v69 = 0;
            }
            v74 *= 2;
            --v70;
            BOOL v73 = v69 != 0;
            BOOL v72 = v66 != 0;
          }
          while (v69 | v66);
LABEL_110:
          unsigned int v75 = v43 - a7;
          int v76 = v45 < 0x10 || v46;
          int64x2_t v77 = (char *)(a4 + 8 * v71);
          unint64_t v78 = v196 + 4 * v75;
          int64x2_t v79 = (void *)(a2 + v63);
          if (v204 < 8) {
            int v80 = 1;
          }
          else {
            int v80 = v76;
          }
          unsigned int v202 = v79;
          if (v203)
          {
            int64x2_t v81 = __dst;
            if (!v80) {
              goto LABEL_122;
            }
            __int32 v187 = (char *)(a4 + 8 * v71);
            int v82 = v44;
            char v83 = v45;
            uint64_t v84 = v40;
            BOOL v85 = v46;
            memcpy(__dst, v79, sizeof(__dst));
            BOOL v46 = v85;
            uint64_t v40 = v84;
            LOBYTE(v45) = v83;
            int v44 = v82;
            int64x2_t v77 = v187;
            uint64_t result = v199;
          }
          else
          {
            int64x2_t v81 = v79;
            if (!v80)
            {
LABEL_122:
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock(v78, a11, (uint16x8_t *)v81, v77, v45, v204);
              a7 = v191;
              goto LABEL_217;
            }
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE8ELj2ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = result;
          int v206 = (uint16x8_t *)v81;
          unsigned __int8 v214 = v45;
          unsigned __int8 v215 = v204;
          unsigned int v210 = v189;
          unsigned int v211 = v43 - v41;
          BOOL v207 = v77;
          unint64_t v208 = v78;
          uint64_t v209 = a11;
          unsigned int v212 = v197;
          unsigned int v213 = v44;
          if (v46)
          {
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(result + 8) + 7384), block);
            a7 = v191;
            goto LABEL_217;
          }
          unsigned int v86 = *v77;
          if (v86 == 63)
          {
            int64x2_t v89 = *((int64x2_t *)v81 + 1);
            unsigned int v90 = (const double *)(v81 + 32);
            float64x2x2_t v250 = vld2q_f64(v90);
            int64x2_t v91 = vzip2q_s64(*(int64x2_t *)v81, v89);
            int64x2_t v217 = vzip1q_s64(*(int64x2_t *)v81, v89);
            int64x2_t v221 = v91;
            float64x2_t v225 = v250.val[0];
            float64x2_t v229 = v250.val[1];
            uint64_t v87 = 64;
          }
          else if (v86 == 1)
          {
            int16x8_t v88 = vld1q_dup_s16((const __int16 *)v81);
            int64x2_t v217 = (int64x2_t)v88;
            int64x2_t v221 = (int64x2_t)v88;
            float64x2_t v225 = (float64x2_t)v88;
            float64x2_t v229 = (float64x2_t)v88;
            uint64_t v87 = 2;
          }
          else if (*v77)
          {
            uint64_t v87 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v217, 64, (uint64_t)v81, v86);
          }
          else
          {
            uint64_t v87 = 0;
            int64x2_t v217 = 0uLL;
            int64x2_t v221 = 0uLL;
            float64x2_t v225 = 0uLL;
            float64x2_t v229 = 0uLL;
          }
          uint64_t v92 = (uint64_t)&v81[v87];
          unsigned int v93 = v77[1];
          if (v93 == 63)
          {
            int64x2_t v96 = *(int64x2_t *)(v92 + 16);
            int64x2_t v97 = (const double *)(v92 + 32);
            float64x2x2_t v251 = vld2q_f64(v97);
            int64x2_t v98 = vzip2q_s64(*(int64x2_t *)v92, v96);
            int64x2_t v218 = vzip1q_s64(*(int64x2_t *)v92, v96);
            int64x2_t v222 = v98;
            float64x2_t v226 = v251.val[0];
            float64x2_t v230 = v251.val[1];
            uint64_t v94 = 64;
          }
          else if (v93 == 1)
          {
            int16x8_t v95 = vld1q_dup_s16((const __int16 *)v92);
            int64x2_t v218 = (int64x2_t)v95;
            int64x2_t v222 = (int64x2_t)v95;
            float64x2_t v226 = (float64x2_t)v95;
            float64x2_t v230 = (float64x2_t)v95;
            uint64_t v94 = 2;
          }
          else if (v77[1])
          {
            uint64_t v94 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v218, 64, v92, v93);
          }
          else
          {
            uint64_t v94 = 0;
            int64x2_t v218 = 0uLL;
            int64x2_t v222 = 0uLL;
            float64x2_t v226 = 0uLL;
            float64x2_t v230 = 0uLL;
          }
          uint64_t v99 = v92 + v94;
          unsigned int v100 = v77[2];
          if (v100 == 63)
          {
            int64x2_t v103 = *(int64x2_t *)(v99 + 16);
            int64x2_t v104 = (const double *)(v99 + 32);
            float64x2x2_t v252 = vld2q_f64(v104);
            int64x2_t v105 = vzip2q_s64(*(int64x2_t *)v99, v103);
            int64x2_t v233 = vzip1q_s64(*(int64x2_t *)v99, v103);
            int64x2_t v237 = v105;
            float64x2_t v241 = v252.val[0];
            float64x2_t v245 = v252.val[1];
            uint64_t v101 = 64;
          }
          else if (v100 == 1)
          {
            int16x8_t v102 = vld1q_dup_s16((const __int16 *)v99);
            int64x2_t v233 = (int64x2_t)v102;
            int64x2_t v237 = (int64x2_t)v102;
            float64x2_t v241 = (float64x2_t)v102;
            float64x2_t v245 = (float64x2_t)v102;
            uint64_t v101 = 2;
          }
          else if (v77[2])
          {
            uint64_t v101 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v233, 64, v99, v100);
          }
          else
          {
            uint64_t v101 = 0;
            int64x2_t v233 = 0uLL;
            int64x2_t v237 = 0uLL;
            float64x2_t v241 = 0uLL;
            float64x2_t v245 = 0uLL;
          }
          uint64_t v106 = v99 + v101;
          unsigned int v107 = v77[3];
          if (v107 == 63)
          {
            int64x2_t v110 = *(int64x2_t *)(v106 + 16);
            int64x2_t v111 = (const double *)(v106 + 32);
            float64x2x2_t v253 = vld2q_f64(v111);
            int64x2_t v112 = vzip2q_s64(*(int64x2_t *)v106, v110);
            int64x2_t v234 = vzip1q_s64(*(int64x2_t *)v106, v110);
            int64x2_t v238 = v112;
            float64x2_t v242 = v253.val[0];
            float64x2_t v246 = v253.val[1];
            uint64_t v108 = 64;
          }
          else if (v107 == 1)
          {
            int16x8_t v109 = vld1q_dup_s16((const __int16 *)v106);
            int64x2_t v234 = (int64x2_t)v109;
            int64x2_t v238 = (int64x2_t)v109;
            float64x2_t v242 = (float64x2_t)v109;
            float64x2_t v246 = (float64x2_t)v109;
            uint64_t v108 = 2;
          }
          else if (v77[3])
          {
            uint64_t v108 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v234, 64, v106, v107);
          }
          else
          {
            uint64_t v108 = 0;
            int64x2_t v234 = 0uLL;
            int64x2_t v238 = 0uLL;
            float64x2_t v242 = 0uLL;
            float64x2_t v246 = 0uLL;
          }
          uint64_t v113 = v106 + v108;
          unsigned int v114 = v77[4];
          if (v114 == 63)
          {
            int64x2_t v117 = *(int64x2_t *)(v113 + 16);
            int64x2_t v118 = (const double *)(v113 + 32);
            float64x2x2_t v254 = vld2q_f64(v118);
            int64x2_t v119 = vzip2q_s64(*(int64x2_t *)v113, v117);
            int64x2_t v219 = vzip1q_s64(*(int64x2_t *)v113, v117);
            int64x2_t v223 = v119;
            float64x2_t v227 = v254.val[0];
            float64x2_t v231 = v254.val[1];
            uint64_t v115 = 64;
          }
          else if (v114 == 1)
          {
            int16x8_t v116 = vld1q_dup_s16((const __int16 *)v113);
            int64x2_t v219 = (int64x2_t)v116;
            int64x2_t v223 = (int64x2_t)v116;
            float64x2_t v227 = (float64x2_t)v116;
            float64x2_t v231 = (float64x2_t)v116;
            uint64_t v115 = 2;
          }
          else if (v77[4])
          {
            uint64_t v115 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v219, 64, v113, v114);
          }
          else
          {
            uint64_t v115 = 0;
            int64x2_t v219 = 0uLL;
            int64x2_t v223 = 0uLL;
            float64x2_t v227 = 0uLL;
            float64x2_t v231 = 0uLL;
          }
          uint64_t v120 = v113 + v115;
          unsigned int v121 = v77[5];
          if (v121 == 63)
          {
            int64x2_t v124 = *(int64x2_t *)(v120 + 16);
            int64x2_t v125 = (const double *)(v120 + 32);
            float64x2x2_t v255 = vld2q_f64(v125);
            int64x2_t v126 = vzip2q_s64(*(int64x2_t *)v120, v124);
            int64x2_t v220 = vzip1q_s64(*(int64x2_t *)v120, v124);
            int64x2_t v224 = v126;
            float64x2_t v228 = v255.val[0];
            float64x2_t v232 = v255.val[1];
            uint64_t v122 = 64;
          }
          else if (v121 == 1)
          {
            int16x8_t v123 = vld1q_dup_s16((const __int16 *)v120);
            int64x2_t v220 = (int64x2_t)v123;
            int64x2_t v224 = (int64x2_t)v123;
            float64x2_t v228 = (float64x2_t)v123;
            float64x2_t v232 = (float64x2_t)v123;
            uint64_t v122 = 2;
          }
          else if (v77[5])
          {
            uint64_t v122 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v220, 64, v120, v121);
          }
          else
          {
            uint64_t v122 = 0;
            int64x2_t v220 = 0uLL;
            int64x2_t v224 = 0uLL;
            float64x2_t v228 = 0uLL;
            float64x2_t v232 = 0uLL;
          }
          uint64_t v127 = v120 + v122;
          unsigned int v128 = v77[6];
          if (v128 == 63)
          {
            int64x2_t v131 = *(int64x2_t *)(v127 + 16);
            int64x2_t v132 = (const double *)(v127 + 32);
            float64x2x2_t v256 = vld2q_f64(v132);
            int64x2_t v133 = vzip2q_s64(*(int64x2_t *)v127, v131);
            int64x2_t v235 = vzip1q_s64(*(int64x2_t *)v127, v131);
            int64x2_t v239 = v133;
            float64x2_t v243 = v256.val[0];
            float64x2_t v247 = v256.val[1];
            uint64_t v129 = 64;
          }
          else if (v128 == 1)
          {
            int16x8_t v130 = vld1q_dup_s16((const __int16 *)v127);
            int64x2_t v235 = (int64x2_t)v130;
            int64x2_t v239 = (int64x2_t)v130;
            float64x2_t v243 = (float64x2_t)v130;
            float64x2_t v247 = (float64x2_t)v130;
            uint64_t v129 = 2;
          }
          else if (v77[6])
          {
            uint64_t v129 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v235, 64, v127, v128);
          }
          else
          {
            uint64_t v129 = 0;
            int64x2_t v235 = 0uLL;
            int64x2_t v239 = 0uLL;
            float64x2_t v243 = 0uLL;
            float64x2_t v247 = 0uLL;
          }
          uint64_t v134 = v127 + v129;
          unsigned int v135 = v77[7];
          if (v135 == 63)
          {
            int64x2_t v138 = *(int64x2_t *)(v134 + 16);
            int64x2_t v139 = (const double *)(v134 + 32);
            float64x2x2_t v257 = vld2q_f64(v139);
            int64x2_t v140 = vzip2q_s64(*(int64x2_t *)v134, v138);
            int64x2_t v236 = vzip1q_s64(*(int64x2_t *)v134, v138);
            int64x2_t v240 = v140;
            float64x2_t v244 = v257.val[0];
            float64x2_t v248 = v257.val[1];
            a7 = v191;
            uint64_t v136 = v212;
            if (!v212) {
              goto LABEL_216;
            }
          }
          else
          {
            a7 = v191;
            if (v135 == 1)
            {
              int16x8_t v137 = vld1q_dup_s16((const __int16 *)v134);
              int64x2_t v236 = (int64x2_t)v137;
              int64x2_t v240 = (int64x2_t)v137;
              float64x2_t v244 = (float64x2_t)v137;
              float64x2_t v248 = (float64x2_t)v137;
              uint64_t v136 = v212;
              if (!v212) {
                goto LABEL_216;
              }
            }
            else if (v135)
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v236, 64, v134, v135);
              uint64_t v136 = v212;
              if (!v212) {
                goto LABEL_216;
              }
            }
            else
            {
              int64x2_t v236 = 0uLL;
              int64x2_t v240 = 0uLL;
              float64x2_t v244 = 0uLL;
              float64x2_t v248 = 0uLL;
              uint64_t v136 = v212;
              if (!v212) {
                goto LABEL_216;
              }
            }
          }
          if (v213)
          {
            uint64_t v141 = 0;
            unint64_t v142 = (unint64_t)v210 << 6;
            uint64_t v143 = 4 * v211;
            int64x2_t v144 = &v217.i8[v142 + v143];
            unint64_t v145 = v208;
            uint64_t v146 = v209;
            unint64_t v147 = 4 * v213;
            if (v147 <= 1) {
              unint64_t v148 = 1;
            }
            else {
              unint64_t v148 = 4 * v213;
            }
            unint64_t v149 = v142 + v143;
            char v150 = &v217.i8[v142 + v143];
            if (v148) {
              BOOL v151 = (v148 - 1) >> 32 == 0;
            }
            else {
              BOOL v151 = 0;
            }
            uint64_t v152 = v148 & 0x3FFFFFFE0;
            uint64_t v153 = v148 & 0x3FFFFFFF8;
            char v155 = !v151 || v148 < 8;
            long long v156 = &v218.i8[v149];
            BOOL v157 = (long long *)(v208 + 16);
            uint64_t v158 = v144;
            unint64_t v159 = v208;
            do
            {
              uint64_t v160 = (char *)(v145 + v146 * v141);
              char v161 = &v144[64 * v141];
              if ((unint64_t)(&v150[64 * v141] - v160) < 0x20) {
                char v162 = 1;
              }
              else {
                char v162 = v155;
              }
              if (v162)
              {
                int v163 = 0;
                goto LABEL_213;
              }
              if (v148 >= 0x20)
              {
                uint64_t v165 = v157;
                unsigned int v166 = v156;
                uint64_t v167 = v148 & 0x3FFFFFFE0;
                do
                {
                  long long v168 = *v165;
                  *((_OWORD *)v166 - 1) = *(v165 - 1);
                  *(_OWORD *)unsigned int v166 = v168;
                  v166 += 32;
                  v165 += 2;
                  v167 -= 32;
                }
                while (v167);
                if (v148 == v152) {
                  goto LABEL_196;
                }
                uint64_t v164 = v148 & 0x3FFFFFFE0;
                if ((v148 & 0x18) == 0)
                {
                  v160 += v152;
                  v161 += v152;
                  int v163 = v148 & 0xFFFFFFE0;
                  goto LABEL_213;
                }
              }
              else
              {
                uint64_t v164 = 0;
              }
              v161 += v153;
              uint64_t v169 = v164 - v153;
              uint64_t v170 = (uint64_t *)(v159 + v164);
              int v171 = &v158[v164];
              do
              {
                uint64_t v172 = *v170++;
                *(void *)int v171 = v172;
                v171 += 8;
                v169 += 8;
              }
              while (v169);
              if (v148 == v153) {
                goto LABEL_196;
              }
              v160 += v153;
              int v163 = v148 & 0xFFFFFFF8;
LABEL_213:
              unsigned int v173 = v163 + 1;
              do
              {
                char v174 = *v160++;
                *v161++ = v174;
              }
              while (v147 > v173++);
LABEL_196:
              ++v141;
              v156 += 64;
              BOOL v157 = (long long *)((char *)v157 + v146);
              v159 += v146;
              v158 += 64;
            }
            while (v141 != v136);
          }
LABEL_216:
          AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)&v217, 64, v206, v207, v214, v215);
LABEL_217:
          if (v203) {
            memcpy(v202, v81, 0x200uLL);
          }
          BOOL v21 = v38++ == v192 >> 4;
          uint64_t result = v199;
        }
        while (!v21);
        BOOL v21 = v20++ == v181;
      }
      while (!v21);
    }
  }
  return result;
}

uint64_t AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, char a12)
{
  uint64_t v281 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v215 = a8 + a10 - 1;
  uint64_t v233 = a1;
  if (*(void *)(a1 + 168)) {
    int v17 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v17 = 0;
  }
  unsigned int v18 = a5 - 1;
  unsigned int v19 = a6 - 1;
  unsigned int v20 = a8 >> 3;
  unsigned int v214 = v215 >> 3;
  BOOL v21 = (v17 & 0xD00) == 0 || v17 == 768;
  int v22 = v17 & 0xE00;
  int v24 = !v21 && v22 != 1024;
  int v236 = v24;
  uint64_t result = a1;
  if (*(unsigned char *)(a1 + 232))
  {
    unsigned int v26 = *(unsigned __int8 *)(a1 + 255);
    unsigned int v27 = *(unsigned __int8 *)(a1 + 254);
    char v28 = __clz(v18);
    if (1 << v26 >= a6 || a5 >> v27)
    {
      if (!(a6 >> v26) && 1 << v27 < a5)
      {
        if (a6 < 2) {
          unsigned int v31 = 0;
        }
        else {
          unsigned int v31 = __clz(~(-1 << -(char)__clz(v19))) - 32;
        }
        v27 += v26 + v31;
        unsigned int v26 = -v31;
      }
    }
    else
    {
      unsigned int v29 = 32 - __clz(~(-1 << -v28));
      unsigned int v30 = v27 + v26;
      if (a5 < 2) {
        unsigned int v29 = 0;
      }
      unsigned int v26 = v30 - v29;
      unsigned int v27 = v29;
    }
    if (a5 < 2)
    {
      if (v27) {
        goto LABEL_27;
      }
    }
    else if (32 - __clz(~(-1 << -v28)) < v27)
    {
LABEL_27:
      BOOL v228 = 0;
LABEL_32:
      unsigned int v224 = v27 - 4;
      unsigned int v220 = v26 - 3;
      int v33 = -1 << *(unsigned char *)(*(void *)(a1 + 208) + 48);
      unsigned int v212 = (((~v33 + a5) & v33) + ~(-1 << v27)) >> v27;
      goto LABEL_33;
    }
    if (a6 < 2) {
      unsigned int v32 = 0;
    }
    else {
      unsigned int v32 = 32 - __clz(~(-1 << -(char)__clz(v19)));
    }
    BOOL v228 = v32 >= v26;
    goto LABEL_32;
  }
  BOOL v228 = 0;
  unsigned int v212 = 0;
  unsigned int v220 = 0;
  unsigned int v224 = 0;
LABEL_33:
  if (v20 <= v214)
  {
    unsigned int v227 = a7 + a9 - 1;
    unsigned int v211 = a7 >> 4;
    if (a7 >> 4 <= v227 >> 4)
    {
      unsigned int v235 = v18 >> 4;
      unsigned int v210 = v19 >> 3;
      int v234 = (v18 & 0xF) + 1;
      int v209 = (v19 & 7) + 1;
      int v208 = ~(-1 << v220);
      uint32x2_t v34 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0xF00000007);
      int8x8_t v35 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32(vadd_s32((int32x2_t)vshl_u32(v34, (uint32x2_t)0xFFFFFFFCFFFFFFFDLL), (int32x2_t)-1))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x2000000010, v34));
      __int32 v222 = v35.i32[0] | v35.i32[1];
      int8x8_t v219 = v35;
      BOOL v218 = v35.i32[0] != 0;
      BOOL v217 = v35.i32[1] != 0;
      uint64_t v36 = a11;
      unsigned int v226 = a7;
      do
      {
        unsigned int v37 = (8 * v20) | 7;
        if (8 * v20 <= a8) {
          int v38 = a8;
        }
        else {
          int v38 = 8 * v20;
        }
        if (v215 < v37) {
          unsigned int v37 = a8 + a10 - 1;
        }
        int v223 = v38 - 8 * v20;
        int v232 = v37 - v38 + 1;
        unsigned int v39 = v211;
        if (v20 == v210) {
          unsigned int v40 = v209;
        }
        else {
          unsigned int v40 = 8;
        }
        int v41 = v20 & v208;
        uint64_t v231 = a3 + (v38 - a8) * v36;
        unsigned int v216 = v40;
        do
        {
          unsigned int v42 = 16 * v39;
          unsigned int v43 = 16 * (v39 + 1) - 1;
          if (16 * v39 <= a7) {
            int v44 = a7;
          }
          else {
            int v44 = 16 * v39;
          }
          if (v227 < v43) {
            unsigned int v43 = v227;
          }
          int v45 = v43 - v44 + 1;
          if (v39 == v235) {
            unsigned int v46 = v234;
          }
          else {
            unsigned int v46 = 16;
          }
          BOOL v47 = 1;
          if (8 * v20 >= a8 && v42 >= a7)
          {
            int v48 = v234;
            if (v39 != v235) {
              int v48 = 16;
            }
            BOOL v47 = v45 != v48 || v232 != v40;
          }
          if (v228)
          {
            if (v224 | v220)
            {
              int v50 = 0;
              uint64_t v51 = 0;
              int v52 = 1;
              BOOL v53 = v220 != 0;
              BOOL v54 = v224 != 0;
              unsigned int v55 = v220;
              unsigned int v56 = v224;
              do
              {
                --v55;
                if (v53) {
                  v51 |= (unint64_t)(v41 & v52) << v50++;
                }
                else {
                  unsigned int v55 = 0;
                }
                --v56;
                if (v54) {
                  v51 |= (unint64_t)(v39 & ~(-1 << v224) & v52) << v50++;
                }
                else {
                  unsigned int v56 = 0;
                }
                v52 *= 2;
                --v50;
                BOOL v54 = v56 != 0;
                BOOL v53 = v55 != 0;
              }
              while (v56 | v55);
            }
            else
            {
              uint64_t v51 = 0;
            }
            uint64_t v64 = *(void *)(result + 320) * ((v39 >> v224) + (v20 >> v220) * v212) + (v51 << 9);
          }
          else
          {
            if (v222)
            {
              int v57 = 0;
              uint64_t v58 = 0;
              int v59 = 1;
              BOOL v60 = v218;
              BOOL v61 = v217;
              __int32 v62 = v219.i32[0];
              __int32 v63 = v219.i32[1];
              do
              {
                --v62;
                if (v60) {
                  v58 |= (unint64_t)(v59 & v20) << v57++;
                }
                else {
                  __int32 v62 = 0;
                }
                --v63;
                if (v61) {
                  v58 |= (unint64_t)(v59 & v39) << v57++;
                }
                else {
                  __int32 v63 = 0;
                }
                v59 *= 2;
                --v57;
                BOOL v61 = v63 != 0;
                BOOL v60 = v62 != 0;
              }
              while (v63 | v62);
            }
            else
            {
              uint64_t v58 = 0;
            }
            uint64_t v64 = v58 << 9;
          }
          unsigned int v65 = *(_DWORD *)(result + 128) >> (*(unsigned char *)(result + 144) + a12);
          if (v65 <= 1) {
            unsigned int v65 = 1;
          }
          unsigned int v66 = v65 + 15;
          if (v66 < 0x20) {
            unsigned int v67 = 0;
          }
          else {
            unsigned int v67 = 32 - __clz(~(-1 << -(char)__clz((v66 >> 4) - 1)));
          }
          unsigned int v68 = *(_DWORD *)(result + 132) >> (*(unsigned char *)(result + 144) + a12);
          if (v68 <= 1) {
            unsigned int v68 = 1;
          }
          unsigned int v69 = v68 + 7;
          if (v69 < 0x10)
          {
            unsigned int v70 = 0;
            if (!v67)
            {
LABEL_110:
              uint64_t v72 = 0;
              goto LABEL_111;
            }
          }
          else
          {
            unsigned int v70 = 32 - __clz(~(-1 << -(char)__clz((v69 >> 3) - 1)));
            if (!(v70 | v67)) {
              goto LABEL_110;
            }
          }
          int v71 = 0;
          uint64_t v72 = 0;
          BOOL v73 = v67 != 0;
          BOOL v74 = v70 != 0;
          int v75 = 1;
          do
          {
            --v67;
            if (v73) {
              v72 |= (unint64_t)(v75 & v39) << v71++;
            }
            else {
              unsigned int v67 = 0;
            }
            --v70;
            if (v74) {
              v72 |= (unint64_t)(v75 & v20) << v71++;
            }
            else {
              unsigned int v70 = 0;
            }
            v75 *= 2;
            --v71;
            BOOL v74 = v70 != 0;
            BOOL v73 = v67 != 0;
          }
          while (v70 | v67);
LABEL_111:
          int v76 = v46 < 0x10 || v47;
          int64x2_t v77 = (char *)(a4 + 8 * v72);
          uint64_t v78 = v231 + 4 * (v44 - a7);
          int64x2_t v79 = (void *)(a2 + v64);
          if (v40 < 8) {
            int v80 = 1;
          }
          else {
            int v80 = v76;
          }
          if (v236)
          {
            if (v80)
            {
              int v221 = v45;
              int64x2_t v81 = v79;
              BOOL v82 = v47;
              memcpy(__dst, v79, sizeof(__dst));
              unsigned int v42 = 16 * v39;
              BOOL v47 = v82;
              uint64_t v36 = a11;
              unsigned int v40 = v216;
              int v45 = v221;
              char v83 = __dst;
              int64x2_t v79 = v81;
              uint64_t result = v233;
LABEL_121:
              float64x2_t v225 = v79;
              block[0] = MEMORY[0x263EF8330];
              block[1] = 3221225472;
              block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE8ELj2ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
              block[3] = &__block_descriptor_90_e5_v8__0l;
              block[4] = result;
              int64x2_t v238 = (int64x2_t *)v83;
              unsigned __int8 v246 = v46;
              unsigned __int8 v247 = v40;
              unsigned int v242 = v223;
              unsigned int v243 = v44 - v42;
              int64x2_t v239 = v77;
              uint64_t v240 = v78;
              uint64_t v241 = v36;
              unsigned int v244 = v232;
              unsigned int v245 = v45;
              if (v47)
              {
                dispatch_sync(*(dispatch_queue_t *)(*(void *)(result + 8) + 7384), block);
                uint64_t result = v233;
                a7 = v226;
                int v41 = v20 & v208;
                goto LABEL_123;
              }
              unsigned int v101 = *v77;
              if (v101 == 63)
              {
                int64x2_t v104 = *((int64x2_t *)v83 + 1);
                int64x2_t v105 = (const double *)(v83 + 32);
                float64x2x2_t v282 = vld2q_f64(v105);
                int64x2_t v106 = vzip2q_s64(*(int64x2_t *)v83, v104);
                int64x2_t v249 = vzip1q_s64(*(int64x2_t *)v83, v104);
                int64x2_t v253 = v106;
                float64x2_t v257 = v282.val[0];
                float64x2_t v261 = v282.val[1];
                uint64_t v102 = 64;
              }
              else if (v101 == 1)
              {
                int16x8_t v103 = vld1q_dup_s16((const __int16 *)v83);
                int64x2_t v249 = (int64x2_t)v103;
                int64x2_t v253 = (int64x2_t)v103;
                float64x2_t v257 = (float64x2_t)v103;
                float64x2_t v261 = (float64x2_t)v103;
                uint64_t v102 = 2;
              }
              else if (*v77)
              {
                uint64_t v102 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v249, 64, (uint64_t)v83, v101);
              }
              else
              {
                uint64_t v102 = 0;
                int64x2_t v249 = 0uLL;
                int64x2_t v253 = 0uLL;
                float64x2_t v257 = 0uLL;
                float64x2_t v261 = 0uLL;
              }
              uint64_t v107 = (uint64_t)&v83[v102];
              unsigned int v108 = v77[1];
              if (v108 == 63)
              {
                int64x2_t v111 = *(int64x2_t *)(v107 + 16);
                int64x2_t v112 = (const double *)(v107 + 32);
                float64x2x2_t v283 = vld2q_f64(v112);
                int64x2_t v113 = vzip2q_s64(*(int64x2_t *)v107, v111);
                int64x2_t v250 = vzip1q_s64(*(int64x2_t *)v107, v111);
                int64x2_t v254 = v113;
                float64x2_t v258 = v283.val[0];
                float64x2_t v262 = v283.val[1];
                uint64_t v109 = 64;
              }
              else if (v108 == 1)
              {
                int16x8_t v110 = vld1q_dup_s16((const __int16 *)v107);
                int64x2_t v250 = (int64x2_t)v110;
                int64x2_t v254 = (int64x2_t)v110;
                float64x2_t v258 = (float64x2_t)v110;
                float64x2_t v262 = (float64x2_t)v110;
                uint64_t v109 = 2;
              }
              else if (v77[1])
              {
                uint64_t v109 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v250, 64, v107, v108);
              }
              else
              {
                uint64_t v109 = 0;
                int64x2_t v250 = 0uLL;
                int64x2_t v254 = 0uLL;
                float64x2_t v258 = 0uLL;
                float64x2_t v262 = 0uLL;
              }
              uint64_t v114 = v107 + v109;
              unsigned int v115 = v77[2];
              if (v115 == 63)
              {
                int64x2_t v118 = *(int64x2_t *)(v114 + 16);
                int64x2_t v119 = (const double *)(v114 + 32);
                float64x2x2_t v284 = vld2q_f64(v119);
                int64x2_t v120 = vzip2q_s64(*(int64x2_t *)v114, v118);
                int64x2_t v265 = vzip1q_s64(*(int64x2_t *)v114, v118);
                int64x2_t v269 = v120;
                float64x2_t v273 = v284.val[0];
                float64x2_t v277 = v284.val[1];
                uint64_t v116 = 64;
              }
              else if (v115 == 1)
              {
                int16x8_t v117 = vld1q_dup_s16((const __int16 *)v114);
                int64x2_t v265 = (int64x2_t)v117;
                int64x2_t v269 = (int64x2_t)v117;
                float64x2_t v273 = (float64x2_t)v117;
                float64x2_t v277 = (float64x2_t)v117;
                uint64_t v116 = 2;
              }
              else if (v77[2])
              {
                uint64_t v116 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v265, 64, v114, v115);
              }
              else
              {
                uint64_t v116 = 0;
                int64x2_t v265 = 0uLL;
                int64x2_t v269 = 0uLL;
                float64x2_t v273 = 0uLL;
                float64x2_t v277 = 0uLL;
              }
              uint64_t v121 = v114 + v116;
              unsigned int v122 = v77[3];
              if (v122 == 63)
              {
                int64x2_t v125 = *(int64x2_t *)(v121 + 16);
                int64x2_t v126 = (const double *)(v121 + 32);
                float64x2x2_t v285 = vld2q_f64(v126);
                int64x2_t v127 = vzip2q_s64(*(int64x2_t *)v121, v125);
                int64x2_t v266 = vzip1q_s64(*(int64x2_t *)v121, v125);
                int64x2_t v270 = v127;
                float64x2_t v274 = v285.val[0];
                float64x2_t v278 = v285.val[1];
                uint64_t v123 = 64;
              }
              else if (v122 == 1)
              {
                int16x8_t v124 = vld1q_dup_s16((const __int16 *)v121);
                int64x2_t v266 = (int64x2_t)v124;
                int64x2_t v270 = (int64x2_t)v124;
                float64x2_t v274 = (float64x2_t)v124;
                float64x2_t v278 = (float64x2_t)v124;
                uint64_t v123 = 2;
              }
              else if (v77[3])
              {
                uint64_t v123 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v266, 64, v121, v122);
              }
              else
              {
                uint64_t v123 = 0;
                int64x2_t v266 = 0uLL;
                int64x2_t v270 = 0uLL;
                float64x2_t v274 = 0uLL;
                float64x2_t v278 = 0uLL;
              }
              uint64_t v128 = v121 + v123;
              unsigned int v129 = v77[4];
              if (v129 == 63)
              {
                int64x2_t v132 = *(int64x2_t *)(v128 + 16);
                int64x2_t v133 = (const double *)(v128 + 32);
                float64x2x2_t v286 = vld2q_f64(v133);
                int64x2_t v134 = vzip2q_s64(*(int64x2_t *)v128, v132);
                int64x2_t v251 = vzip1q_s64(*(int64x2_t *)v128, v132);
                int64x2_t v255 = v134;
                float64x2_t v259 = v286.val[0];
                float64x2_t v263 = v286.val[1];
                uint64_t v130 = 64;
              }
              else if (v129 == 1)
              {
                int16x8_t v131 = vld1q_dup_s16((const __int16 *)v128);
                int64x2_t v251 = (int64x2_t)v131;
                int64x2_t v255 = (int64x2_t)v131;
                float64x2_t v259 = (float64x2_t)v131;
                float64x2_t v263 = (float64x2_t)v131;
                uint64_t v130 = 2;
              }
              else if (v77[4])
              {
                uint64_t v130 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v251, 64, v128, v129);
              }
              else
              {
                uint64_t v130 = 0;
                int64x2_t v251 = 0uLL;
                int64x2_t v255 = 0uLL;
                float64x2_t v259 = 0uLL;
                float64x2_t v263 = 0uLL;
              }
              uint64_t v135 = v128 + v130;
              unsigned int v136 = v77[5];
              if (v136 == 63)
              {
                int64x2_t v139 = *(int64x2_t *)(v135 + 16);
                int64x2_t v140 = (const double *)(v135 + 32);
                float64x2x2_t v287 = vld2q_f64(v140);
                int64x2_t v141 = vzip2q_s64(*(int64x2_t *)v135, v139);
                int64x2_t v252 = vzip1q_s64(*(int64x2_t *)v135, v139);
                int64x2_t v256 = v141;
                float64x2_t v260 = v287.val[0];
                float64x2_t v264 = v287.val[1];
                uint64_t v137 = 64;
              }
              else if (v136 == 1)
              {
                int16x8_t v138 = vld1q_dup_s16((const __int16 *)v135);
                int64x2_t v252 = (int64x2_t)v138;
                int64x2_t v256 = (int64x2_t)v138;
                float64x2_t v260 = (float64x2_t)v138;
                float64x2_t v264 = (float64x2_t)v138;
                uint64_t v137 = 2;
              }
              else if (v77[5])
              {
                uint64_t v137 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v252, 64, v135, v136);
              }
              else
              {
                uint64_t v137 = 0;
                int64x2_t v252 = 0uLL;
                int64x2_t v256 = 0uLL;
                float64x2_t v260 = 0uLL;
                float64x2_t v264 = 0uLL;
              }
              uint64_t v142 = v135 + v137;
              unsigned int v143 = v77[6];
              if (v143 == 63)
              {
                int64x2_t v146 = *(int64x2_t *)(v142 + 16);
                unint64_t v147 = (const double *)(v142 + 32);
                float64x2x2_t v288 = vld2q_f64(v147);
                int64x2_t v148 = vzip2q_s64(*(int64x2_t *)v142, v146);
                int64x2_t v267 = vzip1q_s64(*(int64x2_t *)v142, v146);
                int64x2_t v271 = v148;
                float64x2_t v275 = v288.val[0];
                float64x2_t v279 = v288.val[1];
                uint64_t v144 = 64;
              }
              else if (v143 == 1)
              {
                int16x8_t v145 = vld1q_dup_s16((const __int16 *)v142);
                int64x2_t v267 = (int64x2_t)v145;
                int64x2_t v271 = (int64x2_t)v145;
                float64x2_t v275 = (float64x2_t)v145;
                float64x2_t v279 = (float64x2_t)v145;
                uint64_t v144 = 2;
              }
              else if (v77[6])
              {
                uint64_t v144 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v267, 64, v142, v143);
              }
              else
              {
                uint64_t v144 = 0;
                int64x2_t v267 = 0uLL;
                int64x2_t v271 = 0uLL;
                float64x2_t v275 = 0uLL;
                float64x2_t v279 = 0uLL;
              }
              uint64_t v149 = v142 + v144;
              unsigned int v150 = v77[7];
              if (v150 == 63)
              {
                int64x2_t v153 = *(int64x2_t *)(v149 + 16);
                unint64_t v154 = (const double *)(v149 + 32);
                float64x2x2_t v289 = vld2q_f64(v154);
                int64x2_t v155 = vzip2q_s64(*(int64x2_t *)v149, v153);
                int64x2_t v268 = vzip1q_s64(*(int64x2_t *)v149, v153);
                int64x2_t v272 = v155;
                float64x2_t v276 = v289.val[0];
                float64x2_t v280 = v289.val[1];
                uint64_t v151 = v244;
                if (v244) {
                  goto LABEL_199;
                }
              }
              else
              {
                if (v150 != 1)
                {
                  if (v77[7])
                  {
                    AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v268, 64, v149, v150);
                    uint64_t v151 = v244;
                    if (!v244) {
                      goto LABEL_233;
                    }
                  }
                  else
                  {
                    int64x2_t v268 = 0uLL;
                    int64x2_t v272 = 0uLL;
                    float64x2_t v276 = 0uLL;
                    float64x2_t v280 = 0uLL;
                    uint64_t v151 = v244;
                    if (!v244) {
                      goto LABEL_233;
                    }
                  }
LABEL_199:
                  if (!v245) {
                    goto LABEL_233;
                  }
                  uint64_t v156 = 0;
                  unint64_t v157 = (unint64_t)v242 << 6;
                  uint64_t v158 = 4 * v243;
                  unint64_t v159 = &v249.i8[v157 + v158];
                  uint64_t v160 = v240;
                  uint64_t v161 = v241;
                  unint64_t v162 = 4 * v245;
                  if (v162 <= 1) {
                    unint64_t v163 = 1;
                  }
                  else {
                    unint64_t v163 = 4 * v245;
                  }
                  unint64_t v164 = v157 + v158;
                  uint64_t v165 = &v249.i8[v157 + v158];
                  if (v163) {
                    BOOL v166 = (v163 - 1) >> 32 == 0;
                  }
                  else {
                    BOOL v166 = 0;
                  }
                  uint64_t v167 = v163 & 0x3FFFFFFE0;
                  uint64_t v168 = v163 & 0x3FFFFFFF8;
                  char v170 = !v166 || v163 < 8;
                  int v171 = &v250.i8[v164];
                  uint64_t v172 = (long long *)(v240 + 16);
                  unsigned int v173 = v159;
                  uint64_t v174 = v240;
                  while (2)
                  {
                    uint64_t v175 = (char *)(v160 + v161 * v156);
                    int v176 = &v159[64 * v156];
                    if ((unint64_t)(&v165[64 * v156] - v175) < 0x20) {
                      char v177 = 1;
                    }
                    else {
                      char v177 = v170;
                    }
                    if (v177)
                    {
                      int v178 = 0;
LABEL_230:
                      unsigned int v188 = v178 + 1;
                      do
                      {
                        char v189 = *v175++;
                        *v176++ = v189;
                      }
                      while (v162 > v188++);
                    }
                    else
                    {
                      if (v163 >= 0x20)
                      {
                        char v180 = v172;
                        unsigned int v181 = v171;
                        uint64_t v182 = v163 & 0x3FFFFFFE0;
                        do
                        {
                          long long v183 = *v180;
                          *((_OWORD *)v181 - 1) = *(v180 - 1);
                          *(_OWORD *)unsigned int v181 = v183;
                          v181 += 32;
                          v180 += 2;
                          v182 -= 32;
                        }
                        while (v182);
                        if (v163 == v167) {
                          goto LABEL_213;
                        }
                        uint64_t v179 = v163 & 0x3FFFFFFE0;
                        if ((v163 & 0x18) == 0)
                        {
                          v175 += v167;
                          v176 += v167;
                          int v178 = v163 & 0xFFFFFFE0;
                          goto LABEL_230;
                        }
                      }
                      else
                      {
                        uint64_t v179 = 0;
                      }
                      v176 += v168;
                      uint64_t v184 = v179 - v168;
                      int8x8_t v185 = (uint64_t *)(v174 + v179);
                      unsigned int v186 = &v173[v179];
                      do
                      {
                        uint64_t v187 = *v185++;
                        *(void *)unsigned int v186 = v187;
                        v186 += 8;
                        v184 += 8;
                      }
                      while (v184);
                      if (v163 != v168)
                      {
                        v175 += v168;
                        int v178 = v163 & 0xFFFFFFF8;
                        goto LABEL_230;
                      }
                    }
LABEL_213:
                    ++v156;
                    v171 += 64;
                    uint64_t v172 = (long long *)((char *)v172 + v161);
                    v174 += v161;
                    v173 += 64;
                    if (v156 == v151) {
                      goto LABEL_233;
                    }
                    continue;
                  }
                }
                int16x8_t v152 = vld1q_dup_s16((const __int16 *)v149);
                int64x2_t v268 = (int64x2_t)v152;
                int64x2_t v272 = (int64x2_t)v152;
                float64x2_t v276 = (float64x2_t)v152;
                float64x2_t v280 = (float64x2_t)v152;
                uint64_t v151 = v244;
                if (v244) {
                  goto LABEL_199;
                }
              }
LABEL_233:
              uint64_t v191 = 0;
              unsigned int v192 = v238;
              BOOL v193 = v239;
              int v194 = v246;
              int v195 = v247;
              a7 = v226;
              uint64_t result = v233;
              int v41 = v20 & v208;
              do
              {
                uint64_t v203 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,2u>::kSubblockPositions[v191 + 1];
                uint64_t v204 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,2u>::kSubblockPositions[v191];
                unsigned int v205 = (v194 - 4 * v204) & ~((v194 - 4 * (int)v204) >> 31);
                if (v205 >= 4) {
                  unsigned int v205 = 4;
                }
                unsigned int v206 = (v195 - 4 * v203) & ~((v195 - 4 * (int)v203) >> 31);
                if (v206 >= 4) {
                  unsigned int v206 = 4;
                }
                if (v205) {
                  BOOL v207 = v206 == 0;
                }
                else {
                  BOOL v207 = 1;
                }
                if (v207)
                {
                  char v202 = 0;
                }
                else
                {
                  uint64_t v196 = &v249 + 16 * v203 + v204;
                  int64x2_t v197 = v196[4];
                  int64x2_t v198 = vzip1q_s64(*v196, v197);
                  int64x2_t v199 = vzip2q_s64(*v196, v197);
                  int64x2_t v200 = v196[8];
                  int64x2_t v201 = v196[12];
                  *unsigned int v192 = v198;
                  v192[1] = v199;
                  v192[2] = vzip1q_s64(v200, v201);
                  v192[3] = vzip2q_s64(v200, v201);
                  v192 += 4;
                  char v202 = 63;
                }
                *v193++ = v202;
                v191 += 2;
              }
              while (v191 != 16);
LABEL_123:
              unsigned int v84 = v39 + 1;
              int64x2_t v79 = v225;
              if (!v236) {
                goto LABEL_47;
              }
LABEL_139:
              memcpy(v79, v83, 0x200uLL);
              int v41 = v20 & v208;
              uint64_t result = v233;
              goto LABEL_47;
            }
            char v83 = __dst;
          }
          else
          {
            char v83 = v79;
            if (v80) {
              goto LABEL_121;
            }
          }
          uint64_t v85 = 0;
          unsigned int v86 = (int64x2_t *)v83;
          do
          {
            uint64_t v96 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,2u>::kSubblockPositions[v85 + 1];
            uint64_t v97 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,2u>::kSubblockPositions[v85];
            unsigned int v98 = (v46 - 4 * v97) & ~((int)(v46 - 4 * v97) >> 31);
            if (v98 >= 4) {
              unsigned int v98 = 4;
            }
            unsigned int v99 = (v40 - 4 * v96) & ~((int)(v40 - 4 * v96) >> 31);
            if (v99 >= 4) {
              unsigned int v99 = 4;
            }
            if (v98) {
              BOOL v100 = v99 == 0;
            }
            else {
              BOOL v100 = 1;
            }
            if (v100)
            {
              char v95 = 0;
            }
            else
            {
              uint64_t v87 = (int64x2_t *)(v78 + 4 * a11 * v96 + 16 * v97);
              int64x2_t v88 = *(int64x2_t *)((char *)v87 + v36);
              int64x2_t v89 = vzip1q_s64(*v87, v88);
              int64x2_t v90 = vzip2q_s64(*v87, v88);
              int64x2_t v91 = (int64x2_t *)((char *)v87 + 2 * a11);
              int64x2_t v92 = *(int64x2_t *)((char *)v91 + v36);
              int64x2_t v93 = vzip1q_s64(*v91, v92);
              int64x2_t v94 = vzip2q_s64(*v91, v92);
              *unsigned int v86 = v89;
              v86[1] = v90;
              v86[2] = v93;
              v86[3] = v94;
              v86 += 4;
              char v95 = 63;
            }
            *v77++ = v95;
            v85 += 2;
          }
          while (v85 != 16);
          a7 = v226;
          unsigned int v84 = v39 + 1;
          if (v236) {
            goto LABEL_139;
          }
LABEL_47:
          BOOL v21 = v39 == v227 >> 4;
          unsigned int v39 = v84;
        }
        while (!v21);
        BOOL v21 = v20++ == v214;
      }
      while (!v21);
    }
  }
  return result;
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, uint64_t a7, unsigned int a8, int a9, int a10, uint64_t a11, int a12)
{
  uint64_t v246 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  uint64_t v17 = a1;
  unsigned int v195 = a8;
  unsigned int v18 = a8 >> 3;
  unsigned int v180 = a8 + a10 - 1;
  unsigned int v182 = v180 >> 3;
  unsigned int v19 = *(unsigned __int8 *)(*(void *)(a1 + 208) + 88);
  unsigned int v20 = *(_DWORD *)(a1 + 112);
  uint64_t v196 = v17;
  if (*(void *)(v17 + 168))
  {
    __int16 CacheMode = IOSurfaceGetCacheMode();
    uint64_t v17 = v196;
    int v22 = CacheMode & 0xF00;
  }
  else
  {
    int v22 = 0;
  }
  BOOL v23 = (v22 & 0xD00) == 0 || v22 == 768;
  int v24 = v22 & 0xE00;
  int v26 = !v23 && v24 != 1024;
  int v200 = v26;
  BOOL isLevelTiled = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::isLevelTiled(v17, *(_DWORD *)(v17 + 144) + a12);
  uint64_t v28 = v196;
  BOOL v189 = isLevelTiled;
  if (v18 <= v182)
  {
    unsigned int v188 = a7 + a9 - 1;
    unsigned int v179 = a7 >> 4;
    if (a7 >> 4 <= v188 >> 4)
    {
      unsigned int v176 = a5 - 1;
      unsigned int v198 = (a5 - 1) >> 4;
      int v197 = ((a5 - 1) & 0xF) + 1;
      int v177 = ((a6 - 1) & 7) + 1;
      unsigned int v178 = (a6 - 1) >> 3;
      uint32x2_t v29 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0xF00000007);
      int8x8_t v30 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32(vadd_s32((int32x2_t)vshl_u32(v29, (uint32x2_t)0xFFFFFFFCFFFFFFFDLL), (int32x2_t)-1))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x2000000010, v29));
      __int32 v187 = v30.i32[0] | v30.i32[1];
      int8x8_t v186 = v30;
      BOOL v185 = v30.i32[0] != 0;
      BOOL v184 = v30.i32[1] != 0;
      unint64_t v175 = 8 * v20 * (unint64_t)v19;
      do
      {
        unsigned int v31 = (8 * v18) | 7;
        if (8 * v18 <= v195) {
          int v32 = v195;
        }
        else {
          int v32 = 8 * v18;
        }
        unsigned int v33 = v179;
        if (v180 < v31) {
          unsigned int v31 = v180;
        }
        unsigned int v194 = 8 * v18;
        int v183 = v32 - 8 * v18;
        int v193 = v31 - v32 + 1;
        int v34 = v177;
        if (v18 != v178) {
          int v34 = 8;
        }
        unsigned int v201 = v34;
        uint64_t v192 = a3 + (v32 - v195) * a11;
        do
        {
          unsigned int v35 = 16 * v33;
          unsigned int v36 = 16 * (v33 + 1) - 1;
          if (16 * v33 <= a7) {
            int v37 = a7;
          }
          else {
            int v37 = 16 * v33;
          }
          if (v188 < v36) {
            unsigned int v36 = v188;
          }
          int v38 = v36 - v37 + 1;
          if (v33 == v198) {
            unsigned int v39 = v197;
          }
          else {
            unsigned int v39 = 16;
          }
          BOOL v40 = 1;
          if (v194 >= v195 && v35 >= a7)
          {
            int v41 = v197;
            if (v33 != v198) {
              int v41 = 16;
            }
            BOOL v40 = v38 != v41 || v193 != v201;
          }
          if (v189)
          {
            unsigned int v62 = 0;
            uint64_t v63 = v175 >> (*(unsigned char *)(v28 + 57) != 0);
            char v64 = 1;
            if (v63 > 127)
            {
              if (v63 > 511)
              {
                if (v63 == 512)
                {
                  char v65 = 0;
                  unsigned int v62 = 16;
                  unsigned int v66 = 16;
                }
                else
                {
                  char v65 = 1;
                  unsigned int v66 = 0;
                  if (v63 == 1024)
                  {
                    unsigned int v66 = 8;
                    unsigned int v62 = 16;
                  }
                }
              }
              else if (v63 == 128)
              {
                char v64 = 0;
                char v65 = 0;
                unsigned int v62 = 32;
                unsigned int v66 = 32;
              }
              else
              {
                char v65 = 1;
                unsigned int v66 = 0;
                if (v63 == 256)
                {
                  char v64 = 0;
                  char v65 = 0;
                  unsigned int v66 = 16;
                  unsigned int v62 = 32;
                }
              }
            }
            else
            {
              char v65 = 1;
              unsigned int v66 = 0;
              switch(v63)
              {
                case 4:
                  char v64 = 0;
                  char v65 = 0;
                  unsigned int v66 = 128;
                  unsigned int v62 = 256;
                  break;
                case 5:
                case 6:
                case 7:
                case 9:
                case 10:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 17:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                  break;
                case 8:
                  char v64 = 0;
                  char v65 = 0;
                  unsigned int v62 = 128;
                  unsigned int v66 = 128;
                  break;
                case 16:
                  char v64 = 0;
                  char v65 = 0;
                  unsigned int v66 = 64;
                  unsigned int v62 = 128;
                  break;
                case 32:
                  char v64 = 0;
                  char v65 = 0;
                  unsigned int v62 = 64;
                  unsigned int v66 = 64;
                  break;
                default:
                  if (v63 == 64)
                  {
                    char v64 = 0;
                    char v65 = 0;
                    unsigned int v66 = 32;
                    unsigned int v62 = 64;
                  }
                  break;
              }
            }
            unsigned int v164 = (v62 >> 4) - 1;
            if (v64) {
              unsigned int v165 = 0;
            }
            else {
              unsigned int v165 = 32 - __clz(~(-1 << -(char)__clz(v164)));
            }
            unsigned int v166 = (v66 >> 3) - 1;
            if (v65)
            {
              unsigned int v167 = 0;
              if (v165) {
                goto LABEL_210;
              }
            }
            else
            {
              unsigned int v167 = 32 - __clz(~(-1 << -(char)__clz(v166)));
              if (v167 | v165)
              {
LABEL_210:
                int v168 = 0;
                uint64_t v169 = 0;
                int v170 = v33 & v164;
                int v171 = v18 & v166;
                BOOL v172 = v167 != 0;
                BOOL v173 = v165 != 0;
                int v174 = 1;
                do
                {
                  --v167;
                  if (v172) {
                    v169 |= (unint64_t)(v174 & v171) << v168++;
                  }
                  else {
                    unsigned int v167 = 0;
                  }
                  --v165;
                  if (v173) {
                    v169 |= (unint64_t)(v174 & v170) << v168++;
                  }
                  else {
                    unsigned int v165 = 0;
                  }
                  v174 *= 2;
                  --v168;
                  BOOL v173 = v165 != 0;
                  BOOL v172 = v167 != 0;
                }
                while (v165 | v167);
                goto LABEL_222;
              }
            }
            uint64_t v169 = 0;
LABEL_222:
            unint64_t v50 = ((unint64_t)(v35 / v62 + v194 / v66 * ((v62 + v176) / v62)) << 14) + (v169 << 9);
            goto LABEL_58;
          }
          if (v187)
          {
            int v43 = 0;
            uint64_t v44 = 0;
            int v45 = 1;
            BOOL v46 = v185;
            BOOL v47 = v184;
            __int32 v48 = v186.i32[0];
            __int32 v49 = v186.i32[1];
            do
            {
              --v48;
              if (v46) {
                v44 |= (unint64_t)(v45 & v18) << v43++;
              }
              else {
                __int32 v48 = 0;
              }
              --v49;
              if (v47) {
                v44 |= (unint64_t)(v45 & v33) << v43++;
              }
              else {
                __int32 v49 = 0;
              }
              v45 *= 2;
              --v43;
              BOOL v47 = v49 != 0;
              BOOL v46 = v48 != 0;
            }
            while (v49 | v48);
          }
          else
          {
            uint64_t v44 = 0;
          }
          unint64_t v50 = v44 << 9;
LABEL_58:
          unsigned int v51 = *(_DWORD *)(v28 + 128) >> (*(unsigned char *)(v28 + 144) + a12);
          if (v51 <= 1) {
            unsigned int v51 = 1;
          }
          unsigned int v52 = v51 + 15;
          if (v52 < 0x20) {
            unsigned int v53 = 0;
          }
          else {
            unsigned int v53 = 32 - __clz(~(-1 << -(char)__clz((v52 >> 4) - 1)));
          }
          unsigned int v54 = *(_DWORD *)(v28 + 132) >> (*(unsigned char *)(v28 + 144) + a12);
          if (v54 <= 1) {
            unsigned int v54 = 1;
          }
          unsigned int v55 = v54 + 7;
          if (v55 < 0x10)
          {
            unsigned int v56 = 0;
            if (!v53)
            {
LABEL_80:
              uint64_t v58 = 0;
              goto LABEL_81;
            }
          }
          else
          {
            unsigned int v56 = 32 - __clz(~(-1 << -(char)__clz((v55 >> 3) - 1)));
            if (!(v56 | v53)) {
              goto LABEL_80;
            }
          }
          int v57 = 0;
          uint64_t v58 = 0;
          BOOL v59 = v53 != 0;
          BOOL v60 = v56 != 0;
          int v61 = 1;
          do
          {
            --v53;
            if (v59) {
              v58 |= (unint64_t)(v61 & v33) << v57++;
            }
            else {
              unsigned int v53 = 0;
            }
            --v56;
            if (v60) {
              v58 |= (unint64_t)(v61 & v18) << v57++;
            }
            else {
              unsigned int v56 = 0;
            }
            v61 *= 2;
            --v57;
            BOOL v60 = v56 != 0;
            BOOL v59 = v53 != 0;
          }
          while (v56 | v53);
LABEL_81:
          uint64_t v67 = a7;
          int v68 = v39 < 0x10 || v40;
          unsigned int v69 = (char *)(a4 + 8 * v58);
          unint64_t v70 = v192 + 4 * (v37 - a7);
          int v71 = (unsigned char *)(a2 + v50);
          if (v201 < 8) {
            int v72 = 1;
          }
          else {
            int v72 = v68;
          }
          __src = v71;
          if (v200)
          {
            if (!v72)
            {
              int v71 = __dst;
LABEL_94:
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock(v70, a11, (uint16x8_t *)v71, v69, v39, v201);
              goto LABEL_95;
            }
            int v73 = v38;
            memcpy(__dst, __src, sizeof(__dst));
            int v38 = v73;
            int v71 = __dst;
            uint64_t v28 = v196;
          }
          else if (!v72)
          {
            goto LABEL_94;
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE8ELj2ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = v28;
          uint64_t v203 = (uint16x8_t *)v71;
          unsigned __int8 v211 = v39;
          unsigned __int8 v212 = v201;
          unsigned int v207 = v183;
          unsigned int v208 = v37 - v35;
          uint64_t v204 = v69;
          unint64_t v205 = v70;
          uint64_t v206 = a11;
          unsigned int v209 = v193;
          unsigned int v210 = v38;
          if (!v40)
          {
            unsigned int v74 = *v69;
            a7 = v67;
            if (v74 == 63)
            {
              int64x2_t v77 = *((int64x2_t *)v71 + 1);
              uint64_t v78 = (const double *)(v71 + 32);
              float64x2x2_t v247 = vld2q_f64(v78);
              int64x2_t v79 = vzip2q_s64(*(int64x2_t *)v71, v77);
              int64x2_t v214 = vzip1q_s64(*(int64x2_t *)v71, v77);
              int64x2_t v218 = v79;
              float64x2_t v222 = v247.val[0];
              float64x2_t v226 = v247.val[1];
              uint64_t v75 = 64;
            }
            else if (v74 == 1)
            {
              int16x8_t v76 = vld1q_dup_s16((const __int16 *)v71);
              int64x2_t v214 = (int64x2_t)v76;
              int64x2_t v218 = (int64x2_t)v76;
              float64x2_t v222 = (float64x2_t)v76;
              float64x2_t v226 = (float64x2_t)v76;
              uint64_t v75 = 2;
            }
            else if (*v69)
            {
              uint64_t v75 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v214, 64, (uint64_t)v71, v74);
            }
            else
            {
              uint64_t v75 = 0;
              int64x2_t v214 = 0uLL;
              int64x2_t v218 = 0uLL;
              float64x2_t v222 = 0uLL;
              float64x2_t v226 = 0uLL;
            }
            uint64_t v80 = (uint64_t)&v71[v75];
            unsigned int v81 = v69[1];
            if (v81 == 63)
            {
              int64x2_t v84 = *(int64x2_t *)(v80 + 16);
              uint64_t v85 = (const double *)(v80 + 32);
              float64x2x2_t v248 = vld2q_f64(v85);
              int64x2_t v86 = vzip2q_s64(*(int64x2_t *)v80, v84);
              int64x2_t v215 = vzip1q_s64(*(int64x2_t *)v80, v84);
              int64x2_t v219 = v86;
              float64x2_t v223 = v248.val[0];
              float64x2_t v227 = v248.val[1];
              uint64_t v82 = 64;
            }
            else if (v81 == 1)
            {
              int16x8_t v83 = vld1q_dup_s16((const __int16 *)v80);
              int64x2_t v215 = (int64x2_t)v83;
              int64x2_t v219 = (int64x2_t)v83;
              float64x2_t v223 = (float64x2_t)v83;
              float64x2_t v227 = (float64x2_t)v83;
              uint64_t v82 = 2;
            }
            else if (v69[1])
            {
              uint64_t v82 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v215, 64, v80, v81);
            }
            else
            {
              uint64_t v82 = 0;
              int64x2_t v215 = 0uLL;
              int64x2_t v219 = 0uLL;
              float64x2_t v223 = 0uLL;
              float64x2_t v227 = 0uLL;
            }
            uint64_t v87 = v80 + v82;
            unsigned int v88 = v69[2];
            if (v88 == 63)
            {
              int64x2_t v91 = *(int64x2_t *)(v87 + 16);
              int64x2_t v92 = (const double *)(v87 + 32);
              float64x2x2_t v249 = vld2q_f64(v92);
              int64x2_t v93 = vzip2q_s64(*(int64x2_t *)v87, v91);
              int64x2_t v230 = vzip1q_s64(*(int64x2_t *)v87, v91);
              int64x2_t v234 = v93;
              float64x2_t v238 = v249.val[0];
              float64x2_t v242 = v249.val[1];
              uint64_t v89 = 64;
            }
            else if (v88 == 1)
            {
              int16x8_t v90 = vld1q_dup_s16((const __int16 *)v87);
              int64x2_t v230 = (int64x2_t)v90;
              int64x2_t v234 = (int64x2_t)v90;
              float64x2_t v238 = (float64x2_t)v90;
              float64x2_t v242 = (float64x2_t)v90;
              uint64_t v89 = 2;
            }
            else if (v69[2])
            {
              uint64_t v89 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v230, 64, v87, v88);
            }
            else
            {
              uint64_t v89 = 0;
              int64x2_t v230 = 0uLL;
              int64x2_t v234 = 0uLL;
              float64x2_t v238 = 0uLL;
              float64x2_t v242 = 0uLL;
            }
            uint64_t v94 = v87 + v89;
            unsigned int v95 = v69[3];
            if (v95 == 63)
            {
              int64x2_t v98 = *(int64x2_t *)(v94 + 16);
              unsigned int v99 = (const double *)(v94 + 32);
              float64x2x2_t v250 = vld2q_f64(v99);
              int64x2_t v100 = vzip2q_s64(*(int64x2_t *)v94, v98);
              int64x2_t v231 = vzip1q_s64(*(int64x2_t *)v94, v98);
              int64x2_t v235 = v100;
              float64x2_t v239 = v250.val[0];
              float64x2_t v243 = v250.val[1];
              uint64_t v96 = 64;
            }
            else if (v95 == 1)
            {
              int16x8_t v97 = vld1q_dup_s16((const __int16 *)v94);
              int64x2_t v231 = (int64x2_t)v97;
              int64x2_t v235 = (int64x2_t)v97;
              float64x2_t v239 = (float64x2_t)v97;
              float64x2_t v243 = (float64x2_t)v97;
              uint64_t v96 = 2;
            }
            else if (v69[3])
            {
              uint64_t v96 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v231, 64, v94, v95);
            }
            else
            {
              uint64_t v96 = 0;
              int64x2_t v231 = 0uLL;
              int64x2_t v235 = 0uLL;
              float64x2_t v239 = 0uLL;
              float64x2_t v243 = 0uLL;
            }
            uint64_t v101 = v94 + v96;
            unsigned int v102 = v69[4];
            if (v102 == 63)
            {
              int64x2_t v105 = *(int64x2_t *)(v101 + 16);
              int64x2_t v106 = (const double *)(v101 + 32);
              float64x2x2_t v251 = vld2q_f64(v106);
              int64x2_t v107 = vzip2q_s64(*(int64x2_t *)v101, v105);
              int64x2_t v216 = vzip1q_s64(*(int64x2_t *)v101, v105);
              int64x2_t v220 = v107;
              float64x2_t v224 = v251.val[0];
              float64x2_t v228 = v251.val[1];
              uint64_t v103 = 64;
            }
            else if (v102 == 1)
            {
              int16x8_t v104 = vld1q_dup_s16((const __int16 *)v101);
              int64x2_t v216 = (int64x2_t)v104;
              int64x2_t v220 = (int64x2_t)v104;
              float64x2_t v224 = (float64x2_t)v104;
              float64x2_t v228 = (float64x2_t)v104;
              uint64_t v103 = 2;
            }
            else if (v69[4])
            {
              uint64_t v103 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v216, 64, v101, v102);
            }
            else
            {
              uint64_t v103 = 0;
              int64x2_t v216 = 0uLL;
              int64x2_t v220 = 0uLL;
              float64x2_t v224 = 0uLL;
              float64x2_t v228 = 0uLL;
            }
            uint64_t v108 = v101 + v103;
            unsigned int v109 = v69[5];
            if (v109 == 63)
            {
              int64x2_t v112 = *(int64x2_t *)(v108 + 16);
              int64x2_t v113 = (const double *)(v108 + 32);
              float64x2x2_t v252 = vld2q_f64(v113);
              int64x2_t v114 = vzip2q_s64(*(int64x2_t *)v108, v112);
              int64x2_t v217 = vzip1q_s64(*(int64x2_t *)v108, v112);
              int64x2_t v221 = v114;
              float64x2_t v225 = v252.val[0];
              float64x2_t v229 = v252.val[1];
              uint64_t v110 = 64;
            }
            else if (v109 == 1)
            {
              int16x8_t v111 = vld1q_dup_s16((const __int16 *)v108);
              int64x2_t v217 = (int64x2_t)v111;
              int64x2_t v221 = (int64x2_t)v111;
              float64x2_t v225 = (float64x2_t)v111;
              float64x2_t v229 = (float64x2_t)v111;
              uint64_t v110 = 2;
            }
            else if (v69[5])
            {
              uint64_t v110 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v217, 64, v108, v109);
            }
            else
            {
              uint64_t v110 = 0;
              int64x2_t v217 = 0uLL;
              int64x2_t v221 = 0uLL;
              float64x2_t v225 = 0uLL;
              float64x2_t v229 = 0uLL;
            }
            uint64_t v115 = v108 + v110;
            unsigned int v116 = v69[6];
            if (v116 == 63)
            {
              int64x2_t v119 = *(int64x2_t *)(v115 + 16);
              int64x2_t v120 = (const double *)(v115 + 32);
              float64x2x2_t v253 = vld2q_f64(v120);
              int64x2_t v121 = vzip2q_s64(*(int64x2_t *)v115, v119);
              int64x2_t v232 = vzip1q_s64(*(int64x2_t *)v115, v119);
              int64x2_t v236 = v121;
              float64x2_t v240 = v253.val[0];
              float64x2_t v244 = v253.val[1];
              uint64_t v117 = 64;
            }
            else if (v116 == 1)
            {
              int16x8_t v118 = vld1q_dup_s16((const __int16 *)v115);
              int64x2_t v232 = (int64x2_t)v118;
              int64x2_t v236 = (int64x2_t)v118;
              float64x2_t v240 = (float64x2_t)v118;
              float64x2_t v244 = (float64x2_t)v118;
              uint64_t v117 = 2;
            }
            else if (v69[6])
            {
              uint64_t v117 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v232, 64, v115, v116);
            }
            else
            {
              uint64_t v117 = 0;
              int64x2_t v232 = 0uLL;
              int64x2_t v236 = 0uLL;
              float64x2_t v240 = 0uLL;
              float64x2_t v244 = 0uLL;
            }
            uint64_t v122 = v115 + v117;
            unsigned int v123 = v69[7];
            if (v123 == 63)
            {
              int64x2_t v126 = *(int64x2_t *)(v122 + 16);
              int64x2_t v127 = (const double *)(v122 + 32);
              float64x2x2_t v254 = vld2q_f64(v127);
              int64x2_t v128 = vzip2q_s64(*(int64x2_t *)v122, v126);
              int64x2_t v233 = vzip1q_s64(*(int64x2_t *)v122, v126);
              int64x2_t v237 = v128;
              float64x2_t v241 = v254.val[0];
              float64x2_t v245 = v254.val[1];
              uint64_t v124 = v209;
              if (v209) {
                goto LABEL_156;
              }
            }
            else
            {
              if (v123 != 1)
              {
                if (v69[7])
                {
                  AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v233, 64, v122, v123);
                  uint64_t v124 = v209;
                  if (!v209) {
                    goto LABEL_190;
                  }
                }
                else
                {
                  int64x2_t v233 = 0uLL;
                  int64x2_t v237 = 0uLL;
                  float64x2_t v241 = 0uLL;
                  float64x2_t v245 = 0uLL;
                  uint64_t v124 = v209;
                  if (!v209) {
                    goto LABEL_190;
                  }
                }
LABEL_156:
                if (!v210) {
                  goto LABEL_190;
                }
                uint64_t v129 = 0;
                unint64_t v130 = (unint64_t)v207 << 6;
                uint64_t v131 = 4 * v208;
                int64x2_t v132 = &v214.i8[v130 + v131];
                unint64_t v133 = v205;
                uint64_t v134 = v206;
                unint64_t v135 = 4 * v210;
                if (v135 <= 1) {
                  unint64_t v136 = 1;
                }
                else {
                  unint64_t v136 = 4 * v210;
                }
                unint64_t v137 = v130 + v131;
                int16x8_t v138 = &v214.i8[v130 + v131];
                if (v136) {
                  BOOL v139 = (v136 - 1) >> 32 == 0;
                }
                else {
                  BOOL v139 = 0;
                }
                uint64_t v140 = v136 & 0x3FFFFFFE0;
                uint64_t v141 = v136 & 0x3FFFFFFF8;
                char v143 = !v139 || v136 < 8;
                uint64_t v144 = &v215.i8[v137];
                int16x8_t v145 = (long long *)(v205 + 16);
                int64x2_t v146 = v132;
                unint64_t v147 = v205;
                while (2)
                {
                  int64x2_t v148 = (char *)(v133 + v134 * v129);
                  uint64_t v149 = &v132[64 * v129];
                  if ((unint64_t)(&v138[64 * v129] - v148) < 0x20) {
                    char v150 = 1;
                  }
                  else {
                    char v150 = v143;
                  }
                  if (v150)
                  {
                    int v151 = 0;
LABEL_187:
                    unsigned int v161 = v151 + 1;
                    do
                    {
                      char v162 = *v148++;
                      *v149++ = v162;
                    }
                    while (v135 > v161++);
                  }
                  else
                  {
                    if (v136 >= 0x20)
                    {
                      int64x2_t v153 = v145;
                      unint64_t v154 = v144;
                      uint64_t v155 = v136 & 0x3FFFFFFE0;
                      do
                      {
                        long long v156 = *v153;
                        *((_OWORD *)v154 - 1) = *(v153 - 1);
                        *(_OWORD *)unint64_t v154 = v156;
                        v154 += 32;
                        v153 += 2;
                        v155 -= 32;
                      }
                      while (v155);
                      if (v136 == v140) {
                        goto LABEL_170;
                      }
                      uint64_t v152 = v136 & 0x3FFFFFFE0;
                      if ((v136 & 0x18) == 0)
                      {
                        v148 += v140;
                        v149 += v140;
                        int v151 = v136 & 0xFFFFFFE0;
                        goto LABEL_187;
                      }
                    }
                    else
                    {
                      uint64_t v152 = 0;
                    }
                    v149 += v141;
                    uint64_t v157 = v152 - v141;
                    uint64_t v158 = (uint64_t *)(v147 + v152);
                    unint64_t v159 = &v146[v152];
                    do
                    {
                      uint64_t v160 = *v158++;
                      *(void *)unint64_t v159 = v160;
                      v159 += 8;
                      v157 += 8;
                    }
                    while (v157);
                    if (v136 != v141)
                    {
                      v148 += v141;
                      int v151 = v136 & 0xFFFFFFF8;
                      goto LABEL_187;
                    }
                  }
LABEL_170:
                  ++v129;
                  v144 += 64;
                  int16x8_t v145 = (long long *)((char *)v145 + v134);
                  v147 += v134;
                  v146 += 64;
                  if (v129 == v124) {
                    goto LABEL_190;
                  }
                  continue;
                }
              }
              int16x8_t v125 = vld1q_dup_s16((const __int16 *)v122);
              int64x2_t v233 = (int64x2_t)v125;
              int64x2_t v237 = (int64x2_t)v125;
              float64x2_t v241 = (float64x2_t)v125;
              float64x2_t v245 = (float64x2_t)v125;
              uint64_t v124 = v209;
              if (v209) {
                goto LABEL_156;
              }
            }
LABEL_190:
            AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)&v214, 64, v203, v204, v211, v212);
            if (!v200) {
              goto LABEL_26;
            }
            goto LABEL_191;
          }
          dispatch_sync(*(dispatch_queue_t *)(*(void *)(v28 + 8) + 7384), block);
LABEL_95:
          a7 = v67;
          if (!v200) {
            goto LABEL_26;
          }
LABEL_191:
          memcpy(__src, v71, 0x200uLL);
LABEL_26:
          BOOL v23 = v33++ == v188 >> 4;
          uint64_t v28 = v196;
        }
        while (!v23);
        BOOL v23 = v18++ == v182;
      }
      while (!v23);
    }
  }
}

uint64_t AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, int a12)
{
  uint64_t v281 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v232 = a8;
  unsigned int v16 = a8 >> 3;
  unsigned int v214 = a8 + a10 - 1;
  unsigned int v216 = v214 >> 3;
  unsigned int v17 = *(unsigned __int8 *)(*(void *)(a1 + 208) + 88);
  unsigned int v18 = *(_DWORD *)(a1 + 112);
  uint64_t v233 = a1;
  if (*(void *)(a1 + 168)) {
    int v19 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v19 = 0;
  }
  BOOL v20 = (v19 & 0xD00) == 0 || v19 == 768;
  int v21 = v19 & 0xE00;
  int v23 = !v20 && v21 != 1024;
  int v236 = v23;
  uint64_t result = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::isLevelTiled(a1, *(_DWORD *)(a1 + 144) + a12);
  uint64_t v25 = a1;
  int v225 = result;
  unsigned int v26 = a7;
  if (v16 <= v216)
  {
    unsigned int v224 = a7 + a9 - 1;
    if (a7 >> 4 <= v224 >> 4)
    {
      unsigned int v211 = a5 - 1;
      unsigned int v235 = (a5 - 1) >> 4;
      int v234 = ((a5 - 1) & 0xF) + 1;
      int v212 = ((a6 - 1) & 7) + 1;
      unsigned int v213 = (a6 - 1) >> 3;
      uint32x2_t v27 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0xF00000007);
      int8x8_t v28 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32(vadd_s32((int32x2_t)vshl_u32(v27, (uint32x2_t)0xFFFFFFFCFFFFFFFDLL), (int32x2_t)-1))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x2000000010, v27));
      __int32 v223 = v28.i32[0] | v28.i32[1];
      int8x8_t v221 = v28;
      BOOL v220 = v28.i32[0] != 0;
      BOOL v219 = v28.i32[1] != 0;
      unint64_t v210 = 8 * v18 * (unint64_t)v17;
      uint64_t v29 = a11;
      uint64_t result = 2 * a11;
      do
      {
        unsigned int v30 = (8 * v16) | 7;
        if (8 * v16 <= v232) {
          int v31 = v232;
        }
        else {
          int v31 = 8 * v16;
        }
        unsigned int v32 = a7 >> 4;
        if (v214 < v30) {
          unsigned int v30 = v214;
        }
        unsigned int v231 = 8 * v16;
        int v218 = v31 - 8 * v16;
        int v230 = v30 - v31 + 1;
        if (v16 == v213) {
          unsigned int v33 = v212;
        }
        else {
          unsigned int v33 = 8;
        }
        uint64_t v229 = a3 + (v31 - v232) * v29;
        unsigned int v217 = v33;
        do
        {
          unsigned int v34 = 16 * v32;
          unsigned int v35 = 16 * (v32 + 1) - 1;
          if (16 * v32 <= v26) {
            int v36 = v26;
          }
          else {
            int v36 = 16 * v32;
          }
          if (v224 < v35) {
            unsigned int v35 = a7 + a9 - 1;
          }
          int v37 = v35 - v36 + 1;
          if (v32 == v235) {
            unsigned int v38 = v234;
          }
          else {
            unsigned int v38 = 16;
          }
          BOOL v39 = 1;
          if (v231 >= v232 && v34 >= v26)
          {
            int v40 = v234;
            if (v32 != v235) {
              int v40 = 16;
            }
            BOOL v39 = v37 != v40 || v230 != v33;
          }
          if (v225)
          {
            unsigned int v61 = 0;
            uint64_t v62 = v210 >> (*(unsigned char *)(v25 + 57) != 0);
            char v63 = 1;
            if (v62 > 127)
            {
              if (v62 > 511)
              {
                if (v62 == 512)
                {
                  char v64 = 0;
                  unsigned int v61 = 16;
                  unsigned int v65 = 16;
                }
                else
                {
                  char v64 = 1;
                  unsigned int v65 = 0;
                  if (v62 == 1024)
                  {
                    unsigned int v65 = 8;
                    unsigned int v61 = 16;
                  }
                }
              }
              else if (v62 == 128)
              {
                char v63 = 0;
                char v64 = 0;
                unsigned int v61 = 32;
                unsigned int v65 = 32;
              }
              else
              {
                char v64 = 1;
                unsigned int v65 = 0;
                if (v62 == 256)
                {
                  char v63 = 0;
                  char v64 = 0;
                  unsigned int v65 = 16;
                  unsigned int v61 = 32;
                }
              }
            }
            else
            {
              char v64 = 1;
              unsigned int v65 = 0;
              switch(v62)
              {
                case 4:
                  char v63 = 0;
                  char v64 = 0;
                  unsigned int v65 = 128;
                  unsigned int v61 = 256;
                  break;
                case 5:
                case 6:
                case 7:
                case 9:
                case 10:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 17:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                  break;
                case 8:
                  char v63 = 0;
                  char v64 = 0;
                  unsigned int v61 = 128;
                  unsigned int v65 = 128;
                  break;
                case 16:
                  char v63 = 0;
                  char v64 = 0;
                  unsigned int v65 = 64;
                  unsigned int v61 = 128;
                  break;
                case 32:
                  char v63 = 0;
                  char v64 = 0;
                  unsigned int v61 = 64;
                  unsigned int v65 = 64;
                  break;
                default:
                  if (v62 == 64)
                  {
                    char v63 = 0;
                    char v64 = 0;
                    unsigned int v65 = 32;
                    unsigned int v61 = 64;
                  }
                  break;
              }
            }
            unsigned int v199 = (v61 >> 4) - 1;
            if (v63) {
              unsigned int v200 = 0;
            }
            else {
              unsigned int v200 = 32 - __clz(~(-1 << -(char)__clz(v199)));
            }
            unsigned int v201 = (v65 >> 3) - 1;
            if (v64)
            {
              unsigned int v202 = 0;
              if (v200) {
                goto LABEL_233;
              }
            }
            else
            {
              unsigned int v202 = 32 - __clz(~(-1 << -(char)__clz(v201)));
              if (v202 | v200)
              {
LABEL_233:
                int v203 = 0;
                uint64_t v204 = 0;
                int v205 = v32 & v199;
                int v206 = v16 & v201;
                BOOL v207 = v202 != 0;
                BOOL v208 = v200 != 0;
                int v209 = 1;
                do
                {
                  --v202;
                  if (v207) {
                    v204 |= (unint64_t)(v209 & v206) << v203++;
                  }
                  else {
                    unsigned int v202 = 0;
                  }
                  --v200;
                  if (v208) {
                    v204 |= (unint64_t)(v209 & v205) << v203++;
                  }
                  else {
                    unsigned int v200 = 0;
                  }
                  v209 *= 2;
                  --v203;
                  BOOL v208 = v200 != 0;
                  BOOL v207 = v202 != 0;
                }
                while (v200 | v202);
                goto LABEL_245;
              }
            }
            uint64_t v204 = 0;
LABEL_245:
            unint64_t v49 = ((unint64_t)(v34 / v61 + v231 / v65 * ((v61 + v211) / v61)) << 14) + (v204 << 9);
            uint64_t result = 2 * a11;
            goto LABEL_59;
          }
          if (v223)
          {
            int v42 = 0;
            uint64_t v43 = 0;
            int v44 = 1;
            BOOL v45 = v220;
            BOOL v46 = v219;
            __int32 v47 = v221.i32[0];
            __int32 v48 = v221.i32[1];
            do
            {
              --v47;
              if (v45) {
                v43 |= (unint64_t)(v44 & v16) << v42++;
              }
              else {
                __int32 v47 = 0;
              }
              --v48;
              if (v46) {
                v43 |= (unint64_t)(v44 & v32) << v42++;
              }
              else {
                __int32 v48 = 0;
              }
              v44 *= 2;
              --v42;
              BOOL v46 = v48 != 0;
              BOOL v45 = v47 != 0;
            }
            while (v48 | v47);
          }
          else
          {
            uint64_t v43 = 0;
          }
          unint64_t v49 = v43 << 9;
LABEL_59:
          unsigned int v50 = *(_DWORD *)(v25 + 128) >> (*(unsigned char *)(v25 + 144) + a12);
          if (v50 <= 1) {
            unsigned int v50 = 1;
          }
          unsigned int v51 = v50 + 15;
          if (v51 < 0x20) {
            unsigned int v52 = 0;
          }
          else {
            unsigned int v52 = 32 - __clz(~(-1 << -(char)__clz((v51 >> 4) - 1)));
          }
          unsigned int v53 = *(_DWORD *)(v25 + 132) >> (*(unsigned char *)(v25 + 144) + a12);
          if (v53 <= 1) {
            unsigned int v53 = 1;
          }
          unsigned int v54 = v53 + 7;
          if (v54 < 0x10)
          {
            unsigned int v55 = 0;
            if (!v52)
            {
LABEL_81:
              uint64_t v57 = 0;
              goto LABEL_82;
            }
          }
          else
          {
            unsigned int v55 = 32 - __clz(~(-1 << -(char)__clz((v54 >> 3) - 1)));
            if (!(v55 | v52)) {
              goto LABEL_81;
            }
          }
          int v56 = 0;
          uint64_t v57 = 0;
          BOOL v58 = v52 != 0;
          BOOL v59 = v55 != 0;
          int v60 = 1;
          do
          {
            --v52;
            if (v58) {
              v57 |= (unint64_t)(v60 & v32) << v56++;
            }
            else {
              unsigned int v52 = 0;
            }
            --v55;
            if (v59) {
              v57 |= (unint64_t)(v60 & v16) << v56++;
            }
            else {
              unsigned int v55 = 0;
            }
            v60 *= 2;
            --v56;
            BOOL v59 = v55 != 0;
            BOOL v58 = v52 != 0;
          }
          while (v55 | v52);
LABEL_82:
          int v66 = v38 < 0x10 || v39;
          uint64_t v67 = (char *)(a4 + 8 * v57);
          uint64_t v68 = v229 + 4 * (v36 - v26);
          unsigned int v69 = (void *)(a2 + v49);
          if (v33 < 8) {
            int v70 = 1;
          }
          else {
            int v70 = v66;
          }
          if (v236)
          {
            if (v70)
            {
              int v71 = v69;
              int v72 = v37;
              BOOL v73 = v39;
              int v74 = v36;
              memcpy(__dst, v69, sizeof(__dst));
              int v36 = v74;
              BOOL v39 = v73;
              unsigned int v34 = 16 * v32;
              int v37 = v72;
              uint64_t v29 = a11;
              unsigned int v33 = v217;
              uint64_t v75 = __dst;
              unsigned int v69 = v71;
              uint64_t v25 = v233;
LABEL_92:
              float64x2_t v222 = v69;
              block[0] = MEMORY[0x263EF8330];
              block[1] = 3221225472;
              block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE8ELj2ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
              block[3] = &__block_descriptor_90_e5_v8__0l;
              block[4] = v25;
              float64x2_t v238 = (int64x2_t *)v75;
              unsigned __int8 v246 = v38;
              unsigned __int8 v247 = v33;
              unsigned int v242 = v218;
              unsigned int v243 = v36 - v34;
              float64x2_t v239 = v67;
              uint64_t v240 = v68;
              uint64_t v241 = v29;
              unsigned int v244 = v230;
              unsigned int v245 = v37;
              if (v39)
              {
                dispatch_sync(*(dispatch_queue_t *)(*(void *)(v25 + 8) + 7384), block);
                uint64_t result = 2 * a11;
                uint64_t v25 = v233;
                unsigned int v26 = a7;
LABEL_94:
                unsigned int v69 = v222;
                goto LABEL_95;
              }
              unsigned int v92 = *v67;
              if (v92 == 63)
              {
                int64x2_t v95 = *((int64x2_t *)v75 + 1);
                uint64_t v96 = (const double *)(v75 + 32);
                float64x2x2_t v282 = vld2q_f64(v96);
                int64x2_t v97 = vzip2q_s64(*(int64x2_t *)v75, v95);
                int64x2_t v249 = vzip1q_s64(*(int64x2_t *)v75, v95);
                int64x2_t v253 = v97;
                float64x2_t v257 = v282.val[0];
                float64x2_t v261 = v282.val[1];
                uint64_t v93 = 64;
              }
              else if (v92 == 1)
              {
                int16x8_t v94 = vld1q_dup_s16((const __int16 *)v75);
                int64x2_t v249 = (int64x2_t)v94;
                int64x2_t v253 = (int64x2_t)v94;
                float64x2_t v257 = (float64x2_t)v94;
                float64x2_t v261 = (float64x2_t)v94;
                uint64_t v93 = 2;
              }
              else if (*v67)
              {
                uint64_t v93 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v249, 64, (uint64_t)v75, v92);
              }
              else
              {
                uint64_t v93 = 0;
                int64x2_t v249 = 0uLL;
                int64x2_t v253 = 0uLL;
                float64x2_t v257 = 0uLL;
                float64x2_t v261 = 0uLL;
              }
              uint64_t v98 = (uint64_t)&v75[v93];
              unsigned int v99 = v67[1];
              if (v99 == 63)
              {
                int64x2_t v102 = *(int64x2_t *)(v98 + 16);
                uint64_t v103 = (const double *)(v98 + 32);
                float64x2x2_t v283 = vld2q_f64(v103);
                int64x2_t v104 = vzip2q_s64(*(int64x2_t *)v98, v102);
                int64x2_t v250 = vzip1q_s64(*(int64x2_t *)v98, v102);
                int64x2_t v254 = v104;
                float64x2_t v258 = v283.val[0];
                float64x2_t v262 = v283.val[1];
                uint64_t v100 = 64;
              }
              else if (v99 == 1)
              {
                int16x8_t v101 = vld1q_dup_s16((const __int16 *)v98);
                int64x2_t v250 = (int64x2_t)v101;
                int64x2_t v254 = (int64x2_t)v101;
                float64x2_t v258 = (float64x2_t)v101;
                float64x2_t v262 = (float64x2_t)v101;
                uint64_t v100 = 2;
              }
              else if (v67[1])
              {
                uint64_t v100 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v250, 64, v98, v99);
              }
              else
              {
                uint64_t v100 = 0;
                int64x2_t v250 = 0uLL;
                int64x2_t v254 = 0uLL;
                float64x2_t v258 = 0uLL;
                float64x2_t v262 = 0uLL;
              }
              uint64_t v105 = v98 + v100;
              unsigned int v106 = v67[2];
              if (v106 == 63)
              {
                int64x2_t v109 = *(int64x2_t *)(v105 + 16);
                uint64_t v110 = (const double *)(v105 + 32);
                float64x2x2_t v284 = vld2q_f64(v110);
                int64x2_t v111 = vzip2q_s64(*(int64x2_t *)v105, v109);
                int64x2_t v265 = vzip1q_s64(*(int64x2_t *)v105, v109);
                int64x2_t v269 = v111;
                float64x2_t v273 = v284.val[0];
                float64x2_t v277 = v284.val[1];
                uint64_t v107 = 64;
              }
              else if (v106 == 1)
              {
                int16x8_t v108 = vld1q_dup_s16((const __int16 *)v105);
                int64x2_t v265 = (int64x2_t)v108;
                int64x2_t v269 = (int64x2_t)v108;
                float64x2_t v273 = (float64x2_t)v108;
                float64x2_t v277 = (float64x2_t)v108;
                uint64_t v107 = 2;
              }
              else if (v67[2])
              {
                uint64_t v107 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v265, 64, v105, v106);
              }
              else
              {
                uint64_t v107 = 0;
                int64x2_t v265 = 0uLL;
                int64x2_t v269 = 0uLL;
                float64x2_t v273 = 0uLL;
                float64x2_t v277 = 0uLL;
              }
              uint64_t v112 = v105 + v107;
              unsigned int v113 = v67[3];
              if (v113 == 63)
              {
                int64x2_t v116 = *(int64x2_t *)(v112 + 16);
                uint64_t v117 = (const double *)(v112 + 32);
                float64x2x2_t v285 = vld2q_f64(v117);
                int64x2_t v118 = vzip2q_s64(*(int64x2_t *)v112, v116);
                int64x2_t v266 = vzip1q_s64(*(int64x2_t *)v112, v116);
                int64x2_t v270 = v118;
                float64x2_t v274 = v285.val[0];
                float64x2_t v278 = v285.val[1];
                uint64_t v114 = 64;
              }
              else if (v113 == 1)
              {
                int16x8_t v115 = vld1q_dup_s16((const __int16 *)v112);
                int64x2_t v266 = (int64x2_t)v115;
                int64x2_t v270 = (int64x2_t)v115;
                float64x2_t v274 = (float64x2_t)v115;
                float64x2_t v278 = (float64x2_t)v115;
                uint64_t v114 = 2;
              }
              else if (v67[3])
              {
                uint64_t v114 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v266, 64, v112, v113);
              }
              else
              {
                uint64_t v114 = 0;
                int64x2_t v266 = 0uLL;
                int64x2_t v270 = 0uLL;
                float64x2_t v274 = 0uLL;
                float64x2_t v278 = 0uLL;
              }
              uint64_t v119 = v112 + v114;
              unsigned int v120 = v67[4];
              if (v120 == 63)
              {
                int64x2_t v123 = *(int64x2_t *)(v119 + 16);
                uint64_t v124 = (const double *)(v119 + 32);
                float64x2x2_t v286 = vld2q_f64(v124);
                int64x2_t v125 = vzip2q_s64(*(int64x2_t *)v119, v123);
                int64x2_t v251 = vzip1q_s64(*(int64x2_t *)v119, v123);
                int64x2_t v255 = v125;
                float64x2_t v259 = v286.val[0];
                float64x2_t v263 = v286.val[1];
                uint64_t v121 = 64;
              }
              else if (v120 == 1)
              {
                int16x8_t v122 = vld1q_dup_s16((const __int16 *)v119);
                int64x2_t v251 = (int64x2_t)v122;
                int64x2_t v255 = (int64x2_t)v122;
                float64x2_t v259 = (float64x2_t)v122;
                float64x2_t v263 = (float64x2_t)v122;
                uint64_t v121 = 2;
              }
              else if (v67[4])
              {
                uint64_t v121 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v251, 64, v119, v120);
              }
              else
              {
                uint64_t v121 = 0;
                int64x2_t v251 = 0uLL;
                int64x2_t v255 = 0uLL;
                float64x2_t v259 = 0uLL;
                float64x2_t v263 = 0uLL;
              }
              uint64_t v126 = v119 + v121;
              unsigned int v127 = v67[5];
              if (v127 == 63)
              {
                int64x2_t v130 = *(int64x2_t *)(v126 + 16);
                uint64_t v131 = (const double *)(v126 + 32);
                float64x2x2_t v287 = vld2q_f64(v131);
                int64x2_t v132 = vzip2q_s64(*(int64x2_t *)v126, v130);
                int64x2_t v252 = vzip1q_s64(*(int64x2_t *)v126, v130);
                int64x2_t v256 = v132;
                float64x2_t v260 = v287.val[0];
                float64x2_t v264 = v287.val[1];
                uint64_t v128 = 64;
              }
              else if (v127 == 1)
              {
                int16x8_t v129 = vld1q_dup_s16((const __int16 *)v126);
                int64x2_t v252 = (int64x2_t)v129;
                int64x2_t v256 = (int64x2_t)v129;
                float64x2_t v260 = (float64x2_t)v129;
                float64x2_t v264 = (float64x2_t)v129;
                uint64_t v128 = 2;
              }
              else if (v67[5])
              {
                uint64_t v128 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v252, 64, v126, v127);
              }
              else
              {
                uint64_t v128 = 0;
                int64x2_t v252 = 0uLL;
                int64x2_t v256 = 0uLL;
                float64x2_t v260 = 0uLL;
                float64x2_t v264 = 0uLL;
              }
              uint64_t v133 = v126 + v128;
              unsigned int v134 = v67[6];
              if (v134 == 63)
              {
                int64x2_t v137 = *(int64x2_t *)(v133 + 16);
                int16x8_t v138 = (const double *)(v133 + 32);
                float64x2x2_t v288 = vld2q_f64(v138);
                int64x2_t v139 = vzip2q_s64(*(int64x2_t *)v133, v137);
                int64x2_t v267 = vzip1q_s64(*(int64x2_t *)v133, v137);
                int64x2_t v271 = v139;
                float64x2_t v275 = v288.val[0];
                float64x2_t v279 = v288.val[1];
                uint64_t v135 = 64;
              }
              else if (v134 == 1)
              {
                int16x8_t v136 = vld1q_dup_s16((const __int16 *)v133);
                int64x2_t v267 = (int64x2_t)v136;
                int64x2_t v271 = (int64x2_t)v136;
                float64x2_t v275 = (float64x2_t)v136;
                float64x2_t v279 = (float64x2_t)v136;
                uint64_t v135 = 2;
              }
              else if (v67[6])
              {
                uint64_t v135 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v267, 64, v133, v134);
              }
              else
              {
                uint64_t v135 = 0;
                int64x2_t v267 = 0uLL;
                int64x2_t v271 = 0uLL;
                float64x2_t v275 = 0uLL;
                float64x2_t v279 = 0uLL;
              }
              uint64_t v140 = v133 + v135;
              unsigned int v141 = v67[7];
              if (v141 == 63)
              {
                int64x2_t v144 = *(int64x2_t *)(v140 + 16);
                int16x8_t v145 = (const double *)(v140 + 32);
                float64x2x2_t v289 = vld2q_f64(v145);
                int64x2_t v146 = vzip2q_s64(*(int64x2_t *)v140, v144);
                int64x2_t v268 = vzip1q_s64(*(int64x2_t *)v140, v144);
                int64x2_t v272 = v146;
                float64x2_t v276 = v289.val[0];
                float64x2_t v280 = v289.val[1];
                uint64_t v142 = v244;
                if (v244) {
                  goto LABEL_169;
                }
              }
              else
              {
                if (v141 != 1)
                {
                  if (v67[7])
                  {
                    AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v268, 64, v140, v141);
                    uint64_t v142 = v244;
                    if (!v244) {
                      goto LABEL_203;
                    }
                  }
                  else
                  {
                    int64x2_t v268 = 0uLL;
                    int64x2_t v272 = 0uLL;
                    float64x2_t v276 = 0uLL;
                    float64x2_t v280 = 0uLL;
                    uint64_t v142 = v244;
                    if (!v244) {
                      goto LABEL_203;
                    }
                  }
LABEL_169:
                  if (!v245) {
                    goto LABEL_203;
                  }
                  uint64_t v147 = 0;
                  unint64_t v148 = (unint64_t)v242 << 6;
                  uint64_t v149 = 4 * v243;
                  char v150 = &v249.i8[v148 + v149];
                  uint64_t v151 = v240;
                  uint64_t v152 = v241;
                  unint64_t v153 = 4 * v245;
                  if (v153 <= 1) {
                    unint64_t v154 = 1;
                  }
                  else {
                    unint64_t v154 = 4 * v245;
                  }
                  unint64_t v155 = v148 + v149;
                  long long v156 = &v249.i8[v148 + v149];
                  if (v154) {
                    BOOL v157 = (v154 - 1) >> 32 == 0;
                  }
                  else {
                    BOOL v157 = 0;
                  }
                  uint64_t v158 = v154 & 0x3FFFFFFE0;
                  uint64_t v159 = v154 & 0x3FFFFFFF8;
                  char v161 = !v157 || v154 < 8;
                  char v162 = &v250.i8[v155];
                  unint64_t v163 = (long long *)(v240 + 16);
                  unsigned int v164 = v150;
                  uint64_t v165 = v240;
                  while (2)
                  {
                    unsigned int v166 = (char *)(v151 + v152 * v147);
                    unsigned int v167 = &v150[64 * v147];
                    if ((unint64_t)(&v156[64 * v147] - v166) < 0x20) {
                      char v168 = 1;
                    }
                    else {
                      char v168 = v161;
                    }
                    if (v168)
                    {
                      int v169 = 0;
LABEL_200:
                      unsigned int v179 = v169 + 1;
                      do
                      {
                        char v180 = *v166++;
                        *v167++ = v180;
                      }
                      while (v153 > v179++);
                    }
                    else
                    {
                      if (v154 >= 0x20)
                      {
                        int v171 = v163;
                        BOOL v172 = v162;
                        uint64_t v173 = v154 & 0x3FFFFFFE0;
                        do
                        {
                          long long v174 = *v171;
                          *((_OWORD *)v172 - 1) = *(v171 - 1);
                          *(_OWORD *)BOOL v172 = v174;
                          v172 += 32;
                          v171 += 2;
                          v173 -= 32;
                        }
                        while (v173);
                        if (v154 == v158) {
                          goto LABEL_183;
                        }
                        uint64_t v170 = v154 & 0x3FFFFFFE0;
                        if ((v154 & 0x18) == 0)
                        {
                          v166 += v158;
                          v167 += v158;
                          int v169 = v154 & 0xFFFFFFE0;
                          goto LABEL_200;
                        }
                      }
                      else
                      {
                        uint64_t v170 = 0;
                      }
                      v167 += v159;
                      uint64_t v175 = v170 - v159;
                      unsigned int v176 = (uint64_t *)(v165 + v170);
                      int v177 = &v164[v170];
                      do
                      {
                        uint64_t v178 = *v176++;
                        *(void *)int v177 = v178;
                        v177 += 8;
                        v175 += 8;
                      }
                      while (v175);
                      if (v154 != v159)
                      {
                        v166 += v159;
                        int v169 = v154 & 0xFFFFFFF8;
                        goto LABEL_200;
                      }
                    }
LABEL_183:
                    ++v147;
                    v162 += 64;
                    unint64_t v163 = (long long *)((char *)v163 + v152);
                    v165 += v152;
                    v164 += 64;
                    if (v147 == v142) {
                      goto LABEL_203;
                    }
                    continue;
                  }
                }
                int16x8_t v143 = vld1q_dup_s16((const __int16 *)v140);
                int64x2_t v268 = (int64x2_t)v143;
                int64x2_t v272 = (int64x2_t)v143;
                float64x2_t v276 = (float64x2_t)v143;
                float64x2_t v280 = (float64x2_t)v143;
                uint64_t v142 = v244;
                if (v244) {
                  goto LABEL_169;
                }
              }
LABEL_203:
              uint64_t v182 = 0;
              int v183 = v238;
              BOOL v184 = v239;
              int v185 = v246;
              int v186 = v247;
              unsigned int v26 = a7;
              uint64_t v25 = v233;
              uint64_t result = 2 * a11;
              do
              {
                uint64_t v194 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,2u>::kSubblockPositions[v182 + 1];
                uint64_t v195 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,2u>::kSubblockPositions[v182];
                unsigned int v196 = (v185 - 4 * v195) & ~((v185 - 4 * (int)v195) >> 31);
                if (v196 >= 4) {
                  unsigned int v196 = 4;
                }
                unsigned int v197 = (v186 - 4 * v194) & ~((v186 - 4 * (int)v194) >> 31);
                if (v197 >= 4) {
                  unsigned int v197 = 4;
                }
                if (v196) {
                  BOOL v198 = v197 == 0;
                }
                else {
                  BOOL v198 = 1;
                }
                if (v198)
                {
                  char v193 = 0;
                }
                else
                {
                  __int32 v187 = &v249 + 16 * v194 + v195;
                  int64x2_t v188 = v187[4];
                  int64x2_t v189 = vzip1q_s64(*v187, v188);
                  int64x2_t v190 = vzip2q_s64(*v187, v188);
                  int64x2_t v191 = v187[8];
                  int64x2_t v192 = v187[12];
                  *int v183 = v189;
                  v183[1] = v190;
                  v183[2] = vzip1q_s64(v191, v192);
                  v183[3] = vzip2q_s64(v191, v192);
                  v183 += 4;
                  char v193 = 63;
                }
                *v184++ = v193;
                v182 += 2;
              }
              while (v182 != 16);
              goto LABEL_94;
            }
            uint64_t v75 = __dst;
          }
          else
          {
            uint64_t v75 = v69;
            if (v70) {
              goto LABEL_92;
            }
          }
          uint64_t v76 = 0;
          int64x2_t v77 = (int64x2_t *)v75;
          do
          {
            uint64_t v87 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,2u>::kSubblockPositions[v76 + 1];
            uint64_t v88 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,2u>::kSubblockPositions[v76];
            unsigned int v89 = (v38 - 4 * v88) & ~((int)(v38 - 4 * v88) >> 31);
            if (v89 >= 4) {
              unsigned int v89 = 4;
            }
            unsigned int v90 = (v33 - 4 * v87) & ~((int)(v33 - 4 * v87) >> 31);
            if (v90 >= 4) {
              unsigned int v90 = 4;
            }
            if (v89) {
              BOOL v91 = v90 == 0;
            }
            else {
              BOOL v91 = 1;
            }
            if (v91)
            {
              char v86 = 0;
            }
            else
            {
              uint64_t v78 = (int64x2_t *)(v68 + 4 * a11 * v87 + 16 * v88);
              int64x2_t v79 = *(int64x2_t *)((char *)v78 + v29);
              int64x2_t v80 = vzip1q_s64(*v78, v79);
              int64x2_t v81 = vzip2q_s64(*v78, v79);
              uint64_t v82 = (int64x2_t *)((char *)v78 + result);
              int64x2_t v83 = *(int64x2_t *)((char *)v82 + v29);
              int64x2_t v84 = vzip1q_s64(*v82, v83);
              int64x2_t v85 = vzip2q_s64(*v82, v83);
              *int64x2_t v77 = v80;
              v77[1] = v81;
              v77[2] = v84;
              v77[3] = v85;
              v77 += 4;
              char v86 = 63;
            }
            *v67++ = v86;
            v76 += 2;
          }
          while (v76 != 16);
LABEL_95:
          if (v236)
          {
            memcpy(v69, v75, 0x200uLL);
            uint64_t result = 2 * a11;
            uint64_t v25 = v233;
            unsigned int v26 = a7;
          }
          BOOL v20 = v32++ == v224 >> 4;
        }
        while (!v20);
        BOOL v20 = v16++ == v216;
      }
      while (!v20);
    }
  }
  return result;
}

uint64_t AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, char a12)
{
  uint64_t v249 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v198 = a8;
  unsigned int v182 = a8 + a10 - 1;
  uint64_t v199 = a1;
  if (*(void *)(a1 + 168)) {
    int v17 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v17 = 0;
  }
  unsigned int v18 = a5 - 1;
  unsigned int v19 = a6 - 1;
  unsigned int v20 = a8 >> 3;
  unsigned int v181 = v182 >> 3;
  BOOL v21 = (v17 & 0xD00) == 0 || v17 == 768;
  int v22 = v17 & 0xE00;
  int v24 = !v21 && v22 != 1024;
  int v203 = v24;
  uint64_t result = a1;
  if (*(unsigned char *)(a1 + 232))
  {
    unsigned int v26 = *(unsigned __int8 *)(a1 + 255);
    unsigned int v27 = *(unsigned __int8 *)(a1 + 254);
    char v28 = __clz(v18);
    if (1 << v26 >= a6 || a5 >> v27)
    {
      if (!(a6 >> v26) && 1 << v27 < a5)
      {
        if (a6 < 2) {
          unsigned int v31 = 0;
        }
        else {
          unsigned int v31 = __clz(~(-1 << -(char)__clz(v19))) - 32;
        }
        v27 += v26 + v31;
        unsigned int v26 = -v31;
      }
    }
    else
    {
      unsigned int v29 = 32 - __clz(~(-1 << -v28));
      unsigned int v30 = v27 + v26;
      if (a5 < 2) {
        unsigned int v29 = 0;
      }
      unsigned int v26 = v30 - v29;
      unsigned int v27 = v29;
    }
    if (a5 < 2)
    {
      if (v27) {
        goto LABEL_27;
      }
    }
    else if (32 - __clz(~(-1 << -v28)) < v27)
    {
LABEL_27:
      BOOL v193 = 0;
LABEL_32:
      unsigned int v190 = v27 - 4;
      unsigned int v186 = v26 - 3;
      int v33 = -1 << *(unsigned char *)(*(void *)(a1 + 208) + 48);
      unsigned int v179 = (((~v33 + a5) & v33) + ~(-1 << v27)) >> v27;
      goto LABEL_33;
    }
    if (a6 < 2) {
      unsigned int v32 = 0;
    }
    else {
      unsigned int v32 = 32 - __clz(~(-1 << -(char)__clz(v19)));
    }
    BOOL v193 = v32 >= v26;
    goto LABEL_32;
  }
  BOOL v193 = 0;
  unsigned int v179 = 0;
  unsigned int v186 = 0;
  unsigned int v190 = 0;
LABEL_33:
  if (v20 <= v181)
  {
    unsigned int v192 = a7 + a9 - 1;
    unsigned int v178 = a7 >> 4;
    if (a7 >> 4 <= v192 >> 4)
    {
      unsigned int v201 = v18 >> 4;
      unsigned int v177 = v19 >> 3;
      int v200 = (v18 & 0xF) + 1;
      int v176 = (v19 & 7) + 1;
      uint32x2_t v34 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0xF00000007);
      int8x8_t v35 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32(vadd_s32((int32x2_t)vshl_u32(v34, (uint32x2_t)0xFFFFFFFCFFFFFFFDLL), (int32x2_t)-1))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x2000000010, v34));
      __int32 v188 = v35.i32[0] | v35.i32[1];
      int8x8_t v185 = v35;
      BOOL v184 = v35.i32[0] != 0;
      BOOL v183 = v35.i32[1] != 0;
      unsigned int v191 = a7;
      do
      {
        unsigned int v36 = (8 * v20) | 7;
        if (8 * v20 <= v198) {
          int v37 = v198;
        }
        else {
          int v37 = 8 * v20;
        }
        if (v182 < v36) {
          unsigned int v36 = v182;
        }
        int v189 = v37 - 8 * v20;
        int v197 = v36 - v37 + 1;
        unsigned int v38 = v178;
        int v39 = v176;
        if (v20 != v177) {
          int v39 = 8;
        }
        unsigned int v204 = v39;
        uint64_t v40 = v20 & ~(-1 << v186);
        uint64_t v196 = a3 + (v37 - v198) * a11;
        do
        {
          unsigned int v41 = 16 * v38;
          unsigned int v42 = 16 * (v38 + 1) - 1;
          if (16 * v38 <= a7) {
            int v43 = a7;
          }
          else {
            int v43 = 16 * v38;
          }
          if (v192 < v42) {
            unsigned int v42 = v192;
          }
          int v44 = v42 - v43 + 1;
          if (v38 == v201) {
            unsigned int v45 = v200;
          }
          else {
            unsigned int v45 = 16;
          }
          BOOL v46 = 1;
          if (8 * v20 >= v198 && v41 >= a7)
          {
            int v47 = v200;
            if (v38 != v201) {
              int v47 = 16;
            }
            BOOL v46 = v44 != v47 || v197 != v204;
          }
          if (v193)
          {
            if (v190 | v186)
            {
              int v49 = 0;
              uint64_t v50 = 0;
              int v51 = 1;
              BOOL v52 = v186 != 0;
              BOOL v53 = v190 != 0;
              unsigned int v54 = v186;
              unsigned int v55 = v190;
              do
              {
                --v54;
                if (v52) {
                  v50 |= (unint64_t)(v40 & v51) << v49++;
                }
                else {
                  unsigned int v54 = 0;
                }
                --v55;
                if (v53) {
                  v50 |= (unint64_t)(v38 & ~(-1 << v190) & v51) << v49++;
                }
                else {
                  unsigned int v55 = 0;
                }
                v51 *= 2;
                --v49;
                BOOL v53 = v55 != 0;
                BOOL v52 = v54 != 0;
              }
              while (v55 | v54);
            }
            else
            {
              uint64_t v50 = 0;
            }
            uint64_t v63 = *(void *)(result + 320) * ((v38 >> v190) + (v20 >> v186) * v179) + (v50 << 9);
          }
          else
          {
            if (v188)
            {
              int v56 = 0;
              uint64_t v57 = 0;
              int v58 = 1;
              BOOL v59 = v184;
              BOOL v60 = v183;
              __int32 v61 = v185.i32[0];
              __int32 v62 = v185.i32[1];
              do
              {
                --v61;
                if (v59) {
                  v57 |= (unint64_t)(v58 & v20) << v56++;
                }
                else {
                  __int32 v61 = 0;
                }
                --v62;
                if (v60) {
                  v57 |= (unint64_t)(v58 & v38) << v56++;
                }
                else {
                  __int32 v62 = 0;
                }
                v58 *= 2;
                --v56;
                BOOL v60 = v62 != 0;
                BOOL v59 = v61 != 0;
              }
              while (v62 | v61);
            }
            else
            {
              uint64_t v57 = 0;
            }
            uint64_t v63 = v57 << 9;
          }
          unsigned int v64 = *(_DWORD *)(result + 128) >> (*(unsigned char *)(result + 144) + a12);
          if (v64 <= 1) {
            unsigned int v64 = 1;
          }
          unsigned int v65 = v64 + 15;
          if (v65 < 0x20) {
            unsigned int v66 = 0;
          }
          else {
            unsigned int v66 = 32 - __clz(~(-1 << -(char)__clz((v65 >> 4) - 1)));
          }
          unsigned int v67 = *(_DWORD *)(result + 132) >> (*(unsigned char *)(result + 144) + a12);
          if (v67 <= 1) {
            unsigned int v67 = 1;
          }
          unsigned int v68 = v67 + 7;
          if (v68 < 0x10)
          {
            unsigned int v69 = 0;
            if (!v66)
            {
LABEL_109:
              uint64_t v71 = 0;
              goto LABEL_110;
            }
          }
          else
          {
            unsigned int v69 = 32 - __clz(~(-1 << -(char)__clz((v68 >> 3) - 1)));
            if (!(v69 | v66)) {
              goto LABEL_109;
            }
          }
          int v70 = 0;
          uint64_t v71 = 0;
          BOOL v72 = v66 != 0;
          BOOL v73 = v69 != 0;
          int v74 = 1;
          do
          {
            --v66;
            if (v72) {
              v71 |= (unint64_t)(v74 & v38) << v70++;
            }
            else {
              unsigned int v66 = 0;
            }
            --v69;
            if (v73) {
              v71 |= (unint64_t)(v74 & v20) << v70++;
            }
            else {
              unsigned int v69 = 0;
            }
            v74 *= 2;
            --v70;
            BOOL v73 = v69 != 0;
            BOOL v72 = v66 != 0;
          }
          while (v69 | v66);
LABEL_110:
          unsigned int v75 = v43 - a7;
          int v76 = v45 < 0x10 || v46;
          int64x2_t v77 = (char *)(a4 + 8 * v71);
          unint64_t v78 = v196 + 4 * v75;
          int64x2_t v79 = (void *)(a2 + v63);
          if (v204 < 8) {
            int v80 = 1;
          }
          else {
            int v80 = v76;
          }
          unsigned int v202 = v79;
          if (v203)
          {
            int64x2_t v81 = __dst;
            if (!v80) {
              goto LABEL_122;
            }
            __int32 v187 = (char *)(a4 + 8 * v71);
            int v82 = v44;
            char v83 = v45;
            uint64_t v84 = v40;
            BOOL v85 = v46;
            memcpy(__dst, v79, sizeof(__dst));
            BOOL v46 = v85;
            uint64_t v40 = v84;
            LOBYTE(v45) = v83;
            int v44 = v82;
            int64x2_t v77 = v187;
            uint64_t result = v199;
          }
          else
          {
            int64x2_t v81 = v79;
            if (!v80)
            {
LABEL_122:
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock(v78, a11, (unint64_t)v81, v77, v45, v204);
              a7 = v191;
              goto LABEL_217;
            }
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE7ELj2ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = result;
          int v206 = v81;
          unsigned __int8 v214 = v45;
          unsigned __int8 v215 = v204;
          unsigned int v210 = v189;
          unsigned int v211 = v43 - v41;
          BOOL v207 = v77;
          unint64_t v208 = v78;
          uint64_t v209 = a11;
          unsigned int v212 = v197;
          unsigned int v213 = v44;
          if (v46)
          {
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(result + 8) + 7384), block);
            a7 = v191;
            goto LABEL_217;
          }
          unsigned int v86 = *v77;
          if (v86 == 63)
          {
            int64x2_t v89 = *((int64x2_t *)v81 + 1);
            unsigned int v90 = (const double *)(v81 + 32);
            float64x2x2_t v250 = vld2q_f64(v90);
            int64x2_t v91 = vzip2q_s64(*(int64x2_t *)v81, v89);
            int64x2_t v217 = vzip1q_s64(*(int64x2_t *)v81, v89);
            int64x2_t v221 = v91;
            float64x2_t v225 = v250.val[0];
            float64x2_t v229 = v250.val[1];
            uint64_t v87 = 64;
          }
          else if (v86 == 1)
          {
            int16x8_t v88 = vld1q_dup_s16((const __int16 *)v81);
            int64x2_t v217 = (int64x2_t)v88;
            int64x2_t v221 = (int64x2_t)v88;
            float64x2_t v225 = (float64x2_t)v88;
            float64x2_t v229 = (float64x2_t)v88;
            uint64_t v87 = 2;
          }
          else if (*v77)
          {
            uint64_t v87 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v217, 64, (uint64_t)v81, v86);
          }
          else
          {
            uint64_t v87 = 0;
            int64x2_t v217 = 0uLL;
            int64x2_t v221 = 0uLL;
            float64x2_t v225 = 0uLL;
            float64x2_t v229 = 0uLL;
          }
          uint64_t v92 = (uint64_t)&v81[v87];
          unsigned int v93 = v77[1];
          if (v93 == 63)
          {
            int64x2_t v96 = *(int64x2_t *)(v92 + 16);
            int64x2_t v97 = (const double *)(v92 + 32);
            float64x2x2_t v251 = vld2q_f64(v97);
            int64x2_t v98 = vzip2q_s64(*(int64x2_t *)v92, v96);
            int64x2_t v218 = vzip1q_s64(*(int64x2_t *)v92, v96);
            int64x2_t v222 = v98;
            float64x2_t v226 = v251.val[0];
            float64x2_t v230 = v251.val[1];
            uint64_t v94 = 64;
          }
          else if (v93 == 1)
          {
            int16x8_t v95 = vld1q_dup_s16((const __int16 *)v92);
            int64x2_t v218 = (int64x2_t)v95;
            int64x2_t v222 = (int64x2_t)v95;
            float64x2_t v226 = (float64x2_t)v95;
            float64x2_t v230 = (float64x2_t)v95;
            uint64_t v94 = 2;
          }
          else if (v77[1])
          {
            uint64_t v94 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v218, 64, v92, v93);
          }
          else
          {
            uint64_t v94 = 0;
            int64x2_t v218 = 0uLL;
            int64x2_t v222 = 0uLL;
            float64x2_t v226 = 0uLL;
            float64x2_t v230 = 0uLL;
          }
          uint64_t v99 = v92 + v94;
          unsigned int v100 = v77[2];
          if (v100 == 63)
          {
            int64x2_t v103 = *(int64x2_t *)(v99 + 16);
            int64x2_t v104 = (const double *)(v99 + 32);
            float64x2x2_t v252 = vld2q_f64(v104);
            int64x2_t v105 = vzip2q_s64(*(int64x2_t *)v99, v103);
            int64x2_t v233 = vzip1q_s64(*(int64x2_t *)v99, v103);
            int64x2_t v237 = v105;
            float64x2_t v241 = v252.val[0];
            float64x2_t v245 = v252.val[1];
            uint64_t v101 = 64;
          }
          else if (v100 == 1)
          {
            int16x8_t v102 = vld1q_dup_s16((const __int16 *)v99);
            int64x2_t v233 = (int64x2_t)v102;
            int64x2_t v237 = (int64x2_t)v102;
            float64x2_t v241 = (float64x2_t)v102;
            float64x2_t v245 = (float64x2_t)v102;
            uint64_t v101 = 2;
          }
          else if (v77[2])
          {
            uint64_t v101 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v233, 64, v99, v100);
          }
          else
          {
            uint64_t v101 = 0;
            int64x2_t v233 = 0uLL;
            int64x2_t v237 = 0uLL;
            float64x2_t v241 = 0uLL;
            float64x2_t v245 = 0uLL;
          }
          uint64_t v106 = v99 + v101;
          unsigned int v107 = v77[3];
          if (v107 == 63)
          {
            int64x2_t v110 = *(int64x2_t *)(v106 + 16);
            int64x2_t v111 = (const double *)(v106 + 32);
            float64x2x2_t v253 = vld2q_f64(v111);
            int64x2_t v112 = vzip2q_s64(*(int64x2_t *)v106, v110);
            int64x2_t v234 = vzip1q_s64(*(int64x2_t *)v106, v110);
            int64x2_t v238 = v112;
            float64x2_t v242 = v253.val[0];
            float64x2_t v246 = v253.val[1];
            uint64_t v108 = 64;
          }
          else if (v107 == 1)
          {
            int16x8_t v109 = vld1q_dup_s16((const __int16 *)v106);
            int64x2_t v234 = (int64x2_t)v109;
            int64x2_t v238 = (int64x2_t)v109;
            float64x2_t v242 = (float64x2_t)v109;
            float64x2_t v246 = (float64x2_t)v109;
            uint64_t v108 = 2;
          }
          else if (v77[3])
          {
            uint64_t v108 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v234, 64, v106, v107);
          }
          else
          {
            uint64_t v108 = 0;
            int64x2_t v234 = 0uLL;
            int64x2_t v238 = 0uLL;
            float64x2_t v242 = 0uLL;
            float64x2_t v246 = 0uLL;
          }
          uint64_t v113 = v106 + v108;
          unsigned int v114 = v77[4];
          if (v114 == 63)
          {
            int64x2_t v117 = *(int64x2_t *)(v113 + 16);
            int64x2_t v118 = (const double *)(v113 + 32);
            float64x2x2_t v254 = vld2q_f64(v118);
            int64x2_t v119 = vzip2q_s64(*(int64x2_t *)v113, v117);
            int64x2_t v219 = vzip1q_s64(*(int64x2_t *)v113, v117);
            int64x2_t v223 = v119;
            float64x2_t v227 = v254.val[0];
            float64x2_t v231 = v254.val[1];
            uint64_t v115 = 64;
          }
          else if (v114 == 1)
          {
            int16x8_t v116 = vld1q_dup_s16((const __int16 *)v113);
            int64x2_t v219 = (int64x2_t)v116;
            int64x2_t v223 = (int64x2_t)v116;
            float64x2_t v227 = (float64x2_t)v116;
            float64x2_t v231 = (float64x2_t)v116;
            uint64_t v115 = 2;
          }
          else if (v77[4])
          {
            uint64_t v115 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v219, 64, v113, v114);
          }
          else
          {
            uint64_t v115 = 0;
            int64x2_t v219 = 0uLL;
            int64x2_t v223 = 0uLL;
            float64x2_t v227 = 0uLL;
            float64x2_t v231 = 0uLL;
          }
          uint64_t v120 = v113 + v115;
          unsigned int v121 = v77[5];
          if (v121 == 63)
          {
            int64x2_t v124 = *(int64x2_t *)(v120 + 16);
            int64x2_t v125 = (const double *)(v120 + 32);
            float64x2x2_t v255 = vld2q_f64(v125);
            int64x2_t v126 = vzip2q_s64(*(int64x2_t *)v120, v124);
            int64x2_t v220 = vzip1q_s64(*(int64x2_t *)v120, v124);
            int64x2_t v224 = v126;
            float64x2_t v228 = v255.val[0];
            float64x2_t v232 = v255.val[1];
            uint64_t v122 = 64;
          }
          else if (v121 == 1)
          {
            int16x8_t v123 = vld1q_dup_s16((const __int16 *)v120);
            int64x2_t v220 = (int64x2_t)v123;
            int64x2_t v224 = (int64x2_t)v123;
            float64x2_t v228 = (float64x2_t)v123;
            float64x2_t v232 = (float64x2_t)v123;
            uint64_t v122 = 2;
          }
          else if (v77[5])
          {
            uint64_t v122 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v220, 64, v120, v121);
          }
          else
          {
            uint64_t v122 = 0;
            int64x2_t v220 = 0uLL;
            int64x2_t v224 = 0uLL;
            float64x2_t v228 = 0uLL;
            float64x2_t v232 = 0uLL;
          }
          uint64_t v127 = v120 + v122;
          unsigned int v128 = v77[6];
          if (v128 == 63)
          {
            int64x2_t v131 = *(int64x2_t *)(v127 + 16);
            int64x2_t v132 = (const double *)(v127 + 32);
            float64x2x2_t v256 = vld2q_f64(v132);
            int64x2_t v133 = vzip2q_s64(*(int64x2_t *)v127, v131);
            int64x2_t v235 = vzip1q_s64(*(int64x2_t *)v127, v131);
            int64x2_t v239 = v133;
            float64x2_t v243 = v256.val[0];
            float64x2_t v247 = v256.val[1];
            uint64_t v129 = 64;
          }
          else if (v128 == 1)
          {
            int16x8_t v130 = vld1q_dup_s16((const __int16 *)v127);
            int64x2_t v235 = (int64x2_t)v130;
            int64x2_t v239 = (int64x2_t)v130;
            float64x2_t v243 = (float64x2_t)v130;
            float64x2_t v247 = (float64x2_t)v130;
            uint64_t v129 = 2;
          }
          else if (v77[6])
          {
            uint64_t v129 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v235, 64, v127, v128);
          }
          else
          {
            uint64_t v129 = 0;
            int64x2_t v235 = 0uLL;
            int64x2_t v239 = 0uLL;
            float64x2_t v243 = 0uLL;
            float64x2_t v247 = 0uLL;
          }
          uint64_t v134 = v127 + v129;
          unsigned int v135 = v77[7];
          if (v135 == 63)
          {
            int64x2_t v138 = *(int64x2_t *)(v134 + 16);
            int64x2_t v139 = (const double *)(v134 + 32);
            float64x2x2_t v257 = vld2q_f64(v139);
            int64x2_t v140 = vzip2q_s64(*(int64x2_t *)v134, v138);
            int64x2_t v236 = vzip1q_s64(*(int64x2_t *)v134, v138);
            int64x2_t v240 = v140;
            float64x2_t v244 = v257.val[0];
            float64x2_t v248 = v257.val[1];
            a7 = v191;
            uint64_t v136 = v212;
            if (!v212) {
              goto LABEL_216;
            }
          }
          else
          {
            a7 = v191;
            if (v135 == 1)
            {
              int16x8_t v137 = vld1q_dup_s16((const __int16 *)v134);
              int64x2_t v236 = (int64x2_t)v137;
              int64x2_t v240 = (int64x2_t)v137;
              float64x2_t v244 = (float64x2_t)v137;
              float64x2_t v248 = (float64x2_t)v137;
              uint64_t v136 = v212;
              if (!v212) {
                goto LABEL_216;
              }
            }
            else if (v135)
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v236, 64, v134, v135);
              uint64_t v136 = v212;
              if (!v212) {
                goto LABEL_216;
              }
            }
            else
            {
              int64x2_t v236 = 0uLL;
              int64x2_t v240 = 0uLL;
              float64x2_t v244 = 0uLL;
              float64x2_t v248 = 0uLL;
              uint64_t v136 = v212;
              if (!v212) {
                goto LABEL_216;
              }
            }
          }
          if (v213)
          {
            uint64_t v141 = 0;
            unint64_t v142 = (unint64_t)v210 << 6;
            uint64_t v143 = 4 * v211;
            int64x2_t v144 = &v217.i8[v142 + v143];
            unint64_t v145 = v208;
            uint64_t v146 = v209;
            unint64_t v147 = 4 * v213;
            if (v147 <= 1) {
              unint64_t v148 = 1;
            }
            else {
              unint64_t v148 = 4 * v213;
            }
            unint64_t v149 = v142 + v143;
            char v150 = &v217.i8[v142 + v143];
            if (v148) {
              BOOL v151 = (v148 - 1) >> 32 == 0;
            }
            else {
              BOOL v151 = 0;
            }
            uint64_t v152 = v148 & 0x3FFFFFFE0;
            uint64_t v153 = v148 & 0x3FFFFFFF8;
            char v155 = !v151 || v148 < 8;
            long long v156 = &v218.i8[v149];
            BOOL v157 = (long long *)(v208 + 16);
            uint64_t v158 = v144;
            unint64_t v159 = v208;
            do
            {
              uint64_t v160 = (char *)(v145 + v146 * v141);
              char v161 = &v144[64 * v141];
              if ((unint64_t)(&v150[64 * v141] - v160) < 0x20) {
                char v162 = 1;
              }
              else {
                char v162 = v155;
              }
              if (v162)
              {
                int v163 = 0;
                goto LABEL_213;
              }
              if (v148 >= 0x20)
              {
                uint64_t v165 = v157;
                unsigned int v166 = v156;
                uint64_t v167 = v148 & 0x3FFFFFFE0;
                do
                {
                  long long v168 = *v165;
                  *((_OWORD *)v166 - 1) = *(v165 - 1);
                  *(_OWORD *)unsigned int v166 = v168;
                  v166 += 32;
                  v165 += 2;
                  v167 -= 32;
                }
                while (v167);
                if (v148 == v152) {
                  goto LABEL_196;
                }
                uint64_t v164 = v148 & 0x3FFFFFFE0;
                if ((v148 & 0x18) == 0)
                {
                  v160 += v152;
                  v161 += v152;
                  int v163 = v148 & 0xFFFFFFE0;
                  goto LABEL_213;
                }
              }
              else
              {
                uint64_t v164 = 0;
              }
              v161 += v153;
              uint64_t v169 = v164 - v153;
              uint64_t v170 = (uint64_t *)(v159 + v164);
              int v171 = &v158[v164];
              do
              {
                uint64_t v172 = *v170++;
                *(void *)int v171 = v172;
                v171 += 8;
                v169 += 8;
              }
              while (v169);
              if (v148 == v153) {
                goto LABEL_196;
              }
              v160 += v153;
              int v163 = v148 & 0xFFFFFFF8;
LABEL_213:
              unsigned int v173 = v163 + 1;
              do
              {
                char v174 = *v160++;
                *v161++ = v174;
              }
              while (v147 > v173++);
LABEL_196:
              ++v141;
              v156 += 64;
              BOOL v157 = (long long *)((char *)v157 + v146);
              v159 += v146;
              v158 += 64;
            }
            while (v141 != v136);
          }
LABEL_216:
          AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)&v217, 64, (unint64_t)v206, v207, v214, v215);
LABEL_217:
          if (v203) {
            memcpy(v202, v81, 0x200uLL);
          }
          BOOL v21 = v38++ == v192 >> 4;
          uint64_t result = v199;
        }
        while (!v21);
        BOOL v21 = v20++ == v181;
      }
      while (!v21);
    }
  }
  return result;
}

uint64_t AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, char a12)
{
  uint64_t v281 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v215 = a8 + a10 - 1;
  uint64_t v233 = a1;
  if (*(void *)(a1 + 168)) {
    int v17 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v17 = 0;
  }
  unsigned int v18 = a5 - 1;
  unsigned int v19 = a6 - 1;
  unsigned int v20 = a8 >> 3;
  unsigned int v214 = v215 >> 3;
  BOOL v21 = (v17 & 0xD00) == 0 || v17 == 768;
  int v22 = v17 & 0xE00;
  int v24 = !v21 && v22 != 1024;
  int v236 = v24;
  uint64_t result = a1;
  if (*(unsigned char *)(a1 + 232))
  {
    unsigned int v26 = *(unsigned __int8 *)(a1 + 255);
    unsigned int v27 = *(unsigned __int8 *)(a1 + 254);
    char v28 = __clz(v18);
    if (1 << v26 >= a6 || a5 >> v27)
    {
      if (!(a6 >> v26) && 1 << v27 < a5)
      {
        if (a6 < 2) {
          unsigned int v31 = 0;
        }
        else {
          unsigned int v31 = __clz(~(-1 << -(char)__clz(v19))) - 32;
        }
        v27 += v26 + v31;
        unsigned int v26 = -v31;
      }
    }
    else
    {
      unsigned int v29 = 32 - __clz(~(-1 << -v28));
      unsigned int v30 = v27 + v26;
      if (a5 < 2) {
        unsigned int v29 = 0;
      }
      unsigned int v26 = v30 - v29;
      unsigned int v27 = v29;
    }
    if (a5 < 2)
    {
      if (v27) {
        goto LABEL_27;
      }
    }
    else if (32 - __clz(~(-1 << -v28)) < v27)
    {
LABEL_27:
      BOOL v228 = 0;
LABEL_32:
      unsigned int v224 = v27 - 4;
      unsigned int v220 = v26 - 3;
      int v33 = -1 << *(unsigned char *)(*(void *)(a1 + 208) + 48);
      unsigned int v212 = (((~v33 + a5) & v33) + ~(-1 << v27)) >> v27;
      goto LABEL_33;
    }
    if (a6 < 2) {
      unsigned int v32 = 0;
    }
    else {
      unsigned int v32 = 32 - __clz(~(-1 << -(char)__clz(v19)));
    }
    BOOL v228 = v32 >= v26;
    goto LABEL_32;
  }
  BOOL v228 = 0;
  unsigned int v212 = 0;
  unsigned int v220 = 0;
  unsigned int v224 = 0;
LABEL_33:
  if (v20 <= v214)
  {
    unsigned int v227 = a7 + a9 - 1;
    unsigned int v211 = a7 >> 4;
    if (a7 >> 4 <= v227 >> 4)
    {
      unsigned int v235 = v18 >> 4;
      unsigned int v210 = v19 >> 3;
      int v234 = (v18 & 0xF) + 1;
      int v209 = (v19 & 7) + 1;
      int v208 = ~(-1 << v220);
      uint32x2_t v34 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0xF00000007);
      int8x8_t v35 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32(vadd_s32((int32x2_t)vshl_u32(v34, (uint32x2_t)0xFFFFFFFCFFFFFFFDLL), (int32x2_t)-1))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x2000000010, v34));
      __int32 v222 = v35.i32[0] | v35.i32[1];
      int8x8_t v219 = v35;
      BOOL v218 = v35.i32[0] != 0;
      BOOL v217 = v35.i32[1] != 0;
      uint64_t v36 = a11;
      unsigned int v226 = a7;
      do
      {
        unsigned int v37 = (8 * v20) | 7;
        if (8 * v20 <= a8) {
          int v38 = a8;
        }
        else {
          int v38 = 8 * v20;
        }
        if (v215 < v37) {
          unsigned int v37 = a8 + a10 - 1;
        }
        int v223 = v38 - 8 * v20;
        int v232 = v37 - v38 + 1;
        unsigned int v39 = v211;
        if (v20 == v210) {
          unsigned int v40 = v209;
        }
        else {
          unsigned int v40 = 8;
        }
        int v41 = v20 & v208;
        uint64_t v231 = a3 + (v38 - a8) * v36;
        unsigned int v216 = v40;
        do
        {
          unsigned int v42 = 16 * v39;
          unsigned int v43 = 16 * (v39 + 1) - 1;
          if (16 * v39 <= a7) {
            int v44 = a7;
          }
          else {
            int v44 = 16 * v39;
          }
          if (v227 < v43) {
            unsigned int v43 = v227;
          }
          int v45 = v43 - v44 + 1;
          if (v39 == v235) {
            unsigned int v46 = v234;
          }
          else {
            unsigned int v46 = 16;
          }
          BOOL v47 = 1;
          if (8 * v20 >= a8 && v42 >= a7)
          {
            int v48 = v234;
            if (v39 != v235) {
              int v48 = 16;
            }
            BOOL v47 = v45 != v48 || v232 != v40;
          }
          if (v228)
          {
            if (v224 | v220)
            {
              int v50 = 0;
              uint64_t v51 = 0;
              int v52 = 1;
              BOOL v53 = v220 != 0;
              BOOL v54 = v224 != 0;
              unsigned int v55 = v220;
              unsigned int v56 = v224;
              do
              {
                --v55;
                if (v53) {
                  v51 |= (unint64_t)(v41 & v52) << v50++;
                }
                else {
                  unsigned int v55 = 0;
                }
                --v56;
                if (v54) {
                  v51 |= (unint64_t)(v39 & ~(-1 << v224) & v52) << v50++;
                }
                else {
                  unsigned int v56 = 0;
                }
                v52 *= 2;
                --v50;
                BOOL v54 = v56 != 0;
                BOOL v53 = v55 != 0;
              }
              while (v56 | v55);
            }
            else
            {
              uint64_t v51 = 0;
            }
            uint64_t v64 = *(void *)(result + 320) * ((v39 >> v224) + (v20 >> v220) * v212) + (v51 << 9);
          }
          else
          {
            if (v222)
            {
              int v57 = 0;
              uint64_t v58 = 0;
              int v59 = 1;
              BOOL v60 = v218;
              BOOL v61 = v217;
              __int32 v62 = v219.i32[0];
              __int32 v63 = v219.i32[1];
              do
              {
                --v62;
                if (v60) {
                  v58 |= (unint64_t)(v59 & v20) << v57++;
                }
                else {
                  __int32 v62 = 0;
                }
                --v63;
                if (v61) {
                  v58 |= (unint64_t)(v59 & v39) << v57++;
                }
                else {
                  __int32 v63 = 0;
                }
                v59 *= 2;
                --v57;
                BOOL v61 = v63 != 0;
                BOOL v60 = v62 != 0;
              }
              while (v63 | v62);
            }
            else
            {
              uint64_t v58 = 0;
            }
            uint64_t v64 = v58 << 9;
          }
          unsigned int v65 = *(_DWORD *)(result + 128) >> (*(unsigned char *)(result + 144) + a12);
          if (v65 <= 1) {
            unsigned int v65 = 1;
          }
          unsigned int v66 = v65 + 15;
          if (v66 < 0x20) {
            unsigned int v67 = 0;
          }
          else {
            unsigned int v67 = 32 - __clz(~(-1 << -(char)__clz((v66 >> 4) - 1)));
          }
          unsigned int v68 = *(_DWORD *)(result + 132) >> (*(unsigned char *)(result + 144) + a12);
          if (v68 <= 1) {
            unsigned int v68 = 1;
          }
          unsigned int v69 = v68 + 7;
          if (v69 < 0x10)
          {
            unsigned int v70 = 0;
            if (!v67)
            {
LABEL_110:
              uint64_t v72 = 0;
              goto LABEL_111;
            }
          }
          else
          {
            unsigned int v70 = 32 - __clz(~(-1 << -(char)__clz((v69 >> 3) - 1)));
            if (!(v70 | v67)) {
              goto LABEL_110;
            }
          }
          int v71 = 0;
          uint64_t v72 = 0;
          BOOL v73 = v67 != 0;
          BOOL v74 = v70 != 0;
          int v75 = 1;
          do
          {
            --v67;
            if (v73) {
              v72 |= (unint64_t)(v75 & v39) << v71++;
            }
            else {
              unsigned int v67 = 0;
            }
            --v70;
            if (v74) {
              v72 |= (unint64_t)(v75 & v20) << v71++;
            }
            else {
              unsigned int v70 = 0;
            }
            v75 *= 2;
            --v71;
            BOOL v74 = v70 != 0;
            BOOL v73 = v67 != 0;
          }
          while (v70 | v67);
LABEL_111:
          int v76 = v46 < 0x10 || v47;
          int64x2_t v77 = (char *)(a4 + 8 * v72);
          uint64_t v78 = v231 + 4 * (v44 - a7);
          int64x2_t v79 = (void *)(a2 + v64);
          if (v40 < 8) {
            int v80 = 1;
          }
          else {
            int v80 = v76;
          }
          if (v236)
          {
            if (v80)
            {
              int v221 = v45;
              int64x2_t v81 = v79;
              BOOL v82 = v47;
              memcpy(__dst, v79, sizeof(__dst));
              unsigned int v42 = 16 * v39;
              BOOL v47 = v82;
              uint64_t v36 = a11;
              unsigned int v40 = v216;
              int v45 = v221;
              char v83 = __dst;
              int64x2_t v79 = v81;
              uint64_t result = v233;
LABEL_121:
              float64x2_t v225 = v79;
              block[0] = MEMORY[0x263EF8330];
              block[1] = 3221225472;
              block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE7ELj2ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
              block[3] = &__block_descriptor_90_e5_v8__0l;
              block[4] = result;
              int64x2_t v238 = (int64x2_t *)v83;
              unsigned __int8 v246 = v46;
              unsigned __int8 v247 = v40;
              unsigned int v242 = v223;
              unsigned int v243 = v44 - v42;
              int64x2_t v239 = v77;
              uint64_t v240 = v78;
              uint64_t v241 = v36;
              unsigned int v244 = v232;
              unsigned int v245 = v45;
              if (v47)
              {
                dispatch_sync(*(dispatch_queue_t *)(*(void *)(result + 8) + 7384), block);
                uint64_t result = v233;
                a7 = v226;
                int v41 = v20 & v208;
                goto LABEL_123;
              }
              unsigned int v101 = *v77;
              if (v101 == 63)
              {
                int64x2_t v104 = *((int64x2_t *)v83 + 1);
                int64x2_t v105 = (const double *)(v83 + 32);
                float64x2x2_t v282 = vld2q_f64(v105);
                int64x2_t v106 = vzip2q_s64(*(int64x2_t *)v83, v104);
                int64x2_t v249 = vzip1q_s64(*(int64x2_t *)v83, v104);
                int64x2_t v253 = v106;
                float64x2_t v257 = v282.val[0];
                float64x2_t v261 = v282.val[1];
                uint64_t v102 = 64;
              }
              else if (v101 == 1)
              {
                int16x8_t v103 = vld1q_dup_s16((const __int16 *)v83);
                int64x2_t v249 = (int64x2_t)v103;
                int64x2_t v253 = (int64x2_t)v103;
                float64x2_t v257 = (float64x2_t)v103;
                float64x2_t v261 = (float64x2_t)v103;
                uint64_t v102 = 2;
              }
              else if (*v77)
              {
                uint64_t v102 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v249, 64, (uint64_t)v83, v101);
              }
              else
              {
                uint64_t v102 = 0;
                int64x2_t v249 = 0uLL;
                int64x2_t v253 = 0uLL;
                float64x2_t v257 = 0uLL;
                float64x2_t v261 = 0uLL;
              }
              uint64_t v107 = (uint64_t)&v83[v102];
              unsigned int v108 = v77[1];
              if (v108 == 63)
              {
                int64x2_t v111 = *(int64x2_t *)(v107 + 16);
                int64x2_t v112 = (const double *)(v107 + 32);
                float64x2x2_t v283 = vld2q_f64(v112);
                int64x2_t v113 = vzip2q_s64(*(int64x2_t *)v107, v111);
                int64x2_t v250 = vzip1q_s64(*(int64x2_t *)v107, v111);
                int64x2_t v254 = v113;
                float64x2_t v258 = v283.val[0];
                float64x2_t v262 = v283.val[1];
                uint64_t v109 = 64;
              }
              else if (v108 == 1)
              {
                int16x8_t v110 = vld1q_dup_s16((const __int16 *)v107);
                int64x2_t v250 = (int64x2_t)v110;
                int64x2_t v254 = (int64x2_t)v110;
                float64x2_t v258 = (float64x2_t)v110;
                float64x2_t v262 = (float64x2_t)v110;
                uint64_t v109 = 2;
              }
              else if (v77[1])
              {
                uint64_t v109 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v250, 64, v107, v108);
              }
              else
              {
                uint64_t v109 = 0;
                int64x2_t v250 = 0uLL;
                int64x2_t v254 = 0uLL;
                float64x2_t v258 = 0uLL;
                float64x2_t v262 = 0uLL;
              }
              uint64_t v114 = v107 + v109;
              unsigned int v115 = v77[2];
              if (v115 == 63)
              {
                int64x2_t v118 = *(int64x2_t *)(v114 + 16);
                int64x2_t v119 = (const double *)(v114 + 32);
                float64x2x2_t v284 = vld2q_f64(v119);
                int64x2_t v120 = vzip2q_s64(*(int64x2_t *)v114, v118);
                int64x2_t v265 = vzip1q_s64(*(int64x2_t *)v114, v118);
                int64x2_t v269 = v120;
                float64x2_t v273 = v284.val[0];
                float64x2_t v277 = v284.val[1];
                uint64_t v116 = 64;
              }
              else if (v115 == 1)
              {
                int16x8_t v117 = vld1q_dup_s16((const __int16 *)v114);
                int64x2_t v265 = (int64x2_t)v117;
                int64x2_t v269 = (int64x2_t)v117;
                float64x2_t v273 = (float64x2_t)v117;
                float64x2_t v277 = (float64x2_t)v117;
                uint64_t v116 = 2;
              }
              else if (v77[2])
              {
                uint64_t v116 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v265, 64, v114, v115);
              }
              else
              {
                uint64_t v116 = 0;
                int64x2_t v265 = 0uLL;
                int64x2_t v269 = 0uLL;
                float64x2_t v273 = 0uLL;
                float64x2_t v277 = 0uLL;
              }
              uint64_t v121 = v114 + v116;
              unsigned int v122 = v77[3];
              if (v122 == 63)
              {
                int64x2_t v125 = *(int64x2_t *)(v121 + 16);
                int64x2_t v126 = (const double *)(v121 + 32);
                float64x2x2_t v285 = vld2q_f64(v126);
                int64x2_t v127 = vzip2q_s64(*(int64x2_t *)v121, v125);
                int64x2_t v266 = vzip1q_s64(*(int64x2_t *)v121, v125);
                int64x2_t v270 = v127;
                float64x2_t v274 = v285.val[0];
                float64x2_t v278 = v285.val[1];
                uint64_t v123 = 64;
              }
              else if (v122 == 1)
              {
                int16x8_t v124 = vld1q_dup_s16((const __int16 *)v121);
                int64x2_t v266 = (int64x2_t)v124;
                int64x2_t v270 = (int64x2_t)v124;
                float64x2_t v274 = (float64x2_t)v124;
                float64x2_t v278 = (float64x2_t)v124;
                uint64_t v123 = 2;
              }
              else if (v77[3])
              {
                uint64_t v123 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v266, 64, v121, v122);
              }
              else
              {
                uint64_t v123 = 0;
                int64x2_t v266 = 0uLL;
                int64x2_t v270 = 0uLL;
                float64x2_t v274 = 0uLL;
                float64x2_t v278 = 0uLL;
              }
              uint64_t v128 = v121 + v123;
              unsigned int v129 = v77[4];
              if (v129 == 63)
              {
                int64x2_t v132 = *(int64x2_t *)(v128 + 16);
                int64x2_t v133 = (const double *)(v128 + 32);
                float64x2x2_t v286 = vld2q_f64(v133);
                int64x2_t v134 = vzip2q_s64(*(int64x2_t *)v128, v132);
                int64x2_t v251 = vzip1q_s64(*(int64x2_t *)v128, v132);
                int64x2_t v255 = v134;
                float64x2_t v259 = v286.val[0];
                float64x2_t v263 = v286.val[1];
                uint64_t v130 = 64;
              }
              else if (v129 == 1)
              {
                int16x8_t v131 = vld1q_dup_s16((const __int16 *)v128);
                int64x2_t v251 = (int64x2_t)v131;
                int64x2_t v255 = (int64x2_t)v131;
                float64x2_t v259 = (float64x2_t)v131;
                float64x2_t v263 = (float64x2_t)v131;
                uint64_t v130 = 2;
              }
              else if (v77[4])
              {
                uint64_t v130 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v251, 64, v128, v129);
              }
              else
              {
                uint64_t v130 = 0;
                int64x2_t v251 = 0uLL;
                int64x2_t v255 = 0uLL;
                float64x2_t v259 = 0uLL;
                float64x2_t v263 = 0uLL;
              }
              uint64_t v135 = v128 + v130;
              unsigned int v136 = v77[5];
              if (v136 == 63)
              {
                int64x2_t v139 = *(int64x2_t *)(v135 + 16);
                int64x2_t v140 = (const double *)(v135 + 32);
                float64x2x2_t v287 = vld2q_f64(v140);
                int64x2_t v141 = vzip2q_s64(*(int64x2_t *)v135, v139);
                int64x2_t v252 = vzip1q_s64(*(int64x2_t *)v135, v139);
                int64x2_t v256 = v141;
                float64x2_t v260 = v287.val[0];
                float64x2_t v264 = v287.val[1];
                uint64_t v137 = 64;
              }
              else if (v136 == 1)
              {
                int16x8_t v138 = vld1q_dup_s16((const __int16 *)v135);
                int64x2_t v252 = (int64x2_t)v138;
                int64x2_t v256 = (int64x2_t)v138;
                float64x2_t v260 = (float64x2_t)v138;
                float64x2_t v264 = (float64x2_t)v138;
                uint64_t v137 = 2;
              }
              else if (v77[5])
              {
                uint64_t v137 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v252, 64, v135, v136);
              }
              else
              {
                uint64_t v137 = 0;
                int64x2_t v252 = 0uLL;
                int64x2_t v256 = 0uLL;
                float64x2_t v260 = 0uLL;
                float64x2_t v264 = 0uLL;
              }
              uint64_t v142 = v135 + v137;
              unsigned int v143 = v77[6];
              if (v143 == 63)
              {
                int64x2_t v146 = *(int64x2_t *)(v142 + 16);
                unint64_t v147 = (const double *)(v142 + 32);
                float64x2x2_t v288 = vld2q_f64(v147);
                int64x2_t v148 = vzip2q_s64(*(int64x2_t *)v142, v146);
                int64x2_t v267 = vzip1q_s64(*(int64x2_t *)v142, v146);
                int64x2_t v271 = v148;
                float64x2_t v275 = v288.val[0];
                float64x2_t v279 = v288.val[1];
                uint64_t v144 = 64;
              }
              else if (v143 == 1)
              {
                int16x8_t v145 = vld1q_dup_s16((const __int16 *)v142);
                int64x2_t v267 = (int64x2_t)v145;
                int64x2_t v271 = (int64x2_t)v145;
                float64x2_t v275 = (float64x2_t)v145;
                float64x2_t v279 = (float64x2_t)v145;
                uint64_t v144 = 2;
              }
              else if (v77[6])
              {
                uint64_t v144 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v267, 64, v142, v143);
              }
              else
              {
                uint64_t v144 = 0;
                int64x2_t v267 = 0uLL;
                int64x2_t v271 = 0uLL;
                float64x2_t v275 = 0uLL;
                float64x2_t v279 = 0uLL;
              }
              uint64_t v149 = v142 + v144;
              unsigned int v150 = v77[7];
              if (v150 == 63)
              {
                int64x2_t v153 = *(int64x2_t *)(v149 + 16);
                unint64_t v154 = (const double *)(v149 + 32);
                float64x2x2_t v289 = vld2q_f64(v154);
                int64x2_t v155 = vzip2q_s64(*(int64x2_t *)v149, v153);
                int64x2_t v268 = vzip1q_s64(*(int64x2_t *)v149, v153);
                int64x2_t v272 = v155;
                float64x2_t v276 = v289.val[0];
                float64x2_t v280 = v289.val[1];
                uint64_t v151 = v244;
                if (v244) {
                  goto LABEL_199;
                }
              }
              else
              {
                if (v150 != 1)
                {
                  if (v77[7])
                  {
                    AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v268, 64, v149, v150);
                    uint64_t v151 = v244;
                    if (!v244) {
                      goto LABEL_233;
                    }
                  }
                  else
                  {
                    int64x2_t v268 = 0uLL;
                    int64x2_t v272 = 0uLL;
                    float64x2_t v276 = 0uLL;
                    float64x2_t v280 = 0uLL;
                    uint64_t v151 = v244;
                    if (!v244) {
                      goto LABEL_233;
                    }
                  }
LABEL_199:
                  if (!v245) {
                    goto LABEL_233;
                  }
                  uint64_t v156 = 0;
                  unint64_t v157 = (unint64_t)v242 << 6;
                  uint64_t v158 = 4 * v243;
                  unint64_t v159 = &v249.i8[v157 + v158];
                  uint64_t v160 = v240;
                  uint64_t v161 = v241;
                  unint64_t v162 = 4 * v245;
                  if (v162 <= 1) {
                    unint64_t v163 = 1;
                  }
                  else {
                    unint64_t v163 = 4 * v245;
                  }
                  unint64_t v164 = v157 + v158;
                  uint64_t v165 = &v249.i8[v157 + v158];
                  if (v163) {
                    BOOL v166 = (v163 - 1) >> 32 == 0;
                  }
                  else {
                    BOOL v166 = 0;
                  }
                  uint64_t v167 = v163 & 0x3FFFFFFE0;
                  uint64_t v168 = v163 & 0x3FFFFFFF8;
                  char v170 = !v166 || v163 < 8;
                  int v171 = &v250.i8[v164];
                  uint64_t v172 = (long long *)(v240 + 16);
                  unsigned int v173 = v159;
                  uint64_t v174 = v240;
                  while (2)
                  {
                    uint64_t v175 = (char *)(v160 + v161 * v156);
                    int v176 = &v159[64 * v156];
                    if ((unint64_t)(&v165[64 * v156] - v175) < 0x20) {
                      char v177 = 1;
                    }
                    else {
                      char v177 = v170;
                    }
                    if (v177)
                    {
                      int v178 = 0;
LABEL_230:
                      unsigned int v188 = v178 + 1;
                      do
                      {
                        char v189 = *v175++;
                        *v176++ = v189;
                      }
                      while (v162 > v188++);
                    }
                    else
                    {
                      if (v163 >= 0x20)
                      {
                        char v180 = v172;
                        unsigned int v181 = v171;
                        uint64_t v182 = v163 & 0x3FFFFFFE0;
                        do
                        {
                          long long v183 = *v180;
                          *((_OWORD *)v181 - 1) = *(v180 - 1);
                          *(_OWORD *)unsigned int v181 = v183;
                          v181 += 32;
                          v180 += 2;
                          v182 -= 32;
                        }
                        while (v182);
                        if (v163 == v167) {
                          goto LABEL_213;
                        }
                        uint64_t v179 = v163 & 0x3FFFFFFE0;
                        if ((v163 & 0x18) == 0)
                        {
                          v175 += v167;
                          v176 += v167;
                          int v178 = v163 & 0xFFFFFFE0;
                          goto LABEL_230;
                        }
                      }
                      else
                      {
                        uint64_t v179 = 0;
                      }
                      v176 += v168;
                      uint64_t v184 = v179 - v168;
                      int8x8_t v185 = (uint64_t *)(v174 + v179);
                      unsigned int v186 = &v173[v179];
                      do
                      {
                        uint64_t v187 = *v185++;
                        *(void *)unsigned int v186 = v187;
                        v186 += 8;
                        v184 += 8;
                      }
                      while (v184);
                      if (v163 != v168)
                      {
                        v175 += v168;
                        int v178 = v163 & 0xFFFFFFF8;
                        goto LABEL_230;
                      }
                    }
LABEL_213:
                    ++v156;
                    v171 += 64;
                    uint64_t v172 = (long long *)((char *)v172 + v161);
                    v174 += v161;
                    v173 += 64;
                    if (v156 == v151) {
                      goto LABEL_233;
                    }
                    continue;
                  }
                }
                int16x8_t v152 = vld1q_dup_s16((const __int16 *)v149);
                int64x2_t v268 = (int64x2_t)v152;
                int64x2_t v272 = (int64x2_t)v152;
                float64x2_t v276 = (float64x2_t)v152;
                float64x2_t v280 = (float64x2_t)v152;
                uint64_t v151 = v244;
                if (v244) {
                  goto LABEL_199;
                }
              }
LABEL_233:
              uint64_t v191 = 0;
              unsigned int v192 = v238;
              BOOL v193 = v239;
              int v194 = v246;
              int v195 = v247;
              a7 = v226;
              uint64_t result = v233;
              int v41 = v20 & v208;
              do
              {
                uint64_t v203 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,2u>::kSubblockPositions[v191 + 1];
                uint64_t v204 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,2u>::kSubblockPositions[v191];
                unsigned int v205 = (v194 - 4 * v204) & ~((v194 - 4 * (int)v204) >> 31);
                if (v205 >= 4) {
                  unsigned int v205 = 4;
                }
                unsigned int v206 = (v195 - 4 * v203) & ~((v195 - 4 * (int)v203) >> 31);
                if (v206 >= 4) {
                  unsigned int v206 = 4;
                }
                if (v205) {
                  BOOL v207 = v206 == 0;
                }
                else {
                  BOOL v207 = 1;
                }
                if (v207)
                {
                  char v202 = 0;
                }
                else
                {
                  uint64_t v196 = &v249 + 16 * v203 + v204;
                  int64x2_t v197 = v196[4];
                  int64x2_t v198 = vzip1q_s64(*v196, v197);
                  int64x2_t v199 = vzip2q_s64(*v196, v197);
                  int64x2_t v200 = v196[8];
                  int64x2_t v201 = v196[12];
                  *unsigned int v192 = v198;
                  v192[1] = v199;
                  v192[2] = vzip1q_s64(v200, v201);
                  v192[3] = vzip2q_s64(v200, v201);
                  v192 += 4;
                  char v202 = 63;
                }
                *v193++ = v202;
                v191 += 2;
              }
              while (v191 != 16);
LABEL_123:
              unsigned int v84 = v39 + 1;
              int64x2_t v79 = v225;
              if (!v236) {
                goto LABEL_47;
              }
LABEL_139:
              memcpy(v79, v83, 0x200uLL);
              int v41 = v20 & v208;
              uint64_t result = v233;
              goto LABEL_47;
            }
            char v83 = __dst;
          }
          else
          {
            char v83 = v79;
            if (v80) {
              goto LABEL_121;
            }
          }
          uint64_t v85 = 0;
          unsigned int v86 = (int64x2_t *)v83;
          do
          {
            uint64_t v96 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,2u>::kSubblockPositions[v85 + 1];
            uint64_t v97 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,2u>::kSubblockPositions[v85];
            unsigned int v98 = (v46 - 4 * v97) & ~((int)(v46 - 4 * v97) >> 31);
            if (v98 >= 4) {
              unsigned int v98 = 4;
            }
            unsigned int v99 = (v40 - 4 * v96) & ~((int)(v40 - 4 * v96) >> 31);
            if (v99 >= 4) {
              unsigned int v99 = 4;
            }
            if (v98) {
              BOOL v100 = v99 == 0;
            }
            else {
              BOOL v100 = 1;
            }
            if (v100)
            {
              char v95 = 0;
            }
            else
            {
              uint64_t v87 = (int64x2_t *)(v78 + 4 * a11 * v96 + 16 * v97);
              int64x2_t v88 = *(int64x2_t *)((char *)v87 + v36);
              int64x2_t v89 = vzip1q_s64(*v87, v88);
              int64x2_t v90 = vzip2q_s64(*v87, v88);
              int64x2_t v91 = (int64x2_t *)((char *)v87 + 2 * a11);
              int64x2_t v92 = *(int64x2_t *)((char *)v91 + v36);
              int64x2_t v93 = vzip1q_s64(*v91, v92);
              int64x2_t v94 = vzip2q_s64(*v91, v92);
              *unsigned int v86 = v89;
              v86[1] = v90;
              v86[2] = v93;
              v86[3] = v94;
              v86 += 4;
              char v95 = 63;
            }
            *v77++ = v95;
            v85 += 2;
          }
          while (v85 != 16);
          a7 = v226;
          unsigned int v84 = v39 + 1;
          if (v236) {
            goto LABEL_139;
          }
LABEL_47:
          BOOL v21 = v39 == v227 >> 4;
          unsigned int v39 = v84;
        }
        while (!v21);
        BOOL v21 = v20++ == v214;
      }
      while (!v21);
    }
  }
  return result;
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, uint64_t a7, unsigned int a8, int a9, int a10, uint64_t a11, int a12)
{
  uint64_t v246 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  uint64_t v17 = a1;
  unsigned int v195 = a8;
  unsigned int v18 = a8 >> 3;
  unsigned int v180 = a8 + a10 - 1;
  unsigned int v182 = v180 >> 3;
  unsigned int v19 = *(unsigned __int8 *)(*(void *)(a1 + 208) + 88);
  unsigned int v20 = *(_DWORD *)(a1 + 112);
  uint64_t v196 = v17;
  if (*(void *)(v17 + 168))
  {
    __int16 CacheMode = IOSurfaceGetCacheMode();
    uint64_t v17 = v196;
    int v22 = CacheMode & 0xF00;
  }
  else
  {
    int v22 = 0;
  }
  BOOL v23 = (v22 & 0xD00) == 0 || v22 == 768;
  int v24 = v22 & 0xE00;
  int v26 = !v23 && v24 != 1024;
  int v200 = v26;
  BOOL isLevelTiled = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::isLevelTiled(v17, *(_DWORD *)(v17 + 144) + a12);
  uint64_t v28 = v196;
  BOOL v189 = isLevelTiled;
  if (v18 <= v182)
  {
    unsigned int v188 = a7 + a9 - 1;
    unsigned int v179 = a7 >> 4;
    if (a7 >> 4 <= v188 >> 4)
    {
      unsigned int v176 = a5 - 1;
      unsigned int v198 = (a5 - 1) >> 4;
      int v197 = ((a5 - 1) & 0xF) + 1;
      int v177 = ((a6 - 1) & 7) + 1;
      unsigned int v178 = (a6 - 1) >> 3;
      uint32x2_t v29 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0xF00000007);
      int8x8_t v30 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32(vadd_s32((int32x2_t)vshl_u32(v29, (uint32x2_t)0xFFFFFFFCFFFFFFFDLL), (int32x2_t)-1))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x2000000010, v29));
      __int32 v187 = v30.i32[0] | v30.i32[1];
      int8x8_t v186 = v30;
      BOOL v185 = v30.i32[0] != 0;
      BOOL v184 = v30.i32[1] != 0;
      unint64_t v175 = 8 * v20 * (unint64_t)v19;
      do
      {
        unsigned int v31 = (8 * v18) | 7;
        if (8 * v18 <= v195) {
          int v32 = v195;
        }
        else {
          int v32 = 8 * v18;
        }
        unsigned int v33 = v179;
        if (v180 < v31) {
          unsigned int v31 = v180;
        }
        unsigned int v194 = 8 * v18;
        int v183 = v32 - 8 * v18;
        int v193 = v31 - v32 + 1;
        int v34 = v177;
        if (v18 != v178) {
          int v34 = 8;
        }
        unsigned int v201 = v34;
        uint64_t v192 = a3 + (v32 - v195) * a11;
        do
        {
          unsigned int v35 = 16 * v33;
          unsigned int v36 = 16 * (v33 + 1) - 1;
          if (16 * v33 <= a7) {
            int v37 = a7;
          }
          else {
            int v37 = 16 * v33;
          }
          if (v188 < v36) {
            unsigned int v36 = v188;
          }
          int v38 = v36 - v37 + 1;
          if (v33 == v198) {
            unsigned int v39 = v197;
          }
          else {
            unsigned int v39 = 16;
          }
          BOOL v40 = 1;
          if (v194 >= v195 && v35 >= a7)
          {
            int v41 = v197;
            if (v33 != v198) {
              int v41 = 16;
            }
            BOOL v40 = v38 != v41 || v193 != v201;
          }
          if (v189)
          {
            unsigned int v62 = 0;
            uint64_t v63 = v175 >> (*(unsigned char *)(v28 + 57) != 0);
            char v64 = 1;
            if (v63 > 127)
            {
              if (v63 > 511)
              {
                if (v63 == 512)
                {
                  char v65 = 0;
                  unsigned int v62 = 16;
                  unsigned int v66 = 16;
                }
                else
                {
                  char v65 = 1;
                  unsigned int v66 = 0;
                  if (v63 == 1024)
                  {
                    unsigned int v66 = 8;
                    unsigned int v62 = 16;
                  }
                }
              }
              else if (v63 == 128)
              {
                char v64 = 0;
                char v65 = 0;
                unsigned int v62 = 32;
                unsigned int v66 = 32;
              }
              else
              {
                char v65 = 1;
                unsigned int v66 = 0;
                if (v63 == 256)
                {
                  char v64 = 0;
                  char v65 = 0;
                  unsigned int v66 = 16;
                  unsigned int v62 = 32;
                }
              }
            }
            else
            {
              char v65 = 1;
              unsigned int v66 = 0;
              switch(v63)
              {
                case 4:
                  char v64 = 0;
                  char v65 = 0;
                  unsigned int v66 = 128;
                  unsigned int v62 = 256;
                  break;
                case 5:
                case 6:
                case 7:
                case 9:
                case 10:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 17:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                  break;
                case 8:
                  char v64 = 0;
                  char v65 = 0;
                  unsigned int v62 = 128;
                  unsigned int v66 = 128;
                  break;
                case 16:
                  char v64 = 0;
                  char v65 = 0;
                  unsigned int v66 = 64;
                  unsigned int v62 = 128;
                  break;
                case 32:
                  char v64 = 0;
                  char v65 = 0;
                  unsigned int v62 = 64;
                  unsigned int v66 = 64;
                  break;
                default:
                  if (v63 == 64)
                  {
                    char v64 = 0;
                    char v65 = 0;
                    unsigned int v66 = 32;
                    unsigned int v62 = 64;
                  }
                  break;
              }
            }
            unsigned int v164 = (v62 >> 4) - 1;
            if (v64) {
              unsigned int v165 = 0;
            }
            else {
              unsigned int v165 = 32 - __clz(~(-1 << -(char)__clz(v164)));
            }
            unsigned int v166 = (v66 >> 3) - 1;
            if (v65)
            {
              unsigned int v167 = 0;
              if (v165) {
                goto LABEL_210;
              }
            }
            else
            {
              unsigned int v167 = 32 - __clz(~(-1 << -(char)__clz(v166)));
              if (v167 | v165)
              {
LABEL_210:
                int v168 = 0;
                uint64_t v169 = 0;
                int v170 = v33 & v164;
                int v171 = v18 & v166;
                BOOL v172 = v167 != 0;
                BOOL v173 = v165 != 0;
                int v174 = 1;
                do
                {
                  --v167;
                  if (v172) {
                    v169 |= (unint64_t)(v174 & v171) << v168++;
                  }
                  else {
                    unsigned int v167 = 0;
                  }
                  --v165;
                  if (v173) {
                    v169 |= (unint64_t)(v174 & v170) << v168++;
                  }
                  else {
                    unsigned int v165 = 0;
                  }
                  v174 *= 2;
                  --v168;
                  BOOL v173 = v165 != 0;
                  BOOL v172 = v167 != 0;
                }
                while (v165 | v167);
                goto LABEL_222;
              }
            }
            uint64_t v169 = 0;
LABEL_222:
            unint64_t v50 = ((unint64_t)(v35 / v62 + v194 / v66 * ((v62 + v176) / v62)) << 14) + (v169 << 9);
            goto LABEL_58;
          }
          if (v187)
          {
            int v43 = 0;
            uint64_t v44 = 0;
            int v45 = 1;
            BOOL v46 = v185;
            BOOL v47 = v184;
            __int32 v48 = v186.i32[0];
            __int32 v49 = v186.i32[1];
            do
            {
              --v48;
              if (v46) {
                v44 |= (unint64_t)(v45 & v18) << v43++;
              }
              else {
                __int32 v48 = 0;
              }
              --v49;
              if (v47) {
                v44 |= (unint64_t)(v45 & v33) << v43++;
              }
              else {
                __int32 v49 = 0;
              }
              v45 *= 2;
              --v43;
              BOOL v47 = v49 != 0;
              BOOL v46 = v48 != 0;
            }
            while (v49 | v48);
          }
          else
          {
            uint64_t v44 = 0;
          }
          unint64_t v50 = v44 << 9;
LABEL_58:
          unsigned int v51 = *(_DWORD *)(v28 + 128) >> (*(unsigned char *)(v28 + 144) + a12);
          if (v51 <= 1) {
            unsigned int v51 = 1;
          }
          unsigned int v52 = v51 + 15;
          if (v52 < 0x20) {
            unsigned int v53 = 0;
          }
          else {
            unsigned int v53 = 32 - __clz(~(-1 << -(char)__clz((v52 >> 4) - 1)));
          }
          unsigned int v54 = *(_DWORD *)(v28 + 132) >> (*(unsigned char *)(v28 + 144) + a12);
          if (v54 <= 1) {
            unsigned int v54 = 1;
          }
          unsigned int v55 = v54 + 7;
          if (v55 < 0x10)
          {
            unsigned int v56 = 0;
            if (!v53)
            {
LABEL_80:
              uint64_t v58 = 0;
              goto LABEL_81;
            }
          }
          else
          {
            unsigned int v56 = 32 - __clz(~(-1 << -(char)__clz((v55 >> 3) - 1)));
            if (!(v56 | v53)) {
              goto LABEL_80;
            }
          }
          int v57 = 0;
          uint64_t v58 = 0;
          BOOL v59 = v53 != 0;
          BOOL v60 = v56 != 0;
          int v61 = 1;
          do
          {
            --v53;
            if (v59) {
              v58 |= (unint64_t)(v61 & v33) << v57++;
            }
            else {
              unsigned int v53 = 0;
            }
            --v56;
            if (v60) {
              v58 |= (unint64_t)(v61 & v18) << v57++;
            }
            else {
              unsigned int v56 = 0;
            }
            v61 *= 2;
            --v57;
            BOOL v60 = v56 != 0;
            BOOL v59 = v53 != 0;
          }
          while (v56 | v53);
LABEL_81:
          uint64_t v67 = a7;
          int v68 = v39 < 0x10 || v40;
          unsigned int v69 = (char *)(a4 + 8 * v58);
          unint64_t v70 = v192 + 4 * (v37 - a7);
          int v71 = (unsigned char *)(a2 + v50);
          if (v201 < 8) {
            int v72 = 1;
          }
          else {
            int v72 = v68;
          }
          __src = v71;
          if (v200)
          {
            if (!v72)
            {
              int v71 = __dst;
LABEL_94:
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock(v70, a11, (unint64_t)v71, v69, v39, v201);
              goto LABEL_95;
            }
            int v73 = v38;
            memcpy(__dst, __src, sizeof(__dst));
            int v38 = v73;
            int v71 = __dst;
            uint64_t v28 = v196;
          }
          else if (!v72)
          {
            goto LABEL_94;
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE7ELj2ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = v28;
          uint64_t v203 = v71;
          unsigned __int8 v211 = v39;
          unsigned __int8 v212 = v201;
          unsigned int v207 = v183;
          unsigned int v208 = v37 - v35;
          uint64_t v204 = v69;
          unint64_t v205 = v70;
          uint64_t v206 = a11;
          unsigned int v209 = v193;
          unsigned int v210 = v38;
          if (!v40)
          {
            unsigned int v74 = *v69;
            a7 = v67;
            if (v74 == 63)
            {
              int64x2_t v77 = *((int64x2_t *)v71 + 1);
              uint64_t v78 = (const double *)(v71 + 32);
              float64x2x2_t v247 = vld2q_f64(v78);
              int64x2_t v79 = vzip2q_s64(*(int64x2_t *)v71, v77);
              int64x2_t v214 = vzip1q_s64(*(int64x2_t *)v71, v77);
              int64x2_t v218 = v79;
              float64x2_t v222 = v247.val[0];
              float64x2_t v226 = v247.val[1];
              uint64_t v75 = 64;
            }
            else if (v74 == 1)
            {
              int16x8_t v76 = vld1q_dup_s16((const __int16 *)v71);
              int64x2_t v214 = (int64x2_t)v76;
              int64x2_t v218 = (int64x2_t)v76;
              float64x2_t v222 = (float64x2_t)v76;
              float64x2_t v226 = (float64x2_t)v76;
              uint64_t v75 = 2;
            }
            else if (*v69)
            {
              uint64_t v75 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v214, 64, (uint64_t)v71, v74);
            }
            else
            {
              uint64_t v75 = 0;
              int64x2_t v214 = 0uLL;
              int64x2_t v218 = 0uLL;
              float64x2_t v222 = 0uLL;
              float64x2_t v226 = 0uLL;
            }
            uint64_t v80 = (uint64_t)&v71[v75];
            unsigned int v81 = v69[1];
            if (v81 == 63)
            {
              int64x2_t v84 = *(int64x2_t *)(v80 + 16);
              uint64_t v85 = (const double *)(v80 + 32);
              float64x2x2_t v248 = vld2q_f64(v85);
              int64x2_t v86 = vzip2q_s64(*(int64x2_t *)v80, v84);
              int64x2_t v215 = vzip1q_s64(*(int64x2_t *)v80, v84);
              int64x2_t v219 = v86;
              float64x2_t v223 = v248.val[0];
              float64x2_t v227 = v248.val[1];
              uint64_t v82 = 64;
            }
            else if (v81 == 1)
            {
              int16x8_t v83 = vld1q_dup_s16((const __int16 *)v80);
              int64x2_t v215 = (int64x2_t)v83;
              int64x2_t v219 = (int64x2_t)v83;
              float64x2_t v223 = (float64x2_t)v83;
              float64x2_t v227 = (float64x2_t)v83;
              uint64_t v82 = 2;
            }
            else if (v69[1])
            {
              uint64_t v82 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v215, 64, v80, v81);
            }
            else
            {
              uint64_t v82 = 0;
              int64x2_t v215 = 0uLL;
              int64x2_t v219 = 0uLL;
              float64x2_t v223 = 0uLL;
              float64x2_t v227 = 0uLL;
            }
            uint64_t v87 = v80 + v82;
            unsigned int v88 = v69[2];
            if (v88 == 63)
            {
              int64x2_t v91 = *(int64x2_t *)(v87 + 16);
              int64x2_t v92 = (const double *)(v87 + 32);
              float64x2x2_t v249 = vld2q_f64(v92);
              int64x2_t v93 = vzip2q_s64(*(int64x2_t *)v87, v91);
              int64x2_t v230 = vzip1q_s64(*(int64x2_t *)v87, v91);
              int64x2_t v234 = v93;
              float64x2_t v238 = v249.val[0];
              float64x2_t v242 = v249.val[1];
              uint64_t v89 = 64;
            }
            else if (v88 == 1)
            {
              int16x8_t v90 = vld1q_dup_s16((const __int16 *)v87);
              int64x2_t v230 = (int64x2_t)v90;
              int64x2_t v234 = (int64x2_t)v90;
              float64x2_t v238 = (float64x2_t)v90;
              float64x2_t v242 = (float64x2_t)v90;
              uint64_t v89 = 2;
            }
            else if (v69[2])
            {
              uint64_t v89 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v230, 64, v87, v88);
            }
            else
            {
              uint64_t v89 = 0;
              int64x2_t v230 = 0uLL;
              int64x2_t v234 = 0uLL;
              float64x2_t v238 = 0uLL;
              float64x2_t v242 = 0uLL;
            }
            uint64_t v94 = v87 + v89;
            unsigned int v95 = v69[3];
            if (v95 == 63)
            {
              int64x2_t v98 = *(int64x2_t *)(v94 + 16);
              unsigned int v99 = (const double *)(v94 + 32);
              float64x2x2_t v250 = vld2q_f64(v99);
              int64x2_t v100 = vzip2q_s64(*(int64x2_t *)v94, v98);
              int64x2_t v231 = vzip1q_s64(*(int64x2_t *)v94, v98);
              int64x2_t v235 = v100;
              float64x2_t v239 = v250.val[0];
              float64x2_t v243 = v250.val[1];
              uint64_t v96 = 64;
            }
            else if (v95 == 1)
            {
              int16x8_t v97 = vld1q_dup_s16((const __int16 *)v94);
              int64x2_t v231 = (int64x2_t)v97;
              int64x2_t v235 = (int64x2_t)v97;
              float64x2_t v239 = (float64x2_t)v97;
              float64x2_t v243 = (float64x2_t)v97;
              uint64_t v96 = 2;
            }
            else if (v69[3])
            {
              uint64_t v96 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v231, 64, v94, v95);
            }
            else
            {
              uint64_t v96 = 0;
              int64x2_t v231 = 0uLL;
              int64x2_t v235 = 0uLL;
              float64x2_t v239 = 0uLL;
              float64x2_t v243 = 0uLL;
            }
            uint64_t v101 = v94 + v96;
            unsigned int v102 = v69[4];
            if (v102 == 63)
            {
              int64x2_t v105 = *(int64x2_t *)(v101 + 16);
              int64x2_t v106 = (const double *)(v101 + 32);
              float64x2x2_t v251 = vld2q_f64(v106);
              int64x2_t v107 = vzip2q_s64(*(int64x2_t *)v101, v105);
              int64x2_t v216 = vzip1q_s64(*(int64x2_t *)v101, v105);
              int64x2_t v220 = v107;
              float64x2_t v224 = v251.val[0];
              float64x2_t v228 = v251.val[1];
              uint64_t v103 = 64;
            }
            else if (v102 == 1)
            {
              int16x8_t v104 = vld1q_dup_s16((const __int16 *)v101);
              int64x2_t v216 = (int64x2_t)v104;
              int64x2_t v220 = (int64x2_t)v104;
              float64x2_t v224 = (float64x2_t)v104;
              float64x2_t v228 = (float64x2_t)v104;
              uint64_t v103 = 2;
            }
            else if (v69[4])
            {
              uint64_t v103 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v216, 64, v101, v102);
            }
            else
            {
              uint64_t v103 = 0;
              int64x2_t v216 = 0uLL;
              int64x2_t v220 = 0uLL;
              float64x2_t v224 = 0uLL;
              float64x2_t v228 = 0uLL;
            }
            uint64_t v108 = v101 + v103;
            unsigned int v109 = v69[5];
            if (v109 == 63)
            {
              int64x2_t v112 = *(int64x2_t *)(v108 + 16);
              int64x2_t v113 = (const double *)(v108 + 32);
              float64x2x2_t v252 = vld2q_f64(v113);
              int64x2_t v114 = vzip2q_s64(*(int64x2_t *)v108, v112);
              int64x2_t v217 = vzip1q_s64(*(int64x2_t *)v108, v112);
              int64x2_t v221 = v114;
              float64x2_t v225 = v252.val[0];
              float64x2_t v229 = v252.val[1];
              uint64_t v110 = 64;
            }
            else if (v109 == 1)
            {
              int16x8_t v111 = vld1q_dup_s16((const __int16 *)v108);
              int64x2_t v217 = (int64x2_t)v111;
              int64x2_t v221 = (int64x2_t)v111;
              float64x2_t v225 = (float64x2_t)v111;
              float64x2_t v229 = (float64x2_t)v111;
              uint64_t v110 = 2;
            }
            else if (v69[5])
            {
              uint64_t v110 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v217, 64, v108, v109);
            }
            else
            {
              uint64_t v110 = 0;
              int64x2_t v217 = 0uLL;
              int64x2_t v221 = 0uLL;
              float64x2_t v225 = 0uLL;
              float64x2_t v229 = 0uLL;
            }
            uint64_t v115 = v108 + v110;
            unsigned int v116 = v69[6];
            if (v116 == 63)
            {
              int64x2_t v119 = *(int64x2_t *)(v115 + 16);
              int64x2_t v120 = (const double *)(v115 + 32);
              float64x2x2_t v253 = vld2q_f64(v120);
              int64x2_t v121 = vzip2q_s64(*(int64x2_t *)v115, v119);
              int64x2_t v232 = vzip1q_s64(*(int64x2_t *)v115, v119);
              int64x2_t v236 = v121;
              float64x2_t v240 = v253.val[0];
              float64x2_t v244 = v253.val[1];
              uint64_t v117 = 64;
            }
            else if (v116 == 1)
            {
              int16x8_t v118 = vld1q_dup_s16((const __int16 *)v115);
              int64x2_t v232 = (int64x2_t)v118;
              int64x2_t v236 = (int64x2_t)v118;
              float64x2_t v240 = (float64x2_t)v118;
              float64x2_t v244 = (float64x2_t)v118;
              uint64_t v117 = 2;
            }
            else if (v69[6])
            {
              uint64_t v117 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v232, 64, v115, v116);
            }
            else
            {
              uint64_t v117 = 0;
              int64x2_t v232 = 0uLL;
              int64x2_t v236 = 0uLL;
              float64x2_t v240 = 0uLL;
              float64x2_t v244 = 0uLL;
            }
            uint64_t v122 = v115 + v117;
            unsigned int v123 = v69[7];
            if (v123 == 63)
            {
              int64x2_t v126 = *(int64x2_t *)(v122 + 16);
              int64x2_t v127 = (const double *)(v122 + 32);
              float64x2x2_t v254 = vld2q_f64(v127);
              int64x2_t v128 = vzip2q_s64(*(int64x2_t *)v122, v126);
              int64x2_t v233 = vzip1q_s64(*(int64x2_t *)v122, v126);
              int64x2_t v237 = v128;
              float64x2_t v241 = v254.val[0];
              float64x2_t v245 = v254.val[1];
              uint64_t v124 = v209;
              if (v209) {
                goto LABEL_156;
              }
            }
            else
            {
              if (v123 != 1)
              {
                if (v69[7])
                {
                  AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v233, 64, v122, v123);
                  uint64_t v124 = v209;
                  if (!v209) {
                    goto LABEL_190;
                  }
                }
                else
                {
                  int64x2_t v233 = 0uLL;
                  int64x2_t v237 = 0uLL;
                  float64x2_t v241 = 0uLL;
                  float64x2_t v245 = 0uLL;
                  uint64_t v124 = v209;
                  if (!v209) {
                    goto LABEL_190;
                  }
                }
LABEL_156:
                if (!v210) {
                  goto LABEL_190;
                }
                uint64_t v129 = 0;
                unint64_t v130 = (unint64_t)v207 << 6;
                uint64_t v131 = 4 * v208;
                int64x2_t v132 = &v214.i8[v130 + v131];
                unint64_t v133 = v205;
                uint64_t v134 = v206;
                unint64_t v135 = 4 * v210;
                if (v135 <= 1) {
                  unint64_t v136 = 1;
                }
                else {
                  unint64_t v136 = 4 * v210;
                }
                unint64_t v137 = v130 + v131;
                int16x8_t v138 = &v214.i8[v130 + v131];
                if (v136) {
                  BOOL v139 = (v136 - 1) >> 32 == 0;
                }
                else {
                  BOOL v139 = 0;
                }
                uint64_t v140 = v136 & 0x3FFFFFFE0;
                uint64_t v141 = v136 & 0x3FFFFFFF8;
                char v143 = !v139 || v136 < 8;
                uint64_t v144 = &v215.i8[v137];
                int16x8_t v145 = (long long *)(v205 + 16);
                int64x2_t v146 = v132;
                unint64_t v147 = v205;
                while (2)
                {
                  int64x2_t v148 = (char *)(v133 + v134 * v129);
                  uint64_t v149 = &v132[64 * v129];
                  if ((unint64_t)(&v138[64 * v129] - v148) < 0x20) {
                    char v150 = 1;
                  }
                  else {
                    char v150 = v143;
                  }
                  if (v150)
                  {
                    int v151 = 0;
LABEL_187:
                    unsigned int v161 = v151 + 1;
                    do
                    {
                      char v162 = *v148++;
                      *v149++ = v162;
                    }
                    while (v135 > v161++);
                  }
                  else
                  {
                    if (v136 >= 0x20)
                    {
                      int64x2_t v153 = v145;
                      unint64_t v154 = v144;
                      uint64_t v155 = v136 & 0x3FFFFFFE0;
                      do
                      {
                        long long v156 = *v153;
                        *((_OWORD *)v154 - 1) = *(v153 - 1);
                        *(_OWORD *)unint64_t v154 = v156;
                        v154 += 32;
                        v153 += 2;
                        v155 -= 32;
                      }
                      while (v155);
                      if (v136 == v140) {
                        goto LABEL_170;
                      }
                      uint64_t v152 = v136 & 0x3FFFFFFE0;
                      if ((v136 & 0x18) == 0)
                      {
                        v148 += v140;
                        v149 += v140;
                        int v151 = v136 & 0xFFFFFFE0;
                        goto LABEL_187;
                      }
                    }
                    else
                    {
                      uint64_t v152 = 0;
                    }
                    v149 += v141;
                    uint64_t v157 = v152 - v141;
                    uint64_t v158 = (uint64_t *)(v147 + v152);
                    unint64_t v159 = &v146[v152];
                    do
                    {
                      uint64_t v160 = *v158++;
                      *(void *)unint64_t v159 = v160;
                      v159 += 8;
                      v157 += 8;
                    }
                    while (v157);
                    if (v136 != v141)
                    {
                      v148 += v141;
                      int v151 = v136 & 0xFFFFFFF8;
                      goto LABEL_187;
                    }
                  }
LABEL_170:
                  ++v129;
                  v144 += 64;
                  int16x8_t v145 = (long long *)((char *)v145 + v134);
                  v147 += v134;
                  v146 += 64;
                  if (v129 == v124) {
                    goto LABEL_190;
                  }
                  continue;
                }
              }
              int16x8_t v125 = vld1q_dup_s16((const __int16 *)v122);
              int64x2_t v233 = (int64x2_t)v125;
              int64x2_t v237 = (int64x2_t)v125;
              float64x2_t v241 = (float64x2_t)v125;
              float64x2_t v245 = (float64x2_t)v125;
              uint64_t v124 = v209;
              if (v209) {
                goto LABEL_156;
              }
            }
LABEL_190:
            AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)&v214, 64, (unint64_t)v203, v204, v211, v212);
            if (!v200) {
              goto LABEL_26;
            }
            goto LABEL_191;
          }
          dispatch_sync(*(dispatch_queue_t *)(*(void *)(v28 + 8) + 7384), block);
LABEL_95:
          a7 = v67;
          if (!v200) {
            goto LABEL_26;
          }
LABEL_191:
          memcpy(__src, v71, 0x200uLL);
LABEL_26:
          BOOL v23 = v33++ == v188 >> 4;
          uint64_t v28 = v196;
        }
        while (!v23);
        BOOL v23 = v18++ == v182;
      }
      while (!v23);
    }
  }
}

uint64_t AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, int a12)
{
  uint64_t v281 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v232 = a8;
  unsigned int v16 = a8 >> 3;
  unsigned int v214 = a8 + a10 - 1;
  unsigned int v216 = v214 >> 3;
  unsigned int v17 = *(unsigned __int8 *)(*(void *)(a1 + 208) + 88);
  unsigned int v18 = *(_DWORD *)(a1 + 112);
  uint64_t v233 = a1;
  if (*(void *)(a1 + 168)) {
    int v19 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v19 = 0;
  }
  BOOL v20 = (v19 & 0xD00) == 0 || v19 == 768;
  int v21 = v19 & 0xE00;
  int v23 = !v20 && v21 != 1024;
  int v236 = v23;
  uint64_t result = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::isLevelTiled(a1, *(_DWORD *)(a1 + 144) + a12);
  uint64_t v25 = a1;
  int v225 = result;
  unsigned int v26 = a7;
  if (v16 <= v216)
  {
    unsigned int v224 = a7 + a9 - 1;
    if (a7 >> 4 <= v224 >> 4)
    {
      unsigned int v211 = a5 - 1;
      unsigned int v235 = (a5 - 1) >> 4;
      int v234 = ((a5 - 1) & 0xF) + 1;
      int v212 = ((a6 - 1) & 7) + 1;
      unsigned int v213 = (a6 - 1) >> 3;
      uint32x2_t v27 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0xF00000007);
      int8x8_t v28 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32(vadd_s32((int32x2_t)vshl_u32(v27, (uint32x2_t)0xFFFFFFFCFFFFFFFDLL), (int32x2_t)-1))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x2000000010, v27));
      __int32 v223 = v28.i32[0] | v28.i32[1];
      int8x8_t v221 = v28;
      BOOL v220 = v28.i32[0] != 0;
      BOOL v219 = v28.i32[1] != 0;
      unint64_t v210 = 8 * v18 * (unint64_t)v17;
      uint64_t v29 = a11;
      uint64_t result = 2 * a11;
      do
      {
        unsigned int v30 = (8 * v16) | 7;
        if (8 * v16 <= v232) {
          int v31 = v232;
        }
        else {
          int v31 = 8 * v16;
        }
        unsigned int v32 = a7 >> 4;
        if (v214 < v30) {
          unsigned int v30 = v214;
        }
        unsigned int v231 = 8 * v16;
        int v218 = v31 - 8 * v16;
        int v230 = v30 - v31 + 1;
        if (v16 == v213) {
          unsigned int v33 = v212;
        }
        else {
          unsigned int v33 = 8;
        }
        uint64_t v229 = a3 + (v31 - v232) * v29;
        unsigned int v217 = v33;
        do
        {
          unsigned int v34 = 16 * v32;
          unsigned int v35 = 16 * (v32 + 1) - 1;
          if (16 * v32 <= v26) {
            int v36 = v26;
          }
          else {
            int v36 = 16 * v32;
          }
          if (v224 < v35) {
            unsigned int v35 = a7 + a9 - 1;
          }
          int v37 = v35 - v36 + 1;
          if (v32 == v235) {
            unsigned int v38 = v234;
          }
          else {
            unsigned int v38 = 16;
          }
          BOOL v39 = 1;
          if (v231 >= v232 && v34 >= v26)
          {
            int v40 = v234;
            if (v32 != v235) {
              int v40 = 16;
            }
            BOOL v39 = v37 != v40 || v230 != v33;
          }
          if (v225)
          {
            unsigned int v61 = 0;
            uint64_t v62 = v210 >> (*(unsigned char *)(v25 + 57) != 0);
            char v63 = 1;
            if (v62 > 127)
            {
              if (v62 > 511)
              {
                if (v62 == 512)
                {
                  char v64 = 0;
                  unsigned int v61 = 16;
                  unsigned int v65 = 16;
                }
                else
                {
                  char v64 = 1;
                  unsigned int v65 = 0;
                  if (v62 == 1024)
                  {
                    unsigned int v65 = 8;
                    unsigned int v61 = 16;
                  }
                }
              }
              else if (v62 == 128)
              {
                char v63 = 0;
                char v64 = 0;
                unsigned int v61 = 32;
                unsigned int v65 = 32;
              }
              else
              {
                char v64 = 1;
                unsigned int v65 = 0;
                if (v62 == 256)
                {
                  char v63 = 0;
                  char v64 = 0;
                  unsigned int v65 = 16;
                  unsigned int v61 = 32;
                }
              }
            }
            else
            {
              char v64 = 1;
              unsigned int v65 = 0;
              switch(v62)
              {
                case 4:
                  char v63 = 0;
                  char v64 = 0;
                  unsigned int v65 = 128;
                  unsigned int v61 = 256;
                  break;
                case 5:
                case 6:
                case 7:
                case 9:
                case 10:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 17:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                  break;
                case 8:
                  char v63 = 0;
                  char v64 = 0;
                  unsigned int v61 = 128;
                  unsigned int v65 = 128;
                  break;
                case 16:
                  char v63 = 0;
                  char v64 = 0;
                  unsigned int v65 = 64;
                  unsigned int v61 = 128;
                  break;
                case 32:
                  char v63 = 0;
                  char v64 = 0;
                  unsigned int v61 = 64;
                  unsigned int v65 = 64;
                  break;
                default:
                  if (v62 == 64)
                  {
                    char v63 = 0;
                    char v64 = 0;
                    unsigned int v65 = 32;
                    unsigned int v61 = 64;
                  }
                  break;
              }
            }
            unsigned int v199 = (v61 >> 4) - 1;
            if (v63) {
              unsigned int v200 = 0;
            }
            else {
              unsigned int v200 = 32 - __clz(~(-1 << -(char)__clz(v199)));
            }
            unsigned int v201 = (v65 >> 3) - 1;
            if (v64)
            {
              unsigned int v202 = 0;
              if (v200) {
                goto LABEL_233;
              }
            }
            else
            {
              unsigned int v202 = 32 - __clz(~(-1 << -(char)__clz(v201)));
              if (v202 | v200)
              {
LABEL_233:
                int v203 = 0;
                uint64_t v204 = 0;
                int v205 = v32 & v199;
                int v206 = v16 & v201;
                BOOL v207 = v202 != 0;
                BOOL v208 = v200 != 0;
                int v209 = 1;
                do
                {
                  --v202;
                  if (v207) {
                    v204 |= (unint64_t)(v209 & v206) << v203++;
                  }
                  else {
                    unsigned int v202 = 0;
                  }
                  --v200;
                  if (v208) {
                    v204 |= (unint64_t)(v209 & v205) << v203++;
                  }
                  else {
                    unsigned int v200 = 0;
                  }
                  v209 *= 2;
                  --v203;
                  BOOL v208 = v200 != 0;
                  BOOL v207 = v202 != 0;
                }
                while (v200 | v202);
                goto LABEL_245;
              }
            }
            uint64_t v204 = 0;
LABEL_245:
            unint64_t v49 = ((unint64_t)(v34 / v61 + v231 / v65 * ((v61 + v211) / v61)) << 14) + (v204 << 9);
            uint64_t result = 2 * a11;
            goto LABEL_59;
          }
          if (v223)
          {
            int v42 = 0;
            uint64_t v43 = 0;
            int v44 = 1;
            BOOL v45 = v220;
            BOOL v46 = v219;
            __int32 v47 = v221.i32[0];
            __int32 v48 = v221.i32[1];
            do
            {
              --v47;
              if (v45) {
                v43 |= (unint64_t)(v44 & v16) << v42++;
              }
              else {
                __int32 v47 = 0;
              }
              --v48;
              if (v46) {
                v43 |= (unint64_t)(v44 & v32) << v42++;
              }
              else {
                __int32 v48 = 0;
              }
              v44 *= 2;
              --v42;
              BOOL v46 = v48 != 0;
              BOOL v45 = v47 != 0;
            }
            while (v48 | v47);
          }
          else
          {
            uint64_t v43 = 0;
          }
          unint64_t v49 = v43 << 9;
LABEL_59:
          unsigned int v50 = *(_DWORD *)(v25 + 128) >> (*(unsigned char *)(v25 + 144) + a12);
          if (v50 <= 1) {
            unsigned int v50 = 1;
          }
          unsigned int v51 = v50 + 15;
          if (v51 < 0x20) {
            unsigned int v52 = 0;
          }
          else {
            unsigned int v52 = 32 - __clz(~(-1 << -(char)__clz((v51 >> 4) - 1)));
          }
          unsigned int v53 = *(_DWORD *)(v25 + 132) >> (*(unsigned char *)(v25 + 144) + a12);
          if (v53 <= 1) {
            unsigned int v53 = 1;
          }
          unsigned int v54 = v53 + 7;
          if (v54 < 0x10)
          {
            unsigned int v55 = 0;
            if (!v52)
            {
LABEL_81:
              uint64_t v57 = 0;
              goto LABEL_82;
            }
          }
          else
          {
            unsigned int v55 = 32 - __clz(~(-1 << -(char)__clz((v54 >> 3) - 1)));
            if (!(v55 | v52)) {
              goto LABEL_81;
            }
          }
          int v56 = 0;
          uint64_t v57 = 0;
          BOOL v58 = v52 != 0;
          BOOL v59 = v55 != 0;
          int v60 = 1;
          do
          {
            --v52;
            if (v58) {
              v57 |= (unint64_t)(v60 & v32) << v56++;
            }
            else {
              unsigned int v52 = 0;
            }
            --v55;
            if (v59) {
              v57 |= (unint64_t)(v60 & v16) << v56++;
            }
            else {
              unsigned int v55 = 0;
            }
            v60 *= 2;
            --v56;
            BOOL v59 = v55 != 0;
            BOOL v58 = v52 != 0;
          }
          while (v55 | v52);
LABEL_82:
          int v66 = v38 < 0x10 || v39;
          uint64_t v67 = (char *)(a4 + 8 * v57);
          uint64_t v68 = v229 + 4 * (v36 - v26);
          unsigned int v69 = (void *)(a2 + v49);
          if (v33 < 8) {
            int v70 = 1;
          }
          else {
            int v70 = v66;
          }
          if (v236)
          {
            if (v70)
            {
              int v71 = v69;
              int v72 = v37;
              BOOL v73 = v39;
              int v74 = v36;
              memcpy(__dst, v69, sizeof(__dst));
              int v36 = v74;
              BOOL v39 = v73;
              unsigned int v34 = 16 * v32;
              int v37 = v72;
              uint64_t v29 = a11;
              unsigned int v33 = v217;
              uint64_t v75 = __dst;
              unsigned int v69 = v71;
              uint64_t v25 = v233;
LABEL_92:
              float64x2_t v222 = v69;
              block[0] = MEMORY[0x263EF8330];
              block[1] = 3221225472;
              block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE7ELj2ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
              block[3] = &__block_descriptor_90_e5_v8__0l;
              block[4] = v25;
              float64x2_t v238 = (int64x2_t *)v75;
              unsigned __int8 v246 = v38;
              unsigned __int8 v247 = v33;
              unsigned int v242 = v218;
              unsigned int v243 = v36 - v34;
              float64x2_t v239 = v67;
              uint64_t v240 = v68;
              uint64_t v241 = v29;
              unsigned int v244 = v230;
              unsigned int v245 = v37;
              if (v39)
              {
                dispatch_sync(*(dispatch_queue_t *)(*(void *)(v25 + 8) + 7384), block);
                uint64_t result = 2 * a11;
                uint64_t v25 = v233;
                unsigned int v26 = a7;
LABEL_94:
                unsigned int v69 = v222;
                goto LABEL_95;
              }
              unsigned int v92 = *v67;
              if (v92 == 63)
              {
                int64x2_t v95 = *((int64x2_t *)v75 + 1);
                uint64_t v96 = (const double *)(v75 + 32);
                float64x2x2_t v282 = vld2q_f64(v96);
                int64x2_t v97 = vzip2q_s64(*(int64x2_t *)v75, v95);
                int64x2_t v249 = vzip1q_s64(*(int64x2_t *)v75, v95);
                int64x2_t v253 = v97;
                float64x2_t v257 = v282.val[0];
                float64x2_t v261 = v282.val[1];
                uint64_t v93 = 64;
              }
              else if (v92 == 1)
              {
                int16x8_t v94 = vld1q_dup_s16((const __int16 *)v75);
                int64x2_t v249 = (int64x2_t)v94;
                int64x2_t v253 = (int64x2_t)v94;
                float64x2_t v257 = (float64x2_t)v94;
                float64x2_t v261 = (float64x2_t)v94;
                uint64_t v93 = 2;
              }
              else if (*v67)
              {
                uint64_t v93 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v249, 64, (uint64_t)v75, v92);
              }
              else
              {
                uint64_t v93 = 0;
                int64x2_t v249 = 0uLL;
                int64x2_t v253 = 0uLL;
                float64x2_t v257 = 0uLL;
                float64x2_t v261 = 0uLL;
              }
              uint64_t v98 = (uint64_t)&v75[v93];
              unsigned int v99 = v67[1];
              if (v99 == 63)
              {
                int64x2_t v102 = *(int64x2_t *)(v98 + 16);
                uint64_t v103 = (const double *)(v98 + 32);
                float64x2x2_t v283 = vld2q_f64(v103);
                int64x2_t v104 = vzip2q_s64(*(int64x2_t *)v98, v102);
                int64x2_t v250 = vzip1q_s64(*(int64x2_t *)v98, v102);
                int64x2_t v254 = v104;
                float64x2_t v258 = v283.val[0];
                float64x2_t v262 = v283.val[1];
                uint64_t v100 = 64;
              }
              else if (v99 == 1)
              {
                int16x8_t v101 = vld1q_dup_s16((const __int16 *)v98);
                int64x2_t v250 = (int64x2_t)v101;
                int64x2_t v254 = (int64x2_t)v101;
                float64x2_t v258 = (float64x2_t)v101;
                float64x2_t v262 = (float64x2_t)v101;
                uint64_t v100 = 2;
              }
              else if (v67[1])
              {
                uint64_t v100 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v250, 64, v98, v99);
              }
              else
              {
                uint64_t v100 = 0;
                int64x2_t v250 = 0uLL;
                int64x2_t v254 = 0uLL;
                float64x2_t v258 = 0uLL;
                float64x2_t v262 = 0uLL;
              }
              uint64_t v105 = v98 + v100;
              unsigned int v106 = v67[2];
              if (v106 == 63)
              {
                int64x2_t v109 = *(int64x2_t *)(v105 + 16);
                uint64_t v110 = (const double *)(v105 + 32);
                float64x2x2_t v284 = vld2q_f64(v110);
                int64x2_t v111 = vzip2q_s64(*(int64x2_t *)v105, v109);
                int64x2_t v265 = vzip1q_s64(*(int64x2_t *)v105, v109);
                int64x2_t v269 = v111;
                float64x2_t v273 = v284.val[0];
                float64x2_t v277 = v284.val[1];
                uint64_t v107 = 64;
              }
              else if (v106 == 1)
              {
                int16x8_t v108 = vld1q_dup_s16((const __int16 *)v105);
                int64x2_t v265 = (int64x2_t)v108;
                int64x2_t v269 = (int64x2_t)v108;
                float64x2_t v273 = (float64x2_t)v108;
                float64x2_t v277 = (float64x2_t)v108;
                uint64_t v107 = 2;
              }
              else if (v67[2])
              {
                uint64_t v107 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v265, 64, v105, v106);
              }
              else
              {
                uint64_t v107 = 0;
                int64x2_t v265 = 0uLL;
                int64x2_t v269 = 0uLL;
                float64x2_t v273 = 0uLL;
                float64x2_t v277 = 0uLL;
              }
              uint64_t v112 = v105 + v107;
              unsigned int v113 = v67[3];
              if (v113 == 63)
              {
                int64x2_t v116 = *(int64x2_t *)(v112 + 16);
                uint64_t v117 = (const double *)(v112 + 32);
                float64x2x2_t v285 = vld2q_f64(v117);
                int64x2_t v118 = vzip2q_s64(*(int64x2_t *)v112, v116);
                int64x2_t v266 = vzip1q_s64(*(int64x2_t *)v112, v116);
                int64x2_t v270 = v118;
                float64x2_t v274 = v285.val[0];
                float64x2_t v278 = v285.val[1];
                uint64_t v114 = 64;
              }
              else if (v113 == 1)
              {
                int16x8_t v115 = vld1q_dup_s16((const __int16 *)v112);
                int64x2_t v266 = (int64x2_t)v115;
                int64x2_t v270 = (int64x2_t)v115;
                float64x2_t v274 = (float64x2_t)v115;
                float64x2_t v278 = (float64x2_t)v115;
                uint64_t v114 = 2;
              }
              else if (v67[3])
              {
                uint64_t v114 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v266, 64, v112, v113);
              }
              else
              {
                uint64_t v114 = 0;
                int64x2_t v266 = 0uLL;
                int64x2_t v270 = 0uLL;
                float64x2_t v274 = 0uLL;
                float64x2_t v278 = 0uLL;
              }
              uint64_t v119 = v112 + v114;
              unsigned int v120 = v67[4];
              if (v120 == 63)
              {
                int64x2_t v123 = *(int64x2_t *)(v119 + 16);
                uint64_t v124 = (const double *)(v119 + 32);
                float64x2x2_t v286 = vld2q_f64(v124);
                int64x2_t v125 = vzip2q_s64(*(int64x2_t *)v119, v123);
                int64x2_t v251 = vzip1q_s64(*(int64x2_t *)v119, v123);
                int64x2_t v255 = v125;
                float64x2_t v259 = v286.val[0];
                float64x2_t v263 = v286.val[1];
                uint64_t v121 = 64;
              }
              else if (v120 == 1)
              {
                int16x8_t v122 = vld1q_dup_s16((const __int16 *)v119);
                int64x2_t v251 = (int64x2_t)v122;
                int64x2_t v255 = (int64x2_t)v122;
                float64x2_t v259 = (float64x2_t)v122;
                float64x2_t v263 = (float64x2_t)v122;
                uint64_t v121 = 2;
              }
              else if (v67[4])
              {
                uint64_t v121 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v251, 64, v119, v120);
              }
              else
              {
                uint64_t v121 = 0;
                int64x2_t v251 = 0uLL;
                int64x2_t v255 = 0uLL;
                float64x2_t v259 = 0uLL;
                float64x2_t v263 = 0uLL;
              }
              uint64_t v126 = v119 + v121;
              unsigned int v127 = v67[5];
              if (v127 == 63)
              {
                int64x2_t v130 = *(int64x2_t *)(v126 + 16);
                uint64_t v131 = (const double *)(v126 + 32);
                float64x2x2_t v287 = vld2q_f64(v131);
                int64x2_t v132 = vzip2q_s64(*(int64x2_t *)v126, v130);
                int64x2_t v252 = vzip1q_s64(*(int64x2_t *)v126, v130);
                int64x2_t v256 = v132;
                float64x2_t v260 = v287.val[0];
                float64x2_t v264 = v287.val[1];
                uint64_t v128 = 64;
              }
              else if (v127 == 1)
              {
                int16x8_t v129 = vld1q_dup_s16((const __int16 *)v126);
                int64x2_t v252 = (int64x2_t)v129;
                int64x2_t v256 = (int64x2_t)v129;
                float64x2_t v260 = (float64x2_t)v129;
                float64x2_t v264 = (float64x2_t)v129;
                uint64_t v128 = 2;
              }
              else if (v67[5])
              {
                uint64_t v128 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v252, 64, v126, v127);
              }
              else
              {
                uint64_t v128 = 0;
                int64x2_t v252 = 0uLL;
                int64x2_t v256 = 0uLL;
                float64x2_t v260 = 0uLL;
                float64x2_t v264 = 0uLL;
              }
              uint64_t v133 = v126 + v128;
              unsigned int v134 = v67[6];
              if (v134 == 63)
              {
                int64x2_t v137 = *(int64x2_t *)(v133 + 16);
                int16x8_t v138 = (const double *)(v133 + 32);
                float64x2x2_t v288 = vld2q_f64(v138);
                int64x2_t v139 = vzip2q_s64(*(int64x2_t *)v133, v137);
                int64x2_t v267 = vzip1q_s64(*(int64x2_t *)v133, v137);
                int64x2_t v271 = v139;
                float64x2_t v275 = v288.val[0];
                float64x2_t v279 = v288.val[1];
                uint64_t v135 = 64;
              }
              else if (v134 == 1)
              {
                int16x8_t v136 = vld1q_dup_s16((const __int16 *)v133);
                int64x2_t v267 = (int64x2_t)v136;
                int64x2_t v271 = (int64x2_t)v136;
                float64x2_t v275 = (float64x2_t)v136;
                float64x2_t v279 = (float64x2_t)v136;
                uint64_t v135 = 2;
              }
              else if (v67[6])
              {
                uint64_t v135 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v267, 64, v133, v134);
              }
              else
              {
                uint64_t v135 = 0;
                int64x2_t v267 = 0uLL;
                int64x2_t v271 = 0uLL;
                float64x2_t v275 = 0uLL;
                float64x2_t v279 = 0uLL;
              }
              uint64_t v140 = v133 + v135;
              unsigned int v141 = v67[7];
              if (v141 == 63)
              {
                int64x2_t v144 = *(int64x2_t *)(v140 + 16);
                int16x8_t v145 = (const double *)(v140 + 32);
                float64x2x2_t v289 = vld2q_f64(v145);
                int64x2_t v146 = vzip2q_s64(*(int64x2_t *)v140, v144);
                int64x2_t v268 = vzip1q_s64(*(int64x2_t *)v140, v144);
                int64x2_t v272 = v146;
                float64x2_t v276 = v289.val[0];
                float64x2_t v280 = v289.val[1];
                uint64_t v142 = v244;
                if (v244) {
                  goto LABEL_169;
                }
              }
              else
              {
                if (v141 != 1)
                {
                  if (v67[7])
                  {
                    AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v268, 64, v140, v141);
                    uint64_t v142 = v244;
                    if (!v244) {
                      goto LABEL_203;
                    }
                  }
                  else
                  {
                    int64x2_t v268 = 0uLL;
                    int64x2_t v272 = 0uLL;
                    float64x2_t v276 = 0uLL;
                    float64x2_t v280 = 0uLL;
                    uint64_t v142 = v244;
                    if (!v244) {
                      goto LABEL_203;
                    }
                  }
LABEL_169:
                  if (!v245) {
                    goto LABEL_203;
                  }
                  uint64_t v147 = 0;
                  unint64_t v148 = (unint64_t)v242 << 6;
                  uint64_t v149 = 4 * v243;
                  char v150 = &v249.i8[v148 + v149];
                  uint64_t v151 = v240;
                  uint64_t v152 = v241;
                  unint64_t v153 = 4 * v245;
                  if (v153 <= 1) {
                    unint64_t v154 = 1;
                  }
                  else {
                    unint64_t v154 = 4 * v245;
                  }
                  unint64_t v155 = v148 + v149;
                  long long v156 = &v249.i8[v148 + v149];
                  if (v154) {
                    BOOL v157 = (v154 - 1) >> 32 == 0;
                  }
                  else {
                    BOOL v157 = 0;
                  }
                  uint64_t v158 = v154 & 0x3FFFFFFE0;
                  uint64_t v159 = v154 & 0x3FFFFFFF8;
                  char v161 = !v157 || v154 < 8;
                  char v162 = &v250.i8[v155];
                  unint64_t v163 = (long long *)(v240 + 16);
                  unsigned int v164 = v150;
                  uint64_t v165 = v240;
                  while (2)
                  {
                    unsigned int v166 = (char *)(v151 + v152 * v147);
                    unsigned int v167 = &v150[64 * v147];
                    if ((unint64_t)(&v156[64 * v147] - v166) < 0x20) {
                      char v168 = 1;
                    }
                    else {
                      char v168 = v161;
                    }
                    if (v168)
                    {
                      int v169 = 0;
LABEL_200:
                      unsigned int v179 = v169 + 1;
                      do
                      {
                        char v180 = *v166++;
                        *v167++ = v180;
                      }
                      while (v153 > v179++);
                    }
                    else
                    {
                      if (v154 >= 0x20)
                      {
                        int v171 = v163;
                        BOOL v172 = v162;
                        uint64_t v173 = v154 & 0x3FFFFFFE0;
                        do
                        {
                          long long v174 = *v171;
                          *((_OWORD *)v172 - 1) = *(v171 - 1);
                          *(_OWORD *)BOOL v172 = v174;
                          v172 += 32;
                          v171 += 2;
                          v173 -= 32;
                        }
                        while (v173);
                        if (v154 == v158) {
                          goto LABEL_183;
                        }
                        uint64_t v170 = v154 & 0x3FFFFFFE0;
                        if ((v154 & 0x18) == 0)
                        {
                          v166 += v158;
                          v167 += v158;
                          int v169 = v154 & 0xFFFFFFE0;
                          goto LABEL_200;
                        }
                      }
                      else
                      {
                        uint64_t v170 = 0;
                      }
                      v167 += v159;
                      uint64_t v175 = v170 - v159;
                      unsigned int v176 = (uint64_t *)(v165 + v170);
                      int v177 = &v164[v170];
                      do
                      {
                        uint64_t v178 = *v176++;
                        *(void *)int v177 = v178;
                        v177 += 8;
                        v175 += 8;
                      }
                      while (v175);
                      if (v154 != v159)
                      {
                        v166 += v159;
                        int v169 = v154 & 0xFFFFFFF8;
                        goto LABEL_200;
                      }
                    }
LABEL_183:
                    ++v147;
                    v162 += 64;
                    unint64_t v163 = (long long *)((char *)v163 + v152);
                    v165 += v152;
                    v164 += 64;
                    if (v147 == v142) {
                      goto LABEL_203;
                    }
                    continue;
                  }
                }
                int16x8_t v143 = vld1q_dup_s16((const __int16 *)v140);
                int64x2_t v268 = (int64x2_t)v143;
                int64x2_t v272 = (int64x2_t)v143;
                float64x2_t v276 = (float64x2_t)v143;
                float64x2_t v280 = (float64x2_t)v143;
                uint64_t v142 = v244;
                if (v244) {
                  goto LABEL_169;
                }
              }
LABEL_203:
              uint64_t v182 = 0;
              int v183 = v238;
              BOOL v184 = v239;
              int v185 = v246;
              int v186 = v247;
              unsigned int v26 = a7;
              uint64_t v25 = v233;
              uint64_t result = 2 * a11;
              do
              {
                uint64_t v194 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,2u>::kSubblockPositions[v182 + 1];
                uint64_t v195 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,2u>::kSubblockPositions[v182];
                unsigned int v196 = (v185 - 4 * v195) & ~((v185 - 4 * (int)v195) >> 31);
                if (v196 >= 4) {
                  unsigned int v196 = 4;
                }
                unsigned int v197 = (v186 - 4 * v194) & ~((v186 - 4 * (int)v194) >> 31);
                if (v197 >= 4) {
                  unsigned int v197 = 4;
                }
                if (v196) {
                  BOOL v198 = v197 == 0;
                }
                else {
                  BOOL v198 = 1;
                }
                if (v198)
                {
                  char v193 = 0;
                }
                else
                {
                  __int32 v187 = &v249 + 16 * v194 + v195;
                  int64x2_t v188 = v187[4];
                  int64x2_t v189 = vzip1q_s64(*v187, v188);
                  int64x2_t v190 = vzip2q_s64(*v187, v188);
                  int64x2_t v191 = v187[8];
                  int64x2_t v192 = v187[12];
                  *int v183 = v189;
                  v183[1] = v190;
                  v183[2] = vzip1q_s64(v191, v192);
                  v183[3] = vzip2q_s64(v191, v192);
                  v183 += 4;
                  char v193 = 63;
                }
                *v184++ = v193;
                v182 += 2;
              }
              while (v182 != 16);
              goto LABEL_94;
            }
            uint64_t v75 = __dst;
          }
          else
          {
            uint64_t v75 = v69;
            if (v70) {
              goto LABEL_92;
            }
          }
          uint64_t v76 = 0;
          int64x2_t v77 = (int64x2_t *)v75;
          do
          {
            uint64_t v87 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,2u>::kSubblockPositions[v76 + 1];
            uint64_t v88 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,2u>::kSubblockPositions[v76];
            unsigned int v89 = (v38 - 4 * v88) & ~((int)(v38 - 4 * v88) >> 31);
            if (v89 >= 4) {
              unsigned int v89 = 4;
            }
            unsigned int v90 = (v33 - 4 * v87) & ~((int)(v33 - 4 * v87) >> 31);
            if (v90 >= 4) {
              unsigned int v90 = 4;
            }
            if (v89) {
              BOOL v91 = v90 == 0;
            }
            else {
              BOOL v91 = 1;
            }
            if (v91)
            {
              char v86 = 0;
            }
            else
            {
              uint64_t v78 = (int64x2_t *)(v68 + 4 * a11 * v87 + 16 * v88);
              int64x2_t v79 = *(int64x2_t *)((char *)v78 + v29);
              int64x2_t v80 = vzip1q_s64(*v78, v79);
              int64x2_t v81 = vzip2q_s64(*v78, v79);
              uint64_t v82 = (int64x2_t *)((char *)v78 + result);
              int64x2_t v83 = *(int64x2_t *)((char *)v82 + v29);
              int64x2_t v84 = vzip1q_s64(*v82, v83);
              int64x2_t v85 = vzip2q_s64(*v82, v83);
              *int64x2_t v77 = v80;
              v77[1] = v81;
              v77[2] = v84;
              v77[3] = v85;
              v77 += 4;
              char v86 = 63;
            }
            *v67++ = v86;
            v76 += 2;
          }
          while (v76 != 16);
LABEL_95:
          if (v236)
          {
            memcpy(v69, v75, 0x200uLL);
            uint64_t result = 2 * a11;
            uint64_t v25 = v233;
            unsigned int v26 = a7;
          }
          BOOL v20 = v32++ == v224 >> 4;
        }
        while (!v20);
        BOOL v20 = v16++ == v216;
      }
      while (!v20);
    }
  }
  return result;
}

uint64_t AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, char a12)
{
  uint64_t v249 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v198 = a8;
  unsigned int v182 = a8 + a10 - 1;
  uint64_t v199 = a1;
  if (*(void *)(a1 + 168)) {
    int v17 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v17 = 0;
  }
  unsigned int v18 = a5 - 1;
  unsigned int v19 = a6 - 1;
  unsigned int v20 = a8 >> 3;
  unsigned int v181 = v182 >> 3;
  BOOL v21 = (v17 & 0xD00) == 0 || v17 == 768;
  int v22 = v17 & 0xE00;
  int v24 = !v21 && v22 != 1024;
  int v203 = v24;
  uint64_t result = a1;
  if (*(unsigned char *)(a1 + 232))
  {
    unsigned int v26 = *(unsigned __int8 *)(a1 + 255);
    unsigned int v27 = *(unsigned __int8 *)(a1 + 254);
    char v28 = __clz(v18);
    if (1 << v26 >= a6 || a5 >> v27)
    {
      if (!(a6 >> v26) && 1 << v27 < a5)
      {
        if (a6 < 2) {
          unsigned int v31 = 0;
        }
        else {
          unsigned int v31 = __clz(~(-1 << -(char)__clz(v19))) - 32;
        }
        v27 += v26 + v31;
        unsigned int v26 = -v31;
      }
    }
    else
    {
      unsigned int v29 = 32 - __clz(~(-1 << -v28));
      unsigned int v30 = v27 + v26;
      if (a5 < 2) {
        unsigned int v29 = 0;
      }
      unsigned int v26 = v30 - v29;
      unsigned int v27 = v29;
    }
    if (a5 < 2)
    {
      if (v27) {
        goto LABEL_27;
      }
    }
    else if (32 - __clz(~(-1 << -v28)) < v27)
    {
LABEL_27:
      BOOL v193 = 0;
LABEL_32:
      unsigned int v190 = v27 - 4;
      unsigned int v186 = v26 - 3;
      int v33 = -1 << *(unsigned char *)(*(void *)(a1 + 208) + 48);
      unsigned int v179 = (((~v33 + a5) & v33) + ~(-1 << v27)) >> v27;
      goto LABEL_33;
    }
    if (a6 < 2) {
      unsigned int v32 = 0;
    }
    else {
      unsigned int v32 = 32 - __clz(~(-1 << -(char)__clz(v19)));
    }
    BOOL v193 = v32 >= v26;
    goto LABEL_32;
  }
  BOOL v193 = 0;
  unsigned int v179 = 0;
  unsigned int v186 = 0;
  unsigned int v190 = 0;
LABEL_33:
  if (v20 <= v181)
  {
    unsigned int v192 = a7 + a9 - 1;
    unsigned int v178 = a7 >> 4;
    if (a7 >> 4 <= v192 >> 4)
    {
      unsigned int v201 = v18 >> 4;
      unsigned int v177 = v19 >> 3;
      int v200 = (v18 & 0xF) + 1;
      int v176 = (v19 & 7) + 1;
      uint32x2_t v34 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0xF00000007);
      int8x8_t v35 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32(vadd_s32((int32x2_t)vshl_u32(v34, (uint32x2_t)0xFFFFFFFCFFFFFFFDLL), (int32x2_t)-1))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x2000000010, v34));
      __int32 v188 = v35.i32[0] | v35.i32[1];
      int8x8_t v185 = v35;
      BOOL v184 = v35.i32[0] != 0;
      BOOL v183 = v35.i32[1] != 0;
      unsigned int v191 = a7;
      do
      {
        unsigned int v36 = (8 * v20) | 7;
        if (8 * v20 <= v198) {
          int v37 = v198;
        }
        else {
          int v37 = 8 * v20;
        }
        if (v182 < v36) {
          unsigned int v36 = v182;
        }
        int v189 = v37 - 8 * v20;
        int v197 = v36 - v37 + 1;
        unsigned int v38 = v178;
        int v39 = v176;
        if (v20 != v177) {
          int v39 = 8;
        }
        unsigned int v204 = v39;
        uint64_t v40 = v20 & ~(-1 << v186);
        uint64_t v196 = a3 + (v37 - v198) * a11;
        do
        {
          unsigned int v41 = 16 * v38;
          unsigned int v42 = 16 * (v38 + 1) - 1;
          if (16 * v38 <= a7) {
            int v43 = a7;
          }
          else {
            int v43 = 16 * v38;
          }
          if (v192 < v42) {
            unsigned int v42 = v192;
          }
          int v44 = v42 - v43 + 1;
          if (v38 == v201) {
            unsigned int v45 = v200;
          }
          else {
            unsigned int v45 = 16;
          }
          BOOL v46 = 1;
          if (8 * v20 >= v198 && v41 >= a7)
          {
            int v47 = v200;
            if (v38 != v201) {
              int v47 = 16;
            }
            BOOL v46 = v44 != v47 || v197 != v204;
          }
          if (v193)
          {
            if (v190 | v186)
            {
              int v49 = 0;
              uint64_t v50 = 0;
              int v51 = 1;
              BOOL v52 = v186 != 0;
              BOOL v53 = v190 != 0;
              unsigned int v54 = v186;
              unsigned int v55 = v190;
              do
              {
                --v54;
                if (v52) {
                  v50 |= (unint64_t)(v40 & v51) << v49++;
                }
                else {
                  unsigned int v54 = 0;
                }
                --v55;
                if (v53) {
                  v50 |= (unint64_t)(v38 & ~(-1 << v190) & v51) << v49++;
                }
                else {
                  unsigned int v55 = 0;
                }
                v51 *= 2;
                --v49;
                BOOL v53 = v55 != 0;
                BOOL v52 = v54 != 0;
              }
              while (v55 | v54);
            }
            else
            {
              uint64_t v50 = 0;
            }
            uint64_t v63 = *(void *)(result + 320) * ((v38 >> v190) + (v20 >> v186) * v179) + (v50 << 9);
          }
          else
          {
            if (v188)
            {
              int v56 = 0;
              uint64_t v57 = 0;
              int v58 = 1;
              BOOL v59 = v184;
              BOOL v60 = v183;
              __int32 v61 = v185.i32[0];
              __int32 v62 = v185.i32[1];
              do
              {
                --v61;
                if (v59) {
                  v57 |= (unint64_t)(v58 & v20) << v56++;
                }
                else {
                  __int32 v61 = 0;
                }
                --v62;
                if (v60) {
                  v57 |= (unint64_t)(v58 & v38) << v56++;
                }
                else {
                  __int32 v62 = 0;
                }
                v58 *= 2;
                --v56;
                BOOL v60 = v62 != 0;
                BOOL v59 = v61 != 0;
              }
              while (v62 | v61);
            }
            else
            {
              uint64_t v57 = 0;
            }
            uint64_t v63 = v57 << 9;
          }
          unsigned int v64 = *(_DWORD *)(result + 128) >> (*(unsigned char *)(result + 144) + a12);
          if (v64 <= 1) {
            unsigned int v64 = 1;
          }
          unsigned int v65 = v64 + 15;
          if (v65 < 0x20) {
            unsigned int v66 = 0;
          }
          else {
            unsigned int v66 = 32 - __clz(~(-1 << -(char)__clz((v65 >> 4) - 1)));
          }
          unsigned int v67 = *(_DWORD *)(result + 132) >> (*(unsigned char *)(result + 144) + a12);
          if (v67 <= 1) {
            unsigned int v67 = 1;
          }
          unsigned int v68 = v67 + 7;
          if (v68 < 0x10)
          {
            unsigned int v69 = 0;
            if (!v66)
            {
LABEL_109:
              uint64_t v71 = 0;
              goto LABEL_110;
            }
          }
          else
          {
            unsigned int v69 = 32 - __clz(~(-1 << -(char)__clz((v68 >> 3) - 1)));
            if (!(v69 | v66)) {
              goto LABEL_109;
            }
          }
          int v70 = 0;
          uint64_t v71 = 0;
          BOOL v72 = v66 != 0;
          BOOL v73 = v69 != 0;
          int v74 = 1;
          do
          {
            --v66;
            if (v72) {
              v71 |= (unint64_t)(v74 & v38) << v70++;
            }
            else {
              unsigned int v66 = 0;
            }
            --v69;
            if (v73) {
              v71 |= (unint64_t)(v74 & v20) << v70++;
            }
            else {
              unsigned int v69 = 0;
            }
            v74 *= 2;
            --v70;
            BOOL v73 = v69 != 0;
            BOOL v72 = v66 != 0;
          }
          while (v69 | v66);
LABEL_110:
          unsigned int v75 = v43 - a7;
          int v76 = v45 < 0x10 || v46;
          int64x2_t v77 = (char *)(a4 + 8 * v71);
          unint64_t v78 = v196 + 4 * v75;
          int64x2_t v79 = (void *)(a2 + v63);
          if (v204 < 8) {
            int v80 = 1;
          }
          else {
            int v80 = v76;
          }
          unsigned int v202 = v79;
          if (v203)
          {
            int64x2_t v81 = __dst;
            if (!v80) {
              goto LABEL_122;
            }
            __int32 v187 = (char *)(a4 + 8 * v71);
            int v82 = v44;
            char v83 = v45;
            uint64_t v84 = v40;
            BOOL v85 = v46;
            memcpy(__dst, v79, sizeof(__dst));
            BOOL v46 = v85;
            uint64_t v40 = v84;
            LOBYTE(v45) = v83;
            int v44 = v82;
            int64x2_t v77 = v187;
            uint64_t result = v199;
          }
          else
          {
            int64x2_t v81 = v79;
            if (!v80)
            {
LABEL_122:
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock(v78, a11, (unint64_t)v81, v77, v45, v204);
              a7 = v191;
              goto LABEL_217;
            }
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE9ELj2ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = result;
          int v206 = v81;
          unsigned __int8 v214 = v45;
          unsigned __int8 v215 = v204;
          unsigned int v210 = v189;
          unsigned int v211 = v43 - v41;
          BOOL v207 = v77;
          unint64_t v208 = v78;
          uint64_t v209 = a11;
          unsigned int v212 = v197;
          unsigned int v213 = v44;
          if (v46)
          {
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(result + 8) + 7384), block);
            a7 = v191;
            goto LABEL_217;
          }
          unsigned int v86 = *v77;
          if (v86 == 63)
          {
            int64x2_t v89 = *((int64x2_t *)v81 + 1);
            unsigned int v90 = (const double *)(v81 + 32);
            float64x2x2_t v250 = vld2q_f64(v90);
            int64x2_t v91 = vzip2q_s64(*(int64x2_t *)v81, v89);
            int64x2_t v217 = vzip1q_s64(*(int64x2_t *)v81, v89);
            int64x2_t v221 = v91;
            float64x2_t v225 = v250.val[0];
            float64x2_t v229 = v250.val[1];
            uint64_t v87 = 64;
          }
          else if (v86 == 1)
          {
            int16x8_t v88 = vld1q_dup_s16((const __int16 *)v81);
            int64x2_t v217 = (int64x2_t)v88;
            int64x2_t v221 = (int64x2_t)v88;
            float64x2_t v225 = (float64x2_t)v88;
            float64x2_t v229 = (float64x2_t)v88;
            uint64_t v87 = 2;
          }
          else if (*v77)
          {
            uint64_t v87 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v217, 64, (uint64_t)v81, v86);
          }
          else
          {
            uint64_t v87 = 0;
            int64x2_t v217 = 0uLL;
            int64x2_t v221 = 0uLL;
            float64x2_t v225 = 0uLL;
            float64x2_t v229 = 0uLL;
          }
          uint64_t v92 = (uint64_t)&v81[v87];
          unsigned int v93 = v77[1];
          if (v93 == 63)
          {
            int64x2_t v96 = *(int64x2_t *)(v92 + 16);
            int64x2_t v97 = (const double *)(v92 + 32);
            float64x2x2_t v251 = vld2q_f64(v97);
            int64x2_t v98 = vzip2q_s64(*(int64x2_t *)v92, v96);
            int64x2_t v218 = vzip1q_s64(*(int64x2_t *)v92, v96);
            int64x2_t v222 = v98;
            float64x2_t v226 = v251.val[0];
            float64x2_t v230 = v251.val[1];
            uint64_t v94 = 64;
          }
          else if (v93 == 1)
          {
            int16x8_t v95 = vld1q_dup_s16((const __int16 *)v92);
            int64x2_t v218 = (int64x2_t)v95;
            int64x2_t v222 = (int64x2_t)v95;
            float64x2_t v226 = (float64x2_t)v95;
            float64x2_t v230 = (float64x2_t)v95;
            uint64_t v94 = 2;
          }
          else if (v77[1])
          {
            uint64_t v94 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v218, 64, v92, v93);
          }
          else
          {
            uint64_t v94 = 0;
            int64x2_t v218 = 0uLL;
            int64x2_t v222 = 0uLL;
            float64x2_t v226 = 0uLL;
            float64x2_t v230 = 0uLL;
          }
          uint64_t v99 = v92 + v94;
          unsigned int v100 = v77[2];
          if (v100 == 63)
          {
            int64x2_t v103 = *(int64x2_t *)(v99 + 16);
            int64x2_t v104 = (const double *)(v99 + 32);
            float64x2x2_t v252 = vld2q_f64(v104);
            int64x2_t v105 = vzip2q_s64(*(int64x2_t *)v99, v103);
            int64x2_t v233 = vzip1q_s64(*(int64x2_t *)v99, v103);
            int64x2_t v237 = v105;
            float64x2_t v241 = v252.val[0];
            float64x2_t v245 = v252.val[1];
            uint64_t v101 = 64;
          }
          else if (v100 == 1)
          {
            int16x8_t v102 = vld1q_dup_s16((const __int16 *)v99);
            int64x2_t v233 = (int64x2_t)v102;
            int64x2_t v237 = (int64x2_t)v102;
            float64x2_t v241 = (float64x2_t)v102;
            float64x2_t v245 = (float64x2_t)v102;
            uint64_t v101 = 2;
          }
          else if (v77[2])
          {
            uint64_t v101 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v233, 64, v99, v100);
          }
          else
          {
            uint64_t v101 = 0;
            int64x2_t v233 = 0uLL;
            int64x2_t v237 = 0uLL;
            float64x2_t v241 = 0uLL;
            float64x2_t v245 = 0uLL;
          }
          uint64_t v106 = v99 + v101;
          unsigned int v107 = v77[3];
          if (v107 == 63)
          {
            int64x2_t v110 = *(int64x2_t *)(v106 + 16);
            int64x2_t v111 = (const double *)(v106 + 32);
            float64x2x2_t v253 = vld2q_f64(v111);
            int64x2_t v112 = vzip2q_s64(*(int64x2_t *)v106, v110);
            int64x2_t v234 = vzip1q_s64(*(int64x2_t *)v106, v110);
            int64x2_t v238 = v112;
            float64x2_t v242 = v253.val[0];
            float64x2_t v246 = v253.val[1];
            uint64_t v108 = 64;
          }
          else if (v107 == 1)
          {
            int16x8_t v109 = vld1q_dup_s16((const __int16 *)v106);
            int64x2_t v234 = (int64x2_t)v109;
            int64x2_t v238 = (int64x2_t)v109;
            float64x2_t v242 = (float64x2_t)v109;
            float64x2_t v246 = (float64x2_t)v109;
            uint64_t v108 = 2;
          }
          else if (v77[3])
          {
            uint64_t v108 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v234, 64, v106, v107);
          }
          else
          {
            uint64_t v108 = 0;
            int64x2_t v234 = 0uLL;
            int64x2_t v238 = 0uLL;
            float64x2_t v242 = 0uLL;
            float64x2_t v246 = 0uLL;
          }
          uint64_t v113 = v106 + v108;
          unsigned int v114 = v77[4];
          if (v114 == 63)
          {
            int64x2_t v117 = *(int64x2_t *)(v113 + 16);
            int64x2_t v118 = (const double *)(v113 + 32);
            float64x2x2_t v254 = vld2q_f64(v118);
            int64x2_t v119 = vzip2q_s64(*(int64x2_t *)v113, v117);
            int64x2_t v219 = vzip1q_s64(*(int64x2_t *)v113, v117);
            int64x2_t v223 = v119;
            float64x2_t v227 = v254.val[0];
            float64x2_t v231 = v254.val[1];
            uint64_t v115 = 64;
          }
          else if (v114 == 1)
          {
            int16x8_t v116 = vld1q_dup_s16((const __int16 *)v113);
            int64x2_t v219 = (int64x2_t)v116;
            int64x2_t v223 = (int64x2_t)v116;
            float64x2_t v227 = (float64x2_t)v116;
            float64x2_t v231 = (float64x2_t)v116;
            uint64_t v115 = 2;
          }
          else if (v77[4])
          {
            uint64_t v115 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v219, 64, v113, v114);
          }
          else
          {
            uint64_t v115 = 0;
            int64x2_t v219 = 0uLL;
            int64x2_t v223 = 0uLL;
            float64x2_t v227 = 0uLL;
            float64x2_t v231 = 0uLL;
          }
          uint64_t v120 = v113 + v115;
          unsigned int v121 = v77[5];
          if (v121 == 63)
          {
            int64x2_t v124 = *(int64x2_t *)(v120 + 16);
            int64x2_t v125 = (const double *)(v120 + 32);
            float64x2x2_t v255 = vld2q_f64(v125);
            int64x2_t v126 = vzip2q_s64(*(int64x2_t *)v120, v124);
            int64x2_t v220 = vzip1q_s64(*(int64x2_t *)v120, v124);
            int64x2_t v224 = v126;
            float64x2_t v228 = v255.val[0];
            float64x2_t v232 = v255.val[1];
            uint64_t v122 = 64;
          }
          else if (v121 == 1)
          {
            int16x8_t v123 = vld1q_dup_s16((const __int16 *)v120);
            int64x2_t v220 = (int64x2_t)v123;
            int64x2_t v224 = (int64x2_t)v123;
            float64x2_t v228 = (float64x2_t)v123;
            float64x2_t v232 = (float64x2_t)v123;
            uint64_t v122 = 2;
          }
          else if (v77[5])
          {
            uint64_t v122 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v220, 64, v120, v121);
          }
          else
          {
            uint64_t v122 = 0;
            int64x2_t v220 = 0uLL;
            int64x2_t v224 = 0uLL;
            float64x2_t v228 = 0uLL;
            float64x2_t v232 = 0uLL;
          }
          uint64_t v127 = v120 + v122;
          unsigned int v128 = v77[6];
          if (v128 == 63)
          {
            int64x2_t v131 = *(int64x2_t *)(v127 + 16);
            int64x2_t v132 = (const double *)(v127 + 32);
            float64x2x2_t v256 = vld2q_f64(v132);
            int64x2_t v133 = vzip2q_s64(*(int64x2_t *)v127, v131);
            int64x2_t v235 = vzip1q_s64(*(int64x2_t *)v127, v131);
            int64x2_t v239 = v133;
            float64x2_t v243 = v256.val[0];
            float64x2_t v247 = v256.val[1];
            uint64_t v129 = 64;
          }
          else if (v128 == 1)
          {
            int16x8_t v130 = vld1q_dup_s16((const __int16 *)v127);
            int64x2_t v235 = (int64x2_t)v130;
            int64x2_t v239 = (int64x2_t)v130;
            float64x2_t v243 = (float64x2_t)v130;
            float64x2_t v247 = (float64x2_t)v130;
            uint64_t v129 = 2;
          }
          else if (v77[6])
          {
            uint64_t v129 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v235, 64, v127, v128);
          }
          else
          {
            uint64_t v129 = 0;
            int64x2_t v235 = 0uLL;
            int64x2_t v239 = 0uLL;
            float64x2_t v243 = 0uLL;
            float64x2_t v247 = 0uLL;
          }
          uint64_t v134 = v127 + v129;
          unsigned int v135 = v77[7];
          if (v135 == 63)
          {
            int64x2_t v138 = *(int64x2_t *)(v134 + 16);
            int64x2_t v139 = (const double *)(v134 + 32);
            float64x2x2_t v257 = vld2q_f64(v139);
            int64x2_t v140 = vzip2q_s64(*(int64x2_t *)v134, v138);
            int64x2_t v236 = vzip1q_s64(*(int64x2_t *)v134, v138);
            int64x2_t v240 = v140;
            float64x2_t v244 = v257.val[0];
            float64x2_t v248 = v257.val[1];
            a7 = v191;
            uint64_t v136 = v212;
            if (!v212) {
              goto LABEL_216;
            }
          }
          else
          {
            a7 = v191;
            if (v135 == 1)
            {
              int16x8_t v137 = vld1q_dup_s16((const __int16 *)v134);
              int64x2_t v236 = (int64x2_t)v137;
              int64x2_t v240 = (int64x2_t)v137;
              float64x2_t v244 = (float64x2_t)v137;
              float64x2_t v248 = (float64x2_t)v137;
              uint64_t v136 = v212;
              if (!v212) {
                goto LABEL_216;
              }
            }
            else if (v135)
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v236, 64, v134, v135);
              uint64_t v136 = v212;
              if (!v212) {
                goto LABEL_216;
              }
            }
            else
            {
              int64x2_t v236 = 0uLL;
              int64x2_t v240 = 0uLL;
              float64x2_t v244 = 0uLL;
              float64x2_t v248 = 0uLL;
              uint64_t v136 = v212;
              if (!v212) {
                goto LABEL_216;
              }
            }
          }
          if (v213)
          {
            uint64_t v141 = 0;
            unint64_t v142 = (unint64_t)v210 << 6;
            uint64_t v143 = 4 * v211;
            int64x2_t v144 = &v217.i8[v142 + v143];
            unint64_t v145 = v208;
            uint64_t v146 = v209;
            unint64_t v147 = 4 * v213;
            if (v147 <= 1) {
              unint64_t v148 = 1;
            }
            else {
              unint64_t v148 = 4 * v213;
            }
            unint64_t v149 = v142 + v143;
            char v150 = &v217.i8[v142 + v143];
            if (v148) {
              BOOL v151 = (v148 - 1) >> 32 == 0;
            }
            else {
              BOOL v151 = 0;
            }
            uint64_t v152 = v148 & 0x3FFFFFFE0;
            uint64_t v153 = v148 & 0x3FFFFFFF8;
            char v155 = !v151 || v148 < 8;
            long long v156 = &v218.i8[v149];
            BOOL v157 = (long long *)(v208 + 16);
            uint64_t v158 = v144;
            unint64_t v159 = v208;
            do
            {
              uint64_t v160 = (char *)(v145 + v146 * v141);
              char v161 = &v144[64 * v141];
              if ((unint64_t)(&v150[64 * v141] - v160) < 0x20) {
                char v162 = 1;
              }
              else {
                char v162 = v155;
              }
              if (v162)
              {
                int v163 = 0;
                goto LABEL_213;
              }
              if (v148 >= 0x20)
              {
                uint64_t v165 = v157;
                unsigned int v166 = v156;
                uint64_t v167 = v148 & 0x3FFFFFFE0;
                do
                {
                  long long v168 = *v165;
                  *((_OWORD *)v166 - 1) = *(v165 - 1);
                  *(_OWORD *)unsigned int v166 = v168;
                  v166 += 32;
                  v165 += 2;
                  v167 -= 32;
                }
                while (v167);
                if (v148 == v152) {
                  goto LABEL_196;
                }
                uint64_t v164 = v148 & 0x3FFFFFFE0;
                if ((v148 & 0x18) == 0)
                {
                  v160 += v152;
                  v161 += v152;
                  int v163 = v148 & 0xFFFFFFE0;
                  goto LABEL_213;
                }
              }
              else
              {
                uint64_t v164 = 0;
              }
              v161 += v153;
              uint64_t v169 = v164 - v153;
              uint64_t v170 = (uint64_t *)(v159 + v164);
              int v171 = &v158[v164];
              do
              {
                uint64_t v172 = *v170++;
                *(void *)int v171 = v172;
                v171 += 8;
                v169 += 8;
              }
              while (v169);
              if (v148 == v153) {
                goto LABEL_196;
              }
              v160 += v153;
              int v163 = v148 & 0xFFFFFFF8;
LABEL_213:
              unsigned int v173 = v163 + 1;
              do
              {
                char v174 = *v160++;
                *v161++ = v174;
              }
              while (v147 > v173++);
LABEL_196:
              ++v141;
              v156 += 64;
              BOOL v157 = (long long *)((char *)v157 + v146);
              v159 += v146;
              v158 += 64;
            }
            while (v141 != v136);
          }
LABEL_216:
          AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)&v217, 64, (unint64_t)v206, v207, v214, v215);
LABEL_217:
          if (v203) {
            memcpy(v202, v81, 0x200uLL);
          }
          BOOL v21 = v38++ == v192 >> 4;
          uint64_t result = v199;
        }
        while (!v21);
        BOOL v21 = v20++ == v181;
      }
      while (!v21);
    }
  }
  return result;
}

uint64_t AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, char a12)
{
  uint64_t v281 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v215 = a8 + a10 - 1;
  uint64_t v233 = a1;
  if (*(void *)(a1 + 168)) {
    int v17 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v17 = 0;
  }
  unsigned int v18 = a5 - 1;
  unsigned int v19 = a6 - 1;
  unsigned int v20 = a8 >> 3;
  unsigned int v214 = v215 >> 3;
  BOOL v21 = (v17 & 0xD00) == 0 || v17 == 768;
  int v22 = v17 & 0xE00;
  int v24 = !v21 && v22 != 1024;
  int v236 = v24;
  uint64_t result = a1;
  if (*(unsigned char *)(a1 + 232))
  {
    unsigned int v26 = *(unsigned __int8 *)(a1 + 255);
    unsigned int v27 = *(unsigned __int8 *)(a1 + 254);
    char v28 = __clz(v18);
    if (1 << v26 >= a6 || a5 >> v27)
    {
      if (!(a6 >> v26) && 1 << v27 < a5)
      {
        if (a6 < 2) {
          unsigned int v31 = 0;
        }
        else {
          unsigned int v31 = __clz(~(-1 << -(char)__clz(v19))) - 32;
        }
        v27 += v26 + v31;
        unsigned int v26 = -v31;
      }
    }
    else
    {
      unsigned int v29 = 32 - __clz(~(-1 << -v28));
      unsigned int v30 = v27 + v26;
      if (a5 < 2) {
        unsigned int v29 = 0;
      }
      unsigned int v26 = v30 - v29;
      unsigned int v27 = v29;
    }
    if (a5 < 2)
    {
      if (v27) {
        goto LABEL_27;
      }
    }
    else if (32 - __clz(~(-1 << -v28)) < v27)
    {
LABEL_27:
      BOOL v228 = 0;
LABEL_32:
      unsigned int v224 = v27 - 4;
      unsigned int v220 = v26 - 3;
      int v33 = -1 << *(unsigned char *)(*(void *)(a1 + 208) + 48);
      unsigned int v212 = (((~v33 + a5) & v33) + ~(-1 << v27)) >> v27;
      goto LABEL_33;
    }
    if (a6 < 2) {
      unsigned int v32 = 0;
    }
    else {
      unsigned int v32 = 32 - __clz(~(-1 << -(char)__clz(v19)));
    }
    BOOL v228 = v32 >= v26;
    goto LABEL_32;
  }
  BOOL v228 = 0;
  unsigned int v212 = 0;
  unsigned int v220 = 0;
  unsigned int v224 = 0;
LABEL_33:
  if (v20 <= v214)
  {
    unsigned int v227 = a7 + a9 - 1;
    unsigned int v211 = a7 >> 4;
    if (a7 >> 4 <= v227 >> 4)
    {
      unsigned int v235 = v18 >> 4;
      unsigned int v210 = v19 >> 3;
      int v234 = (v18 & 0xF) + 1;
      int v209 = (v19 & 7) + 1;
      int v208 = ~(-1 << v220);
      uint32x2_t v34 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0xF00000007);
      int8x8_t v35 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32(vadd_s32((int32x2_t)vshl_u32(v34, (uint32x2_t)0xFFFFFFFCFFFFFFFDLL), (int32x2_t)-1))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x2000000010, v34));
      __int32 v222 = v35.i32[0] | v35.i32[1];
      int8x8_t v219 = v35;
      BOOL v218 = v35.i32[0] != 0;
      BOOL v217 = v35.i32[1] != 0;
      uint64_t v36 = a11;
      unsigned int v226 = a7;
      do
      {
        unsigned int v37 = (8 * v20) | 7;
        if (8 * v20 <= a8) {
          int v38 = a8;
        }
        else {
          int v38 = 8 * v20;
        }
        if (v215 < v37) {
          unsigned int v37 = a8 + a10 - 1;
        }
        int v223 = v38 - 8 * v20;
        int v232 = v37 - v38 + 1;
        unsigned int v39 = v211;
        if (v20 == v210) {
          unsigned int v40 = v209;
        }
        else {
          unsigned int v40 = 8;
        }
        int v41 = v20 & v208;
        uint64_t v231 = a3 + (v38 - a8) * v36;
        unsigned int v216 = v40;
        do
        {
          unsigned int v42 = 16 * v39;
          unsigned int v43 = 16 * (v39 + 1) - 1;
          if (16 * v39 <= a7) {
            int v44 = a7;
          }
          else {
            int v44 = 16 * v39;
          }
          if (v227 < v43) {
            unsigned int v43 = v227;
          }
          int v45 = v43 - v44 + 1;
          if (v39 == v235) {
            unsigned int v46 = v234;
          }
          else {
            unsigned int v46 = 16;
          }
          BOOL v47 = 1;
          if (8 * v20 >= a8 && v42 >= a7)
          {
            int v48 = v234;
            if (v39 != v235) {
              int v48 = 16;
            }
            BOOL v47 = v45 != v48 || v232 != v40;
          }
          if (v228)
          {
            if (v224 | v220)
            {
              int v50 = 0;
              uint64_t v51 = 0;
              int v52 = 1;
              BOOL v53 = v220 != 0;
              BOOL v54 = v224 != 0;
              unsigned int v55 = v220;
              unsigned int v56 = v224;
              do
              {
                --v55;
                if (v53) {
                  v51 |= (unint64_t)(v41 & v52) << v50++;
                }
                else {
                  unsigned int v55 = 0;
                }
                --v56;
                if (v54) {
                  v51 |= (unint64_t)(v39 & ~(-1 << v224) & v52) << v50++;
                }
                else {
                  unsigned int v56 = 0;
                }
                v52 *= 2;
                --v50;
                BOOL v54 = v56 != 0;
                BOOL v53 = v55 != 0;
              }
              while (v56 | v55);
            }
            else
            {
              uint64_t v51 = 0;
            }
            uint64_t v64 = *(void *)(result + 320) * ((v39 >> v224) + (v20 >> v220) * v212) + (v51 << 9);
          }
          else
          {
            if (v222)
            {
              int v57 = 0;
              uint64_t v58 = 0;
              int v59 = 1;
              BOOL v60 = v218;
              BOOL v61 = v217;
              __int32 v62 = v219.i32[0];
              __int32 v63 = v219.i32[1];
              do
              {
                --v62;
                if (v60) {
                  v58 |= (unint64_t)(v59 & v20) << v57++;
                }
                else {
                  __int32 v62 = 0;
                }
                --v63;
                if (v61) {
                  v58 |= (unint64_t)(v59 & v39) << v57++;
                }
                else {
                  __int32 v63 = 0;
                }
                v59 *= 2;
                --v57;
                BOOL v61 = v63 != 0;
                BOOL v60 = v62 != 0;
              }
              while (v63 | v62);
            }
            else
            {
              uint64_t v58 = 0;
            }
            uint64_t v64 = v58 << 9;
          }
          unsigned int v65 = *(_DWORD *)(result + 128) >> (*(unsigned char *)(result + 144) + a12);
          if (v65 <= 1) {
            unsigned int v65 = 1;
          }
          unsigned int v66 = v65 + 15;
          if (v66 < 0x20) {
            unsigned int v67 = 0;
          }
          else {
            unsigned int v67 = 32 - __clz(~(-1 << -(char)__clz((v66 >> 4) - 1)));
          }
          unsigned int v68 = *(_DWORD *)(result + 132) >> (*(unsigned char *)(result + 144) + a12);
          if (v68 <= 1) {
            unsigned int v68 = 1;
          }
          unsigned int v69 = v68 + 7;
          if (v69 < 0x10)
          {
            unsigned int v70 = 0;
            if (!v67)
            {
LABEL_110:
              uint64_t v72 = 0;
              goto LABEL_111;
            }
          }
          else
          {
            unsigned int v70 = 32 - __clz(~(-1 << -(char)__clz((v69 >> 3) - 1)));
            if (!(v70 | v67)) {
              goto LABEL_110;
            }
          }
          int v71 = 0;
          uint64_t v72 = 0;
          BOOL v73 = v67 != 0;
          BOOL v74 = v70 != 0;
          int v75 = 1;
          do
          {
            --v67;
            if (v73) {
              v72 |= (unint64_t)(v75 & v39) << v71++;
            }
            else {
              unsigned int v67 = 0;
            }
            --v70;
            if (v74) {
              v72 |= (unint64_t)(v75 & v20) << v71++;
            }
            else {
              unsigned int v70 = 0;
            }
            v75 *= 2;
            --v71;
            BOOL v74 = v70 != 0;
            BOOL v73 = v67 != 0;
          }
          while (v70 | v67);
LABEL_111:
          int v76 = v46 < 0x10 || v47;
          int64x2_t v77 = (char *)(a4 + 8 * v72);
          uint64_t v78 = v231 + 4 * (v44 - a7);
          int64x2_t v79 = (void *)(a2 + v64);
          if (v40 < 8) {
            int v80 = 1;
          }
          else {
            int v80 = v76;
          }
          if (v236)
          {
            if (v80)
            {
              int v221 = v45;
              int64x2_t v81 = v79;
              BOOL v82 = v47;
              memcpy(__dst, v79, sizeof(__dst));
              unsigned int v42 = 16 * v39;
              BOOL v47 = v82;
              uint64_t v36 = a11;
              unsigned int v40 = v216;
              int v45 = v221;
              char v83 = __dst;
              int64x2_t v79 = v81;
              uint64_t result = v233;
LABEL_121:
              float64x2_t v225 = v79;
              block[0] = MEMORY[0x263EF8330];
              block[1] = 3221225472;
              block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE9ELj2ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
              block[3] = &__block_descriptor_90_e5_v8__0l;
              block[4] = result;
              int64x2_t v238 = (int64x2_t *)v83;
              unsigned __int8 v246 = v46;
              unsigned __int8 v247 = v40;
              unsigned int v242 = v223;
              unsigned int v243 = v44 - v42;
              int64x2_t v239 = v77;
              uint64_t v240 = v78;
              uint64_t v241 = v36;
              unsigned int v244 = v232;
              unsigned int v245 = v45;
              if (v47)
              {
                dispatch_sync(*(dispatch_queue_t *)(*(void *)(result + 8) + 7384), block);
                uint64_t result = v233;
                a7 = v226;
                int v41 = v20 & v208;
                goto LABEL_123;
              }
              unsigned int v101 = *v77;
              if (v101 == 63)
              {
                int64x2_t v104 = *((int64x2_t *)v83 + 1);
                int64x2_t v105 = (const double *)(v83 + 32);
                float64x2x2_t v282 = vld2q_f64(v105);
                int64x2_t v106 = vzip2q_s64(*(int64x2_t *)v83, v104);
                int64x2_t v249 = vzip1q_s64(*(int64x2_t *)v83, v104);
                int64x2_t v253 = v106;
                float64x2_t v257 = v282.val[0];
                float64x2_t v261 = v282.val[1];
                uint64_t v102 = 64;
              }
              else if (v101 == 1)
              {
                int16x8_t v103 = vld1q_dup_s16((const __int16 *)v83);
                int64x2_t v249 = (int64x2_t)v103;
                int64x2_t v253 = (int64x2_t)v103;
                float64x2_t v257 = (float64x2_t)v103;
                float64x2_t v261 = (float64x2_t)v103;
                uint64_t v102 = 2;
              }
              else if (*v77)
              {
                uint64_t v102 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v249, 64, (uint64_t)v83, v101);
              }
              else
              {
                uint64_t v102 = 0;
                int64x2_t v249 = 0uLL;
                int64x2_t v253 = 0uLL;
                float64x2_t v257 = 0uLL;
                float64x2_t v261 = 0uLL;
              }
              uint64_t v107 = (uint64_t)&v83[v102];
              unsigned int v108 = v77[1];
              if (v108 == 63)
              {
                int64x2_t v111 = *(int64x2_t *)(v107 + 16);
                int64x2_t v112 = (const double *)(v107 + 32);
                float64x2x2_t v283 = vld2q_f64(v112);
                int64x2_t v113 = vzip2q_s64(*(int64x2_t *)v107, v111);
                int64x2_t v250 = vzip1q_s64(*(int64x2_t *)v107, v111);
                int64x2_t v254 = v113;
                float64x2_t v258 = v283.val[0];
                float64x2_t v262 = v283.val[1];
                uint64_t v109 = 64;
              }
              else if (v108 == 1)
              {
                int16x8_t v110 = vld1q_dup_s16((const __int16 *)v107);
                int64x2_t v250 = (int64x2_t)v110;
                int64x2_t v254 = (int64x2_t)v110;
                float64x2_t v258 = (float64x2_t)v110;
                float64x2_t v262 = (float64x2_t)v110;
                uint64_t v109 = 2;
              }
              else if (v77[1])
              {
                uint64_t v109 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v250, 64, v107, v108);
              }
              else
              {
                uint64_t v109 = 0;
                int64x2_t v250 = 0uLL;
                int64x2_t v254 = 0uLL;
                float64x2_t v258 = 0uLL;
                float64x2_t v262 = 0uLL;
              }
              uint64_t v114 = v107 + v109;
              unsigned int v115 = v77[2];
              if (v115 == 63)
              {
                int64x2_t v118 = *(int64x2_t *)(v114 + 16);
                int64x2_t v119 = (const double *)(v114 + 32);
                float64x2x2_t v284 = vld2q_f64(v119);
                int64x2_t v120 = vzip2q_s64(*(int64x2_t *)v114, v118);
                int64x2_t v265 = vzip1q_s64(*(int64x2_t *)v114, v118);
                int64x2_t v269 = v120;
                float64x2_t v273 = v284.val[0];
                float64x2_t v277 = v284.val[1];
                uint64_t v116 = 64;
              }
              else if (v115 == 1)
              {
                int16x8_t v117 = vld1q_dup_s16((const __int16 *)v114);
                int64x2_t v265 = (int64x2_t)v117;
                int64x2_t v269 = (int64x2_t)v117;
                float64x2_t v273 = (float64x2_t)v117;
                float64x2_t v277 = (float64x2_t)v117;
                uint64_t v116 = 2;
              }
              else if (v77[2])
              {
                uint64_t v116 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v265, 64, v114, v115);
              }
              else
              {
                uint64_t v116 = 0;
                int64x2_t v265 = 0uLL;
                int64x2_t v269 = 0uLL;
                float64x2_t v273 = 0uLL;
                float64x2_t v277 = 0uLL;
              }
              uint64_t v121 = v114 + v116;
              unsigned int v122 = v77[3];
              if (v122 == 63)
              {
                int64x2_t v125 = *(int64x2_t *)(v121 + 16);
                int64x2_t v126 = (const double *)(v121 + 32);
                float64x2x2_t v285 = vld2q_f64(v126);
                int64x2_t v127 = vzip2q_s64(*(int64x2_t *)v121, v125);
                int64x2_t v266 = vzip1q_s64(*(int64x2_t *)v121, v125);
                int64x2_t v270 = v127;
                float64x2_t v274 = v285.val[0];
                float64x2_t v278 = v285.val[1];
                uint64_t v123 = 64;
              }
              else if (v122 == 1)
              {
                int16x8_t v124 = vld1q_dup_s16((const __int16 *)v121);
                int64x2_t v266 = (int64x2_t)v124;
                int64x2_t v270 = (int64x2_t)v124;
                float64x2_t v274 = (float64x2_t)v124;
                float64x2_t v278 = (float64x2_t)v124;
                uint64_t v123 = 2;
              }
              else if (v77[3])
              {
                uint64_t v123 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v266, 64, v121, v122);
              }
              else
              {
                uint64_t v123 = 0;
                int64x2_t v266 = 0uLL;
                int64x2_t v270 = 0uLL;
                float64x2_t v274 = 0uLL;
                float64x2_t v278 = 0uLL;
              }
              uint64_t v128 = v121 + v123;
              unsigned int v129 = v77[4];
              if (v129 == 63)
              {
                int64x2_t v132 = *(int64x2_t *)(v128 + 16);
                int64x2_t v133 = (const double *)(v128 + 32);
                float64x2x2_t v286 = vld2q_f64(v133);
                int64x2_t v134 = vzip2q_s64(*(int64x2_t *)v128, v132);
                int64x2_t v251 = vzip1q_s64(*(int64x2_t *)v128, v132);
                int64x2_t v255 = v134;
                float64x2_t v259 = v286.val[0];
                float64x2_t v263 = v286.val[1];
                uint64_t v130 = 64;
              }
              else if (v129 == 1)
              {
                int16x8_t v131 = vld1q_dup_s16((const __int16 *)v128);
                int64x2_t v251 = (int64x2_t)v131;
                int64x2_t v255 = (int64x2_t)v131;
                float64x2_t v259 = (float64x2_t)v131;
                float64x2_t v263 = (float64x2_t)v131;
                uint64_t v130 = 2;
              }
              else if (v77[4])
              {
                uint64_t v130 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v251, 64, v128, v129);
              }
              else
              {
                uint64_t v130 = 0;
                int64x2_t v251 = 0uLL;
                int64x2_t v255 = 0uLL;
                float64x2_t v259 = 0uLL;
                float64x2_t v263 = 0uLL;
              }
              uint64_t v135 = v128 + v130;
              unsigned int v136 = v77[5];
              if (v136 == 63)
              {
                int64x2_t v139 = *(int64x2_t *)(v135 + 16);
                int64x2_t v140 = (const double *)(v135 + 32);
                float64x2x2_t v287 = vld2q_f64(v140);
                int64x2_t v141 = vzip2q_s64(*(int64x2_t *)v135, v139);
                int64x2_t v252 = vzip1q_s64(*(int64x2_t *)v135, v139);
                int64x2_t v256 = v141;
                float64x2_t v260 = v287.val[0];
                float64x2_t v264 = v287.val[1];
                uint64_t v137 = 64;
              }
              else if (v136 == 1)
              {
                int16x8_t v138 = vld1q_dup_s16((const __int16 *)v135);
                int64x2_t v252 = (int64x2_t)v138;
                int64x2_t v256 = (int64x2_t)v138;
                float64x2_t v260 = (float64x2_t)v138;
                float64x2_t v264 = (float64x2_t)v138;
                uint64_t v137 = 2;
              }
              else if (v77[5])
              {
                uint64_t v137 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v252, 64, v135, v136);
              }
              else
              {
                uint64_t v137 = 0;
                int64x2_t v252 = 0uLL;
                int64x2_t v256 = 0uLL;
                float64x2_t v260 = 0uLL;
                float64x2_t v264 = 0uLL;
              }
              uint64_t v142 = v135 + v137;
              unsigned int v143 = v77[6];
              if (v143 == 63)
              {
                int64x2_t v146 = *(int64x2_t *)(v142 + 16);
                unint64_t v147 = (const double *)(v142 + 32);
                float64x2x2_t v288 = vld2q_f64(v147);
                int64x2_t v148 = vzip2q_s64(*(int64x2_t *)v142, v146);
                int64x2_t v267 = vzip1q_s64(*(int64x2_t *)v142, v146);
                int64x2_t v271 = v148;
                float64x2_t v275 = v288.val[0];
                float64x2_t v279 = v288.val[1];
                uint64_t v144 = 64;
              }
              else if (v143 == 1)
              {
                int16x8_t v145 = vld1q_dup_s16((const __int16 *)v142);
                int64x2_t v267 = (int64x2_t)v145;
                int64x2_t v271 = (int64x2_t)v145;
                float64x2_t v275 = (float64x2_t)v145;
                float64x2_t v279 = (float64x2_t)v145;
                uint64_t v144 = 2;
              }
              else if (v77[6])
              {
                uint64_t v144 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v267, 64, v142, v143);
              }
              else
              {
                uint64_t v144 = 0;
                int64x2_t v267 = 0uLL;
                int64x2_t v271 = 0uLL;
                float64x2_t v275 = 0uLL;
                float64x2_t v279 = 0uLL;
              }
              uint64_t v149 = v142 + v144;
              unsigned int v150 = v77[7];
              if (v150 == 63)
              {
                int64x2_t v153 = *(int64x2_t *)(v149 + 16);
                unint64_t v154 = (const double *)(v149 + 32);
                float64x2x2_t v289 = vld2q_f64(v154);
                int64x2_t v155 = vzip2q_s64(*(int64x2_t *)v149, v153);
                int64x2_t v268 = vzip1q_s64(*(int64x2_t *)v149, v153);
                int64x2_t v272 = v155;
                float64x2_t v276 = v289.val[0];
                float64x2_t v280 = v289.val[1];
                uint64_t v151 = v244;
                if (v244) {
                  goto LABEL_199;
                }
              }
              else
              {
                if (v150 != 1)
                {
                  if (v77[7])
                  {
                    AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v268, 64, v149, v150);
                    uint64_t v151 = v244;
                    if (!v244) {
                      goto LABEL_233;
                    }
                  }
                  else
                  {
                    int64x2_t v268 = 0uLL;
                    int64x2_t v272 = 0uLL;
                    float64x2_t v276 = 0uLL;
                    float64x2_t v280 = 0uLL;
                    uint64_t v151 = v244;
                    if (!v244) {
                      goto LABEL_233;
                    }
                  }
LABEL_199:
                  if (!v245) {
                    goto LABEL_233;
                  }
                  uint64_t v156 = 0;
                  unint64_t v157 = (unint64_t)v242 << 6;
                  uint64_t v158 = 4 * v243;
                  unint64_t v159 = &v249.i8[v157 + v158];
                  uint64_t v160 = v240;
                  uint64_t v161 = v241;
                  unint64_t v162 = 4 * v245;
                  if (v162 <= 1) {
                    unint64_t v163 = 1;
                  }
                  else {
                    unint64_t v163 = 4 * v245;
                  }
                  unint64_t v164 = v157 + v158;
                  uint64_t v165 = &v249.i8[v157 + v158];
                  if (v163) {
                    BOOL v166 = (v163 - 1) >> 32 == 0;
                  }
                  else {
                    BOOL v166 = 0;
                  }
                  uint64_t v167 = v163 & 0x3FFFFFFE0;
                  uint64_t v168 = v163 & 0x3FFFFFFF8;
                  char v170 = !v166 || v163 < 8;
                  int v171 = &v250.i8[v164];
                  uint64_t v172 = (long long *)(v240 + 16);
                  unsigned int v173 = v159;
                  uint64_t v174 = v240;
                  while (2)
                  {
                    uint64_t v175 = (char *)(v160 + v161 * v156);
                    int v176 = &v159[64 * v156];
                    if ((unint64_t)(&v165[64 * v156] - v175) < 0x20) {
                      char v177 = 1;
                    }
                    else {
                      char v177 = v170;
                    }
                    if (v177)
                    {
                      int v178 = 0;
LABEL_230:
                      unsigned int v188 = v178 + 1;
                      do
                      {
                        char v189 = *v175++;
                        *v176++ = v189;
                      }
                      while (v162 > v188++);
                    }
                    else
                    {
                      if (v163 >= 0x20)
                      {
                        char v180 = v172;
                        unsigned int v181 = v171;
                        uint64_t v182 = v163 & 0x3FFFFFFE0;
                        do
                        {
                          long long v183 = *v180;
                          *((_OWORD *)v181 - 1) = *(v180 - 1);
                          *(_OWORD *)unsigned int v181 = v183;
                          v181 += 32;
                          v180 += 2;
                          v182 -= 32;
                        }
                        while (v182);
                        if (v163 == v167) {
                          goto LABEL_213;
                        }
                        uint64_t v179 = v163 & 0x3FFFFFFE0;
                        if ((v163 & 0x18) == 0)
                        {
                          v175 += v167;
                          v176 += v167;
                          int v178 = v163 & 0xFFFFFFE0;
                          goto LABEL_230;
                        }
                      }
                      else
                      {
                        uint64_t v179 = 0;
                      }
                      v176 += v168;
                      uint64_t v184 = v179 - v168;
                      int8x8_t v185 = (uint64_t *)(v174 + v179);
                      unsigned int v186 = &v173[v179];
                      do
                      {
                        uint64_t v187 = *v185++;
                        *(void *)unsigned int v186 = v187;
                        v186 += 8;
                        v184 += 8;
                      }
                      while (v184);
                      if (v163 != v168)
                      {
                        v175 += v168;
                        int v178 = v163 & 0xFFFFFFF8;
                        goto LABEL_230;
                      }
                    }
LABEL_213:
                    ++v156;
                    v171 += 64;
                    uint64_t v172 = (long long *)((char *)v172 + v161);
                    v174 += v161;
                    v173 += 64;
                    if (v156 == v151) {
                      goto LABEL_233;
                    }
                    continue;
                  }
                }
                int16x8_t v152 = vld1q_dup_s16((const __int16 *)v149);
                int64x2_t v268 = (int64x2_t)v152;
                int64x2_t v272 = (int64x2_t)v152;
                float64x2_t v276 = (float64x2_t)v152;
                float64x2_t v280 = (float64x2_t)v152;
                uint64_t v151 = v244;
                if (v244) {
                  goto LABEL_199;
                }
              }
LABEL_233:
              uint64_t v191 = 0;
              unsigned int v192 = v238;
              BOOL v193 = v239;
              int v194 = v246;
              int v195 = v247;
              a7 = v226;
              uint64_t result = v233;
              int v41 = v20 & v208;
              do
              {
                uint64_t v203 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,2u>::kSubblockPositions[v191 + 1];
                uint64_t v204 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,2u>::kSubblockPositions[v191];
                unsigned int v205 = (v194 - 4 * v204) & ~((v194 - 4 * (int)v204) >> 31);
                if (v205 >= 4) {
                  unsigned int v205 = 4;
                }
                unsigned int v206 = (v195 - 4 * v203) & ~((v195 - 4 * (int)v203) >> 31);
                if (v206 >= 4) {
                  unsigned int v206 = 4;
                }
                if (v205) {
                  BOOL v207 = v206 == 0;
                }
                else {
                  BOOL v207 = 1;
                }
                if (v207)
                {
                  char v202 = 0;
                }
                else
                {
                  uint64_t v196 = &v249 + 16 * v203 + v204;
                  int64x2_t v197 = v196[4];
                  int64x2_t v198 = vzip1q_s64(*v196, v197);
                  int64x2_t v199 = vzip2q_s64(*v196, v197);
                  int64x2_t v200 = v196[8];
                  int64x2_t v201 = v196[12];
                  *unsigned int v192 = v198;
                  v192[1] = v199;
                  v192[2] = vzip1q_s64(v200, v201);
                  v192[3] = vzip2q_s64(v200, v201);
                  v192 += 4;
                  char v202 = 63;
                }
                *v193++ = v202;
                v191 += 2;
              }
              while (v191 != 16);
LABEL_123:
              unsigned int v84 = v39 + 1;
              int64x2_t v79 = v225;
              if (!v236) {
                goto LABEL_47;
              }
LABEL_139:
              memcpy(v79, v83, 0x200uLL);
              int v41 = v20 & v208;
              uint64_t result = v233;
              goto LABEL_47;
            }
            char v83 = __dst;
          }
          else
          {
            char v83 = v79;
            if (v80) {
              goto LABEL_121;
            }
          }
          uint64_t v85 = 0;
          unsigned int v86 = (int64x2_t *)v83;
          do
          {
            uint64_t v96 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,2u>::kSubblockPositions[v85 + 1];
            uint64_t v97 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,2u>::kSubblockPositions[v85];
            unsigned int v98 = (v46 - 4 * v97) & ~((int)(v46 - 4 * v97) >> 31);
            if (v98 >= 4) {
              unsigned int v98 = 4;
            }
            unsigned int v99 = (v40 - 4 * v96) & ~((int)(v40 - 4 * v96) >> 31);
            if (v99 >= 4) {
              unsigned int v99 = 4;
            }
            if (v98) {
              BOOL v100 = v99 == 0;
            }
            else {
              BOOL v100 = 1;
            }
            if (v100)
            {
              char v95 = 0;
            }
            else
            {
              uint64_t v87 = (int64x2_t *)(v78 + 4 * a11 * v96 + 16 * v97);
              int64x2_t v88 = *(int64x2_t *)((char *)v87 + v36);
              int64x2_t v89 = vzip1q_s64(*v87, v88);
              int64x2_t v90 = vzip2q_s64(*v87, v88);
              int64x2_t v91 = (int64x2_t *)((char *)v87 + 2 * a11);
              int64x2_t v92 = *(int64x2_t *)((char *)v91 + v36);
              int64x2_t v93 = vzip1q_s64(*v91, v92);
              int64x2_t v94 = vzip2q_s64(*v91, v92);
              *unsigned int v86 = v89;
              v86[1] = v90;
              v86[2] = v93;
              v86[3] = v94;
              v86 += 4;
              char v95 = 63;
            }
            *v77++ = v95;
            v85 += 2;
          }
          while (v85 != 16);
          a7 = v226;
          unsigned int v84 = v39 + 1;
          if (v236) {
            goto LABEL_139;
          }
LABEL_47:
          BOOL v21 = v39 == v227 >> 4;
          unsigned int v39 = v84;
        }
        while (!v21);
        BOOL v21 = v20++ == v214;
      }
      while (!v21);
    }
  }
  return result;
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, uint64_t a7, unsigned int a8, int a9, int a10, uint64_t a11, int a12)
{
  uint64_t v246 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  uint64_t v17 = a1;
  unsigned int v195 = a8;
  unsigned int v18 = a8 >> 3;
  unsigned int v180 = a8 + a10 - 1;
  unsigned int v182 = v180 >> 3;
  unsigned int v19 = *(unsigned __int8 *)(*(void *)(a1 + 208) + 88);
  unsigned int v20 = *(_DWORD *)(a1 + 112);
  uint64_t v196 = v17;
  if (*(void *)(v17 + 168))
  {
    __int16 CacheMode = IOSurfaceGetCacheMode();
    uint64_t v17 = v196;
    int v22 = CacheMode & 0xF00;
  }
  else
  {
    int v22 = 0;
  }
  BOOL v23 = (v22 & 0xD00) == 0 || v22 == 768;
  int v24 = v22 & 0xE00;
  int v26 = !v23 && v24 != 1024;
  int v200 = v26;
  BOOL isLevelTiled = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::isLevelTiled(v17, *(_DWORD *)(v17 + 144) + a12);
  uint64_t v28 = v196;
  BOOL v189 = isLevelTiled;
  if (v18 <= v182)
  {
    unsigned int v188 = a7 + a9 - 1;
    unsigned int v179 = a7 >> 4;
    if (a7 >> 4 <= v188 >> 4)
    {
      unsigned int v176 = a5 - 1;
      unsigned int v198 = (a5 - 1) >> 4;
      int v197 = ((a5 - 1) & 0xF) + 1;
      int v177 = ((a6 - 1) & 7) + 1;
      unsigned int v178 = (a6 - 1) >> 3;
      uint32x2_t v29 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0xF00000007);
      int8x8_t v30 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32(vadd_s32((int32x2_t)vshl_u32(v29, (uint32x2_t)0xFFFFFFFCFFFFFFFDLL), (int32x2_t)-1))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x2000000010, v29));
      __int32 v187 = v30.i32[0] | v30.i32[1];
      int8x8_t v186 = v30;
      BOOL v185 = v30.i32[0] != 0;
      BOOL v184 = v30.i32[1] != 0;
      unint64_t v175 = 8 * v20 * (unint64_t)v19;
      do
      {
        unsigned int v31 = (8 * v18) | 7;
        if (8 * v18 <= v195) {
          int v32 = v195;
        }
        else {
          int v32 = 8 * v18;
        }
        unsigned int v33 = v179;
        if (v180 < v31) {
          unsigned int v31 = v180;
        }
        unsigned int v194 = 8 * v18;
        int v183 = v32 - 8 * v18;
        int v193 = v31 - v32 + 1;
        int v34 = v177;
        if (v18 != v178) {
          int v34 = 8;
        }
        unsigned int v201 = v34;
        uint64_t v192 = a3 + (v32 - v195) * a11;
        do
        {
          unsigned int v35 = 16 * v33;
          unsigned int v36 = 16 * (v33 + 1) - 1;
          if (16 * v33 <= a7) {
            int v37 = a7;
          }
          else {
            int v37 = 16 * v33;
          }
          if (v188 < v36) {
            unsigned int v36 = v188;
          }
          int v38 = v36 - v37 + 1;
          if (v33 == v198) {
            unsigned int v39 = v197;
          }
          else {
            unsigned int v39 = 16;
          }
          BOOL v40 = 1;
          if (v194 >= v195 && v35 >= a7)
          {
            int v41 = v197;
            if (v33 != v198) {
              int v41 = 16;
            }
            BOOL v40 = v38 != v41 || v193 != v201;
          }
          if (v189)
          {
            unsigned int v62 = 0;
            uint64_t v63 = v175 >> (*(unsigned char *)(v28 + 57) != 0);
            char v64 = 1;
            if (v63 > 127)
            {
              if (v63 > 511)
              {
                if (v63 == 512)
                {
                  char v65 = 0;
                  unsigned int v62 = 16;
                  unsigned int v66 = 16;
                }
                else
                {
                  char v65 = 1;
                  unsigned int v66 = 0;
                  if (v63 == 1024)
                  {
                    unsigned int v66 = 8;
                    unsigned int v62 = 16;
                  }
                }
              }
              else if (v63 == 128)
              {
                char v64 = 0;
                char v65 = 0;
                unsigned int v62 = 32;
                unsigned int v66 = 32;
              }
              else
              {
                char v65 = 1;
                unsigned int v66 = 0;
                if (v63 == 256)
                {
                  char v64 = 0;
                  char v65 = 0;
                  unsigned int v66 = 16;
                  unsigned int v62 = 32;
                }
              }
            }
            else
            {
              char v65 = 1;
              unsigned int v66 = 0;
              switch(v63)
              {
                case 4:
                  char v64 = 0;
                  char v65 = 0;
                  unsigned int v66 = 128;
                  unsigned int v62 = 256;
                  break;
                case 5:
                case 6:
                case 7:
                case 9:
                case 10:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 17:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                  break;
                case 8:
                  char v64 = 0;
                  char v65 = 0;
                  unsigned int v62 = 128;
                  unsigned int v66 = 128;
                  break;
                case 16:
                  char v64 = 0;
                  char v65 = 0;
                  unsigned int v66 = 64;
                  unsigned int v62 = 128;
                  break;
                case 32:
                  char v64 = 0;
                  char v65 = 0;
                  unsigned int v62 = 64;
                  unsigned int v66 = 64;
                  break;
                default:
                  if (v63 == 64)
                  {
                    char v64 = 0;
                    char v65 = 0;
                    unsigned int v66 = 32;
                    unsigned int v62 = 64;
                  }
                  break;
              }
            }
            unsigned int v164 = (v62 >> 4) - 1;
            if (v64) {
              unsigned int v165 = 0;
            }
            else {
              unsigned int v165 = 32 - __clz(~(-1 << -(char)__clz(v164)));
            }
            unsigned int v166 = (v66 >> 3) - 1;
            if (v65)
            {
              unsigned int v167 = 0;
              if (v165) {
                goto LABEL_210;
              }
            }
            else
            {
              unsigned int v167 = 32 - __clz(~(-1 << -(char)__clz(v166)));
              if (v167 | v165)
              {
LABEL_210:
                int v168 = 0;
                uint64_t v169 = 0;
                int v170 = v33 & v164;
                int v171 = v18 & v166;
                BOOL v172 = v167 != 0;
                BOOL v173 = v165 != 0;
                int v174 = 1;
                do
                {
                  --v167;
                  if (v172) {
                    v169 |= (unint64_t)(v174 & v171) << v168++;
                  }
                  else {
                    unsigned int v167 = 0;
                  }
                  --v165;
                  if (v173) {
                    v169 |= (unint64_t)(v174 & v170) << v168++;
                  }
                  else {
                    unsigned int v165 = 0;
                  }
                  v174 *= 2;
                  --v168;
                  BOOL v173 = v165 != 0;
                  BOOL v172 = v167 != 0;
                }
                while (v165 | v167);
                goto LABEL_222;
              }
            }
            uint64_t v169 = 0;
LABEL_222:
            unint64_t v50 = ((unint64_t)(v35 / v62 + v194 / v66 * ((v62 + v176) / v62)) << 14) + (v169 << 9);
            goto LABEL_58;
          }
          if (v187)
          {
            int v43 = 0;
            uint64_t v44 = 0;
            int v45 = 1;
            BOOL v46 = v185;
            BOOL v47 = v184;
            __int32 v48 = v186.i32[0];
            __int32 v49 = v186.i32[1];
            do
            {
              --v48;
              if (v46) {
                v44 |= (unint64_t)(v45 & v18) << v43++;
              }
              else {
                __int32 v48 = 0;
              }
              --v49;
              if (v47) {
                v44 |= (unint64_t)(v45 & v33) << v43++;
              }
              else {
                __int32 v49 = 0;
              }
              v45 *= 2;
              --v43;
              BOOL v47 = v49 != 0;
              BOOL v46 = v48 != 0;
            }
            while (v49 | v48);
          }
          else
          {
            uint64_t v44 = 0;
          }
          unint64_t v50 = v44 << 9;
LABEL_58:
          unsigned int v51 = *(_DWORD *)(v28 + 128) >> (*(unsigned char *)(v28 + 144) + a12);
          if (v51 <= 1) {
            unsigned int v51 = 1;
          }
          unsigned int v52 = v51 + 15;
          if (v52 < 0x20) {
            unsigned int v53 = 0;
          }
          else {
            unsigned int v53 = 32 - __clz(~(-1 << -(char)__clz((v52 >> 4) - 1)));
          }
          unsigned int v54 = *(_DWORD *)(v28 + 132) >> (*(unsigned char *)(v28 + 144) + a12);
          if (v54 <= 1) {
            unsigned int v54 = 1;
          }
          unsigned int v55 = v54 + 7;
          if (v55 < 0x10)
          {
            unsigned int v56 = 0;
            if (!v53)
            {
LABEL_80:
              uint64_t v58 = 0;
              goto LABEL_81;
            }
          }
          else
          {
            unsigned int v56 = 32 - __clz(~(-1 << -(char)__clz((v55 >> 3) - 1)));
            if (!(v56 | v53)) {
              goto LABEL_80;
            }
          }
          int v57 = 0;
          uint64_t v58 = 0;
          BOOL v59 = v53 != 0;
          BOOL v60 = v56 != 0;
          int v61 = 1;
          do
          {
            --v53;
            if (v59) {
              v58 |= (unint64_t)(v61 & v33) << v57++;
            }
            else {
              unsigned int v53 = 0;
            }
            --v56;
            if (v60) {
              v58 |= (unint64_t)(v61 & v18) << v57++;
            }
            else {
              unsigned int v56 = 0;
            }
            v61 *= 2;
            --v57;
            BOOL v60 = v56 != 0;
            BOOL v59 = v53 != 0;
          }
          while (v56 | v53);
LABEL_81:
          uint64_t v67 = a7;
          int v68 = v39 < 0x10 || v40;
          unsigned int v69 = (char *)(a4 + 8 * v58);
          unint64_t v70 = v192 + 4 * (v37 - a7);
          int v71 = (unsigned char *)(a2 + v50);
          if (v201 < 8) {
            int v72 = 1;
          }
          else {
            int v72 = v68;
          }
          __src = v71;
          if (v200)
          {
            if (!v72)
            {
              int v71 = __dst;
LABEL_94:
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock(v70, a11, (unint64_t)v71, v69, v39, v201);
              goto LABEL_95;
            }
            int v73 = v38;
            memcpy(__dst, __src, sizeof(__dst));
            int v38 = v73;
            int v71 = __dst;
            uint64_t v28 = v196;
          }
          else if (!v72)
          {
            goto LABEL_94;
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE9ELj2ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = v28;
          uint64_t v203 = v71;
          unsigned __int8 v211 = v39;
          unsigned __int8 v212 = v201;
          unsigned int v207 = v183;
          unsigned int v208 = v37 - v35;
          uint64_t v204 = v69;
          unint64_t v205 = v70;
          uint64_t v206 = a11;
          unsigned int v209 = v193;
          unsigned int v210 = v38;
          if (!v40)
          {
            unsigned int v74 = *v69;
            a7 = v67;
            if (v74 == 63)
            {
              int64x2_t v77 = *((int64x2_t *)v71 + 1);
              uint64_t v78 = (const double *)(v71 + 32);
              float64x2x2_t v247 = vld2q_f64(v78);
              int64x2_t v79 = vzip2q_s64(*(int64x2_t *)v71, v77);
              int64x2_t v214 = vzip1q_s64(*(int64x2_t *)v71, v77);
              int64x2_t v218 = v79;
              float64x2_t v222 = v247.val[0];
              float64x2_t v226 = v247.val[1];
              uint64_t v75 = 64;
            }
            else if (v74 == 1)
            {
              int16x8_t v76 = vld1q_dup_s16((const __int16 *)v71);
              int64x2_t v214 = (int64x2_t)v76;
              int64x2_t v218 = (int64x2_t)v76;
              float64x2_t v222 = (float64x2_t)v76;
              float64x2_t v226 = (float64x2_t)v76;
              uint64_t v75 = 2;
            }
            else if (*v69)
            {
              uint64_t v75 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v214, 64, (uint64_t)v71, v74);
            }
            else
            {
              uint64_t v75 = 0;
              int64x2_t v214 = 0uLL;
              int64x2_t v218 = 0uLL;
              float64x2_t v222 = 0uLL;
              float64x2_t v226 = 0uLL;
            }
            uint64_t v80 = (uint64_t)&v71[v75];
            unsigned int v81 = v69[1];
            if (v81 == 63)
            {
              int64x2_t v84 = *(int64x2_t *)(v80 + 16);
              uint64_t v85 = (const double *)(v80 + 32);
              float64x2x2_t v248 = vld2q_f64(v85);
              int64x2_t v86 = vzip2q_s64(*(int64x2_t *)v80, v84);
              int64x2_t v215 = vzip1q_s64(*(int64x2_t *)v80, v84);
              int64x2_t v219 = v86;
              float64x2_t v223 = v248.val[0];
              float64x2_t v227 = v248.val[1];
              uint64_t v82 = 64;
            }
            else if (v81 == 1)
            {
              int16x8_t v83 = vld1q_dup_s16((const __int16 *)v80);
              int64x2_t v215 = (int64x2_t)v83;
              int64x2_t v219 = (int64x2_t)v83;
              float64x2_t v223 = (float64x2_t)v83;
              float64x2_t v227 = (float64x2_t)v83;
              uint64_t v82 = 2;
            }
            else if (v69[1])
            {
              uint64_t v82 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v215, 64, v80, v81);
            }
            else
            {
              uint64_t v82 = 0;
              int64x2_t v215 = 0uLL;
              int64x2_t v219 = 0uLL;
              float64x2_t v223 = 0uLL;
              float64x2_t v227 = 0uLL;
            }
            uint64_t v87 = v80 + v82;
            unsigned int v88 = v69[2];
            if (v88 == 63)
            {
              int64x2_t v91 = *(int64x2_t *)(v87 + 16);
              int64x2_t v92 = (const double *)(v87 + 32);
              float64x2x2_t v249 = vld2q_f64(v92);
              int64x2_t v93 = vzip2q_s64(*(int64x2_t *)v87, v91);
              int64x2_t v230 = vzip1q_s64(*(int64x2_t *)v87, v91);
              int64x2_t v234 = v93;
              float64x2_t v238 = v249.val[0];
              float64x2_t v242 = v249.val[1];
              uint64_t v89 = 64;
            }
            else if (v88 == 1)
            {
              int16x8_t v90 = vld1q_dup_s16((const __int16 *)v87);
              int64x2_t v230 = (int64x2_t)v90;
              int64x2_t v234 = (int64x2_t)v90;
              float64x2_t v238 = (float64x2_t)v90;
              float64x2_t v242 = (float64x2_t)v90;
              uint64_t v89 = 2;
            }
            else if (v69[2])
            {
              uint64_t v89 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v230, 64, v87, v88);
            }
            else
            {
              uint64_t v89 = 0;
              int64x2_t v230 = 0uLL;
              int64x2_t v234 = 0uLL;
              float64x2_t v238 = 0uLL;
              float64x2_t v242 = 0uLL;
            }
            uint64_t v94 = v87 + v89;
            unsigned int v95 = v69[3];
            if (v95 == 63)
            {
              int64x2_t v98 = *(int64x2_t *)(v94 + 16);
              unsigned int v99 = (const double *)(v94 + 32);
              float64x2x2_t v250 = vld2q_f64(v99);
              int64x2_t v100 = vzip2q_s64(*(int64x2_t *)v94, v98);
              int64x2_t v231 = vzip1q_s64(*(int64x2_t *)v94, v98);
              int64x2_t v235 = v100;
              float64x2_t v239 = v250.val[0];
              float64x2_t v243 = v250.val[1];
              uint64_t v96 = 64;
            }
            else if (v95 == 1)
            {
              int16x8_t v97 = vld1q_dup_s16((const __int16 *)v94);
              int64x2_t v231 = (int64x2_t)v97;
              int64x2_t v235 = (int64x2_t)v97;
              float64x2_t v239 = (float64x2_t)v97;
              float64x2_t v243 = (float64x2_t)v97;
              uint64_t v96 = 2;
            }
            else if (v69[3])
            {
              uint64_t v96 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v231, 64, v94, v95);
            }
            else
            {
              uint64_t v96 = 0;
              int64x2_t v231 = 0uLL;
              int64x2_t v235 = 0uLL;
              float64x2_t v239 = 0uLL;
              float64x2_t v243 = 0uLL;
            }
            uint64_t v101 = v94 + v96;
            unsigned int v102 = v69[4];
            if (v102 == 63)
            {
              int64x2_t v105 = *(int64x2_t *)(v101 + 16);
              int64x2_t v106 = (const double *)(v101 + 32);
              float64x2x2_t v251 = vld2q_f64(v106);
              int64x2_t v107 = vzip2q_s64(*(int64x2_t *)v101, v105);
              int64x2_t v216 = vzip1q_s64(*(int64x2_t *)v101, v105);
              int64x2_t v220 = v107;
              float64x2_t v224 = v251.val[0];
              float64x2_t v228 = v251.val[1];
              uint64_t v103 = 64;
            }
            else if (v102 == 1)
            {
              int16x8_t v104 = vld1q_dup_s16((const __int16 *)v101);
              int64x2_t v216 = (int64x2_t)v104;
              int64x2_t v220 = (int64x2_t)v104;
              float64x2_t v224 = (float64x2_t)v104;
              float64x2_t v228 = (float64x2_t)v104;
              uint64_t v103 = 2;
            }
            else if (v69[4])
            {
              uint64_t v103 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v216, 64, v101, v102);
            }
            else
            {
              uint64_t v103 = 0;
              int64x2_t v216 = 0uLL;
              int64x2_t v220 = 0uLL;
              float64x2_t v224 = 0uLL;
              float64x2_t v228 = 0uLL;
            }
            uint64_t v108 = v101 + v103;
            unsigned int v109 = v69[5];
            if (v109 == 63)
            {
              int64x2_t v112 = *(int64x2_t *)(v108 + 16);
              int64x2_t v113 = (const double *)(v108 + 32);
              float64x2x2_t v252 = vld2q_f64(v113);
              int64x2_t v114 = vzip2q_s64(*(int64x2_t *)v108, v112);
              int64x2_t v217 = vzip1q_s64(*(int64x2_t *)v108, v112);
              int64x2_t v221 = v114;
              float64x2_t v225 = v252.val[0];
              float64x2_t v229 = v252.val[1];
              uint64_t v110 = 64;
            }
            else if (v109 == 1)
            {
              int16x8_t v111 = vld1q_dup_s16((const __int16 *)v108);
              int64x2_t v217 = (int64x2_t)v111;
              int64x2_t v221 = (int64x2_t)v111;
              float64x2_t v225 = (float64x2_t)v111;
              float64x2_t v229 = (float64x2_t)v111;
              uint64_t v110 = 2;
            }
            else if (v69[5])
            {
              uint64_t v110 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v217, 64, v108, v109);
            }
            else
            {
              uint64_t v110 = 0;
              int64x2_t v217 = 0uLL;
              int64x2_t v221 = 0uLL;
              float64x2_t v225 = 0uLL;
              float64x2_t v229 = 0uLL;
            }
            uint64_t v115 = v108 + v110;
            unsigned int v116 = v69[6];
            if (v116 == 63)
            {
              int64x2_t v119 = *(int64x2_t *)(v115 + 16);
              int64x2_t v120 = (const double *)(v115 + 32);
              float64x2x2_t v253 = vld2q_f64(v120);
              int64x2_t v121 = vzip2q_s64(*(int64x2_t *)v115, v119);
              int64x2_t v232 = vzip1q_s64(*(int64x2_t *)v115, v119);
              int64x2_t v236 = v121;
              float64x2_t v240 = v253.val[0];
              float64x2_t v244 = v253.val[1];
              uint64_t v117 = 64;
            }
            else if (v116 == 1)
            {
              int16x8_t v118 = vld1q_dup_s16((const __int16 *)v115);
              int64x2_t v232 = (int64x2_t)v118;
              int64x2_t v236 = (int64x2_t)v118;
              float64x2_t v240 = (float64x2_t)v118;
              float64x2_t v244 = (float64x2_t)v118;
              uint64_t v117 = 2;
            }
            else if (v69[6])
            {
              uint64_t v117 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v232, 64, v115, v116);
            }
            else
            {
              uint64_t v117 = 0;
              int64x2_t v232 = 0uLL;
              int64x2_t v236 = 0uLL;
              float64x2_t v240 = 0uLL;
              float64x2_t v244 = 0uLL;
            }
            uint64_t v122 = v115 + v117;
            unsigned int v123 = v69[7];
            if (v123 == 63)
            {
              int64x2_t v126 = *(int64x2_t *)(v122 + 16);
              int64x2_t v127 = (const double *)(v122 + 32);
              float64x2x2_t v254 = vld2q_f64(v127);
              int64x2_t v128 = vzip2q_s64(*(int64x2_t *)v122, v126);
              int64x2_t v233 = vzip1q_s64(*(int64x2_t *)v122, v126);
              int64x2_t v237 = v128;
              float64x2_t v241 = v254.val[0];
              float64x2_t v245 = v254.val[1];
              uint64_t v124 = v209;
              if (v209) {
                goto LABEL_156;
              }
            }
            else
            {
              if (v123 != 1)
              {
                if (v69[7])
                {
                  AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v233, 64, v122, v123);
                  uint64_t v124 = v209;
                  if (!v209) {
                    goto LABEL_190;
                  }
                }
                else
                {
                  int64x2_t v233 = 0uLL;
                  int64x2_t v237 = 0uLL;
                  float64x2_t v241 = 0uLL;
                  float64x2_t v245 = 0uLL;
                  uint64_t v124 = v209;
                  if (!v209) {
                    goto LABEL_190;
                  }
                }
LABEL_156:
                if (!v210) {
                  goto LABEL_190;
                }
                uint64_t v129 = 0;
                unint64_t v130 = (unint64_t)v207 << 6;
                uint64_t v131 = 4 * v208;
                int64x2_t v132 = &v214.i8[v130 + v131];
                unint64_t v133 = v205;
                uint64_t v134 = v206;
                unint64_t v135 = 4 * v210;
                if (v135 <= 1) {
                  unint64_t v136 = 1;
                }
                else {
                  unint64_t v136 = 4 * v210;
                }
                unint64_t v137 = v130 + v131;
                int16x8_t v138 = &v214.i8[v130 + v131];
                if (v136) {
                  BOOL v139 = (v136 - 1) >> 32 == 0;
                }
                else {
                  BOOL v139 = 0;
                }
                uint64_t v140 = v136 & 0x3FFFFFFE0;
                uint64_t v141 = v136 & 0x3FFFFFFF8;
                char v143 = !v139 || v136 < 8;
                uint64_t v144 = &v215.i8[v137];
                int16x8_t v145 = (long long *)(v205 + 16);
                int64x2_t v146 = v132;
                unint64_t v147 = v205;
                while (2)
                {
                  int64x2_t v148 = (char *)(v133 + v134 * v129);
                  uint64_t v149 = &v132[64 * v129];
                  if ((unint64_t)(&v138[64 * v129] - v148) < 0x20) {
                    char v150 = 1;
                  }
                  else {
                    char v150 = v143;
                  }
                  if (v150)
                  {
                    int v151 = 0;
LABEL_187:
                    unsigned int v161 = v151 + 1;
                    do
                    {
                      char v162 = *v148++;
                      *v149++ = v162;
                    }
                    while (v135 > v161++);
                  }
                  else
                  {
                    if (v136 >= 0x20)
                    {
                      int64x2_t v153 = v145;
                      unint64_t v154 = v144;
                      uint64_t v155 = v136 & 0x3FFFFFFE0;
                      do
                      {
                        long long v156 = *v153;
                        *((_OWORD *)v154 - 1) = *(v153 - 1);
                        *(_OWORD *)unint64_t v154 = v156;
                        v154 += 32;
                        v153 += 2;
                        v155 -= 32;
                      }
                      while (v155);
                      if (v136 == v140) {
                        goto LABEL_170;
                      }
                      uint64_t v152 = v136 & 0x3FFFFFFE0;
                      if ((v136 & 0x18) == 0)
                      {
                        v148 += v140;
                        v149 += v140;
                        int v151 = v136 & 0xFFFFFFE0;
                        goto LABEL_187;
                      }
                    }
                    else
                    {
                      uint64_t v152 = 0;
                    }
                    v149 += v141;
                    uint64_t v157 = v152 - v141;
                    uint64_t v158 = (uint64_t *)(v147 + v152);
                    unint64_t v159 = &v146[v152];
                    do
                    {
                      uint64_t v160 = *v158++;
                      *(void *)unint64_t v159 = v160;
                      v159 += 8;
                      v157 += 8;
                    }
                    while (v157);
                    if (v136 != v141)
                    {
                      v148 += v141;
                      int v151 = v136 & 0xFFFFFFF8;
                      goto LABEL_187;
                    }
                  }
LABEL_170:
                  ++v129;
                  v144 += 64;
                  int16x8_t v145 = (long long *)((char *)v145 + v134);
                  v147 += v134;
                  v146 += 64;
                  if (v129 == v124) {
                    goto LABEL_190;
                  }
                  continue;
                }
              }
              int16x8_t v125 = vld1q_dup_s16((const __int16 *)v122);
              int64x2_t v233 = (int64x2_t)v125;
              int64x2_t v237 = (int64x2_t)v125;
              float64x2_t v241 = (float64x2_t)v125;
              float64x2_t v245 = (float64x2_t)v125;
              uint64_t v124 = v209;
              if (v209) {
                goto LABEL_156;
              }
            }
LABEL_190:
            AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)&v214, 64, (unint64_t)v203, v204, v211, v212);
            if (!v200) {
              goto LABEL_26;
            }
            goto LABEL_191;
          }
          dispatch_sync(*(dispatch_queue_t *)(*(void *)(v28 + 8) + 7384), block);
LABEL_95:
          a7 = v67;
          if (!v200) {
            goto LABEL_26;
          }
LABEL_191:
          memcpy(__src, v71, 0x200uLL);
LABEL_26:
          BOOL v23 = v33++ == v188 >> 4;
          uint64_t v28 = v196;
        }
        while (!v23);
        BOOL v23 = v18++ == v182;
      }
      while (!v23);
    }
  }
}

uint64_t AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, int a12)
{
  uint64_t v281 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v232 = a8;
  unsigned int v16 = a8 >> 3;
  unsigned int v214 = a8 + a10 - 1;
  unsigned int v216 = v214 >> 3;
  unsigned int v17 = *(unsigned __int8 *)(*(void *)(a1 + 208) + 88);
  unsigned int v18 = *(_DWORD *)(a1 + 112);
  uint64_t v233 = a1;
  if (*(void *)(a1 + 168)) {
    int v19 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v19 = 0;
  }
  BOOL v20 = (v19 & 0xD00) == 0 || v19 == 768;
  int v21 = v19 & 0xE00;
  int v23 = !v20 && v21 != 1024;
  int v236 = v23;
  uint64_t result = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::isLevelTiled(a1, *(_DWORD *)(a1 + 144) + a12);
  uint64_t v25 = a1;
  int v225 = result;
  unsigned int v26 = a7;
  if (v16 <= v216)
  {
    unsigned int v224 = a7 + a9 - 1;
    if (a7 >> 4 <= v224 >> 4)
    {
      unsigned int v211 = a5 - 1;
      unsigned int v235 = (a5 - 1) >> 4;
      int v234 = ((a5 - 1) & 0xF) + 1;
      int v212 = ((a6 - 1) & 7) + 1;
      unsigned int v213 = (a6 - 1) >> 3;
      uint32x2_t v27 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0xF00000007);
      int8x8_t v28 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32(vadd_s32((int32x2_t)vshl_u32(v27, (uint32x2_t)0xFFFFFFFCFFFFFFFDLL), (int32x2_t)-1))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x2000000010, v27));
      __int32 v223 = v28.i32[0] | v28.i32[1];
      int8x8_t v221 = v28;
      BOOL v220 = v28.i32[0] != 0;
      BOOL v219 = v28.i32[1] != 0;
      unint64_t v210 = 8 * v18 * (unint64_t)v17;
      uint64_t v29 = a11;
      uint64_t result = 2 * a11;
      do
      {
        unsigned int v30 = (8 * v16) | 7;
        if (8 * v16 <= v232) {
          int v31 = v232;
        }
        else {
          int v31 = 8 * v16;
        }
        unsigned int v32 = a7 >> 4;
        if (v214 < v30) {
          unsigned int v30 = v214;
        }
        unsigned int v231 = 8 * v16;
        int v218 = v31 - 8 * v16;
        int v230 = v30 - v31 + 1;
        if (v16 == v213) {
          unsigned int v33 = v212;
        }
        else {
          unsigned int v33 = 8;
        }
        uint64_t v229 = a3 + (v31 - v232) * v29;
        unsigned int v217 = v33;
        do
        {
          unsigned int v34 = 16 * v32;
          unsigned int v35 = 16 * (v32 + 1) - 1;
          if (16 * v32 <= v26) {
            int v36 = v26;
          }
          else {
            int v36 = 16 * v32;
          }
          if (v224 < v35) {
            unsigned int v35 = a7 + a9 - 1;
          }
          int v37 = v35 - v36 + 1;
          if (v32 == v235) {
            unsigned int v38 = v234;
          }
          else {
            unsigned int v38 = 16;
          }
          BOOL v39 = 1;
          if (v231 >= v232 && v34 >= v26)
          {
            int v40 = v234;
            if (v32 != v235) {
              int v40 = 16;
            }
            BOOL v39 = v37 != v40 || v230 != v33;
          }
          if (v225)
          {
            unsigned int v61 = 0;
            uint64_t v62 = v210 >> (*(unsigned char *)(v25 + 57) != 0);
            char v63 = 1;
            if (v62 > 127)
            {
              if (v62 > 511)
              {
                if (v62 == 512)
                {
                  char v64 = 0;
                  unsigned int v61 = 16;
                  unsigned int v65 = 16;
                }
                else
                {
                  char v64 = 1;
                  unsigned int v65 = 0;
                  if (v62 == 1024)
                  {
                    unsigned int v65 = 8;
                    unsigned int v61 = 16;
                  }
                }
              }
              else if (v62 == 128)
              {
                char v63 = 0;
                char v64 = 0;
                unsigned int v61 = 32;
                unsigned int v65 = 32;
              }
              else
              {
                char v64 = 1;
                unsigned int v65 = 0;
                if (v62 == 256)
                {
                  char v63 = 0;
                  char v64 = 0;
                  unsigned int v65 = 16;
                  unsigned int v61 = 32;
                }
              }
            }
            else
            {
              char v64 = 1;
              unsigned int v65 = 0;
              switch(v62)
              {
                case 4:
                  char v63 = 0;
                  char v64 = 0;
                  unsigned int v65 = 128;
                  unsigned int v61 = 256;
                  break;
                case 5:
                case 6:
                case 7:
                case 9:
                case 10:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 17:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                  break;
                case 8:
                  char v63 = 0;
                  char v64 = 0;
                  unsigned int v61 = 128;
                  unsigned int v65 = 128;
                  break;
                case 16:
                  char v63 = 0;
                  char v64 = 0;
                  unsigned int v65 = 64;
                  unsigned int v61 = 128;
                  break;
                case 32:
                  char v63 = 0;
                  char v64 = 0;
                  unsigned int v61 = 64;
                  unsigned int v65 = 64;
                  break;
                default:
                  if (v62 == 64)
                  {
                    char v63 = 0;
                    char v64 = 0;
                    unsigned int v65 = 32;
                    unsigned int v61 = 64;
                  }
                  break;
              }
            }
            unsigned int v199 = (v61 >> 4) - 1;
            if (v63) {
              unsigned int v200 = 0;
            }
            else {
              unsigned int v200 = 32 - __clz(~(-1 << -(char)__clz(v199)));
            }
            unsigned int v201 = (v65 >> 3) - 1;
            if (v64)
            {
              unsigned int v202 = 0;
              if (v200) {
                goto LABEL_233;
              }
            }
            else
            {
              unsigned int v202 = 32 - __clz(~(-1 << -(char)__clz(v201)));
              if (v202 | v200)
              {
LABEL_233:
                int v203 = 0;
                uint64_t v204 = 0;
                int v205 = v32 & v199;
                int v206 = v16 & v201;
                BOOL v207 = v202 != 0;
                BOOL v208 = v200 != 0;
                int v209 = 1;
                do
                {
                  --v202;
                  if (v207) {
                    v204 |= (unint64_t)(v209 & v206) << v203++;
                  }
                  else {
                    unsigned int v202 = 0;
                  }
                  --v200;
                  if (v208) {
                    v204 |= (unint64_t)(v209 & v205) << v203++;
                  }
                  else {
                    unsigned int v200 = 0;
                  }
                  v209 *= 2;
                  --v203;
                  BOOL v208 = v200 != 0;
                  BOOL v207 = v202 != 0;
                }
                while (v200 | v202);
                goto LABEL_245;
              }
            }
            uint64_t v204 = 0;
LABEL_245:
            unint64_t v49 = ((unint64_t)(v34 / v61 + v231 / v65 * ((v61 + v211) / v61)) << 14) + (v204 << 9);
            uint64_t result = 2 * a11;
            goto LABEL_59;
          }
          if (v223)
          {
            int v42 = 0;
            uint64_t v43 = 0;
            int v44 = 1;
            BOOL v45 = v220;
            BOOL v46 = v219;
            __int32 v47 = v221.i32[0];
            __int32 v48 = v221.i32[1];
            do
            {
              --v47;
              if (v45) {
                v43 |= (unint64_t)(v44 & v16) << v42++;
              }
              else {
                __int32 v47 = 0;
              }
              --v48;
              if (v46) {
                v43 |= (unint64_t)(v44 & v32) << v42++;
              }
              else {
                __int32 v48 = 0;
              }
              v44 *= 2;
              --v42;
              BOOL v46 = v48 != 0;
              BOOL v45 = v47 != 0;
            }
            while (v48 | v47);
          }
          else
          {
            uint64_t v43 = 0;
          }
          unint64_t v49 = v43 << 9;
LABEL_59:
          unsigned int v50 = *(_DWORD *)(v25 + 128) >> (*(unsigned char *)(v25 + 144) + a12);
          if (v50 <= 1) {
            unsigned int v50 = 1;
          }
          unsigned int v51 = v50 + 15;
          if (v51 < 0x20) {
            unsigned int v52 = 0;
          }
          else {
            unsigned int v52 = 32 - __clz(~(-1 << -(char)__clz((v51 >> 4) - 1)));
          }
          unsigned int v53 = *(_DWORD *)(v25 + 132) >> (*(unsigned char *)(v25 + 144) + a12);
          if (v53 <= 1) {
            unsigned int v53 = 1;
          }
          unsigned int v54 = v53 + 7;
          if (v54 < 0x10)
          {
            unsigned int v55 = 0;
            if (!v52)
            {
LABEL_81:
              uint64_t v57 = 0;
              goto LABEL_82;
            }
          }
          else
          {
            unsigned int v55 = 32 - __clz(~(-1 << -(char)__clz((v54 >> 3) - 1)));
            if (!(v55 | v52)) {
              goto LABEL_81;
            }
          }
          int v56 = 0;
          uint64_t v57 = 0;
          BOOL v58 = v52 != 0;
          BOOL v59 = v55 != 0;
          int v60 = 1;
          do
          {
            --v52;
            if (v58) {
              v57 |= (unint64_t)(v60 & v32) << v56++;
            }
            else {
              unsigned int v52 = 0;
            }
            --v55;
            if (v59) {
              v57 |= (unint64_t)(v60 & v16) << v56++;
            }
            else {
              unsigned int v55 = 0;
            }
            v60 *= 2;
            --v56;
            BOOL v59 = v55 != 0;
            BOOL v58 = v52 != 0;
          }
          while (v55 | v52);
LABEL_82:
          int v66 = v38 < 0x10 || v39;
          uint64_t v67 = (char *)(a4 + 8 * v57);
          uint64_t v68 = v229 + 4 * (v36 - v26);
          unsigned int v69 = (void *)(a2 + v49);
          if (v33 < 8) {
            int v70 = 1;
          }
          else {
            int v70 = v66;
          }
          if (v236)
          {
            if (v70)
            {
              int v71 = v69;
              int v72 = v37;
              BOOL v73 = v39;
              int v74 = v36;
              memcpy(__dst, v69, sizeof(__dst));
              int v36 = v74;
              BOOL v39 = v73;
              unsigned int v34 = 16 * v32;
              int v37 = v72;
              uint64_t v29 = a11;
              unsigned int v33 = v217;
              uint64_t v75 = __dst;
              unsigned int v69 = v71;
              uint64_t v25 = v233;
LABEL_92:
              float64x2_t v222 = v69;
              block[0] = MEMORY[0x263EF8330];
              block[1] = 3221225472;
              block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE9ELj2ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
              block[3] = &__block_descriptor_90_e5_v8__0l;
              block[4] = v25;
              float64x2_t v238 = (int64x2_t *)v75;
              unsigned __int8 v246 = v38;
              unsigned __int8 v247 = v33;
              unsigned int v242 = v218;
              unsigned int v243 = v36 - v34;
              float64x2_t v239 = v67;
              uint64_t v240 = v68;
              uint64_t v241 = v29;
              unsigned int v244 = v230;
              unsigned int v245 = v37;
              if (v39)
              {
                dispatch_sync(*(dispatch_queue_t *)(*(void *)(v25 + 8) + 7384), block);
                uint64_t result = 2 * a11;
                uint64_t v25 = v233;
                unsigned int v26 = a7;
LABEL_94:
                unsigned int v69 = v222;
                goto LABEL_95;
              }
              unsigned int v92 = *v67;
              if (v92 == 63)
              {
                int64x2_t v95 = *((int64x2_t *)v75 + 1);
                uint64_t v96 = (const double *)(v75 + 32);
                float64x2x2_t v282 = vld2q_f64(v96);
                int64x2_t v97 = vzip2q_s64(*(int64x2_t *)v75, v95);
                int64x2_t v249 = vzip1q_s64(*(int64x2_t *)v75, v95);
                int64x2_t v253 = v97;
                float64x2_t v257 = v282.val[0];
                float64x2_t v261 = v282.val[1];
                uint64_t v93 = 64;
              }
              else if (v92 == 1)
              {
                int16x8_t v94 = vld1q_dup_s16((const __int16 *)v75);
                int64x2_t v249 = (int64x2_t)v94;
                int64x2_t v253 = (int64x2_t)v94;
                float64x2_t v257 = (float64x2_t)v94;
                float64x2_t v261 = (float64x2_t)v94;
                uint64_t v93 = 2;
              }
              else if (*v67)
              {
                uint64_t v93 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v249, 64, (uint64_t)v75, v92);
              }
              else
              {
                uint64_t v93 = 0;
                int64x2_t v249 = 0uLL;
                int64x2_t v253 = 0uLL;
                float64x2_t v257 = 0uLL;
                float64x2_t v261 = 0uLL;
              }
              uint64_t v98 = (uint64_t)&v75[v93];
              unsigned int v99 = v67[1];
              if (v99 == 63)
              {
                int64x2_t v102 = *(int64x2_t *)(v98 + 16);
                uint64_t v103 = (const double *)(v98 + 32);
                float64x2x2_t v283 = vld2q_f64(v103);
                int64x2_t v104 = vzip2q_s64(*(int64x2_t *)v98, v102);
                int64x2_t v250 = vzip1q_s64(*(int64x2_t *)v98, v102);
                int64x2_t v254 = v104;
                float64x2_t v258 = v283.val[0];
                float64x2_t v262 = v283.val[1];
                uint64_t v100 = 64;
              }
              else if (v99 == 1)
              {
                int16x8_t v101 = vld1q_dup_s16((const __int16 *)v98);
                int64x2_t v250 = (int64x2_t)v101;
                int64x2_t v254 = (int64x2_t)v101;
                float64x2_t v258 = (float64x2_t)v101;
                float64x2_t v262 = (float64x2_t)v101;
                uint64_t v100 = 2;
              }
              else if (v67[1])
              {
                uint64_t v100 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v250, 64, v98, v99);
              }
              else
              {
                uint64_t v100 = 0;
                int64x2_t v250 = 0uLL;
                int64x2_t v254 = 0uLL;
                float64x2_t v258 = 0uLL;
                float64x2_t v262 = 0uLL;
              }
              uint64_t v105 = v98 + v100;
              unsigned int v106 = v67[2];
              if (v106 == 63)
              {
                int64x2_t v109 = *(int64x2_t *)(v105 + 16);
                uint64_t v110 = (const double *)(v105 + 32);
                float64x2x2_t v284 = vld2q_f64(v110);
                int64x2_t v111 = vzip2q_s64(*(int64x2_t *)v105, v109);
                int64x2_t v265 = vzip1q_s64(*(int64x2_t *)v105, v109);
                int64x2_t v269 = v111;
                float64x2_t v273 = v284.val[0];
                float64x2_t v277 = v284.val[1];
                uint64_t v107 = 64;
              }
              else if (v106 == 1)
              {
                int16x8_t v108 = vld1q_dup_s16((const __int16 *)v105);
                int64x2_t v265 = (int64x2_t)v108;
                int64x2_t v269 = (int64x2_t)v108;
                float64x2_t v273 = (float64x2_t)v108;
                float64x2_t v277 = (float64x2_t)v108;
                uint64_t v107 = 2;
              }
              else if (v67[2])
              {
                uint64_t v107 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v265, 64, v105, v106);
              }
              else
              {
                uint64_t v107 = 0;
                int64x2_t v265 = 0uLL;
                int64x2_t v269 = 0uLL;
                float64x2_t v273 = 0uLL;
                float64x2_t v277 = 0uLL;
              }
              uint64_t v112 = v105 + v107;
              unsigned int v113 = v67[3];
              if (v113 == 63)
              {
                int64x2_t v116 = *(int64x2_t *)(v112 + 16);
                uint64_t v117 = (const double *)(v112 + 32);
                float64x2x2_t v285 = vld2q_f64(v117);
                int64x2_t v118 = vzip2q_s64(*(int64x2_t *)v112, v116);
                int64x2_t v266 = vzip1q_s64(*(int64x2_t *)v112, v116);
                int64x2_t v270 = v118;
                float64x2_t v274 = v285.val[0];
                float64x2_t v278 = v285.val[1];
                uint64_t v114 = 64;
              }
              else if (v113 == 1)
              {
                int16x8_t v115 = vld1q_dup_s16((const __int16 *)v112);
                int64x2_t v266 = (int64x2_t)v115;
                int64x2_t v270 = (int64x2_t)v115;
                float64x2_t v274 = (float64x2_t)v115;
                float64x2_t v278 = (float64x2_t)v115;
                uint64_t v114 = 2;
              }
              else if (v67[3])
              {
                uint64_t v114 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v266, 64, v112, v113);
              }
              else
              {
                uint64_t v114 = 0;
                int64x2_t v266 = 0uLL;
                int64x2_t v270 = 0uLL;
                float64x2_t v274 = 0uLL;
                float64x2_t v278 = 0uLL;
              }
              uint64_t v119 = v112 + v114;
              unsigned int v120 = v67[4];
              if (v120 == 63)
              {
                int64x2_t v123 = *(int64x2_t *)(v119 + 16);
                uint64_t v124 = (const double *)(v119 + 32);
                float64x2x2_t v286 = vld2q_f64(v124);
                int64x2_t v125 = vzip2q_s64(*(int64x2_t *)v119, v123);
                int64x2_t v251 = vzip1q_s64(*(int64x2_t *)v119, v123);
                int64x2_t v255 = v125;
                float64x2_t v259 = v286.val[0];
                float64x2_t v263 = v286.val[1];
                uint64_t v121 = 64;
              }
              else if (v120 == 1)
              {
                int16x8_t v122 = vld1q_dup_s16((const __int16 *)v119);
                int64x2_t v251 = (int64x2_t)v122;
                int64x2_t v255 = (int64x2_t)v122;
                float64x2_t v259 = (float64x2_t)v122;
                float64x2_t v263 = (float64x2_t)v122;
                uint64_t v121 = 2;
              }
              else if (v67[4])
              {
                uint64_t v121 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v251, 64, v119, v120);
              }
              else
              {
                uint64_t v121 = 0;
                int64x2_t v251 = 0uLL;
                int64x2_t v255 = 0uLL;
                float64x2_t v259 = 0uLL;
                float64x2_t v263 = 0uLL;
              }
              uint64_t v126 = v119 + v121;
              unsigned int v127 = v67[5];
              if (v127 == 63)
              {
                int64x2_t v130 = *(int64x2_t *)(v126 + 16);
                uint64_t v131 = (const double *)(v126 + 32);
                float64x2x2_t v287 = vld2q_f64(v131);
                int64x2_t v132 = vzip2q_s64(*(int64x2_t *)v126, v130);
                int64x2_t v252 = vzip1q_s64(*(int64x2_t *)v126, v130);
                int64x2_t v256 = v132;
                float64x2_t v260 = v287.val[0];
                float64x2_t v264 = v287.val[1];
                uint64_t v128 = 64;
              }
              else if (v127 == 1)
              {
                int16x8_t v129 = vld1q_dup_s16((const __int16 *)v126);
                int64x2_t v252 = (int64x2_t)v129;
                int64x2_t v256 = (int64x2_t)v129;
                float64x2_t v260 = (float64x2_t)v129;
                float64x2_t v264 = (float64x2_t)v129;
                uint64_t v128 = 2;
              }
              else if (v67[5])
              {
                uint64_t v128 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v252, 64, v126, v127);
              }
              else
              {
                uint64_t v128 = 0;
                int64x2_t v252 = 0uLL;
                int64x2_t v256 = 0uLL;
                float64x2_t v260 = 0uLL;
                float64x2_t v264 = 0uLL;
              }
              uint64_t v133 = v126 + v128;
              unsigned int v134 = v67[6];
              if (v134 == 63)
              {
                int64x2_t v137 = *(int64x2_t *)(v133 + 16);
                int16x8_t v138 = (const double *)(v133 + 32);
                float64x2x2_t v288 = vld2q_f64(v138);
                int64x2_t v139 = vzip2q_s64(*(int64x2_t *)v133, v137);
                int64x2_t v267 = vzip1q_s64(*(int64x2_t *)v133, v137);
                int64x2_t v271 = v139;
                float64x2_t v275 = v288.val[0];
                float64x2_t v279 = v288.val[1];
                uint64_t v135 = 64;
              }
              else if (v134 == 1)
              {
                int16x8_t v136 = vld1q_dup_s16((const __int16 *)v133);
                int64x2_t v267 = (int64x2_t)v136;
                int64x2_t v271 = (int64x2_t)v136;
                float64x2_t v275 = (float64x2_t)v136;
                float64x2_t v279 = (float64x2_t)v136;
                uint64_t v135 = 2;
              }
              else if (v67[6])
              {
                uint64_t v135 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v267, 64, v133, v134);
              }
              else
              {
                uint64_t v135 = 0;
                int64x2_t v267 = 0uLL;
                int64x2_t v271 = 0uLL;
                float64x2_t v275 = 0uLL;
                float64x2_t v279 = 0uLL;
              }
              uint64_t v140 = v133 + v135;
              unsigned int v141 = v67[7];
              if (v141 == 63)
              {
                int64x2_t v144 = *(int64x2_t *)(v140 + 16);
                int16x8_t v145 = (const double *)(v140 + 32);
                float64x2x2_t v289 = vld2q_f64(v145);
                int64x2_t v146 = vzip2q_s64(*(int64x2_t *)v140, v144);
                int64x2_t v268 = vzip1q_s64(*(int64x2_t *)v140, v144);
                int64x2_t v272 = v146;
                float64x2_t v276 = v289.val[0];
                float64x2_t v280 = v289.val[1];
                uint64_t v142 = v244;
                if (v244) {
                  goto LABEL_169;
                }
              }
              else
              {
                if (v141 != 1)
                {
                  if (v67[7])
                  {
                    AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v268, 64, v140, v141);
                    uint64_t v142 = v244;
                    if (!v244) {
                      goto LABEL_203;
                    }
                  }
                  else
                  {
                    int64x2_t v268 = 0uLL;
                    int64x2_t v272 = 0uLL;
                    float64x2_t v276 = 0uLL;
                    float64x2_t v280 = 0uLL;
                    uint64_t v142 = v244;
                    if (!v244) {
                      goto LABEL_203;
                    }
                  }
LABEL_169:
                  if (!v245) {
                    goto LABEL_203;
                  }
                  uint64_t v147 = 0;
                  unint64_t v148 = (unint64_t)v242 << 6;
                  uint64_t v149 = 4 * v243;
                  char v150 = &v249.i8[v148 + v149];
                  uint64_t v151 = v240;
                  uint64_t v152 = v241;
                  unint64_t v153 = 4 * v245;
                  if (v153 <= 1) {
                    unint64_t v154 = 1;
                  }
                  else {
                    unint64_t v154 = 4 * v245;
                  }
                  unint64_t v155 = v148 + v149;
                  long long v156 = &v249.i8[v148 + v149];
                  if (v154) {
                    BOOL v157 = (v154 - 1) >> 32 == 0;
                  }
                  else {
                    BOOL v157 = 0;
                  }
                  uint64_t v158 = v154 & 0x3FFFFFFE0;
                  uint64_t v159 = v154 & 0x3FFFFFFF8;
                  char v161 = !v157 || v154 < 8;
                  char v162 = &v250.i8[v155];
                  unint64_t v163 = (long long *)(v240 + 16);
                  unsigned int v164 = v150;
                  uint64_t v165 = v240;
                  while (2)
                  {
                    unsigned int v166 = (char *)(v151 + v152 * v147);
                    unsigned int v167 = &v150[64 * v147];
                    if ((unint64_t)(&v156[64 * v147] - v166) < 0x20) {
                      char v168 = 1;
                    }
                    else {
                      char v168 = v161;
                    }
                    if (v168)
                    {
                      int v169 = 0;
LABEL_200:
                      unsigned int v179 = v169 + 1;
                      do
                      {
                        char v180 = *v166++;
                        *v167++ = v180;
                      }
                      while (v153 > v179++);
                    }
                    else
                    {
                      if (v154 >= 0x20)
                      {
                        int v171 = v163;
                        BOOL v172 = v162;
                        uint64_t v173 = v154 & 0x3FFFFFFE0;
                        do
                        {
                          long long v174 = *v171;
                          *((_OWORD *)v172 - 1) = *(v171 - 1);
                          *(_OWORD *)BOOL v172 = v174;
                          v172 += 32;
                          v171 += 2;
                          v173 -= 32;
                        }
                        while (v173);
                        if (v154 == v158) {
                          goto LABEL_183;
                        }
                        uint64_t v170 = v154 & 0x3FFFFFFE0;
                        if ((v154 & 0x18) == 0)
                        {
                          v166 += v158;
                          v167 += v158;
                          int v169 = v154 & 0xFFFFFFE0;
                          goto LABEL_200;
                        }
                      }
                      else
                      {
                        uint64_t v170 = 0;
                      }
                      v167 += v159;
                      uint64_t v175 = v170 - v159;
                      unsigned int v176 = (uint64_t *)(v165 + v170);
                      int v177 = &v164[v170];
                      do
                      {
                        uint64_t v178 = *v176++;
                        *(void *)int v177 = v178;
                        v177 += 8;
                        v175 += 8;
                      }
                      while (v175);
                      if (v154 != v159)
                      {
                        v166 += v159;
                        int v169 = v154 & 0xFFFFFFF8;
                        goto LABEL_200;
                      }
                    }
LABEL_183:
                    ++v147;
                    v162 += 64;
                    unint64_t v163 = (long long *)((char *)v163 + v152);
                    v165 += v152;
                    v164 += 64;
                    if (v147 == v142) {
                      goto LABEL_203;
                    }
                    continue;
                  }
                }
                int16x8_t v143 = vld1q_dup_s16((const __int16 *)v140);
                int64x2_t v268 = (int64x2_t)v143;
                int64x2_t v272 = (int64x2_t)v143;
                float64x2_t v276 = (float64x2_t)v143;
                float64x2_t v280 = (float64x2_t)v143;
                uint64_t v142 = v244;
                if (v244) {
                  goto LABEL_169;
                }
              }
LABEL_203:
              uint64_t v182 = 0;
              int v183 = v238;
              BOOL v184 = v239;
              int v185 = v246;
              int v186 = v247;
              unsigned int v26 = a7;
              uint64_t v25 = v233;
              uint64_t result = 2 * a11;
              do
              {
                uint64_t v194 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,2u>::kSubblockPositions[v182 + 1];
                uint64_t v195 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,2u>::kSubblockPositions[v182];
                unsigned int v196 = (v185 - 4 * v195) & ~((v185 - 4 * (int)v195) >> 31);
                if (v196 >= 4) {
                  unsigned int v196 = 4;
                }
                unsigned int v197 = (v186 - 4 * v194) & ~((v186 - 4 * (int)v194) >> 31);
                if (v197 >= 4) {
                  unsigned int v197 = 4;
                }
                if (v196) {
                  BOOL v198 = v197 == 0;
                }
                else {
                  BOOL v198 = 1;
                }
                if (v198)
                {
                  char v193 = 0;
                }
                else
                {
                  __int32 v187 = &v249 + 16 * v194 + v195;
                  int64x2_t v188 = v187[4];
                  int64x2_t v189 = vzip1q_s64(*v187, v188);
                  int64x2_t v190 = vzip2q_s64(*v187, v188);
                  int64x2_t v191 = v187[8];
                  int64x2_t v192 = v187[12];
                  *int v183 = v189;
                  v183[1] = v190;
                  v183[2] = vzip1q_s64(v191, v192);
                  v183[3] = vzip2q_s64(v191, v192);
                  v183 += 4;
                  char v193 = 63;
                }
                *v184++ = v193;
                v182 += 2;
              }
              while (v182 != 16);
              goto LABEL_94;
            }
            uint64_t v75 = __dst;
          }
          else
          {
            uint64_t v75 = v69;
            if (v70) {
              goto LABEL_92;
            }
          }
          uint64_t v76 = 0;
          int64x2_t v77 = (int64x2_t *)v75;
          do
          {
            uint64_t v87 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,2u>::kSubblockPositions[v76 + 1];
            uint64_t v88 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,2u>::kSubblockPositions[v76];
            unsigned int v89 = (v38 - 4 * v88) & ~((int)(v38 - 4 * v88) >> 31);
            if (v89 >= 4) {
              unsigned int v89 = 4;
            }
            unsigned int v90 = (v33 - 4 * v87) & ~((int)(v33 - 4 * v87) >> 31);
            if (v90 >= 4) {
              unsigned int v90 = 4;
            }
            if (v89) {
              BOOL v91 = v90 == 0;
            }
            else {
              BOOL v91 = 1;
            }
            if (v91)
            {
              char v86 = 0;
            }
            else
            {
              uint64_t v78 = (int64x2_t *)(v68 + 4 * a11 * v87 + 16 * v88);
              int64x2_t v79 = *(int64x2_t *)((char *)v78 + v29);
              int64x2_t v80 = vzip1q_s64(*v78, v79);
              int64x2_t v81 = vzip2q_s64(*v78, v79);
              uint64_t v82 = (int64x2_t *)((char *)v78 + result);
              int64x2_t v83 = *(int64x2_t *)((char *)v82 + v29);
              int64x2_t v84 = vzip1q_s64(*v82, v83);
              int64x2_t v85 = vzip2q_s64(*v82, v83);
              *int64x2_t v77 = v80;
              v77[1] = v81;
              v77[2] = v84;
              v77[3] = v85;
              v77 += 4;
              char v86 = 63;
            }
            *v67++ = v86;
            v76 += 2;
          }
          while (v76 != 16);
LABEL_95:
          if (v236)
          {
            memcpy(v69, v75, 0x200uLL);
            uint64_t result = 2 * a11;
            uint64_t v25 = v233;
            unsigned int v26 = a7;
          }
          BOOL v20 = v32++ == v224 >> 4;
        }
        while (!v20);
        BOOL v20 = v16++ == v216;
      }
      while (!v20);
    }
  }
  return result;
}

uint64_t AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, char a12)
{
  uint64_t v312 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v229 = a8;
  unsigned int v214 = a8 + a10 - 1;
  uint64_t v230 = a1;
  if (*(void *)(a1 + 168)) {
    int v17 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v17 = 0;
  }
  unsigned int v18 = a5 - 1;
  unsigned int v19 = a6 - 1;
  unsigned int v20 = a8 >> 3;
  unsigned int v213 = v214 >> 3;
  BOOL v21 = (v17 & 0xD00) == 0 || v17 == 768;
  int v22 = v17 & 0xE00;
  int v24 = !v21 && v22 != 1024;
  int v234 = v24;
  uint64_t result = a1;
  if (*(unsigned char *)(a1 + 232))
  {
    unsigned int v26 = *(unsigned __int8 *)(a1 + 255);
    unsigned int v27 = *(unsigned __int8 *)(a1 + 254);
    char v28 = __clz(v18);
    if (1 << v26 >= a6 || a5 >> v27)
    {
      if (!(a6 >> v26) && 1 << v27 < a5)
      {
        if (a6 < 2) {
          unsigned int v31 = 0;
        }
        else {
          unsigned int v31 = __clz(~(-1 << -(char)__clz(v19))) - 32;
        }
        v27 += v26 + v31;
        unsigned int v26 = -v31;
      }
    }
    else
    {
      unsigned int v29 = 32 - __clz(~(-1 << -v28));
      unsigned int v30 = v27 + v26;
      if (a5 < 2) {
        unsigned int v29 = 0;
      }
      unsigned int v26 = v30 - v29;
      unsigned int v27 = v29;
    }
    if (a5 < 2)
    {
      if (v27) {
        goto LABEL_27;
      }
    }
    else if (32 - __clz(~(-1 << -v28)) < v27)
    {
LABEL_27:
      BOOL v224 = 0;
LABEL_32:
      unsigned int v221 = v27 - 4;
      unsigned int v218 = v26 - 3;
      int v33 = -1 << *(unsigned char *)(*(void *)(a1 + 208) + 48);
      unsigned int v211 = (((~v33 + a5) & v33) + ~(-1 << v27)) >> v27;
      goto LABEL_33;
    }
    if (a6 < 2) {
      unsigned int v32 = 0;
    }
    else {
      unsigned int v32 = 32 - __clz(~(-1 << -(char)__clz(v19)));
    }
    BOOL v224 = v32 >= v26;
    goto LABEL_32;
  }
  BOOL v224 = 0;
  unsigned int v211 = 0;
  unsigned int v218 = 0;
  unsigned int v221 = 0;
LABEL_33:
  if (v20 <= v213)
  {
    unsigned int v223 = a7 + a9 - 1;
    unsigned int v210 = a7 >> 4;
    if (a7 >> 4 <= v223 >> 4)
    {
      unsigned int v232 = v18 >> 4;
      unsigned int v209 = v19 >> 3;
      int v231 = (v18 & 0xF) + 1;
      int v208 = (v19 & 7) + 1;
      int v207 = ~(-1 << v218);
      uint32x2_t v34 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0xF00000007);
      int8x8_t v35 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32(vadd_s32((int32x2_t)vshl_u32(v34, (uint32x2_t)0xFFFFFFFCFFFFFFFDLL), (int32x2_t)-1))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x2000000010, v34));
      __int32 v219 = v35.i32[0] | v35.i32[1];
      int8x8_t v217 = v35;
      BOOL v216 = v35.i32[0] != 0;
      BOOL v215 = v35.i32[1] != 0;
      unsigned int v222 = a7;
      do
      {
        unsigned int v36 = (8 * v20) | 7;
        if (8 * v20 <= v229) {
          int v37 = v229;
        }
        else {
          int v37 = 8 * v20;
        }
        if (v214 < v36) {
          unsigned int v36 = v214;
        }
        int v220 = v37 - 8 * v20;
        int v228 = v36 - v37 + 1;
        unsigned int v38 = v210;
        int v39 = v208;
        if (v20 != v209) {
          int v39 = 8;
        }
        unsigned int v235 = v39;
        int v40 = v20 & v207;
        uint64_t v227 = a3 + (v37 - v229) * a11;
        do
        {
          unsigned int v41 = 16 * v38;
          unsigned int v42 = 16 * (v38 + 1) - 1;
          if (16 * v38 <= a7) {
            int v43 = a7;
          }
          else {
            int v43 = 16 * v38;
          }
          if (v223 < v42) {
            unsigned int v42 = v223;
          }
          int v44 = v42 - v43 + 1;
          if (v38 == v232) {
            unsigned int v45 = v231;
          }
          else {
            unsigned int v45 = 16;
          }
          BOOL v46 = 1;
          if (8 * v20 >= v229 && v41 >= a7)
          {
            int v47 = v231;
            if (v38 != v232) {
              int v47 = 16;
            }
            BOOL v46 = v44 != v47 || v228 != v235;
          }
          if (v224)
          {
            if (v221 | v218)
            {
              int v49 = 0;
              uint64_t v50 = 0;
              int v51 = 1;
              BOOL v52 = v218 != 0;
              BOOL v53 = v221 != 0;
              unsigned int v54 = v218;
              unsigned int v55 = v221;
              do
              {
                --v54;
                if (v52) {
                  v50 |= (unint64_t)(v40 & v51) << v49++;
                }
                else {
                  unsigned int v54 = 0;
                }
                --v55;
                if (v53) {
                  v50 |= (unint64_t)(v38 & ~(-1 << v221) & v51) << v49++;
                }
                else {
                  unsigned int v55 = 0;
                }
                v51 *= 2;
                --v49;
                BOOL v53 = v55 != 0;
                BOOL v52 = v54 != 0;
              }
              while (v55 | v54);
            }
            else
            {
              uint64_t v50 = 0;
            }
            uint64_t v63 = *(void *)(result + 320) * ((v38 >> v221) + (v20 >> v218) * v211) + (v50 << 10);
          }
          else
          {
            if (v219)
            {
              int v56 = 0;
              uint64_t v57 = 0;
              int v58 = 1;
              BOOL v59 = v216;
              BOOL v60 = v215;
              __int32 v61 = v217.i32[0];
              __int32 v62 = v217.i32[1];
              do
              {
                --v61;
                if (v59) {
                  v57 |= (unint64_t)(v58 & v20) << v56++;
                }
                else {
                  __int32 v61 = 0;
                }
                --v62;
                if (v60) {
                  v57 |= (unint64_t)(v58 & v38) << v56++;
                }
                else {
                  __int32 v62 = 0;
                }
                v58 *= 2;
                --v56;
                BOOL v60 = v62 != 0;
                BOOL v59 = v61 != 0;
              }
              while (v62 | v61);
            }
            else
            {
              uint64_t v57 = 0;
            }
            uint64_t v63 = v57 << 10;
          }
          unsigned int v64 = *(_DWORD *)(result + 128) >> (*(unsigned char *)(result + 144) + a12);
          if (v64 <= 1) {
            unsigned int v64 = 1;
          }
          unsigned int v65 = v64 + 15;
          if (v65 < 0x20) {
            unsigned int v66 = 0;
          }
          else {
            unsigned int v66 = 32 - __clz(~(-1 << -(char)__clz((v65 >> 4) - 1)));
          }
          unsigned int v67 = *(_DWORD *)(result + 132) >> (*(unsigned char *)(result + 144) + a12);
          if (v67 <= 1) {
            unsigned int v67 = 1;
          }
          unsigned int v68 = v67 + 7;
          if (v68 < 0x10)
          {
            unsigned int v69 = 0;
            if (!v66)
            {
LABEL_109:
              uint64_t v71 = 0;
              goto LABEL_110;
            }
          }
          else
          {
            unsigned int v69 = 32 - __clz(~(-1 << -(char)__clz((v68 >> 3) - 1)));
            if (!(v69 | v66)) {
              goto LABEL_109;
            }
          }
          int v70 = 0;
          uint64_t v71 = 0;
          BOOL v72 = v66 != 0;
          BOOL v73 = v69 != 0;
          int v74 = 1;
          do
          {
            --v66;
            if (v72) {
              v71 |= (unint64_t)(v74 & v38) << v70++;
            }
            else {
              unsigned int v66 = 0;
            }
            --v69;
            if (v73) {
              v71 |= (unint64_t)(v74 & v20) << v70++;
            }
            else {
              unsigned int v69 = 0;
            }
            v74 *= 2;
            --v70;
            BOOL v73 = v69 != 0;
            BOOL v72 = v66 != 0;
          }
          while (v69 | v66);
LABEL_110:
          unsigned int v75 = v43 - a7;
          int v76 = v45 < 0x10 || v46;
          int64x2_t v77 = (char *)(a4 + 8 * v71);
          unint64_t v78 = v227 + 8 * v75;
          int64x2_t v79 = (float32x4_t *)(a2 + v63);
          if (v235 < 8) {
            int v80 = 1;
          }
          else {
            int v80 = v76;
          }
          uint64_t v233 = v79;
          if (v234)
          {
            int64x2_t v81 = (float32x4_t *)__dst;
            if (!v80) {
              goto LABEL_122;
            }
            uint64_t v82 = (char *)(a4 + 8 * v71);
            int v83 = v44;
            char v84 = v45;
            memcpy(__dst, v79, sizeof(__dst));
            unsigned int v41 = 16 * v38;
            LOBYTE(v45) = v84;
            int v44 = v83;
            int64x2_t v77 = v82;
            int v40 = v20 & v207;
            uint64_t result = v230;
          }
          else
          {
            int64x2_t v81 = v79;
            if (!v80)
            {
LABEL_122:
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock(v78, a11, (unint64_t)v81, v77, v45, v235);
              goto LABEL_123;
            }
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE12ELj2ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = result;
          int64x2_t v237 = v81;
          unsigned __int8 v245 = v45;
          unsigned __int8 v246 = v235;
          unsigned int v241 = v220;
          unsigned int v242 = v43 - v41;
          float64x2_t v238 = v77;
          unint64_t v239 = v78;
          uint64_t v240 = a11;
          unsigned int v243 = v228;
          unsigned int v244 = v44;
          if (v46)
          {
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(result + 8) + 7384), block);
LABEL_123:
            a7 = v222;
            unsigned int v85 = v38 + 1;
            goto LABEL_215;
          }
          unsigned int v86 = *v77;
          if (v86 == 127)
          {
            float32x4_t v89 = v81[1];
            float32x4_t v90 = v81[2];
            float32x4_t v91 = v81[3];
            float32x4_t v92 = v81[4];
            float32x4_t v93 = v81[5];
            float32x4_t v94 = v81[6];
            float32x4_t v95 = v81[7];
            int8x16_t v248 = *(int8x16_t *)v81;
            float32x4_t v249 = v90;
            float32x4_t v256 = v89;
            float32x4_t v257 = v91;
            float32x4_t v264 = v92;
            float32x4_t v265 = v94;
            float32x4_t v272 = v93;
            float32x4_t v273 = v95;
            uint64_t v87 = 128;
          }
          else if (v86 == 3)
          {
            float32x4_t v88 = vld1q_dup_f32(v81->f32);
            int8x16_t v248 = (int8x16_t)v88;
            float32x4_t v249 = v88;
            float32x4_t v256 = v88;
            float32x4_t v257 = v88;
            float32x4_t v264 = v88;
            float32x4_t v265 = v88;
            float32x4_t v272 = v88;
            float32x4_t v273 = v88;
            uint64_t v87 = 4;
          }
          else if (*v77)
          {
            uint64_t v87 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v248, 128, (uint64_t)v81, v86);
          }
          else
          {
            uint64_t v87 = 0;
            float32x4_t v249 = 0u;
            int8x16_t v248 = 0u;
            float32x4_t v256 = 0u;
            float32x4_t v257 = 0u;
            float32x4_t v264 = 0u;
            float32x4_t v265 = 0u;
            float32x4_t v272 = 0u;
            float32x4_t v273 = 0u;
          }
          uint64_t v96 = (uint64_t)v81 + v87;
          unsigned int v97 = v77[1];
          if (v97 == 127)
          {
            float32x4_t v100 = *(float32x4_t *)(v96 + 16);
            float32x4_t v101 = *(float32x4_t *)(v96 + 32);
            float32x4_t v102 = *(float32x4_t *)(v96 + 48);
            float32x4_t v103 = *(float32x4_t *)(v96 + 64);
            float32x4_t v104 = *(float32x4_t *)(v96 + 80);
            float32x4_t v105 = *(float32x4_t *)(v96 + 96);
            float32x4_t v106 = *(float32x4_t *)(v96 + 112);
            int8x16_t v250 = *(int8x16_t *)v96;
            float32x4_t v251 = v101;
            float32x4_t v258 = v100;
            float32x4_t v259 = v102;
            float32x4_t v266 = v103;
            float32x4_t v267 = v105;
            float32x4_t v274 = v104;
            float32x4_t v275 = v106;
            uint64_t v98 = 128;
            unsigned int v85 = v38 + 1;
          }
          else
          {
            unsigned int v85 = v38 + 1;
            if (v97 == 3)
            {
              float32x4_t v99 = vld1q_dup_f32((const float *)v96);
              int8x16_t v250 = (int8x16_t)v99;
              float32x4_t v251 = v99;
              float32x4_t v258 = v99;
              float32x4_t v259 = v99;
              float32x4_t v266 = v99;
              float32x4_t v267 = v99;
              float32x4_t v274 = v99;
              float32x4_t v275 = v99;
              uint64_t v98 = 4;
            }
            else if (v77[1])
            {
              uint64_t v98 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v250, 128, v96, v97);
            }
            else
            {
              uint64_t v98 = 0;
              int8x16_t v250 = 0u;
              float32x4_t v251 = 0u;
              float32x4_t v258 = 0u;
              float32x4_t v259 = 0u;
              float32x4_t v266 = 0u;
              float32x4_t v267 = 0u;
              float32x4_t v274 = 0u;
              float32x4_t v275 = 0u;
            }
          }
          uint64_t v107 = v96 + v98;
          unsigned int v108 = v77[2];
          if (v108 == 127)
          {
            float32x4_t v111 = *(float32x4_t *)(v107 + 16);
            float32x4_t v112 = *(float32x4_t *)(v107 + 32);
            float32x4_t v113 = *(float32x4_t *)(v107 + 48);
            float32x4_t v114 = *(float32x4_t *)(v107 + 64);
            float32x4_t v115 = *(float32x4_t *)(v107 + 80);
            float32x4_t v116 = *(float32x4_t *)(v107 + 96);
            float32x4_t v117 = *(float32x4_t *)(v107 + 112);
            int8x16_t v280 = *(int8x16_t *)v107;
            float32x4_t v281 = v112;
            float32x4_t v288 = v111;
            float32x4_t v289 = v113;
            float32x4_t v296 = v114;
            float32x4_t v297 = v116;
            float32x4_t v304 = v115;
            float32x4_t v305 = v117;
            uint64_t v109 = 128;
          }
          else if (v108 == 3)
          {
            float32x4_t v110 = vld1q_dup_f32((const float *)v107);
            int8x16_t v280 = (int8x16_t)v110;
            float32x4_t v281 = v110;
            float32x4_t v288 = v110;
            float32x4_t v289 = v110;
            float32x4_t v296 = v110;
            float32x4_t v297 = v110;
            float32x4_t v304 = v110;
            float32x4_t v305 = v110;
            uint64_t v109 = 4;
          }
          else if (v77[2])
          {
            uint64_t v109 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v280, 128, v107, v108);
          }
          else
          {
            uint64_t v109 = 0;
            int8x16_t v280 = 0u;
            float32x4_t v281 = 0u;
            float32x4_t v288 = 0u;
            float32x4_t v289 = 0u;
            float32x4_t v296 = 0u;
            float32x4_t v297 = 0u;
            float32x4_t v304 = 0u;
            float32x4_t v305 = 0u;
          }
          uint64_t v118 = v107 + v109;
          unsigned int v119 = v77[3];
          if (v119 == 127)
          {
            float32x4_t v122 = *(float32x4_t *)(v118 + 16);
            float32x4_t v123 = *(float32x4_t *)(v118 + 32);
            float32x4_t v124 = *(float32x4_t *)(v118 + 48);
            float32x4_t v125 = *(float32x4_t *)(v118 + 64);
            float32x4_t v126 = *(float32x4_t *)(v118 + 80);
            float32x4_t v127 = *(float32x4_t *)(v118 + 96);
            float32x4_t v128 = *(float32x4_t *)(v118 + 112);
            int8x16_t v282 = *(int8x16_t *)v118;
            float32x4_t v283 = v123;
            float32x4_t v290 = v122;
            float32x4_t v291 = v124;
            float32x4_t v298 = v125;
            float32x4_t v299 = v127;
            float32x4_t v306 = v126;
            float32x4_t v307 = v128;
            uint64_t v120 = 128;
          }
          else if (v119 == 3)
          {
            float32x4_t v121 = vld1q_dup_f32((const float *)v118);
            int8x16_t v282 = (int8x16_t)v121;
            float32x4_t v283 = v121;
            float32x4_t v290 = v121;
            float32x4_t v291 = v121;
            float32x4_t v298 = v121;
            float32x4_t v299 = v121;
            float32x4_t v306 = v121;
            float32x4_t v307 = v121;
            uint64_t v120 = 4;
          }
          else if (v77[3])
          {
            uint64_t v120 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v282, 128, v118, v119);
          }
          else
          {
            uint64_t v120 = 0;
            int8x16_t v282 = 0u;
            float32x4_t v283 = 0u;
            float32x4_t v290 = 0u;
            float32x4_t v291 = 0u;
            float32x4_t v298 = 0u;
            float32x4_t v299 = 0u;
            float32x4_t v306 = 0u;
            float32x4_t v307 = 0u;
          }
          uint64_t v129 = v118 + v120;
          unsigned int v130 = v77[4];
          if (v130 == 127)
          {
            float32x4_t v133 = *(float32x4_t *)(v129 + 16);
            float32x4_t v134 = *(float32x4_t *)(v129 + 32);
            float32x4_t v135 = *(float32x4_t *)(v129 + 48);
            float32x4_t v136 = *(float32x4_t *)(v129 + 64);
            float32x4_t v137 = *(float32x4_t *)(v129 + 80);
            float32x4_t v138 = *(float32x4_t *)(v129 + 96);
            float32x4_t v139 = *(float32x4_t *)(v129 + 112);
            int8x16_t v252 = *(int8x16_t *)v129;
            float32x4_t v253 = v134;
            float32x4_t v260 = v133;
            float32x4_t v261 = v135;
            float32x4_t v268 = v136;
            float32x4_t v269 = v138;
            float32x4_t v276 = v137;
            float32x4_t v277 = v139;
            uint64_t v131 = 128;
          }
          else if (v130 == 3)
          {
            float32x4_t v132 = vld1q_dup_f32((const float *)v129);
            int8x16_t v252 = (int8x16_t)v132;
            float32x4_t v253 = v132;
            float32x4_t v260 = v132;
            float32x4_t v261 = v132;
            float32x4_t v268 = v132;
            float32x4_t v269 = v132;
            float32x4_t v276 = v132;
            float32x4_t v277 = v132;
            uint64_t v131 = 4;
          }
          else if (v77[4])
          {
            uint64_t v131 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v252, 128, v129, v130);
          }
          else
          {
            uint64_t v131 = 0;
            int8x16_t v252 = 0u;
            float32x4_t v253 = 0u;
            float32x4_t v260 = 0u;
            float32x4_t v261 = 0u;
            float32x4_t v268 = 0u;
            float32x4_t v269 = 0u;
            float32x4_t v276 = 0u;
            float32x4_t v277 = 0u;
          }
          uint64_t v140 = v129 + v131;
          unsigned int v141 = v77[5];
          if (v141 == 127)
          {
            float32x4_t v144 = *(float32x4_t *)(v140 + 16);
            float32x4_t v145 = *(float32x4_t *)(v140 + 32);
            float32x4_t v146 = *(float32x4_t *)(v140 + 48);
            float32x4_t v147 = *(float32x4_t *)(v140 + 64);
            float32x4_t v148 = *(float32x4_t *)(v140 + 80);
            float32x4_t v149 = *(float32x4_t *)(v140 + 96);
            float32x4_t v150 = *(float32x4_t *)(v140 + 112);
            int8x16_t v254 = *(int8x16_t *)v140;
            float32x4_t v255 = v145;
            float32x4_t v262 = v144;
            float32x4_t v263 = v146;
            float32x4_t v270 = v147;
            float32x4_t v271 = v149;
            float32x4_t v278 = v148;
            float32x4_t v279 = v150;
            uint64_t v142 = 128;
          }
          else if (v141 == 3)
          {
            float32x4_t v143 = vld1q_dup_f32((const float *)v140);
            int8x16_t v254 = (int8x16_t)v143;
            float32x4_t v255 = v143;
            float32x4_t v262 = v143;
            float32x4_t v263 = v143;
            float32x4_t v270 = v143;
            float32x4_t v271 = v143;
            float32x4_t v278 = v143;
            float32x4_t v279 = v143;
            uint64_t v142 = 4;
          }
          else if (v77[5])
          {
            uint64_t v142 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v254, 128, v140, v141);
          }
          else
          {
            uint64_t v142 = 0;
            int8x16_t v254 = 0u;
            float32x4_t v255 = 0u;
            float32x4_t v262 = 0u;
            float32x4_t v263 = 0u;
            float32x4_t v270 = 0u;
            float32x4_t v271 = 0u;
            float32x4_t v278 = 0u;
            float32x4_t v279 = 0u;
          }
          uint64_t v151 = v140 + v142;
          unsigned int v152 = v77[6];
          if (v152 == 127)
          {
            float32x4_t v155 = *(float32x4_t *)(v151 + 16);
            float32x4_t v156 = *(float32x4_t *)(v151 + 32);
            float32x4_t v157 = *(float32x4_t *)(v151 + 48);
            float32x4_t v158 = *(float32x4_t *)(v151 + 64);
            float32x4_t v159 = *(float32x4_t *)(v151 + 80);
            float32x4_t v160 = *(float32x4_t *)(v151 + 96);
            float32x4_t v161 = *(float32x4_t *)(v151 + 112);
            int8x16_t v284 = *(int8x16_t *)v151;
            float32x4_t v285 = v156;
            float32x4_t v292 = v155;
            float32x4_t v293 = v157;
            float32x4_t v300 = v158;
            float32x4_t v301 = v160;
            float32x4_t v308 = v159;
            float32x4_t v309 = v161;
            uint64_t v153 = 128;
          }
          else if (v152 == 3)
          {
            float32x4_t v154 = vld1q_dup_f32((const float *)v151);
            int8x16_t v284 = (int8x16_t)v154;
            float32x4_t v285 = v154;
            float32x4_t v292 = v154;
            float32x4_t v293 = v154;
            float32x4_t v300 = v154;
            float32x4_t v301 = v154;
            float32x4_t v308 = v154;
            float32x4_t v309 = v154;
            uint64_t v153 = 4;
          }
          else if (v77[6])
          {
            uint64_t v153 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v284, 128, v151, v152);
          }
          else
          {
            uint64_t v153 = 0;
            int8x16_t v284 = 0u;
            float32x4_t v285 = 0u;
            float32x4_t v292 = 0u;
            float32x4_t v293 = 0u;
            float32x4_t v300 = 0u;
            float32x4_t v301 = 0u;
            float32x4_t v308 = 0u;
            float32x4_t v309 = 0u;
          }
          uint64_t v162 = v151 + v153;
          unsigned int v163 = v77[7];
          if (v163 == 127)
          {
            float32x4_t v166 = *(float32x4_t *)(v162 + 16);
            float32x4_t v167 = *(float32x4_t *)(v162 + 32);
            float32x4_t v168 = *(float32x4_t *)(v162 + 48);
            float32x4_t v169 = *(float32x4_t *)(v162 + 80);
            float32x4_t v170 = *(float32x4_t *)(v162 + 96);
            float32x4_t v171 = *(float32x4_t *)(v162 + 112);
            float32x4_t v172 = *(float32x4_t *)(v162 + 64);
            int8x16_t v286 = *(int8x16_t *)v162;
            float32x4_t v287 = v167;
            float32x4_t v294 = v166;
            float32x4_t v295 = v168;
            float32x4_t v302 = v172;
            float32x4_t v303 = v170;
            float32x4_t v310 = v169;
            float32x4_t v311 = v171;
            a7 = v222;
            uint64_t v164 = v243;
            if (!v243) {
              goto LABEL_214;
            }
          }
          else
          {
            a7 = v222;
            if (v163 == 3)
            {
              float32x4_t v165 = vld1q_dup_f32((const float *)v162);
              int8x16_t v286 = (int8x16_t)v165;
              float32x4_t v287 = v165;
              float32x4_t v294 = v165;
              float32x4_t v295 = v165;
              float32x4_t v302 = v165;
              float32x4_t v303 = v165;
              float32x4_t v310 = v165;
              float32x4_t v311 = v165;
              uint64_t v164 = v243;
              if (!v243) {
                goto LABEL_214;
              }
            }
            else if (v163)
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v286, 128, v162, v163);
              uint64_t v164 = v243;
              if (!v243) {
                goto LABEL_214;
              }
            }
            else
            {
              int8x16_t v286 = 0u;
              float32x4_t v287 = 0u;
              float32x4_t v294 = 0u;
              float32x4_t v295 = 0u;
              float32x4_t v302 = 0u;
              float32x4_t v303 = 0u;
              float32x4_t v310 = 0u;
              float32x4_t v311 = 0u;
              uint64_t v164 = v243;
              if (!v243) {
                goto LABEL_214;
              }
            }
          }
          if (v244)
          {
            uint64_t v173 = 0;
            unint64_t v174 = (unint64_t)v241 << 7;
            uint64_t v175 = 8 * v242;
            unsigned int v176 = &v248.i8[v174 + v175];
            unint64_t v177 = v239;
            uint64_t v178 = v240;
            unint64_t v179 = 8 * v244;
            if (v179 <= 1) {
              unint64_t v180 = 1;
            }
            else {
              unint64_t v180 = 8 * v244;
            }
            unint64_t v181 = v174 + v175;
            uint64_t v182 = &v248.i8[v174 + v175];
            if (v180) {
              BOOL v183 = (v180 - 1) >> 32 == 0;
            }
            else {
              BOOL v183 = 0;
            }
            char v184 = !v183;
            uint64_t v185 = v180 & 0x7FFFFFFE0;
            uint64_t v186 = v180 & 0x7FFFFFFF8;
            __int32 v187 = (char *)&v249 + v181;
            int64x2_t v188 = (long long *)(v239 + 16);
            int64x2_t v189 = v176;
            unint64_t v190 = v239;
            do
            {
              int64x2_t v191 = (char *)(v177 + v178 * v173);
              int64x2_t v192 = &v176[128 * v173];
              if ((unint64_t)(&v182[128 * v173] - v191) < 0x20) {
                char v193 = 1;
              }
              else {
                char v193 = v184;
              }
              if (v193)
              {
                int v194 = 0;
                goto LABEL_211;
              }
              if (v180 >= 0x20)
              {
                unsigned int v196 = v188;
                unsigned int v197 = v187;
                uint64_t v198 = v180 & 0x7FFFFFFE0;
                do
                {
                  long long v199 = *v196;
                  *(v197 - 1) = *(v196 - 1);
                  *unsigned int v197 = v199;
                  v197 += 2;
                  v196 += 2;
                  v198 -= 32;
                }
                while (v198);
                if (v180 == v185) {
                  goto LABEL_194;
                }
                uint64_t v195 = v180 & 0x7FFFFFFE0;
                if ((v180 & 0x18) == 0)
                {
                  v191 += v185;
                  v192 += v185;
                  int v194 = v180 & 0xFFFFFFE0;
                  goto LABEL_211;
                }
              }
              else
              {
                uint64_t v195 = 0;
              }
              v192 += v186;
              unint64_t v200 = v195 - (v180 & 0x7FFFFFFF8);
              unsigned int v201 = (uint64_t *)(v190 + v195);
              unsigned int v202 = &v189[v195];
              do
              {
                uint64_t v203 = *v201++;
                *(void *)unsigned int v202 = v203;
                v202 += 8;
                v200 += 8;
              }
              while (v200);
              if (v180 == v186) {
                goto LABEL_194;
              }
              v191 += v186;
              int v194 = v180 & 0xFFFFFFF8;
LABEL_211:
              unsigned int v204 = v194 + 1;
              do
              {
                char v205 = *v191++;
                *v192++ = v205;
              }
              while (v179 > v204++);
LABEL_194:
              ++v173;
              v187 += 128;
              int64x2_t v188 = (long long *)((char *)v188 + v178);
              v190 += v178;
              v189 += 128;
            }
            while (v173 != v164);
          }
LABEL_214:
          AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)&v248, 128, (unint64_t)v237, v238, v245, v246);
LABEL_215:
          if (v234) {
            memcpy(v233, v81, 0x400uLL);
          }
          BOOL v21 = v38 == v223 >> 4;
          unsigned int v38 = v85;
          uint64_t result = v230;
        }
        while (!v21);
        BOOL v21 = v20++ == v213;
      }
      while (!v21);
    }
  }
  return result;
}

uint64_t AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, char a12)
{
  uint64_t v360 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v279 = a8;
  unsigned int v258 = a8 + a10 - 1;
  uint64_t v280 = a1;
  if (*(void *)(a1 + 168)) {
    int v17 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v17 = 0;
  }
  unsigned int v18 = a5 - 1;
  unsigned int v19 = a6 - 1;
  unsigned int v20 = a8 >> 3;
  unsigned int v257 = v258 >> 3;
  BOOL v21 = (v17 & 0xD00) == 0 || v17 == 768;
  int v22 = v17 & 0xE00;
  int v24 = !v21 && v22 != 1024;
  int v283 = v24;
  uint64_t result = a1;
  if (*(unsigned char *)(a1 + 232))
  {
    unsigned int v26 = *(unsigned __int8 *)(a1 + 255);
    unsigned int v27 = *(unsigned __int8 *)(a1 + 254);
    char v28 = __clz(v18);
    if (1 << v26 >= a6 || a5 >> v27)
    {
      if (!(a6 >> v26) && 1 << v27 < a5)
      {
        if (a6 < 2) {
          unsigned int v31 = 0;
        }
        else {
          unsigned int v31 = __clz(~(-1 << -(char)__clz(v19))) - 32;
        }
        v27 += v26 + v31;
        unsigned int v26 = -v31;
      }
    }
    else
    {
      unsigned int v29 = 32 - __clz(~(-1 << -v28));
      unsigned int v30 = v27 + v26;
      if (a5 < 2) {
        unsigned int v29 = 0;
      }
      unsigned int v26 = v30 - v29;
      unsigned int v27 = v29;
    }
    if (a5 < 2)
    {
      if (v27) {
        goto LABEL_27;
      }
    }
    else if (32 - __clz(~(-1 << -v28)) < v27)
    {
LABEL_27:
      BOOL v272 = 0;
LABEL_32:
      unsigned int v268 = v27 - 4;
      unsigned int v264 = v26 - 3;
      int v33 = -1 << *(unsigned char *)(*(void *)(a1 + 208) + 48);
      unsigned int v255 = (((~v33 + a5) & v33) + ~(-1 << v27)) >> v27;
      goto LABEL_33;
    }
    if (a6 < 2) {
      unsigned int v32 = 0;
    }
    else {
      unsigned int v32 = 32 - __clz(~(-1 << -(char)__clz(v19)));
    }
    BOOL v272 = v32 >= v26;
    goto LABEL_32;
  }
  BOOL v272 = 0;
  unsigned int v255 = 0;
  unsigned int v264 = 0;
  unsigned int v268 = 0;
LABEL_33:
  if (v20 <= v257)
  {
    unsigned int v271 = a7 + a9 - 1;
    unsigned int v254 = a7 >> 4;
    if (a7 >> 4 <= v271 >> 4)
    {
      unsigned int v282 = v18 >> 4;
      unsigned int v253 = v19 >> 3;
      int v281 = (v18 & 0xF) + 1;
      int v252 = (v19 & 7) + 1;
      int v251 = ~(-1 << v264);
      uint32x2_t v34 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0xF00000007);
      int8x8_t v35 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32(vadd_s32((int32x2_t)vshl_u32(v34, (uint32x2_t)0xFFFFFFFCFFFFFFFDLL), (int32x2_t)-1))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x2000000010, v34));
      __int32 v265 = v35.i32[0] | v35.i32[1];
      int8x8_t v263 = v35;
      BOOL v262 = v35.i32[0] != 0;
      BOOL v261 = v35.i32[1] != 0;
      uint64_t v36 = a11;
      uint64_t v37 = 4 * a11;
      uint64_t v38 = 2 * a11;
      unsigned int v270 = a7;
      do
      {
        unsigned int v39 = (8 * v20) | 7;
        if (8 * v20 <= v279) {
          int v40 = v279;
        }
        else {
          int v40 = 8 * v20;
        }
        if (v258 < v39) {
          unsigned int v39 = v258;
        }
        unsigned int v278 = 8 * v20;
        int v267 = v40 - 8 * v20;
        int v277 = v39 - v40 + 1;
        unsigned int v41 = v254;
        if (v20 == v253) {
          unsigned int v42 = v252;
        }
        else {
          unsigned int v42 = 8;
        }
        int v266 = (v20 >> v264) * v255;
        int v43 = v20 & v251;
        uint64_t v275 = a3 + (v40 - v279) * v36;
        int v276 = v20 & v251;
        unsigned int v260 = v20;
        unsigned int v259 = v42;
        do
        {
          unsigned int v44 = 16 * v41;
          unsigned int v45 = 16 * (v41 + 1) - 1;
          if (16 * v41 <= a7) {
            int v46 = a7;
          }
          else {
            int v46 = 16 * v41;
          }
          if (v271 < v45) {
            unsigned int v45 = v271;
          }
          int v47 = v45 - v46 + 1;
          if (v41 == v282) {
            unsigned int v48 = v281;
          }
          else {
            unsigned int v48 = 16;
          }
          BOOL v49 = 1;
          if (v278 >= v279 && v44 >= a7)
          {
            int v50 = v281;
            if (v41 != v282) {
              int v50 = 16;
            }
            BOOL v49 = v47 != v50 || v277 != v42;
          }
          if (v272)
          {
            if (v268 | v264)
            {
              int v52 = 0;
              uint64_t v53 = 0;
              int v54 = 1;
              BOOL v55 = v264 != 0;
              BOOL v56 = v268 != 0;
              unsigned int v57 = v264;
              unsigned int v58 = v268;
              do
              {
                --v57;
                if (v55) {
                  v53 |= (unint64_t)(v43 & v54) << v52++;
                }
                else {
                  unsigned int v57 = 0;
                }
                --v58;
                if (v56) {
                  v53 |= (unint64_t)(v41 & ~(-1 << v268) & v54) << v52++;
                }
                else {
                  unsigned int v58 = 0;
                }
                v54 *= 2;
                --v52;
                BOOL v56 = v58 != 0;
                BOOL v55 = v57 != 0;
              }
              while (v58 | v57);
            }
            else
            {
              uint64_t v53 = 0;
            }
            uint64_t v66 = *(void *)(result + 320) * ((v41 >> v268) + v266) + (v53 << 10);
          }
          else
          {
            if (v265)
            {
              int v59 = 0;
              uint64_t v60 = 0;
              int v61 = 1;
              BOOL v62 = v262;
              BOOL v63 = v261;
              __int32 v64 = v263.i32[0];
              __int32 v65 = v263.i32[1];
              do
              {
                --v64;
                if (v62) {
                  v60 |= (unint64_t)(v61 & v20) << v59++;
                }
                else {
                  __int32 v64 = 0;
                }
                --v65;
                if (v63) {
                  v60 |= (unint64_t)(v61 & v41) << v59++;
                }
                else {
                  __int32 v65 = 0;
                }
                v61 *= 2;
                --v59;
                BOOL v63 = v65 != 0;
                BOOL v62 = v64 != 0;
              }
              while (v65 | v64);
            }
            else
            {
              uint64_t v60 = 0;
            }
            uint64_t v66 = v60 << 10;
          }
          unsigned int v67 = *(_DWORD *)(result + 128) >> (*(unsigned char *)(result + 144) + a12);
          if (v67 <= 1) {
            unsigned int v67 = 1;
          }
          unsigned int v68 = v67 + 15;
          if (v68 < 0x20) {
            unsigned int v69 = 0;
          }
          else {
            unsigned int v69 = 32 - __clz(~(-1 << -(char)__clz((v68 >> 4) - 1)));
          }
          unsigned int v70 = *(_DWORD *)(result + 132) >> (*(unsigned char *)(result + 144) + a12);
          if (v70 <= 1) {
            unsigned int v70 = 1;
          }
          unsigned int v71 = v70 + 7;
          if (v71 < 0x10)
          {
            unsigned int v72 = 0;
            if (!v69)
            {
LABEL_111:
              uint64_t v74 = 0;
              goto LABEL_112;
            }
          }
          else
          {
            unsigned int v72 = 32 - __clz(~(-1 << -(char)__clz((v71 >> 3) - 1)));
            if (!(v72 | v69)) {
              goto LABEL_111;
            }
          }
          int v73 = 0;
          uint64_t v74 = 0;
          BOOL v75 = v69 != 0;
          BOOL v76 = v72 != 0;
          int v77 = 1;
          do
          {
            --v69;
            if (v75) {
              v74 |= (unint64_t)(v77 & v41) << v73++;
            }
            else {
              unsigned int v69 = 0;
            }
            --v72;
            if (v76) {
              v74 |= (unint64_t)(v77 & v20) << v73++;
            }
            else {
              unsigned int v72 = 0;
            }
            v77 *= 2;
            --v73;
            BOOL v76 = v72 != 0;
            BOOL v75 = v69 != 0;
          }
          while (v72 | v69);
LABEL_112:
          unsigned int v78 = v46 - a7;
          int v79 = v48 < 0x10 || v49;
          int v80 = (char *)(a4 + 8 * v74);
          uint64_t v81 = v275 + 8 * v78;
          uint64_t v82 = (int8x16_t *)(a2 + v66);
          if (v42 < 8) {
            int v83 = 1;
          }
          else {
            int v83 = v79;
          }
          if (v283)
          {
            if (v83)
            {
              uint64_t v84 = v36;
              int v85 = v47;
              BOOL v86 = v49;
              int v87 = v46;
              memcpy(__dst, v82, sizeof(__dst));
              int v46 = v87;
              BOOL v49 = v86;
              unsigned int v20 = v260;
              unsigned int v44 = 16 * v41;
              unsigned int v42 = v259;
              int v47 = v85;
              uint64_t v36 = v84;
              float32x4_t v88 = (int8x16_t *)__dst;
              uint64_t result = v280;
LABEL_122:
              float32x4_t v269 = v82;
              block[0] = MEMORY[0x263EF8330];
              block[1] = 3221225472;
              block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE12ELj2ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
              block[3] = &__block_descriptor_90_e5_v8__0l;
              block[4] = result;
              float32x4_t v285 = v88;
              unsigned __int8 v293 = v48;
              unsigned __int8 v294 = v42;
              unsigned int v289 = v267;
              unsigned int v290 = v46 - v44;
              int8x16_t v286 = v80;
              uint64_t v287 = v81;
              uint64_t v288 = v36;
              unsigned int v291 = v277;
              unsigned int v292 = v47;
              if (v49)
              {
                dispatch_sync(*(dispatch_queue_t *)(*(void *)(result + 8) + 7384), block);
                uint64_t result = v280;
                a7 = v270;
                uint64_t v38 = 2 * a11;
                uint64_t v37 = 4 * a11;
                int v43 = v276;
                unsigned int v89 = v41 + 1;
                goto LABEL_242;
              }
              unsigned int v110 = *v80;
              if (v110 == 127)
              {
                float32x4_t v113 = (float32x4_t)v88[1];
                float32x4_t v114 = (float32x4_t)v88[2];
                float32x4_t v115 = (float32x4_t)v88[3];
                float32x4_t v116 = (float32x4_t)v88[4];
                float32x4_t v117 = (float32x4_t)v88[5];
                float32x4_t v118 = (float32x4_t)v88[6];
                float32x4_t v119 = (float32x4_t)v88[7];
                int8x16_t v296 = *v88;
                float32x4_t v297 = v114;
                float32x4_t v304 = v113;
                float32x4_t v305 = v115;
                float32x4_t v312 = v116;
                float32x4_t v313 = v118;
                float32x4_t v320 = v117;
                float32x4_t v321 = v119;
                uint64_t v111 = 128;
              }
              else if (v110 == 3)
              {
                float32x4_t v112 = vld1q_dup_f32((const float *)v88->i32);
                int8x16_t v296 = (int8x16_t)v112;
                float32x4_t v297 = v112;
                float32x4_t v304 = v112;
                float32x4_t v305 = v112;
                float32x4_t v312 = v112;
                float32x4_t v313 = v112;
                float32x4_t v320 = v112;
                float32x4_t v321 = v112;
                uint64_t v111 = 4;
              }
              else if (*v80)
              {
                uint64_t v111 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v296, 128, (uint64_t)v88, v110);
              }
              else
              {
                uint64_t v111 = 0;
                float32x4_t v297 = 0u;
                int8x16_t v296 = 0u;
                float32x4_t v304 = 0u;
                float32x4_t v305 = 0u;
                float32x4_t v312 = 0u;
                float32x4_t v313 = 0u;
                float32x4_t v320 = 0u;
                float32x4_t v321 = 0u;
              }
              uint64_t v120 = (uint64_t)v88->i64 + v111;
              unsigned int v121 = v80[1];
              if (v121 == 127)
              {
                float32x4_t v124 = *(float32x4_t *)(v120 + 16);
                float32x4_t v125 = *(float32x4_t *)(v120 + 32);
                float32x4_t v126 = *(float32x4_t *)(v120 + 48);
                float32x4_t v127 = *(float32x4_t *)(v120 + 64);
                float32x4_t v128 = *(float32x4_t *)(v120 + 80);
                float32x4_t v129 = *(float32x4_t *)(v120 + 96);
                float32x4_t v130 = *(float32x4_t *)(v120 + 112);
                int8x16_t v298 = *(int8x16_t *)v120;
                float32x4_t v299 = v125;
                float32x4_t v306 = v124;
                float32x4_t v307 = v126;
                float32x4_t v314 = v127;
                float32x4_t v315 = v129;
                float32x4_t v322 = v128;
                float32x4_t v323 = v130;
                uint64_t v122 = 128;
              }
              else if (v121 == 3)
              {
                float32x4_t v123 = vld1q_dup_f32((const float *)v120);
                int8x16_t v298 = (int8x16_t)v123;
                float32x4_t v299 = v123;
                float32x4_t v306 = v123;
                float32x4_t v307 = v123;
                float32x4_t v314 = v123;
                float32x4_t v315 = v123;
                float32x4_t v322 = v123;
                float32x4_t v323 = v123;
                uint64_t v122 = 4;
              }
              else if (v80[1])
              {
                uint64_t v122 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v298, 128, v120, v121);
              }
              else
              {
                uint64_t v122 = 0;
                int8x16_t v298 = 0u;
                float32x4_t v299 = 0u;
                float32x4_t v306 = 0u;
                float32x4_t v307 = 0u;
                float32x4_t v314 = 0u;
                float32x4_t v315 = 0u;
                float32x4_t v322 = 0u;
                float32x4_t v323 = 0u;
              }
              uint64_t v131 = v120 + v122;
              unsigned int v132 = v80[2];
              if (v132 == 127)
              {
                float32x4_t v135 = *(float32x4_t *)(v131 + 16);
                float32x4_t v136 = *(float32x4_t *)(v131 + 32);
                float32x4_t v137 = *(float32x4_t *)(v131 + 48);
                float32x4_t v138 = *(float32x4_t *)(v131 + 64);
                float32x4_t v139 = *(float32x4_t *)(v131 + 80);
                float32x4_t v140 = *(float32x4_t *)(v131 + 96);
                float32x4_t v141 = *(float32x4_t *)(v131 + 112);
                int8x16_t v328 = *(int8x16_t *)v131;
                float32x4_t v329 = v136;
                float32x4_t v336 = v135;
                float32x4_t v337 = v137;
                float32x4_t v344 = v138;
                float32x4_t v345 = v140;
                float32x4_t v352 = v139;
                float32x4_t v353 = v141;
                uint64_t v133 = 128;
              }
              else if (v132 == 3)
              {
                float32x4_t v134 = vld1q_dup_f32((const float *)v131);
                int8x16_t v328 = (int8x16_t)v134;
                float32x4_t v329 = v134;
                float32x4_t v336 = v134;
                float32x4_t v337 = v134;
                float32x4_t v344 = v134;
                float32x4_t v345 = v134;
                float32x4_t v352 = v134;
                float32x4_t v353 = v134;
                uint64_t v133 = 4;
              }
              else if (v80[2])
              {
                uint64_t v133 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v328, 128, v131, v132);
              }
              else
              {
                uint64_t v133 = 0;
                int8x16_t v328 = 0u;
                float32x4_t v329 = 0u;
                float32x4_t v336 = 0u;
                float32x4_t v337 = 0u;
                float32x4_t v344 = 0u;
                float32x4_t v345 = 0u;
                float32x4_t v352 = 0u;
                float32x4_t v353 = 0u;
              }
              uint64_t v142 = v131 + v133;
              unsigned int v143 = v80[3];
              if (v143 == 127)
              {
                float32x4_t v146 = *(float32x4_t *)(v142 + 16);
                float32x4_t v147 = *(float32x4_t *)(v142 + 32);
                float32x4_t v148 = *(float32x4_t *)(v142 + 48);
                float32x4_t v149 = *(float32x4_t *)(v142 + 64);
                float32x4_t v150 = *(float32x4_t *)(v142 + 80);
                float32x4_t v151 = *(float32x4_t *)(v142 + 96);
                float32x4_t v152 = *(float32x4_t *)(v142 + 112);
                int8x16_t v330 = *(int8x16_t *)v142;
                float32x4_t v331 = v147;
                float32x4_t v338 = v146;
                float32x4_t v339 = v148;
                float32x4_t v346 = v149;
                float32x4_t v347 = v151;
                float32x4_t v354 = v150;
                float32x4_t v355 = v152;
                uint64_t v144 = 128;
              }
              else if (v143 == 3)
              {
                float32x4_t v145 = vld1q_dup_f32((const float *)v142);
                int8x16_t v330 = (int8x16_t)v145;
                float32x4_t v331 = v145;
                float32x4_t v338 = v145;
                float32x4_t v339 = v145;
                float32x4_t v346 = v145;
                float32x4_t v347 = v145;
                float32x4_t v354 = v145;
                float32x4_t v355 = v145;
                uint64_t v144 = 4;
              }
              else if (v80[3])
              {
                uint64_t v144 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v330, 128, v142, v143);
              }
              else
              {
                uint64_t v144 = 0;
                int8x16_t v330 = 0u;
                float32x4_t v331 = 0u;
                float32x4_t v338 = 0u;
                float32x4_t v339 = 0u;
                float32x4_t v346 = 0u;
                float32x4_t v347 = 0u;
                float32x4_t v354 = 0u;
                float32x4_t v355 = 0u;
              }
              uint64_t v153 = v142 + v144;
              unsigned int v154 = v80[4];
              if (v154 == 127)
              {
                float32x4_t v157 = *(float32x4_t *)(v153 + 16);
                float32x4_t v158 = *(float32x4_t *)(v153 + 32);
                float32x4_t v159 = *(float32x4_t *)(v153 + 48);
                float32x4_t v160 = *(float32x4_t *)(v153 + 64);
                float32x4_t v161 = *(float32x4_t *)(v153 + 80);
                float32x4_t v162 = *(float32x4_t *)(v153 + 96);
                float32x4_t v163 = *(float32x4_t *)(v153 + 112);
                int8x16_t v300 = *(int8x16_t *)v153;
                float32x4_t v301 = v158;
                float32x4_t v308 = v157;
                float32x4_t v309 = v159;
                float32x4_t v316 = v160;
                float32x4_t v317 = v162;
                float32x4_t v324 = v161;
                float32x4_t v325 = v163;
                uint64_t v155 = 128;
              }
              else if (v154 == 3)
              {
                float32x4_t v156 = vld1q_dup_f32((const float *)v153);
                int8x16_t v300 = (int8x16_t)v156;
                float32x4_t v301 = v156;
                float32x4_t v308 = v156;
                float32x4_t v309 = v156;
                float32x4_t v316 = v156;
                float32x4_t v317 = v156;
                float32x4_t v324 = v156;
                float32x4_t v325 = v156;
                uint64_t v155 = 4;
              }
              else if (v80[4])
              {
                uint64_t v155 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v300, 128, v153, v154);
              }
              else
              {
                uint64_t v155 = 0;
                int8x16_t v300 = 0u;
                float32x4_t v301 = 0u;
                float32x4_t v308 = 0u;
                float32x4_t v309 = 0u;
                float32x4_t v316 = 0u;
                float32x4_t v317 = 0u;
                float32x4_t v324 = 0u;
                float32x4_t v325 = 0u;
              }
              uint64_t v164 = v153 + v155;
              unsigned int v165 = v80[5];
              if (v165 == 127)
              {
                float32x4_t v168 = *(float32x4_t *)(v164 + 16);
                float32x4_t v169 = *(float32x4_t *)(v164 + 32);
                float32x4_t v170 = *(float32x4_t *)(v164 + 48);
                float32x4_t v171 = *(float32x4_t *)(v164 + 64);
                float32x4_t v172 = *(float32x4_t *)(v164 + 80);
                float32x4_t v173 = *(float32x4_t *)(v164 + 96);
                float32x4_t v174 = *(float32x4_t *)(v164 + 112);
                int8x16_t v302 = *(int8x16_t *)v164;
                float32x4_t v303 = v169;
                float32x4_t v310 = v168;
                float32x4_t v311 = v170;
                float32x4_t v318 = v171;
                float32x4_t v319 = v173;
                float32x4_t v326 = v172;
                float32x4_t v327 = v174;
                uint64_t v166 = 128;
              }
              else if (v165 == 3)
              {
                float32x4_t v167 = vld1q_dup_f32((const float *)v164);
                int8x16_t v302 = (int8x16_t)v167;
                float32x4_t v303 = v167;
                float32x4_t v310 = v167;
                float32x4_t v311 = v167;
                float32x4_t v318 = v167;
                float32x4_t v319 = v167;
                float32x4_t v326 = v167;
                float32x4_t v327 = v167;
                uint64_t v166 = 4;
              }
              else if (v80[5])
              {
                uint64_t v166 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v302, 128, v164, v165);
              }
              else
              {
                uint64_t v166 = 0;
                int8x16_t v302 = 0u;
                float32x4_t v303 = 0u;
                float32x4_t v310 = 0u;
                float32x4_t v311 = 0u;
                float32x4_t v318 = 0u;
                float32x4_t v319 = 0u;
                float32x4_t v326 = 0u;
                float32x4_t v327 = 0u;
              }
              uint64_t v175 = v164 + v166;
              unsigned int v176 = v80[6];
              if (v176 == 127)
              {
                float32x4_t v179 = *(float32x4_t *)(v175 + 16);
                float32x4_t v180 = *(float32x4_t *)(v175 + 32);
                float32x4_t v181 = *(float32x4_t *)(v175 + 48);
                float32x4_t v182 = *(float32x4_t *)(v175 + 64);
                float32x4_t v183 = *(float32x4_t *)(v175 + 80);
                float32x4_t v184 = *(float32x4_t *)(v175 + 96);
                float32x4_t v185 = *(float32x4_t *)(v175 + 112);
                int8x16_t v332 = *(int8x16_t *)v175;
                float32x4_t v333 = v180;
                float32x4_t v340 = v179;
                float32x4_t v341 = v181;
                float32x4_t v348 = v182;
                float32x4_t v349 = v184;
                float32x4_t v356 = v183;
                float32x4_t v357 = v185;
                uint64_t v177 = 128;
              }
              else if (v176 == 3)
              {
                float32x4_t v178 = vld1q_dup_f32((const float *)v175);
                int8x16_t v332 = (int8x16_t)v178;
                float32x4_t v333 = v178;
                float32x4_t v340 = v178;
                float32x4_t v341 = v178;
                float32x4_t v348 = v178;
                float32x4_t v349 = v178;
                float32x4_t v356 = v178;
                float32x4_t v357 = v178;
                uint64_t v177 = 4;
              }
              else if (v80[6])
              {
                uint64_t v177 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v332, 128, v175, v176);
              }
              else
              {
                uint64_t v177 = 0;
                int8x16_t v332 = 0u;
                float32x4_t v333 = 0u;
                float32x4_t v340 = 0u;
                float32x4_t v341 = 0u;
                float32x4_t v348 = 0u;
                float32x4_t v349 = 0u;
                float32x4_t v356 = 0u;
                float32x4_t v357 = 0u;
              }
              uint64_t v186 = v175 + v177;
              unsigned int v187 = v80[7];
              if (v187 == 127)
              {
                float32x4_t v190 = *(float32x4_t *)(v186 + 16);
                float32x4_t v191 = *(float32x4_t *)(v186 + 32);
                float32x4_t v192 = *(float32x4_t *)(v186 + 48);
                float32x4_t v193 = *(float32x4_t *)(v186 + 80);
                float32x4_t v194 = *(float32x4_t *)(v186 + 96);
                float32x4_t v195 = *(float32x4_t *)(v186 + 112);
                float32x4_t v196 = *(float32x4_t *)(v186 + 64);
                int8x16_t v334 = *(int8x16_t *)v186;
                float32x4_t v335 = v191;
                float32x4_t v342 = v190;
                float32x4_t v343 = v192;
                float32x4_t v350 = v196;
                float32x4_t v351 = v194;
                float32x4_t v358 = v193;
                float32x4_t v359 = v195;
                a7 = v270;
                uint64_t v188 = v291;
                if (v291) {
                  goto LABEL_198;
                }
              }
              else
              {
                a7 = v270;
                if (v187 != 3)
                {
                  if (v187)
                  {
                    AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v334, 128, v186, v187);
                    uint64_t v188 = v291;
                    if (!v291) {
                      goto LABEL_229;
                    }
                  }
                  else
                  {
                    int8x16_t v334 = 0u;
                    float32x4_t v335 = 0u;
                    float32x4_t v342 = 0u;
                    float32x4_t v343 = 0u;
                    float32x4_t v350 = 0u;
                    float32x4_t v351 = 0u;
                    float32x4_t v358 = 0u;
                    float32x4_t v359 = 0u;
                    uint64_t v188 = v291;
                    if (!v291) {
                      goto LABEL_229;
                    }
                  }
LABEL_198:
                  if (!v292) {
                    goto LABEL_229;
                  }
                  uint64_t v197 = 0;
                  unint64_t v198 = (unint64_t)v289 << 7;
                  uint64_t v199 = 8 * v290;
                  unint64_t v200 = &v296.i8[v198 + v199];
                  uint64_t v201 = v287;
                  uint64_t v202 = v288;
                  unint64_t v203 = 8 * v292;
                  if (v203 <= 1) {
                    unint64_t v204 = 1;
                  }
                  else {
                    unint64_t v204 = 8 * v292;
                  }
                  unint64_t v205 = v198 + v199;
                  int v206 = &v296.i8[v198 + v199];
                  if (v204) {
                    BOOL v207 = (v204 - 1) >> 32 == 0;
                  }
                  else {
                    BOOL v207 = 0;
                  }
                  char v208 = !v207;
                  uint64_t v209 = v204 & 0x7FFFFFFE0;
                  uint64_t v210 = v204 & 0x7FFFFFFF8;
                  unsigned int v211 = (char *)&v297 + v205;
                  int v212 = (long long *)(v287 + 16);
                  unsigned int v213 = v200;
                  uint64_t v214 = v287;
                  while (2)
                  {
                    BOOL v215 = (char *)(v201 + v202 * v197);
                    BOOL v216 = &v200[128 * v197];
                    if ((unint64_t)(&v206[128 * v197] - v215) < 0x20) {
                      char v217 = 1;
                    }
                    else {
                      char v217 = v208;
                    }
                    if (v217)
                    {
                      int v218 = 0;
LABEL_226:
                      unsigned int v228 = v218 + 1;
                      do
                      {
                        char v229 = *v215++;
                        *v216++ = v229;
                      }
                      while (v203 > v228++);
                    }
                    else
                    {
                      if (v204 >= 0x20)
                      {
                        int v220 = v212;
                        unsigned int v221 = v211;
                        uint64_t v222 = v204 & 0x7FFFFFFE0;
                        do
                        {
                          long long v223 = *v220;
                          *(v221 - 1) = *(v220 - 1);
                          *unsigned int v221 = v223;
                          v221 += 2;
                          v220 += 2;
                          v222 -= 32;
                        }
                        while (v222);
                        if (v204 == v209) {
                          goto LABEL_209;
                        }
                        uint64_t v219 = v204 & 0x7FFFFFFE0;
                        if ((v204 & 0x18) == 0)
                        {
                          v215 += v209;
                          v216 += v209;
                          int v218 = v204 & 0xFFFFFFE0;
                          goto LABEL_226;
                        }
                      }
                      else
                      {
                        uint64_t v219 = 0;
                      }
                      v216 += v210;
                      unint64_t v224 = v219 - (v204 & 0x7FFFFFFF8);
                      int v225 = (uint64_t *)(v214 + v219);
                      float64x2_t v226 = &v213[v219];
                      do
                      {
                        uint64_t v227 = *v225++;
                        *(void *)float64x2_t v226 = v227;
                        v226 += 8;
                        v224 += 8;
                      }
                      while (v224);
                      if (v204 != v210)
                      {
                        v215 += v210;
                        int v218 = v204 & 0xFFFFFFF8;
                        goto LABEL_226;
                      }
                    }
LABEL_209:
                    ++v197;
                    v211 += 128;
                    int v212 = (long long *)((char *)v212 + v202);
                    v214 += v202;
                    v213 += 128;
                    if (v197 == v188) {
                      goto LABEL_229;
                    }
                    continue;
                  }
                }
                float32x4_t v189 = vld1q_dup_f32((const float *)v186);
                int8x16_t v334 = (int8x16_t)v189;
                float32x4_t v335 = v189;
                float32x4_t v342 = v189;
                float32x4_t v343 = v189;
                float32x4_t v350 = v189;
                float32x4_t v351 = v189;
                float32x4_t v358 = v189;
                float32x4_t v359 = v189;
                uint64_t v188 = v291;
                if (v291) {
                  goto LABEL_198;
                }
              }
LABEL_229:
              uint64_t v231 = 0;
              unsigned int v232 = v285;
              uint64_t v233 = v286;
              int v234 = v293;
              int v235 = v294;
              uint64_t result = v280;
              uint64_t v38 = 2 * a11;
              int v43 = v276;
              unsigned int v89 = v41 + 1;
              do
              {
                uint64_t v246 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,2u>::kSubblockPositions[v231 + 1];
                uint64_t v247 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,2u>::kSubblockPositions[v231];
                unsigned int v248 = (v234 - 4 * v247) & ~((v234 - 4 * (int)v247) >> 31);
                if (v248 >= 4) {
                  unsigned int v248 = 4;
                }
                unsigned int v249 = (v235 - 4 * v246) & ~((v235 - 4 * (int)v246) >> 31);
                if (v249 >= 4) {
                  unsigned int v249 = 4;
                }
                if (v248) {
                  BOOL v250 = v249 == 0;
                }
                else {
                  BOOL v250 = 1;
                }
                if (v250)
                {
                  char v245 = 0;
                }
                else
                {
                  int v236 = &v296 + 32 * v246 + 2 * v247;
                  int8x16_t v237 = *v236;
                  int8x16_t v238 = v236[1];
                  int8x16_t v239 = v236[8];
                  int8x16_t v240 = v236[9];
                  int8x16_t v241 = v236[16];
                  int8x16_t v242 = v236[17];
                  v236 += 24;
                  int8x16_t v243 = *v236;
                  int8x16_t v244 = v236[1];
                  *unsigned int v232 = v237;
                  v232[1] = v239;
                  v232[2] = v238;
                  v232[3] = v240;
                  v232[4] = v241;
                  v232[5] = v243;
                  v232[6] = v242;
                  v232[7] = v244;
                  v232 += 8;
                  char v245 = 127;
                }
                *v233++ = v245;
                v231 += 2;
              }
              while (v231 != 16);
              uint64_t v37 = 4 * a11;
LABEL_242:
              uint64_t v82 = v269;
              if (v283) {
                goto LABEL_47;
              }
              goto LABEL_48;
            }
            float32x4_t v88 = (int8x16_t *)__dst;
          }
          else
          {
            float32x4_t v88 = v82;
            if (v83) {
              goto LABEL_122;
            }
          }
          uint64_t v90 = 0;
          float32x4_t v91 = v88;
          do
          {
            uint64_t v105 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,2u>::kSubblockPositions[v90 + 1];
            uint64_t v106 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,2u>::kSubblockPositions[v90];
            unsigned int v107 = (v48 - 4 * v106) & ~((int)(v48 - 4 * v106) >> 31);
            if (v107 >= 4) {
              unsigned int v107 = 4;
            }
            unsigned int v108 = (v42 - 4 * v105) & ~((int)(v42 - 4 * v105) >> 31);
            if (v108 >= 4) {
              unsigned int v108 = 4;
            }
            if (v107) {
              BOOL v109 = v108 == 0;
            }
            else {
              BOOL v109 = 1;
            }
            if (v109)
            {
              char v104 = 0;
            }
            else
            {
              float32x4_t v92 = (long long *)(v81 + v37 * v105 + 32 * v106);
              float32x4_t v93 = (long long *)((char *)v92 + v36);
              long long v95 = *v92;
              long long v96 = v92[1];
              float32x4_t v94 = (long long *)((char *)v92 + v38);
              long long v97 = *v93;
              long long v98 = v93[1];
              long long v100 = *v94;
              long long v101 = v94[1];
              float32x4_t v99 = (long long *)((char *)v94 + v36);
              long long v102 = *v99;
              long long v103 = v99[1];
              *float32x4_t v91 = (int8x16_t)v95;
              v91[1] = (int8x16_t)v97;
              v91[2] = (int8x16_t)v96;
              v91[3] = (int8x16_t)v98;
              v91[4] = (int8x16_t)v100;
              v91[5] = (int8x16_t)v102;
              v91[6] = (int8x16_t)v101;
              v91[7] = (int8x16_t)v103;
              v91 += 8;
              char v104 = 127;
            }
            *v80++ = v104;
            v90 += 2;
          }
          while (v90 != 16);
          a7 = v270;
          int v43 = v276;
          unsigned int v89 = v41 + 1;
          if (v283)
          {
LABEL_47:
            memcpy(v82, v88, 0x400uLL);
            uint64_t v38 = 2 * a11;
            uint64_t v37 = 4 * a11;
            uint64_t result = v280;
          }
LABEL_48:
          BOOL v21 = v41 == v271 >> 4;
          unsigned int v41 = v89;
        }
        while (!v21);
        BOOL v21 = v20++ == v257;
      }
      while (!v21);
    }
  }
  return result;
}

void *AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, int a12)
{
  uint64_t v311 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  uint64_t v17 = a1;
  unsigned int v228 = a8;
  unsigned int v18 = a8 >> 3;
  unsigned int v212 = a8 + a10 - 1;
  unsigned int v214 = v212 >> 3;
  unsigned int v19 = *(unsigned __int8 *)(*(void *)(a1 + 208) + 88);
  unsigned int v20 = *(_DWORD *)(a1 + 112);
  uint64_t v229 = v17;
  if (*(void *)(v17 + 168))
  {
    __int16 CacheMode = IOSurfaceGetCacheMode();
    uint64_t v17 = v229;
    int v22 = CacheMode & 0xF00;
  }
  else
  {
    int v22 = 0;
  }
  BOOL v23 = (v22 & 0xD00) == 0 || v22 == 768;
  int v24 = v22 & 0xE00;
  int v26 = !v23 && v24 != 1024;
  int v233 = v26;
  uint64_t result = (void *)AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::isLevelTiled(v17, *(_DWORD *)(v17 + 144) + a12);
  uint64_t v28 = v229;
  int v222 = (int)result;
  if (v18 <= v214)
  {
    unsigned int v221 = a7 + a9 - 1;
    unsigned int v211 = a7 >> 4;
    if (a7 >> 4 <= v221 >> 4)
    {
      unsigned int v208 = a5 - 1;
      unsigned int v231 = (a5 - 1) >> 4;
      int v230 = ((a5 - 1) & 0xF) + 1;
      int v209 = ((a6 - 1) & 7) + 1;
      unsigned int v210 = (a6 - 1) >> 3;
      uint32x2_t v29 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0xF00000007);
      int8x8_t v30 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32(vadd_s32((int32x2_t)vshl_u32(v29, (uint32x2_t)0xFFFFFFFCFFFFFFFDLL), (int32x2_t)-1))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x2000000010, v29));
      __int32 v219 = v30.i32[0] | v30.i32[1];
      int8x8_t v218 = v30;
      BOOL v217 = v30.i32[0] != 0;
      BOOL v216 = v30.i32[1] != 0;
      unint64_t v207 = 8 * v20 * (unint64_t)v19;
      unsigned int v220 = a7;
      do
      {
        unsigned int v31 = (8 * v18) | 7;
        if (8 * v18 <= v228) {
          int v32 = v228;
        }
        else {
          int v32 = 8 * v18;
        }
        unsigned int v33 = v211;
        if (v212 < v31) {
          unsigned int v31 = v212;
        }
        unsigned int v227 = 8 * v18;
        int v215 = v32 - 8 * v18;
        int v226 = v31 - v32 + 1;
        int v34 = v209;
        if (v18 != v210) {
          int v34 = 8;
        }
        unsigned int v234 = v34;
        uint64_t v225 = a3 + (v32 - v228) * a11;
        do
        {
          unsigned int v35 = 16 * v33;
          unsigned int v36 = 16 * (v33 + 1) - 1;
          if (16 * v33 <= a7) {
            int v37 = a7;
          }
          else {
            int v37 = 16 * v33;
          }
          if (v221 < v36) {
            unsigned int v36 = v221;
          }
          int v38 = v36 - v37 + 1;
          if (v33 == v231) {
            unsigned int v39 = v230;
          }
          else {
            unsigned int v39 = 16;
          }
          BOOL v40 = 1;
          if (v227 >= v228 && v35 >= a7)
          {
            int v41 = v230;
            if (v33 != v231) {
              int v41 = 16;
            }
            BOOL v40 = v38 != v41 || v226 != v234;
          }
          if (v222)
          {
            unsigned int v62 = 0;
            uint64_t v63 = v207 >> (*(unsigned char *)(v28 + 57) != 0);
            char v64 = 1;
            if (v63 > 127)
            {
              if (v63 > 511)
              {
                if (v63 == 512)
                {
                  char v65 = 0;
                  unsigned int v62 = 16;
                  unsigned int v66 = 16;
                }
                else
                {
                  char v65 = 1;
                  unsigned int v66 = 0;
                  if (v63 == 1024)
                  {
                    unsigned int v66 = 8;
                    unsigned int v62 = 16;
                  }
                }
              }
              else if (v63 == 128)
              {
                char v64 = 0;
                char v65 = 0;
                unsigned int v62 = 32;
                unsigned int v66 = 32;
              }
              else
              {
                char v65 = 1;
                unsigned int v66 = 0;
                if (v63 == 256)
                {
                  char v64 = 0;
                  char v65 = 0;
                  unsigned int v66 = 16;
                  unsigned int v62 = 32;
                }
              }
            }
            else
            {
              char v65 = 1;
              unsigned int v66 = 0;
              switch(v63)
              {
                case 4:
                  char v64 = 0;
                  char v65 = 0;
                  unsigned int v66 = 128;
                  unsigned int v62 = 256;
                  break;
                case 5:
                case 6:
                case 7:
                case 9:
                case 10:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 17:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                  break;
                case 8:
                  char v64 = 0;
                  char v65 = 0;
                  unsigned int v62 = 128;
                  unsigned int v66 = 128;
                  break;
                case 16:
                  char v64 = 0;
                  char v65 = 0;
                  unsigned int v66 = 64;
                  unsigned int v62 = 128;
                  break;
                case 32:
                  char v64 = 0;
                  char v65 = 0;
                  unsigned int v62 = 64;
                  unsigned int v66 = 64;
                  break;
                default:
                  if (v63 == 64)
                  {
                    char v64 = 0;
                    char v65 = 0;
                    unsigned int v66 = 32;
                    unsigned int v62 = 64;
                  }
                  break;
              }
            }
            unsigned int v196 = (v62 >> 4) - 1;
            if (v64) {
              unsigned int v197 = 0;
            }
            else {
              unsigned int v197 = 32 - __clz(~(-1 << -(char)__clz(v196)));
            }
            unsigned int v198 = (v66 >> 3) - 1;
            if (v65)
            {
              unsigned int v199 = 0;
              if (v197) {
                goto LABEL_206;
              }
            }
            else
            {
              unsigned int v199 = 32 - __clz(~(-1 << -(char)__clz(v198)));
              if (v199 | v197)
              {
LABEL_206:
                int v200 = 0;
                uint64_t v201 = 0;
                int v202 = v33 & v196;
                int v203 = v18 & v198;
                BOOL v204 = v199 != 0;
                BOOL v205 = v197 != 0;
                int v206 = 1;
                do
                {
                  --v199;
                  if (v204) {
                    v201 |= (unint64_t)(v206 & v203) << v200++;
                  }
                  else {
                    unsigned int v199 = 0;
                  }
                  --v197;
                  if (v205) {
                    v201 |= (unint64_t)(v206 & v202) << v200++;
                  }
                  else {
                    unsigned int v197 = 0;
                  }
                  v206 *= 2;
                  --v200;
                  BOOL v205 = v197 != 0;
                  BOOL v204 = v199 != 0;
                }
                while (v197 | v199);
                goto LABEL_218;
              }
            }
            uint64_t v201 = 0;
LABEL_218:
            unint64_t v50 = ((unint64_t)(v35 / v62 + v227 / v66 * ((v62 + v208) / v62)) << 14) + (v201 << 10);
            goto LABEL_58;
          }
          if (v219)
          {
            int v43 = 0;
            uint64_t v44 = 0;
            int v45 = 1;
            BOOL v46 = v217;
            BOOL v47 = v216;
            __int32 v48 = v218.i32[0];
            __int32 v49 = v218.i32[1];
            do
            {
              --v48;
              if (v46) {
                v44 |= (unint64_t)(v45 & v18) << v43++;
              }
              else {
                __int32 v48 = 0;
              }
              --v49;
              if (v47) {
                v44 |= (unint64_t)(v45 & v33) << v43++;
              }
              else {
                __int32 v49 = 0;
              }
              v45 *= 2;
              --v43;
              BOOL v47 = v49 != 0;
              BOOL v46 = v48 != 0;
            }
            while (v49 | v48);
          }
          else
          {
            uint64_t v44 = 0;
          }
          unint64_t v50 = v44 << 10;
LABEL_58:
          unsigned int v51 = *(_DWORD *)(v28 + 128) >> (*(unsigned char *)(v28 + 144) + a12);
          if (v51 <= 1) {
            unsigned int v51 = 1;
          }
          unsigned int v52 = v51 + 15;
          if (v52 < 0x20) {
            unsigned int v53 = 0;
          }
          else {
            unsigned int v53 = 32 - __clz(~(-1 << -(char)__clz((v52 >> 4) - 1)));
          }
          unsigned int v54 = *(_DWORD *)(v28 + 132) >> (*(unsigned char *)(v28 + 144) + a12);
          if (v54 <= 1) {
            unsigned int v54 = 1;
          }
          unsigned int v55 = v54 + 7;
          if (v55 < 0x10)
          {
            unsigned int v56 = 0;
            if (!v53)
            {
LABEL_80:
              uint64_t v58 = 0;
              goto LABEL_81;
            }
          }
          else
          {
            unsigned int v56 = 32 - __clz(~(-1 << -(char)__clz((v55 >> 3) - 1)));
            if (!(v56 | v53)) {
              goto LABEL_80;
            }
          }
          int v57 = 0;
          uint64_t v58 = 0;
          BOOL v59 = v53 != 0;
          BOOL v60 = v56 != 0;
          int v61 = 1;
          do
          {
            --v53;
            if (v59) {
              v58 |= (unint64_t)(v61 & v33) << v57++;
            }
            else {
              unsigned int v53 = 0;
            }
            --v56;
            if (v60) {
              v58 |= (unint64_t)(v61 & v18) << v57++;
            }
            else {
              unsigned int v56 = 0;
            }
            v61 *= 2;
            --v57;
            BOOL v60 = v56 != 0;
            BOOL v59 = v53 != 0;
          }
          while (v56 | v53);
LABEL_81:
          int v67 = v39 < 0x10 || v40;
          unsigned int v68 = (char *)(a4 + 8 * v58);
          unint64_t v69 = v225 + 8 * (v37 - a7);
          unsigned int v70 = (float32x4_t *)(a2 + v50);
          if (v234 < 8) {
            int v71 = 1;
          }
          else {
            int v71 = v67;
          }
          unsigned int v232 = v70;
          if (v233)
          {
            unsigned int v72 = (float32x4_t *)__dst;
            if (!v71) {
              goto LABEL_93;
            }
            char v73 = v39;
            int v74 = v37;
            memcpy(__dst, v70, sizeof(__dst));
            unsigned int v35 = 16 * v33;
            int v37 = v74;
            LOBYTE(v39) = v73;
            uint64_t v28 = v229;
          }
          else
          {
            unsigned int v72 = v70;
            if (!v71)
            {
LABEL_93:
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock(v69, a11, (unint64_t)v72, v68, v39, v234);
              goto LABEL_94;
            }
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE12ELj2ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = v28;
          int v236 = v72;
          unsigned __int8 v244 = v39;
          unsigned __int8 v245 = v234;
          unsigned int v240 = v215;
          unsigned int v241 = v37 - v35;
          int8x16_t v237 = v68;
          unint64_t v238 = v69;
          uint64_t v239 = a11;
          unsigned int v242 = v226;
          unsigned int v243 = v38;
          if (v40)
          {
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(v28 + 8) + 7384), block);
LABEL_94:
            a7 = v220;
            goto LABEL_186;
          }
          unsigned int v75 = *v68;
          a7 = v220;
          if (v75 == 127)
          {
            float32x4_t v78 = v72[1];
            float32x4_t v79 = v72[2];
            float32x4_t v80 = v72[3];
            float32x4_t v81 = v72[4];
            float32x4_t v82 = v72[5];
            float32x4_t v83 = v72[6];
            float32x4_t v84 = v72[7];
            int8x16_t v247 = *(int8x16_t *)v72;
            float32x4_t v248 = v79;
            float32x4_t v255 = v78;
            float32x4_t v256 = v80;
            float32x4_t v263 = v81;
            float32x4_t v264 = v83;
            float32x4_t v271 = v82;
            float32x4_t v272 = v84;
            uint64_t v76 = 128;
          }
          else if (v75 == 3)
          {
            float32x4_t v77 = vld1q_dup_f32(v72->f32);
            int8x16_t v247 = (int8x16_t)v77;
            float32x4_t v248 = v77;
            float32x4_t v255 = v77;
            float32x4_t v256 = v77;
            float32x4_t v263 = v77;
            float32x4_t v264 = v77;
            float32x4_t v271 = v77;
            float32x4_t v272 = v77;
            uint64_t v76 = 4;
          }
          else if (*v68)
          {
            uint64_t v76 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v247, 128, (uint64_t)v72, v75);
          }
          else
          {
            uint64_t v76 = 0;
            float32x4_t v248 = 0u;
            int8x16_t v247 = 0u;
            float32x4_t v255 = 0u;
            float32x4_t v256 = 0u;
            float32x4_t v263 = 0u;
            float32x4_t v264 = 0u;
            float32x4_t v271 = 0u;
            float32x4_t v272 = 0u;
          }
          uint64_t v85 = (uint64_t)v72 + v76;
          unsigned int v86 = v68[1];
          if (v86 == 127)
          {
            float32x4_t v89 = *(float32x4_t *)(v85 + 16);
            float32x4_t v90 = *(float32x4_t *)(v85 + 32);
            float32x4_t v91 = *(float32x4_t *)(v85 + 48);
            float32x4_t v92 = *(float32x4_t *)(v85 + 64);
            float32x4_t v93 = *(float32x4_t *)(v85 + 80);
            float32x4_t v94 = *(float32x4_t *)(v85 + 96);
            float32x4_t v95 = *(float32x4_t *)(v85 + 112);
            int8x16_t v249 = *(int8x16_t *)v85;
            float32x4_t v250 = v90;
            float32x4_t v257 = v89;
            float32x4_t v258 = v91;
            float32x4_t v265 = v92;
            float32x4_t v266 = v94;
            float32x4_t v273 = v93;
            float32x4_t v274 = v95;
            uint64_t v87 = 128;
          }
          else if (v86 == 3)
          {
            float32x4_t v88 = vld1q_dup_f32((const float *)v85);
            int8x16_t v249 = (int8x16_t)v88;
            float32x4_t v250 = v88;
            float32x4_t v257 = v88;
            float32x4_t v258 = v88;
            float32x4_t v265 = v88;
            float32x4_t v266 = v88;
            float32x4_t v273 = v88;
            float32x4_t v274 = v88;
            uint64_t v87 = 4;
          }
          else if (v68[1])
          {
            uint64_t v87 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v249, 128, v85, v86);
          }
          else
          {
            uint64_t v87 = 0;
            int8x16_t v249 = 0u;
            float32x4_t v250 = 0u;
            float32x4_t v257 = 0u;
            float32x4_t v258 = 0u;
            float32x4_t v265 = 0u;
            float32x4_t v266 = 0u;
            float32x4_t v273 = 0u;
            float32x4_t v274 = 0u;
          }
          uint64_t v96 = v85 + v87;
          unsigned int v97 = v68[2];
          if (v97 == 127)
          {
            float32x4_t v100 = *(float32x4_t *)(v96 + 16);
            float32x4_t v101 = *(float32x4_t *)(v96 + 32);
            float32x4_t v102 = *(float32x4_t *)(v96 + 48);
            float32x4_t v103 = *(float32x4_t *)(v96 + 64);
            float32x4_t v104 = *(float32x4_t *)(v96 + 80);
            float32x4_t v105 = *(float32x4_t *)(v96 + 96);
            float32x4_t v106 = *(float32x4_t *)(v96 + 112);
            int8x16_t v279 = *(int8x16_t *)v96;
            float32x4_t v280 = v101;
            float32x4_t v287 = v100;
            float32x4_t v288 = v102;
            float32x4_t v295 = v103;
            float32x4_t v296 = v105;
            float32x4_t v303 = v104;
            float32x4_t v304 = v106;
            uint64_t v98 = 128;
          }
          else if (v97 == 3)
          {
            float32x4_t v99 = vld1q_dup_f32((const float *)v96);
            int8x16_t v279 = (int8x16_t)v99;
            float32x4_t v280 = v99;
            float32x4_t v287 = v99;
            float32x4_t v288 = v99;
            float32x4_t v295 = v99;
            float32x4_t v296 = v99;
            float32x4_t v303 = v99;
            float32x4_t v304 = v99;
            uint64_t v98 = 4;
          }
          else if (v68[2])
          {
            uint64_t v98 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v279, 128, v96, v97);
          }
          else
          {
            uint64_t v98 = 0;
            int8x16_t v279 = 0u;
            float32x4_t v280 = 0u;
            float32x4_t v287 = 0u;
            float32x4_t v288 = 0u;
            float32x4_t v295 = 0u;
            float32x4_t v296 = 0u;
            float32x4_t v303 = 0u;
            float32x4_t v304 = 0u;
          }
          uint64_t v107 = v96 + v98;
          unsigned int v108 = v68[3];
          if (v108 == 127)
          {
            float32x4_t v111 = *(float32x4_t *)(v107 + 16);
            float32x4_t v112 = *(float32x4_t *)(v107 + 32);
            float32x4_t v113 = *(float32x4_t *)(v107 + 48);
            float32x4_t v114 = *(float32x4_t *)(v107 + 64);
            float32x4_t v115 = *(float32x4_t *)(v107 + 80);
            float32x4_t v116 = *(float32x4_t *)(v107 + 96);
            float32x4_t v117 = *(float32x4_t *)(v107 + 112);
            int8x16_t v281 = *(int8x16_t *)v107;
            float32x4_t v282 = v112;
            float32x4_t v289 = v111;
            float32x4_t v290 = v113;
            float32x4_t v297 = v114;
            float32x4_t v298 = v116;
            float32x4_t v305 = v115;
            float32x4_t v306 = v117;
            uint64_t v109 = 128;
          }
          else if (v108 == 3)
          {
            float32x4_t v110 = vld1q_dup_f32((const float *)v107);
            int8x16_t v281 = (int8x16_t)v110;
            float32x4_t v282 = v110;
            float32x4_t v289 = v110;
            float32x4_t v290 = v110;
            float32x4_t v297 = v110;
            float32x4_t v298 = v110;
            float32x4_t v305 = v110;
            float32x4_t v306 = v110;
            uint64_t v109 = 4;
          }
          else if (v68[3])
          {
            uint64_t v109 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v281, 128, v107, v108);
          }
          else
          {
            uint64_t v109 = 0;
            int8x16_t v281 = 0u;
            float32x4_t v282 = 0u;
            float32x4_t v289 = 0u;
            float32x4_t v290 = 0u;
            float32x4_t v297 = 0u;
            float32x4_t v298 = 0u;
            float32x4_t v305 = 0u;
            float32x4_t v306 = 0u;
          }
          uint64_t v118 = v107 + v109;
          unsigned int v119 = v68[4];
          if (v119 == 127)
          {
            float32x4_t v122 = *(float32x4_t *)(v118 + 16);
            float32x4_t v123 = *(float32x4_t *)(v118 + 32);
            float32x4_t v124 = *(float32x4_t *)(v118 + 48);
            float32x4_t v125 = *(float32x4_t *)(v118 + 64);
            float32x4_t v126 = *(float32x4_t *)(v118 + 80);
            float32x4_t v127 = *(float32x4_t *)(v118 + 96);
            float32x4_t v128 = *(float32x4_t *)(v118 + 112);
            int8x16_t v251 = *(int8x16_t *)v118;
            float32x4_t v252 = v123;
            float32x4_t v259 = v122;
            float32x4_t v260 = v124;
            float32x4_t v267 = v125;
            float32x4_t v268 = v127;
            float32x4_t v275 = v126;
            float32x4_t v276 = v128;
            uint64_t v120 = 128;
          }
          else if (v119 == 3)
          {
            float32x4_t v121 = vld1q_dup_f32((const float *)v118);
            int8x16_t v251 = (int8x16_t)v121;
            float32x4_t v252 = v121;
            float32x4_t v259 = v121;
            float32x4_t v260 = v121;
            float32x4_t v267 = v121;
            float32x4_t v268 = v121;
            float32x4_t v275 = v121;
            float32x4_t v276 = v121;
            uint64_t v120 = 4;
          }
          else if (v68[4])
          {
            uint64_t v120 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v251, 128, v118, v119);
          }
          else
          {
            uint64_t v120 = 0;
            int8x16_t v251 = 0u;
            float32x4_t v252 = 0u;
            float32x4_t v259 = 0u;
            float32x4_t v260 = 0u;
            float32x4_t v267 = 0u;
            float32x4_t v268 = 0u;
            float32x4_t v275 = 0u;
            float32x4_t v276 = 0u;
          }
          uint64_t v129 = v118 + v120;
          unsigned int v130 = v68[5];
          if (v130 == 127)
          {
            float32x4_t v133 = *(float32x4_t *)(v129 + 16);
            float32x4_t v134 = *(float32x4_t *)(v129 + 32);
            float32x4_t v135 = *(float32x4_t *)(v129 + 48);
            float32x4_t v136 = *(float32x4_t *)(v129 + 64);
            float32x4_t v137 = *(float32x4_t *)(v129 + 80);
            float32x4_t v138 = *(float32x4_t *)(v129 + 96);
            float32x4_t v139 = *(float32x4_t *)(v129 + 112);
            int8x16_t v253 = *(int8x16_t *)v129;
            float32x4_t v254 = v134;
            float32x4_t v261 = v133;
            float32x4_t v262 = v135;
            float32x4_t v269 = v136;
            float32x4_t v270 = v138;
            float32x4_t v277 = v137;
            float32x4_t v278 = v139;
            uint64_t v131 = 128;
          }
          else if (v130 == 3)
          {
            float32x4_t v132 = vld1q_dup_f32((const float *)v129);
            int8x16_t v253 = (int8x16_t)v132;
            float32x4_t v254 = v132;
            float32x4_t v261 = v132;
            float32x4_t v262 = v132;
            float32x4_t v269 = v132;
            float32x4_t v270 = v132;
            float32x4_t v277 = v132;
            float32x4_t v278 = v132;
            uint64_t v131 = 4;
          }
          else if (v68[5])
          {
            uint64_t v131 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v253, 128, v129, v130);
          }
          else
          {
            uint64_t v131 = 0;
            int8x16_t v253 = 0u;
            float32x4_t v254 = 0u;
            float32x4_t v261 = 0u;
            float32x4_t v262 = 0u;
            float32x4_t v269 = 0u;
            float32x4_t v270 = 0u;
            float32x4_t v277 = 0u;
            float32x4_t v278 = 0u;
          }
          uint64_t v140 = v129 + v131;
          unsigned int v141 = v68[6];
          if (v141 == 127)
          {
            float32x4_t v144 = *(float32x4_t *)(v140 + 16);
            float32x4_t v145 = *(float32x4_t *)(v140 + 32);
            float32x4_t v146 = *(float32x4_t *)(v140 + 48);
            float32x4_t v147 = *(float32x4_t *)(v140 + 64);
            float32x4_t v148 = *(float32x4_t *)(v140 + 80);
            float32x4_t v149 = *(float32x4_t *)(v140 + 96);
            float32x4_t v150 = *(float32x4_t *)(v140 + 112);
            int8x16_t v283 = *(int8x16_t *)v140;
            float32x4_t v284 = v145;
            float32x4_t v291 = v144;
            float32x4_t v292 = v146;
            float32x4_t v299 = v147;
            float32x4_t v300 = v149;
            float32x4_t v307 = v148;
            float32x4_t v308 = v150;
            uint64_t v142 = 128;
          }
          else if (v141 == 3)
          {
            float32x4_t v143 = vld1q_dup_f32((const float *)v140);
            int8x16_t v283 = (int8x16_t)v143;
            float32x4_t v284 = v143;
            float32x4_t v291 = v143;
            float32x4_t v292 = v143;
            float32x4_t v299 = v143;
            float32x4_t v300 = v143;
            float32x4_t v307 = v143;
            float32x4_t v308 = v143;
            uint64_t v142 = 4;
          }
          else if (v68[6])
          {
            uint64_t v142 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v283, 128, v140, v141);
          }
          else
          {
            uint64_t v142 = 0;
            int8x16_t v283 = 0u;
            float32x4_t v284 = 0u;
            float32x4_t v291 = 0u;
            float32x4_t v292 = 0u;
            float32x4_t v299 = 0u;
            float32x4_t v300 = 0u;
            float32x4_t v307 = 0u;
            float32x4_t v308 = 0u;
          }
          uint64_t v151 = v140 + v142;
          unsigned int v152 = v68[7];
          if (v152 == 127)
          {
            float32x4_t v155 = *(float32x4_t *)(v151 + 16);
            float32x4_t v156 = *(float32x4_t *)(v151 + 32);
            float32x4_t v157 = *(float32x4_t *)(v151 + 48);
            float32x4_t v158 = *(float32x4_t *)(v151 + 80);
            float32x4_t v159 = *(float32x4_t *)(v151 + 96);
            float32x4_t v160 = *(float32x4_t *)(v151 + 112);
            float32x4_t v161 = *(float32x4_t *)(v151 + 64);
            int8x16_t v285 = *(int8x16_t *)v151;
            float32x4_t v286 = v156;
            float32x4_t v293 = v155;
            float32x4_t v294 = v157;
            float32x4_t v301 = v161;
            float32x4_t v302 = v159;
            float32x4_t v309 = v158;
            float32x4_t v310 = v160;
            uint64_t v153 = v242;
            if (!v242) {
              goto LABEL_185;
            }
          }
          else if (v152 == 3)
          {
            float32x4_t v154 = vld1q_dup_f32((const float *)v151);
            int8x16_t v285 = (int8x16_t)v154;
            float32x4_t v286 = v154;
            float32x4_t v293 = v154;
            float32x4_t v294 = v154;
            float32x4_t v301 = v154;
            float32x4_t v302 = v154;
            float32x4_t v309 = v154;
            float32x4_t v310 = v154;
            uint64_t v153 = v242;
            if (!v242) {
              goto LABEL_185;
            }
          }
          else if (v68[7])
          {
            AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v285, 128, v151, v152);
            uint64_t v153 = v242;
            if (!v242) {
              goto LABEL_185;
            }
          }
          else
          {
            int8x16_t v285 = 0u;
            float32x4_t v286 = 0u;
            float32x4_t v293 = 0u;
            float32x4_t v294 = 0u;
            float32x4_t v301 = 0u;
            float32x4_t v302 = 0u;
            float32x4_t v309 = 0u;
            float32x4_t v310 = 0u;
            uint64_t v153 = v242;
            if (!v242) {
              goto LABEL_185;
            }
          }
          if (v243)
          {
            uint64_t v162 = 0;
            unint64_t v163 = (unint64_t)v240 << 7;
            uint64_t v164 = 8 * v241;
            unsigned int v165 = &v247.i8[v163 + v164];
            unint64_t v166 = v238;
            uint64_t v167 = v239;
            unint64_t v168 = 8 * v243;
            if (v168 <= 1) {
              unint64_t v169 = 1;
            }
            else {
              unint64_t v169 = 8 * v243;
            }
            unint64_t v170 = v163 + v164;
            float32x4_t v171 = &v247.i8[v163 + v164];
            if (v169) {
              BOOL v172 = (v169 - 1) >> 32 == 0;
            }
            else {
              BOOL v172 = 0;
            }
            char v173 = !v172;
            uint64_t v174 = v169 & 0x7FFFFFFE0;
            uint64_t v175 = v169 & 0x7FFFFFFF8;
            unsigned int v176 = (char *)&v248 + v170;
            uint64_t v177 = (long long *)(v238 + 16);
            float32x4_t v178 = v165;
            unint64_t v179 = v238;
            do
            {
              float32x4_t v180 = (char *)(v166 + v167 * v162);
              float32x4_t v181 = &v165[128 * v162];
              if ((unint64_t)(&v171[128 * v162] - v180) < 0x20) {
                char v182 = 1;
              }
              else {
                char v182 = v173;
              }
              if (v182)
              {
                int v183 = 0;
                goto LABEL_182;
              }
              if (v169 >= 0x20)
              {
                float32x4_t v185 = v177;
                uint64_t v186 = v176;
                uint64_t v187 = v169 & 0x7FFFFFFE0;
                do
                {
                  long long v188 = *v185;
                  *(v186 - 1) = *(v185 - 1);
                  *uint64_t v186 = v188;
                  v186 += 2;
                  v185 += 2;
                  v187 -= 32;
                }
                while (v187);
                if (v169 == v174) {
                  goto LABEL_165;
                }
                uint64_t v184 = v169 & 0x7FFFFFFE0;
                if ((v169 & 0x18) == 0)
                {
                  v180 += v174;
                  v181 += v174;
                  int v183 = v169 & 0xFFFFFFE0;
                  goto LABEL_182;
                }
              }
              else
              {
                uint64_t v184 = 0;
              }
              v181 += v175;
              unint64_t v189 = v184 - (v169 & 0x7FFFFFFF8);
              float32x4_t v190 = (uint64_t *)(v179 + v184);
              float32x4_t v191 = &v178[v184];
              do
              {
                uint64_t v192 = *v190++;
                *(void *)float32x4_t v191 = v192;
                v191 += 8;
                v189 += 8;
              }
              while (v189);
              if (v169 == v175) {
                goto LABEL_165;
              }
              v180 += v175;
              int v183 = v169 & 0xFFFFFFF8;
LABEL_182:
              unsigned int v193 = v183 + 1;
              do
              {
                char v194 = *v180++;
                *v181++ = v194;
              }
              while (v168 > v193++);
LABEL_165:
              ++v162;
              v176 += 128;
              uint64_t v177 = (long long *)((char *)v177 + v167);
              v179 += v167;
              v178 += 128;
            }
            while (v162 != v153);
          }
LABEL_185:
          AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)&v247, 128, (unint64_t)v236, v237, v244, v245);
LABEL_186:
          uint64_t result = v232;
          if (v233) {
            uint64_t result = memcpy(v232, v72, 0x400uLL);
          }
          BOOL v23 = v33++ == v221 >> 4;
          uint64_t v28 = v229;
        }
        while (!v23);
        BOOL v23 = v18++ == v214;
      }
      while (!v23);
    }
  }
  return result;
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, int a12)
{
  uint64_t v352 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v270 = a8;
  unsigned int v16 = a8 >> 3;
  unsigned int v253 = a8 + a10 - 1;
  unsigned int v255 = v253 >> 3;
  unsigned int v17 = *(unsigned __int8 *)(*(void *)(a1 + 208) + 88);
  unsigned int v18 = *(_DWORD *)(a1 + 112);
  uint64_t v272 = a1;
  if (*(void *)(a1 + 168)) {
    int v19 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v19 = 0;
  }
  BOOL v20 = (v19 & 0xD00) == 0 || v19 == 768;
  int v21 = v19 & 0xE00;
  int v23 = !v20 && v21 != 1024;
  int v275 = v23;
  BOOL isLevelTiled = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::isLevelTiled(a1, *(_DWORD *)(a1 + 144) + a12);
  uint64_t v25 = a1;
  BOOL v264 = isLevelTiled;
  if (v16 <= v255)
  {
    unsigned int v263 = a7 + a9 - 1;
    if (a7 >> 4 <= v263 >> 4)
    {
      unsigned int v250 = a5 - 1;
      unsigned int v274 = (a5 - 1) >> 4;
      int v273 = ((a5 - 1) & 0xF) + 1;
      int v251 = ((a6 - 1) & 7) + 1;
      unsigned int v252 = (a6 - 1) >> 3;
      uint32x2_t v26 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0xF00000007);
      int8x8_t v27 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32(vadd_s32((int32x2_t)vshl_u32(v26, (uint32x2_t)0xFFFFFFFCFFFFFFFDLL), (int32x2_t)-1))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x2000000010, v26));
      __int32 v262 = v27.i32[0] | v27.i32[1];
      int8x8_t v260 = v27;
      BOOL v259 = v27.i32[0] != 0;
      BOOL v258 = v27.i32[1] != 0;
      unint64_t v249 = 8 * v18 * (unint64_t)v17;
      uint64_t v28 = a11;
      uint64_t v29 = 2 * a11;
      do
      {
        unsigned int v30 = (8 * v16) | 7;
        if (8 * v16 <= v270) {
          int v31 = v270;
        }
        else {
          int v31 = 8 * v16;
        }
        unsigned int v32 = a7 >> 4;
        if (v253 < v30) {
          unsigned int v30 = v253;
        }
        unsigned int v269 = 8 * v16;
        int v257 = v31 - 8 * v16;
        int v268 = v30 - v31 + 1;
        if (v16 == v252) {
          unsigned int v33 = v251;
        }
        else {
          unsigned int v33 = 8;
        }
        uint64_t v267 = a3 + (v31 - v270) * v28;
        unsigned int v34 = a7;
        unsigned int v256 = v33;
        do
        {
          unsigned int v35 = 16 * v32;
          unsigned int v36 = 16 * (v32 + 1) - 1;
          if (16 * v32 <= v34) {
            int v37 = v34;
          }
          else {
            int v37 = 16 * v32;
          }
          if (v263 < v36) {
            unsigned int v36 = a7 + a9 - 1;
          }
          int v38 = v36 - v37 + 1;
          if (v32 == v274) {
            unsigned int v39 = v273;
          }
          else {
            unsigned int v39 = 16;
          }
          BOOL v40 = 1;
          if (v269 >= v270 && v35 >= v34)
          {
            int v41 = v273;
            if (v32 != v274) {
              int v41 = 16;
            }
            BOOL v40 = v38 != v41 || v268 != v33;
          }
          if (v264)
          {
            unsigned int v62 = 0;
            uint64_t v63 = v249 >> (*(unsigned char *)(v25 + 57) != 0);
            char v64 = 1;
            if (v63 > 127)
            {
              if (v63 > 511)
              {
                if (v63 == 512)
                {
                  char v65 = 0;
                  unsigned int v62 = 16;
                  unsigned int v66 = 16;
                }
                else
                {
                  char v65 = 1;
                  unsigned int v66 = 0;
                  if (v63 == 1024)
                  {
                    unsigned int v66 = 8;
                    unsigned int v62 = 16;
                  }
                }
              }
              else if (v63 == 128)
              {
                char v64 = 0;
                char v65 = 0;
                unsigned int v62 = 32;
                unsigned int v66 = 32;
              }
              else
              {
                char v65 = 1;
                unsigned int v66 = 0;
                if (v63 == 256)
                {
                  char v64 = 0;
                  char v65 = 0;
                  unsigned int v66 = 16;
                  unsigned int v62 = 32;
                }
              }
            }
            else
            {
              char v65 = 1;
              unsigned int v66 = 0;
              switch(v63)
              {
                case 4:
                  char v64 = 0;
                  char v65 = 0;
                  unsigned int v66 = 128;
                  unsigned int v62 = 256;
                  break;
                case 5:
                case 6:
                case 7:
                case 9:
                case 10:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 17:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                  break;
                case 8:
                  char v64 = 0;
                  char v65 = 0;
                  unsigned int v62 = 128;
                  unsigned int v66 = 128;
                  break;
                case 16:
                  char v64 = 0;
                  char v65 = 0;
                  unsigned int v66 = 64;
                  unsigned int v62 = 128;
                  break;
                case 32:
                  char v64 = 0;
                  char v65 = 0;
                  unsigned int v62 = 64;
                  unsigned int v66 = 64;
                  break;
                default:
                  if (v63 == 64)
                  {
                    char v64 = 0;
                    char v65 = 0;
                    unsigned int v66 = 32;
                    unsigned int v62 = 64;
                  }
                  break;
              }
            }
            unsigned int v238 = (v62 >> 4) - 1;
            if (v64) {
              unsigned int v239 = 0;
            }
            else {
              unsigned int v239 = 32 - __clz(~(-1 << -(char)__clz(v238)));
            }
            unsigned int v240 = (v66 >> 3) - 1;
            if (v65)
            {
              unsigned int v241 = 0;
              if (v239) {
                goto LABEL_232;
              }
            }
            else
            {
              unsigned int v241 = 32 - __clz(~(-1 << -(char)__clz(v240)));
              if (v241 | v239)
              {
LABEL_232:
                int v242 = 0;
                uint64_t v243 = 0;
                int v244 = v32 & v238;
                int v245 = v16 & v240;
                BOOL v246 = v241 != 0;
                BOOL v247 = v239 != 0;
                int v248 = 1;
                do
                {
                  --v241;
                  if (v246) {
                    v243 |= (unint64_t)(v248 & v245) << v242++;
                  }
                  else {
                    unsigned int v241 = 0;
                  }
                  --v239;
                  if (v247) {
                    v243 |= (unint64_t)(v248 & v244) << v242++;
                  }
                  else {
                    unsigned int v239 = 0;
                  }
                  v248 *= 2;
                  --v242;
                  BOOL v247 = v239 != 0;
                  BOOL v246 = v241 != 0;
                }
                while (v239 | v241);
                goto LABEL_244;
              }
            }
            uint64_t v243 = 0;
LABEL_244:
            unint64_t v50 = ((unint64_t)(v35 / v62 + v269 / v66 * ((v62 + v250) / v62)) << 14) + (v243 << 10);
            goto LABEL_60;
          }
          if (v262)
          {
            int v43 = 0;
            uint64_t v44 = 0;
            int v45 = 1;
            BOOL v46 = v259;
            BOOL v47 = v258;
            __int32 v48 = v260.i32[0];
            __int32 v49 = v260.i32[1];
            do
            {
              --v48;
              if (v46) {
                v44 |= (unint64_t)(v45 & v16) << v43++;
              }
              else {
                __int32 v48 = 0;
              }
              --v49;
              if (v47) {
                v44 |= (unint64_t)(v45 & v32) << v43++;
              }
              else {
                __int32 v49 = 0;
              }
              v45 *= 2;
              --v43;
              BOOL v47 = v49 != 0;
              BOOL v46 = v48 != 0;
            }
            while (v49 | v48);
          }
          else
          {
            uint64_t v44 = 0;
          }
          unint64_t v50 = v44 << 10;
LABEL_60:
          unsigned int v51 = *(_DWORD *)(v25 + 128) >> (*(unsigned char *)(v25 + 144) + a12);
          if (v51 <= 1) {
            unsigned int v51 = 1;
          }
          unsigned int v52 = v51 + 15;
          if (v52 < 0x20) {
            unsigned int v53 = 0;
          }
          else {
            unsigned int v53 = 32 - __clz(~(-1 << -(char)__clz((v52 >> 4) - 1)));
          }
          unsigned int v54 = *(_DWORD *)(v25 + 132) >> (*(unsigned char *)(v25 + 144) + a12);
          if (v54 <= 1) {
            unsigned int v54 = 1;
          }
          unsigned int v55 = v54 + 7;
          if (v55 < 0x10)
          {
            unsigned int v56 = 0;
            if (!v53)
            {
LABEL_82:
              uint64_t v58 = 0;
              goto LABEL_83;
            }
          }
          else
          {
            unsigned int v56 = 32 - __clz(~(-1 << -(char)__clz((v55 >> 3) - 1)));
            if (!(v56 | v53)) {
              goto LABEL_82;
            }
          }
          int v57 = 0;
          uint64_t v58 = 0;
          BOOL v59 = v53 != 0;
          BOOL v60 = v56 != 0;
          int v61 = 1;
          do
          {
            --v53;
            if (v59) {
              v58 |= (unint64_t)(v61 & v32) << v57++;
            }
            else {
              unsigned int v53 = 0;
            }
            --v56;
            if (v60) {
              v58 |= (unint64_t)(v61 & v16) << v57++;
            }
            else {
              unsigned int v56 = 0;
            }
            v61 *= 2;
            --v57;
            BOOL v60 = v56 != 0;
            BOOL v59 = v53 != 0;
          }
          while (v56 | v53);
LABEL_83:
          unsigned int v67 = v37 - v34;
          int v68 = v39 < 0x10 || v40;
          unint64_t v69 = (char *)(a4 + 8 * v58);
          uint64_t v70 = v267 + 8 * v67;
          int v71 = (int8x16_t *)(a2 + v50);
          if (v33 < 8) {
            int v72 = 1;
          }
          else {
            int v72 = v68;
          }
          if (v275)
          {
            if (v72)
            {
              char v73 = v71;
              int v74 = v38;
              BOOL v75 = v40;
              memcpy(v287, v71, sizeof(v287));
              BOOL v40 = v75;
              unsigned int v35 = 16 * v32;
              int v38 = v74;
              uint64_t v28 = a11;
              unsigned int v33 = v256;
              uint64_t v76 = (int8x16_t *)v287;
              int v71 = v73;
              uint64_t v25 = v272;
LABEL_93:
              __dst = v71;
              block[0] = MEMORY[0x263EF8330];
              block[1] = 3221225472;
              block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE12ELj2ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
              block[3] = &__block_descriptor_90_e5_v8__0l;
              block[4] = v25;
              float32x4_t v277 = v76;
              unsigned __int8 v285 = v39;
              unsigned __int8 v286 = v33;
              unsigned int v281 = v257;
              unsigned int v282 = v37 - v35;
              float32x4_t v278 = v69;
              uint64_t v279 = v70;
              uint64_t v280 = v28;
              unsigned int v283 = v268;
              unsigned int v284 = v38;
              if (v40)
              {
                dispatch_sync(*(dispatch_queue_t *)(*(void *)(v25 + 8) + 7384), block);
                uint64_t v25 = v272;
                unsigned int v34 = a7;
                uint64_t v29 = 2 * a11;
                goto LABEL_95;
              }
              unsigned int v97 = *v69;
              if (v97 == 127)
              {
                float32x4_t v100 = (float32x4_t)v76[1];
                float32x4_t v101 = (float32x4_t)v76[2];
                float32x4_t v102 = (float32x4_t)v76[3];
                float32x4_t v103 = (float32x4_t)v76[4];
                float32x4_t v104 = (float32x4_t)v76[5];
                float32x4_t v105 = (float32x4_t)v76[6];
                float32x4_t v106 = (float32x4_t)v76[7];
                int8x16_t v288 = *v76;
                float32x4_t v289 = v101;
                float32x4_t v296 = v100;
                float32x4_t v297 = v102;
                float32x4_t v304 = v103;
                float32x4_t v305 = v105;
                float32x4_t v312 = v104;
                float32x4_t v313 = v106;
                uint64_t v98 = 128;
              }
              else if (v97 == 3)
              {
                float32x4_t v99 = vld1q_dup_f32((const float *)v76->i32);
                int8x16_t v288 = (int8x16_t)v99;
                float32x4_t v289 = v99;
                float32x4_t v296 = v99;
                float32x4_t v297 = v99;
                float32x4_t v304 = v99;
                float32x4_t v305 = v99;
                float32x4_t v312 = v99;
                float32x4_t v313 = v99;
                uint64_t v98 = 4;
              }
              else if (*v69)
              {
                uint64_t v98 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v288, 128, (uint64_t)v76, v97);
              }
              else
              {
                uint64_t v98 = 0;
                float32x4_t v289 = 0u;
                int8x16_t v288 = 0u;
                float32x4_t v296 = 0u;
                float32x4_t v297 = 0u;
                float32x4_t v304 = 0u;
                float32x4_t v305 = 0u;
                float32x4_t v312 = 0u;
                float32x4_t v313 = 0u;
              }
              uint64_t v107 = (uint64_t)v76->i64 + v98;
              unsigned int v108 = v69[1];
              if (v108 == 127)
              {
                float32x4_t v111 = *(float32x4_t *)(v107 + 16);
                float32x4_t v112 = *(float32x4_t *)(v107 + 32);
                float32x4_t v113 = *(float32x4_t *)(v107 + 48);
                float32x4_t v114 = *(float32x4_t *)(v107 + 64);
                float32x4_t v115 = *(float32x4_t *)(v107 + 80);
                float32x4_t v116 = *(float32x4_t *)(v107 + 96);
                float32x4_t v117 = *(float32x4_t *)(v107 + 112);
                int8x16_t v290 = *(int8x16_t *)v107;
                float32x4_t v291 = v112;
                float32x4_t v298 = v111;
                float32x4_t v299 = v113;
                float32x4_t v306 = v114;
                float32x4_t v307 = v116;
                float32x4_t v314 = v115;
                float32x4_t v315 = v117;
                uint64_t v109 = 128;
              }
              else if (v108 == 3)
              {
                float32x4_t v110 = vld1q_dup_f32((const float *)v107);
                int8x16_t v290 = (int8x16_t)v110;
                float32x4_t v291 = v110;
                float32x4_t v298 = v110;
                float32x4_t v299 = v110;
                float32x4_t v306 = v110;
                float32x4_t v307 = v110;
                float32x4_t v314 = v110;
                float32x4_t v315 = v110;
                uint64_t v109 = 4;
              }
              else if (v69[1])
              {
                uint64_t v109 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v290, 128, v107, v108);
              }
              else
              {
                uint64_t v109 = 0;
                int8x16_t v290 = 0u;
                float32x4_t v291 = 0u;
                float32x4_t v298 = 0u;
                float32x4_t v299 = 0u;
                float32x4_t v306 = 0u;
                float32x4_t v307 = 0u;
                float32x4_t v314 = 0u;
                float32x4_t v315 = 0u;
              }
              uint64_t v118 = v107 + v109;
              unsigned int v119 = v69[2];
              if (v119 == 127)
              {
                float32x4_t v122 = *(float32x4_t *)(v118 + 16);
                float32x4_t v123 = *(float32x4_t *)(v118 + 32);
                float32x4_t v124 = *(float32x4_t *)(v118 + 48);
                float32x4_t v125 = *(float32x4_t *)(v118 + 64);
                float32x4_t v126 = *(float32x4_t *)(v118 + 80);
                float32x4_t v127 = *(float32x4_t *)(v118 + 96);
                float32x4_t v128 = *(float32x4_t *)(v118 + 112);
                int8x16_t v320 = *(int8x16_t *)v118;
                float32x4_t v321 = v123;
                float32x4_t v328 = v122;
                float32x4_t v329 = v124;
                float32x4_t v336 = v125;
                float32x4_t v337 = v127;
                float32x4_t v344 = v126;
                float32x4_t v345 = v128;
                uint64_t v120 = 128;
              }
              else if (v119 == 3)
              {
                float32x4_t v121 = vld1q_dup_f32((const float *)v118);
                int8x16_t v320 = (int8x16_t)v121;
                float32x4_t v321 = v121;
                float32x4_t v328 = v121;
                float32x4_t v329 = v121;
                float32x4_t v336 = v121;
                float32x4_t v337 = v121;
                float32x4_t v344 = v121;
                float32x4_t v345 = v121;
                uint64_t v120 = 4;
              }
              else if (v69[2])
              {
                uint64_t v120 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v320, 128, v118, v119);
              }
              else
              {
                uint64_t v120 = 0;
                int8x16_t v320 = 0u;
                float32x4_t v321 = 0u;
                float32x4_t v328 = 0u;
                float32x4_t v329 = 0u;
                float32x4_t v336 = 0u;
                float32x4_t v337 = 0u;
                float32x4_t v344 = 0u;
                float32x4_t v345 = 0u;
              }
              uint64_t v129 = v118 + v120;
              unsigned int v130 = v69[3];
              if (v130 == 127)
              {
                float32x4_t v133 = *(float32x4_t *)(v129 + 16);
                float32x4_t v134 = *(float32x4_t *)(v129 + 32);
                float32x4_t v135 = *(float32x4_t *)(v129 + 48);
                float32x4_t v136 = *(float32x4_t *)(v129 + 64);
                float32x4_t v137 = *(float32x4_t *)(v129 + 80);
                float32x4_t v138 = *(float32x4_t *)(v129 + 96);
                float32x4_t v139 = *(float32x4_t *)(v129 + 112);
                int8x16_t v322 = *(int8x16_t *)v129;
                float32x4_t v323 = v134;
                float32x4_t v330 = v133;
                float32x4_t v331 = v135;
                float32x4_t v338 = v136;
                float32x4_t v339 = v138;
                float32x4_t v346 = v137;
                float32x4_t v347 = v139;
                uint64_t v131 = 128;
              }
              else if (v130 == 3)
              {
                float32x4_t v132 = vld1q_dup_f32((const float *)v129);
                int8x16_t v322 = (int8x16_t)v132;
                float32x4_t v323 = v132;
                float32x4_t v330 = v132;
                float32x4_t v331 = v132;
                float32x4_t v338 = v132;
                float32x4_t v339 = v132;
                float32x4_t v346 = v132;
                float32x4_t v347 = v132;
                uint64_t v131 = 4;
              }
              else if (v69[3])
              {
                uint64_t v131 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v322, 128, v129, v130);
              }
              else
              {
                uint64_t v131 = 0;
                int8x16_t v322 = 0u;
                float32x4_t v323 = 0u;
                float32x4_t v330 = 0u;
                float32x4_t v331 = 0u;
                float32x4_t v338 = 0u;
                float32x4_t v339 = 0u;
                float32x4_t v346 = 0u;
                float32x4_t v347 = 0u;
              }
              uint64_t v140 = v129 + v131;
              unsigned int v141 = v69[4];
              if (v141 == 127)
              {
                float32x4_t v144 = *(float32x4_t *)(v140 + 16);
                float32x4_t v145 = *(float32x4_t *)(v140 + 32);
                float32x4_t v146 = *(float32x4_t *)(v140 + 48);
                float32x4_t v147 = *(float32x4_t *)(v140 + 64);
                float32x4_t v148 = *(float32x4_t *)(v140 + 80);
                float32x4_t v149 = *(float32x4_t *)(v140 + 96);
                float32x4_t v150 = *(float32x4_t *)(v140 + 112);
                int8x16_t v292 = *(int8x16_t *)v140;
                float32x4_t v293 = v145;
                float32x4_t v300 = v144;
                float32x4_t v301 = v146;
                float32x4_t v308 = v147;
                float32x4_t v309 = v149;
                float32x4_t v316 = v148;
                float32x4_t v317 = v150;
                uint64_t v142 = 128;
              }
              else if (v141 == 3)
              {
                float32x4_t v143 = vld1q_dup_f32((const float *)v140);
                int8x16_t v292 = (int8x16_t)v143;
                float32x4_t v293 = v143;
                float32x4_t v300 = v143;
                float32x4_t v301 = v143;
                float32x4_t v308 = v143;
                float32x4_t v309 = v143;
                float32x4_t v316 = v143;
                float32x4_t v317 = v143;
                uint64_t v142 = 4;
              }
              else if (v69[4])
              {
                uint64_t v142 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v292, 128, v140, v141);
              }
              else
              {
                uint64_t v142 = 0;
                int8x16_t v292 = 0u;
                float32x4_t v293 = 0u;
                float32x4_t v300 = 0u;
                float32x4_t v301 = 0u;
                float32x4_t v308 = 0u;
                float32x4_t v309 = 0u;
                float32x4_t v316 = 0u;
                float32x4_t v317 = 0u;
              }
              uint64_t v151 = v140 + v142;
              unsigned int v152 = v69[5];
              if (v152 == 127)
              {
                float32x4_t v155 = *(float32x4_t *)(v151 + 16);
                float32x4_t v156 = *(float32x4_t *)(v151 + 32);
                float32x4_t v157 = *(float32x4_t *)(v151 + 48);
                float32x4_t v158 = *(float32x4_t *)(v151 + 64);
                float32x4_t v159 = *(float32x4_t *)(v151 + 80);
                float32x4_t v160 = *(float32x4_t *)(v151 + 96);
                float32x4_t v161 = *(float32x4_t *)(v151 + 112);
                int8x16_t v294 = *(int8x16_t *)v151;
                float32x4_t v295 = v156;
                float32x4_t v302 = v155;
                float32x4_t v303 = v157;
                float32x4_t v310 = v158;
                float32x4_t v311 = v160;
                float32x4_t v318 = v159;
                float32x4_t v319 = v161;
                uint64_t v153 = 128;
              }
              else if (v152 == 3)
              {
                float32x4_t v154 = vld1q_dup_f32((const float *)v151);
                int8x16_t v294 = (int8x16_t)v154;
                float32x4_t v295 = v154;
                float32x4_t v302 = v154;
                float32x4_t v303 = v154;
                float32x4_t v310 = v154;
                float32x4_t v311 = v154;
                float32x4_t v318 = v154;
                float32x4_t v319 = v154;
                uint64_t v153 = 4;
              }
              else if (v69[5])
              {
                uint64_t v153 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v294, 128, v151, v152);
              }
              else
              {
                uint64_t v153 = 0;
                int8x16_t v294 = 0u;
                float32x4_t v295 = 0u;
                float32x4_t v302 = 0u;
                float32x4_t v303 = 0u;
                float32x4_t v310 = 0u;
                float32x4_t v311 = 0u;
                float32x4_t v318 = 0u;
                float32x4_t v319 = 0u;
              }
              uint64_t v162 = v151 + v153;
              unsigned int v163 = v69[6];
              if (v163 == 127)
              {
                float32x4_t v166 = *(float32x4_t *)(v162 + 16);
                float32x4_t v167 = *(float32x4_t *)(v162 + 32);
                float32x4_t v168 = *(float32x4_t *)(v162 + 48);
                float32x4_t v169 = *(float32x4_t *)(v162 + 64);
                float32x4_t v170 = *(float32x4_t *)(v162 + 80);
                float32x4_t v171 = *(float32x4_t *)(v162 + 96);
                float32x4_t v172 = *(float32x4_t *)(v162 + 112);
                int8x16_t v324 = *(int8x16_t *)v162;
                float32x4_t v325 = v167;
                float32x4_t v332 = v166;
                float32x4_t v333 = v168;
                float32x4_t v340 = v169;
                float32x4_t v341 = v171;
                float32x4_t v348 = v170;
                float32x4_t v349 = v172;
                uint64_t v164 = 128;
              }
              else if (v163 == 3)
              {
                float32x4_t v165 = vld1q_dup_f32((const float *)v162);
                int8x16_t v324 = (int8x16_t)v165;
                float32x4_t v325 = v165;
                float32x4_t v332 = v165;
                float32x4_t v333 = v165;
                float32x4_t v340 = v165;
                float32x4_t v341 = v165;
                float32x4_t v348 = v165;
                float32x4_t v349 = v165;
                uint64_t v164 = 4;
              }
              else if (v69[6])
              {
                uint64_t v164 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v324, 128, v162, v163);
              }
              else
              {
                uint64_t v164 = 0;
                int8x16_t v324 = 0u;
                float32x4_t v325 = 0u;
                float32x4_t v332 = 0u;
                float32x4_t v333 = 0u;
                float32x4_t v340 = 0u;
                float32x4_t v341 = 0u;
                float32x4_t v348 = 0u;
                float32x4_t v349 = 0u;
              }
              uint64_t v173 = v162 + v164;
              unsigned int v174 = v69[7];
              if (v174 == 127)
              {
                float32x4_t v177 = *(float32x4_t *)(v173 + 16);
                float32x4_t v178 = *(float32x4_t *)(v173 + 32);
                float32x4_t v179 = *(float32x4_t *)(v173 + 48);
                float32x4_t v180 = *(float32x4_t *)(v173 + 80);
                float32x4_t v181 = *(float32x4_t *)(v173 + 96);
                float32x4_t v182 = *(float32x4_t *)(v173 + 112);
                float32x4_t v183 = *(float32x4_t *)(v173 + 64);
                int8x16_t v326 = *(int8x16_t *)v173;
                float32x4_t v327 = v178;
                float32x4_t v334 = v177;
                float32x4_t v335 = v179;
                float32x4_t v342 = v183;
                float32x4_t v343 = v181;
                float32x4_t v350 = v180;
                float32x4_t v351 = v182;
                uint64_t v175 = v283;
                if (v283) {
                  goto LABEL_171;
                }
              }
              else
              {
                if (v174 != 3)
                {
                  if (v69[7])
                  {
                    AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v326, 128, v173, v174);
                    uint64_t v175 = v283;
                    if (!v283) {
                      goto LABEL_202;
                    }
                  }
                  else
                  {
                    int8x16_t v326 = 0u;
                    float32x4_t v327 = 0u;
                    float32x4_t v334 = 0u;
                    float32x4_t v335 = 0u;
                    float32x4_t v342 = 0u;
                    float32x4_t v343 = 0u;
                    float32x4_t v350 = 0u;
                    float32x4_t v351 = 0u;
                    uint64_t v175 = v283;
                    if (!v283) {
                      goto LABEL_202;
                    }
                  }
LABEL_171:
                  if (!v284) {
                    goto LABEL_202;
                  }
                  uint64_t v184 = 0;
                  unint64_t v185 = (unint64_t)v281 << 7;
                  uint64_t v186 = 8 * v282;
                  uint64_t v187 = &v288.i8[v185 + v186];
                  uint64_t v188 = v279;
                  uint64_t v189 = v280;
                  unint64_t v190 = 8 * v284;
                  if (v190 <= 1) {
                    unint64_t v191 = 1;
                  }
                  else {
                    unint64_t v191 = 8 * v284;
                  }
                  unint64_t v192 = v185 + v186;
                  unsigned int v193 = &v288.i8[v185 + v186];
                  if (v191) {
                    BOOL v194 = (v191 - 1) >> 32 == 0;
                  }
                  else {
                    BOOL v194 = 0;
                  }
                  char v195 = !v194;
                  uint64_t v196 = v191 & 0x7FFFFFFE0;
                  uint64_t v197 = v191 & 0x7FFFFFFF8;
                  unsigned int v198 = (char *)&v289 + v192;
                  unsigned int v199 = (long long *)(v279 + 16);
                  int v200 = v187;
                  uint64_t v201 = v279;
                  while (2)
                  {
                    int v202 = (char *)(v188 + v189 * v184);
                    int v203 = &v187[128 * v184];
                    if ((unint64_t)(&v193[128 * v184] - v202) < 0x20) {
                      char v204 = 1;
                    }
                    else {
                      char v204 = v195;
                    }
                    if (v204)
                    {
                      int v205 = 0;
LABEL_199:
                      unsigned int v215 = v205 + 1;
                      do
                      {
                        char v216 = *v202++;
                        *v203++ = v216;
                      }
                      while (v190 > v215++);
                    }
                    else
                    {
                      if (v191 >= 0x20)
                      {
                        unint64_t v207 = v199;
                        unsigned int v208 = v198;
                        uint64_t v209 = v191 & 0x7FFFFFFE0;
                        do
                        {
                          long long v210 = *v207;
                          *(v208 - 1) = *(v207 - 1);
                          *unsigned int v208 = v210;
                          v208 += 2;
                          v207 += 2;
                          v209 -= 32;
                        }
                        while (v209);
                        if (v191 == v196) {
                          goto LABEL_182;
                        }
                        uint64_t v206 = v191 & 0x7FFFFFFE0;
                        if ((v191 & 0x18) == 0)
                        {
                          v202 += v196;
                          v203 += v196;
                          int v205 = v191 & 0xFFFFFFE0;
                          goto LABEL_199;
                        }
                      }
                      else
                      {
                        uint64_t v206 = 0;
                      }
                      v203 += v197;
                      unint64_t v211 = v206 - (v191 & 0x7FFFFFFF8);
                      unsigned int v212 = (uint64_t *)(v201 + v206);
                      unsigned int v213 = &v200[v206];
                      do
                      {
                        uint64_t v214 = *v212++;
                        *(void *)unsigned int v213 = v214;
                        v213 += 8;
                        v211 += 8;
                      }
                      while (v211);
                      if (v191 != v197)
                      {
                        v202 += v197;
                        int v205 = v191 & 0xFFFFFFF8;
                        goto LABEL_199;
                      }
                    }
LABEL_182:
                    ++v184;
                    v198 += 128;
                    unsigned int v199 = (long long *)((char *)v199 + v189);
                    v201 += v189;
                    v200 += 128;
                    if (v184 == v175) {
                      goto LABEL_202;
                    }
                    continue;
                  }
                }
                float32x4_t v176 = vld1q_dup_f32((const float *)v173);
                int8x16_t v326 = (int8x16_t)v176;
                float32x4_t v327 = v176;
                float32x4_t v334 = v176;
                float32x4_t v335 = v176;
                float32x4_t v342 = v176;
                float32x4_t v343 = v176;
                float32x4_t v350 = v176;
                float32x4_t v351 = v176;
                uint64_t v175 = v283;
                if (v283) {
                  goto LABEL_171;
                }
              }
LABEL_202:
              uint64_t v218 = 0;
              __int32 v219 = v277;
              unsigned int v220 = v278;
              int v221 = v285;
              int v222 = v286;
              unsigned int v34 = a7;
              uint64_t v25 = v272;
              uint64_t v29 = 2 * a11;
              do
              {
                uint64_t v233 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,2u>::kSubblockPositions[v218 + 1];
                uint64_t v234 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,2u>::kSubblockPositions[v218];
                unsigned int v235 = (v221 - 4 * v234) & ~((v221 - 4 * (int)v234) >> 31);
                if (v235 >= 4) {
                  unsigned int v235 = 4;
                }
                unsigned int v236 = (v222 - 4 * v233) & ~((v222 - 4 * (int)v233) >> 31);
                if (v236 >= 4) {
                  unsigned int v236 = 4;
                }
                if (v235) {
                  BOOL v237 = v236 == 0;
                }
                else {
                  BOOL v237 = 1;
                }
                if (v237)
                {
                  char v232 = 0;
                }
                else
                {
                  long long v223 = &v288 + 32 * v233 + 2 * v234;
                  int8x16_t v224 = *v223;
                  int8x16_t v225 = v223[1];
                  int8x16_t v226 = v223[8];
                  int8x16_t v227 = v223[9];
                  int8x16_t v228 = v223[16];
                  int8x16_t v229 = v223[17];
                  v223 += 24;
                  int8x16_t v230 = *v223;
                  int8x16_t v231 = v223[1];
                  *__int32 v219 = v224;
                  v219[1] = v226;
                  v219[2] = v225;
                  v219[3] = v227;
                  v219[4] = v228;
                  v219[5] = v230;
                  v219[6] = v229;
                  v219[7] = v231;
                  v219 += 8;
                  char v232 = 127;
                }
                *v220++ = v232;
                v218 += 2;
              }
              while (v218 != 16);
LABEL_95:
              int v71 = __dst;
              if (v275) {
                goto LABEL_27;
              }
              goto LABEL_28;
            }
            uint64_t v76 = (int8x16_t *)v287;
          }
          else
          {
            uint64_t v76 = v71;
            if (v72) {
              goto LABEL_93;
            }
          }
          uint64_t v77 = 0;
          float32x4_t v78 = v76;
          do
          {
            uint64_t v92 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,2u>::kSubblockPositions[v77 + 1];
            uint64_t v93 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,2u>::kSubblockPositions[v77];
            unsigned int v94 = (v39 - 4 * v93) & ~((int)(v39 - 4 * v93) >> 31);
            if (v94 >= 4) {
              unsigned int v94 = 4;
            }
            unsigned int v95 = (v33 - 4 * v92) & ~((int)(v33 - 4 * v92) >> 31);
            if (v95 >= 4) {
              unsigned int v95 = 4;
            }
            if (v94) {
              BOOL v96 = v95 == 0;
            }
            else {
              BOOL v96 = 1;
            }
            if (v96)
            {
              char v91 = 0;
            }
            else
            {
              float32x4_t v79 = (long long *)(v70 + 4 * a11 * v92 + 32 * v93);
              float32x4_t v80 = (long long *)((char *)v79 + v28);
              long long v82 = *v79;
              long long v83 = v79[1];
              float32x4_t v81 = (long long *)((char *)v79 + v29);
              long long v84 = *v80;
              long long v85 = v80[1];
              long long v87 = *v81;
              long long v88 = v81[1];
              unsigned int v86 = (long long *)((char *)v81 + v28);
              long long v89 = *v86;
              long long v90 = v86[1];
              *float32x4_t v78 = (int8x16_t)v82;
              v78[1] = (int8x16_t)v84;
              v78[2] = (int8x16_t)v83;
              v78[3] = (int8x16_t)v85;
              v78[4] = (int8x16_t)v87;
              v78[5] = (int8x16_t)v89;
              v78[6] = (int8x16_t)v88;
              v78[7] = (int8x16_t)v90;
              v78 += 8;
              char v91 = 127;
            }
            *v69++ = v91;
            v77 += 2;
          }
          while (v77 != 16);
          unsigned int v34 = a7;
          if (v275)
          {
LABEL_27:
            memcpy(v71, v76, 0x400uLL);
            uint64_t v29 = 2 * a11;
            uint64_t v25 = v272;
          }
LABEL_28:
          BOOL v20 = v32++ == v263 >> 4;
        }
        while (!v20);
        BOOL v20 = v16++ == v255;
      }
      while (!v20);
    }
  }
}