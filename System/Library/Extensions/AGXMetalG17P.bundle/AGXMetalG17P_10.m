uint64_t AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, int a12)
{
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  int v20;
  BOOL v21;
  int v22;
  int v24;
  uint64_t result;
  uint64_t v26;
  uint32x2_t v27;
  int8x8_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  int v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  int v37;
  int v38;
  unsigned int v39;
  BOOL v40;
  int v41;
  int v43;
  uint64_t v44;
  int v45;
  BOOL v46;
  BOOL v47;
  __int32 v48;
  __int32 v49;
  unint64_t v50;
  unsigned int v51;
  unsigned int v52;
  unsigned int v53;
  unsigned int v54;
  unsigned int v55;
  unsigned int v56;
  int v57;
  uint64_t v58;
  BOOL v59;
  BOOL v60;
  int v61;
  unsigned int v62;
  uint64_t v63;
  char v64;
  char v65;
  unsigned int v66;
  unsigned int v67;
  int v68;
  char *v69;
  uint64_t v70;
  int32x4_t *v71;
  int v72;
  int32x4_t *v73;
  int v74;
  BOOL v75;
  int32x4_t *v76;
  uint64_t v77;
  float *v78;
  float32x2x2_t *v79;
  float32x2x2_t v80;
  int32x4_t v81;
  int32x4_t *v82;
  float32x2x2_t v83;
  int32x4_t v84;
  int32x4_t v85;
  float *v86;
  char v87;
  uint64_t v88;
  uint64_t v89;
  unsigned int v90;
  unsigned int v91;
  BOOL v92;
  unsigned int v93;
  uint64_t v94;
  int16x8_t v95;
  int32x4_t v96;
  int32x4_t v97;
  int32x4_t v98;
  int32x4_t v99;
  uint64_t v100;
  unsigned int v101;
  uint64_t v102;
  int16x8_t v103;
  int32x4_t v104;
  int32x4_t v105;
  int32x4_t v106;
  int32x4_t v107;
  uint64_t v108;
  unsigned int v109;
  uint64_t v110;
  int16x8_t v111;
  int32x4_t v112;
  int32x4_t v113;
  int32x4_t v114;
  int32x4_t v115;
  uint64_t v116;
  unsigned int v117;
  uint64_t v118;
  int16x8_t v119;
  int32x4_t v120;
  int32x4_t v121;
  int32x4_t v122;
  int32x4_t v123;
  uint64_t v124;
  unsigned int v125;
  uint64_t v126;
  int16x8_t v127;
  int32x4_t v128;
  int32x4_t v129;
  int32x4_t v130;
  int32x4_t v131;
  uint64_t v132;
  unsigned int v133;
  uint64_t v134;
  int16x8_t v135;
  int32x4_t v136;
  int32x4_t v137;
  int32x4_t v138;
  int32x4_t v139;
  uint64_t v140;
  unsigned int v141;
  uint64_t v142;
  int16x8_t v143;
  int32x4_t v144;
  int32x4_t v145;
  int32x4_t v146;
  int32x4_t v147;
  uint64_t v148;
  unsigned int v149;
  uint64_t v150;
  int16x8_t v151;
  int32x4_t v152;
  int32x4_t v153;
  int32x4_t v154;
  int32x4_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  __int8 *v159;
  uint64_t v160;
  uint64_t v161;
  unint64_t v162;
  unint64_t v163;
  uint64_t v164;
  __int8 *v165;
  BOOL v166;
  uint64_t v167;
  uint64_t v168;
  char v170;
  __int8 *v171;
  long long *v172;
  __int8 *v173;
  uint64_t v174;
  char *v175;
  char *v176;
  char v177;
  int v178;
  uint64_t v179;
  long long *v180;
  __int8 *v181;
  uint64_t v182;
  long long v183;
  uint64_t v184;
  uint64_t *v185;
  __int8 *v186;
  uint64_t v187;
  unsigned int v188;
  char v189;
  uint64_t v191;
  int32x4_t *v192;
  char *v193;
  int v194;
  int v195;
  int32x4_t *v196;
  float32x2x2_t v197;
  int32x4_t v198;
  int32x4_t v199;
  float32x2x2_t v200;
  int32x4_t v201;
  float *v202;
  char v203;
  uint64_t v204;
  uint64_t v205;
  unsigned int v206;
  unsigned int v207;
  BOOL v208;
  unsigned int v209;
  unsigned int v210;
  unsigned int v211;
  int v212;
  uint64_t v213;
  int v214;
  BOOL v215;
  BOOL v216;
  int v217;
  unint64_t v218;
  unsigned int v219;
  int v220;
  unsigned int v221;
  unsigned int v222;
  unsigned int v223;
  unsigned int v225;
  unsigned int v226;
  int v227;
  BOOL v228;
  BOOL v229;
  int8x8_t v230;
  int32x4_t *__dst;
  __int32 v232;
  unsigned int v233;
  unsigned int v234;
  int v235;
  uint64_t v238;
  int v239;
  unsigned int v240;
  unsigned int v241;
  int32x4_t *v242;
  uint64_t v243;
  int v244;
  unsigned int v245;
  int v246;
  void block[5];
  int32x4_t *v248;
  char *v249;
  uint64_t v250;
  uint64_t v251;
  unsigned int v252;
  unsigned int v253;
  unsigned int v254;
  unsigned int v255;
  unsigned __int8 v256;
  unsigned __int8 v257;
  unsigned char v258[512];
  int32x4_t v259;
  int32x4_t v260;
  int32x4_t v261;
  int32x4_t v262;
  int32x4_t v263;
  int32x4_t v264;
  int32x4_t v265;
  int32x4_t v266;
  int32x4_t v267;
  int32x4_t v268;
  int32x4_t v269;
  int32x4_t v270;
  int32x4_t v271;
  int32x4_t v272;
  int32x4_t v273;
  int32x4_t v274;
  int32x4_t v275;
  int32x4_t v276;
  int32x4_t v277;
  int32x4_t v278;
  int32x4_t v279;
  int32x4_t v280;
  int32x4_t v281;
  int32x4_t v282;
  int32x4_t v283;
  int32x4_t v284;
  int32x4_t v285;
  int32x4_t v286;
  int32x4_t v287;
  int32x4_t v288;
  int32x4_t v289;
  int32x4_t v290;
  uint64_t v291;

  v291 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  v241 = a8;
  v17 = a8 >> 4;
  v223 = a8 + a10 - 1;
  v225 = v223 >> 4;
  v18 = *(unsigned __int8 *)(*(void *)(a1 + 208) + 88);
  v19 = *(_DWORD *)(a1 + 112);
  v243 = a1;
  if (*(void *)(a1 + 168)) {
    v20 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    v20 = 0;
  }
  v21 = (v20 & 0xD00) == 0 || v20 == 768;
  v22 = v20 & 0xE00;
  v24 = !v21 && v22 != 1024;
  v246 = v24;
  result = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::isLevelTiled(a1, *(_DWORD *)(a1 + 144) + a12);
  v26 = a1;
  v235 = result;
  if (v17 <= v225)
  {
    v234 = a7 + a9 - 1;
    v222 = a7 >> 4;
    if (a7 >> 4 <= v234 >> 4)
    {
      v219 = a5 - 1;
      v245 = (a5 - 1) >> 4;
      v244 = ((a5 - 1) & 0xF) + 1;
      v220 = ((a6 - 1) & 0xF) + 1;
      v221 = (a6 - 1) >> 4;
      v27 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0xF0000000FLL);
      v28 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v27, 4uLL))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x2000000020, v27));
      v232 = v28.i32[0] | v28.i32[1];
      v229 = v28.i32[1] != 0;
      v230 = v28;
      v228 = v28.i32[0] != 0;
      v218 = 8 * v19 * (unint64_t)v18;
      v29 = a11;
      v30 = 4 * a11;
      result = 2 * a11;
      v233 = a7;
      do
      {
        v31 = (16 * v17) | 0xF;
        if (16 * v17 <= v241) {
          v32 = v241;
        }
        else {
          v32 = 16 * v17;
        }
        v33 = v222;
        if (v223 < v31) {
          v31 = v223;
        }
        v240 = 16 * v17;
        v227 = v32 - 16 * v17;
        v239 = v31 - v32 + 1;
        if (v17 == v221) {
          v34 = v220;
        }
        else {
          v34 = 16;
        }
        v238 = a3 + (v32 - v241) * v29;
        v226 = v34;
        do
        {
          v35 = 16 * v33;
          v36 = 16 * (v33 + 1) - 1;
          if (16 * v33 <= a7) {
            v37 = a7;
          }
          else {
            v37 = 16 * v33;
          }
          if (v234 < v36) {
            v36 = v234;
          }
          v38 = v36 - v37 + 1;
          if (v33 == v245) {
            v39 = v244;
          }
          else {
            v39 = 16;
          }
          v40 = 1;
          if (v240 >= v241 && v35 >= a7)
          {
            v41 = v244;
            if (v33 != v245) {
              v41 = 16;
            }
            v40 = v38 != v41 || v239 != v34;
          }
          if (v235)
          {
            v62 = 0;
            v63 = v218 >> (*(unsigned char *)(v26 + 57) != 0);
            v64 = 1;
            if (v63 > 127)
            {
              if (v63 > 511)
              {
                if (v63 == 512)
                {
                  v62 = 16;
                  v65 = 1;
                  v66 = 16;
                }
                else
                {
                  v65 = 1;
                  v66 = 0;
                  if (v63 == 1024)
                  {
                    v66 = 8;
                    v62 = 16;
                  }
                }
              }
              else if (v63 == 128)
              {
                v64 = 0;
                v65 = 0;
                v62 = 32;
                v66 = 32;
              }
              else
              {
                v65 = 1;
                v66 = 0;
                if (v63 == 256)
                {
                  v64 = 0;
                  v66 = 16;
                  v62 = 32;
                }
              }
            }
            else
            {
              v65 = 1;
              v66 = 0;
              switch(v63)
              {
                case 4:
                  v64 = 0;
                  v65 = 0;
                  v66 = 128;
                  v62 = 256;
                  break;
                case 5:
                case 6:
                case 7:
                case 9:
                case 10:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 17:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                  break;
                case 8:
                  v64 = 0;
                  v65 = 0;
                  v62 = 128;
                  v66 = 128;
                  break;
                case 16:
                  v64 = 0;
                  v65 = 0;
                  v66 = 64;
                  v62 = 128;
                  break;
                case 32:
                  v64 = 0;
                  v65 = 0;
                  v62 = 64;
                  v66 = 64;
                  break;
                default:
                  if (v63 == 64)
                  {
                    v64 = 0;
                    v65 = 0;
                    v66 = 32;
                    v62 = 64;
                  }
                  break;
              }
            }
            v209 = (v62 >> 4) - 1;
            if (v64)
            {
              v210 = 0;
              if (v65) {
                goto LABEL_244;
              }
LABEL_233:
              v211 = 32 - __clz(~(-1 << -(char)__clz(((v66 + 15) >> 4) - 1)));
              if (v211 | v210) {
                goto LABEL_234;
              }
LABEL_245:
              v213 = 0;
            }
            else
            {
              v210 = 32 - __clz(~(-1 << -(char)__clz(v209)));
              if ((v65 & 1) == 0) {
                goto LABEL_233;
              }
LABEL_244:
              v211 = 0;
              if (!v210) {
                goto LABEL_245;
              }
LABEL_234:
              v212 = 0;
              v213 = 0;
              v214 = v33 & v209;
              v215 = v210 != 0;
              v216 = v211 != 0;
              v217 = 1;
              do
              {
                --v210;
                if (v215) {
                  v213 |= (unint64_t)(v217 & v214) << v212++;
                }
                else {
                  v210 = 0;
                }
                --v211;
                if (v216) {
                  v213 |= (unint64_t)(v217 & v17 & ((v66 >> 4) - 1)) << v212++;
                }
                else {
                  v211 = 0;
                }
                v217 *= 2;
                --v212;
                v216 = v211 != 0;
                v215 = v210 != 0;
              }
              while (v211 | v210);
            }
            v50 = ((unint64_t)(v35 / v62 + v240 / v66 * ((v62 + v219) / v62)) << 14) + (v213 << 9);
            result = 2 * a11;
            goto LABEL_60;
          }
          if (v232)
          {
            v43 = 0;
            v44 = 0;
            v45 = 1;
            v46 = v229;
            v47 = v228;
            v48 = v230.i32[1];
            v49 = v230.i32[0];
            do
            {
              --v48;
              if (v46) {
                v44 |= (unint64_t)(v45 & v33) << v43++;
              }
              else {
                v48 = 0;
              }
              --v49;
              if (v47) {
                v44 |= (unint64_t)(v45 & v17) << v43++;
              }
              else {
                v49 = 0;
              }
              v45 *= 2;
              --v43;
              v47 = v49 != 0;
              v46 = v48 != 0;
            }
            while (v49 | v48);
          }
          else
          {
            v44 = 0;
          }
          v50 = v44 << 9;
LABEL_60:
          v51 = *(_DWORD *)(v26 + 128) >> (*(unsigned char *)(v26 + 144) + a12);
          if (v51 <= 1) {
            v51 = 1;
          }
          v52 = v51 + 15;
          if (v52 < 0x20) {
            v53 = 0;
          }
          else {
            v53 = 32 - __clz(~(-1 << -(char)__clz((v52 >> 4) - 1)));
          }
          v54 = *(_DWORD *)(v26 + 132) >> (*(unsigned char *)(v26 + 144) + a12);
          if (v54 <= 1) {
            v54 = 1;
          }
          v55 = v54 + 15;
          if (v55 < 0x20)
          {
            v56 = 0;
            if (!v53)
            {
LABEL_82:
              v58 = 0;
              goto LABEL_83;
            }
          }
          else
          {
            v56 = 32 - __clz(~(-1 << -(char)__clz((v55 >> 4) - 1)));
            if (!(v56 | v53)) {
              goto LABEL_82;
            }
          }
          v57 = 0;
          v58 = 0;
          v59 = v53 != 0;
          v60 = v56 != 0;
          v61 = 1;
          do
          {
            --v53;
            if (v59) {
              v58 |= (unint64_t)(v61 & v33) << v57++;
            }
            else {
              v53 = 0;
            }
            --v56;
            if (v60) {
              v58 |= (unint64_t)(v61 & v17) << v57++;
            }
            else {
              v56 = 0;
            }
            v61 *= 2;
            --v57;
            v60 = v56 != 0;
            v59 = v53 != 0;
          }
          while (v56 | v53);
LABEL_83:
          v67 = v37 - a7;
          v68 = v39 < 0x10 || v40;
          v69 = (char *)(a4 + 8 * v58);
          v70 = v238 + 2 * v67;
          v71 = (int32x4_t *)(a2 + v50);
          if (v34 < 0x10) {
            v72 = 1;
          }
          else {
            v72 = v68;
          }
          if (v246)
          {
            if (v72)
            {
              v73 = v71;
              v74 = v38;
              v75 = v40;
              memcpy(v258, v71, sizeof(v258));
              v40 = v75;
              v35 = 16 * v33;
              v29 = a11;
              v34 = v226;
              v38 = v74;
              v76 = (int32x4_t *)v258;
              v71 = v73;
              v26 = v243;
LABEL_93:
              __dst = v71;
              block[0] = MEMORY[0x263EF8330];
              block[1] = 3221225472;
              block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE10ELj1ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
              block[3] = &__block_descriptor_90_e5_v8__0l;
              block[4] = v26;
              v248 = v76;
              v256 = v39;
              v257 = v34;
              v252 = v227;
              v253 = v37 - v35;
              v249 = v69;
              v250 = v70;
              v251 = v29;
              v254 = v239;
              v255 = v38;
              v242 = v76;
              if (v40)
              {
                dispatch_sync(*(dispatch_queue_t *)(*(void *)(v26 + 8) + 7384), block);
                v76 = v242;
                v26 = v243;
                result = 2 * a11;
                a7 = v233;
                v30 = 4 * a11;
                goto LABEL_95;
              }
              v93 = *v69;
              if (v93 == 63)
              {
                v96 = v76[1];
                v97 = v76[2];
                v98 = v76[3];
                v99 = vuzp2q_s32(*v76, v97);
                v259 = vuzp1q_s32(*v76, v97);
                v261 = v99;
                v263 = vuzp1q_s32(v96, v98);
                v265 = vuzp2q_s32(v96, v98);
                v94 = 64;
              }
              else if (v93 == 1)
              {
                v95 = vld1q_dup_s16(v76->i16);
                v259 = (int32x4_t)v95;
                v261 = (int32x4_t)v95;
                v263 = (int32x4_t)v95;
                v265 = (int32x4_t)v95;
                v94 = 2;
              }
              else if (*v69)
              {
                v94 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v259, 32, (uint64_t)v76, v93);
                v76 = v242;
              }
              else
              {
                v94 = 0;
                v259 = 0uLL;
                v261 = 0uLL;
                v263 = 0uLL;
                v265 = 0uLL;
              }
              v100 = (uint64_t)v76->i64 + v94;
              v101 = v69[1];
              if (v101 == 63)
              {
                v104 = *(int32x4_t *)(v100 + 16);
                v105 = *(int32x4_t *)(v100 + 32);
                v106 = *(int32x4_t *)(v100 + 48);
                v107 = vuzp2q_s32(*(int32x4_t *)v100, v105);
                v267 = vuzp1q_s32(*(int32x4_t *)v100, v105);
                v269 = v107;
                v271 = vuzp1q_s32(v104, v106);
                v273 = vuzp2q_s32(v104, v106);
                v102 = 64;
              }
              else if (v101 == 1)
              {
                v103 = vld1q_dup_s16((const __int16 *)v100);
                v267 = (int32x4_t)v103;
                v269 = (int32x4_t)v103;
                v271 = (int32x4_t)v103;
                v273 = (int32x4_t)v103;
                v102 = 2;
              }
              else if (v69[1])
              {
                v102 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v267, 32, v100, v101);
              }
              else
              {
                v102 = 0;
                v267 = 0uLL;
                v269 = 0uLL;
                v271 = 0uLL;
                v273 = 0uLL;
              }
              v108 = v100 + v102;
              v109 = v69[2];
              if (v109 == 63)
              {
                v112 = *(int32x4_t *)(v108 + 16);
                v113 = *(int32x4_t *)(v108 + 32);
                v114 = *(int32x4_t *)(v108 + 48);
                v115 = vuzp2q_s32(*(int32x4_t *)v108, v113);
                v260 = vuzp1q_s32(*(int32x4_t *)v108, v113);
                v262 = v115;
                v264 = vuzp1q_s32(v112, v114);
                v266 = vuzp2q_s32(v112, v114);
                v110 = 64;
              }
              else if (v109 == 1)
              {
                v111 = vld1q_dup_s16((const __int16 *)v108);
                v260 = (int32x4_t)v111;
                v262 = (int32x4_t)v111;
                v264 = (int32x4_t)v111;
                v266 = (int32x4_t)v111;
                v110 = 2;
              }
              else if (v69[2])
              {
                v110 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v260, 32, v108, v109);
              }
              else
              {
                v110 = 0;
                v260 = 0uLL;
                v262 = 0uLL;
                v264 = 0uLL;
                v266 = 0uLL;
              }
              v116 = v108 + v110;
              v117 = v69[3];
              if (v117 == 63)
              {
                v120 = *(int32x4_t *)(v116 + 16);
                v121 = *(int32x4_t *)(v116 + 32);
                v122 = *(int32x4_t *)(v116 + 48);
                v123 = vuzp2q_s32(*(int32x4_t *)v116, v121);
                v268 = vuzp1q_s32(*(int32x4_t *)v116, v121);
                v270 = v123;
                v272 = vuzp1q_s32(v120, v122);
                v274 = vuzp2q_s32(v120, v122);
                v118 = 64;
              }
              else if (v117 == 1)
              {
                v119 = vld1q_dup_s16((const __int16 *)v116);
                v268 = (int32x4_t)v119;
                v270 = (int32x4_t)v119;
                v272 = (int32x4_t)v119;
                v274 = (int32x4_t)v119;
                v118 = 2;
              }
              else if (v69[3])
              {
                v118 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v268, 32, v116, v117);
              }
              else
              {
                v118 = 0;
                v268 = 0uLL;
                v270 = 0uLL;
                v272 = 0uLL;
                v274 = 0uLL;
              }
              v124 = v116 + v118;
              v125 = v69[4];
              if (v125 == 63)
              {
                v128 = *(int32x4_t *)(v124 + 16);
                v129 = *(int32x4_t *)(v124 + 32);
                v130 = *(int32x4_t *)(v124 + 48);
                v131 = vuzp2q_s32(*(int32x4_t *)v124, v129);
                v275 = vuzp1q_s32(*(int32x4_t *)v124, v129);
                v277 = v131;
                v279 = vuzp1q_s32(v128, v130);
                v281 = vuzp2q_s32(v128, v130);
                v126 = 64;
              }
              else if (v125 == 1)
              {
                v127 = vld1q_dup_s16((const __int16 *)v124);
                v275 = (int32x4_t)v127;
                v277 = (int32x4_t)v127;
                v279 = (int32x4_t)v127;
                v281 = (int32x4_t)v127;
                v126 = 2;
              }
              else if (v69[4])
              {
                v126 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v275, 32, v124, v125);
              }
              else
              {
                v126 = 0;
                v275 = 0uLL;
                v277 = 0uLL;
                v279 = 0uLL;
                v281 = 0uLL;
              }
              v132 = v124 + v126;
              v133 = v69[5];
              if (v133 == 63)
              {
                v136 = *(int32x4_t *)(v132 + 16);
                v137 = *(int32x4_t *)(v132 + 32);
                v138 = *(int32x4_t *)(v132 + 48);
                v139 = vuzp2q_s32(*(int32x4_t *)v132, v137);
                v283 = vuzp1q_s32(*(int32x4_t *)v132, v137);
                v285 = v139;
                v287 = vuzp1q_s32(v136, v138);
                v289 = vuzp2q_s32(v136, v138);
                v134 = 64;
              }
              else if (v133 == 1)
              {
                v135 = vld1q_dup_s16((const __int16 *)v132);
                v283 = (int32x4_t)v135;
                v285 = (int32x4_t)v135;
                v287 = (int32x4_t)v135;
                v289 = (int32x4_t)v135;
                v134 = 2;
              }
              else if (v69[5])
              {
                v134 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v283, 32, v132, v133);
              }
              else
              {
                v134 = 0;
                v283 = 0uLL;
                v285 = 0uLL;
                v287 = 0uLL;
                v289 = 0uLL;
              }
              v140 = v132 + v134;
              v141 = v69[6];
              if (v141 == 63)
              {
                v144 = *(int32x4_t *)(v140 + 16);
                v145 = *(int32x4_t *)(v140 + 32);
                v146 = *(int32x4_t *)(v140 + 48);
                v147 = vuzp2q_s32(*(int32x4_t *)v140, v145);
                v276 = vuzp1q_s32(*(int32x4_t *)v140, v145);
                v278 = v147;
                v280 = vuzp1q_s32(v144, v146);
                v282 = vuzp2q_s32(v144, v146);
                v142 = 64;
              }
              else if (v141 == 1)
              {
                v143 = vld1q_dup_s16((const __int16 *)v140);
                v276 = (int32x4_t)v143;
                v278 = (int32x4_t)v143;
                v280 = (int32x4_t)v143;
                v282 = (int32x4_t)v143;
                v142 = 2;
              }
              else if (v69[6])
              {
                v142 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v276, 32, v140, v141);
              }
              else
              {
                v142 = 0;
                v276 = 0uLL;
                v278 = 0uLL;
                v280 = 0uLL;
                v282 = 0uLL;
              }
              v148 = v140 + v142;
              v149 = v69[7];
              if (v149 == 63)
              {
                v152 = *(int32x4_t *)(v148 + 16);
                v153 = *(int32x4_t *)(v148 + 32);
                v154 = *(int32x4_t *)(v148 + 48);
                v155 = vuzp2q_s32(*(int32x4_t *)v148, v153);
                v284 = vuzp1q_s32(*(int32x4_t *)v148, v153);
                v286 = v155;
                v288 = vuzp1q_s32(v152, v154);
                v290 = vuzp2q_s32(v152, v154);
                v150 = v254;
                if (v254) {
                  goto LABEL_171;
                }
              }
              else
              {
                if (v149 != 1)
                {
                  if (v69[7])
                  {
                    AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v284, 32, v148, v149);
                    v150 = v254;
                    if (!v254) {
                      goto LABEL_205;
                    }
                  }
                  else
                  {
                    v284 = 0uLL;
                    v286 = 0uLL;
                    v288 = 0uLL;
                    v290 = 0uLL;
                    v150 = v254;
                    if (!v254) {
                      goto LABEL_205;
                    }
                  }
LABEL_171:
                  if (!v255) {
                    goto LABEL_205;
                  }
                  v156 = 0;
                  v157 = 32 * v252;
                  v158 = 2 * v253;
                  v159 = &v259.i8[v157 + v158];
                  v160 = v250;
                  v161 = v251;
                  v162 = 2 * v255;
                  if (v162 <= 1) {
                    v163 = 1;
                  }
                  else {
                    v163 = 2 * v255;
                  }
                  v164 = v157 + v158;
                  v165 = &v259.i8[v157 + v158];
                  if (v163) {
                    v166 = (v163 - 1) >> 32 == 0;
                  }
                  else {
                    v166 = 0;
                  }
                  v167 = v163 & 0x1FFFFFFE0;
                  v168 = v163 & 0x1FFFFFFF8;
                  v170 = !v166 || v163 < 8;
                  v171 = &v260.i8[v164];
                  v172 = (long long *)(v250 + 16);
                  v173 = v159;
                  v174 = v250;
                  while (2)
                  {
                    v175 = (char *)(v160 + v161 * v156);
                    v176 = &v159[32 * v156];
                    if ((unint64_t)(&v165[32 * v156] - v175) < 0x20) {
                      v177 = 1;
                    }
                    else {
                      v177 = v170;
                    }
                    if (v177)
                    {
                      v178 = 0;
LABEL_202:
                      v188 = v178 + 1;
                      do
                      {
                        v189 = *v175++;
                        *v176++ = v189;
                      }
                      while (v162 > v188++);
                    }
                    else
                    {
                      if (v163 >= 0x20)
                      {
                        v180 = v172;
                        v181 = v171;
                        v182 = v163 & 0x1FFFFFFE0;
                        do
                        {
                          v183 = *v180;
                          *((_OWORD *)v181 - 1) = *(v180 - 1);
                          *(_OWORD *)v181 = v183;
                          v181 += 32;
                          v180 += 2;
                          v182 -= 32;
                        }
                        while (v182);
                        if (v163 == v167) {
                          goto LABEL_185;
                        }
                        v179 = v163 & 0x1FFFFFFE0;
                        if ((v163 & 0x18) == 0)
                        {
                          v175 += v167;
                          v176 += v167;
                          v178 = v163 & 0xFFFFFFE0;
                          goto LABEL_202;
                        }
                      }
                      else
                      {
                        v179 = 0;
                      }
                      v176 += v168;
                      v184 = v179 - v168;
                      v185 = (uint64_t *)(v174 + v179);
                      v186 = &v173[v179];
                      do
                      {
                        v187 = *v185++;
                        *(void *)v186 = v187;
                        v186 += 8;
                        v184 += 8;
                      }
                      while (v184);
                      if (v163 != v168)
                      {
                        v175 += v168;
                        v178 = v163 & 0xFFFFFFF8;
                        goto LABEL_202;
                      }
                    }
LABEL_185:
                    ++v156;
                    v171 += 32;
                    v172 = (long long *)((char *)v172 + v161);
                    v174 += v161;
                    v173 += 32;
                    if (v156 == v150) {
                      goto LABEL_205;
                    }
                    continue;
                  }
                }
                v151 = vld1q_dup_s16((const __int16 *)v148);
                v284 = (int32x4_t)v151;
                v286 = (int32x4_t)v151;
                v288 = (int32x4_t)v151;
                v290 = (int32x4_t)v151;
                v150 = v254;
                if (v254) {
                  goto LABEL_171;
                }
              }
LABEL_205:
              v191 = 0;
              v192 = v248;
              v193 = v249;
              v194 = v256;
              v195 = v257;
              a7 = v233;
              v76 = v242;
              v26 = v243;
              v30 = 4 * a11;
              result = 2 * a11;
              do
              {
                v204 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,1u>::kSubblockPositions[v191 + 1];
                v205 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,1u>::kSubblockPositions[v191];
                v206 = (v194 - 8 * v205) & ~((v194 - 8 * (int)v205) >> 31);
                if (v206 >= 8) {
                  v206 = 8;
                }
                v207 = (v195 - 4 * v204) & ~((v195 - 4 * (int)v204) >> 31);
                if (v207 >= 4) {
                  v207 = 4;
                }
                if (v206) {
                  v208 = v207 == 0;
                }
                else {
                  v208 = 1;
                }
                if (v208)
                {
                  v203 = 0;
                }
                else
                {
                  v196 = &v259 + 8 * v204 + v205;
                  v197 = (float32x2x2_t)*v196;
                  v198 = v196[2];
                  v199 = vzip2q_s32(*v196, v198);
                  v200 = (float32x2x2_t)v196[4];
                  v201 = v196[6];
                  v202 = (float *)v192;
                  vst2_f32(v202, v197);
                  v202 += 4;
                  vst2_f32(v202, v200);
                  v192[2] = v199;
                  v192[3] = vzip2q_s32((int32x4_t)v200, v201);
                  v192 += 4;
                  v203 = 63;
                }
                *v193++ = v203;
                v191 += 2;
              }
              while (v191 != 16);
LABEL_95:
              v71 = __dst;
              if (v246) {
                goto LABEL_27;
              }
              goto LABEL_28;
            }
            v76 = (int32x4_t *)v258;
          }
          else
          {
            v76 = v71;
            if (v72) {
              goto LABEL_93;
            }
          }
          v77 = 0;
          v78 = (float *)v76;
          do
          {
            v88 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,1u>::kSubblockPositions[v77 + 1];
            v89 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,1u>::kSubblockPositions[v77];
            v90 = (v39 - 8 * v89) & ~((int)(v39 - 8 * v89) >> 31);
            if (v90 >= 8) {
              v90 = 8;
            }
            v91 = (v34 - 4 * v88) & ~((int)(v34 - 4 * v88) >> 31);
            if (v91 >= 4) {
              v91 = 4;
            }
            if (v90) {
              v92 = v91 == 0;
            }
            else {
              v92 = 1;
            }
            if (v92)
            {
              v87 = 0;
            }
            else
            {
              v79 = (float32x2x2_t *)(v70 + v30 * v88 + 16 * v89);
              v80 = *v79;
              v81 = *(int32x4_t *)((char *)v79 + v29);
              v82 = (int32x4_t *)((char *)v79 + result);
              v83 = (float32x2x2_t)*v82;
              v84 = *(int32x4_t *)((char *)v82 + v29);
              v85 = vzip2q_s32(*v82, v84);
              v86 = v78;
              vst2_f32(v86, v80);
              v86 += 4;
              vst2_f32(v86, v83);
              *((int32x4_t *)v78 + 2) = vzip2q_s32((int32x4_t)v80, v81);
              *((int32x4_t *)v78 + 3) = v85;
              v78 += 16;
              v87 = 63;
            }
            *v69++ = v87;
            v77 += 2;
          }
          while (v77 != 16);
          a7 = v233;
          if (v246)
          {
LABEL_27:
            memcpy(v71, v76, 0x200uLL);
            result = 2 * a11;
            v30 = 4 * a11;
            v26 = v243;
          }
LABEL_28:
          v21 = v33++ == v234 >> 4;
        }
        while (!v21);
        v21 = v17++ == v225;
      }
      while (!v21);
    }
  }
  return result;
}

uint64_t AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, char a12)
{
  uint64_t v257 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v206 = a8;
  unsigned int v190 = a8 + a10 - 1;
  uint64_t v207 = a1;
  if (*(void *)(a1 + 168)) {
    int v17 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v17 = 0;
  }
  unsigned int v18 = a5 - 1;
  unsigned int v19 = a6 - 1;
  unsigned int v20 = a8 >> 4;
  unsigned int v189 = v190 >> 4;
  BOOL v21 = (v17 & 0xD00) == 0 || v17 == 768;
  int v22 = v17 & 0xE00;
  int v24 = !v21 && v22 != 1024;
  int v211 = v24;
  uint64_t result = a1;
  if (*(unsigned char *)(a1 + 232))
  {
    unsigned int v26 = *(unsigned __int8 *)(a1 + 255);
    unsigned int v27 = *(unsigned __int8 *)(a1 + 254);
    char v28 = __clz(v18);
    if (1 << v26 >= a6 || a5 >> v27)
    {
      if (!(a6 >> v26) && 1 << v27 < a5)
      {
        if (a6 < 2) {
          unsigned int v31 = 0;
        }
        else {
          unsigned int v31 = __clz(~(-1 << -(char)__clz(v19))) - 32;
        }
        v27 += v26 + v31;
        unsigned int v26 = -v31;
      }
    }
    else
    {
      unsigned int v29 = 32 - __clz(~(-1 << -v28));
      unsigned int v30 = v27 + v26;
      if (a5 < 2) {
        unsigned int v29 = 0;
      }
      unsigned int v26 = v30 - v29;
      unsigned int v27 = v29;
    }
    if (a5 < 2)
    {
      if (v27) {
        goto LABEL_27;
      }
    }
    else if (32 - __clz(~(-1 << -v28)) < v27)
    {
LABEL_27:
      BOOL v201 = 0;
LABEL_32:
      unsigned int v198 = v27 - 4;
      unsigned int v194 = v26 - 4;
      int v33 = -1 << *(unsigned char *)(*(void *)(a1 + 208) + 48);
      unsigned int v187 = (((~v33 + a5) & v33) + ~(-1 << v27)) >> v27;
      goto LABEL_33;
    }
    if (a6 < 2) {
      unsigned int v32 = 0;
    }
    else {
      unsigned int v32 = 32 - __clz(~(-1 << -(char)__clz(v19)));
    }
    BOOL v201 = v32 >= v26;
    goto LABEL_32;
  }
  BOOL v201 = 0;
  unsigned int v187 = 0;
  unsigned int v194 = 0;
  unsigned int v198 = 0;
LABEL_33:
  if (v20 <= v189)
  {
    unsigned int v200 = a7 + a9 - 1;
    unsigned int v186 = a7 >> 4;
    if (a7 >> 4 <= v200 >> 4)
    {
      unsigned int v209 = v18 >> 4;
      unsigned int v185 = v19 >> 4;
      int v208 = (v18 & 0xF) + 1;
      int v184 = (v19 & 0xF) + 1;
      uint32x2_t v34 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0xF0000000FLL);
      int8x8_t v35 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v34, 4uLL))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x2000000020, v34));
      __int32 v196 = v35.i32[0] | v35.i32[1];
      BOOL v192 = v35.i32[1] != 0;
      int8x8_t v193 = v35;
      BOOL v191 = v35.i32[0] != 0;
      unsigned int v199 = a7;
      do
      {
        unsigned int v36 = (16 * v20) | 0xF;
        if (16 * v20 <= v206) {
          int v37 = v206;
        }
        else {
          int v37 = 16 * v20;
        }
        if (v190 < v36) {
          unsigned int v36 = v190;
        }
        int v197 = v37 - 16 * v20;
        int v205 = v36 - v37 + 1;
        unsigned int v38 = v186;
        int v39 = v184;
        if (v20 != v185) {
          int v39 = 16;
        }
        unsigned int v212 = v39;
        uint64_t v40 = v20 & ~(-1 << v194);
        uint64_t v204 = a3 + (v37 - v206) * a11;
        do
        {
          unsigned int v41 = 16 * v38;
          unsigned int v42 = 16 * (v38 + 1) - 1;
          if (16 * v38 <= a7) {
            int v43 = a7;
          }
          else {
            int v43 = 16 * v38;
          }
          if (v200 < v42) {
            unsigned int v42 = v200;
          }
          int v44 = v42 - v43 + 1;
          if (v38 == v209) {
            unsigned int v45 = v208;
          }
          else {
            unsigned int v45 = 16;
          }
          BOOL v46 = 1;
          if (16 * v20 >= v206 && v41 >= a7)
          {
            int v47 = v208;
            if (v38 != v209) {
              int v47 = 16;
            }
            BOOL v46 = v44 != v47 || v205 != v212;
          }
          if (v201)
          {
            if (v198 | v194)
            {
              int v49 = 0;
              uint64_t v50 = 0;
              int v51 = 1;
              BOOL v52 = v198 != 0;
              BOOL v53 = v194 != 0;
              unsigned int v54 = v198;
              unsigned int v55 = v194;
              do
              {
                --v54;
                if (v52) {
                  v50 |= (unint64_t)(v38 & ~(-1 << v198) & v51) << v49++;
                }
                else {
                  unsigned int v54 = 0;
                }
                --v55;
                if (v53) {
                  v50 |= (unint64_t)(v40 & v51) << v49++;
                }
                else {
                  unsigned int v55 = 0;
                }
                v51 *= 2;
                --v49;
                BOOL v53 = v55 != 0;
                BOOL v52 = v54 != 0;
              }
              while (v55 | v54);
            }
            else
            {
              uint64_t v50 = 0;
            }
            uint64_t v63 = *(void *)(result + 320) * ((v38 >> v198) + (v20 >> v194) * v187) + (v50 << 9);
          }
          else
          {
            if (v196)
            {
              int v56 = 0;
              uint64_t v57 = 0;
              int v58 = 1;
              BOOL v59 = v192;
              BOOL v60 = v191;
              __int32 v61 = v193.i32[1];
              __int32 v62 = v193.i32[0];
              do
              {
                --v61;
                if (v59) {
                  v57 |= (unint64_t)(v58 & v38) << v56++;
                }
                else {
                  __int32 v61 = 0;
                }
                --v62;
                if (v60) {
                  v57 |= (unint64_t)(v58 & v20) << v56++;
                }
                else {
                  __int32 v62 = 0;
                }
                v58 *= 2;
                --v56;
                BOOL v60 = v62 != 0;
                BOOL v59 = v61 != 0;
              }
              while (v62 | v61);
            }
            else
            {
              uint64_t v57 = 0;
            }
            uint64_t v63 = v57 << 9;
          }
          unsigned int v64 = *(_DWORD *)(result + 128) >> (*(unsigned char *)(result + 144) + a12);
          if (v64 <= 1) {
            unsigned int v64 = 1;
          }
          unsigned int v65 = v64 + 15;
          if (v65 < 0x20) {
            unsigned int v66 = 0;
          }
          else {
            unsigned int v66 = 32 - __clz(~(-1 << -(char)__clz((v65 >> 4) - 1)));
          }
          unsigned int v67 = *(_DWORD *)(result + 132) >> (*(unsigned char *)(result + 144) + a12);
          if (v67 <= 1) {
            unsigned int v67 = 1;
          }
          unsigned int v68 = v67 + 15;
          if (v68 < 0x20)
          {
            unsigned int v69 = 0;
            if (!v66)
            {
LABEL_109:
              uint64_t v71 = 0;
              goto LABEL_110;
            }
          }
          else
          {
            unsigned int v69 = 32 - __clz(~(-1 << -(char)__clz((v68 >> 4) - 1)));
            if (!(v69 | v66)) {
              goto LABEL_109;
            }
          }
          int v70 = 0;
          uint64_t v71 = 0;
          BOOL v72 = v66 != 0;
          BOOL v73 = v69 != 0;
          int v74 = 1;
          do
          {
            --v66;
            if (v72) {
              v71 |= (unint64_t)(v74 & v38) << v70++;
            }
            else {
              unsigned int v66 = 0;
            }
            --v69;
            if (v73) {
              v71 |= (unint64_t)(v74 & v20) << v70++;
            }
            else {
              unsigned int v69 = 0;
            }
            v74 *= 2;
            --v70;
            BOOL v73 = v69 != 0;
            BOOL v72 = v66 != 0;
          }
          while (v69 | v66);
LABEL_110:
          unsigned int v75 = v43 - a7;
          int v76 = v45 < 0x10 || v46;
          v77 = (char *)(a4 + 8 * v71);
          unint64_t v78 = v204 + 2 * v75;
          v79 = (uint16x8_t *)(a2 + v63);
          if (v212 < 0x10) {
            int v80 = 1;
          }
          else {
            int v80 = v76;
          }
          v210 = v79;
          if (v211)
          {
            v81 = (uint16x8_t *)__dst;
            if (!v80) {
              goto LABEL_122;
            }
            v195 = (char *)(a4 + 8 * v71);
            int v82 = v44;
            char v83 = v45;
            uint64_t v84 = v40;
            BOOL v85 = v46;
            memcpy(__dst, v79, sizeof(__dst));
            BOOL v46 = v85;
            uint64_t v40 = v84;
            LOBYTE(v45) = v83;
            int v44 = v82;
            v77 = v195;
            uint64_t result = v207;
          }
          else
          {
            v81 = v79;
            if (!v80)
            {
LABEL_122:
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock(v78, a11, v81, v77, v45, v212);
              a7 = v199;
              goto LABEL_217;
            }
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE8ELj1ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = result;
          v214 = v81;
          unsigned __int8 v222 = v45;
          unsigned __int8 v223 = v212;
          unsigned int v218 = v197;
          unsigned int v219 = v43 - v41;
          v215 = v77;
          unint64_t v216 = v78;
          uint64_t v217 = a11;
          unsigned int v220 = v205;
          unsigned int v221 = v44;
          if (v46)
          {
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(result + 8) + 7384), block);
            a7 = v199;
            goto LABEL_217;
          }
          unsigned int v86 = *v77;
          if (v86 == 63)
          {
            int32x4_t v89 = (int32x4_t)v81[1];
            int32x4_t v90 = (int32x4_t)v81[2];
            int32x4_t v91 = (int32x4_t)v81[3];
            int32x4_t v92 = vuzp2q_s32(*(int32x4_t *)v81, v90);
            int32x4_t v225 = vuzp1q_s32(*(int32x4_t *)v81, v90);
            int32x4_t v227 = v92;
            int32x4_t v229 = vuzp1q_s32(v89, v91);
            int32x4_t v231 = vuzp2q_s32(v89, v91);
            uint64_t v87 = 64;
          }
          else if (v86 == 1)
          {
            int16x8_t v88 = vld1q_dup_s16(v81->i16);
            int32x4_t v225 = (int32x4_t)v88;
            int32x4_t v227 = (int32x4_t)v88;
            int32x4_t v229 = (int32x4_t)v88;
            int32x4_t v231 = (int32x4_t)v88;
            uint64_t v87 = 2;
          }
          else if (*v77)
          {
            uint64_t v87 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v225, 32, (uint64_t)v81, v86);
          }
          else
          {
            uint64_t v87 = 0;
            int32x4_t v225 = 0uLL;
            int32x4_t v227 = 0uLL;
            int32x4_t v229 = 0uLL;
            int32x4_t v231 = 0uLL;
          }
          uint64_t v93 = (uint64_t)v81->i64 + v87;
          unsigned int v94 = v77[1];
          if (v94 == 63)
          {
            int32x4_t v97 = *(int32x4_t *)(v93 + 16);
            int32x4_t v98 = *(int32x4_t *)(v93 + 32);
            int32x4_t v99 = *(int32x4_t *)(v93 + 48);
            int32x4_t v100 = vuzp2q_s32(*(int32x4_t *)v93, v98);
            int32x4_t v233 = vuzp1q_s32(*(int32x4_t *)v93, v98);
            int32x4_t v235 = v100;
            int32x4_t v237 = vuzp1q_s32(v97, v99);
            int32x4_t v239 = vuzp2q_s32(v97, v99);
            uint64_t v95 = 64;
          }
          else if (v94 == 1)
          {
            int16x8_t v96 = vld1q_dup_s16((const __int16 *)v93);
            int32x4_t v233 = (int32x4_t)v96;
            int32x4_t v235 = (int32x4_t)v96;
            int32x4_t v237 = (int32x4_t)v96;
            int32x4_t v239 = (int32x4_t)v96;
            uint64_t v95 = 2;
          }
          else if (v77[1])
          {
            uint64_t v95 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v233, 32, v93, v94);
          }
          else
          {
            uint64_t v95 = 0;
            int32x4_t v233 = 0uLL;
            int32x4_t v235 = 0uLL;
            int32x4_t v237 = 0uLL;
            int32x4_t v239 = 0uLL;
          }
          uint64_t v101 = v93 + v95;
          unsigned int v102 = v77[2];
          if (v102 == 63)
          {
            int32x4_t v105 = *(int32x4_t *)(v101 + 16);
            int32x4_t v106 = *(int32x4_t *)(v101 + 32);
            int32x4_t v107 = *(int32x4_t *)(v101 + 48);
            int32x4_t v108 = vuzp2q_s32(*(int32x4_t *)v101, v106);
            int32x4_t v226 = vuzp1q_s32(*(int32x4_t *)v101, v106);
            int32x4_t v228 = v108;
            int32x4_t v230 = vuzp1q_s32(v105, v107);
            int32x4_t v232 = vuzp2q_s32(v105, v107);
            uint64_t v103 = 64;
          }
          else if (v102 == 1)
          {
            int16x8_t v104 = vld1q_dup_s16((const __int16 *)v101);
            int32x4_t v226 = (int32x4_t)v104;
            int32x4_t v228 = (int32x4_t)v104;
            int32x4_t v230 = (int32x4_t)v104;
            int32x4_t v232 = (int32x4_t)v104;
            uint64_t v103 = 2;
          }
          else if (v77[2])
          {
            uint64_t v103 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v226, 32, v101, v102);
          }
          else
          {
            uint64_t v103 = 0;
            int32x4_t v226 = 0uLL;
            int32x4_t v228 = 0uLL;
            int32x4_t v230 = 0uLL;
            int32x4_t v232 = 0uLL;
          }
          uint64_t v109 = v101 + v103;
          unsigned int v110 = v77[3];
          if (v110 == 63)
          {
            int32x4_t v113 = *(int32x4_t *)(v109 + 16);
            int32x4_t v114 = *(int32x4_t *)(v109 + 32);
            int32x4_t v115 = *(int32x4_t *)(v109 + 48);
            int32x4_t v116 = vuzp2q_s32(*(int32x4_t *)v109, v114);
            int32x4_t v234 = vuzp1q_s32(*(int32x4_t *)v109, v114);
            int32x4_t v236 = v116;
            int32x4_t v238 = vuzp1q_s32(v113, v115);
            int32x4_t v240 = vuzp2q_s32(v113, v115);
            uint64_t v111 = 64;
          }
          else if (v110 == 1)
          {
            int16x8_t v112 = vld1q_dup_s16((const __int16 *)v109);
            int32x4_t v234 = (int32x4_t)v112;
            int32x4_t v236 = (int32x4_t)v112;
            int32x4_t v238 = (int32x4_t)v112;
            int32x4_t v240 = (int32x4_t)v112;
            uint64_t v111 = 2;
          }
          else if (v77[3])
          {
            uint64_t v111 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v234, 32, v109, v110);
          }
          else
          {
            uint64_t v111 = 0;
            int32x4_t v234 = 0uLL;
            int32x4_t v236 = 0uLL;
            int32x4_t v238 = 0uLL;
            int32x4_t v240 = 0uLL;
          }
          uint64_t v117 = v109 + v111;
          unsigned int v118 = v77[4];
          if (v118 == 63)
          {
            int32x4_t v121 = *(int32x4_t *)(v117 + 16);
            int32x4_t v122 = *(int32x4_t *)(v117 + 32);
            int32x4_t v123 = *(int32x4_t *)(v117 + 48);
            int32x4_t v124 = vuzp2q_s32(*(int32x4_t *)v117, v122);
            int32x4_t v241 = vuzp1q_s32(*(int32x4_t *)v117, v122);
            int32x4_t v243 = v124;
            int32x4_t v245 = vuzp1q_s32(v121, v123);
            int32x4_t v247 = vuzp2q_s32(v121, v123);
            uint64_t v119 = 64;
          }
          else if (v118 == 1)
          {
            int16x8_t v120 = vld1q_dup_s16((const __int16 *)v117);
            int32x4_t v241 = (int32x4_t)v120;
            int32x4_t v243 = (int32x4_t)v120;
            int32x4_t v245 = (int32x4_t)v120;
            int32x4_t v247 = (int32x4_t)v120;
            uint64_t v119 = 2;
          }
          else if (v77[4])
          {
            uint64_t v119 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v241, 32, v117, v118);
          }
          else
          {
            uint64_t v119 = 0;
            int32x4_t v241 = 0uLL;
            int32x4_t v243 = 0uLL;
            int32x4_t v245 = 0uLL;
            int32x4_t v247 = 0uLL;
          }
          uint64_t v125 = v117 + v119;
          unsigned int v126 = v77[5];
          if (v126 == 63)
          {
            int32x4_t v129 = *(int32x4_t *)(v125 + 16);
            int32x4_t v130 = *(int32x4_t *)(v125 + 32);
            int32x4_t v131 = *(int32x4_t *)(v125 + 48);
            int32x4_t v132 = vuzp2q_s32(*(int32x4_t *)v125, v130);
            int32x4_t v249 = vuzp1q_s32(*(int32x4_t *)v125, v130);
            int32x4_t v251 = v132;
            int32x4_t v253 = vuzp1q_s32(v129, v131);
            int32x4_t v255 = vuzp2q_s32(v129, v131);
            uint64_t v127 = 64;
          }
          else if (v126 == 1)
          {
            int16x8_t v128 = vld1q_dup_s16((const __int16 *)v125);
            int32x4_t v249 = (int32x4_t)v128;
            int32x4_t v251 = (int32x4_t)v128;
            int32x4_t v253 = (int32x4_t)v128;
            int32x4_t v255 = (int32x4_t)v128;
            uint64_t v127 = 2;
          }
          else if (v77[5])
          {
            uint64_t v127 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v249, 32, v125, v126);
          }
          else
          {
            uint64_t v127 = 0;
            int32x4_t v249 = 0uLL;
            int32x4_t v251 = 0uLL;
            int32x4_t v253 = 0uLL;
            int32x4_t v255 = 0uLL;
          }
          uint64_t v133 = v125 + v127;
          unsigned int v134 = v77[6];
          if (v134 == 63)
          {
            int32x4_t v137 = *(int32x4_t *)(v133 + 16);
            int32x4_t v138 = *(int32x4_t *)(v133 + 32);
            int32x4_t v139 = *(int32x4_t *)(v133 + 48);
            int32x4_t v140 = vuzp2q_s32(*(int32x4_t *)v133, v138);
            int32x4_t v242 = vuzp1q_s32(*(int32x4_t *)v133, v138);
            int32x4_t v244 = v140;
            int32x4_t v246 = vuzp1q_s32(v137, v139);
            int32x4_t v248 = vuzp2q_s32(v137, v139);
            uint64_t v135 = 64;
          }
          else if (v134 == 1)
          {
            int16x8_t v136 = vld1q_dup_s16((const __int16 *)v133);
            int32x4_t v242 = (int32x4_t)v136;
            int32x4_t v244 = (int32x4_t)v136;
            int32x4_t v246 = (int32x4_t)v136;
            int32x4_t v248 = (int32x4_t)v136;
            uint64_t v135 = 2;
          }
          else if (v77[6])
          {
            uint64_t v135 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v242, 32, v133, v134);
          }
          else
          {
            uint64_t v135 = 0;
            int32x4_t v242 = 0uLL;
            int32x4_t v244 = 0uLL;
            int32x4_t v246 = 0uLL;
            int32x4_t v248 = 0uLL;
          }
          uint64_t v141 = v133 + v135;
          unsigned int v142 = v77[7];
          if (v142 == 63)
          {
            int32x4_t v145 = *(int32x4_t *)(v141 + 16);
            int32x4_t v146 = *(int32x4_t *)(v141 + 32);
            int32x4_t v147 = *(int32x4_t *)(v141 + 48);
            int32x4_t v148 = vuzp2q_s32(*(int32x4_t *)v141, v146);
            int32x4_t v250 = vuzp1q_s32(*(int32x4_t *)v141, v146);
            int32x4_t v252 = v148;
            int32x4_t v254 = vuzp1q_s32(v145, v147);
            int32x4_t v256 = vuzp2q_s32(v145, v147);
            a7 = v199;
            uint64_t v143 = v220;
            if (!v220) {
              goto LABEL_216;
            }
          }
          else
          {
            a7 = v199;
            if (v142 == 1)
            {
              int16x8_t v144 = vld1q_dup_s16((const __int16 *)v141);
              int32x4_t v250 = (int32x4_t)v144;
              int32x4_t v252 = (int32x4_t)v144;
              int32x4_t v254 = (int32x4_t)v144;
              int32x4_t v256 = (int32x4_t)v144;
              uint64_t v143 = v220;
              if (!v220) {
                goto LABEL_216;
              }
            }
            else if (v142)
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v250, 32, v141, v142);
              uint64_t v143 = v220;
              if (!v220) {
                goto LABEL_216;
              }
            }
            else
            {
              int32x4_t v250 = 0uLL;
              int32x4_t v252 = 0uLL;
              int32x4_t v254 = 0uLL;
              int32x4_t v256 = 0uLL;
              uint64_t v143 = v220;
              if (!v220) {
                goto LABEL_216;
              }
            }
          }
          if (v221)
          {
            uint64_t v149 = 0;
            uint64_t v150 = 32 * v218;
            uint64_t v151 = 2 * v219;
            v152 = &v225.i8[v150 + v151];
            unint64_t v153 = v216;
            uint64_t v154 = v217;
            unint64_t v155 = 2 * v221;
            if (v155 <= 1) {
              unint64_t v156 = 1;
            }
            else {
              unint64_t v156 = 2 * v221;
            }
            uint64_t v157 = v150 + v151;
            v158 = &v225.i8[v150 + v151];
            if (v156) {
              BOOL v159 = (v156 - 1) >> 32 == 0;
            }
            else {
              BOOL v159 = 0;
            }
            uint64_t v160 = v156 & 0x1FFFFFFE0;
            uint64_t v161 = v156 & 0x1FFFFFFF8;
            char v163 = !v159 || v156 < 8;
            v164 = &v226.i8[v157];
            v165 = (long long *)(v216 + 16);
            v166 = v152;
            unint64_t v167 = v216;
            do
            {
              v168 = (char *)(v153 + v154 * v149);
              v169 = &v152[32 * v149];
              if ((unint64_t)(&v158[32 * v149] - v168) < 0x20) {
                char v170 = 1;
              }
              else {
                char v170 = v163;
              }
              if (v170)
              {
                int v171 = 0;
                goto LABEL_213;
              }
              if (v156 >= 0x20)
              {
                v173 = v165;
                v174 = v164;
                uint64_t v175 = v156 & 0x1FFFFFFE0;
                do
                {
                  long long v176 = *v173;
                  *((_OWORD *)v174 - 1) = *(v173 - 1);
                  *(_OWORD *)v174 = v176;
                  v174 += 32;
                  v173 += 2;
                  v175 -= 32;
                }
                while (v175);
                if (v156 == v160) {
                  goto LABEL_196;
                }
                uint64_t v172 = v156 & 0x1FFFFFFE0;
                if ((v156 & 0x18) == 0)
                {
                  v168 += v160;
                  v169 += v160;
                  int v171 = v156 & 0xFFFFFFE0;
                  goto LABEL_213;
                }
              }
              else
              {
                uint64_t v172 = 0;
              }
              v169 += v161;
              uint64_t v177 = v172 - v161;
              v178 = (uint64_t *)(v167 + v172);
              v179 = &v166[v172];
              do
              {
                uint64_t v180 = *v178++;
                *(void *)v179 = v180;
                v179 += 8;
                v177 += 8;
              }
              while (v177);
              if (v156 == v161) {
                goto LABEL_196;
              }
              v168 += v161;
              int v171 = v156 & 0xFFFFFFF8;
LABEL_213:
              unsigned int v181 = v171 + 1;
              do
              {
                char v182 = *v168++;
                *v169++ = v182;
              }
              while (v155 > v181++);
LABEL_196:
              ++v149;
              v164 += 32;
              v165 = (long long *)((char *)v165 + v154);
              v167 += v154;
              v166 += 32;
            }
            while (v149 != v143);
          }
LABEL_216:
          AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)&v225, 32, v214, v215, v222, v223);
LABEL_217:
          if (v211) {
            memcpy(v210, v81, 0x200uLL);
          }
          BOOL v21 = v38++ == v200 >> 4;
          uint64_t result = v207;
        }
        while (!v21);
        BOOL v21 = v20++ == v189;
      }
      while (!v21);
    }
  }
  return result;
}

uint64_t AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, char a12)
{
  uint64_t v289 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v240 = a8;
  unsigned int v222 = a8 + a10 - 1;
  uint64_t v241 = a1;
  if (*(void *)(a1 + 168)) {
    int v17 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v17 = 0;
  }
  unsigned int v18 = a5 - 1;
  unsigned int v19 = a6 - 1;
  unsigned int v20 = a8 >> 4;
  unsigned int v221 = v222 >> 4;
  BOOL v21 = (v17 & 0xD00) == 0 || v17 == 768;
  int v22 = v17 & 0xE00;
  int v24 = !v21 && v22 != 1024;
  int v244 = v24;
  uint64_t result = a1;
  if (*(unsigned char *)(a1 + 232))
  {
    unsigned int v26 = *(unsigned __int8 *)(a1 + 255);
    unsigned int v27 = *(unsigned __int8 *)(a1 + 254);
    char v28 = __clz(v18);
    if (1 << v26 >= a6 || a5 >> v27)
    {
      if (!(a6 >> v26) && 1 << v27 < a5)
      {
        if (a6 < 2) {
          unsigned int v31 = 0;
        }
        else {
          unsigned int v31 = __clz(~(-1 << -(char)__clz(v19))) - 32;
        }
        v27 += v26 + v31;
        unsigned int v26 = -v31;
      }
    }
    else
    {
      unsigned int v29 = 32 - __clz(~(-1 << -v28));
      unsigned int v30 = v27 + v26;
      if (a5 < 2) {
        unsigned int v29 = 0;
      }
      unsigned int v26 = v30 - v29;
      unsigned int v27 = v29;
    }
    if (a5 < 2)
    {
      if (v27) {
        goto LABEL_27;
      }
    }
    else if (32 - __clz(~(-1 << -v28)) < v27)
    {
LABEL_27:
      BOOL v235 = 0;
LABEL_32:
      unsigned int v231 = v27 - 4;
      unsigned int v227 = v26 - 4;
      int v33 = -1 << *(unsigned char *)(*(void *)(a1 + 208) + 48);
      unsigned int v219 = (((~v33 + a5) & v33) + ~(-1 << v27)) >> v27;
      goto LABEL_33;
    }
    if (a6 < 2) {
      unsigned int v32 = 0;
    }
    else {
      unsigned int v32 = 32 - __clz(~(-1 << -(char)__clz(v19)));
    }
    BOOL v235 = v32 >= v26;
    goto LABEL_32;
  }
  BOOL v235 = 0;
  unsigned int v219 = 0;
  unsigned int v227 = 0;
  unsigned int v231 = 0;
LABEL_33:
  if (v20 <= v221)
  {
    unsigned int v234 = a7 + a9 - 1;
    unsigned int v218 = a7 >> 4;
    if (a7 >> 4 <= v234 >> 4)
    {
      unsigned int v243 = v18 >> 4;
      unsigned int v217 = v19 >> 4;
      int v242 = (v18 & 0xF) + 1;
      int v216 = (v19 & 0xF) + 1;
      int v215 = ~(-1 << v227);
      uint32x2_t v34 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0xF0000000FLL);
      int8x8_t v35 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v34, 4uLL))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x2000000020, v34));
      __int32 v229 = v35.i32[0] | v35.i32[1];
      BOOL v225 = v35.i32[1] != 0;
      int8x8_t v226 = v35;
      BOOL v224 = v35.i32[0] != 0;
      unsigned int v233 = a7;
      do
      {
        unsigned int v36 = (16 * v20) | 0xF;
        if (16 * v20 <= v240) {
          int v37 = v240;
        }
        else {
          int v37 = 16 * v20;
        }
        if (v222 < v36) {
          unsigned int v36 = v222;
        }
        int v230 = v37 - 16 * v20;
        int v239 = v36 - v37 + 1;
        unsigned int v38 = v218;
        if (v20 == v217) {
          unsigned int v39 = v216;
        }
        else {
          unsigned int v39 = 16;
        }
        int v40 = v20 & v215;
        uint64_t v238 = a3 + (v37 - v240) * a11;
        unsigned int v223 = v39;
        do
        {
          unsigned int v41 = 16 * v38;
          unsigned int v42 = 16 * (v38 + 1) - 1;
          if (16 * v38 <= a7) {
            int v43 = a7;
          }
          else {
            int v43 = 16 * v38;
          }
          if (v234 < v42) {
            unsigned int v42 = v234;
          }
          int v44 = v42 - v43 + 1;
          if (v38 == v243) {
            unsigned int v45 = v242;
          }
          else {
            unsigned int v45 = 16;
          }
          BOOL v46 = 1;
          if (16 * v20 >= v240 && v41 >= a7)
          {
            int v47 = v242;
            if (v38 != v243) {
              int v47 = 16;
            }
            BOOL v46 = v44 != v47 || v239 != v39;
          }
          if (v235)
          {
            if (v231 | v227)
            {
              int v49 = 0;
              uint64_t v50 = 0;
              int v51 = 1;
              BOOL v52 = v231 != 0;
              BOOL v53 = v227 != 0;
              unsigned int v54 = v231;
              unsigned int v55 = v227;
              do
              {
                --v54;
                if (v52) {
                  v50 |= (unint64_t)(v38 & ~(-1 << v231) & v51) << v49++;
                }
                else {
                  unsigned int v54 = 0;
                }
                --v55;
                if (v53) {
                  v50 |= (unint64_t)(v40 & v51) << v49++;
                }
                else {
                  unsigned int v55 = 0;
                }
                v51 *= 2;
                --v49;
                BOOL v53 = v55 != 0;
                BOOL v52 = v54 != 0;
              }
              while (v55 | v54);
            }
            else
            {
              uint64_t v50 = 0;
            }
            uint64_t v63 = *(void *)(result + 320) * ((v38 >> v231) + (v20 >> v227) * v219) + (v50 << 9);
          }
          else
          {
            if (v229)
            {
              int v56 = 0;
              uint64_t v57 = 0;
              int v58 = 1;
              BOOL v59 = v225;
              BOOL v60 = v224;
              __int32 v61 = v226.i32[1];
              __int32 v62 = v226.i32[0];
              do
              {
                --v61;
                if (v59) {
                  v57 |= (unint64_t)(v58 & v38) << v56++;
                }
                else {
                  __int32 v61 = 0;
                }
                --v62;
                if (v60) {
                  v57 |= (unint64_t)(v58 & v20) << v56++;
                }
                else {
                  __int32 v62 = 0;
                }
                v58 *= 2;
                --v56;
                BOOL v60 = v62 != 0;
                BOOL v59 = v61 != 0;
              }
              while (v62 | v61);
            }
            else
            {
              uint64_t v57 = 0;
            }
            uint64_t v63 = v57 << 9;
          }
          unsigned int v64 = *(_DWORD *)(result + 128) >> (*(unsigned char *)(result + 144) + a12);
          if (v64 <= 1) {
            unsigned int v64 = 1;
          }
          unsigned int v65 = v64 + 15;
          if (v65 < 0x20) {
            unsigned int v66 = 0;
          }
          else {
            unsigned int v66 = 32 - __clz(~(-1 << -(char)__clz((v65 >> 4) - 1)));
          }
          unsigned int v67 = *(_DWORD *)(result + 132) >> (*(unsigned char *)(result + 144) + a12);
          if (v67 <= 1) {
            unsigned int v67 = 1;
          }
          unsigned int v68 = v67 + 15;
          if (v68 < 0x20)
          {
            unsigned int v69 = 0;
            if (!v66)
            {
LABEL_111:
              uint64_t v71 = 0;
              goto LABEL_112;
            }
          }
          else
          {
            unsigned int v69 = 32 - __clz(~(-1 << -(char)__clz((v68 >> 4) - 1)));
            if (!(v69 | v66)) {
              goto LABEL_111;
            }
          }
          int v70 = 0;
          uint64_t v71 = 0;
          BOOL v72 = v66 != 0;
          BOOL v73 = v69 != 0;
          int v74 = 1;
          do
          {
            --v66;
            if (v72) {
              v71 |= (unint64_t)(v74 & v38) << v70++;
            }
            else {
              unsigned int v66 = 0;
            }
            --v69;
            if (v73) {
              v71 |= (unint64_t)(v74 & v20) << v70++;
            }
            else {
              unsigned int v69 = 0;
            }
            v74 *= 2;
            --v70;
            BOOL v73 = v69 != 0;
            BOOL v72 = v66 != 0;
          }
          while (v69 | v66);
LABEL_112:
          unsigned int v75 = v43 - a7;
          int v76 = v45 < 0x10 || v46;
          v77 = (char *)(a4 + 8 * v71);
          uint64_t v78 = v238 + 2 * v75;
          v79 = (int32x4_t *)(a2 + v63);
          if (v39 < 0x10) {
            int v80 = 1;
          }
          else {
            int v80 = v76;
          }
          if (v244)
          {
            if (v80)
            {
              int v228 = v44;
              v81 = v79;
              memcpy(v256, v79, sizeof(v256));
              unsigned int v41 = 16 * v38;
              unsigned int v39 = v223;
              int v44 = v228;
              int v82 = (int32x4_t *)v256;
              v79 = v81;
              uint64_t result = v241;
LABEL_122:
              __dst = v79;
              block[0] = MEMORY[0x263EF8330];
              block[1] = 3221225472;
              block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE8ELj1ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
              block[3] = &__block_descriptor_90_e5_v8__0l;
              block[4] = result;
              int32x4_t v246 = v82;
              unsigned __int8 v254 = v45;
              unsigned __int8 v255 = v39;
              unsigned int v250 = v230;
              unsigned int v251 = v43 - v41;
              int32x4_t v247 = v77;
              uint64_t v248 = v78;
              uint64_t v249 = a11;
              unsigned int v252 = v239;
              unsigned int v253 = v44;
              if (v46)
              {
                dispatch_sync(*(dispatch_queue_t *)(*(void *)(result + 8) + 7384), block);
                uint64_t result = v241;
                a7 = v233;
                int v40 = v20 & v215;
                goto LABEL_124;
              }
              unsigned int v99 = *v77;
              if (v99 == 63)
              {
                int32x4_t v102 = v82[1];
                int32x4_t v103 = v82[2];
                int32x4_t v104 = v82[3];
                int32x4_t v105 = vuzp2q_s32(*v82, v103);
                int32x4_t v257 = vuzp1q_s32(*v82, v103);
                int32x4_t v259 = v105;
                int32x4_t v261 = vuzp1q_s32(v102, v104);
                int32x4_t v263 = vuzp2q_s32(v102, v104);
                uint64_t v100 = 64;
              }
              else if (v99 == 1)
              {
                int16x8_t v101 = vld1q_dup_s16(v82->i16);
                int32x4_t v257 = (int32x4_t)v101;
                int32x4_t v259 = (int32x4_t)v101;
                int32x4_t v261 = (int32x4_t)v101;
                int32x4_t v263 = (int32x4_t)v101;
                uint64_t v100 = 2;
              }
              else if (*v77)
              {
                uint64_t v100 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v257, 32, (uint64_t)v82, v99);
              }
              else
              {
                uint64_t v100 = 0;
                int32x4_t v257 = 0uLL;
                int32x4_t v259 = 0uLL;
                int32x4_t v261 = 0uLL;
                int32x4_t v263 = 0uLL;
              }
              uint64_t v106 = (uint64_t)v82->i64 + v100;
              unsigned int v107 = v77[1];
              if (v107 == 63)
              {
                int32x4_t v110 = *(int32x4_t *)(v106 + 16);
                int32x4_t v111 = *(int32x4_t *)(v106 + 32);
                int32x4_t v112 = *(int32x4_t *)(v106 + 48);
                int32x4_t v113 = vuzp2q_s32(*(int32x4_t *)v106, v111);
                int32x4_t v265 = vuzp1q_s32(*(int32x4_t *)v106, v111);
                int32x4_t v267 = v113;
                int32x4_t v269 = vuzp1q_s32(v110, v112);
                int32x4_t v271 = vuzp2q_s32(v110, v112);
                uint64_t v108 = 64;
              }
              else if (v107 == 1)
              {
                int16x8_t v109 = vld1q_dup_s16((const __int16 *)v106);
                int32x4_t v265 = (int32x4_t)v109;
                int32x4_t v267 = (int32x4_t)v109;
                int32x4_t v269 = (int32x4_t)v109;
                int32x4_t v271 = (int32x4_t)v109;
                uint64_t v108 = 2;
              }
              else if (v77[1])
              {
                uint64_t v108 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v265, 32, v106, v107);
              }
              else
              {
                uint64_t v108 = 0;
                int32x4_t v265 = 0uLL;
                int32x4_t v267 = 0uLL;
                int32x4_t v269 = 0uLL;
                int32x4_t v271 = 0uLL;
              }
              uint64_t v114 = v106 + v108;
              unsigned int v115 = v77[2];
              if (v115 == 63)
              {
                int32x4_t v118 = *(int32x4_t *)(v114 + 16);
                int32x4_t v119 = *(int32x4_t *)(v114 + 32);
                int32x4_t v120 = *(int32x4_t *)(v114 + 48);
                int32x4_t v121 = vuzp2q_s32(*(int32x4_t *)v114, v119);
                int32x4_t v258 = vuzp1q_s32(*(int32x4_t *)v114, v119);
                int32x4_t v260 = v121;
                int32x4_t v262 = vuzp1q_s32(v118, v120);
                int32x4_t v264 = vuzp2q_s32(v118, v120);
                uint64_t v116 = 64;
              }
              else if (v115 == 1)
              {
                int16x8_t v117 = vld1q_dup_s16((const __int16 *)v114);
                int32x4_t v258 = (int32x4_t)v117;
                int32x4_t v260 = (int32x4_t)v117;
                int32x4_t v262 = (int32x4_t)v117;
                int32x4_t v264 = (int32x4_t)v117;
                uint64_t v116 = 2;
              }
              else if (v77[2])
              {
                uint64_t v116 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v258, 32, v114, v115);
              }
              else
              {
                uint64_t v116 = 0;
                int32x4_t v258 = 0uLL;
                int32x4_t v260 = 0uLL;
                int32x4_t v262 = 0uLL;
                int32x4_t v264 = 0uLL;
              }
              uint64_t v122 = v114 + v116;
              unsigned int v123 = v77[3];
              if (v123 == 63)
              {
                int32x4_t v126 = *(int32x4_t *)(v122 + 16);
                int32x4_t v127 = *(int32x4_t *)(v122 + 32);
                int32x4_t v128 = *(int32x4_t *)(v122 + 48);
                int32x4_t v129 = vuzp2q_s32(*(int32x4_t *)v122, v127);
                int32x4_t v266 = vuzp1q_s32(*(int32x4_t *)v122, v127);
                int32x4_t v268 = v129;
                int32x4_t v270 = vuzp1q_s32(v126, v128);
                int32x4_t v272 = vuzp2q_s32(v126, v128);
                uint64_t v124 = 64;
              }
              else if (v123 == 1)
              {
                int16x8_t v125 = vld1q_dup_s16((const __int16 *)v122);
                int32x4_t v266 = (int32x4_t)v125;
                int32x4_t v268 = (int32x4_t)v125;
                int32x4_t v270 = (int32x4_t)v125;
                int32x4_t v272 = (int32x4_t)v125;
                uint64_t v124 = 2;
              }
              else if (v77[3])
              {
                uint64_t v124 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v266, 32, v122, v123);
              }
              else
              {
                uint64_t v124 = 0;
                int32x4_t v266 = 0uLL;
                int32x4_t v268 = 0uLL;
                int32x4_t v270 = 0uLL;
                int32x4_t v272 = 0uLL;
              }
              uint64_t v130 = v122 + v124;
              unsigned int v131 = v77[4];
              if (v131 == 63)
              {
                int32x4_t v134 = *(int32x4_t *)(v130 + 16);
                int32x4_t v135 = *(int32x4_t *)(v130 + 32);
                int32x4_t v136 = *(int32x4_t *)(v130 + 48);
                int32x4_t v137 = vuzp2q_s32(*(int32x4_t *)v130, v135);
                int32x4_t v273 = vuzp1q_s32(*(int32x4_t *)v130, v135);
                int32x4_t v275 = v137;
                int32x4_t v277 = vuzp1q_s32(v134, v136);
                int32x4_t v279 = vuzp2q_s32(v134, v136);
                uint64_t v132 = 64;
              }
              else if (v131 == 1)
              {
                int16x8_t v133 = vld1q_dup_s16((const __int16 *)v130);
                int32x4_t v273 = (int32x4_t)v133;
                int32x4_t v275 = (int32x4_t)v133;
                int32x4_t v277 = (int32x4_t)v133;
                int32x4_t v279 = (int32x4_t)v133;
                uint64_t v132 = 2;
              }
              else if (v77[4])
              {
                uint64_t v132 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v273, 32, v130, v131);
              }
              else
              {
                uint64_t v132 = 0;
                int32x4_t v273 = 0uLL;
                int32x4_t v275 = 0uLL;
                int32x4_t v277 = 0uLL;
                int32x4_t v279 = 0uLL;
              }
              uint64_t v138 = v130 + v132;
              unsigned int v139 = v77[5];
              if (v139 == 63)
              {
                int32x4_t v142 = *(int32x4_t *)(v138 + 16);
                int32x4_t v143 = *(int32x4_t *)(v138 + 32);
                int32x4_t v144 = *(int32x4_t *)(v138 + 48);
                int32x4_t v145 = vuzp2q_s32(*(int32x4_t *)v138, v143);
                int32x4_t v281 = vuzp1q_s32(*(int32x4_t *)v138, v143);
                int32x4_t v283 = v145;
                int32x4_t v285 = vuzp1q_s32(v142, v144);
                int32x4_t v287 = vuzp2q_s32(v142, v144);
                uint64_t v140 = 64;
              }
              else if (v139 == 1)
              {
                int16x8_t v141 = vld1q_dup_s16((const __int16 *)v138);
                int32x4_t v281 = (int32x4_t)v141;
                int32x4_t v283 = (int32x4_t)v141;
                int32x4_t v285 = (int32x4_t)v141;
                int32x4_t v287 = (int32x4_t)v141;
                uint64_t v140 = 2;
              }
              else if (v77[5])
              {
                uint64_t v140 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v281, 32, v138, v139);
              }
              else
              {
                uint64_t v140 = 0;
                int32x4_t v281 = 0uLL;
                int32x4_t v283 = 0uLL;
                int32x4_t v285 = 0uLL;
                int32x4_t v287 = 0uLL;
              }
              uint64_t v146 = v138 + v140;
              unsigned int v147 = v77[6];
              if (v147 == 63)
              {
                int32x4_t v150 = *(int32x4_t *)(v146 + 16);
                int32x4_t v151 = *(int32x4_t *)(v146 + 32);
                int32x4_t v152 = *(int32x4_t *)(v146 + 48);
                int32x4_t v153 = vuzp2q_s32(*(int32x4_t *)v146, v151);
                int32x4_t v274 = vuzp1q_s32(*(int32x4_t *)v146, v151);
                int32x4_t v276 = v153;
                int32x4_t v278 = vuzp1q_s32(v150, v152);
                int32x4_t v280 = vuzp2q_s32(v150, v152);
                uint64_t v148 = 64;
              }
              else if (v147 == 1)
              {
                int16x8_t v149 = vld1q_dup_s16((const __int16 *)v146);
                int32x4_t v274 = (int32x4_t)v149;
                int32x4_t v276 = (int32x4_t)v149;
                int32x4_t v278 = (int32x4_t)v149;
                int32x4_t v280 = (int32x4_t)v149;
                uint64_t v148 = 2;
              }
              else if (v77[6])
              {
                uint64_t v148 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v274, 32, v146, v147);
              }
              else
              {
                uint64_t v148 = 0;
                int32x4_t v274 = 0uLL;
                int32x4_t v276 = 0uLL;
                int32x4_t v278 = 0uLL;
                int32x4_t v280 = 0uLL;
              }
              uint64_t v154 = v146 + v148;
              unsigned int v155 = v77[7];
              if (v155 == 63)
              {
                int32x4_t v158 = *(int32x4_t *)(v154 + 16);
                int32x4_t v159 = *(int32x4_t *)(v154 + 32);
                int32x4_t v160 = *(int32x4_t *)(v154 + 48);
                int32x4_t v161 = vuzp2q_s32(*(int32x4_t *)v154, v159);
                int32x4_t v282 = vuzp1q_s32(*(int32x4_t *)v154, v159);
                int32x4_t v284 = v161;
                int32x4_t v286 = vuzp1q_s32(v158, v160);
                int32x4_t v288 = vuzp2q_s32(v158, v160);
                uint64_t v156 = v252;
                if (v252) {
                  goto LABEL_200;
                }
              }
              else
              {
                if (v155 != 1)
                {
                  if (v77[7])
                  {
                    AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v282, 32, v154, v155);
                    uint64_t v156 = v252;
                    if (!v252) {
                      goto LABEL_234;
                    }
                  }
                  else
                  {
                    int32x4_t v282 = 0uLL;
                    int32x4_t v284 = 0uLL;
                    int32x4_t v286 = 0uLL;
                    int32x4_t v288 = 0uLL;
                    uint64_t v156 = v252;
                    if (!v252) {
                      goto LABEL_234;
                    }
                  }
LABEL_200:
                  if (!v253) {
                    goto LABEL_234;
                  }
                  uint64_t v162 = 0;
                  uint64_t v163 = 32 * v250;
                  uint64_t v164 = 2 * v251;
                  v165 = &v257.i8[v163 + v164];
                  uint64_t v166 = v248;
                  uint64_t v167 = v249;
                  unint64_t v168 = 2 * v253;
                  if (v168 <= 1) {
                    unint64_t v169 = 1;
                  }
                  else {
                    unint64_t v169 = 2 * v253;
                  }
                  uint64_t v170 = v163 + v164;
                  int v171 = &v257.i8[v163 + v164];
                  if (v169) {
                    BOOL v172 = (v169 - 1) >> 32 == 0;
                  }
                  else {
                    BOOL v172 = 0;
                  }
                  uint64_t v173 = v169 & 0x1FFFFFFE0;
                  uint64_t v174 = v169 & 0x1FFFFFFF8;
                  char v176 = !v172 || v169 < 8;
                  uint64_t v177 = &v258.i8[v170];
                  v178 = (long long *)(v248 + 16);
                  v179 = v165;
                  uint64_t v180 = v248;
                  while (2)
                  {
                    unsigned int v181 = (char *)(v166 + v167 * v162);
                    char v182 = &v165[32 * v162];
                    if ((unint64_t)(&v171[32 * v162] - v181) < 0x20) {
                      char v183 = 1;
                    }
                    else {
                      char v183 = v176;
                    }
                    if (v183)
                    {
                      int v184 = 0;
LABEL_231:
                      unsigned int v194 = v184 + 1;
                      do
                      {
                        char v195 = *v181++;
                        *v182++ = v195;
                      }
                      while (v168 > v194++);
                    }
                    else
                    {
                      if (v169 >= 0x20)
                      {
                        unsigned int v186 = v178;
                        unsigned int v187 = v177;
                        uint64_t v188 = v169 & 0x1FFFFFFE0;
                        do
                        {
                          long long v189 = *v186;
                          *((_OWORD *)v187 - 1) = *(v186 - 1);
                          *(_OWORD *)unsigned int v187 = v189;
                          v187 += 32;
                          v186 += 2;
                          v188 -= 32;
                        }
                        while (v188);
                        if (v169 == v173) {
                          goto LABEL_214;
                        }
                        uint64_t v185 = v169 & 0x1FFFFFFE0;
                        if ((v169 & 0x18) == 0)
                        {
                          v181 += v173;
                          v182 += v173;
                          int v184 = v169 & 0xFFFFFFE0;
                          goto LABEL_231;
                        }
                      }
                      else
                      {
                        uint64_t v185 = 0;
                      }
                      v182 += v174;
                      uint64_t v190 = v185 - v174;
                      BOOL v191 = (uint64_t *)(v180 + v185);
                      BOOL v192 = &v179[v185];
                      do
                      {
                        uint64_t v193 = *v191++;
                        *(void *)BOOL v192 = v193;
                        v192 += 8;
                        v190 += 8;
                      }
                      while (v190);
                      if (v169 != v174)
                      {
                        v181 += v174;
                        int v184 = v169 & 0xFFFFFFF8;
                        goto LABEL_231;
                      }
                    }
LABEL_214:
                    ++v162;
                    v177 += 32;
                    v178 = (long long *)((char *)v178 + v167);
                    v180 += v167;
                    v179 += 32;
                    if (v162 == v156) {
                      goto LABEL_234;
                    }
                    continue;
                  }
                }
                int16x8_t v157 = vld1q_dup_s16((const __int16 *)v154);
                int32x4_t v282 = (int32x4_t)v157;
                int32x4_t v284 = (int32x4_t)v157;
                int32x4_t v286 = (int32x4_t)v157;
                int32x4_t v288 = (int32x4_t)v157;
                uint64_t v156 = v252;
                if (v252) {
                  goto LABEL_200;
                }
              }
LABEL_234:
              uint64_t v197 = 0;
              unsigned int v198 = v246;
              unsigned int v199 = v247;
              int v200 = v254;
              int v201 = v255;
              a7 = v233;
              uint64_t result = v241;
              int v40 = v20 & v215;
              do
              {
                uint64_t v210 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,1u>::kSubblockPositions[v197 + 1];
                uint64_t v211 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,1u>::kSubblockPositions[v197];
                unsigned int v212 = (v200 - 8 * v211) & ~((v200 - 8 * (int)v211) >> 31);
                if (v212 >= 8) {
                  unsigned int v212 = 8;
                }
                unsigned int v213 = (v201 - 4 * v210) & ~((v201 - 4 * (int)v210) >> 31);
                if (v213 >= 4) {
                  unsigned int v213 = 4;
                }
                if (v212) {
                  BOOL v214 = v213 == 0;
                }
                else {
                  BOOL v214 = 1;
                }
                if (v214)
                {
                  char v209 = 0;
                }
                else
                {
                  v202 = &v257 + 8 * v210 + v211;
                  float32x2x2_t v203 = (float32x2x2_t)*v202;
                  int32x4_t v204 = v202[2];
                  int32x4_t v205 = vzip2q_s32(*v202, v204);
                  float32x2x2_t v206 = (float32x2x2_t)v202[4];
                  int32x4_t v207 = v202[6];
                  int v208 = (float *)v198;
                  vst2_f32(v208, v203);
                  v208 += 4;
                  vst2_f32(v208, v206);
                  v198[2] = v205;
                  v198[3] = vzip2q_s32((int32x4_t)v206, v207);
                  v198 += 4;
                  char v209 = 63;
                }
                *v199++ = v209;
                v197 += 2;
              }
              while (v197 != 16);
LABEL_124:
              v79 = __dst;
              if (v244) {
                goto LABEL_47;
              }
              goto LABEL_48;
            }
            int v82 = (int32x4_t *)v256;
          }
          else
          {
            int v82 = v79;
            if (v80) {
              goto LABEL_122;
            }
          }
          uint64_t v83 = 0;
          uint64_t v84 = (float *)v82;
          do
          {
            uint64_t v94 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,1u>::kSubblockPositions[v83 + 1];
            uint64_t v95 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,1u>::kSubblockPositions[v83];
            unsigned int v96 = (v45 - 8 * v95) & ~((int)(v45 - 8 * v95) >> 31);
            if (v96 >= 8) {
              unsigned int v96 = 8;
            }
            unsigned int v97 = (v39 - 4 * v94) & ~((int)(v39 - 4 * v94) >> 31);
            if (v97 >= 4) {
              unsigned int v97 = 4;
            }
            if (v96) {
              BOOL v98 = v97 == 0;
            }
            else {
              BOOL v98 = 1;
            }
            if (v98)
            {
              char v93 = 0;
            }
            else
            {
              BOOL v85 = (float32x2x2_t *)(v78 + 4 * a11 * v94 + 16 * v95);
              float32x2x2_t v86 = *v85;
              int32x4_t v87 = *(int32x4_t *)((char *)v85 + a11);
              int16x8_t v88 = (int32x4_t *)((char *)v85 + 2 * a11);
              float32x2x2_t v89 = (float32x2x2_t)*v88;
              int32x4_t v90 = *(int32x4_t *)((char *)v88 + a11);
              int32x4_t v91 = vzip2q_s32(*v88, v90);
              int32x4_t v92 = v84;
              vst2_f32(v92, v86);
              v92 += 4;
              vst2_f32(v92, v89);
              *((int32x4_t *)v84 + 2) = vzip2q_s32((int32x4_t)v86, v87);
              *((int32x4_t *)v84 + 3) = v91;
              v84 += 16;
              char v93 = 63;
            }
            *v77++ = v93;
            v83 += 2;
          }
          while (v83 != 16);
          a7 = v233;
          int v40 = v20 & v215;
          if (v244)
          {
LABEL_47:
            memcpy(v79, v82, 0x200uLL);
            uint64_t result = v241;
          }
LABEL_48:
          BOOL v21 = v38++ == v234 >> 4;
        }
        while (!v21);
        BOOL v21 = v20++ == v221;
      }
      while (!v21);
    }
  }
  return result;
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, uint64_t a7, unsigned int a8, int a9, int a10, uint64_t a11, int a12)
{
  uint64_t v252 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  uint64_t v17 = a1;
  unsigned int v201 = a8;
  unsigned int v18 = a8 >> 4;
  unsigned int v186 = a8 + a10 - 1;
  unsigned int v188 = v186 >> 4;
  unsigned int v19 = *(unsigned __int8 *)(*(void *)(a1 + 208) + 88);
  unsigned int v20 = *(_DWORD *)(a1 + 112);
  uint64_t v202 = v17;
  if (*(void *)(v17 + 168))
  {
    __int16 CacheMode = IOSurfaceGetCacheMode();
    uint64_t v17 = v202;
    int v22 = CacheMode & 0xF00;
  }
  else
  {
    int v22 = 0;
  }
  BOOL v23 = (v22 & 0xD00) == 0 || v22 == 768;
  int v24 = v22 & 0xE00;
  int v26 = !v23 && v24 != 1024;
  int v206 = v26;
  BOOL isLevelTiled = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::isLevelTiled(v17, *(_DWORD *)(v17 + 144) + a12);
  uint64_t v28 = v202;
  BOOL v195 = isLevelTiled;
  if (v18 <= v188)
  {
    unsigned int v194 = a7 + a9 - 1;
    unsigned int v185 = a7 >> 4;
    if (a7 >> 4 <= v194 >> 4)
    {
      unsigned int v182 = a5 - 1;
      unsigned int v204 = (a5 - 1) >> 4;
      int v203 = ((a5 - 1) & 0xF) + 1;
      int v183 = ((a6 - 1) & 0xF) + 1;
      unsigned int v184 = (a6 - 1) >> 4;
      uint32x2_t v29 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0xF0000000FLL);
      int8x8_t v30 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v29, 4uLL))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x2000000020, v29));
      __int32 v193 = v30.i32[0] | v30.i32[1];
      BOOL v191 = v30.i32[1] != 0;
      int8x8_t v192 = v30;
      BOOL v190 = v30.i32[0] != 0;
      unint64_t v181 = 8 * v20 * (unint64_t)v19;
      do
      {
        unsigned int v31 = (16 * v18) | 0xF;
        if (16 * v18 <= v201) {
          int v32 = v201;
        }
        else {
          int v32 = 16 * v18;
        }
        unsigned int v33 = v185;
        if (v186 < v31) {
          unsigned int v31 = v186;
        }
        unsigned int v200 = 16 * v18;
        int v189 = v32 - 16 * v18;
        int v199 = v31 - v32 + 1;
        int v34 = v183;
        if (v18 != v184) {
          int v34 = 16;
        }
        unsigned int v207 = v34;
        uint64_t v198 = a3 + (v32 - v201) * a11;
        do
        {
          unsigned int v35 = 16 * v33;
          unsigned int v36 = 16 * (v33 + 1) - 1;
          if (16 * v33 <= a7) {
            int v37 = a7;
          }
          else {
            int v37 = 16 * v33;
          }
          if (v194 < v36) {
            unsigned int v36 = v194;
          }
          int v38 = v36 - v37 + 1;
          if (v33 == v204) {
            unsigned int v39 = v203;
          }
          else {
            unsigned int v39 = 16;
          }
          BOOL v40 = 1;
          if (v200 >= v201 && v35 >= a7)
          {
            int v41 = v203;
            if (v33 != v204) {
              int v41 = 16;
            }
            BOOL v40 = v38 != v41 || v199 != v207;
          }
          if (v195)
          {
            unsigned int v62 = 0;
            uint64_t v63 = v181 >> (*(unsigned char *)(v28 + 57) != 0);
            char v64 = 1;
            if (v63 > 127)
            {
              if (v63 > 511)
              {
                if (v63 == 512)
                {
                  unsigned int v62 = 16;
                  char v65 = 1;
                  unsigned int v66 = 16;
                }
                else
                {
                  char v65 = 1;
                  unsigned int v66 = 0;
                  if (v63 == 1024)
                  {
                    unsigned int v66 = 8;
                    unsigned int v62 = 16;
                  }
                }
              }
              else if (v63 == 128)
              {
                char v64 = 0;
                char v65 = 0;
                unsigned int v62 = 32;
                unsigned int v66 = 32;
              }
              else
              {
                char v65 = 1;
                unsigned int v66 = 0;
                if (v63 == 256)
                {
                  char v64 = 0;
                  unsigned int v66 = 16;
                  unsigned int v62 = 32;
                }
              }
            }
            else
            {
              char v65 = 1;
              unsigned int v66 = 0;
              switch(v63)
              {
                case 4:
                  char v64 = 0;
                  char v65 = 0;
                  unsigned int v66 = 128;
                  unsigned int v62 = 256;
                  break;
                case 5:
                case 6:
                case 7:
                case 9:
                case 10:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 17:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                  break;
                case 8:
                  char v64 = 0;
                  char v65 = 0;
                  unsigned int v62 = 128;
                  unsigned int v66 = 128;
                  break;
                case 16:
                  char v64 = 0;
                  char v65 = 0;
                  unsigned int v66 = 64;
                  unsigned int v62 = 128;
                  break;
                case 32:
                  char v64 = 0;
                  char v65 = 0;
                  unsigned int v62 = 64;
                  unsigned int v66 = 64;
                  break;
                default:
                  if (v63 == 64)
                  {
                    char v64 = 0;
                    char v65 = 0;
                    unsigned int v66 = 32;
                    unsigned int v62 = 64;
                  }
                  break;
              }
            }
            unsigned int v172 = (v62 >> 4) - 1;
            if (v64)
            {
              unsigned int v173 = 0;
              if (v65) {
                goto LABEL_219;
              }
LABEL_208:
              unsigned int v174 = 32 - __clz(~(-1 << -(char)__clz(((v66 + 15) >> 4) - 1)));
              if (v174 | v173) {
                goto LABEL_209;
              }
LABEL_220:
              uint64_t v176 = 0;
            }
            else
            {
              unsigned int v173 = 32 - __clz(~(-1 << -(char)__clz(v172)));
              if ((v65 & 1) == 0) {
                goto LABEL_208;
              }
LABEL_219:
              unsigned int v174 = 0;
              if (!v173) {
                goto LABEL_220;
              }
LABEL_209:
              int v175 = 0;
              uint64_t v176 = 0;
              int v177 = v33 & v172;
              BOOL v178 = v173 != 0;
              BOOL v179 = v174 != 0;
              int v180 = 1;
              do
              {
                --v173;
                if (v178) {
                  v176 |= (unint64_t)(v180 & v177) << v175++;
                }
                else {
                  unsigned int v173 = 0;
                }
                --v174;
                if (v179) {
                  v176 |= (unint64_t)(v180 & v18 & ((v66 >> 4) - 1)) << v175++;
                }
                else {
                  unsigned int v174 = 0;
                }
                v180 *= 2;
                --v175;
                BOOL v179 = v174 != 0;
                BOOL v178 = v173 != 0;
              }
              while (v174 | v173);
            }
            unint64_t v50 = ((unint64_t)(v35 / v62 + v200 / v66 * ((v62 + v182) / v62)) << 14) + (v176 << 9);
            goto LABEL_58;
          }
          if (v193)
          {
            int v43 = 0;
            uint64_t v44 = 0;
            int v45 = 1;
            BOOL v46 = v191;
            BOOL v47 = v190;
            __int32 v48 = v192.i32[1];
            __int32 v49 = v192.i32[0];
            do
            {
              --v48;
              if (v46) {
                v44 |= (unint64_t)(v45 & v33) << v43++;
              }
              else {
                __int32 v48 = 0;
              }
              --v49;
              if (v47) {
                v44 |= (unint64_t)(v45 & v18) << v43++;
              }
              else {
                __int32 v49 = 0;
              }
              v45 *= 2;
              --v43;
              BOOL v47 = v49 != 0;
              BOOL v46 = v48 != 0;
            }
            while (v49 | v48);
          }
          else
          {
            uint64_t v44 = 0;
          }
          unint64_t v50 = v44 << 9;
LABEL_58:
          unsigned int v51 = *(_DWORD *)(v28 + 128) >> (*(unsigned char *)(v28 + 144) + a12);
          if (v51 <= 1) {
            unsigned int v51 = 1;
          }
          unsigned int v52 = v51 + 15;
          if (v52 < 0x20) {
            unsigned int v53 = 0;
          }
          else {
            unsigned int v53 = 32 - __clz(~(-1 << -(char)__clz((v52 >> 4) - 1)));
          }
          unsigned int v54 = *(_DWORD *)(v28 + 132) >> (*(unsigned char *)(v28 + 144) + a12);
          if (v54 <= 1) {
            unsigned int v54 = 1;
          }
          unsigned int v55 = v54 + 15;
          if (v55 < 0x20)
          {
            unsigned int v56 = 0;
            if (!v53)
            {
LABEL_80:
              uint64_t v58 = 0;
              goto LABEL_81;
            }
          }
          else
          {
            unsigned int v56 = 32 - __clz(~(-1 << -(char)__clz((v55 >> 4) - 1)));
            if (!(v56 | v53)) {
              goto LABEL_80;
            }
          }
          int v57 = 0;
          uint64_t v58 = 0;
          BOOL v59 = v53 != 0;
          BOOL v60 = v56 != 0;
          int v61 = 1;
          do
          {
            --v53;
            if (v59) {
              v58 |= (unint64_t)(v61 & v33) << v57++;
            }
            else {
              unsigned int v53 = 0;
            }
            --v56;
            if (v60) {
              v58 |= (unint64_t)(v61 & v18) << v57++;
            }
            else {
              unsigned int v56 = 0;
            }
            v61 *= 2;
            --v57;
            BOOL v60 = v56 != 0;
            BOOL v59 = v53 != 0;
          }
          while (v56 | v53);
LABEL_81:
          uint64_t v67 = a7;
          int v68 = v39 < 0x10 || v40;
          unsigned int v69 = (char *)(a4 + 8 * v58);
          unint64_t v70 = v198 + 2 * (v37 - a7);
          uint64_t v71 = (uint16x8_t *)(a2 + v50);
          if (v207 < 0x10) {
            int v72 = 1;
          }
          else {
            int v72 = v68;
          }
          __src = v71;
          if (v206)
          {
            if (!v72)
            {
              uint64_t v71 = (uint16x8_t *)__dst;
LABEL_94:
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock(v70, a11, v71, v69, v39, v207);
              goto LABEL_95;
            }
            int v73 = v38;
            memcpy(__dst, __src, sizeof(__dst));
            int v38 = v73;
            uint64_t v71 = (uint16x8_t *)__dst;
            uint64_t v28 = v202;
          }
          else if (!v72)
          {
            goto LABEL_94;
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE8ELj1ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = v28;
          char v209 = v71;
          unsigned __int8 v217 = v39;
          unsigned __int8 v218 = v207;
          unsigned int v213 = v189;
          unsigned int v214 = v37 - v35;
          uint64_t v210 = v69;
          unint64_t v211 = v70;
          uint64_t v212 = a11;
          unsigned int v215 = v199;
          unsigned int v216 = v38;
          if (!v40)
          {
            unsigned int v74 = *v69;
            a7 = v67;
            if (v74 == 63)
            {
              int32x4_t v77 = (int32x4_t)v71[1];
              int32x4_t v78 = (int32x4_t)v71[2];
              int32x4_t v79 = (int32x4_t)v71[3];
              int32x4_t v80 = vuzp2q_s32(*(int32x4_t *)v71, v78);
              int32x4_t v220 = vuzp1q_s32(*(int32x4_t *)v71, v78);
              int32x4_t v222 = v80;
              int32x4_t v224 = vuzp1q_s32(v77, v79);
              int32x4_t v226 = vuzp2q_s32(v77, v79);
              uint64_t v75 = 64;
            }
            else if (v74 == 1)
            {
              int16x8_t v76 = vld1q_dup_s16(v71->i16);
              int32x4_t v220 = (int32x4_t)v76;
              int32x4_t v222 = (int32x4_t)v76;
              int32x4_t v224 = (int32x4_t)v76;
              int32x4_t v226 = (int32x4_t)v76;
              uint64_t v75 = 2;
            }
            else if (*v69)
            {
              uint64_t v75 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v220, 32, (uint64_t)v71, v74);
            }
            else
            {
              uint64_t v75 = 0;
              int32x4_t v220 = 0uLL;
              int32x4_t v222 = 0uLL;
              int32x4_t v224 = 0uLL;
              int32x4_t v226 = 0uLL;
            }
            uint64_t v81 = (uint64_t)v71->i64 + v75;
            unsigned int v82 = v69[1];
            if (v82 == 63)
            {
              int32x4_t v85 = *(int32x4_t *)(v81 + 16);
              int32x4_t v86 = *(int32x4_t *)(v81 + 32);
              int32x4_t v87 = *(int32x4_t *)(v81 + 48);
              int32x4_t v88 = vuzp2q_s32(*(int32x4_t *)v81, v86);
              int32x4_t v228 = vuzp1q_s32(*(int32x4_t *)v81, v86);
              int32x4_t v230 = v88;
              int32x4_t v232 = vuzp1q_s32(v85, v87);
              int32x4_t v234 = vuzp2q_s32(v85, v87);
              uint64_t v83 = 64;
            }
            else if (v82 == 1)
            {
              int16x8_t v84 = vld1q_dup_s16((const __int16 *)v81);
              int32x4_t v228 = (int32x4_t)v84;
              int32x4_t v230 = (int32x4_t)v84;
              int32x4_t v232 = (int32x4_t)v84;
              int32x4_t v234 = (int32x4_t)v84;
              uint64_t v83 = 2;
            }
            else if (v69[1])
            {
              uint64_t v83 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v228, 32, v81, v82);
            }
            else
            {
              uint64_t v83 = 0;
              int32x4_t v228 = 0uLL;
              int32x4_t v230 = 0uLL;
              int32x4_t v232 = 0uLL;
              int32x4_t v234 = 0uLL;
            }
            uint64_t v89 = v81 + v83;
            unsigned int v90 = v69[2];
            if (v90 == 63)
            {
              int32x4_t v93 = *(int32x4_t *)(v89 + 16);
              int32x4_t v94 = *(int32x4_t *)(v89 + 32);
              int32x4_t v95 = *(int32x4_t *)(v89 + 48);
              int32x4_t v96 = vuzp2q_s32(*(int32x4_t *)v89, v94);
              int32x4_t v221 = vuzp1q_s32(*(int32x4_t *)v89, v94);
              int32x4_t v223 = v96;
              int32x4_t v225 = vuzp1q_s32(v93, v95);
              int32x4_t v227 = vuzp2q_s32(v93, v95);
              uint64_t v91 = 64;
            }
            else if (v90 == 1)
            {
              int16x8_t v92 = vld1q_dup_s16((const __int16 *)v89);
              int32x4_t v221 = (int32x4_t)v92;
              int32x4_t v223 = (int32x4_t)v92;
              int32x4_t v225 = (int32x4_t)v92;
              int32x4_t v227 = (int32x4_t)v92;
              uint64_t v91 = 2;
            }
            else if (v69[2])
            {
              uint64_t v91 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v221, 32, v89, v90);
            }
            else
            {
              uint64_t v91 = 0;
              int32x4_t v221 = 0uLL;
              int32x4_t v223 = 0uLL;
              int32x4_t v225 = 0uLL;
              int32x4_t v227 = 0uLL;
            }
            uint64_t v97 = v89 + v91;
            unsigned int v98 = v69[3];
            if (v98 == 63)
            {
              int32x4_t v101 = *(int32x4_t *)(v97 + 16);
              int32x4_t v102 = *(int32x4_t *)(v97 + 32);
              int32x4_t v103 = *(int32x4_t *)(v97 + 48);
              int32x4_t v104 = vuzp2q_s32(*(int32x4_t *)v97, v102);
              int32x4_t v229 = vuzp1q_s32(*(int32x4_t *)v97, v102);
              int32x4_t v231 = v104;
              int32x4_t v233 = vuzp1q_s32(v101, v103);
              int32x4_t v235 = vuzp2q_s32(v101, v103);
              uint64_t v99 = 64;
            }
            else if (v98 == 1)
            {
              int16x8_t v100 = vld1q_dup_s16((const __int16 *)v97);
              int32x4_t v229 = (int32x4_t)v100;
              int32x4_t v231 = (int32x4_t)v100;
              int32x4_t v233 = (int32x4_t)v100;
              int32x4_t v235 = (int32x4_t)v100;
              uint64_t v99 = 2;
            }
            else if (v69[3])
            {
              uint64_t v99 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v229, 32, v97, v98);
            }
            else
            {
              uint64_t v99 = 0;
              int32x4_t v229 = 0uLL;
              int32x4_t v231 = 0uLL;
              int32x4_t v233 = 0uLL;
              int32x4_t v235 = 0uLL;
            }
            uint64_t v105 = v97 + v99;
            unsigned int v106 = v69[4];
            if (v106 == 63)
            {
              int32x4_t v109 = *(int32x4_t *)(v105 + 16);
              int32x4_t v110 = *(int32x4_t *)(v105 + 32);
              int32x4_t v111 = *(int32x4_t *)(v105 + 48);
              int32x4_t v112 = vuzp2q_s32(*(int32x4_t *)v105, v110);
              int32x4_t v236 = vuzp1q_s32(*(int32x4_t *)v105, v110);
              int32x4_t v238 = v112;
              int32x4_t v240 = vuzp1q_s32(v109, v111);
              int32x4_t v242 = vuzp2q_s32(v109, v111);
              uint64_t v107 = 64;
            }
            else if (v106 == 1)
            {
              int16x8_t v108 = vld1q_dup_s16((const __int16 *)v105);
              int32x4_t v236 = (int32x4_t)v108;
              int32x4_t v238 = (int32x4_t)v108;
              int32x4_t v240 = (int32x4_t)v108;
              int32x4_t v242 = (int32x4_t)v108;
              uint64_t v107 = 2;
            }
            else if (v69[4])
            {
              uint64_t v107 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v236, 32, v105, v106);
            }
            else
            {
              uint64_t v107 = 0;
              int32x4_t v236 = 0uLL;
              int32x4_t v238 = 0uLL;
              int32x4_t v240 = 0uLL;
              int32x4_t v242 = 0uLL;
            }
            uint64_t v113 = v105 + v107;
            unsigned int v114 = v69[5];
            if (v114 == 63)
            {
              int32x4_t v117 = *(int32x4_t *)(v113 + 16);
              int32x4_t v118 = *(int32x4_t *)(v113 + 32);
              int32x4_t v119 = *(int32x4_t *)(v113 + 48);
              int32x4_t v120 = vuzp2q_s32(*(int32x4_t *)v113, v118);
              int32x4_t v244 = vuzp1q_s32(*(int32x4_t *)v113, v118);
              int32x4_t v246 = v120;
              int32x4_t v248 = vuzp1q_s32(v117, v119);
              int32x4_t v250 = vuzp2q_s32(v117, v119);
              uint64_t v115 = 64;
            }
            else if (v114 == 1)
            {
              int16x8_t v116 = vld1q_dup_s16((const __int16 *)v113);
              int32x4_t v244 = (int32x4_t)v116;
              int32x4_t v246 = (int32x4_t)v116;
              int32x4_t v248 = (int32x4_t)v116;
              int32x4_t v250 = (int32x4_t)v116;
              uint64_t v115 = 2;
            }
            else if (v69[5])
            {
              uint64_t v115 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v244, 32, v113, v114);
            }
            else
            {
              uint64_t v115 = 0;
              int32x4_t v244 = 0uLL;
              int32x4_t v246 = 0uLL;
              int32x4_t v248 = 0uLL;
              int32x4_t v250 = 0uLL;
            }
            uint64_t v121 = v113 + v115;
            unsigned int v122 = v69[6];
            if (v122 == 63)
            {
              int32x4_t v125 = *(int32x4_t *)(v121 + 16);
              int32x4_t v126 = *(int32x4_t *)(v121 + 32);
              int32x4_t v127 = *(int32x4_t *)(v121 + 48);
              int32x4_t v128 = vuzp2q_s32(*(int32x4_t *)v121, v126);
              int32x4_t v237 = vuzp1q_s32(*(int32x4_t *)v121, v126);
              int32x4_t v239 = v128;
              int32x4_t v241 = vuzp1q_s32(v125, v127);
              int32x4_t v243 = vuzp2q_s32(v125, v127);
              uint64_t v123 = 64;
            }
            else if (v122 == 1)
            {
              int16x8_t v124 = vld1q_dup_s16((const __int16 *)v121);
              int32x4_t v237 = (int32x4_t)v124;
              int32x4_t v239 = (int32x4_t)v124;
              int32x4_t v241 = (int32x4_t)v124;
              int32x4_t v243 = (int32x4_t)v124;
              uint64_t v123 = 2;
            }
            else if (v69[6])
            {
              uint64_t v123 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v237, 32, v121, v122);
            }
            else
            {
              uint64_t v123 = 0;
              int32x4_t v237 = 0uLL;
              int32x4_t v239 = 0uLL;
              int32x4_t v241 = 0uLL;
              int32x4_t v243 = 0uLL;
            }
            uint64_t v129 = v121 + v123;
            unsigned int v130 = v69[7];
            if (v130 == 63)
            {
              int32x4_t v133 = *(int32x4_t *)(v129 + 16);
              int32x4_t v134 = *(int32x4_t *)(v129 + 32);
              int32x4_t v135 = *(int32x4_t *)(v129 + 48);
              int32x4_t v136 = vuzp2q_s32(*(int32x4_t *)v129, v134);
              int32x4_t v245 = vuzp1q_s32(*(int32x4_t *)v129, v134);
              int32x4_t v247 = v136;
              int32x4_t v249 = vuzp1q_s32(v133, v135);
              int32x4_t v251 = vuzp2q_s32(v133, v135);
              uint64_t v131 = v215;
              if (v215) {
                goto LABEL_156;
              }
            }
            else
            {
              if (v130 != 1)
              {
                if (v69[7])
                {
                  AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v245, 32, v129, v130);
                  uint64_t v131 = v215;
                  if (!v215) {
                    goto LABEL_190;
                  }
                }
                else
                {
                  int32x4_t v245 = 0uLL;
                  int32x4_t v247 = 0uLL;
                  int32x4_t v249 = 0uLL;
                  int32x4_t v251 = 0uLL;
                  uint64_t v131 = v215;
                  if (!v215) {
                    goto LABEL_190;
                  }
                }
LABEL_156:
                if (!v216) {
                  goto LABEL_190;
                }
                uint64_t v137 = 0;
                uint64_t v138 = 32 * v213;
                uint64_t v139 = 2 * v214;
                uint64_t v140 = &v220.i8[v138 + v139];
                unint64_t v141 = v211;
                uint64_t v142 = v212;
                unint64_t v143 = 2 * v216;
                if (v143 <= 1) {
                  unint64_t v144 = 1;
                }
                else {
                  unint64_t v144 = 2 * v216;
                }
                uint64_t v145 = v138 + v139;
                uint64_t v146 = &v220.i8[v138 + v139];
                if (v144) {
                  BOOL v147 = (v144 - 1) >> 32 == 0;
                }
                else {
                  BOOL v147 = 0;
                }
                uint64_t v148 = v144 & 0x1FFFFFFE0;
                uint64_t v149 = v144 & 0x1FFFFFFF8;
                char v151 = !v147 || v144 < 8;
                int32x4_t v152 = &v221.i8[v145];
                int32x4_t v153 = (long long *)(v211 + 16);
                uint64_t v154 = v140;
                unint64_t v155 = v211;
                while (2)
                {
                  uint64_t v156 = (char *)(v141 + v142 * v137);
                  int16x8_t v157 = &v140[32 * v137];
                  if ((unint64_t)(&v146[32 * v137] - v156) < 0x20) {
                    char v158 = 1;
                  }
                  else {
                    char v158 = v151;
                  }
                  if (v158)
                  {
                    int v159 = 0;
LABEL_187:
                    unsigned int v169 = v159 + 1;
                    do
                    {
                      char v170 = *v156++;
                      *v157++ = v170;
                    }
                    while (v143 > v169++);
                  }
                  else
                  {
                    if (v144 >= 0x20)
                    {
                      int32x4_t v161 = v153;
                      uint64_t v162 = v152;
                      uint64_t v163 = v144 & 0x1FFFFFFE0;
                      do
                      {
                        long long v164 = *v161;
                        *((_OWORD *)v162 - 1) = *(v161 - 1);
                        *(_OWORD *)uint64_t v162 = v164;
                        v162 += 32;
                        v161 += 2;
                        v163 -= 32;
                      }
                      while (v163);
                      if (v144 == v148) {
                        goto LABEL_170;
                      }
                      uint64_t v160 = v144 & 0x1FFFFFFE0;
                      if ((v144 & 0x18) == 0)
                      {
                        v156 += v148;
                        v157 += v148;
                        int v159 = v144 & 0xFFFFFFE0;
                        goto LABEL_187;
                      }
                    }
                    else
                    {
                      uint64_t v160 = 0;
                    }
                    v157 += v149;
                    uint64_t v165 = v160 - v149;
                    uint64_t v166 = (uint64_t *)(v155 + v160);
                    uint64_t v167 = &v154[v160];
                    do
                    {
                      uint64_t v168 = *v166++;
                      *(void *)uint64_t v167 = v168;
                      v167 += 8;
                      v165 += 8;
                    }
                    while (v165);
                    if (v144 != v149)
                    {
                      v156 += v149;
                      int v159 = v144 & 0xFFFFFFF8;
                      goto LABEL_187;
                    }
                  }
LABEL_170:
                  ++v137;
                  v152 += 32;
                  int32x4_t v153 = (long long *)((char *)v153 + v142);
                  v155 += v142;
                  v154 += 32;
                  if (v137 == v131) {
                    goto LABEL_190;
                  }
                  continue;
                }
              }
              int16x8_t v132 = vld1q_dup_s16((const __int16 *)v129);
              int32x4_t v245 = (int32x4_t)v132;
              int32x4_t v247 = (int32x4_t)v132;
              int32x4_t v249 = (int32x4_t)v132;
              int32x4_t v251 = (int32x4_t)v132;
              uint64_t v131 = v215;
              if (v215) {
                goto LABEL_156;
              }
            }
LABEL_190:
            AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)&v220, 32, v209, v210, v217, v218);
            if (!v206) {
              goto LABEL_26;
            }
            goto LABEL_191;
          }
          dispatch_sync(*(dispatch_queue_t *)(*(void *)(v28 + 8) + 7384), block);
LABEL_95:
          a7 = v67;
          if (!v206) {
            goto LABEL_26;
          }
LABEL_191:
          memcpy(__src, v71, 0x200uLL);
LABEL_26:
          BOOL v23 = v33++ == v194 >> 4;
          uint64_t v28 = v202;
        }
        while (!v23);
        BOOL v23 = v18++ == v188;
      }
      while (!v23);
    }
  }
}

uint64_t AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, int a12)
{
  uint64_t v291 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v241 = a8;
  unsigned int v17 = a8 >> 4;
  unsigned int v223 = a8 + a10 - 1;
  unsigned int v225 = v223 >> 4;
  unsigned int v18 = *(unsigned __int8 *)(*(void *)(a1 + 208) + 88);
  unsigned int v19 = *(_DWORD *)(a1 + 112);
  uint64_t v243 = a1;
  if (*(void *)(a1 + 168)) {
    int v20 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v20 = 0;
  }
  BOOL v21 = (v20 & 0xD00) == 0 || v20 == 768;
  int v22 = v20 & 0xE00;
  int v24 = !v21 && v22 != 1024;
  int v246 = v24;
  uint64_t result = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::isLevelTiled(a1, *(_DWORD *)(a1 + 144) + a12);
  uint64_t v26 = a1;
  int v235 = result;
  if (v17 <= v225)
  {
    unsigned int v234 = a7 + a9 - 1;
    unsigned int v222 = a7 >> 4;
    if (a7 >> 4 <= v234 >> 4)
    {
      unsigned int v219 = a5 - 1;
      unsigned int v245 = (a5 - 1) >> 4;
      int v244 = ((a5 - 1) & 0xF) + 1;
      int v220 = ((a6 - 1) & 0xF) + 1;
      unsigned int v221 = (a6 - 1) >> 4;
      uint32x2_t v27 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0xF0000000FLL);
      int8x8_t v28 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v27, 4uLL))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x2000000020, v27));
      __int32 v232 = v28.i32[0] | v28.i32[1];
      BOOL v229 = v28.i32[1] != 0;
      int8x8_t v230 = v28;
      BOOL v228 = v28.i32[0] != 0;
      unint64_t v218 = 8 * v19 * (unint64_t)v18;
      uint64_t v29 = a11;
      uint64_t v30 = 4 * a11;
      uint64_t result = 2 * a11;
      unsigned int v233 = a7;
      do
      {
        unsigned int v31 = (16 * v17) | 0xF;
        if (16 * v17 <= v241) {
          int v32 = v241;
        }
        else {
          int v32 = 16 * v17;
        }
        unsigned int v33 = v222;
        if (v223 < v31) {
          unsigned int v31 = v223;
        }
        unsigned int v240 = 16 * v17;
        int v227 = v32 - 16 * v17;
        int v239 = v31 - v32 + 1;
        if (v17 == v221) {
          unsigned int v34 = v220;
        }
        else {
          unsigned int v34 = 16;
        }
        uint64_t v238 = a3 + (v32 - v241) * v29;
        unsigned int v226 = v34;
        do
        {
          unsigned int v35 = 16 * v33;
          unsigned int v36 = 16 * (v33 + 1) - 1;
          if (16 * v33 <= a7) {
            int v37 = a7;
          }
          else {
            int v37 = 16 * v33;
          }
          if (v234 < v36) {
            unsigned int v36 = v234;
          }
          int v38 = v36 - v37 + 1;
          if (v33 == v245) {
            unsigned int v39 = v244;
          }
          else {
            unsigned int v39 = 16;
          }
          BOOL v40 = 1;
          if (v240 >= v241 && v35 >= a7)
          {
            int v41 = v244;
            if (v33 != v245) {
              int v41 = 16;
            }
            BOOL v40 = v38 != v41 || v239 != v34;
          }
          if (v235)
          {
            unsigned int v62 = 0;
            uint64_t v63 = v218 >> (*(unsigned char *)(v26 + 57) != 0);
            char v64 = 1;
            if (v63 > 127)
            {
              if (v63 > 511)
              {
                if (v63 == 512)
                {
                  unsigned int v62 = 16;
                  char v65 = 1;
                  unsigned int v66 = 16;
                }
                else
                {
                  char v65 = 1;
                  unsigned int v66 = 0;
                  if (v63 == 1024)
                  {
                    unsigned int v66 = 8;
                    unsigned int v62 = 16;
                  }
                }
              }
              else if (v63 == 128)
              {
                char v64 = 0;
                char v65 = 0;
                unsigned int v62 = 32;
                unsigned int v66 = 32;
              }
              else
              {
                char v65 = 1;
                unsigned int v66 = 0;
                if (v63 == 256)
                {
                  char v64 = 0;
                  unsigned int v66 = 16;
                  unsigned int v62 = 32;
                }
              }
            }
            else
            {
              char v65 = 1;
              unsigned int v66 = 0;
              switch(v63)
              {
                case 4:
                  char v64 = 0;
                  char v65 = 0;
                  unsigned int v66 = 128;
                  unsigned int v62 = 256;
                  break;
                case 5:
                case 6:
                case 7:
                case 9:
                case 10:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 17:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                  break;
                case 8:
                  char v64 = 0;
                  char v65 = 0;
                  unsigned int v62 = 128;
                  unsigned int v66 = 128;
                  break;
                case 16:
                  char v64 = 0;
                  char v65 = 0;
                  unsigned int v66 = 64;
                  unsigned int v62 = 128;
                  break;
                case 32:
                  char v64 = 0;
                  char v65 = 0;
                  unsigned int v62 = 64;
                  unsigned int v66 = 64;
                  break;
                default:
                  if (v63 == 64)
                  {
                    char v64 = 0;
                    char v65 = 0;
                    unsigned int v66 = 32;
                    unsigned int v62 = 64;
                  }
                  break;
              }
            }
            unsigned int v209 = (v62 >> 4) - 1;
            if (v64)
            {
              unsigned int v210 = 0;
              if (v65) {
                goto LABEL_244;
              }
LABEL_233:
              unsigned int v211 = 32 - __clz(~(-1 << -(char)__clz(((v66 + 15) >> 4) - 1)));
              if (v211 | v210) {
                goto LABEL_234;
              }
LABEL_245:
              uint64_t v213 = 0;
            }
            else
            {
              unsigned int v210 = 32 - __clz(~(-1 << -(char)__clz(v209)));
              if ((v65 & 1) == 0) {
                goto LABEL_233;
              }
LABEL_244:
              unsigned int v211 = 0;
              if (!v210) {
                goto LABEL_245;
              }
LABEL_234:
              int v212 = 0;
              uint64_t v213 = 0;
              int v214 = v33 & v209;
              BOOL v215 = v210 != 0;
              BOOL v216 = v211 != 0;
              int v217 = 1;
              do
              {
                --v210;
                if (v215) {
                  v213 |= (unint64_t)(v217 & v214) << v212++;
                }
                else {
                  unsigned int v210 = 0;
                }
                --v211;
                if (v216) {
                  v213 |= (unint64_t)(v217 & v17 & ((v66 >> 4) - 1)) << v212++;
                }
                else {
                  unsigned int v211 = 0;
                }
                v217 *= 2;
                --v212;
                BOOL v216 = v211 != 0;
                BOOL v215 = v210 != 0;
              }
              while (v211 | v210);
            }
            unint64_t v50 = ((unint64_t)(v35 / v62 + v240 / v66 * ((v62 + v219) / v62)) << 14) + (v213 << 9);
            uint64_t result = 2 * a11;
            goto LABEL_60;
          }
          if (v232)
          {
            int v43 = 0;
            uint64_t v44 = 0;
            int v45 = 1;
            BOOL v46 = v229;
            BOOL v47 = v228;
            __int32 v48 = v230.i32[1];
            __int32 v49 = v230.i32[0];
            do
            {
              --v48;
              if (v46) {
                v44 |= (unint64_t)(v45 & v33) << v43++;
              }
              else {
                __int32 v48 = 0;
              }
              --v49;
              if (v47) {
                v44 |= (unint64_t)(v45 & v17) << v43++;
              }
              else {
                __int32 v49 = 0;
              }
              v45 *= 2;
              --v43;
              BOOL v47 = v49 != 0;
              BOOL v46 = v48 != 0;
            }
            while (v49 | v48);
          }
          else
          {
            uint64_t v44 = 0;
          }
          unint64_t v50 = v44 << 9;
LABEL_60:
          unsigned int v51 = *(_DWORD *)(v26 + 128) >> (*(unsigned char *)(v26 + 144) + a12);
          if (v51 <= 1) {
            unsigned int v51 = 1;
          }
          unsigned int v52 = v51 + 15;
          if (v52 < 0x20) {
            unsigned int v53 = 0;
          }
          else {
            unsigned int v53 = 32 - __clz(~(-1 << -(char)__clz((v52 >> 4) - 1)));
          }
          unsigned int v54 = *(_DWORD *)(v26 + 132) >> (*(unsigned char *)(v26 + 144) + a12);
          if (v54 <= 1) {
            unsigned int v54 = 1;
          }
          unsigned int v55 = v54 + 15;
          if (v55 < 0x20)
          {
            unsigned int v56 = 0;
            if (!v53)
            {
LABEL_82:
              uint64_t v58 = 0;
              goto LABEL_83;
            }
          }
          else
          {
            unsigned int v56 = 32 - __clz(~(-1 << -(char)__clz((v55 >> 4) - 1)));
            if (!(v56 | v53)) {
              goto LABEL_82;
            }
          }
          int v57 = 0;
          uint64_t v58 = 0;
          BOOL v59 = v53 != 0;
          BOOL v60 = v56 != 0;
          int v61 = 1;
          do
          {
            --v53;
            if (v59) {
              v58 |= (unint64_t)(v61 & v33) << v57++;
            }
            else {
              unsigned int v53 = 0;
            }
            --v56;
            if (v60) {
              v58 |= (unint64_t)(v61 & v17) << v57++;
            }
            else {
              unsigned int v56 = 0;
            }
            v61 *= 2;
            --v57;
            BOOL v60 = v56 != 0;
            BOOL v59 = v53 != 0;
          }
          while (v56 | v53);
LABEL_83:
          unsigned int v67 = v37 - a7;
          int v68 = v39 < 0x10 || v40;
          unsigned int v69 = (char *)(a4 + 8 * v58);
          uint64_t v70 = v238 + 2 * v67;
          uint64_t v71 = (int32x4_t *)(a2 + v50);
          if (v34 < 0x10) {
            int v72 = 1;
          }
          else {
            int v72 = v68;
          }
          if (v246)
          {
            if (v72)
            {
              int v73 = v71;
              int v74 = v38;
              BOOL v75 = v40;
              memcpy(v258, v71, sizeof(v258));
              BOOL v40 = v75;
              unsigned int v35 = 16 * v33;
              uint64_t v29 = a11;
              unsigned int v34 = v226;
              int v38 = v74;
              int16x8_t v76 = (int32x4_t *)v258;
              uint64_t v71 = v73;
              uint64_t v26 = v243;
LABEL_93:
              __dst = v71;
              block[0] = MEMORY[0x263EF8330];
              block[1] = 3221225472;
              block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE8ELj1ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
              block[3] = &__block_descriptor_90_e5_v8__0l;
              block[4] = v26;
              int32x4_t v248 = v76;
              unsigned __int8 v256 = v39;
              unsigned __int8 v257 = v34;
              unsigned int v252 = v227;
              unsigned int v253 = v37 - v35;
              int32x4_t v249 = v69;
              uint64_t v250 = v70;
              uint64_t v251 = v29;
              unsigned int v254 = v239;
              unsigned int v255 = v38;
              int32x4_t v242 = v76;
              if (v40)
              {
                dispatch_sync(*(dispatch_queue_t *)(*(void *)(v26 + 8) + 7384), block);
                int16x8_t v76 = v242;
                uint64_t v26 = v243;
                uint64_t result = 2 * a11;
                a7 = v233;
                uint64_t v30 = 4 * a11;
                goto LABEL_95;
              }
              unsigned int v93 = *v69;
              if (v93 == 63)
              {
                int32x4_t v96 = v76[1];
                int32x4_t v97 = v76[2];
                int32x4_t v98 = v76[3];
                int32x4_t v99 = vuzp2q_s32(*v76, v97);
                int32x4_t v259 = vuzp1q_s32(*v76, v97);
                int32x4_t v261 = v99;
                int32x4_t v263 = vuzp1q_s32(v96, v98);
                int32x4_t v265 = vuzp2q_s32(v96, v98);
                uint64_t v94 = 64;
              }
              else if (v93 == 1)
              {
                int16x8_t v95 = vld1q_dup_s16(v76->i16);
                int32x4_t v259 = (int32x4_t)v95;
                int32x4_t v261 = (int32x4_t)v95;
                int32x4_t v263 = (int32x4_t)v95;
                int32x4_t v265 = (int32x4_t)v95;
                uint64_t v94 = 2;
              }
              else if (*v69)
              {
                uint64_t v94 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v259, 32, (uint64_t)v76, v93);
                int16x8_t v76 = v242;
              }
              else
              {
                uint64_t v94 = 0;
                int32x4_t v259 = 0uLL;
                int32x4_t v261 = 0uLL;
                int32x4_t v263 = 0uLL;
                int32x4_t v265 = 0uLL;
              }
              uint64_t v100 = (uint64_t)v76->i64 + v94;
              unsigned int v101 = v69[1];
              if (v101 == 63)
              {
                int32x4_t v104 = *(int32x4_t *)(v100 + 16);
                int32x4_t v105 = *(int32x4_t *)(v100 + 32);
                int32x4_t v106 = *(int32x4_t *)(v100 + 48);
                int32x4_t v107 = vuzp2q_s32(*(int32x4_t *)v100, v105);
                int32x4_t v267 = vuzp1q_s32(*(int32x4_t *)v100, v105);
                int32x4_t v269 = v107;
                int32x4_t v271 = vuzp1q_s32(v104, v106);
                int32x4_t v273 = vuzp2q_s32(v104, v106);
                uint64_t v102 = 64;
              }
              else if (v101 == 1)
              {
                int16x8_t v103 = vld1q_dup_s16((const __int16 *)v100);
                int32x4_t v267 = (int32x4_t)v103;
                int32x4_t v269 = (int32x4_t)v103;
                int32x4_t v271 = (int32x4_t)v103;
                int32x4_t v273 = (int32x4_t)v103;
                uint64_t v102 = 2;
              }
              else if (v69[1])
              {
                uint64_t v102 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v267, 32, v100, v101);
              }
              else
              {
                uint64_t v102 = 0;
                int32x4_t v267 = 0uLL;
                int32x4_t v269 = 0uLL;
                int32x4_t v271 = 0uLL;
                int32x4_t v273 = 0uLL;
              }
              uint64_t v108 = v100 + v102;
              unsigned int v109 = v69[2];
              if (v109 == 63)
              {
                int32x4_t v112 = *(int32x4_t *)(v108 + 16);
                int32x4_t v113 = *(int32x4_t *)(v108 + 32);
                int32x4_t v114 = *(int32x4_t *)(v108 + 48);
                int32x4_t v115 = vuzp2q_s32(*(int32x4_t *)v108, v113);
                int32x4_t v260 = vuzp1q_s32(*(int32x4_t *)v108, v113);
                int32x4_t v262 = v115;
                int32x4_t v264 = vuzp1q_s32(v112, v114);
                int32x4_t v266 = vuzp2q_s32(v112, v114);
                uint64_t v110 = 64;
              }
              else if (v109 == 1)
              {
                int16x8_t v111 = vld1q_dup_s16((const __int16 *)v108);
                int32x4_t v260 = (int32x4_t)v111;
                int32x4_t v262 = (int32x4_t)v111;
                int32x4_t v264 = (int32x4_t)v111;
                int32x4_t v266 = (int32x4_t)v111;
                uint64_t v110 = 2;
              }
              else if (v69[2])
              {
                uint64_t v110 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v260, 32, v108, v109);
              }
              else
              {
                uint64_t v110 = 0;
                int32x4_t v260 = 0uLL;
                int32x4_t v262 = 0uLL;
                int32x4_t v264 = 0uLL;
                int32x4_t v266 = 0uLL;
              }
              uint64_t v116 = v108 + v110;
              unsigned int v117 = v69[3];
              if (v117 == 63)
              {
                int32x4_t v120 = *(int32x4_t *)(v116 + 16);
                int32x4_t v121 = *(int32x4_t *)(v116 + 32);
                int32x4_t v122 = *(int32x4_t *)(v116 + 48);
                int32x4_t v123 = vuzp2q_s32(*(int32x4_t *)v116, v121);
                int32x4_t v268 = vuzp1q_s32(*(int32x4_t *)v116, v121);
                int32x4_t v270 = v123;
                int32x4_t v272 = vuzp1q_s32(v120, v122);
                int32x4_t v274 = vuzp2q_s32(v120, v122);
                uint64_t v118 = 64;
              }
              else if (v117 == 1)
              {
                int16x8_t v119 = vld1q_dup_s16((const __int16 *)v116);
                int32x4_t v268 = (int32x4_t)v119;
                int32x4_t v270 = (int32x4_t)v119;
                int32x4_t v272 = (int32x4_t)v119;
                int32x4_t v274 = (int32x4_t)v119;
                uint64_t v118 = 2;
              }
              else if (v69[3])
              {
                uint64_t v118 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v268, 32, v116, v117);
              }
              else
              {
                uint64_t v118 = 0;
                int32x4_t v268 = 0uLL;
                int32x4_t v270 = 0uLL;
                int32x4_t v272 = 0uLL;
                int32x4_t v274 = 0uLL;
              }
              uint64_t v124 = v116 + v118;
              unsigned int v125 = v69[4];
              if (v125 == 63)
              {
                int32x4_t v128 = *(int32x4_t *)(v124 + 16);
                int32x4_t v129 = *(int32x4_t *)(v124 + 32);
                int32x4_t v130 = *(int32x4_t *)(v124 + 48);
                int32x4_t v131 = vuzp2q_s32(*(int32x4_t *)v124, v129);
                int32x4_t v275 = vuzp1q_s32(*(int32x4_t *)v124, v129);
                int32x4_t v277 = v131;
                int32x4_t v279 = vuzp1q_s32(v128, v130);
                int32x4_t v281 = vuzp2q_s32(v128, v130);
                uint64_t v126 = 64;
              }
              else if (v125 == 1)
              {
                int16x8_t v127 = vld1q_dup_s16((const __int16 *)v124);
                int32x4_t v275 = (int32x4_t)v127;
                int32x4_t v277 = (int32x4_t)v127;
                int32x4_t v279 = (int32x4_t)v127;
                int32x4_t v281 = (int32x4_t)v127;
                uint64_t v126 = 2;
              }
              else if (v69[4])
              {
                uint64_t v126 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v275, 32, v124, v125);
              }
              else
              {
                uint64_t v126 = 0;
                int32x4_t v275 = 0uLL;
                int32x4_t v277 = 0uLL;
                int32x4_t v279 = 0uLL;
                int32x4_t v281 = 0uLL;
              }
              uint64_t v132 = v124 + v126;
              unsigned int v133 = v69[5];
              if (v133 == 63)
              {
                int32x4_t v136 = *(int32x4_t *)(v132 + 16);
                int32x4_t v137 = *(int32x4_t *)(v132 + 32);
                int32x4_t v138 = *(int32x4_t *)(v132 + 48);
                int32x4_t v139 = vuzp2q_s32(*(int32x4_t *)v132, v137);
                int32x4_t v283 = vuzp1q_s32(*(int32x4_t *)v132, v137);
                int32x4_t v285 = v139;
                int32x4_t v287 = vuzp1q_s32(v136, v138);
                int32x4_t v289 = vuzp2q_s32(v136, v138);
                uint64_t v134 = 64;
              }
              else if (v133 == 1)
              {
                int16x8_t v135 = vld1q_dup_s16((const __int16 *)v132);
                int32x4_t v283 = (int32x4_t)v135;
                int32x4_t v285 = (int32x4_t)v135;
                int32x4_t v287 = (int32x4_t)v135;
                int32x4_t v289 = (int32x4_t)v135;
                uint64_t v134 = 2;
              }
              else if (v69[5])
              {
                uint64_t v134 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v283, 32, v132, v133);
              }
              else
              {
                uint64_t v134 = 0;
                int32x4_t v283 = 0uLL;
                int32x4_t v285 = 0uLL;
                int32x4_t v287 = 0uLL;
                int32x4_t v289 = 0uLL;
              }
              uint64_t v140 = v132 + v134;
              unsigned int v141 = v69[6];
              if (v141 == 63)
              {
                int32x4_t v144 = *(int32x4_t *)(v140 + 16);
                int32x4_t v145 = *(int32x4_t *)(v140 + 32);
                int32x4_t v146 = *(int32x4_t *)(v140 + 48);
                int32x4_t v147 = vuzp2q_s32(*(int32x4_t *)v140, v145);
                int32x4_t v276 = vuzp1q_s32(*(int32x4_t *)v140, v145);
                int32x4_t v278 = v147;
                int32x4_t v280 = vuzp1q_s32(v144, v146);
                int32x4_t v282 = vuzp2q_s32(v144, v146);
                uint64_t v142 = 64;
              }
              else if (v141 == 1)
              {
                int16x8_t v143 = vld1q_dup_s16((const __int16 *)v140);
                int32x4_t v276 = (int32x4_t)v143;
                int32x4_t v278 = (int32x4_t)v143;
                int32x4_t v280 = (int32x4_t)v143;
                int32x4_t v282 = (int32x4_t)v143;
                uint64_t v142 = 2;
              }
              else if (v69[6])
              {
                uint64_t v142 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v276, 32, v140, v141);
              }
              else
              {
                uint64_t v142 = 0;
                int32x4_t v276 = 0uLL;
                int32x4_t v278 = 0uLL;
                int32x4_t v280 = 0uLL;
                int32x4_t v282 = 0uLL;
              }
              uint64_t v148 = v140 + v142;
              unsigned int v149 = v69[7];
              if (v149 == 63)
              {
                int32x4_t v152 = *(int32x4_t *)(v148 + 16);
                int32x4_t v153 = *(int32x4_t *)(v148 + 32);
                int32x4_t v154 = *(int32x4_t *)(v148 + 48);
                int32x4_t v155 = vuzp2q_s32(*(int32x4_t *)v148, v153);
                int32x4_t v284 = vuzp1q_s32(*(int32x4_t *)v148, v153);
                int32x4_t v286 = v155;
                int32x4_t v288 = vuzp1q_s32(v152, v154);
                int32x4_t v290 = vuzp2q_s32(v152, v154);
                uint64_t v150 = v254;
                if (v254) {
                  goto LABEL_171;
                }
              }
              else
              {
                if (v149 != 1)
                {
                  if (v69[7])
                  {
                    AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v284, 32, v148, v149);
                    uint64_t v150 = v254;
                    if (!v254) {
                      goto LABEL_205;
                    }
                  }
                  else
                  {
                    int32x4_t v284 = 0uLL;
                    int32x4_t v286 = 0uLL;
                    int32x4_t v288 = 0uLL;
                    int32x4_t v290 = 0uLL;
                    uint64_t v150 = v254;
                    if (!v254) {
                      goto LABEL_205;
                    }
                  }
LABEL_171:
                  if (!v255) {
                    goto LABEL_205;
                  }
                  uint64_t v156 = 0;
                  uint64_t v157 = 32 * v252;
                  uint64_t v158 = 2 * v253;
                  int v159 = &v259.i8[v157 + v158];
                  uint64_t v160 = v250;
                  uint64_t v161 = v251;
                  unint64_t v162 = 2 * v255;
                  if (v162 <= 1) {
                    unint64_t v163 = 1;
                  }
                  else {
                    unint64_t v163 = 2 * v255;
                  }
                  uint64_t v164 = v157 + v158;
                  uint64_t v165 = &v259.i8[v157 + v158];
                  if (v163) {
                    BOOL v166 = (v163 - 1) >> 32 == 0;
                  }
                  else {
                    BOOL v166 = 0;
                  }
                  uint64_t v167 = v163 & 0x1FFFFFFE0;
                  uint64_t v168 = v163 & 0x1FFFFFFF8;
                  char v170 = !v166 || v163 < 8;
                  int v171 = &v260.i8[v164];
                  unsigned int v172 = (long long *)(v250 + 16);
                  unsigned int v173 = v159;
                  uint64_t v174 = v250;
                  while (2)
                  {
                    int v175 = (char *)(v160 + v161 * v156);
                    uint64_t v176 = &v159[32 * v156];
                    if ((unint64_t)(&v165[32 * v156] - v175) < 0x20) {
                      char v177 = 1;
                    }
                    else {
                      char v177 = v170;
                    }
                    if (v177)
                    {
                      int v178 = 0;
LABEL_202:
                      unsigned int v188 = v178 + 1;
                      do
                      {
                        char v189 = *v175++;
                        *v176++ = v189;
                      }
                      while (v162 > v188++);
                    }
                    else
                    {
                      if (v163 >= 0x20)
                      {
                        int v180 = v172;
                        unint64_t v181 = v171;
                        uint64_t v182 = v163 & 0x1FFFFFFE0;
                        do
                        {
                          long long v183 = *v180;
                          *((_OWORD *)v181 - 1) = *(v180 - 1);
                          *(_OWORD *)unint64_t v181 = v183;
                          v181 += 32;
                          v180 += 2;
                          v182 -= 32;
                        }
                        while (v182);
                        if (v163 == v167) {
                          goto LABEL_185;
                        }
                        uint64_t v179 = v163 & 0x1FFFFFFE0;
                        if ((v163 & 0x18) == 0)
                        {
                          v175 += v167;
                          v176 += v167;
                          int v178 = v163 & 0xFFFFFFE0;
                          goto LABEL_202;
                        }
                      }
                      else
                      {
                        uint64_t v179 = 0;
                      }
                      v176 += v168;
                      uint64_t v184 = v179 - v168;
                      unsigned int v185 = (uint64_t *)(v174 + v179);
                      unsigned int v186 = &v173[v179];
                      do
                      {
                        uint64_t v187 = *v185++;
                        *(void *)unsigned int v186 = v187;
                        v186 += 8;
                        v184 += 8;
                      }
                      while (v184);
                      if (v163 != v168)
                      {
                        v175 += v168;
                        int v178 = v163 & 0xFFFFFFF8;
                        goto LABEL_202;
                      }
                    }
LABEL_185:
                    ++v156;
                    v171 += 32;
                    unsigned int v172 = (long long *)((char *)v172 + v161);
                    v174 += v161;
                    v173 += 32;
                    if (v156 == v150) {
                      goto LABEL_205;
                    }
                    continue;
                  }
                }
                int16x8_t v151 = vld1q_dup_s16((const __int16 *)v148);
                int32x4_t v284 = (int32x4_t)v151;
                int32x4_t v286 = (int32x4_t)v151;
                int32x4_t v288 = (int32x4_t)v151;
                int32x4_t v290 = (int32x4_t)v151;
                uint64_t v150 = v254;
                if (v254) {
                  goto LABEL_171;
                }
              }
LABEL_205:
              uint64_t v191 = 0;
              int8x8_t v192 = v248;
              __int32 v193 = v249;
              int v194 = v256;
              int v195 = v257;
              a7 = v233;
              int16x8_t v76 = v242;
              uint64_t v26 = v243;
              uint64_t v30 = 4 * a11;
              uint64_t result = 2 * a11;
              do
              {
                uint64_t v204 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,1u>::kSubblockPositions[v191 + 1];
                uint64_t v205 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,1u>::kSubblockPositions[v191];
                unsigned int v206 = (v194 - 8 * v205) & ~((v194 - 8 * (int)v205) >> 31);
                if (v206 >= 8) {
                  unsigned int v206 = 8;
                }
                unsigned int v207 = (v195 - 4 * v204) & ~((v195 - 4 * (int)v204) >> 31);
                if (v207 >= 4) {
                  unsigned int v207 = 4;
                }
                if (v206) {
                  BOOL v208 = v207 == 0;
                }
                else {
                  BOOL v208 = 1;
                }
                if (v208)
                {
                  char v203 = 0;
                }
                else
                {
                  __int32 v196 = &v259 + 8 * v204 + v205;
                  float32x2x2_t v197 = (float32x2x2_t)*v196;
                  int32x4_t v198 = v196[2];
                  int32x4_t v199 = vzip2q_s32(*v196, v198);
                  float32x2x2_t v200 = (float32x2x2_t)v196[4];
                  int32x4_t v201 = v196[6];
                  uint64_t v202 = (float *)v192;
                  vst2_f32(v202, v197);
                  v202 += 4;
                  vst2_f32(v202, v200);
                  v192[2] = v199;
                  v192[3] = vzip2q_s32((int32x4_t)v200, v201);
                  v192 += 4;
                  char v203 = 63;
                }
                *v193++ = v203;
                v191 += 2;
              }
              while (v191 != 16);
LABEL_95:
              uint64_t v71 = __dst;
              if (v246) {
                goto LABEL_27;
              }
              goto LABEL_28;
            }
            int16x8_t v76 = (int32x4_t *)v258;
          }
          else
          {
            int16x8_t v76 = v71;
            if (v72) {
              goto LABEL_93;
            }
          }
          uint64_t v77 = 0;
          int32x4_t v78 = (float *)v76;
          do
          {
            uint64_t v88 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,1u>::kSubblockPositions[v77 + 1];
            uint64_t v89 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,1u>::kSubblockPositions[v77];
            unsigned int v90 = (v39 - 8 * v89) & ~((int)(v39 - 8 * v89) >> 31);
            if (v90 >= 8) {
              unsigned int v90 = 8;
            }
            unsigned int v91 = (v34 - 4 * v88) & ~((int)(v34 - 4 * v88) >> 31);
            if (v91 >= 4) {
              unsigned int v91 = 4;
            }
            if (v90) {
              BOOL v92 = v91 == 0;
            }
            else {
              BOOL v92 = 1;
            }
            if (v92)
            {
              char v87 = 0;
            }
            else
            {
              int32x4_t v79 = (float32x2x2_t *)(v70 + v30 * v88 + 16 * v89);
              float32x2x2_t v80 = *v79;
              int32x4_t v81 = *(int32x4_t *)((char *)v79 + v29);
              unsigned int v82 = (int32x4_t *)((char *)v79 + result);
              float32x2x2_t v83 = (float32x2x2_t)*v82;
              int32x4_t v84 = *(int32x4_t *)((char *)v82 + v29);
              int32x4_t v85 = vzip2q_s32(*v82, v84);
              int32x4_t v86 = v78;
              vst2_f32(v86, v80);
              v86 += 4;
              vst2_f32(v86, v83);
              *((int32x4_t *)v78 + 2) = vzip2q_s32((int32x4_t)v80, v81);
              *((int32x4_t *)v78 + 3) = v85;
              v78 += 16;
              char v87 = 63;
            }
            *v69++ = v87;
            v77 += 2;
          }
          while (v77 != 16);
          a7 = v233;
          if (v246)
          {
LABEL_27:
            memcpy(v71, v76, 0x200uLL);
            uint64_t result = 2 * a11;
            uint64_t v30 = 4 * a11;
            uint64_t v26 = v243;
          }
LABEL_28:
          BOOL v21 = v33++ == v234 >> 4;
        }
        while (!v21);
        BOOL v21 = v17++ == v225;
      }
      while (!v21);
    }
  }
  return result;
}

uint64_t AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, char a12)
{
  uint64_t v257 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v206 = a8;
  unsigned int v190 = a8 + a10 - 1;
  uint64_t v207 = a1;
  if (*(void *)(a1 + 168)) {
    int v17 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v17 = 0;
  }
  unsigned int v18 = a5 - 1;
  unsigned int v19 = a6 - 1;
  unsigned int v20 = a8 >> 4;
  unsigned int v189 = v190 >> 4;
  BOOL v21 = (v17 & 0xD00) == 0 || v17 == 768;
  int v22 = v17 & 0xE00;
  int v24 = !v21 && v22 != 1024;
  int v211 = v24;
  uint64_t result = a1;
  if (*(unsigned char *)(a1 + 232))
  {
    unsigned int v26 = *(unsigned __int8 *)(a1 + 255);
    unsigned int v27 = *(unsigned __int8 *)(a1 + 254);
    char v28 = __clz(v18);
    if (1 << v26 >= a6 || a5 >> v27)
    {
      if (!(a6 >> v26) && 1 << v27 < a5)
      {
        if (a6 < 2) {
          unsigned int v31 = 0;
        }
        else {
          unsigned int v31 = __clz(~(-1 << -(char)__clz(v19))) - 32;
        }
        v27 += v26 + v31;
        unsigned int v26 = -v31;
      }
    }
    else
    {
      unsigned int v29 = 32 - __clz(~(-1 << -v28));
      unsigned int v30 = v27 + v26;
      if (a5 < 2) {
        unsigned int v29 = 0;
      }
      unsigned int v26 = v30 - v29;
      unsigned int v27 = v29;
    }
    if (a5 < 2)
    {
      if (v27) {
        goto LABEL_27;
      }
    }
    else if (32 - __clz(~(-1 << -v28)) < v27)
    {
LABEL_27:
      BOOL v201 = 0;
LABEL_32:
      unsigned int v198 = v27 - 4;
      unsigned int v194 = v26 - 4;
      int v33 = -1 << *(unsigned char *)(*(void *)(a1 + 208) + 48);
      unsigned int v187 = (((~v33 + a5) & v33) + ~(-1 << v27)) >> v27;
      goto LABEL_33;
    }
    if (a6 < 2) {
      unsigned int v32 = 0;
    }
    else {
      unsigned int v32 = 32 - __clz(~(-1 << -(char)__clz(v19)));
    }
    BOOL v201 = v32 >= v26;
    goto LABEL_32;
  }
  BOOL v201 = 0;
  unsigned int v187 = 0;
  unsigned int v194 = 0;
  unsigned int v198 = 0;
LABEL_33:
  if (v20 <= v189)
  {
    unsigned int v200 = a7 + a9 - 1;
    unsigned int v186 = a7 >> 4;
    if (a7 >> 4 <= v200 >> 4)
    {
      unsigned int v209 = v18 >> 4;
      unsigned int v185 = v19 >> 4;
      int v208 = (v18 & 0xF) + 1;
      int v184 = (v19 & 0xF) + 1;
      uint32x2_t v34 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0xF0000000FLL);
      int8x8_t v35 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v34, 4uLL))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x2000000020, v34));
      __int32 v196 = v35.i32[0] | v35.i32[1];
      BOOL v192 = v35.i32[1] != 0;
      int8x8_t v193 = v35;
      BOOL v191 = v35.i32[0] != 0;
      unsigned int v199 = a7;
      do
      {
        unsigned int v36 = (16 * v20) | 0xF;
        if (16 * v20 <= v206) {
          int v37 = v206;
        }
        else {
          int v37 = 16 * v20;
        }
        if (v190 < v36) {
          unsigned int v36 = v190;
        }
        int v197 = v37 - 16 * v20;
        int v205 = v36 - v37 + 1;
        unsigned int v38 = v186;
        int v39 = v184;
        if (v20 != v185) {
          int v39 = 16;
        }
        unsigned int v212 = v39;
        uint64_t v40 = v20 & ~(-1 << v194);
        uint64_t v204 = a3 + (v37 - v206) * a11;
        do
        {
          unsigned int v41 = 16 * v38;
          unsigned int v42 = 16 * (v38 + 1) - 1;
          if (16 * v38 <= a7) {
            int v43 = a7;
          }
          else {
            int v43 = 16 * v38;
          }
          if (v200 < v42) {
            unsigned int v42 = v200;
          }
          int v44 = v42 - v43 + 1;
          if (v38 == v209) {
            unsigned int v45 = v208;
          }
          else {
            unsigned int v45 = 16;
          }
          BOOL v46 = 1;
          if (16 * v20 >= v206 && v41 >= a7)
          {
            int v47 = v208;
            if (v38 != v209) {
              int v47 = 16;
            }
            BOOL v46 = v44 != v47 || v205 != v212;
          }
          if (v201)
          {
            if (v198 | v194)
            {
              int v49 = 0;
              uint64_t v50 = 0;
              int v51 = 1;
              BOOL v52 = v198 != 0;
              BOOL v53 = v194 != 0;
              unsigned int v54 = v198;
              unsigned int v55 = v194;
              do
              {
                --v54;
                if (v52) {
                  v50 |= (unint64_t)(v38 & ~(-1 << v198) & v51) << v49++;
                }
                else {
                  unsigned int v54 = 0;
                }
                --v55;
                if (v53) {
                  v50 |= (unint64_t)(v40 & v51) << v49++;
                }
                else {
                  unsigned int v55 = 0;
                }
                v51 *= 2;
                --v49;
                BOOL v53 = v55 != 0;
                BOOL v52 = v54 != 0;
              }
              while (v55 | v54);
            }
            else
            {
              uint64_t v50 = 0;
            }
            uint64_t v63 = *(void *)(result + 320) * ((v38 >> v198) + (v20 >> v194) * v187) + (v50 << 9);
          }
          else
          {
            if (v196)
            {
              int v56 = 0;
              uint64_t v57 = 0;
              int v58 = 1;
              BOOL v59 = v192;
              BOOL v60 = v191;
              __int32 v61 = v193.i32[1];
              __int32 v62 = v193.i32[0];
              do
              {
                --v61;
                if (v59) {
                  v57 |= (unint64_t)(v58 & v38) << v56++;
                }
                else {
                  __int32 v61 = 0;
                }
                --v62;
                if (v60) {
                  v57 |= (unint64_t)(v58 & v20) << v56++;
                }
                else {
                  __int32 v62 = 0;
                }
                v58 *= 2;
                --v56;
                BOOL v60 = v62 != 0;
                BOOL v59 = v61 != 0;
              }
              while (v62 | v61);
            }
            else
            {
              uint64_t v57 = 0;
            }
            uint64_t v63 = v57 << 9;
          }
          unsigned int v64 = *(_DWORD *)(result + 128) >> (*(unsigned char *)(result + 144) + a12);
          if (v64 <= 1) {
            unsigned int v64 = 1;
          }
          unsigned int v65 = v64 + 15;
          if (v65 < 0x20) {
            unsigned int v66 = 0;
          }
          else {
            unsigned int v66 = 32 - __clz(~(-1 << -(char)__clz((v65 >> 4) - 1)));
          }
          unsigned int v67 = *(_DWORD *)(result + 132) >> (*(unsigned char *)(result + 144) + a12);
          if (v67 <= 1) {
            unsigned int v67 = 1;
          }
          unsigned int v68 = v67 + 15;
          if (v68 < 0x20)
          {
            unsigned int v69 = 0;
            if (!v66)
            {
LABEL_109:
              uint64_t v71 = 0;
              goto LABEL_110;
            }
          }
          else
          {
            unsigned int v69 = 32 - __clz(~(-1 << -(char)__clz((v68 >> 4) - 1)));
            if (!(v69 | v66)) {
              goto LABEL_109;
            }
          }
          int v70 = 0;
          uint64_t v71 = 0;
          BOOL v72 = v66 != 0;
          BOOL v73 = v69 != 0;
          int v74 = 1;
          do
          {
            --v66;
            if (v72) {
              v71 |= (unint64_t)(v74 & v38) << v70++;
            }
            else {
              unsigned int v66 = 0;
            }
            --v69;
            if (v73) {
              v71 |= (unint64_t)(v74 & v20) << v70++;
            }
            else {
              unsigned int v69 = 0;
            }
            v74 *= 2;
            --v70;
            BOOL v73 = v69 != 0;
            BOOL v72 = v66 != 0;
          }
          while (v69 | v66);
LABEL_110:
          unsigned int v75 = v43 - a7;
          int v76 = v45 < 0x10 || v46;
          uint64_t v77 = (char *)(a4 + 8 * v71);
          unint64_t v78 = v204 + 2 * v75;
          int32x4_t v79 = (int32x4_t *)(a2 + v63);
          if (v212 < 0x10) {
            int v80 = 1;
          }
          else {
            int v80 = v76;
          }
          unsigned int v210 = v79;
          if (v211)
          {
            int32x4_t v81 = (int32x4_t *)__dst;
            if (!v80) {
              goto LABEL_122;
            }
            int v195 = (char *)(a4 + 8 * v71);
            int v82 = v44;
            char v83 = v45;
            uint64_t v84 = v40;
            BOOL v85 = v46;
            memcpy(__dst, v79, sizeof(__dst));
            BOOL v46 = v85;
            uint64_t v40 = v84;
            LOBYTE(v45) = v83;
            int v44 = v82;
            uint64_t v77 = v195;
            uint64_t result = v207;
          }
          else
          {
            int32x4_t v81 = v79;
            if (!v80)
            {
LABEL_122:
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock(v78, a11, (unint64_t)v81, v77, v45, v212);
              a7 = v199;
              goto LABEL_217;
            }
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE7ELj1ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = result;
          int v214 = v81;
          unsigned __int8 v222 = v45;
          unsigned __int8 v223 = v212;
          unsigned int v218 = v197;
          unsigned int v219 = v43 - v41;
          BOOL v215 = v77;
          unint64_t v216 = v78;
          uint64_t v217 = a11;
          unsigned int v220 = v205;
          unsigned int v221 = v44;
          if (v46)
          {
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(result + 8) + 7384), block);
            a7 = v199;
            goto LABEL_217;
          }
          unsigned int v86 = *v77;
          if (v86 == 63)
          {
            int32x4_t v89 = v81[1];
            int32x4_t v90 = v81[2];
            int32x4_t v91 = v81[3];
            int32x4_t v92 = vuzp2q_s32(*v81, v90);
            int32x4_t v225 = vuzp1q_s32(*v81, v90);
            int32x4_t v227 = v92;
            int32x4_t v229 = vuzp1q_s32(v89, v91);
            int32x4_t v231 = vuzp2q_s32(v89, v91);
            uint64_t v87 = 64;
          }
          else if (v86 == 1)
          {
            int16x8_t v88 = vld1q_dup_s16(v81->i16);
            int32x4_t v225 = (int32x4_t)v88;
            int32x4_t v227 = (int32x4_t)v88;
            int32x4_t v229 = (int32x4_t)v88;
            int32x4_t v231 = (int32x4_t)v88;
            uint64_t v87 = 2;
          }
          else if (*v77)
          {
            uint64_t v87 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v225, 32, (uint64_t)v81, v86);
          }
          else
          {
            uint64_t v87 = 0;
            int32x4_t v225 = 0uLL;
            int32x4_t v227 = 0uLL;
            int32x4_t v229 = 0uLL;
            int32x4_t v231 = 0uLL;
          }
          uint64_t v93 = (uint64_t)v81->i64 + v87;
          unsigned int v94 = v77[1];
          if (v94 == 63)
          {
            int32x4_t v97 = *(int32x4_t *)(v93 + 16);
            int32x4_t v98 = *(int32x4_t *)(v93 + 32);
            int32x4_t v99 = *(int32x4_t *)(v93 + 48);
            int32x4_t v100 = vuzp2q_s32(*(int32x4_t *)v93, v98);
            int32x4_t v233 = vuzp1q_s32(*(int32x4_t *)v93, v98);
            int32x4_t v235 = v100;
            int32x4_t v237 = vuzp1q_s32(v97, v99);
            int32x4_t v239 = vuzp2q_s32(v97, v99);
            uint64_t v95 = 64;
          }
          else if (v94 == 1)
          {
            int16x8_t v96 = vld1q_dup_s16((const __int16 *)v93);
            int32x4_t v233 = (int32x4_t)v96;
            int32x4_t v235 = (int32x4_t)v96;
            int32x4_t v237 = (int32x4_t)v96;
            int32x4_t v239 = (int32x4_t)v96;
            uint64_t v95 = 2;
          }
          else if (v77[1])
          {
            uint64_t v95 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v233, 32, v93, v94);
          }
          else
          {
            uint64_t v95 = 0;
            int32x4_t v233 = 0uLL;
            int32x4_t v235 = 0uLL;
            int32x4_t v237 = 0uLL;
            int32x4_t v239 = 0uLL;
          }
          uint64_t v101 = v93 + v95;
          unsigned int v102 = v77[2];
          if (v102 == 63)
          {
            int32x4_t v105 = *(int32x4_t *)(v101 + 16);
            int32x4_t v106 = *(int32x4_t *)(v101 + 32);
            int32x4_t v107 = *(int32x4_t *)(v101 + 48);
            int32x4_t v108 = vuzp2q_s32(*(int32x4_t *)v101, v106);
            int32x4_t v226 = vuzp1q_s32(*(int32x4_t *)v101, v106);
            int32x4_t v228 = v108;
            int32x4_t v230 = vuzp1q_s32(v105, v107);
            int32x4_t v232 = vuzp2q_s32(v105, v107);
            uint64_t v103 = 64;
          }
          else if (v102 == 1)
          {
            int16x8_t v104 = vld1q_dup_s16((const __int16 *)v101);
            int32x4_t v226 = (int32x4_t)v104;
            int32x4_t v228 = (int32x4_t)v104;
            int32x4_t v230 = (int32x4_t)v104;
            int32x4_t v232 = (int32x4_t)v104;
            uint64_t v103 = 2;
          }
          else if (v77[2])
          {
            uint64_t v103 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v226, 32, v101, v102);
          }
          else
          {
            uint64_t v103 = 0;
            int32x4_t v226 = 0uLL;
            int32x4_t v228 = 0uLL;
            int32x4_t v230 = 0uLL;
            int32x4_t v232 = 0uLL;
          }
          uint64_t v109 = v101 + v103;
          unsigned int v110 = v77[3];
          if (v110 == 63)
          {
            int32x4_t v113 = *(int32x4_t *)(v109 + 16);
            int32x4_t v114 = *(int32x4_t *)(v109 + 32);
            int32x4_t v115 = *(int32x4_t *)(v109 + 48);
            int32x4_t v116 = vuzp2q_s32(*(int32x4_t *)v109, v114);
            int32x4_t v234 = vuzp1q_s32(*(int32x4_t *)v109, v114);
            int32x4_t v236 = v116;
            int32x4_t v238 = vuzp1q_s32(v113, v115);
            int32x4_t v240 = vuzp2q_s32(v113, v115);
            uint64_t v111 = 64;
          }
          else if (v110 == 1)
          {
            int16x8_t v112 = vld1q_dup_s16((const __int16 *)v109);
            int32x4_t v234 = (int32x4_t)v112;
            int32x4_t v236 = (int32x4_t)v112;
            int32x4_t v238 = (int32x4_t)v112;
            int32x4_t v240 = (int32x4_t)v112;
            uint64_t v111 = 2;
          }
          else if (v77[3])
          {
            uint64_t v111 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v234, 32, v109, v110);
          }
          else
          {
            uint64_t v111 = 0;
            int32x4_t v234 = 0uLL;
            int32x4_t v236 = 0uLL;
            int32x4_t v238 = 0uLL;
            int32x4_t v240 = 0uLL;
          }
          uint64_t v117 = v109 + v111;
          unsigned int v118 = v77[4];
          if (v118 == 63)
          {
            int32x4_t v121 = *(int32x4_t *)(v117 + 16);
            int32x4_t v122 = *(int32x4_t *)(v117 + 32);
            int32x4_t v123 = *(int32x4_t *)(v117 + 48);
            int32x4_t v124 = vuzp2q_s32(*(int32x4_t *)v117, v122);
            int32x4_t v241 = vuzp1q_s32(*(int32x4_t *)v117, v122);
            int32x4_t v243 = v124;
            int32x4_t v245 = vuzp1q_s32(v121, v123);
            int32x4_t v247 = vuzp2q_s32(v121, v123);
            uint64_t v119 = 64;
          }
          else if (v118 == 1)
          {
            int16x8_t v120 = vld1q_dup_s16((const __int16 *)v117);
            int32x4_t v241 = (int32x4_t)v120;
            int32x4_t v243 = (int32x4_t)v120;
            int32x4_t v245 = (int32x4_t)v120;
            int32x4_t v247 = (int32x4_t)v120;
            uint64_t v119 = 2;
          }
          else if (v77[4])
          {
            uint64_t v119 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v241, 32, v117, v118);
          }
          else
          {
            uint64_t v119 = 0;
            int32x4_t v241 = 0uLL;
            int32x4_t v243 = 0uLL;
            int32x4_t v245 = 0uLL;
            int32x4_t v247 = 0uLL;
          }
          uint64_t v125 = v117 + v119;
          unsigned int v126 = v77[5];
          if (v126 == 63)
          {
            int32x4_t v129 = *(int32x4_t *)(v125 + 16);
            int32x4_t v130 = *(int32x4_t *)(v125 + 32);
            int32x4_t v131 = *(int32x4_t *)(v125 + 48);
            int32x4_t v132 = vuzp2q_s32(*(int32x4_t *)v125, v130);
            int32x4_t v249 = vuzp1q_s32(*(int32x4_t *)v125, v130);
            int32x4_t v251 = v132;
            int32x4_t v253 = vuzp1q_s32(v129, v131);
            int32x4_t v255 = vuzp2q_s32(v129, v131);
            uint64_t v127 = 64;
          }
          else if (v126 == 1)
          {
            int16x8_t v128 = vld1q_dup_s16((const __int16 *)v125);
            int32x4_t v249 = (int32x4_t)v128;
            int32x4_t v251 = (int32x4_t)v128;
            int32x4_t v253 = (int32x4_t)v128;
            int32x4_t v255 = (int32x4_t)v128;
            uint64_t v127 = 2;
          }
          else if (v77[5])
          {
            uint64_t v127 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v249, 32, v125, v126);
          }
          else
          {
            uint64_t v127 = 0;
            int32x4_t v249 = 0uLL;
            int32x4_t v251 = 0uLL;
            int32x4_t v253 = 0uLL;
            int32x4_t v255 = 0uLL;
          }
          uint64_t v133 = v125 + v127;
          unsigned int v134 = v77[6];
          if (v134 == 63)
          {
            int32x4_t v137 = *(int32x4_t *)(v133 + 16);
            int32x4_t v138 = *(int32x4_t *)(v133 + 32);
            int32x4_t v139 = *(int32x4_t *)(v133 + 48);
            int32x4_t v140 = vuzp2q_s32(*(int32x4_t *)v133, v138);
            int32x4_t v242 = vuzp1q_s32(*(int32x4_t *)v133, v138);
            int32x4_t v244 = v140;
            int32x4_t v246 = vuzp1q_s32(v137, v139);
            int32x4_t v248 = vuzp2q_s32(v137, v139);
            uint64_t v135 = 64;
          }
          else if (v134 == 1)
          {
            int16x8_t v136 = vld1q_dup_s16((const __int16 *)v133);
            int32x4_t v242 = (int32x4_t)v136;
            int32x4_t v244 = (int32x4_t)v136;
            int32x4_t v246 = (int32x4_t)v136;
            int32x4_t v248 = (int32x4_t)v136;
            uint64_t v135 = 2;
          }
          else if (v77[6])
          {
            uint64_t v135 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v242, 32, v133, v134);
          }
          else
          {
            uint64_t v135 = 0;
            int32x4_t v242 = 0uLL;
            int32x4_t v244 = 0uLL;
            int32x4_t v246 = 0uLL;
            int32x4_t v248 = 0uLL;
          }
          uint64_t v141 = v133 + v135;
          unsigned int v142 = v77[7];
          if (v142 == 63)
          {
            int32x4_t v145 = *(int32x4_t *)(v141 + 16);
            int32x4_t v146 = *(int32x4_t *)(v141 + 32);
            int32x4_t v147 = *(int32x4_t *)(v141 + 48);
            int32x4_t v148 = vuzp2q_s32(*(int32x4_t *)v141, v146);
            int32x4_t v250 = vuzp1q_s32(*(int32x4_t *)v141, v146);
            int32x4_t v252 = v148;
            int32x4_t v254 = vuzp1q_s32(v145, v147);
            int32x4_t v256 = vuzp2q_s32(v145, v147);
            a7 = v199;
            uint64_t v143 = v220;
            if (!v220) {
              goto LABEL_216;
            }
          }
          else
          {
            a7 = v199;
            if (v142 == 1)
            {
              int16x8_t v144 = vld1q_dup_s16((const __int16 *)v141);
              int32x4_t v250 = (int32x4_t)v144;
              int32x4_t v252 = (int32x4_t)v144;
              int32x4_t v254 = (int32x4_t)v144;
              int32x4_t v256 = (int32x4_t)v144;
              uint64_t v143 = v220;
              if (!v220) {
                goto LABEL_216;
              }
            }
            else if (v142)
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v250, 32, v141, v142);
              uint64_t v143 = v220;
              if (!v220) {
                goto LABEL_216;
              }
            }
            else
            {
              int32x4_t v250 = 0uLL;
              int32x4_t v252 = 0uLL;
              int32x4_t v254 = 0uLL;
              int32x4_t v256 = 0uLL;
              uint64_t v143 = v220;
              if (!v220) {
                goto LABEL_216;
              }
            }
          }
          if (v221)
          {
            uint64_t v149 = 0;
            uint64_t v150 = 32 * v218;
            uint64_t v151 = 2 * v219;
            int32x4_t v152 = &v225.i8[v150 + v151];
            unint64_t v153 = v216;
            uint64_t v154 = v217;
            unint64_t v155 = 2 * v221;
            if (v155 <= 1) {
              unint64_t v156 = 1;
            }
            else {
              unint64_t v156 = 2 * v221;
            }
            uint64_t v157 = v150 + v151;
            uint64_t v158 = &v225.i8[v150 + v151];
            if (v156) {
              BOOL v159 = (v156 - 1) >> 32 == 0;
            }
            else {
              BOOL v159 = 0;
            }
            uint64_t v160 = v156 & 0x1FFFFFFE0;
            uint64_t v161 = v156 & 0x1FFFFFFF8;
            char v163 = !v159 || v156 < 8;
            uint64_t v164 = &v226.i8[v157];
            uint64_t v165 = (long long *)(v216 + 16);
            BOOL v166 = v152;
            unint64_t v167 = v216;
            do
            {
              uint64_t v168 = (char *)(v153 + v154 * v149);
              unsigned int v169 = &v152[32 * v149];
              if ((unint64_t)(&v158[32 * v149] - v168) < 0x20) {
                char v170 = 1;
              }
              else {
                char v170 = v163;
              }
              if (v170)
              {
                int v171 = 0;
                goto LABEL_213;
              }
              if (v156 >= 0x20)
              {
                unsigned int v173 = v165;
                uint64_t v174 = v164;
                uint64_t v175 = v156 & 0x1FFFFFFE0;
                do
                {
                  long long v176 = *v173;
                  *((_OWORD *)v174 - 1) = *(v173 - 1);
                  *(_OWORD *)uint64_t v174 = v176;
                  v174 += 32;
                  v173 += 2;
                  v175 -= 32;
                }
                while (v175);
                if (v156 == v160) {
                  goto LABEL_196;
                }
                uint64_t v172 = v156 & 0x1FFFFFFE0;
                if ((v156 & 0x18) == 0)
                {
                  v168 += v160;
                  v169 += v160;
                  int v171 = v156 & 0xFFFFFFE0;
                  goto LABEL_213;
                }
              }
              else
              {
                uint64_t v172 = 0;
              }
              v169 += v161;
              uint64_t v177 = v172 - v161;
              int v178 = (uint64_t *)(v167 + v172);
              uint64_t v179 = &v166[v172];
              do
              {
                uint64_t v180 = *v178++;
                *(void *)uint64_t v179 = v180;
                v179 += 8;
                v177 += 8;
              }
              while (v177);
              if (v156 == v161) {
                goto LABEL_196;
              }
              v168 += v161;
              int v171 = v156 & 0xFFFFFFF8;
LABEL_213:
              unsigned int v181 = v171 + 1;
              do
              {
                char v182 = *v168++;
                *v169++ = v182;
              }
              while (v155 > v181++);
LABEL_196:
              ++v149;
              v164 += 32;
              uint64_t v165 = (long long *)((char *)v165 + v154);
              v167 += v154;
              v166 += 32;
            }
            while (v149 != v143);
          }
LABEL_216:
          AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)&v225, 32, (unint64_t)v214, v215, v222, v223);
LABEL_217:
          if (v211) {
            memcpy(v210, v81, 0x200uLL);
          }
          BOOL v21 = v38++ == v200 >> 4;
          uint64_t result = v207;
        }
        while (!v21);
        BOOL v21 = v20++ == v189;
      }
      while (!v21);
    }
  }
  return result;
}

uint64_t AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, char a12)
{
  uint64_t v289 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v240 = a8;
  unsigned int v222 = a8 + a10 - 1;
  uint64_t v241 = a1;
  if (*(void *)(a1 + 168)) {
    int v17 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v17 = 0;
  }
  unsigned int v18 = a5 - 1;
  unsigned int v19 = a6 - 1;
  unsigned int v20 = a8 >> 4;
  unsigned int v221 = v222 >> 4;
  BOOL v21 = (v17 & 0xD00) == 0 || v17 == 768;
  int v22 = v17 & 0xE00;
  int v24 = !v21 && v22 != 1024;
  int v244 = v24;
  uint64_t result = a1;
  if (*(unsigned char *)(a1 + 232))
  {
    unsigned int v26 = *(unsigned __int8 *)(a1 + 255);
    unsigned int v27 = *(unsigned __int8 *)(a1 + 254);
    char v28 = __clz(v18);
    if (1 << v26 >= a6 || a5 >> v27)
    {
      if (!(a6 >> v26) && 1 << v27 < a5)
      {
        if (a6 < 2) {
          unsigned int v31 = 0;
        }
        else {
          unsigned int v31 = __clz(~(-1 << -(char)__clz(v19))) - 32;
        }
        v27 += v26 + v31;
        unsigned int v26 = -v31;
      }
    }
    else
    {
      unsigned int v29 = 32 - __clz(~(-1 << -v28));
      unsigned int v30 = v27 + v26;
      if (a5 < 2) {
        unsigned int v29 = 0;
      }
      unsigned int v26 = v30 - v29;
      unsigned int v27 = v29;
    }
    if (a5 < 2)
    {
      if (v27) {
        goto LABEL_27;
      }
    }
    else if (32 - __clz(~(-1 << -v28)) < v27)
    {
LABEL_27:
      BOOL v235 = 0;
LABEL_32:
      unsigned int v231 = v27 - 4;
      unsigned int v227 = v26 - 4;
      int v33 = -1 << *(unsigned char *)(*(void *)(a1 + 208) + 48);
      unsigned int v219 = (((~v33 + a5) & v33) + ~(-1 << v27)) >> v27;
      goto LABEL_33;
    }
    if (a6 < 2) {
      unsigned int v32 = 0;
    }
    else {
      unsigned int v32 = 32 - __clz(~(-1 << -(char)__clz(v19)));
    }
    BOOL v235 = v32 >= v26;
    goto LABEL_32;
  }
  BOOL v235 = 0;
  unsigned int v219 = 0;
  unsigned int v227 = 0;
  unsigned int v231 = 0;
LABEL_33:
  if (v20 <= v221)
  {
    unsigned int v234 = a7 + a9 - 1;
    unsigned int v218 = a7 >> 4;
    if (a7 >> 4 <= v234 >> 4)
    {
      unsigned int v243 = v18 >> 4;
      unsigned int v217 = v19 >> 4;
      int v242 = (v18 & 0xF) + 1;
      int v216 = (v19 & 0xF) + 1;
      int v215 = ~(-1 << v227);
      uint32x2_t v34 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0xF0000000FLL);
      int8x8_t v35 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v34, 4uLL))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x2000000020, v34));
      __int32 v229 = v35.i32[0] | v35.i32[1];
      BOOL v225 = v35.i32[1] != 0;
      int8x8_t v226 = v35;
      BOOL v224 = v35.i32[0] != 0;
      unsigned int v233 = a7;
      do
      {
        unsigned int v36 = (16 * v20) | 0xF;
        if (16 * v20 <= v240) {
          int v37 = v240;
        }
        else {
          int v37 = 16 * v20;
        }
        if (v222 < v36) {
          unsigned int v36 = v222;
        }
        int v230 = v37 - 16 * v20;
        int v239 = v36 - v37 + 1;
        unsigned int v38 = v218;
        if (v20 == v217) {
          unsigned int v39 = v216;
        }
        else {
          unsigned int v39 = 16;
        }
        int v40 = v20 & v215;
        uint64_t v238 = a3 + (v37 - v240) * a11;
        unsigned int v223 = v39;
        do
        {
          unsigned int v41 = 16 * v38;
          unsigned int v42 = 16 * (v38 + 1) - 1;
          if (16 * v38 <= a7) {
            int v43 = a7;
          }
          else {
            int v43 = 16 * v38;
          }
          if (v234 < v42) {
            unsigned int v42 = v234;
          }
          int v44 = v42 - v43 + 1;
          if (v38 == v243) {
            unsigned int v45 = v242;
          }
          else {
            unsigned int v45 = 16;
          }
          BOOL v46 = 1;
          if (16 * v20 >= v240 && v41 >= a7)
          {
            int v47 = v242;
            if (v38 != v243) {
              int v47 = 16;
            }
            BOOL v46 = v44 != v47 || v239 != v39;
          }
          if (v235)
          {
            if (v231 | v227)
            {
              int v49 = 0;
              uint64_t v50 = 0;
              int v51 = 1;
              BOOL v52 = v231 != 0;
              BOOL v53 = v227 != 0;
              unsigned int v54 = v231;
              unsigned int v55 = v227;
              do
              {
                --v54;
                if (v52) {
                  v50 |= (unint64_t)(v38 & ~(-1 << v231) & v51) << v49++;
                }
                else {
                  unsigned int v54 = 0;
                }
                --v55;
                if (v53) {
                  v50 |= (unint64_t)(v40 & v51) << v49++;
                }
                else {
                  unsigned int v55 = 0;
                }
                v51 *= 2;
                --v49;
                BOOL v53 = v55 != 0;
                BOOL v52 = v54 != 0;
              }
              while (v55 | v54);
            }
            else
            {
              uint64_t v50 = 0;
            }
            uint64_t v63 = *(void *)(result + 320) * ((v38 >> v231) + (v20 >> v227) * v219) + (v50 << 9);
          }
          else
          {
            if (v229)
            {
              int v56 = 0;
              uint64_t v57 = 0;
              int v58 = 1;
              BOOL v59 = v225;
              BOOL v60 = v224;
              __int32 v61 = v226.i32[1];
              __int32 v62 = v226.i32[0];
              do
              {
                --v61;
                if (v59) {
                  v57 |= (unint64_t)(v58 & v38) << v56++;
                }
                else {
                  __int32 v61 = 0;
                }
                --v62;
                if (v60) {
                  v57 |= (unint64_t)(v58 & v20) << v56++;
                }
                else {
                  __int32 v62 = 0;
                }
                v58 *= 2;
                --v56;
                BOOL v60 = v62 != 0;
                BOOL v59 = v61 != 0;
              }
              while (v62 | v61);
            }
            else
            {
              uint64_t v57 = 0;
            }
            uint64_t v63 = v57 << 9;
          }
          unsigned int v64 = *(_DWORD *)(result + 128) >> (*(unsigned char *)(result + 144) + a12);
          if (v64 <= 1) {
            unsigned int v64 = 1;
          }
          unsigned int v65 = v64 + 15;
          if (v65 < 0x20) {
            unsigned int v66 = 0;
          }
          else {
            unsigned int v66 = 32 - __clz(~(-1 << -(char)__clz((v65 >> 4) - 1)));
          }
          unsigned int v67 = *(_DWORD *)(result + 132) >> (*(unsigned char *)(result + 144) + a12);
          if (v67 <= 1) {
            unsigned int v67 = 1;
          }
          unsigned int v68 = v67 + 15;
          if (v68 < 0x20)
          {
            unsigned int v69 = 0;
            if (!v66)
            {
LABEL_111:
              uint64_t v71 = 0;
              goto LABEL_112;
            }
          }
          else
          {
            unsigned int v69 = 32 - __clz(~(-1 << -(char)__clz((v68 >> 4) - 1)));
            if (!(v69 | v66)) {
              goto LABEL_111;
            }
          }
          int v70 = 0;
          uint64_t v71 = 0;
          BOOL v72 = v66 != 0;
          BOOL v73 = v69 != 0;
          int v74 = 1;
          do
          {
            --v66;
            if (v72) {
              v71 |= (unint64_t)(v74 & v38) << v70++;
            }
            else {
              unsigned int v66 = 0;
            }
            --v69;
            if (v73) {
              v71 |= (unint64_t)(v74 & v20) << v70++;
            }
            else {
              unsigned int v69 = 0;
            }
            v74 *= 2;
            --v70;
            BOOL v73 = v69 != 0;
            BOOL v72 = v66 != 0;
          }
          while (v69 | v66);
LABEL_112:
          unsigned int v75 = v43 - a7;
          int v76 = v45 < 0x10 || v46;
          uint64_t v77 = (char *)(a4 + 8 * v71);
          uint64_t v78 = v238 + 2 * v75;
          int32x4_t v79 = (int32x4_t *)(a2 + v63);
          if (v39 < 0x10) {
            int v80 = 1;
          }
          else {
            int v80 = v76;
          }
          if (v244)
          {
            if (v80)
            {
              int v228 = v44;
              int32x4_t v81 = v79;
              memcpy(v256, v79, sizeof(v256));
              unsigned int v41 = 16 * v38;
              unsigned int v39 = v223;
              int v44 = v228;
              int v82 = (int32x4_t *)v256;
              int32x4_t v79 = v81;
              uint64_t result = v241;
LABEL_122:
              __dst = v79;
              block[0] = MEMORY[0x263EF8330];
              block[1] = 3221225472;
              block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE7ELj1ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
              block[3] = &__block_descriptor_90_e5_v8__0l;
              block[4] = result;
              int32x4_t v246 = v82;
              unsigned __int8 v254 = v45;
              unsigned __int8 v255 = v39;
              unsigned int v250 = v230;
              unsigned int v251 = v43 - v41;
              int32x4_t v247 = v77;
              uint64_t v248 = v78;
              uint64_t v249 = a11;
              unsigned int v252 = v239;
              unsigned int v253 = v44;
              if (v46)
              {
                dispatch_sync(*(dispatch_queue_t *)(*(void *)(result + 8) + 7384), block);
                uint64_t result = v241;
                a7 = v233;
                int v40 = v20 & v215;
                goto LABEL_124;
              }
              unsigned int v99 = *v77;
              if (v99 == 63)
              {
                int32x4_t v102 = v82[1];
                int32x4_t v103 = v82[2];
                int32x4_t v104 = v82[3];
                int32x4_t v105 = vuzp2q_s32(*v82, v103);
                int32x4_t v257 = vuzp1q_s32(*v82, v103);
                int32x4_t v259 = v105;
                int32x4_t v261 = vuzp1q_s32(v102, v104);
                int32x4_t v263 = vuzp2q_s32(v102, v104);
                uint64_t v100 = 64;
              }
              else if (v99 == 1)
              {
                int16x8_t v101 = vld1q_dup_s16(v82->i16);
                int32x4_t v257 = (int32x4_t)v101;
                int32x4_t v259 = (int32x4_t)v101;
                int32x4_t v261 = (int32x4_t)v101;
                int32x4_t v263 = (int32x4_t)v101;
                uint64_t v100 = 2;
              }
              else if (*v77)
              {
                uint64_t v100 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v257, 32, (uint64_t)v82, v99);
              }
              else
              {
                uint64_t v100 = 0;
                int32x4_t v257 = 0uLL;
                int32x4_t v259 = 0uLL;
                int32x4_t v261 = 0uLL;
                int32x4_t v263 = 0uLL;
              }
              uint64_t v106 = (uint64_t)v82->i64 + v100;
              unsigned int v107 = v77[1];
              if (v107 == 63)
              {
                int32x4_t v110 = *(int32x4_t *)(v106 + 16);
                int32x4_t v111 = *(int32x4_t *)(v106 + 32);
                int32x4_t v112 = *(int32x4_t *)(v106 + 48);
                int32x4_t v113 = vuzp2q_s32(*(int32x4_t *)v106, v111);
                int32x4_t v265 = vuzp1q_s32(*(int32x4_t *)v106, v111);
                int32x4_t v267 = v113;
                int32x4_t v269 = vuzp1q_s32(v110, v112);
                int32x4_t v271 = vuzp2q_s32(v110, v112);
                uint64_t v108 = 64;
              }
              else if (v107 == 1)
              {
                int16x8_t v109 = vld1q_dup_s16((const __int16 *)v106);
                int32x4_t v265 = (int32x4_t)v109;
                int32x4_t v267 = (int32x4_t)v109;
                int32x4_t v269 = (int32x4_t)v109;
                int32x4_t v271 = (int32x4_t)v109;
                uint64_t v108 = 2;
              }
              else if (v77[1])
              {
                uint64_t v108 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v265, 32, v106, v107);
              }
              else
              {
                uint64_t v108 = 0;
                int32x4_t v265 = 0uLL;
                int32x4_t v267 = 0uLL;
                int32x4_t v269 = 0uLL;
                int32x4_t v271 = 0uLL;
              }
              uint64_t v114 = v106 + v108;
              unsigned int v115 = v77[2];
              if (v115 == 63)
              {
                int32x4_t v118 = *(int32x4_t *)(v114 + 16);
                int32x4_t v119 = *(int32x4_t *)(v114 + 32);
                int32x4_t v120 = *(int32x4_t *)(v114 + 48);
                int32x4_t v121 = vuzp2q_s32(*(int32x4_t *)v114, v119);
                int32x4_t v258 = vuzp1q_s32(*(int32x4_t *)v114, v119);
                int32x4_t v260 = v121;
                int32x4_t v262 = vuzp1q_s32(v118, v120);
                int32x4_t v264 = vuzp2q_s32(v118, v120);
                uint64_t v116 = 64;
              }
              else if (v115 == 1)
              {
                int16x8_t v117 = vld1q_dup_s16((const __int16 *)v114);
                int32x4_t v258 = (int32x4_t)v117;
                int32x4_t v260 = (int32x4_t)v117;
                int32x4_t v262 = (int32x4_t)v117;
                int32x4_t v264 = (int32x4_t)v117;
                uint64_t v116 = 2;
              }
              else if (v77[2])
              {
                uint64_t v116 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v258, 32, v114, v115);
              }
              else
              {
                uint64_t v116 = 0;
                int32x4_t v258 = 0uLL;
                int32x4_t v260 = 0uLL;
                int32x4_t v262 = 0uLL;
                int32x4_t v264 = 0uLL;
              }
              uint64_t v122 = v114 + v116;
              unsigned int v123 = v77[3];
              if (v123 == 63)
              {
                int32x4_t v126 = *(int32x4_t *)(v122 + 16);
                int32x4_t v127 = *(int32x4_t *)(v122 + 32);
                int32x4_t v128 = *(int32x4_t *)(v122 + 48);
                int32x4_t v129 = vuzp2q_s32(*(int32x4_t *)v122, v127);
                int32x4_t v266 = vuzp1q_s32(*(int32x4_t *)v122, v127);
                int32x4_t v268 = v129;
                int32x4_t v270 = vuzp1q_s32(v126, v128);
                int32x4_t v272 = vuzp2q_s32(v126, v128);
                uint64_t v124 = 64;
              }
              else if (v123 == 1)
              {
                int16x8_t v125 = vld1q_dup_s16((const __int16 *)v122);
                int32x4_t v266 = (int32x4_t)v125;
                int32x4_t v268 = (int32x4_t)v125;
                int32x4_t v270 = (int32x4_t)v125;
                int32x4_t v272 = (int32x4_t)v125;
                uint64_t v124 = 2;
              }
              else if (v77[3])
              {
                uint64_t v124 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v266, 32, v122, v123);
              }
              else
              {
                uint64_t v124 = 0;
                int32x4_t v266 = 0uLL;
                int32x4_t v268 = 0uLL;
                int32x4_t v270 = 0uLL;
                int32x4_t v272 = 0uLL;
              }
              uint64_t v130 = v122 + v124;
              unsigned int v131 = v77[4];
              if (v131 == 63)
              {
                int32x4_t v134 = *(int32x4_t *)(v130 + 16);
                int32x4_t v135 = *(int32x4_t *)(v130 + 32);
                int32x4_t v136 = *(int32x4_t *)(v130 + 48);
                int32x4_t v137 = vuzp2q_s32(*(int32x4_t *)v130, v135);
                int32x4_t v273 = vuzp1q_s32(*(int32x4_t *)v130, v135);
                int32x4_t v275 = v137;
                int32x4_t v277 = vuzp1q_s32(v134, v136);
                int32x4_t v279 = vuzp2q_s32(v134, v136);
                uint64_t v132 = 64;
              }
              else if (v131 == 1)
              {
                int16x8_t v133 = vld1q_dup_s16((const __int16 *)v130);
                int32x4_t v273 = (int32x4_t)v133;
                int32x4_t v275 = (int32x4_t)v133;
                int32x4_t v277 = (int32x4_t)v133;
                int32x4_t v279 = (int32x4_t)v133;
                uint64_t v132 = 2;
              }
              else if (v77[4])
              {
                uint64_t v132 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v273, 32, v130, v131);
              }
              else
              {
                uint64_t v132 = 0;
                int32x4_t v273 = 0uLL;
                int32x4_t v275 = 0uLL;
                int32x4_t v277 = 0uLL;
                int32x4_t v279 = 0uLL;
              }
              uint64_t v138 = v130 + v132;
              unsigned int v139 = v77[5];
              if (v139 == 63)
              {
                int32x4_t v142 = *(int32x4_t *)(v138 + 16);
                int32x4_t v143 = *(int32x4_t *)(v138 + 32);
                int32x4_t v144 = *(int32x4_t *)(v138 + 48);
                int32x4_t v145 = vuzp2q_s32(*(int32x4_t *)v138, v143);
                int32x4_t v281 = vuzp1q_s32(*(int32x4_t *)v138, v143);
                int32x4_t v283 = v145;
                int32x4_t v285 = vuzp1q_s32(v142, v144);
                int32x4_t v287 = vuzp2q_s32(v142, v144);
                uint64_t v140 = 64;
              }
              else if (v139 == 1)
              {
                int16x8_t v141 = vld1q_dup_s16((const __int16 *)v138);
                int32x4_t v281 = (int32x4_t)v141;
                int32x4_t v283 = (int32x4_t)v141;
                int32x4_t v285 = (int32x4_t)v141;
                int32x4_t v287 = (int32x4_t)v141;
                uint64_t v140 = 2;
              }
              else if (v77[5])
              {
                uint64_t v140 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v281, 32, v138, v139);
              }
              else
              {
                uint64_t v140 = 0;
                int32x4_t v281 = 0uLL;
                int32x4_t v283 = 0uLL;
                int32x4_t v285 = 0uLL;
                int32x4_t v287 = 0uLL;
              }
              uint64_t v146 = v138 + v140;
              unsigned int v147 = v77[6];
              if (v147 == 63)
              {
                int32x4_t v150 = *(int32x4_t *)(v146 + 16);
                int32x4_t v151 = *(int32x4_t *)(v146 + 32);
                int32x4_t v152 = *(int32x4_t *)(v146 + 48);
                int32x4_t v153 = vuzp2q_s32(*(int32x4_t *)v146, v151);
                int32x4_t v274 = vuzp1q_s32(*(int32x4_t *)v146, v151);
                int32x4_t v276 = v153;
                int32x4_t v278 = vuzp1q_s32(v150, v152);
                int32x4_t v280 = vuzp2q_s32(v150, v152);
                uint64_t v148 = 64;
              }
              else if (v147 == 1)
              {
                int16x8_t v149 = vld1q_dup_s16((const __int16 *)v146);
                int32x4_t v274 = (int32x4_t)v149;
                int32x4_t v276 = (int32x4_t)v149;
                int32x4_t v278 = (int32x4_t)v149;
                int32x4_t v280 = (int32x4_t)v149;
                uint64_t v148 = 2;
              }
              else if (v77[6])
              {
                uint64_t v148 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v274, 32, v146, v147);
              }
              else
              {
                uint64_t v148 = 0;
                int32x4_t v274 = 0uLL;
                int32x4_t v276 = 0uLL;
                int32x4_t v278 = 0uLL;
                int32x4_t v280 = 0uLL;
              }
              uint64_t v154 = v146 + v148;
              unsigned int v155 = v77[7];
              if (v155 == 63)
              {
                int32x4_t v158 = *(int32x4_t *)(v154 + 16);
                int32x4_t v159 = *(int32x4_t *)(v154 + 32);
                int32x4_t v160 = *(int32x4_t *)(v154 + 48);
                int32x4_t v161 = vuzp2q_s32(*(int32x4_t *)v154, v159);
                int32x4_t v282 = vuzp1q_s32(*(int32x4_t *)v154, v159);
                int32x4_t v284 = v161;
                int32x4_t v286 = vuzp1q_s32(v158, v160);
                int32x4_t v288 = vuzp2q_s32(v158, v160);
                uint64_t v156 = v252;
                if (v252) {
                  goto LABEL_200;
                }
              }
              else
              {
                if (v155 != 1)
                {
                  if (v77[7])
                  {
                    AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v282, 32, v154, v155);
                    uint64_t v156 = v252;
                    if (!v252) {
                      goto LABEL_234;
                    }
                  }
                  else
                  {
                    int32x4_t v282 = 0uLL;
                    int32x4_t v284 = 0uLL;
                    int32x4_t v286 = 0uLL;
                    int32x4_t v288 = 0uLL;
                    uint64_t v156 = v252;
                    if (!v252) {
                      goto LABEL_234;
                    }
                  }
LABEL_200:
                  if (!v253) {
                    goto LABEL_234;
                  }
                  uint64_t v162 = 0;
                  uint64_t v163 = 32 * v250;
                  uint64_t v164 = 2 * v251;
                  uint64_t v165 = &v257.i8[v163 + v164];
                  uint64_t v166 = v248;
                  uint64_t v167 = v249;
                  unint64_t v168 = 2 * v253;
                  if (v168 <= 1) {
                    unint64_t v169 = 1;
                  }
                  else {
                    unint64_t v169 = 2 * v253;
                  }
                  uint64_t v170 = v163 + v164;
                  int v171 = &v257.i8[v163 + v164];
                  if (v169) {
                    BOOL v172 = (v169 - 1) >> 32 == 0;
                  }
                  else {
                    BOOL v172 = 0;
                  }
                  uint64_t v173 = v169 & 0x1FFFFFFE0;
                  uint64_t v174 = v169 & 0x1FFFFFFF8;
                  char v176 = !v172 || v169 < 8;
                  uint64_t v177 = &v258.i8[v170];
                  int v178 = (long long *)(v248 + 16);
                  uint64_t v179 = v165;
                  uint64_t v180 = v248;
                  while (2)
                  {
                    unsigned int v181 = (char *)(v166 + v167 * v162);
                    char v182 = &v165[32 * v162];
                    if ((unint64_t)(&v171[32 * v162] - v181) < 0x20) {
                      char v183 = 1;
                    }
                    else {
                      char v183 = v176;
                    }
                    if (v183)
                    {
                      int v184 = 0;
LABEL_231:
                      unsigned int v194 = v184 + 1;
                      do
                      {
                        char v195 = *v181++;
                        *v182++ = v195;
                      }
                      while (v168 > v194++);
                    }
                    else
                    {
                      if (v169 >= 0x20)
                      {
                        unsigned int v186 = v178;
                        unsigned int v187 = v177;
                        uint64_t v188 = v169 & 0x1FFFFFFE0;
                        do
                        {
                          long long v189 = *v186;
                          *((_OWORD *)v187 - 1) = *(v186 - 1);
                          *(_OWORD *)unsigned int v187 = v189;
                          v187 += 32;
                          v186 += 2;
                          v188 -= 32;
                        }
                        while (v188);
                        if (v169 == v173) {
                          goto LABEL_214;
                        }
                        uint64_t v185 = v169 & 0x1FFFFFFE0;
                        if ((v169 & 0x18) == 0)
                        {
                          v181 += v173;
                          v182 += v173;
                          int v184 = v169 & 0xFFFFFFE0;
                          goto LABEL_231;
                        }
                      }
                      else
                      {
                        uint64_t v185 = 0;
                      }
                      v182 += v174;
                      uint64_t v190 = v185 - v174;
                      BOOL v191 = (uint64_t *)(v180 + v185);
                      BOOL v192 = &v179[v185];
                      do
                      {
                        uint64_t v193 = *v191++;
                        *(void *)BOOL v192 = v193;
                        v192 += 8;
                        v190 += 8;
                      }
                      while (v190);
                      if (v169 != v174)
                      {
                        v181 += v174;
                        int v184 = v169 & 0xFFFFFFF8;
                        goto LABEL_231;
                      }
                    }
LABEL_214:
                    ++v162;
                    v177 += 32;
                    int v178 = (long long *)((char *)v178 + v167);
                    v180 += v167;
                    v179 += 32;
                    if (v162 == v156) {
                      goto LABEL_234;
                    }
                    continue;
                  }
                }
                int16x8_t v157 = vld1q_dup_s16((const __int16 *)v154);
                int32x4_t v282 = (int32x4_t)v157;
                int32x4_t v284 = (int32x4_t)v157;
                int32x4_t v286 = (int32x4_t)v157;
                int32x4_t v288 = (int32x4_t)v157;
                uint64_t v156 = v252;
                if (v252) {
                  goto LABEL_200;
                }
              }
LABEL_234:
              uint64_t v197 = 0;
              unsigned int v198 = v246;
              unsigned int v199 = v247;
              int v200 = v254;
              int v201 = v255;
              a7 = v233;
              uint64_t result = v241;
              int v40 = v20 & v215;
              do
              {
                uint64_t v210 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,1u>::kSubblockPositions[v197 + 1];
                uint64_t v211 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,1u>::kSubblockPositions[v197];
                unsigned int v212 = (v200 - 8 * v211) & ~((v200 - 8 * (int)v211) >> 31);
                if (v212 >= 8) {
                  unsigned int v212 = 8;
                }
                unsigned int v213 = (v201 - 4 * v210) & ~((v201 - 4 * (int)v210) >> 31);
                if (v213 >= 4) {
                  unsigned int v213 = 4;
                }
                if (v212) {
                  BOOL v214 = v213 == 0;
                }
                else {
                  BOOL v214 = 1;
                }
                if (v214)
                {
                  char v209 = 0;
                }
                else
                {
                  uint64_t v202 = &v257 + 8 * v210 + v211;
                  float32x2x2_t v203 = (float32x2x2_t)*v202;
                  int32x4_t v204 = v202[2];
                  int32x4_t v205 = vzip2q_s32(*v202, v204);
                  float32x2x2_t v206 = (float32x2x2_t)v202[4];
                  int32x4_t v207 = v202[6];
                  int v208 = (float *)v198;
                  vst2_f32(v208, v203);
                  v208 += 4;
                  vst2_f32(v208, v206);
                  v198[2] = v205;
                  v198[3] = vzip2q_s32((int32x4_t)v206, v207);
                  v198 += 4;
                  char v209 = 63;
                }
                *v199++ = v209;
                v197 += 2;
              }
              while (v197 != 16);
LABEL_124:
              int32x4_t v79 = __dst;
              if (v244) {
                goto LABEL_47;
              }
              goto LABEL_48;
            }
            int v82 = (int32x4_t *)v256;
          }
          else
          {
            int v82 = v79;
            if (v80) {
              goto LABEL_122;
            }
          }
          uint64_t v83 = 0;
          uint64_t v84 = (float *)v82;
          do
          {
            uint64_t v94 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,1u>::kSubblockPositions[v83 + 1];
            uint64_t v95 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,1u>::kSubblockPositions[v83];
            unsigned int v96 = (v45 - 8 * v95) & ~((int)(v45 - 8 * v95) >> 31);
            if (v96 >= 8) {
              unsigned int v96 = 8;
            }
            unsigned int v97 = (v39 - 4 * v94) & ~((int)(v39 - 4 * v94) >> 31);
            if (v97 >= 4) {
              unsigned int v97 = 4;
            }
            if (v96) {
              BOOL v98 = v97 == 0;
            }
            else {
              BOOL v98 = 1;
            }
            if (v98)
            {
              char v93 = 0;
            }
            else
            {
              BOOL v85 = (float32x2x2_t *)(v78 + 4 * a11 * v94 + 16 * v95);
              float32x2x2_t v86 = *v85;
              int32x4_t v87 = *(int32x4_t *)((char *)v85 + a11);
              int16x8_t v88 = (int32x4_t *)((char *)v85 + 2 * a11);
              float32x2x2_t v89 = (float32x2x2_t)*v88;
              int32x4_t v90 = *(int32x4_t *)((char *)v88 + a11);
              int32x4_t v91 = vzip2q_s32(*v88, v90);
              int32x4_t v92 = v84;
              vst2_f32(v92, v86);
              v92 += 4;
              vst2_f32(v92, v89);
              *((int32x4_t *)v84 + 2) = vzip2q_s32((int32x4_t)v86, v87);
              *((int32x4_t *)v84 + 3) = v91;
              v84 += 16;
              char v93 = 63;
            }
            *v77++ = v93;
            v83 += 2;
          }
          while (v83 != 16);
          a7 = v233;
          int v40 = v20 & v215;
          if (v244)
          {
LABEL_47:
            memcpy(v79, v82, 0x200uLL);
            uint64_t result = v241;
          }
LABEL_48:
          BOOL v21 = v38++ == v234 >> 4;
        }
        while (!v21);
        BOOL v21 = v20++ == v221;
      }
      while (!v21);
    }
  }
  return result;
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, uint64_t a7, unsigned int a8, int a9, int a10, uint64_t a11, int a12)
{
  uint64_t v252 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  uint64_t v17 = a1;
  unsigned int v201 = a8;
  unsigned int v18 = a8 >> 4;
  unsigned int v186 = a8 + a10 - 1;
  unsigned int v188 = v186 >> 4;
  unsigned int v19 = *(unsigned __int8 *)(*(void *)(a1 + 208) + 88);
  unsigned int v20 = *(_DWORD *)(a1 + 112);
  uint64_t v202 = v17;
  if (*(void *)(v17 + 168))
  {
    __int16 CacheMode = IOSurfaceGetCacheMode();
    uint64_t v17 = v202;
    int v22 = CacheMode & 0xF00;
  }
  else
  {
    int v22 = 0;
  }
  BOOL v23 = (v22 & 0xD00) == 0 || v22 == 768;
  int v24 = v22 & 0xE00;
  int v26 = !v23 && v24 != 1024;
  int v206 = v26;
  BOOL isLevelTiled = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::isLevelTiled(v17, *(_DWORD *)(v17 + 144) + a12);
  uint64_t v28 = v202;
  BOOL v195 = isLevelTiled;
  if (v18 <= v188)
  {
    unsigned int v194 = a7 + a9 - 1;
    unsigned int v185 = a7 >> 4;
    if (a7 >> 4 <= v194 >> 4)
    {
      unsigned int v182 = a5 - 1;
      unsigned int v204 = (a5 - 1) >> 4;
      int v203 = ((a5 - 1) & 0xF) + 1;
      int v183 = ((a6 - 1) & 0xF) + 1;
      unsigned int v184 = (a6 - 1) >> 4;
      uint32x2_t v29 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0xF0000000FLL);
      int8x8_t v30 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v29, 4uLL))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x2000000020, v29));
      __int32 v193 = v30.i32[0] | v30.i32[1];
      BOOL v191 = v30.i32[1] != 0;
      int8x8_t v192 = v30;
      BOOL v190 = v30.i32[0] != 0;
      unint64_t v181 = 8 * v20 * (unint64_t)v19;
      do
      {
        unsigned int v31 = (16 * v18) | 0xF;
        if (16 * v18 <= v201) {
          int v32 = v201;
        }
        else {
          int v32 = 16 * v18;
        }
        unsigned int v33 = v185;
        if (v186 < v31) {
          unsigned int v31 = v186;
        }
        unsigned int v200 = 16 * v18;
        int v189 = v32 - 16 * v18;
        int v199 = v31 - v32 + 1;
        int v34 = v183;
        if (v18 != v184) {
          int v34 = 16;
        }
        unsigned int v207 = v34;
        uint64_t v198 = a3 + (v32 - v201) * a11;
        do
        {
          unsigned int v35 = 16 * v33;
          unsigned int v36 = 16 * (v33 + 1) - 1;
          if (16 * v33 <= a7) {
            int v37 = a7;
          }
          else {
            int v37 = 16 * v33;
          }
          if (v194 < v36) {
            unsigned int v36 = v194;
          }
          int v38 = v36 - v37 + 1;
          if (v33 == v204) {
            unsigned int v39 = v203;
          }
          else {
            unsigned int v39 = 16;
          }
          BOOL v40 = 1;
          if (v200 >= v201 && v35 >= a7)
          {
            int v41 = v203;
            if (v33 != v204) {
              int v41 = 16;
            }
            BOOL v40 = v38 != v41 || v199 != v207;
          }
          if (v195)
          {
            unsigned int v62 = 0;
            uint64_t v63 = v181 >> (*(unsigned char *)(v28 + 57) != 0);
            char v64 = 1;
            if (v63 > 127)
            {
              if (v63 > 511)
              {
                if (v63 == 512)
                {
                  unsigned int v62 = 16;
                  char v65 = 1;
                  unsigned int v66 = 16;
                }
                else
                {
                  char v65 = 1;
                  unsigned int v66 = 0;
                  if (v63 == 1024)
                  {
                    unsigned int v66 = 8;
                    unsigned int v62 = 16;
                  }
                }
              }
              else if (v63 == 128)
              {
                char v64 = 0;
                char v65 = 0;
                unsigned int v62 = 32;
                unsigned int v66 = 32;
              }
              else
              {
                char v65 = 1;
                unsigned int v66 = 0;
                if (v63 == 256)
                {
                  char v64 = 0;
                  unsigned int v66 = 16;
                  unsigned int v62 = 32;
                }
              }
            }
            else
            {
              char v65 = 1;
              unsigned int v66 = 0;
              switch(v63)
              {
                case 4:
                  char v64 = 0;
                  char v65 = 0;
                  unsigned int v66 = 128;
                  unsigned int v62 = 256;
                  break;
                case 5:
                case 6:
                case 7:
                case 9:
                case 10:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 17:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                  break;
                case 8:
                  char v64 = 0;
                  char v65 = 0;
                  unsigned int v62 = 128;
                  unsigned int v66 = 128;
                  break;
                case 16:
                  char v64 = 0;
                  char v65 = 0;
                  unsigned int v66 = 64;
                  unsigned int v62 = 128;
                  break;
                case 32:
                  char v64 = 0;
                  char v65 = 0;
                  unsigned int v62 = 64;
                  unsigned int v66 = 64;
                  break;
                default:
                  if (v63 == 64)
                  {
                    char v64 = 0;
                    char v65 = 0;
                    unsigned int v66 = 32;
                    unsigned int v62 = 64;
                  }
                  break;
              }
            }
            unsigned int v172 = (v62 >> 4) - 1;
            if (v64)
            {
              unsigned int v173 = 0;
              if (v65) {
                goto LABEL_219;
              }
LABEL_208:
              unsigned int v174 = 32 - __clz(~(-1 << -(char)__clz(((v66 + 15) >> 4) - 1)));
              if (v174 | v173) {
                goto LABEL_209;
              }
LABEL_220:
              uint64_t v176 = 0;
            }
            else
            {
              unsigned int v173 = 32 - __clz(~(-1 << -(char)__clz(v172)));
              if ((v65 & 1) == 0) {
                goto LABEL_208;
              }
LABEL_219:
              unsigned int v174 = 0;
              if (!v173) {
                goto LABEL_220;
              }
LABEL_209:
              int v175 = 0;
              uint64_t v176 = 0;
              int v177 = v33 & v172;
              BOOL v178 = v173 != 0;
              BOOL v179 = v174 != 0;
              int v180 = 1;
              do
              {
                --v173;
                if (v178) {
                  v176 |= (unint64_t)(v180 & v177) << v175++;
                }
                else {
                  unsigned int v173 = 0;
                }
                --v174;
                if (v179) {
                  v176 |= (unint64_t)(v180 & v18 & ((v66 >> 4) - 1)) << v175++;
                }
                else {
                  unsigned int v174 = 0;
                }
                v180 *= 2;
                --v175;
                BOOL v179 = v174 != 0;
                BOOL v178 = v173 != 0;
              }
              while (v174 | v173);
            }
            unint64_t v50 = ((unint64_t)(v35 / v62 + v200 / v66 * ((v62 + v182) / v62)) << 14) + (v176 << 9);
            goto LABEL_58;
          }
          if (v193)
          {
            int v43 = 0;
            uint64_t v44 = 0;
            int v45 = 1;
            BOOL v46 = v191;
            BOOL v47 = v190;
            __int32 v48 = v192.i32[1];
            __int32 v49 = v192.i32[0];
            do
            {
              --v48;
              if (v46) {
                v44 |= (unint64_t)(v45 & v33) << v43++;
              }
              else {
                __int32 v48 = 0;
              }
              --v49;
              if (v47) {
                v44 |= (unint64_t)(v45 & v18) << v43++;
              }
              else {
                __int32 v49 = 0;
              }
              v45 *= 2;
              --v43;
              BOOL v47 = v49 != 0;
              BOOL v46 = v48 != 0;
            }
            while (v49 | v48);
          }
          else
          {
            uint64_t v44 = 0;
          }
          unint64_t v50 = v44 << 9;
LABEL_58:
          unsigned int v51 = *(_DWORD *)(v28 + 128) >> (*(unsigned char *)(v28 + 144) + a12);
          if (v51 <= 1) {
            unsigned int v51 = 1;
          }
          unsigned int v52 = v51 + 15;
          if (v52 < 0x20) {
            unsigned int v53 = 0;
          }
          else {
            unsigned int v53 = 32 - __clz(~(-1 << -(char)__clz((v52 >> 4) - 1)));
          }
          unsigned int v54 = *(_DWORD *)(v28 + 132) >> (*(unsigned char *)(v28 + 144) + a12);
          if (v54 <= 1) {
            unsigned int v54 = 1;
          }
          unsigned int v55 = v54 + 15;
          if (v55 < 0x20)
          {
            unsigned int v56 = 0;
            if (!v53)
            {
LABEL_80:
              uint64_t v58 = 0;
              goto LABEL_81;
            }
          }
          else
          {
            unsigned int v56 = 32 - __clz(~(-1 << -(char)__clz((v55 >> 4) - 1)));
            if (!(v56 | v53)) {
              goto LABEL_80;
            }
          }
          int v57 = 0;
          uint64_t v58 = 0;
          BOOL v59 = v53 != 0;
          BOOL v60 = v56 != 0;
          int v61 = 1;
          do
          {
            --v53;
            if (v59) {
              v58 |= (unint64_t)(v61 & v33) << v57++;
            }
            else {
              unsigned int v53 = 0;
            }
            --v56;
            if (v60) {
              v58 |= (unint64_t)(v61 & v18) << v57++;
            }
            else {
              unsigned int v56 = 0;
            }
            v61 *= 2;
            --v57;
            BOOL v60 = v56 != 0;
            BOOL v59 = v53 != 0;
          }
          while (v56 | v53);
LABEL_81:
          uint64_t v67 = a7;
          int v68 = v39 < 0x10 || v40;
          unsigned int v69 = (char *)(a4 + 8 * v58);
          unint64_t v70 = v198 + 2 * (v37 - a7);
          uint64_t v71 = (int32x4_t *)(a2 + v50);
          if (v207 < 0x10) {
            int v72 = 1;
          }
          else {
            int v72 = v68;
          }
          __src = v71;
          if (v206)
          {
            if (!v72)
            {
              uint64_t v71 = (int32x4_t *)__dst;
LABEL_94:
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock(v70, a11, (unint64_t)v71, v69, v39, v207);
              goto LABEL_95;
            }
            int v73 = v38;
            memcpy(__dst, __src, sizeof(__dst));
            int v38 = v73;
            uint64_t v71 = (int32x4_t *)__dst;
            uint64_t v28 = v202;
          }
          else if (!v72)
          {
            goto LABEL_94;
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE7ELj1ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = v28;
          char v209 = v71;
          unsigned __int8 v217 = v39;
          unsigned __int8 v218 = v207;
          unsigned int v213 = v189;
          unsigned int v214 = v37 - v35;
          uint64_t v210 = v69;
          unint64_t v211 = v70;
          uint64_t v212 = a11;
          unsigned int v215 = v199;
          unsigned int v216 = v38;
          if (!v40)
          {
            unsigned int v74 = *v69;
            a7 = v67;
            if (v74 == 63)
            {
              int32x4_t v77 = v71[1];
              int32x4_t v78 = v71[2];
              int32x4_t v79 = v71[3];
              int32x4_t v80 = vuzp2q_s32(*v71, v78);
              int32x4_t v220 = vuzp1q_s32(*v71, v78);
              int32x4_t v222 = v80;
              int32x4_t v224 = vuzp1q_s32(v77, v79);
              int32x4_t v226 = vuzp2q_s32(v77, v79);
              uint64_t v75 = 64;
            }
            else if (v74 == 1)
            {
              int16x8_t v76 = vld1q_dup_s16(v71->i16);
              int32x4_t v220 = (int32x4_t)v76;
              int32x4_t v222 = (int32x4_t)v76;
              int32x4_t v224 = (int32x4_t)v76;
              int32x4_t v226 = (int32x4_t)v76;
              uint64_t v75 = 2;
            }
            else if (*v69)
            {
              uint64_t v75 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v220, 32, (uint64_t)v71, v74);
            }
            else
            {
              uint64_t v75 = 0;
              int32x4_t v220 = 0uLL;
              int32x4_t v222 = 0uLL;
              int32x4_t v224 = 0uLL;
              int32x4_t v226 = 0uLL;
            }
            uint64_t v81 = (uint64_t)v71->i64 + v75;
            unsigned int v82 = v69[1];
            if (v82 == 63)
            {
              int32x4_t v85 = *(int32x4_t *)(v81 + 16);
              int32x4_t v86 = *(int32x4_t *)(v81 + 32);
              int32x4_t v87 = *(int32x4_t *)(v81 + 48);
              int32x4_t v88 = vuzp2q_s32(*(int32x4_t *)v81, v86);
              int32x4_t v228 = vuzp1q_s32(*(int32x4_t *)v81, v86);
              int32x4_t v230 = v88;
              int32x4_t v232 = vuzp1q_s32(v85, v87);
              int32x4_t v234 = vuzp2q_s32(v85, v87);
              uint64_t v83 = 64;
            }
            else if (v82 == 1)
            {
              int16x8_t v84 = vld1q_dup_s16((const __int16 *)v81);
              int32x4_t v228 = (int32x4_t)v84;
              int32x4_t v230 = (int32x4_t)v84;
              int32x4_t v232 = (int32x4_t)v84;
              int32x4_t v234 = (int32x4_t)v84;
              uint64_t v83 = 2;
            }
            else if (v69[1])
            {
              uint64_t v83 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v228, 32, v81, v82);
            }
            else
            {
              uint64_t v83 = 0;
              int32x4_t v228 = 0uLL;
              int32x4_t v230 = 0uLL;
              int32x4_t v232 = 0uLL;
              int32x4_t v234 = 0uLL;
            }
            uint64_t v89 = v81 + v83;
            unsigned int v90 = v69[2];
            if (v90 == 63)
            {
              int32x4_t v93 = *(int32x4_t *)(v89 + 16);
              int32x4_t v94 = *(int32x4_t *)(v89 + 32);
              int32x4_t v95 = *(int32x4_t *)(v89 + 48);
              int32x4_t v96 = vuzp2q_s32(*(int32x4_t *)v89, v94);
              int32x4_t v221 = vuzp1q_s32(*(int32x4_t *)v89, v94);
              int32x4_t v223 = v96;
              int32x4_t v225 = vuzp1q_s32(v93, v95);
              int32x4_t v227 = vuzp2q_s32(v93, v95);
              uint64_t v91 = 64;
            }
            else if (v90 == 1)
            {
              int16x8_t v92 = vld1q_dup_s16((const __int16 *)v89);
              int32x4_t v221 = (int32x4_t)v92;
              int32x4_t v223 = (int32x4_t)v92;
              int32x4_t v225 = (int32x4_t)v92;
              int32x4_t v227 = (int32x4_t)v92;
              uint64_t v91 = 2;
            }
            else if (v69[2])
            {
              uint64_t v91 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v221, 32, v89, v90);
            }
            else
            {
              uint64_t v91 = 0;
              int32x4_t v221 = 0uLL;
              int32x4_t v223 = 0uLL;
              int32x4_t v225 = 0uLL;
              int32x4_t v227 = 0uLL;
            }
            uint64_t v97 = v89 + v91;
            unsigned int v98 = v69[3];
            if (v98 == 63)
            {
              int32x4_t v101 = *(int32x4_t *)(v97 + 16);
              int32x4_t v102 = *(int32x4_t *)(v97 + 32);
              int32x4_t v103 = *(int32x4_t *)(v97 + 48);
              int32x4_t v104 = vuzp2q_s32(*(int32x4_t *)v97, v102);
              int32x4_t v229 = vuzp1q_s32(*(int32x4_t *)v97, v102);
              int32x4_t v231 = v104;
              int32x4_t v233 = vuzp1q_s32(v101, v103);
              int32x4_t v235 = vuzp2q_s32(v101, v103);
              uint64_t v99 = 64;
            }
            else if (v98 == 1)
            {
              int16x8_t v100 = vld1q_dup_s16((const __int16 *)v97);
              int32x4_t v229 = (int32x4_t)v100;
              int32x4_t v231 = (int32x4_t)v100;
              int32x4_t v233 = (int32x4_t)v100;
              int32x4_t v235 = (int32x4_t)v100;
              uint64_t v99 = 2;
            }
            else if (v69[3])
            {
              uint64_t v99 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v229, 32, v97, v98);
            }
            else
            {
              uint64_t v99 = 0;
              int32x4_t v229 = 0uLL;
              int32x4_t v231 = 0uLL;
              int32x4_t v233 = 0uLL;
              int32x4_t v235 = 0uLL;
            }
            uint64_t v105 = v97 + v99;
            unsigned int v106 = v69[4];
            if (v106 == 63)
            {
              int32x4_t v109 = *(int32x4_t *)(v105 + 16);
              int32x4_t v110 = *(int32x4_t *)(v105 + 32);
              int32x4_t v111 = *(int32x4_t *)(v105 + 48);
              int32x4_t v112 = vuzp2q_s32(*(int32x4_t *)v105, v110);
              int32x4_t v236 = vuzp1q_s32(*(int32x4_t *)v105, v110);
              int32x4_t v238 = v112;
              int32x4_t v240 = vuzp1q_s32(v109, v111);
              int32x4_t v242 = vuzp2q_s32(v109, v111);
              uint64_t v107 = 64;
            }
            else if (v106 == 1)
            {
              int16x8_t v108 = vld1q_dup_s16((const __int16 *)v105);
              int32x4_t v236 = (int32x4_t)v108;
              int32x4_t v238 = (int32x4_t)v108;
              int32x4_t v240 = (int32x4_t)v108;
              int32x4_t v242 = (int32x4_t)v108;
              uint64_t v107 = 2;
            }
            else if (v69[4])
            {
              uint64_t v107 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v236, 32, v105, v106);
            }
            else
            {
              uint64_t v107 = 0;
              int32x4_t v236 = 0uLL;
              int32x4_t v238 = 0uLL;
              int32x4_t v240 = 0uLL;
              int32x4_t v242 = 0uLL;
            }
            uint64_t v113 = v105 + v107;
            unsigned int v114 = v69[5];
            if (v114 == 63)
            {
              int32x4_t v117 = *(int32x4_t *)(v113 + 16);
              int32x4_t v118 = *(int32x4_t *)(v113 + 32);
              int32x4_t v119 = *(int32x4_t *)(v113 + 48);
              int32x4_t v120 = vuzp2q_s32(*(int32x4_t *)v113, v118);
              int32x4_t v244 = vuzp1q_s32(*(int32x4_t *)v113, v118);
              int32x4_t v246 = v120;
              int32x4_t v248 = vuzp1q_s32(v117, v119);
              int32x4_t v250 = vuzp2q_s32(v117, v119);
              uint64_t v115 = 64;
            }
            else if (v114 == 1)
            {
              int16x8_t v116 = vld1q_dup_s16((const __int16 *)v113);
              int32x4_t v244 = (int32x4_t)v116;
              int32x4_t v246 = (int32x4_t)v116;
              int32x4_t v248 = (int32x4_t)v116;
              int32x4_t v250 = (int32x4_t)v116;
              uint64_t v115 = 2;
            }
            else if (v69[5])
            {
              uint64_t v115 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v244, 32, v113, v114);
            }
            else
            {
              uint64_t v115 = 0;
              int32x4_t v244 = 0uLL;
              int32x4_t v246 = 0uLL;
              int32x4_t v248 = 0uLL;
              int32x4_t v250 = 0uLL;
            }
            uint64_t v121 = v113 + v115;
            unsigned int v122 = v69[6];
            if (v122 == 63)
            {
              int32x4_t v125 = *(int32x4_t *)(v121 + 16);
              int32x4_t v126 = *(int32x4_t *)(v121 + 32);
              int32x4_t v127 = *(int32x4_t *)(v121 + 48);
              int32x4_t v128 = vuzp2q_s32(*(int32x4_t *)v121, v126);
              int32x4_t v237 = vuzp1q_s32(*(int32x4_t *)v121, v126);
              int32x4_t v239 = v128;
              int32x4_t v241 = vuzp1q_s32(v125, v127);
              int32x4_t v243 = vuzp2q_s32(v125, v127);
              uint64_t v123 = 64;
            }
            else if (v122 == 1)
            {
              int16x8_t v124 = vld1q_dup_s16((const __int16 *)v121);
              int32x4_t v237 = (int32x4_t)v124;
              int32x4_t v239 = (int32x4_t)v124;
              int32x4_t v241 = (int32x4_t)v124;
              int32x4_t v243 = (int32x4_t)v124;
              uint64_t v123 = 2;
            }
            else if (v69[6])
            {
              uint64_t v123 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v237, 32, v121, v122);
            }
            else
            {
              uint64_t v123 = 0;
              int32x4_t v237 = 0uLL;
              int32x4_t v239 = 0uLL;
              int32x4_t v241 = 0uLL;
              int32x4_t v243 = 0uLL;
            }
            uint64_t v129 = v121 + v123;
            unsigned int v130 = v69[7];
            if (v130 == 63)
            {
              int32x4_t v133 = *(int32x4_t *)(v129 + 16);
              int32x4_t v134 = *(int32x4_t *)(v129 + 32);
              int32x4_t v135 = *(int32x4_t *)(v129 + 48);
              int32x4_t v136 = vuzp2q_s32(*(int32x4_t *)v129, v134);
              int32x4_t v245 = vuzp1q_s32(*(int32x4_t *)v129, v134);
              int32x4_t v247 = v136;
              int32x4_t v249 = vuzp1q_s32(v133, v135);
              int32x4_t v251 = vuzp2q_s32(v133, v135);
              uint64_t v131 = v215;
              if (v215) {
                goto LABEL_156;
              }
            }
            else
            {
              if (v130 != 1)
              {
                if (v69[7])
                {
                  AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v245, 32, v129, v130);
                  uint64_t v131 = v215;
                  if (!v215) {
                    goto LABEL_190;
                  }
                }
                else
                {
                  int32x4_t v245 = 0uLL;
                  int32x4_t v247 = 0uLL;
                  int32x4_t v249 = 0uLL;
                  int32x4_t v251 = 0uLL;
                  uint64_t v131 = v215;
                  if (!v215) {
                    goto LABEL_190;
                  }
                }
LABEL_156:
                if (!v216) {
                  goto LABEL_190;
                }
                uint64_t v137 = 0;
                uint64_t v138 = 32 * v213;
                uint64_t v139 = 2 * v214;
                uint64_t v140 = &v220.i8[v138 + v139];
                unint64_t v141 = v211;
                uint64_t v142 = v212;
                unint64_t v143 = 2 * v216;
                if (v143 <= 1) {
                  unint64_t v144 = 1;
                }
                else {
                  unint64_t v144 = 2 * v216;
                }
                uint64_t v145 = v138 + v139;
                uint64_t v146 = &v220.i8[v138 + v139];
                if (v144) {
                  BOOL v147 = (v144 - 1) >> 32 == 0;
                }
                else {
                  BOOL v147 = 0;
                }
                uint64_t v148 = v144 & 0x1FFFFFFE0;
                uint64_t v149 = v144 & 0x1FFFFFFF8;
                char v151 = !v147 || v144 < 8;
                int32x4_t v152 = &v221.i8[v145];
                int32x4_t v153 = (long long *)(v211 + 16);
                uint64_t v154 = v140;
                unint64_t v155 = v211;
                while (2)
                {
                  uint64_t v156 = (char *)(v141 + v142 * v137);
                  int16x8_t v157 = &v140[32 * v137];
                  if ((unint64_t)(&v146[32 * v137] - v156) < 0x20) {
                    char v158 = 1;
                  }
                  else {
                    char v158 = v151;
                  }
                  if (v158)
                  {
                    int v159 = 0;
LABEL_187:
                    unsigned int v169 = v159 + 1;
                    do
                    {
                      char v170 = *v156++;
                      *v157++ = v170;
                    }
                    while (v143 > v169++);
                  }
                  else
                  {
                    if (v144 >= 0x20)
                    {
                      int32x4_t v161 = v153;
                      uint64_t v162 = v152;
                      uint64_t v163 = v144 & 0x1FFFFFFE0;
                      do
                      {
                        long long v164 = *v161;
                        *((_OWORD *)v162 - 1) = *(v161 - 1);
                        *(_OWORD *)uint64_t v162 = v164;
                        v162 += 32;
                        v161 += 2;
                        v163 -= 32;
                      }
                      while (v163);
                      if (v144 == v148) {
                        goto LABEL_170;
                      }
                      uint64_t v160 = v144 & 0x1FFFFFFE0;
                      if ((v144 & 0x18) == 0)
                      {
                        v156 += v148;
                        v157 += v148;
                        int v159 = v144 & 0xFFFFFFE0;
                        goto LABEL_187;
                      }
                    }
                    else
                    {
                      uint64_t v160 = 0;
                    }
                    v157 += v149;
                    uint64_t v165 = v160 - v149;
                    uint64_t v166 = (uint64_t *)(v155 + v160);
                    uint64_t v167 = &v154[v160];
                    do
                    {
                      uint64_t v168 = *v166++;
                      *(void *)uint64_t v167 = v168;
                      v167 += 8;
                      v165 += 8;
                    }
                    while (v165);
                    if (v144 != v149)
                    {
                      v156 += v149;
                      int v159 = v144 & 0xFFFFFFF8;
                      goto LABEL_187;
                    }
                  }
LABEL_170:
                  ++v137;
                  v152 += 32;
                  int32x4_t v153 = (long long *)((char *)v153 + v142);
                  v155 += v142;
                  v154 += 32;
                  if (v137 == v131) {
                    goto LABEL_190;
                  }
                  continue;
                }
              }
              int16x8_t v132 = vld1q_dup_s16((const __int16 *)v129);
              int32x4_t v245 = (int32x4_t)v132;
              int32x4_t v247 = (int32x4_t)v132;
              int32x4_t v249 = (int32x4_t)v132;
              int32x4_t v251 = (int32x4_t)v132;
              uint64_t v131 = v215;
              if (v215) {
                goto LABEL_156;
              }
            }
LABEL_190:
            AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)&v220, 32, (unint64_t)v209, v210, v217, v218);
            if (!v206) {
              goto LABEL_26;
            }
            goto LABEL_191;
          }
          dispatch_sync(*(dispatch_queue_t *)(*(void *)(v28 + 8) + 7384), block);
LABEL_95:
          a7 = v67;
          if (!v206) {
            goto LABEL_26;
          }
LABEL_191:
          memcpy(__src, v71, 0x200uLL);
LABEL_26:
          BOOL v23 = v33++ == v194 >> 4;
          uint64_t v28 = v202;
        }
        while (!v23);
        BOOL v23 = v18++ == v188;
      }
      while (!v23);
    }
  }
}

uint64_t AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, int a12)
{
  uint64_t v291 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v241 = a8;
  unsigned int v17 = a8 >> 4;
  unsigned int v223 = a8 + a10 - 1;
  unsigned int v225 = v223 >> 4;
  unsigned int v18 = *(unsigned __int8 *)(*(void *)(a1 + 208) + 88);
  unsigned int v19 = *(_DWORD *)(a1 + 112);
  uint64_t v243 = a1;
  if (*(void *)(a1 + 168)) {
    int v20 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v20 = 0;
  }
  BOOL v21 = (v20 & 0xD00) == 0 || v20 == 768;
  int v22 = v20 & 0xE00;
  int v24 = !v21 && v22 != 1024;
  int v246 = v24;
  uint64_t result = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::isLevelTiled(a1, *(_DWORD *)(a1 + 144) + a12);
  uint64_t v26 = a1;
  int v235 = result;
  if (v17 <= v225)
  {
    unsigned int v234 = a7 + a9 - 1;
    unsigned int v222 = a7 >> 4;
    if (a7 >> 4 <= v234 >> 4)
    {
      unsigned int v219 = a5 - 1;
      unsigned int v245 = (a5 - 1) >> 4;
      int v244 = ((a5 - 1) & 0xF) + 1;
      int v220 = ((a6 - 1) & 0xF) + 1;
      unsigned int v221 = (a6 - 1) >> 4;
      uint32x2_t v27 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0xF0000000FLL);
      int8x8_t v28 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v27, 4uLL))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x2000000020, v27));
      __int32 v232 = v28.i32[0] | v28.i32[1];
      BOOL v229 = v28.i32[1] != 0;
      int8x8_t v230 = v28;
      BOOL v228 = v28.i32[0] != 0;
      unint64_t v218 = 8 * v19 * (unint64_t)v18;
      uint64_t v29 = a11;
      uint64_t v30 = 4 * a11;
      uint64_t result = 2 * a11;
      unsigned int v233 = a7;
      do
      {
        unsigned int v31 = (16 * v17) | 0xF;
        if (16 * v17 <= v241) {
          int v32 = v241;
        }
        else {
          int v32 = 16 * v17;
        }
        unsigned int v33 = v222;
        if (v223 < v31) {
          unsigned int v31 = v223;
        }
        unsigned int v240 = 16 * v17;
        int v227 = v32 - 16 * v17;
        int v239 = v31 - v32 + 1;
        if (v17 == v221) {
          unsigned int v34 = v220;
        }
        else {
          unsigned int v34 = 16;
        }
        uint64_t v238 = a3 + (v32 - v241) * v29;
        unsigned int v226 = v34;
        do
        {
          unsigned int v35 = 16 * v33;
          unsigned int v36 = 16 * (v33 + 1) - 1;
          if (16 * v33 <= a7) {
            int v37 = a7;
          }
          else {
            int v37 = 16 * v33;
          }
          if (v234 < v36) {
            unsigned int v36 = v234;
          }
          int v38 = v36 - v37 + 1;
          if (v33 == v245) {
            unsigned int v39 = v244;
          }
          else {
            unsigned int v39 = 16;
          }
          BOOL v40 = 1;
          if (v240 >= v241 && v35 >= a7)
          {
            int v41 = v244;
            if (v33 != v245) {
              int v41 = 16;
            }
            BOOL v40 = v38 != v41 || v239 != v34;
          }
          if (v235)
          {
            unsigned int v62 = 0;
            uint64_t v63 = v218 >> (*(unsigned char *)(v26 + 57) != 0);
            char v64 = 1;
            if (v63 > 127)
            {
              if (v63 > 511)
              {
                if (v63 == 512)
                {
                  unsigned int v62 = 16;
                  char v65 = 1;
                  unsigned int v66 = 16;
                }
                else
                {
                  char v65 = 1;
                  unsigned int v66 = 0;
                  if (v63 == 1024)
                  {
                    unsigned int v66 = 8;
                    unsigned int v62 = 16;
                  }
                }
              }
              else if (v63 == 128)
              {
                char v64 = 0;
                char v65 = 0;
                unsigned int v62 = 32;
                unsigned int v66 = 32;
              }
              else
              {
                char v65 = 1;
                unsigned int v66 = 0;
                if (v63 == 256)
                {
                  char v64 = 0;
                  unsigned int v66 = 16;
                  unsigned int v62 = 32;
                }
              }
            }
            else
            {
              char v65 = 1;
              unsigned int v66 = 0;
              switch(v63)
              {
                case 4:
                  char v64 = 0;
                  char v65 = 0;
                  unsigned int v66 = 128;
                  unsigned int v62 = 256;
                  break;
                case 5:
                case 6:
                case 7:
                case 9:
                case 10:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 17:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                  break;
                case 8:
                  char v64 = 0;
                  char v65 = 0;
                  unsigned int v62 = 128;
                  unsigned int v66 = 128;
                  break;
                case 16:
                  char v64 = 0;
                  char v65 = 0;
                  unsigned int v66 = 64;
                  unsigned int v62 = 128;
                  break;
                case 32:
                  char v64 = 0;
                  char v65 = 0;
                  unsigned int v62 = 64;
                  unsigned int v66 = 64;
                  break;
                default:
                  if (v63 == 64)
                  {
                    char v64 = 0;
                    char v65 = 0;
                    unsigned int v66 = 32;
                    unsigned int v62 = 64;
                  }
                  break;
              }
            }
            unsigned int v209 = (v62 >> 4) - 1;
            if (v64)
            {
              unsigned int v210 = 0;
              if (v65) {
                goto LABEL_244;
              }
LABEL_233:
              unsigned int v211 = 32 - __clz(~(-1 << -(char)__clz(((v66 + 15) >> 4) - 1)));
              if (v211 | v210) {
                goto LABEL_234;
              }
LABEL_245:
              uint64_t v213 = 0;
            }
            else
            {
              unsigned int v210 = 32 - __clz(~(-1 << -(char)__clz(v209)));
              if ((v65 & 1) == 0) {
                goto LABEL_233;
              }
LABEL_244:
              unsigned int v211 = 0;
              if (!v210) {
                goto LABEL_245;
              }
LABEL_234:
              int v212 = 0;
              uint64_t v213 = 0;
              int v214 = v33 & v209;
              BOOL v215 = v210 != 0;
              BOOL v216 = v211 != 0;
              int v217 = 1;
              do
              {
                --v210;
                if (v215) {
                  v213 |= (unint64_t)(v217 & v214) << v212++;
                }
                else {
                  unsigned int v210 = 0;
                }
                --v211;
                if (v216) {
                  v213 |= (unint64_t)(v217 & v17 & ((v66 >> 4) - 1)) << v212++;
                }
                else {
                  unsigned int v211 = 0;
                }
                v217 *= 2;
                --v212;
                BOOL v216 = v211 != 0;
                BOOL v215 = v210 != 0;
              }
              while (v211 | v210);
            }
            unint64_t v50 = ((unint64_t)(v35 / v62 + v240 / v66 * ((v62 + v219) / v62)) << 14) + (v213 << 9);
            uint64_t result = 2 * a11;
            goto LABEL_60;
          }
          if (v232)
          {
            int v43 = 0;
            uint64_t v44 = 0;
            int v45 = 1;
            BOOL v46 = v229;
            BOOL v47 = v228;
            __int32 v48 = v230.i32[1];
            __int32 v49 = v230.i32[0];
            do
            {
              --v48;
              if (v46) {
                v44 |= (unint64_t)(v45 & v33) << v43++;
              }
              else {
                __int32 v48 = 0;
              }
              --v49;
              if (v47) {
                v44 |= (unint64_t)(v45 & v17) << v43++;
              }
              else {
                __int32 v49 = 0;
              }
              v45 *= 2;
              --v43;
              BOOL v47 = v49 != 0;
              BOOL v46 = v48 != 0;
            }
            while (v49 | v48);
          }
          else
          {
            uint64_t v44 = 0;
          }
          unint64_t v50 = v44 << 9;
LABEL_60:
          unsigned int v51 = *(_DWORD *)(v26 + 128) >> (*(unsigned char *)(v26 + 144) + a12);
          if (v51 <= 1) {
            unsigned int v51 = 1;
          }
          unsigned int v52 = v51 + 15;
          if (v52 < 0x20) {
            unsigned int v53 = 0;
          }
          else {
            unsigned int v53 = 32 - __clz(~(-1 << -(char)__clz((v52 >> 4) - 1)));
          }
          unsigned int v54 = *(_DWORD *)(v26 + 132) >> (*(unsigned char *)(v26 + 144) + a12);
          if (v54 <= 1) {
            unsigned int v54 = 1;
          }
          unsigned int v55 = v54 + 15;
          if (v55 < 0x20)
          {
            unsigned int v56 = 0;
            if (!v53)
            {
LABEL_82:
              uint64_t v58 = 0;
              goto LABEL_83;
            }
          }
          else
          {
            unsigned int v56 = 32 - __clz(~(-1 << -(char)__clz((v55 >> 4) - 1)));
            if (!(v56 | v53)) {
              goto LABEL_82;
            }
          }
          int v57 = 0;
          uint64_t v58 = 0;
          BOOL v59 = v53 != 0;
          BOOL v60 = v56 != 0;
          int v61 = 1;
          do
          {
            --v53;
            if (v59) {
              v58 |= (unint64_t)(v61 & v33) << v57++;
            }
            else {
              unsigned int v53 = 0;
            }
            --v56;
            if (v60) {
              v58 |= (unint64_t)(v61 & v17) << v57++;
            }
            else {
              unsigned int v56 = 0;
            }
            v61 *= 2;
            --v57;
            BOOL v60 = v56 != 0;
            BOOL v59 = v53 != 0;
          }
          while (v56 | v53);
LABEL_83:
          unsigned int v67 = v37 - a7;
          int v68 = v39 < 0x10 || v40;
          unsigned int v69 = (char *)(a4 + 8 * v58);
          uint64_t v70 = v238 + 2 * v67;
          uint64_t v71 = (int32x4_t *)(a2 + v50);
          if (v34 < 0x10) {
            int v72 = 1;
          }
          else {
            int v72 = v68;
          }
          if (v246)
          {
            if (v72)
            {
              int v73 = v71;
              int v74 = v38;
              BOOL v75 = v40;
              memcpy(v258, v71, sizeof(v258));
              BOOL v40 = v75;
              unsigned int v35 = 16 * v33;
              uint64_t v29 = a11;
              unsigned int v34 = v226;
              int v38 = v74;
              int16x8_t v76 = (int32x4_t *)v258;
              uint64_t v71 = v73;
              uint64_t v26 = v243;
LABEL_93:
              __dst = v71;
              block[0] = MEMORY[0x263EF8330];
              block[1] = 3221225472;
              block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE7ELj1ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
              block[3] = &__block_descriptor_90_e5_v8__0l;
              block[4] = v26;
              int32x4_t v248 = v76;
              unsigned __int8 v256 = v39;
              unsigned __int8 v257 = v34;
              unsigned int v252 = v227;
              unsigned int v253 = v37 - v35;
              int32x4_t v249 = v69;
              uint64_t v250 = v70;
              uint64_t v251 = v29;
              unsigned int v254 = v239;
              unsigned int v255 = v38;
              int32x4_t v242 = v76;
              if (v40)
              {
                dispatch_sync(*(dispatch_queue_t *)(*(void *)(v26 + 8) + 7384), block);
                int16x8_t v76 = v242;
                uint64_t v26 = v243;
                uint64_t result = 2 * a11;
                a7 = v233;
                uint64_t v30 = 4 * a11;
                goto LABEL_95;
              }
              unsigned int v93 = *v69;
              if (v93 == 63)
              {
                int32x4_t v96 = v76[1];
                int32x4_t v97 = v76[2];
                int32x4_t v98 = v76[3];
                int32x4_t v99 = vuzp2q_s32(*v76, v97);
                int32x4_t v259 = vuzp1q_s32(*v76, v97);
                int32x4_t v261 = v99;
                int32x4_t v263 = vuzp1q_s32(v96, v98);
                int32x4_t v265 = vuzp2q_s32(v96, v98);
                uint64_t v94 = 64;
              }
              else if (v93 == 1)
              {
                int16x8_t v95 = vld1q_dup_s16(v76->i16);
                int32x4_t v259 = (int32x4_t)v95;
                int32x4_t v261 = (int32x4_t)v95;
                int32x4_t v263 = (int32x4_t)v95;
                int32x4_t v265 = (int32x4_t)v95;
                uint64_t v94 = 2;
              }
              else if (*v69)
              {
                uint64_t v94 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v259, 32, (uint64_t)v76, v93);
                int16x8_t v76 = v242;
              }
              else
              {
                uint64_t v94 = 0;
                int32x4_t v259 = 0uLL;
                int32x4_t v261 = 0uLL;
                int32x4_t v263 = 0uLL;
                int32x4_t v265 = 0uLL;
              }
              uint64_t v100 = (uint64_t)v76->i64 + v94;
              unsigned int v101 = v69[1];
              if (v101 == 63)
              {
                int32x4_t v104 = *(int32x4_t *)(v100 + 16);
                int32x4_t v105 = *(int32x4_t *)(v100 + 32);
                int32x4_t v106 = *(int32x4_t *)(v100 + 48);
                int32x4_t v107 = vuzp2q_s32(*(int32x4_t *)v100, v105);
                int32x4_t v267 = vuzp1q_s32(*(int32x4_t *)v100, v105);
                int32x4_t v269 = v107;
                int32x4_t v271 = vuzp1q_s32(v104, v106);
                int32x4_t v273 = vuzp2q_s32(v104, v106);
                uint64_t v102 = 64;
              }
              else if (v101 == 1)
              {
                int16x8_t v103 = vld1q_dup_s16((const __int16 *)v100);
                int32x4_t v267 = (int32x4_t)v103;
                int32x4_t v269 = (int32x4_t)v103;
                int32x4_t v271 = (int32x4_t)v103;
                int32x4_t v273 = (int32x4_t)v103;
                uint64_t v102 = 2;
              }
              else if (v69[1])
              {
                uint64_t v102 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v267, 32, v100, v101);
              }
              else
              {
                uint64_t v102 = 0;
                int32x4_t v267 = 0uLL;
                int32x4_t v269 = 0uLL;
                int32x4_t v271 = 0uLL;
                int32x4_t v273 = 0uLL;
              }
              uint64_t v108 = v100 + v102;
              unsigned int v109 = v69[2];
              if (v109 == 63)
              {
                int32x4_t v112 = *(int32x4_t *)(v108 + 16);
                int32x4_t v113 = *(int32x4_t *)(v108 + 32);
                int32x4_t v114 = *(int32x4_t *)(v108 + 48);
                int32x4_t v115 = vuzp2q_s32(*(int32x4_t *)v108, v113);
                int32x4_t v260 = vuzp1q_s32(*(int32x4_t *)v108, v113);
                int32x4_t v262 = v115;
                int32x4_t v264 = vuzp1q_s32(v112, v114);
                int32x4_t v266 = vuzp2q_s32(v112, v114);
                uint64_t v110 = 64;
              }
              else if (v109 == 1)
              {
                int16x8_t v111 = vld1q_dup_s16((const __int16 *)v108);
                int32x4_t v260 = (int32x4_t)v111;
                int32x4_t v262 = (int32x4_t)v111;
                int32x4_t v264 = (int32x4_t)v111;
                int32x4_t v266 = (int32x4_t)v111;
                uint64_t v110 = 2;
              }
              else if (v69[2])
              {
                uint64_t v110 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v260, 32, v108, v109);
              }
              else
              {
                uint64_t v110 = 0;
                int32x4_t v260 = 0uLL;
                int32x4_t v262 = 0uLL;
                int32x4_t v264 = 0uLL;
                int32x4_t v266 = 0uLL;
              }
              uint64_t v116 = v108 + v110;
              unsigned int v117 = v69[3];
              if (v117 == 63)
              {
                int32x4_t v120 = *(int32x4_t *)(v116 + 16);
                int32x4_t v121 = *(int32x4_t *)(v116 + 32);
                int32x4_t v122 = *(int32x4_t *)(v116 + 48);
                int32x4_t v123 = vuzp2q_s32(*(int32x4_t *)v116, v121);
                int32x4_t v268 = vuzp1q_s32(*(int32x4_t *)v116, v121);
                int32x4_t v270 = v123;
                int32x4_t v272 = vuzp1q_s32(v120, v122);
                int32x4_t v274 = vuzp2q_s32(v120, v122);
                uint64_t v118 = 64;
              }
              else if (v117 == 1)
              {
                int16x8_t v119 = vld1q_dup_s16((const __int16 *)v116);
                int32x4_t v268 = (int32x4_t)v119;
                int32x4_t v270 = (int32x4_t)v119;
                int32x4_t v272 = (int32x4_t)v119;
                int32x4_t v274 = (int32x4_t)v119;
                uint64_t v118 = 2;
              }
              else if (v69[3])
              {
                uint64_t v118 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v268, 32, v116, v117);
              }
              else
              {
                uint64_t v118 = 0;
                int32x4_t v268 = 0uLL;
                int32x4_t v270 = 0uLL;
                int32x4_t v272 = 0uLL;
                int32x4_t v274 = 0uLL;
              }
              uint64_t v124 = v116 + v118;
              unsigned int v125 = v69[4];
              if (v125 == 63)
              {
                int32x4_t v128 = *(int32x4_t *)(v124 + 16);
                int32x4_t v129 = *(int32x4_t *)(v124 + 32);
                int32x4_t v130 = *(int32x4_t *)(v124 + 48);
                int32x4_t v131 = vuzp2q_s32(*(int32x4_t *)v124, v129);
                int32x4_t v275 = vuzp1q_s32(*(int32x4_t *)v124, v129);
                int32x4_t v277 = v131;
                int32x4_t v279 = vuzp1q_s32(v128, v130);
                int32x4_t v281 = vuzp2q_s32(v128, v130);
                uint64_t v126 = 64;
              }
              else if (v125 == 1)
              {
                int16x8_t v127 = vld1q_dup_s16((const __int16 *)v124);
                int32x4_t v275 = (int32x4_t)v127;
                int32x4_t v277 = (int32x4_t)v127;
                int32x4_t v279 = (int32x4_t)v127;
                int32x4_t v281 = (int32x4_t)v127;
                uint64_t v126 = 2;
              }
              else if (v69[4])
              {
                uint64_t v126 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v275, 32, v124, v125);
              }
              else
              {
                uint64_t v126 = 0;
                int32x4_t v275 = 0uLL;
                int32x4_t v277 = 0uLL;
                int32x4_t v279 = 0uLL;
                int32x4_t v281 = 0uLL;
              }
              uint64_t v132 = v124 + v126;
              unsigned int v133 = v69[5];
              if (v133 == 63)
              {
                int32x4_t v136 = *(int32x4_t *)(v132 + 16);
                int32x4_t v137 = *(int32x4_t *)(v132 + 32);
                int32x4_t v138 = *(int32x4_t *)(v132 + 48);
                int32x4_t v139 = vuzp2q_s32(*(int32x4_t *)v132, v137);
                int32x4_t v283 = vuzp1q_s32(*(int32x4_t *)v132, v137);
                int32x4_t v285 = v139;
                int32x4_t v287 = vuzp1q_s32(v136, v138);
                int32x4_t v289 = vuzp2q_s32(v136, v138);
                uint64_t v134 = 64;
              }
              else if (v133 == 1)
              {
                int16x8_t v135 = vld1q_dup_s16((const __int16 *)v132);
                int32x4_t v283 = (int32x4_t)v135;
                int32x4_t v285 = (int32x4_t)v135;
                int32x4_t v287 = (int32x4_t)v135;
                int32x4_t v289 = (int32x4_t)v135;
                uint64_t v134 = 2;
              }
              else if (v69[5])
              {
                uint64_t v134 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v283, 32, v132, v133);
              }
              else
              {
                uint64_t v134 = 0;
                int32x4_t v283 = 0uLL;
                int32x4_t v285 = 0uLL;
                int32x4_t v287 = 0uLL;
                int32x4_t v289 = 0uLL;
              }
              uint64_t v140 = v132 + v134;
              unsigned int v141 = v69[6];
              if (v141 == 63)
              {
                int32x4_t v144 = *(int32x4_t *)(v140 + 16);
                int32x4_t v145 = *(int32x4_t *)(v140 + 32);
                int32x4_t v146 = *(int32x4_t *)(v140 + 48);
                int32x4_t v147 = vuzp2q_s32(*(int32x4_t *)v140, v145);
                int32x4_t v276 = vuzp1q_s32(*(int32x4_t *)v140, v145);
                int32x4_t v278 = v147;
                int32x4_t v280 = vuzp1q_s32(v144, v146);
                int32x4_t v282 = vuzp2q_s32(v144, v146);
                uint64_t v142 = 64;
              }
              else if (v141 == 1)
              {
                int16x8_t v143 = vld1q_dup_s16((const __int16 *)v140);
                int32x4_t v276 = (int32x4_t)v143;
                int32x4_t v278 = (int32x4_t)v143;
                int32x4_t v280 = (int32x4_t)v143;
                int32x4_t v282 = (int32x4_t)v143;
                uint64_t v142 = 2;
              }
              else if (v69[6])
              {
                uint64_t v142 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v276, 32, v140, v141);
              }
              else
              {
                uint64_t v142 = 0;
                int32x4_t v276 = 0uLL;
                int32x4_t v278 = 0uLL;
                int32x4_t v280 = 0uLL;
                int32x4_t v282 = 0uLL;
              }
              uint64_t v148 = v140 + v142;
              unsigned int v149 = v69[7];
              if (v149 == 63)
              {
                int32x4_t v152 = *(int32x4_t *)(v148 + 16);
                int32x4_t v153 = *(int32x4_t *)(v148 + 32);
                int32x4_t v154 = *(int32x4_t *)(v148 + 48);
                int32x4_t v155 = vuzp2q_s32(*(int32x4_t *)v148, v153);
                int32x4_t v284 = vuzp1q_s32(*(int32x4_t *)v148, v153);
                int32x4_t v286 = v155;
                int32x4_t v288 = vuzp1q_s32(v152, v154);
                int32x4_t v290 = vuzp2q_s32(v152, v154);
                uint64_t v150 = v254;
                if (v254) {
                  goto LABEL_171;
                }
              }
              else
              {
                if (v149 != 1)
                {
                  if (v69[7])
                  {
                    AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v284, 32, v148, v149);
                    uint64_t v150 = v254;
                    if (!v254) {
                      goto LABEL_205;
                    }
                  }
                  else
                  {
                    int32x4_t v284 = 0uLL;
                    int32x4_t v286 = 0uLL;
                    int32x4_t v288 = 0uLL;
                    int32x4_t v290 = 0uLL;
                    uint64_t v150 = v254;
                    if (!v254) {
                      goto LABEL_205;
                    }
                  }
LABEL_171:
                  if (!v255) {
                    goto LABEL_205;
                  }
                  uint64_t v156 = 0;
                  uint64_t v157 = 32 * v252;
                  uint64_t v158 = 2 * v253;
                  int v159 = &v259.i8[v157 + v158];
                  uint64_t v160 = v250;
                  uint64_t v161 = v251;
                  unint64_t v162 = 2 * v255;
                  if (v162 <= 1) {
                    unint64_t v163 = 1;
                  }
                  else {
                    unint64_t v163 = 2 * v255;
                  }
                  uint64_t v164 = v157 + v158;
                  uint64_t v165 = &v259.i8[v157 + v158];
                  if (v163) {
                    BOOL v166 = (v163 - 1) >> 32 == 0;
                  }
                  else {
                    BOOL v166 = 0;
                  }
                  uint64_t v167 = v163 & 0x1FFFFFFE0;
                  uint64_t v168 = v163 & 0x1FFFFFFF8;
                  char v170 = !v166 || v163 < 8;
                  int v171 = &v260.i8[v164];
                  unsigned int v172 = (long long *)(v250 + 16);
                  unsigned int v173 = v159;
                  uint64_t v174 = v250;
                  while (2)
                  {
                    int v175 = (char *)(v160 + v161 * v156);
                    uint64_t v176 = &v159[32 * v156];
                    if ((unint64_t)(&v165[32 * v156] - v175) < 0x20) {
                      char v177 = 1;
                    }
                    else {
                      char v177 = v170;
                    }
                    if (v177)
                    {
                      int v178 = 0;
LABEL_202:
                      unsigned int v188 = v178 + 1;
                      do
                      {
                        char v189 = *v175++;
                        *v176++ = v189;
                      }
                      while (v162 > v188++);
                    }
                    else
                    {
                      if (v163 >= 0x20)
                      {
                        int v180 = v172;
                        unint64_t v181 = v171;
                        uint64_t v182 = v163 & 0x1FFFFFFE0;
                        do
                        {
                          long long v183 = *v180;
                          *((_OWORD *)v181 - 1) = *(v180 - 1);
                          *(_OWORD *)unint64_t v181 = v183;
                          v181 += 32;
                          v180 += 2;
                          v182 -= 32;
                        }
                        while (v182);
                        if (v163 == v167) {
                          goto LABEL_185;
                        }
                        uint64_t v179 = v163 & 0x1FFFFFFE0;
                        if ((v163 & 0x18) == 0)
                        {
                          v175 += v167;
                          v176 += v167;
                          int v178 = v163 & 0xFFFFFFE0;
                          goto LABEL_202;
                        }
                      }
                      else
                      {
                        uint64_t v179 = 0;
                      }
                      v176 += v168;
                      uint64_t v184 = v179 - v168;
                      unsigned int v185 = (uint64_t *)(v174 + v179);
                      unsigned int v186 = &v173[v179];
                      do
                      {
                        uint64_t v187 = *v185++;
                        *(void *)unsigned int v186 = v187;
                        v186 += 8;
                        v184 += 8;
                      }
                      while (v184);
                      if (v163 != v168)
                      {
                        v175 += v168;
                        int v178 = v163 & 0xFFFFFFF8;
                        goto LABEL_202;
                      }
                    }
LABEL_185:
                    ++v156;
                    v171 += 32;
                    unsigned int v172 = (long long *)((char *)v172 + v161);
                    v174 += v161;
                    v173 += 32;
                    if (v156 == v150) {
                      goto LABEL_205;
                    }
                    continue;
                  }
                }
                int16x8_t v151 = vld1q_dup_s16((const __int16 *)v148);
                int32x4_t v284 = (int32x4_t)v151;
                int32x4_t v286 = (int32x4_t)v151;
                int32x4_t v288 = (int32x4_t)v151;
                int32x4_t v290 = (int32x4_t)v151;
                uint64_t v150 = v254;
                if (v254) {
                  goto LABEL_171;
                }
              }
LABEL_205:
              uint64_t v191 = 0;
              int8x8_t v192 = v248;
              __int32 v193 = v249;
              int v194 = v256;
              int v195 = v257;
              a7 = v233;
              int16x8_t v76 = v242;
              uint64_t v26 = v243;
              uint64_t v30 = 4 * a11;
              uint64_t result = 2 * a11;
              do
              {
                uint64_t v204 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,1u>::kSubblockPositions[v191 + 1];
                uint64_t v205 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,1u>::kSubblockPositions[v191];
                unsigned int v206 = (v194 - 8 * v205) & ~((v194 - 8 * (int)v205) >> 31);
                if (v206 >= 8) {
                  unsigned int v206 = 8;
                }
                unsigned int v207 = (v195 - 4 * v204) & ~((v195 - 4 * (int)v204) >> 31);
                if (v207 >= 4) {
                  unsigned int v207 = 4;
                }
                if (v206) {
                  BOOL v208 = v207 == 0;
                }
                else {
                  BOOL v208 = 1;
                }
                if (v208)
                {
                  char v203 = 0;
                }
                else
                {
                  __int32 v196 = &v259 + 8 * v204 + v205;
                  float32x2x2_t v197 = (float32x2x2_t)*v196;
                  int32x4_t v198 = v196[2];
                  int32x4_t v199 = vzip2q_s32(*v196, v198);
                  float32x2x2_t v200 = (float32x2x2_t)v196[4];
                  int32x4_t v201 = v196[6];
                  uint64_t v202 = (float *)v192;
                  vst2_f32(v202, v197);
                  v202 += 4;
                  vst2_f32(v202, v200);
                  v192[2] = v199;
                  v192[3] = vzip2q_s32((int32x4_t)v200, v201);
                  v192 += 4;
                  char v203 = 63;
                }
                *v193++ = v203;
                v191 += 2;
              }
              while (v191 != 16);
LABEL_95:
              uint64_t v71 = __dst;
              if (v246) {
                goto LABEL_27;
              }
              goto LABEL_28;
            }
            int16x8_t v76 = (int32x4_t *)v258;
          }
          else
          {
            int16x8_t v76 = v71;
            if (v72) {
              goto LABEL_93;
            }
          }
          uint64_t v77 = 0;
          int32x4_t v78 = (float *)v76;
          do
          {
            uint64_t v88 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,1u>::kSubblockPositions[v77 + 1];
            uint64_t v89 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,1u>::kSubblockPositions[v77];
            unsigned int v90 = (v39 - 8 * v89) & ~((int)(v39 - 8 * v89) >> 31);
            if (v90 >= 8) {
              unsigned int v90 = 8;
            }
            unsigned int v91 = (v34 - 4 * v88) & ~((int)(v34 - 4 * v88) >> 31);
            if (v91 >= 4) {
              unsigned int v91 = 4;
            }
            if (v90) {
              BOOL v92 = v91 == 0;
            }
            else {
              BOOL v92 = 1;
            }
            if (v92)
            {
              char v87 = 0;
            }
            else
            {
              int32x4_t v79 = (float32x2x2_t *)(v70 + v30 * v88 + 16 * v89);
              float32x2x2_t v80 = *v79;
              int32x4_t v81 = *(int32x4_t *)((char *)v79 + v29);
              unsigned int v82 = (int32x4_t *)((char *)v79 + result);
              float32x2x2_t v83 = (float32x2x2_t)*v82;
              int32x4_t v84 = *(int32x4_t *)((char *)v82 + v29);
              int32x4_t v85 = vzip2q_s32(*v82, v84);
              int32x4_t v86 = v78;
              vst2_f32(v86, v80);
              v86 += 4;
              vst2_f32(v86, v83);
              *((int32x4_t *)v78 + 2) = vzip2q_s32((int32x4_t)v80, v81);
              *((int32x4_t *)v78 + 3) = v85;
              v78 += 16;
              char v87 = 63;
            }
            *v69++ = v87;
            v77 += 2;
          }
          while (v77 != 16);
          a7 = v233;
          if (v246)
          {
LABEL_27:
            memcpy(v71, v76, 0x200uLL);
            uint64_t result = 2 * a11;
            uint64_t v30 = 4 * a11;
            uint64_t v26 = v243;
          }
LABEL_28:
          BOOL v21 = v33++ == v234 >> 4;
        }
        while (!v21);
        BOOL v21 = v17++ == v225;
      }
      while (!v21);
    }
  }
  return result;
}

uint64_t AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, char a12)
{
  uint64_t v257 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v206 = a8;
  unsigned int v190 = a8 + a10 - 1;
  uint64_t v207 = a1;
  if (*(void *)(a1 + 168)) {
    int v17 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v17 = 0;
  }
  unsigned int v18 = a5 - 1;
  unsigned int v19 = a6 - 1;
  unsigned int v20 = a8 >> 4;
  unsigned int v189 = v190 >> 4;
  BOOL v21 = (v17 & 0xD00) == 0 || v17 == 768;
  int v22 = v17 & 0xE00;
  int v24 = !v21 && v22 != 1024;
  int v211 = v24;
  uint64_t result = a1;
  if (*(unsigned char *)(a1 + 232))
  {
    unsigned int v26 = *(unsigned __int8 *)(a1 + 255);
    unsigned int v27 = *(unsigned __int8 *)(a1 + 254);
    char v28 = __clz(v18);
    if (1 << v26 >= a6 || a5 >> v27)
    {
      if (!(a6 >> v26) && 1 << v27 < a5)
      {
        if (a6 < 2) {
          unsigned int v31 = 0;
        }
        else {
          unsigned int v31 = __clz(~(-1 << -(char)__clz(v19))) - 32;
        }
        v27 += v26 + v31;
        unsigned int v26 = -v31;
      }
    }
    else
    {
      unsigned int v29 = 32 - __clz(~(-1 << -v28));
      unsigned int v30 = v27 + v26;
      if (a5 < 2) {
        unsigned int v29 = 0;
      }
      unsigned int v26 = v30 - v29;
      unsigned int v27 = v29;
    }
    if (a5 < 2)
    {
      if (v27) {
        goto LABEL_27;
      }
    }
    else if (32 - __clz(~(-1 << -v28)) < v27)
    {
LABEL_27:
      BOOL v201 = 0;
LABEL_32:
      unsigned int v198 = v27 - 4;
      unsigned int v194 = v26 - 4;
      int v33 = -1 << *(unsigned char *)(*(void *)(a1 + 208) + 48);
      unsigned int v187 = (((~v33 + a5) & v33) + ~(-1 << v27)) >> v27;
      goto LABEL_33;
    }
    if (a6 < 2) {
      unsigned int v32 = 0;
    }
    else {
      unsigned int v32 = 32 - __clz(~(-1 << -(char)__clz(v19)));
    }
    BOOL v201 = v32 >= v26;
    goto LABEL_32;
  }
  BOOL v201 = 0;
  unsigned int v187 = 0;
  unsigned int v194 = 0;
  unsigned int v198 = 0;
LABEL_33:
  if (v20 <= v189)
  {
    unsigned int v200 = a7 + a9 - 1;
    unsigned int v186 = a7 >> 4;
    if (a7 >> 4 <= v200 >> 4)
    {
      unsigned int v209 = v18 >> 4;
      unsigned int v185 = v19 >> 4;
      int v208 = (v18 & 0xF) + 1;
      int v184 = (v19 & 0xF) + 1;
      uint32x2_t v34 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0xF0000000FLL);
      int8x8_t v35 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v34, 4uLL))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x2000000020, v34));
      __int32 v196 = v35.i32[0] | v35.i32[1];
      BOOL v192 = v35.i32[1] != 0;
      int8x8_t v193 = v35;
      BOOL v191 = v35.i32[0] != 0;
      unsigned int v199 = a7;
      do
      {
        unsigned int v36 = (16 * v20) | 0xF;
        if (16 * v20 <= v206) {
          int v37 = v206;
        }
        else {
          int v37 = 16 * v20;
        }
        if (v190 < v36) {
          unsigned int v36 = v190;
        }
        int v197 = v37 - 16 * v20;
        int v205 = v36 - v37 + 1;
        unsigned int v38 = v186;
        int v39 = v184;
        if (v20 != v185) {
          int v39 = 16;
        }
        unsigned int v212 = v39;
        uint64_t v40 = v20 & ~(-1 << v194);
        uint64_t v204 = a3 + (v37 - v206) * a11;
        do
        {
          unsigned int v41 = 16 * v38;
          unsigned int v42 = 16 * (v38 + 1) - 1;
          if (16 * v38 <= a7) {
            int v43 = a7;
          }
          else {
            int v43 = 16 * v38;
          }
          if (v200 < v42) {
            unsigned int v42 = v200;
          }
          int v44 = v42 - v43 + 1;
          if (v38 == v209) {
            unsigned int v45 = v208;
          }
          else {
            unsigned int v45 = 16;
          }
          BOOL v46 = 1;
          if (16 * v20 >= v206 && v41 >= a7)
          {
            int v47 = v208;
            if (v38 != v209) {
              int v47 = 16;
            }
            BOOL v46 = v44 != v47 || v205 != v212;
          }
          if (v201)
          {
            if (v198 | v194)
            {
              int v49 = 0;
              uint64_t v50 = 0;
              int v51 = 1;
              BOOL v52 = v198 != 0;
              BOOL v53 = v194 != 0;
              unsigned int v54 = v198;
              unsigned int v55 = v194;
              do
              {
                --v54;
                if (v52) {
                  v50 |= (unint64_t)(v38 & ~(-1 << v198) & v51) << v49++;
                }
                else {
                  unsigned int v54 = 0;
                }
                --v55;
                if (v53) {
                  v50 |= (unint64_t)(v40 & v51) << v49++;
                }
                else {
                  unsigned int v55 = 0;
                }
                v51 *= 2;
                --v49;
                BOOL v53 = v55 != 0;
                BOOL v52 = v54 != 0;
              }
              while (v55 | v54);
            }
            else
            {
              uint64_t v50 = 0;
            }
            uint64_t v63 = *(void *)(result + 320) * ((v38 >> v198) + (v20 >> v194) * v187) + (v50 << 9);
          }
          else
          {
            if (v196)
            {
              int v56 = 0;
              uint64_t v57 = 0;
              int v58 = 1;
              BOOL v59 = v192;
              BOOL v60 = v191;
              __int32 v61 = v193.i32[1];
              __int32 v62 = v193.i32[0];
              do
              {
                --v61;
                if (v59) {
                  v57 |= (unint64_t)(v58 & v38) << v56++;
                }
                else {
                  __int32 v61 = 0;
                }
                --v62;
                if (v60) {
                  v57 |= (unint64_t)(v58 & v20) << v56++;
                }
                else {
                  __int32 v62 = 0;
                }
                v58 *= 2;
                --v56;
                BOOL v60 = v62 != 0;
                BOOL v59 = v61 != 0;
              }
              while (v62 | v61);
            }
            else
            {
              uint64_t v57 = 0;
            }
            uint64_t v63 = v57 << 9;
          }
          unsigned int v64 = *(_DWORD *)(result + 128) >> (*(unsigned char *)(result + 144) + a12);
          if (v64 <= 1) {
            unsigned int v64 = 1;
          }
          unsigned int v65 = v64 + 15;
          if (v65 < 0x20) {
            unsigned int v66 = 0;
          }
          else {
            unsigned int v66 = 32 - __clz(~(-1 << -(char)__clz((v65 >> 4) - 1)));
          }
          unsigned int v67 = *(_DWORD *)(result + 132) >> (*(unsigned char *)(result + 144) + a12);
          if (v67 <= 1) {
            unsigned int v67 = 1;
          }
          unsigned int v68 = v67 + 15;
          if (v68 < 0x20)
          {
            unsigned int v69 = 0;
            if (!v66)
            {
LABEL_109:
              uint64_t v71 = 0;
              goto LABEL_110;
            }
          }
          else
          {
            unsigned int v69 = 32 - __clz(~(-1 << -(char)__clz((v68 >> 4) - 1)));
            if (!(v69 | v66)) {
              goto LABEL_109;
            }
          }
          int v70 = 0;
          uint64_t v71 = 0;
          BOOL v72 = v66 != 0;
          BOOL v73 = v69 != 0;
          int v74 = 1;
          do
          {
            --v66;
            if (v72) {
              v71 |= (unint64_t)(v74 & v38) << v70++;
            }
            else {
              unsigned int v66 = 0;
            }
            --v69;
            if (v73) {
              v71 |= (unint64_t)(v74 & v20) << v70++;
            }
            else {
              unsigned int v69 = 0;
            }
            v74 *= 2;
            --v70;
            BOOL v73 = v69 != 0;
            BOOL v72 = v66 != 0;
          }
          while (v69 | v66);
LABEL_110:
          unsigned int v75 = v43 - a7;
          int v76 = v45 < 0x10 || v46;
          uint64_t v77 = (char *)(a4 + 8 * v71);
          unint64_t v78 = v204 + 2 * v75;
          int32x4_t v79 = (int32x4_t *)(a2 + v63);
          if (v212 < 0x10) {
            int v80 = 1;
          }
          else {
            int v80 = v76;
          }
          unsigned int v210 = v79;
          if (v211)
          {
            int32x4_t v81 = (int32x4_t *)__dst;
            if (!v80) {
              goto LABEL_122;
            }
            int v195 = (char *)(a4 + 8 * v71);
            int v82 = v44;
            char v83 = v45;
            uint64_t v84 = v40;
            BOOL v85 = v46;
            memcpy(__dst, v79, sizeof(__dst));
            BOOL v46 = v85;
            uint64_t v40 = v84;
            LOBYTE(v45) = v83;
            int v44 = v82;
            uint64_t v77 = v195;
            uint64_t result = v207;
          }
          else
          {
            int32x4_t v81 = v79;
            if (!v80)
            {
LABEL_122:
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock(v78, a11, (unint64_t)v81, v77, v45, v212);
              a7 = v199;
              goto LABEL_217;
            }
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE9ELj1ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = result;
          int v214 = v81;
          unsigned __int8 v222 = v45;
          unsigned __int8 v223 = v212;
          unsigned int v218 = v197;
          unsigned int v219 = v43 - v41;
          BOOL v215 = v77;
          unint64_t v216 = v78;
          uint64_t v217 = a11;
          unsigned int v220 = v205;
          unsigned int v221 = v44;
          if (v46)
          {
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(result + 8) + 7384), block);
            a7 = v199;
            goto LABEL_217;
          }
          unsigned int v86 = *v77;
          if (v86 == 63)
          {
            int32x4_t v89 = v81[1];
            int32x4_t v90 = v81[2];
            int32x4_t v91 = v81[3];
            int32x4_t v92 = vuzp2q_s32(*v81, v90);
            int32x4_t v225 = vuzp1q_s32(*v81, v90);
            int32x4_t v227 = v92;
            int32x4_t v229 = vuzp1q_s32(v89, v91);
            int32x4_t v231 = vuzp2q_s32(v89, v91);
            uint64_t v87 = 64;
          }
          else if (v86 == 1)
          {
            int16x8_t v88 = vld1q_dup_s16(v81->i16);
            int32x4_t v225 = (int32x4_t)v88;
            int32x4_t v227 = (int32x4_t)v88;
            int32x4_t v229 = (int32x4_t)v88;
            int32x4_t v231 = (int32x4_t)v88;
            uint64_t v87 = 2;
          }
          else if (*v77)
          {
            uint64_t v87 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v225, 32, (uint64_t)v81, v86);
          }
          else
          {
            uint64_t v87 = 0;
            int32x4_t v225 = 0uLL;
            int32x4_t v227 = 0uLL;
            int32x4_t v229 = 0uLL;
            int32x4_t v231 = 0uLL;
          }
          uint64_t v93 = (uint64_t)v81->i64 + v87;
          unsigned int v94 = v77[1];
          if (v94 == 63)
          {
            int32x4_t v97 = *(int32x4_t *)(v93 + 16);
            int32x4_t v98 = *(int32x4_t *)(v93 + 32);
            int32x4_t v99 = *(int32x4_t *)(v93 + 48);
            int32x4_t v100 = vuzp2q_s32(*(int32x4_t *)v93, v98);
            int32x4_t v233 = vuzp1q_s32(*(int32x4_t *)v93, v98);
            int32x4_t v235 = v100;
            int32x4_t v237 = vuzp1q_s32(v97, v99);
            int32x4_t v239 = vuzp2q_s32(v97, v99);
            uint64_t v95 = 64;
          }
          else if (v94 == 1)
          {
            int16x8_t v96 = vld1q_dup_s16((const __int16 *)v93);
            int32x4_t v233 = (int32x4_t)v96;
            int32x4_t v235 = (int32x4_t)v96;
            int32x4_t v237 = (int32x4_t)v96;
            int32x4_t v239 = (int32x4_t)v96;
            uint64_t v95 = 2;
          }
          else if (v77[1])
          {
            uint64_t v95 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v233, 32, v93, v94);
          }
          else
          {
            uint64_t v95 = 0;
            int32x4_t v233 = 0uLL;
            int32x4_t v235 = 0uLL;
            int32x4_t v237 = 0uLL;
            int32x4_t v239 = 0uLL;
          }
          uint64_t v101 = v93 + v95;
          unsigned int v102 = v77[2];
          if (v102 == 63)
          {
            int32x4_t v105 = *(int32x4_t *)(v101 + 16);
            int32x4_t v106 = *(int32x4_t *)(v101 + 32);
            int32x4_t v107 = *(int32x4_t *)(v101 + 48);
            int32x4_t v108 = vuzp2q_s32(*(int32x4_t *)v101, v106);
            int32x4_t v226 = vuzp1q_s32(*(int32x4_t *)v101, v106);
            int32x4_t v228 = v108;
            int32x4_t v230 = vuzp1q_s32(v105, v107);
            int32x4_t v232 = vuzp2q_s32(v105, v107);
            uint64_t v103 = 64;
          }
          else if (v102 == 1)
          {
            int16x8_t v104 = vld1q_dup_s16((const __int16 *)v101);
            int32x4_t v226 = (int32x4_t)v104;
            int32x4_t v228 = (int32x4_t)v104;
            int32x4_t v230 = (int32x4_t)v104;
            int32x4_t v232 = (int32x4_t)v104;
            uint64_t v103 = 2;
          }
          else if (v77[2])
          {
            uint64_t v103 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v226, 32, v101, v102);
          }
          else
          {
            uint64_t v103 = 0;
            int32x4_t v226 = 0uLL;
            int32x4_t v228 = 0uLL;
            int32x4_t v230 = 0uLL;
            int32x4_t v232 = 0uLL;
          }
          uint64_t v109 = v101 + v103;
          unsigned int v110 = v77[3];
          if (v110 == 63)
          {
            int32x4_t v113 = *(int32x4_t *)(v109 + 16);
            int32x4_t v114 = *(int32x4_t *)(v109 + 32);
            int32x4_t v115 = *(int32x4_t *)(v109 + 48);
            int32x4_t v116 = vuzp2q_s32(*(int32x4_t *)v109, v114);
            int32x4_t v234 = vuzp1q_s32(*(int32x4_t *)v109, v114);
            int32x4_t v236 = v116;
            int32x4_t v238 = vuzp1q_s32(v113, v115);
            int32x4_t v240 = vuzp2q_s32(v113, v115);
            uint64_t v111 = 64;
          }
          else if (v110 == 1)
          {
            int16x8_t v112 = vld1q_dup_s16((const __int16 *)v109);
            int32x4_t v234 = (int32x4_t)v112;
            int32x4_t v236 = (int32x4_t)v112;
            int32x4_t v238 = (int32x4_t)v112;
            int32x4_t v240 = (int32x4_t)v112;
            uint64_t v111 = 2;
          }
          else if (v77[3])
          {
            uint64_t v111 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v234, 32, v109, v110);
          }
          else
          {
            uint64_t v111 = 0;
            int32x4_t v234 = 0uLL;
            int32x4_t v236 = 0uLL;
            int32x4_t v238 = 0uLL;
            int32x4_t v240 = 0uLL;
          }
          uint64_t v117 = v109 + v111;
          unsigned int v118 = v77[4];
          if (v118 == 63)
          {
            int32x4_t v121 = *(int32x4_t *)(v117 + 16);
            int32x4_t v122 = *(int32x4_t *)(v117 + 32);
            int32x4_t v123 = *(int32x4_t *)(v117 + 48);
            int32x4_t v124 = vuzp2q_s32(*(int32x4_t *)v117, v122);
            int32x4_t v241 = vuzp1q_s32(*(int32x4_t *)v117, v122);
            int32x4_t v243 = v124;
            int32x4_t v245 = vuzp1q_s32(v121, v123);
            int32x4_t v247 = vuzp2q_s32(v121, v123);
            uint64_t v119 = 64;
          }
          else if (v118 == 1)
          {
            int16x8_t v120 = vld1q_dup_s16((const __int16 *)v117);
            int32x4_t v241 = (int32x4_t)v120;
            int32x4_t v243 = (int32x4_t)v120;
            int32x4_t v245 = (int32x4_t)v120;
            int32x4_t v247 = (int32x4_t)v120;
            uint64_t v119 = 2;
          }
          else if (v77[4])
          {
            uint64_t v119 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v241, 32, v117, v118);
          }
          else
          {
            uint64_t v119 = 0;
            int32x4_t v241 = 0uLL;
            int32x4_t v243 = 0uLL;
            int32x4_t v245 = 0uLL;
            int32x4_t v247 = 0uLL;
          }
          uint64_t v125 = v117 + v119;
          unsigned int v126 = v77[5];
          if (v126 == 63)
          {
            int32x4_t v129 = *(int32x4_t *)(v125 + 16);
            int32x4_t v130 = *(int32x4_t *)(v125 + 32);
            int32x4_t v131 = *(int32x4_t *)(v125 + 48);
            int32x4_t v132 = vuzp2q_s32(*(int32x4_t *)v125, v130);
            int32x4_t v249 = vuzp1q_s32(*(int32x4_t *)v125, v130);
            int32x4_t v251 = v132;
            int32x4_t v253 = vuzp1q_s32(v129, v131);
            int32x4_t v255 = vuzp2q_s32(v129, v131);
            uint64_t v127 = 64;
          }
          else if (v126 == 1)
          {
            int16x8_t v128 = vld1q_dup_s16((const __int16 *)v125);
            int32x4_t v249 = (int32x4_t)v128;
            int32x4_t v251 = (int32x4_t)v128;
            int32x4_t v253 = (int32x4_t)v128;
            int32x4_t v255 = (int32x4_t)v128;
            uint64_t v127 = 2;
          }
          else if (v77[5])
          {
            uint64_t v127 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v249, 32, v125, v126);
          }
          else
          {
            uint64_t v127 = 0;
            int32x4_t v249 = 0uLL;
            int32x4_t v251 = 0uLL;
            int32x4_t v253 = 0uLL;
            int32x4_t v255 = 0uLL;
          }
          uint64_t v133 = v125 + v127;
          unsigned int v134 = v77[6];
          if (v134 == 63)
          {
            int32x4_t v137 = *(int32x4_t *)(v133 + 16);
            int32x4_t v138 = *(int32x4_t *)(v133 + 32);
            int32x4_t v139 = *(int32x4_t *)(v133 + 48);
            int32x4_t v140 = vuzp2q_s32(*(int32x4_t *)v133, v138);
            int32x4_t v242 = vuzp1q_s32(*(int32x4_t *)v133, v138);
            int32x4_t v244 = v140;
            int32x4_t v246 = vuzp1q_s32(v137, v139);
            int32x4_t v248 = vuzp2q_s32(v137, v139);
            uint64_t v135 = 64;
          }
          else if (v134 == 1)
          {
            int16x8_t v136 = vld1q_dup_s16((const __int16 *)v133);
            int32x4_t v242 = (int32x4_t)v136;
            int32x4_t v244 = (int32x4_t)v136;
            int32x4_t v246 = (int32x4_t)v136;
            int32x4_t v248 = (int32x4_t)v136;
            uint64_t v135 = 2;
          }
          else if (v77[6])
          {
            uint64_t v135 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v242, 32, v133, v134);
          }
          else
          {
            uint64_t v135 = 0;
            int32x4_t v242 = 0uLL;
            int32x4_t v244 = 0uLL;
            int32x4_t v246 = 0uLL;
            int32x4_t v248 = 0uLL;
          }
          uint64_t v141 = v133 + v135;
          unsigned int v142 = v77[7];
          if (v142 == 63)
          {
            int32x4_t v145 = *(int32x4_t *)(v141 + 16);
            int32x4_t v146 = *(int32x4_t *)(v141 + 32);
            int32x4_t v147 = *(int32x4_t *)(v141 + 48);
            int32x4_t v148 = vuzp2q_s32(*(int32x4_t *)v141, v146);
            int32x4_t v250 = vuzp1q_s32(*(int32x4_t *)v141, v146);
            int32x4_t v252 = v148;
            int32x4_t v254 = vuzp1q_s32(v145, v147);
            int32x4_t v256 = vuzp2q_s32(v145, v147);
            a7 = v199;
            uint64_t v143 = v220;
            if (!v220) {
              goto LABEL_216;
            }
          }
          else
          {
            a7 = v199;
            if (v142 == 1)
            {
              int16x8_t v144 = vld1q_dup_s16((const __int16 *)v141);
              int32x4_t v250 = (int32x4_t)v144;
              int32x4_t v252 = (int32x4_t)v144;
              int32x4_t v254 = (int32x4_t)v144;
              int32x4_t v256 = (int32x4_t)v144;
              uint64_t v143 = v220;
              if (!v220) {
                goto LABEL_216;
              }
            }
            else if (v142)
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v250, 32, v141, v142);
              uint64_t v143 = v220;
              if (!v220) {
                goto LABEL_216;
              }
            }
            else
            {
              int32x4_t v250 = 0uLL;
              int32x4_t v252 = 0uLL;
              int32x4_t v254 = 0uLL;
              int32x4_t v256 = 0uLL;
              uint64_t v143 = v220;
              if (!v220) {
                goto LABEL_216;
              }
            }
          }
          if (v221)
          {
            uint64_t v149 = 0;
            uint64_t v150 = 32 * v218;
            uint64_t v151 = 2 * v219;
            int32x4_t v152 = &v225.i8[v150 + v151];
            unint64_t v153 = v216;
            uint64_t v154 = v217;
            unint64_t v155 = 2 * v221;
            if (v155 <= 1) {
              unint64_t v156 = 1;
            }
            else {
              unint64_t v156 = 2 * v221;
            }
            uint64_t v157 = v150 + v151;
            uint64_t v158 = &v225.i8[v150 + v151];
            if (v156) {
              BOOL v159 = (v156 - 1) >> 32 == 0;
            }
            else {
              BOOL v159 = 0;
            }
            uint64_t v160 = v156 & 0x1FFFFFFE0;
            uint64_t v161 = v156 & 0x1FFFFFFF8;
            char v163 = !v159 || v156 < 8;
            uint64_t v164 = &v226.i8[v157];
            uint64_t v165 = (long long *)(v216 + 16);
            BOOL v166 = v152;
            unint64_t v167 = v216;
            do
            {
              uint64_t v168 = (char *)(v153 + v154 * v149);
              unsigned int v169 = &v152[32 * v149];
              if ((unint64_t)(&v158[32 * v149] - v168) < 0x20) {
                char v170 = 1;
              }
              else {
                char v170 = v163;
              }
              if (v170)
              {
                int v171 = 0;
                goto LABEL_213;
              }
              if (v156 >= 0x20)
              {
                unsigned int v173 = v165;
                uint64_t v174 = v164;
                uint64_t v175 = v156 & 0x1FFFFFFE0;
                do
                {
                  long long v176 = *v173;
                  *((_OWORD *)v174 - 1) = *(v173 - 1);
                  *(_OWORD *)uint64_t v174 = v176;
                  v174 += 32;
                  v173 += 2;
                  v175 -= 32;
                }
                while (v175);
                if (v156 == v160) {
                  goto LABEL_196;
                }
                uint64_t v172 = v156 & 0x1FFFFFFE0;
                if ((v156 & 0x18) == 0)
                {
                  v168 += v160;
                  v169 += v160;
                  int v171 = v156 & 0xFFFFFFE0;
                  goto LABEL_213;
                }
              }
              else
              {
                uint64_t v172 = 0;
              }
              v169 += v161;
              uint64_t v177 = v172 - v161;
              int v178 = (uint64_t *)(v167 + v172);
              uint64_t v179 = &v166[v172];
              do
              {
                uint64_t v180 = *v178++;
                *(void *)uint64_t v179 = v180;
                v179 += 8;
                v177 += 8;
              }
              while (v177);
              if (v156 == v161) {
                goto LABEL_196;
              }
              v168 += v161;
              int v171 = v156 & 0xFFFFFFF8;
LABEL_213:
              unsigned int v181 = v171 + 1;
              do
              {
                char v182 = *v168++;
                *v169++ = v182;
              }
              while (v155 > v181++);
LABEL_196:
              ++v149;
              v164 += 32;
              uint64_t v165 = (long long *)((char *)v165 + v154);
              v167 += v154;
              v166 += 32;
            }
            while (v149 != v143);
          }
LABEL_216:
          AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)&v225, 32, (unint64_t)v214, v215, v222, v223);
LABEL_217:
          if (v211) {
            memcpy(v210, v81, 0x200uLL);
          }
          BOOL v21 = v38++ == v200 >> 4;
          uint64_t result = v207;
        }
        while (!v21);
        BOOL v21 = v20++ == v189;
      }
      while (!v21);
    }
  }
  return result;
}

uint64_t AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, char a12)
{
  uint64_t v289 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v240 = a8;
  unsigned int v222 = a8 + a10 - 1;
  uint64_t v241 = a1;
  if (*(void *)(a1 + 168)) {
    int v17 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v17 = 0;
  }
  unsigned int v18 = a5 - 1;
  unsigned int v19 = a6 - 1;
  unsigned int v20 = a8 >> 4;
  unsigned int v221 = v222 >> 4;
  BOOL v21 = (v17 & 0xD00) == 0 || v17 == 768;
  int v22 = v17 & 0xE00;
  int v24 = !v21 && v22 != 1024;
  int v244 = v24;
  uint64_t result = a1;
  if (*(unsigned char *)(a1 + 232))
  {
    unsigned int v26 = *(unsigned __int8 *)(a1 + 255);
    unsigned int v27 = *(unsigned __int8 *)(a1 + 254);
    char v28 = __clz(v18);
    if (1 << v26 >= a6 || a5 >> v27)
    {
      if (!(a6 >> v26) && 1 << v27 < a5)
      {
        if (a6 < 2) {
          unsigned int v31 = 0;
        }
        else {
          unsigned int v31 = __clz(~(-1 << -(char)__clz(v19))) - 32;
        }
        v27 += v26 + v31;
        unsigned int v26 = -v31;
      }
    }
    else
    {
      unsigned int v29 = 32 - __clz(~(-1 << -v28));
      unsigned int v30 = v27 + v26;
      if (a5 < 2) {
        unsigned int v29 = 0;
      }
      unsigned int v26 = v30 - v29;
      unsigned int v27 = v29;
    }
    if (a5 < 2)
    {
      if (v27) {
        goto LABEL_27;
      }
    }
    else if (32 - __clz(~(-1 << -v28)) < v27)
    {
LABEL_27:
      BOOL v235 = 0;
LABEL_32:
      unsigned int v231 = v27 - 4;
      unsigned int v227 = v26 - 4;
      int v33 = -1 << *(unsigned char *)(*(void *)(a1 + 208) + 48);
      unsigned int v219 = (((~v33 + a5) & v33) + ~(-1 << v27)) >> v27;
      goto LABEL_33;
    }
    if (a6 < 2) {
      unsigned int v32 = 0;
    }
    else {
      unsigned int v32 = 32 - __clz(~(-1 << -(char)__clz(v19)));
    }
    BOOL v235 = v32 >= v26;
    goto LABEL_32;
  }
  BOOL v235 = 0;
  unsigned int v219 = 0;
  unsigned int v227 = 0;
  unsigned int v231 = 0;
LABEL_33:
  if (v20 <= v221)
  {
    unsigned int v234 = a7 + a9 - 1;
    unsigned int v218 = a7 >> 4;
    if (a7 >> 4 <= v234 >> 4)
    {
      unsigned int v243 = v18 >> 4;
      unsigned int v217 = v19 >> 4;
      int v242 = (v18 & 0xF) + 1;
      int v216 = (v19 & 0xF) + 1;
      int v215 = ~(-1 << v227);
      uint32x2_t v34 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0xF0000000FLL);
      int8x8_t v35 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v34, 4uLL))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x2000000020, v34));
      __int32 v229 = v35.i32[0] | v35.i32[1];
      BOOL v225 = v35.i32[1] != 0;
      int8x8_t v226 = v35;
      BOOL v224 = v35.i32[0] != 0;
      unsigned int v233 = a7;
      do
      {
        unsigned int v36 = (16 * v20) | 0xF;
        if (16 * v20 <= v240) {
          int v37 = v240;
        }
        else {
          int v37 = 16 * v20;
        }
        if (v222 < v36) {
          unsigned int v36 = v222;
        }
        int v230 = v37 - 16 * v20;
        int v239 = v36 - v37 + 1;
        unsigned int v38 = v218;
        if (v20 == v217) {
          unsigned int v39 = v216;
        }
        else {
          unsigned int v39 = 16;
        }
        int v40 = v20 & v215;
        uint64_t v238 = a3 + (v37 - v240) * a11;
        unsigned int v223 = v39;
        do
        {
          unsigned int v41 = 16 * v38;
          unsigned int v42 = 16 * (v38 + 1) - 1;
          if (16 * v38 <= a7) {
            int v43 = a7;
          }
          else {
            int v43 = 16 * v38;
          }
          if (v234 < v42) {
            unsigned int v42 = v234;
          }
          int v44 = v42 - v43 + 1;
          if (v38 == v243) {
            unsigned int v45 = v242;
          }
          else {
            unsigned int v45 = 16;
          }
          BOOL v46 = 1;
          if (16 * v20 >= v240 && v41 >= a7)
          {
            int v47 = v242;
            if (v38 != v243) {
              int v47 = 16;
            }
            BOOL v46 = v44 != v47 || v239 != v39;
          }
          if (v235)
          {
            if (v231 | v227)
            {
              int v49 = 0;
              uint64_t v50 = 0;
              int v51 = 1;
              BOOL v52 = v231 != 0;
              BOOL v53 = v227 != 0;
              unsigned int v54 = v231;
              unsigned int v55 = v227;
              do
              {
                --v54;
                if (v52) {
                  v50 |= (unint64_t)(v38 & ~(-1 << v231) & v51) << v49++;
                }
                else {
                  unsigned int v54 = 0;
                }
                --v55;
                if (v53) {
                  v50 |= (unint64_t)(v40 & v51) << v49++;
                }
                else {
                  unsigned int v55 = 0;
                }
                v51 *= 2;
                --v49;
                BOOL v53 = v55 != 0;
                BOOL v52 = v54 != 0;
              }
              while (v55 | v54);
            }
            else
            {
              uint64_t v50 = 0;
            }
            uint64_t v63 = *(void *)(result + 320) * ((v38 >> v231) + (v20 >> v227) * v219) + (v50 << 9);
          }
          else
          {
            if (v229)
            {
              int v56 = 0;
              uint64_t v57 = 0;
              int v58 = 1;
              BOOL v59 = v225;
              BOOL v60 = v224;
              __int32 v61 = v226.i32[1];
              __int32 v62 = v226.i32[0];
              do
              {
                --v61;
                if (v59) {
                  v57 |= (unint64_t)(v58 & v38) << v56++;
                }
                else {
                  __int32 v61 = 0;
                }
                --v62;
                if (v60) {
                  v57 |= (unint64_t)(v58 & v20) << v56++;
                }
                else {
                  __int32 v62 = 0;
                }
                v58 *= 2;
                --v56;
                BOOL v60 = v62 != 0;
                BOOL v59 = v61 != 0;
              }
              while (v62 | v61);
            }
            else
            {
              uint64_t v57 = 0;
            }
            uint64_t v63 = v57 << 9;
          }
          unsigned int v64 = *(_DWORD *)(result + 128) >> (*(unsigned char *)(result + 144) + a12);
          if (v64 <= 1) {
            unsigned int v64 = 1;
          }
          unsigned int v65 = v64 + 15;
          if (v65 < 0x20) {
            unsigned int v66 = 0;
          }
          else {
            unsigned int v66 = 32 - __clz(~(-1 << -(char)__clz((v65 >> 4) - 1)));
          }
          unsigned int v67 = *(_DWORD *)(result + 132) >> (*(unsigned char *)(result + 144) + a12);
          if (v67 <= 1) {
            unsigned int v67 = 1;
          }
          unsigned int v68 = v67 + 15;
          if (v68 < 0x20)
          {
            unsigned int v69 = 0;
            if (!v66)
            {
LABEL_111:
              uint64_t v71 = 0;
              goto LABEL_112;
            }
          }
          else
          {
            unsigned int v69 = 32 - __clz(~(-1 << -(char)__clz((v68 >> 4) - 1)));
            if (!(v69 | v66)) {
              goto LABEL_111;
            }
          }
          int v70 = 0;
          uint64_t v71 = 0;
          BOOL v72 = v66 != 0;
          BOOL v73 = v69 != 0;
          int v74 = 1;
          do
          {
            --v66;
            if (v72) {
              v71 |= (unint64_t)(v74 & v38) << v70++;
            }
            else {
              unsigned int v66 = 0;
            }
            --v69;
            if (v73) {
              v71 |= (unint64_t)(v74 & v20) << v70++;
            }
            else {
              unsigned int v69 = 0;
            }
            v74 *= 2;
            --v70;
            BOOL v73 = v69 != 0;
            BOOL v72 = v66 != 0;
          }
          while (v69 | v66);
LABEL_112:
          unsigned int v75 = v43 - a7;
          int v76 = v45 < 0x10 || v46;
          uint64_t v77 = (char *)(a4 + 8 * v71);
          uint64_t v78 = v238 + 2 * v75;
          int32x4_t v79 = (int32x4_t *)(a2 + v63);
          if (v39 < 0x10) {
            int v80 = 1;
          }
          else {
            int v80 = v76;
          }
          if (v244)
          {
            if (v80)
            {
              int v228 = v44;
              int32x4_t v81 = v79;
              memcpy(v256, v79, sizeof(v256));
              unsigned int v41 = 16 * v38;
              unsigned int v39 = v223;
              int v44 = v228;
              int v82 = (int32x4_t *)v256;
              int32x4_t v79 = v81;
              uint64_t result = v241;
LABEL_122:
              __dst = v79;
              block[0] = MEMORY[0x263EF8330];
              block[1] = 3221225472;
              block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE9ELj1ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
              block[3] = &__block_descriptor_90_e5_v8__0l;
              block[4] = result;
              int32x4_t v246 = v82;
              unsigned __int8 v254 = v45;
              unsigned __int8 v255 = v39;
              unsigned int v250 = v230;
              unsigned int v251 = v43 - v41;
              int32x4_t v247 = v77;
              uint64_t v248 = v78;
              uint64_t v249 = a11;
              unsigned int v252 = v239;
              unsigned int v253 = v44;
              if (v46)
              {
                dispatch_sync(*(dispatch_queue_t *)(*(void *)(result + 8) + 7384), block);
                uint64_t result = v241;
                a7 = v233;
                int v40 = v20 & v215;
                goto LABEL_124;
              }
              unsigned int v99 = *v77;
              if (v99 == 63)
              {
                int32x4_t v102 = v82[1];
                int32x4_t v103 = v82[2];
                int32x4_t v104 = v82[3];
                int32x4_t v105 = vuzp2q_s32(*v82, v103);
                int32x4_t v257 = vuzp1q_s32(*v82, v103);
                int32x4_t v259 = v105;
                int32x4_t v261 = vuzp1q_s32(v102, v104);
                int32x4_t v263 = vuzp2q_s32(v102, v104);
                uint64_t v100 = 64;
              }
              else if (v99 == 1)
              {
                int16x8_t v101 = vld1q_dup_s16(v82->i16);
                int32x4_t v257 = (int32x4_t)v101;
                int32x4_t v259 = (int32x4_t)v101;
                int32x4_t v261 = (int32x4_t)v101;
                int32x4_t v263 = (int32x4_t)v101;
                uint64_t v100 = 2;
              }
              else if (*v77)
              {
                uint64_t v100 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v257, 32, (uint64_t)v82, v99);
              }
              else
              {
                uint64_t v100 = 0;
                int32x4_t v257 = 0uLL;
                int32x4_t v259 = 0uLL;
                int32x4_t v261 = 0uLL;
                int32x4_t v263 = 0uLL;
              }
              uint64_t v106 = (uint64_t)v82->i64 + v100;
              unsigned int v107 = v77[1];
              if (v107 == 63)
              {
                int32x4_t v110 = *(int32x4_t *)(v106 + 16);
                int32x4_t v111 = *(int32x4_t *)(v106 + 32);
                int32x4_t v112 = *(int32x4_t *)(v106 + 48);
                int32x4_t v113 = vuzp2q_s32(*(int32x4_t *)v106, v111);
                int32x4_t v265 = vuzp1q_s32(*(int32x4_t *)v106, v111);
                int32x4_t v267 = v113;
                int32x4_t v269 = vuzp1q_s32(v110, v112);
                int32x4_t v271 = vuzp2q_s32(v110, v112);
                uint64_t v108 = 64;
              }
              else if (v107 == 1)
              {
                int16x8_t v109 = vld1q_dup_s16((const __int16 *)v106);
                int32x4_t v265 = (int32x4_t)v109;
                int32x4_t v267 = (int32x4_t)v109;
                int32x4_t v269 = (int32x4_t)v109;
                int32x4_t v271 = (int32x4_t)v109;
                uint64_t v108 = 2;
              }
              else if (v77[1])
              {
                uint64_t v108 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v265, 32, v106, v107);
              }
              else
              {
                uint64_t v108 = 0;
                int32x4_t v265 = 0uLL;
                int32x4_t v267 = 0uLL;
                int32x4_t v269 = 0uLL;
                int32x4_t v271 = 0uLL;
              }
              uint64_t v114 = v106 + v108;
              unsigned int v115 = v77[2];
              if (v115 == 63)
              {
                int32x4_t v118 = *(int32x4_t *)(v114 + 16);
                int32x4_t v119 = *(int32x4_t *)(v114 + 32);
                int32x4_t v120 = *(int32x4_t *)(v114 + 48);
                int32x4_t v121 = vuzp2q_s32(*(int32x4_t *)v114, v119);
                int32x4_t v258 = vuzp1q_s32(*(int32x4_t *)v114, v119);
                int32x4_t v260 = v121;
                int32x4_t v262 = vuzp1q_s32(v118, v120);
                int32x4_t v264 = vuzp2q_s32(v118, v120);
                uint64_t v116 = 64;
              }
              else if (v115 == 1)
              {
                int16x8_t v117 = vld1q_dup_s16((const __int16 *)v114);
                int32x4_t v258 = (int32x4_t)v117;
                int32x4_t v260 = (int32x4_t)v117;
                int32x4_t v262 = (int32x4_t)v117;
                int32x4_t v264 = (int32x4_t)v117;
                uint64_t v116 = 2;
              }
              else if (v77[2])
              {
                uint64_t v116 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v258, 32, v114, v115);
              }
              else
              {
                uint64_t v116 = 0;
                int32x4_t v258 = 0uLL;
                int32x4_t v260 = 0uLL;
                int32x4_t v262 = 0uLL;
                int32x4_t v264 = 0uLL;
              }
              uint64_t v122 = v114 + v116;
              unsigned int v123 = v77[3];
              if (v123 == 63)
              {
                int32x4_t v126 = *(int32x4_t *)(v122 + 16);
                int32x4_t v127 = *(int32x4_t *)(v122 + 32);
                int32x4_t v128 = *(int32x4_t *)(v122 + 48);
                int32x4_t v129 = vuzp2q_s32(*(int32x4_t *)v122, v127);
                int32x4_t v266 = vuzp1q_s32(*(int32x4_t *)v122, v127);
                int32x4_t v268 = v129;
                int32x4_t v270 = vuzp1q_s32(v126, v128);
                int32x4_t v272 = vuzp2q_s32(v126, v128);
                uint64_t v124 = 64;
              }
              else if (v123 == 1)
              {
                int16x8_t v125 = vld1q_dup_s16((const __int16 *)v122);
                int32x4_t v266 = (int32x4_t)v125;
                int32x4_t v268 = (int32x4_t)v125;
                int32x4_t v270 = (int32x4_t)v125;
                int32x4_t v272 = (int32x4_t)v125;
                uint64_t v124 = 2;
              }
              else if (v77[3])
              {
                uint64_t v124 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v266, 32, v122, v123);
              }
              else
              {
                uint64_t v124 = 0;
                int32x4_t v266 = 0uLL;
                int32x4_t v268 = 0uLL;
                int32x4_t v270 = 0uLL;
                int32x4_t v272 = 0uLL;
              }
              uint64_t v130 = v122 + v124;
              unsigned int v131 = v77[4];
              if (v131 == 63)
              {
                int32x4_t v134 = *(int32x4_t *)(v130 + 16);
                int32x4_t v135 = *(int32x4_t *)(v130 + 32);
                int32x4_t v136 = *(int32x4_t *)(v130 + 48);
                int32x4_t v137 = vuzp2q_s32(*(int32x4_t *)v130, v135);
                int32x4_t v273 = vuzp1q_s32(*(int32x4_t *)v130, v135);
                int32x4_t v275 = v137;
                int32x4_t v277 = vuzp1q_s32(v134, v136);
                int32x4_t v279 = vuzp2q_s32(v134, v136);
                uint64_t v132 = 64;
              }
              else if (v131 == 1)
              {
                int16x8_t v133 = vld1q_dup_s16((const __int16 *)v130);
                int32x4_t v273 = (int32x4_t)v133;
                int32x4_t v275 = (int32x4_t)v133;
                int32x4_t v277 = (int32x4_t)v133;
                int32x4_t v279 = (int32x4_t)v133;
                uint64_t v132 = 2;
              }
              else if (v77[4])
              {
                uint64_t v132 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v273, 32, v130, v131);
              }
              else
              {
                uint64_t v132 = 0;
                int32x4_t v273 = 0uLL;
                int32x4_t v275 = 0uLL;
                int32x4_t v277 = 0uLL;
                int32x4_t v279 = 0uLL;
              }
              uint64_t v138 = v130 + v132;
              unsigned int v139 = v77[5];
              if (v139 == 63)
              {
                int32x4_t v142 = *(int32x4_t *)(v138 + 16);
                int32x4_t v143 = *(int32x4_t *)(v138 + 32);
                int32x4_t v144 = *(int32x4_t *)(v138 + 48);
                int32x4_t v145 = vuzp2q_s32(*(int32x4_t *)v138, v143);
                int32x4_t v281 = vuzp1q_s32(*(int32x4_t *)v138, v143);
                int32x4_t v283 = v145;
                int32x4_t v285 = vuzp1q_s32(v142, v144);
                int32x4_t v287 = vuzp2q_s32(v142, v144);
                uint64_t v140 = 64;
              }
              else if (v139 == 1)
              {
                int16x8_t v141 = vld1q_dup_s16((const __int16 *)v138);
                int32x4_t v281 = (int32x4_t)v141;
                int32x4_t v283 = (int32x4_t)v141;
                int32x4_t v285 = (int32x4_t)v141;
                int32x4_t v287 = (int32x4_t)v141;
                uint64_t v140 = 2;
              }
              else if (v77[5])
              {
                uint64_t v140 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v281, 32, v138, v139);
              }
              else
              {
                uint64_t v140 = 0;
                int32x4_t v281 = 0uLL;
                int32x4_t v283 = 0uLL;
                int32x4_t v285 = 0uLL;
                int32x4_t v287 = 0uLL;
              }
              uint64_t v146 = v138 + v140;
              unsigned int v147 = v77[6];
              if (v147 == 63)
              {
                int32x4_t v150 = *(int32x4_t *)(v146 + 16);
                int32x4_t v151 = *(int32x4_t *)(v146 + 32);
                int32x4_t v152 = *(int32x4_t *)(v146 + 48);
                int32x4_t v153 = vuzp2q_s32(*(int32x4_t *)v146, v151);
                int32x4_t v274 = vuzp1q_s32(*(int32x4_t *)v146, v151);
                int32x4_t v276 = v153;
                int32x4_t v278 = vuzp1q_s32(v150, v152);
                int32x4_t v280 = vuzp2q_s32(v150, v152);
                uint64_t v148 = 64;
              }
              else if (v147 == 1)
              {
                int16x8_t v149 = vld1q_dup_s16((const __int16 *)v146);
                int32x4_t v274 = (int32x4_t)v149;
                int32x4_t v276 = (int32x4_t)v149;
                int32x4_t v278 = (int32x4_t)v149;
                int32x4_t v280 = (int32x4_t)v149;
                uint64_t v148 = 2;
              }
              else if (v77[6])
              {
                uint64_t v148 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v274, 32, v146, v147);
              }
              else
              {
                uint64_t v148 = 0;
                int32x4_t v274 = 0uLL;
                int32x4_t v276 = 0uLL;
                int32x4_t v278 = 0uLL;
                int32x4_t v280 = 0uLL;
              }
              uint64_t v154 = v146 + v148;
              unsigned int v155 = v77[7];
              if (v155 == 63)
              {
                int32x4_t v158 = *(int32x4_t *)(v154 + 16);
                int32x4_t v159 = *(int32x4_t *)(v154 + 32);
                int32x4_t v160 = *(int32x4_t *)(v154 + 48);
                int32x4_t v161 = vuzp2q_s32(*(int32x4_t *)v154, v159);
                int32x4_t v282 = vuzp1q_s32(*(int32x4_t *)v154, v159);
                int32x4_t v284 = v161;
                int32x4_t v286 = vuzp1q_s32(v158, v160);
                int32x4_t v288 = vuzp2q_s32(v158, v160);
                uint64_t v156 = v252;
                if (v252) {
                  goto LABEL_200;
                }
              }
              else
              {
                if (v155 != 1)
                {
                  if (v77[7])
                  {
                    AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v282, 32, v154, v155);
                    uint64_t v156 = v252;
                    if (!v252) {
                      goto LABEL_234;
                    }
                  }
                  else
                  {
                    int32x4_t v282 = 0uLL;
                    int32x4_t v284 = 0uLL;
                    int32x4_t v286 = 0uLL;
                    int32x4_t v288 = 0uLL;
                    uint64_t v156 = v252;
                    if (!v252) {
                      goto LABEL_234;
                    }
                  }
LABEL_200:
                  if (!v253) {
                    goto LABEL_234;
                  }
                  uint64_t v162 = 0;
                  uint64_t v163 = 32 * v250;
                  uint64_t v164 = 2 * v251;
                  uint64_t v165 = &v257.i8[v163 + v164];
                  uint64_t v166 = v248;
                  uint64_t v167 = v249;
                  unint64_t v168 = 2 * v253;
                  if (v168 <= 1) {
                    unint64_t v169 = 1;
                  }
                  else {
                    unint64_t v169 = 2 * v253;
                  }
                  uint64_t v170 = v163 + v164;
                  int v171 = &v257.i8[v163 + v164];
                  if (v169) {
                    BOOL v172 = (v169 - 1) >> 32 == 0;
                  }
                  else {
                    BOOL v172 = 0;
                  }
                  uint64_t v173 = v169 & 0x1FFFFFFE0;
                  uint64_t v174 = v169 & 0x1FFFFFFF8;
                  char v176 = !v172 || v169 < 8;
                  uint64_t v177 = &v258.i8[v170];
                  int v178 = (long long *)(v248 + 16);
                  uint64_t v179 = v165;
                  uint64_t v180 = v248;
                  while (2)
                  {
                    unsigned int v181 = (char *)(v166 + v167 * v162);
                    char v182 = &v165[32 * v162];
                    if ((unint64_t)(&v171[32 * v162] - v181) < 0x20) {
                      char v183 = 1;
                    }
                    else {
                      char v183 = v176;
                    }
                    if (v183)
                    {
                      int v184 = 0;
LABEL_231:
                      unsigned int v194 = v184 + 1;
                      do
                      {
                        char v195 = *v181++;
                        *v182++ = v195;
                      }
                      while (v168 > v194++);
                    }
                    else
                    {
                      if (v169 >= 0x20)
                      {
                        unsigned int v186 = v178;
                        unsigned int v187 = v177;
                        uint64_t v188 = v169 & 0x1FFFFFFE0;
                        do
                        {
                          long long v189 = *v186;
                          *((_OWORD *)v187 - 1) = *(v186 - 1);
                          *(_OWORD *)unsigned int v187 = v189;
                          v187 += 32;
                          v186 += 2;
                          v188 -= 32;
                        }
                        while (v188);
                        if (v169 == v173) {
                          goto LABEL_214;
                        }
                        uint64_t v185 = v169 & 0x1FFFFFFE0;
                        if ((v169 & 0x18) == 0)
                        {
                          v181 += v173;
                          v182 += v173;
                          int v184 = v169 & 0xFFFFFFE0;
                          goto LABEL_231;
                        }
                      }
                      else
                      {
                        uint64_t v185 = 0;
                      }
                      v182 += v174;
                      uint64_t v190 = v185 - v174;
                      BOOL v191 = (uint64_t *)(v180 + v185);
                      BOOL v192 = &v179[v185];
                      do
                      {
                        uint64_t v193 = *v191++;
                        *(void *)BOOL v192 = v193;
                        v192 += 8;
                        v190 += 8;
                      }
                      while (v190);
                      if (v169 != v174)
                      {
                        v181 += v174;
                        int v184 = v169 & 0xFFFFFFF8;
                        goto LABEL_231;
                      }
                    }
LABEL_214:
                    ++v162;
                    v177 += 32;
                    int v178 = (long long *)((char *)v178 + v167);
                    v180 += v167;
                    v179 += 32;
                    if (v162 == v156) {
                      goto LABEL_234;
                    }
                    continue;
                  }
                }
                int16x8_t v157 = vld1q_dup_s16((const __int16 *)v154);
                int32x4_t v282 = (int32x4_t)v157;
                int32x4_t v284 = (int32x4_t)v157;
                int32x4_t v286 = (int32x4_t)v157;
                int32x4_t v288 = (int32x4_t)v157;
                uint64_t v156 = v252;
                if (v252) {
                  goto LABEL_200;
                }
              }
LABEL_234:
              uint64_t v197 = 0;
              unsigned int v198 = v246;
              unsigned int v199 = v247;
              int v200 = v254;
              int v201 = v255;
              a7 = v233;
              uint64_t result = v241;
              int v40 = v20 & v215;
              do
              {
                uint64_t v210 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,1u>::kSubblockPositions[v197 + 1];
                uint64_t v211 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,1u>::kSubblockPositions[v197];
                unsigned int v212 = (v200 - 8 * v211) & ~((v200 - 8 * (int)v211) >> 31);
                if (v212 >= 8) {
                  unsigned int v212 = 8;
                }
                unsigned int v213 = (v201 - 4 * v210) & ~((v201 - 4 * (int)v210) >> 31);
                if (v213 >= 4) {
                  unsigned int v213 = 4;
                }
                if (v212) {
                  BOOL v214 = v213 == 0;
                }
                else {
                  BOOL v214 = 1;
                }
                if (v214)
                {
                  char v209 = 0;
                }
                else
                {
                  uint64_t v202 = &v257 + 8 * v210 + v211;
                  float32x2x2_t v203 = (float32x2x2_t)*v202;
                  int32x4_t v204 = v202[2];
                  int32x4_t v205 = vzip2q_s32(*v202, v204);
                  float32x2x2_t v206 = (float32x2x2_t)v202[4];
                  int32x4_t v207 = v202[6];
                  int v208 = (float *)v198;
                  vst2_f32(v208, v203);
                  v208 += 4;
                  vst2_f32(v208, v206);
                  v198[2] = v205;
                  v198[3] = vzip2q_s32((int32x4_t)v206, v207);
                  v198 += 4;
                  char v209 = 63;
                }
                *v199++ = v209;
                v197 += 2;
              }
              while (v197 != 16);
LABEL_124:
              int32x4_t v79 = __dst;
              if (v244) {
                goto LABEL_47;
              }
              goto LABEL_48;
            }
            int v82 = (int32x4_t *)v256;
          }
          else
          {
            int v82 = v79;
            if (v80) {
              goto LABEL_122;
            }
          }
          uint64_t v83 = 0;
          uint64_t v84 = (float *)v82;
          do
          {
            uint64_t v94 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,1u>::kSubblockPositions[v83 + 1];
            uint64_t v95 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,1u>::kSubblockPositions[v83];
            unsigned int v96 = (v45 - 8 * v95) & ~((int)(v45 - 8 * v95) >> 31);
            if (v96 >= 8) {
              unsigned int v96 = 8;
            }
            unsigned int v97 = (v39 - 4 * v94) & ~((int)(v39 - 4 * v94) >> 31);
            if (v97 >= 4) {
              unsigned int v97 = 4;
            }
            if (v96) {
              BOOL v98 = v97 == 0;
            }
            else {
              BOOL v98 = 1;
            }
            if (v98)
            {
              char v93 = 0;
            }
            else
            {
              BOOL v85 = (float32x2x2_t *)(v78 + 4 * a11 * v94 + 16 * v95);
              float32x2x2_t v86 = *v85;
              int32x4_t v87 = *(int32x4_t *)((char *)v85 + a11);
              int16x8_t v88 = (int32x4_t *)((char *)v85 + 2 * a11);
              float32x2x2_t v89 = (float32x2x2_t)*v88;
              int32x4_t v90 = *(int32x4_t *)((char *)v88 + a11);
              int32x4_t v91 = vzip2q_s32(*v88, v90);
              int32x4_t v92 = v84;
              vst2_f32(v92, v86);
              v92 += 4;
              vst2_f32(v92, v89);
              *((int32x4_t *)v84 + 2) = vzip2q_s32((int32x4_t)v86, v87);
              *((int32x4_t *)v84 + 3) = v91;
              v84 += 16;
              char v93 = 63;
            }
            *v77++ = v93;
            v83 += 2;
          }
          while (v83 != 16);
          a7 = v233;
          int v40 = v20 & v215;
          if (v244)
          {
LABEL_47:
            memcpy(v79, v82, 0x200uLL);
            uint64_t result = v241;
          }
LABEL_48:
          BOOL v21 = v38++ == v234 >> 4;
        }
        while (!v21);
        BOOL v21 = v20++ == v221;
      }
      while (!v21);
    }
  }
  return result;
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, uint64_t a7, unsigned int a8, int a9, int a10, uint64_t a11, int a12)
{
  uint64_t v252 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  uint64_t v17 = a1;
  unsigned int v201 = a8;
  unsigned int v18 = a8 >> 4;
  unsigned int v186 = a8 + a10 - 1;
  unsigned int v188 = v186 >> 4;
  unsigned int v19 = *(unsigned __int8 *)(*(void *)(a1 + 208) + 88);
  unsigned int v20 = *(_DWORD *)(a1 + 112);
  uint64_t v202 = v17;
  if (*(void *)(v17 + 168))
  {
    __int16 CacheMode = IOSurfaceGetCacheMode();
    uint64_t v17 = v202;
    int v22 = CacheMode & 0xF00;
  }
  else
  {
    int v22 = 0;
  }
  BOOL v23 = (v22 & 0xD00) == 0 || v22 == 768;
  int v24 = v22 & 0xE00;
  int v26 = !v23 && v24 != 1024;
  int v206 = v26;
  BOOL isLevelTiled = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::isLevelTiled(v17, *(_DWORD *)(v17 + 144) + a12);
  uint64_t v28 = v202;
  BOOL v195 = isLevelTiled;
  if (v18 <= v188)
  {
    unsigned int v194 = a7 + a9 - 1;
    unsigned int v185 = a7 >> 4;
    if (a7 >> 4 <= v194 >> 4)
    {
      unsigned int v182 = a5 - 1;
      unsigned int v204 = (a5 - 1) >> 4;
      int v203 = ((a5 - 1) & 0xF) + 1;
      int v183 = ((a6 - 1) & 0xF) + 1;
      unsigned int v184 = (a6 - 1) >> 4;
      uint32x2_t v29 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0xF0000000FLL);
      int8x8_t v30 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v29, 4uLL))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x2000000020, v29));
      __int32 v193 = v30.i32[0] | v30.i32[1];
      BOOL v191 = v30.i32[1] != 0;
      int8x8_t v192 = v30;
      BOOL v190 = v30.i32[0] != 0;
      unint64_t v181 = 8 * v20 * (unint64_t)v19;
      do
      {
        unsigned int v31 = (16 * v18) | 0xF;
        if (16 * v18 <= v201) {
          int v32 = v201;
        }
        else {
          int v32 = 16 * v18;
        }
        unsigned int v33 = v185;
        if (v186 < v31) {
          unsigned int v31 = v186;
        }
        unsigned int v200 = 16 * v18;
        int v189 = v32 - 16 * v18;
        int v199 = v31 - v32 + 1;
        int v34 = v183;
        if (v18 != v184) {
          int v34 = 16;
        }
        unsigned int v207 = v34;
        uint64_t v198 = a3 + (v32 - v201) * a11;
        do
        {
          unsigned int v35 = 16 * v33;
          unsigned int v36 = 16 * (v33 + 1) - 1;
          if (16 * v33 <= a7) {
            int v37 = a7;
          }
          else {
            int v37 = 16 * v33;
          }
          if (v194 < v36) {
            unsigned int v36 = v194;
          }
          int v38 = v36 - v37 + 1;
          if (v33 == v204) {
            unsigned int v39 = v203;
          }
          else {
            unsigned int v39 = 16;
          }
          BOOL v40 = 1;
          if (v200 >= v201 && v35 >= a7)
          {
            int v41 = v203;
            if (v33 != v204) {
              int v41 = 16;
            }
            BOOL v40 = v38 != v41 || v199 != v207;
          }
          if (v195)
          {
            unsigned int v62 = 0;
            uint64_t v63 = v181 >> (*(unsigned char *)(v28 + 57) != 0);
            char v64 = 1;
            if (v63 > 127)
            {
              if (v63 > 511)
              {
                if (v63 == 512)
                {
                  unsigned int v62 = 16;
                  char v65 = 1;
                  unsigned int v66 = 16;
                }
                else
                {
                  char v65 = 1;
                  unsigned int v66 = 0;
                  if (v63 == 1024)
                  {
                    unsigned int v66 = 8;
                    unsigned int v62 = 16;
                  }
                }
              }
              else if (v63 == 128)
              {
                char v64 = 0;
                char v65 = 0;
                unsigned int v62 = 32;
                unsigned int v66 = 32;
              }
              else
              {
                char v65 = 1;
                unsigned int v66 = 0;
                if (v63 == 256)
                {
                  char v64 = 0;
                  unsigned int v66 = 16;
                  unsigned int v62 = 32;
                }
              }
            }
            else
            {
              char v65 = 1;
              unsigned int v66 = 0;
              switch(v63)
              {
                case 4:
                  char v64 = 0;
                  char v65 = 0;
                  unsigned int v66 = 128;
                  unsigned int v62 = 256;
                  break;
                case 5:
                case 6:
                case 7:
                case 9:
                case 10:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 17:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                  break;
                case 8:
                  char v64 = 0;
                  char v65 = 0;
                  unsigned int v62 = 128;
                  unsigned int v66 = 128;
                  break;
                case 16:
                  char v64 = 0;
                  char v65 = 0;
                  unsigned int v66 = 64;
                  unsigned int v62 = 128;
                  break;
                case 32:
                  char v64 = 0;
                  char v65 = 0;
                  unsigned int v62 = 64;
                  unsigned int v66 = 64;
                  break;
                default:
                  if (v63 == 64)
                  {
                    char v64 = 0;
                    char v65 = 0;
                    unsigned int v66 = 32;
                    unsigned int v62 = 64;
                  }
                  break;
              }
            }
            unsigned int v172 = (v62 >> 4) - 1;
            if (v64)
            {
              unsigned int v173 = 0;
              if (v65) {
                goto LABEL_219;
              }
LABEL_208:
              unsigned int v174 = 32 - __clz(~(-1 << -(char)__clz(((v66 + 15) >> 4) - 1)));
              if (v174 | v173) {
                goto LABEL_209;
              }
LABEL_220:
              uint64_t v176 = 0;
            }
            else
            {
              unsigned int v173 = 32 - __clz(~(-1 << -(char)__clz(v172)));
              if ((v65 & 1) == 0) {
                goto LABEL_208;
              }
LABEL_219:
              unsigned int v174 = 0;
              if (!v173) {
                goto LABEL_220;
              }
LABEL_209:
              int v175 = 0;
              uint64_t v176 = 0;
              int v177 = v33 & v172;
              BOOL v178 = v173 != 0;
              BOOL v179 = v174 != 0;
              int v180 = 1;
              do
              {
                --v173;
                if (v178) {
                  v176 |= (unint64_t)(v180 & v177) << v175++;
                }
                else {
                  unsigned int v173 = 0;
                }
                --v174;
                if (v179) {
                  v176 |= (unint64_t)(v180 & v18 & ((v66 >> 4) - 1)) << v175++;
                }
                else {
                  unsigned int v174 = 0;
                }
                v180 *= 2;
                --v175;
                BOOL v179 = v174 != 0;
                BOOL v178 = v173 != 0;
              }
              while (v174 | v173);
            }
            unint64_t v50 = ((unint64_t)(v35 / v62 + v200 / v66 * ((v62 + v182) / v62)) << 14) + (v176 << 9);
            goto LABEL_58;
          }
          if (v193)
          {
            int v43 = 0;
            uint64_t v44 = 0;
            int v45 = 1;
            BOOL v46 = v191;
            BOOL v47 = v190;
            __int32 v48 = v192.i32[1];
            __int32 v49 = v192.i32[0];
            do
            {
              --v48;
              if (v46) {
                v44 |= (unint64_t)(v45 & v33) << v43++;
              }
              else {
                __int32 v48 = 0;
              }
              --v49;
              if (v47) {
                v44 |= (unint64_t)(v45 & v18) << v43++;
              }
              else {
                __int32 v49 = 0;
              }
              v45 *= 2;
              --v43;
              BOOL v47 = v49 != 0;
              BOOL v46 = v48 != 0;
            }
            while (v49 | v48);
          }
          else
          {
            uint64_t v44 = 0;
          }
          unint64_t v50 = v44 << 9;
LABEL_58:
          unsigned int v51 = *(_DWORD *)(v28 + 128) >> (*(unsigned char *)(v28 + 144) + a12);
          if (v51 <= 1) {
            unsigned int v51 = 1;
          }
          unsigned int v52 = v51 + 15;
          if (v52 < 0x20) {
            unsigned int v53 = 0;
          }
          else {
            unsigned int v53 = 32 - __clz(~(-1 << -(char)__clz((v52 >> 4) - 1)));
          }
          unsigned int v54 = *(_DWORD *)(v28 + 132) >> (*(unsigned char *)(v28 + 144) + a12);
          if (v54 <= 1) {
            unsigned int v54 = 1;
          }
          unsigned int v55 = v54 + 15;
          if (v55 < 0x20)
          {
            unsigned int v56 = 0;
            if (!v53)
            {
LABEL_80:
              uint64_t v58 = 0;
              goto LABEL_81;
            }
          }
          else
          {
            unsigned int v56 = 32 - __clz(~(-1 << -(char)__clz((v55 >> 4) - 1)));
            if (!(v56 | v53)) {
              goto LABEL_80;
            }
          }
          int v57 = 0;
          uint64_t v58 = 0;
          BOOL v59 = v53 != 0;
          BOOL v60 = v56 != 0;
          int v61 = 1;
          do
          {
            --v53;
            if (v59) {
              v58 |= (unint64_t)(v61 & v33) << v57++;
            }
            else {
              unsigned int v53 = 0;
            }
            --v56;
            if (v60) {
              v58 |= (unint64_t)(v61 & v18) << v57++;
            }
            else {
              unsigned int v56 = 0;
            }
            v61 *= 2;
            --v57;
            BOOL v60 = v56 != 0;
            BOOL v59 = v53 != 0;
          }
          while (v56 | v53);
LABEL_81:
          uint64_t v67 = a7;
          int v68 = v39 < 0x10 || v40;
          unsigned int v69 = (char *)(a4 + 8 * v58);
          unint64_t v70 = v198 + 2 * (v37 - a7);
          uint64_t v71 = (int32x4_t *)(a2 + v50);
          if (v207 < 0x10) {
            int v72 = 1;
          }
          else {
            int v72 = v68;
          }
          __src = v71;
          if (v206)
          {
            if (!v72)
            {
              uint64_t v71 = (int32x4_t *)__dst;
LABEL_94:
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock(v70, a11, (unint64_t)v71, v69, v39, v207);
              goto LABEL_95;
            }
            int v73 = v38;
            memcpy(__dst, __src, sizeof(__dst));
            int v38 = v73;
            uint64_t v71 = (int32x4_t *)__dst;
            uint64_t v28 = v202;
          }
          else if (!v72)
          {
            goto LABEL_94;
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE9ELj1ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = v28;
          char v209 = v71;
          unsigned __int8 v217 = v39;
          unsigned __int8 v218 = v207;
          unsigned int v213 = v189;
          unsigned int v214 = v37 - v35;
          uint64_t v210 = v69;
          unint64_t v211 = v70;
          uint64_t v212 = a11;
          unsigned int v215 = v199;
          unsigned int v216 = v38;
          if (!v40)
          {
            unsigned int v74 = *v69;
            a7 = v67;
            if (v74 == 63)
            {
              int32x4_t v77 = v71[1];
              int32x4_t v78 = v71[2];
              int32x4_t v79 = v71[3];
              int32x4_t v80 = vuzp2q_s32(*v71, v78);
              int32x4_t v220 = vuzp1q_s32(*v71, v78);
              int32x4_t v222 = v80;
              int32x4_t v224 = vuzp1q_s32(v77, v79);
              int32x4_t v226 = vuzp2q_s32(v77, v79);
              uint64_t v75 = 64;
            }
            else if (v74 == 1)
            {
              int16x8_t v76 = vld1q_dup_s16(v71->i16);
              int32x4_t v220 = (int32x4_t)v76;
              int32x4_t v222 = (int32x4_t)v76;
              int32x4_t v224 = (int32x4_t)v76;
              int32x4_t v226 = (int32x4_t)v76;
              uint64_t v75 = 2;
            }
            else if (*v69)
            {
              uint64_t v75 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v220, 32, (uint64_t)v71, v74);
            }
            else
            {
              uint64_t v75 = 0;
              int32x4_t v220 = 0uLL;
              int32x4_t v222 = 0uLL;
              int32x4_t v224 = 0uLL;
              int32x4_t v226 = 0uLL;
            }
            uint64_t v81 = (uint64_t)v71->i64 + v75;
            unsigned int v82 = v69[1];
            if (v82 == 63)
            {
              int32x4_t v85 = *(int32x4_t *)(v81 + 16);
              int32x4_t v86 = *(int32x4_t *)(v81 + 32);
              int32x4_t v87 = *(int32x4_t *)(v81 + 48);
              int32x4_t v88 = vuzp2q_s32(*(int32x4_t *)v81, v86);
              int32x4_t v228 = vuzp1q_s32(*(int32x4_t *)v81, v86);
              int32x4_t v230 = v88;
              int32x4_t v232 = vuzp1q_s32(v85, v87);
              int32x4_t v234 = vuzp2q_s32(v85, v87);
              uint64_t v83 = 64;
            }
            else if (v82 == 1)
            {
              int16x8_t v84 = vld1q_dup_s16((const __int16 *)v81);
              int32x4_t v228 = (int32x4_t)v84;
              int32x4_t v230 = (int32x4_t)v84;
              int32x4_t v232 = (int32x4_t)v84;
              int32x4_t v234 = (int32x4_t)v84;
              uint64_t v83 = 2;
            }
            else if (v69[1])
            {
              uint64_t v83 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v228, 32, v81, v82);
            }
            else
            {
              uint64_t v83 = 0;
              int32x4_t v228 = 0uLL;
              int32x4_t v230 = 0uLL;
              int32x4_t v232 = 0uLL;
              int32x4_t v234 = 0uLL;
            }
            uint64_t v89 = v81 + v83;
            unsigned int v90 = v69[2];
            if (v90 == 63)
            {
              int32x4_t v93 = *(int32x4_t *)(v89 + 16);
              int32x4_t v94 = *(int32x4_t *)(v89 + 32);
              int32x4_t v95 = *(int32x4_t *)(v89 + 48);
              int32x4_t v96 = vuzp2q_s32(*(int32x4_t *)v89, v94);
              int32x4_t v221 = vuzp1q_s32(*(int32x4_t *)v89, v94);
              int32x4_t v223 = v96;
              int32x4_t v225 = vuzp1q_s32(v93, v95);
              int32x4_t v227 = vuzp2q_s32(v93, v95);
              uint64_t v91 = 64;
            }
            else if (v90 == 1)
            {
              int16x8_t v92 = vld1q_dup_s16((const __int16 *)v89);
              int32x4_t v221 = (int32x4_t)v92;
              int32x4_t v223 = (int32x4_t)v92;
              int32x4_t v225 = (int32x4_t)v92;
              int32x4_t v227 = (int32x4_t)v92;
              uint64_t v91 = 2;
            }
            else if (v69[2])
            {
              uint64_t v91 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v221, 32, v89, v90);
            }
            else
            {
              uint64_t v91 = 0;
              int32x4_t v221 = 0uLL;
              int32x4_t v223 = 0uLL;
              int32x4_t v225 = 0uLL;
              int32x4_t v227 = 0uLL;
            }
            uint64_t v97 = v89 + v91;
            unsigned int v98 = v69[3];
            if (v98 == 63)
            {
              int32x4_t v101 = *(int32x4_t *)(v97 + 16);
              int32x4_t v102 = *(int32x4_t *)(v97 + 32);
              int32x4_t v103 = *(int32x4_t *)(v97 + 48);
              int32x4_t v104 = vuzp2q_s32(*(int32x4_t *)v97, v102);
              int32x4_t v229 = vuzp1q_s32(*(int32x4_t *)v97, v102);
              int32x4_t v231 = v104;
              int32x4_t v233 = vuzp1q_s32(v101, v103);
              int32x4_t v235 = vuzp2q_s32(v101, v103);
              uint64_t v99 = 64;
            }
            else if (v98 == 1)
            {
              int16x8_t v100 = vld1q_dup_s16((const __int16 *)v97);
              int32x4_t v229 = (int32x4_t)v100;
              int32x4_t v231 = (int32x4_t)v100;
              int32x4_t v233 = (int32x4_t)v100;
              int32x4_t v235 = (int32x4_t)v100;
              uint64_t v99 = 2;
            }
            else if (v69[3])
            {
              uint64_t v99 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v229, 32, v97, v98);
            }
            else
            {
              uint64_t v99 = 0;
              int32x4_t v229 = 0uLL;
              int32x4_t v231 = 0uLL;
              int32x4_t v233 = 0uLL;
              int32x4_t v235 = 0uLL;
            }
            uint64_t v105 = v97 + v99;
            unsigned int v106 = v69[4];
            if (v106 == 63)
            {
              int32x4_t v109 = *(int32x4_t *)(v105 + 16);
              int32x4_t v110 = *(int32x4_t *)(v105 + 32);
              int32x4_t v111 = *(int32x4_t *)(v105 + 48);
              int32x4_t v112 = vuzp2q_s32(*(int32x4_t *)v105, v110);
              int32x4_t v236 = vuzp1q_s32(*(int32x4_t *)v105, v110);
              int32x4_t v238 = v112;
              int32x4_t v240 = vuzp1q_s32(v109, v111);
              int32x4_t v242 = vuzp2q_s32(v109, v111);
              uint64_t v107 = 64;
            }
            else if (v106 == 1)
            {
              int16x8_t v108 = vld1q_dup_s16((const __int16 *)v105);
              int32x4_t v236 = (int32x4_t)v108;
              int32x4_t v238 = (int32x4_t)v108;
              int32x4_t v240 = (int32x4_t)v108;
              int32x4_t v242 = (int32x4_t)v108;
              uint64_t v107 = 2;
            }
            else if (v69[4])
            {
              uint64_t v107 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v236, 32, v105, v106);
            }
            else
            {
              uint64_t v107 = 0;
              int32x4_t v236 = 0uLL;
              int32x4_t v238 = 0uLL;
              int32x4_t v240 = 0uLL;
              int32x4_t v242 = 0uLL;
            }
            uint64_t v113 = v105 + v107;
            unsigned int v114 = v69[5];
            if (v114 == 63)
            {
              int32x4_t v117 = *(int32x4_t *)(v113 + 16);
              int32x4_t v118 = *(int32x4_t *)(v113 + 32);
              int32x4_t v119 = *(int32x4_t *)(v113 + 48);
              int32x4_t v120 = vuzp2q_s32(*(int32x4_t *)v113, v118);
              int32x4_t v244 = vuzp1q_s32(*(int32x4_t *)v113, v118);
              int32x4_t v246 = v120;
              int32x4_t v248 = vuzp1q_s32(v117, v119);
              int32x4_t v250 = vuzp2q_s32(v117, v119);
              uint64_t v115 = 64;
            }
            else if (v114 == 1)
            {
              int16x8_t v116 = vld1q_dup_s16((const __int16 *)v113);
              int32x4_t v244 = (int32x4_t)v116;
              int32x4_t v246 = (int32x4_t)v116;
              int32x4_t v248 = (int32x4_t)v116;
              int32x4_t v250 = (int32x4_t)v116;
              uint64_t v115 = 2;
            }
            else if (v69[5])
            {
              uint64_t v115 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v244, 32, v113, v114);
            }
            else
            {
              uint64_t v115 = 0;
              int32x4_t v244 = 0uLL;
              int32x4_t v246 = 0uLL;
              int32x4_t v248 = 0uLL;
              int32x4_t v250 = 0uLL;
            }
            uint64_t v121 = v113 + v115;
            unsigned int v122 = v69[6];
            if (v122 == 63)
            {
              int32x4_t v125 = *(int32x4_t *)(v121 + 16);
              int32x4_t v126 = *(int32x4_t *)(v121 + 32);
              int32x4_t v127 = *(int32x4_t *)(v121 + 48);
              int32x4_t v128 = vuzp2q_s32(*(int32x4_t *)v121, v126);
              int32x4_t v237 = vuzp1q_s32(*(int32x4_t *)v121, v126);
              int32x4_t v239 = v128;
              int32x4_t v241 = vuzp1q_s32(v125, v127);
              int32x4_t v243 = vuzp2q_s32(v125, v127);
              uint64_t v123 = 64;
            }
            else if (v122 == 1)
            {
              int16x8_t v124 = vld1q_dup_s16((const __int16 *)v121);
              int32x4_t v237 = (int32x4_t)v124;
              int32x4_t v239 = (int32x4_t)v124;
              int32x4_t v241 = (int32x4_t)v124;
              int32x4_t v243 = (int32x4_t)v124;
              uint64_t v123 = 2;
            }
            else if (v69[6])
            {
              uint64_t v123 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v237, 32, v121, v122);
            }
            else
            {
              uint64_t v123 = 0;
              int32x4_t v237 = 0uLL;
              int32x4_t v239 = 0uLL;
              int32x4_t v241 = 0uLL;
              int32x4_t v243 = 0uLL;
            }
            uint64_t v129 = v121 + v123;
            unsigned int v130 = v69[7];
            if (v130 == 63)
            {
              int32x4_t v133 = *(int32x4_t *)(v129 + 16);
              int32x4_t v134 = *(int32x4_t *)(v129 + 32);
              int32x4_t v135 = *(int32x4_t *)(v129 + 48);
              int32x4_t v136 = vuzp2q_s32(*(int32x4_t *)v129, v134);
              int32x4_t v245 = vuzp1q_s32(*(int32x4_t *)v129, v134);
              int32x4_t v247 = v136;
              int32x4_t v249 = vuzp1q_s32(v133, v135);
              int32x4_t v251 = vuzp2q_s32(v133, v135);
              uint64_t v131 = v215;
              if (v215) {
                goto LABEL_156;
              }
            }
            else
            {
              if (v130 != 1)
              {
                if (v69[7])
                {
                  AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v245, 32, v129, v130);
                  uint64_t v131 = v215;
                  if (!v215) {
                    goto LABEL_190;
                  }
                }
                else
                {
                  int32x4_t v245 = 0uLL;
                  int32x4_t v247 = 0uLL;
                  int32x4_t v249 = 0uLL;
                  int32x4_t v251 = 0uLL;
                  uint64_t v131 = v215;
                  if (!v215) {
                    goto LABEL_190;
                  }
                }
LABEL_156:
                if (!v216) {
                  goto LABEL_190;
                }
                uint64_t v137 = 0;
                uint64_t v138 = 32 * v213;
                uint64_t v139 = 2 * v214;
                uint64_t v140 = &v220.i8[v138 + v139];
                unint64_t v141 = v211;
                uint64_t v142 = v212;
                unint64_t v143 = 2 * v216;
                if (v143 <= 1) {
                  unint64_t v144 = 1;
                }
                else {
                  unint64_t v144 = 2 * v216;
                }
                uint64_t v145 = v138 + v139;
                uint64_t v146 = &v220.i8[v138 + v139];
                if (v144) {
                  BOOL v147 = (v144 - 1) >> 32 == 0;
                }
                else {
                  BOOL v147 = 0;
                }
                uint64_t v148 = v144 & 0x1FFFFFFE0;
                uint64_t v149 = v144 & 0x1FFFFFFF8;
                char v151 = !v147 || v144 < 8;
                int32x4_t v152 = &v221.i8[v145];
                int32x4_t v153 = (long long *)(v211 + 16);
                uint64_t v154 = v140;
                unint64_t v155 = v211;
                while (2)
                {
                  uint64_t v156 = (char *)(v141 + v142 * v137);
                  int16x8_t v157 = &v140[32 * v137];
                  if ((unint64_t)(&v146[32 * v137] - v156) < 0x20) {
                    char v158 = 1;
                  }
                  else {
                    char v158 = v151;
                  }
                  if (v158)
                  {
                    int v159 = 0;
LABEL_187:
                    unsigned int v169 = v159 + 1;
                    do
                    {
                      char v170 = *v156++;
                      *v157++ = v170;
                    }
                    while (v143 > v169++);
                  }
                  else
                  {
                    if (v144 >= 0x20)
                    {
                      int32x4_t v161 = v153;
                      uint64_t v162 = v152;
                      uint64_t v163 = v144 & 0x1FFFFFFE0;
                      do
                      {
                        long long v164 = *v161;
                        *((_OWORD *)v162 - 1) = *(v161 - 1);
                        *(_OWORD *)uint64_t v162 = v164;
                        v162 += 32;
                        v161 += 2;
                        v163 -= 32;
                      }
                      while (v163);
                      if (v144 == v148) {
                        goto LABEL_170;
                      }
                      uint64_t v160 = v144 & 0x1FFFFFFE0;
                      if ((v144 & 0x18) == 0)
                      {
                        v156 += v148;
                        v157 += v148;
                        int v159 = v144 & 0xFFFFFFE0;
                        goto LABEL_187;
                      }
                    }
                    else
                    {
                      uint64_t v160 = 0;
                    }
                    v157 += v149;
                    uint64_t v165 = v160 - v149;
                    uint64_t v166 = (uint64_t *)(v155 + v160);
                    uint64_t v167 = &v154[v160];
                    do
                    {
                      uint64_t v168 = *v166++;
                      *(void *)uint64_t v167 = v168;
                      v167 += 8;
                      v165 += 8;
                    }
                    while (v165);
                    if (v144 != v149)
                    {
                      v156 += v149;
                      int v159 = v144 & 0xFFFFFFF8;
                      goto LABEL_187;
                    }
                  }
LABEL_170:
                  ++v137;
                  v152 += 32;
                  int32x4_t v153 = (long long *)((char *)v153 + v142);
                  v155 += v142;
                  v154 += 32;
                  if (v137 == v131) {
                    goto LABEL_190;
                  }
                  continue;
                }
              }
              int16x8_t v132 = vld1q_dup_s16((const __int16 *)v129);
              int32x4_t v245 = (int32x4_t)v132;
              int32x4_t v247 = (int32x4_t)v132;
              int32x4_t v249 = (int32x4_t)v132;
              int32x4_t v251 = (int32x4_t)v132;
              uint64_t v131 = v215;
              if (v215) {
                goto LABEL_156;
              }
            }
LABEL_190:
            AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)&v220, 32, (unint64_t)v209, v210, v217, v218);
            if (!v206) {
              goto LABEL_26;
            }
            goto LABEL_191;
          }
          dispatch_sync(*(dispatch_queue_t *)(*(void *)(v28 + 8) + 7384), block);
LABEL_95:
          a7 = v67;
          if (!v206) {
            goto LABEL_26;
          }
LABEL_191:
          memcpy(__src, v71, 0x200uLL);
LABEL_26:
          BOOL v23 = v33++ == v194 >> 4;
          uint64_t v28 = v202;
        }
        while (!v23);
        BOOL v23 = v18++ == v188;
      }
      while (!v23);
    }
  }
}

uint64_t AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, int a12)
{
  uint64_t v291 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v241 = a8;
  unsigned int v17 = a8 >> 4;
  unsigned int v223 = a8 + a10 - 1;
  unsigned int v225 = v223 >> 4;
  unsigned int v18 = *(unsigned __int8 *)(*(void *)(a1 + 208) + 88);
  unsigned int v19 = *(_DWORD *)(a1 + 112);
  uint64_t v243 = a1;
  if (*(void *)(a1 + 168)) {
    int v20 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v20 = 0;
  }
  BOOL v21 = (v20 & 0xD00) == 0 || v20 == 768;
  int v22 = v20 & 0xE00;
  int v24 = !v21 && v22 != 1024;
  int v246 = v24;
  uint64_t result = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::isLevelTiled(a1, *(_DWORD *)(a1 + 144) + a12);
  uint64_t v26 = a1;
  int v235 = result;
  if (v17 <= v225)
  {
    unsigned int v234 = a7 + a9 - 1;
    unsigned int v222 = a7 >> 4;
    if (a7 >> 4 <= v234 >> 4)
    {
      unsigned int v219 = a5 - 1;
      unsigned int v245 = (a5 - 1) >> 4;
      int v244 = ((a5 - 1) & 0xF) + 1;
      int v220 = ((a6 - 1) & 0xF) + 1;
      unsigned int v221 = (a6 - 1) >> 4;
      uint32x2_t v27 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0xF0000000FLL);
      int8x8_t v28 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v27, 4uLL))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x2000000020, v27));
      __int32 v232 = v28.i32[0] | v28.i32[1];
      BOOL v229 = v28.i32[1] != 0;
      int8x8_t v230 = v28;
      BOOL v228 = v28.i32[0] != 0;
      unint64_t v218 = 8 * v19 * (unint64_t)v18;
      uint64_t v29 = a11;
      uint64_t v30 = 4 * a11;
      uint64_t result = 2 * a11;
      unsigned int v233 = a7;
      do
      {
        unsigned int v31 = (16 * v17) | 0xF;
        if (16 * v17 <= v241) {
          int v32 = v241;
        }
        else {
          int v32 = 16 * v17;
        }
        unsigned int v33 = v222;
        if (v223 < v31) {
          unsigned int v31 = v223;
        }
        unsigned int v240 = 16 * v17;
        int v227 = v32 - 16 * v17;
        int v239 = v31 - v32 + 1;
        if (v17 == v221) {
          unsigned int v34 = v220;
        }
        else {
          unsigned int v34 = 16;
        }
        uint64_t v238 = a3 + (v32 - v241) * v29;
        unsigned int v226 = v34;
        do
        {
          unsigned int v35 = 16 * v33;
          unsigned int v36 = 16 * (v33 + 1) - 1;
          if (16 * v33 <= a7) {
            int v37 = a7;
          }
          else {
            int v37 = 16 * v33;
          }
          if (v234 < v36) {
            unsigned int v36 = v234;
          }
          int v38 = v36 - v37 + 1;
          if (v33 == v245) {
            unsigned int v39 = v244;
          }
          else {
            unsigned int v39 = 16;
          }
          BOOL v40 = 1;
          if (v240 >= v241 && v35 >= a7)
          {
            int v41 = v244;
            if (v33 != v245) {
              int v41 = 16;
            }
            BOOL v40 = v38 != v41 || v239 != v34;
          }
          if (v235)
          {
            unsigned int v62 = 0;
            uint64_t v63 = v218 >> (*(unsigned char *)(v26 + 57) != 0);
            char v64 = 1;
            if (v63 > 127)
            {
              if (v63 > 511)
              {
                if (v63 == 512)
                {
                  unsigned int v62 = 16;
                  char v65 = 1;
                  unsigned int v66 = 16;
                }
                else
                {
                  char v65 = 1;
                  unsigned int v66 = 0;
                  if (v63 == 1024)
                  {
                    unsigned int v66 = 8;
                    unsigned int v62 = 16;
                  }
                }
              }
              else if (v63 == 128)
              {
                char v64 = 0;
                char v65 = 0;
                unsigned int v62 = 32;
                unsigned int v66 = 32;
              }
              else
              {
                char v65 = 1;
                unsigned int v66 = 0;
                if (v63 == 256)
                {
                  char v64 = 0;
                  unsigned int v66 = 16;
                  unsigned int v62 = 32;
                }
              }
            }
            else
            {
              char v65 = 1;
              unsigned int v66 = 0;
              switch(v63)
              {
                case 4:
                  char v64 = 0;
                  char v65 = 0;
                  unsigned int v66 = 128;
                  unsigned int v62 = 256;
                  break;
                case 5:
                case 6:
                case 7:
                case 9:
                case 10:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 17:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                  break;
                case 8:
                  char v64 = 0;
                  char v65 = 0;
                  unsigned int v62 = 128;
                  unsigned int v66 = 128;
                  break;
                case 16:
                  char v64 = 0;
                  char v65 = 0;
                  unsigned int v66 = 64;
                  unsigned int v62 = 128;
                  break;
                case 32:
                  char v64 = 0;
                  char v65 = 0;
                  unsigned int v62 = 64;
                  unsigned int v66 = 64;
                  break;
                default:
                  if (v63 == 64)
                  {
                    char v64 = 0;
                    char v65 = 0;
                    unsigned int v66 = 32;
                    unsigned int v62 = 64;
                  }
                  break;
              }
            }
            unsigned int v209 = (v62 >> 4) - 1;
            if (v64)
            {
              unsigned int v210 = 0;
              if (v65) {
                goto LABEL_244;
              }
LABEL_233:
              unsigned int v211 = 32 - __clz(~(-1 << -(char)__clz(((v66 + 15) >> 4) - 1)));
              if (v211 | v210) {
                goto LABEL_234;
              }
LABEL_245:
              uint64_t v213 = 0;
            }
            else
            {
              unsigned int v210 = 32 - __clz(~(-1 << -(char)__clz(v209)));
              if ((v65 & 1) == 0) {
                goto LABEL_233;
              }
LABEL_244:
              unsigned int v211 = 0;
              if (!v210) {
                goto LABEL_245;
              }
LABEL_234:
              int v212 = 0;
              uint64_t v213 = 0;
              int v214 = v33 & v209;
              BOOL v215 = v210 != 0;
              BOOL v216 = v211 != 0;
              int v217 = 1;
              do
              {
                --v210;
                if (v215) {
                  v213 |= (unint64_t)(v217 & v214) << v212++;
                }
                else {
                  unsigned int v210 = 0;
                }
                --v211;
                if (v216) {
                  v213 |= (unint64_t)(v217 & v17 & ((v66 >> 4) - 1)) << v212++;
                }
                else {
                  unsigned int v211 = 0;
                }
                v217 *= 2;
                --v212;
                BOOL v216 = v211 != 0;
                BOOL v215 = v210 != 0;
              }
              while (v211 | v210);
            }
            unint64_t v50 = ((unint64_t)(v35 / v62 + v240 / v66 * ((v62 + v219) / v62)) << 14) + (v213 << 9);
            uint64_t result = 2 * a11;
            goto LABEL_60;
          }
          if (v232)
          {
            int v43 = 0;
            uint64_t v44 = 0;
            int v45 = 1;
            BOOL v46 = v229;
            BOOL v47 = v228;
            __int32 v48 = v230.i32[1];
            __int32 v49 = v230.i32[0];
            do
            {
              --v48;
              if (v46) {
                v44 |= (unint64_t)(v45 & v33) << v43++;
              }
              else {
                __int32 v48 = 0;
              }
              --v49;
              if (v47) {
                v44 |= (unint64_t)(v45 & v17) << v43++;
              }
              else {
                __int32 v49 = 0;
              }
              v45 *= 2;
              --v43;
              BOOL v47 = v49 != 0;
              BOOL v46 = v48 != 0;
            }
            while (v49 | v48);
          }
          else
          {
            uint64_t v44 = 0;
          }
          unint64_t v50 = v44 << 9;
LABEL_60:
          unsigned int v51 = *(_DWORD *)(v26 + 128) >> (*(unsigned char *)(v26 + 144) + a12);
          if (v51 <= 1) {
            unsigned int v51 = 1;
          }
          unsigned int v52 = v51 + 15;
          if (v52 < 0x20) {
            unsigned int v53 = 0;
          }
          else {
            unsigned int v53 = 32 - __clz(~(-1 << -(char)__clz((v52 >> 4) - 1)));
          }
          unsigned int v54 = *(_DWORD *)(v26 + 132) >> (*(unsigned char *)(v26 + 144) + a12);
          if (v54 <= 1) {
            unsigned int v54 = 1;
          }
          unsigned int v55 = v54 + 15;
          if (v55 < 0x20)
          {
            unsigned int v56 = 0;
            if (!v53)
            {
LABEL_82:
              uint64_t v58 = 0;
              goto LABEL_83;
            }
          }
          else
          {
            unsigned int v56 = 32 - __clz(~(-1 << -(char)__clz((v55 >> 4) - 1)));
            if (!(v56 | v53)) {
              goto LABEL_82;
            }
          }
          int v57 = 0;
          uint64_t v58 = 0;
          BOOL v59 = v53 != 0;
          BOOL v60 = v56 != 0;
          int v61 = 1;
          do
          {
            --v53;
            if (v59) {
              v58 |= (unint64_t)(v61 & v33) << v57++;
            }
            else {
              unsigned int v53 = 0;
            }
            --v56;
            if (v60) {
              v58 |= (unint64_t)(v61 & v17) << v57++;
            }
            else {
              unsigned int v56 = 0;
            }
            v61 *= 2;
            --v57;
            BOOL v60 = v56 != 0;
            BOOL v59 = v53 != 0;
          }
          while (v56 | v53);
LABEL_83:
          unsigned int v67 = v37 - a7;
          int v68 = v39 < 0x10 || v40;
          unsigned int v69 = (char *)(a4 + 8 * v58);
          uint64_t v70 = v238 + 2 * v67;
          uint64_t v71 = (int32x4_t *)(a2 + v50);
          if (v34 < 0x10) {
            int v72 = 1;
          }
          else {
            int v72 = v68;
          }
          if (v246)
          {
            if (v72)
            {
              int v73 = v71;
              int v74 = v38;
              BOOL v75 = v40;
              memcpy(v258, v71, sizeof(v258));
              BOOL v40 = v75;
              unsigned int v35 = 16 * v33;
              uint64_t v29 = a11;
              unsigned int v34 = v226;
              int v38 = v74;
              int16x8_t v76 = (int32x4_t *)v258;
              uint64_t v71 = v73;
              uint64_t v26 = v243;
LABEL_93:
              __dst = v71;
              block[0] = MEMORY[0x263EF8330];
              block[1] = 3221225472;
              block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE9ELj1ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
              block[3] = &__block_descriptor_90_e5_v8__0l;
              block[4] = v26;
              int32x4_t v248 = v76;
              unsigned __int8 v256 = v39;
              unsigned __int8 v257 = v34;
              unsigned int v252 = v227;
              unsigned int v253 = v37 - v35;
              int32x4_t v249 = v69;
              uint64_t v250 = v70;
              uint64_t v251 = v29;
              unsigned int v254 = v239;
              unsigned int v255 = v38;
              int32x4_t v242 = v76;
              if (v40)
              {
                dispatch_sync(*(dispatch_queue_t *)(*(void *)(v26 + 8) + 7384), block);
                int16x8_t v76 = v242;
                uint64_t v26 = v243;
                uint64_t result = 2 * a11;
                a7 = v233;
                uint64_t v30 = 4 * a11;
                goto LABEL_95;
              }
              unsigned int v93 = *v69;
              if (v93 == 63)
              {
                int32x4_t v96 = v76[1];
                int32x4_t v97 = v76[2];
                int32x4_t v98 = v76[3];
                int32x4_t v99 = vuzp2q_s32(*v76, v97);
                int32x4_t v259 = vuzp1q_s32(*v76, v97);
                int32x4_t v261 = v99;
                int32x4_t v263 = vuzp1q_s32(v96, v98);
                int32x4_t v265 = vuzp2q_s32(v96, v98);
                uint64_t v94 = 64;
              }
              else if (v93 == 1)
              {
                int16x8_t v95 = vld1q_dup_s16(v76->i16);
                int32x4_t v259 = (int32x4_t)v95;
                int32x4_t v261 = (int32x4_t)v95;
                int32x4_t v263 = (int32x4_t)v95;
                int32x4_t v265 = (int32x4_t)v95;
                uint64_t v94 = 2;
              }
              else if (*v69)
              {
                uint64_t v94 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v259, 32, (uint64_t)v76, v93);
                int16x8_t v76 = v242;
              }
              else
              {
                uint64_t v94 = 0;
                int32x4_t v259 = 0uLL;
                int32x4_t v261 = 0uLL;
                int32x4_t v263 = 0uLL;
                int32x4_t v265 = 0uLL;
              }
              uint64_t v100 = (uint64_t)v76->i64 + v94;
              unsigned int v101 = v69[1];
              if (v101 == 63)
              {
                int32x4_t v104 = *(int32x4_t *)(v100 + 16);
                int32x4_t v105 = *(int32x4_t *)(v100 + 32);
                int32x4_t v106 = *(int32x4_t *)(v100 + 48);
                int32x4_t v107 = vuzp2q_s32(*(int32x4_t *)v100, v105);
                int32x4_t v267 = vuzp1q_s32(*(int32x4_t *)v100, v105);
                int32x4_t v269 = v107;
                int32x4_t v271 = vuzp1q_s32(v104, v106);
                int32x4_t v273 = vuzp2q_s32(v104, v106);
                uint64_t v102 = 64;
              }
              else if (v101 == 1)
              {
                int16x8_t v103 = vld1q_dup_s16((const __int16 *)v100);
                int32x4_t v267 = (int32x4_t)v103;
                int32x4_t v269 = (int32x4_t)v103;
                int32x4_t v271 = (int32x4_t)v103;
                int32x4_t v273 = (int32x4_t)v103;
                uint64_t v102 = 2;
              }
              else if (v69[1])
              {
                uint64_t v102 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v267, 32, v100, v101);
              }
              else
              {
                uint64_t v102 = 0;
                int32x4_t v267 = 0uLL;
                int32x4_t v269 = 0uLL;
                int32x4_t v271 = 0uLL;
                int32x4_t v273 = 0uLL;
              }
              uint64_t v108 = v100 + v102;
              unsigned int v109 = v69[2];
              if (v109 == 63)
              {
                int32x4_t v112 = *(int32x4_t *)(v108 + 16);
                int32x4_t v113 = *(int32x4_t *)(v108 + 32);
                int32x4_t v114 = *(int32x4_t *)(v108 + 48);
                int32x4_t v115 = vuzp2q_s32(*(int32x4_t *)v108, v113);
                int32x4_t v260 = vuzp1q_s32(*(int32x4_t *)v108, v113);
                int32x4_t v262 = v115;
                int32x4_t v264 = vuzp1q_s32(v112, v114);
                int32x4_t v266 = vuzp2q_s32(v112, v114);
                uint64_t v110 = 64;
              }
              else if (v109 == 1)
              {
                int16x8_t v111 = vld1q_dup_s16((const __int16 *)v108);
                int32x4_t v260 = (int32x4_t)v111;
                int32x4_t v262 = (int32x4_t)v111;
                int32x4_t v264 = (int32x4_t)v111;
                int32x4_t v266 = (int32x4_t)v111;
                uint64_t v110 = 2;
              }
              else if (v69[2])
              {
                uint64_t v110 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v260, 32, v108, v109);
              }
              else
              {
                uint64_t v110 = 0;
                int32x4_t v260 = 0uLL;
                int32x4_t v262 = 0uLL;
                int32x4_t v264 = 0uLL;
                int32x4_t v266 = 0uLL;
              }
              uint64_t v116 = v108 + v110;
              unsigned int v117 = v69[3];
              if (v117 == 63)
              {
                int32x4_t v120 = *(int32x4_t *)(v116 + 16);
                int32x4_t v121 = *(int32x4_t *)(v116 + 32);
                int32x4_t v122 = *(int32x4_t *)(v116 + 48);
                int32x4_t v123 = vuzp2q_s32(*(int32x4_t *)v116, v121);
                int32x4_t v268 = vuzp1q_s32(*(int32x4_t *)v116, v121);
                int32x4_t v270 = v123;
                int32x4_t v272 = vuzp1q_s32(v120, v122);
                int32x4_t v274 = vuzp2q_s32(v120, v122);
                uint64_t v118 = 64;
              }
              else if (v117 == 1)
              {
                int16x8_t v119 = vld1q_dup_s16((const __int16 *)v116);
                int32x4_t v268 = (int32x4_t)v119;
                int32x4_t v270 = (int32x4_t)v119;
                int32x4_t v272 = (int32x4_t)v119;
                int32x4_t v274 = (int32x4_t)v119;
                uint64_t v118 = 2;
              }
              else if (v69[3])
              {
                uint64_t v118 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v268, 32, v116, v117);
              }
              else
              {
                uint64_t v118 = 0;
                int32x4_t v268 = 0uLL;
                int32x4_t v270 = 0uLL;
                int32x4_t v272 = 0uLL;
                int32x4_t v274 = 0uLL;
              }
              uint64_t v124 = v116 + v118;
              unsigned int v125 = v69[4];
              if (v125 == 63)
              {
                int32x4_t v128 = *(int32x4_t *)(v124 + 16);
                int32x4_t v129 = *(int32x4_t *)(v124 + 32);
                int32x4_t v130 = *(int32x4_t *)(v124 + 48);
                int32x4_t v131 = vuzp2q_s32(*(int32x4_t *)v124, v129);
                int32x4_t v275 = vuzp1q_s32(*(int32x4_t *)v124, v129);
                int32x4_t v277 = v131;
                int32x4_t v279 = vuzp1q_s32(v128, v130);
                int32x4_t v281 = vuzp2q_s32(v128, v130);
                uint64_t v126 = 64;
              }
              else if (v125 == 1)
              {
                int16x8_t v127 = vld1q_dup_s16((const __int16 *)v124);
                int32x4_t v275 = (int32x4_t)v127;
                int32x4_t v277 = (int32x4_t)v127;
                int32x4_t v279 = (int32x4_t)v127;
                int32x4_t v281 = (int32x4_t)v127;
                uint64_t v126 = 2;
              }
              else if (v69[4])
              {
                uint64_t v126 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v275, 32, v124, v125);
              }
              else
              {
                uint64_t v126 = 0;
                int32x4_t v275 = 0uLL;
                int32x4_t v277 = 0uLL;
                int32x4_t v279 = 0uLL;
                int32x4_t v281 = 0uLL;
              }
              uint64_t v132 = v124 + v126;
              unsigned int v133 = v69[5];
              if (v133 == 63)
              {
                int32x4_t v136 = *(int32x4_t *)(v132 + 16);
                int32x4_t v137 = *(int32x4_t *)(v132 + 32);
                int32x4_t v138 = *(int32x4_t *)(v132 + 48);
                int32x4_t v139 = vuzp2q_s32(*(int32x4_t *)v132, v137);
                int32x4_t v283 = vuzp1q_s32(*(int32x4_t *)v132, v137);
                int32x4_t v285 = v139;
                int32x4_t v287 = vuzp1q_s32(v136, v138);
                int32x4_t v289 = vuzp2q_s32(v136, v138);
                uint64_t v134 = 64;
              }
              else if (v133 == 1)
              {
                int16x8_t v135 = vld1q_dup_s16((const __int16 *)v132);
                int32x4_t v283 = (int32x4_t)v135;
                int32x4_t v285 = (int32x4_t)v135;
                int32x4_t v287 = (int32x4_t)v135;
                int32x4_t v289 = (int32x4_t)v135;
                uint64_t v134 = 2;
              }
              else if (v69[5])
              {
                uint64_t v134 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v283, 32, v132, v133);
              }
              else
              {
                uint64_t v134 = 0;
                int32x4_t v283 = 0uLL;
                int32x4_t v285 = 0uLL;
                int32x4_t v287 = 0uLL;
                int32x4_t v289 = 0uLL;
              }
              uint64_t v140 = v132 + v134;
              unsigned int v141 = v69[6];
              if (v141 == 63)
              {
                int32x4_t v144 = *(int32x4_t *)(v140 + 16);
                int32x4_t v145 = *(int32x4_t *)(v140 + 32);
                int32x4_t v146 = *(int32x4_t *)(v140 + 48);
                int32x4_t v147 = vuzp2q_s32(*(int32x4_t *)v140, v145);
                int32x4_t v276 = vuzp1q_s32(*(int32x4_t *)v140, v145);
                int32x4_t v278 = v147;
                int32x4_t v280 = vuzp1q_s32(v144, v146);
                int32x4_t v282 = vuzp2q_s32(v144, v146);
                uint64_t v142 = 64;
              }
              else if (v141 == 1)
              {
                int16x8_t v143 = vld1q_dup_s16((const __int16 *)v140);
                int32x4_t v276 = (int32x4_t)v143;
                int32x4_t v278 = (int32x4_t)v143;
                int32x4_t v280 = (int32x4_t)v143;
                int32x4_t v282 = (int32x4_t)v143;
                uint64_t v142 = 2;
              }
              else if (v69[6])
              {
                uint64_t v142 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v276, 32, v140, v141);
              }
              else
              {
                uint64_t v142 = 0;
                int32x4_t v276 = 0uLL;
                int32x4_t v278 = 0uLL;
                int32x4_t v280 = 0uLL;
                int32x4_t v282 = 0uLL;
              }
              uint64_t v148 = v140 + v142;
              unsigned int v149 = v69[7];
              if (v149 == 63)
              {
                int32x4_t v152 = *(int32x4_t *)(v148 + 16);
                int32x4_t v153 = *(int32x4_t *)(v148 + 32);
                int32x4_t v154 = *(int32x4_t *)(v148 + 48);
                int32x4_t v155 = vuzp2q_s32(*(int32x4_t *)v148, v153);
                int32x4_t v284 = vuzp1q_s32(*(int32x4_t *)v148, v153);
                int32x4_t v286 = v155;
                int32x4_t v288 = vuzp1q_s32(v152, v154);
                int32x4_t v290 = vuzp2q_s32(v152, v154);
                uint64_t v150 = v254;
                if (v254) {
                  goto LABEL_171;
                }
              }
              else
              {
                if (v149 != 1)
                {
                  if (v69[7])
                  {
                    AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v284, 32, v148, v149);
                    uint64_t v150 = v254;
                    if (!v254) {
                      goto LABEL_205;
                    }
                  }
                  else
                  {
                    int32x4_t v284 = 0uLL;
                    int32x4_t v286 = 0uLL;
                    int32x4_t v288 = 0uLL;
                    int32x4_t v290 = 0uLL;
                    uint64_t v150 = v254;
                    if (!v254) {
                      goto LABEL_205;
                    }
                  }
LABEL_171:
                  if (!v255) {
                    goto LABEL_205;
                  }
                  uint64_t v156 = 0;
                  uint64_t v157 = 32 * v252;
                  uint64_t v158 = 2 * v253;
                  int v159 = &v259.i8[v157 + v158];
                  uint64_t v160 = v250;
                  uint64_t v161 = v251;
                  unint64_t v162 = 2 * v255;
                  if (v162 <= 1) {
                    unint64_t v163 = 1;
                  }
                  else {
                    unint64_t v163 = 2 * v255;
                  }
                  uint64_t v164 = v157 + v158;
                  uint64_t v165 = &v259.i8[v157 + v158];
                  if (v163) {
                    BOOL v166 = (v163 - 1) >> 32 == 0;
                  }
                  else {
                    BOOL v166 = 0;
                  }
                  uint64_t v167 = v163 & 0x1FFFFFFE0;
                  uint64_t v168 = v163 & 0x1FFFFFFF8;
                  char v170 = !v166 || v163 < 8;
                  int v171 = &v260.i8[v164];
                  unsigned int v172 = (long long *)(v250 + 16);
                  unsigned int v173 = v159;
                  uint64_t v174 = v250;
                  while (2)
                  {
                    int v175 = (char *)(v160 + v161 * v156);
                    uint64_t v176 = &v159[32 * v156];
                    if ((unint64_t)(&v165[32 * v156] - v175) < 0x20) {
                      char v177 = 1;
                    }
                    else {
                      char v177 = v170;
                    }
                    if (v177)
                    {
                      int v178 = 0;
LABEL_202:
                      unsigned int v188 = v178 + 1;
                      do
                      {
                        char v189 = *v175++;
                        *v176++ = v189;
                      }
                      while (v162 > v188++);
                    }
                    else
                    {
                      if (v163 >= 0x20)
                      {
                        int v180 = v172;
                        unint64_t v181 = v171;
                        uint64_t v182 = v163 & 0x1FFFFFFE0;
                        do
                        {
                          long long v183 = *v180;
                          *((_OWORD *)v181 - 1) = *(v180 - 1);
                          *(_OWORD *)unint64_t v181 = v183;
                          v181 += 32;
                          v180 += 2;
                          v182 -= 32;
                        }
                        while (v182);
                        if (v163 == v167) {
                          goto LABEL_185;
                        }
                        uint64_t v179 = v163 & 0x1FFFFFFE0;
                        if ((v163 & 0x18) == 0)
                        {
                          v175 += v167;
                          v176 += v167;
                          int v178 = v163 & 0xFFFFFFE0;
                          goto LABEL_202;
                        }
                      }
                      else
                      {
                        uint64_t v179 = 0;
                      }
                      v176 += v168;
                      uint64_t v184 = v179 - v168;
                      unsigned int v185 = (uint64_t *)(v174 + v179);
                      unsigned int v186 = &v173[v179];
                      do
                      {
                        uint64_t v187 = *v185++;
                        *(void *)unsigned int v186 = v187;
                        v186 += 8;
                        v184 += 8;
                      }
                      while (v184);
                      if (v163 != v168)
                      {
                        v175 += v168;
                        int v178 = v163 & 0xFFFFFFF8;
                        goto LABEL_202;
                      }
                    }
LABEL_185:
                    ++v156;
                    v171 += 32;
                    unsigned int v172 = (long long *)((char *)v172 + v161);
                    v174 += v161;
                    v173 += 32;
                    if (v156 == v150) {
                      goto LABEL_205;
                    }
                    continue;
                  }
                }
                int16x8_t v151 = vld1q_dup_s16((const __int16 *)v148);
                int32x4_t v284 = (int32x4_t)v151;
                int32x4_t v286 = (int32x4_t)v151;
                int32x4_t v288 = (int32x4_t)v151;
                int32x4_t v290 = (int32x4_t)v151;
                uint64_t v150 = v254;
                if (v254) {
                  goto LABEL_171;
                }
              }
LABEL_205:
              uint64_t v191 = 0;
              int8x8_t v192 = v248;
              __int32 v193 = v249;
              int v194 = v256;
              int v195 = v257;
              a7 = v233;
              int16x8_t v76 = v242;
              uint64_t v26 = v243;
              uint64_t v30 = 4 * a11;
              uint64_t result = 2 * a11;
              do
              {
                uint64_t v204 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,1u>::kSubblockPositions[v191 + 1];
                uint64_t v205 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,1u>::kSubblockPositions[v191];
                unsigned int v206 = (v194 - 8 * v205) & ~((v194 - 8 * (int)v205) >> 31);
                if (v206 >= 8) {
                  unsigned int v206 = 8;
                }
                unsigned int v207 = (v195 - 4 * v204) & ~((v195 - 4 * (int)v204) >> 31);
                if (v207 >= 4) {
                  unsigned int v207 = 4;
                }
                if (v206) {
                  BOOL v208 = v207 == 0;
                }
                else {
                  BOOL v208 = 1;
                }
                if (v208)
                {
                  char v203 = 0;
                }
                else
                {
                  __int32 v196 = &v259 + 8 * v204 + v205;
                  float32x2x2_t v197 = (float32x2x2_t)*v196;
                  int32x4_t v198 = v196[2];
                  int32x4_t v199 = vzip2q_s32(*v196, v198);
                  float32x2x2_t v200 = (float32x2x2_t)v196[4];
                  int32x4_t v201 = v196[6];
                  uint64_t v202 = (float *)v192;
                  vst2_f32(v202, v197);
                  v202 += 4;
                  vst2_f32(v202, v200);
                  v192[2] = v199;
                  v192[3] = vzip2q_s32((int32x4_t)v200, v201);
                  v192 += 4;
                  char v203 = 63;
                }
                *v193++ = v203;
                v191 += 2;
              }
              while (v191 != 16);
LABEL_95:
              uint64_t v71 = __dst;
              if (v246) {
                goto LABEL_27;
              }
              goto LABEL_28;
            }
            int16x8_t v76 = (int32x4_t *)v258;
          }
          else
          {
            int16x8_t v76 = v71;
            if (v72) {
              goto LABEL_93;
            }
          }
          uint64_t v77 = 0;
          int32x4_t v78 = (float *)v76;
          do
          {
            uint64_t v88 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,1u>::kSubblockPositions[v77 + 1];
            uint64_t v89 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,1u>::kSubblockPositions[v77];
            unsigned int v90 = (v39 - 8 * v89) & ~((int)(v39 - 8 * v89) >> 31);
            if (v90 >= 8) {
              unsigned int v90 = 8;
            }
            unsigned int v91 = (v34 - 4 * v88) & ~((int)(v34 - 4 * v88) >> 31);
            if (v91 >= 4) {
              unsigned int v91 = 4;
            }
            if (v90) {
              BOOL v92 = v91 == 0;
            }
            else {
              BOOL v92 = 1;
            }
            if (v92)
            {
              char v87 = 0;
            }
            else
            {
              int32x4_t v79 = (float32x2x2_t *)(v70 + v30 * v88 + 16 * v89);
              float32x2x2_t v80 = *v79;
              int32x4_t v81 = *(int32x4_t *)((char *)v79 + v29);
              unsigned int v82 = (int32x4_t *)((char *)v79 + result);
              float32x2x2_t v83 = (float32x2x2_t)*v82;
              int32x4_t v84 = *(int32x4_t *)((char *)v82 + v29);
              int32x4_t v85 = vzip2q_s32(*v82, v84);
              int32x4_t v86 = v78;
              vst2_f32(v86, v80);
              v86 += 4;
              vst2_f32(v86, v83);
              *((int32x4_t *)v78 + 2) = vzip2q_s32((int32x4_t)v80, v81);
              *((int32x4_t *)v78 + 3) = v85;
              v78 += 16;
              char v87 = 63;
            }
            *v69++ = v87;
            v77 += 2;
          }
          while (v77 != 16);
          a7 = v233;
          if (v246)
          {
LABEL_27:
            memcpy(v71, v76, 0x200uLL);
            uint64_t result = 2 * a11;
            uint64_t v30 = 4 * a11;
            uint64_t v26 = v243;
          }
LABEL_28:
          BOOL v21 = v33++ == v234 >> 4;
        }
        while (!v21);
        BOOL v21 = v17++ == v225;
      }
      while (!v21);
    }
  }
  return result;
}

uint64_t AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, char a12)
{
  uint64_t v176 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v149 = a8;
  unsigned int v134 = a8 + a10 - 1;
  uint64_t v150 = a1;
  if (*(void *)(a1 + 168)) {
    int v17 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v17 = 0;
  }
  unsigned int v18 = a5 - 1;
  unsigned int v19 = a6 - 1;
  unsigned int v20 = a8 >> 4;
  unsigned int v133 = v134 >> 4;
  BOOL v21 = (v17 & 0xD00) == 0 || v17 == 768;
  int v22 = v17 & 0xE00;
  int v24 = !v21 && v22 != 1024;
  int v155 = v24;
  uint64_t result = a1;
  if (*(unsigned char *)(a1 + 232))
  {
    unsigned int v26 = *(unsigned __int8 *)(a1 + 255);
    unsigned int v27 = *(unsigned __int8 *)(a1 + 254);
    char v28 = __clz(v18);
    if (1 << v26 >= a6 || a5 >> v27)
    {
      if (!(a6 >> v26) && 1 << v27 < a5)
      {
        if (a6 < 2) {
          unsigned int v31 = 0;
        }
        else {
          unsigned int v31 = __clz(~(-1 << -(char)__clz(v19))) - 32;
        }
        v27 += v26 + v31;
        unsigned int v26 = -v31;
      }
    }
    else
    {
      unsigned int v29 = 32 - __clz(~(-1 << -v28));
      unsigned int v30 = v27 + v26;
      if (a5 < 2) {
        unsigned int v29 = 0;
      }
      unsigned int v26 = v30 - v29;
      unsigned int v27 = v29;
    }
    if (a5 < 2)
    {
      if (v27) {
        goto LABEL_27;
      }
    }
    else if (32 - __clz(~(-1 << -v28)) < v27)
    {
LABEL_27:
      BOOL v144 = 0;
LABEL_32:
      unsigned int v141 = v27 - 4;
      unsigned int v138 = v26 - 4;
      int v33 = -1 << *(unsigned char *)(*(void *)(a1 + 208) + 48);
      unsigned int v131 = (((~v33 + a5) & v33) + ~(-1 << v27)) >> v27;
      goto LABEL_33;
    }
    if (a6 < 2) {
      unsigned int v32 = 0;
    }
    else {
      unsigned int v32 = 32 - __clz(~(-1 << -(char)__clz(v19)));
    }
    BOOL v144 = v32 >= v26;
    goto LABEL_32;
  }
  BOOL v144 = 0;
  unsigned int v131 = 0;
  unsigned int v138 = 0;
  unsigned int v141 = 0;
LABEL_33:
  if (v20 <= v133)
  {
    unsigned int v143 = a7 + a9 - 1;
    unsigned int v130 = a7 >> 4;
    if (a7 >> 4 <= v143 >> 4)
    {
      unsigned int v153 = v18 >> 4;
      unsigned int v129 = v19 >> 4;
      int v152 = (v18 & 0xF) + 1;
      int v128 = (v19 & 0xF) + 1;
      uint32x2_t v34 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0xF0000000FLL);
      int8x8_t v35 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v34, 4uLL))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x2000000020, v34));
      __int32 v139 = v35.i32[0] | v35.i32[1];
      int8x8_t v137 = v35;
      BOOL v135 = v35.i32[0] != 0;
      BOOL v136 = v35.i32[1] != 0;
      unsigned int v142 = a7;
      do
      {
        unsigned int v36 = (16 * v20) | 0xF;
        if (16 * v20 <= v149) {
          int v37 = v149;
        }
        else {
          int v37 = 16 * v20;
        }
        if (v134 < v36) {
          unsigned int v36 = v134;
        }
        int v140 = v37 - 16 * v20;
        int v148 = v36 - v37 + 1;
        unsigned int v38 = v130;
        if (v20 == v129) {
          unsigned int v39 = v128;
        }
        else {
          unsigned int v39 = 16;
        }
        uint64_t v147 = a3 + (v37 - v149) * a11;
        unsigned int v151 = v39;
        do
        {
          unsigned int v40 = 16 * v38;
          unsigned int v41 = 16 * (v38 + 1) - 1;
          if (16 * v38 <= a7) {
            int v42 = a7;
          }
          else {
            int v42 = 16 * v38;
          }
          if (v143 < v41) {
            unsigned int v41 = v143;
          }
          int v43 = v41 - v42 + 1;
          if (v38 == v153) {
            unsigned int v44 = v152;
          }
          else {
            unsigned int v44 = 16;
          }
          BOOL v45 = 1;
          if (16 * v20 >= v149 && v40 >= a7)
          {
            int v46 = v152;
            if (v38 != v153) {
              int v46 = 16;
            }
            BOOL v45 = v43 != v46 || v148 != v39;
          }
          if (v144)
          {
            if (v141 | v138)
            {
              int v48 = 0;
              uint64_t v49 = 0;
              BOOL v50 = v138 != 0;
              int v51 = 1;
              BOOL v53 = v141 != 0;
              unsigned int v52 = v138;
              unsigned int v54 = v141;
              do
              {
                --v54;
                if (v53) {
                  v49 |= (unint64_t)(v38 & ~(-1 << v141) & v51) << v48++;
                }
                else {
                  unsigned int v54 = 0;
                }
                --v52;
                if (v50) {
                  v49 |= (unint64_t)(v20 & ~(-1 << v138) & v51) << v48++;
                }
                else {
                  unsigned int v52 = 0;
                }
                v51 *= 2;
                --v48;
                BOOL v50 = v52 != 0;
                BOOL v53 = v54 != 0;
              }
              while (v52 | v54);
            }
            else
            {
              uint64_t v49 = 0;
            }
            uint64_t v62 = *(void *)(result + 320) * ((v38 >> v141) + (v20 >> v138) * v131) + (v49 << 10);
          }
          else
          {
            if (v139)
            {
              int v55 = 0;
              uint64_t v56 = 0;
              int v57 = 1;
              BOOL v58 = v135;
              BOOL v59 = v136;
              __int32 v61 = v137.i32[0];
              __int32 v60 = v137.i32[1];
              do
              {
                --v60;
                if (v59) {
                  v56 |= (unint64_t)(v57 & v38) << v55++;
                }
                else {
                  __int32 v60 = 0;
                }
                --v61;
                if (v58) {
                  v56 |= (unint64_t)(v57 & v20) << v55++;
                }
                else {
                  __int32 v61 = 0;
                }
                v57 *= 2;
                --v55;
                BOOL v58 = v61 != 0;
                BOOL v59 = v60 != 0;
              }
              while (v61 | v60);
            }
            else
            {
              uint64_t v56 = 0;
            }
            uint64_t v62 = v56 << 10;
          }
          unsigned int v63 = *(_DWORD *)(result + 128) >> (*(unsigned char *)(result + 144) + a12);
          if (v63 <= 1) {
            unsigned int v63 = 1;
          }
          unsigned int v64 = v63 + 15;
          if (v64 < 0x20) {
            unsigned int v65 = 0;
          }
          else {
            unsigned int v65 = 32 - __clz(~(-1 << -(char)__clz((v64 >> 4) - 1)));
          }
          unsigned int v66 = *(_DWORD *)(result + 132) >> (*(unsigned char *)(result + 144) + a12);
          if (v66 <= 1) {
            unsigned int v66 = 1;
          }
          unsigned int v67 = v66 + 15;
          if (v67 < 0x20) {
            unsigned int v68 = 0;
          }
          else {
            unsigned int v68 = 32 - __clz(~(-1 << -(char)__clz((v67 >> 4) - 1)));
          }
          if (v68 | v65)
          {
            int v69 = 0;
            uint64_t v70 = 0;
            BOOL v71 = v65 != 0;
            BOOL v72 = v68 != 0;
            int v73 = 1;
            do
            {
              --v65;
              if (v71) {
                v70 |= (unint64_t)(v73 & v38) << v69++;
              }
              else {
                unsigned int v65 = 0;
              }
              --v68;
              if (v72) {
                v70 |= (unint64_t)(v73 & v20) << v69++;
              }
              else {
                unsigned int v68 = 0;
              }
              v73 *= 2;
              --v69;
              BOOL v72 = v68 != 0;
              BOOL v71 = v65 != 0;
            }
            while (v68 | v65);
          }
          else
          {
            uint64_t v70 = 0;
          }
          int v75 = v44 < 0x10 || v45;
          int16x8_t v76 = (unsigned __int8 *)(a4 + 8 * v70);
          unsigned int v74 = v42 - a7;
          uint64_t v77 = v147 + 4 * (v42 - a7);
          int32x4_t v78 = (int64x2_t *)(a2 + v62);
          if (v39 < 0x10) {
            int v79 = 1;
          }
          else {
            int v79 = v75;
          }
          __src = v78;
          if (v155)
          {
            if (!v79)
            {
              int32x4_t v78 = (int64x2_t *)__dst;
LABEL_123:
              int32x4_t v81 = (int64x2_t *)(v147 + 4 * v74);
              uint64_t v82 = a11;
              unint64_t v83 = (unint64_t)v78;
              int32x4_t v84 = (char *)(a4 + 8 * v70);
              goto LABEL_160;
            }
            char v80 = v44;
            memcpy(__dst, __src, sizeof(__dst));
            LOBYTE(v44) = v80;
            int32x4_t v78 = (int64x2_t *)__dst;
            LOBYTE(v39) = v151;
            uint64_t result = v150;
          }
          else if (!v79)
          {
            goto LABEL_123;
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE12ELj1ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = result;
          uint64_t v157 = v78;
          unsigned __int8 v165 = v44;
          unsigned __int8 v166 = v39;
          unsigned int v161 = v140;
          unsigned int v162 = v42 - v40;
          uint64_t v158 = v76;
          uint64_t v159 = v77;
          uint64_t v160 = a11;
          unsigned int v163 = v148;
          unsigned int v164 = v43;
          if (v45)
          {
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(result + 8) + 7384), block);
            goto LABEL_161;
          }
          int32x4_t v85 = (int64x2_t *)((char *)v78
                            + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v168, 64, v78, *v76));
          int32x4_t v86 = (int64x2_t *)((char *)v85
                            + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v170, 64, v85, v76[1]));
          char v87 = (int64x2_t *)((char *)v86
                            + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v169, 64, v86, v76[2]));
          uint64_t v88 = (int64x2_t *)((char *)v87
                            + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v171, 64, v87, v76[3]));
          uint64_t v89 = (int64x2_t *)((char *)v88
                            + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v172, 64, v88, v76[4]));
          unsigned int v90 = (int64x2_t *)((char *)v89
                            + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v174, 64, v89, v76[5]));
          uint64_t v91 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v173, 64, v90, v76[6]);
          AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v175, 64, (int64x2_t *)((char *)v90 + v91), v76[7]);
          uint64_t v92 = v163;
          if (v163 && v164)
          {
            uint64_t v93 = 0;
            unint64_t v94 = (unint64_t)v161 << 6;
            uint64_t v95 = 4 * v162;
            int32x4_t v96 = &v168[0].i8[v94 + v95];
            uint64_t v97 = v159;
            uint64_t v98 = v160;
            unint64_t v99 = 4 * v164;
            if (v99 <= 1) {
              unint64_t v100 = 1;
            }
            else {
              unint64_t v100 = 4 * v164;
            }
            unint64_t v101 = v94 + v95;
            uint64_t v102 = &v168[0].i8[v94 + v95];
            if (v100) {
              BOOL v103 = (v100 - 1) >> 32 == 0;
            }
            else {
              BOOL v103 = 0;
            }
            uint64_t v104 = v100 & 0x3FFFFFFE0;
            uint64_t v105 = v100 & 0x3FFFFFFF8;
            char v107 = !v103 || v100 < 8;
            uint64_t v108 = &v168[1].i8[v101];
            unsigned int v109 = (long long *)(v159 + 16);
            uint64_t v110 = v96;
            uint64_t v111 = v159;
            do
            {
              int32x4_t v112 = (char *)(v97 + v98 * v93);
              int32x4_t v113 = &v96[64 * v93];
              if ((unint64_t)(&v102[64 * v93] - v112) < 0x20) {
                char v114 = 1;
              }
              else {
                char v114 = v107;
              }
              if (v114)
              {
                int v115 = 0;
                goto LABEL_156;
              }
              if (v100 >= 0x20)
              {
                unsigned int v117 = v109;
                uint64_t v118 = v108;
                uint64_t v119 = v100 & 0x3FFFFFFE0;
                do
                {
                  long long v120 = *v117;
                  *((_OWORD *)v118 - 1) = *(v117 - 1);
                  *(_OWORD *)uint64_t v118 = v120;
                  v118 += 32;
                  v117 += 2;
                  v119 -= 32;
                }
                while (v119);
                if (v100 == v104) {
                  goto LABEL_139;
                }
                uint64_t v116 = v100 & 0x3FFFFFFE0;
                if ((v100 & 0x18) == 0)
                {
                  v112 += v104;
                  v113 += v104;
                  int v115 = v100 & 0xFFFFFFE0;
                  goto LABEL_156;
                }
              }
              else
              {
                uint64_t v116 = 0;
              }
              v113 += v105;
              uint64_t v121 = v116 - v105;
              int32x4_t v122 = (uint64_t *)(v111 + v116);
              int32x4_t v123 = &v110[v116];
              do
              {
                uint64_t v124 = *v122++;
                *(void *)int32x4_t v123 = v124;
                v123 += 8;
                v121 += 8;
              }
              while (v121);
              if (v100 == v105) {
                goto LABEL_139;
              }
              v112 += v105;
              int v115 = v100 & 0xFFFFFFF8;
LABEL_156:
              unsigned int v125 = v115 + 1;
              do
              {
                char v126 = *v112++;
                *v113++ = v126;
              }
              while (v99 > v125++);
LABEL_139:
              ++v93;
              v108 += 64;
              unsigned int v109 = (long long *)((char *)v109 + v98);
              v111 += v98;
              v110 += 64;
            }
            while (v93 != v92);
          }
          unint64_t v83 = (unint64_t)v157;
          int32x4_t v84 = (char *)v158;
          unsigned int v44 = v165;
          unsigned int v39 = v166;
          int32x4_t v81 = v168;
          uint64_t v82 = 64;
LABEL_160:
          AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v81, v82, v83, v84, v44, v39);
LABEL_161:
          a7 = v142;
          if (v155) {
            memcpy(__src, v78, 0x400uLL);
          }
          BOOL v21 = v38++ == v143 >> 4;
          uint64_t result = v150;
          unsigned int v39 = v151;
        }
        while (!v21);
        BOOL v21 = v20++ == v133;
      }
      while (!v21);
    }
  }
  return result;
}

uint64_t AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, char a12)
{
  uint64_t v230 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v205 = a8;
  unsigned int v187 = a8 + a10 - 1;
  uint64_t v206 = a1;
  if (*(void *)(a1 + 168)) {
    int v17 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v17 = 0;
  }
  unsigned int v18 = a5 - 1;
  unsigned int v19 = a6 - 1;
  unsigned int v20 = a8 >> 4;
  unsigned int v186 = v187 >> 4;
  BOOL v21 = (v17 & 0xD00) == 0 || v17 == 768;
  int v22 = v17 & 0xE00;
  int v24 = !v21 && v22 != 1024;
  int v209 = v24;
  uint64_t result = a1;
  if (*(unsigned char *)(a1 + 232))
  {
    unsigned int v26 = *(unsigned __int8 *)(a1 + 255);
    unsigned int v27 = *(unsigned __int8 *)(a1 + 254);
    char v28 = __clz(v18);
    if (1 << v26 >= a6 || a5 >> v27)
    {
      if (!(a6 >> v26) && 1 << v27 < a5)
      {
        if (a6 < 2) {
          unsigned int v31 = 0;
        }
        else {
          unsigned int v31 = __clz(~(-1 << -(char)__clz(v19))) - 32;
        }
        v27 += v26 + v31;
        unsigned int v26 = -v31;
      }
    }
    else
    {
      unsigned int v29 = 32 - __clz(~(-1 << -v28));
      unsigned int v30 = v27 + v26;
      if (a5 < 2) {
        unsigned int v29 = 0;
      }
      unsigned int v26 = v30 - v29;
      unsigned int v27 = v29;
    }
    if (a5 < 2)
    {
      if (v27) {
        goto LABEL_27;
      }
    }
    else if (32 - __clz(~(-1 << -v28)) < v27)
    {
LABEL_27:
      BOOL v200 = 0;
LABEL_32:
      unsigned int v196 = v27 - 4;
      unsigned int v191 = v26 - 4;
      int v33 = -1 << *(unsigned char *)(*(void *)(a1 + 208) + 48);
      unsigned int v184 = (((~v33 + a5) & v33) + ~(-1 << v27)) >> v27;
      goto LABEL_33;
    }
    if (a6 < 2) {
      unsigned int v32 = 0;
    }
    else {
      unsigned int v32 = 32 - __clz(~(-1 << -(char)__clz(v19)));
    }
    BOOL v200 = v32 >= v26;
    goto LABEL_32;
  }
  BOOL v200 = 0;
  unsigned int v184 = 0;
  unsigned int v191 = 0;
  unsigned int v196 = 0;
LABEL_33:
  if (v20 <= v186)
  {
    unsigned int v199 = a7 + a9 - 1;
    unsigned int v183 = a7 >> 4;
    if (a7 >> 4 <= v199 >> 4)
    {
      unsigned int v208 = v18 >> 4;
      unsigned int v182 = v19 >> 4;
      int v207 = (v18 & 0xF) + 1;
      int v181 = (v19 & 0xF) + 1;
      int v180 = ~(-1 << v191);
      uint32x2_t v34 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0xF0000000FLL);
      int8x8_t v35 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v34, 4uLL))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x2000000020, v34));
      __int32 v194 = v35.i32[0] | v35.i32[1];
      int8x8_t v190 = v35;
      BOOL v188 = v35.i32[0] != 0;
      BOOL v189 = v35.i32[1] != 0;
      uint64_t v36 = a11;
      uint64_t v37 = 4 * a11;
      uint64_t v38 = 2 * a11;
      unsigned int v198 = a7;
      do
      {
        unsigned int v39 = (16 * v20) | 0xF;
        if (16 * v20 <= v205) {
          int v40 = v205;
        }
        else {
          int v40 = 16 * v20;
        }
        if (v187 < v39) {
          unsigned int v39 = v187;
        }
        int v195 = v40 - 16 * v20;
        int v204 = v39 - v40 + 1;
        unsigned int v41 = v183;
        if (v20 == v182) {
          unsigned int v42 = v181;
        }
        else {
          unsigned int v42 = 16;
        }
        int v43 = v20 & v180;
        uint64_t v203 = a3 + (v40 - v205) * v36;
        do
        {
          unsigned int v44 = 16 * v41;
          unsigned int v45 = 16 * (v41 + 1) - 1;
          if (16 * v41 <= a7) {
            int v46 = a7;
          }
          else {
            int v46 = 16 * v41;
          }
          if (v199 < v45) {
            unsigned int v45 = v199;
          }
          int v47 = v45 - v46 + 1;
          if (v41 == v208) {
            unsigned int v48 = v207;
          }
          else {
            unsigned int v48 = 16;
          }
          BOOL v49 = 1;
          if (16 * v20 >= v205 && v44 >= a7)
          {
            int v50 = v207;
            if (v41 != v208) {
              int v50 = 16;
            }
            BOOL v49 = v47 != v50 || v204 != v42;
          }
          if (v200)
          {
            if (v196 | v191)
            {
              int v52 = 0;
              uint64_t v53 = 0;
              BOOL v54 = v191 != 0;
              int v55 = 1;
              BOOL v57 = v196 != 0;
              unsigned int v56 = v191;
              unsigned int v58 = v196;
              do
              {
                --v58;
                if (v57) {
                  v53 |= (unint64_t)(v41 & ~(-1 << v196) & v55) << v52++;
                }
                else {
                  unsigned int v58 = 0;
                }
                --v56;
                if (v54) {
                  v53 |= (unint64_t)(v43 & v55) << v52++;
                }
                else {
                  unsigned int v56 = 0;
                }
                v55 *= 2;
                --v52;
                BOOL v54 = v56 != 0;
                BOOL v57 = v58 != 0;
              }
              while (v56 | v58);
            }
            else
            {
              uint64_t v53 = 0;
            }
            uint64_t v66 = *(void *)(result + 320) * ((v41 >> v196) + (v20 >> v191) * v184) + (v53 << 10);
          }
          else
          {
            if (v194)
            {
              int v59 = 0;
              uint64_t v60 = 0;
              int v61 = 1;
              BOOL v62 = v188;
              BOOL v63 = v189;
              __int32 v65 = v190.i32[0];
              __int32 v64 = v190.i32[1];
              do
              {
                --v64;
                if (v63) {
                  v60 |= (unint64_t)(v61 & v41) << v59++;
                }
                else {
                  __int32 v64 = 0;
                }
                --v65;
                if (v62) {
                  v60 |= (unint64_t)(v61 & v20) << v59++;
                }
                else {
                  __int32 v65 = 0;
                }
                v61 *= 2;
                --v59;
                BOOL v62 = v65 != 0;
                BOOL v63 = v64 != 0;
              }
              while (v65 | v64);
            }
            else
            {
              uint64_t v60 = 0;
            }
            uint64_t v66 = v60 << 10;
          }
          unsigned int v67 = *(_DWORD *)(result + 128) >> (*(unsigned char *)(result + 144) + a12);
          if (v67 <= 1) {
            unsigned int v67 = 1;
          }
          unsigned int v68 = v67 + 15;
          if (v68 < 0x20) {
            unsigned int v69 = 0;
          }
          else {
            unsigned int v69 = 32 - __clz(~(-1 << -(char)__clz((v68 >> 4) - 1)));
          }
          unsigned int v70 = *(_DWORD *)(result + 132) >> (*(unsigned char *)(result + 144) + a12);
          if (v70 <= 1) {
            unsigned int v70 = 1;
          }
          unsigned int v71 = v70 + 15;
          if (v71 < 0x20)
          {
            unsigned int v72 = 0;
            if (!v69)
            {
LABEL_111:
              uint64_t v74 = 0;
              goto LABEL_112;
            }
          }
          else
          {
            unsigned int v72 = 32 - __clz(~(-1 << -(char)__clz((v71 >> 4) - 1)));
            if (!(v72 | v69)) {
              goto LABEL_111;
            }
          }
          int v73 = 0;
          uint64_t v74 = 0;
          BOOL v75 = v69 != 0;
          BOOL v76 = v72 != 0;
          int v77 = 1;
          do
          {
            --v69;
            if (v75) {
              v74 |= (unint64_t)(v77 & v41) << v73++;
            }
            else {
              unsigned int v69 = 0;
            }
            --v72;
            if (v76) {
              v74 |= (unint64_t)(v77 & v20) << v73++;
            }
            else {
              unsigned int v72 = 0;
            }
            v77 *= 2;
            --v73;
            BOOL v76 = v72 != 0;
            BOOL v75 = v69 != 0;
          }
          while (v72 | v69);
LABEL_112:
          int v78 = v48 < 0x10 || v49;
          int v79 = (unsigned __int8 *)(a4 + 8 * v74);
          uint64_t v80 = v203 + 4 * (v46 - a7);
          int32x4_t v81 = (int64x2_t *)(a2 + v66);
          if (v42 < 0x10) {
            int v82 = 1;
          }
          else {
            int v82 = v78;
          }
          if (v209)
          {
            if (v82)
            {
              unint64_t v83 = v81;
              int v84 = v47;
              BOOL v85 = v49;
              int v192 = v46;
              memcpy(__dst, v81, sizeof(__dst));
              int v46 = v192;
              BOOL v49 = v85;
              unsigned int v44 = 16 * v41;
              uint64_t v36 = a11;
              int v47 = v84;
              int32x4_t v86 = (int64x2_t *)__dst;
              int32x4_t v81 = v83;
              uint64_t result = v206;
LABEL_122:
              float32x2x2_t v197 = v81;
              block[0] = MEMORY[0x263EF8330];
              block[1] = 3221225472;
              block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE12ELj1ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
              block[3] = &__block_descriptor_90_e5_v8__0l;
              block[4] = result;
              unsigned int v211 = v86;
              unsigned __int8 v219 = v48;
              unsigned __int8 v220 = v42;
              unsigned int v215 = v195;
              unsigned int v216 = v46 - v44;
              int v212 = v79;
              uint64_t v213 = v80;
              uint64_t v214 = v36;
              unsigned int v217 = v204;
              unsigned int v218 = v47;
              if (v49)
              {
                char v87 = v86;
                dispatch_sync(*(dispatch_queue_t *)(*(void *)(result + 8) + 7384), block);
                int32x4_t v86 = v87;
                uint64_t result = v206;
                a7 = v198;
                uint64_t v38 = 2 * a11;
                uint64_t v37 = 4 * a11;
                int v43 = v20 & v180;
                unsigned int v88 = v41 + 1;
                goto LABEL_187;
              }
              __int32 v193 = v86;
              int32x4_t v113 = (int64x2_t *)((char *)v86
                                 + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v222, 64, v86, *v79));
              char v114 = (int64x2_t *)((char *)v113
                                 + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v224, 64, v113, v79[1]));
              int v115 = (int64x2_t *)((char *)v114
                                 + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v223, 64, v114, v79[2]));
              uint64_t v116 = (int64x2_t *)((char *)v115
                                 + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v225, 64, v115, v79[3]));
              unsigned int v117 = (int64x2_t *)((char *)v116
                                 + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v226, 64, v116, v79[4]));
              uint64_t v118 = (int64x2_t *)((char *)v117
                                 + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v228, 64, v117, v79[5]));
              uint64_t v119 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v227, 64, v118, v79[6]);
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v229, 64, (int64x2_t *)((char *)v118 + v119), v79[7]);
              uint64_t v120 = v217;
              if (!v217 || !v218)
              {
LABEL_174:
                uint64_t v156 = 0;
                uint64_t v157 = v211;
                uint64_t v158 = (char *)v212;
                int v159 = v219;
                int v160 = v220;
                a7 = v198;
                uint64_t result = v206;
                uint64_t v38 = 2 * a11;
                int v43 = v20 & v180;
                unsigned int v88 = v41 + 1;
                int32x4_t v86 = v193;
                do
                {
                  uint64_t v175 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,1u>::kSubblockPositions[v156 + 1];
                  uint64_t v176 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,1u>::kSubblockPositions[v156];
                  unsigned int v177 = (v159 - 8 * v176) & ~((v159 - 8 * (int)v176) >> 31);
                  if (v177 >= 8) {
                    unsigned int v177 = 8;
                  }
                  unsigned int v178 = (v160 - 4 * v175) & ~((v160 - 4 * (int)v175) >> 31);
                  if (v178 >= 4) {
                    unsigned int v178 = 4;
                  }
                  if (v177) {
                    BOOL v179 = v178 == 0;
                  }
                  else {
                    BOOL v179 = 1;
                  }
                  if (v179)
                  {
                    char v174 = 0;
                  }
                  else
                  {
                    unsigned int v161 = &v222[16 * v175 + 2 * v176];
                    int64x2_t v162 = v161[1];
                    int64x2_t v163 = v161[4];
                    int64x2_t v164 = v161[5];
                    int64x2_t v165 = vzip1q_s64(*v161, v163);
                    int64x2_t v166 = vzip2q_s64(*v161, v163);
                    int64x2_t v167 = vzip1q_s64(v162, v164);
                    int64x2_t v168 = vzip2q_s64(v162, v164);
                    int64x2_t v169 = v161[8];
                    int64x2_t v170 = v161[9];
                    v161 += 12;
                    int64x2_t v171 = v161[1];
                    int64x2_t v172 = vzip1q_s64(v169, *v161);
                    int64x2_t v173 = vzip2q_s64(v169, *v161);
                    *uint64_t v157 = v165;
                    v157[1] = v166;
                    v157[2] = v172;
                    v157[3] = v173;
                    v157[4] = v167;
                    v157[5] = v168;
                    v157[6] = vzip1q_s64(v170, v171);
                    v157[7] = vzip2q_s64(v170, v171);
                    v157 += 8;
                    char v174 = 127;
                  }
                  *v158++ = v174;
                  v156 += 2;
                }
                while (v156 != 16);
                uint64_t v37 = 4 * a11;
LABEL_187:
                int32x4_t v81 = v197;
                if (v209) {
                  goto LABEL_47;
                }
                goto LABEL_48;
              }
              uint64_t v121 = 0;
              unint64_t v122 = (unint64_t)v215 << 6;
              uint64_t v123 = 4 * v216;
              uint64_t v124 = &v222[0].i8[v122 + v123];
              uint64_t v125 = v213;
              uint64_t v126 = v214;
              unint64_t v127 = 4 * v218;
              if (v127 <= 1) {
                unint64_t v128 = 1;
              }
              else {
                unint64_t v128 = 4 * v218;
              }
              unint64_t v129 = v122 + v123;
              unsigned int v130 = &v222[0].i8[v122 + v123];
              if (v128) {
                BOOL v131 = (v128 - 1) >> 32 == 0;
              }
              else {
                BOOL v131 = 0;
              }
              uint64_t v132 = v128 & 0x3FFFFFFE0;
              uint64_t v133 = v128 & 0x3FFFFFFF8;
              char v135 = !v131 || v128 < 8;
              BOOL v136 = &v222[1].i8[v129];
              int8x8_t v137 = (long long *)(v213 + 16);
              unsigned int v138 = v124;
              uint64_t v139 = v213;
              while (2)
              {
                int v140 = (char *)(v125 + v126 * v121);
                unsigned int v141 = &v124[64 * v121];
                if ((unint64_t)(&v130[64 * v121] - v140) < 0x20) {
                  char v142 = 1;
                }
                else {
                  char v142 = v135;
                }
                if (v142)
                {
                  int v143 = 0;
LABEL_171:
                  unsigned int v153 = v143 + 1;
                  do
                  {
                    char v154 = *v140++;
                    *v141++ = v154;
                  }
                  while (v127 > v153++);
                }
                else
                {
                  if (v128 >= 0x20)
                  {
                    int32x4_t v145 = v137;
                    int32x4_t v146 = v136;
                    uint64_t v147 = v128 & 0x3FFFFFFE0;
                    do
                    {
                      long long v148 = *v145;
                      *((_OWORD *)v146 - 1) = *(v145 - 1);
                      *(_OWORD *)int32x4_t v146 = v148;
                      v146 += 32;
                      v145 += 2;
                      v147 -= 32;
                    }
                    while (v147);
                    if (v128 == v132) {
                      goto LABEL_154;
                    }
                    uint64_t v144 = v128 & 0x3FFFFFFE0;
                    if ((v128 & 0x18) == 0)
                    {
                      v140 += v132;
                      v141 += v132;
                      int v143 = v128 & 0xFFFFFFE0;
                      goto LABEL_171;
                    }
                  }
                  else
                  {
                    uint64_t v144 = 0;
                  }
                  v141 += v133;
                  uint64_t v149 = v144 - v133;
                  uint64_t v150 = (uint64_t *)(v139 + v144);
                  unsigned int v151 = &v138[v144];
                  do
                  {
                    uint64_t v152 = *v150++;
                    *(void *)unsigned int v151 = v152;
                    v151 += 8;
                    v149 += 8;
                  }
                  while (v149);
                  if (v128 != v133)
                  {
                    v140 += v133;
                    int v143 = v128 & 0xFFFFFFF8;
                    goto LABEL_171;
                  }
                }
LABEL_154:
                ++v121;
                v136 += 64;
                int8x8_t v137 = (long long *)((char *)v137 + v126);
                v139 += v126;
                v138 += 64;
                if (v121 == v120) {
                  goto LABEL_174;
                }
                continue;
              }
            }
            int32x4_t v86 = (int64x2_t *)__dst;
          }
          else
          {
            int32x4_t v86 = v81;
            if (v82) {
              goto LABEL_122;
            }
          }
          uint64_t v89 = 0;
          unsigned int v90 = v86;
          do
          {
            uint64_t v108 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,1u>::kSubblockPositions[v89 + 1];
            uint64_t v109 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,1u>::kSubblockPositions[v89];
            unsigned int v110 = (v48 - 8 * v109) & ~((int)(v48 - 8 * v109) >> 31);
            if (v110 >= 8) {
              unsigned int v110 = 8;
            }
            unsigned int v111 = (v42 - 4 * v108) & ~((int)(v42 - 4 * v108) >> 31);
            if (v111 >= 4) {
              unsigned int v111 = 4;
            }
            if (v110) {
              BOOL v112 = v111 == 0;
            }
            else {
              BOOL v112 = 1;
            }
            if (v112)
            {
              char v107 = 0;
            }
            else
            {
              uint64_t v91 = (int64x2_t *)(v80 + v37 * v108 + 32 * v109);
              uint64_t v92 = (int64x2_t *)((char *)v91 + v36);
              int64x2_t v94 = *v91;
              int64x2_t v95 = v91[1];
              uint64_t v93 = (int64x2_t *)((char *)v91 + v38);
              int64x2_t v96 = v92[1];
              int64x2_t v97 = vzip1q_s64(v94, *v92);
              int64x2_t v98 = vzip2q_s64(v94, *v92);
              int64x2_t v99 = vzip1q_s64(v95, v96);
              int64x2_t v100 = vzip2q_s64(v95, v96);
              int64x2_t v102 = *v93;
              int64x2_t v103 = v93[1];
              unint64_t v101 = (int64x2_t *)((char *)v93 + v36);
              int64x2_t v104 = v101[1];
              int64x2_t v105 = vzip1q_s64(v102, *v101);
              int64x2_t v106 = vzip2q_s64(v102, *v101);
              *unsigned int v90 = v97;
              v90[1] = v98;
              v90[2] = v105;
              v90[3] = v106;
              v90[4] = v99;
              v90[5] = v100;
              v90[6] = vzip1q_s64(v103, v104);
              v90[7] = vzip2q_s64(v103, v104);
              v90 += 8;
              char v107 = 127;
            }
            *v79++ = v107;
            v89 += 2;
          }
          while (v89 != 16);
          a7 = v198;
          int v43 = v20 & v180;
          unsigned int v88 = v41 + 1;
          if (v209)
          {
LABEL_47:
            memcpy(v81, v86, 0x400uLL);
            uint64_t v38 = 2 * a11;
            uint64_t v37 = 4 * a11;
            uint64_t result = v206;
          }
LABEL_48:
          BOOL v21 = v41 == v199 >> 4;
          unsigned int v41 = v88;
        }
        while (!v21);
        BOOL v21 = v20++ == v186;
      }
      while (!v21);
    }
  }
  return result;
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, int a12)
{
  uint64_t v175 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  uint64_t v17 = a1;
  unsigned int v149 = a8;
  unsigned int v18 = a8 >> 4;
  unsigned int v133 = a8 + a10 - 1;
  unsigned int v135 = v133 >> 4;
  unsigned int v19 = *(unsigned __int8 *)(*(void *)(a1 + 208) + 88);
  unsigned int v20 = *(_DWORD *)(a1 + 112);
  uint64_t v150 = v17;
  if (*(void *)(v17 + 168))
  {
    __int16 CacheMode = IOSurfaceGetCacheMode();
    uint64_t v17 = v150;
    int v22 = CacheMode & 0xF00;
  }
  else
  {
    int v22 = 0;
  }
  BOOL v23 = (v22 & 0xD00) == 0 || v22 == 768;
  int v24 = v22 & 0xE00;
  int v26 = !v23 && v24 != 1024;
  int v154 = v26;
  BOOL isLevelTiled = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::isLevelTiled(v17, *(_DWORD *)(v17 + 144) + a12);
  uint64_t v28 = v150;
  BOOL v143 = isLevelTiled;
  if (v18 <= v135)
  {
    unsigned int v142 = a7 + a9 - 1;
    unsigned int v132 = a7 >> 4;
    if (a7 >> 4 <= v142 >> 4)
    {
      unsigned int v129 = a5 - 1;
      unsigned int v131 = (a6 - 1) >> 4;
      int v152 = ((a5 - 1) & 0xF) + 1;
      unsigned int v153 = (a5 - 1) >> 4;
      int v130 = ((a6 - 1) & 0xF) + 1;
      uint32x2_t v29 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0xF0000000FLL);
      int8x8_t v30 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v29, 4uLL))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x2000000020, v29));
      __int32 v140 = v30.i32[0] | v30.i32[1];
      int8x8_t v139 = v30;
      BOOL v137 = v30.i32[0] != 0;
      BOOL v138 = v30.i32[1] != 0;
      unint64_t v128 = 8 * v20 * (unint64_t)v19;
      unsigned int v141 = a7;
      do
      {
        unsigned int v31 = (16 * v18) | 0xF;
        if (16 * v18 <= v149) {
          int v32 = v149;
        }
        else {
          int v32 = 16 * v18;
        }
        unsigned int v33 = v132;
        if (v133 < v31) {
          unsigned int v31 = v133;
        }
        int v136 = v32 - 16 * v18;
        int v147 = v31 - v32 + 1;
        unsigned int v148 = 16 * v18;
        if (v18 == v131) {
          unsigned int v34 = v130;
        }
        else {
          unsigned int v34 = 16;
        }
        uint64_t v146 = a3 + (v32 - v149) * a11;
        unsigned int v151 = v34;
        do
        {
          unsigned int v35 = 16 * v33;
          unsigned int v36 = 16 * (v33 + 1) - 1;
          if (16 * v33 <= a7) {
            int v37 = a7;
          }
          else {
            int v37 = 16 * v33;
          }
          if (v142 < v36) {
            unsigned int v36 = v142;
          }
          int v38 = v36 - v37 + 1;
          if (v33 == v153) {
            unsigned int v39 = v152;
          }
          else {
            unsigned int v39 = 16;
          }
          BOOL v40 = 1;
          if (v148 >= v149 && v35 >= a7)
          {
            int v41 = v152;
            if (v33 != v153) {
              int v41 = 16;
            }
            BOOL v40 = v38 != v41 || v147 != v34;
          }
          if (v143)
          {
            unsigned int v62 = 0;
            uint64_t v63 = v128 >> (*(unsigned char *)(v28 + 57) != 0);
            char v64 = 1;
            if (v63 > 127)
            {
              if (v63 > 511)
              {
                if (v63 == 512)
                {
                  unsigned int v62 = 16;
                  char v65 = 1;
                  unsigned int v66 = 16;
                }
                else
                {
                  char v65 = 1;
                  unsigned int v66 = 0;
                  if (v63 == 1024)
                  {
                    unsigned int v66 = 8;
                    unsigned int v62 = 16;
                  }
                }
              }
              else if (v63 == 128)
              {
                char v64 = 0;
                char v65 = 0;
                unsigned int v62 = 32;
                unsigned int v66 = 32;
              }
              else
              {
                char v65 = 1;
                unsigned int v66 = 0;
                if (v63 == 256)
                {
                  char v64 = 0;
                  unsigned int v66 = 16;
                  unsigned int v62 = 32;
                }
              }
            }
            else
            {
              char v65 = 1;
              unsigned int v66 = 0;
              switch(v63)
              {
                case 4:
                  char v64 = 0;
                  char v65 = 0;
                  unsigned int v66 = 128;
                  unsigned int v62 = 256;
                  break;
                case 5:
                case 6:
                case 7:
                case 9:
                case 10:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 17:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                  break;
                case 8:
                  char v64 = 0;
                  char v65 = 0;
                  unsigned int v62 = 128;
                  unsigned int v66 = 128;
                  break;
                case 16:
                  char v64 = 0;
                  char v65 = 0;
                  unsigned int v66 = 64;
                  unsigned int v62 = 128;
                  break;
                case 32:
                  char v64 = 0;
                  char v65 = 0;
                  unsigned int v62 = 64;
                  unsigned int v66 = 64;
                  break;
                default:
                  if (v63 == 64)
                  {
                    char v64 = 0;
                    char v65 = 0;
                    unsigned int v66 = 32;
                    unsigned int v62 = 64;
                  }
                  break;
              }
            }
            unsigned int v119 = (v62 >> 4) - 1;
            if (v64)
            {
              unsigned int v120 = 0;
              if (v65) {
                goto LABEL_161;
              }
LABEL_150:
              unsigned int v121 = 32 - __clz(~(-1 << -(char)__clz(((v66 + 15) >> 4) - 1)));
              if (v121 | v120) {
                goto LABEL_151;
              }
LABEL_162:
              uint64_t v123 = 0;
            }
            else
            {
              unsigned int v120 = 32 - __clz(~(-1 << -(char)__clz(v119)));
              if ((v65 & 1) == 0) {
                goto LABEL_150;
              }
LABEL_161:
              unsigned int v121 = 0;
              if (!v120) {
                goto LABEL_162;
              }
LABEL_151:
              int v122 = 0;
              uint64_t v123 = 0;
              int v124 = v33 & v119;
              BOOL v125 = v120 != 0;
              BOOL v126 = v121 != 0;
              int v127 = 1;
              do
              {
                --v120;
                if (v125) {
                  v123 |= (unint64_t)(v127 & v124) << v122++;
                }
                else {
                  unsigned int v120 = 0;
                }
                --v121;
                if (v126) {
                  v123 |= (unint64_t)(v127 & v18 & ((v66 >> 4) - 1)) << v122++;
                }
                else {
                  unsigned int v121 = 0;
                }
                v127 *= 2;
                --v122;
                BOOL v126 = v121 != 0;
                BOOL v125 = v120 != 0;
              }
              while (v121 | v120);
            }
            unint64_t v50 = ((unint64_t)(v35 / v62 + v148 / v66 * ((v62 + v129) / v62)) << 14) + (v123 << 10);
            goto LABEL_59;
          }
          if (v140)
          {
            int v43 = 0;
            uint64_t v44 = 0;
            int v45 = 1;
            BOOL v46 = v137;
            BOOL v47 = v138;
            __int32 v49 = v139.i32[0];
            __int32 v48 = v139.i32[1];
            do
            {
              --v48;
              if (v47) {
                v44 |= (unint64_t)(v45 & v33) << v43++;
              }
              else {
                __int32 v48 = 0;
              }
              --v49;
              if (v46) {
                v44 |= (unint64_t)(v45 & v18) << v43++;
              }
              else {
                __int32 v49 = 0;
              }
              v45 *= 2;
              --v43;
              BOOL v46 = v49 != 0;
              BOOL v47 = v48 != 0;
            }
            while (v49 | v48);
          }
          else
          {
            uint64_t v44 = 0;
          }
          unint64_t v50 = v44 << 10;
LABEL_59:
          unsigned int v51 = *(_DWORD *)(v28 + 128) >> (*(unsigned char *)(v28 + 144) + a12);
          if (v51 <= 1) {
            unsigned int v51 = 1;
          }
          unsigned int v52 = v51 + 15;
          if (v52 < 0x20) {
            unsigned int v53 = 0;
          }
          else {
            unsigned int v53 = 32 - __clz(~(-1 << -(char)__clz((v52 >> 4) - 1)));
          }
          unsigned int v54 = *(_DWORD *)(v28 + 132) >> (*(unsigned char *)(v28 + 144) + a12);
          if (v54 <= 1) {
            unsigned int v54 = 1;
          }
          unsigned int v55 = v54 + 15;
          if (v55 < 0x20)
          {
            unsigned int v56 = 0;
            if (!v53)
            {
LABEL_81:
              uint64_t v58 = 0;
              goto LABEL_82;
            }
          }
          else
          {
            unsigned int v56 = 32 - __clz(~(-1 << -(char)__clz((v55 >> 4) - 1)));
            if (!(v56 | v53)) {
              goto LABEL_81;
            }
          }
          int v57 = 0;
          uint64_t v58 = 0;
          BOOL v59 = v53 != 0;
          BOOL v60 = v56 != 0;
          int v61 = 1;
          do
          {
            --v53;
            if (v59) {
              v58 |= (unint64_t)(v61 & v33) << v57++;
            }
            else {
              unsigned int v53 = 0;
            }
            --v56;
            if (v60) {
              v58 |= (unint64_t)(v61 & v18) << v57++;
            }
            else {
              unsigned int v56 = 0;
            }
            v61 *= 2;
            --v57;
            BOOL v60 = v56 != 0;
            BOOL v59 = v53 != 0;
          }
          while (v56 | v53);
LABEL_82:
          int v67 = v39 < 0x10 || v40;
          unsigned int v68 = (char *)(a4 + 8 * v58);
          unint64_t v69 = v146 + 4 * (v37 - a7);
          unsigned int v70 = (int64x2_t *)(a2 + v50);
          if (v34 < 0x10) {
            int v71 = 1;
          }
          else {
            int v71 = v67;
          }
          if (v154)
          {
            if (!v71)
            {
              BOOL v75 = (int64x2_t *)__dst;
LABEL_95:
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock(v69, a11, (unint64_t)v75, v68, v39, v34);
              a7 = v141;
              goto LABEL_132;
            }
            char v72 = v39;
            int v73 = v38;
            int v74 = v37;
            memcpy(__dst, v70, sizeof(__dst));
            int v37 = v74;
            BOOL v75 = (int64x2_t *)__dst;
            int v38 = v73;
            unsigned int v35 = 16 * v33;
            LOBYTE(v39) = v72;
            LOBYTE(v34) = v151;
            uint64_t v28 = v150;
          }
          else
          {
            BOOL v75 = v70;
            if (!v71) {
              goto LABEL_95;
            }
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE12ELj1ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = v28;
          uint64_t v156 = v75;
          unsigned __int8 v164 = v39;
          unsigned __int8 v165 = v34;
          unsigned int v160 = v136;
          unsigned int v161 = v37 - v35;
          uint64_t v157 = v68;
          unint64_t v158 = v69;
          uint64_t v159 = a11;
          unsigned int v162 = v147;
          unsigned int v163 = v38;
          if (v40)
          {
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(v28 + 8) + 7384), block);
            a7 = v141;
            goto LABEL_132;
          }
          BOOL v76 = (int64x2_t *)((char *)v75
                            + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v167, 64, v75, *v68));
          int v77 = (int64x2_t *)((char *)v76
                            + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v169, 64, v76, v68[1]));
          int v78 = (int64x2_t *)((char *)v77
                            + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v168, 64, v77, v68[2]));
          int v79 = (int64x2_t *)((char *)v78
                            + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v170, 64, v78, v68[3]));
          uint64_t v80 = (int64x2_t *)((char *)v79
                            + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v171, 64, v79, v68[4]));
          int32x4_t v81 = (int64x2_t *)((char *)v80
                            + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v173, 64, v80, v68[5]));
          uint64_t v82 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v172, 64, v81, v68[6]);
          AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v174, 64, (int64x2_t *)((char *)v81 + v82), v68[7]);
          uint64_t v83 = v162;
          a7 = v141;
          if (v162 && v163)
          {
            uint64_t v84 = 0;
            unint64_t v85 = (unint64_t)v160 << 6;
            uint64_t v86 = 4 * v161;
            char v87 = &v167[0].i8[v85 + v86];
            unint64_t v88 = v158;
            uint64_t v89 = v159;
            unint64_t v90 = 4 * v163;
            if (v90 <= 1) {
              unint64_t v91 = 1;
            }
            else {
              unint64_t v91 = 4 * v163;
            }
            unint64_t v92 = v85 + v86;
            uint64_t v93 = &v167[0].i8[v85 + v86];
            if (v91) {
              BOOL v94 = (v91 - 1) >> 32 == 0;
            }
            else {
              BOOL v94 = 0;
            }
            uint64_t v95 = v91 & 0x3FFFFFFE0;
            uint64_t v96 = v91 & 0x3FFFFFFF8;
            char v98 = !v94 || v91 < 8;
            int64x2_t v99 = &v167[1].i8[v92];
            int64x2_t v100 = (long long *)(v158 + 16);
            unint64_t v101 = v87;
            unint64_t v102 = v158;
            do
            {
              int64x2_t v103 = (char *)(v88 + v89 * v84);
              int64x2_t v104 = &v87[64 * v84];
              if ((unint64_t)(&v93[64 * v84] - v103) < 0x20) {
                char v105 = 1;
              }
              else {
                char v105 = v98;
              }
              if (v105)
              {
                int v106 = 0;
                goto LABEL_128;
              }
              if (v91 >= 0x20)
              {
                uint64_t v108 = v100;
                uint64_t v109 = v99;
                uint64_t v110 = v91 & 0x3FFFFFFE0;
                do
                {
                  long long v111 = *v108;
                  *((_OWORD *)v109 - 1) = *(v108 - 1);
                  *(_OWORD *)uint64_t v109 = v111;
                  v109 += 32;
                  v108 += 2;
                  v110 -= 32;
                }
                while (v110);
                if (v91 == v95) {
                  goto LABEL_111;
                }
                uint64_t v107 = v91 & 0x3FFFFFFE0;
                if ((v91 & 0x18) == 0)
                {
                  v103 += v95;
                  v104 += v95;
                  int v106 = v91 & 0xFFFFFFE0;
                  goto LABEL_128;
                }
              }
              else
              {
                uint64_t v107 = 0;
              }
              v104 += v96;
              uint64_t v112 = v107 - v96;
              int32x4_t v113 = (uint64_t *)(v102 + v107);
              char v114 = &v101[v107];
              do
              {
                uint64_t v115 = *v113++;
                *(void *)char v114 = v115;
                v114 += 8;
                v112 += 8;
              }
              while (v112);
              if (v91 == v96) {
                goto LABEL_111;
              }
              v103 += v96;
              int v106 = v91 & 0xFFFFFFF8;
LABEL_128:
              unsigned int v116 = v106 + 1;
              do
              {
                char v117 = *v103++;
                *v104++ = v117;
              }
              while (v90 > v116++);
LABEL_111:
              ++v84;
              v99 += 64;
              int64x2_t v100 = (long long *)((char *)v100 + v89);
              v102 += v89;
              v101 += 64;
            }
            while (v84 != v83);
          }
          AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v167, 64, (unint64_t)v156, v157, v164, v165);
LABEL_132:
          if (v154) {
            memcpy(v70, v75, 0x400uLL);
          }
          BOOL v23 = v33++ == v142 >> 4;
          uint64_t v28 = v150;
          unsigned int v34 = v151;
        }
        while (!v23);
        BOOL v23 = v18++ == v135;
      }
      while (!v23);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, int a12)
{
  uint64_t v228 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v203 = a8;
  unsigned int v17 = a8 >> 4;
  unsigned int v184 = a8 + a10 - 1;
  unsigned int v186 = v184 >> 4;
  unsigned int v18 = *(unsigned __int8 *)(*(void *)(a1 + 208) + 88);
  unsigned int v19 = *(_DWORD *)(a1 + 112);
  uint64_t v204 = a1;
  if (*(void *)(a1 + 168)) {
    int v20 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v20 = 0;
  }
  BOOL v21 = (v20 & 0xD00) == 0 || v20 == 768;
  int v22 = v20 & 0xE00;
  int v24 = !v21 && v22 != 1024;
  int v207 = v24;
  BOOL isLevelTiled = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::isLevelTiled(a1, *(_DWORD *)(a1 + 144) + a12);
  uint64_t v26 = a1;
  BOOL v197 = isLevelTiled;
  if (v17 <= v186)
  {
    unsigned int v196 = a7 + a9 - 1;
    unsigned int v183 = a7 >> 4;
    if (a7 >> 4 <= v196 >> 4)
    {
      unsigned int v180 = a5 - 1;
      unsigned int v206 = (a5 - 1) >> 4;
      int v205 = ((a5 - 1) & 0xF) + 1;
      int v181 = ((a6 - 1) & 0xF) + 1;
      unsigned int v182 = (a6 - 1) >> 4;
      unint64_t v27 = v19 * (unint64_t)v18;
      uint32x2_t v28 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0xF0000000FLL);
      int8x8_t v29 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v28, 4uLL))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x2000000020, v28));
      __int32 v194 = v29.i32[0] | v29.i32[1];
      int8x8_t v192 = v29;
      BOOL v190 = v29.i32[0] != 0;
      BOOL v191 = v29.i32[1] != 0;
      uint64_t v30 = a11;
      unint64_t v179 = 8 * v27;
      uint64_t v31 = 4 * a11;
      uint64_t v32 = 2 * a11;
      unsigned int v195 = a7;
      do
      {
        unsigned int v33 = (16 * v17) | 0xF;
        if (16 * v17 <= v203) {
          int v34 = v203;
        }
        else {
          int v34 = 16 * v17;
        }
        unsigned int v35 = v183;
        if (v184 < v33) {
          unsigned int v33 = v184;
        }
        int v189 = v34 - 16 * v17;
        int v201 = v33 - v34 + 1;
        unsigned int v202 = 16 * v17;
        if (v17 == v182) {
          unsigned int v36 = v181;
        }
        else {
          unsigned int v36 = 16;
        }
        uint64_t v200 = a3 + (v34 - v203) * v30;
        unsigned int v187 = v36;
        do
        {
          unsigned int v37 = 16 * v35;
          unsigned int v38 = 16 * (v35 + 1) - 1;
          if (16 * v35 <= a7) {
            int v39 = a7;
          }
          else {
            int v39 = 16 * v35;
          }
          if (v196 < v38) {
            unsigned int v38 = v196;
          }
          int v40 = v38 - v39 + 1;
          if (v35 == v206) {
            unsigned int v41 = v205;
          }
          else {
            unsigned int v41 = 16;
          }
          BOOL v42 = 1;
          if (v202 >= v203 && v37 >= a7)
          {
            int v43 = v205;
            if (v35 != v206) {
              int v43 = 16;
            }
            BOOL v42 = v40 != v43 || v201 != v36;
          }
          if (v197)
          {
            unsigned int v64 = 0;
            uint64_t v65 = v179 >> (*(unsigned char *)(v26 + 57) != 0);
            char v66 = 1;
            if (v65 > 127)
            {
              if (v65 > 511)
              {
                if (v65 == 512)
                {
                  unsigned int v64 = 16;
                  char v67 = 1;
                  unsigned int v68 = 16;
                }
                else
                {
                  char v67 = 1;
                  unsigned int v68 = 0;
                  if (v65 == 1024)
                  {
                    unsigned int v68 = 8;
                    unsigned int v64 = 16;
                  }
                }
              }
              else if (v65 == 128)
              {
                char v66 = 0;
                char v67 = 0;
                unsigned int v64 = 32;
                unsigned int v68 = 32;
              }
              else
              {
                char v67 = 1;
                unsigned int v68 = 0;
                if (v65 == 256)
                {
                  char v66 = 0;
                  unsigned int v68 = 16;
                  unsigned int v64 = 32;
                }
              }
            }
            else
            {
              char v67 = 1;
              unsigned int v68 = 0;
              switch(v65)
              {
                case 4:
                  char v66 = 0;
                  char v67 = 0;
                  unsigned int v68 = 128;
                  unsigned int v64 = 256;
                  break;
                case 5:
                case 6:
                case 7:
                case 9:
                case 10:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 17:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                  break;
                case 8:
                  char v66 = 0;
                  char v67 = 0;
                  unsigned int v64 = 128;
                  unsigned int v68 = 128;
                  break;
                case 16:
                  char v66 = 0;
                  char v67 = 0;
                  unsigned int v68 = 64;
                  unsigned int v64 = 128;
                  break;
                case 32:
                  char v66 = 0;
                  char v67 = 0;
                  unsigned int v64 = 64;
                  unsigned int v68 = 64;
                  break;
                default:
                  if (v65 == 64)
                  {
                    char v66 = 0;
                    char v67 = 0;
                    unsigned int v68 = 32;
                    unsigned int v64 = 64;
                  }
                  break;
              }
            }
            unsigned int v170 = (v64 >> 4) - 1;
            if (v66)
            {
              unsigned int v171 = 0;
              if (v67) {
                goto LABEL_186;
              }
LABEL_175:
              unsigned int v172 = 32 - __clz(~(-1 << -(char)__clz(((v68 + 15) >> 4) - 1)));
              if (v172 | v171) {
                goto LABEL_176;
              }
LABEL_187:
              uint64_t v174 = 0;
            }
            else
            {
              unsigned int v171 = 32 - __clz(~(-1 << -(char)__clz(v170)));
              if ((v67 & 1) == 0) {
                goto LABEL_175;
              }
LABEL_186:
              unsigned int v172 = 0;
              if (!v171) {
                goto LABEL_187;
              }
LABEL_176:
              int v173 = 0;
              uint64_t v174 = 0;
              int v175 = v35 & v170;
              BOOL v176 = v171 != 0;
              BOOL v177 = v172 != 0;
              int v178 = 1;
              do
              {
                --v171;
                if (v176) {
                  v174 |= (unint64_t)(v178 & v175) << v173++;
                }
                else {
                  unsigned int v171 = 0;
                }
                --v172;
                if (v177) {
                  v174 |= (unint64_t)(v178 & v17 & ((v68 >> 4) - 1)) << v173++;
                }
                else {
                  unsigned int v172 = 0;
                }
                v178 *= 2;
                --v173;
                BOOL v177 = v172 != 0;
                BOOL v176 = v171 != 0;
              }
              while (v172 | v171);
            }
            unint64_t v52 = ((unint64_t)(v37 / v64 + v202 / v68 * ((v64 + v180) / v64)) << 14) + (v174 << 10);
            goto LABEL_59;
          }
          if (v194)
          {
            int v45 = 0;
            uint64_t v46 = 0;
            int v47 = 1;
            BOOL v48 = v190;
            BOOL v49 = v191;
            __int32 v51 = v192.i32[0];
            __int32 v50 = v192.i32[1];
            do
            {
              --v50;
              if (v49) {
                v46 |= (unint64_t)(v47 & v35) << v45++;
              }
              else {
                __int32 v50 = 0;
              }
              --v51;
              if (v48) {
                v46 |= (unint64_t)(v47 & v17) << v45++;
              }
              else {
                __int32 v51 = 0;
              }
              v47 *= 2;
              --v45;
              BOOL v48 = v51 != 0;
              BOOL v49 = v50 != 0;
            }
            while (v51 | v50);
          }
          else
          {
            uint64_t v46 = 0;
          }
          unint64_t v52 = v46 << 10;
LABEL_59:
          unsigned int v53 = *(_DWORD *)(v26 + 128) >> (*(unsigned char *)(v26 + 144) + a12);
          if (v53 <= 1) {
            unsigned int v53 = 1;
          }
          unsigned int v54 = v53 + 15;
          if (v54 < 0x20) {
            unsigned int v55 = 0;
          }
          else {
            unsigned int v55 = 32 - __clz(~(-1 << -(char)__clz((v54 >> 4) - 1)));
          }
          unsigned int v56 = *(_DWORD *)(v26 + 132) >> (*(unsigned char *)(v26 + 144) + a12);
          if (v56 <= 1) {
            unsigned int v56 = 1;
          }
          unsigned int v57 = v56 + 15;
          if (v57 < 0x20)
          {
            unsigned int v58 = 0;
            if (!v55)
            {
LABEL_81:
              uint64_t v60 = 0;
              goto LABEL_82;
            }
          }
          else
          {
            unsigned int v58 = 32 - __clz(~(-1 << -(char)__clz((v57 >> 4) - 1)));
            if (!(v58 | v55)) {
              goto LABEL_81;
            }
          }
          int v59 = 0;
          uint64_t v60 = 0;
          BOOL v61 = v55 != 0;
          BOOL v62 = v58 != 0;
          int v63 = 1;
          do
          {
            --v55;
            if (v61) {
              v60 |= (unint64_t)(v63 & v35) << v59++;
            }
            else {
              unsigned int v55 = 0;
            }
            --v58;
            if (v62) {
              v60 |= (unint64_t)(v63 & v17) << v59++;
            }
            else {
              unsigned int v58 = 0;
            }
            v63 *= 2;
            --v59;
            BOOL v62 = v58 != 0;
            BOOL v61 = v55 != 0;
          }
          while (v58 | v55);
LABEL_82:
          int v69 = v41 < 0x10 || v42;
          unsigned int v70 = (unsigned __int8 *)(a4 + 8 * v60);
          uint64_t v71 = v200 + 4 * (v39 - a7);
          char v72 = (int64x2_t *)(a2 + v52);
          if (v36 < 0x10) {
            int v73 = 1;
          }
          else {
            int v73 = v69;
          }
          if (v207)
          {
            if (!v73)
            {
              int v77 = (int64x2_t *)__dst;
LABEL_96:
              uint64_t v79 = 0;
              uint64_t v80 = v77;
              do
              {
                uint64_t v98 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,1u>::kSubblockPositions[v79 + 1];
                uint64_t v99 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,1u>::kSubblockPositions[v79];
                unsigned int v100 = (v41 - 8 * v99) & ~((int)(v41 - 8 * v99) >> 31);
                if (v100 >= 8) {
                  unsigned int v100 = 8;
                }
                unsigned int v101 = (v36 - 4 * v98) & ~((int)(v36 - 4 * v98) >> 31);
                if (v101 >= 4) {
                  unsigned int v101 = 4;
                }
                if (v100) {
                  BOOL v102 = v101 == 0;
                }
                else {
                  BOOL v102 = 1;
                }
                if (v102)
                {
                  char v97 = 0;
                }
                else
                {
                  int32x4_t v81 = (int64x2_t *)(v71 + v31 * v98 + 32 * v99);
                  uint64_t v82 = (int64x2_t *)((char *)v81 + v30);
                  int64x2_t v84 = *v81;
                  int64x2_t v85 = v81[1];
                  uint64_t v83 = (int64x2_t *)((char *)v81 + v32);
                  int64x2_t v86 = v82[1];
                  int64x2_t v87 = vzip1q_s64(v84, *v82);
                  int64x2_t v88 = vzip2q_s64(v84, *v82);
                  int64x2_t v89 = vzip1q_s64(v85, v86);
                  int64x2_t v90 = vzip2q_s64(v85, v86);
                  int64x2_t v92 = *v83;
                  int64x2_t v93 = v83[1];
                  unint64_t v91 = (int64x2_t *)((char *)v83 + v30);
                  int64x2_t v94 = v91[1];
                  int64x2_t v95 = vzip1q_s64(v92, *v91);
                  int64x2_t v96 = vzip2q_s64(v92, *v91);
                  *uint64_t v80 = v87;
                  v80[1] = v88;
                  v80[2] = v95;
                  v80[3] = v96;
                  v80[4] = v89;
                  v80[5] = v90;
                  v80[6] = vzip1q_s64(v93, v94);
                  v80[7] = vzip2q_s64(v93, v94);
                  v80 += 8;
                  char v97 = 127;
                }
                *v70++ = v97;
                v79 += 2;
              }
              while (v79 != 16);
              a7 = v195;
              if (v207) {
                goto LABEL_158;
              }
              goto LABEL_27;
            }
            int v74 = v72;
            int v75 = v40;
            BOOL v76 = v42;
            memcpy(__dst, v72, sizeof(__dst));
            int v77 = (int64x2_t *)__dst;
            char v72 = v74;
            BOOL v42 = v76;
            uint64_t v30 = a11;
            unsigned int v36 = v187;
            unsigned int v37 = 16 * v35;
            int v40 = v75;
            uint64_t v26 = v204;
          }
          else
          {
            int v77 = v72;
            if (!v73) {
              goto LABEL_96;
            }
          }
          __int32 v193 = v72;
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE12ELj1ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = v26;
          int v209 = v77;
          unsigned __int8 v217 = v41;
          unsigned __int8 v218 = v36;
          unsigned int v213 = v189;
          unsigned int v214 = v39 - v37;
          unsigned int v210 = v70;
          uint64_t v211 = v71;
          uint64_t v212 = v30;
          unsigned int v215 = v201;
          unsigned int v216 = v40;
          if (v42)
          {
            int v78 = v77;
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(v26 + 8) + 7384), block);
            int v77 = v78;
            uint64_t v26 = v204;
            a7 = v195;
            uint64_t v32 = 2 * a11;
            uint64_t v31 = 4 * a11;
            char v72 = v193;
            if (!v207) {
              goto LABEL_27;
            }
LABEL_158:
            memcpy(v72, v77, 0x400uLL);
            uint64_t v32 = 2 * a11;
            uint64_t v31 = 4 * a11;
            uint64_t v26 = v204;
            goto LABEL_27;
          }
          BOOL v188 = v77;
          int64x2_t v103 = (int64x2_t *)((char *)v77
                             + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v220, 64, v77, *v70));
          int64x2_t v104 = (int64x2_t *)((char *)v103
                             + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v222, 64, v103, v70[1]));
          char v105 = (int64x2_t *)((char *)v104
                             + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v221, 64, v104, v70[2]));
          int v106 = (int64x2_t *)((char *)v105
                             + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v223, 64, v105, v70[3]));
          uint64_t v107 = (int64x2_t *)((char *)v106
                             + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v224, 64, v106, v70[4]));
          uint64_t v108 = (int64x2_t *)((char *)v107
                             + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v226, 64, v107, v70[5]));
          uint64_t v109 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v225, 64, v108, v70[6]);
          AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v227, 64, (int64x2_t *)((char *)v108 + v109), v70[7]);
          uint64_t v110 = v215;
          if (v215 && v216)
          {
            uint64_t v111 = 0;
            unint64_t v112 = (unint64_t)v213 << 6;
            uint64_t v113 = 4 * v214;
            char v114 = &v220[0].i8[v112 + v113];
            uint64_t v115 = v211;
            uint64_t v116 = v212;
            unint64_t v117 = 4 * v216;
            if (v117 <= 1) {
              unint64_t v118 = 1;
            }
            else {
              unint64_t v118 = 4 * v216;
            }
            unint64_t v119 = v112 + v113;
            unsigned int v120 = &v220[0].i8[v112 + v113];
            if (v118) {
              BOOL v121 = (v118 - 1) >> 32 == 0;
            }
            else {
              BOOL v121 = 0;
            }
            uint64_t v122 = v118 & 0x3FFFFFFE0;
            uint64_t v123 = v118 & 0x3FFFFFFF8;
            char v125 = !v121 || v118 < 8;
            BOOL v126 = &v220[1].i8[v119];
            int v127 = (long long *)(v211 + 16);
            unint64_t v128 = v114;
            uint64_t v129 = v211;
            do
            {
              int v130 = (char *)(v115 + v116 * v111);
              unsigned int v131 = &v114[64 * v111];
              if ((unint64_t)(&v120[64 * v111] - v130) < 0x20) {
                char v132 = 1;
              }
              else {
                char v132 = v125;
              }
              if (v132)
              {
                int v133 = 0;
                goto LABEL_142;
              }
              if (v118 >= 0x20)
              {
                unsigned int v135 = v127;
                int v136 = v126;
                uint64_t v137 = v118 & 0x3FFFFFFE0;
                do
                {
                  long long v138 = *v135;
                  *((_OWORD *)v136 - 1) = *(v135 - 1);
                  *(_OWORD *)int v136 = v138;
                  v136 += 32;
                  v135 += 2;
                  v137 -= 32;
                }
                while (v137);
                if (v118 == v122) {
                  goto LABEL_125;
                }
                uint64_t v134 = v118 & 0x3FFFFFFE0;
                if ((v118 & 0x18) == 0)
                {
                  v130 += v122;
                  v131 += v122;
                  int v133 = v118 & 0xFFFFFFE0;
                  goto LABEL_142;
                }
              }
              else
              {
                uint64_t v134 = 0;
              }
              v131 += v123;
              uint64_t v139 = v134 - v123;
              __int32 v140 = (uint64_t *)(v129 + v134);
              unsigned int v141 = &v128[v134];
              do
              {
                uint64_t v142 = *v140++;
                *(void *)unsigned int v141 = v142;
                v141 += 8;
                v139 += 8;
              }
              while (v139);
              if (v118 == v123) {
                goto LABEL_125;
              }
              v130 += v123;
              int v133 = v118 & 0xFFFFFFF8;
LABEL_142:
              unsigned int v143 = v133 + 1;
              do
              {
                char v144 = *v130++;
                *v131++ = v144;
              }
              while (v117 > v143++);
LABEL_125:
              ++v111;
              v126 += 64;
              int v127 = (long long *)((char *)v127 + v116);
              v129 += v116;
              v128 += 64;
            }
            while (v111 != v110);
          }
          uint64_t v146 = 0;
          int v147 = v209;
          unsigned int v148 = (char *)v210;
          int v149 = v217;
          int v150 = v218;
          a7 = v195;
          uint64_t v26 = v204;
          uint64_t v32 = 2 * a11;
          uint64_t v31 = 4 * a11;
          char v72 = v193;
          do
          {
            uint64_t v165 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,1u>::kSubblockPositions[v146 + 1];
            uint64_t v166 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,1u>::kSubblockPositions[v146];
            unsigned int v167 = (v149 - 8 * v166) & ~((v149 - 8 * (int)v166) >> 31);
            if (v167 >= 8) {
              unsigned int v167 = 8;
            }
            unsigned int v168 = (v150 - 4 * v165) & ~((v150 - 4 * (int)v165) >> 31);
            if (v168 >= 4) {
              unsigned int v168 = 4;
            }
            if (v167) {
              BOOL v169 = v168 == 0;
            }
            else {
              BOOL v169 = 1;
            }
            if (v169)
            {
              char v164 = 0;
            }
            else
            {
              unsigned int v151 = &v220[16 * v165 + 2 * v166];
              int64x2_t v152 = v151[1];
              int64x2_t v153 = v151[4];
              int64x2_t v154 = v151[5];
              int64x2_t v155 = vzip1q_s64(*v151, v153);
              int64x2_t v156 = vzip2q_s64(*v151, v153);
              int64x2_t v157 = vzip1q_s64(v152, v154);
              int64x2_t v158 = vzip2q_s64(v152, v154);
              int64x2_t v159 = v151[8];
              int64x2_t v160 = v151[9];
              v151 += 12;
              int64x2_t v161 = v151[1];
              int64x2_t v162 = vzip1q_s64(v159, *v151);
              int64x2_t v163 = vzip2q_s64(v159, *v151);
              *int v147 = v155;
              v147[1] = v156;
              v147[2] = v162;
              v147[3] = v163;
              v147[4] = v157;
              v147[5] = v158;
              v147[6] = vzip1q_s64(v160, v161);
              v147[7] = vzip2q_s64(v160, v161);
              v147 += 8;
              char v164 = 127;
            }
            *v148++ = v164;
            v146 += 2;
          }
          while (v146 != 16);
          int v77 = v188;
          if (v207) {
            goto LABEL_158;
          }
LABEL_27:
          BOOL v21 = v35++ == v196 >> 4;
        }
        while (!v21);
        BOOL v21 = v17++ == v186;
      }
      while (!v21);
    }
  }
}

uint64_t AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, char a12)
{
  uint64_t v176 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v149 = a8;
  unsigned int v134 = a8 + a10 - 1;
  uint64_t v150 = a1;
  if (*(void *)(a1 + 168)) {
    int v17 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v17 = 0;
  }
  unsigned int v18 = a5 - 1;
  unsigned int v19 = a6 - 1;
  unsigned int v20 = a8 >> 4;
  unsigned int v133 = v134 >> 4;
  BOOL v21 = (v17 & 0xD00) == 0 || v17 == 768;
  int v22 = v17 & 0xE00;
  int v24 = !v21 && v22 != 1024;
  int v155 = v24;
  uint64_t result = a1;
  if (*(unsigned char *)(a1 + 232))
  {
    unsigned int v26 = *(unsigned __int8 *)(a1 + 255);
    unsigned int v27 = *(unsigned __int8 *)(a1 + 254);
    char v28 = __clz(v18);
    if (1 << v26 >= a6 || a5 >> v27)
    {
      if (!(a6 >> v26) && 1 << v27 < a5)
      {
        if (a6 < 2) {
          unsigned int v31 = 0;
        }
        else {
          unsigned int v31 = __clz(~(-1 << -(char)__clz(v19))) - 32;
        }
        v27 += v26 + v31;
        unsigned int v26 = -v31;
      }
    }
    else
    {
      unsigned int v29 = 32 - __clz(~(-1 << -v28));
      unsigned int v30 = v27 + v26;
      if (a5 < 2) {
        unsigned int v29 = 0;
      }
      unsigned int v26 = v30 - v29;
      unsigned int v27 = v29;
    }
    if (a5 < 2)
    {
      if (v27) {
        goto LABEL_27;
      }
    }
    else if (32 - __clz(~(-1 << -v28)) < v27)
    {
LABEL_27:
      BOOL v144 = 0;
LABEL_32:
      unsigned int v141 = v27 - 4;
      unsigned int v138 = v26 - 4;
      int v33 = -1 << *(unsigned char *)(*(void *)(a1 + 208) + 48);
      unsigned int v131 = (((~v33 + a5) & v33) + ~(-1 << v27)) >> v27;
      goto LABEL_33;
    }
    if (a6 < 2) {
      unsigned int v32 = 0;
    }
    else {
      unsigned int v32 = 32 - __clz(~(-1 << -(char)__clz(v19)));
    }
    BOOL v144 = v32 >= v26;
    goto LABEL_32;
  }
  BOOL v144 = 0;
  unsigned int v131 = 0;
  unsigned int v138 = 0;
  unsigned int v141 = 0;
LABEL_33:
  if (v20 <= v133)
  {
    unsigned int v143 = a7 + a9 - 1;
    unsigned int v130 = a7 >> 4;
    if (a7 >> 4 <= v143 >> 4)
    {
      unsigned int v153 = v18 >> 4;
      unsigned int v129 = v19 >> 4;
      int v152 = (v18 & 0xF) + 1;
      int v128 = (v19 & 0xF) + 1;
      uint32x2_t v34 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0xF0000000FLL);
      int8x8_t v35 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v34, 4uLL))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x2000000020, v34));
      __int32 v139 = v35.i32[0] | v35.i32[1];
      int8x8_t v137 = v35;
      BOOL v135 = v35.i32[0] != 0;
      BOOL v136 = v35.i32[1] != 0;
      unsigned int v142 = a7;
      do
      {
        unsigned int v36 = (16 * v20) | 0xF;
        if (16 * v20 <= v149) {
          int v37 = v149;
        }
        else {
          int v37 = 16 * v20;
        }
        if (v134 < v36) {
          unsigned int v36 = v134;
        }
        int v140 = v37 - 16 * v20;
        int v148 = v36 - v37 + 1;
        unsigned int v38 = v130;
        if (v20 == v129) {
          unsigned int v39 = v128;
        }
        else {
          unsigned int v39 = 16;
        }
        uint64_t v147 = a3 + (v37 - v149) * a11;
        unsigned int v151 = v39;
        do
        {
          unsigned int v40 = 16 * v38;
          unsigned int v41 = 16 * (v38 + 1) - 1;
          if (16 * v38 <= a7) {
            int v42 = a7;
          }
          else {
            int v42 = 16 * v38;
          }
          if (v143 < v41) {
            unsigned int v41 = v143;
          }
          int v43 = v41 - v42 + 1;
          if (v38 == v153) {
            unsigned int v44 = v152;
          }
          else {
            unsigned int v44 = 16;
          }
          BOOL v45 = 1;
          if (16 * v20 >= v149 && v40 >= a7)
          {
            int v46 = v152;
            if (v38 != v153) {
              int v46 = 16;
            }
            BOOL v45 = v43 != v46 || v148 != v39;
          }
          if (v144)
          {
            if (v141 | v138)
            {
              int v48 = 0;
              uint64_t v49 = 0;
              BOOL v50 = v138 != 0;
              int v51 = 1;
              BOOL v53 = v141 != 0;
              unsigned int v52 = v138;
              unsigned int v54 = v141;
              do
              {
                --v54;
                if (v53) {
                  v49 |= (unint64_t)(v38 & ~(-1 << v141) & v51) << v48++;
                }
                else {
                  unsigned int v54 = 0;
                }
                --v52;
                if (v50) {
                  v49 |= (unint64_t)(v20 & ~(-1 << v138) & v51) << v48++;
                }
                else {
                  unsigned int v52 = 0;
                }
                v51 *= 2;
                --v48;
                BOOL v50 = v52 != 0;
                BOOL v53 = v54 != 0;
              }
              while (v52 | v54);
            }
            else
            {
              uint64_t v49 = 0;
            }
            uint64_t v62 = *(void *)(result + 320) * ((v38 >> v141) + (v20 >> v138) * v131) + (v49 << 10);
          }
          else
          {
            if (v139)
            {
              int v55 = 0;
              uint64_t v56 = 0;
              int v57 = 1;
              BOOL v58 = v135;
              BOOL v59 = v136;
              __int32 v61 = v137.i32[0];
              __int32 v60 = v137.i32[1];
              do
              {
                --v60;
                if (v59) {
                  v56 |= (unint64_t)(v57 & v38) << v55++;
                }
                else {
                  __int32 v60 = 0;
                }
                --v61;
                if (v58) {
                  v56 |= (unint64_t)(v57 & v20) << v55++;
                }
                else {
                  __int32 v61 = 0;
                }
                v57 *= 2;
                --v55;
                BOOL v58 = v61 != 0;
                BOOL v59 = v60 != 0;
              }
              while (v61 | v60);
            }
            else
            {
              uint64_t v56 = 0;
            }
            uint64_t v62 = v56 << 10;
          }
          unsigned int v63 = *(_DWORD *)(result + 128) >> (*(unsigned char *)(result + 144) + a12);
          if (v63 <= 1) {
            unsigned int v63 = 1;
          }
          unsigned int v64 = v63 + 15;
          if (v64 < 0x20) {
            unsigned int v65 = 0;
          }
          else {
            unsigned int v65 = 32 - __clz(~(-1 << -(char)__clz((v64 >> 4) - 1)));
          }
          unsigned int v66 = *(_DWORD *)(result + 132) >> (*(unsigned char *)(result + 144) + a12);
          if (v66 <= 1) {
            unsigned int v66 = 1;
          }
          unsigned int v67 = v66 + 15;
          if (v67 < 0x20) {
            unsigned int v68 = 0;
          }
          else {
            unsigned int v68 = 32 - __clz(~(-1 << -(char)__clz((v67 >> 4) - 1)));
          }
          if (v68 | v65)
          {
            int v69 = 0;
            uint64_t v70 = 0;
            BOOL v71 = v65 != 0;
            BOOL v72 = v68 != 0;
            int v73 = 1;
            do
            {
              --v65;
              if (v71) {
                v70 |= (unint64_t)(v73 & v38) << v69++;
              }
              else {
                unsigned int v65 = 0;
              }
              --v68;
              if (v72) {
                v70 |= (unint64_t)(v73 & v20) << v69++;
              }
              else {
                unsigned int v68 = 0;
              }
              v73 *= 2;
              --v69;
              BOOL v72 = v68 != 0;
              BOOL v71 = v65 != 0;
            }
            while (v68 | v65);
          }
          else
          {
            uint64_t v70 = 0;
          }
          int v75 = v44 < 0x10 || v45;
          BOOL v76 = (unsigned __int8 *)(a4 + 8 * v70);
          unsigned int v74 = v42 - a7;
          uint64_t v77 = v147 + 4 * (v42 - a7);
          int v78 = (int64x2_t *)(a2 + v62);
          if (v39 < 0x10) {
            int v79 = 1;
          }
          else {
            int v79 = v75;
          }
          __src = v78;
          if (v155)
          {
            if (!v79)
            {
              int v78 = (int64x2_t *)__dst;
LABEL_123:
              int32x4_t v81 = (int64x2_t *)(v147 + 4 * v74);
              uint64_t v82 = a11;
              unint64_t v83 = (unint64_t)v78;
              int64x2_t v84 = (char *)(a4 + 8 * v70);
              goto LABEL_160;
            }
            char v80 = v44;
            memcpy(__dst, __src, sizeof(__dst));
            LOBYTE(v44) = v80;
            int v78 = (int64x2_t *)__dst;
            LOBYTE(v39) = v151;
            uint64_t result = v150;
          }
          else if (!v79)
          {
            goto LABEL_123;
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE14ELj1ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = result;
          int64x2_t v157 = v78;
          unsigned __int8 v165 = v44;
          unsigned __int8 v166 = v39;
          unsigned int v161 = v140;
          unsigned int v162 = v42 - v40;
          int64x2_t v158 = v76;
          uint64_t v159 = v77;
          uint64_t v160 = a11;
          unsigned int v163 = v148;
          unsigned int v164 = v43;
          if (v45)
          {
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(result + 8) + 7384), block);
            goto LABEL_161;
          }
          int64x2_t v85 = (int64x2_t *)((char *)v78
                            + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v168, 64, v78, *v76));
          int64x2_t v86 = (int64x2_t *)((char *)v85
                            + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v170, 64, v85, v76[1]));
          int64x2_t v87 = (int64x2_t *)((char *)v86
                            + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v169, 64, v86, v76[2]));
          int64x2_t v88 = (int64x2_t *)((char *)v87
                            + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v171, 64, v87, v76[3]));
          int64x2_t v89 = (int64x2_t *)((char *)v88
                            + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v172, 64, v88, v76[4]));
          int64x2_t v90 = (int64x2_t *)((char *)v89
                            + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v174, 64, v89, v76[5]));
          uint64_t v91 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v173, 64, v90, v76[6]);
          AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v175, 64, (int64x2_t *)((char *)v90 + v91), v76[7]);
          uint64_t v92 = v163;
          if (v163 && v164)
          {
            uint64_t v93 = 0;
            unint64_t v94 = (unint64_t)v161 << 6;
            uint64_t v95 = 4 * v162;
            int64x2_t v96 = &v168[0].i8[v94 + v95];
            uint64_t v97 = v159;
            uint64_t v98 = v160;
            unint64_t v99 = 4 * v164;
            if (v99 <= 1) {
              unint64_t v100 = 1;
            }
            else {
              unint64_t v100 = 4 * v164;
            }
            unint64_t v101 = v94 + v95;
            BOOL v102 = &v168[0].i8[v94 + v95];
            if (v100) {
              BOOL v103 = (v100 - 1) >> 32 == 0;
            }
            else {
              BOOL v103 = 0;
            }
            uint64_t v104 = v100 & 0x3FFFFFFE0;
            uint64_t v105 = v100 & 0x3FFFFFFF8;
            char v107 = !v103 || v100 < 8;
            uint64_t v108 = &v168[1].i8[v101];
            uint64_t v109 = (long long *)(v159 + 16);
            uint64_t v110 = v96;
            uint64_t v111 = v159;
            do
            {
              unint64_t v112 = (char *)(v97 + v98 * v93);
              uint64_t v113 = &v96[64 * v93];
              if ((unint64_t)(&v102[64 * v93] - v112) < 0x20) {
                char v114 = 1;
              }
              else {
                char v114 = v107;
              }
              if (v114)
              {
                int v115 = 0;
                goto LABEL_156;
              }
              if (v100 >= 0x20)
              {
                unint64_t v117 = v109;
                unint64_t v118 = v108;
                uint64_t v119 = v100 & 0x3FFFFFFE0;
                do
                {
                  long long v120 = *v117;
                  *((_OWORD *)v118 - 1) = *(v117 - 1);
                  *(_OWORD *)unint64_t v118 = v120;
                  v118 += 32;
                  v117 += 2;
                  v119 -= 32;
                }
                while (v119);
                if (v100 == v104) {
                  goto LABEL_139;
                }
                uint64_t v116 = v100 & 0x3FFFFFFE0;
                if ((v100 & 0x18) == 0)
                {
                  v112 += v104;
                  v113 += v104;
                  int v115 = v100 & 0xFFFFFFE0;
                  goto LABEL_156;
                }
              }
              else
              {
                uint64_t v116 = 0;
              }
              v113 += v105;
              uint64_t v121 = v116 - v105;
              uint64_t v122 = (uint64_t *)(v111 + v116);
              uint64_t v123 = &v110[v116];
              do
              {
                uint64_t v124 = *v122++;
                *(void *)uint64_t v123 = v124;
                v123 += 8;
                v121 += 8;
              }
              while (v121);
              if (v100 == v105) {
                goto LABEL_139;
              }
              v112 += v105;
              int v115 = v100 & 0xFFFFFFF8;
LABEL_156:
              unsigned int v125 = v115 + 1;
              do
              {
                char v126 = *v112++;
                *v113++ = v126;
              }
              while (v99 > v125++);
LABEL_139:
              ++v93;
              v108 += 64;
              uint64_t v109 = (long long *)((char *)v109 + v98);
              v111 += v98;
              v110 += 64;
            }
            while (v93 != v92);
          }
          unint64_t v83 = (unint64_t)v157;
          int64x2_t v84 = (char *)v158;
          unsigned int v44 = v165;
          unsigned int v39 = v166;
          int32x4_t v81 = v168;
          uint64_t v82 = 64;
LABEL_160:
          AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v81, v82, v83, v84, v44, v39);
LABEL_161:
          a7 = v142;
          if (v155) {
            memcpy(__src, v78, 0x400uLL);
          }
          BOOL v21 = v38++ == v143 >> 4;
          uint64_t result = v150;
          unsigned int v39 = v151;
        }
        while (!v21);
        BOOL v21 = v20++ == v133;
      }
      while (!v21);
    }
  }
  return result;
}

uint64_t AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, char a12)
{
  uint64_t v230 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v205 = a8;
  unsigned int v187 = a8 + a10 - 1;
  uint64_t v206 = a1;
  if (*(void *)(a1 + 168)) {
    int v17 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v17 = 0;
  }
  unsigned int v18 = a5 - 1;
  unsigned int v19 = a6 - 1;
  unsigned int v20 = a8 >> 4;
  unsigned int v186 = v187 >> 4;
  BOOL v21 = (v17 & 0xD00) == 0 || v17 == 768;
  int v22 = v17 & 0xE00;
  int v24 = !v21 && v22 != 1024;
  int v209 = v24;
  uint64_t result = a1;
  if (*(unsigned char *)(a1 + 232))
  {
    unsigned int v26 = *(unsigned __int8 *)(a1 + 255);
    unsigned int v27 = *(unsigned __int8 *)(a1 + 254);
    char v28 = __clz(v18);
    if (1 << v26 >= a6 || a5 >> v27)
    {
      if (!(a6 >> v26) && 1 << v27 < a5)
      {
        if (a6 < 2) {
          unsigned int v31 = 0;
        }
        else {
          unsigned int v31 = __clz(~(-1 << -(char)__clz(v19))) - 32;
        }
        v27 += v26 + v31;
        unsigned int v26 = -v31;
      }
    }
    else
    {
      unsigned int v29 = 32 - __clz(~(-1 << -v28));
      unsigned int v30 = v27 + v26;
      if (a5 < 2) {
        unsigned int v29 = 0;
      }
      unsigned int v26 = v30 - v29;
      unsigned int v27 = v29;
    }
    if (a5 < 2)
    {
      if (v27) {
        goto LABEL_27;
      }
    }
    else if (32 - __clz(~(-1 << -v28)) < v27)
    {
LABEL_27:
      BOOL v200 = 0;
LABEL_32:
      unsigned int v196 = v27 - 4;
      unsigned int v191 = v26 - 4;
      int v33 = -1 << *(unsigned char *)(*(void *)(a1 + 208) + 48);
      unsigned int v184 = (((~v33 + a5) & v33) + ~(-1 << v27)) >> v27;
      goto LABEL_33;
    }
    if (a6 < 2) {
      unsigned int v32 = 0;
    }
    else {
      unsigned int v32 = 32 - __clz(~(-1 << -(char)__clz(v19)));
    }
    BOOL v200 = v32 >= v26;
    goto LABEL_32;
  }
  BOOL v200 = 0;
  unsigned int v184 = 0;
  unsigned int v191 = 0;
  unsigned int v196 = 0;
LABEL_33:
  if (v20 <= v186)
  {
    unsigned int v199 = a7 + a9 - 1;
    unsigned int v183 = a7 >> 4;
    if (a7 >> 4 <= v199 >> 4)
    {
      unsigned int v208 = v18 >> 4;
      unsigned int v182 = v19 >> 4;
      int v207 = (v18 & 0xF) + 1;
      int v181 = (v19 & 0xF) + 1;
      int v180 = ~(-1 << v191);
      uint32x2_t v34 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0xF0000000FLL);
      int8x8_t v35 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v34, 4uLL))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x2000000020, v34));
      __int32 v194 = v35.i32[0] | v35.i32[1];
      int8x8_t v190 = v35;
      BOOL v188 = v35.i32[0] != 0;
      BOOL v189 = v35.i32[1] != 0;
      uint64_t v36 = a11;
      uint64_t v37 = 4 * a11;
      uint64_t v38 = 2 * a11;
      unsigned int v198 = a7;
      do
      {
        unsigned int v39 = (16 * v20) | 0xF;
        if (16 * v20 <= v205) {
          int v40 = v205;
        }
        else {
          int v40 = 16 * v20;
        }
        if (v187 < v39) {
          unsigned int v39 = v187;
        }
        int v195 = v40 - 16 * v20;
        int v204 = v39 - v40 + 1;
        unsigned int v41 = v183;
        if (v20 == v182) {
          unsigned int v42 = v181;
        }
        else {
          unsigned int v42 = 16;
        }
        int v43 = v20 & v180;
        uint64_t v203 = a3 + (v40 - v205) * v36;
        do
        {
          unsigned int v44 = 16 * v41;
          unsigned int v45 = 16 * (v41 + 1) - 1;
          if (16 * v41 <= a7) {
            int v46 = a7;
          }
          else {
            int v46 = 16 * v41;
          }
          if (v199 < v45) {
            unsigned int v45 = v199;
          }
          int v47 = v45 - v46 + 1;
          if (v41 == v208) {
            unsigned int v48 = v207;
          }
          else {
            unsigned int v48 = 16;
          }
          BOOL v49 = 1;
          if (16 * v20 >= v205 && v44 >= a7)
          {
            int v50 = v207;
            if (v41 != v208) {
              int v50 = 16;
            }
            BOOL v49 = v47 != v50 || v204 != v42;
          }
          if (v200)
          {
            if (v196 | v191)
            {
              int v52 = 0;
              uint64_t v53 = 0;
              BOOL v54 = v191 != 0;
              int v55 = 1;
              BOOL v57 = v196 != 0;
              unsigned int v56 = v191;
              unsigned int v58 = v196;
              do
              {
                --v58;
                if (v57) {
                  v53 |= (unint64_t)(v41 & ~(-1 << v196) & v55) << v52++;
                }
                else {
                  unsigned int v58 = 0;
                }
                --v56;
                if (v54) {
                  v53 |= (unint64_t)(v43 & v55) << v52++;
                }
                else {
                  unsigned int v56 = 0;
                }
                v55 *= 2;
                --v52;
                BOOL v54 = v56 != 0;
                BOOL v57 = v58 != 0;
              }
              while (v56 | v58);
            }
            else
            {
              uint64_t v53 = 0;
            }
            uint64_t v66 = *(void *)(result + 320) * ((v41 >> v196) + (v20 >> v191) * v184) + (v53 << 10);
          }
          else
          {
            if (v194)
            {
              int v59 = 0;
              uint64_t v60 = 0;
              int v61 = 1;
              BOOL v62 = v188;
              BOOL v63 = v189;
              __int32 v65 = v190.i32[0];
              __int32 v64 = v190.i32[1];
              do
              {
                --v64;
                if (v63) {
                  v60 |= (unint64_t)(v61 & v41) << v59++;
                }
                else {
                  __int32 v64 = 0;
                }
                --v65;
                if (v62) {
                  v60 |= (unint64_t)(v61 & v20) << v59++;
                }
                else {
                  __int32 v65 = 0;
                }
                v61 *= 2;
                --v59;
                BOOL v62 = v65 != 0;
                BOOL v63 = v64 != 0;
              }
              while (v65 | v64);
            }
            else
            {
              uint64_t v60 = 0;
            }
            uint64_t v66 = v60 << 10;
          }
          unsigned int v67 = *(_DWORD *)(result + 128) >> (*(unsigned char *)(result + 144) + a12);
          if (v67 <= 1) {
            unsigned int v67 = 1;
          }
          unsigned int v68 = v67 + 15;
          if (v68 < 0x20) {
            unsigned int v69 = 0;
          }
          else {
            unsigned int v69 = 32 - __clz(~(-1 << -(char)__clz((v68 >> 4) - 1)));
          }
          unsigned int v70 = *(_DWORD *)(result + 132) >> (*(unsigned char *)(result + 144) + a12);
          if (v70 <= 1) {
            unsigned int v70 = 1;
          }
          unsigned int v71 = v70 + 15;
          if (v71 < 0x20)
          {
            unsigned int v72 = 0;
            if (!v69)
            {
LABEL_111:
              uint64_t v74 = 0;
              goto LABEL_112;
            }
          }
          else
          {
            unsigned int v72 = 32 - __clz(~(-1 << -(char)__clz((v71 >> 4) - 1)));
            if (!(v72 | v69)) {
              goto LABEL_111;
            }
          }
          int v73 = 0;
          uint64_t v74 = 0;
          BOOL v75 = v69 != 0;
          BOOL v76 = v72 != 0;
          int v77 = 1;
          do
          {
            --v69;
            if (v75) {
              v74 |= (unint64_t)(v77 & v41) << v73++;
            }
            else {
              unsigned int v69 = 0;
            }
            --v72;
            if (v76) {
              v74 |= (unint64_t)(v77 & v20) << v73++;
            }
            else {
              unsigned int v72 = 0;
            }
            v77 *= 2;
            --v73;
            BOOL v76 = v72 != 0;
            BOOL v75 = v69 != 0;
          }
          while (v72 | v69);
LABEL_112:
          int v78 = v48 < 0x10 || v49;
          int v79 = (unsigned __int8 *)(a4 + 8 * v74);
          uint64_t v80 = v203 + 4 * (v46 - a7);
          int32x4_t v81 = (int64x2_t *)(a2 + v66);
          if (v42 < 0x10) {
            int v82 = 1;
          }
          else {
            int v82 = v78;
          }
          if (v209)
          {
            if (v82)
            {
              unint64_t v83 = v81;
              int v84 = v47;
              BOOL v85 = v49;
              int v192 = v46;
              memcpy(__dst, v81, sizeof(__dst));
              int v46 = v192;
              BOOL v49 = v85;
              unsigned int v44 = 16 * v41;
              uint64_t v36 = a11;
              int v47 = v84;
              int64x2_t v86 = (int64x2_t *)__dst;
              int32x4_t v81 = v83;
              uint64_t result = v206;
LABEL_122:
              BOOL v197 = v81;
              block[0] = MEMORY[0x263EF8330];
              block[1] = 3221225472;
              block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE14ELj1ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
              block[3] = &__block_descriptor_90_e5_v8__0l;
              block[4] = result;
              uint64_t v211 = v86;
              unsigned __int8 v219 = v48;
              unsigned __int8 v220 = v42;
              unsigned int v215 = v195;
              unsigned int v216 = v46 - v44;
              uint64_t v212 = v79;
              uint64_t v213 = v80;
              uint64_t v214 = v36;
              unsigned int v217 = v204;
              unsigned int v218 = v47;
              if (v49)
              {
                int64x2_t v87 = v86;
                dispatch_sync(*(dispatch_queue_t *)(*(void *)(result + 8) + 7384), block);
                int64x2_t v86 = v87;
                uint64_t result = v206;
                a7 = v198;
                uint64_t v38 = 2 * a11;
                uint64_t v37 = 4 * a11;
                int v43 = v20 & v180;
                unsigned int v88 = v41 + 1;
                goto LABEL_187;
              }
              __int32 v193 = v86;
              uint64_t v113 = (int64x2_t *)((char *)v86
                                 + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v222, 64, v86, *v79));
              char v114 = (int64x2_t *)((char *)v113
                                 + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v224, 64, v113, v79[1]));
              int v115 = (int64x2_t *)((char *)v114
                                 + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v223, 64, v114, v79[2]));
              uint64_t v116 = (int64x2_t *)((char *)v115
                                 + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v225, 64, v115, v79[3]));
              unint64_t v117 = (int64x2_t *)((char *)v116
                                 + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v226, 64, v116, v79[4]));
              unint64_t v118 = (int64x2_t *)((char *)v117
                                 + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v228, 64, v117, v79[5]));
              uint64_t v119 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v227, 64, v118, v79[6]);
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v229, 64, (int64x2_t *)((char *)v118 + v119), v79[7]);
              uint64_t v120 = v217;
              if (!v217 || !v218)
              {
LABEL_174:
                uint64_t v156 = 0;
                int64x2_t v157 = v211;
                int64x2_t v158 = (char *)v212;
                int v159 = v219;
                int v160 = v220;
                a7 = v198;
                uint64_t result = v206;
                uint64_t v38 = 2 * a11;
                int v43 = v20 & v180;
                unsigned int v88 = v41 + 1;
                int64x2_t v86 = v193;
                do
                {
                  uint64_t v175 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,1u>::kSubblockPositions[v156 + 1];
                  uint64_t v176 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,1u>::kSubblockPositions[v156];
                  unsigned int v177 = (v159 - 8 * v176) & ~((v159 - 8 * (int)v176) >> 31);
                  if (v177 >= 8) {
                    unsigned int v177 = 8;
                  }
                  unsigned int v178 = (v160 - 4 * v175) & ~((v160 - 4 * (int)v175) >> 31);
                  if (v178 >= 4) {
                    unsigned int v178 = 4;
                  }
                  if (v177) {
                    BOOL v179 = v178 == 0;
                  }
                  else {
                    BOOL v179 = 1;
                  }
                  if (v179)
                  {
                    char v174 = 0;
                  }
                  else
                  {
                    unsigned int v161 = &v222[16 * v175 + 2 * v176];
                    int64x2_t v162 = v161[1];
                    int64x2_t v163 = v161[4];
                    int64x2_t v164 = v161[5];
                    int64x2_t v165 = vzip1q_s64(*v161, v163);
                    int64x2_t v166 = vzip2q_s64(*v161, v163);
                    int64x2_t v167 = vzip1q_s64(v162, v164);
                    int64x2_t v168 = vzip2q_s64(v162, v164);
                    int64x2_t v169 = v161[8];
                    int64x2_t v170 = v161[9];
                    v161 += 12;
                    int64x2_t v171 = v161[1];
                    int64x2_t v172 = vzip1q_s64(v169, *v161);
                    int64x2_t v173 = vzip2q_s64(v169, *v161);
                    *int64x2_t v157 = v165;
                    v157[1] = v166;
                    v157[2] = v172;
                    v157[3] = v173;
                    v157[4] = v167;
                    v157[5] = v168;
                    v157[6] = vzip1q_s64(v170, v171);
                    v157[7] = vzip2q_s64(v170, v171);
                    v157 += 8;
                    char v174 = 127;
                  }
                  *v158++ = v174;
                  v156 += 2;
                }
                while (v156 != 16);
                uint64_t v37 = 4 * a11;
LABEL_187:
                int32x4_t v81 = v197;
                if (v209) {
                  goto LABEL_47;
                }
                goto LABEL_48;
              }
              uint64_t v121 = 0;
              unint64_t v122 = (unint64_t)v215 << 6;
              uint64_t v123 = 4 * v216;
              uint64_t v124 = &v222[0].i8[v122 + v123];
              uint64_t v125 = v213;
              uint64_t v126 = v214;
              unint64_t v127 = 4 * v218;
              if (v127 <= 1) {
                unint64_t v128 = 1;
              }
              else {
                unint64_t v128 = 4 * v218;
              }
              unint64_t v129 = v122 + v123;
              unsigned int v130 = &v222[0].i8[v122 + v123];
              if (v128) {
                BOOL v131 = (v128 - 1) >> 32 == 0;
              }
              else {
                BOOL v131 = 0;
              }
              uint64_t v132 = v128 & 0x3FFFFFFE0;
              uint64_t v133 = v128 & 0x3FFFFFFF8;
              char v135 = !v131 || v128 < 8;
              BOOL v136 = &v222[1].i8[v129];
              int8x8_t v137 = (long long *)(v213 + 16);
              unsigned int v138 = v124;
              uint64_t v139 = v213;
              while (2)
              {
                int v140 = (char *)(v125 + v126 * v121);
                unsigned int v141 = &v124[64 * v121];
                if ((unint64_t)(&v130[64 * v121] - v140) < 0x20) {
                  char v142 = 1;
                }
                else {
                  char v142 = v135;
                }
                if (v142)
                {
                  int v143 = 0;
LABEL_171:
                  unsigned int v153 = v143 + 1;
                  do
                  {
                    char v154 = *v140++;
                    *v141++ = v154;
                  }
                  while (v127 > v153++);
                }
                else
                {
                  if (v128 >= 0x20)
                  {
                    int32x4_t v145 = v137;
                    uint64_t v146 = v136;
                    uint64_t v147 = v128 & 0x3FFFFFFE0;
                    do
                    {
                      long long v148 = *v145;
                      *((_OWORD *)v146 - 1) = *(v145 - 1);
                      *(_OWORD *)uint64_t v146 = v148;
                      v146 += 32;
                      v145 += 2;
                      v147 -= 32;
                    }
                    while (v147);
                    if (v128 == v132) {
                      goto LABEL_154;
                    }
                    uint64_t v144 = v128 & 0x3FFFFFFE0;
                    if ((v128 & 0x18) == 0)
                    {
                      v140 += v132;
                      v141 += v132;
                      int v143 = v128 & 0xFFFFFFE0;
                      goto LABEL_171;
                    }
                  }
                  else
                  {
                    uint64_t v144 = 0;
                  }
                  v141 += v133;
                  uint64_t v149 = v144 - v133;
                  uint64_t v150 = (uint64_t *)(v139 + v144);
                  unsigned int v151 = &v138[v144];
                  do
                  {
                    uint64_t v152 = *v150++;
                    *(void *)unsigned int v151 = v152;
                    v151 += 8;
                    v149 += 8;
                  }
                  while (v149);
                  if (v128 != v133)
                  {
                    v140 += v133;
                    int v143 = v128 & 0xFFFFFFF8;
                    goto LABEL_171;
                  }
                }
LABEL_154:
                ++v121;
                v136 += 64;
                int8x8_t v137 = (long long *)((char *)v137 + v126);
                v139 += v126;
                v138 += 64;
                if (v121 == v120) {
                  goto LABEL_174;
                }
                continue;
              }
            }
            int64x2_t v86 = (int64x2_t *)__dst;
          }
          else
          {
            int64x2_t v86 = v81;
            if (v82) {
              goto LABEL_122;
            }
          }
          uint64_t v89 = 0;
          int64x2_t v90 = v86;
          do
          {
            uint64_t v108 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,1u>::kSubblockPositions[v89 + 1];
            uint64_t v109 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,1u>::kSubblockPositions[v89];
            unsigned int v110 = (v48 - 8 * v109) & ~((int)(v48 - 8 * v109) >> 31);
            if (v110 >= 8) {
              unsigned int v110 = 8;
            }
            unsigned int v111 = (v42 - 4 * v108) & ~((int)(v42 - 4 * v108) >> 31);
            if (v111 >= 4) {
              unsigned int v111 = 4;
            }
            if (v110) {
              BOOL v112 = v111 == 0;
            }
            else {
              BOOL v112 = 1;
            }
            if (v112)
            {
              char v107 = 0;
            }
            else
            {
              uint64_t v91 = (int64x2_t *)(v80 + v37 * v108 + 32 * v109);
              uint64_t v92 = (int64x2_t *)((char *)v91 + v36);
              int64x2_t v94 = *v91;
              int64x2_t v95 = v91[1];
              uint64_t v93 = (int64x2_t *)((char *)v91 + v38);
              int64x2_t v96 = v92[1];
              int64x2_t v97 = vzip1q_s64(v94, *v92);
              int64x2_t v98 = vzip2q_s64(v94, *v92);
              int64x2_t v99 = vzip1q_s64(v95, v96);
              int64x2_t v100 = vzip2q_s64(v95, v96);
              int64x2_t v102 = *v93;
              int64x2_t v103 = v93[1];
              unint64_t v101 = (int64x2_t *)((char *)v93 + v36);
              int64x2_t v104 = v101[1];
              int64x2_t v105 = vzip1q_s64(v102, *v101);
              int64x2_t v106 = vzip2q_s64(v102, *v101);
              *int64x2_t v90 = v97;
              v90[1] = v98;
              v90[2] = v105;
              v90[3] = v106;
              v90[4] = v99;
              v90[5] = v100;
              v90[6] = vzip1q_s64(v103, v104);
              v90[7] = vzip2q_s64(v103, v104);
              v90 += 8;
              char v107 = 127;
            }
            *v79++ = v107;
            v89 += 2;
          }
          while (v89 != 16);
          a7 = v198;
          int v43 = v20 & v180;
          unsigned int v88 = v41 + 1;
          if (v209)
          {
LABEL_47:
            memcpy(v81, v86, 0x400uLL);
            uint64_t v38 = 2 * a11;
            uint64_t v37 = 4 * a11;
            uint64_t result = v206;
          }
LABEL_48:
          BOOL v21 = v41 == v199 >> 4;
          unsigned int v41 = v88;
        }
        while (!v21);
        BOOL v21 = v20++ == v186;
      }
      while (!v21);
    }
  }
  return result;
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, int a12)
{
  uint64_t v175 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  uint64_t v17 = a1;
  unsigned int v149 = a8;
  unsigned int v18 = a8 >> 4;
  unsigned int v133 = a8 + a10 - 1;
  unsigned int v135 = v133 >> 4;
  unsigned int v19 = *(unsigned __int8 *)(*(void *)(a1 + 208) + 88);
  unsigned int v20 = *(_DWORD *)(a1 + 112);
  uint64_t v150 = v17;
  if (*(void *)(v17 + 168))
  {
    __int16 CacheMode = IOSurfaceGetCacheMode();
    uint64_t v17 = v150;
    int v22 = CacheMode & 0xF00;
  }
  else
  {
    int v22 = 0;
  }
  BOOL v23 = (v22 & 0xD00) == 0 || v22 == 768;
  int v24 = v22 & 0xE00;
  int v26 = !v23 && v24 != 1024;
  int v154 = v26;
  BOOL isLevelTiled = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::isLevelTiled(v17, *(_DWORD *)(v17 + 144) + a12);
  uint64_t v28 = v150;
  BOOL v143 = isLevelTiled;
  if (v18 <= v135)
  {
    unsigned int v142 = a7 + a9 - 1;
    unsigned int v132 = a7 >> 4;
    if (a7 >> 4 <= v142 >> 4)
    {
      unsigned int v129 = a5 - 1;
      unsigned int v131 = (a6 - 1) >> 4;
      int v152 = ((a5 - 1) & 0xF) + 1;
      unsigned int v153 = (a5 - 1) >> 4;
      int v130 = ((a6 - 1) & 0xF) + 1;
      uint32x2_t v29 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0xF0000000FLL);
      int8x8_t v30 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v29, 4uLL))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x2000000020, v29));
      __int32 v140 = v30.i32[0] | v30.i32[1];
      int8x8_t v139 = v30;
      BOOL v137 = v30.i32[0] != 0;
      BOOL v138 = v30.i32[1] != 0;
      unint64_t v128 = 8 * v20 * (unint64_t)v19;
      unsigned int v141 = a7;
      do
      {
        unsigned int v31 = (16 * v18) | 0xF;
        if (16 * v18 <= v149) {
          int v32 = v149;
        }
        else {
          int v32 = 16 * v18;
        }
        unsigned int v33 = v132;
        if (v133 < v31) {
          unsigned int v31 = v133;
        }
        int v136 = v32 - 16 * v18;
        int v147 = v31 - v32 + 1;
        unsigned int v148 = 16 * v18;
        if (v18 == v131) {
          unsigned int v34 = v130;
        }
        else {
          unsigned int v34 = 16;
        }
        uint64_t v146 = a3 + (v32 - v149) * a11;
        unsigned int v151 = v34;
        do
        {
          unsigned int v35 = 16 * v33;
          unsigned int v36 = 16 * (v33 + 1) - 1;
          if (16 * v33 <= a7) {
            int v37 = a7;
          }
          else {
            int v37 = 16 * v33;
          }
          if (v142 < v36) {
            unsigned int v36 = v142;
          }
          int v38 = v36 - v37 + 1;
          if (v33 == v153) {
            unsigned int v39 = v152;
          }
          else {
            unsigned int v39 = 16;
          }
          BOOL v40 = 1;
          if (v148 >= v149 && v35 >= a7)
          {
            int v41 = v152;
            if (v33 != v153) {
              int v41 = 16;
            }
            BOOL v40 = v38 != v41 || v147 != v34;
          }
          if (v143)
          {
            unsigned int v62 = 0;
            uint64_t v63 = v128 >> (*(unsigned char *)(v28 + 57) != 0);
            char v64 = 1;
            if (v63 > 127)
            {
              if (v63 > 511)
              {
                if (v63 == 512)
                {
                  unsigned int v62 = 16;
                  char v65 = 1;
                  unsigned int v66 = 16;
                }
                else
                {
                  char v65 = 1;
                  unsigned int v66 = 0;
                  if (v63 == 1024)
                  {
                    unsigned int v66 = 8;
                    unsigned int v62 = 16;
                  }
                }
              }
              else if (v63 == 128)
              {
                char v64 = 0;
                char v65 = 0;
                unsigned int v62 = 32;
                unsigned int v66 = 32;
              }
              else
              {
                char v65 = 1;
                unsigned int v66 = 0;
                if (v63 == 256)
                {
                  char v64 = 0;
                  unsigned int v66 = 16;
                  unsigned int v62 = 32;
                }
              }
            }
            else
            {
              char v65 = 1;
              unsigned int v66 = 0;
              switch(v63)
              {
                case 4:
                  char v64 = 0;
                  char v65 = 0;
                  unsigned int v66 = 128;
                  unsigned int v62 = 256;
                  break;
                case 5:
                case 6:
                case 7:
                case 9:
                case 10:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 17:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                  break;
                case 8:
                  char v64 = 0;
                  char v65 = 0;
                  unsigned int v62 = 128;
                  unsigned int v66 = 128;
                  break;
                case 16:
                  char v64 = 0;
                  char v65 = 0;
                  unsigned int v66 = 64;
                  unsigned int v62 = 128;
                  break;
                case 32:
                  char v64 = 0;
                  char v65 = 0;
                  unsigned int v62 = 64;
                  unsigned int v66 = 64;
                  break;
                default:
                  if (v63 == 64)
                  {
                    char v64 = 0;
                    char v65 = 0;
                    unsigned int v66 = 32;
                    unsigned int v62 = 64;
                  }
                  break;
              }
            }
            unsigned int v119 = (v62 >> 4) - 1;
            if (v64)
            {
              unsigned int v120 = 0;
              if (v65) {
                goto LABEL_161;
              }
LABEL_150:
              unsigned int v121 = 32 - __clz(~(-1 << -(char)__clz(((v66 + 15) >> 4) - 1)));
              if (v121 | v120) {
                goto LABEL_151;
              }
LABEL_162:
              uint64_t v123 = 0;
            }
            else
            {
              unsigned int v120 = 32 - __clz(~(-1 << -(char)__clz(v119)));
              if ((v65 & 1) == 0) {
                goto LABEL_150;
              }
LABEL_161:
              unsigned int v121 = 0;
              if (!v120) {
                goto LABEL_162;
              }
LABEL_151:
              int v122 = 0;
              uint64_t v123 = 0;
              int v124 = v33 & v119;
              BOOL v125 = v120 != 0;
              BOOL v126 = v121 != 0;
              int v127 = 1;
              do
              {
                --v120;
                if (v125) {
                  v123 |= (unint64_t)(v127 & v124) << v122++;
                }
                else {
                  unsigned int v120 = 0;
                }
                --v121;
                if (v126) {
                  v123 |= (unint64_t)(v127 & v18 & ((v66 >> 4) - 1)) << v122++;
                }
                else {
                  unsigned int v121 = 0;
                }
                v127 *= 2;
                --v122;
                BOOL v126 = v121 != 0;
                BOOL v125 = v120 != 0;
              }
              while (v121 | v120);
            }
            unint64_t v50 = ((unint64_t)(v35 / v62 + v148 / v66 * ((v62 + v129) / v62)) << 14) + (v123 << 10);
            goto LABEL_59;
          }
          if (v140)
          {
            int v43 = 0;
            uint64_t v44 = 0;
            int v45 = 1;
            BOOL v46 = v137;
            BOOL v47 = v138;
            __int32 v49 = v139.i32[0];
            __int32 v48 = v139.i32[1];
            do
            {
              --v48;
              if (v47) {
                v44 |= (unint64_t)(v45 & v33) << v43++;
              }
              else {
                __int32 v48 = 0;
              }
              --v49;
              if (v46) {
                v44 |= (unint64_t)(v45 & v18) << v43++;
              }
              else {
                __int32 v49 = 0;
              }
              v45 *= 2;
              --v43;
              BOOL v46 = v49 != 0;
              BOOL v47 = v48 != 0;
            }
            while (v49 | v48);
          }
          else
          {
            uint64_t v44 = 0;
          }
          unint64_t v50 = v44 << 10;
LABEL_59:
          unsigned int v51 = *(_DWORD *)(v28 + 128) >> (*(unsigned char *)(v28 + 144) + a12);
          if (v51 <= 1) {
            unsigned int v51 = 1;
          }
          unsigned int v52 = v51 + 15;
          if (v52 < 0x20) {
            unsigned int v53 = 0;
          }
          else {
            unsigned int v53 = 32 - __clz(~(-1 << -(char)__clz((v52 >> 4) - 1)));
          }
          unsigned int v54 = *(_DWORD *)(v28 + 132) >> (*(unsigned char *)(v28 + 144) + a12);
          if (v54 <= 1) {
            unsigned int v54 = 1;
          }
          unsigned int v55 = v54 + 15;
          if (v55 < 0x20)
          {
            unsigned int v56 = 0;
            if (!v53)
            {
LABEL_81:
              uint64_t v58 = 0;
              goto LABEL_82;
            }
          }
          else
          {
            unsigned int v56 = 32 - __clz(~(-1 << -(char)__clz((v55 >> 4) - 1)));
            if (!(v56 | v53)) {
              goto LABEL_81;
            }
          }
          int v57 = 0;
          uint64_t v58 = 0;
          BOOL v59 = v53 != 0;
          BOOL v60 = v56 != 0;
          int v61 = 1;
          do
          {
            --v53;
            if (v59) {
              v58 |= (unint64_t)(v61 & v33) << v57++;
            }
            else {
              unsigned int v53 = 0;
            }
            --v56;
            if (v60) {
              v58 |= (unint64_t)(v61 & v18) << v57++;
            }
            else {
              unsigned int v56 = 0;
            }
            v61 *= 2;
            --v57;
            BOOL v60 = v56 != 0;
            BOOL v59 = v53 != 0;
          }
          while (v56 | v53);
LABEL_82:
          int v67 = v39 < 0x10 || v40;
          unsigned int v68 = (char *)(a4 + 8 * v58);
          unint64_t v69 = v146 + 4 * (v37 - a7);
          unsigned int v70 = (int64x2_t *)(a2 + v50);
          if (v34 < 0x10) {
            int v71 = 1;
          }
          else {
            int v71 = v67;
          }
          if (v154)
          {
            if (!v71)
            {
              BOOL v75 = (int64x2_t *)__dst;
LABEL_95:
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock(v69, a11, (unint64_t)v75, v68, v39, v34);
              a7 = v141;
              goto LABEL_132;
            }
            char v72 = v39;
            int v73 = v38;
            int v74 = v37;
            memcpy(__dst, v70, sizeof(__dst));
            int v37 = v74;
            BOOL v75 = (int64x2_t *)__dst;
            int v38 = v73;
            unsigned int v35 = 16 * v33;
            LOBYTE(v39) = v72;
            LOBYTE(v34) = v151;
            uint64_t v28 = v150;
          }
          else
          {
            BOOL v75 = v70;
            if (!v71) {
              goto LABEL_95;
            }
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE14ELj1ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = v28;
          uint64_t v156 = v75;
          unsigned __int8 v164 = v39;
          unsigned __int8 v165 = v34;
          unsigned int v160 = v136;
          unsigned int v161 = v37 - v35;
          int64x2_t v157 = v68;
          unint64_t v158 = v69;
          uint64_t v159 = a11;
          unsigned int v162 = v147;
          unsigned int v163 = v38;
          if (v40)
          {
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(v28 + 8) + 7384), block);
            a7 = v141;
            goto LABEL_132;
          }
          BOOL v76 = (int64x2_t *)((char *)v75
                            + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v167, 64, v75, *v68));
          int v77 = (int64x2_t *)((char *)v76
                            + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v169, 64, v76, v68[1]));
          int v78 = (int64x2_t *)((char *)v77
                            + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v168, 64, v77, v68[2]));
          int v79 = (int64x2_t *)((char *)v78
                            + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v170, 64, v78, v68[3]));
          uint64_t v80 = (int64x2_t *)((char *)v79
                            + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v171, 64, v79, v68[4]));
          int32x4_t v81 = (int64x2_t *)((char *)v80
                            + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v173, 64, v80, v68[5]));
          uint64_t v82 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v172, 64, v81, v68[6]);
          AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v174, 64, (int64x2_t *)((char *)v81 + v82), v68[7]);
          uint64_t v83 = v162;
          a7 = v141;
          if (v162 && v163)
          {
            uint64_t v84 = 0;
            unint64_t v85 = (unint64_t)v160 << 6;
            uint64_t v86 = 4 * v161;
            int64x2_t v87 = &v167[0].i8[v85 + v86];
            unint64_t v88 = v158;
            uint64_t v89 = v159;
            unint64_t v90 = 4 * v163;
            if (v90 <= 1) {
              unint64_t v91 = 1;
            }
            else {
              unint64_t v91 = 4 * v163;
            }
            unint64_t v92 = v85 + v86;
            uint64_t v93 = &v167[0].i8[v85 + v86];
            if (v91) {
              BOOL v94 = (v91 - 1) >> 32 == 0;
            }
            else {
              BOOL v94 = 0;
            }
            uint64_t v95 = v91 & 0x3FFFFFFE0;
            uint64_t v96 = v91 & 0x3FFFFFFF8;
            char v98 = !v94 || v91 < 8;
            int64x2_t v99 = &v167[1].i8[v92];
            int64x2_t v100 = (long long *)(v158 + 16);
            unint64_t v101 = v87;
            unint64_t v102 = v158;
            do
            {
              int64x2_t v103 = (char *)(v88 + v89 * v84);
              int64x2_t v104 = &v87[64 * v84];
              if ((unint64_t)(&v93[64 * v84] - v103) < 0x20) {
                char v105 = 1;
              }
              else {
                char v105 = v98;
              }
              if (v105)
              {
                int v106 = 0;
                goto LABEL_128;
              }
              if (v91 >= 0x20)
              {
                uint64_t v108 = v100;
                uint64_t v109 = v99;
                uint64_t v110 = v91 & 0x3FFFFFFE0;
                do
                {
                  long long v111 = *v108;
                  *((_OWORD *)v109 - 1) = *(v108 - 1);
                  *(_OWORD *)uint64_t v109 = v111;
                  v109 += 32;
                  v108 += 2;
                  v110 -= 32;
                }
                while (v110);
                if (v91 == v95) {
                  goto LABEL_111;
                }
                uint64_t v107 = v91 & 0x3FFFFFFE0;
                if ((v91 & 0x18) == 0)
                {
                  v103 += v95;
                  v104 += v95;
                  int v106 = v91 & 0xFFFFFFE0;
                  goto LABEL_128;
                }
              }
              else
              {
                uint64_t v107 = 0;
              }
              v104 += v96;
              uint64_t v112 = v107 - v96;
              uint64_t v113 = (uint64_t *)(v102 + v107);
              char v114 = &v101[v107];
              do
              {
                uint64_t v115 = *v113++;
                *(void *)char v114 = v115;
                v114 += 8;
                v112 += 8;
              }
              while (v112);
              if (v91 == v96) {
                goto LABEL_111;
              }
              v103 += v96;
              int v106 = v91 & 0xFFFFFFF8;
LABEL_128:
              unsigned int v116 = v106 + 1;
              do
              {
                char v117 = *v103++;
                *v104++ = v117;
              }
              while (v90 > v116++);
LABEL_111:
              ++v84;
              v99 += 64;
              int64x2_t v100 = (long long *)((char *)v100 + v89);
              v102 += v89;
              v101 += 64;
            }
            while (v84 != v83);
          }
          AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v167, 64, (unint64_t)v156, v157, v164, v165);
LABEL_132:
          if (v154) {
            memcpy(v70, v75, 0x400uLL);
          }
          BOOL v23 = v33++ == v142 >> 4;
          uint64_t v28 = v150;
          unsigned int v34 = v151;
        }
        while (!v23);
        BOOL v23 = v18++ == v135;
      }
      while (!v23);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, int a12)
{
  uint64_t v228 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v203 = a8;
  unsigned int v17 = a8 >> 4;
  unsigned int v184 = a8 + a10 - 1;
  unsigned int v186 = v184 >> 4;
  unsigned int v18 = *(unsigned __int8 *)(*(void *)(a1 + 208) + 88);
  unsigned int v19 = *(_DWORD *)(a1 + 112);
  uint64_t v204 = a1;
  if (*(void *)(a1 + 168)) {
    int v20 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v20 = 0;
  }
  BOOL v21 = (v20 & 0xD00) == 0 || v20 == 768;
  int v22 = v20 & 0xE00;
  int v24 = !v21 && v22 != 1024;
  int v207 = v24;
  BOOL isLevelTiled = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::isLevelTiled(a1, *(_DWORD *)(a1 + 144) + a12);
  uint64_t v26 = a1;
  BOOL v197 = isLevelTiled;
  if (v17 <= v186)
  {
    unsigned int v196 = a7 + a9 - 1;
    unsigned int v183 = a7 >> 4;
    if (a7 >> 4 <= v196 >> 4)
    {
      unsigned int v180 = a5 - 1;
      unsigned int v206 = (a5 - 1) >> 4;
      int v205 = ((a5 - 1) & 0xF) + 1;
      int v181 = ((a6 - 1) & 0xF) + 1;
      unsigned int v182 = (a6 - 1) >> 4;
      unint64_t v27 = v19 * (unint64_t)v18;
      uint32x2_t v28 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0xF0000000FLL);
      int8x8_t v29 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v28, 4uLL))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x2000000020, v28));
      __int32 v194 = v29.i32[0] | v29.i32[1];
      int8x8_t v192 = v29;
      BOOL v190 = v29.i32[0] != 0;
      BOOL v191 = v29.i32[1] != 0;
      uint64_t v30 = a11;
      unint64_t v179 = 8 * v27;
      uint64_t v31 = 4 * a11;
      uint64_t v32 = 2 * a11;
      unsigned int v195 = a7;
      do
      {
        unsigned int v33 = (16 * v17) | 0xF;
        if (16 * v17 <= v203) {
          int v34 = v203;
        }
        else {
          int v34 = 16 * v17;
        }
        unsigned int v35 = v183;
        if (v184 < v33) {
          unsigned int v33 = v184;
        }
        int v189 = v34 - 16 * v17;
        int v201 = v33 - v34 + 1;
        unsigned int v202 = 16 * v17;
        if (v17 == v182) {
          unsigned int v36 = v181;
        }
        else {
          unsigned int v36 = 16;
        }
        uint64_t v200 = a3 + (v34 - v203) * v30;
        unsigned int v187 = v36;
        do
        {
          unsigned int v37 = 16 * v35;
          unsigned int v38 = 16 * (v35 + 1) - 1;
          if (16 * v35 <= a7) {
            int v39 = a7;
          }
          else {
            int v39 = 16 * v35;
          }
          if (v196 < v38) {
            unsigned int v38 = v196;
          }
          int v40 = v38 - v39 + 1;
          if (v35 == v206) {
            unsigned int v41 = v205;
          }
          else {
            unsigned int v41 = 16;
          }
          BOOL v42 = 1;
          if (v202 >= v203 && v37 >= a7)
          {
            int v43 = v205;
            if (v35 != v206) {
              int v43 = 16;
            }
            BOOL v42 = v40 != v43 || v201 != v36;
          }
          if (v197)
          {
            unsigned int v64 = 0;
            uint64_t v65 = v179 >> (*(unsigned char *)(v26 + 57) != 0);
            char v66 = 1;
            if (v65 > 127)
            {
              if (v65 > 511)
              {
                if (v65 == 512)
                {
                  unsigned int v64 = 16;
                  char v67 = 1;
                  unsigned int v68 = 16;
                }
                else
                {
                  char v67 = 1;
                  unsigned int v68 = 0;
                  if (v65 == 1024)
                  {
                    unsigned int v68 = 8;
                    unsigned int v64 = 16;
                  }
                }
              }
              else if (v65 == 128)
              {
                char v66 = 0;
                char v67 = 0;
                unsigned int v64 = 32;
                unsigned int v68 = 32;
              }
              else
              {
                char v67 = 1;
                unsigned int v68 = 0;
                if (v65 == 256)
                {
                  char v66 = 0;
                  unsigned int v68 = 16;
                  unsigned int v64 = 32;
                }
              }
            }
            else
            {
              char v67 = 1;
              unsigned int v68 = 0;
              switch(v65)
              {
                case 4:
                  char v66 = 0;
                  char v67 = 0;
                  unsigned int v68 = 128;
                  unsigned int v64 = 256;
                  break;
                case 5:
                case 6:
                case 7:
                case 9:
                case 10:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 17:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                  break;
                case 8:
                  char v66 = 0;
                  char v67 = 0;
                  unsigned int v64 = 128;
                  unsigned int v68 = 128;
                  break;
                case 16:
                  char v66 = 0;
                  char v67 = 0;
                  unsigned int v68 = 64;
                  unsigned int v64 = 128;
                  break;
                case 32:
                  char v66 = 0;
                  char v67 = 0;
                  unsigned int v64 = 64;
                  unsigned int v68 = 64;
                  break;
                default:
                  if (v65 == 64)
                  {
                    char v66 = 0;
                    char v67 = 0;
                    unsigned int v68 = 32;
                    unsigned int v64 = 64;
                  }
                  break;
              }
            }
            unsigned int v170 = (v64 >> 4) - 1;
            if (v66)
            {
              unsigned int v171 = 0;
              if (v67) {
                goto LABEL_186;
              }
LABEL_175:
              unsigned int v172 = 32 - __clz(~(-1 << -(char)__clz(((v68 + 15) >> 4) - 1)));
              if (v172 | v171) {
                goto LABEL_176;
              }
LABEL_187:
              uint64_t v174 = 0;
            }
            else
            {
              unsigned int v171 = 32 - __clz(~(-1 << -(char)__clz(v170)));
              if ((v67 & 1) == 0) {
                goto LABEL_175;
              }
LABEL_186:
              unsigned int v172 = 0;
              if (!v171) {
                goto LABEL_187;
              }
LABEL_176:
              int v173 = 0;
              uint64_t v174 = 0;
              int v175 = v35 & v170;
              BOOL v176 = v171 != 0;
              BOOL v177 = v172 != 0;
              int v178 = 1;
              do
              {
                --v171;
                if (v176) {
                  v174 |= (unint64_t)(v178 & v175) << v173++;
                }
                else {
                  unsigned int v171 = 0;
                }
                --v172;
                if (v177) {
                  v174 |= (unint64_t)(v178 & v17 & ((v68 >> 4) - 1)) << v173++;
                }
                else {
                  unsigned int v172 = 0;
                }
                v178 *= 2;
                --v173;
                BOOL v177 = v172 != 0;
                BOOL v176 = v171 != 0;
              }
              while (v172 | v171);
            }
            unint64_t v52 = ((unint64_t)(v37 / v64 + v202 / v68 * ((v64 + v180) / v64)) << 14) + (v174 << 10);
            goto LABEL_59;
          }
          if (v194)
          {
            int v45 = 0;
            uint64_t v46 = 0;
            int v47 = 1;
            BOOL v48 = v190;
            BOOL v49 = v191;
            __int32 v51 = v192.i32[0];
            __int32 v50 = v192.i32[1];
            do
            {
              --v50;
              if (v49) {
                v46 |= (unint64_t)(v47 & v35) << v45++;
              }
              else {
                __int32 v50 = 0;
              }
              --v51;
              if (v48) {
                v46 |= (unint64_t)(v47 & v17) << v45++;
              }
              else {
                __int32 v51 = 0;
              }
              v47 *= 2;
              --v45;
              BOOL v48 = v51 != 0;
              BOOL v49 = v50 != 0;
            }
            while (v51 | v50);
          }
          else
          {
            uint64_t v46 = 0;
          }
          unint64_t v52 = v46 << 10;
LABEL_59:
          unsigned int v53 = *(_DWORD *)(v26 + 128) >> (*(unsigned char *)(v26 + 144) + a12);
          if (v53 <= 1) {
            unsigned int v53 = 1;
          }
          unsigned int v54 = v53 + 15;
          if (v54 < 0x20) {
            unsigned int v55 = 0;
          }
          else {
            unsigned int v55 = 32 - __clz(~(-1 << -(char)__clz((v54 >> 4) - 1)));
          }
          unsigned int v56 = *(_DWORD *)(v26 + 132) >> (*(unsigned char *)(v26 + 144) + a12);
          if (v56 <= 1) {
            unsigned int v56 = 1;
          }
          unsigned int v57 = v56 + 15;
          if (v57 < 0x20)
          {
            unsigned int v58 = 0;
            if (!v55)
            {
LABEL_81:
              uint64_t v60 = 0;
              goto LABEL_82;
            }
          }
          else
          {
            unsigned int v58 = 32 - __clz(~(-1 << -(char)__clz((v57 >> 4) - 1)));
            if (!(v58 | v55)) {
              goto LABEL_81;
            }
          }
          int v59 = 0;
          uint64_t v60 = 0;
          BOOL v61 = v55 != 0;
          BOOL v62 = v58 != 0;
          int v63 = 1;
          do
          {
            --v55;
            if (v61) {
              v60 |= (unint64_t)(v63 & v35) << v59++;
            }
            else {
              unsigned int v55 = 0;
            }
            --v58;
            if (v62) {
              v60 |= (unint64_t)(v63 & v17) << v59++;
            }
            else {
              unsigned int v58 = 0;
            }
            v63 *= 2;
            --v59;
            BOOL v62 = v58 != 0;
            BOOL v61 = v55 != 0;
          }
          while (v58 | v55);
LABEL_82:
          int v69 = v41 < 0x10 || v42;
          unsigned int v70 = (unsigned __int8 *)(a4 + 8 * v60);
          uint64_t v71 = v200 + 4 * (v39 - a7);
          char v72 = (int64x2_t *)(a2 + v52);
          if (v36 < 0x10) {
            int v73 = 1;
          }
          else {
            int v73 = v69;
          }
          if (v207)
          {
            if (!v73)
            {
              int v77 = (int64x2_t *)__dst;
LABEL_96:
              uint64_t v79 = 0;
              uint64_t v80 = v77;
              do
              {
                uint64_t v98 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,1u>::kSubblockPositions[v79 + 1];
                uint64_t v99 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,1u>::kSubblockPositions[v79];
                unsigned int v100 = (v41 - 8 * v99) & ~((int)(v41 - 8 * v99) >> 31);
                if (v100 >= 8) {
                  unsigned int v100 = 8;
                }
                unsigned int v101 = (v36 - 4 * v98) & ~((int)(v36 - 4 * v98) >> 31);
                if (v101 >= 4) {
                  unsigned int v101 = 4;
                }
                if (v100) {
                  BOOL v102 = v101 == 0;
                }
                else {
                  BOOL v102 = 1;
                }
                if (v102)
                {
                  char v97 = 0;
                }
                else
                {
                  int32x4_t v81 = (int64x2_t *)(v71 + v31 * v98 + 32 * v99);
                  uint64_t v82 = (int64x2_t *)((char *)v81 + v30);
                  int64x2_t v84 = *v81;
                  int64x2_t v85 = v81[1];
                  uint64_t v83 = (int64x2_t *)((char *)v81 + v32);
                  int64x2_t v86 = v82[1];
                  int64x2_t v87 = vzip1q_s64(v84, *v82);
                  int64x2_t v88 = vzip2q_s64(v84, *v82);
                  int64x2_t v89 = vzip1q_s64(v85, v86);
                  int64x2_t v90 = vzip2q_s64(v85, v86);
                  int64x2_t v92 = *v83;
                  int64x2_t v93 = v83[1];
                  unint64_t v91 = (int64x2_t *)((char *)v83 + v30);
                  int64x2_t v94 = v91[1];
                  int64x2_t v95 = vzip1q_s64(v92, *v91);
                  int64x2_t v96 = vzip2q_s64(v92, *v91);
                  *uint64_t v80 = v87;
                  v80[1] = v88;
                  v80[2] = v95;
                  v80[3] = v96;
                  v80[4] = v89;
                  v80[5] = v90;
                  v80[6] = vzip1q_s64(v93, v94);
                  v80[7] = vzip2q_s64(v93, v94);
                  v80 += 8;
                  char v97 = 127;
                }
                *v70++ = v97;
                v79 += 2;
              }
              while (v79 != 16);
              a7 = v195;
              if (v207) {
                goto LABEL_158;
              }
              goto LABEL_27;
            }
            int v74 = v72;
            int v75 = v40;
            BOOL v76 = v42;
            memcpy(__dst, v72, sizeof(__dst));
            int v77 = (int64x2_t *)__dst;
            char v72 = v74;
            BOOL v42 = v76;
            uint64_t v30 = a11;
            unsigned int v36 = v187;
            unsigned int v37 = 16 * v35;
            int v40 = v75;
            uint64_t v26 = v204;
          }
          else
          {
            int v77 = v72;
            if (!v73) {
              goto LABEL_96;
            }
          }
          __int32 v193 = v72;
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE14ELj1ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = v26;
          int v209 = v77;
          unsigned __int8 v217 = v41;
          unsigned __int8 v218 = v36;
          unsigned int v213 = v189;
          unsigned int v214 = v39 - v37;
          unsigned int v210 = v70;
          uint64_t v211 = v71;
          uint64_t v212 = v30;
          unsigned int v215 = v201;
          unsigned int v216 = v40;
          if (v42)
          {
            int v78 = v77;
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(v26 + 8) + 7384), block);
            int v77 = v78;
            uint64_t v26 = v204;
            a7 = v195;
            uint64_t v32 = 2 * a11;
            uint64_t v31 = 4 * a11;
            char v72 = v193;
            if (!v207) {
              goto LABEL_27;
            }
LABEL_158:
            memcpy(v72, v77, 0x400uLL);
            uint64_t v32 = 2 * a11;
            uint64_t v31 = 4 * a11;
            uint64_t v26 = v204;
            goto LABEL_27;
          }
          BOOL v188 = v77;
          int64x2_t v103 = (int64x2_t *)((char *)v77
                             + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v220, 64, v77, *v70));
          int64x2_t v104 = (int64x2_t *)((char *)v103
                             + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v222, 64, v103, v70[1]));
          char v105 = (int64x2_t *)((char *)v104
                             + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v221, 64, v104, v70[2]));
          int v106 = (int64x2_t *)((char *)v105
                             + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v223, 64, v105, v70[3]));
          uint64_t v107 = (int64x2_t *)((char *)v106
                             + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v224, 64, v106, v70[4]));
          uint64_t v108 = (int64x2_t *)((char *)v107
                             + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v226, 64, v107, v70[5]));
          uint64_t v109 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v225, 64, v108, v70[6]);
          AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v227, 64, (int64x2_t *)((char *)v108 + v109), v70[7]);
          uint64_t v110 = v215;
          if (v215 && v216)
          {
            uint64_t v111 = 0;
            unint64_t v112 = (unint64_t)v213 << 6;
            uint64_t v113 = 4 * v214;
            char v114 = &v220[0].i8[v112 + v113];
            uint64_t v115 = v211;
            uint64_t v116 = v212;
            unint64_t v117 = 4 * v216;
            if (v117 <= 1) {
              unint64_t v118 = 1;
            }
            else {
              unint64_t v118 = 4 * v216;
            }
            unint64_t v119 = v112 + v113;
            unsigned int v120 = &v220[0].i8[v112 + v113];
            if (v118) {
              BOOL v121 = (v118 - 1) >> 32 == 0;
            }
            else {
              BOOL v121 = 0;
            }
            uint64_t v122 = v118 & 0x3FFFFFFE0;
            uint64_t v123 = v118 & 0x3FFFFFFF8;
            char v125 = !v121 || v118 < 8;
            BOOL v126 = &v220[1].i8[v119];
            int v127 = (long long *)(v211 + 16);
            unint64_t v128 = v114;
            uint64_t v129 = v211;
            do
            {
              int v130 = (char *)(v115 + v116 * v111);
              unsigned int v131 = &v114[64 * v111];
              if ((unint64_t)(&v120[64 * v111] - v130) < 0x20) {
                char v132 = 1;
              }
              else {
                char v132 = v125;
              }
              if (v132)
              {
                int v133 = 0;
                goto LABEL_142;
              }
              if (v118 >= 0x20)
              {
                unsigned int v135 = v127;
                int v136 = v126;
                uint64_t v137 = v118 & 0x3FFFFFFE0;
                do
                {
                  long long v138 = *v135;
                  *((_OWORD *)v136 - 1) = *(v135 - 1);
                  *(_OWORD *)int v136 = v138;
                  v136 += 32;
                  v135 += 2;
                  v137 -= 32;
                }
                while (v137);
                if (v118 == v122) {
                  goto LABEL_125;
                }
                uint64_t v134 = v118 & 0x3FFFFFFE0;
                if ((v118 & 0x18) == 0)
                {
                  v130 += v122;
                  v131 += v122;
                  int v133 = v118 & 0xFFFFFFE0;
                  goto LABEL_142;
                }
              }
              else
              {
                uint64_t v134 = 0;
              }
              v131 += v123;
              uint64_t v139 = v134 - v123;
              __int32 v140 = (uint64_t *)(v129 + v134);
              unsigned int v141 = &v128[v134];
              do
              {
                uint64_t v142 = *v140++;
                *(void *)unsigned int v141 = v142;
                v141 += 8;
                v139 += 8;
              }
              while (v139);
              if (v118 == v123) {
                goto LABEL_125;
              }
              v130 += v123;
              int v133 = v118 & 0xFFFFFFF8;
LABEL_142:
              unsigned int v143 = v133 + 1;
              do
              {
                char v144 = *v130++;
                *v131++ = v144;
              }
              while (v117 > v143++);
LABEL_125:
              ++v111;
              v126 += 64;
              int v127 = (long long *)((char *)v127 + v116);
              v129 += v116;
              v128 += 64;
            }
            while (v111 != v110);
          }
          uint64_t v146 = 0;
          int v147 = v209;
          unsigned int v148 = (char *)v210;
          int v149 = v217;
          int v150 = v218;
          a7 = v195;
          uint64_t v26 = v204;
          uint64_t v32 = 2 * a11;
          uint64_t v31 = 4 * a11;
          char v72 = v193;
          do
          {
            uint64_t v165 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,1u>::kSubblockPositions[v146 + 1];
            uint64_t v166 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,1u>::kSubblockPositions[v146];
            unsigned int v167 = (v149 - 8 * v166) & ~((v149 - 8 * (int)v166) >> 31);
            if (v167 >= 8) {
              unsigned int v167 = 8;
            }
            unsigned int v168 = (v150 - 4 * v165) & ~((v150 - 4 * (int)v165) >> 31);
            if (v168 >= 4) {
              unsigned int v168 = 4;
            }
            if (v167) {
              BOOL v169 = v168 == 0;
            }
            else {
              BOOL v169 = 1;
            }
            if (v169)
            {
              char v164 = 0;
            }
            else
            {
              unsigned int v151 = &v220[16 * v165 + 2 * v166];
              int64x2_t v152 = v151[1];
              int64x2_t v153 = v151[4];
              int64x2_t v154 = v151[5];
              int64x2_t v155 = vzip1q_s64(*v151, v153);
              int64x2_t v156 = vzip2q_s64(*v151, v153);
              int64x2_t v157 = vzip1q_s64(v152, v154);
              int64x2_t v158 = vzip2q_s64(v152, v154);
              int64x2_t v159 = v151[8];
              int64x2_t v160 = v151[9];
              v151 += 12;
              int64x2_t v161 = v151[1];
              int64x2_t v162 = vzip1q_s64(v159, *v151);
              int64x2_t v163 = vzip2q_s64(v159, *v151);
              *int v147 = v155;
              v147[1] = v156;
              v147[2] = v162;
              v147[3] = v163;
              v147[4] = v157;
              v147[5] = v158;
              v147[6] = vzip1q_s64(v160, v161);
              v147[7] = vzip2q_s64(v160, v161);
              v147 += 8;
              char v164 = 127;
            }
            *v148++ = v164;
            v146 += 2;
          }
          while (v146 != 16);
          int v77 = v188;
          if (v207) {
            goto LABEL_158;
          }
LABEL_27:
          BOOL v21 = v35++ == v196 >> 4;
        }
        while (!v21);
        BOOL v21 = v17++ == v186;
      }
      while (!v21);
    }
  }
}

uint64_t AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10, uint64_t a11, char a12)
{
  uint64_t v12 = MEMORY[0x270FA5388](a1);
  unsigned int v14 = v13;
  unsigned int v16 = v15;
  unsigned int v18 = v17;
  unsigned int v20 = v19;
  uint64_t v152 = v21;
  uint64_t v153 = v22;
  uint64_t v139 = v23;
  uint64_t v24 = v12;
  v182[112] = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(v12, 0);
  unsigned int v156 = v14;
  unsigned int v141 = v14 + a10 - 1;
  uint64_t v157 = v24;
  if (*(void *)(v24 + 168)) {
    int v25 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v25 = 0;
  }
  unsigned int v26 = v20 - 1;
  unsigned int v27 = v18 - 1;
  unsigned int v28 = v14 >> 4;
  unsigned int v140 = v141 >> 4;
  BOOL v29 = (v25 & 0xD00) == 0 || v25 == 768;
  int v30 = v25 & 0xE00;
  int v32 = !v29 && v30 != 1024;
  int v162 = v32;
  uint64_t result = v24;
  if (*(unsigned char *)(v24 + 232))
  {
    unsigned int v34 = *(unsigned __int8 *)(v24 + 255);
    unsigned int v35 = *(unsigned __int8 *)(v24 + 254);
    char v36 = __clz(v26);
    if (1 << v34 >= v18 || v20 >> v35)
    {
      if (!(v18 >> v34) && 1 << v35 < v20)
      {
        if (v18 < 2) {
          unsigned int v39 = 0;
        }
        else {
          unsigned int v39 = __clz(~(-1 << -(char)__clz(v27))) - 32;
        }
        v35 += v34 + v39;
        unsigned int v34 = -v39;
      }
    }
    else
    {
      unsigned int v37 = 32 - __clz(~(-1 << -v36));
      unsigned int v38 = v35 + v34;
      if (v20 < 2) {
        unsigned int v37 = 0;
      }
      unsigned int v34 = v38 - v37;
      unsigned int v35 = v37;
    }
    if (v20 < 2)
    {
      if (v35) {
        goto LABEL_27;
      }
    }
    else if (32 - __clz(~(-1 << -v36)) < v35)
    {
LABEL_27:
      BOOL v151 = 0;
LABEL_32:
      unsigned int v148 = v35 - 4;
      unsigned int v145 = v34 - 4;
      int v41 = -1 << *(unsigned char *)(*(void *)(v24 + 208) + 48);
      unsigned int v138 = (((~v41 + v20) & v41) + ~(-1 << v35)) >> v35;
      goto LABEL_33;
    }
    if (v18 < 2) {
      unsigned int v40 = 0;
    }
    else {
      unsigned int v40 = 32 - __clz(~(-1 << -(char)__clz(v27)));
    }
    BOOL v151 = v40 >= v34;
    goto LABEL_32;
  }
  BOOL v151 = 0;
  unsigned int v138 = 0;
  unsigned int v145 = 0;
  unsigned int v148 = 0;
LABEL_33:
  if (v28 <= v140)
  {
    unsigned int v150 = v16 + a9 - 1;
    unsigned int v137 = v16 >> 4;
    if (v16 >> 4 <= v150 >> 4)
    {
      unsigned int v160 = v26 >> 4;
      unsigned int v136 = v27 >> 4;
      int v159 = (v26 & 0xF) + 1;
      int v135 = (v27 & 0xF) + 1;
      uint32x2_t v42 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(v20, v18), (int32x2_t)0xF0000000FLL);
      int8x8_t v43 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v42, 4uLL))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x2000000020, v42));
      __int32 v146 = v43.i32[0] | v43.i32[1];
      int8x8_t v144 = v43;
      BOOL v142 = v43.i32[0] != 0;
      BOOL v143 = v43.i32[1] != 0;
      unsigned int v149 = v16;
      do
      {
        unsigned int v44 = (16 * v28) | 0xF;
        if (16 * v28 <= v156) {
          int v45 = v156;
        }
        else {
          int v45 = 16 * v28;
        }
        if (v141 < v44) {
          unsigned int v44 = v141;
        }
        int v147 = v45 - 16 * v28;
        int v155 = v44 - v45 + 1;
        unsigned int v46 = v137;
        if (v28 == v136) {
          unsigned int v47 = v135;
        }
        else {
          unsigned int v47 = 16;
        }
        uint64_t v154 = v139 + (v45 - v156) * a11;
        unsigned int v158 = v47;
        do
        {
          unsigned int v48 = 16 * v46;
          unsigned int v49 = 16 * (v46 + 1) - 1;
          if (16 * v46 <= v16) {
            int v50 = v16;
          }
          else {
            int v50 = 16 * v46;
          }
          if (v150 < v49) {
            unsigned int v49 = v150;
          }
          int v51 = v49 - v50 + 1;
          if (v46 == v160) {
            unsigned int v52 = v159;
          }
          else {
            unsigned int v52 = 16;
          }
          BOOL v53 = 1;
          if (16 * v28 >= v156 && v48 >= v16)
          {
            int v54 = v159;
            if (v46 != v160) {
              int v54 = 16;
            }
            BOOL v53 = v51 != v54 || v155 != v47;
          }
          if (v151)
          {
            if (v148 | v145)
            {
              int v56 = 0;
              uint64_t v57 = 0;
              BOOL v58 = v145 != 0;
              int v59 = 1;
              BOOL v61 = v148 != 0;
              unsigned int v60 = v145;
              unsigned int v62 = v148;
              do
              {
                --v62;
                if (v61) {
                  v57 |= (unint64_t)(v46 & ~(-1 << v148) & v59) << v56++;
                }
                else {
                  unsigned int v62 = 0;
                }
                --v60;
                if (v58) {
                  v57 |= (unint64_t)(v28 & ~(-1 << v145) & v59) << v56++;
                }
                else {
                  unsigned int v60 = 0;
                }
                v59 *= 2;
                --v56;
                BOOL v58 = v60 != 0;
                BOOL v61 = v62 != 0;
              }
              while (v60 | v62);
            }
            else
            {
              uint64_t v57 = 0;
            }
            uint64_t v70 = *(void *)(result + 320) * ((v46 >> v148) + (v28 >> v145) * v138) + (v57 << 12);
          }
          else
          {
            if (v146)
            {
              int v63 = 0;
              uint64_t v64 = 0;
              int v65 = 1;
              BOOL v66 = v142;
              BOOL v67 = v143;
              __int32 v69 = v144.i32[0];
              __int32 v68 = v144.i32[1];
              do
              {
                --v68;
                if (v67) {
                  v64 |= (unint64_t)(v65 & v46) << v63++;
                }
                else {
                  __int32 v68 = 0;
                }
                --v69;
                if (v66) {
                  v64 |= (unint64_t)(v65 & v28) << v63++;
                }
                else {
                  __int32 v69 = 0;
                }
                v65 *= 2;
                --v63;
                BOOL v66 = v69 != 0;
                BOOL v67 = v68 != 0;
              }
              while (v69 | v68);
            }
            else
            {
              uint64_t v64 = 0;
            }
            uint64_t v70 = v64 << 12;
          }
          unsigned int v71 = *(_DWORD *)(result + 128) >> (*(unsigned char *)(result + 144) + a12);
          if (v71 <= 1) {
            unsigned int v71 = 1;
          }
          unsigned int v72 = v71 + 15;
          if (v72 < 0x20) {
            unsigned int v73 = 0;
          }
          else {
            unsigned int v73 = 32 - __clz(~(-1 << -(char)__clz((v72 >> 4) - 1)));
          }
          unsigned int v74 = *(_DWORD *)(result + 132) >> (*(unsigned char *)(result + 144) + a12);
          if (v74 <= 1) {
            unsigned int v74 = 1;
          }
          unsigned int v75 = v74 + 15;
          if (v75 < 0x20) {
            unsigned int v76 = 0;
          }
          else {
            unsigned int v76 = 32 - __clz(~(-1 << -(char)__clz((v75 >> 4) - 1)));
          }
          if (v76 | v73)
          {
            int v77 = 0;
            uint64_t v78 = 0;
            BOOL v79 = v73 != 0;
            BOOL v80 = v76 != 0;
            int v81 = 1;
            do
            {
              --v73;
              if (v79) {
                v78 |= (unint64_t)(v81 & v46) << v77++;
              }
              else {
                unsigned int v73 = 0;
              }
              --v76;
              if (v80) {
                v78 |= (unint64_t)(v81 & v28) << v77++;
              }
              else {
                unsigned int v76 = 0;
              }
              v81 *= 2;
              --v77;
              BOOL v80 = v76 != 0;
              BOOL v79 = v73 != 0;
            }
            while (v76 | v73);
          }
          else
          {
            uint64_t v78 = 0;
          }
          int v83 = v52 < 0x10 || v53;
          int64x2_t v84 = (unsigned __int8 *)(v153 + 8 * v78);
          unsigned int v82 = v50 - v16;
          uint64_t v85 = v154 + 16 * (v50 - v16);
          int64x2_t v86 = (unsigned char *)(v152 + v70);
          if (v47 < 0x10) {
            int v87 = 1;
          }
          else {
            int v87 = v83;
          }
          __src = v86;
          if (v162)
          {
            if (!v87)
            {
              int64x2_t v86 = __dst;
LABEL_123:
              int64x2_t v89 = (unsigned char *)(v154 + 16 * v82);
              uint64_t v90 = a11;
              unint64_t v91 = (unint64_t)v86;
              int64x2_t v92 = (unsigned __int8 *)(v153 + 8 * v78);
              goto LABEL_157;
            }
            char v88 = v52;
            memcpy(__dst, __src, sizeof(__dst));
            LOBYTE(v52) = v88;
            int64x2_t v86 = __dst;
            LOBYTE(v47) = v158;
            uint64_t result = v157;
          }
          else if (!v87)
          {
            goto LABEL_123;
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE20ELj1ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = result;
          char v164 = v86;
          unsigned __int8 v172 = v52;
          unsigned __int8 v173 = v47;
          unsigned int v168 = v147;
          unsigned int v169 = v50 - v48;
          uint64_t v165 = v84;
          uint64_t v166 = v85;
          uint64_t v167 = a11;
          unsigned int v170 = v155;
          unsigned int v171 = v51;
          if (v53)
          {
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(result + 8) + 7384), block);
            goto LABEL_158;
          }
          unint64_t v93 = (unint64_t)&v86[AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)v175, 256, (unint64_t)v86, *v84)];
          unint64_t v94 = v93
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v177, 256, v93, v84[1]);
          unint64_t v95 = v94
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v176, 256, v94, v84[2]);
          unint64_t v96 = v95
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v178, 256, v95, v84[3]);
          unint64_t v97 = v96
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v179, 256, v96, v84[4]);
          unint64_t v98 = v97
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v181, 256, v97, v84[5]);
          uint64_t v99 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v180, 256, v98, v84[6]);
          AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)v182, 256, v98 + v99, v84[7]);
          uint64_t v100 = v170;
          if (v170 && v171)
          {
            uint64_t v101 = 0;
            unint64_t v102 = (unint64_t)v168 << 8;
            uint64_t v103 = 16 * v169;
            int64x2_t v104 = &v175[v102 + v103];
            uint64_t v105 = v166;
            uint64_t v106 = v167;
            unint64_t v107 = 16 * v171;
            if (v107 <= 1) {
              unint64_t v108 = 1;
            }
            else {
              unint64_t v108 = 16 * v171;
            }
            unint64_t v109 = v102 + v103;
            uint64_t v110 = &v175[v102 + v103];
            if (v108) {
              BOOL v111 = (v108 - 1) >> 32 == 0;
            }
            else {
              BOOL v111 = 0;
            }
            char v112 = !v111;
            uint64_t v113 = v108 & 0xFFFFFFFE0;
            uint64_t v114 = v108 & 0xFFFFFFFF0;
            uint64_t v115 = &v175[v109 + 16];
            uint64_t v116 = (long long *)(v166 + 16);
            unint64_t v117 = v104;
            uint64_t v118 = v166;
            do
            {
              unint64_t v119 = (char *)(v105 + v106 * v101);
              unsigned int v120 = &v104[256 * v101];
              if ((unint64_t)(&v110[256 * v101] - v119) < 0x20) {
                char v121 = 1;
              }
              else {
                char v121 = v112;
              }
              if (v121)
              {
                int v122 = 0;
                goto LABEL_153;
              }
              if (v108 >= 0x20)
              {
                unint64_t v128 = v116;
                uint64_t v129 = v115;
                uint64_t v130 = v108 & 0xFFFFFFFE0;
                do
                {
                  long long v131 = *v128;
                  *(v129 - 1) = *(v128 - 1);
                  *uint64_t v129 = v131;
                  v129 += 2;
                  v128 += 2;
                  v130 -= 32;
                }
                while (v130);
                if (v108 == v113) {
                  goto LABEL_136;
                }
                uint64_t v123 = v108 & 0xFFFFFFFE0;
                if ((v108 & 0x10) == 0)
                {
                  v119 += v113;
                  v120 += v113;
                  int v122 = v108 & 0xFFFFFFE0;
                  goto LABEL_153;
                }
              }
              else
              {
                uint64_t v123 = 0;
              }
              v120 += v114;
              unint64_t v124 = v123 - (v108 & 0xFFFFFFFF0);
              char v125 = (uint64_t *)(v118 + v123);
              BOOL v126 = &v117[v123];
              do
              {
                uint64_t v127 = *v125++;
                *v126++ = v127;
                v124 += 8;
              }
              while (v124);
              if (v108 == v114) {
                goto LABEL_136;
              }
              v119 += v114;
              int v122 = v108 & 0xFFFFFFF0;
LABEL_153:
              unsigned int v132 = v122 + 1;
              do
              {
                char v133 = *v119++;
                *v120++ = v133;
              }
              while (v107 > v132++);
LABEL_136:
              ++v101;
              v115 += 256;
              uint64_t v116 = (long long *)((char *)v116 + v106);
              v118 += v106;
              v117 += 256;
            }
            while (v101 != v100);
          }
          unint64_t v91 = (unint64_t)v164;
          int64x2_t v92 = v165;
          unsigned int v52 = v172;
          unsigned int v47 = v173;
          int64x2_t v89 = v175;
          uint64_t v90 = 256;
LABEL_157:
          AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((uint64_t)v89, v90, v91, v92, v52, v47);
LABEL_158:
          if (v162) {
            memcpy(__src, v86, 0x1000uLL);
          }
          unsigned int v16 = v149;
          BOOL v29 = v46++ == v150 >> 4;
          uint64_t result = v157;
          unsigned int v47 = v158;
        }
        while (!v29);
        BOOL v29 = v28++ == v140;
      }
      while (!v29);
    }
  }
  return result;
}

uint64_t AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10, uint64_t a11, char a12)
{
  uint64_t v12 = MEMORY[0x270FA5388](a1);
  unsigned int v14 = v13;
  unsigned int v16 = v15;
  unsigned int v18 = v17;
  unsigned int v20 = v19;
  uint64_t v152 = v21;
  uint64_t v153 = v22;
  uint64_t v139 = v23;
  uint64_t v24 = v12;
  v182[112] = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(v12, 0);
  unsigned int v156 = v14;
  unsigned int v141 = v14 + a10 - 1;
  uint64_t v157 = v24;
  if (*(void *)(v24 + 168)) {
    int v25 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v25 = 0;
  }
  unsigned int v26 = v20 - 1;
  unsigned int v27 = v18 - 1;
  unsigned int v28 = v14 >> 4;
  unsigned int v140 = v141 >> 4;
  BOOL v29 = (v25 & 0xD00) == 0 || v25 == 768;
  int v30 = v25 & 0xE00;
  int v32 = !v29 && v30 != 1024;
  int v162 = v32;
  uint64_t result = v24;
  if (*(unsigned char *)(v24 + 232))
  {
    unsigned int v34 = *(unsigned __int8 *)(v24 + 255);
    unsigned int v35 = *(unsigned __int8 *)(v24 + 254);
    char v36 = __clz(v26);
    if (1 << v34 >= v18 || v20 >> v35)
    {
      if (!(v18 >> v34) && 1 << v35 < v20)
      {
        if (v18 < 2) {
          unsigned int v39 = 0;
        }
        else {
          unsigned int v39 = __clz(~(-1 << -(char)__clz(v27))) - 32;
        }
        v35 += v34 + v39;
        unsigned int v34 = -v39;
      }
    }
    else
    {
      unsigned int v37 = 32 - __clz(~(-1 << -v36));
      unsigned int v38 = v35 + v34;
      if (v20 < 2) {
        unsigned int v37 = 0;
      }
      unsigned int v34 = v38 - v37;
      unsigned int v35 = v37;
    }
    if (v20 < 2)
    {
      if (v35) {
        goto LABEL_27;
      }
    }
    else if (32 - __clz(~(-1 << -v36)) < v35)
    {
LABEL_27:
      BOOL v151 = 0;
LABEL_32:
      unsigned int v148 = v35 - 4;
      unsigned int v145 = v34 - 4;
      int v41 = -1 << *(unsigned char *)(*(void *)(v24 + 208) + 48);
      unsigned int v138 = (((~v41 + v20) & v41) + ~(-1 << v35)) >> v35;
      goto LABEL_33;
    }
    if (v18 < 2) {
      unsigned int v40 = 0;
    }
    else {
      unsigned int v40 = 32 - __clz(~(-1 << -(char)__clz(v27)));
    }
    BOOL v151 = v40 >= v34;
    goto LABEL_32;
  }
  BOOL v151 = 0;
  unsigned int v138 = 0;
  unsigned int v145 = 0;
  unsigned int v148 = 0;
LABEL_33:
  if (v28 <= v140)
  {
    unsigned int v150 = v16 + a9 - 1;
    unsigned int v137 = v16 >> 4;
    if (v16 >> 4 <= v150 >> 4)
    {
      unsigned int v160 = v26 >> 4;
      unsigned int v136 = v27 >> 4;
      int v159 = (v26 & 0xF) + 1;
      int v135 = (v27 & 0xF) + 1;
      uint32x2_t v42 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(v20, v18), (int32x2_t)0xF0000000FLL);
      int8x8_t v43 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v42, 4uLL))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x2000000020, v42));
      __int32 v146 = v43.i32[0] | v43.i32[1];
      int8x8_t v144 = v43;
      BOOL v142 = v43.i32[0] != 0;
      BOOL v143 = v43.i32[1] != 0;
      unsigned int v149 = v16;
      do
      {
        unsigned int v44 = (16 * v28) | 0xF;
        if (16 * v28 <= v156) {
          int v45 = v156;
        }
        else {
          int v45 = 16 * v28;
        }
        if (v141 < v44) {
          unsigned int v44 = v141;
        }
        int v147 = v45 - 16 * v28;
        int v155 = v44 - v45 + 1;
        unsigned int v46 = v137;
        if (v28 == v136) {
          unsigned int v47 = v135;
        }
        else {
          unsigned int v47 = 16;
        }
        uint64_t v154 = v139 + (v45 - v156) * a11;
        unsigned int v158 = v47;
        do
        {
          unsigned int v48 = 16 * v46;
          unsigned int v49 = 16 * (v46 + 1) - 1;
          if (16 * v46 <= v16) {
            int v50 = v16;
          }
          else {
            int v50 = 16 * v46;
          }
          if (v150 < v49) {
            unsigned int v49 = v150;
          }
          int v51 = v49 - v50 + 1;
          if (v46 == v160) {
            unsigned int v52 = v159;
          }
          else {
            unsigned int v52 = 16;
          }
          BOOL v53 = 1;
          if (16 * v28 >= v156 && v48 >= v16)
          {
            int v54 = v159;
            if (v46 != v160) {
              int v54 = 16;
            }
            BOOL v53 = v51 != v54 || v155 != v47;
          }
          if (v151)
          {
            if (v148 | v145)
            {
              int v56 = 0;
              uint64_t v57 = 0;
              BOOL v58 = v145 != 0;
              int v59 = 1;
              BOOL v61 = v148 != 0;
              unsigned int v60 = v145;
              unsigned int v62 = v148;
              do
              {
                --v62;
                if (v61) {
                  v57 |= (unint64_t)(v46 & ~(-1 << v148) & v59) << v56++;
                }
                else {
                  unsigned int v62 = 0;
                }
                --v60;
                if (v58) {
                  v57 |= (unint64_t)(v28 & ~(-1 << v145) & v59) << v56++;
                }
                else {
                  unsigned int v60 = 0;
                }
                v59 *= 2;
                --v56;
                BOOL v58 = v60 != 0;
                BOOL v61 = v62 != 0;
              }
              while (v60 | v62);
            }
            else
            {
              uint64_t v57 = 0;
            }
            uint64_t v70 = *(void *)(result + 320) * ((v46 >> v148) + (v28 >> v145) * v138) + (v57 << 12);
          }
          else
          {
            if (v146)
            {
              int v63 = 0;
              uint64_t v64 = 0;
              int v65 = 1;
              BOOL v66 = v142;
              BOOL v67 = v143;
              __int32 v69 = v144.i32[0];
              __int32 v68 = v144.i32[1];
              do
              {
                --v68;
                if (v67) {
                  v64 |= (unint64_t)(v65 & v46) << v63++;
                }
                else {
                  __int32 v68 = 0;
                }
                --v69;
                if (v66) {
                  v64 |= (unint64_t)(v65 & v28) << v63++;
                }
                else {
                  __int32 v69 = 0;
                }
                v65 *= 2;
                --v63;
                BOOL v66 = v69 != 0;
                BOOL v67 = v68 != 0;
              }
              while (v69 | v68);
            }
            else
            {
              uint64_t v64 = 0;
            }
            uint64_t v70 = v64 << 12;
          }
          unsigned int v71 = *(_DWORD *)(result + 128) >> (*(unsigned char *)(result + 144) + a12);
          if (v71 <= 1) {
            unsigned int v71 = 1;
          }
          unsigned int v72 = v71 + 15;
          if (v72 < 0x20) {
            unsigned int v73 = 0;
          }
          else {
            unsigned int v73 = 32 - __clz(~(-1 << -(char)__clz((v72 >> 4) - 1)));
          }
          unsigned int v74 = *(_DWORD *)(result + 132) >> (*(unsigned char *)(result + 144) + a12);
          if (v74 <= 1) {
            unsigned int v74 = 1;
          }
          unsigned int v75 = v74 + 15;
          if (v75 < 0x20) {
            unsigned int v76 = 0;
          }
          else {
            unsigned int v76 = 32 - __clz(~(-1 << -(char)__clz((v75 >> 4) - 1)));
          }
          if (v76 | v73)
          {
            int v77 = 0;
            uint64_t v78 = 0;
            BOOL v79 = v73 != 0;
            BOOL v80 = v76 != 0;
            int v81 = 1;
            do
            {
              --v73;
              if (v79) {
                v78 |= (unint64_t)(v81 & v46) << v77++;
              }
              else {
                unsigned int v73 = 0;
              }
              --v76;
              if (v80) {
                v78 |= (unint64_t)(v81 & v28) << v77++;
              }
              else {
                unsigned int v76 = 0;
              }
              v81 *= 2;
              --v77;
              BOOL v80 = v76 != 0;
              BOOL v79 = v73 != 0;
            }
            while (v76 | v73);
          }
          else
          {
            uint64_t v78 = 0;
          }
          int v83 = v52 < 0x10 || v53;
          int64x2_t v84 = (unsigned __int8 *)(v153 + 8 * v78);
          unsigned int v82 = v50 - v16;
          uint64_t v85 = v154 + 16 * (v50 - v16);
          int64x2_t v86 = (unsigned char *)(v152 + v70);
          if (v47 < 0x10) {
            int v87 = 1;
          }
          else {
            int v87 = v83;
          }
          __src = v86;
          if (v162)
          {
            if (!v87)
            {
              int64x2_t v86 = __dst;
LABEL_123:
              int64x2_t v89 = (unsigned char *)(v154 + 16 * v82);
              uint64_t v90 = a11;
              unint64_t v91 = v86;
              int64x2_t v92 = (char *)(v153 + 8 * v78);
              goto LABEL_157;
            }
            char v88 = v52;
            memcpy(__dst, __src, sizeof(__dst));
            LOBYTE(v52) = v88;
            int64x2_t v86 = __dst;
            LOBYTE(v47) = v158;
            uint64_t result = v157;
          }
          else if (!v87)
          {
            goto LABEL_123;
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE20ELj1ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = result;
          char v164 = v86;
          unsigned __int8 v172 = v52;
          unsigned __int8 v173 = v47;
          unsigned int v168 = v147;
          unsigned int v169 = v50 - v48;
          uint64_t v165 = v84;
          uint64_t v166 = v85;
          uint64_t v167 = a11;
          unsigned int v170 = v155;
          unsigned int v171 = v51;
          if (v53)
          {
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(result + 8) + 7384), block);
            goto LABEL_158;
          }
          unint64_t v93 = (unint64_t)&v86[AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)v175, 256, (unint64_t)v86, *v84)];
          unint64_t v94 = v93
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v177, 256, v93, v84[1]);
          unint64_t v95 = v94
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v176, 256, v94, v84[2]);
          unint64_t v96 = v95
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v178, 256, v95, v84[3]);
          unint64_t v97 = v96
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v179, 256, v96, v84[4]);
          unint64_t v98 = v97
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v181, 256, v97, v84[5]);
          uint64_t v99 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v180, 256, v98, v84[6]);
          AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)v182, 256, v98 + v99, v84[7]);
          uint64_t v100 = v170;
          if (v170 && v171)
          {
            uint64_t v101 = 0;
            unint64_t v102 = (unint64_t)v168 << 8;
            uint64_t v103 = 16 * v169;
            int64x2_t v104 = &v175[v102 + v103];
            uint64_t v105 = v166;
            uint64_t v106 = v167;
            unint64_t v107 = 16 * v171;
            if (v107 <= 1) {
              unint64_t v108 = 1;
            }
            else {
              unint64_t v108 = 16 * v171;
            }
            unint64_t v109 = v102 + v103;
            uint64_t v110 = &v175[v102 + v103];
            if (v108) {
              BOOL v111 = (v108 - 1) >> 32 == 0;
            }
            else {
              BOOL v111 = 0;
            }
            char v112 = !v111;
            uint64_t v113 = v108 & 0xFFFFFFFE0;
            uint64_t v114 = v108 & 0xFFFFFFFF0;
            uint64_t v115 = &v175[v109 + 16];
            uint64_t v116 = (long long *)(v166 + 16);
            unint64_t v117 = v104;
            uint64_t v118 = v166;
            do
            {
              unint64_t v119 = (char *)(v105 + v106 * v101);
              unsigned int v120 = &v104[256 * v101];
              if ((unint64_t)(&v110[256 * v101] - v119) < 0x20) {
                char v121 = 1;
              }
              else {
                char v121 = v112;
              }
              if (v121)
              {
                int v122 = 0;
                goto LABEL_153;
              }
              if (v108 >= 0x20)
              {
                unint64_t v128 = v116;
                uint64_t v129 = v115;
                uint64_t v130 = v108 & 0xFFFFFFFE0;
                do
                {
                  long long v131 = *v128;
                  *(v129 - 1) = *(v128 - 1);
                  *uint64_t v129 = v131;
                  v129 += 2;
                  v128 += 2;
                  v130 -= 32;
                }
                while (v130);
                if (v108 == v113) {
                  goto LABEL_136;
                }
                uint64_t v123 = v108 & 0xFFFFFFFE0;
                if ((v108 & 0x10) == 0)
                {
                  v119 += v113;
                  v120 += v113;
                  int v122 = v108 & 0xFFFFFFE0;
                  goto LABEL_153;
                }
              }
              else
              {
                uint64_t v123 = 0;
              }
              v120 += v114;
              unint64_t v124 = v123 - (v108 & 0xFFFFFFFF0);
              char v125 = (uint64_t *)(v118 + v123);
              BOOL v126 = &v117[v123];
              do
              {
                uint64_t v127 = *v125++;
                *v126++ = v127;
                v124 += 8;
              }
              while (v124);
              if (v108 == v114) {
                goto LABEL_136;
              }
              v119 += v114;
              int v122 = v108 & 0xFFFFFFF0;
LABEL_153:
              unsigned int v132 = v122 + 1;
              do
              {
                char v133 = *v119++;
                *v120++ = v133;
              }
              while (v107 > v132++);
LABEL_136:
              ++v101;
              v115 += 256;
              uint64_t v116 = (long long *)((char *)v116 + v106);
              v118 += v106;
              v117 += 256;
            }
            while (v101 != v100);
          }
          unint64_t v91 = v164;
          int64x2_t v92 = (char *)v165;
          unsigned int v52 = v172;
          unsigned int v47 = v173;
          int64x2_t v89 = v175;
          uint64_t v90 = 256;
LABEL_157:
          AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((uint64_t)v89, v90, v91, v92, v52, v47);
LABEL_158:
          if (v162) {
            memcpy(__src, v86, 0x1000uLL);
          }
          unsigned int v16 = v149;
          BOOL v29 = v46++ == v150 >> 4;
          uint64_t result = v157;
          unsigned int v47 = v158;
        }
        while (!v29);
        BOOL v29 = v28++ == v140;
      }
      while (!v29);
    }
  }
  return result;
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10, uint64_t a11, int a12)
{
  uint64_t v12 = MEMORY[0x270FA5388](a1);
  unsigned int v14 = v13;
  unsigned int v16 = v15;
  unsigned int v18 = v17;
  unsigned int v20 = v19;
  uint64_t v153 = v21;
  uint64_t v154 = v22;
  uint64_t v143 = v23;
  uint64_t v24 = v12;
  v183[112] = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(v12, 0);
  uint64_t v25 = v24;
  unsigned int v158 = v14;
  unsigned int v26 = v14 >> 4;
  unsigned int v142 = v14 + a10 - 1;
  unsigned int v144 = v142 >> 4;
  unsigned int v27 = *(unsigned __int8 *)(*(void *)(v24 + 208) + 88);
  unsigned int v28 = *(_DWORD *)(v24 + 112);
  uint64_t v159 = v25;
  if (*(void *)(v25 + 168))
  {
    __int16 CacheMode = IOSurfaceGetCacheMode();
    uint64_t v25 = v159;
    int v30 = CacheMode & 0xF00;
  }
  else
  {
    int v30 = 0;
  }
  BOOL v31 = (v30 & 0xD00) == 0 || v30 == 768;
  int v32 = v30 & 0xE00;
  int v34 = !v31 && v32 != 1024;
  int v163 = v34;
  BOOL isLevelTiled = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::isLevelTiled(v25, *(_DWORD *)(v25 + 144) + a12);
  uint64_t v36 = v159;
  BOOL v152 = isLevelTiled;
  if (v26 <= v144)
  {
    unsigned int v151 = v16 + a9 - 1;
    unsigned int v141 = v16 >> 4;
    if (v16 >> 4 <= v151 >> 4)
    {
      unsigned int v138 = v20 - 1;
      unsigned int v140 = (v18 - 1) >> 4;
      int v161 = ((v20 - 1) & 0xF) + 1;
      unsigned int v162 = (v20 - 1) >> 4;
      int v139 = ((v18 - 1) & 0xF) + 1;
      uint32x2_t v37 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(v20, v18), (int32x2_t)0xF0000000FLL);
      int8x8_t v38 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v37, 4uLL))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x2000000020, v37));
      __int32 v149 = v38.i32[0] | v38.i32[1];
      int8x8_t v148 = v38;
      BOOL v146 = v38.i32[0] != 0;
      BOOL v147 = v38.i32[1] != 0;
      unint64_t v137 = 8 * v28 * (unint64_t)v27;
      unsigned int v150 = v16;
      do
      {
        unsigned int v39 = (16 * v26) | 0xF;
        if (16 * v26 <= v158) {
          int v40 = v158;
        }
        else {
          int v40 = 16 * v26;
        }
        unsigned int v41 = v141;
        if (v142 < v39) {
          unsigned int v39 = v142;
        }
        int v145 = v40 - 16 * v26;
        int v156 = v39 - v40 + 1;
        unsigned int v157 = 16 * v26;
        if (v26 == v140) {
          unsigned int v42 = v139;
        }
        else {
          unsigned int v42 = 16;
        }
        uint64_t v155 = v143 + (v40 - v158) * a11;
        unsigned int v160 = v42;
        do
        {
          unsigned int v43 = 16 * v41;
          unsigned int v44 = 16 * (v41 + 1) - 1;
          if (16 * v41 <= v16) {
            int v45 = v16;
          }
          else {
            int v45 = 16 * v41;
          }
          if (v151 < v44) {
            unsigned int v44 = v151;
          }
          int v46 = v44 - v45 + 1;
          if (v41 == v162) {
            unsigned int v47 = v161;
          }
          else {
            unsigned int v47 = 16;
          }
          BOOL v48 = 1;
          if (v157 >= v158 && v43 >= v16)
          {
            int v49 = v161;
            if (v41 != v162) {
              int v49 = 16;
            }
            BOOL v48 = v46 != v49 || v156 != v42;
          }
          if (v152)
          {
            unsigned int v70 = 0;
            uint64_t v71 = v137 >> (*(unsigned char *)(v36 + 57) != 0);
            char v72 = 1;
            if (v71 > 127)
            {
              if (v71 > 511)
              {
                if (v71 == 512)
                {
                  unsigned int v70 = 16;
                  char v73 = 1;
                  unsigned int v74 = 16;
                }
                else
                {
                  char v73 = 1;
                  unsigned int v74 = 0;
                  if (v71 == 1024)
                  {
                    unsigned int v74 = 8;
                    unsigned int v70 = 16;
                  }
                }
              }
              else if (v71 == 128)
              {
                char v72 = 0;
                char v73 = 0;
                unsigned int v70 = 32;
                unsigned int v74 = 32;
              }
              else
              {
                char v73 = 1;
                unsigned int v74 = 0;
                if (v71 == 256)
                {
                  char v72 = 0;
                  unsigned int v74 = 16;
                  unsigned int v70 = 32;
                }
              }
            }
            else
            {
              char v73 = 1;
              unsigned int v74 = 0;
              switch(v71)
              {
                case 4:
                  char v72 = 0;
                  char v73 = 0;
                  unsigned int v74 = 128;
                  unsigned int v70 = 256;
                  break;
                case 5:
                case 6:
                case 7:
                case 9:
                case 10:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 17:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                  break;
                case 8:
                  char v72 = 0;
                  char v73 = 0;
                  unsigned int v70 = 128;
                  unsigned int v74 = 128;
                  break;
                case 16:
                  char v72 = 0;
                  char v73 = 0;
                  unsigned int v74 = 64;
                  unsigned int v70 = 128;
                  break;
                case 32:
                  char v72 = 0;
                  char v73 = 0;
                  unsigned int v70 = 64;
                  unsigned int v74 = 64;
                  break;
                default:
                  if (v71 == 64)
                  {
                    char v72 = 0;
                    char v73 = 0;
                    unsigned int v74 = 32;
                    unsigned int v70 = 64;
                  }
                  break;
              }
            }
            unsigned int v128 = (v70 >> 4) - 1;
            if (v72)
            {
              unsigned int v129 = 0;
              if (v73) {
                goto LABEL_158;
              }
LABEL_147:
              unsigned int v130 = 32 - __clz(~(-1 << -(char)__clz(((v74 + 15) >> 4) - 1)));
              if (v130 | v129) {
                goto LABEL_148;
              }
LABEL_159:
              uint64_t v132 = 0;
            }
            else
            {
              unsigned int v129 = 32 - __clz(~(-1 << -(char)__clz(v128)));
              if ((v73 & 1) == 0) {
                goto LABEL_147;
              }
LABEL_158:
              unsigned int v130 = 0;
              if (!v129) {
                goto LABEL_159;
              }
LABEL_148:
              int v131 = 0;
              uint64_t v132 = 0;
              int v133 = v41 & v128;
              BOOL v134 = v129 != 0;
              BOOL v135 = v130 != 0;
              int v136 = 1;
              do
              {
                --v129;
                if (v134) {
                  v132 |= (unint64_t)(v136 & v133) << v131++;
                }
                else {
                  unsigned int v129 = 0;
                }
                --v130;
                if (v135) {
                  v132 |= (unint64_t)(v136 & v26 & ((v74 >> 4) - 1)) << v131++;
                }
                else {
                  unsigned int v130 = 0;
                }
                v136 *= 2;
                --v131;
                BOOL v135 = v130 != 0;
                BOOL v134 = v129 != 0;
              }
              while (v130 | v129);
            }
            unint64_t v58 = ((unint64_t)(v43 / v70 + v157 / v74 * ((v70 + v138) / v70)) << 14) + (v132 << 12);
            goto LABEL_59;
          }
          if (v149)
          {
            int v51 = 0;
            uint64_t v52 = 0;
            int v53 = 1;
            BOOL v54 = v146;
            BOOL v55 = v147;
            __int32 v57 = v148.i32[0];
            __int32 v56 = v148.i32[1];
            do
            {
              --v56;
              if (v55) {
                v52 |= (unint64_t)(v53 & v41) << v51++;
              }
              else {
                __int32 v56 = 0;
              }
              --v57;
              if (v54) {
                v52 |= (unint64_t)(v53 & v26) << v51++;
              }
              else {
                __int32 v57 = 0;
              }
              v53 *= 2;
              --v51;
              BOOL v54 = v57 != 0;
              BOOL v55 = v56 != 0;
            }
            while (v57 | v56);
          }
          else
          {
            uint64_t v52 = 0;
          }
          unint64_t v58 = v52 << 12;
LABEL_59:
          unsigned int v59 = *(_DWORD *)(v36 + 128) >> (*(unsigned char *)(v36 + 144) + a12);
          if (v59 <= 1) {
            unsigned int v59 = 1;
          }
          unsigned int v60 = v59 + 15;
          if (v60 < 0x20) {
            unsigned int v61 = 0;
          }
          else {
            unsigned int v61 = 32 - __clz(~(-1 << -(char)__clz((v60 >> 4) - 1)));
          }
          unsigned int v62 = *(_DWORD *)(v36 + 132) >> (*(unsigned char *)(v36 + 144) + a12);
          if (v62 <= 1) {
            unsigned int v62 = 1;
          }
          unsigned int v63 = v62 + 15;
          if (v63 < 0x20)
          {
            unsigned int v64 = 0;
            if (!v61)
            {
LABEL_81:
              uint64_t v66 = 0;
              goto LABEL_82;
            }
          }
          else
          {
            unsigned int v64 = 32 - __clz(~(-1 << -(char)__clz((v63 >> 4) - 1)));
            if (!(v64 | v61)) {
              goto LABEL_81;
            }
          }
          int v65 = 0;
          uint64_t v66 = 0;
          BOOL v67 = v61 != 0;
          BOOL v68 = v64 != 0;
          int v69 = 1;
          do
          {
            --v61;
            if (v67) {
              v66 |= (unint64_t)(v69 & v41) << v65++;
            }
            else {
              unsigned int v61 = 0;
            }
            --v64;
            if (v68) {
              v66 |= (unint64_t)(v69 & v26) << v65++;
            }
            else {
              unsigned int v64 = 0;
            }
            v69 *= 2;
            --v65;
            BOOL v68 = v64 != 0;
            BOOL v67 = v61 != 0;
          }
          while (v64 | v61);
LABEL_82:
          int v75 = v47 < 0x10 || v48;
          unsigned int v76 = (unsigned __int8 *)(v154 + 8 * v66);
          uint64_t v77 = v155 + 16 * (v45 - v16);
          uint64_t v78 = (void *)(v153 + v58);
          if (v42 < 0x10) {
            int v79 = 1;
          }
          else {
            int v79 = v75;
          }
          if (v163)
          {
            if (!v79)
            {
              uint64_t v85 = __dst;
LABEL_95:
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock(v77, a11, (unint64_t)v85, v76, v47, v42);
              unsigned int v16 = v150;
              goto LABEL_129;
            }
            BOOL v80 = v78;
            char v81 = v47;
            int v82 = v46;
            int v83 = v78;
            BOOL v84 = v48;
            memcpy(__dst, v80, sizeof(__dst));
            BOOL v48 = v84;
            uint64_t v78 = v83;
            int v46 = v82;
            LOBYTE(v47) = v81;
            unsigned int v43 = 16 * v41;
            uint64_t v85 = __dst;
            LOBYTE(v42) = v160;
            uint64_t v36 = v159;
          }
          else
          {
            uint64_t v85 = v78;
            if (!v79) {
              goto LABEL_95;
            }
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE20ELj1ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = v36;
          uint64_t v165 = v85;
          unsigned __int8 v173 = v47;
          unsigned __int8 v174 = v42;
          unsigned int v169 = v145;
          unsigned int v170 = v45 - v43;
          uint64_t v166 = v76;
          uint64_t v167 = v77;
          uint64_t v168 = a11;
          unsigned int v171 = v156;
          unsigned int v172 = v46;
          if (v48)
          {
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(v36 + 8) + 7384), block);
            unsigned int v16 = v150;
            goto LABEL_129;
          }
          unint64_t v86 = (unint64_t)&v85[AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)v176, 256, (unint64_t)v85, *v76)];
          unint64_t v87 = v86
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v178, 256, v86, v76[1]);
          unint64_t v88 = v87
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v177, 256, v87, v76[2]);
          unint64_t v89 = v88
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v179, 256, v88, v76[3]);
          unint64_t v90 = v89
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v180, 256, v89, v76[4]);
          unint64_t v91 = v90
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v182, 256, v90, v76[5]);
          uint64_t v92 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v181, 256, v91, v76[6]);
          AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)v183, 256, v91 + v92, v76[7]);
          uint64_t v93 = v171;
          unsigned int v16 = v150;
          if (v171 && v172)
          {
            uint64_t v94 = 0;
            unint64_t v95 = (unint64_t)v169 << 8;
            uint64_t v96 = 16 * v170;
            unint64_t v97 = &v176[v95 + v96];
            uint64_t v98 = v167;
            uint64_t v99 = v168;
            unint64_t v100 = 16 * v172;
            if (v100 <= 1) {
              unint64_t v101 = 1;
            }
            else {
              unint64_t v101 = 16 * v172;
            }
            unint64_t v102 = v95 + v96;
            uint64_t v103 = &v176[v95 + v96];
            if (v101) {
              BOOL v104 = (v101 - 1) >> 32 == 0;
            }
            else {
              BOOL v104 = 0;
            }
            char v105 = !v104;
            uint64_t v106 = v101 & 0xFFFFFFFE0;
            uint64_t v107 = v101 & 0xFFFFFFFF0;
            unint64_t v108 = &v176[v102 + 16];
            unint64_t v109 = (long long *)(v167 + 16);
            uint64_t v110 = v97;
            uint64_t v111 = v167;
            do
            {
              char v112 = (char *)(v98 + v99 * v94);
              uint64_t v113 = &v97[256 * v94];
              if ((unint64_t)(&v103[256 * v94] - v112) < 0x20) {
                char v114 = 1;
              }
              else {
                char v114 = v105;
              }
              if (v114)
              {
                int v115 = 0;
                goto LABEL_125;
              }
              if (v101 >= 0x20)
              {
                char v121 = v109;
                int v122 = v108;
                uint64_t v123 = v101 & 0xFFFFFFFE0;
                do
                {
                  long long v124 = *v121;
                  *(v122 - 1) = *(v121 - 1);
                  *int v122 = v124;
                  v122 += 2;
                  v121 += 2;
                  v123 -= 32;
                }
                while (v123);
                if (v101 == v106) {
                  goto LABEL_108;
                }
                uint64_t v116 = v101 & 0xFFFFFFFE0;
                if ((v101 & 0x10) == 0)
                {
                  v112 += v106;
                  v113 += v106;
                  int v115 = v101 & 0xFFFFFFE0;
                  goto LABEL_125;
                }
              }
              else
              {
                uint64_t v116 = 0;
              }
              v113 += v107;
              unint64_t v117 = v116 - (v101 & 0xFFFFFFFF0);
              uint64_t v118 = (uint64_t *)(v111 + v116);
              unint64_t v119 = &v110[v116];
              do
              {
                uint64_t v120 = *v118++;
                *v119++ = v120;
                v117 += 8;
              }
              while (v117);
              if (v101 == v107) {
                goto LABEL_108;
              }
              v112 += v107;
              int v115 = v101 & 0xFFFFFFF0;
LABEL_125:
              unsigned int v125 = v115 + 1;
              do
              {
                char v126 = *v112++;
                *v113++ = v126;
              }
              while (v100 > v125++);
LABEL_108:
              ++v94;
              v108 += 256;
              unint64_t v109 = (long long *)((char *)v109 + v99);
              v111 += v99;
              v110 += 256;
            }
            while (v94 != v93);
          }
          AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((uint64_t)v176, 256, (unint64_t)v165, v166, v173, v174);
LABEL_129:
          if (v163) {
            memcpy(v78, v85, 0x1000uLL);
          }
          BOOL v31 = v41++ == v151 >> 4;
          uint64_t v36 = v159;
          unsigned int v42 = v160;
        }
        while (!v31);
        BOOL v31 = v26++ == v144;
      }
      while (!v31);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10, uint64_t a11, int a12)
{
  uint64_t v12 = MEMORY[0x270FA5388](a1);
  unsigned int v14 = v13;
  unsigned int v16 = v15;
  unsigned int v18 = v17;
  unsigned int v20 = v19;
  uint64_t v153 = v21;
  uint64_t v154 = v22;
  uint64_t v143 = v23;
  uint64_t v24 = v12;
  v183[112] = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(v12, 0);
  uint64_t v25 = v24;
  unsigned int v158 = v14;
  unsigned int v26 = v14 >> 4;
  unsigned int v142 = v14 + a10 - 1;
  unsigned int v144 = v142 >> 4;
  unsigned int v27 = *(unsigned __int8 *)(*(void *)(v24 + 208) + 88);
  unsigned int v28 = *(_DWORD *)(v24 + 112);
  uint64_t v159 = v25;
  if (*(void *)(v25 + 168))
  {
    __int16 CacheMode = IOSurfaceGetCacheMode();
    uint64_t v25 = v159;
    int v30 = CacheMode & 0xF00;
  }
  else
  {
    int v30 = 0;
  }
  BOOL v31 = (v30 & 0xD00) == 0 || v30 == 768;
  int v32 = v30 & 0xE00;
  int v34 = !v31 && v32 != 1024;
  int v163 = v34;
  BOOL isLevelTiled = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::isLevelTiled(v25, *(_DWORD *)(v25 + 144) + a12);
  uint64_t v36 = v159;
  BOOL v152 = isLevelTiled;
  if (v26 <= v144)
  {
    unsigned int v151 = v16 + a9 - 1;
    unsigned int v141 = v16 >> 4;
    if (v16 >> 4 <= v151 >> 4)
    {
      unsigned int v138 = v20 - 1;
      unsigned int v140 = (v18 - 1) >> 4;
      int v161 = ((v20 - 1) & 0xF) + 1;
      unsigned int v162 = (v20 - 1) >> 4;
      int v139 = ((v18 - 1) & 0xF) + 1;
      uint32x2_t v37 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(v20, v18), (int32x2_t)0xF0000000FLL);
      int8x8_t v38 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v37, 4uLL))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x2000000020, v37));
      __int32 v149 = v38.i32[0] | v38.i32[1];
      int8x8_t v148 = v38;
      BOOL v146 = v38.i32[0] != 0;
      BOOL v147 = v38.i32[1] != 0;
      unint64_t v137 = 8 * v28 * (unint64_t)v27;
      unsigned int v150 = v16;
      do
      {
        unsigned int v39 = (16 * v26) | 0xF;
        if (16 * v26 <= v158) {
          int v40 = v158;
        }
        else {
          int v40 = 16 * v26;
        }
        unsigned int v41 = v141;
        if (v142 < v39) {
          unsigned int v39 = v142;
        }
        int v145 = v40 - 16 * v26;
        int v156 = v39 - v40 + 1;
        unsigned int v157 = 16 * v26;
        if (v26 == v140) {
          unsigned int v42 = v139;
        }
        else {
          unsigned int v42 = 16;
        }
        uint64_t v155 = v143 + (v40 - v158) * a11;
        unsigned int v160 = v42;
        do
        {
          unsigned int v43 = 16 * v41;
          unsigned int v44 = 16 * (v41 + 1) - 1;
          if (16 * v41 <= v16) {
            int v45 = v16;
          }
          else {
            int v45 = 16 * v41;
          }
          if (v151 < v44) {
            unsigned int v44 = v151;
          }
          int v46 = v44 - v45 + 1;
          if (v41 == v162) {
            unsigned int v47 = v161;
          }
          else {
            unsigned int v47 = 16;
          }
          BOOL v48 = 1;
          if (v157 >= v158 && v43 >= v16)
          {
            int v49 = v161;
            if (v41 != v162) {
              int v49 = 16;
            }
            BOOL v48 = v46 != v49 || v156 != v42;
          }
          if (v152)
          {
            unsigned int v70 = 0;
            uint64_t v71 = v137 >> (*(unsigned char *)(v36 + 57) != 0);
            char v72 = 1;
            if (v71 > 127)
            {
              if (v71 > 511)
              {
                if (v71 == 512)
                {
                  unsigned int v70 = 16;
                  char v73 = 1;
                  unsigned int v74 = 16;
                }
                else
                {
                  char v73 = 1;
                  unsigned int v74 = 0;
                  if (v71 == 1024)
                  {
                    unsigned int v74 = 8;
                    unsigned int v70 = 16;
                  }
                }
              }
              else if (v71 == 128)
              {
                char v72 = 0;
                char v73 = 0;
                unsigned int v70 = 32;
                unsigned int v74 = 32;
              }
              else
              {
                char v73 = 1;
                unsigned int v74 = 0;
                if (v71 == 256)
                {
                  char v72 = 0;
                  unsigned int v74 = 16;
                  unsigned int v70 = 32;
                }
              }
            }
            else
            {
              char v73 = 1;
              unsigned int v74 = 0;
              switch(v71)
              {
                case 4:
                  char v72 = 0;
                  char v73 = 0;
                  unsigned int v74 = 128;
                  unsigned int v70 = 256;
                  break;
                case 5:
                case 6:
                case 7:
                case 9:
                case 10:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 17:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                  break;
                case 8:
                  char v72 = 0;
                  char v73 = 0;
                  unsigned int v70 = 128;
                  unsigned int v74 = 128;
                  break;
                case 16:
                  char v72 = 0;
                  char v73 = 0;
                  unsigned int v74 = 64;
                  unsigned int v70 = 128;
                  break;
                case 32:
                  char v72 = 0;
                  char v73 = 0;
                  unsigned int v70 = 64;
                  unsigned int v74 = 64;
                  break;
                default:
                  if (v71 == 64)
                  {
                    char v72 = 0;
                    char v73 = 0;
                    unsigned int v74 = 32;
                    unsigned int v70 = 64;
                  }
                  break;
              }
            }
            unsigned int v128 = (v70 >> 4) - 1;
            if (v72)
            {
              unsigned int v129 = 0;
              if (v73) {
                goto LABEL_158;
              }
LABEL_147:
              unsigned int v130 = 32 - __clz(~(-1 << -(char)__clz(((v74 + 15) >> 4) - 1)));
              if (v130 | v129) {
                goto LABEL_148;
              }
LABEL_159:
              uint64_t v132 = 0;
            }
            else
            {
              unsigned int v129 = 32 - __clz(~(-1 << -(char)__clz(v128)));
              if ((v73 & 1) == 0) {
                goto LABEL_147;
              }
LABEL_158:
              unsigned int v130 = 0;
              if (!v129) {
                goto LABEL_159;
              }
LABEL_148:
              int v131 = 0;
              uint64_t v132 = 0;
              int v133 = v41 & v128;
              BOOL v134 = v129 != 0;
              BOOL v135 = v130 != 0;
              int v136 = 1;
              do
              {
                --v129;
                if (v134) {
                  v132 |= (unint64_t)(v136 & v133) << v131++;
                }
                else {
                  unsigned int v129 = 0;
                }
                --v130;
                if (v135) {
                  v132 |= (unint64_t)(v136 & v26 & ((v74 >> 4) - 1)) << v131++;
                }
                else {
                  unsigned int v130 = 0;
                }
                v136 *= 2;
                --v131;
                BOOL v135 = v130 != 0;
                BOOL v134 = v129 != 0;
              }
              while (v130 | v129);
            }
            unint64_t v58 = ((unint64_t)(v43 / v70 + v157 / v74 * ((v70 + v138) / v70)) << 14) + (v132 << 12);
            goto LABEL_59;
          }
          if (v149)
          {
            int v51 = 0;
            uint64_t v52 = 0;
            int v53 = 1;
            BOOL v54 = v146;
            BOOL v55 = v147;
            __int32 v57 = v148.i32[0];
            __int32 v56 = v148.i32[1];
            do
            {
              --v56;
              if (v55) {
                v52 |= (unint64_t)(v53 & v41) << v51++;
              }
              else {
                __int32 v56 = 0;
              }
              --v57;
              if (v54) {
                v52 |= (unint64_t)(v53 & v26) << v51++;
              }
              else {
                __int32 v57 = 0;
              }
              v53 *= 2;
              --v51;
              BOOL v54 = v57 != 0;
              BOOL v55 = v56 != 0;
            }
            while (v57 | v56);
          }
          else
          {
            uint64_t v52 = 0;
          }
          unint64_t v58 = v52 << 12;
LABEL_59:
          unsigned int v59 = *(_DWORD *)(v36 + 128) >> (*(unsigned char *)(v36 + 144) + a12);
          if (v59 <= 1) {
            unsigned int v59 = 1;
          }
          unsigned int v60 = v59 + 15;
          if (v60 < 0x20) {
            unsigned int v61 = 0;
          }
          else {
            unsigned int v61 = 32 - __clz(~(-1 << -(char)__clz((v60 >> 4) - 1)));
          }
          unsigned int v62 = *(_DWORD *)(v36 + 132) >> (*(unsigned char *)(v36 + 144) + a12);
          if (v62 <= 1) {
            unsigned int v62 = 1;
          }
          unsigned int v63 = v62 + 15;
          if (v63 < 0x20)
          {
            unsigned int v64 = 0;
            if (!v61)
            {
LABEL_81:
              uint64_t v66 = 0;
              goto LABEL_82;
            }
          }
          else
          {
            unsigned int v64 = 32 - __clz(~(-1 << -(char)__clz((v63 >> 4) - 1)));
            if (!(v64 | v61)) {
              goto LABEL_81;
            }
          }
          int v65 = 0;
          uint64_t v66 = 0;
          BOOL v67 = v61 != 0;
          BOOL v68 = v64 != 0;
          int v69 = 1;
          do
          {
            --v61;
            if (v67) {
              v66 |= (unint64_t)(v69 & v41) << v65++;
            }
            else {
              unsigned int v61 = 0;
            }
            --v64;
            if (v68) {
              v66 |= (unint64_t)(v69 & v26) << v65++;
            }
            else {
              unsigned int v64 = 0;
            }
            v69 *= 2;
            --v65;
            BOOL v68 = v64 != 0;
            BOOL v67 = v61 != 0;
          }
          while (v64 | v61);
LABEL_82:
          int v75 = v47 < 0x10 || v48;
          unsigned int v76 = (char *)(v154 + 8 * v66);
          uint64_t v77 = v155 + 16 * (v45 - v16);
          uint64_t v78 = (void *)(v153 + v58);
          if (v42 < 0x10) {
            int v79 = 1;
          }
          else {
            int v79 = v75;
          }
          if (v163)
          {
            if (!v79)
            {
              uint64_t v85 = __dst;
LABEL_95:
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock(v77, a11, v85, v76, v47, v42);
              unsigned int v16 = v150;
              goto LABEL_129;
            }
            BOOL v80 = v78;
            char v81 = v47;
            int v82 = v46;
            int v83 = v78;
            BOOL v84 = v48;
            memcpy(__dst, v80, sizeof(__dst));
            BOOL v48 = v84;
            uint64_t v78 = v83;
            int v46 = v82;
            LOBYTE(v47) = v81;
            unsigned int v43 = 16 * v41;
            uint64_t v85 = __dst;
            LOBYTE(v42) = v160;
            uint64_t v36 = v159;
          }
          else
          {
            uint64_t v85 = v78;
            if (!v79) {
              goto LABEL_95;
            }
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE20ELj1ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = v36;
          uint64_t v165 = v85;
          unsigned __int8 v173 = v47;
          unsigned __int8 v174 = v42;
          unsigned int v169 = v145;
          unsigned int v170 = v45 - v43;
          uint64_t v166 = v76;
          uint64_t v167 = v77;
          uint64_t v168 = a11;
          unsigned int v171 = v156;
          unsigned int v172 = v46;
          if (v48)
          {
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(v36 + 8) + 7384), block);
            unsigned int v16 = v150;
            goto LABEL_129;
          }
          unint64_t v86 = (unint64_t)v85
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)v176, 256, (unint64_t)v85, *v76);
          unint64_t v87 = v86
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v178, 256, v86, v76[1]);
          unint64_t v88 = v87
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v177, 256, v87, v76[2]);
          unint64_t v89 = v88
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v179, 256, v88, v76[3]);
          unint64_t v90 = v89
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v180, 256, v89, v76[4]);
          unint64_t v91 = v90
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v182, 256, v90, v76[5]);
          uint64_t v92 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v181, 256, v91, v76[6]);
          AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)v183, 256, v91 + v92, v76[7]);
          uint64_t v93 = v171;
          unsigned int v16 = v150;
          if (v171 && v172)
          {
            uint64_t v94 = 0;
            unint64_t v95 = (unint64_t)v169 << 8;
            uint64_t v96 = 16 * v170;
            unint64_t v97 = &v176[v95 + v96];
            uint64_t v98 = v167;
            uint64_t v99 = v168;
            unint64_t v100 = 16 * v172;
            if (v100 <= 1) {
              unint64_t v101 = 1;
            }
            else {
              unint64_t v101 = 16 * v172;
            }
            unint64_t v102 = v95 + v96;
            uint64_t v103 = &v176[v95 + v96];
            if (v101) {
              BOOL v104 = (v101 - 1) >> 32 == 0;
            }
            else {
              BOOL v104 = 0;
            }
            char v105 = !v104;
            uint64_t v106 = v101 & 0xFFFFFFFE0;
            uint64_t v107 = v101 & 0xFFFFFFFF0;
            unint64_t v108 = &v176[v102 + 16];
            unint64_t v109 = (long long *)(v167 + 16);
            uint64_t v110 = v97;
            uint64_t v111 = v167;
            do
            {
              char v112 = (char *)(v98 + v99 * v94);
              uint64_t v113 = &v97[256 * v94];
              if ((unint64_t)(&v103[256 * v94] - v112) < 0x20) {
                char v114 = 1;
              }
              else {
                char v114 = v105;
              }
              if (v114)
              {
                int v115 = 0;
                goto LABEL_125;
              }
              if (v101 >= 0x20)
              {
                char v121 = v109;
                int v122 = v108;
                uint64_t v123 = v101 & 0xFFFFFFFE0;
                do
                {
                  long long v124 = *v121;
                  *(v122 - 1) = *(v121 - 1);
                  *int v122 = v124;
                  v122 += 2;
                  v121 += 2;
                  v123 -= 32;
                }
                while (v123);
                if (v101 == v106) {
                  goto LABEL_108;
                }
                uint64_t v116 = v101 & 0xFFFFFFFE0;
                if ((v101 & 0x10) == 0)
                {
                  v112 += v106;
                  v113 += v106;
                  int v115 = v101 & 0xFFFFFFE0;
                  goto LABEL_125;
                }
              }
              else
              {
                uint64_t v116 = 0;
              }
              v113 += v107;
              unint64_t v117 = v116 - (v101 & 0xFFFFFFFF0);
              uint64_t v118 = (uint64_t *)(v111 + v116);
              unint64_t v119 = &v110[v116];
              do
              {
                uint64_t v120 = *v118++;
                *v119++ = v120;
                v117 += 8;
              }
              while (v117);
              if (v101 == v107) {
                goto LABEL_108;
              }
              v112 += v107;
              int v115 = v101 & 0xFFFFFFF0;
LABEL_125:
              unsigned int v125 = v115 + 1;
              do
              {
                char v126 = *v112++;
                *v113++ = v126;
              }
              while (v100 > v125++);
LABEL_108:
              ++v94;
              v108 += 256;
              unint64_t v109 = (long long *)((char *)v109 + v99);
              v111 += v99;
              v110 += 256;
            }
            while (v94 != v93);
          }
          AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((uint64_t)v176, 256, v165, v166, v173, v174);
LABEL_129:
          if (v163) {
            memcpy(v78, v85, 0x1000uLL);
          }
          BOOL v31 = v41++ == v151 >> 4;
          uint64_t v36 = v159;
          unsigned int v42 = v160;
        }
        while (!v31);
        BOOL v31 = v26++ == v144;
      }
      while (!v31);
    }
  }
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE20ELj1ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v1 = MEMORY[0x270FA5388](a1);
  uint64_t v50 = *MEMORY[0x263EF8340];
  AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressMacroblock((uint64_t)v49, *(void *)(v1 + 40), *(unsigned __int8 **)(v1 + 48));
  uint64_t v2 = *(unsigned int *)(v1 + 80);
  if (!v2 || !*(_DWORD *)(v1 + 84)) {
    return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((uint64_t)v49, 256, *(_OWORD **)(v1 + 40), *(char **)(v1 + 48), *(unsigned __int8 *)(v1 + 88), *(unsigned __int8 *)(v1 + 89));
  }
  unint64_t v3 = (unint64_t)*(unsigned int *)(v1 + 72) << 8;
  uint64_t v4 = 16 * *(unsigned int *)(v1 + 76);
  v5 = &v49[v3 + v4];
  uint64_t v6 = *(void *)(v1 + 56);
  uint64_t v7 = *(void *)(v1 + 64);
  unint64_t v8 = 16 * *(unsigned int *)(v1 + 84);
  if (v8 <= 1) {
    unint64_t v9 = 1;
  }
  else {
    unint64_t v9 = 16 * *(unsigned int *)(v1 + 84);
  }
  if (v9) {
    BOOL v10 = (v9 - 1) >> 32 == 0;
  }
  else {
    BOOL v10 = 0;
  }
  if (v10)
  {
    unsigned int v14 = &v49[v3 + v4];
    uint64_t v15 = v9 & 0xFFFFFFFF0;
    if (v9 < 0x20)
    {
      uint64_t v16 = 0;
      unsigned int v17 = &v49[v3 + v4];
      unsigned int v18 = *(uint64_t **)(v1 + 56);
      while (1)
      {
        unsigned int v19 = (char *)(v6 + v7 * v16);
        unsigned int v20 = &v5[256 * v16];
        if ((unint64_t)(&v14[256 * v16] - v19) > 0x1F)
        {
          v20 += v15;
          uint64_t v22 = v17;
          uint64_t v23 = v18;
          uint64_t v24 = v9 & 0xFFFFFFFF0;
          do
          {
            uint64_t v25 = *v23++;
            *v22++ = v25;
            v24 -= 8;
          }
          while (v24);
          if (v9 == v15) {
            goto LABEL_17;
          }
          v19 += v15;
          int v21 = v9 & 0xFFFFFFF0;
        }
        else
        {
          int v21 = 0;
        }
        unsigned int v26 = v21 + 1;
        do
        {
          char v27 = *v19++;
          *v20++ = v27;
          BOOL v28 = v8 > v26++;
        }
        while (v28);
LABEL_17:
        ++v16;
        unsigned int v18 = (uint64_t *)((char *)v18 + v7);
        v17 += 256;
        if (v16 == v2) {
          return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((uint64_t)v49, 256, *(_OWORD **)(v1 + 40), *(char **)(v1 + 48), *(unsigned __int8 *)(v1 + 88), *(unsigned __int8 *)(v1 + 89));
        }
      }
    }
    uint64_t v29 = 0;
    uint64_t v30 = v9 & 0xFFFFFFFE0;
    BOOL v31 = &v49[v3 + v4];
    int v32 = &v49[v3 + 16 + v4];
    unsigned int v33 = (long long *)(v6 + 16);
    int v34 = (uint64_t *)(v6 + (v9 & 0xFFFFFFFE0));
    for (i = &v31[v9 & 0xFFFFFFFE0]; ; i += 32)
    {
      uint64_t v36 = (char *)(v6 + v7 * v29);
      uint32x2_t v37 = &v5[256 * v29];
      if ((unint64_t)(&v14[256 * v29] - v36) >= 0x20)
      {
        unsigned int v39 = v33;
        int v40 = v32;
        uint64_t v41 = v9 & 0xFFFFFFFE0;
        do
        {
          long long v42 = *v39;
          *(v40 - 1) = *(v39 - 1);
          *int v40 = v42;
          v40 += 2;
          v39 += 2;
          v41 -= 32;
        }
        while (v41);
        if (v9 == v30) {
          goto LABEL_28;
        }
        if ((v9 & 0x10) != 0)
        {
          v37 += v15;
          unsigned int v43 = i;
          unsigned int v44 = v34;
          unint64_t v45 = v15 - (v9 & 0xFFFFFFFE0);
          do
          {
            uint64_t v46 = *v44++;
            *v43++ = v46;
            v45 -= 8;
          }
          while (v45);
          if (v9 == v15) {
            goto LABEL_28;
          }
          v36 += v15;
          int v38 = v9 & 0xFFFFFFF0;
        }
        else
        {
          v36 += v30;
          v37 += v30;
          int v38 = v9 & 0xFFFFFFE0;
        }
      }
      else
      {
        int v38 = 0;
      }
      unsigned int v47 = v38 + 1;
      do
      {
        char v48 = *v36++;
        *v37++ = v48;
        BOOL v28 = v8 > v47++;
      }
      while (v28);
LABEL_28:
      ++v29;
      v32 += 256;
      unsigned int v33 = (long long *)((char *)v33 + v7);
      int v34 = (uint64_t *)((char *)v34 + v7);
      if (v29 == v2) {
        return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((uint64_t)v49, 256, *(_OWORD **)(v1 + 40), *(char **)(v1 + 48), *(unsigned __int8 *)(v1 + 88), *(unsigned __int8 *)(v1 + 89));
      }
    }
  }
  for (uint64_t j = 0; j != v2; ++j)
  {
    uint64_t v12 = 0;
    do
    {
      v5[v12] = *(unsigned char *)(v6 + v12);
      ++v12;
    }
    while (v8 > v12);
    v5 += 256;
    v6 += v7;
  }
  return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((uint64_t)v49, 256, *(_OWORD **)(v1 + 40), *(char **)(v1 + 48), *(unsigned __int8 *)(v1 + 88), *(unsigned __int8 *)(v1 + 89));
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE20ELj1ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v1 = MEMORY[0x270FA5388](a1);
  uint64_t v50 = *MEMORY[0x263EF8340];
  AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressMacroblock((uint64_t)v49, *(void *)(v1 + 40), *(unsigned __int8 **)(v1 + 48));
  uint64_t v2 = *(unsigned int *)(v1 + 80);
  if (!v2 || !*(_DWORD *)(v1 + 84)) {
    return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((uint64_t)v49, 256, *(void *)(v1 + 40), *(unsigned char **)(v1 + 48), *(unsigned __int8 *)(v1 + 88), *(unsigned __int8 *)(v1 + 89));
  }
  unint64_t v3 = (unint64_t)*(unsigned int *)(v1 + 72) << 8;
  uint64_t v4 = 16 * *(unsigned int *)(v1 + 76);
  v5 = &v49[v3 + v4];
  uint64_t v6 = *(void *)(v1 + 56);
  uint64_t v7 = *(void *)(v1 + 64);
  unint64_t v8 = 16 * *(unsigned int *)(v1 + 84);
  if (v8 <= 1) {
    unint64_t v9 = 1;
  }
  else {
    unint64_t v9 = 16 * *(unsigned int *)(v1 + 84);
  }
  if (v9) {
    BOOL v10 = (v9 - 1) >> 32 == 0;
  }
  else {
    BOOL v10 = 0;
  }
  if (v10)
  {
    unsigned int v14 = &v49[v3 + v4];
    uint64_t v15 = v9 & 0xFFFFFFFF0;
    if (v9 < 0x20)
    {
      uint64_t v16 = 0;
      unsigned int v17 = &v49[v3 + v4];
      unsigned int v18 = *(uint64_t **)(v1 + 56);
      while (1)
      {
        unsigned int v19 = (char *)(v6 + v7 * v16);
        unsigned int v20 = &v5[256 * v16];
        if ((unint64_t)(&v14[256 * v16] - v19) > 0x1F)
        {
          v20 += v15;
          uint64_t v22 = v17;
          uint64_t v23 = v18;
          uint64_t v24 = v9 & 0xFFFFFFFF0;
          do
          {
            uint64_t v25 = *v23++;
            *v22++ = v25;
            v24 -= 8;
          }
          while (v24);
          if (v9 == v15) {
            goto LABEL_17;
          }
          v19 += v15;
          int v21 = v9 & 0xFFFFFFF0;
        }
        else
        {
          int v21 = 0;
        }
        unsigned int v26 = v21 + 1;
        do
        {
          char v27 = *v19++;
          *v20++ = v27;
          BOOL v28 = v8 > v26++;
        }
        while (v28);
LABEL_17:
        ++v16;
        unsigned int v18 = (uint64_t *)((char *)v18 + v7);
        v17 += 256;
        if (v16 == v2) {
          return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((uint64_t)v49, 256, *(void *)(v1 + 40), *(unsigned char **)(v1 + 48), *(unsigned __int8 *)(v1 + 88), *(unsigned __int8 *)(v1 + 89));
        }
      }
    }
    uint64_t v29 = 0;
    uint64_t v30 = v9 & 0xFFFFFFFE0;
    BOOL v31 = &v49[v3 + v4];
    int v32 = &v49[v3 + 16 + v4];
    unsigned int v33 = (long long *)(v6 + 16);
    int v34 = (uint64_t *)(v6 + (v9 & 0xFFFFFFFE0));
    for (i = &v31[v9 & 0xFFFFFFFE0]; ; i += 32)
    {
      uint64_t v36 = (char *)(v6 + v7 * v29);
      uint32x2_t v37 = &v5[256 * v29];
      if ((unint64_t)(&v14[256 * v29] - v36) >= 0x20)
      {
        unsigned int v39 = v33;
        int v40 = v32;
        uint64_t v41 = v9 & 0xFFFFFFFE0;
        do
        {
          long long v42 = *v39;
          *(v40 - 1) = *(v39 - 1);
          *int v40 = v42;
          v40 += 2;
          v39 += 2;
          v41 -= 32;
        }
        while (v41);
        if (v9 == v30) {
          goto LABEL_28;
        }
        if ((v9 & 0x10) != 0)
        {
          v37 += v15;
          unsigned int v43 = i;
          unsigned int v44 = v34;
          unint64_t v45 = v15 - (v9 & 0xFFFFFFFE0);
          do
          {
            uint64_t v46 = *v44++;
            *v43++ = v46;
            v45 -= 8;
          }
          while (v45);
          if (v9 == v15) {
            goto LABEL_28;
          }
          v36 += v15;
          int v38 = v9 & 0xFFFFFFF0;
        }
        else
        {
          v36 += v30;
          v37 += v30;
          int v38 = v9 & 0xFFFFFFE0;
        }
      }
      else
      {
        int v38 = 0;
      }
      unsigned int v47 = v38 + 1;
      do
      {
        char v48 = *v36++;
        *v37++ = v48;
        BOOL v28 = v8 > v47++;
      }
      while (v28);
LABEL_28:
      ++v29;
      v32 += 256;
      unsigned int v33 = (long long *)((char *)v33 + v7);
      int v34 = (uint64_t *)((char *)v34 + v7);
      if (v29 == v2) {
        return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((uint64_t)v49, 256, *(void *)(v1 + 40), *(unsigned char **)(v1 + 48), *(unsigned __int8 *)(v1 + 88), *(unsigned __int8 *)(v1 + 89));
      }
    }
  }
  for (uint64_t j = 0; j != v2; ++j)
  {
    uint64_t v12 = 0;
    do
    {
      v5[v12] = *(unsigned char *)(v6 + v12);
      ++v12;
    }
    while (v8 > v12);
    v5 += 256;
    v6 += v7;
  }
  return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((uint64_t)v49, 256, *(void *)(v1 + 40), *(unsigned char **)(v1 + 48), *(unsigned __int8 *)(v1 + 88), *(unsigned __int8 *)(v1 + 89));
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE20ELj1ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v1 = MEMORY[0x270FA5388](a1);
  uint64_t v50 = *MEMORY[0x263EF8340];
  AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressMacroblock((uint64_t)v49, *(void *)(v1 + 40), *(unsigned __int8 **)(v1 + 48));
  uint64_t v2 = *(unsigned int *)(v1 + 80);
  if (!v2 || !*(_DWORD *)(v1 + 84)) {
    return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((uint64_t)v49, 256, *(_OWORD **)(v1 + 40), *(char **)(v1 + 48), *(unsigned __int8 *)(v1 + 88), *(unsigned __int8 *)(v1 + 89));
  }
  unint64_t v3 = (unint64_t)*(unsigned int *)(v1 + 72) << 8;
  uint64_t v4 = 16 * *(unsigned int *)(v1 + 76);
  v5 = &v49[v3 + v4];
  uint64_t v6 = *(void *)(v1 + 56);
  uint64_t v7 = *(void *)(v1 + 64);
  unint64_t v8 = 16 * *(unsigned int *)(v1 + 84);
  if (v8 <= 1) {
    unint64_t v9 = 1;
  }
  else {
    unint64_t v9 = 16 * *(unsigned int *)(v1 + 84);
  }
  if (v9) {
    BOOL v10 = (v9 - 1) >> 32 == 0;
  }
  else {
    BOOL v10 = 0;
  }
  if (v10)
  {
    unsigned int v14 = &v49[v3 + v4];
    uint64_t v15 = v9 & 0xFFFFFFFF0;
    if (v9 < 0x20)
    {
      uint64_t v16 = 0;
      unsigned int v17 = &v49[v3 + v4];
      unsigned int v18 = *(uint64_t **)(v1 + 56);
      while (1)
      {
        unsigned int v19 = (char *)(v6 + v7 * v16);
        unsigned int v20 = &v5[256 * v16];
        if ((unint64_t)(&v14[256 * v16] - v19) > 0x1F)
        {
          v20 += v15;
          uint64_t v22 = v17;
          uint64_t v23 = v18;
          uint64_t v24 = v9 & 0xFFFFFFFF0;
          do
          {
            uint64_t v25 = *v23++;
            *v22++ = v25;
            v24 -= 8;
          }
          while (v24);
          if (v9 == v15) {
            goto LABEL_17;
          }
          v19 += v15;
          int v21 = v9 & 0xFFFFFFF0;
        }
        else
        {
          int v21 = 0;
        }
        unsigned int v26 = v21 + 1;
        do
        {
          char v27 = *v19++;
          *v20++ = v27;
          BOOL v28 = v8 > v26++;
        }
        while (v28);
LABEL_17:
        ++v16;
        unsigned int v18 = (uint64_t *)((char *)v18 + v7);
        v17 += 256;
        if (v16 == v2) {
          return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((uint64_t)v49, 256, *(_OWORD **)(v1 + 40), *(char **)(v1 + 48), *(unsigned __int8 *)(v1 + 88), *(unsigned __int8 *)(v1 + 89));
        }
      }
    }
    uint64_t v29 = 0;
    uint64_t v30 = v9 & 0xFFFFFFFE0;
    BOOL v31 = &v49[v3 + v4];
    int v32 = &v49[v3 + 16 + v4];
    unsigned int v33 = (long long *)(v6 + 16);
    int v34 = (uint64_t *)(v6 + (v9 & 0xFFFFFFFE0));
    for (i = &v31[v9 & 0xFFFFFFFE0]; ; i += 32)
    {
      uint64_t v36 = (char *)(v6 + v7 * v29);
      uint32x2_t v37 = &v5[256 * v29];
      if ((unint64_t)(&v14[256 * v29] - v36) >= 0x20)
      {
        unsigned int v39 = v33;
        int v40 = v32;
        uint64_t v41 = v9 & 0xFFFFFFFE0;
        do
        {
          long long v42 = *v39;
          *(v40 - 1) = *(v39 - 1);
          *int v40 = v42;
          v40 += 2;
          v39 += 2;
          v41 -= 32;
        }
        while (v41);
        if (v9 == v30) {
          goto LABEL_28;
        }
        if ((v9 & 0x10) != 0)
        {
          v37 += v15;
          unsigned int v43 = i;
          unsigned int v44 = v34;
          unint64_t v45 = v15 - (v9 & 0xFFFFFFFE0);
          do
          {
            uint64_t v46 = *v44++;
            *v43++ = v46;
            v45 -= 8;
          }
          while (v45);
          if (v9 == v15) {
            goto LABEL_28;
          }
          v36 += v15;
          int v38 = v9 & 0xFFFFFFF0;
        }
        else
        {
          v36 += v30;
          v37 += v30;
          int v38 = v9 & 0xFFFFFFE0;
        }
      }
      else
      {
        int v38 = 0;
      }
      unsigned int v47 = v38 + 1;
      do
      {
        char v48 = *v36++;
        *v37++ = v48;
        BOOL v28 = v8 > v47++;
      }
      while (v28);
LABEL_28:
      ++v29;
      v32 += 256;
      unsigned int v33 = (long long *)((char *)v33 + v7);
      int v34 = (uint64_t *)((char *)v34 + v7);
      if (v29 == v2) {
        return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((uint64_t)v49, 256, *(_OWORD **)(v1 + 40), *(char **)(v1 + 48), *(unsigned __int8 *)(v1 + 88), *(unsigned __int8 *)(v1 + 89));
      }
    }
  }
  for (uint64_t j = 0; j != v2; ++j)
  {
    uint64_t v12 = 0;
    do
    {
      v5[v12] = *(unsigned char *)(v6 + v12);
      ++v12;
    }
    while (v8 > v12);
    v5 += 256;
    v6 += v7;
  }
  return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((uint64_t)v49, 256, *(_OWORD **)(v1 + 40), *(char **)(v1 + 48), *(unsigned __int8 *)(v1 + 88), *(unsigned __int8 *)(v1 + 89));
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE20ELj1ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v1 = MEMORY[0x270FA5388](a1);
  uint64_t v50 = *MEMORY[0x263EF8340];
  AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressMacroblock((uint64_t)v49, *(void *)(v1 + 40), *(unsigned __int8 **)(v1 + 48));
  uint64_t v2 = *(unsigned int *)(v1 + 80);
  if (!v2 || !*(_DWORD *)(v1 + 84)) {
    return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((uint64_t)v49, 256, *(void *)(v1 + 40), *(unsigned char **)(v1 + 48), *(unsigned __int8 *)(v1 + 88), *(unsigned __int8 *)(v1 + 89));
  }
  unint64_t v3 = (unint64_t)*(unsigned int *)(v1 + 72) << 8;
  uint64_t v4 = 16 * *(unsigned int *)(v1 + 76);
  v5 = &v49[v3 + v4];
  uint64_t v6 = *(void *)(v1 + 56);
  uint64_t v7 = *(void *)(v1 + 64);
  unint64_t v8 = 16 * *(unsigned int *)(v1 + 84);
  if (v8 <= 1) {
    unint64_t v9 = 1;
  }
  else {
    unint64_t v9 = 16 * *(unsigned int *)(v1 + 84);
  }
  if (v9) {
    BOOL v10 = (v9 - 1) >> 32 == 0;
  }
  else {
    BOOL v10 = 0;
  }
  if (v10)
  {
    unsigned int v14 = &v49[v3 + v4];
    uint64_t v15 = v9 & 0xFFFFFFFF0;
    if (v9 < 0x20)
    {
      uint64_t v16 = 0;
      unsigned int v17 = &v49[v3 + v4];
      unsigned int v18 = *(uint64_t **)(v1 + 56);
      while (1)
      {
        unsigned int v19 = (char *)(v6 + v7 * v16);
        unsigned int v20 = &v5[256 * v16];
        if ((unint64_t)(&v14[256 * v16] - v19) > 0x1F)
        {
          v20 += v15;
          uint64_t v22 = v17;
          uint64_t v23 = v18;
          uint64_t v24 = v9 & 0xFFFFFFFF0;
          do
          {
            uint64_t v25 = *v23++;
            *v22++ = v25;
            v24 -= 8;
          }
          while (v24);
          if (v9 == v15) {
            goto LABEL_17;
          }
          v19 += v15;
          int v21 = v9 & 0xFFFFFFF0;
        }
        else
        {
          int v21 = 0;
        }
        unsigned int v26 = v21 + 1;
        do
        {
          char v27 = *v19++;
          *v20++ = v27;
          BOOL v28 = v8 > v26++;
        }
        while (v28);
LABEL_17:
        ++v16;
        unsigned int v18 = (uint64_t *)((char *)v18 + v7);
        v17 += 256;
        if (v16 == v2) {
          return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((uint64_t)v49, 256, *(void *)(v1 + 40), *(unsigned char **)(v1 + 48), *(unsigned __int8 *)(v1 + 88), *(unsigned __int8 *)(v1 + 89));
        }
      }
    }
    uint64_t v29 = 0;
    uint64_t v30 = v9 & 0xFFFFFFFE0;
    BOOL v31 = &v49[v3 + v4];
    int v32 = &v49[v3 + 16 + v4];
    unsigned int v33 = (long long *)(v6 + 16);
    int v34 = (uint64_t *)(v6 + (v9 & 0xFFFFFFFE0));
    for (i = &v31[v9 & 0xFFFFFFFE0]; ; i += 32)
    {
      uint64_t v36 = (char *)(v6 + v7 * v29);
      uint32x2_t v37 = &v5[256 * v29];
      if ((unint64_t)(&v14[256 * v29] - v36) >= 0x20)
      {
        unsigned int v39 = v33;
        int v40 = v32;
        uint64_t v41 = v9 & 0xFFFFFFFE0;
        do
        {
          long long v42 = *v39;
          *(v40 - 1) = *(v39 - 1);
          *int v40 = v42;
          v40 += 2;
          v39 += 2;
          v41 -= 32;
        }
        while (v41);
        if (v9 == v30) {
          goto LABEL_28;
        }
        if ((v9 & 0x10) != 0)
        {
          v37 += v15;
          unsigned int v43 = i;
          unsigned int v44 = v34;
          unint64_t v45 = v15 - (v9 & 0xFFFFFFFE0);
          do
          {
            uint64_t v46 = *v44++;
            *v43++ = v46;
            v45 -= 8;
          }
          while (v45);
          if (v9 == v15) {
            goto LABEL_28;
          }
          v36 += v15;
          int v38 = v9 & 0xFFFFFFF0;
        }
        else
        {
          v36 += v30;
          v37 += v30;
          int v38 = v9 & 0xFFFFFFE0;
        }
      }
      else
      {
        int v38 = 0;
      }
      unsigned int v47 = v38 + 1;
      do
      {
        char v48 = *v36++;
        *v37++ = v48;
        BOOL v28 = v8 > v47++;
      }
      while (v28);
LABEL_28:
      ++v29;
      v32 += 256;
      unsigned int v33 = (long long *)((char *)v33 + v7);
      int v34 = (uint64_t *)((char *)v34 + v7);
      if (v29 == v2) {
        return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((uint64_t)v49, 256, *(void *)(v1 + 40), *(unsigned char **)(v1 + 48), *(unsigned __int8 *)(v1 + 88), *(unsigned __int8 *)(v1 + 89));
      }
    }
  }
  for (uint64_t j = 0; j != v2; ++j)
  {
    uint64_t v12 = 0;
    do
    {
      v5[v12] = *(unsigned char *)(v6 + v12);
      ++v12;
    }
    while (v8 > v12);
    v5 += 256;
    v6 += v7;
  }
  return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((uint64_t)v49, 256, *(void *)(v1 + 40), *(unsigned char **)(v1 + 48), *(unsigned __int8 *)(v1 + 88), *(unsigned __int8 *)(v1 + 89));
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE14ELj1ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v75 = *MEMORY[0x263EF8340];
  AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressMacroblock(v74, *(int64x2_t **)(a1 + 40), *(unsigned __int8 **)(a1 + 48));
  uint64_t v2 = *(unsigned int *)(a1 + 80);
  if (v2 && *(_DWORD *)(a1 + 84))
  {
    unint64_t v3 = (unint64_t)*(unsigned int *)(a1 + 72) << 6;
    uint64_t v4 = 4 * *(unsigned int *)(a1 + 76);
    v5 = &v74[0].i8[v3 + v4];
    uint64_t v6 = *(void *)(a1 + 56);
    uint64_t v7 = *(void *)(a1 + 64);
    unint64_t v8 = 4 * *(unsigned int *)(a1 + 84);
    if (v8 <= 1) {
      unint64_t v9 = 1;
    }
    else {
      unint64_t v9 = 4 * *(unsigned int *)(a1 + 84);
    }
    if (v9 <= 7)
    {
      for (uint64_t i = 0; i != v2; ++i)
      {
        uint64_t v11 = 0;
        do
        {
          v5[v11] = *(unsigned char *)(v6 + v11);
          ++v11;
        }
        while (v8 > v11);
        v5 += 64;
        v6 += v7;
      }
      goto LABEL_20;
    }
    if (v9) {
      BOOL v12 = (v9 - 1) >> 32 == 0;
    }
    else {
      BOOL v12 = 0;
    }
    if (!v12)
    {
      for (uint64_t j = 0; j != v2; ++j)
      {
        uint64_t v14 = 0;
        do
        {
          v5[v14] = *(unsigned char *)(v6 + v14);
          ++v14;
        }
        while (v8 > v14);
        v5 += 64;
        v6 += v7;
      }
      goto LABEL_20;
    }
    unsigned int v39 = &v74[0].i8[v3 + v4];
    uint64_t v40 = v9 & 0x3FFFFFFF8;
    if (v9 < 0x20)
    {
      uint64_t v41 = 0;
      long long v42 = &v74[0].i8[v3 + v4];
      unsigned int v43 = *(uint64_t **)(a1 + 56);
      while (1)
      {
        unsigned int v44 = (char *)(v6 + v7 * v41);
        unint64_t v45 = &v5[64 * v41];
        if ((unint64_t)(&v39[64 * v41] - v44) > 0x1F)
        {
          v45 += v40;
          unsigned int v47 = v42;
          char v48 = v43;
          uint64_t v49 = v9 & 0x3FFFFFFF8;
          do
          {
            uint64_t v50 = *v48++;
            *(void *)unsigned int v47 = v50;
            v47 += 8;
            v49 -= 8;
          }
          while (v49);
          if (v9 == v40) {
            goto LABEL_36;
          }
          v44 += v40;
          int v46 = v9 & 0xFFFFFFF8;
        }
        else
        {
          int v46 = 0;
        }
        unsigned int v51 = v46 + 1;
        do
        {
          char v52 = *v44++;
          *v45++ = v52;
          BOOL v53 = v8 > v51++;
        }
        while (v53);
LABEL_36:
        ++v41;
        unsigned int v43 = (uint64_t *)((char *)v43 + v7);
        v42 += 64;
        if (v41 == v2) {
          goto LABEL_20;
        }
      }
    }
    uint64_t v54 = 0;
    uint64_t v55 = v9 & 0x3FFFFFFE0;
    __int32 v56 = &v74[0].i8[v3 + v4];
    __int32 v57 = &v74[1].i8[v3 + v4];
    unint64_t v58 = (long long *)(v6 + 16);
    unsigned int v59 = (uint64_t *)(v6 + (v9 & 0x3FFFFFFE0));
    unsigned int v60 = &v56[v9 & 0x3FFFFFFE0];
    do
    {
      unsigned int v61 = (char *)(v6 + v7 * v54);
      unsigned int v62 = &v5[64 * v54];
      if ((unint64_t)(&v39[64 * v54] - v61) >= 0x20)
      {
        uint64_t v66 = v58;
        BOOL v67 = v57;
        uint64_t v68 = v9 & 0x3FFFFFFE0;
        do
        {
          long long v69 = *v66;
          *((_OWORD *)v67 - 1) = *(v66 - 1);
          *(_OWORD *)BOOL v67 = v69;
          v67 += 32;
          v66 += 2;
          v68 -= 32;
        }
        while (v68);
        if (v9 == v55) {
          goto LABEL_47;
        }
        if ((v9 & 0x18) != 0)
        {
          v62 += v40;
          unsigned int v70 = v60;
          uint64_t v71 = v59;
          unint64_t v72 = v40 - (v9 & 0x3FFFFFFE0);
          do
          {
            uint64_t v73 = *v71++;
            *(void *)unsigned int v70 = v73;
            v70 += 8;
            v72 -= 8;
          }
          while (v72);
          if (v9 == v40) {
            goto LABEL_47;
          }
          v61 += v40;
          int v63 = v9 & 0xFFFFFFF8;
        }
        else
        {
          v61 += v55;
          v62 += v55;
          int v63 = v9 & 0xFFFFFFE0;
        }
      }
      else
      {
        int v63 = 0;
      }
      unsigned int v64 = v63 + 1;
      do
      {
        char v65 = *v61++;
        *v62++ = v65;
        BOOL v53 = v8 > v64++;
      }
      while (v53);
LABEL_47:
      ++v54;
      v57 += 64;
      unint64_t v58 = (long long *)((char *)v58 + v7);
      unsigned int v59 = (uint64_t *)((char *)v59 + v7);
      v60 += 64;
    }
    while (v54 != v2);
  }
LABEL_20:
  uint64_t v15 = 0;
  uint64_t v16 = *(int64x2_t **)(a1 + 40);
  unsigned int v17 = *(char **)(a1 + 48);
  int v18 = *(unsigned __int8 *)(a1 + 88);
  int v19 = *(unsigned __int8 *)(a1 + 89);
  do
  {
    uint64_t v34 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,1u>::kSubblockPositions[v15 + 1];
    uint64_t v35 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,1u>::kSubblockPositions[v15];
    LODWORD(result) = (v18 - 8 * v35) & ~((v18 - 8 * (int)v35) >> 31);
    if (result >= 8) {
      uint64_t result = 8;
    }
    else {
      uint64_t result = result;
    }
    unsigned int v37 = (v19 - 4 * v34) & ~((v19 - 4 * (int)v34) >> 31);
    if (v37 >= 4) {
      unsigned int v37 = 4;
    }
    if (result) {
      BOOL v38 = v37 == 0;
    }
    else {
      BOOL v38 = 1;
    }
    if (v38)
    {
      char v33 = 0;
    }
    else
    {
      unsigned int v20 = &v74[16 * v34 + 2 * v35];
      int64x2_t v21 = v20[1];
      int64x2_t v22 = v20[4];
      int64x2_t v23 = v20[5];
      int64x2_t v24 = vzip1q_s64(*v20, v22);
      int64x2_t v25 = vzip2q_s64(*v20, v22);
      int64x2_t v26 = vzip1q_s64(v21, v23);
      int64x2_t v27 = vzip2q_s64(v21, v23);
      int64x2_t v28 = v20[8];
      int64x2_t v29 = v20[9];
      v20 += 12;
      int64x2_t v30 = v20[1];
      int64x2_t v31 = vzip1q_s64(v28, *v20);
      int64x2_t v32 = vzip2q_s64(v28, *v20);
      *uint64_t v16 = v24;
      v16[1] = v25;
      v16[2] = v31;
      v16[3] = v32;
      v16[4] = v26;
      v16[5] = v27;
      v16[6] = vzip1q_s64(v29, v30);
      v16[7] = vzip2q_s64(v29, v30);
      v16 += 8;
      char v33 = 127;
    }
    *v17++ = v33;
    v15 += 2;
  }
  while (v15 != 16);
  return result;
}

unint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE14ELj1ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v52 = *MEMORY[0x263EF8340];
  AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressMacroblock(v51, *(int64x2_t **)(a1 + 40), *(unsigned __int8 **)(a1 + 48));
  uint64_t v2 = *(unsigned int *)(a1 + 80);
  if (!v2 || !*(_DWORD *)(a1 + 84)) {
    return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v51, 64, *(void *)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
  }
  unint64_t v3 = (unint64_t)*(unsigned int *)(a1 + 72) << 6;
  uint64_t v4 = 4 * *(unsigned int *)(a1 + 76);
  v5 = &v51[0].i8[v3 + v4];
  uint64_t v6 = *(void *)(a1 + 56);
  uint64_t v7 = *(void *)(a1 + 64);
  unint64_t v8 = 4 * *(unsigned int *)(a1 + 84);
  if (v8 <= 1) {
    unint64_t v9 = 1;
  }
  else {
    unint64_t v9 = 4 * *(unsigned int *)(a1 + 84);
  }
  if (v9 <= 7)
  {
    for (uint64_t i = 0; i != v2; ++i)
    {
      uint64_t v11 = 0;
      do
      {
        v5[v11] = *(unsigned char *)(v6 + v11);
        ++v11;
      }
      while (v8 > v11);
      v5 += 64;
      v6 += v7;
    }
    return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v51, 64, *(void *)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
  }
  if (v9) {
    BOOL v12 = (v9 - 1) >> 32 == 0;
  }
  else {
    BOOL v12 = 0;
  }
  if (v12)
  {
    uint64_t v16 = &v51[0].i8[v3 + v4];
    uint64_t v17 = v9 & 0x3FFFFFFF8;
    if (v9 < 0x20)
    {
      uint64_t v18 = 0;
      int v19 = &v51[0].i8[v3 + v4];
      unsigned int v20 = *(uint64_t **)(a1 + 56);
      while (1)
      {
        int64x2_t v21 = (char *)(v6 + v7 * v18);
        int64x2_t v22 = &v5[64 * v18];
        if ((unint64_t)(&v16[64 * v18] - v21) > 0x1F)
        {
          v22 += v17;
          int64x2_t v24 = v19;
          int64x2_t v25 = v20;
          uint64_t v26 = v9 & 0x3FFFFFFF8;
          do
          {
            uint64_t v27 = *v25++;
            *(void *)int64x2_t v24 = v27;
            v24 += 8;
            v26 -= 8;
          }
          while (v26);
          if (v9 == v17) {
            goto LABEL_23;
          }
          v21 += v17;
          int v23 = v9 & 0xFFFFFFF8;
        }
        else
        {
          int v23 = 0;
        }
        unsigned int v28 = v23 + 1;
        do
        {
          char v29 = *v21++;
          *v22++ = v29;
          BOOL v30 = v8 > v28++;
        }
        while (v30);
LABEL_23:
        ++v18;
        unsigned int v20 = (uint64_t *)((char *)v20 + v7);
        v19 += 64;
        if (v18 == v2) {
          return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v51, 64, *(void *)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
        }
      }
    }
    uint64_t v31 = 0;
    uint64_t v32 = v9 & 0x3FFFFFFE0;
    char v33 = &v51[0].i8[v3 + v4];
    uint64_t v34 = &v51[1].i8[v3 + v4];
    uint64_t v35 = (long long *)(v6 + 16);
    uint64_t v36 = (uint64_t *)(v6 + (v9 & 0x3FFFFFFE0));
    for (uint64_t j = &v33[v9 & 0x3FFFFFFE0]; ; j += 64)
    {
      BOOL v38 = (char *)(v6 + v7 * v31);
      unsigned int v39 = &v5[64 * v31];
      if ((unint64_t)(&v16[64 * v31] - v38) >= 0x20)
      {
        unsigned int v43 = v35;
        unsigned int v44 = v34;
        uint64_t v45 = v9 & 0x3FFFFFFE0;
        do
        {
          long long v46 = *v43;
          *((_OWORD *)v44 - 1) = *(v43 - 1);
          *(_OWORD *)unsigned int v44 = v46;
          v44 += 32;
          v43 += 2;
          v45 -= 32;
        }
        while (v45);
        if (v9 == v32) {
          goto LABEL_34;
        }
        if ((v9 & 0x18) != 0)
        {
          v39 += v17;
          unsigned int v47 = j;
          char v48 = v36;
          unint64_t v49 = v17 - (v9 & 0x3FFFFFFE0);
          do
          {
            uint64_t v50 = *v48++;
            *(void *)unsigned int v47 = v50;
            v47 += 8;
            v49 -= 8;
          }
          while (v49);
          if (v9 == v17) {
            goto LABEL_34;
          }
          v38 += v17;
          int v40 = v9 & 0xFFFFFFF8;
        }
        else
        {
          v38 += v32;
          v39 += v32;
          int v40 = v9 & 0xFFFFFFE0;
        }
      }
      else
      {
        int v40 = 0;
      }
      unsigned int v41 = v40 + 1;
      do
      {
        char v42 = *v38++;
        *v39++ = v42;
        BOOL v30 = v8 > v41++;
      }
      while (v30);
LABEL_34:
      ++v31;
      v34 += 64;
      uint64_t v35 = (long long *)((char *)v35 + v7);
      uint64_t v36 = (uint64_t *)((char *)v36 + v7);
      if (v31 == v2) {
        return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v51, 64, *(void *)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
      }
    }
  }
  for (uint64_t k = 0; k != v2; ++k)
  {
    uint64_t v14 = 0;
    do
    {
      v5[v14] = *(unsigned char *)(v6 + v14);
      ++v14;
    }
    while (v8 > v14);
    v5 += 64;
    v6 += v7;
  }
  return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v51, 64, *(void *)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE14ELj1ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v75 = *MEMORY[0x263EF8340];
  AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressMacroblock(v74, *(int64x2_t **)(a1 + 40), *(unsigned __int8 **)(a1 + 48));
  uint64_t v2 = *(unsigned int *)(a1 + 80);
  if (v2 && *(_DWORD *)(a1 + 84))
  {
    unint64_t v3 = (unint64_t)*(unsigned int *)(a1 + 72) << 6;
    uint64_t v4 = 4 * *(unsigned int *)(a1 + 76);
    v5 = &v74[0].i8[v3 + v4];
    uint64_t v6 = *(void *)(a1 + 56);
    uint64_t v7 = *(void *)(a1 + 64);
    unint64_t v8 = 4 * *(unsigned int *)(a1 + 84);
    if (v8 <= 1) {
      unint64_t v9 = 1;
    }
    else {
      unint64_t v9 = 4 * *(unsigned int *)(a1 + 84);
    }
    if (v9 <= 7)
    {
      for (uint64_t i = 0; i != v2; ++i)
      {
        uint64_t v11 = 0;
        do
        {
          v5[v11] = *(unsigned char *)(v6 + v11);
          ++v11;
        }
        while (v8 > v11);
        v5 += 64;
        v6 += v7;
      }
      goto LABEL_20;
    }
    if (v9) {
      BOOL v12 = (v9 - 1) >> 32 == 0;
    }
    else {
      BOOL v12 = 0;
    }
    if (!v12)
    {
      for (uint64_t j = 0; j != v2; ++j)
      {
        uint64_t v14 = 0;
        do
        {
          v5[v14] = *(unsigned char *)(v6 + v14);
          ++v14;
        }
        while (v8 > v14);
        v5 += 64;
        v6 += v7;
      }
      goto LABEL_20;
    }
    unsigned int v39 = &v74[0].i8[v3 + v4];
    uint64_t v40 = v9 & 0x3FFFFFFF8;
    if (v9 < 0x20)
    {
      uint64_t v41 = 0;
      char v42 = &v74[0].i8[v3 + v4];
      unsigned int v43 = *(uint64_t **)(a1 + 56);
      while (1)
      {
        unsigned int v44 = (char *)(v6 + v7 * v41);
        uint64_t v45 = &v5[64 * v41];
        if ((unint64_t)(&v39[64 * v41] - v44) > 0x1F)
        {
          v45 += v40;
          unsigned int v47 = v42;
          char v48 = v43;
          uint64_t v49 = v9 & 0x3FFFFFFF8;
          do
          {
            uint64_t v50 = *v48++;
            *(void *)unsigned int v47 = v50;
            v47 += 8;
            v49 -= 8;
          }
          while (v49);
          if (v9 == v40) {
            goto LABEL_36;
          }
          v44 += v40;
          int v46 = v9 & 0xFFFFFFF8;
        }
        else
        {
          int v46 = 0;
        }
        unsigned int v51 = v46 + 1;
        do
        {
          char v52 = *v44++;
          *v45++ = v52;
          BOOL v53 = v8 > v51++;
        }
        while (v53);
LABEL_36:
        ++v41;
        unsigned int v43 = (uint64_t *)((char *)v43 + v7);
        v42 += 64;
        if (v41 == v2) {
          goto LABEL_20;
        }
      }
    }
    uint64_t v54 = 0;
    uint64_t v55 = v9 & 0x3FFFFFFE0;
    __int32 v56 = &v74[0].i8[v3 + v4];
    __int32 v57 = &v74[1].i8[v3 + v4];
    unint64_t v58 = (long long *)(v6 + 16);
    unsigned int v59 = (uint64_t *)(v6 + (v9 & 0x3FFFFFFE0));
    unsigned int v60 = &v56[v9 & 0x3FFFFFFE0];
    do
    {
      unsigned int v61 = (char *)(v6 + v7 * v54);
      unsigned int v62 = &v5[64 * v54];
      if ((unint64_t)(&v39[64 * v54] - v61) >= 0x20)
      {
        uint64_t v66 = v58;
        BOOL v67 = v57;
        uint64_t v68 = v9 & 0x3FFFFFFE0;
        do
        {
          long long v69 = *v66;
          *((_OWORD *)v67 - 1) = *(v66 - 1);
          *(_OWORD *)BOOL v67 = v69;
          v67 += 32;
          v66 += 2;
          v68 -= 32;
        }
        while (v68);
        if (v9 == v55) {
          goto LABEL_47;
        }
        if ((v9 & 0x18) != 0)
        {
          v62 += v40;
          unsigned int v70 = v60;
          uint64_t v71 = v59;
          unint64_t v72 = v40 - (v9 & 0x3FFFFFFE0);
          do
          {
            uint64_t v73 = *v71++;
            *(void *)unsigned int v70 = v73;
            v70 += 8;
            v72 -= 8;
          }
          while (v72);
          if (v9 == v40) {
            goto LABEL_47;
          }
          v61 += v40;
          int v63 = v9 & 0xFFFFFFF8;
        }
        else
        {
          v61 += v55;
          v62 += v55;
          int v63 = v9 & 0xFFFFFFE0;
        }
      }
      else
      {
        int v63 = 0;
      }
      unsigned int v64 = v63 + 1;
      do
      {
        char v65 = *v61++;
        *v62++ = v65;
        BOOL v53 = v8 > v64++;
      }
      while (v53);
LABEL_47:
      ++v54;
      v57 += 64;
      unint64_t v58 = (long long *)((char *)v58 + v7);
      unsigned int v59 = (uint64_t *)((char *)v59 + v7);
      v60 += 64;
    }
    while (v54 != v2);
  }
LABEL_20:
  uint64_t v15 = 0;
  uint64_t v16 = *(int64x2_t **)(a1 + 40);
  uint64_t v17 = *(char **)(a1 + 48);
  int v18 = *(unsigned __int8 *)(a1 + 88);
  int v19 = *(unsigned __int8 *)(a1 + 89);
  do
  {
    uint64_t v34 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,1u>::kSubblockPositions[v15 + 1];
    uint64_t v35 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,1u>::kSubblockPositions[v15];
    LODWORD(result) = (v18 - 8 * v35) & ~((v18 - 8 * (int)v35) >> 31);
    if (result >= 8) {
      uint64_t result = 8;
    }
    else {
      uint64_t result = result;
    }
    unsigned int v37 = (v19 - 4 * v34) & ~((v19 - 4 * (int)v34) >> 31);
    if (v37 >= 4) {
      unsigned int v37 = 4;
    }
    if (result) {
      BOOL v38 = v37 == 0;
    }
    else {
      BOOL v38 = 1;
    }
    if (v38)
    {
      char v33 = 0;
    }
    else
    {
      unsigned int v20 = &v74[16 * v34 + 2 * v35];
      int64x2_t v21 = v20[1];
      int64x2_t v22 = v20[4];
      int64x2_t v23 = v20[5];
      int64x2_t v24 = vzip1q_s64(*v20, v22);
      int64x2_t v25 = vzip2q_s64(*v20, v22);
      int64x2_t v26 = vzip1q_s64(v21, v23);
      int64x2_t v27 = vzip2q_s64(v21, v23);
      int64x2_t v28 = v20[8];
      int64x2_t v29 = v20[9];
      v20 += 12;
      int64x2_t v30 = v20[1];
      int64x2_t v31 = vzip1q_s64(v28, *v20);
      int64x2_t v32 = vzip2q_s64(v28, *v20);
      *uint64_t v16 = v24;
      v16[1] = v25;
      v16[2] = v31;
      v16[3] = v32;
      v16[4] = v26;
      v16[5] = v27;
      v16[6] = vzip1q_s64(v29, v30);
      v16[7] = vzip2q_s64(v29, v30);
      v16 += 8;
      char v33 = 127;
    }
    *v17++ = v33;
    v15 += 2;
  }
  while (v15 != 16);
  return result;
}

unint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE14ELj1ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v52 = *MEMORY[0x263EF8340];
  AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressMacroblock(v51, *(int64x2_t **)(a1 + 40), *(unsigned __int8 **)(a1 + 48));
  uint64_t v2 = *(unsigned int *)(a1 + 80);
  if (!v2 || !*(_DWORD *)(a1 + 84)) {
    return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v51, 64, *(void *)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
  }
  unint64_t v3 = (unint64_t)*(unsigned int *)(a1 + 72) << 6;
  uint64_t v4 = 4 * *(unsigned int *)(a1 + 76);
  v5 = &v51[0].i8[v3 + v4];
  uint64_t v6 = *(void *)(a1 + 56);
  uint64_t v7 = *(void *)(a1 + 64);
  unint64_t v8 = 4 * *(unsigned int *)(a1 + 84);
  if (v8 <= 1) {
    unint64_t v9 = 1;
  }
  else {
    unint64_t v9 = 4 * *(unsigned int *)(a1 + 84);
  }
  if (v9 <= 7)
  {
    for (uint64_t i = 0; i != v2; ++i)
    {
      uint64_t v11 = 0;
      do
      {
        v5[v11] = *(unsigned char *)(v6 + v11);
        ++v11;
      }
      while (v8 > v11);
      v5 += 64;
      v6 += v7;
    }
    return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v51, 64, *(void *)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
  }
  if (v9) {
    BOOL v12 = (v9 - 1) >> 32 == 0;
  }
  else {
    BOOL v12 = 0;
  }
  if (v12)
  {
    uint64_t v16 = &v51[0].i8[v3 + v4];
    uint64_t v17 = v9 & 0x3FFFFFFF8;
    if (v9 < 0x20)
    {
      uint64_t v18 = 0;
      int v19 = &v51[0].i8[v3 + v4];
      unsigned int v20 = *(uint64_t **)(a1 + 56);
      while (1)
      {
        int64x2_t v21 = (char *)(v6 + v7 * v18);
        int64x2_t v22 = &v5[64 * v18];
        if ((unint64_t)(&v16[64 * v18] - v21) > 0x1F)
        {
          v22 += v17;
          int64x2_t v24 = v19;
          int64x2_t v25 = v20;
          uint64_t v26 = v9 & 0x3FFFFFFF8;
          do
          {
            uint64_t v27 = *v25++;
            *(void *)int64x2_t v24 = v27;
            v24 += 8;
            v26 -= 8;
          }
          while (v26);
          if (v9 == v17) {
            goto LABEL_23;
          }
          v21 += v17;
          int v23 = v9 & 0xFFFFFFF8;
        }
        else
        {
          int v23 = 0;
        }
        unsigned int v28 = v23 + 1;
        do
        {
          char v29 = *v21++;
          *v22++ = v29;
          BOOL v30 = v8 > v28++;
        }
        while (v30);
LABEL_23:
        ++v18;
        unsigned int v20 = (uint64_t *)((char *)v20 + v7);
        v19 += 64;
        if (v18 == v2) {
          return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v51, 64, *(void *)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
        }
      }
    }
    uint64_t v31 = 0;
    uint64_t v32 = v9 & 0x3FFFFFFE0;
    char v33 = &v51[0].i8[v3 + v4];
    uint64_t v34 = &v51[1].i8[v3 + v4];
    uint64_t v35 = (long long *)(v6 + 16);
    uint64_t v36 = (uint64_t *)(v6 + (v9 & 0x3FFFFFFE0));
    for (uint64_t j = &v33[v9 & 0x3FFFFFFE0]; ; j += 64)
    {
      BOOL v38 = (char *)(v6 + v7 * v31);
      unsigned int v39 = &v5[64 * v31];
      if ((unint64_t)(&v16[64 * v31] - v38) >= 0x20)
      {
        unsigned int v43 = v35;
        unsigned int v44 = v34;
        uint64_t v45 = v9 & 0x3FFFFFFE0;
        do
        {
          long long v46 = *v43;
          *((_OWORD *)v44 - 1) = *(v43 - 1);
          *(_OWORD *)unsigned int v44 = v46;
          v44 += 32;
          v43 += 2;
          v45 -= 32;
        }
        while (v45);
        if (v9 == v32) {
          goto LABEL_34;
        }
        if ((v9 & 0x18) != 0)
        {
          v39 += v17;
          unsigned int v47 = j;
          char v48 = v36;
          unint64_t v49 = v17 - (v9 & 0x3FFFFFFE0);
          do
          {
            uint64_t v50 = *v48++;
            *(void *)unsigned int v47 = v50;
            v47 += 8;
            v49 -= 8;
          }
          while (v49);
          if (v9 == v17) {
            goto LABEL_34;
          }
          v38 += v17;
          int v40 = v9 & 0xFFFFFFF8;
        }
        else
        {
          v38 += v32;
          v39 += v32;
          int v40 = v9 & 0xFFFFFFE0;
        }
      }
      else
      {
        int v40 = 0;
      }
      unsigned int v41 = v40 + 1;
      do
      {
        char v42 = *v38++;
        *v39++ = v42;
        BOOL v30 = v8 > v41++;
      }
      while (v30);
LABEL_34:
      ++v31;
      v34 += 64;
      uint64_t v35 = (long long *)((char *)v35 + v7);
      uint64_t v36 = (uint64_t *)((char *)v36 + v7);
      if (v31 == v2) {
        return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v51, 64, *(void *)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
      }
    }
  }
  for (uint64_t k = 0; k != v2; ++k)
  {
    uint64_t v14 = 0;
    do
    {
      v5[v14] = *(unsigned char *)(v6 + v14);
      ++v14;
    }
    while (v8 > v14);
    v5 += 64;
    v6 += v7;
  }
  return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v51, 64, *(void *)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE12ELj1ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v75 = *MEMORY[0x263EF8340];
  AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressMacroblock(v74, *(int64x2_t **)(a1 + 40), *(unsigned __int8 **)(a1 + 48));
  uint64_t v2 = *(unsigned int *)(a1 + 80);
  if (v2 && *(_DWORD *)(a1 + 84))
  {
    unint64_t v3 = (unint64_t)*(unsigned int *)(a1 + 72) << 6;
    uint64_t v4 = 4 * *(unsigned int *)(a1 + 76);
    v5 = &v74[0].i8[v3 + v4];
    uint64_t v6 = *(void *)(a1 + 56);
    uint64_t v7 = *(void *)(a1 + 64);
    unint64_t v8 = 4 * *(unsigned int *)(a1 + 84);
    if (v8 <= 1) {
      unint64_t v9 = 1;
    }
    else {
      unint64_t v9 = 4 * *(unsigned int *)(a1 + 84);
    }
    if (v9 <= 7)
    {
      for (uint64_t i = 0; i != v2; ++i)
      {
        uint64_t v11 = 0;
        do
        {
          v5[v11] = *(unsigned char *)(v6 + v11);
          ++v11;
        }
        while (v8 > v11);
        v5 += 64;
        v6 += v7;
      }
      goto LABEL_20;
    }
    if (v9) {
      BOOL v12 = (v9 - 1) >> 32 == 0;
    }
    else {
      BOOL v12 = 0;
    }
    if (!v12)
    {
      for (uint64_t j = 0; j != v2; ++j)
      {
        uint64_t v14 = 0;
        do
        {
          v5[v14] = *(unsigned char *)(v6 + v14);
          ++v14;
        }
        while (v8 > v14);
        v5 += 64;
        v6 += v7;
      }
      goto LABEL_20;
    }
    unsigned int v39 = &v74[0].i8[v3 + v4];
    uint64_t v40 = v9 & 0x3FFFFFFF8;
    if (v9 < 0x20)
    {
      uint64_t v41 = 0;
      char v42 = &v74[0].i8[v3 + v4];
      unsigned int v43 = *(uint64_t **)(a1 + 56);
      while (1)
      {
        unsigned int v44 = (char *)(v6 + v7 * v41);
        uint64_t v45 = &v5[64 * v41];
        if ((unint64_t)(&v39[64 * v41] - v44) > 0x1F)
        {
          v45 += v40;
          unsigned int v47 = v42;
          char v48 = v43;
          uint64_t v49 = v9 & 0x3FFFFFFF8;
          do
          {
            uint64_t v50 = *v48++;
            *(void *)unsigned int v47 = v50;
            v47 += 8;
            v49 -= 8;
          }
          while (v49);
          if (v9 == v40) {
            goto LABEL_36;
          }
          v44 += v40;
          int v46 = v9 & 0xFFFFFFF8;
        }
        else
        {
          int v46 = 0;
        }
        unsigned int v51 = v46 + 1;
        do
        {
          char v52 = *v44++;
          *v45++ = v52;
          BOOL v53 = v8 > v51++;
        }
        while (v53);
LABEL_36:
        ++v41;
        unsigned int v43 = (uint64_t *)((char *)v43 + v7);
        v42 += 64;
        if (v41 == v2) {
          goto LABEL_20;
        }
      }
    }
    uint64_t v54 = 0;
    uint64_t v55 = v9 & 0x3FFFFFFE0;
    __int32 v56 = &v74[0].i8[v3 + v4];
    __int32 v57 = &v74[1].i8[v3 + v4];
    unint64_t v58 = (long long *)(v6 + 16);
    unsigned int v59 = (uint64_t *)(v6 + (v9 & 0x3FFFFFFE0));
    unsigned int v60 = &v56[v9 & 0x3FFFFFFE0];
    do
    {
      unsigned int v61 = (char *)(v6 + v7 * v54);
      unsigned int v62 = &v5[64 * v54];
      if ((unint64_t)(&v39[64 * v54] - v61) >= 0x20)
      {
        uint64_t v66 = v58;
        BOOL v67 = v57;
        uint64_t v68 = v9 & 0x3FFFFFFE0;
        do
        {
          long long v69 = *v66;
          *((_OWORD *)v67 - 1) = *(v66 - 1);
          *(_OWORD *)BOOL v67 = v69;
          v67 += 32;
          v66 += 2;
          v68 -= 32;
        }
        while (v68);
        if (v9 == v55) {
          goto LABEL_47;
        }
        if ((v9 & 0x18) != 0)
        {
          v62 += v40;
          unsigned int v70 = v60;
          uint64_t v71 = v59;
          unint64_t v72 = v40 - (v9 & 0x3FFFFFFE0);
          do
          {
            uint64_t v73 = *v71++;
            *(void *)unsigned int v70 = v73;
            v70 += 8;
            v72 -= 8;
          }
          while (v72);
          if (v9 == v40) {
            goto LABEL_47;
          }
          v61 += v40;
          int v63 = v9 & 0xFFFFFFF8;
        }
        else
        {
          v61 += v55;
          v62 += v55;
          int v63 = v9 & 0xFFFFFFE0;
        }
      }
      else
      {
        int v63 = 0;
      }
      unsigned int v64 = v63 + 1;
      do
      {
        char v65 = *v61++;
        *v62++ = v65;
        BOOL v53 = v8 > v64++;
      }
      while (v53);
LABEL_47:
      ++v54;
      v57 += 64;
      unint64_t v58 = (long long *)((char *)v58 + v7);
      unsigned int v59 = (uint64_t *)((char *)v59 + v7);
      v60 += 64;
    }
    while (v54 != v2);
  }
LABEL_20:
  uint64_t v15 = 0;
  uint64_t v16 = *(int64x2_t **)(a1 + 40);
  uint64_t v17 = *(char **)(a1 + 48);
  int v18 = *(unsigned __int8 *)(a1 + 88);
  int v19 = *(unsigned __int8 *)(a1 + 89);
  do
  {
    uint64_t v34 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,1u>::kSubblockPositions[v15 + 1];
    uint64_t v35 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,1u>::kSubblockPositions[v15];
    LODWORD(result) = (v18 - 8 * v35) & ~((v18 - 8 * (int)v35) >> 31);
    if (result >= 8) {
      uint64_t result = 8;
    }
    else {
      uint64_t result = result;
    }
    unsigned int v37 = (v19 - 4 * v34) & ~((v19 - 4 * (int)v34) >> 31);
    if (v37 >= 4) {
      unsigned int v37 = 4;
    }
    if (result) {
      BOOL v38 = v37 == 0;
    }
    else {
      BOOL v38 = 1;
    }
    if (v38)
    {
      char v33 = 0;
    }
    else
    {
      unsigned int v20 = &v74[16 * v34 + 2 * v35];
      int64x2_t v21 = v20[1];
      int64x2_t v22 = v20[4];
      int64x2_t v23 = v20[5];
      int64x2_t v24 = vzip1q_s64(*v20, v22);
      int64x2_t v25 = vzip2q_s64(*v20, v22);
      int64x2_t v26 = vzip1q_s64(v21, v23);
      int64x2_t v27 = vzip2q_s64(v21, v23);
      int64x2_t v28 = v20[8];
      int64x2_t v29 = v20[9];
      v20 += 12;
      int64x2_t v30 = v20[1];
      int64x2_t v31 = vzip1q_s64(v28, *v20);
      int64x2_t v32 = vzip2q_s64(v28, *v20);
      *uint64_t v16 = v24;
      v16[1] = v25;
      v16[2] = v31;
      v16[3] = v32;
      v16[4] = v26;
      v16[5] = v27;
      v16[6] = vzip1q_s64(v29, v30);
      v16[7] = vzip2q_s64(v29, v30);
      v16 += 8;
      char v33 = 127;
    }
    *v17++ = v33;
    v15 += 2;
  }
  while (v15 != 16);
  return result;
}

unint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE12ELj1ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v52 = *MEMORY[0x263EF8340];
  AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressMacroblock(v51, *(int64x2_t **)(a1 + 40), *(unsigned __int8 **)(a1 + 48));
  uint64_t v2 = *(unsigned int *)(a1 + 80);
  if (!v2 || !*(_DWORD *)(a1 + 84)) {
    return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v51, 64, *(void *)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
  }
  unint64_t v3 = (unint64_t)*(unsigned int *)(a1 + 72) << 6;
  uint64_t v4 = 4 * *(unsigned int *)(a1 + 76);
  v5 = &v51[0].i8[v3 + v4];
  uint64_t v6 = *(void *)(a1 + 56);
  uint64_t v7 = *(void *)(a1 + 64);
  unint64_t v8 = 4 * *(unsigned int *)(a1 + 84);
  if (v8 <= 1) {
    unint64_t v9 = 1;
  }
  else {
    unint64_t v9 = 4 * *(unsigned int *)(a1 + 84);
  }
  if (v9 <= 7)
  {
    for (uint64_t i = 0; i != v2; ++i)
    {
      uint64_t v11 = 0;
      do
      {
        v5[v11] = *(unsigned char *)(v6 + v11);
        ++v11;
      }
      while (v8 > v11);
      v5 += 64;
      v6 += v7;
    }
    return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v51, 64, *(void *)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
  }
  if (v9) {
    BOOL v12 = (v9 - 1) >> 32 == 0;
  }
  else {
    BOOL v12 = 0;
  }
  if (v12)
  {
    uint64_t v16 = &v51[0].i8[v3 + v4];
    uint64_t v17 = v9 & 0x3FFFFFFF8;
    if (v9 < 0x20)
    {
      uint64_t v18 = 0;
      int v19 = &v51[0].i8[v3 + v4];
      unsigned int v20 = *(uint64_t **)(a1 + 56);
      while (1)
      {
        int64x2_t v21 = (char *)(v6 + v7 * v18);
        int64x2_t v22 = &v5[64 * v18];
        if ((unint64_t)(&v16[64 * v18] - v21) > 0x1F)
        {
          v22 += v17;
          int64x2_t v24 = v19;
          int64x2_t v25 = v20;
          uint64_t v26 = v9 & 0x3FFFFFFF8;
          do
          {
            uint64_t v27 = *v25++;
            *(void *)int64x2_t v24 = v27;
            v24 += 8;
            v26 -= 8;
          }
          while (v26);
          if (v9 == v17) {
            goto LABEL_23;
          }
          v21 += v17;
          int v23 = v9 & 0xFFFFFFF8;
        }
        else
        {
          int v23 = 0;
        }
        unsigned int v28 = v23 + 1;
        do
        {
          char v29 = *v21++;
          *v22++ = v29;
          BOOL v30 = v8 > v28++;
        }
        while (v30);
LABEL_23:
        ++v18;
        unsigned int v20 = (uint64_t *)((char *)v20 + v7);
        v19 += 64;
        if (v18 == v2) {
          return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v51, 64, *(void *)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
        }
      }
    }
    uint64_t v31 = 0;
    uint64_t v32 = v9 & 0x3FFFFFFE0;
    char v33 = &v51[0].i8[v3 + v4];
    uint64_t v34 = &v51[1].i8[v3 + v4];
    uint64_t v35 = (long long *)(v6 + 16);
    uint64_t v36 = (uint64_t *)(v6 + (v9 & 0x3FFFFFFE0));
    for (uint64_t j = &v33[v9 & 0x3FFFFFFE0]; ; j += 64)
    {
      BOOL v38 = (char *)(v6 + v7 * v31);
      unsigned int v39 = &v5[64 * v31];
      if ((unint64_t)(&v16[64 * v31] - v38) >= 0x20)
      {
        unsigned int v43 = v35;
        unsigned int v44 = v34;
        uint64_t v45 = v9 & 0x3FFFFFFE0;
        do
        {
          long long v46 = *v43;
          *((_OWORD *)v44 - 1) = *(v43 - 1);
          *(_OWORD *)unsigned int v44 = v46;
          v44 += 32;
          v43 += 2;
          v45 -= 32;
        }
        while (v45);
        if (v9 == v32) {
          goto LABEL_34;
        }
        if ((v9 & 0x18) != 0)
        {
          v39 += v17;
          unsigned int v47 = j;
          char v48 = v36;
          unint64_t v49 = v17 - (v9 & 0x3FFFFFFE0);
          do
          {
            uint64_t v50 = *v48++;
            *(void *)unsigned int v47 = v50;
            v47 += 8;
            v49 -= 8;
          }
          while (v49);
          if (v9 == v17) {
            goto LABEL_34;
          }
          v38 += v17;
          int v40 = v9 & 0xFFFFFFF8;
        }
        else
        {
          v38 += v32;
          v39 += v32;
          int v40 = v9 & 0xFFFFFFE0;
        }
      }
      else
      {
        int v40 = 0;
      }
      unsigned int v41 = v40 + 1;
      do
      {
        char v42 = *v38++;
        *v39++ = v42;
        BOOL v30 = v8 > v41++;
      }
      while (v30);
LABEL_34:
      ++v31;
      v34 += 64;
      uint64_t v35 = (long long *)((char *)v35 + v7);
      uint64_t v36 = (uint64_t *)((char *)v36 + v7);
      if (v31 == v2) {
        return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v51, 64, *(void *)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
      }
    }
  }
  for (uint64_t k = 0; k != v2; ++k)
  {
    uint64_t v14 = 0;
    do
    {
      v5[v14] = *(unsigned char *)(v6 + v14);
      ++v14;
    }
    while (v8 > v14);
    v5 += 64;
    v6 += v7;
  }
  return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v51, 64, *(void *)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE12ELj1ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v75 = *MEMORY[0x263EF8340];
  AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressMacroblock(v74, *(int64x2_t **)(a1 + 40), *(unsigned __int8 **)(a1 + 48));
  uint64_t v2 = *(unsigned int *)(a1 + 80);
  if (v2 && *(_DWORD *)(a1 + 84))
  {
    unint64_t v3 = (unint64_t)*(unsigned int *)(a1 + 72) << 6;
    uint64_t v4 = 4 * *(unsigned int *)(a1 + 76);
    v5 = &v74[0].i8[v3 + v4];
    uint64_t v6 = *(void *)(a1 + 56);
    uint64_t v7 = *(void *)(a1 + 64);
    unint64_t v8 = 4 * *(unsigned int *)(a1 + 84);
    if (v8 <= 1) {
      unint64_t v9 = 1;
    }
    else {
      unint64_t v9 = 4 * *(unsigned int *)(a1 + 84);
    }
    if (v9 <= 7)
    {
      for (uint64_t i = 0; i != v2; ++i)
      {
        uint64_t v11 = 0;
        do
        {
          v5[v11] = *(unsigned char *)(v6 + v11);
          ++v11;
        }
        while (v8 > v11);
        v5 += 64;
        v6 += v7;
      }
      goto LABEL_20;
    }
    if (v9) {
      BOOL v12 = (v9 - 1) >> 32 == 0;
    }
    else {
      BOOL v12 = 0;
    }
    if (!v12)
    {
      for (uint64_t j = 0; j != v2; ++j)
      {
        uint64_t v14 = 0;
        do
        {
          v5[v14] = *(unsigned char *)(v6 + v14);
          ++v14;
        }
        while (v8 > v14);
        v5 += 64;
        v6 += v7;
      }
      goto LABEL_20;
    }
    unsigned int v39 = &v74[0].i8[v3 + v4];
    uint64_t v40 = v9 & 0x3FFFFFFF8;
    if (v9 < 0x20)
    {
      uint64_t v41 = 0;
      char v42 = &v74[0].i8[v3 + v4];
      unsigned int v43 = *(uint64_t **)(a1 + 56);
      while (1)
      {
        unsigned int v44 = (char *)(v6 + v7 * v41);
        uint64_t v45 = &v5[64 * v41];
        if ((unint64_t)(&v39[64 * v41] - v44) > 0x1F)
        {
          v45 += v40;
          unsigned int v47 = v42;
          char v48 = v43;
          uint64_t v49 = v9 & 0x3FFFFFFF8;
          do
          {
            uint64_t v50 = *v48++;
            *(void *)unsigned int v47 = v50;
            v47 += 8;
            v49 -= 8;
          }
          while (v49);
          if (v9 == v40) {
            goto LABEL_36;
          }
          v44 += v40;
          int v46 = v9 & 0xFFFFFFF8;
        }
        else
        {
          int v46 = 0;
        }
        unsigned int v51 = v46 + 1;
        do
        {
          char v52 = *v44++;
          *v45++ = v52;
          BOOL v53 = v8 > v51++;
        }
        while (v53);
LABEL_36:
        ++v41;
        unsigned int v43 = (uint64_t *)((char *)v43 + v7);
        v42 += 64;
        if (v41 == v2) {
          goto LABEL_20;
        }
      }
    }
    uint64_t v54 = 0;
    uint64_t v55 = v9 & 0x3FFFFFFE0;
    __int32 v56 = &v74[0].i8[v3 + v4];
    __int32 v57 = &v74[1].i8[v3 + v4];
    unint64_t v58 = (long long *)(v6 + 16);
    unsigned int v59 = (uint64_t *)(v6 + (v9 & 0x3FFFFFFE0));
    unsigned int v60 = &v56[v9 & 0x3FFFFFFE0];
    do
    {
      unsigned int v61 = (char *)(v6 + v7 * v54);
      unsigned int v62 = &v5[64 * v54];
      if ((unint64_t)(&v39[64 * v54] - v61) >= 0x20)
      {
        uint64_t v66 = v58;
        BOOL v67 = v57;
        uint64_t v68 = v9 & 0x3FFFFFFE0;
        do
        {
          long long v69 = *v66;
          *((_OWORD *)v67 - 1) = *(v66 - 1);
          *(_OWORD *)BOOL v67 = v69;
          v67 += 32;
          v66 += 2;
          v68 -= 32;
        }
        while (v68);
        if (v9 == v55) {
          goto LABEL_47;
        }
        if ((v9 & 0x18) != 0)
        {
          v62 += v40;
          unsigned int v70 = v60;
          uint64_t v71 = v59;
          unint64_t v72 = v40 - (v9 & 0x3FFFFFFE0);
          do
          {
            uint64_t v73 = *v71++;
            *(void *)unsigned int v70 = v73;
            v70 += 8;
            v72 -= 8;
          }
          while (v72);
          if (v9 == v40) {
            goto LABEL_47;
          }
          v61 += v40;
          int v63 = v9 & 0xFFFFFFF8;
        }
        else
        {
          v61 += v55;
          v62 += v55;
          int v63 = v9 & 0xFFFFFFE0;
        }
      }
      else
      {
        int v63 = 0;
      }
      unsigned int v64 = v63 + 1;
      do
      {
        char v65 = *v61++;
        *v62++ = v65;
        BOOL v53 = v8 > v64++;
      }
      while (v53);
LABEL_47:
      ++v54;
      v57 += 64;
      unint64_t v58 = (long long *)((char *)v58 + v7);
      unsigned int v59 = (uint64_t *)((char *)v59 + v7);
      v60 += 64;
    }
    while (v54 != v2);
  }
LABEL_20:
  uint64_t v15 = 0;
  uint64_t v16 = *(int64x2_t **)(a1 + 40);
  uint64_t v17 = *(char **)(a1 + 48);
  int v18 = *(unsigned __int8 *)(a1 + 88);
  int v19 = *(unsigned __int8 *)(a1 + 89);
  do
  {
    uint64_t v34 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,1u>::kSubblockPositions[v15 + 1];
    uint64_t v35 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,1u>::kSubblockPositions[v15];
    LODWORD(result) = (v18 - 8 * v35) & ~((v18 - 8 * (int)v35) >> 31);
    if (result >= 8) {
      uint64_t result = 8;
    }
    else {
      uint64_t result = result;
    }
    unsigned int v37 = (v19 - 4 * v34) & ~((v19 - 4 * (int)v34) >> 31);
    if (v37 >= 4) {
      unsigned int v37 = 4;
    }
    if (result) {
      BOOL v38 = v37 == 0;
    }
    else {
      BOOL v38 = 1;
    }
    if (v38)
    {
      char v33 = 0;
    }
    else
    {
      unsigned int v20 = &v74[16 * v34 + 2 * v35];
      int64x2_t v21 = v20[1];
      int64x2_t v22 = v20[4];
      int64x2_t v23 = v20[5];
      int64x2_t v24 = vzip1q_s64(*v20, v22);
      int64x2_t v25 = vzip2q_s64(*v20, v22);
      int64x2_t v26 = vzip1q_s64(v21, v23);
      int64x2_t v27 = vzip2q_s64(v21, v23);
      int64x2_t v28 = v20[8];
      int64x2_t v29 = v20[9];
      v20 += 12;
      int64x2_t v30 = v20[1];
      int64x2_t v31 = vzip1q_s64(v28, *v20);
      int64x2_t v32 = vzip2q_s64(v28, *v20);
      *uint64_t v16 = v24;
      v16[1] = v25;
      v16[2] = v31;
      v16[3] = v32;
      v16[4] = v26;
      v16[5] = v27;
      v16[6] = vzip1q_s64(v29, v30);
      v16[7] = vzip2q_s64(v29, v30);
      v16 += 8;
      char v33 = 127;
    }
    *v17++ = v33;
    v15 += 2;
  }
  while (v15 != 16);
  return result;
}

unint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE12ELj1ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v52 = *MEMORY[0x263EF8340];
  AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressMacroblock(v51, *(int64x2_t **)(a1 + 40), *(unsigned __int8 **)(a1 + 48));
  uint64_t v2 = *(unsigned int *)(a1 + 80);
  if (!v2 || !*(_DWORD *)(a1 + 84)) {
    return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v51, 64, *(void *)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
  }
  unint64_t v3 = (unint64_t)*(unsigned int *)(a1 + 72) << 6;
  uint64_t v4 = 4 * *(unsigned int *)(a1 + 76);
  v5 = &v51[0].i8[v3 + v4];
  uint64_t v6 = *(void *)(a1 + 56);
  uint64_t v7 = *(void *)(a1 + 64);
  unint64_t v8 = 4 * *(unsigned int *)(a1 + 84);
  if (v8 <= 1) {
    unint64_t v9 = 1;
  }
  else {
    unint64_t v9 = 4 * *(unsigned int *)(a1 + 84);
  }
  if (v9 <= 7)
  {
    for (uint64_t i = 0; i != v2; ++i)
    {
      uint64_t v11 = 0;
      do
      {
        v5[v11] = *(unsigned char *)(v6 + v11);
        ++v11;
      }
      while (v8 > v11);
      v5 += 64;
      v6 += v7;
    }
    return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v51, 64, *(void *)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
  }
  if (v9) {
    BOOL v12 = (v9 - 1) >> 32 == 0;
  }
  else {
    BOOL v12 = 0;
  }
  if (v12)
  {
    uint64_t v16 = &v51[0].i8[v3 + v4];
    uint64_t v17 = v9 & 0x3FFFFFFF8;
    if (v9 < 0x20)
    {
      uint64_t v18 = 0;
      int v19 = &v51[0].i8[v3 + v4];
      unsigned int v20 = *(uint64_t **)(a1 + 56);
      while (1)
      {
        int64x2_t v21 = (char *)(v6 + v7 * v18);
        int64x2_t v22 = &v5[64 * v18];
        if ((unint64_t)(&v16[64 * v18] - v21) > 0x1F)
        {
          v22 += v17;
          int64x2_t v24 = v19;
          int64x2_t v25 = v20;
          uint64_t v26 = v9 & 0x3FFFFFFF8;
          do
          {
            uint64_t v27 = *v25++;
            *(void *)int64x2_t v24 = v27;
            v24 += 8;
            v26 -= 8;
          }
          while (v26);
          if (v9 == v17) {
            goto LABEL_23;
          }
          v21 += v17;
          int v23 = v9 & 0xFFFFFFF8;
        }
        else
        {
          int v23 = 0;
        }
        unsigned int v28 = v23 + 1;
        do
        {
          char v29 = *v21++;
          *v22++ = v29;
          BOOL v30 = v8 > v28++;
        }
        while (v30);
LABEL_23:
        ++v18;
        unsigned int v20 = (uint64_t *)((char *)v20 + v7);
        v19 += 64;
        if (v18 == v2) {
          return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v51, 64, *(void *)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
        }
      }
    }
    uint64_t v31 = 0;
    uint64_t v32 = v9 & 0x3FFFFFFE0;
    char v33 = &v51[0].i8[v3 + v4];
    uint64_t v34 = &v51[1].i8[v3 + v4];
    uint64_t v35 = (long long *)(v6 + 16);
    uint64_t v36 = (uint64_t *)(v6 + (v9 & 0x3FFFFFFE0));
    for (uint64_t j = &v33[v9 & 0x3FFFFFFE0]; ; j += 64)
    {
      BOOL v38 = (char *)(v6 + v7 * v31);
      unsigned int v39 = &v5[64 * v31];
      if ((unint64_t)(&v16[64 * v31] - v38) >= 0x20)
      {
        unsigned int v43 = v35;
        unsigned int v44 = v34;
        uint64_t v45 = v9 & 0x3FFFFFFE0;
        do
        {
          long long v46 = *v43;
          *((_OWORD *)v44 - 1) = *(v43 - 1);
          *(_OWORD *)unsigned int v44 = v46;
          v44 += 32;
          v43 += 2;
          v45 -= 32;
        }
        while (v45);
        if (v9 == v32) {
          goto LABEL_34;
        }
        if ((v9 & 0x18) != 0)
        {
          v39 += v17;
          unsigned int v47 = j;
          char v48 = v36;
          unint64_t v49 = v17 - (v9 & 0x3FFFFFFE0);
          do
          {
            uint64_t v50 = *v48++;
            *(void *)unsigned int v47 = v50;
            v47 += 8;
            v49 -= 8;
          }
          while (v49);
          if (v9 == v17) {
            goto LABEL_34;
          }
          v38 += v17;
          int v40 = v9 & 0xFFFFFFF8;
        }
        else
        {
          v38 += v32;
          v39 += v32;
          int v40 = v9 & 0xFFFFFFE0;
        }
      }
      else
      {
        int v40 = 0;
      }
      unsigned int v41 = v40 + 1;
      do
      {
        char v42 = *v38++;
        *v39++ = v42;
        BOOL v30 = v8 > v41++;
      }
      while (v30);
LABEL_34:
      ++v31;
      v34 += 64;
      uint64_t v35 = (long long *)((char *)v35 + v7);
      uint64_t v36 = (uint64_t *)((char *)v36 + v7);
      if (v31 == v2) {
        return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v51, 64, *(void *)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
      }
    }
  }
  for (uint64_t k = 0; k != v2; ++k)
  {
    uint64_t v14 = 0;
    do
    {
      v5[v14] = *(unsigned char *)(v6 + v14);
      ++v14;
    }
    while (v8 > v14);
    v5 += 64;
    v6 += v7;
  }
  return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v51, 64, *(void *)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE9ELj1ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v2 = 0;
  uint64_t v79 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(a1 + 40);
  uint64_t v4 = *(unsigned char **)(a1 + 48);
  do
  {
    uint64_t v7 = (int32x4_t *)&v78[128
                         * (unint64_t)AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,1u>::kSubblockPositions[v2 + 1]
                         + 16
                         * AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,1u>::kSubblockPositions[v2]];
    unsigned int v8 = *v4;
    if (v8 == 63)
    {
      int32x4_t v9 = *(int32x4_t *)v3;
      int32x4_t v10 = *(int32x4_t *)(v3 + 16);
      int32x4_t v11 = *(int32x4_t *)(v3 + 32);
      int32x4_t v12 = *(int32x4_t *)(v3 + 48);
      *uint64_t v7 = vuzp1q_s32(*(int32x4_t *)v3, v11);
      v7[2] = vuzp2q_s32(v9, v11);
      v7[4] = vuzp1q_s32(v10, v12);
      v7[6] = vuzp2q_s32(v10, v12);
      uint64_t v6 = 64;
    }
    else if (v8 == 1)
    {
      int16x8_t v5 = vld1q_dup_s16((const __int16 *)v3);
      *uint64_t v7 = (int32x4_t)v5;
      v7[2] = (int32x4_t)v5;
      v7[4] = (int32x4_t)v5;
      v7[6] = (int32x4_t)v5;
      uint64_t v6 = 2;
    }
    else if (*v4)
    {
      uint64_t v6 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v7, 32, v3, v8);
    }
    else
    {
      uint64_t v6 = 0;
      v7->i64[0] = 0;
      v7->i64[1] = 0;
      v7[2].i64[0] = 0;
      v7[2].i64[1] = 0;
      v7[4].i64[0] = 0;
      v7[4].i64[1] = 0;
      v7[6].i64[0] = 0;
      v7[6].i64[1] = 0;
    }
    v3 += v6;
    ++v4;
    v2 += 2;
  }
  while (v2 != 16);
  uint64_t v13 = *(unsigned int *)(a1 + 80);
  if (!v13 || !*(_DWORD *)(a1 + 84)) {
    goto LABEL_39;
  }
  uint64_t v14 = 32 * *(unsigned int *)(a1 + 72);
  uint64_t v15 = 2 * *(unsigned int *)(a1 + 76);
  uint64_t v16 = &v78[v14 + v15];
  uint64_t v17 = *(void *)(a1 + 56);
  uint64_t v18 = *(void *)(a1 + 64);
  unint64_t v19 = 2 * *(unsigned int *)(a1 + 84);
  if (v19 <= 1) {
    unint64_t v20 = 1;
  }
  else {
    unint64_t v20 = 2 * *(unsigned int *)(a1 + 84);
  }
  if (v20 > 7)
  {
    if (!v20 || (v20 - 1) >> 32)
    {
      for (uint64_t i = 0; i != v13; ++i)
      {
        uint64_t v39 = 0;
        do
        {
          v16[v39] = *(unsigned char *)(v17 + v39);
          ++v39;
        }
        while (v19 > v39);
        v16 += 32;
        v17 += v18;
      }
      goto LABEL_39;
    }
    int v23 = &v78[v14 + v15];
    uint64_t v24 = v20 & 0x1FFFFFFF8;
    if (v20 < 0x20)
    {
      uint64_t v25 = 0;
      uint64_t v26 = &v78[v14 + v15];
      uint64_t v27 = *(uint64_t **)(a1 + 56);
      while (1)
      {
        unsigned int v28 = (char *)(v17 + v18 * v25);
        char v29 = &v16[32 * v25];
        if ((unint64_t)(&v23[32 * v25] - v28) > 0x1F)
        {
          v29 += v24;
          uint64_t v31 = v26;
          uint64_t v32 = v27;
          uint64_t v33 = v20 & 0x1FFFFFFF8;
          do
          {
            uint64_t v34 = *v32++;
            *v31++ = v34;
            v33 -= 8;
          }
          while (v33);
          if (v20 == v24) {
            goto LABEL_25;
          }
          v28 += v24;
          int v30 = v20 & 0xFFFFFFF8;
        }
        else
        {
          int v30 = 0;
        }
        unsigned int v35 = v30 + 1;
        do
        {
          char v36 = *v28++;
          *v29++ = v36;
          BOOL v37 = v19 > v35++;
        }
        while (v37);
LABEL_25:
        ++v25;
        uint64_t v27 = (uint64_t *)((char *)v27 + v18);
        v26 += 32;
        if (v25 == v13) {
          goto LABEL_39;
        }
      }
    }
    uint64_t v58 = 0;
    uint64_t v59 = v20 & 0x1FFFFFFE0;
    unsigned int v60 = &v78[v14 + v15];
    unsigned int v61 = &v78[v14 + 16 + v15];
    unsigned int v62 = (long long *)(v17 + 16);
    int v63 = (uint64_t *)(v17 + (v20 & 0x1FFFFFFE0));
    unsigned int v64 = &v60[v20 & 0x1FFFFFFE0];
    while (1)
    {
      char v65 = (char *)(v17 + v18 * v58);
      uint64_t v66 = &v16[32 * v58];
      if ((unint64_t)(&v23[32 * v58] - v65) >= 0x20)
      {
        unsigned int v70 = v62;
        uint64_t v71 = v61;
        uint64_t v72 = v20 & 0x1FFFFFFE0;
        do
        {
          long long v73 = *v70;
          *(v71 - 1) = *(v70 - 1);
          *uint64_t v71 = v73;
          v71 += 2;
          v70 += 2;
          v72 -= 32;
        }
        while (v72);
        if (v20 == v59) {
          goto LABEL_54;
        }
        if ((v20 & 0x18) != 0)
        {
          v66 += v24;
          unsigned int v74 = v64;
          uint64_t v75 = v63;
          unint64_t v76 = v24 - (v20 & 0x1FFFFFFE0);
          do
          {
            uint64_t v77 = *v75++;
            *v74++ = v77;
            v76 -= 8;
          }
          while (v76);
          if (v20 == v24) {
            goto LABEL_54;
          }
          v65 += v24;
          int v67 = v20 & 0xFFFFFFF8;
        }
        else
        {
          v65 += v59;
          v66 += v59;
          int v67 = v20 & 0xFFFFFFE0;
        }
      }
      else
      {
        int v67 = 0;
      }
      unsigned int v68 = v67 + 1;
      do
      {
        char v69 = *v65++;
        *v66++ = v69;
        BOOL v37 = v19 > v68++;
      }
      while (v37);
LABEL_54:
      ++v58;
      v61 += 32;
      unsigned int v62 = (long long *)((char *)v62 + v18);
      int v63 = (uint64_t *)((char *)v63 + v18);
      v64 += 4;
      if (v58 == v13) {
        goto LABEL_39;
      }
    }
  }
  for (uint64_t j = 0; j != v13; ++j)
  {
    uint64_t v22 = 0;
    do
    {
      v16[v22] = *(unsigned char *)(v17 + v22);
      ++v22;
    }
    while (v19 > v22);
    v16 += 32;
    v17 += v18;
  }
LABEL_39:
  uint64_t v40 = 0;
  uint64_t v41 = *(void *)(a1 + 40);
  char v42 = *(char **)(a1 + 48);
  int v43 = *(unsigned __int8 *)(a1 + 88);
  int v44 = *(unsigned __int8 *)(a1 + 89);
  do
  {
    uint64_t v53 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,1u>::kSubblockPositions[v40 + 1];
    uint64_t v54 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,1u>::kSubblockPositions[v40];
    LODWORD(result) = (v43 - 8 * v54) & ~((v43 - 8 * (int)v54) >> 31);
    if (result >= 8) {
      uint64_t result = 8;
    }
    else {
      uint64_t result = result;
    }
    unsigned int v56 = (v44 - 4 * v53) & ~((v44 - 4 * (int)v53) >> 31);
    if (v56 >= 4) {
      unsigned int v56 = 4;
    }
    if (result) {
      BOOL v57 = v56 == 0;
    }
    else {
      BOOL v57 = 1;
    }
    if (v57)
    {
      char v52 = 0;
    }
    else
    {
      uint64_t v45 = (int32x4_t *)&v78[128 * v53 + 16 * v54];
      float32x2x2_t v46 = (float32x2x2_t)*v45;
      int32x4_t v47 = v45[2];
      int32x4_t v48 = vzip2q_s32(*v45, v47);
      float32x2x2_t v49 = (float32x2x2_t)v45[4];
      int32x4_t v50 = v45[6];
      unsigned int v51 = (float *)v41;
      vst2_f32(v51, v46);
      v51 += 4;
      vst2_f32(v51, v49);
      *(int32x4_t *)(v41 + 32) = v48;
      *(int32x4_t *)(v41 + 48) = vzip2q_s32((int32x4_t)v49, v50);
      v41 += 64;
      char v52 = 63;
    }
    *v42++ = v52;
    v40 += 2;
  }
  while (v40 != 16);
  return result;
}

unint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE9ELj1ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v2 = 0;
  uint64_t v62 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(a1 + 40);
  uint64_t v4 = *(unsigned char **)(a1 + 48);
  do
  {
    uint64_t v7 = (int32x4_t *)&v61[128
                         * (unint64_t)AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,1u>::kSubblockPositions[v2 + 1]
                         + 16
                         * AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,1u>::kSubblockPositions[v2]];
    unsigned int v8 = *v4;
    if (v8 == 63)
    {
      int32x4_t v9 = *(int32x4_t *)v3;
      int32x4_t v10 = *(int32x4_t *)(v3 + 16);
      int32x4_t v11 = *(int32x4_t *)(v3 + 32);
      int32x4_t v12 = *(int32x4_t *)(v3 + 48);
      *uint64_t v7 = vuzp1q_s32(*(int32x4_t *)v3, v11);
      v7[2] = vuzp2q_s32(v9, v11);
      v7[4] = vuzp1q_s32(v10, v12);
      v7[6] = vuzp2q_s32(v10, v12);
      uint64_t v6 = 64;
    }
    else if (v8 == 1)
    {
      int16x8_t v5 = vld1q_dup_s16((const __int16 *)v3);
      *uint64_t v7 = (int32x4_t)v5;
      v7[2] = (int32x4_t)v5;
      v7[4] = (int32x4_t)v5;
      v7[6] = (int32x4_t)v5;
      uint64_t v6 = 2;
    }
    else if (*v4)
    {
      uint64_t v6 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v7, 32, v3, v8);
    }
    else
    {
      uint64_t v6 = 0;
      v7->i64[0] = 0;
      v7->i64[1] = 0;
      v7[2].i64[0] = 0;
      v7[2].i64[1] = 0;
      v7[4].i64[0] = 0;
      v7[4].i64[1] = 0;
      v7[6].i64[0] = 0;
      v7[6].i64[1] = 0;
    }
    v3 += v6;
    ++v4;
    v2 += 2;
  }
  while (v2 != 16);
  uint64_t v13 = *(unsigned int *)(a1 + 80);
  if (v13 && *(_DWORD *)(a1 + 84))
  {
    uint64_t v14 = 32 * *(unsigned int *)(a1 + 72);
    uint64_t v15 = 2 * *(unsigned int *)(a1 + 76);
    uint64_t v16 = &v61[v14 + v15];
    uint64_t v17 = *(void *)(a1 + 56);
    uint64_t v18 = *(void *)(a1 + 64);
    unint64_t v19 = 2 * *(unsigned int *)(a1 + 84);
    if (v19 <= 1) {
      unint64_t v20 = 1;
    }
    else {
      unint64_t v20 = 2 * *(unsigned int *)(a1 + 84);
    }
    if (v20 <= 7)
    {
      for (uint64_t i = 0; i != v13; ++i)
      {
        uint64_t v22 = 0;
        do
        {
          v16[v22] = *(unsigned char *)(v17 + v22);
          ++v22;
        }
        while (v19 > v22);
        v16 += 32;
        v17 += v18;
      }
      return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v61, 32, *(void *)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
    }
    if (v20 && !((v20 - 1) >> 32))
    {
      int v23 = &v61[v14 + v15];
      uint64_t v24 = v20 & 0x1FFFFFFF8;
      if (v20 < 0x20)
      {
        uint64_t v25 = 0;
        uint64_t v26 = &v61[v14 + v15];
        uint64_t v27 = *(uint64_t **)(a1 + 56);
        while (1)
        {
          unsigned int v28 = (char *)(v17 + v18 * v25);
          char v29 = &v16[32 * v25];
          if ((unint64_t)(&v23[32 * v25] - v28) > 0x1F)
          {
            v29 += v24;
            uint64_t v31 = v26;
            uint64_t v32 = v27;
            uint64_t v33 = v20 & 0x1FFFFFFF8;
            do
            {
              uint64_t v34 = *v32++;
              *v31++ = v34;
              v33 -= 8;
            }
            while (v33);
            if (v20 == v24) {
              goto LABEL_25;
            }
            v28 += v24;
            int v30 = v20 & 0xFFFFFFF8;
          }
          else
          {
            int v30 = 0;
          }
          unsigned int v35 = v30 + 1;
          do
          {
            char v36 = *v28++;
            *v29++ = v36;
            BOOL v37 = v19 > v35++;
          }
          while (v37);
LABEL_25:
          ++v25;
          uint64_t v27 = (uint64_t *)((char *)v27 + v18);
          v26 += 32;
          if (v25 == v13) {
            return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v61, 32, *(void *)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
          }
        }
      }
      uint64_t v41 = 0;
      uint64_t v42 = v20 & 0x1FFFFFFE0;
      int v43 = &v61[v14 + v15];
      int v44 = &v61[v14 + 16 + v15];
      uint64_t v45 = (long long *)(v17 + 16);
      float32x2x2_t v46 = (uint64_t *)(v17 + (v20 & 0x1FFFFFFE0));
      for (uint64_t j = &v43[v20 & 0x1FFFFFFE0]; ; j += 4)
      {
        int32x4_t v48 = (char *)(v17 + v18 * v41);
        float32x2x2_t v49 = &v16[32 * v41];
        if ((unint64_t)(&v23[32 * v41] - v48) >= 0x20)
        {
          uint64_t v53 = v45;
          uint64_t v54 = v44;
          uint64_t v55 = v20 & 0x1FFFFFFE0;
          do
          {
            long long v56 = *v53;
            *(v54 - 1) = *(v53 - 1);
            *uint64_t v54 = v56;
            v54 += 2;
            v53 += 2;
            v55 -= 32;
          }
          while (v55);
          if (v20 == v42) {
            goto LABEL_41;
          }
          if ((v20 & 0x18) != 0)
          {
            v49 += v24;
            BOOL v57 = j;
            uint64_t v58 = v46;
            unint64_t v59 = v24 - (v20 & 0x1FFFFFFE0);
            do
            {
              uint64_t v60 = *v58++;
              *v57++ = v60;
              v59 -= 8;
            }
            while (v59);
            if (v20 == v24) {
              goto LABEL_41;
            }
            v48 += v24;
            int v50 = v20 & 0xFFFFFFF8;
          }
          else
          {
            v48 += v42;
            v49 += v42;
            int v50 = v20 & 0xFFFFFFE0;
          }
        }
        else
        {
          int v50 = 0;
        }
        unsigned int v51 = v50 + 1;
        do
        {
          char v52 = *v48++;
          *v49++ = v52;
          BOOL v37 = v19 > v51++;
        }
        while (v37);
LABEL_41:
        ++v41;
        v44 += 32;
        uint64_t v45 = (long long *)((char *)v45 + v18);
        float32x2x2_t v46 = (uint64_t *)((char *)v46 + v18);
        if (v41 == v13) {
          return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v61, 32, *(void *)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
        }
      }
    }
    for (uint64_t k = 0; k != v13; ++k)
    {
      uint64_t v39 = 0;
      do
      {
        v16[v39] = *(unsigned char *)(v17 + v39);
        ++v39;
      }
      while (v19 > v39);
      v16 += 32;
      v17 += v18;
    }
  }
  return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v61, 32, *(void *)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE9ELj1ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v2 = 0;
  uint64_t v79 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(a1 + 40);
  uint64_t v4 = *(unsigned char **)(a1 + 48);
  do
  {
    uint64_t v7 = (int32x4_t *)&v78[128
                         * (unint64_t)AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,1u>::kSubblockPositions[v2 + 1]
                         + 16
                         * AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,1u>::kSubblockPositions[v2]];
    unsigned int v8 = *v4;
    if (v8 == 63)
    {
      int32x4_t v9 = *(int32x4_t *)v3;
      int32x4_t v10 = *(int32x4_t *)(v3 + 16);
      int32x4_t v11 = *(int32x4_t *)(v3 + 32);
      int32x4_t v12 = *(int32x4_t *)(v3 + 48);
      *uint64_t v7 = vuzp1q_s32(*(int32x4_t *)v3, v11);
      v7[2] = vuzp2q_s32(v9, v11);
      v7[4] = vuzp1q_s32(v10, v12);
      v7[6] = vuzp2q_s32(v10, v12);
      uint64_t v6 = 64;
    }
    else if (v8 == 1)
    {
      int16x8_t v5 = vld1q_dup_s16((const __int16 *)v3);
      *uint64_t v7 = (int32x4_t)v5;
      v7[2] = (int32x4_t)v5;
      v7[4] = (int32x4_t)v5;
      v7[6] = (int32x4_t)v5;
      uint64_t v6 = 2;
    }
    else if (*v4)
    {
      uint64_t v6 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v7, 32, v3, v8);
    }
    else
    {
      uint64_t v6 = 0;
      v7->i64[0] = 0;
      v7->i64[1] = 0;
      v7[2].i64[0] = 0;
      v7[2].i64[1] = 0;
      v7[4].i64[0] = 0;
      v7[4].i64[1] = 0;
      v7[6].i64[0] = 0;
      v7[6].i64[1] = 0;
    }
    v3 += v6;
    ++v4;
    v2 += 2;
  }
  while (v2 != 16);
  uint64_t v13 = *(unsigned int *)(a1 + 80);
  if (!v13 || !*(_DWORD *)(a1 + 84)) {
    goto LABEL_39;
  }
  uint64_t v14 = 32 * *(unsigned int *)(a1 + 72);
  uint64_t v15 = 2 * *(unsigned int *)(a1 + 76);
  uint64_t v16 = &v78[v14 + v15];
  uint64_t v17 = *(void *)(a1 + 56);
  uint64_t v18 = *(void *)(a1 + 64);
  unint64_t v19 = 2 * *(unsigned int *)(a1 + 84);
  if (v19 <= 1) {
    unint64_t v20 = 1;
  }
  else {
    unint64_t v20 = 2 * *(unsigned int *)(a1 + 84);
  }
  if (v20 > 7)
  {
    if (!v20 || (v20 - 1) >> 32)
    {
      for (uint64_t i = 0; i != v13; ++i)
      {
        uint64_t v39 = 0;
        do
        {
          v16[v39] = *(unsigned char *)(v17 + v39);
          ++v39;
        }
        while (v19 > v39);
        v16 += 32;
        v17 += v18;
      }
      goto LABEL_39;
    }
    int v23 = &v78[v14 + v15];
    uint64_t v24 = v20 & 0x1FFFFFFF8;
    if (v20 < 0x20)
    {
      uint64_t v25 = 0;
      uint64_t v26 = &v78[v14 + v15];
      uint64_t v27 = *(uint64_t **)(a1 + 56);
      while (1)
      {
        unsigned int v28 = (char *)(v17 + v18 * v25);
        char v29 = &v16[32 * v25];
        if ((unint64_t)(&v23[32 * v25] - v28) > 0x1F)
        {
          v29 += v24;
          uint64_t v31 = v26;
          uint64_t v32 = v27;
          uint64_t v33 = v20 & 0x1FFFFFFF8;
          do
          {
            uint64_t v34 = *v32++;
            *v31++ = v34;
            v33 -= 8;
          }
          while (v33);
          if (v20 == v24) {
            goto LABEL_25;
          }
          v28 += v24;
          int v30 = v20 & 0xFFFFFFF8;
        }
        else
        {
          int v30 = 0;
        }
        unsigned int v35 = v30 + 1;
        do
        {
          char v36 = *v28++;
          *v29++ = v36;
          BOOL v37 = v19 > v35++;
        }
        while (v37);
LABEL_25:
        ++v25;
        uint64_t v27 = (uint64_t *)((char *)v27 + v18);
        v26 += 32;
        if (v25 == v13) {
          goto LABEL_39;
        }
      }
    }
    uint64_t v58 = 0;
    uint64_t v59 = v20 & 0x1FFFFFFE0;
    uint64_t v60 = &v78[v14 + v15];
    unsigned int v61 = &v78[v14 + 16 + v15];
    uint64_t v62 = (long long *)(v17 + 16);
    int v63 = (uint64_t *)(v17 + (v20 & 0x1FFFFFFE0));
    unsigned int v64 = &v60[v20 & 0x1FFFFFFE0];
    while (1)
    {
      char v65 = (char *)(v17 + v18 * v58);
      uint64_t v66 = &v16[32 * v58];
      if ((unint64_t)(&v23[32 * v58] - v65) >= 0x20)
      {
        unsigned int v70 = v62;
        uint64_t v71 = v61;
        uint64_t v72 = v20 & 0x1FFFFFFE0;
        do
        {
          long long v73 = *v70;
          *(v71 - 1) = *(v70 - 1);
          *uint64_t v71 = v73;
          v71 += 2;
          v70 += 2;
          v72 -= 32;
        }
        while (v72);
        if (v20 == v59) {
          goto LABEL_54;
        }
        if ((v20 & 0x18) != 0)
        {
          v66 += v24;
          unsigned int v74 = v64;
          uint64_t v75 = v63;
          unint64_t v76 = v24 - (v20 & 0x1FFFFFFE0);
          do
          {
            uint64_t v77 = *v75++;
            *v74++ = v77;
            v76 -= 8;
          }
          while (v76);
          if (v20 == v24) {
            goto LABEL_54;
          }
          v65 += v24;
          int v67 = v20 & 0xFFFFFFF8;
        }
        else
        {
          v65 += v59;
          v66 += v59;
          int v67 = v20 & 0xFFFFFFE0;
        }
      }
      else
      {
        int v67 = 0;
      }
      unsigned int v68 = v67 + 1;
      do
      {
        char v69 = *v65++;
        *v66++ = v69;
        BOOL v37 = v19 > v68++;
      }
      while (v37);
LABEL_54:
      ++v58;
      v61 += 32;
      uint64_t v62 = (long long *)((char *)v62 + v18);
      int v63 = (uint64_t *)((char *)v63 + v18);
      v64 += 4;
      if (v58 == v13) {
        goto LABEL_39;
      }
    }
  }
  for (uint64_t j = 0; j != v13; ++j)
  {
    uint64_t v22 = 0;
    do
    {
      v16[v22] = *(unsigned char *)(v17 + v22);
      ++v22;
    }
    while (v19 > v22);
    v16 += 32;
    v17 += v18;
  }
LABEL_39:
  uint64_t v40 = 0;
  uint64_t v41 = *(void *)(a1 + 40);
  uint64_t v42 = *(char **)(a1 + 48);
  int v43 = *(unsigned __int8 *)(a1 + 88);
  int v44 = *(unsigned __int8 *)(a1 + 89);
  do
  {
    uint64_t v53 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,1u>::kSubblockPositions[v40 + 1];
    uint64_t v54 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,1u>::kSubblockPositions[v40];
    LODWORD(result) = (v43 - 8 * v54) & ~((v43 - 8 * (int)v54) >> 31);
    if (result >= 8) {
      uint64_t result = 8;
    }
    else {
      uint64_t result = result;
    }
    unsigned int v56 = (v44 - 4 * v53) & ~((v44 - 4 * (int)v53) >> 31);
    if (v56 >= 4) {
      unsigned int v56 = 4;
    }
    if (result) {
      BOOL v57 = v56 == 0;
    }
    else {
      BOOL v57 = 1;
    }
    if (v57)
    {
      char v52 = 0;
    }
    else
    {
      uint64_t v45 = (int32x4_t *)&v78[128 * v53 + 16 * v54];
      float32x2x2_t v46 = (float32x2x2_t)*v45;
      int32x4_t v47 = v45[2];
      int32x4_t v48 = vzip2q_s32(*v45, v47);
      float32x2x2_t v49 = (float32x2x2_t)v45[4];
      int32x4_t v50 = v45[6];
      unsigned int v51 = (float *)v41;
      vst2_f32(v51, v46);
      v51 += 4;
      vst2_f32(v51, v49);
      *(int32x4_t *)(v41 + 32) = v48;
      *(int32x4_t *)(v41 + 48) = vzip2q_s32((int32x4_t)v49, v50);
      v41 += 64;
      char v52 = 63;
    }
    *v42++ = v52;
    v40 += 2;
  }
  while (v40 != 16);
  return result;
}

unint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE9ELj1ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v2 = 0;
  uint64_t v62 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(a1 + 40);
  uint64_t v4 = *(unsigned char **)(a1 + 48);
  do
  {
    uint64_t v7 = (int32x4_t *)&v61[128
                         * (unint64_t)AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,1u>::kSubblockPositions[v2 + 1]
                         + 16
                         * AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,1u>::kSubblockPositions[v2]];
    unsigned int v8 = *v4;
    if (v8 == 63)
    {
      int32x4_t v9 = *(int32x4_t *)v3;
      int32x4_t v10 = *(int32x4_t *)(v3 + 16);
      int32x4_t v11 = *(int32x4_t *)(v3 + 32);
      int32x4_t v12 = *(int32x4_t *)(v3 + 48);
      *uint64_t v7 = vuzp1q_s32(*(int32x4_t *)v3, v11);
      v7[2] = vuzp2q_s32(v9, v11);
      v7[4] = vuzp1q_s32(v10, v12);
      v7[6] = vuzp2q_s32(v10, v12);
      uint64_t v6 = 64;
    }
    else if (v8 == 1)
    {
      int16x8_t v5 = vld1q_dup_s16((const __int16 *)v3);
      *uint64_t v7 = (int32x4_t)v5;
      v7[2] = (int32x4_t)v5;
      v7[4] = (int32x4_t)v5;
      v7[6] = (int32x4_t)v5;
      uint64_t v6 = 2;
    }
    else if (*v4)
    {
      uint64_t v6 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v7, 32, v3, v8);
    }
    else
    {
      uint64_t v6 = 0;
      v7->i64[0] = 0;
      v7->i64[1] = 0;
      v7[2].i64[0] = 0;
      v7[2].i64[1] = 0;
      v7[4].i64[0] = 0;
      v7[4].i64[1] = 0;
      v7[6].i64[0] = 0;
      v7[6].i64[1] = 0;
    }
    v3 += v6;
    ++v4;
    v2 += 2;
  }
  while (v2 != 16);
  uint64_t v13 = *(unsigned int *)(a1 + 80);
  if (v13 && *(_DWORD *)(a1 + 84))
  {
    uint64_t v14 = 32 * *(unsigned int *)(a1 + 72);
    uint64_t v15 = 2 * *(unsigned int *)(a1 + 76);
    uint64_t v16 = &v61[v14 + v15];
    uint64_t v17 = *(void *)(a1 + 56);
    uint64_t v18 = *(void *)(a1 + 64);
    unint64_t v19 = 2 * *(unsigned int *)(a1 + 84);
    if (v19 <= 1) {
      unint64_t v20 = 1;
    }
    else {
      unint64_t v20 = 2 * *(unsigned int *)(a1 + 84);
    }
    if (v20 <= 7)
    {
      for (uint64_t i = 0; i != v13; ++i)
      {
        uint64_t v22 = 0;
        do
        {
          v16[v22] = *(unsigned char *)(v17 + v22);
          ++v22;
        }
        while (v19 > v22);
        v16 += 32;
        v17 += v18;
      }
      return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v61, 32, *(void *)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
    }
    if (v20 && !((v20 - 1) >> 32))
    {
      int v23 = &v61[v14 + v15];
      uint64_t v24 = v20 & 0x1FFFFFFF8;
      if (v20 < 0x20)
      {
        uint64_t v25 = 0;
        uint64_t v26 = &v61[v14 + v15];
        uint64_t v27 = *(uint64_t **)(a1 + 56);
        while (1)
        {
          unsigned int v28 = (char *)(v17 + v18 * v25);
          char v29 = &v16[32 * v25];
          if ((unint64_t)(&v23[32 * v25] - v28) > 0x1F)
          {
            v29 += v24;
            uint64_t v31 = v26;
            uint64_t v32 = v27;
            uint64_t v33 = v20 & 0x1FFFFFFF8;
            do
            {
              uint64_t v34 = *v32++;
              *v31++ = v34;
              v33 -= 8;
            }
            while (v33);
            if (v20 == v24) {
              goto LABEL_25;
            }
            v28 += v24;
            int v30 = v20 & 0xFFFFFFF8;
          }
          else
          {
            int v30 = 0;
          }
          unsigned int v35 = v30 + 1;
          do
          {
            char v36 = *v28++;
            *v29++ = v36;
            BOOL v37 = v19 > v35++;
          }
          while (v37);
LABEL_25:
          ++v25;
          uint64_t v27 = (uint64_t *)((char *)v27 + v18);
          v26 += 32;
          if (v25 == v13) {
            return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v61, 32, *(void *)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
          }
        }
      }
      uint64_t v41 = 0;
      uint64_t v42 = v20 & 0x1FFFFFFE0;
      int v43 = &v61[v14 + v15];
      int v44 = &v61[v14 + 16 + v15];
      uint64_t v45 = (long long *)(v17 + 16);
      float32x2x2_t v46 = (uint64_t *)(v17 + (v20 & 0x1FFFFFFE0));
      for (uint64_t j = &v43[v20 & 0x1FFFFFFE0]; ; j += 4)
      {
        int32x4_t v48 = (char *)(v17 + v18 * v41);
        float32x2x2_t v49 = &v16[32 * v41];
        if ((unint64_t)(&v23[32 * v41] - v48) >= 0x20)
        {
          uint64_t v53 = v45;
          uint64_t v54 = v44;
          uint64_t v55 = v20 & 0x1FFFFFFE0;
          do
          {
            long long v56 = *v53;
            *(v54 - 1) = *(v53 - 1);
            *uint64_t v54 = v56;
            v54 += 2;
            v53 += 2;
            v55 -= 32;
          }
          while (v55);
          if (v20 == v42) {
            goto LABEL_41;
          }
          if ((v20 & 0x18) != 0)
          {
            v49 += v24;
            BOOL v57 = j;
            uint64_t v58 = v46;
            unint64_t v59 = v24 - (v20 & 0x1FFFFFFE0);
            do
            {
              uint64_t v60 = *v58++;
              *v57++ = v60;
              v59 -= 8;
            }
            while (v59);
            if (v20 == v24) {
              goto LABEL_41;
            }
            v48 += v24;
            int v50 = v20 & 0xFFFFFFF8;
          }
          else
          {
            v48 += v42;
            v49 += v42;
            int v50 = v20 & 0xFFFFFFE0;
          }
        }
        else
        {
          int v50 = 0;
        }
        unsigned int v51 = v50 + 1;
        do
        {
          char v52 = *v48++;
          *v49++ = v52;
          BOOL v37 = v19 > v51++;
        }
        while (v37);
LABEL_41:
        ++v41;
        v44 += 32;
        uint64_t v45 = (long long *)((char *)v45 + v18);
        float32x2x2_t v46 = (uint64_t *)((char *)v46 + v18);
        if (v41 == v13) {
          return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v61, 32, *(void *)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
        }
      }
    }
    for (uint64_t k = 0; k != v13; ++k)
    {
      uint64_t v39 = 0;
      do
      {
        v16[v39] = *(unsigned char *)(v17 + v39);
        ++v39;
      }
      while (v19 > v39);
      v16 += 32;
      v17 += v18;
    }
  }
  return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v61, 32, *(void *)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE7ELj1ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v2 = 0;
  uint64_t v79 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(a1 + 40);
  uint64_t v4 = *(unsigned char **)(a1 + 48);
  do
  {
    uint64_t v7 = (int32x4_t *)&v78[128
                         * (unint64_t)AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,1u>::kSubblockPositions[v2 + 1]
                         + 16
                         * AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,1u>::kSubblockPositions[v2]];
    unsigned int v8 = *v4;
    if (v8 == 63)
    {
      int32x4_t v9 = *(int32x4_t *)v3;
      int32x4_t v10 = *(int32x4_t *)(v3 + 16);
      int32x4_t v11 = *(int32x4_t *)(v3 + 32);
      int32x4_t v12 = *(int32x4_t *)(v3 + 48);
      *uint64_t v7 = vuzp1q_s32(*(int32x4_t *)v3, v11);
      v7[2] = vuzp2q_s32(v9, v11);
      v7[4] = vuzp1q_s32(v10, v12);
      v7[6] = vuzp2q_s32(v10, v12);
      uint64_t v6 = 64;
    }
    else if (v8 == 1)
    {
      int16x8_t v5 = vld1q_dup_s16((const __int16 *)v3);
      *uint64_t v7 = (int32x4_t)v5;
      v7[2] = (int32x4_t)v5;
      v7[4] = (int32x4_t)v5;
      v7[6] = (int32x4_t)v5;
      uint64_t v6 = 2;
    }
    else if (*v4)
    {
      uint64_t v6 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v7, 32, v3, v8);
    }
    else
    {
      uint64_t v6 = 0;
      v7->i64[0] = 0;
      v7->i64[1] = 0;
      v7[2].i64[0] = 0;
      v7[2].i64[1] = 0;
      v7[4].i64[0] = 0;
      v7[4].i64[1] = 0;
      v7[6].i64[0] = 0;
      v7[6].i64[1] = 0;
    }
    v3 += v6;
    ++v4;
    v2 += 2;
  }
  while (v2 != 16);
  uint64_t v13 = *(unsigned int *)(a1 + 80);
  if (!v13 || !*(_DWORD *)(a1 + 84)) {
    goto LABEL_39;
  }
  uint64_t v14 = 32 * *(unsigned int *)(a1 + 72);
  uint64_t v15 = 2 * *(unsigned int *)(a1 + 76);
  uint64_t v16 = &v78[v14 + v15];
  uint64_t v17 = *(void *)(a1 + 56);
  uint64_t v18 = *(void *)(a1 + 64);
  unint64_t v19 = 2 * *(unsigned int *)(a1 + 84);
  if (v19 <= 1) {
    unint64_t v20 = 1;
  }
  else {
    unint64_t v20 = 2 * *(unsigned int *)(a1 + 84);
  }
  if (v20 > 7)
  {
    if (!v20 || (v20 - 1) >> 32)
    {
      for (uint64_t i = 0; i != v13; ++i)
      {
        uint64_t v39 = 0;
        do
        {
          v16[v39] = *(unsigned char *)(v17 + v39);
          ++v39;
        }
        while (v19 > v39);
        v16 += 32;
        v17 += v18;
      }
      goto LABEL_39;
    }
    int v23 = &v78[v14 + v15];
    uint64_t v24 = v20 & 0x1FFFFFFF8;
    if (v20 < 0x20)
    {
      uint64_t v25 = 0;
      uint64_t v26 = &v78[v14 + v15];
      uint64_t v27 = *(uint64_t **)(a1 + 56);
      while (1)
      {
        unsigned int v28 = (char *)(v17 + v18 * v25);
        char v29 = &v16[32 * v25];
        if ((unint64_t)(&v23[32 * v25] - v28) > 0x1F)
        {
          v29 += v24;
          uint64_t v31 = v26;
          uint64_t v32 = v27;
          uint64_t v33 = v20 & 0x1FFFFFFF8;
          do
          {
            uint64_t v34 = *v32++;
            *v31++ = v34;
            v33 -= 8;
          }
          while (v33);
          if (v20 == v24) {
            goto LABEL_25;
          }
          v28 += v24;
          int v30 = v20 & 0xFFFFFFF8;
        }
        else
        {
          int v30 = 0;
        }
        unsigned int v35 = v30 + 1;
        do
        {
          char v36 = *v28++;
          *v29++ = v36;
          BOOL v37 = v19 > v35++;
        }
        while (v37);
LABEL_25:
        ++v25;
        uint64_t v27 = (uint64_t *)((char *)v27 + v18);
        v26 += 32;
        if (v25 == v13) {
          goto LABEL_39;
        }
      }
    }
    uint64_t v58 = 0;
    uint64_t v59 = v20 & 0x1FFFFFFE0;
    uint64_t v60 = &v78[v14 + v15];
    unsigned int v61 = &v78[v14 + 16 + v15];
    uint64_t v62 = (long long *)(v17 + 16);
    int v63 = (uint64_t *)(v17 + (v20 & 0x1FFFFFFE0));
    unsigned int v64 = &v60[v20 & 0x1FFFFFFE0];
    while (1)
    {
      char v65 = (char *)(v17 + v18 * v58);
      uint64_t v66 = &v16[32 * v58];
      if ((unint64_t)(&v23[32 * v58] - v65) >= 0x20)
      {
        unsigned int v70 = v62;
        uint64_t v71 = v61;
        uint64_t v72 = v20 & 0x1FFFFFFE0;
        do
        {
          long long v73 = *v70;
          *(v71 - 1) = *(v70 - 1);
          *uint64_t v71 = v73;
          v71 += 2;
          v70 += 2;
          v72 -= 32;
        }
        while (v72);
        if (v20 == v59) {
          goto LABEL_54;
        }
        if ((v20 & 0x18) != 0)
        {
          v66 += v24;
          unsigned int v74 = v64;
          uint64_t v75 = v63;
          unint64_t v76 = v24 - (v20 & 0x1FFFFFFE0);
          do
          {
            uint64_t v77 = *v75++;
            *v74++ = v77;
            v76 -= 8;
          }
          while (v76);
          if (v20 == v24) {
            goto LABEL_54;
          }
          v65 += v24;
          int v67 = v20 & 0xFFFFFFF8;
        }
        else
        {
          v65 += v59;
          v66 += v59;
          int v67 = v20 & 0xFFFFFFE0;
        }
      }
      else
      {
        int v67 = 0;
      }
      unsigned int v68 = v67 + 1;
      do
      {
        char v69 = *v65++;
        *v66++ = v69;
        BOOL v37 = v19 > v68++;
      }
      while (v37);
LABEL_54:
      ++v58;
      v61 += 32;
      uint64_t v62 = (long long *)((char *)v62 + v18);
      int v63 = (uint64_t *)((char *)v63 + v18);
      v64 += 4;
      if (v58 == v13) {
        goto LABEL_39;
      }
    }
  }
  for (uint64_t j = 0; j != v13; ++j)
  {
    uint64_t v22 = 0;
    do
    {
      v16[v22] = *(unsigned char *)(v17 + v22);
      ++v22;
    }
    while (v19 > v22);
    v16 += 32;
    v17 += v18;
  }
LABEL_39:
  uint64_t v40 = 0;
  uint64_t v41 = *(void *)(a1 + 40);
  uint64_t v42 = *(char **)(a1 + 48);
  int v43 = *(unsigned __int8 *)(a1 + 88);
  int v44 = *(unsigned __int8 *)(a1 + 89);
  do
  {
    uint64_t v53 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,1u>::kSubblockPositions[v40 + 1];
    uint64_t v54 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,1u>::kSubblockPositions[v40];
    LODWORD(result) = (v43 - 8 * v54) & ~((v43 - 8 * (int)v54) >> 31);
    if (result >= 8) {
      uint64_t result = 8;
    }
    else {
      uint64_t result = result;
    }
    unsigned int v56 = (v44 - 4 * v53) & ~((v44 - 4 * (int)v53) >> 31);
    if (v56 >= 4) {
      unsigned int v56 = 4;
    }
    if (result) {
      BOOL v57 = v56 == 0;
    }
    else {
      BOOL v57 = 1;
    }
    if (v57)
    {
      char v52 = 0;
    }
    else
    {
      uint64_t v45 = (int32x4_t *)&v78[128 * v53 + 16 * v54];
      float32x2x2_t v46 = (float32x2x2_t)*v45;
      int32x4_t v47 = v45[2];
      int32x4_t v48 = vzip2q_s32(*v45, v47);
      float32x2x2_t v49 = (float32x2x2_t)v45[4];
      int32x4_t v50 = v45[6];
      unsigned int v51 = (float *)v41;
      vst2_f32(v51, v46);
      v51 += 4;
      vst2_f32(v51, v49);
      *(int32x4_t *)(v41 + 32) = v48;
      *(int32x4_t *)(v41 + 48) = vzip2q_s32((int32x4_t)v49, v50);
      v41 += 64;
      char v52 = 63;
    }
    *v42++ = v52;
    v40 += 2;
  }
  while (v40 != 16);
  return result;
}

unint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE7ELj1ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v2 = 0;
  uint64_t v62 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(a1 + 40);
  uint64_t v4 = *(unsigned char **)(a1 + 48);
  do
  {
    uint64_t v7 = (int32x4_t *)&v61[128
                         * (unint64_t)AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,1u>::kSubblockPositions[v2 + 1]
                         + 16
                         * AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,1u>::kSubblockPositions[v2]];
    unsigned int v8 = *v4;
    if (v8 == 63)
    {
      int32x4_t v9 = *(int32x4_t *)v3;
      int32x4_t v10 = *(int32x4_t *)(v3 + 16);
      int32x4_t v11 = *(int32x4_t *)(v3 + 32);
      int32x4_t v12 = *(int32x4_t *)(v3 + 48);
      *uint64_t v7 = vuzp1q_s32(*(int32x4_t *)v3, v11);
      v7[2] = vuzp2q_s32(v9, v11);
      v7[4] = vuzp1q_s32(v10, v12);
      v7[6] = vuzp2q_s32(v10, v12);
      uint64_t v6 = 64;
    }
    else if (v8 == 1)
    {
      int16x8_t v5 = vld1q_dup_s16((const __int16 *)v3);
      *uint64_t v7 = (int32x4_t)v5;
      v7[2] = (int32x4_t)v5;
      v7[4] = (int32x4_t)v5;
      v7[6] = (int32x4_t)v5;
      uint64_t v6 = 2;
    }
    else if (*v4)
    {
      uint64_t v6 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v7, 32, v3, v8);
    }
    else
    {
      uint64_t v6 = 0;
      v7->i64[0] = 0;
      v7->i64[1] = 0;
      v7[2].i64[0] = 0;
      v7[2].i64[1] = 0;
      v7[4].i64[0] = 0;
      v7[4].i64[1] = 0;
      v7[6].i64[0] = 0;
      v7[6].i64[1] = 0;
    }
    v3 += v6;
    ++v4;
    v2 += 2;
  }
  while (v2 != 16);
  uint64_t v13 = *(unsigned int *)(a1 + 80);
  if (v13 && *(_DWORD *)(a1 + 84))
  {
    uint64_t v14 = 32 * *(unsigned int *)(a1 + 72);
    uint64_t v15 = 2 * *(unsigned int *)(a1 + 76);
    uint64_t v16 = &v61[v14 + v15];
    uint64_t v17 = *(void *)(a1 + 56);
    uint64_t v18 = *(void *)(a1 + 64);
    unint64_t v19 = 2 * *(unsigned int *)(a1 + 84);
    if (v19 <= 1) {
      unint64_t v20 = 1;
    }
    else {
      unint64_t v20 = 2 * *(unsigned int *)(a1 + 84);
    }
    if (v20 <= 7)
    {
      for (uint64_t i = 0; i != v13; ++i)
      {
        uint64_t v22 = 0;
        do
        {
          v16[v22] = *(unsigned char *)(v17 + v22);
          ++v22;
        }
        while (v19 > v22);
        v16 += 32;
        v17 += v18;
      }
      return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v61, 32, *(void *)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
    }
    if (v20 && !((v20 - 1) >> 32))
    {
      int v23 = &v61[v14 + v15];
      uint64_t v24 = v20 & 0x1FFFFFFF8;
      if (v20 < 0x20)
      {
        uint64_t v25 = 0;
        uint64_t v26 = &v61[v14 + v15];
        uint64_t v27 = *(uint64_t **)(a1 + 56);
        while (1)
        {
          unsigned int v28 = (char *)(v17 + v18 * v25);
          char v29 = &v16[32 * v25];
          if ((unint64_t)(&v23[32 * v25] - v28) > 0x1F)
          {
            v29 += v24;
            uint64_t v31 = v26;
            uint64_t v32 = v27;
            uint64_t v33 = v20 & 0x1FFFFFFF8;
            do
            {
              uint64_t v34 = *v32++;
              *v31++ = v34;
              v33 -= 8;
            }
            while (v33);
            if (v20 == v24) {
              goto LABEL_25;
            }
            v28 += v24;
            int v30 = v20 & 0xFFFFFFF8;
          }
          else
          {
            int v30 = 0;
          }
          unsigned int v35 = v30 + 1;
          do
          {
            char v36 = *v28++;
            *v29++ = v36;
            BOOL v37 = v19 > v35++;
          }
          while (v37);
LABEL_25:
          ++v25;
          uint64_t v27 = (uint64_t *)((char *)v27 + v18);
          v26 += 32;
          if (v25 == v13) {
            return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v61, 32, *(void *)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
          }
        }
      }
      uint64_t v41 = 0;
      uint64_t v42 = v20 & 0x1FFFFFFE0;
      int v43 = &v61[v14 + v15];
      int v44 = &v61[v14 + 16 + v15];
      uint64_t v45 = (long long *)(v17 + 16);
      float32x2x2_t v46 = (uint64_t *)(v17 + (v20 & 0x1FFFFFFE0));
      for (uint64_t j = &v43[v20 & 0x1FFFFFFE0]; ; j += 4)
      {
        int32x4_t v48 = (char *)(v17 + v18 * v41);
        float32x2x2_t v49 = &v16[32 * v41];
        if ((unint64_t)(&v23[32 * v41] - v48) >= 0x20)
        {
          uint64_t v53 = v45;
          uint64_t v54 = v44;
          uint64_t v55 = v20 & 0x1FFFFFFE0;
          do
          {
            long long v56 = *v53;
            *(v54 - 1) = *(v53 - 1);
            *uint64_t v54 = v56;
            v54 += 2;
            v53 += 2;
            v55 -= 32;
          }
          while (v55);
          if (v20 == v42) {
            goto LABEL_41;
          }
          if ((v20 & 0x18) != 0)
          {
            v49 += v24;
            BOOL v57 = j;
            uint64_t v58 = v46;
            unint64_t v59 = v24 - (v20 & 0x1FFFFFFE0);
            do
            {
              uint64_t v60 = *v58++;
              *v57++ = v60;
              v59 -= 8;
            }
            while (v59);
            if (v20 == v24) {
              goto LABEL_41;
            }
            v48 += v24;
            int v50 = v20 & 0xFFFFFFF8;
          }
          else
          {
            v48 += v42;
            v49 += v42;
            int v50 = v20 & 0xFFFFFFE0;
          }
        }
        else
        {
          int v50 = 0;
        }
        unsigned int v51 = v50 + 1;
        do
        {
          char v52 = *v48++;
          *v49++ = v52;
          BOOL v37 = v19 > v51++;
        }
        while (v37);
LABEL_41:
        ++v41;
        v44 += 32;
        uint64_t v45 = (long long *)((char *)v45 + v18);
        float32x2x2_t v46 = (uint64_t *)((char *)v46 + v18);
        if (v41 == v13) {
          return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v61, 32, *(void *)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
        }
      }
    }
    for (uint64_t k = 0; k != v13; ++k)
    {
      uint64_t v39 = 0;
      do
      {
        v16[v39] = *(unsigned char *)(v17 + v39);
        ++v39;
      }
      while (v19 > v39);
      v16 += 32;
      v17 += v18;
    }
  }
  return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v61, 32, *(void *)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE7ELj1ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v2 = 0;
  uint64_t v79 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(a1 + 40);
  uint64_t v4 = *(unsigned char **)(a1 + 48);
  do
  {
    uint64_t v7 = (int32x4_t *)&v78[128
                         * (unint64_t)AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,1u>::kSubblockPositions[v2 + 1]
                         + 16
                         * AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,1u>::kSubblockPositions[v2]];
    unsigned int v8 = *v4;
    if (v8 == 63)
    {
      int32x4_t v9 = *(int32x4_t *)v3;
      int32x4_t v10 = *(int32x4_t *)(v3 + 16);
      int32x4_t v11 = *(int32x4_t *)(v3 + 32);
      int32x4_t v12 = *(int32x4_t *)(v3 + 48);
      *uint64_t v7 = vuzp1q_s32(*(int32x4_t *)v3, v11);
      v7[2] = vuzp2q_s32(v9, v11);
      v7[4] = vuzp1q_s32(v10, v12);
      v7[6] = vuzp2q_s32(v10, v12);
      uint64_t v6 = 64;
    }
    else if (v8 == 1)
    {
      int16x8_t v5 = vld1q_dup_s16((const __int16 *)v3);
      *uint64_t v7 = (int32x4_t)v5;
      v7[2] = (int32x4_t)v5;
      v7[4] = (int32x4_t)v5;
      v7[6] = (int32x4_t)v5;
      uint64_t v6 = 2;
    }
    else if (*v4)
    {
      uint64_t v6 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v7, 32, v3, v8);
    }
    else
    {
      uint64_t v6 = 0;
      v7->i64[0] = 0;
      v7->i64[1] = 0;
      v7[2].i64[0] = 0;
      v7[2].i64[1] = 0;
      v7[4].i64[0] = 0;
      v7[4].i64[1] = 0;
      v7[6].i64[0] = 0;
      v7[6].i64[1] = 0;
    }
    v3 += v6;
    ++v4;
    v2 += 2;
  }
  while (v2 != 16);
  uint64_t v13 = *(unsigned int *)(a1 + 80);
  if (!v13 || !*(_DWORD *)(a1 + 84)) {
    goto LABEL_39;
  }
  uint64_t v14 = 32 * *(unsigned int *)(a1 + 72);
  uint64_t v15 = 2 * *(unsigned int *)(a1 + 76);
  uint64_t v16 = &v78[v14 + v15];
  uint64_t v17 = *(void *)(a1 + 56);
  uint64_t v18 = *(void *)(a1 + 64);
  unint64_t v19 = 2 * *(unsigned int *)(a1 + 84);
  if (v19 <= 1) {
    unint64_t v20 = 1;
  }
  else {
    unint64_t v20 = 2 * *(unsigned int *)(a1 + 84);
  }
  if (v20 > 7)
  {
    if (!v20 || (v20 - 1) >> 32)
    {
      for (uint64_t i = 0; i != v13; ++i)
      {
        uint64_t v39 = 0;
        do
        {
          v16[v39] = *(unsigned char *)(v17 + v39);
          ++v39;
        }
        while (v19 > v39);
        v16 += 32;
        v17 += v18;
      }
      goto LABEL_39;
    }
    int v23 = &v78[v14 + v15];
    uint64_t v24 = v20 & 0x1FFFFFFF8;
    if (v20 < 0x20)
    {
      uint64_t v25 = 0;
      uint64_t v26 = &v78[v14 + v15];
      uint64_t v27 = *(uint64_t **)(a1 + 56);
      while (1)
      {
        unsigned int v28 = (char *)(v17 + v18 * v25);
        char v29 = &v16[32 * v25];
        if ((unint64_t)(&v23[32 * v25] - v28) > 0x1F)
        {
          v29 += v24;
          uint64_t v31 = v26;
          uint64_t v32 = v27;
          uint64_t v33 = v20 & 0x1FFFFFFF8;
          do
          {
            uint64_t v34 = *v32++;
            *v31++ = v34;
            v33 -= 8;
          }
          while (v33);
          if (v20 == v24) {
            goto LABEL_25;
          }
          v28 += v24;
          int v30 = v20 & 0xFFFFFFF8;
        }
        else
        {
          int v30 = 0;
        }
        unsigned int v35 = v30 + 1;
        do
        {
          char v36 = *v28++;
          *v29++ = v36;
          BOOL v37 = v19 > v35++;
        }
        while (v37);
LABEL_25:
        ++v25;
        uint64_t v27 = (uint64_t *)((char *)v27 + v18);
        v26 += 32;
        if (v25 == v13) {
          goto LABEL_39;
        }
      }
    }
    uint64_t v58 = 0;
    uint64_t v59 = v20 & 0x1FFFFFFE0;
    uint64_t v60 = &v78[v14 + v15];
    unsigned int v61 = &v78[v14 + 16 + v15];
    uint64_t v62 = (long long *)(v17 + 16);
    int v63 = (uint64_t *)(v17 + (v20 & 0x1FFFFFFE0));
    unsigned int v64 = &v60[v20 & 0x1FFFFFFE0];
    while (1)
    {
      char v65 = (char *)(v17 + v18 * v58);
      uint64_t v66 = &v16[32 * v58];
      if ((unint64_t)(&v23[32 * v58] - v65) >= 0x20)
      {
        unsigned int v70 = v62;
        uint64_t v71 = v61;
        uint64_t v72 = v20 & 0x1FFFFFFE0;
        do
        {
          long long v73 = *v70;
          *(v71 - 1) = *(v70 - 1);
          *uint64_t v71 = v73;
          v71 += 2;
          v70 += 2;
          v72 -= 32;
        }
        while (v72);
        if (v20 == v59) {
          goto LABEL_54;
        }
        if ((v20 & 0x18) != 0)
        {
          v66 += v24;
          unsigned int v74 = v64;
          uint64_t v75 = v63;
          unint64_t v76 = v24 - (v20 & 0x1FFFFFFE0);
          do
          {
            uint64_t v77 = *v75++;
            *v74++ = v77;
            v76 -= 8;
          }
          while (v76);
          if (v20 == v24) {
            goto LABEL_54;
          }
          v65 += v24;
          int v67 = v20 & 0xFFFFFFF8;
        }
        else
        {
          v65 += v59;
          v66 += v59;
          int v67 = v20 & 0xFFFFFFE0;
        }
      }
      else
      {
        int v67 = 0;
      }
      unsigned int v68 = v67 + 1;
      do
      {
        char v69 = *v65++;
        *v66++ = v69;
        BOOL v37 = v19 > v68++;
      }
      while (v37);
LABEL_54:
      ++v58;
      v61 += 32;
      uint64_t v62 = (long long *)((char *)v62 + v18);
      int v63 = (uint64_t *)((char *)v63 + v18);
      v64 += 4;
      if (v58 == v13) {
        goto LABEL_39;
      }
    }
  }
  for (uint64_t j = 0; j != v13; ++j)
  {
    uint64_t v22 = 0;
    do
    {
      v16[v22] = *(unsigned char *)(v17 + v22);
      ++v22;
    }
    while (v19 > v22);
    v16 += 32;
    v17 += v18;
  }
LABEL_39:
  uint64_t v40 = 0;
  uint64_t v41 = *(void *)(a1 + 40);
  uint64_t v42 = *(char **)(a1 + 48);
  int v43 = *(unsigned __int8 *)(a1 + 88);
  int v44 = *(unsigned __int8 *)(a1 + 89);
  do
  {
    uint64_t v53 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,1u>::kSubblockPositions[v40 + 1];
    uint64_t v54 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,1u>::kSubblockPositions[v40];
    LODWORD(result) = (v43 - 8 * v54) & ~((v43 - 8 * (int)v54) >> 31);
    if (result >= 8) {
      uint64_t result = 8;
    }
    else {
      uint64_t result = result;
    }
    unsigned int v56 = (v44 - 4 * v53) & ~((v44 - 4 * (int)v53) >> 31);
    if (v56 >= 4) {
      unsigned int v56 = 4;
    }
    if (result) {
      BOOL v57 = v56 == 0;
    }
    else {
      BOOL v57 = 1;
    }
    if (v57)
    {
      char v52 = 0;
    }
    else
    {
      uint64_t v45 = (int32x4_t *)&v78[128 * v53 + 16 * v54];
      float32x2x2_t v46 = (float32x2x2_t)*v45;
      int32x4_t v47 = v45[2];
      int32x4_t v48 = vzip2q_s32(*v45, v47);
      float32x2x2_t v49 = (float32x2x2_t)v45[4];
      int32x4_t v50 = v45[6];
      unsigned int v51 = (float *)v41;
      vst2_f32(v51, v46);
      v51 += 4;
      vst2_f32(v51, v49);
      *(int32x4_t *)(v41 + 32) = v48;
      *(int32x4_t *)(v41 + 48) = vzip2q_s32((int32x4_t)v49, v50);
      v41 += 64;
      char v52 = 63;
    }
    *v42++ = v52;
    v40 += 2;
  }
  while (v40 != 16);
  return result;
}

unint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE7ELj1ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v2 = 0;
  uint64_t v62 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(a1 + 40);
  uint64_t v4 = *(unsigned char **)(a1 + 48);
  do
  {
    uint64_t v7 = (int32x4_t *)&v61[128
                         * (unint64_t)AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,1u>::kSubblockPositions[v2 + 1]
                         + 16
                         * AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,1u>::kSubblockPositions[v2]];
    unsigned int v8 = *v4;
    if (v8 == 63)
    {
      int32x4_t v9 = *(int32x4_t *)v3;
      int32x4_t v10 = *(int32x4_t *)(v3 + 16);
      int32x4_t v11 = *(int32x4_t *)(v3 + 32);
      int32x4_t v12 = *(int32x4_t *)(v3 + 48);
      *uint64_t v7 = vuzp1q_s32(*(int32x4_t *)v3, v11);
      v7[2] = vuzp2q_s32(v9, v11);
      v7[4] = vuzp1q_s32(v10, v12);
      v7[6] = vuzp2q_s32(v10, v12);
      uint64_t v6 = 64;
    }
    else if (v8 == 1)
    {
      int16x8_t v5 = vld1q_dup_s16((const __int16 *)v3);
      *uint64_t v7 = (int32x4_t)v5;
      v7[2] = (int32x4_t)v5;
      v7[4] = (int32x4_t)v5;
      v7[6] = (int32x4_t)v5;
      uint64_t v6 = 2;
    }
    else if (*v4)
    {
      uint64_t v6 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v7, 32, v3, v8);
    }
    else
    {
      uint64_t v6 = 0;
      v7->i64[0] = 0;
      v7->i64[1] = 0;
      v7[2].i64[0] = 0;
      v7[2].i64[1] = 0;
      v7[4].i64[0] = 0;
      v7[4].i64[1] = 0;
      v7[6].i64[0] = 0;
      v7[6].i64[1] = 0;
    }
    v3 += v6;
    ++v4;
    v2 += 2;
  }
  while (v2 != 16);
  uint64_t v13 = *(unsigned int *)(a1 + 80);
  if (v13 && *(_DWORD *)(a1 + 84))
  {
    uint64_t v14 = 32 * *(unsigned int *)(a1 + 72);
    uint64_t v15 = 2 * *(unsigned int *)(a1 + 76);
    uint64_t v16 = &v61[v14 + v15];
    uint64_t v17 = *(void *)(a1 + 56);
    uint64_t v18 = *(void *)(a1 + 64);
    unint64_t v19 = 2 * *(unsigned int *)(a1 + 84);
    if (v19 <= 1) {
      unint64_t v20 = 1;
    }
    else {
      unint64_t v20 = 2 * *(unsigned int *)(a1 + 84);
    }
    if (v20 <= 7)
    {
      for (uint64_t i = 0; i != v13; ++i)
      {
        uint64_t v22 = 0;
        do
        {
          v16[v22] = *(unsigned char *)(v17 + v22);
          ++v22;
        }
        while (v19 > v22);
        v16 += 32;
        v17 += v18;
      }
      return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v61, 32, *(void *)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
    }
    if (v20 && !((v20 - 1) >> 32))
    {
      int v23 = &v61[v14 + v15];
      uint64_t v24 = v20 & 0x1FFFFFFF8;
      if (v20 < 0x20)
      {
        uint64_t v25 = 0;
        uint64_t v26 = &v61[v14 + v15];
        uint64_t v27 = *(uint64_t **)(a1 + 56);
        while (1)
        {
          unsigned int v28 = (char *)(v17 + v18 * v25);
          char v29 = &v16[32 * v25];
          if ((unint64_t)(&v23[32 * v25] - v28) > 0x1F)
          {
            v29 += v24;
            uint64_t v31 = v26;
            uint64_t v32 = v27;
            uint64_t v33 = v20 & 0x1FFFFFFF8;
            do
            {
              uint64_t v34 = *v32++;
              *v31++ = v34;
              v33 -= 8;
            }
            while (v33);
            if (v20 == v24) {
              goto LABEL_25;
            }
            v28 += v24;
            int v30 = v20 & 0xFFFFFFF8;
          }
          else
          {
            int v30 = 0;
          }
          unsigned int v35 = v30 + 1;
          do
          {
            char v36 = *v28++;
            *v29++ = v36;
            BOOL v37 = v19 > v35++;
          }
          while (v37);
LABEL_25:
          ++v25;
          uint64_t v27 = (uint64_t *)((char *)v27 + v18);
          v26 += 32;
          if (v25 == v13) {
            return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v61, 32, *(void *)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
          }
        }
      }
      uint64_t v41 = 0;
      uint64_t v42 = v20 & 0x1FFFFFFE0;
      int v43 = &v61[v14 + v15];
      int v44 = &v61[v14 + 16 + v15];
      uint64_t v45 = (long long *)(v17 + 16);
      float32x2x2_t v46 = (uint64_t *)(v17 + (v20 & 0x1FFFFFFE0));
      for (uint64_t j = &v43[v20 & 0x1FFFFFFE0]; ; j += 4)
      {
        int32x4_t v48 = (char *)(v17 + v18 * v41);
        float32x2x2_t v49 = &v16[32 * v41];
        if ((unint64_t)(&v23[32 * v41] - v48) >= 0x20)
        {
          uint64_t v53 = v45;
          uint64_t v54 = v44;
          uint64_t v55 = v20 & 0x1FFFFFFE0;
          do
          {
            long long v56 = *v53;
            *(v54 - 1) = *(v53 - 1);
            *uint64_t v54 = v56;
            v54 += 2;
            v53 += 2;
            v55 -= 32;
          }
          while (v55);
          if (v20 == v42) {
            goto LABEL_41;
          }
          if ((v20 & 0x18) != 0)
          {
            v49 += v24;
            BOOL v57 = j;
            uint64_t v58 = v46;
            unint64_t v59 = v24 - (v20 & 0x1FFFFFFE0);
            do
            {
              uint64_t v60 = *v58++;
              *v57++ = v60;
              v59 -= 8;
            }
            while (v59);
            if (v20 == v24) {
              goto LABEL_41;
            }
            v48 += v24;
            int v50 = v20 & 0xFFFFFFF8;
          }
          else
          {
            v48 += v42;
            v49 += v42;
            int v50 = v20 & 0xFFFFFFE0;
          }
        }
        else
        {
          int v50 = 0;
        }
        unsigned int v51 = v50 + 1;
        do
        {
          char v52 = *v48++;
          *v49++ = v52;
          BOOL v37 = v19 > v51++;
        }
        while (v37);
LABEL_41:
        ++v41;
        v44 += 32;
        uint64_t v45 = (long long *)((char *)v45 + v18);
        float32x2x2_t v46 = (uint64_t *)((char *)v46 + v18);
        if (v41 == v13) {
          return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v61, 32, *(void *)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
        }
      }
    }
    for (uint64_t k = 0; k != v13; ++k)
    {
      uint64_t v39 = 0;
      do
      {
        v16[v39] = *(unsigned char *)(v17 + v39);
        ++v39;
      }
      while (v19 > v39);
      v16 += 32;
      v17 += v18;
    }
  }
  return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v61, 32, *(void *)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE8ELj1ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v2 = 0;
  uint64_t v79 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(a1 + 40);
  uint64_t v4 = *(unsigned char **)(a1 + 48);
  do
  {
    uint64_t v7 = (int32x4_t *)&v78[128
                         * (unint64_t)AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,1u>::kSubblockPositions[v2 + 1]
                         + 16
                         * AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,1u>::kSubblockPositions[v2]];
    unsigned int v8 = *v4;
    if (v8 == 63)
    {
      int32x4_t v9 = *(int32x4_t *)v3;
      int32x4_t v10 = *(int32x4_t *)(v3 + 16);
      int32x4_t v11 = *(int32x4_t *)(v3 + 32);
      int32x4_t v12 = *(int32x4_t *)(v3 + 48);
      *uint64_t v7 = vuzp1q_s32(*(int32x4_t *)v3, v11);
      v7[2] = vuzp2q_s32(v9, v11);
      v7[4] = vuzp1q_s32(v10, v12);
      v7[6] = vuzp2q_s32(v10, v12);
      uint64_t v6 = 64;
    }
    else if (v8 == 1)
    {
      int16x8_t v5 = vld1q_dup_s16((const __int16 *)v3);
      *uint64_t v7 = (int32x4_t)v5;
      v7[2] = (int32x4_t)v5;
      v7[4] = (int32x4_t)v5;
      v7[6] = (int32x4_t)v5;
      uint64_t v6 = 2;
    }
    else if (*v4)
    {
      uint64_t v6 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v7, 32, v3, v8);
    }
    else
    {
      uint64_t v6 = 0;
      v7->i64[0] = 0;
      v7->i64[1] = 0;
      v7[2].i64[0] = 0;
      v7[2].i64[1] = 0;
      v7[4].i64[0] = 0;
      v7[4].i64[1] = 0;
      v7[6].i64[0] = 0;
      v7[6].i64[1] = 0;
    }
    v3 += v6;
    ++v4;
    v2 += 2;
  }
  while (v2 != 16);
  uint64_t v13 = *(unsigned int *)(a1 + 80);
  if (!v13 || !*(_DWORD *)(a1 + 84)) {
    goto LABEL_39;
  }
  uint64_t v14 = 32 * *(unsigned int *)(a1 + 72);
  uint64_t v15 = 2 * *(unsigned int *)(a1 + 76);
  uint64_t v16 = &v78[v14 + v15];
  uint64_t v17 = *(void *)(a1 + 56);
  uint64_t v18 = *(void *)(a1 + 64);
  unint64_t v19 = 2 * *(unsigned int *)(a1 + 84);
  if (v19 <= 1) {
    unint64_t v20 = 1;
  }
  else {
    unint64_t v20 = 2 * *(unsigned int *)(a1 + 84);
  }
  if (v20 > 7)
  {
    if (!v20 || (v20 - 1) >> 32)
    {
      for (uint64_t i = 0; i != v13; ++i)
      {
        uint64_t v39 = 0;
        do
        {
          v16[v39] = *(unsigned char *)(v17 + v39);
          ++v39;
        }
        while (v19 > v39);
        v16 += 32;
        v17 += v18;
      }
      goto LABEL_39;
    }
    int v23 = &v78[v14 + v15];
    uint64_t v24 = v20 & 0x1FFFFFFF8;
    if (v20 < 0x20)
    {
      uint64_t v25 = 0;
      uint64_t v26 = &v78[v14 + v15];
      uint64_t v27 = *(uint64_t **)(a1 + 56);
      while (1)
      {
        unsigned int v28 = (char *)(v17 + v18 * v25);
        char v29 = &v16[32 * v25];
        if ((unint64_t)(&v23[32 * v25] - v28) > 0x1F)
        {
          v29 += v24;
          uint64_t v31 = v26;
          uint64_t v32 = v27;
          uint64_t v33 = v20 & 0x1FFFFFFF8;
          do
          {
            uint64_t v34 = *v32++;
            *v31++ = v34;
            v33 -= 8;
          }
          while (v33);
          if (v20 == v24) {
            goto LABEL_25;
          }
          v28 += v24;
          int v30 = v20 & 0xFFFFFFF8;
        }
        else
        {
          int v30 = 0;
        }
        unsigned int v35 = v30 + 1;
        do
        {
          char v36 = *v28++;
          *v29++ = v36;
          BOOL v37 = v19 > v35++;
        }
        while (v37);
LABEL_25:
        ++v25;
        uint64_t v27 = (uint64_t *)((char *)v27 + v18);
        v26 += 32;
        if (v25 == v13) {
          goto LABEL_39;
        }
      }
    }
    uint64_t v58 = 0;
    uint64_t v59 = v20 & 0x1FFFFFFE0;
    uint64_t v60 = &v78[v14 + v15];
    unsigned int v61 = &v78[v14 + 16 + v15];
    uint64_t v62 = (long long *)(v17 + 16);
    int v63 = (uint64_t *)(v17 + (v20 & 0x1FFFFFFE0));
    unsigned int v64 = &v60[v20 & 0x1FFFFFFE0];
    while (1)
    {
      char v65 = (char *)(v17 + v18 * v58);
      uint64_t v66 = &v16[32 * v58];
      if ((unint64_t)(&v23[32 * v58] - v65) >= 0x20)
      {
        unsigned int v70 = v62;
        uint64_t v71 = v61;
        uint64_t v72 = v20 & 0x1FFFFFFE0;
        do
        {
          long long v73 = *v70;
          *(v71 - 1) = *(v70 - 1);
          *uint64_t v71 = v73;
          v71 += 2;
          v70 += 2;
          v72 -= 32;
        }
        while (v72);
        if (v20 == v59) {
          goto LABEL_54;
        }
        if ((v20 & 0x18) != 0)
        {
          v66 += v24;
          unsigned int v74 = v64;
          uint64_t v75 = v63;
          unint64_t v76 = v24 - (v20 & 0x1FFFFFFE0);
          do
          {
            uint64_t v77 = *v75++;
            *v74++ = v77;
            v76 -= 8;
          }
          while (v76);
          if (v20 == v24) {
            goto LABEL_54;
          }
          v65 += v24;
          int v67 = v20 & 0xFFFFFFF8;
        }
        else
        {
          v65 += v59;
          v66 += v59;
          int v67 = v20 & 0xFFFFFFE0;
        }
      }
      else
      {
        int v67 = 0;
      }
      unsigned int v68 = v67 + 1;
      do
      {
        char v69 = *v65++;
        *v66++ = v69;
        BOOL v37 = v19 > v68++;
      }
      while (v37);
LABEL_54:
      ++v58;
      v61 += 32;
      uint64_t v62 = (long long *)((char *)v62 + v18);
      int v63 = (uint64_t *)((char *)v63 + v18);
      v64 += 4;
      if (v58 == v13) {
        goto LABEL_39;
      }
    }
  }
  for (uint64_t j = 0; j != v13; ++j)
  {
    uint64_t v22 = 0;
    do
    {
      v16[v22] = *(unsigned char *)(v17 + v22);
      ++v22;
    }
    while (v19 > v22);
    v16 += 32;
    v17 += v18;
  }
LABEL_39:
  uint64_t v40 = 0;
  uint64_t v41 = *(void *)(a1 + 40);
  uint64_t v42 = *(char **)(a1 + 48);
  int v43 = *(unsigned __int8 *)(a1 + 88);
  int v44 = *(unsigned __int8 *)(a1 + 89);
  do
  {
    uint64_t v53 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,1u>::kSubblockPositions[v40 + 1];
    uint64_t v54 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,1u>::kSubblockPositions[v40];
    LODWORD(result) = (v43 - 8 * v54) & ~((v43 - 8 * (int)v54) >> 31);
    if (result >= 8) {
      uint64_t result = 8;
    }
    else {
      uint64_t result = result;
    }
    unsigned int v56 = (v44 - 4 * v53) & ~((v44 - 4 * (int)v53) >> 31);
    if (v56 >= 4) {
      unsigned int v56 = 4;
    }
    if (result) {
      BOOL v57 = v56 == 0;
    }
    else {
      BOOL v57 = 1;
    }
    if (v57)
    {
      char v52 = 0;
    }
    else
    {
      uint64_t v45 = (int32x4_t *)&v78[128 * v53 + 16 * v54];
      float32x2x2_t v46 = (float32x2x2_t)*v45;
      int32x4_t v47 = v45[2];
      int32x4_t v48 = vzip2q_s32(*v45, v47);
      float32x2x2_t v49 = (float32x2x2_t)v45[4];
      int32x4_t v50 = v45[6];
      unsigned int v51 = (float *)v41;
      vst2_f32(v51, v46);
      v51 += 4;
      vst2_f32(v51, v49);
      *(int32x4_t *)(v41 + 32) = v48;
      *(int32x4_t *)(v41 + 48) = vzip2q_s32((int32x4_t)v49, v50);
      v41 += 64;
      char v52 = 63;
    }
    *v42++ = v52;
    v40 += 2;
  }
  while (v40 != 16);
  return result;
}

unint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE8ELj1ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v2 = 0;
  uint64_t v62 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(a1 + 40);
  uint64_t v4 = *(unsigned char **)(a1 + 48);
  do
  {
    uint64_t v7 = (int32x4_t *)&v61[128
                         * (unint64_t)AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,1u>::kSubblockPositions[v2 + 1]
                         + 16
                         * AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,1u>::kSubblockPositions[v2]];
    unsigned int v8 = *v4;
    if (v8 == 63)
    {
      int32x4_t v9 = *(int32x4_t *)v3;
      int32x4_t v10 = *(int32x4_t *)(v3 + 16);
      int32x4_t v11 = *(int32x4_t *)(v3 + 32);
      int32x4_t v12 = *(int32x4_t *)(v3 + 48);
      *uint64_t v7 = vuzp1q_s32(*(int32x4_t *)v3, v11);
      v7[2] = vuzp2q_s32(v9, v11);
      v7[4] = vuzp1q_s32(v10, v12);
      v7[6] = vuzp2q_s32(v10, v12);
      uint64_t v6 = 64;
    }
    else if (v8 == 1)
    {
      int16x8_t v5 = vld1q_dup_s16((const __int16 *)v3);
      *uint64_t v7 = (int32x4_t)v5;
      v7[2] = (int32x4_t)v5;
      v7[4] = (int32x4_t)v5;
      v7[6] = (int32x4_t)v5;
      uint64_t v6 = 2;
    }
    else if (*v4)
    {
      uint64_t v6 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v7, 32, v3, v8);
    }
    else
    {
      uint64_t v6 = 0;
      v7->i64[0] = 0;
      v7->i64[1] = 0;
      v7[2].i64[0] = 0;
      v7[2].i64[1] = 0;
      v7[4].i64[0] = 0;
      v7[4].i64[1] = 0;
      v7[6].i64[0] = 0;
      v7[6].i64[1] = 0;
    }
    v3 += v6;
    ++v4;
    v2 += 2;
  }
  while (v2 != 16);
  uint64_t v13 = *(unsigned int *)(a1 + 80);
  if (v13 && *(_DWORD *)(a1 + 84))
  {
    uint64_t v14 = 32 * *(unsigned int *)(a1 + 72);
    uint64_t v15 = 2 * *(unsigned int *)(a1 + 76);
    uint64_t v16 = &v61[v14 + v15];
    uint64_t v17 = *(void *)(a1 + 56);
    uint64_t v18 = *(void *)(a1 + 64);
    unint64_t v19 = 2 * *(unsigned int *)(a1 + 84);
    if (v19 <= 1) {
      unint64_t v20 = 1;
    }
    else {
      unint64_t v20 = 2 * *(unsigned int *)(a1 + 84);
    }
    if (v20 <= 7)
    {
      for (uint64_t i = 0; i != v13; ++i)
      {
        uint64_t v22 = 0;
        do
        {
          v16[v22] = *(unsigned char *)(v17 + v22);
          ++v22;
        }
        while (v19 > v22);
        v16 += 32;
        v17 += v18;
      }
      return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v61, 32, *(uint16x8_t **)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
    }
    if (v20 && !((v20 - 1) >> 32))
    {
      int v23 = &v61[v14 + v15];
      uint64_t v24 = v20 & 0x1FFFFFFF8;
      if (v20 < 0x20)
      {
        uint64_t v25 = 0;
        uint64_t v26 = &v61[v14 + v15];
        uint64_t v27 = *(uint64_t **)(a1 + 56);
        while (1)
        {
          unsigned int v28 = (char *)(v17 + v18 * v25);
          char v29 = &v16[32 * v25];
          if ((unint64_t)(&v23[32 * v25] - v28) > 0x1F)
          {
            v29 += v24;
            uint64_t v31 = v26;
            uint64_t v32 = v27;
            uint64_t v33 = v20 & 0x1FFFFFFF8;
            do
            {
              uint64_t v34 = *v32++;
              *v31++ = v34;
              v33 -= 8;
            }
            while (v33);
            if (v20 == v24) {
              goto LABEL_25;
            }
            v28 += v24;
            int v30 = v20 & 0xFFFFFFF8;
          }
          else
          {
            int v30 = 0;
          }
          unsigned int v35 = v30 + 1;
          do
          {
            char v36 = *v28++;
            *v29++ = v36;
            BOOL v37 = v19 > v35++;
          }
          while (v37);
LABEL_25:
          ++v25;
          uint64_t v27 = (uint64_t *)((char *)v27 + v18);
          v26 += 32;
          if (v25 == v13) {
            return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v61, 32, *(uint16x8_t **)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
          }
        }
      }
      uint64_t v41 = 0;
      uint64_t v42 = v20 & 0x1FFFFFFE0;
      int v43 = &v61[v14 + v15];
      int v44 = &v61[v14 + 16 + v15];
      uint64_t v45 = (long long *)(v17 + 16);
      float32x2x2_t v46 = (uint64_t *)(v17 + (v20 & 0x1FFFFFFE0));
      for (uint64_t j = &v43[v20 & 0x1FFFFFFE0]; ; j += 4)
      {
        int32x4_t v48 = (char *)(v17 + v18 * v41);
        float32x2x2_t v49 = &v16[32 * v41];
        if ((unint64_t)(&v23[32 * v41] - v48) >= 0x20)
        {
          uint64_t v53 = v45;
          uint64_t v54 = v44;
          uint64_t v55 = v20 & 0x1FFFFFFE0;
          do
          {
            long long v56 = *v53;
            *(v54 - 1) = *(v53 - 1);
            *uint64_t v54 = v56;
            v54 += 2;
            v53 += 2;
            v55 -= 32;
          }
          while (v55);
          if (v20 == v42) {
            goto LABEL_41;
          }
          if ((v20 & 0x18) != 0)
          {
            v49 += v24;
            BOOL v57 = j;
            uint64_t v58 = v46;
            unint64_t v59 = v24 - (v20 & 0x1FFFFFFE0);
            do
            {
              uint64_t v60 = *v58++;
              *v57++ = v60;
              v59 -= 8;
            }
            while (v59);
            if (v20 == v24) {
              goto LABEL_41;
            }
            v48 += v24;
            int v50 = v20 & 0xFFFFFFF8;
          }
          else
          {
            v48 += v42;
            v49 += v42;
            int v50 = v20 & 0xFFFFFFE0;
          }
        }
        else
        {
          int v50 = 0;
        }
        unsigned int v51 = v50 + 1;
        do
        {
          char v52 = *v48++;
          *v49++ = v52;
          BOOL v37 = v19 > v51++;
        }
        while (v37);
LABEL_41:
        ++v41;
        v44 += 32;
        uint64_t v45 = (long long *)((char *)v45 + v18);
        float32x2x2_t v46 = (uint64_t *)((char *)v46 + v18);
        if (v41 == v13) {
          return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v61, 32, *(uint16x8_t **)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
        }
      }
    }
    for (uint64_t k = 0; k != v13; ++k)
    {
      uint64_t v39 = 0;
      do
      {
        v16[v39] = *(unsigned char *)(v17 + v39);
        ++v39;
      }
      while (v19 > v39);
      v16 += 32;
      v17 += v18;
    }
  }
  return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v61, 32, *(uint16x8_t **)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE8ELj1ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v2 = 0;
  uint64_t v79 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(a1 + 40);
  uint64_t v4 = *(unsigned char **)(a1 + 48);
  do
  {
    uint64_t v7 = (int32x4_t *)&v78[128
                         * (unint64_t)AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,1u>::kSubblockPositions[v2 + 1]
                         + 16
                         * AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,1u>::kSubblockPositions[v2]];
    unsigned int v8 = *v4;
    if (v8 == 63)
    {
      int32x4_t v9 = *(int32x4_t *)v3;
      int32x4_t v10 = *(int32x4_t *)(v3 + 16);
      int32x4_t v11 = *(int32x4_t *)(v3 + 32);
      int32x4_t v12 = *(int32x4_t *)(v3 + 48);
      *uint64_t v7 = vuzp1q_s32(*(int32x4_t *)v3, v11);
      v7[2] = vuzp2q_s32(v9, v11);
      v7[4] = vuzp1q_s32(v10, v12);
      v7[6] = vuzp2q_s32(v10, v12);
      uint64_t v6 = 64;
    }
    else if (v8 == 1)
    {
      int16x8_t v5 = vld1q_dup_s16((const __int16 *)v3);
      *uint64_t v7 = (int32x4_t)v5;
      v7[2] = (int32x4_t)v5;
      v7[4] = (int32x4_t)v5;
      v7[6] = (int32x4_t)v5;
      uint64_t v6 = 2;
    }
    else if (*v4)
    {
      uint64_t v6 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v7, 32, v3, v8);
    }
    else
    {
      uint64_t v6 = 0;
      v7->i64[0] = 0;
      v7->i64[1] = 0;
      v7[2].i64[0] = 0;
      v7[2].i64[1] = 0;
      v7[4].i64[0] = 0;
      v7[4].i64[1] = 0;
      v7[6].i64[0] = 0;
      v7[6].i64[1] = 0;
    }
    v3 += v6;
    ++v4;
    v2 += 2;
  }
  while (v2 != 16);
  uint64_t v13 = *(unsigned int *)(a1 + 80);
  if (!v13 || !*(_DWORD *)(a1 + 84)) {
    goto LABEL_39;
  }
  uint64_t v14 = 32 * *(unsigned int *)(a1 + 72);
  uint64_t v15 = 2 * *(unsigned int *)(a1 + 76);
  uint64_t v16 = &v78[v14 + v15];
  uint64_t v17 = *(void *)(a1 + 56);
  uint64_t v18 = *(void *)(a1 + 64);
  unint64_t v19 = 2 * *(unsigned int *)(a1 + 84);
  if (v19 <= 1) {
    unint64_t v20 = 1;
  }
  else {
    unint64_t v20 = 2 * *(unsigned int *)(a1 + 84);
  }
  if (v20 > 7)
  {
    if (!v20 || (v20 - 1) >> 32)
    {
      for (uint64_t i = 0; i != v13; ++i)
      {
        uint64_t v39 = 0;
        do
        {
          v16[v39] = *(unsigned char *)(v17 + v39);
          ++v39;
        }
        while (v19 > v39);
        v16 += 32;
        v17 += v18;
      }
      goto LABEL_39;
    }
    int v23 = &v78[v14 + v15];
    uint64_t v24 = v20 & 0x1FFFFFFF8;
    if (v20 < 0x20)
    {
      uint64_t v25 = 0;
      uint64_t v26 = &v78[v14 + v15];
      uint64_t v27 = *(uint64_t **)(a1 + 56);
      while (1)
      {
        unsigned int v28 = (char *)(v17 + v18 * v25);
        char v29 = &v16[32 * v25];
        if ((unint64_t)(&v23[32 * v25] - v28) > 0x1F)
        {
          v29 += v24;
          uint64_t v31 = v26;
          uint64_t v32 = v27;
          uint64_t v33 = v20 & 0x1FFFFFFF8;
          do
          {
            uint64_t v34 = *v32++;
            *v31++ = v34;
            v33 -= 8;
          }
          while (v33);
          if (v20 == v24) {
            goto LABEL_25;
          }
          v28 += v24;
          int v30 = v20 & 0xFFFFFFF8;
        }
        else
        {
          int v30 = 0;
        }
        unsigned int v35 = v30 + 1;
        do
        {
          char v36 = *v28++;
          *v29++ = v36;
          BOOL v37 = v19 > v35++;
        }
        while (v37);
LABEL_25:
        ++v25;
        uint64_t v27 = (uint64_t *)((char *)v27 + v18);
        v26 += 32;
        if (v25 == v13) {
          goto LABEL_39;
        }
      }
    }
    uint64_t v58 = 0;
    uint64_t v59 = v20 & 0x1FFFFFFE0;
    uint64_t v60 = &v78[v14 + v15];
    unsigned int v61 = &v78[v14 + 16 + v15];
    uint64_t v62 = (long long *)(v17 + 16);
    int v63 = (uint64_t *)(v17 + (v20 & 0x1FFFFFFE0));
    unsigned int v64 = &v60[v20 & 0x1FFFFFFE0];
    while (1)
    {
      char v65 = (char *)(v17 + v18 * v58);
      uint64_t v66 = &v16[32 * v58];
      if ((unint64_t)(&v23[32 * v58] - v65) >= 0x20)
      {
        unsigned int v70 = v62;
        uint64_t v71 = v61;
        uint64_t v72 = v20 & 0x1FFFFFFE0;
        do
        {
          long long v73 = *v70;
          *(v71 - 1) = *(v70 - 1);
          *uint64_t v71 = v73;
          v71 += 2;
          v70 += 2;
          v72 -= 32;
        }
        while (v72);
        if (v20 == v59) {
          goto LABEL_54;
        }
        if ((v20 & 0x18) != 0)
        {
          v66 += v24;
          unsigned int v74 = v64;
          uint64_t v75 = v63;
          unint64_t v76 = v24 - (v20 & 0x1FFFFFFE0);
          do
          {
            uint64_t v77 = *v75++;
            *v74++ = v77;
            v76 -= 8;
          }
          while (v76);
          if (v20 == v24) {
            goto LABEL_54;
          }
          v65 += v24;
          int v67 = v20 & 0xFFFFFFF8;
        }
        else
        {
          v65 += v59;
          v66 += v59;
          int v67 = v20 & 0xFFFFFFE0;
        }
      }
      else
      {
        int v67 = 0;
      }
      unsigned int v68 = v67 + 1;
      do
      {
        char v69 = *v65++;
        *v66++ = v69;
        BOOL v37 = v19 > v68++;
      }
      while (v37);
LABEL_54:
      ++v58;
      v61 += 32;
      uint64_t v62 = (long long *)((char *)v62 + v18);
      int v63 = (uint64_t *)((char *)v63 + v18);
      v64 += 4;
      if (v58 == v13) {
        goto LABEL_39;
      }
    }
  }
  for (uint64_t j = 0; j != v13; ++j)
  {
    uint64_t v22 = 0;
    do
    {
      v16[v22] = *(unsigned char *)(v17 + v22);
      ++v22;
    }
    while (v19 > v22);
    v16 += 32;
    v17 += v18;
  }
LABEL_39:
  uint64_t v40 = 0;
  uint64_t v41 = *(void *)(a1 + 40);
  uint64_t v42 = *(char **)(a1 + 48);
  int v43 = *(unsigned __int8 *)(a1 + 88);
  int v44 = *(unsigned __int8 *)(a1 + 89);
  do
  {
    uint64_t v53 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,1u>::kSubblockPositions[v40 + 1];
    uint64_t v54 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,1u>::kSubblockPositions[v40];
    LODWORD(result) = (v43 - 8 * v54) & ~((v43 - 8 * (int)v54) >> 31);
    if (result >= 8) {
      uint64_t result = 8;
    }
    else {
      uint64_t result = result;
    }
    unsigned int v56 = (v44 - 4 * v53) & ~((v44 - 4 * (int)v53) >> 31);
    if (v56 >= 4) {
      unsigned int v56 = 4;
    }
    if (result) {
      BOOL v57 = v56 == 0;
    }
    else {
      BOOL v57 = 1;
    }
    if (v57)
    {
      char v52 = 0;
    }
    else
    {
      uint64_t v45 = (int32x4_t *)&v78[128 * v53 + 16 * v54];
      float32x2x2_t v46 = (float32x2x2_t)*v45;
      int32x4_t v47 = v45[2];
      int32x4_t v48 = vzip2q_s32(*v45, v47);
      float32x2x2_t v49 = (float32x2x2_t)v45[4];
      int32x4_t v50 = v45[6];
      unsigned int v51 = (float *)v41;
      vst2_f32(v51, v46);
      v51 += 4;
      vst2_f32(v51, v49);
      *(int32x4_t *)(v41 + 32) = v48;
      *(int32x4_t *)(v41 + 48) = vzip2q_s32((int32x4_t)v49, v50);
      v41 += 64;
      char v52 = 63;
    }
    *v42++ = v52;
    v40 += 2;
  }
  while (v40 != 16);
  return result;
}

unint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE8ELj1ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v2 = 0;
  uint64_t v62 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(a1 + 40);
  uint64_t v4 = *(unsigned char **)(a1 + 48);
  do
  {
    uint64_t v7 = (int32x4_t *)&v61[128
                         * (unint64_t)AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,1u>::kSubblockPositions[v2 + 1]
                         + 16
                         * AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,1u>::kSubblockPositions[v2]];
    unsigned int v8 = *v4;
    if (v8 == 63)
    {
      int32x4_t v9 = *(int32x4_t *)v3;
      int32x4_t v10 = *(int32x4_t *)(v3 + 16);
      int32x4_t v11 = *(int32x4_t *)(v3 + 32);
      int32x4_t v12 = *(int32x4_t *)(v3 + 48);
      *uint64_t v7 = vuzp1q_s32(*(int32x4_t *)v3, v11);
      v7[2] = vuzp2q_s32(v9, v11);
      v7[4] = vuzp1q_s32(v10, v12);
      v7[6] = vuzp2q_s32(v10, v12);
      uint64_t v6 = 64;
    }
    else if (v8 == 1)
    {
      int16x8_t v5 = vld1q_dup_s16((const __int16 *)v3);
      *uint64_t v7 = (int32x4_t)v5;
      v7[2] = (int32x4_t)v5;
      v7[4] = (int32x4_t)v5;
      v7[6] = (int32x4_t)v5;
      uint64_t v6 = 2;
    }
    else if (*v4)
    {
      uint64_t v6 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v7, 32, v3, v8);
    }
    else
    {
      uint64_t v6 = 0;
      v7->i64[0] = 0;
      v7->i64[1] = 0;
      v7[2].i64[0] = 0;
      v7[2].i64[1] = 0;
      v7[4].i64[0] = 0;
      v7[4].i64[1] = 0;
      v7[6].i64[0] = 0;
      v7[6].i64[1] = 0;
    }
    v3 += v6;
    ++v4;
    v2 += 2;
  }
  while (v2 != 16);
  uint64_t v13 = *(unsigned int *)(a1 + 80);
  if (v13 && *(_DWORD *)(a1 + 84))
  {
    uint64_t v14 = 32 * *(unsigned int *)(a1 + 72);
    uint64_t v15 = 2 * *(unsigned int *)(a1 + 76);
    uint64_t v16 = &v61[v14 + v15];
    uint64_t v17 = *(void *)(a1 + 56);
    uint64_t v18 = *(void *)(a1 + 64);
    unint64_t v19 = 2 * *(unsigned int *)(a1 + 84);
    if (v19 <= 1) {
      unint64_t v20 = 1;
    }
    else {
      unint64_t v20 = 2 * *(unsigned int *)(a1 + 84);
    }
    if (v20 <= 7)
    {
      for (uint64_t i = 0; i != v13; ++i)
      {
        uint64_t v22 = 0;
        do
        {
          v16[v22] = *(unsigned char *)(v17 + v22);
          ++v22;
        }
        while (v19 > v22);
        v16 += 32;
        v17 += v18;
      }
      return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v61, 32, *(uint16x8_t **)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
    }
    if (v20 && !((v20 - 1) >> 32))
    {
      int v23 = &v61[v14 + v15];
      uint64_t v24 = v20 & 0x1FFFFFFF8;
      if (v20 < 0x20)
      {
        uint64_t v25 = 0;
        uint64_t v26 = &v61[v14 + v15];
        uint64_t v27 = *(uint64_t **)(a1 + 56);
        while (1)
        {
          unsigned int v28 = (char *)(v17 + v18 * v25);
          char v29 = &v16[32 * v25];
          if ((unint64_t)(&v23[32 * v25] - v28) > 0x1F)
          {
            v29 += v24;
            uint64_t v31 = v26;
            uint64_t v32 = v27;
            uint64_t v33 = v20 & 0x1FFFFFFF8;
            do
            {
              uint64_t v34 = *v32++;
              *v31++ = v34;
              v33 -= 8;
            }
            while (v33);
            if (v20 == v24) {
              goto LABEL_25;
            }
            v28 += v24;
            int v30 = v20 & 0xFFFFFFF8;
          }
          else
          {
            int v30 = 0;
          }
          unsigned int v35 = v30 + 1;
          do
          {
            char v36 = *v28++;
            *v29++ = v36;
            BOOL v37 = v19 > v35++;
          }
          while (v37);
LABEL_25:
          ++v25;
          uint64_t v27 = (uint64_t *)((char *)v27 + v18);
          v26 += 32;
          if (v25 == v13) {
            return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v61, 32, *(uint16x8_t **)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
          }
        }
      }
      uint64_t v41 = 0;
      uint64_t v42 = v20 & 0x1FFFFFFE0;
      int v43 = &v61[v14 + v15];
      int v44 = &v61[v14 + 16 + v15];
      uint64_t v45 = (long long *)(v17 + 16);
      float32x2x2_t v46 = (uint64_t *)(v17 + (v20 & 0x1FFFFFFE0));
      for (uint64_t j = &v43[v20 & 0x1FFFFFFE0]; ; j += 4)
      {
        int32x4_t v48 = (char *)(v17 + v18 * v41);
        float32x2x2_t v49 = &v16[32 * v41];
        if ((unint64_t)(&v23[32 * v41] - v48) >= 0x20)
        {
          uint64_t v53 = v45;
          uint64_t v54 = v44;
          uint64_t v55 = v20 & 0x1FFFFFFE0;
          do
          {
            long long v56 = *v53;
            *(v54 - 1) = *(v53 - 1);
            *uint64_t v54 = v56;
            v54 += 2;
            v53 += 2;
            v55 -= 32;
          }
          while (v55);
          if (v20 == v42) {
            goto LABEL_41;
          }
          if ((v20 & 0x18) != 0)
          {
            v49 += v24;
            BOOL v57 = j;
            uint64_t v58 = v46;
            unint64_t v59 = v24 - (v20 & 0x1FFFFFFE0);
            do
            {
              uint64_t v60 = *v58++;
              *v57++ = v60;
              v59 -= 8;
            }
            while (v59);
            if (v20 == v24) {
              goto LABEL_41;
            }
            v48 += v24;
            int v50 = v20 & 0xFFFFFFF8;
          }
          else
          {
            v48 += v42;
            v49 += v42;
            int v50 = v20 & 0xFFFFFFE0;
          }
        }
        else
        {
          int v50 = 0;
        }
        unsigned int v51 = v50 + 1;
        do
        {
          char v52 = *v48++;
          *v49++ = v52;
          BOOL v37 = v19 > v51++;
        }
        while (v37);
LABEL_41:
        ++v41;
        v44 += 32;
        uint64_t v45 = (long long *)((char *)v45 + v18);
        float32x2x2_t v46 = (uint64_t *)((char *)v46 + v18);
        if (v41 == v13) {
          return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v61, 32, *(uint16x8_t **)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
        }
      }
    }
    for (uint64_t k = 0; k != v13; ++k)
    {
      uint64_t v39 = 0;
      do
      {
        v16[v39] = *(unsigned char *)(v17 + v39);
        ++v39;
      }
      while (v19 > v39);
      v16 += 32;
      v17 += v18;
    }
  }
  return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v61, 32, *(uint16x8_t **)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE10ELj1ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v2 = 0;
  uint64_t v79 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(a1 + 40);
  uint64_t v4 = *(unsigned char **)(a1 + 48);
  do
  {
    uint64_t v7 = (int32x4_t *)&v78[128
                         * (unint64_t)AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,1u>::kSubblockPositions[v2 + 1]
                         + 16
                         * AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,1u>::kSubblockPositions[v2]];
    unsigned int v8 = *v4;
    if (v8 == 63)
    {
      int32x4_t v9 = *(int32x4_t *)v3;
      int32x4_t v10 = *(int32x4_t *)(v3 + 16);
      int32x4_t v11 = *(int32x4_t *)(v3 + 32);
      int32x4_t v12 = *(int32x4_t *)(v3 + 48);
      *uint64_t v7 = vuzp1q_s32(*(int32x4_t *)v3, v11);
      v7[2] = vuzp2q_s32(v9, v11);
      v7[4] = vuzp1q_s32(v10, v12);
      v7[6] = vuzp2q_s32(v10, v12);
      uint64_t v6 = 64;
    }
    else if (v8 == 1)
    {
      int16x8_t v5 = vld1q_dup_s16((const __int16 *)v3);
      *uint64_t v7 = (int32x4_t)v5;
      v7[2] = (int32x4_t)v5;
      v7[4] = (int32x4_t)v5;
      v7[6] = (int32x4_t)v5;
      uint64_t v6 = 2;
    }
    else if (*v4)
    {
      uint64_t v6 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v7, 32, v3, v8);
    }
    else
    {
      uint64_t v6 = 0;
      v7->i64[0] = 0;
      v7->i64[1] = 0;
      v7[2].i64[0] = 0;
      v7[2].i64[1] = 0;
      v7[4].i64[0] = 0;
      v7[4].i64[1] = 0;
      v7[6].i64[0] = 0;
      v7[6].i64[1] = 0;
    }
    v3 += v6;
    ++v4;
    v2 += 2;
  }
  while (v2 != 16);
  uint64_t v13 = *(unsigned int *)(a1 + 80);
  if (!v13 || !*(_DWORD *)(a1 + 84)) {
    goto LABEL_39;
  }
  uint64_t v14 = 32 * *(unsigned int *)(a1 + 72);
  uint64_t v15 = 2 * *(unsigned int *)(a1 + 76);
  uint64_t v16 = &v78[v14 + v15];
  uint64_t v17 = *(void *)(a1 + 56);
  uint64_t v18 = *(void *)(a1 + 64);
  unint64_t v19 = 2 * *(unsigned int *)(a1 + 84);
  if (v19 <= 1) {
    unint64_t v20 = 1;
  }
  else {
    unint64_t v20 = 2 * *(unsigned int *)(a1 + 84);
  }
  if (v20 > 7)
  {
    if (!v20 || (v20 - 1) >> 32)
    {
      for (uint64_t i = 0; i != v13; ++i)
      {
        uint64_t v39 = 0;
        do
        {
          v16[v39] = *(unsigned char *)(v17 + v39);
          ++v39;
        }
        while (v19 > v39);
        v16 += 32;
        v17 += v18;
      }
      goto LABEL_39;
    }
    int v23 = &v78[v14 + v15];
    uint64_t v24 = v20 & 0x1FFFFFFF8;
    if (v20 < 0x20)
    {
      uint64_t v25 = 0;
      uint64_t v26 = &v78[v14 + v15];
      uint64_t v27 = *(uint64_t **)(a1 + 56);
      while (1)
      {
        unsigned int v28 = (char *)(v17 + v18 * v25);
        char v29 = &v16[32 * v25];
        if ((unint64_t)(&v23[32 * v25] - v28) > 0x1F)
        {
          v29 += v24;
          uint64_t v31 = v26;
          uint64_t v32 = v27;
          uint64_t v33 = v20 & 0x1FFFFFFF8;
          do
          {
            uint64_t v34 = *v32++;
            *v31++ = v34;
            v33 -= 8;
          }
          while (v33);
          if (v20 == v24) {
            goto LABEL_25;
          }
          v28 += v24;
          int v30 = v20 & 0xFFFFFFF8;
        }
        else
        {
          int v30 = 0;
        }
        unsigned int v35 = v30 + 1;
        do
        {
          char v36 = *v28++;
          *v29++ = v36;
          BOOL v37 = v19 > v35++;
        }
        while (v37);
LABEL_25:
        ++v25;
        uint64_t v27 = (uint64_t *)((char *)v27 + v18);
        v26 += 32;
        if (v25 == v13) {
          goto LABEL_39;
        }
      }
    }
    uint64_t v58 = 0;
    uint64_t v59 = v20 & 0x1FFFFFFE0;
    uint64_t v60 = &v78[v14 + v15];
    unsigned int v61 = &v78[v14 + 16 + v15];
    uint64_t v62 = (long long *)(v17 + 16);
    int v63 = (uint64_t *)(v17 + (v20 & 0x1FFFFFFE0));
    unsigned int v64 = &v60[v20 & 0x1FFFFFFE0];
    while (1)
    {
      char v65 = (char *)(v17 + v18 * v58);
      uint64_t v66 = &v16[32 * v58];
      if ((unint64_t)(&v23[32 * v58] - v65) >= 0x20)
      {
        unsigned int v70 = v62;
        uint64_t v71 = v61;
        uint64_t v72 = v20 & 0x1FFFFFFE0;
        do
        {
          long long v73 = *v70;
          *(v71 - 1) = *(v70 - 1);
          *uint64_t v71 = v73;
          v71 += 2;
          v70 += 2;
          v72 -= 32;
        }
        while (v72);
        if (v20 == v59) {
          goto LABEL_54;
        }
        if ((v20 & 0x18) != 0)
        {
          v66 += v24;
          unsigned int v74 = v64;
          uint64_t v75 = v63;
          unint64_t v76 = v24 - (v20 & 0x1FFFFFFE0);
          do
          {
            uint64_t v77 = *v75++;
            *v74++ = v77;
            v76 -= 8;
          }
          while (v76);
          if (v20 == v24) {
            goto LABEL_54;
          }
          v65 += v24;
          int v67 = v20 & 0xFFFFFFF8;
        }
        else
        {
          v65 += v59;
          v66 += v59;
          int v67 = v20 & 0xFFFFFFE0;
        }
      }
      else
      {
        int v67 = 0;
      }
      unsigned int v68 = v67 + 1;
      do
      {
        char v69 = *v65++;
        *v66++ = v69;
        BOOL v37 = v19 > v68++;
      }
      while (v37);
LABEL_54:
      ++v58;
      v61 += 32;
      uint64_t v62 = (long long *)((char *)v62 + v18);
      int v63 = (uint64_t *)((char *)v63 + v18);
      v64 += 4;
      if (v58 == v13) {
        goto LABEL_39;
      }
    }
  }
  for (uint64_t j = 0; j != v13; ++j)
  {
    uint64_t v22 = 0;
    do
    {
      v16[v22] = *(unsigned char *)(v17 + v22);
      ++v22;
    }
    while (v19 > v22);
    v16 += 32;
    v17 += v18;
  }
LABEL_39:
  uint64_t v40 = 0;
  uint64_t v41 = *(void *)(a1 + 40);
  uint64_t v42 = *(char **)(a1 + 48);
  int v43 = *(unsigned __int8 *)(a1 + 88);
  int v44 = *(unsigned __int8 *)(a1 + 89);
  do
  {
    uint64_t v53 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,1u>::kSubblockPositions[v40 + 1];
    uint64_t v54 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,1u>::kSubblockPositions[v40];
    LODWORD(result) = (v43 - 8 * v54) & ~((v43 - 8 * (int)v54) >> 31);
    if (result >= 8) {
      uint64_t result = 8;
    }
    else {
      uint64_t result = result;
    }
    unsigned int v56 = (v44 - 4 * v53) & ~((v44 - 4 * (int)v53) >> 31);
    if (v56 >= 4) {
      unsigned int v56 = 4;
    }
    if (result) {
      BOOL v57 = v56 == 0;
    }
    else {
      BOOL v57 = 1;
    }
    if (v57)
    {
      char v52 = 0;
    }
    else
    {
      uint64_t v45 = (int32x4_t *)&v78[128 * v53 + 16 * v54];
      float32x2x2_t v46 = (float32x2x2_t)*v45;
      int32x4_t v47 = v45[2];
      int32x4_t v48 = vzip2q_s32(*v45, v47);
      float32x2x2_t v49 = (float32x2x2_t)v45[4];
      int32x4_t v50 = v45[6];
      unsigned int v51 = (float *)v41;
      vst2_f32(v51, v46);
      v51 += 4;
      vst2_f32(v51, v49);
      *(int32x4_t *)(v41 + 32) = v48;
      *(int32x4_t *)(v41 + 48) = vzip2q_s32((int32x4_t)v49, v50);
      v41 += 64;
      char v52 = 63;
    }
    *v42++ = v52;
    v40 += 2;
  }
  while (v40 != 16);
  return result;
}

unint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE10ELj1ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v2 = 0;
  uint64_t v62 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(a1 + 40);
  uint64_t v4 = *(unsigned char **)(a1 + 48);
  do
  {
    uint64_t v7 = (int32x4_t *)&v61[128
                         * (unint64_t)AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,1u>::kSubblockPositions[v2 + 1]
                         + 16
                         * AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,1u>::kSubblockPositions[v2]];
    unsigned int v8 = *v4;
    if (v8 == 63)
    {
      int32x4_t v9 = *(int32x4_t *)v3;
      int32x4_t v10 = *(int32x4_t *)(v3 + 16);
      int32x4_t v11 = *(int32x4_t *)(v3 + 32);
      int32x4_t v12 = *(int32x4_t *)(v3 + 48);
      *uint64_t v7 = vuzp1q_s32(*(int32x4_t *)v3, v11);
      v7[2] = vuzp2q_s32(v9, v11);
      v7[4] = vuzp1q_s32(v10, v12);
      v7[6] = vuzp2q_s32(v10, v12);
      uint64_t v6 = 64;
    }
    else if (v8 == 1)
    {
      int16x8_t v5 = vld1q_dup_s16((const __int16 *)v3);
      *uint64_t v7 = (int32x4_t)v5;
      v7[2] = (int32x4_t)v5;
      v7[4] = (int32x4_t)v5;
      v7[6] = (int32x4_t)v5;
      uint64_t v6 = 2;
    }
    else if (*v4)
    {
      uint64_t v6 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v7, 32, v3, v8);
    }
    else
    {
      uint64_t v6 = 0;
      v7->i64[0] = 0;
      v7->i64[1] = 0;
      v7[2].i64[0] = 0;
      v7[2].i64[1] = 0;
      v7[4].i64[0] = 0;
      v7[4].i64[1] = 0;
      v7[6].i64[0] = 0;
      v7[6].i64[1] = 0;
    }
    v3 += v6;
    ++v4;
    v2 += 2;
  }
  while (v2 != 16);
  uint64_t v13 = *(unsigned int *)(a1 + 80);
  if (v13 && *(_DWORD *)(a1 + 84))
  {
    uint64_t v14 = 32 * *(unsigned int *)(a1 + 72);
    uint64_t v15 = 2 * *(unsigned int *)(a1 + 76);
    uint64_t v16 = &v61[v14 + v15];
    uint64_t v17 = *(void *)(a1 + 56);
    uint64_t v18 = *(void *)(a1 + 64);
    unint64_t v19 = 2 * *(unsigned int *)(a1 + 84);
    if (v19 <= 1) {
      unint64_t v20 = 1;
    }
    else {
      unint64_t v20 = 2 * *(unsigned int *)(a1 + 84);
    }
    if (v20 <= 7)
    {
      for (uint64_t i = 0; i != v13; ++i)
      {
        uint64_t v22 = 0;
        do
        {
          v16[v22] = *(unsigned char *)(v17 + v22);
          ++v22;
        }
        while (v19 > v22);
        v16 += 32;
        v17 += v18;
      }
      return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v61, 32, *(void *)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
    }
    if (v20 && !((v20 - 1) >> 32))
    {
      int v23 = &v61[v14 + v15];
      uint64_t v24 = v20 & 0x1FFFFFFF8;
      if (v20 < 0x20)
      {
        uint64_t v25 = 0;
        uint64_t v26 = &v61[v14 + v15];
        uint64_t v27 = *(uint64_t **)(a1 + 56);
        while (1)
        {
          unsigned int v28 = (char *)(v17 + v18 * v25);
          char v29 = &v16[32 * v25];
          if ((unint64_t)(&v23[32 * v25] - v28) > 0x1F)
          {
            v29 += v24;
            uint64_t v31 = v26;
            uint64_t v32 = v27;
            uint64_t v33 = v20 & 0x1FFFFFFF8;
            do
            {
              uint64_t v34 = *v32++;
              *v31++ = v34;
              v33 -= 8;
            }
            while (v33);
            if (v20 == v24) {
              goto LABEL_25;
            }
            v28 += v24;
            int v30 = v20 & 0xFFFFFFF8;
          }
          else
          {
            int v30 = 0;
          }
          unsigned int v35 = v30 + 1;
          do
          {
            char v36 = *v28++;
            *v29++ = v36;
            BOOL v37 = v19 > v35++;
          }
          while (v37);
LABEL_25:
          ++v25;
          uint64_t v27 = (uint64_t *)((char *)v27 + v18);
          v26 += 32;
          if (v25 == v13) {
            return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v61, 32, *(void *)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
          }
        }
      }
      uint64_t v41 = 0;
      uint64_t v42 = v20 & 0x1FFFFFFE0;
      int v43 = &v61[v14 + v15];
      int v44 = &v61[v14 + 16 + v15];
      uint64_t v45 = (long long *)(v17 + 16);
      float32x2x2_t v46 = (uint64_t *)(v17 + (v20 & 0x1FFFFFFE0));
      for (uint64_t j = &v43[v20 & 0x1FFFFFFE0]; ; j += 4)
      {
        int32x4_t v48 = (char *)(v17 + v18 * v41);
        float32x2x2_t v49 = &v16[32 * v41];
        if ((unint64_t)(&v23[32 * v41] - v48) >= 0x20)
        {
          uint64_t v53 = v45;
          uint64_t v54 = v44;
          uint64_t v55 = v20 & 0x1FFFFFFE0;
          do
          {
            long long v56 = *v53;
            *(v54 - 1) = *(v53 - 1);
            *uint64_t v54 = v56;
            v54 += 2;
            v53 += 2;
            v55 -= 32;
          }
          while (v55);
          if (v20 == v42) {
            goto LABEL_41;
          }
          if ((v20 & 0x18) != 0)
          {
            v49 += v24;
            BOOL v57 = j;
            uint64_t v58 = v46;
            unint64_t v59 = v24 - (v20 & 0x1FFFFFFE0);
            do
            {
              uint64_t v60 = *v58++;
              *v57++ = v60;
              v59 -= 8;
            }
            while (v59);
            if (v20 == v24) {
              goto LABEL_41;
            }
            v48 += v24;
            int v50 = v20 & 0xFFFFFFF8;
          }
          else
          {
            v48 += v42;
            v49 += v42;
            int v50 = v20 & 0xFFFFFFE0;
          }
        }
        else
        {
          int v50 = 0;
        }
        unsigned int v51 = v50 + 1;
        do
        {
          char v52 = *v48++;
          *v49++ = v52;
          BOOL v37 = v19 > v51++;
        }
        while (v37);
LABEL_41:
        ++v41;
        v44 += 32;
        uint64_t v45 = (long long *)((char *)v45 + v18);
        float32x2x2_t v46 = (uint64_t *)((char *)v46 + v18);
        if (v41 == v13) {
          return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v61, 32, *(void *)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
        }
      }
    }
    for (uint64_t k = 0; k != v13; ++k)
    {
      uint64_t v39 = 0;
      do
      {
        v16[v39] = *(unsigned char *)(v17 + v39);
        ++v39;
      }
      while (v19 > v39);
      v16 += 32;
      v17 += v18;
    }
  }
  return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v61, 32, *(void *)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE10ELj1ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v2 = 0;
  uint64_t v79 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(a1 + 40);
  uint64_t v4 = *(unsigned char **)(a1 + 48);
  do
  {
    uint64_t v7 = (int32x4_t *)&v78[128
                         * (unint64_t)AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,1u>::kSubblockPositions[v2 + 1]
                         + 16
                         * AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,1u>::kSubblockPositions[v2]];
    unsigned int v8 = *v4;
    if (v8 == 63)
    {
      int32x4_t v9 = *(int32x4_t *)v3;
      int32x4_t v10 = *(int32x4_t *)(v3 + 16);
      int32x4_t v11 = *(int32x4_t *)(v3 + 32);
      int32x4_t v12 = *(int32x4_t *)(v3 + 48);
      *uint64_t v7 = vuzp1q_s32(*(int32x4_t *)v3, v11);
      v7[2] = vuzp2q_s32(v9, v11);
      v7[4] = vuzp1q_s32(v10, v12);
      v7[6] = vuzp2q_s32(v10, v12);
      uint64_t v6 = 64;
    }
    else if (v8 == 1)
    {
      int16x8_t v5 = vld1q_dup_s16((const __int16 *)v3);
      *uint64_t v7 = (int32x4_t)v5;
      v7[2] = (int32x4_t)v5;
      v7[4] = (int32x4_t)v5;
      v7[6] = (int32x4_t)v5;
      uint64_t v6 = 2;
    }
    else if (*v4)
    {
      uint64_t v6 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v7, 32, v3, v8);
    }
    else
    {
      uint64_t v6 = 0;
      v7->i64[0] = 0;
      v7->i64[1] = 0;
      v7[2].i64[0] = 0;
      v7[2].i64[1] = 0;
      v7[4].i64[0] = 0;
      v7[4].i64[1] = 0;
      v7[6].i64[0] = 0;
      v7[6].i64[1] = 0;
    }
    v3 += v6;
    ++v4;
    v2 += 2;
  }
  while (v2 != 16);
  uint64_t v13 = *(unsigned int *)(a1 + 80);
  if (!v13 || !*(_DWORD *)(a1 + 84)) {
    goto LABEL_39;
  }
  uint64_t v14 = 32 * *(unsigned int *)(a1 + 72);
  uint64_t v15 = 2 * *(unsigned int *)(a1 + 76);
  uint64_t v16 = &v78[v14 + v15];
  uint64_t v17 = *(void *)(a1 + 56);
  uint64_t v18 = *(void *)(a1 + 64);
  unint64_t v19 = 2 * *(unsigned int *)(a1 + 84);
  if (v19 <= 1) {
    unint64_t v20 = 1;
  }
  else {
    unint64_t v20 = 2 * *(unsigned int *)(a1 + 84);
  }
  if (v20 > 7)
  {
    if (!v20 || (v20 - 1) >> 32)
    {
      for (uint64_t i = 0; i != v13; ++i)
      {
        uint64_t v39 = 0;
        do
        {
          v16[v39] = *(unsigned char *)(v17 + v39);
          ++v39;
        }
        while (v19 > v39);
        v16 += 32;
        v17 += v18;
      }
      goto LABEL_39;
    }
    int v23 = &v78[v14 + v15];
    uint64_t v24 = v20 & 0x1FFFFFFF8;
    if (v20 < 0x20)
    {
      uint64_t v25 = 0;
      uint64_t v26 = &v78[v14 + v15];
      uint64_t v27 = *(uint64_t **)(a1 + 56);
      while (1)
      {
        unsigned int v28 = (char *)(v17 + v18 * v25);
        char v29 = &v16[32 * v25];
        if ((unint64_t)(&v23[32 * v25] - v28) > 0x1F)
        {
          v29 += v24;
          uint64_t v31 = v26;
          uint64_t v32 = v27;
          uint64_t v33 = v20 & 0x1FFFFFFF8;
          do
          {
            uint64_t v34 = *v32++;
            *v31++ = v34;
            v33 -= 8;
          }
          while (v33);
          if (v20 == v24) {
            goto LABEL_25;
          }
          v28 += v24;
          int v30 = v20 & 0xFFFFFFF8;
        }
        else
        {
          int v30 = 0;
        }
        unsigned int v35 = v30 + 1;
        do
        {
          char v36 = *v28++;
          *v29++ = v36;
          BOOL v37 = v19 > v35++;
        }
        while (v37);
LABEL_25:
        ++v25;
        uint64_t v27 = (uint64_t *)((char *)v27 + v18);
        v26 += 32;
        if (v25 == v13) {
          goto LABEL_39;
        }
      }
    }
    uint64_t v58 = 0;
    uint64_t v59 = v20 & 0x1FFFFFFE0;
    uint64_t v60 = &v78[v14 + v15];
    unsigned int v61 = &v78[v14 + 16 + v15];
    uint64_t v62 = (long long *)(v17 + 16);
    int v63 = (uint64_t *)(v17 + (v20 & 0x1FFFFFFE0));
    unsigned int v64 = &v60[v20 & 0x1FFFFFFE0];
    while (1)
    {
      char v65 = (char *)(v17 + v18 * v58);
      uint64_t v66 = &v16[32 * v58];
      if ((unint64_t)(&v23[32 * v58] - v65) >= 0x20)
      {
        unsigned int v70 = v62;
        uint64_t v71 = v61;
        uint64_t v72 = v20 & 0x1FFFFFFE0;
        do
        {
          long long v73 = *v70;
          *(v71 - 1) = *(v70 - 1);
          *uint64_t v71 = v73;
          v71 += 2;
          v70 += 2;
          v72 -= 32;
        }
        while (v72);
        if (v20 == v59) {
          goto LABEL_54;
        }
        if ((v20 & 0x18) != 0)
        {
          v66 += v24;
          unsigned int v74 = v64;
          uint64_t v75 = v63;
          unint64_t v76 = v24 - (v20 & 0x1FFFFFFE0);
          do
          {
            uint64_t v77 = *v75++;
            *v74++ = v77;
            v76 -= 8;
          }
          while (v76);
          if (v20 == v24) {
            goto LABEL_54;
          }
          v65 += v24;
          int v67 = v20 & 0xFFFFFFF8;
        }
        else
        {
          v65 += v59;
          v66 += v59;
          int v67 = v20 & 0xFFFFFFE0;
        }
      }
      else
      {
        int v67 = 0;
      }
      unsigned int v68 = v67 + 1;
      do
      {
        char v69 = *v65++;
        *v66++ = v69;
        BOOL v37 = v19 > v68++;
      }
      while (v37);
LABEL_54:
      ++v58;
      v61 += 32;
      uint64_t v62 = (long long *)((char *)v62 + v18);
      int v63 = (uint64_t *)((char *)v63 + v18);
      v64 += 4;
      if (v58 == v13) {
        goto LABEL_39;
      }
    }
  }
  for (uint64_t j = 0; j != v13; ++j)
  {
    uint64_t v22 = 0;
    do
    {
      v16[v22] = *(unsigned char *)(v17 + v22);
      ++v22;
    }
    while (v19 > v22);
    v16 += 32;
    v17 += v18;
  }
LABEL_39:
  uint64_t v40 = 0;
  uint64_t v41 = *(void *)(a1 + 40);
  uint64_t v42 = *(char **)(a1 + 48);
  int v43 = *(unsigned __int8 *)(a1 + 88);
  int v44 = *(unsigned __int8 *)(a1 + 89);
  do
  {
    uint64_t v53 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,1u>::kSubblockPositions[v40 + 1];
    uint64_t v54 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,1u>::kSubblockPositions[v40];
    LODWORD(result) = (v43 - 8 * v54) & ~((v43 - 8 * (int)v54) >> 31);
    if (result >= 8) {
      uint64_t result = 8;
    }
    else {
      uint64_t result = result;
    }
    unsigned int v56 = (v44 - 4 * v53) & ~((v44 - 4 * (int)v53) >> 31);
    if (v56 >= 4) {
      unsigned int v56 = 4;
    }
    if (result) {
      BOOL v57 = v56 == 0;
    }
    else {
      BOOL v57 = 1;
    }
    if (v57)
    {
      char v52 = 0;
    }
    else
    {
      uint64_t v45 = (int32x4_t *)&v78[128 * v53 + 16 * v54];
      float32x2x2_t v46 = (float32x2x2_t)*v45;
      int32x4_t v47 = v45[2];
      int32x4_t v48 = vzip2q_s32(*v45, v47);
      float32x2x2_t v49 = (float32x2x2_t)v45[4];
      int32x4_t v50 = v45[6];
      unsigned int v51 = (float *)v41;
      vst2_f32(v51, v46);
      v51 += 4;
      vst2_f32(v51, v49);
      *(int32x4_t *)(v41 + 32) = v48;
      *(int32x4_t *)(v41 + 48) = vzip2q_s32((int32x4_t)v49, v50);
      v41 += 64;
      char v52 = 63;
    }
    *v42++ = v52;
    v40 += 2;
  }
  while (v40 != 16);
  return result;
}

unint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE10ELj1ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v2 = 0;
  uint64_t v62 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(a1 + 40);
  uint64_t v4 = *(unsigned char **)(a1 + 48);
  do
  {
    uint64_t v7 = (int32x4_t *)&v61[128
                         * (unint64_t)AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,1u>::kSubblockPositions[v2 + 1]
                         + 16
                         * AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,1u>::kSubblockPositions[v2]];
    unsigned int v8 = *v4;
    if (v8 == 63)
    {
      int32x4_t v9 = *(int32x4_t *)v3;
      int32x4_t v10 = *(int32x4_t *)(v3 + 16);
      int32x4_t v11 = *(int32x4_t *)(v3 + 32);
      int32x4_t v12 = *(int32x4_t *)(v3 + 48);
      *uint64_t v7 = vuzp1q_s32(*(int32x4_t *)v3, v11);
      v7[2] = vuzp2q_s32(v9, v11);
      v7[4] = vuzp1q_s32(v10, v12);
      v7[6] = vuzp2q_s32(v10, v12);
      uint64_t v6 = 64;
    }
    else if (v8 == 1)
    {
      int16x8_t v5 = vld1q_dup_s16((const __int16 *)v3);
      *uint64_t v7 = (int32x4_t)v5;
      v7[2] = (int32x4_t)v5;
      v7[4] = (int32x4_t)v5;
      v7[6] = (int32x4_t)v5;
      uint64_t v6 = 2;
    }
    else if (*v4)
    {
      uint64_t v6 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v7, 32, v3, v8);
    }
    else
    {
      uint64_t v6 = 0;
      v7->i64[0] = 0;
      v7->i64[1] = 0;
      v7[2].i64[0] = 0;
      v7[2].i64[1] = 0;
      v7[4].i64[0] = 0;
      v7[4].i64[1] = 0;
      v7[6].i64[0] = 0;
      v7[6].i64[1] = 0;
    }
    v3 += v6;
    ++v4;
    v2 += 2;
  }
  while (v2 != 16);
  uint64_t v13 = *(unsigned int *)(a1 + 80);
  if (v13 && *(_DWORD *)(a1 + 84))
  {
    uint64_t v14 = 32 * *(unsigned int *)(a1 + 72);
    uint64_t v15 = 2 * *(unsigned int *)(a1 + 76);
    uint64_t v16 = &v61[v14 + v15];
    uint64_t v17 = *(void *)(a1 + 56);
    uint64_t v18 = *(void *)(a1 + 64);
    unint64_t v19 = 2 * *(unsigned int *)(a1 + 84);
    if (v19 <= 1) {
      unint64_t v20 = 1;
    }
    else {
      unint64_t v20 = 2 * *(unsigned int *)(a1 + 84);
    }
    if (v20 <= 7)
    {
      for (uint64_t i = 0; i != v13; ++i)
      {
        uint64_t v22 = 0;
        do
        {
          v16[v22] = *(unsigned char *)(v17 + v22);
          ++v22;
        }
        while (v19 > v22);
        v16 += 32;
        v17 += v18;
      }
      return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v61, 32, *(void *)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
    }
    if (v20 && !((v20 - 1) >> 32))
    {
      int v23 = &v61[v14 + v15];
      uint64_t v24 = v20 & 0x1FFFFFFF8;
      if (v20 < 0x20)
      {
        uint64_t v25 = 0;
        uint64_t v26 = &v61[v14 + v15];
        uint64_t v27 = *(uint64_t **)(a1 + 56);
        while (1)
        {
          unsigned int v28 = (char *)(v17 + v18 * v25);
          char v29 = &v16[32 * v25];
          if ((unint64_t)(&v23[32 * v25] - v28) > 0x1F)
          {
            v29 += v24;
            uint64_t v31 = v26;
            uint64_t v32 = v27;
            uint64_t v33 = v20 & 0x1FFFFFFF8;
            do
            {
              uint64_t v34 = *v32++;
              *v31++ = v34;
              v33 -= 8;
            }
            while (v33);
            if (v20 == v24) {
              goto LABEL_25;
            }
            v28 += v24;
            int v30 = v20 & 0xFFFFFFF8;
          }
          else
          {
            int v30 = 0;
          }
          unsigned int v35 = v30 + 1;
          do
          {
            char v36 = *v28++;
            *v29++ = v36;
            BOOL v37 = v19 > v35++;
          }
          while (v37);
LABEL_25:
          ++v25;
          uint64_t v27 = (uint64_t *)((char *)v27 + v18);
          v26 += 32;
          if (v25 == v13) {
            return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v61, 32, *(void *)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
          }
        }
      }
      uint64_t v41 = 0;
      uint64_t v42 = v20 & 0x1FFFFFFE0;
      int v43 = &v61[v14 + v15];
      int v44 = &v61[v14 + 16 + v15];
      uint64_t v45 = (long long *)(v17 + 16);
      float32x2x2_t v46 = (uint64_t *)(v17 + (v20 & 0x1FFFFFFE0));
      for (uint64_t j = &v43[v20 & 0x1FFFFFFE0]; ; j += 4)
      {
        int32x4_t v48 = (char *)(v17 + v18 * v41);
        float32x2x2_t v49 = &v16[32 * v41];
        if ((unint64_t)(&v23[32 * v41] - v48) >= 0x20)
        {
          uint64_t v53 = v45;
          uint64_t v54 = v44;
          uint64_t v55 = v20 & 0x1FFFFFFE0;
          do
          {
            long long v56 = *v53;
            *(v54 - 1) = *(v53 - 1);
            *uint64_t v54 = v56;
            v54 += 2;
            v53 += 2;
            v55 -= 32;
          }
          while (v55);
          if (v20 == v42) {
            goto LABEL_41;
          }
          if ((v20 & 0x18) != 0)
          {
            v49 += v24;
            BOOL v57 = j;
            uint64_t v58 = v46;
            unint64_t v59 = v24 - (v20 & 0x1FFFFFFE0);
            do
            {
              uint64_t v60 = *v58++;
              *v57++ = v60;
              v59 -= 8;
            }
            while (v59);
            if (v20 == v24) {
              goto LABEL_41;
            }
            v48 += v24;
            int v50 = v20 & 0xFFFFFFF8;
          }
          else
          {
            v48 += v42;
            v49 += v42;
            int v50 = v20 & 0xFFFFFFE0;
          }
        }
        else
        {
          int v50 = 0;
        }
        unsigned int v51 = v50 + 1;
        do
        {
          char v52 = *v48++;
          *v49++ = v52;
          BOOL v37 = v19 > v51++;
        }
        while (v37);
LABEL_41:
        ++v41;
        v44 += 32;
        uint64_t v45 = (long long *)((char *)v45 + v18);
        float32x2x2_t v46 = (uint64_t *)((char *)v46 + v18);
        if (v41 == v13) {
          return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v61, 32, *(void *)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
        }
      }
    }
    for (uint64_t k = 0; k != v13; ++k)
    {
      uint64_t v39 = 0;
      do
      {
        v16[v39] = *(unsigned char *)(v17 + v39);
        ++v39;
      }
      while (v19 > v39);
      v16 += 32;
      v17 += v18;
    }
  }
  return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v61, 32, *(void *)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE19ELj1ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v78 = *MEMORY[0x263EF8340];
  AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressMacroblock(v77, *(void *)(a1 + 40), *(unsigned __int8 **)(a1 + 48));
  uint64_t v2 = *(unsigned int *)(a1 + 80);
  if (v2 && *(_DWORD *)(a1 + 84))
  {
    unint64_t v3 = (unint64_t)*(unsigned int *)(a1 + 72) << 7;
    uint64_t v4 = 8 * *(unsigned int *)(a1 + 76);
    int16x8_t v5 = (char *)v77 + v3 + v4;
    uint64_t v6 = *(void *)(a1 + 56);
    uint64_t v7 = *(void *)(a1 + 64);
    unint64_t v8 = 8 * *(unsigned int *)(a1 + 84);
    if (v8 <= 1) {
      unint64_t v9 = 1;
    }
    else {
      unint64_t v9 = 8 * *(unsigned int *)(a1 + 84);
    }
    if (v9) {
      BOOL v10 = (v9 - 1) >> 32 == 0;
    }
    else {
      BOOL v10 = 0;
    }
    if (!v10)
    {
      for (uint64_t i = 0; i != v2; ++i)
      {
        uint64_t v12 = 0;
        do
        {
          v5[v12] = *(unsigned char *)(v6 + v12);
          ++v12;
        }
        while (v8 > v12);
        v5 += 128;
        v6 += v7;
      }
      goto LABEL_14;
    }
    uint64_t v42 = (char *)v77 + v3 + v4;
    uint64_t v43 = v9 & 0x7FFFFFFF8;
    if (v9 < 0x20)
    {
      uint64_t v44 = 0;
      uint64_t v45 = (char *)v77 + v3 + v4;
      float32x2x2_t v46 = *(uint64_t **)(a1 + 56);
      while (1)
      {
        int32x4_t v47 = (char *)(v6 + v7 * v44);
        int32x4_t v48 = &v5[128 * v44];
        if ((unint64_t)(&v42[128 * v44] - v47) > 0x1F)
        {
          v48 += v43;
          int v50 = v45;
          unsigned int v51 = v46;
          uint64_t v52 = v9 & 0x7FFFFFFF8;
          do
          {
            uint64_t v53 = *v51++;
            *v50++ = v53;
            v52 -= 8;
          }
          while (v52);
          if (v9 == v43) {
            goto LABEL_30;
          }
          v47 += v43;
          int v49 = v9 & 0xFFFFFFF8;
        }
        else
        {
          int v49 = 0;
        }
        unsigned int v54 = v49 + 1;
        do
        {
          char v55 = *v47++;
          *v48++ = v55;
          BOOL v56 = v8 > v54++;
        }
        while (v56);
LABEL_30:
        ++v44;
        float32x2x2_t v46 = (uint64_t *)((char *)v46 + v7);
        v45 += 128;
        if (v44 == v2) {
          goto LABEL_14;
        }
      }
    }
    uint64_t v57 = 0;
    uint64_t v58 = v9 & 0x7FFFFFFE0;
    unint64_t v59 = (char *)v77 + v3 + v4;
    uint64_t v60 = (char *)&v77[1] + v3 + v4;
    unsigned int v61 = (long long *)(v6 + 16);
    uint64_t v62 = (uint64_t *)(v6 + (v9 & 0x7FFFFFFE0));
    int v63 = &v59[v9 & 0x7FFFFFFE0];
    do
    {
      unsigned int v64 = (char *)(v6 + v7 * v57);
      char v65 = &v5[128 * v57];
      if ((unint64_t)(&v42[128 * v57] - v64) >= 0x20)
      {
        char v69 = v61;
        unsigned int v70 = v60;
        uint64_t v71 = v9 & 0x7FFFFFFE0;
        do
        {
          long long v72 = *v69;
          *(v70 - 1) = *(v69 - 1);
          *unsigned int v70 = v72;
          v70 += 2;
          v69 += 2;
          v71 -= 32;
        }
        while (v71);
        if (v9 == v58) {
          goto LABEL_41;
        }
        if ((v9 & 0x18) != 0)
        {
          v65 += v43;
          long long v73 = v63;
          unsigned int v74 = v62;
          unint64_t v75 = v43 - (v9 & 0x7FFFFFFE0);
          do
          {
            uint64_t v76 = *v74++;
            *(void *)long long v73 = v76;
            v73 += 8;
            v75 -= 8;
          }
          while (v75);
          if (v9 == v43) {
            goto LABEL_41;
          }
          v64 += v43;
          int v66 = v9 & 0xFFFFFFF8;
        }
        else
        {
          v64 += v58;
          v65 += v58;
          int v66 = v9 & 0xFFFFFFE0;
        }
      }
      else
      {
        int v66 = 0;
      }
      unsigned int v67 = v66 + 1;
      do
      {
        char v68 = *v64++;
        *v65++ = v68;
        BOOL v56 = v8 > v67++;
      }
      while (v56);
LABEL_41:
      ++v57;
      v60 += 128;
      unsigned int v61 = (long long *)((char *)v61 + v7);
      uint64_t v62 = (uint64_t *)((char *)v62 + v7);
      v63 += 128;
    }
    while (v57 != v2);
  }
LABEL_14:
  uint64_t v13 = 0;
  uint64_t v14 = *(_OWORD **)(a1 + 40);
  uint64_t v15 = *(char **)(a1 + 48);
  int v16 = *(unsigned __int8 *)(a1 + 88);
  int v17 = *(unsigned __int8 *)(a1 + 89);
  do
  {
    uint64_t v37 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,1u>::kSubblockPositions[v13 + 1];
    uint64_t v38 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,1u>::kSubblockPositions[v13];
    LODWORD(result) = (v16 - 8 * v38) & ~((v16 - 8 * (int)v38) >> 31);
    if (result >= 8) {
      uint64_t result = 8;
    }
    else {
      uint64_t result = result;
    }
    unsigned int v40 = (v17 - 4 * v37) & ~((v17 - 4 * (int)v37) >> 31);
    if (v40 >= 4) {
      unsigned int v40 = 4;
    }
    if (result) {
      BOOL v41 = v40 == 0;
    }
    else {
      BOOL v41 = 1;
    }
    if (v41)
    {
      char v36 = 0;
    }
    else
    {
      uint64_t v18 = &v77[32 * v37 + 4 * v38];
      long long v19 = v18[2];
      long long v20 = v18[10];
      long long v21 = v18[3];
      long long v22 = v18[11];
      long long v23 = *v18;
      long long v24 = v18[8];
      long long v25 = v18[1];
      long long v26 = v18[16];
      long long v27 = v18[17];
      long long v28 = v18[18];
      long long v29 = v18[19];
      long long v30 = v18[9];
      v18 += 24;
      long long v31 = v18[1];
      long long v32 = v18[2];
      long long v33 = v18[3];
      long long v34 = *v18;
      *uint64_t v14 = v23;
      v14[1] = v24;
      v14[2] = v25;
      v14[3] = v30;
      v14[4] = v26;
      v14[5] = v34;
      v14[6] = v27;
      v14[7] = v31;
      v14[8] = v19;
      v14[9] = v20;
      v14[10] = v21;
      v14[11] = v22;
      unsigned int v35 = v14 + 12;
      v14 += 16;
      char v36 = -1;
      *unsigned int v35 = v28;
      v35[1] = v32;
      v35[2] = v29;
      v35[3] = v33;
    }
    *v15++ = v36;
    v13 += 2;
  }
  while (v13 != 16);
  return result;
}

unint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE19ELj1ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v50 = *MEMORY[0x263EF8340];
  AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressMacroblock(v49, *(void *)(a1 + 40), *(unsigned __int8 **)(a1 + 48));
  uint64_t v4 = *(unsigned int *)(a1 + 80);
  if (!v4 || !*(_DWORD *)(a1 + 84)) {
    return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v49, 128, *(void *)(a1 + 40), *(unsigned char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), (uint64_t)v2, (uint64_t)v3);
  }
  unint64_t v5 = (unint64_t)*(unsigned int *)(a1 + 72) << 7;
  uint64_t v6 = 8 * *(unsigned int *)(a1 + 76);
  uint64_t v7 = (char *)v49 + v5 + v6;
  uint64_t v8 = *(void *)(a1 + 56);
  uint64_t v9 = *(void *)(a1 + 64);
  unint64_t v10 = 8 * *(unsigned int *)(a1 + 84);
  if (v10 <= 1) {
    unint64_t v11 = 1;
  }
  else {
    unint64_t v11 = 8 * *(unsigned int *)(a1 + 84);
  }
  if (v11) {
    BOOL v12 = (v11 - 1) >> 32 == 0;
  }
  else {
    BOOL v12 = 0;
  }
  if (v12)
  {
    int v16 = (char *)v49 + v5 + v6;
    uint64_t v17 = v11 & 0x7FFFFFFF8;
    if (v11 < 0x20)
    {
      uint64_t v18 = 0;
      long long v19 = (char *)v49 + v5 + v6;
      long long v20 = *(uint64_t **)(a1 + 56);
      while (1)
      {
        long long v21 = (char *)(v8 + v9 * v18);
        long long v22 = &v7[128 * v18];
        if ((unint64_t)(&v16[128 * v18] - v21) > 0x1F)
        {
          v22 += v17;
          long long v24 = v19;
          long long v25 = v20;
          uint64_t v26 = v11 & 0x7FFFFFFF8;
          do
          {
            uint64_t v27 = *v25++;
            *v24++ = v27;
            v26 -= 8;
          }
          while (v26);
          if (v11 == v17) {
            goto LABEL_17;
          }
          v21 += v17;
          int v23 = v11 & 0xFFFFFFF8;
        }
        else
        {
          int v23 = 0;
        }
        unsigned int v28 = v23 + 1;
        do
        {
          char v29 = *v21++;
          *v22++ = v29;
          BOOL v30 = v10 > v28++;
        }
        while (v30);
LABEL_17:
        ++v18;
        long long v20 = (uint64_t *)((char *)v20 + v9);
        v19 += 128;
        if (v18 == v4) {
          return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v49, 128, *(void *)(a1 + 40), *(unsigned char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), (uint64_t)v2, (uint64_t)v3);
        }
      }
    }
    uint64_t v31 = 0;
    uint64_t v32 = v11 & 0x7FFFFFFE0;
    long long v33 = (char *)v49 + v5 + v6;
    long long v34 = (char *)&v49[1] + v5 + v6;
    unsigned int v35 = (long long *)(v8 + 16);
    char v36 = (uint64_t *)(v8 + (v11 & 0x7FFFFFFE0));
    for (uint64_t i = &v33[v11 & 0x7FFFFFFE0]; ; i += 128)
    {
      uint64_t v2 = (char *)(v8 + v9 * v31);
      unint64_t v3 = &v7[128 * v31];
      if ((unint64_t)(&v16[128 * v31] - v2) >= 0x20)
      {
        BOOL v41 = v35;
        uint64_t v42 = v34;
        uint64_t v43 = v11 & 0x7FFFFFFE0;
        do
        {
          long long v44 = *v41;
          *(v42 - 1) = *(v41 - 1);
          *uint64_t v42 = v44;
          v42 += 2;
          v41 += 2;
          v43 -= 32;
        }
        while (v43);
        if (v11 == v32) {
          goto LABEL_28;
        }
        if ((v11 & 0x18) != 0)
        {
          v3 += v17;
          uint64_t v45 = i;
          float32x2x2_t v46 = v36;
          unint64_t v47 = v17 - (v11 & 0x7FFFFFFE0);
          do
          {
            uint64_t v48 = *v46++;
            *(void *)uint64_t v45 = v48;
            v45 += 8;
            v47 -= 8;
          }
          while (v47);
          if (v11 == v17) {
            goto LABEL_28;
          }
          v2 += v17;
          int v38 = v11 & 0xFFFFFFF8;
        }
        else
        {
          v2 += v32;
          v3 += v32;
          int v38 = v11 & 0xFFFFFFE0;
        }
      }
      else
      {
        int v38 = 0;
      }
      unsigned int v39 = v38 + 1;
      do
      {
        char v40 = *v2++;
        *v3++ = v40;
        BOOL v30 = v10 > v39++;
      }
      while (v30);
LABEL_28:
      ++v31;
      v34 += 128;
      unsigned int v35 = (long long *)((char *)v35 + v9);
      char v36 = (uint64_t *)((char *)v36 + v9);
      if (v31 == v4) {
        return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v49, 128, *(void *)(a1 + 40), *(unsigned char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), (uint64_t)v2, (uint64_t)v3);
      }
    }
  }
  for (uint64_t j = 0; j != v4; ++j)
  {
    uint64_t v14 = 0;
    do
    {
      v7[v14] = *(unsigned char *)(v8 + v14);
      ++v14;
    }
    while (v10 > v14);
    v7 += 128;
    v8 += v9;
  }
  return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v49, 128, *(void *)(a1 + 40), *(unsigned char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), (uint64_t)v2, (uint64_t)v3);
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE19ELj1ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v78 = *MEMORY[0x263EF8340];
  AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressMacroblock(v77, *(void *)(a1 + 40), *(unsigned __int8 **)(a1 + 48));
  uint64_t v2 = *(unsigned int *)(a1 + 80);
  if (v2 && *(_DWORD *)(a1 + 84))
  {
    unint64_t v3 = (unint64_t)*(unsigned int *)(a1 + 72) << 7;
    uint64_t v4 = 8 * *(unsigned int *)(a1 + 76);
    unint64_t v5 = (char *)v77 + v3 + v4;
    uint64_t v6 = *(void *)(a1 + 56);
    uint64_t v7 = *(void *)(a1 + 64);
    unint64_t v8 = 8 * *(unsigned int *)(a1 + 84);
    if (v8 <= 1) {
      unint64_t v9 = 1;
    }
    else {
      unint64_t v9 = 8 * *(unsigned int *)(a1 + 84);
    }
    if (v9) {
      BOOL v10 = (v9 - 1) >> 32 == 0;
    }
    else {
      BOOL v10 = 0;
    }
    if (!v10)
    {
      for (uint64_t i = 0; i != v2; ++i)
      {
        uint64_t v12 = 0;
        do
        {
          v5[v12] = *(unsigned char *)(v6 + v12);
          ++v12;
        }
        while (v8 > v12);
        v5 += 128;
        v6 += v7;
      }
      goto LABEL_14;
    }
    uint64_t v42 = (char *)v77 + v3 + v4;
    uint64_t v43 = v9 & 0x7FFFFFFF8;
    if (v9 < 0x20)
    {
      uint64_t v44 = 0;
      uint64_t v45 = (char *)v77 + v3 + v4;
      float32x2x2_t v46 = *(uint64_t **)(a1 + 56);
      while (1)
      {
        unint64_t v47 = (char *)(v6 + v7 * v44);
        uint64_t v48 = &v5[128 * v44];
        if ((unint64_t)(&v42[128 * v44] - v47) > 0x1F)
        {
          v48 += v43;
          uint64_t v50 = v45;
          unsigned int v51 = v46;
          uint64_t v52 = v9 & 0x7FFFFFFF8;
          do
          {
            uint64_t v53 = *v51++;
            *v50++ = v53;
            v52 -= 8;
          }
          while (v52);
          if (v9 == v43) {
            goto LABEL_30;
          }
          v47 += v43;
          int v49 = v9 & 0xFFFFFFF8;
        }
        else
        {
          int v49 = 0;
        }
        unsigned int v54 = v49 + 1;
        do
        {
          char v55 = *v47++;
          *v48++ = v55;
          BOOL v56 = v8 > v54++;
        }
        while (v56);
LABEL_30:
        ++v44;
        float32x2x2_t v46 = (uint64_t *)((char *)v46 + v7);
        v45 += 128;
        if (v44 == v2) {
          goto LABEL_14;
        }
      }
    }
    uint64_t v57 = 0;
    uint64_t v58 = v9 & 0x7FFFFFFE0;
    unint64_t v59 = (char *)v77 + v3 + v4;
    uint64_t v60 = (char *)&v77[1] + v3 + v4;
    unsigned int v61 = (long long *)(v6 + 16);
    uint64_t v62 = (uint64_t *)(v6 + (v9 & 0x7FFFFFFE0));
    int v63 = &v59[v9 & 0x7FFFFFFE0];
    do
    {
      unsigned int v64 = (char *)(v6 + v7 * v57);
      char v65 = &v5[128 * v57];
      if ((unint64_t)(&v42[128 * v57] - v64) >= 0x20)
      {
        char v69 = v61;
        unsigned int v70 = v60;
        uint64_t v71 = v9 & 0x7FFFFFFE0;
        do
        {
          long long v72 = *v69;
          *(v70 - 1) = *(v69 - 1);
          *unsigned int v70 = v72;
          v70 += 2;
          v69 += 2;
          v71 -= 32;
        }
        while (v71);
        if (v9 == v58) {
          goto LABEL_41;
        }
        if ((v9 & 0x18) != 0)
        {
          v65 += v43;
          long long v73 = v63;
          unsigned int v74 = v62;
          unint64_t v75 = v43 - (v9 & 0x7FFFFFFE0);
          do
          {
            uint64_t v76 = *v74++;
            *(void *)long long v73 = v76;
            v73 += 8;
            v75 -= 8;
          }
          while (v75);
          if (v9 == v43) {
            goto LABEL_41;
          }
          v64 += v43;
          int v66 = v9 & 0xFFFFFFF8;
        }
        else
        {
          v64 += v58;
          v65 += v58;
          int v66 = v9 & 0xFFFFFFE0;
        }
      }
      else
      {
        int v66 = 0;
      }
      unsigned int v67 = v66 + 1;
      do
      {
        char v68 = *v64++;
        *v65++ = v68;
        BOOL v56 = v8 > v67++;
      }
      while (v56);
LABEL_41:
      ++v57;
      v60 += 128;
      unsigned int v61 = (long long *)((char *)v61 + v7);
      uint64_t v62 = (uint64_t *)((char *)v62 + v7);
      v63 += 128;
    }
    while (v57 != v2);
  }
LABEL_14:
  uint64_t v13 = 0;
  uint64_t v14 = *(_OWORD **)(a1 + 40);
  uint64_t v15 = *(char **)(a1 + 48);
  int v16 = *(unsigned __int8 *)(a1 + 88);
  int v17 = *(unsigned __int8 *)(a1 + 89);
  do
  {
    uint64_t v37 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,1u>::kSubblockPositions[v13 + 1];
    uint64_t v38 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,1u>::kSubblockPositions[v13];
    LODWORD(result) = (v16 - 8 * v38) & ~((v16 - 8 * (int)v38) >> 31);
    if (result >= 8) {
      uint64_t result = 8;
    }
    else {
      uint64_t result = result;
    }
    unsigned int v40 = (v17 - 4 * v37) & ~((v17 - 4 * (int)v37) >> 31);
    if (v40 >= 4) {
      unsigned int v40 = 4;
    }
    if (result) {
      BOOL v41 = v40 == 0;
    }
    else {
      BOOL v41 = 1;
    }
    if (v41)
    {
      char v36 = 0;
    }
    else
    {
      uint64_t v18 = &v77[32 * v37 + 4 * v38];
      long long v19 = v18[2];
      long long v20 = v18[10];
      long long v21 = v18[3];
      long long v22 = v18[11];
      long long v23 = *v18;
      long long v24 = v18[8];
      long long v25 = v18[1];
      long long v26 = v18[16];
      long long v27 = v18[17];
      long long v28 = v18[18];
      long long v29 = v18[19];
      long long v30 = v18[9];
      v18 += 24;
      long long v31 = v18[1];
      long long v32 = v18[2];
      long long v33 = v18[3];
      long long v34 = *v18;
      *uint64_t v14 = v23;
      v14[1] = v24;
      v14[2] = v25;
      v14[3] = v30;
      v14[4] = v26;
      v14[5] = v34;
      v14[6] = v27;
      v14[7] = v31;
      v14[8] = v19;
      v14[9] = v20;
      v14[10] = v21;
      v14[11] = v22;
      unsigned int v35 = v14 + 12;
      v14 += 16;
      char v36 = -1;
      *unsigned int v35 = v28;
      v35[1] = v32;
      v35[2] = v29;
      v35[3] = v33;
    }
    *v15++ = v36;
    v13 += 2;
  }
  while (v13 != 16);
  return result;
}

unint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE19ELj1ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v50 = *MEMORY[0x263EF8340];
  AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressMacroblock(v49, *(void *)(a1 + 40), *(unsigned __int8 **)(a1 + 48));
  uint64_t v4 = *(unsigned int *)(a1 + 80);
  if (!v4 || !*(_DWORD *)(a1 + 84)) {
    return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v49, 128, *(void *)(a1 + 40), *(unsigned char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), (uint64_t)v2, (uint64_t)v3);
  }
  unint64_t v5 = (unint64_t)*(unsigned int *)(a1 + 72) << 7;
  uint64_t v6 = 8 * *(unsigned int *)(a1 + 76);
  uint64_t v7 = (char *)v49 + v5 + v6;
  uint64_t v8 = *(void *)(a1 + 56);
  uint64_t v9 = *(void *)(a1 + 64);
  unint64_t v10 = 8 * *(unsigned int *)(a1 + 84);
  if (v10 <= 1) {
    unint64_t v11 = 1;
  }
  else {
    unint64_t v11 = 8 * *(unsigned int *)(a1 + 84);
  }
  if (v11) {
    BOOL v12 = (v11 - 1) >> 32 == 0;
  }
  else {
    BOOL v12 = 0;
  }
  if (v12)
  {
    int v16 = (char *)v49 + v5 + v6;
    uint64_t v17 = v11 & 0x7FFFFFFF8;
    if (v11 < 0x20)
    {
      uint64_t v18 = 0;
      long long v19 = (char *)v49 + v5 + v6;
      long long v20 = *(uint64_t **)(a1 + 56);
      while (1)
      {
        long long v21 = (char *)(v8 + v9 * v18);
        long long v22 = &v7[128 * v18];
        if ((unint64_t)(&v16[128 * v18] - v21) > 0x1F)
        {
          v22 += v17;
          long long v24 = v19;
          long long v25 = v20;
          uint64_t v26 = v11 & 0x7FFFFFFF8;
          do
          {
            uint64_t v27 = *v25++;
            *v24++ = v27;
            v26 -= 8;
          }
          while (v26);
          if (v11 == v17) {
            goto LABEL_17;
          }
          v21 += v17;
          int v23 = v11 & 0xFFFFFFF8;
        }
        else
        {
          int v23 = 0;
        }
        unsigned int v28 = v23 + 1;
        do
        {
          char v29 = *v21++;
          *v22++ = v29;
          BOOL v30 = v10 > v28++;
        }
        while (v30);
LABEL_17:
        ++v18;
        long long v20 = (uint64_t *)((char *)v20 + v9);
        v19 += 128;
        if (v18 == v4) {
          return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v49, 128, *(void *)(a1 + 40), *(unsigned char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), (uint64_t)v2, (uint64_t)v3);
        }
      }
    }
    uint64_t v31 = 0;
    uint64_t v32 = v11 & 0x7FFFFFFE0;
    long long v33 = (char *)v49 + v5 + v6;
    long long v34 = (char *)&v49[1] + v5 + v6;
    unsigned int v35 = (long long *)(v8 + 16);
    char v36 = (uint64_t *)(v8 + (v11 & 0x7FFFFFFE0));
    for (uint64_t i = &v33[v11 & 0x7FFFFFFE0]; ; i += 128)
    {
      uint64_t v2 = (char *)(v8 + v9 * v31);
      unint64_t v3 = &v7[128 * v31];
      if ((unint64_t)(&v16[128 * v31] - v2) >= 0x20)
      {
        BOOL v41 = v35;
        uint64_t v42 = v34;
        uint64_t v43 = v11 & 0x7FFFFFFE0;
        do
        {
          long long v44 = *v41;
          *(v42 - 1) = *(v41 - 1);
          *uint64_t v42 = v44;
          v42 += 2;
          v41 += 2;
          v43 -= 32;
        }
        while (v43);
        if (v11 == v32) {
          goto LABEL_28;
        }
        if ((v11 & 0x18) != 0)
        {
          v3 += v17;
          uint64_t v45 = i;
          float32x2x2_t v46 = v36;
          unint64_t v47 = v17 - (v11 & 0x7FFFFFFE0);
          do
          {
            uint64_t v48 = *v46++;
            *(void *)uint64_t v45 = v48;
            v45 += 8;
            v47 -= 8;
          }
          while (v47);
          if (v11 == v17) {
            goto LABEL_28;
          }
          v2 += v17;
          int v38 = v11 & 0xFFFFFFF8;
        }
        else
        {
          v2 += v32;
          v3 += v32;
          int v38 = v11 & 0xFFFFFFE0;
        }
      }
      else
      {
        int v38 = 0;
      }
      unsigned int v39 = v38 + 1;
      do
      {
        char v40 = *v2++;
        *v3++ = v40;
        BOOL v30 = v10 > v39++;
      }
      while (v30);
LABEL_28:
      ++v31;
      v34 += 128;
      unsigned int v35 = (long long *)((char *)v35 + v9);
      char v36 = (uint64_t *)((char *)v36 + v9);
      if (v31 == v4) {
        return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v49, 128, *(void *)(a1 + 40), *(unsigned char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), (uint64_t)v2, (uint64_t)v3);
      }
    }
  }
  for (uint64_t j = 0; j != v4; ++j)
  {
    uint64_t v14 = 0;
    do
    {
      v7[v14] = *(unsigned char *)(v8 + v14);
      ++v14;
    }
    while (v10 > v14);
    v7 += 128;
    v8 += v9;
  }
  return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v49, 128, *(void *)(a1 + 40), *(unsigned char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), (uint64_t)v2, (uint64_t)v3);
}

_OWORD *___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE18ELj1ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v2 = 0;
  uint64_t v71 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(a1 + 40);
  uint64_t v4 = *(unsigned char **)(a1 + 48);
  do
  {
    uint64_t v7 = (float64x2_t *)&v70[32
                           * (unint64_t)AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,1u>::kSubblockPositions[v2 + 1]
                           + 4
                           * (unint64_t)AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,1u>::kSubblockPositions[v2]];
    unsigned int v8 = *v4;
    if (v8 == 255)
    {
      float64x2_t v9 = *(float64x2_t *)(v3 + 16);
      float64x2_t v10 = *(float64x2_t *)(v3 + 48);
      float64x2_t v11 = *(float64x2_t *)(v3 + 144);
      float64x2_t v12 = *(float64x2_t *)(v3 + 64);
      float64x2_t v13 = *(float64x2_t *)(v3 + 176);
      float64x2_t v14 = *(float64x2_t *)(v3 + 192);
      float64x2_t v15 = *(float64x2_t *)(v3 + 224);
      float64x2_t v16 = *(float64x2_t *)(v3 + 32);
      float64x2_t v17 = *(float64x2_t *)(v3 + 128);
      float64x2_t v18 = *(float64x2_t *)(v3 + 160);
      float64x2_t v19 = *(float64x2_t *)(v3 + 80);
      float64x2_t v20 = *(float64x2_t *)(v3 + 112);
      float64x2_t v21 = *(float64x2_t *)(v3 + 208);
      float64x2_t v22 = *(float64x2_t *)(v3 + 240);
      float64x2_t v23 = *(float64x2_t *)(v3 + 96);
      *uint64_t v7 = *(float64x2_t *)v3;
      v7[1] = v16;
      v7[2] = v17;
      v7[3] = v18;
      v7[8] = v9;
      v7[9] = v10;
      v7[10] = v11;
      v7[11] = v13;
      v7[16] = v12;
      v7[17] = v23;
      v7[18] = v14;
      v7[19] = v15;
      uint64_t v6 = 256;
      v7[24] = v19;
      v7[25] = v20;
      v7[26] = v21;
      v7[27] = v22;
    }
    else if (v8 == 7)
    {
      float64x2_t v5 = vld1q_dup_f64((const double *)v3);
      *uint64_t v7 = v5;
      v7[1] = v5;
      v7[2] = v5;
      v7[3] = v5;
      v7[8] = v5;
      v7[9] = v5;
      v7[10] = v5;
      v7[11] = v5;
      v7[16] = v5;
      v7[17] = v5;
      v7[18] = v5;
      v7[19] = v5;
      v7[24] = v5;
      v7[25] = v5;
      v7[26] = v5;
      v7[27] = v5;
      uint64_t v6 = 8;
    }
    else if (*v4)
    {
      uint64_t v6 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v7, 128, v3, v8);
    }
    else
    {
      uint64_t v6 = 0;
      v7[2] = 0u;
      v7[3] = 0u;
      *uint64_t v7 = 0u;
      v7[1] = 0u;
      v7[8] = 0u;
      v7[9] = 0u;
      v7[10] = 0u;
      v7[11] = 0u;
      v7[16] = 0u;
      v7[17] = 0u;
      v7[18] = 0u;
      v7[19] = 0u;
      v7[24] = 0u;
      v7[25] = 0u;
      v7[26] = 0u;
      v7[27] = 0u;
    }
    v3 += v6;
    ++v4;
    v2 += 2;
  }
  while (v2 != 16);
  uint64_t v24 = *(unsigned int *)(a1 + 80);
  if (v24 && *(_DWORD *)(a1 + 84))
  {
    unint64_t v25 = (unint64_t)*(unsigned int *)(a1 + 72) << 7;
    uint64_t v26 = 8 * *(unsigned int *)(a1 + 76);
    uint64_t v27 = (char *)v70 + v25 + v26;
    uint64_t v28 = *(void *)(a1 + 56);
    uint64_t v29 = *(void *)(a1 + 64);
    unint64_t v30 = 8 * *(unsigned int *)(a1 + 84);
    if (v30 <= 1) {
      unint64_t v31 = 1;
    }
    else {
      unint64_t v31 = 8 * *(unsigned int *)(a1 + 84);
    }
    if (v31 && !((v31 - 1) >> 32))
    {
      uint64_t v32 = (char *)v70 + v25 + v26;
      uint64_t v33 = v31 & 0x7FFFFFFF8;
      if (v31 < 0x20)
      {
        uint64_t v34 = 0;
        unsigned int v35 = (char *)v70 + v25 + v26;
        char v36 = *(uint64_t **)(a1 + 56);
        while (1)
        {
          uint64_t v37 = (char *)(v28 + v29 * v34);
          int v38 = &v27[128 * v34];
          if ((unint64_t)(&v32[128 * v34] - v37) > 0x1F)
          {
            v38 += v33;
            char v40 = v35;
            BOOL v41 = v36;
            uint64_t v42 = v31 & 0x7FFFFFFF8;
            do
            {
              uint64_t v43 = *v41++;
              *v40++ = v43;
              v42 -= 8;
            }
            while (v42);
            if (v31 == v33) {
              goto LABEL_19;
            }
            v37 += v33;
            int v39 = v31 & 0xFFFFFFF8;
          }
          else
          {
            int v39 = 0;
          }
          unsigned int v44 = v39 + 1;
          do
          {
            char v45 = *v37++;
            *v38++ = v45;
            BOOL v46 = v30 > v44++;
          }
          while (v46);
LABEL_19:
          ++v34;
          char v36 = (uint64_t *)((char *)v36 + v29);
          v35 += 128;
          if (v34 == v24) {
            return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock(v70, 128, *(_OWORD **)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
          }
        }
      }
      uint64_t v50 = 0;
      uint64_t v51 = v31 & 0x7FFFFFFE0;
      uint64_t v52 = (char *)v70 + v25 + v26;
      uint64_t v53 = (char *)&v70[1] + v25 + v26;
      unsigned int v54 = (long long *)(v28 + 16);
      char v55 = (uint64_t *)(v28 + (v31 & 0x7FFFFFFE0));
      for (uint64_t i = &v52[v31 & 0x7FFFFFFE0]; ; i += 128)
      {
        uint64_t v57 = (char *)(v28 + v29 * v50);
        uint64_t v58 = &v27[128 * v50];
        if ((unint64_t)(&v32[128 * v50] - v57) >= 0x20)
        {
          uint64_t v62 = v54;
          int v63 = v53;
          uint64_t v64 = v31 & 0x7FFFFFFE0;
          do
          {
            long long v65 = *v62;
            *(v63 - 1) = *(v62 - 1);
            *int v63 = v65;
            v63 += 2;
            v62 += 2;
            v64 -= 32;
          }
          while (v64);
          if (v31 == v51) {
            goto LABEL_35;
          }
          if ((v31 & 0x18) != 0)
          {
            v58 += v33;
            int v66 = i;
            unsigned int v67 = v55;
            unint64_t v68 = v33 - (v31 & 0x7FFFFFFE0);
            do
            {
              uint64_t v69 = *v67++;
              *(void *)int v66 = v69;
              v66 += 8;
              v68 -= 8;
            }
            while (v68);
            if (v31 == v33) {
              goto LABEL_35;
            }
            v57 += v33;
            int v59 = v31 & 0xFFFFFFF8;
          }
          else
          {
            v57 += v51;
            v58 += v51;
            int v59 = v31 & 0xFFFFFFE0;
          }
        }
        else
        {
          int v59 = 0;
        }
        unsigned int v60 = v59 + 1;
        do
        {
          char v61 = *v57++;
          *v58++ = v61;
          BOOL v46 = v30 > v60++;
        }
        while (v46);
LABEL_35:
        ++v50;
        v53 += 128;
        unsigned int v54 = (long long *)((char *)v54 + v29);
        char v55 = (uint64_t *)((char *)v55 + v29);
        if (v50 == v24) {
          return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock(v70, 128, *(_OWORD **)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
        }
      }
    }
    for (uint64_t j = 0; j != v24; ++j)
    {
      uint64_t v48 = 0;
      do
      {
        v27[v48] = *(unsigned char *)(v28 + v48);
        ++v48;
      }
      while (v30 > v48);
      v27 += 128;
      v28 += v29;
    }
  }
  return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock(v70, 128, *(_OWORD **)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE18ELj1ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v2 = 0;
  uint64_t v71 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(a1 + 40);
  uint64_t v4 = *(unsigned char **)(a1 + 48);
  do
  {
    uint64_t v7 = (float64x2_t *)&v70[512
                           * (unint64_t)AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,1u>::kSubblockPositions[v2 + 1]
                           + 64
                           * (unint64_t)AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,1u>::kSubblockPositions[v2]];
    unsigned int v8 = *v4;
    if (v8 == 255)
    {
      float64x2_t v9 = *(float64x2_t *)(v3 + 16);
      float64x2_t v10 = *(float64x2_t *)(v3 + 48);
      float64x2_t v11 = *(float64x2_t *)(v3 + 144);
      float64x2_t v12 = *(float64x2_t *)(v3 + 64);
      float64x2_t v13 = *(float64x2_t *)(v3 + 176);
      float64x2_t v14 = *(float64x2_t *)(v3 + 192);
      float64x2_t v15 = *(float64x2_t *)(v3 + 224);
      float64x2_t v16 = *(float64x2_t *)(v3 + 32);
      float64x2_t v17 = *(float64x2_t *)(v3 + 128);
      float64x2_t v18 = *(float64x2_t *)(v3 + 160);
      float64x2_t v19 = *(float64x2_t *)(v3 + 80);
      float64x2_t v20 = *(float64x2_t *)(v3 + 112);
      float64x2_t v21 = *(float64x2_t *)(v3 + 208);
      float64x2_t v22 = *(float64x2_t *)(v3 + 240);
      float64x2_t v23 = *(float64x2_t *)(v3 + 96);
      *uint64_t v7 = *(float64x2_t *)v3;
      v7[1] = v16;
      v7[2] = v17;
      v7[3] = v18;
      v7[8] = v9;
      v7[9] = v10;
      v7[10] = v11;
      v7[11] = v13;
      v7[16] = v12;
      v7[17] = v23;
      v7[18] = v14;
      v7[19] = v15;
      uint64_t v6 = 256;
      v7[24] = v19;
      v7[25] = v20;
      v7[26] = v21;
      v7[27] = v22;
    }
    else if (v8 == 7)
    {
      float64x2_t v5 = vld1q_dup_f64((const double *)v3);
      *uint64_t v7 = v5;
      v7[1] = v5;
      v7[2] = v5;
      v7[3] = v5;
      v7[8] = v5;
      v7[9] = v5;
      v7[10] = v5;
      v7[11] = v5;
      v7[16] = v5;
      v7[17] = v5;
      v7[18] = v5;
      v7[19] = v5;
      v7[24] = v5;
      v7[25] = v5;
      v7[26] = v5;
      v7[27] = v5;
      uint64_t v6 = 8;
    }
    else if (*v4)
    {
      uint64_t v6 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v7, 128, v3, v8);
    }
    else
    {
      uint64_t v6 = 0;
      v7[2] = 0u;
      v7[3] = 0u;
      *uint64_t v7 = 0u;
      v7[1] = 0u;
      v7[8] = 0u;
      v7[9] = 0u;
      v7[10] = 0u;
      v7[11] = 0u;
      v7[16] = 0u;
      v7[17] = 0u;
      v7[18] = 0u;
      v7[19] = 0u;
      v7[24] = 0u;
      v7[25] = 0u;
      v7[26] = 0u;
      v7[27] = 0u;
    }
    v3 += v6;
    ++v4;
    v2 += 2;
  }
  while (v2 != 16);
  uint64_t v24 = *(unsigned int *)(a1 + 80);
  if (v24 && *(_DWORD *)(a1 + 84))
  {
    unint64_t v25 = (unint64_t)*(unsigned int *)(a1 + 72) << 7;
    uint64_t v26 = 8 * *(unsigned int *)(a1 + 76);
    uint64_t v27 = &v70[v25 + v26];
    uint64_t v28 = *(void *)(a1 + 56);
    uint64_t v29 = *(void *)(a1 + 64);
    unint64_t v30 = 8 * *(unsigned int *)(a1 + 84);
    if (v30 <= 1) {
      unint64_t v31 = 1;
    }
    else {
      unint64_t v31 = 8 * *(unsigned int *)(a1 + 84);
    }
    if (v31 && !((v31 - 1) >> 32))
    {
      uint64_t v32 = &v70[v25 + v26];
      uint64_t v33 = v31 & 0x7FFFFFFF8;
      if (v31 < 0x20)
      {
        uint64_t v34 = 0;
        unsigned int v35 = &v70[v25 + v26];
        char v36 = *(uint64_t **)(a1 + 56);
        while (1)
        {
          uint64_t v37 = (char *)(v28 + v29 * v34);
          int v38 = &v27[128 * v34];
          if ((unint64_t)(&v32[128 * v34] - v37) > 0x1F)
          {
            v38 += v33;
            char v40 = v35;
            BOOL v41 = v36;
            uint64_t v42 = v31 & 0x7FFFFFFF8;
            do
            {
              uint64_t v43 = *v41++;
              *v40++ = v43;
              v42 -= 8;
            }
            while (v42);
            if (v31 == v33) {
              goto LABEL_19;
            }
            v37 += v33;
            int v39 = v31 & 0xFFFFFFF8;
          }
          else
          {
            int v39 = 0;
          }
          unsigned int v44 = v39 + 1;
          do
          {
            char v45 = *v37++;
            *v38++ = v45;
            BOOL v46 = v30 > v44++;
          }
          while (v46);
LABEL_19:
          ++v34;
          char v36 = (uint64_t *)((char *)v36 + v29);
          v35 += 128;
          if (v34 == v24) {
            return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((uint64_t)v70, 128, *(void *)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
          }
        }
      }
      uint64_t v50 = 0;
      uint64_t v51 = v31 & 0x7FFFFFFE0;
      uint64_t v52 = &v70[v25 + v26];
      uint64_t v53 = &v70[v25 + 16 + v26];
      unsigned int v54 = (long long *)(v28 + 16);
      char v55 = (uint64_t *)(v28 + (v31 & 0x7FFFFFFE0));
      for (uint64_t i = &v52[v31 & 0x7FFFFFFE0]; ; i += 16)
      {
        uint64_t v57 = (char *)(v28 + v29 * v50);
        uint64_t v58 = &v27[128 * v50];
        if ((unint64_t)(&v32[128 * v50] - v57) >= 0x20)
        {
          uint64_t v62 = v54;
          int v63 = v53;
          uint64_t v64 = v31 & 0x7FFFFFFE0;
          do
          {
            long long v65 = *v62;
            *(v63 - 1) = *(v62 - 1);
            *int v63 = v65;
            v63 += 2;
            v62 += 2;
            v64 -= 32;
          }
          while (v64);
          if (v31 == v51) {
            goto LABEL_35;
          }
          if ((v31 & 0x18) != 0)
          {
            v58 += v33;
            int v66 = i;
            unsigned int v67 = v55;
            unint64_t v68 = v33 - (v31 & 0x7FFFFFFE0);
            do
            {
              uint64_t v69 = *v67++;
              *v66++ = v69;
              v68 -= 8;
            }
            while (v68);
            if (v31 == v33) {
              goto LABEL_35;
            }
            v57 += v33;
            int v59 = v31 & 0xFFFFFFF8;
          }
          else
          {
            v57 += v51;
            v58 += v51;
            int v59 = v31 & 0xFFFFFFE0;
          }
        }
        else
        {
          int v59 = 0;
        }
        unsigned int v60 = v59 + 1;
        do
        {
          char v61 = *v57++;
          *v58++ = v61;
          BOOL v46 = v30 > v60++;
        }
        while (v46);
LABEL_35:
        ++v50;
        v53 += 128;
        unsigned int v54 = (long long *)((char *)v54 + v29);
        char v55 = (uint64_t *)((char *)v55 + v29);
        if (v50 == v24) {
          return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((uint64_t)v70, 128, *(void *)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
        }
      }
    }
    for (uint64_t j = 0; j != v24; ++j)
    {
      uint64_t v48 = 0;
      do
      {
        v27[v48] = *(unsigned char *)(v28 + v48);
        ++v48;
      }
      while (v30 > v48);
      v27 += 128;
      v28 += v29;
    }
  }
  return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((uint64_t)v70, 128, *(void *)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
}

_OWORD *___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE18ELj1ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v2 = 0;
  uint64_t v71 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(a1 + 40);
  uint64_t v4 = *(unsigned char **)(a1 + 48);
  do
  {
    uint64_t v7 = (float64x2_t *)&v70[32
                           * (unint64_t)AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,1u>::kSubblockPositions[v2 + 1]
                           + 4
                           * (unint64_t)AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,1u>::kSubblockPositions[v2]];
    unsigned int v8 = *v4;
    if (v8 == 255)
    {
      float64x2_t v9 = *(float64x2_t *)(v3 + 16);
      float64x2_t v10 = *(float64x2_t *)(v3 + 48);
      float64x2_t v11 = *(float64x2_t *)(v3 + 144);
      float64x2_t v12 = *(float64x2_t *)(v3 + 64);
      float64x2_t v13 = *(float64x2_t *)(v3 + 176);
      float64x2_t v14 = *(float64x2_t *)(v3 + 192);
      float64x2_t v15 = *(float64x2_t *)(v3 + 224);
      float64x2_t v16 = *(float64x2_t *)(v3 + 32);
      float64x2_t v17 = *(float64x2_t *)(v3 + 128);
      float64x2_t v18 = *(float64x2_t *)(v3 + 160);
      float64x2_t v19 = *(float64x2_t *)(v3 + 80);
      float64x2_t v20 = *(float64x2_t *)(v3 + 112);
      float64x2_t v21 = *(float64x2_t *)(v3 + 208);
      float64x2_t v22 = *(float64x2_t *)(v3 + 240);
      float64x2_t v23 = *(float64x2_t *)(v3 + 96);
      *uint64_t v7 = *(float64x2_t *)v3;
      v7[1] = v16;
      v7[2] = v17;
      v7[3] = v18;
      v7[8] = v9;
      v7[9] = v10;
      v7[10] = v11;
      v7[11] = v13;
      v7[16] = v12;
      v7[17] = v23;
      v7[18] = v14;
      v7[19] = v15;
      uint64_t v6 = 256;
      v7[24] = v19;
      v7[25] = v20;
      v7[26] = v21;
      v7[27] = v22;
    }
    else if (v8 == 7)
    {
      float64x2_t v5 = vld1q_dup_f64((const double *)v3);
      *uint64_t v7 = v5;
      v7[1] = v5;
      v7[2] = v5;
      v7[3] = v5;
      v7[8] = v5;
      v7[9] = v5;
      v7[10] = v5;
      v7[11] = v5;
      v7[16] = v5;
      v7[17] = v5;
      v7[18] = v5;
      v7[19] = v5;
      v7[24] = v5;
      v7[25] = v5;
      v7[26] = v5;
      v7[27] = v5;
      uint64_t v6 = 8;
    }
    else if (*v4)
    {
      uint64_t v6 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v7, 128, v3, v8);
    }
    else
    {
      uint64_t v6 = 0;
      v7[2] = 0u;
      v7[3] = 0u;
      *uint64_t v7 = 0u;
      v7[1] = 0u;
      v7[8] = 0u;
      v7[9] = 0u;
      v7[10] = 0u;
      v7[11] = 0u;
      v7[16] = 0u;
      v7[17] = 0u;
      v7[18] = 0u;
      v7[19] = 0u;
      v7[24] = 0u;
      v7[25] = 0u;
      v7[26] = 0u;
      v7[27] = 0u;
    }
    v3 += v6;
    ++v4;
    v2 += 2;
  }
  while (v2 != 16);
  uint64_t v24 = *(unsigned int *)(a1 + 80);
  if (v24 && *(_DWORD *)(a1 + 84))
  {
    unint64_t v25 = (unint64_t)*(unsigned int *)(a1 + 72) << 7;
    uint64_t v26 = 8 * *(unsigned int *)(a1 + 76);
    uint64_t v27 = (char *)v70 + v25 + v26;
    uint64_t v28 = *(void *)(a1 + 56);
    uint64_t v29 = *(void *)(a1 + 64);
    unint64_t v30 = 8 * *(unsigned int *)(a1 + 84);
    if (v30 <= 1) {
      unint64_t v31 = 1;
    }
    else {
      unint64_t v31 = 8 * *(unsigned int *)(a1 + 84);
    }
    if (v31 && !((v31 - 1) >> 32))
    {
      uint64_t v32 = (char *)v70 + v25 + v26;
      uint64_t v33 = v31 & 0x7FFFFFFF8;
      if (v31 < 0x20)
      {
        uint64_t v34 = 0;
        unsigned int v35 = (char *)v70 + v25 + v26;
        char v36 = *(uint64_t **)(a1 + 56);
        while (1)
        {
          uint64_t v37 = (char *)(v28 + v29 * v34);
          int v38 = &v27[128 * v34];
          if ((unint64_t)(&v32[128 * v34] - v37) > 0x1F)
          {
            v38 += v33;
            char v40 = v35;
            BOOL v41 = v36;
            uint64_t v42 = v31 & 0x7FFFFFFF8;
            do
            {
              uint64_t v43 = *v41++;
              *v40++ = v43;
              v42 -= 8;
            }
            while (v42);
            if (v31 == v33) {
              goto LABEL_19;
            }
            v37 += v33;
            int v39 = v31 & 0xFFFFFFF8;
          }
          else
          {
            int v39 = 0;
          }
          unsigned int v44 = v39 + 1;
          do
          {
            char v45 = *v37++;
            *v38++ = v45;
            BOOL v46 = v30 > v44++;
          }
          while (v46);
LABEL_19:
          ++v34;
          char v36 = (uint64_t *)((char *)v36 + v29);
          v35 += 128;
          if (v34 == v24) {
            return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock(v70, 128, *(_OWORD **)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
          }
        }
      }
      uint64_t v50 = 0;
      uint64_t v51 = v31 & 0x7FFFFFFE0;
      uint64_t v52 = (char *)v70 + v25 + v26;
      uint64_t v53 = (char *)&v70[1] + v25 + v26;
      unsigned int v54 = (long long *)(v28 + 16);
      char v55 = (uint64_t *)(v28 + (v31 & 0x7FFFFFFE0));
      for (uint64_t i = &v52[v31 & 0x7FFFFFFE0]; ; i += 128)
      {
        uint64_t v57 = (char *)(v28 + v29 * v50);
        uint64_t v58 = &v27[128 * v50];
        if ((unint64_t)(&v32[128 * v50] - v57) >= 0x20)
        {
          uint64_t v62 = v54;
          int v63 = v53;
          uint64_t v64 = v31 & 0x7FFFFFFE0;
          do
          {
            long long v65 = *v62;
            *(v63 - 1) = *(v62 - 1);
            *int v63 = v65;
            v63 += 2;
            v62 += 2;
            v64 -= 32;
          }
          while (v64);
          if (v31 == v51) {
            goto LABEL_35;
          }
          if ((v31 & 0x18) != 0)
          {
            v58 += v33;
            int v66 = i;
            unsigned int v67 = v55;
            unint64_t v68 = v33 - (v31 & 0x7FFFFFFE0);
            do
            {
              uint64_t v69 = *v67++;
              *(void *)int v66 = v69;
              v66 += 8;
              v68 -= 8;
            }
            while (v68);
            if (v31 == v33) {
              goto LABEL_35;
            }
            v57 += v33;
            int v59 = v31 & 0xFFFFFFF8;
          }
          else
          {
            v57 += v51;
            v58 += v51;
            int v59 = v31 & 0xFFFFFFE0;
          }
        }
        else
        {
          int v59 = 0;
        }
        unsigned int v60 = v59 + 1;
        do
        {
          char v61 = *v57++;
          *v58++ = v61;
          BOOL v46 = v30 > v60++;
        }
        while (v46);
LABEL_35:
        ++v50;
        v53 += 128;
        unsigned int v54 = (long long *)((char *)v54 + v29);
        char v55 = (uint64_t *)((char *)v55 + v29);
        if (v50 == v24) {
          return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock(v70, 128, *(_OWORD **)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
        }
      }
    }
    for (uint64_t j = 0; j != v24; ++j)
    {
      uint64_t v48 = 0;
      do
      {
        v27[v48] = *(unsigned char *)(v28 + v48);
        ++v48;
      }
      while (v30 > v48);
      v27 += 128;
      v28 += v29;
    }
  }
  return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock(v70, 128, *(_OWORD **)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE18ELj1ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v2 = 0;
  uint64_t v71 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(a1 + 40);
  uint64_t v4 = *(unsigned char **)(a1 + 48);
  do
  {
    uint64_t v7 = (float64x2_t *)&v70[512
                           * (unint64_t)AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,1u>::kSubblockPositions[v2 + 1]
                           + 64
                           * (unint64_t)AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,1u>::kSubblockPositions[v2]];
    unsigned int v8 = *v4;
    if (v8 == 255)
    {
      float64x2_t v9 = *(float64x2_t *)(v3 + 16);
      float64x2_t v10 = *(float64x2_t *)(v3 + 48);
      float64x2_t v11 = *(float64x2_t *)(v3 + 144);
      float64x2_t v12 = *(float64x2_t *)(v3 + 64);
      float64x2_t v13 = *(float64x2_t *)(v3 + 176);
      float64x2_t v14 = *(float64x2_t *)(v3 + 192);
      float64x2_t v15 = *(float64x2_t *)(v3 + 224);
      float64x2_t v16 = *(float64x2_t *)(v3 + 32);
      float64x2_t v17 = *(float64x2_t *)(v3 + 128);
      float64x2_t v18 = *(float64x2_t *)(v3 + 160);
      float64x2_t v19 = *(float64x2_t *)(v3 + 80);
      float64x2_t v20 = *(float64x2_t *)(v3 + 112);
      float64x2_t v21 = *(float64x2_t *)(v3 + 208);
      float64x2_t v22 = *(float64x2_t *)(v3 + 240);
      float64x2_t v23 = *(float64x2_t *)(v3 + 96);
      *uint64_t v7 = *(float64x2_t *)v3;
      v7[1] = v16;
      v7[2] = v17;
      v7[3] = v18;
      v7[8] = v9;
      v7[9] = v10;
      v7[10] = v11;
      v7[11] = v13;
      v7[16] = v12;
      v7[17] = v23;
      v7[18] = v14;
      v7[19] = v15;
      uint64_t v6 = 256;
      v7[24] = v19;
      v7[25] = v20;
      v7[26] = v21;
      v7[27] = v22;
    }
    else if (v8 == 7)
    {
      float64x2_t v5 = vld1q_dup_f64((const double *)v3);
      *uint64_t v7 = v5;
      v7[1] = v5;
      v7[2] = v5;
      v7[3] = v5;
      v7[8] = v5;
      v7[9] = v5;
      v7[10] = v5;
      v7[11] = v5;
      v7[16] = v5;
      v7[17] = v5;
      v7[18] = v5;
      v7[19] = v5;
      v7[24] = v5;
      v7[25] = v5;
      v7[26] = v5;
      v7[27] = v5;
      uint64_t v6 = 8;
    }
    else if (*v4)
    {
      uint64_t v6 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v7, 128, v3, v8);
    }
    else
    {
      uint64_t v6 = 0;
      v7[2] = 0u;
      v7[3] = 0u;
      *uint64_t v7 = 0u;
      v7[1] = 0u;
      v7[8] = 0u;
      v7[9] = 0u;
      v7[10] = 0u;
      v7[11] = 0u;
      v7[16] = 0u;
      v7[17] = 0u;
      v7[18] = 0u;
      v7[19] = 0u;
      v7[24] = 0u;
      v7[25] = 0u;
      v7[26] = 0u;
      v7[27] = 0u;
    }
    v3 += v6;
    ++v4;
    v2 += 2;
  }
  while (v2 != 16);
  uint64_t v24 = *(unsigned int *)(a1 + 80);
  if (v24 && *(_DWORD *)(a1 + 84))
  {
    unint64_t v25 = (unint64_t)*(unsigned int *)(a1 + 72) << 7;
    uint64_t v26 = 8 * *(unsigned int *)(a1 + 76);
    uint64_t v27 = &v70[v25 + v26];
    uint64_t v28 = *(void *)(a1 + 56);
    uint64_t v29 = *(void *)(a1 + 64);
    unint64_t v30 = 8 * *(unsigned int *)(a1 + 84);
    if (v30 <= 1) {
      unint64_t v31 = 1;
    }
    else {
      unint64_t v31 = 8 * *(unsigned int *)(a1 + 84);
    }
    if (v31 && !((v31 - 1) >> 32))
    {
      uint64_t v32 = &v70[v25 + v26];
      uint64_t v33 = v31 & 0x7FFFFFFF8;
      if (v31 < 0x20)
      {
        uint64_t v34 = 0;
        unsigned int v35 = &v70[v25 + v26];
        char v36 = *(uint64_t **)(a1 + 56);
        while (1)
        {
          uint64_t v37 = (char *)(v28 + v29 * v34);
          int v38 = &v27[128 * v34];
          if ((unint64_t)(&v32[128 * v34] - v37) > 0x1F)
          {
            v38 += v33;
            char v40 = v35;
            BOOL v41 = v36;
            uint64_t v42 = v31 & 0x7FFFFFFF8;
            do
            {
              uint64_t v43 = *v41++;
              *v40++ = v43;
              v42 -= 8;
            }
            while (v42);
            if (v31 == v33) {
              goto LABEL_19;
            }
            v37 += v33;
            int v39 = v31 & 0xFFFFFFF8;
          }
          else
          {
            int v39 = 0;
          }
          unsigned int v44 = v39 + 1;
          do
          {
            char v45 = *v37++;
            *v38++ = v45;
            BOOL v46 = v30 > v44++;
          }
          while (v46);
LABEL_19:
          ++v34;
          char v36 = (uint64_t *)((char *)v36 + v29);
          v35 += 128;
          if (v34 == v24) {
            return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((uint64_t)v70, 128, *(void *)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
          }
        }
      }
      uint64_t v50 = 0;
      uint64_t v51 = v31 & 0x7FFFFFFE0;
      uint64_t v52 = &v70[v25 + v26];
      uint64_t v53 = &v70[v25 + 16 + v26];
      unsigned int v54 = (long long *)(v28 + 16);
      char v55 = (uint64_t *)(v28 + (v31 & 0x7FFFFFFE0));
      for (uint64_t i = &v52[v31 & 0x7FFFFFFE0]; ; i += 16)
      {
        uint64_t v57 = (char *)(v28 + v29 * v50);
        uint64_t v58 = &v27[128 * v50];
        if ((unint64_t)(&v32[128 * v50] - v57) >= 0x20)
        {
          uint64_t v62 = v54;
          int v63 = v53;
          uint64_t v64 = v31 & 0x7FFFFFFE0;
          do
          {
            long long v65 = *v62;
            *(v63 - 1) = *(v62 - 1);
            *int v63 = v65;
            v63 += 2;
            v62 += 2;
            v64 -= 32;
          }
          while (v64);
          if (v31 == v51) {
            goto LABEL_35;
          }
          if ((v31 & 0x18) != 0)
          {
            v58 += v33;
            int v66 = i;
            unsigned int v67 = v55;
            unint64_t v68 = v33 - (v31 & 0x7FFFFFFE0);
            do
            {
              uint64_t v69 = *v67++;
              *v66++ = v69;
              v68 -= 8;
            }
            while (v68);
            if (v31 == v33) {
              goto LABEL_35;
            }
            v57 += v33;
            int v59 = v31 & 0xFFFFFFF8;
          }
          else
          {
            v57 += v51;
            v58 += v51;
            int v59 = v31 & 0xFFFFFFE0;
          }
        }
        else
        {
          int v59 = 0;
        }
        unsigned int v60 = v59 + 1;
        do
        {
          char v61 = *v57++;
          *v58++ = v61;
          BOOL v46 = v30 > v60++;
        }
        while (v46);
LABEL_35:
        ++v50;
        v53 += 128;
        unsigned int v54 = (long long *)((char *)v54 + v29);
        char v55 = (uint64_t *)((char *)v55 + v29);
        if (v50 == v24) {
          return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((uint64_t)v70, 128, *(void *)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
        }
      }
    }
    for (uint64_t j = 0; j != v24; ++j)
    {
      uint64_t v48 = 0;
      do
      {
        v27[v48] = *(unsigned char *)(v28 + v48);
        ++v48;
      }
      while (v30 > v48);
      v27 += 128;
      v28 += v29;
    }
  }
  return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((uint64_t)v70, 128, *(void *)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
}

float32x2x2_t *___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE4ELj1ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1, __n128 a2, int32x4_t a3, int32x4_t a4)
{
  uint64_t v55 = *MEMORY[0x263EF8340];
  AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressMacroblock((uint64_t)v54, *(void *)(a1 + 40), *(unsigned __int8 **)(a1 + 48), a2, a3, a4);
  uint64_t v5 = *(unsigned int *)(a1 + 80);
  if (!v5 || !*(_DWORD *)(a1 + 84)) {
    return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock(v54, 32, *(void *)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
  }
  uint64_t v6 = 2 * *(unsigned int *)(a1 + 72);
  uint64_t v7 = 2 * *(unsigned int *)(a1 + 76);
  unsigned int v8 = (char *)&v54[v6] + v7;
  uint64_t v9 = *(void *)(a1 + 56);
  uint64_t v10 = *(void *)(a1 + 64);
  unint64_t v11 = 2 * *(unsigned int *)(a1 + 84);
  if (v11 <= 1) {
    unint64_t v12 = 1;
  }
  else {
    unint64_t v12 = 2 * *(unsigned int *)(a1 + 84);
  }
  if (v12 <= 7)
  {
    for (uint64_t i = 0; i != v5; ++i)
    {
      uint64_t v14 = 0;
      do
      {
        v8[v14] = *(unsigned char *)(v9 + v14);
        ++v14;
      }
      while (v11 > v14);
      v8 += 32;
      v9 += v10;
    }
    return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock(v54, 32, *(void *)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
  }
  if (v12) {
    BOOL v15 = (v12 - 1) >> 32 == 0;
  }
  else {
    BOOL v15 = 0;
  }
  if (v15)
  {
    float64x2_t v19 = (char *)&v54[v6] + v7;
    uint64_t v20 = v12 & 0x1FFFFFFF8;
    if (v12 < 0x20)
    {
      uint64_t v21 = 0;
      float64x2_t v22 = (char *)&v54[v6] + v7;
      float64x2_t v23 = *(uint64_t **)(a1 + 56);
      while (1)
      {
        uint64_t v24 = (char *)(v9 + v10 * v21);
        unint64_t v25 = &v8[32 * v21];
        if ((unint64_t)(&v19[32 * v21] - v24) > 0x1F)
        {
          v25 += v20;
          uint64_t v27 = v22;
          uint64_t v28 = v23;
          uint64_t v29 = v12 & 0x1FFFFFFF8;
          do
          {
            uint64_t v30 = *v28++;
            *v27++ = v30;
            v29 -= 8;
          }
          while (v29);
          if (v12 == v20) {
            goto LABEL_23;
          }
          v24 += v20;
          int v26 = v12 & 0xFFFFFFF8;
        }
        else
        {
          int v26 = 0;
        }
        unsigned int v31 = v26 + 1;
        do
        {
          char v32 = *v24++;
          *v25++ = v32;
          BOOL v33 = v11 > v31++;
        }
        while (v33);
LABEL_23:
        ++v21;
        float64x2_t v23 = (uint64_t *)((char *)v23 + v10);
        v22 += 32;
        if (v21 == v5) {
          return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock(v54, 32, *(void *)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
        }
      }
    }
    uint64_t v34 = 0;
    uint64_t v35 = v12 & 0x1FFFFFFE0;
    char v36 = (char *)&v54[v6] + v7;
    uint64_t v37 = (char *)&v54[v6 + 1] + v7;
    int v38 = (long long *)(v9 + 16);
    int v39 = (uint64_t *)(v9 + (v12 & 0x1FFFFFFE0));
    for (uint64_t j = &v36[v12 & 0x1FFFFFFE0]; ; j += 32)
    {
      BOOL v41 = (char *)(v9 + v10 * v34);
      uint64_t v42 = &v8[32 * v34];
      if ((unint64_t)(&v19[32 * v34] - v41) >= 0x20)
      {
        BOOL v46 = v38;
        unint64_t v47 = v37;
        uint64_t v48 = v12 & 0x1FFFFFFE0;
        do
        {
          long long v49 = *v46;
          *(v47 - 1) = *(v46 - 1);
          *unint64_t v47 = v49;
          v47 += 2;
          v46 += 2;
          v48 -= 32;
        }
        while (v48);
        if (v12 == v35) {
          goto LABEL_34;
        }
        if ((v12 & 0x18) != 0)
        {
          v42 += v20;
          uint64_t v50 = j;
          uint64_t v51 = v39;
          unint64_t v52 = v20 - (v12 & 0x1FFFFFFE0);
          do
          {
            uint64_t v53 = *v51++;
            *(void *)uint64_t v50 = v53;
            v50 += 8;
            v52 -= 8;
          }
          while (v52);
          if (v12 == v20) {
            goto LABEL_34;
          }
          v41 += v20;
          int v43 = v12 & 0xFFFFFFF8;
        }
        else
        {
          v41 += v35;
          v42 += v35;
          int v43 = v12 & 0xFFFFFFE0;
        }
      }
      else
      {
        int v43 = 0;
      }
      unsigned int v44 = v43 + 1;
      do
      {
        char v45 = *v41++;
        *v42++ = v45;
        BOOL v33 = v11 > v44++;
      }
      while (v33);
LABEL_34:
      ++v34;
      v37 += 32;
      int v38 = (long long *)((char *)v38 + v10);
      int v39 = (uint64_t *)((char *)v39 + v10);
      if (v34 == v5) {
        return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock(v54, 32, *(void *)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
      }
    }
  }
  for (uint64_t k = 0; k != v5; ++k)
  {
    uint64_t v17 = 0;
    do
    {
      v8[v17] = *(unsigned char *)(v9 + v17);
      ++v17;
    }
    while (v11 > v17);
    v8 += 32;
    v9 += v10;
  }
  return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock(v54, 32, *(void *)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
}

unint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE4ELj1ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1, __n128 a2, int32x4_t a3, int32x4_t a4)
{
  uint64_t v55 = *MEMORY[0x263EF8340];
  AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressMacroblock((uint64_t)v54, *(void *)(a1 + 40), *(unsigned __int8 **)(a1 + 48), a2, a3, a4);
  uint64_t v5 = *(unsigned int *)(a1 + 80);
  if (!v5 || !*(_DWORD *)(a1 + 84)) {
    return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v54, 32, *(int8x16_t **)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
  }
  uint64_t v6 = 32 * *(unsigned int *)(a1 + 72);
  uint64_t v7 = 2 * *(unsigned int *)(a1 + 76);
  unsigned int v8 = &v54[v6 + v7];
  uint64_t v9 = *(void *)(a1 + 56);
  uint64_t v10 = *(void *)(a1 + 64);
  unint64_t v11 = 2 * *(unsigned int *)(a1 + 84);
  if (v11 <= 1) {
    unint64_t v12 = 1;
  }
  else {
    unint64_t v12 = 2 * *(unsigned int *)(a1 + 84);
  }
  if (v12 <= 7)
  {
    for (uint64_t i = 0; i != v5; ++i)
    {
      uint64_t v14 = 0;
      do
      {
        v8[v14] = *(unsigned char *)(v9 + v14);
        ++v14;
      }
      while (v11 > v14);
      v8 += 32;
      v9 += v10;
    }
    return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v54, 32, *(int8x16_t **)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
  }
  if (v12) {
    BOOL v15 = (v12 - 1) >> 32 == 0;
  }
  else {
    BOOL v15 = 0;
  }
  if (v15)
  {
    float64x2_t v19 = &v54[v6 + v7];
    uint64_t v20 = v12 & 0x1FFFFFFF8;
    if (v12 < 0x20)
    {
      uint64_t v21 = 0;
      float64x2_t v22 = &v54[v6 + v7];
      float64x2_t v23 = *(uint64_t **)(a1 + 56);
      while (1)
      {
        uint64_t v24 = (char *)(v9 + v10 * v21);
        unint64_t v25 = &v8[32 * v21];
        if ((unint64_t)(&v19[32 * v21] - v24) > 0x1F)
        {
          v25 += v20;
          uint64_t v27 = v22;
          uint64_t v28 = v23;
          uint64_t v29 = v12 & 0x1FFFFFFF8;
          do
          {
            uint64_t v30 = *v28++;
            *v27++ = v30;
            v29 -= 8;
          }
          while (v29);
          if (v12 == v20) {
            goto LABEL_23;
          }
          v24 += v20;
          int v26 = v12 & 0xFFFFFFF8;
        }
        else
        {
          int v26 = 0;
        }
        unsigned int v31 = v26 + 1;
        do
        {
          char v32 = *v24++;
          *v25++ = v32;
          BOOL v33 = v11 > v31++;
        }
        while (v33);
LABEL_23:
        ++v21;
        float64x2_t v23 = (uint64_t *)((char *)v23 + v10);
        v22 += 32;
        if (v21 == v5) {
          return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v54, 32, *(int8x16_t **)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
        }
      }
    }
    uint64_t v34 = 0;
    uint64_t v35 = v12 & 0x1FFFFFFE0;
    char v36 = &v54[v6 + v7];
    uint64_t v37 = &v54[v6 + 16 + v7];
    int v38 = (long long *)(v9 + 16);
    int v39 = (uint64_t *)(v9 + (v12 & 0x1FFFFFFE0));
    for (uint64_t j = &v36[v12 & 0x1FFFFFFE0]; ; j += 4)
    {
      BOOL v41 = (char *)(v9 + v10 * v34);
      uint64_t v42 = &v8[32 * v34];
      if ((unint64_t)(&v19[32 * v34] - v41) >= 0x20)
      {
        BOOL v46 = v38;
        unint64_t v47 = v37;
        uint64_t v48 = v12 & 0x1FFFFFFE0;
        do
        {
          long long v49 = *v46;
          *(v47 - 1) = *(v46 - 1);
          *unint64_t v47 = v49;
          v47 += 2;
          v46 += 2;
          v48 -= 32;
        }
        while (v48);
        if (v12 == v35) {
          goto LABEL_34;
        }
        if ((v12 & 0x18) != 0)
        {
          v42 += v20;
          uint64_t v50 = j;
          uint64_t v51 = v39;
          unint64_t v52 = v20 - (v12 & 0x1FFFFFFE0);
          do
          {
            uint64_t v53 = *v51++;
            *v50++ = v53;
            v52 -= 8;
          }
          while (v52);
          if (v12 == v20) {
            goto LABEL_34;
          }
          v41 += v20;
          int v43 = v12 & 0xFFFFFFF8;
        }
        else
        {
          v41 += v35;
          v42 += v35;
          int v43 = v12 & 0xFFFFFFE0;
        }
      }
      else
      {
        int v43 = 0;
      }
      unsigned int v44 = v43 + 1;
      do
      {
        char v45 = *v41++;
        *v42++ = v45;
        BOOL v33 = v11 > v44++;
      }
      while (v33);
LABEL_34:
      ++v34;
      v37 += 32;
      int v38 = (long long *)((char *)v38 + v10);
      int v39 = (uint64_t *)((char *)v39 + v10);
      if (v34 == v5) {
        return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v54, 32, *(int8x16_t **)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
      }
    }
  }
  for (uint64_t k = 0; k != v5; ++k)
  {
    uint64_t v17 = 0;
    do
    {
      v8[v17] = *(unsigned char *)(v9 + v17);
      ++v17;
    }
    while (v11 > v17);
    v8 += 32;
    v9 += v10;
  }
  return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v54, 32, *(int8x16_t **)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
}

float32x2x2_t *___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE4ELj1ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1, __n128 a2, int32x4_t a3, int32x4_t a4)
{
  uint64_t v55 = *MEMORY[0x263EF8340];
  AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressMacroblock((uint64_t)v54, *(void *)(a1 + 40), *(unsigned __int8 **)(a1 + 48), a2, a3, a4);
  uint64_t v5 = *(unsigned int *)(a1 + 80);
  if (!v5 || !*(_DWORD *)(a1 + 84)) {
    return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock(v54, 32, *(void *)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
  }
  uint64_t v6 = 2 * *(unsigned int *)(a1 + 72);
  uint64_t v7 = 2 * *(unsigned int *)(a1 + 76);
  unsigned int v8 = (char *)&v54[v6] + v7;
  uint64_t v9 = *(void *)(a1 + 56);
  uint64_t v10 = *(void *)(a1 + 64);
  unint64_t v11 = 2 * *(unsigned int *)(a1 + 84);
  if (v11 <= 1) {
    unint64_t v12 = 1;
  }
  else {
    unint64_t v12 = 2 * *(unsigned int *)(a1 + 84);
  }
  if (v12 <= 7)
  {
    for (uint64_t i = 0; i != v5; ++i)
    {
      uint64_t v14 = 0;
      do
      {
        v8[v14] = *(unsigned char *)(v9 + v14);
        ++v14;
      }
      while (v11 > v14);
      v8 += 32;
      v9 += v10;
    }
    return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock(v54, 32, *(void *)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
  }
  if (v12) {
    BOOL v15 = (v12 - 1) >> 32 == 0;
  }
  else {
    BOOL v15 = 0;
  }
  if (v15)
  {
    float64x2_t v19 = (char *)&v54[v6] + v7;
    uint64_t v20 = v12 & 0x1FFFFFFF8;
    if (v12 < 0x20)
    {
      uint64_t v21 = 0;
      float64x2_t v22 = (char *)&v54[v6] + v7;
      float64x2_t v23 = *(uint64_t **)(a1 + 56);
      while (1)
      {
        uint64_t v24 = (char *)(v9 + v10 * v21);
        unint64_t v25 = &v8[32 * v21];
        if ((unint64_t)(&v19[32 * v21] - v24) > 0x1F)
        {
          v25 += v20;
          uint64_t v27 = v22;
          uint64_t v28 = v23;
          uint64_t v29 = v12 & 0x1FFFFFFF8;
          do
          {
            uint64_t v30 = *v28++;
            *v27++ = v30;
            v29 -= 8;
          }
          while (v29);
          if (v12 == v20) {
            goto LABEL_23;
          }
          v24 += v20;
          int v26 = v12 & 0xFFFFFFF8;
        }
        else
        {
          int v26 = 0;
        }
        unsigned int v31 = v26 + 1;
        do
        {
          char v32 = *v24++;
          *v25++ = v32;
          BOOL v33 = v11 > v31++;
        }
        while (v33);
LABEL_23:
        ++v21;
        float64x2_t v23 = (uint64_t *)((char *)v23 + v10);
        v22 += 32;
        if (v21 == v5) {
          return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock(v54, 32, *(void *)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
        }
      }
    }
    uint64_t v34 = 0;
    uint64_t v35 = v12 & 0x1FFFFFFE0;
    char v36 = (char *)&v54[v6] + v7;
    uint64_t v37 = (char *)&v54[v6 + 1] + v7;
    int v38 = (long long *)(v9 + 16);
    int v39 = (uint64_t *)(v9 + (v12 & 0x1FFFFFFE0));
    for (uint64_t j = &v36[v12 & 0x1FFFFFFE0]; ; j += 32)
    {
      BOOL v41 = (char *)(v9 + v10 * v34);
      uint64_t v42 = &v8[32 * v34];
      if ((unint64_t)(&v19[32 * v34] - v41) >= 0x20)
      {
        BOOL v46 = v38;
        unint64_t v47 = v37;
        uint64_t v48 = v12 & 0x1FFFFFFE0;
        do
        {
          long long v49 = *v46;
          *(v47 - 1) = *(v46 - 1);
          *unint64_t v47 = v49;
          v47 += 2;
          v46 += 2;
          v48 -= 32;
        }
        while (v48);
        if (v12 == v35) {
          goto LABEL_34;
        }
        if ((v12 & 0x18) != 0)
        {
          v42 += v20;
          uint64_t v50 = j;
          uint64_t v51 = v39;
          unint64_t v52 = v20 - (v12 & 0x1FFFFFFE0);
          do
          {
            uint64_t v53 = *v51++;
            *(void *)uint64_t v50 = v53;
            v50 += 8;
            v52 -= 8;
          }
          while (v52);
          if (v12 == v20) {
            goto LABEL_34;
          }
          v41 += v20;
          int v43 = v12 & 0xFFFFFFF8;
        }
        else
        {
          v41 += v35;
          v42 += v35;
          int v43 = v12 & 0xFFFFFFE0;
        }
      }
      else
      {
        int v43 = 0;
      }
      unsigned int v44 = v43 + 1;
      do
      {
        char v45 = *v41++;
        *v42++ = v45;
        BOOL v33 = v11 > v44++;
      }
      while (v33);
LABEL_34:
      ++v34;
      v37 += 32;
      int v38 = (long long *)((char *)v38 + v10);
      int v39 = (uint64_t *)((char *)v39 + v10);
      if (v34 == v5) {
        return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock(v54, 32, *(void *)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
      }
    }
  }
  for (uint64_t k = 0; k != v5; ++k)
  {
    uint64_t v17 = 0;
    do
    {
      v8[v17] = *(unsigned char *)(v9 + v17);
      ++v17;
    }
    while (v11 > v17);
    v8 += 32;
    v9 += v10;
  }
  return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock(v54, 32, *(void *)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
}

unint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE4ELj1ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1, __n128 a2, int32x4_t a3, int32x4_t a4)
{
  uint64_t v55 = *MEMORY[0x263EF8340];
  AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressMacroblock((uint64_t)v54, *(void *)(a1 + 40), *(unsigned __int8 **)(a1 + 48), a2, a3, a4);
  uint64_t v5 = *(unsigned int *)(a1 + 80);
  if (!v5 || !*(_DWORD *)(a1 + 84)) {
    return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v54, 32, *(int8x16_t **)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
  }
  uint64_t v6 = 32 * *(unsigned int *)(a1 + 72);
  uint64_t v7 = 2 * *(unsigned int *)(a1 + 76);
  unsigned int v8 = &v54[v6 + v7];
  uint64_t v9 = *(void *)(a1 + 56);
  uint64_t v10 = *(void *)(a1 + 64);
  unint64_t v11 = 2 * *(unsigned int *)(a1 + 84);
  if (v11 <= 1) {
    unint64_t v12 = 1;
  }
  else {
    unint64_t v12 = 2 * *(unsigned int *)(a1 + 84);
  }
  if (v12 <= 7)
  {
    for (uint64_t i = 0; i != v5; ++i)
    {
      uint64_t v14 = 0;
      do
      {
        v8[v14] = *(unsigned char *)(v9 + v14);
        ++v14;
      }
      while (v11 > v14);
      v8 += 32;
      v9 += v10;
    }
    return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v54, 32, *(int8x16_t **)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
  }
  if (v12) {
    BOOL v15 = (v12 - 1) >> 32 == 0;
  }
  else {
    BOOL v15 = 0;
  }
  if (v15)
  {
    float64x2_t v19 = &v54[v6 + v7];
    uint64_t v20 = v12 & 0x1FFFFFFF8;
    if (v12 < 0x20)
    {
      uint64_t v21 = 0;
      float64x2_t v22 = &v54[v6 + v7];
      float64x2_t v23 = *(uint64_t **)(a1 + 56);
      while (1)
      {
        uint64_t v24 = (char *)(v9 + v10 * v21);
        unint64_t v25 = &v8[32 * v21];
        if ((unint64_t)(&v19[32 * v21] - v24) > 0x1F)
        {
          v25 += v20;
          uint64_t v27 = v22;
          uint64_t v28 = v23;
          uint64_t v29 = v12 & 0x1FFFFFFF8;
          do
          {
            uint64_t v30 = *v28++;
            *v27++ = v30;
            v29 -= 8;
          }
          while (v29);
          if (v12 == v20) {
            goto LABEL_23;
          }
          v24 += v20;
          int v26 = v12 & 0xFFFFFFF8;
        }
        else
        {
          int v26 = 0;
        }
        unsigned int v31 = v26 + 1;
        do
        {
          char v32 = *v24++;
          *v25++ = v32;
          BOOL v33 = v11 > v31++;
        }
        while (v33);
LABEL_23:
        ++v21;
        float64x2_t v23 = (uint64_t *)((char *)v23 + v10);
        v22 += 32;
        if (v21 == v5) {
          return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v54, 32, *(int8x16_t **)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
        }
      }
    }
    uint64_t v34 = 0;
    uint64_t v35 = v12 & 0x1FFFFFFE0;
    char v36 = &v54[v6 + v7];
    uint64_t v37 = &v54[v6 + 16 + v7];
    int v38 = (long long *)(v9 + 16);
    int v39 = (uint64_t *)(v9 + (v12 & 0x1FFFFFFE0));
    for (uint64_t j = &v36[v12 & 0x1FFFFFFE0]; ; j += 4)
    {
      BOOL v41 = (char *)(v9 + v10 * v34);
      uint64_t v42 = &v8[32 * v34];
      if ((unint64_t)(&v19[32 * v34] - v41) >= 0x20)
      {
        BOOL v46 = v38;
        unint64_t v47 = v37;
        uint64_t v48 = v12 & 0x1FFFFFFE0;
        do
        {
          long long v49 = *v46;
          *(v47 - 1) = *(v46 - 1);
          *unint64_t v47 = v49;
          v47 += 2;
          v46 += 2;
          v48 -= 32;
        }
        while (v48);
        if (v12 == v35) {
          goto LABEL_34;
        }
        if ((v12 & 0x18) != 0)
        {
          v42 += v20;
          uint64_t v50 = j;
          uint64_t v51 = v39;
          unint64_t v52 = v20 - (v12 & 0x1FFFFFFE0);
          do
          {
            uint64_t v53 = *v51++;
            *v50++ = v53;
            v52 -= 8;
          }
          while (v52);
          if (v12 == v20) {
            goto LABEL_34;
          }
          v41 += v20;
          int v43 = v12 & 0xFFFFFFF8;
        }
        else
        {
          v41 += v35;
          v42 += v35;
          int v43 = v12 & 0xFFFFFFE0;
        }
      }
      else
      {
        int v43 = 0;
      }
      unsigned int v44 = v43 + 1;
      do
      {
        char v45 = *v41++;
        *v42++ = v45;
        BOOL v33 = v11 > v44++;
      }
      while (v33);
LABEL_34:
      ++v34;
      v37 += 32;
      int v38 = (long long *)((char *)v38 + v10);
      int v39 = (uint64_t *)((char *)v39 + v10);
      if (v34 == v5) {
        return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v54, 32, *(int8x16_t **)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
      }
    }
  }
  for (uint64_t k = 0; k != v5; ++k)
  {
    uint64_t v17 = 0;
    do
    {
      v8[v17] = *(unsigned char *)(v9 + v17);
      ++v17;
    }
    while (v11 > v17);
    v8 += 32;
    v9 += v10;
  }
  return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v54, 32, *(int8x16_t **)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE17ELj1ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1, int8x8_t a2)
{
  uint64_t v79 = *MEMORY[0x263EF8340];
  AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressMacroblock(v78, *(void *)(a1 + 40), *(unsigned __int8 **)(a1 + 48), a2);
  uint64_t v3 = *(unsigned int *)(a1 + 80);
  if (v3 && *(_DWORD *)(a1 + 84))
  {
    unint64_t v4 = (unint64_t)*(unsigned int *)(a1 + 72) << 7;
    uint64_t v5 = 8 * *(unsigned int *)(a1 + 76);
    uint64_t v6 = (char *)v78 + v4 + v5;
    uint64_t v7 = *(void *)(a1 + 56);
    uint64_t v8 = *(void *)(a1 + 64);
    unint64_t v9 = 8 * *(unsigned int *)(a1 + 84);
    if (v9 <= 1) {
      unint64_t v10 = 1;
    }
    else {
      unint64_t v10 = 8 * *(unsigned int *)(a1 + 84);
    }
    if (v10) {
      BOOL v11 = (v10 - 1) >> 32 == 0;
    }
    else {
      BOOL v11 = 0;
    }
    if (!v11)
    {
      for (uint64_t i = 0; i != v3; ++i)
      {
        uint64_t v13 = 0;
        do
        {
          v6[v13] = *(unsigned char *)(v7 + v13);
          ++v13;
        }
        while (v9 > v13);
        v6 += 128;
        v7 += v8;
      }
      goto LABEL_14;
    }
    int v43 = (char *)v78 + v4 + v5;
    uint64_t v44 = v10 & 0x7FFFFFFF8;
    if (v10 < 0x20)
    {
      uint64_t v45 = 0;
      BOOL v46 = (char *)v78 + v4 + v5;
      unint64_t v47 = *(uint64_t **)(a1 + 56);
      while (1)
      {
        uint64_t v48 = (char *)(v7 + v8 * v45);
        long long v49 = &v6[128 * v45];
        if ((unint64_t)(&v43[128 * v45] - v48) > 0x1F)
        {
          v49 += v44;
          uint64_t v51 = v46;
          unint64_t v52 = v47;
          uint64_t v53 = v10 & 0x7FFFFFFF8;
          do
          {
            uint64_t v54 = *v52++;
            *v51++ = v54;
            v53 -= 8;
          }
          while (v53);
          if (v10 == v44) {
            goto LABEL_30;
          }
          v48 += v44;
          int v50 = v10 & 0xFFFFFFF8;
        }
        else
        {
          int v50 = 0;
        }
        unsigned int v55 = v50 + 1;
        do
        {
          char v56 = *v48++;
          *v49++ = v56;
          BOOL v57 = v9 > v55++;
        }
        while (v57);
LABEL_30:
        ++v45;
        unint64_t v47 = (uint64_t *)((char *)v47 + v8);
        v46 += 128;
        if (v45 == v3) {
          goto LABEL_14;
        }
      }
    }
    uint64_t v58 = 0;
    uint64_t v59 = v10 & 0x7FFFFFFE0;
    unsigned int v60 = (char *)v78 + v4 + v5;
    char v61 = (char *)&v78[1] + v4 + v5;
    uint64_t v62 = (long long *)(v7 + 16);
    int v63 = (uint64_t *)(v7 + (v10 & 0x7FFFFFFE0));
    uint64_t v64 = &v60[v10 & 0x7FFFFFFE0];
    do
    {
      long long v65 = (char *)(v7 + v8 * v58);
      int v66 = &v6[128 * v58];
      if ((unint64_t)(&v43[128 * v58] - v65) >= 0x20)
      {
        unsigned int v70 = v62;
        uint64_t v71 = v61;
        uint64_t v72 = v10 & 0x7FFFFFFE0;
        do
        {
          long long v73 = *v70;
          *(v71 - 1) = *(v70 - 1);
          *uint64_t v71 = v73;
          v71 += 2;
          v70 += 2;
          v72 -= 32;
        }
        while (v72);
        if (v10 == v59) {
          goto LABEL_41;
        }
        if ((v10 & 0x18) != 0)
        {
          v66 += v44;
          unsigned int v74 = v64;
          unint64_t v75 = v63;
          unint64_t v76 = v44 - (v10 & 0x7FFFFFFE0);
          do
          {
            uint64_t v77 = *v75++;
            *(void *)unsigned int v74 = v77;
            v74 += 8;
            v76 -= 8;
          }
          while (v76);
          if (v10 == v44) {
            goto LABEL_41;
          }
          v65 += v44;
          int v67 = v10 & 0xFFFFFFF8;
        }
        else
        {
          v65 += v59;
          v66 += v59;
          int v67 = v10 & 0xFFFFFFE0;
        }
      }
      else
      {
        int v67 = 0;
      }
      unsigned int v68 = v67 + 1;
      do
      {
        char v69 = *v65++;
        *v66++ = v69;
        BOOL v57 = v9 > v68++;
      }
      while (v57);
LABEL_41:
      ++v58;
      v61 += 128;
      uint64_t v62 = (long long *)((char *)v62 + v8);
      int v63 = (uint64_t *)((char *)v63 + v8);
      v64 += 128;
    }
    while (v58 != v3);
  }
LABEL_14:
  uint64_t v14 = 0;
  BOOL v15 = *(float64x2_t **)(a1 + 40);
  float64x2_t v16 = *(char **)(a1 + 48);
  int v17 = *(unsigned __int8 *)(a1 + 88);
  int v18 = *(unsigned __int8 *)(a1 + 89);
  do
  {
    uint64_t v38 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,1u>::kSubblockPositions[v14 + 1];
    uint64_t v39 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,1u>::kSubblockPositions[v14];
    LODWORD(result) = (v17 - 8 * v39) & ~((v17 - 8 * (int)v39) >> 31);
    if (result >= 8) {
      uint64_t result = 8;
    }
    else {
      uint64_t result = result;
    }
    unsigned int v41 = (v18 - 4 * v38) & ~((v18 - 4 * (int)v38) >> 31);
    if (v41 >= 4) {
      unsigned int v41 = 4;
    }
    if (result) {
      BOOL v42 = v41 == 0;
    }
    else {
      BOOL v42 = 1;
    }
    if (v42)
    {
      char v37 = 0;
    }
    else
    {
      float64x2_t v19 = &v78[32 * v38 + 4 * v39];
      float64x2_t v20 = v19[2];
      float64x2_t v21 = v19[10];
      float64x2_t v22 = v19[3];
      float64x2_t v23 = v19[11];
      float64x2_t v24 = *v19;
      float64x2_t v25 = v19[8];
      float64x2_t v26 = v19[1];
      float64x2_t v27 = v19[16];
      float64x2_t v28 = v19[17];
      float64x2_t v29 = v19[18];
      float64x2_t v30 = v19[19];
      float64x2_t v31 = v19[9];
      v19 += 24;
      float64x2_t v32 = v19[1];
      float64x2_t v33 = v19[2];
      float64x2_t v34 = v19[3];
      float64x2_t v35 = *v19;
      *BOOL v15 = v24;
      v15[1] = v25;
      v15[2] = v26;
      v15[3] = v31;
      v15[4] = v27;
      v15[5] = v35;
      v15[6] = v28;
      v15[7] = v32;
      v15[8] = v20;
      v15[9] = v21;
      v15[10] = v22;
      v15[11] = v23;
      char v36 = v15 + 12;
      v15 += 16;
      char v37 = -1;
      *char v36 = v29;
      v36[1] = v33;
      v36[2] = v30;
      v36[3] = v34;
    }
    *v16++ = v37;
    v14 += 2;
  }
  while (v14 != 16);
  return result;
}

unint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE17ELj1ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1, int8x8_t a2)
{
  uint64_t v51 = *MEMORY[0x263EF8340];
  AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressMacroblock(v50, *(void *)(a1 + 40), *(unsigned __int8 **)(a1 + 48), a2);
  uint64_t v3 = *(unsigned int *)(a1 + 80);
  if (!v3 || !*(_DWORD *)(a1 + 84)) {
    return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v50, 128, *(void *)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
  }
  unint64_t v4 = (unint64_t)*(unsigned int *)(a1 + 72) << 7;
  uint64_t v5 = 8 * *(unsigned int *)(a1 + 76);
  uint64_t v6 = (char *)v50 + v4 + v5;
  uint64_t v7 = *(void *)(a1 + 56);
  uint64_t v8 = *(void *)(a1 + 64);
  unint64_t v9 = 8 * *(unsigned int *)(a1 + 84);
  if (v9 <= 1) {
    unint64_t v10 = 1;
  }
  else {
    unint64_t v10 = 8 * *(unsigned int *)(a1 + 84);
  }
  if (v10) {
    BOOL v11 = (v10 - 1) >> 32 == 0;
  }
  else {
    BOOL v11 = 0;
  }
  if (v11)
  {
    BOOL v15 = (char *)v50 + v4 + v5;
    uint64_t v16 = v10 & 0x7FFFFFFF8;
    if (v10 < 0x20)
    {
      uint64_t v17 = 0;
      int v18 = (char *)v50 + v4 + v5;
      float64x2_t v19 = *(uint64_t **)(a1 + 56);
      while (1)
      {
        float64x2_t v20 = (char *)(v7 + v8 * v17);
        float64x2_t v21 = &v6[128 * v17];
        if ((unint64_t)(&v15[128 * v17] - v20) > 0x1F)
        {
          v21 += v16;
          float64x2_t v23 = v18;
          float64x2_t v24 = v19;
          uint64_t v25 = v10 & 0x7FFFFFFF8;
          do
          {
            uint64_t v26 = *v24++;
            *v23++ = v26;
            v25 -= 8;
          }
          while (v25);
          if (v10 == v16) {
            goto LABEL_17;
          }
          v20 += v16;
          int v22 = v10 & 0xFFFFFFF8;
        }
        else
        {
          int v22 = 0;
        }
        unsigned int v27 = v22 + 1;
        do
        {
          char v28 = *v20++;
          *v21++ = v28;
          BOOL v29 = v9 > v27++;
        }
        while (v29);
LABEL_17:
        ++v17;
        float64x2_t v19 = (uint64_t *)((char *)v19 + v8);
        v18 += 128;
        if (v17 == v3) {
          return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v50, 128, *(void *)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
        }
      }
    }
    uint64_t v30 = 0;
    uint64_t v31 = v10 & 0x7FFFFFFE0;
    float64x2_t v32 = (char *)v50 + v4 + v5;
    float64x2_t v33 = (char *)&v50[1] + v4 + v5;
    float64x2_t v34 = (long long *)(v7 + 16);
    float64x2_t v35 = (uint64_t *)(v7 + (v10 & 0x7FFFFFFE0));
    for (uint64_t i = &v32[v10 & 0x7FFFFFFE0]; ; i += 128)
    {
      char v37 = (char *)(v7 + v8 * v30);
      uint64_t v38 = &v6[128 * v30];
      if ((unint64_t)(&v15[128 * v30] - v37) >= 0x20)
      {
        BOOL v42 = v34;
        int v43 = v33;
        uint64_t v44 = v10 & 0x7FFFFFFE0;
        do
        {
          long long v45 = *v42;
          *(v43 - 1) = *(v42 - 1);
          *int v43 = v45;
          v43 += 2;
          v42 += 2;
          v44 -= 32;
        }
        while (v44);
        if (v10 == v31) {
          goto LABEL_28;
        }
        if ((v10 & 0x18) != 0)
        {
          v38 += v16;
          BOOL v46 = i;
          unint64_t v47 = v35;
          unint64_t v48 = v16 - (v10 & 0x7FFFFFFE0);
          do
          {
            uint64_t v49 = *v47++;
            *(void *)BOOL v46 = v49;
            v46 += 8;
            v48 -= 8;
          }
          while (v48);
          if (v10 == v16) {
            goto LABEL_28;
          }
          v37 += v16;
          int v39 = v10 & 0xFFFFFFF8;
        }
        else
        {
          v37 += v31;
          v38 += v31;
          int v39 = v10 & 0xFFFFFFE0;
        }
      }
      else
      {
        int v39 = 0;
      }
      unsigned int v40 = v39 + 1;
      do
      {
        char v41 = *v37++;
        *v38++ = v41;
        BOOL v29 = v9 > v40++;
      }
      while (v29);
LABEL_28:
      ++v30;
      v33 += 128;
      float64x2_t v34 = (long long *)((char *)v34 + v8);
      float64x2_t v35 = (uint64_t *)((char *)v35 + v8);
      if (v30 == v3) {
        return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v50, 128, *(void *)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
      }
    }
  }
  for (uint64_t j = 0; j != v3; ++j)
  {
    uint64_t v13 = 0;
    do
    {
      v6[v13] = *(unsigned char *)(v7 + v13);
      ++v13;
    }
    while (v9 > v13);
    v6 += 128;
    v7 += v8;
  }
  return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v50, 128, *(void *)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE17ELj1ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1, int8x8_t a2)
{
  uint64_t v79 = *MEMORY[0x263EF8340];
  AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressMacroblock(v78, *(void *)(a1 + 40), *(unsigned __int8 **)(a1 + 48), a2);
  uint64_t v3 = *(unsigned int *)(a1 + 80);
  if (v3 && *(_DWORD *)(a1 + 84))
  {
    unint64_t v4 = (unint64_t)*(unsigned int *)(a1 + 72) << 7;
    uint64_t v5 = 8 * *(unsigned int *)(a1 + 76);
    uint64_t v6 = (char *)v78 + v4 + v5;
    uint64_t v7 = *(void *)(a1 + 56);
    uint64_t v8 = *(void *)(a1 + 64);
    unint64_t v9 = 8 * *(unsigned int *)(a1 + 84);
    if (v9 <= 1) {
      unint64_t v10 = 1;
    }
    else {
      unint64_t v10 = 8 * *(unsigned int *)(a1 + 84);
    }
    if (v10) {
      BOOL v11 = (v10 - 1) >> 32 == 0;
    }
    else {
      BOOL v11 = 0;
    }
    if (!v11)
    {
      for (uint64_t i = 0; i != v3; ++i)
      {
        uint64_t v13 = 0;
        do
        {
          v6[v13] = *(unsigned char *)(v7 + v13);
          ++v13;
        }
        while (v9 > v13);
        v6 += 128;
        v7 += v8;
      }
      goto LABEL_14;
    }
    int v43 = (char *)v78 + v4 + v5;
    uint64_t v44 = v10 & 0x7FFFFFFF8;
    if (v10 < 0x20)
    {
      uint64_t v45 = 0;
      BOOL v46 = (char *)v78 + v4 + v5;
      unint64_t v47 = *(uint64_t **)(a1 + 56);
      while (1)
      {
        unint64_t v48 = (char *)(v7 + v8 * v45);
        uint64_t v49 = &v6[128 * v45];
        if ((unint64_t)(&v43[128 * v45] - v48) > 0x1F)
        {
          v49 += v44;
          uint64_t v51 = v46;
          unint64_t v52 = v47;
          uint64_t v53 = v10 & 0x7FFFFFFF8;
          do
          {
            uint64_t v54 = *v52++;
            *v51++ = v54;
            v53 -= 8;
          }
          while (v53);
          if (v10 == v44) {
            goto LABEL_30;
          }
          v48 += v44;
          int v50 = v10 & 0xFFFFFFF8;
        }
        else
        {
          int v50 = 0;
        }
        unsigned int v55 = v50 + 1;
        do
        {
          char v56 = *v48++;
          *v49++ = v56;
          BOOL v57 = v9 > v55++;
        }
        while (v57);
LABEL_30:
        ++v45;
        unint64_t v47 = (uint64_t *)((char *)v47 + v8);
        v46 += 128;
        if (v45 == v3) {
          goto LABEL_14;
        }
      }
    }
    uint64_t v58 = 0;
    uint64_t v59 = v10 & 0x7FFFFFFE0;
    unsigned int v60 = (char *)v78 + v4 + v5;
    char v61 = (char *)&v78[1] + v4 + v5;
    uint64_t v62 = (long long *)(v7 + 16);
    int v63 = (uint64_t *)(v7 + (v10 & 0x7FFFFFFE0));
    uint64_t v64 = &v60[v10 & 0x7FFFFFFE0];
    do
    {
      long long v65 = (char *)(v7 + v8 * v58);
      int v66 = &v6[128 * v58];
      if ((unint64_t)(&v43[128 * v58] - v65) >= 0x20)
      {
        unsigned int v70 = v62;
        uint64_t v71 = v61;
        uint64_t v72 = v10 & 0x7FFFFFFE0;
        do
        {
          long long v73 = *v70;
          *(v71 - 1) = *(v70 - 1);
          *uint64_t v71 = v73;
          v71 += 2;
          v70 += 2;
          v72 -= 32;
        }
        while (v72);
        if (v10 == v59) {
          goto LABEL_41;
        }
        if ((v10 & 0x18) != 0)
        {
          v66 += v44;
          unsigned int v74 = v64;
          unint64_t v75 = v63;
          unint64_t v76 = v44 - (v10 & 0x7FFFFFFE0);
          do
          {
            uint64_t v77 = *v75++;
            *(void *)unsigned int v74 = v77;
            v74 += 8;
            v76 -= 8;
          }
          while (v76);
          if (v10 == v44) {
            goto LABEL_41;
          }
          v65 += v44;
          int v67 = v10 & 0xFFFFFFF8;
        }
        else
        {
          v65 += v59;
          v66 += v59;
          int v67 = v10 & 0xFFFFFFE0;
        }
      }
      else
      {
        int v67 = 0;
      }
      unsigned int v68 = v67 + 1;
      do
      {
        char v69 = *v65++;
        *v66++ = v69;
        BOOL v57 = v9 > v68++;
      }
      while (v57);
LABEL_41:
      ++v58;
      v61 += 128;
      uint64_t v62 = (long long *)((char *)v62 + v8);
      int v63 = (uint64_t *)((char *)v63 + v8);
      v64 += 128;
    }
    while (v58 != v3);
  }
LABEL_14:
  uint64_t v14 = 0;
  BOOL v15 = *(float64x2_t **)(a1 + 40);
  uint64_t v16 = *(char **)(a1 + 48);
  int v17 = *(unsigned __int8 *)(a1 + 88);
  int v18 = *(unsigned __int8 *)(a1 + 89);
  do
  {
    uint64_t v38 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,1u>::kSubblockPositions[v14 + 1];
    uint64_t v39 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,1u>::kSubblockPositions[v14];
    LODWORD(result) = (v17 - 8 * v39) & ~((v17 - 8 * (int)v39) >> 31);
    if (result >= 8) {
      uint64_t result = 8;
    }
    else {
      uint64_t result = result;
    }
    unsigned int v41 = (v18 - 4 * v38) & ~((v18 - 4 * (int)v38) >> 31);
    if (v41 >= 4) {
      unsigned int v41 = 4;
    }
    if (result) {
      BOOL v42 = v41 == 0;
    }
    else {
      BOOL v42 = 1;
    }
    if (v42)
    {
      char v37 = 0;
    }
    else
    {
      float64x2_t v19 = &v78[32 * v38 + 4 * v39];
      float64x2_t v20 = v19[2];
      float64x2_t v21 = v19[10];
      float64x2_t v22 = v19[3];
      float64x2_t v23 = v19[11];
      float64x2_t v24 = *v19;
      float64x2_t v25 = v19[8];
      float64x2_t v26 = v19[1];
      float64x2_t v27 = v19[16];
      float64x2_t v28 = v19[17];
      float64x2_t v29 = v19[18];
      float64x2_t v30 = v19[19];
      float64x2_t v31 = v19[9];
      v19 += 24;
      float64x2_t v32 = v19[1];
      float64x2_t v33 = v19[2];
      float64x2_t v34 = v19[3];
      float64x2_t v35 = *v19;
      *BOOL v15 = v24;
      v15[1] = v25;
      v15[2] = v26;
      v15[3] = v31;
      v15[4] = v27;
      v15[5] = v35;
      v15[6] = v28;
      v15[7] = v32;
      v15[8] = v20;
      v15[9] = v21;
      v15[10] = v22;
      v15[11] = v23;
      char v36 = v15 + 12;
      v15 += 16;
      char v37 = -1;
      *char v36 = v29;
      v36[1] = v33;
      v36[2] = v30;
      v36[3] = v34;
    }
    *v16++ = v37;
    v14 += 2;
  }
  while (v14 != 16);
  return result;
}

unint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE17ELj1ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1, int8x8_t a2)
{
  uint64_t v51 = *MEMORY[0x263EF8340];
  AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressMacroblock(v50, *(void *)(a1 + 40), *(unsigned __int8 **)(a1 + 48), a2);
  uint64_t v3 = *(unsigned int *)(a1 + 80);
  if (!v3 || !*(_DWORD *)(a1 + 84)) {
    return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v50, 128, *(void *)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
  }
  unint64_t v4 = (unint64_t)*(unsigned int *)(a1 + 72) << 7;
  uint64_t v5 = 8 * *(unsigned int *)(a1 + 76);
  uint64_t v6 = (char *)v50 + v4 + v5;
  uint64_t v7 = *(void *)(a1 + 56);
  uint64_t v8 = *(void *)(a1 + 64);
  unint64_t v9 = 8 * *(unsigned int *)(a1 + 84);
  if (v9 <= 1) {
    unint64_t v10 = 1;
  }
  else {
    unint64_t v10 = 8 * *(unsigned int *)(a1 + 84);
  }
  if (v10) {
    BOOL v11 = (v10 - 1) >> 32 == 0;
  }
  else {
    BOOL v11 = 0;
  }
  if (v11)
  {
    BOOL v15 = (char *)v50 + v4 + v5;
    uint64_t v16 = v10 & 0x7FFFFFFF8;
    if (v10 < 0x20)
    {
      uint64_t v17 = 0;
      int v18 = (char *)v50 + v4 + v5;
      float64x2_t v19 = *(uint64_t **)(a1 + 56);
      while (1)
      {
        float64x2_t v20 = (char *)(v7 + v8 * v17);
        float64x2_t v21 = &v6[128 * v17];
        if ((unint64_t)(&v15[128 * v17] - v20) > 0x1F)
        {
          v21 += v16;
          float64x2_t v23 = v18;
          float64x2_t v24 = v19;
          uint64_t v25 = v10 & 0x7FFFFFFF8;
          do
          {
            uint64_t v26 = *v24++;
            *v23++ = v26;
            v25 -= 8;
          }
          while (v25);
          if (v10 == v16) {
            goto LABEL_17;
          }
          v20 += v16;
          int v22 = v10 & 0xFFFFFFF8;
        }
        else
        {
          int v22 = 0;
        }
        unsigned int v27 = v22 + 1;
        do
        {
          char v28 = *v20++;
          *v21++ = v28;
          BOOL v29 = v9 > v27++;
        }
        while (v29);
LABEL_17:
        ++v17;
        float64x2_t v19 = (uint64_t *)((char *)v19 + v8);
        v18 += 128;
        if (v17 == v3) {
          return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v50, 128, *(void *)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
        }
      }
    }
    uint64_t v30 = 0;
    uint64_t v31 = v10 & 0x7FFFFFFE0;
    float64x2_t v32 = (char *)v50 + v4 + v5;
    float64x2_t v33 = (char *)&v50[1] + v4 + v5;
    float64x2_t v34 = (long long *)(v7 + 16);
    float64x2_t v35 = (uint64_t *)(v7 + (v10 & 0x7FFFFFFE0));
    for (uint64_t i = &v32[v10 & 0x7FFFFFFE0]; ; i += 128)
    {
      char v37 = (char *)(v7 + v8 * v30);
      uint64_t v38 = &v6[128 * v30];
      if ((unint64_t)(&v15[128 * v30] - v37) >= 0x20)
      {
        BOOL v42 = v34;
        int v43 = v33;
        uint64_t v44 = v10 & 0x7FFFFFFE0;
        do
        {
          long long v45 = *v42;
          *(v43 - 1) = *(v42 - 1);
          *int v43 = v45;
          v43 += 2;
          v42 += 2;
          v44 -= 32;
        }
        while (v44);
        if (v10 == v31) {
          goto LABEL_28;
        }
        if ((v10 & 0x18) != 0)
        {
          v38 += v16;
          BOOL v46 = i;
          unint64_t v47 = v35;
          unint64_t v48 = v16 - (v10 & 0x7FFFFFFE0);
          do
          {
            uint64_t v49 = *v47++;
            *(void *)BOOL v46 = v49;
            v46 += 8;
            v48 -= 8;
          }
          while (v48);
          if (v10 == v16) {
            goto LABEL_28;
          }
          v37 += v16;
          int v39 = v10 & 0xFFFFFFF8;
        }
        else
        {
          v37 += v31;
          v38 += v31;
          int v39 = v10 & 0xFFFFFFE0;
        }
      }
      else
      {
        int v39 = 0;
      }
      unsigned int v40 = v39 + 1;
      do
      {
        char v41 = *v37++;
        *v38++ = v41;
        BOOL v29 = v9 > v40++;
      }
      while (v29);
LABEL_28:
      ++v30;
      v33 += 128;
      float64x2_t v34 = (long long *)((char *)v34 + v8);
      float64x2_t v35 = (uint64_t *)((char *)v35 + v8);
      if (v30 == v3) {
        return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v50, 128, *(void *)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
      }
    }
  }
  for (uint64_t j = 0; j != v3; ++j)
  {
    uint64_t v13 = 0;
    do
    {
      v6[v13] = *(unsigned char *)(v7 + v13);
      ++v13;
    }
    while (v9 > v13);
    v6 += 128;
    v7 += v8;
  }
  return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v50, 128, *(void *)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE11ELj1ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1, int32x4_t a2, int32x4_t a3)
{
  uint64_t v4 = 0;
  uint64_t v90 = *MEMORY[0x263EF8340];
  uint64_t v5 = *(void *)(a1 + 40);
  uint64_t v6 = *(unsigned char **)(a1 + 48);
  do
  {
    uint64_t v8 = (int64x2_t *)&v89[256
                         * (unint64_t)AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,1u>::kSubblockPositions[v4 + 1]
                         + 32
                         * AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,1u>::kSubblockPositions[v4]];
    unsigned int v9 = *v6;
    if (v9 == 127)
    {
      int64x2_t v10 = *(int64x2_t *)v5;
      int64x2_t v11 = *(int64x2_t *)(v5 + 16);
      int64x2_t v12 = *(int64x2_t *)(v5 + 32);
      int64x2_t v13 = *(int64x2_t *)(v5 + 48);
      int64x2_t v14 = *(int64x2_t *)(v5 + 64);
      int64x2_t v15 = *(int64x2_t *)(v5 + 80);
      int64x2_t v16 = *(int64x2_t *)(v5 + 96);
      int64x2_t v17 = *(int64x2_t *)(v5 + 112);
      *uint64_t v8 = vzip1q_s64(*(int64x2_t *)v5, v11);
      v8[1] = vzip1q_s64(v14, v15);
      v8[4] = vzip2q_s64(v10, v11);
      v8[5] = vzip2q_s64(v14, v15);
      v8[8] = vzip1q_s64(v12, v13);
      v8[9] = vzip1q_s64(v16, v17);
      a2 = (int32x4_t)vzip2q_s64(v12, v13);
      a3 = (int32x4_t)vzip2q_s64(v16, v17);
      v8[12] = (int64x2_t)a2;
      v8[13] = (int64x2_t)a3;
      uint64_t v7 = 128;
    }
    else if (v9 == 3)
    {
      a2 = (int32x4_t)vld1q_dup_f32((const float *)v5);
      *uint64_t v8 = (int64x2_t)a2;
      v8[1] = (int64x2_t)a2;
      v8[4] = (int64x2_t)a2;
      v8[5] = (int64x2_t)a2;
      v8[8] = (int64x2_t)a2;
      v8[9] = (int64x2_t)a2;
      v8[12] = (int64x2_t)a2;
      v8[13] = (int64x2_t)a2;
      uint64_t v7 = 4;
    }
    else if (*v6)
    {
      uint64_t v7 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v8, 64, v5, v9, a2, a3);
    }
    else
    {
      uint64_t v7 = 0;
      a2 = 0uLL;
      *uint64_t v8 = 0u;
      v8[1] = 0u;
      v8[4] = 0u;
      v8[5] = 0u;
      v8[8] = 0u;
      v8[9] = 0u;
      v8[12] = 0u;
      v8[13] = 0u;
    }
    v5 += v7;
    ++v6;
    v4 += 2;
  }
  while (v4 != 16);
  uint64_t v18 = *(unsigned int *)(a1 + 80);
  if (!v18 || !*(_DWORD *)(a1 + 84)) {
    goto LABEL_39;
  }
  unint64_t v19 = (unint64_t)*(unsigned int *)(a1 + 72) << 6;
  uint64_t v20 = 4 * *(unsigned int *)(a1 + 76);
  float64x2_t v21 = &v89[v19 + v20];
  uint64_t v22 = *(void *)(a1 + 56);
  uint64_t v23 = *(void *)(a1 + 64);
  unint64_t v24 = 4 * *(unsigned int *)(a1 + 84);
  if (v24 <= 1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = 4 * *(unsigned int *)(a1 + 84);
  }
  if (v25 > 7)
  {
    if (!v25 || (v25 - 1) >> 32)
    {
      for (uint64_t i = 0; i != v18; ++i)
      {
        uint64_t v44 = 0;
        do
        {
          v21[v44] = *(unsigned char *)(v22 + v44);
          ++v44;
        }
        while (v24 > v44);
        v21 += 64;
        v22 += v23;
      }
      goto LABEL_39;
    }
    char v28 = &v89[v19 + v20];
    uint64_t v29 = v25 & 0x3FFFFFFF8;
    if (v25 < 0x20)
    {
      uint64_t v30 = 0;
      uint64_t v31 = &v89[v19 + v20];
      float64x2_t v32 = *(uint64_t **)(a1 + 56);
      while (1)
      {
        float64x2_t v33 = (char *)(v22 + v23 * v30);
        float64x2_t v34 = &v21[64 * v30];
        if ((unint64_t)(&v28[64 * v30] - v33) > 0x1F)
        {
          v34 += v29;
          char v36 = v31;
          char v37 = v32;
          uint64_t v38 = v25 & 0x3FFFFFFF8;
          do
          {
            uint64_t v39 = *v37++;
            *v36++ = v39;
            v38 -= 8;
          }
          while (v38);
          if (v25 == v29) {
            goto LABEL_25;
          }
          v33 += v29;
          int v35 = v25 & 0xFFFFFFF8;
        }
        else
        {
          int v35 = 0;
        }
        unsigned int v40 = v35 + 1;
        do
        {
          char v41 = *v33++;
          *v34++ = v41;
          BOOL v42 = v24 > v40++;
        }
        while (v42);
LABEL_25:
        ++v30;
        float64x2_t v32 = (uint64_t *)((char *)v32 + v23);
        v31 += 64;
        if (v30 == v18) {
          goto LABEL_39;
        }
      }
    }
    uint64_t v69 = 0;
    uint64_t v70 = v25 & 0x3FFFFFFE0;
    uint64_t v71 = &v89[v19 + v20];
    uint64_t v72 = &v89[v19 + 16 + v20];
    long long v73 = (long long *)(v22 + 16);
    unsigned int v74 = (uint64_t *)(v22 + (v25 & 0x3FFFFFFE0));
    unint64_t v75 = &v71[v25 & 0x3FFFFFFE0];
    while (1)
    {
      unint64_t v76 = (char *)(v22 + v23 * v69);
      uint64_t v77 = &v21[64 * v69];
      if ((unint64_t)(&v28[64 * v69] - v76) >= 0x20)
      {
        char v81 = v73;
        int v82 = v72;
        uint64_t v83 = v25 & 0x3FFFFFFE0;
        do
        {
          long long v84 = *v81;
          *(v82 - 1) = *(v81 - 1);
          *int v82 = v84;
          v82 += 2;
          v81 += 2;
          v83 -= 32;
        }
        while (v83);
        if (v25 == v70) {
          goto LABEL_54;
        }
        if ((v25 & 0x18) != 0)
        {
          v77 += v29;
          uint64_t v85 = v75;
          unint64_t v86 = v74;
          unint64_t v87 = v29 - (v25 & 0x3FFFFFFE0);
          do
          {
            uint64_t v88 = *v86++;
            *v85++ = v88;
            v87 -= 8;
          }
          while (v87);
          if (v25 == v29) {
            goto LABEL_54;
          }
          v76 += v29;
          int v78 = v25 & 0xFFFFFFF8;
        }
        else
        {
          v76 += v70;
          v77 += v70;
          int v78 = v25 & 0xFFFFFFE0;
        }
      }
      else
      {
        int v78 = 0;
      }
      unsigned int v79 = v78 + 1;
      do
      {
        char v80 = *v76++;
        *v77++ = v80;
        BOOL v42 = v24 > v79++;
      }
      while (v42);
LABEL_54:
      ++v69;
      v72 += 64;
      long long v73 = (long long *)((char *)v73 + v23);
      unsigned int v74 = (uint64_t *)((char *)v74 + v23);
      v75 += 8;
      if (v69 == v18) {
        goto LABEL_39;
      }
    }
  }
  for (uint64_t j = 0; j != v18; ++j)
  {
    uint64_t v27 = 0;
    do
    {
      v21[v27] = *(unsigned char *)(v22 + v27);
      ++v27;
    }
    while (v24 > v27);
    v21 += 64;
    v22 += v23;
  }
LABEL_39:
  uint64_t v45 = 0;
  BOOL v46 = *(int64x2_t **)(a1 + 40);
  unint64_t v47 = *(char **)(a1 + 48);
  int v48 = *(unsigned __int8 *)(a1 + 88);
  int v49 = *(unsigned __int8 *)(a1 + 89);
  do
  {
    uint64_t v64 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,1u>::kSubblockPositions[v45 + 1];
    uint64_t v65 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,1u>::kSubblockPositions[v45];
    LODWORD(result) = (v48 - 8 * v65) & ~((v48 - 8 * (int)v65) >> 31);
    if (result >= 8) {
      uint64_t result = 8;
    }
    else {
      uint64_t result = result;
    }
    unsigned int v67 = (v49 - 4 * v64) & ~((v49 - 4 * (int)v64) >> 31);
    if (v67 >= 4) {
      unsigned int v67 = 4;
    }
    if (result) {
      BOOL v68 = v67 == 0;
    }
    else {
      BOOL v68 = 1;
    }
    if (v68)
    {
      char v63 = 0;
    }
    else
    {
      int v50 = (int64x2_t *)&v89[256 * v64 + 32 * v65];
      int64x2_t v51 = v50[1];
      int64x2_t v52 = v50[4];
      int64x2_t v53 = v50[5];
      int64x2_t v54 = vzip1q_s64(*v50, v52);
      int64x2_t v55 = vzip2q_s64(*v50, v52);
      int64x2_t v56 = vzip1q_s64(v51, v53);
      int64x2_t v57 = vzip2q_s64(v51, v53);
      int64x2_t v58 = v50[8];
      int64x2_t v59 = v50[9];
      v50 += 12;
      int64x2_t v60 = v50[1];
      int64x2_t v61 = vzip1q_s64(v58, *v50);
      int64x2_t v62 = vzip2q_s64(v58, *v50);
      *BOOL v46 = v54;
      v46[1] = v55;
      v46[2] = v61;
      v46[3] = v62;
      v46[4] = v56;
      v46[5] = v57;
      v46[6] = vzip1q_s64(v59, v60);
      v46[7] = vzip2q_s64(v59, v60);
      v46 += 8;
      char v63 = 127;
    }
    *v47++ = v63;
    v45 += 2;
  }
  while (v45 != 16);
  return result;
}

unint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE11ELj1ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1, int32x4_t a2, int32x4_t a3)
{
  uint64_t v4 = 0;
  uint64_t v67 = *MEMORY[0x263EF8340];
  uint64_t v5 = *(void *)(a1 + 40);
  uint64_t v6 = *(unsigned char **)(a1 + 48);
  do
  {
    uint64_t v8 = (int64x2_t *)&v66[256
                         * (unint64_t)AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,1u>::kSubblockPositions[v4 + 1]
                         + 32
                         * AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,1u>::kSubblockPositions[v4]];
    unsigned int v9 = *v6;
    if (v9 == 127)
    {
      int64x2_t v10 = *(int64x2_t *)v5;
      int64x2_t v11 = *(int64x2_t *)(v5 + 16);
      int64x2_t v12 = *(int64x2_t *)(v5 + 32);
      int64x2_t v13 = *(int64x2_t *)(v5 + 48);
      int64x2_t v14 = *(int64x2_t *)(v5 + 64);
      int64x2_t v15 = *(int64x2_t *)(v5 + 80);
      int64x2_t v16 = *(int64x2_t *)(v5 + 96);
      int64x2_t v17 = *(int64x2_t *)(v5 + 112);
      *uint64_t v8 = vzip1q_s64(*(int64x2_t *)v5, v11);
      v8[1] = vzip1q_s64(v14, v15);
      v8[4] = vzip2q_s64(v10, v11);
      v8[5] = vzip2q_s64(v14, v15);
      v8[8] = vzip1q_s64(v12, v13);
      v8[9] = vzip1q_s64(v16, v17);
      a2 = (int32x4_t)vzip2q_s64(v12, v13);
      a3 = (int32x4_t)vzip2q_s64(v16, v17);
      v8[12] = (int64x2_t)a2;
      v8[13] = (int64x2_t)a3;
      uint64_t v7 = 128;
    }
    else if (v9 == 3)
    {
      a2 = (int32x4_t)vld1q_dup_f32((const float *)v5);
      *uint64_t v8 = (int64x2_t)a2;
      v8[1] = (int64x2_t)a2;
      v8[4] = (int64x2_t)a2;
      v8[5] = (int64x2_t)a2;
      v8[8] = (int64x2_t)a2;
      v8[9] = (int64x2_t)a2;
      v8[12] = (int64x2_t)a2;
      v8[13] = (int64x2_t)a2;
      uint64_t v7 = 4;
    }
    else if (*v6)
    {
      uint64_t v7 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v8, 64, v5, v9, a2, a3);
    }
    else
    {
      uint64_t v7 = 0;
      a2 = 0uLL;
      *uint64_t v8 = 0u;
      v8[1] = 0u;
      v8[4] = 0u;
      v8[5] = 0u;
      v8[8] = 0u;
      v8[9] = 0u;
      v8[12] = 0u;
      v8[13] = 0u;
    }
    v5 += v7;
    ++v6;
    v4 += 2;
  }
  while (v4 != 16);
  uint64_t v18 = *(unsigned int *)(a1 + 80);
  if (v18 && *(_DWORD *)(a1 + 84))
  {
    unint64_t v19 = (unint64_t)*(unsigned int *)(a1 + 72) << 6;
    uint64_t v20 = 4 * *(unsigned int *)(a1 + 76);
    float64x2_t v21 = &v66[v19 + v20];
    uint64_t v22 = *(void *)(a1 + 56);
    uint64_t v23 = *(void *)(a1 + 64);
    unint64_t v24 = 4 * *(unsigned int *)(a1 + 84);
    if (v24 <= 1) {
      unint64_t v25 = 1;
    }
    else {
      unint64_t v25 = 4 * *(unsigned int *)(a1 + 84);
    }
    if (v25 <= 7)
    {
      for (uint64_t i = 0; i != v18; ++i)
      {
        uint64_t v27 = 0;
        do
        {
          v21[v27] = *(unsigned char *)(v22 + v27);
          ++v27;
        }
        while (v24 > v27);
        v21 += 64;
        v22 += v23;
      }
      return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v66, 64, *(int16x8_t **)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
    }
    if (v25 && !((v25 - 1) >> 32))
    {
      char v28 = &v66[v19 + v20];
      uint64_t v29 = v25 & 0x3FFFFFFF8;
      if (v25 < 0x20)
      {
        uint64_t v30 = 0;
        uint64_t v31 = &v66[v19 + v20];
        float64x2_t v32 = *(uint64_t **)(a1 + 56);
        while (1)
        {
          float64x2_t v33 = (char *)(v22 + v23 * v30);
          float64x2_t v34 = &v21[64 * v30];
          if ((unint64_t)(&v28[64 * v30] - v33) > 0x1F)
          {
            v34 += v29;
            char v36 = v31;
            char v37 = v32;
            uint64_t v38 = v25 & 0x3FFFFFFF8;
            do
            {
              uint64_t v39 = *v37++;
              *v36++ = v39;
              v38 -= 8;
            }
            while (v38);
            if (v25 == v29) {
              goto LABEL_25;
            }
            v33 += v29;
            int v35 = v25 & 0xFFFFFFF8;
          }
          else
          {
            int v35 = 0;
          }
          unsigned int v40 = v35 + 1;
          do
          {
            char v41 = *v33++;
            *v34++ = v41;
            BOOL v42 = v24 > v40++;
          }
          while (v42);
LABEL_25:
          ++v30;
          float64x2_t v32 = (uint64_t *)((char *)v32 + v23);
          v31 += 64;
          if (v30 == v18) {
            return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v66, 64, *(int16x8_t **)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
          }
        }
      }
      uint64_t v46 = 0;
      uint64_t v47 = v25 & 0x3FFFFFFE0;
      int v48 = &v66[v19 + v20];
      int v49 = &v66[v19 + 16 + v20];
      int v50 = (long long *)(v22 + 16);
      int64x2_t v51 = (uint64_t *)(v22 + (v25 & 0x3FFFFFFE0));
      for (uint64_t j = &v48[v25 & 0x3FFFFFFE0]; ; j += 8)
      {
        int64x2_t v53 = (char *)(v22 + v23 * v46);
        int64x2_t v54 = &v21[64 * v46];
        if ((unint64_t)(&v28[64 * v46] - v53) >= 0x20)
        {
          int64x2_t v58 = v50;
          int64x2_t v59 = v49;
          uint64_t v60 = v25 & 0x3FFFFFFE0;
          do
          {
            long long v61 = *v58;
            *(v59 - 1) = *(v58 - 1);
            *int64x2_t v59 = v61;
            v59 += 2;
            v58 += 2;
            v60 -= 32;
          }
          while (v60);
          if (v25 == v47) {
            goto LABEL_41;
          }
          if ((v25 & 0x18) != 0)
          {
            v54 += v29;
            int64x2_t v62 = j;
            char v63 = v51;
            unint64_t v64 = v29 - (v25 & 0x3FFFFFFE0);
            do
            {
              uint64_t v65 = *v63++;
              *v62++ = v65;
              v64 -= 8;
            }
            while (v64);
            if (v25 == v29) {
              goto LABEL_41;
            }
            v53 += v29;
            int v55 = v25 & 0xFFFFFFF8;
          }
          else
          {
            v53 += v47;
            v54 += v47;
            int v55 = v25 & 0xFFFFFFE0;
          }
        }
        else
        {
          int v55 = 0;
        }
        unsigned int v56 = v55 + 1;
        do
        {
          char v57 = *v53++;
          *v54++ = v57;
          BOOL v42 = v24 > v56++;
        }
        while (v42);
LABEL_41:
        ++v46;
        v49 += 64;
        int v50 = (long long *)((char *)v50 + v23);
        int64x2_t v51 = (uint64_t *)((char *)v51 + v23);
        if (v46 == v18) {
          return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v66, 64, *(int16x8_t **)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
        }
      }
    }
    for (uint64_t k = 0; k != v18; ++k)
    {
      uint64_t v44 = 0;
      do
      {
        v21[v44] = *(unsigned char *)(v22 + v44);
        ++v44;
      }
      while (v24 > v44);
      v21 += 64;
      v22 += v23;
    }
  }
  return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v66, 64, *(int16x8_t **)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE11ELj1ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1, int32x4_t a2, int32x4_t a3)
{
  uint64_t v4 = 0;
  uint64_t v90 = *MEMORY[0x263EF8340];
  uint64_t v5 = *(void *)(a1 + 40);
  uint64_t v6 = *(unsigned char **)(a1 + 48);
  do
  {
    uint64_t v8 = (int64x2_t *)&v89[256
                         * (unint64_t)AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,1u>::kSubblockPositions[v4 + 1]
                         + 32
                         * AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,1u>::kSubblockPositions[v4]];
    unsigned int v9 = *v6;
    if (v9 == 127)
    {
      int64x2_t v10 = *(int64x2_t *)v5;
      int64x2_t v11 = *(int64x2_t *)(v5 + 16);
      int64x2_t v12 = *(int64x2_t *)(v5 + 32);
      int64x2_t v13 = *(int64x2_t *)(v5 + 48);
      int64x2_t v14 = *(int64x2_t *)(v5 + 64);
      int64x2_t v15 = *(int64x2_t *)(v5 + 80);
      int64x2_t v16 = *(int64x2_t *)(v5 + 96);
      int64x2_t v17 = *(int64x2_t *)(v5 + 112);
      *uint64_t v8 = vzip1q_s64(*(int64x2_t *)v5, v11);
      v8[1] = vzip1q_s64(v14, v15);
      v8[4] = vzip2q_s64(v10, v11);
      v8[5] = vzip2q_s64(v14, v15);
      v8[8] = vzip1q_s64(v12, v13);
      v8[9] = vzip1q_s64(v16, v17);
      a2 = (int32x4_t)vzip2q_s64(v12, v13);
      a3 = (int32x4_t)vzip2q_s64(v16, v17);
      v8[12] = (int64x2_t)a2;
      v8[13] = (int64x2_t)a3;
      uint64_t v7 = 128;
    }
    else if (v9 == 3)
    {
      a2 = (int32x4_t)vld1q_dup_f32((const float *)v5);
      *uint64_t v8 = (int64x2_t)a2;
      v8[1] = (int64x2_t)a2;
      v8[4] = (int64x2_t)a2;
      v8[5] = (int64x2_t)a2;
      v8[8] = (int64x2_t)a2;
      v8[9] = (int64x2_t)a2;
      v8[12] = (int64x2_t)a2;
      v8[13] = (int64x2_t)a2;
      uint64_t v7 = 4;
    }
    else if (*v6)
    {
      uint64_t v7 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v8, 64, v5, v9, a2, a3);
    }
    else
    {
      uint64_t v7 = 0;
      a2 = 0uLL;
      *uint64_t v8 = 0u;
      v8[1] = 0u;
      v8[4] = 0u;
      v8[5] = 0u;
      v8[8] = 0u;
      v8[9] = 0u;
      v8[12] = 0u;
      v8[13] = 0u;
    }
    v5 += v7;
    ++v6;
    v4 += 2;
  }
  while (v4 != 16);
  uint64_t v18 = *(unsigned int *)(a1 + 80);
  if (!v18 || !*(_DWORD *)(a1 + 84)) {
    goto LABEL_39;
  }
  unint64_t v19 = (unint64_t)*(unsigned int *)(a1 + 72) << 6;
  uint64_t v20 = 4 * *(unsigned int *)(a1 + 76);
  float64x2_t v21 = &v89[v19 + v20];
  uint64_t v22 = *(void *)(a1 + 56);
  uint64_t v23 = *(void *)(a1 + 64);
  unint64_t v24 = 4 * *(unsigned int *)(a1 + 84);
  if (v24 <= 1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = 4 * *(unsigned int *)(a1 + 84);
  }
  if (v25 > 7)
  {
    if (!v25 || (v25 - 1) >> 32)
    {
      for (uint64_t i = 0; i != v18; ++i)
      {
        uint64_t v44 = 0;
        do
        {
          v21[v44] = *(unsigned char *)(v22 + v44);
          ++v44;
        }
        while (v24 > v44);
        v21 += 64;
        v22 += v23;
      }
      goto LABEL_39;
    }
    char v28 = &v89[v19 + v20];
    uint64_t v29 = v25 & 0x3FFFFFFF8;
    if (v25 < 0x20)
    {
      uint64_t v30 = 0;
      uint64_t v31 = &v89[v19 + v20];
      float64x2_t v32 = *(uint64_t **)(a1 + 56);
      while (1)
      {
        float64x2_t v33 = (char *)(v22 + v23 * v30);
        float64x2_t v34 = &v21[64 * v30];
        if ((unint64_t)(&v28[64 * v30] - v33) > 0x1F)
        {
          v34 += v29;
          char v36 = v31;
          char v37 = v32;
          uint64_t v38 = v25 & 0x3FFFFFFF8;
          do
          {
            uint64_t v39 = *v37++;
            *v36++ = v39;
            v38 -= 8;
          }
          while (v38);
          if (v25 == v29) {
            goto LABEL_25;
          }
          v33 += v29;
          int v35 = v25 & 0xFFFFFFF8;
        }
        else
        {
          int v35 = 0;
        }
        unsigned int v40 = v35 + 1;
        do
        {
          char v41 = *v33++;
          *v34++ = v41;
          BOOL v42 = v24 > v40++;
        }
        while (v42);
LABEL_25:
        ++v30;
        float64x2_t v32 = (uint64_t *)((char *)v32 + v23);
        v31 += 64;
        if (v30 == v18) {
          goto LABEL_39;
        }
      }
    }
    uint64_t v69 = 0;
    uint64_t v70 = v25 & 0x3FFFFFFE0;
    uint64_t v71 = &v89[v19 + v20];
    uint64_t v72 = &v89[v19 + 16 + v20];
    long long v73 = (long long *)(v22 + 16);
    unsigned int v74 = (uint64_t *)(v22 + (v25 & 0x3FFFFFFE0));
    unint64_t v75 = &v71[v25 & 0x3FFFFFFE0];
    while (1)
    {
      unint64_t v76 = (char *)(v22 + v23 * v69);
      uint64_t v77 = &v21[64 * v69];
      if ((unint64_t)(&v28[64 * v69] - v76) >= 0x20)
      {
        char v81 = v73;
        int v82 = v72;
        uint64_t v83 = v25 & 0x3FFFFFFE0;
        do
        {
          long long v84 = *v81;
          *(v82 - 1) = *(v81 - 1);
          *int v82 = v84;
          v82 += 2;
          v81 += 2;
          v83 -= 32;
        }
        while (v83);
        if (v25 == v70) {
          goto LABEL_54;
        }
        if ((v25 & 0x18) != 0)
        {
          v77 += v29;
          uint64_t v85 = v75;
          unint64_t v86 = v74;
          unint64_t v87 = v29 - (v25 & 0x3FFFFFFE0);
          do
          {
            uint64_t v88 = *v86++;
            *v85++ = v88;
            v87 -= 8;
          }
          while (v87);
          if (v25 == v29) {
            goto LABEL_54;
          }
          v76 += v29;
          int v78 = v25 & 0xFFFFFFF8;
        }
        else
        {
          v76 += v70;
          v77 += v70;
          int v78 = v25 & 0xFFFFFFE0;
        }
      }
      else
      {
        int v78 = 0;
      }
      unsigned int v79 = v78 + 1;
      do
      {
        char v80 = *v76++;
        *v77++ = v80;
        BOOL v42 = v24 > v79++;
      }
      while (v42);
LABEL_54:
      ++v69;
      v72 += 64;
      long long v73 = (long long *)((char *)v73 + v23);
      unsigned int v74 = (uint64_t *)((char *)v74 + v23);
      v75 += 8;
      if (v69 == v18) {
        goto LABEL_39;
      }
    }
  }
  for (uint64_t j = 0; j != v18; ++j)
  {
    uint64_t v27 = 0;
    do
    {
      v21[v27] = *(unsigned char *)(v22 + v27);
      ++v27;
    }
    while (v24 > v27);
    v21 += 64;
    v22 += v23;
  }
LABEL_39:
  uint64_t v45 = 0;
  uint64_t v46 = *(int64x2_t **)(a1 + 40);
  uint64_t v47 = *(char **)(a1 + 48);
  int v48 = *(unsigned __int8 *)(a1 + 88);
  int v49 = *(unsigned __int8 *)(a1 + 89);
  do
  {
    uint64_t v64 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,1u>::kSubblockPositions[v45 + 1];
    uint64_t v65 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,1u>::kSubblockPositions[v45];
    LODWORD(result) = (v48 - 8 * v65) & ~((v48 - 8 * (int)v65) >> 31);
    if (result >= 8) {
      uint64_t result = 8;
    }
    else {
      uint64_t result = result;
    }
    unsigned int v67 = (v49 - 4 * v64) & ~((v49 - 4 * (int)v64) >> 31);
    if (v67 >= 4) {
      unsigned int v67 = 4;
    }
    if (result) {
      BOOL v68 = v67 == 0;
    }
    else {
      BOOL v68 = 1;
    }
    if (v68)
    {
      char v63 = 0;
    }
    else
    {
      int v50 = (int64x2_t *)&v89[256 * v64 + 32 * v65];
      int64x2_t v51 = v50[1];
      int64x2_t v52 = v50[4];
      int64x2_t v53 = v50[5];
      int64x2_t v54 = vzip1q_s64(*v50, v52);
      int64x2_t v55 = vzip2q_s64(*v50, v52);
      int64x2_t v56 = vzip1q_s64(v51, v53);
      int64x2_t v57 = vzip2q_s64(v51, v53);
      int64x2_t v58 = v50[8];
      int64x2_t v59 = v50[9];
      v50 += 12;
      int64x2_t v60 = v50[1];
      int64x2_t v61 = vzip1q_s64(v58, *v50);
      int64x2_t v62 = vzip2q_s64(v58, *v50);
      *uint64_t v46 = v54;
      v46[1] = v55;
      v46[2] = v61;
      v46[3] = v62;
      v46[4] = v56;
      v46[5] = v57;
      v46[6] = vzip1q_s64(v59, v60);
      v46[7] = vzip2q_s64(v59, v60);
      v46 += 8;
      char v63 = 127;
    }
    *v47++ = v63;
    v45 += 2;
  }
  while (v45 != 16);
  return result;
}

unint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE11ELj1ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1, int32x4_t a2, int32x4_t a3)
{
  uint64_t v4 = 0;
  uint64_t v67 = *MEMORY[0x263EF8340];
  uint64_t v5 = *(void *)(a1 + 40);
  uint64_t v6 = *(unsigned char **)(a1 + 48);
  do
  {
    uint64_t v8 = (int64x2_t *)&v66[256
                         * (unint64_t)AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,1u>::kSubblockPositions[v4 + 1]
                         + 32
                         * AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,1u>::kSubblockPositions[v4]];
    unsigned int v9 = *v6;
    if (v9 == 127)
    {
      int64x2_t v10 = *(int64x2_t *)v5;
      int64x2_t v11 = *(int64x2_t *)(v5 + 16);
      int64x2_t v12 = *(int64x2_t *)(v5 + 32);
      int64x2_t v13 = *(int64x2_t *)(v5 + 48);
      int64x2_t v14 = *(int64x2_t *)(v5 + 64);
      int64x2_t v15 = *(int64x2_t *)(v5 + 80);
      int64x2_t v16 = *(int64x2_t *)(v5 + 96);
      int64x2_t v17 = *(int64x2_t *)(v5 + 112);
      *uint64_t v8 = vzip1q_s64(*(int64x2_t *)v5, v11);
      v8[1] = vzip1q_s64(v14, v15);
      v8[4] = vzip2q_s64(v10, v11);
      v8[5] = vzip2q_s64(v14, v15);
      v8[8] = vzip1q_s64(v12, v13);
      v8[9] = vzip1q_s64(v16, v17);
      a2 = (int32x4_t)vzip2q_s64(v12, v13);
      a3 = (int32x4_t)vzip2q_s64(v16, v17);
      v8[12] = (int64x2_t)a2;
      v8[13] = (int64x2_t)a3;
      uint64_t v7 = 128;
    }
    else if (v9 == 3)
    {
      a2 = (int32x4_t)vld1q_dup_f32((const float *)v5);
      *uint64_t v8 = (int64x2_t)a2;
      v8[1] = (int64x2_t)a2;
      v8[4] = (int64x2_t)a2;
      v8[5] = (int64x2_t)a2;
      v8[8] = (int64x2_t)a2;
      v8[9] = (int64x2_t)a2;
      v8[12] = (int64x2_t)a2;
      v8[13] = (int64x2_t)a2;
      uint64_t v7 = 4;
    }
    else if (*v6)
    {
      uint64_t v7 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v8, 64, v5, v9, a2, a3);
    }
    else
    {
      uint64_t v7 = 0;
      a2 = 0uLL;
      *uint64_t v8 = 0u;
      v8[1] = 0u;
      v8[4] = 0u;
      v8[5] = 0u;
      v8[8] = 0u;
      v8[9] = 0u;
      v8[12] = 0u;
      v8[13] = 0u;
    }
    v5 += v7;
    ++v6;
    v4 += 2;
  }
  while (v4 != 16);
  uint64_t v18 = *(unsigned int *)(a1 + 80);
  if (v18 && *(_DWORD *)(a1 + 84))
  {
    unint64_t v19 = (unint64_t)*(unsigned int *)(a1 + 72) << 6;
    uint64_t v20 = 4 * *(unsigned int *)(a1 + 76);
    float64x2_t v21 = &v66[v19 + v20];
    uint64_t v22 = *(void *)(a1 + 56);
    uint64_t v23 = *(void *)(a1 + 64);
    unint64_t v24 = 4 * *(unsigned int *)(a1 + 84);
    if (v24 <= 1) {
      unint64_t v25 = 1;
    }
    else {
      unint64_t v25 = 4 * *(unsigned int *)(a1 + 84);
    }
    if (v25 <= 7)
    {
      for (uint64_t i = 0; i != v18; ++i)
      {
        uint64_t v27 = 0;
        do
        {
          v21[v27] = *(unsigned char *)(v22 + v27);
          ++v27;
        }
        while (v24 > v27);
        v21 += 64;
        v22 += v23;
      }
      return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v66, 64, *(int16x8_t **)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
    }
    if (v25 && !((v25 - 1) >> 32))
    {
      char v28 = &v66[v19 + v20];
      uint64_t v29 = v25 & 0x3FFFFFFF8;
      if (v25 < 0x20)
      {
        uint64_t v30 = 0;
        uint64_t v31 = &v66[v19 + v20];
        float64x2_t v32 = *(uint64_t **)(a1 + 56);
        while (1)
        {
          float64x2_t v33 = (char *)(v22 + v23 * v30);
          float64x2_t v34 = &v21[64 * v30];
          if ((unint64_t)(&v28[64 * v30] - v33) > 0x1F)
          {
            v34 += v29;
            char v36 = v31;
            char v37 = v32;
            uint64_t v38 = v25 & 0x3FFFFFFF8;
            do
            {
              uint64_t v39 = *v37++;
              *v36++ = v39;
              v38 -= 8;
            }
            while (v38);
            if (v25 == v29) {
              goto LABEL_25;
            }
            v33 += v29;
            int v35 = v25 & 0xFFFFFFF8;
          }
          else
          {
            int v35 = 0;
          }
          unsigned int v40 = v35 + 1;
          do
          {
            char v41 = *v33++;
            *v34++ = v41;
            BOOL v42 = v24 > v40++;
          }
          while (v42);
LABEL_25:
          ++v30;
          float64x2_t v32 = (uint64_t *)((char *)v32 + v23);
          v31 += 64;
          if (v30 == v18) {
            return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v66, 64, *(int16x8_t **)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
          }
        }
      }
      uint64_t v46 = 0;
      uint64_t v47 = v25 & 0x3FFFFFFE0;
      int v48 = &v66[v19 + v20];
      int v49 = &v66[v19 + 16 + v20];
      int v50 = (long long *)(v22 + 16);
      int64x2_t v51 = (uint64_t *)(v22 + (v25 & 0x3FFFFFFE0));
      for (uint64_t j = &v48[v25 & 0x3FFFFFFE0]; ; j += 8)
      {
        int64x2_t v53 = (char *)(v22 + v23 * v46);
        int64x2_t v54 = &v21[64 * v46];
        if ((unint64_t)(&v28[64 * v46] - v53) >= 0x20)
        {
          int64x2_t v58 = v50;
          int64x2_t v59 = v49;
          uint64_t v60 = v25 & 0x3FFFFFFE0;
          do
          {
            long long v61 = *v58;
            *(v59 - 1) = *(v58 - 1);
            *int64x2_t v59 = v61;
            v59 += 2;
            v58 += 2;
            v60 -= 32;
          }
          while (v60);
          if (v25 == v47) {
            goto LABEL_41;
          }
          if ((v25 & 0x18) != 0)
          {
            v54 += v29;
            int64x2_t v62 = j;
            char v63 = v51;
            unint64_t v64 = v29 - (v25 & 0x3FFFFFFE0);
            do
            {
              uint64_t v65 = *v63++;
              *v62++ = v65;
              v64 -= 8;
            }
            while (v64);
            if (v25 == v29) {
              goto LABEL_41;
            }
            v53 += v29;
            int v55 = v25 & 0xFFFFFFF8;
          }
          else
          {
            v53 += v47;
            v54 += v47;
            int v55 = v25 & 0xFFFFFFE0;
          }
        }
        else
        {
          int v55 = 0;
        }
        unsigned int v56 = v55 + 1;
        do
        {
          char v57 = *v53++;
          *v54++ = v57;
          BOOL v42 = v24 > v56++;
        }
        while (v42);
LABEL_41:
        ++v46;
        v49 += 64;
        int v50 = (long long *)((char *)v50 + v23);
        int64x2_t v51 = (uint64_t *)((char *)v51 + v23);
        if (v46 == v18) {
          return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v66, 64, *(int16x8_t **)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
        }
      }
    }
    for (uint64_t k = 0; k != v18; ++k)
    {
      uint64_t v44 = 0;
      do
      {
        v21[v44] = *(unsigned char *)(v22 + v44);
        ++v44;
      }
      while (v24 > v44);
      v21 += 64;
      v22 += v23;
    }
  }
  return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v66, 64, *(int16x8_t **)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE16ELj1ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v75 = *MEMORY[0x263EF8340];
  AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressMacroblock(v74, *(int64x2_t **)(a1 + 40), *(unsigned __int8 **)(a1 + 48));
  uint64_t v2 = *(unsigned int *)(a1 + 80);
  if (v2 && *(_DWORD *)(a1 + 84))
  {
    unint64_t v3 = (unint64_t)*(unsigned int *)(a1 + 72) << 6;
    uint64_t v4 = 4 * *(unsigned int *)(a1 + 76);
    uint64_t v5 = &v74[0].i8[v3 + v4];
    uint64_t v6 = *(void *)(a1 + 56);
    uint64_t v7 = *(void *)(a1 + 64);
    unint64_t v8 = 4 * *(unsigned int *)(a1 + 84);
    if (v8 <= 1) {
      unint64_t v9 = 1;
    }
    else {
      unint64_t v9 = 4 * *(unsigned int *)(a1 + 84);
    }
    if (v9 <= 7)
    {
      for (uint64_t i = 0; i != v2; ++i)
      {
        uint64_t v11 = 0;
        do
        {
          v5[v11] = *(unsigned char *)(v6 + v11);
          ++v11;
        }
        while (v8 > v11);
        v5 += 64;
        v6 += v7;
      }
      goto LABEL_20;
    }
    if (v9) {
      BOOL v12 = (v9 - 1) >> 32 == 0;
    }
    else {
      BOOL v12 = 0;
    }
    if (!v12)
    {
      for (uint64_t j = 0; j != v2; ++j)
      {
        uint64_t v14 = 0;
        do
        {
          v5[v14] = *(unsigned char *)(v6 + v14);
          ++v14;
        }
        while (v8 > v14);
        v5 += 64;
        v6 += v7;
      }
      goto LABEL_20;
    }
    uint64_t v39 = &v74[0].i8[v3 + v4];
    uint64_t v40 = v9 & 0x3FFFFFFF8;
    if (v9 < 0x20)
    {
      uint64_t v41 = 0;
      BOOL v42 = &v74[0].i8[v3 + v4];
      int v43 = *(uint64_t **)(a1 + 56);
      while (1)
      {
        uint64_t v44 = (char *)(v6 + v7 * v41);
        uint64_t v45 = &v5[64 * v41];
        if ((unint64_t)(&v39[64 * v41] - v44) > 0x1F)
        {
          v45 += v40;
          uint64_t v47 = v42;
          int v48 = v43;
          uint64_t v49 = v9 & 0x3FFFFFFF8;
          do
          {
            uint64_t v50 = *v48++;
            *(void *)uint64_t v47 = v50;
            v47 += 8;
            v49 -= 8;
          }
          while (v49);
          if (v9 == v40) {
            goto LABEL_36;
          }
          v44 += v40;
          int v46 = v9 & 0xFFFFFFF8;
        }
        else
        {
          int v46 = 0;
        }
        unsigned int v51 = v46 + 1;
        do
        {
          char v52 = *v44++;
          *v45++ = v52;
          BOOL v53 = v8 > v51++;
        }
        while (v53);
LABEL_36:
        ++v41;
        int v43 = (uint64_t *)((char *)v43 + v7);
        v42 += 64;
        if (v41 == v2) {
          goto LABEL_20;
        }
      }
    }
    uint64_t v54 = 0;
    uint64_t v55 = v9 & 0x3FFFFFFE0;
    unsigned int v56 = &v74[0].i8[v3 + v4];
    char v57 = &v74[1].i8[v3 + v4];
    int64x2_t v58 = (long long *)(v6 + 16);
    int64x2_t v59 = (uint64_t *)(v6 + (v9 & 0x3FFFFFFE0));
    uint64_t v60 = &v56[v9 & 0x3FFFFFFE0];
    do
    {
      long long v61 = (char *)(v6 + v7 * v54);
      int64x2_t v62 = &v5[64 * v54];
      if ((unint64_t)(&v39[64 * v54] - v61) >= 0x20)
      {
        int v66 = v58;
        uint64_t v67 = v57;
        uint64_t v68 = v9 & 0x3FFFFFFE0;
        do
        {
          long long v69 = *v66;
          *((_OWORD *)v67 - 1) = *(v66 - 1);
          *(_OWORD *)uint64_t v67 = v69;
          v67 += 32;
          v66 += 2;
          v68 -= 32;
        }
        while (v68);
        if (v9 == v55) {
          goto LABEL_47;
        }
        if ((v9 & 0x18) != 0)
        {
          v62 += v40;
          uint64_t v70 = v60;
          uint64_t v71 = v59;
          unint64_t v72 = v40 - (v9 & 0x3FFFFFFE0);
          do
          {
            uint64_t v73 = *v71++;
            *(void *)uint64_t v70 = v73;
            v70 += 8;
            v72 -= 8;
          }
          while (v72);
          if (v9 == v40) {
            goto LABEL_47;
          }
          v61 += v40;
          int v63 = v9 & 0xFFFFFFF8;
        }
        else
        {
          v61 += v55;
          v62 += v55;
          int v63 = v9 & 0xFFFFFFE0;
        }
      }
      else
      {
        int v63 = 0;
      }
      unsigned int v64 = v63 + 1;
      do
      {
        char v65 = *v61++;
        *v62++ = v65;
        BOOL v53 = v8 > v64++;
      }
      while (v53);
LABEL_47:
      ++v54;
      v57 += 64;
      int64x2_t v58 = (long long *)((char *)v58 + v7);
      int64x2_t v59 = (uint64_t *)((char *)v59 + v7);
      v60 += 64;
    }
    while (v54 != v2);
  }
LABEL_20:
  uint64_t v15 = 0;
  int64x2_t v16 = *(int64x2_t **)(a1 + 40);
  int64x2_t v17 = *(char **)(a1 + 48);
  int v18 = *(unsigned __int8 *)(a1 + 88);
  int v19 = *(unsigned __int8 *)(a1 + 89);
  do
  {
    uint64_t v34 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,1u>::kSubblockPositions[v15 + 1];
    uint64_t v35 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,1u>::kSubblockPositions[v15];
    LODWORD(result) = (v18 - 8 * v35) & ~((v18 - 8 * (int)v35) >> 31);
    if (result >= 8) {
      uint64_t result = 8;
    }
    else {
      uint64_t result = result;
    }
    unsigned int v37 = (v19 - 4 * v34) & ~((v19 - 4 * (int)v34) >> 31);
    if (v37 >= 4) {
      unsigned int v37 = 4;
    }
    if (result) {
      BOOL v38 = v37 == 0;
    }
    else {
      BOOL v38 = 1;
    }
    if (v38)
    {
      char v33 = 0;
    }
    else
    {
      uint64_t v20 = &v74[16 * v34 + 2 * v35];
      int64x2_t v21 = v20[1];
      int64x2_t v22 = v20[4];
      int64x2_t v23 = v20[5];
      int64x2_t v24 = vzip1q_s64(*v20, v22);
      int64x2_t v25 = vzip2q_s64(*v20, v22);
      int64x2_t v26 = vzip1q_s64(v21, v23);
      int64x2_t v27 = vzip2q_s64(v21, v23);
      int64x2_t v28 = v20[8];
      int64x2_t v29 = v20[9];
      v20 += 12;
      int64x2_t v30 = v20[1];
      int64x2_t v31 = vzip1q_s64(v28, *v20);
      int64x2_t v32 = vzip2q_s64(v28, *v20);
      *int64x2_t v16 = v24;
      v16[1] = v25;
      v16[2] = v31;
      v16[3] = v32;
      v16[4] = v26;
      v16[5] = v27;
      v16[6] = vzip1q_s64(v29, v30);
      v16[7] = vzip2q_s64(v29, v30);
      v16 += 8;
      char v33 = 127;
    }
    *v17++ = v33;
    v15 += 2;
  }
  while (v15 != 16);
  return result;
}

unint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE16ELj1ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v52 = *MEMORY[0x263EF8340];
  AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressMacroblock(v51, *(int64x2_t **)(a1 + 40), *(unsigned __int8 **)(a1 + 48));
  uint64_t v2 = *(unsigned int *)(a1 + 80);
  if (!v2 || !*(_DWORD *)(a1 + 84)) {
    return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v51, 64, *(int32x4_t **)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
  }
  unint64_t v3 = (unint64_t)*(unsigned int *)(a1 + 72) << 6;
  uint64_t v4 = 4 * *(unsigned int *)(a1 + 76);
  uint64_t v5 = &v51[0].i8[v3 + v4];
  uint64_t v6 = *(void *)(a1 + 56);
  uint64_t v7 = *(void *)(a1 + 64);
  unint64_t v8 = 4 * *(unsigned int *)(a1 + 84);
  if (v8 <= 1) {
    unint64_t v9 = 1;
  }
  else {
    unint64_t v9 = 4 * *(unsigned int *)(a1 + 84);
  }
  if (v9 <= 7)
  {
    for (uint64_t i = 0; i != v2; ++i)
    {
      uint64_t v11 = 0;
      do
      {
        v5[v11] = *(unsigned char *)(v6 + v11);
        ++v11;
      }
      while (v8 > v11);
      v5 += 64;
      v6 += v7;
    }
    return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v51, 64, *(int32x4_t **)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
  }
  if (v9) {
    BOOL v12 = (v9 - 1) >> 32 == 0;
  }
  else {
    BOOL v12 = 0;
  }
  if (v12)
  {
    int64x2_t v16 = &v51[0].i8[v3 + v4];
    uint64_t v17 = v9 & 0x3FFFFFFF8;
    if (v9 < 0x20)
    {
      uint64_t v18 = 0;
      int v19 = &v51[0].i8[v3 + v4];
      uint64_t v20 = *(uint64_t **)(a1 + 56);
      while (1)
      {
        int64x2_t v21 = (char *)(v6 + v7 * v18);
        int64x2_t v22 = &v5[64 * v18];
        if ((unint64_t)(&v16[64 * v18] - v21) > 0x1F)
        {
          v22 += v17;
          int64x2_t v24 = v19;
          int64x2_t v25 = v20;
          uint64_t v26 = v9 & 0x3FFFFFFF8;
          do
          {
            uint64_t v27 = *v25++;
            *(void *)int64x2_t v24 = v27;
            v24 += 8;
            v26 -= 8;
          }
          while (v26);
          if (v9 == v17) {
            goto LABEL_23;
          }
          v21 += v17;
          int v23 = v9 & 0xFFFFFFF8;
        }
        else
        {
          int v23 = 0;
        }
        unsigned int v28 = v23 + 1;
        do
        {
          char v29 = *v21++;
          *v22++ = v29;
          BOOL v30 = v8 > v28++;
        }
        while (v30);
LABEL_23:
        ++v18;
        uint64_t v20 = (uint64_t *)((char *)v20 + v7);
        v19 += 64;
        if (v18 == v2) {
          return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v51, 64, *(int32x4_t **)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
        }
      }
    }
    uint64_t v31 = 0;
    uint64_t v32 = v9 & 0x3FFFFFFE0;
    char v33 = &v51[0].i8[v3 + v4];
    uint64_t v34 = &v51[1].i8[v3 + v4];
    uint64_t v35 = (long long *)(v6 + 16);
    char v36 = (uint64_t *)(v6 + (v9 & 0x3FFFFFFE0));
    for (uint64_t j = &v33[v9 & 0x3FFFFFFE0]; ; j += 64)
    {
      BOOL v38 = (char *)(v6 + v7 * v31);
      uint64_t v39 = &v5[64 * v31];
      if ((unint64_t)(&v16[64 * v31] - v38) >= 0x20)
      {
        int v43 = v35;
        uint64_t v44 = v34;
        uint64_t v45 = v9 & 0x3FFFFFFE0;
        do
        {
          long long v46 = *v43;
          *((_OWORD *)v44 - 1) = *(v43 - 1);
          *(_OWORD *)uint64_t v44 = v46;
          v44 += 32;
          v43 += 2;
          v45 -= 32;
        }
        while (v45);
        if (v9 == v32) {
          goto LABEL_34;
        }
        if ((v9 & 0x18) != 0)
        {
          v39 += v17;
          uint64_t v47 = j;
          int v48 = v36;
          unint64_t v49 = v17 - (v9 & 0x3FFFFFFE0);
          do
          {
            uint64_t v50 = *v48++;
            *(void *)uint64_t v47 = v50;
            v47 += 8;
            v49 -= 8;
          }
          while (v49);
          if (v9 == v17) {
            goto LABEL_34;
          }
          v38 += v17;
          int v40 = v9 & 0xFFFFFFF8;
        }
        else
        {
          v38 += v32;
          v39 += v32;
          int v40 = v9 & 0xFFFFFFE0;
        }
      }
      else
      {
        int v40 = 0;
      }
      unsigned int v41 = v40 + 1;
      do
      {
        char v42 = *v38++;
        *v39++ = v42;
        BOOL v30 = v8 > v41++;
      }
      while (v30);
LABEL_34:
      ++v31;
      v34 += 64;
      uint64_t v35 = (long long *)((char *)v35 + v7);
      char v36 = (uint64_t *)((char *)v36 + v7);
      if (v31 == v2) {
        return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v51, 64, *(int32x4_t **)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
      }
    }
  }
  for (uint64_t k = 0; k != v2; ++k)
  {
    uint64_t v14 = 0;
    do
    {
      v5[v14] = *(unsigned char *)(v6 + v14);
      ++v14;
    }
    while (v8 > v14);
    v5 += 64;
    v6 += v7;
  }
  return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v51, 64, *(int32x4_t **)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE16ELj1ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v75 = *MEMORY[0x263EF8340];
  AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressMacroblock(v74, *(int64x2_t **)(a1 + 40), *(unsigned __int8 **)(a1 + 48));
  uint64_t v2 = *(unsigned int *)(a1 + 80);
  if (v2 && *(_DWORD *)(a1 + 84))
  {
    unint64_t v3 = (unint64_t)*(unsigned int *)(a1 + 72) << 6;
    uint64_t v4 = 4 * *(unsigned int *)(a1 + 76);
    uint64_t v5 = &v74[0].i8[v3 + v4];
    uint64_t v6 = *(void *)(a1 + 56);
    uint64_t v7 = *(void *)(a1 + 64);
    unint64_t v8 = 4 * *(unsigned int *)(a1 + 84);
    if (v8 <= 1) {
      unint64_t v9 = 1;
    }
    else {
      unint64_t v9 = 4 * *(unsigned int *)(a1 + 84);
    }
    if (v9 <= 7)
    {
      for (uint64_t i = 0; i != v2; ++i)
      {
        uint64_t v11 = 0;
        do
        {
          v5[v11] = *(unsigned char *)(v6 + v11);
          ++v11;
        }
        while (v8 > v11);
        v5 += 64;
        v6 += v7;
      }
      goto LABEL_20;
    }
    if (v9) {
      BOOL v12 = (v9 - 1) >> 32 == 0;
    }
    else {
      BOOL v12 = 0;
    }
    if (!v12)
    {
      for (uint64_t j = 0; j != v2; ++j)
      {
        uint64_t v14 = 0;
        do
        {
          v5[v14] = *(unsigned char *)(v6 + v14);
          ++v14;
        }
        while (v8 > v14);
        v5 += 64;
        v6 += v7;
      }
      goto LABEL_20;
    }
    uint64_t v39 = &v74[0].i8[v3 + v4];
    uint64_t v40 = v9 & 0x3FFFFFFF8;
    if (v9 < 0x20)
    {
      uint64_t v41 = 0;
      char v42 = &v74[0].i8[v3 + v4];
      int v43 = *(uint64_t **)(a1 + 56);
      while (1)
      {
        uint64_t v44 = (char *)(v6 + v7 * v41);
        uint64_t v45 = &v5[64 * v41];
        if ((unint64_t)(&v39[64 * v41] - v44) > 0x1F)
        {
          v45 += v40;
          uint64_t v47 = v42;
          int v48 = v43;
          uint64_t v49 = v9 & 0x3FFFFFFF8;
          do
          {
            uint64_t v50 = *v48++;
            *(void *)uint64_t v47 = v50;
            v47 += 8;
            v49 -= 8;
          }
          while (v49);
          if (v9 == v40) {
            goto LABEL_36;
          }
          v44 += v40;
          int v46 = v9 & 0xFFFFFFF8;
        }
        else
        {
          int v46 = 0;
        }
        unsigned int v51 = v46 + 1;
        do
        {
          char v52 = *v44++;
          *v45++ = v52;
          BOOL v53 = v8 > v51++;
        }
        while (v53);
LABEL_36:
        ++v41;
        int v43 = (uint64_t *)((char *)v43 + v7);
        v42 += 64;
        if (v41 == v2) {
          goto LABEL_20;
        }
      }
    }
    uint64_t v54 = 0;
    uint64_t v55 = v9 & 0x3FFFFFFE0;
    unsigned int v56 = &v74[0].i8[v3 + v4];
    char v57 = &v74[1].i8[v3 + v4];
    int64x2_t v58 = (long long *)(v6 + 16);
    int64x2_t v59 = (uint64_t *)(v6 + (v9 & 0x3FFFFFFE0));
    uint64_t v60 = &v56[v9 & 0x3FFFFFFE0];
    do
    {
      long long v61 = (char *)(v6 + v7 * v54);
      int64x2_t v62 = &v5[64 * v54];
      if ((unint64_t)(&v39[64 * v54] - v61) >= 0x20)
      {
        int v66 = v58;
        uint64_t v67 = v57;
        uint64_t v68 = v9 & 0x3FFFFFFE0;
        do
        {
          long long v69 = *v66;
          *((_OWORD *)v67 - 1) = *(v66 - 1);
          *(_OWORD *)uint64_t v67 = v69;
          v67 += 32;
          v66 += 2;
          v68 -= 32;
        }
        while (v68);
        if (v9 == v55) {
          goto LABEL_47;
        }
        if ((v9 & 0x18) != 0)
        {
          v62 += v40;
          uint64_t v70 = v60;
          uint64_t v71 = v59;
          unint64_t v72 = v40 - (v9 & 0x3FFFFFFE0);
          do
          {
            uint64_t v73 = *v71++;
            *(void *)uint64_t v70 = v73;
            v70 += 8;
            v72 -= 8;
          }
          while (v72);
          if (v9 == v40) {
            goto LABEL_47;
          }
          v61 += v40;
          int v63 = v9 & 0xFFFFFFF8;
        }
        else
        {
          v61 += v55;
          v62 += v55;
          int v63 = v9 & 0xFFFFFFE0;
        }
      }
      else
      {
        int v63 = 0;
      }
      unsigned int v64 = v63 + 1;
      do
      {
        char v65 = *v61++;
        *v62++ = v65;
        BOOL v53 = v8 > v64++;
      }
      while (v53);
LABEL_47:
      ++v54;
      v57 += 64;
      int64x2_t v58 = (long long *)((char *)v58 + v7);
      int64x2_t v59 = (uint64_t *)((char *)v59 + v7);
      v60 += 64;
    }
    while (v54 != v2);
  }
LABEL_20:
  uint64_t v15 = 0;
  int64x2_t v16 = *(int64x2_t **)(a1 + 40);
  uint64_t v17 = *(char **)(a1 + 48);
  int v18 = *(unsigned __int8 *)(a1 + 88);
  int v19 = *(unsigned __int8 *)(a1 + 89);
  do
  {
    uint64_t v34 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,1u>::kSubblockPositions[v15 + 1];
    uint64_t v35 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,1u>::kSubblockPositions[v15];
    LODWORD(result) = (v18 - 8 * v35) & ~((v18 - 8 * (int)v35) >> 31);
    if (result >= 8) {
      uint64_t result = 8;
    }
    else {
      uint64_t result = result;
    }
    unsigned int v37 = (v19 - 4 * v34) & ~((v19 - 4 * (int)v34) >> 31);
    if (v37 >= 4) {
      unsigned int v37 = 4;
    }
    if (result) {
      BOOL v38 = v37 == 0;
    }
    else {
      BOOL v38 = 1;
    }
    if (v38)
    {
      char v33 = 0;
    }
    else
    {
      uint64_t v20 = &v74[16 * v34 + 2 * v35];
      int64x2_t v21 = v20[1];
      int64x2_t v22 = v20[4];
      int64x2_t v23 = v20[5];
      int64x2_t v24 = vzip1q_s64(*v20, v22);
      int64x2_t v25 = vzip2q_s64(*v20, v22);
      int64x2_t v26 = vzip1q_s64(v21, v23);
      int64x2_t v27 = vzip2q_s64(v21, v23);
      int64x2_t v28 = v20[8];
      int64x2_t v29 = v20[9];
      v20 += 12;
      int64x2_t v30 = v20[1];
      int64x2_t v31 = vzip1q_s64(v28, *v20);
      int64x2_t v32 = vzip2q_s64(v28, *v20);
      *int64x2_t v16 = v24;
      v16[1] = v25;
      v16[2] = v31;
      v16[3] = v32;
      v16[4] = v26;
      v16[5] = v27;
      v16[6] = vzip1q_s64(v29, v30);
      v16[7] = vzip2q_s64(v29, v30);
      v16 += 8;
      char v33 = 127;
    }
    *v17++ = v33;
    v15 += 2;
  }
  while (v15 != 16);
  return result;
}

unint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE16ELj1ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v52 = *MEMORY[0x263EF8340];
  AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressMacroblock(v51, *(int64x2_t **)(a1 + 40), *(unsigned __int8 **)(a1 + 48));
  uint64_t v2 = *(unsigned int *)(a1 + 80);
  if (!v2 || !*(_DWORD *)(a1 + 84)) {
    return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v51, 64, *(int32x4_t **)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
  }
  unint64_t v3 = (unint64_t)*(unsigned int *)(a1 + 72) << 6;
  uint64_t v4 = 4 * *(unsigned int *)(a1 + 76);
  uint64_t v5 = &v51[0].i8[v3 + v4];
  uint64_t v6 = *(void *)(a1 + 56);
  uint64_t v7 = *(void *)(a1 + 64);
  unint64_t v8 = 4 * *(unsigned int *)(a1 + 84);
  if (v8 <= 1) {
    unint64_t v9 = 1;
  }
  else {
    unint64_t v9 = 4 * *(unsigned int *)(a1 + 84);
  }
  if (v9 <= 7)
  {
    for (uint64_t i = 0; i != v2; ++i)
    {
      uint64_t v11 = 0;
      do
      {
        v5[v11] = *(unsigned char *)(v6 + v11);
        ++v11;
      }
      while (v8 > v11);
      v5 += 64;
      v6 += v7;
    }
    return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v51, 64, *(int32x4_t **)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
  }
  if (v9) {
    BOOL v12 = (v9 - 1) >> 32 == 0;
  }
  else {
    BOOL v12 = 0;
  }
  if (v12)
  {
    int64x2_t v16 = &v51[0].i8[v3 + v4];
    uint64_t v17 = v9 & 0x3FFFFFFF8;
    if (v9 < 0x20)
    {
      uint64_t v18 = 0;
      int v19 = &v51[0].i8[v3 + v4];
      uint64_t v20 = *(uint64_t **)(a1 + 56);
      while (1)
      {
        int64x2_t v21 = (char *)(v6 + v7 * v18);
        int64x2_t v22 = &v5[64 * v18];
        if ((unint64_t)(&v16[64 * v18] - v21) > 0x1F)
        {
          v22 += v17;
          int64x2_t v24 = v19;
          int64x2_t v25 = v20;
          uint64_t v26 = v9 & 0x3FFFFFFF8;
          do
          {
            uint64_t v27 = *v25++;
            *(void *)int64x2_t v24 = v27;
            v24 += 8;
            v26 -= 8;
          }
          while (v26);
          if (v9 == v17) {
            goto LABEL_23;
          }
          v21 += v17;
          int v23 = v9 & 0xFFFFFFF8;
        }
        else
        {
          int v23 = 0;
        }
        unsigned int v28 = v23 + 1;
        do
        {
          char v29 = *v21++;
          *v22++ = v29;
          BOOL v30 = v8 > v28++;
        }
        while (v30);
LABEL_23:
        ++v18;
        uint64_t v20 = (uint64_t *)((char *)v20 + v7);
        v19 += 64;
        if (v18 == v2) {
          return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v51, 64, *(int32x4_t **)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
        }
      }
    }
    uint64_t v31 = 0;
    uint64_t v32 = v9 & 0x3FFFFFFE0;
    char v33 = &v51[0].i8[v3 + v4];
    uint64_t v34 = &v51[1].i8[v3 + v4];
    uint64_t v35 = (long long *)(v6 + 16);
    char v36 = (uint64_t *)(v6 + (v9 & 0x3FFFFFFE0));
    for (uint64_t j = &v33[v9 & 0x3FFFFFFE0]; ; j += 64)
    {
      BOOL v38 = (char *)(v6 + v7 * v31);
      uint64_t v39 = &v5[64 * v31];
      if ((unint64_t)(&v16[64 * v31] - v38) >= 0x20)
      {
        int v43 = v35;
        uint64_t v44 = v34;
        uint64_t v45 = v9 & 0x3FFFFFFE0;
        do
        {
          long long v46 = *v43;
          *((_OWORD *)v44 - 1) = *(v43 - 1);
          *(_OWORD *)uint64_t v44 = v46;
          v44 += 32;
          v43 += 2;
          v45 -= 32;
        }
        while (v45);
        if (v9 == v32) {
          goto LABEL_34;
        }
        if ((v9 & 0x18) != 0)
        {
          v39 += v17;
          uint64_t v47 = j;
          int v48 = v36;
          unint64_t v49 = v17 - (v9 & 0x3FFFFFFE0);
          do
          {
            uint64_t v50 = *v48++;
            *(void *)uint64_t v47 = v50;
            v47 += 8;
            v49 -= 8;
          }
          while (v49);
          if (v9 == v17) {
            goto LABEL_34;
          }
          v38 += v17;
          int v40 = v9 & 0xFFFFFFF8;
        }
        else
        {
          v38 += v32;
          v39 += v32;
          int v40 = v9 & 0xFFFFFFE0;
        }
      }
      else
      {
        int v40 = 0;
      }
      unsigned int v41 = v40 + 1;
      do
      {
        char v42 = *v38++;
        *v39++ = v42;
        BOOL v30 = v8 > v41++;
      }
      while (v30);
LABEL_34:
      ++v31;
      v34 += 64;
      uint64_t v35 = (long long *)((char *)v35 + v7);
      char v36 = (uint64_t *)((char *)v36 + v7);
      if (v31 == v2) {
        return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v51, 64, *(int32x4_t **)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
      }
    }
  }
  for (uint64_t k = 0; k != v2; ++k)
  {
    uint64_t v14 = 0;
    do
    {
      v5[v14] = *(unsigned char *)(v6 + v14);
      ++v14;
    }
    while (v8 > v14);
    v5 += 64;
    v6 += v7;
  }
  return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v51, 64, *(int32x4_t **)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
}

float32x2x2_t *___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE3ELj1ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1, __n128 a2, int32x4_t a3, int32x4_t a4, int32x4_t a5)
{
  uint64_t v56 = *MEMORY[0x263EF8340];
  AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressMacroblock((uint64_t)v55, *(void *)(a1 + 40), *(unsigned __int8 **)(a1 + 48), a2, a3, a4, a5);
  uint64_t v6 = *(unsigned int *)(a1 + 80);
  if (!v6 || !*(_DWORD *)(a1 + 84)) {
    return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock(v55, 32, *(void *)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
  }
  uint64_t v7 = 2 * *(unsigned int *)(a1 + 72);
  uint64_t v8 = 2 * *(unsigned int *)(a1 + 76);
  unint64_t v9 = (char *)&v55[v7] + v8;
  uint64_t v10 = *(void *)(a1 + 56);
  uint64_t v11 = *(void *)(a1 + 64);
  unint64_t v12 = 2 * *(unsigned int *)(a1 + 84);
  if (v12 <= 1) {
    unint64_t v13 = 1;
  }
  else {
    unint64_t v13 = 2 * *(unsigned int *)(a1 + 84);
  }
  if (v13 <= 7)
  {
    for (uint64_t i = 0; i != v6; ++i)
    {
      uint64_t v15 = 0;
      do
      {
        v9[v15] = *(unsigned char *)(v10 + v15);
        ++v15;
      }
      while (v12 > v15);
      v9 += 32;
      v10 += v11;
    }
    return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock(v55, 32, *(void *)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
  }
  if (v13) {
    BOOL v16 = (v13 - 1) >> 32 == 0;
  }
  else {
    BOOL v16 = 0;
  }
  if (v16)
  {
    uint64_t v20 = (char *)&v55[v7] + v8;
    uint64_t v21 = v13 & 0x1FFFFFFF8;
    if (v13 < 0x20)
    {
      uint64_t v22 = 0;
      int v23 = (char *)&v55[v7] + v8;
      int64x2_t v24 = *(uint64_t **)(a1 + 56);
      while (1)
      {
        int64x2_t v25 = (char *)(v10 + v11 * v22);
        uint64_t v26 = &v9[32 * v22];
        if ((unint64_t)(&v20[32 * v22] - v25) > 0x1F)
        {
          v26 += v21;
          unsigned int v28 = v23;
          char v29 = v24;
          uint64_t v30 = v13 & 0x1FFFFFFF8;
          do
          {
            uint64_t v31 = *v29++;
            *v28++ = v31;
            v30 -= 8;
          }
          while (v30);
          if (v13 == v21) {
            goto LABEL_23;
          }
          v25 += v21;
          int v27 = v13 & 0xFFFFFFF8;
        }
        else
        {
          int v27 = 0;
        }
        unsigned int v32 = v27 + 1;
        do
        {
          char v33 = *v25++;
          *v26++ = v33;
          BOOL v34 = v12 > v32++;
        }
        while (v34);
LABEL_23:
        ++v22;
        int64x2_t v24 = (uint64_t *)((char *)v24 + v11);
        v23 += 32;
        if (v22 == v6) {
          return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock(v55, 32, *(void *)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
        }
      }
    }
    uint64_t v35 = 0;
    uint64_t v36 = v13 & 0x1FFFFFFE0;
    unsigned int v37 = (char *)&v55[v7] + v8;
    BOOL v38 = (char *)&v55[v7 + 1] + v8;
    uint64_t v39 = (long long *)(v10 + 16);
    int v40 = (uint64_t *)(v10 + (v13 & 0x1FFFFFFE0));
    for (uint64_t j = &v37[v13 & 0x1FFFFFFE0]; ; j += 32)
    {
      char v42 = (char *)(v10 + v11 * v35);
      int v43 = &v9[32 * v35];
      if ((unint64_t)(&v20[32 * v35] - v42) >= 0x20)
      {
        uint64_t v47 = v39;
        int v48 = v38;
        uint64_t v49 = v13 & 0x1FFFFFFE0;
        do
        {
          long long v50 = *v47;
          *(v48 - 1) = *(v47 - 1);
          *int v48 = v50;
          v48 += 2;
          v47 += 2;
          v49 -= 32;
        }
        while (v49);
        if (v13 == v36) {
          goto LABEL_34;
        }
        if ((v13 & 0x18) != 0)
        {
          v43 += v21;
          unsigned int v51 = j;
          uint64_t v52 = v40;
          unint64_t v53 = v21 - (v13 & 0x1FFFFFFE0);
          do
          {
            uint64_t v54 = *v52++;
            *(void *)unsigned int v51 = v54;
            v51 += 8;
            v53 -= 8;
          }
          while (v53);
          if (v13 == v21) {
            goto LABEL_34;
          }
          v42 += v21;
          int v44 = v13 & 0xFFFFFFF8;
        }
        else
        {
          v42 += v36;
          v43 += v36;
          int v44 = v13 & 0xFFFFFFE0;
        }
      }
      else
      {
        int v44 = 0;
      }
      unsigned int v45 = v44 + 1;
      do
      {
        char v46 = *v42++;
        *v43++ = v46;
        BOOL v34 = v12 > v45++;
      }
      while (v34);
LABEL_34:
      ++v35;
      v38 += 32;
      uint64_t v39 = (long long *)((char *)v39 + v11);
      int v40 = (uint64_t *)((char *)v40 + v11);
      if (v35 == v6) {
        return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock(v55, 32, *(void *)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
      }
    }
  }
  for (uint64_t k = 0; k != v6; ++k)
  {
    uint64_t v18 = 0;
    do
    {
      v9[v18] = *(unsigned char *)(v10 + v18);
      ++v18;
    }
    while (v12 > v18);
    v9 += 32;
    v10 += v11;
  }
  return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock(v55, 32, *(void *)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
}

unint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE3ELj1ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1, __n128 a2, int32x4_t a3, int32x4_t a4, int32x4_t a5)
{
  uint64_t v63 = *MEMORY[0x263EF8340];
  AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressMacroblock((uint64_t)v62, *(void *)(a1 + 40), *(unsigned __int8 **)(a1 + 48), a2, a3, a4, a5);
  uint64_t v14 = *(unsigned int *)(a1 + 80);
  if (!v14 || !*(_DWORD *)(a1 + 84)) {
    return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v62, 32, *(int16x8_t **)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), *(double *)&v6, *(double *)&v7, v8, v9, v10, v11, v12, v13);
  }
  uint64_t v15 = 32 * *(unsigned int *)(a1 + 72);
  uint64_t v16 = 2 * *(unsigned int *)(a1 + 76);
  uint64_t v17 = &v62[v15 + v16];
  uint64_t v18 = *(void *)(a1 + 56);
  uint64_t v19 = *(void *)(a1 + 64);
  unint64_t v20 = 2 * *(unsigned int *)(a1 + 84);
  if (v20 <= 1) {
    unint64_t v21 = 1;
  }
  else {
    unint64_t v21 = 2 * *(unsigned int *)(a1 + 84);
  }
  if (v21 <= 7)
  {
    for (uint64_t i = 0; i != v14; ++i)
    {
      uint64_t v23 = 0;
      do
      {
        v17[v23] = *(unsigned char *)(v18 + v23);
        ++v23;
      }
      while (v20 > v23);
      v17 += 32;
      v18 += v19;
    }
    return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v62, 32, *(int16x8_t **)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), *(double *)&v6, *(double *)&v7, v8, v9, v10, v11, v12, v13);
  }
  if (v21) {
    BOOL v24 = (v21 - 1) >> 32 == 0;
  }
  else {
    BOOL v24 = 0;
  }
  if (v24)
  {
    unsigned int v28 = &v62[v15 + v16];
    uint64_t v29 = v21 & 0x1FFFFFFF8;
    if (v21 < 0x20)
    {
      uint64_t v30 = 0;
      uint64_t v31 = &v62[v15 + v16];
      unsigned int v32 = *(uint64_t **)(a1 + 56);
      while (1)
      {
        char v33 = (char *)(v18 + v19 * v30);
        BOOL v34 = &v17[32 * v30];
        if ((unint64_t)(&v28[32 * v30] - v33) > 0x1F)
        {
          v34 += v29;
          uint64_t v36 = v31;
          unsigned int v37 = v32;
          uint64_t v38 = v21 & 0x1FFFFFFF8;
          do
          {
            uint64_t v39 = *v37++;
            *(void *)&long long v6 = v39;
            *v36++ = v39;
            v38 -= 8;
          }
          while (v38);
          if (v21 == v29) {
            goto LABEL_23;
          }
          v33 += v29;
          int v35 = v21 & 0xFFFFFFF8;
        }
        else
        {
          int v35 = 0;
        }
        unsigned int v40 = v35 + 1;
        do
        {
          char v41 = *v33++;
          *v34++ = v41;
          BOOL v42 = v20 > v40++;
        }
        while (v42);
LABEL_23:
        ++v30;
        unsigned int v32 = (uint64_t *)((char *)v32 + v19);
        v31 += 32;
        if (v30 == v14) {
          return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v62, 32, *(int16x8_t **)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), *(double *)&v6, *(double *)&v7, v8, v9, v10, v11, v12, v13);
        }
      }
    }
    uint64_t v43 = 0;
    uint64_t v44 = v21 & 0x1FFFFFFE0;
    unsigned int v45 = &v62[v15 + v16];
    char v46 = &v62[v15 + 16 + v16];
    uint64_t v47 = (long long *)(v18 + 16);
    int v48 = (uint64_t *)(v18 + (v21 & 0x1FFFFFFE0));
    for (uint64_t j = &v45[v21 & 0x1FFFFFFE0]; ; j += 4)
    {
      long long v50 = (char *)(v18 + v19 * v43);
      unsigned int v51 = &v17[32 * v43];
      if ((unint64_t)(&v28[32 * v43] - v50) >= 0x20)
      {
        uint64_t v55 = v47;
        uint64_t v56 = v46;
        uint64_t v57 = v21 & 0x1FFFFFFE0;
        do
        {
          long long v6 = *(v55 - 1);
          long long v7 = *v55;
          *(v56 - 1) = v6;
          *uint64_t v56 = v7;
          v56 += 2;
          v55 += 2;
          v57 -= 32;
        }
        while (v57);
        if (v21 == v44) {
          goto LABEL_34;
        }
        if ((v21 & 0x18) != 0)
        {
          v51 += v29;
          int64x2_t v58 = j;
          int64x2_t v59 = v48;
          unint64_t v60 = v29 - (v21 & 0x1FFFFFFE0);
          do
          {
            uint64_t v61 = *v59++;
            *(void *)&long long v6 = v61;
            *v58++ = v61;
            v60 -= 8;
          }
          while (v60);
          if (v21 == v29) {
            goto LABEL_34;
          }
          v50 += v29;
          int v52 = v21 & 0xFFFFFFF8;
        }
        else
        {
          v50 += v44;
          v51 += v44;
          int v52 = v21 & 0xFFFFFFE0;
        }
      }
      else
      {
        int v52 = 0;
      }
      unsigned int v53 = v52 + 1;
      do
      {
        char v54 = *v50++;
        *v51++ = v54;
        BOOL v42 = v20 > v53++;
      }
      while (v42);
LABEL_34:
      ++v43;
      v46 += 32;
      uint64_t v47 = (long long *)((char *)v47 + v19);
      int v48 = (uint64_t *)((char *)v48 + v19);
      if (v43 == v14) {
        return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v62, 32, *(int16x8_t **)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), *(double *)&v6, *(double *)&v7, v8, v9, v10, v11, v12, v13);
      }
    }
  }
  for (uint64_t k = 0; k != v14; ++k)
  {
    uint64_t v26 = 0;
    do
    {
      v17[v26] = *(unsigned char *)(v18 + v26);
      ++v26;
    }
    while (v20 > v26);
    v17 += 32;
    v18 += v19;
  }
  return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v62, 32, *(int16x8_t **)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), *(double *)&v6, *(double *)&v7, v8, v9, v10, v11, v12, v13);
}

float32x2x2_t *___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE3ELj1ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1, __n128 a2, int32x4_t a3, int32x4_t a4, int32x4_t a5)
{
  uint64_t v56 = *MEMORY[0x263EF8340];
  AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressMacroblock((uint64_t)v55, *(void *)(a1 + 40), *(unsigned __int8 **)(a1 + 48), a2, a3, a4, a5);
  uint64_t v6 = *(unsigned int *)(a1 + 80);
  if (!v6 || !*(_DWORD *)(a1 + 84)) {
    return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock(v55, 32, *(void *)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
  }
  uint64_t v7 = 2 * *(unsigned int *)(a1 + 72);
  uint64_t v8 = 2 * *(unsigned int *)(a1 + 76);
  double v9 = (char *)&v55[v7] + v8;
  uint64_t v10 = *(void *)(a1 + 56);
  uint64_t v11 = *(void *)(a1 + 64);
  unint64_t v12 = 2 * *(unsigned int *)(a1 + 84);
  if (v12 <= 1) {
    unint64_t v13 = 1;
  }
  else {
    unint64_t v13 = 2 * *(unsigned int *)(a1 + 84);
  }
  if (v13 <= 7)
  {
    for (uint64_t i = 0; i != v6; ++i)
    {
      uint64_t v15 = 0;
      do
      {
        v9[v15] = *(unsigned char *)(v10 + v15);
        ++v15;
      }
      while (v12 > v15);
      v9 += 32;
      v10 += v11;
    }
    return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock(v55, 32, *(void *)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
  }
  if (v13) {
    BOOL v16 = (v13 - 1) >> 32 == 0;
  }
  else {
    BOOL v16 = 0;
  }
  if (v16)
  {
    unint64_t v20 = (char *)&v55[v7] + v8;
    uint64_t v21 = v13 & 0x1FFFFFFF8;
    if (v13 < 0x20)
    {
      uint64_t v22 = 0;
      uint64_t v23 = (char *)&v55[v7] + v8;
      BOOL v24 = *(uint64_t **)(a1 + 56);
      while (1)
      {
        int64x2_t v25 = (char *)(v10 + v11 * v22);
        uint64_t v26 = &v9[32 * v22];
        if ((unint64_t)(&v20[32 * v22] - v25) > 0x1F)
        {
          v26 += v21;
          unsigned int v28 = v23;
          uint64_t v29 = v24;
          uint64_t v30 = v13 & 0x1FFFFFFF8;
          do
          {
            uint64_t v31 = *v29++;
            *v28++ = v31;
            v30 -= 8;
          }
          while (v30);
          if (v13 == v21) {
            goto LABEL_23;
          }
          v25 += v21;
          int v27 = v13 & 0xFFFFFFF8;
        }
        else
        {
          int v27 = 0;
        }
        unsigned int v32 = v27 + 1;
        do
        {
          char v33 = *v25++;
          *v26++ = v33;
          BOOL v34 = v12 > v32++;
        }
        while (v34);
LABEL_23:
        ++v22;
        BOOL v24 = (uint64_t *)((char *)v24 + v11);
        v23 += 32;
        if (v22 == v6) {
          return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock(v55, 32, *(void *)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
        }
      }
    }
    uint64_t v35 = 0;
    uint64_t v36 = v13 & 0x1FFFFFFE0;
    unsigned int v37 = (char *)&v55[v7] + v8;
    uint64_t v38 = (char *)&v55[v7 + 1] + v8;
    uint64_t v39 = (long long *)(v10 + 16);
    unsigned int v40 = (uint64_t *)(v10 + (v13 & 0x1FFFFFFE0));
    for (uint64_t j = &v37[v13 & 0x1FFFFFFE0]; ; j += 32)
    {
      BOOL v42 = (char *)(v10 + v11 * v35);
      uint64_t v43 = &v9[32 * v35];
      if ((unint64_t)(&v20[32 * v35] - v42) >= 0x20)
      {
        uint64_t v47 = v39;
        int v48 = v38;
        uint64_t v49 = v13 & 0x1FFFFFFE0;
        do
        {
          long long v50 = *v47;
          *(v48 - 1) = *(v47 - 1);
          *int v48 = v50;
          v48 += 2;
          v47 += 2;
          v49 -= 32;
        }
        while (v49);
        if (v13 == v36) {
          goto LABEL_34;
        }
        if ((v13 & 0x18) != 0)
        {
          v43 += v21;
          unsigned int v51 = j;
          int v52 = v40;
          unint64_t v53 = v21 - (v13 & 0x1FFFFFFE0);
          do
          {
            uint64_t v54 = *v52++;
            *(void *)unsigned int v51 = v54;
            v51 += 8;
            v53 -= 8;
          }
          while (v53);
          if (v13 == v21) {
            goto LABEL_34;
          }
          v42 += v21;
          int v44 = v13 & 0xFFFFFFF8;
        }
        else
        {
          v42 += v36;
          v43 += v36;
          int v44 = v13 & 0xFFFFFFE0;
        }
      }
      else
      {
        int v44 = 0;
      }
      unsigned int v45 = v44 + 1;
      do
      {
        char v46 = *v42++;
        *v43++ = v46;
        BOOL v34 = v12 > v45++;
      }
      while (v34);
LABEL_34:
      ++v35;
      v38 += 32;
      uint64_t v39 = (long long *)((char *)v39 + v11);
      unsigned int v40 = (uint64_t *)((char *)v40 + v11);
      if (v35 == v6) {
        return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock(v55, 32, *(void *)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
      }
    }
  }
  for (uint64_t k = 0; k != v6; ++k)
  {
    uint64_t v18 = 0;
    do
    {
      v9[v18] = *(unsigned char *)(v10 + v18);
      ++v18;
    }
    while (v12 > v18);
    v9 += 32;
    v10 += v11;
  }
  return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock(v55, 32, *(void *)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
}

unint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE3ELj1ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1, __n128 a2, int32x4_t a3, int32x4_t a4, int32x4_t a5)
{
  uint64_t v63 = *MEMORY[0x263EF8340];
  AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressMacroblock((uint64_t)v62, *(void *)(a1 + 40), *(unsigned __int8 **)(a1 + 48), a2, a3, a4, a5);
  uint64_t v14 = *(unsigned int *)(a1 + 80);
  if (!v14 || !*(_DWORD *)(a1 + 84)) {
    return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v62, 32, *(int16x8_t **)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), *(double *)&v6, *(double *)&v7, v8, v9, v10, v11, v12, v13);
  }
  uint64_t v15 = 32 * *(unsigned int *)(a1 + 72);
  uint64_t v16 = 2 * *(unsigned int *)(a1 + 76);
  uint64_t v17 = &v62[v15 + v16];
  uint64_t v18 = *(void *)(a1 + 56);
  uint64_t v19 = *(void *)(a1 + 64);
  unint64_t v20 = 2 * *(unsigned int *)(a1 + 84);
  if (v20 <= 1) {
    unint64_t v21 = 1;
  }
  else {
    unint64_t v21 = 2 * *(unsigned int *)(a1 + 84);
  }
  if (v21 <= 7)
  {
    for (uint64_t i = 0; i != v14; ++i)
    {
      uint64_t v23 = 0;
      do
      {
        v17[v23] = *(unsigned char *)(v18 + v23);
        ++v23;
      }
      while (v20 > v23);
      v17 += 32;
      v18 += v19;
    }
    return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v62, 32, *(int16x8_t **)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), *(double *)&v6, *(double *)&v7, v8, v9, v10, v11, v12, v13);
  }
  if (v21) {
    BOOL v24 = (v21 - 1) >> 32 == 0;
  }
  else {
    BOOL v24 = 0;
  }
  if (v24)
  {
    unsigned int v28 = &v62[v15 + v16];
    uint64_t v29 = v21 & 0x1FFFFFFF8;
    if (v21 < 0x20)
    {
      uint64_t v30 = 0;
      uint64_t v31 = &v62[v15 + v16];
      unsigned int v32 = *(uint64_t **)(a1 + 56);
      while (1)
      {
        char v33 = (char *)(v18 + v19 * v30);
        BOOL v34 = &v17[32 * v30];
        if ((unint64_t)(&v28[32 * v30] - v33) > 0x1F)
        {
          v34 += v29;
          uint64_t v36 = v31;
          unsigned int v37 = v32;
          uint64_t v38 = v21 & 0x1FFFFFFF8;
          do
          {
            uint64_t v39 = *v37++;
            *(void *)&long long v6 = v39;
            *v36++ = v39;
            v38 -= 8;
          }
          while (v38);
          if (v21 == v29) {
            goto LABEL_23;
          }
          v33 += v29;
          int v35 = v21 & 0xFFFFFFF8;
        }
        else
        {
          int v35 = 0;
        }
        unsigned int v40 = v35 + 1;
        do
        {
          char v41 = *v33++;
          *v34++ = v41;
          BOOL v42 = v20 > v40++;
        }
        while (v42);
LABEL_23:
        ++v30;
        unsigned int v32 = (uint64_t *)((char *)v32 + v19);
        v31 += 32;
        if (v30 == v14) {
          return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v62, 32, *(int16x8_t **)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), *(double *)&v6, *(double *)&v7, v8, v9, v10, v11, v12, v13);
        }
      }
    }
    uint64_t v43 = 0;
    uint64_t v44 = v21 & 0x1FFFFFFE0;
    unsigned int v45 = &v62[v15 + v16];
    char v46 = &v62[v15 + 16 + v16];
    uint64_t v47 = (long long *)(v18 + 16);
    int v48 = (uint64_t *)(v18 + (v21 & 0x1FFFFFFE0));
    for (uint64_t j = &v45[v21 & 0x1FFFFFFE0]; ; j += 4)
    {
      long long v50 = (char *)(v18 + v19 * v43);
      unsigned int v51 = &v17[32 * v43];
      if ((unint64_t)(&v28[32 * v43] - v50) >= 0x20)
      {
        uint64_t v55 = v47;
        uint64_t v56 = v46;
        uint64_t v57 = v21 & 0x1FFFFFFE0;
        do
        {
          long long v6 = *(v55 - 1);
          long long v7 = *v55;
          *(v56 - 1) = v6;
          *uint64_t v56 = v7;
          v56 += 2;
          v55 += 2;
          v57 -= 32;
        }
        while (v57);
        if (v21 == v44) {
          goto LABEL_34;
        }
        if ((v21 & 0x18) != 0)
        {
          v51 += v29;
          int64x2_t v58 = j;
          int64x2_t v59 = v48;
          unint64_t v60 = v29 - (v21 & 0x1FFFFFFE0);
          do
          {
            uint64_t v61 = *v59++;
            *(void *)&long long v6 = v61;
            *v58++ = v61;
            v60 -= 8;
          }
          while (v60);
          if (v21 == v29) {
            goto LABEL_34;
          }
          v50 += v29;
          int v52 = v21 & 0xFFFFFFF8;
        }
        else
        {
          v50 += v44;
          v51 += v44;
          int v52 = v21 & 0xFFFFFFE0;
        }
      }
      else
      {
        int v52 = 0;
      }
      unsigned int v53 = v52 + 1;
      do
      {
        char v54 = *v50++;
        *v51++ = v54;
        BOOL v42 = v20 > v53++;
      }
      while (v42);
LABEL_34:
      ++v43;
      v46 += 32;
      uint64_t v47 = (long long *)((char *)v47 + v19);
      int v48 = (uint64_t *)((char *)v48 + v19);
      if (v43 == v14) {
        return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v62, 32, *(int16x8_t **)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), *(double *)&v6, *(double *)&v7, v8, v9, v10, v11, v12, v13);
      }
    }
  }
  for (uint64_t k = 0; k != v14; ++k)
  {
    uint64_t v26 = 0;
    do
    {
      v17[v26] = *(unsigned char *)(v18 + v26);
      ++v26;
    }
    while (v20 > v26);
    v17 += 32;
    v18 += v19;
  }
  return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v62, 32, *(int16x8_t **)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), *(double *)&v6, *(double *)&v7, v8, v9, v10, v11, v12, v13);
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE15ELj1ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v2 = 0;
  uint64_t v89 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(a1 + 40);
  uint64_t v4 = *(unsigned char **)(a1 + 48);
  do
  {
    long long v7 = (int64x2_t *)&v88[256
                         * (unint64_t)AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,1u>::kSubblockPositions[v2 + 1]
                         + 32
                         * AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,1u>::kSubblockPositions[v2]];
    unsigned int v8 = *v4;
    if (v8 == 127)
    {
      int64x2_t v9 = *(int64x2_t *)v3;
      int64x2_t v10 = *(int64x2_t *)(v3 + 16);
      int64x2_t v11 = *(int64x2_t *)(v3 + 32);
      int64x2_t v12 = *(int64x2_t *)(v3 + 48);
      int64x2_t v13 = *(int64x2_t *)(v3 + 64);
      int64x2_t v14 = *(int64x2_t *)(v3 + 80);
      int64x2_t v15 = *(int64x2_t *)(v3 + 96);
      int64x2_t v16 = *(int64x2_t *)(v3 + 112);
      *long long v7 = vzip1q_s64(*(int64x2_t *)v3, v10);
      v7[1] = vzip1q_s64(v13, v14);
      v7[4] = vzip2q_s64(v9, v10);
      v7[5] = vzip2q_s64(v13, v14);
      v7[8] = vzip1q_s64(v11, v12);
      v7[9] = vzip1q_s64(v15, v16);
      v7[12] = vzip2q_s64(v11, v12);
      v7[13] = vzip2q_s64(v15, v16);
      uint64_t v6 = 128;
    }
    else if (v8 == 3)
    {
      float32x4_t v5 = vld1q_dup_f32((const float *)v3);
      *long long v7 = (int64x2_t)v5;
      v7[1] = (int64x2_t)v5;
      v7[4] = (int64x2_t)v5;
      v7[5] = (int64x2_t)v5;
      v7[8] = (int64x2_t)v5;
      v7[9] = (int64x2_t)v5;
      v7[12] = (int64x2_t)v5;
      v7[13] = (int64x2_t)v5;
      uint64_t v6 = 4;
    }
    else if (*v4)
    {
      uint64_t v6 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v7, 64, v3, v8);
    }
    else
    {
      uint64_t v6 = 0;
      *long long v7 = 0u;
      v7[1] = 0u;
      v7[4] = 0u;
      v7[5] = 0u;
      v7[8] = 0u;
      v7[9] = 0u;
      v7[12] = 0u;
      v7[13] = 0u;
    }
    v3 += v6;
    ++v4;
    v2 += 2;
  }
  while (v2 != 16);
  uint64_t v17 = *(unsigned int *)(a1 + 80);
  if (!v17 || !*(_DWORD *)(a1 + 84)) {
    goto LABEL_39;
  }
  unint64_t v18 = (unint64_t)*(unsigned int *)(a1 + 72) << 6;
  uint64_t v19 = 4 * *(unsigned int *)(a1 + 76);
  unint64_t v20 = &v88[v18 + v19];
  uint64_t v21 = *(void *)(a1 + 56);
  uint64_t v22 = *(void *)(a1 + 64);
  unint64_t v23 = 4 * *(unsigned int *)(a1 + 84);
  if (v23 <= 1) {
    unint64_t v24 = 1;
  }
  else {
    unint64_t v24 = 4 * *(unsigned int *)(a1 + 84);
  }
  if (v24 > 7)
  {
    if (!v24 || (v24 - 1) >> 32)
    {
      for (uint64_t i = 0; i != v17; ++i)
      {
        uint64_t v43 = 0;
        do
        {
          v20[v43] = *(unsigned char *)(v21 + v43);
          ++v43;
        }
        while (v23 > v43);
        v20 += 64;
        v21 += v22;
      }
      goto LABEL_39;
    }
    int v27 = &v88[v18 + v19];
    uint64_t v28 = v24 & 0x3FFFFFFF8;
    if (v24 < 0x20)
    {
      uint64_t v29 = 0;
      uint64_t v30 = &v88[v18 + v19];
      uint64_t v31 = *(uint64_t **)(a1 + 56);
      while (1)
      {
        unsigned int v32 = (char *)(v21 + v22 * v29);
        char v33 = &v20[64 * v29];
        if ((unint64_t)(&v27[64 * v29] - v32) > 0x1F)
        {
          v33 += v28;
          int v35 = v30;
          uint64_t v36 = v31;
          uint64_t v37 = v24 & 0x3FFFFFFF8;
          do
          {
            uint64_t v38 = *v36++;
            *v35++ = v38;
            v37 -= 8;
          }
          while (v37);
          if (v24 == v28) {
            goto LABEL_25;
          }
          v32 += v28;
          int v34 = v24 & 0xFFFFFFF8;
        }
        else
        {
          int v34 = 0;
        }
        unsigned int v39 = v34 + 1;
        do
        {
          char v40 = *v32++;
          *v33++ = v40;
          BOOL v41 = v23 > v39++;
        }
        while (v41);
LABEL_25:
        ++v29;
        uint64_t v31 = (uint64_t *)((char *)v31 + v22);
        v30 += 64;
        if (v29 == v17) {
          goto LABEL_39;
        }
      }
    }
    uint64_t v68 = 0;
    uint64_t v69 = v24 & 0x3FFFFFFE0;
    uint64_t v70 = &v88[v18 + v19];
    uint64_t v71 = &v88[v18 + 16 + v19];
    unint64_t v72 = (long long *)(v21 + 16);
    uint64_t v73 = (uint64_t *)(v21 + (v24 & 0x3FFFFFFE0));
    unsigned int v74 = &v70[v24 & 0x3FFFFFFE0];
    while (1)
    {
      uint64_t v75 = (char *)(v21 + v22 * v68);
      unint64_t v76 = &v20[64 * v68];
      if ((unint64_t)(&v27[64 * v68] - v75) >= 0x20)
      {
        char v80 = v72;
        char v81 = v71;
        uint64_t v82 = v24 & 0x3FFFFFFE0;
        do
        {
          long long v83 = *v80;
          *(v81 - 1) = *(v80 - 1);
          _OWORD *v81 = v83;
          v81 += 2;
          v80 += 2;
          v82 -= 32;
        }
        while (v82);
        if (v24 == v69) {
          goto LABEL_54;
        }
        if ((v24 & 0x18) != 0)
        {
          v76 += v28;
          long long v84 = v74;
          uint64_t v85 = v73;
          unint64_t v86 = v28 - (v24 & 0x3FFFFFFE0);
          do
          {
            uint64_t v87 = *v85++;
            *v84++ = v87;
            v86 -= 8;
          }
          while (v86);
          if (v24 == v28) {
            goto LABEL_54;
          }
          v75 += v28;
          int v77 = v24 & 0xFFFFFFF8;
        }
        else
        {
          v75 += v69;
          v76 += v69;
          int v77 = v24 & 0xFFFFFFE0;
        }
      }
      else
      {
        int v77 = 0;
      }
      unsigned int v78 = v77 + 1;
      do
      {
        char v79 = *v75++;
        *v76++ = v79;
        BOOL v41 = v23 > v78++;
      }
      while (v41);
LABEL_54:
      ++v68;
      v71 += 64;
      unint64_t v72 = (long long *)((char *)v72 + v22);
      uint64_t v73 = (uint64_t *)((char *)v73 + v22);
      v74 += 8;
      if (v68 == v17) {
        goto LABEL_39;
      }
    }
  }
  for (uint64_t j = 0; j != v17; ++j)
  {
    uint64_t v26 = 0;
    do
    {
      v20[v26] = *(unsigned char *)(v21 + v26);
      ++v26;
    }
    while (v23 > v26);
    v20 += 64;
    v21 += v22;
  }
LABEL_39:
  uint64_t v44 = 0;
  unsigned int v45 = *(int64x2_t **)(a1 + 40);
  char v46 = *(char **)(a1 + 48);
  int v47 = *(unsigned __int8 *)(a1 + 88);
  int v48 = *(unsigned __int8 *)(a1 + 89);
  do
  {
    uint64_t v63 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,1u>::kSubblockPositions[v44 + 1];
    uint64_t v64 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,1u>::kSubblockPositions[v44];
    LODWORD(result) = (v47 - 8 * v64) & ~((v47 - 8 * (int)v64) >> 31);
    if (result >= 8) {
      uint64_t result = 8;
    }
    else {
      uint64_t result = result;
    }
    unsigned int v66 = (v48 - 4 * v63) & ~((v48 - 4 * (int)v63) >> 31);
    if (v66 >= 4) {
      unsigned int v66 = 4;
    }
    if (result) {
      BOOL v67 = v66 == 0;
    }
    else {
      BOOL v67 = 1;
    }
    if (v67)
    {
      char v62 = 0;
    }
    else
    {
      uint64_t v49 = (int64x2_t *)&v88[256 * v63 + 32 * v64];
      int64x2_t v50 = v49[1];
      int64x2_t v51 = v49[4];
      int64x2_t v52 = v49[5];
      int64x2_t v53 = vzip1q_s64(*v49, v51);
      int64x2_t v54 = vzip2q_s64(*v49, v51);
      int64x2_t v55 = vzip1q_s64(v50, v52);
      int64x2_t v56 = vzip2q_s64(v50, v52);
      int64x2_t v57 = v49[8];
      int64x2_t v58 = v49[9];
      v49 += 12;
      int64x2_t v59 = v49[1];
      int64x2_t v60 = vzip1q_s64(v57, *v49);
      int64x2_t v61 = vzip2q_s64(v57, *v49);
      *unsigned int v45 = v53;
      v45[1] = v54;
      v45[2] = v60;
      v45[3] = v61;
      v45[4] = v55;
      v45[5] = v56;
      v45[6] = vzip1q_s64(v58, v59);
      v45[7] = vzip2q_s64(v58, v59);
      v45 += 8;
      char v62 = 127;
    }
    *v46++ = v62;
    v44 += 2;
  }
  while (v44 != 16);
  return result;
}

unint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE15ELj1ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v2 = 0;
  uint64_t v66 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(a1 + 40);
  uint64_t v4 = *(unsigned char **)(a1 + 48);
  do
  {
    long long v7 = (int64x2_t *)&v65[256
                         * (unint64_t)AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,1u>::kSubblockPositions[v2 + 1]
                         + 32
                         * AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,1u>::kSubblockPositions[v2]];
    unsigned int v8 = *v4;
    if (v8 == 127)
    {
      int64x2_t v9 = *(int64x2_t *)v3;
      int64x2_t v10 = *(int64x2_t *)(v3 + 16);
      int64x2_t v11 = *(int64x2_t *)(v3 + 32);
      int64x2_t v12 = *(int64x2_t *)(v3 + 48);
      int64x2_t v13 = *(int64x2_t *)(v3 + 64);
      int64x2_t v14 = *(int64x2_t *)(v3 + 80);
      int64x2_t v15 = *(int64x2_t *)(v3 + 96);
      int64x2_t v16 = *(int64x2_t *)(v3 + 112);
      *long long v7 = vzip1q_s64(*(int64x2_t *)v3, v10);
      v7[1] = vzip1q_s64(v13, v14);
      v7[4] = vzip2q_s64(v9, v10);
      v7[5] = vzip2q_s64(v13, v14);
      v7[8] = vzip1q_s64(v11, v12);
      v7[9] = vzip1q_s64(v15, v16);
      v7[12] = vzip2q_s64(v11, v12);
      v7[13] = vzip2q_s64(v15, v16);
      uint64_t v6 = 128;
    }
    else if (v8 == 3)
    {
      float32x4_t v5 = vld1q_dup_f32((const float *)v3);
      *long long v7 = (int64x2_t)v5;
      v7[1] = (int64x2_t)v5;
      v7[4] = (int64x2_t)v5;
      v7[5] = (int64x2_t)v5;
      v7[8] = (int64x2_t)v5;
      v7[9] = (int64x2_t)v5;
      v7[12] = (int64x2_t)v5;
      v7[13] = (int64x2_t)v5;
      uint64_t v6 = 4;
    }
    else if (*v4)
    {
      uint64_t v6 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v7, 64, v3, v8);
    }
    else
    {
      uint64_t v6 = 0;
      *long long v7 = 0u;
      v7[1] = 0u;
      v7[4] = 0u;
      v7[5] = 0u;
      v7[8] = 0u;
      v7[9] = 0u;
      v7[12] = 0u;
      v7[13] = 0u;
    }
    v3 += v6;
    ++v4;
    v2 += 2;
  }
  while (v2 != 16);
  uint64_t v17 = *(unsigned int *)(a1 + 80);
  if (v17 && *(_DWORD *)(a1 + 84))
  {
    unint64_t v18 = (unint64_t)*(unsigned int *)(a1 + 72) << 6;
    uint64_t v19 = 4 * *(unsigned int *)(a1 + 76);
    unint64_t v20 = &v65[v18 + v19];
    uint64_t v21 = *(void *)(a1 + 56);
    uint64_t v22 = *(void *)(a1 + 64);
    unint64_t v23 = 4 * *(unsigned int *)(a1 + 84);
    if (v23 <= 1) {
      unint64_t v24 = 1;
    }
    else {
      unint64_t v24 = 4 * *(unsigned int *)(a1 + 84);
    }
    if (v24 <= 7)
    {
      for (uint64_t i = 0; i != v17; ++i)
      {
        uint64_t v26 = 0;
        do
        {
          v20[v26] = *(unsigned char *)(v21 + v26);
          ++v26;
        }
        while (v23 > v26);
        v20 += 64;
        v21 += v22;
      }
      return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v65, 64, *(void *)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
    }
    if (v24 && !((v24 - 1) >> 32))
    {
      int v27 = &v65[v18 + v19];
      uint64_t v28 = v24 & 0x3FFFFFFF8;
      if (v24 < 0x20)
      {
        uint64_t v29 = 0;
        uint64_t v30 = &v65[v18 + v19];
        uint64_t v31 = *(uint64_t **)(a1 + 56);
        while (1)
        {
          unsigned int v32 = (char *)(v21 + v22 * v29);
          char v33 = &v20[64 * v29];
          if ((unint64_t)(&v27[64 * v29] - v32) > 0x1F)
          {
            v33 += v28;
            int v35 = v30;
            uint64_t v36 = v31;
            uint64_t v37 = v24 & 0x3FFFFFFF8;
            do
            {
              uint64_t v38 = *v36++;
              *v35++ = v38;
              v37 -= 8;
            }
            while (v37);
            if (v24 == v28) {
              goto LABEL_25;
            }
            v32 += v28;
            int v34 = v24 & 0xFFFFFFF8;
          }
          else
          {
            int v34 = 0;
          }
          unsigned int v39 = v34 + 1;
          do
          {
            char v40 = *v32++;
            *v33++ = v40;
            BOOL v41 = v23 > v39++;
          }
          while (v41);
LABEL_25:
          ++v29;
          uint64_t v31 = (uint64_t *)((char *)v31 + v22);
          v30 += 64;
          if (v29 == v17) {
            return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v65, 64, *(void *)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
          }
        }
      }
      uint64_t v45 = 0;
      uint64_t v46 = v24 & 0x3FFFFFFE0;
      int v47 = &v65[v18 + v19];
      int v48 = &v65[v18 + 16 + v19];
      uint64_t v49 = (long long *)(v21 + 16);
      int64x2_t v50 = (uint64_t *)(v21 + (v24 & 0x3FFFFFFE0));
      for (uint64_t j = &v47[v24 & 0x3FFFFFFE0]; ; j += 8)
      {
        int64x2_t v52 = (char *)(v21 + v22 * v45);
        int64x2_t v53 = &v20[64 * v45];
        if ((unint64_t)(&v27[64 * v45] - v52) >= 0x20)
        {
          int64x2_t v57 = v49;
          int64x2_t v58 = v48;
          uint64_t v59 = v24 & 0x3FFFFFFE0;
          do
          {
            long long v60 = *v57;
            *(v58 - 1) = *(v57 - 1);
            *int64x2_t v58 = v60;
            v58 += 2;
            v57 += 2;
            v59 -= 32;
          }
          while (v59);
          if (v24 == v46) {
            goto LABEL_41;
          }
          if ((v24 & 0x18) != 0)
          {
            v53 += v28;
            int64x2_t v61 = j;
            char v62 = v50;
            unint64_t v63 = v28 - (v24 & 0x3FFFFFFE0);
            do
            {
              uint64_t v64 = *v62++;
              *v61++ = v64;
              v63 -= 8;
            }
            while (v63);
            if (v24 == v28) {
              goto LABEL_41;
            }
            v52 += v28;
            int v54 = v24 & 0xFFFFFFF8;
          }
          else
          {
            v52 += v46;
            v53 += v46;
            int v54 = v24 & 0xFFFFFFE0;
          }
        }
        else
        {
          int v54 = 0;
        }
        unsigned int v55 = v54 + 1;
        do
        {
          char v56 = *v52++;
          *v53++ = v56;
          BOOL v41 = v23 > v55++;
        }
        while (v41);
LABEL_41:
        ++v45;
        v48 += 64;
        uint64_t v49 = (long long *)((char *)v49 + v22);
        int64x2_t v50 = (uint64_t *)((char *)v50 + v22);
        if (v45 == v17) {
          return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v65, 64, *(void *)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
        }
      }
    }
    for (uint64_t k = 0; k != v17; ++k)
    {
      uint64_t v43 = 0;
      do
      {
        v20[v43] = *(unsigned char *)(v21 + v43);
        ++v43;
      }
      while (v23 > v43);
      v20 += 64;
      v21 += v22;
    }
  }
  return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v65, 64, *(void *)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE15ELj1ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v2 = 0;
  uint64_t v89 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(a1 + 40);
  uint64_t v4 = *(unsigned char **)(a1 + 48);
  do
  {
    long long v7 = (int64x2_t *)&v88[256
                         * (unint64_t)AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,1u>::kSubblockPositions[v2 + 1]
                         + 32
                         * AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,1u>::kSubblockPositions[v2]];
    unsigned int v8 = *v4;
    if (v8 == 127)
    {
      int64x2_t v9 = *(int64x2_t *)v3;
      int64x2_t v10 = *(int64x2_t *)(v3 + 16);
      int64x2_t v11 = *(int64x2_t *)(v3 + 32);
      int64x2_t v12 = *(int64x2_t *)(v3 + 48);
      int64x2_t v13 = *(int64x2_t *)(v3 + 64);
      int64x2_t v14 = *(int64x2_t *)(v3 + 80);
      int64x2_t v15 = *(int64x2_t *)(v3 + 96);
      int64x2_t v16 = *(int64x2_t *)(v3 + 112);
      *long long v7 = vzip1q_s64(*(int64x2_t *)v3, v10);
      v7[1] = vzip1q_s64(v13, v14);
      v7[4] = vzip2q_s64(v9, v10);
      v7[5] = vzip2q_s64(v13, v14);
      v7[8] = vzip1q_s64(v11, v12);
      v7[9] = vzip1q_s64(v15, v16);
      v7[12] = vzip2q_s64(v11, v12);
      v7[13] = vzip2q_s64(v15, v16);
      uint64_t v6 = 128;
    }
    else if (v8 == 3)
    {
      float32x4_t v5 = vld1q_dup_f32((const float *)v3);
      *long long v7 = (int64x2_t)v5;
      v7[1] = (int64x2_t)v5;
      v7[4] = (int64x2_t)v5;
      v7[5] = (int64x2_t)v5;
      v7[8] = (int64x2_t)v5;
      v7[9] = (int64x2_t)v5;
      v7[12] = (int64x2_t)v5;
      v7[13] = (int64x2_t)v5;
      uint64_t v6 = 4;
    }
    else if (*v4)
    {
      uint64_t v6 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v7, 64, v3, v8);
    }
    else
    {
      uint64_t v6 = 0;
      *long long v7 = 0u;
      v7[1] = 0u;
      v7[4] = 0u;
      v7[5] = 0u;
      v7[8] = 0u;
      v7[9] = 0u;
      v7[12] = 0u;
      v7[13] = 0u;
    }
    v3 += v6;
    ++v4;
    v2 += 2;
  }
  while (v2 != 16);
  uint64_t v17 = *(unsigned int *)(a1 + 80);
  if (!v17 || !*(_DWORD *)(a1 + 84)) {
    goto LABEL_39;
  }
  unint64_t v18 = (unint64_t)*(unsigned int *)(a1 + 72) << 6;
  uint64_t v19 = 4 * *(unsigned int *)(a1 + 76);
  unint64_t v20 = &v88[v18 + v19];
  uint64_t v21 = *(void *)(a1 + 56);
  uint64_t v22 = *(void *)(a1 + 64);
  unint64_t v23 = 4 * *(unsigned int *)(a1 + 84);
  if (v23 <= 1) {
    unint64_t v24 = 1;
  }
  else {
    unint64_t v24 = 4 * *(unsigned int *)(a1 + 84);
  }
  if (v24 > 7)
  {
    if (!v24 || (v24 - 1) >> 32)
    {
      for (uint64_t i = 0; i != v17; ++i)
      {
        uint64_t v43 = 0;
        do
        {
          v20[v43] = *(unsigned char *)(v21 + v43);
          ++v43;
        }
        while (v23 > v43);
        v20 += 64;
        v21 += v22;
      }
      goto LABEL_39;
    }
    int v27 = &v88[v18 + v19];
    uint64_t v28 = v24 & 0x3FFFFFFF8;
    if (v24 < 0x20)
    {
      uint64_t v29 = 0;
      uint64_t v30 = &v88[v18 + v19];
      uint64_t v31 = *(uint64_t **)(a1 + 56);
      while (1)
      {
        unsigned int v32 = (char *)(v21 + v22 * v29);
        char v33 = &v20[64 * v29];
        if ((unint64_t)(&v27[64 * v29] - v32) > 0x1F)
        {
          v33 += v28;
          int v35 = v30;
          uint64_t v36 = v31;
          uint64_t v37 = v24 & 0x3FFFFFFF8;
          do
          {
            uint64_t v38 = *v36++;
            *v35++ = v38;
            v37 -= 8;
          }
          while (v37);
          if (v24 == v28) {
            goto LABEL_25;
          }
          v32 += v28;
          int v34 = v24 & 0xFFFFFFF8;
        }
        else
        {
          int v34 = 0;
        }
        unsigned int v39 = v34 + 1;
        do
        {
          char v40 = *v32++;
          *v33++ = v40;
          BOOL v41 = v23 > v39++;
        }
        while (v41);
LABEL_25:
        ++v29;
        uint64_t v31 = (uint64_t *)((char *)v31 + v22);
        v30 += 64;
        if (v29 == v17) {
          goto LABEL_39;
        }
      }
    }
    uint64_t v68 = 0;
    uint64_t v69 = v24 & 0x3FFFFFFE0;
    uint64_t v70 = &v88[v18 + v19];
    uint64_t v71 = &v88[v18 + 16 + v19];
    unint64_t v72 = (long long *)(v21 + 16);
    uint64_t v73 = (uint64_t *)(v21 + (v24 & 0x3FFFFFFE0));
    unsigned int v74 = &v70[v24 & 0x3FFFFFFE0];
    while (1)
    {
      uint64_t v75 = (char *)(v21 + v22 * v68);
      unint64_t v76 = &v20[64 * v68];
      if ((unint64_t)(&v27[64 * v68] - v75) >= 0x20)
      {
        char v80 = v72;
        char v81 = v71;
        uint64_t v82 = v24 & 0x3FFFFFFE0;
        do
        {
          long long v83 = *v80;
          *(v81 - 1) = *(v80 - 1);
          _OWORD *v81 = v83;
          v81 += 2;
          v80 += 2;
          v82 -= 32;
        }
        while (v82);
        if (v24 == v69) {
          goto LABEL_54;
        }
        if ((v24 & 0x18) != 0)
        {
          v76 += v28;
          long long v84 = v74;
          uint64_t v85 = v73;
          unint64_t v86 = v28 - (v24 & 0x3FFFFFFE0);
          do
          {
            uint64_t v87 = *v85++;
            *v84++ = v87;
            v86 -= 8;
          }
          while (v86);
          if (v24 == v28) {
            goto LABEL_54;
          }
          v75 += v28;
          int v77 = v24 & 0xFFFFFFF8;
        }
        else
        {
          v75 += v69;
          v76 += v69;
          int v77 = v24 & 0xFFFFFFE0;
        }
      }
      else
      {
        int v77 = 0;
      }
      unsigned int v78 = v77 + 1;
      do
      {
        char v79 = *v75++;
        *v76++ = v79;
        BOOL v41 = v23 > v78++;
      }
      while (v41);
LABEL_54:
      ++v68;
      v71 += 64;
      unint64_t v72 = (long long *)((char *)v72 + v22);
      uint64_t v73 = (uint64_t *)((char *)v73 + v22);
      v74 += 8;
      if (v68 == v17) {
        goto LABEL_39;
      }
    }
  }
  for (uint64_t j = 0; j != v17; ++j)
  {
    uint64_t v26 = 0;
    do
    {
      v20[v26] = *(unsigned char *)(v21 + v26);
      ++v26;
    }
    while (v23 > v26);
    v20 += 64;
    v21 += v22;
  }
LABEL_39:
  uint64_t v44 = 0;
  uint64_t v45 = *(int64x2_t **)(a1 + 40);
  uint64_t v46 = *(char **)(a1 + 48);
  int v47 = *(unsigned __int8 *)(a1 + 88);
  int v48 = *(unsigned __int8 *)(a1 + 89);
  do
  {
    uint64_t v63 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,1u>::kSubblockPositions[v44 + 1];
    uint64_t v64 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,1u>::kSubblockPositions[v44];
    LODWORD(result) = (v47 - 8 * v64) & ~((v47 - 8 * (int)v64) >> 31);
    if (result >= 8) {
      uint64_t result = 8;
    }
    else {
      uint64_t result = result;
    }
    unsigned int v66 = (v48 - 4 * v63) & ~((v48 - 4 * (int)v63) >> 31);
    if (v66 >= 4) {
      unsigned int v66 = 4;
    }
    if (result) {
      BOOL v67 = v66 == 0;
    }
    else {
      BOOL v67 = 1;
    }
    if (v67)
    {
      char v62 = 0;
    }
    else
    {
      uint64_t v49 = (int64x2_t *)&v88[256 * v63 + 32 * v64];
      int64x2_t v50 = v49[1];
      int64x2_t v51 = v49[4];
      int64x2_t v52 = v49[5];
      int64x2_t v53 = vzip1q_s64(*v49, v51);
      int64x2_t v54 = vzip2q_s64(*v49, v51);
      int64x2_t v55 = vzip1q_s64(v50, v52);
      int64x2_t v56 = vzip2q_s64(v50, v52);
      int64x2_t v57 = v49[8];
      int64x2_t v58 = v49[9];
      v49 += 12;
      int64x2_t v59 = v49[1];
      int64x2_t v60 = vzip1q_s64(v57, *v49);
      int64x2_t v61 = vzip2q_s64(v57, *v49);
      *uint64_t v45 = v53;
      v45[1] = v54;
      v45[2] = v60;
      v45[3] = v61;
      v45[4] = v55;
      v45[5] = v56;
      v45[6] = vzip1q_s64(v58, v59);
      v45[7] = vzip2q_s64(v58, v59);
      v45 += 8;
      char v62 = 127;
    }
    *v46++ = v62;
    v44 += 2;
  }
  while (v44 != 16);
  return result;
}

unint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE15ELj1ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v2 = 0;
  uint64_t v66 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(a1 + 40);
  uint64_t v4 = *(unsigned char **)(a1 + 48);
  do
  {
    long long v7 = (int64x2_t *)&v65[256
                         * (unint64_t)AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,1u>::kSubblockPositions[v2 + 1]
                         + 32
                         * AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,1u>::kSubblockPositions[v2]];
    unsigned int v8 = *v4;
    if (v8 == 127)
    {
      int64x2_t v9 = *(int64x2_t *)v3;
      int64x2_t v10 = *(int64x2_t *)(v3 + 16);
      int64x2_t v11 = *(int64x2_t *)(v3 + 32);
      int64x2_t v12 = *(int64x2_t *)(v3 + 48);
      int64x2_t v13 = *(int64x2_t *)(v3 + 64);
      int64x2_t v14 = *(int64x2_t *)(v3 + 80);
      int64x2_t v15 = *(int64x2_t *)(v3 + 96);
      int64x2_t v16 = *(int64x2_t *)(v3 + 112);
      *long long v7 = vzip1q_s64(*(int64x2_t *)v3, v10);
      v7[1] = vzip1q_s64(v13, v14);
      v7[4] = vzip2q_s64(v9, v10);
      v7[5] = vzip2q_s64(v13, v14);
      v7[8] = vzip1q_s64(v11, v12);
      v7[9] = vzip1q_s64(v15, v16);
      v7[12] = vzip2q_s64(v11, v12);
      v7[13] = vzip2q_s64(v15, v16);
      uint64_t v6 = 128;
    }
    else if (v8 == 3)
    {
      float32x4_t v5 = vld1q_dup_f32((const float *)v3);
      *long long v7 = (int64x2_t)v5;
      v7[1] = (int64x2_t)v5;
      v7[4] = (int64x2_t)v5;
      v7[5] = (int64x2_t)v5;
      v7[8] = (int64x2_t)v5;
      v7[9] = (int64x2_t)v5;
      v7[12] = (int64x2_t)v5;
      v7[13] = (int64x2_t)v5;
      uint64_t v6 = 4;
    }
    else if (*v4)
    {
      uint64_t v6 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v7, 64, v3, v8);
    }
    else
    {
      uint64_t v6 = 0;
      *long long v7 = 0u;
      v7[1] = 0u;
      v7[4] = 0u;
      v7[5] = 0u;
      v7[8] = 0u;
      v7[9] = 0u;
      v7[12] = 0u;
      v7[13] = 0u;
    }
    v3 += v6;
    ++v4;
    v2 += 2;
  }
  while (v2 != 16);
  uint64_t v17 = *(unsigned int *)(a1 + 80);
  if (v17 && *(_DWORD *)(a1 + 84))
  {
    unint64_t v18 = (unint64_t)*(unsigned int *)(a1 + 72) << 6;
    uint64_t v19 = 4 * *(unsigned int *)(a1 + 76);
    unint64_t v20 = &v65[v18 + v19];
    uint64_t v21 = *(void *)(a1 + 56);
    uint64_t v22 = *(void *)(a1 + 64);
    unint64_t v23 = 4 * *(unsigned int *)(a1 + 84);
    if (v23 <= 1) {
      unint64_t v24 = 1;
    }
    else {
      unint64_t v24 = 4 * *(unsigned int *)(a1 + 84);
    }
    if (v24 <= 7)
    {
      for (uint64_t i = 0; i != v17; ++i)
      {
        uint64_t v26 = 0;
        do
        {
          v20[v26] = *(unsigned char *)(v21 + v26);
          ++v26;
        }
        while (v23 > v26);
        v20 += 64;
        v21 += v22;
      }
      return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v65, 64, *(void *)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
    }
    if (v24 && !((v24 - 1) >> 32))
    {
      int v27 = &v65[v18 + v19];
      uint64_t v28 = v24 & 0x3FFFFFFF8;
      if (v24 < 0x20)
      {
        uint64_t v29 = 0;
        uint64_t v30 = &v65[v18 + v19];
        uint64_t v31 = *(uint64_t **)(a1 + 56);
        while (1)
        {
          unsigned int v32 = (char *)(v21 + v22 * v29);
          char v33 = &v20[64 * v29];
          if ((unint64_t)(&v27[64 * v29] - v32) > 0x1F)
          {
            v33 += v28;
            int v35 = v30;
            uint64_t v36 = v31;
            uint64_t v37 = v24 & 0x3FFFFFFF8;
            do
            {
              uint64_t v38 = *v36++;
              *v35++ = v38;
              v37 -= 8;
            }
            while (v37);
            if (v24 == v28) {
              goto LABEL_25;
            }
            v32 += v28;
            int v34 = v24 & 0xFFFFFFF8;
          }
          else
          {
            int v34 = 0;
          }
          unsigned int v39 = v34 + 1;
          do
          {
            char v40 = *v32++;
            *v33++ = v40;
            BOOL v41 = v23 > v39++;
          }
          while (v41);
LABEL_25:
          ++v29;
          uint64_t v31 = (uint64_t *)((char *)v31 + v22);
          v30 += 64;
          if (v29 == v17) {
            return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v65, 64, *(void *)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
          }
        }
      }
      uint64_t v45 = 0;
      uint64_t v46 = v24 & 0x3FFFFFFE0;
      int v47 = &v65[v18 + v19];
      int v48 = &v65[v18 + 16 + v19];
      uint64_t v49 = (long long *)(v21 + 16);
      int64x2_t v50 = (uint64_t *)(v21 + (v24 & 0x3FFFFFFE0));
      for (uint64_t j = &v47[v24 & 0x3FFFFFFE0]; ; j += 8)
      {
        int64x2_t v52 = (char *)(v21 + v22 * v45);
        int64x2_t v53 = &v20[64 * v45];
        if ((unint64_t)(&v27[64 * v45] - v52) >= 0x20)
        {
          int64x2_t v57 = v49;
          int64x2_t v58 = v48;
          uint64_t v59 = v24 & 0x3FFFFFFE0;
          do
          {
            long long v60 = *v57;
            *(v58 - 1) = *(v57 - 1);
            *int64x2_t v58 = v60;
            v58 += 2;
            v57 += 2;
            v59 -= 32;
          }
          while (v59);
          if (v24 == v46) {
            goto LABEL_41;
          }
          if ((v24 & 0x18) != 0)
          {
            v53 += v28;
            int64x2_t v61 = j;
            char v62 = v50;
            unint64_t v63 = v28 - (v24 & 0x3FFFFFFE0);
            do
            {
              uint64_t v64 = *v62++;
              *v61++ = v64;
              v63 -= 8;
            }
            while (v63);
            if (v24 == v28) {
              goto LABEL_41;
            }
            v52 += v28;
            int v54 = v24 & 0xFFFFFFF8;
          }
          else
          {
            v52 += v46;
            v53 += v46;
            int v54 = v24 & 0xFFFFFFE0;
          }
        }
        else
        {
          int v54 = 0;
        }
        unsigned int v55 = v54 + 1;
        do
        {
          char v56 = *v52++;
          *v53++ = v56;
          BOOL v41 = v23 > v55++;
        }
        while (v41);
LABEL_41:
        ++v45;
        v48 += 64;
        uint64_t v49 = (long long *)((char *)v49 + v22);
        int64x2_t v50 = (uint64_t *)((char *)v50 + v22);
        if (v45 == v17) {
          return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v65, 64, *(void *)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
        }
      }
    }
    for (uint64_t k = 0; k != v17; ++k)
    {
      uint64_t v43 = 0;
      do
      {
        v20[v43] = *(unsigned char *)(v21 + v43);
        ++v43;
      }
      while (v23 > v43);
      v20 += 64;
      v21 += v22;
    }
  }
  return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v65, 64, *(void *)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE13ELj1ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v75 = *MEMORY[0x263EF8340];
  AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressMacroblock(v74, *(int64x2_t **)(a1 + 40), *(unsigned __int8 **)(a1 + 48));
  uint64_t v2 = *(unsigned int *)(a1 + 80);
  if (v2 && *(_DWORD *)(a1 + 84))
  {
    unint64_t v3 = (unint64_t)*(unsigned int *)(a1 + 72) << 6;
    uint64_t v4 = 4 * *(unsigned int *)(a1 + 76);
    float32x4_t v5 = &v74[0].i8[v3 + v4];
    uint64_t v6 = *(void *)(a1 + 56);
    uint64_t v7 = *(void *)(a1 + 64);
    unint64_t v8 = 4 * *(unsigned int *)(a1 + 84);
    if (v8 <= 1) {
      unint64_t v9 = 1;
    }
    else {
      unint64_t v9 = 4 * *(unsigned int *)(a1 + 84);
    }
    if (v9 <= 7)
    {
      for (uint64_t i = 0; i != v2; ++i)
      {
        uint64_t v11 = 0;
        do
        {
          v5[v11] = *(unsigned char *)(v6 + v11);
          ++v11;
        }
        while (v8 > v11);
        v5 += 64;
        v6 += v7;
      }
      goto LABEL_20;
    }
    if (v9) {
      BOOL v12 = (v9 - 1) >> 32 == 0;
    }
    else {
      BOOL v12 = 0;
    }
    if (!v12)
    {
      for (uint64_t j = 0; j != v2; ++j)
      {
        uint64_t v14 = 0;
        do
        {
          v5[v14] = *(unsigned char *)(v6 + v14);
          ++v14;
        }
        while (v8 > v14);
        v5 += 64;
        v6 += v7;
      }
      goto LABEL_20;
    }
    unsigned int v39 = &v74[0].i8[v3 + v4];
    uint64_t v40 = v9 & 0x3FFFFFFF8;
    if (v9 < 0x20)
    {
      uint64_t v41 = 0;
      BOOL v42 = &v74[0].i8[v3 + v4];
      uint64_t v43 = *(uint64_t **)(a1 + 56);
      while (1)
      {
        uint64_t v44 = (char *)(v6 + v7 * v41);
        uint64_t v45 = &v5[64 * v41];
        if ((unint64_t)(&v39[64 * v41] - v44) > 0x1F)
        {
          v45 += v40;
          int v47 = v42;
          int v48 = v43;
          uint64_t v49 = v9 & 0x3FFFFFFF8;
          do
          {
            uint64_t v50 = *v48++;
            *(void *)int v47 = v50;
            v47 += 8;
            v49 -= 8;
          }
          while (v49);
          if (v9 == v40) {
            goto LABEL_36;
          }
          v44 += v40;
          int v46 = v9 & 0xFFFFFFF8;
        }
        else
        {
          int v46 = 0;
        }
        unsigned int v51 = v46 + 1;
        do
        {
          char v52 = *v44++;
          *v45++ = v52;
          BOOL v53 = v8 > v51++;
        }
        while (v53);
LABEL_36:
        ++v41;
        uint64_t v43 = (uint64_t *)((char *)v43 + v7);
        v42 += 64;
        if (v41 == v2) {
          goto LABEL_20;
        }
      }
    }
    uint64_t v54 = 0;
    uint64_t v55 = v9 & 0x3FFFFFFE0;
    char v56 = &v74[0].i8[v3 + v4];
    int64x2_t v57 = &v74[1].i8[v3 + v4];
    int64x2_t v58 = (long long *)(v6 + 16);
    uint64_t v59 = (uint64_t *)(v6 + (v9 & 0x3FFFFFFE0));
    long long v60 = &v56[v9 & 0x3FFFFFFE0];
    do
    {
      int64x2_t v61 = (char *)(v6 + v7 * v54);
      char v62 = &v5[64 * v54];
      if ((unint64_t)(&v39[64 * v54] - v61) >= 0x20)
      {
        uint64_t v66 = v58;
        BOOL v67 = v57;
        uint64_t v68 = v9 & 0x3FFFFFFE0;
        do
        {
          long long v69 = *v66;
          *((_OWORD *)v67 - 1) = *(v66 - 1);
          *(_OWORD *)BOOL v67 = v69;
          v67 += 32;
          v66 += 2;
          v68 -= 32;
        }
        while (v68);
        if (v9 == v55) {
          goto LABEL_47;
        }
        if ((v9 & 0x18) != 0)
        {
          v62 += v40;
          uint64_t v70 = v60;
          uint64_t v71 = v59;
          unint64_t v72 = v40 - (v9 & 0x3FFFFFFE0);
          do
          {
            uint64_t v73 = *v71++;
            *(void *)uint64_t v70 = v73;
            v70 += 8;
            v72 -= 8;
          }
          while (v72);
          if (v9 == v40) {
            goto LABEL_47;
          }
          v61 += v40;
          int v63 = v9 & 0xFFFFFFF8;
        }
        else
        {
          v61 += v55;
          v62 += v55;
          int v63 = v9 & 0xFFFFFFE0;
        }
      }
      else
      {
        int v63 = 0;
      }
      unsigned int v64 = v63 + 1;
      do
      {
        char v65 = *v61++;
        *v62++ = v65;
        BOOL v53 = v8 > v64++;
      }
      while (v53);
LABEL_47:
      ++v54;
      v57 += 64;
      int64x2_t v58 = (long long *)((char *)v58 + v7);
      uint64_t v59 = (uint64_t *)((char *)v59 + v7);
      v60 += 64;
    }
    while (v54 != v2);
  }
LABEL_20:
  uint64_t v15 = 0;
  int64x2_t v16 = *(int64x2_t **)(a1 + 40);
  uint64_t v17 = *(char **)(a1 + 48);
  int v18 = *(unsigned __int8 *)(a1 + 88);
  int v19 = *(unsigned __int8 *)(a1 + 89);
  do
  {
    uint64_t v34 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,1u>::kSubblockPositions[v15 + 1];
    uint64_t v35 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,1u>::kSubblockPositions[v15];
    LODWORD(result) = (v18 - 8 * v35) & ~((v18 - 8 * (int)v35) >> 31);
    if (result >= 8) {
      uint64_t result = 8;
    }
    else {
      uint64_t result = result;
    }
    unsigned int v37 = (v19 - 4 * v34) & ~((v19 - 4 * (int)v34) >> 31);
    if (v37 >= 4) {
      unsigned int v37 = 4;
    }
    if (result) {
      BOOL v38 = v37 == 0;
    }
    else {
      BOOL v38 = 1;
    }
    if (v38)
    {
      char v33 = 0;
    }
    else
    {
      unint64_t v20 = &v74[16 * v34 + 2 * v35];
      int64x2_t v21 = v20[1];
      int64x2_t v22 = v20[4];
      int64x2_t v23 = v20[5];
      int64x2_t v24 = vzip1q_s64(*v20, v22);
      int64x2_t v25 = vzip2q_s64(*v20, v22);
      int64x2_t v26 = vzip1q_s64(v21, v23);
      int64x2_t v27 = vzip2q_s64(v21, v23);
      int64x2_t v28 = v20[8];
      int64x2_t v29 = v20[9];
      v20 += 12;
      int64x2_t v30 = v20[1];
      int64x2_t v31 = vzip1q_s64(v28, *v20);
      int64x2_t v32 = vzip2q_s64(v28, *v20);
      *int64x2_t v16 = v24;
      v16[1] = v25;
      v16[2] = v31;
      v16[3] = v32;
      v16[4] = v26;
      v16[5] = v27;
      v16[6] = vzip1q_s64(v29, v30);
      v16[7] = vzip2q_s64(v29, v30);
      v16 += 8;
      char v33 = 127;
    }
    *v17++ = v33;
    v15 += 2;
  }
  while (v15 != 16);
  return result;
}

unint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE13ELj1ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v52 = *MEMORY[0x263EF8340];
  AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressMacroblock(v51, *(int64x2_t **)(a1 + 40), *(unsigned __int8 **)(a1 + 48));
  uint64_t v2 = *(unsigned int *)(a1 + 80);
  if (!v2 || !*(_DWORD *)(a1 + 84)) {
    return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v51, 64, *(void *)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
  }
  unint64_t v3 = (unint64_t)*(unsigned int *)(a1 + 72) << 6;
  uint64_t v4 = 4 * *(unsigned int *)(a1 + 76);
  float32x4_t v5 = &v51[0].i8[v3 + v4];
  uint64_t v6 = *(void *)(a1 + 56);
  uint64_t v7 = *(void *)(a1 + 64);
  unint64_t v8 = 4 * *(unsigned int *)(a1 + 84);
  if (v8 <= 1) {
    unint64_t v9 = 1;
  }
  else {
    unint64_t v9 = 4 * *(unsigned int *)(a1 + 84);
  }
  if (v9 <= 7)
  {
    for (uint64_t i = 0; i != v2; ++i)
    {
      uint64_t v11 = 0;
      do
      {
        v5[v11] = *(unsigned char *)(v6 + v11);
        ++v11;
      }
      while (v8 > v11);
      v5 += 64;
      v6 += v7;
    }
    return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v51, 64, *(void *)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
  }
  if (v9) {
    BOOL v12 = (v9 - 1) >> 32 == 0;
  }
  else {
    BOOL v12 = 0;
  }
  if (v12)
  {
    int64x2_t v16 = &v51[0].i8[v3 + v4];
    uint64_t v17 = v9 & 0x3FFFFFFF8;
    if (v9 < 0x20)
    {
      uint64_t v18 = 0;
      int v19 = &v51[0].i8[v3 + v4];
      unint64_t v20 = *(uint64_t **)(a1 + 56);
      while (1)
      {
        int64x2_t v21 = (char *)(v6 + v7 * v18);
        int64x2_t v22 = &v5[64 * v18];
        if ((unint64_t)(&v16[64 * v18] - v21) > 0x1F)
        {
          v22 += v17;
          int64x2_t v24 = v19;
          int64x2_t v25 = v20;
          uint64_t v26 = v9 & 0x3FFFFFFF8;
          do
          {
            uint64_t v27 = *v25++;
            *(void *)int64x2_t v24 = v27;
            v24 += 8;
            v26 -= 8;
          }
          while (v26);
          if (v9 == v17) {
            goto LABEL_23;
          }
          v21 += v17;
          int v23 = v9 & 0xFFFFFFF8;
        }
        else
        {
          int v23 = 0;
        }
        unsigned int v28 = v23 + 1;
        do
        {
          char v29 = *v21++;
          *v22++ = v29;
          BOOL v30 = v8 > v28++;
        }
        while (v30);
LABEL_23:
        ++v18;
        unint64_t v20 = (uint64_t *)((char *)v20 + v7);
        v19 += 64;
        if (v18 == v2) {
          return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v51, 64, *(void *)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
        }
      }
    }
    uint64_t v31 = 0;
    uint64_t v32 = v9 & 0x3FFFFFFE0;
    char v33 = &v51[0].i8[v3 + v4];
    uint64_t v34 = &v51[1].i8[v3 + v4];
    uint64_t v35 = (long long *)(v6 + 16);
    uint64_t v36 = (uint64_t *)(v6 + (v9 & 0x3FFFFFFE0));
    for (uint64_t j = &v33[v9 & 0x3FFFFFFE0]; ; j += 64)
    {
      BOOL v38 = (char *)(v6 + v7 * v31);
      unsigned int v39 = &v5[64 * v31];
      if ((unint64_t)(&v16[64 * v31] - v38) >= 0x20)
      {
        uint64_t v43 = v35;
        uint64_t v44 = v34;
        uint64_t v45 = v9 & 0x3FFFFFFE0;
        do
        {
          long long v46 = *v43;
          *((_OWORD *)v44 - 1) = *(v43 - 1);
          *(_OWORD *)uint64_t v44 = v46;
          v44 += 32;
          v43 += 2;
          v45 -= 32;
        }
        while (v45);
        if (v9 == v32) {
          goto LABEL_34;
        }
        if ((v9 & 0x18) != 0)
        {
          v39 += v17;
          int v47 = j;
          int v48 = v36;
          unint64_t v49 = v17 - (v9 & 0x3FFFFFFE0);
          do
          {
            uint64_t v50 = *v48++;
            *(void *)int v47 = v50;
            v47 += 8;
            v49 -= 8;
          }
          while (v49);
          if (v9 == v17) {
            goto LABEL_34;
          }
          v38 += v17;
          int v40 = v9 & 0xFFFFFFF8;
        }
        else
        {
          v38 += v32;
          v39 += v32;
          int v40 = v9 & 0xFFFFFFE0;
        }
      }
      else
      {
        int v40 = 0;
      }
      unsigned int v41 = v40 + 1;
      do
      {
        char v42 = *v38++;
        *v39++ = v42;
        BOOL v30 = v8 > v41++;
      }
      while (v30);
LABEL_34:
      ++v31;
      v34 += 64;
      uint64_t v35 = (long long *)((char *)v35 + v7);
      uint64_t v36 = (uint64_t *)((char *)v36 + v7);
      if (v31 == v2) {
        return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v51, 64, *(void *)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
      }
    }
  }
  for (uint64_t k = 0; k != v2; ++k)
  {
    uint64_t v14 = 0;
    do
    {
      v5[v14] = *(unsigned char *)(v6 + v14);
      ++v14;
    }
    while (v8 > v14);
    v5 += 64;
    v6 += v7;
  }
  return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v51, 64, *(void *)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE13ELj1ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v75 = *MEMORY[0x263EF8340];
  AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressMacroblock(v74, *(int64x2_t **)(a1 + 40), *(unsigned __int8 **)(a1 + 48));
  uint64_t v2 = *(unsigned int *)(a1 + 80);
  if (v2 && *(_DWORD *)(a1 + 84))
  {
    unint64_t v3 = (unint64_t)*(unsigned int *)(a1 + 72) << 6;
    uint64_t v4 = 4 * *(unsigned int *)(a1 + 76);
    float32x4_t v5 = &v74[0].i8[v3 + v4];
    uint64_t v6 = *(void *)(a1 + 56);
    uint64_t v7 = *(void *)(a1 + 64);
    unint64_t v8 = 4 * *(unsigned int *)(a1 + 84);
    if (v8 <= 1) {
      unint64_t v9 = 1;
    }
    else {
      unint64_t v9 = 4 * *(unsigned int *)(a1 + 84);
    }
    if (v9 <= 7)
    {
      for (uint64_t i = 0; i != v2; ++i)
      {
        uint64_t v11 = 0;
        do
        {
          v5[v11] = *(unsigned char *)(v6 + v11);
          ++v11;
        }
        while (v8 > v11);
        v5 += 64;
        v6 += v7;
      }
      goto LABEL_20;
    }
    if (v9) {
      BOOL v12 = (v9 - 1) >> 32 == 0;
    }
    else {
      BOOL v12 = 0;
    }
    if (!v12)
    {
      for (uint64_t j = 0; j != v2; ++j)
      {
        uint64_t v14 = 0;
        do
        {
          v5[v14] = *(unsigned char *)(v6 + v14);
          ++v14;
        }
        while (v8 > v14);
        v5 += 64;
        v6 += v7;
      }
      goto LABEL_20;
    }
    unsigned int v39 = &v74[0].i8[v3 + v4];
    uint64_t v40 = v9 & 0x3FFFFFFF8;
    if (v9 < 0x20)
    {
      uint64_t v41 = 0;
      char v42 = &v74[0].i8[v3 + v4];
      uint64_t v43 = *(uint64_t **)(a1 + 56);
      while (1)
      {
        uint64_t v44 = (char *)(v6 + v7 * v41);
        uint64_t v45 = &v5[64 * v41];
        if ((unint64_t)(&v39[64 * v41] - v44) > 0x1F)
        {
          v45 += v40;
          int v47 = v42;
          int v48 = v43;
          uint64_t v49 = v9 & 0x3FFFFFFF8;
          do
          {
            uint64_t v50 = *v48++;
            *(void *)int v47 = v50;
            v47 += 8;
            v49 -= 8;
          }
          while (v49);
          if (v9 == v40) {
            goto LABEL_36;
          }
          v44 += v40;
          int v46 = v9 & 0xFFFFFFF8;
        }
        else
        {
          int v46 = 0;
        }
        unsigned int v51 = v46 + 1;
        do
        {
          char v52 = *v44++;
          *v45++ = v52;
          BOOL v53 = v8 > v51++;
        }
        while (v53);
LABEL_36:
        ++v41;
        uint64_t v43 = (uint64_t *)((char *)v43 + v7);
        v42 += 64;
        if (v41 == v2) {
          goto LABEL_20;
        }
      }
    }
    uint64_t v54 = 0;
    uint64_t v55 = v9 & 0x3FFFFFFE0;
    char v56 = &v74[0].i8[v3 + v4];
    int64x2_t v57 = &v74[1].i8[v3 + v4];
    int64x2_t v58 = (long long *)(v6 + 16);
    uint64_t v59 = (uint64_t *)(v6 + (v9 & 0x3FFFFFFE0));
    long long v60 = &v56[v9 & 0x3FFFFFFE0];
    do
    {
      int64x2_t v61 = (char *)(v6 + v7 * v54);
      char v62 = &v5[64 * v54];
      if ((unint64_t)(&v39[64 * v54] - v61) >= 0x20)
      {
        uint64_t v66 = v58;
        BOOL v67 = v57;
        uint64_t v68 = v9 & 0x3FFFFFFE0;
        do
        {
          long long v69 = *v66;
          *((_OWORD *)v67 - 1) = *(v66 - 1);
          *(_OWORD *)BOOL v67 = v69;
          v67 += 32;
          v66 += 2;
          v68 -= 32;
        }
        while (v68);
        if (v9 == v55) {
          goto LABEL_47;
        }
        if ((v9 & 0x18) != 0)
        {
          v62 += v40;
          uint64_t v70 = v60;
          uint64_t v71 = v59;
          unint64_t v72 = v40 - (v9 & 0x3FFFFFFE0);
          do
          {
            uint64_t v73 = *v71++;
            *(void *)uint64_t v70 = v73;
            v70 += 8;
            v72 -= 8;
          }
          while (v72);
          if (v9 == v40) {
            goto LABEL_47;
          }
          v61 += v40;
          int v63 = v9 & 0xFFFFFFF8;
        }
        else
        {
          v61 += v55;
          v62 += v55;
          int v63 = v9 & 0xFFFFFFE0;
        }
      }
      else
      {
        int v63 = 0;
      }
      unsigned int v64 = v63 + 1;
      do
      {
        char v65 = *v61++;
        *v62++ = v65;
        BOOL v53 = v8 > v64++;
      }
      while (v53);
LABEL_47:
      ++v54;
      v57 += 64;
      int64x2_t v58 = (long long *)((char *)v58 + v7);
      uint64_t v59 = (uint64_t *)((char *)v59 + v7);
      v60 += 64;
    }
    while (v54 != v2);
  }
LABEL_20:
  uint64_t v15 = 0;
  int64x2_t v16 = *(int64x2_t **)(a1 + 40);
  uint64_t v17 = *(char **)(a1 + 48);
  int v18 = *(unsigned __int8 *)(a1 + 88);
  int v19 = *(unsigned __int8 *)(a1 + 89);
  do
  {
    uint64_t v34 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,1u>::kSubblockPositions[v15 + 1];
    uint64_t v35 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,1u>::kSubblockPositions[v15];
    LODWORD(result) = (v18 - 8 * v35) & ~((v18 - 8 * (int)v35) >> 31);
    if (result >= 8) {
      uint64_t result = 8;
    }
    else {
      uint64_t result = result;
    }
    unsigned int v37 = (v19 - 4 * v34) & ~((v19 - 4 * (int)v34) >> 31);
    if (v37 >= 4) {
      unsigned int v37 = 4;
    }
    if (result) {
      BOOL v38 = v37 == 0;
    }
    else {
      BOOL v38 = 1;
    }
    if (v38)
    {
      char v33 = 0;
    }
    else
    {
      unint64_t v20 = &v74[16 * v34 + 2 * v35];
      int64x2_t v21 = v20[1];
      int64x2_t v22 = v20[4];
      int64x2_t v23 = v20[5];
      int64x2_t v24 = vzip1q_s64(*v20, v22);
      int64x2_t v25 = vzip2q_s64(*v20, v22);
      int64x2_t v26 = vzip1q_s64(v21, v23);
      int64x2_t v27 = vzip2q_s64(v21, v23);
      int64x2_t v28 = v20[8];
      int64x2_t v29 = v20[9];
      v20 += 12;
      int64x2_t v30 = v20[1];
      int64x2_t v31 = vzip1q_s64(v28, *v20);
      int64x2_t v32 = vzip2q_s64(v28, *v20);
      *int64x2_t v16 = v24;
      v16[1] = v25;
      v16[2] = v31;
      v16[3] = v32;
      v16[4] = v26;
      v16[5] = v27;
      v16[6] = vzip1q_s64(v29, v30);
      v16[7] = vzip2q_s64(v29, v30);
      v16 += 8;
      char v33 = 127;
    }
    *v17++ = v33;
    v15 += 2;
  }
  while (v15 != 16);
  return result;
}

unint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE13ELj1ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v52 = *MEMORY[0x263EF8340];
  AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressMacroblock(v51, *(int64x2_t **)(a1 + 40), *(unsigned __int8 **)(a1 + 48));
  uint64_t v2 = *(unsigned int *)(a1 + 80);
  if (!v2 || !*(_DWORD *)(a1 + 84)) {
    return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v51, 64, *(void *)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
  }
  unint64_t v3 = (unint64_t)*(unsigned int *)(a1 + 72) << 6;
  uint64_t v4 = 4 * *(unsigned int *)(a1 + 76);
  float32x4_t v5 = &v51[0].i8[v3 + v4];
  uint64_t v6 = *(void *)(a1 + 56);
  uint64_t v7 = *(void *)(a1 + 64);
  unint64_t v8 = 4 * *(unsigned int *)(a1 + 84);
  if (v8 <= 1) {
    unint64_t v9 = 1;
  }
  else {
    unint64_t v9 = 4 * *(unsigned int *)(a1 + 84);
  }
  if (v9 <= 7)
  {
    for (uint64_t i = 0; i != v2; ++i)
    {
      uint64_t v11 = 0;
      do
      {
        v5[v11] = *(unsigned char *)(v6 + v11);
        ++v11;
      }
      while (v8 > v11);
      v5 += 64;
      v6 += v7;
    }
    return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v51, 64, *(void *)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
  }
  if (v9) {
    BOOL v12 = (v9 - 1) >> 32 == 0;
  }
  else {
    BOOL v12 = 0;
  }
  if (v12)
  {
    int64x2_t v16 = &v51[0].i8[v3 + v4];
    uint64_t v17 = v9 & 0x3FFFFFFF8;
    if (v9 < 0x20)
    {
      uint64_t v18 = 0;
      int v19 = &v51[0].i8[v3 + v4];
      unint64_t v20 = *(uint64_t **)(a1 + 56);
      while (1)
      {
        int64x2_t v21 = (char *)(v6 + v7 * v18);
        int64x2_t v22 = &v5[64 * v18];
        if ((unint64_t)(&v16[64 * v18] - v21) > 0x1F)
        {
          v22 += v17;
          int64x2_t v24 = v19;
          int64x2_t v25 = v20;
          uint64_t v26 = v9 & 0x3FFFFFFF8;
          do
          {
            uint64_t v27 = *v25++;
            *(void *)int64x2_t v24 = v27;
            v24 += 8;
            v26 -= 8;
          }
          while (v26);
          if (v9 == v17) {
            goto LABEL_23;
          }
          v21 += v17;
          int v23 = v9 & 0xFFFFFFF8;
        }
        else
        {
          int v23 = 0;
        }
        unsigned int v28 = v23 + 1;
        do
        {
          char v29 = *v21++;
          *v22++ = v29;
          BOOL v30 = v8 > v28++;
        }
        while (v30);
LABEL_23:
        ++v18;
        unint64_t v20 = (uint64_t *)((char *)v20 + v7);
        v19 += 64;
        if (v18 == v2) {
          return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v51, 64, *(void *)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
        }
      }
    }
    uint64_t v31 = 0;
    uint64_t v32 = v9 & 0x3FFFFFFE0;
    char v33 = &v51[0].i8[v3 + v4];
    uint64_t v34 = &v51[1].i8[v3 + v4];
    uint64_t v35 = (long long *)(v6 + 16);
    uint64_t v36 = (uint64_t *)(v6 + (v9 & 0x3FFFFFFE0));
    for (uint64_t j = &v33[v9 & 0x3FFFFFFE0]; ; j += 64)
    {
      BOOL v38 = (char *)(v6 + v7 * v31);
      unsigned int v39 = &v5[64 * v31];
      if ((unint64_t)(&v16[64 * v31] - v38) >= 0x20)
      {
        uint64_t v43 = v35;
        uint64_t v44 = v34;
        uint64_t v45 = v9 & 0x3FFFFFFE0;
        do
        {
          long long v46 = *v43;
          *((_OWORD *)v44 - 1) = *(v43 - 1);
          *(_OWORD *)uint64_t v44 = v46;
          v44 += 32;
          v43 += 2;
          v45 -= 32;
        }
        while (v45);
        if (v9 == v32) {
          goto LABEL_34;
        }
        if ((v9 & 0x18) != 0)
        {
          v39 += v17;
          int v47 = j;
          int v48 = v36;
          unint64_t v49 = v17 - (v9 & 0x3FFFFFFE0);
          do
          {
            uint64_t v50 = *v48++;
            *(void *)int v47 = v50;
            v47 += 8;
            v49 -= 8;
          }
          while (v49);
          if (v9 == v17) {
            goto LABEL_34;
          }
          v38 += v17;
          int v40 = v9 & 0xFFFFFFF8;
        }
        else
        {
          v38 += v32;
          v39 += v32;
          int v40 = v9 & 0xFFFFFFE0;
        }
      }
      else
      {
        int v40 = 0;
      }
      unsigned int v41 = v40 + 1;
      do
      {
        char v42 = *v38++;
        *v39++ = v42;
        BOOL v30 = v8 > v41++;
      }
      while (v30);
LABEL_34:
      ++v31;
      v34 += 64;
      uint64_t v35 = (long long *)((char *)v35 + v7);
      uint64_t v36 = (uint64_t *)((char *)v36 + v7);
      if (v31 == v2) {
        return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v51, 64, *(void *)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
      }
    }
  }
  for (uint64_t k = 0; k != v2; ++k)
  {
    uint64_t v14 = 0;
    do
    {
      v5[v14] = *(unsigned char *)(v6 + v14);
      ++v14;
    }
    while (v8 > v14);
    v5 += 64;
    v6 += v7;
  }
  return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v51, 64, *(void *)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
}

int16x4_t *___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE0ELj1ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  v50[33] = *(int16x4_t *)MEMORY[0x263EF8340];
  AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressMacroblock((int8x8_t *)v50, *(int8x8_t **)(a1 + 40), *(unsigned __int8 **)(a1 + 48));
  uint64_t v2 = *(unsigned int *)(a1 + 80);
  if (!v2) {
    return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock(v50, 16, *(int16x4_t **)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
  }
  uint64_t v3 = *(unsigned int *)(a1 + 84);
  if (!v3) {
    return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock(v50, 16, *(int16x4_t **)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
  }
  uint64_t v4 = *(unsigned int *)(a1 + 76);
  uint64_t v5 = 2 * *(unsigned int *)(a1 + 72);
  uint64_t v7 = *(void *)(a1 + 56);
  uint64_t v6 = *(void *)(a1 + 64);
  if (v3 > 7)
  {
    int64x2_t v10 = (char *)v50 + v4 + v5 * 8;
    uint64_t v11 = v3 & 0xFFFFFFF8;
    if (v3 <= 0x1F)
    {
      uint64_t v12 = 0;
      while (1)
      {
        int64x2_t v13 = (char *)(v7 + v6 * v12);
        uint64_t v14 = &v10[16 * v12];
        if ((unint64_t)(v14 - v13) > 0x1F)
        {
          *(void *)uint64_t v14 = *(void *)v13;
          if (v11 != 8)
          {
            *((void *)v14 + 1) = *((void *)v13 + 1);
            if (v11 != 16) {
              *((void *)v14 + 2) = *((void *)v13 + 2);
            }
          }
          if (v11 == v3) {
            goto LABEL_15;
          }
          v14 += v11;
          v13 += v11;
          int v15 = v3 & 0xFFFFFFF8;
        }
        else
        {
          int v15 = 0;
        }
        int v16 = v3 - v15;
        do
        {
          char v17 = *v13++;
          *v14++ = v17;
          --v16;
        }
        while (v16);
LABEL_15:
        if (++v12 == v2) {
          return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock(v50, 16, *(int16x4_t **)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
        }
      }
    }
    uint64_t v18 = v3 & 0xFFFFFFE0;
    if (v18 == v3)
    {
      uint64_t v19 = 0;
      unint64_t v20 = (char *)&v50[v5 + 2] + v4;
      int64x2_t v21 = (long long *)(v7 + 16);
      do
      {
        int64x2_t v22 = (char *)(v7 + v6 * v19);
        int v23 = v21;
        int64x2_t v24 = v20;
        uint64_t v25 = v3;
        if ((unint64_t)(&v10[16 * v19] - v22) >= 0x20)
        {
          do
          {
            long long v29 = *v23;
            *(v24 - 1) = *(v23 - 1);
            *int64x2_t v24 = v29;
            v24 += 2;
            v23 += 2;
            v25 -= 32;
          }
          while (v25);
        }
        else
        {
          uint64_t v26 = &v10[16 * v19];
          int v27 = v3;
          do
          {
            char v28 = *v22++;
            *v26++ = v28;
            --v27;
          }
          while (v27);
        }
        ++v19;
        v20 += 16;
        int64x2_t v21 = (long long *)((char *)v21 + v6);
      }
      while (v19 != v2);
      return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock(v50, 16, *(int16x4_t **)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
    }
    uint64_t v30 = 0;
    uint64_t v31 = (char *)&v50[v5] + v4;
    uint64_t v32 = (char *)&v50[v5 + 2] + v4;
    char v33 = (long long *)(v7 + 16);
    uint64_t v34 = (uint64_t *)(v7 + v18);
    for (uint64_t i = &v31[v18]; ; i += 16)
    {
      uint64_t v36 = (char *)(v7 + v6 * v30);
      unsigned int v37 = &v10[16 * v30];
      if ((unint64_t)(v37 - v36) >= 0x20)
      {
        unsigned int v39 = v33;
        int v40 = v32;
        uint64_t v41 = v3 & 0xFFFFFFE0;
        do
        {
          long long v42 = *v39;
          *(v40 - 1) = *(v39 - 1);
          *int v40 = v42;
          v40 += 2;
          v39 += 2;
          v41 -= 32;
        }
        while (v41);
        if ((v3 & 0x18) != 0)
        {
          v37 += v11;
          uint64_t v43 = i;
          uint64_t v44 = v34;
          uint64_t v45 = v11 - v18;
          do
          {
            uint64_t v46 = *v44++;
            *(void *)uint64_t v43 = v46;
            v43 += 8;
            v45 -= 8;
          }
          while (v45);
          if (v11 == v3) {
            goto LABEL_36;
          }
          v36 += v11;
          int v38 = v3 & 0xFFFFFFF8;
        }
        else
        {
          v36 += v18;
          v37 += v18;
          int v38 = v3 & 0xFFFFFFE0;
        }
      }
      else
      {
        int v38 = 0;
      }
      int v47 = v3 - v38;
      do
      {
        char v48 = *v36++;
        *v37++ = v48;
        --v47;
      }
      while (v47);
LABEL_36:
      ++v30;
      v32 += 16;
      char v33 = (long long *)((char *)v33 + v6);
      uint64_t v34 = (uint64_t *)((char *)v34 + v6);
      if (v30 == v2) {
        return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock(v50, 16, *(int16x4_t **)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
      }
    }
  }
  unint64_t v8 = (char *)&v50[v5] + v4 + 3;
  unint64_t v9 = (char *)(v7 + 3);
  do
  {
    *(v8 - 3) = *(v9 - 3);
    if (v3 != 1)
    {
      *(v8 - 2) = *(v9 - 2);
      if (v3 != 2)
      {
        *(v8 - 1) = *(v9 - 1);
        if (v3 != 3)
        {
          *unint64_t v8 = *v9;
          if (v3 != 4)
          {
            v8[1] = v9[1];
            if (v3 != 5)
            {
              v8[2] = v9[2];
              if (v3 != 6) {
                v8[3] = v9[3];
              }
            }
          }
        }
      }
    }
    v8 += 16;
    v9 += v6;
    --v2;
  }
  while (v2);
  return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock(v50, 16, *(int16x4_t **)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
}

unint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE0ELj1ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  v52[33] = *(int8x8_t *)MEMORY[0x263EF8340];
  AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressMacroblock(v52, *(int8x8_t **)(a1 + 40), *(unsigned __int8 **)(a1 + 48));
  uint64_t v6 = *(unsigned int *)(a1 + 80);
  if (!v6) {
    return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v52, 16, *(int8x8_t **)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), *(double *)&v2, *(double *)&v3, v4, v5);
  }
  uint64_t v7 = *(unsigned int *)(a1 + 84);
  if (!v7) {
    return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v52, 16, *(int8x8_t **)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), *(double *)&v2, *(double *)&v3, v4, v5);
  }
  uint64_t v8 = *(unsigned int *)(a1 + 76);
  uint64_t v9 = 2 * *(unsigned int *)(a1 + 72);
  uint64_t v11 = *(void *)(a1 + 56);
  uint64_t v10 = *(void *)(a1 + 64);
  if (v7 > 7)
  {
    uint64_t v14 = (char *)v52 + v8 + v9 * 8;
    uint64_t v15 = v7 & 0xFFFFFFF8;
    if (v7 <= 0x1F)
    {
      uint64_t v16 = 0;
      while (1)
      {
        char v17 = (char *)(v11 + v10 * v16);
        uint64_t v18 = &v14[16 * v16];
        if ((unint64_t)(v18 - v17) > 0x1F)
        {
          *(void *)&long long v2 = *(void *)v17;
          *(void *)uint64_t v18 = *(void *)v17;
          if (v15 != 8)
          {
            *(void *)&long long v2 = *((void *)v17 + 1);
            *((void *)v18 + 1) = v2;
            if (v15 != 16)
            {
              *(void *)&long long v2 = *((void *)v17 + 2);
              *((void *)v18 + 2) = v2;
            }
          }
          if (v15 == v7) {
            goto LABEL_15;
          }
          v18 += v15;
          v17 += v15;
          int v19 = v7 & 0xFFFFFFF8;
        }
        else
        {
          int v19 = 0;
        }
        int v20 = v7 - v19;
        do
        {
          char v21 = *v17++;
          *v18++ = v21;
          --v20;
        }
        while (v20);
LABEL_15:
        if (++v16 == v6) {
          return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v52, 16, *(int8x8_t **)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), *(double *)&v2, *(double *)&v3, v4, v5);
        }
      }
    }
    uint64_t v22 = v7 & 0xFFFFFFE0;
    if (v22 == v7)
    {
      uint64_t v23 = 0;
      int64x2_t v24 = (char *)&v52[v9 + 2] + v8;
      uint64_t v25 = (long long *)(v11 + 16);
      do
      {
        uint64_t v26 = (char *)(v11 + v10 * v23);
        int v27 = v25;
        char v28 = v24;
        uint64_t v29 = v7;
        if ((unint64_t)(&v14[16 * v23] - v26) >= 0x20)
        {
          do
          {
            long long v2 = *(v27 - 1);
            long long v3 = *v27;
            *(v28 - 1) = v2;
            *char v28 = v3;
            v28 += 2;
            v27 += 2;
            v29 -= 32;
          }
          while (v29);
        }
        else
        {
          uint64_t v30 = &v14[16 * v23];
          int v31 = v7;
          do
          {
            char v32 = *v26++;
            *v30++ = v32;
            --v31;
          }
          while (v31);
        }
        ++v23;
        v24 += 16;
        uint64_t v25 = (long long *)((char *)v25 + v10);
      }
      while (v23 != v6);
      return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v52, 16, *(int8x8_t **)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), *(double *)&v2, *(double *)&v3, v4, v5);
    }
    uint64_t v33 = 0;
    uint64_t v34 = (char *)&v52[v9] + v8;
    uint64_t v35 = (char *)&v52[v9 + 2] + v8;
    uint64_t v36 = (long long *)(v11 + 16);
    unsigned int v37 = (uint64_t *)(v11 + v22);
    for (uint64_t i = &v34[v22]; ; i += 16)
    {
      unsigned int v39 = (char *)(v11 + v10 * v33);
      int v40 = &v14[16 * v33];
      if ((unint64_t)(v40 - v39) >= 0x20)
      {
        long long v42 = v36;
        uint64_t v43 = v35;
        uint64_t v44 = v7 & 0xFFFFFFE0;
        do
        {
          long long v2 = *(v42 - 1);
          long long v3 = *v42;
          *(v43 - 1) = v2;
          *uint64_t v43 = v3;
          v43 += 2;
          v42 += 2;
          v44 -= 32;
        }
        while (v44);
        if ((v7 & 0x18) != 0)
        {
          v40 += v15;
          uint64_t v45 = i;
          uint64_t v46 = v37;
          uint64_t v47 = v15 - v22;
          do
          {
            uint64_t v48 = *v46++;
            *(void *)&long long v2 = v48;
            *(void *)uint64_t v45 = v48;
            v45 += 8;
            v47 -= 8;
          }
          while (v47);
          if (v15 == v7) {
            goto LABEL_36;
          }
          v39 += v15;
          int v41 = v7 & 0xFFFFFFF8;
        }
        else
        {
          v39 += v22;
          v40 += v22;
          int v41 = v7 & 0xFFFFFFE0;
        }
      }
      else
      {
        int v41 = 0;
      }
      int v49 = v7 - v41;
      do
      {
        char v50 = *v39++;
        *v40++ = v50;
        --v49;
      }
      while (v49);
LABEL_36:
      ++v33;
      v35 += 16;
      uint64_t v36 = (long long *)((char *)v36 + v10);
      unsigned int v37 = (uint64_t *)((char *)v37 + v10);
      if (v33 == v6) {
        return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v52, 16, *(int8x8_t **)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), *(double *)&v2, *(double *)&v3, v4, v5);
      }
    }
  }
  uint64_t v12 = (char *)&v52[v9] + v8 + 3;
  int64x2_t v13 = (char *)(v11 + 3);
  do
  {
    *(v12 - 3) = *(v13 - 3);
    if (v7 != 1)
    {
      *(v12 - 2) = *(v13 - 2);
      if (v7 != 2)
      {
        *(v12 - 1) = *(v13 - 1);
        if (v7 != 3)
        {
          *uint64_t v12 = *v13;
          if (v7 != 4)
          {
            v12[1] = v13[1];
            if (v7 != 5)
            {
              v12[2] = v13[2];
              if (v7 != 6) {
                v12[3] = v13[3];
              }
            }
          }
        }
      }
    }
    v12 += 16;
    v13 += v10;
    --v6;
  }
  while (v6);
  return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v52, 16, *(int8x8_t **)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), *(double *)&v2, *(double *)&v3, v4, v5);
}

int16x4_t *___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE0ELj1ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  v50[33] = *(int16x4_t *)MEMORY[0x263EF8340];
  AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressMacroblock((int8x8_t *)v50, *(int8x8_t **)(a1 + 40), *(unsigned __int8 **)(a1 + 48));
  uint64_t v2 = *(unsigned int *)(a1 + 80);
  if (!v2) {
    return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock(v50, 16, *(int16x4_t **)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
  }
  uint64_t v3 = *(unsigned int *)(a1 + 84);
  if (!v3) {
    return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock(v50, 16, *(int16x4_t **)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
  }
  uint64_t v4 = *(unsigned int *)(a1 + 76);
  uint64_t v5 = 2 * *(unsigned int *)(a1 + 72);
  uint64_t v7 = *(void *)(a1 + 56);
  uint64_t v6 = *(void *)(a1 + 64);
  if (v3 > 7)
  {
    uint64_t v10 = (char *)v50 + v4 + v5 * 8;
    uint64_t v11 = v3 & 0xFFFFFFF8;
    if (v3 <= 0x1F)
    {
      uint64_t v12 = 0;
      while (1)
      {
        int64x2_t v13 = (char *)(v7 + v6 * v12);
        uint64_t v14 = &v10[16 * v12];
        if ((unint64_t)(v14 - v13) > 0x1F)
        {
          *(void *)uint64_t v14 = *(void *)v13;
          if (v11 != 8)
          {
            *((void *)v14 + 1) = *((void *)v13 + 1);
            if (v11 != 16) {
              *((void *)v14 + 2) = *((void *)v13 + 2);
            }
          }
          if (v11 == v3) {
            goto LABEL_15;
          }
          v14 += v11;
          v13 += v11;
          int v15 = v3 & 0xFFFFFFF8;
        }
        else
        {
          int v15 = 0;
        }
        int v16 = v3 - v15;
        do
        {
          char v17 = *v13++;
          *v14++ = v17;
          --v16;
        }
        while (v16);
LABEL_15:
        if (++v12 == v2) {
          return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock(v50, 16, *(int16x4_t **)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
        }
      }
    }
    uint64_t v18 = v3 & 0xFFFFFFE0;
    if (v18 == v3)
    {
      uint64_t v19 = 0;
      int v20 = (char *)&v50[v5 + 2] + v4;
      char v21 = (long long *)(v7 + 16);
      do
      {
        uint64_t v22 = (char *)(v7 + v6 * v19);
        uint64_t v23 = v21;
        int64x2_t v24 = v20;
        uint64_t v25 = v3;
        if ((unint64_t)(&v10[16 * v19] - v22) >= 0x20)
        {
          do
          {
            long long v29 = *v23;
            *(v24 - 1) = *(v23 - 1);
            *int64x2_t v24 = v29;
            v24 += 2;
            v23 += 2;
            v25 -= 32;
          }
          while (v25);
        }
        else
        {
          uint64_t v26 = &v10[16 * v19];
          int v27 = v3;
          do
          {
            char v28 = *v22++;
            *v26++ = v28;
            --v27;
          }
          while (v27);
        }
        ++v19;
        v20 += 16;
        char v21 = (long long *)((char *)v21 + v6);
      }
      while (v19 != v2);
      return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock(v50, 16, *(int16x4_t **)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
    }
    uint64_t v30 = 0;
    int v31 = (char *)&v50[v5] + v4;
    char v32 = (char *)&v50[v5 + 2] + v4;
    uint64_t v33 = (long long *)(v7 + 16);
    uint64_t v34 = (uint64_t *)(v7 + v18);
    for (uint64_t i = &v31[v18]; ; i += 16)
    {
      uint64_t v36 = (char *)(v7 + v6 * v30);
      unsigned int v37 = &v10[16 * v30];
      if ((unint64_t)(v37 - v36) >= 0x20)
      {
        unsigned int v39 = v33;
        int v40 = v32;
        uint64_t v41 = v3 & 0xFFFFFFE0;
        do
        {
          long long v42 = *v39;
          *(v40 - 1) = *(v39 - 1);
          *int v40 = v42;
          v40 += 2;
          v39 += 2;
          v41 -= 32;
        }
        while (v41);
        if ((v3 & 0x18) != 0)
        {
          v37 += v11;
          uint64_t v43 = i;
          uint64_t v44 = v34;
          uint64_t v45 = v11 - v18;
          do
          {
            uint64_t v46 = *v44++;
            *(void *)uint64_t v43 = v46;
            v43 += 8;
            v45 -= 8;
          }
          while (v45);
          if (v11 == v3) {
            goto LABEL_36;
          }
          v36 += v11;
          int v38 = v3 & 0xFFFFFFF8;
        }
        else
        {
          v36 += v18;
          v37 += v18;
          int v38 = v3 & 0xFFFFFFE0;
        }
      }
      else
      {
        int v38 = 0;
      }
      int v47 = v3 - v38;
      do
      {
        char v48 = *v36++;
        *v37++ = v48;
        --v47;
      }
      while (v47);
LABEL_36:
      ++v30;
      v32 += 16;
      uint64_t v33 = (long long *)((char *)v33 + v6);
      uint64_t v34 = (uint64_t *)((char *)v34 + v6);
      if (v30 == v2) {
        return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock(v50, 16, *(int16x4_t **)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
      }
    }
  }
  uint64_t v8 = (char *)&v50[v5] + v4 + 3;
  uint64_t v9 = (char *)(v7 + 3);
  do
  {
    *(v8 - 3) = *(v9 - 3);
    if (v3 != 1)
    {
      *(v8 - 2) = *(v9 - 2);
      if (v3 != 2)
      {
        *(v8 - 1) = *(v9 - 1);
        if (v3 != 3)
        {
          *uint64_t v8 = *v9;
          if (v3 != 4)
          {
            v8[1] = v9[1];
            if (v3 != 5)
            {
              v8[2] = v9[2];
              if (v3 != 6) {
                v8[3] = v9[3];
              }
            }
          }
        }
      }
    }
    v8 += 16;
    v9 += v6;
    --v2;
  }
  while (v2);
  return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock(v50, 16, *(int16x4_t **)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
}

unint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE0ELj1ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  v52[33] = *(int8x8_t *)MEMORY[0x263EF8340];
  AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressMacroblock(v52, *(int8x8_t **)(a1 + 40), *(unsigned __int8 **)(a1 + 48));
  uint64_t v6 = *(unsigned int *)(a1 + 80);
  if (!v6) {
    return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v52, 16, *(int8x8_t **)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), *(double *)&v2, *(double *)&v3, v4, v5);
  }
  uint64_t v7 = *(unsigned int *)(a1 + 84);
  if (!v7) {
    return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v52, 16, *(int8x8_t **)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), *(double *)&v2, *(double *)&v3, v4, v5);
  }
  uint64_t v8 = *(unsigned int *)(a1 + 76);
  uint64_t v9 = 2 * *(unsigned int *)(a1 + 72);
  uint64_t v11 = *(void *)(a1 + 56);
  uint64_t v10 = *(void *)(a1 + 64);
  if (v7 > 7)
  {
    uint64_t v14 = (char *)v52 + v8 + v9 * 8;
    uint64_t v15 = v7 & 0xFFFFFFF8;
    if (v7 <= 0x1F)
    {
      uint64_t v16 = 0;
      while (1)
      {
        char v17 = (char *)(v11 + v10 * v16);
        uint64_t v18 = &v14[16 * v16];
        if ((unint64_t)(v18 - v17) > 0x1F)
        {
          *(void *)&long long v2 = *(void *)v17;
          *(void *)uint64_t v18 = *(void *)v17;
          if (v15 != 8)
          {
            *(void *)&long long v2 = *((void *)v17 + 1);
            *((void *)v18 + 1) = v2;
            if (v15 != 16)
            {
              *(void *)&long long v2 = *((void *)v17 + 2);
              *((void *)v18 + 2) = v2;
            }
          }
          if (v15 == v7) {
            goto LABEL_15;
          }
          v18 += v15;
          v17 += v15;
          int v19 = v7 & 0xFFFFFFF8;
        }
        else
        {
          int v19 = 0;
        }
        int v20 = v7 - v19;
        do
        {
          char v21 = *v17++;
          *v18++ = v21;
          --v20;
        }
        while (v20);
LABEL_15:
        if (++v16 == v6) {
          return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v52, 16, *(int8x8_t **)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), *(double *)&v2, *(double *)&v3, v4, v5);
        }
      }
    }
    uint64_t v22 = v7 & 0xFFFFFFE0;
    if (v22 == v7)
    {
      uint64_t v23 = 0;
      int64x2_t v24 = (char *)&v52[v9 + 2] + v8;
      uint64_t v25 = (long long *)(v11 + 16);
      do
      {
        uint64_t v26 = (char *)(v11 + v10 * v23);
        int v27 = v25;
        char v28 = v24;
        uint64_t v29 = v7;
        if ((unint64_t)(&v14[16 * v23] - v26) >= 0x20)
        {
          do
          {
            long long v2 = *(v27 - 1);
            long long v3 = *v27;
            *(v28 - 1) = v2;
            *char v28 = v3;
            v28 += 2;
            v27 += 2;
            v29 -= 32;
          }
          while (v29);
        }
        else
        {
          uint64_t v30 = &v14[16 * v23];
          int v31 = v7;
          do
          {
            char v32 = *v26++;
            *v30++ = v32;
            --v31;
          }
          while (v31);
        }
        ++v23;
        v24 += 16;
        uint64_t v25 = (long long *)((char *)v25 + v10);
      }
      while (v23 != v6);
      return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v52, 16, *(int8x8_t **)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), *(double *)&v2, *(double *)&v3, v4, v5);
    }
    uint64_t v33 = 0;
    uint64_t v34 = (char *)&v52[v9] + v8;
    uint64_t v35 = (char *)&v52[v9 + 2] + v8;
    uint64_t v36 = (long long *)(v11 + 16);
    unsigned int v37 = (uint64_t *)(v11 + v22);
    for (uint64_t i = &v34[v22]; ; i += 16)
    {
      unsigned int v39 = (char *)(v11 + v10 * v33);
      int v40 = &v14[16 * v33];
      if ((unint64_t)(v40 - v39) >= 0x20)
      {
        long long v42 = v36;
        uint64_t v43 = v35;
        uint64_t v44 = v7 & 0xFFFFFFE0;
        do
        {
          long long v2 = *(v42 - 1);
          long long v3 = *v42;
          *(v43 - 1) = v2;
          *uint64_t v43 = v3;
          v43 += 2;
          v42 += 2;
          v44 -= 32;
        }
        while (v44);
        if ((v7 & 0x18) != 0)
        {
          v40 += v15;
          uint64_t v45 = i;
          uint64_t v46 = v37;
          uint64_t v47 = v15 - v22;
          do
          {
            uint64_t v48 = *v46++;
            *(void *)&long long v2 = v48;
            *(void *)uint64_t v45 = v48;
            v45 += 8;
            v47 -= 8;
          }
          while (v47);
          if (v15 == v7) {
            goto LABEL_36;
          }
          v39 += v15;
          int v41 = v7 & 0xFFFFFFF8;
        }
        else
        {
          v39 += v22;
          v40 += v22;
          int v41 = v7 & 0xFFFFFFE0;
        }
      }
      else
      {
        int v41 = 0;
      }
      int v49 = v7 - v41;
      do
      {
        char v50 = *v39++;
        *v40++ = v50;
        --v49;
      }
      while (v49);
LABEL_36:
      ++v33;
      v35 += 16;
      uint64_t v36 = (long long *)((char *)v36 + v10);
      unsigned int v37 = (uint64_t *)((char *)v37 + v10);
      if (v33 == v6) {
        return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v52, 16, *(int8x8_t **)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), *(double *)&v2, *(double *)&v3, v4, v5);
      }
    }
  }
  uint64_t v12 = (char *)&v52[v9] + v8 + 3;
  int64x2_t v13 = (char *)(v11 + 3);
  do
  {
    *(v12 - 3) = *(v13 - 3);
    if (v7 != 1)
    {
      *(v12 - 2) = *(v13 - 2);
      if (v7 != 2)
      {
        *(v12 - 1) = *(v13 - 1);
        if (v7 != 3)
        {
          *uint64_t v12 = *v13;
          if (v7 != 4)
          {
            v12[1] = v13[1];
            if (v7 != 5)
            {
              v12[2] = v13[2];
              if (v7 != 6) {
                v12[3] = v13[3];
              }
            }
          }
        }
      }
    }
    v12 += 16;
    v13 += v10;
    --v6;
  }
  while (v6);
  return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v52, 16, *(int8x8_t **)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), *(double *)&v2, *(double *)&v3, v4, v5);
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE20ELj1ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint3EEELb0EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v1 = MEMORY[0x270FA5388](a1);
  uint64_t v51 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(v1 + 32);
  AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressMacroblock((uint64_t)v50, *(void *)(v1 + 40), *(unsigned __int8 **)(v1 + 48), *(_DWORD *)(*(void *)(v2 + 208) + 52));
  uint64_t v3 = *(unsigned int *)(v1 + 80);
  if (!v3 || !*(_DWORD *)(v1 + 84)) {
    return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::compressMacroblock((uint64_t)v50, 256, *(void *)(v1 + 40), *(unsigned char **)(v1 + 48), *(unsigned __int8 *)(v1 + 88), *(unsigned __int8 *)(v1 + 89), *(_DWORD *)(*(void *)(v2 + 208) + 52));
  }
  unint64_t v4 = (unint64_t)*(unsigned int *)(v1 + 72) << 8;
  uint64_t v5 = 16 * *(unsigned int *)(v1 + 76);
  uint64_t v6 = &v50[v4 + v5];
  uint64_t v7 = *(void *)(v1 + 56);
  uint64_t v8 = *(void *)(v1 + 64);
  unint64_t v9 = 16 * *(unsigned int *)(v1 + 84);
  if (v9 <= 1) {
    unint64_t v10 = 1;
  }
  else {
    unint64_t v10 = 16 * *(unsigned int *)(v1 + 84);
  }
  if (v10) {
    BOOL v11 = (v10 - 1) >> 32 == 0;
  }
  else {
    BOOL v11 = 0;
  }
  if (v11)
  {
    uint64_t v15 = &v50[v4 + v5];
    uint64_t v16 = v10 & 0xFFFFFFFF0;
    if (v10 < 0x20)
    {
      uint64_t v17 = 0;
      uint64_t v18 = &v50[v4 + v5];
      int v19 = *(uint64_t **)(v1 + 56);
      while (1)
      {
        int v20 = (char *)(v7 + v8 * v17);
        char v21 = &v6[256 * v17];
        if ((unint64_t)(&v15[256 * v17] - v20) > 0x1F)
        {
          v21 += v16;
          uint64_t v23 = v18;
          int64x2_t v24 = v19;
          uint64_t v25 = v10 & 0xFFFFFFFF0;
          do
          {
            uint64_t v26 = *v24++;
            *v23++ = v26;
            v25 -= 8;
          }
          while (v25);
          if (v10 == v16) {
            goto LABEL_17;
          }
          v20 += v16;
          int v22 = v10 & 0xFFFFFFF0;
        }
        else
        {
          int v22 = 0;
        }
        unsigned int v27 = v22 + 1;
        do
        {
          char v28 = *v20++;
          *v21++ = v28;
          BOOL v29 = v9 > v27++;
        }
        while (v29);
LABEL_17:
        ++v17;
        int v19 = (uint64_t *)((char *)v19 + v8);
        v18 += 256;
        if (v17 == v3) {
          return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::compressMacroblock((uint64_t)v50, 256, *(void *)(v1 + 40), *(unsigned char **)(v1 + 48), *(unsigned __int8 *)(v1 + 88), *(unsigned __int8 *)(v1 + 89), *(_DWORD *)(*(void *)(v2 + 208) + 52));
        }
      }
    }
    uint64_t v30 = 0;
    uint64_t v31 = v10 & 0xFFFFFFFE0;
    char v32 = &v50[v4 + v5];
    uint64_t v33 = &v50[v4 + 16 + v5];
    uint64_t v34 = (long long *)(v7 + 16);
    uint64_t v35 = (uint64_t *)(v7 + (v10 & 0xFFFFFFFE0));
    for (uint64_t i = &v32[v10 & 0xFFFFFFFE0]; ; i += 32)
    {
      unsigned int v37 = (char *)(v7 + v8 * v30);
      int v38 = &v6[256 * v30];
      if ((unint64_t)(&v15[256 * v30] - v37) >= 0x20)
      {
        int v40 = v34;
        int v41 = v33;
        uint64_t v42 = v10 & 0xFFFFFFFE0;
        do
        {
          long long v43 = *v40;
          *(v41 - 1) = *(v40 - 1);
          *int v41 = v43;
          v41 += 2;
          v40 += 2;
          v42 -= 32;
        }
        while (v42);
        if (v10 == v31) {
          goto LABEL_28;
        }
        if ((v10 & 0x10) != 0)
        {
          v38 += v16;
          uint64_t v44 = i;
          uint64_t v45 = v35;
          unint64_t v46 = v16 - (v10 & 0xFFFFFFFE0);
          do
          {
            uint64_t v47 = *v45++;
            *v44++ = v47;
            v46 -= 8;
          }
          while (v46);
          if (v10 == v16) {
            goto LABEL_28;
          }
          v37 += v16;
          int v39 = v10 & 0xFFFFFFF0;
        }
        else
        {
          v37 += v31;
          v38 += v31;
          int v39 = v10 & 0xFFFFFFE0;
        }
      }
      else
      {
        int v39 = 0;
      }
      unsigned int v48 = v39 + 1;
      do
      {
        char v49 = *v37++;
        *v38++ = v49;
        BOOL v29 = v9 > v48++;
      }
      while (v29);
LABEL_28:
      ++v30;
      v33 += 256;
      uint64_t v34 = (long long *)((char *)v34 + v8);
      uint64_t v35 = (uint64_t *)((char *)v35 + v8);
      if (v30 == v3) {
        return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::compressMacroblock((uint64_t)v50, 256, *(void *)(v1 + 40), *(unsigned char **)(v1 + 48), *(unsigned __int8 *)(v1 + 88), *(unsigned __int8 *)(v1 + 89), *(_DWORD *)(*(void *)(v2 + 208) + 52));
      }
    }
  }
  for (uint64_t j = 0; j != v3; ++j)
  {
    uint64_t v13 = 0;
    do
    {
      v6[v13] = *(unsigned char *)(v7 + v13);
      ++v13;
    }
    while (v9 > v13);
    v6 += 256;
    v7 += v8;
  }
  return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::compressMacroblock((uint64_t)v50, 256, *(void *)(v1 + 40), *(unsigned char **)(v1 + 48), *(unsigned __int8 *)(v1 + 88), *(unsigned __int8 *)(v1 + 89), *(_DWORD *)(*(void *)(v2 + 208) + 52));
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE18ELj1ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint3EEELb0EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v51 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(a1 + 32);
  AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressMacroblock((uint64_t)v50, *(const double **)(a1 + 40), *(unsigned char **)(a1 + 48), *(_DWORD *)(*(void *)(v2 + 208) + 52));
  uint64_t v3 = *(unsigned int *)(a1 + 80);
  if (!v3 || !*(_DWORD *)(a1 + 84)) {
    return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::compressMacroblock((uint64_t)v50, 128, *(void *)(a1 + 40), *(unsigned char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), *(_DWORD *)(*(void *)(v2 + 208) + 52));
  }
  unint64_t v4 = (unint64_t)*(unsigned int *)(a1 + 72) << 7;
  uint64_t v5 = 8 * *(unsigned int *)(a1 + 76);
  uint64_t v6 = &v50[v4 + v5];
  uint64_t v7 = *(void *)(a1 + 56);
  uint64_t v8 = *(void *)(a1 + 64);
  unint64_t v9 = 8 * *(unsigned int *)(a1 + 84);
  if (v9 <= 1) {
    unint64_t v10 = 1;
  }
  else {
    unint64_t v10 = 8 * *(unsigned int *)(a1 + 84);
  }
  if (v10) {
    BOOL v11 = (v10 - 1) >> 32 == 0;
  }
  else {
    BOOL v11 = 0;
  }
  if (v11)
  {
    uint64_t v15 = &v50[v4 + v5];
    uint64_t v16 = v10 & 0x7FFFFFFF8;
    if (v10 < 0x20)
    {
      uint64_t v17 = 0;
      uint64_t v18 = &v50[v4 + v5];
      int v19 = *(uint64_t **)(a1 + 56);
      while (1)
      {
        int v20 = (char *)(v7 + v8 * v17);
        char v21 = &v6[128 * v17];
        if ((unint64_t)(&v15[128 * v17] - v20) > 0x1F)
        {
          v21 += v16;
          uint64_t v23 = v18;
          int64x2_t v24 = v19;
          uint64_t v25 = v10 & 0x7FFFFFFF8;
          do
          {
            uint64_t v26 = *v24++;
            *v23++ = v26;
            v25 -= 8;
          }
          while (v25);
          if (v10 == v16) {
            goto LABEL_17;
          }
          v20 += v16;
          int v22 = v10 & 0xFFFFFFF8;
        }
        else
        {
          int v22 = 0;
        }
        unsigned int v27 = v22 + 1;
        do
        {
          char v28 = *v20++;
          *v21++ = v28;
          BOOL v29 = v9 > v27++;
        }
        while (v29);
LABEL_17:
        ++v17;
        int v19 = (uint64_t *)((char *)v19 + v8);
        v18 += 128;
        if (v17 == v3) {
          return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::compressMacroblock((uint64_t)v50, 128, *(void *)(a1 + 40), *(unsigned char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), *(_DWORD *)(*(void *)(v2 + 208) + 52));
        }
      }
    }
    uint64_t v30 = 0;
    uint64_t v31 = v10 & 0x7FFFFFFE0;
    char v32 = &v50[v4 + v5];
    uint64_t v33 = &v50[v4 + 16 + v5];
    uint64_t v34 = (long long *)(v7 + 16);
    uint64_t v35 = (uint64_t *)(v7 + (v10 & 0x7FFFFFFE0));
    for (uint64_t i = &v32[v10 & 0x7FFFFFFE0]; ; i += 16)
    {
      unsigned int v37 = (char *)(v7 + v8 * v30);
      int v38 = &v6[128 * v30];
      if ((unint64_t)(&v15[128 * v30] - v37) >= 0x20)
      {
        uint64_t v42 = v34;
        long long v43 = v33;
        uint64_t v44 = v10 & 0x7FFFFFFE0;
        do
        {
          long long v45 = *v42;
          *(v43 - 1) = *(v42 - 1);
          *long long v43 = v45;
          v43 += 2;
          v42 += 2;
          v44 -= 32;
        }
        while (v44);
        if (v10 == v31) {
          goto LABEL_28;
        }
        if ((v10 & 0x18) != 0)
        {
          v38 += v16;
          unint64_t v46 = i;
          uint64_t v47 = v35;
          unint64_t v48 = v16 - (v10 & 0x7FFFFFFE0);
          do
          {
            uint64_t v49 = *v47++;
            *v46++ = v49;
            v48 -= 8;
          }
          while (v48);
          if (v10 == v16) {
            goto LABEL_28;
          }
          v37 += v16;
          int v39 = v10 & 0xFFFFFFF8;
        }
        else
        {
          v37 += v31;
          v38 += v31;
          int v39 = v10 & 0xFFFFFFE0;
        }
      }
      else
      {
        int v39 = 0;
      }
      unsigned int v40 = v39 + 1;
      do
      {
        char v41 = *v37++;
        *v38++ = v41;
        BOOL v29 = v9 > v40++;
      }
      while (v29);
LABEL_28:
      ++v30;
      v33 += 128;
      uint64_t v34 = (long long *)((char *)v34 + v8);
      uint64_t v35 = (uint64_t *)((char *)v35 + v8);
      if (v30 == v3) {
        return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::compressMacroblock((uint64_t)v50, 128, *(void *)(a1 + 40), *(unsigned char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), *(_DWORD *)(*(void *)(v2 + 208) + 52));
      }
    }
  }
  for (uint64_t j = 0; j != v3; ++j)
  {
    uint64_t v13 = 0;
    do
    {
      v6[v13] = *(unsigned char *)(v7 + v13);
      ++v13;
    }
    while (v9 > v13);
    v6 += 128;
    v7 += v8;
  }
  return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::compressMacroblock((uint64_t)v50, 128, *(void *)(a1 + 40), *(unsigned char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), *(_DWORD *)(*(void *)(v2 + 208) + 52));
}

unint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE4ELj1ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint3EEELb0EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1, int32x4_t a2, int32x4_t a3, int32x4_t a4)
{
  uint64_t v5 = 0;
  uint64_t v64 = *MEMORY[0x263EF8340];
  uint64_t v7 = *(void *)(a1 + 32);
  uint64_t v6 = *(void *)(a1 + 40);
  uint64_t v8 = *(unsigned char **)(a1 + 48);
  int v9 = *(_DWORD *)(*(void *)(v7 + 208) + 52);
  do
  {
    BOOL v11 = (int32x4_t *)&v63[128
                          * (unint64_t)AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,1u>::kSubblockPositions[v5 + 1]
                          + 16
                          * AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,1u>::kSubblockPositions[v5]];
    unsigned int v12 = *v8;
    if (*v8)
    {
      if (v12 < 0xF0)
      {
        if (v12 == 63)
        {
          int32x4_t v13 = *(int32x4_t *)v6;
          a3 = *(int32x4_t *)(v6 + 16);
          a4 = *(int32x4_t *)(v6 + 32);
          int32x4_t v14 = *(int32x4_t *)(v6 + 48);
          *BOOL v11 = vuzp1q_s32(*(int32x4_t *)v6, a4);
          v11[2] = vuzp2q_s32(v13, a4);
          v11[4] = vuzp1q_s32(a3, v14);
          a2 = vuzp2q_s32(a3, v14);
          v11[6] = a2;
          uint64_t v10 = 64;
        }
        else if (v12 == 1)
        {
          a2 = (int32x4_t)vld1q_dup_s16((const __int16 *)v6);
          *BOOL v11 = a2;
          v11[2] = a2;
          v11[4] = a2;
          v11[6] = a2;
          uint64_t v10 = 2;
        }
        else
        {
          uint64_t v10 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(v11, 32, v6, v12, *(int8x8_t *)a2.i8, *(double *)a3.i64, *(int8x8_t *)a4.i8);
        }
      }
      else
      {
        AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(v11, 32, v6, v12, v9);
        uint64_t v10 = 32;
      }
    }
    else
    {
      uint64_t v10 = 0;
      v11->i64[0] = 0;
      v11->i64[1] = 0;
      v11[2].i64[0] = 0;
      v11[2].i64[1] = 0;
      v11[4].i64[0] = 0;
      v11[4].i64[1] = 0;
      v11[6].i64[0] = 0;
      v11[6].i64[1] = 0;
    }
    v6 += v10;
    ++v8;
    v5 += 2;
  }
  while (v5 != 16);
  uint64_t v15 = *(unsigned int *)(a1 + 80);
  if (v15 && *(_DWORD *)(a1 + 84))
  {
    uint64_t v16 = 32 * *(unsigned int *)(a1 + 72);
    uint64_t v17 = 2 * *(unsigned int *)(a1 + 76);
    uint64_t v18 = &v63[v16 + v17];
    uint64_t v19 = *(void *)(a1 + 56);
    uint64_t v20 = *(void *)(a1 + 64);
    unint64_t v21 = 2 * *(unsigned int *)(a1 + 84);
    if (v21 <= 1) {
      unint64_t v22 = 1;
    }
    else {
      unint64_t v22 = 2 * *(unsigned int *)(a1 + 84);
    }
    if (v22 <= 7)
    {
      for (uint64_t i = 0; i != v15; ++i)
      {
        uint64_t v24 = 0;
        do
        {
          v18[v24] = *(unsigned char *)(v19 + v24);
          ++v24;
        }
        while (v21 > v24);
        v18 += 32;
        v19 += v20;
      }
      return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::compressMacroblock((unint64_t)v63, 32, *(void *)(a1 + 40), *(unsigned char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), *(_DWORD *)(*(void *)(v7 + 208) + 52));
    }
    if (v22 && !((v22 - 1) >> 32))
    {
      uint64_t v25 = &v63[v16 + v17];
      uint64_t v26 = v22 & 0x1FFFFFFF8;
      if (v22 < 0x20)
      {
        uint64_t v27 = 0;
        char v28 = &v63[v16 + v17];
        BOOL v29 = *(uint64_t **)(a1 + 56);
        while (1)
        {
          uint64_t v30 = (char *)(v19 + v20 * v27);
          uint64_t v31 = &v18[32 * v27];
          if ((unint64_t)(&v25[32 * v27] - v30) > 0x1F)
          {
            v31 += v26;
            uint64_t v33 = v28;
            uint64_t v34 = v29;
            uint64_t v35 = v22 & 0x1FFFFFFF8;
            do
            {
              uint64_t v36 = *v34++;
              *v33++ = v36;
              v35 -= 8;
            }
            while (v35);
            if (v22 == v26) {
              goto LABEL_27;
            }
            v30 += v26;
            int v32 = v22 & 0xFFFFFFF8;
          }
          else
          {
            int v32 = 0;
          }
          unsigned int v37 = v32 + 1;
          do
          {
            char v38 = *v30++;
            *v31++ = v38;
            BOOL v39 = v21 > v37++;
          }
          while (v39);
LABEL_27:
          ++v27;
          BOOL v29 = (uint64_t *)((char *)v29 + v20);
          v28 += 32;
          if (v27 == v15) {
            return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::compressMacroblock((unint64_t)v63, 32, *(void *)(a1 + 40), *(unsigned char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), *(_DWORD *)(*(void *)(v7 + 208) + 52));
          }
        }
      }
      uint64_t v43 = 0;
      uint64_t v44 = v22 & 0x1FFFFFFE0;
      long long v45 = &v63[v16 + v17];
      unint64_t v46 = &v63[v16 + 16 + v17];
      uint64_t v47 = (long long *)(v19 + 16);
      unint64_t v48 = (uint64_t *)(v19 + (v22 & 0x1FFFFFFE0));
      for (uint64_t j = &v45[v22 & 0x1FFFFFFE0]; ; j += 4)
      {
        char v50 = (char *)(v19 + v20 * v43);
        uint64_t v51 = &v18[32 * v43];
        if ((unint64_t)(&v25[32 * v43] - v50) >= 0x20)
        {
          uint64_t v55 = v47;
          char v56 = v46;
          uint64_t v57 = v22 & 0x1FFFFFFE0;
          do
          {
            long long v58 = *v55;
            *(v56 - 1) = *(v55 - 1);
            *char v56 = v58;
            v56 += 2;
            v55 += 2;
            v57 -= 32;
          }
          while (v57);
          if (v22 == v44) {
            goto LABEL_43;
          }
          if ((v22 & 0x18) != 0)
          {
            v51 += v26;
            uint64_t v59 = j;
            long long v60 = v48;
            unint64_t v61 = v26 - (v22 & 0x1FFFFFFE0);
            do
            {
              uint64_t v62 = *v60++;
              *v59++ = v62;
              v61 -= 8;
            }
            while (v61);
            if (v22 == v26) {
              goto LABEL_43;
            }
            v50 += v26;
            int v52 = v22 & 0xFFFFFFF8;
          }
          else
          {
            v50 += v44;
            v51 += v44;
            int v52 = v22 & 0xFFFFFFE0;
          }
        }
        else
        {
          int v52 = 0;
        }
        unsigned int v53 = v52 + 1;
        do
        {
          char v54 = *v50++;
          *v51++ = v54;
          BOOL v39 = v21 > v53++;
        }
        while (v39);
LABEL_43:
        ++v43;
        v46 += 32;
        uint64_t v47 = (long long *)((char *)v47 + v20);
        unint64_t v48 = (uint64_t *)((char *)v48 + v20);
        if (v43 == v15) {
          return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::compressMacroblock((unint64_t)v63, 32, *(void *)(a1 + 40), *(unsigned char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), *(_DWORD *)(*(void *)(v7 + 208) + 52));
        }
      }
    }
    for (uint64_t k = 0; k != v15; ++k)
    {
      uint64_t v41 = 0;
      do
      {
        v18[v41] = *(unsigned char *)(v19 + v41);
        ++v41;
      }
      while (v21 > v41);
      v18 += 32;
      v19 += v20;
    }
  }
  return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::compressMacroblock((unint64_t)v63, 32, *(void *)(a1 + 40), *(unsigned char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), *(_DWORD *)(*(void *)(v7 + 208) + 52));
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE17ELj1ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint3EEELb0EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1, int8x8_t a2)
{
  uint64_t v52 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(a1 + 32);
  AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressMacroblock(v51, *(void *)(a1 + 40), *(unsigned __int8 **)(a1 + 48), *(_DWORD *)(*(void *)(v3 + 208) + 52), a2);
  uint64_t v4 = *(unsigned int *)(a1 + 80);
  if (!v4 || !*(_DWORD *)(a1 + 84)) {
    return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::compressMacroblock((uint64_t)v51, 128, *(void *)(a1 + 40), *(unsigned char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), *(_DWORD *)(*(void *)(v3 + 208) + 52));
  }
  unint64_t v5 = (unint64_t)*(unsigned int *)(a1 + 72) << 7;
  uint64_t v6 = 8 * *(unsigned int *)(a1 + 76);
  uint64_t v7 = (char *)v51 + v5 + v6;
  uint64_t v8 = *(void *)(a1 + 56);
  uint64_t v9 = *(void *)(a1 + 64);
  unint64_t v10 = 8 * *(unsigned int *)(a1 + 84);
  if (v10 <= 1) {
    unint64_t v11 = 1;
  }
  else {
    unint64_t v11 = 8 * *(unsigned int *)(a1 + 84);
  }
  if (v11) {
    BOOL v12 = (v11 - 1) >> 32 == 0;
  }
  else {
    BOOL v12 = 0;
  }
  if (v12)
  {
    uint64_t v16 = (char *)v51 + v5 + v6;
    uint64_t v17 = v11 & 0x7FFFFFFF8;
    if (v11 < 0x20)
    {
      uint64_t v18 = 0;
      uint64_t v19 = (char *)v51 + v5 + v6;
      uint64_t v20 = *(uint64_t **)(a1 + 56);
      while (1)
      {
        unint64_t v21 = (char *)(v8 + v9 * v18);
        unint64_t v22 = &v7[128 * v18];
        if ((unint64_t)(&v16[128 * v18] - v21) > 0x1F)
        {
          v22 += v17;
          uint64_t v24 = v19;
          uint64_t v25 = v20;
          uint64_t v26 = v11 & 0x7FFFFFFF8;
          do
          {
            uint64_t v27 = *v25++;
            *v24++ = v27;
            v26 -= 8;
          }
          while (v26);
          if (v11 == v17) {
            goto LABEL_17;
          }
          v21 += v17;
          int v23 = v11 & 0xFFFFFFF8;
        }
        else
        {
          int v23 = 0;
        }
        unsigned int v28 = v23 + 1;
        do
        {
          char v29 = *v21++;
          *v22++ = v29;
          BOOL v30 = v10 > v28++;
        }
        while (v30);
LABEL_17:
        ++v18;
        uint64_t v20 = (uint64_t *)((char *)v20 + v9);
        v19 += 128;
        if (v18 == v4) {
          return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::compressMacroblock((uint64_t)v51, 128, *(void *)(a1 + 40), *(unsigned char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), *(_DWORD *)(*(void *)(v3 + 208) + 52));
        }
      }
    }
    uint64_t v31 = 0;
    uint64_t v32 = v11 & 0x7FFFFFFE0;
    uint64_t v33 = (char *)v51 + v5 + v6;
    uint64_t v34 = (char *)&v51[1] + v5 + v6;
    uint64_t v35 = (long long *)(v8 + 16);
    uint64_t v36 = (uint64_t *)(v8 + (v11 & 0x7FFFFFFE0));
    for (uint64_t i = &v33[v11 & 0x7FFFFFFE0]; ; i += 128)
    {
      char v38 = (char *)(v8 + v9 * v31);
      BOOL v39 = &v7[128 * v31];
      if ((unint64_t)(&v16[128 * v31] - v38) >= 0x20)
      {
        uint64_t v43 = v35;
        uint64_t v44 = v34;
        uint64_t v45 = v11 & 0x7FFFFFFE0;
        do
        {
          long long v46 = *v43;
          *(v44 - 1) = *(v43 - 1);
          *uint64_t v44 = v46;
          v44 += 2;
          v43 += 2;
          v45 -= 32;
        }
        while (v45);
        if (v11 == v32) {
          goto LABEL_28;
        }
        if ((v11 & 0x18) != 0)
        {
          v39 += v17;
          uint64_t v47 = i;
          unint64_t v48 = v36;
          unint64_t v49 = v17 - (v11 & 0x7FFFFFFE0);
          do
          {
            uint64_t v50 = *v48++;
            *(void *)uint64_t v47 = v50;
            v47 += 8;
            v49 -= 8;
          }
          while (v49);
          if (v11 == v17) {
            goto LABEL_28;
          }
          v38 += v17;
          int v40 = v11 & 0xFFFFFFF8;
        }
        else
        {
          v38 += v32;
          v39 += v32;
          int v40 = v11 & 0xFFFFFFE0;
        }
      }
      else
      {
        int v40 = 0;
      }
      unsigned int v41 = v40 + 1;
      do
      {
        char v42 = *v38++;
        *v39++ = v42;
        BOOL v30 = v10 > v41++;
      }
      while (v30);
LABEL_28:
      ++v31;
      v34 += 128;
      uint64_t v35 = (long long *)((char *)v35 + v9);
      uint64_t v36 = (uint64_t *)((char *)v36 + v9);
      if (v31 == v4) {
        return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::compressMacroblock((uint64_t)v51, 128, *(void *)(a1 + 40), *(unsigned char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), *(_DWORD *)(*(void *)(v3 + 208) + 52));
      }
    }
  }
  for (uint64_t j = 0; j != v4; ++j)
  {
    uint64_t v14 = 0;
    do
    {
      v7[v14] = *(unsigned char *)(v8 + v14);
      ++v14;
    }
    while (v10 > v14);
    v7 += 128;
    v8 += v9;
  }
  return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::compressMacroblock((uint64_t)v51, 128, *(void *)(a1 + 40), *(unsigned char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), *(_DWORD *)(*(void *)(v3 + 208) + 52));
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE11ELj1ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint3EEELb0EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1, int32x4_t a2, int32x4_t a3)
{
  uint64_t v4 = 0;
  uint64_t v69 = *MEMORY[0x263EF8340];
  uint64_t v6 = *(void *)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  uint64_t v7 = *(unsigned char **)(a1 + 48);
  int v8 = *(_DWORD *)(*(void *)(v6 + 208) + 52);
  do
  {
    unint64_t v10 = (int64x2_t *)&v68[256
                          * (unint64_t)AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,1u>::kSubblockPositions[v4 + 1]
                          + 32
                          * AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,1u>::kSubblockPositions[v4]];
    unsigned int v11 = *v7;
    if (*v7)
    {
      if (v11 < 0xF0)
      {
        if (v11 == 127)
        {
          int64x2_t v12 = *(int64x2_t *)v5;
          int64x2_t v13 = *(int64x2_t *)(v5 + 16);
          int64x2_t v14 = *(int64x2_t *)(v5 + 32);
          int64x2_t v15 = *(int64x2_t *)(v5 + 48);
          int64x2_t v16 = *(int64x2_t *)(v5 + 64);
          int64x2_t v17 = *(int64x2_t *)(v5 + 80);
          int64x2_t v18 = *(int64x2_t *)(v5 + 96);
          int64x2_t v19 = *(int64x2_t *)(v5 + 112);
          *unint64_t v10 = vzip1q_s64(*(int64x2_t *)v5, v13);
          v10[1] = vzip1q_s64(v16, v17);
          v10[4] = vzip2q_s64(v12, v13);
          v10[5] = vzip2q_s64(v16, v17);
          v10[8] = vzip1q_s64(v14, v15);
          v10[9] = vzip1q_s64(v18, v19);
          a2 = (int32x4_t)vzip2q_s64(v14, v15);
          a3 = (int32x4_t)vzip2q_s64(v18, v19);
          v10[12] = (int64x2_t)a2;
          v10[13] = (int64x2_t)a3;
          uint64_t v9 = 128;
        }
        else if (v11 == 3)
        {
          a2 = (int32x4_t)vld1q_dup_f32((const float *)v5);
          *unint64_t v10 = (int64x2_t)a2;
          v10[1] = (int64x2_t)a2;
          v10[4] = (int64x2_t)a2;
          v10[5] = (int64x2_t)a2;
          v10[8] = (int64x2_t)a2;
          v10[9] = (int64x2_t)a2;
          v10[12] = (int64x2_t)a2;
          v10[13] = (int64x2_t)a2;
          uint64_t v9 = 4;
        }
        else
        {
          uint64_t v9 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(v10, 64, v5, v11, a2, a3);
        }
      }
      else
      {
        AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(v10->i32, 64, v5, v11, v8);
        uint64_t v9 = 64;
      }
    }
    else
    {
      uint64_t v9 = 0;
      a2 = 0uLL;
      *unint64_t v10 = 0u;
      v10[1] = 0u;
      v10[4] = 0u;
      v10[5] = 0u;
      v10[8] = 0u;
      v10[9] = 0u;
      v10[12] = 0u;
      v10[13] = 0u;
    }
    v5 += v9;
    ++v7;
    v4 += 2;
  }
  while (v4 != 16);
  uint64_t v20 = *(unsigned int *)(a1 + 80);
  if (v20 && *(_DWORD *)(a1 + 84))
  {
    unint64_t v21 = (unint64_t)*(unsigned int *)(a1 + 72) << 6;
    uint64_t v22 = 4 * *(unsigned int *)(a1 + 76);
    int v23 = &v68[v21 + v22];
    uint64_t v24 = *(void *)(a1 + 56);
    uint64_t v25 = *(void *)(a1 + 64);
    unint64_t v26 = 4 * *(unsigned int *)(a1 + 84);
    if (v26 <= 1) {
      unint64_t v27 = 1;
    }
    else {
      unint64_t v27 = 4 * *(unsigned int *)(a1 + 84);
    }
    if (v27 <= 7)
    {
      for (uint64_t i = 0; i != v20; ++i)
      {
        uint64_t v29 = 0;
        do
        {
          v23[v29] = *(unsigned char *)(v24 + v29);
          ++v29;
        }
        while (v26 > v29);
        v23 += 64;
        v24 += v25;
      }
      return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::compressMacroblock((uint64_t)v68, 64, *(void *)(a1 + 40), *(unsigned char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), *(_DWORD *)(*(void *)(v6 + 208) + 52));
    }
    if (v27 && !((v27 - 1) >> 32))
    {
      BOOL v30 = &v68[v21 + v22];
      uint64_t v31 = v27 & 0x3FFFFFFF8;
      if (v27 < 0x20)
      {
        uint64_t v32 = 0;
        uint64_t v33 = &v68[v21 + v22];
        uint64_t v34 = *(uint64_t **)(a1 + 56);
        while (1)
        {
          uint64_t v35 = (char *)(v24 + v25 * v32);
          uint64_t v36 = &v23[64 * v32];
          if ((unint64_t)(&v30[64 * v32] - v35) > 0x1F)
          {
            v36 += v31;
            char v38 = v33;
            BOOL v39 = v34;
            uint64_t v40 = v27 & 0x3FFFFFFF8;
            do
            {
              uint64_t v41 = *v39++;
              *v38++ = v41;
              v40 -= 8;
            }
            while (v40);
            if (v27 == v31) {
              goto LABEL_27;
            }
            v35 += v31;
            int v37 = v27 & 0xFFFFFFF8;
          }
          else
          {
            int v37 = 0;
          }
          unsigned int v42 = v37 + 1;
          do
          {
            char v43 = *v35++;
            *v36++ = v43;
            BOOL v44 = v26 > v42++;
          }
          while (v44);
LABEL_27:
          ++v32;
          uint64_t v34 = (uint64_t *)((char *)v34 + v25);
          v33 += 64;
          if (v32 == v20) {
            return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::compressMacroblock((uint64_t)v68, 64, *(void *)(a1 + 40), *(unsigned char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), *(_DWORD *)(*(void *)(v6 + 208) + 52));
          }
        }
      }
      uint64_t v48 = 0;
      uint64_t v49 = v27 & 0x3FFFFFFE0;
      uint64_t v50 = &v68[v21 + v22];
      uint64_t v51 = &v68[v21 + 16 + v22];
      uint64_t v52 = (long long *)(v24 + 16);
      unsigned int v53 = (uint64_t *)(v24 + (v27 & 0x3FFFFFFE0));
      for (uint64_t j = &v50[v27 & 0x3FFFFFFE0]; ; j += 8)
      {
        uint64_t v55 = (char *)(v24 + v25 * v48);
        char v56 = &v23[64 * v48];
        if ((unint64_t)(&v30[64 * v48] - v55) >= 0x20)
        {
          long long v60 = v52;
          unint64_t v61 = v51;
          uint64_t v62 = v27 & 0x3FFFFFFE0;
          do
          {
            long long v63 = *v60;
            *(v61 - 1) = *(v60 - 1);
            *unint64_t v61 = v63;
            v61 += 2;
            v60 += 2;
            v62 -= 32;
          }
          while (v62);
          if (v27 == v49) {
            goto LABEL_43;
          }
          if ((v27 & 0x18) != 0)
          {
            v56 += v31;
            uint64_t v64 = j;
            char v65 = v53;
            unint64_t v66 = v31 - (v27 & 0x3FFFFFFE0);
            do
            {
              uint64_t v67 = *v65++;
              *v64++ = v67;
              v66 -= 8;
            }
            while (v66);
            if (v27 == v31) {
              goto LABEL_43;
            }
            v55 += v31;
            int v57 = v27 & 0xFFFFFFF8;
          }
          else
          {
            v55 += v49;
            v56 += v49;
            int v57 = v27 & 0xFFFFFFE0;
          }
        }
        else
        {
          int v57 = 0;
        }
        unsigned int v58 = v57 + 1;
        do
        {
          char v59 = *v55++;
          *v56++ = v59;
          BOOL v44 = v26 > v58++;
        }
        while (v44);
LABEL_43:
        ++v48;
        v51 += 64;
        uint64_t v52 = (long long *)((char *)v52 + v25);
        unsigned int v53 = (uint64_t *)((char *)v53 + v25);
        if (v48 == v20) {
          return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::compressMacroblock((uint64_t)v68, 64, *(void *)(a1 + 40), *(unsigned char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), *(_DWORD *)(*(void *)(v6 + 208) + 52));
        }
      }
    }
    for (uint64_t k = 0; k != v20; ++k)
    {
      uint64_t v46 = 0;
      do
      {
        v23[v46] = *(unsigned char *)(v24 + v46);
        ++v46;
      }
      while (v26 > v46);
      v23 += 64;
      v24 += v25;
    }
  }
  return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::compressMacroblock((uint64_t)v68, 64, *(void *)(a1 + 40), *(unsigned char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), *(_DWORD *)(*(void *)(v6 + 208) + 52));
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE16ELj1ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint3EEELb0EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v53 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(a1 + 32);
  AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressMacroblock((uint64_t)v52, *(int64x2_t **)(a1 + 40), *(unsigned __int8 **)(a1 + 48), *(_DWORD *)(*(void *)(v2 + 208) + 52));
  uint64_t v3 = *(unsigned int *)(a1 + 80);
  if (!v3 || !*(_DWORD *)(a1 + 84)) {
    return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::compressMacroblock((uint64_t)v52, 64, *(void *)(a1 + 40), *(unsigned char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), *(_DWORD *)(*(void *)(v2 + 208) + 52));
  }
  unint64_t v4 = (unint64_t)*(unsigned int *)(a1 + 72) << 6;
  uint64_t v5 = 4 * *(unsigned int *)(a1 + 76);
  uint64_t v6 = &v52[v4 + v5];
  uint64_t v7 = *(void *)(a1 + 56);
  uint64_t v8 = *(void *)(a1 + 64);
  unint64_t v9 = 4 * *(unsigned int *)(a1 + 84);
  if (v9 <= 1) {
    unint64_t v10 = 1;
  }
  else {
    unint64_t v10 = 4 * *(unsigned int *)(a1 + 84);
  }
  if (v10 <= 7)
  {
    for (uint64_t i = 0; i != v3; ++i)
    {
      uint64_t v12 = 0;
      do
      {
        v6[v12] = *(unsigned char *)(v7 + v12);
        ++v12;
      }
      while (v9 > v12);
      v6 += 64;
      v7 += v8;
    }
    return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::compressMacroblock((uint64_t)v52, 64, *(void *)(a1 + 40), *(unsigned char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), *(_DWORD *)(*(void *)(v2 + 208) + 52));
  }
  if (v10) {
    BOOL v13 = (v10 - 1) >> 32 == 0;
  }
  else {
    BOOL v13 = 0;
  }
  if (v13)
  {
    int64x2_t v17 = &v52[v4 + v5];
    uint64_t v18 = v10 & 0x3FFFFFFF8;
    if (v10 < 0x20)
    {
      uint64_t v19 = 0;
      uint64_t v20 = &v52[v4 + v5];
      unint64_t v21 = *(uint64_t **)(a1 + 56);
      while (1)
      {
        uint64_t v22 = (char *)(v7 + v8 * v19);
        int v23 = &v6[64 * v19];
        if ((unint64_t)(&v17[64 * v19] - v22) > 0x1F)
        {
          v23 += v18;
          uint64_t v25 = v20;
          unint64_t v26 = v21;
          uint64_t v27 = v10 & 0x3FFFFFFF8;
          do
          {
            uint64_t v28 = *v26++;
            *v25++ = v28;
            v27 -= 8;
          }
          while (v27);
          if (v10 == v18) {
            goto LABEL_23;
          }
          v22 += v18;
          int v24 = v10 & 0xFFFFFFF8;
        }
        else
        {
          int v24 = 0;
        }
        unsigned int v29 = v24 + 1;
        do
        {
          char v30 = *v22++;
          *v23++ = v30;
          BOOL v31 = v9 > v29++;
        }
        while (v31);
LABEL_23:
        ++v19;
        unint64_t v21 = (uint64_t *)((char *)v21 + v8);
        v20 += 64;
        if (v19 == v3) {
          return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::compressMacroblock((uint64_t)v52, 64, *(void *)(a1 + 40), *(unsigned char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), *(_DWORD *)(*(void *)(v2 + 208) + 52));
        }
      }
    }
    uint64_t v32 = 0;
    uint64_t v33 = v10 & 0x3FFFFFFE0;
    uint64_t v34 = &v52[v4 + v5];
    uint64_t v35 = &v52[v4 + 16 + v5];
    uint64_t v36 = (long long *)(v7 + 16);
    int v37 = (uint64_t *)(v7 + (v10 & 0x3FFFFFFE0));
    for (uint64_t j = &v34[v10 & 0x3FFFFFFE0]; ; j += 8)
    {
      BOOL v39 = (char *)(v7 + v8 * v32);
      uint64_t v40 = &v6[64 * v32];
      if ((unint64_t)(&v17[64 * v32] - v39) >= 0x20)
      {
        BOOL v44 = v36;
        uint64_t v45 = v35;
        uint64_t v46 = v10 & 0x3FFFFFFE0;
        do
        {
          long long v47 = *v44;
          *(v45 - 1) = *(v44 - 1);
          *uint64_t v45 = v47;
          v45 += 2;
          v44 += 2;
          v46 -= 32;
        }
        while (v46);
        if (v10 == v33) {
          goto LABEL_34;
        }
        if ((v10 & 0x18) != 0)
        {
          v40 += v18;
          uint64_t v48 = j;
          uint64_t v49 = v37;
          unint64_t v50 = v18 - (v10 & 0x3FFFFFFE0);
          do
          {
            uint64_t v51 = *v49++;
            *v48++ = v51;
            v50 -= 8;
          }
          while (v50);
          if (v10 == v18) {
            goto LABEL_34;
          }
          v39 += v18;
          int v41 = v10 & 0xFFFFFFF8;
        }
        else
        {
          v39 += v33;
          v40 += v33;
          int v41 = v10 & 0xFFFFFFE0;
        }
      }
      else
      {
        int v41 = 0;
      }
      unsigned int v42 = v41 + 1;
      do
      {
        char v43 = *v39++;
        *v40++ = v43;
        BOOL v31 = v9 > v42++;
      }
      while (v31);
LABEL_34:
      ++v32;
      v35 += 64;
      uint64_t v36 = (long long *)((char *)v36 + v8);
      int v37 = (uint64_t *)((char *)v37 + v8);
      if (v32 == v3) {
        return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::compressMacroblock((uint64_t)v52, 64, *(void *)(a1 + 40), *(unsigned char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), *(_DWORD *)(*(void *)(v2 + 208) + 52));
      }
    }
  }
  for (uint64_t k = 0; k != v3; ++k)
  {
    uint64_t v15 = 0;
    do
    {
      v6[v15] = *(unsigned char *)(v7 + v15);
      ++v15;
    }
    while (v9 > v15);
    v6 += 64;
    v7 += v8;
  }
  return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::compressMacroblock((uint64_t)v52, 64, *(void *)(a1 + 40), *(unsigned char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), *(_DWORD *)(*(void *)(v2 + 208) + 52));
}

unint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE3ELj1ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint3EEELb0EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1, __n128 a2, int32x4_t a3, int32x4_t a4, int32x4_t a5, int32x4_t a6)
{
  uint64_t v7 = 0;
  uint64_t v64 = *MEMORY[0x263EF8340];
  uint64_t v9 = *(void *)(a1 + 32);
  uint64_t v8 = *(void *)(a1 + 40);
  unint64_t v10 = *(unsigned char **)(a1 + 48);
  int v11 = *(_DWORD *)(*(void *)(v9 + 208) + 52);
  do
  {
    BOOL v13 = (int32x4_t *)&v63[128
                          * (unint64_t)AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,1u>::kSubblockPositions[v7 + 1]
                          + 16
                          * AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,1u>::kSubblockPositions[v7]];
    unsigned int v14 = *v10;
    if (*v10)
    {
      if (v14 < 0xF0)
      {
        if (v14 == 63)
        {
          int32x4_t v15 = *(int32x4_t *)v8;
          a3 = *(int32x4_t *)(v8 + 16);
          a4 = *(int32x4_t *)(v8 + 32);
          a5 = *(int32x4_t *)(v8 + 48);
          a6 = vuzp1q_s32(*(int32x4_t *)v8, a4);
          *BOOL v13 = a6;
          v13[2] = vuzp2q_s32(v15, a4);
          v13[4] = vuzp1q_s32(a3, a5);
          a2 = (__n128)vuzp2q_s32(a3, a5);
          v13[6] = (int32x4_t)a2;
          uint64_t v12 = 64;
        }
        else if (v14 == 1)
        {
          a2 = (__n128)vld1q_dup_s16((const __int16 *)v8);
          *BOOL v13 = (int32x4_t)a2;
          v13[2] = (int32x4_t)a2;
          v13[4] = (int32x4_t)a2;
          v13[6] = (int32x4_t)a2;
          uint64_t v12 = 2;
        }
        else
        {
          uint64_t v12 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(v13, 32, v8, v14, a2.n128_f64[0], *(double *)a3.i64, *(double *)a4.i64, *(int8x8_t *)a5.i8);
        }
      }
      else
      {
        AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(v13, 32, v8, v14, v11);
        uint64_t v12 = 32;
      }
    }
    else
    {
      uint64_t v12 = 0;
      v13->i64[0] = 0;
      v13->i64[1] = 0;
      v13[2].i64[0] = 0;
      v13[2].i64[1] = 0;
      v13[4].i64[0] = 0;
      v13[4].i64[1] = 0;
      v13[6].i64[0] = 0;
      v13[6].i64[1] = 0;
    }
    v8 += v12;
    ++v10;
    v7 += 2;
  }
  while (v7 != 16);
  uint64_t v16 = *(unsigned int *)(a1 + 80);
  if (v16 && *(_DWORD *)(a1 + 84))
  {
    uint64_t v17 = 32 * *(unsigned int *)(a1 + 72);
    uint64_t v18 = 2 * *(unsigned int *)(a1 + 76);
    uint64_t v19 = &v63[v17 + v18];
    uint64_t v20 = *(int32x4_t **)(a1 + 56);
    uint64_t v21 = *(void *)(a1 + 64);
    unint64_t v22 = 2 * *(unsigned int *)(a1 + 84);
    if (v22 <= 1) {
      unint64_t v23 = 1;
    }
    else {
      unint64_t v23 = 2 * *(unsigned int *)(a1 + 84);
    }
    if (v23 <= 7)
    {
      for (uint64_t i = 0; i != v16; ++i)
      {
        uint64_t v25 = 0;
        do
        {
          v19[v25] = v20->i8[v25];
          ++v25;
        }
        while (v22 > v25);
        v19 += 32;
        uint64_t v20 = (int32x4_t *)((char *)v20 + v21);
      }
      return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::compressMacroblock((unint64_t)v63, 32, *(void *)(a1 + 40), *(unsigned char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), *(_DWORD *)(*(void *)(v9 + 208) + 52), a2.n128_f64[0], *(double *)a3.i64, *(double *)a4.i64, *(double *)a5.i64, *(int16x4_t *)a6.i8);
    }
    if (v23 && !((v23 - 1) >> 32))
    {
      unint64_t v26 = &v63[v17 + v18];
      uint64_t v27 = v23 & 0x1FFFFFFF8;
      if (v23 < 0x20)
      {
        uint64_t v28 = 0;
        unsigned int v29 = (unint64_t *)&v63[v17 + v18];
        char v30 = *(unint64_t **)(a1 + 56);
        while (1)
        {
          BOOL v31 = &v20->i8[v21 * v28];
          uint64_t v32 = &v19[32 * v28];
          if ((unint64_t)(&v26[32 * v28] - v31) > 0x1F)
          {
            v32 += v27;
            uint64_t v34 = v29;
            uint64_t v35 = v30;
            uint64_t v36 = v23 & 0x1FFFFFFF8;
            do
            {
              unint64_t v37 = *v35++;
              a2.n128_u64[0] = v37;
              *v34++ = v37;
              v36 -= 8;
            }
            while (v36);
            if (v23 == v27) {
              goto LABEL_27;
            }
            v31 += v27;
            int v33 = v23 & 0xFFFFFFF8;
          }
          else
          {
            int v33 = 0;
          }
          unsigned int v38 = v33 + 1;
          do
          {
            char v39 = *v31++;
            *v32++ = v39;
            BOOL v40 = v22 > v38++;
          }
          while (v40);
LABEL_27:
          ++v28;
          char v30 = (unint64_t *)((char *)v30 + v21);
          v29 += 4;
          if (v28 == v16) {
            return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::compressMacroblock((unint64_t)v63, 32, *(void *)(a1 + 40), *(unsigned char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), *(_DWORD *)(*(void *)(v9 + 208) + 52), a2.n128_f64[0], *(double *)a3.i64, *(double *)a4.i64, *(double *)a5.i64, *(int16x4_t *)a6.i8);
          }
        }
      }
      uint64_t v44 = 0;
      uint64_t v45 = v23 & 0x1FFFFFFE0;
      uint64_t v46 = &v63[v17 + v18];
      long long v47 = (__n128 *)&v63[v17 + 16 + v18];
      uint64_t v48 = v20 + 1;
      uint64_t v49 = (unint64_t *)((char *)v20->u64 + (v23 & 0x1FFFFFFE0));
      for (uint64_t j = (unint64_t *)&v46[v23 & 0x1FFFFFFE0]; ; j += 4)
      {
        uint64_t v51 = &v20->i8[v21 * v44];
        uint64_t v52 = &v19[32 * v44];
        if ((unint64_t)(&v26[32 * v44] - v51) >= 0x20)
        {
          char v56 = v48;
          int v57 = v47;
          uint64_t v58 = v23 & 0x1FFFFFFE0;
          do
          {
            a2 = (__n128)v56[-1];
            a3 = *v56;
            v57[-1] = a2;
            *int v57 = (__n128)a3;
            v57 += 2;
            v56 += 2;
            v58 -= 32;
          }
          while (v58);
          if (v23 == v45) {
            goto LABEL_43;
          }
          if ((v23 & 0x18) != 0)
          {
            v52 += v27;
            char v59 = j;
            long long v60 = v49;
            unint64_t v61 = v27 - (v23 & 0x1FFFFFFE0);
            do
            {
              unint64_t v62 = *v60++;
              a2.n128_u64[0] = v62;
              *v59++ = v62;
              v61 -= 8;
            }
            while (v61);
            if (v23 == v27) {
              goto LABEL_43;
            }
            v51 += v27;
            int v53 = v23 & 0xFFFFFFF8;
          }
          else
          {
            v51 += v45;
            v52 += v45;
            int v53 = v23 & 0xFFFFFFE0;
          }
        }
        else
        {
          int v53 = 0;
        }
        unsigned int v54 = v53 + 1;
        do
        {
          char v55 = *v51++;
          *v52++ = v55;
          BOOL v40 = v22 > v54++;
        }
        while (v40);
LABEL_43:
        ++v44;
        v47 += 2;
        uint64_t v48 = (int32x4_t *)((char *)v48 + v21);
        uint64_t v49 = (unint64_t *)((char *)v49 + v21);
        if (v44 == v16) {
          return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::compressMacroblock((unint64_t)v63, 32, *(void *)(a1 + 40), *(unsigned char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), *(_DWORD *)(*(void *)(v9 + 208) + 52), a2.n128_f64[0], *(double *)a3.i64, *(double *)a4.i64, *(double *)a5.i64, *(int16x4_t *)a6.i8);
        }
      }
    }
    for (uint64_t k = 0; k != v16; ++k)
    {
      uint64_t v42 = 0;
      do
      {
        v19[v42] = v20->i8[v42];
        ++v42;
      }
      while (v22 > v42);
      v19 += 32;
      uint64_t v20 = (int32x4_t *)((char *)v20 + v21);
    }
  }
  return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::compressMacroblock((unint64_t)v63, 32, *(void *)(a1 + 40), *(unsigned char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), *(_DWORD *)(*(void *)(v9 + 208) + 52), a2.n128_f64[0], *(double *)a3.i64, *(double *)a4.i64, *(double *)a5.i64, *(int16x4_t *)a6.i8);
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE15ELj1ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint3EEELb0EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v2 = 0;
  uint64_t v68 = *MEMORY[0x263EF8340];
  uint64_t v4 = *(void *)(a1 + 32);
  unint64_t v3 = *(void *)(a1 + 40);
  uint64_t v5 = *(unsigned char **)(a1 + 48);
  int v6 = *(_DWORD *)(*(void *)(v4 + 208) + 52);
  do
  {
    uint64_t v8 = (int64x2_t *)&v67[256
                         * (unint64_t)AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,1u>::kSubblockPositions[v2 + 1]
                         + 32
                         * AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,1u>::kSubblockPositions[v2]];
    unsigned int v9 = *v5;
    if (*v5)
    {
      if (v9 < 0xF0)
      {
        if (v9 == 127)
        {
          int64x2_t v11 = *(int64x2_t *)v3;
          int64x2_t v12 = *(int64x2_t *)(v3 + 16);
          int64x2_t v13 = *(int64x2_t *)(v3 + 32);
          int64x2_t v14 = *(int64x2_t *)(v3 + 48);
          int64x2_t v15 = *(int64x2_t *)(v3 + 64);
          int64x2_t v16 = *(int64x2_t *)(v3 + 80);
          int64x2_t v17 = *(int64x2_t *)(v3 + 96);
          int64x2_t v18 = *(int64x2_t *)(v3 + 112);
          *uint64_t v8 = vzip1q_s64(*(int64x2_t *)v3, v12);
          v8[1] = vzip1q_s64(v15, v16);
          v8[4] = vzip2q_s64(v11, v12);
          v8[5] = vzip2q_s64(v15, v16);
          v8[8] = vzip1q_s64(v13, v14);
          v8[9] = vzip1q_s64(v17, v18);
          v8[12] = vzip2q_s64(v13, v14);
          v8[13] = vzip2q_s64(v17, v18);
          uint64_t v7 = 128;
        }
        else if (v9 == 3)
        {
          float32x4_t v10 = vld1q_dup_f32((const float *)v3);
          *uint64_t v8 = (int64x2_t)v10;
          v8[1] = (int64x2_t)v10;
          v8[4] = (int64x2_t)v10;
          v8[5] = (int64x2_t)v10;
          v8[8] = (int64x2_t)v10;
          v8[9] = (int64x2_t)v10;
          v8[12] = (int64x2_t)v10;
          v8[13] = (int64x2_t)v10;
          uint64_t v7 = 4;
        }
        else
        {
          uint64_t v7 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(v8, 64, v3, v9);
        }
      }
      else
      {
        AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(v8, 64, v3, v9, v6);
        uint64_t v7 = 64;
      }
    }
    else
    {
      uint64_t v7 = 0;
      *uint64_t v8 = 0u;
      v8[1] = 0u;
      v8[4] = 0u;
      v8[5] = 0u;
      v8[8] = 0u;
      v8[9] = 0u;
      v8[12] = 0u;
      v8[13] = 0u;
    }
    v3 += v7;
    ++v5;
    v2 += 2;
  }
  while (v2 != 16);
  uint64_t v19 = *(unsigned int *)(a1 + 80);
  if (v19 && *(_DWORD *)(a1 + 84))
  {
    unint64_t v20 = (unint64_t)*(unsigned int *)(a1 + 72) << 6;
    uint64_t v21 = 4 * *(unsigned int *)(a1 + 76);
    unint64_t v22 = &v67[v20 + v21];
    uint64_t v23 = *(void *)(a1 + 56);
    uint64_t v24 = *(void *)(a1 + 64);
    unint64_t v25 = 4 * *(unsigned int *)(a1 + 84);
    if (v25 <= 1) {
      unint64_t v26 = 1;
    }
    else {
      unint64_t v26 = 4 * *(unsigned int *)(a1 + 84);
    }
    if (v26 <= 7)
    {
      for (uint64_t i = 0; i != v19; ++i)
      {
        uint64_t v28 = 0;
        do
        {
          v22[v28] = *(unsigned char *)(v23 + v28);
          ++v28;
        }
        while (v25 > v28);
        v22 += 64;
        v23 += v24;
      }
      return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::compressMacroblock((uint64_t)v67, 64, *(void *)(a1 + 40), *(unsigned char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), *(_DWORD *)(*(void *)(v4 + 208) + 52));
    }
    if (v26 && !((v26 - 1) >> 32))
    {
      unsigned int v29 = &v67[v20 + v21];
      uint64_t v30 = v26 & 0x3FFFFFFF8;
      if (v26 < 0x20)
      {
        uint64_t v31 = 0;
        uint64_t v32 = &v67[v20 + v21];
        int v33 = *(uint64_t **)(a1 + 56);
        while (1)
        {
          uint64_t v34 = (char *)(v23 + v24 * v31);
          uint64_t v35 = &v22[64 * v31];
          if ((unint64_t)(&v29[64 * v31] - v34) > 0x1F)
          {
            v35 += v30;
            unint64_t v37 = v32;
            unsigned int v38 = v33;
            uint64_t v39 = v26 & 0x3FFFFFFF8;
            do
            {
              uint64_t v40 = *v38++;
              *v37++ = v40;
              v39 -= 8;
            }
            while (v39);
            if (v26 == v30) {
              goto LABEL_27;
            }
            v34 += v30;
            int v36 = v26 & 0xFFFFFFF8;
          }
          else
          {
            int v36 = 0;
          }
          unsigned int v41 = v36 + 1;
          do
          {
            char v42 = *v34++;
            *v35++ = v42;
            BOOL v43 = v25 > v41++;
          }
          while (v43);
LABEL_27:
          ++v31;
          int v33 = (uint64_t *)((char *)v33 + v24);
          v32 += 64;
          if (v31 == v19) {
            return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::compressMacroblock((uint64_t)v67, 64, *(void *)(a1 + 40), *(unsigned char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), *(_DWORD *)(*(void *)(v4 + 208) + 52));
          }
        }
      }
      uint64_t v47 = 0;
      uint64_t v48 = v26 & 0x3FFFFFFE0;
      uint64_t v49 = &v67[v20 + v21];
      unint64_t v50 = &v67[v20 + 16 + v21];
      uint64_t v51 = (long long *)(v23 + 16);
      uint64_t v52 = (uint64_t *)(v23 + (v26 & 0x3FFFFFFE0));
      for (uint64_t j = &v49[v26 & 0x3FFFFFFE0]; ; j += 8)
      {
        unsigned int v54 = (char *)(v23 + v24 * v47);
        char v55 = &v22[64 * v47];
        if ((unint64_t)(&v29[64 * v47] - v54) >= 0x20)
        {
          char v59 = v51;
          long long v60 = v50;
          uint64_t v61 = v26 & 0x3FFFFFFE0;
          do
          {
            long long v62 = *v59;
            *(v60 - 1) = *(v59 - 1);
            *long long v60 = v62;
            v60 += 2;
            v59 += 2;
            v61 -= 32;
          }
          while (v61);
          if (v26 == v48) {
            goto LABEL_43;
          }
          if ((v26 & 0x18) != 0)
          {
            v55 += v30;
            long long v63 = j;
            uint64_t v64 = v52;
            unint64_t v65 = v30 - (v26 & 0x3FFFFFFE0);
            do
            {
              uint64_t v66 = *v64++;
              *v63++ = v66;
              v65 -= 8;
            }
            while (v65);
            if (v26 == v30) {
              goto LABEL_43;
            }
            v54 += v30;
            int v56 = v26 & 0xFFFFFFF8;
          }
          else
          {
            v54 += v48;
            v55 += v48;
            int v56 = v26 & 0xFFFFFFE0;
          }
        }
        else
        {
          int v56 = 0;
        }
        unsigned int v57 = v56 + 1;
        do
        {
          char v58 = *v54++;
          *v55++ = v58;
          BOOL v43 = v25 > v57++;
        }
        while (v43);
LABEL_43:
        ++v47;
        v50 += 64;
        uint64_t v51 = (long long *)((char *)v51 + v24);
        uint64_t v52 = (uint64_t *)((char *)v52 + v24);
        if (v47 == v19) {
          return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::compressMacroblock((uint64_t)v67, 64, *(void *)(a1 + 40), *(unsigned char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), *(_DWORD *)(*(void *)(v4 + 208) + 52));
        }
      }
    }
    for (uint64_t k = 0; k != v19; ++k)
    {
      uint64_t v45 = 0;
      do
      {
        v22[v45] = *(unsigned char *)(v23 + v45);
        ++v45;
      }
      while (v25 > v45);
      v22 += 64;
      v23 += v24;
    }
  }
  return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::compressMacroblock((uint64_t)v67, 64, *(void *)(a1 + 40), *(unsigned char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), *(_DWORD *)(*(void *)(v4 + 208) + 52));
}

unint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE13ELj1ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint3EEELb0EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v53 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(a1 + 32);
  AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressMacroblock(v52, *(void *)(a1 + 40), *(unsigned __int8 **)(a1 + 48), *(_DWORD *)(*(void *)(v2 + 208) + 52));
  uint64_t v3 = *(unsigned int *)(a1 + 80);
  if (!v3 || !*(_DWORD *)(a1 + 84)) {
    return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::compressMacroblock((unint64_t)v52, 64, *(void *)(a1 + 40), *(unsigned char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), *(_DWORD *)(*(void *)(v2 + 208) + 52));
  }
  unint64_t v4 = (unint64_t)*(unsigned int *)(a1 + 72) << 6;
  uint64_t v5 = 4 * *(unsigned int *)(a1 + 76);
  int v6 = (char *)v52 + v4 + v5;
  uint64_t v7 = *(void *)(a1 + 56);
  uint64_t v8 = *(void *)(a1 + 64);
  unint64_t v9 = 4 * *(unsigned int *)(a1 + 84);
  if (v9 <= 1) {
    unint64_t v10 = 1;
  }
  else {
    unint64_t v10 = 4 * *(unsigned int *)(a1 + 84);
  }
  if (v10 <= 7)
  {
    for (uint64_t i = 0; i != v3; ++i)
    {
      uint64_t v12 = 0;
      do
      {
        v6[v12] = *(unsigned char *)(v7 + v12);
        ++v12;
      }
      while (v9 > v12);
      v6 += 64;
      v7 += v8;
    }
    return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::compressMacroblock((unint64_t)v52, 64, *(void *)(a1 + 40), *(unsigned char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), *(_DWORD *)(*(void *)(v2 + 208) + 52));
  }
  if (v10) {
    BOOL v13 = (v10 - 1) >> 32 == 0;
  }
  else {
    BOOL v13 = 0;
  }
  if (v13)
  {
    int64x2_t v17 = (char *)v52 + v4 + v5;
    uint64_t v18 = v10 & 0x3FFFFFFF8;
    if (v10 < 0x20)
    {
      uint64_t v19 = 0;
      unint64_t v20 = (char *)v52 + v4 + v5;
      uint64_t v21 = *(uint64_t **)(a1 + 56);
      while (1)
      {
        unint64_t v22 = (char *)(v7 + v8 * v19);
        uint64_t v23 = &v6[64 * v19];
        if ((unint64_t)(&v17[64 * v19] - v22) > 0x1F)
        {
          v23 += v18;
          unint64_t v25 = v20;
          unint64_t v26 = v21;
          uint64_t v27 = v10 & 0x3FFFFFFF8;
          do
          {
            uint64_t v28 = *v26++;
            *v25++ = v28;
            v27 -= 8;
          }
          while (v27);
          if (v10 == v18) {
            goto LABEL_23;
          }
          v22 += v18;
          int v24 = v10 & 0xFFFFFFF8;
        }
        else
        {
          int v24 = 0;
        }
        unsigned int v29 = v24 + 1;
        do
        {
          char v30 = *v22++;
          *v23++ = v30;
          BOOL v31 = v9 > v29++;
        }
        while (v31);
LABEL_23:
        ++v19;
        uint64_t v21 = (uint64_t *)((char *)v21 + v8);
        v20 += 64;
        if (v19 == v3) {
          return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::compressMacroblock((unint64_t)v52, 64, *(void *)(a1 + 40), *(unsigned char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), *(_DWORD *)(*(void *)(v2 + 208) + 52));
        }
      }
    }
    uint64_t v32 = 0;
    uint64_t v33 = v10 & 0x3FFFFFFE0;
    uint64_t v34 = (char *)v52 + v4 + v5;
    uint64_t v35 = (char *)&v52[1] + v4 + v5;
    int v36 = (long long *)(v7 + 16);
    unint64_t v37 = (uint64_t *)(v7 + (v10 & 0x3FFFFFFE0));
    for (uint64_t j = &v34[v10 & 0x3FFFFFFE0]; ; j += 64)
    {
      uint64_t v39 = (char *)(v7 + v8 * v32);
      uint64_t v40 = &v6[64 * v32];
      if ((unint64_t)(&v17[64 * v32] - v39) >= 0x20)
      {
        uint64_t v44 = v36;
        uint64_t v45 = v35;
        uint64_t v46 = v10 & 0x3FFFFFFE0;
        do
        {
          long long v47 = *v44;
          *(v45 - 1) = *(v44 - 1);
          *uint64_t v45 = v47;
          v45 += 2;
          v44 += 2;
          v46 -= 32;
        }
        while (v46);
        if (v10 == v33) {
          goto LABEL_34;
        }
        if ((v10 & 0x18) != 0)
        {
          v40 += v18;
          uint64_t v48 = j;
          uint64_t v49 = v37;
          unint64_t v50 = v18 - (v10 & 0x3FFFFFFE0);
          do
          {
            uint64_t v51 = *v49++;
            *(void *)uint64_t v48 = v51;
            v48 += 8;
            v50 -= 8;
          }
          while (v50);
          if (v10 == v18) {
            goto LABEL_34;
          }
          v39 += v18;
          int v41 = v10 & 0xFFFFFFF8;
        }
        else
        {
          v39 += v33;
          v40 += v33;
          int v41 = v10 & 0xFFFFFFE0;
        }
      }
      else
      {
        int v41 = 0;
      }
      unsigned int v42 = v41 + 1;
      do
      {
        char v43 = *v39++;
        *v40++ = v43;
        BOOL v31 = v9 > v42++;
      }
      while (v31);
LABEL_34:
      ++v32;
      v35 += 64;
      int v36 = (long long *)((char *)v36 + v8);
      unint64_t v37 = (uint64_t *)((char *)v37 + v8);
      if (v32 == v3) {
        return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::compressMacroblock((unint64_t)v52, 64, *(void *)(a1 + 40), *(unsigned char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), *(_DWORD *)(*(void *)(v2 + 208) + 52));
      }
    }
  }
  for (uint64_t k = 0; k != v3; ++k)
  {
    uint64_t v15 = 0;
    do
    {
      v6[v15] = *(unsigned char *)(v7 + v15);
      ++v15;
    }
    while (v9 > v15);
    v6 += 64;
    v7 += v8;
  }
  return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::compressMacroblock((unint64_t)v52, 64, *(void *)(a1 + 40), *(unsigned char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), *(_DWORD *)(*(void *)(v2 + 208) + 52));
}

unint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE0ELj1ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint3EEELb0EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1, __n128 a2, __n128 a3, int16x4_t a4, double a5, double a6, double a7, int8x8_t a8)
{
  uint64_t v9 = 0;
  uint64_t v65 = *MEMORY[0x263EF8340];
  uint64_t v11 = *(void *)(a1 + 32);
  uint64_t v10 = *(void *)(a1 + 40);
  uint64_t v12 = *(unsigned char **)(a1 + 48);
  int v13 = *(_DWORD *)(*(void *)(v11 + 208) + 52);
  do
  {
    uint64_t v15 = (int16x4_t *)&v64[64
                          * (unint64_t)AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,1u>::kSubblockPositions[v9 + 1]
                          + 8
                          * AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,1u>::kSubblockPositions[v9]];
    unsigned int v16 = *v12;
    if (*v12)
    {
      if (v16 < 0xF0)
      {
        if (v16 == 31)
        {
          int16x4_t v17 = *(int16x4_t *)v10;
          a3.n128_u64[0] = *(void *)(v10 + 8);
          a4 = *(int16x4_t *)(v10 + 16);
          a5 = *(double *)(v10 + 24);
          a6 = COERCE_DOUBLE(vuzp1_s16(*(int16x4_t *)v10, a4));
          *(double *)uint64_t v15 = a6;
          v15[2] = vuzp2_s16(v17, a4);
          v15[4] = vuzp1_s16((int16x4_t)a3.n128_u64[0], *(int16x4_t *)&a5);
          a2.n128_u64[0] = (unint64_t)vuzp2_s16((int16x4_t)a3.n128_u64[0], *(int16x4_t *)&a5);
          v15[6] = (int16x4_t)a2.n128_u64[0];
          uint64_t v14 = 32;
        }
        else if (v16 == 96)
        {
          a2.n128_u64[0] = (unint64_t)vdup_lane_s8(*(int8x8_t *)v10, 0);
          *uint64_t v15 = (int16x4_t)a2.n128_u64[0];
          v15[2] = (int16x4_t)a2.n128_u64[0];
          v15[4] = (int16x4_t)a2.n128_u64[0];
          v15[6] = (int16x4_t)a2.n128_u64[0];
          uint64_t v14 = 1;
        }
        else
        {
          uint64_t v14 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(v15, 16, v10, v16);
        }
      }
      else
      {
        AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(v15, 16, v10, v16, v13);
        uint64_t v14 = 16;
      }
    }
    else
    {
      uint64_t v14 = 0;
      *uint64_t v15 = 0;
      v15[2] = 0;
      v15[4] = 0;
      v15[6] = 0;
    }
    v10 += v14;
    ++v12;
    v9 += 2;
  }
  while (v9 != 16);
  uint64_t v18 = *(unsigned int *)(a1 + 80);
  if (!v18) {
    return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::compressMacroblock((unint64_t)v64, 16, *(void *)(a1 + 40), *(unsigned char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), *(_DWORD *)(*(void *)(v11 + 208) + 52), a2.n128_f64[0], a3.n128_f64[0], (int8x8_t)a4, a5, a6, a7, a8);
  }
  uint64_t v19 = *(unsigned int *)(a1 + 84);
  if (!v19) {
    return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::compressMacroblock((unint64_t)v64, 16, *(void *)(a1 + 40), *(unsigned char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), *(_DWORD *)(*(void *)(v11 + 208) + 52), a2.n128_f64[0], a3.n128_f64[0], (int8x8_t)a4, a5, a6, a7, a8);
  }
  uint64_t v20 = *(unsigned int *)(a1 + 76);
  uint64_t v21 = 16 * *(unsigned int *)(a1 + 72);
  uint64_t v23 = *(__n128 **)(a1 + 56);
  uint64_t v22 = *(void *)(a1 + 64);
  if (v19 > 7)
  {
    unint64_t v26 = &v64[v20 + v21];
    uint64_t v27 = v19 & 0xFFFFFFF8;
    if (v19 <= 0x1F)
    {
      uint64_t v28 = 0;
      while (1)
      {
        unsigned int v29 = (unint64_t *)((char *)v23->n128_u64 + v22 * v28);
        char v30 = (unint64_t *)&v26[16 * v28];
        if ((unint64_t)((char *)v30 - (char *)v29) > 0x1F)
        {
          a2.n128_u64[0] = *v29;
          *char v30 = *v29;
          if (v27 != 8)
          {
            a2.n128_u64[0] = v29[1];
            v30[1] = a2.n128_u64[0];
            if (v27 != 16)
            {
              a2.n128_u64[0] = v29[2];
              v30[2] = a2.n128_u64[0];
            }
          }
          if (v27 == v19) {
            goto LABEL_26;
          }
          char v30 = (unint64_t *)((char *)v30 + v27);
          unsigned int v29 = (unint64_t *)((char *)v29 + v27);
          int v31 = v19 & 0xFFFFFFF8;
        }
        else
        {
          int v31 = 0;
        }
        int v32 = v19 - v31;
        do
        {
          char v33 = *(unsigned char *)v29;
          unsigned int v29 = (unint64_t *)((char *)v29 + 1);
          *(unsigned char *)char v30 = v33;
          char v30 = (unint64_t *)((char *)v30 + 1);
          --v32;
        }
        while (v32);
LABEL_26:
        if (++v28 == v18) {
          return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::compressMacroblock((unint64_t)v64, 16, *(void *)(a1 + 40), *(unsigned char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), *(_DWORD *)(*(void *)(v11 + 208) + 52), a2.n128_f64[0], a3.n128_f64[0], (int8x8_t)a4, a5, a6, a7, a8);
        }
      }
    }
    uint64_t v34 = v19 & 0xFFFFFFE0;
    if (v34 == v19)
    {
      uint64_t v35 = 0;
      int v36 = (__n128 *)&v64[v21 + 16 + v20];
      unint64_t v37 = v23 + 1;
      do
      {
        unsigned int v38 = (char *)v23 + v22 * v35;
        uint64_t v39 = v37;
        uint64_t v40 = v36;
        uint64_t v41 = v19;
        if ((unint64_t)(&v26[16 * v35] - v38) >= 0x20)
        {
          do
          {
            a2 = v39[-1];
            a3 = *v39;
            v40[-1] = a2;
            *uint64_t v40 = a3;
            v40 += 2;
            v39 += 2;
            v41 -= 32;
          }
          while (v41);
        }
        else
        {
          unsigned int v42 = &v26[16 * v35];
          int v43 = v19;
          do
          {
            char v44 = *v38++;
            *v42++ = v44;
            --v43;
          }
          while (v43);
        }
        ++v35;
        ++v36;
        unint64_t v37 = (__n128 *)((char *)v37 + v22);
      }
      while (v35 != v18);
      return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::compressMacroblock((unint64_t)v64, 16, *(void *)(a1 + 40), *(unsigned char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), *(_DWORD *)(*(void *)(v11 + 208) + 52), a2.n128_f64[0], a3.n128_f64[0], (int8x8_t)a4, a5, a6, a7, a8);
    }
    uint64_t v45 = 0;
    uint64_t v46 = &v64[v21 + v20];
    long long v47 = (__n128 *)&v64[v21 + 16 + v20];
    uint64_t v48 = v23 + 1;
    uint64_t v49 = (unint64_t *)((char *)v23->n128_u64 + v34);
    for (uint64_t i = (unint64_t *)&v46[v34]; ; i += 2)
    {
      uint64_t v51 = (char *)v23 + v22 * v45;
      uint64_t v52 = &v26[16 * v45];
      if ((unint64_t)(v52 - v51) >= 0x20)
      {
        unsigned int v54 = v48;
        char v55 = v47;
        uint64_t v56 = v19 & 0xFFFFFFE0;
        do
        {
          a2 = v54[-1];
          a3 = *v54;
          v55[-1] = a2;
          *char v55 = a3;
          v55 += 2;
          v54 += 2;
          v56 -= 32;
        }
        while (v56);
        if ((v19 & 0x18) != 0)
        {
          v52 += v27;
          unsigned int v57 = i;
          char v58 = v49;
          uint64_t v59 = v27 - v34;
          do
          {
            unint64_t v60 = *v58++;
            a2.n128_u64[0] = v60;
            *v57++ = v60;
            v59 -= 8;
          }
          while (v59);
          if (v27 == v19) {
            goto LABEL_47;
          }
          v51 += v27;
          int v53 = v19 & 0xFFFFFFF8;
        }
        else
        {
          v51 += v34;
          v52 += v34;
          int v53 = v19 & 0xFFFFFFE0;
        }
      }
      else
      {
        int v53 = 0;
      }
      int v61 = v19 - v53;
      do
      {
        char v62 = *v51++;
        *v52++ = v62;
        --v61;
      }
      while (v61);
LABEL_47:
      ++v45;
      ++v47;
      uint64_t v48 = (__n128 *)((char *)v48 + v22);
      uint64_t v49 = (unint64_t *)((char *)v49 + v22);
      if (v45 == v18) {
        return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::compressMacroblock((unint64_t)v64, 16, *(void *)(a1 + 40), *(unsigned char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), *(_DWORD *)(*(void *)(v11 + 208) + 52), a2.n128_f64[0], a3.n128_f64[0], (int8x8_t)a4, a5, a6, a7, a8);
      }
    }
  }
  int v24 = &v64[v21 + 3 + v20];
  unint64_t v25 = &v23->n128_u8[3];
  do
  {
    *(v24 - 3) = *(v25 - 3);
    if (v19 != 1)
    {
      *(v24 - 2) = *(v25 - 2);
      if (v19 != 2)
      {
        *(v24 - 1) = *(v25 - 1);
        if (v19 != 3)
        {
          *int v24 = *v25;
          if (v19 != 4)
          {
            v24[1] = v25[1];
            if (v19 != 5)
            {
              v24[2] = v25[2];
              if (v19 != 6) {
                v24[3] = v25[3];
              }
            }
          }
        }
      }
    }
    v24 += 16;
    v25 += v22;
    --v18;
  }
  while (v18);
  return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::compressMacroblock((unint64_t)v64, 16, *(void *)(a1 + 40), *(unsigned char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), *(_DWORD *)(*(void *)(v11 + 208) + 52), a2.n128_f64[0], a3.n128_f64[0], (int8x8_t)a4, a5, a6, a7, a8);
}

unint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE19ELj1ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint1EEELb0EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v51 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(a1 + 32);
  AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)1>::decompressMacroblock(v50, *(void *)(a1 + 40), *(unsigned __int8 **)(a1 + 48), *(_DWORD *)(*(void *)(v2 + 208) + 52));
  uint64_t v3 = *(unsigned int *)(a1 + 80);
  if (!v3 || !*(_DWORD *)(a1 + 84)) {
    return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)1>::compressMacroblock((unint64_t)v50, 128, *(void *)(a1 + 40), *(unsigned char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), *(_DWORD *)(*(void *)(v2 + 208) + 52));
  }
  unint64_t v4 = (unint64_t)*(unsigned int *)(a1 + 72) << 7;
  uint64_t v5 = 8 * *(unsigned int *)(a1 + 76);
  int v6 = (char *)v50 + v4 + v5;
  uint64_t v7 = *(void *)(a1 + 56);
  uint64_t v8 = *(void *)(a1 + 64);
  unint64_t v9 = 8 * *(unsigned int *)(a1 + 84);
  if (v9 <= 1) {
    unint64_t v10 = 1;
  }
  else {
    unint64_t v10 = 8 * *(unsigned int *)(a1 + 84);
  }
  if (v10) {
    BOOL v11 = (v10 - 1) >> 32 == 0;
  }
  else {
    BOOL v11 = 0;
  }
  if (v11)
  {
    uint64_t v15 = (char *)v50 + v4 + v5;
    uint64_t v16 = v10 & 0x7FFFFFFF8;
    if (v10 < 0x20)
    {
      uint64_t v17 = 0;
      uint64_t v18 = (char *)v50 + v4 + v5;
      uint64_t v19 = *(uint64_t **)(a1 + 56);
      while (1)
      {
        uint64_t v20 = (char *)(v7 + v8 * v17);
        uint64_t v21 = &v6[128 * v17];
        if ((unint64_t)(&v15[128 * v17] - v20) > 0x1F)
        {
          v21 += v16;
          uint64_t v23 = v18;
          int v24 = v19;
          uint64_t v25 = v10 & 0x7FFFFFFF8;
          do
          {
            uint64_t v26 = *v24++;
            *v23++ = v26;
            v25 -= 8;
          }
          while (v25);
          if (v10 == v16) {
            goto LABEL_17;
          }
          v20 += v16;
          int v22 = v10 & 0xFFFFFFF8;
        }
        else
        {
          int v22 = 0;
        }
        unsigned int v27 = v22 + 1;
        do
        {
          char v28 = *v20++;
          *v21++ = v28;
          BOOL v29 = v9 > v27++;
        }
        while (v29);
LABEL_17:
        ++v17;
        uint64_t v19 = (uint64_t *)((char *)v19 + v8);
        v18 += 128;
        if (v17 == v3) {
          return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)1>::compressMacroblock((unint64_t)v50, 128, *(void *)(a1 + 40), *(unsigned char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), *(_DWORD *)(*(void *)(v2 + 208) + 52));
        }
      }
    }
    uint64_t v30 = 0;
    uint64_t v31 = v10 & 0x7FFFFFFE0;
    int v32 = (char *)v50 + v4 + v5;
    char v33 = (char *)&v50[1] + v4 + v5;
    uint64_t v34 = (long long *)(v7 + 16);
    uint64_t v35 = (uint64_t *)(v7 + (v10 & 0x7FFFFFFE0));
    for (uint64_t i = &v32[v10 & 0x7FFFFFFE0]; ; i += 128)
    {
      unint64_t v37 = (char *)(v7 + v8 * v30);
      unsigned int v38 = &v6[128 * v30];
      if ((unint64_t)(&v15[128 * v30] - v37) >= 0x20)
      {
        unsigned int v42 = v34;
        int v43 = v33;
        uint64_t v44 = v10 & 0x7FFFFFFE0;
        do
        {
          long long v45 = *v42;
          *(v43 - 1) = *(v42 - 1);
          *int v43 = v45;
          v43 += 2;
          v42 += 2;
          v44 -= 32;
        }
        while (v44);
        if (v10 == v31) {
          goto LABEL_28;
        }
        if ((v10 & 0x18) != 0)
        {
          v38 += v16;
          uint64_t v46 = i;
          long long v47 = v35;
          unint64_t v48 = v16 - (v10 & 0x7FFFFFFE0);
          do
          {
            uint64_t v49 = *v47++;
            *(void *)uint64_t v46 = v49;
            v46 += 8;
            v48 -= 8;
          }
          while (v48);
          if (v10 == v16) {
            goto LABEL_28;
          }
          v37 += v16;
          int v39 = v10 & 0xFFFFFFF8;
        }
        else
        {
          v37 += v31;
          v38 += v31;
          int v39 = v10 & 0xFFFFFFE0;
        }
      }
      else
      {
        int v39 = 0;
      }
      unsigned int v40 = v39 + 1;
      do
      {
        char v41 = *v37++;
        *v38++ = v41;
        BOOL v29 = v9 > v40++;
      }
      while (v29);
LABEL_28:
      ++v30;
      v33 += 128;
      uint64_t v34 = (long long *)((char *)v34 + v8);
      uint64_t v35 = (uint64_t *)((char *)v35 + v8);
      if (v30 == v3) {
        return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)1>::compressMacroblock((unint64_t)v50, 128, *(void *)(a1 + 40), *(unsigned char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), *(_DWORD *)(*(void *)(v2 + 208) + 52));
      }
    }
  }
  for (uint64_t j = 0; j != v3; ++j)
  {
    uint64_t v13 = 0;
    do
    {
      v6[v13] = *(unsigned char *)(v7 + v13);
      ++v13;
    }
    while (v9 > v13);
    v6 += 128;
    v7 += v8;
  }
  return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)1>::compressMacroblock((unint64_t)v50, 128, *(void *)(a1 + 40), *(unsigned char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), *(_DWORD *)(*(void *)(v2 + 208) + 52));
}

uint64_t AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)2,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)3>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, char a12)
{
  uint64_t v154 = *MEMORY[0x263EF8340];
  size_t v17 = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  uint64_t v25 = a1;
  uint64_t v138 = a1;
  size_t v124 = v17;
  unsigned int v135 = a8;
  uint64_t v26 = a8 >> 5;
  unsigned int v123 = a8 + a10 - 1;
  unsigned int v27 = v123 >> 5;
  uint64_t result = *(void *)(v25 + 168);
  if (result)
  {
    uint64_t result = IOSurfaceGetCacheMode();
    int v29 = result & 0xF00;
  }
  else
  {
    int v29 = 0;
  }
  BOOL v30 = (v29 & 0xD00) == 0 || v29 == 768;
  int v31 = v29 & 0xE00;
  int v33 = !v30 && v31 != 1024;
  int v141 = v33;
  if (v26 <= v27)
  {
    unsigned int v130 = a7 + a9 - 1;
    if (a7 >> 5 <= v130 >> 5)
    {
      uint64_t v137 = (a5 - 1) >> 5;
      uint64_t v122 = (a6 - 1) >> 5;
      uint64_t v34 = v138;
      int v136 = ((a5 - 1) & 0x1F) + 1;
      int v121 = ((a6 - 1) & 0x1F) + 1;
      unint64_t v128 = a7;
      uint64_t v119 = v27 + 1;
      unint64_t v120 = (unint64_t)a7 >> 5;
      unsigned int v129 = a7;
      do
      {
        unsigned int v35 = (32 * v26) | 0x1F;
        if (32 * (int)v26 <= v135) {
          unsigned int v36 = v135;
        }
        else {
          unsigned int v36 = 32 * v26;
        }
        if (v123 < v35) {
          unsigned int v35 = v123;
        }
        unsigned int v127 = v36 - 32 * v26;
        int v134 = v35 - v36 + 1;
        if (v26 == v122) {
          unsigned int v37 = v121;
        }
        else {
          unsigned int v37 = 32;
        }
        uint64_t v133 = a3 + (v36 - v135) * a11;
        unint64_t v38 = v120;
        do
        {
          unint64_t v39 = 32 * v38;
          unint64_t v140 = v38 + 1;
          unsigned int v40 = 32 * (v38 + 1) - 1;
          if (32 * (int)v38 <= a7) {
            unsigned int v41 = a7;
          }
          else {
            unsigned int v41 = 32 * v38;
          }
          if (v130 < v40) {
            unsigned int v40 = v130;
          }
          int v42 = v40 - v41 + 1;
          if (v38 == v137) {
            unsigned int v43 = v136;
          }
          else {
            unsigned int v43 = 32;
          }
          BOOL v44 = 1;
          if (32 * (int)v26 >= v135 && v39 >= v128)
          {
            int v45 = v136;
            if (v38 != v137) {
              int v45 = 32;
            }
            BOOL v44 = v42 != v45 || v134 != v37;
          }
          unsigned int v47 = *(_DWORD *)(v34 + 128) >> (*(unsigned char *)(v34 + 144) + a12);
          if (v47 <= 1) {
            unsigned int v47 = 1;
          }
          unsigned int v48 = v47 + 31;
          if (v48 < 0x40) {
            unsigned int v49 = 0;
          }
          else {
            unsigned int v49 = 32 - __clz(~(-1 << -(char)__clz((v48 >> 5) - 1)));
          }
          unsigned int v50 = *(_DWORD *)(v34 + 132) >> (*(unsigned char *)(v34 + 144) + a12);
          if (v50 <= 1) {
            unsigned int v50 = 1;
          }
          unsigned int v51 = v50 + 31;
          if (v51 < 0x40)
          {
            unsigned int v52 = 0;
            if (!v49)
            {
LABEL_65:
              uint64_t v54 = 0;
              goto LABEL_66;
            }
          }
          else
          {
            unsigned int v52 = 32 - __clz(~(-1 << -(char)__clz((v51 >> 5) - 1)));
            if (!(v52 | v49)) {
              goto LABEL_65;
            }
          }
          int v53 = 0;
          uint64_t v54 = 0;
          BOOL v55 = v49 != 0;
          BOOL v56 = v52 != 0;
          int v57 = 1;
          do
          {
            --v49;
            if (v55) {
              v54 |= (unint64_t)(v57 & v38) << v53++;
            }
            else {
              unsigned int v49 = 0;
            }
            --v52;
            if (v56) {
              v54 |= (unint64_t)(v57 & v26) << v53++;
            }
            else {
              unsigned int v52 = 0;
            }
            v57 *= 2;
            --v53;
            BOOL v56 = v52 != 0;
            BOOL v55 = v49 != 0;
          }
          while (v52 | v49);
LABEL_66:
          size_t v58 = v26 * v124 + (v38 << 10);
          int v59 = v43 < 0x20 || v44;
          unint64_t v60 = (char *)(a4 + 32 * v54);
          uint64_t v61 = v133 + v41 - a7;
          char v62 = (int8x8_t *)(a2 + v58);
          if (v37 < 0x20) {
            int v63 = 1;
          }
          else {
            int v63 = v59;
          }
          int v139 = v62;
          if (v141)
          {
            if (!v63)
            {
              uint64_t v66 = (int8x8_t *)__dst;
LABEL_79:
              uint64_t v70 = 0;
              uint64_t v71 = v66;
              unint64_t v72 = v66;
              do
              {
                uint64_t v73 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)2,1u>::kSubblockPositions[v70 + 1];
                uint64_t v74 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)2,1u>::kSubblockPositions[v70];
                unsigned int v75 = (v43 - 8 * v74) & ~((int)(v43 - 8 * v74) >> 31);
                if (v75 >= 8) {
                  unsigned int v75 = 8;
                }
                unsigned int v76 = (v37 - 4 * v73) & ~((int)(v37 - 4 * v73) >> 31);
                if (v76 >= 4) {
                  unsigned int v76 = 4;
                }
                if (v75) {
                  BOOL v77 = v76 == 0;
                }
                else {
                  BOOL v77 = 1;
                }
                if (v77) {
                  *unint64_t v60 = 0;
                }
                else {
                  unint64_t v72 = (int8x8_t *)((char *)v72
                }
                                   + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::compressSubblock(v72, v60, (int16x4_t *)(v61 + 4 * a11 * v73 + 8 * v74), a11, v75, v76, *(double *)&v18, *(double *)&v19, v20, v21, v22, v23, v24));
                ++v60;
                v70 += 2;
              }
              while (v70 != 64);
              a7 = v129;
              unint64_t v69 = v140;
              uint64_t v68 = v71;
              goto LABEL_128;
            }
            int v64 = v42;
            unsigned int v65 = v41;
            memcpy(__dst, v62, 0x400uLL);
            unsigned int v41 = v65;
            int v42 = v64;
            uint64_t v66 = (int8x8_t *)__dst;
          }
          else
          {
            uint64_t v66 = v62;
            if (!v63) {
              goto LABEL_79;
            }
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE0ELj1ELh0ELNS7_13SubblockOrderE2EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder3EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = v138;
          uint64_t v143 = v66;
          unsigned __int8 v151 = v43;
          unsigned __int8 v152 = v37;
          unsigned int v147 = v127;
          unsigned int v148 = v41 - v39;
          unsigned int v144 = v60;
          uint64_t v145 = v61;
          uint64_t v146 = a11;
          unsigned int v149 = v134;
          unsigned int v150 = v42;
          if (v44)
          {
            uint64_t v67 = v66;
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(v138 + 8) + 7384), block);
            uint64_t v68 = v67;
            a7 = v129;
            unint64_t v69 = v140;
            goto LABEL_128;
          }
          uint64_t v78 = 0;
          __src = v66;
          char v79 = v66;
          do
          {
            unsigned int v80 = *v60++;
            char v79 = (int8x8_t *)((char *)v79
                             + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)2,(AGXTextureFootprint)0>::decompressSubblock((int8x8_t *)&__dst[128* (unint64_t)AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)2,1u>::kSubblockPositions[v78 + 1]+ 1024+ 8* AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)2,1u>::kSubblockPositions[v78]], 32, v79, v80));
            v78 += 2;
          }
          while (v78 != 64);
          uint64_t v81 = v149;
          if (v149)
          {
            uint64_t v82 = v150;
            if (v150)
            {
              uint64_t v83 = 0;
              uint64_t v84 = 32 * v147;
              uint64_t v85 = &__dst[v148 + 1024 + v84];
              uint64_t v86 = v84 + v148;
              uint64_t v87 = &__dst[v86 + 1024];
              uint64_t v88 = v145;
              uint64_t v89 = v146;
              uint64_t v90 = v150 & 0xFFFFFFE0;
              uint64_t v91 = v150 & 0xFFFFFFF8;
              uint64_t v92 = &__dst[v86 + 1040];
              uint64_t v93 = (long long *)(v145 + 16);
              uint64_t v94 = v85;
              uint64_t v95 = v145;
              do
              {
                uint64_t v96 = (char *)(v88 + v83 * v89);
                unint64_t v97 = &v85[32 * v83];
                if (v82 < 8 || (unint64_t)&v87[32 * v83 - v88 - v83 * v89] < 0x20)
                {
                  int v98 = 0;
                  goto LABEL_101;
                }
                if (v82 >= 0x20)
                {
                  unint64_t v102 = v93;
                  uint64_t v103 = v92;
                  uint64_t v104 = v82 & 0xFFFFFFE0;
                  do
                  {
                    long long v18 = *(v102 - 1);
                    long long v19 = *v102;
                    *(v103 - 1) = v18;
                    *uint64_t v103 = v19;
                    v103 += 2;
                    v102 += 2;
                    v104 -= 32;
                  }
                  while (v104);
                  if (v90 == v82) {
                    goto LABEL_97;
                  }
                  uint64_t v101 = v82 & 0xFFFFFFE0;
                  if ((v82 & 0x18) == 0)
                  {
                    v96 += v90;
                    v97 += v90;
                    int v98 = v82 & 0xFFFFFFE0;
                    goto LABEL_101;
                  }
                }
                else
                {
                  uint64_t v101 = 0;
                }
                v97 += v91;
                uint64_t v105 = v101 - (v82 & 0xFFFFFFF8);
                uint64_t v106 = (uint64_t *)(v95 + v101);
                uint64_t v107 = &v94[v101];
                do
                {
                  uint64_t v108 = *v106++;
                  *(void *)&long long v18 = v108;
                  *v107++ = v108;
                  v105 += 8;
                }
                while (v105);
                if (v91 == v82) {
                  goto LABEL_97;
                }
                v96 += v91;
                int v98 = v82 & 0xFFFFFFF8;
LABEL_101:
                int v99 = v82 - v98;
                do
                {
                  char v100 = *v96++;
                  *v97++ = v100;
                  --v99;
                }
                while (v99);
LABEL_97:
                ++v83;
                v92 += 32;
                uint64_t v93 = (long long *)((char *)v93 + v89);
                v95 += v89;
                v94 += 32;
              }
              while (v83 != v81);
            }
          }
          uint64_t v109 = 0;
          uint64_t v110 = v143;
          uint64_t v111 = v144;
          int v112 = v151;
          int v113 = v152;
          do
          {
            uint64_t v114 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)2,1u>::kSubblockPositions[v109 + 1];
            uint64_t v115 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)2,1u>::kSubblockPositions[v109];
            unsigned int v116 = (v112 - 8 * v115) & ~((v112 - 8 * (int)v115) >> 31);
            if (v116 >= 8) {
              unsigned int v116 = 8;
            }
            unsigned int v117 = (v113 - 4 * v114) & ~((v113 - 4 * (int)v114) >> 31);
            if (v117 >= 4) {
              unsigned int v117 = 4;
            }
            if (v116) {
              BOOL v118 = v117 == 0;
            }
            else {
              BOOL v118 = 1;
            }
            if (v118) {
              *uint64_t v111 = 0;
            }
            else {
              uint64_t v110 = (int8x8_t *)((char *)v110
            }
                                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::compressSubblock(v110, v111, (int16x4_t *)&__dst[128 * v114 + 1024 + 8 * v115], 32, v116, v117, *(double *)&v18, *(double *)&v19, v20, v21, v22, v23, v24));
            ++v111;
            v109 += 2;
          }
          while (v109 != 64);
          a7 = v129;
          unint64_t v69 = v140;
          uint64_t v68 = __src;
LABEL_128:
          uint64_t result = (uint64_t)v139;
          if (v141) {
            uint64_t result = (uint64_t)memcpy(v139, v68, 0x400uLL);
          }
          unint64_t v38 = v69;
          uint64_t v34 = v138;
        }
        while (v69 != (v130 >> 5) + 1);
        ++v26;
      }
      while (v26 != v119);
    }
  }
  return result;
}

uint64_t AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)2,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)3>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, char a12)
{
  uint64_t v165 = *MEMORY[0x263EF8340];
  size_t v133 = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v147 = a8;
  uint64_t v17 = a8 >> 5;
  unsigned int v132 = a8 + a10 - 1;
  unsigned int v18 = v132 >> 5;
  uint64_t v148 = a1;
  if (*(void *)(a1 + 168)) {
    int v19 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v19 = 0;
  }
  BOOL v20 = (v19 & 0xD00) == 0 || v19 == 768;
  int v21 = v19 & 0xE00;
  int v23 = !v20 && v21 != 1024;
  int v152 = v23;
  uint64_t result = a1;
  if (v17 <= v18)
  {
    unsigned int v25 = a7;
    unsigned int v142 = a7 + a9 - 1;
    if (a7 >> 5 <= v142 >> 5)
    {
      uint64_t v150 = (a5 - 1) >> 5;
      uint64_t v131 = (a6 - 1) >> 5;
      int v149 = ((a5 - 1) & 0x1F) + 1;
      int v130 = ((a6 - 1) & 0x1F) + 1;
      uint64_t v26 = 4 * a11;
      unint64_t v139 = a7;
      uint64_t v128 = v18 + 1;
      unint64_t v129 = (unint64_t)a7 >> 5;
      uint64_t v27 = 2 * a11;
      unsigned int v141 = a7;
      do
      {
        unsigned int v28 = (32 * v17) | 0x1F;
        if (32 * (int)v17 <= v147) {
          unsigned int v29 = v147;
        }
        else {
          unsigned int v29 = 32 * v17;
        }
        if (v132 < v28) {
          unsigned int v28 = v132;
        }
        unsigned int v138 = v29 - 32 * v17;
        int v146 = v28 - v29 + 1;
        if (v17 == v131) {
          unsigned int v30 = v130;
        }
        else {
          unsigned int v30 = 32;
        }
        uint64_t v145 = a3 + (v29 - v147) * a11;
        unint64_t v31 = v129;
        do
        {
          unint64_t v33 = 32 * v31;
          unsigned int v34 = 32 * (v31 + 1) - 1;
          if (32 * (int)v31 <= v25) {
            unsigned int v35 = v25;
          }
          else {
            unsigned int v35 = 32 * v31;
          }
          if (v142 < v34) {
            unsigned int v34 = v142;
          }
          int v36 = v34 - v35 + 1;
          if (v31 == v150) {
            unsigned int v37 = v149;
          }
          else {
            unsigned int v37 = 32;
          }
          BOOL v38 = 1;
          if (32 * (int)v17 >= v147 && v33 >= v139)
          {
            int v39 = v149;
            if (v31 != v150) {
              int v39 = 32;
            }
            BOOL v38 = v36 != v39 || v146 != v30;
          }
          unsigned int v41 = *(_DWORD *)(result + 128) >> (*(unsigned char *)(result + 144) + a12);
          if (v41 <= 1) {
            unsigned int v41 = 1;
          }
          unsigned int v42 = v41 + 31;
          if (v42 < 0x40) {
            unsigned int v43 = 0;
          }
          else {
            unsigned int v43 = 32 - __clz(~(-1 << -(char)__clz((v42 >> 5) - 1)));
          }
          unsigned int v44 = *(_DWORD *)(result + 132) >> (*(unsigned char *)(result + 144) + a12);
          if (v44 <= 1) {
            unsigned int v44 = 1;
          }
          unsigned int v45 = v44 + 31;
          if (v45 < 0x40) {
            unsigned int v46 = 0;
          }
          else {
            unsigned int v46 = 32 - __clz(~(-1 << -(char)__clz((v45 >> 5) - 1)));
          }
          unint64_t v151 = v31 + 1;
          if (v46 | v43)
          {
            int v47 = 0;
            uint64_t v48 = 0;
            BOOL v49 = v43 != 0;
            BOOL v50 = v46 != 0;
            int v51 = 1;
            do
            {
              --v43;
              if (v49) {
                v48 |= (unint64_t)(v51 & v31) << v47++;
              }
              else {
                unsigned int v43 = 0;
              }
              --v46;
              if (v50) {
                v48 |= (unint64_t)(v51 & v17) << v47++;
              }
              else {
                unsigned int v46 = 0;
              }
              v51 *= 2;
              --v47;
              BOOL v50 = v46 != 0;
              BOOL v49 = v43 != 0;
            }
            while (v46 | v43);
          }
          else
          {
            uint64_t v48 = 0;
          }
          size_t v52 = v17 * v133 + (v31 << 10);
          int v53 = v37 < 0x20 || v38;
          uint64_t v54 = (char *)(a4 + 32 * v48);
          uint64_t v55 = v145 + v35 - v25;
          BOOL v56 = (int8x8_t *)(a2 + v52);
          if (v30 < 0x20) {
            int v57 = 1;
          }
          else {
            int v57 = v53;
          }
          if (v152)
          {
            if (!v57)
            {
              unint64_t v60 = (int8x8_t *)__dst;
LABEL_79:
              uint64_t v62 = 0;
              int v63 = (int16x4_t *)v60;
              do
              {
                uint64_t v73 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)2,1u>::kSubblockPositions[v62 + 1];
                uint64_t v74 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)2,1u>::kSubblockPositions[v62];
                unsigned int v75 = (v37 - 8 * v74) & ~((int)(v37 - 8 * v74) >> 31);
                if (v75 >= 8) {
                  unsigned int v75 = 8;
                }
                unsigned int v76 = (v30 - 4 * v73) & ~((int)(v30 - 4 * v73) >> 31);
                if (v76 >= 4) {
                  unsigned int v76 = 4;
                }
                if (v75) {
                  BOOL v77 = v76 == 0;
                }
                else {
                  BOOL v77 = 1;
                }
                if (v77)
                {
                  char v72 = 0;
                }
                else
                {
                  int v64 = (int16x4_t *)(v55 + v26 * v73 + 8 * v74);
                  int16x4_t v65 = *(int16x4_t *)((char *)v64 + a11);
                  int16x4_t v66 = vzip1_s16(*v64, v65);
                  int16x4_t v67 = vzip2_s16(*v64, v65);
                  uint64_t v68 = (int16x4_t *)((char *)v64 + v27);
                  int16x4_t v69 = *(int16x4_t *)((char *)v68 + a11);
                  int16x4_t v70 = vzip1_s16(*v68, v69);
                  int16x4_t v71 = vzip2_s16(*v68, v69);
                  *int v63 = v66;
                  v63[1] = v70;
                  v63[2] = v67;
                  v63[3] = v71;
                  v63 += 4;
                  char v72 = 31;
                }
                *v54++ = v72;
                v62 += 2;
              }
              while (v62 != 64);
              unsigned int v25 = v141;
LABEL_92:
              unint64_t v78 = v151;
              if (v152) {
                goto LABEL_27;
              }
              goto LABEL_28;
            }
            unsigned int v135 = v35;
            int v136 = v36;
            size_t v58 = v56;
            BOOL v59 = v38;
            memcpy(__dst, v56, 0x400uLL);
            unsigned int v35 = v135;
            int v36 = v136;
            BOOL v38 = v59;
            unint64_t v60 = (int8x8_t *)__dst;
            BOOL v56 = v58;
            uint64_t result = v148;
          }
          else
          {
            unint64_t v60 = v56;
            if (!v57) {
              goto LABEL_79;
            }
          }
          unint64_t v140 = v56;
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE0ELj1ELh1ELNS7_13SubblockOrderE2EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder3EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = result;
          uint64_t v154 = (int16x4_t *)v60;
          unsigned __int8 v162 = v37;
          unsigned __int8 v163 = v30;
          unsigned int v158 = v138;
          unsigned int v159 = v35 - v33;
          uint64_t v155 = v54;
          uint64_t v156 = v55;
          uint64_t v157 = a11;
          unsigned int v160 = v146;
          unsigned int v161 = v36;
          if (v38)
          {
            uint64_t v61 = v60;
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(result + 8) + 7384), block);
            unint64_t v60 = v61;
            uint64_t result = v148;
            unsigned int v25 = v141;
            uint64_t v26 = 4 * a11;
            BOOL v56 = v140;
            uint64_t v27 = 2 * a11;
            goto LABEL_92;
          }
          uint64_t v79 = 0;
          uint64_t v137 = v60;
          unsigned int v80 = v60;
          do
          {
            unsigned int v81 = *v54++;
            unsigned int v80 = (int8x8_t *)((char *)v80
                             + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)2,(AGXTextureFootprint)0>::decompressSubblock((int8x8_t *)&__dst[128* (unint64_t)AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)2,1u>::kSubblockPositions[v79 + 1]+ 1024+ 8* AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)2,1u>::kSubblockPositions[v79]], 32, v80, v81));
            v79 += 2;
          }
          while (v79 != 64);
          uint64_t v82 = v160;
          unint64_t v78 = v151;
          if (v160)
          {
            uint64_t v83 = v161;
            if (v161)
            {
              uint64_t v84 = 0;
              uint64_t v85 = 32 * v158;
              uint64_t v86 = &__dst[v159 + 1024 + v85];
              uint64_t v87 = v85 + v159;
              uint64_t v88 = &__dst[v87 + 1024];
              uint64_t v89 = v156;
              uint64_t v90 = v157;
              uint64_t v91 = v161 & 0xFFFFFFE0;
              uint64_t v92 = v161 & 0xFFFFFFF8;
              uint64_t v93 = &__dst[v87 + 1040];
              uint64_t v94 = (long long *)(v156 + 16);
              uint64_t v95 = v86;
              uint64_t v96 = v156;
              do
              {
                unint64_t v97 = (char *)(v89 + v84 * v90);
                int v98 = &v86[32 * v84];
                if (v83 < 8 || (unint64_t)&v88[32 * v84 - v89 - v84 * v90] < 0x20)
                {
                  int v99 = 0;
                  goto LABEL_103;
                }
                if (v83 >= 0x20)
                {
                  uint64_t v103 = v94;
                  uint64_t v104 = v93;
                  uint64_t v105 = v83 & 0xFFFFFFE0;
                  do
                  {
                    long long v106 = *v103;
                    *(v104 - 1) = *(v103 - 1);
                    *uint64_t v104 = v106;
                    v104 += 2;
                    v103 += 2;
                    v105 -= 32;
                  }
                  while (v105);
                  if (v91 == v83) {
                    goto LABEL_99;
                  }
                  uint64_t v102 = v83 & 0xFFFFFFE0;
                  if ((v83 & 0x18) == 0)
                  {
                    v97 += v91;
                    v98 += v91;
                    int v99 = v83 & 0xFFFFFFE0;
                    goto LABEL_103;
                  }
                }
                else
                {
                  uint64_t v102 = 0;
                }
                v98 += v92;
                uint64_t v107 = v102 - (v83 & 0xFFFFFFF8);
                uint64_t v108 = (uint64_t *)(v96 + v102);
                uint64_t v109 = &v95[v102];
                do
                {
                  uint64_t v110 = *v108++;
                  *v109++ = v110;
                  v107 += 8;
                }
                while (v107);
                if (v92 == v83) {
                  goto LABEL_99;
                }
                v97 += v92;
                int v99 = v83 & 0xFFFFFFF8;
LABEL_103:
                int v100 = v83 - v99;
                do
                {
                  char v101 = *v97++;
                  *v98++ = v101;
                  --v100;
                }
                while (v100);
LABEL_99:
                ++v84;
                v93 += 32;
                uint64_t v94 = (long long *)((char *)v94 + v90);
                v96 += v90;
                v95 += 32;
              }
              while (v84 != v82);
            }
          }
          uint64_t v111 = 0;
          int v112 = v154;
          int v113 = v155;
          int v114 = v162;
          int v115 = v163;
          uint64_t v26 = 4 * a11;
          uint64_t v27 = 2 * a11;
          unsigned int v25 = v141;
          do
          {
            uint64_t v123 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)2,1u>::kSubblockPositions[v111 + 1];
            uint64_t v124 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)2,1u>::kSubblockPositions[v111];
            unsigned int v125 = (v114 - 8 * v124) & ~((v114 - 8 * (int)v124) >> 31);
            if (v125 >= 8) {
              unsigned int v125 = 8;
            }
            unsigned int v126 = (v115 - 4 * v123) & ~((v115 - 4 * (int)v123) >> 31);
            if (v126 >= 4) {
              unsigned int v126 = 4;
            }
            if (v125) {
              BOOL v127 = v126 == 0;
            }
            else {
              BOOL v127 = 1;
            }
            if (v127)
            {
              char v122 = 0;
            }
            else
            {
              unsigned int v116 = (int16x4_t *)&__dst[128 * v123 + 1024 + 8 * v124];
              int16x4_t v117 = v116[4];
              int16x4_t v118 = vzip1_s16(*v116, v117);
              int16x4_t v119 = vzip2_s16(*v116, v117);
              int16x4_t v120 = v116[8];
              int16x4_t v121 = v116[12];
              *int v112 = v118;
              v112[1] = vzip1_s16(v120, v121);
              v112[2] = v119;
              v112[3] = vzip2_s16(v120, v121);
              v112 += 4;
              char v122 = 31;
            }
            *v113++ = v122;
            v111 += 2;
          }
          while (v111 != 64);
          uint64_t result = v148;
          BOOL v56 = v140;
          unint64_t v60 = v137;
          if (v152)
          {
LABEL_27:
            unsigned int v32 = v25;
            memcpy(v56, v60, 0x400uLL);
            unsigned int v25 = v32;
            uint64_t v27 = 2 * a11;
            uint64_t v26 = 4 * a11;
            uint64_t result = v148;
          }
LABEL_28:
          unint64_t v31 = v78;
        }
        while (v78 != (v142 >> 5) + 1);
        ++v17;
      }
      while (v17 != v128);
    }
  }
  return result;
}

uint64_t AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)2,(AGXTextureFootprint)1>,false,(AGXHardwareTextureMemoryOrder)3>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, char a12)
{
  uint64_t v16 = a1;
  uint64_t v154 = *MEMORY[0x263EF8340];
  size_t v124 = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v135 = a8;
  uint64_t v24 = a8 >> 5;
  unsigned int v123 = a8 + a10 - 1;
  unsigned int v25 = v123 >> 5;
  uint64_t result = *(void *)(v16 + 168);
  if (result)
  {
    uint64_t result = IOSurfaceGetCacheMode();
    int v27 = result & 0xF00;
  }
  else
  {
    int v27 = 0;
  }
  BOOL v28 = (v27 & 0xD00) == 0 || v27 == 768;
  int v29 = v27 & 0xE00;
  int v31 = !v28 && v29 != 1024;
  int v141 = v31;
  if (v24 <= v25)
  {
    unsigned int v130 = a7 + a9 - 1;
    if (a7 >> 5 <= v130 >> 5)
    {
      uint64_t v137 = (a5 - 1) >> 5;
      uint64_t v122 = (a6 - 1) >> 5;
      int v136 = ((a5 - 1) & 0x1F) + 1;
      int v121 = ((a6 - 1) & 0x1F) + 1;
      unint64_t v128 = a7;
      uint64_t v119 = v25 + 1;
      unint64_t v120 = (unint64_t)a7 >> 5;
      unsigned int v129 = a7;
      uint64_t v140 = v16;
      do
      {
        unsigned int v32 = (32 * v24) | 0x1F;
        if (32 * (int)v24 <= v135) {
          unsigned int v33 = v135;
        }
        else {
          unsigned int v33 = 32 * v24;
        }
        if (v123 < v32) {
          unsigned int v32 = v123;
        }
        unsigned int v127 = v33 - 32 * v24;
        int v134 = v32 - v33 + 1;
        if (v24 == v122) {
          unsigned int v34 = v121;
        }
        else {
          unsigned int v34 = 32;
        }
        uint64_t v133 = a3 + (v33 - v135) * a11;
        unint64_t v35 = v120;
        do
        {
          unint64_t v36 = 32 * v35;
          unsigned int v37 = 32 * (v35 + 1) - 1;
          if (32 * (int)v35 <= a7) {
            unsigned int v38 = a7;
          }
          else {
            unsigned int v38 = 32 * v35;
          }
          if (v130 < v37) {
            unsigned int v37 = v130;
          }
          int v39 = v37 - v38 + 1;
          if (v35 == v137) {
            unsigned int v40 = v136;
          }
          else {
            unsigned int v40 = 32;
          }
          BOOL v41 = 1;
          if (32 * (int)v24 >= v135 && v36 >= v128)
          {
            int v42 = v136;
            if (v35 != v137) {
              int v42 = 32;
            }
            BOOL v41 = v39 != v42 || v134 != v34;
          }
          unsigned int v44 = *(_DWORD *)(v16 + 128) >> (*(unsigned char *)(v16 + 144) + a12);
          if (v44 <= 1) {
            unsigned int v44 = 1;
          }
          unsigned int v45 = v44 + 31;
          if (v45 < 0x40) {
            unsigned int v46 = 0;
          }
          else {
            unsigned int v46 = 32 - __clz(~(-1 << -(char)__clz((v45 >> 5) - 1)));
          }
          unsigned int v47 = *(_DWORD *)(v16 + 132) >> (*(unsigned char *)(v16 + 144) + a12);
          if (v47 <= 1) {
            unsigned int v47 = 1;
          }
          unsigned int v48 = v47 + 31;
          if (v48 < 0x40) {
            unsigned int v49 = 0;
          }
          else {
            unsigned int v49 = 32 - __clz(~(-1 << -(char)__clz((v48 >> 5) - 1)));
          }
          unint64_t v139 = v35 + 1;
          if (v49 | v46)
          {
            int v50 = 0;
            uint64_t v51 = 0;
            BOOL v52 = v46 != 0;
            BOOL v53 = v49 != 0;
            int v54 = 1;
            do
            {
              --v46;
              if (v52) {
                v51 |= (unint64_t)(v54 & v35) << v50++;
              }
              else {
                unsigned int v46 = 0;
              }
              --v49;
              if (v53) {
                v51 |= (unint64_t)(v54 & v24) << v50++;
              }
              else {
                unsigned int v49 = 0;
              }
              v54 *= 2;
              --v50;
              BOOL v53 = v49 != 0;
              BOOL v52 = v46 != 0;
            }
            while (v49 | v46);
          }
          else
          {
            uint64_t v51 = 0;
          }
          uint64_t v55 = v24 * v124 + 768 * v35;
          int v56 = v40 < 0x20 || v41;
          int v57 = (unsigned __int8 *)(a4 + 32 * v51);
          uint64_t v58 = v133 + v38 - a7;
          BOOL v59 = (int16x4_t *)(a2 + v55);
          if (v34 < 0x20) {
            int v60 = 1;
          }
          else {
            int v60 = v56;
          }
          unsigned int v138 = v59;
          if (v141)
          {
            if (!v60)
            {
              int v64 = (int16x4_t *)__dst;
LABEL_78:
              uint64_t v67 = 0;
              int v68 = *(_DWORD *)(*(void *)(v140 + 208) + 52);
              int16x4_t v69 = v64;
              uint64_t v70 = (uint64_t)v64;
              do
              {
                uint64_t v71 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)2,1u>::kSubblockPositions[v67 + 1];
                uint64_t v72 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)2,1u>::kSubblockPositions[v67];
                unsigned int v73 = (v40 - 8 * v72) & ~((int)(v40 - 8 * v72) >> 31);
                if (v73 >= 8) {
                  unsigned int v73 = 8;
                }
                unsigned int v74 = (v34 - 4 * v71) & ~((int)(v34 - 4 * v71) >> 31);
                if (v74 >= 4) {
                  unsigned int v74 = 4;
                }
                if (v73) {
                  BOOL v75 = v74 == 0;
                }
                else {
                  BOOL v75 = 1;
                }
                if (v75) {
                  *int v57 = 0;
                }
                else {
                  v70 += AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::compressSubblock(v70, v57, (int16x4_t *)(v58 + 4 * a11 * v71 + 8 * v72), a11, v73, v74, v68, *(double *)&v17, *(double *)&v18, v19, v20, v21, v22, v23);
                }
                ++v57;
                v67 += 2;
              }
              while (v67 != 64);
              a7 = v129;
              uint64_t v16 = v140;
              int16x4_t v66 = v69;
              goto LABEL_127;
            }
            int v61 = v39;
            BOOL v62 = v41;
            unsigned int v63 = v38;
            memcpy(__dst, v59, 0x400uLL);
            unsigned int v38 = v63;
            BOOL v41 = v62;
            int v39 = v61;
            a7 = v129;
            int v64 = (int16x4_t *)__dst;
          }
          else
          {
            int v64 = v59;
            if (!v60) {
              goto LABEL_78;
            }
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE0ELj1ELh0ELNS7_13SubblockOrderE2EL19AGXTextureFootprint1EEELb0EL29AGXHardwareTextureMemoryOrder3EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = v140;
          uint64_t v143 = v64;
          unsigned __int8 v151 = v40;
          unsigned __int8 v152 = v34;
          unsigned int v147 = v127;
          unsigned int v148 = v38 - v36;
          unsigned int v144 = v57;
          uint64_t v145 = v58;
          uint64_t v146 = a11;
          unsigned int v149 = v134;
          unsigned int v150 = v39;
          if (v41)
          {
            int16x4_t v65 = v64;
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(v140 + 8) + 7384), block);
            int16x4_t v66 = v65;
            uint64_t v16 = v140;
            goto LABEL_127;
          }
          uint64_t v76 = 0;
          int v77 = *(_DWORD *)(*(void *)(v140 + 208) + 52);
          __src = v64;
          unint64_t v78 = v64;
          do
          {
            unsigned int v79 = *v57++;
            unint64_t v78 = (int16x4_t *)((char *)v78
                              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::decompressSubblock((uint64_t)&__dst[128* (unint64_t)AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)2,1u>::kSubblockPositions[v76 + 1]+ 1024+ 8* AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)2,1u>::kSubblockPositions[v76]], 32, v78, v79, v77));
            v76 += 2;
          }
          while (v76 != 64);
          uint64_t v80 = v149;
          if (v149)
          {
            uint64_t v81 = v150;
            if (v150)
            {
              uint64_t v82 = 0;
              uint64_t v83 = 32 * v147;
              uint64_t v84 = &__dst[v148 + 1024 + v83];
              uint64_t v85 = v83 + v148;
              uint64_t v86 = &__dst[v85 + 1024];
              uint64_t v87 = v145;
              uint64_t v88 = v146;
              uint64_t v89 = v150 & 0xFFFFFFE0;
              uint64_t v90 = v150 & 0xFFFFFFF8;
              uint64_t v91 = &__dst[v85 + 1040];
              uint64_t v92 = (long long *)(v145 + 16);
              uint64_t v93 = v84;
              uint64_t v94 = v145;
              do
              {
                uint64_t v95 = (char *)(v87 + v82 * v88);
                uint64_t v96 = &v84[32 * v82];
                if (v81 < 8 || (unint64_t)&v86[32 * v82 - v87 - v82 * v88] < 0x20)
                {
                  int v97 = 0;
                  goto LABEL_100;
                }
                if (v81 >= 0x20)
                {
                  char v101 = v92;
                  uint64_t v102 = v91;
                  uint64_t v103 = v81 & 0xFFFFFFE0;
                  do
                  {
                    long long v17 = *(v101 - 1);
                    long long v18 = *v101;
                    *(v102 - 1) = v17;
                    *uint64_t v102 = v18;
                    v102 += 2;
                    v101 += 2;
                    v103 -= 32;
                  }
                  while (v103);
                  if (v89 == v81) {
                    goto LABEL_96;
                  }
                  uint64_t v100 = v81 & 0xFFFFFFE0;
                  if ((v81 & 0x18) == 0)
                  {
                    v95 += v89;
                    v96 += v89;
                    int v97 = v81 & 0xFFFFFFE0;
                    goto LABEL_100;
                  }
                }
                else
                {
                  uint64_t v100 = 0;
                }
                v96 += v90;
                uint64_t v104 = v100 - (v81 & 0xFFFFFFF8);
                uint64_t v105 = (uint64_t *)(v94 + v100);
                long long v106 = &v93[v100];
                do
                {
                  uint64_t v107 = *v105++;
                  *(void *)&long long v17 = v107;
                  *v106++ = v107;
                  v104 += 8;
                }
                while (v104);
                if (v90 == v81) {
                  goto LABEL_96;
                }
                v95 += v90;
                int v97 = v81 & 0xFFFFFFF8;
LABEL_100:
                int v98 = v81 - v97;
                do
                {
                  char v99 = *v95++;
                  *v96++ = v99;
                  --v98;
                }
                while (v98);
LABEL_96:
                ++v82;
                v91 += 32;
                uint64_t v92 = (long long *)((char *)v92 + v88);
                v94 += v88;
                v93 += 32;
              }
              while (v82 != v80);
            }
          }
          uint64_t v108 = 0;
          uint64_t v109 = (uint64_t)v143;
          uint64_t v110 = v144;
          int v111 = v151;
          int v112 = v152;
          int v113 = *(_DWORD *)(*(void *)(v140 + 208) + 52);
          do
          {
            uint64_t v114 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)2,1u>::kSubblockPositions[v108 + 1];
            uint64_t v115 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)2,1u>::kSubblockPositions[v108];
            unsigned int v116 = (v111 - 8 * v115) & ~((v111 - 8 * (int)v115) >> 31);
            if (v116 >= 8) {
              unsigned int v116 = 8;
            }
            unsigned int v117 = (v112 - 4 * v114) & ~((v112 - 4 * (int)v114) >> 31);
            if (v117 >= 4) {
              unsigned int v117 = 4;
            }
            if (v116) {
              BOOL v118 = v117 == 0;
            }
            else {
              BOOL v118 = 1;
            }
            if (v118) {
              *uint64_t v110 = 0;
            }
            else {
              v109 += AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::compressSubblock(v109, v110, (int16x4_t *)&__dst[128 * v114 + 1024 + 8 * v115], 32, v116, v117, v113, *(double *)&v17, *(double *)&v18, v19, v20, v21, v22, v23);
            }
            ++v110;
            v108 += 2;
          }
          while (v108 != 64);
          a7 = v129;
          uint64_t v16 = v140;
          int16x4_t v66 = __src;
LABEL_127:
          uint64_t result = (uint64_t)v138;
          if (v141) {
            uint64_t result = (uint64_t)memcpy(v138, v66, 0x400uLL);
          }
          unint64_t v35 = v139;
        }
        while (v139 != (v130 >> 5) + 1);
        ++v24;
      }
      while (v24 != v119);
    }
  }
  return result;
}

uint64_t AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)2,(AGXTextureFootprint)2>,false,(AGXHardwareTextureMemoryOrder)3>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, char a12)
{
  uint64_t v16 = a1;
  uint64_t v154 = *MEMORY[0x263EF8340];
  size_t v124 = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v135 = a8;
  uint64_t v24 = a8 >> 5;
  unsigned int v123 = a8 + a10 - 1;
  unsigned int v25 = v123 >> 5;
  uint64_t result = *(void *)(v16 + 168);
  if (result)
  {
    uint64_t result = IOSurfaceGetCacheMode();
    int v27 = result & 0xF00;
  }
  else
  {
    int v27 = 0;
  }
  BOOL v28 = (v27 & 0xD00) == 0 || v27 == 768;
  int v29 = v27 & 0xE00;
  int v31 = !v28 && v29 != 1024;
  int v141 = v31;
  if (v24 <= v25)
  {
    unsigned int v130 = a7 + a9 - 1;
    if (a7 >> 5 <= v130 >> 5)
    {
      uint64_t v137 = (a5 - 1) >> 5;
      uint64_t v122 = (a6 - 1) >> 5;
      int v136 = ((a5 - 1) & 0x1F) + 1;
      int v121 = ((a6 - 1) & 0x1F) + 1;
      unint64_t v128 = a7;
      uint64_t v119 = v25 + 1;
      unint64_t v120 = (unint64_t)a7 >> 5;
      unsigned int v129 = a7;
      uint64_t v140 = v16;
      do
      {
        unsigned int v32 = (32 * v24) | 0x1F;
        if (32 * (int)v24 <= v135) {
          unsigned int v33 = v135;
        }
        else {
          unsigned int v33 = 32 * v24;
        }
        if (v123 < v32) {
          unsigned int v32 = v123;
        }
        unsigned int v127 = v33 - 32 * v24;
        int v134 = v32 - v33 + 1;
        if (v24 == v122) {
          unsigned int v34 = v121;
        }
        else {
          unsigned int v34 = 32;
        }
        uint64_t v133 = a3 + (v33 - v135) * a11;
        unint64_t v35 = v120;
        do
        {
          unint64_t v36 = 32 * v35;
          unsigned int v37 = 32 * (v35 + 1) - 1;
          if (32 * (int)v35 <= a7) {
            unsigned int v38 = a7;
          }
          else {
            unsigned int v38 = 32 * v35;
          }
          if (v130 < v37) {
            unsigned int v37 = v130;
          }
          int v39 = v37 - v38 + 1;
          if (v35 == v137) {
            unsigned int v40 = v136;
          }
          else {
            unsigned int v40 = 32;
          }
          BOOL v41 = 1;
          if (32 * (int)v24 >= v135 && v36 >= v128)
          {
            int v42 = v136;
            if (v35 != v137) {
              int v42 = 32;
            }
            BOOL v41 = v39 != v42 || v134 != v34;
          }
          unsigned int v44 = *(_DWORD *)(v16 + 128) >> (*(unsigned char *)(v16 + 144) + a12);
          if (v44 <= 1) {
            unsigned int v44 = 1;
          }
          unsigned int v45 = v44 + 31;
          if (v45 < 0x40) {
            unsigned int v46 = 0;
          }
          else {
            unsigned int v46 = 32 - __clz(~(-1 << -(char)__clz((v45 >> 5) - 1)));
          }
          unsigned int v47 = *(_DWORD *)(v16 + 132) >> (*(unsigned char *)(v16 + 144) + a12);
          if (v47 <= 1) {
            unsigned int v47 = 1;
          }
          unsigned int v48 = v47 + 31;
          if (v48 < 0x40) {
            unsigned int v49 = 0;
          }
          else {
            unsigned int v49 = 32 - __clz(~(-1 << -(char)__clz((v48 >> 5) - 1)));
          }
          unint64_t v139 = v35 + 1;
          if (v49 | v46)
          {
            int v50 = 0;
            uint64_t v51 = 0;
            BOOL v52 = v46 != 0;
            BOOL v53 = v49 != 0;
            int v54 = 1;
            do
            {
              --v46;
              if (v52) {
                v51 |= (unint64_t)(v54 & v35) << v50++;
              }
              else {
                unsigned int v46 = 0;
              }
              --v49;
              if (v53) {
                v51 |= (unint64_t)(v54 & v24) << v50++;
              }
              else {
                unsigned int v49 = 0;
              }
              v54 *= 2;
              --v50;
              BOOL v53 = v49 != 0;
              BOOL v52 = v46 != 0;
            }
            while (v49 | v46);
          }
          else
          {
            uint64_t v51 = 0;
          }
          uint64_t v55 = v24 * v124 + 640 * v35;
          int v56 = v40 < 0x20 || v41;
          int v57 = (unsigned __int8 *)(a4 + 32 * v51);
          uint64_t v58 = v133 + v38 - a7;
          BOOL v59 = (int16x4_t *)(a2 + v55);
          if (v34 < 0x20) {
            int v60 = 1;
          }
          else {
            int v60 = v56;
          }
          unsigned int v138 = v59;
          if (v141)
          {
            if (!v60)
            {
              int v64 = (int16x4_t *)__dst;
LABEL_78:
              uint64_t v67 = 0;
              int v68 = *(_DWORD *)(*(void *)(v140 + 208) + 52);
              int16x4_t v69 = v64;
              uint64_t v70 = (uint64_t)v64;
              do
              {
                uint64_t v71 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)2,1u>::kSubblockPositions[v67 + 1];
                uint64_t v72 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)2,1u>::kSubblockPositions[v67];
                unsigned int v73 = (v40 - 8 * v72) & ~((int)(v40 - 8 * v72) >> 31);
                if (v73 >= 8) {
                  unsigned int v73 = 8;
                }
                unsigned int v74 = (v34 - 4 * v71) & ~((int)(v34 - 4 * v71) >> 31);
                if (v74 >= 4) {
                  unsigned int v74 = 4;
                }
                if (v73) {
                  BOOL v75 = v74 == 0;
                }
                else {
                  BOOL v75 = 1;
                }
                if (v75) {
                  *int v57 = 0;
                }
                else {
                  v70 += AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::compressSubblock(v70, v57, (int16x4_t *)(v58 + 4 * a11 * v71 + 8 * v72), a11, v73, v74, v68, *(double *)&v17, *(double *)&v18, v19, v20, v21, v22, v23);
                }
                ++v57;
                v67 += 2;
              }
              while (v67 != 64);
              a7 = v129;
              uint64_t v16 = v140;
              int16x4_t v66 = v69;
              goto LABEL_127;
            }
            int v61 = v39;
            BOOL v62 = v41;
            unsigned int v63 = v38;
            memcpy(__dst, v59, 0x400uLL);
            unsigned int v38 = v63;
            BOOL v41 = v62;
            int v39 = v61;
            a7 = v129;
            int v64 = (int16x4_t *)__dst;
          }
          else
          {
            int v64 = v59;
            if (!v60) {
              goto LABEL_78;
            }
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE0ELj1ELh0ELNS7_13SubblockOrderE2EL19AGXTextureFootprint2EEELb0EL29AGXHardwareTextureMemoryOrder3EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = v140;
          uint64_t v143 = v64;
          unsigned __int8 v151 = v40;
          unsigned __int8 v152 = v34;
          unsigned int v147 = v127;
          unsigned int v148 = v38 - v36;
          unsigned int v144 = v57;
          uint64_t v145 = v58;
          uint64_t v146 = a11;
          unsigned int v149 = v134;
          unsigned int v150 = v39;
          if (v41)
          {
            int16x4_t v65 = v64;
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(v140 + 8) + 7384), block);
            int16x4_t v66 = v65;
            uint64_t v16 = v140;
            goto LABEL_127;
          }
          uint64_t v76 = 0;
          int v77 = *(_DWORD *)(*(void *)(v140 + 208) + 52);
          __src = v64;
          unint64_t v78 = v64;
          do
          {
            unsigned int v79 = *v57++;
            unint64_t v78 = (int16x4_t *)((char *)v78
                              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressSubblock((uint64_t)&__dst[128* (unint64_t)AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)2,1u>::kSubblockPositions[v76 + 1]+ 1024+ 8* AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)2,1u>::kSubblockPositions[v76]], 32, v78, v79, v77));
            v76 += 2;
          }
          while (v76 != 64);
          uint64_t v80 = v149;
          if (v149)
          {
            uint64_t v81 = v150;
            if (v150)
            {
              uint64_t v82 = 0;
              uint64_t v83 = 32 * v147;
              uint64_t v84 = &__dst[v148 + 1024 + v83];
              uint64_t v85 = v83 + v148;
              uint64_t v86 = &__dst[v85 + 1024];
              uint64_t v87 = v145;
              uint64_t v88 = v146;
              uint64_t v89 = v150 & 0xFFFFFFE0;
              uint64_t v90 = v150 & 0xFFFFFFF8;
              uint64_t v91 = &__dst[v85 + 1040];
              uint64_t v92 = (long long *)(v145 + 16);
              uint64_t v93 = v84;
              uint64_t v94 = v145;
              do
              {
                uint64_t v95 = (char *)(v87 + v82 * v88);
                uint64_t v96 = &v84[32 * v82];
                if (v81 < 8 || (unint64_t)&v86[32 * v82 - v87 - v82 * v88] < 0x20)
                {
                  int v97 = 0;
                  goto LABEL_100;
                }
                if (v81 >= 0x20)
                {
                  char v101 = v92;
                  uint64_t v102 = v91;
                  uint64_t v103 = v81 & 0xFFFFFFE0;
                  do
                  {
                    long long v17 = *(v101 - 1);
                    long long v18 = *v101;
                    *(v102 - 1) = v17;
                    *uint64_t v102 = v18;
                    v102 += 2;
                    v101 += 2;
                    v103 -= 32;
                  }
                  while (v103);
                  if (v89 == v81) {
                    goto LABEL_96;
                  }
                  uint64_t v100 = v81 & 0xFFFFFFE0;
                  if ((v81 & 0x18) == 0)
                  {
                    v95 += v89;
                    v96 += v89;
                    int v97 = v81 & 0xFFFFFFE0;
                    goto LABEL_100;
                  }
                }
                else
                {
                  uint64_t v100 = 0;
                }
                v96 += v90;
                uint64_t v104 = v100 - (v81 & 0xFFFFFFF8);
                uint64_t v105 = (uint64_t *)(v94 + v100);
                long long v106 = &v93[v100];
                do
                {
                  uint64_t v107 = *v105++;
                  *(void *)&long long v17 = v107;
                  *v106++ = v107;
                  v104 += 8;
                }
                while (v104);
                if (v90 == v81) {
                  goto LABEL_96;
                }
                v95 += v90;
                int v97 = v81 & 0xFFFFFFF8;
LABEL_100:
                int v98 = v81 - v97;
                do
                {
                  char v99 = *v95++;
                  *v96++ = v99;
                  --v98;
                }
                while (v98);
LABEL_96:
                ++v82;
                v91 += 32;
                uint64_t v92 = (long long *)((char *)v92 + v88);
                v94 += v88;
                v93 += 32;
              }
              while (v82 != v80);
            }
          }
          uint64_t v108 = 0;
          uint64_t v109 = (uint64_t)v143;
          uint64_t v110 = v144;
          int v111 = v151;
          int v112 = v152;
          int v113 = *(_DWORD *)(*(void *)(v140 + 208) + 52);
          do
          {
            uint64_t v114 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)2,1u>::kSubblockPositions[v108 + 1];
            uint64_t v115 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)2,1u>::kSubblockPositions[v108];
            unsigned int v116 = (v111 - 8 * v115) & ~((v111 - 8 * (int)v115) >> 31);
            if (v116 >= 8) {
              unsigned int v116 = 8;
            }
            unsigned int v117 = (v112 - 4 * v114) & ~((v112 - 4 * (int)v114) >> 31);
            if (v117 >= 4) {
              unsigned int v117 = 4;
            }
            if (v116) {
              BOOL v118 = v117 == 0;
            }
            else {
              BOOL v118 = 1;
            }
            if (v118) {
              *uint64_t v110 = 0;
            }
            else {
              v109 += AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::compressSubblock(v109, v110, (int16x4_t *)&__dst[128 * v114 + 1024 + 8 * v115], 32, v116, v117, v113, *(double *)&v17, *(double *)&v18, v19, v20, v21, v22, v23);
            }
            ++v110;
            v108 += 2;
          }
          while (v108 != 64);
          a7 = v129;
          uint64_t v16 = v140;
          int16x4_t v66 = __src;
LABEL_127:
          uint64_t result = (uint64_t)v138;
          if (v141) {
            uint64_t result = (uint64_t)memcpy(v138, v66, 0x400uLL);
          }
          unint64_t v35 = v139;
        }
        while (v139 != (v130 >> 5) + 1);
        ++v24;
      }
      while (v24 != v119);
    }
  }
  return result;
}

uint64_t AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)2,(AGXTextureFootprint)3>,false,(AGXHardwareTextureMemoryOrder)3>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, char a12)
{
  uint64_t v16 = a1;
  uint64_t v154 = *MEMORY[0x263EF8340];
  size_t v124 = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v135 = a8;
  uint64_t v24 = a8 >> 5;
  unsigned int v123 = a8 + a10 - 1;
  unsigned int v25 = v123 >> 5;
  uint64_t result = *(void *)(v16 + 168);
  if (result)
  {
    uint64_t result = IOSurfaceGetCacheMode();
    int v27 = result & 0xF00;
  }
  else
  {
    int v27 = 0;
  }
  BOOL v28 = (v27 & 0xD00) == 0 || v27 == 768;
  int v29 = v27 & 0xE00;
  int v31 = !v28 && v29 != 1024;
  int v141 = v31;
  if (v24 <= v25)
  {
    unsigned int v130 = a7 + a9 - 1;
    if (a7 >> 5 <= v130 >> 5)
    {
      uint64_t v137 = (a5 - 1) >> 5;
      uint64_t v122 = (a6 - 1) >> 5;
      int v136 = ((a5 - 1) & 0x1F) + 1;
      int v121 = ((a6 - 1) & 0x1F) + 1;
      unint64_t v128 = a7;
      uint64_t v119 = v25 + 1;
      unint64_t v120 = (unint64_t)a7 >> 5;
      unsigned int v129 = a7;
      uint64_t v140 = v16;
      do
      {
        unsigned int v32 = (32 * v24) | 0x1F;
        if (32 * (int)v24 <= v135) {
          unsigned int v33 = v135;
        }
        else {
          unsigned int v33 = 32 * v24;
        }
        if (v123 < v32) {
          unsigned int v32 = v123;
        }
        unsigned int v127 = v33 - 32 * v24;
        int v134 = v32 - v33 + 1;
        if (v24 == v122) {
          unsigned int v34 = v121;
        }
        else {
          unsigned int v34 = 32;
        }
        uint64_t v133 = a3 + (v33 - v135) * a11;
        unint64_t v35 = v120;
        do
        {
          unint64_t v36 = 32 * v35;
          unsigned int v37 = 32 * (v35 + 1) - 1;
          if (32 * (int)v35 <= a7) {
            unsigned int v38 = a7;
          }
          else {
            unsigned int v38 = 32 * v35;
          }
          if (v130 < v37) {
            unsigned int v37 = v130;
          }
          int v39 = v37 - v38 + 1;
          if (v35 == v137) {
            unsigned int v40 = v136;
          }
          else {
            unsigned int v40 = 32;
          }
          BOOL v41 = 1;
          if (32 * (int)v24 >= v135 && v36 >= v128)
          {
            int v42 = v136;
            if (v35 != v137) {
              int v42 = 32;
            }
            BOOL v41 = v39 != v42 || v134 != v34;
          }
          unsigned int v44 = *(_DWORD *)(v16 + 128) >> (*(unsigned char *)(v16 + 144) + a12);
          if (v44 <= 1) {
            unsigned int v44 = 1;
          }
          unsigned int v45 = v44 + 31;
          if (v45 < 0x40) {
            unsigned int v46 = 0;
          }
          else {
            unsigned int v46 = 32 - __clz(~(-1 << -(char)__clz((v45 >> 5) - 1)));
          }
          unsigned int v47 = *(_DWORD *)(v16 + 132) >> (*(unsigned char *)(v16 + 144) + a12);
          if (v47 <= 1) {
            unsigned int v47 = 1;
          }
          unsigned int v48 = v47 + 31;
          if (v48 < 0x40) {
            unsigned int v49 = 0;
          }
          else {
            unsigned int v49 = 32 - __clz(~(-1 << -(char)__clz((v48 >> 5) - 1)));
          }
          unint64_t v139 = v35 + 1;
          if (v49 | v46)
          {
            int v50 = 0;
            uint64_t v51 = 0;
            BOOL v52 = v46 != 0;
            BOOL v53 = v49 != 0;
            int v54 = 1;
            do
            {
              --v46;
              if (v52) {
                v51 |= (unint64_t)(v54 & v35) << v50++;
              }
              else {
                unsigned int v46 = 0;
              }
              --v49;
              if (v53) {
                v51 |= (unint64_t)(v54 & v24) << v50++;
              }
              else {
                unsigned int v49 = 0;
              }
              v54 *= 2;
              --v50;
              BOOL v53 = v49 != 0;
              BOOL v52 = v46 != 0;
            }
            while (v49 | v46);
          }
          else
          {
            uint64_t v51 = 0;
          }
          size_t v55 = v24 * v124 + (v35 << 9);
          int v56 = v40 < 0x20 || v41;
          int v57 = (unsigned __int8 *)(a4 + 32 * v51);
          uint64_t v58 = v133 + v38 - a7;
          BOOL v59 = (int16x4_t *)(a2 + v55);
          if (v34 < 0x20) {
            int v60 = 1;
          }
          else {
            int v60 = v56;
          }
          unsigned int v138 = v59;
          if (v141)
          {
            if (!v60)
            {
              int v64 = (int16x4_t *)__dst;
LABEL_78:
              uint64_t v67 = 0;
              int v68 = *(_DWORD *)(*(void *)(v140 + 208) + 52);
              int16x4_t v69 = v64;
              unint64_t v70 = (unint64_t)v64;
              do
              {
                uint64_t v71 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)2,1u>::kSubblockPositions[v67 + 1];
                uint64_t v72 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)2,1u>::kSubblockPositions[v67];
                unsigned int v73 = (v40 - 8 * v72) & ~((int)(v40 - 8 * v72) >> 31);
                if (v73 >= 8) {
                  unsigned int v73 = 8;
                }
                unsigned int v74 = (v34 - 4 * v71) & ~((int)(v34 - 4 * v71) >> 31);
                if (v74 >= 4) {
                  unsigned int v74 = 4;
                }
                if (v73) {
                  BOOL v75 = v74 == 0;
                }
                else {
                  BOOL v75 = 1;
                }
                if (v75) {
                  *int v57 = 0;
                }
                else {
                  v70 += AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::compressSubblock(v70, v57, (int16x4_t *)(v58 + 4 * a11 * v71 + 8 * v72), a11, v73, v74, v68, *(double *)&v17, *(double *)&v18, v19, v20, v21, v22, v23);
                }
                ++v57;
                v67 += 2;
              }
              while (v67 != 64);
              a7 = v129;
              uint64_t v16 = v140;
              int16x4_t v66 = v69;
              goto LABEL_127;
            }
            int v61 = v39;
            BOOL v62 = v41;
            unsigned int v63 = v38;
            memcpy(__dst, v59, 0x400uLL);
            unsigned int v38 = v63;
            BOOL v41 = v62;
            int v39 = v61;
            a7 = v129;
            int v64 = (int16x4_t *)__dst;
          }
          else
          {
            int v64 = v59;
            if (!v60) {
              goto LABEL_78;
            }
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE0ELj1ELh0ELNS7_13SubblockOrderE2EL19AGXTextureFootprint3EEELb0EL29AGXHardwareTextureMemoryOrder3EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = v140;
          uint64_t v143 = v64;
          unsigned __int8 v151 = v40;
          unsigned __int8 v152 = v34;
          unsigned int v147 = v127;
          unsigned int v148 = v38 - v36;
          unsigned int v144 = v57;
          uint64_t v145 = v58;
          uint64_t v146 = a11;
          unsigned int v149 = v134;
          unsigned int v150 = v39;
          if (v41)
          {
            int16x4_t v65 = v64;
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(v140 + 8) + 7384), block);
            int16x4_t v66 = v65;
            uint64_t v16 = v140;
            goto LABEL_127;
          }
          uint64_t v76 = 0;
          int v77 = *(_DWORD *)(*(void *)(v140 + 208) + 52);
          __src = v64;
          unint64_t v78 = v64;
          do
          {
            unsigned int v79 = *v57++;
            unint64_t v78 = (int16x4_t *)((char *)v78
                              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::decompressSubblock((uint64_t)&__dst[128* (unint64_t)AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)2,1u>::kSubblockPositions[v76 + 1]+ 1024+ 8* AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)2,1u>::kSubblockPositions[v76]], 32, v78, v79, v77));
            v76 += 2;
          }
          while (v76 != 64);
          uint64_t v80 = v149;
          if (v149)
          {
            uint64_t v81 = v150;
            if (v150)
            {
              uint64_t v82 = 0;
              uint64_t v83 = 32 * v147;
              uint64_t v84 = &__dst[v148 + 1024 + v83];
              uint64_t v85 = v83 + v148;
              uint64_t v86 = &__dst[v85 + 1024];
              uint64_t v87 = v145;
              uint64_t v88 = v146;
              uint64_t v89 = v150 & 0xFFFFFFE0;
              uint64_t v90 = v150 & 0xFFFFFFF8;
              uint64_t v91 = &__dst[v85 + 1040];
              uint64_t v92 = (long long *)(v145 + 16);
              uint64_t v93 = v84;
              uint64_t v94 = v145;
              do
              {
                uint64_t v95 = (char *)(v87 + v82 * v88);
                uint64_t v96 = &v84[32 * v82];
                if (v81 < 8 || (unint64_t)&v86[32 * v82 - v87 - v82 * v88] < 0x20)
                {
                  int v97 = 0;
                  goto LABEL_100;
                }
                if (v81 >= 0x20)
                {
                  char v101 = v92;
                  uint64_t v102 = v91;
                  uint64_t v103 = v81 & 0xFFFFFFE0;
                  do
                  {
                    long long v17 = *(v101 - 1);
                    long long v18 = *v101;
                    *(v102 - 1) = v17;
                    *uint64_t v102 = v18;
                    v102 += 2;
                    v101 += 2;
                    v103 -= 32;
                  }
                  while (v103);
                  if (v89 == v81) {
                    goto LABEL_96;
                  }
                  uint64_t v100 = v81 & 0xFFFFFFE0;
                  if ((v81 & 0x18) == 0)
                  {
                    v95 += v89;
                    v96 += v89;
                    int v97 = v81 & 0xFFFFFFE0;
                    goto LABEL_100;
                  }
                }
                else
                {
                  uint64_t v100 = 0;
                }
                v96 += v90;
                uint64_t v104 = v100 - (v81 & 0xFFFFFFF8);
                uint64_t v105 = (uint64_t *)(v94 + v100);
                long long v106 = &v93[v100];
                do
                {
                  uint64_t v107 = *v105++;
                  *(void *)&long long v17 = v107;
                  *v106++ = v107;
                  v104 += 8;
                }
                while (v104);
                if (v90 == v81) {
                  goto LABEL_96;
                }
                v95 += v90;
                int v97 = v81 & 0xFFFFFFF8;
LABEL_100:
                int v98 = v81 - v97;
                do
                {
                  char v99 = *v95++;
                  *v96++ = v99;
                  --v98;
                }
                while (v98);
LABEL_96:
                ++v82;
                v91 += 32;
                uint64_t v92 = (long long *)((char *)v92 + v88);
                v94 += v88;
                v93 += 32;
              }
              while (v82 != v80);
            }
          }
          uint64_t v108 = 0;
          unint64_t v109 = (unint64_t)v143;
          uint64_t v110 = v144;
          int v111 = v151;
          int v112 = v152;
          int v113 = *(_DWORD *)(*(void *)(v140 + 208) + 52);
          do
          {
            uint64_t v114 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)2,1u>::kSubblockPositions[v108 + 1];
            uint64_t v115 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)2,1u>::kSubblockPositions[v108];
            unsigned int v116 = (v111 - 8 * v115) & ~((v111 - 8 * (int)v115) >> 31);
            if (v116 >= 8) {
              unsigned int v116 = 8;
            }
            unsigned int v117 = (v112 - 4 * v114) & ~((v112 - 4 * (int)v114) >> 31);
            if (v117 >= 4) {
              unsigned int v117 = 4;
            }
            if (v116) {
              BOOL v118 = v117 == 0;
            }
            else {
              BOOL v118 = 1;
            }
            if (v118) {
              *uint64_t v110 = 0;
            }
            else {
              v109 += AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::compressSubblock(v109, v110, (int16x4_t *)&__dst[128 * v114 + 1024 + 8 * v115], 32, v116, v117, v113, *(double *)&v17, *(double *)&v18, v19, v20, v21, v22, v23);
            }
            ++v110;
            v108 += 2;
          }
          while (v108 != 64);
          a7 = v129;
          uint64_t v16 = v140;
          int16x4_t v66 = __src;
LABEL_127:
          uint64_t result = (uint64_t)v138;
          if (v141) {
            uint64_t result = (uint64_t)memcpy(v138, v66, 0x400uLL);
          }
          unint64_t v35 = v139;
        }
        while (v139 != (v130 >> 5) + 1);
        ++v24;
      }
      while (v24 != v119);
    }
  }
  return result;
}

uint64_t AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)1,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)2,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)3>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10, uint64_t a11, char a12)
{
  uint64_t v12 = MEMORY[0x270FA5388](a1);
  unsigned int v14 = v13;
  unsigned int v16 = v15;
  int v18 = v17;
  int v20 = v19;
  uint64_t v147 = v21;
  uint64_t v148 = v22;
  uint64_t v141 = v23;
  uint64_t v24 = v12;
  uint64_t v170 = *MEMORY[0x263EF8340];
  size_t v25 = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(v12, 0);
  uint64_t v34 = v24;
  uint64_t v154 = v24;
  size_t v140 = v25;
  unsigned int v151 = v14;
  uint64_t v35 = v14 >> 5;
  unsigned int v139 = v14 + a10 - 1;
  unsigned int v36 = v139 >> 5;
  uint64_t result = *(void *)(v34 + 168);
  if (result)
  {
    uint64_t result = IOSurfaceGetCacheMode();
    int v38 = result & 0xF00;
  }
  else
  {
    int v38 = 0;
  }
  BOOL v39 = (v38 & 0xD00) == 0 || v38 == 768;
  int v40 = v38 & 0xE00;
  int v42 = !v39 && v40 != 1024;
  int v157 = v42;
  if (v35 <= v36)
  {
    unsigned int v146 = v16 + a9 - 1;
    if (v16 >> 5 <= v146 >> 5)
    {
      uint64_t v153 = (v20 - 1) >> 5;
      uint64_t v138 = (v18 - 1) >> 5;
      uint64_t v43 = v154;
      int v152 = ((v20 - 1) & 0x1F) + 1;
      int v137 = ((v18 - 1) & 0x1F) + 1;
      unint64_t v144 = v16;
      uint64_t v135 = v36 + 1;
      unint64_t v136 = (unint64_t)v16 >> 5;
      unsigned int v145 = v16;
      do
      {
        unsigned int v44 = (32 * v35) | 0x1F;
        if (32 * (int)v35 <= v151) {
          unsigned int v45 = v151;
        }
        else {
          unsigned int v45 = 32 * v35;
        }
        if (v139 < v44) {
          unsigned int v44 = v139;
        }
        unsigned int v143 = v45 - 32 * v35;
        int v150 = v44 - v45 + 1;
        if (v35 == v138) {
          unsigned int v46 = v137;
        }
        else {
          unsigned int v46 = 32;
        }
        uint64_t v149 = v141 + (v45 - v151) * a11;
        unint64_t v47 = v136;
        do
        {
          unint64_t v48 = 32 * v47;
          unint64_t v156 = v47 + 1;
          unsigned int v49 = 32 * (v47 + 1) - 1;
          if (32 * (int)v47 <= v16) {
            unsigned int v50 = v16;
          }
          else {
            unsigned int v50 = 32 * v47;
          }
          if (v146 < v49) {
            unsigned int v49 = v146;
          }
          int v51 = v49 - v50 + 1;
          if (v47 == v153) {
            unsigned int v52 = v152;
          }
          else {
            unsigned int v52 = 32;
          }
          BOOL v53 = 1;
          if (32 * (int)v35 >= v151 && v48 >= v144)
          {
            int v54 = v152;
            if (v47 != v153) {
              int v54 = 32;
            }
            BOOL v53 = v51 != v54 || v150 != v46;
          }
          unsigned int v56 = *(_DWORD *)(v43 + 128) >> (*(unsigned char *)(v43 + 144) + a12);
          if (v56 <= 1) {
            unsigned int v56 = 1;
          }
          unsigned int v57 = v56 + 31;
          if (v57 < 0x40) {
            unsigned int v58 = 0;
          }
          else {
            unsigned int v58 = 32 - __clz(~(-1 << -(char)__clz((v57 >> 5) - 1)));
          }
          unsigned int v59 = *(_DWORD *)(v43 + 132) >> (*(unsigned char *)(v43 + 144) + a12);
          if (v59 <= 1) {
            unsigned int v59 = 1;
          }
          unsigned int v60 = v59 + 31;
          if (v60 < 0x40)
          {
            unsigned int v61 = 0;
            if (!v58)
            {
LABEL_65:
              uint64_t v63 = 0;
              goto LABEL_66;
            }
          }
          else
          {
            unsigned int v61 = 32 - __clz(~(-1 << -(char)__clz((v60 >> 5) - 1)));
            if (!(v61 | v58)) {
              goto LABEL_65;
            }
          }
          int v62 = 0;
          uint64_t v63 = 0;
          BOOL v64 = v58 != 0;
          BOOL v65 = v61 != 0;
          int v66 = 1;
          do
          {
            --v58;
            if (v64) {
              v63 |= (unint64_t)(v66 & v47) << v62++;
            }
            else {
              unsigned int v58 = 0;
            }
            --v61;
            if (v65) {
              v63 |= (unint64_t)(v66 & v35) << v62++;
            }
            else {
              unsigned int v61 = 0;
            }
            v66 *= 2;
            --v62;
            BOOL v65 = v61 != 0;
            BOOL v64 = v58 != 0;
          }
          while (v61 | v58);
LABEL_66:
          size_t v67 = v35 * v140 + (v47 << 11);
          int v68 = v52 < 0x20 || v53;
          int16x4_t v69 = (char *)(v148 + 32 * v63);
          uint64_t v70 = v149 + 2 * (v50 - v16);
          uint64_t v71 = (int32x4_t *)(v147 + v67);
          if (v46 < 0x20) {
            int v72 = 1;
          }
          else {
            int v72 = v68;
          }
          uint64_t v155 = v71;
          if (v157)
          {
            if (!v72)
            {
              BOOL v75 = (int32x4_t *)__dst;
LABEL_79:
              uint64_t v79 = 0;
              uint64_t v80 = v75;
              unint64_t v81 = (unint64_t)v75;
              do
              {
                uint64_t v82 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)2,1u>::kSubblockPositions[v79 + 1];
                uint64_t v83 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)2,1u>::kSubblockPositions[v79];
                unsigned int v84 = (v52 - 8 * v83) & ~((int)(v52 - 8 * v83) >> 31);
                if (v84 >= 8) {
                  unsigned int v84 = 8;
                }
                unsigned int v85 = (v46 - 4 * v82) & ~((int)(v46 - 4 * v82) >> 31);
                if (v85 >= 4) {
                  unsigned int v85 = 4;
                }
                if (v84) {
                  BOOL v86 = v85 == 0;
                }
                else {
                  BOOL v86 = 1;
                }
                if (v86) {
                  *int16x4_t v69 = 0;
                }
                else {
                  v81 += AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)1,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)2,(AGXTextureFootprint)0>::compressSubblock(v81, v69, (int32x4_t *)(v70 + 4 * a11 * v82 + 16 * v83), a11, v84, v85, *(double *)&v26, *(double *)&v27, v28, v29, v30, v31, v32, v33);
                }
                ++v69;
                v79 += 2;
              }
              while (v79 != 64);
              unsigned int v16 = v145;
              unint64_t v78 = v156;
              int v77 = v80;
              goto LABEL_142;
            }
            int v73 = v51;
            unsigned int v74 = v50;
            memcpy(__dst, v71, 0x800uLL);
            unsigned int v50 = v74;
            int v51 = v73;
            BOOL v75 = (int32x4_t *)__dst;
          }
          else
          {
            BOOL v75 = v71;
            if (!v72) {
              goto LABEL_79;
            }
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE1ELj1ELh0ELNS7_13SubblockOrderE2EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder3EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = v154;
          unsigned int v159 = v75;
          unsigned __int8 v167 = v52;
          unsigned __int8 v168 = v46;
          unsigned int v163 = v143;
          unsigned int v164 = v50 - v48;
          unsigned int v160 = v69;
          uint64_t v161 = v70;
          uint64_t v162 = a11;
          unsigned int v165 = v150;
          unsigned int v166 = v51;
          if (v53)
          {
            uint64_t v76 = v75;
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(v154 + 8) + 7384), block);
            int v77 = v76;
            unsigned int v16 = v145;
            unint64_t v78 = v156;
            goto LABEL_142;
          }
          uint64_t v87 = 0;
          __src = v75;
          uint64_t v88 = v75;
          do
          {
            int v89 = *v69++;
            uint64_t v88 = (int32x4_t *)((char *)v88
                              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)1,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)2,(AGXTextureFootprint)0>::decompressSubblock((int32x4_t *)&__dst[256* (unint64_t)AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)2,1u>::kSubblockPositions[v87 + 1]+ 2048+ 16* AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)2,1u>::kSubblockPositions[v87]], 64, v88, v89, *(double *)&v26, *(double *)&v27, v28, *(int8x8_t *)&v29));
            v87 += 2;
          }
          while (v87 != 64);
          uint64_t v90 = v165;
          if (v165 && v166)
          {
            uint64_t v91 = 0;
            unint64_t v92 = (unint64_t)v163 << 6;
            uint64_t v93 = 2 * v164;
            uint64_t v94 = &__dst[v92 + 2048 + v93];
            uint64_t v95 = v161;
            uint64_t v96 = v162;
            unint64_t v97 = 2 * v166;
            if (v97 <= 1) {
              unint64_t v98 = 1;
            }
            else {
              unint64_t v98 = 2 * v166;
            }
            unint64_t v99 = v92 + v93;
            uint64_t v100 = &__dst[v92 + 2048 + v93];
            if (v98) {
              BOOL v101 = (v98 - 1) >> 32 == 0;
            }
            else {
              BOOL v101 = 0;
            }
            uint64_t v102 = v98 & 0x1FFFFFFE0;
            uint64_t v103 = v98 & 0x1FFFFFFF8;
            char v105 = !v101 || v98 < 8;
            long long v106 = &__dst[v99 + 2064];
            uint64_t v107 = (long long *)(v161 + 16);
            uint64_t v108 = v94;
            uint64_t v109 = v161;
            do
            {
              uint64_t v110 = (char *)(v95 + v96 * v91);
              int v111 = &v94[64 * v91];
              if ((unint64_t)(&v100[64 * v91] - v110) < 0x20) {
                char v112 = 1;
              }
              else {
                char v112 = v105;
              }
              if (v112)
              {
                int v113 = 0;
                goto LABEL_126;
              }
              if (v98 >= 0x20)
              {
                uint64_t v115 = v107;
                unsigned int v116 = v106;
                uint64_t v117 = v98 & 0x1FFFFFFE0;
                do
                {
                  long long v26 = *(v115 - 1);
                  long long v27 = *v115;
                  *(v116 - 1) = v26;
                  *unsigned int v116 = v27;
                  v116 += 2;
                  v115 += 2;
                  v117 -= 32;
                }
                while (v117);
                if (v98 == v102) {
                  goto LABEL_109;
                }
                uint64_t v114 = v98 & 0x1FFFFFFE0;
                if ((v98 & 0x18) == 0)
                {
                  v110 += v102;
                  v111 += v102;
                  int v113 = v98 & 0xFFFFFFE0;
                  goto LABEL_126;
                }
              }
              else
              {
                uint64_t v114 = 0;
              }
              v111 += v103;
              uint64_t v118 = v114 - v103;
              uint64_t v119 = (uint64_t *)(v109 + v114);
              unint64_t v120 = &v108[v114];
              do
              {
                uint64_t v121 = *v119++;
                *(void *)&long long v26 = v121;
                *v120++ = v121;
                v118 += 8;
              }
              while (v118);
              if (v98 == v103) {
                goto LABEL_109;
              }
              v110 += v103;
              int v113 = v98 & 0xFFFFFFF8;
LABEL_126:
              unsigned int v122 = v113 + 1;
              do
              {
                char v123 = *v110++;
                *v111++ = v123;
              }
              while (v97 > v122++);
LABEL_109:
              ++v91;
              v106 += 64;
              uint64_t v107 = (long long *)((char *)v107 + v96);
              v109 += v96;
              v108 += 64;
            }
            while (v91 != v90);
          }
          uint64_t v125 = 0;
          unint64_t v126 = (unint64_t)v159;
          unsigned int v127 = v160;
          int v128 = v167;
          int v129 = v168;
          do
          {
            uint64_t v130 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)2,1u>::kSubblockPositions[v125 + 1];
            uint64_t v131 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)2,1u>::kSubblockPositions[v125];
            unsigned int v132 = (v128 - 8 * v131) & ~((v128 - 8 * (int)v131) >> 31);
            if (v132 >= 8) {
              unsigned int v132 = 8;
            }
            unsigned int v133 = (v129 - 4 * v130) & ~((v129 - 4 * (int)v130) >> 31);
            if (v133 >= 4) {
              unsigned int v133 = 4;
            }
            if (v132) {
              BOOL v134 = v133 == 0;
            }
            else {
              BOOL v134 = 1;
            }
            if (v134) {
              *unsigned int v127 = 0;
            }
            else {
              v126 += AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)1,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)2,(AGXTextureFootprint)0>::compressSubblock(v126, v127, (int32x4_t *)&__dst[256 * v130 + 2048 + 16 * v131], 64, v132, v133, *(double *)&v26, *(double *)&v27, v28, v29, v30, v31, v32, v33);
            }
            ++v127;
            v125 += 2;
          }
          while (v125 != 64);
          unsigned int v16 = v145;
          unint64_t v78 = v156;
          int v77 = __src;
LABEL_142:
          uint64_t result = (uint64_t)v155;
          if (v157) {
            uint64_t result = (uint64_t)memcpy(v155, v77, 0x800uLL);
          }
          unint64_t v47 = v78;
          uint64_t v43 = v154;
        }
        while (v78 != (v146 >> 5) + 1);
        ++v35;
      }
      while (v35 != v135);
    }
  }
  return result;
}

uint64_t AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)1,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)2,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)3>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10, uint64_t a11, char a12)
{
  uint64_t v12 = MEMORY[0x270FA5388](a1);
  unsigned int v14 = v13;
  unsigned int v156 = v15;
  int v17 = v16;
  int v19 = v18;
  uint64_t v146 = v20;
  uint64_t v147 = v21;
  uint64_t v140 = v22;
  uint64_t v23 = v12;
  uint64_t v169 = *MEMORY[0x263EF8340];
  size_t v139 = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(v12, 0);
  unsigned int v150 = v14;
  uint64_t v28 = v14 >> 5;
  unsigned int v138 = v14 + a10 - 1;
  unsigned int v29 = v138 >> 5;
  uint64_t v151 = v23;
  if (*(void *)(v23 + 168)) {
    int v30 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v30 = 0;
  }
  BOOL v31 = (v30 & 0xD00) == 0 || v30 == 768;
  int v32 = v30 & 0xE00;
  int v34 = !v31 && v32 != 1024;
  int v155 = v34;
  uint64_t result = v23;
  if (v28 <= v29)
  {
    unsigned int v145 = v156 + a9 - 1;
    if (v156 >> 5 <= v145 >> 5)
    {
      uint64_t v153 = (v19 - 1) >> 5;
      uint64_t v137 = (v17 - 1) >> 5;
      int v152 = ((v19 - 1) & 0x1F) + 1;
      int v136 = ((v17 - 1) & 0x1F) + 1;
      uint64_t v135 = v29 + 1;
      uint64_t v36 = 2 * a11;
      do
      {
        unsigned int v37 = (32 * v28) | 0x1F;
        if (32 * (int)v28 <= v150) {
          unsigned int v38 = v150;
        }
        else {
          unsigned int v38 = 32 * v28;
        }
        if (v138 < v37) {
          unsigned int v37 = v138;
        }
        unsigned int v144 = v38 - 32 * v28;
        int v149 = v37 - v38 + 1;
        if (v28 == v137) {
          unsigned int v39 = v136;
        }
        else {
          unsigned int v39 = 32;
        }
        uint64_t v148 = v140 + (v38 - v150) * a11;
        unint64_t v40 = (unint64_t)v156 >> 5;
        do
        {
          unint64_t v41 = 32 * v40;
          unsigned int v42 = 32 * (v40 + 1) - 1;
          if (32 * (int)v40 <= v156) {
            unsigned int v43 = v156;
          }
          else {
            unsigned int v43 = 32 * v40;
          }
          if (v145 < v42) {
            unsigned int v42 = v156 + a9 - 1;
          }
          int v44 = v42 - v43 + 1;
          if (v40 == v153) {
            unsigned int v45 = v152;
          }
          else {
            unsigned int v45 = 32;
          }
          BOOL v46 = 1;
          unint64_t v154 = v40 + 1;
          if (32 * (int)v28 >= v150 && v41 >= v156)
          {
            int v47 = v152;
            if (v40 != v153) {
              int v47 = 32;
            }
            BOOL v46 = v44 != v47 || v149 != v39;
          }
          unsigned int v49 = *(_DWORD *)(result + 128) >> (*(unsigned char *)(result + 144) + a12);
          if (v49 <= 1) {
            unsigned int v49 = 1;
          }
          unsigned int v50 = v49 + 31;
          if (v50 < 0x40) {
            unsigned int v51 = 0;
          }
          else {
            unsigned int v51 = 32 - __clz(~(-1 << -(char)__clz((v50 >> 5) - 1)));
          }
          unsigned int v52 = *(_DWORD *)(result + 132) >> (*(unsigned char *)(result + 144) + a12);
          if (v52 <= 1) {
            unsigned int v52 = 1;
          }
          unsigned int v53 = v52 + 31;
          if (v53 < 0x40)
          {
            unsigned int v54 = 0;
            if (!v51)
            {
LABEL_65:
              uint64_t v56 = 0;
              goto LABEL_66;
            }
          }
          else
          {
            unsigned int v54 = 32 - __clz(~(-1 << -(char)__clz((v53 >> 5) - 1)));
            if (!(v54 | v51)) {
              goto LABEL_65;
            }
          }
          int v55 = 0;
          uint64_t v56 = 0;
          BOOL v57 = v51 != 0;
          BOOL v58 = v54 != 0;
          int v59 = 1;
          do
          {
            --v51;
            if (v57) {
              v56 |= (unint64_t)(v59 & v40) << v55++;
            }
            else {
              unsigned int v51 = 0;
            }
            --v54;
            if (v58) {
              v56 |= (unint64_t)(v59 & v28) << v55++;
            }
            else {
              unsigned int v54 = 0;
            }
            v59 *= 2;
            --v55;
            BOOL v58 = v54 != 0;
            BOOL v57 = v51 != 0;
          }
          while (v54 | v51);
LABEL_66:
          size_t v60 = v28 * v139 + (v40 << 11);
          int v61 = v45 < 0x20 || v46;
          int v62 = (char *)(v147 + 32 * v56);
          uint64_t v63 = (int32x4_t *)(v148 + 2 * (v43 - v156));
          BOOL v64 = (int32x4_t *)(v146 + v60);
          if (v39 < 0x20) {
            int v65 = 1;
          }
          else {
            int v65 = v61;
          }
          if (v155)
          {
            if (!v65)
            {
              int v68 = (int32x4_t *)__dst;
LABEL_80:
              uint64_t v71 = 0;
              int v72 = (float *)v68;
              do
              {
                uint64_t v78 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)2,1u>::kSubblockPositions[v71 + 1];
                uint64_t v79 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)2,1u>::kSubblockPositions[v71];
                unsigned int v80 = (v45 - 8 * v79) & ~((int)(v45 - 8 * v79) >> 31);
                if (v80 >= 8) {
                  unsigned int v80 = 8;
                }
                unsigned int v81 = (v39 - 4 * v78) & ~((int)(v39 - 4 * v78) >> 31);
                if (v81 >= 4) {
                  unsigned int v81 = 4;
                }
                if (v80) {
                  BOOL v82 = v81 == 0;
                }
                else {
                  BOOL v82 = 1;
                }
                if (v82)
                {
                  char v77 = 0;
                }
                else
                {
                  int v73 = (float32x2x2_t *)&v63[v79].i8[4 * a11 * v78];
                  float32x2x2_t v24 = *v73;
                  int32x4_t v25 = *(int32x4_t *)((char *)v73 + a11);
                  unsigned int v74 = (int32x4_t *)((char *)v73 + v36);
                  float32x2x2_t v26 = (float32x2x2_t)*v74;
                  float32x2x2_t v27 = *(float32x2x2_t *)((char *)v74 + a11);
                  int32x4_t v75 = vzip2q_s32(*v74, (int32x4_t)v27);
                  uint64_t v76 = v72;
                  vst2_f32(v76, v24);
                  v76 += 4;
                  vst2_f32(v76, v26);
                  *((int32x4_t *)v72 + 2) = vzip2q_s32((int32x4_t)v24, v25);
                  *((int32x4_t *)v72 + 3) = v75;
                  v72 += 16;
                  char v77 = 63;
                }
                *v62++ = v77;
                v71 += 2;
              }
              while (v71 != 64);
              if (v155) {
                goto LABEL_144;
              }
              goto LABEL_27;
            }
            int v66 = v64;
            int v142 = v44;
            int v141 = v41;
            unsigned int v67 = v43;
            memcpy(__dst, v64, 0x800uLL);
            unsigned int v43 = v67;
            LODWORD(v41) = v141;
            int v44 = v142;
            int v68 = (int32x4_t *)__dst;
            BOOL v64 = v66;
            uint64_t result = v151;
          }
          else
          {
            int v68 = v64;
            if (!v65) {
              goto LABEL_80;
            }
          }
          int16x4_t v69 = v64;
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE1ELj1ELh1ELNS7_13SubblockOrderE2EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder3EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = result;
          unsigned int v158 = v68;
          unsigned __int8 v166 = v45;
          unsigned __int8 v167 = v39;
          unsigned int v162 = v144;
          unsigned int v163 = v43 - v41;
          unsigned int v159 = v62;
          unsigned int v160 = v63;
          uint64_t v161 = a11;
          unsigned int v164 = v149;
          unsigned int v165 = v44;
          if (v46)
          {
            uint64_t v70 = v68;
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(result + 8) + 7384), block);
            int v68 = v70;
            uint64_t result = v151;
            uint64_t v36 = 2 * a11;
            BOOL v64 = v69;
            if (!v155) {
              goto LABEL_27;
            }
LABEL_144:
            memcpy(v64, v68, 0x800uLL);
            uint64_t v36 = 2 * a11;
            uint64_t result = v151;
            goto LABEL_27;
          }
          uint64_t v83 = 0;
          unsigned int v143 = v68;
          unsigned int v84 = v68;
          do
          {
            int v85 = *v62++;
            unsigned int v84 = (int32x4_t *)((char *)v84
                              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)1,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)2,(AGXTextureFootprint)0>::decompressSubblock((int32x4_t *)&__dst[256* (unint64_t)AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)2,1u>::kSubblockPositions[v83 + 1]+ 2048+ 16* AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)2,1u>::kSubblockPositions[v83]], 64, v84, v85, *(double *)v24.val, *(double *)v25.i64, *(double *)v26.val, (int8x8_t)v27.val[0]));
            v83 += 2;
          }
          while (v83 != 64);
          uint64_t v86 = v164;
          if (v164 && v165)
          {
            uint64_t v87 = 0;
            unint64_t v88 = (unint64_t)v162 << 6;
            uint64_t v89 = 2 * v163;
            uint64_t v90 = &__dst[v88 + 2048 + v89];
            uint64_t v91 = v160;
            uint64_t v92 = v161;
            unint64_t v93 = 2 * v165;
            if (v93 <= 1) {
              unint64_t v94 = 1;
            }
            else {
              unint64_t v94 = 2 * v165;
            }
            unint64_t v95 = v88 + v89;
            uint64_t v96 = &__dst[v88 + 2048 + v89];
            if (v94) {
              BOOL v97 = (v94 - 1) >> 32 == 0;
            }
            else {
              BOOL v97 = 0;
            }
            uint64_t v98 = v94 & 0x1FFFFFFE0;
            uint64_t v99 = v94 & 0x1FFFFFFF8;
            char v101 = !v97 || v94 < 8;
            uint64_t v102 = (int32x4_t *)&__dst[v95 + 2064];
            uint64_t v103 = v160 + 1;
            uint64_t v104 = v90;
            char v105 = v160;
            do
            {
              long long v106 = &v91->i8[v92 * v87];
              uint64_t v107 = &v90[64 * v87];
              if ((unint64_t)(&v96[64 * v87] - v106) < 0x20) {
                char v108 = 1;
              }
              else {
                char v108 = v101;
              }
              if (v108)
              {
                int v109 = 0;
                goto LABEL_128;
              }
              if (v94 >= 0x20)
              {
                int v111 = v103;
                char v112 = v102;
                uint64_t v113 = v94 & 0x1FFFFFFE0;
                do
                {
                  float32x2x2_t v24 = (float32x2x2_t)v111[-1];
                  int32x4_t v25 = *v111;
                  v112[-1] = (int32x4_t)v24;
                  *char v112 = v25;
                  v112 += 2;
                  v111 += 2;
                  v113 -= 32;
                }
                while (v113);
                if (v94 == v98) {
                  goto LABEL_111;
                }
                uint64_t v110 = v94 & 0x1FFFFFFE0;
                if ((v94 & 0x18) == 0)
                {
                  v106 += v98;
                  v107 += v98;
                  int v109 = v94 & 0xFFFFFFE0;
                  goto LABEL_128;
                }
              }
              else
              {
                uint64_t v110 = 0;
              }
              v107 += v99;
              uint64_t v114 = v110 - v99;
              uint64_t v115 = (float32x2_t *)&v105->i8[v110];
              unsigned int v116 = (float32x2_t *)&v104[v110];
              do
              {
                float32x2_t v117 = *v115++;
                v24.val[0] = v117;
                *v116++ = v117;
                v114 += 8;
              }
              while (v114);
              if (v94 == v99) {
                goto LABEL_111;
              }
              v106 += v99;
              int v109 = v94 & 0xFFFFFFF8;
LABEL_128:
              unsigned int v118 = v109 + 1;
              do
              {
                char v119 = *v106++;
                *v107++ = v119;
              }
              while (v93 > v118++);
LABEL_111:
              ++v87;
              v102 += 4;
              uint64_t v103 = (int32x4_t *)((char *)v103 + v92);
              char v105 = (int32x4_t *)((char *)v105 + v92);
              v104 += 64;
            }
            while (v87 != v86);
          }
          uint64_t v121 = 0;
          unsigned int v122 = v158;
          char v123 = v159;
          int v124 = v166;
          int v125 = v167;
          uint64_t v36 = 2 * a11;
          BOOL v64 = v69;
          do
          {
            uint64_t v130 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)2,1u>::kSubblockPositions[v121 + 1];
            uint64_t v131 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)2,1u>::kSubblockPositions[v121];
            unsigned int v132 = (v124 - 8 * v131) & ~((v124 - 8 * (int)v131) >> 31);
            if (v132 >= 8) {
              unsigned int v132 = 8;
            }
            unsigned int v133 = (v125 - 4 * v130) & ~((v125 - 4 * (int)v130) >> 31);
            if (v133 >= 4) {
              unsigned int v133 = 4;
            }
            if (v132) {
              BOOL v134 = v133 == 0;
            }
            else {
              BOOL v134 = 1;
            }
            if (v134)
            {
              char v129 = 0;
            }
            else
            {
              unint64_t v126 = (int32x4_t *)&__dst[256 * v130 + 2048 + 16 * v131];
              float32x2x2_t v24 = (float32x2x2_t)*v126;
              int32x4_t v25 = v126[4];
              float32x2x2_t v26 = (float32x2x2_t)vzip2q_s32(*v126, v25);
              float32x2x2_t v27 = (float32x2x2_t)v126[8];
              int32x4_t v127 = v126[12];
              int v128 = (float *)v122;
              vst2_f32(v128, v24);
              v128 += 4;
              vst2_f32(v128, v27);
              v122[2] = (int32x4_t)v26;
              v122[3] = vzip2q_s32((int32x4_t)v27, v127);
              v122 += 4;
              char v129 = 63;
            }
            *v123++ = v129;
            v121 += 2;
          }
          while (v121 != 64);
          uint64_t result = v151;
          int v68 = v143;
          if (v155) {
            goto LABEL_144;
          }
LABEL_27:
          unint64_t v40 = v154;
        }
        while (v154 != (v145 >> 5) + 1);
        ++v28;
      }
      while (v28 != v135);
    }
  }
  return result;
}

uint64_t AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)1,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)2,(AGXTextureFootprint)1>,false,(AGXHardwareTextureMemoryOrder)3>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10, uint64_t a11, char a12)
{
  uint64_t v12 = MEMORY[0x270FA5388](a1);
  unsigned int v14 = v13;
  unsigned int v16 = v15;
  int v18 = v17;
  int v20 = v19;
  uint64_t v147 = v21;
  uint64_t v148 = v22;
  uint64_t v141 = v23;
  uint64_t v24 = v12;
  uint64_t v170 = *MEMORY[0x263EF8340];
  size_t v140 = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(v12, 0);
  unsigned int v151 = v14;
  uint64_t v33 = v14 >> 5;
  unsigned int v139 = v14 + a10 - 1;
  unsigned int v34 = v139 >> 5;
  uint64_t result = *(void *)(v24 + 168);
  if (result)
  {
    uint64_t result = IOSurfaceGetCacheMode();
    int v36 = result & 0xF00;
  }
  else
  {
    int v36 = 0;
  }
  BOOL v37 = (v36 & 0xD00) == 0 || v36 == 768;
  int v38 = v36 & 0xE00;
  int v40 = !v37 && v38 != 1024;
  int v157 = v40;
  if (v33 <= v34)
  {
    unsigned int v146 = v16 + a9 - 1;
    if (v16 >> 5 <= v146 >> 5)
    {
      uint64_t v153 = (v20 - 1) >> 5;
      uint64_t v138 = (v18 - 1) >> 5;
      int v152 = ((v20 - 1) & 0x1F) + 1;
      int v137 = ((v18 - 1) & 0x1F) + 1;
      unint64_t v144 = v16;
      uint64_t v135 = v34 + 1;
      unint64_t v136 = (unint64_t)v16 >> 5;
      unsigned int v145 = v16;
      uint64_t v156 = v24;
      do
      {
        unsigned int v41 = (32 * v33) | 0x1F;
        if (32 * (int)v33 <= v151) {
          unsigned int v42 = v151;
        }
        else {
          unsigned int v42 = 32 * v33;
        }
        if (v139 < v41) {
          unsigned int v41 = v139;
        }
        unsigned int v143 = v42 - 32 * v33;
        int v150 = v41 - v42 + 1;
        if (v33 == v138) {
          unsigned int v43 = v137;
        }
        else {
          unsigned int v43 = 32;
        }
        uint64_t v149 = v141 + (v42 - v151) * a11;
        unint64_t v44 = v136;
        do
        {
          unint64_t v45 = 32 * v44;
          unsigned int v46 = 32 * (v44 + 1) - 1;
          if (32 * (int)v44 <= v16) {
            unsigned int v47 = v16;
          }
          else {
            unsigned int v47 = 32 * v44;
          }
          if (v146 < v46) {
            unsigned int v46 = v146;
          }
          int v48 = v46 - v47 + 1;
          if (v44 == v153) {
            unsigned int v49 = v152;
          }
          else {
            unsigned int v49 = 32;
          }
          BOOL v50 = 1;
          if (32 * (int)v33 >= v151 && v45 >= v144)
          {
            int v51 = v152;
            if (v44 != v153) {
              int v51 = 32;
            }
            BOOL v50 = v48 != v51 || v150 != v43;
          }
          unsigned int v53 = *(_DWORD *)(v24 + 128) >> (*(unsigned char *)(v24 + 144) + a12);
          if (v53 <= 1) {
            unsigned int v53 = 1;
          }
          unsigned int v54 = v53 + 31;
          if (v54 < 0x40) {
            unsigned int v55 = 0;
          }
          else {
            unsigned int v55 = 32 - __clz(~(-1 << -(char)__clz((v54 >> 5) - 1)));
          }
          unsigned int v56 = *(_DWORD *)(v24 + 132) >> (*(unsigned char *)(v24 + 144) + a12);
          if (v56 <= 1) {
            unsigned int v56 = 1;
          }
          unsigned int v57 = v56 + 31;
          if (v57 < 0x40) {
            unsigned int v58 = 0;
          }
          else {
            unsigned int v58 = 32 - __clz(~(-1 << -(char)__clz((v57 >> 5) - 1)));
          }
          unint64_t v155 = v44 + 1;
          if (v58 | v55)
          {
            int v59 = 0;
            uint64_t v60 = 0;
            BOOL v61 = v55 != 0;
            BOOL v62 = v58 != 0;
            int v63 = 1;
            do
            {
              --v55;
              if (v61) {
                v60 |= (unint64_t)(v63 & v44) << v59++;
              }
              else {
                unsigned int v55 = 0;
              }
              --v58;
              if (v62) {
                v60 |= (unint64_t)(v63 & v33) << v59++;
              }
              else {
                unsigned int v58 = 0;
              }
              v63 *= 2;
              --v59;
              BOOL v62 = v58 != 0;
              BOOL v61 = v55 != 0;
            }
            while (v58 | v55);
          }
          else
          {
            uint64_t v60 = 0;
          }
          size_t v64 = v33 * v140 + (v44 << 10);
          int v65 = v49 < 0x20 || v50;
          int v66 = (unsigned __int8 *)(v148 + 32 * v60);
          uint64_t v67 = v149 + 2 * (v47 - v16);
          int v68 = (int32x4_t *)(v147 + v64);
          if (v43 < 0x20) {
            int v69 = 1;
          }
          else {
            int v69 = v65;
          }
          unint64_t v154 = v68;
          if (v157)
          {
            if (!v69)
            {
              int v73 = (int32x4_t *)__dst;
LABEL_78:
              uint64_t v76 = 0;
              int v77 = *(_DWORD *)(*(void *)(v156 + 208) + 52);
              uint64_t v78 = v73;
              unint64_t v79 = (unint64_t)v73;
              do
              {
                uint64_t v80 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)2,1u>::kSubblockPositions[v76 + 1];
                uint64_t v81 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)2,1u>::kSubblockPositions[v76];
                unsigned int v82 = (v49 - 8 * v81) & ~((int)(v49 - 8 * v81) >> 31);
                if (v82 >= 8) {
                  unsigned int v82 = 8;
                }
                unsigned int v83 = (v43 - 4 * v80) & ~((int)(v43 - 4 * v80) >> 31);
                if (v83 >= 4) {
                  unsigned int v83 = 4;
                }
                if (v82) {
                  BOOL v84 = v83 == 0;
                }
                else {
                  BOOL v84 = 1;
                }
                if (v84) {
                  *int v66 = 0;
                }
                else {
                  v79 += AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)1,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)2,(AGXTextureFootprint)1>::compressSubblock(v79, v66, (int32x4_t *)(v67 + 4 * a11 * v80 + 16 * v81), a11, v82, v83, v77, *(double *)&v25, *(double *)&v26, v27, v28, v29, v30, v31, v32);
                }
                ++v66;
                v76 += 2;
              }
              while (v76 != 64);
              unsigned int v16 = v145;
              uint64_t v24 = v156;
              int32x4_t v75 = v78;
              goto LABEL_141;
            }
            int v70 = v48;
            BOOL v71 = v50;
            unsigned int v72 = v47;
            memcpy(__dst, v68, 0x800uLL);
            unsigned int v47 = v72;
            BOOL v50 = v71;
            int v48 = v70;
            unsigned int v16 = v145;
            int v73 = (int32x4_t *)__dst;
          }
          else
          {
            int v73 = v68;
            if (!v69) {
              goto LABEL_78;
            }
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE1ELj1ELh0ELNS7_13SubblockOrderE2EL19AGXTextureFootprint1EEELb0EL29AGXHardwareTextureMemoryOrder3EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = v156;
          unsigned int v159 = v73;
          unsigned __int8 v167 = v49;
          unsigned __int8 v168 = v43;
          unsigned int v163 = v143;
          unsigned int v164 = v47 - v45;
          unsigned int v160 = v66;
          uint64_t v161 = v67;
          uint64_t v162 = a11;
          unsigned int v165 = v150;
          unsigned int v166 = v48;
          if (v50)
          {
            unsigned int v74 = v73;
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(v156 + 8) + 7384), block);
            int32x4_t v75 = v74;
            uint64_t v24 = v156;
            goto LABEL_141;
          }
          uint64_t v85 = 0;
          int v86 = *(_DWORD *)(*(void *)(v156 + 208) + 52);
          __src = v73;
          uint64_t v87 = v73;
          do
          {
            unsigned int v88 = *v66++;
            uint64_t v87 = (int32x4_t *)((char *)v87
                              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)1,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)2,(AGXTextureFootprint)1>::decompressSubblock((uint64_t)&__dst[256* (unint64_t)AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)2,1u>::kSubblockPositions[v85 + 1]+ 2048+ 16* AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)2,1u>::kSubblockPositions[v85]], 64, v87, v88, v86, *(double *)&v25, *(double *)&v26, v27, *(int8x8_t *)&v28));
            v85 += 2;
          }
          while (v85 != 64);
          uint64_t v89 = v165;
          if (v165 && v166)
          {
            uint64_t v90 = 0;
            unint64_t v91 = (unint64_t)v163 << 6;
            uint64_t v92 = 2 * v164;
            unint64_t v93 = &__dst[v91 + 2048 + v92];
            uint64_t v94 = v161;
            uint64_t v95 = v162;
            unint64_t v96 = 2 * v166;
            if (v96 <= 1) {
              unint64_t v97 = 1;
            }
            else {
              unint64_t v97 = 2 * v166;
            }
            unint64_t v98 = v91 + v92;
            uint64_t v99 = &__dst[v91 + 2048 + v92];
            if (v97) {
              BOOL v100 = (v97 - 1) >> 32 == 0;
            }
            else {
              BOOL v100 = 0;
            }
            uint64_t v101 = v97 & 0x1FFFFFFE0;
            uint64_t v102 = v97 & 0x1FFFFFFF8;
            char v104 = !v100 || v97 < 8;
            char v105 = &__dst[v98 + 2064];
            long long v106 = (long long *)(v161 + 16);
            uint64_t v107 = v93;
            uint64_t v108 = v161;
            do
            {
              int v109 = (char *)(v94 + v95 * v90);
              uint64_t v110 = &v93[64 * v90];
              if ((unint64_t)(&v99[64 * v90] - v109) < 0x20) {
                char v111 = 1;
              }
              else {
                char v111 = v104;
              }
              if (v111)
              {
                int v112 = 0;
                goto LABEL_125;
              }
              if (v97 >= 0x20)
              {
                uint64_t v114 = v106;
                uint64_t v115 = v105;
                uint64_t v116 = v97 & 0x1FFFFFFE0;
                do
                {
                  long long v25 = *(v114 - 1);
                  long long v26 = *v114;
                  *(v115 - 1) = v25;
                  *uint64_t v115 = v26;
                  v115 += 2;
                  v114 += 2;
                  v116 -= 32;
                }
                while (v116);
                if (v97 == v101) {
                  goto LABEL_108;
                }
                uint64_t v113 = v97 & 0x1FFFFFFE0;
                if ((v97 & 0x18) == 0)
                {
                  v109 += v101;
                  v110 += v101;
                  int v112 = v97 & 0xFFFFFFE0;
                  goto LABEL_125;
                }
              }
              else
              {
                uint64_t v113 = 0;
              }
              v110 += v102;
              uint64_t v117 = v113 - v102;
              unsigned int v118 = (uint64_t *)(v108 + v113);
              char v119 = &v107[v113];
              do
              {
                uint64_t v120 = *v118++;
                *(void *)&long long v25 = v120;
                *v119++ = v120;
                v117 += 8;
              }
              while (v117);
              if (v97 == v102) {
                goto LABEL_108;
              }
              v109 += v102;
              int v112 = v97 & 0xFFFFFFF8;
LABEL_125:
              unsigned int v121 = v112 + 1;
              do
              {
                char v122 = *v109++;
                *v110++ = v122;
              }
              while (v96 > v121++);
LABEL_108:
              ++v90;
              v105 += 64;
              long long v106 = (long long *)((char *)v106 + v95);
              v108 += v95;
              v107 += 64;
            }
            while (v90 != v89);
          }
          uint64_t v124 = 0;
          unint64_t v125 = (unint64_t)v159;
          unint64_t v126 = v160;
          int v127 = v167;
          int v128 = v168;
          int v129 = *(_DWORD *)(*(void *)(v156 + 208) + 52);
          do
          {
            uint64_t v130 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)2,1u>::kSubblockPositions[v124 + 1];
            uint64_t v131 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)2,1u>::kSubblockPositions[v124];
            unsigned int v132 = (v127 - 8 * v131) & ~((v127 - 8 * (int)v131) >> 31);
            if (v132 >= 8) {
              unsigned int v132 = 8;
            }
            unsigned int v133 = (v128 - 4 * v130) & ~((v128 - 4 * (int)v130) >> 31);
            if (v133 >= 4) {
              unsigned int v133 = 4;
            }
            if (v132) {
              BOOL v134 = v133 == 0;
            }
            else {
              BOOL v134 = 1;
            }
            if (v134) {
              *unint64_t v126 = 0;
            }
            else {
              v125 += AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)1,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)2,(AGXTextureFootprint)1>::compressSubblock(v125, v126, (int32x4_t *)&__dst[256 * v130 + 2048 + 16 * v131], 64, v132, v133, v129, *(double *)&v25, *(double *)&v26, v27, v28, v29, v30, v31, v32);
            }
            ++v126;
            v124 += 2;
          }
          while (v124 != 64);
          unsigned int v16 = v145;
          uint64_t v24 = v156;
          int32x4_t v75 = __src;
LABEL_141:
          uint64_t result = (uint64_t)v154;
          if (v157) {
            uint64_t result = (uint64_t)memcpy(v154, v75, 0x800uLL);
          }
          unint64_t v44 = v155;
        }
        while (v155 != (v146 >> 5) + 1);
        ++v33;
      }
      while (v33 != v135);
    }
  }
  return result;
}

uint64_t AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)1,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)2,(AGXTextureFootprint)2>,false,(AGXHardwareTextureMemoryOrder)3>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10, uint64_t a11, char a12)
{
  uint64_t v12 = MEMORY[0x270FA5388](a1);
  unsigned int v14 = v13;
  unsigned int v16 = v15;
  int v18 = v17;
  int v20 = v19;
  uint64_t v147 = v21;
  uint64_t v148 = v22;
  uint64_t v141 = v23;
  uint64_t v24 = v12;
  uint64_t v170 = *MEMORY[0x263EF8340];
  size_t v140 = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(v12, 0);
  unsigned int v151 = v14;
  uint64_t v33 = v14 >> 5;
  unsigned int v139 = v14 + a10 - 1;
  unsigned int v34 = v139 >> 5;
  uint64_t result = *(void *)(v24 + 168);
  if (result)
  {
    uint64_t result = IOSurfaceGetCacheMode();
    int v36 = result & 0xF00;
  }
  else
  {
    int v36 = 0;
  }
  BOOL v37 = (v36 & 0xD00) == 0 || v36 == 768;
  int v38 = v36 & 0xE00;
  int v40 = !v37 && v38 != 1024;
  int v157 = v40;
  if (v33 <= v34)
  {
    unsigned int v146 = v16 + a9 - 1;
    if (v16 >> 5 <= v146 >> 5)
    {
      uint64_t v153 = (v20 - 1) >> 5;
      uint64_t v138 = (v18 - 1) >> 5;
      int v152 = ((v20 - 1) & 0x1F) + 1;
      int v137 = ((v18 - 1) & 0x1F) + 1;
      unint64_t v144 = v16;
      uint64_t v135 = v34 + 1;
      unint64_t v136 = (unint64_t)v16 >> 5;
      unsigned int v145 = v16;
      uint64_t v156 = v24;
      do
      {
        unsigned int v41 = (32 * v33) | 0x1F;
        if (32 * (int)v33 <= v151) {
          unsigned int v42 = v151;
        }
        else {
          unsigned int v42 = 32 * v33;
        }
        if (v139 < v41) {
          unsigned int v41 = v139;
        }
        unsigned int v143 = v42 - 32 * v33;
        int v150 = v41 - v42 + 1;
        if (v33 == v138) {
          unsigned int v43 = v137;
        }
        else {
          unsigned int v43 = 32;
        }
        uint64_t v149 = v141 + (v42 - v151) * a11;
        unint64_t v44 = v136;
        do
        {
          unint64_t v45 = 32 * v44;
          unsigned int v46 = 32 * (v44 + 1) - 1;
          if (32 * (int)v44 <= v16) {
            unsigned int v47 = v16;
          }
          else {
            unsigned int v47 = 32 * v44;
          }
          if (v146 < v46) {
            unsigned int v46 = v146;
          }
          int v48 = v46 - v47 + 1;
          if (v44 == v153) {
            unsigned int v49 = v152;
          }
          else {
            unsigned int v49 = 32;
          }
          BOOL v50 = 1;
          if (32 * (int)v33 >= v151 && v45 >= v144)
          {
            int v51 = v152;
            if (v44 != v153) {
              int v51 = 32;
            }
            BOOL v50 = v48 != v51 || v150 != v43;
          }
          unsigned int v53 = *(_DWORD *)(v24 + 128) >> (*(unsigned char *)(v24 + 144) + a12);
          if (v53 <= 1) {
            unsigned int v53 = 1;
          }
          unsigned int v54 = v53 + 31;
          if (v54 < 0x40) {
            unsigned int v55 = 0;
          }
          else {
            unsigned int v55 = 32 - __clz(~(-1 << -(char)__clz((v54 >> 5) - 1)));
          }
          unsigned int v56 = *(_DWORD *)(v24 + 132) >> (*(unsigned char *)(v24 + 144) + a12);
          if (v56 <= 1) {
            unsigned int v56 = 1;
          }
          unsigned int v57 = v56 + 31;
          if (v57 < 0x40) {
            unsigned int v58 = 0;
          }
          else {
            unsigned int v58 = 32 - __clz(~(-1 << -(char)__clz((v57 >> 5) - 1)));
          }
          unint64_t v155 = v44 + 1;
          if (v58 | v55)
          {
            int v59 = 0;
            uint64_t v60 = 0;
            BOOL v61 = v55 != 0;
            BOOL v62 = v58 != 0;
            int v63 = 1;
            do
            {
              --v55;
              if (v61) {
                v60 |= (unint64_t)(v63 & v44) << v59++;
              }
              else {
                unsigned int v55 = 0;
              }
              --v58;
              if (v62) {
                v60 |= (unint64_t)(v63 & v33) << v59++;
              }
              else {
                unsigned int v58 = 0;
              }
              v63 *= 2;
              --v59;
              BOOL v62 = v58 != 0;
              BOOL v61 = v55 != 0;
            }
            while (v58 | v55);
          }
          else
          {
            uint64_t v60 = 0;
          }
          uint64_t v64 = v33 * v140 + 768 * v44;
          int v65 = v49 < 0x20 || v50;
          int v66 = (unsigned __int8 *)(v148 + 32 * v60);
          uint64_t v67 = v149 + 2 * (v47 - v16);
          int v68 = (int32x4_t *)(v147 + v64);
          if (v43 < 0x20) {
            int v69 = 1;
          }
          else {
            int v69 = v65;
          }
          unint64_t v154 = v68;
          if (v157)
          {
            if (!v69)
            {
              int v73 = (int32x4_t *)__dst;
LABEL_78:
              uint64_t v76 = 0;
              int v77 = *(_DWORD *)(*(void *)(v156 + 208) + 52);
              uint64_t v78 = v73;
              uint64_t v79 = (uint64_t)v73;
              do
              {
                uint64_t v80 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)2,1u>::kSubblockPositions[v76 + 1];
                uint64_t v81 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)2,1u>::kSubblockPositions[v76];
                unsigned int v82 = (v49 - 8 * v81) & ~((int)(v49 - 8 * v81) >> 31);
                if (v82 >= 8) {
                  unsigned int v82 = 8;
                }
                unsigned int v83 = (v43 - 4 * v80) & ~((int)(v43 - 4 * v80) >> 31);
                if (v83 >= 4) {
                  unsigned int v83 = 4;
                }
                if (v82) {
                  BOOL v84 = v83 == 0;
                }
                else {
                  BOOL v84 = 1;
                }
                if (v84) {
                  *int v66 = 0;
                }
                else {
                  v79 += AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)1,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)2,(AGXTextureFootprint)2>::compressSubblock(v79, v66, (int32x4_t *)(v67 + 4 * a11 * v80 + 16 * v81), a11, v82, v83, v77, *(double *)&v25, *(double *)&v26, v27, v28, v29, v30, v31, v32);
                }
                ++v66;
                v76 += 2;
              }
              while (v76 != 64);
              unsigned int v16 = v145;
              uint64_t v24 = v156;
              int32x4_t v75 = v78;
              goto LABEL_141;
            }
            int v70 = v48;
            BOOL v71 = v50;
            unsigned int v72 = v47;
            memcpy(__dst, v68, 0x800uLL);
            unsigned int v47 = v72;
            BOOL v50 = v71;
            int v48 = v70;
            unsigned int v16 = v145;
            int v73 = (int32x4_t *)__dst;
          }
          else
          {
            int v73 = v68;
            if (!v69) {
              goto LABEL_78;
            }
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE1ELj1ELh0ELNS7_13SubblockOrderE2EL19AGXTextureFootprint2EEELb0EL29AGXHardwareTextureMemoryOrder3EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = v156;
          unsigned int v159 = v73;
          unsigned __int8 v167 = v49;
          unsigned __int8 v168 = v43;
          unsigned int v163 = v143;
          unsigned int v164 = v47 - v45;
          unsigned int v160 = v66;
          uint64_t v161 = v67;
          uint64_t v162 = a11;
          unsigned int v165 = v150;
          unsigned int v166 = v48;
          if (v50)
          {
            unsigned int v74 = v73;
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(v156 + 8) + 7384), block);
            int32x4_t v75 = v74;
            uint64_t v24 = v156;
            goto LABEL_141;
          }
          uint64_t v85 = 0;
          int v86 = *(_DWORD *)(*(void *)(v156 + 208) + 52);
          __src = v73;
          uint64_t v87 = v73;
          do
          {
            unsigned int v88 = *v66++;
            uint64_t v87 = (int32x4_t *)((char *)v87
                              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)1,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)2,(AGXTextureFootprint)2>::decompressSubblock((uint64_t)&__dst[256* (unint64_t)AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)2,1u>::kSubblockPositions[v85 + 1]+ 2048+ 16* AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)2,1u>::kSubblockPositions[v85]], 64, v87, v88, v86, *(double *)&v25, *(double *)&v26, v27, *(int8x8_t *)&v28));
            v85 += 2;
          }
          while (v85 != 64);
          uint64_t v89 = v165;
          if (v165 && v166)
          {
            uint64_t v90 = 0;
            unint64_t v91 = (unint64_t)v163 << 6;
            uint64_t v92 = 2 * v164;
            unint64_t v93 = &__dst[v91 + 2048 + v92];
            uint64_t v94 = v161;
            uint64_t v95 = v162;
            unint64_t v96 = 2 * v166;
            if (v96 <= 1) {
              unint64_t v97 = 1;
            }
            else {
              unint64_t v97 = 2 * v166;
            }
            unint64_t v98 = v91 + v92;
            uint64_t v99 = &__dst[v91 + 2048 + v92];
            if (v97) {
              BOOL v100 = (v97 - 1) >> 32 == 0;
            }
            else {
              BOOL v100 = 0;
            }
            uint64_t v101 = v97 & 0x1FFFFFFE0;
            uint64_t v102 = v97 & 0x1FFFFFFF8;
            char v104 = !v100 || v97 < 8;
            char v105 = &__dst[v98 + 2064];
            long long v106 = (long long *)(v161 + 16);
            uint64_t v107 = v93;
            uint64_t v108 = v161;
            do
            {
              int v109 = (char *)(v94 + v95 * v90);
              uint64_t v110 = &v93[64 * v90];
              if ((unint64_t)(&v99[64 * v90] - v109) < 0x20) {
                char v111 = 1;
              }
              else {
                char v111 = v104;
              }
              if (v111)
              {
                int v112 = 0;
                goto LABEL_125;
              }
              if (v97 >= 0x20)
              {
                uint64_t v114 = v106;
                uint64_t v115 = v105;
                uint64_t v116 = v97 & 0x1FFFFFFE0;
                do
                {
                  long long v25 = *(v114 - 1);
                  long long v26 = *v114;
                  *(v115 - 1) = v25;
                  *uint64_t v115 = v26;
                  v115 += 2;
                  v114 += 2;
                  v116 -= 32;
                }
                while (v116);
                if (v97 == v101) {
                  goto LABEL_108;
                }
                uint64_t v113 = v97 & 0x1FFFFFFE0;
                if ((v97 & 0x18) == 0)
                {
                  v109 += v101;
                  v110 += v101;
                  int v112 = v97 & 0xFFFFFFE0;
                  goto LABEL_125;
                }
              }
              else
              {
                uint64_t v113 = 0;
              }
              v110 += v102;
              uint64_t v117 = v113 - v102;
              unsigned int v118 = (uint64_t *)(v108 + v113);
              char v119 = &v107[v113];
              do
              {
                uint64_t v120 = *v118++;
                *(void *)&long long v25 = v120;
                *v119++ = v120;
                v117 += 8;
              }
              while (v117);
              if (v97 == v102) {
                goto LABEL_108;
              }
              v109 += v102;
              int v112 = v97 & 0xFFFFFFF8;
LABEL_125:
              unsigned int v121 = v112 + 1;
              do
              {
                char v122 = *v109++;
                *v110++ = v122;
              }
              while (v96 > v121++);
LABEL_108:
              ++v90;
              v105 += 64;
              long long v106 = (long long *)((char *)v106 + v95);
              v108 += v95;
              v107 += 64;
            }
            while (v90 != v89);
          }
          uint64_t v124 = 0;
          uint64_t v125 = (uint64_t)v159;
          unint64_t v126 = v160;
          int v127 = v167;
          int v128 = v168;
          int v129 = *(_DWORD *)(*(void *)(v156 + 208) + 52);
          do
          {
            uint64_t v130 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)2,1u>::kSubblockPositions[v124 + 1];
            uint64_t v131 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)2,1u>::kSubblockPositions[v124];
            unsigned int v132 = (v127 - 8 * v131) & ~((v127 - 8 * (int)v131) >> 31);
            if (v132 >= 8) {
              unsigned int v132 = 8;
            }
            unsigned int v133 = (v128 - 4 * v130) & ~((v128 - 4 * (int)v130) >> 31);
            if (v133 >= 4) {
              unsigned int v133 = 4;
            }
            if (v132) {
              BOOL v134 = v133 == 0;
            }
            else {
              BOOL v134 = 1;
            }
            if (v134) {
              *unint64_t v126 = 0;
            }
            else {
              v125 += AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)1,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)2,(AGXTextureFootprint)2>::compressSubblock(v125, v126, (int32x4_t *)&__dst[256 * v130 + 2048 + 16 * v131], 64, v132, v133, v129, *(double *)&v25, *(double *)&v26, v27, v28, v29, v30, v31, v32);
            }
            ++v126;
            v124 += 2;
          }
          while (v124 != 64);
          unsigned int v16 = v145;
          uint64_t v24 = v156;
          int32x4_t v75 = __src;
LABEL_141:
          uint64_t result = (uint64_t)v154;
          if (v157) {
            uint64_t result = (uint64_t)memcpy(v154, v75, 0x800uLL);
          }
          unint64_t v44 = v155;
        }
        while (v155 != (v146 >> 5) + 1);
        ++v33;
      }
      while (v33 != v135);
    }
  }
  return result;
}

uint64_t AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)1,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)2,(AGXTextureFootprint)3>,false,(AGXHardwareTextureMemoryOrder)3>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10, uint64_t a11, char a12)
{
  uint64_t v12 = MEMORY[0x270FA5388](a1);
  unsigned int v14 = v13;
  unsigned int v16 = v15;
  int v18 = v17;
  int v20 = v19;
  uint64_t v147 = v21;
  uint64_t v148 = v22;
  uint64_t v141 = v23;
  uint64_t v24 = v12;
  uint64_t v170 = *MEMORY[0x263EF8340];
  size_t v140 = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(v12, 0);
  unsigned int v151 = v14;
  uint64_t v33 = v14 >> 5;
  unsigned int v139 = v14 + a10 - 1;
  unsigned int v34 = v139 >> 5;
  uint64_t result = *(void *)(v24 + 168);
  if (result)
  {
    uint64_t result = IOSurfaceGetCacheMode();
    int v36 = result & 0xF00;
  }
  else
  {
    int v36 = 0;
  }
  BOOL v37 = (v36 & 0xD00) == 0 || v36 == 768;
  int v38 = v36 & 0xE00;
  int v40 = !v37 && v38 != 1024;
  int v157 = v40;
  if (v33 <= v34)
  {
    unsigned int v146 = v16 + a9 - 1;
    if (v16 >> 5 <= v146 >> 5)
    {
      uint64_t v153 = (v20 - 1) >> 5;
      uint64_t v138 = (v18 - 1) >> 5;
      int v152 = ((v20 - 1) & 0x1F) + 1;
      int v137 = ((v18 - 1) & 0x1F) + 1;
      unint64_t v144 = v16;
      uint64_t v135 = v34 + 1;
      unint64_t v136 = (unint64_t)v16 >> 5;
      unsigned int v145 = v16;
      uint64_t v156 = v24;
      do
      {
        unsigned int v41 = (32 * v33) | 0x1F;
        if (32 * (int)v33 <= v151) {
          unsigned int v42 = v151;
        }
        else {
          unsigned int v42 = 32 * v33;
        }
        if (v139 < v41) {
          unsigned int v41 = v139;
        }
        unsigned int v143 = v42 - 32 * v33;
        int v150 = v41 - v42 + 1;
        if (v33 == v138) {
          unsigned int v43 = v137;
        }
        else {
          unsigned int v43 = 32;
        }
        uint64_t v149 = v141 + (v42 - v151) * a11;
        unint64_t v44 = v136;
        do
        {
          unint64_t v45 = 32 * v44;
          unsigned int v46 = 32 * (v44 + 1) - 1;
          if (32 * (int)v44 <= v16) {
            unsigned int v47 = v16;
          }
          else {
            unsigned int v47 = 32 * v44;
          }
          if (v146 < v46) {
            unsigned int v46 = v146;
          }
          int v48 = v46 - v47 + 1;
          if (v44 == v153) {
            unsigned int v49 = v152;
          }
          else {
            unsigned int v49 = 32;
          }
          BOOL v50 = 1;
          if (32 * (int)v33 >= v151 && v45 >= v144)
          {
            int v51 = v152;
            if (v44 != v153) {
              int v51 = 32;
            }
            BOOL v50 = v48 != v51 || v150 != v43;
          }
          unsigned int v53 = *(_DWORD *)(v24 + 128) >> (*(unsigned char *)(v24 + 144) + a12);
          if (v53 <= 1) {
            unsigned int v53 = 1;
          }
          unsigned int v54 = v53 + 31;
          if (v54 < 0x40) {
            unsigned int v55 = 0;
          }
          else {
            unsigned int v55 = 32 - __clz(~(-1 << -(char)__clz((v54 >> 5) - 1)));
          }
          unsigned int v56 = *(_DWORD *)(v24 + 132) >> (*(unsigned char *)(v24 + 144) + a12);
          if (v56 <= 1) {
            unsigned int v56 = 1;
          }
          unsigned int v57 = v56 + 31;
          if (v57 < 0x40) {
            unsigned int v58 = 0;
          }
          else {
            unsigned int v58 = 32 - __clz(~(-1 << -(char)__clz((v57 >> 5) - 1)));
          }
          unint64_t v155 = v44 + 1;
          if (v58 | v55)
          {
            int v59 = 0;
            uint64_t v60 = 0;
            BOOL v61 = v55 != 0;
            BOOL v62 = v58 != 0;
            int v63 = 1;
            do
            {
              --v55;
              if (v61) {
                v60 |= (unint64_t)(v63 & v44) << v59++;
              }
              else {
                unsigned int v55 = 0;
              }
              --v58;
              if (v62) {
                v60 |= (unint64_t)(v63 & v33) << v59++;
              }
              else {
                unsigned int v58 = 0;
              }
              v63 *= 2;
              --v59;
              BOOL v62 = v58 != 0;
              BOOL v61 = v55 != 0;
            }
            while (v58 | v55);
          }
          else
          {
            uint64_t v60 = 0;
          }
          uint64_t v64 = v33 * v140 + 640 * v44;
          int v65 = v49 < 0x20 || v50;
          int v66 = (unsigned __int8 *)(v148 + 32 * v60);
          uint64_t v67 = v149 + 2 * (v47 - v16);
          int v68 = (int32x4_t *)(v147 + v64);
          if (v43 < 0x20) {
            int v69 = 1;
          }
          else {
            int v69 = v65;
          }
          unint64_t v154 = v68;
          if (v157)
          {
            if (!v69)
            {
              int v73 = (int32x4_t *)__dst;
LABEL_78:
              uint64_t v76 = 0;
              int v77 = *(_DWORD *)(*(void *)(v156 + 208) + 52);
              uint64_t v78 = v73;
              uint64_t v79 = (uint64_t)v73;
              do
              {
                uint64_t v80 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)2,1u>::kSubblockPositions[v76 + 1];
                uint64_t v81 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)2,1u>::kSubblockPositions[v76];
                unsigned int v82 = (v49 - 8 * v81) & ~((int)(v49 - 8 * v81) >> 31);
                if (v82 >= 8) {
                  unsigned int v82 = 8;
                }
                unsigned int v83 = (v43 - 4 * v80) & ~((int)(v43 - 4 * v80) >> 31);
                if (v83 >= 4) {
                  unsigned int v83 = 4;
                }
                if (v82) {
                  BOOL v84 = v83 == 0;
                }
                else {
                  BOOL v84 = 1;
                }
                if (v84) {
                  *int v66 = 0;
                }
                else {
                  v79 += AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)1,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)2,(AGXTextureFootprint)3>::compressSubblock(v79, v66, (int32x4_t *)(v67 + 4 * a11 * v80 + 16 * v81), a11, v82, v83, v77, *(double *)&v25, *(double *)&v26, v27, v28, v29, v30, v31, v32);
                }
                ++v66;
                v76 += 2;
              }
              while (v76 != 64);
              unsigned int v16 = v145;
              uint64_t v24 = v156;
              int32x4_t v75 = v78;
              goto LABEL_141;
            }
            int v70 = v48;
            BOOL v71 = v50;
            unsigned int v72 = v47;
            memcpy(__dst, v68, 0x800uLL);
            unsigned int v47 = v72;
            BOOL v50 = v71;
            int v48 = v70;
            unsigned int v16 = v145;
            int v73 = (int32x4_t *)__dst;
          }
          else
          {
            int v73 = v68;
            if (!v69) {
              goto LABEL_78;
            }
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE1ELj1ELh0ELNS7_13SubblockOrderE2EL19AGXTextureFootprint3EEELb0EL29AGXHardwareTextureMemoryOrder3EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = v156;
          unsigned int v159 = v73;
          unsigned __int8 v167 = v49;
          unsigned __int8 v168 = v43;
          unsigned int v163 = v143;
          unsigned int v164 = v47 - v45;
          unsigned int v160 = v66;
          uint64_t v161 = v67;
          uint64_t v162 = a11;
          unsigned int v165 = v150;
          unsigned int v166 = v48;
          if (v50)
          {
            unsigned int v74 = v73;
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(v156 + 8) + 7384), block);
            int32x4_t v75 = v74;
            uint64_t v24 = v156;
            goto LABEL_141;
          }
          uint64_t v85 = 0;
          int v86 = *(_DWORD *)(*(void *)(v156 + 208) + 52);
          __src = v73;
          uint64_t v87 = v73;
          do
          {
            unsigned int v88 = *v66++;
            uint64_t v87 = (int32x4_t *)((char *)v87
                              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)1,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)2,(AGXTextureFootprint)3>::decompressSubblock((uint64_t)&__dst[256* (unint64_t)AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)2,1u>::kSubblockPositions[v85 + 1]+ 2048+ 16* AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)2,1u>::kSubblockPositions[v85]], 64, v87, v88, v86, *(double *)&v25, *(double *)&v26, v27, *(int8x8_t *)&v28));
            v85 += 2;
          }
          while (v85 != 64);
          uint64_t v89 = v165;
          if (v165 && v166)
          {
            uint64_t v90 = 0;
            unint64_t v91 = (unint64_t)v163 << 6;
            uint64_t v92 = 2 * v164;
            unint64_t v93 = &__dst[v91 + 2048 + v92];
            uint64_t v94 = v161;
            uint64_t v95 = v162;
            unint64_t v96 = 2 * v166;
            if (v96 <= 1) {
              unint64_t v97 = 1;
            }
            else {
              unint64_t v97 = 2 * v166;
            }
            unint64_t v98 = v91 + v92;
            uint64_t v99 = &__dst[v91 + 2048 + v92];
            if (v97) {
              BOOL v100 = (v97 - 1) >> 32 == 0;
            }
            else {
              BOOL v100 = 0;
            }
            uint64_t v101 = v97 & 0x1FFFFFFE0;
            uint64_t v102 = v97 & 0x1FFFFFFF8;
            char v104 = !v100 || v97 < 8;
            char v105 = &__dst[v98 + 2064];
            long long v106 = (long long *)(v161 + 16);
            uint64_t v107 = v93;
            uint64_t v108 = v161;
            do
            {
              int v109 = (char *)(v94 + v95 * v90);
              uint64_t v110 = &v93[64 * v90];
              if ((unint64_t)(&v99[64 * v90] - v109) < 0x20) {
                char v111 = 1;
              }
              else {
                char v111 = v104;
              }
              if (v111)
              {
                int v112 = 0;
                goto LABEL_125;
              }
              if (v97 >= 0x20)
              {
                uint64_t v114 = v106;
                uint64_t v115 = v105;
                uint64_t v116 = v97 & 0x1FFFFFFE0;
                do
                {
                  long long v25 = *(v114 - 1);
                  long long v26 = *v114;
                  *(v115 - 1) = v25;
                  *uint64_t v115 = v26;
                  v115 += 2;
                  v114 += 2;
                  v116 -= 32;
                }
                while (v116);
                if (v97 == v101) {
                  goto LABEL_108;
                }
                uint64_t v113 = v97 & 0x1FFFFFFE0;
                if ((v97 & 0x18) == 0)
                {
                  v109 += v101;
                  v110 += v101;
                  int v112 = v97 & 0xFFFFFFE0;
                  goto LABEL_125;
                }
              }
              else
              {
                uint64_t v113 = 0;
              }
              v110 += v102;
              uint64_t v117 = v113 - v102;
              unsigned int v118 = (uint64_t *)(v108 + v113);
              char v119 = &v107[v113];
              do
              {
                uint64_t v120 = *v118++;
                *(void *)&long long v25 = v120;
                *v119++ = v120;
                v117 += 8;
              }
              while (v117);
              if (v97 == v102) {
                goto LABEL_108;
              }
              v109 += v102;
              int v112 = v97 & 0xFFFFFFF8;
LABEL_125:
              unsigned int v121 = v112 + 1;
              do
              {
                char v122 = *v109++;
                *v110++ = v122;
              }
              while (v96 > v121++);
LABEL_108:
              ++v90;
              v105 += 64;
              long long v106 = (long long *)((char *)v106 + v95);
              v108 += v95;
              v107 += 64;
            }
            while (v90 != v89);
          }
          uint64_t v124 = 0;
          uint64_t v125 = (uint64_t)v159;
          unint64_t v126 = v160;
          int v127 = v167;
          int v128 = v168;
          int v129 = *(_DWORD *)(*(void *)(v156 + 208) + 52);
          do
          {
            uint64_t v130 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)2,1u>::kSubblockPositions[v124 + 1];
            uint64_t v131 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)2,1u>::kSubblockPositions[v124];
            unsigned int v132 = (v127 - 8 * v131) & ~((v127 - 8 * (int)v131) >> 31);
            if (v132 >= 8) {
              unsigned int v132 = 8;
            }
            unsigned int v133 = (v128 - 4 * v130) & ~((v128 - 4 * (int)v130) >> 31);
            if (v133 >= 4) {
              unsigned int v133 = 4;
            }
            if (v132) {
              BOOL v134 = v133 == 0;
            }
            else {
              BOOL v134 = 1;
            }
            if (v134) {
              *unint64_t v126 = 0;
            }
            else {
              v125 += AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)1,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)2,(AGXTextureFootprint)3>::compressSubblock(v125, v126, (int32x4_t *)&__dst[256 * v130 + 2048 + 16 * v131], 64, v132, v133, v129, *(double *)&v25, *(double *)&v26, v27, v28, v29, v30, v31, v32);
            }
            ++v126;
            v124 += 2;
          }
          while (v124 != 64);
          unsigned int v16 = v145;
          uint64_t v24 = v156;
          int32x4_t v75 = __src;
LABEL_141:
          uint64_t result = (uint64_t)v154;
          if (v157) {
            uint64_t result = (uint64_t)memcpy(v154, v75, 0x800uLL);
          }
          unint64_t v44 = v155;
        }
        while (v155 != (v146 >> 5) + 1);
        ++v33;
      }
      while (v33 != v135);
    }
  }
  return result;
}

uint64_t AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)2,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)3>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10, uint64_t a11, char a12)
{
  uint64_t v12 = MEMORY[0x270FA5388](a1);
  unsigned int v14 = v13;
  unsigned int v16 = v15;
  int v18 = v17;
  int v20 = v19;
  uint64_t v147 = v21;
  uint64_t v148 = v22;
  uint64_t v141 = v23;
  uint64_t v24 = v12;
  uint64_t v170 = *MEMORY[0x263EF8340];
  size_t v25 = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(v12, 0);
  uint64_t v34 = v24;
  uint64_t v154 = v24;
  size_t v140 = v25;
  unsigned int v151 = v14;
  uint64_t v35 = v14 >> 5;
  unsigned int v139 = v14 + a10 - 1;
  unsigned int v36 = v139 >> 5;
  uint64_t result = *(void *)(v34 + 168);
  if (result)
  {
    uint64_t result = IOSurfaceGetCacheMode();
    int v38 = result & 0xF00;
  }
  else
  {
    int v38 = 0;
  }
  BOOL v39 = (v38 & 0xD00) == 0 || v38 == 768;
  int v40 = v38 & 0xE00;
  int v42 = !v39 && v40 != 1024;
  int v157 = v42;
  if (v35 <= v36)
  {
    unsigned int v146 = v16 + a9 - 1;
    if (v16 >> 5 <= v146 >> 5)
    {
      uint64_t v153 = (v20 - 1) >> 5;
      uint64_t v138 = (v18 - 1) >> 5;
      uint64_t v43 = v154;
      int v152 = ((v20 - 1) & 0x1F) + 1;
      int v137 = ((v18 - 1) & 0x1F) + 1;
      unint64_t v144 = v16;
      uint64_t v135 = v36 + 1;
      unint64_t v136 = (unint64_t)v16 >> 5;
      unsigned int v145 = v16;
      do
      {
        unsigned int v44 = (32 * v35) | 0x1F;
        if (32 * (int)v35 <= v151) {
          unsigned int v45 = v151;
        }
        else {
          unsigned int v45 = 32 * v35;
        }
        if (v139 < v44) {
          unsigned int v44 = v139;
        }
        unsigned int v143 = v45 - 32 * v35;
        int v150 = v44 - v45 + 1;
        if (v35 == v138) {
          unsigned int v46 = v137;
        }
        else {
          unsigned int v46 = 32;
        }
        uint64_t v149 = v141 + (v45 - v151) * a11;
        unint64_t v47 = v136;
        do
        {
          unint64_t v48 = 32 * v47;
          unint64_t v156 = v47 + 1;
          unsigned int v49 = 32 * (v47 + 1) - 1;
          if (32 * (int)v47 <= v16) {
            unsigned int v50 = v16;
          }
          else {
            unsigned int v50 = 32 * v47;
          }
          if (v146 < v49) {
            unsigned int v49 = v146;
          }
          int v51 = v49 - v50 + 1;
          if (v47 == v153) {
            unsigned int v52 = v152;
          }
          else {
            unsigned int v52 = 32;
          }
          BOOL v53 = 1;
          if (32 * (int)v35 >= v151 && v48 >= v144)
          {
            int v54 = v152;
            if (v47 != v153) {
              int v54 = 32;
            }
            BOOL v53 = v51 != v54 || v150 != v46;
          }
          unsigned int v56 = *(_DWORD *)(v43 + 128) >> (*(unsigned char *)(v43 + 144) + a12);
          if (v56 <= 1) {
            unsigned int v56 = 1;
          }
          unsigned int v57 = v56 + 31;
          if (v57 < 0x40) {
            unsigned int v58 = 0;
          }
          else {
            unsigned int v58 = 32 - __clz(~(-1 << -(char)__clz((v57 >> 5) - 1)));
          }
          unsigned int v59 = *(_DWORD *)(v43 + 132) >> (*(unsigned char *)(v43 + 144) + a12);
          if (v59 <= 1) {
            unsigned int v59 = 1;
          }
          unsigned int v60 = v59 + 31;
          if (v60 < 0x40)
          {
            unsigned int v61 = 0;
            if (!v58)
            {
LABEL_65:
              uint64_t v63 = 0;
              goto LABEL_66;
            }
          }
          else
          {
            unsigned int v61 = 32 - __clz(~(-1 << -(char)__clz((v60 >> 5) - 1)));
            if (!(v61 | v58)) {
              goto LABEL_65;
            }
          }
          int v62 = 0;
          uint64_t v63 = 0;
          BOOL v64 = v58 != 0;
          BOOL v65 = v61 != 0;
          int v66 = 1;
          do
          {
            --v58;
            if (v64) {
              v63 |= (unint64_t)(v66 & v47) << v62++;
            }
            else {
              unsigned int v58 = 0;
            }
            --v61;
            if (v65) {
              v63 |= (unint64_t)(v66 & v35) << v62++;
            }
            else {
              unsigned int v61 = 0;
            }
            v66 *= 2;
            --v62;
            BOOL v65 = v61 != 0;
            BOOL v64 = v58 != 0;
          }
          while (v61 | v58);
LABEL_66:
          size_t v67 = v35 * v140 + (v47 << 11);
          int v68 = v52 < 0x20 || v53;
          int v69 = (char *)(v148 + 32 * v63);
          uint64_t v70 = v149 + 2 * (v50 - v16);
          BOOL v71 = (int8x16_t *)(v147 + v67);
          if (v46 < 0x20) {
            int v72 = 1;
          }
          else {
            int v72 = v68;
          }
          unint64_t v155 = v71;
          if (v157)
          {
            if (!v72)
            {
              int32x4_t v75 = (int8x16_t *)__dst;
LABEL_79:
              uint64_t v79 = 0;
              uint64_t v80 = v75;
              uint64_t v81 = v75;
              do
              {
                uint64_t v82 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)2,1u>::kSubblockPositions[v79 + 1];
                uint64_t v83 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)2,1u>::kSubblockPositions[v79];
                unsigned int v84 = (v52 - 8 * v83) & ~((int)(v52 - 8 * v83) >> 31);
                if (v84 >= 8) {
                  unsigned int v84 = 8;
                }
                unsigned int v85 = (v46 - 4 * v82) & ~((int)(v46 - 4 * v82) >> 31);
                if (v85 >= 4) {
                  unsigned int v85 = 4;
                }
                if (v84) {
                  BOOL v86 = v85 == 0;
                }
                else {
                  BOOL v86 = 1;
                }
                if (v86) {
                  *int v69 = 0;
                }
                else {
                  uint64_t v81 = (int8x16_t *)((char *)v81
                }
                                    + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::compressSubblock(v81, v69, (int32x4_t *)(v70 + 4 * a11 * v82 + 16 * v83), a11, v84, v85, *(double *)&v26, *(double *)&v27, v28, v29, v30, v31, v32, v33));
                ++v69;
                v79 += 2;
              }
              while (v79 != 64);
              unsigned int v16 = v145;
              unint64_t v78 = v156;
              int v77 = v80;
              goto LABEL_142;
            }
            int v73 = v51;
            unsigned int v74 = v50;
            memcpy(__dst, v71, 0x800uLL);
            unsigned int v50 = v74;
            int v51 = v73;
            int32x4_t v75 = (int8x16_t *)__dst;
          }
          else
          {
            int32x4_t v75 = v71;
            if (!v72) {
              goto LABEL_79;
            }
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE3ELj1ELh0ELNS7_13SubblockOrderE2EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder3EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = v154;
          unsigned int v159 = v75;
          unsigned __int8 v167 = v52;
          unsigned __int8 v168 = v46;
          unsigned int v163 = v143;
          unsigned int v164 = v50 - v48;
          unsigned int v160 = v69;
          uint64_t v161 = v70;
          uint64_t v162 = a11;
          unsigned int v165 = v150;
          unsigned int v166 = v51;
          if (v53)
          {
            uint64_t v76 = v75;
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(v154 + 8) + 7384), block);
            int v77 = v76;
            unsigned int v16 = v145;
            unint64_t v78 = v156;
            goto LABEL_142;
          }
          uint64_t v87 = 0;
          __src = v75;
          unsigned int v88 = (int32x4_t *)v75;
          do
          {
            unsigned int v89 = *v69++;
            unsigned int v88 = (int32x4_t *)((char *)v88
                              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)2,(AGXTextureFootprint)0>::decompressSubblock((int32x4_t *)&__dst[256* (unint64_t)AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)2,1u>::kSubblockPositions[v87 + 1]+ 2048+ 16* AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)2,1u>::kSubblockPositions[v87]], 64, v88, v89, *(double *)&v26, *(double *)&v27, v28, *(int8x8_t *)&v29));
            v87 += 2;
          }
          while (v87 != 64);
          uint64_t v90 = v165;
          if (v165 && v166)
          {
            uint64_t v91 = 0;
            unint64_t v92 = (unint64_t)v163 << 6;
            uint64_t v93 = 2 * v164;
            uint64_t v94 = &__dst[v92 + 2048 + v93];
            uint64_t v95 = v161;
            uint64_t v96 = v162;
            unint64_t v97 = 2 * v166;
            if (v97 <= 1) {
              unint64_t v98 = 1;
            }
            else {
              unint64_t v98 = 2 * v166;
            }
            unint64_t v99 = v92 + v93;
            BOOL v100 = &__dst[v92 + 2048 + v93];
            if (v98) {
              BOOL v101 = (v98 - 1) >> 32 == 0;
            }
            else {
              BOOL v101 = 0;
            }
            uint64_t v102 = v98 & 0x1FFFFFFE0;
            uint64_t v103 = v98 & 0x1FFFFFFF8;
            char v105 = !v101 || v98 < 8;
            long long v106 = &__dst[v99 + 2064];
            uint64_t v107 = (long long *)(v161 + 16);
            uint64_t v108 = v94;
            uint64_t v109 = v161;
            do
            {
              uint64_t v110 = (char *)(v95 + v96 * v91);
              char v111 = &v94[64 * v91];
              if ((unint64_t)(&v100[64 * v91] - v110) < 0x20) {
                char v112 = 1;
              }
              else {
                char v112 = v105;
              }
              if (v112)
              {
                int v113 = 0;
                goto LABEL_126;
              }
              if (v98 >= 0x20)
              {
                uint64_t v115 = v107;
                uint64_t v116 = v106;
                uint64_t v117 = v98 & 0x1FFFFFFE0;
                do
                {
                  long long v26 = *(v115 - 1);
                  long long v27 = *v115;
                  *(v116 - 1) = v26;
                  *uint64_t v116 = v27;
                  v116 += 2;
                  v115 += 2;
                  v117 -= 32;
                }
                while (v117);
                if (v98 == v102) {
                  goto LABEL_109;
                }
                uint64_t v114 = v98 & 0x1FFFFFFE0;
                if ((v98 & 0x18) == 0)
                {
                  v110 += v102;
                  v111 += v102;
                  int v113 = v98 & 0xFFFFFFE0;
                  goto LABEL_126;
                }
              }
              else
              {
                uint64_t v114 = 0;
              }
              v111 += v103;
              uint64_t v118 = v114 - v103;
              char v119 = (uint64_t *)(v109 + v114);
              uint64_t v120 = &v108[v114];
              do
              {
                uint64_t v121 = *v119++;
                *(void *)&long long v26 = v121;
                *v120++ = v121;
                v118 += 8;
              }
              while (v118);
              if (v98 == v103) {
                goto LABEL_109;
              }
              v110 += v103;
              int v113 = v98 & 0xFFFFFFF8;
LABEL_126:
              unsigned int v122 = v113 + 1;
              do
              {
                char v123 = *v110++;
                *v111++ = v123;
              }
              while (v97 > v122++);
LABEL_109:
              ++v91;
              v106 += 64;
              uint64_t v107 = (long long *)((char *)v107 + v96);
              v109 += v96;
              v108 += 64;
            }
            while (v91 != v90);
          }
          uint64_t v125 = 0;
          unint64_t v126 = v159;
          int v127 = v160;
          int v128 = v167;
          int v129 = v168;
          do
          {
            uint64_t v130 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)2,1u>::kSubblockPositions[v125 + 1];
            uint64_t v131 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)2,1u>::kSubblockPositions[v125];
            unsigned int v132 = (v128 - 8 * v131) & ~((v128 - 8 * (int)v131) >> 31);
            if (v132 >= 8) {
              unsigned int v132 = 8;
            }
            unsigned int v133 = (v129 - 4 * v130) & ~((v129 - 4 * (int)v130) >> 31);
            if (v133 >= 4) {
              unsigned int v133 = 4;
            }
            if (v132) {
              BOOL v134 = v133 == 0;
            }
            else {
              BOOL v134 = 1;
            }
            if (v134) {
              *int v127 = 0;
            }
            else {
              unint64_t v126 = (int8x16_t *)((char *)v126
            }
                                 + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::compressSubblock(v126, v127, (int32x4_t *)&__dst[256 * v130 + 2048 + 16 * v131], 64, v132, v133, *(double *)&v26, *(double *)&v27, v28, v29, v30, v31, v32, v33));
            ++v127;
            v125 += 2;
          }
          while (v125 != 64);
          unsigned int v16 = v145;
          unint64_t v78 = v156;
          int v77 = __src;
LABEL_142:
          uint64_t result = (uint64_t)v155;
          if (v157) {
            uint64_t result = (uint64_t)memcpy(v155, v77, 0x800uLL);
          }
          unint64_t v47 = v78;
          uint64_t v43 = v154;
        }
        while (v78 != (v146 >> 5) + 1);
        ++v35;
      }
      while (v35 != v135);
    }
  }
  return result;
}

uint64_t AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)2,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)3>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10, uint64_t a11, char a12)
{
  uint64_t v12 = MEMORY[0x270FA5388](a1);
  unsigned int v14 = v13;
  unsigned int v156 = v15;
  int v17 = v16;
  int v19 = v18;
  uint64_t v146 = v20;
  uint64_t v147 = v21;
  uint64_t v140 = v22;
  uint64_t v23 = v12;
  uint64_t v169 = *MEMORY[0x263EF8340];
  size_t v139 = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(v12, 0);
  unsigned int v150 = v14;
  uint64_t v28 = v14 >> 5;
  unsigned int v138 = v14 + a10 - 1;
  unsigned int v29 = v138 >> 5;
  uint64_t v151 = v23;
  if (*(void *)(v23 + 168)) {
    int v30 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v30 = 0;
  }
  BOOL v31 = (v30 & 0xD00) == 0 || v30 == 768;
  int v32 = v30 & 0xE00;
  int v34 = !v31 && v32 != 1024;
  int v155 = v34;
  uint64_t result = v23;
  if (v28 <= v29)
  {
    unsigned int v145 = v156 + a9 - 1;
    if (v156 >> 5 <= v145 >> 5)
    {
      uint64_t v153 = (v19 - 1) >> 5;
      uint64_t v137 = (v17 - 1) >> 5;
      int v152 = ((v19 - 1) & 0x1F) + 1;
      int v136 = ((v17 - 1) & 0x1F) + 1;
      uint64_t v135 = v29 + 1;
      uint64_t v36 = 2 * a11;
      do
      {
        unsigned int v37 = (32 * v28) | 0x1F;
        if (32 * (int)v28 <= v150) {
          unsigned int v38 = v150;
        }
        else {
          unsigned int v38 = 32 * v28;
        }
        if (v138 < v37) {
          unsigned int v37 = v138;
        }
        unsigned int v144 = v38 - 32 * v28;
        int v149 = v37 - v38 + 1;
        if (v28 == v137) {
          unsigned int v39 = v136;
        }
        else {
          unsigned int v39 = 32;
        }
        uint64_t v148 = v140 + (v38 - v150) * a11;
        unint64_t v40 = (unint64_t)v156 >> 5;
        do
        {
          unint64_t v41 = 32 * v40;
          unsigned int v42 = 32 * (v40 + 1) - 1;
          if (32 * (int)v40 <= v156) {
            unsigned int v43 = v156;
          }
          else {
            unsigned int v43 = 32 * v40;
          }
          if (v145 < v42) {
            unsigned int v42 = v156 + a9 - 1;
          }
          int v44 = v42 - v43 + 1;
          if (v40 == v153) {
            unsigned int v45 = v152;
          }
          else {
            unsigned int v45 = 32;
          }
          BOOL v46 = 1;
          unint64_t v154 = v40 + 1;
          if (32 * (int)v28 >= v150 && v41 >= v156)
          {
            int v47 = v152;
            if (v40 != v153) {
              int v47 = 32;
            }
            BOOL v46 = v44 != v47 || v149 != v39;
          }
          unsigned int v49 = *(_DWORD *)(result + 128) >> (*(unsigned char *)(result + 144) + a12);
          if (v49 <= 1) {
            unsigned int v49 = 1;
          }
          unsigned int v50 = v49 + 31;
          if (v50 < 0x40) {
            unsigned int v51 = 0;
          }
          else {
            unsigned int v51 = 32 - __clz(~(-1 << -(char)__clz((v50 >> 5) - 1)));
          }
          unsigned int v52 = *(_DWORD *)(result + 132) >> (*(unsigned char *)(result + 144) + a12);
          if (v52 <= 1) {
            unsigned int v52 = 1;
          }
          unsigned int v53 = v52 + 31;
          if (v53 < 0x40)
          {
            unsigned int v54 = 0;
            if (!v51)
            {
LABEL_65:
              uint64_t v56 = 0;
              goto LABEL_66;
            }
          }
          else
          {
            unsigned int v54 = 32 - __clz(~(-1 << -(char)__clz((v53 >> 5) - 1)));
            if (!(v54 | v51)) {
              goto LABEL_65;
            }
          }
          int v55 = 0;
          uint64_t v56 = 0;
          BOOL v57 = v51 != 0;
          BOOL v58 = v54 != 0;
          int v59 = 1;
          do
          {
            --v51;
            if (v57) {
              v56 |= (unint64_t)(v59 & v40) << v55++;
            }
            else {
              unsigned int v51 = 0;
            }
            --v54;
            if (v58) {
              v56 |= (unint64_t)(v59 & v28) << v55++;
            }
            else {
              unsigned int v54 = 0;
            }
            v59 *= 2;
            --v55;
            BOOL v58 = v54 != 0;
            BOOL v57 = v51 != 0;
          }
          while (v54 | v51);
LABEL_66:
          size_t v60 = v28 * v139 + (v40 << 11);
          int v61 = v45 < 0x20 || v46;
          int v62 = (char *)(v147 + 32 * v56);
          uint64_t v63 = (int32x4_t *)(v148 + 2 * (v43 - v156));
          BOOL v64 = (int32x4_t *)(v146 + v60);
          if (v39 < 0x20) {
            int v65 = 1;
          }
          else {
            int v65 = v61;
          }
          if (v155)
          {
            if (!v65)
            {
              int v68 = (int32x4_t *)__dst;
LABEL_80:
              uint64_t v71 = 0;
              int v72 = (float *)v68;
              do
              {
                uint64_t v78 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)2,1u>::kSubblockPositions[v71 + 1];
                uint64_t v79 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)2,1u>::kSubblockPositions[v71];
                unsigned int v80 = (v45 - 8 * v79) & ~((int)(v45 - 8 * v79) >> 31);
                if (v80 >= 8) {
                  unsigned int v80 = 8;
                }
                unsigned int v81 = (v39 - 4 * v78) & ~((int)(v39 - 4 * v78) >> 31);
                if (v81 >= 4) {
                  unsigned int v81 = 4;
                }
                if (v80) {
                  BOOL v82 = v81 == 0;
                }
                else {
                  BOOL v82 = 1;
                }
                if (v82)
                {
                  char v77 = 0;
                }
                else
                {
                  int v73 = (float32x2x2_t *)&v63[v79].i8[4 * a11 * v78];
                  float32x2x2_t v24 = *v73;
                  int32x4_t v25 = *(int32x4_t *)((char *)v73 + a11);
                  unsigned int v74 = (int32x4_t *)((char *)v73 + v36);
                  float32x2x2_t v26 = (float32x2x2_t)*v74;
                  float32x2x2_t v27 = *(float32x2x2_t *)((char *)v74 + a11);
                  int32x4_t v75 = vzip2q_s32(*v74, (int32x4_t)v27);
                  uint64_t v76 = v72;
                  vst2_f32(v76, v24);
                  v76 += 4;
                  vst2_f32(v76, v26);
                  *((int32x4_t *)v72 + 2) = vzip2q_s32((int32x4_t)v24, v25);
                  *((int32x4_t *)v72 + 3) = v75;
                  v72 += 16;
                  char v77 = 63;
                }
                *v62++ = v77;
                v71 += 2;
              }
              while (v71 != 64);
              if (v155) {
                goto LABEL_144;
              }
              goto LABEL_27;
            }
            int v66 = v64;
            int v142 = v44;
            int v141 = v41;
            unsigned int v67 = v43;
            memcpy(__dst, v64, 0x800uLL);
            unsigned int v43 = v67;
            LODWORD(v41) = v141;
            int v44 = v142;
            int v68 = (int32x4_t *)__dst;
            BOOL v64 = v66;
            uint64_t result = v151;
          }
          else
          {
            int v68 = v64;
            if (!v65) {
              goto LABEL_80;
            }
          }
          int v69 = v64;
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE3ELj1ELh1ELNS7_13SubblockOrderE2EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder3EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = result;
          unsigned int v158 = v68;
          unsigned __int8 v166 = v45;
          unsigned __int8 v167 = v39;
          unsigned int v162 = v144;
          unsigned int v163 = v43 - v41;
          unsigned int v159 = v62;
          unsigned int v160 = v63;
          uint64_t v161 = a11;
          unsigned int v164 = v149;
          unsigned int v165 = v44;
          if (v46)
          {
            uint64_t v70 = v68;
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(result + 8) + 7384), block);
            int v68 = v70;
            uint64_t result = v151;
            uint64_t v36 = 2 * a11;
            BOOL v64 = v69;
            if (!v155) {
              goto LABEL_27;
            }
LABEL_144:
            memcpy(v64, v68, 0x800uLL);
            uint64_t v36 = 2 * a11;
            uint64_t result = v151;
            goto LABEL_27;
          }
          uint64_t v83 = 0;
          unsigned int v143 = v68;
          unsigned int v84 = v68;
          do
          {
            unsigned int v85 = *v62++;
            unsigned int v84 = (int32x4_t *)((char *)v84
                              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)2,(AGXTextureFootprint)0>::decompressSubblock((int32x4_t *)&__dst[256* (unint64_t)AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)2,1u>::kSubblockPositions[v83 + 1]+ 2048+ 16* AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)2,1u>::kSubblockPositions[v83]], 64, v84, v85, *(double *)v24.val, *(double *)v25.i64, *(double *)v26.val, (int8x8_t)v27.val[0]));
            v83 += 2;
          }
          while (v83 != 64);
          uint64_t v86 = v164;
          if (v164 && v165)
          {
            uint64_t v87 = 0;
            unint64_t v88 = (unint64_t)v162 << 6;
            uint64_t v89 = 2 * v163;
            uint64_t v90 = &__dst[v88 + 2048 + v89];
            uint64_t v91 = v160;
            uint64_t v92 = v161;
            unint64_t v93 = 2 * v165;
            if (v93 <= 1) {
              unint64_t v94 = 1;
            }
            else {
              unint64_t v94 = 2 * v165;
            }
            unint64_t v95 = v88 + v89;
            uint64_t v96 = &__dst[v88 + 2048 + v89];
            if (v94) {
              BOOL v97 = (v94 - 1) >> 32 == 0;
            }
            else {
              BOOL v97 = 0;
            }
            uint64_t v98 = v94 & 0x1FFFFFFE0;
            uint64_t v99 = v94 & 0x1FFFFFFF8;
            char v101 = !v97 || v94 < 8;
            uint64_t v102 = (int32x4_t *)&__dst[v95 + 2064];
            uint64_t v103 = v160 + 1;
            char v104 = v90;
            char v105 = v160;
            do
            {
              long long v106 = &v91->i8[v92 * v87];
              uint64_t v107 = &v90[64 * v87];
              if ((unint64_t)(&v96[64 * v87] - v106) < 0x20) {
                char v108 = 1;
              }
              else {
                char v108 = v101;
              }
              if (v108)
              {
                int v109 = 0;
                goto LABEL_128;
              }
              if (v94 >= 0x20)
              {
                char v111 = v103;
                char v112 = v102;
                uint64_t v113 = v94 & 0x1FFFFFFE0;
                do
                {
                  float32x2x2_t v24 = (float32x2x2_t)v111[-1];
                  int32x4_t v25 = *v111;
                  v112[-1] = (int32x4_t)v24;
                  *char v112 = v25;
                  v112 += 2;
                  v111 += 2;
                  v113 -= 32;
                }
                while (v113);
                if (v94 == v98) {
                  goto LABEL_111;
                }
                uint64_t v110 = v94 & 0x1FFFFFFE0;
                if ((v94 & 0x18) == 0)
                {
                  v106 += v98;
                  v107 += v98;
                  int v109 = v94 & 0xFFFFFFE0;
                  goto LABEL_128;
                }
              }
              else
              {
                uint64_t v110 = 0;
              }
              v107 += v99;
              uint64_t v114 = v110 - v99;
              uint64_t v115 = (float32x2_t *)&v105->i8[v110];
              uint64_t v116 = (float32x2_t *)&v104[v110];
              do
              {
                float32x2_t v117 = *v115++;
                v24.val[0] = v117;
                *v116++ = v117;
                v114 += 8;
              }
              while (v114);
              if (v94 == v99) {
                goto LABEL_111;
              }
              v106 += v99;
              int v109 = v94 & 0xFFFFFFF8;
LABEL_128:
              unsigned int v118 = v109 + 1;
              do
              {
                char v119 = *v106++;
                *v107++ = v119;
              }
              while (v93 > v118++);
LABEL_111:
              ++v87;
              v102 += 4;
              uint64_t v103 = (int32x4_t *)((char *)v103 + v92);
              char v105 = (int32x4_t *)((char *)v105 + v92);
              v104 += 64;
            }
            while (v87 != v86);
          }
          uint64_t v121 = 0;
          unsigned int v122 = v158;
          char v123 = v159;
          int v124 = v166;
          int v125 = v167;
          uint64_t v36 = 2 * a11;
          BOOL v64 = v69;
          do
          {
            uint64_t v130 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)2,1u>::kSubblockPositions[v121 + 1];
            uint64_t v131 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)2,1u>::kSubblockPositions[v121];
            unsigned int v132 = (v124 - 8 * v131) & ~((v124 - 8 * (int)v131) >> 31);
            if (v132 >= 8) {
              unsigned int v132 = 8;
            }
            unsigned int v133 = (v125 - 4 * v130) & ~((v125 - 4 * (int)v130) >> 31);
            if (v133 >= 4) {
              unsigned int v133 = 4;
            }
            if (v132) {
              BOOL v134 = v133 == 0;
            }
            else {
              BOOL v134 = 1;
            }
            if (v134)
            {
              char v129 = 0;
            }
            else
            {
              unint64_t v126 = (int32x4_t *)&__dst[256 * v130 + 2048 + 16 * v131];
              float32x2x2_t v24 = (float32x2x2_t)*v126;
              int32x4_t v25 = v126[4];
              float32x2x2_t v26 = (float32x2x2_t)vzip2q_s32(*v126, v25);
              float32x2x2_t v27 = (float32x2x2_t)v126[8];
              int32x4_t v127 = v126[12];
              int v128 = (float *)v122;
              vst2_f32(v128, v24);
              v128 += 4;
              vst2_f32(v128, v27);
              v122[2] = (int32x4_t)v26;
              v122[3] = vzip2q_s32((int32x4_t)v27, v127);
              v122 += 4;
              char v129 = 63;
            }
            *v123++ = v129;
            v121 += 2;
          }
          while (v121 != 64);
          uint64_t result = v151;
          int v68 = v143;
          if (v155) {
            goto LABEL_144;
          }
LABEL_27:
          unint64_t v40 = v154;
        }
        while (v154 != (v145 >> 5) + 1);
        ++v28;
      }
      while (v28 != v135);
    }
  }
  return result;
}

uint64_t AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)2,(AGXTextureFootprint)1>,false,(AGXHardwareTextureMemoryOrder)3>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10, uint64_t a11, char a12)
{
  uint64_t v12 = MEMORY[0x270FA5388](a1);
  unsigned int v14 = v13;
  unsigned int v16 = v15;
  int v18 = v17;
  int v20 = v19;
  uint64_t v144 = v21;
  uint64_t v145 = v22;
  uint64_t v138 = v23;
  uint64_t v24 = v12;
  uint64_t v167 = *MEMORY[0x263EF8340];
  size_t v137 = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(v12, 0);
  unsigned int v148 = v14;
  uint64_t v30 = v14 >> 5;
  unsigned int v136 = v14 + a10 - 1;
  unsigned int v31 = v136 >> 5;
  uint64_t result = *(void *)(v24 + 168);
  if (result)
  {
    uint64_t result = IOSurfaceGetCacheMode();
    int v33 = result & 0xF00;
  }
  else
  {
    int v33 = 0;
  }
  BOOL v34 = (v33 & 0xD00) == 0 || v33 == 768;
  int v35 = v33 & 0xE00;
  int v37 = !v34 && v35 != 1024;
  int v154 = v37;
  if (v30 <= v31)
  {
    unsigned int v143 = v16 + a9 - 1;
    if (v16 >> 5 <= v143 >> 5)
    {
      uint64_t v150 = (v20 - 1) >> 5;
      uint64_t v135 = (v18 - 1) >> 5;
      int v149 = ((v20 - 1) & 0x1F) + 1;
      int v134 = ((v18 - 1) & 0x1F) + 1;
      unint64_t v141 = v16;
      uint64_t v132 = v31 + 1;
      unint64_t v133 = (unint64_t)v16 >> 5;
      unsigned int v142 = v16;
      uint64_t v153 = v24;
      do
      {
        unsigned int v38 = (32 * v30) | 0x1F;
        if (32 * (int)v30 <= v148) {
          unsigned int v39 = v148;
        }
        else {
          unsigned int v39 = 32 * v30;
        }
        if (v136 < v38) {
          unsigned int v38 = v136;
        }
        unsigned int v140 = v39 - 32 * v30;
        int v147 = v38 - v39 + 1;
        if (v30 == v135) {
          unsigned int v40 = v134;
        }
        else {
          unsigned int v40 = 32;
        }
        uint64_t v146 = v138 + (v39 - v148) * a11;
        unint64_t v41 = v133;
        do
        {
          unint64_t v42 = 32 * v41;
          unsigned int v43 = 32 * (v41 + 1) - 1;
          if (32 * (int)v41 <= v16) {
            unsigned int v44 = v16;
          }
          else {
            unsigned int v44 = 32 * v41;
          }
          if (v143 < v43) {
            unsigned int v43 = v143;
          }
          int v45 = v43 - v44 + 1;
          if (v41 == v150) {
            unsigned int v46 = v149;
          }
          else {
            unsigned int v46 = 32;
          }
          BOOL v47 = 1;
          if (32 * (int)v30 >= v148 && v42 >= v141)
          {
            int v48 = v149;
            if (v41 != v150) {
              int v48 = 32;
            }
            BOOL v47 = v45 != v48 || v147 != v40;
          }
          unsigned int v50 = *(_DWORD *)(v24 + 128) >> (*(unsigned char *)(v24 + 144) + a12);
          if (v50 <= 1) {
            unsigned int v50 = 1;
          }
          unsigned int v51 = v50 + 31;
          if (v51 < 0x40) {
            unsigned int v52 = 0;
          }
          else {
            unsigned int v52 = 32 - __clz(~(-1 << -(char)__clz((v51 >> 5) - 1)));
          }
          unsigned int v53 = *(_DWORD *)(v24 + 132) >> (*(unsigned char *)(v24 + 144) + a12);
          if (v53 <= 1) {
            unsigned int v53 = 1;
          }
          unsigned int v54 = v53 + 31;
          if (v54 < 0x40) {
            unsigned int v55 = 0;
          }
          else {
            unsigned int v55 = 32 - __clz(~(-1 << -(char)__clz((v54 >> 5) - 1)));
          }
          unint64_t v152 = v41 + 1;
          if (v55 | v52)
          {
            int v56 = 0;
            uint64_t v57 = 0;
            BOOL v58 = v52 != 0;
            BOOL v59 = v55 != 0;
            int v60 = 1;
            do
            {
              --v52;
              if (v58) {
                v57 |= (unint64_t)(v60 & v41) << v56++;
              }
              else {
                unsigned int v52 = 0;
              }
              --v55;
              if (v59) {
                v57 |= (unint64_t)(v60 & v30) << v56++;
              }
              else {
                unsigned int v55 = 0;
              }
              v60 *= 2;
              --v56;
              BOOL v59 = v55 != 0;
              BOOL v58 = v52 != 0;
            }
            while (v55 | v52);
          }
          else
          {
            uint64_t v57 = 0;
          }
          uint64_t v61 = v30 * v137 + 1536 * v41;
          int v62 = v46 < 0x20 || v47;
          uint64_t v63 = (unsigned __int8 *)(v145 + 32 * v57);
          uint64_t v64 = v146 + 2 * (v44 - v16);
          int v65 = (int32x4_t *)(v144 + v61);
          if (v40 < 0x20) {
            int v66 = 1;
          }
          else {
            int v66 = v62;
          }
          uint64_t v151 = v65;
          if (v154)
          {
            if (!v66)
            {
              uint64_t v70 = (int32x4_t *)__dst;
LABEL_78:
              uint64_t v73 = 0;
              int v74 = *(_DWORD *)(*(void *)(v153 + 208) + 52);
              int32x4_t v75 = v70;
              uint64_t v76 = (uint64_t)v70;
              do
              {
                uint64_t v77 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)2,1u>::kSubblockPositions[v73 + 1];
                uint64_t v78 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)2,1u>::kSubblockPositions[v73];
                unsigned int v79 = (v46 - 8 * v78) & ~((int)(v46 - 8 * v78) >> 31);
                if (v79 >= 8) {
                  unsigned int v79 = 8;
                }
                unsigned int v80 = (v40 - 4 * v77) & ~((int)(v40 - 4 * v77) >> 31);
                if (v80 >= 4) {
                  unsigned int v80 = 4;
                }
                if (v79) {
                  BOOL v81 = v80 == 0;
                }
                else {
                  BOOL v81 = 1;
                }
                if (v81) {
                  *uint64_t v63 = 0;
                }
                else {
                  v76 += AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::compressSubblock(v76, v63, (int32x4_t *)(v64 + 4 * a11 * v77 + 16 * v78), a11, v79, v80, v74, *(double *)&v25, *(double *)&v26, v27, v28, v29);
                }
                ++v63;
                v73 += 2;
              }
              while (v73 != 64);
              unsigned int v16 = v142;
              uint64_t v24 = v153;
              int v72 = v75;
              goto LABEL_141;
            }
            int v67 = v45;
            BOOL v68 = v47;
            unsigned int v69 = v44;
            memcpy(__dst, v65, 0x800uLL);
            unsigned int v44 = v69;
            BOOL v47 = v68;
            int v45 = v67;
            unsigned int v16 = v142;
            uint64_t v70 = (int32x4_t *)__dst;
          }
          else
          {
            uint64_t v70 = v65;
            if (!v66) {
              goto LABEL_78;
            }
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE3ELj1ELh0ELNS7_13SubblockOrderE2EL19AGXTextureFootprint1EEELb0EL29AGXHardwareTextureMemoryOrder3EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = v153;
          unsigned int v156 = v70;
          unsigned __int8 v164 = v46;
          unsigned __int8 v165 = v40;
          unsigned int v160 = v140;
          unsigned int v161 = v44 - v42;
          int v157 = v63;
          uint64_t v158 = v64;
          uint64_t v159 = a11;
          unsigned int v162 = v147;
          unsigned int v163 = v45;
          if (v47)
          {
            uint64_t v71 = v70;
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(v153 + 8) + 7384), block);
            int v72 = v71;
            uint64_t v24 = v153;
            goto LABEL_141;
          }
          uint64_t v82 = 0;
          int v83 = *(_DWORD *)(*(void *)(v153 + 208) + 52);
          __src = v70;
          unsigned int v84 = v70;
          do
          {
            unsigned int v85 = *v63++;
            unsigned int v84 = (int32x4_t *)((char *)v84
                              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::decompressSubblock((uint64_t)&__dst[256* (unint64_t)AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)2,1u>::kSubblockPositions[v82 + 1]+ 2048+ 16* AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)2,1u>::kSubblockPositions[v82]], 64, v84, v85, v83, *(double *)&v25, *(double *)&v26, v27, *(int8x8_t *)&v28));
            v82 += 2;
          }
          while (v82 != 64);
          uint64_t v86 = v162;
          if (v162 && v163)
          {
            uint64_t v87 = 0;
            unint64_t v88 = (unint64_t)v160 << 6;
            uint64_t v89 = 2 * v161;
            uint64_t v90 = &__dst[v88 + 2048 + v89];
            uint64_t v91 = v158;
            uint64_t v92 = v159;
            unint64_t v93 = 2 * v163;
            if (v93 <= 1) {
              unint64_t v94 = 1;
            }
            else {
              unint64_t v94 = 2 * v163;
            }
            unint64_t v95 = v88 + v89;
            uint64_t v96 = &__dst[v88 + 2048 + v89];
            if (v94) {
              BOOL v97 = (v94 - 1) >> 32 == 0;
            }
            else {
              BOOL v97 = 0;
            }
            uint64_t v98 = v94 & 0x1FFFFFFE0;
            uint64_t v99 = v94 & 0x1FFFFFFF8;
            char v101 = !v97 || v94 < 8;
            uint64_t v102 = &__dst[v95 + 2064];
            uint64_t v103 = (long long *)(v158 + 16);
            char v104 = v90;
            uint64_t v105 = v158;
            do
            {
              long long v106 = (char *)(v91 + v92 * v87);
              uint64_t v107 = &v90[64 * v87];
              if ((unint64_t)(&v96[64 * v87] - v106) < 0x20) {
                char v108 = 1;
              }
              else {
                char v108 = v101;
              }
              if (v108)
              {
                int v109 = 0;
                goto LABEL_125;
              }
              if (v94 >= 0x20)
              {
                char v111 = v103;
                char v112 = v102;
                uint64_t v113 = v94 & 0x1FFFFFFE0;
                do
                {
                  long long v25 = *(v111 - 1);
                  long long v26 = *v111;
                  *(v112 - 1) = v25;
                  *char v112 = v26;
                  v112 += 2;
                  v111 += 2;
                  v113 -= 32;
                }
                while (v113);
                if (v94 == v98) {
                  goto LABEL_108;
                }
                uint64_t v110 = v94 & 0x1FFFFFFE0;
                if ((v94 & 0x18) == 0)
                {
                  v106 += v98;
                  v107 += v98;
                  int v109 = v94 & 0xFFFFFFE0;
                  goto LABEL_125;
                }
              }
              else
              {
                uint64_t v110 = 0;
              }
              v107 += v99;
              uint64_t v114 = v110 - v99;
              uint64_t v115 = (uint64_t *)(v105 + v110);
              uint64_t v116 = &v104[v110];
              do
              {
                uint64_t v117 = *v115++;
                *(void *)&long long v25 = v117;
                *v116++ = v117;
                v114 += 8;
              }
              while (v114);
              if (v94 == v99) {
                goto LABEL_108;
              }
              v106 += v99;
              int v109 = v94 & 0xFFFFFFF8;
LABEL_125:
              unsigned int v118 = v109 + 1;
              do
              {
                char v119 = *v106++;
                *v107++ = v119;
              }
              while (v93 > v118++);
LABEL_108:
              ++v87;
              v102 += 64;
              uint64_t v103 = (long long *)((char *)v103 + v92);
              v105 += v92;
              v104 += 64;
            }
            while (v87 != v86);
          }
          uint64_t v121 = 0;
          uint64_t v122 = (uint64_t)v156;
          char v123 = v157;
          int v124 = v164;
          int v125 = v165;
          int v126 = *(_DWORD *)(*(void *)(v153 + 208) + 52);
          do
          {
            uint64_t v127 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)2,1u>::kSubblockPositions[v121 + 1];
            uint64_t v128 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)2,1u>::kSubblockPositions[v121];
            unsigned int v129 = (v124 - 8 * v128) & ~((v124 - 8 * (int)v128) >> 31);
            if (v129 >= 8) {
              unsigned int v129 = 8;
            }
            unsigned int v130 = (v125 - 4 * v127) & ~((v125 - 4 * (int)v127) >> 31);
            if (v130 >= 4) {
              unsigned int v130 = 4;
            }
            if (v129) {
              BOOL v131 = v130 == 0;
            }
            else {
              BOOL v131 = 1;
            }
            if (v131) {
              *char v123 = 0;
            }
            else {
              v122 += AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::compressSubblock(v122, v123, (int32x4_t *)&__dst[256 * v127 + 2048 + 16 * v128], 64, v129, v130, v126, *(double *)&v25, *(double *)&v26, v27, v28, v29);
            }
            ++v123;
            v121 += 2;
          }
          while (v121 != 64);
          unsigned int v16 = v142;
          uint64_t v24 = v153;
          int v72 = __src;
LABEL_141:
          uint64_t result = (uint64_t)v151;
          if (v154) {
            uint64_t result = (uint64_t)memcpy(v151, v72, 0x800uLL);
          }
          unint64_t v41 = v152;
        }
        while (v152 != (v143 >> 5) + 1);
        ++v30;
      }
      while (v30 != v132);
    }
  }
  return result;
}

uint64_t AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)2,(AGXTextureFootprint)2>,false,(AGXHardwareTextureMemoryOrder)3>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10, uint64_t a11, char a12)
{
  uint64_t v12 = MEMORY[0x270FA5388](a1);
  unsigned int v14 = v13;
  unsigned int v16 = v15;
  int v18 = v17;
  int v20 = v19;
  uint64_t v144 = v21;
  uint64_t v145 = v22;
  uint64_t v138 = v23;
  uint64_t v24 = v12;
  uint64_t v167 = *MEMORY[0x263EF8340];
  size_t v137 = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(v12, 0);
  unsigned int v148 = v14;
  uint64_t v30 = v14 >> 5;
  unsigned int v136 = v14 + a10 - 1;
  unsigned int v31 = v136 >> 5;
  uint64_t result = *(void *)(v24 + 168);
  if (result)
  {
    uint64_t result = IOSurfaceGetCacheMode();
    int v33 = result & 0xF00;
  }
  else
  {
    int v33 = 0;
  }
  BOOL v34 = (v33 & 0xD00) == 0 || v33 == 768;
  int v35 = v33 & 0xE00;
  int v37 = !v34 && v35 != 1024;
  int v154 = v37;
  if (v30 <= v31)
  {
    unsigned int v143 = v16 + a9 - 1;
    if (v16 >> 5 <= v143 >> 5)
    {
      uint64_t v150 = (v20 - 1) >> 5;
      uint64_t v135 = (v18 - 1) >> 5;
      int v149 = ((v20 - 1) & 0x1F) + 1;
      int v134 = ((v18 - 1) & 0x1F) + 1;
      unint64_t v141 = v16;
      uint64_t v132 = v31 + 1;
      unint64_t v133 = (unint64_t)v16 >> 5;
      unsigned int v142 = v16;
      uint64_t v153 = v24;
      do
      {
        unsigned int v38 = (32 * v30) | 0x1F;
        if (32 * (int)v30 <= v148) {
          unsigned int v39 = v148;
        }
        else {
          unsigned int v39 = 32 * v30;
        }
        if (v136 < v38) {
          unsigned int v38 = v136;
        }
        unsigned int v140 = v39 - 32 * v30;
        int v147 = v38 - v39 + 1;
        if (v30 == v135) {
          unsigned int v40 = v134;
        }
        else {
          unsigned int v40 = 32;
        }
        uint64_t v146 = v138 + (v39 - v148) * a11;
        unint64_t v41 = v133;
        do
        {
          unint64_t v42 = 32 * v41;
          unsigned int v43 = 32 * (v41 + 1) - 1;
          if (32 * (int)v41 <= v16) {
            unsigned int v44 = v16;
          }
          else {
            unsigned int v44 = 32 * v41;
          }
          if (v143 < v43) {
            unsigned int v43 = v143;
          }
          int v45 = v43 - v44 + 1;
          if (v41 == v150) {
            unsigned int v46 = v149;
          }
          else {
            unsigned int v46 = 32;
          }
          BOOL v47 = 1;
          if (32 * (int)v30 >= v148 && v42 >= v141)
          {
            int v48 = v149;
            if (v41 != v150) {
              int v48 = 32;
            }
            BOOL v47 = v45 != v48 || v147 != v40;
          }
          unsigned int v50 = *(_DWORD *)(v24 + 128) >> (*(unsigned char *)(v24 + 144) + a12);
          if (v50 <= 1) {
            unsigned int v50 = 1;
          }
          unsigned int v51 = v50 + 31;
          if (v51 < 0x40) {
            unsigned int v52 = 0;
          }
          else {
            unsigned int v52 = 32 - __clz(~(-1 << -(char)__clz((v51 >> 5) - 1)));
          }
          unsigned int v53 = *(_DWORD *)(v24 + 132) >> (*(unsigned char *)(v24 + 144) + a12);
          if (v53 <= 1) {
            unsigned int v53 = 1;
          }
          unsigned int v54 = v53 + 31;
          if (v54 < 0x40) {
            unsigned int v55 = 0;
          }
          else {
            unsigned int v55 = 32 - __clz(~(-1 << -(char)__clz((v54 >> 5) - 1)));
          }
          unint64_t v152 = v41 + 1;
          if (v55 | v52)
          {
            int v56 = 0;
            uint64_t v57 = 0;
            BOOL v58 = v52 != 0;
            BOOL v59 = v55 != 0;
            int v60 = 1;
            do
            {
              --v52;
              if (v58) {
                v57 |= (unint64_t)(v60 & v41) << v56++;
              }
              else {
                unsigned int v52 = 0;
              }
              --v55;
              if (v59) {
                v57 |= (unint64_t)(v60 & v30) << v56++;
              }
              else {
                unsigned int v55 = 0;
              }
              v60 *= 2;
              --v56;
              BOOL v59 = v55 != 0;
              BOOL v58 = v52 != 0;
            }
            while (v55 | v52);
          }
          else
          {
            uint64_t v57 = 0;
          }
          uint64_t v61 = v30 * v137 + 1280 * v41;
          int v62 = v46 < 0x20 || v47;
          uint64_t v63 = (unsigned __int8 *)(v145 + 32 * v57);
          uint64_t v64 = v146 + 2 * (v44 - v16);
          int v65 = (int32x4_t *)(v144 + v61);
          if (v40 < 0x20) {
            int v66 = 1;
          }
          else {
            int v66 = v62;
          }
          uint64_t v151 = v65;
          if (v154)
          {
            if (!v66)
            {
              uint64_t v70 = (int32x4_t *)__dst;
LABEL_78:
              uint64_t v73 = 0;
              int v74 = *(_DWORD *)(*(void *)(v153 + 208) + 52);
              int32x4_t v75 = v70;
              uint64_t v76 = (uint64_t)v70;
              do
              {
                uint64_t v77 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)2,1u>::kSubblockPositions[v73 + 1];
                uint64_t v78 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)2,1u>::kSubblockPositions[v73];
                unsigned int v79 = (v46 - 8 * v78) & ~((int)(v46 - 8 * v78) >> 31);
                if (v79 >= 8) {
                  unsigned int v79 = 8;
                }
                unsigned int v80 = (v40 - 4 * v77) & ~((int)(v40 - 4 * v77) >> 31);
                if (v80 >= 4) {
                  unsigned int v80 = 4;
                }
                if (v79) {
                  BOOL v81 = v80 == 0;
                }
                else {
                  BOOL v81 = 1;
                }
                if (v81) {
                  *uint64_t v63 = 0;
                }
                else {
                  v76 += AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::compressSubblock(v76, v63, (int32x4_t *)(v64 + 4 * a11 * v77 + 16 * v78), a11, v79, v80, v74, *(double *)&v25, *(double *)&v26, v27, v28, v29);
                }
                ++v63;
                v73 += 2;
              }
              while (v73 != 64);
              unsigned int v16 = v142;
              uint64_t v24 = v153;
              int v72 = v75;
              goto LABEL_141;
            }
            int v67 = v45;
            BOOL v68 = v47;
            unsigned int v69 = v44;
            memcpy(__dst, v65, 0x800uLL);
            unsigned int v44 = v69;
            BOOL v47 = v68;
            int v45 = v67;
            unsigned int v16 = v142;
            uint64_t v70 = (int32x4_t *)__dst;
          }
          else
          {
            uint64_t v70 = v65;
            if (!v66) {
              goto LABEL_78;
            }
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE3ELj1ELh0ELNS7_13SubblockOrderE2EL19AGXTextureFootprint2EEELb0EL29AGXHardwareTextureMemoryOrder3EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = v153;
          unsigned int v156 = v70;
          unsigned __int8 v164 = v46;
          unsigned __int8 v165 = v40;
          unsigned int v160 = v140;
          unsigned int v161 = v44 - v42;
          int v157 = v63;
          uint64_t v158 = v64;
          uint64_t v159 = a11;
          unsigned int v162 = v147;
          unsigned int v163 = v45;
          if (v47)
          {
            uint64_t v71 = v70;
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(v153 + 8) + 7384), block);
            int v72 = v71;
            uint64_t v24 = v153;
            goto LABEL_141;
          }
          uint64_t v82 = 0;
          int v83 = *(_DWORD *)(*(void *)(v153 + 208) + 52);
          __src = v70;
          unsigned int v84 = v70;
          do
          {
            unsigned int v85 = *v63++;
            unsigned int v84 = (int32x4_t *)((char *)v84
                              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressSubblock((uint64_t)&__dst[256* (unint64_t)AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)2,1u>::kSubblockPositions[v82 + 1]+ 2048+ 16* AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)2,1u>::kSubblockPositions[v82]], 64, v84, v85, v83, *(double *)&v25, *(double *)&v26, v27, *(int8x8_t *)&v28));
            v82 += 2;
          }
          while (v82 != 64);
          uint64_t v86 = v162;
          if (v162 && v163)
          {
            uint64_t v87 = 0;
            unint64_t v88 = (unint64_t)v160 << 6;
            uint64_t v89 = 2 * v161;
            uint64_t v90 = &__dst[v88 + 2048 + v89];
            uint64_t v91 = v158;
            uint64_t v92 = v159;
            unint64_t v93 = 2 * v163;
            if (v93 <= 1) {
              unint64_t v94 = 1;
            }
            else {
              unint64_t v94 = 2 * v163;
            }
            unint64_t v95 = v88 + v89;
            uint64_t v96 = &__dst[v88 + 2048 + v89];
            if (v94) {
              BOOL v97 = (v94 - 1) >> 32 == 0;
            }
            else {
              BOOL v97 = 0;
            }
            uint64_t v98 = v94 & 0x1FFFFFFE0;
            uint64_t v99 = v94 & 0x1FFFFFFF8;
            char v101 = !v97 || v94 < 8;
            uint64_t v102 = &__dst[v95 + 2064];
            uint64_t v103 = (long long *)(v158 + 16);
            char v104 = v90;
            uint64_t v105 = v158;
            do
            {
              long long v106 = (char *)(v91 + v92 * v87);
              uint64_t v107 = &v90[64 * v87];
              if ((unint64_t)(&v96[64 * v87] - v106) < 0x20) {
                char v108 = 1;
              }
              else {
                char v108 = v101;
              }
              if (v108)
              {
                int v109 = 0;
                goto LABEL_125;
              }
              if (v94 >= 0x20)
              {
                char v111 = v103;
                char v112 = v102;
                uint64_t v113 = v94 & 0x1FFFFFFE0;
                do
                {
                  long long v25 = *(v111 - 1);
                  long long v26 = *v111;
                  *(v112 - 1) = v25;
                  *char v112 = v26;
                  v112 += 2;
                  v111 += 2;
                  v113 -= 32;
                }
                while (v113);
                if (v94 == v98) {
                  goto LABEL_108;
                }
                uint64_t v110 = v94 & 0x1FFFFFFE0;
                if ((v94 & 0x18) == 0)
                {
                  v106 += v98;
                  v107 += v98;
                  int v109 = v94 & 0xFFFFFFE0;
                  goto LABEL_125;
                }
              }
              else
              {
                uint64_t v110 = 0;
              }
              v107 += v99;
              uint64_t v114 = v110 - v99;
              uint64_t v115 = (uint64_t *)(v105 + v110);
              uint64_t v116 = &v104[v110];
              do
              {
                uint64_t v117 = *v115++;
                *(void *)&long long v25 = v117;
                *v116++ = v117;
                v114 += 8;
              }
              while (v114);
              if (v94 == v99) {
                goto LABEL_108;
              }
              v106 += v99;
              int v109 = v94 & 0xFFFFFFF8;
LABEL_125:
              unsigned int v118 = v109 + 1;
              do
              {
                char v119 = *v106++;
                *v107++ = v119;
              }
              while (v93 > v118++);
LABEL_108:
              ++v87;
              v102 += 64;
              uint64_t v103 = (long long *)((char *)v103 + v92);
              v105 += v92;
              v104 += 64;
            }
            while (v87 != v86);
          }
          uint64_t v121 = 0;
          uint64_t v122 = (uint64_t)v156;
          char v123 = v157;
          int v124 = v164;
          int v125 = v165;
          int v126 = *(_DWORD *)(*(void *)(v153 + 208) + 52);
          do
          {
            uint64_t v127 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)2,1u>::kSubblockPositions[v121 + 1];
            uint64_t v128 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)2,1u>::kSubblockPositions[v121];
            unsigned int v129 = (v124 - 8 * v128) & ~((v124 - 8 * (int)v128) >> 31);
            if (v129 >= 8) {
              unsigned int v129 = 8;
            }
            unsigned int v130 = (v125 - 4 * v127) & ~((v125 - 4 * (int)v127) >> 31);
            if (v130 >= 4) {
              unsigned int v130 = 4;
            }
            if (v129) {
              BOOL v131 = v130 == 0;
            }
            else {
              BOOL v131 = 1;
            }
            if (v131) {
              *char v123 = 0;
            }
            else {
              v122 += AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::compressSubblock(v122, v123, (int32x4_t *)&__dst[256 * v127 + 2048 + 16 * v128], 64, v129, v130, v126, *(double *)&v25, *(double *)&v26, v27, v28, v29);
            }
            ++v123;
            v121 += 2;
          }
          while (v121 != 64);
          unsigned int v16 = v142;
          uint64_t v24 = v153;
          int v72 = __src;
LABEL_141:
          uint64_t result = (uint64_t)v151;
          if (v154) {
            uint64_t result = (uint64_t)memcpy(v151, v72, 0x800uLL);
          }
          unint64_t v41 = v152;
        }
        while (v152 != (v143 >> 5) + 1);
        ++v30;
      }
      while (v30 != v132);
    }
  }
  return result;
}

uint64_t AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)2,(AGXTextureFootprint)3>,false,(AGXHardwareTextureMemoryOrder)3>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10, uint64_t a11, char a12)
{
  uint64_t v12 = MEMORY[0x270FA5388](a1);
  unsigned int v14 = v13;
  unsigned int v16 = v15;
  int v18 = v17;
  int v20 = v19;
  uint64_t v144 = v21;
  uint64_t v145 = v22;
  uint64_t v138 = v23;
  uint64_t v24 = v12;
  uint64_t v167 = *MEMORY[0x263EF8340];
  size_t v137 = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(v12, 0);
  unsigned int v148 = v14;
  uint64_t v30 = v14 >> 5;
  unsigned int v136 = v14 + a10 - 1;
  unsigned int v31 = v136 >> 5;
  uint64_t result = *(void *)(v24 + 168);
  if (result)
  {
    uint64_t result = IOSurfaceGetCacheMode();
    int v33 = result & 0xF00;
  }
  else
  {
    int v33 = 0;
  }
  BOOL v34 = (v33 & 0xD00) == 0 || v33 == 768;
  int v35 = v33 & 0xE00;
  int v37 = !v34 && v35 != 1024;
  int v154 = v37;
  if (v30 <= v31)
  {
    unsigned int v143 = v16 + a9 - 1;
    if (v16 >> 5 <= v143 >> 5)
    {
      uint64_t v150 = (v20 - 1) >> 5;
      uint64_t v135 = (v18 - 1) >> 5;
      int v149 = ((v20 - 1) & 0x1F) + 1;
      int v134 = ((v18 - 1) & 0x1F) + 1;
      unint64_t v141 = v16;
      uint64_t v132 = v31 + 1;
      unint64_t v133 = (unint64_t)v16 >> 5;
      unsigned int v142 = v16;
      uint64_t v153 = v24;
      do
      {
        unsigned int v38 = (32 * v30) | 0x1F;
        if (32 * (int)v30 <= v148) {
          unsigned int v39 = v148;
        }
        else {
          unsigned int v39 = 32 * v30;
        }
        if (v136 < v38) {
          unsigned int v38 = v136;
        }
        unsigned int v140 = v39 - 32 * v30;
        int v147 = v38 - v39 + 1;
        if (v30 == v135) {
          unsigned int v40 = v134;
        }
        else {
          unsigned int v40 = 32;
        }
        uint64_t v146 = v138 + (v39 - v148) * a11;
        unint64_t v41 = v133;
        do
        {
          unint64_t v42 = 32 * v41;
          unsigned int v43 = 32 * (v41 + 1) - 1;
          if (32 * (int)v41 <= v16) {
            unsigned int v44 = v16;
          }
          else {
            unsigned int v44 = 32 * v41;
          }
          if (v143 < v43) {
            unsigned int v43 = v143;
          }
          int v45 = v43 - v44 + 1;
          if (v41 == v150) {
            unsigned int v46 = v149;
          }
          else {
            unsigned int v46 = 32;
          }
          BOOL v47 = 1;
          if (32 * (int)v30 >= v148 && v42 >= v141)
          {
            int v48 = v149;
            if (v41 != v150) {
              int v48 = 32;
            }
            BOOL v47 = v45 != v48 || v147 != v40;
          }
          unsigned int v50 = *(_DWORD *)(v24 + 128) >> (*(unsigned char *)(v24 + 144) + a12);
          if (v50 <= 1) {
            unsigned int v50 = 1;
          }
          unsigned int v51 = v50 + 31;
          if (v51 < 0x40) {
            unsigned int v52 = 0;
          }
          else {
            unsigned int v52 = 32 - __clz(~(-1 << -(char)__clz((v51 >> 5) - 1)));
          }
          unsigned int v53 = *(_DWORD *)(v24 + 132) >> (*(unsigned char *)(v24 + 144) + a12);
          if (v53 <= 1) {
            unsigned int v53 = 1;
          }
          unsigned int v54 = v53 + 31;
          if (v54 < 0x40) {
            unsigned int v55 = 0;
          }
          else {
            unsigned int v55 = 32 - __clz(~(-1 << -(char)__clz((v54 >> 5) - 1)));
          }
          unint64_t v152 = v41 + 1;
          if (v55 | v52)
          {
            int v56 = 0;
            uint64_t v57 = 0;
            BOOL v58 = v52 != 0;
            BOOL v59 = v55 != 0;
            int v60 = 1;
            do
            {
              --v52;
              if (v58) {
                v57 |= (unint64_t)(v60 & v41) << v56++;
              }
              else {
                unsigned int v52 = 0;
              }
              --v55;
              if (v59) {
                v57 |= (unint64_t)(v60 & v30) << v56++;
              }
              else {
                unsigned int v55 = 0;
              }
              v60 *= 2;
              --v56;
              BOOL v59 = v55 != 0;
              BOOL v58 = v52 != 0;
            }
            while (v55 | v52);
          }
          else
          {
            uint64_t v57 = 0;
          }
          size_t v61 = v30 * v137 + (v41 << 10);
          int v62 = v46 < 0x20 || v47;
          uint64_t v63 = (unsigned __int8 *)(v145 + 32 * v57);
          uint64_t v64 = v146 + 2 * (v44 - v16);
          int v65 = (int32x4_t *)(v144 + v61);
          if (v40 < 0x20) {
            int v66 = 1;
          }
          else {
            int v66 = v62;
          }
          uint64_t v151 = v65;
          if (v154)
          {
            if (!v66)
            {
              uint64_t v70 = (int32x4_t *)__dst;
LABEL_78:
              uint64_t v73 = 0;
              int v74 = *(_DWORD *)(*(void *)(v153 + 208) + 52);
              int32x4_t v75 = v70;
              unint64_t v76 = (unint64_t)v70;
              do
              {
                uint64_t v77 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)2,1u>::kSubblockPositions[v73 + 1];
                uint64_t v78 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)2,1u>::kSubblockPositions[v73];
                unsigned int v79 = (v46 - 8 * v78) & ~((int)(v46 - 8 * v78) >> 31);
                if (v79 >= 8) {
                  unsigned int v79 = 8;
                }
                unsigned int v80 = (v40 - 4 * v77) & ~((int)(v40 - 4 * v77) >> 31);
                if (v80 >= 4) {
                  unsigned int v80 = 4;
                }
                if (v79) {
                  BOOL v81 = v80 == 0;
                }
                else {
                  BOOL v81 = 1;
                }
                if (v81) {
                  *uint64_t v63 = 0;
                }
                else {
                  v76 += AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::compressSubblock(v76, v63, (int32x4_t *)(v64 + 4 * a11 * v77 + 16 * v78), a11, v79, v80, v74, *(double *)&v25, *(double *)&v26, v27, v28, v29);
                }
                ++v63;
                v73 += 2;
              }
              while (v73 != 64);
              unsigned int v16 = v142;
              uint64_t v24 = v153;
              int v72 = v75;
              goto LABEL_141;
            }
            int v67 = v45;
            BOOL v68 = v47;
            unsigned int v69 = v44;
            memcpy(__dst, v65, 0x800uLL);
            unsigned int v44 = v69;
            BOOL v47 = v68;
            int v45 = v67;
            unsigned int v16 = v142;
            uint64_t v70 = (int32x4_t *)__dst;
          }
          else
          {
            uint64_t v70 = v65;
            if (!v66) {
              goto LABEL_78;
            }
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE3ELj1ELh0ELNS7_13SubblockOrderE2EL19AGXTextureFootprint3EEELb0EL29AGXHardwareTextureMemoryOrder3EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = v153;
          unsigned int v156 = v70;
          unsigned __int8 v164 = v46;
          unsigned __int8 v165 = v40;
          unsigned int v160 = v140;
          unsigned int v161 = v44 - v42;
          int v157 = v63;
          uint64_t v158 = v64;
          uint64_t v159 = a11;
          unsigned int v162 = v147;
          unsigned int v163 = v45;
          if (v47)
          {
            uint64_t v71 = v70;
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(v153 + 8) + 7384), block);
            int v72 = v71;
            uint64_t v24 = v153;
            goto LABEL_141;
          }
          uint64_t v82 = 0;
          int v83 = *(_DWORD *)(*(void *)(v153 + 208) + 52);
          __src = v70;
          unsigned int v84 = v70;
          do
          {
            unsigned int v85 = *v63++;
            unsigned int v84 = (int32x4_t *)((char *)v84
                              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::decompressSubblock((uint64_t)&__dst[256* (unint64_t)AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)2,1u>::kSubblockPositions[v82 + 1]+ 2048+ 16* AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)2,1u>::kSubblockPositions[v82]], 64, v84, v85, v83, *(double *)&v25, *(double *)&v26, v27, *(int8x8_t *)&v28));
            v82 += 2;
          }
          while (v82 != 64);
          uint64_t v86 = v162;
          if (v162 && v163)
          {
            uint64_t v87 = 0;
            unint64_t v88 = (unint64_t)v160 << 6;
            uint64_t v89 = 2 * v161;
            uint64_t v90 = &__dst[v88 + 2048 + v89];
            uint64_t v91 = v158;
            uint64_t v92 = v159;
            unint64_t v93 = 2 * v163;
            if (v93 <= 1) {
              unint64_t v94 = 1;
            }
            else {
              unint64_t v94 = 2 * v163;
            }
            unint64_t v95 = v88 + v89;
            uint64_t v96 = &__dst[v88 + 2048 + v89];
            if (v94) {
              BOOL v97 = (v94 - 1) >> 32 == 0;
            }
            else {
              BOOL v97 = 0;
            }
            uint64_t v98 = v94 & 0x1FFFFFFE0;
            uint64_t v99 = v94 & 0x1FFFFFFF8;
            char v101 = !v97 || v94 < 8;
            uint64_t v102 = &__dst[v95 + 2064];
            uint64_t v103 = (long long *)(v158 + 16);
            char v104 = v90;
            uint64_t v105 = v158;
            do
            {
              long long v106 = (char *)(v91 + v92 * v87);
              uint64_t v107 = &v90[64 * v87];
              if ((unint64_t)(&v96[64 * v87] - v106) < 0x20) {
                char v108 = 1;
              }
              else {
                char v108 = v101;
              }
              if (v108)
              {
                int v109 = 0;
                goto LABEL_125;
              }
              if (v94 >= 0x20)
              {
                char v111 = v103;
                char v112 = v102;
                uint64_t v113 = v94 & 0x1FFFFFFE0;
                do
                {
                  long long v25 = *(v111 - 1);
                  long long v26 = *v111;
                  *(v112 - 1) = v25;
                  *char v112 = v26;
                  v112 += 2;
                  v111 += 2;
                  v113 -= 32;
                }
                while (v113);
                if (v94 == v98) {
                  goto LABEL_108;
                }
                uint64_t v110 = v94 & 0x1FFFFFFE0;
                if ((v94 & 0x18) == 0)
                {
                  v106 += v98;
                  v107 += v98;
                  int v109 = v94 & 0xFFFFFFE0;
                  goto LABEL_125;
                }
              }
              else
              {
                uint64_t v110 = 0;
              }
              v107 += v99;
              uint64_t v114 = v110 - v99;
              uint64_t v115 = (uint64_t *)(v105 + v110);
              uint64_t v116 = &v104[v110];
              do
              {
                uint64_t v117 = *v115++;
                *(void *)&long long v25 = v117;
                *v116++ = v117;
                v114 += 8;
              }
              while (v114);
              if (v94 == v99) {
                goto LABEL_108;
              }
              v106 += v99;
              int v109 = v94 & 0xFFFFFFF8;
LABEL_125:
              unsigned int v118 = v109 + 1;
              do
              {
                char v119 = *v106++;
                *v107++ = v119;
              }
              while (v93 > v118++);
LABEL_108:
              ++v87;
              v102 += 64;
              uint64_t v103 = (long long *)((char *)v103 + v92);
              v105 += v92;
              v104 += 64;
            }
            while (v87 != v86);
          }
          uint64_t v121 = 0;
          unint64_t v122 = (unint64_t)v156;
          char v123 = v157;
          int v124 = v164;
          int v125 = v165;
          int v126 = *(_DWORD *)(*(void *)(v153 + 208) + 52);
          do
          {
            uint64_t v127 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)2,1u>::kSubblockPositions[v121 + 1];
            uint64_t v128 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)2,1u>::kSubblockPositions[v121];
            unsigned int v129 = (v124 - 8 * v128) & ~((v124 - 8 * (int)v128) >> 31);
            if (v129 >= 8) {
              unsigned int v129 = 8;
            }
            unsigned int v130 = (v125 - 4 * v127) & ~((v125 - 4 * (int)v127) >> 31);
            if (v130 >= 4) {
              unsigned int v130 = 4;
            }
            if (v129) {
              BOOL v131 = v130 == 0;
            }
            else {
              BOOL v131 = 1;
            }
            if (v131) {
              *char v123 = 0;
            }
            else {
              v122 += AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::compressSubblock(v122, v123, (int32x4_t *)&__dst[256 * v127 + 2048 + 16 * v128], 64, v129, v130, v126, *(double *)&v25, *(double *)&v26, v27, v28, v29);
            }
            ++v123;
            v121 += 2;
          }
          while (v121 != 64);
          unsigned int v16 = v142;
          uint64_t v24 = v153;
          int v72 = __src;
LABEL_141:
          uint64_t result = (uint64_t)v151;
          if (v154) {
            uint64_t result = (uint64_t)memcpy(v151, v72, 0x800uLL);
          }
          unint64_t v41 = v152;
        }
        while (v152 != (v143 >> 5) + 1);
        ++v30;
      }
      while (v30 != v132);
    }
  }
  return result;
}

uint64_t AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)2,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)2,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)3>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10, uint64_t a11, char a12)
{
  uint64_t v12 = MEMORY[0x270FA5388](a1);
  unsigned int v14 = v13;
  unsigned int v16 = v15;
  int v18 = v17;
  int v20 = v19;
  uint64_t v147 = v21;
  uint64_t v148 = v22;
  uint64_t v141 = v23;
  uint64_t v24 = v12;
  uint64_t v170 = *MEMORY[0x263EF8340];
  size_t v25 = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(v12, 0);
  uint64_t v34 = v24;
  uint64_t v154 = v24;
  size_t v140 = v25;
  unsigned int v151 = v14;
  uint64_t v35 = v14 >> 5;
  unsigned int v139 = v14 + a10 - 1;
  unsigned int v36 = v139 >> 5;
  uint64_t result = *(void *)(v34 + 168);
  if (result)
  {
    uint64_t result = IOSurfaceGetCacheMode();
    int v38 = result & 0xF00;
  }
  else
  {
    int v38 = 0;
  }
  BOOL v39 = (v38 & 0xD00) == 0 || v38 == 768;
  int v40 = v38 & 0xE00;
  int v42 = !v39 && v40 != 1024;
  int v157 = v42;
  if (v35 <= v36)
  {
    unsigned int v146 = v16 + a9 - 1;
    if (v16 >> 5 <= v146 >> 5)
    {
      uint64_t v153 = (v20 - 1) >> 5;
      uint64_t v138 = (v18 - 1) >> 5;
      uint64_t v43 = v154;
      int v152 = ((v20 - 1) & 0x1F) + 1;
      int v137 = ((v18 - 1) & 0x1F) + 1;
      unint64_t v144 = v16;
      uint64_t v135 = v36 + 1;
      unint64_t v136 = (unint64_t)v16 >> 5;
      unsigned int v145 = v16;
      do
      {
        unsigned int v44 = (32 * v35) | 0x1F;
        if (32 * (int)v35 <= v151) {
          unsigned int v45 = v151;
        }
        else {
          unsigned int v45 = 32 * v35;
        }
        if (v139 < v44) {
          unsigned int v44 = v139;
        }
        unsigned int v143 = v45 - 32 * v35;
        int v150 = v44 - v45 + 1;
        if (v35 == v138) {
          unsigned int v46 = v137;
        }
        else {
          unsigned int v46 = 32;
        }
        uint64_t v149 = v141 + (v45 - v151) * a11;
        unint64_t v47 = v136;
        do
        {
          unint64_t v48 = 32 * v47;
          unint64_t v156 = v47 + 1;
          unsigned int v49 = 32 * (v47 + 1) - 1;
          if (32 * (int)v47 <= v16) {
            unsigned int v50 = v16;
          }
          else {
            unsigned int v50 = 32 * v47;
          }
          if (v146 < v49) {
            unsigned int v49 = v146;
          }
          int v51 = v49 - v50 + 1;
          if (v47 == v153) {
            unsigned int v52 = v152;
          }
          else {
            unsigned int v52 = 32;
          }
          BOOL v53 = 1;
          if (32 * (int)v35 >= v151 && v48 >= v144)
          {
            int v54 = v152;
            if (v47 != v153) {
              int v54 = 32;
            }
            BOOL v53 = v51 != v54 || v150 != v46;
          }
          unsigned int v56 = *(_DWORD *)(v43 + 128) >> (*(unsigned char *)(v43 + 144) + a12);
          if (v56 <= 1) {
            unsigned int v56 = 1;
          }
          unsigned int v57 = v56 + 31;
          if (v57 < 0x40) {
            unsigned int v58 = 0;
          }
          else {
            unsigned int v58 = 32 - __clz(~(-1 << -(char)__clz((v57 >> 5) - 1)));
          }
          unsigned int v59 = *(_DWORD *)(v43 + 132) >> (*(unsigned char *)(v43 + 144) + a12);
          if (v59 <= 1) {
            unsigned int v59 = 1;
          }
          unsigned int v60 = v59 + 31;
          if (v60 < 0x40)
          {
            unsigned int v61 = 0;
            if (!v58)
            {
LABEL_65:
              uint64_t v63 = 0;
              goto LABEL_66;
            }
          }
          else
          {
            unsigned int v61 = 32 - __clz(~(-1 << -(char)__clz((v60 >> 5) - 1)));
            if (!(v61 | v58)) {
              goto LABEL_65;
            }
          }
          int v62 = 0;
          uint64_t v63 = 0;
          BOOL v64 = v58 != 0;
          BOOL v65 = v61 != 0;
          int v66 = 1;
          do
          {
            --v58;
            if (v64) {
              v63 |= (unint64_t)(v66 & v47) << v62++;
            }
            else {
              unsigned int v58 = 0;
            }
            --v61;
            if (v65) {
              v63 |= (unint64_t)(v66 & v35) << v62++;
            }
            else {
              unsigned int v61 = 0;
            }
            v66 *= 2;
            --v62;
            BOOL v65 = v61 != 0;
            BOOL v64 = v58 != 0;
          }
          while (v61 | v58);
LABEL_66:
          size_t v67 = v35 * v140 + (v47 << 11);
          int v68 = v52 < 0x20 || v53;
          unsigned int v69 = (char *)(v148 + 32 * v63);
          uint64_t v70 = v149 + 2 * (v50 - v16);
          uint64_t v71 = (int32x4_t *)(v147 + v67);
          if (v46 < 0x20) {
            int v72 = 1;
          }
          else {
            int v72 = v68;
          }
          int v155 = v71;
          if (v157)
          {
            if (!v72)
            {
              int32x4_t v75 = (int32x4_t *)__dst;
LABEL_79:
              uint64_t v79 = 0;
              unsigned int v80 = v75;
              unint64_t v81 = (unint64_t)v75;
              do
              {
                uint64_t v82 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)2,1u>::kSubblockPositions[v79 + 1];
                uint64_t v83 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)2,1u>::kSubblockPositions[v79];
                unsigned int v84 = (v52 - 8 * v83) & ~((int)(v52 - 8 * v83) >> 31);
                if (v84 >= 8) {
                  unsigned int v84 = 8;
                }
                unsigned int v85 = (v46 - 4 * v82) & ~((int)(v46 - 4 * v82) >> 31);
                if (v85 >= 4) {
                  unsigned int v85 = 4;
                }
                if (v84) {
                  BOOL v86 = v85 == 0;
                }
                else {
                  BOOL v86 = 1;
                }
                if (v86) {
                  *unsigned int v69 = 0;
                }
                else {
                  v81 += AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)2,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)2,(AGXTextureFootprint)0>::compressSubblock(v81, v69, (int32x4_t *)(v70 + 4 * a11 * v82 + 16 * v83), a11, v84, v85, *(double *)&v26, *(double *)&v27, v28, v29, v30, v31, v32, v33);
                }
                ++v69;
                v79 += 2;
              }
              while (v79 != 64);
              unsigned int v16 = v145;
              unint64_t v78 = v156;
              uint64_t v77 = v80;
              goto LABEL_142;
            }
            int v73 = v51;
            unsigned int v74 = v50;
            memcpy(__dst, v71, 0x800uLL);
            unsigned int v50 = v74;
            int v51 = v73;
            int32x4_t v75 = (int32x4_t *)__dst;
          }
          else
          {
            int32x4_t v75 = v71;
            if (!v72) {
              goto LABEL_79;
            }
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE2ELj1ELh0ELNS7_13SubblockOrderE2EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder3EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = v154;
          uint64_t v159 = v75;
          unsigned __int8 v167 = v52;
          unsigned __int8 v168 = v46;
          unsigned int v163 = v143;
          unsigned int v164 = v50 - v48;
          unsigned int v160 = v69;
          uint64_t v161 = v70;
          uint64_t v162 = a11;
          unsigned int v165 = v150;
          unsigned int v166 = v51;
          if (v53)
          {
            unint64_t v76 = v75;
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(v154 + 8) + 7384), block);
            uint64_t v77 = v76;
            unsigned int v16 = v145;
            unint64_t v78 = v156;
            goto LABEL_142;
          }
          uint64_t v87 = 0;
          __src = v75;
          unint64_t v88 = v75;
          do
          {
            int v89 = *v69++;
            unint64_t v88 = (int32x4_t *)((char *)v88
                              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)2,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)2,(AGXTextureFootprint)0>::decompressSubblock((int32x4_t *)&__dst[256* (unint64_t)AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)2,1u>::kSubblockPositions[v87 + 1]+ 2048+ 16* AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)2,1u>::kSubblockPositions[v87]], 64, v88, v89, *(double *)&v26, *(double *)&v27, v28, *(int8x8_t *)&v29));
            v87 += 2;
          }
          while (v87 != 64);
          uint64_t v90 = v165;
          if (v165 && v166)
          {
            uint64_t v91 = 0;
            unint64_t v92 = (unint64_t)v163 << 6;
            uint64_t v93 = 2 * v164;
            unint64_t v94 = &__dst[v92 + 2048 + v93];
            uint64_t v95 = v161;
            uint64_t v96 = v162;
            unint64_t v97 = 2 * v166;
            if (v97 <= 1) {
              unint64_t v98 = 1;
            }
            else {
              unint64_t v98 = 2 * v166;
            }
            unint64_t v99 = v92 + v93;
            BOOL v100 = &__dst[v92 + 2048 + v93];
            if (v98) {
              BOOL v101 = (v98 - 1) >> 32 == 0;
            }
            else {
              BOOL v101 = 0;
            }
            uint64_t v102 = v98 & 0x1FFFFFFE0;
            uint64_t v103 = v98 & 0x1FFFFFFF8;
            char v105 = !v101 || v98 < 8;
            long long v106 = &__dst[v99 + 2064];
            uint64_t v107 = (long long *)(v161 + 16);
            char v108 = v94;
            uint64_t v109 = v161;
            do
            {
              uint64_t v110 = (char *)(v95 + v96 * v91);
              char v111 = &v94[64 * v91];
              if ((unint64_t)(&v100[64 * v91] - v110) < 0x20) {
                char v112 = 1;
              }
              else {
                char v112 = v105;
              }
              if (v112)
              {
                int v113 = 0;
                goto LABEL_126;
              }
              if (v98 >= 0x20)
              {
                uint64_t v115 = v107;
                uint64_t v116 = v106;
                uint64_t v117 = v98 & 0x1FFFFFFE0;
                do
                {
                  long long v26 = *(v115 - 1);
                  long long v27 = *v115;
                  *(v116 - 1) = v26;
                  *uint64_t v116 = v27;
                  v116 += 2;
                  v115 += 2;
                  v117 -= 32;
                }
                while (v117);
                if (v98 == v102) {
                  goto LABEL_109;
                }
                uint64_t v114 = v98 & 0x1FFFFFFE0;
                if ((v98 & 0x18) == 0)
                {
                  v110 += v102;
                  v111 += v102;
                  int v113 = v98 & 0xFFFFFFE0;
                  goto LABEL_126;
                }
              }
              else
              {
                uint64_t v114 = 0;
              }
              v111 += v103;
              uint64_t v118 = v114 - v103;
              char v119 = (uint64_t *)(v109 + v114);
              uint64_t v120 = &v108[v114];
              do
              {
                uint64_t v121 = *v119++;
                *(void *)&long long v26 = v121;
                *v120++ = v121;
                v118 += 8;
              }
              while (v118);
              if (v98 == v103) {
                goto LABEL_109;
              }
              v110 += v103;
              int v113 = v98 & 0xFFFFFFF8;
LABEL_126:
              unsigned int v122 = v113 + 1;
              do
              {
                char v123 = *v110++;
                *v111++ = v123;
              }
              while (v97 > v122++);
LABEL_109:
              ++v91;
              v106 += 64;
              uint64_t v107 = (long long *)((char *)v107 + v96);
              v109 += v96;
              v108 += 64;
            }
            while (v91 != v90);
          }
          uint64_t v125 = 0;
          unint64_t v126 = (unint64_t)v159;
          uint64_t v127 = v160;
          int v128 = v167;
          int v129 = v168;
          do
          {
            uint64_t v130 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)2,1u>::kSubblockPositions[v125 + 1];
            uint64_t v131 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)2,1u>::kSubblockPositions[v125];
            unsigned int v132 = (v128 - 8 * v131) & ~((v128 - 8 * (int)v131) >> 31);
            if (v132 >= 8) {
              unsigned int v132 = 8;
            }
            unsigned int v133 = (v129 - 4 * v130) & ~((v129 - 4 * (int)v130) >> 31);
            if (v133 >= 4) {
              unsigned int v133 = 4;
            }
            if (v132) {
              BOOL v134 = v133 == 0;
            }
            else {
              BOOL v134 = 1;
            }
            if (v134) {
              *uint64_t v127 = 0;
            }
            else {
              v126 += AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)2,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)2,(AGXTextureFootprint)0>::compressSubblock(v126, v127, (int32x4_t *)&__dst[256 * v130 + 2048 + 16 * v131], 64, v132, v133, *(double *)&v26, *(double *)&v27, v28, v29, v30, v31, v32, v33);
            }
            ++v127;
            v125 += 2;
          }
          while (v125 != 64);
          unsigned int v16 = v145;
          unint64_t v78 = v156;
          uint64_t v77 = __src;
LABEL_142:
          uint64_t result = (uint64_t)v155;
          if (v157) {
            uint64_t result = (uint64_t)memcpy(v155, v77, 0x800uLL);
          }
          unint64_t v47 = v78;
          uint64_t v43 = v154;
        }
        while (v78 != (v146 >> 5) + 1);
        ++v35;
      }
      while (v35 != v135);
    }
  }
  return result;
}

uint64_t AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)2,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)2,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)3>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10, uint64_t a11, char a12)
{
  uint64_t v12 = MEMORY[0x270FA5388](a1);
  unsigned int v14 = v13;
  unsigned int v156 = v15;
  int v17 = v16;
  int v19 = v18;
  uint64_t v146 = v20;
  uint64_t v147 = v21;
  uint64_t v140 = v22;
  uint64_t v23 = v12;
  uint64_t v169 = *MEMORY[0x263EF8340];
  size_t v139 = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(v12, 0);
  unsigned int v150 = v14;
  uint64_t v28 = v14 >> 5;
  unsigned int v138 = v14 + a10 - 1;
  unsigned int v29 = v138 >> 5;
  uint64_t v151 = v23;
  if (*(void *)(v23 + 168)) {
    int v30 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v30 = 0;
  }
  BOOL v31 = (v30 & 0xD00) == 0 || v30 == 768;
  int v32 = v30 & 0xE00;
  int v34 = !v31 && v32 != 1024;
  int v155 = v34;
  uint64_t result = v23;
  if (v28 <= v29)
  {
    unsigned int v145 = v156 + a9 - 1;
    if (v156 >> 5 <= v145 >> 5)
    {
      uint64_t v153 = (v19 - 1) >> 5;
      uint64_t v137 = (v17 - 1) >> 5;
      int v152 = ((v19 - 1) & 0x1F) + 1;
      int v136 = ((v17 - 1) & 0x1F) + 1;
      uint64_t v135 = v29 + 1;
      uint64_t v36 = 2 * a11;
      do
      {
        unsigned int v37 = (32 * v28) | 0x1F;
        if (32 * (int)v28 <= v150) {
          unsigned int v38 = v150;
        }
        else {
          unsigned int v38 = 32 * v28;
        }
        if (v138 < v37) {
          unsigned int v37 = v138;
        }
        unsigned int v144 = v38 - 32 * v28;
        int v149 = v37 - v38 + 1;
        if (v28 == v137) {
          unsigned int v39 = v136;
        }
        else {
          unsigned int v39 = 32;
        }
        uint64_t v148 = v140 + (v38 - v150) * a11;
        unint64_t v40 = (unint64_t)v156 >> 5;
        do
        {
          unint64_t v41 = 32 * v40;
          unsigned int v42 = 32 * (v40 + 1) - 1;
          if (32 * (int)v40 <= v156) {
            unsigned int v43 = v156;
          }
          else {
            unsigned int v43 = 32 * v40;
          }
          if (v145 < v42) {
            unsigned int v42 = v156 + a9 - 1;
          }
          int v44 = v42 - v43 + 1;
          if (v40 == v153) {
            unsigned int v45 = v152;
          }
          else {
            unsigned int v45 = 32;
          }
          BOOL v46 = 1;
          unint64_t v154 = v40 + 1;
          if (32 * (int)v28 >= v150 && v41 >= v156)
          {
            int v47 = v152;
            if (v40 != v153) {
              int v47 = 32;
            }
            BOOL v46 = v44 != v47 || v149 != v39;
          }
          unsigned int v49 = *(_DWORD *)(result + 128) >> (*(unsigned char *)(result + 144) + a12);
          if (v49 <= 1) {
            unsigned int v49 = 1;
          }
          unsigned int v50 = v49 + 31;
          if (v50 < 0x40) {
            unsigned int v51 = 0;
          }
          else {
            unsigned int v51 = 32 - __clz(~(-1 << -(char)__clz((v50 >> 5) - 1)));
          }
          unsigned int v52 = *(_DWORD *)(result + 132) >> (*(unsigned char *)(result + 144) + a12);
          if (v52 <= 1) {
            unsigned int v52 = 1;
          }
          unsigned int v53 = v52 + 31;
          if (v53 < 0x40)
          {
            unsigned int v54 = 0;
            if (!v51)
            {
LABEL_65:
              uint64_t v56 = 0;
              goto LABEL_66;
            }
          }
          else
          {
            unsigned int v54 = 32 - __clz(~(-1 << -(char)__clz((v53 >> 5) - 1)));
            if (!(v54 | v51)) {
              goto LABEL_65;
            }
          }
          int v55 = 0;
          uint64_t v56 = 0;
          BOOL v57 = v51 != 0;
          BOOL v58 = v54 != 0;
          int v59 = 1;
          do
          {
            --v51;
            if (v57) {
              v56 |= (unint64_t)(v59 & v40) << v55++;
            }
            else {
              unsigned int v51 = 0;
            }
            --v54;
            if (v58) {
              v56 |= (unint64_t)(v59 & v28) << v55++;
            }
            else {
              unsigned int v54 = 0;
            }
            v59 *= 2;
            --v55;
            BOOL v58 = v54 != 0;
            BOOL v57 = v51 != 0;
          }
          while (v54 | v51);
LABEL_66:
          size_t v60 = v28 * v139 + (v40 << 11);
          int v61 = v45 < 0x20 || v46;
          int v62 = (char *)(v147 + 32 * v56);
          uint64_t v63 = (int32x4_t *)(v148 + 2 * (v43 - v156));
          BOOL v64 = (int32x4_t *)(v146 + v60);
          if (v39 < 0x20) {
            int v65 = 1;
          }
          else {
            int v65 = v61;
          }
          if (v155)
          {
            if (!v65)
            {
              int v68 = (int32x4_t *)__dst;
LABEL_80:
              uint64_t v71 = 0;
              int v72 = (float *)v68;
              do
              {
                uint64_t v78 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)2,1u>::kSubblockPositions[v71 + 1];
                uint64_t v79 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)2,1u>::kSubblockPositions[v71];
                unsigned int v80 = (v45 - 8 * v79) & ~((int)(v45 - 8 * v79) >> 31);
                if (v80 >= 8) {
                  unsigned int v80 = 8;
                }
                unsigned int v81 = (v39 - 4 * v78) & ~((int)(v39 - 4 * v78) >> 31);
                if (v81 >= 4) {
                  unsigned int v81 = 4;
                }
                if (v80) {
                  BOOL v82 = v81 == 0;
                }
                else {
                  BOOL v82 = 1;
                }
                if (v82)
                {
                  char v77 = 0;
                }
                else
                {
                  int v73 = (float32x2x2_t *)&v63[v79].i8[4 * a11 * v78];
                  float32x2x2_t v24 = *v73;
                  int32x4_t v25 = *(int32x4_t *)((char *)v73 + a11);
                  unsigned int v74 = (int32x4_t *)((char *)v73 + v36);
                  float32x2x2_t v26 = (float32x2x2_t)*v74;
                  float32x2x2_t v27 = *(float32x2x2_t *)((char *)v74 + a11);
                  int32x4_t v75 = vzip2q_s32(*v74, (int32x4_t)v27);
                  unint64_t v76 = v72;
                  vst2_f32(v76, v24);
                  v76 += 4;
                  vst2_f32(v76, v26);
                  *((int32x4_t *)v72 + 2) = vzip2q_s32((int32x4_t)v24, v25);
                  *((int32x4_t *)v72 + 3) = v75;
                  v72 += 16;
                  char v77 = 63;
                }
                *v62++ = v77;
                v71 += 2;
              }
              while (v71 != 64);
              if (v155) {
                goto LABEL_144;
              }
              goto LABEL_27;
            }
            int v66 = v64;
            int v142 = v44;
            int v141 = v41;
            unsigned int v67 = v43;
            memcpy(__dst, v64, 0x800uLL);
            unsigned int v43 = v67;
            LODWORD(v41) = v141;
            int v44 = v142;
            int v68 = (int32x4_t *)__dst;
            BOOL v64 = v66;
            uint64_t result = v151;
          }
          else
          {
            int v68 = v64;
            if (!v65) {
              goto LABEL_80;
            }
          }
          unsigned int v69 = v64;
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE2ELj1ELh1ELNS7_13SubblockOrderE2EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder3EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = result;
          uint64_t v158 = v68;
          unsigned __int8 v166 = v45;
          unsigned __int8 v167 = v39;
          unsigned int v162 = v144;
          unsigned int v163 = v43 - v41;
          uint64_t v159 = v62;
          unsigned int v160 = v63;
          uint64_t v161 = a11;
          unsigned int v164 = v149;
          unsigned int v165 = v44;
          if (v46)
          {
            uint64_t v70 = v68;
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(result + 8) + 7384), block);
            int v68 = v70;
            uint64_t result = v151;
            uint64_t v36 = 2 * a11;
            BOOL v64 = v69;
            if (!v155) {
              goto LABEL_27;
            }
LABEL_144:
            memcpy(v64, v68, 0x800uLL);
            uint64_t v36 = 2 * a11;
            uint64_t result = v151;
            goto LABEL_27;
          }
          uint64_t v83 = 0;
          unsigned int v143 = v68;
          unsigned int v84 = v68;
          do
          {
            int v85 = *v62++;
            unsigned int v84 = (int32x4_t *)((char *)v84
                              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)2,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)2,(AGXTextureFootprint)0>::decompressSubblock((int32x4_t *)&__dst[256* (unint64_t)AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)2,1u>::kSubblockPositions[v83 + 1]+ 2048+ 16* AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)2,1u>::kSubblockPositions[v83]], 64, v84, v85, *(double *)v24.val, *(double *)v25.i64, *(double *)v26.val, (int8x8_t)v27.val[0]));
            v83 += 2;
          }
          while (v83 != 64);
          uint64_t v86 = v164;
          if (v164 && v165)
          {
            uint64_t v87 = 0;
            unint64_t v88 = (unint64_t)v162 << 6;
            uint64_t v89 = 2 * v163;
            uint64_t v90 = &__dst[v88 + 2048 + v89];
            uint64_t v91 = v160;
            uint64_t v92 = v161;
            unint64_t v93 = 2 * v165;
            if (v93 <= 1) {
              unint64_t v94 = 1;
            }
            else {
              unint64_t v94 = 2 * v165;
            }
            unint64_t v95 = v88 + v89;
            uint64_t v96 = &__dst[v88 + 2048 + v89];
            if (v94) {
              BOOL v97 = (v94 - 1) >> 32 == 0;
            }
            else {
              BOOL v97 = 0;
            }
            uint64_t v98 = v94 & 0x1FFFFFFE0;
            uint64_t v99 = v94 & 0x1FFFFFFF8;
            char v101 = !v97 || v94 < 8;
            uint64_t v102 = (int32x4_t *)&__dst[v95 + 2064];
            uint64_t v103 = v160 + 1;
            char v104 = v90;
            char v105 = v160;
            do
            {
              long long v106 = &v91->i8[v92 * v87];
              uint64_t v107 = &v90[64 * v87];
              if ((unint64_t)(&v96[64 * v87] - v106) < 0x20) {
                char v108 = 1;
              }
              else {
                char v108 = v101;
              }
              if (v108)
              {
                int v109 = 0;
                goto LABEL_128;
              }
              if (v94 >= 0x20)
              {
                char v111 = v103;
                char v112 = v102;
                uint64_t v113 = v94 & 0x1FFFFFFE0;
                do
                {
                  float32x2x2_t v24 = (float32x2x2_t)v111[-1];
                  int32x4_t v25 = *v111;
                  v112[-1] = (int32x4_t)v24;
                  *char v112 = v25;
                  v112 += 2;
                  v111 += 2;
                  v113 -= 32;
                }
                while (v113);
                if (v94 == v98) {
                  goto LABEL_111;
                }
                uint64_t v110 = v94 & 0x1FFFFFFE0;
                if ((v94 & 0x18) == 0)
                {
                  v106 += v98;
                  v107 += v98;
                  int v109 = v94 & 0xFFFFFFE0;
                  goto LABEL_128;
                }
              }
              else
              {
                uint64_t v110 = 0;
              }
              v107 += v99;
              uint64_t v114 = v110 - v99;
              uint64_t v115 = (float32x2_t *)&v105->i8[v110];
              uint64_t v116 = (float32x2_t *)&v104[v110];
              do
              {
                float32x2_t v117 = *v115++;
                v24.val[0] = v117;
                *v116++ = v117;
                v114 += 8;
              }
              while (v114);
              if (v94 == v99) {
                goto LABEL_111;
              }
              v106 += v99;
              int v109 = v94 & 0xFFFFFFF8;
LABEL_128:
              unsigned int v118 = v109 + 1;
              do
              {
                char v119 = *v106++;
                *v107++ = v119;
              }
              while (v93 > v118++);
LABEL_111:
              ++v87;
              v102 += 4;
              uint64_t v103 = (int32x4_t *)((char *)v103 + v92);
              char v105 = (int32x4_t *)((char *)v105 + v92);
              v104 += 64;
            }
            while (v87 != v86);
          }
          uint64_t v121 = 0;
          unsigned int v122 = v158;
          char v123 = v159;
          int v124 = v166;
          int v125 = v167;
          uint64_t v36 = 2 * a11;
          BOOL v64 = v69;
          do
          {
            uint64_t v130 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)2,1u>::kSubblockPositions[v121 + 1];
            uint64_t v131 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)2,1u>::kSubblockPositions[v121];
            unsigned int v132 = (v124 - 8 * v131) & ~((v124 - 8 * (int)v131) >> 31);
            if (v132 >= 8) {
              unsigned int v132 = 8;
            }
            unsigned int v133 = (v125 - 4 * v130) & ~((v125 - 4 * (int)v130) >> 31);
            if (v133 >= 4) {
              unsigned int v133 = 4;
            }
            if (v132) {
              BOOL v134 = v133 == 0;
            }
            else {
              BOOL v134 = 1;
            }
            if (v134)
            {
              char v129 = 0;
            }
            else
            {
              unint64_t v126 = (int32x4_t *)&__dst[256 * v130 + 2048 + 16 * v131];
              float32x2x2_t v24 = (float32x2x2_t)*v126;
              int32x4_t v25 = v126[4];
              float32x2x2_t v26 = (float32x2x2_t)vzip2q_s32(*v126, v25);
              float32x2x2_t v27 = (float32x2x2_t)v126[8];
              int32x4_t v127 = v126[12];
              int v128 = (float *)v122;
              vst2_f32(v128, v24);
              v128 += 4;
              vst2_f32(v128, v27);
              v122[2] = (int32x4_t)v26;
              v122[3] = vzip2q_s32((int32x4_t)v27, v127);
              v122 += 4;
              char v129 = 63;
            }
            *v123++ = v129;
            v121 += 2;
          }
          while (v121 != 64);
          uint64_t result = v151;
          int v68 = v143;
          if (v155) {
            goto LABEL_144;
          }
LABEL_27:
          unint64_t v40 = v154;
        }
        while (v154 != (v145 >> 5) + 1);
        ++v28;
      }
      while (v28 != v135);
    }
  }
  return result;
}

uint64_t AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)2,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)2,(AGXTextureFootprint)1>,false,(AGXHardwareTextureMemoryOrder)3>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10, uint64_t a11, char a12)
{
  uint64_t v12 = MEMORY[0x270FA5388](a1);
  unsigned int v14 = v13;
  unsigned int v16 = v15;
  int v18 = v17;
  int v20 = v19;
  uint64_t v147 = v21;
  uint64_t v148 = v22;
  uint64_t v141 = v23;
  uint64_t v24 = v12;
  uint64_t v170 = *MEMORY[0x263EF8340];
  size_t v140 = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(v12, 0);
  unsigned int v151 = v14;
  uint64_t v33 = v14 >> 5;
  unsigned int v139 = v14 + a10 - 1;
  unsigned int v34 = v139 >> 5;
  uint64_t result = *(void *)(v24 + 168);
  if (result)
  {
    uint64_t result = IOSurfaceGetCacheMode();
    int v36 = result & 0xF00;
  }
  else
  {
    int v36 = 0;
  }
  BOOL v37 = (v36 & 0xD00) == 0 || v36 == 768;
  int v38 = v36 & 0xE00;
  int v40 = !v37 && v38 != 1024;
  int v157 = v40;
  if (v33 <= v34)
  {
    unsigned int v146 = v16 + a9 - 1;
    if (v16 >> 5 <= v146 >> 5)
    {
      uint64_t v153 = (v20 - 1) >> 5;
      uint64_t v138 = (v18 - 1) >> 5;
      int v152 = ((v20 - 1) & 0x1F) + 1;
      int v137 = ((v18 - 1) & 0x1F) + 1;
      unint64_t v144 = v16;
      uint64_t v135 = v34 + 1;
      unint64_t v136 = (unint64_t)v16 >> 5;
      unsigned int v145 = v16;
      uint64_t v156 = v24;
      do
      {
        unsigned int v41 = (32 * v33) | 0x1F;
        if (32 * (int)v33 <= v151) {
          unsigned int v42 = v151;
        }
        else {
          unsigned int v42 = 32 * v33;
        }
        if (v139 < v41) {
          unsigned int v41 = v139;
        }
        unsigned int v143 = v42 - 32 * v33;
        int v150 = v41 - v42 + 1;
        if (v33 == v138) {
          unsigned int v43 = v137;
        }
        else {
          unsigned int v43 = 32;
        }
        uint64_t v149 = v141 + (v42 - v151) * a11;
        unint64_t v44 = v136;
        do
        {
          unint64_t v45 = 32 * v44;
          unsigned int v46 = 32 * (v44 + 1) - 1;
          if (32 * (int)v44 <= v16) {
            unsigned int v47 = v16;
          }
          else {
            unsigned int v47 = 32 * v44;
          }
          if (v146 < v46) {
            unsigned int v46 = v146;
          }
          int v48 = v46 - v47 + 1;
          if (v44 == v153) {
            unsigned int v49 = v152;
          }
          else {
            unsigned int v49 = 32;
          }
          BOOL v50 = 1;
          if (32 * (int)v33 >= v151 && v45 >= v144)
          {
            int v51 = v152;
            if (v44 != v153) {
              int v51 = 32;
            }
            BOOL v50 = v48 != v51 || v150 != v43;
          }
          unsigned int v53 = *(_DWORD *)(v24 + 128) >> (*(unsigned char *)(v24 + 144) + a12);
          if (v53 <= 1) {
            unsigned int v53 = 1;
          }
          unsigned int v54 = v53 + 31;
          if (v54 < 0x40) {
            unsigned int v55 = 0;
          }
          else {
            unsigned int v55 = 32 - __clz(~(-1 << -(char)__clz((v54 >> 5) - 1)));
          }
          unsigned int v56 = *(_DWORD *)(v24 + 132) >> (*(unsigned char *)(v24 + 144) + a12);
          if (v56 <= 1) {
            unsigned int v56 = 1;
          }
          unsigned int v57 = v56 + 31;
          if (v57 < 0x40) {
            unsigned int v58 = 0;
          }
          else {
            unsigned int v58 = 32 - __clz(~(-1 << -(char)__clz((v57 >> 5) - 1)));
          }
          unint64_t v155 = v44 + 1;
          if (v58 | v55)
          {
            int v59 = 0;
            uint64_t v60 = 0;
            BOOL v61 = v55 != 0;
            BOOL v62 = v58 != 0;
            int v63 = 1;
            do
            {
              --v55;
              if (v61) {
                v60 |= (unint64_t)(v63 & v44) << v59++;
              }
              else {
                unsigned int v55 = 0;
              }
              --v58;
              if (v62) {
                v60 |= (unint64_t)(v63 & v33) << v59++;
              }
              else {
                unsigned int v58 = 0;
              }
              v63 *= 2;
              --v59;
              BOOL v62 = v58 != 0;
              BOOL v61 = v55 != 0;
            }
            while (v58 | v55);
          }
          else
          {
            uint64_t v60 = 0;
          }
          uint64_t v64 = v33 * v140 + 1152 * v44;
          int v65 = v49 < 0x20 || v50;
          int v66 = (unsigned __int8 *)(v148 + 32 * v60);
          uint64_t v67 = v149 + 2 * (v47 - v16);
          int v68 = (int32x4_t *)(v147 + v64);
          if (v43 < 0x20) {
            int v69 = 1;
          }
          else {
            int v69 = v65;
          }
          unint64_t v154 = v68;
          if (v157)
          {
            if (!v69)
            {
              int v73 = (int32x4_t *)__dst;
LABEL_78:
              uint64_t v76 = 0;
              int v77 = *(_DWORD *)(*(void *)(v156 + 208) + 52);
              uint64_t v78 = v73;
              uint64_t v79 = (uint64_t)v73;
              do
              {
                uint64_t v80 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)2,1u>::kSubblockPositions[v76 + 1];
                uint64_t v81 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)2,1u>::kSubblockPositions[v76];
                unsigned int v82 = (v49 - 8 * v81) & ~((int)(v49 - 8 * v81) >> 31);
                if (v82 >= 8) {
                  unsigned int v82 = 8;
                }
                unsigned int v83 = (v43 - 4 * v80) & ~((int)(v43 - 4 * v80) >> 31);
                if (v83 >= 4) {
                  unsigned int v83 = 4;
                }
                if (v82) {
                  BOOL v84 = v83 == 0;
                }
                else {
                  BOOL v84 = 1;
                }
                if (v84) {
                  *int v66 = 0;
                }
                else {
                  v79 += AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)2,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)2,(AGXTextureFootprint)1>::compressSubblock(v79, v66, (int32x4_t *)(v67 + 4 * a11 * v80 + 16 * v81), a11, v82, v83, v77, *(double *)&v25, *(double *)&v26, v27, v28, v29, v30, v31, v32);
                }
                ++v66;
                v76 += 2;
              }
              while (v76 != 64);
              unsigned int v16 = v145;
              uint64_t v24 = v156;
              int32x4_t v75 = v78;
              goto LABEL_141;
            }
            int v70 = v48;
            BOOL v71 = v50;
            unsigned int v72 = v47;
            memcpy(__dst, v68, 0x800uLL);
            unsigned int v47 = v72;
            BOOL v50 = v71;
            int v48 = v70;
            unsigned int v16 = v145;
            int v73 = (int32x4_t *)__dst;
          }
          else
          {
            int v73 = v68;
            if (!v69) {
              goto LABEL_78;
            }
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE2ELj1ELh0ELNS7_13SubblockOrderE2EL19AGXTextureFootprint1EEELb0EL29AGXHardwareTextureMemoryOrder3EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = v156;
          uint64_t v159 = v73;
          unsigned __int8 v167 = v49;
          unsigned __int8 v168 = v43;
          unsigned int v163 = v143;
          unsigned int v164 = v47 - v45;
          unsigned int v160 = v66;
          uint64_t v161 = v67;
          uint64_t v162 = a11;
          unsigned int v165 = v150;
          unsigned int v166 = v48;
          if (v50)
          {
            unsigned int v74 = v73;
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(v156 + 8) + 7384), block);
            int32x4_t v75 = v74;
            uint64_t v24 = v156;
            goto LABEL_141;
          }
          uint64_t v85 = 0;
          int v86 = *(_DWORD *)(*(void *)(v156 + 208) + 52);
          __src = v73;
          uint64_t v87 = v73;
          do
          {
            unsigned int v88 = *v66++;
            uint64_t v87 = (int32x4_t *)((char *)v87
                              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)2,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)2,(AGXTextureFootprint)1>::decompressSubblock((uint64_t)&__dst[256* (unint64_t)AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)2,1u>::kSubblockPositions[v85 + 1]+ 2048+ 16* AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)2,1u>::kSubblockPositions[v85]], 64, v87, v88, v86, *(double *)&v25, *(double *)&v26, v27, *(int8x8_t *)&v28));
            v85 += 2;
          }
          while (v85 != 64);
          uint64_t v89 = v165;
          if (v165 && v166)
          {
            uint64_t v90 = 0;
            unint64_t v91 = (unint64_t)v163 << 6;
            uint64_t v92 = 2 * v164;
            unint64_t v93 = &__dst[v91 + 2048 + v92];
            uint64_t v94 = v161;
            uint64_t v95 = v162;
            unint64_t v96 = 2 * v166;
            if (v96 <= 1) {
              unint64_t v97 = 1;
            }
            else {
              unint64_t v97 = 2 * v166;
            }
            unint64_t v98 = v91 + v92;
            uint64_t v99 = &__dst[v91 + 2048 + v92];
            if (v97) {
              BOOL v100 = (v97 - 1) >> 32 == 0;
            }
            else {
              BOOL v100 = 0;
            }
            uint64_t v101 = v97 & 0x1FFFFFFE0;
            uint64_t v102 = v97 & 0x1FFFFFFF8;
            char v104 = !v100 || v97 < 8;
            char v105 = &__dst[v98 + 2064];
            long long v106 = (long long *)(v161 + 16);
            uint64_t v107 = v93;
            uint64_t v108 = v161;
            do
            {
              int v109 = (char *)(v94 + v95 * v90);
              uint64_t v110 = &v93[64 * v90];
              if ((unint64_t)(&v99[64 * v90] - v109) < 0x20) {
                char v111 = 1;
              }
              else {
                char v111 = v104;
              }
              if (v111)
              {
                int v112 = 0;
                goto LABEL_125;
              }
              if (v97 >= 0x20)
              {
                uint64_t v114 = v106;
                uint64_t v115 = v105;
                uint64_t v116 = v97 & 0x1FFFFFFE0;
                do
                {
                  long long v25 = *(v114 - 1);
                  long long v26 = *v114;
                  *(v115 - 1) = v25;
                  *uint64_t v115 = v26;
                  v115 += 2;
                  v114 += 2;
                  v116 -= 32;
                }
                while (v116);
                if (v97 == v101) {
                  goto LABEL_108;
                }
                uint64_t v113 = v97 & 0x1FFFFFFE0;
                if ((v97 & 0x18) == 0)
                {
                  v109 += v101;
                  v110 += v101;
                  int v112 = v97 & 0xFFFFFFE0;
                  goto LABEL_125;
                }
              }
              else
              {
                uint64_t v113 = 0;
              }
              v110 += v102;
              uint64_t v117 = v113 - v102;
              unsigned int v118 = (uint64_t *)(v108 + v113);
              char v119 = &v107[v113];
              do
              {
                uint64_t v120 = *v118++;
                *(void *)&long long v25 = v120;
                *v119++ = v120;
                v117 += 8;
              }
              while (v117);
              if (v97 == v102) {
                goto LABEL_108;
              }
              v109 += v102;
              int v112 = v97 & 0xFFFFFFF8;
LABEL_125:
              unsigned int v121 = v112 + 1;
              do
              {
                char v122 = *v109++;
                *v110++ = v122;
              }
              while (v96 > v121++);
LABEL_108:
              ++v90;
              v105 += 64;
              long long v106 = (long long *)((char *)v106 + v95);
              v108 += v95;
              v107 += 64;
            }
            while (v90 != v89);
          }
          uint64_t v124 = 0;
          uint64_t v125 = (uint64_t)v159;
          unint64_t v126 = v160;
          int v127 = v167;
          int v128 = v168;
          int v129 = *(_DWORD *)(*(void *)(v156 + 208) + 52);
          do
          {
            uint64_t v130 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)2,1u>::kSubblockPositions[v124 + 1];
            uint64_t v131 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)2,1u>::kSubblockPositions[v124];
            unsigned int v132 = (v127 - 8 * v131) & ~((v127 - 8 * (int)v131) >> 31);
            if (v132 >= 8) {
              unsigned int v132 = 8;
            }
            unsigned int v133 = (v128 - 4 * v130) & ~((v128 - 4 * (int)v130) >> 31);
            if (v133 >= 4) {
              unsigned int v133 = 4;
            }
            if (v132) {
              BOOL v134 = v133 == 0;
            }
            else {
              BOOL v134 = 1;
            }
            if (v134) {
              *unint64_t v126 = 0;
            }
            else {
              v125 += AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)2,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)2,(AGXTextureFootprint)1>::compressSubblock(v125, v126, (int32x4_t *)&__dst[256 * v130 + 2048 + 16 * v131], 64, v132, v133, v129, *(double *)&v25, *(double *)&v26, v27, v28, v29, v30, v31, v32);
            }
            ++v126;
            v124 += 2;
          }
          while (v124 != 64);
          unsigned int v16 = v145;
          uint64_t v24 = v156;
          int32x4_t v75 = __src;
LABEL_141:
          uint64_t result = (uint64_t)v154;
          if (v157) {
            uint64_t result = (uint64_t)memcpy(v154, v75, 0x800uLL);
          }
          unint64_t v44 = v155;
        }
        while (v155 != (v146 >> 5) + 1);
        ++v33;
      }
      while (v33 != v135);
    }
  }
  return result;
}

uint64_t AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)2,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)2,(AGXTextureFootprint)2>,false,(AGXHardwareTextureMemoryOrder)3>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10, uint64_t a11, char a12)
{
  uint64_t v12 = MEMORY[0x270FA5388](a1);
  unsigned int v14 = v13;
  unsigned int v16 = v15;
  int v18 = v17;
  int v20 = v19;
  uint64_t v147 = v21;
  uint64_t v148 = v22;
  uint64_t v141 = v23;
  uint64_t v24 = v12;
  uint64_t v170 = *MEMORY[0x263EF8340];
  size_t v140 = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(v12, 0);
  unsigned int v151 = v14;
  uint64_t v33 = v14 >> 5;
  unsigned int v139 = v14 + a10 - 1;
  unsigned int v34 = v139 >> 5;
  uint64_t result = *(void *)(v24 + 168);
  if (result)
  {
    uint64_t result = IOSurfaceGetCacheMode();
    int v36 = result & 0xF00;
  }
  else
  {
    int v36 = 0;
  }
  BOOL v37 = (v36 & 0xD00) == 0 || v36 == 768;
  int v38 = v36 & 0xE00;
  int v40 = !v37 && v38 != 1024;
  int v157 = v40;
  if (v33 <= v34)
  {
    unsigned int v146 = v16 + a9 - 1;
    if (v16 >> 5 <= v146 >> 5)
    {
      uint64_t v153 = (v20 - 1) >> 5;
      uint64_t v138 = (v18 - 1) >> 5;
      int v152 = ((v20 - 1) & 0x1F) + 1;
      int v137 = ((v18 - 1) & 0x1F) + 1;
      unint64_t v144 = v16;
      uint64_t v135 = v34 + 1;
      unint64_t v136 = (unint64_t)v16 >> 5;
      unsigned int v145 = v16;
      uint64_t v156 = v24;
      do
      {
        unsigned int v41 = (32 * v33) | 0x1F;
        if (32 * (int)v33 <= v151) {
          unsigned int v42 = v151;
        }
        else {
          unsigned int v42 = 32 * v33;
        }
        if (v139 < v41) {
          unsigned int v41 = v139;
        }
        unsigned int v143 = v42 - 32 * v33;
        int v150 = v41 - v42 + 1;
        if (v33 == v138) {
          unsigned int v43 = v137;
        }
        else {
          unsigned int v43 = 32;
        }
        uint64_t v149 = v141 + (v42 - v151) * a11;
        unint64_t v44 = v136;
        do
        {
          unint64_t v45 = 32 * v44;
          unsigned int v46 = 32 * (v44 + 1) - 1;
          if (32 * (int)v44 <= v16) {
            unsigned int v47 = v16;
          }
          else {
            unsigned int v47 = 32 * v44;
          }
          if (v146 < v46) {
            unsigned int v46 = v146;
          }
          int v48 = v46 - v47 + 1;
          if (v44 == v153) {
            unsigned int v49 = v152;
          }
          else {
            unsigned int v49 = 32;
          }
          BOOL v50 = 1;
          if (32 * (int)v33 >= v151 && v45 >= v144)
          {
            int v51 = v152;
            if (v44 != v153) {
              int v51 = 32;
            }
            BOOL v50 = v48 != v51 || v150 != v43;
          }
          unsigned int v53 = *(_DWORD *)(v24 + 128) >> (*(unsigned char *)(v24 + 144) + a12);
          if (v53 <= 1) {
            unsigned int v53 = 1;
          }
          unsigned int v54 = v53 + 31;
          if (v54 < 0x40) {
            unsigned int v55 = 0;
          }
          else {
            unsigned int v55 = 32 - __clz(~(-1 << -(char)__clz((v54 >> 5) - 1)));
          }
          unsigned int v56 = *(_DWORD *)(v24 + 132) >> (*(unsigned char *)(v24 + 144) + a12);
          if (v56 <= 1) {
            unsigned int v56 = 1;
          }
          unsigned int v57 = v56 + 31;
          if (v57 < 0x40) {
            unsigned int v58 = 0;
          }
          else {
            unsigned int v58 = 32 - __clz(~(-1 << -(char)__clz((v57 >> 5) - 1)));
          }
          unint64_t v155 = v44 + 1;
          if (v58 | v55)
          {
            int v59 = 0;
            uint64_t v60 = 0;
            BOOL v61 = v55 != 0;
            BOOL v62 = v58 != 0;
            int v63 = 1;
            do
            {
              --v55;
              if (v61) {
                v60 |= (unint64_t)(v63 & v44) << v59++;
              }
              else {
                unsigned int v55 = 0;
              }
              --v58;
              if (v62) {
                v60 |= (unint64_t)(v63 & v33) << v59++;
              }
              else {
                unsigned int v58 = 0;
              }
              v63 *= 2;
              --v59;
              BOOL v62 = v58 != 0;
              BOOL v61 = v55 != 0;
            }
            while (v58 | v55);
          }
          else
          {
            uint64_t v60 = 0;
          }
          size_t v64 = v33 * v140 + (v44 << 10);
          int v65 = v49 < 0x20 || v50;
          int v66 = (unsigned __int8 *)(v148 + 32 * v60);
          uint64_t v67 = v149 + 2 * (v47 - v16);
          int v68 = (int32x4_t *)(v147 + v64);
          if (v43 < 0x20) {
            int v69 = 1;
          }
          else {
            int v69 = v65;
          }
          unint64_t v154 = v68;
          if (v157)
          {
            if (!v69)
            {
              int v73 = (int32x4_t *)__dst;
LABEL_78:
              uint64_t v76 = 0;
              int v77 = *(_DWORD *)(*(void *)(v156 + 208) + 52);
              uint64_t v78 = v73;
              unint64_t v79 = (unint64_t)v73;
              do
              {
                uint64_t v80 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)2,1u>::kSubblockPositions[v76 + 1];
                uint64_t v81 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)2,1u>::kSubblockPositions[v76];
                unsigned int v82 = (v49 - 8 * v81) & ~((int)(v49 - 8 * v81) >> 31);
                if (v82 >= 8) {
                  unsigned int v82 = 8;
                }
                unsigned int v83 = (v43 - 4 * v80) & ~((int)(v43 - 4 * v80) >> 31);
                if (v83 >= 4) {
                  unsigned int v83 = 4;
                }
                if (v82) {
                  BOOL v84 = v83 == 0;
                }
                else {
                  BOOL v84 = 1;
                }
                if (v84) {
                  *int v66 = 0;
                }
                else {
                  v79 += AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)2,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)2,(AGXTextureFootprint)2>::compressSubblock(v79, v66, (int32x4_t *)(v67 + 4 * a11 * v80 + 16 * v81), a11, v82, v83, v77, *(double *)&v25, *(double *)&v26, v27, v28, v29, v30, v31, v32);
                }
                ++v66;
                v76 += 2;
              }
              while (v76 != 64);
              unsigned int v16 = v145;
              uint64_t v24 = v156;
              int32x4_t v75 = v78;
              goto LABEL_141;
            }
            int v70 = v48;
            BOOL v71 = v50;
            unsigned int v72 = v47;
            memcpy(__dst, v68, 0x800uLL);
            unsigned int v47 = v72;
            BOOL v50 = v71;
            int v48 = v70;
            unsigned int v16 = v145;
            int v73 = (int32x4_t *)__dst;
          }
          else
          {
            int v73 = v68;
            if (!v69) {
              goto LABEL_78;
            }
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE2ELj1ELh0ELNS7_13SubblockOrderE2EL19AGXTextureFootprint2EEELb0EL29AGXHardwareTextureMemoryOrder3EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = v156;
          uint64_t v159 = v73;
          unsigned __int8 v167 = v49;
          unsigned __int8 v168 = v43;
          unsigned int v163 = v143;
          unsigned int v164 = v47 - v45;
          unsigned int v160 = v66;
          uint64_t v161 = v67;
          uint64_t v162 = a11;
          unsigned int v165 = v150;
          unsigned int v166 = v48;
          if (v50)
          {
            unsigned int v74 = v73;
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(v156 + 8) + 7384), block);
            int32x4_t v75 = v74;
            uint64_t v24 = v156;
            goto LABEL_141;
          }
          uint64_t v85 = 0;
          int v86 = *(_DWORD *)(*(void *)(v156 + 208) + 52);
          __src = v73;
          uint64_t v87 = v73;
          do
          {
            unsigned int v88 = *v66++;
            uint64_t v87 = (int32x4_t *)((char *)v87
                              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)2,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)2,(AGXTextureFootprint)2>::decompressSubblock((uint64_t)&__dst[256* (unint64_t)AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)2,1u>::kSubblockPositions[v85 + 1]+ 2048+ 16* AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)2,1u>::kSubblockPositions[v85]], 64, v87, v88, v86, *(double *)&v25, *(double *)&v26, v27, *(int8x8_t *)&v28));
            v85 += 2;
          }
          while (v85 != 64);
          uint64_t v89 = v165;
          if (v165 && v166)
          {
            uint64_t v90 = 0;
            unint64_t v91 = (unint64_t)v163 << 6;
            uint64_t v92 = 2 * v164;
            unint64_t v93 = &__dst[v91 + 2048 + v92];
            uint64_t v94 = v161;
            uint64_t v95 = v162;
            unint64_t v96 = 2 * v166;
            if (v96 <= 1) {
              unint64_t v97 = 1;
            }
            else {
              unint64_t v97 = 2 * v166;
            }
            unint64_t v98 = v91 + v92;
            uint64_t v99 = &__dst[v91 + 2048 + v92];
            if (v97) {
              BOOL v100 = (v97 - 1) >> 32 == 0;
            }
            else {
              BOOL v100 = 0;
            }
            uint64_t v101 = v97 & 0x1FFFFFFE0;
            uint64_t v102 = v97 & 0x1FFFFFFF8;
            char v104 = !v100 || v97 < 8;
            char v105 = &__dst[v98 + 2064];
            long long v106 = (long long *)(v161 + 16);
            uint64_t v107 = v93;
            uint64_t v108 = v161;
            do
            {
              int v109 = (char *)(v94 + v95 * v90);
              uint64_t v110 = &v93[64 * v90];
              if ((unint64_t)(&v99[64 * v90] - v109) < 0x20) {
                char v111 = 1;
              }
              else {
                char v111 = v104;
              }
              if (v111)
              {
                int v112 = 0;
                goto LABEL_125;
              }
              if (v97 >= 0x20)
              {
                uint64_t v114 = v106;
                uint64_t v115 = v105;
                uint64_t v116 = v97 & 0x1FFFFFFE0;
                do
                {
                  long long v25 = *(v114 - 1);
                  long long v26 = *v114;
                  *(v115 - 1) = v25;
                  *uint64_t v115 = v26;
                  v115 += 2;
                  v114 += 2;
                  v116 -= 32;
                }
                while (v116);
                if (v97 == v101) {
                  goto LABEL_108;
                }
                uint64_t v113 = v97 & 0x1FFFFFFE0;
                if ((v97 & 0x18) == 0)
                {
                  v109 += v101;
                  v110 += v101;
                  int v112 = v97 & 0xFFFFFFE0;
                  goto LABEL_125;
                }
              }
              else
              {
                uint64_t v113 = 0;
              }
              v110 += v102;
              uint64_t v117 = v113 - v102;
              unsigned int v118 = (uint64_t *)(v108 + v113);
              char v119 = &v107[v113];
              do
              {
                uint64_t v120 = *v118++;
                *(void *)&long long v25 = v120;
                *v119++ = v120;
                v117 += 8;
              }
              while (v117);
              if (v97 == v102) {
                goto LABEL_108;
              }
              v109 += v102;
              int v112 = v97 & 0xFFFFFFF8;
LABEL_125:
              unsigned int v121 = v112 + 1;
              do
              {
                char v122 = *v109++;
                *v110++ = v122;
              }
              while (v96 > v121++);
LABEL_108:
              ++v90;
              v105 += 64;
              long long v106 = (long long *)((char *)v106 + v95);
              v108 += v95;
              v107 += 64;
            }
            while (v90 != v89);
          }
          uint64_t v124 = 0;
          unint64_t v125 = (unint64_t)v159;
          unint64_t v126 = v160;
          int v127 = v167;
          int v128 = v168;
          int v129 = *(_DWORD *)(*(void *)(v156 + 208) + 52);
          do
          {
            uint64_t v130 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)2,1u>::kSubblockPositions[v124 + 1];
            uint64_t v131 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)2,1u>::kSubblockPositions[v124];
            unsigned int v132 = (v127 - 8 * v131) & ~((v127 - 8 * (int)v131) >> 31);
            if (v132 >= 8) {
              unsigned int v132 = 8;
            }
            unsigned int v133 = (v128 - 4 * v130) & ~((v128 - 4 * (int)v130) >> 31);
            if (v133 >= 4) {
              unsigned int v133 = 4;
            }
            if (v132) {
              BOOL v134 = v133 == 0;
            }
            else {
              BOOL v134 = 1;
            }
            if (v134) {
              *unint64_t v126 = 0;
            }
            else {
              v125 += AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)2,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)2,(AGXTextureFootprint)2>::compressSubblock(v125, v126, (int32x4_t *)&__dst[256 * v130 + 2048 + 16 * v131], 64, v132, v133, v129, *(double *)&v25, *(double *)&v26, v27, v28, v29, v30, v31, v32);
            }
            ++v126;
            v124 += 2;
          }
          while (v124 != 64);
          unsigned int v16 = v145;
          uint64_t v24 = v156;
          int32x4_t v75 = __src;
LABEL_141:
          uint64_t result = (uint64_t)v154;
          if (v157) {
            uint64_t result = (uint64_t)memcpy(v154, v75, 0x800uLL);
          }
          unint64_t v44 = v155;
        }
        while (v155 != (v146 >> 5) + 1);
        ++v33;
      }
      while (v33 != v135);
    }
  }
  return result;
}

uint64_t AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)2,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)2,(AGXTextureFootprint)3>,false,(AGXHardwareTextureMemoryOrder)3>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10, uint64_t a11, char a12)
{
  uint64_t v12 = MEMORY[0x270FA5388](a1);
  unsigned int v14 = v13;
  unsigned int v16 = v15;
  int v18 = v17;
  int v20 = v19;
  uint64_t v147 = v21;
  uint64_t v148 = v22;
  uint64_t v141 = v23;
  uint64_t v24 = v12;
  uint64_t v170 = *MEMORY[0x263EF8340];
  size_t v140 = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(v12, 0);
  unsigned int v151 = v14;
  uint64_t v33 = v14 >> 5;
  unsigned int v139 = v14 + a10 - 1;
  unsigned int v34 = v139 >> 5;
  uint64_t result = *(void *)(v24 + 168);
  if (result)
  {
    uint64_t result = IOSurfaceGetCacheMode();
    int v36 = result & 0xF00;
  }
  else
  {
    int v36 = 0;
  }
  BOOL v37 = (v36 & 0xD00) == 0 || v36 == 768;
  int v38 = v36 & 0xE00;
  int v40 = !v37 && v38 != 1024;
  int v157 = v40;
  if (v33 <= v34)
  {
    unsigned int v146 = v16 + a9 - 1;
    if (v16 >> 5 <= v146 >> 5)
    {
      uint64_t v153 = (v20 - 1) >> 5;
      uint64_t v138 = (v18 - 1) >> 5;
      int v152 = ((v20 - 1) & 0x1F) + 1;
      int v137 = ((v18 - 1) & 0x1F) + 1;
      unint64_t v144 = v16;
      uint64_t v135 = v34 + 1;
      unint64_t v136 = (unint64_t)v16 >> 5;
      unsigned int v145 = v16;
      uint64_t v156 = v24;
      do
      {
        unsigned int v41 = (32 * v33) | 0x1F;
        if (32 * (int)v33 <= v151) {
          unsigned int v42 = v151;
        }
        else {
          unsigned int v42 = 32 * v33;
        }
        if (v139 < v41) {
          unsigned int v41 = v139;
        }
        unsigned int v143 = v42 - 32 * v33;
        int v150 = v41 - v42 + 1;
        if (v33 == v138) {
          unsigned int v43 = v137;
        }
        else {
          unsigned int v43 = 32;
        }
        uint64_t v149 = v141 + (v42 - v151) * a11;
        unint64_t v44 = v136;
        do
        {
          unint64_t v45 = 32 * v44;
          unsigned int v46 = 32 * (v44 + 1) - 1;
          if (32 * (int)v44 <= v16) {
            unsigned int v47 = v16;
          }
          else {
            unsigned int v47 = 32 * v44;
          }
          if (v146 < v46) {
            unsigned int v46 = v146;
          }
          int v48 = v46 - v47 + 1;
          if (v44 == v153) {
            unsigned int v49 = v152;
          }
          else {
            unsigned int v49 = 32;
          }
          BOOL v50 = 1;
          if (32 * (int)v33 >= v151 && v45 >= v144)
          {
            int v51 = v152;
            if (v44 != v153) {
              int v51 = 32;
            }
            BOOL v50 = v48 != v51 || v150 != v43;
          }
          unsigned int v53 = *(_DWORD *)(v24 + 128) >> (*(unsigned char *)(v24 + 144) + a12);
          if (v53 <= 1) {
            unsigned int v53 = 1;
          }
          unsigned int v54 = v53 + 31;
          if (v54 < 0x40) {
            unsigned int v55 = 0;
          }
          else {
            unsigned int v55 = 32 - __clz(~(-1 << -(char)__clz((v54 >> 5) - 1)));
          }
          unsigned int v56 = *(_DWORD *)(v24 + 132) >> (*(unsigned char *)(v24 + 144) + a12);
          if (v56 <= 1) {
            unsigned int v56 = 1;
          }
          unsigned int v57 = v56 + 31;
          if (v57 < 0x40) {
            unsigned int v58 = 0;
          }
          else {
            unsigned int v58 = 32 - __clz(~(-1 << -(char)__clz((v57 >> 5) - 1)));
          }
          unint64_t v155 = v44 + 1;
          if (v58 | v55)
          {
            int v59 = 0;
            uint64_t v60 = 0;
            BOOL v61 = v55 != 0;
            BOOL v62 = v58 != 0;
            int v63 = 1;
            do
            {
              --v55;
              if (v61) {
                v60 |= (unint64_t)(v63 & v44) << v59++;
              }
              else {
                unsigned int v55 = 0;
              }
              --v58;
              if (v62) {
                v60 |= (unint64_t)(v63 & v33) << v59++;
              }
              else {
                unsigned int v58 = 0;
              }
              v63 *= 2;
              --v59;
              BOOL v62 = v58 != 0;
              BOOL v61 = v55 != 0;
            }
            while (v58 | v55);
          }
          else
          {
            uint64_t v60 = 0;
          }
          uint64_t v64 = v33 * v140 + 768 * v44;
          int v65 = v49 < 0x20 || v50;
          int v66 = (unsigned __int8 *)(v148 + 32 * v60);
          uint64_t v67 = v149 + 2 * (v47 - v16);
          int v68 = (int32x4_t *)(v147 + v64);
          if (v43 < 0x20) {
            int v69 = 1;
          }
          else {
            int v69 = v65;
          }
          unint64_t v154 = v68;
          if (v157)
          {
            if (!v69)
            {
              int v73 = (int32x4_t *)__dst;
LABEL_78:
              uint64_t v76 = 0;
              int v77 = *(_DWORD *)(*(void *)(v156 + 208) + 52);
              uint64_t v78 = v73;
              uint64_t v79 = (uint64_t)v73;
              do
              {
                uint64_t v80 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)2,1u>::kSubblockPositions[v76 + 1];
                uint64_t v81 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)2,1u>::kSubblockPositions[v76];
                unsigned int v82 = (v49 - 8 * v81) & ~((int)(v49 - 8 * v81) >> 31);
                if (v82 >= 8) {
                  unsigned int v82 = 8;
                }
                unsigned int v83 = (v43 - 4 * v80) & ~((int)(v43 - 4 * v80) >> 31);
                if (v83 >= 4) {
                  unsigned int v83 = 4;
                }
                if (v82) {
                  BOOL v84 = v83 == 0;
                }
                else {
                  BOOL v84 = 1;
                }
                if (v84) {
                  *int v66 = 0;
                }
                else {
                  v79 += AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)2,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)2,(AGXTextureFootprint)3>::compressSubblock(v79, v66, (int32x4_t *)(v67 + 4 * a11 * v80 + 16 * v81), a11, v82, v83, v77, *(double *)&v25, *(double *)&v26, v27, v28, v29, v30, v31, v32);
                }
                ++v66;
                v76 += 2;
              }
              while (v76 != 64);
              unsigned int v16 = v145;
              uint64_t v24 = v156;
              int32x4_t v75 = v78;
              goto LABEL_141;
            }
            int v70 = v48;
            BOOL v71 = v50;
            unsigned int v72 = v47;
            memcpy(__dst, v68, 0x800uLL);
            unsigned int v47 = v72;
            BOOL v50 = v71;
            int v48 = v70;
            unsigned int v16 = v145;
            int v73 = (int32x4_t *)__dst;
          }
          else
          {
            int v73 = v68;
            if (!v69) {
              goto LABEL_78;
            }
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE2ELj1ELh0ELNS7_13SubblockOrderE2EL19AGXTextureFootprint3EEELb0EL29AGXHardwareTextureMemoryOrder3EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = v156;
          uint64_t v159 = v73;
          unsigned __int8 v167 = v49;
          unsigned __int8 v168 = v43;
          unsigned int v163 = v143;
          unsigned int v164 = v47 - v45;
          unsigned int v160 = v66;
          uint64_t v161 = v67;
          uint64_t v162 = a11;
          unsigned int v165 = v150;
          unsigned int v166 = v48;
          if (v50)
          {
            unsigned int v74 = v73;
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(v156 + 8) + 7384), block);
            int32x4_t v75 = v74;
            uint64_t v24 = v156;
            goto LABEL_141;
          }
          uint64_t v85 = 0;
          int v86 = *(_DWORD *)(*(void *)(v156 + 208) + 52);
          __src = v73;
          uint64_t v87 = v73;
          do
          {
            unsigned int v88 = *v66++;
            uint64_t v87 = (int32x4_t *)((char *)v87
                              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)2,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)2,(AGXTextureFootprint)3>::decompressSubblock((uint64_t)&__dst[256* (unint64_t)AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)2,1u>::kSubblockPositions[v85 + 1]+ 2048+ 16* AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)2,1u>::kSubblockPositions[v85]], 64, v87, v88, v86, *(double *)&v25, *(double *)&v26, v27, *(int8x8_t *)&v28));
            v85 += 2;
          }
          while (v85 != 64);
          uint64_t v89 = v165;
          if (v165 && v166)
          {
            uint64_t v90 = 0;
            unint64_t v91 = (unint64_t)v163 << 6;
            uint64_t v92 = 2 * v164;
            unint64_t v93 = &__dst[v91 + 2048 + v92];
            uint64_t v94 = v161;
            uint64_t v95 = v162;
            unint64_t v96 = 2 * v166;
            if (v96 <= 1) {
              unint64_t v97 = 1;
            }
            else {
              unint64_t v97 = 2 * v166;
            }
            unint64_t v98 = v91 + v92;
            uint64_t v99 = &__dst[v91 + 2048 + v92];
            if (v97) {
              BOOL v100 = (v97 - 1) >> 32 == 0;
            }
            else {
              BOOL v100 = 0;
            }
            uint64_t v101 = v97 & 0x1FFFFFFE0;
            uint64_t v102 = v97 & 0x1FFFFFFF8;
            char v104 = !v100 || v97 < 8;
            char v105 = &__dst[v98 + 2064];
            long long v106 = (long long *)(v161 + 16);
            uint64_t v107 = v93;
            uint64_t v108 = v161;
            do
            {
              int v109 = (char *)(v94 + v95 * v90);
              uint64_t v110 = &v93[64 * v90];
              if ((unint64_t)(&v99[64 * v90] - v109) < 0x20) {
                char v111 = 1;
              }
              else {
                char v111 = v104;
              }
              if (v111)
              {
                int v112 = 0;
                goto LABEL_125;
              }
              if (v97 >= 0x20)
              {
                uint64_t v114 = v106;
                uint64_t v115 = v105;
                uint64_t v116 = v97 & 0x1FFFFFFE0;
                do
                {
                  long long v25 = *(v114 - 1);
                  long long v26 = *v114;
                  *(v115 - 1) = v25;
                  *uint64_t v115 = v26;
                  v115 += 2;
                  v114 += 2;
                  v116 -= 32;
                }
                while (v116);
                if (v97 == v101) {
                  goto LABEL_108;
                }
                uint64_t v113 = v97 & 0x1FFFFFFE0;
                if ((v97 & 0x18) == 0)
                {
                  v109 += v101;
                  v110 += v101;
                  int v112 = v97 & 0xFFFFFFE0;
                  goto LABEL_125;
                }
              }
              else
              {
                uint64_t v113 = 0;
              }
              v110 += v102;
              uint64_t v117 = v113 - v102;
              unsigned int v118 = (uint64_t *)(v108 + v113);
              char v119 = &v107[v113];
              do
              {
                uint64_t v120 = *v118++;
                *(void *)&long long v25 = v120;
                *v119++ = v120;
                v117 += 8;
              }
              while (v117);
              if (v97 == v102) {
                goto LABEL_108;
              }
              v109 += v102;
              int v112 = v97 & 0xFFFFFFF8;
LABEL_125:
              unsigned int v121 = v112 + 1;
              do
              {
                char v122 = *v109++;
                *v110++ = v122;
              }
              while (v96 > v121++);
LABEL_108:
              ++v90;
              v105 += 64;
              long long v106 = (long long *)((char *)v106 + v95);
              v108 += v95;
              v107 += 64;
            }
            while (v90 != v89);
          }
          uint64_t v124 = 0;
          uint64_t v125 = (uint64_t)v159;
          unint64_t v126 = v160;
          int v127 = v167;
          int v128 = v168;
          int v129 = *(_DWORD *)(*(void *)(v156 + 208) + 52);
          do
          {
            uint64_t v130 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)2,1u>::kSubblockPositions[v124 + 1];
            uint64_t v131 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)2,1u>::kSubblockPositions[v124];
            unsigned int v132 = (v127 - 8 * v131) & ~((v127 - 8 * (int)v131) >> 31);
            if (v132 >= 8) {
              unsigned int v132 = 8;
            }
            unsigned int v133 = (v128 - 4 * v130) & ~((v128 - 4 * (int)v130) >> 31);
            if (v133 >= 4) {
              unsigned int v133 = 4;
            }
            if (v132) {
              BOOL v134 = v133 == 0;
            }
            else {
              BOOL v134 = 1;
            }
            if (v134) {
              *unint64_t v126 = 0;
            }
            else {
              v125 += AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)2,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)2,(AGXTextureFootprint)3>::compressSubblock(v125, v126, (int32x4_t *)&__dst[256 * v130 + 2048 + 16 * v131], 64, v132, v133, v129, *(double *)&v25, *(double *)&v26, v27, v28, v29, v30, v31, v32);
            }
            ++v126;
            v124 += 2;
          }
          while (v124 != 64);
          unsigned int v16 = v145;
          uint64_t v24 = v156;
          int32x4_t v75 = __src;
LABEL_141:
          uint64_t result = (uint64_t)v154;
          if (v157) {
            uint64_t result = (uint64_t)memcpy(v154, v75, 0x800uLL);
          }
          unint64_t v44 = v155;
        }
        while (v155 != (v146 >> 5) + 1);
        ++v33;
      }
      while (v33 != v135);
    }
  }
  return result;
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)3>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, char a12)
{
  uint64_t v209 = *MEMORY[0x263EF8340];
  size_t v154 = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v24 = a8 + a10 - 1;
  unsigned int v162 = a8;
  uint64_t v25 = a8 >> 4;
  unsigned int v153 = v24;
  unsigned int v26 = v24 >> 4;
  if (*(void *)(a1 + 168)) {
    int v27 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v27 = 0;
  }
  BOOL v28 = (v27 & 0xD00) == 0 || v27 == 768;
  int v29 = v27 & 0xE00;
  int v31 = !v28 && v29 != 1024;
  if (v25 <= v26)
  {
    unsigned int v32 = a7 + a9 - 1;
    if (a7 >> 4 <= v32 >> 4)
    {
      uint64_t v164 = (a5 - 1) >> 4;
      uint64_t v152 = (a6 - 1) >> 4;
      int v163 = ((a5 - 1) & 0xF) + 1;
      int v151 = ((a6 - 1) & 0xF) + 1;
      uint64_t v150 = v26 + 1;
      int v157 = v31;
      do
      {
        unsigned int v33 = (16 * v25) | 0xF;
        if (16 * (int)v25 <= v162) {
          unsigned int v34 = v162;
        }
        else {
          unsigned int v34 = 16 * v25;
        }
        if (v153 < v33) {
          unsigned int v33 = v153;
        }
        unsigned int v156 = v34 - 16 * v25;
        int v161 = v33 - v34 + 1;
        if (v25 == v152) {
          unsigned int v35 = v151;
        }
        else {
          unsigned int v35 = 16;
        }
        uint64_t v160 = a3 + (v34 - v162) * a11;
        unint64_t v36 = (unint64_t)a7 >> 4;
        do
        {
          unint64_t v37 = 16 * v36;
          unint64_t v38 = v36 + 1;
          unsigned int v39 = 16 * (v36 + 1) - 1;
          if (16 * (int)v36 <= a7) {
            unsigned int v40 = a7;
          }
          else {
            unsigned int v40 = 16 * v36;
          }
          if (v32 < v39) {
            unsigned int v39 = a7 + a9 - 1;
          }
          int v41 = v39 - v40 + 1;
          if (v36 == v164) {
            unsigned int v42 = v163;
          }
          else {
            unsigned int v42 = 16;
          }
          BOOL v43 = 1;
          if (16 * (int)v25 >= v162 && v37 >= a7)
          {
            int v44 = v163;
            if (v36 != v164) {
              int v44 = 16;
            }
            BOOL v43 = v41 != v44 || v161 != v35;
          }
          unsigned int v46 = *(_DWORD *)(a1 + 128) >> (*(unsigned char *)(a1 + 144) + a12);
          if (v46 <= 1) {
            unsigned int v46 = 1;
          }
          unsigned int v47 = v46 + 15;
          if (v47 < 0x20) {
            unsigned int v48 = 0;
          }
          else {
            unsigned int v48 = 32 - __clz(~(-1 << -(char)__clz((v47 >> 4) - 1)));
          }
          unsigned int v49 = *(_DWORD *)(a1 + 132) >> (*(unsigned char *)(a1 + 144) + a12);
          if (v49 <= 1) {
            unsigned int v49 = 1;
          }
          unsigned int v50 = v49 + 15;
          if (v50 < 0x20)
          {
            unsigned int v51 = 0;
            if (!v48)
            {
LABEL_65:
              uint64_t v53 = 0;
              goto LABEL_66;
            }
          }
          else
          {
            unsigned int v51 = 32 - __clz(~(-1 << -(char)__clz((v50 >> 4) - 1)));
            if (!(v51 | v48)) {
              goto LABEL_65;
            }
          }
          int v52 = 0;
          uint64_t v53 = 0;
          BOOL v54 = v48 != 0;
          BOOL v55 = v51 != 0;
          int v56 = 1;
          do
          {
            --v48;
            if (v54) {
              v53 |= (unint64_t)(v56 & v36) << v52++;
            }
            else {
              unsigned int v48 = 0;
            }
            --v51;
            if (v55) {
              v53 |= (unint64_t)(v56 & v25) << v52++;
            }
            else {
              unsigned int v51 = 0;
            }
            v56 *= 2;
            --v52;
            BOOL v55 = v51 != 0;
            BOOL v54 = v48 != 0;
          }
          while (v51 | v48);
LABEL_66:
          size_t v57 = v25 * v154 + (v36 << 8);
          int v58 = v42 < 0x10 || v43;
          int v59 = (unsigned __int8 *)(a4 + 8 * v53);
          uint64_t v60 = (int16x4_t *)(v160 + v40 - a7);
          BOOL v61 = (int8x8_t *)(a2 + v57);
          if (v35 < 0x10) {
            int v62 = 1;
          }
          else {
            int v62 = v58;
          }
          if (v31)
          {
            if (!v62)
            {
              int v70 = (int8x8_t *)v176;
LABEL_80:
              uint64_t v71 = a11;
              unsigned int v72 = v70;
              int v73 = (char *)(a4 + 8 * v53);
              int v74 = v35;
              goto LABEL_170;
            }
            long long v63 = *(_OWORD *)v61[26].i8;
            v176[12] = *(_OWORD *)v61[24].i8;
            v176[13] = v63;
            long long v64 = *(_OWORD *)v61[30].i8;
            v176[14] = *(_OWORD *)v61[28].i8;
            v176[15] = v64;
            long long v65 = *(_OWORD *)v61[18].i8;
            v176[8] = *(_OWORD *)v61[16].i8;
            v176[9] = v65;
            long long v66 = *(_OWORD *)v61[22].i8;
            v176[10] = *(_OWORD *)v61[20].i8;
            v176[11] = v66;
            long long v67 = *(_OWORD *)v61[10].i8;
            v176[4] = *(_OWORD *)v61[8].i8;
            v176[5] = v67;
            long long v68 = *(_OWORD *)v61[14].i8;
            v176[6] = *(_OWORD *)v61[12].i8;
            v176[7] = v68;
            long long v69 = *(_OWORD *)v61[2].i8;
            v176[0] = *(_OWORD *)v61->i8;
            v176[1] = v69;
            long long v17 = *(_OWORD *)v61[4].i8;
            long long v18 = *(_OWORD *)v61[6].i8;
            int v70 = (int8x8_t *)v176;
            v176[2] = v17;
            v176[3] = v18;
          }
          else
          {
            int v70 = v61;
            if (!v62) {
              goto LABEL_80;
            }
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE0ELj1ELh0ELNS7_13SubblockOrderE1EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder3EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = a1;
          unsigned int v166 = v70;
          unsigned __int8 v174 = v42;
          unsigned __int8 v175 = v35;
          unsigned int v170 = v156;
          unsigned int v171 = v40 - v37;
          unsigned __int8 v167 = (char *)(a4 + 8 * v53);
          uint64_t v168 = v160 + v40 - a7;
          uint64_t v169 = a11;
          unsigned int v172 = v161;
          unsigned int v173 = v41;
          if (!v43)
          {
            unsigned int v75 = *v59;
            if (v75 == 96)
            {
              *(int8x8_t *)&long long v17 = vdup_lane_s8(*v70, 0);
              int16x4_t v177 = (int16x4_t)v17;
              int16x4_t v179 = (int16x4_t)v17;
              uint64_t v181 = v17;
              uint64_t v183 = v17;
              uint64_t v76 = 1;
            }
            else if (v75 == 31)
            {
              int16x4_t v77 = (int16x4_t)v70[1];
              *(int8x8_t *)&long long v19 = v70[2];
              *(int8x8_t *)&long long v20 = v70[3];
              int16x4_t v21 = vuzp1_s16((int16x4_t)*v70, *(int16x4_t *)&v19);
              int16x4_t v78 = vuzp2_s16((int16x4_t)*v70, *(int16x4_t *)&v19);
              int16x4_t v177 = v21;
              int16x4_t v179 = v78;
              *(int16x4_t *)&long long v17 = vuzp1_s16(v77, *(int16x4_t *)&v20);
              *(int16x4_t *)&long long v18 = vuzp2_s16(v77, *(int16x4_t *)&v20);
              uint64_t v181 = v17;
              uint64_t v183 = v18;
              uint64_t v76 = 32;
            }
            else if (*v59)
            {
              uint64_t v76 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v177, 16, (uint64_t)v70, v75);
            }
            else
            {
              uint64_t v76 = 0;
              int16x4_t v177 = 0;
              int16x4_t v179 = 0;
              uint64_t v181 = 0;
              uint64_t v183 = 0;
            }
            uint64_t v79 = (int8x8_t *)((char *)v70 + v76);
            unsigned int v80 = v59[1];
            if (v80 == 96)
            {
              *(int8x8_t *)&long long v17 = vdup_lane_s8(*v79, 0);
              int16x4_t v178 = (int16x4_t)v17;
              int16x4_t v180 = (int16x4_t)v17;
              uint64_t v182 = v17;
              uint64_t v184 = v17;
              uint64_t v81 = 1;
            }
            else if (v80 == 31)
            {
              int16x4_t v82 = (int16x4_t)v79[1];
              *(int8x8_t *)&long long v19 = v79[2];
              *(int8x8_t *)&long long v20 = v79[3];
              int16x4_t v21 = vuzp1_s16((int16x4_t)*v79, *(int16x4_t *)&v19);
              int16x4_t v83 = vuzp2_s16((int16x4_t)*v79, *(int16x4_t *)&v19);
              int16x4_t v178 = v21;
              int16x4_t v180 = v83;
              *(int16x4_t *)&long long v17 = vuzp1_s16(v82, *(int16x4_t *)&v20);
              *(int16x4_t *)&long long v18 = vuzp2_s16(v82, *(int16x4_t *)&v20);
              uint64_t v182 = v17;
              uint64_t v184 = v18;
              uint64_t v81 = 32;
            }
            else if (v59[1])
            {
              uint64_t v81 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v178, 16, (uint64_t)v79, v80);
            }
            else
            {
              uint64_t v81 = 0;
              int16x4_t v178 = 0;
              int16x4_t v180 = 0;
              uint64_t v182 = 0;
              uint64_t v184 = 0;
            }
            BOOL v84 = (int8x8_t *)((char *)v79 + v81);
            unsigned int v85 = v59[2];
            if (v85 == 96)
            {
              *(int8x8_t *)&long long v17 = vdup_lane_s8(*v84, 0);
              int16x4_t v185 = (int16x4_t)v17;
              int16x4_t v187 = (int16x4_t)v17;
              uint64_t v189 = v17;
              uint64_t v191 = v17;
              uint64_t v86 = 1;
            }
            else if (v85 == 31)
            {
              int16x4_t v87 = (int16x4_t)v84[1];
              *(int8x8_t *)&long long v19 = v84[2];
              *(int8x8_t *)&long long v20 = v84[3];
              int16x4_t v21 = vuzp1_s16((int16x4_t)*v84, *(int16x4_t *)&v19);
              int16x4_t v88 = vuzp2_s16((int16x4_t)*v84, *(int16x4_t *)&v19);
              int16x4_t v185 = v21;
              int16x4_t v187 = v88;
              *(int16x4_t *)&long long v17 = vuzp1_s16(v87, *(int16x4_t *)&v20);
              *(int16x4_t *)&long long v18 = vuzp2_s16(v87, *(int16x4_t *)&v20);
              uint64_t v189 = v17;
              uint64_t v191 = v18;
              uint64_t v86 = 32;
            }
            else if (v59[2])
            {
              uint64_t v86 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v185, 16, (uint64_t)v84, v85);
            }
            else
            {
              uint64_t v86 = 0;
              int16x4_t v185 = 0;
              int16x4_t v187 = 0;
              uint64_t v189 = 0;
              uint64_t v191 = 0;
            }
            uint64_t v89 = (int8x8_t *)((char *)v84 + v86);
            unsigned int v90 = v59[3];
            if (v90 == 96)
            {
              *(int8x8_t *)&long long v17 = vdup_lane_s8(*v89, 0);
              int16x4_t v186 = (int16x4_t)v17;
              int16x4_t v188 = (int16x4_t)v17;
              uint64_t v190 = v17;
              uint64_t v192 = v17;
              uint64_t v91 = 1;
            }
            else if (v90 == 31)
            {
              int16x4_t v92 = (int16x4_t)v89[1];
              *(int8x8_t *)&long long v19 = v89[2];
              *(int8x8_t *)&long long v20 = v89[3];
              int16x4_t v21 = vuzp1_s16((int16x4_t)*v89, *(int16x4_t *)&v19);
              int16x4_t v93 = vuzp2_s16((int16x4_t)*v89, *(int16x4_t *)&v19);
              int16x4_t v186 = v21;
              int16x4_t v188 = v93;
              *(int16x4_t *)&long long v17 = vuzp1_s16(v92, *(int16x4_t *)&v20);
              *(int16x4_t *)&long long v18 = vuzp2_s16(v92, *(int16x4_t *)&v20);
              uint64_t v190 = v17;
              uint64_t v192 = v18;
              uint64_t v91 = 32;
            }
            else if (v59[3])
            {
              uint64_t v91 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v186, 16, (uint64_t)v89, v90);
            }
            else
            {
              uint64_t v91 = 0;
              int16x4_t v186 = 0;
              int16x4_t v188 = 0;
              uint64_t v190 = 0;
              uint64_t v192 = 0;
            }
            uint64_t v94 = (int8x8_t *)((char *)v89 + v91);
            unsigned int v95 = v59[4];
            if (v95 == 96)
            {
              *(int8x8_t *)&long long v17 = vdup_lane_s8(*v94, 0);
              int16x4_t v193 = (int16x4_t)v17;
              int16x4_t v195 = (int16x4_t)v17;
              uint64_t v197 = v17;
              uint64_t v199 = v17;
              uint64_t v96 = 1;
            }
            else if (v95 == 31)
            {
              int16x4_t v97 = (int16x4_t)v94[1];
              *(int8x8_t *)&long long v19 = v94[2];
              *(int8x8_t *)&long long v20 = v94[3];
              int16x4_t v21 = vuzp1_s16((int16x4_t)*v94, *(int16x4_t *)&v19);
              int16x4_t v98 = vuzp2_s16((int16x4_t)*v94, *(int16x4_t *)&v19);
              int16x4_t v193 = v21;
              int16x4_t v195 = v98;
              *(int16x4_t *)&long long v17 = vuzp1_s16(v97, *(int16x4_t *)&v20);
              *(int16x4_t *)&long long v18 = vuzp2_s16(v97, *(int16x4_t *)&v20);
              uint64_t v197 = v17;
              uint64_t v199 = v18;
              uint64_t v96 = 32;
            }
            else if (v59[4])
            {
              uint64_t v96 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v193, 16, (uint64_t)v94, v95);
            }
            else
            {
              uint64_t v96 = 0;
              int16x4_t v193 = 0;
              int16x4_t v195 = 0;
              uint64_t v197 = 0;
              uint64_t v199 = 0;
            }
            uint64_t v99 = (int8x8_t *)((char *)v94 + v96);
            unsigned int v100 = v59[5];
            if (v100 == 96)
            {
              *(int8x8_t *)&long long v17 = vdup_lane_s8(*v99, 0);
              int16x4_t v194 = (int16x4_t)v17;
              int16x4_t v196 = (int16x4_t)v17;
              uint64_t v198 = v17;
              uint64_t v200 = v17;
              uint64_t v101 = 1;
            }
            else if (v100 == 31)
            {
              int16x4_t v102 = (int16x4_t)v99[1];
              *(int8x8_t *)&long long v19 = v99[2];
              *(int8x8_t *)&long long v20 = v99[3];
              int16x4_t v21 = vuzp1_s16((int16x4_t)*v99, *(int16x4_t *)&v19);
              int16x4_t v103 = vuzp2_s16((int16x4_t)*v99, *(int16x4_t *)&v19);
              int16x4_t v194 = v21;
              int16x4_t v196 = v103;
              *(int16x4_t *)&long long v17 = vuzp1_s16(v102, *(int16x4_t *)&v20);
              *(int16x4_t *)&long long v18 = vuzp2_s16(v102, *(int16x4_t *)&v20);
              uint64_t v198 = v17;
              uint64_t v200 = v18;
              uint64_t v101 = 32;
            }
            else if (v59[5])
            {
              uint64_t v101 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v194, 16, (uint64_t)v99, v100);
            }
            else
            {
              uint64_t v101 = 0;
              int16x4_t v194 = 0;
              int16x4_t v196 = 0;
              uint64_t v198 = 0;
              uint64_t v200 = 0;
            }
            char v104 = (int8x8_t *)((char *)v99 + v101);
            unsigned int v105 = v59[6];
            if (v105 == 96)
            {
              *(int8x8_t *)&long long v17 = vdup_lane_s8(*v104, 0);
              int16x4_t v201 = (int16x4_t)v17;
              int16x4_t v203 = (int16x4_t)v17;
              uint64_t v205 = v17;
              uint64_t v207 = v17;
              uint64_t v106 = 1;
            }
            else if (v105 == 31)
            {
              int16x4_t v107 = (int16x4_t)v104[1];
              *(int8x8_t *)&long long v19 = v104[2];
              *(int8x8_t *)&long long v20 = v104[3];
              int16x4_t v21 = vuzp1_s16((int16x4_t)*v104, *(int16x4_t *)&v19);
              int16x4_t v108 = vuzp2_s16((int16x4_t)*v104, *(int16x4_t *)&v19);
              int16x4_t v201 = v21;
              int16x4_t v203 = v108;
              *(int16x4_t *)&long long v17 = vuzp1_s16(v107, *(int16x4_t *)&v20);
              *(int16x4_t *)&long long v18 = vuzp2_s16(v107, *(int16x4_t *)&v20);
              uint64_t v205 = v17;
              uint64_t v207 = v18;
              uint64_t v106 = 32;
            }
            else if (v59[6])
            {
              uint64_t v106 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v201, 16, (uint64_t)v104, v105);
            }
            else
            {
              uint64_t v106 = 0;
              int16x4_t v201 = 0;
              int16x4_t v203 = 0;
              uint64_t v205 = 0;
              uint64_t v207 = 0;
            }
            int v109 = (int8x8_t *)((char *)v104 + v106);
            unsigned int v110 = v59[7];
            if (v110 == 96)
            {
              *(int8x8_t *)&long long v17 = vdup_lane_s8(*v109, 0);
              int16x4_t v202 = (int16x4_t)v17;
              int16x4_t v204 = (int16x4_t)v17;
              uint64_t v206 = v17;
              uint64_t v208 = v17;
              uint64_t v111 = v172;
              if (v172) {
                goto LABEL_140;
              }
            }
            else
            {
              if (v110 != 31)
              {
                if (v59[7])
                {
                  AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v202, 16, (uint64_t)v109, v110);
                  uint64_t v111 = v172;
                  if (!v172) {
                    goto LABEL_169;
                  }
                }
                else
                {
                  int16x4_t v202 = 0;
                  int16x4_t v204 = 0;
                  uint64_t v206 = 0;
                  uint64_t v208 = 0;
                  uint64_t v111 = v172;
                  if (!v172) {
                    goto LABEL_169;
                  }
                }
LABEL_140:
                uint64_t v114 = v173;
                if (!v173) {
                  goto LABEL_169;
                }
                uint64_t v115 = 16 * v170;
                uint64_t v117 = v168;
                uint64_t v116 = v169;
                if (v173 < 8)
                {
                  unsigned int v118 = (char *)&v177 + v115 + v171 + 3;
                  char v119 = (char *)(v168 + 3);
                  do
                  {
                    *(v118 - 3) = *(v119 - 3);
                    if (v114 != 1)
                    {
                      *(v118 - 2) = *(v119 - 2);
                      if (v114 != 2)
                      {
                        *(v118 - 1) = *(v119 - 1);
                        if (v114 != 3)
                        {
                          *unsigned int v118 = *v119;
                          if (v114 != 4)
                          {
                            v118[1] = v119[1];
                            if (v114 != 5)
                            {
                              v118[2] = v119[2];
                              if (v114 != 6) {
                                v118[3] = v119[3];
                              }
                            }
                          }
                        }
                      }
                    }
                    v118 += 16;
                    v119 += v116;
                    --v111;
                  }
                  while (v111);
                  goto LABEL_169;
                }
                uint64_t v120 = 0;
                unsigned int v121 = (char *)&v177 + v171 + v115;
                uint64_t v122 = v173 & 0xFFFFFFE0;
                uint64_t v123 = v173 & 0xFFFFFFF8;
                uint64_t v124 = (char *)&v179 + v115 + v171;
                uint64_t v125 = (long long *)(v168 + 16);
                unint64_t v126 = v121;
                uint64_t v127 = v168;
                while (2)
                {
                  int v128 = (char *)(v117 + v120 * v116);
                  int v129 = &v121[16 * v120];
                  if ((unint64_t)(v129 - v128) >= 0x20)
                  {
                    if (v114 >= 0x20)
                    {
                      unsigned int v132 = v125;
                      unsigned int v133 = v124;
                      uint64_t v134 = v114 & 0xFFFFFFE0;
                      do
                      {
                        long long v17 = *(v132 - 1);
                        long long v18 = *v132;
                        *(v133 - 1) = v17;
                        *unsigned int v133 = v18;
                        v133 += 2;
                        v132 += 2;
                        v134 -= 32;
                      }
                      while (v134);
                      if (v122 == v114) {
                        goto LABEL_152;
                      }
                      uint64_t v131 = v114 & 0xFFFFFFE0;
                      if ((v114 & 0x18) == 0)
                      {
                        v128 += v122;
                        v129 += v122;
                        int v130 = v114 & 0xFFFFFFE0;
                        goto LABEL_166;
                      }
                    }
                    else
                    {
                      uint64_t v131 = 0;
                    }
                    v129 += v123;
                    uint64_t v135 = v131 - (v114 & 0xFFFFFFF8);
                    unint64_t v136 = (uint64_t *)(v127 + v131);
                    int v137 = &v126[v131];
                    do
                    {
                      uint64_t v138 = *v136++;
                      *(void *)&long long v17 = v138;
                      *(void *)int v137 = v138;
                      v137 += 8;
                      v135 += 8;
                    }
                    while (v135);
                    if (v123 != v114)
                    {
                      v128 += v123;
                      int v130 = v114 & 0xFFFFFFF8;
                      goto LABEL_166;
                    }
                  }
                  else
                  {
                    int v130 = 0;
LABEL_166:
                    int v139 = v114 - v130;
                    do
                    {
                      char v140 = *v128++;
                      *v129++ = v140;
                      --v139;
                    }
                    while (v139);
                  }
LABEL_152:
                  ++v120;
                  v124 += 16;
                  uint64_t v125 = (long long *)((char *)v125 + v116);
                  v127 += v116;
                  v126 += 16;
                  if (v120 == v111) {
                    goto LABEL_169;
                  }
                  continue;
                }
              }
              int16x4_t v112 = (int16x4_t)v109[1];
              *(int8x8_t *)&long long v19 = v109[2];
              *(int8x8_t *)&long long v20 = v109[3];
              int16x4_t v21 = vuzp1_s16((int16x4_t)*v109, *(int16x4_t *)&v19);
              int16x4_t v113 = vuzp2_s16((int16x4_t)*v109, *(int16x4_t *)&v19);
              int16x4_t v202 = v21;
              int16x4_t v204 = v113;
              *(int16x4_t *)&long long v17 = vuzp1_s16(v112, *(int16x4_t *)&v20);
              *(int16x4_t *)&long long v18 = vuzp2_s16(v112, *(int16x4_t *)&v20);
              uint64_t v206 = v17;
              uint64_t v208 = v18;
              uint64_t v111 = v172;
              if (v172) {
                goto LABEL_140;
              }
            }
LABEL_169:
            unsigned int v72 = v166;
            int v73 = v167;
            unsigned int v42 = v174;
            int v74 = v175;
            uint64_t v60 = &v177;
            uint64_t v71 = 16;
LABEL_170:
            AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v60, v71, v72, v73, v42, v74, *(double *)&v17, *(double *)&v18, *(double *)&v19, *(double *)&v20, *(double *)&v21, v22, v23);
            int v31 = v157;
            if (!v157) {
              goto LABEL_27;
            }
            goto LABEL_171;
          }
          dispatch_sync(*(dispatch_queue_t *)(*(void *)(a1 + 8) + 7384), block);
          int v31 = v157;
          if (!v157) {
            goto LABEL_27;
          }
LABEL_171:
          long long v141 = *(_OWORD *)v70->i8;
          long long v142 = *(_OWORD *)v70[2].i8;
          long long v143 = *(_OWORD *)v70[6].i8;
          *(_OWORD *)v61[4].i8 = *(_OWORD *)v70[4].i8;
          *(_OWORD *)v61[6].i8 = v143;
          *(_OWORD *)v61->i8 = v141;
          *(_OWORD *)v61[2].i8 = v142;
          long long v144 = *(_OWORD *)v70[8].i8;
          long long v145 = *(_OWORD *)v70[10].i8;
          long long v146 = *(_OWORD *)v70[14].i8;
          *(_OWORD *)v61[12].i8 = *(_OWORD *)v70[12].i8;
          *(_OWORD *)v61[14].i8 = v146;
          *(_OWORD *)v61[8].i8 = v144;
          *(_OWORD *)v61[10].i8 = v145;
          long long v147 = *(_OWORD *)v70[16].i8;
          long long v148 = *(_OWORD *)v70[18].i8;
          long long v149 = *(_OWORD *)v70[22].i8;
          *(_OWORD *)v61[20].i8 = *(_OWORD *)v70[20].i8;
          *(_OWORD *)v61[22].i8 = v149;
          *(_OWORD *)v61[16].i8 = v147;
          *(_OWORD *)v61[18].i8 = v148;
          long long v17 = *(_OWORD *)v70[24].i8;
          long long v18 = *(_OWORD *)v70[26].i8;
          long long v19 = *(_OWORD *)v70[28].i8;
          long long v20 = *(_OWORD *)v70[30].i8;
          *(_OWORD *)v61[28].i8 = v19;
          *(_OWORD *)v61[30].i8 = v20;
          *(_OWORD *)v61[24].i8 = v17;
          *(_OWORD *)v61[26].i8 = v18;
LABEL_27:
          unint64_t v36 = v38;
        }
        while (v38 != (v32 >> 4) + 1);
        ++v25;
      }
      while (v25 != v150);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)3>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, char a12)
{
  uint64_t v255 = *MEMORY[0x263EF8340];
  size_t v198 = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  uint64_t v16 = a8 >> 4;
  unsigned int v197 = a8 + a10 - 1;
  unsigned int v17 = v197 >> 4;
  if (*(void *)(a1 + 168))
  {
    __int16 CacheMode = IOSurfaceGetCacheMode();
    uint64_t v19 = a1;
    int v20 = CacheMode & 0xF00;
  }
  else
  {
    uint64_t v19 = a1;
    int v20 = 0;
  }
  BOOL v21 = (v20 & 0xD00) == 0 || v20 == 768;
  int v22 = v20 & 0xE00;
  int v24 = !v21 && v22 != 1024;
  int v210 = v24;
  unsigned int v25 = a7;
  if (v16 <= v17)
  {
    unsigned int v202 = a7 + a9 - 1;
    if (a7 >> 4 <= v202 >> 4)
    {
      uint64_t v208 = (a5 - 1) >> 4;
      uint64_t v196 = (a6 - 1) >> 4;
      int v207 = ((a5 - 1) & 0xF) + 1;
      int v195 = ((a6 - 1) & 0xF) + 1;
      uint64_t v194 = v17 + 1;
      do
      {
        unsigned int v26 = (16 * v16) | 0xF;
        if (16 * (int)v16 <= a8) {
          unsigned int v27 = a8;
        }
        else {
          unsigned int v27 = 16 * v16;
        }
        if (v197 < v26) {
          unsigned int v26 = a8 + a10 - 1;
        }
        unsigned int v200 = v27 - 16 * v16;
        int v206 = v26 - v27 + 1;
        if (v16 == v196) {
          unsigned int v28 = v195;
        }
        else {
          unsigned int v28 = 16;
        }
        uint64_t v205 = a3 + (v27 - a8) * a11;
        unint64_t v29 = (unint64_t)a7 >> 4;
        do
        {
          unint64_t v30 = 16 * v29;
          unsigned int v31 = 16 * (v29 + 1) - 1;
          if (16 * (int)v29 <= v25) {
            unsigned int v32 = v25;
          }
          else {
            unsigned int v32 = 16 * v29;
          }
          if (v202 < v31) {
            unsigned int v31 = a7 + a9 - 1;
          }
          int v33 = v31 - v32 + 1;
          unsigned int v34 = v207;
          if (v29 != v208) {
            unsigned int v34 = 16;
          }
          BOOL v35 = 1;
          unint64_t v209 = v29 + 1;
          if (16 * (int)v16 >= a8 && v30 >= a7)
          {
            int v36 = v207;
            if (v29 != v208) {
              int v36 = 16;
            }
            BOOL v35 = v33 != v36 || v206 != v28;
          }
          unsigned int v38 = *(_DWORD *)(v19 + 128) >> (*(unsigned char *)(v19 + 144) + a12);
          if (v38 <= 1) {
            unsigned int v38 = 1;
          }
          unsigned int v39 = v38 + 15;
          if (v39 < 0x20) {
            unsigned int v40 = 0;
          }
          else {
            unsigned int v40 = 32 - __clz(~(-1 << -(char)__clz((v39 >> 4) - 1)));
          }
          unsigned int v41 = *(_DWORD *)(v19 + 132) >> (*(unsigned char *)(v19 + 144) + a12);
          if (v41 <= 1) {
            unsigned int v41 = 1;
          }
          unsigned int v42 = v41 + 15;
          if (v42 < 0x20)
          {
            unsigned int v43 = 0;
            if (!v40)
            {
LABEL_64:
              uint64_t v45 = 0;
              goto LABEL_65;
            }
          }
          else
          {
            unsigned int v43 = 32 - __clz(~(-1 << -(char)__clz((v42 >> 4) - 1)));
            if (!(v43 | v40)) {
              goto LABEL_64;
            }
          }
          int v44 = 0;
          uint64_t v45 = 0;
          BOOL v46 = v40 != 0;
          BOOL v47 = v43 != 0;
          int v48 = 1;
          do
          {
            --v40;
            if (v46) {
              v45 |= (unint64_t)(v48 & v29) << v44++;
            }
            else {
              unsigned int v40 = 0;
            }
            --v43;
            if (v47) {
              v45 |= (unint64_t)(v48 & v16) << v44++;
            }
            else {
              unsigned int v43 = 0;
            }
            v48 *= 2;
            --v44;
            BOOL v47 = v43 != 0;
            BOOL v46 = v40 != 0;
          }
          while (v43 | v40);
LABEL_65:
          size_t v49 = v16 * v198 + (v29 << 8);
          int v50 = v34 < 0x10 || v35;
          unsigned int v51 = (char *)(a4 + 8 * v45);
          uint64_t v52 = v205 + v32 - v25;
          uint64_t v53 = (int16x4_t *)(a2 + v49);
          if (v28 < 0x10) {
            int v54 = 1;
          }
          else {
            int v54 = v50;
          }
          if (v210)
          {
            uint64_t v56 = 2 * a11;
            uint64_t v55 = 4 * a11;
            if (v54)
            {
              long long v57 = *(_OWORD *)v53[26].i8;
              v222[12] = *(_OWORD *)v53[24].i8;
              v222[13] = v57;
              long long v58 = *(_OWORD *)v53[30].i8;
              v222[14] = *(_OWORD *)v53[28].i8;
              v222[15] = v58;
              long long v59 = *(_OWORD *)v53[18].i8;
              v222[8] = *(_OWORD *)v53[16].i8;
              v222[9] = v59;
              long long v60 = *(_OWORD *)v53[22].i8;
              v222[10] = *(_OWORD *)v53[20].i8;
              v222[11] = v60;
              long long v61 = *(_OWORD *)v53[10].i8;
              v222[4] = *(_OWORD *)v53[8].i8;
              v222[5] = v61;
              long long v62 = *(_OWORD *)v53[14].i8;
              v222[6] = *(_OWORD *)v53[12].i8;
              v222[7] = v62;
              long long v63 = *(_OWORD *)v53[2].i8;
              v222[0] = *(_OWORD *)v53->i8;
              v222[1] = v63;
              long long v64 = *(_OWORD *)v53[6].i8;
              long long v65 = (int16x4_t *)v222;
              int64x2_t v222[2] = *(_OWORD *)v53[4].i8;
              v222[3] = v64;
LABEL_75:
              block[0] = MEMORY[0x263EF8330];
              block[1] = 3221225472;
              block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE0ELj1ELh1ELNS7_13SubblockOrderE1EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder3EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
              block[3] = &__block_descriptor_90_e5_v8__0l;
              block[4] = v19;
              uint64_t v212 = v65;
              unsigned __int8 v220 = v34;
              unsigned __int8 v221 = v28;
              unsigned int v216 = v200;
              unsigned int v217 = v32 - v30;
              unsigned int v213 = v51;
              uint64_t v214 = v205 + v32 - v25;
              uint64_t v215 = a11;
              unsigned int v218 = v206;
              unsigned int v219 = v33;
              if (v35)
              {
                dispatch_sync(*(dispatch_queue_t *)(*(void *)(v19 + 8) + 7384), block);
                uint64_t v19 = a1;
                unsigned int v25 = a7;
                goto LABEL_77;
              }
              unsigned int v94 = *v51;
              if (v94 == 96)
              {
                int16x4_t v223 = (int16x4_t)vdup_lane_s8((int8x8_t)*v65, 0);
                int16x4_t v225 = v223;
                int16x4_t v227 = v223;
                int16x4_t v229 = v223;
                uint64_t v95 = 1;
              }
              else if (v94 == 31)
              {
                int16x4_t v96 = v65[1];
                int16x4_t v97 = v65[2];
                int16x4_t v98 = v65[3];
                int16x4_t v99 = vuzp2_s16(*v65, v97);
                int16x4_t v223 = vuzp1_s16(*v65, v97);
                int16x4_t v225 = v99;
                int16x4_t v227 = vuzp1_s16(v96, v98);
                int16x4_t v229 = vuzp2_s16(v96, v98);
                uint64_t v95 = 32;
              }
              else if (*v51)
              {
                uint64_t v95 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v223, 16, (uint64_t)v65, v94);
                unsigned int v25 = a7;
              }
              else
              {
                uint64_t v95 = 0;
                int16x4_t v223 = 0;
                int16x4_t v225 = 0;
                int16x4_t v227 = 0;
                int16x4_t v229 = 0;
              }
              unsigned int v100 = (int8x8_t *)((char *)v65 + v95);
              unsigned int v101 = v51[1];
              if (v101 == 96)
              {
                int16x4_t v224 = (int16x4_t)vdup_lane_s8(*v100, 0);
                int16x4_t v226 = v224;
                int16x4_t v228 = v224;
                int16x4_t v230 = v224;
                uint64_t v102 = 1;
              }
              else if (v101 == 31)
              {
                int16x4_t v103 = (int16x4_t)v100[1];
                int16x4_t v104 = (int16x4_t)v100[2];
                int16x4_t v105 = (int16x4_t)v100[3];
                int16x4_t v106 = vuzp2_s16((int16x4_t)*v100, v104);
                int16x4_t v224 = vuzp1_s16((int16x4_t)*v100, v104);
                int16x4_t v226 = v106;
                int16x4_t v228 = vuzp1_s16(v103, v105);
                int16x4_t v230 = vuzp2_s16(v103, v105);
                uint64_t v102 = 32;
              }
              else if (v51[1])
              {
                uint64_t v102 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v224, 16, (uint64_t)v100, v101);
                unsigned int v25 = a7;
              }
              else
              {
                uint64_t v102 = 0;
                int16x4_t v224 = 0;
                int16x4_t v226 = 0;
                int16x4_t v228 = 0;
                int16x4_t v230 = 0;
              }
              int16x4_t v107 = (int8x8_t *)((char *)v100 + v102);
              unsigned int v108 = v51[2];
              if (v108 == 96)
              {
                int16x4_t v231 = (int16x4_t)vdup_lane_s8(*v107, 0);
                int16x4_t v233 = v231;
                int16x4_t v235 = v231;
                int16x4_t v237 = v231;
                uint64_t v109 = 1;
              }
              else if (v108 == 31)
              {
                int16x4_t v110 = (int16x4_t)v107[1];
                int16x4_t v111 = (int16x4_t)v107[2];
                int16x4_t v112 = (int16x4_t)v107[3];
                int16x4_t v113 = vuzp2_s16((int16x4_t)*v107, v111);
                int16x4_t v231 = vuzp1_s16((int16x4_t)*v107, v111);
                int16x4_t v233 = v113;
                int16x4_t v235 = vuzp1_s16(v110, v112);
                int16x4_t v237 = vuzp2_s16(v110, v112);
                uint64_t v109 = 32;
              }
              else if (v51[2])
              {
                uint64_t v109 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v231, 16, (uint64_t)v107, v108);
                unsigned int v25 = a7;
              }
              else
              {
                uint64_t v109 = 0;
                int16x4_t v231 = 0;
                int16x4_t v233 = 0;
                int16x4_t v235 = 0;
                int16x4_t v237 = 0;
              }
              uint64_t v114 = (int8x8_t *)((char *)v107 + v109);
              unsigned int v115 = v51[3];
              if (v115 == 96)
              {
                int16x4_t v232 = (int16x4_t)vdup_lane_s8(*v114, 0);
                int16x4_t v234 = v232;
                int16x4_t v236 = v232;
                int16x4_t v238 = v232;
                uint64_t v116 = 1;
              }
              else if (v115 == 31)
              {
                int16x4_t v117 = (int16x4_t)v114[1];
                int16x4_t v118 = (int16x4_t)v114[2];
                int16x4_t v119 = (int16x4_t)v114[3];
                int16x4_t v120 = vuzp2_s16((int16x4_t)*v114, v118);
                int16x4_t v232 = vuzp1_s16((int16x4_t)*v114, v118);
                int16x4_t v234 = v120;
                int16x4_t v236 = vuzp1_s16(v117, v119);
                int16x4_t v238 = vuzp2_s16(v117, v119);
                uint64_t v116 = 32;
              }
              else if (v51[3])
              {
                uint64_t v116 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v232, 16, (uint64_t)v114, v115);
                unsigned int v25 = a7;
              }
              else
              {
                uint64_t v116 = 0;
                int16x4_t v232 = 0;
                int16x4_t v234 = 0;
                int16x4_t v236 = 0;
                int16x4_t v238 = 0;
              }
              unsigned int v121 = (int8x8_t *)((char *)v114 + v116);
              unsigned int v122 = v51[4];
              if (v122 == 96)
              {
                int16x4_t v239 = (int16x4_t)vdup_lane_s8(*v121, 0);
                int16x4_t v241 = v239;
                int16x4_t v243 = v239;
                int16x4_t v245 = v239;
                uint64_t v123 = 1;
              }
              else if (v122 == 31)
              {
                int16x4_t v124 = (int16x4_t)v121[1];
                int16x4_t v125 = (int16x4_t)v121[2];
                int16x4_t v126 = (int16x4_t)v121[3];
                int16x4_t v127 = vuzp2_s16((int16x4_t)*v121, v125);
                int16x4_t v239 = vuzp1_s16((int16x4_t)*v121, v125);
                int16x4_t v241 = v127;
                int16x4_t v243 = vuzp1_s16(v124, v126);
                int16x4_t v245 = vuzp2_s16(v124, v126);
                uint64_t v123 = 32;
              }
              else if (v51[4])
              {
                uint64_t v123 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v239, 16, (uint64_t)v121, v122);
                unsigned int v25 = a7;
              }
              else
              {
                uint64_t v123 = 0;
                int16x4_t v239 = 0;
                int16x4_t v241 = 0;
                int16x4_t v243 = 0;
                int16x4_t v245 = 0;
              }
              int v128 = (int8x8_t *)((char *)v121 + v123);
              unsigned int v129 = v51[5];
              if (v129 == 96)
              {
                int16x4_t v240 = (int16x4_t)vdup_lane_s8(*v128, 0);
                int16x4_t v242 = v240;
                int16x4_t v244 = v240;
                int16x4_t v246 = v240;
                uint64_t v130 = 1;
              }
              else if (v129 == 31)
              {
                int16x4_t v131 = (int16x4_t)v128[1];
                int16x4_t v132 = (int16x4_t)v128[2];
                int16x4_t v133 = (int16x4_t)v128[3];
                int16x4_t v134 = vuzp2_s16((int16x4_t)*v128, v132);
                int16x4_t v240 = vuzp1_s16((int16x4_t)*v128, v132);
                int16x4_t v242 = v134;
                int16x4_t v244 = vuzp1_s16(v131, v133);
                int16x4_t v246 = vuzp2_s16(v131, v133);
                uint64_t v130 = 32;
              }
              else if (v51[5])
              {
                uint64_t v130 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v240, 16, (uint64_t)v128, v129);
                unsigned int v25 = a7;
              }
              else
              {
                uint64_t v130 = 0;
                int16x4_t v240 = 0;
                int16x4_t v242 = 0;
                int16x4_t v244 = 0;
                int16x4_t v246 = 0;
              }
              uint64_t v135 = (int8x8_t *)((char *)v128 + v130);
              unsigned int v136 = v51[6];
              if (v136 == 96)
              {
                int16x4_t v247 = (int16x4_t)vdup_lane_s8(*v135, 0);
                int16x4_t v249 = v247;
                int16x4_t v251 = v247;
                int16x4_t v253 = v247;
                uint64_t v137 = 1;
              }
              else if (v136 == 31)
              {
                int16x4_t v138 = (int16x4_t)v135[1];
                int16x4_t v139 = (int16x4_t)v135[2];
                int16x4_t v140 = (int16x4_t)v135[3];
                int16x4_t v141 = vuzp2_s16((int16x4_t)*v135, v139);
                int16x4_t v247 = vuzp1_s16((int16x4_t)*v135, v139);
                int16x4_t v249 = v141;
                int16x4_t v251 = vuzp1_s16(v138, v140);
                int16x4_t v253 = vuzp2_s16(v138, v140);
                uint64_t v137 = 32;
              }
              else if (v51[6])
              {
                uint64_t v137 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v247, 16, (uint64_t)v135, v136);
                unsigned int v25 = a7;
              }
              else
              {
                uint64_t v137 = 0;
                int16x4_t v247 = 0;
                int16x4_t v249 = 0;
                int16x4_t v251 = 0;
                int16x4_t v253 = 0;
              }
              long long v142 = (int8x8_t *)((char *)v135 + v137);
              unsigned int v143 = v51[7];
              if (v143 == 96)
              {
                int16x4_t v248 = (int16x4_t)vdup_lane_s8(*v142, 0);
                int16x4_t v250 = v248;
                int16x4_t v252 = v248;
                int16x4_t v254 = v248;
                uint64_t v144 = v218;
                if (v218) {
                  goto LABEL_151;
                }
              }
              else
              {
                if (v143 != 31)
                {
                  if (v51[7])
                  {
                    AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v248, 16, (uint64_t)v142, v143);
                    unsigned int v25 = a7;
                    uint64_t v144 = v218;
                    if (!v218) {
                      goto LABEL_180;
                    }
                  }
                  else
                  {
                    int16x4_t v248 = 0;
                    int16x4_t v250 = 0;
                    int16x4_t v252 = 0;
                    int16x4_t v254 = 0;
                    uint64_t v144 = v218;
                    if (!v218) {
                      goto LABEL_180;
                    }
                  }
LABEL_151:
                  uint64_t v149 = v219;
                  if (!v219) {
                    goto LABEL_180;
                  }
                  uint64_t v150 = 16 * v216;
                  uint64_t v152 = v214;
                  uint64_t v151 = v215;
                  if (v219 < 8)
                  {
                    unsigned int v153 = (char *)&v223 + v150 + v217 + 3;
                    size_t v154 = (char *)(v214 + 3);
                    do
                    {
                      *(v153 - 3) = *(v154 - 3);
                      if (v149 != 1)
                      {
                        *(v153 - 2) = *(v154 - 2);
                        if (v149 != 2)
                        {
                          *(v153 - 1) = *(v154 - 1);
                          if (v149 != 3)
                          {
                            *unsigned int v153 = *v154;
                            if (v149 != 4)
                            {
                              v153[1] = v154[1];
                              if (v149 != 5)
                              {
                                v153[2] = v154[2];
                                if (v149 != 6) {
                                  v153[3] = v154[3];
                                }
                              }
                            }
                          }
                        }
                      }
                      v153 += 16;
                      v154 += v151;
                      --v144;
                    }
                    while (v144);
                    goto LABEL_180;
                  }
                  uint64_t v155 = 0;
                  unsigned int v156 = (char *)&v223 + v217 + v150;
                  uint64_t v157 = v219 & 0xFFFFFFE0;
                  uint64_t v158 = v219 & 0xFFFFFFF8;
                  uint64_t v159 = (char *)&v225 + v150 + v217;
                  uint64_t v160 = (long long *)(v214 + 16);
                  int v161 = v156;
                  uint64_t v162 = v214;
                  while (2)
                  {
                    int v163 = (char *)(v152 + v155 * v151);
                    uint64_t v164 = &v156[16 * v155];
                    if ((unint64_t)(v164 - v163) >= 0x20)
                    {
                      if (v149 >= 0x20)
                      {
                        unsigned __int8 v167 = v160;
                        uint64_t v168 = v159;
                        uint64_t v169 = v149 & 0xFFFFFFE0;
                        do
                        {
                          long long v170 = *v167;
                          *(v168 - 1) = *(v167 - 1);
                          _OWORD *v168 = v170;
                          v168 += 2;
                          v167 += 2;
                          v169 -= 32;
                        }
                        while (v169);
                        if (v157 == v149) {
                          goto LABEL_163;
                        }
                        uint64_t v166 = v149 & 0xFFFFFFE0;
                        if ((v149 & 0x18) == 0)
                        {
                          v163 += v157;
                          v164 += v157;
                          int v165 = v149 & 0xFFFFFFE0;
                          goto LABEL_177;
                        }
                      }
                      else
                      {
                        uint64_t v166 = 0;
                      }
                      v164 += v158;
                      uint64_t v171 = v166 - (v149 & 0xFFFFFFF8);
                      unsigned int v172 = (uint64_t *)(v162 + v166);
                      unsigned int v173 = &v161[v166];
                      do
                      {
                        uint64_t v174 = *v172++;
                        *(void *)unsigned int v173 = v174;
                        v173 += 8;
                        v171 += 8;
                      }
                      while (v171);
                      if (v158 != v149)
                      {
                        v163 += v158;
                        int v165 = v149 & 0xFFFFFFF8;
                        goto LABEL_177;
                      }
                    }
                    else
                    {
                      int v165 = 0;
LABEL_177:
                      int v175 = v149 - v165;
                      do
                      {
                        char v176 = *v163++;
                        *v164++ = v176;
                        --v175;
                      }
                      while (v175);
                    }
LABEL_163:
                    ++v155;
                    v159 += 16;
                    uint64_t v160 = (long long *)((char *)v160 + v151);
                    v162 += v151;
                    v161 += 16;
                    if (v155 == v144) {
                      goto LABEL_180;
                    }
                    continue;
                  }
                }
                int16x4_t v145 = (int16x4_t)v142[1];
                int16x4_t v146 = (int16x4_t)v142[2];
                int16x4_t v147 = (int16x4_t)v142[3];
                int16x4_t v148 = vuzp2_s16((int16x4_t)*v142, v146);
                int16x4_t v248 = vuzp1_s16((int16x4_t)*v142, v146);
                int16x4_t v250 = v148;
                int16x4_t v252 = vuzp1_s16(v145, v147);
                int16x4_t v254 = vuzp2_s16(v145, v147);
                uint64_t v144 = v218;
                if (v218) {
                  goto LABEL_151;
                }
              }
LABEL_180:
              uint64_t v177 = 0;
              int16x4_t v178 = v212;
              int16x4_t v179 = v213;
              int v180 = v220;
              int v181 = v221;
              uint64_t v19 = a1;
              do
              {
                uint64_t v189 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)1,1u>::kSubblockPositions[v177 + 1];
                uint64_t v190 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)1,1u>::kSubblockPositions[v177];
                unsigned int v191 = (v180 - 8 * v190) & ~((v180 - 8 * (int)v190) >> 31);
                if (v191 >= 8) {
                  unsigned int v191 = 8;
                }
                unsigned int v192 = (v181 - 4 * v189) & ~((v181 - 4 * (int)v189) >> 31);
                if (v192 >= 4) {
                  unsigned int v192 = 4;
                }
                if (v191) {
                  BOOL v193 = v192 == 0;
                }
                else {
                  BOOL v193 = 1;
                }
                if (v193)
                {
                  char v188 = 0;
                }
                else
                {
                  uint64_t v182 = &v223 + 8 * v189 + v190;
                  int16x4_t v183 = v182[2];
                  int16x4_t v184 = vzip1_s16(*v182, v183);
                  int16x4_t v185 = vzip2_s16(*v182, v183);
                  int16x4_t v186 = v182[4];
                  int16x4_t v187 = v182[6];
                  int16x4_t *v178 = v184;
                  v178[1] = vzip1_s16(v186, v187);
                  v178[2] = v185;
                  v178[3] = vzip2_s16(v186, v187);
                  v178 += 4;
                  char v188 = 31;
                }
                *v179++ = v188;
                v177 += 2;
              }
              while (v177 != 16);
              goto LABEL_77;
            }
            long long v65 = (int16x4_t *)v222;
          }
          else
          {
            long long v65 = v53;
            uint64_t v56 = 2 * a11;
            uint64_t v55 = 4 * a11;
            if (v54) {
              goto LABEL_75;
            }
          }
          uint64_t v78 = 0;
          uint64_t v79 = v65;
          do
          {
            uint64_t v89 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)1,1u>::kSubblockPositions[v78 + 1];
            uint64_t v90 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)1,1u>::kSubblockPositions[v78];
            unsigned int v91 = (v34 - 8 * v90) & ~((int)(v34 - 8 * v90) >> 31);
            if (v91 >= 8) {
              unsigned int v91 = 8;
            }
            unsigned int v92 = (v28 - 4 * v89) & ~((int)(v28 - 4 * v89) >> 31);
            if (v92 >= 4) {
              unsigned int v92 = 4;
            }
            if (v91) {
              BOOL v93 = v92 == 0;
            }
            else {
              BOOL v93 = 1;
            }
            if (v93)
            {
              char v88 = 0;
            }
            else
            {
              unsigned int v80 = (int16x4_t *)(v52 + v55 * v89 + 8 * v90);
              int16x4_t v81 = *(int16x4_t *)((char *)v80 + a11);
              int16x4_t v82 = vzip1_s16(*v80, v81);
              int16x4_t v83 = vzip2_s16(*v80, v81);
              BOOL v84 = (int16x4_t *)((char *)v80 + v56);
              int16x4_t v85 = *(int16x4_t *)((char *)v84 + a11);
              int16x4_t v86 = vzip1_s16(*v84, v85);
              int16x4_t v87 = vzip2_s16(*v84, v85);
              int16x4_t *v79 = v82;
              v79[1] = v86;
              v79[2] = v83;
              v79[3] = v87;
              v79 += 4;
              char v88 = 31;
            }
            *v51++ = v88;
            v78 += 2;
          }
          while (v78 != 16);
LABEL_77:
          if (v210)
          {
            long long v66 = *(_OWORD *)v65->i8;
            long long v67 = *(_OWORD *)v65[2].i8;
            long long v68 = *(_OWORD *)v65[6].i8;
            *(_OWORD *)v53[4].i8 = *(_OWORD *)v65[4].i8;
            *(_OWORD *)v53[6].i8 = v68;
            *(_OWORD *)v53->i8 = v66;
            *(_OWORD *)v53[2].i8 = v67;
            long long v69 = *(_OWORD *)v65[8].i8;
            long long v70 = *(_OWORD *)v65[10].i8;
            long long v71 = *(_OWORD *)v65[14].i8;
            *(_OWORD *)v53[12].i8 = *(_OWORD *)v65[12].i8;
            *(_OWORD *)v53[14].i8 = v71;
            *(_OWORD *)v53[8].i8 = v69;
            *(_OWORD *)v53[10].i8 = v70;
            long long v72 = *(_OWORD *)v65[16].i8;
            long long v73 = *(_OWORD *)v65[18].i8;
            long long v74 = *(_OWORD *)v65[22].i8;
            *(_OWORD *)v53[20].i8 = *(_OWORD *)v65[20].i8;
            *(_OWORD *)v53[22].i8 = v74;
            *(_OWORD *)v53[16].i8 = v72;
            *(_OWORD *)v53[18].i8 = v73;
            long long v75 = *(_OWORD *)v65[24].i8;
            long long v76 = *(_OWORD *)v65[26].i8;
            long long v77 = *(_OWORD *)v65[30].i8;
            *(_OWORD *)v53[28].i8 = *(_OWORD *)v65[28].i8;
            *(_OWORD *)v53[30].i8 = v77;
            *(_OWORD *)v53[24].i8 = v75;
            *(_OWORD *)v53[26].i8 = v76;
          }
          unint64_t v29 = v209;
        }
        while (v209 != (v202 >> 4) + 1);
        ++v16;
      }
      while (v16 != v194);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>,false,(AGXHardwareTextureMemoryOrder)3>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, char a12)
{
  v159[7] = *MEMORY[0x263EF8340];
  size_t v128 = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v137 = a8;
  uint64_t v24 = a8 >> 4;
  unsigned int v127 = a8 + a10 - 1;
  unsigned int v25 = v127 >> 4;
  if (*(void *)(a1 + 168)) {
    int v26 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v26 = 0;
  }
  BOOL v27 = (v26 & 0xD00) == 0 || v26 == 768;
  int v28 = v26 & 0xE00;
  int v30 = !v27 && v28 != 1024;
  uint64_t v31 = a4;
  if (v24 <= v25)
  {
    unsigned int v134 = a7 + a9 - 1;
    if (a7 >> 4 <= v134 >> 4)
    {
      uint64_t v139 = (a5 - 1) >> 4;
      uint64_t v126 = (a6 - 1) >> 4;
      int v138 = ((a5 - 1) & 0xF) + 1;
      int v125 = ((a6 - 1) & 0xF) + 1;
      uint64_t v124 = v25 + 1;
      int v133 = v30;
      do
      {
        unsigned int v32 = (16 * v24) | 0xF;
        if (16 * (int)v24 <= v137) {
          unsigned int v33 = v137;
        }
        else {
          unsigned int v33 = 16 * v24;
        }
        if (v127 < v32) {
          unsigned int v32 = v127;
        }
        unsigned int v132 = v33 - 16 * v24;
        int v136 = v32 - v33 + 1;
        if (v24 == v126) {
          unsigned int v34 = v125;
        }
        else {
          unsigned int v34 = 16;
        }
        uint64_t v135 = a3 + (v33 - v137) * a11;
        unint64_t v35 = (unint64_t)a7 >> 4;
        uint64_t v36 = a2;
        do
        {
          unint64_t v37 = 16 * v35;
          unint64_t v38 = v35 + 1;
          unsigned int v39 = 16 * (v35 + 1) - 1;
          if (16 * (int)v35 <= a7) {
            unsigned int v40 = a7;
          }
          else {
            unsigned int v40 = 16 * v35;
          }
          if (v134 < v39) {
            unsigned int v39 = a7 + a9 - 1;
          }
          int v41 = v39 - v40 + 1;
          if (v35 == v139) {
            unsigned int v42 = v138;
          }
          else {
            unsigned int v42 = 16;
          }
          BOOL v43 = 1;
          if (16 * (int)v24 >= v137 && v37 >= a7)
          {
            int v44 = v138;
            if (v35 != v139) {
              int v44 = 16;
            }
            BOOL v43 = v41 != v44 || v136 != v34;
          }
          unsigned int v46 = *(_DWORD *)(a1 + 128) >> (*(unsigned char *)(a1 + 144) + a12);
          if (v46 <= 1) {
            unsigned int v46 = 1;
          }
          unsigned int v47 = v46 + 15;
          if (v47 < 0x20) {
            unsigned int v48 = 0;
          }
          else {
            unsigned int v48 = 32 - __clz(~(-1 << -(char)__clz((v47 >> 4) - 1)));
          }
          unsigned int v49 = *(_DWORD *)(a1 + 132) >> (*(unsigned char *)(a1 + 144) + a12);
          if (v49 <= 1) {
            unsigned int v49 = 1;
          }
          unsigned int v50 = v49 + 15;
          if (v50 < 0x20)
          {
            unsigned int v51 = 0;
            if (!v48)
            {
LABEL_65:
              uint64_t v53 = 0;
              goto LABEL_66;
            }
          }
          else
          {
            unsigned int v51 = 32 - __clz(~(-1 << -(char)__clz((v50 >> 4) - 1)));
            if (!(v51 | v48)) {
              goto LABEL_65;
            }
          }
          int v52 = 0;
          uint64_t v53 = 0;
          BOOL v54 = v48 != 0;
          BOOL v55 = v51 != 0;
          int v56 = 1;
          do
          {
            --v48;
            if (v54) {
              v53 |= (unint64_t)(v56 & v35) << v52++;
            }
            else {
              unsigned int v48 = 0;
            }
            --v51;
            if (v55) {
              v53 |= (unint64_t)(v56 & v24) << v52++;
            }
            else {
              unsigned int v51 = 0;
            }
            v56 *= 2;
            --v52;
            BOOL v55 = v51 != 0;
            BOOL v54 = v48 != 0;
          }
          while (v51 | v48);
LABEL_66:
          uint64_t v57 = v24 * v128 + 192 * v35;
          int v59 = v42 < 0x10 || v43;
          long long v60 = (unsigned __int8 *)(v31 + 8 * v53);
          uint64_t v58 = v40 - a7;
          long long v61 = (int16x4_t *)(v36 + v57);
          if (v34 < 0x10) {
            int v62 = 1;
          }
          else {
            int v62 = v59;
          }
          if (v30)
          {
            if (!v62)
            {
              long long v71 = (int16x4_t *)v151;
LABEL_80:
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::compressMacroblock(v135 + v58, a11, (uint64_t)v71, v60, v42, v34, *(_DWORD *)(*(void *)(a1 + 208) + 52), *(double *)&v17, *(double *)&v18, *(double *)&v19, *(double *)&v20, v21, v22, v23);
              int v30 = v133;
              if (!v133) {
                goto LABEL_27;
              }
              goto LABEL_113;
            }
            long long v63 = *(_OWORD *)v61[26].i8;
            v151[12] = *(_OWORD *)v61[24].i8;
            v151[13] = v63;
            long long v64 = *(_OWORD *)v61[30].i8;
            v151[14] = *(_OWORD *)v61[28].i8;
            v151[15] = v64;
            long long v65 = *(_OWORD *)v61[18].i8;
            v151[8] = *(_OWORD *)v61[16].i8;
            v151[9] = v65;
            long long v66 = *(_OWORD *)v61[22].i8;
            v151[10] = *(_OWORD *)v61[20].i8;
            v151[11] = v66;
            long long v67 = *(_OWORD *)v61[10].i8;
            v151[4] = *(_OWORD *)v61[8].i8;
            v151[5] = v67;
            long long v68 = *(_OWORD *)v61[14].i8;
            v151[6] = *(_OWORD *)v61[12].i8;
            v151[7] = v68;
            long long v69 = *(_OWORD *)v61[2].i8;
            v151[0] = *(_OWORD *)v61->i8;
            v151[1] = v69;
            long long v70 = *(_OWORD *)v61[6].i8;
            long long v71 = (int16x4_t *)v151;
            v151[2] = *(_OWORD *)v61[4].i8;
            v151[3] = v70;
          }
          else
          {
            long long v71 = v61;
            if (!v62) {
              goto LABEL_80;
            }
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE0ELj1ELh0ELNS7_13SubblockOrderE1EL19AGXTextureFootprint1EEELb0EL29AGXHardwareTextureMemoryOrder3EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = a1;
          int16x4_t v141 = v71;
          unsigned __int8 v149 = v42;
          unsigned __int8 v150 = v34;
          unsigned int v145 = v132;
          unsigned int v146 = v40 - v37;
          long long v142 = (unsigned char *)(v31 + 8 * v53);
          uint64_t v143 = v135 + v58;
          uint64_t v144 = a11;
          unsigned int v147 = v136;
          unsigned int v148 = v41;
          if (!v43)
          {
            int v72 = *(_DWORD *)(*(void *)(a1 + 208) + 52);
            long long v73 = (int16x4_t *)((char *)v71
                              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::decompressSubblock((uint64_t)v152, 16, v71, *v60, v72));
            long long v74 = (int16x4_t *)((char *)v73
                              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::decompressSubblock((uint64_t)v153, 16, v73, v60[1], v72));
            long long v75 = (int16x4_t *)((char *)v74
                              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::decompressSubblock((uint64_t)&v154, 16, v74, v60[2], v72));
            long long v76 = (int16x4_t *)((char *)v75
                              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::decompressSubblock((uint64_t)&v155, 16, v75, v60[3], v72));
            long long v77 = (int16x4_t *)((char *)v76
                              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::decompressSubblock((uint64_t)&v156, 16, v76, v60[4], v72));
            uint64_t v78 = (int16x4_t *)((char *)v77
                              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::decompressSubblock((uint64_t)&v157, 16, v77, v60[5], v72));
            uint64_t v79 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::decompressSubblock((uint64_t)&v158, 16, v78, v60[6], v72);
            AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::decompressSubblock((uint64_t)v159, 16, (int16x4_t *)((char *)v78 + v79), v60[7], v72);
            uint64_t v87 = v147;
            if (!v147) {
              goto LABEL_112;
            }
            uint64_t v88 = v148;
            if (!v148) {
              goto LABEL_112;
            }
            uint64_t v89 = 16 * v145;
            uint64_t v91 = v143;
            uint64_t v90 = v144;
            if (v148 < 8)
            {
              unsigned int v92 = &v152[v89 + 3 + v146];
              BOOL v93 = (unsigned char *)(v143 + 3);
              do
              {
                *(v92 - 3) = *(v93 - 3);
                if (v88 != 1)
                {
                  *(v92 - 2) = *(v93 - 2);
                  if (v88 != 2)
                  {
                    *(v92 - 1) = *(v93 - 1);
                    if (v88 != 3)
                    {
                      *unsigned int v92 = *v93;
                      if (v88 != 4)
                      {
                        v92[1] = v93[1];
                        if (v88 != 5)
                        {
                          v92[2] = v93[2];
                          if (v88 != 6) {
                            v92[3] = v93[3];
                          }
                        }
                      }
                    }
                  }
                }
                v92 += 16;
                v93 += v90;
                --v87;
              }
              while (v87);
LABEL_112:
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::compressMacroblock((unint64_t)v152, 16, (uint64_t)v141, v142, v149, v150, *(_DWORD *)(*(void *)(a1 + 208) + 52), *(double *)&v80, *(double *)&v81, v82, v83, v84, v85, v86);
              uint64_t v31 = a4;
              uint64_t v36 = a2;
              int v30 = v133;
              if (!v133) {
                goto LABEL_27;
              }
              goto LABEL_113;
            }
            uint64_t v94 = 0;
            uint64_t v95 = &v152[v146 + v89];
            uint64_t v96 = v148 & 0xFFFFFFE0;
            uint64_t v97 = v148 & 0xFFFFFFF8;
            int16x4_t v98 = &v153[v89 + 8 + v146];
            int16x4_t v99 = (long long *)(v143 + 16);
            unsigned int v100 = v95;
            uint64_t v101 = v143;
            while (2)
            {
              uint64_t v102 = (char *)(v91 + v94 * v90);
              int16x4_t v103 = &v95[16 * v94];
              if ((unint64_t)(v103 - v102) >= 0x20)
              {
                if (v88 >= 0x20)
                {
                  int16x4_t v106 = v99;
                  int16x4_t v107 = v98;
                  uint64_t v108 = v88 & 0xFFFFFFE0;
                  do
                  {
                    long long v80 = *(v106 - 1);
                    long long v81 = *v106;
                    *(v107 - 1) = v80;
                    *int16x4_t v107 = v81;
                    v107 += 2;
                    v106 += 2;
                    v108 -= 32;
                  }
                  while (v108);
                  if (v96 == v88) {
                    goto LABEL_95;
                  }
                  uint64_t v105 = v88 & 0xFFFFFFE0;
                  if ((v88 & 0x18) == 0)
                  {
                    v102 += v96;
                    v103 += v96;
                    int v104 = v88 & 0xFFFFFFE0;
                    goto LABEL_109;
                  }
                }
                else
                {
                  uint64_t v105 = 0;
                }
                v103 += v97;
                uint64_t v109 = v105 - (v88 & 0xFFFFFFF8);
                int16x4_t v110 = (uint64_t *)(v101 + v105);
                int16x4_t v111 = &v100[v105];
                do
                {
                  uint64_t v112 = *v110++;
                  *(void *)&long long v80 = v112;
                  *v111++ = v112;
                  v109 += 8;
                }
                while (v109);
                if (v97 != v88)
                {
                  v102 += v97;
                  int v104 = v88 & 0xFFFFFFF8;
                  goto LABEL_109;
                }
              }
              else
              {
                int v104 = 0;
LABEL_109:
                int v113 = v88 - v104;
                do
                {
                  char v114 = *v102++;
                  *v103++ = v114;
                  --v113;
                }
                while (v113);
              }
LABEL_95:
              ++v94;
              v98 += 16;
              int16x4_t v99 = (long long *)((char *)v99 + v90);
              v101 += v90;
              v100 += 16;
              if (v94 == v87) {
                goto LABEL_112;
              }
              continue;
            }
          }
          dispatch_sync(*(dispatch_queue_t *)(*(void *)(a1 + 8) + 7384), block);
          int v30 = v133;
          if (!v133) {
            goto LABEL_27;
          }
LABEL_113:
          long long v115 = *(_OWORD *)v71->i8;
          long long v116 = *(_OWORD *)v71[2].i8;
          long long v117 = *(_OWORD *)v71[6].i8;
          *(_OWORD *)v61[4].i8 = *(_OWORD *)v71[4].i8;
          *(_OWORD *)v61[6].i8 = v117;
          *(_OWORD *)v61->i8 = v115;
          *(_OWORD *)v61[2].i8 = v116;
          long long v118 = *(_OWORD *)v71[8].i8;
          long long v119 = *(_OWORD *)v71[10].i8;
          long long v120 = *(_OWORD *)v71[14].i8;
          *(_OWORD *)v61[12].i8 = *(_OWORD *)v71[12].i8;
          *(_OWORD *)v61[14].i8 = v120;
          *(_OWORD *)v61[8].i8 = v118;
          *(_OWORD *)v61[10].i8 = v119;
          long long v121 = *(_OWORD *)v71[16].i8;
          long long v122 = *(_OWORD *)v71[18].i8;
          long long v123 = *(_OWORD *)v71[22].i8;
          *(_OWORD *)v61[20].i8 = *(_OWORD *)v71[20].i8;
          *(_OWORD *)v61[22].i8 = v123;
          *(_OWORD *)v61[16].i8 = v121;
          *(_OWORD *)v61[18].i8 = v122;
          long long v17 = *(_OWORD *)v71[24].i8;
          long long v18 = *(_OWORD *)v71[26].i8;
          long long v19 = *(_OWORD *)v71[28].i8;
          long long v20 = *(_OWORD *)v71[30].i8;
          *(_OWORD *)v61[28].i8 = v19;
          *(_OWORD *)v61[30].i8 = v20;
          *(_OWORD *)v61[24].i8 = v17;
          *(_OWORD *)v61[26].i8 = v18;
LABEL_27:
          unint64_t v35 = v38;
        }
        while (v38 != (v134 >> 4) + 1);
        ++v24;
      }
      while (v24 != v124);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>,false,(AGXHardwareTextureMemoryOrder)3>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, char a12)
{
  v159[7] = *MEMORY[0x263EF8340];
  size_t v128 = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v137 = a8;
  uint64_t v24 = a8 >> 4;
  unsigned int v127 = a8 + a10 - 1;
  unsigned int v25 = v127 >> 4;
  if (*(void *)(a1 + 168)) {
    int v26 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v26 = 0;
  }
  BOOL v27 = (v26 & 0xD00) == 0 || v26 == 768;
  int v28 = v26 & 0xE00;
  int v30 = !v27 && v28 != 1024;
  uint64_t v31 = a4;
  if (v24 <= v25)
  {
    unsigned int v134 = a7 + a9 - 1;
    if (a7 >> 4 <= v134 >> 4)
    {
      uint64_t v139 = (a5 - 1) >> 4;
      uint64_t v126 = (a6 - 1) >> 4;
      int v138 = ((a5 - 1) & 0xF) + 1;
      int v125 = ((a6 - 1) & 0xF) + 1;
      uint64_t v124 = v25 + 1;
      int v133 = v30;
      do
      {
        unsigned int v32 = (16 * v24) | 0xF;
        if (16 * (int)v24 <= v137) {
          unsigned int v33 = v137;
        }
        else {
          unsigned int v33 = 16 * v24;
        }
        if (v127 < v32) {
          unsigned int v32 = v127;
        }
        unsigned int v132 = v33 - 16 * v24;
        int v136 = v32 - v33 + 1;
        if (v24 == v126) {
          unsigned int v34 = v125;
        }
        else {
          unsigned int v34 = 16;
        }
        uint64_t v135 = a3 + (v33 - v137) * a11;
        unint64_t v35 = (unint64_t)a7 >> 4;
        uint64_t v36 = a2;
        do
        {
          unint64_t v37 = 16 * v35;
          unint64_t v38 = v35 + 1;
          unsigned int v39 = 16 * (v35 + 1) - 1;
          if (16 * (int)v35 <= a7) {
            unsigned int v40 = a7;
          }
          else {
            unsigned int v40 = 16 * v35;
          }
          if (v134 < v39) {
            unsigned int v39 = a7 + a9 - 1;
          }
          int v41 = v39 - v40 + 1;
          if (v35 == v139) {
            unsigned int v42 = v138;
          }
          else {
            unsigned int v42 = 16;
          }
          BOOL v43 = 1;
          if (16 * (int)v24 >= v137 && v37 >= a7)
          {
            int v44 = v138;
            if (v35 != v139) {
              int v44 = 16;
            }
            BOOL v43 = v41 != v44 || v136 != v34;
          }
          unsigned int v46 = *(_DWORD *)(a1 + 128) >> (*(unsigned char *)(a1 + 144) + a12);
          if (v46 <= 1) {
            unsigned int v46 = 1;
          }
          unsigned int v47 = v46 + 15;
          if (v47 < 0x20) {
            unsigned int v48 = 0;
          }
          else {
            unsigned int v48 = 32 - __clz(~(-1 << -(char)__clz((v47 >> 4) - 1)));
          }
          unsigned int v49 = *(_DWORD *)(a1 + 132) >> (*(unsigned char *)(a1 + 144) + a12);
          if (v49 <= 1) {
            unsigned int v49 = 1;
          }
          unsigned int v50 = v49 + 15;
          if (v50 < 0x20)
          {
            unsigned int v51 = 0;
            if (!v48)
            {
LABEL_65:
              uint64_t v53 = 0;
              goto LABEL_66;
            }
          }
          else
          {
            unsigned int v51 = 32 - __clz(~(-1 << -(char)__clz((v50 >> 4) - 1)));
            if (!(v51 | v48)) {
              goto LABEL_65;
            }
          }
          int v52 = 0;
          uint64_t v53 = 0;
          BOOL v54 = v48 != 0;
          BOOL v55 = v51 != 0;
          int v56 = 1;
          do
          {
            --v48;
            if (v54) {
              v53 |= (unint64_t)(v56 & v35) << v52++;
            }
            else {
              unsigned int v48 = 0;
            }
            --v51;
            if (v55) {
              v53 |= (unint64_t)(v56 & v24) << v52++;
            }
            else {
              unsigned int v51 = 0;
            }
            v56 *= 2;
            --v52;
            BOOL v55 = v51 != 0;
            BOOL v54 = v48 != 0;
          }
          while (v51 | v48);
LABEL_66:
          uint64_t v57 = v24 * v128 + 160 * v35;
          int v59 = v42 < 0x10 || v43;
          long long v60 = (unsigned __int8 *)(v31 + 8 * v53);
          uint64_t v58 = v40 - a7;
          long long v61 = (int16x4_t *)(v36 + v57);
          if (v34 < 0x10) {
            int v62 = 1;
          }
          else {
            int v62 = v59;
          }
          if (v30)
          {
            if (!v62)
            {
              long long v71 = (int16x4_t *)v151;
LABEL_80:
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::compressMacroblock(v135 + v58, a11, (uint64_t)v71, v60, v42, v34, *(_DWORD *)(*(void *)(a1 + 208) + 52), *(double *)&v17, *(double *)&v18, *(double *)&v19, *(double *)&v20, v21, v22, v23);
              int v30 = v133;
              if (!v133) {
                goto LABEL_27;
              }
              goto LABEL_113;
            }
            long long v63 = *(_OWORD *)v61[26].i8;
            v151[12] = *(_OWORD *)v61[24].i8;
            v151[13] = v63;
            long long v64 = *(_OWORD *)v61[30].i8;
            v151[14] = *(_OWORD *)v61[28].i8;
            v151[15] = v64;
            long long v65 = *(_OWORD *)v61[18].i8;
            v151[8] = *(_OWORD *)v61[16].i8;
            v151[9] = v65;
            long long v66 = *(_OWORD *)v61[22].i8;
            v151[10] = *(_OWORD *)v61[20].i8;
            v151[11] = v66;
            long long v67 = *(_OWORD *)v61[10].i8;
            v151[4] = *(_OWORD *)v61[8].i8;
            v151[5] = v67;
            long long v68 = *(_OWORD *)v61[14].i8;
            v151[6] = *(_OWORD *)v61[12].i8;
            v151[7] = v68;
            long long v69 = *(_OWORD *)v61[2].i8;
            v151[0] = *(_OWORD *)v61->i8;
            v151[1] = v69;
            long long v70 = *(_OWORD *)v61[6].i8;
            long long v71 = (int16x4_t *)v151;
            v151[2] = *(_OWORD *)v61[4].i8;
            v151[3] = v70;
          }
          else
          {
            long long v71 = v61;
            if (!v62) {
              goto LABEL_80;
            }
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE0ELj1ELh0ELNS7_13SubblockOrderE1EL19AGXTextureFootprint2EEELb0EL29AGXHardwareTextureMemoryOrder3EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = a1;
          int16x4_t v141 = v71;
          unsigned __int8 v149 = v42;
          unsigned __int8 v150 = v34;
          unsigned int v145 = v132;
          unsigned int v146 = v40 - v37;
          long long v142 = (unsigned char *)(v31 + 8 * v53);
          uint64_t v143 = v135 + v58;
          uint64_t v144 = a11;
          unsigned int v147 = v136;
          unsigned int v148 = v41;
          if (!v43)
          {
            int v72 = *(_DWORD *)(*(void *)(a1 + 208) + 52);
            long long v73 = (int16x4_t *)((char *)v71
                              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressSubblock((uint64_t)v152, 16, v71, *v60, v72));
            long long v74 = (int16x4_t *)((char *)v73
                              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressSubblock((uint64_t)v153, 16, v73, v60[1], v72));
            long long v75 = (int16x4_t *)((char *)v74
                              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressSubblock((uint64_t)&v154, 16, v74, v60[2], v72));
            long long v76 = (int16x4_t *)((char *)v75
                              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressSubblock((uint64_t)&v155, 16, v75, v60[3], v72));
            long long v77 = (int16x4_t *)((char *)v76
                              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressSubblock((uint64_t)&v156, 16, v76, v60[4], v72));
            uint64_t v78 = (int16x4_t *)((char *)v77
                              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressSubblock((uint64_t)&v157, 16, v77, v60[5], v72));
            uint64_t v79 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressSubblock((uint64_t)&v158, 16, v78, v60[6], v72);
            AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressSubblock((uint64_t)v159, 16, (int16x4_t *)((char *)v78 + v79), v60[7], v72);
            uint64_t v87 = v147;
            if (!v147) {
              goto LABEL_112;
            }
            uint64_t v88 = v148;
            if (!v148) {
              goto LABEL_112;
            }
            uint64_t v89 = 16 * v145;
            uint64_t v91 = v143;
            uint64_t v90 = v144;
            if (v148 < 8)
            {
              unsigned int v92 = &v152[v89 + 3 + v146];
              BOOL v93 = (unsigned char *)(v143 + 3);
              do
              {
                *(v92 - 3) = *(v93 - 3);
                if (v88 != 1)
                {
                  *(v92 - 2) = *(v93 - 2);
                  if (v88 != 2)
                  {
                    *(v92 - 1) = *(v93 - 1);
                    if (v88 != 3)
                    {
                      *unsigned int v92 = *v93;
                      if (v88 != 4)
                      {
                        v92[1] = v93[1];
                        if (v88 != 5)
                        {
                          v92[2] = v93[2];
                          if (v88 != 6) {
                            v92[3] = v93[3];
                          }
                        }
                      }
                    }
                  }
                }
                v92 += 16;
                v93 += v90;
                --v87;
              }
              while (v87);
LABEL_112:
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::compressMacroblock((unint64_t)v152, 16, (uint64_t)v141, v142, v149, v150, *(_DWORD *)(*(void *)(a1 + 208) + 52), *(double *)&v80, *(double *)&v81, v82, v83, v84, v85, v86);
              uint64_t v31 = a4;
              uint64_t v36 = a2;
              int v30 = v133;
              if (!v133) {
                goto LABEL_27;
              }
              goto LABEL_113;
            }
            uint64_t v94 = 0;
            uint64_t v95 = &v152[v146 + v89];
            uint64_t v96 = v148 & 0xFFFFFFE0;
            uint64_t v97 = v148 & 0xFFFFFFF8;
            int16x4_t v98 = &v153[v89 + 8 + v146];
            int16x4_t v99 = (long long *)(v143 + 16);
            unsigned int v100 = v95;
            uint64_t v101 = v143;
            while (2)
            {
              uint64_t v102 = (char *)(v91 + v94 * v90);
              int16x4_t v103 = &v95[16 * v94];
              if ((unint64_t)(v103 - v102) >= 0x20)
              {
                if (v88 >= 0x20)
                {
                  int16x4_t v106 = v99;
                  int16x4_t v107 = v98;
                  uint64_t v108 = v88 & 0xFFFFFFE0;
                  do
                  {
                    long long v80 = *(v106 - 1);
                    long long v81 = *v106;
                    *(v107 - 1) = v80;
                    *int16x4_t v107 = v81;
                    v107 += 2;
                    v106 += 2;
                    v108 -= 32;
                  }
                  while (v108);
                  if (v96 == v88) {
                    goto LABEL_95;
                  }
                  uint64_t v105 = v88 & 0xFFFFFFE0;
                  if ((v88 & 0x18) == 0)
                  {
                    v102 += v96;
                    v103 += v96;
                    int v104 = v88 & 0xFFFFFFE0;
                    goto LABEL_109;
                  }
                }
                else
                {
                  uint64_t v105 = 0;
                }
                v103 += v97;
                uint64_t v109 = v105 - (v88 & 0xFFFFFFF8);
                int16x4_t v110 = (uint64_t *)(v101 + v105);
                int16x4_t v111 = &v100[v105];
                do
                {
                  uint64_t v112 = *v110++;
                  *(void *)&long long v80 = v112;
                  *v111++ = v112;
                  v109 += 8;
                }
                while (v109);
                if (v97 != v88)
                {
                  v102 += v97;
                  int v104 = v88 & 0xFFFFFFF8;
                  goto LABEL_109;
                }
              }
              else
              {
                int v104 = 0;
LABEL_109:
                int v113 = v88 - v104;
                do
                {
                  char v114 = *v102++;
                  *v103++ = v114;
                  --v113;
                }
                while (v113);
              }
LABEL_95:
              ++v94;
              v98 += 16;
              int16x4_t v99 = (long long *)((char *)v99 + v90);
              v101 += v90;
              v100 += 16;
              if (v94 == v87) {
                goto LABEL_112;
              }
              continue;
            }
          }
          dispatch_sync(*(dispatch_queue_t *)(*(void *)(a1 + 8) + 7384), block);
          int v30 = v133;
          if (!v133) {
            goto LABEL_27;
          }
LABEL_113:
          long long v115 = *(_OWORD *)v71->i8;
          long long v116 = *(_OWORD *)v71[2].i8;
          long long v117 = *(_OWORD *)v71[6].i8;
          *(_OWORD *)v61[4].i8 = *(_OWORD *)v71[4].i8;
          *(_OWORD *)v61[6].i8 = v117;
          *(_OWORD *)v61->i8 = v115;
          *(_OWORD *)v61[2].i8 = v116;
          long long v118 = *(_OWORD *)v71[8].i8;
          long long v119 = *(_OWORD *)v71[10].i8;
          long long v120 = *(_OWORD *)v71[14].i8;
          *(_OWORD *)v61[12].i8 = *(_OWORD *)v71[12].i8;
          *(_OWORD *)v61[14].i8 = v120;
          *(_OWORD *)v61[8].i8 = v118;
          *(_OWORD *)v61[10].i8 = v119;
          long long v121 = *(_OWORD *)v71[16].i8;
          long long v122 = *(_OWORD *)v71[18].i8;
          long long v123 = *(_OWORD *)v71[22].i8;
          *(_OWORD *)v61[20].i8 = *(_OWORD *)v71[20].i8;
          *(_OWORD *)v61[22].i8 = v123;
          *(_OWORD *)v61[16].i8 = v121;
          *(_OWORD *)v61[18].i8 = v122;
          long long v17 = *(_OWORD *)v71[24].i8;
          long long v18 = *(_OWORD *)v71[26].i8;
          long long v19 = *(_OWORD *)v71[28].i8;
          long long v20 = *(_OWORD *)v71[30].i8;
          *(_OWORD *)v61[28].i8 = v19;
          *(_OWORD *)v61[30].i8 = v20;
          *(_OWORD *)v61[24].i8 = v17;
          *(_OWORD *)v61[26].i8 = v18;
LABEL_27:
          unint64_t v35 = v38;
        }
        while (v38 != (v134 >> 4) + 1);
        ++v24;
      }
      while (v24 != v124);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>,false,(AGXHardwareTextureMemoryOrder)3>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, char a12)
{
  v159[7] = *MEMORY[0x263EF8340];
  size_t v128 = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v137 = a8;
  uint64_t v24 = a8 >> 4;
  unsigned int v127 = a8 + a10 - 1;
  unsigned int v25 = v127 >> 4;
  if (*(void *)(a1 + 168)) {
    int v26 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v26 = 0;
  }
  BOOL v27 = (v26 & 0xD00) == 0 || v26 == 768;
  int v28 = v26 & 0xE00;
  int v30 = !v27 && v28 != 1024;
  uint64_t v31 = a4;
  if (v24 <= v25)
  {
    unsigned int v134 = a7 + a9 - 1;
    if (a7 >> 4 <= v134 >> 4)
    {
      uint64_t v139 = (a5 - 1) >> 4;
      uint64_t v126 = (a6 - 1) >> 4;
      int v138 = ((a5 - 1) & 0xF) + 1;
      int v125 = ((a6 - 1) & 0xF) + 1;
      uint64_t v124 = v25 + 1;
      int v133 = v30;
      do
      {
        unsigned int v32 = (16 * v24) | 0xF;
        if (16 * (int)v24 <= v137) {
          unsigned int v33 = v137;
        }
        else {
          unsigned int v33 = 16 * v24;
        }
        if (v127 < v32) {
          unsigned int v32 = v127;
        }
        unsigned int v132 = v33 - 16 * v24;
        int v136 = v32 - v33 + 1;
        if (v24 == v126) {
          unsigned int v34 = v125;
        }
        else {
          unsigned int v34 = 16;
        }
        uint64_t v135 = a3 + (v33 - v137) * a11;
        unint64_t v35 = (unint64_t)a7 >> 4;
        uint64_t v36 = a2;
        do
        {
          unint64_t v37 = 16 * v35;
          unint64_t v38 = v35 + 1;
          unsigned int v39 = 16 * (v35 + 1) - 1;
          if (16 * (int)v35 <= a7) {
            unsigned int v40 = a7;
          }
          else {
            unsigned int v40 = 16 * v35;
          }
          if (v134 < v39) {
            unsigned int v39 = a7 + a9 - 1;
          }
          int v41 = v39 - v40 + 1;
          if (v35 == v139) {
            unsigned int v42 = v138;
          }
          else {
            unsigned int v42 = 16;
          }
          BOOL v43 = 1;
          if (16 * (int)v24 >= v137 && v37 >= a7)
          {
            int v44 = v138;
            if (v35 != v139) {
              int v44 = 16;
            }
            BOOL v43 = v41 != v44 || v136 != v34;
          }
          unsigned int v46 = *(_DWORD *)(a1 + 128) >> (*(unsigned char *)(a1 + 144) + a12);
          if (v46 <= 1) {
            unsigned int v46 = 1;
          }
          unsigned int v47 = v46 + 15;
          if (v47 < 0x20) {
            unsigned int v48 = 0;
          }
          else {
            unsigned int v48 = 32 - __clz(~(-1 << -(char)__clz((v47 >> 4) - 1)));
          }
          unsigned int v49 = *(_DWORD *)(a1 + 132) >> (*(unsigned char *)(a1 + 144) + a12);
          if (v49 <= 1) {
            unsigned int v49 = 1;
          }
          unsigned int v50 = v49 + 15;
          if (v50 < 0x20)
          {
            unsigned int v51 = 0;
            if (!v48)
            {
LABEL_65:
              uint64_t v53 = 0;
              goto LABEL_66;
            }
          }
          else
          {
            unsigned int v51 = 32 - __clz(~(-1 << -(char)__clz((v50 >> 4) - 1)));
            if (!(v51 | v48)) {
              goto LABEL_65;
            }
          }
          int v52 = 0;
          uint64_t v53 = 0;
          BOOL v54 = v48 != 0;
          BOOL v55 = v51 != 0;
          int v56 = 1;
          do
          {
            --v48;
            if (v54) {
              v53 |= (unint64_t)(v56 & v35) << v52++;
            }
            else {
              unsigned int v48 = 0;
            }
            --v51;
            if (v55) {
              v53 |= (unint64_t)(v56 & v24) << v52++;
            }
            else {
              unsigned int v51 = 0;
            }
            v56 *= 2;
            --v52;
            BOOL v55 = v51 != 0;
            BOOL v54 = v48 != 0;
          }
          while (v51 | v48);
LABEL_66:
          size_t v57 = v24 * v128 + (v35 << 7);
          int v59 = v42 < 0x10 || v43;
          long long v60 = (unsigned __int8 *)(v31 + 8 * v53);
          uint64_t v58 = v40 - a7;
          long long v61 = (int16x4_t *)(v36 + v57);
          if (v34 < 0x10) {
            int v62 = 1;
          }
          else {
            int v62 = v59;
          }
          if (v30)
          {
            if (!v62)
            {
              long long v71 = (int16x4_t *)v151;
LABEL_80:
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::compressMacroblock(v135 + v58, a11, (unint64_t)v71, v60, v42, v34, *(_DWORD *)(*(void *)(a1 + 208) + 52), *(double *)&v17, *(double *)&v18, *(double *)&v19, *(double *)&v20, v21, v22, v23);
              int v30 = v133;
              if (!v133) {
                goto LABEL_27;
              }
              goto LABEL_113;
            }
            long long v63 = *(_OWORD *)v61[26].i8;
            v151[12] = *(_OWORD *)v61[24].i8;
            v151[13] = v63;
            long long v64 = *(_OWORD *)v61[30].i8;
            v151[14] = *(_OWORD *)v61[28].i8;
            v151[15] = v64;
            long long v65 = *(_OWORD *)v61[18].i8;
            v151[8] = *(_OWORD *)v61[16].i8;
            v151[9] = v65;
            long long v66 = *(_OWORD *)v61[22].i8;
            v151[10] = *(_OWORD *)v61[20].i8;
            v151[11] = v66;
            long long v67 = *(_OWORD *)v61[10].i8;
            v151[4] = *(_OWORD *)v61[8].i8;
            v151[5] = v67;
            long long v68 = *(_OWORD *)v61[14].i8;
            v151[6] = *(_OWORD *)v61[12].i8;
            v151[7] = v68;
            long long v69 = *(_OWORD *)v61[2].i8;
            v151[0] = *(_OWORD *)v61->i8;
            v151[1] = v69;
            long long v70 = *(_OWORD *)v61[6].i8;
            long long v71 = (int16x4_t *)v151;
            v151[2] = *(_OWORD *)v61[4].i8;
            v151[3] = v70;
          }
          else
          {
            long long v71 = v61;
            if (!v62) {
              goto LABEL_80;
            }
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE0ELj1ELh0ELNS7_13SubblockOrderE1EL19AGXTextureFootprint3EEELb0EL29AGXHardwareTextureMemoryOrder3EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = a1;
          int16x4_t v141 = v71;
          unsigned __int8 v149 = v42;
          unsigned __int8 v150 = v34;
          unsigned int v145 = v132;
          unsigned int v146 = v40 - v37;
          long long v142 = (unsigned char *)(v31 + 8 * v53);
          uint64_t v143 = v135 + v58;
          uint64_t v144 = a11;
          unsigned int v147 = v136;
          unsigned int v148 = v41;
          if (!v43)
          {
            int v72 = *(_DWORD *)(*(void *)(a1 + 208) + 52);
            long long v73 = (int16x4_t *)((char *)v71
                              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::decompressSubblock((uint64_t)v152, 16, v71, *v60, v72));
            long long v74 = (int16x4_t *)((char *)v73
                              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::decompressSubblock((uint64_t)v153, 16, v73, v60[1], v72));
            long long v75 = (int16x4_t *)((char *)v74
                              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::decompressSubblock((uint64_t)&v154, 16, v74, v60[2], v72));
            long long v76 = (int16x4_t *)((char *)v75
                              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::decompressSubblock((uint64_t)&v155, 16, v75, v60[3], v72));
            long long v77 = (int16x4_t *)((char *)v76
                              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::decompressSubblock((uint64_t)&v156, 16, v76, v60[4], v72));
            uint64_t v78 = (int16x4_t *)((char *)v77
                              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::decompressSubblock((uint64_t)&v157, 16, v77, v60[5], v72));
            uint64_t v79 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::decompressSubblock((uint64_t)&v158, 16, v78, v60[6], v72);
            AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::decompressSubblock((uint64_t)v159, 16, (int16x4_t *)((char *)v78 + v79), v60[7], v72);
            uint64_t v87 = v147;
            if (!v147) {
              goto LABEL_112;
            }
            uint64_t v88 = v148;
            if (!v148) {
              goto LABEL_112;
            }
            uint64_t v89 = 16 * v145;
            uint64_t v91 = v143;
            uint64_t v90 = v144;
            if (v148 < 8)
            {
              unsigned int v92 = &v152[v89 + 3 + v146];
              BOOL v93 = (unsigned char *)(v143 + 3);
              do
              {
                *(v92 - 3) = *(v93 - 3);
                if (v88 != 1)
                {
                  *(v92 - 2) = *(v93 - 2);
                  if (v88 != 2)
                  {
                    *(v92 - 1) = *(v93 - 1);
                    if (v88 != 3)
                    {
                      *unsigned int v92 = *v93;
                      if (v88 != 4)
                      {
                        v92[1] = v93[1];
                        if (v88 != 5)
                        {
                          v92[2] = v93[2];
                          if (v88 != 6) {
                            v92[3] = v93[3];
                          }
                        }
                      }
                    }
                  }
                }
                v92 += 16;
                v93 += v90;
                --v87;
              }
              while (v87);
LABEL_112:
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::compressMacroblock((unint64_t)v152, 16, (unint64_t)v141, v142, v149, v150, *(_DWORD *)(*(void *)(a1 + 208) + 52), *(double *)&v80, *(double *)&v81, v82, v83, v84, v85, v86);
              uint64_t v31 = a4;
              uint64_t v36 = a2;
              int v30 = v133;
              if (!v133) {
                goto LABEL_27;
              }
              goto LABEL_113;
            }
            uint64_t v94 = 0;
            uint64_t v95 = &v152[v146 + v89];
            uint64_t v96 = v148 & 0xFFFFFFE0;
            uint64_t v97 = v148 & 0xFFFFFFF8;
            int16x4_t v98 = &v153[v89 + 8 + v146];
            int16x4_t v99 = (long long *)(v143 + 16);
            unsigned int v100 = v95;
            uint64_t v101 = v143;
            while (2)
            {
              uint64_t v102 = (char *)(v91 + v94 * v90);
              int16x4_t v103 = &v95[16 * v94];
              if ((unint64_t)(v103 - v102) >= 0x20)
              {
                if (v88 >= 0x20)
                {
                  int16x4_t v106 = v99;
                  int16x4_t v107 = v98;
                  uint64_t v108 = v88 & 0xFFFFFFE0;
                  do
                  {
                    long long v80 = *(v106 - 1);
                    long long v81 = *v106;
                    *(v107 - 1) = v80;
                    *int16x4_t v107 = v81;
                    v107 += 2;
                    v106 += 2;
                    v108 -= 32;
                  }
                  while (v108);
                  if (v96 == v88) {
                    goto LABEL_95;
                  }
                  uint64_t v105 = v88 & 0xFFFFFFE0;
                  if ((v88 & 0x18) == 0)
                  {
                    v102 += v96;
                    v103 += v96;
                    int v104 = v88 & 0xFFFFFFE0;
                    goto LABEL_109;
                  }
                }
                else
                {
                  uint64_t v105 = 0;
                }
                v103 += v97;
                uint64_t v109 = v105 - (v88 & 0xFFFFFFF8);
                int16x4_t v110 = (uint64_t *)(v101 + v105);
                int16x4_t v111 = &v100[v105];
                do
                {
                  uint64_t v112 = *v110++;
                  *(void *)&long long v80 = v112;
                  *v111++ = v112;
                  v109 += 8;
                }
                while (v109);
                if (v97 != v88)
                {
                  v102 += v97;
                  int v104 = v88 & 0xFFFFFFF8;
                  goto LABEL_109;
                }
              }
              else
              {
                int v104 = 0;
LABEL_109:
                int v113 = v88 - v104;
                do
                {
                  char v114 = *v102++;
                  *v103++ = v114;
                  --v113;
                }
                while (v113);
              }
LABEL_95:
              ++v94;
              v98 += 16;
              int16x4_t v99 = (long long *)((char *)v99 + v90);
              v101 += v90;
              v100 += 16;
              if (v94 == v87) {
                goto LABEL_112;
              }
              continue;
            }
          }
          dispatch_sync(*(dispatch_queue_t *)(*(void *)(a1 + 8) + 7384), block);
          int v30 = v133;
          if (!v133) {
            goto LABEL_27;
          }
LABEL_113:
          long long v115 = *(_OWORD *)v71->i8;
          long long v116 = *(_OWORD *)v71[2].i8;
          long long v117 = *(_OWORD *)v71[6].i8;
          *(_OWORD *)v61[4].i8 = *(_OWORD *)v71[4].i8;
          *(_OWORD *)v61[6].i8 = v117;
          *(_OWORD *)v61->i8 = v115;
          *(_OWORD *)v61[2].i8 = v116;
          long long v118 = *(_OWORD *)v71[8].i8;
          long long v119 = *(_OWORD *)v71[10].i8;
          long long v120 = *(_OWORD *)v71[14].i8;
          *(_OWORD *)v61[12].i8 = *(_OWORD *)v71[12].i8;
          *(_OWORD *)v61[14].i8 = v120;
          *(_OWORD *)v61[8].i8 = v118;
          *(_OWORD *)v61[10].i8 = v119;
          long long v121 = *(_OWORD *)v71[16].i8;
          long long v122 = *(_OWORD *)v71[18].i8;
          long long v123 = *(_OWORD *)v71[22].i8;
          *(_OWORD *)v61[20].i8 = *(_OWORD *)v71[20].i8;
          *(_OWORD *)v61[22].i8 = v123;
          *(_OWORD *)v61[16].i8 = v121;
          *(_OWORD *)v61[18].i8 = v122;
          long long v17 = *(_OWORD *)v71[24].i8;
          long long v18 = *(_OWORD *)v71[26].i8;
          long long v19 = *(_OWORD *)v71[28].i8;
          long long v20 = *(_OWORD *)v71[30].i8;
          *(_OWORD *)v61[28].i8 = v19;
          *(_OWORD *)v61[30].i8 = v20;
          *(_OWORD *)v61[24].i8 = v17;
          *(_OWORD *)v61[26].i8 = v18;
LABEL_27:
          unint64_t v35 = v38;
        }
        while (v38 != (v134 >> 4) + 1);
        ++v24;
      }
      while (v24 != v124);
    }
  }
}

uint64_t AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)3>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, char a12)
{
  uint64_t v209 = *MEMORY[0x263EF8340];
  size_t v148 = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v158 = a8;
  uint64_t v20 = a8 >> 4;
  unsigned int v147 = a8 + a10 - 1;
  unsigned int v21 = v147 >> 4;
  uint64_t v159 = a1;
  if (*(void *)(a1 + 168)) {
    int v22 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v22 = 0;
  }
  BOOL v23 = (v22 & 0xD00) == 0 || v22 == 768;
  int v24 = v22 & 0xE00;
  int v26 = !v23 && v24 != 1024;
  int v163 = v26;
  uint64_t result = a1;
  if (v20 <= v21)
  {
    unsigned int v153 = a7 + a9 - 1;
    if (a7 >> 4 <= v153 >> 4)
    {
      uint64_t v161 = (a5 - 1) >> 4;
      uint64_t v146 = (a6 - 1) >> 4;
      int v160 = ((a5 - 1) & 0xF) + 1;
      int v145 = ((a6 - 1) & 0xF) + 1;
      unint64_t v151 = a7;
      uint64_t v143 = v21 + 1;
      unint64_t v144 = (unint64_t)a7 >> 4;
      unsigned int v152 = a7;
      do
      {
        unsigned int v28 = (16 * v20) | 0xF;
        if (16 * (int)v20 <= v158) {
          unsigned int v29 = v158;
        }
        else {
          unsigned int v29 = 16 * v20;
        }
        if (v147 < v28) {
          unsigned int v28 = v147;
        }
        unsigned int v150 = v29 - 16 * v20;
        int v157 = v28 - v29 + 1;
        int v30 = v145;
        if (v20 != v146) {
          int v30 = 16;
        }
        unsigned int v164 = v30;
        uint64_t v156 = a3 + (v29 - v158) * a11;
        unint64_t v31 = v144;
        do
        {
          unint64_t v32 = 16 * v31;
          unint64_t v33 = v31 + 1;
          unsigned int v34 = 16 * (v31 + 1) - 1;
          if (16 * (int)v31 <= a7) {
            unsigned int v35 = a7;
          }
          else {
            unsigned int v35 = 16 * v31;
          }
          if (v153 < v34) {
            unsigned int v34 = v153;
          }
          int v36 = v34 - v35 + 1;
          if (v31 == v161) {
            unsigned int v37 = v160;
          }
          else {
            unsigned int v37 = 16;
          }
          BOOL v38 = 1;
          if (16 * (int)v20 >= v158 && v32 >= v151)
          {
            int v39 = v160;
            if (v31 != v161) {
              int v39 = 16;
            }
            BOOL v38 = v36 != v39 || v157 != v164;
          }
          unsigned int v41 = *(_DWORD *)(result + 128) >> (*(unsigned char *)(result + 144) + a12);
          if (v41 <= 1) {
            unsigned int v41 = 1;
          }
          unsigned int v42 = v41 + 15;
          if (v42 < 0x20) {
            unsigned int v43 = 0;
          }
          else {
            unsigned int v43 = 32 - __clz(~(-1 << -(char)__clz((v42 >> 4) - 1)));
          }
          unsigned int v44 = *(_DWORD *)(result + 132) >> (*(unsigned char *)(result + 144) + a12);
          if (v44 <= 1) {
            unsigned int v44 = 1;
          }
          unsigned int v45 = v44 + 15;
          if (v45 < 0x20)
          {
            unsigned int v46 = 0;
            if (!v43)
            {
LABEL_64:
              uint64_t v48 = 0;
              goto LABEL_65;
            }
          }
          else
          {
            unsigned int v46 = 32 - __clz(~(-1 << -(char)__clz((v45 >> 4) - 1)));
            if (!(v46 | v43)) {
              goto LABEL_64;
            }
          }
          int v47 = 0;
          uint64_t v48 = 0;
          BOOL v49 = v43 != 0;
          BOOL v50 = v46 != 0;
          int v51 = 1;
          do
          {
            --v43;
            if (v49) {
              v48 |= (unint64_t)(v51 & v31) << v47++;
            }
            else {
              unsigned int v43 = 0;
            }
            --v46;
            if (v50) {
              v48 |= (unint64_t)(v51 & v20) << v47++;
            }
            else {
              unsigned int v46 = 0;
            }
            v51 *= 2;
            --v47;
            BOOL v50 = v46 != 0;
            BOOL v49 = v43 != 0;
          }
          while (v46 | v43);
LABEL_65:
          size_t v52 = v20 * v148 + (v31 << 9);
          unsigned int v53 = v35 - a7;
          int v54 = v37 < 0x10 || v38;
          BOOL v55 = (char *)(a4 + 8 * v48);
          unint64_t v56 = v156 + 2 * v53;
          size_t v57 = (int8x16_t *)(a2 + v52);
          if (v164 < 0x10) {
            int v58 = 1;
          }
          else {
            int v58 = v54;
          }
          uint64_t v162 = v57;
          if (v163)
          {
            int v59 = (int8x16_t *)__dst;
            if (!v58) {
              goto LABEL_77;
            }
            memcpy(__dst, v57, sizeof(__dst));
            uint64_t result = v159;
          }
          else
          {
            int v59 = v57;
            if (!v58)
            {
LABEL_77:
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::compressMacroblock(v56, a11, v59, v55, v37, v164);
              a7 = v152;
              goto LABEL_172;
            }
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE4ELj1ELh0ELNS7_13SubblockOrderE1EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder3EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = result;
          uint64_t v166 = v59;
          unsigned __int8 v174 = v37;
          unsigned __int8 v175 = v164;
          unsigned int v170 = v150;
          unsigned int v171 = v35 - v32;
          unsigned __int8 v167 = v55;
          unint64_t v168 = v56;
          uint64_t v169 = a11;
          unsigned int v172 = v157;
          unsigned int v173 = v36;
          if (v38)
          {
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(result + 8) + 7384), block);
            a7 = v152;
            goto LABEL_172;
          }
          unsigned int v60 = *v55;
          if (v60 == 63)
          {
            int32x4_t v62 = (int32x4_t)v59[1];
            int32x4_t v19 = (int32x4_t)v59[2];
            int32x4_t v63 = (int32x4_t)v59[3];
            int32x4_t v64 = vuzp2q_s32(*(int32x4_t *)v59, v19);
            int32x4_t v177 = vuzp1q_s32(*(int32x4_t *)v59, v19);
            int32x4_t v179 = v64;
            int16x8_t v17 = (int16x8_t)vuzp1q_s32(v62, v63);
            int32x4_t v18 = vuzp2q_s32(v62, v63);
            int16x8_t v181 = v17;
            int32x4_t v183 = v18;
            uint64_t v61 = 64;
          }
          else if (v60 == 1)
          {
            int16x8_t v17 = vld1q_dup_s16(v59->i16);
            int32x4_t v177 = (int32x4_t)v17;
            int32x4_t v179 = (int32x4_t)v17;
            int16x8_t v181 = v17;
            int32x4_t v183 = (int32x4_t)v17;
            uint64_t v61 = 2;
          }
          else if (*v55)
          {
            uint64_t v61 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v177, 32, (uint64_t)v59, v60, *(int8x8_t *)v17.i8, *(double *)v18.i64, *(int8x8_t *)v19.i8);
          }
          else
          {
            uint64_t v61 = 0;
            int32x4_t v177 = 0uLL;
            int32x4_t v179 = 0uLL;
            int16x8_t v181 = 0uLL;
            int32x4_t v183 = 0uLL;
          }
          uint64_t v65 = (uint64_t)v59->i64 + v61;
          unsigned int v66 = v55[1];
          if (v66 == 63)
          {
            int32x4_t v68 = *(int32x4_t *)(v65 + 16);
            int32x4_t v19 = *(int32x4_t *)(v65 + 32);
            int32x4_t v69 = *(int32x4_t *)(v65 + 48);
            int32x4_t v70 = vuzp2q_s32(*(int32x4_t *)v65, v19);
            int32x4_t v178 = vuzp1q_s32(*(int32x4_t *)v65, v19);
            int32x4_t v180 = v70;
            int16x8_t v17 = (int16x8_t)vuzp1q_s32(v68, v69);
            int32x4_t v18 = vuzp2q_s32(v68, v69);
            int16x8_t v182 = v17;
            int32x4_t v184 = v18;
            uint64_t v67 = 64;
          }
          else if (v66 == 1)
          {
            int16x8_t v17 = vld1q_dup_s16((const __int16 *)v65);
            int32x4_t v178 = (int32x4_t)v17;
            int32x4_t v180 = (int32x4_t)v17;
            int16x8_t v182 = v17;
            int32x4_t v184 = (int32x4_t)v17;
            uint64_t v67 = 2;
          }
          else if (v55[1])
          {
            uint64_t v67 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v178, 32, v65, v66, *(int8x8_t *)v17.i8, *(double *)v18.i64, *(int8x8_t *)v19.i8);
          }
          else
          {
            uint64_t v67 = 0;
            int32x4_t v178 = 0uLL;
            int32x4_t v180 = 0uLL;
            int16x8_t v182 = 0uLL;
            int32x4_t v184 = 0uLL;
          }
          uint64_t v71 = v65 + v67;
          unsigned int v72 = v55[2];
          if (v72 == 63)
          {
            int32x4_t v74 = *(int32x4_t *)(v71 + 16);
            int32x4_t v19 = *(int32x4_t *)(v71 + 32);
            int32x4_t v75 = *(int32x4_t *)(v71 + 48);
            int32x4_t v76 = vuzp2q_s32(*(int32x4_t *)v71, v19);
            int32x4_t v185 = vuzp1q_s32(*(int32x4_t *)v71, v19);
            int32x4_t v187 = v76;
            int16x8_t v17 = (int16x8_t)vuzp1q_s32(v74, v75);
            int32x4_t v18 = vuzp2q_s32(v74, v75);
            int16x8_t v189 = v17;
            int32x4_t v191 = v18;
            uint64_t v73 = 64;
          }
          else if (v72 == 1)
          {
            int16x8_t v17 = vld1q_dup_s16((const __int16 *)v71);
            int32x4_t v185 = (int32x4_t)v17;
            int32x4_t v187 = (int32x4_t)v17;
            int16x8_t v189 = v17;
            int32x4_t v191 = (int32x4_t)v17;
            uint64_t v73 = 2;
          }
          else if (v55[2])
          {
            uint64_t v73 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v185, 32, v71, v72, *(int8x8_t *)v17.i8, *(double *)v18.i64, *(int8x8_t *)v19.i8);
          }
          else
          {
            uint64_t v73 = 0;
            int32x4_t v185 = 0uLL;
            int32x4_t v187 = 0uLL;
            int16x8_t v189 = 0uLL;
            int32x4_t v191 = 0uLL;
          }
          uint64_t v77 = v71 + v73;
          unsigned int v78 = v55[3];
          if (v78 == 63)
          {
            int32x4_t v80 = *(int32x4_t *)(v77 + 16);
            int32x4_t v19 = *(int32x4_t *)(v77 + 32);
            int32x4_t v81 = *(int32x4_t *)(v77 + 48);
            int32x4_t v82 = vuzp2q_s32(*(int32x4_t *)v77, v19);
            int32x4_t v186 = vuzp1q_s32(*(int32x4_t *)v77, v19);
            int32x4_t v188 = v82;
            int16x8_t v17 = (int16x8_t)vuzp1q_s32(v80, v81);
            int32x4_t v18 = vuzp2q_s32(v80, v81);
            int16x8_t v190 = v17;
            int32x4_t v192 = v18;
            uint64_t v79 = 64;
          }
          else if (v78 == 1)
          {
            int16x8_t v17 = vld1q_dup_s16((const __int16 *)v77);
            int32x4_t v186 = (int32x4_t)v17;
            int32x4_t v188 = (int32x4_t)v17;
            int16x8_t v190 = v17;
            int32x4_t v192 = (int32x4_t)v17;
            uint64_t v79 = 2;
          }
          else if (v55[3])
          {
            uint64_t v79 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v186, 32, v77, v78, *(int8x8_t *)v17.i8, *(double *)v18.i64, *(int8x8_t *)v19.i8);
          }
          else
          {
            uint64_t v79 = 0;
            int32x4_t v186 = 0uLL;
            int32x4_t v188 = 0uLL;
            int16x8_t v190 = 0uLL;
            int32x4_t v192 = 0uLL;
          }
          uint64_t v83 = v77 + v79;
          unsigned int v84 = v55[4];
          if (v84 == 63)
          {
            int32x4_t v86 = *(int32x4_t *)(v83 + 16);
            int32x4_t v19 = *(int32x4_t *)(v83 + 32);
            int32x4_t v87 = *(int32x4_t *)(v83 + 48);
            int32x4_t v88 = vuzp2q_s32(*(int32x4_t *)v83, v19);
            int32x4_t v193 = vuzp1q_s32(*(int32x4_t *)v83, v19);
            int32x4_t v195 = v88;
            int16x8_t v17 = (int16x8_t)vuzp1q_s32(v86, v87);
            int32x4_t v18 = vuzp2q_s32(v86, v87);
            int16x8_t v197 = v17;
            int32x4_t v199 = v18;
            uint64_t v85 = 64;
          }
          else if (v84 == 1)
          {
            int16x8_t v17 = vld1q_dup_s16((const __int16 *)v83);
            int32x4_t v193 = (int32x4_t)v17;
            int32x4_t v195 = (int32x4_t)v17;
            int16x8_t v197 = v17;
            int32x4_t v199 = (int32x4_t)v17;
            uint64_t v85 = 2;
          }
          else if (v55[4])
          {
            uint64_t v85 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v193, 32, v83, v84, *(int8x8_t *)v17.i8, *(double *)v18.i64, *(int8x8_t *)v19.i8);
          }
          else
          {
            uint64_t v85 = 0;
            int32x4_t v193 = 0uLL;
            int32x4_t v195 = 0uLL;
            int16x8_t v197 = 0uLL;
            int32x4_t v199 = 0uLL;
          }
          uint64_t v89 = v83 + v85;
          unsigned int v90 = v55[5];
          if (v90 == 63)
          {
            int32x4_t v92 = *(int32x4_t *)(v89 + 16);
            int32x4_t v19 = *(int32x4_t *)(v89 + 32);
            int32x4_t v93 = *(int32x4_t *)(v89 + 48);
            int32x4_t v94 = vuzp2q_s32(*(int32x4_t *)v89, v19);
            int32x4_t v194 = vuzp1q_s32(*(int32x4_t *)v89, v19);
            int32x4_t v196 = v94;
            int16x8_t v17 = (int16x8_t)vuzp1q_s32(v92, v93);
            int32x4_t v18 = vuzp2q_s32(v92, v93);
            int16x8_t v198 = v17;
            int32x4_t v200 = v18;
            uint64_t v91 = 64;
          }
          else if (v90 == 1)
          {
            int16x8_t v17 = vld1q_dup_s16((const __int16 *)v89);
            int32x4_t v194 = (int32x4_t)v17;
            int32x4_t v196 = (int32x4_t)v17;
            int16x8_t v198 = v17;
            int32x4_t v200 = (int32x4_t)v17;
            uint64_t v91 = 2;
          }
          else if (v55[5])
          {
            uint64_t v91 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v194, 32, v89, v90, *(int8x8_t *)v17.i8, *(double *)v18.i64, *(int8x8_t *)v19.i8);
          }
          else
          {
            uint64_t v91 = 0;
            int32x4_t v194 = 0uLL;
            int32x4_t v196 = 0uLL;
            int16x8_t v198 = 0uLL;
            int32x4_t v200 = 0uLL;
          }
          uint64_t v95 = v89 + v91;
          unsigned int v96 = v55[6];
          if (v96 == 63)
          {
            int32x4_t v98 = *(int32x4_t *)(v95 + 16);
            int32x4_t v19 = *(int32x4_t *)(v95 + 32);
            int32x4_t v99 = *(int32x4_t *)(v95 + 48);
            int32x4_t v100 = vuzp2q_s32(*(int32x4_t *)v95, v19);
            int32x4_t v201 = vuzp1q_s32(*(int32x4_t *)v95, v19);
            int32x4_t v203 = v100;
            int16x8_t v17 = (int16x8_t)vuzp1q_s32(v98, v99);
            int32x4_t v18 = vuzp2q_s32(v98, v99);
            int16x8_t v205 = v17;
            int32x4_t v207 = v18;
            uint64_t v97 = 64;
          }
          else if (v96 == 1)
          {
            int16x8_t v17 = vld1q_dup_s16((const __int16 *)v95);
            int32x4_t v201 = (int32x4_t)v17;
            int32x4_t v203 = (int32x4_t)v17;
            int16x8_t v205 = v17;
            int32x4_t v207 = (int32x4_t)v17;
            uint64_t v97 = 2;
          }
          else if (v55[6])
          {
            uint64_t v97 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v201, 32, v95, v96, *(int8x8_t *)v17.i8, *(double *)v18.i64, *(int8x8_t *)v19.i8);
          }
          else
          {
            uint64_t v97 = 0;
            int32x4_t v201 = 0uLL;
            int32x4_t v203 = 0uLL;
            int16x8_t v205 = 0uLL;
            int32x4_t v207 = 0uLL;
          }
          uint64_t v101 = v95 + v97;
          unsigned int v102 = v55[7];
          if (v102 == 63)
          {
            int32x4_t v105 = *(int32x4_t *)(v101 + 16);
            int32x4_t v106 = *(int32x4_t *)(v101 + 32);
            int32x4_t v107 = *(int32x4_t *)(v101 + 48);
            int32x4_t v108 = vuzp2q_s32(*(int32x4_t *)v101, v106);
            int32x4_t v202 = vuzp1q_s32(*(int32x4_t *)v101, v106);
            int32x4_t v204 = v108;
            int32x4_t v206 = vuzp1q_s32(v105, v107);
            int32x4_t v208 = vuzp2q_s32(v105, v107);
            a7 = v152;
            uint64_t v103 = v172;
            if (!v172) {
              goto LABEL_171;
            }
          }
          else
          {
            a7 = v152;
            if (v102 == 1)
            {
              int16x8_t v104 = vld1q_dup_s16((const __int16 *)v101);
              int32x4_t v202 = (int32x4_t)v104;
              int32x4_t v204 = (int32x4_t)v104;
              int32x4_t v206 = (int32x4_t)v104;
              int32x4_t v208 = (int32x4_t)v104;
              uint64_t v103 = v172;
              if (!v172) {
                goto LABEL_171;
              }
            }
            else if (v102)
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v202, 32, v101, v102, *(int8x8_t *)v17.i8, *(double *)v18.i64, *(int8x8_t *)v19.i8);
              uint64_t v103 = v172;
              if (!v172) {
                goto LABEL_171;
              }
            }
            else
            {
              int32x4_t v202 = 0uLL;
              int32x4_t v204 = 0uLL;
              int32x4_t v206 = 0uLL;
              int32x4_t v208 = 0uLL;
              uint64_t v103 = v172;
              if (!v172) {
                goto LABEL_171;
              }
            }
          }
          if (v173)
          {
            uint64_t v109 = 32 * v170;
            uint64_t v110 = 2 * v171;
            int16x4_t v111 = &v177.i8[v109 + v110];
            unint64_t v112 = v168;
            uint64_t v113 = v169;
            unint64_t v114 = 2 * v173;
            if (v114 <= 1) {
              unint64_t v115 = 1;
            }
            else {
              unint64_t v115 = 2 * v173;
            }
            if (v115 > 7)
            {
              if (!v115 || (unint64_t v118 = (v115 - 1) >> 32) != 0)
              {
                uint64_t v141 = 0;
                do
                {
                  uint64_t v142 = 0;
                  do
                  {
                    v111[v142] = *(unsigned char *)(v112 + v142);
                    ++v142;
                  }
                  while (v114 > v142);
                  ++v141;
                  v111 += 32;
                  v112 += v113;
                }
                while (v141 != v103);
                goto LABEL_171;
              }
              long long v119 = &v177.i8[v109 + v110];
              uint64_t v120 = v115 & 0x1FFFFFFE0;
              uint64_t v121 = v115 & 0x1FFFFFFF8;
              long long v122 = &v178.i8[v109 + v110];
              long long v123 = (long long *)(v168 + 16);
              uint64_t v124 = v111;
              unint64_t v125 = v168;
              while (2)
              {
                uint64_t v126 = (char *)(v112 + v113 * v118);
                unsigned int v127 = &v111[32 * v118];
                if ((unint64_t)(&v119[32 * v118] - v126) >= 0x20)
                {
                  if (v115 >= 0x20)
                  {
                    uint64_t v130 = v123;
                    int16x4_t v131 = v122;
                    uint64_t v132 = v115 & 0x1FFFFFFE0;
                    do
                    {
                      long long v133 = *v130;
                      *((_OWORD *)v131 - 1) = *(v130 - 1);
                      *(_OWORD *)int16x4_t v131 = v133;
                      v131 += 32;
                      v130 += 2;
                      v132 -= 32;
                    }
                    while (v132);
                    if (v115 == v120) {
                      goto LABEL_150;
                    }
                    uint64_t v129 = v115 & 0x1FFFFFFE0;
                    if ((v115 & 0x18) == 0)
                    {
                      v126 += v120;
                      v127 += v120;
                      int v128 = v115 & 0xFFFFFFE0;
                      goto LABEL_164;
                    }
                  }
                  else
                  {
                    uint64_t v129 = 0;
                  }
                  v127 += v121;
                  unint64_t v134 = v129 - (v115 & 0x1FFFFFFF8);
                  uint64_t v135 = (uint64_t *)(v125 + v129);
                  int v136 = &v124[v129];
                  do
                  {
                    uint64_t v137 = *v135++;
                    *(void *)int v136 = v137;
                    v136 += 8;
                    v134 += 8;
                  }
                  while (v134);
                  if (v115 != v121)
                  {
                    v126 += v121;
                    int v128 = v115 & 0xFFFFFFF8;
                    goto LABEL_164;
                  }
                }
                else
                {
                  int v128 = 0;
LABEL_164:
                  unsigned int v138 = v128 + 1;
                  do
                  {
                    char v139 = *v126++;
                    *v127++ = v139;
                  }
                  while (v114 > v138++);
                }
LABEL_150:
                ++v118;
                v122 += 32;
                long long v123 = (long long *)((char *)v123 + v113);
                v125 += v113;
                v124 += 32;
                if (v118 == v103) {
                  goto LABEL_171;
                }
                continue;
              }
            }
            uint64_t v116 = 0;
            do
            {
              uint64_t v117 = 0;
              do
              {
                v111[v117] = *(unsigned char *)(v112 + v117);
                ++v117;
              }
              while (v114 > v117);
              ++v116;
              v111 += 32;
              v112 += v113;
            }
            while (v116 != v103);
          }
LABEL_171:
          AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)&v177, 32, v166, v167, v174, v175);
LABEL_172:
          if (v163) {
            memcpy(v162, v59, 0x200uLL);
          }
          unint64_t v31 = v33;
          uint64_t result = v159;
        }
        while (v33 != (v153 >> 4) + 1);
        ++v20;
      }
      while (v20 != v143);
    }
  }
  return result;
}

uint64_t AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)3>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, char a12)
{
  uint64_t v240 = *MEMORY[0x263EF8340];
  size_t v177 = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v189 = a8;
  uint64_t v19 = a8 >> 4;
  unsigned int v176 = a8 + a10 - 1;
  unsigned int v20 = v176 >> 4;
  uint64_t v190 = a1;
  if (*(void *)(a1 + 168)) {
    int v21 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v21 = 0;
  }
  BOOL v22 = (v21 & 0xD00) == 0 || v21 == 768;
  int v23 = v21 & 0xE00;
  int v25 = !v22 && v23 != 1024;
  int v194 = v25;
  uint64_t result = a1;
  if (v19 <= v20)
  {
    unsigned int v182 = a7 + a9 - 1;
    if (a7 >> 4 <= v182 >> 4)
    {
      uint64_t v27 = a11;
      uint64_t v192 = (a5 - 1) >> 4;
      uint64_t v175 = (a6 - 1) >> 4;
      int v191 = ((a5 - 1) & 0xF) + 1;
      int v174 = ((a6 - 1) & 0xF) + 1;
      uint64_t v173 = v20 + 1;
      uint64_t v28 = 2 * a11;
      unsigned int v29 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)1,1u>::kSubblockPositions;
      do
      {
        unsigned int v30 = (16 * v19) | 0xF;
        if (16 * (int)v19 <= v189) {
          unsigned int v31 = v189;
        }
        else {
          unsigned int v31 = 16 * v19;
        }
        if (v176 < v30) {
          unsigned int v30 = v176;
        }
        unsigned int v188 = 16 * v19;
        unsigned int v180 = v31 - 16 * v19;
        int v187 = v30 - v31 + 1;
        if (v19 == v175) {
          unsigned int v32 = v174;
        }
        else {
          unsigned int v32 = 16;
        }
        uint64_t v185 = a3 + (v31 - v189) * v27;
        size_t v186 = v19 * v177;
        unint64_t v33 = (unint64_t)a7 >> 4;
        unsigned int v179 = v32;
        do
        {
          unint64_t v34 = 16 * v33;
          unint64_t v193 = v33 + 1;
          unsigned int v35 = 16 * (v33 + 1) - 1;
          if (16 * (int)v33 <= a7) {
            unsigned int v36 = a7;
          }
          else {
            unsigned int v36 = 16 * v33;
          }
          if (v182 < v35) {
            unsigned int v35 = a7 + a9 - 1;
          }
          int v37 = v35 - v36 + 1;
          if (v33 == v192) {
            unsigned int v38 = v191;
          }
          else {
            unsigned int v38 = 16;
          }
          BOOL v39 = 1;
          if (v188 >= v189 && v34 >= a7)
          {
            int v40 = v191;
            if (v33 != v192) {
              int v40 = 16;
            }
            BOOL v39 = v37 != v40 || v187 != v32;
          }
          unsigned int v42 = *(_DWORD *)(result + 128) >> (*(unsigned char *)(result + 144) + a12);
          if (v42 <= 1) {
            unsigned int v42 = 1;
          }
          unsigned int v43 = v42 + 15;
          if (v43 < 0x20) {
            unsigned int v44 = 0;
          }
          else {
            unsigned int v44 = 32 - __clz(~(-1 << -(char)__clz((v43 >> 4) - 1)));
          }
          unsigned int v45 = *(_DWORD *)(result + 132) >> (*(unsigned char *)(result + 144) + a12);
          if (v45 <= 1) {
            unsigned int v45 = 1;
          }
          unsigned int v46 = v45 + 15;
          if (v46 < 0x20)
          {
            unsigned int v47 = 0;
            if (!v44)
            {
LABEL_66:
              uint64_t v49 = 0;
              goto LABEL_67;
            }
          }
          else
          {
            unsigned int v47 = 32 - __clz(~(-1 << -(char)__clz((v46 >> 4) - 1)));
            if (!(v47 | v44)) {
              goto LABEL_66;
            }
          }
          int v48 = 0;
          uint64_t v49 = 0;
          BOOL v50 = v44 != 0;
          BOOL v51 = v47 != 0;
          int v52 = 1;
          do
          {
            --v44;
            if (v50) {
              v49 |= (unint64_t)(v52 & v33) << v48++;
            }
            else {
              unsigned int v44 = 0;
            }
            --v47;
            if (v51) {
              v49 |= (unint64_t)(v52 & v19) << v48++;
            }
            else {
              unsigned int v47 = 0;
            }
            v52 *= 2;
            --v48;
            BOOL v51 = v47 != 0;
            BOOL v50 = v44 != 0;
          }
          while (v47 | v44);
LABEL_67:
          size_t v53 = v186 + (v33 << 9);
          int v54 = v38 < 0x10 || v39;
          BOOL v55 = (char *)(a4 + 8 * v49);
          unint64_t v56 = (int32x4_t *)(a2 + v53);
          if (v32 < 0x10) {
            int v57 = 1;
          }
          else {
            int v57 = v54;
          }
          if (v194)
          {
            if (!v57)
            {
              int32x4_t v63 = (int32x4_t *)__dst;
LABEL_82:
              uint64_t v65 = 0;
              unsigned int v66 = (float *)v63;
              do
              {
                uint64_t v73 = v29[v65 + 1];
                uint64_t v74 = v29[v65];
                unsigned int v75 = (v38 - 8 * v74) & ~((int)(v38 - 8 * v74) >> 31);
                if (v75 >= 8) {
                  unsigned int v75 = 8;
                }
                unsigned int v76 = (v32 - 4 * v73) & ~((int)(v32 - 4 * v73) >> 31);
                if (v76 >= 4) {
                  unsigned int v76 = 4;
                }
                if (v75) {
                  BOOL v77 = v76 == 0;
                }
                else {
                  BOOL v77 = 1;
                }
                if (v77)
                {
                  char v72 = 0;
                }
                else
                {
                  uint64_t v67 = (float32x2x2_t *)(v185 + 2 * (v36 - a7) + 4 * a11 * v73 + 16 * v74);
                  float32x2x2_t v16 = *v67;
                  int32x4_t v17 = *(int32x4_t *)((char *)v67 + v27);
                  int32x4_t v68 = (int32x4_t *)((char *)v67 + v28);
                  float32x2x2_t v18 = (float32x2x2_t)*v68;
                  int32x4_t v69 = *(int32x4_t *)((char *)v68 + v27);
                  int32x4_t v70 = vzip2q_s32(*v68, v69);
                  uint64_t v71 = v66;
                  vst2_f32(v71, v16);
                  v71 += 4;
                  vst2_f32(v71, v18);
                  *((int32x4_t *)v66 + 2) = vzip2q_s32((int32x4_t)v16, v17);
                  *((int32x4_t *)v66 + 3) = v70;
                  v66 += 16;
                  char v72 = 63;
                }
                *v55++ = v72;
                v65 += 2;
              }
              while (v65 != 16);
LABEL_79:
              unint64_t v64 = v193;
              if (v194) {
                goto LABEL_27;
              }
              goto LABEL_28;
            }
            int v58 = v29;
            int v59 = v56;
            uint64_t v60 = v19;
            int v61 = v37;
            BOOL v62 = v39;
            memcpy(__dst, v56, sizeof(__dst));
            BOOL v39 = v62;
            int v37 = v61;
            uint64_t v19 = v60;
            unsigned int v32 = v179;
            int32x4_t v63 = (int32x4_t *)__dst;
            unint64_t v56 = v59;
            unsigned int v29 = v58;
            uint64_t v27 = a11;
            uint64_t result = v190;
          }
          else
          {
            int32x4_t v63 = v56;
            if (!v57) {
              goto LABEL_82;
            }
          }
          int16x8_t v181 = v56;
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE4ELj1ELh1ELNS7_13SubblockOrderE1EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder3EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = result;
          int16x8_t v197 = v63;
          unsigned __int8 v205 = v38;
          unsigned __int8 v206 = v32;
          unsigned int v201 = v180;
          unsigned int v202 = v36 - v34;
          int16x8_t v198 = v55;
          int32x4_t v199 = (int32x4_t *)(v185 + 2 * (v36 - a7));
          uint64_t v200 = v27;
          unsigned int v203 = v187;
          unsigned int v204 = v37;
          if (v39)
          {
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(result + 8) + 7384), block);
            uint64_t result = v190;
            unint64_t v56 = v181;
            uint64_t v28 = 2 * a11;
            goto LABEL_79;
          }
          unsigned int v78 = *v55;
          if (v78 == 63)
          {
            int32x4_t v80 = v63[1];
            float32x2x2_t v18 = (float32x2x2_t)v63[2];
            int32x4_t v81 = v63[3];
            int32x4_t v82 = vuzp2q_s32(*v63, (int32x4_t)v18);
            float32x2x2_t v208 = (float32x2x2_t)vuzp1q_s32(*v63, (int32x4_t)v18);
            int32x4_t v210 = v82;
            float32x2x2_t v16 = (float32x2x2_t)vuzp1q_s32(v80, v81);
            int32x4_t v17 = vuzp2q_s32(v80, v81);
            float32x2x2_t v212 = v16;
            int32x4_t v214 = v17;
            uint64_t v79 = 64;
          }
          else if (v78 == 1)
          {
            float32x2x2_t v16 = (float32x2x2_t)vld1q_dup_s16(v63->i16);
            float32x2x2_t v208 = v16;
            int32x4_t v210 = (int32x4_t)v16;
            float32x2x2_t v212 = v16;
            int32x4_t v214 = (int32x4_t)v16;
            uint64_t v79 = 2;
          }
          else if (*v55)
          {
            uint64_t v79 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((int32x4_t *)&v208, 32, (uint64_t)v63, v78, (int8x8_t)v16.val[0], *(double *)v17.i64, (int8x8_t)v18.val[0]);
          }
          else
          {
            uint64_t v79 = 0;
            float32x2x2_t v208 = (float32x2x2_t)0;
            int32x4_t v210 = 0uLL;
            float32x2x2_t v212 = (float32x2x2_t)0;
            int32x4_t v214 = 0uLL;
          }
          uint64_t v83 = (uint64_t)v63->i64 + v79;
          unsigned int v84 = v55[1];
          if (v84 == 63)
          {
            int32x4_t v86 = *(int32x4_t *)(v83 + 16);
            float32x2x2_t v18 = *(float32x2x2_t *)(v83 + 32);
            int32x4_t v87 = *(int32x4_t *)(v83 + 48);
            int32x4_t v88 = vuzp2q_s32(*(int32x4_t *)v83, (int32x4_t)v18);
            float32x2x2_t v209 = (float32x2x2_t)vuzp1q_s32(*(int32x4_t *)v83, (int32x4_t)v18);
            int32x4_t v211 = v88;
            float32x2x2_t v16 = (float32x2x2_t)vuzp1q_s32(v86, v87);
            int32x4_t v17 = vuzp2q_s32(v86, v87);
            float32x2x2_t v213 = v16;
            int32x4_t v215 = v17;
            uint64_t v85 = 64;
          }
          else if (v84 == 1)
          {
            float32x2x2_t v16 = (float32x2x2_t)vld1q_dup_s16((const __int16 *)v83);
            float32x2x2_t v209 = v16;
            int32x4_t v211 = (int32x4_t)v16;
            float32x2x2_t v213 = v16;
            int32x4_t v215 = (int32x4_t)v16;
            uint64_t v85 = 2;
          }
          else if (v55[1])
          {
            uint64_t v85 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((int32x4_t *)&v209, 32, v83, v84, (int8x8_t)v16.val[0], *(double *)v17.i64, (int8x8_t)v18.val[0]);
          }
          else
          {
            uint64_t v85 = 0;
            float32x2x2_t v209 = (float32x2x2_t)0;
            int32x4_t v211 = 0uLL;
            float32x2x2_t v213 = (float32x2x2_t)0;
            int32x4_t v215 = 0uLL;
          }
          uint64_t v89 = v83 + v85;
          unsigned int v90 = v55[2];
          if (v90 == 63)
          {
            int32x4_t v92 = *(int32x4_t *)(v89 + 16);
            float32x2x2_t v18 = *(float32x2x2_t *)(v89 + 32);
            int32x4_t v93 = *(int32x4_t *)(v89 + 48);
            int32x4_t v94 = vuzp2q_s32(*(int32x4_t *)v89, (int32x4_t)v18);
            float32x2x2_t v216 = (float32x2x2_t)vuzp1q_s32(*(int32x4_t *)v89, (int32x4_t)v18);
            int32x4_t v218 = v94;
            float32x2x2_t v16 = (float32x2x2_t)vuzp1q_s32(v92, v93);
            int32x4_t v17 = vuzp2q_s32(v92, v93);
            float32x2x2_t v220 = v16;
            int32x4_t v222 = v17;
            uint64_t v91 = 64;
          }
          else if (v90 == 1)
          {
            float32x2x2_t v16 = (float32x2x2_t)vld1q_dup_s16((const __int16 *)v89);
            float32x2x2_t v216 = v16;
            int32x4_t v218 = (int32x4_t)v16;
            float32x2x2_t v220 = v16;
            int32x4_t v222 = (int32x4_t)v16;
            uint64_t v91 = 2;
          }
          else if (v55[2])
          {
            uint64_t v91 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((int32x4_t *)&v216, 32, v89, v90, (int8x8_t)v16.val[0], *(double *)v17.i64, (int8x8_t)v18.val[0]);
          }
          else
          {
            uint64_t v91 = 0;
            float32x2x2_t v216 = (float32x2x2_t)0;
            int32x4_t v218 = 0uLL;
            float32x2x2_t v220 = (float32x2x2_t)0;
            int32x4_t v222 = 0uLL;
          }
          uint64_t v95 = v89 + v91;
          unsigned int v96 = v55[3];
          if (v96 == 63)
          {
            int32x4_t v98 = *(int32x4_t *)(v95 + 16);
            float32x2x2_t v18 = *(float32x2x2_t *)(v95 + 32);
            int32x4_t v99 = *(int32x4_t *)(v95 + 48);
            int32x4_t v100 = vuzp2q_s32(*(int32x4_t *)v95, (int32x4_t)v18);
            float32x2x2_t v217 = (float32x2x2_t)vuzp1q_s32(*(int32x4_t *)v95, (int32x4_t)v18);
            int32x4_t v219 = v100;
            float32x2x2_t v16 = (float32x2x2_t)vuzp1q_s32(v98, v99);
            int32x4_t v17 = vuzp2q_s32(v98, v99);
            float32x2x2_t v221 = v16;
            int32x4_t v223 = v17;
            uint64_t v97 = 64;
          }
          else if (v96 == 1)
          {
            float32x2x2_t v16 = (float32x2x2_t)vld1q_dup_s16((const __int16 *)v95);
            float32x2x2_t v217 = v16;
            int32x4_t v219 = (int32x4_t)v16;
            float32x2x2_t v221 = v16;
            int32x4_t v223 = (int32x4_t)v16;
            uint64_t v97 = 2;
          }
          else if (v55[3])
          {
            uint64_t v97 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((int32x4_t *)&v217, 32, v95, v96, (int8x8_t)v16.val[0], *(double *)v17.i64, (int8x8_t)v18.val[0]);
          }
          else
          {
            uint64_t v97 = 0;
            float32x2x2_t v217 = (float32x2x2_t)0;
            int32x4_t v219 = 0uLL;
            float32x2x2_t v221 = (float32x2x2_t)0;
            int32x4_t v223 = 0uLL;
          }
          uint64_t v101 = v95 + v97;
          unsigned int v102 = v55[4];
          if (v102 == 63)
          {
            int32x4_t v104 = *(int32x4_t *)(v101 + 16);
            float32x2x2_t v18 = *(float32x2x2_t *)(v101 + 32);
            int32x4_t v105 = *(int32x4_t *)(v101 + 48);
            int32x4_t v106 = vuzp2q_s32(*(int32x4_t *)v101, (int32x4_t)v18);
            float32x2x2_t v224 = (float32x2x2_t)vuzp1q_s32(*(int32x4_t *)v101, (int32x4_t)v18);
            int32x4_t v226 = v106;
            float32x2x2_t v16 = (float32x2x2_t)vuzp1q_s32(v104, v105);
            int32x4_t v17 = vuzp2q_s32(v104, v105);
            float32x2x2_t v228 = v16;
            int32x4_t v230 = v17;
            uint64_t v103 = 64;
          }
          else if (v102 == 1)
          {
            float32x2x2_t v16 = (float32x2x2_t)vld1q_dup_s16((const __int16 *)v101);
            float32x2x2_t v224 = v16;
            int32x4_t v226 = (int32x4_t)v16;
            float32x2x2_t v228 = v16;
            int32x4_t v230 = (int32x4_t)v16;
            uint64_t v103 = 2;
          }
          else if (v55[4])
          {
            uint64_t v103 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((int32x4_t *)&v224, 32, v101, v102, (int8x8_t)v16.val[0], *(double *)v17.i64, (int8x8_t)v18.val[0]);
          }
          else
          {
            uint64_t v103 = 0;
            float32x2x2_t v224 = (float32x2x2_t)0;
            int32x4_t v226 = 0uLL;
            float32x2x2_t v228 = (float32x2x2_t)0;
            int32x4_t v230 = 0uLL;
          }
          uint64_t v107 = v101 + v103;
          unsigned int v108 = v55[5];
          if (v108 == 63)
          {
            int32x4_t v110 = *(int32x4_t *)(v107 + 16);
            float32x2x2_t v18 = *(float32x2x2_t *)(v107 + 32);
            int32x4_t v111 = *(int32x4_t *)(v107 + 48);
            int32x4_t v112 = vuzp2q_s32(*(int32x4_t *)v107, (int32x4_t)v18);
            float32x2x2_t v225 = (float32x2x2_t)vuzp1q_s32(*(int32x4_t *)v107, (int32x4_t)v18);
            int32x4_t v227 = v112;
            float32x2x2_t v16 = (float32x2x2_t)vuzp1q_s32(v110, v111);
            int32x4_t v17 = vuzp2q_s32(v110, v111);
            float32x2x2_t v229 = v16;
            int32x4_t v231 = v17;
            uint64_t v109 = 64;
          }
          else if (v108 == 1)
          {
            float32x2x2_t v16 = (float32x2x2_t)vld1q_dup_s16((const __int16 *)v107);
            float32x2x2_t v225 = v16;
            int32x4_t v227 = (int32x4_t)v16;
            float32x2x2_t v229 = v16;
            int32x4_t v231 = (int32x4_t)v16;
            uint64_t v109 = 2;
          }
          else if (v55[5])
          {
            uint64_t v109 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((int32x4_t *)&v225, 32, v107, v108, (int8x8_t)v16.val[0], *(double *)v17.i64, (int8x8_t)v18.val[0]);
          }
          else
          {
            uint64_t v109 = 0;
            float32x2x2_t v225 = (float32x2x2_t)0;
            int32x4_t v227 = 0uLL;
            float32x2x2_t v229 = (float32x2x2_t)0;
            int32x4_t v231 = 0uLL;
          }
          uint64_t v113 = v107 + v109;
          unsigned int v114 = v55[6];
          if (v114 == 63)
          {
            int32x4_t v116 = *(int32x4_t *)(v113 + 16);
            float32x2x2_t v18 = *(float32x2x2_t *)(v113 + 32);
            int32x4_t v117 = *(int32x4_t *)(v113 + 48);
            int32x4_t v118 = vuzp2q_s32(*(int32x4_t *)v113, (int32x4_t)v18);
            float32x2x2_t v232 = (float32x2x2_t)vuzp1q_s32(*(int32x4_t *)v113, (int32x4_t)v18);
            int32x4_t v234 = v118;
            float32x2x2_t v16 = (float32x2x2_t)vuzp1q_s32(v116, v117);
            int32x4_t v17 = vuzp2q_s32(v116, v117);
            float32x2x2_t v236 = v16;
            int32x4_t v238 = v17;
            uint64_t v115 = 64;
          }
          else if (v114 == 1)
          {
            float32x2x2_t v16 = (float32x2x2_t)vld1q_dup_s16((const __int16 *)v113);
            float32x2x2_t v232 = v16;
            int32x4_t v234 = (int32x4_t)v16;
            float32x2x2_t v236 = v16;
            int32x4_t v238 = (int32x4_t)v16;
            uint64_t v115 = 2;
          }
          else if (v55[6])
          {
            uint64_t v115 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((int32x4_t *)&v232, 32, v113, v114, (int8x8_t)v16.val[0], *(double *)v17.i64, (int8x8_t)v18.val[0]);
          }
          else
          {
            uint64_t v115 = 0;
            float32x2x2_t v232 = (float32x2x2_t)0;
            int32x4_t v234 = 0uLL;
            float32x2x2_t v236 = (float32x2x2_t)0;
            int32x4_t v238 = 0uLL;
          }
          uint64_t v119 = v113 + v115;
          unsigned int v120 = v55[7];
          if (v120 == 63)
          {
            int32x4_t v122 = *(int32x4_t *)(v119 + 16);
            float32x2x2_t v18 = *(float32x2x2_t *)(v119 + 32);
            int32x4_t v123 = *(int32x4_t *)(v119 + 48);
            int32x4_t v124 = vuzp2q_s32(*(int32x4_t *)v119, (int32x4_t)v18);
            float32x2x2_t v233 = (float32x2x2_t)vuzp1q_s32(*(int32x4_t *)v119, (int32x4_t)v18);
            int32x4_t v235 = v124;
            float32x2x2_t v16 = (float32x2x2_t)vuzp1q_s32(v122, v123);
            int32x4_t v17 = vuzp2q_s32(v122, v123);
            float32x2x2_t v237 = v16;
            int32x4_t v239 = v17;
            unint64_t v64 = v193;
            uint64_t v121 = v203;
            if (!v203) {
              goto LABEL_187;
            }
          }
          else
          {
            unint64_t v64 = v193;
            if (v120 == 1)
            {
              float32x2x2_t v16 = (float32x2x2_t)vld1q_dup_s16((const __int16 *)v119);
              float32x2x2_t v233 = v16;
              int32x4_t v235 = (int32x4_t)v16;
              float32x2x2_t v237 = v16;
              int32x4_t v239 = (int32x4_t)v16;
              uint64_t v121 = v203;
              if (!v203) {
                goto LABEL_187;
              }
            }
            else if (v55[7])
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((int32x4_t *)&v233, 32, v119, v120, (int8x8_t)v16.val[0], *(double *)v17.i64, (int8x8_t)v18.val[0]);
              uint64_t v121 = v203;
              if (!v203) {
                goto LABEL_187;
              }
            }
            else
            {
              float32x2x2_t v233 = (float32x2x2_t)0;
              int32x4_t v235 = 0uLL;
              float32x2x2_t v237 = (float32x2x2_t)0;
              int32x4_t v239 = 0uLL;
              uint64_t v121 = v203;
              if (!v203) {
                goto LABEL_187;
              }
            }
          }
          if (v204)
          {
            uint64_t v125 = 32 * v201;
            uint64_t v126 = 2 * v202;
            unsigned int v127 = (char *)&v208 + v125 + v126;
            int v128 = v199;
            uint64_t v129 = v200;
            unint64_t v130 = 2 * v204;
            if (v130 <= 1) {
              unint64_t v131 = 1;
            }
            else {
              unint64_t v131 = 2 * v204;
            }
            if (v131 > 7)
            {
              if (!v131 || (unint64_t v134 = (v131 - 1) >> 32) != 0)
              {
                uint64_t v156 = 0;
                do
                {
                  uint64_t v157 = 0;
                  do
                  {
                    v127[v157] = v128->i8[v157];
                    ++v157;
                  }
                  while (v130 > v157);
                  ++v156;
                  v127 += 32;
                  int v128 = (int32x4_t *)((char *)v128 + v129);
                }
                while (v156 != v121);
                goto LABEL_187;
              }
              uint64_t v135 = (char *)&v208 + v125 + v126;
              uint64_t v136 = v131 & 0x1FFFFFFE0;
              uint64_t v137 = v131 & 0x1FFFFFFF8;
              unsigned int v138 = (char *)&v209 + v125 + v126;
              char v139 = v199 + 1;
              int16x4_t v140 = v127;
              uint64_t v141 = v199;
              while (2)
              {
                uint64_t v142 = &v128->i8[v129 * v134];
                uint64_t v143 = &v127[32 * v134];
                if ((unint64_t)(&v135[32 * v134] - v142) >= 0x20)
                {
                  if (v131 >= 0x20)
                  {
                    uint64_t v146 = v139;
                    unsigned int v147 = (int32x4_t *)v138;
                    uint64_t v148 = v131 & 0x1FFFFFFE0;
                    do
                    {
                      float32x2x2_t v16 = (float32x2x2_t)v146[-1];
                      int32x4_t v17 = *v146;
                      v147[-1] = (int32x4_t)v16;
                      *unsigned int v147 = v17;
                      v147 += 2;
                      v146 += 2;
                      v148 -= 32;
                    }
                    while (v148);
                    if (v131 == v136) {
                      goto LABEL_166;
                    }
                    uint64_t v145 = v131 & 0x1FFFFFFE0;
                    if ((v131 & 0x18) == 0)
                    {
                      v142 += v136;
                      v143 += v136;
                      int v144 = v131 & 0xFFFFFFE0;
                      goto LABEL_180;
                    }
                  }
                  else
                  {
                    uint64_t v145 = 0;
                  }
                  v143 += v137;
                  unint64_t v149 = v145 - (v131 & 0x1FFFFFFF8);
                  unsigned int v150 = (float32x2_t *)&v141->i8[v145];
                  unint64_t v151 = (float32x2_t *)&v140[v145];
                  do
                  {
                    float32x2_t v152 = *v150++;
                    v16.val[0] = v152;
                    *v151++ = v152;
                    v149 += 8;
                  }
                  while (v149);
                  if (v131 != v137)
                  {
                    v142 += v137;
                    int v144 = v131 & 0xFFFFFFF8;
                    goto LABEL_180;
                  }
                }
                else
                {
                  int v144 = 0;
LABEL_180:
                  unsigned int v153 = v144 + 1;
                  do
                  {
                    char v154 = *v142++;
                    *v143++ = v154;
                  }
                  while (v130 > v153++);
                }
LABEL_166:
                ++v134;
                v138 += 32;
                char v139 = (int32x4_t *)((char *)v139 + v129);
                uint64_t v141 = (int32x4_t *)((char *)v141 + v129);
                v140 += 32;
                if (v134 == v121) {
                  goto LABEL_187;
                }
                continue;
              }
            }
            uint64_t v132 = 0;
            do
            {
              uint64_t v133 = 0;
              do
              {
                v127[v133] = v128->i8[v133];
                ++v133;
              }
              while (v130 > v133);
              ++v132;
              v127 += 32;
              int v128 = (int32x4_t *)((char *)v128 + v129);
            }
            while (v132 != v121);
          }
LABEL_187:
          uint64_t v158 = 0;
          uint64_t v159 = v197;
          int v160 = v198;
          int v161 = v205;
          int v162 = v206;
          uint64_t result = v190;
          uint64_t v28 = 2 * a11;
          do
          {
            uint64_t v168 = v29[v158 + 1];
            uint64_t v169 = v29[v158];
            unsigned int v170 = (v161 - 8 * v169) & ~((v161 - 8 * (int)v169) >> 31);
            if (v170 >= 8) {
              unsigned int v170 = 8;
            }
            unsigned int v171 = (v162 - 4 * v168) & ~((v162 - 4 * (int)v168) >> 31);
            if (v171 >= 4) {
              unsigned int v171 = 4;
            }
            if (v170) {
              BOOL v172 = v171 == 0;
            }
            else {
              BOOL v172 = 1;
            }
            if (v172)
            {
              char v167 = 0;
            }
            else
            {
              int v163 = (int32x4_t *)(&v208 + 8 * v168 + v169);
              float32x2x2_t v16 = (float32x2x2_t)*v163;
              int32x4_t v17 = v163[2];
              float32x2x2_t v18 = (float32x2x2_t)vzip2q_s32(*v163, v17);
              float32x2x2_t v164 = (float32x2x2_t)v163[4];
              int32x4_t v165 = v163[6];
              uint64_t v166 = (float *)v159;
              vst2_f32(v166, v16);
              v166 += 4;
              vst2_f32(v166, v164);
              v159[2] = (int32x4_t)v18;
              v159[3] = vzip2q_s32((int32x4_t)v164, v165);
              v159 += 4;
              char v167 = 63;
            }
            *v160++ = v167;
            v158 += 2;
          }
          while (v158 != 16);
          unint64_t v56 = v181;
          if (v194)
          {
LABEL_27:
            memcpy(v56, v63, 0x200uLL);
            uint64_t v28 = 2 * a11;
            uint64_t result = v190;
          }
LABEL_28:
          unint64_t v33 = v64;
        }
        while (v64 != (v182 >> 4) + 1);
        ++v19;
      }
      while (v19 != v173);
    }
  }
  return result;
}

uint64_t AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>,false,(AGXHardwareTextureMemoryOrder)3>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, char a12)
{
  v165[14] = *MEMORY[0x263EF8340];
  size_t v130 = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v138 = a8;
  uint64_t v19 = a8 >> 4;
  unsigned int v129 = a8 + a10 - 1;
  unsigned int v20 = v129 >> 4;
  uint64_t v142 = a1;
  if (*(void *)(a1 + 168)) {
    int v21 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v21 = 0;
  }
  BOOL v22 = (v21 & 0xD00) == 0 || v21 == 768;
  int v23 = v21 & 0xE00;
  int v25 = !v22 && v23 != 1024;
  int v144 = v25;
  uint64_t result = a1;
  if (v19 <= v20)
  {
    unsigned int v133 = a7 + a9 - 1;
    if (a7 >> 4 <= v133 >> 4)
    {
      uint64_t v141 = (a5 - 1) >> 4;
      uint64_t v128 = (a6 - 1) >> 4;
      int v140 = ((a5 - 1) & 0xF) + 1;
      int v127 = ((a6 - 1) & 0xF) + 1;
      uint64_t v126 = v20 + 1;
      do
      {
        unsigned int v27 = (16 * v19) | 0xF;
        if (16 * (int)v19 <= v138) {
          unsigned int v28 = v138;
        }
        else {
          unsigned int v28 = 16 * v19;
        }
        if (v129 < v27) {
          unsigned int v27 = v129;
        }
        unsigned int v132 = v28 - 16 * v19;
        int v137 = v27 - v28 + 1;
        if (v19 == v128) {
          unsigned int v29 = v127;
        }
        else {
          unsigned int v29 = 16;
        }
        uint64_t v136 = a3 + (v28 - v138) * a11;
        unint64_t v30 = (unint64_t)a7 >> 4;
        unsigned int v139 = v29;
        do
        {
          unint64_t v31 = 16 * v30;
          unint64_t v32 = v30 + 1;
          unsigned int v33 = 16 * (v30 + 1) - 1;
          if (16 * (int)v30 <= a7) {
            unsigned int v34 = a7;
          }
          else {
            unsigned int v34 = 16 * v30;
          }
          if (v133 < v33) {
            unsigned int v33 = a7 + a9 - 1;
          }
          int v35 = v33 - v34 + 1;
          if (v30 == v141) {
            unsigned int v36 = v140;
          }
          else {
            unsigned int v36 = 16;
          }
          BOOL v37 = 1;
          if (16 * (int)v19 >= v138 && v31 >= a7)
          {
            int v38 = v140;
            if (v30 != v141) {
              int v38 = 16;
            }
            BOOL v37 = v35 != v38 || v137 != v29;
          }
          unsigned int v40 = *(_DWORD *)(result + 128) >> (*(unsigned char *)(result + 144) + a12);
          if (v40 <= 1) {
            unsigned int v40 = 1;
          }
          unsigned int v41 = v40 + 15;
          if (v41 < 0x20) {
            unsigned int v42 = 0;
          }
          else {
            unsigned int v42 = 32 - __clz(~(-1 << -(char)__clz((v41 >> 4) - 1)));
          }
          unsigned int v43 = *(_DWORD *)(result + 132) >> (*(unsigned char *)(result + 144) + a12);
          if (v43 <= 1) {
            unsigned int v43 = 1;
          }
          unsigned int v44 = v43 + 15;
          if (v44 < 0x20)
          {
            unsigned int v45 = 0;
            if (!v42)
            {
LABEL_65:
              uint64_t v47 = 0;
              goto LABEL_66;
            }
          }
          else
          {
            unsigned int v45 = 32 - __clz(~(-1 << -(char)__clz((v44 >> 4) - 1)));
            if (!(v45 | v42)) {
              goto LABEL_65;
            }
          }
          int v46 = 0;
          uint64_t v47 = 0;
          BOOL v48 = v42 != 0;
          BOOL v49 = v45 != 0;
          int v50 = 1;
          do
          {
            --v42;
            if (v48) {
              v47 |= (unint64_t)(v50 & v30) << v46++;
            }
            else {
              unsigned int v42 = 0;
            }
            --v45;
            if (v49) {
              v47 |= (unint64_t)(v50 & v19) << v46++;
            }
            else {
              unsigned int v45 = 0;
            }
            v50 *= 2;
            --v46;
            BOOL v49 = v45 != 0;
            BOOL v48 = v42 != 0;
          }
          while (v45 | v42);
LABEL_66:
          uint64_t v51 = v19 * v130 + 384 * v30;
          int v52 = v36 < 0x10 || v37;
          size_t v53 = (unsigned __int8 *)(a4 + 8 * v47);
          int v54 = (unsigned char *)(a2 + v51);
          if (v29 < 0x10) {
            int v55 = 1;
          }
          else {
            int v55 = v52;
          }
          __src = v54;
          if (v144)
          {
            int v54 = __dst;
            if (!v55) {
              goto LABEL_79;
            }
            memcpy(__dst, __src, sizeof(__dst));
            LOBYTE(v29) = v139;
            uint64_t result = v142;
          }
          else if (!v55)
          {
LABEL_79:
            int v56 = *(_DWORD *)(*(void *)(result + 208) + 52);
            int v57 = (unsigned char *)(v136 + 2 * (v34 - a7));
            uint64_t v58 = a11;
            uint64_t v59 = (uint64_t)v54;
            uint64_t v60 = (unsigned __int8 *)(a4 + 8 * v47);
            int v61 = v36;
            goto LABEL_116;
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE4ELj1ELh0ELNS7_13SubblockOrderE1EL19AGXTextureFootprint1EEELb0EL29AGXHardwareTextureMemoryOrder3EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = result;
          unsigned int v147 = v54;
          unsigned __int8 v155 = v36;
          unsigned __int8 v156 = v29;
          unsigned int v151 = v132;
          unsigned int v152 = v34 - v31;
          uint64_t v148 = v53;
          uint64_t v149 = v136 + 2 * (v34 - a7);
          uint64_t v150 = a11;
          unsigned int v153 = v137;
          unsigned int v154 = v35;
          if (!v37)
          {
            int v62 = *(_DWORD *)(*(void *)(result + 208) + 52);
            uint64_t v63 = (uint64_t)&v54[AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::decompressSubblock((uint64_t)v158, 32, (uint64_t)v54, *v53, v62, v16, v17, v18)];
            uint64_t v67 = v63
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::decompressSubblock((uint64_t)v159, 32, v63, v53[1], v62, v64, v65, v66);
            uint64_t v71 = v67
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::decompressSubblock((uint64_t)&v160, 32, v67, v53[2], v62, v68, v69, v70);
            uint64_t v75 = v71
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::decompressSubblock((uint64_t)&v161, 32, v71, v53[3], v62, v72, v73, v74);
            uint64_t v79 = v75
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::decompressSubblock((uint64_t)&v162, 32, v75, v53[4], v62, v76, v77, v78);
            uint64_t v83 = v79
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::decompressSubblock((uint64_t)&v163, 32, v79, v53[5], v62, v80, v81, v82);
            uint64_t v87 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::decompressSubblock((uint64_t)&v164, 32, v83, v53[6], v62, v84, v85, v86);
            AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::decompressSubblock((uint64_t)v165, 32, v83 + v87, v53[7], v62, v88, v89, v90);
            uint64_t v91 = v153;
            if (!v153 || !v154) {
              goto LABEL_115;
            }
            uint64_t v92 = 32 * v151;
            uint64_t v93 = 2 * v152;
            int32x4_t v94 = &v158[v92 + v93];
            uint64_t v95 = v149;
            uint64_t v96 = v150;
            unint64_t v97 = 2 * v154;
            if (v97 <= 1) {
              unint64_t v98 = 1;
            }
            else {
              unint64_t v98 = 2 * v154;
            }
            if (v98 <= 7)
            {
              uint64_t v99 = 0;
              do
              {
                uint64_t v100 = 0;
                do
                {
                  v94[v100] = *(unsigned char *)(v95 + v100);
                  ++v100;
                }
                while (v97 > v100);
                ++v99;
                v94 += 32;
                v95 += v96;
              }
              while (v99 != v91);
              goto LABEL_115;
            }
            if (v98)
            {
              unint64_t v101 = (v98 - 1) >> 32;
              if (!v101)
              {
                unsigned int v102 = &v158[v92 + v93];
                uint64_t v103 = v98 & 0x1FFFFFFE0;
                uint64_t v104 = v98 & 0x1FFFFFFF8;
                int32x4_t v105 = &v159[v92 + v93];
                int32x4_t v106 = (long long *)(v149 + 16);
                uint64_t v107 = v94;
                uint64_t v108 = v149;
                while (1)
                {
                  uint64_t v109 = (char *)(v95 + v96 * v101);
                  int32x4_t v110 = &v94[32 * v101];
                  if ((unint64_t)(&v102[32 * v101] - v109) < 0x20)
                  {
                    int v111 = 0;
                    goto LABEL_108;
                  }
                  if (v98 >= 0x20)
                  {
                    uint64_t v113 = v106;
                    unsigned int v114 = v105;
                    uint64_t v115 = v98 & 0x1FFFFFFE0;
                    do
                    {
                      long long v116 = *v113;
                      *(v114 - 1) = *(v113 - 1);
                      *unsigned int v114 = v116;
                      v114 += 2;
                      v113 += 2;
                      v115 -= 32;
                    }
                    while (v115);
                    if (v98 == v103) {
                      goto LABEL_94;
                    }
                    uint64_t v112 = v98 & 0x1FFFFFFE0;
                    if ((v98 & 0x18) == 0)
                    {
                      v109 += v103;
                      v110 += v103;
                      int v111 = v98 & 0xFFFFFFE0;
                      goto LABEL_108;
                    }
                  }
                  else
                  {
                    uint64_t v112 = 0;
                  }
                  v110 += v104;
                  unint64_t v117 = v112 - (v98 & 0x1FFFFFFF8);
                  int32x4_t v118 = (uint64_t *)(v108 + v112);
                  uint64_t v119 = &v107[v112];
                  do
                  {
                    uint64_t v120 = *v118++;
                    *v119++ = v120;
                    v117 += 8;
                  }
                  while (v117);
                  if (v98 == v104) {
                    goto LABEL_94;
                  }
                  v109 += v104;
                  int v111 = v98 & 0xFFFFFFF8;
LABEL_108:
                  unsigned int v121 = v111 + 1;
                  do
                  {
                    char v122 = *v109++;
                    *v110++ = v122;
                  }
                  while (v97 > v121++);
LABEL_94:
                  ++v101;
                  v105 += 32;
                  int32x4_t v106 = (long long *)((char *)v106 + v96);
                  v108 += v96;
                  v107 += 32;
                  if (v101 == v91) {
                    goto LABEL_115;
                  }
                }
              }
            }
            uint64_t v124 = 0;
            do
            {
              uint64_t v125 = 0;
              do
              {
                v94[v125] = *(unsigned char *)(v95 + v125);
                ++v125;
              }
              while (v97 > v125);
              ++v124;
              v94 += 32;
              v95 += v96;
            }
            while (v124 != v91);
LABEL_115:
            uint64_t v59 = (uint64_t)v147;
            uint64_t v60 = v148;
            int v61 = v155;
            unsigned int v29 = v156;
            int v56 = *(_DWORD *)(*(void *)(v142 + 208) + 52);
            int v57 = v158;
            uint64_t v58 = 32;
LABEL_116:
            AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::compressMacroblock((unint64_t)v57, v58, v59, v60, v61, v29, v56);
            if (!v144) {
              goto LABEL_27;
            }
            goto LABEL_117;
          }
          dispatch_sync(*(dispatch_queue_t *)(*(void *)(result + 8) + 7384), block);
          if (!v144) {
            goto LABEL_27;
          }
LABEL_117:
          memcpy(__src, v54, 0x200uLL);
LABEL_27:
          unint64_t v30 = v32;
          uint64_t result = v142;
          unsigned int v29 = v139;
        }
        while (v32 != (v133 >> 4) + 1);
        ++v19;
      }
      while (v19 != v126);
    }
  }
  return result;
}

uint64_t AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>,false,(AGXHardwareTextureMemoryOrder)3>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, char a12)
{
  v165[14] = *MEMORY[0x263EF8340];
  size_t v130 = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v138 = a8;
  uint64_t v19 = a8 >> 4;
  unsigned int v129 = a8 + a10 - 1;
  unsigned int v20 = v129 >> 4;
  uint64_t v142 = a1;
  if (*(void *)(a1 + 168)) {
    int v21 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v21 = 0;
  }
  BOOL v22 = (v21 & 0xD00) == 0 || v21 == 768;
  int v23 = v21 & 0xE00;
  int v25 = !v22 && v23 != 1024;
  int v144 = v25;
  uint64_t result = a1;
  if (v19 <= v20)
  {
    unsigned int v133 = a7 + a9 - 1;
    if (a7 >> 4 <= v133 >> 4)
    {
      uint64_t v141 = (a5 - 1) >> 4;
      uint64_t v128 = (a6 - 1) >> 4;
      int v140 = ((a5 - 1) & 0xF) + 1;
      int v127 = ((a6 - 1) & 0xF) + 1;
      uint64_t v126 = v20 + 1;
      do
      {
        unsigned int v27 = (16 * v19) | 0xF;
        if (16 * (int)v19 <= v138) {
          unsigned int v28 = v138;
        }
        else {
          unsigned int v28 = 16 * v19;
        }
        if (v129 < v27) {
          unsigned int v27 = v129;
        }
        unsigned int v132 = v28 - 16 * v19;
        int v137 = v27 - v28 + 1;
        if (v19 == v128) {
          unsigned int v29 = v127;
        }
        else {
          unsigned int v29 = 16;
        }
        uint64_t v136 = a3 + (v28 - v138) * a11;
        unint64_t v30 = (unint64_t)a7 >> 4;
        unsigned int v139 = v29;
        do
        {
          unint64_t v31 = 16 * v30;
          unint64_t v32 = v30 + 1;
          unsigned int v33 = 16 * (v30 + 1) - 1;
          if (16 * (int)v30 <= a7) {
            unsigned int v34 = a7;
          }
          else {
            unsigned int v34 = 16 * v30;
          }
          if (v133 < v33) {
            unsigned int v33 = a7 + a9 - 1;
          }
          int v35 = v33 - v34 + 1;
          if (v30 == v141) {
            unsigned int v36 = v140;
          }
          else {
            unsigned int v36 = 16;
          }
          BOOL v37 = 1;
          if (16 * (int)v19 >= v138 && v31 >= a7)
          {
            int v38 = v140;
            if (v30 != v141) {
              int v38 = 16;
            }
            BOOL v37 = v35 != v38 || v137 != v29;
          }
          unsigned int v40 = *(_DWORD *)(result + 128) >> (*(unsigned char *)(result + 144) + a12);
          if (v40 <= 1) {
            unsigned int v40 = 1;
          }
          unsigned int v41 = v40 + 15;
          if (v41 < 0x20) {
            unsigned int v42 = 0;
          }
          else {
            unsigned int v42 = 32 - __clz(~(-1 << -(char)__clz((v41 >> 4) - 1)));
          }
          unsigned int v43 = *(_DWORD *)(result + 132) >> (*(unsigned char *)(result + 144) + a12);
          if (v43 <= 1) {
            unsigned int v43 = 1;
          }
          unsigned int v44 = v43 + 15;
          if (v44 < 0x20)
          {
            unsigned int v45 = 0;
            if (!v42)
            {
LABEL_65:
              uint64_t v47 = 0;
              goto LABEL_66;
            }
          }
          else
          {
            unsigned int v45 = 32 - __clz(~(-1 << -(char)__clz((v44 >> 4) - 1)));
            if (!(v45 | v42)) {
              goto LABEL_65;
            }
          }
          int v46 = 0;
          uint64_t v47 = 0;
          BOOL v48 = v42 != 0;
          BOOL v49 = v45 != 0;
          int v50 = 1;
          do
          {
            --v42;
            if (v48) {
              v47 |= (unint64_t)(v50 & v30) << v46++;
            }
            else {
              unsigned int v42 = 0;
            }
            --v45;
            if (v49) {
              v47 |= (unint64_t)(v50 & v19) << v46++;
            }
            else {
              unsigned int v45 = 0;
            }
            v50 *= 2;
            --v46;
            BOOL v49 = v45 != 0;
            BOOL v48 = v42 != 0;
          }
          while (v45 | v42);
LABEL_66:
          size_t v51 = v19 * v130 + (v30 << 8);
          int v52 = v36 < 0x10 || v37;
          size_t v53 = (unsigned __int8 *)(a4 + 8 * v47);
          int v54 = (unsigned char *)(a2 + v51);
          if (v29 < 0x10) {
            int v55 = 1;
          }
          else {
            int v55 = v52;
          }
          __src = v54;
          if (v144)
          {
            int v54 = __dst;
            if (!v55) {
              goto LABEL_79;
            }
            memcpy(__dst, __src, sizeof(__dst));
            LOBYTE(v29) = v139;
            uint64_t result = v142;
          }
          else if (!v55)
          {
LABEL_79:
            int v56 = *(_DWORD *)(*(void *)(result + 208) + 52);
            int v57 = (unsigned char *)(v136 + 2 * (v34 - a7));
            uint64_t v58 = a11;
            unint64_t v59 = (unint64_t)v54;
            uint64_t v60 = (unsigned __int8 *)(a4 + 8 * v47);
            int v61 = v36;
            goto LABEL_116;
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE4ELj1ELh0ELNS7_13SubblockOrderE1EL19AGXTextureFootprint2EEELb0EL29AGXHardwareTextureMemoryOrder3EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = result;
          unsigned int v147 = v54;
          unsigned __int8 v155 = v36;
          unsigned __int8 v156 = v29;
          unsigned int v151 = v132;
          unsigned int v152 = v34 - v31;
          uint64_t v148 = v53;
          uint64_t v149 = v136 + 2 * (v34 - a7);
          uint64_t v150 = a11;
          unsigned int v153 = v137;
          unsigned int v154 = v35;
          if (!v37)
          {
            int v62 = *(_DWORD *)(*(void *)(result + 208) + 52);
            uint64_t v63 = (uint64_t)&v54[AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressSubblock((uint64_t)v158, 32, (uint64_t)v54, *v53, v62, v16, v17, v18)];
            uint64_t v67 = v63
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressSubblock((uint64_t)v159, 32, v63, v53[1], v62, v64, v65, v66);
            uint64_t v71 = v67
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressSubblock((uint64_t)&v160, 32, v67, v53[2], v62, v68, v69, v70);
            uint64_t v75 = v71
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressSubblock((uint64_t)&v161, 32, v71, v53[3], v62, v72, v73, v74);
            uint64_t v79 = v75
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressSubblock((uint64_t)&v162, 32, v75, v53[4], v62, v76, v77, v78);
            uint64_t v83 = v79
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressSubblock((uint64_t)&v163, 32, v79, v53[5], v62, v80, v81, v82);
            uint64_t v87 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressSubblock((uint64_t)&v164, 32, v83, v53[6], v62, v84, v85, v86);
            AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressSubblock((uint64_t)v165, 32, v83 + v87, v53[7], v62, v88, v89, v90);
            uint64_t v91 = v153;
            if (!v153 || !v154) {
              goto LABEL_115;
            }
            uint64_t v92 = 32 * v151;
            uint64_t v93 = 2 * v152;
            int32x4_t v94 = &v158[v92 + v93];
            uint64_t v95 = v149;
            uint64_t v96 = v150;
            unint64_t v97 = 2 * v154;
            if (v97 <= 1) {
              unint64_t v98 = 1;
            }
            else {
              unint64_t v98 = 2 * v154;
            }
            if (v98 <= 7)
            {
              uint64_t v99 = 0;
              do
              {
                uint64_t v100 = 0;
                do
                {
                  v94[v100] = *(unsigned char *)(v95 + v100);
                  ++v100;
                }
                while (v97 > v100);
                ++v99;
                v94 += 32;
                v95 += v96;
              }
              while (v99 != v91);
              goto LABEL_115;
            }
            if (v98)
            {
              unint64_t v101 = (v98 - 1) >> 32;
              if (!v101)
              {
                unsigned int v102 = &v158[v92 + v93];
                uint64_t v103 = v98 & 0x1FFFFFFE0;
                uint64_t v104 = v98 & 0x1FFFFFFF8;
                int32x4_t v105 = &v159[v92 + v93];
                int32x4_t v106 = (long long *)(v149 + 16);
                uint64_t v107 = v94;
                uint64_t v108 = v149;
                while (1)
                {
                  uint64_t v109 = (char *)(v95 + v96 * v101);
                  int32x4_t v110 = &v94[32 * v101];
                  if ((unint64_t)(&v102[32 * v101] - v109) < 0x20)
                  {
                    int v111 = 0;
                    goto LABEL_108;
                  }
                  if (v98 >= 0x20)
                  {
                    uint64_t v113 = v106;
                    unsigned int v114 = v105;
                    uint64_t v115 = v98 & 0x1FFFFFFE0;
                    do
                    {
                      long long v116 = *v113;
                      *(v114 - 1) = *(v113 - 1);
                      *unsigned int v114 = v116;
                      v114 += 2;
                      v113 += 2;
                      v115 -= 32;
                    }
                    while (v115);
                    if (v98 == v103) {
                      goto LABEL_94;
                    }
                    uint64_t v112 = v98 & 0x1FFFFFFE0;
                    if ((v98 & 0x18) == 0)
                    {
                      v109 += v103;
                      v110 += v103;
                      int v111 = v98 & 0xFFFFFFE0;
                      goto LABEL_108;
                    }
                  }
                  else
                  {
                    uint64_t v112 = 0;
                  }
                  v110 += v104;
                  unint64_t v117 = v112 - (v98 & 0x1FFFFFFF8);
                  int32x4_t v118 = (uint64_t *)(v108 + v112);
                  uint64_t v119 = &v107[v112];
                  do
                  {
                    uint64_t v120 = *v118++;
                    *v119++ = v120;
                    v117 += 8;
                  }
                  while (v117);
                  if (v98 == v104) {
                    goto LABEL_94;
                  }
                  v109 += v104;
                  int v111 = v98 & 0xFFFFFFF8;
LABEL_108:
                  unsigned int v121 = v111 + 1;
                  do
                  {
                    char v122 = *v109++;
                    *v110++ = v122;
                  }
                  while (v97 > v121++);
LABEL_94:
                  ++v101;
                  v105 += 32;
                  int32x4_t v106 = (long long *)((char *)v106 + v96);
                  v108 += v96;
                  v107 += 32;
                  if (v101 == v91) {
                    goto LABEL_115;
                  }
                }
              }
            }
            uint64_t v124 = 0;
            do
            {
              uint64_t v125 = 0;
              do
              {
                v94[v125] = *(unsigned char *)(v95 + v125);
                ++v125;
              }
              while (v97 > v125);
              ++v124;
              v94 += 32;
              v95 += v96;
            }
            while (v124 != v91);
LABEL_115:
            unint64_t v59 = (unint64_t)v147;
            uint64_t v60 = v148;
            int v61 = v155;
            unsigned int v29 = v156;
            int v56 = *(_DWORD *)(*(void *)(v142 + 208) + 52);
            int v57 = v158;
            uint64_t v58 = 32;
LABEL_116:
            AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::compressMacroblock((unint64_t)v57, v58, v59, v60, v61, v29, v56);
            if (!v144) {
              goto LABEL_27;
            }
            goto LABEL_117;
          }
          dispatch_sync(*(dispatch_queue_t *)(*(void *)(result + 8) + 7384), block);
          if (!v144) {
            goto LABEL_27;
          }
LABEL_117:
          memcpy(__src, v54, 0x200uLL);
LABEL_27:
          unint64_t v30 = v32;
          uint64_t result = v142;
          unsigned int v29 = v139;
        }
        while (v32 != (v133 >> 4) + 1);
        ++v19;
      }
      while (v19 != v126);
    }
  }
  return result;
}

uint64_t AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>,false,(AGXHardwareTextureMemoryOrder)3>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, char a12)
{
  v165[14] = *MEMORY[0x263EF8340];
  size_t v130 = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v138 = a8;
  uint64_t v19 = a8 >> 4;
  unsigned int v129 = a8 + a10 - 1;
  unsigned int v20 = v129 >> 4;
  uint64_t v142 = a1;
  if (*(void *)(a1 + 168)) {
    int v21 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v21 = 0;
  }
  BOOL v22 = (v21 & 0xD00) == 0 || v21 == 768;
  int v23 = v21 & 0xE00;
  int v25 = !v22 && v23 != 1024;
  int v144 = v25;
  uint64_t result = a1;
  if (v19 <= v20)
  {
    unsigned int v133 = a7 + a9 - 1;
    if (a7 >> 4 <= v133 >> 4)
    {
      uint64_t v141 = (a5 - 1) >> 4;
      uint64_t v128 = (a6 - 1) >> 4;
      int v140 = ((a5 - 1) & 0xF) + 1;
      int v127 = ((a6 - 1) & 0xF) + 1;
      uint64_t v126 = v20 + 1;
      do
      {
        unsigned int v27 = (16 * v19) | 0xF;
        if (16 * (int)v19 <= v138) {
          unsigned int v28 = v138;
        }
        else {
          unsigned int v28 = 16 * v19;
        }
        if (v129 < v27) {
          unsigned int v27 = v129;
        }
        unsigned int v132 = v28 - 16 * v19;
        int v137 = v27 - v28 + 1;
        if (v19 == v128) {
          unsigned int v29 = v127;
        }
        else {
          unsigned int v29 = 16;
        }
        uint64_t v136 = a3 + (v28 - v138) * a11;
        unint64_t v30 = (unint64_t)a7 >> 4;
        unsigned int v139 = v29;
        do
        {
          unint64_t v31 = 16 * v30;
          unint64_t v32 = v30 + 1;
          unsigned int v33 = 16 * (v30 + 1) - 1;
          if (16 * (int)v30 <= a7) {
            unsigned int v34 = a7;
          }
          else {
            unsigned int v34 = 16 * v30;
          }
          if (v133 < v33) {
            unsigned int v33 = a7 + a9 - 1;
          }
          int v35 = v33 - v34 + 1;
          if (v30 == v141) {
            unsigned int v36 = v140;
          }
          else {
            unsigned int v36 = 16;
          }
          BOOL v37 = 1;
          if (16 * (int)v19 >= v138 && v31 >= a7)
          {
            int v38 = v140;
            if (v30 != v141) {
              int v38 = 16;
            }
            BOOL v37 = v35 != v38 || v137 != v29;
          }
          unsigned int v40 = *(_DWORD *)(result + 128) >> (*(unsigned char *)(result + 144) + a12);
          if (v40 <= 1) {
            unsigned int v40 = 1;
          }
          unsigned int v41 = v40 + 15;
          if (v41 < 0x20) {
            unsigned int v42 = 0;
          }
          else {
            unsigned int v42 = 32 - __clz(~(-1 << -(char)__clz((v41 >> 4) - 1)));
          }
          unsigned int v43 = *(_DWORD *)(result + 132) >> (*(unsigned char *)(result + 144) + a12);
          if (v43 <= 1) {
            unsigned int v43 = 1;
          }
          unsigned int v44 = v43 + 15;
          if (v44 < 0x20)
          {
            unsigned int v45 = 0;
            if (!v42)
            {
LABEL_65:
              uint64_t v47 = 0;
              goto LABEL_66;
            }
          }
          else
          {
            unsigned int v45 = 32 - __clz(~(-1 << -(char)__clz((v44 >> 4) - 1)));
            if (!(v45 | v42)) {
              goto LABEL_65;
            }
          }
          int v46 = 0;
          uint64_t v47 = 0;
          BOOL v48 = v42 != 0;
          BOOL v49 = v45 != 0;
          int v50 = 1;
          do
          {
            --v42;
            if (v48) {
              v47 |= (unint64_t)(v50 & v30) << v46++;
            }
            else {
              unsigned int v42 = 0;
            }
            --v45;
            if (v49) {
              v47 |= (unint64_t)(v50 & v19) << v46++;
            }
            else {
              unsigned int v45 = 0;
            }
            v50 *= 2;
            --v46;
            BOOL v49 = v45 != 0;
            BOOL v48 = v42 != 0;
          }
          while (v45 | v42);
LABEL_66:
          size_t v51 = v19 * v130 + (v30 << 8);
          int v52 = v36 < 0x10 || v37;
          size_t v53 = (unsigned __int8 *)(a4 + 8 * v47);
          int v54 = (unsigned char *)(a2 + v51);
          if (v29 < 0x10) {
            int v55 = 1;
          }
          else {
            int v55 = v52;
          }
          __src = v54;
          if (v144)
          {
            int v54 = __dst;
            if (!v55) {
              goto LABEL_79;
            }
            memcpy(__dst, __src, sizeof(__dst));
            LOBYTE(v29) = v139;
            uint64_t result = v142;
          }
          else if (!v55)
          {
LABEL_79:
            int v56 = *(_DWORD *)(*(void *)(result + 208) + 52);
            int v57 = (unsigned char *)(v136 + 2 * (v34 - a7));
            uint64_t v58 = a11;
            unint64_t v59 = (unint64_t)v54;
            uint64_t v60 = (unsigned __int8 *)(a4 + 8 * v47);
            int v61 = v36;
            goto LABEL_116;
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE4ELj1ELh0ELNS7_13SubblockOrderE1EL19AGXTextureFootprint3EEELb0EL29AGXHardwareTextureMemoryOrder3EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = result;
          unsigned int v147 = v54;
          unsigned __int8 v155 = v36;
          unsigned __int8 v156 = v29;
          unsigned int v151 = v132;
          unsigned int v152 = v34 - v31;
          uint64_t v148 = v53;
          uint64_t v149 = v136 + 2 * (v34 - a7);
          uint64_t v150 = a11;
          unsigned int v153 = v137;
          unsigned int v154 = v35;
          if (!v37)
          {
            int v62 = *(_DWORD *)(*(void *)(result + 208) + 52);
            uint64_t v63 = (uint64_t)&v54[AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::decompressSubblock((uint64_t)v158, 32, (uint64_t)v54, *v53, v62, v16, v17, v18)];
            uint64_t v67 = v63
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::decompressSubblock((uint64_t)v159, 32, v63, v53[1], v62, v64, v65, v66);
            uint64_t v71 = v67
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::decompressSubblock((uint64_t)&v160, 32, v67, v53[2], v62, v68, v69, v70);
            uint64_t v75 = v71
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::decompressSubblock((uint64_t)&v161, 32, v71, v53[3], v62, v72, v73, v74);
            uint64_t v79 = v75
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::decompressSubblock((uint64_t)&v162, 32, v75, v53[4], v62, v76, v77, v78);
            uint64_t v83 = v79
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::decompressSubblock((uint64_t)&v163, 32, v79, v53[5], v62, v80, v81, v82);
            uint64_t v87 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::decompressSubblock((uint64_t)&v164, 32, v83, v53[6], v62, v84, v85, v86);
            AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::decompressSubblock((uint64_t)v165, 32, v83 + v87, v53[7], v62, v88, v89, v90);
            uint64_t v91 = v153;
            if (!v153 || !v154) {
              goto LABEL_115;
            }
            uint64_t v92 = 32 * v151;
            uint64_t v93 = 2 * v152;
            int32x4_t v94 = &v158[v92 + v93];
            uint64_t v95 = v149;
            uint64_t v96 = v150;
            unint64_t v97 = 2 * v154;
            if (v97 <= 1) {
              unint64_t v98 = 1;
            }
            else {
              unint64_t v98 = 2 * v154;
            }
            if (v98 <= 7)
            {
              uint64_t v99 = 0;
              do
              {
                uint64_t v100 = 0;
                do
                {
                  v94[v100] = *(unsigned char *)(v95 + v100);
                  ++v100;
                }
                while (v97 > v100);
                ++v99;
                v94 += 32;
                v95 += v96;
              }
              while (v99 != v91);
              goto LABEL_115;
            }
            if (v98)
            {
              unint64_t v101 = (v98 - 1) >> 32;
              if (!v101)
              {
                unsigned int v102 = &v158[v92 + v93];
                uint64_t v103 = v98 & 0x1FFFFFFE0;
                uint64_t v104 = v98 & 0x1FFFFFFF8;
                int32x4_t v105 = &v159[v92 + v93];
                int32x4_t v106 = (long long *)(v149 + 16);
                uint64_t v107 = v94;
                uint64_t v108 = v149;
                while (1)
                {
                  uint64_t v109 = (char *)(v95 + v96 * v101);
                  int32x4_t v110 = &v94[32 * v101];
                  if ((unint64_t)(&v102[32 * v101] - v109) < 0x20)
                  {
                    int v111 = 0;
                    goto LABEL_108;
                  }
                  if (v98 >= 0x20)
                  {
                    uint64_t v113 = v106;
                    unsigned int v114 = v105;
                    uint64_t v115 = v98 & 0x1FFFFFFE0;
                    do
                    {
                      long long v116 = *v113;
                      *(v114 - 1) = *(v113 - 1);
                      *unsigned int v114 = v116;
                      v114 += 2;
                      v113 += 2;
                      v115 -= 32;
                    }
                    while (v115);
                    if (v98 == v103) {
                      goto LABEL_94;
                    }
                    uint64_t v112 = v98 & 0x1FFFFFFE0;
                    if ((v98 & 0x18) == 0)
                    {
                      v109 += v103;
                      v110 += v103;
                      int v111 = v98 & 0xFFFFFFE0;
                      goto LABEL_108;
                    }
                  }
                  else
                  {
                    uint64_t v112 = 0;
                  }
                  v110 += v104;
                  unint64_t v117 = v112 - (v98 & 0x1FFFFFFF8);
                  int32x4_t v118 = (uint64_t *)(v108 + v112);
                  uint64_t v119 = &v107[v112];
                  do
                  {
                    uint64_t v120 = *v118++;
                    *v119++ = v120;
                    v117 += 8;
                  }
                  while (v117);
                  if (v98 == v104) {
                    goto LABEL_94;
                  }
                  v109 += v104;
                  int v111 = v98 & 0xFFFFFFF8;
LABEL_108:
                  unsigned int v121 = v111 + 1;
                  do
                  {
                    char v122 = *v109++;
                    *v110++ = v122;
                  }
                  while (v97 > v121++);
LABEL_94:
                  ++v101;
                  v105 += 32;
                  int32x4_t v106 = (long long *)((char *)v106 + v96);
                  v108 += v96;
                  v107 += 32;
                  if (v101 == v91) {
                    goto LABEL_115;
                  }
                }
              }
            }
            uint64_t v124 = 0;
            do
            {
              uint64_t v125 = 0;
              do
              {
                v94[v125] = *(unsigned char *)(v95 + v125);
                ++v125;
              }
              while (v97 > v125);
              ++v124;
              v94 += 32;
              v95 += v96;
            }
            while (v124 != v91);
LABEL_115:
            unint64_t v59 = (unint64_t)v147;
            uint64_t v60 = v148;
            int v61 = v155;
            unsigned int v29 = v156;
            int v56 = *(_DWORD *)(*(void *)(v142 + 208) + 52);
            int v57 = v158;
            uint64_t v58 = 32;
LABEL_116:
            AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::compressMacroblock((unint64_t)v57, v58, v59, v60, v61, v29, v56);
            if (!v144) {
              goto LABEL_27;
            }
            goto LABEL_117;
          }
          dispatch_sync(*(dispatch_queue_t *)(*(void *)(result + 8) + 7384), block);
          if (!v144) {
            goto LABEL_27;
          }
LABEL_117:
          memcpy(__src, v54, 0x200uLL);
LABEL_27:
          unint64_t v30 = v32;
          uint64_t result = v142;
          unsigned int v29 = v139;
        }
        while (v32 != (v133 >> 4) + 1);
        ++v19;
      }
      while (v19 != v126);
    }
  }
  return result;
}

uint64_t AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)3>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, uint64_t a7, unsigned int a8, int a9, int a10, uint64_t a11, char a12)
{
  uint64_t v141 = *MEMORY[0x263EF8340];
  size_t v104 = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v113 = a8;
  uint64_t v17 = a8 >> 4;
  unsigned int v103 = a8 + a10 - 1;
  unsigned int v18 = v103 >> 4;
  uint64_t v114 = a1;
  if (*(void *)(a1 + 168)) {
    int v19 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v19 = 0;
  }
  BOOL v20 = (v19 & 0xD00) == 0 || v19 == 768;
  int v21 = v19 & 0xE00;
  int v23 = !v20 && v21 != 1024;
  int v120 = v23;
  uint64_t result = a1;
  if (v17 <= v18)
  {
    unsigned int v108 = a7 + a9 - 1;
    if (a7 >> 4 <= v108 >> 4)
    {
      uint64_t v117 = (a5 - 1) >> 4;
      uint64_t v102 = (a6 - 1) >> 4;
      int v116 = ((a5 - 1) & 0xF) + 1;
      int v101 = ((a6 - 1) & 0xF) + 1;
      unint64_t v107 = a7;
      uint64_t v99 = v18 + 1;
      unint64_t v100 = (unint64_t)a7 >> 4;
      do
      {
        unsigned int v25 = (16 * v17) | 0xF;
        if (16 * (int)v17 <= v113) {
          unsigned int v26 = v113;
        }
        else {
          unsigned int v26 = 16 * v17;
        }
        if (v103 < v25) {
          unsigned int v25 = v103;
        }
        unsigned int v106 = v26 - 16 * v17;
        int v112 = v25 - v26 + 1;
        if (v17 == v102) {
          unsigned int v27 = v101;
        }
        else {
          unsigned int v27 = 16;
        }
        uint64_t v111 = a3 + (v26 - v113) * a11;
        unint64_t v28 = v100;
        unsigned int v115 = v27;
        do
        {
          unint64_t v29 = 16 * v28;
          unsigned int v30 = 16 * (v28 + 1) - 1;
          if (16 * (int)v28 <= a7) {
            int v31 = a7;
          }
          else {
            int v31 = 16 * v28;
          }
          if (v108 < v30) {
            unsigned int v30 = v108;
          }
          int v32 = v30 - v31 + 1;
          if (v28 == v117) {
            unsigned int v33 = v116;
          }
          else {
            unsigned int v33 = 16;
          }
          BOOL v34 = 1;
          if (16 * (int)v17 >= v113 && v29 >= v107)
          {
            int v35 = v116;
            if (v28 != v117) {
              int v35 = 16;
            }
            BOOL v34 = v32 != v35 || v112 != v27;
          }
          unsigned int v37 = *(_DWORD *)(result + 128) >> (*(unsigned char *)(result + 144) + a12);
          if (v37 <= 1) {
            unsigned int v37 = 1;
          }
          unsigned int v38 = v37 + 15;
          if (v38 < 0x20) {
            unsigned int v39 = 0;
          }
          else {
            unsigned int v39 = 32 - __clz(~(-1 << -(char)__clz((v38 >> 4) - 1)));
          }
          unsigned int v40 = *(_DWORD *)(result + 132) >> (*(unsigned char *)(result + 144) + a12);
          if (v40 <= 1) {
            unsigned int v40 = 1;
          }
          unsigned int v41 = v40 + 15;
          if (v41 < 0x20) {
            unsigned int v42 = 0;
          }
          else {
            unsigned int v42 = 32 - __clz(~(-1 << -(char)__clz((v41 >> 4) - 1)));
          }
          unint64_t v118 = v28 + 1;
          if (v42 | v39)
          {
            int v43 = 0;
            uint64_t v44 = 0;
            BOOL v45 = v39 != 0;
            BOOL v46 = v42 != 0;
            int v47 = 1;
            do
            {
              --v39;
              if (v45) {
                v44 |= (unint64_t)(v47 & v28) << v43++;
              }
              else {
                unsigned int v39 = 0;
              }
              --v42;
              if (v46) {
                v44 |= (unint64_t)(v47 & v17) << v43++;
              }
              else {
                unsigned int v42 = 0;
              }
              v47 *= 2;
              --v43;
              BOOL v46 = v42 != 0;
              BOOL v45 = v39 != 0;
            }
            while (v42 | v39);
          }
          else
          {
            uint64_t v44 = 0;
          }
          size_t v48 = v17 * v104 + (v28 << 10);
          uint64_t v49 = a7;
          int v50 = v33 < 0x10 || v34;
          size_t v51 = (char *)(a4 + 8 * v44);
          unint64_t v52 = v111 + 4 * (v31 - a7);
          size_t v53 = (int8x16_t *)(a2 + v48);
          if (v27 < 0x10) {
            int v54 = 1;
          }
          else {
            int v54 = v50;
          }
          uint64_t v119 = v53;
          if (v120)
          {
            int v55 = (int8x16_t *)__dst;
            if (!v54) {
              goto LABEL_77;
            }
            memcpy(__dst, v53, sizeof(__dst));
            LOBYTE(v27) = v115;
            uint64_t result = v114;
          }
          else
          {
            int v55 = v53;
            if (!v54)
            {
LABEL_77:
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::compressMacroblock(v52, a11, v55, v51, v33, v27);
              goto LABEL_78;
            }
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE15ELj1ELh0ELNS7_13SubblockOrderE1EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder3EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = result;
          char v122 = v55;
          unsigned __int8 v130 = v33;
          unsigned __int8 v131 = v27;
          unsigned int v126 = v106;
          unsigned int v127 = v31 - v29;
          int32x4_t v123 = v51;
          unint64_t v124 = v52;
          uint64_t v125 = a11;
          unsigned int v128 = v112;
          unsigned int v129 = v32;
          if (v34)
          {
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(result + 8) + 7384), block);
LABEL_78:
            a7 = v49;
            unint64_t v56 = v118;
            goto LABEL_115;
          }
          int v57 = (int64x2_t *)&v55->i8[AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressSubblock(v133, 64, (int64x2_t *)v55, *v51)];
          uint64_t v58 = (int64x2_t *)((char *)v57
                            + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressSubblock(v134, 64, v57, v51[1]));
          unint64_t v59 = (int64x2_t *)((char *)v58
                            + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressSubblock(v135, 64, v58, v51[2]));
          uint64_t v60 = (int64x2_t *)((char *)v59
                            + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressSubblock(v136, 64, v59, v51[3]));
          int v61 = (int64x2_t *)((char *)v60
                            + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressSubblock(v137, 64, v60, v51[4]));
          int v62 = (int64x2_t *)((char *)v61
                            + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressSubblock(v138, 64, v61, v51[5]));
          uint64_t v63 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressSubblock(v139, 64, v62, v51[6]);
          AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressSubblock(v140, 64, (int64x2_t *)((char *)v62 + v63), v51[7]);
          uint64_t v64 = v128;
          a7 = v49;
          unint64_t v56 = v118;
          if (v128 && v129)
          {
            unint64_t v65 = (unint64_t)v126 << 6;
            uint64_t v66 = 4 * v127;
            uint64_t v67 = &v133[0].i8[v65 + v66];
            unint64_t v68 = v124;
            uint64_t v69 = v125;
            unint64_t v70 = 4 * v129;
            if (v70 <= 1) {
              unint64_t v71 = 1;
            }
            else {
              unint64_t v71 = 4 * v129;
            }
            if (v71 > 7)
            {
              if (!v71 || (unint64_t v74 = (v71 - 1) >> 32) != 0)
              {
                uint64_t v97 = 0;
                do
                {
                  uint64_t v98 = 0;
                  do
                  {
                    v67[v98] = *(unsigned char *)(v68 + v98);
                    ++v98;
                  }
                  while (v70 > v98);
                  ++v97;
                  v67 += 64;
                  v68 += v69;
                }
                while (v97 != v64);
                goto LABEL_114;
              }
              uint64_t v75 = &v133[0].i8[v65 + v66];
              uint64_t v76 = v71 & 0x3FFFFFFE0;
              uint64_t v77 = v71 & 0x3FFFFFFF8;
              int8x8_t v78 = &v133[1].i8[v65 + v66];
              uint64_t v79 = (long long *)(v124 + 16);
              int8x8_t v80 = v67;
              unint64_t v81 = v124;
              while (2)
              {
                int8x8_t v82 = (char *)(v68 + v69 * v74);
                uint64_t v83 = &v67[64 * v74];
                if ((unint64_t)(&v75[64 * v74] - v82) >= 0x20)
                {
                  if (v71 >= 0x20)
                  {
                    int8x8_t v86 = v79;
                    uint64_t v87 = v78;
                    uint64_t v88 = v71 & 0x3FFFFFFE0;
                    do
                    {
                      long long v89 = *v86;
                      *((_OWORD *)v87 - 1) = *(v86 - 1);
                      *(_OWORD *)uint64_t v87 = v89;
                      v87 += 32;
                      v86 += 2;
                      v88 -= 32;
                    }
                    while (v88);
                    if (v71 == v76) {
                      goto LABEL_93;
                    }
                    uint64_t v85 = v71 & 0x3FFFFFFE0;
                    if ((v71 & 0x18) == 0)
                    {
                      v82 += v76;
                      v83 += v76;
                      int v84 = v71 & 0xFFFFFFE0;
                      goto LABEL_107;
                    }
                  }
                  else
                  {
                    uint64_t v85 = 0;
                  }
                  v83 += v77;
                  unint64_t v90 = v85 - (v71 & 0x3FFFFFFF8);
                  uint64_t v91 = (uint64_t *)(v81 + v85);
                  uint64_t v92 = &v80[v85];
                  do
                  {
                    uint64_t v93 = *v91++;
                    *(void *)uint64_t v92 = v93;
                    v92 += 8;
                    v90 += 8;
                  }
                  while (v90);
                  if (v71 != v77)
                  {
                    v82 += v77;
                    int v84 = v71 & 0xFFFFFFF8;
                    goto LABEL_107;
                  }
                }
                else
                {
                  int v84 = 0;
LABEL_107:
                  unsigned int v94 = v84 + 1;
                  do
                  {
                    char v95 = *v82++;
                    *v83++ = v95;
                  }
                  while (v70 > v94++);
                }
LABEL_93:
                ++v74;
                v78 += 64;
                uint64_t v79 = (long long *)((char *)v79 + v69);
                v81 += v69;
                v80 += 64;
                if (v74 == v64) {
                  goto LABEL_114;
                }
                continue;
              }
            }
            uint64_t v72 = 0;
            do
            {
              uint64_t v73 = 0;
              do
              {
                v67[v73] = *(unsigned char *)(v68 + v73);
                ++v73;
              }
              while (v70 > v73);
              ++v72;
              v67 += 64;
              v68 += v69;
            }
            while (v72 != v64);
          }
LABEL_114:
          AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v133, 64, v122, v123, v130, v131);
LABEL_115:
          if (v120) {
            memcpy(v119, v55, 0x400uLL);
          }
          unint64_t v28 = v56;
          uint64_t result = v114;
          unsigned int v27 = v115;
        }
        while (v56 != (v108 >> 4) + 1);
        ++v17;
      }
      while (v17 != v99);
    }
  }
  return result;
}

uint64_t AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)3>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, char a12)
{
  uint64_t v195 = *MEMORY[0x263EF8340];
  size_t v158 = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v169 = a8;
  uint64_t v17 = a8 >> 4;
  unsigned int v157 = a8 + a10 - 1;
  unsigned int v18 = v157 >> 4;
  uint64_t v170 = a1;
  if (*(void *)(a1 + 168)) {
    int v19 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v19 = 0;
  }
  BOOL v20 = (v19 & 0xD00) == 0 || v19 == 768;
  int v21 = v19 & 0xE00;
  int v23 = !v20 && v21 != 1024;
  int v174 = v23;
  uint64_t result = a1;
  if (v17 <= v18)
  {
    unsigned int v164 = a7 + a9 - 1;
    if (a7 >> 4 <= v164 >> 4)
    {
      uint64_t v25 = a11;
      uint64_t v172 = (a5 - 1) >> 4;
      uint64_t v156 = (a6 - 1) >> 4;
      int v171 = ((a5 - 1) & 0xF) + 1;
      int v155 = ((a6 - 1) & 0xF) + 1;
      unint64_t v162 = a7;
      uint64_t v153 = v18 + 1;
      unint64_t v154 = (unint64_t)a7 >> 4;
      unsigned int v163 = a7;
      do
      {
        unsigned int v26 = (16 * v17) | 0xF;
        if (16 * (int)v17 <= v169) {
          unsigned int v27 = v169;
        }
        else {
          unsigned int v27 = 16 * v17;
        }
        if (v157 < v26) {
          unsigned int v26 = v157;
        }
        unsigned int v161 = v27 - 16 * v17;
        int v168 = v26 - v27 + 1;
        if (v17 == v156) {
          unsigned int v28 = v155;
        }
        else {
          unsigned int v28 = 16;
        }
        uint64_t v167 = a3 + (v27 - v169) * v25;
        unint64_t v29 = v154;
        do
        {
          unint64_t v30 = 16 * v29;
          unint64_t v173 = v29 + 1;
          unsigned int v31 = 16 * (v29 + 1) - 1;
          if (16 * (int)v29 <= a7) {
            unsigned int v32 = a7;
          }
          else {
            unsigned int v32 = 16 * v29;
          }
          if (v164 < v31) {
            unsigned int v31 = v164;
          }
          int v33 = v31 - v32 + 1;
          if (v29 == v172) {
            unsigned int v34 = v171;
          }
          else {
            unsigned int v34 = 16;
          }
          BOOL v35 = 1;
          if (16 * (int)v17 >= v169 && v30 >= v162)
          {
            int v36 = v171;
            if (v29 != v172) {
              int v36 = 16;
            }
            BOOL v35 = v33 != v36 || v168 != v28;
          }
          unsigned int v38 = *(_DWORD *)(result + 128) >> (*(unsigned char *)(result + 144) + a12);
          if (v38 <= 1) {
            unsigned int v38 = 1;
          }
          unsigned int v39 = v38 + 15;
          if (v39 < 0x20) {
            unsigned int v40 = 0;
          }
          else {
            unsigned int v40 = 32 - __clz(~(-1 << -(char)__clz((v39 >> 4) - 1)));
          }
          unsigned int v41 = *(_DWORD *)(result + 132) >> (*(unsigned char *)(result + 144) + a12);
          if (v41 <= 1) {
            unsigned int v41 = 1;
          }
          unsigned int v42 = v41 + 15;
          if (v42 < 0x20)
          {
            unsigned int v43 = 0;
            if (!v40)
            {
LABEL_65:
              uint64_t v45 = 0;
              goto LABEL_66;
            }
          }
          else
          {
            unsigned int v43 = 32 - __clz(~(-1 << -(char)__clz((v42 >> 4) - 1)));
            if (!(v43 | v40)) {
              goto LABEL_65;
            }
          }
          int v44 = 0;
          uint64_t v45 = 0;
          BOOL v46 = v40 != 0;
          BOOL v47 = v43 != 0;
          int v48 = 1;
          do
          {
            --v40;
            if (v46) {
              v45 |= (unint64_t)(v48 & v29) << v44++;
            }
            else {
              unsigned int v40 = 0;
            }
            --v43;
            if (v47) {
              v45 |= (unint64_t)(v48 & v17) << v44++;
            }
            else {
              unsigned int v43 = 0;
            }
            v48 *= 2;
            --v44;
            BOOL v47 = v43 != 0;
            BOOL v46 = v40 != 0;
          }
          while (v43 | v40);
LABEL_66:
          size_t v49 = v17 * v158 + (v29 << 10);
          unsigned int v50 = v32 - a7;
          int v51 = v34 < 0x10 || v35;
          unint64_t v52 = (unsigned __int8 *)(a4 + 8 * v45);
          uint64_t v53 = v167 + 4 * v50;
          int v54 = (int64x2_t *)(a2 + v49);
          if (v28 < 0x10) {
            int v55 = 1;
          }
          else {
            int v55 = v51;
          }
          if (v174)
          {
            if (v55)
            {
              unint64_t v56 = v54;
              int v57 = v33;
              BOOL v58 = v35;
              memcpy(__dst, v54, sizeof(__dst));
              BOOL v35 = v58;
              uint64_t v25 = a11;
              int v33 = v57;
              unint64_t v59 = (int64x2_t *)__dst;
              int v54 = v56;
              uint64_t result = v170;
LABEL_76:
              uint64_t v60 = v54;
              block[0] = MEMORY[0x263EF8330];
              block[1] = 3221225472;
              block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE15ELj1ELh1ELNS7_13SubblockOrderE1EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder3EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
              block[3] = &__block_descriptor_90_e5_v8__0l;
              block[4] = result;
              unsigned int v176 = v59;
              unsigned __int8 v184 = v34;
              unsigned __int8 v185 = v28;
              unsigned int v180 = v161;
              unsigned int v181 = v32 - v30;
              size_t v177 = v52;
              uint64_t v178 = v53;
              uint64_t v179 = v25;
              unsigned int v182 = v168;
              unsigned int v183 = v33;
              if (v35)
              {
                int v61 = v59;
                dispatch_sync(*(dispatch_queue_t *)(*(void *)(result + 8) + 7384), block);
                unint64_t v59 = v61;
                uint64_t result = v170;
                a7 = v163;
                unint64_t v62 = v173;
                int v54 = v60;
                goto LABEL_92;
              }
              uint64_t v160 = v59;
              uint64_t v87 = (int64x2_t *)((char *)v59
                                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressSubblock(v187, 64, v59, *v52));
              uint64_t v88 = (int64x2_t *)((char *)v87
                                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressSubblock(v188, 64, v87, v52[1]));
              long long v89 = (int64x2_t *)((char *)v88
                                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressSubblock(v189, 64, v88, v52[2]));
              unint64_t v90 = (int64x2_t *)((char *)v89
                                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressSubblock(v190, 64, v89, v52[3]));
              uint64_t v91 = (int64x2_t *)((char *)v90
                                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressSubblock(v191, 64, v90, v52[4]));
              uint64_t v92 = (int64x2_t *)((char *)v91
                                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressSubblock(v192, 64, v91, v52[5]));
              uint64_t v93 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressSubblock(v193, 64, v92, v52[6]);
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressSubblock(v194, 64, (int64x2_t *)((char *)v92 + v93), v52[7]);
              uint64_t v94 = v182;
              if (v182 && v183)
              {
                unint64_t v95 = (unint64_t)v180 << 6;
                uint64_t v96 = 4 * v181;
                uint64_t v97 = &v187[0].i8[v95 + v96];
                uint64_t v98 = v178;
                uint64_t v99 = v179;
                unint64_t v100 = 4 * v183;
                if (v100 <= 1) {
                  unint64_t v101 = 1;
                }
                else {
                  unint64_t v101 = 4 * v183;
                }
                if (v101 <= 7)
                {
                  uint64_t v102 = 0;
                  do
                  {
                    uint64_t v103 = 0;
                    do
                    {
                      v97[v103] = *(unsigned char *)(v98 + v103);
                      ++v103;
                    }
                    while (v100 > v103);
                    ++v102;
                    v97 += 64;
                    v98 += v99;
                  }
                  while (v102 != v94);
                  goto LABEL_129;
                }
                if (v101)
                {
                  unint64_t v104 = (v101 - 1) >> 32;
                  if (!v104)
                  {
                    int32x4_t v105 = &v187[0].i8[v95 + v96];
                    uint64_t v106 = v101 & 0x3FFFFFFE0;
                    uint64_t v107 = v101 & 0x3FFFFFFF8;
                    unsigned int v108 = &v187[1].i8[v95 + v96];
                    uint64_t v109 = (long long *)(v178 + 16);
                    int32x4_t v110 = v97;
                    uint64_t v111 = v178;
                    while (1)
                    {
                      int v112 = (char *)(v98 + v99 * v104);
                      unsigned int v113 = &v97[64 * v104];
                      if ((unint64_t)(&v105[64 * v104] - v112) < 0x20)
                      {
                        int v114 = 0;
                        goto LABEL_122;
                      }
                      if (v101 >= 0x20)
                      {
                        int v116 = v109;
                        uint64_t v117 = v108;
                        uint64_t v118 = v101 & 0x3FFFFFFE0;
                        do
                        {
                          long long v119 = *v116;
                          *((_OWORD *)v117 - 1) = *(v116 - 1);
                          *(_OWORD *)uint64_t v117 = v119;
                          v117 += 32;
                          v116 += 2;
                          v118 -= 32;
                        }
                        while (v118);
                        if (v101 == v106) {
                          goto LABEL_108;
                        }
                        uint64_t v115 = v101 & 0x3FFFFFFE0;
                        if ((v101 & 0x18) == 0)
                        {
                          v112 += v106;
                          v113 += v106;
                          int v114 = v101 & 0xFFFFFFE0;
                          goto LABEL_122;
                        }
                      }
                      else
                      {
                        uint64_t v115 = 0;
                      }
                      v113 += v107;
                      unint64_t v120 = v115 - (v101 & 0x3FFFFFFF8);
                      unsigned int v121 = (uint64_t *)(v111 + v115);
                      char v122 = &v110[v115];
                      do
                      {
                        uint64_t v123 = *v121++;
                        *(void *)char v122 = v123;
                        v122 += 8;
                        v120 += 8;
                      }
                      while (v120);
                      if (v101 == v107) {
                        goto LABEL_108;
                      }
                      v112 += v107;
                      int v114 = v101 & 0xFFFFFFF8;
LABEL_122:
                      unsigned int v124 = v114 + 1;
                      do
                      {
                        char v125 = *v112++;
                        *v113++ = v125;
                      }
                      while (v100 > v124++);
LABEL_108:
                      ++v104;
                      v108 += 64;
                      uint64_t v109 = (long long *)((char *)v109 + v99);
                      v111 += v99;
                      v110 += 64;
                      if (v104 == v94) {
                        goto LABEL_129;
                      }
                    }
                  }
                }
                uint64_t v127 = 0;
                do
                {
                  uint64_t v128 = 0;
                  do
                  {
                    v97[v128] = *(unsigned char *)(v98 + v128);
                    ++v128;
                  }
                  while (v100 > v128);
                  ++v127;
                  v97 += 64;
                  v98 += v99;
                }
                while (v127 != v94);
              }
LABEL_129:
              uint64_t v129 = 0;
              unsigned __int8 v130 = v176;
              unsigned __int8 v131 = (char *)v177;
              int v132 = v184;
              int v133 = v185;
              a7 = v163;
              uint64_t result = v170;
              unint64_t v62 = v173;
              int v54 = v60;
              unint64_t v59 = v160;
              do
              {
                uint64_t v148 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)1,1u>::kSubblockPositions[v129 + 1];
                uint64_t v149 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)1,1u>::kSubblockPositions[v129];
                unsigned int v150 = (v132 - 8 * v149) & ~((v132 - 8 * (int)v149) >> 31);
                if (v150 >= 8) {
                  unsigned int v150 = 8;
                }
                unsigned int v151 = (v133 - 4 * v148) & ~((v133 - 4 * (int)v148) >> 31);
                if (v151 >= 4) {
                  unsigned int v151 = 4;
                }
                if (v150) {
                  BOOL v152 = v151 == 0;
                }
                else {
                  BOOL v152 = 1;
                }
                if (v152)
                {
                  char v147 = 0;
                }
                else
                {
                  unint64_t v134 = &v187[16 * v148 + 2 * v149];
                  int64x2_t v135 = v134[1];
                  int64x2_t v136 = v134[4];
                  int64x2_t v137 = v134[5];
                  int64x2_t v138 = vzip1q_s64(*v134, v136);
                  int64x2_t v139 = vzip2q_s64(*v134, v136);
                  int64x2_t v140 = vzip1q_s64(v135, v137);
                  int64x2_t v141 = vzip2q_s64(v135, v137);
                  int64x2_t v142 = v134[8];
                  int64x2_t v143 = v134[9];
                  v134 += 12;
                  int64x2_t v144 = v134[1];
                  int64x2_t v145 = vzip1q_s64(v142, *v134);
                  int64x2_t v146 = vzip2q_s64(v142, *v134);
                  *unsigned __int8 v130 = v138;
                  v130[1] = v139;
                  v130[2] = v145;
                  v130[3] = v146;
                  v130[4] = v140;
                  v130[5] = v141;
                  v130[6] = vzip1q_s64(v143, v144);
                  v130[7] = vzip2q_s64(v143, v144);
                  v130 += 8;
                  char v147 = 127;
                }
                *v131++ = v147;
                v129 += 2;
              }
              while (v129 != 16);
              goto LABEL_92;
            }
            unint64_t v59 = (int64x2_t *)__dst;
          }
          else
          {
            unint64_t v59 = v54;
            if (v55) {
              goto LABEL_76;
            }
          }
          uint64_t v63 = 0;
          uint64_t v64 = v59;
          do
          {
            uint64_t v82 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)1,1u>::kSubblockPositions[v63 + 1];
            uint64_t v83 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)1,1u>::kSubblockPositions[v63];
            unsigned int v84 = (v34 - 8 * v83) & ~((int)(v34 - 8 * v83) >> 31);
            if (v84 >= 8) {
              unsigned int v84 = 8;
            }
            unsigned int v85 = (v28 - 4 * v82) & ~((int)(v28 - 4 * v82) >> 31);
            if (v85 >= 4) {
              unsigned int v85 = 4;
            }
            if (v84) {
              BOOL v86 = v85 == 0;
            }
            else {
              BOOL v86 = 1;
            }
            if (v86)
            {
              char v81 = 0;
            }
            else
            {
              unint64_t v65 = (int64x2_t *)(v53 + 4 * a11 * v82 + 32 * v83);
              uint64_t v66 = (int64x2_t *)((char *)v65 + v25);
              int64x2_t v68 = *v65;
              int64x2_t v69 = v65[1];
              uint64_t v67 = (int64x2_t *)((char *)v65 + 2 * a11);
              int64x2_t v70 = v66[1];
              int64x2_t v71 = vzip1q_s64(v68, *v66);
              int64x2_t v72 = vzip2q_s64(v68, *v66);
              int64x2_t v73 = vzip1q_s64(v69, v70);
              int64x2_t v74 = vzip2q_s64(v69, v70);
              int64x2_t v76 = *v67;
              int64x2_t v77 = v67[1];
              uint64_t v75 = (int64x2_t *)((char *)v67 + v25);
              int64x2_t v78 = v75[1];
              int64x2_t v79 = vzip1q_s64(v76, *v75);
              int64x2_t v80 = vzip2q_s64(v76, *v75);
              *uint64_t v64 = v71;
              v64[1] = v72;
              v64[2] = v79;
              v64[3] = v80;
              v64[4] = v73;
              v64[5] = v74;
              v64[6] = vzip1q_s64(v77, v78);
              v64[7] = vzip2q_s64(v77, v78);
              v64 += 8;
              char v81 = 127;
            }
            *v52++ = v81;
            v63 += 2;
          }
          while (v63 != 16);
          a7 = v163;
          unint64_t v62 = v173;
LABEL_92:
          if (v174)
          {
            memcpy(v54, v59, 0x400uLL);
            uint64_t result = v170;
          }
          unint64_t v29 = v62;
        }
        while (v62 != (v164 >> 4) + 1);
        ++v17;
      }
      while (v17 != v153);
    }
  }
  return result;
}

uint64_t AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>,false,(AGXHardwareTextureMemoryOrder)3>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, uint64_t a7, unsigned int a8, int a9, int a10, uint64_t a11, char a12)
{
  uint64_t v142 = *MEMORY[0x263EF8340];
  size_t v105 = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v114 = a8;
  uint64_t v17 = a8 >> 4;
  unsigned int v104 = a8 + a10 - 1;
  unsigned int v18 = v104 >> 4;
  uint64_t v118 = a1;
  if (*(void *)(a1 + 168)) {
    int v19 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v19 = 0;
  }
  BOOL v20 = (v19 & 0xD00) == 0 || v19 == 768;
  int v21 = v19 & 0xE00;
  int v23 = !v20 && v21 != 1024;
  int v121 = v23;
  uint64_t result = a1;
  if (v17 <= v18)
  {
    unsigned int v109 = a7 + a9 - 1;
    if (a7 >> 4 <= v109 >> 4)
    {
      uint64_t v117 = (a5 - 1) >> 4;
      uint64_t v103 = (a6 - 1) >> 4;
      int v116 = ((a5 - 1) & 0xF) + 1;
      int v102 = ((a6 - 1) & 0xF) + 1;
      unint64_t v108 = a7;
      uint64_t v100 = v18 + 1;
      unint64_t v101 = (unint64_t)a7 >> 4;
      do
      {
        unsigned int v25 = (16 * v17) | 0xF;
        if (16 * (int)v17 <= v114) {
          unsigned int v26 = v114;
        }
        else {
          unsigned int v26 = 16 * v17;
        }
        if (v104 < v25) {
          unsigned int v25 = v104;
        }
        unsigned int v107 = v26 - 16 * v17;
        int v113 = v25 - v26 + 1;
        if (v17 == v103) {
          unsigned int v27 = v102;
        }
        else {
          unsigned int v27 = 16;
        }
        uint64_t v112 = a3 + (v26 - v114) * a11;
        unint64_t v28 = v101;
        unsigned int v115 = v27;
        do
        {
          unint64_t v29 = 16 * v28;
          unsigned int v30 = 16 * (v28 + 1) - 1;
          if (16 * (int)v28 <= a7) {
            int v31 = a7;
          }
          else {
            int v31 = 16 * v28;
          }
          if (v109 < v30) {
            unsigned int v30 = v109;
          }
          int v32 = v30 - v31 + 1;
          if (v28 == v117) {
            unsigned int v33 = v116;
          }
          else {
            unsigned int v33 = 16;
          }
          BOOL v34 = 1;
          if (16 * (int)v17 >= v114 && v29 >= v108)
          {
            int v35 = v116;
            if (v28 != v117) {
              int v35 = 16;
            }
            BOOL v34 = v32 != v35 || v113 != v27;
          }
          unsigned int v37 = *(_DWORD *)(result + 128) >> (*(unsigned char *)(result + 144) + a12);
          if (v37 <= 1) {
            unsigned int v37 = 1;
          }
          unsigned int v38 = v37 + 15;
          if (v38 < 0x20) {
            unsigned int v39 = 0;
          }
          else {
            unsigned int v39 = 32 - __clz(~(-1 << -(char)__clz((v38 >> 4) - 1)));
          }
          unsigned int v40 = *(_DWORD *)(result + 132) >> (*(unsigned char *)(result + 144) + a12);
          if (v40 <= 1) {
            unsigned int v40 = 1;
          }
          unsigned int v41 = v40 + 15;
          if (v41 < 0x20) {
            unsigned int v42 = 0;
          }
          else {
            unsigned int v42 = 32 - __clz(~(-1 << -(char)__clz((v41 >> 4) - 1)));
          }
          unint64_t v119 = v28 + 1;
          if (v42 | v39)
          {
            int v43 = 0;
            uint64_t v44 = 0;
            BOOL v45 = v39 != 0;
            BOOL v46 = v42 != 0;
            int v47 = 1;
            do
            {
              --v39;
              if (v45) {
                v44 |= (unint64_t)(v47 & v28) << v43++;
              }
              else {
                unsigned int v39 = 0;
              }
              --v42;
              if (v46) {
                v44 |= (unint64_t)(v47 & v17) << v43++;
              }
              else {
                unsigned int v42 = 0;
              }
              v47 *= 2;
              --v43;
              BOOL v46 = v42 != 0;
              BOOL v45 = v39 != 0;
            }
            while (v42 | v39);
          }
          else
          {
            uint64_t v44 = 0;
          }
          uint64_t v48 = v17 * v105 + 768 * v28;
          uint64_t v49 = a7;
          int v50 = v33 < 0x10 || v34;
          int v51 = (unsigned __int8 *)(a4 + 8 * v44);
          uint64_t v52 = v112 + 4 * (v31 - a7);
          uint64_t v53 = (void *)(a2 + v48);
          if (v27 < 0x10) {
            int v54 = 1;
          }
          else {
            int v54 = v50;
          }
          unint64_t v120 = v53;
          if (v121)
          {
            int v55 = __dst;
            if (!v54) {
              goto LABEL_77;
            }
            memcpy(__dst, v53, sizeof(__dst));
            LOBYTE(v27) = v115;
            uint64_t result = v118;
          }
          else
          {
            int v55 = v53;
            if (!v54)
            {
LABEL_77:
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::compressMacroblock(v52, a11, (unint64_t)v55, v51, v33, v27, *(_DWORD *)(*(void *)(result + 208) + 52));
              goto LABEL_78;
            }
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE15ELj1ELh0ELNS7_13SubblockOrderE1EL19AGXTextureFootprint1EEELb0EL29AGXHardwareTextureMemoryOrder3EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = result;
          uint64_t v123 = v55;
          unsigned __int8 v131 = v33;
          unsigned __int8 v132 = v27;
          unsigned int v127 = v107;
          unsigned int v128 = v31 - v29;
          unsigned int v124 = v51;
          uint64_t v125 = v52;
          uint64_t v126 = a11;
          unsigned int v129 = v113;
          unsigned int v130 = v32;
          if (v34)
          {
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(result + 8) + 7384), block);
LABEL_78:
            a7 = v49;
            unint64_t v56 = v119;
            goto LABEL_115;
          }
          int v57 = *(_DWORD *)(*(void *)(result + 208) + 52);
          unint64_t v58 = (unint64_t)&v55[AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::decompressSubblock(v134, 64, (unint64_t)v55, *v51, v57)];
          unint64_t v59 = v58
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::decompressSubblock(v135, 64, v58, v51[1], v57);
          unint64_t v60 = v59
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::decompressSubblock(v136, 64, v59, v51[2], v57);
          unint64_t v61 = v60
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::decompressSubblock(v137, 64, v60, v51[3], v57);
          unint64_t v62 = v61
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::decompressSubblock(v138, 64, v61, v51[4], v57);
          unint64_t v63 = v62
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::decompressSubblock(v139, 64, v62, v51[5], v57);
          uint64_t v64 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::decompressSubblock(v140, 64, v63, v51[6], v57);
          AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::decompressSubblock(v141, 64, v63 + v64, v51[7], v57);
          uint64_t v65 = v129;
          a7 = v49;
          unint64_t v56 = v119;
          if (v129 && v130)
          {
            unint64_t v66 = (unint64_t)v127 << 6;
            uint64_t v67 = 4 * v128;
            int64x2_t v68 = (char *)v134 + v66 + v67;
            uint64_t v69 = v125;
            uint64_t v70 = v126;
            unint64_t v71 = 4 * v130;
            if (v71 <= 1) {
              unint64_t v72 = 1;
            }
            else {
              unint64_t v72 = 4 * v130;
            }
            if (v72 > 7)
            {
              if (!v72 || (unint64_t v75 = (v72 - 1) >> 32) != 0)
              {
                uint64_t v98 = 0;
                do
                {
                  uint64_t v99 = 0;
                  do
                  {
                    v68[v99] = *(unsigned char *)(v69 + v99);
                    ++v99;
                  }
                  while (v71 > v99);
                  ++v98;
                  v68 += 64;
                  v69 += v70;
                }
                while (v98 != v65);
                goto LABEL_114;
              }
              int64x2_t v76 = (char *)v134 + v66 + v67;
              uint64_t v77 = v72 & 0x3FFFFFFE0;
              uint64_t v78 = v72 & 0x3FFFFFFF8;
              int64x2_t v79 = (char *)&v134[1] + v66 + v67;
              int64x2_t v80 = (long long *)(v125 + 16);
              char v81 = v68;
              uint64_t v82 = v125;
              while (2)
              {
                uint64_t v83 = (char *)(v69 + v70 * v75);
                unsigned int v84 = &v68[64 * v75];
                if ((unint64_t)(&v76[64 * v75] - v83) >= 0x20)
                {
                  if (v72 >= 0x20)
                  {
                    uint64_t v87 = v80;
                    uint64_t v88 = v79;
                    uint64_t v89 = v72 & 0x3FFFFFFE0;
                    do
                    {
                      long long v90 = *v87;
                      *(v88 - 1) = *(v87 - 1);
                      *uint64_t v88 = v90;
                      v88 += 2;
                      v87 += 2;
                      v89 -= 32;
                    }
                    while (v89);
                    if (v72 == v77) {
                      goto LABEL_93;
                    }
                    uint64_t v86 = v72 & 0x3FFFFFFE0;
                    if ((v72 & 0x18) == 0)
                    {
                      v83 += v77;
                      v84 += v77;
                      int v85 = v72 & 0xFFFFFFE0;
                      goto LABEL_107;
                    }
                  }
                  else
                  {
                    uint64_t v86 = 0;
                  }
                  v84 += v78;
                  unint64_t v91 = v86 - (v72 & 0x3FFFFFFF8);
                  uint64_t v92 = (uint64_t *)(v82 + v86);
                  uint64_t v93 = &v81[v86];
                  do
                  {
                    uint64_t v94 = *v92++;
                    *(void *)uint64_t v93 = v94;
                    v93 += 8;
                    v91 += 8;
                  }
                  while (v91);
                  if (v72 != v78)
                  {
                    v83 += v78;
                    int v85 = v72 & 0xFFFFFFF8;
                    goto LABEL_107;
                  }
                }
                else
                {
                  int v85 = 0;
LABEL_107:
                  unsigned int v95 = v85 + 1;
                  do
                  {
                    char v96 = *v83++;
                    *v84++ = v96;
                  }
                  while (v71 > v95++);
                }
LABEL_93:
                ++v75;
                v79 += 64;
                int64x2_t v80 = (long long *)((char *)v80 + v70);
                v82 += v70;
                v81 += 64;
                if (v75 == v65) {
                  goto LABEL_114;
                }
                continue;
              }
            }
            uint64_t v73 = 0;
            do
            {
              uint64_t v74 = 0;
              do
              {
                v68[v74] = *(unsigned char *)(v69 + v74);
                ++v74;
              }
              while (v71 > v74);
              ++v73;
              v68 += 64;
              v69 += v70;
            }
            while (v73 != v65);
          }
LABEL_114:
          AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::compressMacroblock((uint64_t)v134, 64, (unint64_t)v123, v124, v131, v132, *(_DWORD *)(*(void *)(v118 + 208) + 52));
LABEL_115:
          if (v121) {
            memcpy(v120, v55, 0x400uLL);
          }
          unint64_t v28 = v56;
          uint64_t result = v118;
          unsigned int v27 = v115;
        }
        while (v56 != (v109 >> 4) + 1);
        ++v17;
      }
      while (v17 != v100);
    }
  }
  return result;
}

uint64_t AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>,false,(AGXHardwareTextureMemoryOrder)3>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, uint64_t a7, unsigned int a8, int a9, int a10, uint64_t a11, char a12)
{
  uint64_t v142 = *MEMORY[0x263EF8340];
  size_t v105 = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v114 = a8;
  uint64_t v17 = a8 >> 4;
  unsigned int v104 = a8 + a10 - 1;
  unsigned int v18 = v104 >> 4;
  uint64_t v118 = a1;
  if (*(void *)(a1 + 168)) {
    int v19 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v19 = 0;
  }
  BOOL v20 = (v19 & 0xD00) == 0 || v19 == 768;
  int v21 = v19 & 0xE00;
  int v23 = !v20 && v21 != 1024;
  int v121 = v23;
  uint64_t result = a1;
  if (v17 <= v18)
  {
    unsigned int v109 = a7 + a9 - 1;
    if (a7 >> 4 <= v109 >> 4)
    {
      uint64_t v117 = (a5 - 1) >> 4;
      uint64_t v103 = (a6 - 1) >> 4;
      int v116 = ((a5 - 1) & 0xF) + 1;
      int v102 = ((a6 - 1) & 0xF) + 1;
      unint64_t v108 = a7;
      uint64_t v100 = v18 + 1;
      unint64_t v101 = (unint64_t)a7 >> 4;
      do
      {
        unsigned int v25 = (16 * v17) | 0xF;
        if (16 * (int)v17 <= v114) {
          unsigned int v26 = v114;
        }
        else {
          unsigned int v26 = 16 * v17;
        }
        if (v104 < v25) {
          unsigned int v25 = v104;
        }
        unsigned int v107 = v26 - 16 * v17;
        int v113 = v25 - v26 + 1;
        if (v17 == v103) {
          unsigned int v27 = v102;
        }
        else {
          unsigned int v27 = 16;
        }
        uint64_t v112 = a3 + (v26 - v114) * a11;
        unint64_t v28 = v101;
        unsigned int v115 = v27;
        do
        {
          unint64_t v29 = 16 * v28;
          unsigned int v30 = 16 * (v28 + 1) - 1;
          if (16 * (int)v28 <= a7) {
            int v31 = a7;
          }
          else {
            int v31 = 16 * v28;
          }
          if (v109 < v30) {
            unsigned int v30 = v109;
          }
          int v32 = v30 - v31 + 1;
          if (v28 == v117) {
            unsigned int v33 = v116;
          }
          else {
            unsigned int v33 = 16;
          }
          BOOL v34 = 1;
          if (16 * (int)v17 >= v114 && v29 >= v108)
          {
            int v35 = v116;
            if (v28 != v117) {
              int v35 = 16;
            }
            BOOL v34 = v32 != v35 || v113 != v27;
          }
          unsigned int v37 = *(_DWORD *)(result + 128) >> (*(unsigned char *)(result + 144) + a12);
          if (v37 <= 1) {
            unsigned int v37 = 1;
          }
          unsigned int v38 = v37 + 15;
          if (v38 < 0x20) {
            unsigned int v39 = 0;
          }
          else {
            unsigned int v39 = 32 - __clz(~(-1 << -(char)__clz((v38 >> 4) - 1)));
          }
          unsigned int v40 = *(_DWORD *)(result + 132) >> (*(unsigned char *)(result + 144) + a12);
          if (v40 <= 1) {
            unsigned int v40 = 1;
          }
          unsigned int v41 = v40 + 15;
          if (v41 < 0x20) {
            unsigned int v42 = 0;
          }
          else {
            unsigned int v42 = 32 - __clz(~(-1 << -(char)__clz((v41 >> 4) - 1)));
          }
          unint64_t v119 = v28 + 1;
          if (v42 | v39)
          {
            int v43 = 0;
            uint64_t v44 = 0;
            BOOL v45 = v39 != 0;
            BOOL v46 = v42 != 0;
            int v47 = 1;
            do
            {
              --v39;
              if (v45) {
                v44 |= (unint64_t)(v47 & v28) << v43++;
              }
              else {
                unsigned int v39 = 0;
              }
              --v42;
              if (v46) {
                v44 |= (unint64_t)(v47 & v17) << v43++;
              }
              else {
                unsigned int v42 = 0;
              }
              v47 *= 2;
              --v43;
              BOOL v46 = v42 != 0;
              BOOL v45 = v39 != 0;
            }
            while (v42 | v39);
          }
          else
          {
            uint64_t v44 = 0;
          }
          uint64_t v48 = v17 * v105 + 640 * v28;
          uint64_t v49 = a7;
          int v50 = v33 < 0x10 || v34;
          int v51 = (unsigned __int8 *)(a4 + 8 * v44);
          uint64_t v52 = v112 + 4 * (v31 - a7);
          uint64_t v53 = (void *)(a2 + v48);
          if (v27 < 0x10) {
            int v54 = 1;
          }
          else {
            int v54 = v50;
          }
          unint64_t v120 = v53;
          if (v121)
          {
            int v55 = __dst;
            if (!v54) {
              goto LABEL_77;
            }
            memcpy(__dst, v53, sizeof(__dst));
            LOBYTE(v27) = v115;
            uint64_t result = v118;
          }
          else
          {
            int v55 = v53;
            if (!v54)
            {
LABEL_77:
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::compressMacroblock(v52, a11, (uint64_t)v55, v51, v33, v27, *(_DWORD *)(*(void *)(result + 208) + 52));
              goto LABEL_78;
            }
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE15ELj1ELh0ELNS7_13SubblockOrderE1EL19AGXTextureFootprint2EEELb0EL29AGXHardwareTextureMemoryOrder3EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = result;
          uint64_t v123 = v55;
          unsigned __int8 v131 = v33;
          unsigned __int8 v132 = v27;
          unsigned int v127 = v107;
          unsigned int v128 = v31 - v29;
          unsigned int v124 = v51;
          uint64_t v125 = v52;
          uint64_t v126 = a11;
          unsigned int v129 = v113;
          unsigned int v130 = v32;
          if (v34)
          {
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(result + 8) + 7384), block);
LABEL_78:
            a7 = v49;
            unint64_t v56 = v119;
            goto LABEL_115;
          }
          int v57 = *(_DWORD *)(*(void *)(result + 208) + 52);
          unint64_t v58 = (unint64_t)&v55[AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressSubblock(v134, 64, (unint64_t)v55, *v51, v57)];
          unint64_t v59 = v58
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressSubblock(v135, 64, v58, v51[1], v57);
          unint64_t v60 = v59
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressSubblock(v136, 64, v59, v51[2], v57);
          unint64_t v61 = v60
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressSubblock(v137, 64, v60, v51[3], v57);
          unint64_t v62 = v61
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressSubblock(v138, 64, v61, v51[4], v57);
          unint64_t v63 = v62
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressSubblock(v139, 64, v62, v51[5], v57);
          uint64_t v64 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressSubblock(v140, 64, v63, v51[6], v57);
          AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressSubblock(v141, 64, v63 + v64, v51[7], v57);
          uint64_t v65 = v129;
          a7 = v49;
          unint64_t v56 = v119;
          if (v129 && v130)
          {
            unint64_t v66 = (unint64_t)v127 << 6;
            uint64_t v67 = 4 * v128;
            int64x2_t v68 = (char *)v134 + v66 + v67;
            uint64_t v69 = v125;
            uint64_t v70 = v126;
            unint64_t v71 = 4 * v130;
            if (v71 <= 1) {
              unint64_t v72 = 1;
            }
            else {
              unint64_t v72 = 4 * v130;
            }
            if (v72 > 7)
            {
              if (!v72 || (unint64_t v75 = (v72 - 1) >> 32) != 0)
              {
                uint64_t v98 = 0;
                do
                {
                  uint64_t v99 = 0;
                  do
                  {
                    v68[v99] = *(unsigned char *)(v69 + v99);
                    ++v99;
                  }
                  while (v71 > v99);
                  ++v98;
                  v68 += 64;
                  v69 += v70;
                }
                while (v98 != v65);
                goto LABEL_114;
              }
              int64x2_t v76 = (char *)v134 + v66 + v67;
              uint64_t v77 = v72 & 0x3FFFFFFE0;
              uint64_t v78 = v72 & 0x3FFFFFFF8;
              int64x2_t v79 = (char *)&v134[1] + v66 + v67;
              int64x2_t v80 = (long long *)(v125 + 16);
              char v81 = v68;
              uint64_t v82 = v125;
              while (2)
              {
                uint64_t v83 = (char *)(v69 + v70 * v75);
                unsigned int v84 = &v68[64 * v75];
                if ((unint64_t)(&v76[64 * v75] - v83) >= 0x20)
                {
                  if (v72 >= 0x20)
                  {
                    uint64_t v87 = v80;
                    uint64_t v88 = v79;
                    uint64_t v89 = v72 & 0x3FFFFFFE0;
                    do
                    {
                      long long v90 = *v87;
                      *(v88 - 1) = *(v87 - 1);
                      *uint64_t v88 = v90;
                      v88 += 2;
                      v87 += 2;
                      v89 -= 32;
                    }
                    while (v89);
                    if (v72 == v77) {
                      goto LABEL_93;
                    }
                    uint64_t v86 = v72 & 0x3FFFFFFE0;
                    if ((v72 & 0x18) == 0)
                    {
                      v83 += v77;
                      v84 += v77;
                      int v85 = v72 & 0xFFFFFFE0;
                      goto LABEL_107;
                    }
                  }
                  else
                  {
                    uint64_t v86 = 0;
                  }
                  v84 += v78;
                  unint64_t v91 = v86 - (v72 & 0x3FFFFFFF8);
                  uint64_t v92 = (uint64_t *)(v82 + v86);
                  uint64_t v93 = &v81[v86];
                  do
                  {
                    uint64_t v94 = *v92++;
                    *(void *)uint64_t v93 = v94;
                    v93 += 8;
                    v91 += 8;
                  }
                  while (v91);
                  if (v72 != v78)
                  {
                    v83 += v78;
                    int v85 = v72 & 0xFFFFFFF8;
                    goto LABEL_107;
                  }
                }
                else
                {
                  int v85 = 0;
LABEL_107:
                  unsigned int v95 = v85 + 1;
                  do
                  {
                    char v96 = *v83++;
                    *v84++ = v96;
                  }
                  while (v71 > v95++);
                }
LABEL_93:
                ++v75;
                v79 += 64;
                int64x2_t v80 = (long long *)((char *)v80 + v70);
                v82 += v70;
                v81 += 64;
                if (v75 == v65) {
                  goto LABEL_114;
                }
                continue;
              }
            }
            uint64_t v73 = 0;
            do
            {
              uint64_t v74 = 0;
              do
              {
                v68[v74] = *(unsigned char *)(v69 + v74);
                ++v74;
              }
              while (v71 > v74);
              ++v73;
              v68 += 64;
              v69 += v70;
            }
            while (v73 != v65);
          }
LABEL_114:
          AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::compressMacroblock((uint64_t)v134, 64, (uint64_t)v123, v124, v131, v132, *(_DWORD *)(*(void *)(v118 + 208) + 52));
LABEL_115:
          if (v121) {
            memcpy(v120, v55, 0x400uLL);
          }
          unint64_t v28 = v56;
          uint64_t result = v118;
          unsigned int v27 = v115;
        }
        while (v56 != (v109 >> 4) + 1);
        ++v17;
      }
      while (v17 != v100);
    }
  }
  return result;
}

uint64_t AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>,false,(AGXHardwareTextureMemoryOrder)3>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, uint64_t a7, unsigned int a8, int a9, int a10, uint64_t a11, char a12)
{
  uint64_t v142 = *MEMORY[0x263EF8340];
  size_t v105 = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v114 = a8;
  uint64_t v17 = a8 >> 4;
  unsigned int v104 = a8 + a10 - 1;
  unsigned int v18 = v104 >> 4;
  uint64_t v118 = a1;
  if (*(void *)(a1 + 168)) {
    int v19 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v19 = 0;
  }
  BOOL v20 = (v19 & 0xD00) == 0 || v19 == 768;
  int v21 = v19 & 0xE00;
  int v23 = !v20 && v21 != 1024;
  int v121 = v23;
  uint64_t result = a1;
  if (v17 <= v18)
  {
    unsigned int v109 = a7 + a9 - 1;
    if (a7 >> 4 <= v109 >> 4)
    {
      uint64_t v117 = (a5 - 1) >> 4;
      uint64_t v103 = (a6 - 1) >> 4;
      int v116 = ((a5 - 1) & 0xF) + 1;
      int v102 = ((a6 - 1) & 0xF) + 1;
      unint64_t v108 = a7;
      uint64_t v100 = v18 + 1;
      unint64_t v101 = (unint64_t)a7 >> 4;
      do
      {
        unsigned int v25 = (16 * v17) | 0xF;
        if (16 * (int)v17 <= v114) {
          unsigned int v26 = v114;
        }
        else {
          unsigned int v26 = 16 * v17;
        }
        if (v104 < v25) {
          unsigned int v25 = v104;
        }
        unsigned int v107 = v26 - 16 * v17;
        int v113 = v25 - v26 + 1;
        if (v17 == v103) {
          unsigned int v27 = v102;
        }
        else {
          unsigned int v27 = 16;
        }
        uint64_t v112 = a3 + (v26 - v114) * a11;
        unint64_t v28 = v101;
        unsigned int v115 = v27;
        do
        {
          unint64_t v29 = 16 * v28;
          unsigned int v30 = 16 * (v28 + 1) - 1;
          if (16 * (int)v28 <= a7) {
            int v31 = a7;
          }
          else {
            int v31 = 16 * v28;
          }
          if (v109 < v30) {
            unsigned int v30 = v109;
          }
          int v32 = v30 - v31 + 1;
          if (v28 == v117) {
            unsigned int v33 = v116;
          }
          else {
            unsigned int v33 = 16;
          }
          BOOL v34 = 1;
          if (16 * (int)v17 >= v114 && v29 >= v108)
          {
            int v35 = v116;
            if (v28 != v117) {
              int v35 = 16;
            }
            BOOL v34 = v32 != v35 || v113 != v27;
          }
          unsigned int v37 = *(_DWORD *)(result + 128) >> (*(unsigned char *)(result + 144) + a12);
          if (v37 <= 1) {
            unsigned int v37 = 1;
          }
          unsigned int v38 = v37 + 15;
          if (v38 < 0x20) {
            unsigned int v39 = 0;
          }
          else {
            unsigned int v39 = 32 - __clz(~(-1 << -(char)__clz((v38 >> 4) - 1)));
          }
          unsigned int v40 = *(_DWORD *)(result + 132) >> (*(unsigned char *)(result + 144) + a12);
          if (v40 <= 1) {
            unsigned int v40 = 1;
          }
          unsigned int v41 = v40 + 15;
          if (v41 < 0x20) {
            unsigned int v42 = 0;
          }
          else {
            unsigned int v42 = 32 - __clz(~(-1 << -(char)__clz((v41 >> 4) - 1)));
          }
          unint64_t v119 = v28 + 1;
          if (v42 | v39)
          {
            int v43 = 0;
            uint64_t v44 = 0;
            BOOL v45 = v39 != 0;
            BOOL v46 = v42 != 0;
            int v47 = 1;
            do
            {
              --v39;
              if (v45) {
                v44 |= (unint64_t)(v47 & v28) << v43++;
              }
              else {
                unsigned int v39 = 0;
              }
              --v42;
              if (v46) {
                v44 |= (unint64_t)(v47 & v17) << v43++;
              }
              else {
                unsigned int v42 = 0;
              }
              v47 *= 2;
              --v43;
              BOOL v46 = v42 != 0;
              BOOL v45 = v39 != 0;
            }
            while (v42 | v39);
          }
          else
          {
            uint64_t v44 = 0;
          }
          size_t v48 = v17 * v105 + (v28 << 9);
          uint64_t v49 = a7;
          int v50 = v33 < 0x10 || v34;
          int v51 = (unsigned __int8 *)(a4 + 8 * v44);
          uint64_t v52 = v112 + 4 * (v31 - a7);
          uint64_t v53 = (void *)(a2 + v48);
          if (v27 < 0x10) {
            int v54 = 1;
          }
          else {
            int v54 = v50;
          }
          unint64_t v120 = v53;
          if (v121)
          {
            int v55 = __dst;
            if (!v54) {
              goto LABEL_77;
            }
            memcpy(__dst, v53, sizeof(__dst));
            LOBYTE(v27) = v115;
            uint64_t result = v118;
          }
          else
          {
            int v55 = v53;
            if (!v54)
            {
LABEL_77:
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::compressMacroblock(v52, a11, (unint64_t)v55, v51, v33, v27, *(_DWORD *)(*(void *)(result + 208) + 52));
              goto LABEL_78;
            }
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE15ELj1ELh0ELNS7_13SubblockOrderE1EL19AGXTextureFootprint3EEELb0EL29AGXHardwareTextureMemoryOrder3EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = result;
          uint64_t v123 = v55;
          unsigned __int8 v131 = v33;
          unsigned __int8 v132 = v27;
          unsigned int v127 = v107;
          unsigned int v128 = v31 - v29;
          unsigned int v124 = v51;
          uint64_t v125 = v52;
          uint64_t v126 = a11;
          unsigned int v129 = v113;
          unsigned int v130 = v32;
          if (v34)
          {
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(result + 8) + 7384), block);
LABEL_78:
            a7 = v49;
            unint64_t v56 = v119;
            goto LABEL_115;
          }
          int v57 = *(_DWORD *)(*(void *)(result + 208) + 52);
          unint64_t v58 = (unint64_t)&v55[AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::decompressSubblock(v134, 64, (unint64_t)v55, *v51, v57)];
          unint64_t v59 = v58
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::decompressSubblock(v135, 64, v58, v51[1], v57);
          unint64_t v60 = v59
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::decompressSubblock(v136, 64, v59, v51[2], v57);
          unint64_t v61 = v60
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::decompressSubblock(v137, 64, v60, v51[3], v57);
          unint64_t v62 = v61
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::decompressSubblock(v138, 64, v61, v51[4], v57);
          unint64_t v63 = v62
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::decompressSubblock(v139, 64, v62, v51[5], v57);
          uint64_t v64 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::decompressSubblock(v140, 64, v63, v51[6], v57);
          AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::decompressSubblock(v141, 64, v63 + v64, v51[7], v57);
          uint64_t v65 = v129;
          a7 = v49;
          unint64_t v56 = v119;
          if (v129 && v130)
          {
            unint64_t v66 = (unint64_t)v127 << 6;
            uint64_t v67 = 4 * v128;
            int64x2_t v68 = (char *)v134 + v66 + v67;
            uint64_t v69 = v125;
            uint64_t v70 = v126;
            unint64_t v71 = 4 * v130;
            if (v71 <= 1) {
              unint64_t v72 = 1;
            }
            else {
              unint64_t v72 = 4 * v130;
            }
            if (v72 > 7)
            {
              if (!v72 || (unint64_t v75 = (v72 - 1) >> 32) != 0)
              {
                uint64_t v98 = 0;
                do
                {
                  uint64_t v99 = 0;
                  do
                  {
                    v68[v99] = *(unsigned char *)(v69 + v99);
                    ++v99;
                  }
                  while (v71 > v99);
                  ++v98;
                  v68 += 64;
                  v69 += v70;
                }
                while (v98 != v65);
                goto LABEL_114;
              }
              int64x2_t v76 = (char *)v134 + v66 + v67;
              uint64_t v77 = v72 & 0x3FFFFFFE0;
              uint64_t v78 = v72 & 0x3FFFFFFF8;
              int64x2_t v79 = (char *)&v134[1] + v66 + v67;
              int64x2_t v80 = (long long *)(v125 + 16);
              char v81 = v68;
              uint64_t v82 = v125;
              while (2)
              {
                uint64_t v83 = (char *)(v69 + v70 * v75);
                unsigned int v84 = &v68[64 * v75];
                if ((unint64_t)(&v76[64 * v75] - v83) >= 0x20)
                {
                  if (v72 >= 0x20)
                  {
                    uint64_t v87 = v80;
                    uint64_t v88 = v79;
                    uint64_t v89 = v72 & 0x3FFFFFFE0;
                    do
                    {
                      long long v90 = *v87;
                      *(v88 - 1) = *(v87 - 1);
                      *uint64_t v88 = v90;
                      v88 += 2;
                      v87 += 2;
                      v89 -= 32;
                    }
                    while (v89);
                    if (v72 == v77) {
                      goto LABEL_93;
                    }
                    uint64_t v86 = v72 & 0x3FFFFFFE0;
                    if ((v72 & 0x18) == 0)
                    {
                      v83 += v77;
                      v84 += v77;
                      int v85 = v72 & 0xFFFFFFE0;
                      goto LABEL_107;
                    }
                  }
                  else
                  {
                    uint64_t v86 = 0;
                  }
                  v84 += v78;
                  unint64_t v91 = v86 - (v72 & 0x3FFFFFFF8);
                  uint64_t v92 = (uint64_t *)(v82 + v86);
                  uint64_t v93 = &v81[v86];
                  do
                  {
                    uint64_t v94 = *v92++;
                    *(void *)uint64_t v93 = v94;
                    v93 += 8;
                    v91 += 8;
                  }
                  while (v91);
                  if (v72 != v78)
                  {
                    v83 += v78;
                    int v85 = v72 & 0xFFFFFFF8;
                    goto LABEL_107;
                  }
                }
                else
                {
                  int v85 = 0;
LABEL_107:
                  unsigned int v95 = v85 + 1;
                  do
                  {
                    char v96 = *v83++;
                    *v84++ = v96;
                  }
                  while (v71 > v95++);
                }
LABEL_93:
                ++v75;
                v79 += 64;
                int64x2_t v80 = (long long *)((char *)v80 + v70);
                v82 += v70;
                v81 += 64;
                if (v75 == v65) {
                  goto LABEL_114;
                }
                continue;
              }
            }
            uint64_t v73 = 0;
            do
            {
              uint64_t v74 = 0;
              do
              {
                v68[v74] = *(unsigned char *)(v69 + v74);
                ++v74;
              }
              while (v71 > v74);
              ++v73;
              v68 += 64;
              v69 += v70;
            }
            while (v73 != v65);
          }
LABEL_114:
          AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::compressMacroblock((uint64_t)v134, 64, (unint64_t)v123, v124, v131, v132, *(_DWORD *)(*(void *)(v118 + 208) + 52));
LABEL_115:
          if (v121) {
            memcpy(v120, v55, 0x400uLL);
          }
          unint64_t v28 = v56;
          uint64_t result = v118;
          unsigned int v27 = v115;
        }
        while (v56 != (v109 >> 4) + 1);
        ++v17;
      }
      while (v17 != v100);
    }
  }
  return result;
}

uint64_t AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)3>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, uint64_t a7, unsigned int a8, int a9, int a10, uint64_t a11, char a12)
{
  uint64_t v141 = *MEMORY[0x263EF8340];
  size_t v104 = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v113 = a8;
  uint64_t v17 = a8 >> 4;
  unsigned int v103 = a8 + a10 - 1;
  unsigned int v18 = v103 >> 4;
  uint64_t v114 = a1;
  if (*(void *)(a1 + 168)) {
    int v19 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v19 = 0;
  }
  BOOL v20 = (v19 & 0xD00) == 0 || v19 == 768;
  int v21 = v19 & 0xE00;
  int v23 = !v20 && v21 != 1024;
  int v120 = v23;
  uint64_t result = a1;
  if (v17 <= v18)
  {
    unsigned int v108 = a7 + a9 - 1;
    if (a7 >> 4 <= v108 >> 4)
    {
      uint64_t v117 = (a5 - 1) >> 4;
      uint64_t v102 = (a6 - 1) >> 4;
      int v116 = ((a5 - 1) & 0xF) + 1;
      int v101 = ((a6 - 1) & 0xF) + 1;
      unint64_t v107 = a7;
      uint64_t v99 = v18 + 1;
      unint64_t v100 = (unint64_t)a7 >> 4;
      do
      {
        unsigned int v25 = (16 * v17) | 0xF;
        if (16 * (int)v17 <= v113) {
          unsigned int v26 = v113;
        }
        else {
          unsigned int v26 = 16 * v17;
        }
        if (v103 < v25) {
          unsigned int v25 = v103;
        }
        unsigned int v106 = v26 - 16 * v17;
        int v112 = v25 - v26 + 1;
        if (v17 == v102) {
          unsigned int v27 = v101;
        }
        else {
          unsigned int v27 = 16;
        }
        uint64_t v111 = a3 + (v26 - v113) * a11;
        unint64_t v28 = v100;
        unsigned int v115 = v27;
        do
        {
          unint64_t v29 = 16 * v28;
          unsigned int v30 = 16 * (v28 + 1) - 1;
          if (16 * (int)v28 <= a7) {
            int v31 = a7;
          }
          else {
            int v31 = 16 * v28;
          }
          if (v108 < v30) {
            unsigned int v30 = v108;
          }
          int v32 = v30 - v31 + 1;
          if (v28 == v117) {
            unsigned int v33 = v116;
          }
          else {
            unsigned int v33 = 16;
          }
          BOOL v34 = 1;
          if (16 * (int)v17 >= v113 && v29 >= v107)
          {
            int v35 = v116;
            if (v28 != v117) {
              int v35 = 16;
            }
            BOOL v34 = v32 != v35 || v112 != v27;
          }
          unsigned int v37 = *(_DWORD *)(result + 128) >> (*(unsigned char *)(result + 144) + a12);
          if (v37 <= 1) {
            unsigned int v37 = 1;
          }
          unsigned int v38 = v37 + 15;
          if (v38 < 0x20) {
            unsigned int v39 = 0;
          }
          else {
            unsigned int v39 = 32 - __clz(~(-1 << -(char)__clz((v38 >> 4) - 1)));
          }
          unsigned int v40 = *(_DWORD *)(result + 132) >> (*(unsigned char *)(result + 144) + a12);
          if (v40 <= 1) {
            unsigned int v40 = 1;
          }
          unsigned int v41 = v40 + 15;
          if (v41 < 0x20) {
            unsigned int v42 = 0;
          }
          else {
            unsigned int v42 = 32 - __clz(~(-1 << -(char)__clz((v41 >> 4) - 1)));
          }
          unint64_t v118 = v28 + 1;
          if (v42 | v39)
          {
            int v43 = 0;
            uint64_t v44 = 0;
            BOOL v45 = v39 != 0;
            BOOL v46 = v42 != 0;
            int v47 = 1;
            do
            {
              --v39;
              if (v45) {
                v44 |= (unint64_t)(v47 & v28) << v43++;
              }
              else {
                unsigned int v39 = 0;
              }
              --v42;
              if (v46) {
                v44 |= (unint64_t)(v47 & v17) << v43++;
              }
              else {
                unsigned int v42 = 0;
              }
              v47 *= 2;
              --v43;
              BOOL v46 = v42 != 0;
              BOOL v45 = v39 != 0;
            }
            while (v42 | v39);
          }
          else
          {
            uint64_t v44 = 0;
          }
          size_t v48 = v17 * v104 + (v28 << 10);
          uint64_t v49 = a7;
          int v50 = v33 < 0x10 || v34;
          int v51 = (char *)(a4 + 8 * v44);
          unint64_t v52 = v111 + 4 * (v31 - a7);
          uint64_t v53 = (int64x2_t *)(a2 + v48);
          if (v27 < 0x10) {
            int v54 = 1;
          }
          else {
            int v54 = v50;
          }
          unint64_t v119 = v53;
          if (v120)
          {
            int v55 = (int64x2_t *)__dst;
            if (!v54) {
              goto LABEL_77;
            }
            memcpy(__dst, v53, sizeof(__dst));
            LOBYTE(v27) = v115;
            uint64_t result = v114;
          }
          else
          {
            int v55 = v53;
            if (!v54)
            {
LABEL_77:
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::compressMacroblock(v52, a11, (unint64_t)v55, v51, v33, v27);
              goto LABEL_78;
            }
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE13ELj1ELh0ELNS7_13SubblockOrderE1EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder3EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = result;
          char v122 = v55;
          unsigned __int8 v130 = v33;
          unsigned __int8 v131 = v27;
          unsigned int v126 = v106;
          unsigned int v127 = v31 - v29;
          uint64_t v123 = v51;
          unint64_t v124 = v52;
          uint64_t v125 = a11;
          unsigned int v128 = v112;
          unsigned int v129 = v32;
          if (v34)
          {
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(result + 8) + 7384), block);
LABEL_78:
            a7 = v49;
            unint64_t v56 = v118;
            goto LABEL_115;
          }
          int v57 = (int64x2_t *)((char *)v55
                            + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v133, 64, v55, *v51));
          unint64_t v58 = (int64x2_t *)((char *)v57
                            + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v134, 64, v57, v51[1]));
          unint64_t v59 = (int64x2_t *)((char *)v58
                            + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v135, 64, v58, v51[2]));
          unint64_t v60 = (int64x2_t *)((char *)v59
                            + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v136, 64, v59, v51[3]));
          unint64_t v61 = (int64x2_t *)((char *)v60
                            + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v137, 64, v60, v51[4]));
          unint64_t v62 = (int64x2_t *)((char *)v61
                            + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v138, 64, v61, v51[5]));
          uint64_t v63 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v139, 64, v62, v51[6]);
          AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v140, 64, (int64x2_t *)((char *)v62 + v63), v51[7]);
          uint64_t v64 = v128;
          a7 = v49;
          unint64_t v56 = v118;
          if (v128 && v129)
          {
            unint64_t v65 = (unint64_t)v126 << 6;
            uint64_t v66 = 4 * v127;
            uint64_t v67 = &v133[0].i8[v65 + v66];
            unint64_t v68 = v124;
            uint64_t v69 = v125;
            unint64_t v70 = 4 * v129;
            if (v70 <= 1) {
              unint64_t v71 = 1;
            }
            else {
              unint64_t v71 = 4 * v129;
            }
            if (v71 > 7)
            {
              if (!v71 || (unint64_t v74 = (v71 - 1) >> 32) != 0)
              {
                uint64_t v97 = 0;
                do
                {
                  uint64_t v98 = 0;
                  do
                  {
                    v67[v98] = *(unsigned char *)(v68 + v98);
                    ++v98;
                  }
                  while (v70 > v98);
                  ++v97;
                  v67 += 64;
                  v68 += v69;
                }
                while (v97 != v64);
                goto LABEL_114;
              }
              unint64_t v75 = &v133[0].i8[v65 + v66];
              uint64_t v76 = v71 & 0x3FFFFFFE0;
              uint64_t v77 = v71 & 0x3FFFFFFF8;
              uint64_t v78 = &v133[1].i8[v65 + v66];
              int64x2_t v79 = (long long *)(v124 + 16);
              int64x2_t v80 = v67;
              unint64_t v81 = v124;
              while (2)
              {
                uint64_t v82 = (char *)(v68 + v69 * v74);
                uint64_t v83 = &v67[64 * v74];
                if ((unint64_t)(&v75[64 * v74] - v82) >= 0x20)
                {
                  if (v71 >= 0x20)
                  {
                    uint64_t v86 = v79;
                    uint64_t v87 = v78;
                    uint64_t v88 = v71 & 0x3FFFFFFE0;
                    do
                    {
                      long long v89 = *v86;
                      *((_OWORD *)v87 - 1) = *(v86 - 1);
                      *(_OWORD *)uint64_t v87 = v89;
                      v87 += 32;
                      v86 += 2;
                      v88 -= 32;
                    }
                    while (v88);
                    if (v71 == v76) {
                      goto LABEL_93;
                    }
                    uint64_t v85 = v71 & 0x3FFFFFFE0;
                    if ((v71 & 0x18) == 0)
                    {
                      v82 += v76;
                      v83 += v76;
                      int v84 = v71 & 0xFFFFFFE0;
                      goto LABEL_107;
                    }
                  }
                  else
                  {
                    uint64_t v85 = 0;
                  }
                  v83 += v77;
                  unint64_t v90 = v85 - (v71 & 0x3FFFFFFF8);
                  unint64_t v91 = (uint64_t *)(v81 + v85);
                  uint64_t v92 = &v80[v85];
                  do
                  {
                    uint64_t v93 = *v91++;
                    *(void *)uint64_t v92 = v93;
                    v92 += 8;
                    v90 += 8;
                  }
                  while (v90);
                  if (v71 != v77)
                  {
                    v82 += v77;
                    int v84 = v71 & 0xFFFFFFF8;
                    goto LABEL_107;
                  }
                }
                else
                {
                  int v84 = 0;
LABEL_107:
                  unsigned int v94 = v84 + 1;
                  do
                  {
                    char v95 = *v82++;
                    *v83++ = v95;
                  }
                  while (v70 > v94++);
                }
LABEL_93:
                ++v74;
                v78 += 64;
                int64x2_t v79 = (long long *)((char *)v79 + v69);
                v81 += v69;
                v80 += 64;
                if (v74 == v64) {
                  goto LABEL_114;
                }
                continue;
              }
            }
            uint64_t v72 = 0;
            do
            {
              uint64_t v73 = 0;
              do
              {
                v67[v73] = *(unsigned char *)(v68 + v73);
                ++v73;
              }
              while (v70 > v73);
              ++v72;
              v67 += 64;
              v68 += v69;
            }
            while (v72 != v64);
          }
LABEL_114:
          AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v133, 64, (unint64_t)v122, v123, v130, v131);
LABEL_115:
          if (v120) {
            memcpy(v119, v55, 0x400uLL);
          }
          unint64_t v28 = v56;
          uint64_t result = v114;
          unsigned int v27 = v115;
        }
        while (v56 != (v108 >> 4) + 1);
        ++v17;
      }
      while (v17 != v99);
    }
  }
  return result;
}

uint64_t AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)3>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, char a12)
{
  uint64_t v195 = *MEMORY[0x263EF8340];
  size_t v158 = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v169 = a8;
  uint64_t v17 = a8 >> 4;
  unsigned int v157 = a8 + a10 - 1;
  unsigned int v18 = v157 >> 4;
  uint64_t v170 = a1;
  if (*(void *)(a1 + 168)) {
    int v19 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v19 = 0;
  }
  BOOL v20 = (v19 & 0xD00) == 0 || v19 == 768;
  int v21 = v19 & 0xE00;
  int v23 = !v20 && v21 != 1024;
  int v174 = v23;
  uint64_t result = a1;
  if (v17 <= v18)
  {
    unsigned int v164 = a7 + a9 - 1;
    if (a7 >> 4 <= v164 >> 4)
    {
      uint64_t v25 = a11;
      uint64_t v172 = (a5 - 1) >> 4;
      uint64_t v156 = (a6 - 1) >> 4;
      int v171 = ((a5 - 1) & 0xF) + 1;
      int v155 = ((a6 - 1) & 0xF) + 1;
      unint64_t v162 = a7;
      uint64_t v153 = v18 + 1;
      unint64_t v154 = (unint64_t)a7 >> 4;
      unsigned int v163 = a7;
      do
      {
        unsigned int v26 = (16 * v17) | 0xF;
        if (16 * (int)v17 <= v169) {
          unsigned int v27 = v169;
        }
        else {
          unsigned int v27 = 16 * v17;
        }
        if (v157 < v26) {
          unsigned int v26 = v157;
        }
        unsigned int v161 = v27 - 16 * v17;
        int v168 = v26 - v27 + 1;
        if (v17 == v156) {
          unsigned int v28 = v155;
        }
        else {
          unsigned int v28 = 16;
        }
        uint64_t v167 = a3 + (v27 - v169) * v25;
        unint64_t v29 = v154;
        do
        {
          unint64_t v30 = 16 * v29;
          unint64_t v173 = v29 + 1;
          unsigned int v31 = 16 * (v29 + 1) - 1;
          if (16 * (int)v29 <= a7) {
            unsigned int v32 = a7;
          }
          else {
            unsigned int v32 = 16 * v29;
          }
          if (v164 < v31) {
            unsigned int v31 = v164;
          }
          int v33 = v31 - v32 + 1;
          if (v29 == v172) {
            unsigned int v34 = v171;
          }
          else {
            unsigned int v34 = 16;
          }
          BOOL v35 = 1;
          if (16 * (int)v17 >= v169 && v30 >= v162)
          {
            int v36 = v171;
            if (v29 != v172) {
              int v36 = 16;
            }
            BOOL v35 = v33 != v36 || v168 != v28;
          }
          unsigned int v38 = *(_DWORD *)(result + 128) >> (*(unsigned char *)(result + 144) + a12);
          if (v38 <= 1) {
            unsigned int v38 = 1;
          }
          unsigned int v39 = v38 + 15;
          if (v39 < 0x20) {
            unsigned int v40 = 0;
          }
          else {
            unsigned int v40 = 32 - __clz(~(-1 << -(char)__clz((v39 >> 4) - 1)));
          }
          unsigned int v41 = *(_DWORD *)(result + 132) >> (*(unsigned char *)(result + 144) + a12);
          if (v41 <= 1) {
            unsigned int v41 = 1;
          }
          unsigned int v42 = v41 + 15;
          if (v42 < 0x20)
          {
            unsigned int v43 = 0;
            if (!v40)
            {
LABEL_65:
              uint64_t v45 = 0;
              goto LABEL_66;
            }
          }
          else
          {
            unsigned int v43 = 32 - __clz(~(-1 << -(char)__clz((v42 >> 4) - 1)));
            if (!(v43 | v40)) {
              goto LABEL_65;
            }
          }
          int v44 = 0;
          uint64_t v45 = 0;
          BOOL v46 = v40 != 0;
          BOOL v47 = v43 != 0;
          int v48 = 1;
          do
          {
            --v40;
            if (v46) {
              v45 |= (unint64_t)(v48 & v29) << v44++;
            }
            else {
              unsigned int v40 = 0;
            }
            --v43;
            if (v47) {
              v45 |= (unint64_t)(v48 & v17) << v44++;
            }
            else {
              unsigned int v43 = 0;
            }
            v48 *= 2;
            --v44;
            BOOL v47 = v43 != 0;
            BOOL v46 = v40 != 0;
          }
          while (v43 | v40);
LABEL_66:
          size_t v49 = v17 * v158 + (v29 << 10);
          unsigned int v50 = v32 - a7;
          int v51 = v34 < 0x10 || v35;
          unint64_t v52 = (unsigned __int8 *)(a4 + 8 * v45);
          uint64_t v53 = v167 + 4 * v50;
          int v54 = (int64x2_t *)(a2 + v49);
          if (v28 < 0x10) {
            int v55 = 1;
          }
          else {
            int v55 = v51;
          }
          if (v174)
          {
            if (v55)
            {
              unint64_t v56 = v54;
              int v57 = v33;
              BOOL v58 = v35;
              memcpy(__dst, v54, sizeof(__dst));
              BOOL v35 = v58;
              uint64_t v25 = a11;
              int v33 = v57;
              unint64_t v59 = (int64x2_t *)__dst;
              int v54 = v56;
              uint64_t result = v170;
LABEL_76:
              unint64_t v60 = v54;
              block[0] = MEMORY[0x263EF8330];
              block[1] = 3221225472;
              block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE13ELj1ELh1ELNS7_13SubblockOrderE1EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder3EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
              block[3] = &__block_descriptor_90_e5_v8__0l;
              block[4] = result;
              unsigned int v176 = v59;
              unsigned __int8 v184 = v34;
              unsigned __int8 v185 = v28;
              unsigned int v180 = v161;
              unsigned int v181 = v32 - v30;
              size_t v177 = v52;
              uint64_t v178 = v53;
              uint64_t v179 = v25;
              unsigned int v182 = v168;
              unsigned int v183 = v33;
              if (v35)
              {
                unint64_t v61 = v59;
                dispatch_sync(*(dispatch_queue_t *)(*(void *)(result + 8) + 7384), block);
                unint64_t v59 = v61;
                uint64_t result = v170;
                a7 = v163;
                unint64_t v62 = v173;
                int v54 = v60;
                goto LABEL_92;
              }
              uint64_t v160 = v59;
              uint64_t v87 = (int64x2_t *)((char *)v59
                                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v187, 64, v59, *v52));
              uint64_t v88 = (int64x2_t *)((char *)v87
                                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v188, 64, v87, v52[1]));
              long long v89 = (int64x2_t *)((char *)v88
                                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v189, 64, v88, v52[2]));
              unint64_t v90 = (int64x2_t *)((char *)v89
                                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v190, 64, v89, v52[3]));
              unint64_t v91 = (int64x2_t *)((char *)v90
                                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v191, 64, v90, v52[4]));
              uint64_t v92 = (int64x2_t *)((char *)v91
                                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v192, 64, v91, v52[5]));
              uint64_t v93 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v193, 64, v92, v52[6]);
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v194, 64, (int64x2_t *)((char *)v92 + v93), v52[7]);
              uint64_t v94 = v182;
              if (v182 && v183)
              {
                unint64_t v95 = (unint64_t)v180 << 6;
                uint64_t v96 = 4 * v181;
                uint64_t v97 = &v187[0].i8[v95 + v96];
                uint64_t v98 = v178;
                uint64_t v99 = v179;
                unint64_t v100 = 4 * v183;
                if (v100 <= 1) {
                  unint64_t v101 = 1;
                }
                else {
                  unint64_t v101 = 4 * v183;
                }
                if (v101 <= 7)
                {
                  uint64_t v102 = 0;
                  do
                  {
                    uint64_t v103 = 0;
                    do
                    {
                      v97[v103] = *(unsigned char *)(v98 + v103);
                      ++v103;
                    }
                    while (v100 > v103);
                    ++v102;
                    v97 += 64;
                    v98 += v99;
                  }
                  while (v102 != v94);
                  goto LABEL_129;
                }
                if (v101)
                {
                  unint64_t v104 = (v101 - 1) >> 32;
                  if (!v104)
                  {
                    size_t v105 = &v187[0].i8[v95 + v96];
                    uint64_t v106 = v101 & 0x3FFFFFFE0;
                    uint64_t v107 = v101 & 0x3FFFFFFF8;
                    unsigned int v108 = &v187[1].i8[v95 + v96];
                    unsigned int v109 = (long long *)(v178 + 16);
                    int32x4_t v110 = v97;
                    uint64_t v111 = v178;
                    while (1)
                    {
                      int v112 = (char *)(v98 + v99 * v104);
                      unsigned int v113 = &v97[64 * v104];
                      if ((unint64_t)(&v105[64 * v104] - v112) < 0x20)
                      {
                        int v114 = 0;
                        goto LABEL_122;
                      }
                      if (v101 >= 0x20)
                      {
                        int v116 = v109;
                        uint64_t v117 = v108;
                        uint64_t v118 = v101 & 0x3FFFFFFE0;
                        do
                        {
                          long long v119 = *v116;
                          *((_OWORD *)v117 - 1) = *(v116 - 1);
                          *(_OWORD *)uint64_t v117 = v119;
                          v117 += 32;
                          v116 += 2;
                          v118 -= 32;
                        }
                        while (v118);
                        if (v101 == v106) {
                          goto LABEL_108;
                        }
                        uint64_t v115 = v101 & 0x3FFFFFFE0;
                        if ((v101 & 0x18) == 0)
                        {
                          v112 += v106;
                          v113 += v106;
                          int v114 = v101 & 0xFFFFFFE0;
                          goto LABEL_122;
                        }
                      }
                      else
                      {
                        uint64_t v115 = 0;
                      }
                      v113 += v107;
                      unint64_t v120 = v115 - (v101 & 0x3FFFFFFF8);
                      int v121 = (uint64_t *)(v111 + v115);
                      char v122 = &v110[v115];
                      do
                      {
                        uint64_t v123 = *v121++;
                        *(void *)char v122 = v123;
                        v122 += 8;
                        v120 += 8;
                      }
                      while (v120);
                      if (v101 == v107) {
                        goto LABEL_108;
                      }
                      v112 += v107;
                      int v114 = v101 & 0xFFFFFFF8;
LABEL_122:
                      unsigned int v124 = v114 + 1;
                      do
                      {
                        char v125 = *v112++;
                        *v113++ = v125;
                      }
                      while (v100 > v124++);
LABEL_108:
                      ++v104;
                      v108 += 64;
                      unsigned int v109 = (long long *)((char *)v109 + v99);
                      v111 += v99;
                      v110 += 64;
                      if (v104 == v94) {
                        goto LABEL_129;
                      }
                    }
                  }
                }
                uint64_t v127 = 0;
                do
                {
                  uint64_t v128 = 0;
                  do
                  {
                    v97[v128] = *(unsigned char *)(v98 + v128);
                    ++v128;
                  }
                  while (v100 > v128);
                  ++v127;
                  v97 += 64;
                  v98 += v99;
                }
                while (v127 != v94);
              }
LABEL_129:
              uint64_t v129 = 0;
              unsigned __int8 v130 = v176;
              unsigned __int8 v131 = (char *)v177;
              int v132 = v184;
              int v133 = v185;
              a7 = v163;
              uint64_t result = v170;
              unint64_t v62 = v173;
              int v54 = v60;
              unint64_t v59 = v160;
              do
              {
                uint64_t v148 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)1,1u>::kSubblockPositions[v129 + 1];
                uint64_t v149 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)1,1u>::kSubblockPositions[v129];
                unsigned int v150 = (v132 - 8 * v149) & ~((v132 - 8 * (int)v149) >> 31);
                if (v150 >= 8) {
                  unsigned int v150 = 8;
                }
                unsigned int v151 = (v133 - 4 * v148) & ~((v133 - 4 * (int)v148) >> 31);
                if (v151 >= 4) {
                  unsigned int v151 = 4;
                }
                if (v150) {
                  BOOL v152 = v151 == 0;
                }
                else {
                  BOOL v152 = 1;
                }
                if (v152)
                {
                  char v147 = 0;
                }
                else
                {
                  unint64_t v134 = &v187[16 * v148 + 2 * v149];
                  int64x2_t v135 = v134[1];
                  int64x2_t v136 = v134[4];
                  int64x2_t v137 = v134[5];
                  int64x2_t v138 = vzip1q_s64(*v134, v136);
                  int64x2_t v139 = vzip2q_s64(*v134, v136);
                  int64x2_t v140 = vzip1q_s64(v135, v137);
                  int64x2_t v141 = vzip2q_s64(v135, v137);
                  int64x2_t v142 = v134[8];
                  int64x2_t v143 = v134[9];
                  v134 += 12;
                  int64x2_t v144 = v134[1];
                  int64x2_t v145 = vzip1q_s64(v142, *v134);
                  int64x2_t v146 = vzip2q_s64(v142, *v134);
                  *unsigned __int8 v130 = v138;
                  v130[1] = v139;
                  v130[2] = v145;
                  v130[3] = v146;
                  v130[4] = v140;
                  v130[5] = v141;
                  v130[6] = vzip1q_s64(v143, v144);
                  v130[7] = vzip2q_s64(v143, v144);
                  v130 += 8;
                  char v147 = 127;
                }
                *v131++ = v147;
                v129 += 2;
              }
              while (v129 != 16);
              goto LABEL_92;
            }
            unint64_t v59 = (int64x2_t *)__dst;
          }
          else
          {
            unint64_t v59 = v54;
            if (v55) {
              goto LABEL_76;
            }
          }
          uint64_t v63 = 0;
          uint64_t v64 = v59;
          do
          {
            uint64_t v82 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)1,1u>::kSubblockPositions[v63 + 1];
            uint64_t v83 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)1,1u>::kSubblockPositions[v63];
            unsigned int v84 = (v34 - 8 * v83) & ~((int)(v34 - 8 * v83) >> 31);
            if (v84 >= 8) {
              unsigned int v84 = 8;
            }
            unsigned int v85 = (v28 - 4 * v82) & ~((int)(v28 - 4 * v82) >> 31);
            if (v85 >= 4) {
              unsigned int v85 = 4;
            }
            if (v84) {
              BOOL v86 = v85 == 0;
            }
            else {
              BOOL v86 = 1;
            }
            if (v86)
            {
              char v81 = 0;
            }
            else
            {
              unint64_t v65 = (int64x2_t *)(v53 + 4 * a11 * v82 + 32 * v83);
              uint64_t v66 = (int64x2_t *)((char *)v65 + v25);
              int64x2_t v68 = *v65;
              int64x2_t v69 = v65[1];
              uint64_t v67 = (int64x2_t *)((char *)v65 + 2 * a11);
              int64x2_t v70 = v66[1];
              int64x2_t v71 = vzip1q_s64(v68, *v66);
              int64x2_t v72 = vzip2q_s64(v68, *v66);
              int64x2_t v73 = vzip1q_s64(v69, v70);
              int64x2_t v74 = vzip2q_s64(v69, v70);
              int64x2_t v76 = *v67;
              int64x2_t v77 = v67[1];
              unint64_t v75 = (int64x2_t *)((char *)v67 + v25);
              int64x2_t v78 = v75[1];
              int64x2_t v79 = vzip1q_s64(v76, *v75);
              int64x2_t v80 = vzip2q_s64(v76, *v75);
              *uint64_t v64 = v71;
              v64[1] = v72;
              v64[2] = v79;
              v64[3] = v80;
              v64[4] = v73;
              v64[5] = v74;
              v64[6] = vzip1q_s64(v77, v78);
              v64[7] = vzip2q_s64(v77, v78);
              v64 += 8;
              char v81 = 127;
            }
            *v52++ = v81;
            v63 += 2;
          }
          while (v63 != 16);
          a7 = v163;
          unint64_t v62 = v173;
LABEL_92:
          if (v174)
          {
            memcpy(v54, v59, 0x400uLL);
            uint64_t result = v170;
          }
          unint64_t v29 = v62;
        }
        while (v62 != (v164 >> 4) + 1);
        ++v17;
      }
      while (v17 != v153);
    }
  }
  return result;
}

uint64_t AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>,false,(AGXHardwareTextureMemoryOrder)3>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, uint64_t a7, unsigned int a8, int a9, int a10, uint64_t a11, char a12)
{
  uint64_t v142 = *MEMORY[0x263EF8340];
  size_t v105 = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v114 = a8;
  uint64_t v17 = a8 >> 4;
  unsigned int v104 = a8 + a10 - 1;
  unsigned int v18 = v104 >> 4;
  uint64_t v118 = a1;
  if (*(void *)(a1 + 168)) {
    int v19 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v19 = 0;
  }
  BOOL v20 = (v19 & 0xD00) == 0 || v19 == 768;
  int v21 = v19 & 0xE00;
  int v23 = !v20 && v21 != 1024;
  int v121 = v23;
  uint64_t result = a1;
  if (v17 <= v18)
  {
    unsigned int v109 = a7 + a9 - 1;
    if (a7 >> 4 <= v109 >> 4)
    {
      uint64_t v117 = (a5 - 1) >> 4;
      uint64_t v103 = (a6 - 1) >> 4;
      int v116 = ((a5 - 1) & 0xF) + 1;
      int v102 = ((a6 - 1) & 0xF) + 1;
      unint64_t v108 = a7;
      uint64_t v100 = v18 + 1;
      unint64_t v101 = (unint64_t)a7 >> 4;
      do
      {
        unsigned int v25 = (16 * v17) | 0xF;
        if (16 * (int)v17 <= v114) {
          unsigned int v26 = v114;
        }
        else {
          unsigned int v26 = 16 * v17;
        }
        if (v104 < v25) {
          unsigned int v25 = v104;
        }
        unsigned int v107 = v26 - 16 * v17;
        int v113 = v25 - v26 + 1;
        if (v17 == v103) {
          unsigned int v27 = v102;
        }
        else {
          unsigned int v27 = 16;
        }
        uint64_t v112 = a3 + (v26 - v114) * a11;
        unint64_t v28 = v101;
        unsigned int v115 = v27;
        do
        {
          unint64_t v29 = 16 * v28;
          unsigned int v30 = 16 * (v28 + 1) - 1;
          if (16 * (int)v28 <= a7) {
            int v31 = a7;
          }
          else {
            int v31 = 16 * v28;
          }
          if (v109 < v30) {
            unsigned int v30 = v109;
          }
          int v32 = v30 - v31 + 1;
          if (v28 == v117) {
            unsigned int v33 = v116;
          }
          else {
            unsigned int v33 = 16;
          }
          BOOL v34 = 1;
          if (16 * (int)v17 >= v114 && v29 >= v108)
          {
            int v35 = v116;
            if (v28 != v117) {
              int v35 = 16;
            }
            BOOL v34 = v32 != v35 || v113 != v27;
          }
          unsigned int v37 = *(_DWORD *)(result + 128) >> (*(unsigned char *)(result + 144) + a12);
          if (v37 <= 1) {
            unsigned int v37 = 1;
          }
          unsigned int v38 = v37 + 15;
          if (v38 < 0x20) {
            unsigned int v39 = 0;
          }
          else {
            unsigned int v39 = 32 - __clz(~(-1 << -(char)__clz((v38 >> 4) - 1)));
          }
          unsigned int v40 = *(_DWORD *)(result + 132) >> (*(unsigned char *)(result + 144) + a12);
          if (v40 <= 1) {
            unsigned int v40 = 1;
          }
          unsigned int v41 = v40 + 15;
          if (v41 < 0x20) {
            unsigned int v42 = 0;
          }
          else {
            unsigned int v42 = 32 - __clz(~(-1 << -(char)__clz((v41 >> 4) - 1)));
          }
          unint64_t v119 = v28 + 1;
          if (v42 | v39)
          {
            int v43 = 0;
            uint64_t v44 = 0;
            BOOL v45 = v39 != 0;
            BOOL v46 = v42 != 0;
            int v47 = 1;
            do
            {
              --v39;
              if (v45) {
                v44 |= (unint64_t)(v47 & v28) << v43++;
              }
              else {
                unsigned int v39 = 0;
              }
              --v42;
              if (v46) {
                v44 |= (unint64_t)(v47 & v17) << v43++;
              }
              else {
                unsigned int v42 = 0;
              }
              v47 *= 2;
              --v43;
              BOOL v46 = v42 != 0;
              BOOL v45 = v39 != 0;
            }
            while (v42 | v39);
          }
          else
          {
            uint64_t v44 = 0;
          }
          uint64_t v48 = v17 * v105 + 896 * v28;
          uint64_t v49 = a7;
          int v50 = v33 < 0x10 || v34;
          int v51 = (unsigned __int8 *)(a4 + 8 * v44);
          unint64_t v52 = v112 + 4 * (v31 - a7);
          uint64_t v53 = (void *)(a2 + v48);
          if (v27 < 0x10) {
            int v54 = 1;
          }
          else {
            int v54 = v50;
          }
          unint64_t v120 = v53;
          if (v121)
          {
            int v55 = __dst;
            if (!v54) {
              goto LABEL_77;
            }
            memcpy(__dst, v53, sizeof(__dst));
            LOBYTE(v27) = v115;
            uint64_t result = v118;
          }
          else
          {
            int v55 = v53;
            if (!v54)
            {
LABEL_77:
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::compressMacroblock(v52, a11, (uint64_t)v55, v51, v33, v27, *(_DWORD *)(*(void *)(result + 208) + 52));
              goto LABEL_78;
            }
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE13ELj1ELh0ELNS7_13SubblockOrderE1EL19AGXTextureFootprint1EEELb0EL29AGXHardwareTextureMemoryOrder3EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = result;
          uint64_t v123 = v55;
          unsigned __int8 v131 = v33;
          unsigned __int8 v132 = v27;
          unsigned int v127 = v107;
          unsigned int v128 = v31 - v29;
          unsigned int v124 = v51;
          unint64_t v125 = v52;
          uint64_t v126 = a11;
          unsigned int v129 = v113;
          unsigned int v130 = v32;
          if (v34)
          {
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(result + 8) + 7384), block);
LABEL_78:
            a7 = v49;
            unint64_t v56 = v119;
            goto LABEL_115;
          }
          int v57 = *(_DWORD *)(*(void *)(result + 208) + 52);
          uint64_t v58 = (uint64_t)&v55[AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::decompressSubblock(v134, 64, (uint64_t)v55, *v51, v57)];
          uint64_t v59 = v58
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::decompressSubblock(v135, 64, v58, v51[1], v57);
          uint64_t v60 = v59
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::decompressSubblock(v136, 64, v59, v51[2], v57);
          uint64_t v61 = v60
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::decompressSubblock(v137, 64, v60, v51[3], v57);
          uint64_t v62 = v61
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::decompressSubblock(v138, 64, v61, v51[4], v57);
          uint64_t v63 = v62
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::decompressSubblock(v139, 64, v62, v51[5], v57);
          uint64_t v64 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::decompressSubblock(v140, 64, v63, v51[6], v57);
          AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::decompressSubblock(v141, 64, v63 + v64, v51[7], v57);
          uint64_t v65 = v129;
          a7 = v49;
          unint64_t v56 = v119;
          if (v129 && v130)
          {
            unint64_t v66 = (unint64_t)v127 << 6;
            uint64_t v67 = 4 * v128;
            int64x2_t v68 = (char *)v134 + v66 + v67;
            unint64_t v69 = v125;
            uint64_t v70 = v126;
            unint64_t v71 = 4 * v130;
            if (v71 <= 1) {
              unint64_t v72 = 1;
            }
            else {
              unint64_t v72 = 4 * v130;
            }
            if (v72 > 7)
            {
              if (!v72 || (unint64_t v75 = (v72 - 1) >> 32) != 0)
              {
                uint64_t v98 = 0;
                do
                {
                  uint64_t v99 = 0;
                  do
                  {
                    v68[v99] = *(unsigned char *)(v69 + v99);
                    ++v99;
                  }
                  while (v71 > v99);
                  ++v98;
                  v68 += 64;
                  v69 += v70;
                }
                while (v98 != v65);
                goto LABEL_114;
              }
              int64x2_t v76 = (char *)v134 + v66 + v67;
              uint64_t v77 = v72 & 0x3FFFFFFE0;
              uint64_t v78 = v72 & 0x3FFFFFFF8;
              int64x2_t v79 = (char *)&v134[1] + v66 + v67;
              int64x2_t v80 = (long long *)(v125 + 16);
              char v81 = v68;
              unint64_t v82 = v125;
              while (2)
              {
                uint64_t v83 = (char *)(v69 + v70 * v75);
                unsigned int v84 = &v68[64 * v75];
                if ((unint64_t)(&v76[64 * v75] - v83) >= 0x20)
                {
                  if (v72 >= 0x20)
                  {
                    uint64_t v87 = v80;
                    uint64_t v88 = v79;
                    uint64_t v89 = v72 & 0x3FFFFFFE0;
                    do
                    {
                      long long v90 = *v87;
                      *(v88 - 1) = *(v87 - 1);
                      *uint64_t v88 = v90;
                      v88 += 2;
                      v87 += 2;
                      v89 -= 32;
                    }
                    while (v89);
                    if (v72 == v77) {
                      goto LABEL_93;
                    }
                    uint64_t v86 = v72 & 0x3FFFFFFE0;
                    if ((v72 & 0x18) == 0)
                    {
                      v83 += v77;
                      v84 += v77;
                      int v85 = v72 & 0xFFFFFFE0;
                      goto LABEL_107;
                    }
                  }
                  else
                  {
                    uint64_t v86 = 0;
                  }
                  v84 += v78;
                  unint64_t v91 = v86 - (v72 & 0x3FFFFFFF8);
                  uint64_t v92 = (uint64_t *)(v82 + v86);
                  uint64_t v93 = &v81[v86];
                  do
                  {
                    uint64_t v94 = *v92++;
                    *(void *)uint64_t v93 = v94;
                    v93 += 8;
                    v91 += 8;
                  }
                  while (v91);
                  if (v72 != v78)
                  {
                    v83 += v78;
                    int v85 = v72 & 0xFFFFFFF8;
                    goto LABEL_107;
                  }
                }
                else
                {
                  int v85 = 0;
LABEL_107:
                  unsigned int v95 = v85 + 1;
                  do
                  {
                    char v96 = *v83++;
                    *v84++ = v96;
                  }
                  while (v71 > v95++);
                }
LABEL_93:
                ++v75;
                v79 += 64;
                int64x2_t v80 = (long long *)((char *)v80 + v70);
                v82 += v70;
                v81 += 64;
                if (v75 == v65) {
                  goto LABEL_114;
                }
                continue;
              }
            }
            uint64_t v73 = 0;
            do
            {
              uint64_t v74 = 0;
              do
              {
                v68[v74] = *(unsigned char *)(v69 + v74);
                ++v74;
              }
              while (v71 > v74);
              ++v73;
              v68 += 64;
              v69 += v70;
            }
            while (v73 != v65);
          }
LABEL_114:
          AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::compressMacroblock((unint64_t)v134, 64, (uint64_t)v123, v124, v131, v132, *(_DWORD *)(*(void *)(v118 + 208) + 52));
LABEL_115:
          if (v121) {
            memcpy(v120, v55, 0x400uLL);
          }
          unint64_t v28 = v56;
          uint64_t result = v118;
          unsigned int v27 = v115;
        }
        while (v56 != (v109 >> 4) + 1);
        ++v17;
      }
      while (v17 != v100);
    }
  }
  return result;
}

uint64_t AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>,false,(AGXHardwareTextureMemoryOrder)3>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, uint64_t a7, unsigned int a8, int a9, int a10, uint64_t a11, char a12)
{
  uint64_t v142 = *MEMORY[0x263EF8340];
  size_t v105 = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v114 = a8;
  uint64_t v17 = a8 >> 4;
  unsigned int v104 = a8 + a10 - 1;
  unsigned int v18 = v104 >> 4;
  uint64_t v118 = a1;
  if (*(void *)(a1 + 168)) {
    int v19 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v19 = 0;
  }
  BOOL v20 = (v19 & 0xD00) == 0 || v19 == 768;
  int v21 = v19 & 0xE00;
  int v23 = !v20 && v21 != 1024;
  int v121 = v23;
  uint64_t result = a1;
  if (v17 <= v18)
  {
    unsigned int v109 = a7 + a9 - 1;
    if (a7 >> 4 <= v109 >> 4)
    {
      uint64_t v117 = (a5 - 1) >> 4;
      uint64_t v103 = (a6 - 1) >> 4;
      int v116 = ((a5 - 1) & 0xF) + 1;
      int v102 = ((a6 - 1) & 0xF) + 1;
      unint64_t v108 = a7;
      uint64_t v100 = v18 + 1;
      unint64_t v101 = (unint64_t)a7 >> 4;
      do
      {
        unsigned int v25 = (16 * v17) | 0xF;
        if (16 * (int)v17 <= v114) {
          unsigned int v26 = v114;
        }
        else {
          unsigned int v26 = 16 * v17;
        }
        if (v104 < v25) {
          unsigned int v25 = v104;
        }
        unsigned int v107 = v26 - 16 * v17;
        int v113 = v25 - v26 + 1;
        if (v17 == v103) {
          unsigned int v27 = v102;
        }
        else {
          unsigned int v27 = 16;
        }
        uint64_t v112 = a3 + (v26 - v114) * a11;
        unint64_t v28 = v101;
        unsigned int v115 = v27;
        do
        {
          unint64_t v29 = 16 * v28;
          unsigned int v30 = 16 * (v28 + 1) - 1;
          if (16 * (int)v28 <= a7) {
            int v31 = a7;
          }
          else {
            int v31 = 16 * v28;
          }
          if (v109 < v30) {
            unsigned int v30 = v109;
          }
          int v32 = v30 - v31 + 1;
          if (v28 == v117) {
            unsigned int v33 = v116;
          }
          else {
            unsigned int v33 = 16;
          }
          BOOL v34 = 1;
          if (16 * (int)v17 >= v114 && v29 >= v108)
          {
            int v35 = v116;
            if (v28 != v117) {
              int v35 = 16;
            }
            BOOL v34 = v32 != v35 || v113 != v27;
          }
          unsigned int v37 = *(_DWORD *)(result + 128) >> (*(unsigned char *)(result + 144) + a12);
          if (v37 <= 1) {
            unsigned int v37 = 1;
          }
          unsigned int v38 = v37 + 15;
          if (v38 < 0x20) {
            unsigned int v39 = 0;
          }
          else {
            unsigned int v39 = 32 - __clz(~(-1 << -(char)__clz((v38 >> 4) - 1)));
          }
          unsigned int v40 = *(_DWORD *)(result + 132) >> (*(unsigned char *)(result + 144) + a12);
          if (v40 <= 1) {
            unsigned int v40 = 1;
          }
          unsigned int v41 = v40 + 15;
          if (v41 < 0x20) {
            unsigned int v42 = 0;
          }
          else {
            unsigned int v42 = 32 - __clz(~(-1 << -(char)__clz((v41 >> 4) - 1)));
          }
          unint64_t v119 = v28 + 1;
          if (v42 | v39)
          {
            int v43 = 0;
            uint64_t v44 = 0;
            BOOL v45 = v39 != 0;
            BOOL v46 = v42 != 0;
            int v47 = 1;
            do
            {
              --v39;
              if (v45) {
                v44 |= (unint64_t)(v47 & v28) << v43++;
              }
              else {
                unsigned int v39 = 0;
              }
              --v42;
              if (v46) {
                v44 |= (unint64_t)(v47 & v17) << v43++;
              }
              else {
                unsigned int v42 = 0;
              }
              v47 *= 2;
              --v43;
              BOOL v46 = v42 != 0;
              BOOL v45 = v39 != 0;
            }
            while (v42 | v39);
          }
          else
          {
            uint64_t v44 = 0;
          }
          uint64_t v48 = v17 * v105 + 640 * v28;
          uint64_t v49 = a7;
          int v50 = v33 < 0x10 || v34;
          int v51 = (unsigned __int8 *)(a4 + 8 * v44);
          unint64_t v52 = v112 + 4 * (v31 - a7);
          uint64_t v53 = (void *)(a2 + v48);
          if (v27 < 0x10) {
            int v54 = 1;
          }
          else {
            int v54 = v50;
          }
          unint64_t v120 = v53;
          if (v121)
          {
            int v55 = __dst;
            if (!v54) {
              goto LABEL_77;
            }
            memcpy(__dst, v53, sizeof(__dst));
            LOBYTE(v27) = v115;
            uint64_t result = v118;
          }
          else
          {
            int v55 = v53;
            if (!v54)
            {
LABEL_77:
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::compressMacroblock(v52, a11, (uint64_t)v55, v51, v33, v27, *(_DWORD *)(*(void *)(result + 208) + 52));
              goto LABEL_78;
            }
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE13ELj1ELh0ELNS7_13SubblockOrderE1EL19AGXTextureFootprint2EEELb0EL29AGXHardwareTextureMemoryOrder3EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = result;
          uint64_t v123 = v55;
          unsigned __int8 v131 = v33;
          unsigned __int8 v132 = v27;
          unsigned int v127 = v107;
          unsigned int v128 = v31 - v29;
          unsigned int v124 = v51;
          unint64_t v125 = v52;
          uint64_t v126 = a11;
          unsigned int v129 = v113;
          unsigned int v130 = v32;
          if (v34)
          {
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(result + 8) + 7384), block);
LABEL_78:
            a7 = v49;
            unint64_t v56 = v119;
            goto LABEL_115;
          }
          int v57 = *(_DWORD *)(*(void *)(result + 208) + 52);
          uint64_t v58 = (uint64_t)&v55[AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressSubblock(v134, 64, (uint64_t)v55, *v51, v57)];
          uint64_t v59 = v58
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressSubblock(v135, 64, v58, v51[1], v57);
          uint64_t v60 = v59
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressSubblock(v136, 64, v59, v51[2], v57);
          uint64_t v61 = v60
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressSubblock(v137, 64, v60, v51[3], v57);
          uint64_t v62 = v61
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressSubblock(v138, 64, v61, v51[4], v57);
          uint64_t v63 = v62
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressSubblock(v139, 64, v62, v51[5], v57);
          uint64_t v64 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressSubblock(v140, 64, v63, v51[6], v57);
          AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressSubblock(v141, 64, v63 + v64, v51[7], v57);
          uint64_t v65 = v129;
          a7 = v49;
          unint64_t v56 = v119;
          if (v129 && v130)
          {
            unint64_t v66 = (unint64_t)v127 << 6;
            uint64_t v67 = 4 * v128;
            int64x2_t v68 = (char *)v134 + v66 + v67;
            unint64_t v69 = v125;
            uint64_t v70 = v126;
            unint64_t v71 = 4 * v130;
            if (v71 <= 1) {
              unint64_t v72 = 1;
            }
            else {
              unint64_t v72 = 4 * v130;
            }
            if (v72 > 7)
            {
              if (!v72 || (unint64_t v75 = (v72 - 1) >> 32) != 0)
              {
                uint64_t v98 = 0;
                do
                {
                  uint64_t v99 = 0;
                  do
                  {
                    v68[v99] = *(unsigned char *)(v69 + v99);
                    ++v99;
                  }
                  while (v71 > v99);
                  ++v98;
                  v68 += 64;
                  v69 += v70;
                }
                while (v98 != v65);
                goto LABEL_114;
              }
              int64x2_t v76 = (char *)v134 + v66 + v67;
              uint64_t v77 = v72 & 0x3FFFFFFE0;
              uint64_t v78 = v72 & 0x3FFFFFFF8;
              int64x2_t v79 = (char *)&v134[1] + v66 + v67;
              int64x2_t v80 = (long long *)(v125 + 16);
              char v81 = v68;
              unint64_t v82 = v125;
              while (2)
              {
                uint64_t v83 = (char *)(v69 + v70 * v75);
                unsigned int v84 = &v68[64 * v75];
                if ((unint64_t)(&v76[64 * v75] - v83) >= 0x20)
                {
                  if (v72 >= 0x20)
                  {
                    uint64_t v87 = v80;
                    uint64_t v88 = v79;
                    uint64_t v89 = v72 & 0x3FFFFFFE0;
                    do
                    {
                      long long v90 = *v87;
                      *(v88 - 1) = *(v87 - 1);
                      *uint64_t v88 = v90;
                      v88 += 2;
                      v87 += 2;
                      v89 -= 32;
                    }
                    while (v89);
                    if (v72 == v77) {
                      goto LABEL_93;
                    }
                    uint64_t v86 = v72 & 0x3FFFFFFE0;
                    if ((v72 & 0x18) == 0)
                    {
                      v83 += v77;
                      v84 += v77;
                      int v85 = v72 & 0xFFFFFFE0;
                      goto LABEL_107;
                    }
                  }
                  else
                  {
                    uint64_t v86 = 0;
                  }
                  v84 += v78;
                  unint64_t v91 = v86 - (v72 & 0x3FFFFFFF8);
                  uint64_t v92 = (uint64_t *)(v82 + v86);
                  uint64_t v93 = &v81[v86];
                  do
                  {
                    uint64_t v94 = *v92++;
                    *(void *)uint64_t v93 = v94;
                    v93 += 8;
                    v91 += 8;
                  }
                  while (v91);
                  if (v72 != v78)
                  {
                    v83 += v78;
                    int v85 = v72 & 0xFFFFFFF8;
                    goto LABEL_107;
                  }
                }
                else
                {
                  int v85 = 0;
LABEL_107:
                  unsigned int v95 = v85 + 1;
                  do
                  {
                    char v96 = *v83++;
                    *v84++ = v96;
                  }
                  while (v71 > v95++);
                }
LABEL_93:
                ++v75;
                v79 += 64;
                int64x2_t v80 = (long long *)((char *)v80 + v70);
                v82 += v70;
                v81 += 64;
                if (v75 == v65) {
                  goto LABEL_114;
                }
                continue;
              }
            }
            uint64_t v73 = 0;
            do
            {
              uint64_t v74 = 0;
              do
              {
                v68[v74] = *(unsigned char *)(v69 + v74);
                ++v74;
              }
              while (v71 > v74);
              ++v73;
              v68 += 64;
              v69 += v70;
            }
            while (v73 != v65);
          }
LABEL_114:
          AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::compressMacroblock((unint64_t)v134, 64, (uint64_t)v123, v124, v131, v132, *(_DWORD *)(*(void *)(v118 + 208) + 52));
LABEL_115:
          if (v121) {
            memcpy(v120, v55, 0x400uLL);
          }
          unint64_t v28 = v56;
          uint64_t result = v118;
          unsigned int v27 = v115;
        }
        while (v56 != (v109 >> 4) + 1);
        ++v17;
      }
      while (v17 != v100);
    }
  }
  return result;
}

uint64_t AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>,false,(AGXHardwareTextureMemoryOrder)3>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, uint64_t a7, unsigned int a8, int a9, int a10, uint64_t a11, char a12)
{
  uint64_t v142 = *MEMORY[0x263EF8340];
  size_t v105 = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v114 = a8;
  uint64_t v17 = a8 >> 4;
  unsigned int v104 = a8 + a10 - 1;
  unsigned int v18 = v104 >> 4;
  uint64_t v118 = a1;
  if (*(void *)(a1 + 168)) {
    int v19 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v19 = 0;
  }
  BOOL v20 = (v19 & 0xD00) == 0 || v19 == 768;
  int v21 = v19 & 0xE00;
  int v23 = !v20 && v21 != 1024;
  int v121 = v23;
  uint64_t result = a1;
  if (v17 <= v18)
  {
    unsigned int v109 = a7 + a9 - 1;
    if (a7 >> 4 <= v109 >> 4)
    {
      uint64_t v117 = (a5 - 1) >> 4;
      uint64_t v103 = (a6 - 1) >> 4;
      int v116 = ((a5 - 1) & 0xF) + 1;
      int v102 = ((a6 - 1) & 0xF) + 1;
      unint64_t v108 = a7;
      uint64_t v100 = v18 + 1;
      unint64_t v101 = (unint64_t)a7 >> 4;
      do
      {
        unsigned int v25 = (16 * v17) | 0xF;
        if (16 * (int)v17 <= v114) {
          unsigned int v26 = v114;
        }
        else {
          unsigned int v26 = 16 * v17;
        }
        if (v104 < v25) {
          unsigned int v25 = v104;
        }
        unsigned int v107 = v26 - 16 * v17;
        int v113 = v25 - v26 + 1;
        if (v17 == v103) {
          unsigned int v27 = v102;
        }
        else {
          unsigned int v27 = 16;
        }
        uint64_t v112 = a3 + (v26 - v114) * a11;
        unint64_t v28 = v101;
        unsigned int v115 = v27;
        do
        {
          unint64_t v29 = 16 * v28;
          unsigned int v30 = 16 * (v28 + 1) - 1;
          if (16 * (int)v28 <= a7) {
            int v31 = a7;
          }
          else {
            int v31 = 16 * v28;
          }
          if (v109 < v30) {
            unsigned int v30 = v109;
          }
          int v32 = v30 - v31 + 1;
          if (v28 == v117) {
            unsigned int v33 = v116;
          }
          else {
            unsigned int v33 = 16;
          }
          BOOL v34 = 1;
          if (16 * (int)v17 >= v114 && v29 >= v108)
          {
            int v35 = v116;
            if (v28 != v117) {
              int v35 = 16;
            }
            BOOL v34 = v32 != v35 || v113 != v27;
          }
          unsigned int v37 = *(_DWORD *)(result + 128) >> (*(unsigned char *)(result + 144) + a12);
          if (v37 <= 1) {
            unsigned int v37 = 1;
          }
          unsigned int v38 = v37 + 15;
          if (v38 < 0x20) {
            unsigned int v39 = 0;
          }
          else {
            unsigned int v39 = 32 - __clz(~(-1 << -(char)__clz((v38 >> 4) - 1)));
          }
          unsigned int v40 = *(_DWORD *)(result + 132) >> (*(unsigned char *)(result + 144) + a12);
          if (v40 <= 1) {
            unsigned int v40 = 1;
          }
          unsigned int v41 = v40 + 15;
          if (v41 < 0x20) {
            unsigned int v42 = 0;
          }
          else {
            unsigned int v42 = 32 - __clz(~(-1 << -(char)__clz((v41 >> 4) - 1)));
          }
          unint64_t v119 = v28 + 1;
          if (v42 | v39)
          {
            int v43 = 0;
            uint64_t v44 = 0;
            BOOL v45 = v39 != 0;
            BOOL v46 = v42 != 0;
            int v47 = 1;
            do
            {
              --v39;
              if (v45) {
                v44 |= (unint64_t)(v47 & v28) << v43++;
              }
              else {
                unsigned int v39 = 0;
              }
              --v42;
              if (v46) {
                v44 |= (unint64_t)(v47 & v17) << v43++;
              }
              else {
                unsigned int v42 = 0;
              }
              v47 *= 2;
              --v43;
              BOOL v46 = v42 != 0;
              BOOL v45 = v39 != 0;
            }
            while (v42 | v39);
          }
          else
          {
            uint64_t v44 = 0;
          }
          size_t v48 = v17 * v105 + (v28 << 9);
          uint64_t v49 = a7;
          int v50 = v33 < 0x10 || v34;
          int v51 = (unsigned __int8 *)(a4 + 8 * v44);
          unint64_t v52 = v112 + 4 * (v31 - a7);
          uint64_t v53 = (void *)(a2 + v48);
          if (v27 < 0x10) {
            int v54 = 1;
          }
          else {
            int v54 = v50;
          }
          unint64_t v120 = v53;
          if (v121)
          {
            int v55 = __dst;
            if (!v54) {
              goto LABEL_77;
            }
            memcpy(__dst, v53, sizeof(__dst));
            LOBYTE(v27) = v115;
            uint64_t result = v118;
          }
          else
          {
            int v55 = v53;
            if (!v54)
            {
LABEL_77:
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::compressMacroblock(v52, a11, (unint64_t)v55, v51, v33, v27, *(_DWORD *)(*(void *)(result + 208) + 52));
              goto LABEL_78;
            }
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE13ELj1ELh0ELNS7_13SubblockOrderE1EL19AGXTextureFootprint3EEELb0EL29AGXHardwareTextureMemoryOrder3EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = result;
          uint64_t v123 = v55;
          unsigned __int8 v131 = v33;
          unsigned __int8 v132 = v27;
          unsigned int v127 = v107;
          unsigned int v128 = v31 - v29;
          unsigned int v124 = v51;
          unint64_t v125 = v52;
          uint64_t v126 = a11;
          unsigned int v129 = v113;
          unsigned int v130 = v32;
          if (v34)
          {
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(result + 8) + 7384), block);
LABEL_78:
            a7 = v49;
            unint64_t v56 = v119;
            goto LABEL_115;
          }
          int v57 = *(_DWORD *)(*(void *)(result + 208) + 52);
          uint64_t v58 = (uint64_t)&v55[AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressSubblock(v134, 64, (uint64_t)v55, *v51, v57)];
          uint64_t v59 = v58
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressSubblock(v135, 64, v58, v51[1], v57);
          uint64_t v60 = v59
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressSubblock(v136, 64, v59, v51[2], v57);
          uint64_t v61 = v60
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressSubblock(v137, 64, v60, v51[3], v57);
          uint64_t v62 = v61
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressSubblock(v138, 64, v61, v51[4], v57);
          uint64_t v63 = v62
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressSubblock(v139, 64, v62, v51[5], v57);
          uint64_t v64 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressSubblock(v140, 64, v63, v51[6], v57);
          AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressSubblock(v141, 64, v63 + v64, v51[7], v57);
          uint64_t v65 = v129;
          a7 = v49;
          unint64_t v56 = v119;
          if (v129 && v130)
          {
            unint64_t v66 = (unint64_t)v127 << 6;
            uint64_t v67 = 4 * v128;
            int64x2_t v68 = (char *)v134 + v66 + v67;
            unint64_t v69 = v125;
            uint64_t v70 = v126;
            unint64_t v71 = 4 * v130;
            if (v71 <= 1) {
              unint64_t v72 = 1;
            }
            else {
              unint64_t v72 = 4 * v130;
            }
            if (v72 > 7)
            {
              if (!v72 || (unint64_t v75 = (v72 - 1) >> 32) != 0)
              {
                uint64_t v98 = 0;
                do
                {
                  uint64_t v99 = 0;
                  do
                  {
                    v68[v99] = *(unsigned char *)(v69 + v99);
                    ++v99;
                  }
                  while (v71 > v99);
                  ++v98;
                  v68 += 64;
                  v69 += v70;
                }
                while (v98 != v65);
                goto LABEL_114;
              }
              int64x2_t v76 = (char *)v134 + v66 + v67;
              uint64_t v77 = v72 & 0x3FFFFFFE0;
              uint64_t v78 = v72 & 0x3FFFFFFF8;
              int64x2_t v79 = (char *)&v134[1] + v66 + v67;
              int64x2_t v80 = (long long *)(v125 + 16);
              char v81 = v68;
              unint64_t v82 = v125;
              while (2)
              {
                uint64_t v83 = (char *)(v69 + v70 * v75);
                unsigned int v84 = &v68[64 * v75];
                if ((unint64_t)(&v76[64 * v75] - v83) >= 0x20)
                {
                  if (v72 >= 0x20)
                  {
                    uint64_t v87 = v80;
                    uint64_t v88 = v79;
                    uint64_t v89 = v72 & 0x3FFFFFFE0;
                    do
                    {
                      long long v90 = *v87;
                      *(v88 - 1) = *(v87 - 1);
                      *uint64_t v88 = v90;
                      v88 += 2;
                      v87 += 2;
                      v89 -= 32;
                    }
                    while (v89);
                    if (v72 == v77) {
                      goto LABEL_93;
                    }
                    uint64_t v86 = v72 & 0x3FFFFFFE0;
                    if ((v72 & 0x18) == 0)
                    {
                      v83 += v77;
                      v84 += v77;
                      int v85 = v72 & 0xFFFFFFE0;
                      goto LABEL_107;
                    }
                  }
                  else
                  {
                    uint64_t v86 = 0;
                  }
                  v84 += v78;
                  unint64_t v91 = v86 - (v72 & 0x3FFFFFFF8);
                  uint64_t v92 = (uint64_t *)(v82 + v86);
                  uint64_t v93 = &v81[v86];
                  do
                  {
                    uint64_t v94 = *v92++;
                    *(void *)uint64_t v93 = v94;
                    v93 += 8;
                    v91 += 8;
                  }
                  while (v91);
                  if (v72 != v78)
                  {
                    v83 += v78;
                    int v85 = v72 & 0xFFFFFFF8;
                    goto LABEL_107;
                  }
                }
                else
                {
                  int v85 = 0;
LABEL_107:
                  unsigned int v95 = v85 + 1;
                  do
                  {
                    char v96 = *v83++;
                    *v84++ = v96;
                  }
                  while (v71 > v95++);
                }
LABEL_93:
                ++v75;
                v79 += 64;
                int64x2_t v80 = (long long *)((char *)v80 + v70);
                v82 += v70;
                v81 += 64;
                if (v75 == v65) {
                  goto LABEL_114;
                }
                continue;
              }
            }
            uint64_t v73 = 0;
            do
            {
              uint64_t v74 = 0;
              do
              {
                v68[v74] = *(unsigned char *)(v69 + v74);
                ++v74;
              }
              while (v71 > v74);
              ++v73;
              v68 += 64;
              v69 += v70;
            }
            while (v73 != v65);
          }
LABEL_114:
          AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::compressMacroblock((unint64_t)v134, 64, (unint64_t)v123, v124, v131, v132, *(_DWORD *)(*(void *)(v118 + 208) + 52));
LABEL_115:
          if (v121) {
            memcpy(v120, v55, 0x400uLL);
          }
          unint64_t v28 = v56;
          uint64_t result = v118;
          unsigned int v27 = v115;
        }
        while (v56 != (v109 >> 4) + 1);
        ++v17;
      }
      while (v17 != v100);
    }
  }
  return result;
}

uint64_t AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)5,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)3>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, uint64_t a7, unsigned int a8, int a9, int a10, uint64_t a11, char a12)
{
  uint64_t v157 = *MEMORY[0x263EF8340];
  size_t v120 = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v129 = a8;
  uint64_t v19 = a8 >> 4;
  unsigned int v119 = a8 + a10 - 1;
  unsigned int v20 = v119 >> 4;
  uint64_t v130 = a1;
  if (*(void *)(a1 + 168)) {
    int v21 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v21 = 0;
  }
  BOOL v22 = (v21 & 0xD00) == 0 || v21 == 768;
  int v23 = v21 & 0xE00;
  int v25 = !v22 && v23 != 1024;
  int v136 = v25;
  uint64_t result = a1;
  if (v19 <= v20)
  {
    unsigned int v124 = a7 + a9 - 1;
    if (a7 >> 4 <= v124 >> 4)
    {
      uint64_t v133 = (a5 - 1) >> 4;
      uint64_t v118 = (a6 - 1) >> 4;
      int v132 = ((a5 - 1) & 0xF) + 1;
      int v117 = ((a6 - 1) & 0xF) + 1;
      unint64_t v123 = a7;
      uint64_t v115 = v20 + 1;
      unint64_t v116 = (unint64_t)a7 >> 4;
      do
      {
        unsigned int v27 = (16 * v19) | 0xF;
        if (16 * (int)v19 <= v129) {
          unsigned int v28 = v129;
        }
        else {
          unsigned int v28 = 16 * v19;
        }
        if (v119 < v27) {
          unsigned int v27 = v119;
        }
        unsigned int v122 = v28 - 16 * v19;
        int v128 = v27 - v28 + 1;
        if (v19 == v118) {
          unsigned int v29 = v117;
        }
        else {
          unsigned int v29 = 16;
        }
        uint64_t v127 = a3 + (v28 - v129) * a11;
        unint64_t v30 = v116;
        unsigned int v131 = v29;
        do
        {
          unint64_t v31 = 16 * v30;
          unsigned int v32 = 16 * (v30 + 1) - 1;
          if (16 * (int)v30 <= a7) {
            int v33 = a7;
          }
          else {
            int v33 = 16 * v30;
          }
          if (v124 < v32) {
            unsigned int v32 = v124;
          }
          int v34 = v32 - v33 + 1;
          if (v30 == v133) {
            unsigned int v35 = v132;
          }
          else {
            unsigned int v35 = 16;
          }
          BOOL v36 = 1;
          if (16 * (int)v19 >= v129 && v31 >= v123)
          {
            int v37 = v132;
            if (v30 != v133) {
              int v37 = 16;
            }
            BOOL v36 = v34 != v37 || v128 != v29;
          }
          unsigned int v39 = *(_DWORD *)(result + 128) >> (*(unsigned char *)(result + 144) + a12);
          if (v39 <= 1) {
            unsigned int v39 = 1;
          }
          unsigned int v40 = v39 + 15;
          if (v40 < 0x20) {
            unsigned int v41 = 0;
          }
          else {
            unsigned int v41 = 32 - __clz(~(-1 << -(char)__clz((v40 >> 4) - 1)));
          }
          unsigned int v42 = *(_DWORD *)(result + 132) >> (*(unsigned char *)(result + 144) + a12);
          if (v42 <= 1) {
            unsigned int v42 = 1;
          }
          unsigned int v43 = v42 + 15;
          if (v43 < 0x20) {
            unsigned int v44 = 0;
          }
          else {
            unsigned int v44 = 32 - __clz(~(-1 << -(char)__clz((v43 >> 4) - 1)));
          }
          unint64_t v134 = v30 + 1;
          if (v44 | v41)
          {
            int v45 = 0;
            uint64_t v46 = 0;
            BOOL v47 = v41 != 0;
            BOOL v48 = v44 != 0;
            int v49 = 1;
            do
            {
              --v41;
              if (v47) {
                v46 |= (unint64_t)(v49 & v30) << v45++;
              }
              else {
                unsigned int v41 = 0;
              }
              --v44;
              if (v48) {
                v46 |= (unint64_t)(v49 & v19) << v45++;
              }
              else {
                unsigned int v44 = 0;
              }
              v49 *= 2;
              --v45;
              BOOL v48 = v44 != 0;
              BOOL v47 = v41 != 0;
            }
            while (v44 | v41);
          }
          else
          {
            uint64_t v46 = 0;
          }
          size_t v50 = v19 * v120 + (v30 << 10);
          uint64_t v51 = a7;
          int v52 = v35 < 0x10 || v36;
          uint64_t v53 = (char *)(a4 + 8 * v46);
          unint64_t v54 = v127 + 4 * (v33 - a7);
          int v55 = (int64x2_t *)(a2 + v50);
          if (v29 < 0x10) {
            int v56 = 1;
          }
          else {
            int v56 = v52;
          }
          int64x2_t v135 = v55;
          if (v136)
          {
            int v57 = (int64x2_t *)__dst;
            if (!v56) {
              goto LABEL_77;
            }
            memcpy(__dst, v55, sizeof(__dst));
            LOBYTE(v29) = v131;
            uint64_t result = v130;
          }
          else
          {
            int v57 = v55;
            if (!v56)
            {
LABEL_77:
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)5,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::compressMacroblock(v54, a11, (uint64_t)v57, v53, v35, v29);
              goto LABEL_78;
            }
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE5ELj1ELh0ELNS7_13SubblockOrderE1EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder3EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = result;
          int64x2_t v138 = v57;
          unsigned __int8 v146 = v35;
          unsigned __int8 v147 = v29;
          unsigned int v142 = v122;
          unsigned int v143 = v33 - v31;
          int64x2_t v139 = v53;
          unint64_t v140 = v54;
          uint64_t v141 = a11;
          unsigned int v144 = v128;
          unsigned int v145 = v34;
          if (v36)
          {
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(result + 8) + 7384), block);
LABEL_78:
            a7 = v51;
            unint64_t v58 = v134;
            goto LABEL_115;
          }
          uint64_t v59 = (int64x2_t *)((char *)v57
                            + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)5,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressSubblock(v149, 64, v57, *v53, v17, v18));
          uint64_t v62 = (int64x2_t *)((char *)v59
                            + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)5,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressSubblock(v150, 64, v59, v53[1], v60, v61));
          uint64_t v65 = (int64x2_t *)((char *)v62
                            + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)5,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressSubblock(v151, 64, v62, v53[2], v63, v64));
          int64x2_t v68 = (int64x2_t *)((char *)v65
                            + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)5,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressSubblock(v152, 64, v65, v53[3], v66, v67));
          unint64_t v71 = (int64x2_t *)((char *)v68
                            + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)5,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressSubblock(v153, 64, v68, v53[4], v69, v70));
          uint64_t v74 = (int64x2_t *)((char *)v71
                            + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)5,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressSubblock(v154, 64, v71, v53[5], v72, v73));
          uint64_t v77 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)5,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressSubblock(v155, 64, v74, v53[6], v75, v76);
          AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)5,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressSubblock(v156, 64, (int64x2_t *)((char *)v74 + v77), v53[7], v78, v79);
          uint64_t v80 = v144;
          a7 = v51;
          unint64_t v58 = v134;
          if (v144 && v145)
          {
            unint64_t v81 = (unint64_t)v142 << 6;
            uint64_t v82 = 4 * v143;
            uint64_t v83 = &v149[0].i8[v81 + v82];
            unint64_t v84 = v140;
            uint64_t v85 = v141;
            unint64_t v86 = 4 * v145;
            if (v86 <= 1) {
              unint64_t v87 = 1;
            }
            else {
              unint64_t v87 = 4 * v145;
            }
            if (v87 > 7)
            {
              if (!v87 || (unint64_t v90 = (v87 - 1) >> 32) != 0)
              {
                uint64_t v113 = 0;
                do
                {
                  uint64_t v114 = 0;
                  do
                  {
                    v83[v114] = *(unsigned char *)(v84 + v114);
                    ++v114;
                  }
                  while (v86 > v114);
                  ++v113;
                  v83 += 64;
                  v84 += v85;
                }
                while (v113 != v80);
                goto LABEL_114;
              }
              unint64_t v91 = &v149[0].i8[v81 + v82];
              uint64_t v92 = v87 & 0x3FFFFFFE0;
              uint64_t v93 = v87 & 0x3FFFFFFF8;
              uint64_t v94 = &v149[1].i8[v81 + v82];
              unsigned int v95 = (long long *)(v140 + 16);
              char v96 = v83;
              unint64_t v97 = v140;
              while (2)
              {
                uint64_t v98 = (char *)(v84 + v85 * v90);
                uint64_t v99 = &v83[64 * v90];
                if ((unint64_t)(&v91[64 * v90] - v98) >= 0x20)
                {
                  if (v87 >= 0x20)
                  {
                    int v102 = v95;
                    uint64_t v103 = v94;
                    uint64_t v104 = v87 & 0x3FFFFFFE0;
                    do
                    {
                      long long v105 = *v102;
                      *((_OWORD *)v103 - 1) = *(v102 - 1);
                      *(_OWORD *)uint64_t v103 = v105;
                      v103 += 32;
                      v102 += 2;
                      v104 -= 32;
                    }
                    while (v104);
                    if (v87 == v92) {
                      goto LABEL_93;
                    }
                    uint64_t v101 = v87 & 0x3FFFFFFE0;
                    if ((v87 & 0x18) == 0)
                    {
                      v98 += v92;
                      v99 += v92;
                      int v100 = v87 & 0xFFFFFFE0;
                      goto LABEL_107;
                    }
                  }
                  else
                  {
                    uint64_t v101 = 0;
                  }
                  v99 += v93;
                  unint64_t v106 = v101 - (v87 & 0x3FFFFFFF8);
                  unsigned int v107 = (uint64_t *)(v97 + v101);
                  unint64_t v108 = &v96[v101];
                  do
                  {
                    uint64_t v109 = *v107++;
                    *(void *)unint64_t v108 = v109;
                    v108 += 8;
                    v106 += 8;
                  }
                  while (v106);
                  if (v87 != v93)
                  {
                    v98 += v93;
                    int v100 = v87 & 0xFFFFFFF8;
                    goto LABEL_107;
                  }
                }
                else
                {
                  int v100 = 0;
LABEL_107:
                  unsigned int v110 = v100 + 1;
                  do
                  {
                    char v111 = *v98++;
                    *v99++ = v111;
                  }
                  while (v86 > v110++);
                }
LABEL_93:
                ++v90;
                v94 += 64;
                unsigned int v95 = (long long *)((char *)v95 + v85);
                v97 += v85;
                v96 += 64;
                if (v90 == v80) {
                  goto LABEL_114;
                }
                continue;
              }
            }
            uint64_t v88 = 0;
            do
            {
              uint64_t v89 = 0;
              do
              {
                v83[v89] = *(unsigned char *)(v84 + v89);
                ++v89;
              }
              while (v86 > v89);
              ++v88;
              v83 += 64;
              v84 += v85;
            }
            while (v88 != v80);
          }
LABEL_114:
          AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)5,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v149, 64, (uint64_t)v138, v139, v146, v147);
LABEL_115:
          if (v136) {
            memcpy(v135, v57, 0x400uLL);
          }
          unint64_t v30 = v58;
          uint64_t result = v130;
          unsigned int v29 = v131;
        }
        while (v58 != (v124 >> 4) + 1);
        ++v19;
      }
      while (v19 != v115);
    }
  }
  return result;
}

uint64_t AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)5,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)3>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, char a12)
{
  uint64_t v206 = *MEMORY[0x263EF8340];
  size_t v169 = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v180 = a8;
  uint64_t v19 = a8 >> 4;
  unsigned int v168 = a8 + a10 - 1;
  unsigned int v20 = v168 >> 4;
  uint64_t v181 = a1;
  if (*(void *)(a1 + 168)) {
    int v21 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v21 = 0;
  }
  BOOL v22 = (v21 & 0xD00) == 0 || v21 == 768;
  int v23 = v21 & 0xE00;
  int v25 = !v22 && v23 != 1024;
  int v185 = v25;
  uint64_t result = a1;
  if (v19 <= v20)
  {
    unsigned int v175 = a7 + a9 - 1;
    if (a7 >> 4 <= v175 >> 4)
    {
      uint64_t v27 = a11;
      uint64_t v183 = (a5 - 1) >> 4;
      uint64_t v167 = (a6 - 1) >> 4;
      int v182 = ((a5 - 1) & 0xF) + 1;
      int v166 = ((a6 - 1) & 0xF) + 1;
      unint64_t v173 = a7;
      uint64_t v164 = v20 + 1;
      unint64_t v165 = (unint64_t)a7 >> 4;
      unsigned int v174 = a7;
      do
      {
        unsigned int v28 = (16 * v19) | 0xF;
        if (16 * (int)v19 <= v180) {
          unsigned int v29 = v180;
        }
        else {
          unsigned int v29 = 16 * v19;
        }
        if (v168 < v28) {
          unsigned int v28 = v168;
        }
        unsigned int v172 = v29 - 16 * v19;
        int v179 = v28 - v29 + 1;
        if (v19 == v167) {
          unsigned int v30 = v166;
        }
        else {
          unsigned int v30 = 16;
        }
        uint64_t v178 = a3 + (v29 - v180) * v27;
        unint64_t v31 = v165;
        do
        {
          unint64_t v32 = 16 * v31;
          unint64_t v184 = v31 + 1;
          unsigned int v33 = 16 * (v31 + 1) - 1;
          if (16 * (int)v31 <= a7) {
            unsigned int v34 = a7;
          }
          else {
            unsigned int v34 = 16 * v31;
          }
          if (v175 < v33) {
            unsigned int v33 = v175;
          }
          int v35 = v33 - v34 + 1;
          if (v31 == v183) {
            unsigned int v36 = v182;
          }
          else {
            unsigned int v36 = 16;
          }
          BOOL v37 = 1;
          if (16 * (int)v19 >= v180 && v32 >= v173)
          {
            int v38 = v182;
            if (v31 != v183) {
              int v38 = 16;
            }
            BOOL v37 = v35 != v38 || v179 != v30;
          }
          unsigned int v40 = *(_DWORD *)(result + 128) >> (*(unsigned char *)(result + 144) + a12);
          if (v40 <= 1) {
            unsigned int v40 = 1;
          }
          unsigned int v41 = v40 + 15;
          if (v41 < 0x20) {
            unsigned int v42 = 0;
          }
          else {
            unsigned int v42 = 32 - __clz(~(-1 << -(char)__clz((v41 >> 4) - 1)));
          }
          unsigned int v43 = *(_DWORD *)(result + 132) >> (*(unsigned char *)(result + 144) + a12);
          if (v43 <= 1) {
            unsigned int v43 = 1;
          }
          unsigned int v44 = v43 + 15;
          if (v44 < 0x20)
          {
            unsigned int v45 = 0;
            if (!v42)
            {
LABEL_65:
              uint64_t v47 = 0;
              goto LABEL_66;
            }
          }
          else
          {
            unsigned int v45 = 32 - __clz(~(-1 << -(char)__clz((v44 >> 4) - 1)));
            if (!(v45 | v42)) {
              goto LABEL_65;
            }
          }
          int v46 = 0;
          uint64_t v47 = 0;
          BOOL v48 = v42 != 0;
          BOOL v49 = v45 != 0;
          int v50 = 1;
          do
          {
            --v42;
            if (v48) {
              v47 |= (unint64_t)(v50 & v31) << v46++;
            }
            else {
              unsigned int v42 = 0;
            }
            --v45;
            if (v49) {
              v47 |= (unint64_t)(v50 & v19) << v46++;
            }
            else {
              unsigned int v45 = 0;
            }
            v50 *= 2;
            --v46;
            BOOL v49 = v45 != 0;
            BOOL v48 = v42 != 0;
          }
          while (v45 | v42);
LABEL_66:
          size_t v51 = v19 * v169 + (v31 << 10);
          unsigned int v52 = v34 - a7;
          int v53 = v36 < 0x10 || v37;
          unint64_t v54 = (unsigned __int8 *)(a4 + 8 * v47);
          int v55 = (int64x2_t *)(v178 + 4 * v52);
          int v56 = (int64x2_t *)(a2 + v51);
          if (v30 < 0x10) {
            int v57 = 1;
          }
          else {
            int v57 = v53;
          }
          if (v185)
          {
            if (v57)
            {
              unint64_t v58 = v56;
              int v59 = v35;
              BOOL v60 = v37;
              memcpy(__dst, v56, sizeof(__dst));
              BOOL v37 = v60;
              uint64_t v27 = a11;
              int v35 = v59;
              int32x4_t v61 = (int64x2_t *)__dst;
              int v56 = v58;
              uint64_t result = v181;
LABEL_76:
              uint64_t v62 = v56;
              block[0] = MEMORY[0x263EF8330];
              block[1] = 3221225472;
              block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE5ELj1ELh1ELNS7_13SubblockOrderE1EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder3EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
              block[3] = &__block_descriptor_90_e5_v8__0l;
              block[4] = result;
              int v187 = v61;
              unsigned __int8 v195 = v36;
              unsigned __int8 v196 = v30;
              unsigned int v191 = v172;
              unsigned int v192 = v34 - v32;
              unsigned int v188 = v54;
              unsigned int v189 = v55;
              uint64_t v190 = v27;
              unsigned int v193 = v179;
              unsigned int v194 = v35;
              if (v37)
              {
                int32x4_t v63 = v61;
                dispatch_sync(*(dispatch_queue_t *)(*(void *)(result + 8) + 7384), block);
                int32x4_t v61 = v63;
                uint64_t result = v181;
                a7 = v174;
                unint64_t v64 = v184;
                int v56 = v62;
                goto LABEL_92;
              }
              int v171 = v61;
              unint64_t v87 = (int64x2_t *)((char *)v61
                                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)5,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressSubblock(v198, 64, v61, *v54, (int32x4_t)v17, (int32x4_t)v18));
              unint64_t v90 = (int64x2_t *)((char *)v87
                                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)5,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressSubblock(v199, 64, v87, v54[1], v88, v89));
              uint64_t v93 = (int64x2_t *)((char *)v90
                                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)5,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressSubblock(v200, 64, v90, v54[2], v91, v92));
              char v96 = (int64x2_t *)((char *)v93
                                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)5,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressSubblock(v201, 64, v93, v54[3], v94, v95));
              uint64_t v99 = (int64x2_t *)((char *)v96
                                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)5,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressSubblock(v202, 64, v96, v54[4], v97, v98));
              int v102 = (int64x2_t *)((char *)v99
                                 + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)5,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressSubblock(v203, 64, v99, v54[5], v100, v101));
              uint64_t v105 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)5,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressSubblock(v204, 64, v102, v54[6], v103, v104);
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)5,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressSubblock(v205, 64, (int64x2_t *)((char *)v102 + v105), v54[7], v106, v107);
              uint64_t v108 = v193;
              if (v193 && v194)
              {
                unint64_t v109 = (unint64_t)v191 << 6;
                uint64_t v110 = 4 * v192;
                char v111 = &v198[0].i8[v109 + v110];
                uint64_t v112 = v189;
                uint64_t v113 = v190;
                unint64_t v114 = 4 * v194;
                if (v114 <= 1) {
                  unint64_t v115 = 1;
                }
                else {
                  unint64_t v115 = 4 * v194;
                }
                if (v115 <= 7)
                {
                  uint64_t v116 = 0;
                  do
                  {
                    uint64_t v117 = 0;
                    do
                    {
                      v111[v117] = v112->i8[v117];
                      ++v117;
                    }
                    while (v114 > v117);
                    ++v116;
                    v111 += 64;
                    uint64_t v112 = (int64x2_t *)((char *)v112 + v113);
                  }
                  while (v116 != v108);
                  goto LABEL_129;
                }
                if (v115)
                {
                  unint64_t v118 = (v115 - 1) >> 32;
                  if (!v118)
                  {
                    unsigned int v119 = &v198[0].i8[v109 + v110];
                    uint64_t v120 = v115 & 0x3FFFFFFE0;
                    uint64_t v121 = v115 & 0x3FFFFFFF8;
                    unsigned int v122 = &v198[1].i8[v109 + v110];
                    unint64_t v123 = v189 + 1;
                    unsigned int v124 = v111;
                    unint64_t v125 = v189;
                    while (1)
                    {
                      uint64_t v126 = &v112->i8[v113 * v118];
                      uint64_t v127 = &v111[64 * v118];
                      if ((unint64_t)(&v119[64 * v118] - v126) < 0x20)
                      {
                        int v128 = 0;
                        goto LABEL_122;
                      }
                      if (v115 >= 0x20)
                      {
                        uint64_t v130 = v123;
                        unsigned int v131 = (int64x2_t *)v122;
                        uint64_t v132 = v115 & 0x3FFFFFFE0;
                        do
                        {
                          int64x2_t v17 = v130[-1];
                          int64x2_t v18 = *v130;
                          v131[-1] = v17;
                          *unsigned int v131 = v18;
                          v131 += 2;
                          v130 += 2;
                          v132 -= 32;
                        }
                        while (v132);
                        if (v115 == v120) {
                          goto LABEL_108;
                        }
                        uint64_t v129 = v115 & 0x3FFFFFFE0;
                        if ((v115 & 0x18) == 0)
                        {
                          v126 += v120;
                          v127 += v120;
                          int v128 = v115 & 0xFFFFFFE0;
                          goto LABEL_122;
                        }
                      }
                      else
                      {
                        uint64_t v129 = 0;
                      }
                      v127 += v121;
                      unint64_t v133 = v129 - (v115 & 0x3FFFFFFF8);
                      unint64_t v134 = (uint64_t *)((char *)v125->i64 + v129);
                      int64x2_t v135 = (uint64_t *)&v124[v129];
                      do
                      {
                        uint64_t v136 = *v134++;
                        v17.i64[0] = v136;
                        *v135++ = v136;
                        v133 += 8;
                      }
                      while (v133);
                      if (v115 == v121) {
                        goto LABEL_108;
                      }
                      v126 += v121;
                      int v128 = v115 & 0xFFFFFFF8;
LABEL_122:
                      unsigned int v137 = v128 + 1;
                      do
                      {
                        char v138 = *v126++;
                        *v127++ = v138;
                      }
                      while (v114 > v137++);
LABEL_108:
                      ++v118;
                      v122 += 64;
                      unint64_t v123 = (int64x2_t *)((char *)v123 + v113);
                      unint64_t v125 = (int64x2_t *)((char *)v125 + v113);
                      v124 += 64;
                      if (v118 == v108) {
                        goto LABEL_129;
                      }
                    }
                  }
                }
                uint64_t v140 = 0;
                do
                {
                  uint64_t v141 = 0;
                  do
                  {
                    v111[v141] = v112->i8[v141];
                    ++v141;
                  }
                  while (v114 > v141);
                  ++v140;
                  v111 += 64;
                  uint64_t v112 = (int64x2_t *)((char *)v112 + v113);
                }
                while (v140 != v108);
              }
LABEL_129:
              uint64_t v142 = 0;
              unsigned int v143 = v187;
              unsigned int v144 = (char *)v188;
              int v145 = v195;
              int v146 = v196;
              a7 = v174;
              uint64_t result = v181;
              unint64_t v64 = v184;
              int v56 = v62;
              int32x4_t v61 = v171;
              do
              {
                uint64_t v159 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)1,1u>::kSubblockPositions[v142 + 1];
                uint64_t v160 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)1,1u>::kSubblockPositions[v142];
                unsigned int v161 = (v145 - 8 * v160) & ~((v145 - 8 * (int)v160) >> 31);
                if (v161 >= 8) {
                  unsigned int v161 = 8;
                }
                unsigned int v162 = (v146 - 4 * v159) & ~((v146 - 4 * (int)v159) >> 31);
                if (v162 >= 4) {
                  unsigned int v162 = 4;
                }
                if (v161) {
                  BOOL v163 = v162 == 0;
                }
                else {
                  BOOL v163 = 1;
                }
                if (v163)
                {
                  char v158 = 0;
                }
                else
                {
                  unsigned __int8 v147 = &v198[16 * v159 + 2 * v160];
                  int64x2_t v148 = v147[1];
                  int64x2_t v149 = v147[4];
                  int64x2_t v150 = v147[5];
                  int64x2_t v151 = vzip1q_s64(*v147, v149);
                  int64x2_t v152 = vzip2q_s64(*v147, v149);
                  int64x2_t v153 = vzip1q_s64(v148, v150);
                  int64x2_t v154 = vzip2q_s64(v148, v150);
                  int64x2_t v17 = v147[8];
                  int64x2_t v18 = v147[9];
                  v147 += 12;
                  int64x2_t v155 = v147[1];
                  int64x2_t v156 = vzip1q_s64(v17, *v147);
                  int64x2_t v157 = vzip2q_s64(v17, *v147);
                  *unsigned int v143 = v151;
                  v143[1] = v152;
                  v143[2] = v156;
                  v143[3] = v157;
                  v143[4] = v153;
                  v143[5] = v154;
                  v143[6] = vzip1q_s64(v18, v155);
                  v143[7] = vzip2q_s64(v18, v155);
                  v143 += 8;
                  char v158 = 127;
                }
                *v144++ = v158;
                v142 += 2;
              }
              while (v142 != 16);
              goto LABEL_92;
            }
            int32x4_t v61 = (int64x2_t *)__dst;
          }
          else
          {
            int32x4_t v61 = v56;
            if (v57) {
              goto LABEL_76;
            }
          }
          uint64_t v65 = 0;
          int32x4_t v66 = v61;
          do
          {
            uint64_t v82 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)1,1u>::kSubblockPositions[v65 + 1];
            uint64_t v83 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)1,1u>::kSubblockPositions[v65];
            unsigned int v84 = (v36 - 8 * v83) & ~((int)(v36 - 8 * v83) >> 31);
            if (v84 >= 8) {
              unsigned int v84 = 8;
            }
            unsigned int v85 = (v30 - 4 * v82) & ~((int)(v30 - 4 * v82) >> 31);
            if (v85 >= 4) {
              unsigned int v85 = 4;
            }
            if (v84) {
              BOOL v86 = v85 == 0;
            }
            else {
              BOOL v86 = 1;
            }
            if (v86)
            {
              char v81 = 0;
            }
            else
            {
              int32x4_t v67 = (int64x2_t *)((char *)&v55[2 * v83] + 4 * a11 * v82);
              int64x2_t v68 = (int64x2_t *)((char *)v67 + v27);
              int64x2_t v70 = *v67;
              int64x2_t v71 = v67[1];
              int32x4_t v69 = (int64x2_t *)((char *)v67 + 2 * a11);
              int64x2_t v72 = v68[1];
              int64x2_t v73 = vzip1q_s64(v70, *v68);
              int64x2_t v74 = vzip2q_s64(v70, *v68);
              int64x2_t v75 = vzip1q_s64(v71, v72);
              int64x2_t v76 = vzip2q_s64(v71, v72);
              int64x2_t v17 = *v69;
              int64x2_t v18 = v69[1];
              uint64_t v77 = (int64x2_t *)((char *)v69 + v27);
              int64x2_t v78 = v77[1];
              int64x2_t v79 = vzip1q_s64(v17, *v77);
              int64x2_t v80 = vzip2q_s64(v17, *v77);
              *int32x4_t v66 = v73;
              v66[1] = v74;
              v66[2] = v79;
              v66[3] = v80;
              v66[4] = v75;
              v66[5] = v76;
              v66[6] = vzip1q_s64(v18, v78);
              v66[7] = vzip2q_s64(v18, v78);
              v66 += 8;
              char v81 = 127;
            }
            *v54++ = v81;
            v65 += 2;
          }
          while (v65 != 16);
          a7 = v174;
          unint64_t v64 = v184;
LABEL_92:
          if (v185)
          {
            memcpy(v56, v61, 0x400uLL);
            uint64_t result = v181;
          }
          unint64_t v31 = v64;
        }
        while (v64 != (v175 >> 4) + 1);
        ++v19;
      }
      while (v19 != v164);
    }
  }
  return result;
}

uint64_t AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)5,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>,false,(AGXHardwareTextureMemoryOrder)3>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, uint64_t a7, unsigned int a8, int a9, int a10, uint64_t a11, char a12)
{
  v157[28] = *MEMORY[0x263EF8340];
  size_t v121 = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v130 = a8;
  uint64_t v19 = a8 >> 4;
  unsigned int v120 = a8 + a10 - 1;
  unsigned int v20 = v120 >> 4;
  uint64_t v134 = a1;
  if (*(void *)(a1 + 168)) {
    int v21 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v21 = 0;
  }
  BOOL v22 = (v21 & 0xD00) == 0 || v21 == 768;
  int v23 = v21 & 0xE00;
  int v25 = !v22 && v23 != 1024;
  int v137 = v25;
  uint64_t result = a1;
  if (v19 <= v20)
  {
    unsigned int v125 = a7 + a9 - 1;
    if (a7 >> 4 <= v125 >> 4)
    {
      uint64_t v133 = (a5 - 1) >> 4;
      uint64_t v119 = (a6 - 1) >> 4;
      int v132 = ((a5 - 1) & 0xF) + 1;
      int v118 = ((a6 - 1) & 0xF) + 1;
      unint64_t v124 = a7;
      uint64_t v116 = v20 + 1;
      unint64_t v117 = (unint64_t)a7 >> 4;
      do
      {
        unsigned int v27 = (16 * v19) | 0xF;
        if (16 * (int)v19 <= v130) {
          unsigned int v28 = v130;
        }
        else {
          unsigned int v28 = 16 * v19;
        }
        if (v120 < v27) {
          unsigned int v27 = v120;
        }
        unsigned int v123 = v28 - 16 * v19;
        int v129 = v27 - v28 + 1;
        if (v19 == v119) {
          unsigned int v29 = v118;
        }
        else {
          unsigned int v29 = 16;
        }
        uint64_t v128 = a3 + (v28 - v130) * a11;
        unint64_t v30 = v117;
        unsigned int v131 = v29;
        do
        {
          unint64_t v31 = 16 * v30;
          unsigned int v32 = 16 * (v30 + 1) - 1;
          if (16 * (int)v30 <= a7) {
            int v33 = a7;
          }
          else {
            int v33 = 16 * v30;
          }
          if (v125 < v32) {
            unsigned int v32 = v125;
          }
          int v34 = v32 - v33 + 1;
          if (v30 == v133) {
            unsigned int v35 = v132;
          }
          else {
            unsigned int v35 = 16;
          }
          BOOL v36 = 1;
          if (16 * (int)v19 >= v130 && v31 >= v124)
          {
            int v37 = v132;
            if (v30 != v133) {
              int v37 = 16;
            }
            BOOL v36 = v34 != v37 || v129 != v29;
          }
          unsigned int v39 = *(_DWORD *)(result + 128) >> (*(unsigned char *)(result + 144) + a12);
          if (v39 <= 1) {
            unsigned int v39 = 1;
          }
          unsigned int v40 = v39 + 15;
          if (v40 < 0x20) {
            unsigned int v41 = 0;
          }
          else {
            unsigned int v41 = 32 - __clz(~(-1 << -(char)__clz((v40 >> 4) - 1)));
          }
          unsigned int v42 = *(_DWORD *)(result + 132) >> (*(unsigned char *)(result + 144) + a12);
          if (v42 <= 1) {
            unsigned int v42 = 1;
          }
          unsigned int v43 = v42 + 15;
          if (v43 < 0x20) {
            unsigned int v44 = 0;
          }
          else {
            unsigned int v44 = 32 - __clz(~(-1 << -(char)__clz((v43 >> 4) - 1)));
          }
          unint64_t v135 = v30 + 1;
          if (v44 | v41)
          {
            int v45 = 0;
            uint64_t v46 = 0;
            BOOL v47 = v41 != 0;
            BOOL v48 = v44 != 0;
            int v49 = 1;
            do
            {
              --v41;
              if (v47) {
                v46 |= (unint64_t)(v49 & v30) << v45++;
              }
              else {
                unsigned int v41 = 0;
              }
              --v44;
              if (v48) {
                v46 |= (unint64_t)(v49 & v19) << v45++;
              }
              else {
                unsigned int v44 = 0;
              }
              v49 *= 2;
              --v45;
              BOOL v48 = v44 != 0;
              BOOL v47 = v41 != 0;
            }
            while (v44 | v41);
          }
          else
          {
            uint64_t v46 = 0;
          }
          size_t v50 = v19 * v121 + (v30 << 9);
          uint64_t v51 = a7;
          int v52 = v35 < 0x10 || v36;
          int v53 = (unsigned __int8 *)(a4 + 8 * v46);
          unint64_t v54 = v128 + 4 * (v33 - a7);
          int v55 = (void *)(a2 + v50);
          if (v29 < 0x10) {
            int v56 = 1;
          }
          else {
            int v56 = v52;
          }
          uint64_t v136 = v55;
          if (v137)
          {
            int v57 = __dst;
            if (!v56) {
              goto LABEL_77;
            }
            memcpy(__dst, v55, sizeof(__dst));
            LOBYTE(v29) = v131;
            uint64_t result = v134;
          }
          else
          {
            int v57 = v55;
            if (!v56)
            {
LABEL_77:
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)5,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::compressMacroblock(v54, a11, (unint64_t)v57, v53, v35, v29, *(_DWORD *)(*(void *)(result + 208) + 52));
              goto LABEL_78;
            }
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE5ELj1ELh0ELNS7_13SubblockOrderE1EL19AGXTextureFootprint1EEELb0EL29AGXHardwareTextureMemoryOrder3EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = result;
          int64x2_t v139 = v57;
          unsigned __int8 v147 = v35;
          unsigned __int8 v148 = v29;
          unsigned int v143 = v123;
          unsigned int v144 = v33 - v31;
          uint64_t v140 = v53;
          unint64_t v141 = v54;
          uint64_t v142 = a11;
          unsigned int v145 = v129;
          unsigned int v146 = v34;
          if (v36)
          {
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(result + 8) + 7384), block);
LABEL_78:
            a7 = v51;
            unint64_t v58 = v135;
            goto LABEL_115;
          }
          int v59 = *(_DWORD *)(*(void *)(result + 208) + 52);
          uint64_t v60 = (uint64_t)&v57[AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)5,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::decompressSubblock((uint64_t)v150, 64, (uint64_t)v57, *v53, v59, v17, v18)];
          uint64_t v63 = v60
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)5,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::decompressSubblock((uint64_t)&v151, 64, v60, v53[1], v59, v61, v62);
          uint64_t v66 = v63
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)5,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::decompressSubblock((uint64_t)&v152, 64, v63, v53[2], v59, v64, v65);
          uint64_t v69 = v66
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)5,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::decompressSubblock((uint64_t)&v153, 64, v66, v53[3], v59, v67, v68);
          uint64_t v72 = v69
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)5,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::decompressSubblock((uint64_t)&v154, 64, v69, v53[4], v59, v70, v71);
          uint64_t v75 = v72
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)5,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::decompressSubblock((uint64_t)&v155, 64, v72, v53[5], v59, v73, v74);
          uint64_t v78 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)5,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::decompressSubblock((uint64_t)&v156, 64, v75, v53[6], v59, v76, v77);
          AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)5,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::decompressSubblock((uint64_t)v157, 64, v75 + v78, v53[7], v59, v79, v80);
          uint64_t v81 = v145;
          a7 = v51;
          unint64_t v58 = v135;
          if (v145 && v146)
          {
            unint64_t v82 = (unint64_t)v143 << 6;
            uint64_t v83 = 4 * v144;
            unsigned int v84 = &v150[v82 + v83];
            unint64_t v85 = v141;
            uint64_t v86 = v142;
            unint64_t v87 = 4 * v146;
            if (v87 <= 1) {
              unint64_t v88 = 1;
            }
            else {
              unint64_t v88 = 4 * v146;
            }
            if (v88 > 7)
            {
              if (!v88 || (unint64_t v91 = (v88 - 1) >> 32) != 0)
              {
                uint64_t v114 = 0;
                do
                {
                  uint64_t v115 = 0;
                  do
                  {
                    v84[v115] = *(unsigned char *)(v85 + v115);
                    ++v115;
                  }
                  while (v87 > v115);
                  ++v114;
                  v84 += 64;
                  v85 += v86;
                }
                while (v114 != v81);
                goto LABEL_114;
              }
              int32x4_t v92 = &v150[v82 + v83];
              uint64_t v93 = v88 & 0x3FFFFFFE0;
              uint64_t v94 = v88 & 0x3FFFFFFF8;
              int32x4_t v95 = &v150[v82 + 16 + v83];
              char v96 = (long long *)(v141 + 16);
              int32x4_t v97 = v84;
              unint64_t v98 = v141;
              while (2)
              {
                uint64_t v99 = (char *)(v85 + v86 * v91);
                int32x4_t v100 = &v84[64 * v91];
                if ((unint64_t)(&v92[64 * v91] - v99) >= 0x20)
                {
                  if (v88 >= 0x20)
                  {
                    int32x4_t v103 = v96;
                    int32x4_t v104 = v95;
                    uint64_t v105 = v88 & 0x3FFFFFFE0;
                    do
                    {
                      long long v106 = *v103;
                      *(v104 - 1) = *(v103 - 1);
                      *int32x4_t v104 = v106;
                      v104 += 2;
                      v103 += 2;
                      v105 -= 32;
                    }
                    while (v105);
                    if (v88 == v93) {
                      goto LABEL_93;
                    }
                    uint64_t v102 = v88 & 0x3FFFFFFE0;
                    if ((v88 & 0x18) == 0)
                    {
                      v99 += v93;
                      v100 += v93;
                      int v101 = v88 & 0xFFFFFFE0;
                      goto LABEL_107;
                    }
                  }
                  else
                  {
                    uint64_t v102 = 0;
                  }
                  v100 += v94;
                  unint64_t v107 = v102 - (v88 & 0x3FFFFFFF8);
                  uint64_t v108 = (uint64_t *)(v98 + v102);
                  unint64_t v109 = &v97[v102];
                  do
                  {
                    uint64_t v110 = *v108++;
                    *v109++ = v110;
                    v107 += 8;
                  }
                  while (v107);
                  if (v88 != v94)
                  {
                    v99 += v94;
                    int v101 = v88 & 0xFFFFFFF8;
                    goto LABEL_107;
                  }
                }
                else
                {
                  int v101 = 0;
LABEL_107:
                  unsigned int v111 = v101 + 1;
                  do
                  {
                    char v112 = *v99++;
                    *v100++ = v112;
                  }
                  while (v87 > v111++);
                }
LABEL_93:
                ++v91;
                v95 += 64;
                char v96 = (long long *)((char *)v96 + v86);
                v98 += v86;
                v97 += 64;
                if (v91 == v81) {
                  goto LABEL_114;
                }
                continue;
              }
            }
            uint64_t v89 = 0;
            do
            {
              uint64_t v90 = 0;
              do
              {
                v84[v90] = *(unsigned char *)(v85 + v90);
                ++v90;
              }
              while (v87 > v90);
              ++v89;
              v84 += 64;
              v85 += v86;
            }
            while (v89 != v81);
          }
LABEL_114:
          AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)5,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::compressMacroblock((unint64_t)v150, 64, (unint64_t)v139, v140, v147, v148, *(_DWORD *)(*(void *)(v134 + 208) + 52));
LABEL_115:
          if (v137) {
            memcpy(v136, v57, 0x400uLL);
          }
          unint64_t v30 = v58;
          uint64_t result = v134;
          unsigned int v29 = v131;
        }
        while (v58 != (v125 >> 4) + 1);
        ++v19;
      }
      while (v19 != v116);
    }
  }
  return result;
}

uint64_t AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)5,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>,false,(AGXHardwareTextureMemoryOrder)3>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, uint64_t a7, unsigned int a8, int a9, int a10, uint64_t a11, char a12)
{
  v157[28] = *MEMORY[0x263EF8340];
  size_t v121 = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v130 = a8;
  uint64_t v19 = a8 >> 4;
  unsigned int v120 = a8 + a10 - 1;
  unsigned int v20 = v120 >> 4;
  uint64_t v134 = a1;
  if (*(void *)(a1 + 168)) {
    int v21 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v21 = 0;
  }
  BOOL v22 = (v21 & 0xD00) == 0 || v21 == 768;
  int v23 = v21 & 0xE00;
  int v25 = !v22 && v23 != 1024;
  int v137 = v25;
  uint64_t result = a1;
  if (v19 <= v20)
  {
    unsigned int v125 = a7 + a9 - 1;
    if (a7 >> 4 <= v125 >> 4)
    {
      uint64_t v133 = (a5 - 1) >> 4;
      uint64_t v119 = (a6 - 1) >> 4;
      int v132 = ((a5 - 1) & 0xF) + 1;
      int v118 = ((a6 - 1) & 0xF) + 1;
      unint64_t v124 = a7;
      uint64_t v116 = v20 + 1;
      unint64_t v117 = (unint64_t)a7 >> 4;
      do
      {
        unsigned int v27 = (16 * v19) | 0xF;
        if (16 * (int)v19 <= v130) {
          unsigned int v28 = v130;
        }
        else {
          unsigned int v28 = 16 * v19;
        }
        if (v120 < v27) {
          unsigned int v27 = v120;
        }
        unsigned int v123 = v28 - 16 * v19;
        int v129 = v27 - v28 + 1;
        if (v19 == v119) {
          unsigned int v29 = v118;
        }
        else {
          unsigned int v29 = 16;
        }
        uint64_t v128 = a3 + (v28 - v130) * a11;
        unint64_t v30 = v117;
        unsigned int v131 = v29;
        do
        {
          unint64_t v31 = 16 * v30;
          unsigned int v32 = 16 * (v30 + 1) - 1;
          if (16 * (int)v30 <= a7) {
            int v33 = a7;
          }
          else {
            int v33 = 16 * v30;
          }
          if (v125 < v32) {
            unsigned int v32 = v125;
          }
          int v34 = v32 - v33 + 1;
          if (v30 == v133) {
            unsigned int v35 = v132;
          }
          else {
            unsigned int v35 = 16;
          }
          BOOL v36 = 1;
          if (16 * (int)v19 >= v130 && v31 >= v124)
          {
            int v37 = v132;
            if (v30 != v133) {
              int v37 = 16;
            }
            BOOL v36 = v34 != v37 || v129 != v29;
          }
          unsigned int v39 = *(_DWORD *)(result + 128) >> (*(unsigned char *)(result + 144) + a12);
          if (v39 <= 1) {
            unsigned int v39 = 1;
          }
          unsigned int v40 = v39 + 15;
          if (v40 < 0x20) {
            unsigned int v41 = 0;
          }
          else {
            unsigned int v41 = 32 - __clz(~(-1 << -(char)__clz((v40 >> 4) - 1)));
          }
          unsigned int v42 = *(_DWORD *)(result + 132) >> (*(unsigned char *)(result + 144) + a12);
          if (v42 <= 1) {
            unsigned int v42 = 1;
          }
          unsigned int v43 = v42 + 15;
          if (v43 < 0x20) {
            unsigned int v44 = 0;
          }
          else {
            unsigned int v44 = 32 - __clz(~(-1 << -(char)__clz((v43 >> 4) - 1)));
          }
          unint64_t v135 = v30 + 1;
          if (v44 | v41)
          {
            int v45 = 0;
            uint64_t v46 = 0;
            BOOL v47 = v41 != 0;
            BOOL v48 = v44 != 0;
            int v49 = 1;
            do
            {
              --v41;
              if (v47) {
                v46 |= (unint64_t)(v49 & v30) << v45++;
              }
              else {
                unsigned int v41 = 0;
              }
              --v44;
              if (v48) {
                v46 |= (unint64_t)(v49 & v19) << v45++;
              }
              else {
                unsigned int v44 = 0;
              }
              v49 *= 2;
              --v45;
              BOOL v48 = v44 != 0;
              BOOL v47 = v41 != 0;
            }
            while (v44 | v41);
          }
          else
          {
            uint64_t v46 = 0;
          }
          uint64_t v50 = v19 * v121 + 384 * v30;
          uint64_t v51 = a7;
          int v52 = v35 < 0x10 || v36;
          int v53 = (unsigned __int8 *)(a4 + 8 * v46);
          unint64_t v54 = v128 + 4 * (v33 - a7);
          int v55 = (void *)(a2 + v50);
          if (v29 < 0x10) {
            int v56 = 1;
          }
          else {
            int v56 = v52;
          }
          uint64_t v136 = v55;
          if (v137)
          {
            int v57 = __dst;
            if (!v56) {
              goto LABEL_77;
            }
            memcpy(__dst, v55, sizeof(__dst));
            LOBYTE(v29) = v131;
            uint64_t result = v134;
          }
          else
          {
            int v57 = v55;
            if (!v56)
            {
LABEL_77:
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)5,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::compressMacroblock(v54, a11, (uint64_t)v57, v53, v35, v29, *(_DWORD *)(*(void *)(result + 208) + 52));
              goto LABEL_78;
            }
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE5ELj1ELh0ELNS7_13SubblockOrderE1EL19AGXTextureFootprint2EEELb0EL29AGXHardwareTextureMemoryOrder3EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = result;
          int64x2_t v139 = v57;
          unsigned __int8 v147 = v35;
          unsigned __int8 v148 = v29;
          unsigned int v143 = v123;
          unsigned int v144 = v33 - v31;
          uint64_t v140 = v53;
          unint64_t v141 = v54;
          uint64_t v142 = a11;
          unsigned int v145 = v129;
          unsigned int v146 = v34;
          if (v36)
          {
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(result + 8) + 7384), block);
LABEL_78:
            a7 = v51;
            unint64_t v58 = v135;
            goto LABEL_115;
          }
          int v59 = *(_DWORD *)(*(void *)(result + 208) + 52);
          uint64_t v60 = (uint64_t)&v57[AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)5,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressSubblock((uint64_t)v150, 64, (uint64_t)v57, *v53, v59, v17, v18)];
          uint64_t v63 = v60
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)5,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressSubblock((uint64_t)&v151, 64, v60, v53[1], v59, v61, v62);
          uint64_t v66 = v63
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)5,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressSubblock((uint64_t)&v152, 64, v63, v53[2], v59, v64, v65);
          uint64_t v69 = v66
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)5,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressSubblock((uint64_t)&v153, 64, v66, v53[3], v59, v67, v68);
          uint64_t v72 = v69
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)5,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressSubblock((uint64_t)&v154, 64, v69, v53[4], v59, v70, v71);
          uint64_t v75 = v72
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)5,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressSubblock((uint64_t)&v155, 64, v72, v53[5], v59, v73, v74);
          uint64_t v78 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)5,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressSubblock((uint64_t)&v156, 64, v75, v53[6], v59, v76, v77);
          AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)5,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressSubblock((uint64_t)v157, 64, v75 + v78, v53[7], v59, v79, v80);
          uint64_t v81 = v145;
          a7 = v51;
          unint64_t v58 = v135;
          if (v145 && v146)
          {
            unint64_t v82 = (unint64_t)v143 << 6;
            uint64_t v83 = 4 * v144;
            unsigned int v84 = &v150[v82 + v83];
            unint64_t v85 = v141;
            uint64_t v86 = v142;
            unint64_t v87 = 4 * v146;
            if (v87 <= 1) {
              unint64_t v88 = 1;
            }
            else {
              unint64_t v88 = 4 * v146;
            }
            if (v88 > 7)
            {
              if (!v88 || (unint64_t v91 = (v88 - 1) >> 32) != 0)
              {
                uint64_t v114 = 0;
                do
                {
                  uint64_t v115 = 0;
                  do
                  {
                    v84[v115] = *(unsigned char *)(v85 + v115);
                    ++v115;
                  }
                  while (v87 > v115);
                  ++v114;
                  v84 += 64;
                  v85 += v86;
                }
                while (v114 != v81);
                goto LABEL_114;
              }
              int32x4_t v92 = &v150[v82 + v83];
              uint64_t v93 = v88 & 0x3FFFFFFE0;
              uint64_t v94 = v88 & 0x3FFFFFFF8;
              int32x4_t v95 = &v150[v82 + 16 + v83];
              char v96 = (long long *)(v141 + 16);
              int32x4_t v97 = v84;
              unint64_t v98 = v141;
              while (2)
              {
                uint64_t v99 = (char *)(v85 + v86 * v91);
                int32x4_t v100 = &v84[64 * v91];
                if ((unint64_t)(&v92[64 * v91] - v99) >= 0x20)
                {
                  if (v88 >= 0x20)
                  {
                    int32x4_t v103 = v96;
                    int32x4_t v104 = v95;
                    uint64_t v105 = v88 & 0x3FFFFFFE0;
                    do
                    {
                      long long v106 = *v103;
                      *(v104 - 1) = *(v103 - 1);
                      *int32x4_t v104 = v106;
                      v104 += 2;
                      v103 += 2;
                      v105 -= 32;
                    }
                    while (v105);
                    if (v88 == v93) {
                      goto LABEL_93;
                    }
                    uint64_t v102 = v88 & 0x3FFFFFFE0;
                    if ((v88 & 0x18) == 0)
                    {
                      v99 += v93;
                      v100 += v93;
                      int v101 = v88 & 0xFFFFFFE0;
                      goto LABEL_107;
                    }
                  }
                  else
                  {
                    uint64_t v102 = 0;
                  }
                  v100 += v94;
                  unint64_t v107 = v102 - (v88 & 0x3FFFFFFF8);
                  uint64_t v108 = (uint64_t *)(v98 + v102);
                  unint64_t v109 = &v97[v102];
                  do
                  {
                    uint64_t v110 = *v108++;
                    *v109++ = v110;
                    v107 += 8;
                  }
                  while (v107);
                  if (v88 != v94)
                  {
                    v99 += v94;
                    int v101 = v88 & 0xFFFFFFF8;
                    goto LABEL_107;
                  }
                }
                else
                {
                  int v101 = 0;
LABEL_107:
                  unsigned int v111 = v101 + 1;
                  do
                  {
                    char v112 = *v99++;
                    *v100++ = v112;
                  }
                  while (v87 > v111++);
                }
LABEL_93:
                ++v91;
                v95 += 64;
                char v96 = (long long *)((char *)v96 + v86);
                v98 += v86;
                v97 += 64;
                if (v91 == v81) {
                  goto LABEL_114;
                }
                continue;
              }
            }
            uint64_t v89 = 0;
            do
            {
              uint64_t v90 = 0;
              do
              {
                v84[v90] = *(unsigned char *)(v85 + v90);
                ++v90;
              }
              while (v87 > v90);
              ++v89;
              v84 += 64;
              v85 += v86;
            }
            while (v89 != v81);
          }
LABEL_114:
          AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)5,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::compressMacroblock((unint64_t)v150, 64, (uint64_t)v139, v140, v147, v148, *(_DWORD *)(*(void *)(v134 + 208) + 52));
LABEL_115:
          if (v137) {
            memcpy(v136, v57, 0x400uLL);
          }
          unint64_t v30 = v58;
          uint64_t result = v134;
          unsigned int v29 = v131;
        }
        while (v58 != (v125 >> 4) + 1);
        ++v19;
      }
      while (v19 != v116);
    }
  }
  return result;
}

uint64_t AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)5,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>,false,(AGXHardwareTextureMemoryOrder)3>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, uint64_t a7, unsigned int a8, int a9, int a10, uint64_t a11, char a12)
{
  v157[28] = *MEMORY[0x263EF8340];
  size_t v121 = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v130 = a8;
  uint64_t v19 = a8 >> 4;
  unsigned int v120 = a8 + a10 - 1;
  unsigned int v20 = v120 >> 4;
  uint64_t v134 = a1;
  if (*(void *)(a1 + 168)) {
    int v21 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v21 = 0;
  }
  BOOL v22 = (v21 & 0xD00) == 0 || v21 == 768;
  int v23 = v21 & 0xE00;
  int v25 = !v22 && v23 != 1024;
  int v137 = v25;
  uint64_t result = a1;
  if (v19 <= v20)
  {
    unsigned int v125 = a7 + a9 - 1;
    if (a7 >> 4 <= v125 >> 4)
    {
      uint64_t v133 = (a5 - 1) >> 4;
      uint64_t v119 = (a6 - 1) >> 4;
      int v132 = ((a5 - 1) & 0xF) + 1;
      int v118 = ((a6 - 1) & 0xF) + 1;
      unint64_t v124 = a7;
      uint64_t v116 = v20 + 1;
      unint64_t v117 = (unint64_t)a7 >> 4;
      do
      {
        unsigned int v27 = (16 * v19) | 0xF;
        if (16 * (int)v19 <= v130) {
          unsigned int v28 = v130;
        }
        else {
          unsigned int v28 = 16 * v19;
        }
        if (v120 < v27) {
          unsigned int v27 = v120;
        }
        unsigned int v123 = v28 - 16 * v19;
        int v129 = v27 - v28 + 1;
        if (v19 == v119) {
          unsigned int v29 = v118;
        }
        else {
          unsigned int v29 = 16;
        }
        uint64_t v128 = a3 + (v28 - v130) * a11;
        unint64_t v30 = v117;
        unsigned int v131 = v29;
        do
        {
          unint64_t v31 = 16 * v30;
          unsigned int v32 = 16 * (v30 + 1) - 1;
          if (16 * (int)v30 <= a7) {
            int v33 = a7;
          }
          else {
            int v33 = 16 * v30;
          }
          if (v125 < v32) {
            unsigned int v32 = v125;
          }
          int v34 = v32 - v33 + 1;
          if (v30 == v133) {
            unsigned int v35 = v132;
          }
          else {
            unsigned int v35 = 16;
          }
          BOOL v36 = 1;
          if (16 * (int)v19 >= v130 && v31 >= v124)
          {
            int v37 = v132;
            if (v30 != v133) {
              int v37 = 16;
            }
            BOOL v36 = v34 != v37 || v129 != v29;
          }
          unsigned int v39 = *(_DWORD *)(result + 128) >> (*(unsigned char *)(result + 144) + a12);
          if (v39 <= 1) {
            unsigned int v39 = 1;
          }
          unsigned int v40 = v39 + 15;
          if (v40 < 0x20) {
            unsigned int v41 = 0;
          }
          else {
            unsigned int v41 = 32 - __clz(~(-1 << -(char)__clz((v40 >> 4) - 1)));
          }
          unsigned int v42 = *(_DWORD *)(result + 132) >> (*(unsigned char *)(result + 144) + a12);
          if (v42 <= 1) {
            unsigned int v42 = 1;
          }
          unsigned int v43 = v42 + 15;
          if (v43 < 0x20) {
            unsigned int v44 = 0;
          }
          else {
            unsigned int v44 = 32 - __clz(~(-1 << -(char)__clz((v43 >> 4) - 1)));
          }
          unint64_t v135 = v30 + 1;
          if (v44 | v41)
          {
            int v45 = 0;
            uint64_t v46 = 0;
            BOOL v47 = v41 != 0;
            BOOL v48 = v44 != 0;
            int v49 = 1;
            do
            {
              --v41;
              if (v47) {
                v46 |= (unint64_t)(v49 & v30) << v45++;
              }
              else {
                unsigned int v41 = 0;
              }
              --v44;
              if (v48) {
                v46 |= (unint64_t)(v49 & v19) << v45++;
              }
              else {
                unsigned int v44 = 0;
              }
              v49 *= 2;
              --v45;
              BOOL v48 = v44 != 0;
              BOOL v47 = v41 != 0;
            }
            while (v44 | v41);
          }
          else
          {
            uint64_t v46 = 0;
          }
          uint64_t v50 = v19 * v121 + 384 * v30;
          uint64_t v51 = a7;
          int v52 = v35 < 0x10 || v36;
          int v53 = (unsigned __int8 *)(a4 + 8 * v46);
          unint64_t v54 = v128 + 4 * (v33 - a7);
          int v55 = (void *)(a2 + v50);
          if (v29 < 0x10) {
            int v56 = 1;
          }
          else {
            int v56 = v52;
          }
          uint64_t v136 = v55;
          if (v137)
          {
            int v57 = __dst;
            if (!v56) {
              goto LABEL_77;
            }
            memcpy(__dst, v55, sizeof(__dst));
            LOBYTE(v29) = v131;
            uint64_t result = v134;
          }
          else
          {
            int v57 = v55;
            if (!v56)
            {
LABEL_77:
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)5,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::compressMacroblock(v54, a11, (uint64_t)v57, v53, v35, v29, *(_DWORD *)(*(void *)(result + 208) + 52));
              goto LABEL_78;
            }
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE5ELj1ELh0ELNS7_13SubblockOrderE1EL19AGXTextureFootprint3EEELb0EL29AGXHardwareTextureMemoryOrder3EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = result;
          int64x2_t v139 = v57;
          unsigned __int8 v147 = v35;
          unsigned __int8 v148 = v29;
          unsigned int v143 = v123;
          unsigned int v144 = v33 - v31;
          uint64_t v140 = v53;
          unint64_t v141 = v54;
          uint64_t v142 = a11;
          unsigned int v145 = v129;
          unsigned int v146 = v34;
          if (v36)
          {
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(result + 8) + 7384), block);
LABEL_78:
            a7 = v51;
            unint64_t v58 = v135;
            goto LABEL_115;
          }
          int v59 = *(_DWORD *)(*(void *)(result + 208) + 52);
          uint64_t v60 = (uint64_t)&v57[AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)5,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::decompressSubblock((uint64_t)v150, 64, (uint64_t)v57, *v53, v59, v17, v18)];
          uint64_t v63 = v60
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)5,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::decompressSubblock((uint64_t)&v151, 64, v60, v53[1], v59, v61, v62);
          uint64_t v66 = v63
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)5,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::decompressSubblock((uint64_t)&v152, 64, v63, v53[2], v59, v64, v65);
          uint64_t v69 = v66
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)5,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::decompressSubblock((uint64_t)&v153, 64, v66, v53[3], v59, v67, v68);
          uint64_t v72 = v69
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)5,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::decompressSubblock((uint64_t)&v154, 64, v69, v53[4], v59, v70, v71);
          uint64_t v75 = v72
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)5,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::decompressSubblock((uint64_t)&v155, 64, v72, v53[5], v59, v73, v74);
          uint64_t v78 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)5,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::decompressSubblock((uint64_t)&v156, 64, v75, v53[6], v59, v76, v77);
          AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)5,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::decompressSubblock((uint64_t)v157, 64, v75 + v78, v53[7], v59, v79, v80);
          uint64_t v81 = v145;
          a7 = v51;
          unint64_t v58 = v135;
          if (v145 && v146)
          {
            unint64_t v82 = (unint64_t)v143 << 6;
            uint64_t v83 = 4 * v144;
            unsigned int v84 = &v150[v82 + v83];
            unint64_t v85 = v141;
            uint64_t v86 = v142;
            unint64_t v87 = 4 * v146;
            if (v87 <= 1) {
              unint64_t v88 = 1;
            }
            else {
              unint64_t v88 = 4 * v146;
            }
            if (v88 > 7)
            {
              if (!v88 || (unint64_t v91 = (v88 - 1) >> 32) != 0)
              {
                uint64_t v114 = 0;
                do
                {
                  uint64_t v115 = 0;
                  do
                  {
                    v84[v115] = *(unsigned char *)(v85 + v115);
                    ++v115;
                  }
                  while (v87 > v115);
                  ++v114;
                  v84 += 64;
                  v85 += v86;
                }
                while (v114 != v81);
                goto LABEL_114;
              }
              int32x4_t v92 = &v150[v82 + v83];
              uint64_t v93 = v88 & 0x3FFFFFFE0;
              uint64_t v94 = v88 & 0x3FFFFFFF8;
              int32x4_t v95 = &v150[v82 + 16 + v83];
              char v96 = (long long *)(v141 + 16);
              int32x4_t v97 = v84;
              unint64_t v98 = v141;
              while (2)
              {
                uint64_t v99 = (char *)(v85 + v86 * v91);
                int32x4_t v100 = &v84[64 * v91];
                if ((unint64_t)(&v92[64 * v91] - v99) >= 0x20)
                {
                  if (v88 >= 0x20)
                  {
                    int32x4_t v103 = v96;
                    int32x4_t v104 = v95;
                    uint64_t v105 = v88 & 0x3FFFFFFE0;
                    do
                    {
                      long long v106 = *v103;
                      *(v104 - 1) = *(v103 - 1);
                      *int32x4_t v104 = v106;
                      v104 += 2;
                      v103 += 2;
                      v105 -= 32;
                    }
                    while (v105);
                    if (v88 == v93) {
                      goto LABEL_93;
                    }
                    uint64_t v102 = v88 & 0x3FFFFFFE0;
                    if ((v88 & 0x18) == 0)
                    {
                      v99 += v93;
                      v100 += v93;
                      int v101 = v88 & 0xFFFFFFE0;
                      goto LABEL_107;
                    }
                  }
                  else
                  {
                    uint64_t v102 = 0;
                  }
                  v100 += v94;
                  unint64_t v107 = v102 - (v88 & 0x3FFFFFFF8);
                  uint64_t v108 = (uint64_t *)(v98 + v102);
                  unint64_t v109 = &v97[v102];
                  do
                  {
                    uint64_t v110 = *v108++;
                    *v109++ = v110;
                    v107 += 8;
                  }
                  while (v107);
                  if (v88 != v94)
                  {
                    v99 += v94;
                    int v101 = v88 & 0xFFFFFFF8;
                    goto LABEL_107;
                  }
                }
                else
                {
                  int v101 = 0;
LABEL_107:
                  unsigned int v111 = v101 + 1;
                  do
                  {
                    char v112 = *v99++;
                    *v100++ = v112;
                  }
                  while (v87 > v111++);
                }
LABEL_93:
                ++v91;
                v95 += 64;
                char v96 = (long long *)((char *)v96 + v86);
                v98 += v86;
                v97 += 64;
                if (v91 == v81) {
                  goto LABEL_114;
                }
                continue;
              }
            }
            uint64_t v89 = 0;
            do
            {
              uint64_t v90 = 0;
              do
              {
                v84[v90] = *(unsigned char *)(v85 + v90);
                ++v90;
              }
              while (v87 > v90);
              ++v89;
              v84 += 64;
              v85 += v86;
            }
            while (v89 != v81);
          }
LABEL_114:
          AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)5,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::compressMacroblock((unint64_t)v150, 64, (uint64_t)v139, v140, v147, v148, *(_DWORD *)(*(void *)(v134 + 208) + 52));
LABEL_115:
          if (v137) {
            memcpy(v136, v57, 0x400uLL);
          }
          unint64_t v30 = v58;
          uint64_t result = v134;
          unsigned int v29 = v131;
        }
        while (v58 != (v125 >> 4) + 1);
        ++v19;
      }
      while (v19 != v116);
    }
  }
  return result;
}

uint64_t AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)3>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10, uint64_t a11, char a12)
{
  uint64_t v12 = MEMORY[0x270FA5388](a1);
  unsigned int v14 = v13;
  uint64_t v16 = v15;
  int v18 = v17;
  int v20 = v19;
  uint64_t v115 = v21;
  uint64_t v116 = v22;
  uint64_t v111 = v23;
  uint64_t v24 = v12;
  uint64_t v147 = *MEMORY[0x263EF8340];
  size_t v110 = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(v12, 0);
  unsigned int v119 = v14;
  uint64_t v25 = v14 >> 4;
  unsigned int v109 = v14 + a10 - 1;
  unsigned int v26 = v109 >> 4;
  uint64_t v120 = v24;
  if (*(void *)(v24 + 168)) {
    int v27 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v27 = 0;
  }
  BOOL v28 = (v27 & 0xD00) == 0 || v27 == 768;
  int v29 = v27 & 0xE00;
  int v31 = !v28 && v29 != 1024;
  int v126 = v31;
  uint64_t result = v24;
  if (v25 <= v26)
  {
    unsigned int v114 = v16 + a9 - 1;
    if (v16 >> 4 <= v114 >> 4)
    {
      uint64_t v123 = (v20 - 1) >> 4;
      uint64_t v108 = (v18 - 1) >> 4;
      int v122 = ((v20 - 1) & 0xF) + 1;
      int v107 = ((v18 - 1) & 0xF) + 1;
      unint64_t v113 = v16;
      uint64_t v105 = v26 + 1;
      unint64_t v106 = (unint64_t)v16 >> 4;
      do
      {
        unsigned int v33 = (16 * v25) | 0xF;
        if (16 * (int)v25 <= v119) {
          unsigned int v34 = v119;
        }
        else {
          unsigned int v34 = 16 * v25;
        }
        if (v109 < v33) {
          unsigned int v33 = v109;
        }
        unsigned int v112 = v34 - 16 * v25;
        int v118 = v33 - v34 + 1;
        if (v25 == v108) {
          unsigned int v35 = v107;
        }
        else {
          unsigned int v35 = 16;
        }
        uint64_t v117 = v111 + (v34 - v119) * a11;
        unint64_t v36 = v106;
        unsigned int v121 = v35;
        do
        {
          unint64_t v37 = 16 * v36;
          unsigned int v38 = 16 * (v36 + 1) - 1;
          if (16 * (int)v36 <= v16) {
            int v39 = v16;
          }
          else {
            int v39 = 16 * v36;
          }
          if (v114 < v38) {
            unsigned int v38 = v114;
          }
          int v40 = v38 - v39 + 1;
          if (v36 == v123) {
            unsigned int v41 = v122;
          }
          else {
            unsigned int v41 = 16;
          }
          BOOL v42 = 1;
          if (16 * (int)v25 >= v119 && v37 >= v113)
          {
            int v43 = v122;
            if (v36 != v123) {
              int v43 = 16;
            }
            BOOL v42 = v40 != v43 || v118 != v35;
          }
          unsigned int v45 = *(_DWORD *)(result + 128) >> (*(unsigned char *)(result + 144) + a12);
          if (v45 <= 1) {
            unsigned int v45 = 1;
          }
          unsigned int v46 = v45 + 15;
          if (v46 < 0x20) {
            unsigned int v47 = 0;
          }
          else {
            unsigned int v47 = 32 - __clz(~(-1 << -(char)__clz((v46 >> 4) - 1)));
          }
          unsigned int v48 = *(_DWORD *)(result + 132) >> (*(unsigned char *)(result + 144) + a12);
          if (v48 <= 1) {
            unsigned int v48 = 1;
          }
          unsigned int v49 = v48 + 15;
          if (v49 < 0x20) {
            unsigned int v50 = 0;
          }
          else {
            unsigned int v50 = 32 - __clz(~(-1 << -(char)__clz((v49 >> 4) - 1)));
          }
          unint64_t v124 = v36 + 1;
          if (v50 | v47)
          {
            int v51 = 0;
            uint64_t v52 = 0;
            BOOL v53 = v47 != 0;
            BOOL v54 = v50 != 0;
            int v55 = 1;
            do
            {
              --v47;
              if (v53) {
                v52 |= (unint64_t)(v55 & v36) << v51++;
              }
              else {
                unsigned int v47 = 0;
              }
              --v50;
              if (v54) {
                v52 |= (unint64_t)(v55 & v25) << v51++;
              }
              else {
                unsigned int v50 = 0;
              }
              v55 *= 2;
              --v51;
              BOOL v54 = v50 != 0;
              BOOL v53 = v47 != 0;
            }
            while (v50 | v47);
          }
          else
          {
            uint64_t v52 = 0;
          }
          size_t v56 = v25 * v110 + (v36 << 11);
          uint64_t v57 = v16;
          int v58 = v41 < 0x10 || v42;
          int v59 = (unsigned __int8 *)(v116 + 8 * v52);
          unint64_t v60 = v117 + 8 * (v39 - v16);
          int32x4_t v61 = (void *)(v115 + v56);
          if (v35 < 0x10) {
            int v62 = 1;
          }
          else {
            int v62 = v58;
          }
          unsigned int v125 = v61;
          if (v126)
          {
            uint64_t v63 = __dst;
            if (!v62) {
              goto LABEL_77;
            }
            memcpy(__dst, v61, sizeof(__dst));
            LOBYTE(v35) = v121;
            uint64_t result = v120;
          }
          else
          {
            uint64_t v63 = v61;
            if (!v62)
            {
LABEL_77:
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::compressMacroblock(v60, a11, (uint64_t)v63, v59, v41, v35);
              goto LABEL_78;
            }
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE19ELj1ELh0ELNS7_13SubblockOrderE1EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder3EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = result;
          uint64_t v128 = v63;
          unsigned __int8 v136 = v41;
          unsigned __int8 v137 = v35;
          unsigned int v132 = v112;
          unsigned int v133 = v39 - v37;
          int v129 = v59;
          unint64_t v130 = v60;
          uint64_t v131 = a11;
          unsigned int v134 = v118;
          unsigned int v135 = v40;
          if (v42)
          {
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(result + 8) + 7384), block);
LABEL_78:
            uint64_t v16 = v57;
            unint64_t v64 = v124;
            goto LABEL_109;
          }
          uint64_t v65 = (uint64_t)&v63[AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v139, 128, (uint64_t)v63, *v59)];
          uint64_t v66 = v65
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v140, 128, v65, v59[1]);
          uint64_t v67 = v66
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v141, 128, v66, v59[2]);
          uint64_t v68 = v67
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v142, 128, v67, v59[3]);
          uint64_t v69 = v68
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v143, 128, v68, v59[4]);
          uint64_t v70 = v69
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v144, 128, v69, v59[5]);
          uint64_t v71 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v145, 128, v70, v59[6]);
          AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v146, 128, v70 + v71, v59[7]);
          uint64_t v72 = v134;
          uint64_t v16 = v57;
          unint64_t v64 = v124;
          if (v134 && v135)
          {
            unint64_t v73 = (unint64_t)v132 << 7;
            uint64_t v74 = 8 * v133;
            uint64_t v75 = (char *)v139 + v73 + v74;
            unint64_t v76 = v130;
            uint64_t v77 = v131;
            unint64_t v78 = 8 * v135;
            if (v78 <= 1) {
              unint64_t v79 = 1;
            }
            else {
              unint64_t v79 = 8 * v135;
            }
            if (v79)
            {
              unint64_t v80 = (v79 - 1) >> 32;
              if (!v80)
              {
                uint64_t v81 = (char *)v139 + v73 + v74;
                uint64_t v82 = v79 & 0x7FFFFFFE0;
                uint64_t v83 = v79 & 0x7FFFFFFF8;
                unsigned int v84 = (char *)&v139[1] + v73 + v74;
                unint64_t v85 = (long long *)(v130 + 16);
                uint64_t v86 = v75;
                unint64_t v87 = v130;
                while (1)
                {
                  unint64_t v88 = (char *)(v76 + v77 * v80);
                  uint64_t v89 = &v75[128 * v80];
                  if ((unint64_t)(&v81[128 * v80] - v88) < 0x20)
                  {
                    int v90 = 0;
                    goto LABEL_101;
                  }
                  if (v79 >= 0x20)
                  {
                    int32x4_t v92 = v85;
                    uint64_t v93 = v84;
                    uint64_t v94 = v79 & 0x7FFFFFFE0;
                    do
                    {
                      long long v95 = *v92;
                      *(v93 - 1) = *(v92 - 1);
                      *uint64_t v93 = v95;
                      v93 += 2;
                      v92 += 2;
                      v94 -= 32;
                    }
                    while (v94);
                    if (v79 == v82) {
                      goto LABEL_87;
                    }
                    uint64_t v91 = v79 & 0x7FFFFFFE0;
                    if ((v79 & 0x18) == 0)
                    {
                      v88 += v82;
                      v89 += v82;
                      int v90 = v79 & 0xFFFFFFE0;
                      goto LABEL_101;
                    }
                  }
                  else
                  {
                    uint64_t v91 = 0;
                  }
                  v89 += v83;
                  unint64_t v96 = v91 - (v79 & 0x7FFFFFFF8);
                  int32x4_t v97 = (uint64_t *)(v87 + v91);
                  unint64_t v98 = &v86[v91];
                  do
                  {
                    uint64_t v99 = *v97++;
                    *(void *)unint64_t v98 = v99;
                    v98 += 8;
                    v96 += 8;
                  }
                  while (v96);
                  if (v79 == v83) {
                    goto LABEL_87;
                  }
                  v88 += v83;
                  int v90 = v79 & 0xFFFFFFF8;
LABEL_101:
                  unsigned int v100 = v90 + 1;
                  do
                  {
                    char v101 = *v88++;
                    *v89++ = v101;
                  }
                  while (v78 > v100++);
LABEL_87:
                  ++v80;
                  v84 += 128;
                  unint64_t v85 = (long long *)((char *)v85 + v77);
                  v87 += v77;
                  v86 += 128;
                  if (v80 == v72) {
                    goto LABEL_108;
                  }
                }
              }
            }
            uint64_t v103 = 0;
            do
            {
              uint64_t v104 = 0;
              do
              {
                v75[v104] = *(unsigned char *)(v76 + v104);
                ++v104;
              }
              while (v78 > v104);
              ++v103;
              v75 += 128;
              v76 += v77;
            }
            while (v103 != v72);
          }
LABEL_108:
          AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v139, 128, (uint64_t)v128, v129, v136, v137);
LABEL_109:
          if (v126) {
            memcpy(v125, v63, 0x800uLL);
          }
          unint64_t v36 = v64;
          uint64_t result = v120;
          unsigned int v35 = v121;
        }
        while (v64 != (v114 >> 4) + 1);
        ++v25;
      }
      while (v25 != v105);
    }
  }
  return result;
}

uint64_t AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)3>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10, uint64_t a11, char a12)
{
  uint64_t v12 = MEMORY[0x270FA5388](a1);
  unsigned int v14 = v13;
  unsigned int v16 = v15;
  int v18 = v17;
  int v20 = v19;
  uint64_t v181 = v21;
  uint64_t v182 = v22;
  uint64_t v175 = v23;
  uint64_t v24 = v12;
  uint64_t v211 = *MEMORY[0x263EF8340];
  size_t v174 = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(v12, 0);
  unsigned int v185 = v14;
  uint64_t v25 = v14 >> 4;
  unsigned int v173 = v14 + a10 - 1;
  unsigned int v26 = v173 >> 4;
  uint64_t v186 = v24;
  if (*(void *)(v24 + 168)) {
    int v27 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v27 = 0;
  }
  BOOL v28 = (v27 & 0xD00) == 0 || v27 == 768;
  int v29 = v27 & 0xE00;
  int v31 = !v28 && v29 != 1024;
  int v190 = v31;
  uint64_t result = v24;
  if (v25 <= v26)
  {
    unsigned int v180 = v16 + a9 - 1;
    if (v16 >> 4 <= v180 >> 4)
    {
      uint64_t v33 = a11;
      uint64_t v188 = (v20 - 1) >> 4;
      uint64_t v172 = (v18 - 1) >> 4;
      int v187 = ((v20 - 1) & 0xF) + 1;
      int v171 = ((v18 - 1) & 0xF) + 1;
      unint64_t v178 = v16;
      uint64_t v169 = v26 + 1;
      unint64_t v170 = (unint64_t)v16 >> 4;
      unsigned int v179 = v16;
      do
      {
        unsigned int v34 = (16 * v25) | 0xF;
        if (16 * (int)v25 <= v185) {
          unsigned int v35 = v185;
        }
        else {
          unsigned int v35 = 16 * v25;
        }
        if (v173 < v34) {
          unsigned int v34 = v173;
        }
        unsigned int v177 = v35 - 16 * v25;
        int v184 = v34 - v35 + 1;
        if (v25 == v172) {
          unsigned int v36 = v171;
        }
        else {
          unsigned int v36 = 16;
        }
        uint64_t v183 = v175 + (v35 - v185) * v33;
        unint64_t v37 = v170;
        do
        {
          unint64_t v38 = 16 * v37;
          unint64_t v189 = v37 + 1;
          unsigned int v39 = 16 * (v37 + 1) - 1;
          if (16 * (int)v37 <= v16) {
            unsigned int v40 = v16;
          }
          else {
            unsigned int v40 = 16 * v37;
          }
          if (v180 < v39) {
            unsigned int v39 = v180;
          }
          int v41 = v39 - v40 + 1;
          if (v37 == v188) {
            unsigned int v42 = v187;
          }
          else {
            unsigned int v42 = 16;
          }
          BOOL v43 = 1;
          if (16 * (int)v25 >= v185 && v38 >= v178)
          {
            int v44 = v187;
            if (v37 != v188) {
              int v44 = 16;
            }
            BOOL v43 = v41 != v44 || v184 != v36;
          }
          unsigned int v46 = *(_DWORD *)(result + 128) >> (*(unsigned char *)(result + 144) + a12);
          if (v46 <= 1) {
            unsigned int v46 = 1;
          }
          unsigned int v47 = v46 + 15;
          if (v47 < 0x20) {
            unsigned int v48 = 0;
          }
          else {
            unsigned int v48 = 32 - __clz(~(-1 << -(char)__clz((v47 >> 4) - 1)));
          }
          unsigned int v49 = *(_DWORD *)(result + 132) >> (*(unsigned char *)(result + 144) + a12);
          if (v49 <= 1) {
            unsigned int v49 = 1;
          }
          unsigned int v50 = v49 + 15;
          if (v50 < 0x20)
          {
            unsigned int v51 = 0;
            if (!v48)
            {
LABEL_65:
              uint64_t v53 = 0;
              goto LABEL_66;
            }
          }
          else
          {
            unsigned int v51 = 32 - __clz(~(-1 << -(char)__clz((v50 >> 4) - 1)));
            if (!(v51 | v48)) {
              goto LABEL_65;
            }
          }
          int v52 = 0;
          uint64_t v53 = 0;
          BOOL v54 = v48 != 0;
          BOOL v55 = v51 != 0;
          int v56 = 1;
          do
          {
            --v48;
            if (v54) {
              v53 |= (unint64_t)(v56 & v37) << v52++;
            }
            else {
              unsigned int v48 = 0;
            }
            --v51;
            if (v55) {
              v53 |= (unint64_t)(v56 & v25) << v52++;
            }
            else {
              unsigned int v51 = 0;
            }
            v56 *= 2;
            --v52;
            BOOL v55 = v51 != 0;
            BOOL v54 = v48 != 0;
          }
          while (v51 | v48);
LABEL_66:
          size_t v57 = v25 * v174 + (v37 << 11);
          unsigned int v58 = v40 - v16;
          int v59 = v42 < 0x10 || v43;
          unint64_t v60 = (unsigned __int8 *)(v182 + 8 * v53);
          uint64_t v61 = v183 + 8 * v58;
          int v62 = (void *)(v181 + v57);
          if (v36 < 0x10) {
            int v63 = 1;
          }
          else {
            int v63 = v59;
          }
          if (v190)
          {
            if (!v63)
            {
              uint64_t v67 = __dst;
LABEL_79:
              uint64_t v71 = 0;
              uint64_t v72 = v67;
              do
              {
                uint64_t v95 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)1,1u>::kSubblockPositions[v71 + 1];
                uint64_t v96 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)1,1u>::kSubblockPositions[v71];
                unsigned int v97 = (v42 - 8 * v96) & ~((int)(v42 - 8 * v96) >> 31);
                if (v97 >= 8) {
                  unsigned int v97 = 8;
                }
                unsigned int v98 = (v36 - 4 * v95) & ~((int)(v36 - 4 * v95) >> 31);
                if (v98 >= 4) {
                  unsigned int v98 = 4;
                }
                if (v97) {
                  BOOL v99 = v98 == 0;
                }
                else {
                  BOOL v99 = 1;
                }
                if (v99)
                {
                  char v94 = 0;
                }
                else
                {
                  unint64_t v73 = (long long *)(v61 + 4 * a11 * v95 + (v96 << 6));
                  uint64_t v74 = (long long *)((char *)v73 + v33);
                  long long v76 = *v73;
                  long long v77 = v73[1];
                  long long v78 = v73[2];
                  long long v79 = v73[3];
                  uint64_t v75 = (long long *)((char *)v73 + 2 * a11);
                  long long v80 = v74[2];
                  long long v81 = v74[3];
                  long long v82 = *v74;
                  long long v84 = *v75;
                  long long v85 = v75[1];
                  long long v86 = v75[2];
                  long long v87 = v75[3];
                  uint64_t v83 = (long long *)((char *)v75 + v33);
                  long long v88 = v77;
                  long long v89 = v74[1];
                  long long v90 = v83[1];
                  long long v91 = v83[2];
                  long long v92 = v83[3];
                  long long v93 = *v83;
                  *uint64_t v72 = v76;
                  v72[1] = v82;
                  v72[2] = v88;
                  v72[3] = v89;
                  v72[4] = v84;
                  v72[5] = v93;
                  v72[6] = v85;
                  v72[7] = v90;
                  v72[8] = v78;
                  v72[9] = v80;
                  v72[10] = v79;
                  v72[11] = v81;
                  v72[12] = v86;
                  v72[13] = v91;
                  v72[14] = v87;
                  v72[15] = v92;
                  v72 += 16;
                  char v94 = -1;
                }
                *v60++ = v94;
                v71 += 2;
              }
              while (v71 != 16);
              unsigned int v16 = v179;
              unint64_t v70 = v189;
              goto LABEL_92;
            }
            unint64_t v64 = v62;
            int v65 = v41;
            BOOL v66 = v43;
            memcpy(__dst, v62, sizeof(__dst));
            BOOL v43 = v66;
            uint64_t v33 = a11;
            int v41 = v65;
            uint64_t v67 = __dst;
            int v62 = v64;
            uint64_t result = v186;
          }
          else
          {
            uint64_t v67 = v62;
            if (!v63) {
              goto LABEL_79;
            }
          }
          uint64_t v68 = v62;
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE19ELj1ELh1ELNS7_13SubblockOrderE1EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder3EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = result;
          unsigned int v192 = v67;
          unsigned __int8 v200 = v42;
          unsigned __int8 v201 = v36;
          unsigned int v196 = v177;
          unsigned int v197 = v40 - v38;
          unsigned int v193 = v60;
          uint64_t v194 = v61;
          uint64_t v195 = v33;
          unsigned int v198 = v184;
          unsigned int v199 = v41;
          if (v43)
          {
            uint64_t v69 = v67;
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(result + 8) + 7384), block);
            uint64_t v67 = v69;
            uint64_t result = v186;
            unsigned int v16 = v179;
            unint64_t v70 = v189;
            int v62 = v68;
            goto LABEL_92;
          }
          unsigned int v176 = v67;
          uint64_t v100 = (uint64_t)&v67[AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v203, 128, (uint64_t)v67, *v60)];
          uint64_t v101 = v100
               + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v204, 128, v100, v60[1]);
          uint64_t v102 = v101
               + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v205, 128, v101, v60[2]);
          uint64_t v103 = v102
               + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v206, 128, v102, v60[3]);
          uint64_t v104 = v103
               + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v207, 128, v103, v60[4]);
          uint64_t v105 = v104
               + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v208, 128, v104, v60[5]);
          uint64_t v106 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v209, 128, v105, v60[6]);
          AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v210, 128, v105 + v106, v60[7]);
          uint64_t v107 = v198;
          if (v198 && v199)
          {
            unint64_t v108 = (unint64_t)v196 << 7;
            uint64_t v109 = 8 * v197;
            size_t v110 = (char *)v203 + v108 + v109;
            uint64_t v111 = v194;
            uint64_t v112 = v195;
            unint64_t v113 = 8 * v199;
            if (v113 <= 1) {
              unint64_t v114 = 1;
            }
            else {
              unint64_t v114 = 8 * v199;
            }
            if (v114)
            {
              unint64_t v115 = (v114 - 1) >> 32;
              if (!v115)
              {
                uint64_t v116 = (char *)v203 + v108 + v109;
                uint64_t v117 = v114 & 0x7FFFFFFE0;
                uint64_t v118 = v114 & 0x7FFFFFFF8;
                unsigned int v119 = (char *)&v203[1] + v108 + v109;
                uint64_t v120 = (long long *)(v194 + 16);
                unsigned int v121 = v110;
                uint64_t v122 = v194;
                while (1)
                {
                  uint64_t v123 = (char *)(v111 + v112 * v115);
                  unint64_t v124 = &v110[128 * v115];
                  if ((unint64_t)(&v116[128 * v115] - v123) < 0x20)
                  {
                    int v125 = 0;
                    goto LABEL_116;
                  }
                  if (v114 >= 0x20)
                  {
                    uint64_t v127 = v120;
                    uint64_t v128 = v119;
                    uint64_t v129 = v114 & 0x7FFFFFFE0;
                    do
                    {
                      long long v130 = *v127;
                      *(v128 - 1) = *(v127 - 1);
                      *uint64_t v128 = v130;
                      v128 += 2;
                      v127 += 2;
                      v129 -= 32;
                    }
                    while (v129);
                    if (v114 == v117) {
                      goto LABEL_102;
                    }
                    uint64_t v126 = v114 & 0x7FFFFFFE0;
                    if ((v114 & 0x18) == 0)
                    {
                      v123 += v117;
                      v124 += v117;
                      int v125 = v114 & 0xFFFFFFE0;
                      goto LABEL_116;
                    }
                  }
                  else
                  {
                    uint64_t v126 = 0;
                  }
                  v124 += v118;
                  unint64_t v131 = v126 - (v114 & 0x7FFFFFFF8);
                  unsigned int v132 = (uint64_t *)(v122 + v126);
                  unsigned int v133 = &v121[v126];
                  do
                  {
                    uint64_t v134 = *v132++;
                    *(void *)unsigned int v133 = v134;
                    v133 += 8;
                    v131 += 8;
                  }
                  while (v131);
                  if (v114 == v118) {
                    goto LABEL_102;
                  }
                  v123 += v118;
                  int v125 = v114 & 0xFFFFFFF8;
LABEL_116:
                  unsigned int v135 = v125 + 1;
                  do
                  {
                    char v136 = *v123++;
                    *v124++ = v136;
                  }
                  while (v113 > v135++);
LABEL_102:
                  ++v115;
                  v119 += 128;
                  uint64_t v120 = (long long *)((char *)v120 + v112);
                  v122 += v112;
                  v121 += 128;
                  if (v115 == v107) {
                    goto LABEL_123;
                  }
                }
              }
            }
            uint64_t v138 = 0;
            do
            {
              uint64_t v139 = 0;
              do
              {
                v110[v139] = *(unsigned char *)(v111 + v139);
                ++v139;
              }
              while (v113 > v139);
              ++v138;
              v110 += 128;
              v111 += v112;
            }
            while (v138 != v107);
          }
LABEL_123:
          uint64_t v140 = 0;
          unint64_t v141 = v192;
          uint64_t v142 = (char *)v193;
          int v143 = v200;
          int v144 = v201;
          unsigned int v16 = v179;
          uint64_t result = v186;
          unint64_t v70 = v189;
          int v62 = v68;
          uint64_t v67 = v176;
          do
          {
            uint64_t v164 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)1,1u>::kSubblockPositions[v140 + 1];
            uint64_t v165 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)1,1u>::kSubblockPositions[v140];
            unsigned int v166 = (v143 - 8 * v165) & ~((v143 - 8 * (int)v165) >> 31);
            if (v166 >= 8) {
              unsigned int v166 = 8;
            }
            unsigned int v167 = (v144 - 4 * v164) & ~((v144 - 4 * (int)v164) >> 31);
            if (v167 >= 4) {
              unsigned int v167 = 4;
            }
            if (v166) {
              BOOL v168 = v167 == 0;
            }
            else {
              BOOL v168 = 1;
            }
            if (v168)
            {
              char v163 = 0;
            }
            else
            {
              unsigned int v145 = &v203[32 * v164 + 4 * v165];
              long long v146 = v145[2];
              long long v147 = v145[10];
              long long v148 = v145[3];
              long long v149 = v145[11];
              long long v150 = *v145;
              long long v151 = v145[8];
              long long v152 = v145[1];
              long long v153 = v145[16];
              long long v154 = v145[17];
              long long v155 = v145[18];
              long long v156 = v145[19];
              long long v157 = v145[9];
              v145 += 24;
              long long v158 = v145[1];
              long long v159 = v145[2];
              long long v160 = v145[3];
              long long v161 = *v145;
              *unint64_t v141 = v150;
              v141[1] = v151;
              v141[2] = v152;
              v141[3] = v157;
              long long v141[4] = v153;
              v141[5] = v161;
              v141[6] = v154;
              v141[7] = v158;
              v141[8] = v146;
              v141[9] = v147;
              v141[10] = v148;
              v141[11] = v149;
              unsigned int v162 = v141 + 12;
              v141 += 16;
              char v163 = -1;
              *unsigned int v162 = v155;
              v162[1] = v159;
              v162[2] = v156;
              v162[3] = v160;
            }
            *v142++ = v163;
            v140 += 2;
          }
          while (v140 != 16);
LABEL_92:
          if (v190)
          {
            memcpy(v62, v67, 0x800uLL);
            uint64_t result = v186;
          }
          unint64_t v37 = v70;
        }
        while (v70 != (v180 >> 4) + 1);
        ++v25;
      }
      while (v25 != v169);
    }
  }
  return result;
}

uint64_t AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>,false,(AGXHardwareTextureMemoryOrder)3>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10, uint64_t a11, char a12)
{
  uint64_t v12 = MEMORY[0x270FA5388](a1);
  unsigned int v14 = v13;
  uint64_t v16 = v15;
  int v18 = v17;
  int v20 = v19;
  uint64_t v116 = v21;
  uint64_t v117 = v22;
  uint64_t v112 = v23;
  uint64_t v24 = v12;
  uint64_t v148 = *MEMORY[0x263EF8340];
  size_t v111 = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(v12, 0);
  unsigned int v120 = v14;
  uint64_t v25 = v14 >> 4;
  unsigned int v110 = v14 + a10 - 1;
  unsigned int v26 = v110 >> 4;
  uint64_t v124 = v24;
  if (*(void *)(v24 + 168)) {
    int v27 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v27 = 0;
  }
  BOOL v28 = (v27 & 0xD00) == 0 || v27 == 768;
  int v29 = v27 & 0xE00;
  int v31 = !v28 && v29 != 1024;
  int v127 = v31;
  uint64_t result = v24;
  if (v25 <= v26)
  {
    unsigned int v115 = v16 + a9 - 1;
    if (v16 >> 4 <= v115 >> 4)
    {
      uint64_t v123 = (v20 - 1) >> 4;
      uint64_t v109 = (v18 - 1) >> 4;
      int v122 = ((v20 - 1) & 0xF) + 1;
      int v108 = ((v18 - 1) & 0xF) + 1;
      unint64_t v114 = v16;
      uint64_t v106 = v26 + 1;
      unint64_t v107 = (unint64_t)v16 >> 4;
      do
      {
        unsigned int v33 = (16 * v25) | 0xF;
        if (16 * (int)v25 <= v120) {
          unsigned int v34 = v120;
        }
        else {
          unsigned int v34 = 16 * v25;
        }
        if (v110 < v33) {
          unsigned int v33 = v110;
        }
        unsigned int v113 = v34 - 16 * v25;
        int v119 = v33 - v34 + 1;
        if (v25 == v109) {
          unsigned int v35 = v108;
        }
        else {
          unsigned int v35 = 16;
        }
        uint64_t v118 = v112 + (v34 - v120) * a11;
        unint64_t v36 = v107;
        unsigned int v121 = v35;
        do
        {
          unint64_t v37 = 16 * v36;
          unsigned int v38 = 16 * (v36 + 1) - 1;
          if (16 * (int)v36 <= v16) {
            int v39 = v16;
          }
          else {
            int v39 = 16 * v36;
          }
          if (v115 < v38) {
            unsigned int v38 = v115;
          }
          int v40 = v38 - v39 + 1;
          if (v36 == v123) {
            unsigned int v41 = v122;
          }
          else {
            unsigned int v41 = 16;
          }
          BOOL v42 = 1;
          if (16 * (int)v25 >= v120 && v37 >= v114)
          {
            int v43 = v122;
            if (v36 != v123) {
              int v43 = 16;
            }
            BOOL v42 = v40 != v43 || v119 != v35;
          }
          unsigned int v45 = *(_DWORD *)(result + 128) >> (*(unsigned char *)(result + 144) + a12);
          if (v45 <= 1) {
            unsigned int v45 = 1;
          }
          unsigned int v46 = v45 + 15;
          if (v46 < 0x20) {
            unsigned int v47 = 0;
          }
          else {
            unsigned int v47 = 32 - __clz(~(-1 << -(char)__clz((v46 >> 4) - 1)));
          }
          unsigned int v48 = *(_DWORD *)(result + 132) >> (*(unsigned char *)(result + 144) + a12);
          if (v48 <= 1) {
            unsigned int v48 = 1;
          }
          unsigned int v49 = v48 + 15;
          if (v49 < 0x20) {
            unsigned int v50 = 0;
          }
          else {
            unsigned int v50 = 32 - __clz(~(-1 << -(char)__clz((v49 >> 4) - 1)));
          }
          unint64_t v125 = v36 + 1;
          if (v50 | v47)
          {
            int v51 = 0;
            uint64_t v52 = 0;
            BOOL v53 = v47 != 0;
            BOOL v54 = v50 != 0;
            int v55 = 1;
            do
            {
              --v47;
              if (v53) {
                v52 |= (unint64_t)(v55 & v36) << v51++;
              }
              else {
                unsigned int v47 = 0;
              }
              --v50;
              if (v54) {
                v52 |= (unint64_t)(v55 & v25) << v51++;
              }
              else {
                unsigned int v50 = 0;
              }
              v55 *= 2;
              --v51;
              BOOL v54 = v50 != 0;
              BOOL v53 = v47 != 0;
            }
            while (v50 | v47);
          }
          else
          {
            uint64_t v52 = 0;
          }
          size_t v56 = v25 * v111 + (v36 << 10);
          uint64_t v57 = v16;
          int v58 = v41 < 0x10 || v42;
          int v59 = (unsigned __int8 *)(v117 + 8 * v52);
          unint64_t v60 = v118 + 8 * (v39 - v16);
          uint64_t v61 = (void *)(v116 + v56);
          if (v35 < 0x10) {
            int v62 = 1;
          }
          else {
            int v62 = v58;
          }
          uint64_t v126 = v61;
          if (v127)
          {
            int v63 = __dst;
            if (!v62) {
              goto LABEL_77;
            }
            memcpy(__dst, v61, sizeof(__dst));
            LOBYTE(v35) = v121;
            uint64_t result = v124;
          }
          else
          {
            int v63 = v61;
            if (!v62)
            {
LABEL_77:
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::compressMacroblock(v60, a11, (unint64_t)v63, v59, v41, v35, *(_DWORD *)(*(void *)(result + 208) + 52));
              goto LABEL_78;
            }
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE19ELj1ELh0ELNS7_13SubblockOrderE1EL19AGXTextureFootprint1EEELb0EL29AGXHardwareTextureMemoryOrder3EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = result;
          uint64_t v129 = v63;
          unsigned __int8 v137 = v41;
          unsigned __int8 v138 = v35;
          unsigned int v133 = v113;
          unsigned int v134 = v39 - v37;
          long long v130 = v59;
          unint64_t v131 = v60;
          uint64_t v132 = a11;
          unsigned int v135 = v119;
          unsigned int v136 = v40;
          if (v42)
          {
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(result + 8) + 7384), block);
LABEL_78:
            uint64_t v16 = v57;
            unint64_t v64 = v125;
            goto LABEL_109;
          }
          int v65 = *(_DWORD *)(*(void *)(result + 208) + 52);
          unint64_t v66 = (unint64_t)&v63[AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)1>::decompressSubblock(v140, 128, (unint64_t)v63, *v59, v65)];
          unint64_t v67 = v66
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)1>::decompressSubblock(v141, 128, v66, v59[1], v65);
          unint64_t v68 = v67
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)1>::decompressSubblock(v142, 128, v67, v59[2], v65);
          unint64_t v69 = v68
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)1>::decompressSubblock(v143, 128, v68, v59[3], v65);
          unint64_t v70 = v69
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)1>::decompressSubblock(v144, 128, v69, v59[4], v65);
          unint64_t v71 = v70
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)1>::decompressSubblock(v145, 128, v70, v59[5], v65);
          uint64_t v72 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)1>::decompressSubblock(v146, 128, v71, v59[6], v65);
          AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)1>::decompressSubblock(v147, 128, v71 + v72, v59[7], v65);
          uint64_t v73 = v135;
          uint64_t v16 = v57;
          unint64_t v64 = v125;
          if (v135 && v136)
          {
            unint64_t v74 = (unint64_t)v133 << 7;
            uint64_t v75 = 8 * v134;
            long long v76 = (char *)v140 + v74 + v75;
            unint64_t v77 = v131;
            uint64_t v78 = v132;
            unint64_t v79 = 8 * v136;
            if (v79 <= 1) {
              unint64_t v80 = 1;
            }
            else {
              unint64_t v80 = 8 * v136;
            }
            if (v80)
            {
              unint64_t v81 = (v80 - 1) >> 32;
              if (!v81)
              {
                long long v82 = (char *)v140 + v74 + v75;
                uint64_t v83 = v80 & 0x7FFFFFFE0;
                uint64_t v84 = v80 & 0x7FFFFFFF8;
                long long v85 = (char *)&v140[1] + v74 + v75;
                long long v86 = (long long *)(v131 + 16);
                long long v87 = v76;
                unint64_t v88 = v131;
                while (1)
                {
                  long long v89 = (char *)(v77 + v78 * v81);
                  long long v90 = &v76[128 * v81];
                  if ((unint64_t)(&v82[128 * v81] - v89) < 0x20)
                  {
                    int v91 = 0;
                    goto LABEL_101;
                  }
                  if (v80 >= 0x20)
                  {
                    long long v93 = v86;
                    char v94 = v85;
                    uint64_t v95 = v80 & 0x7FFFFFFE0;
                    do
                    {
                      long long v96 = *v93;
                      *(v94 - 1) = *(v93 - 1);
                      *char v94 = v96;
                      v94 += 2;
                      v93 += 2;
                      v95 -= 32;
                    }
                    while (v95);
                    if (v80 == v83) {
                      goto LABEL_87;
                    }
                    uint64_t v92 = v80 & 0x7FFFFFFE0;
                    if ((v80 & 0x18) == 0)
                    {
                      v89 += v83;
                      v90 += v83;
                      int v91 = v80 & 0xFFFFFFE0;
                      goto LABEL_101;
                    }
                  }
                  else
                  {
                    uint64_t v92 = 0;
                  }
                  v90 += v84;
                  unint64_t v97 = v92 - (v80 & 0x7FFFFFFF8);
                  unsigned int v98 = (uint64_t *)(v88 + v92);
                  BOOL v99 = &v87[v92];
                  do
                  {
                    uint64_t v100 = *v98++;
                    *(void *)BOOL v99 = v100;
                    v99 += 8;
                    v97 += 8;
                  }
                  while (v97);
                  if (v80 == v84) {
                    goto LABEL_87;
                  }
                  v89 += v84;
                  int v91 = v80 & 0xFFFFFFF8;
LABEL_101:
                  unsigned int v101 = v91 + 1;
                  do
                  {
                    char v102 = *v89++;
                    *v90++ = v102;
                  }
                  while (v79 > v101++);
LABEL_87:
                  ++v81;
                  v85 += 128;
                  long long v86 = (long long *)((char *)v86 + v78);
                  v88 += v78;
                  v87 += 128;
                  if (v81 == v73) {
                    goto LABEL_108;
                  }
                }
              }
            }
            uint64_t v104 = 0;
            do
            {
              uint64_t v105 = 0;
              do
              {
                v76[v105] = *(unsigned char *)(v77 + v105);
                ++v105;
              }
              while (v79 > v105);
              ++v104;
              v76 += 128;
              v77 += v78;
            }
            while (v104 != v73);
          }
LABEL_108:
          AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::compressMacroblock((unint64_t)v140, 128, (unint64_t)v129, v130, v137, v138, *(_DWORD *)(*(void *)(v124 + 208) + 52));
LABEL_109:
          if (v127) {
            memcpy(v126, v63, 0x800uLL);
          }
          unint64_t v36 = v64;
          uint64_t result = v124;
          unsigned int v35 = v121;
        }
        while (v64 != (v115 >> 4) + 1);
        ++v25;
      }
      while (v25 != v106);
    }
  }
  return result;
}

uint64_t AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>,false,(AGXHardwareTextureMemoryOrder)3>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10, uint64_t a11, char a12)
{
  uint64_t v12 = MEMORY[0x270FA5388](a1);
  unsigned int v14 = v13;
  uint64_t v16 = v15;
  int v18 = v17;
  int v20 = v19;
  uint64_t v116 = v21;
  uint64_t v117 = v22;
  uint64_t v112 = v23;
  uint64_t v24 = v12;
  uint64_t v148 = *MEMORY[0x263EF8340];
  size_t v111 = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(v12, 0);
  unsigned int v120 = v14;
  uint64_t v25 = v14 >> 4;
  unsigned int v110 = v14 + a10 - 1;
  unsigned int v26 = v110 >> 4;
  uint64_t v124 = v24;
  if (*(void *)(v24 + 168)) {
    int v27 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v27 = 0;
  }
  BOOL v28 = (v27 & 0xD00) == 0 || v27 == 768;
  int v29 = v27 & 0xE00;
  int v31 = !v28 && v29 != 1024;
  int v127 = v31;
  uint64_t result = v24;
  if (v25 <= v26)
  {
    unsigned int v115 = v16 + a9 - 1;
    if (v16 >> 4 <= v115 >> 4)
    {
      uint64_t v123 = (v20 - 1) >> 4;
      uint64_t v109 = (v18 - 1) >> 4;
      int v122 = ((v20 - 1) & 0xF) + 1;
      int v108 = ((v18 - 1) & 0xF) + 1;
      unint64_t v114 = v16;
      uint64_t v106 = v26 + 1;
      unint64_t v107 = (unint64_t)v16 >> 4;
      do
      {
        unsigned int v33 = (16 * v25) | 0xF;
        if (16 * (int)v25 <= v120) {
          unsigned int v34 = v120;
        }
        else {
          unsigned int v34 = 16 * v25;
        }
        if (v110 < v33) {
          unsigned int v33 = v110;
        }
        unsigned int v113 = v34 - 16 * v25;
        int v119 = v33 - v34 + 1;
        if (v25 == v109) {
          unsigned int v35 = v108;
        }
        else {
          unsigned int v35 = 16;
        }
        uint64_t v118 = v112 + (v34 - v120) * a11;
        unint64_t v36 = v107;
        unsigned int v121 = v35;
        do
        {
          unint64_t v37 = 16 * v36;
          unsigned int v38 = 16 * (v36 + 1) - 1;
          if (16 * (int)v36 <= v16) {
            int v39 = v16;
          }
          else {
            int v39 = 16 * v36;
          }
          if (v115 < v38) {
            unsigned int v38 = v115;
          }
          int v40 = v38 - v39 + 1;
          if (v36 == v123) {
            unsigned int v41 = v122;
          }
          else {
            unsigned int v41 = 16;
          }
          BOOL v42 = 1;
          if (16 * (int)v25 >= v120 && v37 >= v114)
          {
            int v43 = v122;
            if (v36 != v123) {
              int v43 = 16;
            }
            BOOL v42 = v40 != v43 || v119 != v35;
          }
          unsigned int v45 = *(_DWORD *)(result + 128) >> (*(unsigned char *)(result + 144) + a12);
          if (v45 <= 1) {
            unsigned int v45 = 1;
          }
          unsigned int v46 = v45 + 15;
          if (v46 < 0x20) {
            unsigned int v47 = 0;
          }
          else {
            unsigned int v47 = 32 - __clz(~(-1 << -(char)__clz((v46 >> 4) - 1)));
          }
          unsigned int v48 = *(_DWORD *)(result + 132) >> (*(unsigned char *)(result + 144) + a12);
          if (v48 <= 1) {
            unsigned int v48 = 1;
          }
          unsigned int v49 = v48 + 15;
          if (v49 < 0x20) {
            unsigned int v50 = 0;
          }
          else {
            unsigned int v50 = 32 - __clz(~(-1 << -(char)__clz((v49 >> 4) - 1)));
          }
          unint64_t v125 = v36 + 1;
          if (v50 | v47)
          {
            int v51 = 0;
            uint64_t v52 = 0;
            BOOL v53 = v47 != 0;
            BOOL v54 = v50 != 0;
            int v55 = 1;
            do
            {
              --v47;
              if (v53) {
                v52 |= (unint64_t)(v55 & v36) << v51++;
              }
              else {
                unsigned int v47 = 0;
              }
              --v50;
              if (v54) {
                v52 |= (unint64_t)(v55 & v25) << v51++;
              }
              else {
                unsigned int v50 = 0;
              }
              v55 *= 2;
              --v51;
              BOOL v54 = v50 != 0;
              BOOL v53 = v47 != 0;
            }
            while (v50 | v47);
          }
          else
          {
            uint64_t v52 = 0;
          }
          uint64_t v56 = v25 * v111 + 768 * v36;
          uint64_t v57 = v16;
          int v58 = v41 < 0x10 || v42;
          int v59 = (unsigned __int8 *)(v117 + 8 * v52);
          unint64_t v60 = v118 + 8 * (v39 - v16);
          uint64_t v61 = (void *)(v116 + v56);
          if (v35 < 0x10) {
            int v62 = 1;
          }
          else {
            int v62 = v58;
          }
          uint64_t v126 = v61;
          if (v127)
          {
            int v63 = __dst;
            if (!v62) {
              goto LABEL_77;
            }
            memcpy(__dst, v61, sizeof(__dst));
            LOBYTE(v35) = v121;
            uint64_t result = v124;
          }
          else
          {
            int v63 = v61;
            if (!v62)
            {
LABEL_77:
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::compressMacroblock(v60, a11, (unint64_t)v63, v59, v41, v35, *(_DWORD *)(*(void *)(result + 208) + 52));
              goto LABEL_78;
            }
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE19ELj1ELh0ELNS7_13SubblockOrderE1EL19AGXTextureFootprint2EEELb0EL29AGXHardwareTextureMemoryOrder3EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = result;
          uint64_t v129 = v63;
          unsigned __int8 v137 = v41;
          unsigned __int8 v138 = v35;
          unsigned int v133 = v113;
          unsigned int v134 = v39 - v37;
          long long v130 = v59;
          unint64_t v131 = v60;
          uint64_t v132 = a11;
          unsigned int v135 = v119;
          unsigned int v136 = v40;
          if (v42)
          {
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(result + 8) + 7384), block);
LABEL_78:
            uint64_t v16 = v57;
            unint64_t v64 = v125;
            goto LABEL_109;
          }
          int v65 = *(_DWORD *)(*(void *)(result + 208) + 52);
          unint64_t v66 = (unint64_t)&v63[AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressSubblock(v140, 128, (unint64_t)v63, *v59, v65)];
          unint64_t v67 = v66
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressSubblock(v141, 128, v66, v59[1], v65);
          unint64_t v68 = v67
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressSubblock(v142, 128, v67, v59[2], v65);
          unint64_t v69 = v68
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressSubblock(v143, 128, v68, v59[3], v65);
          unint64_t v70 = v69
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressSubblock(v144, 128, v69, v59[4], v65);
          unint64_t v71 = v70
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressSubblock(v145, 128, v70, v59[5], v65);
          uint64_t v72 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressSubblock(v146, 128, v71, v59[6], v65);
          AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressSubblock(v147, 128, v71 + v72, v59[7], v65);
          uint64_t v73 = v135;
          uint64_t v16 = v57;
          unint64_t v64 = v125;
          if (v135 && v136)
          {
            unint64_t v74 = (unint64_t)v133 << 7;
            uint64_t v75 = 8 * v134;
            long long v76 = (char *)v140 + v74 + v75;
            unint64_t v77 = v131;
            uint64_t v78 = v132;
            unint64_t v79 = 8 * v136;
            if (v79 <= 1) {
              unint64_t v80 = 1;
            }
            else {
              unint64_t v80 = 8 * v136;
            }
            if (v80)
            {
              unint64_t v81 = (v80 - 1) >> 32;
              if (!v81)
              {
                long long v82 = (char *)v140 + v74 + v75;
                uint64_t v83 = v80 & 0x7FFFFFFE0;
                uint64_t v84 = v80 & 0x7FFFFFFF8;
                long long v85 = (char *)&v140[1] + v74 + v75;
                long long v86 = (long long *)(v131 + 16);
                long long v87 = v76;
                unint64_t v88 = v131;
                while (1)
                {
                  long long v89 = (char *)(v77 + v78 * v81);
                  long long v90 = &v76[128 * v81];
                  if ((unint64_t)(&v82[128 * v81] - v89) < 0x20)
                  {
                    int v91 = 0;
                    goto LABEL_101;
                  }
                  if (v80 >= 0x20)
                  {
                    long long v93 = v86;
                    char v94 = v85;
                    uint64_t v95 = v80 & 0x7FFFFFFE0;
                    do
                    {
                      long long v96 = *v93;
                      *(v94 - 1) = *(v93 - 1);
                      *char v94 = v96;
                      v94 += 2;
                      v93 += 2;
                      v95 -= 32;
                    }
                    while (v95);
                    if (v80 == v83) {
                      goto LABEL_87;
                    }
                    uint64_t v92 = v80 & 0x7FFFFFFE0;
                    if ((v80 & 0x18) == 0)
                    {
                      v89 += v83;
                      v90 += v83;
                      int v91 = v80 & 0xFFFFFFE0;
                      goto LABEL_101;
                    }
                  }
                  else
                  {
                    uint64_t v92 = 0;
                  }
                  v90 += v84;
                  unint64_t v97 = v92 - (v80 & 0x7FFFFFFF8);
                  unsigned int v98 = (uint64_t *)(v88 + v92);
                  BOOL v99 = &v87[v92];
                  do
                  {
                    uint64_t v100 = *v98++;
                    *(void *)BOOL v99 = v100;
                    v99 += 8;
                    v97 += 8;
                  }
                  while (v97);
                  if (v80 == v84) {
                    goto LABEL_87;
                  }
                  v89 += v84;
                  int v91 = v80 & 0xFFFFFFF8;
LABEL_101:
                  unsigned int v101 = v91 + 1;
                  do
                  {
                    char v102 = *v89++;
                    *v90++ = v102;
                  }
                  while (v79 > v101++);
LABEL_87:
                  ++v81;
                  v85 += 128;
                  long long v86 = (long long *)((char *)v86 + v78);
                  v88 += v78;
                  v87 += 128;
                  if (v81 == v73) {
                    goto LABEL_108;
                  }
                }
              }
            }
            uint64_t v104 = 0;
            do
            {
              uint64_t v105 = 0;
              do
              {
                v76[v105] = *(unsigned char *)(v77 + v105);
                ++v105;
              }
              while (v79 > v105);
              ++v104;
              v76 += 128;
              v77 += v78;
            }
            while (v104 != v73);
          }
LABEL_108:
          AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::compressMacroblock((unint64_t)v140, 128, (unint64_t)v129, v130, v137, v138, *(_DWORD *)(*(void *)(v124 + 208) + 52));
LABEL_109:
          if (v127) {
            memcpy(v126, v63, 0x800uLL);
          }
          unint64_t v36 = v64;
          uint64_t result = v124;
          unsigned int v35 = v121;
        }
        while (v64 != (v115 >> 4) + 1);
        ++v25;
      }
      while (v25 != v106);
    }
  }
  return result;
}

uint64_t AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>,false,(AGXHardwareTextureMemoryOrder)3>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10, uint64_t a11, char a12)
{
  uint64_t v12 = MEMORY[0x270FA5388](a1);
  unsigned int v14 = v13;
  uint64_t v16 = v15;
  int v18 = v17;
  int v20 = v19;
  uint64_t v116 = v21;
  uint64_t v117 = v22;
  uint64_t v112 = v23;
  uint64_t v24 = v12;
  uint64_t v148 = *MEMORY[0x263EF8340];
  size_t v111 = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(v12, 0);
  unsigned int v120 = v14;
  uint64_t v25 = v14 >> 4;
  unsigned int v110 = v14 + a10 - 1;
  unsigned int v26 = v110 >> 4;
  uint64_t v124 = v24;
  if (*(void *)(v24 + 168)) {
    int v27 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v27 = 0;
  }
  BOOL v28 = (v27 & 0xD00) == 0 || v27 == 768;
  int v29 = v27 & 0xE00;
  int v31 = !v28 && v29 != 1024;
  int v127 = v31;
  uint64_t result = v24;
  if (v25 <= v26)
  {
    unsigned int v115 = v16 + a9 - 1;
    if (v16 >> 4 <= v115 >> 4)
    {
      uint64_t v123 = (v20 - 1) >> 4;
      uint64_t v109 = (v18 - 1) >> 4;
      int v122 = ((v20 - 1) & 0xF) + 1;
      int v108 = ((v18 - 1) & 0xF) + 1;
      unint64_t v114 = v16;
      uint64_t v106 = v26 + 1;
      unint64_t v107 = (unint64_t)v16 >> 4;
      do
      {
        unsigned int v33 = (16 * v25) | 0xF;
        if (16 * (int)v25 <= v120) {
          unsigned int v34 = v120;
        }
        else {
          unsigned int v34 = 16 * v25;
        }
        if (v110 < v33) {
          unsigned int v33 = v110;
        }
        unsigned int v113 = v34 - 16 * v25;
        int v119 = v33 - v34 + 1;
        if (v25 == v109) {
          unsigned int v35 = v108;
        }
        else {
          unsigned int v35 = 16;
        }
        uint64_t v118 = v112 + (v34 - v120) * a11;
        unint64_t v36 = v107;
        unsigned int v121 = v35;
        do
        {
          unint64_t v37 = 16 * v36;
          unsigned int v38 = 16 * (v36 + 1) - 1;
          if (16 * (int)v36 <= v16) {
            int v39 = v16;
          }
          else {
            int v39 = 16 * v36;
          }
          if (v115 < v38) {
            unsigned int v38 = v115;
          }
          int v40 = v38 - v39 + 1;
          if (v36 == v123) {
            unsigned int v41 = v122;
          }
          else {
            unsigned int v41 = 16;
          }
          BOOL v42 = 1;
          if (16 * (int)v25 >= v120 && v37 >= v114)
          {
            int v43 = v122;
            if (v36 != v123) {
              int v43 = 16;
            }
            BOOL v42 = v40 != v43 || v119 != v35;
          }
          unsigned int v45 = *(_DWORD *)(result + 128) >> (*(unsigned char *)(result + 144) + a12);
          if (v45 <= 1) {
            unsigned int v45 = 1;
          }
          unsigned int v46 = v45 + 15;
          if (v46 < 0x20) {
            unsigned int v47 = 0;
          }
          else {
            unsigned int v47 = 32 - __clz(~(-1 << -(char)__clz((v46 >> 4) - 1)));
          }
          unsigned int v48 = *(_DWORD *)(result + 132) >> (*(unsigned char *)(result + 144) + a12);
          if (v48 <= 1) {
            unsigned int v48 = 1;
          }
          unsigned int v49 = v48 + 15;
          if (v49 < 0x20) {
            unsigned int v50 = 0;
          }
          else {
            unsigned int v50 = 32 - __clz(~(-1 << -(char)__clz((v49 >> 4) - 1)));
          }
          unint64_t v125 = v36 + 1;
          if (v50 | v47)
          {
            int v51 = 0;
            uint64_t v52 = 0;
            BOOL v53 = v47 != 0;
            BOOL v54 = v50 != 0;
            int v55 = 1;
            do
            {
              --v47;
              if (v53) {
                v52 |= (unint64_t)(v55 & v36) << v51++;
              }
              else {
                unsigned int v47 = 0;
              }
              --v50;
              if (v54) {
                v52 |= (unint64_t)(v55 & v25) << v51++;
              }
              else {
                unsigned int v50 = 0;
              }
              v55 *= 2;
              --v51;
              BOOL v54 = v50 != 0;
              BOOL v53 = v47 != 0;
            }
            while (v50 | v47);
          }
          else
          {
            uint64_t v52 = 0;
          }
          uint64_t v56 = v25 * v111 + 768 * v36;
          uint64_t v57 = v16;
          int v58 = v41 < 0x10 || v42;
          int v59 = (unsigned __int8 *)(v117 + 8 * v52);
          unint64_t v60 = v118 + 8 * (v39 - v16);
          uint64_t v61 = (void *)(v116 + v56);
          if (v35 < 0x10) {
            int v62 = 1;
          }
          else {
            int v62 = v58;
          }
          uint64_t v126 = v61;
          if (v127)
          {
            int v63 = __dst;
            if (!v62) {
              goto LABEL_77;
            }
            memcpy(__dst, v61, sizeof(__dst));
            LOBYTE(v35) = v121;
            uint64_t result = v124;
          }
          else
          {
            int v63 = v61;
            if (!v62)
            {
LABEL_77:
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::compressMacroblock(v60, a11, (unint64_t)v63, v59, v41, v35, *(_DWORD *)(*(void *)(result + 208) + 52));
              goto LABEL_78;
            }
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE19ELj1ELh0ELNS7_13SubblockOrderE1EL19AGXTextureFootprint3EEELb0EL29AGXHardwareTextureMemoryOrder3EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = result;
          uint64_t v129 = v63;
          unsigned __int8 v137 = v41;
          unsigned __int8 v138 = v35;
          unsigned int v133 = v113;
          unsigned int v134 = v39 - v37;
          long long v130 = v59;
          unint64_t v131 = v60;
          uint64_t v132 = a11;
          unsigned int v135 = v119;
          unsigned int v136 = v40;
          if (v42)
          {
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(result + 8) + 7384), block);
LABEL_78:
            uint64_t v16 = v57;
            unint64_t v64 = v125;
            goto LABEL_109;
          }
          int v65 = *(_DWORD *)(*(void *)(result + 208) + 52);
          unint64_t v66 = (unint64_t)&v63[AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::decompressSubblock(v140, 128, (unint64_t)v63, *v59, v65)];
          unint64_t v67 = v66
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::decompressSubblock(v141, 128, v66, v59[1], v65);
          unint64_t v68 = v67
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::decompressSubblock(v142, 128, v67, v59[2], v65);
          unint64_t v69 = v68
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::decompressSubblock(v143, 128, v68, v59[3], v65);
          unint64_t v70 = v69
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::decompressSubblock(v144, 128, v69, v59[4], v65);
          unint64_t v71 = v70
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::decompressSubblock(v145, 128, v70, v59[5], v65);
          uint64_t v72 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::decompressSubblock(v146, 128, v71, v59[6], v65);
          AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::decompressSubblock(v147, 128, v71 + v72, v59[7], v65);
          uint64_t v73 = v135;
          uint64_t v16 = v57;
          unint64_t v64 = v125;
          if (v135 && v136)
          {
            unint64_t v74 = (unint64_t)v133 << 7;
            uint64_t v75 = 8 * v134;
            long long v76 = (char *)v140 + v74 + v75;
            unint64_t v77 = v131;
            uint64_t v78 = v132;
            unint64_t v79 = 8 * v136;
            if (v79 <= 1) {
              unint64_t v80 = 1;
            }
            else {
              unint64_t v80 = 8 * v136;
            }
            if (v80)
            {
              unint64_t v81 = (v80 - 1) >> 32;
              if (!v81)
              {
                long long v82 = (char *)v140 + v74 + v75;
                uint64_t v83 = v80 & 0x7FFFFFFE0;
                uint64_t v84 = v80 & 0x7FFFFFFF8;
                long long v85 = (char *)&v140[1] + v74 + v75;
                long long v86 = (long long *)(v131 + 16);
                long long v87 = v76;
                unint64_t v88 = v131;
                while (1)
                {
                  long long v89 = (char *)(v77 + v78 * v81);
                  long long v90 = &v76[128 * v81];
                  if ((unint64_t)(&v82[128 * v81] - v89) < 0x20)
                  {
                    int v91 = 0;
                    goto LABEL_101;
                  }
                  if (v80 >= 0x20)
                  {
                    long long v93 = v86;
                    char v94 = v85;
                    uint64_t v95 = v80 & 0x7FFFFFFE0;
                    do
                    {
                      long long v96 = *v93;
                      *(v94 - 1) = *(v93 - 1);
                      *char v94 = v96;
                      v94 += 2;
                      v93 += 2;
                      v95 -= 32;
                    }
                    while (v95);
                    if (v80 == v83) {
                      goto LABEL_87;
                    }
                    uint64_t v92 = v80 & 0x7FFFFFFE0;
                    if ((v80 & 0x18) == 0)
                    {
                      v89 += v83;
                      v90 += v83;
                      int v91 = v80 & 0xFFFFFFE0;
                      goto LABEL_101;
                    }
                  }
                  else
                  {
                    uint64_t v92 = 0;
                  }
                  v90 += v84;
                  unint64_t v97 = v92 - (v80 & 0x7FFFFFFF8);
                  unsigned int v98 = (uint64_t *)(v88 + v92);
                  BOOL v99 = &v87[v92];
                  do
                  {
                    uint64_t v100 = *v98++;
                    *(void *)BOOL v99 = v100;
                    v99 += 8;
                    v97 += 8;
                  }
                  while (v97);
                  if (v80 == v84) {
                    goto LABEL_87;
                  }
                  v89 += v84;
                  int v91 = v80 & 0xFFFFFFF8;
LABEL_101:
                  unsigned int v101 = v91 + 1;
                  do
                  {
                    char v102 = *v89++;
                    *v90++ = v102;
                  }
                  while (v79 > v101++);
LABEL_87:
                  ++v81;
                  v85 += 128;
                  long long v86 = (long long *)((char *)v86 + v78);
                  v88 += v78;
                  v87 += 128;
                  if (v81 == v73) {
                    goto LABEL_108;
                  }
                }
              }
            }
            uint64_t v104 = 0;
            do
            {
              uint64_t v105 = 0;
              do
              {
                v76[v105] = *(unsigned char *)(v77 + v105);
                ++v105;
              }
              while (v79 > v105);
              ++v104;
              v76 += 128;
              v77 += v78;
            }
            while (v104 != v73);
          }
LABEL_108:
          AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::compressMacroblock((unint64_t)v140, 128, (unint64_t)v129, v130, v137, v138, *(_DWORD *)(*(void *)(v124 + 208) + 52));
LABEL_109:
          if (v127) {
            memcpy(v126, v63, 0x800uLL);
          }
          unint64_t v36 = v64;
          uint64_t result = v124;
          unsigned int v35 = v121;
        }
        while (v64 != (v115 >> 4) + 1);
        ++v25;
      }
      while (v25 != v106);
    }
  }
  return result;
}

uint64_t AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)3>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, char a12)
{
  uint64_t v203 = *MEMORY[0x263EF8340];
  size_t v142 = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v152 = a8;
  uint64_t v25 = a8 >> 4;
  unsigned int v141 = a8 + a10 - 1;
  unsigned int v26 = v141 >> 4;
  uint64_t v153 = a1;
  if (*(void *)(a1 + 168)) {
    int v27 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v27 = 0;
  }
  BOOL v28 = (v27 & 0xD00) == 0 || v27 == 768;
  int v29 = v27 & 0xE00;
  int v31 = !v28 && v29 != 1024;
  int v157 = v31;
  uint64_t result = a1;
  if (v25 <= v26)
  {
    unsigned int v147 = a7 + a9 - 1;
    if (a7 >> 4 <= v147 >> 4)
    {
      uint64_t v155 = (a5 - 1) >> 4;
      uint64_t v140 = (a6 - 1) >> 4;
      int v154 = ((a5 - 1) & 0xF) + 1;
      int v139 = ((a6 - 1) & 0xF) + 1;
      unint64_t v145 = a7;
      uint64_t v137 = v26 + 1;
      unint64_t v138 = (unint64_t)a7 >> 4;
      unsigned int v146 = a7;
      do
      {
        unsigned int v33 = (16 * v25) | 0xF;
        if (16 * (int)v25 <= v152) {
          unsigned int v34 = v152;
        }
        else {
          unsigned int v34 = 16 * v25;
        }
        if (v141 < v33) {
          unsigned int v33 = v141;
        }
        unsigned int v144 = v34 - 16 * v25;
        int v151 = v33 - v34 + 1;
        int v35 = v139;
        if (v25 != v140) {
          int v35 = 16;
        }
        unsigned int v158 = v35;
        uint64_t v150 = a3 + (v34 - v152) * a11;
        unint64_t v36 = v138;
        do
        {
          unint64_t v37 = 16 * v36;
          unint64_t v38 = v36 + 1;
          unsigned int v39 = 16 * (v36 + 1) - 1;
          if (16 * (int)v36 <= a7) {
            unsigned int v40 = a7;
          }
          else {
            unsigned int v40 = 16 * v36;
          }
          if (v147 < v39) {
            unsigned int v39 = v147;
          }
          int v41 = v39 - v40 + 1;
          if (v36 == v155) {
            unsigned int v42 = v154;
          }
          else {
            unsigned int v42 = 16;
          }
          BOOL v43 = 1;
          if (16 * (int)v25 >= v152 && v37 >= v145)
          {
            int v44 = v154;
            if (v36 != v155) {
              int v44 = 16;
            }
            BOOL v43 = v41 != v44 || v151 != v158;
          }
          unsigned int v46 = *(_DWORD *)(result + 128) >> (*(unsigned char *)(result + 144) + a12);
          if (v46 <= 1) {
            unsigned int v46 = 1;
          }
          unsigned int v47 = v46 + 15;
          if (v47 < 0x20) {
            unsigned int v48 = 0;
          }
          else {
            unsigned int v48 = 32 - __clz(~(-1 << -(char)__clz((v47 >> 4) - 1)));
          }
          unsigned int v49 = *(_DWORD *)(result + 132) >> (*(unsigned char *)(result + 144) + a12);
          if (v49 <= 1) {
            unsigned int v49 = 1;
          }
          unsigned int v50 = v49 + 15;
          if (v50 < 0x20)
          {
            unsigned int v51 = 0;
            if (!v48)
            {
LABEL_64:
              uint64_t v53 = 0;
              goto LABEL_65;
            }
          }
          else
          {
            unsigned int v51 = 32 - __clz(~(-1 << -(char)__clz((v50 >> 4) - 1)));
            if (!(v51 | v48)) {
              goto LABEL_64;
            }
          }
          int v52 = 0;
          uint64_t v53 = 0;
          BOOL v54 = v48 != 0;
          BOOL v55 = v51 != 0;
          int v56 = 1;
          do
          {
            --v48;
            if (v54) {
              v53 |= (unint64_t)(v56 & v36) << v52++;
            }
            else {
              unsigned int v48 = 0;
            }
            --v51;
            if (v55) {
              v53 |= (unint64_t)(v56 & v25) << v52++;
            }
            else {
              unsigned int v51 = 0;
            }
            v56 *= 2;
            --v52;
            BOOL v55 = v51 != 0;
            BOOL v54 = v48 != 0;
          }
          while (v51 | v48);
LABEL_65:
          size_t v57 = v25 * v142 + (v36 << 9);
          unsigned int v58 = v40 - a7;
          int v59 = v42 < 0x10 || v43;
          unint64_t v60 = (char *)(a4 + 8 * v53);
          unint64_t v61 = v150 + 2 * v58;
          int v62 = (int8x16_t *)(a2 + v57);
          if (v158 < 0x10) {
            int v63 = 1;
          }
          else {
            int v63 = v59;
          }
          long long v156 = v62;
          if (v157)
          {
            unint64_t v64 = (int8x16_t *)__dst;
            if (!v63) {
              goto LABEL_77;
            }
            memcpy(__dst, v62, sizeof(__dst));
            uint64_t result = v153;
          }
          else
          {
            unint64_t v64 = v62;
            if (!v63)
            {
LABEL_77:
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::compressMacroblock(v61, a11, v64, v60, v42, v158, *(double *)v17.i64, *(double *)v18.i64, *(double *)v19.i64, *(double *)v20.i64, *(double *)v21.i64, v22, v23, v24);
              a7 = v146;
              goto LABEL_172;
            }
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE3ELj1ELh0ELNS7_13SubblockOrderE1EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder3EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = result;
          long long v160 = v64;
          unsigned __int8 v168 = v42;
          unsigned __int8 v169 = v158;
          unsigned int v164 = v144;
          unsigned int v165 = v40 - v37;
          long long v161 = v60;
          unint64_t v162 = v61;
          uint64_t v163 = a11;
          unsigned int v166 = v151;
          unsigned int v167 = v41;
          if (v43)
          {
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(result + 8) + 7384), block);
            a7 = v146;
            goto LABEL_172;
          }
          unsigned int v65 = *v60;
          if (v65 == 63)
          {
            int32x4_t v67 = (int32x4_t)v64[1];
            int32x4_t v19 = (int32x4_t)v64[2];
            int32x4_t v20 = (int32x4_t)v64[3];
            int32x4_t v21 = vuzp1q_s32(*(int32x4_t *)v64, v19);
            int32x4_t v68 = vuzp2q_s32(*(int32x4_t *)v64, v19);
            int32x4_t v171 = v21;
            int32x4_t v173 = v68;
            int16x8_t v17 = (int16x8_t)vuzp1q_s32(v67, v20);
            int32x4_t v18 = vuzp2q_s32(v67, v20);
            int16x8_t v175 = v17;
            int32x4_t v177 = v18;
            uint64_t v66 = 64;
          }
          else if (v65 == 1)
          {
            int16x8_t v17 = vld1q_dup_s16(v64->i16);
            int32x4_t v171 = (int32x4_t)v17;
            int32x4_t v173 = (int32x4_t)v17;
            int16x8_t v175 = v17;
            int32x4_t v177 = (int32x4_t)v17;
            uint64_t v66 = 2;
          }
          else if (*v60)
          {
            uint64_t v66 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v171, 32, (uint64_t)v64, v65, *(double *)v17.i64, *(double *)v18.i64, *(double *)v19.i64, *(int8x8_t *)v20.i8);
          }
          else
          {
            uint64_t v66 = 0;
            int32x4_t v171 = 0uLL;
            int32x4_t v173 = 0uLL;
            int16x8_t v175 = 0uLL;
            int32x4_t v177 = 0uLL;
          }
          uint64_t v69 = (uint64_t)v64->i64 + v66;
          unsigned int v70 = v60[1];
          if (v70 == 63)
          {
            int32x4_t v72 = *(int32x4_t *)(v69 + 16);
            int32x4_t v19 = *(int32x4_t *)(v69 + 32);
            int32x4_t v20 = *(int32x4_t *)(v69 + 48);
            int32x4_t v21 = vuzp1q_s32(*(int32x4_t *)v69, v19);
            int32x4_t v73 = vuzp2q_s32(*(int32x4_t *)v69, v19);
            int32x4_t v172 = v21;
            int32x4_t v174 = v73;
            int16x8_t v17 = (int16x8_t)vuzp1q_s32(v72, v20);
            int32x4_t v18 = vuzp2q_s32(v72, v20);
            int16x8_t v176 = v17;
            int32x4_t v178 = v18;
            uint64_t v71 = 64;
          }
          else if (v70 == 1)
          {
            int16x8_t v17 = vld1q_dup_s16((const __int16 *)v69);
            int32x4_t v172 = (int32x4_t)v17;
            int32x4_t v174 = (int32x4_t)v17;
            int16x8_t v176 = v17;
            int32x4_t v178 = (int32x4_t)v17;
            uint64_t v71 = 2;
          }
          else if (v60[1])
          {
            uint64_t v71 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v172, 32, v69, v70, *(double *)v17.i64, *(double *)v18.i64, *(double *)v19.i64, *(int8x8_t *)v20.i8);
          }
          else
          {
            uint64_t v71 = 0;
            int32x4_t v172 = 0uLL;
            int32x4_t v174 = 0uLL;
            int16x8_t v176 = 0uLL;
            int32x4_t v178 = 0uLL;
          }
          uint64_t v74 = v69 + v71;
          unsigned int v75 = v60[2];
          if (v75 == 63)
          {
            int32x4_t v77 = *(int32x4_t *)(v74 + 16);
            int32x4_t v19 = *(int32x4_t *)(v74 + 32);
            int32x4_t v20 = *(int32x4_t *)(v74 + 48);
            int32x4_t v21 = vuzp1q_s32(*(int32x4_t *)v74, v19);
            int32x4_t v78 = vuzp2q_s32(*(int32x4_t *)v74, v19);
            int32x4_t v179 = v21;
            int32x4_t v181 = v78;
            int16x8_t v17 = (int16x8_t)vuzp1q_s32(v77, v20);
            int32x4_t v18 = vuzp2q_s32(v77, v20);
            int16x8_t v183 = v17;
            int32x4_t v185 = v18;
            uint64_t v76 = 64;
          }
          else if (v75 == 1)
          {
            int16x8_t v17 = vld1q_dup_s16((const __int16 *)v74);
            int32x4_t v179 = (int32x4_t)v17;
            int32x4_t v181 = (int32x4_t)v17;
            int16x8_t v183 = v17;
            int32x4_t v185 = (int32x4_t)v17;
            uint64_t v76 = 2;
          }
          else if (v60[2])
          {
            uint64_t v76 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v179, 32, v74, v75, *(double *)v17.i64, *(double *)v18.i64, *(double *)v19.i64, *(int8x8_t *)v20.i8);
          }
          else
          {
            uint64_t v76 = 0;
            int32x4_t v179 = 0uLL;
            int32x4_t v181 = 0uLL;
            int16x8_t v183 = 0uLL;
            int32x4_t v185 = 0uLL;
          }
          uint64_t v79 = v74 + v76;
          unsigned int v80 = v60[3];
          if (v80 == 63)
          {
            int32x4_t v82 = *(int32x4_t *)(v79 + 16);
            int32x4_t v19 = *(int32x4_t *)(v79 + 32);
            int32x4_t v20 = *(int32x4_t *)(v79 + 48);
            int32x4_t v21 = vuzp1q_s32(*(int32x4_t *)v79, v19);
            int32x4_t v83 = vuzp2q_s32(*(int32x4_t *)v79, v19);
            int32x4_t v180 = v21;
            int32x4_t v182 = v83;
            int16x8_t v17 = (int16x8_t)vuzp1q_s32(v82, v20);
            int32x4_t v18 = vuzp2q_s32(v82, v20);
            int16x8_t v184 = v17;
            int32x4_t v186 = v18;
            uint64_t v81 = 64;
          }
          else if (v80 == 1)
          {
            int16x8_t v17 = vld1q_dup_s16((const __int16 *)v79);
            int32x4_t v180 = (int32x4_t)v17;
            int32x4_t v182 = (int32x4_t)v17;
            int16x8_t v184 = v17;
            int32x4_t v186 = (int32x4_t)v17;
            uint64_t v81 = 2;
          }
          else if (v60[3])
          {
            uint64_t v81 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v180, 32, v79, v80, *(double *)v17.i64, *(double *)v18.i64, *(double *)v19.i64, *(int8x8_t *)v20.i8);
          }
          else
          {
            uint64_t v81 = 0;
            int32x4_t v180 = 0uLL;
            int32x4_t v182 = 0uLL;
            int16x8_t v184 = 0uLL;
            int32x4_t v186 = 0uLL;
          }
          uint64_t v84 = v79 + v81;
          unsigned int v85 = v60[4];
          if (v85 == 63)
          {
            int32x4_t v87 = *(int32x4_t *)(v84 + 16);
            int32x4_t v19 = *(int32x4_t *)(v84 + 32);
            int32x4_t v20 = *(int32x4_t *)(v84 + 48);
            int32x4_t v21 = vuzp1q_s32(*(int32x4_t *)v84, v19);
            int32x4_t v88 = vuzp2q_s32(*(int32x4_t *)v84, v19);
            int32x4_t v187 = v21;
            int32x4_t v189 = v88;
            int16x8_t v17 = (int16x8_t)vuzp1q_s32(v87, v20);
            int32x4_t v18 = vuzp2q_s32(v87, v20);
            int16x8_t v191 = v17;
            int32x4_t v193 = v18;
            uint64_t v86 = 64;
          }
          else if (v85 == 1)
          {
            int16x8_t v17 = vld1q_dup_s16((const __int16 *)v84);
            int32x4_t v187 = (int32x4_t)v17;
            int32x4_t v189 = (int32x4_t)v17;
            int16x8_t v191 = v17;
            int32x4_t v193 = (int32x4_t)v17;
            uint64_t v86 = 2;
          }
          else if (v60[4])
          {
            uint64_t v86 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v187, 32, v84, v85, *(double *)v17.i64, *(double *)v18.i64, *(double *)v19.i64, *(int8x8_t *)v20.i8);
          }
          else
          {
            uint64_t v86 = 0;
            int32x4_t v187 = 0uLL;
            int32x4_t v189 = 0uLL;
            int16x8_t v191 = 0uLL;
            int32x4_t v193 = 0uLL;
          }
          uint64_t v89 = v84 + v86;
          unsigned int v90 = v60[5];
          if (v90 == 63)
          {
            int32x4_t v92 = *(int32x4_t *)(v89 + 16);
            int32x4_t v19 = *(int32x4_t *)(v89 + 32);
            int32x4_t v20 = *(int32x4_t *)(v89 + 48);
            int32x4_t v21 = vuzp1q_s32(*(int32x4_t *)v89, v19);
            int32x4_t v93 = vuzp2q_s32(*(int32x4_t *)v89, v19);
            int32x4_t v188 = v21;
            int32x4_t v190 = v93;
            int16x8_t v17 = (int16x8_t)vuzp1q_s32(v92, v20);
            int32x4_t v18 = vuzp2q_s32(v92, v20);
            int16x8_t v192 = v17;
            int32x4_t v194 = v18;
            uint64_t v91 = 64;
          }
          else if (v90 == 1)
          {
            int16x8_t v17 = vld1q_dup_s16((const __int16 *)v89);
            int32x4_t v188 = (int32x4_t)v17;
            int32x4_t v190 = (int32x4_t)v17;
            int16x8_t v192 = v17;
            int32x4_t v194 = (int32x4_t)v17;
            uint64_t v91 = 2;
          }
          else if (v60[5])
          {
            uint64_t v91 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v188, 32, v89, v90, *(double *)v17.i64, *(double *)v18.i64, *(double *)v19.i64, *(int8x8_t *)v20.i8);
          }
          else
          {
            uint64_t v91 = 0;
            int32x4_t v188 = 0uLL;
            int32x4_t v190 = 0uLL;
            int16x8_t v192 = 0uLL;
            int32x4_t v194 = 0uLL;
          }
          uint64_t v94 = v89 + v91;
          unsigned int v95 = v60[6];
          if (v95 == 63)
          {
            int32x4_t v97 = *(int32x4_t *)(v94 + 16);
            int32x4_t v19 = *(int32x4_t *)(v94 + 32);
            int32x4_t v20 = *(int32x4_t *)(v94 + 48);
            int32x4_t v21 = vuzp1q_s32(*(int32x4_t *)v94, v19);
            int32x4_t v98 = vuzp2q_s32(*(int32x4_t *)v94, v19);
            int32x4_t v195 = v21;
            int32x4_t v197 = v98;
            int16x8_t v17 = (int16x8_t)vuzp1q_s32(v97, v20);
            int32x4_t v18 = vuzp2q_s32(v97, v20);
            int16x8_t v199 = v17;
            int32x4_t v201 = v18;
            uint64_t v96 = 64;
          }
          else if (v95 == 1)
          {
            int16x8_t v17 = vld1q_dup_s16((const __int16 *)v94);
            int32x4_t v195 = (int32x4_t)v17;
            int32x4_t v197 = (int32x4_t)v17;
            int16x8_t v199 = v17;
            int32x4_t v201 = (int32x4_t)v17;
            uint64_t v96 = 2;
          }
          else if (v60[6])
          {
            uint64_t v96 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v195, 32, v94, v95, *(double *)v17.i64, *(double *)v18.i64, *(double *)v19.i64, *(int8x8_t *)v20.i8);
          }
          else
          {
            uint64_t v96 = 0;
            int32x4_t v195 = 0uLL;
            int32x4_t v197 = 0uLL;
            int16x8_t v199 = 0uLL;
            int32x4_t v201 = 0uLL;
          }
          uint64_t v99 = v94 + v96;
          unsigned int v100 = v60[7];
          if (v100 == 63)
          {
            int32x4_t v102 = *(int32x4_t *)(v99 + 16);
            int32x4_t v19 = *(int32x4_t *)(v99 + 32);
            int32x4_t v20 = *(int32x4_t *)(v99 + 48);
            int32x4_t v21 = vuzp1q_s32(*(int32x4_t *)v99, v19);
            int32x4_t v103 = vuzp2q_s32(*(int32x4_t *)v99, v19);
            int32x4_t v196 = v21;
            int32x4_t v198 = v103;
            int16x8_t v17 = (int16x8_t)vuzp1q_s32(v102, v20);
            int32x4_t v18 = vuzp2q_s32(v102, v20);
            int16x8_t v200 = v17;
            int32x4_t v202 = v18;
            a7 = v146;
            uint64_t v101 = v166;
            if (!v166) {
              goto LABEL_171;
            }
          }
          else
          {
            a7 = v146;
            if (v100 == 1)
            {
              int16x8_t v17 = vld1q_dup_s16((const __int16 *)v99);
              int32x4_t v196 = (int32x4_t)v17;
              int32x4_t v198 = (int32x4_t)v17;
              int16x8_t v200 = v17;
              int32x4_t v202 = (int32x4_t)v17;
              uint64_t v101 = v166;
              if (!v166) {
                goto LABEL_171;
              }
            }
            else if (v100)
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v196, 32, v99, v100, *(double *)v17.i64, *(double *)v18.i64, *(double *)v19.i64, *(int8x8_t *)v20.i8);
              uint64_t v101 = v166;
              if (!v166) {
                goto LABEL_171;
              }
            }
            else
            {
              int32x4_t v196 = 0uLL;
              int32x4_t v198 = 0uLL;
              int16x8_t v200 = 0uLL;
              int32x4_t v202 = 0uLL;
              uint64_t v101 = v166;
              if (!v166) {
                goto LABEL_171;
              }
            }
          }
          if (v167)
          {
            uint64_t v104 = 32 * v164;
            uint64_t v105 = 2 * v165;
            uint64_t v106 = &v171.i8[v104 + v105];
            unint64_t v107 = v162;
            uint64_t v108 = v163;
            unint64_t v109 = 2 * v167;
            if (v109 <= 1) {
              unint64_t v110 = 1;
            }
            else {
              unint64_t v110 = 2 * v167;
            }
            if (v110 > 7)
            {
              if (!v110 || (unint64_t v113 = (v110 - 1) >> 32) != 0)
              {
                uint64_t v135 = 0;
                do
                {
                  uint64_t v136 = 0;
                  do
                  {
                    v106[v136] = *(unsigned char *)(v107 + v136);
                    ++v136;
                  }
                  while (v109 > v136);
                  ++v135;
                  v106 += 32;
                  v107 += v108;
                }
                while (v135 != v101);
                goto LABEL_171;
              }
              unint64_t v114 = &v171.i8[v104 + v105];
              uint64_t v115 = v110 & 0x1FFFFFFE0;
              uint64_t v116 = v110 & 0x1FFFFFFF8;
              uint64_t v117 = &v172.i8[v104 + v105];
              uint64_t v118 = (int16x8_t *)(v162 + 16);
              int v119 = v106;
              unint64_t v120 = v162;
              while (2)
              {
                unsigned int v121 = (char *)(v107 + v108 * v113);
                int v122 = &v106[32 * v113];
                if ((unint64_t)(&v114[32 * v113] - v121) >= 0x20)
                {
                  if (v110 >= 0x20)
                  {
                    unint64_t v125 = v118;
                    uint64_t v126 = (int32x4_t *)v117;
                    uint64_t v127 = v110 & 0x1FFFFFFE0;
                    do
                    {
                      int16x8_t v17 = v125[-1];
                      int32x4_t v18 = *(int32x4_t *)v125;
                      v126[-1] = (int32x4_t)v17;
                      *uint64_t v126 = v18;
                      v126 += 2;
                      v125 += 2;
                      v127 -= 32;
                    }
                    while (v127);
                    if (v110 == v115) {
                      goto LABEL_150;
                    }
                    uint64_t v124 = v110 & 0x1FFFFFFE0;
                    if ((v110 & 0x18) == 0)
                    {
                      v121 += v115;
                      v122 += v115;
                      int v123 = v110 & 0xFFFFFFE0;
                      goto LABEL_164;
                    }
                  }
                  else
                  {
                    uint64_t v124 = 0;
                  }
                  v122 += v116;
                  unint64_t v128 = v124 - (v110 & 0x1FFFFFFF8);
                  uint64_t v129 = (uint64_t *)(v120 + v124);
                  long long v130 = (uint64_t *)&v119[v124];
                  do
                  {
                    uint64_t v131 = *v129++;
                    v17.i64[0] = v131;
                    *v130++ = v131;
                    v128 += 8;
                  }
                  while (v128);
                  if (v110 != v116)
                  {
                    v121 += v116;
                    int v123 = v110 & 0xFFFFFFF8;
                    goto LABEL_164;
                  }
                }
                else
                {
                  int v123 = 0;
LABEL_164:
                  unsigned int v132 = v123 + 1;
                  do
                  {
                    char v133 = *v121++;
                    *v122++ = v133;
                  }
                  while (v109 > v132++);
                }
LABEL_150:
                ++v113;
                v117 += 32;
                uint64_t v118 = (int16x8_t *)((char *)v118 + v108);
                v120 += v108;
                v119 += 32;
                if (v113 == v101) {
                  goto LABEL_171;
                }
                continue;
              }
            }
            uint64_t v111 = 0;
            do
            {
              uint64_t v112 = 0;
              do
              {
                v106[v112] = *(unsigned char *)(v107 + v112);
                ++v112;
              }
              while (v109 > v112);
              ++v111;
              v106 += 32;
              v107 += v108;
            }
            while (v111 != v101);
          }
LABEL_171:
          AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)&v171, 32, v160, v161, v168, v169, *(double *)v17.i64, *(double *)v18.i64, *(double *)v19.i64, *(double *)v20.i64, *(double *)v21.i64, v22, v23, v24);
LABEL_172:
          if (v157) {
            memcpy(v156, v64, 0x200uLL);
          }
          unint64_t v36 = v38;
          uint64_t result = v153;
        }
        while (v38 != (v147 >> 4) + 1);
        ++v25;
      }
      while (v25 != v137);
    }
  }
  return result;
}

uint64_t AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)3>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, char a12)
{
  uint64_t v231 = *MEMORY[0x263EF8340];
  size_t v168 = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v180 = a8;
  uint64_t v20 = a8 >> 4;
  unsigned int v167 = a8 + a10 - 1;
  unsigned int v21 = v167 >> 4;
  uint64_t v181 = a1;
  if (*(void *)(a1 + 168)) {
    int v22 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v22 = 0;
  }
  BOOL v23 = (v22 & 0xD00) == 0 || v22 == 768;
  int v24 = v22 & 0xE00;
  int v26 = !v23 && v24 != 1024;
  int v185 = v26;
  uint64_t result = a1;
  if (v20 <= v21)
  {
    unsigned int v173 = a7 + a9 - 1;
    if (a7 >> 4 <= v173 >> 4)
    {
      uint64_t v28 = a11;
      uint64_t v183 = (a5 - 1) >> 4;
      uint64_t v166 = (a6 - 1) >> 4;
      int v182 = ((a5 - 1) & 0xF) + 1;
      int v165 = ((a6 - 1) & 0xF) + 1;
      uint64_t v164 = v21 + 1;
      uint64_t v29 = 2 * a11;
      unint64_t v30 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)1,1u>::kSubblockPositions;
      do
      {
        unsigned int v31 = (16 * v20) | 0xF;
        if (16 * (int)v20 <= v180) {
          unsigned int v32 = v180;
        }
        else {
          unsigned int v32 = 16 * v20;
        }
        if (v167 < v31) {
          unsigned int v31 = v167;
        }
        unsigned int v179 = 16 * v20;
        unsigned int v171 = v32 - 16 * v20;
        int v178 = v31 - v32 + 1;
        if (v20 == v166) {
          unsigned int v33 = v165;
        }
        else {
          unsigned int v33 = 16;
        }
        uint64_t v176 = a3 + (v32 - v180) * v28;
        size_t v177 = v20 * v168;
        unint64_t v34 = (unint64_t)a7 >> 4;
        unsigned int v170 = v33;
        do
        {
          unint64_t v35 = 16 * v34;
          unint64_t v184 = v34 + 1;
          unsigned int v36 = 16 * (v34 + 1) - 1;
          if (16 * (int)v34 <= a7) {
            unsigned int v37 = a7;
          }
          else {
            unsigned int v37 = 16 * v34;
          }
          if (v173 < v36) {
            unsigned int v36 = a7 + a9 - 1;
          }
          int v38 = v36 - v37 + 1;
          if (v34 == v183) {
            unsigned int v39 = v182;
          }
          else {
            unsigned int v39 = 16;
          }
          BOOL v40 = 1;
          if (v179 >= v180 && v35 >= a7)
          {
            int v41 = v182;
            if (v34 != v183) {
              int v41 = 16;
            }
            BOOL v40 = v38 != v41 || v178 != v33;
          }
          unsigned int v43 = *(_DWORD *)(result + 128) >> (*(unsigned char *)(result + 144) + a12);
          if (v43 <= 1) {
            unsigned int v43 = 1;
          }
          unsigned int v44 = v43 + 15;
          if (v44 < 0x20) {
            unsigned int v45 = 0;
          }
          else {
            unsigned int v45 = 32 - __clz(~(-1 << -(char)__clz((v44 >> 4) - 1)));
          }
          unsigned int v46 = *(_DWORD *)(result + 132) >> (*(unsigned char *)(result + 144) + a12);
          if (v46 <= 1) {
            unsigned int v46 = 1;
          }
          unsigned int v47 = v46 + 15;
          if (v47 < 0x20)
          {
            unsigned int v48 = 0;
            if (!v45)
            {
LABEL_66:
              uint64_t v50 = 0;
              goto LABEL_67;
            }
          }
          else
          {
            unsigned int v48 = 32 - __clz(~(-1 << -(char)__clz((v47 >> 4) - 1)));
            if (!(v48 | v45)) {
              goto LABEL_66;
            }
          }
          int v49 = 0;
          uint64_t v50 = 0;
          BOOL v51 = v45 != 0;
          BOOL v52 = v48 != 0;
          int v53 = 1;
          do
          {
            --v45;
            if (v51) {
              v50 |= (unint64_t)(v53 & v34) << v49++;
            }
            else {
              unsigned int v45 = 0;
            }
            --v48;
            if (v52) {
              v50 |= (unint64_t)(v53 & v20) << v49++;
            }
            else {
              unsigned int v48 = 0;
            }
            v53 *= 2;
            --v49;
            BOOL v52 = v48 != 0;
            BOOL v51 = v45 != 0;
          }
          while (v48 | v45);
LABEL_67:
          size_t v54 = v177 + (v34 << 9);
          int v55 = v39 < 0x10 || v40;
          int v56 = (char *)(a4 + 8 * v50);
          size_t v57 = (int32x4_t *)(a2 + v54);
          if (v33 < 0x10) {
            int v58 = 1;
          }
          else {
            int v58 = v55;
          }
          if (v185)
          {
            if (!v58)
            {
              unint64_t v64 = (int32x4_t *)__dst;
LABEL_82:
              uint64_t v66 = 0;
              int32x4_t v67 = (float *)v64;
              do
              {
                uint64_t v73 = v30[v66 + 1];
                uint64_t v74 = v30[v66];
                unsigned int v75 = (v39 - 8 * v74) & ~((int)(v39 - 8 * v74) >> 31);
                if (v75 >= 8) {
                  unsigned int v75 = 8;
                }
                unsigned int v76 = (v33 - 4 * v73) & ~((int)(v33 - 4 * v73) >> 31);
                if (v76 >= 4) {
                  unsigned int v76 = 4;
                }
                if (v75) {
                  BOOL v77 = v76 == 0;
                }
                else {
                  BOOL v77 = 1;
                }
                if (v77)
                {
                  char v72 = 0;
                }
                else
                {
                  int32x4_t v68 = (float32x2x2_t *)(v176 + 2 * (v37 - a7) + 4 * a11 * v73 + 16 * v74);
                  float32x2x2_t v16 = *v68;
                  int32x4_t v17 = *(int32x4_t *)((char *)v68 + v28);
                  uint64_t v69 = (int32x4_t *)((char *)v68 + v29);
                  float32x2x2_t v18 = (float32x2x2_t)*v69;
                  float32x2x2_t v19 = *(float32x2x2_t *)((char *)v69 + v28);
                  int32x4_t v70 = vzip2q_s32(*v69, (int32x4_t)v19);
                  uint64_t v71 = v67;
                  vst2_f32(v71, v16);
                  v71 += 4;
                  vst2_f32(v71, v18);
                  *((int32x4_t *)v67 + 2) = vzip2q_s32((int32x4_t)v16, v17);
                  *((int32x4_t *)v67 + 3) = v70;
                  v67 += 16;
                  char v72 = 63;
                }
                *v56++ = v72;
                v66 += 2;
              }
              while (v66 != 16);
LABEL_79:
              unint64_t v65 = v184;
              if (v185) {
                goto LABEL_27;
              }
              goto LABEL_28;
            }
            int v59 = v30;
            unint64_t v60 = v57;
            uint64_t v61 = v20;
            int v62 = v38;
            BOOL v63 = v40;
            memcpy(__dst, v57, sizeof(__dst));
            BOOL v40 = v63;
            int v38 = v62;
            uint64_t v20 = v61;
            unsigned int v33 = v170;
            unint64_t v64 = (int32x4_t *)__dst;
            size_t v57 = v60;
            unint64_t v30 = v59;
            uint64_t v28 = a11;
            uint64_t result = v181;
          }
          else
          {
            unint64_t v64 = v57;
            if (!v58) {
              goto LABEL_82;
            }
          }
          int32x4_t v172 = v57;
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE3ELj1ELh1ELNS7_13SubblockOrderE1EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder3EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = result;
          int32x4_t v188 = v64;
          unsigned __int8 v196 = v39;
          unsigned __int8 v197 = v33;
          unsigned int v192 = v171;
          unsigned int v193 = v37 - v35;
          int32x4_t v189 = v56;
          int32x4_t v190 = (int32x4_t *)(v176 + 2 * (v37 - a7));
          uint64_t v191 = v28;
          unsigned int v194 = v178;
          unsigned int v195 = v38;
          if (v40)
          {
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(result + 8) + 7384), block);
            uint64_t result = v181;
            size_t v57 = v172;
            uint64_t v29 = 2 * a11;
            goto LABEL_79;
          }
          unsigned int v78 = *v56;
          if (v78 == 63)
          {
            int32x4_t v80 = v64[1];
            float32x2x2_t v18 = (float32x2x2_t)v64[2];
            float32x2x2_t v19 = (float32x2x2_t)v64[3];
            int32x4_t v81 = vuzp2q_s32(*v64, (int32x4_t)v18);
            float32x2x2_t v199 = (float32x2x2_t)vuzp1q_s32(*v64, (int32x4_t)v18);
            int32x4_t v201 = v81;
            float32x2x2_t v16 = (float32x2x2_t)vuzp1q_s32(v80, (int32x4_t)v19);
            int32x4_t v17 = vuzp2q_s32(v80, (int32x4_t)v19);
            float32x2x2_t v203 = v16;
            int32x4_t v205 = v17;
            uint64_t v79 = 64;
          }
          else if (v78 == 1)
          {
            float32x2x2_t v16 = (float32x2x2_t)vld1q_dup_s16(v64->i16);
            float32x2x2_t v199 = v16;
            int32x4_t v201 = (int32x4_t)v16;
            float32x2x2_t v203 = v16;
            int32x4_t v205 = (int32x4_t)v16;
            uint64_t v79 = 2;
          }
          else if (*v56)
          {
            uint64_t v79 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((int32x4_t *)&v199, 32, (uint64_t)v64, v78, *(double *)v16.val, *(double *)v17.i64, *(double *)v18.val, (int8x8_t)v19.val[0]);
          }
          else
          {
            uint64_t v79 = 0;
            float32x2x2_t v199 = (float32x2x2_t)0;
            int32x4_t v201 = 0uLL;
            float32x2x2_t v203 = (float32x2x2_t)0;
            int32x4_t v205 = 0uLL;
          }
          uint64_t v82 = (uint64_t)v64->i64 + v79;
          unsigned int v83 = v56[1];
          if (v83 == 63)
          {
            int32x4_t v85 = *(int32x4_t *)(v82 + 16);
            float32x2x2_t v18 = *(float32x2x2_t *)(v82 + 32);
            float32x2x2_t v19 = *(float32x2x2_t *)(v82 + 48);
            int32x4_t v86 = vuzp2q_s32(*(int32x4_t *)v82, (int32x4_t)v18);
            float32x2x2_t v200 = (float32x2x2_t)vuzp1q_s32(*(int32x4_t *)v82, (int32x4_t)v18);
            int32x4_t v202 = v86;
            float32x2x2_t v16 = (float32x2x2_t)vuzp1q_s32(v85, (int32x4_t)v19);
            int32x4_t v17 = vuzp2q_s32(v85, (int32x4_t)v19);
            float32x2x2_t v204 = v16;
            int32x4_t v206 = v17;
            uint64_t v84 = 64;
          }
          else if (v83 == 1)
          {
            float32x2x2_t v16 = (float32x2x2_t)vld1q_dup_s16((const __int16 *)v82);
            float32x2x2_t v200 = v16;
            int32x4_t v202 = (int32x4_t)v16;
            float32x2x2_t v204 = v16;
            int32x4_t v206 = (int32x4_t)v16;
            uint64_t v84 = 2;
          }
          else if (v56[1])
          {
            uint64_t v84 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((int32x4_t *)&v200, 32, v82, v83, *(double *)v16.val, *(double *)v17.i64, *(double *)v18.val, (int8x8_t)v19.val[0]);
          }
          else
          {
            uint64_t v84 = 0;
            float32x2x2_t v200 = (float32x2x2_t)0;
            int32x4_t v202 = 0uLL;
            float32x2x2_t v204 = (float32x2x2_t)0;
            int32x4_t v206 = 0uLL;
          }
          uint64_t v87 = v82 + v84;
          unsigned int v88 = v56[2];
          if (v88 == 63)
          {
            int32x4_t v90 = *(int32x4_t *)(v87 + 16);
            float32x2x2_t v18 = *(float32x2x2_t *)(v87 + 32);
            float32x2x2_t v19 = *(float32x2x2_t *)(v87 + 48);
            int32x4_t v91 = vuzp2q_s32(*(int32x4_t *)v87, (int32x4_t)v18);
            float32x2x2_t v207 = (float32x2x2_t)vuzp1q_s32(*(int32x4_t *)v87, (int32x4_t)v18);
            int32x4_t v209 = v91;
            float32x2x2_t v16 = (float32x2x2_t)vuzp1q_s32(v90, (int32x4_t)v19);
            int32x4_t v17 = vuzp2q_s32(v90, (int32x4_t)v19);
            float32x2x2_t v211 = v16;
            int32x4_t v213 = v17;
            uint64_t v89 = 64;
          }
          else if (v88 == 1)
          {
            float32x2x2_t v16 = (float32x2x2_t)vld1q_dup_s16((const __int16 *)v87);
            float32x2x2_t v207 = v16;
            int32x4_t v209 = (int32x4_t)v16;
            float32x2x2_t v211 = v16;
            int32x4_t v213 = (int32x4_t)v16;
            uint64_t v89 = 2;
          }
          else if (v56[2])
          {
            uint64_t v89 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((int32x4_t *)&v207, 32, v87, v88, *(double *)v16.val, *(double *)v17.i64, *(double *)v18.val, (int8x8_t)v19.val[0]);
          }
          else
          {
            uint64_t v89 = 0;
            float32x2x2_t v207 = (float32x2x2_t)0;
            int32x4_t v209 = 0uLL;
            float32x2x2_t v211 = (float32x2x2_t)0;
            int32x4_t v213 = 0uLL;
          }
          uint64_t v92 = v87 + v89;
          unsigned int v93 = v56[3];
          if (v93 == 63)
          {
            int32x4_t v95 = *(int32x4_t *)(v92 + 16);
            float32x2x2_t v18 = *(float32x2x2_t *)(v92 + 32);
            float32x2x2_t v19 = *(float32x2x2_t *)(v92 + 48);
            int32x4_t v96 = vuzp2q_s32(*(int32x4_t *)v92, (int32x4_t)v18);
            float32x2x2_t v208 = (float32x2x2_t)vuzp1q_s32(*(int32x4_t *)v92, (int32x4_t)v18);
            int32x4_t v210 = v96;
            float32x2x2_t v16 = (float32x2x2_t)vuzp1q_s32(v95, (int32x4_t)v19);
            int32x4_t v17 = vuzp2q_s32(v95, (int32x4_t)v19);
            float32x2x2_t v212 = v16;
            int32x4_t v214 = v17;
            uint64_t v94 = 64;
          }
          else if (v93 == 1)
          {
            float32x2x2_t v16 = (float32x2x2_t)vld1q_dup_s16((const __int16 *)v92);
            float32x2x2_t v208 = v16;
            int32x4_t v210 = (int32x4_t)v16;
            float32x2x2_t v212 = v16;
            int32x4_t v214 = (int32x4_t)v16;
            uint64_t v94 = 2;
          }
          else if (v56[3])
          {
            uint64_t v94 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((int32x4_t *)&v208, 32, v92, v93, *(double *)v16.val, *(double *)v17.i64, *(double *)v18.val, (int8x8_t)v19.val[0]);
          }
          else
          {
            uint64_t v94 = 0;
            float32x2x2_t v208 = (float32x2x2_t)0;
            int32x4_t v210 = 0uLL;
            float32x2x2_t v212 = (float32x2x2_t)0;
            int32x4_t v214 = 0uLL;
          }
          uint64_t v97 = v92 + v94;
          unsigned int v98 = v56[4];
          if (v98 == 63)
          {
            int32x4_t v100 = *(int32x4_t *)(v97 + 16);
            float32x2x2_t v18 = *(float32x2x2_t *)(v97 + 32);
            float32x2x2_t v19 = *(float32x2x2_t *)(v97 + 48);
            int32x4_t v101 = vuzp2q_s32(*(int32x4_t *)v97, (int32x4_t)v18);
            float32x2x2_t v215 = (float32x2x2_t)vuzp1q_s32(*(int32x4_t *)v97, (int32x4_t)v18);
            int32x4_t v217 = v101;
            float32x2x2_t v16 = (float32x2x2_t)vuzp1q_s32(v100, (int32x4_t)v19);
            int32x4_t v17 = vuzp2q_s32(v100, (int32x4_t)v19);
            float32x2x2_t v219 = v16;
            int32x4_t v221 = v17;
            uint64_t v99 = 64;
          }
          else if (v98 == 1)
          {
            float32x2x2_t v16 = (float32x2x2_t)vld1q_dup_s16((const __int16 *)v97);
            float32x2x2_t v215 = v16;
            int32x4_t v217 = (int32x4_t)v16;
            float32x2x2_t v219 = v16;
            int32x4_t v221 = (int32x4_t)v16;
            uint64_t v99 = 2;
          }
          else if (v56[4])
          {
            uint64_t v99 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((int32x4_t *)&v215, 32, v97, v98, *(double *)v16.val, *(double *)v17.i64, *(double *)v18.val, (int8x8_t)v19.val[0]);
          }
          else
          {
            uint64_t v99 = 0;
            float32x2x2_t v215 = (float32x2x2_t)0;
            int32x4_t v217 = 0uLL;
            float32x2x2_t v219 = (float32x2x2_t)0;
            int32x4_t v221 = 0uLL;
          }
          uint64_t v102 = v97 + v99;
          unsigned int v103 = v56[5];
          if (v103 == 63)
          {
            int32x4_t v105 = *(int32x4_t *)(v102 + 16);
            float32x2x2_t v18 = *(float32x2x2_t *)(v102 + 32);
            float32x2x2_t v19 = *(float32x2x2_t *)(v102 + 48);
            int32x4_t v106 = vuzp2q_s32(*(int32x4_t *)v102, (int32x4_t)v18);
            float32x2x2_t v216 = (float32x2x2_t)vuzp1q_s32(*(int32x4_t *)v102, (int32x4_t)v18);
            int32x4_t v218 = v106;
            float32x2x2_t v16 = (float32x2x2_t)vuzp1q_s32(v105, (int32x4_t)v19);
            int32x4_t v17 = vuzp2q_s32(v105, (int32x4_t)v19);
            float32x2x2_t v220 = v16;
            int32x4_t v222 = v17;
            uint64_t v104 = 64;
          }
          else if (v103 == 1)
          {
            float32x2x2_t v16 = (float32x2x2_t)vld1q_dup_s16((const __int16 *)v102);
            float32x2x2_t v216 = v16;
            int32x4_t v218 = (int32x4_t)v16;
            float32x2x2_t v220 = v16;
            int32x4_t v222 = (int32x4_t)v16;
            uint64_t v104 = 2;
          }
          else if (v56[5])
          {
            uint64_t v104 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((int32x4_t *)&v216, 32, v102, v103, *(double *)v16.val, *(double *)v17.i64, *(double *)v18.val, (int8x8_t)v19.val[0]);
          }
          else
          {
            uint64_t v104 = 0;
            float32x2x2_t v216 = (float32x2x2_t)0;
            int32x4_t v218 = 0uLL;
            float32x2x2_t v220 = (float32x2x2_t)0;
            int32x4_t v222 = 0uLL;
          }
          uint64_t v107 = v102 + v104;
          unsigned int v108 = v56[6];
          if (v108 == 63)
          {
            int32x4_t v110 = *(int32x4_t *)(v107 + 16);
            float32x2x2_t v18 = *(float32x2x2_t *)(v107 + 32);
            float32x2x2_t v19 = *(float32x2x2_t *)(v107 + 48);
            int32x4_t v111 = vuzp2q_s32(*(int32x4_t *)v107, (int32x4_t)v18);
            float32x2x2_t v223 = (float32x2x2_t)vuzp1q_s32(*(int32x4_t *)v107, (int32x4_t)v18);
            int32x4_t v225 = v111;
            float32x2x2_t v16 = (float32x2x2_t)vuzp1q_s32(v110, (int32x4_t)v19);
            int32x4_t v17 = vuzp2q_s32(v110, (int32x4_t)v19);
            float32x2x2_t v227 = v16;
            int32x4_t v229 = v17;
            uint64_t v109 = 64;
          }
          else if (v108 == 1)
          {
            float32x2x2_t v16 = (float32x2x2_t)vld1q_dup_s16((const __int16 *)v107);
            float32x2x2_t v223 = v16;
            int32x4_t v225 = (int32x4_t)v16;
            float32x2x2_t v227 = v16;
            int32x4_t v229 = (int32x4_t)v16;
            uint64_t v109 = 2;
          }
          else if (v56[6])
          {
            uint64_t v109 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((int32x4_t *)&v223, 32, v107, v108, *(double *)v16.val, *(double *)v17.i64, *(double *)v18.val, (int8x8_t)v19.val[0]);
          }
          else
          {
            uint64_t v109 = 0;
            float32x2x2_t v223 = (float32x2x2_t)0;
            int32x4_t v225 = 0uLL;
            float32x2x2_t v227 = (float32x2x2_t)0;
            int32x4_t v229 = 0uLL;
          }
          uint64_t v112 = v107 + v109;
          unsigned int v113 = v56[7];
          if (v113 == 63)
          {
            int32x4_t v115 = *(int32x4_t *)(v112 + 16);
            float32x2x2_t v18 = *(float32x2x2_t *)(v112 + 32);
            float32x2x2_t v19 = *(float32x2x2_t *)(v112 + 48);
            int32x4_t v116 = vuzp2q_s32(*(int32x4_t *)v112, (int32x4_t)v18);
            float32x2x2_t v224 = (float32x2x2_t)vuzp1q_s32(*(int32x4_t *)v112, (int32x4_t)v18);
            int32x4_t v226 = v116;
            float32x2x2_t v16 = (float32x2x2_t)vuzp1q_s32(v115, (int32x4_t)v19);
            int32x4_t v17 = vuzp2q_s32(v115, (int32x4_t)v19);
            float32x2x2_t v228 = v16;
            int32x4_t v230 = v17;
            unint64_t v65 = v184;
            uint64_t v114 = v194;
            if (!v194) {
              goto LABEL_187;
            }
          }
          else
          {
            unint64_t v65 = v184;
            if (v113 == 1)
            {
              float32x2x2_t v16 = (float32x2x2_t)vld1q_dup_s16((const __int16 *)v112);
              float32x2x2_t v224 = v16;
              int32x4_t v226 = (int32x4_t)v16;
              float32x2x2_t v228 = v16;
              int32x4_t v230 = (int32x4_t)v16;
              uint64_t v114 = v194;
              if (!v194) {
                goto LABEL_187;
              }
            }
            else if (v56[7])
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((int32x4_t *)&v224, 32, v112, v113, *(double *)v16.val, *(double *)v17.i64, *(double *)v18.val, (int8x8_t)v19.val[0]);
              uint64_t v114 = v194;
              if (!v194) {
                goto LABEL_187;
              }
            }
            else
            {
              float32x2x2_t v224 = (float32x2x2_t)0;
              int32x4_t v226 = 0uLL;
              float32x2x2_t v228 = (float32x2x2_t)0;
              int32x4_t v230 = 0uLL;
              uint64_t v114 = v194;
              if (!v194) {
                goto LABEL_187;
              }
            }
          }
          if (v195)
          {
            uint64_t v117 = 32 * v192;
            uint64_t v118 = 2 * v193;
            int v119 = (char *)&v199 + v117 + v118;
            unint64_t v120 = v190;
            uint64_t v121 = v191;
            unint64_t v122 = 2 * v195;
            if (v122 <= 1) {
              unint64_t v123 = 1;
            }
            else {
              unint64_t v123 = 2 * v195;
            }
            if (v123 > 7)
            {
              if (!v123 || (unint64_t v126 = (v123 - 1) >> 32) != 0)
              {
                uint64_t v148 = 0;
                do
                {
                  uint64_t v149 = 0;
                  do
                  {
                    v119[v149] = v120->i8[v149];
                    ++v149;
                  }
                  while (v122 > v149);
                  ++v148;
                  v119 += 32;
                  unint64_t v120 = (int32x4_t *)((char *)v120 + v121);
                }
                while (v148 != v114);
                goto LABEL_187;
              }
              uint64_t v127 = (char *)&v199 + v117 + v118;
              uint64_t v128 = v123 & 0x1FFFFFFE0;
              uint64_t v129 = v123 & 0x1FFFFFFF8;
              long long v130 = (char *)&v200 + v117 + v118;
              uint64_t v131 = v190 + 1;
              unsigned int v132 = v119;
              char v133 = v190;
              while (2)
              {
                unsigned int v134 = &v120->i8[v121 * v126];
                uint64_t v135 = &v119[32 * v126];
                if ((unint64_t)(&v127[32 * v126] - v134) >= 0x20)
                {
                  if (v123 >= 0x20)
                  {
                    unint64_t v138 = v131;
                    int v139 = (int32x4_t *)v130;
                    uint64_t v140 = v123 & 0x1FFFFFFE0;
                    do
                    {
                      float32x2x2_t v16 = (float32x2x2_t)v138[-1];
                      int32x4_t v17 = *v138;
                      v139[-1] = (int32x4_t)v16;
                      *int v139 = v17;
                      v139 += 2;
                      v138 += 2;
                      v140 -= 32;
                    }
                    while (v140);
                    if (v123 == v128) {
                      goto LABEL_166;
                    }
                    uint64_t v137 = v123 & 0x1FFFFFFE0;
                    if ((v123 & 0x18) == 0)
                    {
                      v134 += v128;
                      v135 += v128;
                      int v136 = v123 & 0xFFFFFFE0;
                      goto LABEL_180;
                    }
                  }
                  else
                  {
                    uint64_t v137 = 0;
                  }
                  v135 += v129;
                  unint64_t v141 = v137 - (v123 & 0x1FFFFFFF8);
                  size_t v142 = (float32x2_t *)&v133->i8[v137];
                  int v143 = (float32x2_t *)&v132[v137];
                  do
                  {
                    float32x2_t v144 = *v142++;
                    v16.val[0] = v144;
                    *v143++ = v144;
                    v141 += 8;
                  }
                  while (v141);
                  if (v123 != v129)
                  {
                    v134 += v129;
                    int v136 = v123 & 0xFFFFFFF8;
                    goto LABEL_180;
                  }
                }
                else
                {
                  int v136 = 0;
LABEL_180:
                  unsigned int v145 = v136 + 1;
                  do
                  {
                    char v146 = *v134++;
                    *v135++ = v146;
                  }
                  while (v122 > v145++);
                }
LABEL_166:
                ++v126;
                v130 += 32;
                uint64_t v131 = (int32x4_t *)((char *)v131 + v121);
                char v133 = (int32x4_t *)((char *)v133 + v121);
                v132 += 32;
                if (v126 == v114) {
                  goto LABEL_187;
                }
                continue;
              }
            }
            uint64_t v124 = 0;
            do
            {
              uint64_t v125 = 0;
              do
              {
                v119[v125] = v120->i8[v125];
                ++v125;
              }
              while (v122 > v125);
              ++v124;
              v119 += 32;
              unint64_t v120 = (int32x4_t *)((char *)v120 + v121);
            }
            while (v124 != v114);
          }
LABEL_187:
          uint64_t v150 = 0;
          int v151 = v188;
          unsigned int v152 = v189;
          int v153 = v196;
          int v154 = v197;
          uint64_t result = v181;
          uint64_t v29 = 2 * a11;
          do
          {
            uint64_t v159 = v30[v150 + 1];
            uint64_t v160 = v30[v150];
            unsigned int v161 = (v153 - 8 * v160) & ~((v153 - 8 * (int)v160) >> 31);
            if (v161 >= 8) {
              unsigned int v161 = 8;
            }
            unsigned int v162 = (v154 - 4 * v159) & ~((v154 - 4 * (int)v159) >> 31);
            if (v162 >= 4) {
              unsigned int v162 = 4;
            }
            if (v161) {
              BOOL v163 = v162 == 0;
            }
            else {
              BOOL v163 = 1;
            }
            if (v163)
            {
              char v158 = 0;
            }
            else
            {
              uint64_t v155 = (int32x4_t *)(&v199 + 8 * v159 + v160);
              float32x2x2_t v16 = (float32x2x2_t)*v155;
              int32x4_t v17 = v155[2];
              float32x2x2_t v18 = (float32x2x2_t)vzip2q_s32(*v155, v17);
              float32x2x2_t v19 = (float32x2x2_t)v155[4];
              int32x4_t v156 = v155[6];
              int v157 = (float *)v151;
              vst2_f32(v157, v16);
              v157 += 4;
              vst2_f32(v157, v19);
              int64x2_t v151[2] = (int32x4_t)v18;
              v151[3] = vzip2q_s32((int32x4_t)v19, v156);
              v151 += 4;
              char v158 = 63;
            }
            *v152++ = v158;
            v150 += 2;
          }
          while (v150 != 16);
          size_t v57 = v172;
          if (v185)
          {
LABEL_27:
            memcpy(v57, v64, 0x200uLL);
            uint64_t v29 = 2 * a11;
            uint64_t result = v181;
          }
LABEL_28:
          unint64_t v34 = v65;
        }
        while (v65 != (v173 >> 4) + 1);
        ++v20;
      }
      while (v20 != v164);
    }
  }
  return result;
}

uint64_t AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>,false,(AGXHardwareTextureMemoryOrder)3>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, char a12)
{
  int64x2_t v173[14] = *MEMORY[0x263EF8340];
  size_t v138 = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v146 = a8;
  uint64_t v21 = a8 >> 4;
  unsigned int v137 = a8 + a10 - 1;
  unsigned int v22 = v137 >> 4;
  uint64_t v150 = a1;
  if (*(void *)(a1 + 168)) {
    int v23 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v23 = 0;
  }
  BOOL v24 = (v23 & 0xD00) == 0 || v23 == 768;
  int v25 = v23 & 0xE00;
  int v27 = !v24 && v25 != 1024;
  int v152 = v27;
  uint64_t result = a1;
  if (v21 <= v22)
  {
    unsigned int v141 = a7 + a9 - 1;
    if (a7 >> 4 <= v141 >> 4)
    {
      uint64_t v149 = (a5 - 1) >> 4;
      uint64_t v136 = (a6 - 1) >> 4;
      int v148 = ((a5 - 1) & 0xF) + 1;
      int v135 = ((a6 - 1) & 0xF) + 1;
      uint64_t v134 = v22 + 1;
      do
      {
        unsigned int v29 = (16 * v21) | 0xF;
        if (16 * (int)v21 <= v146) {
          unsigned int v30 = v146;
        }
        else {
          unsigned int v30 = 16 * v21;
        }
        if (v137 < v29) {
          unsigned int v29 = v137;
        }
        unsigned int v140 = v30 - 16 * v21;
        int v145 = v29 - v30 + 1;
        if (v21 == v136) {
          unsigned int v31 = v135;
        }
        else {
          unsigned int v31 = 16;
        }
        uint64_t v144 = a3 + (v30 - v146) * a11;
        unint64_t v32 = (unint64_t)a7 >> 4;
        unsigned int v147 = v31;
        do
        {
          unint64_t v33 = 16 * v32;
          unint64_t v34 = v32 + 1;
          unsigned int v35 = 16 * (v32 + 1) - 1;
          if (16 * (int)v32 <= a7) {
            unsigned int v36 = a7;
          }
          else {
            unsigned int v36 = 16 * v32;
          }
          if (v141 < v35) {
            unsigned int v35 = a7 + a9 - 1;
          }
          int v37 = v35 - v36 + 1;
          if (v32 == v149) {
            unsigned int v38 = v148;
          }
          else {
            unsigned int v38 = 16;
          }
          BOOL v39 = 1;
          if (16 * (int)v21 >= v146 && v33 >= a7)
          {
            int v40 = v148;
            if (v32 != v149) {
              int v40 = 16;
            }
            BOOL v39 = v37 != v40 || v145 != v31;
          }
          unsigned int v42 = *(_DWORD *)(result + 128) >> (*(unsigned char *)(result + 144) + a12);
          if (v42 <= 1) {
            unsigned int v42 = 1;
          }
          unsigned int v43 = v42 + 15;
          if (v43 < 0x20) {
            unsigned int v44 = 0;
          }
          else {
            unsigned int v44 = 32 - __clz(~(-1 << -(char)__clz((v43 >> 4) - 1)));
          }
          unsigned int v45 = *(_DWORD *)(result + 132) >> (*(unsigned char *)(result + 144) + a12);
          if (v45 <= 1) {
            unsigned int v45 = 1;
          }
          unsigned int v46 = v45 + 15;
          if (v46 < 0x20)
          {
            unsigned int v47 = 0;
            if (!v44)
            {
LABEL_65:
              uint64_t v49 = 0;
              goto LABEL_66;
            }
          }
          else
          {
            unsigned int v47 = 32 - __clz(~(-1 << -(char)__clz((v46 >> 4) - 1)));
            if (!(v47 | v44)) {
              goto LABEL_65;
            }
          }
          int v48 = 0;
          uint64_t v49 = 0;
          BOOL v50 = v44 != 0;
          BOOL v51 = v47 != 0;
          int v52 = 1;
          do
          {
            --v44;
            if (v50) {
              v49 |= (unint64_t)(v52 & v32) << v48++;
            }
            else {
              unsigned int v44 = 0;
            }
            --v47;
            if (v51) {
              v49 |= (unint64_t)(v52 & v21) << v48++;
            }
            else {
              unsigned int v47 = 0;
            }
            v52 *= 2;
            --v48;
            BOOL v51 = v47 != 0;
            BOOL v50 = v44 != 0;
          }
          while (v47 | v44);
LABEL_66:
          uint64_t v53 = v21 * v138 + 384 * v32;
          int v54 = v38 < 0x10 || v39;
          int v55 = (unsigned __int8 *)(a4 + 8 * v49);
          int v56 = (int32x4_t *)(a2 + v53);
          if (v31 < 0x10) {
            int v57 = 1;
          }
          else {
            int v57 = v54;
          }
          __src = v56;
          if (v152)
          {
            int v56 = (int32x4_t *)__dst;
            if (!v57) {
              goto LABEL_79;
            }
            memcpy(__dst, __src, sizeof(__dst));
            LOBYTE(v31) = v147;
            uint64_t result = v150;
          }
          else if (!v57)
          {
LABEL_79:
            int v58 = *(_DWORD *)(*(void *)(result + 208) + 52);
            int v59 = (unsigned char *)(v144 + 2 * (v36 - a7));
            uint64_t v60 = a11;
            uint64_t v61 = (uint64_t)v56;
            int v62 = (unsigned __int8 *)(a4 + 8 * v49);
            int v63 = v38;
            goto LABEL_116;
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE3ELj1ELh0ELNS7_13SubblockOrderE1EL19AGXTextureFootprint1EEELb0EL29AGXHardwareTextureMemoryOrder3EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = result;
          uint64_t v155 = v56;
          unsigned __int8 v163 = v38;
          unsigned __int8 v164 = v31;
          unsigned int v159 = v140;
          unsigned int v160 = v36 - v33;
          int32x4_t v156 = v55;
          uint64_t v157 = v144 + 2 * (v36 - a7);
          uint64_t v158 = a11;
          unsigned int v161 = v145;
          unsigned int v162 = v37;
          if (!v39)
          {
            int v64 = *(_DWORD *)(*(void *)(result + 208) + 52);
            unint64_t v65 = (int32x4_t *)((char *)v56
                              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::decompressSubblock((uint64_t)v166, 32, v56, *v55, v64, *(double *)&v16, *(double *)&v17, v18, *(int8x8_t *)&v19));
            int32x4_t v70 = (int32x4_t *)((char *)v65
                              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::decompressSubblock((uint64_t)v167, 32, v65, v55[1], v64, v66, v67, v68, v69));
            unsigned int v75 = (int32x4_t *)((char *)v70
                              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::decompressSubblock((uint64_t)&v168, 32, v70, v55[2], v64, v71, v72, v73, v74));
            int32x4_t v80 = (int32x4_t *)((char *)v75
                              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::decompressSubblock((uint64_t)&v169, 32, v75, v55[3], v64, v76, v77, v78, v79));
            int32x4_t v85 = (int32x4_t *)((char *)v80
                              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::decompressSubblock((uint64_t)&v170, 32, v80, v55[4], v64, v81, v82, v83, v84));
            int32x4_t v90 = (int32x4_t *)((char *)v85
                              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::decompressSubblock((uint64_t)&v171, 32, v85, v55[5], v64, v86, v87, v88, v89));
            uint64_t v95 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::decompressSubblock((uint64_t)&v172, 32, v90, v55[6], v64, v91, v92, v93, v94);
            AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::decompressSubblock((uint64_t)v173, 32, (int32x4_t *)((char *)v90 + v95), v55[7], v64, v96, v97, v98, v99);
            uint64_t v100 = v161;
            if (!v161 || !v162) {
              goto LABEL_115;
            }
            uint64_t v101 = 32 * v159;
            uint64_t v102 = 2 * v160;
            unsigned int v103 = &v166[v101 + v102];
            uint64_t v104 = v157;
            uint64_t v105 = v158;
            unint64_t v106 = 2 * v162;
            if (v106 <= 1) {
              unint64_t v107 = 1;
            }
            else {
              unint64_t v107 = 2 * v162;
            }
            if (v107 <= 7)
            {
              uint64_t v108 = 0;
              do
              {
                uint64_t v109 = 0;
                do
                {
                  v103[v109] = *(unsigned char *)(v104 + v109);
                  ++v109;
                }
                while (v106 > v109);
                ++v108;
                v103 += 32;
                v104 += v105;
              }
              while (v108 != v100);
              goto LABEL_115;
            }
            if (v107)
            {
              unint64_t v110 = (v107 - 1) >> 32;
              if (!v110)
              {
                int32x4_t v111 = &v166[v101 + v102];
                uint64_t v112 = v107 & 0x1FFFFFFE0;
                uint64_t v113 = v107 & 0x1FFFFFFF8;
                uint64_t v114 = &v167[v101 + v102];
                int32x4_t v115 = (long long *)(v157 + 16);
                int32x4_t v116 = v103;
                uint64_t v117 = v157;
                while (1)
                {
                  uint64_t v118 = (char *)(v104 + v105 * v110);
                  int v119 = &v103[32 * v110];
                  if ((unint64_t)(&v111[32 * v110] - v118) < 0x20)
                  {
                    int v120 = 0;
                    goto LABEL_108;
                  }
                  if (v107 >= 0x20)
                  {
                    unint64_t v122 = v115;
                    unint64_t v123 = v114;
                    uint64_t v124 = v107 & 0x1FFFFFFE0;
                    do
                    {
                      long long v16 = *(v122 - 1);
                      long long v17 = *v122;
                      *(v123 - 1) = v16;
                      *unint64_t v123 = v17;
                      v123 += 2;
                      v122 += 2;
                      v124 -= 32;
                    }
                    while (v124);
                    if (v107 == v112) {
                      goto LABEL_94;
                    }
                    uint64_t v121 = v107 & 0x1FFFFFFE0;
                    if ((v107 & 0x18) == 0)
                    {
                      v118 += v112;
                      v119 += v112;
                      int v120 = v107 & 0xFFFFFFE0;
                      goto LABEL_108;
                    }
                  }
                  else
                  {
                    uint64_t v121 = 0;
                  }
                  v119 += v113;
                  unint64_t v125 = v121 - (v107 & 0x1FFFFFFF8);
                  unint64_t v126 = (uint64_t *)(v117 + v121);
                  uint64_t v127 = &v116[v121];
                  do
                  {
                    uint64_t v128 = *v126++;
                    *(void *)&long long v16 = v128;
                    *v127++ = v128;
                    v125 += 8;
                  }
                  while (v125);
                  if (v107 == v113) {
                    goto LABEL_94;
                  }
                  v118 += v113;
                  int v120 = v107 & 0xFFFFFFF8;
LABEL_108:
                  unsigned int v129 = v120 + 1;
                  do
                  {
                    char v130 = *v118++;
                    *v119++ = v130;
                  }
                  while (v106 > v129++);
LABEL_94:
                  ++v110;
                  v114 += 32;
                  int32x4_t v115 = (long long *)((char *)v115 + v105);
                  v117 += v105;
                  v116 += 32;
                  if (v110 == v100) {
                    goto LABEL_115;
                  }
                }
              }
            }
            uint64_t v132 = 0;
            do
            {
              uint64_t v133 = 0;
              do
              {
                v103[v133] = *(unsigned char *)(v104 + v133);
                ++v133;
              }
              while (v106 > v133);
              ++v132;
              v103 += 32;
              v104 += v105;
            }
            while (v132 != v100);
LABEL_115:
            uint64_t v61 = (uint64_t)v155;
            int v62 = v156;
            int v63 = v163;
            unsigned int v31 = v164;
            int v58 = *(_DWORD *)(*(void *)(v150 + 208) + 52);
            int v59 = v166;
            uint64_t v60 = 32;
LABEL_116:
            AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::compressMacroblock((unint64_t)v59, v60, v61, v62, v63, v31, v58, *(double *)&v16, *(double *)&v17, v18, v19, v20);
            if (!v152) {
              goto LABEL_27;
            }
            goto LABEL_117;
          }
          dispatch_sync(*(dispatch_queue_t *)(*(void *)(result + 8) + 7384), block);
          if (!v152) {
            goto LABEL_27;
          }
LABEL_117:
          memcpy(__src, v56, 0x200uLL);
LABEL_27:
          unint64_t v32 = v34;
          uint64_t result = v150;
          unsigned int v31 = v147;
        }
        while (v34 != (v141 >> 4) + 1);
        ++v21;
      }
      while (v21 != v134);
    }
  }
  return result;
}

uint64_t AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>,false,(AGXHardwareTextureMemoryOrder)3>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, char a12)
{
  int64x2_t v173[14] = *MEMORY[0x263EF8340];
  size_t v138 = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v146 = a8;
  uint64_t v21 = a8 >> 4;
  unsigned int v137 = a8 + a10 - 1;
  unsigned int v22 = v137 >> 4;
  uint64_t v150 = a1;
  if (*(void *)(a1 + 168)) {
    int v23 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v23 = 0;
  }
  BOOL v24 = (v23 & 0xD00) == 0 || v23 == 768;
  int v25 = v23 & 0xE00;
  int v27 = !v24 && v25 != 1024;
  int v152 = v27;
  uint64_t result = a1;
  if (v21 <= v22)
  {
    unsigned int v141 = a7 + a9 - 1;
    if (a7 >> 4 <= v141 >> 4)
    {
      uint64_t v149 = (a5 - 1) >> 4;
      uint64_t v136 = (a6 - 1) >> 4;
      int v148 = ((a5 - 1) & 0xF) + 1;
      int v135 = ((a6 - 1) & 0xF) + 1;
      uint64_t v134 = v22 + 1;
      do
      {
        unsigned int v29 = (16 * v21) | 0xF;
        if (16 * (int)v21 <= v146) {
          unsigned int v30 = v146;
        }
        else {
          unsigned int v30 = 16 * v21;
        }
        if (v137 < v29) {
          unsigned int v29 = v137;
        }
        unsigned int v140 = v30 - 16 * v21;
        int v145 = v29 - v30 + 1;
        if (v21 == v136) {
          unsigned int v31 = v135;
        }
        else {
          unsigned int v31 = 16;
        }
        uint64_t v144 = a3 + (v30 - v146) * a11;
        unint64_t v32 = (unint64_t)a7 >> 4;
        unsigned int v147 = v31;
        do
        {
          unint64_t v33 = 16 * v32;
          unint64_t v34 = v32 + 1;
          unsigned int v35 = 16 * (v32 + 1) - 1;
          if (16 * (int)v32 <= a7) {
            unsigned int v36 = a7;
          }
          else {
            unsigned int v36 = 16 * v32;
          }
          if (v141 < v35) {
            unsigned int v35 = a7 + a9 - 1;
          }
          int v37 = v35 - v36 + 1;
          if (v32 == v149) {
            unsigned int v38 = v148;
          }
          else {
            unsigned int v38 = 16;
          }
          BOOL v39 = 1;
          if (16 * (int)v21 >= v146 && v33 >= a7)
          {
            int v40 = v148;
            if (v32 != v149) {
              int v40 = 16;
            }
            BOOL v39 = v37 != v40 || v145 != v31;
          }
          unsigned int v42 = *(_DWORD *)(result + 128) >> (*(unsigned char *)(result + 144) + a12);
          if (v42 <= 1) {
            unsigned int v42 = 1;
          }
          unsigned int v43 = v42 + 15;
          if (v43 < 0x20) {
            unsigned int v44 = 0;
          }
          else {
            unsigned int v44 = 32 - __clz(~(-1 << -(char)__clz((v43 >> 4) - 1)));
          }
          unsigned int v45 = *(_DWORD *)(result + 132) >> (*(unsigned char *)(result + 144) + a12);
          if (v45 <= 1) {
            unsigned int v45 = 1;
          }
          unsigned int v46 = v45 + 15;
          if (v46 < 0x20)
          {
            unsigned int v47 = 0;
            if (!v44)
            {
LABEL_65:
              uint64_t v49 = 0;
              goto LABEL_66;
            }
          }
          else
          {
            unsigned int v47 = 32 - __clz(~(-1 << -(char)__clz((v46 >> 4) - 1)));
            if (!(v47 | v44)) {
              goto LABEL_65;
            }
          }
          int v48 = 0;
          uint64_t v49 = 0;
          BOOL v50 = v44 != 0;
          BOOL v51 = v47 != 0;
          int v52 = 1;
          do
          {
            --v44;
            if (v50) {
              v49 |= (unint64_t)(v52 & v32) << v48++;
            }
            else {
              unsigned int v44 = 0;
            }
            --v47;
            if (v51) {
              v49 |= (unint64_t)(v52 & v21) << v48++;
            }
            else {
              unsigned int v47 = 0;
            }
            v52 *= 2;
            --v48;
            BOOL v51 = v47 != 0;
            BOOL v50 = v44 != 0;
          }
          while (v47 | v44);
LABEL_66:
          uint64_t v53 = v21 * v138 + 320 * v32;
          int v54 = v38 < 0x10 || v39;
          int v55 = (unsigned __int8 *)(a4 + 8 * v49);
          int v56 = (int32x4_t *)(a2 + v53);
          if (v31 < 0x10) {
            int v57 = 1;
          }
          else {
            int v57 = v54;
          }
          __src = v56;
          if (v152)
          {
            int v56 = (int32x4_t *)__dst;
            if (!v57) {
              goto LABEL_79;
            }
            memcpy(__dst, __src, sizeof(__dst));
            LOBYTE(v31) = v147;
            uint64_t result = v150;
          }
          else if (!v57)
          {
LABEL_79:
            int v58 = *(_DWORD *)(*(void *)(result + 208) + 52);
            int v59 = (unsigned char *)(v144 + 2 * (v36 - a7));
            uint64_t v60 = a11;
            uint64_t v61 = (uint64_t)v56;
            int v62 = (unsigned __int8 *)(a4 + 8 * v49);
            int v63 = v38;
            goto LABEL_116;
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE3ELj1ELh0ELNS7_13SubblockOrderE1EL19AGXTextureFootprint2EEELb0EL29AGXHardwareTextureMemoryOrder3EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = result;
          uint64_t v155 = v56;
          unsigned __int8 v163 = v38;
          unsigned __int8 v164 = v31;
          unsigned int v159 = v140;
          unsigned int v160 = v36 - v33;
          int32x4_t v156 = v55;
          uint64_t v157 = v144 + 2 * (v36 - a7);
          uint64_t v158 = a11;
          unsigned int v161 = v145;
          unsigned int v162 = v37;
          if (!v39)
          {
            int v64 = *(_DWORD *)(*(void *)(result + 208) + 52);
            unint64_t v65 = (int32x4_t *)((char *)v56
                              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressSubblock((uint64_t)v166, 32, v56, *v55, v64, *(double *)&v16, *(double *)&v17, v18, *(int8x8_t *)&v19));
            int32x4_t v70 = (int32x4_t *)((char *)v65
                              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressSubblock((uint64_t)v167, 32, v65, v55[1], v64, v66, v67, v68, v69));
            unsigned int v75 = (int32x4_t *)((char *)v70
                              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressSubblock((uint64_t)&v168, 32, v70, v55[2], v64, v71, v72, v73, v74));
            int32x4_t v80 = (int32x4_t *)((char *)v75
                              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressSubblock((uint64_t)&v169, 32, v75, v55[3], v64, v76, v77, v78, v79));
            int32x4_t v85 = (int32x4_t *)((char *)v80
                              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressSubblock((uint64_t)&v170, 32, v80, v55[4], v64, v81, v82, v83, v84));
            int32x4_t v90 = (int32x4_t *)((char *)v85
                              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressSubblock((uint64_t)&v171, 32, v85, v55[5], v64, v86, v87, v88, v89));
            uint64_t v95 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressSubblock((uint64_t)&v172, 32, v90, v55[6], v64, v91, v92, v93, v94);
            AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressSubblock((uint64_t)v173, 32, (int32x4_t *)((char *)v90 + v95), v55[7], v64, v96, v97, v98, v99);
            uint64_t v100 = v161;
            if (!v161 || !v162) {
              goto LABEL_115;
            }
            uint64_t v101 = 32 * v159;
            uint64_t v102 = 2 * v160;
            unsigned int v103 = &v166[v101 + v102];
            uint64_t v104 = v157;
            uint64_t v105 = v158;
            unint64_t v106 = 2 * v162;
            if (v106 <= 1) {
              unint64_t v107 = 1;
            }
            else {
              unint64_t v107 = 2 * v162;
            }
            if (v107 <= 7)
            {
              uint64_t v108 = 0;
              do
              {
                uint64_t v109 = 0;
                do
                {
                  v103[v109] = *(unsigned char *)(v104 + v109);
                  ++v109;
                }
                while (v106 > v109);
                ++v108;
                v103 += 32;
                v104 += v105;
              }
              while (v108 != v100);
              goto LABEL_115;
            }
            if (v107)
            {
              unint64_t v110 = (v107 - 1) >> 32;
              if (!v110)
              {
                int32x4_t v111 = &v166[v101 + v102];
                uint64_t v112 = v107 & 0x1FFFFFFE0;
                uint64_t v113 = v107 & 0x1FFFFFFF8;
                uint64_t v114 = &v167[v101 + v102];
                int32x4_t v115 = (long long *)(v157 + 16);
                int32x4_t v116 = v103;
                uint64_t v117 = v157;
                while (1)
                {
                  uint64_t v118 = (char *)(v104 + v105 * v110);
                  int v119 = &v103[32 * v110];
                  if ((unint64_t)(&v111[32 * v110] - v118) < 0x20)
                  {
                    int v120 = 0;
                    goto LABEL_108;
                  }
                  if (v107 >= 0x20)
                  {
                    unint64_t v122 = v115;
                    unint64_t v123 = v114;
                    uint64_t v124 = v107 & 0x1FFFFFFE0;
                    do
                    {
                      long long v16 = *(v122 - 1);
                      long long v17 = *v122;
                      *(v123 - 1) = v16;
                      *unint64_t v123 = v17;
                      v123 += 2;
                      v122 += 2;
                      v124 -= 32;
                    }
                    while (v124);
                    if (v107 == v112) {
                      goto LABEL_94;
                    }
                    uint64_t v121 = v107 & 0x1FFFFFFE0;
                    if ((v107 & 0x18) == 0)
                    {
                      v118 += v112;
                      v119 += v112;
                      int v120 = v107 & 0xFFFFFFE0;
                      goto LABEL_108;
                    }
                  }
                  else
                  {
                    uint64_t v121 = 0;
                  }
                  v119 += v113;
                  unint64_t v125 = v121 - (v107 & 0x1FFFFFFF8);
                  unint64_t v126 = (uint64_t *)(v117 + v121);
                  uint64_t v127 = &v116[v121];
                  do
                  {
                    uint64_t v128 = *v126++;
                    *(void *)&long long v16 = v128;
                    *v127++ = v128;
                    v125 += 8;
                  }
                  while (v125);
                  if (v107 == v113) {
                    goto LABEL_94;
                  }
                  v118 += v113;
                  int v120 = v107 & 0xFFFFFFF8;
LABEL_108:
                  unsigned int v129 = v120 + 1;
                  do
                  {
                    char v130 = *v118++;
                    *v119++ = v130;
                  }
                  while (v106 > v129++);
LABEL_94:
                  ++v110;
                  v114 += 32;
                  int32x4_t v115 = (long long *)((char *)v115 + v105);
                  v117 += v105;
                  v116 += 32;
                  if (v110 == v100) {
                    goto LABEL_115;
                  }
                }
              }
            }
            uint64_t v132 = 0;
            do
            {
              uint64_t v133 = 0;
              do
              {
                v103[v133] = *(unsigned char *)(v104 + v133);
                ++v133;
              }
              while (v106 > v133);
              ++v132;
              v103 += 32;
              v104 += v105;
            }
            while (v132 != v100);
LABEL_115:
            uint64_t v61 = (uint64_t)v155;
            int v62 = v156;
            int v63 = v163;
            unsigned int v31 = v164;
            int v58 = *(_DWORD *)(*(void *)(v150 + 208) + 52);
            int v59 = v166;
            uint64_t v60 = 32;
LABEL_116:
            AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::compressMacroblock((unint64_t)v59, v60, v61, v62, v63, v31, v58, *(double *)&v16, *(double *)&v17, v18, v19, v20);
            if (!v152) {
              goto LABEL_27;
            }
            goto LABEL_117;
          }
          dispatch_sync(*(dispatch_queue_t *)(*(void *)(result + 8) + 7384), block);
          if (!v152) {
            goto LABEL_27;
          }
LABEL_117:
          memcpy(__src, v56, 0x200uLL);
LABEL_27:
          unint64_t v32 = v34;
          uint64_t result = v150;
          unsigned int v31 = v147;
        }
        while (v34 != (v141 >> 4) + 1);
        ++v21;
      }
      while (v21 != v134);
    }
  }
  return result;
}

uint64_t AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>,false,(AGXHardwareTextureMemoryOrder)3>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, char a12)
{
  int64x2_t v173[14] = *MEMORY[0x263EF8340];
  size_t v138 = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v146 = a8;
  uint64_t v21 = a8 >> 4;
  unsigned int v137 = a8 + a10 - 1;
  unsigned int v22 = v137 >> 4;
  uint64_t v150 = a1;
  if (*(void *)(a1 + 168)) {
    int v23 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v23 = 0;
  }
  BOOL v24 = (v23 & 0xD00) == 0 || v23 == 768;
  int v25 = v23 & 0xE00;
  int v27 = !v24 && v25 != 1024;
  int v152 = v27;
  uint64_t result = a1;
  if (v21 <= v22)
  {
    unsigned int v141 = a7 + a9 - 1;
    if (a7 >> 4 <= v141 >> 4)
    {
      uint64_t v149 = (a5 - 1) >> 4;
      uint64_t v136 = (a6 - 1) >> 4;
      int v148 = ((a5 - 1) & 0xF) + 1;
      int v135 = ((a6 - 1) & 0xF) + 1;
      uint64_t v134 = v22 + 1;
      do
      {
        unsigned int v29 = (16 * v21) | 0xF;
        if (16 * (int)v21 <= v146) {
          unsigned int v30 = v146;
        }
        else {
          unsigned int v30 = 16 * v21;
        }
        if (v137 < v29) {
          unsigned int v29 = v137;
        }
        unsigned int v140 = v30 - 16 * v21;
        int v145 = v29 - v30 + 1;
        if (v21 == v136) {
          unsigned int v31 = v135;
        }
        else {
          unsigned int v31 = 16;
        }
        uint64_t v144 = a3 + (v30 - v146) * a11;
        unint64_t v32 = (unint64_t)a7 >> 4;
        unsigned int v147 = v31;
        do
        {
          unint64_t v33 = 16 * v32;
          unint64_t v34 = v32 + 1;
          unsigned int v35 = 16 * (v32 + 1) - 1;
          if (16 * (int)v32 <= a7) {
            unsigned int v36 = a7;
          }
          else {
            unsigned int v36 = 16 * v32;
          }
          if (v141 < v35) {
            unsigned int v35 = a7 + a9 - 1;
          }
          int v37 = v35 - v36 + 1;
          if (v32 == v149) {
            unsigned int v38 = v148;
          }
          else {
            unsigned int v38 = 16;
          }
          BOOL v39 = 1;
          if (16 * (int)v21 >= v146 && v33 >= a7)
          {
            int v40 = v148;
            if (v32 != v149) {
              int v40 = 16;
            }
            BOOL v39 = v37 != v40 || v145 != v31;
          }
          unsigned int v42 = *(_DWORD *)(result + 128) >> (*(unsigned char *)(result + 144) + a12);
          if (v42 <= 1) {
            unsigned int v42 = 1;
          }
          unsigned int v43 = v42 + 15;
          if (v43 < 0x20) {
            unsigned int v44 = 0;
          }
          else {
            unsigned int v44 = 32 - __clz(~(-1 << -(char)__clz((v43 >> 4) - 1)));
          }
          unsigned int v45 = *(_DWORD *)(result + 132) >> (*(unsigned char *)(result + 144) + a12);
          if (v45 <= 1) {
            unsigned int v45 = 1;
          }
          unsigned int v46 = v45 + 15;
          if (v46 < 0x20)
          {
            unsigned int v47 = 0;
            if (!v44)
            {
LABEL_65:
              uint64_t v49 = 0;
              goto LABEL_66;
            }
          }
          else
          {
            unsigned int v47 = 32 - __clz(~(-1 << -(char)__clz((v46 >> 4) - 1)));
            if (!(v47 | v44)) {
              goto LABEL_65;
            }
          }
          int v48 = 0;
          uint64_t v49 = 0;
          BOOL v50 = v44 != 0;
          BOOL v51 = v47 != 0;
          int v52 = 1;
          do
          {
            --v44;
            if (v50) {
              v49 |= (unint64_t)(v52 & v32) << v48++;
            }
            else {
              unsigned int v44 = 0;
            }
            --v47;
            if (v51) {
              v49 |= (unint64_t)(v52 & v21) << v48++;
            }
            else {
              unsigned int v47 = 0;
            }
            v52 *= 2;
            --v48;
            BOOL v51 = v47 != 0;
            BOOL v50 = v44 != 0;
          }
          while (v47 | v44);
LABEL_66:
          size_t v53 = v21 * v138 + (v32 << 8);
          int v54 = v38 < 0x10 || v39;
          int v55 = (unsigned __int8 *)(a4 + 8 * v49);
          int v56 = (int32x4_t *)(a2 + v53);
          if (v31 < 0x10) {
            int v57 = 1;
          }
          else {
            int v57 = v54;
          }
          __src = v56;
          if (v152)
          {
            int v56 = (int32x4_t *)__dst;
            if (!v57) {
              goto LABEL_79;
            }
            memcpy(__dst, __src, sizeof(__dst));
            LOBYTE(v31) = v147;
            uint64_t result = v150;
          }
          else if (!v57)
          {
LABEL_79:
            int v58 = *(_DWORD *)(*(void *)(result + 208) + 52);
            int v59 = (unsigned char *)(v144 + 2 * (v36 - a7));
            uint64_t v60 = a11;
            unint64_t v61 = (unint64_t)v56;
            int v62 = (unsigned __int8 *)(a4 + 8 * v49);
            int v63 = v38;
            goto LABEL_116;
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE3ELj1ELh0ELNS7_13SubblockOrderE1EL19AGXTextureFootprint3EEELb0EL29AGXHardwareTextureMemoryOrder3EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = result;
          uint64_t v155 = v56;
          unsigned __int8 v163 = v38;
          unsigned __int8 v164 = v31;
          unsigned int v159 = v140;
          unsigned int v160 = v36 - v33;
          int32x4_t v156 = v55;
          uint64_t v157 = v144 + 2 * (v36 - a7);
          uint64_t v158 = a11;
          unsigned int v161 = v145;
          unsigned int v162 = v37;
          if (!v39)
          {
            int v64 = *(_DWORD *)(*(void *)(result + 208) + 52);
            unint64_t v65 = (int32x4_t *)((char *)v56
                              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::decompressSubblock((uint64_t)v166, 32, v56, *v55, v64, *(double *)&v16, *(double *)&v17, v18, *(int8x8_t *)&v19));
            int32x4_t v70 = (int32x4_t *)((char *)v65
                              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::decompressSubblock((uint64_t)v167, 32, v65, v55[1], v64, v66, v67, v68, v69));
            unsigned int v75 = (int32x4_t *)((char *)v70
                              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::decompressSubblock((uint64_t)&v168, 32, v70, v55[2], v64, v71, v72, v73, v74));
            int32x4_t v80 = (int32x4_t *)((char *)v75
                              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::decompressSubblock((uint64_t)&v169, 32, v75, v55[3], v64, v76, v77, v78, v79));
            int32x4_t v85 = (int32x4_t *)((char *)v80
                              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::decompressSubblock((uint64_t)&v170, 32, v80, v55[4], v64, v81, v82, v83, v84));
            int32x4_t v90 = (int32x4_t *)((char *)v85
                              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::decompressSubblock((uint64_t)&v171, 32, v85, v55[5], v64, v86, v87, v88, v89));
            uint64_t v95 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::decompressSubblock((uint64_t)&v172, 32, v90, v55[6], v64, v91, v92, v93, v94);
            AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::decompressSubblock((uint64_t)v173, 32, (int32x4_t *)((char *)v90 + v95), v55[7], v64, v96, v97, v98, v99);
            uint64_t v100 = v161;
            if (!v161 || !v162) {
              goto LABEL_115;
            }
            uint64_t v101 = 32 * v159;
            uint64_t v102 = 2 * v160;
            unsigned int v103 = &v166[v101 + v102];
            uint64_t v104 = v157;
            uint64_t v105 = v158;
            unint64_t v106 = 2 * v162;
            if (v106 <= 1) {
              unint64_t v107 = 1;
            }
            else {
              unint64_t v107 = 2 * v162;
            }
            if (v107 <= 7)
            {
              uint64_t v108 = 0;
              do
              {
                uint64_t v109 = 0;
                do
                {
                  v103[v109] = *(unsigned char *)(v104 + v109);
                  ++v109;
                }
                while (v106 > v109);
                ++v108;
                v103 += 32;
                v104 += v105;
              }
              while (v108 != v100);
              goto LABEL_115;
            }
            if (v107)
            {
              unint64_t v110 = (v107 - 1) >> 32;
              if (!v110)
              {
                int32x4_t v111 = &v166[v101 + v102];
                uint64_t v112 = v107 & 0x1FFFFFFE0;
                uint64_t v113 = v107 & 0x1FFFFFFF8;
                uint64_t v114 = &v167[v101 + v102];
                int32x4_t v115 = (long long *)(v157 + 16);
                int32x4_t v116 = v103;
                uint64_t v117 = v157;
                while (1)
                {
                  uint64_t v118 = (char *)(v104 + v105 * v110);
                  int v119 = &v103[32 * v110];
                  if ((unint64_t)(&v111[32 * v110] - v118) < 0x20)
                  {
                    int v120 = 0;
                    goto LABEL_108;
                  }
                  if (v107 >= 0x20)
                  {
                    unint64_t v122 = v115;
                    unint64_t v123 = v114;
                    uint64_t v124 = v107 & 0x1FFFFFFE0;
                    do
                    {
                      long long v16 = *(v122 - 1);
                      long long v17 = *v122;
                      *(v123 - 1) = v16;
                      *unint64_t v123 = v17;
                      v123 += 2;
                      v122 += 2;
                      v124 -= 32;
                    }
                    while (v124);
                    if (v107 == v112) {
                      goto LABEL_94;
                    }
                    uint64_t v121 = v107 & 0x1FFFFFFE0;
                    if ((v107 & 0x18) == 0)
                    {
                      v118 += v112;
                      v119 += v112;
                      int v120 = v107 & 0xFFFFFFE0;
                      goto LABEL_108;
                    }
                  }
                  else
                  {
                    uint64_t v121 = 0;
                  }
                  v119 += v113;
                  unint64_t v125 = v121 - (v107 & 0x1FFFFFFF8);
                  unint64_t v126 = (uint64_t *)(v117 + v121);
                  uint64_t v127 = &v116[v121];
                  do
                  {
                    uint64_t v128 = *v126++;
                    *(void *)&long long v16 = v128;
                    *v127++ = v128;
                    v125 += 8;
                  }
                  while (v125);
                  if (v107 == v113) {
                    goto LABEL_94;
                  }
                  v118 += v113;
                  int v120 = v107 & 0xFFFFFFF8;
LABEL_108:
                  unsigned int v129 = v120 + 1;
                  do
                  {
                    char v130 = *v118++;
                    *v119++ = v130;
                  }
                  while (v106 > v129++);
LABEL_94:
                  ++v110;
                  v114 += 32;
                  int32x4_t v115 = (long long *)((char *)v115 + v105);
                  v117 += v105;
                  v116 += 32;
                  if (v110 == v100) {
                    goto LABEL_115;
                  }
                }
              }
            }
            uint64_t v132 = 0;
            do
            {
              uint64_t v133 = 0;
              do
              {
                v103[v133] = *(unsigned char *)(v104 + v133);
                ++v133;
              }
              while (v106 > v133);
              ++v132;
              v103 += 32;
              v104 += v105;
            }
            while (v132 != v100);
LABEL_115:
            unint64_t v61 = (unint64_t)v155;
            int v62 = v156;
            int v63 = v163;
            unsigned int v31 = v164;
            int v58 = *(_DWORD *)(*(void *)(v150 + 208) + 52);
            int v59 = v166;
            uint64_t v60 = 32;
LABEL_116:
            AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::compressMacroblock((unint64_t)v59, v60, v61, v62, v63, v31, v58, *(double *)&v16, *(double *)&v17, v18, v19, v20);
            if (!v152) {
              goto LABEL_27;
            }
            goto LABEL_117;
          }
          dispatch_sync(*(dispatch_queue_t *)(*(void *)(result + 8) + 7384), block);
          if (!v152) {
            goto LABEL_27;
          }
LABEL_117:
          memcpy(__src, v56, 0x200uLL);
LABEL_27:
          unint64_t v32 = v34;
          uint64_t result = v150;
          unsigned int v31 = v147;
        }
        while (v34 != (v141 >> 4) + 1);
        ++v21;
      }
      while (v21 != v134);
    }
  }
  return result;
}

uint64_t AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)3>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10, uint64_t a11, char a12)
{
  uint64_t v12 = MEMORY[0x270FA5388](a1);
  unsigned int v14 = v13;
  uint64_t v16 = v15;
  int v18 = v17;
  int v20 = v19;
  uint64_t v115 = v21;
  uint64_t v116 = v22;
  uint64_t v111 = v23;
  uint64_t v24 = v12;
  uint64_t v147 = *MEMORY[0x263EF8340];
  size_t v110 = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(v12, 0);
  unsigned int v119 = v14;
  uint64_t v25 = v14 >> 4;
  unsigned int v109 = v14 + a10 - 1;
  unsigned int v26 = v109 >> 4;
  uint64_t v120 = v24;
  if (*(void *)(v24 + 168)) {
    int v27 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v27 = 0;
  }
  BOOL v28 = (v27 & 0xD00) == 0 || v27 == 768;
  int v29 = v27 & 0xE00;
  int v31 = !v28 && v29 != 1024;
  int v126 = v31;
  uint64_t result = v24;
  if (v25 <= v26)
  {
    unsigned int v114 = v16 + a9 - 1;
    if (v16 >> 4 <= v114 >> 4)
    {
      uint64_t v123 = (v20 - 1) >> 4;
      uint64_t v108 = (v18 - 1) >> 4;
      int v122 = ((v20 - 1) & 0xF) + 1;
      int v107 = ((v18 - 1) & 0xF) + 1;
      unint64_t v113 = v16;
      uint64_t v105 = v26 + 1;
      unint64_t v106 = (unint64_t)v16 >> 4;
      do
      {
        unsigned int v33 = (16 * v25) | 0xF;
        if (16 * (int)v25 <= v119) {
          unsigned int v34 = v119;
        }
        else {
          unsigned int v34 = 16 * v25;
        }
        if (v109 < v33) {
          unsigned int v33 = v109;
        }
        unsigned int v112 = v34 - 16 * v25;
        int v118 = v33 - v34 + 1;
        if (v25 == v108) {
          unsigned int v35 = v107;
        }
        else {
          unsigned int v35 = 16;
        }
        uint64_t v117 = v111 + (v34 - v119) * a11;
        unint64_t v36 = v106;
        unsigned int v121 = v35;
        do
        {
          unint64_t v37 = 16 * v36;
          unsigned int v38 = 16 * (v36 + 1) - 1;
          if (16 * (int)v36 <= v16) {
            int v39 = v16;
          }
          else {
            int v39 = 16 * v36;
          }
          if (v114 < v38) {
            unsigned int v38 = v114;
          }
          int v40 = v38 - v39 + 1;
          if (v36 == v123) {
            unsigned int v41 = v122;
          }
          else {
            unsigned int v41 = 16;
          }
          BOOL v42 = 1;
          if (16 * (int)v25 >= v119 && v37 >= v113)
          {
            int v43 = v122;
            if (v36 != v123) {
              int v43 = 16;
            }
            BOOL v42 = v40 != v43 || v118 != v35;
          }
          unsigned int v45 = *(_DWORD *)(result + 128) >> (*(unsigned char *)(result + 144) + a12);
          if (v45 <= 1) {
            unsigned int v45 = 1;
          }
          unsigned int v46 = v45 + 15;
          if (v46 < 0x20) {
            unsigned int v47 = 0;
          }
          else {
            unsigned int v47 = 32 - __clz(~(-1 << -(char)__clz((v46 >> 4) - 1)));
          }
          unsigned int v48 = *(_DWORD *)(result + 132) >> (*(unsigned char *)(result + 144) + a12);
          if (v48 <= 1) {
            unsigned int v48 = 1;
          }
          unsigned int v49 = v48 + 15;
          if (v49 < 0x20) {
            unsigned int v50 = 0;
          }
          else {
            unsigned int v50 = 32 - __clz(~(-1 << -(char)__clz((v49 >> 4) - 1)));
          }
          unint64_t v124 = v36 + 1;
          if (v50 | v47)
          {
            int v51 = 0;
            uint64_t v52 = 0;
            BOOL v53 = v47 != 0;
            BOOL v54 = v50 != 0;
            int v55 = 1;
            do
            {
              --v47;
              if (v53) {
                v52 |= (unint64_t)(v55 & v36) << v51++;
              }
              else {
                unsigned int v47 = 0;
              }
              --v50;
              if (v54) {
                v52 |= (unint64_t)(v55 & v25) << v51++;
              }
              else {
                unsigned int v50 = 0;
              }
              v55 *= 2;
              --v51;
              BOOL v54 = v50 != 0;
              BOOL v53 = v47 != 0;
            }
            while (v50 | v47);
          }
          else
          {
            uint64_t v52 = 0;
          }
          size_t v56 = v25 * v110 + (v36 << 11);
          uint64_t v57 = v16;
          int v58 = v41 < 0x10 || v42;
          int v59 = (char *)(v116 + 8 * v52);
          unint64_t v60 = v117 + 8 * (v39 - v16);
          unint64_t v61 = (void *)(v115 + v56);
          if (v35 < 0x10) {
            int v62 = 1;
          }
          else {
            int v62 = v58;
          }
          unint64_t v125 = v61;
          if (v126)
          {
            int v63 = __dst;
            if (!v62) {
              goto LABEL_77;
            }
            memcpy(__dst, v61, sizeof(__dst));
            LOBYTE(v35) = v121;
            uint64_t result = v120;
          }
          else
          {
            int v63 = v61;
            if (!v62)
            {
LABEL_77:
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::compressMacroblock(v60, a11, (unint64_t)v63, v59, v41, v35);
              goto LABEL_78;
            }
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE18ELj1ELh0ELNS7_13SubblockOrderE1EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder3EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = result;
          uint64_t v128 = v63;
          unsigned __int8 v136 = v41;
          unsigned __int8 v137 = v35;
          unsigned int v132 = v112;
          unsigned int v133 = v39 - v37;
          unsigned int v129 = v59;
          unint64_t v130 = v60;
          uint64_t v131 = a11;
          unsigned int v134 = v118;
          unsigned int v135 = v40;
          if (v42)
          {
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(result + 8) + 7384), block);
LABEL_78:
            uint64_t v16 = v57;
            unint64_t v64 = v124;
            goto LABEL_109;
          }
          uint64_t v65 = (uint64_t)&v63[AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressSubblock(v139, 128, (uint64_t)v63, *v59)];
          uint64_t v66 = v65
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressSubblock(v140, 128, v65, v59[1]);
          uint64_t v67 = v66
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressSubblock(v141, 128, v66, v59[2]);
          uint64_t v68 = v67
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressSubblock(v142, 128, v67, v59[3]);
          uint64_t v69 = v68
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressSubblock(v143, 128, v68, v59[4]);
          uint64_t v70 = v69
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressSubblock(v144, 128, v69, v59[5]);
          uint64_t v71 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressSubblock(v145, 128, v70, v59[6]);
          AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressSubblock(v146, 128, v70 + v71, v59[7]);
          uint64_t v72 = v134;
          uint64_t v16 = v57;
          unint64_t v64 = v124;
          if (v134 && v135)
          {
            unint64_t v73 = (unint64_t)v132 << 7;
            uint64_t v74 = 8 * v133;
            unsigned int v75 = (char *)v139 + v73 + v74;
            unint64_t v76 = v130;
            uint64_t v77 = v131;
            unint64_t v78 = 8 * v135;
            if (v78 <= 1) {
              unint64_t v79 = 1;
            }
            else {
              unint64_t v79 = 8 * v135;
            }
            if (v79)
            {
              unint64_t v80 = (v79 - 1) >> 32;
              if (!v80)
              {
                double v81 = (char *)v139 + v73 + v74;
                uint64_t v82 = v79 & 0x7FFFFFFE0;
                uint64_t v83 = v79 & 0x7FFFFFFF8;
                int8x8_t v84 = (char *)&v139[1] + v73 + v74;
                int32x4_t v85 = (long long *)(v130 + 16);
                double v86 = v75;
                unint64_t v87 = v130;
                while (1)
                {
                  double v88 = (char *)(v76 + v77 * v80);
                  int8x8_t v89 = &v75[128 * v80];
                  if ((unint64_t)(&v81[128 * v80] - v88) < 0x20)
                  {
                    int v90 = 0;
                    goto LABEL_101;
                  }
                  if (v79 >= 0x20)
                  {
                    double v92 = v85;
                    double v93 = v84;
                    uint64_t v94 = v79 & 0x7FFFFFFE0;
                    do
                    {
                      long long v95 = *v92;
                      *(v93 - 1) = *(v92 - 1);
                      *double v93 = v95;
                      v93 += 2;
                      v92 += 2;
                      v94 -= 32;
                    }
                    while (v94);
                    if (v79 == v82) {
                      goto LABEL_87;
                    }
                    uint64_t v91 = v79 & 0x7FFFFFFE0;
                    if ((v79 & 0x18) == 0)
                    {
                      v88 += v82;
                      v89 += v82;
                      int v90 = v79 & 0xFFFFFFE0;
                      goto LABEL_101;
                    }
                  }
                  else
                  {
                    uint64_t v91 = 0;
                  }
                  v89 += v83;
                  unint64_t v96 = v91 - (v79 & 0x7FFFFFFF8);
                  double v97 = (uint64_t *)(v87 + v91);
                  double v98 = &v86[v91];
                  do
                  {
                    uint64_t v99 = *v97++;
                    *(void *)double v98 = v99;
                    v98 += 8;
                    v96 += 8;
                  }
                  while (v96);
                  if (v79 == v83) {
                    goto LABEL_87;
                  }
                  v88 += v83;
                  int v90 = v79 & 0xFFFFFFF8;
LABEL_101:
                  unsigned int v100 = v90 + 1;
                  do
                  {
                    char v101 = *v88++;
                    *v89++ = v101;
                  }
                  while (v78 > v100++);
LABEL_87:
                  ++v80;
                  v84 += 128;
                  int32x4_t v85 = (long long *)((char *)v85 + v77);
                  v87 += v77;
                  v86 += 128;
                  if (v80 == v72) {
                    goto LABEL_108;
                  }
                }
              }
            }
            uint64_t v103 = 0;
            do
            {
              uint64_t v104 = 0;
              do
              {
                v75[v104] = *(unsigned char *)(v76 + v104);
                ++v104;
              }
              while (v78 > v104);
              ++v103;
              v75 += 128;
              v76 += v77;
            }
            while (v103 != v72);
          }
LABEL_108:
          AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v139, 128, (unint64_t)v128, v129, v136, v137);
LABEL_109:
          if (v126) {
            memcpy(v125, v63, 0x800uLL);
          }
          unint64_t v36 = v64;
          uint64_t result = v120;
          unsigned int v35 = v121;
        }
        while (v64 != (v114 >> 4) + 1);
        ++v25;
      }
      while (v25 != v105);
    }
  }
  return result;
}

uint64_t AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)3>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10, uint64_t a11, char a12)
{
  uint64_t v12 = MEMORY[0x270FA5388](a1);
  unsigned int v14 = v13;
  unsigned int v16 = v15;
  int v18 = v17;
  int v20 = v19;
  uint64_t v181 = v21;
  uint64_t v182 = v22;
  uint64_t v175 = v23;
  uint64_t v24 = v12;
  uint64_t v211 = *MEMORY[0x263EF8340];
  size_t v174 = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(v12, 0);
  unsigned int v185 = v14;
  uint64_t v25 = v14 >> 4;
  unsigned int v173 = v14 + a10 - 1;
  unsigned int v26 = v173 >> 4;
  uint64_t v186 = v24;
  if (*(void *)(v24 + 168)) {
    int v27 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v27 = 0;
  }
  BOOL v28 = (v27 & 0xD00) == 0 || v27 == 768;
  int v29 = v27 & 0xE00;
  int v31 = !v28 && v29 != 1024;
  int v190 = v31;
  uint64_t result = v24;
  if (v25 <= v26)
  {
    unsigned int v180 = v16 + a9 - 1;
    if (v16 >> 4 <= v180 >> 4)
    {
      uint64_t v33 = a11;
      uint64_t v188 = (v20 - 1) >> 4;
      uint64_t v172 = (v18 - 1) >> 4;
      int v187 = ((v20 - 1) & 0xF) + 1;
      int v171 = ((v18 - 1) & 0xF) + 1;
      unint64_t v178 = v16;
      uint64_t v169 = v26 + 1;
      unint64_t v170 = (unint64_t)v16 >> 4;
      unsigned int v179 = v16;
      do
      {
        unsigned int v34 = (16 * v25) | 0xF;
        if (16 * (int)v25 <= v185) {
          unsigned int v35 = v185;
        }
        else {
          unsigned int v35 = 16 * v25;
        }
        if (v173 < v34) {
          unsigned int v34 = v173;
        }
        unsigned int v177 = v35 - 16 * v25;
        int v184 = v34 - v35 + 1;
        if (v25 == v172) {
          unsigned int v36 = v171;
        }
        else {
          unsigned int v36 = 16;
        }
        uint64_t v183 = v175 + (v35 - v185) * v33;
        unint64_t v37 = v170;
        do
        {
          unint64_t v38 = 16 * v37;
          unint64_t v189 = v37 + 1;
          unsigned int v39 = 16 * (v37 + 1) - 1;
          if (16 * (int)v37 <= v16) {
            unsigned int v40 = v16;
          }
          else {
            unsigned int v40 = 16 * v37;
          }
          if (v180 < v39) {
            unsigned int v39 = v180;
          }
          int v41 = v39 - v40 + 1;
          if (v37 == v188) {
            unsigned int v42 = v187;
          }
          else {
            unsigned int v42 = 16;
          }
          BOOL v43 = 1;
          if (16 * (int)v25 >= v185 && v38 >= v178)
          {
            int v44 = v187;
            if (v37 != v188) {
              int v44 = 16;
            }
            BOOL v43 = v41 != v44 || v184 != v36;
          }
          unsigned int v46 = *(_DWORD *)(result + 128) >> (*(unsigned char *)(result + 144) + a12);
          if (v46 <= 1) {
            unsigned int v46 = 1;
          }
          unsigned int v47 = v46 + 15;
          if (v47 < 0x20) {
            unsigned int v48 = 0;
          }
          else {
            unsigned int v48 = 32 - __clz(~(-1 << -(char)__clz((v47 >> 4) - 1)));
          }
          unsigned int v49 = *(_DWORD *)(result + 132) >> (*(unsigned char *)(result + 144) + a12);
          if (v49 <= 1) {
            unsigned int v49 = 1;
          }
          unsigned int v50 = v49 + 15;
          if (v50 < 0x20)
          {
            unsigned int v51 = 0;
            if (!v48)
            {
LABEL_65:
              uint64_t v53 = 0;
              goto LABEL_66;
            }
          }
          else
          {
            unsigned int v51 = 32 - __clz(~(-1 << -(char)__clz((v50 >> 4) - 1)));
            if (!(v51 | v48)) {
              goto LABEL_65;
            }
          }
          int v52 = 0;
          uint64_t v53 = 0;
          BOOL v54 = v48 != 0;
          BOOL v55 = v51 != 0;
          int v56 = 1;
          do
          {
            --v48;
            if (v54) {
              v53 |= (unint64_t)(v56 & v37) << v52++;
            }
            else {
              unsigned int v48 = 0;
            }
            --v51;
            if (v55) {
              v53 |= (unint64_t)(v56 & v25) << v52++;
            }
            else {
              unsigned int v51 = 0;
            }
            v56 *= 2;
            --v52;
            BOOL v55 = v51 != 0;
            BOOL v54 = v48 != 0;
          }
          while (v51 | v48);
LABEL_66:
          size_t v57 = v25 * v174 + (v37 << 11);
          unsigned int v58 = v40 - v16;
          int v59 = v42 < 0x10 || v43;
          unint64_t v60 = (unsigned __int8 *)(v182 + 8 * v53);
          uint64_t v61 = v183 + 8 * v58;
          int v62 = (void *)(v181 + v57);
          if (v36 < 0x10) {
            int v63 = 1;
          }
          else {
            int v63 = v59;
          }
          if (v190)
          {
            if (!v63)
            {
              uint64_t v67 = __dst;
LABEL_79:
              uint64_t v71 = 0;
              uint64_t v72 = v67;
              do
              {
                uint64_t v95 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)1,1u>::kSubblockPositions[v71 + 1];
                uint64_t v96 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)1,1u>::kSubblockPositions[v71];
                unsigned int v97 = (v42 - 8 * v96) & ~((int)(v42 - 8 * v96) >> 31);
                if (v97 >= 8) {
                  unsigned int v97 = 8;
                }
                unsigned int v98 = (v36 - 4 * v95) & ~((int)(v36 - 4 * v95) >> 31);
                if (v98 >= 4) {
                  unsigned int v98 = 4;
                }
                if (v97) {
                  BOOL v99 = v98 == 0;
                }
                else {
                  BOOL v99 = 1;
                }
                if (v99)
                {
                  char v94 = 0;
                }
                else
                {
                  unint64_t v73 = (long long *)(v61 + 4 * a11 * v95 + (v96 << 6));
                  uint64_t v74 = (long long *)((char *)v73 + v33);
                  long long v76 = *v73;
                  long long v77 = v73[1];
                  long long v78 = v73[2];
                  long long v79 = v73[3];
                  unsigned int v75 = (long long *)((char *)v73 + 2 * a11);
                  long long v80 = v74[2];
                  long long v81 = v74[3];
                  long long v82 = *v74;
                  long long v84 = *v75;
                  long long v85 = v75[1];
                  long long v86 = v75[2];
                  long long v87 = v75[3];
                  uint64_t v83 = (long long *)((char *)v75 + v33);
                  long long v88 = v77;
                  long long v89 = v74[1];
                  long long v90 = v83[1];
                  long long v91 = v83[2];
                  long long v92 = v83[3];
                  long long v93 = *v83;
                  *uint64_t v72 = v76;
                  v72[1] = v82;
                  v72[2] = v88;
                  v72[3] = v89;
                  v72[4] = v84;
                  v72[5] = v93;
                  v72[6] = v85;
                  v72[7] = v90;
                  v72[8] = v78;
                  v72[9] = v80;
                  v72[10] = v79;
                  v72[11] = v81;
                  v72[12] = v86;
                  v72[13] = v91;
                  v72[14] = v87;
                  v72[15] = v92;
                  v72 += 16;
                  char v94 = -1;
                }
                *v60++ = v94;
                v71 += 2;
              }
              while (v71 != 16);
              unsigned int v16 = v179;
              unint64_t v70 = v189;
              goto LABEL_92;
            }
            unint64_t v64 = v62;
            int v65 = v41;
            BOOL v66 = v43;
            memcpy(__dst, v62, sizeof(__dst));
            BOOL v43 = v66;
            uint64_t v33 = a11;
            int v41 = v65;
            uint64_t v67 = __dst;
            int v62 = v64;
            uint64_t result = v186;
          }
          else
          {
            uint64_t v67 = v62;
            if (!v63) {
              goto LABEL_79;
            }
          }
          uint64_t v68 = v62;
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE18ELj1ELh1ELNS7_13SubblockOrderE1EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder3EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = result;
          unsigned int v192 = (float64x2_t *)v67;
          unsigned __int8 v200 = v42;
          unsigned __int8 v201 = v36;
          unsigned int v196 = v177;
          unsigned int v197 = v40 - v38;
          unsigned int v193 = v60;
          uint64_t v194 = v61;
          uint64_t v195 = v33;
          unsigned int v198 = v184;
          unsigned int v199 = v41;
          if (v43)
          {
            uint64_t v69 = v67;
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(result + 8) + 7384), block);
            uint64_t v67 = v69;
            uint64_t result = v186;
            unsigned int v16 = v179;
            unint64_t v70 = v189;
            int v62 = v68;
            goto LABEL_92;
          }
          uint64_t v176 = v67;
          uint64_t v100 = (uint64_t)&v67[AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressSubblock(v203, 128, (uint64_t)v67, *v60)];
          uint64_t v101 = v100
               + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressSubblock(v204, 128, v100, v60[1]);
          uint64_t v102 = v101
               + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressSubblock(v205, 128, v101, v60[2]);
          uint64_t v103 = v102
               + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressSubblock(v206, 128, v102, v60[3]);
          uint64_t v104 = v103
               + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressSubblock(v207, 128, v103, v60[4]);
          uint64_t v105 = v104
               + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressSubblock(v208, 128, v104, v60[5]);
          uint64_t v106 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressSubblock(v209, 128, v105, v60[6]);
          AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressSubblock(v210, 128, v105 + v106, v60[7]);
          uint64_t v107 = v198;
          if (v198 && v199)
          {
            unint64_t v108 = (unint64_t)v196 << 7;
            uint64_t v109 = 8 * v197;
            size_t v110 = (char *)v203 + v108 + v109;
            uint64_t v111 = v194;
            uint64_t v112 = v195;
            unint64_t v113 = 8 * v199;
            if (v113 <= 1) {
              unint64_t v114 = 1;
            }
            else {
              unint64_t v114 = 8 * v199;
            }
            if (v114)
            {
              unint64_t v115 = (v114 - 1) >> 32;
              if (!v115)
              {
                uint64_t v116 = (char *)v203 + v108 + v109;
                uint64_t v117 = v114 & 0x7FFFFFFE0;
                uint64_t v118 = v114 & 0x7FFFFFFF8;
                unsigned int v119 = (char *)&v203[1] + v108 + v109;
                uint64_t v120 = (long long *)(v194 + 16);
                unsigned int v121 = v110;
                uint64_t v122 = v194;
                while (1)
                {
                  uint64_t v123 = (char *)(v111 + v112 * v115);
                  unint64_t v124 = &v110[128 * v115];
                  if ((unint64_t)(&v116[128 * v115] - v123) < 0x20)
                  {
                    int v125 = 0;
                    goto LABEL_116;
                  }
                  if (v114 >= 0x20)
                  {
                    uint64_t v127 = v120;
                    uint64_t v128 = v119;
                    uint64_t v129 = v114 & 0x7FFFFFFE0;
                    do
                    {
                      long long v130 = *v127;
                      *(v128 - 1) = *(v127 - 1);
                      *uint64_t v128 = v130;
                      v128 += 2;
                      v127 += 2;
                      v129 -= 32;
                    }
                    while (v129);
                    if (v114 == v117) {
                      goto LABEL_102;
                    }
                    uint64_t v126 = v114 & 0x7FFFFFFE0;
                    if ((v114 & 0x18) == 0)
                    {
                      v123 += v117;
                      v124 += v117;
                      int v125 = v114 & 0xFFFFFFE0;
                      goto LABEL_116;
                    }
                  }
                  else
                  {
                    uint64_t v126 = 0;
                  }
                  v124 += v118;
                  unint64_t v131 = v126 - (v114 & 0x7FFFFFFF8);
                  unsigned int v132 = (uint64_t *)(v122 + v126);
                  unsigned int v133 = &v121[v126];
                  do
                  {
                    uint64_t v134 = *v132++;
                    *(void *)unsigned int v133 = v134;
                    v133 += 8;
                    v131 += 8;
                  }
                  while (v131);
                  if (v114 == v118) {
                    goto LABEL_102;
                  }
                  v123 += v118;
                  int v125 = v114 & 0xFFFFFFF8;
LABEL_116:
                  unsigned int v135 = v125 + 1;
                  do
                  {
                    char v136 = *v123++;
                    *v124++ = v136;
                  }
                  while (v113 > v135++);
LABEL_102:
                  ++v115;
                  v119 += 128;
                  uint64_t v120 = (long long *)((char *)v120 + v112);
                  v122 += v112;
                  v121 += 128;
                  if (v115 == v107) {
                    goto LABEL_123;
                  }
                }
              }
            }
            uint64_t v138 = 0;
            do
            {
              uint64_t v139 = 0;
              do
              {
                v110[v139] = *(unsigned char *)(v111 + v139);
                ++v139;
              }
              while (v113 > v139);
              ++v138;
              v110 += 128;
              v111 += v112;
            }
            while (v138 != v107);
          }
LABEL_123:
          uint64_t v140 = 0;
          unsigned int v141 = v192;
          size_t v142 = (char *)v193;
          int v143 = v200;
          int v144 = v201;
          unsigned int v16 = v179;
          uint64_t result = v186;
          unint64_t v70 = v189;
          int v62 = v68;
          uint64_t v67 = v176;
          do
          {
            uint64_t v164 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)1,1u>::kSubblockPositions[v140 + 1];
            uint64_t v165 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)1,1u>::kSubblockPositions[v140];
            unsigned int v166 = (v143 - 8 * v165) & ~((v143 - 8 * (int)v165) >> 31);
            if (v166 >= 8) {
              unsigned int v166 = 8;
            }
            unsigned int v167 = (v144 - 4 * v164) & ~((v144 - 4 * (int)v164) >> 31);
            if (v167 >= 4) {
              unsigned int v167 = 4;
            }
            if (v166) {
              BOOL v168 = v167 == 0;
            }
            else {
              BOOL v168 = 1;
            }
            if (v168)
            {
              char v163 = 0;
            }
            else
            {
              int v145 = &v203[32 * v164 + 4 * v165];
              float64x2_t v146 = v145[2];
              float64x2_t v147 = v145[10];
              float64x2_t v148 = v145[3];
              float64x2_t v149 = v145[11];
              float64x2_t v150 = *v145;
              float64x2_t v151 = v145[8];
              float64x2_t v152 = v145[1];
              float64x2_t v153 = v145[16];
              float64x2_t v154 = v145[17];
              float64x2_t v155 = v145[18];
              float64x2_t v156 = v145[19];
              float64x2_t v157 = v145[9];
              v145 += 24;
              float64x2_t v158 = v145[1];
              float64x2_t v159 = v145[2];
              float64x2_t v160 = v145[3];
              float64x2_t v161 = *v145;
              *unsigned int v141 = v150;
              v141[1] = v151;
              v141[2] = v152;
              v141[3] = v157;
              float64x2_t v141[4] = v153;
              v141[5] = v161;
              v141[6] = v154;
              v141[7] = v158;
              v141[8] = v146;
              v141[9] = v147;
              v141[10] = v148;
              v141[11] = v149;
              unsigned int v162 = v141 + 12;
              v141 += 16;
              char v163 = -1;
              *unsigned int v162 = v155;
              v162[1] = v159;
              v162[2] = v156;
              v162[3] = v160;
            }
            *v142++ = v163;
            v140 += 2;
          }
          while (v140 != 16);
LABEL_92:
          if (v190)
          {
            memcpy(v62, v67, 0x800uLL);
            uint64_t result = v186;
          }
          unint64_t v37 = v70;
        }
        while (v70 != (v180 >> 4) + 1);
        ++v25;
      }
      while (v25 != v169);
    }
  }
  return result;
}

uint64_t AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>,false,(AGXHardwareTextureMemoryOrder)3>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10, uint64_t a11, char a12)
{
  uint64_t v12 = MEMORY[0x270FA5388](a1);
  unsigned int v14 = v13;
  uint64_t v16 = v15;
  int v18 = v17;
  int v20 = v19;
  uint64_t v116 = v21;
  uint64_t v117 = v22;
  uint64_t v112 = v23;
  uint64_t v24 = v12;
  v147[56] = *MEMORY[0x263EF8340];
  size_t v111 = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(v12, 0);
  unsigned int v120 = v14;
  uint64_t v25 = v14 >> 4;
  unsigned int v110 = v14 + a10 - 1;
  unsigned int v26 = v110 >> 4;
  uint64_t v124 = v24;
  if (*(void *)(v24 + 168)) {
    int v27 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v27 = 0;
  }
  BOOL v28 = (v27 & 0xD00) == 0 || v27 == 768;
  int v29 = v27 & 0xE00;
  int v31 = !v28 && v29 != 1024;
  int v127 = v31;
  uint64_t result = v24;
  if (v25 <= v26)
  {
    unsigned int v115 = v16 + a9 - 1;
    if (v16 >> 4 <= v115 >> 4)
    {
      uint64_t v123 = (v20 - 1) >> 4;
      uint64_t v109 = (v18 - 1) >> 4;
      int v122 = ((v20 - 1) & 0xF) + 1;
      int v108 = ((v18 - 1) & 0xF) + 1;
      unint64_t v114 = v16;
      uint64_t v106 = v26 + 1;
      unint64_t v107 = (unint64_t)v16 >> 4;
      do
      {
        unsigned int v33 = (16 * v25) | 0xF;
        if (16 * (int)v25 <= v120) {
          unsigned int v34 = v120;
        }
        else {
          unsigned int v34 = 16 * v25;
        }
        if (v110 < v33) {
          unsigned int v33 = v110;
        }
        unsigned int v113 = v34 - 16 * v25;
        int v119 = v33 - v34 + 1;
        if (v25 == v109) {
          unsigned int v35 = v108;
        }
        else {
          unsigned int v35 = 16;
        }
        uint64_t v118 = v112 + (v34 - v120) * a11;
        unint64_t v36 = v107;
        unsigned int v121 = v35;
        do
        {
          unint64_t v37 = 16 * v36;
          unsigned int v38 = 16 * (v36 + 1) - 1;
          if (16 * (int)v36 <= v16) {
            int v39 = v16;
          }
          else {
            int v39 = 16 * v36;
          }
          if (v115 < v38) {
            unsigned int v38 = v115;
          }
          int v40 = v38 - v39 + 1;
          if (v36 == v123) {
            unsigned int v41 = v122;
          }
          else {
            unsigned int v41 = 16;
          }
          BOOL v42 = 1;
          if (16 * (int)v25 >= v120 && v37 >= v114)
          {
            int v43 = v122;
            if (v36 != v123) {
              int v43 = 16;
            }
            BOOL v42 = v40 != v43 || v119 != v35;
          }
          unsigned int v45 = *(_DWORD *)(result + 128) >> (*(unsigned char *)(result + 144) + a12);
          if (v45 <= 1) {
            unsigned int v45 = 1;
          }
          unsigned int v46 = v45 + 15;
          if (v46 < 0x20) {
            unsigned int v47 = 0;
          }
          else {
            unsigned int v47 = 32 - __clz(~(-1 << -(char)__clz((v46 >> 4) - 1)));
          }
          unsigned int v48 = *(_DWORD *)(result + 132) >> (*(unsigned char *)(result + 144) + a12);
          if (v48 <= 1) {
            unsigned int v48 = 1;
          }
          unsigned int v49 = v48 + 15;
          if (v49 < 0x20) {
            unsigned int v50 = 0;
          }
          else {
            unsigned int v50 = 32 - __clz(~(-1 << -(char)__clz((v49 >> 4) - 1)));
          }
          unint64_t v125 = v36 + 1;
          if (v50 | v47)
          {
            int v51 = 0;
            uint64_t v52 = 0;
            BOOL v53 = v47 != 0;
            BOOL v54 = v50 != 0;
            int v55 = 1;
            do
            {
              --v47;
              if (v53) {
                v52 |= (unint64_t)(v55 & v36) << v51++;
              }
              else {
                unsigned int v47 = 0;
              }
              --v50;
              if (v54) {
                v52 |= (unint64_t)(v55 & v25) << v51++;
              }
              else {
                unsigned int v50 = 0;
              }
              v55 *= 2;
              --v51;
              BOOL v54 = v50 != 0;
              BOOL v53 = v47 != 0;
            }
            while (v50 | v47);
          }
          else
          {
            uint64_t v52 = 0;
          }
          uint64_t v56 = v25 * v111 + 1536 * v36;
          uint64_t v57 = v16;
          int v58 = v41 < 0x10 || v42;
          int v59 = (unsigned __int8 *)(v117 + 8 * v52);
          uint64_t v60 = v118 + 8 * (v39 - v16);
          uint64_t v61 = (void *)(v116 + v56);
          if (v35 < 0x10) {
            int v62 = 1;
          }
          else {
            int v62 = v58;
          }
          uint64_t v126 = v61;
          if (v127)
          {
            int v63 = __dst;
            if (!v62) {
              goto LABEL_77;
            }
            memcpy(__dst, v61, sizeof(__dst));
            LOBYTE(v35) = v121;
            uint64_t result = v124;
          }
          else
          {
            int v63 = v61;
            if (!v62)
            {
LABEL_77:
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::compressMacroblock(v60, a11, (unint64_t)v63, v59, v41, v35, *(_DWORD *)(*(void *)(result + 208) + 52));
              goto LABEL_78;
            }
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE18ELj1ELh0ELNS7_13SubblockOrderE1EL19AGXTextureFootprint1EEELb0EL29AGXHardwareTextureMemoryOrder3EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = result;
          uint64_t v129 = v63;
          unsigned __int8 v137 = v41;
          unsigned __int8 v138 = v35;
          unsigned int v133 = v113;
          unsigned int v134 = v39 - v37;
          long long v130 = v59;
          uint64_t v131 = v60;
          uint64_t v132 = a11;
          unsigned int v135 = v119;
          unsigned int v136 = v40;
          if (v42)
          {
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(result + 8) + 7384), block);
LABEL_78:
            uint64_t v16 = v57;
            unint64_t v64 = v125;
            goto LABEL_109;
          }
          int v65 = *(_DWORD *)(*(void *)(result + 208) + 52);
          unint64_t v66 = (unint64_t)&v63[AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::decompressSubblock((uint64_t)v140, 128, (unint64_t)v63, *v59, v65)];
          unint64_t v67 = v66
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::decompressSubblock((uint64_t)&v141, 128, v66, v59[1], v65);
          unint64_t v68 = v67
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::decompressSubblock((uint64_t)&v142, 128, v67, v59[2], v65);
          unint64_t v69 = v68
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::decompressSubblock((uint64_t)&v143, 128, v68, v59[3], v65);
          unint64_t v70 = v69
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::decompressSubblock((uint64_t)&v144, 128, v69, v59[4], v65);
          unint64_t v71 = v70
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::decompressSubblock((uint64_t)&v145, 128, v70, v59[5], v65);
          uint64_t v72 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::decompressSubblock((uint64_t)&v146, 128, v71, v59[6], v65);
          AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::decompressSubblock((uint64_t)v147, 128, v71 + v72, v59[7], v65);
          uint64_t v73 = v135;
          uint64_t v16 = v57;
          unint64_t v64 = v125;
          if (v135 && v136)
          {
            unint64_t v74 = (unint64_t)v133 << 7;
            uint64_t v75 = 8 * v134;
            long long v76 = &v140[v74 + v75];
            uint64_t v77 = v131;
            uint64_t v78 = v132;
            unint64_t v79 = 8 * v136;
            if (v79 <= 1) {
              unint64_t v80 = 1;
            }
            else {
              unint64_t v80 = 8 * v136;
            }
            if (v80)
            {
              unint64_t v81 = (v80 - 1) >> 32;
              if (!v81)
              {
                long long v82 = &v140[v74 + v75];
                uint64_t v83 = v80 & 0x7FFFFFFE0;
                uint64_t v84 = v80 & 0x7FFFFFFF8;
                long long v85 = &v140[v74 + 16 + v75];
                long long v86 = (long long *)(v131 + 16);
                long long v87 = v76;
                uint64_t v88 = v131;
                while (1)
                {
                  long long v89 = (char *)(v77 + v78 * v81);
                  long long v90 = &v76[128 * v81];
                  if ((unint64_t)(&v82[128 * v81] - v89) < 0x20)
                  {
                    int v91 = 0;
                    goto LABEL_101;
                  }
                  if (v80 >= 0x20)
                  {
                    long long v93 = v86;
                    char v94 = v85;
                    uint64_t v95 = v80 & 0x7FFFFFFE0;
                    do
                    {
                      long long v96 = *v93;
                      *(v94 - 1) = *(v93 - 1);
                      *char v94 = v96;
                      v94 += 2;
                      v93 += 2;
                      v95 -= 32;
                    }
                    while (v95);
                    if (v80 == v83) {
                      goto LABEL_87;
                    }
                    uint64_t v92 = v80 & 0x7FFFFFFE0;
                    if ((v80 & 0x18) == 0)
                    {
                      v89 += v83;
                      v90 += v83;
                      int v91 = v80 & 0xFFFFFFE0;
                      goto LABEL_101;
                    }
                  }
                  else
                  {
                    uint64_t v92 = 0;
                  }
                  v90 += v84;
                  unint64_t v97 = v92 - (v80 & 0x7FFFFFFF8);
                  unsigned int v98 = (uint64_t *)(v88 + v92);
                  BOOL v99 = &v87[v92];
                  do
                  {
                    uint64_t v100 = *v98++;
                    *v99++ = v100;
                    v97 += 8;
                  }
                  while (v97);
                  if (v80 == v84) {
                    goto LABEL_87;
                  }
                  v89 += v84;
                  int v91 = v80 & 0xFFFFFFF8;
LABEL_101:
                  unsigned int v101 = v91 + 1;
                  do
                  {
                    char v102 = *v89++;
                    *v90++ = v102;
                  }
                  while (v79 > v101++);
LABEL_87:
                  ++v81;
                  v85 += 128;
                  long long v86 = (long long *)((char *)v86 + v78);
                  v88 += v78;
                  v87 += 128;
                  if (v81 == v73) {
                    goto LABEL_108;
                  }
                }
              }
            }
            uint64_t v104 = 0;
            do
            {
              uint64_t v105 = 0;
              do
              {
                v76[v105] = *(unsigned char *)(v77 + v105);
                ++v105;
              }
              while (v79 > v105);
              ++v104;
              v76 += 128;
              v77 += v78;
            }
            while (v104 != v73);
          }
LABEL_108:
          AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::compressMacroblock((uint64_t)v140, 128, (unint64_t)v129, v130, v137, v138, *(_DWORD *)(*(void *)(v124 + 208) + 52));
LABEL_109:
          if (v127) {
            memcpy(v126, v63, 0x800uLL);
          }
          unint64_t v36 = v64;
          uint64_t result = v124;
          unsigned int v35 = v121;
        }
        while (v64 != (v115 >> 4) + 1);
        ++v25;
      }
      while (v25 != v106);
    }
  }
  return result;
}

uint64_t AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>,false,(AGXHardwareTextureMemoryOrder)3>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10, uint64_t a11, char a12)
{
  uint64_t v12 = MEMORY[0x270FA5388](a1);
  unsigned int v14 = v13;
  uint64_t v16 = v15;
  int v18 = v17;
  int v20 = v19;
  uint64_t v116 = v21;
  uint64_t v117 = v22;
  uint64_t v112 = v23;
  uint64_t v24 = v12;
  v147[56] = *MEMORY[0x263EF8340];
  size_t v111 = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(v12, 0);
  unsigned int v120 = v14;
  uint64_t v25 = v14 >> 4;
  unsigned int v110 = v14 + a10 - 1;
  unsigned int v26 = v110 >> 4;
  uint64_t v124 = v24;
  if (*(void *)(v24 + 168)) {
    int v27 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v27 = 0;
  }
  BOOL v28 = (v27 & 0xD00) == 0 || v27 == 768;
  int v29 = v27 & 0xE00;
  int v31 = !v28 && v29 != 1024;
  int v127 = v31;
  uint64_t result = v24;
  if (v25 <= v26)
  {
    unsigned int v115 = v16 + a9 - 1;
    if (v16 >> 4 <= v115 >> 4)
    {
      uint64_t v123 = (v20 - 1) >> 4;
      uint64_t v109 = (v18 - 1) >> 4;
      int v122 = ((v20 - 1) & 0xF) + 1;
      int v108 = ((v18 - 1) & 0xF) + 1;
      unint64_t v114 = v16;
      uint64_t v106 = v26 + 1;
      unint64_t v107 = (unint64_t)v16 >> 4;
      do
      {
        unsigned int v33 = (16 * v25) | 0xF;
        if (16 * (int)v25 <= v120) {
          unsigned int v34 = v120;
        }
        else {
          unsigned int v34 = 16 * v25;
        }
        if (v110 < v33) {
          unsigned int v33 = v110;
        }
        unsigned int v113 = v34 - 16 * v25;
        int v119 = v33 - v34 + 1;
        if (v25 == v109) {
          unsigned int v35 = v108;
        }
        else {
          unsigned int v35 = 16;
        }
        uint64_t v118 = v112 + (v34 - v120) * a11;
        unint64_t v36 = v107;
        unsigned int v121 = v35;
        do
        {
          unint64_t v37 = 16 * v36;
          unsigned int v38 = 16 * (v36 + 1) - 1;
          if (16 * (int)v36 <= v16) {
            int v39 = v16;
          }
          else {
            int v39 = 16 * v36;
          }
          if (v115 < v38) {
            unsigned int v38 = v115;
          }
          int v40 = v38 - v39 + 1;
          if (v36 == v123) {
            unsigned int v41 = v122;
          }
          else {
            unsigned int v41 = 16;
          }
          BOOL v42 = 1;
          if (16 * (int)v25 >= v120 && v37 >= v114)
          {
            int v43 = v122;
            if (v36 != v123) {
              int v43 = 16;
            }
            BOOL v42 = v40 != v43 || v119 != v35;
          }
          unsigned int v45 = *(_DWORD *)(result + 128) >> (*(unsigned char *)(result + 144) + a12);
          if (v45 <= 1) {
            unsigned int v45 = 1;
          }
          unsigned int v46 = v45 + 15;
          if (v46 < 0x20) {
            unsigned int v47 = 0;
          }
          else {
            unsigned int v47 = 32 - __clz(~(-1 << -(char)__clz((v46 >> 4) - 1)));
          }
          unsigned int v48 = *(_DWORD *)(result + 132) >> (*(unsigned char *)(result + 144) + a12);
          if (v48 <= 1) {
            unsigned int v48 = 1;
          }
          unsigned int v49 = v48 + 15;
          if (v49 < 0x20) {
            unsigned int v50 = 0;
          }
          else {
            unsigned int v50 = 32 - __clz(~(-1 << -(char)__clz((v49 >> 4) - 1)));
          }
          unint64_t v125 = v36 + 1;
          if (v50 | v47)
          {
            int v51 = 0;
            uint64_t v52 = 0;
            BOOL v53 = v47 != 0;
            BOOL v54 = v50 != 0;
            int v55 = 1;
            do
            {
              --v47;
              if (v53) {
                v52 |= (unint64_t)(v55 & v36) << v51++;
              }
              else {
                unsigned int v47 = 0;
              }
              --v50;
              if (v54) {
                v52 |= (unint64_t)(v55 & v25) << v51++;
              }
              else {
                unsigned int v50 = 0;
              }
              v55 *= 2;
              --v51;
              BOOL v54 = v50 != 0;
              BOOL v53 = v47 != 0;
            }
            while (v50 | v47);
          }
          else
          {
            uint64_t v52 = 0;
          }
          uint64_t v56 = v25 * v111 + 1280 * v36;
          uint64_t v57 = v16;
          int v58 = v41 < 0x10 || v42;
          int v59 = (unsigned __int8 *)(v117 + 8 * v52);
          uint64_t v60 = v118 + 8 * (v39 - v16);
          uint64_t v61 = (void *)(v116 + v56);
          if (v35 < 0x10) {
            int v62 = 1;
          }
          else {
            int v62 = v58;
          }
          uint64_t v126 = v61;
          if (v127)
          {
            int v63 = __dst;
            if (!v62) {
              goto LABEL_77;
            }
            memcpy(__dst, v61, sizeof(__dst));
            LOBYTE(v35) = v121;
            uint64_t result = v124;
          }
          else
          {
            int v63 = v61;
            if (!v62)
            {
LABEL_77:
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::compressMacroblock(v60, a11, (uint64_t)v63, v59, v41, v35, *(_DWORD *)(*(void *)(result + 208) + 52));
              goto LABEL_78;
            }
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE18ELj1ELh0ELNS7_13SubblockOrderE1EL19AGXTextureFootprint2EEELb0EL29AGXHardwareTextureMemoryOrder3EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = result;
          uint64_t v129 = v63;
          unsigned __int8 v137 = v41;
          unsigned __int8 v138 = v35;
          unsigned int v133 = v113;
          unsigned int v134 = v39 - v37;
          long long v130 = v59;
          uint64_t v131 = v60;
          uint64_t v132 = a11;
          unsigned int v135 = v119;
          unsigned int v136 = v40;
          if (v42)
          {
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(result + 8) + 7384), block);
LABEL_78:
            uint64_t v16 = v57;
            unint64_t v64 = v125;
            goto LABEL_109;
          }
          int v65 = *(_DWORD *)(*(void *)(result + 208) + 52);
          unint64_t v66 = (unint64_t)&v63[AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressSubblock((uint64_t)v140, 128, (unint64_t)v63, *v59, v65)];
          unint64_t v67 = v66
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressSubblock((uint64_t)&v141, 128, v66, v59[1], v65);
          unint64_t v68 = v67
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressSubblock((uint64_t)&v142, 128, v67, v59[2], v65);
          unint64_t v69 = v68
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressSubblock((uint64_t)&v143, 128, v68, v59[3], v65);
          unint64_t v70 = v69
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressSubblock((uint64_t)&v144, 128, v69, v59[4], v65);
          unint64_t v71 = v70
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressSubblock((uint64_t)&v145, 128, v70, v59[5], v65);
          uint64_t v72 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressSubblock((uint64_t)&v146, 128, v71, v59[6], v65);
          AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressSubblock((uint64_t)v147, 128, v71 + v72, v59[7], v65);
          uint64_t v73 = v135;
          uint64_t v16 = v57;
          unint64_t v64 = v125;
          if (v135 && v136)
          {
            unint64_t v74 = (unint64_t)v133 << 7;
            uint64_t v75 = 8 * v134;
            long long v76 = &v140[v74 + v75];
            uint64_t v77 = v131;
            uint64_t v78 = v132;
            unint64_t v79 = 8 * v136;
            if (v79 <= 1) {
              unint64_t v80 = 1;
            }
            else {
              unint64_t v80 = 8 * v136;
            }
            if (v80)
            {
              unint64_t v81 = (v80 - 1) >> 32;
              if (!v81)
              {
                long long v82 = &v140[v74 + v75];
                uint64_t v83 = v80 & 0x7FFFFFFE0;
                uint64_t v84 = v80 & 0x7FFFFFFF8;
                long long v85 = &v140[v74 + 16 + v75];
                long long v86 = (long long *)(v131 + 16);
                long long v87 = v76;
                uint64_t v88 = v131;
                while (1)
                {
                  long long v89 = (char *)(v77 + v78 * v81);
                  long long v90 = &v76[128 * v81];
                  if ((unint64_t)(&v82[128 * v81] - v89) < 0x20)
                  {
                    int v91 = 0;
                    goto LABEL_101;
                  }
                  if (v80 >= 0x20)
                  {
                    long long v93 = v86;
                    char v94 = v85;
                    uint64_t v95 = v80 & 0x7FFFFFFE0;
                    do
                    {
                      long long v96 = *v93;
                      *(v94 - 1) = *(v93 - 1);
                      *char v94 = v96;
                      v94 += 2;
                      v93 += 2;
                      v95 -= 32;
                    }
                    while (v95);
                    if (v80 == v83) {
                      goto LABEL_87;
                    }
                    uint64_t v92 = v80 & 0x7FFFFFFE0;
                    if ((v80 & 0x18) == 0)
                    {
                      v89 += v83;
                      v90 += v83;
                      int v91 = v80 & 0xFFFFFFE0;
                      goto LABEL_101;
                    }
                  }
                  else
                  {
                    uint64_t v92 = 0;
                  }
                  v90 += v84;
                  unint64_t v97 = v92 - (v80 & 0x7FFFFFFF8);
                  unsigned int v98 = (uint64_t *)(v88 + v92);
                  BOOL v99 = &v87[v92];
                  do
                  {
                    uint64_t v100 = *v98++;
                    *v99++ = v100;
                    v97 += 8;
                  }
                  while (v97);
                  if (v80 == v84) {
                    goto LABEL_87;
                  }
                  v89 += v84;
                  int v91 = v80 & 0xFFFFFFF8;
LABEL_101:
                  unsigned int v101 = v91 + 1;
                  do
                  {
                    char v102 = *v89++;
                    *v90++ = v102;
                  }
                  while (v79 > v101++);
LABEL_87:
                  ++v81;
                  v85 += 128;
                  long long v86 = (long long *)((char *)v86 + v78);
                  v88 += v78;
                  v87 += 128;
                  if (v81 == v73) {
                    goto LABEL_108;
                  }
                }
              }
            }
            uint64_t v104 = 0;
            do
            {
              uint64_t v105 = 0;
              do
              {
                v76[v105] = *(unsigned char *)(v77 + v105);
                ++v105;
              }
              while (v79 > v105);
              ++v104;
              v76 += 128;
              v77 += v78;
            }
            while (v104 != v73);
          }
LABEL_108:
          AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::compressMacroblock((uint64_t)v140, 128, (uint64_t)v129, v130, v137, v138, *(_DWORD *)(*(void *)(v124 + 208) + 52));
LABEL_109:
          if (v127) {
            memcpy(v126, v63, 0x800uLL);
          }
          unint64_t v36 = v64;
          uint64_t result = v124;
          unsigned int v35 = v121;
        }
        while (v64 != (v115 >> 4) + 1);
        ++v25;
      }
      while (v25 != v106);
    }
  }
  return result;
}

uint64_t AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>,false,(AGXHardwareTextureMemoryOrder)3>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10, uint64_t a11, char a12)
{
  uint64_t v12 = MEMORY[0x270FA5388](a1);
  unsigned int v14 = v13;
  uint64_t v16 = v15;
  int v18 = v17;
  int v20 = v19;
  uint64_t v116 = v21;
  uint64_t v117 = v22;
  uint64_t v112 = v23;
  uint64_t v24 = v12;
  v147[56] = *MEMORY[0x263EF8340];
  size_t v111 = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(v12, 0);
  unsigned int v120 = v14;
  uint64_t v25 = v14 >> 4;
  unsigned int v110 = v14 + a10 - 1;
  unsigned int v26 = v110 >> 4;
  uint64_t v124 = v24;
  if (*(void *)(v24 + 168)) {
    int v27 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v27 = 0;
  }
  BOOL v28 = (v27 & 0xD00) == 0 || v27 == 768;
  int v29 = v27 & 0xE00;
  int v31 = !v28 && v29 != 1024;
  int v127 = v31;
  uint64_t result = v24;
  if (v25 <= v26)
  {
    unsigned int v115 = v16 + a9 - 1;
    if (v16 >> 4 <= v115 >> 4)
    {
      uint64_t v123 = (v20 - 1) >> 4;
      uint64_t v109 = (v18 - 1) >> 4;
      int v122 = ((v20 - 1) & 0xF) + 1;
      int v108 = ((v18 - 1) & 0xF) + 1;
      unint64_t v114 = v16;
      uint64_t v106 = v26 + 1;
      unint64_t v107 = (unint64_t)v16 >> 4;
      do
      {
        unsigned int v33 = (16 * v25) | 0xF;
        if (16 * (int)v25 <= v120) {
          unsigned int v34 = v120;
        }
        else {
          unsigned int v34 = 16 * v25;
        }
        if (v110 < v33) {
          unsigned int v33 = v110;
        }
        unsigned int v113 = v34 - 16 * v25;
        int v119 = v33 - v34 + 1;
        if (v25 == v109) {
          unsigned int v35 = v108;
        }
        else {
          unsigned int v35 = 16;
        }
        uint64_t v118 = v112 + (v34 - v120) * a11;
        unint64_t v36 = v107;
        unsigned int v121 = v35;
        do
        {
          unint64_t v37 = 16 * v36;
          unsigned int v38 = 16 * (v36 + 1) - 1;
          if (16 * (int)v36 <= v16) {
            int v39 = v16;
          }
          else {
            int v39 = 16 * v36;
          }
          if (v115 < v38) {
            unsigned int v38 = v115;
          }
          int v40 = v38 - v39 + 1;
          if (v36 == v123) {
            unsigned int v41 = v122;
          }
          else {
            unsigned int v41 = 16;
          }
          BOOL v42 = 1;
          if (16 * (int)v25 >= v120 && v37 >= v114)
          {
            int v43 = v122;
            if (v36 != v123) {
              int v43 = 16;
            }
            BOOL v42 = v40 != v43 || v119 != v35;
          }
          unsigned int v45 = *(_DWORD *)(result + 128) >> (*(unsigned char *)(result + 144) + a12);
          if (v45 <= 1) {
            unsigned int v45 = 1;
          }
          unsigned int v46 = v45 + 15;
          if (v46 < 0x20) {
            unsigned int v47 = 0;
          }
          else {
            unsigned int v47 = 32 - __clz(~(-1 << -(char)__clz((v46 >> 4) - 1)));
          }
          unsigned int v48 = *(_DWORD *)(result + 132) >> (*(unsigned char *)(result + 144) + a12);
          if (v48 <= 1) {
            unsigned int v48 = 1;
          }
          unsigned int v49 = v48 + 15;
          if (v49 < 0x20) {
            unsigned int v50 = 0;
          }
          else {
            unsigned int v50 = 32 - __clz(~(-1 << -(char)__clz((v49 >> 4) - 1)));
          }
          unint64_t v125 = v36 + 1;
          if (v50 | v47)
          {
            int v51 = 0;
            uint64_t v52 = 0;
            BOOL v53 = v47 != 0;
            BOOL v54 = v50 != 0;
            int v55 = 1;
            do
            {
              --v47;
              if (v53) {
                v52 |= (unint64_t)(v55 & v36) << v51++;
              }
              else {
                unsigned int v47 = 0;
              }
              --v50;
              if (v54) {
                v52 |= (unint64_t)(v55 & v25) << v51++;
              }
              else {
                unsigned int v50 = 0;
              }
              v55 *= 2;
              --v51;
              BOOL v54 = v50 != 0;
              BOOL v53 = v47 != 0;
            }
            while (v50 | v47);
          }
          else
          {
            uint64_t v52 = 0;
          }
          size_t v56 = v25 * v111 + (v36 << 10);
          uint64_t v57 = v16;
          int v58 = v41 < 0x10 || v42;
          int v59 = (unsigned __int8 *)(v117 + 8 * v52);
          uint64_t v60 = v118 + 8 * (v39 - v16);
          uint64_t v61 = (void *)(v116 + v56);
          if (v35 < 0x10) {
            int v62 = 1;
          }
          else {
            int v62 = v58;
          }
          uint64_t v126 = v61;
          if (v127)
          {
            int v63 = __dst;
            if (!v62) {
              goto LABEL_77;
            }
            memcpy(__dst, v61, sizeof(__dst));
            LOBYTE(v35) = v121;
            uint64_t result = v124;
          }
          else
          {
            int v63 = v61;
            if (!v62)
            {
LABEL_77:
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::compressMacroblock(v60, a11, (unint64_t)v63, v59, v41, v35, *(_DWORD *)(*(void *)(result + 208) + 52));
              goto LABEL_78;
            }
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE18ELj1ELh0ELNS7_13SubblockOrderE1EL19AGXTextureFootprint3EEELb0EL29AGXHardwareTextureMemoryOrder3EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = result;
          uint64_t v129 = v63;
          unsigned __int8 v137 = v41;
          unsigned __int8 v138 = v35;
          unsigned int v133 = v113;
          unsigned int v134 = v39 - v37;
          long long v130 = v59;
          uint64_t v131 = v60;
          uint64_t v132 = a11;
          unsigned int v135 = v119;
          unsigned int v136 = v40;
          if (v42)
          {
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(result + 8) + 7384), block);
LABEL_78:
            uint64_t v16 = v57;
            unint64_t v64 = v125;
            goto LABEL_109;
          }
          int v65 = *(_DWORD *)(*(void *)(result + 208) + 52);
          unint64_t v66 = (unint64_t)&v63[AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::decompressSubblock((uint64_t)v140, 128, (unint64_t)v63, *v59, v65)];
          unint64_t v67 = v66
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::decompressSubblock((uint64_t)&v141, 128, v66, v59[1], v65);
          unint64_t v68 = v67
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::decompressSubblock((uint64_t)&v142, 128, v67, v59[2], v65);
          unint64_t v69 = v68
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::decompressSubblock((uint64_t)&v143, 128, v68, v59[3], v65);
          unint64_t v70 = v69
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::decompressSubblock((uint64_t)&v144, 128, v69, v59[4], v65);
          unint64_t v71 = v70
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::decompressSubblock((uint64_t)&v145, 128, v70, v59[5], v65);
          uint64_t v72 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::decompressSubblock((uint64_t)&v146, 128, v71, v59[6], v65);
          AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::decompressSubblock((uint64_t)v147, 128, v71 + v72, v59[7], v65);
          uint64_t v73 = v135;
          uint64_t v16 = v57;
          unint64_t v64 = v125;
          if (v135 && v136)
          {
            unint64_t v74 = (unint64_t)v133 << 7;
            uint64_t v75 = 8 * v134;
            long long v76 = &v140[v74 + v75];
            uint64_t v77 = v131;
            uint64_t v78 = v132;
            unint64_t v79 = 8 * v136;
            if (v79 <= 1) {
              unint64_t v80 = 1;
            }
            else {
              unint64_t v80 = 8 * v136;
            }
            if (v80)
            {
              unint64_t v81 = (v80 - 1) >> 32;
              if (!v81)
              {
                long long v82 = &v140[v74 + v75];
                uint64_t v83 = v80 & 0x7FFFFFFE0;
                uint64_t v84 = v80 & 0x7FFFFFFF8;
                long long v85 = &v140[v74 + 16 + v75];
                long long v86 = (long long *)(v131 + 16);
                long long v87 = v76;
                uint64_t v88 = v131;
                while (1)
                {
                  long long v89 = (char *)(v77 + v78 * v81);
                  long long v90 = &v76[128 * v81];
                  if ((unint64_t)(&v82[128 * v81] - v89) < 0x20)
                  {
                    int v91 = 0;
                    goto LABEL_101;
                  }
                  if (v80 >= 0x20)
                  {
                    long long v93 = v86;
                    char v94 = v85;
                    uint64_t v95 = v80 & 0x7FFFFFFE0;
                    do
                    {
                      long long v96 = *v93;
                      *(v94 - 1) = *(v93 - 1);
                      *char v94 = v96;
                      v94 += 2;
                      v93 += 2;
                      v95 -= 32;
                    }
                    while (v95);
                    if (v80 == v83) {
                      goto LABEL_87;
                    }
                    uint64_t v92 = v80 & 0x7FFFFFFE0;
                    if ((v80 & 0x18) == 0)
                    {
                      v89 += v83;
                      v90 += v83;
                      int v91 = v80 & 0xFFFFFFE0;
                      goto LABEL_101;
                    }
                  }
                  else
                  {
                    uint64_t v92 = 0;
                  }
                  v90 += v84;
                  unint64_t v97 = v92 - (v80 & 0x7FFFFFFF8);
                  unsigned int v98 = (uint64_t *)(v88 + v92);
                  BOOL v99 = &v87[v92];
                  do
                  {
                    uint64_t v100 = *v98++;
                    *v99++ = v100;
                    v97 += 8;
                  }
                  while (v97);
                  if (v80 == v84) {
                    goto LABEL_87;
                  }
                  v89 += v84;
                  int v91 = v80 & 0xFFFFFFF8;
LABEL_101:
                  unsigned int v101 = v91 + 1;
                  do
                  {
                    char v102 = *v89++;
                    *v90++ = v102;
                  }
                  while (v79 > v101++);
LABEL_87:
                  ++v81;
                  v85 += 128;
                  long long v86 = (long long *)((char *)v86 + v78);
                  v88 += v78;
                  v87 += 128;
                  if (v81 == v73) {
                    goto LABEL_108;
                  }
                }
              }
            }
            uint64_t v104 = 0;
            do
            {
              uint64_t v105 = 0;
              do
              {
                v76[v105] = *(unsigned char *)(v77 + v105);
                ++v105;
              }
              while (v79 > v105);
              ++v104;
              v76 += 128;
              v77 += v78;
            }
            while (v104 != v73);
          }
LABEL_108:
          AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::compressMacroblock((uint64_t)v140, 128, (unint64_t)v129, v130, v137, v138, *(_DWORD *)(*(void *)(v124 + 208) + 52));
LABEL_109:
          if (v127) {
            memcpy(v126, v63, 0x800uLL);
          }
          unint64_t v36 = v64;
          uint64_t result = v124;
          unsigned int v35 = v121;
        }
        while (v64 != (v115 >> 4) + 1);
        ++v25;
      }
      while (v25 != v106);
    }
  }
  return result;
}

uint64_t AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)3>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, uint64_t a7, unsigned int a8, int a9, int a10, uint64_t a11, char a12)
{
  uint64_t v157 = *MEMORY[0x263EF8340];
  size_t v120 = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v129 = a8;
  uint64_t v19 = a8 >> 4;
  unsigned int v119 = a8 + a10 - 1;
  unsigned int v20 = v119 >> 4;
  uint64_t v130 = a1;
  if (*(void *)(a1 + 168)) {
    int v21 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v21 = 0;
  }
  BOOL v22 = (v21 & 0xD00) == 0 || v21 == 768;
  int v23 = v21 & 0xE00;
  int v25 = !v22 && v23 != 1024;
  int v136 = v25;
  uint64_t result = a1;
  if (v19 <= v20)
  {
    unsigned int v124 = a7 + a9 - 1;
    if (a7 >> 4 <= v124 >> 4)
    {
      uint64_t v133 = (a5 - 1) >> 4;
      uint64_t v118 = (a6 - 1) >> 4;
      int v132 = ((a5 - 1) & 0xF) + 1;
      int v117 = ((a6 - 1) & 0xF) + 1;
      unint64_t v123 = a7;
      uint64_t v115 = v20 + 1;
      unint64_t v116 = (unint64_t)a7 >> 4;
      do
      {
        unsigned int v27 = (16 * v19) | 0xF;
        if (16 * (int)v19 <= v129) {
          unsigned int v28 = v129;
        }
        else {
          unsigned int v28 = 16 * v19;
        }
        if (v119 < v27) {
          unsigned int v27 = v119;
        }
        unsigned int v122 = v28 - 16 * v19;
        int v128 = v27 - v28 + 1;
        if (v19 == v118) {
          unsigned int v29 = v117;
        }
        else {
          unsigned int v29 = 16;
        }
        uint64_t v127 = a3 + (v28 - v129) * a11;
        unint64_t v30 = v116;
        unsigned int v131 = v29;
        do
        {
          unint64_t v31 = 16 * v30;
          unsigned int v32 = 16 * (v30 + 1) - 1;
          if (16 * (int)v30 <= a7) {
            int v33 = a7;
          }
          else {
            int v33 = 16 * v30;
          }
          if (v124 < v32) {
            unsigned int v32 = v124;
          }
          int v34 = v32 - v33 + 1;
          if (v30 == v133) {
            unsigned int v35 = v132;
          }
          else {
            unsigned int v35 = 16;
          }
          BOOL v36 = 1;
          if (16 * (int)v19 >= v129 && v31 >= v123)
          {
            int v37 = v132;
            if (v30 != v133) {
              int v37 = 16;
            }
            BOOL v36 = v34 != v37 || v128 != v29;
          }
          unsigned int v39 = *(_DWORD *)(result + 128) >> (*(unsigned char *)(result + 144) + a12);
          if (v39 <= 1) {
            unsigned int v39 = 1;
          }
          unsigned int v40 = v39 + 15;
          if (v40 < 0x20) {
            unsigned int v41 = 0;
          }
          else {
            unsigned int v41 = 32 - __clz(~(-1 << -(char)__clz((v40 >> 4) - 1)));
          }
          unsigned int v42 = *(_DWORD *)(result + 132) >> (*(unsigned char *)(result + 144) + a12);
          if (v42 <= 1) {
            unsigned int v42 = 1;
          }
          unsigned int v43 = v42 + 15;
          if (v43 < 0x20) {
            unsigned int v44 = 0;
          }
          else {
            unsigned int v44 = 32 - __clz(~(-1 << -(char)__clz((v43 >> 4) - 1)));
          }
          unint64_t v134 = v30 + 1;
          if (v44 | v41)
          {
            int v45 = 0;
            uint64_t v46 = 0;
            BOOL v47 = v41 != 0;
            BOOL v48 = v44 != 0;
            int v49 = 1;
            do
            {
              --v41;
              if (v47) {
                v46 |= (unint64_t)(v49 & v30) << v45++;
              }
              else {
                unsigned int v41 = 0;
              }
              --v44;
              if (v48) {
                v46 |= (unint64_t)(v49 & v19) << v45++;
              }
              else {
                unsigned int v44 = 0;
              }
              v49 *= 2;
              --v45;
              BOOL v48 = v44 != 0;
              BOOL v47 = v41 != 0;
            }
            while (v44 | v41);
          }
          else
          {
            uint64_t v46 = 0;
          }
          size_t v50 = v19 * v120 + (v30 << 10);
          uint64_t v51 = a7;
          int v52 = v35 < 0x10 || v36;
          BOOL v53 = (char *)(a4 + 8 * v46);
          unint64_t v54 = v127 + 4 * (v33 - a7);
          int v55 = (int16x8_t *)(a2 + v50);
          if (v29 < 0x10) {
            int v56 = 1;
          }
          else {
            int v56 = v52;
          }
          unsigned int v135 = v55;
          if (v136)
          {
            uint64_t v57 = (int16x8_t *)__dst;
            if (!v56) {
              goto LABEL_77;
            }
            memcpy(__dst, v55, sizeof(__dst));
            LOBYTE(v29) = v131;
            uint64_t result = v130;
          }
          else
          {
            uint64_t v57 = v55;
            if (!v56)
            {
LABEL_77:
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::compressMacroblock(v54, a11, v57, v53, v35, v29);
              goto LABEL_78;
            }
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE11ELj1ELh0ELNS7_13SubblockOrderE1EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder3EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = result;
          unsigned __int8 v138 = v57;
          unsigned __int8 v146 = v35;
          unsigned __int8 v147 = v29;
          unsigned int v142 = v122;
          unsigned int v143 = v33 - v31;
          uint64_t v139 = v53;
          unint64_t v140 = v54;
          uint64_t v141 = a11;
          unsigned int v144 = v128;
          unsigned int v145 = v34;
          if (v36)
          {
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(result + 8) + 7384), block);
LABEL_78:
            a7 = v51;
            unint64_t v58 = v134;
            goto LABEL_115;
          }
          int v59 = (int64x2_t *)&v57->i8[AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressSubblock(v149, 64, (int64x2_t *)v57, *v53, v17, v18)];
          int v62 = (int64x2_t *)((char *)v59
                            + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressSubblock(v150, 64, v59, v53[1], v60, v61));
          int v65 = (int64x2_t *)((char *)v62
                            + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressSubblock(v151, 64, v62, v53[2], v63, v64));
          unint64_t v68 = (int64x2_t *)((char *)v65
                            + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressSubblock(v152, 64, v65, v53[3], v66, v67));
          unint64_t v71 = (int64x2_t *)((char *)v68
                            + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressSubblock(v153, 64, v68, v53[4], v69, v70));
          unint64_t v74 = (int64x2_t *)((char *)v71
                            + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressSubblock(v154, 64, v71, v53[5], v72, v73));
          uint64_t v77 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressSubblock(v155, 64, v74, v53[6], v75, v76);
          AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressSubblock(v156, 64, (int64x2_t *)((char *)v74 + v77), v53[7], v78, v79);
          uint64_t v80 = v144;
          a7 = v51;
          unint64_t v58 = v134;
          if (v144 && v145)
          {
            unint64_t v81 = (unint64_t)v142 << 6;
            uint64_t v82 = 4 * v143;
            uint64_t v83 = &v149[0].i8[v81 + v82];
            unint64_t v84 = v140;
            uint64_t v85 = v141;
            unint64_t v86 = 4 * v145;
            if (v86 <= 1) {
              unint64_t v87 = 1;
            }
            else {
              unint64_t v87 = 4 * v145;
            }
            if (v87 > 7)
            {
              if (!v87 || (unint64_t v90 = (v87 - 1) >> 32) != 0)
              {
                uint64_t v113 = 0;
                do
                {
                  uint64_t v114 = 0;
                  do
                  {
                    v83[v114] = *(unsigned char *)(v84 + v114);
                    ++v114;
                  }
                  while (v86 > v114);
                  ++v113;
                  v83 += 64;
                  v84 += v85;
                }
                while (v113 != v80);
                goto LABEL_114;
              }
              int v91 = &v149[0].i8[v81 + v82];
              uint64_t v92 = v87 & 0x3FFFFFFE0;
              uint64_t v93 = v87 & 0x3FFFFFFF8;
              char v94 = &v149[1].i8[v81 + v82];
              uint64_t v95 = (long long *)(v140 + 16);
              long long v96 = v83;
              unint64_t v97 = v140;
              while (2)
              {
                unsigned int v98 = (char *)(v84 + v85 * v90);
                BOOL v99 = &v83[64 * v90];
                if ((unint64_t)(&v91[64 * v90] - v98) >= 0x20)
                {
                  if (v87 >= 0x20)
                  {
                    char v102 = v95;
                    uint64_t v103 = v94;
                    uint64_t v104 = v87 & 0x3FFFFFFE0;
                    do
                    {
                      long long v105 = *v102;
                      *((_OWORD *)v103 - 1) = *(v102 - 1);
                      *(_OWORD *)uint64_t v103 = v105;
                      v103 += 32;
                      v102 += 2;
                      v104 -= 32;
                    }
                    while (v104);
                    if (v87 == v92) {
                      goto LABEL_93;
                    }
                    uint64_t v101 = v87 & 0x3FFFFFFE0;
                    if ((v87 & 0x18) == 0)
                    {
                      v98 += v92;
                      v99 += v92;
                      int v100 = v87 & 0xFFFFFFE0;
                      goto LABEL_107;
                    }
                  }
                  else
                  {
                    uint64_t v101 = 0;
                  }
                  v99 += v93;
                  unint64_t v106 = v101 - (v87 & 0x3FFFFFFF8);
                  unint64_t v107 = (uint64_t *)(v97 + v101);
                  int v108 = &v96[v101];
                  do
                  {
                    uint64_t v109 = *v107++;
                    *(void *)int v108 = v109;
                    v108 += 8;
                    v106 += 8;
                  }
                  while (v106);
                  if (v87 != v93)
                  {
                    v98 += v93;
                    int v100 = v87 & 0xFFFFFFF8;
                    goto LABEL_107;
                  }
                }
                else
                {
                  int v100 = 0;
LABEL_107:
                  unsigned int v110 = v100 + 1;
                  do
                  {
                    char v111 = *v98++;
                    *v99++ = v111;
                  }
                  while (v86 > v110++);
                }
LABEL_93:
                ++v90;
                v94 += 64;
                uint64_t v95 = (long long *)((char *)v95 + v85);
                v97 += v85;
                v96 += 64;
                if (v90 == v80) {
                  goto LABEL_114;
                }
                continue;
              }
            }
            uint64_t v88 = 0;
            do
            {
              uint64_t v89 = 0;
              do
              {
                v83[v89] = *(unsigned char *)(v84 + v89);
                ++v89;
              }
              while (v86 > v89);
              ++v88;
              v83 += 64;
              v84 += v85;
            }
            while (v88 != v80);
          }
LABEL_114:
          AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v149, 64, v138, v139, v146, v147);
LABEL_115:
          if (v136) {
            memcpy(v135, v57, 0x400uLL);
          }
          unint64_t v30 = v58;
          uint64_t result = v130;
          unsigned int v29 = v131;
        }
        while (v58 != (v124 >> 4) + 1);
        ++v19;
      }
      while (v19 != v115);
    }
  }
  return result;
}

uint64_t AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)3>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, char a12)
{
  uint64_t v206 = *MEMORY[0x263EF8340];
  size_t v169 = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v180 = a8;
  uint64_t v19 = a8 >> 4;
  unsigned int v168 = a8 + a10 - 1;
  unsigned int v20 = v168 >> 4;
  uint64_t v181 = a1;
  if (*(void *)(a1 + 168)) {
    int v21 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v21 = 0;
  }
  BOOL v22 = (v21 & 0xD00) == 0 || v21 == 768;
  int v23 = v21 & 0xE00;
  int v25 = !v22 && v23 != 1024;
  int v185 = v25;
  uint64_t result = a1;
  if (v19 <= v20)
  {
    unsigned int v175 = a7 + a9 - 1;
    if (a7 >> 4 <= v175 >> 4)
    {
      uint64_t v27 = a11;
      uint64_t v183 = (a5 - 1) >> 4;
      uint64_t v167 = (a6 - 1) >> 4;
      int v182 = ((a5 - 1) & 0xF) + 1;
      int v166 = ((a6 - 1) & 0xF) + 1;
      unint64_t v173 = a7;
      uint64_t v164 = v20 + 1;
      unint64_t v165 = (unint64_t)a7 >> 4;
      unsigned int v174 = a7;
      do
      {
        unsigned int v28 = (16 * v19) | 0xF;
        if (16 * (int)v19 <= v180) {
          unsigned int v29 = v180;
        }
        else {
          unsigned int v29 = 16 * v19;
        }
        if (v168 < v28) {
          unsigned int v28 = v168;
        }
        unsigned int v172 = v29 - 16 * v19;
        int v179 = v28 - v29 + 1;
        if (v19 == v167) {
          unsigned int v30 = v166;
        }
        else {
          unsigned int v30 = 16;
        }
        uint64_t v178 = a3 + (v29 - v180) * v27;
        unint64_t v31 = v165;
        do
        {
          unint64_t v32 = 16 * v31;
          unint64_t v184 = v31 + 1;
          unsigned int v33 = 16 * (v31 + 1) - 1;
          if (16 * (int)v31 <= a7) {
            unsigned int v34 = a7;
          }
          else {
            unsigned int v34 = 16 * v31;
          }
          if (v175 < v33) {
            unsigned int v33 = v175;
          }
          int v35 = v33 - v34 + 1;
          if (v31 == v183) {
            unsigned int v36 = v182;
          }
          else {
            unsigned int v36 = 16;
          }
          BOOL v37 = 1;
          if (16 * (int)v19 >= v180 && v32 >= v173)
          {
            int v38 = v182;
            if (v31 != v183) {
              int v38 = 16;
            }
            BOOL v37 = v35 != v38 || v179 != v30;
          }
          unsigned int v40 = *(_DWORD *)(result + 128) >> (*(unsigned char *)(result + 144) + a12);
          if (v40 <= 1) {
            unsigned int v40 = 1;
          }
          unsigned int v41 = v40 + 15;
          if (v41 < 0x20) {
            unsigned int v42 = 0;
          }
          else {
            unsigned int v42 = 32 - __clz(~(-1 << -(char)__clz((v41 >> 4) - 1)));
          }
          unsigned int v43 = *(_DWORD *)(result + 132) >> (*(unsigned char *)(result + 144) + a12);
          if (v43 <= 1) {
            unsigned int v43 = 1;
          }
          unsigned int v44 = v43 + 15;
          if (v44 < 0x20)
          {
            unsigned int v45 = 0;
            if (!v42)
            {
LABEL_65:
              uint64_t v47 = 0;
              goto LABEL_66;
            }
          }
          else
          {
            unsigned int v45 = 32 - __clz(~(-1 << -(char)__clz((v44 >> 4) - 1)));
            if (!(v45 | v42)) {
              goto LABEL_65;
            }
          }
          int v46 = 0;
          uint64_t v47 = 0;
          BOOL v48 = v42 != 0;
          BOOL v49 = v45 != 0;
          int v50 = 1;
          do
          {
            --v42;
            if (v48) {
              v47 |= (unint64_t)(v50 & v31) << v46++;
            }
            else {
              unsigned int v42 = 0;
            }
            --v45;
            if (v49) {
              v47 |= (unint64_t)(v50 & v19) << v46++;
            }
            else {
              unsigned int v45 = 0;
            }
            v50 *= 2;
            --v46;
            BOOL v49 = v45 != 0;
            BOOL v48 = v42 != 0;
          }
          while (v45 | v42);
LABEL_66:
          size_t v51 = v19 * v169 + (v31 << 10);
          unsigned int v52 = v34 - a7;
          int v53 = v36 < 0x10 || v37;
          unint64_t v54 = (unsigned __int8 *)(a4 + 8 * v47);
          int v55 = (int64x2_t *)(v178 + 4 * v52);
          int v56 = (int64x2_t *)(a2 + v51);
          if (v30 < 0x10) {
            int v57 = 1;
          }
          else {
            int v57 = v53;
          }
          if (v185)
          {
            if (v57)
            {
              unint64_t v58 = v56;
              int v59 = v35;
              BOOL v60 = v37;
              memcpy(__dst, v56, sizeof(__dst));
              BOOL v37 = v60;
              uint64_t v27 = a11;
              int v35 = v59;
              int32x4_t v61 = (int64x2_t *)__dst;
              int v56 = v58;
              uint64_t result = v181;
LABEL_76:
              int v62 = v56;
              block[0] = MEMORY[0x263EF8330];
              block[1] = 3221225472;
              block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE11ELj1ELh1ELNS7_13SubblockOrderE1EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder3EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
              block[3] = &__block_descriptor_90_e5_v8__0l;
              block[4] = result;
              int v187 = v61;
              unsigned __int8 v195 = v36;
              unsigned __int8 v196 = v30;
              unsigned int v191 = v172;
              unsigned int v192 = v34 - v32;
              uint64_t v188 = v54;
              unint64_t v189 = v55;
              uint64_t v190 = v27;
              unsigned int v193 = v179;
              unsigned int v194 = v35;
              if (v37)
              {
                int32x4_t v63 = v61;
                dispatch_sync(*(dispatch_queue_t *)(*(void *)(result + 8) + 7384), block);
                int32x4_t v61 = v63;
                uint64_t result = v181;
                a7 = v174;
                unint64_t v64 = v184;
                int v56 = v62;
                goto LABEL_92;
              }
              int v171 = v61;
              unint64_t v87 = (int64x2_t *)((char *)v61
                                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressSubblock(v198, 64, v61, *v54, (int32x4_t)v17, (int32x4_t)v18));
              unint64_t v90 = (int64x2_t *)((char *)v87
                                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressSubblock(v199, 64, v87, v54[1], v88, v89));
              uint64_t v93 = (int64x2_t *)((char *)v90
                                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressSubblock(v200, 64, v90, v54[2], v91, v92));
              long long v96 = (int64x2_t *)((char *)v93
                                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressSubblock(v201, 64, v93, v54[3], v94, v95));
              BOOL v99 = (int64x2_t *)((char *)v96
                                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressSubblock(v202, 64, v96, v54[4], v97, v98));
              char v102 = (int64x2_t *)((char *)v99
                                 + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressSubblock(v203, 64, v99, v54[5], v100, v101));
              uint64_t v105 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressSubblock(v204, 64, v102, v54[6], v103, v104);
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressSubblock(v205, 64, (int64x2_t *)((char *)v102 + v105), v54[7], v106, v107);
              uint64_t v108 = v193;
              if (v193 && v194)
              {
                unint64_t v109 = (unint64_t)v191 << 6;
                uint64_t v110 = 4 * v192;
                char v111 = &v198[0].i8[v109 + v110];
                uint64_t v112 = v189;
                uint64_t v113 = v190;
                unint64_t v114 = 4 * v194;
                if (v114 <= 1) {
                  unint64_t v115 = 1;
                }
                else {
                  unint64_t v115 = 4 * v194;
                }
                if (v115 <= 7)
                {
                  uint64_t v116 = 0;
                  do
                  {
                    uint64_t v117 = 0;
                    do
                    {
                      v111[v117] = v112->i8[v117];
                      ++v117;
                    }
                    while (v114 > v117);
                    ++v116;
                    v111 += 64;
                    uint64_t v112 = (int64x2_t *)((char *)v112 + v113);
                  }
                  while (v116 != v108);
                  goto LABEL_129;
                }
                if (v115)
                {
                  unint64_t v118 = (v115 - 1) >> 32;
                  if (!v118)
                  {
                    unsigned int v119 = &v198[0].i8[v109 + v110];
                    uint64_t v120 = v115 & 0x3FFFFFFE0;
                    uint64_t v121 = v115 & 0x3FFFFFFF8;
                    unsigned int v122 = &v198[1].i8[v109 + v110];
                    unint64_t v123 = v189 + 1;
                    unsigned int v124 = v111;
                    unint64_t v125 = v189;
                    while (1)
                    {
                      uint64_t v126 = &v112->i8[v113 * v118];
                      uint64_t v127 = &v111[64 * v118];
                      if ((unint64_t)(&v119[64 * v118] - v126) < 0x20)
                      {
                        int v128 = 0;
                        goto LABEL_122;
                      }
                      if (v115 >= 0x20)
                      {
                        uint64_t v130 = v123;
                        unsigned int v131 = (int64x2_t *)v122;
                        uint64_t v132 = v115 & 0x3FFFFFFE0;
                        do
                        {
                          int64x2_t v17 = v130[-1];
                          int64x2_t v18 = *v130;
                          v131[-1] = v17;
                          *unsigned int v131 = v18;
                          v131 += 2;
                          v130 += 2;
                          v132 -= 32;
                        }
                        while (v132);
                        if (v115 == v120) {
                          goto LABEL_108;
                        }
                        uint64_t v129 = v115 & 0x3FFFFFFE0;
                        if ((v115 & 0x18) == 0)
                        {
                          v126 += v120;
                          v127 += v120;
                          int v128 = v115 & 0xFFFFFFE0;
                          goto LABEL_122;
                        }
                      }
                      else
                      {
                        uint64_t v129 = 0;
                      }
                      v127 += v121;
                      unint64_t v133 = v129 - (v115 & 0x3FFFFFFF8);
                      unint64_t v134 = (uint64_t *)((char *)v125->i64 + v129);
                      unsigned int v135 = (uint64_t *)&v124[v129];
                      do
                      {
                        uint64_t v136 = *v134++;
                        v17.i64[0] = v136;
                        *v135++ = v136;
                        v133 += 8;
                      }
                      while (v133);
                      if (v115 == v121) {
                        goto LABEL_108;
                      }
                      v126 += v121;
                      int v128 = v115 & 0xFFFFFFF8;
LABEL_122:
                      unsigned int v137 = v128 + 1;
                      do
                      {
                        char v138 = *v126++;
                        *v127++ = v138;
                      }
                      while (v114 > v137++);
LABEL_108:
                      ++v118;
                      v122 += 64;
                      unint64_t v123 = (int64x2_t *)((char *)v123 + v113);
                      unint64_t v125 = (int64x2_t *)((char *)v125 + v113);
                      v124 += 64;
                      if (v118 == v108) {
                        goto LABEL_129;
                      }
                    }
                  }
                }
                uint64_t v140 = 0;
                do
                {
                  uint64_t v141 = 0;
                  do
                  {
                    v111[v141] = v112->i8[v141];
                    ++v141;
                  }
                  while (v114 > v141);
                  ++v140;
                  v111 += 64;
                  uint64_t v112 = (int64x2_t *)((char *)v112 + v113);
                }
                while (v140 != v108);
              }
LABEL_129:
              uint64_t v142 = 0;
              unsigned int v143 = v187;
              unsigned int v144 = (char *)v188;
              int v145 = v195;
              int v146 = v196;
              a7 = v174;
              uint64_t result = v181;
              unint64_t v64 = v184;
              int v56 = v62;
              int32x4_t v61 = v171;
              do
              {
                uint64_t v159 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)1,1u>::kSubblockPositions[v142 + 1];
                uint64_t v160 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)1,1u>::kSubblockPositions[v142];
                unsigned int v161 = (v145 - 8 * v160) & ~((v145 - 8 * (int)v160) >> 31);
                if (v161 >= 8) {
                  unsigned int v161 = 8;
                }
                unsigned int v162 = (v146 - 4 * v159) & ~((v146 - 4 * (int)v159) >> 31);
                if (v162 >= 4) {
                  unsigned int v162 = 4;
                }
                if (v161) {
                  BOOL v163 = v162 == 0;
                }
                else {
                  BOOL v163 = 1;
                }
                if (v163)
                {
                  char v158 = 0;
                }
                else
                {
                  unsigned __int8 v147 = &v198[16 * v159 + 2 * v160];
                  int64x2_t v148 = v147[1];
                  int64x2_t v149 = v147[4];
                  int64x2_t v150 = v147[5];
                  int64x2_t v151 = vzip1q_s64(*v147, v149);
                  int64x2_t v152 = vzip2q_s64(*v147, v149);
                  int64x2_t v153 = vzip1q_s64(v148, v150);
                  int64x2_t v154 = vzip2q_s64(v148, v150);
                  int64x2_t v17 = v147[8];
                  int64x2_t v18 = v147[9];
                  v147 += 12;
                  int64x2_t v155 = v147[1];
                  int64x2_t v156 = vzip1q_s64(v17, *v147);
                  int64x2_t v157 = vzip2q_s64(v17, *v147);
                  *unsigned int v143 = v151;
                  v143[1] = v152;
                  v143[2] = v156;
                  v143[3] = v157;
                  float64x2_t v143[4] = v153;
                  v143[5] = v154;
                  v143[6] = vzip1q_s64(v18, v155);
                  v143[7] = vzip2q_s64(v18, v155);
                  v143 += 8;
                  char v158 = 127;
                }
                *v144++ = v158;
                v142 += 2;
              }
              while (v142 != 16);
              goto LABEL_92;
            }
            int32x4_t v61 = (int64x2_t *)__dst;
          }
          else
          {
            int32x4_t v61 = v56;
            if (v57) {
              goto LABEL_76;
            }
          }
          uint64_t v65 = 0;
          int32x4_t v66 = v61;
          do
          {
            uint64_t v82 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)1,1u>::kSubblockPositions[v65 + 1];
            uint64_t v83 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)1,1u>::kSubblockPositions[v65];
            unsigned int v84 = (v36 - 8 * v83) & ~((int)(v36 - 8 * v83) >> 31);
            if (v84 >= 8) {
              unsigned int v84 = 8;
            }
            unsigned int v85 = (v30 - 4 * v82) & ~((int)(v30 - 4 * v82) >> 31);
            if (v85 >= 4) {
              unsigned int v85 = 4;
            }
            if (v84) {
              BOOL v86 = v85 == 0;
            }
            else {
              BOOL v86 = 1;
            }
            if (v86)
            {
              char v81 = 0;
            }
            else
            {
              int32x4_t v67 = (int64x2_t *)((char *)&v55[2 * v83] + 4 * a11 * v82);
              unint64_t v68 = (int64x2_t *)((char *)v67 + v27);
              int64x2_t v70 = *v67;
              int64x2_t v71 = v67[1];
              int32x4_t v69 = (int64x2_t *)((char *)v67 + 2 * a11);
              int64x2_t v72 = v68[1];
              int64x2_t v73 = vzip1q_s64(v70, *v68);
              int64x2_t v74 = vzip2q_s64(v70, *v68);
              int64x2_t v75 = vzip1q_s64(v71, v72);
              int64x2_t v76 = vzip2q_s64(v71, v72);
              int64x2_t v17 = *v69;
              int64x2_t v18 = v69[1];
              uint64_t v77 = (int64x2_t *)((char *)v69 + v27);
              int64x2_t v78 = v77[1];
              int64x2_t v79 = vzip1q_s64(v17, *v77);
              int64x2_t v80 = vzip2q_s64(v17, *v77);
              *int32x4_t v66 = v73;
              v66[1] = v74;
              v66[2] = v79;
              v66[3] = v80;
              v66[4] = v75;
              v66[5] = v76;
              v66[6] = vzip1q_s64(v18, v78);
              v66[7] = vzip2q_s64(v18, v78);
              v66 += 8;
              char v81 = 127;
            }
            *v54++ = v81;
            v65 += 2;
          }
          while (v65 != 16);
          a7 = v174;
          unint64_t v64 = v184;
LABEL_92:
          if (v185)
          {
            memcpy(v56, v61, 0x400uLL);
            uint64_t result = v181;
          }
          unint64_t v31 = v64;
        }
        while (v64 != (v175 >> 4) + 1);
        ++v19;
      }
      while (v19 != v164);
    }
  }
  return result;
}

uint64_t AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>,false,(AGXHardwareTextureMemoryOrder)3>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, uint64_t a7, unsigned int a8, int a9, int a10, uint64_t a11, char a12)
{
  uint64_t v158 = *MEMORY[0x263EF8340];
  size_t v121 = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v130 = a8;
  uint64_t v19 = a8 >> 4;
  unsigned int v120 = a8 + a10 - 1;
  unsigned int v20 = v120 >> 4;
  uint64_t v134 = a1;
  if (*(void *)(a1 + 168)) {
    int v21 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v21 = 0;
  }
  BOOL v22 = (v21 & 0xD00) == 0 || v21 == 768;
  int v23 = v21 & 0xE00;
  int v25 = !v22 && v23 != 1024;
  int v137 = v25;
  uint64_t result = a1;
  if (v19 <= v20)
  {
    unsigned int v125 = a7 + a9 - 1;
    if (a7 >> 4 <= v125 >> 4)
    {
      uint64_t v133 = (a5 - 1) >> 4;
      uint64_t v119 = (a6 - 1) >> 4;
      int v132 = ((a5 - 1) & 0xF) + 1;
      int v118 = ((a6 - 1) & 0xF) + 1;
      unint64_t v124 = a7;
      uint64_t v116 = v20 + 1;
      unint64_t v117 = (unint64_t)a7 >> 4;
      do
      {
        unsigned int v27 = (16 * v19) | 0xF;
        if (16 * (int)v19 <= v130) {
          unsigned int v28 = v130;
        }
        else {
          unsigned int v28 = 16 * v19;
        }
        if (v120 < v27) {
          unsigned int v27 = v120;
        }
        unsigned int v123 = v28 - 16 * v19;
        int v129 = v27 - v28 + 1;
        if (v19 == v119) {
          unsigned int v29 = v118;
        }
        else {
          unsigned int v29 = 16;
        }
        uint64_t v128 = a3 + (v28 - v130) * a11;
        unint64_t v30 = v117;
        unsigned int v131 = v29;
        do
        {
          unint64_t v31 = 16 * v30;
          unsigned int v32 = 16 * (v30 + 1) - 1;
          if (16 * (int)v30 <= a7) {
            int v33 = a7;
          }
          else {
            int v33 = 16 * v30;
          }
          if (v125 < v32) {
            unsigned int v32 = v125;
          }
          int v34 = v32 - v33 + 1;
          if (v30 == v133) {
            unsigned int v35 = v132;
          }
          else {
            unsigned int v35 = 16;
          }
          BOOL v36 = 1;
          if (16 * (int)v19 >= v130 && v31 >= v124)
          {
            int v37 = v132;
            if (v30 != v133) {
              int v37 = 16;
            }
            BOOL v36 = v34 != v37 || v129 != v29;
          }
          unsigned int v39 = *(_DWORD *)(result + 128) >> (*(unsigned char *)(result + 144) + a12);
          if (v39 <= 1) {
            unsigned int v39 = 1;
          }
          unsigned int v40 = v39 + 15;
          if (v40 < 0x20) {
            unsigned int v41 = 0;
          }
          else {
            unsigned int v41 = 32 - __clz(~(-1 << -(char)__clz((v40 >> 4) - 1)));
          }
          unsigned int v42 = *(_DWORD *)(result + 132) >> (*(unsigned char *)(result + 144) + a12);
          if (v42 <= 1) {
            unsigned int v42 = 1;
          }
          unsigned int v43 = v42 + 15;
          if (v43 < 0x20) {
            unsigned int v44 = 0;
          }
          else {
            unsigned int v44 = 32 - __clz(~(-1 << -(char)__clz((v43 >> 4) - 1)));
          }
          unint64_t v135 = v30 + 1;
          if (v44 | v41)
          {
            int v45 = 0;
            uint64_t v46 = 0;
            BOOL v47 = v41 != 0;
            BOOL v48 = v44 != 0;
            int v49 = 1;
            do
            {
              --v41;
              if (v47) {
                v46 |= (unint64_t)(v49 & v30) << v45++;
              }
              else {
                unsigned int v41 = 0;
              }
              --v44;
              if (v48) {
                v46 |= (unint64_t)(v49 & v19) << v45++;
              }
              else {
                unsigned int v44 = 0;
              }
              v49 *= 2;
              --v45;
              BOOL v48 = v44 != 0;
              BOOL v47 = v41 != 0;
            }
            while (v44 | v41);
          }
          else
          {
            uint64_t v46 = 0;
          }
          uint64_t v50 = v19 * v121 + 768 * v30;
          uint64_t v51 = a7;
          int v52 = v35 < 0x10 || v36;
          int v53 = (unsigned __int8 *)(a4 + 8 * v46);
          uint64_t v54 = v128 + 4 * (v33 - a7);
          int v55 = (void *)(a2 + v50);
          if (v29 < 0x10) {
            int v56 = 1;
          }
          else {
            int v56 = v52;
          }
          uint64_t v136 = v55;
          if (v137)
          {
            int v57 = __dst;
            if (!v56) {
              goto LABEL_77;
            }
            memcpy(__dst, v55, sizeof(__dst));
            LOBYTE(v29) = v131;
            uint64_t result = v134;
          }
          else
          {
            int v57 = v55;
            if (!v56)
            {
LABEL_77:
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::compressMacroblock(v54, a11, (unint64_t)v57, v53, v35, v29, *(_DWORD *)(*(void *)(result + 208) + 52));
              goto LABEL_78;
            }
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE11ELj1ELh0ELNS7_13SubblockOrderE1EL19AGXTextureFootprint1EEELb0EL29AGXHardwareTextureMemoryOrder3EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = result;
          uint64_t v139 = v57;
          unsigned __int8 v147 = v35;
          unsigned __int8 v148 = v29;
          unsigned int v143 = v123;
          unsigned int v144 = v33 - v31;
          uint64_t v140 = v53;
          uint64_t v141 = v54;
          uint64_t v142 = a11;
          unsigned int v145 = v129;
          unsigned int v146 = v34;
          if (v36)
          {
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(result + 8) + 7384), block);
LABEL_78:
            a7 = v51;
            unint64_t v58 = v135;
            goto LABEL_115;
          }
          int v59 = *(_DWORD *)(*(void *)(result + 208) + 52);
          uint64_t v60 = (uint64_t)&v57[AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::decompressSubblock(v150, 64, (uint64_t)v57, *v53, v59, v17, v18)];
          uint64_t v63 = v60
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::decompressSubblock(v151, 64, v60, v53[1], v59, v61, v62);
          uint64_t v66 = v63
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::decompressSubblock(v152, 64, v63, v53[2], v59, v64, v65);
          uint64_t v69 = v66
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::decompressSubblock(v153, 64, v66, v53[3], v59, v67, v68);
          uint64_t v72 = v69
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::decompressSubblock(v154, 64, v69, v53[4], v59, v70, v71);
          uint64_t v75 = v72
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::decompressSubblock(v155, 64, v72, v53[5], v59, v73, v74);
          uint64_t v78 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::decompressSubblock(v156, 64, v75, v53[6], v59, v76, v77);
          AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::decompressSubblock(v157, 64, v75 + v78, v53[7], v59, v79, v80);
          uint64_t v81 = v145;
          a7 = v51;
          unint64_t v58 = v135;
          if (v145 && v146)
          {
            unint64_t v82 = (unint64_t)v143 << 6;
            uint64_t v83 = 4 * v144;
            unsigned int v84 = (char *)v150 + v82 + v83;
            uint64_t v85 = v141;
            uint64_t v86 = v142;
            unint64_t v87 = 4 * v146;
            if (v87 <= 1) {
              unint64_t v88 = 1;
            }
            else {
              unint64_t v88 = 4 * v146;
            }
            if (v88 > 7)
            {
              if (!v88 || (unint64_t v91 = (v88 - 1) >> 32) != 0)
              {
                uint64_t v114 = 0;
                do
                {
                  uint64_t v115 = 0;
                  do
                  {
                    v84[v115] = *(unsigned char *)(v85 + v115);
                    ++v115;
                  }
                  while (v87 > v115);
                  ++v114;
                  v84 += 64;
                  v85 += v86;
                }
                while (v114 != v81);
                goto LABEL_114;
              }
              int32x4_t v92 = (char *)v150 + v82 + v83;
              uint64_t v93 = v88 & 0x3FFFFFFE0;
              uint64_t v94 = v88 & 0x3FFFFFFF8;
              int32x4_t v95 = (char *)&v150[1] + v82 + v83;
              long long v96 = (long long *)(v141 + 16);
              int32x4_t v97 = v84;
              uint64_t v98 = v141;
              while (2)
              {
                BOOL v99 = (char *)(v85 + v86 * v91);
                int32x4_t v100 = &v84[64 * v91];
                if ((unint64_t)(&v92[64 * v91] - v99) >= 0x20)
                {
                  if (v88 >= 0x20)
                  {
                    int32x4_t v103 = v96;
                    int32x4_t v104 = v95;
                    uint64_t v105 = v88 & 0x3FFFFFFE0;
                    do
                    {
                      long long v106 = *v103;
                      *(v104 - 1) = *(v103 - 1);
                      *int32x4_t v104 = v106;
                      v104 += 2;
                      v103 += 2;
                      v105 -= 32;
                    }
                    while (v105);
                    if (v88 == v93) {
                      goto LABEL_93;
                    }
                    uint64_t v102 = v88 & 0x3FFFFFFE0;
                    if ((v88 & 0x18) == 0)
                    {
                      v99 += v93;
                      v100 += v93;
                      int v101 = v88 & 0xFFFFFFE0;
                      goto LABEL_107;
                    }
                  }
                  else
                  {
                    uint64_t v102 = 0;
                  }
                  v100 += v94;
                  unint64_t v107 = v102 - (v88 & 0x3FFFFFFF8);
                  uint64_t v108 = (uint64_t *)(v98 + v102);
                  unint64_t v109 = &v97[v102];
                  do
                  {
                    uint64_t v110 = *v108++;
                    *(void *)unint64_t v109 = v110;
                    v109 += 8;
                    v107 += 8;
                  }
                  while (v107);
                  if (v88 != v94)
                  {
                    v99 += v94;
                    int v101 = v88 & 0xFFFFFFF8;
                    goto LABEL_107;
                  }
                }
                else
                {
                  int v101 = 0;
LABEL_107:
                  unsigned int v111 = v101 + 1;
                  do
                  {
                    char v112 = *v99++;
                    *v100++ = v112;
                  }
                  while (v87 > v111++);
                }
LABEL_93:
                ++v91;
                v95 += 64;
                long long v96 = (long long *)((char *)v96 + v86);
                v98 += v86;
                v97 += 64;
                if (v91 == v81) {
                  goto LABEL_114;
                }
                continue;
              }
            }
            uint64_t v89 = 0;
            do
            {
              uint64_t v90 = 0;
              do
              {
                v84[v90] = *(unsigned char *)(v85 + v90);
                ++v90;
              }
              while (v87 > v90);
              ++v89;
              v84 += 64;
              v85 += v86;
            }
            while (v89 != v81);
          }
LABEL_114:
          AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::compressMacroblock((uint64_t)v150, 64, (unint64_t)v139, v140, v147, v148, *(_DWORD *)(*(void *)(v134 + 208) + 52));
LABEL_115:
          if (v137) {
            memcpy(v136, v57, 0x400uLL);
          }
          unint64_t v30 = v58;
          uint64_t result = v134;
          unsigned int v29 = v131;
        }
        while (v58 != (v125 >> 4) + 1);
        ++v19;
      }
      while (v19 != v116);
    }
  }
  return result;
}

uint64_t AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>,false,(AGXHardwareTextureMemoryOrder)3>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, uint64_t a7, unsigned int a8, int a9, int a10, uint64_t a11, char a12)
{
  uint64_t v158 = *MEMORY[0x263EF8340];
  size_t v121 = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v130 = a8;
  uint64_t v19 = a8 >> 4;
  unsigned int v120 = a8 + a10 - 1;
  unsigned int v20 = v120 >> 4;
  uint64_t v134 = a1;
  if (*(void *)(a1 + 168)) {
    int v21 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v21 = 0;
  }
  BOOL v22 = (v21 & 0xD00) == 0 || v21 == 768;
  int v23 = v21 & 0xE00;
  int v25 = !v22 && v23 != 1024;
  int v137 = v25;
  uint64_t result = a1;
  if (v19 <= v20)
  {
    unsigned int v125 = a7 + a9 - 1;
    if (a7 >> 4 <= v125 >> 4)
    {
      uint64_t v133 = (a5 - 1) >> 4;
      uint64_t v119 = (a6 - 1) >> 4;
      int v132 = ((a5 - 1) & 0xF) + 1;
      int v118 = ((a6 - 1) & 0xF) + 1;
      unint64_t v124 = a7;
      uint64_t v116 = v20 + 1;
      unint64_t v117 = (unint64_t)a7 >> 4;
      do
      {
        unsigned int v27 = (16 * v19) | 0xF;
        if (16 * (int)v19 <= v130) {
          unsigned int v28 = v130;
        }
        else {
          unsigned int v28 = 16 * v19;
        }
        if (v120 < v27) {
          unsigned int v27 = v120;
        }
        unsigned int v123 = v28 - 16 * v19;
        int v129 = v27 - v28 + 1;
        if (v19 == v119) {
          unsigned int v29 = v118;
        }
        else {
          unsigned int v29 = 16;
        }
        uint64_t v128 = a3 + (v28 - v130) * a11;
        unint64_t v30 = v117;
        unsigned int v131 = v29;
        do
        {
          unint64_t v31 = 16 * v30;
          unsigned int v32 = 16 * (v30 + 1) - 1;
          if (16 * (int)v30 <= a7) {
            int v33 = a7;
          }
          else {
            int v33 = 16 * v30;
          }
          if (v125 < v32) {
            unsigned int v32 = v125;
          }
          int v34 = v32 - v33 + 1;
          if (v30 == v133) {
            unsigned int v35 = v132;
          }
          else {
            unsigned int v35 = 16;
          }
          BOOL v36 = 1;
          if (16 * (int)v19 >= v130 && v31 >= v124)
          {
            int v37 = v132;
            if (v30 != v133) {
              int v37 = 16;
            }
            BOOL v36 = v34 != v37 || v129 != v29;
          }
          unsigned int v39 = *(_DWORD *)(result + 128) >> (*(unsigned char *)(result + 144) + a12);
          if (v39 <= 1) {
            unsigned int v39 = 1;
          }
          unsigned int v40 = v39 + 15;
          if (v40 < 0x20) {
            unsigned int v41 = 0;
          }
          else {
            unsigned int v41 = 32 - __clz(~(-1 << -(char)__clz((v40 >> 4) - 1)));
          }
          unsigned int v42 = *(_DWORD *)(result + 132) >> (*(unsigned char *)(result + 144) + a12);
          if (v42 <= 1) {
            unsigned int v42 = 1;
          }
          unsigned int v43 = v42 + 15;
          if (v43 < 0x20) {
            unsigned int v44 = 0;
          }
          else {
            unsigned int v44 = 32 - __clz(~(-1 << -(char)__clz((v43 >> 4) - 1)));
          }
          unint64_t v135 = v30 + 1;
          if (v44 | v41)
          {
            int v45 = 0;
            uint64_t v46 = 0;
            BOOL v47 = v41 != 0;
            BOOL v48 = v44 != 0;
            int v49 = 1;
            do
            {
              --v41;
              if (v47) {
                v46 |= (unint64_t)(v49 & v30) << v45++;
              }
              else {
                unsigned int v41 = 0;
              }
              --v44;
              if (v48) {
                v46 |= (unint64_t)(v49 & v19) << v45++;
              }
              else {
                unsigned int v44 = 0;
              }
              v49 *= 2;
              --v45;
              BOOL v48 = v44 != 0;
              BOOL v47 = v41 != 0;
            }
            while (v44 | v41);
          }
          else
          {
            uint64_t v46 = 0;
          }
          uint64_t v50 = v19 * v121 + 640 * v30;
          uint64_t v51 = a7;
          int v52 = v35 < 0x10 || v36;
          int v53 = (unsigned __int8 *)(a4 + 8 * v46);
          uint64_t v54 = v128 + 4 * (v33 - a7);
          int v55 = (void *)(a2 + v50);
          if (v29 < 0x10) {
            int v56 = 1;
          }
          else {
            int v56 = v52;
          }
          uint64_t v136 = v55;
          if (v137)
          {
            int v57 = __dst;
            if (!v56) {
              goto LABEL_77;
            }
            memcpy(__dst, v55, sizeof(__dst));
            LOBYTE(v29) = v131;
            uint64_t result = v134;
          }
          else
          {
            int v57 = v55;
            if (!v56)
            {
LABEL_77:
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::compressMacroblock(v54, a11, (uint64_t)v57, v53, v35, v29, *(_DWORD *)(*(void *)(result + 208) + 52));
              goto LABEL_78;
            }
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE11ELj1ELh0ELNS7_13SubblockOrderE1EL19AGXTextureFootprint2EEELb0EL29AGXHardwareTextureMemoryOrder3EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = result;
          uint64_t v139 = v57;
          unsigned __int8 v147 = v35;
          unsigned __int8 v148 = v29;
          unsigned int v143 = v123;
          unsigned int v144 = v33 - v31;
          uint64_t v140 = v53;
          uint64_t v141 = v54;
          uint64_t v142 = a11;
          unsigned int v145 = v129;
          unsigned int v146 = v34;
          if (v36)
          {
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(result + 8) + 7384), block);
LABEL_78:
            a7 = v51;
            unint64_t v58 = v135;
            goto LABEL_115;
          }
          int v59 = *(_DWORD *)(*(void *)(result + 208) + 52);
          uint64_t v60 = (uint64_t)&v57[AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressSubblock(v150, 64, (uint64_t)v57, *v53, v59, v17, v18)];
          uint64_t v63 = v60
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressSubblock(v151, 64, v60, v53[1], v59, v61, v62);
          uint64_t v66 = v63
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressSubblock(v152, 64, v63, v53[2], v59, v64, v65);
          uint64_t v69 = v66
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressSubblock(v153, 64, v66, v53[3], v59, v67, v68);
          uint64_t v72 = v69
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressSubblock(v154, 64, v69, v53[4], v59, v70, v71);
          uint64_t v75 = v72
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressSubblock(v155, 64, v72, v53[5], v59, v73, v74);
          uint64_t v78 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressSubblock(v156, 64, v75, v53[6], v59, v76, v77);
          AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressSubblock(v157, 64, v75 + v78, v53[7], v59, v79, v80);
          uint64_t v81 = v145;
          a7 = v51;
          unint64_t v58 = v135;
          if (v145 && v146)
          {
            unint64_t v82 = (unint64_t)v143 << 6;
            uint64_t v83 = 4 * v144;
            unsigned int v84 = (char *)v150 + v82 + v83;
            uint64_t v85 = v141;
            uint64_t v86 = v142;
            unint64_t v87 = 4 * v146;
            if (v87 <= 1) {
              unint64_t v88 = 1;
            }
            else {
              unint64_t v88 = 4 * v146;
            }
            if (v88 > 7)
            {
              if (!v88 || (unint64_t v91 = (v88 - 1) >> 32) != 0)
              {
                uint64_t v114 = 0;
                do
                {
                  uint64_t v115 = 0;
                  do
                  {
                    v84[v115] = *(unsigned char *)(v85 + v115);
                    ++v115;
                  }
                  while (v87 > v115);
                  ++v114;
                  v84 += 64;
                  v85 += v86;
                }
                while (v114 != v81);
                goto LABEL_114;
              }
              int32x4_t v92 = (char *)v150 + v82 + v83;
              uint64_t v93 = v88 & 0x3FFFFFFE0;
              uint64_t v94 = v88 & 0x3FFFFFFF8;
              int32x4_t v95 = (char *)&v150[1] + v82 + v83;
              long long v96 = (long long *)(v141 + 16);
              int32x4_t v97 = v84;
              uint64_t v98 = v141;
              while (2)
              {
                BOOL v99 = (char *)(v85 + v86 * v91);
                int32x4_t v100 = &v84[64 * v91];
                if ((unint64_t)(&v92[64 * v91] - v99) >= 0x20)
                {
                  if (v88 >= 0x20)
                  {
                    int32x4_t v103 = v96;
                    int32x4_t v104 = v95;
                    uint64_t v105 = v88 & 0x3FFFFFFE0;
                    do
                    {
                      long long v106 = *v103;
                      *(v104 - 1) = *(v103 - 1);
                      *int32x4_t v104 = v106;
                      v104 += 2;
                      v103 += 2;
                      v105 -= 32;
                    }
                    while (v105);
                    if (v88 == v93) {
                      goto LABEL_93;
                    }
                    uint64_t v102 = v88 & 0x3FFFFFFE0;
                    if ((v88 & 0x18) == 0)
                    {
                      v99 += v93;
                      v100 += v93;
                      int v101 = v88 & 0xFFFFFFE0;
                      goto LABEL_107;
                    }
                  }
                  else
                  {
                    uint64_t v102 = 0;
                  }
                  v100 += v94;
                  unint64_t v107 = v102 - (v88 & 0x3FFFFFFF8);
                  uint64_t v108 = (uint64_t *)(v98 + v102);
                  unint64_t v109 = &v97[v102];
                  do
                  {
                    uint64_t v110 = *v108++;
                    *(void *)unint64_t v109 = v110;
                    v109 += 8;
                    v107 += 8;
                  }
                  while (v107);
                  if (v88 != v94)
                  {
                    v99 += v94;
                    int v101 = v88 & 0xFFFFFFF8;
                    goto LABEL_107;
                  }
                }
                else
                {
                  int v101 = 0;
LABEL_107:
                  unsigned int v111 = v101 + 1;
                  do
                  {
                    char v112 = *v99++;
                    *v100++ = v112;
                  }
                  while (v87 > v111++);
                }
LABEL_93:
                ++v91;
                v95 += 64;
                long long v96 = (long long *)((char *)v96 + v86);
                v98 += v86;
                v97 += 64;
                if (v91 == v81) {
                  goto LABEL_114;
                }
                continue;
              }
            }
            uint64_t v89 = 0;
            do
            {
              uint64_t v90 = 0;
              do
              {
                v84[v90] = *(unsigned char *)(v85 + v90);
                ++v90;
              }
              while (v87 > v90);
              ++v89;
              v84 += 64;
              v85 += v86;
            }
            while (v89 != v81);
          }
LABEL_114:
          AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::compressMacroblock((uint64_t)v150, 64, (uint64_t)v139, v140, v147, v148, *(_DWORD *)(*(void *)(v134 + 208) + 52));
LABEL_115:
          if (v137) {
            memcpy(v136, v57, 0x400uLL);
          }
          unint64_t v30 = v58;
          uint64_t result = v134;
          unsigned int v29 = v131;
        }
        while (v58 != (v125 >> 4) + 1);
        ++v19;
      }
      while (v19 != v116);
    }
  }
  return result;
}

uint64_t AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>,false,(AGXHardwareTextureMemoryOrder)3>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, uint64_t a7, unsigned int a8, int a9, int a10, uint64_t a11, char a12)
{
  uint64_t v158 = *MEMORY[0x263EF8340];
  size_t v121 = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v130 = a8;
  uint64_t v19 = a8 >> 4;
  unsigned int v120 = a8 + a10 - 1;
  unsigned int v20 = v120 >> 4;
  uint64_t v134 = a1;
  if (*(void *)(a1 + 168)) {
    int v21 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v21 = 0;
  }
  BOOL v22 = (v21 & 0xD00) == 0 || v21 == 768;
  int v23 = v21 & 0xE00;
  int v25 = !v22 && v23 != 1024;
  int v137 = v25;
  uint64_t result = a1;
  if (v19 <= v20)
  {
    unsigned int v125 = a7 + a9 - 1;
    if (a7 >> 4 <= v125 >> 4)
    {
      uint64_t v133 = (a5 - 1) >> 4;
      uint64_t v119 = (a6 - 1) >> 4;
      int v132 = ((a5 - 1) & 0xF) + 1;
      int v118 = ((a6 - 1) & 0xF) + 1;
      unint64_t v124 = a7;
      uint64_t v116 = v20 + 1;
      unint64_t v117 = (unint64_t)a7 >> 4;
      do
      {
        unsigned int v27 = (16 * v19) | 0xF;
        if (16 * (int)v19 <= v130) {
          unsigned int v28 = v130;
        }
        else {
          unsigned int v28 = 16 * v19;
        }
        if (v120 < v27) {
          unsigned int v27 = v120;
        }
        unsigned int v123 = v28 - 16 * v19;
        int v129 = v27 - v28 + 1;
        if (v19 == v119) {
          unsigned int v29 = v118;
        }
        else {
          unsigned int v29 = 16;
        }
        uint64_t v128 = a3 + (v28 - v130) * a11;
        unint64_t v30 = v117;
        unsigned int v131 = v29;
        do
        {
          unint64_t v31 = 16 * v30;
          unsigned int v32 = 16 * (v30 + 1) - 1;
          if (16 * (int)v30 <= a7) {
            int v33 = a7;
          }
          else {
            int v33 = 16 * v30;
          }
          if (v125 < v32) {
            unsigned int v32 = v125;
          }
          int v34 = v32 - v33 + 1;
          if (v30 == v133) {
            unsigned int v35 = v132;
          }
          else {
            unsigned int v35 = 16;
          }
          BOOL v36 = 1;
          if (16 * (int)v19 >= v130 && v31 >= v124)
          {
            int v37 = v132;
            if (v30 != v133) {
              int v37 = 16;
            }
            BOOL v36 = v34 != v37 || v129 != v29;
          }
          unsigned int v39 = *(_DWORD *)(result + 128) >> (*(unsigned char *)(result + 144) + a12);
          if (v39 <= 1) {
            unsigned int v39 = 1;
          }
          unsigned int v40 = v39 + 15;
          if (v40 < 0x20) {
            unsigned int v41 = 0;
          }
          else {
            unsigned int v41 = 32 - __clz(~(-1 << -(char)__clz((v40 >> 4) - 1)));
          }
          unsigned int v42 = *(_DWORD *)(result + 132) >> (*(unsigned char *)(result + 144) + a12);
          if (v42 <= 1) {
            unsigned int v42 = 1;
          }
          unsigned int v43 = v42 + 15;
          if (v43 < 0x20) {
            unsigned int v44 = 0;
          }
          else {
            unsigned int v44 = 32 - __clz(~(-1 << -(char)__clz((v43 >> 4) - 1)));
          }
          unint64_t v135 = v30 + 1;
          if (v44 | v41)
          {
            int v45 = 0;
            uint64_t v46 = 0;
            BOOL v47 = v41 != 0;
            BOOL v48 = v44 != 0;
            int v49 = 1;
            do
            {
              --v41;
              if (v47) {
                v46 |= (unint64_t)(v49 & v30) << v45++;
              }
              else {
                unsigned int v41 = 0;
              }
              --v44;
              if (v48) {
                v46 |= (unint64_t)(v49 & v19) << v45++;
              }
              else {
                unsigned int v44 = 0;
              }
              v49 *= 2;
              --v45;
              BOOL v48 = v44 != 0;
              BOOL v47 = v41 != 0;
            }
            while (v44 | v41);
          }
          else
          {
            uint64_t v46 = 0;
          }
          size_t v50 = v19 * v121 + (v30 << 9);
          uint64_t v51 = a7;
          int v52 = v35 < 0x10 || v36;
          int v53 = (unsigned __int8 *)(a4 + 8 * v46);
          uint64_t v54 = v128 + 4 * (v33 - a7);
          int v55 = (void *)(a2 + v50);
          if (v29 < 0x10) {
            int v56 = 1;
          }
          else {
            int v56 = v52;
          }
          uint64_t v136 = v55;
          if (v137)
          {
            int v57 = __dst;
            if (!v56) {
              goto LABEL_77;
            }
            memcpy(__dst, v55, sizeof(__dst));
            LOBYTE(v29) = v131;
            uint64_t result = v134;
          }
          else
          {
            int v57 = v55;
            if (!v56)
            {
LABEL_77:
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::compressMacroblock(v54, a11, (unint64_t)v57, v53, v35, v29, *(_DWORD *)(*(void *)(result + 208) + 52));
              goto LABEL_78;
            }
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE11ELj1ELh0ELNS7_13SubblockOrderE1EL19AGXTextureFootprint3EEELb0EL29AGXHardwareTextureMemoryOrder3EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = result;
          uint64_t v139 = v57;
          unsigned __int8 v147 = v35;
          unsigned __int8 v148 = v29;
          unsigned int v143 = v123;
          unsigned int v144 = v33 - v31;
          uint64_t v140 = v53;
          uint64_t v141 = v54;
          uint64_t v142 = a11;
          unsigned int v145 = v129;
          unsigned int v146 = v34;
          if (v36)
          {
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(result + 8) + 7384), block);
LABEL_78:
            a7 = v51;
            unint64_t v58 = v135;
            goto LABEL_115;
          }
          int v59 = *(_DWORD *)(*(void *)(result + 208) + 52);
          uint64_t v60 = (uint64_t)&v57[AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::decompressSubblock(v150, 64, (uint64_t)v57, *v53, v59, v17, v18)];
          uint64_t v63 = v60
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::decompressSubblock(v151, 64, v60, v53[1], v59, v61, v62);
          uint64_t v66 = v63
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::decompressSubblock(v152, 64, v63, v53[2], v59, v64, v65);
          uint64_t v69 = v66
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::decompressSubblock(v153, 64, v66, v53[3], v59, v67, v68);
          uint64_t v72 = v69
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::decompressSubblock(v154, 64, v69, v53[4], v59, v70, v71);
          uint64_t v75 = v72
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::decompressSubblock(v155, 64, v72, v53[5], v59, v73, v74);
          uint64_t v78 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::decompressSubblock(v156, 64, v75, v53[6], v59, v76, v77);
          AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::decompressSubblock(v157, 64, v75 + v78, v53[7], v59, v79, v80);
          uint64_t v81 = v145;
          a7 = v51;
          unint64_t v58 = v135;
          if (v145 && v146)
          {
            unint64_t v82 = (unint64_t)v143 << 6;
            uint64_t v83 = 4 * v144;
            unsigned int v84 = (char *)v150 + v82 + v83;
            uint64_t v85 = v141;
            uint64_t v86 = v142;
            unint64_t v87 = 4 * v146;
            if (v87 <= 1) {
              unint64_t v88 = 1;
            }
            else {
              unint64_t v88 = 4 * v146;
            }
            if (v88 > 7)
            {
              if (!v88 || (unint64_t v91 = (v88 - 1) >> 32) != 0)
              {
                uint64_t v114 = 0;
                do
                {
                  uint64_t v115 = 0;
                  do
                  {
                    v84[v115] = *(unsigned char *)(v85 + v115);
                    ++v115;
                  }
                  while (v87 > v115);
                  ++v114;
                  v84 += 64;
                  v85 += v86;
                }
                while (v114 != v81);
                goto LABEL_114;
              }
              int32x4_t v92 = (char *)v150 + v82 + v83;
              uint64_t v93 = v88 & 0x3FFFFFFE0;
              uint64_t v94 = v88 & 0x3FFFFFFF8;
              int32x4_t v95 = (char *)&v150[1] + v82 + v83;
              long long v96 = (long long *)(v141 + 16);
              int32x4_t v97 = v84;
              uint64_t v98 = v141;
              while (2)
              {
                BOOL v99 = (char *)(v85 + v86 * v91);
                int32x4_t v100 = &v84[64 * v91];
                if ((unint64_t)(&v92[64 * v91] - v99) >= 0x20)
                {
                  if (v88 >= 0x20)
                  {
                    int32x4_t v103 = v96;
                    int32x4_t v104 = v95;
                    uint64_t v105 = v88 & 0x3FFFFFFE0;
                    do
                    {
                      long long v106 = *v103;
                      *(v104 - 1) = *(v103 - 1);
                      *int32x4_t v104 = v106;
                      v104 += 2;
                      v103 += 2;
                      v105 -= 32;
                    }
                    while (v105);
                    if (v88 == v93) {
                      goto LABEL_93;
                    }
                    uint64_t v102 = v88 & 0x3FFFFFFE0;
                    if ((v88 & 0x18) == 0)
                    {
                      v99 += v93;
                      v100 += v93;
                      int v101 = v88 & 0xFFFFFFE0;
                      goto LABEL_107;
                    }
                  }
                  else
                  {
                    uint64_t v102 = 0;
                  }
                  v100 += v94;
                  unint64_t v107 = v102 - (v88 & 0x3FFFFFFF8);
                  uint64_t v108 = (uint64_t *)(v98 + v102);
                  unint64_t v109 = &v97[v102];
                  do
                  {
                    uint64_t v110 = *v108++;
                    *(void *)unint64_t v109 = v110;
                    v109 += 8;
                    v107 += 8;
                  }
                  while (v107);
                  if (v88 != v94)
                  {
                    v99 += v94;
                    int v101 = v88 & 0xFFFFFFF8;
                    goto LABEL_107;
                  }
                }
                else
                {
                  int v101 = 0;
LABEL_107:
                  unsigned int v111 = v101 + 1;
                  do
                  {
                    char v112 = *v99++;
                    *v100++ = v112;
                  }
                  while (v87 > v111++);
                }
LABEL_93:
                ++v91;
                v95 += 64;
                long long v96 = (long long *)((char *)v96 + v86);
                v98 += v86;
                v97 += 64;
                if (v91 == v81) {
                  goto LABEL_114;
                }
                continue;
              }
            }
            uint64_t v89 = 0;
            do
            {
              uint64_t v90 = 0;
              do
              {
                v84[v90] = *(unsigned char *)(v85 + v90);
                ++v90;
              }
              while (v87 > v90);
              ++v89;
              v84 += 64;
              v85 += v86;
            }
            while (v89 != v81);
          }
LABEL_114:
          AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::compressMacroblock((uint64_t)v150, 64, (unint64_t)v139, v140, v147, v148, *(_DWORD *)(*(void *)(v134 + 208) + 52));
LABEL_115:
          if (v137) {
            memcpy(v136, v57, 0x400uLL);
          }
          unint64_t v30 = v58;
          uint64_t result = v134;
          unsigned int v29 = v131;
        }
        while (v58 != (v125 >> 4) + 1);
        ++v19;
      }
      while (v19 != v116);
    }
  }
  return result;
}

uint64_t AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)6,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)3>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, uint64_t a7, unsigned int a8, int a9, int a10, uint64_t a11, char a12)
{
  uint64_t v157 = *MEMORY[0x263EF8340];
  size_t v120 = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v129 = a8;
  uint64_t v19 = a8 >> 4;
  unsigned int v119 = a8 + a10 - 1;
  unsigned int v20 = v119 >> 4;
  uint64_t v130 = a1;
  if (*(void *)(a1 + 168)) {
    int v21 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v21 = 0;
  }
  BOOL v22 = (v21 & 0xD00) == 0 || v21 == 768;
  int v23 = v21 & 0xE00;
  int v25 = !v22 && v23 != 1024;
  int v136 = v25;
  uint64_t result = a1;
  if (v19 <= v20)
  {
    unsigned int v124 = a7 + a9 - 1;
    if (a7 >> 4 <= v124 >> 4)
    {
      uint64_t v133 = (a5 - 1) >> 4;
      uint64_t v118 = (a6 - 1) >> 4;
      int v132 = ((a5 - 1) & 0xF) + 1;
      int v117 = ((a6 - 1) & 0xF) + 1;
      unint64_t v123 = a7;
      uint64_t v115 = v20 + 1;
      unint64_t v116 = (unint64_t)a7 >> 4;
      do
      {
        unsigned int v27 = (16 * v19) | 0xF;
        if (16 * (int)v19 <= v129) {
          unsigned int v28 = v129;
        }
        else {
          unsigned int v28 = 16 * v19;
        }
        if (v119 < v27) {
          unsigned int v27 = v119;
        }
        unsigned int v122 = v28 - 16 * v19;
        int v128 = v27 - v28 + 1;
        if (v19 == v118) {
          unsigned int v29 = v117;
        }
        else {
          unsigned int v29 = 16;
        }
        uint64_t v127 = a3 + (v28 - v129) * a11;
        unint64_t v30 = v116;
        unsigned int v131 = v29;
        do
        {
          unint64_t v31 = 16 * v30;
          unsigned int v32 = 16 * (v30 + 1) - 1;
          if (16 * (int)v30 <= a7) {
            int v33 = a7;
          }
          else {
            int v33 = 16 * v30;
          }
          if (v124 < v32) {
            unsigned int v32 = v124;
          }
          int v34 = v32 - v33 + 1;
          if (v30 == v133) {
            unsigned int v35 = v132;
          }
          else {
            unsigned int v35 = 16;
          }
          BOOL v36 = 1;
          if (16 * (int)v19 >= v129 && v31 >= v123)
          {
            int v37 = v132;
            if (v30 != v133) {
              int v37 = 16;
            }
            BOOL v36 = v34 != v37 || v128 != v29;
          }
          unsigned int v39 = *(_DWORD *)(result + 128) >> (*(unsigned char *)(result + 144) + a12);
          if (v39 <= 1) {
            unsigned int v39 = 1;
          }
          unsigned int v40 = v39 + 15;
          if (v40 < 0x20) {
            unsigned int v41 = 0;
          }
          else {
            unsigned int v41 = 32 - __clz(~(-1 << -(char)__clz((v40 >> 4) - 1)));
          }
          unsigned int v42 = *(_DWORD *)(result + 132) >> (*(unsigned char *)(result + 144) + a12);
          if (v42 <= 1) {
            unsigned int v42 = 1;
          }
          unsigned int v43 = v42 + 15;
          if (v43 < 0x20) {
            unsigned int v44 = 0;
          }
          else {
            unsigned int v44 = 32 - __clz(~(-1 << -(char)__clz((v43 >> 4) - 1)));
          }
          unint64_t v134 = v30 + 1;
          if (v44 | v41)
          {
            int v45 = 0;
            uint64_t v46 = 0;
            BOOL v47 = v41 != 0;
            BOOL v48 = v44 != 0;
            int v49 = 1;
            do
            {
              --v41;
              if (v47) {
                v46 |= (unint64_t)(v49 & v30) << v45++;
              }
              else {
                unsigned int v41 = 0;
              }
              --v44;
              if (v48) {
                v46 |= (unint64_t)(v49 & v19) << v45++;
              }
              else {
                unsigned int v44 = 0;
              }
              v49 *= 2;
              --v45;
              BOOL v48 = v44 != 0;
              BOOL v47 = v41 != 0;
            }
            while (v44 | v41);
          }
          else
          {
            uint64_t v46 = 0;
          }
          size_t v50 = v19 * v120 + (v30 << 10);
          uint64_t v51 = a7;
          int v52 = v35 < 0x10 || v36;
          int v53 = (char *)(a4 + 8 * v46);
          unint64_t v54 = v127 + 4 * (v33 - a7);
          int v55 = (int64x2_t *)(a2 + v50);
          if (v29 < 0x10) {
            int v56 = 1;
          }
          else {
            int v56 = v52;
          }
          unint64_t v135 = v55;
          if (v136)
          {
            int v57 = (int64x2_t *)__dst;
            if (!v56) {
              goto LABEL_77;
            }
            memcpy(__dst, v55, sizeof(__dst));
            LOBYTE(v29) = v131;
            uint64_t result = v130;
          }
          else
          {
            int v57 = v55;
            if (!v56)
            {
LABEL_77:
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)6,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::compressMacroblock(v54, a11, (uint64_t)v57, v53, v35, v29);
              goto LABEL_78;
            }
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE6ELj1ELh0ELNS7_13SubblockOrderE1EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder3EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = result;
          char v138 = v57;
          unsigned __int8 v146 = v35;
          unsigned __int8 v147 = v29;
          unsigned int v142 = v122;
          unsigned int v143 = v33 - v31;
          uint64_t v139 = v53;
          unint64_t v140 = v54;
          uint64_t v141 = a11;
          unsigned int v144 = v128;
          unsigned int v145 = v34;
          if (v36)
          {
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(result + 8) + 7384), block);
LABEL_78:
            a7 = v51;
            unint64_t v58 = v134;
            goto LABEL_115;
          }
          int v59 = (int64x2_t *)((char *)v57
                            + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)6,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressSubblock(v149, 64, v57, *v53, v17, v18));
          int32x4_t v62 = (int64x2_t *)((char *)v59
                            + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)6,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressSubblock(v150, 64, v59, v53[1], v60, v61));
          int32x4_t v65 = (int64x2_t *)((char *)v62
                            + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)6,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressSubblock(v151, 64, v62, v53[2], v63, v64));
          int32x4_t v68 = (int64x2_t *)((char *)v65
                            + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)6,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressSubblock(v152, 64, v65, v53[3], v66, v67));
          int32x4_t v71 = (int64x2_t *)((char *)v68
                            + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)6,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressSubblock(v153, 64, v68, v53[4], v69, v70));
          int32x4_t v74 = (int64x2_t *)((char *)v71
                            + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)6,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressSubblock(v154, 64, v71, v53[5], v72, v73));
          uint64_t v77 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)6,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressSubblock(v155, 64, v74, v53[6], v75, v76);
          AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)6,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressSubblock(v156, 64, (int64x2_t *)((char *)v74 + v77), v53[7], v78, v79);
          uint64_t v80 = v144;
          a7 = v51;
          unint64_t v58 = v134;
          if (v144 && v145)
          {
            unint64_t v81 = (unint64_t)v142 << 6;
            uint64_t v82 = 4 * v143;
            uint64_t v83 = &v149[0].i8[v81 + v82];
            unint64_t v84 = v140;
            uint64_t v85 = v141;
            unint64_t v86 = 4 * v145;
            if (v86 <= 1) {
              unint64_t v87 = 1;
            }
            else {
              unint64_t v87 = 4 * v145;
            }
            if (v87 > 7)
            {
              if (!v87 || (unint64_t v90 = (v87 - 1) >> 32) != 0)
              {
                uint64_t v113 = 0;
                do
                {
                  uint64_t v114 = 0;
                  do
                  {
                    v83[v114] = *(unsigned char *)(v84 + v114);
                    ++v114;
                  }
                  while (v86 > v114);
                  ++v113;
                  v83 += 64;
                  v84 += v85;
                }
                while (v113 != v80);
                goto LABEL_114;
              }
              unint64_t v91 = &v149[0].i8[v81 + v82];
              uint64_t v92 = v87 & 0x3FFFFFFE0;
              uint64_t v93 = v87 & 0x3FFFFFFF8;
              uint64_t v94 = &v149[1].i8[v81 + v82];
              int32x4_t v95 = (long long *)(v140 + 16);
              long long v96 = v83;
              unint64_t v97 = v140;
              while (2)
              {
                uint64_t v98 = (char *)(v84 + v85 * v90);
                BOOL v99 = &v83[64 * v90];
                if ((unint64_t)(&v91[64 * v90] - v98) >= 0x20)
                {
                  if (v87 >= 0x20)
                  {
                    uint64_t v102 = v95;
                    int32x4_t v103 = v94;
                    uint64_t v104 = v87 & 0x3FFFFFFE0;
                    do
                    {
                      long long v105 = *v102;
                      *((_OWORD *)v103 - 1) = *(v102 - 1);
                      *(_OWORD *)int32x4_t v103 = v105;
                      v103 += 32;
                      v102 += 2;
                      v104 -= 32;
                    }
                    while (v104);
                    if (v87 == v92) {
                      goto LABEL_93;
                    }
                    uint64_t v101 = v87 & 0x3FFFFFFE0;
                    if ((v87 & 0x18) == 0)
                    {
                      v98 += v92;
                      v99 += v92;
                      int v100 = v87 & 0xFFFFFFE0;
                      goto LABEL_107;
                    }
                  }
                  else
                  {
                    uint64_t v101 = 0;
                  }
                  v99 += v93;
                  unint64_t v106 = v101 - (v87 & 0x3FFFFFFF8);
                  unint64_t v107 = (uint64_t *)(v97 + v101);
                  uint64_t v108 = &v96[v101];
                  do
                  {
                    uint64_t v109 = *v107++;
                    *(void *)uint64_t v108 = v109;
                    v108 += 8;
                    v106 += 8;
                  }
                  while (v106);
                  if (v87 != v93)
                  {
                    v98 += v93;
                    int v100 = v87 & 0xFFFFFFF8;
                    goto LABEL_107;
                  }
                }
                else
                {
                  int v100 = 0;
LABEL_107:
                  unsigned int v110 = v100 + 1;
                  do
                  {
                    char v111 = *v98++;
                    *v99++ = v111;
                  }
                  while (v86 > v110++);
                }
LABEL_93:
                ++v90;
                v94 += 64;
                int32x4_t v95 = (long long *)((char *)v95 + v85);
                v97 += v85;
                v96 += 64;
                if (v90 == v80) {
                  goto LABEL_114;
                }
                continue;
              }
            }
            uint64_t v88 = 0;
            do
            {
              uint64_t v89 = 0;
              do
              {
                v83[v89] = *(unsigned char *)(v84 + v89);
                ++v89;
              }
              while (v86 > v89);
              ++v88;
              v83 += 64;
              v84 += v85;
            }
            while (v88 != v80);
          }
LABEL_114:
          AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)6,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v149, 64, (uint64_t)v138, v139, v146, v147);
LABEL_115:
          if (v136) {
            memcpy(v135, v57, 0x400uLL);
          }
          unint64_t v30 = v58;
          uint64_t result = v130;
          unsigned int v29 = v131;
        }
        while (v58 != (v124 >> 4) + 1);
        ++v19;
      }
      while (v19 != v115);
    }
  }
  return result;
}

uint64_t AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)6,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)3>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, char a12)
{
  uint64_t v206 = *MEMORY[0x263EF8340];
  size_t v169 = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v180 = a8;
  uint64_t v19 = a8 >> 4;
  unsigned int v168 = a8 + a10 - 1;
  unsigned int v20 = v168 >> 4;
  uint64_t v181 = a1;
  if (*(void *)(a1 + 168)) {
    int v21 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v21 = 0;
  }
  BOOL v22 = (v21 & 0xD00) == 0 || v21 == 768;
  int v23 = v21 & 0xE00;
  int v25 = !v22 && v23 != 1024;
  int v185 = v25;
  uint64_t result = a1;
  if (v19 <= v20)
  {
    unsigned int v175 = a7 + a9 - 1;
    if (a7 >> 4 <= v175 >> 4)
    {
      uint64_t v27 = a11;
      uint64_t v183 = (a5 - 1) >> 4;
      uint64_t v167 = (a6 - 1) >> 4;
      int v182 = ((a5 - 1) & 0xF) + 1;
      int v166 = ((a6 - 1) & 0xF) + 1;
      unint64_t v173 = a7;
      uint64_t v164 = v20 + 1;
      unint64_t v165 = (unint64_t)a7 >> 4;
      unsigned int v174 = a7;
      do
      {
        unsigned int v28 = (16 * v19) | 0xF;
        if (16 * (int)v19 <= v180) {
          unsigned int v29 = v180;
        }
        else {
          unsigned int v29 = 16 * v19;
        }
        if (v168 < v28) {
          unsigned int v28 = v168;
        }
        unsigned int v172 = v29 - 16 * v19;
        int v179 = v28 - v29 + 1;
        if (v19 == v167) {
          unsigned int v30 = v166;
        }
        else {
          unsigned int v30 = 16;
        }
        uint64_t v178 = a3 + (v29 - v180) * v27;
        unint64_t v31 = v165;
        do
        {
          unint64_t v32 = 16 * v31;
          unint64_t v184 = v31 + 1;
          unsigned int v33 = 16 * (v31 + 1) - 1;
          if (16 * (int)v31 <= a7) {
            unsigned int v34 = a7;
          }
          else {
            unsigned int v34 = 16 * v31;
          }
          if (v175 < v33) {
            unsigned int v33 = v175;
          }
          int v35 = v33 - v34 + 1;
          if (v31 == v183) {
            unsigned int v36 = v182;
          }
          else {
            unsigned int v36 = 16;
          }
          BOOL v37 = 1;
          if (16 * (int)v19 >= v180 && v32 >= v173)
          {
            int v38 = v182;
            if (v31 != v183) {
              int v38 = 16;
            }
            BOOL v37 = v35 != v38 || v179 != v30;
          }
          unsigned int v40 = *(_DWORD *)(result + 128) >> (*(unsigned char *)(result + 144) + a12);
          if (v40 <= 1) {
            unsigned int v40 = 1;
          }
          unsigned int v41 = v40 + 15;
          if (v41 < 0x20) {
            unsigned int v42 = 0;
          }
          else {
            unsigned int v42 = 32 - __clz(~(-1 << -(char)__clz((v41 >> 4) - 1)));
          }
          unsigned int v43 = *(_DWORD *)(result + 132) >> (*(unsigned char *)(result + 144) + a12);
          if (v43 <= 1) {
            unsigned int v43 = 1;
          }
          unsigned int v44 = v43 + 15;
          if (v44 < 0x20)
          {
            unsigned int v45 = 0;
            if (!v42)
            {
LABEL_65:
              uint64_t v47 = 0;
              goto LABEL_66;
            }
          }
          else
          {
            unsigned int v45 = 32 - __clz(~(-1 << -(char)__clz((v44 >> 4) - 1)));
            if (!(v45 | v42)) {
              goto LABEL_65;
            }
          }
          int v46 = 0;
          uint64_t v47 = 0;
          BOOL v48 = v42 != 0;
          BOOL v49 = v45 != 0;
          int v50 = 1;
          do
          {
            --v42;
            if (v48) {
              v47 |= (unint64_t)(v50 & v31) << v46++;
            }
            else {
              unsigned int v42 = 0;
            }
            --v45;
            if (v49) {
              v47 |= (unint64_t)(v50 & v19) << v46++;
            }
            else {
              unsigned int v45 = 0;
            }
            v50 *= 2;
            --v46;
            BOOL v49 = v45 != 0;
            BOOL v48 = v42 != 0;
          }
          while (v45 | v42);
LABEL_66:
          size_t v51 = v19 * v169 + (v31 << 10);
          unsigned int v52 = v34 - a7;
          int v53 = v36 < 0x10 || v37;
          unint64_t v54 = (unsigned __int8 *)(a4 + 8 * v47);
          int v55 = (int64x2_t *)(v178 + 4 * v52);
          int v56 = (int64x2_t *)(a2 + v51);
          if (v30 < 0x10) {
            int v57 = 1;
          }
          else {
            int v57 = v53;
          }
          if (v185)
          {
            if (v57)
            {
              unint64_t v58 = v56;
              int v59 = v35;
              BOOL v60 = v37;
              memcpy(__dst, v56, sizeof(__dst));
              BOOL v37 = v60;
              uint64_t v27 = a11;
              int v35 = v59;
              int32x4_t v61 = (int64x2_t *)__dst;
              int v56 = v58;
              uint64_t result = v181;
LABEL_76:
              int32x4_t v62 = v56;
              block[0] = MEMORY[0x263EF8330];
              block[1] = 3221225472;
              block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE6ELj1ELh1ELNS7_13SubblockOrderE1EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder3EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
              block[3] = &__block_descriptor_90_e5_v8__0l;
              block[4] = result;
              int v187 = v61;
              unsigned __int8 v195 = v36;
              unsigned __int8 v196 = v30;
              unsigned int v191 = v172;
              unsigned int v192 = v34 - v32;
              uint64_t v188 = v54;
              unint64_t v189 = v55;
              uint64_t v190 = v27;
              unsigned int v193 = v179;
              unsigned int v194 = v35;
              if (v37)
              {
                int32x4_t v63 = v61;
                dispatch_sync(*(dispatch_queue_t *)(*(void *)(result + 8) + 7384), block);
                int32x4_t v61 = v63;
                uint64_t result = v181;
                a7 = v174;
                unint64_t v64 = v184;
                int v56 = v62;
                goto LABEL_92;
              }
              int v171 = v61;
              unint64_t v87 = (int64x2_t *)((char *)v61
                                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)6,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressSubblock(v198, 64, v61, *v54, (int32x4_t)v17, (int32x4_t)v18));
              unint64_t v90 = (int64x2_t *)((char *)v87
                                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)6,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressSubblock(v199, 64, v87, v54[1], v88, v89));
              uint64_t v93 = (int64x2_t *)((char *)v90
                                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)6,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressSubblock(v200, 64, v90, v54[2], v91, v92));
              long long v96 = (int64x2_t *)((char *)v93
                                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)6,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressSubblock(v201, 64, v93, v54[3], v94, v95));
              BOOL v99 = (int64x2_t *)((char *)v96
                                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)6,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressSubblock(v202, 64, v96, v54[4], v97, v98));
              uint64_t v102 = (int64x2_t *)((char *)v99
                                 + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)6,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressSubblock(v203, 64, v99, v54[5], v100, v101));
              uint64_t v105 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)6,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressSubblock(v204, 64, v102, v54[6], v103, v104);
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)6,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressSubblock(v205, 64, (int64x2_t *)((char *)v102 + v105), v54[7], v106, v107);
              uint64_t v108 = v193;
              if (v193 && v194)
              {
                unint64_t v109 = (unint64_t)v191 << 6;
                uint64_t v110 = 4 * v192;
                char v111 = &v198[0].i8[v109 + v110];
                char v112 = v189;
                uint64_t v113 = v190;
                unint64_t v114 = 4 * v194;
                if (v114 <= 1) {
                  unint64_t v115 = 1;
                }
                else {
                  unint64_t v115 = 4 * v194;
                }
                if (v115 <= 7)
                {
                  uint64_t v116 = 0;
                  do
                  {
                    uint64_t v117 = 0;
                    do
                    {
                      v111[v117] = v112->i8[v117];
                      ++v117;
                    }
                    while (v114 > v117);
                    ++v116;
                    v111 += 64;
                    char v112 = (int64x2_t *)((char *)v112 + v113);
                  }
                  while (v116 != v108);
                  goto LABEL_129;
                }
                if (v115)
                {
                  unint64_t v118 = (v115 - 1) >> 32;
                  if (!v118)
                  {
                    unsigned int v119 = &v198[0].i8[v109 + v110];
                    uint64_t v120 = v115 & 0x3FFFFFFE0;
                    uint64_t v121 = v115 & 0x3FFFFFFF8;
                    unsigned int v122 = &v198[1].i8[v109 + v110];
                    unint64_t v123 = v189 + 1;
                    unsigned int v124 = v111;
                    unsigned int v125 = v189;
                    while (1)
                    {
                      uint64_t v126 = &v112->i8[v113 * v118];
                      uint64_t v127 = &v111[64 * v118];
                      if ((unint64_t)(&v119[64 * v118] - v126) < 0x20)
                      {
                        int v128 = 0;
                        goto LABEL_122;
                      }
                      if (v115 >= 0x20)
                      {
                        uint64_t v130 = v123;
                        unsigned int v131 = (int64x2_t *)v122;
                        uint64_t v132 = v115 & 0x3FFFFFFE0;
                        do
                        {
                          int64x2_t v17 = v130[-1];
                          int64x2_t v18 = *v130;
                          v131[-1] = v17;
                          *unsigned int v131 = v18;
                          v131 += 2;
                          v130 += 2;
                          v132 -= 32;
                        }
                        while (v132);
                        if (v115 == v120) {
                          goto LABEL_108;
                        }
                        uint64_t v129 = v115 & 0x3FFFFFFE0;
                        if ((v115 & 0x18) == 0)
                        {
                          v126 += v120;
                          v127 += v120;
                          int v128 = v115 & 0xFFFFFFE0;
                          goto LABEL_122;
                        }
                      }
                      else
                      {
                        uint64_t v129 = 0;
                      }
                      v127 += v121;
                      unint64_t v133 = v129 - (v115 & 0x3FFFFFFF8);
                      unint64_t v134 = (uint64_t *)((char *)v125->i64 + v129);
                      unint64_t v135 = (uint64_t *)&v124[v129];
                      do
                      {
                        uint64_t v136 = *v134++;
                        v17.i64[0] = v136;
                        *v135++ = v136;
                        v133 += 8;
                      }
                      while (v133);
                      if (v115 == v121) {
                        goto LABEL_108;
                      }
                      v126 += v121;
                      int v128 = v115 & 0xFFFFFFF8;
LABEL_122:
                      unsigned int v137 = v128 + 1;
                      do
                      {
                        char v138 = *v126++;
                        *v127++ = v138;
                      }
                      while (v114 > v137++);
LABEL_108:
                      ++v118;
                      v122 += 64;
                      unint64_t v123 = (int64x2_t *)((char *)v123 + v113);
                      unsigned int v125 = (int64x2_t *)((char *)v125 + v113);
                      v124 += 64;
                      if (v118 == v108) {
                        goto LABEL_129;
                      }
                    }
                  }
                }
                uint64_t v140 = 0;
                do
                {
                  uint64_t v141 = 0;
                  do
                  {
                    v111[v141] = v112->i8[v141];
                    ++v141;
                  }
                  while (v114 > v141);
                  ++v140;
                  v111 += 64;
                  char v112 = (int64x2_t *)((char *)v112 + v113);
                }
                while (v140 != v108);
              }
LABEL_129:
              uint64_t v142 = 0;
              unsigned int v143 = v187;
              unsigned int v144 = (char *)v188;
              int v145 = v195;
              int v146 = v196;
              a7 = v174;
              uint64_t result = v181;
              unint64_t v64 = v184;
              int v56 = v62;
              int32x4_t v61 = v171;
              do
              {
                uint64_t v159 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)1,1u>::kSubblockPositions[v142 + 1];
                uint64_t v160 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)1,1u>::kSubblockPositions[v142];
                unsigned int v161 = (v145 - 8 * v160) & ~((v145 - 8 * (int)v160) >> 31);
                if (v161 >= 8) {
                  unsigned int v161 = 8;
                }
                unsigned int v162 = (v146 - 4 * v159) & ~((v146 - 4 * (int)v159) >> 31);
                if (v162 >= 4) {
                  unsigned int v162 = 4;
                }
                if (v161) {
                  BOOL v163 = v162 == 0;
                }
                else {
                  BOOL v163 = 1;
                }
                if (v163)
                {
                  char v158 = 0;
                }
                else
                {
                  unsigned __int8 v147 = &v198[16 * v159 + 2 * v160];
                  int64x2_t v148 = v147[1];
                  int64x2_t v149 = v147[4];
                  int64x2_t v150 = v147[5];
                  int64x2_t v151 = vzip1q_s64(*v147, v149);
                  int64x2_t v152 = vzip2q_s64(*v147, v149);
                  int64x2_t v153 = vzip1q_s64(v148, v150);
                  int64x2_t v154 = vzip2q_s64(v148, v150);
                  int64x2_t v17 = v147[8];
                  int64x2_t v18 = v147[9];
                  v147 += 12;
                  int64x2_t v155 = v147[1];
                  int64x2_t v156 = vzip1q_s64(v17, *v147);
                  int64x2_t v157 = vzip2q_s64(v17, *v147);
                  *unsigned int v143 = v151;
                  v143[1] = v152;
                  v143[2] = v156;
                  v143[3] = v157;
                  float64x2_t v143[4] = v153;
                  v143[5] = v154;
                  v143[6] = vzip1q_s64(v18, v155);
                  v143[7] = vzip2q_s64(v18, v155);
                  v143 += 8;
                  char v158 = 127;
                }
                *v144++ = v158;
                v142 += 2;
              }
              while (v142 != 16);
              goto LABEL_92;
            }
            int32x4_t v61 = (int64x2_t *)__dst;
          }
          else
          {
            int32x4_t v61 = v56;
            if (v57) {
              goto LABEL_76;
            }
          }
          uint64_t v65 = 0;
          int32x4_t v66 = v61;
          do
          {
            uint64_t v82 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)1,1u>::kSubblockPositions[v65 + 1];
            uint64_t v83 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)1,1u>::kSubblockPositions[v65];
            unsigned int v84 = (v36 - 8 * v83) & ~((int)(v36 - 8 * v83) >> 31);
            if (v84 >= 8) {
              unsigned int v84 = 8;
            }
            unsigned int v85 = (v30 - 4 * v82) & ~((int)(v30 - 4 * v82) >> 31);
            if (v85 >= 4) {
              unsigned int v85 = 4;
            }
            if (v84) {
              BOOL v86 = v85 == 0;
            }
            else {
              BOOL v86 = 1;
            }
            if (v86)
            {
              char v81 = 0;
            }
            else
            {
              int32x4_t v67 = (int64x2_t *)((char *)&v55[2 * v83] + 4 * a11 * v82);
              int32x4_t v68 = (int64x2_t *)((char *)v67 + v27);
              int64x2_t v70 = *v67;
              int64x2_t v71 = v67[1];
              int32x4_t v69 = (int64x2_t *)((char *)v67 + 2 * a11);
              int64x2_t v72 = v68[1];
              int64x2_t v73 = vzip1q_s64(v70, *v68);
              int64x2_t v74 = vzip2q_s64(v70, *v68);
              int64x2_t v75 = vzip1q_s64(v71, v72);
              int64x2_t v76 = vzip2q_s64(v71, v72);
              int64x2_t v17 = *v69;
              int64x2_t v18 = v69[1];
              uint64_t v77 = (int64x2_t *)((char *)v69 + v27);
              int64x2_t v78 = v77[1];
              int64x2_t v79 = vzip1q_s64(v17, *v77);
              int64x2_t v80 = vzip2q_s64(v17, *v77);
              *int32x4_t v66 = v73;
              v66[1] = v74;
              v66[2] = v79;
              v66[3] = v80;
              v66[4] = v75;
              v66[5] = v76;
              v66[6] = vzip1q_s64(v18, v78);
              v66[7] = vzip2q_s64(v18, v78);
              v66 += 8;
              char v81 = 127;
            }
            *v54++ = v81;
            v65 += 2;
          }
          while (v65 != 16);
          a7 = v174;
          unint64_t v64 = v184;
LABEL_92:
          if (v185)
          {
            memcpy(v56, v61, 0x400uLL);
            uint64_t result = v181;
          }
          unint64_t v31 = v64;
        }
        while (v64 != (v175 >> 4) + 1);
        ++v19;
      }
      while (v19 != v164);
    }
  }
  return result;
}

uint64_t AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)6,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>,false,(AGXHardwareTextureMemoryOrder)3>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, uint64_t a7, unsigned int a8, int a9, int a10, uint64_t a11, char a12)
{
  v157[28] = *MEMORY[0x263EF8340];
  size_t v121 = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v130 = a8;
  uint64_t v19 = a8 >> 4;
  unsigned int v120 = a8 + a10 - 1;
  unsigned int v20 = v120 >> 4;
  uint64_t v134 = a1;
  if (*(void *)(a1 + 168)) {
    int v21 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v21 = 0;
  }
  BOOL v22 = (v21 & 0xD00) == 0 || v21 == 768;
  int v23 = v21 & 0xE00;
  int v25 = !v22 && v23 != 1024;
  int v137 = v25;
  uint64_t result = a1;
  if (v19 <= v20)
  {
    unsigned int v125 = a7 + a9 - 1;
    if (a7 >> 4 <= v125 >> 4)
    {
      uint64_t v133 = (a5 - 1) >> 4;
      uint64_t v119 = (a6 - 1) >> 4;
      int v132 = ((a5 - 1) & 0xF) + 1;
      int v118 = ((a6 - 1) & 0xF) + 1;
      unint64_t v124 = a7;
      uint64_t v116 = v20 + 1;
      unint64_t v117 = (unint64_t)a7 >> 4;
      do
      {
        unsigned int v27 = (16 * v19) | 0xF;
        if (16 * (int)v19 <= v130) {
          unsigned int v28 = v130;
        }
        else {
          unsigned int v28 = 16 * v19;
        }
        if (v120 < v27) {
          unsigned int v27 = v120;
        }
        unsigned int v123 = v28 - 16 * v19;
        int v129 = v27 - v28 + 1;
        if (v19 == v119) {
          unsigned int v29 = v118;
        }
        else {
          unsigned int v29 = 16;
        }
        uint64_t v128 = a3 + (v28 - v130) * a11;
        unint64_t v30 = v117;
        unsigned int v131 = v29;
        do
        {
          unint64_t v31 = 16 * v30;
          unsigned int v32 = 16 * (v30 + 1) - 1;
          if (16 * (int)v30 <= a7) {
            int v33 = a7;
          }
          else {
            int v33 = 16 * v30;
          }
          if (v125 < v32) {
            unsigned int v32 = v125;
          }
          int v34 = v32 - v33 + 1;
          if (v30 == v133) {
            unsigned int v35 = v132;
          }
          else {
            unsigned int v35 = 16;
          }
          BOOL v36 = 1;
          if (16 * (int)v19 >= v130 && v31 >= v124)
          {
            int v37 = v132;
            if (v30 != v133) {
              int v37 = 16;
            }
            BOOL v36 = v34 != v37 || v129 != v29;
          }
          unsigned int v39 = *(_DWORD *)(result + 128) >> (*(unsigned char *)(result + 144) + a12);
          if (v39 <= 1) {
            unsigned int v39 = 1;
          }
          unsigned int v40 = v39 + 15;
          if (v40 < 0x20) {
            unsigned int v41 = 0;
          }
          else {
            unsigned int v41 = 32 - __clz(~(-1 << -(char)__clz((v40 >> 4) - 1)));
          }
          unsigned int v42 = *(_DWORD *)(result + 132) >> (*(unsigned char *)(result + 144) + a12);
          if (v42 <= 1) {
            unsigned int v42 = 1;
          }
          unsigned int v43 = v42 + 15;
          if (v43 < 0x20) {
            unsigned int v44 = 0;
          }
          else {
            unsigned int v44 = 32 - __clz(~(-1 << -(char)__clz((v43 >> 4) - 1)));
          }
          unint64_t v135 = v30 + 1;
          if (v44 | v41)
          {
            int v45 = 0;
            uint64_t v46 = 0;
            BOOL v47 = v41 != 0;
            BOOL v48 = v44 != 0;
            int v49 = 1;
            do
            {
              --v41;
              if (v47) {
                v46 |= (unint64_t)(v49 & v30) << v45++;
              }
              else {
                unsigned int v41 = 0;
              }
              --v44;
              if (v48) {
                v46 |= (unint64_t)(v49 & v19) << v45++;
              }
              else {
                unsigned int v44 = 0;
              }
              v49 *= 2;
              --v45;
              BOOL v48 = v44 != 0;
              BOOL v47 = v41 != 0;
            }
            while (v44 | v41);
          }
          else
          {
            uint64_t v46 = 0;
          }
          uint64_t v50 = v19 * v121 + 640 * v30;
          uint64_t v51 = a7;
          int v52 = v35 < 0x10 || v36;
          int v53 = (unsigned __int8 *)(a4 + 8 * v46);
          unint64_t v54 = v128 + 4 * (v33 - a7);
          int v55 = (void *)(a2 + v50);
          if (v29 < 0x10) {
            int v56 = 1;
          }
          else {
            int v56 = v52;
          }
          uint64_t v136 = v55;
          if (v137)
          {
            int v57 = __dst;
            if (!v56) {
              goto LABEL_77;
            }
            memcpy(__dst, v55, sizeof(__dst));
            LOBYTE(v29) = v131;
            uint64_t result = v134;
          }
          else
          {
            int v57 = v55;
            if (!v56)
            {
LABEL_77:
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)6,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::compressMacroblock(v54, a11, (uint64_t)v57, v53, v35, v29, *(_DWORD *)(*(void *)(result + 208) + 52));
              goto LABEL_78;
            }
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE6ELj1ELh0ELNS7_13SubblockOrderE1EL19AGXTextureFootprint1EEELb0EL29AGXHardwareTextureMemoryOrder3EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = result;
          uint64_t v139 = v57;
          unsigned __int8 v147 = v35;
          unsigned __int8 v148 = v29;
          unsigned int v143 = v123;
          unsigned int v144 = v33 - v31;
          uint64_t v140 = v53;
          unint64_t v141 = v54;
          uint64_t v142 = a11;
          unsigned int v145 = v129;
          unsigned int v146 = v34;
          if (v36)
          {
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(result + 8) + 7384), block);
LABEL_78:
            a7 = v51;
            unint64_t v58 = v135;
            goto LABEL_115;
          }
          int v59 = *(_DWORD *)(*(void *)(result + 208) + 52);
          uint64_t v60 = (uint64_t)&v57[AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)6,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::decompressSubblock((uint64_t)v150, 64, (uint64_t)v57, *v53, v59, v17, v18)];
          uint64_t v63 = v60
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)6,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::decompressSubblock((uint64_t)&v151, 64, v60, v53[1], v59, v61, v62);
          uint64_t v66 = v63
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)6,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::decompressSubblock((uint64_t)&v152, 64, v63, v53[2], v59, v64, v65);
          uint64_t v69 = v66
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)6,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::decompressSubblock((uint64_t)&v153, 64, v66, v53[3], v59, v67, v68);
          uint64_t v72 = v69
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)6,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::decompressSubblock((uint64_t)&v154, 64, v69, v53[4], v59, v70, v71);
          uint64_t v75 = v72
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)6,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::decompressSubblock((uint64_t)&v155, 64, v72, v53[5], v59, v73, v74);
          uint64_t v78 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)6,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::decompressSubblock((uint64_t)&v156, 64, v75, v53[6], v59, v76, v77);
          AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)6,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::decompressSubblock((uint64_t)v157, 64, v75 + v78, v53[7], v59, v79, v80);
          uint64_t v81 = v145;
          a7 = v51;
          unint64_t v58 = v135;
          if (v145 && v146)
          {
            unint64_t v82 = (unint64_t)v143 << 6;
            uint64_t v83 = 4 * v144;
            unsigned int v84 = &v150[v82 + v83];
            unint64_t v85 = v141;
            uint64_t v86 = v142;
            unint64_t v87 = 4 * v146;
            if (v87 <= 1) {
              unint64_t v88 = 1;
            }
            else {
              unint64_t v88 = 4 * v146;
            }
            if (v88 > 7)
            {
              if (!v88 || (unint64_t v91 = (v88 - 1) >> 32) != 0)
              {
                uint64_t v114 = 0;
                do
                {
                  uint64_t v115 = 0;
                  do
                  {
                    v84[v115] = *(unsigned char *)(v85 + v115);
                    ++v115;
                  }
                  while (v87 > v115);
                  ++v114;
                  v84 += 64;
                  v85 += v86;
                }
                while (v114 != v81);
                goto LABEL_114;
              }
              int32x4_t v92 = &v150[v82 + v83];
              uint64_t v93 = v88 & 0x3FFFFFFE0;
              uint64_t v94 = v88 & 0x3FFFFFFF8;
              int32x4_t v95 = &v150[v82 + 16 + v83];
              long long v96 = (long long *)(v141 + 16);
              int32x4_t v97 = v84;
              unint64_t v98 = v141;
              while (2)
              {
                BOOL v99 = (char *)(v85 + v86 * v91);
                int32x4_t v100 = &v84[64 * v91];
                if ((unint64_t)(&v92[64 * v91] - v99) >= 0x20)
                {
                  if (v88 >= 0x20)
                  {
                    int32x4_t v103 = v96;
                    int32x4_t v104 = v95;
                    uint64_t v105 = v88 & 0x3FFFFFFE0;
                    do
                    {
                      long long v106 = *v103;
                      *(v104 - 1) = *(v103 - 1);
                      *int32x4_t v104 = v106;
                      v104 += 2;
                      v103 += 2;
                      v105 -= 32;
                    }
                    while (v105);
                    if (v88 == v93) {
                      goto LABEL_93;
                    }
                    uint64_t v102 = v88 & 0x3FFFFFFE0;
                    if ((v88 & 0x18) == 0)
                    {
                      v99 += v93;
                      v100 += v93;
                      int v101 = v88 & 0xFFFFFFE0;
                      goto LABEL_107;
                    }
                  }
                  else
                  {
                    uint64_t v102 = 0;
                  }
                  v100 += v94;
                  unint64_t v107 = v102 - (v88 & 0x3FFFFFFF8);
                  uint64_t v108 = (uint64_t *)(v98 + v102);
                  unint64_t v109 = &v97[v102];
                  do
                  {
                    uint64_t v110 = *v108++;
                    *v109++ = v110;
                    v107 += 8;
                  }
                  while (v107);
                  if (v88 != v94)
                  {
                    v99 += v94;
                    int v101 = v88 & 0xFFFFFFF8;
                    goto LABEL_107;
                  }
                }
                else
                {
                  int v101 = 0;
LABEL_107:
                  unsigned int v111 = v101 + 1;
                  do
                  {
                    char v112 = *v99++;
                    *v100++ = v112;
                  }
                  while (v87 > v111++);
                }
LABEL_93:
                ++v91;
                v95 += 64;
                long long v96 = (long long *)((char *)v96 + v86);
                v98 += v86;
                v97 += 64;
                if (v91 == v81) {
                  goto LABEL_114;
                }
                continue;
              }
            }
            uint64_t v89 = 0;
            do
            {
              uint64_t v90 = 0;
              do
              {
                v84[v90] = *(unsigned char *)(v85 + v90);
                ++v90;
              }
              while (v87 > v90);
              ++v89;
              v84 += 64;
              v85 += v86;
            }
            while (v89 != v81);
          }
LABEL_114:
          AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)6,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::compressMacroblock((unint64_t)v150, 64, (uint64_t)v139, v140, v147, v148, *(_DWORD *)(*(void *)(v134 + 208) + 52));
LABEL_115:
          if (v137) {
            memcpy(v136, v57, 0x400uLL);
          }
          unint64_t v30 = v58;
          uint64_t result = v134;
          unsigned int v29 = v131;
        }
        while (v58 != (v125 >> 4) + 1);
        ++v19;
      }
      while (v19 != v116);
    }
  }
  return result;
}

uint64_t AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)6,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>,false,(AGXHardwareTextureMemoryOrder)3>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, uint64_t a7, unsigned int a8, int a9, int a10, uint64_t a11, char a12)
{
  v157[28] = *MEMORY[0x263EF8340];
  size_t v121 = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v130 = a8;
  uint64_t v19 = a8 >> 4;
  unsigned int v120 = a8 + a10 - 1;
  unsigned int v20 = v120 >> 4;
  uint64_t v134 = a1;
  if (*(void *)(a1 + 168)) {
    int v21 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v21 = 0;
  }
  BOOL v22 = (v21 & 0xD00) == 0 || v21 == 768;
  int v23 = v21 & 0xE00;
  int v25 = !v22 && v23 != 1024;
  int v137 = v25;
  uint64_t result = a1;
  if (v19 <= v20)
  {
    unsigned int v125 = a7 + a9 - 1;
    if (a7 >> 4 <= v125 >> 4)
    {
      uint64_t v133 = (a5 - 1) >> 4;
      uint64_t v119 = (a6 - 1) >> 4;
      int v132 = ((a5 - 1) & 0xF) + 1;
      int v118 = ((a6 - 1) & 0xF) + 1;
      unint64_t v124 = a7;
      uint64_t v116 = v20 + 1;
      unint64_t v117 = (unint64_t)a7 >> 4;
      do
      {
        unsigned int v27 = (16 * v19) | 0xF;
        if (16 * (int)v19 <= v130) {
          unsigned int v28 = v130;
        }
        else {
          unsigned int v28 = 16 * v19;
        }
        if (v120 < v27) {
          unsigned int v27 = v120;
        }
        unsigned int v123 = v28 - 16 * v19;
        int v129 = v27 - v28 + 1;
        if (v19 == v119) {
          unsigned int v29 = v118;
        }
        else {
          unsigned int v29 = 16;
        }
        uint64_t v128 = a3 + (v28 - v130) * a11;
        unint64_t v30 = v117;
        unsigned int v131 = v29;
        do
        {
          unint64_t v31 = 16 * v30;
          unsigned int v32 = 16 * (v30 + 1) - 1;
          if (16 * (int)v30 <= a7) {
            int v33 = a7;
          }
          else {
            int v33 = 16 * v30;
          }
          if (v125 < v32) {
            unsigned int v32 = v125;
          }
          int v34 = v32 - v33 + 1;
          if (v30 == v133) {
            unsigned int v35 = v132;
          }
          else {
            unsigned int v35 = 16;
          }
          BOOL v36 = 1;
          if (16 * (int)v19 >= v130 && v31 >= v124)
          {
            int v37 = v132;
            if (v30 != v133) {
              int v37 = 16;
            }
            BOOL v36 = v34 != v37 || v129 != v29;
          }
          unsigned int v39 = *(_DWORD *)(result + 128) >> (*(unsigned char *)(result + 144) + a12);
          if (v39 <= 1) {
            unsigned int v39 = 1;
          }
          unsigned int v40 = v39 + 15;
          if (v40 < 0x20) {
            unsigned int v41 = 0;
          }
          else {
            unsigned int v41 = 32 - __clz(~(-1 << -(char)__clz((v40 >> 4) - 1)));
          }
          unsigned int v42 = *(_DWORD *)(result + 132) >> (*(unsigned char *)(result + 144) + a12);
          if (v42 <= 1) {
            unsigned int v42 = 1;
          }
          unsigned int v43 = v42 + 15;
          if (v43 < 0x20) {
            unsigned int v44 = 0;
          }
          else {
            unsigned int v44 = 32 - __clz(~(-1 << -(char)__clz((v43 >> 4) - 1)));
          }
          unint64_t v135 = v30 + 1;
          if (v44 | v41)
          {
            int v45 = 0;
            uint64_t v46 = 0;
            BOOL v47 = v41 != 0;
            BOOL v48 = v44 != 0;
            int v49 = 1;
            do
            {
              --v41;
              if (v47) {
                v46 |= (unint64_t)(v49 & v30) << v45++;
              }
              else {
                unsigned int v41 = 0;
              }
              --v44;
              if (v48) {
                v46 |= (unint64_t)(v49 & v19) << v45++;
              }
              else {
                unsigned int v44 = 0;
              }
              v49 *= 2;
              --v45;
              BOOL v48 = v44 != 0;
              BOOL v47 = v41 != 0;
            }
            while (v44 | v41);
          }
          else
          {
            uint64_t v46 = 0;
          }
          size_t v50 = v19 * v121 + (v30 << 9);
          uint64_t v51 = a7;
          int v52 = v35 < 0x10 || v36;
          int v53 = (unsigned __int8 *)(a4 + 8 * v46);
          unint64_t v54 = v128 + 4 * (v33 - a7);
          int v55 = (void *)(a2 + v50);
          if (v29 < 0x10) {
            int v56 = 1;
          }
          else {
            int v56 = v52;
          }
          uint64_t v136 = v55;
          if (v137)
          {
            int v57 = __dst;
            if (!v56) {
              goto LABEL_77;
            }
            memcpy(__dst, v55, sizeof(__dst));
            LOBYTE(v29) = v131;
            uint64_t result = v134;
          }
          else
          {
            int v57 = v55;
            if (!v56)
            {
LABEL_77:
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)6,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::compressMacroblock(v54, a11, (unint64_t)v57, v53, v35, v29, *(_DWORD *)(*(void *)(result + 208) + 52));
              goto LABEL_78;
            }
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE6ELj1ELh0ELNS7_13SubblockOrderE1EL19AGXTextureFootprint2EEELb0EL29AGXHardwareTextureMemoryOrder3EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = result;
          uint64_t v139 = v57;
          unsigned __int8 v147 = v35;
          unsigned __int8 v148 = v29;
          unsigned int v143 = v123;
          unsigned int v144 = v33 - v31;
          uint64_t v140 = v53;
          unint64_t v141 = v54;
          uint64_t v142 = a11;
          unsigned int v145 = v129;
          unsigned int v146 = v34;
          if (v36)
          {
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(result + 8) + 7384), block);
LABEL_78:
            a7 = v51;
            unint64_t v58 = v135;
            goto LABEL_115;
          }
          int v59 = *(_DWORD *)(*(void *)(result + 208) + 52);
          uint64_t v60 = (uint64_t)&v57[AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)6,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressSubblock((uint64_t)v150, 64, (uint64_t)v57, *v53, v59, v17, v18)];
          uint64_t v63 = v60
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)6,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressSubblock((uint64_t)&v151, 64, v60, v53[1], v59, v61, v62);
          uint64_t v66 = v63
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)6,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressSubblock((uint64_t)&v152, 64, v63, v53[2], v59, v64, v65);
          uint64_t v69 = v66
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)6,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressSubblock((uint64_t)&v153, 64, v66, v53[3], v59, v67, v68);
          uint64_t v72 = v69
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)6,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressSubblock((uint64_t)&v154, 64, v69, v53[4], v59, v70, v71);
          uint64_t v75 = v72
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)6,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressSubblock((uint64_t)&v155, 64, v72, v53[5], v59, v73, v74);
          uint64_t v78 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)6,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressSubblock((uint64_t)&v156, 64, v75, v53[6], v59, v76, v77);
          AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)6,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressSubblock((uint64_t)v157, 64, v75 + v78, v53[7], v59, v79, v80);
          uint64_t v81 = v145;
          a7 = v51;
          unint64_t v58 = v135;
          if (v145 && v146)
          {
            unint64_t v82 = (unint64_t)v143 << 6;
            uint64_t v83 = 4 * v144;
            unsigned int v84 = &v150[v82 + v83];
            unint64_t v85 = v141;
            uint64_t v86 = v142;
            unint64_t v87 = 4 * v146;
            if (v87 <= 1) {
              unint64_t v88 = 1;
            }
            else {
              unint64_t v88 = 4 * v146;
            }
            if (v88 > 7)
            {
              if (!v88 || (unint64_t v91 = (v88 - 1) >> 32) != 0)
              {
                uint64_t v114 = 0;
                do
                {
                  uint64_t v115 = 0;
                  do
                  {
                    v84[v115] = *(unsigned char *)(v85 + v115);
                    ++v115;
                  }
                  while (v87 > v115);
                  ++v114;
                  v84 += 64;
                  v85 += v86;
                }
                while (v114 != v81);
                goto LABEL_114;
              }
              int32x4_t v92 = &v150[v82 + v83];
              uint64_t v93 = v88 & 0x3FFFFFFE0;
              uint64_t v94 = v88 & 0x3FFFFFFF8;
              int32x4_t v95 = &v150[v82 + 16 + v83];
              long long v96 = (long long *)(v141 + 16);
              int32x4_t v97 = v84;
              unint64_t v98 = v141;
              while (2)
              {
                BOOL v99 = (char *)(v85 + v86 * v91);
                int32x4_t v100 = &v84[64 * v91];
                if ((unint64_t)(&v92[64 * v91] - v99) >= 0x20)
                {
                  if (v88 >= 0x20)
                  {
                    int32x4_t v103 = v96;
                    int32x4_t v104 = v95;
                    uint64_t v105 = v88 & 0x3FFFFFFE0;
                    do
                    {
                      long long v106 = *v103;
                      *(v104 - 1) = *(v103 - 1);
                      *int32x4_t v104 = v106;
                      v104 += 2;
                      v103 += 2;
                      v105 -= 32;
                    }
                    while (v105);
                    if (v88 == v93) {
                      goto LABEL_93;
                    }
                    uint64_t v102 = v88 & 0x3FFFFFFE0;
                    if ((v88 & 0x18) == 0)
                    {
                      v99 += v93;
                      v100 += v93;
                      int v101 = v88 & 0xFFFFFFE0;
                      goto LABEL_107;
                    }
                  }
                  else
                  {
                    uint64_t v102 = 0;
                  }
                  v100 += v94;
                  unint64_t v107 = v102 - (v88 & 0x3FFFFFFF8);
                  uint64_t v108 = (uint64_t *)(v98 + v102);
                  unint64_t v109 = &v97[v102];
                  do
                  {
                    uint64_t v110 = *v108++;
                    *v109++ = v110;
                    v107 += 8;
                  }
                  while (v107);
                  if (v88 != v94)
                  {
                    v99 += v94;
                    int v101 = v88 & 0xFFFFFFF8;
                    goto LABEL_107;
                  }
                }
                else
                {
                  int v101 = 0;
LABEL_107:
                  unsigned int v111 = v101 + 1;
                  do
                  {
                    char v112 = *v99++;
                    *v100++ = v112;
                  }
                  while (v87 > v111++);
                }
LABEL_93:
                ++v91;
                v95 += 64;
                long long v96 = (long long *)((char *)v96 + v86);
                v98 += v86;
                v97 += 64;
                if (v91 == v81) {
                  goto LABEL_114;
                }
                continue;
              }
            }
            uint64_t v89 = 0;
            do
            {
              uint64_t v90 = 0;
              do
              {
                v84[v90] = *(unsigned char *)(v85 + v90);
                ++v90;
              }
              while (v87 > v90);
              ++v89;
              v84 += 64;
              v85 += v86;
            }
            while (v89 != v81);
          }
LABEL_114:
          AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)6,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::compressMacroblock((unint64_t)v150, 64, (unint64_t)v139, v140, v147, v148, *(_DWORD *)(*(void *)(v134 + 208) + 52));
LABEL_115:
          if (v137) {
            memcpy(v136, v57, 0x400uLL);
          }
          unint64_t v30 = v58;
          uint64_t result = v134;
          unsigned int v29 = v131;
        }
        while (v58 != (v125 >> 4) + 1);
        ++v19;
      }
      while (v19 != v116);
    }
  }
  return result;
}

uint64_t AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)6,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>,false,(AGXHardwareTextureMemoryOrder)3>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, uint64_t a7, unsigned int a8, int a9, int a10, uint64_t a11, char a12)
{
  v157[28] = *MEMORY[0x263EF8340];
  size_t v121 = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v130 = a8;
  uint64_t v19 = a8 >> 4;
  unsigned int v120 = a8 + a10 - 1;
  unsigned int v20 = v120 >> 4;
  uint64_t v134 = a1;
  if (*(void *)(a1 + 168)) {
    int v21 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v21 = 0;
  }
  BOOL v22 = (v21 & 0xD00) == 0 || v21 == 768;
  int v23 = v21 & 0xE00;
  int v25 = !v22 && v23 != 1024;
  int v137 = v25;
  uint64_t result = a1;
  if (v19 <= v20)
  {
    unsigned int v125 = a7 + a9 - 1;
    if (a7 >> 4 <= v125 >> 4)
    {
      uint64_t v133 = (a5 - 1) >> 4;
      uint64_t v119 = (a6 - 1) >> 4;
      int v132 = ((a5 - 1) & 0xF) + 1;
      int v118 = ((a6 - 1) & 0xF) + 1;
      unint64_t v124 = a7;
      uint64_t v116 = v20 + 1;
      unint64_t v117 = (unint64_t)a7 >> 4;
      do
      {
        unsigned int v27 = (16 * v19) | 0xF;
        if (16 * (int)v19 <= v130) {
          unsigned int v28 = v130;
        }
        else {
          unsigned int v28 = 16 * v19;
        }
        if (v120 < v27) {
          unsigned int v27 = v120;
        }
        unsigned int v123 = v28 - 16 * v19;
        int v129 = v27 - v28 + 1;
        if (v19 == v119) {
          unsigned int v29 = v118;
        }
        else {
          unsigned int v29 = 16;
        }
        uint64_t v128 = a3 + (v28 - v130) * a11;
        unint64_t v30 = v117;
        unsigned int v131 = v29;
        do
        {
          unint64_t v31 = 16 * v30;
          unsigned int v32 = 16 * (v30 + 1) - 1;
          if (16 * (int)v30 <= a7) {
            int v33 = a7;
          }
          else {
            int v33 = 16 * v30;
          }
          if (v125 < v32) {
            unsigned int v32 = v125;
          }
          int v34 = v32 - v33 + 1;
          if (v30 == v133) {
            unsigned int v35 = v132;
          }
          else {
            unsigned int v35 = 16;
          }
          BOOL v36 = 1;
          if (16 * (int)v19 >= v130 && v31 >= v124)
          {
            int v37 = v132;
            if (v30 != v133) {
              int v37 = 16;
            }
            BOOL v36 = v34 != v37 || v129 != v29;
          }
          unsigned int v39 = *(_DWORD *)(result + 128) >> (*(unsigned char *)(result + 144) + a12);
          if (v39 <= 1) {
            unsigned int v39 = 1;
          }
          unsigned int v40 = v39 + 15;
          if (v40 < 0x20) {
            unsigned int v41 = 0;
          }
          else {
            unsigned int v41 = 32 - __clz(~(-1 << -(char)__clz((v40 >> 4) - 1)));
          }
          unsigned int v42 = *(_DWORD *)(result + 132) >> (*(unsigned char *)(result + 144) + a12);
          if (v42 <= 1) {
            unsigned int v42 = 1;
          }
          unsigned int v43 = v42 + 15;
          if (v43 < 0x20) {
            unsigned int v44 = 0;
          }
          else {
            unsigned int v44 = 32 - __clz(~(-1 << -(char)__clz((v43 >> 4) - 1)));
          }
          unint64_t v135 = v30 + 1;
          if (v44 | v41)
          {
            int v45 = 0;
            uint64_t v46 = 0;
            BOOL v47 = v41 != 0;
            BOOL v48 = v44 != 0;
            int v49 = 1;
            do
            {
              --v41;
              if (v47) {
                v46 |= (unint64_t)(v49 & v30) << v45++;
              }
              else {
                unsigned int v41 = 0;
              }
              --v44;
              if (v48) {
                v46 |= (unint64_t)(v49 & v19) << v45++;
              }
              else {
                unsigned int v44 = 0;
              }
              v49 *= 2;
              --v45;
              BOOL v48 = v44 != 0;
              BOOL v47 = v41 != 0;
            }
            while (v44 | v41);
          }
          else
          {
            uint64_t v46 = 0;
          }
          uint64_t v50 = v19 * v121 + 384 * v30;
          uint64_t v51 = a7;
          int v52 = v35 < 0x10 || v36;
          int v53 = (unsigned __int8 *)(a4 + 8 * v46);
          unint64_t v54 = v128 + 4 * (v33 - a7);
          int v55 = (void *)(a2 + v50);
          if (v29 < 0x10) {
            int v56 = 1;
          }
          else {
            int v56 = v52;
          }
          uint64_t v136 = v55;
          if (v137)
          {
            int v57 = __dst;
            if (!v56) {
              goto LABEL_77;
            }
            memcpy(__dst, v55, sizeof(__dst));
            LOBYTE(v29) = v131;
            uint64_t result = v134;
          }
          else
          {
            int v57 = v55;
            if (!v56)
            {
LABEL_77:
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)6,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::compressMacroblock(v54, a11, (uint64_t)v57, v53, v35, v29, *(_DWORD *)(*(void *)(result + 208) + 52));
              goto LABEL_78;
            }
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE6ELj1ELh0ELNS7_13SubblockOrderE1EL19AGXTextureFootprint3EEELb0EL29AGXHardwareTextureMemoryOrder3EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = result;
          uint64_t v139 = v57;
          unsigned __int8 v147 = v35;
          unsigned __int8 v148 = v29;
          unsigned int v143 = v123;
          unsigned int v144 = v33 - v31;
          uint64_t v140 = v53;
          unint64_t v141 = v54;
          uint64_t v142 = a11;
          unsigned int v145 = v129;
          unsigned int v146 = v34;
          if (v36)
          {
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(result + 8) + 7384), block);
LABEL_78:
            a7 = v51;
            unint64_t v58 = v135;
            goto LABEL_115;
          }
          int v59 = *(_DWORD *)(*(void *)(result + 208) + 52);
          uint64_t v60 = (uint64_t)&v57[AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)6,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::decompressSubblock((uint64_t)v150, 64, (uint64_t)v57, *v53, v59, v17, v18)];
          uint64_t v63 = v60
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)6,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::decompressSubblock((uint64_t)&v151, 64, v60, v53[1], v59, v61, v62);
          uint64_t v66 = v63
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)6,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::decompressSubblock((uint64_t)&v152, 64, v63, v53[2], v59, v64, v65);
          uint64_t v69 = v66
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)6,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::decompressSubblock((uint64_t)&v153, 64, v66, v53[3], v59, v67, v68);
          uint64_t v72 = v69
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)6,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::decompressSubblock((uint64_t)&v154, 64, v69, v53[4], v59, v70, v71);
          uint64_t v75 = v72
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)6,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::decompressSubblock((uint64_t)&v155, 64, v72, v53[5], v59, v73, v74);
          uint64_t v78 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)6,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::decompressSubblock((uint64_t)&v156, 64, v75, v53[6], v59, v76, v77);
          AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)6,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::decompressSubblock((uint64_t)v157, 64, v75 + v78, v53[7], v59, v79, v80);
          uint64_t v81 = v145;
          a7 = v51;
          unint64_t v58 = v135;
          if (v145 && v146)
          {
            unint64_t v82 = (unint64_t)v143 << 6;
            uint64_t v83 = 4 * v144;
            unsigned int v84 = &v150[v82 + v83];
            unint64_t v85 = v141;
            uint64_t v86 = v142;
            unint64_t v87 = 4 * v146;
            if (v87 <= 1) {
              unint64_t v88 = 1;
            }
            else {
              unint64_t v88 = 4 * v146;
            }
            if (v88 > 7)
            {
              if (!v88 || (unint64_t v91 = (v88 - 1) >> 32) != 0)
              {
                uint64_t v114 = 0;
                do
                {
                  uint64_t v115 = 0;
                  do
                  {
                    v84[v115] = *(unsigned char *)(v85 + v115);
                    ++v115;
                  }
                  while (v87 > v115);
                  ++v114;
                  v84 += 64;
                  v85 += v86;
                }
                while (v114 != v81);
                goto LABEL_114;
              }
              int32x4_t v92 = &v150[v82 + v83];
              uint64_t v93 = v88 & 0x3FFFFFFE0;
              uint64_t v94 = v88 & 0x3FFFFFFF8;
              int32x4_t v95 = &v150[v82 + 16 + v83];
              long long v96 = (long long *)(v141 + 16);
              int32x4_t v97 = v84;
              unint64_t v98 = v141;
              while (2)
              {
                BOOL v99 = (char *)(v85 + v86 * v91);
                int32x4_t v100 = &v84[64 * v91];
                if ((unint64_t)(&v92[64 * v91] - v99) >= 0x20)
                {
                  if (v88 >= 0x20)
                  {
                    int32x4_t v103 = v96;
                    int32x4_t v104 = v95;
                    uint64_t v105 = v88 & 0x3FFFFFFE0;
                    do
                    {
                      long long v106 = *v103;
                      *(v104 - 1) = *(v103 - 1);
                      *int32x4_t v104 = v106;
                      v104 += 2;
                      v103 += 2;
                      v105 -= 32;
                    }
                    while (v105);
                    if (v88 == v93) {
                      goto LABEL_93;
                    }
                    uint64_t v102 = v88 & 0x3FFFFFFE0;
                    if ((v88 & 0x18) == 0)
                    {
                      v99 += v93;
                      v100 += v93;
                      int v101 = v88 & 0xFFFFFFE0;
                      goto LABEL_107;
                    }
                  }
                  else
                  {
                    uint64_t v102 = 0;
                  }
                  v100 += v94;
                  unint64_t v107 = v102 - (v88 & 0x3FFFFFFF8);
                  uint64_t v108 = (uint64_t *)(v98 + v102);
                  unint64_t v109 = &v97[v102];
                  do
                  {
                    uint64_t v110 = *v108++;
                    *v109++ = v110;
                    v107 += 8;
                  }
                  while (v107);
                  if (v88 != v94)
                  {
                    v99 += v94;
                    int v101 = v88 & 0xFFFFFFF8;
                    goto LABEL_107;
                  }
                }
                else
                {
                  int v101 = 0;
LABEL_107:
                  unsigned int v111 = v101 + 1;
                  do
                  {
                    char v112 = *v99++;
                    *v100++ = v112;
                  }
                  while (v87 > v111++);
                }
LABEL_93:
                ++v91;
                v95 += 64;
                long long v96 = (long long *)((char *)v96 + v86);
                v98 += v86;
                v97 += 64;
                if (v91 == v81) {
                  goto LABEL_114;
                }
                continue;
              }
            }
            uint64_t v89 = 0;
            do
            {
              uint64_t v90 = 0;
              do
              {
                v84[v90] = *(unsigned char *)(v85 + v90);
                ++v90;
              }
              while (v87 > v90);
              ++v89;
              v84 += 64;
              v85 += v86;
            }
            while (v89 != v81);
          }
LABEL_114:
          AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)6,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::compressMacroblock((unint64_t)v150, 64, (uint64_t)v139, v140, v147, v148, *(_DWORD *)(*(void *)(v134 + 208) + 52));
LABEL_115:
          if (v137) {
            memcpy(v136, v57, 0x400uLL);
          }
          unint64_t v30 = v58;
          uint64_t result = v134;
          unsigned int v29 = v131;
        }
        while (v58 != (v125 >> 4) + 1);
        ++v19;
      }
      while (v19 != v116);
    }
  }
  return result;
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)1>,false,(AGXHardwareTextureMemoryOrder)2>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10, uint64_t a11, int a12)
{
  uint64_t v12 = MEMORY[0x270FA5388](a1);
  unsigned int v14 = v13;
  unsigned int v16 = v15;
  unsigned int v18 = v17;
  unsigned int v20 = v19;
  uint64_t v157 = v21;
  uint64_t v158 = v22;
  uint64_t v147 = v23;
  uint64_t v24 = v12;
  uint64_t v188 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(v12, 0);
  uint64_t v25 = v24;
  unsigned int v162 = v14;
  unsigned int v26 = v14 >> 3;
  unsigned int v146 = v14 + a10 - 1;
  unsigned int v148 = v146 >> 3;
  unsigned int v27 = *(unsigned __int8 *)(*(void *)(v24 + 208) + 88);
  unsigned int v28 = *(_DWORD *)(v24 + 112);
  uint64_t v166 = v25;
  if (*(void *)(v25 + 168))
  {
    __int16 CacheMode = IOSurfaceGetCacheMode();
    uint64_t v25 = v166;
    int v30 = CacheMode & 0xF00;
  }
  else
  {
    int v30 = 0;
  }
  BOOL v31 = (v30 & 0xD00) == 0 || v30 == 768;
  int v32 = v30 & 0xE00;
  int v34 = !v31 && v32 != 1024;
  int v167 = v34;
  BOOL isLevelTiled = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::isLevelTiled(v25, *(_DWORD *)(v25 + 144) + a12);
  uint64_t v36 = v166;
  BOOL v156 = isLevelTiled;
  if (v26 <= v148)
  {
    unsigned int v155 = v16 + a9 - 1;
    unsigned int v145 = v16 >> 4;
    if (v16 >> 4 <= v155 >> 4)
    {
      unsigned int v142 = v20 - 1;
      unsigned int v144 = (v18 - 1) >> 3;
      int v164 = ((v20 - 1) & 0xF) + 1;
      unsigned int v165 = (v20 - 1) >> 4;
      int v143 = ((v18 - 1) & 7) + 1;
      uint32x2_t v37 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(v20, v18), (int32x2_t)0xF00000007);
      int8x8_t v38 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32(vadd_s32((int32x2_t)vshl_u32(v37, (uint32x2_t)0xFFFFFFFCFFFFFFFDLL), (int32x2_t)-1))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x2000000010, v37));
      __int32 v153 = v38.i32[0] | v38.i32[1];
      int8x8_t v152 = v38;
      BOOL v150 = v38.i32[1] != 0;
      BOOL v151 = v38.i32[0] != 0;
      unint64_t v141 = 8 * v28 * (unint64_t)v27;
      unsigned int v154 = v16;
      do
      {
        unsigned int v39 = (8 * v26) | 7;
        if (8 * v26 <= v162) {
          int v40 = v162;
        }
        else {
          int v40 = 8 * v26;
        }
        unsigned int v41 = v145;
        if (v146 < v39) {
          unsigned int v39 = v146;
        }
        int v149 = v40 - 8 * v26;
        int v160 = v39 - v40 + 1;
        unsigned int v161 = 8 * v26;
        if (v26 == v144) {
          unsigned int v42 = v143;
        }
        else {
          unsigned int v42 = 8;
        }
        uint64_t v159 = v147 + (v40 - v162) * a11;
        unsigned int v163 = v42;
        do
        {
          unsigned int v43 = 16 * v41;
          unsigned int v44 = 16 * (v41 + 1) - 1;
          if (16 * v41 <= v16) {
            int v45 = v16;
          }
          else {
            int v45 = 16 * v41;
          }
          if (v155 < v44) {
            unsigned int v44 = v155;
          }
          int v46 = v44 - v45 + 1;
          if (v41 == v165) {
            unsigned int v47 = v164;
          }
          else {
            unsigned int v47 = 16;
          }
          BOOL v48 = 1;
          if (v161 >= v162 && v43 >= v16)
          {
            int v49 = v164;
            if (v41 != v165) {
              int v49 = 16;
            }
            BOOL v48 = v46 != v49 || v160 != v42;
          }
          if (v156)
          {
            unsigned int v70 = 0;
            uint64_t v71 = v141 >> (*(unsigned char *)(v36 + 57) != 0);
            char v72 = 1;
            if (v71 > 127)
            {
              if (v71 > 511)
              {
                if (v71 == 512)
                {
                  char v73 = 0;
                  unsigned int v70 = 16;
                  unsigned int v74 = 16;
                }
                else
                {
                  char v73 = 1;
                  unsigned int v74 = 0;
                  if (v71 == 1024)
                  {
                    unsigned int v74 = 8;
                    unsigned int v70 = 16;
                  }
                }
              }
              else if (v71 == 128)
              {
                char v72 = 0;
                char v73 = 0;
                unsigned int v70 = 32;
                unsigned int v74 = 32;
              }
              else
              {
                char v73 = 1;
                unsigned int v74 = 0;
                if (v71 == 256)
                {
                  char v72 = 0;
                  char v73 = 0;
                  unsigned int v74 = 16;
                  unsigned int v70 = 32;
                }
              }
            }
            else
            {
              char v73 = 1;
              unsigned int v74 = 0;
              switch(v71)
              {
                case 4:
                  char v72 = 0;
                  char v73 = 0;
                  unsigned int v74 = 128;
                  unsigned int v70 = 256;
                  break;
                case 5:
                case 6:
                case 7:
                case 9:
                case 10:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 17:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                  break;
                case 8:
                  char v72 = 0;
                  char v73 = 0;
                  unsigned int v70 = 128;
                  unsigned int v74 = 128;
                  break;
                case 16:
                  char v72 = 0;
                  char v73 = 0;
                  unsigned int v74 = 64;
                  unsigned int v70 = 128;
                  break;
                case 32:
                  char v72 = 0;
                  char v73 = 0;
                  unsigned int v70 = 64;
                  unsigned int v74 = 64;
                  break;
                default:
                  if (v71 == 64)
                  {
                    char v72 = 0;
                    char v73 = 0;
                    unsigned int v74 = 32;
                    unsigned int v70 = 64;
                  }
                  break;
              }
            }
            unsigned int v130 = (v70 >> 4) - 1;
            if (v72) {
              unsigned int v131 = 0;
            }
            else {
              unsigned int v131 = 32 - __clz(~(-1 << -(char)__clz(v130)));
            }
            unsigned int v132 = (v74 >> 3) - 1;
            if (v73)
            {
              unsigned int v133 = 0;
              if (v131) {
                goto LABEL_150;
              }
            }
            else
            {
              unsigned int v133 = 32 - __clz(~(-1 << -(char)__clz(v132)));
              if (v133 | v131)
              {
LABEL_150:
                int v134 = 0;
                uint64_t v135 = 0;
                int v136 = v41 & v130;
                int v137 = v26 & v132;
                BOOL v138 = v133 != 0;
                BOOL v139 = v131 != 0;
                int v140 = 1;
                do
                {
                  --v133;
                  if (v138) {
                    v135 |= (unint64_t)(v140 & v137) << v134++;
                  }
                  else {
                    unsigned int v133 = 0;
                  }
                  --v131;
                  if (v139) {
                    v135 |= (unint64_t)(v140 & v136) << v134++;
                  }
                  else {
                    unsigned int v131 = 0;
                  }
                  v140 *= 2;
                  --v134;
                  BOOL v139 = v131 != 0;
                  BOOL v138 = v133 != 0;
                }
                while (v131 | v133);
                goto LABEL_162;
              }
            }
            uint64_t v135 = 0;
LABEL_162:
            unint64_t v58 = ((unint64_t)(v43 / v70 + v161 / v74 * ((v70 + v142) / v70)) << 14) + (v135 << 10);
            goto LABEL_59;
          }
          if (v153)
          {
            int v51 = 0;
            uint64_t v52 = 0;
            int v53 = 1;
            BOOL v54 = v150;
            BOOL v55 = v151;
            __int32 v56 = v152.i32[0];
            __int32 v57 = v152.i32[1];
            do
            {
              --v56;
              if (v55) {
                v52 |= (unint64_t)(v53 & v26) << v51++;
              }
              else {
                __int32 v56 = 0;
              }
              --v57;
              if (v54) {
                v52 |= (unint64_t)(v53 & v41) << v51++;
              }
              else {
                __int32 v57 = 0;
              }
              v53 *= 2;
              --v51;
              BOOL v54 = v57 != 0;
              BOOL v55 = v56 != 0;
            }
            while (v57 | v56);
          }
          else
          {
            uint64_t v52 = 0;
          }
          unint64_t v58 = v52 << 10;
LABEL_59:
          unsigned int v59 = *(_DWORD *)(v36 + 128) >> (*(unsigned char *)(v36 + 144) + a12);
          if (v59 <= 1) {
            unsigned int v59 = 1;
          }
          unsigned int v60 = v59 + 15;
          if (v60 < 0x20) {
            unsigned int v61 = 0;
          }
          else {
            unsigned int v61 = 32 - __clz(~(-1 << -(char)__clz((v60 >> 4) - 1)));
          }
          unsigned int v62 = *(_DWORD *)(v36 + 132) >> (*(unsigned char *)(v36 + 144) + a12);
          if (v62 <= 1) {
            unsigned int v62 = 1;
          }
          unsigned int v63 = v62 + 7;
          if (v63 < 0x10)
          {
            unsigned int v64 = 0;
            if (!v61)
            {
LABEL_81:
              uint64_t v66 = 0;
              goto LABEL_82;
            }
          }
          else
          {
            unsigned int v64 = 32 - __clz(~(-1 << -(char)__clz((v63 >> 3) - 1)));
            if (!(v64 | v61)) {
              goto LABEL_81;
            }
          }
          int v65 = 0;
          uint64_t v66 = 0;
          BOOL v67 = v61 != 0;
          BOOL v68 = v64 != 0;
          int v69 = 1;
          do
          {
            --v61;
            if (v67) {
              v66 |= (unint64_t)(v69 & v41) << v65++;
            }
            else {
              unsigned int v61 = 0;
            }
            --v64;
            if (v68) {
              v66 |= (unint64_t)(v69 & v26) << v65++;
            }
            else {
              unsigned int v64 = 0;
            }
            v69 *= 2;
            --v65;
            BOOL v68 = v64 != 0;
            BOOL v67 = v61 != 0;
          }
          while (v64 | v61);
LABEL_82:
          int v75 = v47 < 0x10 || v48;
          int32x4_t v76 = (unsigned __int8 *)(v158 + 8 * v66);
          unint64_t v77 = v159 + 16 * (v45 - v16);
          uint64_t v78 = (void *)(v157 + v58);
          if (v42 < 8) {
            int v79 = 1;
          }
          else {
            int v79 = v75;
          }
          if (v167)
          {
            if (!v79)
            {
              uint64_t v86 = __dst;
LABEL_95:
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)1>::compressMacroblock(v77, a11, (unint64_t)v86, v76, v47, v42, *(_DWORD *)(*(void *)(v36 + 208) + 52));
              goto LABEL_96;
            }
            int32x4_t v80 = v78;
            char v81 = v47;
            int v82 = v45;
            int v83 = v46;
            unsigned int v84 = v78;
            BOOL v85 = v48;
            memcpy(__dst, v80, sizeof(__dst));
            BOOL v48 = v85;
            uint64_t v78 = v84;
            int v46 = v83;
            int v45 = v82;
            unsigned int v43 = 16 * v41;
            uint64_t v86 = __dst;
            LOBYTE(v47) = v81;
            LOBYTE(v42) = v163;
            uint64_t v36 = v166;
          }
          else
          {
            uint64_t v86 = v78;
            if (!v79) {
              goto LABEL_95;
            }
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE19ELj2ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint1EEELb0EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = v36;
          size_t v169 = v86;
          unsigned __int8 v177 = v47;
          unsigned __int8 v178 = v42;
          unsigned int v173 = v149;
          unsigned int v174 = v45 - v43;
          unint64_t v170 = v76;
          unint64_t v171 = v77;
          uint64_t v172 = a11;
          unsigned int v175 = v160;
          unsigned int v176 = v46;
          if (!v48)
          {
            int v87 = *(_DWORD *)(*(void *)(v36 + 208) + 52);
            unint64_t v88 = (unint64_t)&v86[AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)1>::decompressSubblock(v180, 256, (unint64_t)v86, *v76, v87)];
            unint64_t v89 = v88
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)1>::decompressSubblock(v181, 256, v88, v76[1], v87);
            unint64_t v90 = v89
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)1>::decompressSubblock(v184, 256, v89, v76[2], v87);
            unint64_t v91 = v90
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)1>::decompressSubblock(v185, 256, v90, v76[3], v87);
            unint64_t v92 = v91
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)1>::decompressSubblock(v182, 256, v91, v76[4], v87);
            unint64_t v93 = v92
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)1>::decompressSubblock(v183, 256, v92, v76[5], v87);
            uint64_t v94 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)1>::decompressSubblock(v186, 256, v93, v76[6], v87);
            AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)1>::decompressSubblock(v187, 256, v93 + v94, v76[7], v87);
            uint64_t v95 = v175;
            unsigned int v16 = v154;
            if (!v175 || !v176)
            {
LABEL_130:
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)1>::compressMacroblock((unint64_t)v180, 256, (unint64_t)v169, v170, v177, v178, *(_DWORD *)(*(void *)(v166 + 208) + 52));
              if (!v167) {
                goto LABEL_27;
              }
              goto LABEL_131;
            }
            uint64_t v96 = 0;
            unint64_t v97 = (unint64_t)v173 << 8;
            uint64_t v98 = 16 * v174;
            BOOL v99 = (char *)v180 + v97 + v98;
            unint64_t v100 = v171;
            uint64_t v101 = v172;
            unint64_t v102 = 16 * v176;
            if (v102 <= 1) {
              unint64_t v103 = 1;
            }
            else {
              unint64_t v103 = 16 * v176;
            }
            unint64_t v104 = v97 + v98;
            uint64_t v105 = (char *)v180 + v97 + v98;
            if (v103) {
              BOOL v106 = (v103 - 1) >> 32 == 0;
            }
            else {
              BOOL v106 = 0;
            }
            char v107 = !v106;
            uint64_t v108 = v103 & 0xFFFFFFFE0;
            uint64_t v109 = v103 & 0xFFFFFFFF0;
            uint64_t v110 = (char *)&v180[1] + v104;
            unsigned int v111 = (long long *)(v171 + 16);
            char v112 = v99;
            unint64_t v113 = v171;
            while (2)
            {
              uint64_t v114 = (char *)(v100 + v101 * v96);
              uint64_t v115 = &v99[256 * v96];
              if ((unint64_t)(&v105[256 * v96] - v114) < 0x20) {
                char v116 = 1;
              }
              else {
                char v116 = v107;
              }
              if (v116)
              {
                int v117 = 0;
LABEL_127:
                unsigned int v127 = v117 + 1;
                do
                {
                  char v128 = *v114++;
                  *v115++ = v128;
                }
                while (v102 > v127++);
              }
              else
              {
                if (v103 >= 0x20)
                {
                  unsigned int v123 = v111;
                  unint64_t v124 = v110;
                  uint64_t v125 = v103 & 0xFFFFFFFE0;
                  do
                  {
                    long long v126 = *v123;
                    *(v124 - 1) = *(v123 - 1);
                    *unint64_t v124 = v126;
                    v124 += 2;
                    v123 += 2;
                    v125 -= 32;
                  }
                  while (v125);
                  if (v103 == v108) {
                    goto LABEL_110;
                  }
                  uint64_t v118 = v103 & 0xFFFFFFFE0;
                  if ((v103 & 0x10) == 0)
                  {
                    v114 += v108;
                    v115 += v108;
                    int v117 = v103 & 0xFFFFFFE0;
                    goto LABEL_127;
                  }
                }
                else
                {
                  uint64_t v118 = 0;
                }
                v115 += v109;
                unint64_t v119 = v118 - (v103 & 0xFFFFFFFF0);
                unsigned int v120 = (uint64_t *)(v113 + v118);
                size_t v121 = &v112[v118];
                do
                {
                  uint64_t v122 = *v120++;
                  *(void *)size_t v121 = v122;
                  v121 += 8;
                  v119 += 8;
                }
                while (v119);
                if (v103 != v109)
                {
                  v114 += v109;
                  int v117 = v103 & 0xFFFFFFF0;
                  goto LABEL_127;
                }
              }
LABEL_110:
              ++v96;
              v110 += 256;
              unsigned int v111 = (long long *)((char *)v111 + v101);
              v113 += v101;
              v112 += 256;
              if (v96 == v95) {
                goto LABEL_130;
              }
              continue;
            }
          }
          dispatch_sync(*(dispatch_queue_t *)(*(void *)(v36 + 8) + 7384), block);
LABEL_96:
          unsigned int v16 = v154;
          if (!v167) {
            goto LABEL_27;
          }
LABEL_131:
          memcpy(v78, v86, 0x800uLL);
LABEL_27:
          BOOL v31 = v41++ == v155 >> 4;
          uint64_t v36 = v166;
          unsigned int v42 = v163;
        }
        while (!v31);
        BOOL v31 = v26++ == v148;
      }
      while (!v31);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)1>,false,(AGXHardwareTextureMemoryOrder)2>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10, uint64_t a11, int a12)
{
  uint64_t v12 = MEMORY[0x270FA5388](a1);
  unsigned int v14 = v13;
  unsigned int v16 = v15;
  unsigned int v18 = v17;
  unsigned int v20 = v19;
  uint64_t v148 = v21;
  uint64_t v149 = v22;
  uint64_t v138 = v23;
  uint64_t v24 = v12;
  uint64_t v179 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(v12, 0);
  uint64_t v25 = v24;
  unsigned int v153 = v14;
  unsigned int v26 = v14 >> 3;
  unsigned int v137 = v14 + a10 - 1;
  unsigned int v139 = v137 >> 3;
  unsigned int v27 = *(unsigned __int8 *)(*(void *)(v24 + 208) + 88);
  unsigned int v28 = *(_DWORD *)(v24 + 112);
  uint64_t v157 = v25;
  if (*(void *)(v25 + 168))
  {
    __int16 CacheMode = IOSurfaceGetCacheMode();
    uint64_t v25 = v157;
    int v30 = CacheMode & 0xF00;
  }
  else
  {
    int v30 = 0;
  }
  BOOL v31 = (v30 & 0xD00) == 0 || v30 == 768;
  int v32 = v30 & 0xE00;
  int v34 = !v31 && v32 != 1024;
  int v158 = v34;
  BOOL isLevelTiled = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::isLevelTiled(v25, *(_DWORD *)(v25 + 144) + a12);
  uint64_t v36 = v157;
  BOOL v147 = isLevelTiled;
  if (v26 <= v139)
  {
    unsigned int v146 = v16 + a9 - 1;
    unsigned int v136 = v16 >> 3;
    if (v16 >> 3 <= v146 >> 3)
    {
      unsigned int v133 = v20 - 1;
      unsigned int v135 = (v18 - 1) >> 3;
      int v155 = ((v20 - 1) & 7) + 1;
      unsigned int v156 = (v20 - 1) >> 3;
      int v134 = ((v18 - 1) & 7) + 1;
      uint32x2_t v37 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(v20, v18), (int32x2_t)0x700000007);
      int8x8_t v38 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v37, 3uLL))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x1000000010, v37));
      __int32 v144 = v38.i32[0] | v38.i32[1];
      int8x8_t v143 = v38;
      BOOL v141 = v38.i32[0] != 0;
      BOOL v142 = v38.i32[1] != 0;
      unint64_t v132 = 8 * v28 * (unint64_t)v27;
      unsigned int v145 = v16;
      do
      {
        unsigned int v39 = (8 * v26) | 7;
        if (8 * v26 <= v153) {
          int v40 = v153;
        }
        else {
          int v40 = 8 * v26;
        }
        unsigned int v41 = v136;
        if (v137 < v39) {
          unsigned int v39 = v137;
        }
        int v140 = v40 - 8 * v26;
        int v151 = v39 - v40 + 1;
        unsigned int v152 = 8 * v26;
        if (v26 == v135) {
          unsigned int v42 = v134;
        }
        else {
          unsigned int v42 = 8;
        }
        uint64_t v150 = v138 + (v40 - v153) * a11;
        unsigned int v154 = v42;
        do
        {
          unsigned int v43 = 8 * v41;
          unsigned int v44 = 8 * (v41 + 1) - 1;
          if (8 * v41 <= v16) {
            int v45 = v16;
          }
          else {
            int v45 = 8 * v41;
          }
          if (v146 < v44) {
            unsigned int v44 = v146;
          }
          int v46 = v44 - v45 + 1;
          if (v41 == v156) {
            unsigned int v47 = v155;
          }
          else {
            unsigned int v47 = 8;
          }
          BOOL v48 = 1;
          if (v152 >= v153 && v43 >= v16)
          {
            int v49 = v155;
            if (v41 != v156) {
              int v49 = 8;
            }
            BOOL v48 = v46 != v49 || v151 != v42;
          }
          if (v147)
          {
            unsigned int v70 = 0;
            uint64_t v71 = v132 >> (*(unsigned char *)(v36 + 57) != 0);
            char v72 = 1;
            if (v71 > 127)
            {
              if (v71 > 511)
              {
                if (v71 == 512)
                {
                  char v72 = 0;
                  char v73 = 0;
                  unsigned int v70 = 16;
                  unsigned int v74 = 16;
                }
                else
                {
                  char v73 = 1;
                  unsigned int v74 = 0;
                  if (v71 == 1024)
                  {
                    char v72 = 0;
                    unsigned int v74 = 8;
                    unsigned int v70 = 16;
                  }
                }
              }
              else if (v71 == 128)
              {
                char v72 = 0;
                char v73 = 0;
                unsigned int v70 = 32;
                unsigned int v74 = 32;
              }
              else
              {
                char v73 = 1;
                unsigned int v74 = 0;
                if (v71 == 256)
                {
                  char v72 = 0;
                  char v73 = 0;
                  unsigned int v74 = 16;
                  unsigned int v70 = 32;
                }
              }
            }
            else
            {
              char v73 = 1;
              unsigned int v74 = 0;
              switch(v71)
              {
                case 4:
                  char v72 = 0;
                  char v73 = 0;
                  unsigned int v74 = 128;
                  unsigned int v70 = 256;
                  break;
                case 5:
                case 6:
                case 7:
                case 9:
                case 10:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 17:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                  break;
                case 8:
                  char v72 = 0;
                  char v73 = 0;
                  unsigned int v70 = 128;
                  unsigned int v74 = 128;
                  break;
                case 16:
                  char v72 = 0;
                  char v73 = 0;
                  unsigned int v74 = 64;
                  unsigned int v70 = 128;
                  break;
                case 32:
                  char v72 = 0;
                  char v73 = 0;
                  unsigned int v70 = 64;
                  unsigned int v74 = 64;
                  break;
                default:
                  if (v71 == 64)
                  {
                    char v72 = 0;
                    char v73 = 0;
                    unsigned int v74 = 32;
                    unsigned int v70 = 64;
                  }
                  break;
              }
            }
            unsigned int v121 = (v70 >> 3) - 1;
            if (v72) {
              unsigned int v122 = 0;
            }
            else {
              unsigned int v122 = 32 - __clz(~(-1 << -(char)__clz(v121)));
            }
            unsigned int v123 = (v74 >> 3) - 1;
            if (v73)
            {
              unsigned int v124 = 0;
              if (v122) {
                goto LABEL_143;
              }
            }
            else
            {
              unsigned int v124 = 32 - __clz(~(-1 << -(char)__clz(v123)));
              if (v124 | v122)
              {
LABEL_143:
                int v125 = 0;
                uint64_t v126 = 0;
                int v127 = v41 & v121;
                int v128 = v26 & v123;
                BOOL v129 = v122 != 0;
                BOOL v130 = v124 != 0;
                int v131 = 1;
                do
                {
                  --v122;
                  if (v129) {
                    v126 |= (unint64_t)(v131 & v127) << v125++;
                  }
                  else {
                    unsigned int v122 = 0;
                  }
                  --v124;
                  if (v130) {
                    v126 |= (unint64_t)(v131 & v128) << v125++;
                  }
                  else {
                    unsigned int v124 = 0;
                  }
                  v131 *= 2;
                  --v125;
                  BOOL v130 = v124 != 0;
                  BOOL v129 = v122 != 0;
                }
                while (v124 | v122);
                goto LABEL_155;
              }
            }
            uint64_t v126 = 0;
LABEL_155:
            unint64_t v58 = ((unint64_t)(v43 / v70 + v152 / v74 * ((v70 + v133) / v70)) << 14) + (v126 << 10);
            goto LABEL_59;
          }
          if (v144)
          {
            int v51 = 0;
            uint64_t v52 = 0;
            int v53 = 1;
            BOOL v54 = v141;
            BOOL v55 = v142;
            __int32 v57 = v143.i32[0];
            __int32 v56 = v143.i32[1];
            do
            {
              --v56;
              if (v55) {
                v52 |= (unint64_t)(v53 & v41) << v51++;
              }
              else {
                __int32 v56 = 0;
              }
              --v57;
              if (v54) {
                v52 |= (unint64_t)(v53 & v26) << v51++;
              }
              else {
                __int32 v57 = 0;
              }
              v53 *= 2;
              --v51;
              BOOL v54 = v57 != 0;
              BOOL v55 = v56 != 0;
            }
            while (v57 | v56);
          }
          else
          {
            uint64_t v52 = 0;
          }
          unint64_t v58 = v52 << 10;
LABEL_59:
          unsigned int v59 = *(_DWORD *)(v36 + 128) >> (*(unsigned char *)(v36 + 144) + a12);
          if (v59 <= 1) {
            unsigned int v59 = 1;
          }
          unsigned int v60 = v59 + 7;
          if (v60 < 0x10) {
            unsigned int v61 = 0;
          }
          else {
            unsigned int v61 = 32 - __clz(~(-1 << -(char)__clz((v60 >> 3) - 1)));
          }
          unsigned int v62 = *(_DWORD *)(v36 + 132) >> (*(unsigned char *)(v36 + 144) + a12);
          if (v62 <= 1) {
            unsigned int v62 = 1;
          }
          unsigned int v63 = v62 + 7;
          if (v63 < 0x10)
          {
            unsigned int v64 = 0;
            if (!v61)
            {
LABEL_81:
              uint64_t v66 = 0;
              goto LABEL_82;
            }
          }
          else
          {
            unsigned int v64 = 32 - __clz(~(-1 << -(char)__clz((v63 >> 3) - 1)));
            if (!(v64 | v61)) {
              goto LABEL_81;
            }
          }
          int v65 = 0;
          uint64_t v66 = 0;
          BOOL v67 = v61 != 0;
          BOOL v68 = v64 != 0;
          int v69 = 1;
          do
          {
            --v61;
            if (v67) {
              v66 |= (unint64_t)(v69 & v41) << v65++;
            }
            else {
              unsigned int v61 = 0;
            }
            --v64;
            if (v68) {
              v66 |= (unint64_t)(v69 & v26) << v65++;
            }
            else {
              unsigned int v64 = 0;
            }
            v69 *= 2;
            --v65;
            BOOL v68 = v64 != 0;
            BOOL v67 = v61 != 0;
          }
          while (v64 | v61);
LABEL_82:
          int v75 = v47 < 8 || v48;
          int32x4_t v76 = (unsigned __int8 *)(v149 + 8 * v66);
          unint64_t v77 = v150 + 32 * (v45 - v16);
          uint64_t v78 = (void *)(v148 + v58);
          if (v42 < 8) {
            int v79 = 1;
          }
          else {
            int v79 = v75;
          }
          if (v158)
          {
            if (!v79)
            {
              BOOL v85 = __dst;
LABEL_95:
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)1>::compressMacroblock(v77, a11, (unint64_t)v85, v76, v47, v42, *(_DWORD *)(*(void *)(v36 + 208) + 52));
              goto LABEL_96;
            }
            int32x4_t v80 = v78;
            char v81 = v47;
            int v82 = v78;
            int v83 = v46;
            BOOL v84 = v48;
            memcpy(__dst, v80, sizeof(__dst));
            BOOL v48 = v84;
            unsigned int v43 = 8 * v41;
            BOOL v85 = __dst;
            int v46 = v83;
            uint64_t v78 = v82;
            LOBYTE(v47) = v81;
            LOBYTE(v42) = v154;
            uint64_t v36 = v157;
          }
          else
          {
            BOOL v85 = v78;
            if (!v79) {
              goto LABEL_95;
            }
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE19ELj4ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint1EEELb0EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = v36;
          int v160 = v85;
          unsigned __int8 v168 = v47;
          unsigned __int8 v169 = v42;
          unsigned int v164 = v140;
          unsigned int v165 = v45 - v43;
          unsigned int v161 = v76;
          unint64_t v162 = v77;
          uint64_t v163 = a11;
          unsigned int v166 = v151;
          unsigned int v167 = v46;
          if (!v48)
          {
            int v86 = *(_DWORD *)(*(void *)(v36 + 208) + 52);
            unint64_t v87 = (unint64_t)&v85[AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)1>::decompressSubblock(v171, 256, (unint64_t)v85, *v76, v86)];
            unint64_t v88 = v87
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)1>::decompressSubblock(v173, 256, v87, v76[1], v86);
            unint64_t v89 = v88
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)1>::decompressSubblock(v172, 256, v88, v76[2], v86);
            unint64_t v90 = v89
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)1>::decompressSubblock(v174, 256, v89, v76[3], v86);
            unint64_t v91 = v90
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)1>::decompressSubblock(v175, 256, v90, v76[4], v86);
            unint64_t v92 = v91
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)1>::decompressSubblock(v177, 256, v91, v76[5], v86);
            uint64_t v93 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)1>::decompressSubblock(v176, 256, v92, v76[6], v86);
            AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)1>::decompressSubblock(v178, 256, v92 + v93, v76[7], v86);
            uint64_t v94 = v166;
            unsigned int v16 = v145;
            if (!v166 || !v167)
            {
LABEL_123:
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)1>::compressMacroblock((unint64_t)v171, 256, (unint64_t)v160, v161, v168, v169, *(_DWORD *)(*(void *)(v157 + 208) + 52));
              if (!v158) {
                goto LABEL_27;
              }
              goto LABEL_124;
            }
            uint64_t v95 = 0;
            unint64_t v96 = (unint64_t)v164 << 8;
            uint64_t v97 = 32 * v165;
            uint64_t v98 = &v171[0].i8[v96 + v97];
            unint64_t v99 = v162;
            uint64_t v100 = v163;
            unint64_t v101 = 32 * v167;
            if (v101 <= 1) {
              uint64_t v102 = 1;
            }
            else {
              uint64_t v102 = 32 * v167;
            }
            unint64_t v103 = v96 + v97;
            unint64_t v104 = &v171[0].i8[v96 + v97];
            if (v102) {
              BOOL v105 = (unint64_t)(v102 - 1) >> 32 == 0;
            }
            else {
              BOOL v105 = 0;
            }
            char v106 = !v105;
            uint64_t v107 = v102 & 0x1FFFFFFFE0;
            uint64_t v108 = &v171[1].i8[v103];
            uint64_t v109 = (long long *)(v162 + 16);
            while (2)
            {
              uint64_t v110 = (char *)(v99 + v100 * v95);
              unsigned int v111 = &v98[256 * v95];
              if ((unint64_t)(&v104[256 * v95] - v110) < 0x20) {
                char v112 = 1;
              }
              else {
                char v112 = v106;
              }
              if (v112)
              {
                int v113 = 0;
LABEL_120:
                unsigned int v118 = v113 + 1;
                do
                {
                  char v119 = *v110++;
                  *v111++ = v119;
                }
                while (v101 > v118++);
              }
              else
              {
                uint64_t v114 = v109;
                uint64_t v115 = v108;
                uint64_t v116 = v102 & 0x1FFFFFFFE0;
                do
                {
                  long long v117 = *v114;
                  *((_OWORD *)v115 - 1) = *(v114 - 1);
                  *(_OWORD *)uint64_t v115 = v117;
                  v115 += 32;
                  v114 += 2;
                  v116 -= 32;
                }
                while (v116);
                if (v102 != v107)
                {
                  v110 += v107;
                  v111 += v107;
                  int v113 = v102 & 0xFFFFFFE0;
                  goto LABEL_120;
                }
              }
              ++v95;
              v108 += 256;
              uint64_t v109 = (long long *)((char *)v109 + v100);
              if (v95 == v94) {
                goto LABEL_123;
              }
              continue;
            }
          }
          dispatch_sync(*(dispatch_queue_t *)(*(void *)(v36 + 8) + 7384), block);
LABEL_96:
          unsigned int v16 = v145;
          if (!v158) {
            goto LABEL_27;
          }
LABEL_124:
          memcpy(v78, v85, 0x800uLL);
LABEL_27:
          BOOL v31 = v41++ == v146 >> 3;
          uint64_t v36 = v157;
          unsigned int v42 = v154;
        }
        while (!v31);
        BOOL v31 = v26++ == v139;
      }
      while (!v31);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>,false,(AGXHardwareTextureMemoryOrder)2>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, int a12)
{
  uint64_t v246 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v186 = a8;
  unsigned int v17 = a8 >> 3;
  unsigned int v182 = a8 + a10 - 1;
  unsigned int v184 = v182 >> 3;
  unsigned int v18 = *(unsigned __int8 *)(*(void *)(a1 + 208) + 88);
  unsigned int v19 = *(_DWORD *)(a1 + 112);
  if (*(void *)(a1 + 168)) {
    int v20 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v20 = 0;
  }
  BOOL v21 = (v20 & 0xD00) == 0 || v20 == 768;
  int v22 = v20 & 0xE00;
  int v24 = !v21 && v22 != 1024;
  int v200 = v24;
  BOOL isLevelTiled = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::isLevelTiled(a1, *(_DWORD *)(a1 + 144) + a12);
  if (v17 <= v184)
  {
    unsigned int v192 = a7 + a9 - 1;
    if (a7 >> 4 <= v192 >> 4)
    {
      unsigned int v179 = a5 - 1;
      unsigned int v181 = (a6 - 1) >> 3;
      int v198 = ((a5 - 1) & 0xF) + 1;
      unsigned int v199 = (a5 - 1) >> 4;
      int v180 = ((a6 - 1) & 7) + 1;
      uint32x2_t v28 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0xF00000007);
      *(void *)&long long v29 = 0x2000000020;
      *(int32x2_t *)&long long v30 = vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32(vadd_s32((int32x2_t)vshl_u32(v28, (uint32x2_t)0xFFFFFFFCFFFFFFFDLL), (int32x2_t)-1)))))));
      *(void *)&long long v31 = 0x2000000010;
      *(int8x8_t *)&long long v32 = vbic_s8(*(int8x8_t *)&v30, (int8x8_t)vcgt_u32((uint32x2_t)0x2000000010, v28));
      int v191 = v32 | DWORD1(v32);
      uint64_t v190 = v32;
      BOOL v188 = DWORD1(v32) != 0;
      BOOL v189 = v32 != 0;
      unint64_t v178 = 8 * v19 * (unint64_t)v18;
      do
      {
        unsigned int v33 = (8 * v17) | 7;
        unsigned int v34 = v186;
        if (8 * v17 <= v186) {
          int v35 = v186;
        }
        else {
          int v35 = 8 * v17;
        }
        unsigned int v36 = a7 >> 4;
        if (v182 < v33) {
          unsigned int v33 = v182;
        }
        int v187 = v35 - 8 * v17;
        int v196 = v33 - v35 + 1;
        unsigned int v197 = 8 * v17;
        int v37 = v180;
        if (v17 != v181) {
          int v37 = 8;
        }
        unsigned int v201 = v37;
        uint64_t v195 = a3 + (v35 - v186) * a11;
        uint64_t v38 = a4;
        do
        {
          unsigned int v39 = 16 * v36;
          unsigned int v40 = 16 * (v36 + 1) - 1;
          if (16 * v36 <= a7) {
            int v41 = a7;
          }
          else {
            int v41 = 16 * v36;
          }
          if (v192 < v40) {
            unsigned int v40 = a7 + a9 - 1;
          }
          int v42 = v40 - v41 + 1;
          if (v36 == v199) {
            unsigned int v43 = v198;
          }
          else {
            unsigned int v43 = 16;
          }
          BOOL v44 = 1;
          if (v197 >= v34 && v39 >= a7)
          {
            int v45 = v198;
            if (v36 != v199) {
              int v45 = 16;
            }
            BOOL v44 = v42 != v45 || v196 != v201;
          }
          if (isLevelTiled)
          {
            unsigned int v66 = 0;
            uint64_t v67 = v178 >> (*(unsigned char *)(a1 + 57) != 0);
            char v68 = 1;
            if (v67 > 127)
            {
              if (v67 > 511)
              {
                if (v67 == 512)
                {
                  char v69 = 0;
                  unsigned int v66 = 16;
                  unsigned int v70 = 16;
                }
                else
                {
                  char v69 = 1;
                  unsigned int v70 = 0;
                  if (v67 == 1024)
                  {
                    unsigned int v70 = 8;
                    unsigned int v66 = 16;
                  }
                }
              }
              else if (v67 == 128)
              {
                char v68 = 0;
                char v69 = 0;
                unsigned int v66 = 32;
                unsigned int v70 = 32;
              }
              else
              {
                char v69 = 1;
                unsigned int v70 = 0;
                if (v67 == 256)
                {
                  char v68 = 0;
                  char v69 = 0;
                  unsigned int v70 = 16;
                  unsigned int v66 = 32;
                }
              }
            }
            else
            {
              char v69 = 1;
              unsigned int v70 = 0;
              switch(v67)
              {
                case 4:
                  char v68 = 0;
                  char v69 = 0;
                  unsigned int v70 = 128;
                  unsigned int v66 = 256;
                  break;
                case 5:
                case 6:
                case 7:
                case 9:
                case 10:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 17:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                  break;
                case 8:
                  char v68 = 0;
                  char v69 = 0;
                  unsigned int v66 = 128;
                  unsigned int v70 = 128;
                  break;
                case 16:
                  char v68 = 0;
                  char v69 = 0;
                  unsigned int v70 = 64;
                  unsigned int v66 = 128;
                  break;
                case 32:
                  char v68 = 0;
                  char v69 = 0;
                  unsigned int v66 = 64;
                  unsigned int v70 = 64;
                  break;
                default:
                  if (v67 == 64)
                  {
                    char v68 = 0;
                    char v69 = 0;
                    unsigned int v70 = 32;
                    unsigned int v66 = 64;
                  }
                  break;
              }
            }
            unsigned int v167 = (v66 >> 4) - 1;
            if (v68) {
              unsigned int v168 = 0;
            }
            else {
              unsigned int v168 = 32 - __clz(~(-1 << -(char)__clz(v167)));
            }
            unsigned int v169 = (v70 >> 3) - 1;
            if (v69)
            {
              unsigned int v170 = 0;
              if (v168) {
                goto LABEL_229;
              }
            }
            else
            {
              unsigned int v170 = 32 - __clz(~(-1 << -(char)__clz(v169)));
              if (v170 | v168)
              {
LABEL_229:
                int v171 = 0;
                uint64_t v172 = 0;
                int v173 = v36 & v167;
                int v174 = v17 & v169;
                BOOL v175 = v170 != 0;
                BOOL v176 = v168 != 0;
                int v177 = 1;
                do
                {
                  --v170;
                  if (v175) {
                    v172 |= (unint64_t)(v177 & v174) << v171++;
                  }
                  else {
                    unsigned int v170 = 0;
                  }
                  --v168;
                  if (v176) {
                    v172 |= (unint64_t)(v177 & v173) << v171++;
                  }
                  else {
                    unsigned int v168 = 0;
                  }
                  v177 *= 2;
                  --v171;
                  BOOL v176 = v168 != 0;
                  BOOL v175 = v170 != 0;
                }
                while (v168 | v170);
                goto LABEL_241;
              }
            }
            uint64_t v172 = 0;
LABEL_241:
            unint64_t v54 = ((unint64_t)(v39 / v66 + v197 / v70 * ((v66 + v179) / v66)) << 14) + (v172 << 7);
            goto LABEL_58;
          }
          if (v191)
          {
            int v47 = 0;
            uint64_t v48 = 0;
            int v49 = 1;
            BOOL v51 = v188;
            BOOL v50 = v189;
            int v52 = v190;
            int v53 = HIDWORD(v190);
            do
            {
              --v52;
              if (v50) {
                v48 |= (unint64_t)(v49 & v17) << v47++;
              }
              else {
                int v52 = 0;
              }
              --v53;
              if (v51) {
                v48 |= (unint64_t)(v49 & v36) << v47++;
              }
              else {
                int v53 = 0;
              }
              v49 *= 2;
              --v47;
              BOOL v51 = v53 != 0;
              BOOL v50 = v52 != 0;
            }
            while (v53 | v52);
          }
          else
          {
            uint64_t v48 = 0;
          }
          unint64_t v54 = v48 << 7;
LABEL_58:
          unsigned int v55 = *(_DWORD *)(a1 + 128) >> (*(unsigned char *)(a1 + 144) + a12);
          if (v55 <= 1) {
            unsigned int v55 = 1;
          }
          unsigned int v56 = v55 + 15;
          if (v56 < 0x20) {
            unsigned int v57 = 0;
          }
          else {
            unsigned int v57 = 32 - __clz(~(-1 << -(char)__clz((v56 >> 4) - 1)));
          }
          unsigned int v58 = *(_DWORD *)(a1 + 132) >> (*(unsigned char *)(a1 + 144) + a12);
          if (v58 <= 1) {
            unsigned int v58 = 1;
          }
          unsigned int v59 = v58 + 7;
          if (v59 < 0x10)
          {
            unsigned int v60 = 0;
            if (!v57)
            {
LABEL_80:
              uint64_t v62 = 0;
              goto LABEL_81;
            }
          }
          else
          {
            unsigned int v60 = 32 - __clz(~(-1 << -(char)__clz((v59 >> 3) - 1)));
            if (!(v60 | v57)) {
              goto LABEL_80;
            }
          }
          int v61 = 0;
          uint64_t v62 = 0;
          BOOL v63 = v57 != 0;
          BOOL v64 = v60 != 0;
          int v65 = 1;
          do
          {
            --v57;
            if (v63) {
              v62 |= (unint64_t)(v65 & v36) << v61++;
            }
            else {
              unsigned int v57 = 0;
            }
            --v60;
            if (v64) {
              v62 |= (unint64_t)(v65 & v17) << v61++;
            }
            else {
              unsigned int v60 = 0;
            }
            v65 *= 2;
            --v61;
            BOOL v64 = v60 != 0;
            BOOL v63 = v57 != 0;
          }
          while (v60 | v57);
LABEL_81:
          int v71 = v43 < 0x10 || v44;
          char v72 = (unsigned __int8 *)(v38 + 8 * v62);
          char v73 = (_OWORD *)(a2 + v54);
          if (v201 < 8) {
            int v74 = 1;
          }
          else {
            int v74 = v71;
          }
          if (v200)
          {
            if (!v74)
            {
              int v82 = v213;
LABEL_95:
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::compressMacroblock(v195 + 2 * (v41 - a7), a11, (unint64_t)v82, v72, v43, v201, *(_DWORD *)(*(void *)(a1 + 208) + 52), *(double *)&v32, *(double *)&v30, *(int8x8_t *)&v31, *(double *)&v29, *(double *)&v25, v26, v27);
              if (!v200) {
                goto LABEL_26;
              }
              goto LABEL_210;
            }
            long long v75 = v73[13];
            v213[12] = v73[12];
            v213[13] = v75;
            long long v76 = v73[15];
            v213[14] = v73[14];
            v213[15] = v76;
            long long v77 = v73[9];
            v213[8] = v73[8];
            v213[9] = v77;
            long long v78 = v73[11];
            v213[10] = v73[10];
            v213[11] = v78;
            long long v79 = v73[5];
            v213[4] = v73[4];
            v213[5] = v79;
            long long v80 = v73[7];
            v213[6] = v73[6];
            v213[7] = v80;
            long long v81 = v73[1];
            v213[0] = *v73;
            v213[1] = v81;
            long long v32 = v73[2];
            long long v30 = v73[3];
            int v82 = v213;
            v213[2] = v32;
            v213[3] = v30;
          }
          else
          {
            int v82 = v73;
            if (!v74) {
              goto LABEL_95;
            }
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE0ELj2ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint3EEELb0EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = a1;
          float32x2x2_t v203 = v82;
          unsigned __int8 v211 = v43;
          unsigned __int8 v212 = v201;
          unsigned int v207 = v187;
          unsigned int v208 = v41 - v39;
          float32x2x2_t v204 = (unsigned char *)(v38 + 8 * v62);
          uint64_t v205 = v195 + 2 * (v41 - a7);
          uint64_t v206 = a11;
          unsigned int v209 = v196;
          unsigned int v210 = v42;
          if (!v44)
          {
            uint64_t v83 = *(void *)(a1 + 208);
            int v84 = *(_DWORD *)(v83 + 52);
            unsigned int v85 = *v72;
            if (*v72)
            {
              if (v85 < 0xF0)
              {
                if (v85 == 31)
                {
                  int32x2_t v87 = *(int32x2_t *)((char *)v82 + 8);
                  *(void *)&long long v31 = *((void *)v82 + 2);
                  *(void *)&long long v29 = *((void *)v82 + 3);
                  int32x2_t v25 = vzip1_s32(*(int32x2_t *)v82, v87);
                  int32x2_t v88 = vzip2_s32(*(int32x2_t *)v82, v87);
                  int32x2_t v214 = v25;
                  int32x2_t v218 = v88;
                  *(int32x2_t *)&long long v32 = vzip1_s32(*(int32x2_t *)&v31, *(int32x2_t *)&v29);
                  *(int32x2_t *)&long long v30 = vzip2_s32(*(int32x2_t *)&v31, *(int32x2_t *)&v29);
                  uint64_t v222 = v32;
                  uint64_t v226 = v30;
                  uint64_t v86 = 32;
                }
                else if (v85 == 96)
                {
                  *(int8x8_t *)&long long v32 = vdup_lane_s8(*(int8x8_t *)v82, 0);
                  int32x2_t v214 = (int32x2_t)v32;
                  int32x2_t v218 = (int32x2_t)v32;
                  uint64_t v222 = v32;
                  uint64_t v226 = v32;
                  uint64_t v86 = 1;
                }
                else
                {
                  uint64_t v86 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(&v214, 32, (uint64_t)v82, v85);
                }
              }
              else
              {
                *(int8x8_t *)&long long v32 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock((int8x8_t *)&v214, 32, (uint64_t)v82, v85, *(_DWORD *)(v83 + 52));
                uint64_t v86 = 16;
              }
            }
            else
            {
              uint64_t v86 = 0;
              int32x2_t v214 = 0;
              int32x2_t v218 = 0;
              uint64_t v222 = 0;
              uint64_t v226 = 0;
            }
            unint64_t v89 = (int32x2_t *)((char *)v82 + v86);
            unsigned int v90 = v72[1];
            if (v72[1])
            {
              if (v90 < 0xF0)
              {
                if (v90 == 31)
                {
                  int32x2_t v92 = v89[1];
                  *(int32x2_t *)&long long v31 = v89[2];
                  *(int32x2_t *)&long long v29 = v89[3];
                  int32x2_t v25 = vzip1_s32(*v89, v92);
                  int32x2_t v93 = vzip2_s32(*v89, v92);
                  int32x2_t v215 = v25;
                  int32x2_t v219 = v93;
                  *(int32x2_t *)&long long v32 = vzip1_s32(*(int32x2_t *)&v31, *(int32x2_t *)&v29);
                  *(int32x2_t *)&long long v30 = vzip2_s32(*(int32x2_t *)&v31, *(int32x2_t *)&v29);
                  uint64_t v223 = v32;
                  uint64_t v227 = v30;
                  uint64_t v91 = 32;
                }
                else if (v90 == 96)
                {
                  *(int8x8_t *)&long long v32 = vdup_lane_s8((int8x8_t)*v89, 0);
                  int32x2_t v215 = (int32x2_t)v32;
                  int32x2_t v219 = (int32x2_t)v32;
                  uint64_t v223 = v32;
                  uint64_t v227 = v32;
                  uint64_t v91 = 1;
                }
                else
                {
                  uint64_t v91 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(&v215, 32, (uint64_t)v89, v90);
                }
              }
              else
              {
                *(int8x8_t *)&long long v32 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock((int8x8_t *)&v215, 32, (uint64_t)v89, v90, v84);
                uint64_t v91 = 16;
              }
            }
            else
            {
              uint64_t v91 = 0;
              int32x2_t v215 = 0;
              int32x2_t v219 = 0;
              uint64_t v223 = 0;
              uint64_t v227 = 0;
            }
            uint64_t v94 = (int32x2_t *)((char *)v89 + v91);
            unsigned int v95 = v72[2];
            if (v72[2])
            {
              if (v95 < 0xF0)
              {
                if (v95 == 31)
                {
                  int32x2_t v97 = v94[1];
                  *(int32x2_t *)&long long v31 = v94[2];
                  *(int32x2_t *)&long long v29 = v94[3];
                  int32x2_t v25 = vzip1_s32(*v94, v97);
                  int32x2_t v98 = vzip2_s32(*v94, v97);
                  int32x2_t v230 = v25;
                  int32x2_t v234 = v98;
                  *(int32x2_t *)&long long v32 = vzip1_s32(*(int32x2_t *)&v31, *(int32x2_t *)&v29);
                  *(int32x2_t *)&long long v30 = vzip2_s32(*(int32x2_t *)&v31, *(int32x2_t *)&v29);
                  uint64_t v238 = v32;
                  uint64_t v242 = v30;
                  uint64_t v96 = 32;
                }
                else if (v95 == 96)
                {
                  *(int8x8_t *)&long long v32 = vdup_lane_s8((int8x8_t)*v94, 0);
                  int32x2_t v230 = (int32x2_t)v32;
                  int32x2_t v234 = (int32x2_t)v32;
                  uint64_t v238 = v32;
                  uint64_t v242 = v32;
                  uint64_t v96 = 1;
                }
                else
                {
                  uint64_t v96 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(&v230, 32, (uint64_t)v94, v95);
                }
              }
              else
              {
                *(int8x8_t *)&long long v32 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock((int8x8_t *)&v230, 32, (uint64_t)v94, v95, v84);
                uint64_t v96 = 16;
              }
            }
            else
            {
              uint64_t v96 = 0;
              int32x2_t v230 = 0;
              int32x2_t v234 = 0;
              uint64_t v238 = 0;
              uint64_t v242 = 0;
            }
            unint64_t v99 = (int32x2_t *)((char *)v94 + v96);
            unsigned int v100 = v72[3];
            if (v72[3])
            {
              if (v100 < 0xF0)
              {
                if (v100 == 31)
                {
                  int32x2_t v102 = v99[1];
                  *(int32x2_t *)&long long v31 = v99[2];
                  *(int32x2_t *)&long long v29 = v99[3];
                  int32x2_t v25 = vzip1_s32(*v99, v102);
                  int32x2_t v103 = vzip2_s32(*v99, v102);
                  int32x2_t v231 = v25;
                  int32x2_t v235 = v103;
                  *(int32x2_t *)&long long v32 = vzip1_s32(*(int32x2_t *)&v31, *(int32x2_t *)&v29);
                  *(int32x2_t *)&long long v30 = vzip2_s32(*(int32x2_t *)&v31, *(int32x2_t *)&v29);
                  uint64_t v239 = v32;
                  uint64_t v243 = v30;
                  uint64_t v101 = 32;
                }
                else if (v100 == 96)
                {
                  *(int8x8_t *)&long long v32 = vdup_lane_s8((int8x8_t)*v99, 0);
                  int32x2_t v231 = (int32x2_t)v32;
                  int32x2_t v235 = (int32x2_t)v32;
                  uint64_t v239 = v32;
                  uint64_t v243 = v32;
                  uint64_t v101 = 1;
                }
                else
                {
                  uint64_t v101 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(&v231, 32, (uint64_t)v99, v100);
                }
              }
              else
              {
                *(int8x8_t *)&long long v32 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock((int8x8_t *)&v231, 32, (uint64_t)v99, v100, v84);
                uint64_t v101 = 16;
              }
            }
            else
            {
              uint64_t v101 = 0;
              int32x2_t v231 = 0;
              int32x2_t v235 = 0;
              uint64_t v239 = 0;
              uint64_t v243 = 0;
            }
            unint64_t v104 = (int32x2_t *)((char *)v99 + v101);
            unsigned int v105 = v72[4];
            if (v72[4])
            {
              if (v105 < 0xF0)
              {
                if (v105 == 31)
                {
                  int32x2_t v107 = v104[1];
                  *(int32x2_t *)&long long v31 = v104[2];
                  *(int32x2_t *)&long long v29 = v104[3];
                  int32x2_t v25 = vzip1_s32(*v104, v107);
                  int32x2_t v108 = vzip2_s32(*v104, v107);
                  int32x2_t v216 = v25;
                  int32x2_t v220 = v108;
                  *(int32x2_t *)&long long v32 = vzip1_s32(*(int32x2_t *)&v31, *(int32x2_t *)&v29);
                  *(int32x2_t *)&long long v30 = vzip2_s32(*(int32x2_t *)&v31, *(int32x2_t *)&v29);
                  uint64_t v224 = v32;
                  uint64_t v228 = v30;
                  uint64_t v106 = 32;
                }
                else if (v105 == 96)
                {
                  *(int8x8_t *)&long long v32 = vdup_lane_s8((int8x8_t)*v104, 0);
                  int32x2_t v216 = (int32x2_t)v32;
                  int32x2_t v220 = (int32x2_t)v32;
                  uint64_t v224 = v32;
                  uint64_t v228 = v32;
                  uint64_t v106 = 1;
                }
                else
                {
                  uint64_t v106 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(&v216, 32, (uint64_t)v104, v105);
                }
              }
              else
              {
                *(int8x8_t *)&long long v32 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock((int8x8_t *)&v216, 32, (uint64_t)v104, v105, v84);
                uint64_t v106 = 16;
              }
            }
            else
            {
              uint64_t v106 = 0;
              int32x2_t v216 = 0;
              int32x2_t v220 = 0;
              uint64_t v224 = 0;
              uint64_t v228 = 0;
            }
            uint64_t v109 = (int32x2_t *)((char *)v104 + v106);
            unsigned int v110 = v72[5];
            if (v72[5])
            {
              if (v110 < 0xF0)
              {
                if (v110 == 31)
                {
                  int32x2_t v112 = v109[1];
                  *(int32x2_t *)&long long v31 = v109[2];
                  *(int32x2_t *)&long long v29 = v109[3];
                  int32x2_t v25 = vzip1_s32(*v109, v112);
                  int32x2_t v113 = vzip2_s32(*v109, v112);
                  int32x2_t v217 = v25;
                  int32x2_t v221 = v113;
                  *(int32x2_t *)&long long v32 = vzip1_s32(*(int32x2_t *)&v31, *(int32x2_t *)&v29);
                  *(int32x2_t *)&long long v30 = vzip2_s32(*(int32x2_t *)&v31, *(int32x2_t *)&v29);
                  uint64_t v225 = v32;
                  uint64_t v229 = v30;
                  uint64_t v111 = 32;
                }
                else if (v110 == 96)
                {
                  *(int8x8_t *)&long long v32 = vdup_lane_s8((int8x8_t)*v109, 0);
                  int32x2_t v217 = (int32x2_t)v32;
                  int32x2_t v221 = (int32x2_t)v32;
                  uint64_t v225 = v32;
                  uint64_t v229 = v32;
                  uint64_t v111 = 1;
                }
                else
                {
                  uint64_t v111 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(&v217, 32, (uint64_t)v109, v110);
                }
              }
              else
              {
                *(int8x8_t *)&long long v32 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock((int8x8_t *)&v217, 32, (uint64_t)v109, v110, v84);
                uint64_t v111 = 16;
              }
            }
            else
            {
              uint64_t v111 = 0;
              int32x2_t v217 = 0;
              int32x2_t v221 = 0;
              uint64_t v225 = 0;
              uint64_t v229 = 0;
            }
            uint64_t v114 = (int32x2_t *)((char *)v109 + v111);
            unsigned int v115 = v72[6];
            if (v72[6])
            {
              if (v115 >= 0xF0)
              {
                *(int8x8_t *)&long long v32 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock((int8x8_t *)&v232, 32, (uint64_t)v114, v115, v84);
                uint64_t v116 = 16;
                unsigned int v117 = v72[7];
                if (!v72[7]) {
                  goto LABEL_170;
                }
LABEL_162:
                unsigned int v120 = (int32x2_t *)((char *)v114 + v116);
                if (v117 >= 0xF0)
                {
                  *(int8x8_t *)&long long v32 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock((int8x8_t *)&v233, 32, (uint64_t)v120, v117, v84);
                  uint64_t v121 = v209;
                  if (!v209) {
                    goto LABEL_209;
                  }
LABEL_175:
                  if (!v210) {
                    goto LABEL_209;
                  }
                  uint64_t v124 = 0;
                  uint64_t v125 = 32 * v207;
                  uint64_t v126 = 2 * v208;
                  int v127 = (char *)&v214 + v125 + v126;
                  uint64_t v128 = v205;
                  uint64_t v129 = v206;
                  unint64_t v130 = 2 * v210;
                  if (v130 <= 1) {
                    unint64_t v131 = 1;
                  }
                  else {
                    unint64_t v131 = 2 * v210;
                  }
                  uint64_t v132 = v125 + v126;
                  unsigned int v133 = (char *)&v214 + v125 + v126;
                  if (v131) {
                    BOOL v134 = (v131 - 1) >> 32 == 0;
                  }
                  else {
                    BOOL v134 = 0;
                  }
                  uint64_t v135 = v131 & 0x1FFFFFFE0;
                  uint64_t v136 = v131 & 0x1FFFFFFF8;
                  char v138 = !v134 || v131 < 8;
                  unsigned int v139 = (char *)&v216 + v132;
                  int v140 = (long long *)(v205 + 16);
                  BOOL v141 = v127;
                  uint64_t v142 = v205;
                  while (2)
                  {
                    int8x8_t v143 = (char *)(v128 + v129 * v124);
                    __int32 v144 = &v127[32 * v124];
                    if ((unint64_t)(&v133[32 * v124] - v143) < 0x20) {
                      char v145 = 1;
                    }
                    else {
                      char v145 = v138;
                    }
                    if (v145)
                    {
                      int v146 = 0;
LABEL_206:
                      unsigned int v155 = v146 + 1;
                      do
                      {
                        char v156 = *v143++;
                        *v144++ = v156;
                      }
                      while (v130 > v155++);
                    }
                    else
                    {
                      if (v131 >= 0x20)
                      {
                        uint64_t v148 = v140;
                        uint64_t v149 = v139;
                        uint64_t v150 = v131 & 0x1FFFFFFE0;
                        do
                        {
                          long long v32 = *(v148 - 1);
                          long long v30 = *v148;
                          *(v149 - 1) = v32;
                          *uint64_t v149 = v30;
                          v149 += 2;
                          v148 += 2;
                          v150 -= 32;
                        }
                        while (v150);
                        if (v131 == v135) {
                          goto LABEL_189;
                        }
                        uint64_t v147 = v131 & 0x1FFFFFFE0;
                        if ((v131 & 0x18) == 0)
                        {
                          v143 += v135;
                          v144 += v135;
                          int v146 = v131 & 0xFFFFFFE0;
                          goto LABEL_206;
                        }
                      }
                      else
                      {
                        uint64_t v147 = 0;
                      }
                      v144 += v136;
                      uint64_t v151 = v147 - v136;
                      unsigned int v152 = (uint64_t *)(v142 + v147);
                      unsigned int v153 = &v141[v147];
                      do
                      {
                        uint64_t v154 = *v152++;
                        *(void *)&long long v32 = v154;
                        *(void *)unsigned int v153 = v154;
                        v153 += 8;
                        v151 += 8;
                      }
                      while (v151);
                      if (v131 != v136)
                      {
                        v143 += v136;
                        int v146 = v131 & 0xFFFFFFF8;
                        goto LABEL_206;
                      }
                    }
LABEL_189:
                    ++v124;
                    v139 += 32;
                    int v140 = (long long *)((char *)v140 + v129);
                    v142 += v129;
                    v141 += 32;
                    if (v124 == v121) {
                      goto LABEL_209;
                    }
                    continue;
                  }
                }
                if (v117 == 31)
                {
                  int32x2_t v122 = v120[1];
                  *(int32x2_t *)&long long v31 = v120[2];
                  *(int32x2_t *)&long long v29 = v120[3];
                  int32x2_t v25 = vzip1_s32(*v120, v122);
                  int32x2_t v123 = vzip2_s32(*v120, v122);
                  int32x2_t v233 = v25;
                  int32x2_t v237 = v123;
                  *(int32x2_t *)&long long v32 = vzip1_s32(*(int32x2_t *)&v31, *(int32x2_t *)&v29);
                  *(int32x2_t *)&long long v30 = vzip2_s32(*(int32x2_t *)&v31, *(int32x2_t *)&v29);
                  uint64_t v241 = v32;
                  uint64_t v245 = v30;
                  uint64_t v121 = v209;
                  if (v209) {
                    goto LABEL_175;
                  }
                }
                else
                {
                  if (v117 != 96)
                  {
                    AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(&v233, 32, (uint64_t)v120, v117);
                    uint64_t v121 = v209;
                    if (!v209) {
                      goto LABEL_209;
                    }
                    goto LABEL_175;
                  }
                  *(int8x8_t *)&long long v32 = vdup_lane_s8((int8x8_t)*v120, 0);
                  int32x2_t v233 = (int32x2_t)v32;
                  int32x2_t v237 = (int32x2_t)v32;
                  uint64_t v241 = v32;
                  uint64_t v245 = v32;
                  uint64_t v121 = v209;
                  if (v209) {
                    goto LABEL_175;
                  }
                }
LABEL_209:
                AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::compressMacroblock((unint64_t)&v214, 32, (unint64_t)v203, v204, v211, v212, *(_DWORD *)(*(void *)(a1 + 208) + 52), *(double *)&v32, *(double *)&v30, *(int8x8_t *)&v31, *(double *)&v29, *(double *)&v25, v26, v27);
                unsigned int v34 = v186;
                uint64_t v38 = a4;
                if (!v200) {
                  goto LABEL_26;
                }
                goto LABEL_210;
              }
              if (v115 == 31)
              {
                int32x2_t v118 = v114[1];
                *(int32x2_t *)&long long v31 = v114[2];
                *(int32x2_t *)&long long v29 = v114[3];
                int32x2_t v25 = vzip1_s32(*v114, v118);
                int32x2_t v119 = vzip2_s32(*v114, v118);
                int32x2_t v232 = v25;
                int32x2_t v236 = v119;
                *(int32x2_t *)&long long v32 = vzip1_s32(*(int32x2_t *)&v31, *(int32x2_t *)&v29);
                *(int32x2_t *)&long long v30 = vzip2_s32(*(int32x2_t *)&v31, *(int32x2_t *)&v29);
                uint64_t v240 = v32;
                uint64_t v244 = v30;
                uint64_t v116 = 32;
                unsigned int v117 = v72[7];
                if (!v72[7]) {
                  goto LABEL_170;
                }
                goto LABEL_162;
              }
              if (v115 != 96)
              {
                uint64_t v116 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(&v232, 32, (uint64_t)v114, v115);
                unsigned int v117 = v72[7];
                if (!v72[7]) {
                  goto LABEL_170;
                }
                goto LABEL_162;
              }
              *(int8x8_t *)&long long v32 = vdup_lane_s8((int8x8_t)*v114, 0);
              int32x2_t v232 = (int32x2_t)v32;
              int32x2_t v236 = (int32x2_t)v32;
              uint64_t v240 = v32;
              uint64_t v244 = v32;
              uint64_t v116 = 1;
              unsigned int v117 = v72[7];
              if (v72[7]) {
                goto LABEL_162;
              }
            }
            else
            {
              uint64_t v116 = 0;
              int32x2_t v232 = 0;
              int32x2_t v236 = 0;
              uint64_t v240 = 0;
              uint64_t v244 = 0;
              unsigned int v117 = v72[7];
              if (v72[7]) {
                goto LABEL_162;
              }
            }
LABEL_170:
            int32x2_t v233 = 0;
            int32x2_t v237 = 0;
            uint64_t v241 = 0;
            uint64_t v245 = 0;
            uint64_t v121 = v209;
            if (v209) {
              goto LABEL_175;
            }
            goto LABEL_209;
          }
          dispatch_sync(*(dispatch_queue_t *)(*(void *)(a1 + 8) + 7384), block);
          if (!v200) {
            goto LABEL_26;
          }
LABEL_210:
          long long v158 = *v82;
          long long v159 = v82[1];
          long long v160 = v82[3];
          v73[2] = v82[2];
          v73[3] = v160;
          *char v73 = v158;
          v73[1] = v159;
          long long v161 = v82[4];
          long long v162 = v82[5];
          long long v163 = v82[7];
          v73[6] = v82[6];
          v73[7] = v163;
          v73[4] = v161;
          v73[5] = v162;
          long long v164 = v82[8];
          long long v165 = v82[9];
          long long v166 = v82[11];
          v73[10] = v82[10];
          v73[11] = v166;
          v73[8] = v164;
          v73[9] = v165;
          long long v32 = v82[12];
          long long v30 = v82[13];
          long long v31 = v82[14];
          long long v29 = v82[15];
          v73[14] = v31;
          v73[15] = v29;
          v73[12] = v32;
          v73[13] = v30;
LABEL_26:
          BOOL v21 = v36++ == v192 >> 4;
        }
        while (!v21);
        BOOL v21 = v17++ == v184;
      }
      while (!v21);
    }
  }
}